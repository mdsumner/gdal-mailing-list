From zoltans at geograph.co.za  Thu Sep  1 08:05:37 2016
From: zoltans at geograph.co.za (Zoltan Szecsei)
Date: Thu, 1 Sep 2016 17:05:37 +0200
Subject: [gdal-dev] gdalwarp error 6 issues
Message-ID: <07d8eb4c-901f-8a1e-70b6-84e7a0bc1ecf@geograph.co.za>

Hi,
I've been struggling to get some 3200 orthos mosaicked and tiled.
They are very old and have really bad projection definitions, pixel 
sizes and metadata funnies.
I'm down to the last 261, and have hit a brick wall.
Given that gdalwarp works on this image when I leave out s_srs and t_srs 
(see below), I'm not sure if this is a bug related hiccough or a proj issue.

I have compiled the latest "GDAL 2.1.1, released 2016/07/07" myself, on 
Ubuntu 16.04.1 Desktop:  Linux gl05 4.4.0-36-generic #55-Ubuntu SMP Thu 
Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux



I get the following error from gdalwarp:

    ERROR 6: Unable to load PROJ.4 library (libproj.so), creation of
    OGRCoordinateTransformation failed.

I have tried various different gdalwarp parameters - even leaving 
gdalwarp to sense in input projection and me only specifying the output 
projection.
If I leave out both s_srs and t_srs then gdalwarp does work but 
obliviously does not reproject to Lo19.
I have even tried feeding the output of this redundant gdalwarp into a 
gdalwarp with t_srs, but no success.

Specifying only t_srs (as above) on many other orthos on Lo17 & Lo21 
does work so it is likely that the way this projection is embedded in 
this ortho is the problem.
I have tried stripping it out with gdal_edit.py but haven't gotten that 
right yet.

Anyone with pointers or ideas on this?

My last effort before email this list is below, as is the gdalinfo output.

Thanks in advance,
Zoltan

gdalwarp -s_srs '+proj=tmerc +lat_0=0 +lon_0=21  +k=1 +x_0=0 +y_0=0 
+datum=Hartebeesthoek94 +units=m +no_defs'  \
          -t_srs '+proj=tmerc +lat_0=0 +lon_0=19  +k=1 +x_0=0 +y_0=0 
+datum=WGS84 +units=m +no_defs' \
          -r cubicspline -multi -overwrite -of GTiff -co TFW=YES -co 
COMPRESS=JPEG -co JPEG_QUALITY=75 -tr 0.75 -0.75 \
          /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif \
/mnt/sda1/gisdata/raster/used_2016/dwa_2000/3220/3220CC01.tif
#
#
gdalinfo   /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
#
Driver: GTiff/GeoTIFF
Files: /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
Size is 6729, 7720
Coordinate System is:
LOCAL_CS[" Geocoding information not available Projection Name = WGS 
1984 Lo21 Units = meters GeoTIFF Units = meters",
     UNIT["metre",1,
         AUTHORITY["EPSG","9001"]]]
Origin = (-93872.189308887900552,-3625321.216973003931344)
Pixel Size = (0.750000000000000,-0.750000000000000)
Metadata:
   AREA_OR_POINT=Area
   TIFFTAG_DOCUMENTNAME=hetotiff
   TIFFTAG_IMAGEDESCRIPTION=ER Mapper 6.4 hetotiff
   TIFFTAG_RESOLUTIONUNIT=2 (pixels/inch)
   TIFFTAG_SOFTWARE=IMAGINE TIFF Support
Copyright 1991 - 1999 by ERDAS, Inc. All Rights Reserved
@(#)$RCSfile: etif.c $ $Revision: 1.9.1.3 $ $Date: 2002/07/29 15:39:06EDT $
   TIFFTAG_XRESOLUTION=1
   TIFFTAG_YRESOLUTION=1
Image Structure Metadata:
   INTERLEAVE=PIXEL
Corner Coordinates:
Upper Left  (  -93872.189,-3625321.217)
Lower Left  (  -93872.189,-3631111.217)
Upper Right (  -88825.439,-3625321.217)
Lower Right (  -88825.439,-3631111.217)
Center      (  -91348.814,-3628216.217)
Band 1 Block=6729x1 Type=Byte, ColorInterp=Red
Band 2 Block=6729x1 Type=Byte, ColorInterp=Green
Band 3 Block=6729x1 Type=Byte, ColorInterp=Blue
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160901/ef14bf6d/attachment.html>

From even.rouault at spatialys.com  Thu Sep  1 09:40:38 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 1 Sep 2016 18:40:38 +0200
Subject: [gdal-dev] gdalwarp error 6 issues
In-Reply-To: <07d8eb4c-901f-8a1e-70b6-84e7a0bc1ecf@geograph.co.za>
References: <07d8eb4c-901f-8a1e-70b6-84e7a0bc1ecf@geograph.co.za>
Message-ID: <201609011840.38721.even.rouault@spatialys.com>

Zoltan,

> Hi,
> I've been struggling to get some 3200 orthos mosaicked and tiled.
> They are very old and have really bad projection definitions, pixel
> sizes and metadata funnies.
> I'm down to the last 261, and have hit a brick wall.
> Given that gdalwarp works on this image when I leave out s_srs and t_srs
> (see below), I'm not sure if this is a bug related hiccough or a proj
> issue.
> 
> I have compiled the latest "GDAL 2.1.1, released 2016/07/07" myself, on
> Ubuntu 16.04.1 Desktop:  Linux gl05 4.4.0-36-generic #55-Ubuntu SMP Thu
> Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
> 
> 
> 
> I get the following error from gdalwarp:
> 
>     ERROR 6: Unable to load PROJ.4 library (libproj.so), creation of
>     OGRCoordinateTransformation failed.

Hum, if you get this message, then reprojection should never succeed. How did 
you compile GDAL with ./configure --with-static-proj4 or without it ? If 
without it, you must be sure to have the development package of proj installed 
so that proj.so links to proj.so.1 or proj.so.9 or whatever the soname of your 
proj is.

> 
> I have tried various different gdalwarp parameters - even leaving
> gdalwarp to sense in input projection and me only specifying the output
> projection.
> If I leave out both s_srs and t_srs then gdalwarp does work but
> obliviously does not reproject to Lo19.

> I have even tried feeding the output of this redundant gdalwarp into a
> gdalwarp with t_srs, but no success.
> 
> Specifying only t_srs (as above) on many other orthos on Lo17 & Lo21
> does work so it is likely that the way this projection is embedded in
> this ortho is the problem.

Yes, the way ER Mapper encodes the projection is non-standard and thus GDAL 
reports a LOCAL_CS that cannot be used to automatically get a proj.4 string. 
GDAL has some handling for some of those non-standard encodings, but not for 
your ones, so overriding it with -s_srs is needed.

> I have tried stripping it out with gdal_edit.py but haven't gotten that
> right yet.
> 
> Anyone with pointers or ideas on this?

+datum=Hartebeesthoek94 is not recognized by proj.4. 

Why not using EPSG:2049 instead or the proj.4 expension ? I also see that 
gdalsrsinfo EPSG:2049 expands to

PROJ.4 : '+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu 
+ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs '

So note the +axis=wsu parameter for the south-orientated variant

Or perhaps this doesn't make sense in your context of producing a GeoTIFF, so 
in that case you might just want to use the above proj.4 string without 
+axis=wsu. Note that for proj the Hartebeesthoek94 datum is equivalent to 
WGS84.

Even

> 
> My last effort before email this list is below, as is the gdalinfo output.
> 
> Thanks in advance,
> Zoltan
> 
> gdalwarp -s_srs '+proj=tmerc +lat_0=0 +lon_0=21  +k=1 +x_0=0 +y_0=0
> +datum=Hartebeesthoek94 +units=m +no_defs'  \
>           -t_srs '+proj=tmerc +lat_0=0 +lon_0=19  +k=1 +x_0=0 +y_0=0
> +datum=WGS84 +units=m +no_defs' \
>           -r cubicspline -multi -overwrite -of GTiff -co TFW=YES -co
> COMPRESS=JPEG -co JPEG_QUALITY=75 -tr 0.75 -0.75 \
>           /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif \
> /mnt/sda1/gisdata/raster/used_2016/dwa_2000/3220/3220CC01.tif
> #
> #
> gdalinfo   /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
> #
> Driver: GTiff/GeoTIFF
> Files: /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
> Size is 6729, 7720
> Coordinate System is:
> LOCAL_CS[" Geocoding information not available Projection Name = WGS
> 1984 Lo21 Units = meters GeoTIFF Units = meters",
>      UNIT["metre",1,
>          AUTHORITY["EPSG","9001"]]]
> Origin = (-93872.189308887900552,-3625321.216973003931344)
> Pixel Size = (0.750000000000000,-0.750000000000000)
> Metadata:
>    AREA_OR_POINT=Area
>    TIFFTAG_DOCUMENTNAME=hetotiff
>    TIFFTAG_IMAGEDESCRIPTION=ER Mapper 6.4 hetotiff
>    TIFFTAG_RESOLUTIONUNIT=2 (pixels/inch)
>    TIFFTAG_SOFTWARE=IMAGINE TIFF Support
> Copyright 1991 - 1999 by ERDAS, Inc. All Rights Reserved
> @(#)$RCSfile: etif.c $ $Revision: 1.9.1.3 $ $Date: 2002/07/29 15:39:06EDT $
>    TIFFTAG_XRESOLUTION=1
>    TIFFTAG_YRESOLUTION=1
> Image Structure Metadata:
>    INTERLEAVE=PIXEL
> Corner Coordinates:
> Upper Left  (  -93872.189,-3625321.217)
> Lower Left  (  -93872.189,-3631111.217)
> Upper Right (  -88825.439,-3625321.217)
> Lower Right (  -88825.439,-3631111.217)
> Center      (  -91348.814,-3628216.217)
> Band 1 Block=6729x1 Type=Byte, ColorInterp=Red
> Band 2 Block=6729x1 Type=Byte, ColorInterp=Green
> Band 3 Block=6729x1 Type=Byte, ColorInterp=Blue

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From zoltans at geograph.co.za  Thu Sep  1 10:41:18 2016
From: zoltans at geograph.co.za (Zoltan Szecsei)
Date: Thu, 1 Sep 2016 19:41:18 +0200
Subject: [gdal-dev] gdalwarp error 6 issues
In-Reply-To: <201609011840.38721.even.rouault@spatialys.com>
References: <07d8eb4c-901f-8a1e-70b6-84e7a0bc1ecf@geograph.co.za>
 <201609011840.38721.even.rouault@spatialys.com>
Message-ID: <1768ee67-b91a-ea69-12cd-c1eb1107edf8@geograph.co.za>

Hi Even,
Long time no chat - Hope all is well with you. :-)

When compiling GDAL, I just used all defaults, so it was just a 
"straight" ./configure.

The errant images are ENU on WGS84 Lo17 and Lo21, and I need to 
reproject to same but Lo19
(They are on the fringes of Lo19)

I tried gdal_edit.py to force a better representation of where those 
images are, but no luck.
I used variations of the s-srs line below (ie: replacing HBK94 with 
WGS84) and also 1 or 2 EPSG codes - but I was guessing the EPSG ones.

Is there not a way to stamp out the existing proj info, and replace with 
the desired source projection stanza using gdal_edit.py?

I've got a batch run in at the moment so don't want to fiddle until that 
has finished.
I will also recompile with --with-static-proj4.

Thanks for the pointers.
Regards,
Zoltan





On 2016-09-01 18:40, Even Rouault wrote:
> Zoltan,
>
>> Hi,
>> I've been struggling to get some 3200 orthos mosaicked and tiled.
>> They are very old and have really bad projection definitions, pixel
>> sizes and metadata funnies.
>> I'm down to the last 261, and have hit a brick wall.
>> Given that gdalwarp works on this image when I leave out s_srs and t_srs
>> (see below), I'm not sure if this is a bug related hiccough or a proj
>> issue.
>>
>> I have compiled the latest "GDAL 2.1.1, released 2016/07/07" myself, on
>> Ubuntu 16.04.1 Desktop:  Linux gl05 4.4.0-36-generic #55-Ubuntu SMP Thu
>> Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
>>
>>
>>
>> I get the following error from gdalwarp:
>>
>>      ERROR 6: Unable to load PROJ.4 library (libproj.so), creation of
>>      OGRCoordinateTransformation failed.
> Hum, if you get this message, then reprojection should never succeed. How did
> you compile GDAL with ./configure --with-static-proj4 or without it ? If
> without it, you must be sure to have the development package of proj installed
> so that proj.so links to proj.so.1 or proj.so.9 or whatever the soname of your
> proj is.
>
>> I have tried various different gdalwarp parameters - even leaving
>> gdalwarp to sense in input projection and me only specifying the output
>> projection.
>> If I leave out both s_srs and t_srs then gdalwarp does work but
>> obliviously does not reproject to Lo19.
>> I have even tried feeding the output of this redundant gdalwarp into a
>> gdalwarp with t_srs, but no success.
>>
>> Specifying only t_srs (as above) on many other orthos on Lo17 & Lo21
>> does work so it is likely that the way this projection is embedded in
>> this ortho is the problem.
> Yes, the way ER Mapper encodes the projection is non-standard and thus GDAL
> reports a LOCAL_CS that cannot be used to automatically get a proj.4 string.
> GDAL has some handling for some of those non-standard encodings, but not for
> your ones, so overriding it with -s_srs is needed.
>
>> I have tried stripping it out with gdal_edit.py but haven't gotten that
>> right yet.
>>
>> Anyone with pointers or ideas on this?
> +datum=Hartebeesthoek94 is not recognized by proj.4.
>
> Why not using EPSG:2049 instead or the proj.4 expension ? I also see that
> gdalsrsinfo EPSG:2049 expands to
>
> PROJ.4 : '+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu
> +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs '
>
> So note the +axis=wsu parameter for the south-orientated variant
>
> Or perhaps this doesn't make sense in your context of producing a GeoTIFF, so
> in that case you might just want to use the above proj.4 string without
> +axis=wsu. Note that for proj the Hartebeesthoek94 datum is equivalent to
> WGS84.
>
> Even
>
>> My last effort before email this list is below, as is the gdalinfo output.
>>
>> Thanks in advance,
>> Zoltan
>>
>> gdalwarp -s_srs '+proj=tmerc +lat_0=0 +lon_0=21  +k=1 +x_0=0 +y_0=0
>> +datum=Hartebeesthoek94 +units=m +no_defs'  \
>>            -t_srs '+proj=tmerc +lat_0=0 +lon_0=19  +k=1 +x_0=0 +y_0=0
>> +datum=WGS84 +units=m +no_defs' \
>>            -r cubicspline -multi -overwrite -of GTiff -co TFW=YES -co
>> COMPRESS=JPEG -co JPEG_QUALITY=75 -tr 0.75 -0.75 \
>>            /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif \
>> /mnt/sda1/gisdata/raster/used_2016/dwa_2000/3220/3220CC01.tif
>> #
>> #
>> gdalinfo   /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
>> #
>> Driver: GTiff/GeoTIFF
>> Files: /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
>> Size is 6729, 7720
>> Coordinate System is:
>> LOCAL_CS[" Geocoding information not available Projection Name = WGS
>> 1984 Lo21 Units = meters GeoTIFF Units = meters",
>>       UNIT["metre",1,
>>           AUTHORITY["EPSG","9001"]]]
>> Origin = (-93872.189308887900552,-3625321.216973003931344)
>> Pixel Size = (0.750000000000000,-0.750000000000000)
>> Metadata:
>>     AREA_OR_POINT=Area
>>     TIFFTAG_DOCUMENTNAME=hetotiff
>>     TIFFTAG_IMAGEDESCRIPTION=ER Mapper 6.4 hetotiff
>>     TIFFTAG_RESOLUTIONUNIT=2 (pixels/inch)
>>     TIFFTAG_SOFTWARE=IMAGINE TIFF Support
>> Copyright 1991 - 1999 by ERDAS, Inc. All Rights Reserved
>> @(#)$RCSfile: etif.c $ $Revision: 1.9.1.3 $ $Date: 2002/07/29 15:39:06EDT $
>>     TIFFTAG_XRESOLUTION=1
>>     TIFFTAG_YRESOLUTION=1
>> Image Structure Metadata:
>>     INTERLEAVE=PIXEL
>> Corner Coordinates:
>> Upper Left  (  -93872.189,-3625321.217)
>> Lower Left  (  -93872.189,-3631111.217)
>> Upper Right (  -88825.439,-3625321.217)
>> Lower Right (  -88825.439,-3631111.217)
>> Center      (  -91348.814,-3628216.217)
>> Band 1 Block=6729x1 Type=Byte, ColorInterp=Red
>> Band 2 Block=6729x1 Type=Byte, ColorInterp=Green
>> Band 3 Block=6729x1 Type=Byte, ColorInterp=Blue


From even.rouault at spatialys.com  Thu Sep  1 12:12:19 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 1 Sep 2016 21:12:19 +0200
Subject: [gdal-dev] gdalwarp error 6 issues
In-Reply-To: <1768ee67-b91a-ea69-12cd-c1eb1107edf8@geograph.co.za>
References: <07d8eb4c-901f-8a1e-70b6-84e7a0bc1ecf@geograph.co.za>
 <201609011840.38721.even.rouault@spatialys.com>
 <1768ee67-b91a-ea69-12cd-c1eb1107edf8@geograph.co.za>
Message-ID: <201609012112.20146.even.rouault@spatialys.com>

Le jeudi 01 septembre 2016 19:41:18, Zoltan Szecsei a écrit :
> Hi Even,
> Long time no chat - Hope all is well with you. :-)
> 
> When compiling GDAL, I just used all defaults, so it was just a
> "straight" ./configure.
> 
> The errant images are ENU on WGS84 Lo17 and Lo21, and I need to
> reproject to same but Lo19
> (They are on the fringes of Lo19)
> 
> I tried gdal_edit.py to force a better representation of where those
> images are, but no luck.
> I used variations of the s-srs line below (ie: replacing HBK94 with
> WGS84) and also 1 or 2 EPSG codes - but I was guessing the EPSG ones.
> 
> Is there not a way to stamp out the existing proj info, and replace with
> the desired source projection stanza using gdal_edit.py?

"gdal_edit.py -a_srs srs_def foo.tif" where srs_def is either a proj.4 string 
or EPSG:xxxx code. I've just tried it on a GeoTIFF with a LOCAL_CS originally 
and this worked.

> 
> I've got a batch run in at the moment so don't want to fiddle until that
> has finished.
> I will also recompile with --with-static-proj4.
> 
> Thanks for the pointers.
> Regards,
> Zoltan
> 
> On 2016-09-01 18:40, Even Rouault wrote:
> > Zoltan,
> > 
> >> Hi,
> >> I've been struggling to get some 3200 orthos mosaicked and tiled.
> >> They are very old and have really bad projection definitions, pixel
> >> sizes and metadata funnies.
> >> I'm down to the last 261, and have hit a brick wall.
> >> Given that gdalwarp works on this image when I leave out s_srs and t_srs
> >> (see below), I'm not sure if this is a bug related hiccough or a proj
> >> issue.
> >> 
> >> I have compiled the latest "GDAL 2.1.1, released 2016/07/07" myself, on
> >> Ubuntu 16.04.1 Desktop:  Linux gl05 4.4.0-36-generic #55-Ubuntu SMP Thu
> >> Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
> >> 
> >> I get the following error from gdalwarp:
> >>      ERROR 6: Unable to load PROJ.4 library (libproj.so), creation of
> >>      OGRCoordinateTransformation failed.
> > 
> > Hum, if you get this message, then reprojection should never succeed. How
> > did you compile GDAL with ./configure --with-static-proj4 or without it
> > ? If without it, you must be sure to have the development package of
> > proj installed so that proj.so links to proj.so.1 or proj.so.9 or
> > whatever the soname of your proj is.
> > 
> >> I have tried various different gdalwarp parameters - even leaving
> >> gdalwarp to sense in input projection and me only specifying the output
> >> projection.
> >> If I leave out both s_srs and t_srs then gdalwarp does work but
> >> obliviously does not reproject to Lo19.
> >> I have even tried feeding the output of this redundant gdalwarp into a
> >> gdalwarp with t_srs, but no success.
> >> 
> >> Specifying only t_srs (as above) on many other orthos on Lo17 & Lo21
> >> does work so it is likely that the way this projection is embedded in
> >> this ortho is the problem.
> > 
> > Yes, the way ER Mapper encodes the projection is non-standard and thus
> > GDAL reports a LOCAL_CS that cannot be used to automatically get a
> > proj.4 string. GDAL has some handling for some of those non-standard
> > encodings, but not for your ones, so overriding it with -s_srs is
> > needed.
> > 
> >> I have tried stripping it out with gdal_edit.py but haven't gotten that
> >> right yet.
> >> 
> >> Anyone with pointers or ideas on this?
> > 
> > +datum=Hartebeesthoek94 is not recognized by proj.4.
> > 
> > Why not using EPSG:2049 instead or the proj.4 expension ? I also see that
> > gdalsrsinfo EPSG:2049 expands to
> > 
> > PROJ.4 : '+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu
> > +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs '
> > 
> > So note the +axis=wsu parameter for the south-orientated variant
> > 
> > Or perhaps this doesn't make sense in your context of producing a
> > GeoTIFF, so in that case you might just want to use the above proj.4
> > string without +axis=wsu. Note that for proj the Hartebeesthoek94 datum
> > is equivalent to WGS84.
> > 
> > Even
> > 
> >> My last effort before email this list is below, as is the gdalinfo
> >> output.
> >> 
> >> Thanks in advance,
> >> Zoltan
> >> 
> >> gdalwarp -s_srs '+proj=tmerc +lat_0=0 +lon_0=21  +k=1 +x_0=0 +y_0=0
> >> +datum=Hartebeesthoek94 +units=m +no_defs'  \
> >> 
> >>            -t_srs '+proj=tmerc +lat_0=0 +lon_0=19  +k=1 +x_0=0 +y_0=0
> >> 
> >> +datum=WGS84 +units=m +no_defs' \
> >> 
> >>            -r cubicspline -multi -overwrite -of GTiff -co TFW=YES -co
> >> 
> >> COMPRESS=JPEG -co JPEG_QUALITY=75 -tr 0.75 -0.75 \
> >> 
> >>            /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif \
> >> 
> >> /mnt/sda1/gisdata/raster/used_2016/dwa_2000/3220/3220CC01.tif
> >> #
> >> #
> >> gdalinfo   /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
> >> #
> >> Driver: GTiff/GeoTIFF
> >> Files: /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
> >> Size is 6729, 7720
> >> Coordinate System is:
> >> LOCAL_CS[" Geocoding information not available Projection Name = WGS
> >> 1984 Lo21 Units = meters GeoTIFF Units = meters",
> >> 
> >>       UNIT["metre",1,
> >>       
> >>           AUTHORITY["EPSG","9001"]]]
> >> 
> >> Origin = (-93872.189308887900552,-3625321.216973003931344)
> >> Pixel Size = (0.750000000000000,-0.750000000000000)
> >> 
> >> Metadata:
> >>     AREA_OR_POINT=Area
> >>     TIFFTAG_DOCUMENTNAME=hetotiff
> >>     TIFFTAG_IMAGEDESCRIPTION=ER Mapper 6.4 hetotiff
> >>     TIFFTAG_RESOLUTIONUNIT=2 (pixels/inch)
> >>     TIFFTAG_SOFTWARE=IMAGINE TIFF Support
> >> 
> >> Copyright 1991 - 1999 by ERDAS, Inc. All Rights Reserved
> >> @(#)$RCSfile: etif.c $ $Revision: 1.9.1.3 $ $Date: 2002/07/29
> >> 15:39:06EDT $
> >> 
> >>     TIFFTAG_XRESOLUTION=1
> >>     TIFFTAG_YRESOLUTION=1
> >> 
> >> Image Structure Metadata:
> >>     INTERLEAVE=PIXEL
> >> 
> >> Corner Coordinates:
> >> Upper Left  (  -93872.189,-3625321.217)
> >> Lower Left  (  -93872.189,-3631111.217)
> >> Upper Right (  -88825.439,-3625321.217)
> >> Lower Right (  -88825.439,-3631111.217)
> >> Center      (  -91348.814,-3628216.217)
> >> Band 1 Block=6729x1 Type=Byte, ColorInterp=Red
> >> Band 2 Block=6729x1 Type=Byte, ColorInterp=Green
> >> Band 3 Block=6729x1 Type=Byte, ColorInterp=Blue

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From zoltans at geograph.co.za  Thu Sep  1 12:37:00 2016
From: zoltans at geograph.co.za (Zoltan Szecsei)
Date: Thu, 1 Sep 2016 21:37:00 +0200
Subject: [gdal-dev] gdalwarp error 6 issues
In-Reply-To: <201609012112.20146.even.rouault@spatialys.com>
References: <07d8eb4c-901f-8a1e-70b6-84e7a0bc1ecf@geograph.co.za>
 <201609011840.38721.even.rouault@spatialys.com>
 <1768ee67-b91a-ea69-12cd-c1eb1107edf8@geograph.co.za>
 <201609012112.20146.even.rouault@spatialys.com>
Message-ID: <88c74a3b-099c-465e-6b8a-807547cab418@geograph.co.za>

Hi Even,
Many thanks, will try gdal_edit.py permutations again over the weekend.

Tomorrow is a busy day.
Regards,
Zoltan

On 2016-09-01 21:12, Even Rouault wrote:
> Le jeudi 01 septembre 2016 19:41:18, Zoltan Szecsei a écrit :
>> Hi Even,
>> Long time no chat - Hope all is well with you. :-)
>>
>> When compiling GDAL, I just used all defaults, so it was just a
>> "straight" ./configure.
>>
>> The errant images are ENU on WGS84 Lo17 and Lo21, and I need to
>> reproject to same but Lo19
>> (They are on the fringes of Lo19)
>>
>> I tried gdal_edit.py to force a better representation of where those
>> images are, but no luck.
>> I used variations of the s-srs line below (ie: replacing HBK94 with
>> WGS84) and also 1 or 2 EPSG codes - but I was guessing the EPSG ones.
>>
>> Is there not a way to stamp out the existing proj info, and replace with
>> the desired source projection stanza using gdal_edit.py?
> "gdal_edit.py -a_srs srs_def foo.tif" where srs_def is either a proj.4 string
> or EPSG:xxxx code. I've just tried it on a GeoTIFF with a LOCAL_CS originally
> and this worked.
>
>> I've got a batch run in at the moment so don't want to fiddle until that
>> has finished.
>> I will also recompile with --with-static-proj4.
>>
>> Thanks for the pointers.
>> Regards,
>> Zoltan
>>
>> On 2016-09-01 18:40, Even Rouault wrote:
>>> Zoltan,
>>>
>>>> Hi,
>>>> I've been struggling to get some 3200 orthos mosaicked and tiled.
>>>> They are very old and have really bad projection definitions, pixel
>>>> sizes and metadata funnies.
>>>> I'm down to the last 261, and have hit a brick wall.
>>>> Given that gdalwarp works on this image when I leave out s_srs and t_srs
>>>> (see below), I'm not sure if this is a bug related hiccough or a proj
>>>> issue.
>>>>
>>>> I have compiled the latest "GDAL 2.1.1, released 2016/07/07" myself, on
>>>> Ubuntu 16.04.1 Desktop:  Linux gl05 4.4.0-36-generic #55-Ubuntu SMP Thu
>>>> Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
>>>>
>>>> I get the following error from gdalwarp:
>>>>       ERROR 6: Unable to load PROJ.4 library (libproj.so), creation of
>>>>       OGRCoordinateTransformation failed.
>>> Hum, if you get this message, then reprojection should never succeed. How
>>> did you compile GDAL with ./configure --with-static-proj4 or without it
>>> ? If without it, you must be sure to have the development package of
>>> proj installed so that proj.so links to proj.so.1 or proj.so.9 or
>>> whatever the soname of your proj is.
>>>
>>>> I have tried various different gdalwarp parameters - even leaving
>>>> gdalwarp to sense in input projection and me only specifying the output
>>>> projection.
>>>> If I leave out both s_srs and t_srs then gdalwarp does work but
>>>> obliviously does not reproject to Lo19.
>>>> I have even tried feeding the output of this redundant gdalwarp into a
>>>> gdalwarp with t_srs, but no success.
>>>>
>>>> Specifying only t_srs (as above) on many other orthos on Lo17 & Lo21
>>>> does work so it is likely that the way this projection is embedded in
>>>> this ortho is the problem.
>>> Yes, the way ER Mapper encodes the projection is non-standard and thus
>>> GDAL reports a LOCAL_CS that cannot be used to automatically get a
>>> proj.4 string. GDAL has some handling for some of those non-standard
>>> encodings, but not for your ones, so overriding it with -s_srs is
>>> needed.
>>>
>>>> I have tried stripping it out with gdal_edit.py but haven't gotten that
>>>> right yet.
>>>>
>>>> Anyone with pointers or ideas on this?
>>> +datum=Hartebeesthoek94 is not recognized by proj.4.
>>>
>>> Why not using EPSG:2049 instead or the proj.4 expension ? I also see that
>>> gdalsrsinfo EPSG:2049 expands to
>>>
>>> PROJ.4 : '+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu
>>> +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs '
>>>
>>> So note the +axis=wsu parameter for the south-orientated variant
>>>
>>> Or perhaps this doesn't make sense in your context of producing a
>>> GeoTIFF, so in that case you might just want to use the above proj.4
>>> string without +axis=wsu. Note that for proj the Hartebeesthoek94 datum
>>> is equivalent to WGS84.
>>>
>>> Even
>>>
>>>> My last effort before email this list is below, as is the gdalinfo
>>>> output.
>>>>
>>>> Thanks in advance,
>>>> Zoltan
>>>>
>>>> gdalwarp -s_srs '+proj=tmerc +lat_0=0 +lon_0=21  +k=1 +x_0=0 +y_0=0
>>>> +datum=Hartebeesthoek94 +units=m +no_defs'  \
>>>>
>>>>             -t_srs '+proj=tmerc +lat_0=0 +lon_0=19  +k=1 +x_0=0 +y_0=0
>>>>
>>>> +datum=WGS84 +units=m +no_defs' \
>>>>
>>>>             -r cubicspline -multi -overwrite -of GTiff -co TFW=YES -co
>>>>
>>>> COMPRESS=JPEG -co JPEG_QUALITY=75 -tr 0.75 -0.75 \
>>>>
>>>>             /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif \
>>>>
>>>> /mnt/sda1/gisdata/raster/used_2016/dwa_2000/3220/3220CC01.tif
>>>> #
>>>> #
>>>> gdalinfo   /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
>>>> #
>>>> Driver: GTiff/GeoTIFF
>>>> Files: /mnt/sdb1/used_images/dwa_2000/3220/3220CC01.tif
>>>> Size is 6729, 7720
>>>> Coordinate System is:
>>>> LOCAL_CS[" Geocoding information not available Projection Name = WGS
>>>> 1984 Lo21 Units = meters GeoTIFF Units = meters",
>>>>
>>>>        UNIT["metre",1,
>>>>        
>>>>            AUTHORITY["EPSG","9001"]]]
>>>>
>>>> Origin = (-93872.189308887900552,-3625321.216973003931344)
>>>> Pixel Size = (0.750000000000000,-0.750000000000000)
>>>>
>>>> Metadata:
>>>>      AREA_OR_POINT=Area
>>>>      TIFFTAG_DOCUMENTNAME=hetotiff
>>>>      TIFFTAG_IMAGEDESCRIPTION=ER Mapper 6.4 hetotiff
>>>>      TIFFTAG_RESOLUTIONUNIT=2 (pixels/inch)
>>>>      TIFFTAG_SOFTWARE=IMAGINE TIFF Support
>>>>
>>>> Copyright 1991 - 1999 by ERDAS, Inc. All Rights Reserved
>>>> @(#)$RCSfile: etif.c $ $Revision: 1.9.1.3 $ $Date: 2002/07/29
>>>> 15:39:06EDT $
>>>>
>>>>      TIFFTAG_XRESOLUTION=1
>>>>      TIFFTAG_YRESOLUTION=1
>>>>
>>>> Image Structure Metadata:
>>>>      INTERLEAVE=PIXEL
>>>>
>>>> Corner Coordinates:
>>>> Upper Left  (  -93872.189,-3625321.217)
>>>> Lower Left  (  -93872.189,-3631111.217)
>>>> Upper Right (  -88825.439,-3625321.217)
>>>> Lower Right (  -88825.439,-3631111.217)
>>>> Center      (  -91348.814,-3628216.217)
>>>> Band 1 Block=6729x1 Type=Byte, ColorInterp=Red
>>>> Band 2 Block=6729x1 Type=Byte, ColorInterp=Green
>>>> Band 3 Block=6729x1 Type=Byte, ColorInterp=Blue


From jp4work at gmail.com  Sun Sep  4 17:27:19 2016
From: jp4work at gmail.com (JIA Pei)
Date: Sun, 4 Sep 2016 17:27:19 -0700
Subject: [gdal-dev] gdal configuration parameters settings...
Message-ID: <CADh8Q_XZuDVbm77gcwQZydYw01A3tKn1+1kDR7AH=K6L0z6cCA@mail.gmail.com>

Hi, all:



Sorry, I didn't find a gdal-user mailing list. So, I have to post my
question here in gdal-dev. Hope this doesn't bother you.


My configuration:
Ubuntu 16.04.1
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609
gdal: directly git out from https://github.com/OSGeo/gdal on September 4,
2016 .


I'm trying to enable all --with-XXXXX during gdal-git configuration.
However, it looks
--with-XXXXX can be set to

   - *yes*
   - *no*
   - *path*
   - *config*

1 out of the above 4 values.


My current configuration is:
jiapei:gdal$ ./configure --with-liblzma=yes --with-armadillo=yes
--with-poppler=yes --with-podofo=yes --with-spatialite=yes --with-dds=yes
--with-cfitsio=yes --with-cryptopp=yes --with-ogdi=yes --with-epsilon=yes
--with-webp=yes --with-geos=yes --with-spatialite=yes


And what I've got from the configuration is as follows:

GDAL is now configured for x86_64-pc-linux-gnu

Installation directory: /usr/local
C compiler: gcc -DHAVE_AVX_AT_COMPILE_TIME -DHAVE_SSSE3_AT_COMPILE_TIME
-DHAVE_SSE_AT_COMPILE_TIME -g -O2
C++ compiler: g++ -DHAVE_AVX_AT_COMPILE_TIME -DHAVE_SSSE3_AT_COMPILE_TIME
-DHAVE_SSE_AT_COMPILE_TIME -g -O2

LIBTOOL support: yes

LIBZ support: external
LIBLZMA support: yes
cryptopp support: yes
GRASS support: no
CFITSIO support: external
PCRaster support: internal
LIBPNG support: external
DDS support: yes
GTA support: no
LIBTIFF support: internal (BigTIFF=yes)
LIBGEOTIFF support: internal
LIBJPEG support: internal
12 bit JPEG: yes
12 bit JPEG-in-TIFF: yes
LIBGIF support: internal
OGDI support: no
HDF4 support: no
HDF5 support: no
Kea support: no
NetCDF support: no
Kakadu support: no
JasPer support: no
OpenJPEG support: no
ECW support: no
MrSID support: no
MrSID/MG4 Lidar support: no
MSG support: no
GRIB support: yes
EPSILON support: no
WebP support: no
cURL support (wms/wcs/…):no
PostgreSQL support: yes
MRF support: yes
MySQL support: no
Ingres support: no
Xerces-C support: no
NAS support: no
Expat support: yes
libxml2 support: no
Google libkml support: yes
ODBC support: no
PGeo support: no
FGDB support: no
MDB support: no
PCIDSK support: internal
OCI support: no
GEORASTER support: no
SDE support: no
Rasdaman support: no
DODS support: no
SQLite support: yes
PCRE support: no
SpatiaLite support: no
DWGdirect support no
INFORMIX DataBlade support:no
GEOS support: yes
QHull support: internal
Poppler support: no
Podofo support: yes
PDFium support: no
OpenCL support: no
Armadillo support: yes
FreeXL support: no
SOSI support: no
MongoDB support: no

SWIG Bindings: no

Statically link PROJ.4: no
enable GNM building: no
enable pthread support: yes
enable POSIX iconv support:yes
hide internal symbols: no


If I just move forward without enabling all other configurations, namely,
still keep all "no"s, and do "make -j8", I got the following error message:
libtool: compile: g++ -DHAVE_AVX_AT_COMPILE_TIME
-DHAVE_SSSE3_AT_COMPILE_TIME -DHAVE_SSE_AT_COMPILE_TIME -g -O2 -Wall
-Wextra -Winit-self -Wunused-parameter -Wformat -Werror=format-security
-Wno-format-nonliteral -Wlogical-op -Wshadow -Werror=vla -Wfloat-conversion
-Wmissing-declarations -Wnon-virtual-dtor -Woverloaded-virtual
-fno-operator-names -I/home/jiapei/Downloads/rsgis/OSGeo/gdal/gdal/port
-DGDAL_COMPILATION -c -I../../port Huffman.cpp -o ../../o/Huffman.o
>/dev/null 2>&1
make[3]: Leaving directory
‘/home/jiapei/Downloads/rsgis/OSGeo/gdal/gdal/frmts/mrf/libLERC’
make[2]: Leaving directory
‘/home/jiapei/Downloads/rsgis/OSGeo/gdal/gdal/frmts/mrf’
make[1]: Leaving directory
‘/home/jiapei/Downloads/rsgis/OSGeo/gdal/gdal/frmts’
GNUmakefile:88: recipe for target ‘frmts-target’ failed
make: *** [frmts-target] Error 2



So, can anybody help please???

-- 

Pei JIA, Ph.D.

Email: jp4work at gmail.com
cell in Canada:    +1 778-863-5816
cell in China: +86 186-8244-3503

Welcome to Vision Open
http://www.visionopen.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160904/012d5f7b/attachment.html>

From ari.jolma at gmail.com  Sun Sep  4 21:56:58 2016
From: ari.jolma at gmail.com (Ari Jolma)
Date: Mon, 5 Sep 2016 07:56:58 +0300
Subject: [gdal-dev] gdal configuration parameters settings...
In-Reply-To: <CADh8Q_XZuDVbm77gcwQZydYw01A3tKn1+1kDR7AH=K6L0z6cCA@mail.gmail.com>
References: <CADh8Q_XZuDVbm77gcwQZydYw01A3tKn1+1kDR7AH=K6L0z6cCA@mail.gmail.com>
Message-ID: <a9897cb3-f713-8564-1716-8abc3bdba086@gmail.com>

05.09.2016, 03:27, JIA Pei kirjoitti:
>
>
> If I just move forward without enabling all other configurations, 
> namely, still keep all "no"s, and do "make -j8", I got the following 
> error message:
> libtool: compile: g++ -DHAVE_AVX_AT_COMPILE_TIME 
> -DHAVE_SSSE3_AT_COMPILE_TIME -DHAVE_SSE_AT_COMPILE_TIME -g -O2 -Wall 
> -Wextra -Winit-self -Wunused-parameter -Wformat 
> -Werror=format-security -Wno-format-nonliteral -Wlogical-op -Wshadow 
> -Werror=vla -Wfloat-conversion -Wmissing-declarations 
> -Wnon-virtual-dtor -Woverloaded-virtual -fno-operator-names 
> -I/home/jiapei/Downloads/rsgis/OSGeo/gdal/gdal/port -DGDAL_COMPILATION 
> -c -I../../port Huffman.cpp -o ../../o/Huffman.o >/dev/null 2>&1

What you don't get it is the error message. Could you run just this 
command without the trailing >/dev/null, which eats the error message?

Ari

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160905/d6694766/attachment.html>

From bradh at frogmouth.net  Mon Sep  5 02:29:29 2016
From: bradh at frogmouth.net (Brad Hards)
Date: Mon, 5 Sep 2016 19:29:29 +1000
Subject: [gdal-dev] gdal configuration parameters settings...
In-Reply-To: <CADh8Q_XZuDVbm77gcwQZydYw01A3tKn1+1kDR7AH=K6L0z6cCA@mail.gmail.com>
References: <CADh8Q_XZuDVbm77gcwQZydYw01A3tKn1+1kDR7AH=K6L0z6cCA@mail.gmail.com>
Message-ID: <019b01d20758$0417c9b0$0c475d10$@frogmouth.net>

> I'm trying to enable all --with-XXXXX during gdal-git configuration. 
> However, it
> looks
> --with-XXXXX can be set to
>
> *	yes
>
> *	no
>
> *	path
>
> *	config
>
> 1 out of the above 4 values.
Which one you need depends on what you are trying to do. If you have 
non-standard locations, you need path or config.

> My current configuration is:
> jiapei:gdal$ ./configure --with-liblzma=yes --with-armadillo=yes --with-
> poppler=yes --with-podofo=yes --with-spatialite=yes --with-dds=yes --with-
> cfitsio=yes --with-cryptopp=yes --with-ogdi=yes --with-epsilon=yes --with-
> webp=yes --with-geos=yes --with-spatialite=yes
Some of those are pretty niche. Also, you don't need to duplicate entries.
> OGDI support: no
So you are probably missing the -dev package. Check the configure log.
> SpatiaLite support: no
Same here.

Brad



From even.rouault at spatialys.com  Mon Sep  5 02:51:32 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 5 Sep 2016 11:51:32 +0200
Subject: [gdal-dev] gdal configuration parameters settings...
In-Reply-To: <a9897cb3-f713-8564-1716-8abc3bdba086@gmail.com>
References: <CADh8Q_XZuDVbm77gcwQZydYw01A3tKn1+1kDR7AH=K6L0z6cCA@mail.gmail.com>
 <a9897cb3-f713-8564-1716-8abc3bdba086@gmail.com>
Message-ID: <201609051151.33320.even.rouault@spatialys.com>

Le lundi 05 septembre 2016 06:56:58, Ari Jolma a écrit :
> 05.09.2016, 03:27, JIA Pei kirjoitti:
> > If I just move forward without enabling all other configurations,
> > namely, still keep all "no"s, and do "make -j8", I got the following
> > error message:
> > libtool: compile: g++ -DHAVE_AVX_AT_COMPILE_TIME
> > -DHAVE_SSSE3_AT_COMPILE_TIME -DHAVE_SSE_AT_COMPILE_TIME -g -O2 -Wall
> > -Wextra -Winit-self -Wunused-parameter -Wformat
> > -Werror=format-security -Wno-format-nonliteral -Wlogical-op -Wshadow
> > -Werror=vla -Wfloat-conversion -Wmissing-declarations
> > -Wnon-virtual-dtor -Woverloaded-virtual -fno-operator-names
> > -I/home/jiapei/Downloads/rsgis/OSGeo/gdal/gdal/port -DGDAL_COMPILATION
> > -c -I../../port Huffman.cpp -o ../../o/Huffman.o >/dev/null 2>&1
> 
> What you don't get it is the error message. Could you run just this
> command without the trailing >/dev/null, which eats the error message?

You probably don't need to do something particular regarding >/dev/null, as 
the error message from the compiler should probably be a few lines around in 
the console in the non-libtool compilation step.

I've tried to reproduce with an as close possible setup (Ubuntu 16.04.1 + gcc 
(Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609 + today trunk) and this 
compiles fine for me.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Mon Sep  5 12:31:56 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 5 Sep 2016 12:31:56 -0700
Subject: [gdal-dev] Removing bridge/ and vb6/ from source tree ?
In-Reply-To: <6B595FA3-16D9-45D9-B9F5-B5A44224BFA3@hobu.co>
References: <201608281631.54685.even.rouault@spatialys.com>
 <CACmBxyvPO61Qv9tjeBFfxBuVC7K5aEF52NuqbG2RAMu_c=6j=g@mail.gmail.com>
 <6B595FA3-16D9-45D9-B9F5-B5A44224BFA3@hobu.co>
Message-ID: <CACmBxyu5mvS1RS79HYvGQOEztmOcVstiNs60RCA+EHQG0-rk7g@mail.gmail.com>

Being that it's been 8 days and there are no responses saying that vb6 and
bridge are needed in trunk, I suggest that they be removed.  Should that
turn out that there is a critical need, we can revert the deletion.

-kurt

On Tue, Aug 30, 2016 at 6:19 AM, Howard Butler <howard at hobu.co> wrote:

> +1
>
>
> > On Aug 28, 2016, at 10:30 PM, Kurt Schwehr <schwehr at gmail.com> wrote:
> >
> > +1 for removing from trunk head if nobody speaks up.
> >
> > On Sunday, August 28, 2016, Even Rouault <even.rouault at spatialys.com>
> wrote:
> > Hi,
> >
> > We have the bridge and vb6 directories in the source tree that are
> probably no
> > longer used by anyone (I don't recall any tickets or questions in recent
> years
> > regarding those 2 topics), but I would be interested in hearing opinions
> in
> > case someone still uses them (they are not part of default build
> scripts, so
> > there's a chance they might even not build currently)
> >
> > The only description of what "bridge" is I could find is :
> > https://lists.osgeo.org/pipermail/gdal-dev/1999-May/002942.html , so
> basically
> > it is a way of using the GDAL API through dlopen()/GetProcAddress()
> > mechanisms. It seems this was developed primarily for the LIMP software,
> but
> > that one doesn't seem to be around anymore.
> >
> > Regarding VB6 bindings, of course VB6 itself is completely obsolete and
> no
> > longer available at Microsoft. From
> > https://en.wikipedia.org/wiki/Visual_Basic, seems that legacy VB6
> applications
> > could perhaps still run in recent Windows versions (not completely clear
> > however)
> >
> > Even
> >
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> >
> >
> > --
> > --
> > http://schwehr.org
> >
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>


-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160905/cd92cf60/attachment.html>

From schwehr at gmail.com  Wed Sep  7 09:05:55 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 7 Sep 2016 09:05:55 -0700
Subject: [gdal-dev] removing dgn dgndump and dgnwritetest applications
Message-ID: <CACmBxysV+s2+AU2sa0Bz+xFNG_DT=CgZ3RcctTVJfvVKHsJQ4A@mail.gmail.com>

The OGR dgn directory has two binaries: dgndump and dgnwritetest.

Any objections to me removing dgnwritetest?  It fails for me:

./dgnwritetest
ERROR 4: Unable to open `seed.dgn' for read access.

DGNCreate failed.

And what do people think about dgndump?  I'd prefer to remove it, but there
might be users around.

I've converted both to C++ and done a bit of cleanup.  They now build
warning free on Ubuntu 14.04, but it would probably be best to just get rid
of them.

-kurt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160907/c28d534a/attachment.html>

From even.rouault at spatialys.com  Wed Sep  7 09:43:36 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 7 Sep 2016 18:43:36 +0200
Subject: [gdal-dev] removing dgn dgndump and dgnwritetest applications
In-Reply-To: <CACmBxysV+s2+AU2sa0Bz+xFNG_DT=CgZ3RcctTVJfvVKHsJQ4A@mail.gmail.com>
References: <CACmBxysV+s2+AU2sa0Bz+xFNG_DT=CgZ3RcctTVJfvVKHsJQ4A@mail.gmail.com>
Message-ID: <201609071843.36407.even.rouault@spatialys.com>

Le mercredi 07 septembre 2016 18:05:55, Kurt Schwehr a écrit :
> The OGR dgn directory has two binaries: dgndump and dgnwritetest.
> 
> Any objections to me removing dgnwritetest?  It fails for me:
> 
> ./dgnwritetest
> ERROR 4: Unable to open `seed.dgn' for read access.

I guess you need to copy data/seed_2d.dgn as seed.dgn in your current 
directory.

> 
> DGNCreate failed.
> 
> And what do people think about dgndump?  I'd prefer to remove it, but there
> might be users around.
> 
> I've converted both to C++ and done a bit of cleanup.  They now build
> warning free on Ubuntu 14.04, but it would probably be best to just get rid
> of them.

I'm -0 on this. They might still be useful for people who would need to deal 
with DGN at low level and I'm not sure if they have higher level equivalents 
through the OGR driver (I didn't study them closely, just my gut feeling)

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From andrew.bell.ia at gmail.com  Wed Sep  7 15:29:54 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 7 Sep 2016 17:29:54 -0500
Subject: [gdal-dev] Raster Band Support Info
Message-ID: <CACJ51z0+CVhdaDz1uu3XSdsGzAZQguRfTgXHuZsy7o1y8gy37A@mail.gmail.com>

I assume that there are limits to the number of raster bands supported by
various drivers that support raster creation.  Is there a call I can make
to determine this limit?

Thanks,

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160907/98d5bf71/attachment.html>

From even.rouault at spatialys.com  Wed Sep  7 15:46:55 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 8 Sep 2016 00:46:55 +0200
Subject: [gdal-dev] Raster Band Support Info
In-Reply-To: <CACJ51z0+CVhdaDz1uu3XSdsGzAZQguRfTgXHuZsy7o1y8gy37A@mail.gmail.com>
References: <CACJ51z0+CVhdaDz1uu3XSdsGzAZQguRfTgXHuZsy7o1y8gy37A@mail.gmail.com>
Message-ID: <201609080046.55390.even.rouault@spatialys.com>

Le jeudi 08 septembre 2016 00:29:54, Andrew Bell a écrit :
> I assume that there are limits to the number of raster bands supported by
> various drivers that support raster creation.
> Is there a call I can make
> to determine this limit?

Andrew,

No.

Some drivers have a test when the format has a limitation and will error out 
cleanly if you call Create() with too many bands. Other drivers don't have a 
clear limitation (thinking of raw formats), but if you call them with 
something crazy like INT_MAX then you might crash the process due to out of 
memory.

Driver metadata to document dimensions and band count limitations might be 
indeed useful, if someone wants to tackle that.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From m.g.aschenbeck at gmail.com  Thu Sep  8 09:40:48 2016
From: m.g.aschenbeck at gmail.com (Michael Aschenbeck)
Date: Thu, 8 Sep 2016 10:40:48 -0600
Subject: [gdal-dev] Removing in-file overviews
Message-ID: <CADGz_tKBrT-cH4Md3_-5d7x8971ZiJXQ61gROw+oEtGwO=ae3A@mail.gmail.com>

Hello GDAL developers,

For my application I need to create an *.ovr file, and it usually works
using BuildOverviews.

However, when I call BuildOverviews via C++ on a certain dataset, nothing
happens because the overview is already included in the file.  Is it
possible to delete the in-file overview or move it to an *.ovr file using
the C++ API?

Thanks,
Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160908/b2d25d5d/attachment.html>

From even.rouault at spatialys.com  Thu Sep  8 11:02:33 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 8 Sep 2016 20:02:33 +0200
Subject: [gdal-dev] Removing in-file overviews
In-Reply-To: <CADGz_tKBrT-cH4Md3_-5d7x8971ZiJXQ61gROw+oEtGwO=ae3A@mail.gmail.com>
References: <CADGz_tKBrT-cH4Md3_-5d7x8971ZiJXQ61gROw+oEtGwO=ae3A@mail.gmail.com>
Message-ID: <201609082002.33101.even.rouault@spatialys.com>

Le jeudi 08 septembre 2016 18:40:48, Michael Aschenbeck a écrit :
> Hello GDAL developers,
> 
> For my application I need to create an *.ovr file, and it usually works
> using BuildOverviews.
> 
> However, when I call BuildOverviews via C++ on a certain dataset, nothing
> happens because the overview is already included in the file.  Is it
> possible to delete the in-file overview or move it to an *.ovr file using
> the C++ API?

Mike,

Deleting overviews depends on the file format. Works for TIFF for example. You 
can call BuildOverviews() with nOverviews == 0 and panOverviewList == NULL to 
clear existing overviews (I realize this isn't yet documented in the API. 
That's what gdaladdo -clean does : 
https://github.com/OSGeo/gdal/blob/trunk/gdal/apps/gdaladdo.cpp#L240), 
assuming you've open the file in GA_Update mode.

Note that in the case of TIFF, this will not recover file space (you'll need to 
do a gdal_translate to do that), but just make the previous content no longer 
accessible.

Then you should be able to call BuildOverviews() on the file opened in 
GA_ReadOnly mode to build external overviews.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sean at mapbox.com  Fri Sep  9 00:26:22 2016
From: sean at mapbox.com (Sean Gillies)
Date: Fri, 9 Sep 2016 09:26:22 +0200
Subject: [gdal-dev] Request for comments on Rasterio documentation
Message-ID: <CADPhZXzsyvSB2LFqpbjmH6YcE-oinf=6H0xxsjixN-2jQNyegQ@mail.gmail.com>

Hi all,

I've been working on an open source project called Rasterio,
https://github.com/mapbox/rasterio, which is an attempt to unite the
unique, best parts of GDAL with modern Python language features. Rasterio
is a package of Python C extension modules. It loads libgdal like the SWIG
bindings does, but does not import osgeo.gdal at all.

As a part of my push to release Rasterio 1.0 this fall, I'm writing a lot
of documentation. One particular document is called "Switching from GDAL’s
Python bindings."

https://mapbox.github.io/rasterio/switch.html

It's not a manifesto for why a developer should switch, but a comparison of
the osgeo.gdal and rasterio modules and a summary of the gotchas and
lifelines. I would be very grateful for comments on the doc. Does it
explain the similarities between the SWIG bindings and Rasterio adequately?
Does it answer any questions that you've had about Rasterio?

Comments may be left at https://github.com/mapbox/rasterio/issues/872,
addressed to me personally, or here on gdal-dev as long as they're on topic
(primarily about the GDAL data model and implementation).

Thanks very much in advance,

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160909/e12d2e10/attachment.html>

From even.rouault at spatialys.com  Fri Sep  9 02:40:36 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 9 Sep 2016 11:40:36 +0200
Subject: [gdal-dev] Request for comments on Rasterio documentation
In-Reply-To: <CADPhZXzsyvSB2LFqpbjmH6YcE-oinf=6H0xxsjixN-2jQNyegQ@mail.gmail.com>
References: <CADPhZXzsyvSB2LFqpbjmH6YcE-oinf=6H0xxsjixN-2jQNyegQ@mail.gmail.com>
Message-ID: <201609091140.36275.even.rouault@spatialys.com>

Sean,

I've actually a question along Howard's yesterday tweet regarding mutual 
incompatiblity between osgeo.gdal and rasterio. From my understanding of the 
doc and look at rasterio code ( 
https://github.com/mapbox/rasterio/blob/master/rasterio/_drivers.pyx and 
https://github.com/mapbox/rasterio/blob/master/rasterio/env.py) , it seems the 
potential issues would be about driver registration, config options and error 
handlers, right ?

But as rasterio.Env() seems to take care about restoring the environment to 
what it was about, I would have thought that folks could do safely things like

1: do osgeo.gdal stuff
2:  with rasterio.Env(): do rasterio stuff
3 : do osgeo.gdal stuff

Actually taking a look at rasterio/_drivers.pyx , it seems that the error 
handler isn't restored, so could be an issue if folks in 1. would install a 
custom global one. I guess the reason for not restoring the previous handler 
is for workflows like

with rasterio.Env()
     src = rasterio.open()
do stuff with src

where you cannot restore the error handler at a precise point.

To address this, a possibility would be for rasterio to use 
CPLPushErrorHandler() / CPLPopErrorHandler() around each call, or group of 
calls, it makes to GDAL.

GDALEnv.start() calls GDALAllRegister, so potentially if folks had de-
registered a driver in 1., then will find it registered again in step 3., but 
that's a pretty uncommon use case (I'm not aware of anyone using 
driver.Deregister() / driver.Register() except in GDAL autotest suite to make 
sure the right jpeg2000 driver is used)

Apart from that, it isn't obvious to me why things couldn't be mixed in the 
same process. I guess that even in 2. you could call osgeo.gdal stuff in a 
reasonably safe way (with the environment & error handler set by rasterio of 
course)

Reading again, I'm not sure that "Additionally, gdal and Rasterio register 
conflicting error handlers and thus the propagation of exceptions and warnings 
may depend on which module was imported last." is true. Importing gdal.osgeo 
only calls GDALAllRegister() and as far as I understood importing rasterio is 
a no-op regarding calls to the GDAL API.


Regarding the example 'with rasterio.Env(GDAL_CACHEMAX=512):', there's a 
potential pitfall in that the GDAL_CACHEMAX config option is read *only* the 
first time GDALGetCacheMax()/GDALGetCacheMax64() is called, so changing it 
afterwards will have no effect.

So if you do things like

with rasterio.Env(GDAL_CACHEMAX=512):
	rasterio.open(...)

with rasterio.Env(GDAL_CACHEMAX=1024):
	rasterio.open(...)  <-- will only see the effect GDAL_CACHEMAX=512

If you want to actively change the value you must call GDALSetCacheMax() / 
GDALSetCacheMax64().

More about a rasterio design choice: I see that the master representation used 
in rasterio for a crs is the proj.4 string (or +init=epsg:XXXX when detected), 
right ? So "src.crs.wkt" will not give you back the original WKT string coming 
from GDAL but one that is reconstructed by using OSRImportFromProj4() (or 
OSRImportFromEPSG()) and then OSRExportToWKT(). This might work well in most 
use cases where the CRS is not too exotic, but you might lose for example the 
actual datum name, which could be a problem if folks want to select another 
datum shift than the one proposed by default, or think about CRS for imagery 
of other planets.


Even

> Hi all,
> 
> I've been working on an open source project called Rasterio,
> https://github.com/mapbox/rasterio, which is an attempt to unite the
> unique, best parts of GDAL with modern Python language features. Rasterio
> is a package of Python C extension modules. It loads libgdal like the SWIG
> bindings does, but does not import osgeo.gdal at all.
> 
> As a part of my push to release Rasterio 1.0 this fall, I'm writing a lot
> of documentation. One particular document is called "Switching from GDAL’s
> Python bindings."
> 
> https://mapbox.github.io/rasterio/switch.html
> 
> It's not a manifesto for why a developer should switch, but a comparison of
> the osgeo.gdal and rasterio modules and a summary of the gotchas and
> lifelines. I would be very grateful for comments on the doc. Does it
> explain the similarities between the SWIG bindings and Rasterio adequately?
> Does it answer any questions that you've had about Rasterio?
> 
> Comments may be left at https://github.com/mapbox/rasterio/issues/872,
> addressed to me personally, or here on gdal-dev as long as they're on topic
> (primarily about the GDAL data model and implementation).
> 
> Thanks very much in advance,

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From mj10777 at googlemail.com  Sat Sep 10 03:05:36 2016
From: mj10777 at googlemail.com (Mark Johnson)
Date: Sat, 10 Sep 2016 12:05:36 +0200
Subject: [gdal-dev] minor correction for drv_libkml.html [bash-script] neeted
Message-ID: <CAEEbjBjUu2ngogJGVeKxBQt840ZME5sw0=TZH5VfUoy==QJBGg@mail.gmail.com>

While adding support for LIBKML to my gdal configuration
- I attempted to use the sample bash-script to insure that it worked
correctly

It failed with a syntax error, caused in line 3 of the script:

> #!/bin/bash
> # Copyright (c) 2010, Brian Case
>  * Copyright (c) 2010-2014, Even Rouault
> #
> # Permission
>
> needs to be changed to:

> #!/bin/bash
> # Copyright (c) 2010, Brian Case
> # Copyright (c) 2010-2014, Even Rouault
> #
> # Permission
>
> to run without error.

Mark Johnson, Berlin Germany
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160910/3bd27e2a/attachment.html>

From even.rouault at spatialys.com  Sat Sep 10 03:21:25 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 10 Sep 2016 12:21:25 +0200
Subject: [gdal-dev] minor correction for drv_libkml.html [bash-script]
	neeted
In-Reply-To: <CAEEbjBjUu2ngogJGVeKxBQt840ZME5sw0=TZH5VfUoy==QJBGg@mail.gmail.com>
References: <CAEEbjBjUu2ngogJGVeKxBQt840ZME5sw0=TZH5VfUoy==QJBGg@mail.gmail.com>
Message-ID: <201609101221.26297.even.rouault@spatialys.com>

Le samedi 10 septembre 2016 12:05:36, Mark Johnson a écrit :
> While adding support for LIBKML to my gdal configuration
> - I attempted to use the sample bash-script to insure that it worked
> correctly

Fixed. Thanks (I actually removed this copyright line since it was 
inappropriately added by a script to update copyright lines)

> 
> It failed with a syntax error, caused in line 3 of the script:
> > #!/bin/bash
> > # Copyright (c) 2010, Brian Case
> > 
> >  * Copyright (c) 2010-2014, Even Rouault
> > 
> > #
> > # Permission
> > 
> > needs to be changed to:
> > 
> > #!/bin/bash
> > # Copyright (c) 2010, Brian Case
> > # Copyright (c) 2010-2014, Even Rouault
> > #
> > # Permission
> > 
> > to run without error.
> 
> Mark Johnson, Berlin Germany

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Sep 12 05:31:43 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 12 Sep 2016 14:31:43 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
Message-ID: <201609121431.43953.even.rouault@spatialys.com>

Hi,

I wanted to mention a new (and I think pretty cool ) feature I've added in 
trunk: the possibility to define pixel functions in Python in a VRT derived 
band.

Let's start with a simple example to multiply a raster by 1.5 :

<VRTDataset rasterXSize="20" rasterYSize="20">
  <SRS>EPSG:26711</SRS>
  <GeoTransform>440720,60,0,3751320,0,-60</GeoTransform>
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <PixelFunctionType>multiply</PixelFunctionType>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionArguments factor="1.5"/>
    <PixelFunctionCode><![CDATA[
import numpy as np
def multiply(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                   raster_ysize, buf_radius, gt, **kwargs):
    factor = float(kwargs['factor'])
    out_ar[:] = np.round_(np.clip(in_ar[0] * factor,0,255))
]]>
    </PixelFunctionCode>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">byte.tif</SourceFilename>
    </SimpleSource>
  </VRTRasterBand>
</VRTDataset>

or to add 2 (or more) rasters:

<VRTDataset rasterXSize="20" rasterYSize="20">
  <SRS>EPSG:26711</SRS>
  <GeoTransform>440720,60,0,3751320,0,-60</GeoTransform>
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <PixelFunctionType>add</PixelFunctionType>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionCode><![CDATA[
import numpy as np
def add(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                   raster_ysize, buf_radius, gt, **kwargs):
    np.round_(np.clip(np.sum(in_ar, axis = 0, dtype = 'uint16'),0,255),
              out = out_ar)
]]>
    </PixelFunctionCode>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">byte.tif</SourceFilename>
    </SimpleSource>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">byte2.tif</SourceFilename>
    </SimpleSource>
  </VRTRasterBand>
</VRTDataset>


You can put any python module code inside PixelFunctionCode, with at least one 
function with the following arguments :
- in_ar: list of input numpy arrays (one numpy array for each source)
- out_ar: output numpy array to fill (initialized at the right dimensions and 
with the VRTRasterBand.dataType)
- xoff: pixel offset to the top left corner of the accessed region of the band
- yoff: line offset to the top left corner of the accessed region of the band
- xsize: width of the region of the accessed region of the band
- ysize: height of the region of the accessed region of the band
- raster_xsize: total with of the raster band
- raster_ysize: total height of the raster band
- buf_radius: radius of the buffer (in pixels) added to the left, right, top 
and bottom of in_ar / out_ar
- gt: geotransform
- kwargs: dictionnary with user arguments defined in PixelFunctionArguments

For basic operations, you just need to care about in_ar and out_ar.

With all that, you can do interesting stuff like hillshading (code ported from 
gdaldem):

<VRTDataset rasterXSize="121" rasterYSize="121">
  <SRS>EPSG:4326</SRS>
  <GeoTransform>-80.004166666666663,0.008333333333333,0,
44.004166666666663,0,-0.008333333333333</GeoTransform>
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <ColorInterp>Gray</ColorInterp>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">n43.dt0</SourceFilename>
    </SimpleSource>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionType>hillshade</PixelFunctionType>
    <PixelFunctionArguments scale="111120" z_factor="30" />
    <PixelFunctionCode>
      <![CDATA[
# Licence: X/MIT
# Copyright 2016, Even Rouault
import math

def hillshade_int(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                         raster_ysize, radius, gt, z, scale):
    ovr_scale_x = float(out_ar.shape[1] - 2 * radius) / xsize
    ovr_scale_y = float(out_ar.shape[0] - 2 * radius) / ysize
    ewres = gt[1] / ovr_scale_x
    nsres = gt[5] / ovr_scale_y
    inv_nsres = 1.0 / nsres
    inv_ewres = 1.0 / ewres

    az = 315
    alt = 45
    degreesToRadians = math.pi / 180

    sin_alt = math.sin(alt * degreesToRadians)
    azRadians = az * degreesToRadians
    z_scale_factor = z / (8 * scale)
    cos_alt_mul_z_scale_factor = \
              math.cos(alt * degreesToRadians) * z_scale_factor
    cos_az_mul_cos_alt_mul_z_scale_factor_mul_254 = \
                254 * math.cos(azRadians) * cos_alt_mul_z_scale_factor
    sin_az_mul_cos_alt_mul_z_scale_factor_mul_254 = \
                254 * math.sin(azRadians) * cos_alt_mul_z_scale_factor
    square_z_scale_factor = z_scale_factor * z_scale_factor
    sin_alt_mul_254 = 254.0 * sin_alt

    for j in range(radius, out_ar.shape[0]-radius):
        win_line = in_ar[0][j-radius:j+radius+1,:]
        for i in range(radius, out_ar.shape[1]-radius):
            win = win_line[:,i-radius:i+radius+1].tolist()
            x = inv_ewres * ((win[0][0] + win[1][0] + win[1][0] + win[2][0])-\
                             (win[0][2] + win[1][2] + win[1][2] + win[2][2])) 
            y = inv_nsres * ((win[2][0] + win[2][1] + win[2][1] + win[2][2])-\
                             (win[0][0] + win[0][1] + win[0][1] + win[0][2]))
            xx_plus_yy = x * x + y * y
            cang_mul_254 = (sin_alt_mul_254 - \
                (y * cos_az_mul_cos_alt_mul_z_scale_factor_mul_254 - \
                    x * sin_az_mul_cos_alt_mul_z_scale_factor_mul_254)) / \
                math.sqrt(1 + square_z_scale_factor * xx_plus_yy)
            if cang_mul_254 < 0:
                out_ar[j,i] = 1
            else:
                out_ar[j,i] = 1 + round(cang_mul_254)

def hillshade(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize, 
              raster_ysize, radius, gt, **kwargs):
    z = float(kwargs['z_factor'])
    scale= float(kwargs['scale'])
    hillshade_int(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                  raster_ysize, radius, gt, z, scale)

]]>
    </PixelFunctionCode>
    <BufferRadius>1</BufferRadius>
    <SourceTransferType>Int16</SourceTransferType>
  </VRTRasterBand>
</VRTDataset>

You can completely offload the python code itself into a proper my_lib.py file 
and just specify
    <PixelFunctionType>my_lib.hillshade</PixelFunctionType>

Technically, the interfacing with Python is done at run-time by dynamically 
loading Python symbols with dlopen()/GetProcAddress(), when they are already 
available in the process. For example if libgdal is loaded from a Python 
interpreter, or from a binary like QGIS which has already loaded the Python 
lib. Otherwise a few shared objects ("libpython2.7.so", "python27.dll",  
"libpython3.4m.so", etc.) are tried, unless the PYTHONSO config option is 
specified to point to a precise filename. The advantage of this approach is that 
the same GDAL library binary is compatible of all Python 2.X (tested: 2.6, 
2.7) and 3.X (tested: 3.1, 3.4) versions, and any numpy version that comes in 
the Python environment used (at compilation time you don't need any 
python/numpy development package). The numpy dependency is not a critical one: 
one could imagine a fallback mode where Python arrays would be used instead, 
but this has likely little interest.

Successfully tested on Linux, MacOSX, FreeBSD and Windows. Some extra tweaking 
of the predefined set of shared object names - that are probed when no already 
loaded Python environment is found - might be needed.
The implementation should be thread-safe regarding use of the Python Global 
Interpreter Lock (GIL).

I've also tested with the numba Just-In-Time compiler 
(http://numba.pydata.org/) and it provides major performance improvements for 
highly computational code (example given below).
With numba enabled, I found that my above Python hillshading on a 10Kx10K 
float32 raster was even faster than gdaldem (the reason is that the Python 
version is a bit simplified as it doesn't take into account input nodata 
values), whereas the non-jit'ed one is 100x slower. When removing the nodata 
flag, gdaldem is only twice faster as the jit'ed python code. So this is a good 
sign that such approach isn't only a toy or just for prototyping.
Speaking of JIT, there's no provision (yet?) for interfacing with PyPy. Would 
require a new backend as PyPy C API has nothing to do with the CPython one.

There are obvious security concerns in allowing Python code to be run when 
getting the content of a vrt file. The GDAL_VRT_ENABLE_PYTHON config option = 
IF_SAFE / NO / YES can be set to control the behaviour. The default is IF_SAFE 
(can be change at compilation time by defining 
-DGDAL_VRT_ENABLE_PYTHON_DEFAULT="NO" e.g. And Python code execution can be 
completely disabled with -DGDAL_VRT_DISABLE_PYTHON). Safe must be understood 
as: the code will not read, write, delete... files, spawn external code, do 
network activity, etc. Said otherwise, the code will only do "maths". But 
infinite looping is something definitely possible in the safe mode. The 
heuristics of the IF_SAFE mode is rather basic and I'd be grateful if people 
could point ways of breaking it. If any of the following strings - "import" 
(unless it is "import numpy" / "from numpy import ...", "import math" / "from 
math import ..." or "from numba import jit"), "eval", "compile", "open", 
"load", "file", "input", "save", "memmap", "DataSource", "genfromtxt", 
"getattr", "ctypeslib", "testing", "dump", "fromregex" - is found anywhere in 
the code, then the code is considered unsafe (there are interestingly a lot of 
methods in numpy to do file I/O. Hopefully I've captured them with the previous 
filters). Another 'unsafe' pattern is when the pixel function references an 
external module like my above my_lib.hillshade example (who knows if there 
will not be some day a shutil.reformat_your_hard_drive function with the right 
prototype...)

This new capability isn't yet documented in the VRT doc, although this message 
will be a start.

I'm interested in feedback you may have.

And to conclude with a fun example: a raster with a Mandelbrot fractal. Just a 
grey-level version. Let to the reader as an exercice: add a color table. To be 
opened for example in QGIS and enjoy the almost infinite zoom feeling. Make 
sure to disable contrast enhancement. It uses numba when available, and when 
this is the case, it's really fast when paning/zooming.

<VRTDataset rasterXSize="100000000" rasterYSize="100000000">
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionType>mandelbrot</PixelFunctionType>
    <PixelFunctionCode>
      <![CDATA[
try:
    from numba import jit
    #print('Using numba')
    g_max_iterations = 100
except:
    class jit(object):
        def __init__(self, nopython = True, nogil = True):
            pass

        def __call__(self, f):
            return f

    #print('Using non-JIT version')
    g_max_iterations = 25

# Use a wrapper since the VRT code cannot access the jit decorated function
def mandelbrot(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                        raster_ysize, r, gt, **kwargs):
    mandelbrot_jit(out_ar, xoff, yoff, xsize, ysize, raster_xsize, raster_ysize, 
g_max_iterations)

@jit(nopython=True, nogil=True)
def mandelbrot_jit(out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                        raster_ysize, max_iterations):
    ovr_factor_y = float(out_ar.shape[0]) / ysize
    ovr_factor_x = float(out_ar.shape[1]) / xsize
    for j in range( out_ar.shape[0]):
        y0 = 2.0 * (yoff + j / ovr_factor_y) / raster_ysize - 1
        for i in range(out_ar.shape[1]):
            x0 = 3.5 * (xoff + i / ovr_factor_x) / raster_xsize - 2.5
            x = 0.0
            y = 0.0
            x2 = 0.0
            y2 = 0.0
            iteration = 0
            while x2 + y2 < 4 and iteration < max_iterations:
                y = 2*x*y + y0
                x = x2 - y2 + x0
                x2 = x * x
                y2 = y * y
                iteration += 1

            out_ar[j][i] = iteration * 255 / max_iterations
]]>
    </PixelFunctionCode>
    <Metadata>
      <MDI key="STATISTICS_MAXIMUM">255</MDI>
      <MDI key="STATISTICS_MEAN">127</MDI>
      <MDI key="STATISTICS_MINIMUM">0</MDI>
      <MDI key="STATISTICS_STDDEV">127</MDI>
    </Metadata>
    <ColorInterp>Gray</ColorInterp>
    <Histograms>
      <HistItem>
        <HistMin>-0.5</HistMin>
        <HistMax>255.5</HistMax>
        <BucketCount>256</BucketCount>
        <IncludeOutOfRange>0</IncludeOutOfRange>
        <Approximate>1</Approximate>
        <HistCounts>0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0</HistCounts>
      </HistItem>
    </Histograms>
  </VRTRasterBand>
</VRTDataset>

Statistics have been added just to make QGIS open the file a bit quicker.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sean at mapbox.com  Mon Sep 12 06:19:56 2016
From: sean at mapbox.com (Sean Gillies)
Date: Mon, 12 Sep 2016 15:19:56 +0200
Subject: [gdal-dev] Request for comments on Rasterio documentation
In-Reply-To: <201609091140.36275.even.rouault@spatialys.com>
References: <CADPhZXzsyvSB2LFqpbjmH6YcE-oinf=6H0xxsjixN-2jQNyegQ@mail.gmail.com>
 <201609091140.36275.even.rouault@spatialys.com>
Message-ID: <CADPhZXwkor85bpXv4Dp_rHc3OuyNbda-nDxU0+R4Nd_y=ai0BA@mail.gmail.com>

Hi Even,

Thanks for the comments! More from me below...

On Fri, Sep 9, 2016 at 11:40 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Sean,
>
> I've actually a question along Howard's yesterday tweet regarding mutual
> incompatiblity between osgeo.gdal and rasterio. From my understanding of
> the
> doc and look at rasterio code (
> https://github.com/mapbox/rasterio/blob/master/rasterio/_drivers.pyx and
> https://github.com/mapbox/rasterio/blob/master/rasterio/env.py) , it
> seems the
> potential issues would be about driver registration, config options and
> error
> handlers, right ?
>
> But as rasterio.Env() seems to take care about restoring the environment to
> what it was about, I would have thought that folks could do safely things
> like
>
> 1: do osgeo.gdal stuff
> 2:  with rasterio.Env(): do rasterio stuff
> 3 : do osgeo.gdal stuff
>
> Actually taking a look at rasterio/_drivers.pyx , it seems that the error
> handler isn't restored, so could be an issue if folks in 1. would install a
> custom global one. I guess the reason for not restoring the previous
> handler
> is for workflows like
>
> with rasterio.Env()
>      src = rasterio.open()
> do stuff with src
>
> where you cannot restore the error handler at a precise point.
>
> To address this, a possibility would be for rasterio to use
> CPLPushErrorHandler() / CPLPopErrorHandler() around each call, or group of
> calls, it makes to GDAL.
>

Yes, this is a good idea. It is achievable and will make Rasterio more
compatible with osgeo.gdal (as well as the Fiona modules).


>
> GDALEnv.start() calls GDALAllRegister, so potentially if folks had de-
> registered a driver in 1., then will find it registered again in step 3.,
> but
> that's a pretty uncommon use case (I'm not aware of anyone using
> driver.Deregister() / driver.Register() except in GDAL autotest suite to
> make
> sure the right jpeg2000 driver is used)
>
> Apart from that, it isn't obvious to me why things couldn't be mixed in the
> same process. I guess that even in 2. you could call osgeo.gdal stuff in a
> reasonably safe way (with the environment & error handler set by rasterio
> of
> course)
>

Yes, I suppose it could be okay to call gdal functions within a
rasterio.Env() block as long as you didn't change the error handler or
config options. I can't help thinking that "you can use a subset of gdal
with Rasterio" advice sets users up for trouble and I'd like to avoid that.


>
> Reading again, I'm not sure that "Additionally, gdal and Rasterio register
> conflicting error handlers and thus the propagation of exceptions and
> warnings
> may depend on which module was imported last." is true. Importing
> gdal.osgeo
> only calls GDALAllRegister() and as far as I understood importing rasterio
> is
> a no-op regarding calls to the GDAL API.
>

Thank you for correcting me. It's gdal.UseExceptions() that
calls CPLSetErrorHandler(), yes? And so I should say "may depend on whether
rasterio.Env() or gdal.UseExceptions() was called last."


>
>
> Regarding the example 'with rasterio.Env(GDAL_CACHEMAX=512):', there's a
> potential pitfall in that the GDAL_CACHEMAX config option is read *only*
> the
> first time GDALGetCacheMax()/GDALGetCacheMax64() is called, so changing it
> afterwards will have no effect.
>
> So if you do things like
>
> with rasterio.Env(GDAL_CACHEMAX=512):
>         rasterio.open(...)
>
> with rasterio.Env(GDAL_CACHEMAX=1024):
>         rasterio.open(...)  <-- will only see the effect GDAL_CACHEMAX=512
>
> If you want to actively change the value you must call GDALSetCacheMax() /
> GDALSetCacheMax64().
>

Good to know! I will change my example and deal with this issue in Rasterio.


>
> More about a rasterio design choice: I see that the master representation
> used
> in rasterio for a crs is the proj.4 string (or +init=epsg:XXXX when
> detected),
> right ? So "src.crs.wkt" will not give you back the original WKT string
> coming
> from GDAL but one that is reconstructed by using OSRImportFromProj4() (or
> OSRImportFromEPSG()) and then OSRExportToWKT(). This might work well in
> most
> use cases where the CRS is not too exotic, but you might lose for example
> the
> actual datum name, which could be a problem if folks want to select another
> datum shift than the one proposed by default, or think about CRS for
> imagery
> of other planets.
>

Yes, I think Rasterio's CRS class should probably switch to WKT for its
canonical representation sooner than later.

Even, has the idea of an API for getting the current configuration of GDAL,
meaning all the currently set options, ever been proposed and discussed? It
seems like this could help modules coexist better.

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160912/f21747f7/attachment.html>

From even.rouault at spatialys.com  Mon Sep 12 06:40:01 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 12 Sep 2016 15:40:01 +0200
Subject: [gdal-dev] Request for comments on Rasterio documentation
In-Reply-To: <CADPhZXwkor85bpXv4Dp_rHc3OuyNbda-nDxU0+R4Nd_y=ai0BA@mail.gmail.com>
References: <CADPhZXzsyvSB2LFqpbjmH6YcE-oinf=6H0xxsjixN-2jQNyegQ@mail.gmail.com>
 <201609091140.36275.even.rouault@spatialys.com>
 <CADPhZXwkor85bpXv4Dp_rHc3OuyNbda-nDxU0+R4Nd_y=ai0BA@mail.gmail.com>
Message-ID: <201609121540.01297.even.rouault@spatialys.com>

Sean,

> Yes, I suppose it could be okay to call gdal functions within a
> rasterio.Env() block as long as you didn't change the error handler or
> config options. I can't help thinking that "you can use a subset of gdal
> with Rasterio" advice sets users up for trouble and I'd like to avoid that.

Yes I can understand that. My point is that one currently gets the feeling 
that things will immediately breaks if you mix rasterio with osgeo.gdal, 
whereas they might potentially subtely break (anyway folks ready to use 
osgeo.gdal shouldn't be too afraid of that :-) )

> 
> Thank you for correcting me. It's gdal.UseExceptions() that
> calls CPLSetErrorHandler(), yes? 

Yes,  gdal.UseExceptions() installs a new global handler with 
CPLSetErrorHandler(), and gdal.DontUseExceptions() restore the previous 
handler (saved during the call of gdal.UseExceptions())

> And so I should say "may depend on whether
> rasterio.Env() or gdal.UseExceptions() was called last."

Correct.

> 
> Yes, I think Rasterio's CRS class should probably switch to WKT for its
> canonical representation sooner than later.

<joke>Which version of WKT: OGC 01-009 or OGC 12-063r5 ?</joke>

> 
> Even, has the idea of an API for getting the current configuration of GDAL,
> meaning all the currently set options, ever been proposed and discussed? It
> seems like this could help modules coexist better.

Do you mean get the list of key=value that would have been pushed with 
CPLSetConfigOption() ? I'm not sure if this has been discussed, but it should 
just be a matter of returning the global papszConfigOptions string list (or a 
copy of it to avoid threading issues) of port/cpl_conv.cpp. There might be 
some subtelty to take into account  as you can also define thread-local 
configuration options with CPLSetThreadLocalConfigOption(), so such a function 
would perhaps have to incorporate those thread local ones into the global list 
(or perhaps have a specific function for getting only the thread local ones).
However when GDAL calls CPLGetConfigOption(), it doesn't just use the values 
set by CPLSetConfigOption() / CPLSetThreadLocalConfigOption() but also the 
operating system environment variable, so it isn't obvious if they should also 
be returned by such a function.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sean at mapbox.com  Mon Sep 12 08:08:45 2016
From: sean at mapbox.com (Sean Gillies)
Date: Mon, 12 Sep 2016 17:08:45 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609121431.43953.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
Message-ID: <CADPhZXwtLPRYvT6-WMBBg8xtkXCBF0s6p=X2oCqskiOiMA0P4Q@mail.gmail.com>

Hi Even,

On Mon, Sep 12, 2016 at 2:31 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi,
>
> I wanted to mention a new (and I think pretty cool ) feature I've added in
> trunk: the possibility to define pixel functions in Python in a VRT derived
> band.
>
> ...
>
> There are obvious security concerns in allowing Python code to be run when
> getting the content of a vrt file. The GDAL_VRT_ENABLE_PYTHON config
> option =
> IF_SAFE / NO / YES can be set to control the behaviour. The default is
> IF_SAFE
> (can be change at compilation time by defining
> -DGDAL_VRT_ENABLE_PYTHON_DEFAULT="NO" e.g. And Python code execution can
> be
> completely disabled with -DGDAL_VRT_DISABLE_PYTHON). Safe must be
> understood
> as: the code will not read, write, delete... files, spawn external code, do
> network activity, etc. Said otherwise, the code will only do "maths". But
> infinite looping is something definitely possible in the safe mode. The
> heuristics of the IF_SAFE mode is rather basic and I'd be grateful if
> people
> could point ways of breaking it. If any of the following strings - "import"
> (unless it is "import numpy" / "from numpy import ...", "import math" /
> "from
> math import ..." or "from numba import jit"), "eval", "compile", "open",
> "load", "file", "input", "save", "memmap", "DataSource", "genfromtxt",
> "getattr", "ctypeslib", "testing", "dump", "fromregex" - is found anywhere
> in
> the code, then the code is considered unsafe (there are interestingly a
> lot of
> methods in numpy to do file I/O. Hopefully I've captured them with the
> previous
> filters). Another 'unsafe' pattern is when the pixel function references an
> external module like my above my_lib.hillshade example (who knows if there
> will not be some day a shutil.reformat_your_hard_drive function with the
> right
> prototype...)
>
> This new capability isn't yet documented in the VRT doc, although this
> message
> will be a start.
>
> I'm interested in feedback you may have.
>

I found http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
to be a good intro to the risks of eval'ing untrusted Python code.
Mentioned in there is a notable attempt to make a secure subset of Python
called "pysandbox", but its developer has since declared it "broken by
design": https://lwn.net/Articles/574215/. I'm not knowledgeable enough
about sandboxing (OS or otherwise) to say if that's right.

I see that in GDAL 2.0+ we can set options in the VRT XML itself. Is it
possible to set GDAL_VRT_ENABLE_PYTHON=YES in a VRT and thus override the
reader's own trust policies? My ignorance of how GDAL separates "open"
options from "config" options might be on display in this question.

My $.02 is that since "is safe" will be hard to guarantee (it's an
outstanding unsolved Python community issue), removing "IF_SAFE" from the
options would be a good thing and that the default for
GDAL_VRT_ENABLE_PYTHON should be "NO".

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160912/160dd9f7/attachment.html>

From Victor.Poughon at cnes.fr  Mon Sep 12 07:59:34 2016
From: Victor.Poughon at cnes.fr (Poughon Victor)
Date: Mon, 12 Sep 2016 14:59:34 +0000
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609121431.43953.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
Message-ID: <3E55146A6A81B44A9CB69CAB65908CEA35538023@TW-MBX-P01.cnesnet.ad.cnes.fr>

Hi Even,

This is a really cool and really impressive feature!
Calling Python code from C++ without development packages as a dependency sounds like black magic to me. Obviously Python symbols have to be there at some point to execute Python code, so this is only usable from a binary that happens to load them already (CPython, QGIS, etc.), correct? In particular you say that it is "done at run-time by dynamically loading Python symbols". But I'm confused because later you mention incompatibilities issues between the CPython and Pypy API. GDAL's secret sauce, I guess...?
I'm also curious why it's possible to use numba but no pypy, which AFAIK are both python JITs? And finally did you consider using Cython (which claims pypy compatibility)?

Cheers,

Victor Poughon

________________________________________
De : gdal-dev [gdal-dev-bounces at lists.osgeo.org] de la part de Even Rouault [even.rouault at spatialys.com]
Envoyé : lundi 12 septembre 2016 14:31
À : gdal-dev at lists.osgeo.org
Objet : [gdal-dev] VRT derived band pixel functions written in Python

Hi,

I wanted to mention a new (and I think pretty cool ) feature I've added in
trunk: the possibility to define pixel functions in Python in a VRT derived
band.

Let's start with a simple example to multiply a raster by 1.5 :

<VRTDataset rasterXSize="20" rasterYSize="20">
  <SRS>EPSG:26711</SRS>
  <GeoTransform>440720,60,0,3751320,0,-60</GeoTransform>
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <PixelFunctionType>multiply</PixelFunctionType>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionArguments factor="1.5"/>
    <PixelFunctionCode><![CDATA[
import numpy as np
def multiply(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                   raster_ysize, buf_radius, gt, **kwargs):
    factor = float(kwargs['factor'])
    out_ar[:] = np.round_(np.clip(in_ar[0] * factor,0,255))
]]>
    </PixelFunctionCode>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">byte.tif</SourceFilename>
    </SimpleSource>
  </VRTRasterBand>
</VRTDataset>

or to add 2 (or more) rasters:

<VRTDataset rasterXSize="20" rasterYSize="20">
  <SRS>EPSG:26711</SRS>
  <GeoTransform>440720,60,0,3751320,0,-60</GeoTransform>
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <PixelFunctionType>add</PixelFunctionType>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionCode><![CDATA[
import numpy as np
def add(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                   raster_ysize, buf_radius, gt, **kwargs):
    np.round_(np.clip(np.sum(in_ar, axis = 0, dtype = 'uint16'),0,255),
              out = out_ar)
]]>
    </PixelFunctionCode>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">byte.tif</SourceFilename>
    </SimpleSource>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">byte2.tif</SourceFilename>
    </SimpleSource>
  </VRTRasterBand>
</VRTDataset>


You can put any python module code inside PixelFunctionCode, with at least one
function with the following arguments :
- in_ar: list of input numpy arrays (one numpy array for each source)
- out_ar: output numpy array to fill (initialized at the right dimensions and
with the VRTRasterBand.dataType)
- xoff: pixel offset to the top left corner of the accessed region of the band
- yoff: line offset to the top left corner of the accessed region of the band
- xsize: width of the region of the accessed region of the band
- ysize: height of the region of the accessed region of the band
- raster_xsize: total with of the raster band
- raster_ysize: total height of the raster band
- buf_radius: radius of the buffer (in pixels) added to the left, right, top
and bottom of in_ar / out_ar
- gt: geotransform
- kwargs: dictionnary with user arguments defined in PixelFunctionArguments

For basic operations, you just need to care about in_ar and out_ar.

With all that, you can do interesting stuff like hillshading (code ported from
gdaldem):

<VRTDataset rasterXSize="121" rasterYSize="121">
  <SRS>EPSG:4326</SRS>
  <GeoTransform>-80.004166666666663,0.008333333333333,0,
44.004166666666663,0,-0.008333333333333</GeoTransform>
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <ColorInterp>Gray</ColorInterp>
    <SimpleSource>
      <SourceFilename relativeToVRT="1">n43.dt0</SourceFilename>
    </SimpleSource>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionType>hillshade</PixelFunctionType>
    <PixelFunctionArguments scale="111120" z_factor="30" />
    <PixelFunctionCode>
      <![CDATA[
# Licence: X/MIT
# Copyright 2016, Even Rouault
import math

def hillshade_int(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                         raster_ysize, radius, gt, z, scale):
    ovr_scale_x = float(out_ar.shape[1] - 2 * radius) / xsize
    ovr_scale_y = float(out_ar.shape[0] - 2 * radius) / ysize
    ewres = gt[1] / ovr_scale_x
    nsres = gt[5] / ovr_scale_y
    inv_nsres = 1.0 / nsres
    inv_ewres = 1.0 / ewres

    az = 315
    alt = 45
    degreesToRadians = math.pi / 180

    sin_alt = math.sin(alt * degreesToRadians)
    azRadians = az * degreesToRadians
    z_scale_factor = z / (8 * scale)
    cos_alt_mul_z_scale_factor = \
              math.cos(alt * degreesToRadians) * z_scale_factor
    cos_az_mul_cos_alt_mul_z_scale_factor_mul_254 = \
                254 * math.cos(azRadians) * cos_alt_mul_z_scale_factor
    sin_az_mul_cos_alt_mul_z_scale_factor_mul_254 = \
                254 * math.sin(azRadians) * cos_alt_mul_z_scale_factor
    square_z_scale_factor = z_scale_factor * z_scale_factor
    sin_alt_mul_254 = 254.0 * sin_alt

    for j in range(radius, out_ar.shape[0]-radius):
        win_line = in_ar[0][j-radius:j+radius+1,:]
        for i in range(radius, out_ar.shape[1]-radius):
            win = win_line[:,i-radius:i+radius+1].tolist()
            x = inv_ewres * ((win[0][0] + win[1][0] + win[1][0] + win[2][0])-\
                             (win[0][2] + win[1][2] + win[1][2] + win[2][2]))
            y = inv_nsres * ((win[2][0] + win[2][1] + win[2][1] + win[2][2])-\
                             (win[0][0] + win[0][1] + win[0][1] + win[0][2]))
            xx_plus_yy = x * x + y * y
            cang_mul_254 = (sin_alt_mul_254 - \
                (y * cos_az_mul_cos_alt_mul_z_scale_factor_mul_254 - \
                    x * sin_az_mul_cos_alt_mul_z_scale_factor_mul_254)) / \
                math.sqrt(1 + square_z_scale_factor * xx_plus_yy)
            if cang_mul_254 < 0:
                out_ar[j,i] = 1
            else:
                out_ar[j,i] = 1 + round(cang_mul_254)

def hillshade(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
              raster_ysize, radius, gt, **kwargs):
    z = float(kwargs['z_factor'])
    scale= float(kwargs['scale'])
    hillshade_int(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                  raster_ysize, radius, gt, z, scale)

]]>
    </PixelFunctionCode>
    <BufferRadius>1</BufferRadius>
    <SourceTransferType>Int16</SourceTransferType>
  </VRTRasterBand>
</VRTDataset>

You can completely offload the python code itself into a proper my_lib.py file
and just specify
    <PixelFunctionType>my_lib.hillshade</PixelFunctionType>

Technically, the interfacing with Python is done at run-time by dynamically
loading Python symbols with dlopen()/GetProcAddress(), when they are already
available in the process. For example if libgdal is loaded from a Python
interpreter, or from a binary like QGIS which has already loaded the Python
lib. Otherwise a few shared objects ("libpython2.7.so", "python27.dll",
"libpython3.4m.so", etc.) are tried, unless the PYTHONSO config option is
specified to point to a precise filename. The advantage of this approach is that
the same GDAL library binary is compatible of all Python 2.X (tested: 2.6,
2.7) and 3.X (tested: 3.1, 3.4) versions, and any numpy version that comes in
the Python environment used (at compilation time you don't need any
python/numpy development package). The numpy dependency is not a critical one:
one could imagine a fallback mode where Python arrays would be used instead,
but this has likely little interest.

Successfully tested on Linux, MacOSX, FreeBSD and Windows. Some extra tweaking
of the predefined set of shared object names - that are probed when no already
loaded Python environment is found - might be needed.
The implementation should be thread-safe regarding use of the Python Global
Interpreter Lock (GIL).

I've also tested with the numba Just-In-Time compiler
(http://numba.pydata.org/) and it provides major performance improvements for
highly computational code (example given below).
With numba enabled, I found that my above Python hillshading on a 10Kx10K
float32 raster was even faster than gdaldem (the reason is that the Python
version is a bit simplified as it doesn't take into account input nodata
values), whereas the non-jit'ed one is 100x slower. When removing the nodata
flag, gdaldem is only twice faster as the jit'ed python code. So this is a good
sign that such approach isn't only a toy or just for prototyping.
Speaking of JIT, there's no provision (yet?) for interfacing with PyPy. Would
require a new backend as PyPy C API has nothing to do with the CPython one.

There are obvious security concerns in allowing Python code to be run when
getting the content of a vrt file. The GDAL_VRT_ENABLE_PYTHON config option =
IF_SAFE / NO / YES can be set to control the behaviour. The default is IF_SAFE
(can be change at compilation time by defining
-DGDAL_VRT_ENABLE_PYTHON_DEFAULT="NO" e.g. And Python code execution can be
completely disabled with -DGDAL_VRT_DISABLE_PYTHON). Safe must be understood
as: the code will not read, write, delete... files, spawn external code, do
network activity, etc. Said otherwise, the code will only do "maths". But
infinite looping is something definitely possible in the safe mode. The
heuristics of the IF_SAFE mode is rather basic and I'd be grateful if people
could point ways of breaking it. If any of the following strings - "import"
(unless it is "import numpy" / "from numpy import ...", "import math" / "from
math import ..." or "from numba import jit"), "eval", "compile", "open",
"load", "file", "input", "save", "memmap", "DataSource", "genfromtxt",
"getattr", "ctypeslib", "testing", "dump", "fromregex" - is found anywhere in
the code, then the code is considered unsafe (there are interestingly a lot of
methods in numpy to do file I/O. Hopefully I've captured them with the previous
filters). Another 'unsafe' pattern is when the pixel function references an
external module like my above my_lib.hillshade example (who knows if there
will not be some day a shutil.reformat_your_hard_drive function with the right
prototype...)

This new capability isn't yet documented in the VRT doc, although this message
will be a start.

I'm interested in feedback you may have.

And to conclude with a fun example: a raster with a Mandelbrot fractal. Just a
grey-level version. Let to the reader as an exercice: add a color table. To be
opened for example in QGIS and enjoy the almost infinite zoom feeling. Make
sure to disable contrast enhancement. It uses numba when available, and when
this is the case, it's really fast when paning/zooming.

<VRTDataset rasterXSize="100000000" rasterYSize="100000000">
  <VRTRasterBand dataType="Byte" band="1" subClass="VRTDerivedRasterBand">
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionType>mandelbrot</PixelFunctionType>
    <PixelFunctionCode>
      <![CDATA[
try:
    from numba import jit
    #print('Using numba')
    g_max_iterations = 100
except:
    class jit(object):
        def __init__(self, nopython = True, nogil = True):
            pass

        def __call__(self, f):
            return f

    #print('Using non-JIT version')
    g_max_iterations = 25

# Use a wrapper since the VRT code cannot access the jit decorated function
def mandelbrot(in_ar, out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                        raster_ysize, r, gt, **kwargs):
    mandelbrot_jit(out_ar, xoff, yoff, xsize, ysize, raster_xsize, raster_ysize,
g_max_iterations)

@jit(nopython=True, nogil=True)
def mandelbrot_jit(out_ar, xoff, yoff, xsize, ysize, raster_xsize,
                        raster_ysize, max_iterations):
    ovr_factor_y = float(out_ar.shape[0]) / ysize
    ovr_factor_x = float(out_ar.shape[1]) / xsize
    for j in range( out_ar.shape[0]):
        y0 = 2.0 * (yoff + j / ovr_factor_y) / raster_ysize - 1
        for i in range(out_ar.shape[1]):
            x0 = 3.5 * (xoff + i / ovr_factor_x) / raster_xsize - 2.5
            x = 0.0
            y = 0.0
            x2 = 0.0
            y2 = 0.0
            iteration = 0
            while x2 + y2 < 4 and iteration < max_iterations:
                y = 2*x*y + y0
                x = x2 - y2 + x0
                x2 = x * x
                y2 = y * y
                iteration += 1

            out_ar[j][i] = iteration * 255 / max_iterations
]]>
    </PixelFunctionCode>
    <Metadata>
      <MDI key="STATISTICS_MAXIMUM">255</MDI>
      <MDI key="STATISTICS_MEAN">127</MDI>
      <MDI key="STATISTICS_MINIMUM">0</MDI>
      <MDI key="STATISTICS_STDDEV">127</MDI>
    </Metadata>
    <ColorInterp>Gray</ColorInterp>
    <Histograms>
      <HistItem>
        <HistMin>-0.5</HistMin>
        <HistMax>255.5</HistMax>
        <BucketCount>256</BucketCount>
        <IncludeOutOfRange>0</IncludeOutOfRange>
        <Approximate>1</Approximate>
        <HistCounts>0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|
0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0</HistCounts>
      </HistItem>
    </Histograms>
  </VRTRasterBand>
</VRTDataset>

Statistics have been added just to make QGIS open the file a bit quicker.

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/gdal-dev

From even.rouault at spatialys.com  Mon Sep 12 09:39:57 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 12 Sep 2016 18:39:57 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <3E55146A6A81B44A9CB69CAB65908CEA35538023@TW-MBX-P01.cnesnet.ad.cnes.fr>
References: <201609121431.43953.even.rouault@spatialys.com>
 <3E55146A6A81B44A9CB69CAB65908CEA35538023@TW-MBX-P01.cnesnet.ad.cnes.fr>
Message-ID: <201609121839.57637.even.rouault@spatialys.com>

Le lundi 12 septembre 2016 16:59:34, Poughon Victor a écrit :
> Hi Even,
> 
> This is a really cool and really impressive feature!
> Calling Python code from C++ without development packages as a dependency
> sounds like black magic to me.

No black magic. Just setting function pointers using dlopen() :
https://github.com/OSGeo/gdal/blob/trunk/gdal/frmts/vrt/vrtderivedrasterband.cpp#L390

> Obviously Python symbols have to be there
> at some point to execute Python code, so this is only usable from a binary
> that happens to load them already (CPython, QGIS, etc.), correct?

No, there are 2 modes:
- GDAL is loaded after something else has already loaded python (so your 
CPython, QGIS)
- GDAL cannot find any python symbols in the already available symbols of the 
process, in which case it wil try to load a few reasonable shared objects like 
"libpython2.7.so", etc...

See 
https://github.com/OSGeo/gdal/blob/trunk/gdal/frmts/vrt/vrtderivedrasterband.cpp#L238 
and below lines

> But I'm confused because later you mention
> incompatibilities issues between the CPython and Pypy API. GDAL's secret
> sauce, I guess...?

Nothing GDAL specific here. It is just that the way to embed PyPy from C is 
completely different from CPython :

http://doc.pypy.org/en/latest/embedding.html
vs
https://docs.python.org/2/extending/embedding.html

> I'm also curious why it's possible to use numba but no
> pypy, which AFAIK are both python JITs?

numba is "just" a CPython extension (a non-trivial one dragging llvmlite 
etc...), so once you support CPython, it comes for free to use it, provided 
you use the right import and function decorations in your python code.

> And finally did you consider using
> Cython (which claims pypy compatibility)?

No, I didn't investigate that.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Sep 12 11:25:46 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 12 Sep 2016 20:25:46 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CADPhZXwtLPRYvT6-WMBBg8xtkXCBF0s6p=X2oCqskiOiMA0P4Q@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <CADPhZXwtLPRYvT6-WMBBg8xtkXCBF0s6p=X2oCqskiOiMA0P4Q@mail.gmail.com>
Message-ID: <201609122025.47495.even.rouault@spatialys.com>

> I found http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
> to be a good intro to the risks of eval'ing untrusted Python code.
> Mentioned in there is a notable attempt to make a secure subset of Python
> called "pysandbox", but its developer has since declared it "broken by
> design": https://lwn.net/Articles/574215/. I'm not knowledgeable enough
> about sandboxing (OS or otherwise) to say if that's right.

Those links are fascinating. I wouldn't have imagined that there was valid 
Python code that could crash the Python interpreter, almost by design ! (so 
the osgeo.gdal gotchas are not so bad after all :-) )
OK, so I've followed your suggestion:
* IF_SAFE mode is removed (actually between #if 0 / #endif if someone wants to 
pursue the sandboxing effort),
* and the default of GDAL_VRT_ENABLE_PYTHON is now NO.

> 
> I see that in GDAL 2.0+ we can set options in the VRT XML itself. Is it
> possible to set GDAL_VRT_ENABLE_PYTHON=YES in a VRT and thus override the
> reader's own trust policies?

No, that's not possible. GDAL_VRT_ENABLE_PYTHON is a config option only, so can 
only be set as a env variable or through CPLSetConfigOption().

We could imagine to provide it as an option of the VRT indeed, but then there 
would be interesting situations like the following. Imagine something called 
"my.tif" with the following content :

<VRTDataset rasterXSize="20" rasterYSize="20">
  <VRTRasterBand dataType="Byte" band="1">
    <ColorInterp>Gray</ColorInterp>
    <SimpleSource>
      <SourceFilename relativeToVRT="1"><![CDATA[
<VRTDataset .... evil Python code here ... .... >]]></SourceFilename>
      <OpenOptions>
        <OOI key="ENABLE_PYTHON">YES</OOI>
      </OpenOptions>
    </SimpleSource>
  </VRTRasterBand>
</VRTDataset>

The internalized VRT would then be allowed with ENABLE_PYTHON=YES.

So it's probably a good idea to not provide an open option for now. One could 
perhaps imagine to introduce one, provided we make it illegal as an item in 
<OpenOptions>, so it can only be provided by "top-level" GDALOpenEx() calls.

> My ignorance of how GDAL separates "open"
> options from "config" options might be on display in this question.

They are just 2 different mechanisms of providing options. There's no automatic 
bridge between both concepts. Sometimes some option may exist in both worlds 
(because historically there was only global config option, but in some use 
cases, some options mostly make sense per dataset) or in just one of them.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jamessramm at gmail.com  Mon Sep 12 14:38:41 2016
From: jamessramm at gmail.com (James Ramm)
Date: Mon, 12 Sep 2016 22:38:41 +0100
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609122025.47495.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <CADPhZXwtLPRYvT6-WMBBg8xtkXCBF0s6p=X2oCqskiOiMA0P4Q@mail.gmail.com>
 <201609122025.47495.even.rouault@spatialys.com>
Message-ID: <CAEW=KS6ajCTKdcydttEo7xjFuY+6M4un40N-jx_PEZf2gLSOjA@mail.gmail.com>

Incredible!!!!
Really cool initiative.

I had a play around and wanted a way to be able to write the pixel function
in a 'stand alone' python module and generate the VRT from it. This would
allow independent testing and easier maintenance of the python code. It is
fairly easy using lxml to build up the VRT dynamically:

https://github.com/JamesRamm/gdal_pixel_functions

In the example I more-or-less recreate the hillshade example Even posted,
although there is a lot of functionality missing from the VRT-builder
still, so some nodes are not present.
It would be quite easy therefore, to expand this to a sort of GDAL
'algorithms library' (I think it can wholesale replace what I had tried
here: https://github.com/JamesRamm/GeoAlg).

One thing I would note (if I understand correctly) is that you have
specified any "import" statement as unsafe except numpy/math and numba? It
might be better to either allow imports or not allow them at all (unless
the config option is set) as I don't see why those libraries would be any
more or any less 'safe' than another library...e.g. another standard
library module.

I would agree with Sean and remove 'IF_SAFE' and leave it entirely to the
users discretion. Many users who are working with their own local data will
likely have no problems about just setting it to 'YES' and I imagine users
for whom it would be a probably might already have their own rules on what
constitutes 'safe'?

On a sidenote - does this new functionality overlap considerably with the
gdal map algebra project?

On 12 September 2016 at 19:25, Even Rouault <even.rouault at spatialys.com>
wrote:

> > I found http://nedbatchelder.com/blog/201206/eval_really_is_
> dangerous.html
> > to be a good intro to the risks of eval'ing untrusted Python code.
> > Mentioned in there is a notable attempt to make a secure subset of Python
> > called "pysandbox", but its developer has since declared it "broken by
> > design": https://lwn.net/Articles/574215/. I'm not knowledgeable enough
> > about sandboxing (OS or otherwise) to say if that's right.
>
> Those links are fascinating. I wouldn't have imagined that there was valid
> Python code that could crash the Python interpreter, almost by design ! (so
> the osgeo.gdal gotchas are not so bad after all :-) )
> OK, so I've followed your suggestion:
> * IF_SAFE mode is removed (actually between #if 0 / #endif if someone
> wants to
> pursue the sandboxing effort),
> * and the default of GDAL_VRT_ENABLE_PYTHON is now NO.
>
> >
> > I see that in GDAL 2.0+ we can set options in the VRT XML itself. Is it
> > possible to set GDAL_VRT_ENABLE_PYTHON=YES in a VRT and thus override the
> > reader's own trust policies?
>
> No, that's not possible. GDAL_VRT_ENABLE_PYTHON is a config option only,
> so can
> only be set as a env variable or through CPLSetConfigOption().
>
> We could imagine to provide it as an option of the VRT indeed, but then
> there
> would be interesting situations like the following. Imagine something
> called
> "my.tif" with the following content :
>
> <VRTDataset rasterXSize="20" rasterYSize="20">
>   <VRTRasterBand dataType="Byte" band="1">
>     <ColorInterp>Gray</ColorInterp>
>     <SimpleSource>
>       <SourceFilename relativeToVRT="1"><![CDATA[
> <VRTDataset .... evil Python code here ... .... >]]></SourceFilename>
>       <OpenOptions>
>         <OOI key="ENABLE_PYTHON">YES</OOI>
>       </OpenOptions>
>     </SimpleSource>
>   </VRTRasterBand>
> </VRTDataset>
>
> The internalized VRT would then be allowed with ENABLE_PYTHON=YES.
>
> So it's probably a good idea to not provide an open option for now. One
> could
> perhaps imagine to introduce one, provided we make it illegal as an item in
> <OpenOptions>, so it can only be provided by "top-level" GDALOpenEx()
> calls.
>
> > My ignorance of how GDAL separates "open"
> > options from "config" options might be on display in this question.
>
> They are just 2 different mechanisms of providing options. There's no
> automatic
> bridge between both concepts. Sometimes some option may exist in both
> worlds
> (because historically there was only global config option, but in some use
> cases, some options mostly make sense per dataset) or in just one of them.
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160912/d240ad13/attachment.html>

From kassies at gmail.com  Tue Sep 13 00:02:09 2016
From: kassies at gmail.com (Rutger)
Date: Tue, 13 Sep 2016 00:02:09 -0700 (PDT)
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609121431.43953.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
Message-ID: <1473750129580-5285450.post@n6.nabble.com>

Hi Even,

This is really amazing. I'm becoming more and more a fan of Numba for number
crunching, so this certainly makes my day. As soon as i can find a Win x64
dev version on a Conda channel I'll give it a try.

A use case that comes to mind, and which i run into regularly, is when i
want to do some simple aggregation before using something like gdalwarp. For
example when you have a file containing 24 hourly temperature values, and
you are only interested in the daily mean. Currently i either aggregate
before warping and write the intermediates to disk, or aggregate after
warping which is computationally inefficient. Neither is optimal.

A few questions, can you access a files metadata from within a pixel
function? This would perhaps allow for example interpolating atmospheric
data to the overpass time of a satellite image.

Do the pixel functions also work with @numba.vectorize(), in particular when
targeting 'parallel' or 'cuda'. And would that give parallel processing for
both IO and calculations?

You should give the folks at Continuum a heads up, i'm sure they appreciate
seeing Numba used like this. 


Regards,
Rutger






--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functions-written-in-Python-tp5285323p5285450.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Tue Sep 13 00:20:20 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 09:20:20 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CAEW=KS6ajCTKdcydttEo7xjFuY+6M4un40N-jx_PEZf2gLSOjA@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609122025.47495.even.rouault@spatialys.com>
 <CAEW=KS6ajCTKdcydttEo7xjFuY+6M4un40N-jx_PEZf2gLSOjA@mail.gmail.com>
Message-ID: <201609130920.20996.even.rouault@spatialys.com>

Le lundi 12 septembre 2016 23:38:41, James Ramm a écrit :
> Incredible!!!!
> Really cool initiative.
> 
> I had a play around and wanted a way to be able to write the pixel function
> in a 'stand alone' python module and generate the VRT from it. This would
> allow independent testing and easier maintenance of the python code. It is
> fairly easy using lxml to build up the VRT dynamically:
> 
> https://github.com/JamesRamm/gdal_pixel_functions
> 
> In the example I more-or-less recreate the hillshade example Even posted,
> although there is a lot of functionality missing from the VRT-builder
> still, so some nodes are not present.
> It would be quite easy therefore, to expand this to a sort of GDAL
> 'algorithms library' (I think it can wholesale replace what I had tried
> here: https://github.com/JamesRamm/GeoAlg).

a "-of VRT" option in current gdal_calc.py could also be cool (at least for 
simple one line operations)

Programmatic creation of VRT derived band, with the previous scope (ie calling 
a native registered pixel function), already existed. See 
https://github.com/OSGeo/gdal/blob/trunk/autotest/gdrivers/vrtderived.py#L175
I didn't extend for now the VRTDataset::AddBand implementation to set the new 
elements needed for the Python stuff, but that would certainly be doable.

> 
> One thing I would note (if I understand correctly) is that you have
> specified any "import" statement as unsafe except numpy/math and numba? It
> might be better to either allow imports or not allow them at all (unless
> the config option is set) as I don't see why those libraries would be any
> more or any less 'safe' than another library...e.g. another standard
> library module.

Well, the idea was that those modules should only do math stuff and not 
interact with the rest of the system (contrary to 'os', 'system' and the like) 
But is in the numpy case, it is not actually true since it has I/O methods, 
hence my naive attempt to blacklist those by names.

> 
> I would agree with Sean and remove 'IF_SAFE' and leave it entirely to the
> users discretion. 

That's what I've done (see previous message)

> Many users who are working with their own local data will
> likely have no problems about just setting it to 'YES' and I imagine users
> for whom it would be a probably might already have their own rules on what
> constitutes 'safe'?
> 
> On a sidenote - does this new functionality overlap considerably with the
> gdal map algebra project?

Indeed. I think there might be several incarnations of such capability and I'm 
not sure we can come up with a single one that will satisfy all needs and 
constraints. The VRT way has some use cases where it shines (on-the-fly 
computation of a region of interest. easy integration with upper levels in the 
stack: QGIS, MapServer, etc...), whereas you could imagine something else 
efficient in doing whole raster processing with parallelism etc... 

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From ari.jolma at gmail.com  Tue Sep 13 01:15:42 2016
From: ari.jolma at gmail.com (Ari Jolma)
Date: Tue, 13 Sep 2016 11:15:42 +0300
Subject: [gdal-dev] Update on RFC 62: Raster algebra
Message-ID: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>

There's been some discussion here about doing pixel function 
calculations in VRT derived bands, so I thought I'd let you know what 
are my thoughts and what I've done regarding RFC 62.

At FOSS4G my conclusion was that my first approach was not good for many 
reasons, most importantly because it did not scale to several bands in 
one operation. So I've trying with the following ideas/decisions:

The problem is to compute y=f(x1, x2, ...), where y is a new dataset 
with one band or an existing dataset, into which a new band is added. 
x1, x2, ... are existing bands. f is an expression. The goal is to be 
able to create an expression object, with which one can write

y->compute(f);

The expression object is a tree and its nodes are operators (+,-,...), 
functions (abs, floor,...), band objects, values, and possibly more 
complex data structures (for example classifiers). It should be possible 
to define focal functions (e.g., for terrain analysis).

The compute algorithm is something like this:

for_all_blocks_of_y {

     f->cache_blocks(required_region);

     compute_the_block_of_y(f, block_of_y);

     f->free_blocks();

     write_block(block_of_y);

}

One block of y is computed cell by cell using a recursive 'get_value' 
method on the expression. The call would have the (global) cell 
coordinates as arguments. Non-spatial nodes would ignore them but 
spatial nodes need them. There would be get_value methods for all GDAL 
data types.

It's rather brute force but it should be easy to parallelize and it is 
very general and extensible - expression node types can be subclassed 
easily.

This is partly working but it's all still on my own computer and not 
committed to github. One thing I'd like to have quite early is an 
expression parser to make testing easier etc. I have not done any 
profiling so I have little idea about where the bottlenecks would be.

I plan to present this on our local developer oriented FOSS4G meeting 
next month so I guess I'll need to work on it more soon.

Ari



From even.rouault at spatialys.com  Tue Sep 13 01:26:09 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 10:26:09 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <1473750129580-5285450.post@n6.nabble.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <1473750129580-5285450.post@n6.nabble.com>
Message-ID: <201609131026.09484.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 09:02:09, Rutger a écrit :
> Hi Even,
> 
> This is really amazing. I'm becoming more and more a fan of Numba for
> number crunching, so this certainly makes my day. As soon as i can find a
> Win x64 dev version on a Conda channel I'll give it a try.
> 
> A use case that comes to mind, and which i run into regularly, is when i
> want to do some simple aggregation before using something like gdalwarp.
> For example when you have a file containing 24 hourly temperature values,
> and you are only interested in the daily mean. Currently i either
> aggregate before warping and write the intermediates to disk, or aggregate
> after warping which is computationally inefficient. Neither is optimal.
> 
> A few questions, can you access a files metadata from within a pixel
> function? This would perhaps allow for example interpolating atmospheric
> data to the overpass time of a satellite image.

This is indeed a question I've asked myself, if the prototype of the pixel 
function contained enough information. I had not put initially the 
geotransform and whole raster dimensions for example, but found it was 
necessary to have correct behaviour for hillshading at different zoom scales. 
And I also added afterwards the xoff, yoff to be able to do Mandelbrot 
generation (I guess there might be some more valid use cases ;-)). And then 
the user provided dictionnary to have some parametrization of the algorithm 
instead of hardcoding constants in it, so that you can off-load it into a 
general lib. And I stopped at that point.

For your use case, 2 possibilities currently, using the 
<PixelFunctionArguments> capability:
- either you get the metadata items you need at VRT generation and put them as 
arguments
- either you only pass the names of the sources as arguments, and you use the 
GDAL Python bindings themselves inside the pixel function itself to get access 
to everything needed. But I'm just thinking it might be a bit inefficient to do 
that for each RasterIO() request. 

<loud_thinking>

Perhaps a compromise would be to allow, in addition to simple functions, to 
specify a class name, where the constructor would receive values that don't 
change from one call to another one, and a calc() method would receive the 
ones that change at each RasterIO() request

def MyProcessingClass:
	def __init__(self, raster_xsize, raster_ysize, buf_radius, gt, 
source_filenames, **kwargs):
		save above parameters that you may need in calc()
		do one time things like gdal.Open()'ing sources to get metadata

	def calc( self, in_ar, out_ar, xoff, yoff, xsize, ysize ):
		do your computation

We could possibly pass the sources as datasets themselves, since they are 
actually already opened, but that would make the osgeo.gdal bindings 
availability a requirement (well, we could as a fallback pass the filenames if 
the import fails)

</loud_thinking>

> 
> Do the pixel functions also work with @numba.vectorize(), in particular
> when targeting 'parallel' or 'cuda'. 

I've only scratched up the surface of Numba (didn't know it 2 days ago). I 
guess this might work (might only be interested if the 
VRTDerivedRasterBand::IRasterIO() is called with a big enough region. Which 
depends on the pixel access pattern of upper layers). The VRT drivers just 
calls a Python function that takes numpy arrays and a few extra args.

> And would that give parallel
> processing for both IO and calculations?

Only calculations. I/O is done before going to Python and after returning from 
it.

Actually... if you specify zero source in the VRT, then it is up to you to do 
the read operations the way you like in Python, so you could possibly 
parallelize them there.

>You should give the folks at Continuum a heads up, i'm sure they appreciate
> seeing Numba used like this. 

I have no connection with them, but yes their project rocks.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kassies at gmail.com  Tue Sep 13 02:07:39 2016
From: kassies at gmail.com (Rutger)
Date: Tue, 13 Sep 2016 02:07:39 -0700 (PDT)
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609131026.09484.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <1473750129580-5285450.post@n6.nabble.com>
 <201609131026.09484.even.rouault@spatialys.com>
Message-ID: <1473757659733-5285482.post@n6.nabble.com>

I overlooked the fact that it still moves through Python, is that the 'only'
hurdle preventing parallel IO? Since gdalwarp for example has the -multi
flag, it seems as if GDAL is capable of it, or is that a
specific/specialized implementation?

Numba has several options which might eliminate using Python during
execution. There are c-callbacks:
http://numba.pydata.org/numba-doc/dev/user/cfunc.html

It probably works by using the Numpy C-API (which i have zero experience
with). I don't know if its possible that other programs, like GDAL, can also
use those compiled functions without moving to Python first.

There is also ahead-of-time compilation (AOT):
http://numba.pydata.org/numba-doc/dev/user/pycc.html

AOT has the benefit that users only need Numpy as a dependency, and don't
need Numba/llvm. There some drawbacks as well, like no longer being able to
compile optimizations for the hardware its running on.


Regards,
Rutger


Even Rouault-2 wrote
> Le mardi 13 septembre 2016 09:02:09, Rutger a écrit :
> 
> I've only scratched up the surface of Numba (didn't know it 2 days ago). I 
> guess this might work (might only be interested if the 
> VRTDerivedRasterBand::IRasterIO() is called with a big enough region.
> Which 
> depends on the pixel access pattern of upper layers). The VRT drivers just 
> calls a Python function that takes numpy arrays and a few extra args.
> 
>> And would that give parallel
>> processing for both IO and calculations?
> 
> Only calculations. I/O is done before going to Python and after returning
> from 
> it.
> 
> Actually... if you specify zero source in the VRT, then it is up to you to
> do 
> the read operations the way you like in Python, so you could possibly 
> parallelize them there.
> 
> 
> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list

> gdal-dev at .osgeo

> http://lists.osgeo.org/mailman/listinfo/gdal-dev





--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functions-written-in-Python-tp5285323p5285482.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From gane.prog at gmail.com  Tue Sep 13 02:42:10 2016
From: gane.prog at gmail.com (Gane R)
Date: Tue, 13 Sep 2016 15:12:10 +0530
Subject: [gdal-dev] ERROR 6: Failed to initialize PROJ.4 during warp
Message-ID: <CALMrLdCTsAeo9hG0RT=bQ7Q_m+Q=EqJz3MqB5DOGknFVwsPcOw@mail.gmail.com>

gdalinfo for a file is as

Driver: PDF/Geospatial PDF
Files: C:\la plata_final_sept8-1.pdf
Size is 5100, 3300
Coordinate System is:
PROJCS["unnamed",
    GEOGCS["unknown",
        DATUM["WGS_1984 based datum",
            SPHEROID["Sphere",6378137,0],
            TOWGS84[0,0,0,0,0,0,0]],
        PRIMEM["Greenwich",0],
        UNIT["degree",0.0174532925199433]],
    PROJECTION["Mercator_1SP"],
    PARAMETER["central_meridian",0],
    PARAMETER["scale_factor",0],
    PARAMETER["false_easting",0],
    PARAMETER["false_northing",0],
    UNIT["Meter",1]]
PROJ.4 string is:
'+proj=merc +lon_0=0 +k=0 +x_0=0 +y_0=0 +a=6378137 +b=6378137
+towgs84=0,0,0,0,0,0,0 +units=m +no_defs '
Origin = (-8569762.871896760500000,4652059.044867600300000)
Pixel Size = (0.467090635994096,-0.467090635994096)
Metadata:
  CREATION_DATE=D:20160908221821-04'00'
  CREATOR=Esri ArcMap 10.3.1.4959
  NEATLINE=POLYGON ((-8567450.7732485905
4650589.7565349042,-8569692.8083013594
4650589.7565349042,-8569692.8083013594 4
651991.0284428885,-8567450.7732485905
4651991.0284428885,-8567450.7732485905 4650589.7565349042))
  PRODUCER=TerraGo Technologies Publisher for ArcGIS GeoPDF Export version:
7.0.0.43
Corner Coordinates:
Upper Left  (-8569762.872, 4652059.045)
Lower Left  (-8569762.872, 4650517.646)
Upper Right (-8567380.710, 4652059.045)
Lower Right (-8567380.710, 4650517.646)
Center      (-8568571.791, 4651288.345)
Band 1 Block=5100x1 Type=Byte, ColorInterp=Red
Band 2 Block=5100x1 Type=Byte, ColorInterp=Green
Band 3 Block=5100x1 Type=Byte, ColorInterp=Blue

when I try to do a gdalwarp to EPSG:3857  for the above file I get the
following  '.

ERROR 6: Failed to initialize PROJ.4 with `+proj=merc +lon_0=0 +k=0 +x_0=0
+y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0
,0,0,0 +units=m +no_defs. k <= 0

any suggestions ??
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160913/1067f3a1/attachment.html>

From even.rouault at spatialys.com  Tue Sep 13 02:56:17 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 11:56:17 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <1473757659733-5285482.post@n6.nabble.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609131026.09484.even.rouault@spatialys.com>
 <1473757659733-5285482.post@n6.nabble.com>
Message-ID: <201609131156.17411.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 11:07:39, Rutger a écrit :
> I overlooked the fact that it still moves through Python, is that the
> 'only' hurdle preventing parallel IO?

Not sure to understand your question. But if you have several sources, you 
could potentially do parallelized reading of them from the Python code by 
using Python threads and GDAL Python API. But looking in the SWIG generated 
code, it doesn't seem that SWIG releases the GIL automatically before calling 
native code. Hum... So that should probably added manually, at least around 
GDALRasterIO() calls, otherwise you'll get zero perf improvements.

> Since gdalwarp for example has the
> -multi flag, it seems as if GDAL is capable of it, or is that a
> specific/specialized implementation?

Parallelized I/O doesn't mean much by itself without more context. You may 
want to parallelize reading of different regions of the same dataset, or 
parallelize reading of different datasets. Due to GDAL objects not being 
thread-safe, the first case (reading of different regions of the same dataset) 
can be solved with the second one by opening several datasets for the same 
filename.

Regarding gdalwarp -multi, here's how that works. When you warp a dataset, 
there's a list of all chunks (windows) to be processed that is generated. 
gdalwarp -multi does the following

Thread I/O						Thread computation
Read data for chunk 1			
Read data for chunk 2			Do calculations for chunk 1
Write output of chunk 1			Do calculations for chunk 2
Read data for chunk 3			
Write output of chunk 2			Do calculations for chunk 3


> 
> Numba has several options which might eliminate using Python during
> execution. There are c-callbacks:
> http://numba.pydata.org/numba-doc/dev/user/cfunc.html

You can also use @jit(nopython=True, nogil=True) and your Python method will 
end up being pure native code (provided that you don't use too high level stuff 
otherwise the jit'ification will fail with an exception).

And for code that is not inlined in the VRT, you can also add cache=True so 
that the jit'ification can be reused.

With all that the cost of the Python layer becomes neglectable (except loading 
the Python environment the first time, if not already loaded, but for a 
computation that will be longer than a few seconds, that's not really a big 
deal)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Sep 13 03:04:30 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 12:04:30 +0200
Subject: [gdal-dev] ERROR 6: Failed to initialize PROJ.4 during warp
In-Reply-To: <CALMrLdCTsAeo9hG0RT=bQ7Q_m+Q=EqJz3MqB5DOGknFVwsPcOw@mail.gmail.com>
References: <CALMrLdCTsAeo9hG0RT=bQ7Q_m+Q=EqJz3MqB5DOGknFVwsPcOw@mail.gmail.com>
Message-ID: <201609131204.30414.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 11:42:10, Gane R a écrit :
> gdalinfo for a file is as
> 
> Driver: PDF/Geospatial PDF
> Files: C:\la plata_final_sept8-1.pdf
> Size is 5100, 3300
> Coordinate System is:
> PROJCS["unnamed",
>     GEOGCS["unknown",
>         DATUM["WGS_1984 based datum",
>             SPHEROID["Sphere",6378137,0],
>             TOWGS84[0,0,0,0,0,0,0]],
>         PRIMEM["Greenwich",0],
>         UNIT["degree",0.0174532925199433]],
>     PROJECTION["Mercator_1SP"],
>     PARAMETER["central_meridian",0],
>     PARAMETER["scale_factor",0],
>     PARAMETER["false_easting",0],
>     PARAMETER["false_northing",0],
>     UNIT["Meter",1]]
> PROJ.4 string is:
> '+proj=merc +lon_0=0 +k=0 +x_0=0 +y_0=0 +a=6378137 +b=6378137
> +towgs84=0,0,0,0,0,0,0 +units=m +no_defs '
> Origin = (-8569762.871896760500000,4652059.044867600300000)
> Pixel Size = (0.467090635994096,-0.467090635994096)
> Metadata:
>   CREATION_DATE=D:20160908221821-04'00'
>   CREATOR=Esri ArcMap 10.3.1.4959
>   NEATLINE=POLYGON ((-8567450.7732485905
> 4650589.7565349042,-8569692.8083013594
> 4650589.7565349042,-8569692.8083013594 4
> 651991.0284428885,-8567450.7732485905
> 4651991.0284428885,-8567450.7732485905 4650589.7565349042))
>   PRODUCER=TerraGo Technologies Publisher for ArcGIS GeoPDF Export version:
> 7.0.0.43
> Corner Coordinates:
> Upper Left  (-8569762.872, 4652059.045)
> Lower Left  (-8569762.872, 4650517.646)
> Upper Right (-8567380.710, 4652059.045)
> Lower Right (-8567380.710, 4650517.646)
> Center      (-8568571.791, 4651288.345)
> Band 1 Block=5100x1 Type=Byte, ColorInterp=Red
> Band 2 Block=5100x1 Type=Byte, ColorInterp=Green
> Band 3 Block=5100x1 Type=Byte, ColorInterp=Blue
> 
> when I try to do a gdalwarp to EPSG:3857  for the above file I get the
> following  '.

It looks like the PDF driver cannot reconstruct a valid projection from the 
encoded projection parameters in the PDF. k == 0 is indeed non sense for 
Mercator. What is the source projection supposed to be ?

From the proj.4 string, it looks a bit like it is already EPSG:3857, except 
that for EPSG:3857 you'd have k == 1, but if I do :

echo "-8569762.872 4652059.045" | \
          gdaltransform -s_srs EPSG:3857 -t_srs EPSG:4326

I get -76.983489691976 38.5123526219601 0
which is compatible of :
https://en.wikipedia.org/wiki/La_Plata,_Maryland

So it looks like it is indeed already encoded in EPSG:3857. Access to the 
source PDF would help investigating.

> 
> ERROR 6: Failed to initialize PROJ.4 with `+proj=merc +lon_0=0 +k=0 +x_0=0
> +y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0
> ,0,0,0 +units=m +no_defs. k <= 0
> 
> any suggestions ??

Use gdal_translate in.pdf out.tif -a_srs EPSG:3857


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Sep 13 03:14:31 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 12:14:31 +0200
Subject: [gdal-dev] Update on RFC 62: Raster algebra
In-Reply-To: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>
References: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>
Message-ID: <201609131214.31591.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 10:15:42, Ari Jolma a écrit :
> There's been some discussion here about doing pixel function
> calculations in VRT derived bands, so I thought I'd let you know what
> are my thoughts and what I've done regarding RFC 62.
> 
> At FOSS4G my conclusion was that my first approach was not good for many
> reasons, most importantly because it did not scale to several bands in
> one operation. So I've trying with the following ideas/decisions:
> 
> The problem is to compute y=f(x1, x2, ...), where y is a new dataset
> with one band or an existing dataset, into which a new band is added.
> x1, x2, ... are existing bands. f is an expression. The goal is to be
> able to create an expression object, with which one can write
> 
> y->compute(f);
> 
> The expression object is a tree and its nodes are operators (+,-,...),
> functions (abs, floor,...), band objects, values, and possibly more
> complex data structures (for example classifiers). It should be possible
> to define focal functions (e.g., for terrain analysis).
> 
> The compute algorithm is something like this:
> 
> for_all_blocks_of_y {
> 
>      f->cache_blocks(required_region);
> 
>      compute_the_block_of_y(f, block_of_y);
> 
>      f->free_blocks();
> 
>      write_block(block_of_y);
> 
> }
> 
> One block of y is computed cell by cell using a recursive 'get_value'
> method on the expression. The call would have the (global) cell
> coordinates as arguments. Non-spatial nodes would ignore them but
> spatial nodes need them. There would be get_value methods for all GDAL
> data types.
> 
> It's rather brute force but it should be easy to parallelize and it is
> very general and extensible - expression node types can be subclassed
> easily.

Let's say f = A + B * C

I can see 2 possible approaches :
- one where you would have a first step where B * C would be run on a chunk of 
pixels and would produce a 'temp' chunk, and then A + 'temp' would be run. On 
the plus side, you can have vectorized/parallelized/optimized implementations 
of the '*' and '+' operators to operate a number of pixels. One downside of 
this is that it is very memory bandwidth intensive if you have many steps in 
your computations (you have one useless writing and reading of the 'temp' 
array).
- another one where you would iterate on each pixel of the chunk and evaluate 
A+B*C of it. Less memory memory bandwidth intensive, but would probably be 
slow due to the overhead of evaluating f() in a somehow interpreted way on a 
pixel by pixel basis (unless you can just-in-time compile f).

> 
> This is partly working but it's all still on my own computer and not
> committed to github. One thing I'd like to have quite early is an
> expression parser to make testing easier etc. I have not done any
> profiling so I have little idea about where the bottlenecks would be.
> 
> I plan to present this on our local developer oriented FOSS4G meeting
> next month so I guess I'll need to work on it more soon.
> 
> Ari
> 
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From ari.jolma at gmail.com  Tue Sep 13 04:24:41 2016
From: ari.jolma at gmail.com (Ari Jolma)
Date: Tue, 13 Sep 2016 14:24:41 +0300
Subject: [gdal-dev] Update on RFC 62: Raster algebra
In-Reply-To: <201609131214.31591.even.rouault@spatialys.com>
References: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>
 <201609131214.31591.even.rouault@spatialys.com>
Message-ID: <a250d0a5-7126-d7ae-61d8-5479cada96d5@gmail.com>

13.09.2016, 13:14, Even Rouault kirjoitti:
> Le mardi 13 septembre 2016 10:15:42, Ari Jolma a écrit :
>> There's been some discussion here about doing pixel function
>> calculations in VRT derived bands, so I thought I'd let you know what
>> are my thoughts and what I've done regarding RFC 62.
>>
>> At FOSS4G my conclusion was that my first approach was not good for many
>> reasons, most importantly because it did not scale to several bands in
>> one operation. So I've trying with the following ideas/decisions:
>>
>> The problem is to compute y=f(x1, x2, ...), where y is a new dataset
>> with one band or an existing dataset, into which a new band is added.
>> x1, x2, ... are existing bands. f is an expression. The goal is to be
>> able to create an expression object, with which one can write
>>
>> y->compute(f);
>>
>> The expression object is a tree and its nodes are operators (+,-,...),
>> functions (abs, floor,...), band objects, values, and possibly more
>> complex data structures (for example classifiers). It should be possible
>> to define focal functions (e.g., for terrain analysis).
>>
>> The compute algorithm is something like this:
>>
>> for_all_blocks_of_y {
>>
>>       f->cache_blocks(required_region);
>>
>>       compute_the_block_of_y(f, block_of_y);
>>
>>       f->free_blocks();
>>
>>       write_block(block_of_y);
>>
>> }
>>
>> One block of y is computed cell by cell using a recursive 'get_value'
>> method on the expression. The call would have the (global) cell
>> coordinates as arguments. Non-spatial nodes would ignore them but
>> spatial nodes need them. There would be get_value methods for all GDAL
>> data types.
>>
>> It's rather brute force but it should be easy to parallelize and it is
>> very general and extensible - expression node types can be subclassed
>> easily.
> Let's say f = A + B * C
>
> I can see 2 possible approaches :
> - one where you would have a first step where B * C would be run on a chunk of
> pixels and would produce a 'temp' chunk, and then A + 'temp' would be run. On
> the plus side, you can have vectorized/parallelized/optimized implementations
> of the '*' and '+' operators to operate a number of pixels. One downside of
> this is that it is very memory bandwidth intensive if you have many steps in
> your computations (you have one useless writing and reading of the 'temp'
> array).
> - another one where you would iterate on each pixel of the chunk and evaluate
> A+B*C of it. Less memory memory bandwidth intensive, but would probably be
> slow due to the overhead of evaluating f() in a somehow interpreted way on a
> pixel by pixel basis (unless you can just-in-time compile f).

Probably it is slow because of calling virtual functions recursively in 
a tree. But my first objective is/was to get it working.

Ari

>
>> This is partly working but it's all still on my own computer and not
>> committed to github. One thing I'd like to have quite early is an
>> expression parser to make testing easier etc. I have not done any
>> profiling so I have little idea about where the bottlenecks would be.
>>
>> I plan to present this on our local developer oriented FOSS4G meeting
>> next month so I guess I'll need to work on it more soon.
>>
>> Ari
>>
>>
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev


From sean at mapbox.com  Tue Sep 13 05:25:59 2016
From: sean at mapbox.com (Sean Gillies)
Date: Tue, 13 Sep 2016 14:25:59 +0200
Subject: [gdal-dev] Time for a new GeoJSON driver?
In-Reply-To: <201608311348.26982.even.rouault@spatialys.com>
References: <CADPhZXy0uLwei5sbYOo9c84MsuktC=7gdVjG+qgzgdROGvZqiw@mail.gmail.com>
 <CADPhZXz4YXFThXYyPgQWnRne8udiA56fBHgUb9pMAccMYYsV0Q@mail.gmail.com>
 <CADPhZXz2M0Vg6UCR=z7ZnJLSnExg+S==A75iOpwbvknU8vL9GA@mail.gmail.com>
 <201608311348.26982.even.rouault@spatialys.com>
Message-ID: <CADPhZXx-OSmG_AQ6vzSEWCkmeV2V+n4L=i1iri=t9b1b4+=ofQ@mail.gmail.com>

Hi Even,

On Wed, Aug 31, 2016 at 1:48 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Sean,
>
> We ended up cancelling the BoF.
> I had a discussion with someone (Dmitry perhaps ?) and there was some
> concerns
> expressed by turning on RFC 7946 by default, even in the case of a source
> dataset in EPSG:4326. Particularly because of the behaviour at dateline,
> where
> RFC 7946 asks for geometries to be cut and coordinates to be wrapped around
>

Could I hear more about these concerns? Are there situations where it is
more interoperable to not cut antimeridian-crossing geometries? I know of
software (geojson.io, for example) that doesn't constrain longitude to
earthly values when converting coordinates to Web Mercator, but because
this behavior isn't actually specified any interoperability here seems to
be coincidental at best.


>
> One downside of having a new driver is that it creates issues for the read
> side of it. Due to the absence of versionning, how would you know if a json
> file must be handled by one driver or another ? In some cases, you could
> know
> (e.g. presence of a "crs" object), but generally you would need to parse
> the
> whole file and detect a few hints (like longitudes > 180 or <-180,
> unexpected
> orientation for polygons, etc). So you might end up parsing the file twice.
>

Right. Also ordering varies in JSON files, so the "crs" object may very
well be at the tail end of a large document.


>
> So I'd be more on the position to have a single driver that supports
> writing
> both "flavours" through a creation option. And probably default to GJ2008
> to
> avoid breaking existing workflows (perhaps with some warning in release
> notes
> that the default might change in a later release, so people should
> explicitly
> specify the creation option if they depend on the precise flavour)
> We could conceptually have a light-weight RFC7946 driver (or whatever we
> would
> call it) that would be just a wrapper around the existing driver and would
> set
> the creation option with the right flavour, but that would probably be a
> bit
> weird that this driver is never used on the read side (due to what I
> mentionned above).
>

This seems reasonable.


>
> One thing that is not completely obvious is how to handle edition
> capabilities
> (ie when the dataset is opened in open mode). When you re-write the file
> after
> a feature addition/update/deletion, which flavour do you choose ? Probably
> use
> the heuristics I mentionned before to have a best guess, and offer an open
> option with the flavour as well.
>
>
Frankly, I think that JSON is too poorly suited to the role of database to
bother with the above. Despite that, I think it wouldn't be a terrible
burden on those who want to keep RFC 7946 GeoJSON to specify this in a
config option so that we could skip the heuristics. We could use the same
one as suggested above, I think.


> For RFC 7946, there were different opinions if I re-read the thread
> regarding
> if we must turn on automatic reprojection to EPSG:4326, or just error out
> if
> the CRS used at layer creation time is EPSG:4326.
> We have already a few drivers whose underlying format is coordinates in
> lon,lat and that accept arbitrary CRS at creation time with on the fly
> reprojection. One advantage of this is that you can identify more easily
> geometries at the pole or the anti-meridian and thus write them correctly
> according to the new rules.
> But anyway we would also need some heuristics in the case where you
> convert to
> RFC 7946 for example from a format in EPSG:4326 with geometries cut at the
> dateline. In the OGR geometry model, there's nothing that explictly tells
> if
> the geometry has been cut or not. So you might need to use the following
> heuristics: if a multipart geometry has longitudes both at -180 and 180 in
> different parts (ie that the same part of a geometry doesn't have points
> both
> at -180 and 180), then it has been cut.
>

I don't understand why we would need to know if a geometry has already been
cut. Is antimeridian cutting not idempotent? By which I mean that cutting
again would be a no-op if the data has already been cut.

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160913/d35604f8/attachment.html>

From alexhighviz at hotmail.com  Tue Sep 13 05:40:56 2016
From: alexhighviz at hotmail.com (alex)
Date: Tue, 13 Sep 2016 13:40:56 +0100
Subject: [gdal-dev] Update on RFC 62: Raster algebra
In-Reply-To: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>
References: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>
Message-ID: <DUB407-EAS362F3C7E5AC5CC3DB4C983FB4FE0@phx.gbl>

>Ari Wrote:
>At FOSS4G my conclusion was that my first approach was not good for many reasons, most >importantly because it did not scale to several bands in one operation. So I've trying with the >following ideas/decisions:
>
>The problem is to compute y=f(x1, x2, ...), where y is a new dataset with one band or an existing >dataset, into which a new band is added. 
>x1, x2, ... are existing bands. f is an expression. The goal is to be able to create an expression >object, with which one can write

Hi Ari,

Perhaps it is worthwhile looking back at the email I wrote earlier in the process: 

http://permalink.gmane.org/gmane.comp.gis.gdal.devel/42609 

At the time, I suggested using expression objects and to allow functions with more than 2 arguments and gave some suggestions on the implementation.

In my experience the key first step is to develop pixel iterators for raster bands. Once you have that, raster bands can be wrapped as regular ranges and you can make use of 'regular' tools and methods to develop your expression objects, e.g. as in the Range v3 library by Eric Niebler.

Hence, my repeated suggestion for GDAL: create iterators for raster bands :)

As you may recall, the code below works just fine (but requires C++11).

With kind regards, Alex


#include <blink/map_algebra/map_algebra.h> 

namespace ma = blink::map_algebra;

int my_function(int w, int x, int y, int z)
{
  return w * x + y * z;
}

int main()
{
  auto a = ma::open_read_only<int>("input_1.tif");
  auto b = ma::open_read_only<int>("input_2.tif");
  
  auto w = ma::create_from_model<double>("output_1.tif", a);
  auto x = ma::create_from_model<double>("output_2.tif", a);
  auto y = ma::create_from_model<double>("output_3.tif", a);
  auto z = ma::create_from_model<double>("output_4.tif", a);

  // Example 1: Using operators
  w = a + 3 * b;

  // Example 2: Using assigning operators
  x = 1;
  x *= a;
  x += 3 * b;
  
  // Example 3: Map algebra using cell-by-cell functions
  y = ma::apply(my_function, 1, a, 3, b);

  // Example 4: Combination
  z = b + 3 * ma::apply(my_function, 1, a, 2, b);

  return 0;
}



From even.rouault at spatialys.com  Tue Sep 13 05:49:03 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 14:49:03 +0200
Subject: [gdal-dev] Time for a new GeoJSON driver?
In-Reply-To: <CADPhZXx-OSmG_AQ6vzSEWCkmeV2V+n4L=i1iri=t9b1b4+=ofQ@mail.gmail.com>
References: <CADPhZXy0uLwei5sbYOo9c84MsuktC=7gdVjG+qgzgdROGvZqiw@mail.gmail.com>
 <201608311348.26982.even.rouault@spatialys.com>
 <CADPhZXx-OSmG_AQ6vzSEWCkmeV2V+n4L=i1iri=t9b1b4+=ofQ@mail.gmail.com>
Message-ID: <201609131449.03596.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 14:25:59, Sean Gillies a écrit :
> Hi Even,
> 
> On Wed, Aug 31, 2016 at 1:48 PM, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Sean,
> > 
> > We ended up cancelling the BoF.
> > I had a discussion with someone (Dmitry perhaps ?) and there was some
> > concerns
> > expressed by turning on RFC 7946 by default, even in the case of a source
> > dataset in EPSG:4326. Particularly because of the behaviour at dateline,
> > where
> > RFC 7946 asks for geometries to be cut and coordinates to be wrapped
> > around
> 
> Could I hear more about these concerns? Are there situations where it is
> more interoperable to not cut antimeridian-crossing geometries?

Perhaps one use case would be if you region of interest is centered around the 
antimeridian, you prefer your geometries to be contiguous when displayed (and 
your viewer doesn't implement repetition of geometries that would be cut) ?
> 
> > One thing that is not completely obvious is how to handle edition
> > capabilities
> > (ie when the dataset is opened in open mode). When you re-write the file
> > after
> > a feature addition/update/deletion, which flavour do you choose ?
> > Probably use
> > the heuristics I mentionned before to have a best guess, and offer an
> > open option with the flavour as well.
> 
> Frankly, I think that JSON is too poorly suited to the role of database to
> bother with the above.

Database is a strong word, but the 
CreateFeature()/SetFeature()/DeleteFeature() are the operations used for 
example by QGIS when editing a dataset, and having implemented them in the 
driver now makes it possible to edit easily a GeoJSON file in QGIS.

> Despite that, I think it wouldn't be a terrible
> burden on those who want to keep RFC 7946 GeoJSON to specify this in a
> config option so that we could skip the heuristics. We could use the same
> one as suggested above, I think.

Yes

> I don't understand why we would need to know if a geometry has already been
> cut. Is antimeridian cutting not idempotent? By which I mean that cutting
> again would be a no-op if the data has already been cut.

You're right. We should have idempotence at the end. I just wanted to say that 
when you need to alter the geometry because it is crossing the antimeridian, 
then you know that the naive way of computing the bbox (taking the min and max 
of longitudes) isn't going to work. But in the case where you don't touch the 
geometry because longitudes are already in [-180,180], you still need to make 
a special case when you have min=-180 and max=180 to guess if the geometry has 
been cut.


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Sep 13 08:26:56 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 17:26:56 +0200
Subject: [gdal-dev] Python bindings: more multithreading friendly
Message-ID: <201609131726.56184.even.rouault@spatialys.com>

Hi,

In the recent discussion about the VRT Python new capability, I realized that 
the Python global interpreter lock wasn't released in the osgeo.gdal bindings 
when going from Python to GDAL native code, thus making threaded Python code 
inefficient.

I've committed a change to improve that. Basically I've enabled releasing the 
GIL in all methods of the osgeo.gdal package, a few ones of the osgeo.org 
package (ogr.Open() mostly) and none of osgeo.osr or osgeo.gdalconst. There 
are some subtelties though as we a few callback mechanisms (error handler and 
progress function) that can go back to Python code, so the GIL has to be 
reacquired in the wrapping code.
Enabling everything in osgeo.gdal is a bit brute force since there are methods 
that don't spend much time in native code so releasing/reacquiring the GIL 
might be overkill. I'd been interested hearing if people would see noticeable 
performance degradation in single threaded use case. In which case we might 
want to add a few exceptions here or there.

But now you can do stuff like the following and it will nicely use your cores :

{{{
from osgeo import gdal
import threading

def worker():
    ds = gdal.Open('myraster.tif')
    ds.GetRasterBand(1).Checksum()
    ds.GetRasterBand(1).ReadAsArray()
    return

threads = []
for i in range(4):
    t = threading.Thread(target=worker)
    threads.append(t)
    t.start()
for i in range(4):
    threads[i].join()
}}}


One downside of this change is that if you did use Python multithreading 
before without respecting the constraints of the C++ GDAL API (ie not using a 
same GDAL object from several threads), your code happened to work due to the 
serialization caused by the GIL. Now the following will crash (like it would 
do in the equivalent C/C++ code):

{{{
from osgeo import gdal
import threading

ds = gdal.Open('byte.tif')

def worker():
    while True:
        ds.GetRasterBand(1).Checksum()
        ds.FlushCache()
    return

for i in range(4):
    t = threading.Thread(target=worker)
    t.start()
}}}

So I'm not so sure if the wins are really better than the cons. I'd suggest to 
let the new behaviour in trunk and see later, when it will have been shaked by 
more hands, if this was an appropriate move or not. I've opened ticket 
https://trac.osgeo.org/gdal/ticket/6649 to track this change.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From awood at agi.com  Tue Sep 13 08:09:30 2016
From: awood at agi.com (Wood, Alexander)
Date: Tue, 13 Sep 2016 15:09:30 +0000
Subject: [gdal-dev] Possible concurrency issue in OGRCoordinateTransformation
Message-ID: <SN2PR07MB2559172952B36B0986F4F4FDA8FE0@SN2PR07MB2559.namprd07.prod.outlook.com>

Hi,
I've encountered what appears to be a concurrency issue when calling OGRCoordinateTransformation::Transform from multiple threads.  What I've found is that when Transform is called from multiple asynchronous tasks, I'm getting inconsistent results given the same inputs.  This is pronounced with the projection used in the GINA Elevation dataset (Alaska); sample data can be found here:
http://ifsar.gina.alaska.edu/data/2013/DTM/IFSAR.SDMI.2013.FUGRO.DTM_N59W144/IFSAR.SDMI.2013.FUGRO.DTM_N59W144.tar.gz

The projection used by this datasource is:
PROJCS["NAD_1983_CORS96_Alaska_Albers",GEOGCS["GCS_NAD_1983_CORS96",DATUM["NAD_1983_CORS96",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433]],PROJECTION["Albers_Conic_Equal_Area"],PARAMETER["standard_parallel_1",55],PARAMETER["standard_parallel_2",65],PARAMETER["latitude_of_center",50],PARAMETER["longitude_of_center",-154],PARAMETER["false_easting",0],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]]]

Or in proj4:
+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon+0-154 +x_0=0 +y_0=0 +ellps=GRS80 + units=m +no_defs

The following code snippet reproduced the problem for me.  If I were comment out the async tasks and simply perform the transform synchronously, the outputs all remain consistent with the expected result.  Also make note of the CPLConfigOption "USE_PROJ_480_FEATURES".  Setting this to "NO" will also produce consistent results, as indicated in the inline comments below.

bool TestGdalConcurrency(const std::string& filename)
{
    auto dataset = GDALOpen(filename.c_str(), GDALAccess::GA_ReadOnly);
    auto projectionName = GDALGetProjectionRef(dataset);

    // By default, this is set to yes
    // Configuring this setting to "NO" will force GDAL to acquire a lock when calling into proj
    // This is a workaround, as we'd prefer lockfree concurrent access to proj.
    CPLSetConfigOption("USE_PROJ_480_FEATURES", "YES");

    // Setup "From" SpatialReference
    OGRSpatialReference wgs84SpatialReference;
    wgs84SpatialReference.SetWellKnownGeogCS("WGS84");
    // Setup "To" SpatialReference
    OGRSpatialReference spatialReference(projectionName);
    // Create transformation from WGS84 to the sourcefile's projection
    auto pFromPlanet = OGRCreateCoordinateTransformation(&wgs84SpatialReference, &spatialReference);

    // Will also provide this consistent latitude, longitude as input
    // The expectation is that given constant inputs, we should always receive the exact same output.
    double longitude = -143.8996;
    double latitude = 60.0074;
    double x = longitude;
    double y = latitude;

    // Our truth data (we're confident in this answer since there's no concurrent access into proj yet.
    pFromPlanet->Transform(1, &x, &y, nullptr);

    // Asynchronously call Transform from as many threads as I can get, every result should match the truth data
    std::vector<std::future<bool>> results;
    for (int i = 0; i < 100000; i++)
    {
        results.emplace_back(std::async(std::launch::async, [longitude, latitude, pFromPlanet, x, y]()
        {
            double _x = longitude;
            double _y = latitude;

            pFromPlanet->Transform(1, &_x, &_y, nullptr);
            return _x == x && _y == y;
        }));
    }

    // Sum the number of failed comparisons
    auto numFailures = 0;
    for (auto& result : results)
    {
        if (!result.get())
            ++numFailures;
    }

    OGRCoordinateTransformation::DestroyCT(pFromPlanet);
    GDALClose(dataset);

    return numFailures == 0;
}

If there's something I'm missing that would allow for lock-free coordinate transformations I'd be happy to hear about it.

Thanks,
Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160913/6f3e11a5/attachment-0001.html>

From jamessramm at gmail.com  Tue Sep 13 12:22:20 2016
From: jamessramm at gmail.com (James Ramm)
Date: Tue, 13 Sep 2016 20:22:20 +0100
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609131156.17411.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609131026.09484.even.rouault@spatialys.com>
 <1473757659733-5285482.post@n6.nabble.com>
 <201609131156.17411.even.rouault@spatialys.com>
Message-ID: <CAEW=KS63XQGQ81_YOBTUZULTqqOBnMO=tt=E9f9X9=to_qeGpw@mail.gmail.com>

I think you can call SWIG with the -threads argument on the command line so
it will always release the GIL. Could be an easy option if it works

On Tuesday, 13 September 2016, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le mardi 13 septembre 2016 11:07:39, Rutger a écrit :
> > I overlooked the fact that it still moves through Python, is that the
> > 'only' hurdle preventing parallel IO?
>
> Not sure to understand your question. But if you have several sources, you
> could potentially do parallelized reading of them from the Python code by
> using Python threads and GDAL Python API. But looking in the SWIG generated
> code, it doesn't seem that SWIG releases the GIL automatically before
> calling
> native code. Hum... So that should probably added manually, at least around
> GDALRasterIO() calls, otherwise you'll get zero perf improvements.
>
> > Since gdalwarp for example has the
> > -multi flag, it seems as if GDAL is capable of it, or is that a
> > specific/specialized implementation?
>
> Parallelized I/O doesn't mean much by itself without more context. You may
> want to parallelize reading of different regions of the same dataset, or
> parallelize reading of different datasets. Due to GDAL objects not being
> thread-safe, the first case (reading of different regions of the same
> dataset)
> can be solved with the second one by opening several datasets for the same
> filename.
>
> Regarding gdalwarp -multi, here's how that works. When you warp a dataset,
> there's a list of all chunks (windows) to be processed that is generated.
> gdalwarp -multi does the following
>
> Thread I/O                                              Thread computation
> Read data for chunk 1
> Read data for chunk 2                   Do calculations for chunk 1
> Write output of chunk 1                 Do calculations for chunk 2
> Read data for chunk 3
> Write output of chunk 2                 Do calculations for chunk 3
>
>
> >
> > Numba has several options which might eliminate using Python during
> > execution. There are c-callbacks:
> > http://numba.pydata.org/numba-doc/dev/user/cfunc.html
>
> You can also use @jit(nopython=True, nogil=True) and your Python method
> will
> end up being pure native code (provided that you don't use too high level
> stuff
> otherwise the jit'ification will fail with an exception).
>
> And for code that is not inlined in the VRT, you can also add cache=True so
> that the jit'ification can be reused.
>
> With all that the cost of the Python layer becomes neglectable (except
> loading
> the Python environment the first time, if not already loaded, but for a
> computation that will be longer than a few seconds, that's not really a big
> deal)
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org <javascript:;>
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160913/11d5e984/attachment.html>

From even.rouault at spatialys.com  Tue Sep 13 12:23:58 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 21:23:58 +0200
Subject: [gdal-dev] Possible concurrency issue in
	OGRCoordinateTransformation
In-Reply-To: <SN2PR07MB2559172952B36B0986F4F4FDA8FE0@SN2PR07MB2559.namprd07.prod.outlook.com>
References: <SN2PR07MB2559172952B36B0986F4F4FDA8FE0@SN2PR07MB2559.namprd07.prod.outlook.com>
Message-ID: <201609132123.59121.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 17:09:30, Wood, Alexander a écrit :
> Hi,
> I've encountered what appears to be a concurrency issue when calling
> OGRCoordinateTransformation::Transform from multiple threads.  What I've
> found is that when Transform is called from multiple asynchronous tasks,
> I'm getting inconsistent results given the same inputs.  This is
> pronounced with the projection used in the GINA Elevation dataset
> (Alaska); sample data can be found here:
> http://ifsar.gina.alaska.edu/data/2013/DTM/IFSAR.SDMI.2013.FUGRO.DTM_N59W1
> 44/IFSAR.SDMI.2013.FUGRO.DTM_N59W144.tar.gz
> 
> The projection used by this datasource is:
> PROJCS["NAD_1983_CORS96_Alaska_Albers",GEOGCS["GCS_NAD_1983_CORS96",DATUM["
> NAD_1983_CORS96",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenw
> ich",0],UNIT["degree",0.0174532925199433]],PROJECTION["Albers_Conic_Equal_A
> rea"],PARAMETER["standard_parallel_1",55],PARAMETER["standard_parallel_2",6
> 5],PARAMETER["latitude_of_center",50],PARAMETER["longitude_of_center",-154]
> ,PARAMETER["false_easting",0],PARAMETER["false_northing",0],UNIT["metre",1,
> AUTHORITY["EPSG","9001"]]]
> 
> Or in proj4:
> +proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon+0-154 +x_0=0 +y_0=0
> +ellps=GRS80 + units=m +no_defs
> 
> The following code snippet reproduced the problem for me.  If I were
> comment out the async tasks and simply perform the transform
> synchronously, the outputs all remain consistent with the expected result.
>  Also make note of the CPLConfigOption "USE_PROJ_480_FEATURES".  Setting
> this to "NO" will also produce consistent results, as indicated in the
> inline comments below.
> 

Alex,

It seems that you use the same OGRCoordinateTransform* object simultaneously 
from multiple threads. This is clearly an invalid use of the API (most 
GDAL/OGR objects are not thread-safe, unless explicitly stated otherwise). You 
need to have one coordinate transform object per thread. Setting 
USE_PROJ_480_FEATURES=NO will serialize the calls but this still remains an 
invalid use of the API (that happens to work by chance).

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Sep 13 12:32:59 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 13 Sep 2016 21:32:59 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CAEW=KS63XQGQ81_YOBTUZULTqqOBnMO=tt=E9f9X9=to_qeGpw@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609131156.17411.even.rouault@spatialys.com>
 <CAEW=KS63XQGQ81_YOBTUZULTqqOBnMO=tt=E9f9X9=to_qeGpw@mail.gmail.com>
Message-ID: <201609132132.59959.even.rouault@spatialys.com>

Le mardi 13 septembre 2016 21:22:20, James Ramm a écrit :
> I think you can call SWIG with the -threads argument on the command line so
> it will always release the GIL. Could be an easy option if it works

That's mostly what I've done. See my other message : 
https://lists.osgeo.org/pipermail/gdal-dev/2016-September/045155.html

> 
> On Tuesday, 13 September 2016, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Le mardi 13 septembre 2016 11:07:39, Rutger a écrit :
> > > I overlooked the fact that it still moves through Python, is that the
> > > 'only' hurdle preventing parallel IO?
> > 
> > Not sure to understand your question. But if you have several sources,
> > you could potentially do parallelized reading of them from the Python
> > code by using Python threads and GDAL Python API. But looking in the
> > SWIG generated code, it doesn't seem that SWIG releases the GIL
> > automatically before calling
> > native code. Hum... So that should probably added manually, at least
> > around GDALRasterIO() calls, otherwise you'll get zero perf
> > improvements.
> > 
> > > Since gdalwarp for example has the
> > > -multi flag, it seems as if GDAL is capable of it, or is that a
> > > specific/specialized implementation?
> > 
> > Parallelized I/O doesn't mean much by itself without more context. You
> > may want to parallelize reading of different regions of the same
> > dataset, or parallelize reading of different datasets. Due to GDAL
> > objects not being thread-safe, the first case (reading of different
> > regions of the same dataset)
> > can be solved with the second one by opening several datasets for the
> > same filename.
> > 
> > Regarding gdalwarp -multi, here's how that works. When you warp a
> > dataset, there's a list of all chunks (windows) to be processed that is
> > generated. gdalwarp -multi does the following
> > 
> > Thread I/O                                              Thread
> > computation Read data for chunk 1
> > Read data for chunk 2                   Do calculations for chunk 1
> > Write output of chunk 1                 Do calculations for chunk 2
> > Read data for chunk 3
> > Write output of chunk 2                 Do calculations for chunk 3
> > 
> > > Numba has several options which might eliminate using Python during
> > > execution. There are c-callbacks:
> > > http://numba.pydata.org/numba-doc/dev/user/cfunc.html
> > 
> > You can also use @jit(nopython=True, nogil=True) and your Python method
> > will
> > end up being pure native code (provided that you don't use too high level
> > stuff
> > otherwise the jit'ification will fail with an exception).
> > 
> > And for code that is not inlined in the VRT, you can also add cache=True
> > so that the jit'ification can be reused.
> > 
> > With all that the cost of the Python layer becomes neglectable (except
> > loading
> > the Python environment the first time, if not already loaded, but for a
> > computation that will be longer than a few seconds, that's not really a
> > big deal)
> > 
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org <javascript:;>
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kassies at gmail.com  Wed Sep 14 00:02:07 2016
From: kassies at gmail.com (Rutger)
Date: Wed, 14 Sep 2016 00:02:07 -0700 (PDT)
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609131156.17411.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <1473750129580-5285450.post@n6.nabble.com>
 <201609131026.09484.even.rouault@spatialys.com>
 <1473757659733-5285482.post@n6.nabble.com>
 <201609131156.17411.even.rouault@spatialys.com>
Message-ID: <1473836527582-5285730.post@n6.nabble.com>

Then I guess i'm mistaken in thinking that Python would become a slowdown in
such a case. It's been a while since i tested it. Anyway, thanks for your
comments and efforts to improve the performance.

I couldnt find any Conda channels* which build from trunk, so i probably
have to wait a while before i can 
try it out, something to look forward to. :)

* https://anaconda.org/search?q=gdal


Regards,
Rutger


Even Rouault-2 wrote
> Le mardi 13 septembre 2016 11:07:39, Rutger a écrit :
> ....
> 
> With all that the cost of the Python layer becomes neglectable (except
> loading 
> the Python environment the first time, if not already loaded, but for a 
> computation that will be longer than a few seconds, that's not really a
> big 
> deal)
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list

> gdal-dev at .osgeo

> http://lists.osgeo.org/mailman/listinfo/gdal-dev





--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functions-written-in-Python-tp5285323p5285730.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Wed Sep 14 00:21:05 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 09:21:05 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <1473836527582-5285730.post@n6.nabble.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609131156.17411.even.rouault@spatialys.com>
 <1473836527582-5285730.post@n6.nabble.com>
Message-ID: <201609140921.06354.even.rouault@spatialys.com>

Le mercredi 14 septembre 2016 09:02:07, Rutger a écrit :
> Then I guess i'm mistaken in thinking that Python would become a slowdown
> in such a case. It's been a while since i tested it. Anyway, thanks for
> your comments and efforts to improve the performance.
> 
> I couldnt find any Conda channels* which build from trunk, so i probably
> have to wait a while before i can
> try it out, something to look forward to. :)
> 
> * https://anaconda.org/search?q=gdal

You can also grab a nightly build at 
http://www.gisinternals.com/development.php

> 
> 
> Regards,
> Rutger
> 
> 
> Even Rouault-2 wrote
> 
> > Le mardi 13 septembre 2016 11:07:39, Rutger a écrit :
> > ....
> > 
> > With all that the cost of the Python layer becomes neglectable (except
> > loading
> > the Python environment the first time, if not already loaded, but for a
> > computation that will be longer than a few seconds, that's not really a
> > big
> > deal)
> > 
> > 
> > gdal-dev at .osgeo
> > 
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functi
> ons-written-in-Python-tp5285323p5285730.html Sent from the GDAL - Dev
> mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pierrelem at gmail.com  Wed Sep 14 02:50:04 2016
From: pierrelem at gmail.com (Pierre Leman)
Date: Wed, 14 Sep 2016 11:50:04 +0200
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
Message-ID: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>

Hello,


I'm trying to read a WAFS GRIB2 file using gdal in order to produce Geotiff
image displayable in OsgEarth (file WAFS_blended_2016090700f06.grib2 from
http://www.ftp.ncep.noaa.gov/data/nccf/com/gfs/prod/gfs.2016090700/).
When i do, i get an error.

The gdalinfo command give the following informations :
gdalinfo --debug on WAFS_blended_2016090700f06.grib2
GRIB: This was only designed for templates 0, 1, 2, 5, 8, 9, 10, 11, 12,
20, 30

ERROR 4: WAFS_blended_2016090700f06.grib2 is a grib file, but no raster
dataset was successfully identified.
gdalinfo failed - unable to open 'WAFS_blended_2016090700f06.grib2'.


A bug seems to be already opened for this error :
https://trac.osgeo.org/gdal/ticket/5768


Using the wgrib2 tool, i can extract the 1-3 band that are accepted by gdal
resulting in a success for these bands :
wgrib2 ..\WAFS_blended_2016090700f06.grib2
1:0:d=2016090700:ICAHT:cumulonimbus base:6 hour fcst:
2:68039:d=2016090700:ICAHT:cumulonimbus top:6 hour fcst:
3:146518:d=2016090700:CBHE:entire atmosphere:6 hour fcst:
4:167577:d=2016090700:CTP:700 mb:6 hour fcst:spatial ave
5:204299:d=2016090700:CTP:700 mb:6 hour fcst:spatial max
6:251461:d=2016090700:CTP:600 mb:6 hour fcst:spatial ave
7:288183:d=2016090700:CTP:600 mb:6 hour fcst:spatial max
8:340565:d=2016090700:CTP:500 mb:6 hour fcst:spatial ave
9:366847:d=2016090700:CTP:500 mb:6 hour fcst:spatial max
10:403569:d=2016090700:CTP:400 mb:6 hour fcst:spatial ave
11:424631:d=2016090700:CTP:400 mb:6 hour fcst:spatial max
12:461353:d=2016090700:CTP:300 mb:6 hour fcst:spatial ave
13:482415:d=2016090700:CTP:300 mb:6 hour fcst:spatial max
14:513917:d=2016090700:CAT:400 mb:6 hour fcst:spatial ave
15:555859:d=2016090700:CAT:400 mb:6 hour fcst:spatial max
16:603021:d=2016090700:CAT:350 mb:6 hour fcst:spatial ave
17:644963:d=2016090700:CAT:350 mb:6 hour fcst:spatial max
18:692125:d=2016090700:CAT:300 mb:6 hour fcst:spatial ave
19:734067:d=2016090700:CAT:300 mb:6 hour fcst:spatial max
20:786449:d=2016090700:CAT:250 mb:6 hour fcst:spatial ave
21:828391:d=2016090700:CAT:250 mb:6 hour fcst:spatial max
22:875553:d=2016090700:CAT:200 mb:6 hour fcst:spatial ave
23:912275:d=2016090700:CAT:200 mb:6 hour fcst:spatial max
24:959437:d=2016090700:CAT:150 mb:6 hour fcst:spatial ave
25:996159:d=2016090700:CAT:150 mb:6 hour fcst:spatial max
26:1043321:d=2016090700:ICIP:800 mb:6 hour fcst:spatial ave
27:1080043:d=2016090700:ICIP:800 mb:6 hour fcst:spatial max
28:1116765:d=2016090700:ICIP:700 mb:6 hour fcst:spatial ave
29:1153487:d=2016090700:ICIP:700 mb:6 hour fcst:spatial max
30:1190209:d=2016090700:ICIP:600 mb:6 hour fcst:spatial ave
31:1226931:d=2016090700:ICIP:600 mb:6 hour fcst:spatial max
32:1263653:d=2016090700:ICIP:500 mb:6 hour fcst:spatial ave
33:1300375:d=2016090700:ICIP:500 mb:6 hour fcst:spatial max
34:1337097:d=2016090700:ICIP:400 mb:6 hour fcst:spatial ave
35:1373819:d=2016090700:ICIP:400 mb:6 hour fcst:spatial max
36:1410541:d=2016090700:ICIP:300 mb:6 hour fcst:spatial ave
37:1426383:d=2016090700:ICIP:300 mb:6 hour fcst:spatial max

wgrib2 ../WAFS_blended_2016090700f06.grib2 -for 1:3 -grib
../grib2extractblock.grib2


Is there a workaround for the 4-37 bands ?
Thanks for any help you can give
Pierre
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/5192a3fe/attachment-0001.html>

From even.rouault at spatialys.com  Wed Sep 14 07:16:53 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 16:16:53 +0200
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
In-Reply-To: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
References: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
Message-ID: <201609141616.53983.even.rouault@spatialys.com>

Pierre,

> A bug seems to be already opened for this error :
> https://trac.osgeo.org/gdal/ticket/5768

I had a look and just added support for that kind of products in GDAL trunk. 
The issue was that Template 4.15 ( 
http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_temp4-15.shtml ) used for 
bands 4-37 wasn't supported before.

I've also refreshed the GRIB tables used to get parameter names from latest 
degrib v2.0.3

Now you get:

$ gdalinfo WAFS_blended_2016090700f06.grib2
Driver: GRIB/GRIdded Binary (.grb)
Files: WAFS_blended_2016090700f06.grib2
Size is 288, 145
Coordinate System is:
GEOGCS["Coordinate System imported from GRIB file",
    DATUM["unknown",
        SPHEROID["Sphere",6371229,0]],
    PRIMEM["Greenwich",0],
    UNIT["degree",0.0174532925199433]]
Origin = (-0.625000000000000,90.625000000000000)
Pixel Size = (1.250000000000000,-1.250000000000000)
Corner Coordinates:
Upper Left  (  -0.6250000,  90.6250000) (  0d37'30.00"W, 90d37'30.00"N)
Lower Left  (  -0.6250000, -90.6250000) (  0d37'30.00"W, 90d37'30.00"S)
Upper Right (     359.375,      90.625) (359d22'30.00"E, 90d37'30.00"N)
Lower Right (     359.375,     -90.625) (359d22'30.00"E, 90d37'30.00"S)
Center      ( 179.3750000,   0.0000000) (179d22'30.00"E,  0d 0' 0.01"N)
Band 1 Block=288x1 Type=Float64, ColorInterp=Undefined
  Description = 0[-] RESERVED(11) (Reserved)
  Metadata:
    GRIB_COMMENT=ICAO Standard Atmosphere Reference Height [m]
    GRIB_ELEMENT=ICAHT
    GRIB_FORECAST_SECONDS=21600 sec
    GRIB_PDS_PDTN=0
    GRIB_PDS_TEMPLATE_NUMBERS=3 3 2 0 96 0 0 0 1 0 0 0 6 11 0 0 0 0 0 255 0 0 
0 0 0
    GRIB_REF_TIME=  1473206400 sec UTC
    GRIB_SHORT_NAME=0-RESERVED(11)
    GRIB_UNIT=[m]
    GRIB_VALID_TIME=  1473228000 sec UTC
[...snip...]
Band 4 Block=288x1 Type=Float64, ColorInterp=Undefined
  Description = 70000[Pa] ISBL="Isobaric surface"
  Metadata:
    GRIB_COMMENT=In-Cloud Turbulence [%]
    GRIB_ELEMENT=CTP
    GRIB_FORECAST_SECONDS=21600 sec
    GRIB_PDS_PDTN=15
    GRIB_PDS_TEMPLATE_NUMBERS=19 21 2 0 96 0 0 0 1 0 0 0 6 100 0 0 1 17 112 
255 0 0 0 0 0 0 3 1
    GRIB_REF_TIME=  1473206400 sec UTC
    GRIB_SHORT_NAME=70000-ISBL
    GRIB_UNIT=[%]
    GRIB_VALID_TIME=  1473228000 sec UTC
[... snip ... ]
Band 37 Block=288x1 Type=Float64, ColorInterp=Undefined
  Description = 30000[Pa] ISBL="Isobaric surface"
  Metadata:
    GRIB_COMMENT=Icing [%]
    GRIB_ELEMENT=ICIP
    GRIB_FORECAST_SECONDS=21600 sec
    GRIB_PDS_PDTN=15
    GRIB_PDS_TEMPLATE_NUMBERS=19 20 2 0 96 0 0 0 1 0 0 0 6 100 0 0 0 117 48 
255 0 0 0 0 0 2 3 1
    GRIB_REF_TIME=  1473206400 sec UTC
    GRIB_SHORT_NAME=30000-ISBL
    GRIB_UNIT=[%]
    GRIB_VALID_TIME=  1473228000 sec UTC


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From andrew.bell.ia at gmail.com  Wed Sep 14 07:43:51 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 14 Sep 2016 09:43:51 -0500
Subject: [gdal-dev] Raster Band Types
Message-ID: <CACJ51z2qJFO7W-eTYFnXshMN_1GR7q=esXxtYQr-8uZeC-+dNQ@mail.gmail.com>

Hi,

Each raster band has a function to fetch the type of the raster band
(GetRasterDataType).  This implies that various raster bands in a dataset
can have differing data types.  But as far as I can tell, when creating a
dataset and the associated raster bands, a single data type is specified
for all of the raster bands in the dataset  (GDALDriver::Create).  I don't
see a way to create a dataset with raster bands of varying data types.  Is
this supported?  If not, why not OR, why is the call to find the datatype
on GDALRasterBand rather than GDALDataset?

Thanks,

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/680fe7e1/attachment.html>

From jluis at ualg.pt  Wed Sep 14 07:55:12 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 15:55:12 +0100
Subject: [gdal-dev] Troubles with VS2015
Message-ID: <op.ynsbqakudbaoe8@macmarilu>

Hi,

I did this before with VS2015 but now I'm getting this weired linking  
error.

         link /nologo /dll /INCLUDE:OSRValidate   
/INCLUDE:OPTGetProjectionMethods  /INCLUDE:OGR_G_GetPointCount   
/INCLUDE:OGRRegisterAll /INCLUDE:GDALSimpleImageWarp   
/INCLUDE:GDALReprojectImage  /INCLUDE:GDALComputeMedianCutPCT   
/INCLUDE:GDALDitherRGB2PCT  /INCLUDE:OCTNewCoordinateTransformation  
port\*.obj gcore\*.obj alg\*.obj frmts\o\*.obj  
ogr\ogrsf_frmts\ogrsf_frmts.lib ogr\ogr.lib gnm\*.obj  
gnm\gnm_frmts\o\*.obj  apps\commonutils.obj apps\gdalinfo_lib.obj  
apps\gdal_translate_lib.obj apps\gdalwarp_lib.obj apps\ogr2ogr_lib.obj   
apps\gdaldem_lib.obj apps\nearblack_lib.obj apps\gdal_grid_lib.obj  
apps\gdal_rasterize_lib.obj apps\gdalbuildvrt_lib.obj    
C:\programs\compa_libs\xerces-c-3.1.1\compileds/VC14_64/lib/xerces-c_3.lib  
C:\programs\compa_libs\expat-2.1.1/compileds/VC14_64/lib/expat.lib     
C:\programs\compa_libs\libecwj2-3.3\compileds\VC14_64\lib\libecwj2.lib  
C:\programs\compa_libs\hdf-4.2.9\compileds\VC14_64\lib\hdfdll.lib  
C:\programs\compa_libs\hdf-4.2.9\compileds\VC14_64\lib\mfhdfdll.lib  
Ws2_32.lib   
"C:\programs\compa_libs\MrSID_DSDK-8.5.0.3422\compileds\VC14_64\lib\lti_dsdk.lib"  
"C:\programs\compa_libs\MrSID_DSDK-8.5.0.3422\compileds\VC14_64\lib\lti_dsdk.lib"      
C:\programs\compa_libs\netcdf_GIT\compileds\VC14_64\lib\netcdf.lib      
C:\programs\compa_libs\proj4_GIT\compileds\VC14_64\lib\proj_i.lib     
C:\programs\compa_libs\geos_SVN\compileds/VC14_64/lib/geos_c.lib  
C:\programs\compa_libs\hdf5-1.10.0\compileds\VC14_64\lib\hdf5.lib        
C:\programs\compa_libs\curl-7.46.0\compileds\VC14_64/lib/libcurl.lib  
wsock32.lib wldap32.lib winmm.lib     odbc32.lib odbccp32.lib  
user32.lib     
C:\programs\compa_libs\OpenJpeg_SVN\compileds\VC14_64\lib\openjp2.lib          
C:/programs/compa_libs/webp/compileds/VC14_64/lib/webp.lib           
ws2_32.lib  kernel32.lib psapi.lib gcore\Version.res  /out:gdal_w64.dll  
/implib:gdal_i.lib    /NODEFAULTLIB:LIBCMT
    Creating library gdal_i.lib and object gdal_i.exp
odbccp32.lib(dllload.obj) : error LNK2019: unresolved external symbol  
_vsnwprintf_s referenced in function StringCchPrintfW
gdal_w64.dll : fatal error LNK1120: 1 unresolved externals
NMAKE : fatal error U1077: '"C:\Program Files (x86)\Microsoft Visual  
Studio 14.0\VC\BIN\amd64\link.EXE"' : return code '0x460'


but odbccp32.lib is a 'system' lib. Any idea on what this is?
BTW, it still builds fine with VS2013

Thanks

Joaquim

From even.rouault at spatialys.com  Wed Sep 14 08:05:02 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 17:05:02 +0200
Subject: [gdal-dev] Raster Band Types
In-Reply-To: <CACJ51z2qJFO7W-eTYFnXshMN_1GR7q=esXxtYQr-8uZeC-+dNQ@mail.gmail.com>
References: <CACJ51z2qJFO7W-eTYFnXshMN_1GR7q=esXxtYQr-8uZeC-+dNQ@mail.gmail.com>
Message-ID: <201609141705.03253.even.rouault@spatialys.com>

Le mercredi 14 septembre 2016 16:43:51, Andrew Bell a écrit :
> Hi,
> 
> Each raster band has a function to fetch the type of the raster band
> (GetRasterDataType).  This implies that various raster bands in a dataset
> can have differing data types.  But as far as I can tell, when creating a
> dataset and the associated raster bands, a single data type is specified
> for all of the raster bands in the dataset  (GDALDriver::Create).
> I don't
> see a way to create a dataset with raster bands of varying data types.  Is
> this supported?  If not, why not OR, why is the call to find the datatype
> on GDALRasterBand rather than GDALDataset?

A very small number of drivers (Memory, VRT, KEA) allow to add new bands on an 
existing dataset (possibly created with 0 bands at Create() time) with the 
GDALDataset::AddBand( GDALDataType eType, char** papszOptions ) API. You can 
use here a data type different from the one used at dataset creation.
For all other drivers that have creation capabilities, all bands will have the 
same data type. There might be some drivers that are read-only and can expose 
bands of different data types but none come to my mind currently (most of the 
time GDAL will select the "largest" data type and use if for all bands if the 
underlying format supports different data types per band)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pierrelem at gmail.com  Wed Sep 14 08:09:18 2016
From: pierrelem at gmail.com (Pierre Leman)
Date: Wed, 14 Sep 2016 17:09:18 +0200
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
In-Reply-To: <201609141616.53983.even.rouault@spatialys.com>
References: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
 <201609141616.53983.even.rouault@spatialys.com>
Message-ID: <CABhsLMW1YEqL8RH4r-Z4evobQ5jJ-fE44OFVfFzUvHyOhNqmiQ@mail.gmail.com>

Hi Even,


Thanks for handling this problem so fast it's perfect.
Any information about the GDAL 2.2 release date ?

Pierre

2016-09-14 16:16 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:

> Pierre,
>
> > A bug seems to be already opened for this error :
> > https://trac.osgeo.org/gdal/ticket/5768
>
> I had a look and just added support for that kind of products in GDAL
> trunk.
> The issue was that Template 4.15 (
> http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_temp4-15.shtml ) used
> for
> bands 4-37 wasn't supported before.
>
> I've also refreshed the GRIB tables used to get parameter names from latest
> degrib v2.0.3
>
> Now you get:
>
> $ gdalinfo WAFS_blended_2016090700f06.grib2
> Driver: GRIB/GRIdded Binary (.grb)
> Files: WAFS_blended_2016090700f06.grib2
> Size is 288, 145
> Coordinate System is:
> GEOGCS["Coordinate System imported from GRIB file",
>     DATUM["unknown",
>         SPHEROID["Sphere",6371229,0]],
>     PRIMEM["Greenwich",0],
>     UNIT["degree",0.0174532925199433]]
> Origin = (-0.625000000000000,90.625000000000000)
> Pixel Size = (1.250000000000000,-1.250000000000000)
> Corner Coordinates:
> Upper Left  (  -0.6250000,  90.6250000) (  0d37'30.00"W, 90d37'30.00"N)
> Lower Left  (  -0.6250000, -90.6250000) (  0d37'30.00"W, 90d37'30.00"S)
> Upper Right (     359.375,      90.625) (359d22'30.00"E, 90d37'30.00"N)
> Lower Right (     359.375,     -90.625) (359d22'30.00"E, 90d37'30.00"S)
> Center      ( 179.3750000,   0.0000000) (179d22'30.00"E,  0d 0' 0.01"N)
> Band 1 Block=288x1 Type=Float64, ColorInterp=Undefined
>   Description = 0[-] RESERVED(11) (Reserved)
>   Metadata:
>     GRIB_COMMENT=ICAO Standard Atmosphere Reference Height [m]
>     GRIB_ELEMENT=ICAHT
>     GRIB_FORECAST_SECONDS=21600 sec
>     GRIB_PDS_PDTN=0
>     GRIB_PDS_TEMPLATE_NUMBERS=3 3 2 0 96 0 0 0 1 0 0 0 6 11 0 0 0 0 0 255
> 0 0
> 0 0 0
>     GRIB_REF_TIME=  1473206400 sec UTC
>     GRIB_SHORT_NAME=0-RESERVED(11)
>     GRIB_UNIT=[m]
>     GRIB_VALID_TIME=  1473228000 sec UTC
> [...snip...]
> Band 4 Block=288x1 Type=Float64, ColorInterp=Undefined
>   Description = 70000[Pa] ISBL="Isobaric surface"
>   Metadata:
>     GRIB_COMMENT=In-Cloud Turbulence [%]
>     GRIB_ELEMENT=CTP
>     GRIB_FORECAST_SECONDS=21600 sec
>     GRIB_PDS_PDTN=15
>     GRIB_PDS_TEMPLATE_NUMBERS=19 21 2 0 96 0 0 0 1 0 0 0 6 100 0 0 1 17 112
> 255 0 0 0 0 0 0 3 1
>     GRIB_REF_TIME=  1473206400 sec UTC
>     GRIB_SHORT_NAME=70000-ISBL
>     GRIB_UNIT=[%]
>     GRIB_VALID_TIME=  1473228000 sec UTC
> [... snip ... ]
> Band 37 Block=288x1 Type=Float64, ColorInterp=Undefined
>   Description = 30000[Pa] ISBL="Isobaric surface"
>   Metadata:
>     GRIB_COMMENT=Icing [%]
>     GRIB_ELEMENT=ICIP
>     GRIB_FORECAST_SECONDS=21600 sec
>     GRIB_PDS_PDTN=15
>     GRIB_PDS_TEMPLATE_NUMBERS=19 20 2 0 96 0 0 0 1 0 0 0 6 100 0 0 0 117 48
> 255 0 0 0 0 0 2 3 1
>     GRIB_REF_TIME=  1473206400 sec UTC
>     GRIB_SHORT_NAME=30000-ISBL
>     GRIB_UNIT=[%]
>     GRIB_VALID_TIME=  1473228000 sec UTC
>
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/43e627d7/attachment.html>

From even.rouault at spatialys.com  Wed Sep 14 08:10:30 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 17:10:30 +0200
Subject: [gdal-dev] Troubles with VS2015
In-Reply-To: <op.ynsbqakudbaoe8@macmarilu>
References: <op.ynsbqakudbaoe8@macmarilu>
Message-ID: <201609141710.30601.even.rouault@spatialys.com>

Joaquim,

> odbccp32.lib(dllload.obj) : error LNK2019: unresolved external symbol
> _vsnwprintf_s referenced in function StringCchPrintfW
> gdal_w64.dll : fatal error LNK1120: 1 unresolved externals
> NMAKE : fatal error U1077: '"C:\Program Files (x86)\Microsoft Visual
> Studio 14.0\VC\BIN\amd64\link.EXE"' : return code '0x460'
> 
> 
> but odbccp32.lib is a 'system' lib. Any idea on what this is?
> BTW, it still builds fine with VS2013

Did you specify MSVC_VER=1900 in the nmake command line ?

See this extract of nmake.opt:

!IFDEF ODBC_SUPPORTED
!IF $(MSVC_VER) >= 1900
# legacy_stdio_definitions.lib : 
https://connect.microsoft.com/VisualStudio/feedback/details/1134693/vs-2015-
ctp-5-c-vsnwprintf-s-and-other-functions-are-not-exported-in-appcrt140-dll-
breaking-linkage-of-static-libraries
ODBCLIB = legacy_stdio_definitions.lib odbc32.lib odbccp32.lib user32.lib
!ELSE
ODBCLIB = odbc32.lib odbccp32.lib user32.lib
!ENDIF
!ENDIF

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Wed Sep 14 08:13:26 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 17:13:26 +0200
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
In-Reply-To: <CABhsLMW1YEqL8RH4r-Z4evobQ5jJ-fE44OFVfFzUvHyOhNqmiQ@mail.gmail.com>
References: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
 <201609141616.53983.even.rouault@spatialys.com>
 <CABhsLMW1YEqL8RH4r-Z4evobQ5jJ-fE44OFVfFzUvHyOhNqmiQ@mail.gmail.com>
Message-ID: <201609141713.26731.even.rouault@spatialys.com>

Le mercredi 14 septembre 2016 17:09:18, Pierre Leman a écrit :
> Hi Even,
> 
> 
> Thanks for handling this problem so fast it's perfect.
> Any information about the GDAL 2.2 release date ?

Likely April/May next year. But you don't need to wait for that long. You can 
compile from source (https://trac.osgeo.org/gdal/wiki/BuildHints) or if you 
are a Windows user, grab (wait for tomorrow so that is is refreshed with 
latest sources) one of the builds at http://gisinternals.com/development.php

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jluis at ualg.pt  Wed Sep 14 08:23:17 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 16:23:17 +0100
Subject: [gdal-dev] Troubles with VS2015
In-Reply-To: <201609141710.30601.even.rouault@spatialys.com>
References: <op.ynsbqakudbaoe8@macmarilu>
 <201609141710.30601.even.rouault@spatialys.com>
Message-ID: <op.ynsc03m0dbaoe8@macmarilu>

Thanks Even,

No I hadn't and was reading that MSDN page trying to figure out what to do  
with that info.
The build is running now

> Joaquim,
>
>> odbccp32.lib(dllload.obj) : error LNK2019: unresolved external symbol
>> _vsnwprintf_s referenced in function StringCchPrintfW
>> gdal_w64.dll : fatal error LNK1120: 1 unresolved externals
>> NMAKE : fatal error U1077: '"C:\Program Files (x86)\Microsoft Visual
>> Studio 14.0\VC\BIN\amd64\link.EXE"' : return code '0x460'
>>
>>
>> but odbccp32.lib is a 'system' lib. Any idea on what this is?
>> BTW, it still builds fine with VS2013
>
> Did you specify MSVC_VER=1900 in the nmake command line ?
>
> See this extract of nmake.opt:
>
> !IFDEF ODBC_SUPPORTED
> !IF $(MSVC_VER) >= 1900
> # legacy_stdio_definitions.lib :
> https://connect.microsoft.com/VisualStudio/feedback/details/1134693/vs-2015-
> ctp-5-c-vsnwprintf-s-and-other-functions-are-not-exported-in-appcrt140-dll-
> breaking-linkage-of-static-libraries
> ODBCLIB = legacy_stdio_definitions.lib odbc32.lib odbccp32.lib user32.lib
> !ELSE
> ODBCLIB = odbc32.lib odbccp32.lib user32.lib
> !ENDIF
> !ENDIF
>
> Even

From jamessramm at gmail.com  Wed Sep 14 08:24:53 2016
From: jamessramm at gmail.com (jramm)
Date: Wed, 14 Sep 2016 08:24:53 -0700 (PDT)
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609140921.06354.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <1473750129580-5285450.post@n6.nabble.com>
 <201609131026.09484.even.rouault@spatialys.com>
 <1473757659733-5285482.post@n6.nabble.com>
 <201609131156.17411.even.rouault@spatialys.com>
 <1473836527582-5285730.post@n6.nabble.com>
 <201609140921.06354.even.rouault@spatialys.com>
Message-ID: <1473866693374-5285882.post@n6.nabble.com>

Trying to run this using a function relying on scipy.ndimage...

When running gdal_translate on the VRT, I get ImportError: No module named
scipy.ndimage
This comes after successfully import numpy. scipy.ndimage will happily
import within the python interpreter.
Any tips on how to track this down/debug? 

The entire VRT file is as follows:

<VRTDataset RasterXSize="111090" RasterYSize="259376">
  <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
1936",DATUM["OSGB_1936",SPHEROID["Airy
1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWGS84[446.448,-125.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","6277"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",49],PARAMETER["central_meridian",-2],PARAMETER["scale_factor",0.9996012717],PARAMETER["false_easting",400000],PARAMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","27700"]]</SRS>
  <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
  <VRTRasterBand dataType="Float32" band="1"
subClass="VRTDerivedRasterBand">
    <SimpleSource>
      <SourceFilename
relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
      <SourceProperties BlockXSize="256" BlockYSize="256"
RasterXSize="111090" RasterYSize="259376"/>
	  <OpenOptions>
		<OOI key="NUM_THREADS">4</OOI>
		<OOI key="SPARSE_OK">TRUE</OOI>
	  </OpenOptions>
    </SimpleSource>
    <PixelFunctionType>extract_blobs</PixelFunctionType>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionCode>
	</PixelFunctionCode>
    <BufferRadius>5</BufferRadius>
    <PixelFunctionArguments nodata="0" count_threshold="5"/>
  </VRTRasterBand>
</VRTDataset>




--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functions-written-in-Python-tp5285323p5285882.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From jamessramm at gmail.com  Wed Sep 14 08:24:53 2016
From: jamessramm at gmail.com (jramm)
Date: Wed, 14 Sep 2016 08:24:53 -0700 (PDT)
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609140921.06354.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <1473750129580-5285450.post@n6.nabble.com>
 <201609131026.09484.even.rouault@spatialys.com>
 <1473757659733-5285482.post@n6.nabble.com>
 <201609131156.17411.even.rouault@spatialys.com>
 <1473836527582-5285730.post@n6.nabble.com>
 <201609140921.06354.even.rouault@spatialys.com>
Message-ID: <1473866693930-5285883.post@n6.nabble.com>

Trying to run this using a function relying on scipy.ndimage...

When running gdal_translate on the VRT, I get ImportError: No module named
scipy.ndimage
This comes after successfully import numpy. scipy.ndimage will happily
import within the python interpreter.
Any tips on how to track this down/debug? 

The entire VRT file is as follows:

<VRTDataset RasterXSize="111090" RasterYSize="259376">
  <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
1936",DATUM["OSGB_1936",SPHEROID["Airy
1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWGS84[446.448,-125.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","6277"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",49],PARAMETER["central_meridian",-2],PARAMETER["scale_factor",0.9996012717],PARAMETER["false_easting",400000],PARAMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","27700"]]</SRS>
  <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
  <VRTRasterBand dataType="Float32" band="1"
subClass="VRTDerivedRasterBand">
    <SimpleSource>
      <SourceFilename
relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
      <SourceProperties BlockXSize="256" BlockYSize="256"
RasterXSize="111090" RasterYSize="259376"/>
	  <OpenOptions>
		<OOI key="NUM_THREADS">4</OOI>
		<OOI key="SPARSE_OK">TRUE</OOI>
	  </OpenOptions>
    </SimpleSource>
    <PixelFunctionType>extract_blobs</PixelFunctionType>
    <PixelFunctionLanguage>Python</PixelFunctionLanguage>
    <PixelFunctionCode>
	</PixelFunctionCode>
    <BufferRadius>5</BufferRadius>
    <PixelFunctionArguments nodata="0" count_threshold="5"/>
  </VRTRasterBand>
</VRTDataset>




--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functions-written-in-Python-tp5285323p5285883.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From pierrelem at gmail.com  Wed Sep 14 08:26:07 2016
From: pierrelem at gmail.com (Pierre Leman)
Date: Wed, 14 Sep 2016 17:26:07 +0200
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
In-Reply-To: <201609141713.26731.even.rouault@spatialys.com>
References: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
 <201609141616.53983.even.rouault@spatialys.com>
 <CABhsLMW1YEqL8RH4r-Z4evobQ5jJ-fE44OFVfFzUvHyOhNqmiQ@mail.gmail.com>
 <201609141713.26731.even.rouault@spatialys.com>
Message-ID: <CABhsLMWW36aR8Uz=nkppcnDBkbMPmKFHBaf=ZOw4PJc46KWJMw@mail.gmail.com>

Ok I will do that.

Thanks for your support
Pierre

Le 14 sept. 2016 17:15, "Even Rouault" <even.rouault at spatialys.com> a
écrit :

> Le mercredi 14 septembre 2016 17:09:18, Pierre Leman a écrit :
> > Hi Even,
> >
> >
> > Thanks for handling this problem so fast it's perfect.
> > Any information about the GDAL 2.2 release date ?
>
> Likely April/May next year. But you don't need to wait for that long. You
> can
> compile from source (https://trac.osgeo.org/gdal/wiki/BuildHints) or if
> you
> are a Windows user, grab (wait for tomorrow so that is is refreshed with
> latest sources) one of the builds at http://gisinternals.com/
> development.php
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/916a14d4/attachment.html>

From even.rouault at spatialys.com  Wed Sep 14 08:50:17 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 17:50:17 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <1473866693374-5285882.post@n6.nabble.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609140921.06354.even.rouault@spatialys.com>
 <1473866693374-5285882.post@n6.nabble.com>
Message-ID: <201609141750.17748.even.rouault@spatialys.com>

Le mercredi 14 septembre 2016 17:24:53, jramm a écrit :
> Trying to run this using a function relying on scipy.ndimage...
> 
> When running gdal_translate on the VRT, I get ImportError: No module named
> scipy.ndimage
> This comes after successfully import numpy. scipy.ndimage will happily
> import within the python interpreter.

Works for me for both inline or offline functions.

Are you sure GDAL loads the same python lib as the python version used in the 
python interpreter ? (check the debug traces with CPL_DEBUG=ON)

You can also add at the top of your script

import sys
print(sys.path)

and check if the output points to a location where your scipy package can be 
found.

> Any tips on how to track this down/debug?
> 
> The entire VRT file is as follows:

I guess this is not the entire VRT since it refers to an inline definition of 
the script but <PixelFunctionCode> has empty content.

> 
> <VRTDataset RasterXSize="111090" RasterYSize="259376">
>   <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
> 1936",DATUM["OSGB_1936",SPHEROID["Airy
> 1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWGS84[446.448,-12
> 5.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","6277"]],PRIMEM["Gr
> eenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHO
> RITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["Transverse_Merca
> tor"],PARAMETER["latitude_of_origin",49],PARAMETER["central_meridian",-2],P
> ARAMETER["scale_factor",0.9996012717],PARAMETER["false_easting",400000],PAR
> AMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["EPSG","9001"]],A
> XIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","27700"]]</SRS>
> <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
> <VRTRasterBand dataType="Float32" band="1"
> subClass="VRTDerivedRasterBand">
>     <SimpleSource>
>       <SourceFilename
> relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
>       <SourceProperties BlockXSize="256" BlockYSize="256"
> RasterXSize="111090" RasterYSize="259376"/>
> 	  <OpenOptions>
> 		<OOI key="NUM_THREADS">4</OOI>
> 		<OOI key="SPARSE_OK">TRUE</OOI>
> 	  </OpenOptions>
>     </SimpleSource>
>     <PixelFunctionType>extract_blobs</PixelFunctionType>
>     <PixelFunctionLanguage>Python</PixelFunctionLanguage>
>     <PixelFunctionCode>
> 	</PixelFunctionCode>
>     <BufferRadius>5</BufferRadius>
>     <PixelFunctionArguments nodata="0" count_threshold="5"/>
>   </VRTRasterBand>
> </VRTDataset>
> 
> 
> 
> 
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-band-pixel-functi
> ons-written-in-Python-tp5285323p5285882.html Sent from the GDAL - Dev
> mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Wed Sep 14 09:10:34 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 14 Sep 2016 09:10:34 -0700
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
In-Reply-To: <201609141616.53983.even.rouault@spatialys.com>
References: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
 <201609141616.53983.even.rouault@spatialys.com>
Message-ID: <CACmBxysrHHYsw66tATQDWF+O3_qw2Wq7TjXGcEptxX2orG-=9Q@mail.gmail.com>

FYI,

degrib 2.05 from Dec 2015 is out here:

http://slosh.nws.noaa.gov/degrib2/download.php

-kurt

On Wed, Sep 14, 2016 at 7:16 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Pierre,
>
> > A bug seems to be already opened for this error :
> > https://trac.osgeo.org/gdal/ticket/5768
>
> I had a look and just added support for that kind of products in GDAL
> trunk.
> The issue was that Template 4.15 (
> http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_temp4-15.shtml ) used
> for
> bands 4-37 wasn't supported before.
>
> I've also refreshed the GRIB tables used to get parameter names from latest
> degrib v2.0.3
>
> Now you get:
>
> $ gdalinfo WAFS_blended_2016090700f06.grib2
> Driver: GRIB/GRIdded Binary (.grb)
> Files: WAFS_blended_2016090700f06.grib2
> Size is 288, 145
> Coordinate System is:
> GEOGCS["Coordinate System imported from GRIB file",
>     DATUM["unknown",
>         SPHEROID["Sphere",6371229,0]],
>     PRIMEM["Greenwich",0],
>     UNIT["degree",0.0174532925199433]]
> Origin = (-0.625000000000000,90.625000000000000)
> Pixel Size = (1.250000000000000,-1.250000000000000)
> Corner Coordinates:
> Upper Left  (  -0.6250000,  90.6250000) (  0d37'30.00"W, 90d37'30.00"N)
> Lower Left  (  -0.6250000, -90.6250000) (  0d37'30.00"W, 90d37'30.00"S)
> Upper Right (     359.375,      90.625) (359d22'30.00"E, 90d37'30.00"N)
> Lower Right (     359.375,     -90.625) (359d22'30.00"E, 90d37'30.00"S)
> Center      ( 179.3750000,   0.0000000) (179d22'30.00"E,  0d 0' 0.01"N)
> Band 1 Block=288x1 Type=Float64, ColorInterp=Undefined
>   Description = 0[-] RESERVED(11) (Reserved)
>   Metadata:
>     GRIB_COMMENT=ICAO Standard Atmosphere Reference Height [m]
>     GRIB_ELEMENT=ICAHT
>     GRIB_FORECAST_SECONDS=21600 sec
>     GRIB_PDS_PDTN=0
>     GRIB_PDS_TEMPLATE_NUMBERS=3 3 2 0 96 0 0 0 1 0 0 0 6 11 0 0 0 0 0 255
> 0 0
> 0 0 0
>     GRIB_REF_TIME=  1473206400 sec UTC
>     GRIB_SHORT_NAME=0-RESERVED(11)
>     GRIB_UNIT=[m]
>     GRIB_VALID_TIME=  1473228000 sec UTC
> [...snip...]
> Band 4 Block=288x1 Type=Float64, ColorInterp=Undefined
>   Description = 70000[Pa] ISBL="Isobaric surface"
>   Metadata:
>     GRIB_COMMENT=In-Cloud Turbulence [%]
>     GRIB_ELEMENT=CTP
>     GRIB_FORECAST_SECONDS=21600 sec
>     GRIB_PDS_PDTN=15
>     GRIB_PDS_TEMPLATE_NUMBERS=19 21 2 0 96 0 0 0 1 0 0 0 6 100 0 0 1 17 112
> 255 0 0 0 0 0 0 3 1
>     GRIB_REF_TIME=  1473206400 sec UTC
>     GRIB_SHORT_NAME=70000-ISBL
>     GRIB_UNIT=[%]
>     GRIB_VALID_TIME=  1473228000 sec UTC
> [... snip ... ]
> Band 37 Block=288x1 Type=Float64, ColorInterp=Undefined
>   Description = 30000[Pa] ISBL="Isobaric surface"
>   Metadata:
>     GRIB_COMMENT=Icing [%]
>     GRIB_ELEMENT=ICIP
>     GRIB_FORECAST_SECONDS=21600 sec
>     GRIB_PDS_PDTN=15
>     GRIB_PDS_TEMPLATE_NUMBERS=19 20 2 0 96 0 0 0 1 0 0 0 6 100 0 0 0 117 48
> 255 0 0 0 0 0 2 3 1
>     GRIB_REF_TIME=  1473206400 sec UTC
>     GRIB_SHORT_NAME=30000-ISBL
>     GRIB_UNIT=[%]
>     GRIB_VALID_TIME=  1473228000 sec UTC
>
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev




-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/a436b485/attachment-0001.html>

From jluis at ualg.pt  Wed Sep 14 09:32:50 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 17:32:50 +0100
Subject: [gdal-dev] SQLite driver?
Message-ID: <op.ynsf80qudbaoe8@macmarilu>


Sorry Even that you are bombed with so many questions.

I have (re)build GDAL with sqlite and can confirm with The (Dependency)  
Walker that the sqlite3.dll is a gdal.dll dependency. However,

gdalinfo --formats

...
   Rasterlite -raster- (rws): Rasterlite
   SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
   SAR_CEOS -raster- (rov): CEOS SAR Image
   SDTS -raster- (rov): SDTS Raster
   SENTINEL2 -raster- (rovs): Sentinel 2
   SGI -raster- (rw+): SGI Image File Format 1.0
   SRTMHGT -raster- (rwv): SRTMHGT File Format
   TIL -raster- (rov): EarthWatch .TIL
...

does not show the SQLite driver and indeed a program that I'm building  
that needs to link with GDAL (osmcoastline) crashes when it doesn't find  
that driver.

?

Joaquim

From schwehr at gmail.com  Wed Sep 14 10:08:58 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 14 Sep 2016 10:08:58 -0700
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <op.ynsf80qudbaoe8@macmarilu>
References: <op.ynsf80qudbaoe8@macmarilu>
Message-ID: <CACmBxyvZ5grPWgFBiRMLwZq+VbrA4Wm_O85Bkj5KkF0Z_XVZFg@mail.gmail.com>

ogrinfo --formats | grep -i lite
  SQLite -vector- (rw+v): SQLite / Spatialite

On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:

>
> Sorry Even that you are bombed with so many questions.
>
> I have (re)build GDAL with sqlite and can confirm with The (Dependency)
> Walker that the sqlite3.dll is a gdal.dll dependency. However,
>
> gdalinfo --formats
>
> ...
>   Rasterlite -raster- (rws): Rasterlite
>   SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>   SAR_CEOS -raster- (rov): CEOS SAR Image
>   SDTS -raster- (rov): SDTS Raster
>   SENTINEL2 -raster- (rovs): Sentinel 2
>   SGI -raster- (rw+): SGI Image File Format 1.0
>   SRTMHGT -raster- (rwv): SRTMHGT File Format
>   TIL -raster- (rov): EarthWatch .TIL
> ...
>
> does not show the SQLite driver and indeed a program that I'm building
> that needs to link with GDAL (osmcoastline) crashes when it doesn't find
> that driver.
>
> ?
>
> Joaquim
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev




-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/ec2cc5af/attachment.html>

From jluis at ualg.pt  Wed Sep 14 10:35:46 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 18:35:46 +0100
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <CACmBxyvZ5grPWgFBiRMLwZq+VbrA4Wm_O85Bkj5KkF0Z_XVZFg@mail.gmail.com>
References: <op.ynsf80qudbaoe8@macmarilu>
 <CACmBxyvZ5grPWgFBiRMLwZq+VbrA4Wm_O85Bkj5KkF0Z_XVZFg@mail.gmail.com>
Message-ID: <op.ynsi5wpldbaoe8@macmarilu>

Hmm, several (weird) things.

1. I'm using  GnuWin ports for unix commands. And:
     - this works
           gdalinfo --formats | sort
     - this not (output is empty)
           ogfinfo --formats | sort
    Same thing for 'grep'

2. To check I'm using gisinternals and same thing as my build.
    ogrinfo --formats
    shows no SQLite driver

3. The program I'm trying to build/run crashes at this line
     https://github.com/osmcode/osmcoastline/blob/master/include/gdalcpp.hpp#L132
     (no idea why it crashes) apparently because it doesn't find the SQLite  
driver (driver_name == 'SQLite')


> ogrinfo --formats | grep -i lite
>  SQLite -vector- (rw+v): SQLite / Spatialite
>
> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>>
>> Sorry Even that you are bombed with so many questions.
>>
>> I have (re)build GDAL with sqlite and can confirm with The (Dependency)  
>> Walker that the sqlite3.dll is a gdal.dll dependency. However,
>>
>> gdalinfo --formats
>>
>> ...
>>  Rasterlite -raster- (rws): Rasterlite
>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>>  SDTS -raster- (rov): SDTS Raster
>>  SENTINEL2 -raster- (rovs): Sentinel 2
>>  SGI -raster- (rw+): SGI Image File Format 1.0
>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>>  TIL -raster- (rov): EarthWatch .TIL
>> ...
>>
>> does not show the SQLite driver and indeed a program that I'm building  
>> that needs to link with GDAL (osmcoastline) crashes when it doesn't  
>> find >>that driver.
>>
>> ?
>>
>> Joaquim
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
>
> ----
> http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/3b1b28bb/attachment.html>

From jluis at ualg.pt  Wed Sep 14 10:43:22 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 18:43:22 +0100
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <op.ynsi5wpldbaoe8@macmarilu>
References: <op.ynsf80qudbaoe8@macmarilu>
 <CACmBxyvZ5grPWgFBiRMLwZq+VbrA4Wm_O85Bkj5KkF0Z_XVZFg@mail.gmail.com>
 <op.ynsi5wpldbaoe8@macmarilu>
Message-ID: <op.ynsjikk7dbaoe8@macmarilu>

Sorry, my bad. When I thought I was using gisinternals I was actually  
using my build. Gisinternals does show the SQLite driver.

But one of my points still holds. If the Walker shows me that sqlite3.dll  
is a dependency than why the SQLite driver is not available?


> Hmm, several (weird) things.
>
> 1. I'm using  GnuWin ports for unix commands. And:
>    - this works
>          gdalinfo --formats | sort
>    - this not (output is empty)
>          ogfinfo --formats | sort
>   Same thing for 'grep'
>
> 2. To check I'm using gisinternals and same thing as my build.
>   ogrinfo --formats  shows no SQLite driver
>
> 3. The program I'm trying to build/run crashes at this line
>    https://github.com/osmcode/osmcoastline/blob/master/include/gdalcpp.hpp#L132
>    (no idea why it crashes) apparently because it doesn't find the  
> SQLite driver (driver_name == 'SQLite')
>
>
>> ogrinfo --formats | grep -i lite
>>  SQLite -vector- (rw+v): SQLite / Spatialite
>>
>> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>>>
>>> Sorry Even that you are bombed with so many questions.
>>>
>>> I have (re)build GDAL with sqlite and can confirm with The  
>>> (Dependency) Walker that the sqlite3.dll is a gdal.dll dependency.  
>>> However,
>>>
>>> gdalinfo --formats
>>>
>>> ...
>>>  Rasterlite -raster- (rws): Rasterlite
>>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>>>  SDTS -raster- (rov): SDTS Raster
>>>  SENTINEL2 -raster- (rovs): Sentinel 2
>>>  SGI -raster- (rw+): SGI Image File Format 1.0
>>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>>>  TIL -raster- (rov): EarthWatch .TIL
>>> ...
>>>
>>> does not show the SQLite driver and indeed a program that I'm building  
>>> that needs to link with GDAL (osmcoastline) crashes when it doesn't  
>>> find >>>that driver.
>>>
>>> ?
>>>
>>> Joaquim
>>> _______________________________________________
>>> gdal-dev mailing list
>>> gdal-dev at lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>>
>>
>> ----
>> http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/e46fb23b/attachment.html>

From even.rouault at spatialys.com  Wed Sep 14 10:46:14 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 19:46:14 +0200
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <op.ynsjikk7dbaoe8@macmarilu>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu>
Message-ID: <201609141946.15114.even.rouault@spatialys.com>

Le mercredi 14 septembre 2016 19:43:22, Joaquim Luis a écrit :
> Sorry, my bad. When I thought I was using gisinternals I was actually
> using my build. Gisinternals does show the SQLite driver.
> 
> But one of my points still holds. If the Walker shows me that sqlite3.dll
> is a dependency than why the SQLite driver is not available?

You mentionned that you "(re)build" GDAL with sqlite, so I assume you added it 
after a first build. So I suspect that some files didn't get recompiled. The 
safest way if not already done is to clean and rebuild.

Otherwise, mostly for a quick check, you may just 'touch' 
ogr/ogrsf_frmts/generic/ogrregisterall.cpp but you'll probably miss a few files 
that will benefit from sqlite being now available. So the clean & rebuild path 
is the safest ultimately.

> 
> > Hmm, several (weird) things.
> > 
> > 1. I'm using  GnuWin ports for unix commands. And:
> >    - this works
> >    
> >          gdalinfo --formats | sort
> >    
> >    - this not (output is empty)
> >    
> >          ogfinfo --formats | sort
> >   
> >   Same thing for 'grep'
> > 
> > 2. To check I'm using gisinternals and same thing as my build.
> > 
> >   ogrinfo --formats  shows no SQLite driver
> > 
> > 3. The program I'm trying to build/run crashes at this line
> > 
> >    https://github.com/osmcode/osmcoastline/blob/master/include/gdalcpp.hp
> >    p#L132 (no idea why it crashes) apparently because it doesn't find the
> > 
> > SQLite driver (driver_name == 'SQLite')
> > 
> >> ogrinfo --formats | grep -i lite
> >> 
> >>  SQLite -vector- (rw+v): SQLite / Spatialite
> >> 
> >> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
> >>> Sorry Even that you are bombed with so many questions.
> >>> 
> >>> I have (re)build GDAL with sqlite and can confirm with The
> >>> (Dependency) Walker that the sqlite3.dll is a gdal.dll dependency.
> >>> However,
> >>> 
> >>> gdalinfo --formats
> >>> 
> >>> ...
> >>> 
> >>>  Rasterlite -raster- (rws): Rasterlite
> >>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
> >>>  SAR_CEOS -raster- (rov): CEOS SAR Image
> >>>  SDTS -raster- (rov): SDTS Raster
> >>>  SENTINEL2 -raster- (rovs): Sentinel 2
> >>>  SGI -raster- (rw+): SGI Image File Format 1.0
> >>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
> >>>  TIL -raster- (rov): EarthWatch .TIL
> >>> 
> >>> ...
> >>> 
> >>> does not show the SQLite driver and indeed a program that I'm building
> >>> that needs to link with GDAL (osmcoastline) crashes when it doesn't
> >>> find >>>that driver.
> >>> 
> >>> ?
> >>> 
> >>> Joaquim
> >>> _______________________________________________
> >>> gdal-dev mailing list
> >>> gdal-dev at lists.osgeo.org
> >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> >> 
> >> ----
> >> http://schwehr.org

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jluis at ualg.pt  Wed Sep 14 11:31:16 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 19:31:16 +0100
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <201609141946.15114.even.rouault@spatialys.com>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
Message-ID: <op.ynslqegxdbaoe8@macmarilu>

OK, clean & rebuilt (as I (thought) did before) and I can see the SQLite  
driver now.
However, the osmcoastline still crashes. Unfortunately, it's too damn C++  
for me to debugg.



> Le mercredi 14 septembre 2016 19:43:22, Joaquim Luis a écrit :
>> Sorry, my bad. When I thought I was using gisinternals I was actually
>> using my build. Gisinternals does show the SQLite driver.
>>
>> But one of my points still holds. If the Walker shows me that  
>> sqlite3.dll
>> is a dependency than why the SQLite driver is not available?
>
> You mentionned that you "(re)build" GDAL with sqlite, so I assume you  
> added it
> after a first build. So I suspect that some files didn't get recompiled.  
> The
> safest way if not already done is to clean and rebuild.
>
> Otherwise, mostly for a quick check, you may just 'touch'
> ogr/ogrsf_frmts/generic/ogrregisterall.cpp but you'll probably miss a  
> few files
> that will benefit from sqlite being now available. So the clean &  
> rebuild path
> is the safest ultimately.
>
>>
>> > Hmm, several (weird) things.
>> >
>> > 1. I'm using  GnuWin ports for unix commands. And:
>> >    - this works
>> >
>> >          gdalinfo --formats | sort
>> >
>> >    - this not (output is empty)
>> >
>> >          ogfinfo --formats | sort
>> >
>> >   Same thing for 'grep'
>> >
>> > 2. To check I'm using gisinternals and same thing as my build.
>> >
>> >   ogrinfo --formats  shows no SQLite driver
>> >
>> > 3. The program I'm trying to build/run crashes at this line
>> >
>> >     
>> https://github.com/osmcode/osmcoastline/blob/master/include/gdalcpp.hp
>> >    p#L132 (no idea why it crashes) apparently because it doesn't find  
>> the
>> >
>> > SQLite driver (driver_name == 'SQLite')
>> >
>> >> ogrinfo --formats | grep -i lite
>> >>
>> >>  SQLite -vector- (rw+v): SQLite / Spatialite
>> >>
>> >> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>> >>> Sorry Even that you are bombed with so many questions.
>> >>>
>> >>> I have (re)build GDAL with sqlite and can confirm with The
>> >>> (Dependency) Walker that the sqlite3.dll is a gdal.dll dependency.
>> >>> However,
>> >>>
>> >>> gdalinfo --formats
>> >>>
>> >>> ...
>> >>>
>> >>>  Rasterlite -raster- (rws): Rasterlite
>> >>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>> >>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>> >>>  SDTS -raster- (rov): SDTS Raster
>> >>>  SENTINEL2 -raster- (rovs): Sentinel 2
>> >>>  SGI -raster- (rw+): SGI Image File Format 1.0
>> >>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>> >>>  TIL -raster- (rov): EarthWatch .TIL
>> >>>
>> >>> ...
>> >>>
>> >>> does not show the SQLite driver and indeed a program that I'm  
>> building
>> >>> that needs to link with GDAL (osmcoastline) crashes when it doesn't
>> >>> find >>>that driver.
>> >>>
>> >>> ?
>> >>>
>> >>> Joaquim
>> >>> _______________________________________________
>> >>> gdal-dev mailing list
>> >>> gdal-dev at lists.osgeo.org
>> >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>> >>
>> >> ----
>> >> http://schwehr.org

From even.rouault at spatialys.com  Wed Sep 14 12:04:36 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Sep 2016 21:04:36 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CAEW=KS5oma_JOAjm9kPpP32FEwtnFNv-A82b8SwomkrSDmpe9g@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609141750.17748.even.rouault@spatialys.com>
 <CAEW=KS5oma_JOAjm9kPpP32FEwtnFNv-A82b8SwomkrSDmpe9g@mail.gmail.com>
Message-ID: <201609142104.37411.even.rouault@spatialys.com>

Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
> Yes, it is loading a different python....The path printed by sys.path is
> different to if I open the command window and type:
> 
> python
> 
> >>> import sys
> >>> print(sys.path)
> 
> Gdal and the python bindings were compiled with vs2015 and python 3.5, and
> I can correctly import python in the 3.5 interpreter, yet somehow a
> different python DLL (2.7) is being loaded at runtime. 

Might be related to the default try order in

        const char* const apszPythonSO[] = { "python27.dll",
                                            "python26.dll",
                                            "python34.dll",
                                            "python35.dll",
                                            "python36.dll",
                                            "python33.dll",
                                            "python32.dll" };

First found, first served.

Hum maybe we should try to match the version that issuing python on the 
command line would start. We could potentially look at the PATH to see if 
there's something like "bla:\pythonXX" and try the related .dll... Or more 
costly, but more reliable, try issuing a 'python -c "import sys; 
print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command

That's one of the downside of requiring no dependency at build time.

Anyway you can override the default guess by setting the PYTHONSO config option 
to point to the desired python dll.

By the way I've committed the doc in 
https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected online in a 
few hours.


> I am on a
> 'inherited' PC right now, so final thing to do is to ensure that the
> gdal_translate I am running is the one I compiled and there isn't another
> version lurking somewhere....
> 
> 
> On 14 September 2016 at 16:50, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Le mercredi 14 septembre 2016 17:24:53, jramm a écrit :
> > > Trying to run this using a function relying on scipy.ndimage...
> > > 
> > > When running gdal_translate on the VRT, I get ImportError: No module
> > 
> > named
> > 
> > > scipy.ndimage
> > > This comes after successfully import numpy. scipy.ndimage will happily
> > > import within the python interpreter.
> > 
> > Works for me for both inline or offline functions.
> > 
> > Are you sure GDAL loads the same python lib as the python version used in
> > the
> > python interpreter ? (check the debug traces with CPL_DEBUG=ON)
> > 
> > You can also add at the top of your script
> > 
> > import sys
> > print(sys.path)
> > 
> > and check if the output points to a location where your scipy package can
> > be
> > found.
> > 
> > > Any tips on how to track this down/debug?
> > 
> > > The entire VRT file is as follows:
> > I guess this is not the entire VRT since it refers to an inline
> > definition of
> > the script but <PixelFunctionCode> has empty content.
> > 
> > > <VRTDataset RasterXSize="111090" RasterYSize="259376">
> > > 
> > >   <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
> > > 
> > > 1936",DATUM["OSGB_1936",SPHEROID["Airy
> > > 1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWG
> > 
> > S84[446.448,-12
> > 
> > > 5.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","627
> > 
> > 7"]],PRIMEM["Gr
> > 
> > > eenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532
> > 
> > 925199433,AUTHO
> > 
> > > RITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["
> > 
> > Transverse_Merca
> > 
> > > tor"],PARAMETER["latitude_of_origin",49],PARAMETER["central_
> > 
> > meridian",-2],P
> > 
> > > ARAMETER["scale_factor",0.9996012717],PARAMETER["false_easti
> > 
> > ng",400000],PAR
> > 
> > > AMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["
> > 
> > EPSG","9001"]],A
> > 
> > > XIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG",
> > 
> > "27700"]]</SRS>
> > 
> > > <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
> > > <VRTRasterBand dataType="Float32" band="1"
> > > subClass="VRTDerivedRasterBand">
> > > 
> > >     <SimpleSource>
> > >     
> > >       <SourceFilename
> > > 
> > > relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
> > > 
> > >       <SourceProperties BlockXSize="256" BlockYSize="256"
> > > 
> > > RasterXSize="111090" RasterYSize="259376"/>
> > > 
> > >         <OpenOptions>
> > >         
> > >               <OOI key="NUM_THREADS">4</OOI>
> > >               <OOI key="SPARSE_OK">TRUE</OOI>
> > >         
> > >         </OpenOptions>
> > >     
> > >     </SimpleSource>
> > >     <PixelFunctionType>extract_blobs</PixelFunctionType>
> > >     <PixelFunctionLanguage>Python</PixelFunctionLanguage>
> > >     <PixelFunctionCode>
> > >     
> > >       </PixelFunctionCode>
> > >     
> > >     <BufferRadius>5</BufferRadius>
> > >     <PixelFunctionArguments nodata="0" count_threshold="5"/>
> > >   
> > >   </VRTRasterBand>
> > > 
> > > </VRTDataset>
> > > 
> > > 
> > > 
> > > 
> > > --
> > > View this message in context:
> > > http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-
> > 
> > band-pixel-functi
> > 
> > > ons-written-in-Python-tp5285323p5285882.html Sent from the GDAL - Dev
> > > mailing list archive at Nabble.com.
> > > _______________________________________________
> > > gdal-dev mailing list
> > > gdal-dev at lists.osgeo.org
> > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> > 
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jamessramm at gmail.com  Wed Sep 14 12:20:40 2016
From: jamessramm at gmail.com (James Ramm)
Date: Wed, 14 Sep 2016 20:20:40 +0100
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <201609142104.37411.even.rouault@spatialys.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609141750.17748.even.rouault@spatialys.com>
 <CAEW=KS5oma_JOAjm9kPpP32FEwtnFNv-A82b8SwomkrSDmpe9g@mail.gmail.com>
 <201609142104.37411.even.rouault@spatialys.com>
Message-ID: <CAEW=KS4Nd2qqcLOR0_vsnKpw2pdVFn4sWAJ_sO5_krEnq0xkxw@mail.gmail.com>

Ah, that makes sense. I'll have to try the config option in the morning,
but it sounds like that could be it

On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com> wrote:

> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
> > Yes, it is loading a different python....The path printed by sys.path is
> > different to if I open the command window and type:
> >
> > python
> >
> > >>> import sys
> > >>> print(sys.path)
> >
> > Gdal and the python bindings were compiled with vs2015 and python 3.5,
> and
> > I can correctly import python in the 3.5 interpreter, yet somehow a
> > different python DLL (2.7) is being loaded at runtime.
>
> Might be related to the default try order in
>
>         const char* const apszPythonSO[] = { "python27.dll",
>                                             "python26.dll",
>                                             "python34.dll",
>                                             "python35.dll",
>                                             "python36.dll",
>                                             "python33.dll",
>                                             "python32.dll" };
>
> First found, first served.
>
> Hum maybe we should try to match the version that issuing python on the
> command line would start. We could potentially look at the PATH to see if
> there's something like "bla:\pythonXX" and try the related .dll... Or more
> costly, but more reliable, try issuing a 'python -c "import sys;
> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>
> That's one of the downside of requiring no dependency at build time.
>
> Anyway you can override the default guess by setting the PYTHONSO config
> option
> to point to the desired python dll.
>
> By the way I've committed the doc in
> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected online
> in a
> few hours.
>
>
> > I am on a
> > 'inherited' PC right now, so final thing to do is to ensure that the
> > gdal_translate I am running is the one I compiled and there isn't another
> > version lurking somewhere....
> >
> >
> > On 14 September 2016 at 16:50, Even Rouault <even.rouault at spatialys.com>
> >
> > wrote:
> > > Le mercredi 14 septembre 2016 17:24:53, jramm a écrit :
> > > > Trying to run this using a function relying on scipy.ndimage...
> > > >
> > > > When running gdal_translate on the VRT, I get ImportError: No module
> > >
> > > named
> > >
> > > > scipy.ndimage
> > > > This comes after successfully import numpy. scipy.ndimage will
> happily
> > > > import within the python interpreter.
> > >
> > > Works for me for both inline or offline functions.
> > >
> > > Are you sure GDAL loads the same python lib as the python version used
> in
> > > the
> > > python interpreter ? (check the debug traces with CPL_DEBUG=ON)
> > >
> > > You can also add at the top of your script
> > >
> > > import sys
> > > print(sys.path)
> > >
> > > and check if the output points to a location where your scipy package
> can
> > > be
> > > found.
> > >
> > > > Any tips on how to track this down/debug?
> > >
> > > > The entire VRT file is as follows:
> > > I guess this is not the entire VRT since it refers to an inline
> > > definition of
> > > the script but <PixelFunctionCode> has empty content.
> > >
> > > > <VRTDataset RasterXSize="111090" RasterYSize="259376">
> > > >
> > > >   <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
> > > >
> > > > 1936",DATUM["OSGB_1936",SPHEROID["Airy
> > > > 1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWG
> > >
> > > S84[446.448,-12
> > >
> > > > 5.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","627
> > >
> > > 7"]],PRIMEM["Gr
> > >
> > > > eenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532
> > >
> > > 925199433,AUTHO
> > >
> > > > RITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["
> > >
> > > Transverse_Merca
> > >
> > > > tor"],PARAMETER["latitude_of_origin",49],PARAMETER["central_
> > >
> > > meridian",-2],P
> > >
> > > > ARAMETER["scale_factor",0.9996012717],PARAMETER["false_easti
> > >
> > > ng",400000],PAR
> > >
> > > > AMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["
> > >
> > > EPSG","9001"]],A
> > >
> > > > XIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG",
> > >
> > > "27700"]]</SRS>
> > >
> > > > <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
> > > > <VRTRasterBand dataType="Float32" band="1"
> > > > subClass="VRTDerivedRasterBand">
> > > >
> > > >     <SimpleSource>
> > > >
> > > >       <SourceFilename
> > > >
> > > > relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
> > > >
> > > >       <SourceProperties BlockXSize="256" BlockYSize="256"
> > > >
> > > > RasterXSize="111090" RasterYSize="259376"/>
> > > >
> > > >         <OpenOptions>
> > > >
> > > >               <OOI key="NUM_THREADS">4</OOI>
> > > >               <OOI key="SPARSE_OK">TRUE</OOI>
> > > >
> > > >         </OpenOptions>
> > > >
> > > >     </SimpleSource>
> > > >     <PixelFunctionType>extract_blobs</PixelFunctionType>
> > > >     <PixelFunctionLanguage>Python</PixelFunctionLanguage>
> > > >     <PixelFunctionCode>
> > > >
> > > >       </PixelFunctionCode>
> > > >
> > > >     <BufferRadius>5</BufferRadius>
> > > >     <PixelFunctionArguments nodata="0" count_threshold="5"/>
> > > >
> > > >   </VRTRasterBand>
> > > >
> > > > </VRTDataset>
> > > >
> > > >
> > > >
> > > >
> > > > --
> > > > View this message in context:
> > > > http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-
> > >
> > > band-pixel-functi
> > >
> > > > ons-written-in-Python-tp5285323p5285882.html Sent from the GDAL -
> Dev
> > > > mailing list archive at Nabble.com.
> > > > _______________________________________________
> > > > gdal-dev mailing list
> > > > gdal-dev at lists.osgeo.org
> > > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> > >
> > > --
> > > Spatialys - Geospatial professional services
> > > http://www.spatialys.com
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/679d78d1/attachment.html>

From schwehr at gmail.com  Wed Sep 14 13:02:06 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 14 Sep 2016 13:02:06 -0700
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <op.ynslqegxdbaoe8@macmarilu>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
 <op.ynslqegxdbaoe8@macmarilu>
Message-ID: <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>

A stack trace would give others a chance to possibly spot what the crash is.

On Wed, Sep 14, 2016 at 11:31 AM, Joaquim Luis <jluis at ualg.pt> wrote:

> OK, clean & rebuilt (as I (thought) did before) and I can see the SQLite
> driver now.
> However, the osmcoastline still crashes. Unfortunately, it's too damn C++
> for me to debugg.
>
>
>
>
> Le mercredi 14 septembre 2016 19:43:22, Joaquim Luis a écrit :
>>
>>> Sorry, my bad. When I thought I was using gisinternals I was actually
>>> using my build. Gisinternals does show the SQLite driver.
>>>
>>> But one of my points still holds. If the Walker shows me that sqlite3.dll
>>> is a dependency than why the SQLite driver is not available?
>>>
>>
>> You mentionned that you "(re)build" GDAL with sqlite, so I assume you
>> added it
>> after a first build. So I suspect that some files didn't get recompiled.
>> The
>> safest way if not already done is to clean and rebuild.
>>
>> Otherwise, mostly for a quick check, you may just 'touch'
>> ogr/ogrsf_frmts/generic/ogrregisterall.cpp but you'll probably miss a
>> few files
>> that will benefit from sqlite being now available. So the clean & rebuild
>> path
>> is the safest ultimately.
>>
>>
>>> > Hmm, several (weird) things.
>>> >
>>> > 1. I'm using  GnuWin ports for unix commands. And:
>>> >    - this works
>>> >
>>> >          gdalinfo --formats | sort
>>> >
>>> >    - this not (output is empty)
>>> >
>>> >          ogfinfo --formats | sort
>>> >
>>> >   Same thing for 'grep'
>>> >
>>> > 2. To check I'm using gisinternals and same thing as my build.
>>> >
>>> >   ogrinfo --formats  shows no SQLite driver
>>> >
>>> > 3. The program I'm trying to build/run crashes at this line
>>> >
>>> >    https://github.com/osmcode/osmcoastline/blob/master/include/
>>> gdalcpp.hp
>>> >    p#L132 (no idea why it crashes) apparently because it doesn't find
>>> the
>>> >
>>> > SQLite driver (driver_name == 'SQLite')
>>> >
>>> >> ogrinfo --formats | grep -i lite
>>> >>
>>> >>  SQLite -vector- (rw+v): SQLite / Spatialite
>>> >>
>>> >> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>>> >>> Sorry Even that you are bombed with so many questions.
>>> >>>
>>> >>> I have (re)build GDAL with sqlite and can confirm with The
>>> >>> (Dependency) Walker that the sqlite3.dll is a gdal.dll dependency.
>>> >>> However,
>>> >>>
>>> >>> gdalinfo --formats
>>> >>>
>>> >>> ...
>>> >>>
>>> >>>  Rasterlite -raster- (rws): Rasterlite
>>> >>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>>> >>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>>> >>>  SDTS -raster- (rov): SDTS Raster
>>> >>>  SENTINEL2 -raster- (rovs): Sentinel 2
>>> >>>  SGI -raster- (rw+): SGI Image File Format 1.0
>>> >>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>>> >>>  TIL -raster- (rov): EarthWatch .TIL
>>> >>>
>>> >>> ...
>>> >>>
>>> >>> does not show the SQLite driver and indeed a program that I'm
>>> building
>>> >>> that needs to link with GDAL (osmcoastline) crashes when it doesn't
>>> >>> find >>>that driver.
>>> >>>
>>> >>> ?
>>> >>>
>>> >>> Joaquim
>>> >>> _______________________________________________
>>> >>> gdal-dev mailing list
>>> >>> gdal-dev at lists.osgeo.org
>>> >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>> >>
>>> >> ----
>>> >> http://schwehr.org
>>>
>> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/d2afb0cb/attachment-0001.html>

From jluis at ualg.pt  Wed Sep 14 14:02:59 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 22:02:59 +0100
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
 <op.ynslqegxdbaoe8@macmarilu>
 <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>
Message-ID: <op.ynssq9indbaoe8@macmarilu>

Yes, but (that I know) we don't get long stack traces in VS.

Exception thrown at 0x00007FFF88F87788 in osmcoastline.exe: Microsoft C++  
exception: gdalcpp::gdal_error at memory location 0x000000CD6E33E090.
Unhandled exception at 0x00007FFF88F87788 in osmcoastline.exe: Microsoft  
C++ exception: gdalcpp::gdal_error at memory location 0x000000CD6E33E090.
The program '[37264] osmcoastline.exe' has exited with code 0 (0x0).


I can see why it crashes but why it happens. To start with the code is  
completely mysterious for me

class Driver : private init_library {

gdal_driver_type* m_driver;

public:

Driver(const std::string& driver_name) :
init_library(),
#if GDAL_VERSION_MAJOR >= 2
m_driver(GetGDALDriverManager()->GetDriverByName(driver_name.c_str())) {
#else
m_driver(OGRSFDriverRegistrar::GetRegistrar()->GetDriverByName(driver_name.c_str()))  
{
#endif
if (!m_driver) {
throw gdal_error(std::string("unknown driver: '") + driver_name + "'",  
OGRERR_NONE, driver_name);
}
}

m_driver is defined as a function, which is than tested to be NULL (and it  
is) and a crash follows.


> A stack trace would give others a chance to possibly spot what the crash  
> is.
>
> On Wed, Sep 14, 2016 at 11:31 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>> OK, clean & rebuilt (as I (thought) did before) and I can see the  
>> SQLite driver now.
>> However, the osmcoastline still crashes. Unfortunately, it's too damn  
>> C++ for me to debugg.
>>
>>
>>
>>
>>> Le mercredi 14 septembre 2016 19:43:22, Joaquim Luis a écrit :
>>>> Sorry, my bad. When I thought I was using gisinternals I was actually
>>>> using my build. Gisinternals does show the SQLite driver.
>>>>
>>>> But one of my points still holds. If the Walker shows me that  
>>>> sqlite3.dll
>>>> is a dependency than why the SQLite driver is not available?
>>>
>>> You mentionned that you "(re)build" GDAL with sqlite, so I assume you  
>>> added it
>>> after a first build. So I suspect that some files didn't get  
>>> recompiled. The
>>> safest way if not already done is to clean and rebuild.
>>>
>>> Otherwise, mostly for a quick check, you may just 'touch'
>>> ogr/ogrsf_frmts/generic/ogrregisterall.cpp but you'll probably miss a  
>>> few files
>>> that will benefit from sqlite being now available. So the clean &  
>>> rebuild path
>>> is the safest ultimately.
>>>
>>>>
>>>>> Hmm, several (weird) things.
>>>>>
>>>>> 1. I'm using  GnuWin ports for unix commands. And:
>>>>>    - this works
>>>>>
>>>>>          gdalinfo --formats | sort
>>>>>
>>>>>    - this not (output is empty)
>>>>>
>>>>>          ogfinfo --formats | sort
>>>>>
>>>>>   Same thing for 'grep'
>>>>>
>>>>> 2. To check I'm using gisinternals and same thing as my build.
>>>>>
>>>>>   ogrinfo --formats  shows no SQLite driver
>>>>>
>>>>> 3. The program I'm trying to build/run crashes at this line
>>>>>
>>>>>    https://github.com/osmcode/osmcoastline/blob/master/include/gdalcpp.hp
>>>>>    p#L132 (no idea why it crashes) apparently because it doesn't  
>>>>> find the
>>>>>
>>>>> SQLite driver (driver_name == 'SQLite')
>>>>>
>>>>>> ogrinfo --formats | grep -i lite
>>>>>>
>>>>>>  SQLite -vector- (rw+v): SQLite / Spatialite
>>>>>>
>>>>>> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>>>>>>> Sorry Even that you are bombed with so many questions.
>>>>>>>
>>>>>>> I have (re)build GDAL with sqlite and can confirm with The
>>>>>>> (Dependency) Walker that the sqlite3.dll is a gdal.dll dependency.
>>>>>>> However,
>>>>>>>
>>>>>>> gdalinfo --formats
>>>>>>>
>>>>>>> ...
>>>>>>>
>>>>>>>  Rasterlite -raster- (rws): Rasterlite
>>>>>>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>>>>>>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>>>>>>>  SDTS -raster- (rov): SDTS Raster
>>>>>>>  SENTINEL2 -raster- (rovs): Sentinel 2
>>>>>>>  SGI -raster- (rw+): SGI Image File Format 1.0
>>>>>>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>>>>>>>  TIL -raster- (rov): EarthWatch .TIL
>>>>>>>
>>>>>>> ...
>>>>>>>
>>>>>>> does not show the SQLite driver and indeed a program that I'm  
>>>>>>> building
>>>>>>> that needs to link with GDAL (osmcoastline) crashes when it doesn't
>>>>>>> find >>>that driver.
>>>>>>>
>>>>>>> ?
>>>>>>>
>>>>>>> Joaquim
>>>>>>> _______________________________________________
>>>>>>> gdal-dev mailing list
>>>>>>> gdal-dev at lists.osgeo.org
>>>>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>>>>
>>>>>> ----
>>>>>> http://schwehr.org
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
>
> ----
> http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/24eee472/attachment.html>

From schwehr at gmail.com  Wed Sep 14 14:20:53 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 14 Sep 2016 14:20:53 -0700
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <op.ynssq9indbaoe8@macmarilu>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
 <op.ynslqegxdbaoe8@macmarilu>
 <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>
 <op.ynssq9indbaoe8@macmarilu>
Message-ID: <CACmBxyveiZLQBFw1XRycMSbxQzGMqjpzPYN-C9qO+chNBfoxZA@mail.gmail.com>

I haven't done serious Windows coding since the NT days, but I found this.
Sounds like this will do it and then you can load the dump in visual studio
and get the stack track, yes?

Anyone who actually uses windows + visualstudio want to comment?

-kurt

http://cwspencer.co.uk/blog/2012/10/getting-useful-c-exception-information-from-visual-studio/

Which down at the bottom says:

You can get WER to generate full crash dumps
<http://msdn.microsoft.com/en-us/library/windows/desktop/bb787181(v=vs.85).aspx>
when
your program crashes and you don’t have a debugger attached by creating the
DWORD registry keyHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows
Error Reporting\LocalDumps\DumpType and setting it to 1 (for mini dumps) or
2 (for full dumps). This will create a dump file in
%LOCALAPPDATA%\CrashDumps when your program crashes which you can import
into Visual Studio. This is particularly useful when you are testing on
someone else’s machine where you can’t debug directly.

On Wed, Sep 14, 2016 at 2:02 PM, Joaquim Luis <jluis at ualg.pt> wrote:

> Yes, but (that I know) we don't get long stack traces in VS.
>
> Exception thrown at 0x00007FFF88F87788 in osmcoastline.exe: Microsoft C++
> exception: gdalcpp::gdal_error at memory location 0x000000CD6E33E090.
> Unhandled exception at 0x00007FFF88F87788 in osmcoastline.exe: Microsoft
> C++ exception: gdalcpp::gdal_error at memory location 0x000000CD6E33E090.
> The program '[37264] osmcoastline.exe' has exited with code 0 (0x0).
>
>
> I can see why it crashes but why it happens. To start with the code is
> completely mysterious for me
>
> class Driver : private init_library {
>
> gdal_driver_type* m_driver;
>
> public:
>
> Driver(const std::string& driver_name) :
> init_library(),
> #if GDAL_VERSION_MAJOR >= 2
> m_driver(GetGDALDriverManager()->GetDriverByName(driver_name.c_str())) {
> #else
> m_driver(OGRSFDriverRegistrar::GetRegistrar()->
> GetDriverByName(driver_name.c_str())) {
> #endif
> if (!m_driver) {
> throw gdal_error(std::string("unknown driver: '") + driver_name + "'",
> OGRERR_NONE, driver_name);
> }
> }
>
> m_driver is defined as a function, which is than tested to be NULL (and it
> is) and a crash follows.
>
>
> A stack trace would give others a chance to possibly spot what the crash
> is.
>
> On Wed, Sep 14, 2016 at 11:31 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>
>> OK, clean & rebuilt (as I (thought) did before) and I can see the SQLite
>> driver now.
>> However, the osmcoastline still crashes. Unfortunately, it's too damn C++
>> for me to debugg.
>>
>>
>>
>>
>> Le mercredi 14 septembre 2016 19:43:22, Joaquim Luis a écrit :
>>>
>>>> Sorry, my bad. When I thought I was using gisinternals I was actually
>>>> using my build. Gisinternals does show the SQLite driver.
>>>>
>>>> But one of my points still holds. If the Walker shows me that
>>>> sqlite3.dll
>>>> is a dependency than why the SQLite driver is not available?
>>>>
>>>
>>> You mentionned that you "(re)build" GDAL with sqlite, so I assume you
>>> added it
>>> after a first build. So I suspect that some files didn't get recompiled.
>>> The
>>> safest way if not already done is to clean and rebuild.
>>>
>>> Otherwise, mostly for a quick check, you may just 'touch'
>>> ogr/ogrsf_frmts/generic/ogrregisterall.cpp but you'll probably miss a
>>> few files
>>> that will benefit from sqlite being now available. So the clean &
>>> rebuild path
>>> is the safest ultimately.
>>>
>>>
>>>> > Hmm, several (weird) things.
>>>> >
>>>> > 1. I'm using  GnuWin ports for unix commands. And:
>>>> >    - this works
>>>> >
>>>> >          gdalinfo --formats | sort
>>>> >
>>>> >    - this not (output is empty)
>>>> >
>>>> >          ogfinfo --formats | sort
>>>> >
>>>> >   Same thing for 'grep'
>>>> >
>>>> > 2. To check I'm using gisinternals and same thing as my build.
>>>> >
>>>> >   ogrinfo --formats  shows no SQLite driver
>>>> >
>>>> > 3. The program I'm trying to build/run crashes at this line
>>>> >
>>>> >    https://github.com/osmcode/osmcoastline/blob/master/
>>>> include/gdalcpp.hp
>>>> >    p#L132 (no idea why it crashes) apparently because it doesn't find
>>>> the
>>>> >
>>>> > SQLite driver (driver_name == 'SQLite')
>>>> >
>>>> >> ogrinfo --formats | grep -i lite
>>>> >>
>>>> >>  SQLite -vector- (rw+v): SQLite / Spatialite
>>>> >>
>>>> >> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>>>> >>> Sorry Even that you are bombed with so many questions.
>>>> >>>
>>>> >>> I have (re)build GDAL with sqlite and can confirm with The
>>>> >>> (Dependency) Walker that the sqlite3.dll is a gdal.dll dependency.
>>>> >>> However,
>>>> >>>
>>>> >>> gdalinfo --formats
>>>> >>>
>>>> >>> ...
>>>> >>>
>>>> >>>  Rasterlite -raster- (rws): Rasterlite
>>>> >>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>>>> >>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>>>> >>>  SDTS -raster- (rov): SDTS Raster
>>>> >>>  SENTINEL2 -raster- (rovs): Sentinel 2
>>>> >>>  SGI -raster- (rw+): SGI Image File Format 1.0
>>>> >>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>>>> >>>  TIL -raster- (rov): EarthWatch .TIL
>>>> >>>
>>>> >>> ...
>>>> >>>
>>>> >>> does not show the SQLite driver and indeed a program that I'm
>>>> building
>>>> >>> that needs to link with GDAL (osmcoastline) crashes when it doesn't
>>>> >>> find >>>that driver.
>>>> >>>
>>>> >>> ?
>>>> >>>
>>>> >>> Joaquim
>>>> >>> _______________________________________________
>>>> >>> gdal-dev mailing list
>>>> >>> gdal-dev at lists.osgeo.org
>>>> >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>> >>
>>>> >> ----
>>>> >> http://schwehr.org
>>>>
>>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>
>
>
> --
> --
> http://schwehr.org
>
>
>
>
>


-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/0b85a2b1/attachment-0001.html>

From jluis at ualg.pt  Wed Sep 14 14:55:02 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Wed, 14 Sep 2016 22:55:02 +0100
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <CACmBxyveiZLQBFw1XRycMSbxQzGMqjpzPYN-C9qO+chNBfoxZA@mail.gmail.com>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
 <op.ynslqegxdbaoe8@macmarilu>
 <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>
 <op.ynssq9indbaoe8@macmarilu>
 <CACmBxyveiZLQBFw1XRycMSbxQzGMqjpzPYN-C9qO+chNBfoxZA@mail.gmail.com>
Message-ID: <op.ynsu50ugdbaoe8@macmarilu>

FWIW, my reply with an attached image is waiting for approval.


> I haven't done serious Windows coding since the NT days, but I found  
> this.  Sounds like this will do it and then you can load the dump in  
> visual >studio and get the stack track, yes?
>
> Anyone who actually uses windows + visualstudio want to comment?
>
> -kurt
>
> http://cwspencer.co.uk/blog/2012/10/getting-useful-c-exception-information-from-visual-studio/
>
> Which down at the bottom says:
>
> You can get WER to generate full crash dumps when your program crashes  
> and you don’t have a debugger >attached by creating the DWORD registry  
> keyHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error  
> Reporting>\LocalDumps\DumpType and setting it to 1 (for mini dumps) or 2  
> (for full dumps). This will create a dump file >in  
> %LOCALAPPDATA%\CrashDumps when your program crashes which you can import  
> into Visual Studio. This is >particularly useful when you are testing on  
> someone else’s machine where you can’t debug directly.
>
> On Wed, Sep 14, 2016 at 2:02 PM, Joaquim Luis <jluis at ualg.pt> wrote:
>> Yes, but (that I know) we don't get long stack traces in VS.
>>
>> Exception thrown at 0x00007FFF88F87788 in osmcoastline.exe: Microsoft  
>> C++ exception: gdalcpp::gdal_error at memory location  
>> >>0x000000CD6E33E090.
>> Unhandled exception at 0x00007FFF88F87788 in osmcoastline.exe:  
>> Microsoft C++ exception: gdalcpp::gdal_error at memory location  
>> >>0x000000CD6E33E090.
>> The program '[37264] osmcoastline.exe' has exited with code 0 (0x0).
>>
>> I can see why it crashes but why it happens. To start with the code is  
>> completely mysterious for me
>>
>> class Driver : private init_library {
>>
>> gdal_driver_type* m_driver;
>>
>> public:
>>
>> Driver(const std::string& driver_name) :
>> init_library(),
>> #if GDAL_VERSION_MAJOR >= 2
>> m_driver(GetGDALDriverManager()->GetDriverByName(driver_name.c_str())) {
>> #else
>> m_driver(OGRSFDriverRegistrar::GetRegistrar()->GetDriverByName(driver_name.c_str()))  
>> {
>> #endif
>> if (!m_driver) {
>> throw gdal_error(std::string("unknown driver: '") + driver_name + "'",  
>> OGRERR_NONE, driver_name);
>> }
>> }
>>
>> m_driver is defined as a function, which is than tested to be NULL (and  
>> it is) and a crash follows.
>>
>>
>>> A stack trace would give others a chance to possibly spot what the  
>>> crash is.
>>>
>>> On Wed, Sep 14, 2016 at 11:31 AM, Joaquim Luis <jluis at ualg.pt> wrote:
>>>> OK, clean & rebuilt (as I (thought) did before) and I can see the  
>>>> SQLite driver now.
>>>> However, the osmcoastline still crashes. Unfortunately, it's too damn  
>>>> C++ for me to debugg.
>>>>
>>>>
>>>>
>>>>
>>>>> Le mercredi 14 septembre 2016 19:43:22, Joaquim Luis a écrit :
>>>>>> Sorry, my bad. When I thought I was using gisinternals I was  
>>>>>> actually
>>>>>> using my build. Gisinternals does show the SQLite driver.
>>>>>>
>>>>>> But one of my points still holds. If the Walker shows me that  
>>>>>> sqlite3.dll
>>>>>> is a dependency than why the SQLite driver is not available?
>>>>>
>>>>> You mentionned that you "(re)build" GDAL with sqlite, so I assume  
>>>>> you added it
>>>>> after a first build. So I suspect that some files didn't get  
>>>>> recompiled. The
>>>>> safest way if not already done is to clean and rebuild.
>>>>>
>>>>> Otherwise, mostly for a quick check, you may just 'touch'
>>>>> ogr/ogrsf_frmts/generic/ogrregisterall.cpp but you'll probably miss  
>>>>> a few files
>>>>> that will benefit from sqlite being now available. So the clean &  
>>>>> rebuild path
>>>>> is the safest ultimately.
>>>>>
>>>>>>
>>>>>>> Hmm, several (weird) things.
>>>>>>>
>>>>>>> 1. I'm using  GnuWin ports for unix commands. And:
>>>>>>>    - this works
>>>>>>>
>>>>>>>          gdalinfo --formats | sort
>>>>>>>
>>>>>>>    - this not (output is empty)
>>>>>>>
>>>>>>>          ogfinfo --formats | sort
>>>>>>>
>>>>>>>   Same thing for 'grep'
>>>>>>>
>>>>>>> 2. To check I'm using gisinternals and same thing as my build.
>>>>>>>
>>>>>>>   ogrinfo --formats  shows no SQLite driver
>>>>>>>
>>>>>>> 3. The program I'm trying to build/run crashes at this line
>>>>>>>
>>>>>>>    https://github.com/osmcode/osmcoastline/blob/master/include/gdalcpp.hp
>>>>>>>    p#L132 (no idea why it crashes) apparently because it doesn't  
>>>>>>> find the
>>>>>>>
>>>>>>> SQLite driver (driver_name == 'SQLite')
>>>>>>>
>>>>>>>> ogrinfo --formats | grep -i lite
>>>>>>>>
>>>>>>>>  SQLite -vector- (rw+v): SQLite / Spatialite
>>>>>>>>
>>>>>>>> On Wed, Sep 14, 2016 at 9:32 AM, Joaquim Luis <jluis at ualg.pt>  
>>>>>>>> wrote:
>>>>>>>>> Sorry Even that you are bombed with so many questions.
>>>>>>>>>
>>>>>>>>> I have (re)build GDAL with sqlite and can confirm with The
>>>>>>>>> (Dependency) Walker that the sqlite3.dll is a gdal.dll  
>>>>>>>>> dependency.
>>>>>>>>> However,
>>>>>>>>>
>>>>>>>>> gdalinfo --formats
>>>>>>>>>
>>>>>>>>> ...
>>>>>>>>>
>>>>>>>>>  Rasterlite -raster- (rws): Rasterlite
>>>>>>>>>  SAFE -raster- (rov): Sentinel-1 SAR SAFE Product
>>>>>>>>>  SAR_CEOS -raster- (rov): CEOS SAR Image
>>>>>>>>>  SDTS -raster- (rov): SDTS Raster
>>>>>>>>>  SENTINEL2 -raster- (rovs): Sentinel 2
>>>>>>>>>  SGI -raster- (rw+): SGI Image File Format 1.0
>>>>>>>>>  SRTMHGT -raster- (rwv): SRTMHGT File Format
>>>>>>>>>  TIL -raster- (rov): EarthWatch .TIL
>>>>>>>>>
>>>>>>>>> ...
>>>>>>>>>
>>>>>>>>> does not show the SQLite driver and indeed a program that I'm  
>>>>>>>>> building
>>>>>>>>> that needs to link with GDAL (osmcoastline) crashes when it  
>>>>>>>>> doesn't
>>>>>>>>> find >>>that driver.
>>>>>>>>>
>>>>>>>>> ?
>>>>>>>>>
>>>>>>>>> Joaquim
>>>>>>>>> _______________________________________________
>>>>>>>>> gdal-dev mailing list
>>>>>>>>> gdal-dev at lists.osgeo.org
>>>>>>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>>>>>>
>>>>>>>> ----
>>>>>>>> http://schwehr.org
>>>> _______________________________________________
>>>> gdal-dev mailing list
>>>> gdal-dev at lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>
>>>
>>>
>>> ----
>>> http://schwehr.org
>>
>>
>>
>
>
>
> ----
> http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160914/6d63ba3a/attachment.html>

From jamessramm at gmail.com  Thu Sep 15 01:29:19 2016
From: jamessramm at gmail.com (James Ramm)
Date: Thu, 15 Sep 2016 09:29:19 +0100
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CAEW=KS4Nd2qqcLOR0_vsnKpw2pdVFn4sWAJ_sO5_krEnq0xkxw@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609141750.17748.even.rouault@spatialys.com>
 <CAEW=KS5oma_JOAjm9kPpP32FEwtnFNv-A82b8SwomkrSDmpe9g@mail.gmail.com>
 <201609142104.37411.even.rouault@spatialys.com>
 <CAEW=KS4Nd2qqcLOR0_vsnKpw2pdVFn4sWAJ_sO5_krEnq0xkxw@mail.gmail.com>
Message-ID: <CAEW=KS6M_kjfcMYp=tfAZQMU1C3PNYV=vPJqBw=gj=YWRBeGkQ@mail.gmail.com>

excellent, working setting the PYTHONSO variable. Trying to match the
version of python on the path would be smart, but it is probably 'good
enough' to give PYTHONSO some prominence in the documentation - some kind
of warning on how python is discovered perhaps?

On 14 September 2016 at 20:20, James Ramm <jamessramm at gmail.com> wrote:

> Ah, that makes sense. I'll have to try the config option in the morning,
> but it sounds like that could be it
>
> On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com>
> wrote:
>
>> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
>> > Yes, it is loading a different python....The path printed by sys.path is
>> > different to if I open the command window and type:
>> >
>> > python
>> >
>> > >>> import sys
>> > >>> print(sys.path)
>> >
>> > Gdal and the python bindings were compiled with vs2015 and python 3.5,
>> and
>> > I can correctly import python in the 3.5 interpreter, yet somehow a
>> > different python DLL (2.7) is being loaded at runtime.
>>
>> Might be related to the default try order in
>>
>>         const char* const apszPythonSO[] = { "python27.dll",
>>                                             "python26.dll",
>>                                             "python34.dll",
>>                                             "python35.dll",
>>                                             "python36.dll",
>>                                             "python33.dll",
>>                                             "python32.dll" };
>>
>> First found, first served.
>>
>> Hum maybe we should try to match the version that issuing python on the
>> command line would start. We could potentially look at the PATH to see if
>> there's something like "bla:\pythonXX" and try the related .dll... Or more
>> costly, but more reliable, try issuing a 'python -c "import sys;
>> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>>
>> That's one of the downside of requiring no dependency at build time.
>>
>> Anyway you can override the default guess by setting the PYTHONSO config
>> option
>> to point to the desired python dll.
>>
>> By the way I've committed the doc in
>> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected online
>> in a
>> few hours.
>>
>>
On 14 September 2016 at 20:20, James Ramm <jamessramm at gmail.com> wrote:

> Ah, that makes sense. I'll have to try the config option in the morning,
> but it sounds like that could be it
>
> On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com>
> wrote:
>
>> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
>> > Yes, it is loading a different python....The path printed by sys.path is
>> > different to if I open the command window and type:
>> >
>> > python
>> >
>> > >>> import sys
>> > >>> print(sys.path)
>> >
>> > Gdal and the python bindings were compiled with vs2015 and python 3.5,
>> and
>> > I can correctly import python in the 3.5 interpreter, yet somehow a
>> > different python DLL (2.7) is being loaded at runtime.
>>
>> Might be related to the default try order in
>>
>>         const char* const apszPythonSO[] = { "python27.dll",
>>                                             "python26.dll",
>>                                             "python34.dll",
>>                                             "python35.dll",
>>                                             "python36.dll",
>>                                             "python33.dll",
>>                                             "python32.dll" };
>>
>> First found, first served.
>>
>> Hum maybe we should try to match the version that issuing python on the
>> command line would start. We could potentially look at the PATH to see if
>> there's something like "bla:\pythonXX" and try the related .dll... Or more
>> costly, but more reliable, try issuing a 'python -c "import sys;
>> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>>
>> That's one of the downside of requiring no dependency at build time.
>>
>> Anyway you can override the default guess by setting the PYTHONSO config
>> option
>> to point to the desired python dll.
>>
>> By the way I've committed the doc in
>> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected online
>> in a
>> few hours.
>>
>>
>> > I am on a
>> > 'inherited' PC right now, so final thing to do is to ensure that the
>> > gdal_translate I am running is the one I compiled and there isn't
>> another
>> > version lurking somewhere....
>> >
>> >
>> > On 14 September 2016 at 16:50, Even Rouault <even.rouault at spatialys.com
>> >
>> >
>> > wrote:
>> > > Le mercredi 14 septembre 2016 17:24:53, jramm a écrit :
>> > > > Trying to run this using a function relying on scipy.ndimage...
>> > > >
>> > > > When running gdal_translate on the VRT, I get ImportError: No module
>> > >
>> > > named
>> > >
>> > > > scipy.ndimage
>> > > > This comes after successfully import numpy. scipy.ndimage will
>> happily
>> > > > import within the python interpreter.
>> > >
>> > > Works for me for both inline or offline functions.
>> > >
>> > > Are you sure GDAL loads the same python lib as the python version
>> used in
>> > > the
>> > > python interpreter ? (check the debug traces with CPL_DEBUG=ON)
>> > >
>> > > You can also add at the top of your script
>> > >
>> > > import sys
>> > > print(sys.path)
>> > >
>> > > and check if the output points to a location where your scipy package
>> can
>> > > be
>> > > found.
>> > >
>> > > > Any tips on how to track this down/debug?
>> > >
>> > > > The entire VRT file is as follows:
>> > > I guess this is not the entire VRT since it refers to an inline
>> > > definition of
>> > > the script but <PixelFunctionCode> has empty content.
>> > >
>> > > > <VRTDataset RasterXSize="111090" RasterYSize="259376">
>> > > >
>> > > >   <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
>> > > >
>> > > > 1936",DATUM["OSGB_1936",SPHEROID["Airy
>> > > > 1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWG
>> > >
>> > > S84[446.448,-12
>> > >
>> > > > 5.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","627
>> > >
>> > > 7"]],PRIMEM["Gr
>> > >
>> > > > eenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532
>> > >
>> > > 925199433,AUTHO
>> > >
>> > > > RITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["
>> > >
>> > > Transverse_Merca
>> > >
>> > > > tor"],PARAMETER["latitude_of_origin",49],PARAMETER["central_
>> > >
>> > > meridian",-2],P
>> > >
>> > > > ARAMETER["scale_factor",0.9996012717],PARAMETER["false_easti
>> > >
>> > > ng",400000],PAR
>> > >
>> > > > AMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["
>> > >
>> > > EPSG","9001"]],A
>> > >
>> > > > XIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG",
>> > >
>> > > "27700"]]</SRS>
>> > >
>> > > > <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
>> > > > <VRTRasterBand dataType="Float32" band="1"
>> > > > subClass="VRTDerivedRasterBand">
>> > > >
>> > > >     <SimpleSource>
>> > > >
>> > > >       <SourceFilename
>> > > >
>> > > > relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
>> > > >
>> > > >       <SourceProperties BlockXSize="256" BlockYSize="256"
>> > > >
>> > > > RasterXSize="111090" RasterYSize="259376"/>
>> > > >
>> > > >         <OpenOptions>
>> > > >
>> > > >               <OOI key="NUM_THREADS">4</OOI>
>> > > >               <OOI key="SPARSE_OK">TRUE</OOI>
>> > > >
>> > > >         </OpenOptions>
>> > > >
>> > > >     </SimpleSource>
>> > > >     <PixelFunctionType>extract_blobs</PixelFunctionType>
>> > > >     <PixelFunctionLanguage>Python</PixelFunctionLanguage>
>> > > >     <PixelFunctionCode>
>> > > >
>> > > >       </PixelFunctionCode>
>> > > >
>> > > >     <BufferRadius>5</BufferRadius>
>> > > >     <PixelFunctionArguments nodata="0" count_threshold="5"/>
>> > > >
>> > > >   </VRTRasterBand>
>> > > >
>> > > > </VRTDataset>
>> > > >
>> > > >
>> > > >
>> > > >
>> > > > --
>> > > > View this message in context:
>> > > > http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-
>> > >
>> > > band-pixel-functi
>> > >
>> > > > ons-written-in-Python-tp5285323p5285882.html Sent from the GDAL -
>> Dev
>> > > > mailing list archive at Nabble.com.
>> > > > _______________________________________________
>> > > > gdal-dev mailing list
>> > > > gdal-dev at lists.osgeo.org
>> > > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>> > >
>> > > --
>> > > Spatialys - Geospatial professional services
>> > > http://www.spatialys.com
>>
>> --
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/31021ce0/attachment-0001.html>

From Odd-Ragnar.Lydersen at powel.no  Thu Sep 15 04:20:57 2016
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Thu, 15 Sep 2016 11:20:57 +0000
Subject: [gdal-dev] WFS driver - HTTP 401 authentication error message
Message-ID: <BD69AB4022C5C34DAC908920605A87025A611E72@MAIL.powelasa.powel.com>

Hello, I'm experiencing some warnings in GDAL 2.1 and error messages (HTTP 401) from the server.

In I'm getting some unwanted results.
However I am able to read features from the server, but I wonder why these errors occur, and if I'm not getting all the information I should have gotten if this error did not occur.

I have stepped into CPLXMLNode *CPLParseXMLString( const char *pszString )
Before the HTTP error, *pszString,  is this:

<gml_registry>
    <!-- Finnish National Land Survey cadastral data -->
    <namespace prefix="ktjkiiwfs" uri="http://xml.nls.fi/ktjkiiwfs/2010/02" useGlobalSRSName="true">
        <featureType elementName="KiinteistorajanSijaintitiedot"
                 schemaLocation="http://xml.nls.fi/XML/Schema/sovellus/ktjkii/modules/kiinteistotietojen_kyselypalvelu_WFS/Asiakasdokumentaatio/ktjkiiwfs/2010/02/KiinteistorajanSijaintitiedot.xsd"/>
        <featureType elementName="PalstanTunnuspisteenSijaintitiedot"
                 schemaLocation="http://xml.nls.fi/XML/Schema/sovellus/ktjkii/modules/kiinteistotietojen_kyselypalvelu_WFS/Asiakasdokumentaatio/ktjkiiwfs/2010/02/palstanTunnuspisteenSijaintitiedot.xsd"/>
        <featureType elementName="RekisteriyksikonTietoja"
                 schemaLocation="http://xml.nls.fi/XML/Schema/sovellus/ktjkii/modules/kiinteistotietojen_kyselypalvelu_WFS/Asiakasdokumentaatio/ktjkiiwfs/2010/02/RekisteriyksikonTietoja.xsd"/>
        <featureType elementName="PalstanTietoja"
                 schemaLocation="http://xml.nls.fi/XML/Schema/sovellus/ktjkii/modules/kiinteistotietojen_kyselypalvelu_WFS/Asiakasdokumentaatio/ktjkiiwfs/2010/02/PalstanTietoja.xsd"/>
    </namespace>

...

</gml_registry>

And the next call to the same function I get the error, and *pszString,  is this:

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Draft//EN">
<HTML>
<HEAD>
<TITLE>Error 401--Unauthorized</TITLE>
</HEAD>
<BODY bgcolor="white">
<FONT FACE=Helvetica><BR CLEAR=all>
<TABLE border=0 cellspacing=5><TR><TD><BR CLEAR=all>
<FONT FACE="Helvetica" COLOR="black" SIZE="3"><H2>Error 401--Unauthorized</H2>
</FONT></TD></TR>
</TABLE>
<TABLE border=0 width=100% cellpadding=10><TR><TD VALIGN=top WIDTH=100% BGCOLOR=white><FONT FACE="Courier New"><FONT FACE="Helvetica" SIZE="3"><H3>From RFC 2068 <i>Hypertext Transfer Protocol -- HTTP/1.1</i>:</H3>
</FONT><FONT FACE="Helvetica" SIZE="3"><H4>10.4.2 401 Unauthorized</H4>
</FONT><P><FONT FACE="Courier New">The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.46) containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity MAY include relevant diagnostic information. HTTP access authentication is explained in section 11.</FONT></P>
</FONT></TD></TR>
</TABLE>

</BODY>
</HTML>

Could it be that the authentication parameter is not sendt in the response call to the server in between these two answers?
I can see that there is a call to CPLHTTPResult *CPLHTTPFetch( const char *pszURL, char **papszOptions ) , without any content in **papszOptions.
In other calls I can see that the UserPwd is sendt in the **papszOptions variable.

Odd-Ragnar Lydersen
System Developer

Email: odd-ragnar.lydersen at powel.no<mailto:odd-ragnar.lydersen at powel.no>
www.powel.no<http://www.powel.com/>
[cid:image002.jpg at 01CDD1F7.F470C190]<http://www.powel.no/en>[cid:image004.jpg at 01CDD1F7.F470C190]<https://www.facebook.com/pages/Powel/350917775700>[cid:image006.jpg at 01CDD1F7.F470C190]<http://www.linkedin.com/company/powel-as>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/ba42513e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 1268 bytes
Desc: image001.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/ba42513e/attachment.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image002.jpg
Type: image/jpeg
Size: 870 bytes
Desc: image002.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/ba42513e/attachment-0001.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.jpg
Type: image/jpeg
Size: 909 bytes
Desc: image003.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/ba42513e/attachment-0002.jpg>

From sean at mapbox.com  Thu Sep 15 06:56:23 2016
From: sean at mapbox.com (Sean Gillies)
Date: Thu, 15 Sep 2016 15:56:23 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CAEW=KS6M_kjfcMYp=tfAZQMU1C3PNYV=vPJqBw=gj=YWRBeGkQ@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609141750.17748.even.rouault@spatialys.com>
 <CAEW=KS5oma_JOAjm9kPpP32FEwtnFNv-A82b8SwomkrSDmpe9g@mail.gmail.com>
 <201609142104.37411.even.rouault@spatialys.com>
 <CAEW=KS4Nd2qqcLOR0_vsnKpw2pdVFn4sWAJ_sO5_krEnq0xkxw@mail.gmail.com>
 <CAEW=KS6M_kjfcMYp=tfAZQMU1C3PNYV=vPJqBw=gj=YWRBeGkQ@mail.gmail.com>
Message-ID: <CADPhZXyCATV-+V-M-SKGc+WVNs+EFm7=UP4+y5zrhJiW638AvQ@mail.gmail.com>

Hi Even, James:

I suspect users will be find it very surprising if `which python` and the
python interpreter used by VRT are not the same. Imagine starting python in
an environment created by virtualenv or conda that contains extension
modules like scikit-image, scikit-learn, &c. You import osgeo.gdal, open
your super duper VRT with `gdal.Open()`, and get an error because your
environment's extension modules aren't available in the VRT script. This
could be tough to debug for a beginning to intermediate level Python
programmer.


On Thu, Sep 15, 2016 at 10:29 AM, James Ramm <jamessramm at gmail.com> wrote:

> excellent, working setting the PYTHONSO variable. Trying to match the
> version of python on the path would be smart, but it is probably 'good
> enough' to give PYTHONSO some prominence in the documentation - some kind
> of warning on how python is discovered perhaps?
>
> On 14 September 2016 at 20:20, James Ramm <jamessramm at gmail.com> wrote:
>
>> Ah, that makes sense. I'll have to try the config option in the morning,
>> but it sounds like that could be it
>>
>> On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com>
>> wrote:
>>
>>> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
>>> > Yes, it is loading a different python....The path printed by sys.path
>>> is
>>> > different to if I open the command window and type:
>>> >
>>> > python
>>> >
>>> > >>> import sys
>>> > >>> print(sys.path)
>>> >
>>> > Gdal and the python bindings were compiled with vs2015 and python 3.5,
>>> and
>>> > I can correctly import python in the 3.5 interpreter, yet somehow a
>>> > different python DLL (2.7) is being loaded at runtime.
>>>
>>> Might be related to the default try order in
>>>
>>>         const char* const apszPythonSO[] = { "python27.dll",
>>>                                             "python26.dll",
>>>                                             "python34.dll",
>>>                                             "python35.dll",
>>>                                             "python36.dll",
>>>                                             "python33.dll",
>>>                                             "python32.dll" };
>>>
>>> First found, first served.
>>>
>>> Hum maybe we should try to match the version that issuing python on the
>>> command line would start. We could potentially look at the PATH to see if
>>> there's something like "bla:\pythonXX" and try the related .dll... Or
>>> more
>>> costly, but more reliable, try issuing a 'python -c "import sys;
>>> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>>>
>>> That's one of the downside of requiring no dependency at build time.
>>>
>>> Anyway you can override the default guess by setting the PYTHONSO config
>>> option
>>> to point to the desired python dll.
>>>
>>> By the way I've committed the doc in
>>> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected
>>> online in a
>>> few hours.
>>>
>>>
> On 14 September 2016 at 20:20, James Ramm <jamessramm at gmail.com> wrote:
>
>> Ah, that makes sense. I'll have to try the config option in the morning,
>> but it sounds like that could be it
>>
>> On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com>
>> wrote:
>>
>>> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
>>> > Yes, it is loading a different python....The path printed by sys.path
>>> is
>>> > different to if I open the command window and type:
>>> >
>>> > python
>>> >
>>> > >>> import sys
>>> > >>> print(sys.path)
>>> >
>>> > Gdal and the python bindings were compiled with vs2015 and python 3.5,
>>> and
>>> > I can correctly import python in the 3.5 interpreter, yet somehow a
>>> > different python DLL (2.7) is being loaded at runtime.
>>>
>>> Might be related to the default try order in
>>>
>>>         const char* const apszPythonSO[] = { "python27.dll",
>>>                                             "python26.dll",
>>>                                             "python34.dll",
>>>                                             "python35.dll",
>>>                                             "python36.dll",
>>>                                             "python33.dll",
>>>                                             "python32.dll" };
>>>
>>> First found, first served.
>>>
>>> Hum maybe we should try to match the version that issuing python on the
>>> command line would start. We could potentially look at the PATH to see if
>>> there's something like "bla:\pythonXX" and try the related .dll... Or
>>> more
>>> costly, but more reliable, try issuing a 'python -c "import sys;
>>> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>>>
>>> That's one of the downside of requiring no dependency at build time.
>>>
>>> Anyway you can override the default guess by setting the PYTHONSO config
>>> option
>>> to point to the desired python dll.
>>>
>>> By the way I've committed the doc in
>>> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected
>>> online in a
>>> few hours.
>>>
>>>
>>> > I am on a
>>> > 'inherited' PC right now, so final thing to do is to ensure that the
>>> > gdal_translate I am running is the one I compiled and there isn't
>>> another
>>> > version lurking somewhere....
>>> >
>>> >
>>> > On 14 September 2016 at 16:50, Even Rouault <
>>> even.rouault at spatialys.com>
>>> >
>>> > wrote:
>>> > > Le mercredi 14 septembre 2016 17:24:53, jramm a écrit :
>>> > > > Trying to run this using a function relying on scipy.ndimage...
>>> > > >
>>> > > > When running gdal_translate on the VRT, I get ImportError: No
>>> module
>>> > >
>>> > > named
>>> > >
>>> > > > scipy.ndimage
>>> > > > This comes after successfully import numpy. scipy.ndimage will
>>> happily
>>> > > > import within the python interpreter.
>>> > >
>>> > > Works for me for both inline or offline functions.
>>> > >
>>> > > Are you sure GDAL loads the same python lib as the python version
>>> used in
>>> > > the
>>> > > python interpreter ? (check the debug traces with CPL_DEBUG=ON)
>>> > >
>>> > > You can also add at the top of your script
>>> > >
>>> > > import sys
>>> > > print(sys.path)
>>> > >
>>> > > and check if the output points to a location where your scipy
>>> package can
>>> > > be
>>> > > found.
>>> > >
>>> > > > Any tips on how to track this down/debug?
>>> > >
>>> > > > The entire VRT file is as follows:
>>> > > I guess this is not the entire VRT since it refers to an inline
>>> > > definition of
>>> > > the script but <PixelFunctionCode> has empty content.
>>> > >
>>> > > > <VRTDataset RasterXSize="111090" RasterYSize="259376">
>>> > > >
>>> > > >   <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
>>> > > >
>>> > > > 1936",DATUM["OSGB_1936",SPHEROID["Airy
>>> > > > 1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWG
>>> > >
>>> > > S84[446.448,-12
>>> > >
>>> > > > 5.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","627
>>> > >
>>> > > 7"]],PRIMEM["Gr
>>> > >
>>> > > > eenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532
>>> > >
>>> > > 925199433,AUTHO
>>> > >
>>> > > > RITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["
>>> > >
>>> > > Transverse_Merca
>>> > >
>>> > > > tor"],PARAMETER["latitude_of_origin",49],PARAMETER["central_
>>> > >
>>> > > meridian",-2],P
>>> > >
>>> > > > ARAMETER["scale_factor",0.9996012717],PARAMETER["false_easti
>>> > >
>>> > > ng",400000],PAR
>>> > >
>>> > > > AMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["
>>> > >
>>> > > EPSG","9001"]],A
>>> > >
>>> > > > XIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG",
>>> > >
>>> > > "27700"]]</SRS>
>>> > >
>>> > > > <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
>>> > > > <VRTRasterBand dataType="Float32" band="1"
>>> > > > subClass="VRTDerivedRasterBand">
>>> > > >
>>> > > >     <SimpleSource>
>>> > > >
>>> > > >       <SourceFilename
>>> > > >
>>> > > > relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
>>> > > >
>>> > > >       <SourceProperties BlockXSize="256" BlockYSize="256"
>>> > > >
>>> > > > RasterXSize="111090" RasterYSize="259376"/>
>>> > > >
>>> > > >         <OpenOptions>
>>> > > >
>>> > > >               <OOI key="NUM_THREADS">4</OOI>
>>> > > >               <OOI key="SPARSE_OK">TRUE</OOI>
>>> > > >
>>> > > >         </OpenOptions>
>>> > > >
>>> > > >     </SimpleSource>
>>> > > >     <PixelFunctionType>extract_blobs</PixelFunctionType>
>>> > > >     <PixelFunctionLanguage>Python</PixelFunctionLanguage>
>>> > > >     <PixelFunctionCode>
>>> > > >
>>> > > >       </PixelFunctionCode>
>>> > > >
>>> > > >     <BufferRadius>5</BufferRadius>
>>> > > >     <PixelFunctionArguments nodata="0" count_threshold="5"/>
>>> > > >
>>> > > >   </VRTRasterBand>
>>> > > >
>>> > > > </VRTDataset>
>>> > > >
>>> > > >
>>> > > >
>>> > > >
>>> > > > --
>>> > > > View this message in context:
>>> > > > http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-
>>> > >
>>> > > band-pixel-functi
>>> > >
>>> > > > ons-written-in-Python-tp5285323p5285882.html Sent from the GDAL -
>>> Dev
>>> > > > mailing list archive at Nabble.com.
>>> > > > _______________________________________________
>>> > > > gdal-dev mailing list
>>> > > > gdal-dev at lists.osgeo.org
>>> > > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>> > >
>>> > > --
>>> > > Spatialys - Geospatial professional services
>>> > > http://www.spatialys.com
>>>
>>> --
>>> Spatialys - Geospatial professional services
>>> http://www.spatialys.com
>>>
>>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/1c4ee305/attachment-0001.html>

From even.rouault at spatialys.com  Thu Sep 15 07:13:12 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 15 Sep 2016 16:13:12 +0200
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CADPhZXyCATV-+V-M-SKGc+WVNs+EFm7=UP4+y5zrhJiW638AvQ@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <CAEW=KS6M_kjfcMYp=tfAZQMU1C3PNYV=vPJqBw=gj=YWRBeGkQ@mail.gmail.com>
 <CADPhZXyCATV-+V-M-SKGc+WVNs+EFm7=UP4+y5zrhJiW638AvQ@mail.gmail.com>
Message-ID: <201609151613.12703.even.rouault@spatialys.com>

Sean,

> I suspect users will be find it very surprising if `which python` and the
> python interpreter used by VRT are not the same

Yes, we should probably make some effort to use the same python version as the 
one that comes as default given the PATH. I've just opened 
https://trac.osgeo.org/gdal/ticket/6652 regarding this.

> . Imagine starting python in
> an environment created by virtualenv or conda that contains extension
> modules like scikit-image, scikit-learn, &c. You import osgeo.gdal,

or rasterio ;-)

> open
> your super duper VRT with `gdal.Open()`, and get an error because your
> environment's extension modules aren't available in the VRT script. This
> could be tough to debug for a beginning to intermediate level Python
> programmer.

In the situation you describe here, things will work as expected. External 
"libpythonXX.so" or the one specified by PYTHONSO are only tried *after* 
checking if the process has already the Python symbols loaded.

Quoting
http://gdal.org/gdal_vrttut.html#gdal_vrttut_derived_python :

"When GDAL will need to run Python code, it will first determine if the Python 
interpreter is loaded in the current process (which is the case if the program 
is a Python interpreter itself, or if another program, e.g. QGIS, has already 
loaded the CPython library). Otherwise it will look if the PYTHONSO 
configuration option is defined. [...] If the PYTHONSO configuration option is 
not defined, then a predefined list of shared objects will be tried [...]"

This order is strictly needed and was not what I implemented first. My first 
attempt honoured PYTHONSO first, but then if you did things like 
"PYTHONSO=libpython3.1.so python2.7 read_my_vrt.py", this crashed due to 
conflicting symbols being imported.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jamessramm at gmail.com  Thu Sep 15 08:46:37 2016
From: jamessramm at gmail.com (James Ramm)
Date: Thu, 15 Sep 2016 16:46:37 +0100
Subject: [gdal-dev] VRT derived band pixel functions written in Python
In-Reply-To: <CADPhZXyCATV-+V-M-SKGc+WVNs+EFm7=UP4+y5zrhJiW638AvQ@mail.gmail.com>
References: <201609121431.43953.even.rouault@spatialys.com>
 <201609141750.17748.even.rouault@spatialys.com>
 <CAEW=KS5oma_JOAjm9kPpP32FEwtnFNv-A82b8SwomkrSDmpe9g@mail.gmail.com>
 <201609142104.37411.even.rouault@spatialys.com>
 <CAEW=KS4Nd2qqcLOR0_vsnKpw2pdVFn4sWAJ_sO5_krEnq0xkxw@mail.gmail.com>
 <CAEW=KS6M_kjfcMYp=tfAZQMU1C3PNYV=vPJqBw=gj=YWRBeGkQ@mail.gmail.com>
 <CADPhZXyCATV-+V-M-SKGc+WVNs+EFm7=UP4+y5zrhJiW638AvQ@mail.gmail.com>
Message-ID: <CAEW=KS44faTC+Nz-SgYng6k3ovaKFut=YJxeGqZZt6LKW54+aQ@mail.gmail.com>

I agree...could be slightly inelegant to figure out what version of python
is used though...A system call to `where python` on windows would return
the interpreter on the path, and you could replace the '.exe' with '.dll'
(this is assuming python dll is always alongside the exe, but i think this
is the case on all windows distributions), or Evens' suggest by calling
python.
I cant think of an (easy) way to do it without a system call though.

On 15 September 2016 at 14:56, Sean Gillies <sean at mapbox.com> wrote:

> Hi Even, James:
>
> I suspect users will be find it very surprising if `which python` and the
> python interpreter used by VRT are not the same. Imagine starting python in
> an environment created by virtualenv or conda that contains extension
> modules like scikit-image, scikit-learn, &c. You import osgeo.gdal, open
> your super duper VRT with `gdal.Open()`, and get an error because your
> environment's extension modules aren't available in the VRT script. This
> could be tough to debug for a beginning to intermediate level Python
> programmer.
>
>
> On Thu, Sep 15, 2016 at 10:29 AM, James Ramm <jamessramm at gmail.com> wrote:
>
>> excellent, working setting the PYTHONSO variable. Trying to match the
>> version of python on the path would be smart, but it is probably 'good
>> enough' to give PYTHONSO some prominence in the documentation - some kind
>> of warning on how python is discovered perhaps?
>>
>> On 14 September 2016 at 20:20, James Ramm <jamessramm at gmail.com> wrote:
>>
>>> Ah, that makes sense. I'll have to try the config option in the morning,
>>> but it sounds like that could be it
>>>
>>> On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com>
>>> wrote:
>>>
>>>> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
>>>> > Yes, it is loading a different python....The path printed by sys.path
>>>> is
>>>> > different to if I open the command window and type:
>>>> >
>>>> > python
>>>> >
>>>> > >>> import sys
>>>> > >>> print(sys.path)
>>>> >
>>>> > Gdal and the python bindings were compiled with vs2015 and python
>>>> 3.5, and
>>>> > I can correctly import python in the 3.5 interpreter, yet somehow a
>>>> > different python DLL (2.7) is being loaded at runtime.
>>>>
>>>> Might be related to the default try order in
>>>>
>>>>         const char* const apszPythonSO[] = { "python27.dll",
>>>>                                             "python26.dll",
>>>>                                             "python34.dll",
>>>>                                             "python35.dll",
>>>>                                             "python36.dll",
>>>>                                             "python33.dll",
>>>>                                             "python32.dll" };
>>>>
>>>> First found, first served.
>>>>
>>>> Hum maybe we should try to match the version that issuing python on the
>>>> command line would start. We could potentially look at the PATH to see
>>>> if
>>>> there's something like "bla:\pythonXX" and try the related .dll... Or
>>>> more
>>>> costly, but more reliable, try issuing a 'python -c "import sys;
>>>> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>>>>
>>>> That's one of the downside of requiring no dependency at build time.
>>>>
>>>> Anyway you can override the default guess by setting the PYTHONSO
>>>> config option
>>>> to point to the desired python dll.
>>>>
>>>> By the way I've committed the doc in
>>>> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected
>>>> online in a
>>>> few hours.
>>>>
>>>>
>> On 14 September 2016 at 20:20, James Ramm <jamessramm at gmail.com> wrote:
>>
>>> Ah, that makes sense. I'll have to try the config option in the morning,
>>> but it sounds like that could be it
>>>
>>> On 14 Sep 2016 8:06 p.m., "Even Rouault" <even.rouault at spatialys.com>
>>> wrote:
>>>
>>>> Le mercredi 14 septembre 2016 20:50:04, James Ramm a écrit :
>>>> > Yes, it is loading a different python....The path printed by sys.path
>>>> is
>>>> > different to if I open the command window and type:
>>>> >
>>>> > python
>>>> >
>>>> > >>> import sys
>>>> > >>> print(sys.path)
>>>> >
>>>> > Gdal and the python bindings were compiled with vs2015 and python
>>>> 3.5, and
>>>> > I can correctly import python in the 3.5 interpreter, yet somehow a
>>>> > different python DLL (2.7) is being loaded at runtime.
>>>>
>>>> Might be related to the default try order in
>>>>
>>>>         const char* const apszPythonSO[] = { "python27.dll",
>>>>                                             "python26.dll",
>>>>                                             "python34.dll",
>>>>                                             "python35.dll",
>>>>                                             "python36.dll",
>>>>                                             "python33.dll",
>>>>                                             "python32.dll" };
>>>>
>>>> First found, first served.
>>>>
>>>> Hum maybe we should try to match the version that issuing python on the
>>>> command line would start. We could potentially look at the PATH to see
>>>> if
>>>> there's something like "bla:\pythonXX" and try the related .dll... Or
>>>> more
>>>> costly, but more reliable, try issuing a 'python -c "import sys;
>>>> print(str(sys.version_info[0]) + str(sys.version_info[1]))"' command
>>>>
>>>> That's one of the downside of requiring no dependency at build time.
>>>>
>>>> Anyway you can override the default guess by setting the PYTHONSO
>>>> config option
>>>> to point to the desired python dll.
>>>>
>>>> By the way I've committed the doc in
>>>> https://trac.osgeo.org/gdal/changeset/35441 . Should be reflected
>>>> online in a
>>>> few hours.
>>>>
>>>>
>>>> > I am on a
>>>> > 'inherited' PC right now, so final thing to do is to ensure that the
>>>> > gdal_translate I am running is the one I compiled and there isn't
>>>> another
>>>> > version lurking somewhere....
>>>> >
>>>> >
>>>> > On 14 September 2016 at 16:50, Even Rouault <
>>>> even.rouault at spatialys.com>
>>>> >
>>>> > wrote:
>>>> > > Le mercredi 14 septembre 2016 17:24:53, jramm a écrit :
>>>> > > > Trying to run this using a function relying on scipy.ndimage...
>>>> > > >
>>>> > > > When running gdal_translate on the VRT, I get ImportError: No
>>>> module
>>>> > >
>>>> > > named
>>>> > >
>>>> > > > scipy.ndimage
>>>> > > > This comes after successfully import numpy. scipy.ndimage will
>>>> happily
>>>> > > > import within the python interpreter.
>>>> > >
>>>> > > Works for me for both inline or offline functions.
>>>> > >
>>>> > > Are you sure GDAL loads the same python lib as the python version
>>>> used in
>>>> > > the
>>>> > > python interpreter ? (check the debug traces with CPL_DEBUG=ON)
>>>> > >
>>>> > > You can also add at the top of your script
>>>> > >
>>>> > > import sys
>>>> > > print(sys.path)
>>>> > >
>>>> > > and check if the output points to a location where your scipy
>>>> package can
>>>> > > be
>>>> > > found.
>>>> > >
>>>> > > > Any tips on how to track this down/debug?
>>>> > >
>>>> > > > The entire VRT file is as follows:
>>>> > > I guess this is not the entire VRT since it refers to an inline
>>>> > > definition of
>>>> > > the script but <PixelFunctionCode> has empty content.
>>>> > >
>>>> > > > <VRTDataset RasterXSize="111090" RasterYSize="259376">
>>>> > > >
>>>> > > >   <SRS>PROJCS["OSGB 1936 / British National Grid",GEOGCS["OSGB
>>>> > > >
>>>> > > > 1936",DATUM["OSGB_1936",SPHEROID["Airy
>>>> > > > 1830",6377563.396,299.3249646,AUTHORITY["EPSG","7001"]],TOWG
>>>> > >
>>>> > > S84[446.448,-12
>>>> > >
>>>> > > > 5.157,542.06,0.15,0.247,0.842,-20.489],AUTHORITY["EPSG","627
>>>> > >
>>>> > > 7"]],PRIMEM["Gr
>>>> > >
>>>> > > > eenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532
>>>> > >
>>>> > > 925199433,AUTHO
>>>> > >
>>>> > > > RITY["EPSG","9122"]],AUTHORITY["EPSG","4277"]],PROJECTION["
>>>> > >
>>>> > > Transverse_Merca
>>>> > >
>>>> > > > tor"],PARAMETER["latitude_of_origin",49],PARAMETER["central_
>>>> > >
>>>> > > meridian",-2],P
>>>> > >
>>>> > > > ARAMETER["scale_factor",0.9996012717],PARAMETER["false_easti
>>>> > >
>>>> > > ng",400000],PAR
>>>> > >
>>>> > > > AMETER["false_northing",-100000],UNIT["metre",1,AUTHORITY["
>>>> > >
>>>> > > EPSG","9001"]],A
>>>> > >
>>>> > > > XIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG",
>>>> > >
>>>> > > "27700"]]</SRS>
>>>> > >
>>>> > > > <GeoTransform>100180.0,5.0,0.0,1215730.0,0.0,-5.0</GeoTransform>
>>>> > > > <VRTRasterBand dataType="Float32" band="1"
>>>> > > > subClass="VRTDerivedRasterBand">
>>>> > > >
>>>> > > >     <SimpleSource>
>>>> > > >
>>>> > > >       <SourceFilename
>>>> > > >
>>>> > > > relativeToVrt="0">F:\tif_data\large_sparse.tif</SourceFilename>
>>>> > > >
>>>> > > >       <SourceProperties BlockXSize="256" BlockYSize="256"
>>>> > > >
>>>> > > > RasterXSize="111090" RasterYSize="259376"/>
>>>> > > >
>>>> > > >         <OpenOptions>
>>>> > > >
>>>> > > >               <OOI key="NUM_THREADS">4</OOI>
>>>> > > >               <OOI key="SPARSE_OK">TRUE</OOI>
>>>> > > >
>>>> > > >         </OpenOptions>
>>>> > > >
>>>> > > >     </SimpleSource>
>>>> > > >     <PixelFunctionType>extract_blobs</PixelFunctionType>
>>>> > > >     <PixelFunctionLanguage>Python</PixelFunctionLanguage>
>>>> > > >     <PixelFunctionCode>
>>>> > > >
>>>> > > >       </PixelFunctionCode>
>>>> > > >
>>>> > > >     <BufferRadius>5</BufferRadius>
>>>> > > >     <PixelFunctionArguments nodata="0" count_threshold="5"/>
>>>> > > >
>>>> > > >   </VRTRasterBand>
>>>> > > >
>>>> > > > </VRTDataset>
>>>> > > >
>>>> > > >
>>>> > > >
>>>> > > >
>>>> > > > --
>>>> > > > View this message in context:
>>>> > > > http://osgeo-org.1560.x6.nabble.com/gdal-dev-VRT-derived-
>>>> > >
>>>> > > band-pixel-functi
>>>> > >
>>>> > > > ons-written-in-Python-tp5285323p5285882.html Sent from the GDAL
>>>> - Dev
>>>> > > > mailing list archive at Nabble.com.
>>>> > > > _______________________________________________
>>>> > > > gdal-dev mailing list
>>>> > > > gdal-dev at lists.osgeo.org
>>>> > > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>> > >
>>>> > > --
>>>> > > Spatialys - Geospatial professional services
>>>> > > http://www.spatialys.com
>>>>
>>>> --
>>>> Spatialys - Geospatial professional services
>>>> http://www.spatialys.com
>>>>
>>>
>>
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>
>
>
> --
> Sean Gillies
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160915/b7f9bf2a/attachment-0001.html>

From jmckenna at gatewaygeomatics.com  Fri Sep 16 05:23:31 2016
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Fri, 16 Sep 2016 09:23:31 -0300
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <op.ynsu50ugdbaoe8@macmarilu>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
 <op.ynslqegxdbaoe8@macmarilu>
 <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>
 <op.ynssq9indbaoe8@macmarilu>
 <CACmBxyveiZLQBFw1XRycMSbxQzGMqjpzPYN-C9qO+chNBfoxZA@mail.gmail.com>
 <op.ynsu50ugdbaoe8@macmarilu>
Message-ID: <26ef215a-1e85-03dc-5b1b-14784708caed@gatewaygeomatics.com>

On 2016-09-14 6:55 PM, Joaquim Luis wrote:
> FWIW, my reply with an attached image is waiting for approval.
>


Joaquim, I checked in the mailman backend and I don't see a message 
being held.  But for sure always always when using mailing lists never 
try attaching things, for example if you need to include an image just 
use an external service like http://pasteboard.co/ and include the url 
to that image, in your response.

-jeff



-- 
Jeff McKenna
MapServer Consulting and Training Services
http://www.gatewaygeomatics.com/






From jluis at ualg.pt  Fri Sep 16 08:28:36 2016
From: jluis at ualg.pt (Joaquim Luis)
Date: Fri, 16 Sep 2016 16:28:36 +0100
Subject: [gdal-dev] SQLite driver?
In-Reply-To: <26ef215a-1e85-03dc-5b1b-14784708caed@gatewaygeomatics.com>
References: <op.ynsf80qudbaoe8@macmarilu> <op.ynsi5wpldbaoe8@macmarilu>
 <op.ynsjikk7dbaoe8@macmarilu> <201609141946.15114.even.rouault@spatialys.com>
 <op.ynslqegxdbaoe8@macmarilu>
 <CACmBxysszy--xpocCktfu7Xicc8yKg9_CB9mpmW4_-L1uhZTzg@mail.gmail.com>
 <op.ynssq9indbaoe8@macmarilu>
 <CACmBxyveiZLQBFw1XRycMSbxQzGMqjpzPYN-C9qO+chNBfoxZA@mail.gmail.com>
 <op.ynsu50ugdbaoe8@macmarilu>
 <26ef215a-1e85-03dc-5b1b-14784708caed@gatewaygeomatics.com>
Message-ID: <op.ynv2lyo4dbaoe8@macmarilu>

Yes, it had a small image attached.
But never mind, I ended up finding that the crash resulted from the fact  
that some other gdal.dll without sqlite driver managed to get in the way.
The bad new was that, once this solved, I got another crash latter but  
there is nothing in it that I can relate to gdal, so issue is closed here.
Thanks to people that tried to help.

Joaquim

> On 2016-09-14 6:55 PM, Joaquim Luis wrote:
>> FWIW, my reply with an attached image is waiting for approval.
>>
>
>
> Joaquim, I checked in the mailman backend and I don't see a message  
> being held.  But for sure always always when using mailing lists never  
> try attaching things, for example if you need to include an image just  
> use an external service like http://pasteboard.co/ and include the url  
> to that image, in your response.
>
> -jeff
>
>

From even.rouault at spatialys.com  Fri Sep 16 10:12:08 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 16 Sep 2016 19:12:08 +0200
Subject: [gdal-dev] Feasibility of expanding VRT schema to allow users
	to specify X/Y dimension for HDF data?
In-Reply-To: <CADeM3-zDM9c4YrE9wp4egH-r6_4NEhypKC3xL7FmMgTA+rp4QQ@mail.gmail.com>
References: <CADeM3-y3BMW_bZYw-Te8b7=ctSvcVm+fpy6LeQzOs09=9r++Gg@mail.gmail.com>
 <27766100.ccqjImSxoJ@even-n550jk>
 <CADeM3-zDM9c4YrE9wp4egH-r6_4NEhypKC3xL7FmMgTA+rp4QQ@mail.gmail.com>
Message-ID: <201609161912.08629.even.rouault@spatialys.com>

Joe,

> I'm making some progress in utilizing OpenOptions to modify HDF drivers.
> 
> For automated testing of the new HDF drivers, should I use
> gdal.OpenEx() like below in gor2vrt.py?
> 
> src_ds = gdal.OpenEx( infile, gdal.OF_VECTOR, open_options = openoptions )

That's fine. Except you'd rather specify gdal.OF_RASTER for HDF.

> 
> Or does gdal.Open() also support open_options argument?

gdal.Open() has been kept to its historical API. Use gdal.OpenEx() for 
specifying open options.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From hellik at web.de  Fri Sep 16 13:52:15 2016
From: hellik at web.de (Helmut Kudrnovsky)
Date: Fri, 16 Sep 2016 13:52:15 -0700 (PDT)
Subject: [gdal-dev] ERROR 6: No translation for Lambert_Conformal_Conic to
 PROJ.4 format is known.
Message-ID: <1474059135001-5286399.post@n6.nabble.com>

hi,

I have vector dataset [1] in EPSG:31254.

then I do ogr2ogr -s_srs EPSG:31254 -t_srs EPSG:31287 ....

if I do testepsg EPSG:31287, I get following +proj4 string:

PROJ.4 rendering of [EPSG:31287] = +proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5
+lon_0=13.33333333333333 +x_0=400000 +y_0=400000 +ellps=bessel
+towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs

when I do: testepsg of the ogr2ogr'ed shapefile prj file:

testepsg Gesamtgewaessernetz_v11_Tirol_epsg31287.prj

ERROR 6: No translation for Lambert_Conformal_Conic to PROJ.4 format is
known.
PROJ.4 rendering of [Gesamtgewaessernetz_v11_Tirol_epsg31287.prj] =

is this normal? any idea?

[1] https://www.tirol.gv.at/data/datenkatalog/umwelt/gewaessernetz/



-----
best regards
Helmut
--
View this message in context: http://osgeo-org.1560.x6.nabble.com/ERROR-6-No-translation-for-Lambert-Conformal-Conic-to-PROJ-4-format-is-known-tp5286399.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From andrew.bell.ia at gmail.com  Fri Sep 16 13:57:13 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 16 Sep 2016 15:57:13 -0500
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
Message-ID: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>

Hi,

My code for creating a Tiff raster looks something like this:

int nBands = 5;
dataset->Create(filename, width, height, nBands, ...);

for (int i = 1; i <= nBands; ++i)
{
    GDALRasterBand *band = dataset->GetRasterBand(i);
    band->SetDescription(someString);
    band->WriteBlock(someData);
}

It appears that only the description to band 1 is written (it's the only
one reported by gdalinfo).  A little debugging leads me to believe that
what's happening is that WriteBlock() invokes Crystalize() ->
WriteMetadata(), which takes care of setting the band description.  But
once Crystalize() is called, it sets a flag so as to be a NOOP in future
calls.  I'm not using streaming.

I'm trying to understand if this behavior is by design, a limitation that I
can't find in the documentation or a bug.

Any pointers appreciated.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160916/afb0684d/attachment.html>

From even.rouault at spatialys.com  Fri Sep 16 14:03:26 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 16 Sep 2016 23:03:26 +0200
Subject: [gdal-dev] ERROR 6: No translation for Lambert_Conformal_Conic
	to PROJ.4 format is known.
In-Reply-To: <1474059135001-5286399.post@n6.nabble.com>
References: <1474059135001-5286399.post@n6.nabble.com>
Message-ID: <201609162303.27138.even.rouault@spatialys.com>

Helmut,

> when I do: testepsg of the ogr2ogr'ed shapefile prj file:
> 
> testepsg Gesamtgewaessernetz_v11_Tirol_epsg31287.prj
> 
> ERROR 6: No translation for Lambert_Conformal_Conic to PROJ.4 format is
> known.
> PROJ.4 rendering of [Gesamtgewaessernetz_v11_Tirol_epsg31287.prj] =
> 
> is this normal? 

Yes. testepsg foo.prj expects a .prj file conforming to OGC WKT, whereas a .prj 
file generated by the Shapefile driver will follow ESRI WKT.

testepsg (or gdalsrsinfo) ESRI::Gesamtgewaessernetz_v11_Tirol_epsg31287.prj 
will report

PROJ.4 : '+proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5 +lon_0=13.33333333333333 
+x_0=400000 +y_0=400000 +ellps=bessel +units=m +no_defs '

OGC WKT :
PROJCS["MGI_Austria_Lambert",
    GEOGCS["GCS_MGI",
        DATUM["Militar_Geographische_Institute",
            SPHEROID["Bessel_1841",6377397.155,299.1528128]],
        PRIMEM["Greenwich",0],
        UNIT["Degree",0.017453292519943295]],
    PROJECTION["Lambert_Conformal_Conic_2SP"],
    PARAMETER["standard_parallel_1",49],
    PARAMETER["standard_parallel_2",46],
    PARAMETER["latitude_of_origin",47.5],
    PARAMETER["central_meridian",13.33333333333333],
    PARAMETER["false_easting",400000],
    PARAMETER["false_northing",400000],
    UNIT["Meter",1]]

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Sep 16 14:11:07 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 16 Sep 2016 23:11:07 +0200
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
In-Reply-To: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
References: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
Message-ID: <201609162311.07778.even.rouault@spatialys.com>

Le vendredi 16 septembre 2016 22:57:13, Andrew Bell a écrit :
> Hi,
> 
> My code for creating a Tiff raster looks something like this:
> 
> int nBands = 5;
> dataset->Create(filename, width, height, nBands, ...);
> 
> for (int i = 1; i <= nBands; ++i)
> {
>     GDALRasterBand *band = dataset->GetRasterBand(i);
>     band->SetDescription(someString);
>     band->WriteBlock(someData);
> }
> 
> It appears that only the description to band 1 is written (it's the only
> one reported by gdalinfo).  A little debugging leads me to believe that
> what's happening is that WriteBlock() invokes Crystalize() ->
> WriteMetadata(), which takes care of setting the band description.  But
> once Crystalize() is called, it sets a flag so as to be a NOOP in future
> calls.  I'm not using streaming.
> 
> I'm trying to understand if this behavior is by design, a limitation that I
> can't find in the documentation or a bug.

It's a limitation due to how libtiff works mostly and/or how we use it (but 
mostly how libtiff works, and a bit how the TIFF format itself makes it hard). 
Basically for GTiff, you need to do all operations that affect metadata, in a 
broad meaning, ie georeferencing, description, offsets, color table, TIFF & 
GDAL metadata, etc... before writing any imagery.  If we allowed to change 
metadata after crzystalization, this would require rewriting the whole set of 
TIFF tags at the end of file each time their serialized form increase.

So rewrite your loop into 2: one to set all descriptions, and another one to 
write blocks.

Other formats may have similar limitations, so it is generally safe to proceed 
this way in general.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From hellik at web.de  Fri Sep 16 14:21:57 2016
From: hellik at web.de (Helmut Kudrnovsky)
Date: Fri, 16 Sep 2016 14:21:57 -0700 (PDT)
Subject: [gdal-dev] ERROR 6: No translation for Lambert_Conformal_Conic
 to PROJ.4 format is known.
In-Reply-To: <201609162303.27138.even.rouault@spatialys.com>
References: <1474059135001-5286399.post@n6.nabble.com>
 <201609162303.27138.even.rouault@spatialys.com>
Message-ID: <1474060917646-5286405.post@n6.nabble.com>

Hi Even 


Even Rouault-2 wrote
> Helmut,
> 
>> when I do: testepsg of the ogr2ogr'ed shapefile prj file:
>> 
>> testepsg Gesamtgewaessernetz_v11_Tirol_epsg31287.prj
>> 
>> ERROR 6: No translation for Lambert_Conformal_Conic to PROJ.4 format is
>> known.
>> PROJ.4 rendering of [Gesamtgewaessernetz_v11_Tirol_epsg31287.prj] =
>> 
>> is this normal? 
> 
> Yes. testepsg foo.prj expects a .prj file conforming to OGC WKT, whereas a
> .prj 
> file generated by the Shapefile driver will follow ESRI WKT.
> 
> testepsg (or gdalsrsinfo)
> ESRI::Gesamtgewaessernetz_v11_Tirol_epsg31287.prj 
> will report
> 
> PROJ.4 : '+proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5
> +lon_0=13.33333333333333 
> +x_0=400000 +y_0=400000 +ellps=bessel +units=m +no_defs '
> 
> OGC WKT :
> PROJCS["MGI_Austria_Lambert",
>     GEOGCS["GCS_MGI",
>         DATUM["Militar_Geographische_Institute",
>             SPHEROID["Bessel_1841",6377397.155,299.1528128]],
>         PRIMEM["Greenwich",0],
>         UNIT["Degree",0.017453292519943295]],
>     PROJECTION["Lambert_Conformal_Conic_2SP"],
>     PARAMETER["standard_parallel_1",49],
>     PARAMETER["standard_parallel_2",46],
>     PARAMETER["latitude_of_origin",47.5],
>     PARAMETER["central_meridian",13.33333333333333],
>     PARAMETER["false_easting",400000],
>     PARAMETER["false_northing",400000],
>     UNIT["Meter",1]]
> 
> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list

> gdal-dev at .osgeo

> http://lists.osgeo.org/mailman/listinfo/gdal-dev

Thanks for the  testepsg (or gdalsrsinfo) ESRI::... hint! 




-----
best regards
Helmut
--
View this message in context: http://osgeo-org.1560.x6.nabble.com/ERROR-6-No-translation-for-Lambert-Conformal-Conic-to-PROJ-4-format-is-known-tp5286399p5286405.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From hyoklee at hdfgroup.org  Fri Sep 16 09:50:53 2016
From: hyoklee at hdfgroup.org (H. Joe Lee)
Date: Fri, 16 Sep 2016 11:50:53 -0500
Subject: [gdal-dev] Feasibility of expanding VRT schema to allow users
 to specify X/Y dimension for HDF data?
In-Reply-To: <27766100.ccqjImSxoJ@even-n550jk>
References: <CADeM3-y3BMW_bZYw-Te8b7=ctSvcVm+fpy6LeQzOs09=9r++Gg@mail.gmail.com>
 <2519356.THynjfpB8O@even-n550jk>
 <CA+YzLBeZxKMR-p-iprrNW2oDEtLsBRAteefq1kxkXup+Cufnig@mail.gmail.com>
 <27766100.ccqjImSxoJ@even-n550jk>
Message-ID: <CADeM3-zDM9c4YrE9wp4egH-r6_4NEhypKC3xL7FmMgTA+rp4QQ@mail.gmail.com>

Hi, Even!

I'm making some progress in utilizing OpenOptions to modify HDF drivers.

For automated testing of the new HDF drivers, should I use
gdal.OpenEx() like below in gor2vrt.py?

src_ds = gdal.OpenEx( infile, gdal.OF_VECTOR, open_options = openoptions )

Or does gdal.Open() also support open_options argument?


--
HDF:Antifragile Solution for Elastic Bigdata Analytics


On Fri, Aug 5, 2016 at 2:59 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> Frank,
>
> From what I understand from Joe's needs, it looks like simple transposing of a
> 2D raster wouldn't be enough. Here we would need to "transpose" pixels
> scattered through different subdatasets due to the Nd > 2 dimensionality of the
> original dataset, which would be impractical to express at the VRT level, and
> likely inefficient.
>
> Something I've thought about would be to make Nd > 2 rasters native objects at
> the GDAL level, but this would have likely deep implications on the code base
> and should be considered carefully, and would be of interest for a limited set
> of drivers (netCDF, HDF4, HDF5, Rasdaman).
>
> Even
>
>> Brian / Even,
>>
>> Certainly it is desirable for the HDF (and perhaps other super
>> flexible formats like netcdf) to support an open option to select
>> alternative axes.  But the ability to transpose a dataset could also
>> be quite valuable in the VRT driver to "fix" any input transposed
>> dataset.
>>
>> I'm also not entirely certain why one couldn't supply an appopriately
>> transposed geotransform to accomplish something similar.  This could
>> be done without any code changes in the existing VRT format.
>>
>> Best regards,
>> Frank
>>
>> On Thu, Aug 4, 2016 at 3:32 PM, Even Rouault <even.rouault at spatialys.com>
> wrote:
>> > On Thursday 04 August 2016 16:31:25 H. Joe Lee wrote:
>> >> Hi,
>> >>
>> >>   My name is Joe Lee and I'm very interested in improving GDAL's
>> >>
>> >> capability to access NASA HDF4/HDF5 data so that users can work with
>> >> HDF easily through GDAL. For example, my goal is to allow users to
>> >> translate any HDF data into GeoTIFF via gdal_translate.
>> >>
>> >>   I've worked with diverse NASA HDF products and provided solution for
>> >>
>> >> visualizing data correctly through Python/MATLAB/IDL/NCL [1] and I
>> >> know that many products, other than HDF-EOS, may not work well with
>> >> GDAL because HDF is flexible and NASA data producers do not
>> >> necessarily follow the conventions that GDAL uses.
>> >>
>> >>   By default, GDAL HDF4/HDF5 driver uses the following convention for
>> >>
>> >> unknown products.
>> >>
>> >>     For HDF4 (frmts/hdf4/hdf4imagedataset.cpp):
>> >>
>> >>     // Search for the starting "X" and "Y" in the names or take
>> >>     // the last two dimensions as X and Y sizes
>> >>     iXDim = nDimCount - 1;
>> >>     iYDim = nDimCount - 2;
>> >>
>> >>   For HDF5 (frmts/hdf5/hdf5imagedataset.cpp):
>> >>     int     GetYIndex() const { return IsComplexCSKL1A() ? 0 : ndims - 2;
>> >>     }
>> >>     int     GetXIndex() const { return IsComplexCSKL1A() ? 1 : ndims - 1;
>> >>     }
>> >>
>> >>  The above code works well as long as Unknown HDF product follows the
>> >>
>> >> above convention. However, in reality, HDF data can have an arbitrary
>> >>
>> >> order in terms of Band, X and Y dimension like this:
>> >>   dset4D[XDim=360][YDim=180][Band1=2][Band2=3]
>> >>   dimindex:    0                      1            2             3
>> >>
>> >>   Since ndims=4, ndims-2 becomes 2 and ndims-1=3. In such case, GDAL
>> >>
>> >> generates 360x180 bands of 2x3 images, instead of the desired 2x3
>> >> bands of 360x180 images.
>> >>
>> >>   Thus, I'm wondering if GDAL can expand VRT schema so that VRT allows
>> >>
>> >> users to specify the correct dimension index because specifying
>> >> dimension order for each different NASA product in [1]  is
>> >> impractical. For example, I'd like suggest a new tag like
>> >>
>> >> "SourceDimension" like below:
>> >>   <VRTRasterBand dataType="UInt16" band="1">
>> >>   <SimpleSource>
>> >>
>> >>     <SourceFilename
>> >>
>> >> relativeToVRT="0">HDF4_SDS:UNKNOWN:"DATA_WITH_4D_DATASET.hdf":7</SourceFi
>> >> len ame> <SourceDimension RasterXDim="0" RasterYDim="1" />
>> >>
>> >>     <SourceBand>1</SourceBand>
>> >>     <SourceProperties RasterXSize="360" RasterYSize="180"
>> >>
>> >> DataType="UInt16" BlockXSize="360" BlockYSize="180" />
>> >>
>> >>    ...
>> >>
>> >>   </SimpleSource>
>> >>
>> >> </VRTRasterBand>
>> >>
>> >>   Once user specifies correct dimensions by editing VRT, it can be
>> >>
>> >> used by GDAL HDF4/HDF5 drivers and the HDF drivers read the data
>> >> correctly for GDAL's image buffer.
>> >>
>> >>   Do you think it's right and feasible approach to solve wrong X/Y
>> >>
>> >> dimension order problem? Or do you have any other existing solution
>> >> that can mitigate this problem in GDAL? The GEE project team has
>> >> experimented the idea by creating another separate XML file [2] but I
>> >> think it's time to sync with GDAL development team and come up with
>> >> the most elegant solution. In my opinion, VRT looks best and I wish
>> >> GDAL development team can give me some feedback on this idea.
>> >
>> > Joe,
>> >
>> > I would rather suggest to add open options to the drivers and pass them
>> > with the exiting VRT OpenOptions element, rather than adding a new
>> > element in the VRT that would be specific of a few drivers
>> >
>> >  <SimpleSource>
>> >
>> >     <SourceFilename>
>> >
>> > relativeToVRT="0">HDF4_SDS:UNKNOWN:"DATA_WITH_4D_DATASET.hdf":7</SourceFil
>> > ename>>
>> >    <OpenOptions>
>> >
>> >       <OOI key="RASTERXDIM">0</OOI>
>> >       <OOI key="RASTERYDIM">1</OOI>
>> >
>> >    </OpenOptions>
>> >
>> >     <SourceBand>1</SourceBand>
>> >     <SourceProperties RasterXSize="360" RasterYSize="180"
>> >     DataType="UInt16"
>> >
>> > BlockXSize="360" BlockYSize="180" />
>> >
>> >    ...
>> >
>> >   </SimpleSource>
>> >
>> > Which is equivalent to:
>> >
>> > gdalinfo HDF4_SDS:UNKNOWN:"DATA_WITH_4D_DATASET.hdf":7 -oo RASTERXDIM=0
>> > -oo
>> > RASTERYDIM=0
>> >
>> >
>> > Even
>> >
>> > --
>> > Spatialys - Geospatial professional services
>> > http://www.spatialys.com
>> > _______________________________________________
>> > gdal-dev mailing list
>> > gdal-dev at lists.osgeo.org
>> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

From even.rouault at spatialys.com  Sat Sep 17 12:52:12 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 17 Sep 2016 21:52:12 +0200
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
In-Reply-To: <201609162311.07778.even.rouault@spatialys.com>
References: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
 <201609162311.07778.even.rouault@spatialys.com>
Message-ID: <201609172152.12471.even.rouault@spatialys.com>

Le vendredi 16 septembre 2016 23:11:07, Even Rouault a écrit :
> Le vendredi 16 septembre 2016 22:57:13, Andrew Bell a écrit :
> > Hi,
> > 
> > My code for creating a Tiff raster looks something like this:
> > 
> > int nBands = 5;
> > dataset->Create(filename, width, height, nBands, ...);
> > 
> > for (int i = 1; i <= nBands; ++i)
> > {
> > 
> >     GDALRasterBand *band = dataset->GetRasterBand(i);
> >     band->SetDescription(someString);
> >     band->WriteBlock(someData);
> > 
> > }
> > 
> > It appears that only the description to band 1 is written (it's the only
> > one reported by gdalinfo).  A little debugging leads me to believe that
> > what's happening is that WriteBlock() invokes Crystalize() ->
> > WriteMetadata(), which takes care of setting the band description.  But
> > once Crystalize() is called, it sets a flag so as to be a NOOP in future
> > calls.  I'm not using streaming.
> > 
> > I'm trying to understand if this behavior is by design, a limitation that
> > I can't find in the documentation or a bug.
> 
> It's a limitation due to how libtiff works mostly and/or how we use it (but
> mostly how libtiff works, and a bit how the TIFF format itself makes it
> hard). Basically for GTiff, you need to do all operations that affect
> metadata, in a broad meaning, ie georeferencing, description, offsets,
> color table, TIFF & GDAL metadata, etc... before writing any imagery.  If
> we allowed to change metadata after crzystalization, this would require
> rewriting the whole set of TIFF tags at the end of file each time their
> serialized form increase.
> 
> So rewrite your loop into 2: one to set all descriptions, and another one
> to write blocks.
> 
> Other formats may have similar limitations, so it is generally safe to
> proceed this way in general.

Actually the above is partly true & wrong. It is indeed discouraged to change 
metadata after having started writting imagery, but in the case of the band 
description, you can still do it. As I said this will cause the TIFF directory 
to be rewritten, so a bit of storage loss, but nevertheless the descriptions 
are then correctly retrieved.

I used the following Python test script

{{{
from osgeo import gdal
gdal.SetCacheMax(0) # to force Fill() to commit to file immediatly
ds = gdal.GetDriverByName('GTiff').Create('test.tif', 1000, 1000, 5)
for i in range(5):
    ds.GetRasterBand(i+1).SetDescription('foo%d' % i)
    ds.GetRasterBand(i+1).Fill(100)
}}}

Works on latest state of trunk , 2.1 and 2.0 branches


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From hellik at web.de  Sat Sep 17 13:34:35 2016
From: hellik at web.de (Helmut Kudrnovsky)
Date: Sat, 17 Sep 2016 13:34:35 -0700 (PDT)
Subject: [gdal-dev] kmz (KMLSUPEROVERLAY) back to a georeferenced raster
Message-ID: <1474144475736-5286480.post@n6.nabble.com>

hi,

I have a bunch of of kmz with kmlsuperoverlay (i.e. inside the zipped file a
kml file (geo)referencing jpg's).

is there an easy way back from such a kmz to a georeferenced raster (e.g.
geotiff) ?



-----
best regards
Helmut
--
View this message in context: http://osgeo-org.1560.x6.nabble.com/kmz-KMLSUPEROVERLAY-back-to-a-georeferenced-raster-tp5286480.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Sat Sep 17 13:41:27 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 17 Sep 2016 22:41:27 +0200
Subject: [gdal-dev] kmz (KMLSUPEROVERLAY) back to a georeferenced raster
In-Reply-To: <1474144475736-5286480.post@n6.nabble.com>
References: <1474144475736-5286480.post@n6.nabble.com>
Message-ID: <201609172241.28006.even.rouault@spatialys.com>

Le samedi 17 septembre 2016 22:34:35, Helmut Kudrnovsky a écrit :
> hi,
> 
> I have a bunch of of kmz with kmlsuperoverlay (i.e. inside the zipped file
> a kml file (geo)referencing jpg's).
> 
> is there an easy way back from such a kmz to a georeferenced raster (e.g.
> geotiff) ?

gdalinfo / gdal_translate should be able to run on a kmz file, although I 
wouldn't exclude there might be some formulations  of kml/kmz superoverlay 
that the driver might not handle.

gdal_translate your.kmz out.tif


> 
> 
> 
> -----
> best regards
> Helmut
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/kmz-KMLSUPEROVERLAY-back-to-a-georefer
> enced-raster-tp5286480.html Sent from the GDAL - Dev mailing list archive
> at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From hellik at web.de  Sat Sep 17 13:49:24 2016
From: hellik at web.de (Helmut Kudrnovsky)
Date: Sat, 17 Sep 2016 13:49:24 -0700 (PDT)
Subject: [gdal-dev] kmz (KMLSUPEROVERLAY) back to a georeferenced raster
In-Reply-To: <201609172241.28006.even.rouault@spatialys.com>
References: <1474144475736-5286480.post@n6.nabble.com>
 <201609172241.28006.even.rouault@spatialys.com>
Message-ID: <1474145364814-5286482.post@n6.nabble.com>

>gdalinfo / gdal_translate should be able to run on a kmz file,

D:\temp\tq>ogrinfo 6955.kmz
INFO: Open of `6955.kmz'
      using driver `LIBKML' successful.
1: 6955

ogrinfo -al -so 6955.kmz
INFO: Open of `6955.kmz'
      using driver `LIBKML' successful.

Layer name: 6955
Geometry: Unknown (any)
Feature Count: 84
Extent: (14.828852, 48.997210) - (15.004865, 49.102734)
Layer SRS WKT:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,
        AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.0174532925199433,
        AUTHORITY["EPSG","9122"]],
    AUTHORITY["EPSG","4326"]]
Name: String (0.0)
description: String (0.0)
timestamp: DateTime (0.0)
begin: DateTime (0.0)
end: DateTime (0.0)
altitudeMode: String (0.0)
tessellate: Integer (0.0)
extrude: Integer (0.0)
visibility: Integer (0.0)
drawOrder: Integer (0.0)
icon: String (0.0)

>although I
>wouldn't exclude there might be some formulations  of kml/kmz superoverlay
>that the driver might not handle. 

gdalinfo 6955.kmz
ERROR 4: `6955.kmz' not recognized as a supported file format.

gdalinfo failed - unable to open '6955.kmz'.
-----
gdal_translate 6955.kmz out.tif
ERROR 4: `6955.kmz' not recognized as a supported file format.

it seems it may be such kind of formulations  of kml/kmz superoverlay



-----
best regards
Helmut
--
View this message in context: http://osgeo-org.1560.x6.nabble.com/kmz-KMLSUPEROVERLAY-back-to-a-georeferenced-raster-tp5286480p5286482.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From sean at mapbox.com  Sun Sep 18 02:02:20 2016
From: sean at mapbox.com (Sean Gillies)
Date: Sun, 18 Sep 2016 11:02:20 +0200
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
In-Reply-To: <201609172152.12471.even.rouault@spatialys.com>
References: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
 <201609162311.07778.even.rouault@spatialys.com>
 <201609172152.12471.even.rouault@spatialys.com>
Message-ID: <CADPhZXys=o196QgR5yUaa_v2Q697qzc4MK5ZZXuf9Yg5nk+rbg@mail.gmail.com>

Hi Andrew, Even,

On Sat, Sep 17, 2016 at 9:52 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le vendredi 16 septembre 2016 23:11:07, Even Rouault a écrit :
> > Le vendredi 16 septembre 2016 22:57:13, Andrew Bell a écrit :
> > > Hi,
> > >
> > > My code for creating a Tiff raster looks something like this:
> > >
> > > int nBands = 5;
> > > dataset->Create(filename, width, height, nBands, ...);
> > >
> > > for (int i = 1; i <= nBands; ++i)
> > > {
> > >
> > >     GDALRasterBand *band = dataset->GetRasterBand(i);
> > >     band->SetDescription(someString);
> > >     band->WriteBlock(someData);
> > >
> > > }
> > >
> > > It appears that only the description to band 1 is written (it's the
> only
> > > one reported by gdalinfo).  A little debugging leads me to believe that
> > > what's happening is that WriteBlock() invokes Crystalize() ->
> > > WriteMetadata(), which takes care of setting the band description.  But
> > > once Crystalize() is called, it sets a flag so as to be a NOOP in
> future
> > > calls.  I'm not using streaming.
> > >
> > > I'm trying to understand if this behavior is by design, a limitation
> that
> > > I can't find in the documentation or a bug.
> >
> > It's a limitation due to how libtiff works mostly and/or how we use it
> (but
> > mostly how libtiff works, and a bit how the TIFF format itself makes it
> > hard). Basically for GTiff, you need to do all operations that affect
> > metadata, in a broad meaning, ie georeferencing, description, offsets,
> > color table, TIFF & GDAL metadata, etc... before writing any imagery.  If
> > we allowed to change metadata after crzystalization, this would require
> > rewriting the whole set of TIFF tags at the end of file each time their
> > serialized form increase.
> >
> > So rewrite your loop into 2: one to set all descriptions, and another one
> > to write blocks.
> >
> > Other formats may have similar limitations, so it is generally safe to
> > proceed this way in general.
>
> Actually the above is partly true & wrong. It is indeed discouraged to
> change
> metadata after having started writting imagery, but in the case of the band
> description, you can still do it. As I said this will cause the TIFF
> directory
> to be rewritten, so a bit of storage loss, but nevertheless the
> descriptions
> are then correctly retrieved.
>
> I used the following Python test script
>
> {{{
> from osgeo import gdal
> gdal.SetCacheMax(0) # to force Fill() to commit to file immediatly
> ds = gdal.GetDriverByName('GTiff').Create('test.tif', 1000, 1000, 5)
> for i in range(5):
>     ds.GetRasterBand(i+1).SetDescription('foo%d' % i)
>     ds.GetRasterBand(i+1).Fill(100)
> }}}
>
> Works on latest state of trunk , 2.1 and 2.0 branches
>

I am so grateful you asked this question, Andrew.

Even, two follow up questions, one concrete, one more abstract. Is
"crystalized" a state of all raster datasets, no matter the driver, and is
there a method of determining whether the dataset is crystalized? Could
this situation be made less complicated or be made more safe for developers
by splitting the existing update access mode into update-metadata and
update-imagery access modes?

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160918/bf074322/attachment.html>

From even.rouault at spatialys.com  Sun Sep 18 03:49:08 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 18 Sep 2016 12:49:08 +0200
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
In-Reply-To: <CADPhZXys=o196QgR5yUaa_v2Q697qzc4MK5ZZXuf9Yg5nk+rbg@mail.gmail.com>
References: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
 <201609172152.12471.even.rouault@spatialys.com>
 <CADPhZXys=o196QgR5yUaa_v2Q697qzc4MK5ZZXuf9Yg5nk+rbg@mail.gmail.com>
Message-ID: <201609181249.08267.even.rouault@spatialys.com>

Le dimanche 18 septembre 2016 11:02:20, Sean Gillies a écrit :
> Hi Andrew, Even,
> 
> On Sat, Sep 17, 2016 at 9:52 PM, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Le vendredi 16 septembre 2016 23:11:07, Even Rouault a écrit :
> > > Le vendredi 16 septembre 2016 22:57:13, Andrew Bell a écrit :
> > > > Hi,
> > > > 
> > > > My code for creating a Tiff raster looks something like this:
> > > > 
> > > > int nBands = 5;
> > > > dataset->Create(filename, width, height, nBands, ...);
> > > > 
> > > > for (int i = 1; i <= nBands; ++i)
> > > > {
> > > > 
> > > >     GDALRasterBand *band = dataset->GetRasterBand(i);
> > > >     band->SetDescription(someString);
> > > >     band->WriteBlock(someData);
> > > > 
> > > > }
> > > > 
> > > > It appears that only the description to band 1 is written (it's the
> > 
> > only
> > 
> > > > one reported by gdalinfo).  A little debugging leads me to believe
> > > > that what's happening is that WriteBlock() invokes Crystalize() ->
> > > > WriteMetadata(), which takes care of setting the band description. 
> > > > But once Crystalize() is called, it sets a flag so as to be a NOOP
> > > > in
> > 
> > future
> > 
> > > > calls.  I'm not using streaming.
> > > > 
> > > > I'm trying to understand if this behavior is by design, a limitation
> > 
> > that
> > 
> > > > I can't find in the documentation or a bug.
> > > 
> > > It's a limitation due to how libtiff works mostly and/or how we use it
> > 
> > (but
> > 
> > > mostly how libtiff works, and a bit how the TIFF format itself makes it
> > > hard). Basically for GTiff, you need to do all operations that affect
> > > metadata, in a broad meaning, ie georeferencing, description, offsets,
> > > color table, TIFF & GDAL metadata, etc... before writing any imagery. 
> > > If we allowed to change metadata after crzystalization, this would
> > > require rewriting the whole set of TIFF tags at the end of file each
> > > time their serialized form increase.
> > > 
> > > So rewrite your loop into 2: one to set all descriptions, and another
> > > one to write blocks.
> > > 
> > > Other formats may have similar limitations, so it is generally safe to
> > > proceed this way in general.
> > 
> > Actually the above is partly true & wrong. It is indeed discouraged to
> > change
> > metadata after having started writting imagery, but in the case of the
> > band description, you can still do it. As I said this will cause the
> > TIFF directory
> > to be rewritten, so a bit of storage loss, but nevertheless the
> > descriptions
> > are then correctly retrieved.
> > 
> > I used the following Python test script
> > 
> > {{{
> > from osgeo import gdal
> > gdal.SetCacheMax(0) # to force Fill() to commit to file immediatly
> > ds = gdal.GetDriverByName('GTiff').Create('test.tif', 1000, 1000, 5)
> > 
> > for i in range(5):
> >     ds.GetRasterBand(i+1).SetDescription('foo%d' % i)
> >     ds.GetRasterBand(i+1).Fill(100)
> > 
> > }}}
> > 
> > Works on latest state of trunk , 2.1 and 2.0 branches
> 
> I am so grateful you asked this question, Andrew.

UPDATE: Andrew, after digging, I believe you have hit 
https://trac.osgeo.org/gdal/ticket/6592 whose fix hasn't yet reached any 
released version.

> 
> Even, two follow up questions, one concrete, one more abstract. Is
> "crystalized" a state of all raster datasets, no matter the driver,

No. First it is only relevant to drivers that have Create capabilities (I mean 
contrary to the ones that support CreateCopy() only). And  some of them do not 
have restrictions. For example, in the case of drivers that use a dedicated 
file for imagery and a (text) header for metadata, you can use the API without 
any particular constraints since all the metadata updates are stored in the 
state variables of the dataset and flushed to to the header file at dataset 
closing.

In the case of TIFF, you can (bugs aside) update metadata after imagery, with 
the inconvenient of the TIFF tags being rewritten at the end of the file. In 
fact TIFF cryztalisation could (probably?) be avoided if we were OK for the 
TIFF tags to be always written at the end of file, which would make the file not 
compatible of streaming for readers (the seek to end of file could be 
particularly costly if you do a gdalinfo on a huge TIFF in a zip). This 
concept of cryztalisation was added long time ago ( 
https://trac.osgeo.org/gdal/changeset/1977 ) and apparently, it was to avoid 
an early crystalization which occured at dataset creation, so you ended up 
always with duplicated tags.

With Erdas Imagine from what I can see you can update at any time and the 
metadata is written only once at the end of file at dataset closing.

In other drivers like MBTiles/GPKG, you cannot modify the geotransform once 
you have set it (would require to shift imagery within tiles and update tile 
coordinates. and for that reason, you do have to call it before being allowed 
to write any imagery), but you can still set user metadata at any time, so it 
is a partial crystalization.

> and is
> there a method of determining whether the dataset is crystalized? 

No. Apart from knowing that crystalization will occur after the first Fill() / 
WriteBlock() / RasterIO(GF_Write, ....) call

> Could
> this situation be made less complicated or be made more safe for developers
> by splitting the existing update access mode into update-metadata and
> update-imagery access modes?

I'm not sure if you are talking about the update access mode that you provide 
to GDALOpen() or the implicit update mode you get from calling Create()

In the Create() situation, do you mean that there would be a state in the 
dataset object that would first only allow update metadata and then, at the 
first imagery, allow only imagery update ? This is certainly a best practice, 
that utilities like gdalwarp apply. I can't think of a driver that would only 
accept setting one of this metadata after having finished writing the imagery. 
Wouldn't make sense.
But enforcing this best practice would potentially break existing working 
code. And that would require all drivers to be modified to implement this 
policy (not possible to implement in the core, at least for folks using the 
C++ API)

And regarding update-open situations, we have the gdal_edit.py utility whose 
purpose is to update metadata on a fully defined dataset. What is possible 
strongly depends on the capabilities of the driver and the underlying format. 
You can sometimes even update some metadata on drivers that support 
CreateCopy() only (e.g ECW)


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Mon Sep 19 06:16:54 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 19 Sep 2016 06:16:54 -0700
Subject: [gdal-dev] Problem reading WAFS GRIB2 file with gdal
In-Reply-To: <CACmBxysrHHYsw66tATQDWF+O3_qw2Wq7TjXGcEptxX2orG-=9Q@mail.gmail.com>
References: <CABhsLMUyeN=st2jEhDr=YvV_tSf1xYLT9g++z=mORjRQ6G6h5w@mail.gmail.com>
 <201609141616.53983.even.rouault@spatialys.com>
 <CACmBxysrHHYsw66tATQDWF+O3_qw2Wq7TjXGcEptxX2orG-=9Q@mail.gmail.com>
Message-ID: <CACmBxyuSVp5a4kHY8o=1oe5GgxhkH+-F8wSJafcZFDXerLE1SQ@mail.gmail.com>

And just got this update from Arthur Taylor at NOAA.

-kurt


Please go here for release 2.07
http://www.weather.gov/mdl/degrib_download

http://www.nws.noaa.gov/mdl/degrib/ bounces you to the new site, but I see
that the old "Download page" (
http://www.nws.noaa.gov/mdl/degrib/download.php) doesn't.

When you get a chance, can you look it over and let us know if you have
specific issues?  Mike Allard (CC'd) is working to pick up the ball on
items that have been dropped of late.


On Wed, Sep 14, 2016 at 9:10 AM, Kurt Schwehr <schwehr at gmail.com> wrote:

> FYI,
>
> degrib 2.05 from Dec 2015 is out here:
>
> http://slosh.nws.noaa.gov/degrib2/download.php
>
> -kurt
>
> On Wed, Sep 14, 2016 at 7:16 AM, Even Rouault <even.rouault at spatialys.com>
> wrote:
>
>> Pierre,
>>
>> > A bug seems to be already opened for this error :
>> > https://trac.osgeo.org/gdal/ticket/5768
>>
>> I had a look and just added support for that kind of products in GDAL
>> trunk.
>> The issue was that Template 4.15 (
>> http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_temp4-15.shtml ) used
>> for
>> bands 4-37 wasn't supported before.
>>
>> I've also refreshed the GRIB tables used to get parameter names from
>> latest
>> degrib v2.0.3
>>
>> Now you get:
>>
>> $ gdalinfo WAFS_blended_2016090700f06.grib2
>> Driver: GRIB/GRIdded Binary (.grb)
>> Files: WAFS_blended_2016090700f06.grib2
>> Size is 288, 145
>> Coordinate System is:
>> GEOGCS["Coordinate System imported from GRIB file",
>>     DATUM["unknown",
>>         SPHEROID["Sphere",6371229,0]],
>>     PRIMEM["Greenwich",0],
>>     UNIT["degree",0.0174532925199433]]
>> Origin = (-0.625000000000000,90.625000000000000)
>> Pixel Size = (1.250000000000000,-1.250000000000000)
>> Corner Coordinates:
>> Upper Left  (  -0.6250000,  90.6250000) (  0d37'30.00"W, 90d37'30.00"N)
>> Lower Left  (  -0.6250000, -90.6250000) (  0d37'30.00"W, 90d37'30.00"S)
>> Upper Right (     359.375,      90.625) (359d22'30.00"E, 90d37'30.00"N)
>> Lower Right (     359.375,     -90.625) (359d22'30.00"E, 90d37'30.00"S)
>> Center      ( 179.3750000,   0.0000000) (179d22'30.00"E,  0d 0' 0.01"N)
>> Band 1 Block=288x1 Type=Float64, ColorInterp=Undefined
>>   Description = 0[-] RESERVED(11) (Reserved)
>>   Metadata:
>>     GRIB_COMMENT=ICAO Standard Atmosphere Reference Height [m]
>>     GRIB_ELEMENT=ICAHT
>>     GRIB_FORECAST_SECONDS=21600 sec
>>     GRIB_PDS_PDTN=0
>>     GRIB_PDS_TEMPLATE_NUMBERS=3 3 2 0 96 0 0 0 1 0 0 0 6 11 0 0 0 0 0 255
>> 0 0
>> 0 0 0
>>     GRIB_REF_TIME=  1473206400 sec UTC
>>     GRIB_SHORT_NAME=0-RESERVED(11)
>>     GRIB_UNIT=[m]
>>     GRIB_VALID_TIME=  1473228000 sec UTC
>> [...snip...]
>> Band 4 Block=288x1 Type=Float64, ColorInterp=Undefined
>>   Description = 70000[Pa] ISBL="Isobaric surface"
>>   Metadata:
>>     GRIB_COMMENT=In-Cloud Turbulence [%]
>>     GRIB_ELEMENT=CTP
>>     GRIB_FORECAST_SECONDS=21600 sec
>>     GRIB_PDS_PDTN=15
>>     GRIB_PDS_TEMPLATE_NUMBERS=19 21 2 0 96 0 0 0 1 0 0 0 6 100 0 0 1 17
>> 112
>> 255 0 0 0 0 0 0 3 1
>>     GRIB_REF_TIME=  1473206400 sec UTC
>>     GRIB_SHORT_NAME=70000-ISBL
>>     GRIB_UNIT=[%]
>>     GRIB_VALID_TIME=  1473228000 sec UTC
>> [... snip ... ]
>> Band 37 Block=288x1 Type=Float64, ColorInterp=Undefined
>>   Description = 30000[Pa] ISBL="Isobaric surface"
>>   Metadata:
>>     GRIB_COMMENT=Icing [%]
>>     GRIB_ELEMENT=ICIP
>>     GRIB_FORECAST_SECONDS=21600 sec
>>     GRIB_PDS_PDTN=15
>>     GRIB_PDS_TEMPLATE_NUMBERS=19 20 2 0 96 0 0 0 1 0 0 0 6 100 0 0 0 117
>> 48
>> 255 0 0 0 0 0 2 3 1
>>     GRIB_REF_TIME=  1473206400 sec UTC
>>     GRIB_SHORT_NAME=30000-ISBL
>>     GRIB_UNIT=[%]
>>     GRIB_VALID_TIME=  1473228000 sec UTC
>>
>>
>> Even
>>
>> --
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
>
>
> --
> --
> http://schwehr.org
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160919/ba51f2d7/attachment.html>

From andrew.bell.ia at gmail.com  Tue Sep 20 08:13:44 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 20 Sep 2016 10:13:44 -0500
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
In-Reply-To: <201609181249.08267.even.rouault@spatialys.com>
References: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
 <201609172152.12471.even.rouault@spatialys.com>
 <CADPhZXys=o196QgR5yUaa_v2Q697qzc4MK5ZZXuf9Yg5nk+rbg@mail.gmail.com>
 <201609181249.08267.even.rouault@spatialys.com>
Message-ID: <CACJ51z1N318K3ekyoZiqs72WxnLRCPw86nU6pHKLFFDM__9E3w@mail.gmail.com>

On Sun, Sep 18, 2016 at 5:49 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le dimanche 18 septembre 2016 11:02:20, Sean Gillies a écrit :
> > Hi Andrew, Even,
> >
> > I am so grateful you asked this question, Andrew.
>
> UPDATE: Andrew, after digging, I believe you have hit
> https://trac.osgeo.org/gdal/ticket/6592 whose fix hasn't yet reached any
> released version.
>

Thanks Even,

It seems like doing something else to set the metadata change flag will
make things work.  Unfortunately, the change flag seems to be guarded so
one has to make an actual change to get it to be set.  Something like the
following works, but is a little crufty and deserves a comment.  Perhaps
there's a better way?

int nBands = 5;
dataset->Create(filename, width, height, nBands, ...);

for (int i = 1; i <= nBands; ++i)
{
    GDALRasterBand *band = dataset->GetRasterBand(i);
    band->SetDescription(someString);

    // Force metadata change flag so that description gets written.
Current bug
    // (ticket 6592) requires something like this.
    band->SetOffset(band->GetOffset(NULL) + .00001);
    band->SetOffset(band->GetOffset(NULL) - .00001);

    band->WriteBlock(someData);
}

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160920/f02126cb/attachment.html>

From even.rouault at spatialys.com  Tue Sep 20 08:23:41 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 20 Sep 2016 17:23:41 +0200
Subject: [gdal-dev] Writing descriptions to GeoTiff bands
In-Reply-To: <CACJ51z1N318K3ekyoZiqs72WxnLRCPw86nU6pHKLFFDM__9E3w@mail.gmail.com>
References: <CACJ51z1oPR4rd40xnhfMTQCDQ+tNYHuRCd2MC_dstqB39ZBX1A@mail.gmail.com>
 <201609181249.08267.even.rouault@spatialys.com>
 <CACJ51z1N318K3ekyoZiqs72WxnLRCPw86nU6pHKLFFDM__9E3w@mail.gmail.com>
Message-ID: <201609201723.41640.even.rouault@spatialys.com>

Le mardi 20 septembre 2016 17:13:44, Andrew Bell a écrit :
> On Sun, Sep 18, 2016 at 5:49 AM, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Le dimanche 18 septembre 2016 11:02:20, Sean Gillies a écrit :
> > > Hi Andrew, Even,
> > > 
> > > I am so grateful you asked this question, Andrew.
> > 
> > UPDATE: Andrew, after digging, I believe you have hit
> > https://trac.osgeo.org/gdal/ticket/6592 whose fix hasn't yet reached any
> > released version.
> 
> Thanks Even,
> 
> It seems like doing something else to set the metadata change flag will
> make things work.  Unfortunately, the change flag seems to be guarded so
> one has to make an actual change to get it to be set.  Something like the
> following works, but is a little crufty and deserves a comment.  Perhaps
> there's a better way?
> 
> int nBands = 5;
> dataset->Create(filename, width, height, nBands, ...);
> 
> for (int i = 1; i <= nBands; ++i)
> {
>     GDALRasterBand *band = dataset->GetRasterBand(i);
>     band->SetDescription(someString);
> 
>     // Force metadata change flag so that description gets written.
> Current bug
>     // (ticket 6592) requires something like this.
>     band->SetOffset(band->GetOffset(NULL) + .00001);
>     band->SetOffset(band->GetOffset(NULL) - .00001);

Or  just
band->SetOffset(1)
band->SetOffset(0)

since 0 is the default offset (and if you don't customize it).

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From daniele.romagnoli at geo-solutions.it  Wed Sep 21 07:57:46 2016
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Wed, 21 Sep 2016 16:57:46 +0200
Subject: [gdal-dev] does gdalwarp recognize/handle NODATA_VALUES metadata?
Message-ID: <CAJaHrDzv6maxWExL=qkdRk8060biSwxagyyCzmboHkJgGnRE9A@mail.gmail.com>

Hi list.
I'm using GDAL 2.1.1 and I have a question (I didn't checked yet with a
test to confirm or not the result).

In case I configure a GeoTIFF dataset with NODATA_VALUES=0 0 0 in order to
specify an RGB(0,0,0) triplet as nodata, would the gdalwarp utility handle
it?

I know some drivers,algorithms,utilities do not handle it so I'm asking...

Please, let me know.
Best Regards,
Daniele

-- 
==
GeoServer Professional Services from the experts! Visit
http://goo.gl/it488V for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

*AVVERTENZE AI SENSI DEL D.Lgs. 196/2003*

Le informazioni contenute in questo messaggio di posta elettronica e/o
nel/i file/s allegato/i sono da considerarsi strettamente riservate. Il
loro utilizzo è consentito esclusivamente al destinatario del messaggio,
per le finalità indicate nel messaggio stesso. Qualora riceviate questo
messaggio senza esserne il destinatario, Vi preghiamo cortesemente di
darcene notizia via e-mail e di procedere alla distruzione del messaggio
stesso, cancellandolo dal Vostro sistema. Conservare il messaggio stesso,
divulgarlo anche in parte, distribuirlo ad altri soggetti, copiarlo, od
utilizzarlo per finalità diverse, costituisce comportamento contrario ai
principi dettati dal D.Lgs. 196/2003.



The information in this message and/or attachments, is intended solely for
the attention and use of the named addressee(s) and may be confidential or
proprietary in nature or covered by the provisions of privacy act
(Legislative Decree June, 30 2003, no.196 - Italy's New Data Protection
Code).Any use not in accord with its purpose, any disclosure, reproduction,
copying, distribution, or either dissemination, either whole or partial, is
strictly forbidden except previous formal approval of the named
addressee(s). If you are not the intended recipient, please contact
immediately the sender by telephone, fax or e-mail and delete the
information in this message that has been received in error. The sender
does not give any warranty or accept liability as the content, accuracy or
completeness of sent messages and accepts no responsibility  for changes
made after they were sent or for other risks which arise as a result of
e-mail transmission, viruses, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160921/5d117c74/attachment.html>

From even.rouault at spatialys.com  Wed Sep 21 08:30:47 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 21 Sep 2016 17:30:47 +0200
Subject: [gdal-dev] does gdalwarp recognize/handle NODATA_VALUES
	metadata?
In-Reply-To: <CAJaHrDzv6maxWExL=qkdRk8060biSwxagyyCzmboHkJgGnRE9A@mail.gmail.com>
References: <CAJaHrDzv6maxWExL=qkdRk8060biSwxagyyCzmboHkJgGnRE9A@mail.gmail.com>
Message-ID: <201609211730.48150.even.rouault@spatialys.com>

Le mercredi 21 septembre 2016 16:57:46, Daniele Romagnoli a écrit :
> Hi list.
> I'm using GDAL 2.1.1 and I have a question (I didn't checked yet with a
> test to confirm or not the result).
> 
> In case I configure a GeoTIFF dataset with NODATA_VALUES=0 0 0 in order to
> specify an RGB(0,0,0) triplet as nodata, would the gdalwarp utility handle
> it?

Hi Daniele,

Yep, tested at
https://github.com/OSGeo/gdal/blob/trunk/autotest/utilities/test_gdalwarp.py#L1392

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From daniele.romagnoli at geo-solutions.it  Wed Sep 21 08:52:42 2016
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Wed, 21 Sep 2016 17:52:42 +0200
Subject: [gdal-dev] does gdalwarp recognize/handle NODATA_VALUES
	metadata?
In-Reply-To: <201609211730.48150.even.rouault@spatialys.com>
References: <CAJaHrDzv6maxWExL=qkdRk8060biSwxagyyCzmboHkJgGnRE9A@mail.gmail.com>
 <201609211730.48150.even.rouault@spatialys.com>
Message-ID: <CAJaHrDwjY5PTE-DGOQAjd01KkFBVwznz3u74s1D3DSeKj7DxKw@mail.gmail.com>

Hi Even,
thanks a lot for your answer.

Cheers,
Daniele

On Wed, Sep 21, 2016 at 5:30 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le mercredi 21 septembre 2016 16:57:46, Daniele Romagnoli a écrit :
> > Hi list.
> > I'm using GDAL 2.1.1 and I have a question (I didn't checked yet with a
> > test to confirm or not the result).
> >
> > In case I configure a GeoTIFF dataset with NODATA_VALUES=0 0 0 in order
> to
> > specify an RGB(0,0,0) triplet as nodata, would the gdalwarp utility
> handle
> > it?
>
> Hi Daniele,
>
> Yep, tested at
> https://github.com/OSGeo/gdal/blob/trunk/autotest/utilities/
> test_gdalwarp.py#L1392
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>



-- 
==
GeoServer Professional Services from the experts! Visit
http://goo.gl/it488V for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

*AVVERTENZE AI SENSI DEL D.Lgs. 196/2003*

Le informazioni contenute in questo messaggio di posta elettronica e/o
nel/i file/s allegato/i sono da considerarsi strettamente riservate. Il
loro utilizzo è consentito esclusivamente al destinatario del messaggio,
per le finalità indicate nel messaggio stesso. Qualora riceviate questo
messaggio senza esserne il destinatario, Vi preghiamo cortesemente di
darcene notizia via e-mail e di procedere alla distruzione del messaggio
stesso, cancellandolo dal Vostro sistema. Conservare il messaggio stesso,
divulgarlo anche in parte, distribuirlo ad altri soggetti, copiarlo, od
utilizzarlo per finalità diverse, costituisce comportamento contrario ai
principi dettati dal D.Lgs. 196/2003.



The information in this message and/or attachments, is intended solely for
the attention and use of the named addressee(s) and may be confidential or
proprietary in nature or covered by the provisions of privacy act
(Legislative Decree June, 30 2003, no.196 - Italy's New Data Protection
Code).Any use not in accord with its purpose, any disclosure, reproduction,
copying, distribution, or either dissemination, either whole or partial, is
strictly forbidden except previous formal approval of the named
addressee(s). If you are not the intended recipient, please contact
immediately the sender by telephone, fax or e-mail and delete the
information in this message that has been received in error. The sender
does not give any warranty or accept liability as the content, accuracy or
completeness of sent messages and accepts no responsibility  for changes
made after they were sent or for other risks which arise as a result of
e-mail transmission, viruses, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160921/dc97896e/attachment.html>

From ari.jolma at gmail.com  Thu Sep 22 00:54:40 2016
From: ari.jolma at gmail.com (Ari Jolma)
Date: Thu, 22 Sep 2016 10:54:40 +0300
Subject: [gdal-dev] Update on RFC 62: Raster algebra
In-Reply-To: <DUB407-EAS362F3C7E5AC5CC3DB4C983FB4FE0@phx.gbl>
References: <08a2931e-e107-f8bb-45b9-fa55f84f866f@gmail.com>
 <DUB407-EAS362F3C7E5AC5CC3DB4C983FB4FE0@phx.gbl>
Message-ID: <1d86f866-e5d7-8ac0-02df-49b109a50e5b@gmail.com>

13.09.2016, 15:40, alex kirjoitti:
>> Ari Wrote:
>> At FOSS4G my conclusion was that my first approach was not good for many reasons, most >importantly because it did not scale to several bands in one operation. So I've trying with the >following ideas/decisions:
>>
>> The problem is to compute y=f(x1, x2, ...), where y is a new dataset with one band or an existing >dataset, into which a new band is added.
>> x1, x2, ... are existing bands. f is an expression. The goal is to be able to create an expression >object, with which one can write
> Hi Ari,
>
> Perhaps it is worthwhile looking back at the email I wrote earlier in the process:
>
> http://permalink.gmane.org/gmane.comp.gis.gdal.devel/42609
>
> At the time, I suggested using expression objects and to allow functions with more than 2 arguments and gave some suggestions on the implementation.

Yes, that has had impact on my thinking.

>
> In my experience the key first step is to develop pixel iterators for raster bands. Once you have that, raster bands can be wrapped as regular ranges and you can make use of 'regular' tools and methods to develop your expression objects, e.g. as in the Range v3 library by Eric Niebler.
>
> Hence, my repeated suggestion for GDAL: create iterators for raster bands :)

It is still my opinion that the iterators must be in practice two level: 
block and cell.

Anyway, I might at least cease working on the RFC now, if not withdraw 
it. I'll rewrite the RFC text to reflect what I found out.

The main reason is that I took a new look at using PDL (Perl Data 
Language) for raster algebra at the block level. I've had some support 
for it in the Perl bindings for a long time but improved it lately. I 
haven't done a comprehensive review but basically PDL is for Perl 
perhaps what NumPy is for Python. I've now improved and documented the 
'Piddle' method for Band objects, with which one can read data from Band 
to a PDL object and vice versa. The method is surprisingly simple and 
doesn't need any support from Swig. That solves mostly my immediate 
needs but of course leaves open for example the question how to link 
GDAL to for example some terrain analysis algorithms which need 
neighborhood operations etc.

For information about PDL go to http://pdl.perl.org/

PDL and some related modules support parallel programming which is 
interesting but I haven't yet any experience from it.

Ari

>
> As you may recall, the code below works just fine (but requires C++11).
>
> With kind regards, Alex
>
>
> #include <blink/map_algebra/map_algebra.h>
>
> namespace ma = blink::map_algebra;
>
> int my_function(int w, int x, int y, int z)
> {
>    return w * x + y * z;
> }
>
> int main()
> {
>    auto a = ma::open_read_only<int>("input_1.tif");
>    auto b = ma::open_read_only<int>("input_2.tif");
>    
>    auto w = ma::create_from_model<double>("output_1.tif", a);
>    auto x = ma::create_from_model<double>("output_2.tif", a);
>    auto y = ma::create_from_model<double>("output_3.tif", a);
>    auto z = ma::create_from_model<double>("output_4.tif", a);
>
>    // Example 1: Using operators
>    w = a + 3 * b;
>
>    // Example 2: Using assigning operators
>    x = 1;
>    x *= a;
>    x += 3 * b;
>    
>    // Example 3: Map algebra using cell-by-cell functions
>    y = ma::apply(my_function, 1, a, 3, b);
>
>    // Example 4: Combination
>    z = b + 3 * ma::apply(my_function, 1, a, 2, b);
>
>    return 0;
> }
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev


From rbarnes at umn.edu  Thu Sep 22 21:12:49 2016
From: rbarnes at umn.edu (Richard Barnes)
Date: Fri, 23 Sep 2016 00:12:49 -0400
Subject: [gdal-dev] Update on RFC 62: Raster algebra
In-Reply-To: <mailman.11.1474570801.15542.gdal-dev@lists.osgeo.org>
References: <mailman.11.1474570801.15542.gdal-dev@lists.osgeo.org>
Message-ID: <fc6d0fdb-7595-e889-409e-a1353fb6da95@umn.edu>

In building tile/block managers, I too have found it difficult to use 
iterators or design algorithms without specifically considering both 
tiles/blocks and cells. Without doing so, it is very easy to write code 
which is (extremely) cache inefficient.

I'm not sure if flow algebras have arisen in the discussion yet, but 
they come to mind when I think of raster algebras. They permit 
operations in which the values of "downstream" cells are functions of 
upstream cells. In such a case, efficient calculations are then driven 
both by blocking and by the data itself. In recent work, I've found that 
a number of flow algebra functions can be written by considering only 
one block at a time (link 
<http://www.sciencedirect.com/science/article/pii/S0098300416301704>, 
link <https://arxiv.org/abs/1608.04431>). I'm working on generalizing 
the concept now and can imagine it forming an easy way to quickly add 
general terrain analysis functionality.

-Richard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160923/4e137d98/attachment.html>

From alexhighviz at hotmail.com  Fri Sep 23 05:19:23 2016
From: alexhighviz at hotmail.com (Alex HighViz)
Date: Fri, 23 Sep 2016 12:19:23 +0000
Subject: [gdal-dev] Update on RFC 62: Raster algebra
In-Reply-To: <fc6d0fdb-7595-e889-409e-a1353fb6da95@umn.edu>
References: <mailman.11.1474570801.15542.gdal-dev@lists.osgeo.org>
 <fc6d0fdb-7595-e889-409e-a1353fb6da95@umn.edu>
Message-ID: <AMSPR05MB1452313275EC9E0F5C06906B4C80@AMSPR05MB145.eurprd05.prod.outlook.com>



>> Richard Barnes:
>>In building tile/block managers, I too have found it difficult to use iterators or design algorithms without specifically considering both tiles/blocks >>and cells. Without doing so, it is very easy to write code which is (extremely) cache inefficient.

I think that is also Ari's main objection and a valid one too. It is possible to qualify "extremely" though: for pixel-by-pixel operations it means having to cache a whole row of blocks for each band, rather than a single block (or do some really expensive swapping). So in the worst case, I have blocks that are one full column of the band, then I need to cache the complete dataset. In the best case I have blocks that are a single row and I need to cache only a single block.

My personal justification for going this route anyway is that I intend to do operations on multiple bands that may have different block sizes. Now imagine a design the works on the basis of blocks and that keeps blocks in cache until they are no longer needed.  In the worst case I would have a combination of bands where one has full rows as blocks and the other has full columns as blocks; I would then need to cache the complete dataset. In the best case I would have two datasets with identical block sizes and I would need to cache only a single block per dataset.

So, in both solutions there is a worst case that requires caching the whole dataset and a best case requiring only a single block per dataset. In both solutions the problem can be solved if you can control the block sizes. I can see that row-by-row will be problematic more often than block-by-block, but the extremes are the same.

I think another problem people see with the row-by-row solution is that it does not parallelize well. However, I do not think that is a real problem because it is possible to rewrite a large row-by-row operation as a number of row-by-row operations on subsets (possibly blocks, but not necessarily so) of the raster data sets.

>> I'm not sure if flow algebras have arisen in the discussion yet, but they come to mind when I think of raster algebras. 
>> They permit operations in
>> which the values of "downstream" cells are functions of upstream cells. In such a case, efficient calculations are then driven both by blocking and >> by the data itself. In recent work, I've found that a number of flow algebra functions can be written by considering only one block at a time (link, >> link). I'm working on generalizing the concept now and can imagine it forming an easy way to quickly add general terrain analysis functionality.

Ari has mentioned catchment delineation, so it certainly is an interest.  The fill algorithm has been a computational bottleneck for me, so I will read your paper with interest too. And I would be highly interested in your generalized flow algebra, IMO there is great potential for generalized spatial analysis that sits somewhere between the hard-baked tools in GIS software and the low level raster data interface of, say, GDAL. 

From jp4work at gmail.com  Sun Sep 25 19:10:06 2016
From: jp4work at gmail.com (JIA Pei)
Date: Sun, 25 Sep 2016 19:10:06 -0700
Subject: [gdal-dev] Some packages are NOT able to be configured?
Message-ID: <CADh8Q_UE2+c2UNoZAZvVqdoj+YPezkE4tXcQe0v-qTN6nG3J4A@mail.gmail.com>

Hi, all:

I actually would like to enable as many packages as possible for gdal, but
it seems even if I strictly following "*./configure --hel*p", some packages
are still NOT able to be configured correctly.
For instance, *HDF5* (instead of *HDF4*)?

I'm using Ubuntu 16.04.1, and it seems the default *gdal* from repository
is based on *HDF4* ??
That's why I would like to build *gdal* by myself.

Cheers
Pei


> GDAL is now configured for x86_64-pc-linux-gnu
>
>  Installation directory:    /usr/local
>  C compiler:                gcc -DHAVE_AVX_AT_COMPILE_TIME
> -DHAVE_SSSE3_AT_COMPILE_TIME -DHAVE_SSE_AT_COMPILE_TIME -g -O2 -fPIC
>  C++ compiler:              g++ -DHAVE_AVX_AT_COMPILE_TIME
> -DHAVE_SSSE3_AT_COMPILE_TIME -DHAVE_SSE_AT_COMPILE_TIME -g -O2
>
>  LIBTOOL support:           yes
>
>  LIBZ support:              external
>  LIBLZMA support:           yes
>  cryptopp support:          yes
>  GRASS support:             no
>  CFITSIO support:           external
>  PCRaster support:          internal
>  LIBPNG support:            external
>  DDS support:               yes
>  GTA support:               no
>  LIBTIFF support:           internal (BigTIFF=yes)
>  LIBGEOTIFF support:        internal
>  LIBJPEG support:           internal
>  12 bit JPEG:               yes
>  12 bit JPEG-in-TIFF:       yes
>  LIBGIF support:            internal
>  OGDI support:              no
>  HDF4 support:              no
>  HDF5 support:              no
>  Kea support:               no
>  NetCDF support:            no
>  Kakadu support:            no
>  JasPer support:            no
>  OpenJPEG support:          no
>  ECW support:               no
>  MrSID support:             no
>  MrSID/MG4 Lidar support:   no
>  MSG support:               no
>  GRIB support:              yes
>  EPSILON support:           no
>  WebP support:              no
>  cURL support (wms/wcs/...):no
>  PostgreSQL support:        yes
>  MRF support:               yes
>  MySQL support:             no
>  Ingres support:            no
>  Xerces-C support:          no
>  NAS support:               no
>  Expat support:             yes
>  libxml2 support:           no
>  Google libkml support:     yes
>  ODBC support:              no
>  PGeo support:              no
>  FGDB support:              no
>  MDB support:               no
>  PCIDSK support:            internal
>  OCI support:               no
>  GEORASTER support:         no
>  SDE support:               no
>  Rasdaman support:          no
>  DODS support:              no
>  SQLite support:            yes
>  PCRE support:              no
>  SpatiaLite support:        no
>  DWGdirect support          no
>  INFORMIX DataBlade support:no
>  GEOS support:              yes
>  QHull support:             internal
>  Poppler support:           no
>  Podofo support:            no
>  PDFium support:            no
>  OpenCL support:            no
>  Armadillo support:         no
>  FreeXL support:            no
>  SOSI support:              no
>  MongoDB support:           no
>
>
>  SWIG Bindings:             no
>
>  Statically link PROJ.4:    no
>  enable GNM building:       no
>  enable pthread support:    yes
>  enable POSIX iconv support:yes
>  hide internal symbols:     no
>
> jiapei:gdal$





-- 

Pei JIA, Ph.D.

Email: jp4work at gmail.com
cell in Canada:    +1 778-863-5816
cell in China: +86 186-8244-3503

Welcome to Vision Open
http://www.visionopen.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160925/736be4b8/attachment.html>

From even.rouault at spatialys.com  Mon Sep 26 01:33:47 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 26 Sep 2016 10:33:47 +0200
Subject: [gdal-dev] Some packages are NOT able to be configured?
In-Reply-To: <CADh8Q_UE2+c2UNoZAZvVqdoj+YPezkE4tXcQe0v-qTN6nG3J4A@mail.gmail.com>
References: <CADh8Q_UE2+c2UNoZAZvVqdoj+YPezkE4tXcQe0v-qTN6nG3J4A@mail.gmail.com>
Message-ID: <201609261033.48028.even.rouault@spatialys.com>

Le lundi 26 septembre 2016 04:10:06, JIA Pei a écrit :
> Hi, all:
> 
> I actually would like to enable as many packages as possible for gdal, but
> it seems even if I strictly following "*./configure --hel*p", some packages
> are still NOT able to be configured correctly.
> For instance, *HDF5* (instead of *HDF4*)?
> 
> I'm using Ubuntu 16.04.1, and it seems the default *gdal* from repository
> is based on *HDF4* ??
> That's why I would like to build *gdal* by myself.

The GDAL package from
https://launchpad.net/~ubuntugis/+archive/ubuntu/ubuntugis-unstable/ has the 
HDF5 dependency.

If you look at the debian/rules file of
 https://launchpad.net/~ubuntugis/+archive/ubuntu/ubuntugis-
unstable/+files/gdal_2.1.0+dfsg-1~xenial0.debian.tar.gz there's a trick to find 
the HDF5 lib which is at a quite particular location :

--with-hdf5=/usr/lib/$(DEB_HOST_MULTIARCH)/hdf5/serial

where $(DEB_HOST_MULTIARCH) will evaluate to x86_64-linux-gnu in your case.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bradh at frogmouth.net  Mon Sep 26 02:45:52 2016
From: bradh at frogmouth.net (Brad Hards)
Date: Mon, 26 Sep 2016 19:45:52 +1000
Subject: [gdal-dev] Some packages are NOT able to be configured?
In-Reply-To: <201609261033.48028.even.rouault@spatialys.com>
References: <CADh8Q_UE2+c2UNoZAZvVqdoj+YPezkE4tXcQe0v-qTN6nG3J4A@mail.gmail.com>
 <201609261033.48028.even.rouault@spatialys.com>
Message-ID: <005b01d217da$c5a43c70$50ecb550$@frogmouth.net>

To confirm, gdalinfo --formats  shows:
  HDF5 (ros): Hierarchical Data Format Release 5
  HDF5Image (ro): HDF5 Dataset

Brad



From francisco.javier.calzado at ericsson.com  Mon Sep 26 06:33:38 2016
From: francisco.javier.calzado at ericsson.com (Francisco Javier Calzado)
Date: Mon, 26 Sep 2016 13:33:38 +0000
Subject: [gdal-dev] Multithread deadlock
Message-ID: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>

Hi guys,

I am experiencing a deadlock with just 2 threads in a single reader & multiple writer scenario. This is, threads read from the same input file (using different handlers) and then write different output files. Deadlock comes when the block cache gets filled. The situation is the following:


-          T1 and T2 read datasets D1 and D2, both pointing to the same input raster (GTiff).

-          Block cache gets filled.

-          T1 tries to lock one block in the cache to write data. But cache is full, so it tries to free dirty blocks from T2 (as seen in Internalize() method). For that purpose, it requires apparently a mutex from D2.

-          However T2 is in a state where must wait for thread T1 to finish working with T2's blocks. In this state, T2 has a mutex acquired from D2.

At least, that is what it seems to be happening based on source code. Maybe I'm wrong, I don't have a full picture overview about how GDAL is internally working. The thing is that I can reproduce this issue with the following test code and dataset:
https://drive.google.com/file/d/0B-OCl1FjBi0YSkU3RUozZjc5SnM/view?usp=sharing

Oddly enough, ticket with number #6163 is supposed to fix this, but its failing in my case. I am working with GDAL 2.1.0 version under VS2015 (x32, Debug) compilation.

Even, what do you think?

Thanks!
Javier C.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160926/6a05fd39/attachment-0001.html>

From andrew.bell.ia at gmail.com  Mon Sep 26 07:06:26 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 26 Sep 2016 10:06:26 -0400
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
Message-ID: <CACJ51z3pS6bGJ36MXCV=gZA0bOUzsqnur1DTj0eEZsuVrHTJ-w@mail.gmail.com>

Deadlocks are usually easy to debug if you can get a traceback when
deadlocked.  If you can attach with gdb (or run in the debugger) and
reproduce and post the stack at the time ('where' from gdb), it should be
no problem to fix.  Trying to reproduce on different hardware can be
difficult.

On Mon, Sep 26, 2016 at 9:33 AM, Francisco Javier Calzado <
francisco.javier.calzado at ericsson.com> wrote:

> Hi guys,
>
>
>
> I am experiencing a deadlock with just 2 threads in a single reader &
> multiple writer scenario. This is, threads read from the same input file
> (using different handlers) and then write different output files. Deadlock
> comes when the block cache gets filled. The situation is the following:
>
>
>
> -          T1 and T2 read datasets D1 and D2, both pointing to the same
> input raster (GTiff).
>
> -          Block cache gets filled.
>
> -          T1 tries to lock one block in the cache to write data. But
> cache is full, so it tries to free dirty blocks from T2 (as seen in
> Internalize() method). For that purpose, it requires apparently a mutex
> from D2.
>
> -          However T2 is in a state where must wait for thread T1 to
> finish working with T2’s blocks. In this state, T2 has a mutex acquired
> from D2.
>
>
>
> At least, that is what it seems to be happening based on source code.
> Maybe I’m wrong, I don’t have a full picture overview about how GDAL is
> internally working. The thing is that I can reproduce this issue with the
> following test code and dataset:
>
> https://drive.google.com/file/d/0B-OCl1FjBi0YSkU3RUozZjc5SnM/
> view?usp=sharing
>
>
>
> Oddly enough, ticket with number #6163 is supposed to fix this, but its
> failing in my case. I am working with GDAL 2.1.0 version under VS2015 (x32,
> Debug) compilation.
>
>
>
> Even, what do you think?
>
>
>
> Thanks!
>
> Javier C.
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160926/9ae50455/attachment.html>

From francisco.javier.calzado at ericsson.com  Mon Sep 26 07:38:11 2016
From: francisco.javier.calzado at ericsson.com (Francisco Javier Calzado)
Date: Mon, 26 Sep 2016 14:38:11 +0000
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <CACJ51z3pS6bGJ36MXCV=gZA0bOUzsqnur1DTj0eEZsuVrHTJ-w@mail.gmail.com>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <CACJ51z3pS6bGJ36MXCV=gZA0bOUzsqnur1DTj0eEZsuVrHTJ-w@mail.gmail.com>
Message-ID: <6BA6E0BBA9988E428FA9178AB0B28B4857673F25@ESESSMB205.ericsson.se>

Sure Andrew,

Here it is the call stack from Visual Studio for both threads (I just copied the top calls where GDAL is involved, just for easy reading. If you need the whole stack just let me know):

THREAD 1:

                ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
               ntdll.dll!_RtlpWaitOnCriticalSection at 8‑()             Unknown
               ntdll.dll!_RtlEnterCriticalSection at 4‑()    Unknown
               gdal201.dll!CPLAcquireMutex(_CPLMutex * hMutexIn, double dfWaitInSeconds) Line 806               C++
               gdal201.dll!GDALDataset::EnterReadWrite(GDALRWFlag eRWFlag) Line 6102        C++
               gdal201.dll!GDALRasterBand::EnterReadWrite(GDALRWFlag eRWFlag) Line 5290 C++
               gdal201.dll!GDALRasterBlock::Write() Line 742    C++
               gdal201.dll!GDALRasterBlock::Internalize() Line 917          C++
               gdal201.dll!GDALRasterBand::GetLockedBlockRef(int nXBlockOff, int nYBlockOff, int bJustInitialize) Line 1126                C++
>             Test.exe!RasterBandPixelAccess::SetValueAtPixel<short>(const int & pX, const int & pY, const short & value) Line 180                C++


THREAD 2:

                ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
               KernelBase.dll!_WaitForSingleObjectEx at 12‑()   Unknown
               kernel32.dll!_WaitForSingleObjectExImplementation at 12‑()        Unknown
               kernel32.dll!_WaitForSingleObject at 8‑() Unknown
               gdal201.dll!CPLCondWait(_CPLCond * hCond, _CPLMutex * hClientMutex) Line 937           C++
               gdal201.dll!GDALAbstractBandBlockCache::WaitKeepAliveCounter() Line 134       C++
               gdal201.dll!GDALArrayBandBlockCache::FlushCache() Line 312    C++
               gdal201.dll!GDALRasterBand::FlushCache() Line 865         C++
               gdal201.dll!GDALDataset::FlushCache() Line 386 C++
               gdal201.dll!GDALPamDataset::FlushCache() Line 159        C++
               gdal201.dll!GTiffDataset::Finalize() Line 6180       C++
               gdal201.dll!GTiffDataset::~GTiffDataset() Line 6135           C++
               gdal201.dll!GTiffDataset::`scalar deleting destructor'(unsigned int)           C++
               gdal201.dll!GDALClose(void * hDS) Line 2998       C++
>             Test.exe!main::__l2::<lambda>(std::basic_string<char,std::char_traits<char>,std::allocator<char> > sourcefilePath, std::basic_string<char,std::char_traits<char>,std::allocator<char> > targetFilePath, int threadID) Line 66           C++


From: Andrew Bell [mailto:andrew.bell.ia at gmail.com]
Sent: 26 September, 2016 16:06
To: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>
Cc: gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Multithread deadlock

Deadlocks are usually easy to debug if you can get a traceback when deadlocked.  If you can attach with gdb (or run in the debugger) and reproduce and post the stack at the time ('where' from gdb), it should be no problem to fix.  Trying to reproduce on different hardware can be difficult.

On Mon, Sep 26, 2016 at 9:33 AM, Francisco Javier Calzado <francisco.javier.calzado at ericsson.com<mailto:francisco.javier.calzado at ericsson.com>> wrote:
Hi guys,

I am experiencing a deadlock with just 2 threads in a single reader & multiple writer scenario. This is, threads read from the same input file (using different handlers) and then write different output files. Deadlock comes when the block cache gets filled. The situation is the following:


-          T1 and T2 read datasets D1 and D2, both pointing to the same input raster (GTiff).

-          Block cache gets filled.

-          T1 tries to lock one block in the cache to write data. But cache is full, so it tries to free dirty blocks from T2 (as seen in Internalize() method). For that purpose, it requires apparently a mutex from D2.

-          However T2 is in a state where must wait for thread T1 to finish working with T2’s blocks. In this state, T2 has a mutex acquired from D2.

At least, that is what it seems to be happening based on source code. Maybe I’m wrong, I don’t have a full picture overview about how GDAL is internally working. The thing is that I can reproduce this issue with the following test code and dataset:
https://drive.google.com/file/d/0B-OCl1FjBi0YSkU3RUozZjc5SnM/view?usp=sharing

Oddly enough, ticket with number #6163 is supposed to fix this, but its failing in my case. I am working with GDAL 2.1.0 version under VS2015 (x32, Debug) compilation.

Even, what do you think?

Thanks!
Javier C.


_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>
http://lists.osgeo.org/mailman/listinfo/gdal-dev



--
Andrew Bell
andrew.bell.ia at gmail.com<mailto:andrew.bell.ia at gmail.com>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160926/ffad8ef3/attachment-0001.html>

From even.rouault at spatialys.com  Mon Sep 26 08:53:07 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 26 Sep 2016 17:53:07 +0200
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <6BA6E0BBA9988E428FA9178AB0B28B4857673F25@ESESSMB205.ericsson.se>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <CACJ51z3pS6bGJ36MXCV=gZA0bOUzsqnur1DTj0eEZsuVrHTJ-w@mail.gmail.com>
 <6BA6E0BBA9988E428FA9178AB0B28B4857673F25@ESESSMB205.ericsson.se>
Message-ID: <201609261753.07636.even.rouault@spatialys.com>

Hi,

I admire Andrew's enthousiasm and would happily let him tackle the next bug 
reported in this area ;-)

I could reproduce the deadlock with the same stack trace  and have pushed a fix 
per https://trac.osgeo.org/gdal/ticket/6661. This was actually not a typical 
deadlock situation, but a undefined behaviour caused by trying to acquire a 
recursive mutex than was previously released more times than it had been 
acquired.

Without this patch, a "workaround" would be to define the 
GDAL_ENABLE_READ_WRITE_MUTEX config option to NO to disable the per-dataset 
mutex. had added this option since I wasn't really sure that the per-dataset 
mutex wouldn't introduce deadlock situations. But when defining it, you'll get  
undefined behaviour (=potentially crashing or causing corruptions) due to 2 
threads potentially calling the IWriteBlock() method of the same dataset,which 
was the GDAL 1.X behaviour.

Clearly multi-threading scenarios involving writing is the point where the 
global block cache mechanism + the band-aid of the per-dataset R/W mutex are 
showing their limit in terms of design&maintenance complexity, and 
scalability. A per-dataset block cache would avoid such headaches (the 
drawback would be to define a per-dataset block cache size)

Even

> Sure Andrew,
> 
> Here it is the call stack from Visual Studio for both threads (I just
> copied the top calls where GDAL is involved, just for easy reading. If you
> need the whole stack just let me know):
> 
> THREAD 1:
> 
>                 ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
>                ntdll.dll!_RtlpWaitOnCriticalSection at 8‑()            
> Unknown ntdll.dll!_RtlEnterCriticalSection at 4‑()    Unknown
>                gdal201.dll!CPLAcquireMutex(_CPLMutex * hMutexIn, double
> dfWaitInSeconds) Line 806               C++
> gdal201.dll!GDALDataset::EnterReadWrite(GDALRWFlag eRWFlag) Line 6102     
>   C++ gdal201.dll!GDALRasterBand::EnterReadWrite(GDALRWFlag eRWFlag) Line
> 5290 C++ gdal201.dll!GDALRasterBlock::Write() Line 742    C++
> gdal201.dll!GDALRasterBlock::Internalize() Line 917          C++
> gdal201.dll!GDALRasterBand::GetLockedBlockRef(int nXBlockOff, int
> nYBlockOff, int bJustInitialize) Line 1126                C++
> 
> >             Test.exe!RasterBandPixelAccess::SetValueAtPixel<short>(const
> >             int & pX, const int & pY, const short & value) Line 180     
> >                       C++
> 
> THREAD 2:
> 
>                 ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
>                KernelBase.dll!_WaitForSingleObjectEx at 12‑()   Unknown
>                kernel32.dll!_WaitForSingleObjectExImplementation at 12‑()     
>   Unknown kernel32.dll!_WaitForSingleObject at 8‑() Unknown
>                gdal201.dll!CPLCondWait(_CPLCond * hCond, _CPLMutex *
> hClientMutex) Line 937           C++
> gdal201.dll!GDALAbstractBandBlockCache::WaitKeepAliveCounter() Line 134   
>    C++ gdal201.dll!GDALArrayBandBlockCache::FlushCache() Line 312    C++
> gdal201.dll!GDALRasterBand::FlushCache() Line 865         C++
> gdal201.dll!GDALDataset::FlushCache() Line 386 C++
>                gdal201.dll!GDALPamDataset::FlushCache() Line 159        C++
>                gdal201.dll!GTiffDataset::Finalize() Line 6180       C++
>                gdal201.dll!GTiffDataset::~GTiffDataset() Line 6135         
>  C++ gdal201.dll!GTiffDataset::`scalar deleting destructor'(unsigned int) 
>          C++ gdal201.dll!GDALClose(void * hDS) Line 2998       C++
> 
> >             Test.exe!main::__l2::<lambda>(std::basic_string<char,std::cha
> >             r_traits<char>,std::allocator<char> > sourcefilePath,
> >             std::basic_string<char,std::char_traits<char>,std::allocator
> >             <char> > targetFilePath, int threadID) Line 66           C++
> 
> From: Andrew Bell [mailto:andrew.bell.ia at gmail.com]
> Sent: 26 September, 2016 16:06
> To: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>
> Cc: gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] Multithread deadlock
> 
> Deadlocks are usually easy to debug if you can get a traceback when
> deadlocked.  If you can attach with gdb (or run in the debugger) and
> reproduce and post the stack at the time ('where' from gdb), it should be
> no problem to fix.  Trying to reproduce on different hardware can be
> difficult.
> 
> On Mon, Sep 26, 2016 at 9:33 AM, Francisco Javier Calzado
> <francisco.javier.calzado at ericsson.com<mailto:francisco.javier.calzado at eri
> csson.com>> wrote: Hi guys,
> 
> I am experiencing a deadlock with just 2 threads in a single reader &
> multiple writer scenario. This is, threads read from the same input file
> (using different handlers) and then write different output files. Deadlock
> comes when the block cache gets filled. The situation is the following:
> 
> 
> -          T1 and T2 read datasets D1 and D2, both pointing to the same
> input raster (GTiff).
> 
> -          Block cache gets filled.
> 
> -          T1 tries to lock one block in the cache to write data. But cache
> is full, so it tries to free dirty blocks from T2 (as seen in
> Internalize() method). For that purpose, it requires apparently a mutex
> from D2.
> 
> -          However T2 is in a state where must wait for thread T1 to finish
> working with T2’s blocks. In this state, T2 has a mutex acquired from D2.
> 
> At least, that is what it seems to be happening based on source code. Maybe
> I’m wrong, I don’t have a full picture overview about how GDAL is
> internally working. The thing is that I can reproduce this issue with the
> following test code and dataset:
> https://drive.google.com/file/d/0B-OCl1FjBi0YSkU3RUozZjc5SnM/view?usp=shar
> ing
> 
> Oddly enough, ticket with number #6163 is supposed to fix this, but its
> failing in my case. I am working with GDAL 2.1.0 version under VS2015
> (x32, Debug) compilation.
> 
> Even, what do you think?
> 
> Thanks!
> Javier C.
> 
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> 
> 
> --
> Andrew Bell
> andrew.bell.ia at gmail.com<mailto:andrew.bell.ia at gmail.com>

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From francisco.javier.calzado at ericsson.com  Tue Sep 27 00:50:19 2016
From: francisco.javier.calzado at ericsson.com (Francisco Javier Calzado)
Date: Tue, 27 Sep 2016 07:50:19 +0000
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <201609261753.07636.even.rouault@spatialys.com>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <CACJ51z3pS6bGJ36MXCV=gZA0bOUzsqnur1DTj0eEZsuVrHTJ-w@mail.gmail.com>
 <6BA6E0BBA9988E428FA9178AB0B28B4857673F25@ESESSMB205.ericsson.se>
 <201609261753.07636.even.rouault@spatialys.com>
Message-ID: <6BA6E0BBA9988E428FA9178AB0B28B48576743E4@ESESSMB205.ericsson.se>

Hi Even,

Thanks for such a quick fix! I'm gonna apply the patch and recompile GDAL and will let you know :)

Keep in touch.
Best Regards,
Javier Calzado



-----Original Message-----
From: Even Rouault [mailto:even.rouault at spatialys.com] 
Sent: 26 September, 2016 17:53
To: gdal-dev at lists.osgeo.org
Cc: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>; Andrew Bell <andrew.bell.ia at gmail.com>
Subject: Re: [gdal-dev] Multithread deadlock

Hi,

I admire Andrew's enthousiasm and would happily let him tackle the next bug reported in this area ;-)

I could reproduce the deadlock with the same stack trace  and have pushed a fix per https://trac.osgeo.org/gdal/ticket/6661. This was actually not a typical deadlock situation, but a undefined behaviour caused by trying to acquire a recursive mutex than was previously released more times than it had been acquired.

Without this patch, a "workaround" would be to define the GDAL_ENABLE_READ_WRITE_MUTEX config option to NO to disable the per-dataset mutex. had added this option since I wasn't really sure that the per-dataset mutex wouldn't introduce deadlock situations. But when defining it, you'll get undefined behaviour (=potentially crashing or causing corruptions) due to 2 threads potentially calling the IWriteBlock() method of the same dataset,which was the GDAL 1.X behaviour.

Clearly multi-threading scenarios involving writing is the point where the global block cache mechanism + the band-aid of the per-dataset R/W mutex are showing their limit in terms of design&maintenance complexity, and scalability. A per-dataset block cache would avoid such headaches (the drawback would be to define a per-dataset block cache size)

Even

> Sure Andrew,
> 
> Here it is the call stack from Visual Studio for both threads (I just 
> copied the top calls where GDAL is involved, just for easy reading. If 
> you need the whole stack just let me know):
> 
> THREAD 1:
> 
>                 ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
>                ntdll.dll!_RtlpWaitOnCriticalSection at 8‑()            
> Unknown ntdll.dll!_RtlEnterCriticalSection at 4‑()    Unknown
>                gdal201.dll!CPLAcquireMutex(_CPLMutex * hMutexIn, double
> dfWaitInSeconds) Line 806               C++
> gdal201.dll!GDALDataset::EnterReadWrite(GDALRWFlag eRWFlag) Line 6102     
>   C++ gdal201.dll!GDALRasterBand::EnterReadWrite(GDALRWFlag eRWFlag) Line
> 5290 C++ gdal201.dll!GDALRasterBlock::Write() Line 742    C++
> gdal201.dll!GDALRasterBlock::Internalize() Line 917          C++
> gdal201.dll!GDALRasterBand::GetLockedBlockRef(int nXBlockOff, int
> nYBlockOff, int bJustInitialize) Line 1126                C++
> 
> >             Test.exe!RasterBandPixelAccess::SetValueAtPixel<short>(const
> >             int & pX, const int & pY, const short & value) Line 180     
> >                       C++
> 
> THREAD 2:
> 
>                 ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
>                KernelBase.dll!_WaitForSingleObjectEx at 12‑()   Unknown
>                kernel32.dll!_WaitForSingleObjectExImplementation at 12‑()     
>   Unknown kernel32.dll!_WaitForSingleObject at 8‑() Unknown
>                gdal201.dll!CPLCondWait(_CPLCond * hCond, _CPLMutex *
> hClientMutex) Line 937           C++
> gdal201.dll!GDALAbstractBandBlockCache::WaitKeepAliveCounter() Line 134   
>    C++ gdal201.dll!GDALArrayBandBlockCache::FlushCache() Line 312    C++
> gdal201.dll!GDALRasterBand::FlushCache() Line 865         C++
> gdal201.dll!GDALDataset::FlushCache() Line 386 C++
>                gdal201.dll!GDALPamDataset::FlushCache() Line 159        C++
>                gdal201.dll!GTiffDataset::Finalize() Line 6180       C++
>                gdal201.dll!GTiffDataset::~GTiffDataset() Line 6135         
>  C++ gdal201.dll!GTiffDataset::`scalar deleting destructor'(unsigned int) 
>          C++ gdal201.dll!GDALClose(void * hDS) Line 2998       C++
> 
> >             Test.exe!main::__l2::<lambda>(std::basic_string<char,std::cha
> >             r_traits<char>,std::allocator<char> > sourcefilePath,
> >             std::basic_string<char,std::char_traits<char>,std::allocator
> >             <char> > targetFilePath, int threadID) Line 66           C++
> 
> From: Andrew Bell [mailto:andrew.bell.ia at gmail.com]
> Sent: 26 September, 2016 16:06
> To: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>
> Cc: gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] Multithread deadlock
> 
> Deadlocks are usually easy to debug if you can get a traceback when 
> deadlocked.  If you can attach with gdb (or run in the debugger) and 
> reproduce and post the stack at the time ('where' from gdb), it should 
> be no problem to fix.  Trying to reproduce on different hardware can 
> be difficult.
> 
> On Mon, Sep 26, 2016 at 9:33 AM, Francisco Javier Calzado 
> <francisco.javier.calzado at ericsson.com<mailto:francisco.javier.calzado
> @eri
> csson.com>> wrote: Hi guys,
> 
> I am experiencing a deadlock with just 2 threads in a single reader & 
> multiple writer scenario. This is, threads read from the same input 
> file (using different handlers) and then write different output files. 
> Deadlock comes when the block cache gets filled. The situation is the following:
> 
> 
> -          T1 and T2 read datasets D1 and D2, both pointing to the same
> input raster (GTiff).
> 
> -          Block cache gets filled.
> 
> -          T1 tries to lock one block in the cache to write data. But cache
> is full, so it tries to free dirty blocks from T2 (as seen in
> Internalize() method). For that purpose, it requires apparently a 
> mutex from D2.
> 
> -          However T2 is in a state where must wait for thread T1 to finish
> working with T2’s blocks. In this state, T2 has a mutex acquired from D2.
> 
> At least, that is what it seems to be happening based on source code. 
> Maybe I’m wrong, I don’t have a full picture overview about how GDAL 
> is internally working. The thing is that I can reproduce this issue 
> with the following test code and dataset:
> https://drive.google.com/file/d/0B-OCl1FjBi0YSkU3RUozZjc5SnM/view?usp=
> shar
> ing
> 
> Oddly enough, ticket with number #6163 is supposed to fix this, but 
> its failing in my case. I am working with GDAL 2.1.0 version under 
> VS2015 (x32, Debug) compilation.
> 
> Even, what do you think?
> 
> Thanks!
> Javier C.
> 
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> 
> 
> --
> Andrew Bell
> andrew.bell.ia at gmail.com<mailto:andrew.bell.ia at gmail.com>

--
Spatialys - Geospatial professional services http://www.spatialys.com

From sean at mapbox.com  Tue Sep 27 05:09:30 2016
From: sean at mapbox.com (Sean Gillies)
Date: Tue, 27 Sep 2016 14:09:30 +0200
Subject: [gdal-dev] Incorrect image bytes from VSIGetMemFileBuffer in GDAL <
	2.1.0
Message-ID: <CADPhZXzWDs1wiFWrw5tEUZ1ooaG6TMZMSDXyVzMKq2zspKpFLA@mail.gmail.com>

Hi all,

I've got code in Rasterio that calls VSIGetMemFileBuffer to get PNG or JPEG
image bytes. With GDAL 1.11, I found that I had to fix the resulting byte
array by moving the last byte to the head of the array. With GDAL 2.1.0 and
2.1.1 this is no longer needed and we can return an unshifted array (see
the changeset below).

https://github.com/mapbox/rio-mbtiles/compare/master...brendan-ward:bad_bytes?expand=1#diff-cfcb7125bae0f25564785b33fa38d6a1L45

I haven't been able to find the change in the change log or tracker. Can
anyone point me to the commit that changed this so I can pin down the
versions when it changed?

Thanks in adavnce,

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160927/fb1a7be5/attachment.html>

From even.rouault at spatialys.com  Tue Sep 27 05:59:12 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 27 Sep 2016 14:59:12 +0200
Subject: [gdal-dev] Incorrect image bytes from VSIGetMemFileBuffer in
	GDAL < 2.1.0
In-Reply-To: <CADPhZXzWDs1wiFWrw5tEUZ1ooaG6TMZMSDXyVzMKq2zspKpFLA@mail.gmail.com>
References: <CADPhZXzWDs1wiFWrw5tEUZ1ooaG6TMZMSDXyVzMKq2zspKpFLA@mail.gmail.com>
Message-ID: <201609271459.12459.even.rouault@spatialys.com>

Le mardi 27 septembre 2016 14:09:30, Sean Gillies a écrit :
> Hi all,
> 
> I've got code in Rasterio that calls VSIGetMemFileBuffer to get PNG or JPEG
> image bytes. With GDAL 1.11, I found that I had to fix the resulting byte
> array by moving the last byte to the head of the array. With GDAL 2.1.0 and
> 2.1.1 this is no longer needed and we can return an unshifted array (see
> the changeset below).
> 
> https://github.com/mapbox/rio-mbtiles/compare/master...brendan-ward:bad_byt
> es?expand=1#diff-cfcb7125bae0f25564785b33fa38d6a1L45
> 
> I haven't been able to find the change in the change log or tracker. Can
> anyone point me to the commit that changed this so I can pin down the
> versions when it changed?

Sean,

This is super weird and I'm pretty sure nothing has changed in that area. 
VSIGetMemFileBuffer() has been used for long by a number of drivers in GDAL and 
none of them has ever had to do such weird things, so I'm quite skeptical 
there's a bug in that area, or it is something more subtle. Did you check that 
the issue is in GDAL itself, by breaking with the debugger or adding debug 
traces in VSIGetMemFileBuffer to check the buffer values ?

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sean at mapbox.com  Tue Sep 27 06:33:59 2016
From: sean at mapbox.com (Sean Gillies)
Date: Tue, 27 Sep 2016 15:33:59 +0200
Subject: [gdal-dev] Incorrect image bytes from VSIGetMemFileBuffer in
 GDAL < 2.1.0
In-Reply-To: <201609271459.12459.even.rouault@spatialys.com>
References: <CADPhZXzWDs1wiFWrw5tEUZ1ooaG6TMZMSDXyVzMKq2zspKpFLA@mail.gmail.com>
 <201609271459.12459.even.rouault@spatialys.com>
Message-ID: <CADPhZXwPQTeNmH9ftBF4zJqppjiOKUnu3NrsZQD8wf6qaAssXQ@mail.gmail.com>

On Tue, Sep 27, 2016 at 2:59 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le mardi 27 septembre 2016 14:09:30, Sean Gillies a écrit :
> > Hi all,
> >
> > I've got code in Rasterio that calls VSIGetMemFileBuffer to get PNG or
> JPEG
> > image bytes. With GDAL 1.11, I found that I had to fix the resulting byte
> > array by moving the last byte to the head of the array. With GDAL 2.1.0
> and
> > 2.1.1 this is no longer needed and we can return an unshifted array (see
> > the changeset below).
> >
> > https://github.com/mapbox/rio-mbtiles/compare/master...
> brendan-ward:bad_byt
> > es?expand=1#diff-cfcb7125bae0f25564785b33fa38d6a1L45
> >
> > I haven't been able to find the change in the change log or tracker. Can
> > anyone point me to the commit that changed this so I can pin down the
> > versions when it changed?
>
> Sean,
>
> This is super weird and I'm pretty sure nothing has changed in that area.
> VSIGetMemFileBuffer() has been used for long by a number of drivers in
> GDAL and
> none of them has ever had to do such weird things, so I'm quite skeptical
> there's a bug in that area, or it is something more subtle. Did you check
> that
> the issue is in GDAL itself, by breaking with the debugger or adding debug
> traces in VSIGetMemFileBuffer to check the buffer values ?
>
>
I have looked more closely and ruled out GDAL and then combed through the
Cython and CPython trackers, eventually finding the culprit:

  https://bugs.python.org/issue12834

It's been fixed in Python 3.3+ for several years but not fixed in 2.7 until
version 2.7.10. I'm happy to report that it's specific to Cython
memoryviews and not a problem for GDAL Python users.

Thanks for the quick response, Even, and apologies for the false alarm.

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160927/af27a560/attachment.html>

From francisco.javier.calzado at ericsson.com  Tue Sep 27 07:35:26 2016
From: francisco.javier.calzado at ericsson.com (Francisco Javier Calzado)
Date: Tue, 27 Sep 2016 14:35:26 +0000
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <6BA6E0BBA9988E428FA9178AB0B28B48576743E4@ESESSMB205.ericsson.se>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <CACJ51z3pS6bGJ36MXCV=gZA0bOUzsqnur1DTj0eEZsuVrHTJ-w@mail.gmail.com>
 <6BA6E0BBA9988E428FA9178AB0B28B4857673F25@ESESSMB205.ericsson.se>
 <201609261753.07636.even.rouault@spatialys.com>
 <6BA6E0BBA9988E428FA9178AB0B28B48576743E4@ESESSMB205.ericsson.se>
Message-ID: <6BA6E0BBA9988E428FA9178AB0B28B4857674AA1@ESESSMB205.ericsson.se>

Hi Even,

Your changes have fixed the issue with multiple threads, now they can write simultaneously without getting locked. I've done some test in GTiff format and everything went OK. However, using a custom-made driver for a new format (called Wizard), a new problem has arisen :( .

In that case, although threads finish its task and generate its corresponding output raster, 2 weird things happen randomly and (again) only when the block cache gets full during writing:
- Some blocks (lines) are missing, so they appear in the file with no data value. 
- Resulting file format is corrupted. 

It seems that 2 or more threads writing simultaneously (althought different threads) mess up the block cache to each other when trying to flush dirty blocks. I have tried to manually flush dirty blocks (either calling block->FlushDirtyBlocks() or block->Write() ) everytime a block is completely written in the cache, but it doesn't work.

My driver is simple, nothing too complex, actually was mostly taken from other drivers already implemented. Check below the IWriteMethod, just in case I made a mistake.

Do you have any clue what is happening here?


// *********************************************************************

CPLErr WIZARDRasterBand::IWriteBlock(CPL_UNUSED int nBlockXOff, int nBlockYOff, void * pImage)
{
	CPLAssert(nBlockXOff == 0);
	CPLAssert(eAccess == GA_Update);

	// By default, the count of pixels we want to write will be the natural block
	// size in pixels, except for the case of a padded block.
	int nPixelCount = this->nBlockSizeInPixels;
	if (this->bBlockPadding && (nBlockYOff == this->nPaddedBlockYIndex))
	{
		nPixelCount = this->nPaddedBlockSizeInPixels;
	}
	
	// Lets move it to the first position of the desired block.	
	if (VSIFSeekL(this->poWDS->fp,
		this->nHeaderSizeInBytes + this->nBlockSizeInBytes * nBlockYOff,
		SEEK_SET) != 0)
	{
		CPLError(CE_Failure, CPLE_FileIO,
			"Seek failed when writing block to Wizard driver: %s", VSIStrerror(errno));
		return CE_Failure;
	}   

	// Now Write.
	if (VSIFWriteL(pImage, this->nPixelSizeInBytes, nPixelCount, this->poWDS->fp) !=
		nPixelCount)
	{
		CPLError(CE_Failure, CPLE_FileIO,
			"Write failed when dumping block to Wizard driver: %s", VSIStrerror(errno));
		return CE_Failure;
	}

	return CE_None;
}
// *********************************************************************


Thanks,
BR. Javier.



-----Original Message-----
From: gdal-dev [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Francisco Javier Calzado
Sent: 27 September, 2016 09:50
To: Even Rouault <even.rouault at spatialys.com>; gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Multithread deadlock

Hi Even,

Thanks for such a quick fix! I'm gonna apply the patch and recompile GDAL and will let you know :)

Keep in touch.
Best Regards,
Javier Calzado



-----Original Message-----
From: Even Rouault [mailto:even.rouault at spatialys.com]
Sent: 26 September, 2016 17:53
To: gdal-dev at lists.osgeo.org
Cc: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>; Andrew Bell <andrew.bell.ia at gmail.com>
Subject: Re: [gdal-dev] Multithread deadlock

Hi,

I admire Andrew's enthousiasm and would happily let him tackle the next bug reported in this area ;-)

I could reproduce the deadlock with the same stack trace  and have pushed a fix per https://trac.osgeo.org/gdal/ticket/6661. This was actually not a typical deadlock situation, but a undefined behaviour caused by trying to acquire a recursive mutex than was previously released more times than it had been acquired.

Without this patch, a "workaround" would be to define the GDAL_ENABLE_READ_WRITE_MUTEX config option to NO to disable the per-dataset mutex. had added this option since I wasn't really sure that the per-dataset mutex wouldn't introduce deadlock situations. But when defining it, you'll get undefined behaviour (=potentially crashing or causing corruptions) due to 2 threads potentially calling the IWriteBlock() method of the same dataset,which was the GDAL 1.X behaviour.

Clearly multi-threading scenarios involving writing is the point where the global block cache mechanism + the band-aid of the per-dataset R/W mutex are showing their limit in terms of design&maintenance complexity, and scalability. A per-dataset block cache would avoid such headaches (the drawback would be to define a per-dataset block cache size)

Even

> Sure Andrew,
> 
> Here it is the call stack from Visual Studio for both threads (I just 
> copied the top calls where GDAL is involved, just for easy reading. If 
> you need the whole stack just let me know):
> 
> THREAD 1:
> 
>                 ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
>                ntdll.dll!_RtlpWaitOnCriticalSection at 8‑()            
> Unknown ntdll.dll!_RtlEnterCriticalSection at 4‑()    Unknown
>                gdal201.dll!CPLAcquireMutex(_CPLMutex * hMutexIn, double
> dfWaitInSeconds) Line 806               C++
> gdal201.dll!GDALDataset::EnterReadWrite(GDALRWFlag eRWFlag) Line 6102     
>   C++ gdal201.dll!GDALRasterBand::EnterReadWrite(GDALRWFlag eRWFlag) Line
> 5290 C++ gdal201.dll!GDALRasterBlock::Write() Line 742    C++
> gdal201.dll!GDALRasterBlock::Internalize() Line 917          C++
> gdal201.dll!GDALRasterBand::GetLockedBlockRef(int nXBlockOff, int
> nYBlockOff, int bJustInitialize) Line 1126                C++
> 
> >             Test.exe!RasterBandPixelAccess::SetValueAtPixel<short>(const
> >             int & pX, const int & pY, const short & value) Line 180     
> >                       C++
> 
> THREAD 2:
> 
>                 ntdll.dll!_NtWaitForSingleObject at 12‑() Unknown
>                KernelBase.dll!_WaitForSingleObjectEx at 12‑()   Unknown
>                kernel32.dll!_WaitForSingleObjectExImplementation at 12‑()     
>   Unknown kernel32.dll!_WaitForSingleObject at 8‑() Unknown
>                gdal201.dll!CPLCondWait(_CPLCond * hCond, _CPLMutex *
> hClientMutex) Line 937           C++
> gdal201.dll!GDALAbstractBandBlockCache::WaitKeepAliveCounter() Line 134   
>    C++ gdal201.dll!GDALArrayBandBlockCache::FlushCache() Line 312    C++
> gdal201.dll!GDALRasterBand::FlushCache() Line 865         C++
> gdal201.dll!GDALDataset::FlushCache() Line 386 C++
>                gdal201.dll!GDALPamDataset::FlushCache() Line 159        C++
>                gdal201.dll!GTiffDataset::Finalize() Line 6180       C++
>                gdal201.dll!GTiffDataset::~GTiffDataset() Line 6135         
>  C++ gdal201.dll!GTiffDataset::`scalar deleting destructor'(unsigned int) 
>          C++ gdal201.dll!GDALClose(void * hDS) Line 2998       C++
> 
> >             Test.exe!main::__l2::<lambda>(std::basic_string<char,std::cha
> >             r_traits<char>,std::allocator<char> > sourcefilePath,
> >             std::basic_string<char,std::char_traits<char>,std::allocator
> >             <char> > targetFilePath, int threadID) Line 66           C++
> 
> From: Andrew Bell [mailto:andrew.bell.ia at gmail.com]
> Sent: 26 September, 2016 16:06
> To: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>
> Cc: gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] Multithread deadlock
> 
> Deadlocks are usually easy to debug if you can get a traceback when 
> deadlocked.  If you can attach with gdb (or run in the debugger) and 
> reproduce and post the stack at the time ('where' from gdb), it should 
> be no problem to fix.  Trying to reproduce on different hardware can 
> be difficult.
> 
> On Mon, Sep 26, 2016 at 9:33 AM, Francisco Javier Calzado 
> <francisco.javier.calzado at ericsson.com<mailto:francisco.javier.calzado
> @eri
> csson.com>> wrote: Hi guys,
> 
> I am experiencing a deadlock with just 2 threads in a single reader & 
> multiple writer scenario. This is, threads read from the same input 
> file (using different handlers) and then write different output files.
> Deadlock comes when the block cache gets filled. The situation is the following:
> 
> 
> -          T1 and T2 read datasets D1 and D2, both pointing to the same
> input raster (GTiff).
> 
> -          Block cache gets filled.
> 
> -          T1 tries to lock one block in the cache to write data. But cache
> is full, so it tries to free dirty blocks from T2 (as seen in
> Internalize() method). For that purpose, it requires apparently a 
> mutex from D2.
> 
> -          However T2 is in a state where must wait for thread T1 to finish
> working with T2’s blocks. In this state, T2 has a mutex acquired from D2.
> 
> At least, that is what it seems to be happening based on source code. 
> Maybe I’m wrong, I don’t have a full picture overview about how GDAL 
> is internally working. The thing is that I can reproduce this issue 
> with the following test code and dataset:
> https://drive.google.com/file/d/0B-OCl1FjBi0YSkU3RUozZjc5SnM/view?usp=
> shar
> ing
> 
> Oddly enough, ticket with number #6163 is supposed to fix this, but 
> its failing in my case. I am working with GDAL 2.1.0 version under
> VS2015 (x32, Debug) compilation.
> 
> Even, what do you think?
> 
> Thanks!
> Javier C.
> 
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> 
> 
> --
> Andrew Bell
> andrew.bell.ia at gmail.com<mailto:andrew.bell.ia at gmail.com>

--
Spatialys - Geospatial professional services http://www.spatialys.com _______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/gdal-dev

From bishop.dev at gmail.com  Tue Sep 27 07:47:18 2016
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Tue, 27 Sep 2016 17:47:18 +0300
Subject: [gdal-dev] CAD (DWG) Driver
Message-ID: <bdff64f3-91c1-7967-541c-4a84a5fb051a@gmail.com>

Hi,

It seems to me the CAD (DWG) driver developed during Google Summer of 
Code 2016 is ready to merge into the trunk.

The pool request (https://github.com/OSGeo/gdal/pull/145) passed all 
checks. Are there any objections?

-- 
Best regards,
     Dmitry

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160927/70d87612/attachment.html>

From schwehr at gmail.com  Tue Sep 27 09:44:45 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 27 Sep 2016 09:44:45 -0700
Subject: [gdal-dev] CAD (DWG) Driver
In-Reply-To: <bdff64f3-91c1-7967-541c-4a84a5fb051a@gmail.com>
References: <bdff64f3-91c1-7967-541c-4a84a5fb051a@gmail.com>
Message-ID: <CACmBxyuw_Tc05AUs6LXdq5NzHD8eGcgeyHzzSTkB_RqArQc7jQ@mail.gmail.com>

I'm giving a quick look over.

On Tue, Sep 27, 2016 at 7:47 AM, Dmitry Baryshnikov <bishop.dev at gmail.com>
wrote:

> Hi,
>
> It seems to me the CAD (DWG) driver developed during Google Summer of Code
> 2016 is ready to merge into the trunk.
>
> The pool request (https://github.com/OSGeo/gdal/pull/145) passed all
> checks. Are there any objections?
>
> --
> Best regards,
>     Dmitry
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160927/6769fb8f/attachment.html>

From even.rouault at spatialys.com  Tue Sep 27 10:16:08 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 27 Sep 2016 19:16:08 +0200
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <6BA6E0BBA9988E428FA9178AB0B28B4857674AA1@ESESSMB205.ericsson.se>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <6BA6E0BBA9988E428FA9178AB0B28B48576743E4@ESESSMB205.ericsson.se>
 <6BA6E0BBA9988E428FA9178AB0B28B4857674AA1@ESESSMB205.ericsson.se>
Message-ID: <201609271916.08886.even.rouault@spatialys.com>

Le mardi 27 septembre 2016 16:35:26, Francisco Javier Calzado a écrit :
> Hi Even,
> 
> Your changes have fixed the issue with multiple threads, now they can write
> simultaneously without getting locked. I've done some test in GTiff format
> and everything went OK. 

Did you try with other drivers, of the raw type, like ENVI since they look 
similar to your driver ?

> However, using a custom-made driver for a new
> format (called Wizard), a new problem has arisen :( .
> 
> In that case, although threads finish its task and generate its
> corresponding output raster, 2 weird things happen randomly and (again)
> only when the block cache gets full during writing: - Some blocks (lines)
> are missing, so they appear in the file with no data value. - Resulting
> file format is corrupted.
> 
> It seems that 2 or more threads writing simultaneously (althought different
> threads) mess up the block cache to each other when trying to flush dirty
> blocks. I have tried to manually flush dirty blocks (either calling
> block->FlushDirtyBlocks() or block->Write() ) everytime a block is
> completely written in the cache, but it doesn't work.
> 
> My driver is simple, nothing too complex, actually was mostly taken from
> other drivers already implemented. Check below the IWriteMethod, just in
> case I made a mistake.
> 
> Do you have any clue what is happening here?

Do you call FlushCache() in the destructor of your dataset class ? But if you 
didn't do, you'd also have issues in non threaded scenarios.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Tue Sep 27 11:40:00 2016
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 27 Sep 2016 11:40:00 -0700
Subject: [gdal-dev] CAD (DWG) Driver
In-Reply-To: <CACmBxyuw_Tc05AUs6LXdq5NzHD8eGcgeyHzzSTkB_RqArQc7jQ@mail.gmail.com>
References: <bdff64f3-91c1-7967-541c-4a84a5fb051a@gmail.com>
 <CACmBxyuw_Tc05AUs6LXdq5NzHD8eGcgeyHzzSTkB_RqArQc7jQ@mail.gmail.com>
Message-ID: <CACmBxysMDrQkaUWDV+txOPP9fwxfVX347f46A+i39VWGyKq4RQ@mail.gmail.com>

Ran out of time, but I got part way through and a lot of the comments are
repeats.

https://github.com/OSGeo/gdal/pull/145#pullrequestreview-1773851

On Tue, Sep 27, 2016 at 9:44 AM, Kurt Schwehr <schwehr at gmail.com> wrote:

> I'm giving a quick look over.
>
> On Tue, Sep 27, 2016 at 7:47 AM, Dmitry Baryshnikov <bishop.dev at gmail.com>
> wrote:
>
>> Hi,
>>
>> It seems to me the CAD (DWG) driver developed during Google Summer of
>> Code 2016 is ready to merge into the trunk.
>>
>> The pool request (https://github.com/OSGeo/gdal/pull/145) passed all
>> checks. Are there any objections?
>>
>> --
>> Best regards,
>>     Dmitry
>>
>>
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>
>
>
> --
> --
> http://schwehr.org
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160927/ff4fc892/attachment.html>

From francisco.javier.calzado at ericsson.com  Wed Sep 28 00:55:25 2016
From: francisco.javier.calzado at ericsson.com (Francisco Javier Calzado)
Date: Wed, 28 Sep 2016 07:55:25 +0000
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <201609271916.08886.even.rouault@spatialys.com>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <6BA6E0BBA9988E428FA9178AB0B28B48576743E4@ESESSMB205.ericsson.se>
 <6BA6E0BBA9988E428FA9178AB0B28B4857674AA1@ESESSMB205.ericsson.se>
 <201609271916.08886.even.rouault@spatialys.com>
Message-ID: <6BA6E0BBA9988E428FA9178AB0B28B4857675043@ESESSMB205.ericsson.se>

Hi Even,

Bingo! I've just tested with an ENVI dataset and is failing, same issue with a few random blocks missing in the resulting rasters. Find below a link with the code for a simple test reproducing the issue (also included the ENVI dataset used). Just bear in mind that sometimes may generate the final raster properly, although, based on my testing, it is highly probable to get missing blocks with just a few runs:

https://drive.google.com/open?id=0B-OCl1FjBi0YUkN4WWZmRjRfM1k

I'm not sure if it is related with the RawRasterBand, as my custom-driver does not inherit from that class. However, both drivers, ENVI and mine, inherit its custom raster band from GDALPamRasterBand. Oh .... now I see, RawRasterBand/RawDataset inherit from GDALPam corresponding objects .... Something weird its happening in the common part of these drivers...


P.D.: Yes, I call FlushCache() on dataset destructor.




-----Original Message-----
From: Even Rouault [mailto:even.rouault at spatialys.com] 
Sent: 27 September, 2016 19:16
To: Francisco Javier Calzado <francisco.javier.calzado at ericsson.com>
Cc: gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Multithread deadlock

Le mardi 27 septembre 2016 16:35:26, Francisco Javier Calzado a écrit :
> Hi Even,
> 
> Your changes have fixed the issue with multiple threads, now they can 
> write simultaneously without getting locked. I've done some test in 
> GTiff format and everything went OK.

Did you try with other drivers, of the raw type, like ENVI since they look similar to your driver ?

> However, using a custom-made driver for a new format (called Wizard), 
> a new problem has arisen :( .
> 
> In that case, although threads finish its task and generate its 
> corresponding output raster, 2 weird things happen randomly and 
> (again) only when the block cache gets full during writing: - Some 
> blocks (lines) are missing, so they appear in the file with no data 
> value. - Resulting file format is corrupted.
> 
> It seems that 2 or more threads writing simultaneously (althought 
> different
> threads) mess up the block cache to each other when trying to flush 
> dirty blocks. I have tried to manually flush dirty blocks (either 
> calling
> block->FlushDirtyBlocks() or block->Write() ) everytime a block is
> completely written in the cache, but it doesn't work.
> 
> My driver is simple, nothing too complex, actually was mostly taken 
> from other drivers already implemented. Check below the IWriteMethod, 
> just in case I made a mistake.
> 
> Do you have any clue what is happening here?

Do you call FlushCache() in the destructor of your dataset class ? But if you didn't do, you'd also have issues in non threaded scenarios.

--
Spatialys - Geospatial professional services http://www.spatialys.com

From even.rouault at spatialys.com  Wed Sep 28 01:10:41 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Sep 2016 10:10:41 +0200
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <6BA6E0BBA9988E428FA9178AB0B28B4857675043@ESESSMB205.ericsson.se>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <201609271916.08886.even.rouault@spatialys.com>
 <6BA6E0BBA9988E428FA9178AB0B28B4857675043@ESESSMB205.ericsson.se>
Message-ID: <201609281010.41346.even.rouault@spatialys.com>

Francisco,

> Bingo! I've just tested with an ENVI dataset and is failing, same issue
> with a few random blocks missing in the resulting rasters. Find below a
> link with the code for a simple test reproducing the issue (also included
> the ENVI dataset used). Just bear in mind that sometimes may generate the
> final raster properly, although, based on my testing, it is highly
> probable to get missing blocks with just a few runs:
> 
> https://drive.google.com/open?id=0B-OCl1FjBi0YUkN4WWZmRjRfM1k
> 

Please create a ticket about that in Trac.

> I'm not sure if it is related with the RawRasterBand, as my custom-driver
> does not inherit from that class. However, both drivers, ENVI and mine,
> inherit its custom raster band from GDALPamRasterBand. Oh .... now I see,
> RawRasterBand/RawDataset inherit from GDALPam corresponding objects ....
> Something weird its happening in the common part of these drivers...

I don't think this comes from GDALPam, but rather from the lower level 
machinery of GDALRasterBand & GDALRasterBlock. As I said before, multi-
threaded writing has never properly worked and I'm not sure if the issue you 
see is just an implementation bug or a design bug.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sean at mapbox.com  Wed Sep 28 01:10:09 2016
From: sean at mapbox.com (Sean Gillies)
Date: Wed, 28 Sep 2016 10:10:09 +0200
Subject: [gdal-dev] RFC 65: IETF RFC7946 GeoJSON
Message-ID: <CADPhZXzBwWdjbNeO4xK7pBu+pt3t7apBaek5X9nXO_7TVqms3Q@mail.gmail.com>

Hi all,

I've created a new RFC based on our list discussion.

https://trac.osgeo.org/gdal/wiki/rfc65_rfc7946_geojson

Thanks for your input!

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/f8631af8/attachment.html>

From even.rouault at spatialys.com  Wed Sep 28 04:58:31 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Sep 2016 13:58:31 +0200
Subject: [gdal-dev] Call for discussion on RFC 66: OGR random layer
	read/write capabilities
Message-ID: <201609281358.31295.even.rouault@spatialys.com>

Hi,

This is a call for discussion on "RFC 66: OGR random layer read/write 
capabilities" :

https://trac.osgeo.org/gdal/wiki/rfc66_randomlayerreadwrite

This RFC introduces a new API to be able to iterate over vector features at 
dataset level, in addition to the existing capability of doing it at the layer 
level. The existing capability of writing features in layers in random order, 
that is supported by most drivers with output capabilities, is formalized with 
a new dataset capability flag.

Best regards,

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From risto.ilves at maanmittauslaitos.fi  Wed Sep 28 04:59:00 2016
From: risto.ilves at maanmittauslaitos.fi (Ilves Risto (MML))
Date: Wed, 28 Sep 2016 11:59:00 +0000
Subject: [gdal-dev] Python crash with gdal_array
Message-ID: <f205405f78e449388fbfe0be0e618255@C119S212VM013.msvyvi.vaha.local>

Hi,

Python crashes in OSGeo4W python-qgis installation, when I import gdal_array. So, just the line "from osgeo import gdal_array" causes this problem.

If I do separate installation for GDAL and python, then there is no problem. I would use python-qgis installation, since then I have all the packages available without separate installation.

Any idea, how to fix this?

Regards,

Risto Ilves




-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/aab19685/attachment.html>

From Odd-Ragnar.Lydersen at powel.no  Wed Sep 28 05:00:36 2016
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Wed, 28 Sep 2016 12:00:36 +0000
Subject: [gdal-dev] WFS driver bug1
Message-ID: <BD69AB4022C5C34DAC908920605A87025A61236C@MAIL.powelasa.powel.com>

When I'm using the WFS driver for version 1.0.0, or version 1.1.0 then I get some error messages back from GDAL, when the service is password protected.
I have not tested this for version 2.x.

Here is what I have found out:

1)      Calls to CPLHTTPFetch() from OGRWFSDataSource::HTTPFetch() is sent with UserPwd in papszOptions parameter.

2)      Calls to CPLHTTPFetch() from OGRGMLDataSource::Open() is sent without UserPwd in papszOptions parameter,
in fact the calls from the GML driver is always called with the parameter set to NULL .

Even though I get these errors, I'm still able to read features from the service.

But why are the calls in the GML driver, (on behalf of the WFS driver), made without UserPwd in papszOptions parameter?

I have attached some output from the calls tack, so you can see which calls are causing this behaviour.


Best regards
Odd-Ragnar Lydersen
System Developer

Powel AS Storgata 27B, Pb 369, N-4349 Bryne, NORWAY
Email: odd-ragnar.lydersen at powel.no<mailto:odd-ragnar.lydersen at powel.no>
www.powel.no<http://www.powel.com/>
[cid:image002.jpg at 01CDD1F7.F470C190]<http://www.powel.no/en>[cid:image004.jpg at 01CDD1F7.F470C190]<https://www.facebook.com/pages/Powel/350917775700>[cid:image006.jpg at 01CDD1F7.F470C190]<http://www.linkedin.com/company/powel-as>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/08271e6f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 1268 bytes
Desc: image001.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/08271e6f/attachment-0003.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image002.jpg
Type: image/jpeg
Size: 870 bytes
Desc: image002.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/08271e6f/attachment-0004.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.jpg
Type: image/jpeg
Size: 909 bytes
Desc: image003.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/08271e6f/attachment-0005.jpg>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: CallStackGdalWfs.txt
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/08271e6f/attachment-0001.txt>

From Odd-Ragnar.Lydersen at powel.no  Wed Sep 28 05:10:13 2016
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Wed, 28 Sep 2016 12:10:13 +0000
Subject: [gdal-dev] WFS driver bug2 - MAXFEATURES not working
Message-ID: <BD69AB4022C5C34DAC908920605A87025A6123A0@MAIL.powelasa.powel.com>

When I use the WFS driver (GDAL 2.1.1) for version 1.0.0 or 1.1.0, and add MAXFEATURES to the url, then I get zero features retuned, from the service.
If I drop MAXFEATURES in the request-url, then I get all the features in my bounding box returned from the service.

This is a password protected service, could it be related to my "WFS driver bug1"?

Med vennlig hilsen
Odd-Ragnar Lydersen
System Developer

Powel AS Storgata 27B, Pb 369, N-4349 Bryne, NORWAY
Email: odd-ragnar.lydersen at powel.no<mailto:odd-ragnar.lydersen at powel.no>
www.powel.no<http://www.powel.com/>
[cid:image002.jpg at 01CDD1F7.F470C190]<http://www.powel.no/en>[cid:image004.jpg at 01CDD1F7.F470C190]<https://www.facebook.com/pages/Powel/350917775700>[cid:image006.jpg at 01CDD1F7.F470C190]<http://www.linkedin.com/company/powel-as>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/923efcba/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 1268 bytes
Desc: image001.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/923efcba/attachment.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image002.jpg
Type: image/jpeg
Size: 870 bytes
Desc: image002.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/923efcba/attachment-0001.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.jpg
Type: image/jpeg
Size: 909 bytes
Desc: image003.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160928/923efcba/attachment-0002.jpg>

From even.rouault at spatialys.com  Wed Sep 28 05:17:21 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Sep 2016 14:17:21 +0200
Subject: [gdal-dev] WFS driver bug1
In-Reply-To: <BD69AB4022C5C34DAC908920605A87025A61236C@MAIL.powelasa.powel.com>
References: <BD69AB4022C5C34DAC908920605A87025A61236C@MAIL.powelasa.powel.com>
Message-ID: <201609281417.21647.even.rouault@spatialys.com>

Le mercredi 28 septembre 2016 14:00:36, Odd Ragnar Lydersen a écrit :
> When I'm using the WFS driver for version 1.0.0, or version 1.1.0 then I
> get some error messages back from GDAL, when the service is password
> protected. I have not tested this for version 2.x.
> 
> Here is what I have found out:
> 
> 1)      Calls to CPLHTTPFetch() from OGRWFSDataSource::HTTPFetch() is sent
> with UserPwd in papszOptions parameter.
> 
> 2)      Calls to CPLHTTPFetch() from OGRGMLDataSource::Open() is sent
> without UserPwd in papszOptions parameter, in fact the calls from the GML
> driver is always called with the parameter set to NULL .
> 
> Even though I get these errors, I'm still able to read features from the
> service.

The call to CPLHTTPFetch() in the GML driver is to retrieve the XSD from the 
schemaLocation attribute. 
If the driver doesn't manage to retrieve the schema, then it guesses it, which 
explains why this still works despite the error.

> 
> But why are the calls in the GML driver, (on behalf of the WFS driver),
> made without UserPwd in papszOptions parameter?

Because this hasn't been yet implemented. Patch welcome. This would involve 
adding new open options to the GML driver and set them in the WFS driver.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Odd-Ragnar.Lydersen at powel.no  Thu Sep 29 01:06:12 2016
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Thu, 29 Sep 2016 08:06:12 +0000
Subject: [gdal-dev] WFS driver bug2 - MAXFEATURES not working
In-Reply-To: <BD69AB4022C5C34DAC908920605A87025A6123A0@MAIL.powelasa.powel.com>
References: <BD69AB4022C5C34DAC908920605A87025A6123A0@MAIL.powelasa.powel.com>
Message-ID: <BD69AB4022C5C34DAC908920605A87025A61243D@MAIL.powelasa.powel.com>

So I have tried to dig a bit more into this, and I have noticed a few things.


1)      I set MAXFEATURES=60 in the url

2)      I select the layer I want to work with, let's call it MyLayer.

3)      I call SetSpatialFilterRect() on the MyLayer and set it to a small area containing 11 points.

4)      I call GetFeatureCount() on MyLayer, and then I get 60 features returned, even though I know it should be spatially bound to an area containing only 11 features.

5)      Then I should be iterating through all the features, using GetNextFeature(), but no features are read.

In 4), the result from GetFeatureCount(), should have been 11.
In 5), I should have been able to read the expected 11 features.


>From the code in ogrwfslayer.cpp in GIntBig OGRWFSLayer::ExecuteGetFeatureResultTypeHits():

/* Hum, http://deegree3-testing.deegree.org:80/deegree-inspire-node/services?MAXFEATURES=10&SERVICE=WFS&VERSION=1.1.0&REQUEST=GetFeature&TYPENAME=ad:Address&OUTPUTFORMAT=text/xml;%20subtype=gml/3.2.1&RESULTTYPE=hits */
/* returns more than MAXFEATURES features... So truncate to MAXFEATURES */
CPLString osMaxFeatures = CPLURLGetValue(osURL, atoi(poDS->GetVersion()) >= 2 ? "COUNT" : "MAXFEATURES");

Does this mean that the use of MAXFEATURES isn't working?
Have not tested this on WFS version 2.x.
Can anyone confirm if it's working in that version?
It would be nice to know.

We may decide to have a go at fixing this in the future, but for now we're just going to disable the use of MAXFEATURES, and just use, SetSpatialFilterRect(), to restrain the number of features returned from a layer.

>Odd-Ragnar<

Fra: Odd Ragnar Lydersen [mailto:Odd-Ragnar.Lydersen at powel.no]
Sendt: onsdag 28. september 2016 14.10
Til: gdal-dev at lists.osgeo.org
Emne: [gdal-dev] WFS driver bug2 - MAXFEATURES not working

When I use the WFS driver (GDAL 2.1.1) for version 1.0.0 or 1.1.0, and add MAXFEATURES to the url, then I get zero features retuned, from the service.
If I drop MAXFEATURES in the request-url, then I get all the features in my bounding box returned from the service.

This is a password protected service, could it be related to my "WFS driver bug1"?

Med vennlig hilsen
Odd-Ragnar Lydersen
System Developer

Powel AS Storgata 27B, Pb 369, N-4349 Bryne, NORWAY
Email: odd-ragnar.lydersen at powel.no<mailto:odd-ragnar.lydersen at powel.no>
www.powel.no<http://www.powel.com/>
[cid:image002.jpg at 01CDD1F7.F470C190]<http://www.powel.no/en>[cid:image004.jpg at 01CDD1F7.F470C190]<https://www.facebook.com/pages/Powel/350917775700>[cid:image006.jpg at 01CDD1F7.F470C190]<http://www.linkedin.com/company/powel-as>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160929/8a904ea3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 1268 bytes
Desc: image001.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160929/8a904ea3/attachment.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image002.jpg
Type: image/jpeg
Size: 870 bytes
Desc: image002.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160929/8a904ea3/attachment-0001.jpg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.jpg
Type: image/jpeg
Size: 909 bytes
Desc: image003.jpg
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160929/8a904ea3/attachment-0002.jpg>

From even.rouault at spatialys.com  Thu Sep 29 02:19:55 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 29 Sep 2016 11:19:55 +0200
Subject: [gdal-dev] WFS driver bug2 - MAXFEATURES not working
In-Reply-To: <BD69AB4022C5C34DAC908920605A87025A61243D@MAIL.powelasa.powel.com>
References: <BD69AB4022C5C34DAC908920605A87025A6123A0@MAIL.powelasa.powel.com>
 <BD69AB4022C5C34DAC908920605A87025A61243D@MAIL.powelasa.powel.com>
Message-ID: <201609291119.55396.even.rouault@spatialys.com>

Le jeudi 29 septembre 2016 10:06:12, Odd Ragnar Lydersen a écrit :
> So I have tried to dig a bit more into this, and I have noticed a few
> things.
> 
> 
> 1)      I set MAXFEATURES=60 in the url
> 
> 2)      I select the layer I want to work with, let's call it MyLayer.
> 
> 3)      I call SetSpatialFilterRect() on the MyLayer and set it to a small
> area containing 11 points.
> 
> 4)      I call GetFeatureCount() on MyLayer, and then I get 60 features
> returned, even though I know it should be spatially bound to an area
> containing only 11 features.
> 
> 5)      Then I should be iterating through all the features, using
> GetNextFeature(), but no features are read.
> 
> In 4), the result from GetFeatureCount(), should have been 11.
> In 5), I should have been able to read the expected 11 features.
> 

The WFS driver has quite a bunch of optimizations (and workarounds for buggy implementations),
which are as many doors for more or less subtle bugs, but in my below testing, that seems to work :

$ python
>>> from osgeo import ogr
>>> ds = ogr.Open('WFS:http://demo.mapserver.org/cgi-bin/wfs?VERSION=1.0.0&MAXFEATURES=1')
>>> lyr = ds.GetLayerByName('continents')
>>> lyr.SetSpatialFilterRect(0,45,15,50)
>>> print(lyr.GetFeatureCount())
1
>>> f = lyr.GetNextFeature()
>>> print(f['NA2DESC'])
'Italy'
>>> f = lyr.GetNextFeature()
>>> print(f)
None

or from the command line :
$ ogrinfo -ro "WFS:http://demo.mapserver.org/cgi-bin/wfs?VERSION=1.0.0&MAXFEATURES=1"  continents -al  -spat 0 45 15 50
INFO: Open of `WFS:http://demo.mapserver.org/cgi-bin/wfs?VERSION=1.0.0&MAXFEATURES=1'
      using driver `WFS' successful.
Metadata:
  ABSTRACT=This demonstration server showcases MapServer (www.mapserver.org) and its OGC support
  TITLE=WMS Demo Server for MapServer

Layer name: continents
Metadata:
  TITLE=World continents
Geometry: Unknown (any)
Feature Count: 1
Extent: (13.427750, 45.697224) - (13.439472, 45.711639)
Layer SRS WKT:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,
        AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.0174532925199433,
        AUTHORITY["EPSG","9122"]],
    AUTHORITY["EPSG","4326"]]
Geometry Column = msGeometry
gml_id: String (0.0) NOT NULL
NA2DESC: String (0.0)
NA3DESC: String (0.0)
OGRFeature(continents):22518
  gml_id (String) = continents.22518
  NA2DESC (String) = Italy
  NA3DESC (String) = Europe
  POLYGON ((13.437944 45.708195,13.438861 45.706806,13.439472 45.705387,13.438694 45.702862,13.436277 45.700832,13.432834 45.697224,13.431194 45.697472,13.430611 
45.699085,13.432083 45.702999,13.432167 45.704613,13.430305 45.707443,13.42775 45.709583,13.4285 45.711639,13.43275 45.710167,13.437944 45.708195))





Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jukka.rahkonen at maanmittauslaitos.fi  Thu Sep 29 03:54:13 2016
From: jukka.rahkonen at maanmittauslaitos.fi (Rahkonen Jukka (MML))
Date: Thu, 29 Sep 2016 10:54:13 +0000
Subject: [gdal-dev] GPKG: Drop table but how to drop the rest?
Message-ID: <7e6c930a30694930907eb1b25c81135e@C119S212VM022.msvyvi.vaha.local>

Hi,

I wonder if it could be possible to do something like "DROP CASCADING" in GeoPackage and delete the spatial index by the same. It will for sure be unusable once the table is dropped. I feel that SQLite does not support that because cascading drop seems to require that parent and child tables have foreign key relation, but RTree index which is created through the Virtual RTRee does not offer any way for defining the foreign key.

I know I can delete the index with another SQL request with ogrinfo

ogrinfo -sql "drop table bar" foo.gpkg
ogrinfo -sql "drop table rtree_bar_geom" foo.gpkg

Metadata tables are not cleaned automatically and two more commands would be needed:

ogrinfo -sql "delete from gpkg_contents where table_name='bar' and identifier='bar'" foo.gpkg
ogrinfo -sql "delete from gpkg_geometry_columns where table_name='bar' and column_name='geom'" foo.gpkg

However, it is impossible to run the latter one because GPKG database is at this moment in a bad shape


ogrinfo -sql "delete from gpkg_geometry_columns where table_name=bar' and column_name='geom'" foo.gpkg
ERROR 1: bad result for PRAGMA foreign_key_check, got 1 rows, expected 0
ERROR 1: pragma foreign_key_check on 'foo.gpkg' failed
ERROR 1: bad result for PRAGMA foreign_key_check, got 1 rows, expected 0
ERROR 1: pragma foreign_key_check on 'foo.gpkg' failed
FAILURE:
Unable to open datasource `foo.gpkg' with the following drivers.
...
I can delete that row from gpkg_geometry_columns with spatialite_gui.

So what is the right procedure and order for dropping a table from GeoPackage with ogrinfo?

-Jukka Rahkonen-
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20160929/0807ab64/attachment.html>

From even.rouault at spatialys.com  Thu Sep 29 04:13:17 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 29 Sep 2016 13:13:17 +0200
Subject: [gdal-dev] GPKG: Drop table but how to drop the rest?
In-Reply-To: <7e6c930a30694930907eb1b25c81135e@C119S212VM022.msvyvi.vaha.local>
References: <7e6c930a30694930907eb1b25c81135e@C119S212VM022.msvyvi.vaha.local>
Message-ID: <201609291313.17961.even.rouault@spatialys.com>

Hi Jukka,

> 
> I wonder if it could be possible to do something like "DROP CASCADING" in
> GeoPackage and delete the spatial index by the same. 

I will work in a short term on this (as well as renaming columns)

The "usual" syntax "ogrinfo -sql 'DELLAYER:bar' foo.gpkg" will be available, 
and will be done through the proper OGRLayer::DeleteLayer() implementation.

> It will for sure be
> unusable once the table is dropped. I feel that SQLite does not support
> that because cascading drop seems to require that parent and child tables
> have foreign key relation, but RTree index which is created through the
> Virtual RTRee does not offer any way for defining the foreign key.
> 
> I know I can delete the index with another SQL request with ogrinfo
> 
> ogrinfo -sql "drop table bar" foo.gpkg
> ogrinfo -sql "drop table rtree_bar_geom" foo.gpkg
> 
> Metadata tables are not cleaned automatically and two more commands would
> be needed:
> 
> ogrinfo -sql "delete from gpkg_contents where table_name='bar' and
> identifier='bar'" foo.gpkg ogrinfo -sql "delete from gpkg_geometry_columns
> where table_name='bar' and column_name='geom'" foo.gpkg
> 
> However, it is impossible to run the latter one because GPKG database is at
> this moment in a bad shape

You can turn off integrity checking with OGR_GPKG_INTEGRITY_CHECK = NO as a 
config option (documented only in code, since there's little reason to turn 
that off usually)

> 
> 
> ogrinfo -sql "delete from gpkg_geometry_columns where table_name=bar' and
> column_name='geom'" foo.gpkg ERROR 1: bad result for PRAGMA
> foreign_key_check, got 1 rows, expected 0 ERROR 1: pragma
> foreign_key_check on 'foo.gpkg' failed
> ERROR 1: bad result for PRAGMA foreign_key_check, got 1 rows, expected 0
> ERROR 1: pragma foreign_key_check on 'foo.gpkg' failed
> FAILURE:
> Unable to open datasource `foo.gpkg' with the following drivers.
> ...
> I can delete that row from gpkg_geometry_columns with spatialite_gui.
> 
> So what is the right procedure and order for dropping a table from
> GeoPackage with ogrinfo?

Probably removing any reference to the table in gpkg_metadata*, gpkg_contents 
and gpkg_geometry_columns tables, then drop the rtree, then drop the main 
table.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Odd-Ragnar.Lydersen at powel.no  Thu Sep 29 04:18:54 2016
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Thu, 29 Sep 2016 11:18:54 +0000
Subject: [gdal-dev] WFS driver bug2 - MAXFEATURES not working
In-Reply-To: <201609291119.55396.even.rouault@spatialys.com>
References: <BD69AB4022C5C34DAC908920605A87025A6123A0@MAIL.powelasa.powel.com>
 <BD69AB4022C5C34DAC908920605A87025A61243D@MAIL.powelasa.powel.com>
 <201609291119.55396.even.rouault@spatialys.com>
Message-ID: <BD69AB4022C5C34DAC908920605A87025A6124B6@MAIL.powelasa.powel.com>

So it seems I have to do a bit more testing then.
Perhaps it's the server I'm accessing which is buggy then.

I'll have a go with the testserver you're using, and compare.

Thanks for the answer.

>Odd-Ragnar<

-----Opprinnelig melding-----
Fra: Even Rouault [mailto:even.rouault at spatialys.com] 
Sendt: torsdag 29. september 2016 11.20
Til: gdal-dev at lists.osgeo.org
Kopi: Odd Ragnar Lydersen <Odd-Ragnar.Lydersen at powel.no>
Emne: Re: [gdal-dev] WFS driver bug2 - MAXFEATURES not working

Le jeudi 29 septembre 2016 10:06:12, Odd Ragnar Lydersen a écrit :
> So I have tried to dig a bit more into this, and I have noticed a few 
> things.
> 
> 
> 1)      I set MAXFEATURES=60 in the url
> 
> 2)      I select the layer I want to work with, let's call it MyLayer.
> 
> 3)      I call SetSpatialFilterRect() on the MyLayer and set it to a small
> area containing 11 points.
> 
> 4)      I call GetFeatureCount() on MyLayer, and then I get 60 features
> returned, even though I know it should be spatially bound to an area 
> containing only 11 features.
> 
> 5)      Then I should be iterating through all the features, using
> GetNextFeature(), but no features are read.
> 
> In 4), the result from GetFeatureCount(), should have been 11.
> In 5), I should have been able to read the expected 11 features.
> 

The WFS driver has quite a bunch of optimizations (and workarounds for buggy implementations), which are as many doors for more or less subtle bugs, but in my below testing, that seems to work :

$ python
>>> from osgeo import ogr
>>> ds = 
>>> ogr.Open('WFS:http://demo.mapserver.org/cgi-bin/wfs?VERSION=1.0.0&MA
>>> XFEATURES=1') lyr = ds.GetLayerByName('continents')
>>> lyr.SetSpatialFilterRect(0,45,15,50)
>>> print(lyr.GetFeatureCount())
1
>>> f = lyr.GetNextFeature()
>>> print(f['NA2DESC'])
'Italy'
>>> f = lyr.GetNextFeature()
>>> print(f)
None

or from the command line :
$ ogrinfo -ro "WFS:http://demo.mapserver.org/cgi-bin/wfs?VERSION=1.0.0&MAXFEATURES=1"  continents -al  -spat 0 45 15 50
INFO: Open of `WFS:http://demo.mapserver.org/cgi-bin/wfs?VERSION=1.0.0&MAXFEATURES=1'
      using driver `WFS' successful.
Metadata:
  ABSTRACT=This demonstration server showcases MapServer (www.mapserver.org) and its OGC support
  TITLE=WMS Demo Server for MapServer

Layer name: continents
Metadata:
  TITLE=World continents
Geometry: Unknown (any)
Feature Count: 1
Extent: (13.427750, 45.697224) - (13.439472, 45.711639) Layer SRS WKT:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,
        AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.0174532925199433,
        AUTHORITY["EPSG","9122"]],
    AUTHORITY["EPSG","4326"]]
Geometry Column = msGeometry
gml_id: String (0.0) NOT NULL
NA2DESC: String (0.0)
NA3DESC: String (0.0)
OGRFeature(continents):22518
  gml_id (String) = continents.22518
  NA2DESC (String) = Italy
  NA3DESC (String) = Europe
  POLYGON ((13.437944 45.708195,13.438861 45.706806,13.439472 45.705387,13.438694 45.702862,13.436277 45.700832,13.432834 45.697224,13.431194 45.697472,13.430611
45.699085,13.432083 45.702999,13.432167 45.704613,13.430305 45.707443,13.42775 45.709583,13.4285 45.711639,13.43275 45.710167,13.437944 45.708195))





Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Thu Sep 29 16:04:49 2016
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 30 Sep 2016 01:04:49 +0200
Subject: [gdal-dev] Multithread deadlock
In-Reply-To: <201609281010.41346.even.rouault@spatialys.com>
References: <6BA6E0BBA9988E428FA9178AB0B28B4857673E13@ESESSMB205.ericsson.se>
 <6BA6E0BBA9988E428FA9178AB0B28B4857675043@ESESSMB205.ericsson.se>
 <201609281010.41346.even.rouault@spatialys.com>
Message-ID: <201609300104.49561.even.rouault@spatialys.com>

> I don't think this comes from GDALPam, but rather from the lower level
> machinery of GDALRasterBand & GDALRasterBlock. As I said before, multi-
> threaded writing has never properly worked and I'm not sure if the issue
> you see is just an implementation bug or a design bug.

OK, after investigation, it was just an implementation bug. A lack of mutex in 
GetLockedBlock() that caused IReadBlock() & IWriteBlock() to be called from 2 
different threads on the same dataset.

Fixed per https://trac.osgeo.org/gdal/ticket/6665

I think the issue was mostly due to using the low level  
GetLockedBlock()/MarkDirty()/DropLock() interfaces, and that people using 
RasterIO(GF_Read/GF_Write) should be immune to that bug due to locks being 
already taken at that stage.

Anyway fixed now (with a new test case similar to yours). Thanks for the 
reproducers.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From mdsumner at gmail.com  Fri Sep 30 23:20:06 2016
From: mdsumner at gmail.com (Michael Sumner)
Date: Sat, 01 Oct 2016 06:20:06 +0000
Subject: [gdal-dev] SQL FID 0- or 1-based
Message-ID: <CAAcGz9-n1+mY-6+wbkasVuZj+P7woo-uX1Tns7SZCE8nX6iEFw@mail.gmail.com>

Hello, I'm seeing that the OGRSQL virtual FID value is 0-based for
shapefile, and 1-based for MapInfo (TAB or MIF).

Is this driver-dependent generally, or is shapefile (or MI?) a special
case?

Using the autotest data I see

## no feature returned (there are 2)
ogrinfo autotest/ogr/data/seamless_part1.tab -sql "SELECT * FROM
seamless_part1 WHERE FID = 0"

## one feature returned
ogrinfo autotest/ogr/data/seamless_part1.tab -sql "SELECT * FROM
seamless_part1 WHERE FID = 2"

## create analogous SHP
ogr2ogr shp autotest/ogr/data/seamless_part1.tab seamless_part1

## one feature returned
ogrinfo shp -sql "SELECT * FROM seamless_part1 WHERE FID = 0"

## no feature returned
ogrinfo shp -sql "SELECT * FROM seamless_part1 WHERE FID = 2"

Cheers, Mike.
-- 
Dr. Michael Sumner
Software and Database Engineer
Australian Antarctic Division
203 Channel Highway
Kingston Tasmania 7050 Australia
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20161001/5fb04761/attachment.html>

From mdsumner at gmail.com  Fri Sep 30 23:23:09 2016
From: mdsumner at gmail.com (Michael Sumner)
Date: Sat, 01 Oct 2016 06:23:09 +0000
Subject: [gdal-dev] SQL FID 0- or 1-based
In-Reply-To: <CAAcGz9-n1+mY-6+wbkasVuZj+P7woo-uX1Tns7SZCE8nX6iEFw@mail.gmail.com>
References: <CAAcGz9-n1+mY-6+wbkasVuZj+P7woo-uX1Tns7SZCE8nX6iEFw@mail.gmail.com>
Message-ID: <CAAcGz9-mic_UhqEs=Q1MHQsKSzkGEkmnh_8fxdYUrVdUjntdVw@mail.gmail.com>

I forgot to add that I'm using 2.1.1, on Debian sid.

GDAL 2.1.1, released 2016/07/07

Cheers, Mike.



On Sat, 1 Oct 2016 at 16:20 Michael Sumner <mdsumner at gmail.com> wrote:

> Hello, I'm seeing that the OGRSQL virtual FID value is 0-based for
> shapefile, and 1-based for MapInfo (TAB or MIF).
>
> Is this driver-dependent generally, or is shapefile (or MI?) a special
> case?
>
> Using the autotest data I see
>
> ## no feature returned (there are 2)
> ogrinfo autotest/ogr/data/seamless_part1.tab -sql "SELECT * FROM
> seamless_part1 WHERE FID = 0"
>
> ## one feature returned
> ogrinfo autotest/ogr/data/seamless_part1.tab -sql "SELECT * FROM
> seamless_part1 WHERE FID = 2"
>
> ## create analogous SHP
> ogr2ogr shp autotest/ogr/data/seamless_part1.tab seamless_part1
>
> ## one feature returned
> ogrinfo shp -sql "SELECT * FROM seamless_part1 WHERE FID = 0"
>
> ## no feature returned
> ogrinfo shp -sql "SELECT * FROM seamless_part1 WHERE FID = 2"
>
> Cheers, Mike.
> --
> Dr. Michael Sumner
> Software and Database Engineer
> Australian Antarctic Division
> 203 Channel Highway
> Kingston Tasmania 7050 Australia
>
> --
Dr. Michael Sumner
Software and Database Engineer
Australian Antarctic Division
203 Channel Highway
Kingston Tasmania 7050 Australia
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20161001/ea5dc910/attachment.html>

