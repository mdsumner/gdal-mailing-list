From even.rouault at spatialys.com  Wed Apr  1 05:16:05 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 1 Apr 2015 14:16:05 +0200
Subject: [gdal-dev] UFO format / GDAL 3.0
Message-ID: <201504011416.05870.even.rouault@spatialys.com>

Hi,

Since some time a few ideas came to my mind and I felt today was a good one to 
share them and get feedback.
Considering the never ending proliferation of GIS file formats, currently 220 
handled in GDAL trunk, it seems wise to put an end to it. Especially since the 
counter used to iterate over the drivers is a unsigned 8 bit, so we will soon 
be unable to add more, or at the expense of sacrificing our ports to Intel 8008 
or Motorola 6800, which would be pretty sad.

Therefore I'd like to propose the UFO format, which stands for Universal 
Format Oh-yeaaah!
The basic idea of UFO is that it isn't a fixed format, but a varying and self-
described one. XML (or perhaps EXI?) + XSD + XSLT + XPath + Schematron could 
probably do it, but for efficiency I thought to a byte-code interpreted by 
libgdal and whose interface with libgdal would match the GDAL driver 
interface. So basically each dataset would contain its own driver. The big 
plus is that you could write image translators that would generate binary 
encodings optimized for the particular dataset being encoded: for example, it 
is kind of stupid to write the values of each pixel of a Mandelbrot fractal 
whereas its mathematical description fits into a few lines of code. 
Furthermore, still pursuing with that example, we could even have raster of 
arbitrary resolution, since that's a characteristics of fractals. And many GIS 
datasets have indeed fractal charasterics, such as coastlines ( 
http://en.wikipedia.org/wiki/Coastline_paradox )
For security reason, we should aim at supporting only simple & verifiable 
languages, so Brainfuck (Brainf**k for the most puritans of us) seems to be a 
good fit : http://en.wikipedia.org/wiki/Brainfuck. Basically it is a Turing 
complete language with only 8 commands. So as much powerful as needed, while 
being very easy to learn and implement. To save some efforts, I'd humbly 
suggest we adopt libbf ( http://savannah.nongnu.org/projects/libbf ), an older 
project of mine that also incorporates a on-the-fly optimizer & compiler for 
most popular architectures.

The plan would be to have an initial version of the UFO driver ready for GDAL 
2.0 and push strongly for its widespread adoption in all GIS, remote sensing, 
OSS & proprietary vendors, etc.... Perhaps we should establish a dedicated 
workgroup at OGC to make it a standard ? Then we could deprecate and remove 
all existing drivers and at the time of GDAL 3.0, UFO would be the only one 
remaining driver, making the Intel 8008 port very happy!

Happy to hear from your thoughts before formalizing that as a RFC,

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From dmorissette at mapgears.com  Wed Apr  1 07:17:12 2015
From: dmorissette at mapgears.com (Daniel Morissette)
Date: Wed, 01 Apr 2015 10:17:12 -0400
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <201504011416.05870.even.rouault@spatialys.com>
References: <201504011416.05870.even.rouault@spatialys.com>
Message-ID: <551BFDE8.3080800@mapgears.com>

Good morning Even,

That sounds like an ambitious world (universe?) domination plan, but 
before going too deep into the implementation details, can you comment 
on the potential for real life widespread adoption of such a universal 
format in a world where everyone and their dog wants to have their own 
file format which is so much better than everybody else's?

In other words: GML failed in a similar attempt to replace all other 
formats, so despite the benefits of BF over XML encoding, what would 
give UFO more chances of succeeding?

Have a nice ... day.

Daniel

On 2015-04-01 8:16 AM, Even Rouault wrote:
> Hi,
>
> Since some time a few ideas came to my mind and I felt today was a good one to
> share them and get feedback.
> Considering the never ending proliferation of GIS file formats, currently 220
> handled in GDAL trunk, it seems wise to put an end to it. Especially since the
> counter used to iterate over the drivers is a unsigned 8 bit, so we will soon
> be unable to add more, or at the expense of sacrificing our ports to Intel 8008
> or Motorola 6800, which would be pretty sad.
>
> Therefore I'd like to propose the UFO format, which stands for Universal
> Format Oh-yeaaah!
> The basic idea of UFO is that it isn't a fixed format, but a varying and self-
> described one. XML (or perhaps EXI?) + XSD + XSLT + XPath + Schematron could
> probably do it, but for efficiency I thought to a byte-code interpreted by
> libgdal and whose interface with libgdal would match the GDAL driver
> interface. So basically each dataset would contain its own driver. The big
> plus is that you could write image translators that would generate binary
> encodings optimized for the particular dataset being encoded: for example, it
> is kind of stupid to write the values of each pixel of a Mandelbrot fractal
> whereas its mathematical description fits into a few lines of code.
> Furthermore, still pursuing with that example, we could even have raster of
> arbitrary resolution, since that's a characteristics of fractals. And many GIS
> datasets have indeed fractal charasterics, such as coastlines (
> http://en.wikipedia.org/wiki/Coastline_paradox )
> For security reason, we should aim at supporting only simple & verifiable
> languages, so Brainfuck (Brainf**k for the most puritans of us) seems to be a
> good fit : http://en.wikipedia.org/wiki/Brainfuck. Basically it is a Turing
> complete language with only 8 commands. So as much powerful as needed, while
> being very easy to learn and implement. To save some efforts, I'd humbly
> suggest we adopt libbf ( http://savannah.nongnu.org/projects/libbf ), an older
> project of mine that also incorporates a on-the-fly optimizer & compiler for
> most popular architectures.
>
> The plan would be to have an initial version of the UFO driver ready for GDAL
> 2.0 and push strongly for its widespread adoption in all GIS, remote sensing,
> OSS & proprietary vendors, etc.... Perhaps we should establish a dedicated
> workgroup at OGC to make it a standard ? Then we could deprecate and remove
> all existing drivers and at the time of GDAL 3.0, UFO would be the only one
> remaining driver, making the Intel 8008 port very happy!
>
> Happy to hear from your thoughts before formalizing that as a RFC,
>
> Even
>


-- 
Daniel Morissette
T: +1 418-696-5056 #201
http://www.mapgears.com/
Provider of Professional MapServer Support since 2000

From matt.a.hanson at gmail.com  Wed Apr  1 07:31:49 2015
From: matt.a.hanson at gmail.com (Matt Hanson)
Date: Wed, 1 Apr 2015 10:31:49 -0400
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <551BFDE8.3080800@mapgears.com>
References: <201504011416.05870.even.rouault@spatialys.com>
	<551BFDE8.3080800@mapgears.com>
Message-ID: <CAGYeuZnrZ720NeJxvRD14AYWvEs8tJPX5q_c4=UZiV8mXH3ufQ@mail.gmail.com>

I think this is a great idea, finally users can be forced to stop using all
those silly formats.

But I think GDAL 3.0 needs a good slogan, may I suggest "There can be only
one" ?



On Wed, Apr 1, 2015 at 10:17 AM, Daniel Morissette <dmorissette at mapgears.com
> wrote:

> Good morning Even,
>
> That sounds like an ambitious world (universe?) domination plan, but
> before going too deep into the implementation details, can you comment on
> the potential for real life widespread adoption of such a universal format
> in a world where everyone and their dog wants to have their own file format
> which is so much better than everybody else's?
>
> In other words: GML failed in a similar attempt to replace all other
> formats, so despite the benefits of BF over XML encoding, what would give
> UFO more chances of succeeding?
>
> Have a nice ... day.
>
> Daniel
>
>
> On 2015-04-01 8:16 AM, Even Rouault wrote:
>
>> Hi,
>>
>> Since some time a few ideas came to my mind and I felt today was a good
>> one to
>> share them and get feedback.
>> Considering the never ending proliferation of GIS file formats, currently
>> 220
>> handled in GDAL trunk, it seems wise to put an end to it. Especially
>> since the
>> counter used to iterate over the drivers is a unsigned 8 bit, so we will
>> soon
>> be unable to add more, or at the expense of sacrificing our ports to
>> Intel 8008
>> or Motorola 6800, which would be pretty sad.
>>
>> Therefore I'd like to propose the UFO format, which stands for Universal
>> Format Oh-yeaaah!
>> The basic idea of UFO is that it isn't a fixed format, but a varying and
>> self-
>> described one. XML (or perhaps EXI?) + XSD + XSLT + XPath + Schematron
>> could
>> probably do it, but for efficiency I thought to a byte-code interpreted by
>> libgdal and whose interface with libgdal would match the GDAL driver
>> interface. So basically each dataset would contain its own driver. The big
>> plus is that you could write image translators that would generate binary
>> encodings optimized for the particular dataset being encoded: for
>> example, it
>> is kind of stupid to write the values of each pixel of a Mandelbrot
>> fractal
>> whereas its mathematical description fits into a few lines of code.
>> Furthermore, still pursuing with that example, we could even have raster
>> of
>> arbitrary resolution, since that's a characteristics of fractals. And
>> many GIS
>> datasets have indeed fractal charasterics, such as coastlines (
>> http://en.wikipedia.org/wiki/Coastline_paradox )
>> For security reason, we should aim at supporting only simple & verifiable
>> languages, so Brainfuck (Brainf**k for the most puritans of us) seems to
>> be a
>> good fit : http://en.wikipedia.org/wiki/Brainfuck. Basically it is a
>> Turing
>> complete language with only 8 commands. So as much powerful as needed,
>> while
>> being very easy to learn and implement. To save some efforts, I'd humbly
>> suggest we adopt libbf ( http://savannah.nongnu.org/projects/libbf ), an
>> older
>> project of mine that also incorporates a on-the-fly optimizer & compiler
>> for
>> most popular architectures.
>>
>> The plan would be to have an initial version of the UFO driver ready for
>> GDAL
>> 2.0 and push strongly for its widespread adoption in all GIS, remote
>> sensing,
>> OSS & proprietary vendors, etc.... Perhaps we should establish a dedicated
>> workgroup at OGC to make it a standard ? Then we could deprecate and
>> remove
>> all existing drivers and at the time of GDAL 3.0, UFO would be the only
>> one
>> remaining driver, making the Intel 8008 port very happy!
>>
>> Happy to hear from your thoughts before formalizing that as a RFC,
>>
>> Even
>>
>>
>
> --
> Daniel Morissette
> T: +1 418-696-5056 #201
> http://www.mapgears.com/
> Provider of Professional MapServer Support since 2000
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/7a460df4/attachment-0001.html>

From sean at mapbox.com  Wed Apr  1 08:24:47 2015
From: sean at mapbox.com (Sean Gillies)
Date: Wed, 1 Apr 2015 09:24:47 -0600
Subject: [gdal-dev] GSOC 2015 proposal - Integration of cpp GDAL
 utilities into GDAL core library
In-Reply-To: <201503272108.34617.even.rouault@spatialys.com>
References: <CABRzcz8BOrqcbSW3=XMf+fxZO7txG2j+jys3dnHPEYbdoLVVfQ@mail.gmail.com>
	<CADEnnOPw9DVCBRQjZUHCb9+QREYBOG2pzTTO6XoOB+qkwtvwOw@mail.gmail.com>
	<201503272108.34617.even.rouault@spatialys.com>
Message-ID: <CADPhZXw1+4Xd7_NVr-8Gcq3mKwOxWnHUqHCovgqWqXQ+SXj39w@mail.gmail.com>

Hi all,

I'm not entirely clear on the signatures of the new functions. Are we
considering new functions that would be called with a single string
argument like this?

  ogr2ogr('-of "ESRI Shapefile" example.shp example.json')

>From my perspective this would be sort of a disaster. Instead of using
features of our programming languages to handle function arguments (good),
we'd be formatting strings (bad). It's much better to have this:

  ogr2ogr('example.json', 'example.shp', of='ESRI Shapefile')

Why? Your compiler can then catch trivial errors at compile time if you're
using a statically typed language. Your Python linter (for example) can
warn you about whether you're calling the function properly or not if
you're using a dynamic language. Not to mention that there are many
different ways to generate strings in programming languages. Python has
some fast ones and some slow ones. I'm concerned that introducing functions
with a single string argument, while a shortcut now, increases the number
of dumb string munging questions and cost of support over time.


On Fri, Mar 27, 2015 at 2:08 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Peter,
>
> > Maybe I've missed the point (through over familiarity with GDAL/OGR?)
> > .... but these utilities were originally branded as 'worked examples'
> > of how to use the substantive libraries to perform well understood
> > operations from which usage of the libraries might be readily
> > understood.  Each utility is itself a commented set of function calls
> > to the relevent GDAL libraries.
>
> There is non trivial logic involved in some of the utilities (e.g. ogr2ogr)
> and people have the choice between :
> - doing a system call ("ogr2ogr ...."), but this isn't practical to deal
> with
> progress report, cancellation, or operating on in-memory datasets
> - copy&pasting the source code of the utility in their own code, and
> "librarify'ing" it to remove exit(), etc...
> - learning the GDAL/OGR API to do their own custom processing chain. More
> powerfull but longer learning curve
>
> So the interest of the project would be to make life easier for people
> using
> the first 2 bullets (and I can tell you that there are a lot of people
> hitting
> those 2 bullets)
>
> > Why is there a need to duplicate this
> > in turning the utilities into function calls which then, in turn, must
> > be called by new stand-alone utilities?
> > There has to be a loss of
> > efficiency in sunch a process.
>
> I don't think there will be a loss of efficiency
>
> Instead of ogr2ogr.cpp being currently
>
> int main(...)
> {
>         complex_code
> }
>
> you would have (very schematically)
>
> ogr2ogr.cpp:
>
> int main(...)
> {
>        ogr2ogr_options = parse aguments()
>        return ogr2ogr(ogr2ogr_options)
> }
>
> and libgdalutils_ogr2ogr.cpp :
>
> int ogr2ogr(ogr2ogr_options)
> {
>      complex_code (moved from currently existing main)
> }
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/c20ac291/attachment.html>

From dmorissette at mapgears.com  Wed Apr  1 08:38:16 2015
From: dmorissette at mapgears.com (Daniel Morissette)
Date: Wed, 01 Apr 2015 11:38:16 -0400
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <551C0F2B.2000207@caris.com>
References: <201504011416.05870.even.rouault@spatialys.com>
	<551BFDE8.3080800@mapgears.com> <551C0F2B.2000207@caris.com>
Message-ID: <551C10E8.7010003@mapgears.com>

Did you notice the "..." in the salutation above my signature? Replace 
the "..." with what your calendar says.  :-)


On 2015-04-01 11:30 AM, Andre Vautour wrote:
> Did you happen to look at the date on your calendar this morning?
> :p
>
> On 2015-04-01 11:17, Daniel Morissette wrote:
>> Good morning Even,
>>
>> That sounds like an ambitious world (universe?) domination plan, but
>> before going too deep into the implementation details, can you comment
>> on the potential for real life widespread adoption of such a universal
>> format in a world where everyone and their dog wants to have their own
>> file format which is so much better than everybody else's?
>>
>> In other words: GML failed in a similar attempt to replace all other
>> formats, so despite the benefits of BF over XML encoding, what would
>> give UFO more chances of succeeding?
>>
>> Have a nice ... day.
>>
>> Daniel
>>
>> On 2015-04-01 8:16 AM, Even Rouault wrote:
>>> Hi,
>>>
>>> Since some time a few ideas came to my mind and I felt today was a
>>> good one to
>>> share them and get feedback.
>>> Considering the never ending proliferation of GIS file formats,
>>> currently 220
>>> handled in GDAL trunk, it seems wise to put an end to it. Especially
>>> since the
>>> counter used to iterate over the drivers is a unsigned 8 bit, so we
>>> will soon
>>> be unable to add more, or at the expense of sacrificing our ports to
>>> Intel 8008
>>> or Motorola 6800, which would be pretty sad.
>>>
>>> Therefore I'd like to propose the UFO format, which stands for Universal
>>> Format Oh-yeaaah!
>>> The basic idea of UFO is that it isn't a fixed format, but a varying
>>> and self-
>>> described one. XML (or perhaps EXI?) + XSD + XSLT + XPath +
>>> Schematron could
>>> probably do it, but for efficiency I thought to a byte-code
>>> interpreted by
>>> libgdal and whose interface with libgdal would match the GDAL driver
>>> interface. So basically each dataset would contain its own driver.
>>> The big
>>> plus is that you could write image translators that would generate
>>> binary
>>> encodings optimized for the particular dataset being encoded: for
>>> example, it
>>> is kind of stupid to write the values of each pixel of a Mandelbrot
>>> fractal
>>> whereas its mathematical description fits into a few lines of code.
>>> Furthermore, still pursuing with that example, we could even have
>>> raster of
>>> arbitrary resolution, since that's a characteristics of fractals. And
>>> many GIS
>>> datasets have indeed fractal charasterics, such as coastlines (
>>> http://en.wikipedia.org/wiki/Coastline_paradox )
>>> For security reason, we should aim at supporting only simple &
>>> verifiable
>>> languages, so Brainfuck (Brainf**k for the most puritans of us) seems
>>> to be a
>>> good fit : http://en.wikipedia.org/wiki/Brainfuck. Basically it is a
>>> Turing
>>> complete language with only 8 commands. So as much powerful as
>>> needed, while
>>> being very easy to learn and implement. To save some efforts, I'd humbly
>>> suggest we adopt libbf ( http://savannah.nongnu.org/projects/libbf ),
>>> an older
>>> project of mine that also incorporates a on-the-fly optimizer &
>>> compiler for
>>> most popular architectures.
>>>
>>> The plan would be to have an initial version of the UFO driver ready
>>> for GDAL
>>> 2.0 and push strongly for its widespread adoption in all GIS, remote
>>> sensing,
>>> OSS & proprietary vendors, etc.... Perhaps we should establish a
>>> dedicated
>>> workgroup at OGC to make it a standard ? Then we could deprecate and
>>> remove
>>> all existing drivers and at the time of GDAL 3.0, UFO would be the
>>> only one
>>> remaining driver, making the Intel 8008 port very happy!
>>>
>>> Happy to hear from your thoughts before formalizing that as a RFC,
>>>
>>> Even
>>>
>>
>>


-- 
Daniel Morissette
T: +1 418-696-5056 #201
http://www.mapgears.com/
Provider of Professional MapServer Support since 2000

From even.rouault at spatialys.com  Wed Apr  1 08:38:31 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 1 Apr 2015 17:38:31 +0200
Subject: [gdal-dev] GSOC 2015 proposal - Integration of cpp GDAL
	utilities into GDAL core library
In-Reply-To: <CADPhZXw1+4Xd7_NVr-8Gcq3mKwOxWnHUqHCovgqWqXQ+SXj39w@mail.gmail.com>
References: <CABRzcz8BOrqcbSW3=XMf+fxZO7txG2j+jys3dnHPEYbdoLVVfQ@mail.gmail.com>
	<201503272108.34617.even.rouault@spatialys.com>
	<CADPhZXw1+4Xd7_NVr-8Gcq3mKwOxWnHUqHCovgqWqXQ+SXj39w@mail.gmail.com>
Message-ID: <201504011738.31569.even.rouault@spatialys.com>

Le mercredi 01 avril 2015 17:24:47, Sean Gillies a ?crit :
> Hi all,
> 
> I'm not entirely clear on the signatures of the new functions. Are we
> considering new functions that would be called with a single string
> argument like this?
> 
>   ogr2ogr('-of "ESRI Shapefile" example.shp example.json')
> 
> From my perspective this would be sort of a disaster. Instead of using
> features of our programming languages to handle function arguments (good),
> we'd be formatting strings (bad). It's much better to have this:
> 
>   ogr2ogr('example.json', 'example.shp', of='ESRI Shapefile')
> 
> Why? Your compiler can then catch trivial errors at compile time if you're
> using a statically typed language. Your Python linter (for example) can
> warn you about whether you're calling the function properly or not if
> you're using a dynamic language. Not to mention that there are many
> different ways to generate strings in programming languages. Python has
> some fast ones and some slow ones. I'm concerned that introducing functions
> with a single string argument, while a shortcut now, increases the number
> of dumb string munging questions and cost of support over time.

Sean,

The latest orientation while discuting with Robert & Faza would drop the 
single string approach in favor of function arguments, with a minimal list of 
arguments for the required arguments, and put the others in a dedicated option 
structure.

See:
https://github.com/fazam/gdal/commit/a0979a621b0041d25a9d628430b5f1dd2c967fb5#commitcomment-10173885

Even

> 
> 
> On Fri, Mar 27, 2015 at 2:08 PM, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Peter,
> > 
> > > Maybe I've missed the point (through over familiarity with GDAL/OGR?)
> > > .... but these utilities were originally branded as 'worked examples'
> > > of how to use the substantive libraries to perform well understood
> > > operations from which usage of the libraries might be readily
> > > understood.  Each utility is itself a commented set of function calls
> > > to the relevent GDAL libraries.
> > 
> > There is non trivial logic involved in some of the utilities (e.g.
> > ogr2ogr) and people have the choice between :
> > - doing a system call ("ogr2ogr ...."), but this isn't practical to deal
> > with
> > progress report, cancellation, or operating on in-memory datasets
> > - copy&pasting the source code of the utility in their own code, and
> > "librarify'ing" it to remove exit(), etc...
> > - learning the GDAL/OGR API to do their own custom processing chain. More
> > powerfull but longer learning curve
> > 
> > So the interest of the project would be to make life easier for people
> > using
> > the first 2 bullets (and I can tell you that there are a lot of people
> > hitting
> > those 2 bullets)
> > 
> > > Why is there a need to duplicate this
> > > in turning the utilities into function calls which then, in turn, must
> > > be called by new stand-alone utilities?
> > > There has to be a loss of
> > > efficiency in sunch a process.
> > 
> > I don't think there will be a loss of efficiency
> > 
> > Instead of ogr2ogr.cpp being currently
> > 
> > int main(...)
> > {
> > 
> >         complex_code
> > 
> > }
> > 
> > you would have (very schematically)
> > 
> > ogr2ogr.cpp:
> > 
> > int main(...)
> > {
> > 
> >        ogr2ogr_options = parse aguments()
> >        return ogr2ogr(ogr2ogr_options)
> > 
> > }
> > 
> > and libgdalutils_ogr2ogr.cpp :
> > 
> > int ogr2ogr(ogr2ogr_options)
> > {
> > 
> >      complex_code (moved from currently existing main)
> > 
> > }
> > 
> > Even
> > 
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sean at mapbox.com  Wed Apr  1 08:43:17 2015
From: sean at mapbox.com (Sean Gillies)
Date: Wed, 1 Apr 2015 09:43:17 -0600
Subject: [gdal-dev] GSOC 2015 proposal - Integration of cpp GDAL
 utilities into GDAL core library
In-Reply-To: <201504011738.31569.even.rouault@spatialys.com>
References: <CABRzcz8BOrqcbSW3=XMf+fxZO7txG2j+jys3dnHPEYbdoLVVfQ@mail.gmail.com>
	<201503272108.34617.even.rouault@spatialys.com>
	<CADPhZXw1+4Xd7_NVr-8Gcq3mKwOxWnHUqHCovgqWqXQ+SXj39w@mail.gmail.com>
	<201504011738.31569.even.rouault@spatialys.com>
Message-ID: <CADPhZXyigE3qN9nqB1aaVyD-JGjb-O_UGzfkXjHY034Ti+MOYA@mail.gmail.com>

On Wed, Apr 1, 2015 at 9:38 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le mercredi 01 avril 2015 17:24:47, Sean Gillies a ?crit :
> > Hi all,
> >
> > I'm not entirely clear on the signatures of the new functions. Are we
> > considering new functions that would be called with a single string
> > argument like this?
> >
> >   ogr2ogr('-of "ESRI Shapefile" example.shp example.json')
> >
> > From my perspective this would be sort of a disaster. Instead of using
> > features of our programming languages to handle function arguments
> (good),
> > we'd be formatting strings (bad). It's much better to have this:
> >
> >   ogr2ogr('example.json', 'example.shp', of='ESRI Shapefile')
> >
> > Why? Your compiler can then catch trivial errors at compile time if
> you're
> > using a statically typed language. Your Python linter (for example) can
> > warn you about whether you're calling the function properly or not if
> > you're using a dynamic language. Not to mention that there are many
> > different ways to generate strings in programming languages. Python has
> > some fast ones and some slow ones. I'm concerned that introducing
> functions
> > with a single string argument, while a shortcut now, increases the number
> > of dumb string munging questions and cost of support over time.
>
> Sean,
>
> The latest orientation while discuting with Robert & Faza would drop the
> single string approach in favor of function arguments, with a minimal list
> of
> arguments for the required arguments, and put the others in a dedicated
> option
> structure.
>
> See:
>
> https://github.com/fazam/gdal/commit/a0979a621b0041d25a9d628430b5f1dd2c967fb5#commitcomment-10173885
>
> Even
>

Great! [?][?]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/9f491029/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: B97.gif
Type: image/gif
Size: 181 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/9f491029/attachment.gif>

From andre.vautour at caris.com  Wed Apr  1 08:30:51 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Wed, 01 Apr 2015 12:30:51 -0300
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <551BFDE8.3080800@mapgears.com>
References: <201504011416.05870.even.rouault@spatialys.com>
	<551BFDE8.3080800@mapgears.com>
Message-ID: <551C0F2B.2000207@caris.com>

Did you happen to look at the date on your calendar this morning?
:p

On 2015-04-01 11:17, Daniel Morissette wrote:
> Good morning Even,
>
> That sounds like an ambitious world (universe?) domination plan, but 
> before going too deep into the implementation details, can you comment 
> on the potential for real life widespread adoption of such a universal 
> format in a world where everyone and their dog wants to have their own 
> file format which is so much better than everybody else's?
>
> In other words: GML failed in a similar attempt to replace all other 
> formats, so despite the benefits of BF over XML encoding, what would 
> give UFO more chances of succeeding?
>
> Have a nice ... day.
>
> Daniel
>
> On 2015-04-01 8:16 AM, Even Rouault wrote:
>> Hi,
>>
>> Since some time a few ideas came to my mind and I felt today was a 
>> good one to
>> share them and get feedback.
>> Considering the never ending proliferation of GIS file formats, 
>> currently 220
>> handled in GDAL trunk, it seems wise to put an end to it. Especially 
>> since the
>> counter used to iterate over the drivers is a unsigned 8 bit, so we 
>> will soon
>> be unable to add more, or at the expense of sacrificing our ports to 
>> Intel 8008
>> or Motorola 6800, which would be pretty sad.
>>
>> Therefore I'd like to propose the UFO format, which stands for Universal
>> Format Oh-yeaaah!
>> The basic idea of UFO is that it isn't a fixed format, but a varying 
>> and self-
>> described one. XML (or perhaps EXI?) + XSD + XSLT + XPath + 
>> Schematron could
>> probably do it, but for efficiency I thought to a byte-code 
>> interpreted by
>> libgdal and whose interface with libgdal would match the GDAL driver
>> interface. So basically each dataset would contain its own driver. 
>> The big
>> plus is that you could write image translators that would generate 
>> binary
>> encodings optimized for the particular dataset being encoded: for 
>> example, it
>> is kind of stupid to write the values of each pixel of a Mandelbrot 
>> fractal
>> whereas its mathematical description fits into a few lines of code.
>> Furthermore, still pursuing with that example, we could even have 
>> raster of
>> arbitrary resolution, since that's a characteristics of fractals. And 
>> many GIS
>> datasets have indeed fractal charasterics, such as coastlines (
>> http://en.wikipedia.org/wiki/Coastline_paradox )
>> For security reason, we should aim at supporting only simple & 
>> verifiable
>> languages, so Brainfuck (Brainf**k for the most puritans of us) seems 
>> to be a
>> good fit : http://en.wikipedia.org/wiki/Brainfuck. Basically it is a 
>> Turing
>> complete language with only 8 commands. So as much powerful as 
>> needed, while
>> being very easy to learn and implement. To save some efforts, I'd humbly
>> suggest we adopt libbf ( http://savannah.nongnu.org/projects/libbf ), 
>> an older
>> project of mine that also incorporates a on-the-fly optimizer & 
>> compiler for
>> most popular architectures.
>>
>> The plan would be to have an initial version of the UFO driver ready 
>> for GDAL
>> 2.0 and push strongly for its widespread adoption in all GIS, remote 
>> sensing,
>> OSS & proprietary vendors, etc.... Perhaps we should establish a 
>> dedicated
>> workgroup at OGC to make it a standard ? Then we could deprecate and 
>> remove
>> all existing drivers and at the time of GDAL 3.0, UFO would be the 
>> only one
>> remaining driver, making the Intel 8008 port very happy!
>>
>> Happy to hear from your thoughts before formalizing that as a RFC,
>>
>> Even
>>
>
>

From sean at mapbox.com  Wed Apr  1 08:59:52 2015
From: sean at mapbox.com (Sean Gillies)
Date: Wed, 1 Apr 2015 09:59:52 -0600
Subject: [gdal-dev] Error while writing a dirty block in GDALFillNodata()
Message-ID: <CADPhZXxHZvPZewzrj=1HmuDNpXxf2kgm=5oXFRi4q0==7wh5Rg@mail.gmail.com>

Hi all,

I've encountered a problem similar to the one reported at
https://trac.osgeo.org/gdal/ticket/4088. My case is slightly different:
I've modified GDALFillNodata() to allow MEM as the temp file format (patch
accepted in GDAL) and I'm getting the dirty block write error while using
the MEM driver. The image band that I'm trying to fill is 16,384 x 16,384 =
168 million pixels. My computer's activity monitor indicates that I have
well over 4 GB of RAM available.

The BIGTIFF=IF_SAFER solution for #4088 doesn't appear to help me. Can
anyone suggest the options I might change to increase the possible size of
or optimize the creation of temp MEM files?

Thanks,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/3cd639da/attachment.html>

From giohappy at gmail.com  Wed Apr  1 09:21:29 2015
From: giohappy at gmail.com (G. Allegri)
Date: Wed, 1 Apr 2015 18:21:29 +0200
Subject: [gdal-dev] UFO format / GDAL 3.0
Message-ID: <CAB4g1=yrQeB73O6kN4x-DJE49zoiF6XZ+szxi_PFUZkTJftL6A@mail.gmail.com>

Even, you forgot to say that this driver will be available only one day a
year! :D

giovanni

-- 
Giovanni Allegri
http://about.me/giovanniallegri
Gis3W - http://gis3w.it
Ikare - http://ikare.it
Twitter: https://twitter.com/_giohappy_
blog: http://blog.spaziogis.it
GEO+ geomatica in Italia http://bit.ly/GEOplus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/745265a6/attachment.html>

From andrea.aime at geo-solutions.it  Wed Apr  1 09:41:27 2015
From: andrea.aime at geo-solutions.it (Andrea Aime)
Date: Wed, 1 Apr 2015 18:41:27 +0200
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <CAB4g1=yrQeB73O6kN4x-DJE49zoiF6XZ+szxi_PFUZkTJftL6A@mail.gmail.com>
References: <CAB4g1=yrQeB73O6kN4x-DJE49zoiF6XZ+szxi_PFUZkTJftL6A@mail.gmail.com>
Message-ID: <CA+nxMTsOCZ2sC_gN6vkBrPOq+TvF77F3vm9vfQLddZcDmYRaGg@mail.gmail.com>

On Wed, Apr 1, 2015 at 6:21 PM, G. Allegri <giohappy at gmail.com> wrote:

> Even, you forgot to say that this driver will be available only one day a
> year! :D
>
>
Now... this might hamper its widespread distribution... :-p

Cheers
Andrea

-- 
==
GeoServer Professional Services from the experts! Visit
http://goo.gl/NWWaa2 for more information.
==

Ing. Andrea Aime
@geowolf
Technical Lead

GeoSolutions S.A.S.
Via Poggio alle Viti 1187
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax: +39 0584 1660272
mob: +39  339 8844549

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

*AVVERTENZE AI SENSI DEL D.Lgs. 196/2003*

Le informazioni contenute in questo messaggio di posta elettronica e/o
nel/i file/s allegato/i sono da considerarsi strettamente riservate. Il
loro utilizzo ? consentito esclusivamente al destinatario del messaggio,
per le finalit? indicate nel messaggio stesso. Qualora riceviate questo
messaggio senza esserne il destinatario, Vi preghiamo cortesemente di
darcene notizia via e-mail e di procedere alla distruzione del messaggio
stesso, cancellandolo dal Vostro sistema. Conservare il messaggio stesso,
divulgarlo anche in parte, distribuirlo ad altri soggetti, copiarlo, od
utilizzarlo per finalit? diverse, costituisce comportamento contrario ai
principi dettati dal D.Lgs. 196/2003.



The information in this message and/or attachments, is intended solely for
the attention and use of the named addressee(s) and may be confidential or
proprietary in nature or covered by the provisions of privacy act
(Legislative Decree June, 30 2003, no.196 - Italy's New Data Protection
Code).Any use not in accord with its purpose, any disclosure, reproduction,
copying, distribution, or either dissemination, either whole or partial, is
strictly forbidden except previous formal approval of the named
addressee(s). If you are not the intended recipient, please contact
immediately the sender by telephone, fax or e-mail and delete the
information in this message that has been received in error. The sender
does not give any warranty or accept liability as the content, accuracy or
completeness of sent messages and accepts no responsibility  for changes
made after they were sent or for other risks which arise as a result of
e-mail transmission, viruses, etc.

-------------------------------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/9e9e251f/attachment.html>

From norman at cloudant.com  Wed Apr  1 10:07:53 2015
From: norman at cloudant.com (Norman Barker)
Date: Wed, 1 Apr 2015 11:07:53 -0600
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <CA+nxMTsOCZ2sC_gN6vkBrPOq+TvF77F3vm9vfQLddZcDmYRaGg@mail.gmail.com>
References: <CAB4g1=yrQeB73O6kN4x-DJE49zoiF6XZ+szxi_PFUZkTJftL6A@mail.gmail.com>
	<CA+nxMTsOCZ2sC_gN6vkBrPOq+TvF77F3vm9vfQLddZcDmYRaGg@mail.gmail.com>
Message-ID: <CACSHx9mWbxoZWSu7gG6OtrGhbOKodXG0JMrfaTdComjZe5cMOA@mail.gmail.com>

probably my favourite April Fools - UFO FTW :)

Norm

On Wed, Apr 1, 2015 at 10:41 AM, Andrea Aime <andrea.aime at geo-solutions.it>
wrote:

> On Wed, Apr 1, 2015 at 6:21 PM, G. Allegri <giohappy at gmail.com> wrote:
>
>> Even, you forgot to say that this driver will be available only one day a
>> year! :D
>>
>>
> Now... this might hamper its widespread distribution... :-p
>
> Cheers
> Andrea
>
> --
> ==
> GeoServer Professional Services from the experts! Visit
> http://goo.gl/NWWaa2 for more information.
> ==
>
> Ing. Andrea Aime
> @geowolf
> Technical Lead
>
> GeoSolutions S.A.S.
> Via Poggio alle Viti 1187
> 55054  Massarosa (LU)
> Italy
> phone: +39 0584 962313
> fax: +39 0584 1660272
> mob: +39  339 8844549
>
> http://www.geo-solutions.it
> http://twitter.com/geosolutions_it
>
> *AVVERTENZE AI SENSI DEL D.Lgs. 196/2003*
>
> Le informazioni contenute in questo messaggio di posta elettronica e/o
> nel/i file/s allegato/i sono da considerarsi strettamente riservate. Il
> loro utilizzo ? consentito esclusivamente al destinatario del messaggio,
> per le finalit? indicate nel messaggio stesso. Qualora riceviate questo
> messaggio senza esserne il destinatario, Vi preghiamo cortesemente di
> darcene notizia via e-mail e di procedere alla distruzione del messaggio
> stesso, cancellandolo dal Vostro sistema. Conservare il messaggio stesso,
> divulgarlo anche in parte, distribuirlo ad altri soggetti, copiarlo, od
> utilizzarlo per finalit? diverse, costituisce comportamento contrario ai
> principi dettati dal D.Lgs. 196/2003.
>
>
>
> The information in this message and/or attachments, is intended solely for
> the attention and use of the named addressee(s) and may be confidential or
> proprietary in nature or covered by the provisions of privacy act
> (Legislative Decree June, 30 2003, no.196 - Italy's New Data Protection
> Code).Any use not in accord with its purpose, any disclosure, reproduction,
> copying, distribution, or either dissemination, either whole or partial, is
> strictly forbidden except previous formal approval of the named
> addressee(s). If you are not the intended recipient, please contact
> immediately the sender by telephone, fax or e-mail and delete the
> information in this message that has been received in error. The sender
> does not give any warranty or accept liability as the content, accuracy or
> completeness of sent messages and accepts no responsibility  for changes
> made after they were sent or for other risks which arise as a result of
> e-mail transmission, viruses, etc.
>
> -------------------------------------------------------
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/ceb36db4/attachment.html>

From even.rouault at spatialys.com  Wed Apr  1 10:11:36 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 1 Apr 2015 19:11:36 +0200
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <551C10E8.7010003@mapgears.com>
References: <201504011416.05870.even.rouault@spatialys.com>
	<551C0F2B.2000207@caris.com> <551C10E8.7010003@mapgears.com>
Message-ID: <201504011911.36403.even.rouault@spatialys.com>


> > On 2015-04-01 11:17, Daniel Morissette wrote:
> >> Good morning Even,
> >> 
> >> That sounds like an ambitious world (universe?) domination plan, but
> >> before going too deep into the implementation details, can you comment
> >> on the potential for real life widespread adoption of such a universal
> >> format in a world where everyone and their dog wants to have their own
> >> file format which is so much better than everybody else's?
> >> 
> >> In other words: GML failed in a similar attempt to replace all other
> >> formats, so despite the benefits of BF over XML encoding, what would
> >> give UFO more chances of succeeding?

For a really good reason: XML isn't Turing complete (source: 
http://en.wikipedia.org/wiki/Turing_completeness#Data_languages )


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From lucena_ivan at hotmail.com  Wed Apr  1 10:53:18 2015
From: lucena_ivan at hotmail.com (Ivan Lucena)
Date: Wed, 1 Apr 2015 13:53:18 -0400
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <201504011911.36403.even.rouault@spatialys.com>
References: <201504011416.05870.even.rouault@spatialys.com>,
	<551C0F2B.2000207@caris.com> <551C10E8.7010003@mapgears.com>,
	<201504011911.36403.even.rouault@spatialys.com>
Message-ID: <BLU173-W479D5BAB14200FA2238CB90F30@phx.gbl>

That was a very good Poisson d'Avril Even!

http://www.francetravelguide.com/april-fools-day-in-france-le-poisson-davril.html


> From: even.rouault at spatialys.com
> To: gdal-dev at lists.osgeo.org
> Date: Wed, 1 Apr 2015 19:11:36 +0200
> CC: dmorissette at mapgears.com
> Subject: Re: [gdal-dev] UFO format / GDAL 3.0
> 
> 
> > > On 2015-04-01 11:17, Daniel Morissette wrote:
> > >> Good morning Even,
> > >> 
> > >> That sounds like an ambitious world (universe?) domination plan, but
> > >> before going too deep into the implementation details, can you comment
> > >> on the potential for real life widespread adoption of such a universal
> > >> format in a world where everyone and their dog wants to have their own
> > >> file format which is so much better than everybody else's?
> > >> 
> > >> In other words: GML failed in a similar attempt to replace all other
> > >> formats, so despite the benefits of BF over XML encoding, what would
> > >> give UFO more chances of succeeding?
> 
> For a really good reason: XML isn't Turing complete (source: 
> http://en.wikipedia.org/wiki/Turing_completeness#Data_languages )
> 
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/dfce0254/attachment-0001.html>

From jukka.rahkonen at maanmittauslaitos.fi  Wed Apr  1 14:52:25 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Wed, 1 Apr 2015 21:52:25 +0000 (UTC)
Subject: [gdal-dev] GSOC 2015 proposal - Integration of cpp GDAL
	utilities into GDAL core library
References: <CABRzcz8BOrqcbSW3=XMf+fxZO7txG2j+jys3dnHPEYbdoLVVfQ@mail.gmail.com>
	<CADEnnOPw9DVCBRQjZUHCb9+QREYBOG2pzTTO6XoOB+qkwtvwOw@mail.gmail.com>
	<201503272108.34617.even.rouault@spatialys.com>
	<CADPhZXw1+4Xd7_NVr-8Gcq3mKwOxWnHUqHCovgqWqXQ+SXj39w@mail.gmail.com>
Message-ID: <loom.20150401T234410-795@post.gmane.org>

Sean Gillies <sean <at> mapbox.com> writes:

> 
> 
> Hi all,
> I'm not entirely clear on the signatures of the new functions. Are we
considering new functions that would be called with a single string argument
like this?
> 
> ? ogr2ogr('-of "ESRI Shapefile" example.shp example.json')
> 
> From my perspective this would be sort of a disaster. Instead of using
features of our programming languages to handle function arguments (good),
we'd be formatting strings (bad). It's much better to have this:
> 
> ? ogr2ogr('example.json', 'example.shp', of='ESRI Shapefile')


Hi,

My point of view as a relatively experienced user of GDAL utilities is that
I hardly remember to change the order of input/output when using ogr2ogr and
gdal_translate and I have always been wondering why they do not use
parameters like -i and -o so that the order would not matter.

This thinking has a connection with the command line section in 
http://trac.osgeo.org/gdal/wiki/GDAL20Changes

-Jukka Rahkonen-

From sean at mapbox.com  Wed Apr  1 19:30:38 2015
From: sean at mapbox.com (Sean Gillies)
Date: Wed, 1 Apr 2015 20:30:38 -0600
Subject: [gdal-dev] Error while writing a dirty block in GDALFillNodata()
In-Reply-To: <CADPhZXxHZvPZewzrj=1HmuDNpXxf2kgm=5oXFRi4q0==7wh5Rg@mail.gmail.com>
References: <CADPhZXxHZvPZewzrj=1HmuDNpXxf2kgm=5oXFRi4q0==7wh5Rg@mail.gmail.com>
Message-ID: <CADPhZXzmRp_ZBo3g0WXFPZ4R3XJTKa9FKSweGjYHSTAjNhkwYQ@mail.gmail.com>

Answering my own question: I had forgotten that GDALFillNodata() modifies
the given image band in-place and had not opened the dataset for updating.
Once I did that, I was all clear. No problems at all with the MEM files.

On Wed, Apr 1, 2015 at 9:59 AM, Sean Gillies <sean at mapbox.com> wrote:

> Hi all,
>
> I've encountered a problem similar to the one reported at
> https://trac.osgeo.org/gdal/ticket/4088. My case is slightly different:
> I've modified GDALFillNodata() to allow MEM as the temp file format (patch
> accepted in GDAL) and I'm getting the dirty block write error while using
> the MEM driver. The image band that I'm trying to fill is 16,384 x 16,384 =
> 168 million pixels. My computer's activity monitor indicates that I have
> well over 4 GB of RAM available.
>
> The BIGTIFF=IF_SAFER solution for #4088 doesn't appear to help me. Can
> anyone suggest the options I might change to increase the possible size of
> or optimize the creation of temp MEM files?
>
> Thanks,
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150401/b17b466f/attachment.html>

From hrz at geodata.soton.ac.uk  Wed Apr  1 23:35:02 2015
From: hrz at geodata.soton.ac.uk (Homme Zwaagstra)
Date: Thu, 02 Apr 2015 07:35:02 +0100
Subject: [gdal-dev] GSOC 2015 proposal - Integration of cpp GDAL
 utilities into GDAL core library
In-Reply-To: <loom.20150401T234410-795@post.gmane.org>
References: <CABRzcz8BOrqcbSW3=XMf+fxZO7txG2j+jys3dnHPEYbdoLVVfQ@mail.gmail.com>	<CADEnnOPw9DVCBRQjZUHCb9+QREYBOG2pzTTO6XoOB+qkwtvwOw@mail.gmail.com>	<201503272108.34617.even.rouault@spatialys.com>	<CADPhZXw1+4Xd7_NVr-8Gcq3mKwOxWnHUqHCovgqWqXQ+SXj39w@mail.gmail.com>
	<loom.20150401T234410-795@post.gmane.org>
Message-ID: <551CE316.5060904@geodata.soton.ac.uk>


Hi,

On 01/04/15 22:52, Jukka Rahkonen wrote:
> Sean Gillies <sean  <at> mapbox.com> writes:
 >
 >>
 >>
 >> Hi all,
 >> I'm not entirely clear on the signatures of the new functions. Are we
 > considering new functions that would be called with a single string 
argument
 > like this?
 >>
 >>   ogr2ogr('-of "ESRI Shapefile" example.shp example.json')
 >>
 >> From my perspective this would be sort of a disaster. Instead of using
 > features of our programming languages to handle function arguments 
(good),
 > we'd be formatting strings (bad). It's much better to have this:
 >>
 >>   ogr2ogr('example.json', 'example.shp', of='ESRI Shapefile')
 >
 >
 > Hi,
 >
 > My point of view as a relatively experienced user of GDAL utilities 
is that
 > I hardly remember to change the order of input/output when using 
ogr2ogr and
 > gdal_translate and I have always been wondering why they do not use
 > parameters like -i and -o so that the order would not matter.

I agree: this is a niggle that grows with time! Or at least standardise 
so you
have:

  command <options> src_datasource_name... dst_datasource_name

> This thinking has a connection  with the command line section in
 > http://trac.osgeo.org/gdal/wiki/GDAL20Changes

Looking on the bright side, at least with the new proposal it will be fairly
trivial to create your own command line interface to GDAL; perhaps not 
portable
but satisfying!  I've always favoured a git style approach along the 
following
lines...

   gdal <global-options> subcommand <options> <args>

Best regards,

Homme

> -Jukka Rahkonen-
 > _______________________________________________
 > gdal-dev mailing list
 > gdal-dev at lists.osgeo.org
 > http://lists.osgeo.org/mailman/listinfo/gdal-dev


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150402/5ea01771/attachment.html>

From hrz at geodata.soton.ac.uk  Wed Apr  1 23:39:55 2015
From: hrz at geodata.soton.ac.uk (Homme Zwaagstra)
Date: Thu, 02 Apr 2015 07:39:55 +0100
Subject: [gdal-dev] UFO format / GDAL 3.0
In-Reply-To: <CAGYeuZnrZ720NeJxvRD14AYWvEs8tJPX5q_c4=UZiV8mXH3ufQ@mail.gmail.com>
References: <201504011416.05870.even.rouault@spatialys.com>	<551BFDE8.3080800@mapgears.com>
	<CAGYeuZnrZ720NeJxvRD14AYWvEs8tJPX5q_c4=UZiV8mXH3ufQ@mail.gmail.com>
Message-ID: <551CE43B.9090906@geodata.soton.ac.uk>

On 01/04/15 15:31, Matt Hanson wrote:
> I think this is a great idea,  finally users can be forced to stop using all those silly formats.
 >
 > But I think GDAL 3.0 needs a good slogan, may I suggest "There can be 
only one" ?
 >

Or, "One Format to rule them all"...

Homme

>
 >
 > On Wed, Apr 1, 2015 at 10:17 AM, Daniel Morissette 
<dmorissette at mapgears.com> wrote:
 >
 >     Good morning Even,
 >
 >     That sounds like an ambitious world (universe?) domination plan, 
but before going too deep into the implementation details, can you 
comment on the potential for real life widespread adoption of such a 
universal format in a world where everyone and their dog wants to have 
their own file format which is so much better than everybody else's?
 >
 >     In other words: GML failed in a similar attempt to replace all 
other formats, so despite the benefits of BF over XML encoding, what 
would give UFO more chances of succeeding?
 >
 >     Have a nice ... day.
 >
 >     Daniel
 >
 >
 >     On 2015-04-01 8:16 AM, Even Rouault wrote:
 >
 >         Hi,
 >
 >         Since some time a few ideas came to my mind and I felt today 
was a good one to
 >         share them and get feedback.
 >         Considering the never ending proliferation of GIS file 
formats, currently 220
 >         handled in GDAL trunk, it seems wise to put an end to it. 
Especially since the
 >         counter used to iterate over the drivers is a unsigned 8 bit, 
so we will soon
 >         be unable to add more, or at the expense of sacrificing our 
ports to Intel 8008
 >         or Motorola 6800, which would be pretty sad.
 >
 >         Therefore I'd like to propose the UFO format, which stands 
for Universal
 >         Format Oh-yeaaah!
 >         The basic idea of UFO is that it isn't a fixed format, but a 
varying and self-
 >         described one. XML (or perhaps EXI?) + XSD + XSLT + XPath + 
Schematron could
 >         probably do it, but for efficiency I thought to a byte-code 
interpreted by
 >         libgdal and whose interface with libgdal would match the GDAL 
driver
 >         interface. So basically each dataset would contain its own 
driver. The big
 >         plus is that you could write image translators that would 
generate binary
 >         encodings optimized for the particular dataset being encoded: 
for example, it
 >         is kind of stupid to write the values of each pixel of a 
Mandelbrot fractal
 >         whereas its mathematical description fits into a few lines of 
code.
 >         Furthermore, still pursuing with that example, we could even 
have raster of
 >         arbitrary resolution, since that's a characteristics of 
fractals. And many GIS
 >         datasets have indeed fractal charasterics, such as coastlines (
 >         http://en.wikipedia.org/wiki/Coastline_paradox )
 >         For security reason, we should aim at supporting only simple 
& verifiable
 >         languages, so Brainfuck (Brainf**k for the most puritans of 
us) seems to be a
 >         good fit : http://en.wikipedia.org/wiki/Brainfuck. Basically 
it is a Turing
 >         complete language with only 8 commands. So as much powerful 
as needed, while
 >         being very easy to learn and implement. To save some efforts, 
I'd humbly
 >         suggest we adopt libbf ( 
http://savannah.nongnu.org/projects/libbf ), an older
 >         project of mine that also incorporates a on-the-fly optimizer 
& compiler for
 >         most popular architectures.
 >
 >         The plan would be to have an initial version of the UFO 
driver ready for GDAL
 >         2.0 and push strongly for its widespread adoption in all GIS, 
remote sensing,
 >         OSS & proprietary vendors, etc.... Perhaps we should 
establish a dedicated
 >         workgroup at OGC to make it a standard ? Then we could 
deprecate and remove
 >         all existing drivers and at the time of GDAL 3.0, UFO would 
be the only one
 >         remaining driver, making the Intel 8008 port very happy!
 >
 >         Happy to hear from your thoughts before formalizing that as a 
RFC,
 >
 >         Even
 >
 >
 >
 >     --
 >     Daniel Morissette
 >     T: +1 418-696-5056 #201
 >     http://www.mapgears.com/
 >     Provider of Professional MapServer Support since 2000
 >
 >     _______________________________________________
 >     gdal-dev mailing list
 >     gdal-dev at lists.osgeo.org
 >     http://lists.osgeo.org/mailman/listinfo/gdal-dev
 >
 >
 >
 >
 > _______________________________________________
 > gdal-dev mailing list
 > gdal-dev at lists.osgeo.org
 > http://lists.osgeo.org/mailman/listinfo/gdal-dev


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150402/e2eb8246/attachment.html>

From jukka.rahkonen at maanmittauslaitos.fi  Thu Apr  2 06:09:37 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Thu, 2 Apr 2015 13:09:37 +0000 (UTC)
Subject: [gdal-dev] GDAL 2.0 plans/schedule ?
References: <201502111237.08100.even.rouault@spatialys.com>
Message-ID: <loom.20150402T150231-415@post.gmane.org>

Even Rouault <even.rouault <at> spatialys.com> writes:

> 
> Hi,
> 
> As I'll give a talk about GDAL 2.0 at FOSS4G-NA next month, I'm curious to 
> know if folks have things in their queue for 2.0 that they would wish to be 
> mentionned, or more generally they want to discuss here so that we have a 
> better picture of what is going on.
....


> I was thinking for a 2.0 beta1 at the end of April. Opinions ?


It is April now and I think that this thread that has not gathered much
feedback yet could be refreshed.
Are all true GDAL developers now happy with the situation of
http://trac.osgeo.org/gdal/wiki/GDAL20Changes? Are we ready to migrate to 2.0?

-Jukka Rahkonen-








From br at forstware.de  Thu Apr  2 06:13:41 2015
From: br at forstware.de (Bjoern Ruff)
Date: Thu, 2 Apr 2015 15:13:41 +0200
Subject: [gdal-dev] ogr2ogr OSM driver
Message-ID: <00d301d06d46$d858c920$890a5b60$@forstware.de>

Hello,

can someone give a hint how 2 compile ogr2ogr under Windows so that it can
work with OSM files?



What I did was enabling lines for Sqlite and expat  in nmake.opt


SQLITE_INC=-Ic:\c\sqlite3

SQLITE_LIB=C:\c\sqlite3\sqlite3.lib

 

EXPAT_DIR = "C:\externLibs\expat"

EXPAT_INCLUDE = -I$(EXPAT_DIR)/lib

EXPAT_LIB = $(EXPAT_DIR)/win32/bin/release/libexpat.lib

 

Thanks, Bj?rn

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150402/61e68154/attachment.html>

From even.rouault at spatialys.com  Thu Apr  2 06:51:08 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 2 Apr 2015 15:51:08 +0200
Subject: [gdal-dev] ogr2ogr OSM driver
In-Reply-To: <00d301d06d46$d858c920$890a5b60$@forstware.de>
References: <00d301d06d46$d858c920$890a5b60$@forstware.de>
Message-ID: <201504021551.09301.even.rouault@spatialys.com>

Le jeudi 02 avril 2015 15:13:41, Bjoern Ruff a ?crit :
> Hello,
> 
> can someone give a hint how 2 compile ogr2ogr under Windows so that it can
> work with OSM files?
> 
> 
> 
> What I did was enabling lines for Sqlite and expat  in nmake.opt
> 
> 
> SQLITE_INC=-Ic:\c\sqlite3
> 
> SQLITE_LIB=C:\c\sqlite3\sqlite3.lib
> 
> 
> 
> EXPAT_DIR = "C:\externLibs\expat"
> 
> EXPAT_INCLUDE = -I$(EXPAT_DIR)/lib
> 
> EXPAT_LIB = $(EXPAT_DIR)/win32/bin/release/libexpat.lib
> 

Bj?rn,

looks ok to me. Make sure to run "nmake /f makefile.vc clean" in case you did 
several builds and change configuration in-between.

If that still doesn't work, download a dev kit at http://gisinternals.com/ and 
compare.

Even


> 
> 
> Thanks, Bj?rn

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jukka.rahkonen at maanmittauslaitos.fi  Thu Apr  2 07:05:38 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Thu, 2 Apr 2015 14:05:38 +0000 (UTC)
Subject: [gdal-dev] ogr2ogr OSM driver
References: <00d301d06d46$d858c920$890a5b60$@forstware.de>
	<201504021551.09301.even.rouault@spatialys.com>
Message-ID: <loom.20150402T160415-395@post.gmane.org>

Even Rouault <even.rouault <at> spatialys.com> writes:


> 
> If that still doesn't work, download a dev kit at http://gisinternals.com/
and 
> compare.

Or download binaries from the same place and you do not need to compile
yourself.

-Jukka Rahkonen-




From jmckenna at gatewaygeomatics.com  Thu Apr  2 07:20:58 2015
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Thu, 02 Apr 2015 11:20:58 -0300
Subject: [gdal-dev] ogr2ogr OSM driver
In-Reply-To: <00d301d06d46$d858c920$890a5b60$@forstware.de>
References: <00d301d06d46$d858c920$890a5b60$@forstware.de>
Message-ID: <551D504A.9050108@gatewaygeomatics.com>

Hi Bj?rn,

Those settings match my settings for Windows builds.  A nice way test 
compiling one single driver, is to cd into the /ogr/ogrsf_frmts/osm/ 
directory, and then do your usual "nmake /f makefile.vc" from there.

Then later of course verify that the OSM driver exists, by executing 
"ogrinfo --formats" and seeing the "OSM" driver listed in those results.

-jeff



On 2015-04-02 10:13 AM, Bjoern Ruff wrote:
> Hello,
>
> can someone give a hint how 2 compile ogr2ogr under Windows so that it
> can work with OSM files?
>
> What I did was enabling lines for Sqlite and expat  in nmake.opt
>
>
> SQLITE_INC=-Ic:\c\sqlite3
>
> SQLITE_LIB=C:\c\sqlite3\sqlite3.lib
>
> EXPAT_DIR = "C:\externLibs\expat"
>
> EXPAT_INCLUDE = -I$(EXPAT_DIR)/lib
>
> EXPAT_LIB = $(EXPAT_DIR)/win32/bin/release/libexpat.lib
>
> Thanks, Bj?rn
>
>
>

-- 
Jeff McKenna
MapServer Consulting and Training Services
http://www.gatewaygeomatics.com/

From landa.martin at gmail.com  Thu Apr  2 08:07:58 2015
From: landa.martin at gmail.com (Martin Landa)
Date: Thu, 2 Apr 2015 17:07:58 +0200
Subject: [gdal-dev] support for Czech Exchange Format for Land
	Consolidation
In-Reply-To: <1411484194.54218a223fad3@imp.free.fr>
References: <CA+Ei1OdXVntkFOL=OamAPM3BhKg+NAXUmoPR_5sYxap5OfmacQ@mail.gmail.com>
	<1411484194.54218a223fad3@imp.free.fr>
Message-ID: <CA+Ei1OeBxoKauR_q1GajDxBkyMt0_Z7JV0=4EU63nwOitn0RBg@mail.gmail.com>

Hi Even,

2014-09-23 16:56 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:

first of all, thanks for your notes.

I would like to start working on implementation within next weeks.

> Although I've always felt intimated by its syntax, I imagine you could write a
> XSLT document that would transform the above XML in GML. Easier solution is to

Right, there is even XSD available for this format [1].

> do it off-line (i.e. outside GDAL), otherwise if you want something transparent

Sure, but GDAL is preferable solution.

> to the user, we could have a generic XML driver that would try several XSLT
> documents and then feed the transformed document to the GML driver. I don't

Anybody here is interested to implement such driver or at least to
collaborate on such project?

> If you go with a from-the-scratch driver, I would not recommand to go from the
> GML one which has become very complicated. GeoRSS or GPX are probably better
> starting points.

Right, this also an option, generic driver would be better.

Martin

[1] http://spucr.cz/frontend/webroot/uploads/files/2015/02/vfp_2596.0596.xsd

-- 
Martin Landa
http://geo.fsv.cvut.cz/gwiki/Landa
http://gismentors.cz/mentors/landa

From br at forstware.de  Thu Apr  2 09:23:55 2015
From: br at forstware.de (Bjoern Ruff)
Date: Thu, 2 Apr 2015 18:23:55 +0200
Subject: [gdal-dev] ogr2ogr OSM driver
In-Reply-To: <201504021551.09301.even.rouault@spatialys.com>
References: <00d301d06d46$d858c920$890a5b60$@forstware.de>
	<201504021551.09301.even.rouault@spatialys.com>
Message-ID: <00f201d06d61$6b84e070$428ea150$@forstware.de>

Thanks for all your answers, clean and building via .sln .vcxproj generate with makegdal_gen.bat (because building with v110_xp toolset) file helped!  :-)
Latter had nothing to do with the OSM driver inclusion of course.
Bj?rn

-----Urspr?ngliche Nachricht-----
Von: even.rouault at spatialys.com Thu Apr 2 15:50:55 2015 [mailto:even.rouault at spatialys.com Thu Apr 2 15:50:55 2015] 
Gesendet: Donnerstag, 2. April 2015 15:51
An: gdal-dev at lists.osgeo.org
Cc: Bjoern Ruff
Betreff: Re: [gdal-dev] ogr2ogr OSM driver

Le jeudi 02 avril 2015 15:13:41, Bjoern Ruff a ?crit :
> Hello,
> 
> can someone give a hint how 2 compile ogr2ogr under Windows so that it 
> can work with OSM files?
> 
> 
> 
> What I did was enabling lines for Sqlite and expat  in nmake.opt
> 
> 
> SQLITE_INC=-Ic:\c\sqlite3
> 
> SQLITE_LIB=C:\c\sqlite3\sqlite3.lib
> 
> 
> 
> EXPAT_DIR = "C:\externLibs\expat"
> 
> EXPAT_INCLUDE = -I$(EXPAT_DIR)/lib
> 
> EXPAT_LIB = $(EXPAT_DIR)/win32/bin/release/libexpat.lib
> 

Bj?rn,

looks ok to me. Make sure to run "nmake /f makefile.vc clean" in case you did several builds and change configuration in-between.

If that still doesn't work, download a dev kit at http://gisinternals.com/ and compare.

Even


> 
> 
> Thanks, Bj?rn

--
Spatialys - Geospatial professional services http://www.spatialys.com




From ChiefDan at gmail.com  Thu Apr  2 18:19:50 2015
From: ChiefDan at gmail.com (ChiefDan)
Date: Thu, 2 Apr 2015 18:19:50 -0700 (PDT)
Subject: [gdal-dev] Unable to find various object files for GEOS and
 ogrsqlitedatasource
Message-ID: <1428023990715-5196680.post@n6.nabble.com>

I've built gdal with geos, sqlite3 and spatialite support, however when I
debug my program I am seeing various warnings such as:
warning: Could not find object file
"......./geos-3.4.2/src/.libs/libgeos.lax/liboperation.a/SubgraphDepthLocater.o"
- no debug information available for "SubgraphDepthLocater.cpp".

The path it's searching, src/.libs/ exists, however libgeos.lax does not.

My OS is OS X 10.7.5 and I'm using the Eclipse C++ IDE to develop in, and I
think I've got my libraries and paths setup correctly. I'm using a custom
--prefix directory for all the sources. 

I'd appreciate any pointers.

Dan






--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Unable-to-find-various-object-files-for-GEOS-and-ogrsqlitedatasource-tp5196680.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From landa.martin at gmail.com  Fri Apr  3 02:31:09 2015
From: landa.martin at gmail.com (Martin Landa)
Date: Fri, 3 Apr 2015 11:31:09 +0200
Subject: [gdal-dev] gdal_translate and PostGIS
Message-ID: <CA+Ei1Of3LOg6Hf+kEYbybdveQimvjyXzjKiBoga-h4Vs_=21uQ@mail.gmail.com>

Hi,

is it possible to import raster data into PostGIS using gdal_translate?

$ gdal_translate -of PostGISRaster dmt.tif PG:dbname=pokusnik
Input file size is 19615, 11119

fails with

ERROR 6: PostGISRasterDataset::CreateCopy() only works on source
datasets that are PostGISRaster

Thanks, Martin

-- 
Martin Landa
http://geo.fsv.cvut.cz/gwiki/Landa
http://gismentors.cz/mentors/landa

From even.rouault at spatialys.com  Fri Apr  3 02:37:30 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 3 Apr 2015 11:37:30 +0200
Subject: [gdal-dev] gdal_translate and PostGIS
In-Reply-To: <CA+Ei1Of3LOg6Hf+kEYbybdveQimvjyXzjKiBoga-h4Vs_=21uQ@mail.gmail.com>
References: <CA+Ei1Of3LOg6Hf+kEYbybdveQimvjyXzjKiBoga-h4Vs_=21uQ@mail.gmail.com>
Message-ID: <201504031137.30872.even.rouault@spatialys.com>

Le vendredi 03 avril 2015 11:31:09, Martin Landa a ?crit :
> Hi,
> 
> is it possible to import raster data into PostGIS using gdal_translate?
> 
> $ gdal_translate -of PostGISRaster dmt.tif PG:dbname=pokusnik
> Input file size is 19615, 11119
> 
> fails with
> 
> ERROR 6: PostGISRasterDataset::CreateCopy() only works on source
> datasets that are PostGISRaster

Martin,

As the error message suggests, no, not at the time with the PostGISRaster 
driver which basically only supports creation of a new raster through 
duplicatin an existing postgisraster table thanks to SQL copy mechanisms.

You have to use raster2pgsql provided with PostGIS for what you want to do.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From landa.martin at gmail.com  Fri Apr  3 02:41:01 2015
From: landa.martin at gmail.com (Martin Landa)
Date: Fri, 3 Apr 2015 11:41:01 +0200
Subject: [gdal-dev] gdal_translate and PostGIS
In-Reply-To: <201504031137.30872.even.rouault@spatialys.com>
References: <CA+Ei1Of3LOg6Hf+kEYbybdveQimvjyXzjKiBoga-h4Vs_=21uQ@mail.gmail.com>
	<201504031137.30872.even.rouault@spatialys.com>
Message-ID: <CA+Ei1Ock_TcMn4a5tmmV3f1bkzVUpfhbF68RL0FXUq1h5NVT+w@mail.gmail.com>

Hi Even,

2015-04-03 11:37 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:
> As the error message suggests, no, not at the time with the PostGISRaster
> driver which basically only supports creation of a new raster through
> duplicatin an existing postgisraster table thanks to SQL copy mechanisms.
>
> You have to use raster2pgsql provided with PostGIS for what you want to do.

thanks for confirmation, Martin

-- 
Martin Landa
http://geo.fsv.cvut.cz/gwiki/Landa
http://gismentors.cz/mentors/landa

From yutaxsato at gmail.com  Fri Apr  3 03:22:00 2015
From: yutaxsato at gmail.com (Yuta Sato)
Date: Fri, 3 Apr 2015 19:22:00 +0900
Subject: [gdal-dev] ReadAsArray
Message-ID: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>

Dear Respected GDAL Developers and Users:

What parameters should I set beforehand in order to accelerate the reading
of a GeoTiff file?

I am using as follows:

data = src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)

Does setting the following parameters accelerate?

GDAL_CACHEMAX, GDAL_SWATH_SIZE

I'm using gdal python.

Thanks for your support.

Yuta
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150403/37dbbff7/attachment.html>

From even.rouault at spatialys.com  Fri Apr  3 03:43:20 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 3 Apr 2015 12:43:20 +0200
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
Message-ID: <201504031243.20476.even.rouault@spatialys.com>

Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
> Dear Respected GDAL Developers and Users:
> 
> What parameters should I set beforehand in order to accelerate the reading
> of a GeoTiff file?
> 
> I am using as follows:
> 
> data = src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
> 
> Does setting the following parameters accelerate?
> 
> GDAL_CACHEMAX, GDAL_SWATH_SIZE
> 
> I'm using gdal python.

Yuta,

Increasing GDAL_CACHEMAX might accelerate in case of repeated reads on windows 
that are identical or overlapping already read windows. Or if the way you read 
the raster doesn't follow its block shape : for example if the raster is 
organized by lines/strips and you read by square blocks, or the reverse 
situation.

GDAL_SWATH_SIZE is only used by CreateCopy().

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Apr  3 04:13:42 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 3 Apr 2015 13:13:42 +0200
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
	<CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
Message-ID: <201504031313.43080.even.rouault@spatialys.com>

Le vendredi 03 avril 2015 12:46:48, Yuta Sato a ?crit :
> Dear Even Rouault:
> 
> Thank you very much.
> What about setting these parameters "used with .ReadAsArray()", though I
> did not know their meanings?
> buf_xsize=None, buf_ysize=None, buf_obj=None

(Please keep the list CC'ed)

buf_xsize and buf_ysize are the equivalents of nBufXSize and nBufYSize in 
GDALRasterBand::RasterIO()
http://gdal.org/classGDALRasterBand.html#a75d4af97b3436a4e79d9759eedf89af4
i.e. to do downsampling or upsampling of original data.

buf_obj can be used to "recycle" an existing numpy array of the appropriate 
size instead of allocating a new one.

> 
> 
> On Fri, Apr 3, 2015 at 7:43 PM, Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
> > > Dear Respected GDAL Developers and Users:
> > > 
> > > What parameters should I set beforehand in order to accelerate the
> > 
> > reading
> > 
> > > of a GeoTiff file?
> > > 
> > > I am using as follows:
> > > 
> > > data = src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
> > > 
> > > Does setting the following parameters accelerate?
> > > 
> > > GDAL_CACHEMAX, GDAL_SWATH_SIZE
> > > 
> > > I'm using gdal python.
> > 
> > Yuta,
> > 
> > Increasing GDAL_CACHEMAX might accelerate in case of repeated reads on
> > windows
> > that are identical or overlapping already read windows. Or if the way you
> > read
> > the raster doesn't follow its block shape : for example if the raster is
> > organized by lines/strips and you read by square blocks, or the reverse
> > situation.
> > 
> > GDAL_SWATH_SIZE is only used by CreateCopy().
> > 
> > Even
> > 
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From yutaxsato at gmail.com  Fri Apr  3 04:16:32 2015
From: yutaxsato at gmail.com (Yuta Sato)
Date: Fri, 3 Apr 2015 20:16:32 +0900
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <201504031313.43080.even.rouault@spatialys.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
	<CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
	<201504031313.43080.even.rouault@spatialys.com>
Message-ID: <CAPqnkJT46_4w-SXTkuS2i3jHHkDksXGMOPrkNDp6Za0+b--aoQ@mail.gmail.com>

Thank you very much "Even Rouault" for making me understood.

On Fri, Apr 3, 2015 at 8:13 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le vendredi 03 avril 2015 12:46:48, Yuta Sato a ?crit :
> > Dear Even Rouault:
> >
> > Thank you very much.
> > What about setting these parameters "used with .ReadAsArray()", though I
> > did not know their meanings?
> > buf_xsize=None, buf_ysize=None, buf_obj=None
>
> (Please keep the list CC'ed)
>
> buf_xsize and buf_ysize are the equivalents of nBufXSize and nBufYSize in
> GDALRasterBand::RasterIO()
> http://gdal.org/classGDALRasterBand.html#a75d4af97b3436a4e79d9759eedf89af4
> i.e. to do downsampling or upsampling of original data.
>
> buf_obj can be used to "recycle" an existing numpy array of the appropriate
> size instead of allocating a new one.
>
> >
> >
> > On Fri, Apr 3, 2015 at 7:43 PM, Even Rouault <even.rouault at spatialys.com
> >
> >
> > wrote:
> > > Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
> > > > Dear Respected GDAL Developers and Users:
> > > >
> > > > What parameters should I set beforehand in order to accelerate the
> > >
> > > reading
> > >
> > > > of a GeoTiff file?
> > > >
> > > > I am using as follows:
> > > >
> > > > data =
> src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
> > > >
> > > > Does setting the following parameters accelerate?
> > > >
> > > > GDAL_CACHEMAX, GDAL_SWATH_SIZE
> > > >
> > > > I'm using gdal python.
> > >
> > > Yuta,
> > >
> > > Increasing GDAL_CACHEMAX might accelerate in case of repeated reads on
> > > windows
> > > that are identical or overlapping already read windows. Or if the way
> you
> > > read
> > > the raster doesn't follow its block shape : for example if the raster
> is
> > > organized by lines/strips and you read by square blocks, or the reverse
> > > situation.
> > >
> > > GDAL_SWATH_SIZE is only used by CreateCopy().
> > >
> > > Even
> > >
> > > --
> > > Spatialys - Geospatial professional services
> > > http://www.spatialys.com
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150403/469225e2/attachment.html>

From sfkeller at gmail.com  Fri Apr  3 07:08:37 2015
From: sfkeller at gmail.com (Stefan Keller)
Date: Fri, 3 Apr 2015 16:08:37 +0200
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <CAPqnkJT46_4w-SXTkuS2i3jHHkDksXGMOPrkNDp6Za0+b--aoQ@mail.gmail.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
	<CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
	<201504031313.43080.even.rouault@spatialys.com>
	<CAPqnkJT46_4w-SXTkuS2i3jHHkDksXGMOPrkNDp6Za0+b--aoQ@mail.gmail.com>
Message-ID: <CAFcOn2-9HqJKTe5S-a833usyNr6CVSpQSGzv+bSnvGN4Cy0SeQ@mail.gmail.com>

Hi Yuta and Even

Excuse me when I creep in that discussion - but I'm acutally having
quite a similar beginners question (I'm rather a vector guy :-) ):

Yuta: Can you post the code fragment here in order to make benchmarks?

I have a GeoTIFF (representing heights from SRTM3) in Mercator CRS of
the size of a country.
And I have a position (in lat/lon) and a radius (in m) as input.
Now, I'd like to read out all grid cells within a radius in order to
calculate the highest point nearby.
So I'd like to read out a subset of grid cells/pixels in the most efficient way.

Here's some code snippet:
  import gdal
  from gdalconst import *
  filename = 'my.tif'
  dataset = gdal.Open(filename, GA_ReadOnly)
  band = dataset.GetRasterBand(1)
  scanline = band.ReadRaster( 0, 0, band.XSize, 1,band.XSize, 1, band.DataType)
  ...

Following questions arise:
1. Are there alternatives reading out the sub-matrix
2. How to calculate the grid cell position in Mercator and lat/lon?

Yours, Stefan


2015-04-03 13:16 GMT+02:00 Yuta Sato <yutaxsato at gmail.com>:
> Thank you very much "Even Rouault" for making me understood.
>
> On Fri, Apr 3, 2015 at 8:13 PM, Even Rouault <even.rouault at spatialys.com>
> wrote:
>>
>> Le vendredi 03 avril 2015 12:46:48, Yuta Sato a ?crit :
>> > Dear Even Rouault:
>> >
>> > Thank you very much.
>> > What about setting these parameters "used with .ReadAsArray()", though I
>> > did not know their meanings?
>> > buf_xsize=None, buf_ysize=None, buf_obj=None
>>
>> (Please keep the list CC'ed)
>>
>> buf_xsize and buf_ysize are the equivalents of nBufXSize and nBufYSize in
>> GDALRasterBand::RasterIO()
>> http://gdal.org/classGDALRasterBand.html#a75d4af97b3436a4e79d9759eedf89af4
>> i.e. to do downsampling or upsampling of original data.
>>
>> buf_obj can be used to "recycle" an existing numpy array of the
>> appropriate
>> size instead of allocating a new one.
>>
>> >
>> >
>> > On Fri, Apr 3, 2015 at 7:43 PM, Even Rouault
>> > <even.rouault at spatialys.com>
>> >
>> > wrote:
>> > > Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
>> > > > Dear Respected GDAL Developers and Users:
>> > > >
>> > > > What parameters should I set beforehand in order to accelerate the
>> > >
>> > > reading
>> > >
>> > > > of a GeoTiff file?
>> > > >
>> > > > I am using as follows:
>> > > >
>> > > > data =
>> > > > src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
>> > > >
>> > > > Does setting the following parameters accelerate?
>> > > >
>> > > > GDAL_CACHEMAX, GDAL_SWATH_SIZE
>> > > >
>> > > > I'm using gdal python.
>> > >
>> > > Yuta,
>> > >
>> > > Increasing GDAL_CACHEMAX might accelerate in case of repeated reads on
>> > > windows
>> > > that are identical or overlapping already read windows. Or if the way
>> > > you
>> > > read
>> > > the raster doesn't follow its block shape : for example if the raster
>> > > is
>> > > organized by lines/strips and you read by square blocks, or the
>> > > reverse
>> > > situation.
>> > >
>> > > GDAL_SWATH_SIZE is only used by CreateCopy().
>> > >
>> > > Even
>> > >
>> > > --
>> > > Spatialys - Geospatial professional services
>> > > http://www.spatialys.com
>>
>> --
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

From stefan.ziegler.de at gmail.com  Fri Apr  3 07:15:34 2015
From: stefan.ziegler.de at gmail.com (Stefan Ziegler)
Date: Fri, 3 Apr 2015 16:15:34 +0200
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <CAFcOn2-9HqJKTe5S-a833usyNr6CVSpQSGzv+bSnvGN4Cy0SeQ@mail.gmail.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
	<CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
	<201504031313.43080.even.rouault@spatialys.com>
	<CAPqnkJT46_4w-SXTkuS2i3jHHkDksXGMOPrkNDp6Za0+b--aoQ@mail.gmail.com>
	<CAFcOn2-9HqJKTe5S-a833usyNr6CVSpQSGzv+bSnvGN4Cy0SeQ@mail.gmail.com>
Message-ID: <EC521CC2-C2B7-4AC2-9D55-3D07B63F885E@gmail.com>

Hi Stefan

You propably want to take a look at rasterio: https://github.com/mapbox/rasterio

Which is also great to work with python and raster data.

Regards
Stefan

Von meinem iPhone gesendet

> Am 03.04.2015 um 16:08 schrieb Stefan Keller <sfkeller at gmail.com>:
> 
> Hi Yuta and Even
> 
> Excuse me when I creep in that discussion - but I'm acutally having
> quite a similar beginners question (I'm rather a vector guy :-) ):
> 
> Yuta: Can you post the code fragment here in order to make benchmarks?
> 
> I have a GeoTIFF (representing heights from SRTM3) in Mercator CRS of
> the size of a country.
> And I have a position (in lat/lon) and a radius (in m) as input.
> Now, I'd like to read out all grid cells within a radius in order to
> calculate the highest point nearby.
> So I'd like to read out a subset of grid cells/pixels in the most efficient way.
> 
> Here's some code snippet:
>  import gdal
>  from gdalconst import *
>  filename = 'my.tif'
>  dataset = gdal.Open(filename, GA_ReadOnly)
>  band = dataset.GetRasterBand(1)
>  scanline = band.ReadRaster( 0, 0, band.XSize, 1,band.XSize, 1, band.DataType)
>  ...
> 
> Following questions arise:
> 1. Are there alternatives reading out the sub-matrix
> 2. How to calculate the grid cell position in Mercator and lat/lon?
> 
> Yours, Stefan
> 
> 
> 2015-04-03 13:16 GMT+02:00 Yuta Sato <yutaxsato at gmail.com>:
>> Thank you very much "Even Rouault" for making me understood.
>> 
>> On Fri, Apr 3, 2015 at 8:13 PM, Even Rouault <even.rouault at spatialys.com>
>> wrote:
>>> 
>>> Le vendredi 03 avril 2015 12:46:48, Yuta Sato a ?crit :
>>>> Dear Even Rouault:
>>>> 
>>>> Thank you very much.
>>>> What about setting these parameters "used with .ReadAsArray()", though I
>>>> did not know their meanings?
>>>> buf_xsize=None, buf_ysize=None, buf_obj=None
>>> 
>>> (Please keep the list CC'ed)
>>> 
>>> buf_xsize and buf_ysize are the equivalents of nBufXSize and nBufYSize in
>>> GDALRasterBand::RasterIO()
>>> http://gdal.org/classGDALRasterBand.html#a75d4af97b3436a4e79d9759eedf89af4
>>> i.e. to do downsampling or upsampling of original data.
>>> 
>>> buf_obj can be used to "recycle" an existing numpy array of the
>>> appropriate
>>> size instead of allocating a new one.
>>> 
>>>> 
>>>> 
>>>> On Fri, Apr 3, 2015 at 7:43 PM, Even Rouault
>>>> <even.rouault at spatialys.com>
>>>> 
>>>> wrote:
>>>>> Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
>>>>>> Dear Respected GDAL Developers and Users:
>>>>>> 
>>>>>> What parameters should I set beforehand in order to accelerate the
>>>>> 
>>>>> reading
>>>>> 
>>>>>> of a GeoTiff file?
>>>>>> 
>>>>>> I am using as follows:
>>>>>> 
>>>>>> data =
>>>>>> src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
>>>>>> 
>>>>>> Does setting the following parameters accelerate?
>>>>>> 
>>>>>> GDAL_CACHEMAX, GDAL_SWATH_SIZE
>>>>>> 
>>>>>> I'm using gdal python.
>>>>> 
>>>>> Yuta,
>>>>> 
>>>>> Increasing GDAL_CACHEMAX might accelerate in case of repeated reads on
>>>>> windows
>>>>> that are identical or overlapping already read windows. Or if the way
>>>>> you
>>>>> read
>>>>> the raster doesn't follow its block shape : for example if the raster
>>>>> is
>>>>> organized by lines/strips and you read by square blocks, or the
>>>>> reverse
>>>>> situation.
>>>>> 
>>>>> GDAL_SWATH_SIZE is only used by CreateCopy().
>>>>> 
>>>>> Even
>>>>> 
>>>>> --
>>>>> Spatialys - Geospatial professional services
>>>>> http://www.spatialys.com
>>> 
>>> --
>>> Spatialys - Geospatial professional services
>>> http://www.spatialys.com
>> 
>> 
>> 
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

From stevecagle59 at yahoo.com  Fri Apr  3 07:54:06 2015
From: stevecagle59 at yahoo.com (Steve Cagle)
Date: Fri, 3 Apr 2015 14:54:06 +0000 (UTC)
Subject: [gdal-dev] Merging GeoTiff files
Message-ID: <920543126.4485555.1428072846880.JavaMail.yahoo@mail.yahoo.com>

I have several GeoTiff files from a (commercial vendor) to merge. I have used gdal, gdal_merge.py, the merge with QGIS and get the same results.? The output file is the proper size but only contains the last input .tiff file.? I have struggled with this for a while now, pretty sure it's something simple.? I'm a software engineer but have little GIS experience. 

Using QGIS they load properly, so I believe the Geo Referencing of the input files is correct. 

Thanks for any help.Steve

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150403/16ae75a9/attachment.html>

From doug_newcomb at fws.gov  Fri Apr  3 08:05:37 2015
From: doug_newcomb at fws.gov (Newcomb, Doug)
Date: Fri, 3 Apr 2015 11:05:37 -0400
Subject: [gdal-dev] Merging GeoTiff files
In-Reply-To: <920543126.4485555.1428072846880.JavaMail.yahoo@mail.yahoo.com>
References: <920543126.4485555.1428072846880.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <CALQGVr3RoM2q11cEmGWEWfazn6S5akrPeLrjoDnVAhjBQjHe-Q@mail.gmail.com>

Steve,
By merge, do you mean files that cover the same area, or merging adjoining
images into a single larger image?

Doug

On Fri, Apr 3, 2015 at 10:54 AM, Steve Cagle <stevecagle59 at yahoo.com> wrote:

> I have several GeoTiff files from a (commercial vendor) to merge. I have
> used gdal, gdal_merge.py, the merge with QGIS and get the same results.
> The output file is the proper size but only contains the last input .tiff
> file.  I have struggled with this for a while now, pretty sure it's
> something simple.  I'm a software engineer but have little GIS experience.
>
> Using QGIS they load properly, so I believe the Geo Referencing of the
> input files is correct.
>
> Thanks for any help.
> Steve
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
Doug Newcomb
USFWS
Raleigh, NC
919-856-4520 ext. 14 doug_newcomb at fws.gov
---------------------------------------------------------------------------------------------------------
The opinions I express are my own and are not representative of the
official policy of the U.S.Fish and Wildlife Service or Dept. of the
Interior.   Life is too short for undocumented, proprietary data formats.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150403/fd4d7b31/attachment.html>

From yutaxsato at gmail.com  Fri Apr  3 08:46:19 2015
From: yutaxsato at gmail.com (Yuta Sato)
Date: Sat, 4 Apr 2015 00:46:19 +0900
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <CAFcOn2-9HqJKTe5S-a833usyNr6CVSpQSGzv+bSnvGN4Cy0SeQ@mail.gmail.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
	<CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
	<201504031313.43080.even.rouault@spatialys.com>
	<CAPqnkJT46_4w-SXTkuS2i3jHHkDksXGMOPrkNDp6Za0+b--aoQ@mail.gmail.com>
	<CAFcOn2-9HqJKTe5S-a833usyNr6CVSpQSGzv+bSnvGN4Cy0SeQ@mail.gmail.com>
Message-ID: <CAPqnkJRdCpPEt-baAtoRhq1A=aQuNnbG98tPgX6VtNfoO2398w@mail.gmail.com>

On Fri, Apr 3, 2015 at 11:08 PM, Stefan Keller <sfkeller at gmail.com> wrote:

> Hi Yuta and Even
>
> Excuse me when I creep in that discussion - but I'm acutally having
> quite a similar beginners question (I'm rather a vector guy :-) ):
>
> Yuta: Can you post the code fragment here in order to make benchmarks?
>

> I have a GeoTIFF (representing heights from SRTM3) in Mercator CRS of
> the size of a country.
> And I have a position (in lat/lon) and a radius (in m) as input.
> Now, I'd like to read out all grid cells within a radius in order to
> calculate the highest point nearby.
> So I'd like to read out a subset of grid cells/pixels in the most
> efficient way.
>

Hi Stefan,

I think, SRTM3 with country level goes smoothy.
Do you really need to read the data within a radius?


>
> Here's some code snippet:
>   import gdal
>   from gdalconst import *
>   filename = 'my.tif'
>   dataset = gdal.Open(filename, GA_ReadOnly)
>   band = dataset.GetRasterBand(1)
>   scanline = band.ReadRaster( 0, 0, band.XSize, 1,band.XSize, 1,
> band.DataType)
>   ...
>
> Following questions arise:
> 1. Are there alternatives reading out the sub-matrix
>

Alternatively, you could use: http://www.gdal.org/gdallocationinfo.html


> 2. How to calculate the grid cell position in Mercator and lat/lon?


I am reading the data within 3 by 3 pixels square from the central lon/lat
as follows (code adapted from Even):

from osgeo import gdal
from osgeo import osr

ds = gdal.Open(image)

srs = osr.SpatialReference()
srs.ImportFromWkt(ds.GetProjection())

srs_wgs84 = osr.SpatialReference()
srs_wgs84.SetFromUserInput('WGS84')

ct = osr.CoordinateTransformation(srs_wgs84, srs)

for lon, lat in zip(lons, lats):

        (X, Y, _) = ct.TransformPoint(lon, lat)

        geomatrix = ds.GetGeoTransform()
        (success, inv_geometrix) = gdal.InvGeoTransform(geomatrix)
        x = int(inv_geometrix[0] + inv_geometrix[1] * X + inv_geometrix[2]
* Y) - 1
        y = int(inv_geometrix[3] + inv_geometrix[4] * X + inv_geometrix[5]
* Y) - 1

        vals = ds.ReadAsArray(x,y,3,3)

If you get confused with some lines, please let me know. It's using
gdal/osr only though.
I'm sorry if I was mistaken your question.

yuta


> Yours, Stefan
>
>
> 2015-04-03 13:16 GMT+02:00 Yuta Sato <yutaxsato at gmail.com>:
> > Thank you very much "Even Rouault" for making me understood.
> >
> > On Fri, Apr 3, 2015 at 8:13 PM, Even Rouault <even.rouault at spatialys.com
> >
> > wrote:
> >>
> >> Le vendredi 03 avril 2015 12:46:48, Yuta Sato a ?crit :
> >> > Dear Even Rouault:
> >> >
> >> > Thank you very much.
> >> > What about setting these parameters "used with .ReadAsArray()",
> though I
> >> > did not know their meanings?
> >> > buf_xsize=None, buf_ysize=None, buf_obj=None
> >>
> >> (Please keep the list CC'ed)
> >>
> >> buf_xsize and buf_ysize are the equivalents of nBufXSize and nBufYSize
> in
> >> GDALRasterBand::RasterIO()
> >>
> http://gdal.org/classGDALRasterBand.html#a75d4af97b3436a4e79d9759eedf89af4
> >> i.e. to do downsampling or upsampling of original data.
> >>
> >> buf_obj can be used to "recycle" an existing numpy array of the
> >> appropriate
> >> size instead of allocating a new one.
> >>
> >> >
> >> >
> >> > On Fri, Apr 3, 2015 at 7:43 PM, Even Rouault
> >> > <even.rouault at spatialys.com>
> >> >
> >> > wrote:
> >> > > Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
> >> > > > Dear Respected GDAL Developers and Users:
> >> > > >
> >> > > > What parameters should I set beforehand in order to accelerate the
> >> > >
> >> > > reading
> >> > >
> >> > > > of a GeoTiff file?
> >> > > >
> >> > > > I am using as follows:
> >> > > >
> >> > > > data =
> >> > > > src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
> >> > > >
> >> > > > Does setting the following parameters accelerate?
> >> > > >
> >> > > > GDAL_CACHEMAX, GDAL_SWATH_SIZE
> >> > > >
> >> > > > I'm using gdal python.
> >> > >
> >> > > Yuta,
> >> > >
> >> > > Increasing GDAL_CACHEMAX might accelerate in case of repeated reads
> on
> >> > > windows
> >> > > that are identical or overlapping already read windows. Or if the
> way
> >> > > you
> >> > > read
> >> > > the raster doesn't follow its block shape : for example if the
> raster
> >> > > is
> >> > > organized by lines/strips and you read by square blocks, or the
> >> > > reverse
> >> > > situation.
> >> > >
> >> > > GDAL_SWATH_SIZE is only used by CreateCopy().
> >> > >
> >> > > Even
> >> > >
> >> > > --
> >> > > Spatialys - Geospatial professional services
> >> > > http://www.spatialys.com
> >>
> >> --
> >> Spatialys - Geospatial professional services
> >> http://www.spatialys.com
> >
> >
> >
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150404/b5ad6142/attachment-0001.html>

From sfkeller at gmail.com  Fri Apr  3 09:08:18 2015
From: sfkeller at gmail.com (Stefan Keller)
Date: Fri, 3 Apr 2015 18:08:18 +0200
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <CAPqnkJRdCpPEt-baAtoRhq1A=aQuNnbG98tPgX6VtNfoO2398w@mail.gmail.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
	<CAPqnkJSt9WG+i6s+m1f7mD1b_Ja6qs4XiCs00-9mYdJHNyadBw@mail.gmail.com>
	<201504031313.43080.even.rouault@spatialys.com>
	<CAPqnkJT46_4w-SXTkuS2i3jHHkDksXGMOPrkNDp6Za0+b--aoQ@mail.gmail.com>
	<CAFcOn2-9HqJKTe5S-a833usyNr6CVSpQSGzv+bSnvGN4Cy0SeQ@mail.gmail.com>
	<CAPqnkJRdCpPEt-baAtoRhq1A=aQuNnbG98tPgX6VtNfoO2398w@mail.gmail.com>
Message-ID: <CAFcOn2-u_xFxLbrhT0qpV8tX20sOeC9T3hjz6=dyCRu1HCTaPw@mail.gmail.com>

Hi Yuta

Thanks! I'll try this.
I'm still wondering which approach is faster: With gdal or rasterio...

Cheers, Stefan


2015-04-03 17:46 GMT+02:00 Yuta Sato <yutaxsato at gmail.com>:
>
>
> On Fri, Apr 3, 2015 at 11:08 PM, Stefan Keller <sfkeller at gmail.com> wrote:
>>
>> Hi Yuta and Even
>>
>> Excuse me when I creep in that discussion - but I'm acutally having
>> quite a similar beginners question (I'm rather a vector guy :-) ):
>>
>> Yuta: Can you post the code fragment here in order to make benchmarks?
>>
>>
>> I have a GeoTIFF (representing heights from SRTM3) in Mercator CRS of
>> the size of a country.
>> And I have a position (in lat/lon) and a radius (in m) as input.
>> Now, I'd like to read out all grid cells within a radius in order to
>> calculate the highest point nearby.
>> So I'd like to read out a subset of grid cells/pixels in the most
>> efficient way.
>
>
> Hi Stefan,
>
> I think, SRTM3 with country level goes smoothy.
> Do you really need to read the data within a radius?
>
>>
>>
>> Here's some code snippet:
>>   import gdal
>>   from gdalconst import *
>>   filename = 'my.tif'
>>   dataset = gdal.Open(filename, GA_ReadOnly)
>>   band = dataset.GetRasterBand(1)
>>   scanline = band.ReadRaster( 0, 0, band.XSize, 1,band.XSize, 1,
>> band.DataType)
>>   ...
>>
>> Following questions arise:
>> 1. Are there alternatives reading out the sub-matrix
>
>
> Alternatively, you could use: http://www.gdal.org/gdallocationinfo.html
>
>>
>> 2. How to calculate the grid cell position in Mercator and lat/lon?
>
>
> I am reading the data within 3 by 3 pixels square from the central lon/lat
> as follows (code adapted from Even):
>
> from osgeo import gdal
> from osgeo import osr
>
> ds = gdal.Open(image)
>
> srs = osr.SpatialReference()
> srs.ImportFromWkt(ds.GetProjection())
>
> srs_wgs84 = osr.SpatialReference()
> srs_wgs84.SetFromUserInput('WGS84')
>
> ct = osr.CoordinateTransformation(srs_wgs84, srs)
>
> for lon, lat in zip(lons, lats):
>
>         (X, Y, _) = ct.TransformPoint(lon, lat)
>
>         geomatrix = ds.GetGeoTransform()
>         (success, inv_geometrix) = gdal.InvGeoTransform(geomatrix)
>         x = int(inv_geometrix[0] + inv_geometrix[1] * X + inv_geometrix[2] *
> Y) - 1
>         y = int(inv_geometrix[3] + inv_geometrix[4] * X + inv_geometrix[5] *
> Y) - 1
>
>         vals = ds.ReadAsArray(x,y,3,3)
>
> If you get confused with some lines, please let me know. It's using gdal/osr
> only though.
> I'm sorry if I was mistaken your question.
>
> yuta
>
>>
>> Yours, Stefan
>>
>>
>> 2015-04-03 13:16 GMT+02:00 Yuta Sato <yutaxsato at gmail.com>:
>> > Thank you very much "Even Rouault" for making me understood.
>> >
>> > On Fri, Apr 3, 2015 at 8:13 PM, Even Rouault
>> > <even.rouault at spatialys.com>
>> > wrote:
>> >>
>> >> Le vendredi 03 avril 2015 12:46:48, Yuta Sato a ?crit :
>> >> > Dear Even Rouault:
>> >> >
>> >> > Thank you very much.
>> >> > What about setting these parameters "used with .ReadAsArray()",
>> >> > though I
>> >> > did not know their meanings?
>> >> > buf_xsize=None, buf_ysize=None, buf_obj=None
>> >>
>> >> (Please keep the list CC'ed)
>> >>
>> >> buf_xsize and buf_ysize are the equivalents of nBufXSize and nBufYSize
>> >> in
>> >> GDALRasterBand::RasterIO()
>> >>
>> >> http://gdal.org/classGDALRasterBand.html#a75d4af97b3436a4e79d9759eedf89af4
>> >> i.e. to do downsampling or upsampling of original data.
>> >>
>> >> buf_obj can be used to "recycle" an existing numpy array of the
>> >> appropriate
>> >> size instead of allocating a new one.
>> >>
>> >> >
>> >> >
>> >> > On Fri, Apr 3, 2015 at 7:43 PM, Even Rouault
>> >> > <even.rouault at spatialys.com>
>> >> >
>> >> > wrote:
>> >> > > Le vendredi 03 avril 2015 12:22:00, Yuta Sato a ?crit :
>> >> > > > Dear Respected GDAL Developers and Users:
>> >> > > >
>> >> > > > What parameters should I set beforehand in order to accelerate
>> >> > > > the
>> >> > >
>> >> > > reading
>> >> > >
>> >> > > > of a GeoTiff file?
>> >> > > >
>> >> > > > I am using as follows:
>> >> > > >
>> >> > > > data =
>> >> > > > src_dataset.GetRasterBand(1).ReadAsArray(xoff,yoff,xsize,ysize)
>> >> > > >
>> >> > > > Does setting the following parameters accelerate?
>> >> > > >
>> >> > > > GDAL_CACHEMAX, GDAL_SWATH_SIZE
>> >> > > >
>> >> > > > I'm using gdal python.
>> >> > >
>> >> > > Yuta,
>> >> > >
>> >> > > Increasing GDAL_CACHEMAX might accelerate in case of repeated reads
>> >> > > on
>> >> > > windows
>> >> > > that are identical or overlapping already read windows. Or if the
>> >> > > way
>> >> > > you
>> >> > > read
>> >> > > the raster doesn't follow its block shape : for example if the
>> >> > > raster
>> >> > > is
>> >> > > organized by lines/strips and you read by square blocks, or the
>> >> > > reverse
>> >> > > situation.
>> >> > >
>> >> > > GDAL_SWATH_SIZE is only used by CreateCopy().
>> >> > >
>> >> > > Even
>> >> > >
>> >> > > --
>> >> > > Spatialys - Geospatial professional services
>> >> > > http://www.spatialys.com
>> >>
>> >> --
>> >> Spatialys - Geospatial professional services
>> >> http://www.spatialys.com
>> >
>> >
>> >
>> > _______________________________________________
>> > gdal-dev mailing list
>> > gdal-dev at lists.osgeo.org
>> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>

From even.rouault at spatialys.com  Sun Apr  5 12:25:53 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 5 Apr 2015 21:25:53 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
Message-ID: <201504052125.53531.even.rouault@spatialys.com>

Hi,

In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680, which is 
about lack of precision of the current datetime structure, I've imagined 
different solutions how to modify the OGRField structure, and failed to pick up 
one that would be the obvious solution, so opinions are welcome.

The issue is how to add (at least) microsecond accuracy to the datetime 
structure, as a few formats support it explicitely or implicitely : MapInfo, 
GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL, CSV, GeoJSON, ODS, 
XLSX, KML (potentially GML too)...

Below a few potential solutions :

---------------------------------------
Solution 1) : Millisecond accuracy, second becomes a float

This is the solution I've prototyped.

typedef union {
[...]
    struct {
        GInt16  Year;
        GByte   Month;
        GByte   Day;
        GByte   Hour;
        GByte   Minute;
        GByte   TZFlag; 
        GByte   Precision; /* value in OGRDateTimePrecision */
        float   Second; /* from 00.000 to 60.999 (millisecond accuracy) */
    } Date;
} OGRField

So sub-second precision is representing with a single precision floating point 
number, storing both integral and decimal parts. (we could theorically have a 
hundredth of millisecond accuracy, 10^-5 s, since 6099999 fits on the 23 bits 
of the mantissa)

Another addition is the Precision field that indicates which parts of the 
datetime structure are significant.

/** Enumeration that defines the precision of a DateTime.
  * @since GDAL 2.0
  */
typedef enum
{
    ODTP_Undefined,     /**< Undefined */
    ODTP_Guess,         /**< Only valid when setting through SetField(i,year, 
month...) where OGR will guess */
    ODTP_Y,             /**< Year is significant */
    ODTP_YM,            /**< Year and month are significant*/
    ODTP_YMD,           /**< Year, month and day are significant */
    ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and hour are 
significant */
    ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour and 
minute are significant */
    ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime), hour, minute 
and integral second are significant */
    ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime), hour, minute 
and second with microseconds are significant */
} OGRDateTimePrecision;

I think this is important since "2015/04/05 17:12:34" and "2015/04/05 
17:12:34.000" do not really mean the same thing and it might be good to be 
able to preserve the original accuracy when converting between formats.

A drawback of this solution is that the size of the OGRField structure 
increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on 64 bit). 
This is probably not that important since in most cases not that many OGRField 
structures are instanciated at one time (typically, you iterate over features 
one at a time).
This could be more of a problem for use cases that involve the MEM driver, as 
it keep all features in memory.

Another drawback is that the change of the structure might not be directly 
noticed by application developers as the Second field name is preserved, but a 
new Precision field is added, so there's a risk that Precision is let 
uninitialized if the field is set through OGRFeature::SetField(int iFieldIndex, 
OGRField* psRawField). That could lead to unexpected formatting (but hopefully 
not crashes with defensive programming). However I'd think it is unlikely that 
many applications directly manipulate OGRField directly, instead of using the 
getters and setters of OGRFeature.

---------------------------------------
Solution 2) : Millisecond accuracy, second and milliseconds in distinct fields

typedef union {
[...]
    struct {
        GInt16  Year;
        GByte   Month;
        GByte   Day;
        GByte   Hour;
        GByte   Minute;
        GByte   TZFlag;
        GByte   Precision; /* value in OGRDateTimePrecision */
        GByte   Second; /* from 0 to 60 */
	GUInt16 Millisecond; /* from 0 to 999 */
    } Date;
} OGRField

Same size of structure as in 1)

---------------------------------------
Solution 3) : Millisecond accuracy, pack all fields

Conceptually, this would use bit fields to avoid wasting unused bits :

typedef union {
[...]
  struct {
    GInt16        Year;
    GUIntBig     Month:4;
    GUIntBig     Day:5;
    GUIntBig     Hour:5;
    GUIntBig     Minute:6;
    GUIntBig     Second:6;
    GUIntBig     Millisecond:10; /* 0-999 */
    GUIntBig     TZFlag:8;
    GUIntBig     Precision:4;
 } Date;
} OGRField;

This was proposed in the above mentionned ticket. And as there were enough 
remaining bits, I've also added the Precision field (and in all other 
solutions).

The advantage is that sizeof(mydate) remains 8 bytes on 32 bits builds.

But the C standard only defines bitfields of int/unsigned int, so this is not 
portable, plus the fact that the way bits are packed is not defined by the 
standard, so different compilers could come up with different packing. A 
workaround is to do the bit manipulation through macros :

typedef union {
[...]
  struct {
	GUIntBig	opaque;
  } Date;
} OGRField;

#define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >> (shift)) & 
((1 << (y_bits))-1))

#define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
#define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
#define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
#define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
#define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
#define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
#define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
#define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
#define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)

#define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque & (~( 
(GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) << (shift)))

#define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
#define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
#define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
#define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
#define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
#define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
#define SET_MILLISECOND(x,val)     SET_BITS(x,val,10,64-16-4-5-5-6-6-10)
#define SET_TZFLAG(x,val)          SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8)
#define SET_PRECISION(x,val)       SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)

Main advantage: the size of OGRField remains unchanged (so 8 bytes on 32-bit 
builds).

Drawback: manipulation of datetime members is less natural, but there are not 
that many places in the GDAL code base were the OGRField.Date members are 
used, so it is not much that a problem.

---------------------------------------
Solution 4) : Microsecond accuracy with one field

Solution 1) used a float for second and sub-second, but a float has only 23 bits 
of mantissa, which is enough to represent second with millisecond accuracy, 
but not for microsecond (you need 26 bits for that). So use a 32-bit integer 
instead of a 32-bit floating point.

typedef union {
[...]
    struct {
        GInt16  Year;
        GByte   Month;
        GByte   Day;
        GByte   Hour;
        GByte   Minute;
        GByte   TZFlag; 
        GByte   Precision; /* value in OGRDateTimePrecision */
        GUInt32 Microseconds; /* 00000000 to 59999999 */
    } Date;
} OGRField

Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds (and 
remain 16 bytes on 64-bit builds)

We would need to add an extra value in OGRDateTimePrecision to mean the 
microsecond accuracy.

Not really clear we need microseconds accuracy... Most formats that support 
subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals beyond 
second. From http://www.postgresql.org/docs/9.1/static/datatype-datetime.html, 
PostgreSQL supports microsecond accuracy.

---------------------------------------
Solution 5) : Microsecond with 3 fields

A variant where we split second into 3 integer parts:

typedef union {
[...]
    struct {
        GInt16  Year;
        GByte   Month;
        GByte   Day;
        GByte   Hour;
        GByte   Minute;
        GByte   TZFlag;
        GByte   Precision; /* value in OGRDateTimePrecision */
	GByte   Second; /* 0 to 59 */
        GUInt16  Millisecond; /* 0 to 999 */
        GUInt16 Microsecond; /* 0 to 999 */
    } Date;
} OGRField

Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on 32-bit builds 
(and remain 16 bytes on 64-bit builds)

---------------------------------------
Solution 6) : Nanosecond accuracy and beyond !

Now that we are using 16 bytes, why not having nanosecond accuracy ? 

typedef union {
[...]
    struct {
        GInt16  Year;
        GByte   Month;
        GByte   Day;
        GByte   Hour;
        GByte   Minute;
        GByte   TZFlag; 
        GByte   Precision; /* value in OGRDateTimePrecision */
	double   Second; /* 0.000000000 to 60.999999999 */
    } Date;
} OGRField

Actually we even have picosecond accuracy! (since for picoseconds, we need 46 
bits and a double has 52 bits of mantissa). And if we use a 64-bit integer 
instead of a double, we can have femtosecond accuracy ;-)

Any preference ?

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Sun Apr  5 13:10:27 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 5 Apr 2015 22:10:27 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <CCE718B1-9502-4329-B60F-02C7511D0F56@sierracmp.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<CCE718B1-9502-4329-B60F-02C7511D0F56@sierracmp.com>
Message-ID: <201504052210.27656.even.rouault@spatialys.com>

Le dimanche 05 avril 2015 21:58:58, George Watson a ?crit :
> Should the second value ?range? be 0-59.999 instead of 0-60.999?

Arg, I knew I shouldn't have mentionned that... 60.999 is for the case where a 
leap second is inserted once every few years (e.g 1998-12-31T23:59:60.75 )... 
But I'm not sure if we ever intended to deal with leap seconds before and do 
*not* want to change that ;-) This has no influence on any of the choice 
discussed for sub-second accuracy.

> 
> George K. Watson
> 
> > On Apr 5, 2015, at 1:25 PM, Even Rouault <even.rouault at spatialys.com>
> > wrote:
> > 
> > Hi,
> > 
> > In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680, which
> > is about lack of precision of the current datetime structure, I've
> > imagined different solutions how to modify the OGRField structure, and
> > failed to pick up one that would be the obvious solution, so opinions
> > are welcome.
> > 
> > The issue is how to add (at least) microsecond accuracy to the datetime
> > structure, as a few formats support it explicitely or implicitely :
> > MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL, CSV,
> > GeoJSON, ODS, XLSX, KML (potentially GML too)...
> > 
> > Below a few potential solutions :
> > 
> > ---------------------------------------
> > Solution 1) : Millisecond accuracy, second becomes a float
> > 
> > This is the solution I've prototyped.
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> >    
> >        GInt16  Year;
> >        GByte   Month;
> >        GByte   Day;
> >        GByte   Hour;
> >        GByte   Minute;
> >        GByte   TZFlag;
> >        GByte   Precision; /* value in OGRDateTimePrecision */
> >        float   Second; /* from 00.000 to 60.999 (millisecond accuracy) */
> >    
> >    } Date;
> > 
> > } OGRField
> > 
> > So sub-second precision is representing with a single precision floating
> > point number, storing both integral and decimal parts. (we could
> > theorically have a hundredth of millisecond accuracy, 10^-5 s, since
> > 6099999 fits on the 23 bits of the mantissa)
> > 
> > Another addition is the Precision field that indicates which parts of the
> > datetime structure are significant.
> > 
> > /** Enumeration that defines the precision of a DateTime.
> > 
> >  * @since GDAL 2.0
> >  */
> > 
> > typedef enum
> > {
> > 
> >    ODTP_Undefined,     /**< Undefined */
> >    ODTP_Guess,         /**< Only valid when setting through
> >    SetField(i,year,
> > 
> > month...) where OGR will guess */
> > 
> >    ODTP_Y,             /**< Year is significant */
> >    ODTP_YM,            /**< Year and month are significant*/
> >    ODTP_YMD,           /**< Year, month and day are significant */
> >    ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and hour
> >    are
> > 
> > significant */
> > 
> >    ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour and
> > 
> > minute are significant */
> > 
> >    ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime), hour,
> >    minute
> > 
> > and integral second are significant */
> > 
> >    ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime), hour,
> >    minute
> > 
> > and second with microseconds are significant */
> > } OGRDateTimePrecision;
> > 
> > I think this is important since "2015/04/05 17:12:34" and "2015/04/05
> > 17:12:34.000" do not really mean the same thing and it might be good to
> > be able to preserve the original accuracy when converting between
> > formats.
> > 
> > A drawback of this solution is that the size of the OGRField structure
> > increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on 64
> > bit). This is probably not that important since in most cases not that
> > many OGRField structures are instanciated at one time (typically, you
> > iterate over features one at a time).
> > This could be more of a problem for use cases that involve the MEM
> > driver, as it keep all features in memory.
> > 
> > Another drawback is that the change of the structure might not be
> > directly noticed by application developers as the Second field name is
> > preserved, but a new Precision field is added, so there's a risk that
> > Precision is let uninitialized if the field is set through
> > OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That could
> > lead to unexpected formatting (but hopefully not crashes with defensive
> > programming). However I'd think it is unlikely that many applications
> > directly manipulate OGRField directly, instead of using the getters and
> > setters of OGRFeature.
> > 
> > ---------------------------------------
> > Solution 2) : Millisecond accuracy, second and milliseconds in distinct
> > fields
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> >    
> >        GInt16  Year;
> >        GByte   Month;
> >        GByte   Day;
> >        GByte   Hour;
> >        GByte   Minute;
> >        GByte   TZFlag;
> >        GByte   Precision; /* value in OGRDateTimePrecision */
> >        GByte   Second; /* from 0 to 60 */
> > 	
> > 	GUInt16 Millisecond; /* from 0 to 999 */
> > 	
> >    } Date;
> > 
> > } OGRField
> > 
> > Same size of structure as in 1)
> > 
> > ---------------------------------------
> > Solution 3) : Millisecond accuracy, pack all fields
> > 
> > Conceptually, this would use bit fields to avoid wasting unused bits :
> > 
> > typedef union {
> > [...]
> > 
> >  struct {
> >  
> >    GInt16        Year;
> >    GUIntBig     Month:4;
> >    GUIntBig     Day:5;
> >    GUIntBig     Hour:5;
> >    GUIntBig     Minute:6;
> >    GUIntBig     Second:6;
> >    GUIntBig     Millisecond:10; /* 0-999 */
> >    GUIntBig     TZFlag:8;
> >    GUIntBig     Precision:4;
> > 
> > } Date;
> > } OGRField;
> > 
> > This was proposed in the above mentionned ticket. And as there were
> > enough remaining bits, I've also added the Precision field (and in all
> > other solutions).
> > 
> > The advantage is that sizeof(mydate) remains 8 bytes on 32 bits builds.
> > 
> > But the C standard only defines bitfields of int/unsigned int, so this is
> > not portable, plus the fact that the way bits are packed is not defined
> > by the standard, so different compilers could come up with different
> > packing. A workaround is to do the bit manipulation through macros :
> > 
> > typedef union {
> > [...]
> > 
> >  struct {
> >  
> > 	GUIntBig	opaque;
> > 	
> >  } Date;
> > 
> > } OGRField;
> > 
> > #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
> > (shift)) & ((1 << (y_bits))-1))
> > 
> > #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
> > #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
> > #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
> > #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
> > #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
> > #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
> > #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
> > #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
> > #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
> > 
> > #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque &
> > (~( (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) <<
> > (shift)))
> > 
> > #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
> > #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
> > #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
> > #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
> > #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
> > #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
> > #define SET_MILLISECOND(x,val)     SET_BITS(x,val,10,64-16-4-5-5-6-6-10)
> > #define SET_TZFLAG(x,val)          SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8)
> > #define SET_PRECISION(x,val)      
> > SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
> > 
> > Main advantage: the size of OGRField remains unchanged (so 8 bytes on
> > 32-bit builds).
> > 
> > Drawback: manipulation of datetime members is less natural, but there are
> > not that many places in the GDAL code base were the OGRField.Date
> > members are used, so it is not much that a problem.
> > 
> > ---------------------------------------
> > Solution 4) : Microsecond accuracy with one field
> > 
> > Solution 1) used a float for second and sub-second, but a float has only
> > 23 bits of mantissa, which is enough to represent second with
> > millisecond accuracy, but not for microsecond (you need 26 bits for
> > that). So use a 32-bit integer instead of a 32-bit floating point.
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> >    
> >        GInt16  Year;
> >        GByte   Month;
> >        GByte   Day;
> >        GByte   Hour;
> >        GByte   Minute;
> >        GByte   TZFlag;
> >        GByte   Precision; /* value in OGRDateTimePrecision */
> >        GUInt32 Microseconds; /* 00000000 to 59999999 */
> >    
> >    } Date;
> > 
> > } OGRField
> > 
> > Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds
> > (and remain 16 bytes on 64-bit builds)
> > 
> > We would need to add an extra value in OGRDateTimePrecision to mean the
> > microsecond accuracy.
> > 
> > Not really clear we need microseconds accuracy... Most formats that
> > support subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
> > DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals
> > beyond second. From
> > http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
> > PostgreSQL supports microsecond accuracy.
> > 
> > ---------------------------------------
> > Solution 5) : Microsecond with 3 fields
> > 
> > A variant where we split second into 3 integer parts:
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> >    
> >        GInt16  Year;
> >        GByte   Month;
> >        GByte   Day;
> >        GByte   Hour;
> >        GByte   Minute;
> >        GByte   TZFlag;
> >        GByte   Precision; /* value in OGRDateTimePrecision */
> > 	
> > 	GByte   Second; /* 0 to 59 */
> > 	
> >        GUInt16  Millisecond; /* 0 to 999 */
> >        GUInt16 Microsecond; /* 0 to 999 */
> >    
> >    } Date;
> > 
> > } OGRField
> > 
> > Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on 32-bit
> > builds (and remain 16 bytes on 64-bit builds)
> > 
> > ---------------------------------------
> > Solution 6) : Nanosecond accuracy and beyond !
> > 
> > Now that we are using 16 bytes, why not having nanosecond accuracy ?
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> >    
> >        GInt16  Year;
> >        GByte   Month;
> >        GByte   Day;
> >        GByte   Hour;
> >        GByte   Minute;
> >        GByte   TZFlag;
> >        GByte   Precision; /* value in OGRDateTimePrecision */
> > 	
> > 	double   Second; /* 0.000000000 to 60.999999999 */
> > 	
> >    } Date;
> > 
> > } OGRField
> > 
> > Actually we even have picosecond accuracy! (since for picoseconds, we
> > need 46 bits and a double has 52 bits of mantissa). And if we use a
> > 64-bit integer instead of a double, we can have femtosecond accuracy ;-)
> > 
> > Any preference ?
> > 
> > Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From csbruce at cubewerx.com  Sun Apr  5 12:49:19 2015
From: csbruce at cubewerx.com (Craig Bruce)
Date: Sun, 05 Apr 2015 16:49:19 -0300
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504052125.53531.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>
Message-ID: <552191BF.3040603@cubewerx.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150405/78fce6bf/attachment.html>

From even.rouault at spatialys.com  Sun Apr  5 14:39:02 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 5 Apr 2015 23:39:02 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <552191BF.3040603@cubewerx.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<552191BF.3040603@cubewerx.com>
Message-ID: <201504052339.02358.even.rouault@spatialys.com>

Le dimanche 05 avril 2015 21:49:19, Craig Bruce a ?crit :
> On 2015-04-05 16:25, Even Rouault wrote:
> 
>     struct {
>         GInt16  Year;
>         GByte   Month;
>         GByte   Day;
>         GByte   Hour;
>         GByte   Minute;
>         GByte   TZFlag;
>         GByte   Precision; /* value in OGRDateTimePrecision */
>         float   Second; /* from 00.000 to 60.999 (millisecond accuracy) */
>     } Date;
>  If it's not too different from what exists, I have found that a good
> general solution is what Unix uses:

I should have mentionned what currently exists indeed :

    struct {
        GInt16  Year;
        GByte   Month;
        GByte   Day;
        GByte   Hour;
        GByte   Minute;
        GByte   Second;
        GByte   TZFlag; /* 0=unknown, 1=localtime(ambiguous), 
                           100=GMT, 104=GMT+1, 80=GMT-5, etc */
    } Date;

> 
>  struct {
>      GInt64  second;      /* assuming GInt64 and GUInt32 types exist */
>      GUInt32 nanosecond;
>  } Date;
> 

Hum, the issue with that is you must do conversions between the textual form 
(which is the one found in most OGR formats I mentionned) like "YYYY-MM-DD 
HH:MM:SS.sss[+/-hh:mm]" and this representation. Which brings all those 
questions of the convention for the timestamp (UTC, TAI, whatever..., how leap 
seconds are handled) if we allow people to set/get the raw field directly (if 
that was only for internal purposes, we could do whatever we want). Whereas 
most OGR formats I mention use the textual form, so no need for conversion 
currently (just separating each part of the string into the dedicated field).

> 
> This representation is good for nearly 300-billion years with uniform
> resolution of one nanosecond.  Don't take the evolutionary path of
> repeatedly discovering that you don't have enough precision and just jump
> straight to nanoseconds.  Time zones don't matter either;

We probably still want to be able to keep track of timezone as we do currently 
so as to be able to transport them losslessly when doing format conversion.

> just represent
> everything in UTC and display it in the local time zone of the client
> (using POSIX localtime_r() which is compatible with this representation). 

One of the annoyances is that time_t is 32-bit on 32-bit Linux. On Windows you 
must use localtime_s(), etc... For other needs, I had introduced portable 
versions of gmtime()/mktime() that work with 64bit integers in port/cpl_time.h 
, so I'd rather use that if we go to that path (but not sure how/if they work 
well with leap seconds ;-)).

But honestly, I'm not really enthousiastic about overhauling how we deal with 
date/time currently.


> Parsing strings isn't a big problem either; I've written code that can
> parse a packed-digit string like "20150405193638" into this structure in
> 27 nanoseconds on a computer that is several years old (by comparison, a
> simple string copy of the same string takes 25 nanoseconds). Date
> arithmetic and comparison is also very simple.  You can add the
> 'Precision' field if you need it.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Mon Apr  6 02:32:33 2015
From: bishop.dev at gmail.com (Dmitriy Baryshnikov)
Date: Mon, 06 Apr 2015 12:32:33 +0300
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504052125.53531.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>
Message-ID: <552252B1.10709@gmail.com>

The first solution looks reasonable. But there is lack in precision 
field - there the only time is significant:

ODTP_HMSm
ODTP_HMS
ODTP_HM
ODTP_H

etc.

Best regards,
     Dmitry

05.04.2015 22:25, Even Rouault ?????:
> Hi,
>
> In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680, which is
> about lack of precision of the current datetime structure, I've imagined
> different solutions how to modify the OGRField structure, and failed to pick up
> one that would be the obvious solution, so opinions are welcome.
>
> The issue is how to add (at least) microsecond accuracy to the datetime
> structure, as a few formats support it explicitely or implicitely : MapInfo,
> GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL, CSV, GeoJSON, ODS,
> XLSX, KML (potentially GML too)...
>
> Below a few potential solutions :
>
> ---------------------------------------
> Solution 1) : Millisecond accuracy, second becomes a float
>
> This is the solution I've prototyped.
>
> typedef union {
> [...]
>      struct {
>          GInt16  Year;
>          GByte   Month;
>          GByte   Day;
>          GByte   Hour;
>          GByte   Minute;
>          GByte   TZFlag;
>          GByte   Precision; /* value in OGRDateTimePrecision */
>          float   Second; /* from 00.000 to 60.999 (millisecond accuracy) */
>      } Date;
> } OGRField
>
> So sub-second precision is representing with a single precision floating point
> number, storing both integral and decimal parts. (we could theorically have a
> hundredth of millisecond accuracy, 10^-5 s, since 6099999 fits on the 23 bits
> of the mantissa)
>
> Another addition is the Precision field that indicates which parts of the
> datetime structure are significant.
>
> /** Enumeration that defines the precision of a DateTime.
>    * @since GDAL 2.0
>    */
> typedef enum
> {
>      ODTP_Undefined,     /**< Undefined */
>      ODTP_Guess,         /**< Only valid when setting through SetField(i,year,
> month...) where OGR will guess */
>      ODTP_Y,             /**< Year is significant */
>      ODTP_YM,            /**< Year and month are significant*/
>      ODTP_YMD,           /**< Year, month and day are significant */
>      ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and hour are
> significant */
>      ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour and
> minute are significant */
>      ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime), hour, minute
> and integral second are significant */
>      ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime), hour, minute
> and second with microseconds are significant */
> } OGRDateTimePrecision;
>
> I think this is important since "2015/04/05 17:12:34" and "2015/04/05
> 17:12:34.000" do not really mean the same thing and it might be good to be
> able to preserve the original accuracy when converting between formats.
>
> A drawback of this solution is that the size of the OGRField structure
> increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on 64 bit).
> This is probably not that important since in most cases not that many OGRField
> structures are instanciated at one time (typically, you iterate over features
> one at a time).
> This could be more of a problem for use cases that involve the MEM driver, as
> it keep all features in memory.
>
> Another drawback is that the change of the structure might not be directly
> noticed by application developers as the Second field name is preserved, but a
> new Precision field is added, so there's a risk that Precision is let
> uninitialized if the field is set through OGRFeature::SetField(int iFieldIndex,
> OGRField* psRawField). That could lead to unexpected formatting (but hopefully
> not crashes with defensive programming). However I'd think it is unlikely that
> many applications directly manipulate OGRField directly, instead of using the
> getters and setters of OGRFeature.
>
> ---------------------------------------
> Solution 2) : Millisecond accuracy, second and milliseconds in distinct fields
>
> typedef union {
> [...]
>      struct {
>          GInt16  Year;
>          GByte   Month;
>          GByte   Day;
>          GByte   Hour;
>          GByte   Minute;
>          GByte   TZFlag;
>          GByte   Precision; /* value in OGRDateTimePrecision */
>          GByte   Second; /* from 0 to 60 */
> 	GUInt16 Millisecond; /* from 0 to 999 */
>      } Date;
> } OGRField
>
> Same size of structure as in 1)
>
> ---------------------------------------
> Solution 3) : Millisecond accuracy, pack all fields
>
> Conceptually, this would use bit fields to avoid wasting unused bits :
>
> typedef union {
> [...]
>    struct {
>      GInt16        Year;
>      GUIntBig     Month:4;
>      GUIntBig     Day:5;
>      GUIntBig     Hour:5;
>      GUIntBig     Minute:6;
>      GUIntBig     Second:6;
>      GUIntBig     Millisecond:10; /* 0-999 */
>      GUIntBig     TZFlag:8;
>      GUIntBig     Precision:4;
>   } Date;
> } OGRField;
>
> This was proposed in the above mentionned ticket. And as there were enough
> remaining bits, I've also added the Precision field (and in all other
> solutions).
>
> The advantage is that sizeof(mydate) remains 8 bytes on 32 bits builds.
>
> But the C standard only defines bitfields of int/unsigned int, so this is not
> portable, plus the fact that the way bits are packed is not defined by the
> standard, so different compilers could come up with different packing. A
> workaround is to do the bit manipulation through macros :
>
> typedef union {
> [...]
>    struct {
> 	GUIntBig	opaque;
>    } Date;
> } OGRField;
>
> #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >> (shift)) &
> ((1 << (y_bits))-1))
>
> #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
> #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
> #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
> #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
> #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
> #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
> #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
> #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
> #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
>
> #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque & (~(
> (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) << (shift)))
>
> #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
> #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
> #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
> #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
> #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
> #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
> #define SET_MILLISECOND(x,val)     SET_BITS(x,val,10,64-16-4-5-5-6-6-10)
> #define SET_TZFLAG(x,val)          SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8)
> #define SET_PRECISION(x,val)       SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
>
> Main advantage: the size of OGRField remains unchanged (so 8 bytes on 32-bit
> builds).
>
> Drawback: manipulation of datetime members is less natural, but there are not
> that many places in the GDAL code base were the OGRField.Date members are
> used, so it is not much that a problem.
>
> ---------------------------------------
> Solution 4) : Microsecond accuracy with one field
>
> Solution 1) used a float for second and sub-second, but a float has only 23 bits
> of mantissa, which is enough to represent second with millisecond accuracy,
> but not for microsecond (you need 26 bits for that). So use a 32-bit integer
> instead of a 32-bit floating point.
>
> typedef union {
> [...]
>      struct {
>          GInt16  Year;
>          GByte   Month;
>          GByte   Day;
>          GByte   Hour;
>          GByte   Minute;
>          GByte   TZFlag;
>          GByte   Precision; /* value in OGRDateTimePrecision */
>          GUInt32 Microseconds; /* 00000000 to 59999999 */
>      } Date;
> } OGRField
>
> Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds (and
> remain 16 bytes on 64-bit builds)
>
> We would need to add an extra value in OGRDateTimePrecision to mean the
> microsecond accuracy.
>
> Not really clear we need microseconds accuracy... Most formats that support
> subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
> DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals beyond
> second. From http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
> PostgreSQL supports microsecond accuracy.
>
> ---------------------------------------
> Solution 5) : Microsecond with 3 fields
>
> A variant where we split second into 3 integer parts:
>
> typedef union {
> [...]
>      struct {
>          GInt16  Year;
>          GByte   Month;
>          GByte   Day;
>          GByte   Hour;
>          GByte   Minute;
>          GByte   TZFlag;
>          GByte   Precision; /* value in OGRDateTimePrecision */
> 	GByte   Second; /* 0 to 59 */
>          GUInt16  Millisecond; /* 0 to 999 */
>          GUInt16 Microsecond; /* 0 to 999 */
>      } Date;
> } OGRField
>
> Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on 32-bit builds
> (and remain 16 bytes on 64-bit builds)
>
> ---------------------------------------
> Solution 6) : Nanosecond accuracy and beyond !
>
> Now that we are using 16 bytes, why not having nanosecond accuracy ?
>
> typedef union {
> [...]
>      struct {
>          GInt16  Year;
>          GByte   Month;
>          GByte   Day;
>          GByte   Hour;
>          GByte   Minute;
>          GByte   TZFlag;
>          GByte   Precision; /* value in OGRDateTimePrecision */
> 	double   Second; /* 0.000000000 to 60.999999999 */
>      } Date;
> } OGRField
>
> Actually we even have picosecond accuracy! (since for picoseconds, we need 46
> bits and a double has 52 bits of mantissa). And if we use a 64-bit integer
> instead of a double, we can have femtosecond accuracy ;-)
>
> Any preference ?
>
> Even
>


From ChiefDan at gmail.com  Mon Apr  6 02:52:04 2015
From: ChiefDan at gmail.com (ChiefDan)
Date: Mon, 6 Apr 2015 02:52:04 -0700 (PDT)
Subject: [gdal-dev] Unable to find various object files for GEOS and
 ogrsqlitedatasource
In-Reply-To: <1428023990715-5196680.post@n6.nabble.com>
References: <1428023990715-5196680.post@n6.nabble.com>
Message-ID: <1428313924542-5200064.post@n6.nabble.com>

I think the issue was enabling geos support in the configure process but not
passing it the directory for geos_config.



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Unable-to-find-various-object-files-for-GEOS-and-ogrsqlitedatasource-tp5196680p5200064.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From bradh at frogmouth.net  Mon Apr  6 04:26:11 2015
From: bradh at frogmouth.net (Brad Hards)
Date: Mon, 06 Apr 2015 21:26:11 +1000
Subject: [gdal-dev] Add Mercator_variant_A method?
Message-ID: <28009649.ARrsKQEWmZ@saxicola>

I'm looking at geopackage support, and particularly at the NGA's draft 
"profile". 

It defines (and references) some spatial reference systems, including some 
interesting variations that will require more work later. For tonight, lets 
look at just one case:
PROJCS["WGS 84 / World Mercator",
	GEOGCS["WGS 84",
		DATUM["World Geodetic System 1984",
			SPHEROID["WGS 84",6378137,298.257223563,
				AUTHORITY["EPSG","7030"]],
			AUTHORITY["EPSG","6326"]],
		PRIMEM["Greenwich",0,
			AUTHORITY["EPSG","8901"]],
		UNIT["degree",0.0174532925199433,
			AUTHORITY["EPSG","9122"]],
		AUTHORITY["EPSG","4326"]],
	PROJECTION["Mercator_variant_A",
		AUTHORITY["EPSG","9804"]],
	PARAMETER["Latitude of natural origin",0],
	PARAMETER["Longitude of natural origin",0],
	PARAMETER["Scale factor at natural origin",1],
	PARAMETER["False easting",0],
	PARAMETER["False northing",0],		
	UNIT["metre",1,
		AUTHORITY["EPSG","9001"]],
	AXIS["Easting",EAST],
	AXIS["Northing",NORTH],	
	AUTHORITY["EPSG","3395"]]

The problematic part is that "PROJECTION" definition. I was originally going to 
argue it should be Mercator_1SP, but it looks like the EPSG decided to change 
it (in EPSG::2010.058) to this new "Mercator_variant_A" form, and keep the 
"Mercator_1SP" form as an alias.

Should we add the new form, with a change like:

diff --git a/gdal/ogr/ogr_srs_api.h b/gdal/ogr/ogr_srs_api.h
index 04dcf04..4349c06 100644
--- a/gdal/ogr/ogr_srs_api.h
+++ b/gdal/ogr/ogr_srs_api.h
@@ -136,6 +136,8 @@ typedef enum {
                                 "Lambert_Azimuthal_Equal_Area"
 #define SRS_PT_MERCATOR_1SP     "Mercator_1SP"
 #define SRS_PT_MERCATOR_2SP     "Mercator_2SP"
+#define SRS_PT_MERCATOR_VARIANT_A                                       \
+                                "Mercator_variant_A"
 // Mercator_Auxiliary_Sphere is used used by ESRI to mean EPSG:3875
 #define SRS_PT_MERCATOR_AUXILIARY_SPHERE                                 \
                                 "Mercator_Auxiliary_Sphere"
diff --git a/gdal/ogr/ogr_srs_proj4.cpp b/gdal/ogr/ogr_srs_proj4.cpp
index 002ef07..32772ba 100644
--- a/gdal/ogr/ogr_srs_proj4.cpp
+++ b/gdal/ogr/ogr_srs_proj4.cpp
@@ -1650,7 +1650,7 @@ OGRErr OGRSpatialReference::exportToProj4( char ** 
ppszProj4 ) const
                  GetNormProjParm(SRS_PP_FALSE_NORTHING,0.0) );
     }
 
-    else if( EQUAL(pszProjection,SRS_PT_MERCATOR_1SP) )
+    else if( EQUAL(pszProjection,SRS_PT_MERCATOR_1SP) || 
EQUAL(pszProjection,SRS_PT_MERCATOR_VARIANT_A) )
     {
         if( GetNormProjParm(SRS_PP_LATITUDE_OF_ORIGIN,0.0) == 0.0 )
             CPLsprintf( szProj4+strlen(szProj4),

From even.rouault at spatialys.com  Mon Apr  6 04:48:47 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 6 Apr 2015 13:48:47 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <552252B1.10709@gmail.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<552252B1.10709@gmail.com>
Message-ID: <201504061348.48263.even.rouault@spatialys.com>

Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
> The first solution looks reasonable. But there is lack in precision
> field - there the only time is significant:
> 
> ODTP_HMSm
> ODTP_HMS
> ODTP_HM
> ODTP_H

As I didn't want to multiply the values in the enumeration, my intent was to 
reuse the ODTP_YMDxxxx values for OFTTime only. This was what I wanted to 
intend with the precision between parenthesis in the comment of ODTP_YMDH 
"Year, month, day (if OFTDateTime) and hour"

Or perhaps, the enumeration should capture the most precise part of the 
(date)time structure  ?
ODTP_Year
ODTP_Month
ODTP_Day
ODTP_Hour
ODTP_Minute
ODTP_Second
ODTP_Millisecond

> 
> etc.
> 
> Best regards,
>      Dmitry
> 
> 05.04.2015 22:25, Even Rouault ?????:
> > Hi,
> > 
> > In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680, which
> > is about lack of precision of the current datetime structure, I've
> > imagined different solutions how to modify the OGRField structure, and
> > failed to pick up one that would be the obvious solution, so opinions
> > are welcome.
> > 
> > The issue is how to add (at least) microsecond accuracy to the datetime
> > structure, as a few formats support it explicitely or implicitely :
> > MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL, CSV,
> > GeoJSON, ODS, XLSX, KML (potentially GML too)...
> > 
> > Below a few potential solutions :
> > 
> > ---------------------------------------
> > Solution 1) : Millisecond accuracy, second becomes a float
> > 
> > This is the solution I've prototyped.
> > 
> > typedef union {
> > [...]
> > 
> >      struct {
> >      
> >          GInt16  Year;
> >          GByte   Month;
> >          GByte   Day;
> >          GByte   Hour;
> >          GByte   Minute;
> >          GByte   TZFlag;
> >          GByte   Precision; /* value in OGRDateTimePrecision */
> >          float   Second; /* from 00.000 to 60.999 (millisecond accuracy)
> >          */
> >      
> >      } Date;
> > 
> > } OGRField
> > 
> > So sub-second precision is representing with a single precision floating
> > point number, storing both integral and decimal parts. (we could
> > theorically have a hundredth of millisecond accuracy, 10^-5 s, since
> > 6099999 fits on the 23 bits of the mantissa)
> > 
> > Another addition is the Precision field that indicates which parts of the
> > datetime structure are significant.
> > 
> > /** Enumeration that defines the precision of a DateTime.
> > 
> >    * @since GDAL 2.0
> >    */
> > 
> > typedef enum
> > {
> > 
> >      ODTP_Undefined,     /**< Undefined */
> >      ODTP_Guess,         /**< Only valid when setting through
> >      SetField(i,year,
> > 
> > month...) where OGR will guess */
> > 
> >      ODTP_Y,             /**< Year is significant */
> >      ODTP_YM,            /**< Year and month are significant*/
> >      ODTP_YMD,           /**< Year, month and day are significant */
> >      ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and hour
> >      are
> > 
> > significant */
> > 
> >      ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour and
> > 
> > minute are significant */
> > 
> >      ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime), hour,
> >      minute
> > 
> > and integral second are significant */
> > 
> >      ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime), hour,
> >      minute
> > 
> > and second with microseconds are significant */
> > } OGRDateTimePrecision;
> > 
> > I think this is important since "2015/04/05 17:12:34" and "2015/04/05
> > 17:12:34.000" do not really mean the same thing and it might be good to
> > be able to preserve the original accuracy when converting between
> > formats.
> > 
> > A drawback of this solution is that the size of the OGRField structure
> > increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on 64
> > bit). This is probably not that important since in most cases not that
> > many OGRField structures are instanciated at one time (typically, you
> > iterate over features one at a time).
> > This could be more of a problem for use cases that involve the MEM
> > driver, as it keep all features in memory.
> > 
> > Another drawback is that the change of the structure might not be
> > directly noticed by application developers as the Second field name is
> > preserved, but a new Precision field is added, so there's a risk that
> > Precision is let uninitialized if the field is set through
> > OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That could
> > lead to unexpected formatting (but hopefully not crashes with defensive
> > programming). However I'd think it is unlikely that many applications
> > directly manipulate OGRField directly, instead of using the getters and
> > setters of OGRFeature.
> > 
> > ---------------------------------------
> > Solution 2) : Millisecond accuracy, second and milliseconds in distinct
> > fields
> > 
> > typedef union {
> > [...]
> > 
> >      struct {
> >      
> >          GInt16  Year;
> >          GByte   Month;
> >          GByte   Day;
> >          GByte   Hour;
> >          GByte   Minute;
> >          GByte   TZFlag;
> >          GByte   Precision; /* value in OGRDateTimePrecision */
> >          GByte   Second; /* from 0 to 60 */
> > 	
> > 	GUInt16 Millisecond; /* from 0 to 999 */
> > 	
> >      } Date;
> > 
> > } OGRField
> > 
> > Same size of structure as in 1)
> > 
> > ---------------------------------------
> > Solution 3) : Millisecond accuracy, pack all fields
> > 
> > Conceptually, this would use bit fields to avoid wasting unused bits :
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> >    
> >      GInt16        Year;
> >      GUIntBig     Month:4;
> >      GUIntBig     Day:5;
> >      GUIntBig     Hour:5;
> >      GUIntBig     Minute:6;
> >      GUIntBig     Second:6;
> >      GUIntBig     Millisecond:10; /* 0-999 */
> >      GUIntBig     TZFlag:8;
> >      GUIntBig     Precision:4;
> >   
> >   } Date;
> > 
> > } OGRField;
> > 
> > This was proposed in the above mentionned ticket. And as there were
> > enough remaining bits, I've also added the Precision field (and in all
> > other solutions).
> > 
> > The advantage is that sizeof(mydate) remains 8 bytes on 32 bits builds.
> > 
> > But the C standard only defines bitfields of int/unsigned int, so this is
> > not portable, plus the fact that the way bits are packed is not defined
> > by the standard, so different compilers could come up with different
> > packing. A workaround is to do the bit manipulation through macros :
> > 
> > typedef union {
> > [...]
> > 
> >    struct {
> > 	
> > 	GUIntBig	opaque;
> > 	
> >    } Date;
> > 
> > } OGRField;
> > 
> > #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
> > (shift)) & ((1 << (y_bits))-1))
> > 
> > #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
> > #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
> > #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
> > #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
> > #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
> > #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
> > #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
> > #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
> > #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
> > 
> > #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque &
> > (~( (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) <<
> > (shift)))
> > 
> > #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
> > #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
> > #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
> > #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
> > #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
> > #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
> > #define SET_MILLISECOND(x,val)     SET_BITS(x,val,10,64-16-4-5-5-6-6-10)
> > #define SET_TZFLAG(x,val)          SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8)
> > #define SET_PRECISION(x,val)      
> > SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
> > 
> > Main advantage: the size of OGRField remains unchanged (so 8 bytes on
> > 32-bit builds).
> > 
> > Drawback: manipulation of datetime members is less natural, but there are
> > not that many places in the GDAL code base were the OGRField.Date
> > members are used, so it is not much that a problem.
> > 
> > ---------------------------------------
> > Solution 4) : Microsecond accuracy with one field
> > 
> > Solution 1) used a float for second and sub-second, but a float has only
> > 23 bits of mantissa, which is enough to represent second with
> > millisecond accuracy, but not for microsecond (you need 26 bits for
> > that). So use a 32-bit integer instead of a 32-bit floating point.
> > 
> > typedef union {
> > [...]
> > 
> >      struct {
> >      
> >          GInt16  Year;
> >          GByte   Month;
> >          GByte   Day;
> >          GByte   Hour;
> >          GByte   Minute;
> >          GByte   TZFlag;
> >          GByte   Precision; /* value in OGRDateTimePrecision */
> >          GUInt32 Microseconds; /* 00000000 to 59999999 */
> >      
> >      } Date;
> > 
> > } OGRField
> > 
> > Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds
> > (and remain 16 bytes on 64-bit builds)
> > 
> > We would need to add an extra value in OGRDateTimePrecision to mean the
> > microsecond accuracy.
> > 
> > Not really clear we need microseconds accuracy... Most formats that
> > support subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
> > DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals
> > beyond second. From
> > http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
> > PostgreSQL supports microsecond accuracy.
> > 
> > ---------------------------------------
> > Solution 5) : Microsecond with 3 fields
> > 
> > A variant where we split second into 3 integer parts:
> > 
> > typedef union {
> > [...]
> > 
> >      struct {
> >      
> >          GInt16  Year;
> >          GByte   Month;
> >          GByte   Day;
> >          GByte   Hour;
> >          GByte   Minute;
> >          GByte   TZFlag;
> >          GByte   Precision; /* value in OGRDateTimePrecision */
> > 	
> > 	GByte   Second; /* 0 to 59 */
> > 	
> >          GUInt16  Millisecond; /* 0 to 999 */
> >          GUInt16 Microsecond; /* 0 to 999 */
> >      
> >      } Date;
> > 
> > } OGRField
> > 
> > Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on 32-bit
> > builds (and remain 16 bytes on 64-bit builds)
> > 
> > ---------------------------------------
> > Solution 6) : Nanosecond accuracy and beyond !
> > 
> > Now that we are using 16 bytes, why not having nanosecond accuracy ?
> > 
> > typedef union {
> > [...]
> > 
> >      struct {
> >      
> >          GInt16  Year;
> >          GByte   Month;
> >          GByte   Day;
> >          GByte   Hour;
> >          GByte   Minute;
> >          GByte   TZFlag;
> >          GByte   Precision; /* value in OGRDateTimePrecision */
> > 	
> > 	double   Second; /* 0.000000000 to 60.999999999 */
> > 	
> >      } Date;
> > 
> > } OGRField
> > 
> > Actually we even have picosecond accuracy! (since for picoseconds, we
> > need 46 bits and a double has 52 bits of mantissa). And if we use a
> > 64-bit integer instead of a double, we can have femtosecond accuracy ;-)
> > 
> > Any preference ?
> > 
> > Even
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Apr  6 04:56:16 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 6 Apr 2015 13:56:16 +0200
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <28009649.ARrsKQEWmZ@saxicola>
References: <28009649.ARrsKQEWmZ@saxicola>
Message-ID: <201504061356.16620.even.rouault@spatialys.com>

Le lundi 06 avril 2015 13:26:11, Brad Hards a ?crit :
> I'm looking at geopackage support, and particularly at the NGA's draft
> "profile".
> 
> It defines (and references) some spatial reference systems, including some
> interesting variations that will require more work later. For tonight, lets
> look at just one case:
> PROJCS["WGS 84 / World Mercator",
> 	GEOGCS["WGS 84",
> 		DATUM["World Geodetic System 1984",
> 			SPHEROID["WGS 84",6378137,298.257223563,
> 				AUTHORITY["EPSG","7030"]],
> 			AUTHORITY["EPSG","6326"]],
> 		PRIMEM["Greenwich",0,
> 			AUTHORITY["EPSG","8901"]],
> 		UNIT["degree",0.0174532925199433,
> 			AUTHORITY["EPSG","9122"]],
> 		AUTHORITY["EPSG","4326"]],
> 	PROJECTION["Mercator_variant_A",
> 		AUTHORITY["EPSG","9804"]],
> 	PARAMETER["Latitude of natural origin",0],
> 	PARAMETER["Longitude of natural origin",0],
> 	PARAMETER["Scale factor at natural origin",1],
> 	PARAMETER["False easting",0],
> 	PARAMETER["False northing",0],
> 	UNIT["metre",1,
> 		AUTHORITY["EPSG","9001"]],
> 	AXIS["Easting",EAST],
> 	AXIS["Northing",NORTH],
> 	AUTHORITY["EPSG","3395"]]
> 
> The problematic part is that "PROJECTION" definition. I was originally
> going to argue it should be Mercator_1SP, but it looks like the EPSG
> decided to change it (in EPSG::2010.058) to this new "Mercator_variant_A"
> form, and keep the "Mercator_1SP" form as an alias.
> 
> Should we add the new form, with a change like:

The issue with this is that you only fix the exportToProj4(). But there are 
other places in the code base where SRS_PT_MERCATOR_1SP is tested (for example 
when creating a dataset in other formats). It would be annoying to test in all 
those places both variants. Why not "normalizing"  "Mercator_variant_A" into 
"Mercator_1SP" on ingestion of GeoPackage WKT ? This would be a bit similar to 
all the tricks we do when ingesting ESRI WKT.

> 
> diff --git a/gdal/ogr/ogr_srs_api.h b/gdal/ogr/ogr_srs_api.h
> index 04dcf04..4349c06 100644
> --- a/gdal/ogr/ogr_srs_api.h
> +++ b/gdal/ogr/ogr_srs_api.h
> @@ -136,6 +136,8 @@ typedef enum {
>                                  "Lambert_Azimuthal_Equal_Area"
>  #define SRS_PT_MERCATOR_1SP     "Mercator_1SP"
>  #define SRS_PT_MERCATOR_2SP     "Mercator_2SP"
> +#define SRS_PT_MERCATOR_VARIANT_A                                       \
> +                                "Mercator_variant_A"
>  // Mercator_Auxiliary_Sphere is used used by ESRI to mean EPSG:3875
>  #define SRS_PT_MERCATOR_AUXILIARY_SPHERE                                 \
>                                  "Mercator_Auxiliary_Sphere"
> diff --git a/gdal/ogr/ogr_srs_proj4.cpp b/gdal/ogr/ogr_srs_proj4.cpp
> index 002ef07..32772ba 100644
> --- a/gdal/ogr/ogr_srs_proj4.cpp
> +++ b/gdal/ogr/ogr_srs_proj4.cpp
> @@ -1650,7 +1650,7 @@ OGRErr OGRSpatialReference::exportToProj4( char **
> ppszProj4 ) const
>                   GetNormProjParm(SRS_PP_FALSE_NORTHING,0.0) );
>      }
> 
> -    else if( EQUAL(pszProjection,SRS_PT_MERCATOR_1SP) )
> +    else if( EQUAL(pszProjection,SRS_PT_MERCATOR_1SP) ||
> EQUAL(pszProjection,SRS_PT_MERCATOR_VARIANT_A) )
>      {
>          if( GetNormProjParm(SRS_PP_LATITUDE_OF_ORIGIN,0.0) == 0.0 )
>              CPLsprintf( szProj4+strlen(szProj4),
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Apr  6 05:02:22 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 6 Apr 2015 14:02:22 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504061348.48263.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<552252B1.10709@gmail.com>
	<201504061348.48263.even.rouault@spatialys.com>
Message-ID: <201504061402.22044.even.rouault@spatialys.com>

Le lundi 06 avril 2015 13:48:47, Even Rouault a ?crit :
> Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
> > The first solution looks reasonable. But there is lack in precision
> > field - there the only time is significant:
> > 
> > ODTP_HMSm
> > ODTP_HMS
> > ODTP_HM
> > ODTP_H
> 
> As I didn't want to multiply the values in the enumeration, my intent was
> to reuse the ODTP_YMDxxxx values for OFTTime only. 

I meant "for OFTTime too"

> This was what I wanted
> to intend with the precision between parenthesis in the comment of
> ODTP_YMDH "Year, month, day (if OFTDateTime) and hour"
> 
> Or perhaps, the enumeration should capture the most precise part of the
> (date)time structure  ?
> ODTP_Year
> ODTP_Month
> ODTP_Day
> ODTP_Hour
> ODTP_Minute
> ODTP_Second
> ODTP_Millisecond
> 
> > etc.
> > 
> > Best regards,
> > 
> >      Dmitry
> > 
> > 05.04.2015 22:25, Even Rouault ?????:
> > > Hi,
> > > 
> > > In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680,
> > > which is about lack of precision of the current datetime structure,
> > > I've imagined different solutions how to modify the OGRField
> > > structure, and failed to pick up one that would be the obvious
> > > solution, so opinions are welcome.
> > > 
> > > The issue is how to add (at least) microsecond accuracy to the datetime
> > > structure, as a few formats support it explicitely or implicitely :
> > > MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL,
> > > CSV, GeoJSON, ODS, XLSX, KML (potentially GML too)...
> > > 
> > > Below a few potential solutions :
> > > 
> > > ---------------------------------------
> > > Solution 1) : Millisecond accuracy, second becomes a float
> > > 
> > > This is the solution I've prototyped.
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >      struct {
> > >      
> > >          GInt16  Year;
> > >          GByte   Month;
> > >          GByte   Day;
> > >          GByte   Hour;
> > >          GByte   Minute;
> > >          GByte   TZFlag;
> > >          GByte   Precision; /* value in OGRDateTimePrecision */
> > >          float   Second; /* from 00.000 to 60.999 (millisecond
> > >          accuracy) */
> > >      
> > >      } Date;
> > > 
> > > } OGRField
> > > 
> > > So sub-second precision is representing with a single precision
> > > floating point number, storing both integral and decimal parts. (we
> > > could theorically have a hundredth of millisecond accuracy, 10^-5 s,
> > > since 6099999 fits on the 23 bits of the mantissa)
> > > 
> > > Another addition is the Precision field that indicates which parts of
> > > the datetime structure are significant.
> > > 
> > > /** Enumeration that defines the precision of a DateTime.
> > > 
> > >    * @since GDAL 2.0
> > >    */
> > > 
> > > typedef enum
> > > {
> > > 
> > >      ODTP_Undefined,     /**< Undefined */
> > >      ODTP_Guess,         /**< Only valid when setting through
> > >      SetField(i,year,
> > > 
> > > month...) where OGR will guess */
> > > 
> > >      ODTP_Y,             /**< Year is significant */
> > >      ODTP_YM,            /**< Year and month are significant*/
> > >      ODTP_YMD,           /**< Year, month and day are significant */
> > >      ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and
> > >      hour are
> > > 
> > > significant */
> > > 
> > >      ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour
> > >      and
> > > 
> > > minute are significant */
> > > 
> > >      ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime), hour,
> > >      minute
> > > 
> > > and integral second are significant */
> > > 
> > >      ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime), hour,
> > >      minute
> > > 
> > > and second with microseconds are significant */
> > > } OGRDateTimePrecision;
> > > 
> > > I think this is important since "2015/04/05 17:12:34" and "2015/04/05
> > > 17:12:34.000" do not really mean the same thing and it might be good to
> > > be able to preserve the original accuracy when converting between
> > > formats.
> > > 
> > > A drawback of this solution is that the size of the OGRField structure
> > > increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on
> > > 64 bit). This is probably not that important since in most cases not
> > > that many OGRField structures are instanciated at one time (typically,
> > > you iterate over features one at a time).
> > > This could be more of a problem for use cases that involve the MEM
> > > driver, as it keep all features in memory.
> > > 
> > > Another drawback is that the change of the structure might not be
> > > directly noticed by application developers as the Second field name is
> > > preserved, but a new Precision field is added, so there's a risk that
> > > Precision is let uninitialized if the field is set through
> > > OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That could
> > > lead to unexpected formatting (but hopefully not crashes with defensive
> > > programming). However I'd think it is unlikely that many applications
> > > directly manipulate OGRField directly, instead of using the getters and
> > > setters of OGRFeature.
> > > 
> > > ---------------------------------------
> > > Solution 2) : Millisecond accuracy, second and milliseconds in distinct
> > > fields
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >      struct {
> > >      
> > >          GInt16  Year;
> > >          GByte   Month;
> > >          GByte   Day;
> > >          GByte   Hour;
> > >          GByte   Minute;
> > >          GByte   TZFlag;
> > >          GByte   Precision; /* value in OGRDateTimePrecision */
> > >          GByte   Second; /* from 0 to 60 */
> > > 	
> > > 	GUInt16 Millisecond; /* from 0 to 999 */
> > > 	
> > >      } Date;
> > > 
> > > } OGRField
> > > 
> > > Same size of structure as in 1)
> > > 
> > > ---------------------------------------
> > > Solution 3) : Millisecond accuracy, pack all fields
> > > 
> > > Conceptually, this would use bit fields to avoid wasting unused bits :
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >    struct {
> > >    
> > >      GInt16        Year;
> > >      GUIntBig     Month:4;
> > >      GUIntBig     Day:5;
> > >      GUIntBig     Hour:5;
> > >      GUIntBig     Minute:6;
> > >      GUIntBig     Second:6;
> > >      GUIntBig     Millisecond:10; /* 0-999 */
> > >      GUIntBig     TZFlag:8;
> > >      GUIntBig     Precision:4;
> > >   
> > >   } Date;
> > > 
> > > } OGRField;
> > > 
> > > This was proposed in the above mentionned ticket. And as there were
> > > enough remaining bits, I've also added the Precision field (and in all
> > > other solutions).
> > > 
> > > The advantage is that sizeof(mydate) remains 8 bytes on 32 bits builds.
> > > 
> > > But the C standard only defines bitfields of int/unsigned int, so this
> > > is not portable, plus the fact that the way bits are packed is not
> > > defined by the standard, so different compilers could come up with
> > > different packing. A workaround is to do the bit manipulation through
> > > macros :
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >    struct {
> > > 	
> > > 	GUIntBig	opaque;
> > > 	
> > >    } Date;
> > > 
> > > } OGRField;
> > > 
> > > #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
> > > (shift)) & ((1 << (y_bits))-1))
> > > 
> > > #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
> > > #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
> > > #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
> > > #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
> > > #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
> > > #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
> > > #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
> > > #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
> > > #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
> > > 
> > > #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque
> > > & (~( (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) <<
> > > (shift)))
> > > 
> > > #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
> > > #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
> > > #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
> > > #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
> > > #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
> > > #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
> > > #define SET_MILLISECOND(x,val)    
> > > SET_BITS(x,val,10,64-16-4-5-5-6-6-10) #define SET_TZFLAG(x,val)       
> > >   SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8) #define SET_PRECISION(x,val)
> > > SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
> > > 
> > > Main advantage: the size of OGRField remains unchanged (so 8 bytes on
> > > 32-bit builds).
> > > 
> > > Drawback: manipulation of datetime members is less natural, but there
> > > are not that many places in the GDAL code base were the OGRField.Date
> > > members are used, so it is not much that a problem.
> > > 
> > > ---------------------------------------
> > > Solution 4) : Microsecond accuracy with one field
> > > 
> > > Solution 1) used a float for second and sub-second, but a float has
> > > only 23 bits of mantissa, which is enough to represent second with
> > > millisecond accuracy, but not for microsecond (you need 26 bits for
> > > that). So use a 32-bit integer instead of a 32-bit floating point.
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >      struct {
> > >      
> > >          GInt16  Year;
> > >          GByte   Month;
> > >          GByte   Day;
> > >          GByte   Hour;
> > >          GByte   Minute;
> > >          GByte   TZFlag;
> > >          GByte   Precision; /* value in OGRDateTimePrecision */
> > >          GUInt32 Microseconds; /* 00000000 to 59999999 */
> > >      
> > >      } Date;
> > > 
> > > } OGRField
> > > 
> > > Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds
> > > (and remain 16 bytes on 64-bit builds)
> > > 
> > > We would need to add an extra value in OGRDateTimePrecision to mean the
> > > microsecond accuracy.
> > > 
> > > Not really clear we need microseconds accuracy... Most formats that
> > > support subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
> > > DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals
> > > beyond second. From
> > > http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
> > > PostgreSQL supports microsecond accuracy.
> > > 
> > > ---------------------------------------
> > > Solution 5) : Microsecond with 3 fields
> > > 
> > > A variant where we split second into 3 integer parts:
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >      struct {
> > >      
> > >          GInt16  Year;
> > >          GByte   Month;
> > >          GByte   Day;
> > >          GByte   Hour;
> > >          GByte   Minute;
> > >          GByte   TZFlag;
> > >          GByte   Precision; /* value in OGRDateTimePrecision */
> > > 	
> > > 	GByte   Second; /* 0 to 59 */
> > > 	
> > >          GUInt16  Millisecond; /* 0 to 999 */
> > >          GUInt16 Microsecond; /* 0 to 999 */
> > >      
> > >      } Date;
> > > 
> > > } OGRField
> > > 
> > > Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on 32-bit
> > > builds (and remain 16 bytes on 64-bit builds)
> > > 
> > > ---------------------------------------
> > > Solution 6) : Nanosecond accuracy and beyond !
> > > 
> > > Now that we are using 16 bytes, why not having nanosecond accuracy ?
> > > 
> > > typedef union {
> > > [...]
> > > 
> > >      struct {
> > >      
> > >          GInt16  Year;
> > >          GByte   Month;
> > >          GByte   Day;
> > >          GByte   Hour;
> > >          GByte   Minute;
> > >          GByte   TZFlag;
> > >          GByte   Precision; /* value in OGRDateTimePrecision */
> > > 	
> > > 	double   Second; /* 0.000000000 to 60.999999999 */
> > > 	
> > >      } Date;
> > > 
> > > } OGRField
> > > 
> > > Actually we even have picosecond accuracy! (since for picoseconds, we
> > > need 46 bits and a double has 52 bits of mantissa). And if we use a
> > > 64-bit integer instead of a double, we can have femtosecond accuracy
> > > ;-)
> > > 
> > > Any preference ?
> > > 
> > > Even
> > 
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bradh at frogmouth.net  Mon Apr  6 14:09:09 2015
From: bradh at frogmouth.net (Brad Hards)
Date: Tue, 07 Apr 2015 07:09:09 +1000
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <201504061356.16620.even.rouault@spatialys.com>
References: <28009649.ARrsKQEWmZ@saxicola>
	<201504061356.16620.even.rouault@spatialys.com>
Message-ID: <4107675.6fJsqCrT4Y@saxicola>

On Mon, 6 Apr 2015 01:56:16 PM you wrote:
> Le lundi 06 avril 2015 13:26:11, Brad Hards a ?crit :
> > The problematic part is that "PROJECTION" definition. I was originally
> > going to argue it should be Mercator_1SP, but it looks like the EPSG
> > decided to change it (in EPSG::2010.058) to this new "Mercator_variant_A"
> > form, and keep the "Mercator_1SP" form as an alias.
> 
> > Should we add the new form, with a change like:
> The issue with this is that you only fix the exportToProj4(). But there are
> other places in the code base where SRS_PT_MERCATOR_1SP is tested (for
> example when creating a dataset in other formats). It would be annoying to
> test in all those places both variants. Why not "normalizing" 
> "Mercator_variant_A" into "Mercator_1SP" on ingestion of GeoPackage WKT ?
> This would be a bit similar to all the tricks we do when ingesting ESRI
> WKT.
Do you mean just a test in gpkg/ogrgeopackagedatasource.cpp, or a more general 
normalisation since presumably that will come up in other WKT?

Brad

From bishop.dev at gmail.com  Mon Apr  6 14:11:21 2015
From: bishop.dev at gmail.com (Dmitriy Baryshnikov)
Date: Tue, 07 Apr 2015 00:11:21 +0300
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504061402.22044.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>	<552252B1.10709@gmail.com>	<201504061348.48263.even.rouault@spatialys.com>
	<201504061402.22044.even.rouault@spatialys.com>
Message-ID: <5522F679.10203@gmail.com>

Hi Even,

It seems to me that this is duplicating of RFC 50: OGR field subtypes.
For example we have the master field type DateTime and Subtype - Year.
So the internal structure for date/time representation may be adopt to 
such technique.

Best regards,
     Dmitry

06.04.2015 15:02, Even Rouault ?????:
> Le lundi 06 avril 2015 13:48:47, Even Rouault a ?crit :
>> Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
>>> The first solution looks reasonable. But there is lack in precision
>>> field - there the only time is significant:
>>>
>>> ODTP_HMSm
>>> ODTP_HMS
>>> ODTP_HM
>>> ODTP_H
>> As I didn't want to multiply the values in the enumeration, my intent was
>> to reuse the ODTP_YMDxxxx values for OFTTime only.
> I meant "for OFTTime too"
>
>> This was what I wanted
>> to intend with the precision between parenthesis in the comment of
>> ODTP_YMDH "Year, month, day (if OFTDateTime) and hour"
>>
>> Or perhaps, the enumeration should capture the most precise part of the
>> (date)time structure  ?
>> ODTP_Year
>> ODTP_Month
>> ODTP_Day
>> ODTP_Hour
>> ODTP_Minute
>> ODTP_Second
>> ODTP_Millisecond
>>
>>> etc.
>>>
>>> Best regards,
>>>
>>>       Dmitry
>>>
>>> 05.04.2015 22:25, Even Rouault ?????:
>>>> Hi,
>>>>
>>>> In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680,
>>>> which is about lack of precision of the current datetime structure,
>>>> I've imagined different solutions how to modify the OGRField
>>>> structure, and failed to pick up one that would be the obvious
>>>> solution, so opinions are welcome.
>>>>
>>>> The issue is how to add (at least) microsecond accuracy to the datetime
>>>> structure, as a few formats support it explicitely or implicitely :
>>>> MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL,
>>>> CSV, GeoJSON, ODS, XLSX, KML (potentially GML too)...
>>>>
>>>> Below a few potential solutions :
>>>>
>>>> ---------------------------------------
>>>> Solution 1) : Millisecond accuracy, second becomes a float
>>>>
>>>> This is the solution I've prototyped.
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>       struct {
>>>>       
>>>>           GInt16  Year;
>>>>           GByte   Month;
>>>>           GByte   Day;
>>>>           GByte   Hour;
>>>>           GByte   Minute;
>>>>           GByte   TZFlag;
>>>>           GByte   Precision; /* value in OGRDateTimePrecision */
>>>>           float   Second; /* from 00.000 to 60.999 (millisecond
>>>>           accuracy) */
>>>>       
>>>>       } Date;
>>>>
>>>> } OGRField
>>>>
>>>> So sub-second precision is representing with a single precision
>>>> floating point number, storing both integral and decimal parts. (we
>>>> could theorically have a hundredth of millisecond accuracy, 10^-5 s,
>>>> since 6099999 fits on the 23 bits of the mantissa)
>>>>
>>>> Another addition is the Precision field that indicates which parts of
>>>> the datetime structure are significant.
>>>>
>>>> /** Enumeration that defines the precision of a DateTime.
>>>>
>>>>     * @since GDAL 2.0
>>>>     */
>>>>
>>>> typedef enum
>>>> {
>>>>
>>>>       ODTP_Undefined,     /**< Undefined */
>>>>       ODTP_Guess,         /**< Only valid when setting through
>>>>       SetField(i,year,
>>>>
>>>> month...) where OGR will guess */
>>>>
>>>>       ODTP_Y,             /**< Year is significant */
>>>>       ODTP_YM,            /**< Year and month are significant*/
>>>>       ODTP_YMD,           /**< Year, month and day are significant */
>>>>       ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and
>>>>       hour are
>>>>
>>>> significant */
>>>>
>>>>       ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour
>>>>       and
>>>>
>>>> minute are significant */
>>>>
>>>>       ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime), hour,
>>>>       minute
>>>>
>>>> and integral second are significant */
>>>>
>>>>       ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime), hour,
>>>>       minute
>>>>
>>>> and second with microseconds are significant */
>>>> } OGRDateTimePrecision;
>>>>
>>>> I think this is important since "2015/04/05 17:12:34" and "2015/04/05
>>>> 17:12:34.000" do not really mean the same thing and it might be good to
>>>> be able to preserve the original accuracy when converting between
>>>> formats.
>>>>
>>>> A drawback of this solution is that the size of the OGRField structure
>>>> increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on
>>>> 64 bit). This is probably not that important since in most cases not
>>>> that many OGRField structures are instanciated at one time (typically,
>>>> you iterate over features one at a time).
>>>> This could be more of a problem for use cases that involve the MEM
>>>> driver, as it keep all features in memory.
>>>>
>>>> Another drawback is that the change of the structure might not be
>>>> directly noticed by application developers as the Second field name is
>>>> preserved, but a new Precision field is added, so there's a risk that
>>>> Precision is let uninitialized if the field is set through
>>>> OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That could
>>>> lead to unexpected formatting (but hopefully not crashes with defensive
>>>> programming). However I'd think it is unlikely that many applications
>>>> directly manipulate OGRField directly, instead of using the getters and
>>>> setters of OGRFeature.
>>>>
>>>> ---------------------------------------
>>>> Solution 2) : Millisecond accuracy, second and milliseconds in distinct
>>>> fields
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>       struct {
>>>>       
>>>>           GInt16  Year;
>>>>           GByte   Month;
>>>>           GByte   Day;
>>>>           GByte   Hour;
>>>>           GByte   Minute;
>>>>           GByte   TZFlag;
>>>>           GByte   Precision; /* value in OGRDateTimePrecision */
>>>>           GByte   Second; /* from 0 to 60 */
>>>> 	
>>>> 	GUInt16 Millisecond; /* from 0 to 999 */
>>>> 	
>>>>       } Date;
>>>>
>>>> } OGRField
>>>>
>>>> Same size of structure as in 1)
>>>>
>>>> ---------------------------------------
>>>> Solution 3) : Millisecond accuracy, pack all fields
>>>>
>>>> Conceptually, this would use bit fields to avoid wasting unused bits :
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>     struct {
>>>>     
>>>>       GInt16        Year;
>>>>       GUIntBig     Month:4;
>>>>       GUIntBig     Day:5;
>>>>       GUIntBig     Hour:5;
>>>>       GUIntBig     Minute:6;
>>>>       GUIntBig     Second:6;
>>>>       GUIntBig     Millisecond:10; /* 0-999 */
>>>>       GUIntBig     TZFlag:8;
>>>>       GUIntBig     Precision:4;
>>>>    
>>>>    } Date;
>>>>
>>>> } OGRField;
>>>>
>>>> This was proposed in the above mentionned ticket. And as there were
>>>> enough remaining bits, I've also added the Precision field (and in all
>>>> other solutions).
>>>>
>>>> The advantage is that sizeof(mydate) remains 8 bytes on 32 bits builds.
>>>>
>>>> But the C standard only defines bitfields of int/unsigned int, so this
>>>> is not portable, plus the fact that the way bits are packed is not
>>>> defined by the standard, so different compilers could come up with
>>>> different packing. A workaround is to do the bit manipulation through
>>>> macros :
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>     struct {
>>>> 	
>>>> 	GUIntBig	opaque;
>>>> 	
>>>>     } Date;
>>>>
>>>> } OGRField;
>>>>
>>>> #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
>>>> (shift)) & ((1 << (y_bits))-1))
>>>>
>>>> #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
>>>> #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
>>>> #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
>>>> #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
>>>> #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
>>>> #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
>>>> #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
>>>> #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
>>>> #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
>>>>
>>>> #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque
>>>> & (~( (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) <<
>>>> (shift)))
>>>>
>>>> #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
>>>> #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
>>>> #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
>>>> #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
>>>> #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
>>>> #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
>>>> #define SET_MILLISECOND(x,val)
>>>> SET_BITS(x,val,10,64-16-4-5-5-6-6-10) #define SET_TZFLAG(x,val)
>>>>    SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8) #define SET_PRECISION(x,val)
>>>> SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
>>>>
>>>> Main advantage: the size of OGRField remains unchanged (so 8 bytes on
>>>> 32-bit builds).
>>>>
>>>> Drawback: manipulation of datetime members is less natural, but there
>>>> are not that many places in the GDAL code base were the OGRField.Date
>>>> members are used, so it is not much that a problem.
>>>>
>>>> ---------------------------------------
>>>> Solution 4) : Microsecond accuracy with one field
>>>>
>>>> Solution 1) used a float for second and sub-second, but a float has
>>>> only 23 bits of mantissa, which is enough to represent second with
>>>> millisecond accuracy, but not for microsecond (you need 26 bits for
>>>> that). So use a 32-bit integer instead of a 32-bit floating point.
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>       struct {
>>>>       
>>>>           GInt16  Year;
>>>>           GByte   Month;
>>>>           GByte   Day;
>>>>           GByte   Hour;
>>>>           GByte   Minute;
>>>>           GByte   TZFlag;
>>>>           GByte   Precision; /* value in OGRDateTimePrecision */
>>>>           GUInt32 Microseconds; /* 00000000 to 59999999 */
>>>>       
>>>>       } Date;
>>>>
>>>> } OGRField
>>>>
>>>> Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds
>>>> (and remain 16 bytes on 64-bit builds)
>>>>
>>>> We would need to add an extra value in OGRDateTimePrecision to mean the
>>>> microsecond accuracy.
>>>>
>>>> Not really clear we need microseconds accuracy... Most formats that
>>>> support subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
>>>> DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals
>>>> beyond second. From
>>>> http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
>>>> PostgreSQL supports microsecond accuracy.
>>>>
>>>> ---------------------------------------
>>>> Solution 5) : Microsecond with 3 fields
>>>>
>>>> A variant where we split second into 3 integer parts:
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>       struct {
>>>>       
>>>>           GInt16  Year;
>>>>           GByte   Month;
>>>>           GByte   Day;
>>>>           GByte   Hour;
>>>>           GByte   Minute;
>>>>           GByte   TZFlag;
>>>>           GByte   Precision; /* value in OGRDateTimePrecision */
>>>> 	
>>>> 	GByte   Second; /* 0 to 59 */
>>>> 	
>>>>           GUInt16  Millisecond; /* 0 to 999 */
>>>>           GUInt16 Microsecond; /* 0 to 999 */
>>>>       
>>>>       } Date;
>>>>
>>>> } OGRField
>>>>
>>>> Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on 32-bit
>>>> builds (and remain 16 bytes on 64-bit builds)
>>>>
>>>> ---------------------------------------
>>>> Solution 6) : Nanosecond accuracy and beyond !
>>>>
>>>> Now that we are using 16 bytes, why not having nanosecond accuracy ?
>>>>
>>>> typedef union {
>>>> [...]
>>>>
>>>>       struct {
>>>>       
>>>>           GInt16  Year;
>>>>           GByte   Month;
>>>>           GByte   Day;
>>>>           GByte   Hour;
>>>>           GByte   Minute;
>>>>           GByte   TZFlag;
>>>>           GByte   Precision; /* value in OGRDateTimePrecision */
>>>> 	
>>>> 	double   Second; /* 0.000000000 to 60.999999999 */
>>>> 	
>>>>       } Date;
>>>>
>>>> } OGRField
>>>>
>>>> Actually we even have picosecond accuracy! (since for picoseconds, we
>>>> need 46 bits and a double has 52 bits of mantissa). And if we use a
>>>> 64-bit integer instead of a double, we can have femtosecond accuracy
>>>> ;-)
>>>>
>>>> Any preference ?
>>>>
>>>> Even
>>> _______________________________________________
>>> gdal-dev mailing list
>>> gdal-dev at lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev


From even.rouault at spatialys.com  Mon Apr  6 14:14:57 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 6 Apr 2015 23:14:57 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <5522F679.10203@gmail.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<201504061402.22044.even.rouault@spatialys.com>
	<5522F679.10203@gmail.com>
Message-ID: <201504062314.57392.even.rouault@spatialys.com>

Le lundi 06 avril 2015 23:11:21, Dmitriy Baryshnikov a ?crit :
> Hi Even,
> 
> It seems to me that this is duplicating of RFC 50: OGR field subtypes.
> For example we have the master field type DateTime and Subtype - Year.
> So the internal structure for date/time representation may be adopt to
> such technique.

The subtype is defined at field definition level. In all formats we currently 
handle we only know the date/time precision when reading values (and they 
might have different precision between records), so after having created the 
layer and field definitions.

> 
> Best regards,
>      Dmitry
> 
> 06.04.2015 15:02, Even Rouault ?????:
> > Le lundi 06 avril 2015 13:48:47, Even Rouault a ?crit :
> >> Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
> >>> The first solution looks reasonable. But there is lack in precision
> >>> field - there the only time is significant:
> >>> 
> >>> ODTP_HMSm
> >>> ODTP_HMS
> >>> ODTP_HM
> >>> ODTP_H
> >> 
> >> As I didn't want to multiply the values in the enumeration, my intent
> >> was to reuse the ODTP_YMDxxxx values for OFTTime only.
> > 
> > I meant "for OFTTime too"
> > 
> >> This was what I wanted
> >> to intend with the precision between parenthesis in the comment of
> >> ODTP_YMDH "Year, month, day (if OFTDateTime) and hour"
> >> 
> >> Or perhaps, the enumeration should capture the most precise part of the
> >> (date)time structure  ?
> >> ODTP_Year
> >> ODTP_Month
> >> ODTP_Day
> >> ODTP_Hour
> >> ODTP_Minute
> >> ODTP_Second
> >> ODTP_Millisecond
> >> 
> >>> etc.
> >>> 
> >>> Best regards,
> >>> 
> >>>       Dmitry
> >>> 
> >>> 05.04.2015 22:25, Even Rouault ?????:
> >>>> Hi,
> >>>> 
> >>>> In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680,
> >>>> which is about lack of precision of the current datetime structure,
> >>>> I've imagined different solutions how to modify the OGRField
> >>>> structure, and failed to pick up one that would be the obvious
> >>>> solution, so opinions are welcome.
> >>>> 
> >>>> The issue is how to add (at least) microsecond accuracy to the
> >>>> datetime structure, as a few formats support it explicitely or
> >>>> implicitely : MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite,
> >>>> PostgreSQL, CSV, GeoJSON, ODS, XLSX, KML (potentially GML too)...
> >>>> 
> >>>> Below a few potential solutions :
> >>>> 
> >>>> ---------------------------------------
> >>>> Solution 1) : Millisecond accuracy, second becomes a float
> >>>> 
> >>>> This is the solution I've prototyped.
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>       struct {
> >>>>       
> >>>>           GInt16  Year;
> >>>>           GByte   Month;
> >>>>           GByte   Day;
> >>>>           GByte   Hour;
> >>>>           GByte   Minute;
> >>>>           GByte   TZFlag;
> >>>>           GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>           float   Second; /* from 00.000 to 60.999 (millisecond
> >>>>           accuracy) */
> >>>>       
> >>>>       } Date;
> >>>> 
> >>>> } OGRField
> >>>> 
> >>>> So sub-second precision is representing with a single precision
> >>>> floating point number, storing both integral and decimal parts. (we
> >>>> could theorically have a hundredth of millisecond accuracy, 10^-5 s,
> >>>> since 6099999 fits on the 23 bits of the mantissa)
> >>>> 
> >>>> Another addition is the Precision field that indicates which parts of
> >>>> the datetime structure are significant.
> >>>> 
> >>>> /** Enumeration that defines the precision of a DateTime.
> >>>> 
> >>>>     * @since GDAL 2.0
> >>>>     */
> >>>> 
> >>>> typedef enum
> >>>> {
> >>>> 
> >>>>       ODTP_Undefined,     /**< Undefined */
> >>>>       ODTP_Guess,         /**< Only valid when setting through
> >>>>       SetField(i,year,
> >>>> 
> >>>> month...) where OGR will guess */
> >>>> 
> >>>>       ODTP_Y,             /**< Year is significant */
> >>>>       ODTP_YM,            /**< Year and month are significant*/
> >>>>       ODTP_YMD,           /**< Year, month and day are significant */
> >>>>       ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and
> >>>>       hour are
> >>>> 
> >>>> significant */
> >>>> 
> >>>>       ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour
> >>>>       and
> >>>> 
> >>>> minute are significant */
> >>>> 
> >>>>       ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime),
> >>>>       hour, minute
> >>>> 
> >>>> and integral second are significant */
> >>>> 
> >>>>       ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime),
> >>>>       hour, minute
> >>>> 
> >>>> and second with microseconds are significant */
> >>>> } OGRDateTimePrecision;
> >>>> 
> >>>> I think this is important since "2015/04/05 17:12:34" and "2015/04/05
> >>>> 17:12:34.000" do not really mean the same thing and it might be good
> >>>> to be able to preserve the original accuracy when converting between
> >>>> formats.
> >>>> 
> >>>> A drawback of this solution is that the size of the OGRField structure
> >>>> increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on
> >>>> 64 bit). This is probably not that important since in most cases not
> >>>> that many OGRField structures are instanciated at one time (typically,
> >>>> you iterate over features one at a time).
> >>>> This could be more of a problem for use cases that involve the MEM
> >>>> driver, as it keep all features in memory.
> >>>> 
> >>>> Another drawback is that the change of the structure might not be
> >>>> directly noticed by application developers as the Second field name is
> >>>> preserved, but a new Precision field is added, so there's a risk that
> >>>> Precision is let uninitialized if the field is set through
> >>>> OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That
> >>>> could lead to unexpected formatting (but hopefully not crashes with
> >>>> defensive programming). However I'd think it is unlikely that many
> >>>> applications directly manipulate OGRField directly, instead of using
> >>>> the getters and setters of OGRFeature.
> >>>> 
> >>>> ---------------------------------------
> >>>> Solution 2) : Millisecond accuracy, second and milliseconds in
> >>>> distinct fields
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>       struct {
> >>>>       
> >>>>           GInt16  Year;
> >>>>           GByte   Month;
> >>>>           GByte   Day;
> >>>>           GByte   Hour;
> >>>>           GByte   Minute;
> >>>>           GByte   TZFlag;
> >>>>           GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>           GByte   Second; /* from 0 to 60 */
> >>>> 	
> >>>> 	GUInt16 Millisecond; /* from 0 to 999 */
> >>>> 	
> >>>>       } Date;
> >>>> 
> >>>> } OGRField
> >>>> 
> >>>> Same size of structure as in 1)
> >>>> 
> >>>> ---------------------------------------
> >>>> Solution 3) : Millisecond accuracy, pack all fields
> >>>> 
> >>>> Conceptually, this would use bit fields to avoid wasting unused bits :
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>     struct {
> >>>>     
> >>>>       GInt16        Year;
> >>>>       GUIntBig     Month:4;
> >>>>       GUIntBig     Day:5;
> >>>>       GUIntBig     Hour:5;
> >>>>       GUIntBig     Minute:6;
> >>>>       GUIntBig     Second:6;
> >>>>       GUIntBig     Millisecond:10; /* 0-999 */
> >>>>       GUIntBig     TZFlag:8;
> >>>>       GUIntBig     Precision:4;
> >>>>    
> >>>>    } Date;
> >>>> 
> >>>> } OGRField;
> >>>> 
> >>>> This was proposed in the above mentionned ticket. And as there were
> >>>> enough remaining bits, I've also added the Precision field (and in all
> >>>> other solutions).
> >>>> 
> >>>> The advantage is that sizeof(mydate) remains 8 bytes on 32 bits
> >>>> builds.
> >>>> 
> >>>> But the C standard only defines bitfields of int/unsigned int, so this
> >>>> is not portable, plus the fact that the way bits are packed is not
> >>>> defined by the standard, so different compilers could come up with
> >>>> different packing. A workaround is to do the bit manipulation through
> >>>> macros :
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>     struct {
> >>>> 	
> >>>> 	GUIntBig	opaque;
> >>>> 	
> >>>>     } Date;
> >>>> 
> >>>> } OGRField;
> >>>> 
> >>>> #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
> >>>> (shift)) & ((1 << (y_bits))-1))
> >>>> 
> >>>> #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
> >>>> #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
> >>>> #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
> >>>> #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
> >>>> #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
> >>>> #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
> >>>> #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
> >>>> #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
> >>>> #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
> >>>> 
> >>>> #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque
> >>>> & (~( (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) <<
> >>>> (shift)))
> >>>> 
> >>>> #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
> >>>> #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
> >>>> #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
> >>>> #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
> >>>> #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
> >>>> #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
> >>>> #define SET_MILLISECOND(x,val)
> >>>> SET_BITS(x,val,10,64-16-4-5-5-6-6-10) #define SET_TZFLAG(x,val)
> >>>> 
> >>>>    SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8) #define SET_PRECISION(x,val)
> >>>> 
> >>>> SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
> >>>> 
> >>>> Main advantage: the size of OGRField remains unchanged (so 8 bytes on
> >>>> 32-bit builds).
> >>>> 
> >>>> Drawback: manipulation of datetime members is less natural, but there
> >>>> are not that many places in the GDAL code base were the OGRField.Date
> >>>> members are used, so it is not much that a problem.
> >>>> 
> >>>> ---------------------------------------
> >>>> Solution 4) : Microsecond accuracy with one field
> >>>> 
> >>>> Solution 1) used a float for second and sub-second, but a float has
> >>>> only 23 bits of mantissa, which is enough to represent second with
> >>>> millisecond accuracy, but not for microsecond (you need 26 bits for
> >>>> that). So use a 32-bit integer instead of a 32-bit floating point.
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>       struct {
> >>>>       
> >>>>           GInt16  Year;
> >>>>           GByte   Month;
> >>>>           GByte   Day;
> >>>>           GByte   Hour;
> >>>>           GByte   Minute;
> >>>>           GByte   TZFlag;
> >>>>           GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>           GUInt32 Microseconds; /* 00000000 to 59999999 */
> >>>>       
> >>>>       } Date;
> >>>> 
> >>>> } OGRField
> >>>> 
> >>>> Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds
> >>>> (and remain 16 bytes on 64-bit builds)
> >>>> 
> >>>> We would need to add an extra value in OGRDateTimePrecision to mean
> >>>> the microsecond accuracy.
> >>>> 
> >>>> Not really clear we need microseconds accuracy... Most formats that
> >>>> support subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
> >>>> DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals
> >>>> beyond second. From
> >>>> http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
> >>>> PostgreSQL supports microsecond accuracy.
> >>>> 
> >>>> ---------------------------------------
> >>>> Solution 5) : Microsecond with 3 fields
> >>>> 
> >>>> A variant where we split second into 3 integer parts:
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>       struct {
> >>>>       
> >>>>           GInt16  Year;
> >>>>           GByte   Month;
> >>>>           GByte   Day;
> >>>>           GByte   Hour;
> >>>>           GByte   Minute;
> >>>>           GByte   TZFlag;
> >>>>           GByte   Precision; /* value in OGRDateTimePrecision */
> >>>> 	
> >>>> 	GByte   Second; /* 0 to 59 */
> >>>> 	
> >>>>           GUInt16  Millisecond; /* 0 to 999 */
> >>>>           GUInt16 Microsecond; /* 0 to 999 */
> >>>>       
> >>>>       } Date;
> >>>> 
> >>>> } OGRField
> >>>> 
> >>>> Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on
> >>>> 32-bit builds (and remain 16 bytes on 64-bit builds)
> >>>> 
> >>>> ---------------------------------------
> >>>> Solution 6) : Nanosecond accuracy and beyond !
> >>>> 
> >>>> Now that we are using 16 bytes, why not having nanosecond accuracy ?
> >>>> 
> >>>> typedef union {
> >>>> [...]
> >>>> 
> >>>>       struct {
> >>>>       
> >>>>           GInt16  Year;
> >>>>           GByte   Month;
> >>>>           GByte   Day;
> >>>>           GByte   Hour;
> >>>>           GByte   Minute;
> >>>>           GByte   TZFlag;
> >>>>           GByte   Precision; /* value in OGRDateTimePrecision */
> >>>> 	
> >>>> 	double   Second; /* 0.000000000 to 60.999999999 */
> >>>> 	
> >>>>       } Date;
> >>>> 
> >>>> } OGRField
> >>>> 
> >>>> Actually we even have picosecond accuracy! (since for picoseconds, we
> >>>> need 46 bits and a double has 52 bits of mantissa). And if we use a
> >>>> 64-bit integer instead of a double, we can have femtosecond accuracy
> >>>> ;-)
> >>>> 
> >>>> Any preference ?
> >>>> 
> >>>> Even
> >>> 
> >>> _______________________________________________
> >>> gdal-dev mailing list
> >>> gdal-dev at lists.osgeo.org
> >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Apr  6 14:20:14 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 6 Apr 2015 23:20:14 +0200
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <4107675.6fJsqCrT4Y@saxicola>
References: <28009649.ARrsKQEWmZ@saxicola>
	<201504061356.16620.even.rouault@spatialys.com>
	<4107675.6fJsqCrT4Y@saxicola>
Message-ID: <201504062320.14087.even.rouault@spatialys.com>

Le lundi 06 avril 2015 23:09:09, Brad Hards a ?crit :
> On Mon, 6 Apr 2015 01:56:16 PM you wrote:
> > Le lundi 06 avril 2015 13:26:11, Brad Hards a ?crit :
> > > The problematic part is that "PROJECTION" definition. I was originally
> > > going to argue it should be Mercator_1SP, but it looks like the EPSG
> > > decided to change it (in EPSG::2010.058) to this new
> > > "Mercator_variant_A" form, and keep the "Mercator_1SP" form as an
> > > alias.
> > 
> > > Should we add the new form, with a change like:
> > The issue with this is that you only fix the exportToProj4(). But there
> > are other places in the code base where SRS_PT_MERCATOR_1SP is tested
> > (for example when creating a dataset in other formats). It would be
> > annoying to test in all those places both variants. Why not
> > "normalizing"
> > "Mercator_variant_A" into "Mercator_1SP" on ingestion of GeoPackage WKT ?
> > This would be a bit similar to all the tricks we do when ingesting ESRI
> > WKT.
> 
> Do you mean just a test in gpkg/ogrgeopackagedatasource.cpp, or a more
> general normalisation since presumably that will come up in other WKT?

Brad,

I'm not sure if we have many other sources that could return 
Mercator_variant_A (is there some OGC standard that normalizes this name?), so 
for now in GPKG driver would probably be OK. And if later we discover that 
other drivers can return it, we could create a 
OGRSpatialReference::morphFromModernEPSG() (or any better name!) method for 
that purpose.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Mon Apr  6 14:32:40 2015
From: bishop.dev at gmail.com (Dmitriy Baryshnikov)
Date: Tue, 07 Apr 2015 00:32:40 +0300
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504062314.57392.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<201504061402.22044.even.rouault@spatialys.com>
	<5522F679.10203@gmail.com>
	<201504062314.57392.even.rouault@spatialys.com>
Message-ID: <5522FB78.2020303@gmail.com>

Why not read all date/time data from records as accurate as possible? 
For example for OFTDate we get date by GetFieldAsDateTime 
<http://www.gdal.org/classOGRFeature.html#a6c5d2444407b07e07b79863c42ee7a49> 
and time is zero.
It's strange to analyse data structure during reading the records as we 
already have field definition.
We can use for old datasets type DateTime + SubType ODTP_YMDHMSm and new 
datasets let the user to choose the subtype. Certainly some formats 
support this new type + subtype now (i.e. Postgres/PostGIS, etc.).

Postgres data type mapping:
date -> OFTDateTime + ODTP_YMD
time-> OFTDateTime + ODTP_HMS
timestamp -> OFTDateTime + ODTP_YMDHMSm

Best regards,
     Dmitry

07.04.2015 00:14, Even Rouault ?????:
> Le lundi 06 avril 2015 23:11:21, Dmitriy Baryshnikov a ?crit :
>> Hi Even,
>>
>> It seems to me that this is duplicating of RFC 50: OGR field subtypes.
>> For example we have the master field type DateTime and Subtype - Year.
>> So the internal structure for date/time representation may be adopt to
>> such technique.
> The subtype is defined at field definition level. In all formats we currently
> handle we only know the date/time precision when reading values (and they
> might have different precision between records), so after having created the
> layer and field definitions.
>
>> Best regards,
>>       Dmitry
>>
>> 06.04.2015 15:02, Even Rouault ?????:
>>> Le lundi 06 avril 2015 13:48:47, Even Rouault a ?crit :
>>>> Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
>>>>> The first solution looks reasonable. But there is lack in precision
>>>>> field - there the only time is significant:
>>>>>
>>>>> ODTP_HMSm
>>>>> ODTP_HMS
>>>>> ODTP_HM
>>>>> ODTP_H
>>>> As I didn't want to multiply the values in the enumeration, my intent
>>>> was to reuse the ODTP_YMDxxxx values for OFTTime only.
>>> I meant "for OFTTime too"
>>>
>>>> This was what I wanted
>>>> to intend with the precision between parenthesis in the comment of
>>>> ODTP_YMDH "Year, month, day (if OFTDateTime) and hour"
>>>>
>>>> Or perhaps, the enumeration should capture the most precise part of the
>>>> (date)time structure  ?
>>>> ODTP_Year
>>>> ODTP_Month
>>>> ODTP_Day
>>>> ODTP_Hour
>>>> ODTP_Minute
>>>> ODTP_Second
>>>> ODTP_Millisecond
>>>>
>>>>> etc.
>>>>>
>>>>> Best regards,
>>>>>
>>>>>        Dmitry
>>>>>
>>>>> 05.04.2015 22:25, Even Rouault ?????:
>>>>>> Hi,
>>>>>>
>>>>>> In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680,
>>>>>> which is about lack of precision of the current datetime structure,
>>>>>> I've imagined different solutions how to modify the OGRField
>>>>>> structure, and failed to pick up one that would be the obvious
>>>>>> solution, so opinions are welcome.
>>>>>>
>>>>>> The issue is how to add (at least) microsecond accuracy to the
>>>>>> datetime structure, as a few formats support it explicitely or
>>>>>> implicitely : MapInfo, GPX, Atom (GeoRSS driver), GeoPackage, SQLite,
>>>>>> PostgreSQL, CSV, GeoJSON, ODS, XLSX, KML (potentially GML too)...
>>>>>>
>>>>>> Below a few potential solutions :
>>>>>>
>>>>>> ---------------------------------------
>>>>>> Solution 1) : Millisecond accuracy, second becomes a float
>>>>>>
>>>>>> This is the solution I've prototyped.
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>        struct {
>>>>>>        
>>>>>>            GInt16  Year;
>>>>>>            GByte   Month;
>>>>>>            GByte   Day;
>>>>>>            GByte   Hour;
>>>>>>            GByte   Minute;
>>>>>>            GByte   TZFlag;
>>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>            float   Second; /* from 00.000 to 60.999 (millisecond
>>>>>>            accuracy) */
>>>>>>        
>>>>>>        } Date;
>>>>>>
>>>>>> } OGRField
>>>>>>
>>>>>> So sub-second precision is representing with a single precision
>>>>>> floating point number, storing both integral and decimal parts. (we
>>>>>> could theorically have a hundredth of millisecond accuracy, 10^-5 s,
>>>>>> since 6099999 fits on the 23 bits of the mantissa)
>>>>>>
>>>>>> Another addition is the Precision field that indicates which parts of
>>>>>> the datetime structure are significant.
>>>>>>
>>>>>> /** Enumeration that defines the precision of a DateTime.
>>>>>>
>>>>>>      * @since GDAL 2.0
>>>>>>      */
>>>>>>
>>>>>> typedef enum
>>>>>> {
>>>>>>
>>>>>>        ODTP_Undefined,     /**< Undefined */
>>>>>>        ODTP_Guess,         /**< Only valid when setting through
>>>>>>        SetField(i,year,
>>>>>>
>>>>>> month...) where OGR will guess */
>>>>>>
>>>>>>        ODTP_Y,             /**< Year is significant */
>>>>>>        ODTP_YM,            /**< Year and month are significant*/
>>>>>>        ODTP_YMD,           /**< Year, month and day are significant */
>>>>>>        ODTP_YMDH,          /**< Year, month, day (if OFTDateTime) and
>>>>>>        hour are
>>>>>>
>>>>>> significant */
>>>>>>
>>>>>>        ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime), hour
>>>>>>        and
>>>>>>
>>>>>> minute are significant */
>>>>>>
>>>>>>        ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime),
>>>>>>        hour, minute
>>>>>>
>>>>>> and integral second are significant */
>>>>>>
>>>>>>        ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime),
>>>>>>        hour, minute
>>>>>>
>>>>>> and second with microseconds are significant */
>>>>>> } OGRDateTimePrecision;
>>>>>>
>>>>>> I think this is important since "2015/04/05 17:12:34" and "2015/04/05
>>>>>> 17:12:34.000" do not really mean the same thing and it might be good
>>>>>> to be able to preserve the original accuracy when converting between
>>>>>> formats.
>>>>>>
>>>>>> A drawback of this solution is that the size of the OGRField structure
>>>>>> increases from 8 bytes to 12 on 32 bit builds (and remain 16 bytes on
>>>>>> 64 bit). This is probably not that important since in most cases not
>>>>>> that many OGRField structures are instanciated at one time (typically,
>>>>>> you iterate over features one at a time).
>>>>>> This could be more of a problem for use cases that involve the MEM
>>>>>> driver, as it keep all features in memory.
>>>>>>
>>>>>> Another drawback is that the change of the structure might not be
>>>>>> directly noticed by application developers as the Second field name is
>>>>>> preserved, but a new Precision field is added, so there's a risk that
>>>>>> Precision is let uninitialized if the field is set through
>>>>>> OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That
>>>>>> could lead to unexpected formatting (but hopefully not crashes with
>>>>>> defensive programming). However I'd think it is unlikely that many
>>>>>> applications directly manipulate OGRField directly, instead of using
>>>>>> the getters and setters of OGRFeature.
>>>>>>
>>>>>> ---------------------------------------
>>>>>> Solution 2) : Millisecond accuracy, second and milliseconds in
>>>>>> distinct fields
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>        struct {
>>>>>>        
>>>>>>            GInt16  Year;
>>>>>>            GByte   Month;
>>>>>>            GByte   Day;
>>>>>>            GByte   Hour;
>>>>>>            GByte   Minute;
>>>>>>            GByte   TZFlag;
>>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>            GByte   Second; /* from 0 to 60 */
>>>>>> 	
>>>>>> 	GUInt16 Millisecond; /* from 0 to 999 */
>>>>>> 	
>>>>>>        } Date;
>>>>>>
>>>>>> } OGRField
>>>>>>
>>>>>> Same size of structure as in 1)
>>>>>>
>>>>>> ---------------------------------------
>>>>>> Solution 3) : Millisecond accuracy, pack all fields
>>>>>>
>>>>>> Conceptually, this would use bit fields to avoid wasting unused bits :
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>      struct {
>>>>>>      
>>>>>>        GInt16        Year;
>>>>>>        GUIntBig     Month:4;
>>>>>>        GUIntBig     Day:5;
>>>>>>        GUIntBig     Hour:5;
>>>>>>        GUIntBig     Minute:6;
>>>>>>        GUIntBig     Second:6;
>>>>>>        GUIntBig     Millisecond:10; /* 0-999 */
>>>>>>        GUIntBig     TZFlag:8;
>>>>>>        GUIntBig     Precision:4;
>>>>>>     
>>>>>>     } Date;
>>>>>>
>>>>>> } OGRField;
>>>>>>
>>>>>> This was proposed in the above mentionned ticket. And as there were
>>>>>> enough remaining bits, I've also added the Precision field (and in all
>>>>>> other solutions).
>>>>>>
>>>>>> The advantage is that sizeof(mydate) remains 8 bytes on 32 bits
>>>>>> builds.
>>>>>>
>>>>>> But the C standard only defines bitfields of int/unsigned int, so this
>>>>>> is not portable, plus the fact that the way bits are packed is not
>>>>>> defined by the standard, so different compilers could come up with
>>>>>> different packing. A workaround is to do the bit manipulation through
>>>>>> macros :
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>      struct {
>>>>>> 	
>>>>>> 	GUIntBig	opaque;
>>>>>> 	
>>>>>>      } Date;
>>>>>>
>>>>>> } OGRField;
>>>>>>
>>>>>> #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
>>>>>> (shift)) & ((1 << (y_bits))-1))
>>>>>>
>>>>>> #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
>>>>>> #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
>>>>>> #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
>>>>>> #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
>>>>>> #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
>>>>>> #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
>>>>>> #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
>>>>>> #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
>>>>>> #define GET_PRECISION(x)         GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
>>>>>>
>>>>>> #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque = ((x).Date.opaque
>>>>>> & (~( (GUIntBig)((1 << (y_bits))-1) << (shift) )) | ((GUIntBig)(y) <<
>>>>>> (shift)))
>>>>>>
>>>>>> #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
>>>>>> #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
>>>>>> #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
>>>>>> #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
>>>>>> #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
>>>>>> #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
>>>>>> #define SET_MILLISECOND(x,val)
>>>>>> SET_BITS(x,val,10,64-16-4-5-5-6-6-10) #define SET_TZFLAG(x,val)
>>>>>>
>>>>>>     SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8) #define SET_PRECISION(x,val)
>>>>>>
>>>>>> SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
>>>>>>
>>>>>> Main advantage: the size of OGRField remains unchanged (so 8 bytes on
>>>>>> 32-bit builds).
>>>>>>
>>>>>> Drawback: manipulation of datetime members is less natural, but there
>>>>>> are not that many places in the GDAL code base were the OGRField.Date
>>>>>> members are used, so it is not much that a problem.
>>>>>>
>>>>>> ---------------------------------------
>>>>>> Solution 4) : Microsecond accuracy with one field
>>>>>>
>>>>>> Solution 1) used a float for second and sub-second, but a float has
>>>>>> only 23 bits of mantissa, which is enough to represent second with
>>>>>> millisecond accuracy, but not for microsecond (you need 26 bits for
>>>>>> that). So use a 32-bit integer instead of a 32-bit floating point.
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>        struct {
>>>>>>        
>>>>>>            GInt16  Year;
>>>>>>            GByte   Month;
>>>>>>            GByte   Day;
>>>>>>            GByte   Hour;
>>>>>>            GByte   Minute;
>>>>>>            GByte   TZFlag;
>>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>            GUInt32 Microseconds; /* 00000000 to 59999999 */
>>>>>>        
>>>>>>        } Date;
>>>>>>
>>>>>> } OGRField
>>>>>>
>>>>>> Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit builds
>>>>>> (and remain 16 bytes on 64-bit builds)
>>>>>>
>>>>>> We would need to add an extra value in OGRDateTimePrecision to mean
>>>>>> the microsecond accuracy.
>>>>>>
>>>>>> Not really clear we need microseconds accuracy... Most formats that
>>>>>> support subsecond accuracy use ISO 8601 representation (e.g. YYYY-MM-
>>>>>> DDTHH:MM:SS.sssssZ) that doesn't define the maximal number of decimals
>>>>>> beyond second. From
>>>>>> http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
>>>>>> PostgreSQL supports microsecond accuracy.
>>>>>>
>>>>>> ---------------------------------------
>>>>>> Solution 5) : Microsecond with 3 fields
>>>>>>
>>>>>> A variant where we split second into 3 integer parts:
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>        struct {
>>>>>>        
>>>>>>            GInt16  Year;
>>>>>>            GByte   Month;
>>>>>>            GByte   Day;
>>>>>>            GByte   Hour;
>>>>>>            GByte   Minute;
>>>>>>            GByte   TZFlag;
>>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>> 	
>>>>>> 	GByte   Second; /* 0 to 59 */
>>>>>> 	
>>>>>>            GUInt16  Millisecond; /* 0 to 999 */
>>>>>>            GUInt16 Microsecond; /* 0 to 999 */
>>>>>>        
>>>>>>        } Date;
>>>>>>
>>>>>> } OGRField
>>>>>>
>>>>>> Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on
>>>>>> 32-bit builds (and remain 16 bytes on 64-bit builds)
>>>>>>
>>>>>> ---------------------------------------
>>>>>> Solution 6) : Nanosecond accuracy and beyond !
>>>>>>
>>>>>> Now that we are using 16 bytes, why not having nanosecond accuracy ?
>>>>>>
>>>>>> typedef union {
>>>>>> [...]
>>>>>>
>>>>>>        struct {
>>>>>>        
>>>>>>            GInt16  Year;
>>>>>>            GByte   Month;
>>>>>>            GByte   Day;
>>>>>>            GByte   Hour;
>>>>>>            GByte   Minute;
>>>>>>            GByte   TZFlag;
>>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>> 	
>>>>>> 	double   Second; /* 0.000000000 to 60.999999999 */
>>>>>> 	
>>>>>>        } Date;
>>>>>>
>>>>>> } OGRField
>>>>>>
>>>>>> Actually we even have picosecond accuracy! (since for picoseconds, we
>>>>>> need 46 bits and a double has 52 bits of mantissa). And if we use a
>>>>>> 64-bit integer instead of a double, we can have femtosecond accuracy
>>>>>> ;-)
>>>>>>
>>>>>> Any preference ?
>>>>>>
>>>>>> Even
>>>>> _______________________________________________
>>>>> gdal-dev mailing list
>>>>> gdal-dev at lists.osgeo.org
>>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150407/20dfe20a/attachment-0001.html>

From even.rouault at spatialys.com  Mon Apr  6 15:15:49 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 7 Apr 2015 00:15:49 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <5522FB78.2020303@gmail.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<201504062314.57392.even.rouault@spatialys.com>
	<5522FB78.2020303@gmail.com>
Message-ID: <201504070015.49286.even.rouault@spatialys.com>

Le lundi 06 avril 2015 23:32:40, Dmitriy Baryshnikov a ?crit :
> Why not read all date/time data from records as accurate as possible?

That's what I intended and prototyped. Drivers analyze the date/time value and 
they set it with an evolution of the existing SetField() method for 
date/times, which takes an additional OGRDateTimePrecision ePrecision member, 
that they can let to _Guess if they don't know the precision (case when it 
comes from binary format typically) or explicitely set when it comes from a 
text format.

> For example for OFTDate we get date by GetFieldAsDateTime
> <http://www.gdal.org/classOGRFeature.html#a6c5d2444407b07e07b79863c42ee7a49
> > and time is zero.
> It's strange to analyse data structure during reading the records as we
> already have field definition.

At the OGR model level yes, but there's no provision in the formats themselves 
to store the level of precision of the date/time.

> We can use for old datasets type DateTime + SubType ODTP_YMDHMSm and new
> datasets let the user to choose the subtype. Certainly some formats
> support this new type + subtype now (i.e. Postgres/PostGIS, etc.).

I'm not sure how your suggestion would work (I'm not sure I've understood it 
correctly), at least on the reading side. When reading, you can only know if a 
field is a Date, Time or DateTime (and some formats might even not have that 
level of distinctions) by examining the layer/table metadata. To know if a 
datetime has second or millisecond accuracy, you need to fetch records (that 
might potentially be costly in case you have many records with null values for 
that field), so this is an operation we don't generally want to do so as to 
have a GetLayerDefn() that works format.

Although in quite a few of the formats I mentionned (GPX, Atom (GeoRSS 
driver), CSV in AUTODETECT_TYPES=YES mode, GeoJSON, ODS, XLSX, LIBKML)), they 
work by a preliminary ingestion/analysis phase of the whole dataset, so we 
could probably figure the maximum accuracy of all date/time records of a given 
field. But that would involve much more rework of those drivers than I've 
currently prototyped... And that wouldn't solve the problem for Postgres, 
MapInfo, SQLite and GeoPackage.

> 
> Postgres data type mapping:
> date -> OFTDateTime + ODTP_YMD
> time-> OFTDateTime + ODTP_HMS
> timestamp -> OFTDateTime + ODTP_YMDHMSm

Postgres case is probably not the best one to illustrate that accuracy concept 
here since internally it stores timestamps as uint8, so "2015/04/05 17:12:34" 
and "2015/04/05 17:12:34.000" are stored the same. Consequently, on reading 
you have to trust the "Guess" mode (which uses that simple heuristics: if the 
milliseconds are not 0, then you have millisecond accuracy, otherwise second). 
All other formats (except MapInfo) store them as a string.

Oh well, if that sounds too weird/confusing to have this precision information 
at the record level, maybe we can drop and always output to the millisecond 
for text formats (although there's a potential risk that would cause issues to 
parsers that wouldn't expect a decimal second). Although I had imagined this 
precision information more as an implementation detail than something we would 
really want to advertize and that applications would have to care about (it is 
an optional parameter in the modified getters/setters of OGRFeature I 
prototyped) :

    int                 GetFieldAsDateTime( int i, 
                                     int *pnYear, int *pnMonth, int *pnDay,
                                     int *pnHour, int *pnMinute, float 
*pfSecond, 
                                     int *pnTZFlag, OGRDateTimePrecision* 
pePrecision = NULL );

    void                SetField( int i, int nYear, int nMonth, int nDay,
                                  int nHour=0, int nMinute=0, float 
fSecond=0.f, 
                                  int nTZFlag = 0, OGRDateTimePrecision 
ePrecision = ODTP_Guess );

Hum, I'm just thinking we could also just implement the Guess logic in output, 
that is output with milliseconds if the milliseconds are not 0, and output 
with integral seconds otherwise. Could probably be a good compromise. The use 
cases where we really want to write ".000" are not that obvious after all.

Even

> 
> Best regards,
>      Dmitry
> 
> 07.04.2015 00:14, Even Rouault ?????:
> > Le lundi 06 avril 2015 23:11:21, Dmitriy Baryshnikov a ?crit :
> >> Hi Even,
> >> 
> >> It seems to me that this is duplicating of RFC 50: OGR field subtypes.
> >> For example we have the master field type DateTime and Subtype - Year.
> >> So the internal structure for date/time representation may be adopt to
> >> such technique.
> > 
> > The subtype is defined at field definition level. In all formats we
> > currently handle we only know the date/time precision when reading
> > values (and they might have different precision between records), so
> > after having created the layer and field definitions.
> > 
> >> Best regards,
> >> 
> >>       Dmitry
> >> 
> >> 06.04.2015 15:02, Even Rouault ?????:
> >>> Le lundi 06 avril 2015 13:48:47, Even Rouault a ?crit :
> >>>> Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
> >>>>> The first solution looks reasonable. But there is lack in precision
> >>>>> field - there the only time is significant:
> >>>>> 
> >>>>> ODTP_HMSm
> >>>>> ODTP_HMS
> >>>>> ODTP_HM
> >>>>> ODTP_H
> >>>> 
> >>>> As I didn't want to multiply the values in the enumeration, my intent
> >>>> was to reuse the ODTP_YMDxxxx values for OFTTime only.
> >>> 
> >>> I meant "for OFTTime too"
> >>> 
> >>>> This was what I wanted
> >>>> to intend with the precision between parenthesis in the comment of
> >>>> ODTP_YMDH "Year, month, day (if OFTDateTime) and hour"
> >>>> 
> >>>> Or perhaps, the enumeration should capture the most precise part of
> >>>> the (date)time structure  ?
> >>>> ODTP_Year
> >>>> ODTP_Month
> >>>> ODTP_Day
> >>>> ODTP_Hour
> >>>> ODTP_Minute
> >>>> ODTP_Second
> >>>> ODTP_Millisecond
> >>>> 
> >>>>> etc.
> >>>>> 
> >>>>> Best regards,
> >>>>> 
> >>>>>        Dmitry
> >>>>> 
> >>>>> 05.04.2015 22:25, Even Rouault ?????:
> >>>>>> Hi,
> >>>>>> 
> >>>>>> In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680,
> >>>>>> which is about lack of precision of the current datetime structure,
> >>>>>> I've imagined different solutions how to modify the OGRField
> >>>>>> structure, and failed to pick up one that would be the obvious
> >>>>>> solution, so opinions are welcome.
> >>>>>> 
> >>>>>> The issue is how to add (at least) microsecond accuracy to the
> >>>>>> datetime structure, as a few formats support it explicitely or
> >>>>>> implicitely : MapInfo, GPX, Atom (GeoRSS driver), GeoPackage,
> >>>>>> SQLite, PostgreSQL, CSV, GeoJSON, ODS, XLSX, KML (potentially GML
> >>>>>> too)...
> >>>>>> 
> >>>>>> Below a few potential solutions :
> >>>>>> 
> >>>>>> ---------------------------------------
> >>>>>> Solution 1) : Millisecond accuracy, second becomes a float
> >>>>>> 
> >>>>>> This is the solution I've prototyped.
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>        struct {
> >>>>>>        
> >>>>>>            GInt16  Year;
> >>>>>>            GByte   Month;
> >>>>>>            GByte   Day;
> >>>>>>            GByte   Hour;
> >>>>>>            GByte   Minute;
> >>>>>>            GByte   TZFlag;
> >>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>>>            float   Second; /* from 00.000 to 60.999 (millisecond
> >>>>>>            accuracy) */
> >>>>>>        
> >>>>>>        } Date;
> >>>>>> 
> >>>>>> } OGRField
> >>>>>> 
> >>>>>> So sub-second precision is representing with a single precision
> >>>>>> floating point number, storing both integral and decimal parts. (we
> >>>>>> could theorically have a hundredth of millisecond accuracy, 10^-5 s,
> >>>>>> since 6099999 fits on the 23 bits of the mantissa)
> >>>>>> 
> >>>>>> Another addition is the Precision field that indicates which parts
> >>>>>> of the datetime structure are significant.
> >>>>>> 
> >>>>>> /** Enumeration that defines the precision of a DateTime.
> >>>>>> 
> >>>>>>      * @since GDAL 2.0
> >>>>>>      */
> >>>>>> 
> >>>>>> typedef enum
> >>>>>> {
> >>>>>> 
> >>>>>>        ODTP_Undefined,     /**< Undefined */
> >>>>>>        ODTP_Guess,         /**< Only valid when setting through
> >>>>>>        SetField(i,year,
> >>>>>> 
> >>>>>> month...) where OGR will guess */
> >>>>>> 
> >>>>>>        ODTP_Y,             /**< Year is significant */
> >>>>>>        ODTP_YM,            /**< Year and month are significant*/
> >>>>>>        ODTP_YMD,           /**< Year, month and day are significant
> >>>>>>        */ ODTP_YMDH,          /**< Year, month, day (if
> >>>>>>        OFTDateTime) and hour are
> >>>>>> 
> >>>>>> significant */
> >>>>>> 
> >>>>>>        ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime),
> >>>>>>        hour and
> >>>>>> 
> >>>>>> minute are significant */
> >>>>>> 
> >>>>>>        ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime),
> >>>>>>        hour, minute
> >>>>>> 
> >>>>>> and integral second are significant */
> >>>>>> 
> >>>>>>        ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime),
> >>>>>>        hour, minute
> >>>>>> 
> >>>>>> and second with microseconds are significant */
> >>>>>> } OGRDateTimePrecision;
> >>>>>> 
> >>>>>> I think this is important since "2015/04/05 17:12:34" and
> >>>>>> "2015/04/05 17:12:34.000" do not really mean the same thing and it
> >>>>>> might be good to be able to preserve the original accuracy when
> >>>>>> converting between formats.
> >>>>>> 
> >>>>>> A drawback of this solution is that the size of the OGRField
> >>>>>> structure increases from 8 bytes to 12 on 32 bit builds (and remain
> >>>>>> 16 bytes on 64 bit). This is probably not that important since in
> >>>>>> most cases not that many OGRField structures are instanciated at
> >>>>>> one time (typically, you iterate over features one at a time).
> >>>>>> This could be more of a problem for use cases that involve the MEM
> >>>>>> driver, as it keep all features in memory.
> >>>>>> 
> >>>>>> Another drawback is that the change of the structure might not be
> >>>>>> directly noticed by application developers as the Second field name
> >>>>>> is preserved, but a new Precision field is added, so there's a risk
> >>>>>> that Precision is let uninitialized if the field is set through
> >>>>>> OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That
> >>>>>> could lead to unexpected formatting (but hopefully not crashes with
> >>>>>> defensive programming). However I'd think it is unlikely that many
> >>>>>> applications directly manipulate OGRField directly, instead of using
> >>>>>> the getters and setters of OGRFeature.
> >>>>>> 
> >>>>>> ---------------------------------------
> >>>>>> Solution 2) : Millisecond accuracy, second and milliseconds in
> >>>>>> distinct fields
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>        struct {
> >>>>>>        
> >>>>>>            GInt16  Year;
> >>>>>>            GByte   Month;
> >>>>>>            GByte   Day;
> >>>>>>            GByte   Hour;
> >>>>>>            GByte   Minute;
> >>>>>>            GByte   TZFlag;
> >>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>>>            GByte   Second; /* from 0 to 60 */
> >>>>>> 	
> >>>>>> 	GUInt16 Millisecond; /* from 0 to 999 */
> >>>>>> 	
> >>>>>>        } Date;
> >>>>>> 
> >>>>>> } OGRField
> >>>>>> 
> >>>>>> Same size of structure as in 1)
> >>>>>> 
> >>>>>> ---------------------------------------
> >>>>>> Solution 3) : Millisecond accuracy, pack all fields
> >>>>>> 
> >>>>>> Conceptually, this would use bit fields to avoid wasting unused bits
> >>>>>> :
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>      struct {
> >>>>>>      
> >>>>>>        GInt16        Year;
> >>>>>>        GUIntBig     Month:4;
> >>>>>>        GUIntBig     Day:5;
> >>>>>>        GUIntBig     Hour:5;
> >>>>>>        GUIntBig     Minute:6;
> >>>>>>        GUIntBig     Second:6;
> >>>>>>        GUIntBig     Millisecond:10; /* 0-999 */
> >>>>>>        GUIntBig     TZFlag:8;
> >>>>>>        GUIntBig     Precision:4;
> >>>>>>     
> >>>>>>     } Date;
> >>>>>> 
> >>>>>> } OGRField;
> >>>>>> 
> >>>>>> This was proposed in the above mentionned ticket. And as there were
> >>>>>> enough remaining bits, I've also added the Precision field (and in
> >>>>>> all other solutions).
> >>>>>> 
> >>>>>> The advantage is that sizeof(mydate) remains 8 bytes on 32 bits
> >>>>>> builds.
> >>>>>> 
> >>>>>> But the C standard only defines bitfields of int/unsigned int, so
> >>>>>> this is not portable, plus the fact that the way bits are packed is
> >>>>>> not defined by the standard, so different compilers could come up
> >>>>>> with different packing. A workaround is to do the bit manipulation
> >>>>>> through macros :
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>      struct {
> >>>>>> 	
> >>>>>> 	GUIntBig	opaque;
> >>>>>> 	
> >>>>>>      } Date;
> >>>>>> 
> >>>>>> } OGRField;
> >>>>>> 
> >>>>>> #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
> >>>>>> (shift)) & ((1 << (y_bits))-1))
> >>>>>> 
> >>>>>> #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
> >>>>>> #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
> >>>>>> #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
> >>>>>> #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
> >>>>>> #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
> >>>>>> #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
> >>>>>> #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
> >>>>>> #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
> >>>>>> #define GET_PRECISION(x)        
> >>>>>> GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
> >>>>>> 
> >>>>>> #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque =
> >>>>>> ((x).Date.opaque & (~( (GUIntBig)((1 << (y_bits))-1) << (shift) ))
> >>>>>> | ((GUIntBig)(y) << (shift)))
> >>>>>> 
> >>>>>> #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
> >>>>>> #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
> >>>>>> #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
> >>>>>> #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
> >>>>>> #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
> >>>>>> #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
> >>>>>> #define SET_MILLISECOND(x,val)
> >>>>>> SET_BITS(x,val,10,64-16-4-5-5-6-6-10) #define SET_TZFLAG(x,val)
> >>>>>> 
> >>>>>>     SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8) #define
> >>>>>>     SET_PRECISION(x,val)
> >>>>>> 
> >>>>>> SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
> >>>>>> 
> >>>>>> Main advantage: the size of OGRField remains unchanged (so 8 bytes
> >>>>>> on 32-bit builds).
> >>>>>> 
> >>>>>> Drawback: manipulation of datetime members is less natural, but
> >>>>>> there are not that many places in the GDAL code base were the
> >>>>>> OGRField.Date members are used, so it is not much that a problem.
> >>>>>> 
> >>>>>> ---------------------------------------
> >>>>>> Solution 4) : Microsecond accuracy with one field
> >>>>>> 
> >>>>>> Solution 1) used a float for second and sub-second, but a float has
> >>>>>> only 23 bits of mantissa, which is enough to represent second with
> >>>>>> millisecond accuracy, but not for microsecond (you need 26 bits for
> >>>>>> that). So use a 32-bit integer instead of a 32-bit floating point.
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>        struct {
> >>>>>>        
> >>>>>>            GInt16  Year;
> >>>>>>            GByte   Month;
> >>>>>>            GByte   Day;
> >>>>>>            GByte   Hour;
> >>>>>>            GByte   Minute;
> >>>>>>            GByte   TZFlag;
> >>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>>>            GUInt32 Microseconds; /* 00000000 to 59999999 */
> >>>>>>        
> >>>>>>        } Date;
> >>>>>> 
> >>>>>> } OGRField
> >>>>>> 
> >>>>>> Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit
> >>>>>> builds (and remain 16 bytes on 64-bit builds)
> >>>>>> 
> >>>>>> We would need to add an extra value in OGRDateTimePrecision to mean
> >>>>>> the microsecond accuracy.
> >>>>>> 
> >>>>>> Not really clear we need microseconds accuracy... Most formats that
> >>>>>> support subsecond accuracy use ISO 8601 representation (e.g.
> >>>>>> YYYY-MM- DDTHH:MM:SS.sssssZ) that doesn't define the maximal number
> >>>>>> of decimals beyond second. From
> >>>>>> http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
> >>>>>> PostgreSQL supports microsecond accuracy.
> >>>>>> 
> >>>>>> ---------------------------------------
> >>>>>> Solution 5) : Microsecond with 3 fields
> >>>>>> 
> >>>>>> A variant where we split second into 3 integer parts:
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>        struct {
> >>>>>>        
> >>>>>>            GInt16  Year;
> >>>>>>            GByte   Month;
> >>>>>>            GByte   Day;
> >>>>>>            GByte   Hour;
> >>>>>>            GByte   Minute;
> >>>>>>            GByte   TZFlag;
> >>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>>> 	
> >>>>>> 	GByte   Second; /* 0 to 59 */
> >>>>>> 	
> >>>>>>            GUInt16  Millisecond; /* 0 to 999 */
> >>>>>>            GUInt16 Microsecond; /* 0 to 999 */
> >>>>>>        
> >>>>>>        } Date;
> >>>>>> 
> >>>>>> } OGRField
> >>>>>> 
> >>>>>> Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on
> >>>>>> 32-bit builds (and remain 16 bytes on 64-bit builds)
> >>>>>> 
> >>>>>> ---------------------------------------
> >>>>>> Solution 6) : Nanosecond accuracy and beyond !
> >>>>>> 
> >>>>>> Now that we are using 16 bytes, why not having nanosecond accuracy ?
> >>>>>> 
> >>>>>> typedef union {
> >>>>>> [...]
> >>>>>> 
> >>>>>>        struct {
> >>>>>>        
> >>>>>>            GInt16  Year;
> >>>>>>            GByte   Month;
> >>>>>>            GByte   Day;
> >>>>>>            GByte   Hour;
> >>>>>>            GByte   Minute;
> >>>>>>            GByte   TZFlag;
> >>>>>>            GByte   Precision; /* value in OGRDateTimePrecision */
> >>>>>> 	
> >>>>>> 	double   Second; /* 0.000000000 to 60.999999999 */
> >>>>>> 	
> >>>>>>        } Date;
> >>>>>> 
> >>>>>> } OGRField
> >>>>>> 
> >>>>>> Actually we even have picosecond accuracy! (since for picoseconds,
> >>>>>> we need 46 bits and a double has 52 bits of mantissa). And if we
> >>>>>> use a 64-bit integer instead of a double, we can have femtosecond
> >>>>>> accuracy ;-)
> >>>>>> 
> >>>>>> Any preference ?
> >>>>>> 
> >>>>>> Even
> >>>>> 
> >>>>> _______________________________________________
> >>>>> gdal-dev mailing list
> >>>>> gdal-dev at lists.osgeo.org
> >>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
> >> 
> >> _______________________________________________
> >> gdal-dev mailing list
> >> gdal-dev at lists.osgeo.org
> >> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Mon Apr  6 15:44:41 2015
From: bishop.dev at gmail.com (Dmitriy Baryshnikov)
Date: Tue, 07 Apr 2015 01:44:41 +0300
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504070015.49286.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<201504062314.57392.even.rouault@spatialys.com>
	<5522FB78.2020303@gmail.com>
	<201504070015.49286.even.rouault@spatialys.com>
Message-ID: <55230C59.2040106@gmail.com>

Ok, this explanation looks reasonable.

Best regards,
     Dmitry

07.04.2015 01:15, Even Rouault ?????:
> Le lundi 06 avril 2015 23:32:40, Dmitriy Baryshnikov a ?crit :
>> Why not read all date/time data from records as accurate as possible?
> That's what I intended and prototyped. Drivers analyze the date/time value and
> they set it with an evolution of the existing SetField() method for
> date/times, which takes an additional OGRDateTimePrecision ePrecision member,
> that they can let to _Guess if they don't know the precision (case when it
> comes from binary format typically) or explicitely set when it comes from a
> text format.
>
>> For example for OFTDate we get date by GetFieldAsDateTime
>> <http://www.gdal.org/classOGRFeature.html#a6c5d2444407b07e07b79863c42ee7a49
>>> and time is zero.
>> It's strange to analyse data structure during reading the records as we
>> already have field definition.
> At the OGR model level yes, but there's no provision in the formats themselves
> to store the level of precision of the date/time.
>
>> We can use for old datasets type DateTime + SubType ODTP_YMDHMSm and new
>> datasets let the user to choose the subtype. Certainly some formats
>> support this new type + subtype now (i.e. Postgres/PostGIS, etc.).
> I'm not sure how your suggestion would work (I'm not sure I've understood it
> correctly), at least on the reading side. When reading, you can only know if a
> field is a Date, Time or DateTime (and some formats might even not have that
> level of distinctions) by examining the layer/table metadata. To know if a
> datetime has second or millisecond accuracy, you need to fetch records (that
> might potentially be costly in case you have many records with null values for
> that field), so this is an operation we don't generally want to do so as to
> have a GetLayerDefn() that works format.
>
> Although in quite a few of the formats I mentionned (GPX, Atom (GeoRSS
> driver), CSV in AUTODETECT_TYPES=YES mode, GeoJSON, ODS, XLSX, LIBKML)), they
> work by a preliminary ingestion/analysis phase of the whole dataset, so we
> could probably figure the maximum accuracy of all date/time records of a given
> field. But that would involve much more rework of those drivers than I've
> currently prototyped... And that wouldn't solve the problem for Postgres,
> MapInfo, SQLite and GeoPackage.
>
>> Postgres data type mapping:
>> date -> OFTDateTime + ODTP_YMD
>> time-> OFTDateTime + ODTP_HMS
>> timestamp -> OFTDateTime + ODTP_YMDHMSm
> Postgres case is probably not the best one to illustrate that accuracy concept
> here since internally it stores timestamps as uint8, so "2015/04/05 17:12:34"
> and "2015/04/05 17:12:34.000" are stored the same. Consequently, on reading
> you have to trust the "Guess" mode (which uses that simple heuristics: if the
> milliseconds are not 0, then you have millisecond accuracy, otherwise second).
> All other formats (except MapInfo) store them as a string.
>
> Oh well, if that sounds too weird/confusing to have this precision information
> at the record level, maybe we can drop and always output to the millisecond
> for text formats (although there's a potential risk that would cause issues to
> parsers that wouldn't expect a decimal second). Although I had imagined this
> precision information more as an implementation detail than something we would
> really want to advertize and that applications would have to care about (it is
> an optional parameter in the modified getters/setters of OGRFeature I
> prototyped) :
>
>      int                 GetFieldAsDateTime( int i,
>                                       int *pnYear, int *pnMonth, int *pnDay,
>                                       int *pnHour, int *pnMinute, float
> *pfSecond,
>                                       int *pnTZFlag, OGRDateTimePrecision*
> pePrecision = NULL );
>
>      void                SetField( int i, int nYear, int nMonth, int nDay,
>                                    int nHour=0, int nMinute=0, float
> fSecond=0.f,
>                                    int nTZFlag = 0, OGRDateTimePrecision
> ePrecision = ODTP_Guess );
>
> Hum, I'm just thinking we could also just implement the Guess logic in output,
> that is output with milliseconds if the milliseconds are not 0, and output
> with integral seconds otherwise. Could probably be a good compromise. The use
> cases where we really want to write ".000" are not that obvious after all.
>
> Even
>
>> Best regards,
>>       Dmitry
>>
>> 07.04.2015 00:14, Even Rouault ?????:
>>> Le lundi 06 avril 2015 23:11:21, Dmitriy Baryshnikov a ?crit :
>>>> Hi Even,
>>>>
>>>> It seems to me that this is duplicating of RFC 50: OGR field subtypes.
>>>> For example we have the master field type DateTime and Subtype - Year.
>>>> So the internal structure for date/time representation may be adopt to
>>>> such technique.
>>> The subtype is defined at field definition level. In all formats we
>>> currently handle we only know the date/time precision when reading
>>> values (and they might have different precision between records), so
>>> after having created the layer and field definitions.
>>>
>>>> Best regards,
>>>>
>>>>        Dmitry
>>>>
>>>> 06.04.2015 15:02, Even Rouault ?????:
>>>>> Le lundi 06 avril 2015 13:48:47, Even Rouault a ?crit :
>>>>>> Le lundi 06 avril 2015 11:32:33, Dmitriy Baryshnikov a ?crit :
>>>>>>> The first solution looks reasonable. But there is lack in precision
>>>>>>> field - there the only time is significant:
>>>>>>>
>>>>>>> ODTP_HMSm
>>>>>>> ODTP_HMS
>>>>>>> ODTP_HM
>>>>>>> ODTP_H
>>>>>> As I didn't want to multiply the values in the enumeration, my intent
>>>>>> was to reuse the ODTP_YMDxxxx values for OFTTime only.
>>>>> I meant "for OFTTime too"
>>>>>
>>>>>> This was what I wanted
>>>>>> to intend with the precision between parenthesis in the comment of
>>>>>> ODTP_YMDH "Year, month, day (if OFTDateTime) and hour"
>>>>>>
>>>>>> Or perhaps, the enumeration should capture the most precise part of
>>>>>> the (date)time structure  ?
>>>>>> ODTP_Year
>>>>>> ODTP_Month
>>>>>> ODTP_Day
>>>>>> ODTP_Hour
>>>>>> ODTP_Minute
>>>>>> ODTP_Second
>>>>>> ODTP_Millisecond
>>>>>>
>>>>>>> etc.
>>>>>>>
>>>>>>> Best regards,
>>>>>>>
>>>>>>>         Dmitry
>>>>>>>
>>>>>>> 05.04.2015 22:25, Even Rouault ?????:
>>>>>>>> Hi,
>>>>>>>>
>>>>>>>> In an effort of revisiting http://trac.osgeo.org/gdal/ticket/2680,
>>>>>>>> which is about lack of precision of the current datetime structure,
>>>>>>>> I've imagined different solutions how to modify the OGRField
>>>>>>>> structure, and failed to pick up one that would be the obvious
>>>>>>>> solution, so opinions are welcome.
>>>>>>>>
>>>>>>>> The issue is how to add (at least) microsecond accuracy to the
>>>>>>>> datetime structure, as a few formats support it explicitely or
>>>>>>>> implicitely : MapInfo, GPX, Atom (GeoRSS driver), GeoPackage,
>>>>>>>> SQLite, PostgreSQL, CSV, GeoJSON, ODS, XLSX, KML (potentially GML
>>>>>>>> too)...
>>>>>>>>
>>>>>>>> Below a few potential solutions :
>>>>>>>>
>>>>>>>> ---------------------------------------
>>>>>>>> Solution 1) : Millisecond accuracy, second becomes a float
>>>>>>>>
>>>>>>>> This is the solution I've prototyped.
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>         struct {
>>>>>>>>         
>>>>>>>>             GInt16  Year;
>>>>>>>>             GByte   Month;
>>>>>>>>             GByte   Day;
>>>>>>>>             GByte   Hour;
>>>>>>>>             GByte   Minute;
>>>>>>>>             GByte   TZFlag;
>>>>>>>>             GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>>>             float   Second; /* from 00.000 to 60.999 (millisecond
>>>>>>>>             accuracy) */
>>>>>>>>         
>>>>>>>>         } Date;
>>>>>>>>
>>>>>>>> } OGRField
>>>>>>>>
>>>>>>>> So sub-second precision is representing with a single precision
>>>>>>>> floating point number, storing both integral and decimal parts. (we
>>>>>>>> could theorically have a hundredth of millisecond accuracy, 10^-5 s,
>>>>>>>> since 6099999 fits on the 23 bits of the mantissa)
>>>>>>>>
>>>>>>>> Another addition is the Precision field that indicates which parts
>>>>>>>> of the datetime structure are significant.
>>>>>>>>
>>>>>>>> /** Enumeration that defines the precision of a DateTime.
>>>>>>>>
>>>>>>>>       * @since GDAL 2.0
>>>>>>>>       */
>>>>>>>>
>>>>>>>> typedef enum
>>>>>>>> {
>>>>>>>>
>>>>>>>>         ODTP_Undefined,     /**< Undefined */
>>>>>>>>         ODTP_Guess,         /**< Only valid when setting through
>>>>>>>>         SetField(i,year,
>>>>>>>>
>>>>>>>> month...) where OGR will guess */
>>>>>>>>
>>>>>>>>         ODTP_Y,             /**< Year is significant */
>>>>>>>>         ODTP_YM,            /**< Year and month are significant*/
>>>>>>>>         ODTP_YMD,           /**< Year, month and day are significant
>>>>>>>>         */ ODTP_YMDH,          /**< Year, month, day (if
>>>>>>>>         OFTDateTime) and hour are
>>>>>>>>
>>>>>>>> significant */
>>>>>>>>
>>>>>>>>         ODTP_YMDHM,         /**< Year, month, day (if OFTDateTime),
>>>>>>>>         hour and
>>>>>>>>
>>>>>>>> minute are significant */
>>>>>>>>
>>>>>>>>         ODTP_YMDHMS,        /**< Year, month, day (if OFTDateTime),
>>>>>>>>         hour, minute
>>>>>>>>
>>>>>>>> and integral second are significant */
>>>>>>>>
>>>>>>>>         ODTP_YMDHMSm,       /**< Year, month, day (if OFTDateTime),
>>>>>>>>         hour, minute
>>>>>>>>
>>>>>>>> and second with microseconds are significant */
>>>>>>>> } OGRDateTimePrecision;
>>>>>>>>
>>>>>>>> I think this is important since "2015/04/05 17:12:34" and
>>>>>>>> "2015/04/05 17:12:34.000" do not really mean the same thing and it
>>>>>>>> might be good to be able to preserve the original accuracy when
>>>>>>>> converting between formats.
>>>>>>>>
>>>>>>>> A drawback of this solution is that the size of the OGRField
>>>>>>>> structure increases from 8 bytes to 12 on 32 bit builds (and remain
>>>>>>>> 16 bytes on 64 bit). This is probably not that important since in
>>>>>>>> most cases not that many OGRField structures are instanciated at
>>>>>>>> one time (typically, you iterate over features one at a time).
>>>>>>>> This could be more of a problem for use cases that involve the MEM
>>>>>>>> driver, as it keep all features in memory.
>>>>>>>>
>>>>>>>> Another drawback is that the change of the structure might not be
>>>>>>>> directly noticed by application developers as the Second field name
>>>>>>>> is preserved, but a new Precision field is added, so there's a risk
>>>>>>>> that Precision is let uninitialized if the field is set through
>>>>>>>> OGRFeature::SetField(int iFieldIndex, OGRField* psRawField). That
>>>>>>>> could lead to unexpected formatting (but hopefully not crashes with
>>>>>>>> defensive programming). However I'd think it is unlikely that many
>>>>>>>> applications directly manipulate OGRField directly, instead of using
>>>>>>>> the getters and setters of OGRFeature.
>>>>>>>>
>>>>>>>> ---------------------------------------
>>>>>>>> Solution 2) : Millisecond accuracy, second and milliseconds in
>>>>>>>> distinct fields
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>         struct {
>>>>>>>>         
>>>>>>>>             GInt16  Year;
>>>>>>>>             GByte   Month;
>>>>>>>>             GByte   Day;
>>>>>>>>             GByte   Hour;
>>>>>>>>             GByte   Minute;
>>>>>>>>             GByte   TZFlag;
>>>>>>>>             GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>>>             GByte   Second; /* from 0 to 60 */
>>>>>>>> 	
>>>>>>>> 	GUInt16 Millisecond; /* from 0 to 999 */
>>>>>>>> 	
>>>>>>>>         } Date;
>>>>>>>>
>>>>>>>> } OGRField
>>>>>>>>
>>>>>>>> Same size of structure as in 1)
>>>>>>>>
>>>>>>>> ---------------------------------------
>>>>>>>> Solution 3) : Millisecond accuracy, pack all fields
>>>>>>>>
>>>>>>>> Conceptually, this would use bit fields to avoid wasting unused bits
>>>>>>>> :
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>       struct {
>>>>>>>>       
>>>>>>>>         GInt16        Year;
>>>>>>>>         GUIntBig     Month:4;
>>>>>>>>         GUIntBig     Day:5;
>>>>>>>>         GUIntBig     Hour:5;
>>>>>>>>         GUIntBig     Minute:6;
>>>>>>>>         GUIntBig     Second:6;
>>>>>>>>         GUIntBig     Millisecond:10; /* 0-999 */
>>>>>>>>         GUIntBig     TZFlag:8;
>>>>>>>>         GUIntBig     Precision:4;
>>>>>>>>      
>>>>>>>>      } Date;
>>>>>>>>
>>>>>>>> } OGRField;
>>>>>>>>
>>>>>>>> This was proposed in the above mentionned ticket. And as there were
>>>>>>>> enough remaining bits, I've also added the Precision field (and in
>>>>>>>> all other solutions).
>>>>>>>>
>>>>>>>> The advantage is that sizeof(mydate) remains 8 bytes on 32 bits
>>>>>>>> builds.
>>>>>>>>
>>>>>>>> But the C standard only defines bitfields of int/unsigned int, so
>>>>>>>> this is not portable, plus the fact that the way bits are packed is
>>>>>>>> not defined by the standard, so different compilers could come up
>>>>>>>> with different packing. A workaround is to do the bit manipulation
>>>>>>>> through macros :
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>       struct {
>>>>>>>> 	
>>>>>>>> 	GUIntBig	opaque;
>>>>>>>> 	
>>>>>>>>       } Date;
>>>>>>>>
>>>>>>>> } OGRField;
>>>>>>>>
>>>>>>>> #define GET_BITS(x,y_bits,shift)        (int)(((x).Date.opaque >>
>>>>>>>> (shift)) & ((1 << (y_bits))-1))
>>>>>>>>
>>>>>>>> #define GET_YEAR(x)              (short)GET_BITS(x,16,64-16)
>>>>>>>> #define GET_MONTH(x)             GET_BITS(x,4,64-16-4)
>>>>>>>> #define GET_DAY(x)               GET_BITS(x,5,64-16-4-5)
>>>>>>>> #define GET_HOUR(x)              GET_BITS(x,5,64-16-4-5-5)
>>>>>>>> #define GET_MINUTE(x)            GET_BITS(x,6,64-16-4-5-5-6)
>>>>>>>> #define GET_SECOND(x)            GET_BITS(x,6,64-16-4-5-5-6-6)
>>>>>>>> #define GET_MILLISECOND(x)       GET_BITS(x,10,64-16-4-5-5-6-6-10)
>>>>>>>> #define GET_TZFLAG(x)            GET_BITS(x,8,64-16-4-5-5-6-6-10-8)
>>>>>>>> #define GET_PRECISION(x)
>>>>>>>> GET_BITS(x,4,64-16-4-5-5-6-6-10-8-4)
>>>>>>>>
>>>>>>>> #define SET_BITS(x,y,y_bits,shift)  (x).Date.opaque =
>>>>>>>> ((x).Date.opaque & (~( (GUIntBig)((1 << (y_bits))-1) << (shift) ))
>>>>>>>> | ((GUIntBig)(y) << (shift)))
>>>>>>>>
>>>>>>>> #define SET_YEAR(x,val)            SET_BITS(x,val,16,64-16)
>>>>>>>> #define SET_MONTH(x,val)           SET_BITS(x,val,4,64-16-4)
>>>>>>>> #define SET_DAY(x,val)             SET_BITS(x,val,5,64-16-4-5)
>>>>>>>> #define SET_HOUR(x,val)            SET_BITS(x,val,5,64-16-4-5-5)
>>>>>>>> #define SET_MINUTE(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6)
>>>>>>>> #define SET_SECOND(x,val)          SET_BITS(x,val,6,64-16-4-5-5-6-6)
>>>>>>>> #define SET_MILLISECOND(x,val)
>>>>>>>> SET_BITS(x,val,10,64-16-4-5-5-6-6-10) #define SET_TZFLAG(x,val)
>>>>>>>>
>>>>>>>>      SET_BITS(x,val,8,64-16-4-5-5-6-6-10-8) #define
>>>>>>>>      SET_PRECISION(x,val)
>>>>>>>>
>>>>>>>> SET_BITS(x,val,4,64-16-4-5-5-6-6-10-8-4)
>>>>>>>>
>>>>>>>> Main advantage: the size of OGRField remains unchanged (so 8 bytes
>>>>>>>> on 32-bit builds).
>>>>>>>>
>>>>>>>> Drawback: manipulation of datetime members is less natural, but
>>>>>>>> there are not that many places in the GDAL code base were the
>>>>>>>> OGRField.Date members are used, so it is not much that a problem.
>>>>>>>>
>>>>>>>> ---------------------------------------
>>>>>>>> Solution 4) : Microsecond accuracy with one field
>>>>>>>>
>>>>>>>> Solution 1) used a float for second and sub-second, but a float has
>>>>>>>> only 23 bits of mantissa, which is enough to represent second with
>>>>>>>> millisecond accuracy, but not for microsecond (you need 26 bits for
>>>>>>>> that). So use a 32-bit integer instead of a 32-bit floating point.
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>         struct {
>>>>>>>>         
>>>>>>>>             GInt16  Year;
>>>>>>>>             GByte   Month;
>>>>>>>>             GByte   Day;
>>>>>>>>             GByte   Hour;
>>>>>>>>             GByte   Minute;
>>>>>>>>             GByte   TZFlag;
>>>>>>>>             GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>>>             GUInt32 Microseconds; /* 00000000 to 59999999 */
>>>>>>>>         
>>>>>>>>         } Date;
>>>>>>>>
>>>>>>>> } OGRField
>>>>>>>>
>>>>>>>> Same as solution 1: sizeof(OGRField) becomes 12 bytes on 32-bit
>>>>>>>> builds (and remain 16 bytes on 64-bit builds)
>>>>>>>>
>>>>>>>> We would need to add an extra value in OGRDateTimePrecision to mean
>>>>>>>> the microsecond accuracy.
>>>>>>>>
>>>>>>>> Not really clear we need microseconds accuracy... Most formats that
>>>>>>>> support subsecond accuracy use ISO 8601 representation (e.g.
>>>>>>>> YYYY-MM- DDTHH:MM:SS.sssssZ) that doesn't define the maximal number
>>>>>>>> of decimals beyond second. From
>>>>>>>> http://www.postgresql.org/docs/9.1/static/datatype-datetime.html,
>>>>>>>> PostgreSQL supports microsecond accuracy.
>>>>>>>>
>>>>>>>> ---------------------------------------
>>>>>>>> Solution 5) : Microsecond with 3 fields
>>>>>>>>
>>>>>>>> A variant where we split second into 3 integer parts:
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>         struct {
>>>>>>>>         
>>>>>>>>             GInt16  Year;
>>>>>>>>             GByte   Month;
>>>>>>>>             GByte   Day;
>>>>>>>>             GByte   Hour;
>>>>>>>>             GByte   Minute;
>>>>>>>>             GByte   TZFlag;
>>>>>>>>             GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>>> 	
>>>>>>>> 	GByte   Second; /* 0 to 59 */
>>>>>>>> 	
>>>>>>>>             GUInt16  Millisecond; /* 0 to 999 */
>>>>>>>>             GUInt16 Microsecond; /* 0 to 999 */
>>>>>>>>         
>>>>>>>>         } Date;
>>>>>>>>
>>>>>>>> } OGRField
>>>>>>>>
>>>>>>>> Drawback: due to alignment, sizeof(OGRField) becomes 16 bytes on
>>>>>>>> 32-bit builds (and remain 16 bytes on 64-bit builds)
>>>>>>>>
>>>>>>>> ---------------------------------------
>>>>>>>> Solution 6) : Nanosecond accuracy and beyond !
>>>>>>>>
>>>>>>>> Now that we are using 16 bytes, why not having nanosecond accuracy ?
>>>>>>>>
>>>>>>>> typedef union {
>>>>>>>> [...]
>>>>>>>>
>>>>>>>>         struct {
>>>>>>>>         
>>>>>>>>             GInt16  Year;
>>>>>>>>             GByte   Month;
>>>>>>>>             GByte   Day;
>>>>>>>>             GByte   Hour;
>>>>>>>>             GByte   Minute;
>>>>>>>>             GByte   TZFlag;
>>>>>>>>             GByte   Precision; /* value in OGRDateTimePrecision */
>>>>>>>> 	
>>>>>>>> 	double   Second; /* 0.000000000 to 60.999999999 */
>>>>>>>> 	
>>>>>>>>         } Date;
>>>>>>>>
>>>>>>>> } OGRField
>>>>>>>>
>>>>>>>> Actually we even have picosecond accuracy! (since for picoseconds,
>>>>>>>> we need 46 bits and a double has 52 bits of mantissa). And if we
>>>>>>>> use a 64-bit integer instead of a double, we can have femtosecond
>>>>>>>> accuracy ;-)
>>>>>>>>
>>>>>>>> Any preference ?
>>>>>>>>
>>>>>>>> Even
>>>>>>> _______________________________________________
>>>>>>> gdal-dev mailing list
>>>>>>> gdal-dev at lists.osgeo.org
>>>>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>> _______________________________________________
>>>> gdal-dev mailing list
>>>> gdal-dev at lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev


From mwtoews at gmail.com  Mon Apr  6 16:15:17 2015
From: mwtoews at gmail.com (Mike Toews)
Date: Tue, 7 Apr 2015 11:15:17 +1200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <201504052339.02358.even.rouault@spatialys.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<552191BF.3040603@cubewerx.com>
	<201504052339.02358.even.rouault@spatialys.com>
Message-ID: <CAM2FmMrHcG74spPAYP0Hw_H2cb-LOqFj2hNV8rxNp5+vhykMeQ@mail.gmail.com>

On 6 April 2015 at 09:39, Even Rouault <even.rouault at spatialys.com> wrote:
> I should have mentionned what currently exists indeed :
>
>     struct {
>         GInt16  Year;
>         GByte   Month;
>         GByte   Day;
>         GByte   Hour;
>         GByte   Minute;
>         GByte   Second;
>         GByte   TZFlag; /* 0=unknown, 1=localtime(ambiguous),
>                            100=GMT, 104=GMT+1, 80=GMT-5, etc */
>     } Date;

In regards to TZFlag, it should also be used to optionally convey
daylight savings information, where known. E.g. see the 'is_dst' in
struct tm [1]. I'm not sure if a GMT value can adequately convey this,
but correct me if it can.

[1] http://www.cplusplus.com/reference/ctime/tm/

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr  7 00:12:20 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 7 Apr 2015 07:12:20 +0000 (UTC)
Subject: [gdal-dev] =?utf-8?q?Add_Mercator=5Fvariant=5FA_method=3F?=
References: <28009649.ARrsKQEWmZ@saxicola>
Message-ID: <loom.20150407T085218-238@post.gmane.org>

Brad Hards <bradh <at> frogmouth.net> writes:


> The problematic part is that "PROJECTION" definition. I was originally
going to 
> argue it should be Mercator_1SP, but it looks like the EPSG decided to change 
> it (in EPSG::2010.058) to this new "Mercator_variant_A" form, and keep the 
> "Mercator_1SP" form as an alias.

Here is a link to a report that at this moment (2015-04-07) makes query to
EPSG database v. 8.6.5

http://www.epsg-registry.org/report.htm?type=selection&entity=urn:ogc:def:method:EPSG::9804&reportDetail=short&style=urn:uuid:report-style:default-with-code&style_name=OGP%20Default%20With%20Code&title=Method%209804%20Mercator%20variant%20A

Guidance note document that is asked to be used as an ultimate reference is
http://www.iogp.org/pubs/373-07-2.pdf

I felt that document somehow heavy to read but it appears in many places
that "Mercator variant A" is the primary name since October 2010. This
section is from page 34 (of 143)

"Three variants of the Mercator projection are recognised ,
differentiated by the parameters used in the projection definition : 

Variant A, also known as Mercator (1SP ). The projection is defined
with the equator as the single standard parallel, with scale factor on
the equator also defined. False grid coordinates are applied at the
natural origin of the projection, the intersection of the equator and
the longitude of o rigin. See figure 3 below . In the few cases in
which the Mercator projection is used for terrestrial applications or
land mapping, such as in Indonesia prior to the introduction of the
Universal Transverse Mercator, this is the normal method of definition."

-Jukka Rahkonen-



From sunil.vankadara at hexagongeospatial.com  Tue Apr  7 00:37:35 2015
From: sunil.vankadara at hexagongeospatial.com (Vankadara, Sunil)
Date: Tue, 7 Apr 2015 07:37:35 +0000
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF
	Document
Message-ID: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>

Hi Team,

I created a PDF file with OGC_BP as GEO_ENCODING option like shown in the  below command.  The below tif file's Datum and Projection details are WGS84 /Geographic (lat/lon).

./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif ../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co COMPRESS=JPEG -co PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'

Looked at the created PDF file Metadata using QGIS tool and noticed that it is having the same datum and projection details as like below.

Layer Spatial Reference System
+proj=longlat +datum=WGS84 +no_defs
Layer Extent (layer original source projection)
-84.5046451524118538,34.1200924180016969 : -84.5042907999925177,34.1204467704210259

When I tried to use the Geospatial Location tool (Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the empty lat/long values are displaying at the right bottom of the  document.
Am I missing anything in creating the Geospatial PDF document ? How to confirm whether the CRS information is written into the PDF document or not?
How GDAL PDF handles in case the given projection is not supported by the driver?

Regards
Sunil



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150407/adc81d7c/attachment.html>

From even.rouault at spatialys.com  Tue Apr  7 00:51:17 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 7 Apr 2015 09:51:17 +0200
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF
	Document
In-Reply-To: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>
References: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>
Message-ID: <201504070951.17938.even.rouault@spatialys.com>

Le mardi 07 avril 2015 09:37:35, Vankadara, Sunil a ?crit :
> Hi Team,
> 
> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in the 
> below command.  The below tif file's Datum and Projection details are
> WGS84 /Geographic (lat/lon).
> 
> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
> ../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co
> COMPRESS=JPEG -co PRODUCER="ERDAS IMAGINE" -co
> CREATION_DATE=D:20150407111345+02'00'
> 
> Looked at the created PDF file Metadata using QGIS tool and noticed that it
> is having the same datum and projection details as like below.
> 
> Layer Spatial Reference System
> +proj=longlat +datum=WGS84 +no_defs
> Layer Extent (layer original source projection)
> -84.5046451524118538,34.1200924180016969 :
> -84.5042907999925177,34.1204467704210259
> 
> When I tried to use the Geospatial Location tool
> (Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then
> the empty lat/long values are displaying at the right bottom of the 
> document. Am I missing anything in creating the Geospatial PDF document ?
> How to confirm whether the CRS information is written into the PDF
> document or not? How GDAL PDF handles in case the given projection is not
> supported by the driver?

Sunil,

I'm not sure Adobe Reader understands the OGC Best Practice encoding. I think 
it's only the TerraGo toolbar. Try with the ISO32000 encoding instead (the 
default).

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr  7 01:00:54 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 7 Apr 2015 10:00:54 +0200
Subject: [gdal-dev] Design for sub-second accuracy in OGR ?
In-Reply-To: <CAM2FmMrHcG74spPAYP0Hw_H2cb-LOqFj2hNV8rxNp5+vhykMeQ@mail.gmail.com>
References: <201504052125.53531.even.rouault@spatialys.com>
	<201504052339.02358.even.rouault@spatialys.com>
	<CAM2FmMrHcG74spPAYP0Hw_H2cb-LOqFj2hNV8rxNp5+vhykMeQ@mail.gmail.com>
Message-ID: <201504071000.54878.even.rouault@spatialys.com>

Le mardi 07 avril 2015 01:15:17, Mike Toews a ?crit :
> On 6 April 2015 at 09:39, Even Rouault <even.rouault at spatialys.com> wrote:
> > I should have mentionned what currently exists indeed :
> >     struct {
> >     
> >         GInt16  Year;
> >         GByte   Month;
> >         GByte   Day;
> >         GByte   Hour;
> >         GByte   Minute;
> >         GByte   Second;
> >         GByte   TZFlag; /* 0=unknown, 1=localtime(ambiguous),
> >         
> >                            100=GMT, 104=GMT+1, 80=GMT-5, etc */
> >     
> >     } Date;
> 
> In regards to TZFlag, it should also be used to optionally convey
> daylight savings information, where known. E.g. see the 'is_dst' in
> struct tm [1]. I'm not sure if a GMT value can adequately convey this,
> but correct me if it can.

Mike,

I think daylight savings information is captured in the timezone (e.g local 
time in France is GMT+2 now, and GMT+1 during winter). None of the formats 
that convey datetime have a flag to indicate if DST is on/off.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr  7 01:18:48 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 7 Apr 2015 08:18:48 +0000 (UTC)
Subject: [gdal-dev]
	=?utf-8?q?Relating_to_GeoLocation_tool_of_Geospatial_P?=
	=?utf-8?q?DF=09Document?=
References: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>
Message-ID: <loom.20150407T095926-688@post.gmane.org>

Vankadara, Sunil <sunil.vankadara <at> hexagongeospatial.com> writes:

> 
> 
> 
> Hi Team,
> ?
> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in the
?below command. ?The below tif file?s Datum and Projection details are WGS84
/Geographic (lat/lon).
> ?
> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co
COMPRESS=JPEG -co
>  PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'
> ?
> Looked at the created PDF file Metadata using QGIS tool and noticed that
it is having the same datum and projection details as like below.
> ?
> Layer Spatial Reference System
> 
> +proj=longlat +datum=WGS84 +no_defs
> 
> Layer Extent (layer original source projection)
> -84.5046451524118538,34.1200924180016969 :
-84.5042907999925177,34.1204467704210259
> ?
> When I tried to use the Geospatial Location tool
(Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the
empty lat/long values are displaying at the right bottom of the ?document.
> Am I missing anything in creating the Geospatial PDF document ? How to
confirm whether the CRS information is written into the PDF document or not?
> How GDAL PDF handles in case the given projection is not supported by the
driver?

Hi,

Don't use the -co GEO_ENCODING=OGC_BP option alone if you want to show
coordinates with standard Acrobat viewer without the TerraGo toolbar. Use
the default which means ISO32000, or BOTH.

Confirm the result with gdalinfo "gdalinfo output.pdf". If source SRS is not
recognized define it explicitly by using parameters -s_srs and -t_srs.
Alternatively you can just attach SRS to output with -a_srs.

-Jukka Rahkonen-

From sunil.vankadara at hexagongeospatial.com  Tue Apr  7 02:25:52 2015
From: sunil.vankadara at hexagongeospatial.com (Vankadara, Sunil)
Date: Tue, 7 Apr 2015 09:25:52 +0000
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial
	PDF	Document
In-Reply-To: <loom.20150407T095926-688@post.gmane.org>
References: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>
	<loom.20150407T095926-688@post.gmane.org>
Message-ID: <3ED2AF5FA67CF548BC5C06A608D7D40523D9D083@IN-MBX2.ingrnet.com>

Hi Jukka Rahkonen,

Thanks for the prompt information. My GDAL is not linked to proj4 libraries to use ISO32000 option. 
I am trying to link the GDAL with Proj4 and test the Geolocation workflow.

Regards
Sunil
-----Original Message-----
From: gdal-dev-bounces at lists.osgeo.org [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Jukka Rahkonen
Sent: 07 April 2015 01:49:PM
To: gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF Document

Vankadara, Sunil <sunil.vankadara <at> hexagongeospatial.com> writes:

> 
> 
> 
> Hi Team,
> ?
> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in 
> the
?below command. ?The below tif file?s Datum and Projection details are WGS84 /Geographic (lat/lon).
> ?
> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co COMPRESS=JPEG -co
>  PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'
> ?
> Looked at the created PDF file Metadata using QGIS tool and noticed 
> that
it is having the same datum and projection details as like below.
> ?
> Layer Spatial Reference System
> 
> +proj=longlat +datum=WGS84 +no_defs
> 
> Layer Extent (layer original source projection)
> -84.5046451524118538,34.1200924180016969 :
-84.5042907999925177,34.1204467704210259
> ?
> When I tried to use the Geospatial Location tool
(Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the empty lat/long values are displaying at the right bottom of the ?document.
> Am I missing anything in creating the Geospatial PDF document ? How to
confirm whether the CRS information is written into the PDF document or not?
> How GDAL PDF handles in case the given projection is not supported by 
> the
driver?

Hi,

Don't use the -co GEO_ENCODING=OGC_BP option alone if you want to show coordinates with standard Acrobat viewer without the TerraGo toolbar. Use the default which means ISO32000, or BOTH.

Confirm the result with gdalinfo "gdalinfo output.pdf". If source SRS is not recognized define it explicitly by using parameters -s_srs and -t_srs.
Alternatively you can just attach SRS to output with -a_srs.

-Jukka Rahkonen-
_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/gdal-dev

From sunil.vankadara at hexagongeospatial.com  Tue Apr  7 02:26:39 2015
From: sunil.vankadara at hexagongeospatial.com (Vankadara, Sunil)
Date: Tue, 7 Apr 2015 09:26:39 +0000
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF
 Document
In-Reply-To: <201504070951.17938.even.rouault@spatialys.com>
References: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>
	<201504070951.17938.even.rouault@spatialys.com>
Message-ID: <3ED2AF5FA67CF548BC5C06A608D7D40523D9D08E@IN-MBX2.ingrnet.com>

Hi Evan,

Thanks for the prompt reply.

Regards
Sunil

-----Original Message-----
From: Even Rouault [mailto:even.rouault at spatialys.com] 
Sent: 07 April 2015 01:21:PM
To: gdal-dev at lists.osgeo.org
Cc: Vankadara, Sunil
Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF Document

Le mardi 07 avril 2015 09:37:35, Vankadara, Sunil a ?crit :
> Hi Team,
> 
> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in 
> the below command.  The below tif file's Datum and Projection details 
> are
> WGS84 /Geographic (lat/lon).
> 
> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
> ../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co 
> COMPRESS=JPEG -co PRODUCER="ERDAS IMAGINE" -co 
> CREATION_DATE=D:20150407111345+02'00'
> 
> Looked at the created PDF file Metadata using QGIS tool and noticed 
> that it is having the same datum and projection details as like below.
> 
> Layer Spatial Reference System
> +proj=longlat +datum=WGS84 +no_defs
> Layer Extent (layer original source projection)
> -84.5046451524118538,34.1200924180016969 :
> -84.5042907999925177,34.1204467704210259
> 
> When I tried to use the Geospatial Location tool 
> (Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader 
> then the empty lat/long values are displaying at the right bottom of 
> the document. Am I missing anything in creating the Geospatial PDF document ?
> How to confirm whether the CRS information is written into the PDF 
> document or not? How GDAL PDF handles in case the given projection is 
> not supported by the driver?

Sunil,

I'm not sure Adobe Reader understands the OGC Best Practice encoding. I think it's only the TerraGo toolbar. Try with the ISO32000 encoding instead (the default).

Even

--
Spatialys - Geospatial professional services http://www.spatialys.com


From even.rouault at spatialys.com  Tue Apr  7 05:55:11 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 7 Apr 2015 14:55:11 +0200
Subject: [gdal-dev] Call for discussion on RFC 56: OFTTime/OFTDateTime
	millisecond accuracy
Message-ID: <201504071455.11600.even.rouault@spatialys.com>

Hi,

This is a call for discussion on "RFC 56: OFTTime/OFTDateTime millisecond 
accuracy".

https://trac.osgeo.org/gdal/wiki/rfc56_millisecond_precision

Summary :

This RFC aims at adding millisecond accuracy to OFTTime and OFTDateTime fields, 
as a number of formats support it explicitely or implicitely : MapInfo, GPX, 
Atom (GeoRSS driver), GeoPackage, SQLite, PostgreSQL, CSV, GeoJSON, ODS, XLSX, 
KML (potentially GML too)... 



For those who have followed the preliminary discussion of those last days, 
I've stayed on my solution 1, amended by the removal of the Precision field. 
Precision is now implicit, i.e. as soon as the Second field is not an integer 
value, we output milliseconds. This hopefully fits most purposes and is less 
confusing.


Best regards,

Even
-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kassies at gmail.com  Tue Apr  7 08:16:56 2015
From: kassies at gmail.com (Rutger)
Date: Tue, 7 Apr 2015 08:16:56 -0700 (PDT)
Subject: [gdal-dev] ReadAsArray
In-Reply-To: <201504031243.20476.even.rouault@spatialys.com>
References: <CAPqnkJScXnn6OLMc_3Er9xfWh0jMQgEugiNmjO=5YnX54QBmsg@mail.gmail.com>
	<201504031243.20476.even.rouault@spatialys.com>
Message-ID: <1428419816179-5200255.post@n6.nabble.com>

Even Rouault-2 wrote
> Yuta,
> 
> Increasing GDAL_CACHEMAX might accelerate in case of repeated reads on
> windows 
> that are identical or overlapping already read windows. Or if the way you
> read 
> the raster doesn't follow its block shape : for example if the raster is 
> organized by lines/strips and you read by square blocks, or the reverse 
> situation.
> 
> GDAL_SWATH_SIZE is only used by CreateCopy().
> 
> Even

Interesting, thanks for mentioning this. The case you mention might seem
like bad practice, but it still true that VRT's only allow blocks of 128x128
right? VRT's are something i use all the time. And for example, Landsat
geotiff's from the USGS are delivered as stripes of '1 by width'. If
performance is really an issue i sometimes deliberately read chucks of '128
x width' in order to avoid the inefficiency. I'll try to see if increasing
the CACHE_MAX might do this 'on the fly' without me having to worry about
the alignment of the block definitions. 

Regards,
Rutger



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-ReadAsArray-tp5196714p5200255.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Tue Apr  7 12:33:43 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 7 Apr 2015 21:33:43 +0200
Subject: [gdal-dev] RFC 57: 64-bit bucket counts for histograms
Message-ID: <201504072133.43250.even.rouault@spatialys.com>

Hi,

This is a call for discussion on "64-bit bucket counts for histograms" (last 
one for today ;-) and hopefully a no-brainer)

https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count

Summary :

This RFC modifies the GDALRasterBand GetHistogram(), GetDefaultHistogram() and 
SetDefaultHistogram() methods to accept arrays of 64-bit integer instead of 
the current arrays of 32-bit integer for bucket counts. This will fix issues 
when operating on large rasters that have more than 2 billion pixels. 

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From csbruce at cubewerx.com  Tue Apr  7 16:27:24 2015
From: csbruce at cubewerx.com (Craig Bruce)
Date: Tue, 07 Apr 2015 20:27:24 -0300
Subject: [gdal-dev] RFC 57: 64-bit bucket counts for histograms
In-Reply-To: <201504072133.43250.even.rouault@spatialys.com>
References: <201504072133.43250.even.rouault@spatialys.com>
Message-ID: <552467DC.40103@cubewerx.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150407/6538f784/attachment.html>

From sunil.vankadara at hexagongeospatial.com  Tue Apr  7 23:05:54 2015
From: sunil.vankadara at hexagongeospatial.com (Vankadara, Sunil)
Date: Wed, 8 Apr 2015 06:05:54 +0000
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial
	PDF	Document
In-Reply-To: <loom.20150407T095926-688@post.gmane.org>
References: <3ED2AF5FA67CF548BC5C06A608D7D40523D9CF9D@IN-MBX2.ingrnet.com>
	<loom.20150407T095926-688@post.gmane.org>
Message-ID: <3ED2AF5FA67CF548BC5C06A608D7D40523D9D995@IN-MBX2.ingrnet.com>

Hi Jukka Rahkonen,

Thanks for the provided information.
Now I am able to see the lat/long values in the GeoLocator tool for the files created with ISO32000 option.
I have installed the Terrago tool bar and created the file with OGC_BP option and noticed that neither Adobe's GeoLocator tool nor Terrago Geolocator toll showing the coordinates.
In fact the Terrago Geolocator tool is greyed out for this OGC_BP option file.  Actually I am confused where this OGC_BP option used in creating the PDF documents? Or is it needs to used using the Terrago s/w only?

Regards
Sunil
-----Original Message-----
From: gdal-dev-bounces at lists.osgeo.org [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Jukka Rahkonen
Sent: 07 April 2015 01:49:PM
To: gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF Document

Vankadara, Sunil <sunil.vankadara <at> hexagongeospatial.com> writes:

> 
> 
> 
> Hi Team,
> ?
> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in 
> the
?below command. ?The below tif file?s Datum and Projection details are WGS84 /Geographic (lat/lon).
> ?
> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co COMPRESS=JPEG -co
>  PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'
> ?
> Looked at the created PDF file Metadata using QGIS tool and noticed 
> that
it is having the same datum and projection details as like below.
> ?
> Layer Spatial Reference System
> 
> +proj=longlat +datum=WGS84 +no_defs
> 
> Layer Extent (layer original source projection)
> -84.5046451524118538,34.1200924180016969 :
-84.5042907999925177,34.1204467704210259
> ?
> When I tried to use the Geospatial Location tool
(Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the empty lat/long values are displaying at the right bottom of the ?document.
> Am I missing anything in creating the Geospatial PDF document ? How to
confirm whether the CRS information is written into the PDF document or not?
> How GDAL PDF handles in case the given projection is not supported by 
> the
driver?

Hi,

Don't use the -co GEO_ENCODING=OGC_BP option alone if you want to show coordinates with standard Acrobat viewer without the TerraGo toolbar. Use the default which means ISO32000, or BOTH.

Confirm the result with gdalinfo "gdalinfo output.pdf". If source SRS is not recognized define it explicitly by using parameters -s_srs and -t_srs.
Alternatively you can just attach SRS to output with -a_srs.

-Jukka Rahkonen-
_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/gdal-dev

From jukka.rahkonen at maanmittauslaitos.fi  Wed Apr  8 00:13:36 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Rahkonen Jukka (MML))
Date: Wed, 8 Apr 2015 07:13:36 +0000
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial
	PDF	Document
Message-ID: <bacbac3f404b49f09226bbb16c458dfa@C119S212VM022.msvyvi.vaha.local>

Hi,

The OGC_BP option is actually  created by TerraGo and I am surprised that it does not work for you with the TerraGo Toolbar because that is the native way for adding georeferencing info into GeoPDF (tm) files. In some of my early tests I found problems with interoperability:

Only ISO: OK for Adobe reader, not-OK for TerraGO
Only OGC-BP: not-OK for Adobe reader, OK for TerraGo
Both ISO and OGC-BP: OK for Adobe reader, not OK for TerraGo toolbar

I made a bug report about the TerraGo toolbar a few years ago and I think that in later versions the bug was fixed so that it could handle also the "only ISO"  and "ISO + OGC-BP" cases. Unfortunately I don't have any computer with TerraGo toolbar available right now but I will try to make some tests later. An ideal case the BOTH option suits both for Adobe reader TerraGo toolbar so you could use that and reach the best interoperability and advanced features of TerraGo toolbar. Only users with ancient TerraGo Toolbar would be sad but they should upgrade in any case. But your findings suggest that this may not be the case.

Please tell us the exact versions of your Adobe Reader and TerraGo Toolbar  and the operating system you are running.

I know that TerraGo folks at least used to follow gdal-dev so perhaps we will get some true information soon.

-Jukka Rahkonen.-


Vankadara, Sunil wrote:

> Hi Jukka Rahkonen,

> Thanks for the provided information.
> Now I am able to see the lat/long values in the GeoLocator tool for the files created with ISO32000 option.
> I have installed the Terrago tool bar and created the file with OGC_BP option and noticed that neither 
> Adobe's GeoLocator tool nor Terrago Geolocator toll showing the coordinates.
> In fact the Terrago Geolocator tool is greyed out for this OGC_BP option file.  Actually I am confused where 
> this OGC_BP option used in creating the PDF documents? Or is it needs to used using the Terrago s/w only?

Regards
Sunil
-----Original Message-----
From: gdal-dev-bounces at lists.osgeo.org [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Jukka Rahkonen
Sent: 07 April 2015 01:49:PM
To: gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF Document

Vankadara, Sunil <sunil.vankadara <at> hexagongeospatial.com> writes:

> 
> 
> 
> Hi Team,
> ?
> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in 
> the
?below command. ?The below tif file?s Datum and Projection details are WGS84 /Geographic (lat/lon).
> ?
> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co COMPRESS=JPEG -co
>  PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'
> ?
> Looked at the created PDF file Metadata using QGIS tool and noticed 
> that
it is having the same datum and projection details as like below.
> ?
> Layer Spatial Reference System
> 
> +proj=longlat +datum=WGS84 +no_defs
> 
> Layer Extent (layer original source projection)
> -84.5046451524118538,34.1200924180016969 :
-84.5042907999925177,34.1204467704210259
> ?
> When I tried to use the Geospatial Location tool
(Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the empty lat/long values are displaying at the right bottom of the ?document.
> Am I missing anything in creating the Geospatial PDF document ? How to
confirm whether the CRS information is written into the PDF document or not?
> How GDAL PDF handles in case the given projection is not supported by 
> the
driver?

Hi,

Don't use the -co GEO_ENCODING=OGC_BP option alone if you want to show coordinates with standard Acrobat viewer without the TerraGo toolbar. Use the default which means ISO32000, or BOTH.

Confirm the result with gdalinfo "gdalinfo output.pdf". If source SRS is not recognized define it explicitly by using parameters -s_srs and -t_srs.
Alternatively you can just attach SRS to output with -a_srs.

-Jukka Rahkonen-
_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/gdal-dev

From even.rouault at spatialys.com  Wed Apr  8 01:06:38 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 8 Apr 2015 10:06:38 +0200
Subject: [gdal-dev] RFC 57: 64-bit bucket counts for histograms
In-Reply-To: <552467DC.40103@cubewerx.com>
References: <201504072133.43250.even.rouault@spatialys.com>
	<552467DC.40103@cubewerx.com>
Message-ID: <201504081006.39227.even.rouault@spatialys.com>

>  A similar problem exists with GDALRasterBand::GetRasterSampleOverview():
> it takes a 31-bit integer value for its 'nDesiredSamples' parameter.  I've
> run into some 100,000?100,000-pixel images for which the first two levels
> of overviews would contain more than 2-billion samples.

Hi Craig,

Good point. I've updated the RFC and proposed implementation accordingly.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sunil.vankadara at hexagongeospatial.com  Wed Apr  8 02:06:10 2015
From: sunil.vankadara at hexagongeospatial.com (Vankadara, Sunil)
Date: Wed, 8 Apr 2015 09:06:10 +0000
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial
	PDF	Document
In-Reply-To: <bacbac3f404b49f09226bbb16c458dfa@C119S212VM022.msvyvi.vaha.local>
References: <bacbac3f404b49f09226bbb16c458dfa@C119S212VM022.msvyvi.vaha.local>
Message-ID: <3ED2AF5FA67CF548BC5C06A608D7D40523D9DAB7@IN-MBX2.ingrnet.com>

Here are the details.



Adobe Reader: 11.0.10

TerraGo Toolbar version 6.6.2.3 January 19 2015

Operating System: Windows 7 Professional Service Pack 1.



Few modifications embedded in the below mail.



Regards

Sunil



-----Original Message-----
From: Rahkonen Jukka (MML) [mailto:jukka.rahkonen at maanmittauslaitos.fi]
Sent: 08 April 2015 12:44:PM
To: Vankadara, Sunil; gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF Document



Hi,



The OGC_BP option is actually  created by TerraGo and I am surprised that it does not work for you with the TerraGo Toolbar because that is the native way for adding georeferencing info into GeoPDF (tm) files. In some of my early tests I found problems with interoperability:



Only ISO: OK for Adobe reader, not-OK for TerraGO



Only OGC-BP: not-OK for Adobe reader, not OK for TerraGo toolBar



Both ISO and OGC-BP: OK for Adobe reader, not OK for TerraGo toolbar



I made a bug report about the TerraGo toolbar a few years ago and I think that in later versions the bug was fixed so that it could handle also the "only ISO"  and "ISO + OGC-BP" cases. Unfortunately I don't have any computer with TerraGo toolbar available right now but I will try to make some tests later. An ideal case the BOTH option suits both for Adobe reader TerraGo toolbar so you could use that and reach the best interoperability and advanced features of TerraGo toolbar. Only users with ancient TerraGo Toolbar would be sad but they should upgrade in any case. But your findings suggest that this may not be the case.



Please tell us the exact versions of your Adobe Reader and TerraGo Toolbar  and the operating system you are running.



I know that TerraGo folks at least used to follow gdal-dev so perhaps we will get some true information soon.



-Jukka Rahkonen.-





Vankadara, Sunil wrote:



> Hi Jukka Rahkonen,



> Thanks for the provided information.

> Now I am able to see the lat/long values in the GeoLocator tool for the files created with ISO32000 option.

> I have installed the Terrago tool bar and created the file with OGC_BP

> option and noticed that neither Adobe's GeoLocator tool nor Terrago Geolocator toll showing the coordinates.

> In fact the Terrago Geolocator tool is greyed out for this OGC_BP

> option file.  Actually I am confused where this OGC_BP option used in creating the PDF documents? Or is it needs to used using the Terrago s/w only?



Regards

Sunil

-----Original Message-----

From: gdal-dev-bounces at lists.osgeo.org<mailto:gdal-dev-bounces at lists.osgeo.org> [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Jukka Rahkonen

Sent: 07 April 2015 01:49:PM

To: gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>

Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF Document



Vankadara, Sunil <sunil.vankadara <at> hexagongeospatial.com> writes:



>

>

>

> Hi Team,

>

> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in

> the

 below command.  The below tif file?s Datum and Projection details are WGS84 /Geographic (lat/lon).

>

> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif

../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co COMPRESS=JPEG -co

>  PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'

>

> Looked at the created PDF file Metadata using QGIS tool and noticed

> that

it is having the same datum and projection details as like below.

>

> Layer Spatial Reference System

>

> +proj=longlat +datum=WGS84 +no_defs

>

> Layer Extent (layer original source projection)

> -84.5046451524118538,34.1200924180016969 :

-84.5042907999925177,34.1204467704210259

>

> When I tried to use the Geospatial Location tool

(Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the empty lat/long values are displaying at the right bottom of the  document.

> Am I missing anything in creating the Geospatial PDF document ? How to

confirm whether the CRS information is written into the PDF document or not?

> How GDAL PDF handles in case the given projection is not supported by

> the

driver?



Hi,



Don't use the -co GEO_ENCODING=OGC_BP option alone if you want to show coordinates with standard Acrobat viewer without the TerraGo toolbar. Use the default which means ISO32000, or BOTH.



Confirm the result with gdalinfo "gdalinfo output.pdf". If source SRS is not recognized define it explicitly by using parameters -s_srs and -t_srs.

Alternatively you can just attach SRS to output with -a_srs.



-Jukka Rahkonen-

_______________________________________________

gdal-dev mailing list

gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>

http://lists.osgeo.org/mailman/listinfo/gdal-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150408/c8a58dc8/attachment-0001.html>

From dmorissette at mapgears.com  Wed Apr  8 06:52:27 2015
From: dmorissette at mapgears.com (Daniel Morissette)
Date: Wed, 08 Apr 2015 09:52:27 -0400
Subject: [gdal-dev] RFC 57: 64-bit bucket counts for histograms
In-Reply-To: <201504072133.43250.even.rouault@spatialys.com>
References: <201504072133.43250.even.rouault@spatialys.com>
Message-ID: <5525329B.8060803@mapgears.com>

Hi Even,

No comment on the actual change which sounds fine to me.

However, could we add a "Version: ..." field to the header of RFCs to 
make it easier to track down the version to which a RFC applies? I saw 
that you indicate the version in the status field after a RFC has been 
implemented, but while it's in draft and during the discussion phase 
there is no indication of the target version.

In this specific case, I presume it is a V2.0 change since it breaks 
API/ABI compatibility, right? Same comment for the Date/Time RFC that 
was discussed earlier this week.

Thanks

Daniel

On 2015-04-07 3:33 PM, Even Rouault wrote:
> Hi,
>
> This is a call for discussion on "64-bit bucket counts for histograms" (last
> one for today ;-) and hopefully a no-brainer)
>
> https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count
>
> Summary :
>
> This RFC modifies the GDALRasterBand GetHistogram(), GetDefaultHistogram() and
> SetDefaultHistogram() methods to accept arrays of 64-bit integer instead of
> the current arrays of 32-bit integer for bucket counts. This will fix issues
> when operating on large rasters that have more than 2 billion pixels.
>
> Even
>


-- 
Daniel Morissette
T: +1 418-696-5056 #201
http://www.mapgears.com/
Provider of Professional MapServer Support since 2000

From even.rouault at spatialys.com  Wed Apr  8 07:05:41 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 8 Apr 2015 16:05:41 +0200
Subject: [gdal-dev] RFC 57: 64-bit bucket counts for histograms
In-Reply-To: <5525329B.8060803@mapgears.com>
References: <201504072133.43250.even.rouault@spatialys.com>
	<5525329B.8060803@mapgears.com>
Message-ID: <201504081605.41590.even.rouault@spatialys.com>

Daniel,

> No comment on the actual change which sounds fine to me.
> 
> However, could we add a "Version: ..." field to the header of RFCs to
> make it easier to track down the version to which a RFC applies? I saw
> that you indicate the version in the status field after a RFC has been
> implemented, but while it's in draft and during the discussion phase
> there is no indication of the target version.

Sure, added

> 
> In this specific case, I presume it is a V2.0 change since it breaks
> API/ABI compatibility, right? Same comment for the Date/Time RFC that
> was discussed earlier this week.

Yes, v2.0 target

Even

> 
> Thanks
> 
> Daniel
> 
> On 2015-04-07 3:33 PM, Even Rouault wrote:
> > Hi,
> > 
> > This is a call for discussion on "64-bit bucket counts for histograms"
> > (last one for today ;-) and hopefully a no-brainer)
> > 
> > https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count
> > 
> > Summary :
> > 
> > This RFC modifies the GDALRasterBand GetHistogram(),
> > GetDefaultHistogram() and SetDefaultHistogram() methods to accept arrays
> > of 64-bit integer instead of the current arrays of 32-bit integer for
> > bucket counts. This will fix issues when operating on large rasters that
> > have more than 2 billion pixels.
> > 
> > Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From dmorissette at mapgears.com  Wed Apr  8 07:10:30 2015
From: dmorissette at mapgears.com (Daniel Morissette)
Date: Wed, 08 Apr 2015 10:10:30 -0400
Subject: [gdal-dev] RFC 57: 64-bit bucket counts for histograms
In-Reply-To: <201504081605.41590.even.rouault@spatialys.com>
References: <201504072133.43250.even.rouault@spatialys.com>
	<5525329B.8060803@mapgears.com>
	<201504081605.41590.even.rouault@spatialys.com>
Message-ID: <552536D6.4090005@mapgears.com>

On 2015-04-08 10:05 AM, Even Rouault wrote:
> Daniel,
>
>> No comment on the actual change which sounds fine to me.
>>
>> However, could we add a "Version: ..." field to the header of RFCs to
>> make it easier to track down the version to which a RFC applies? I saw
>> that you indicate the version in the status field after a RFC has been
>> implemented, but while it's in draft and during the discussion phase
>> there is no indication of the target version.
>
> Sure, added
>

Thanks. That will help. FYI I added a missing [[BR]] in the header.


-- 
Daniel Morissette
T: +1 418-696-5056 #201
http://www.mapgears.com/
Provider of Professional MapServer Support since 2000

From gdemmy at gmail.com  Wed Apr  8 14:15:53 2015
From: gdemmy at gmail.com (George Demmy)
Date: Wed, 8 Apr 2015 17:15:53 -0400
Subject: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF
	Document
In-Reply-To: <3ED2AF5FA67CF548BC5C06A608D7D40523D9DAB7@IN-MBX2.ingrnet.com>
References: <bacbac3f404b49f09226bbb16c458dfa@C119S212VM022.msvyvi.vaha.local>
	<3ED2AF5FA67CF548BC5C06A608D7D40523D9DAB7@IN-MBX2.ingrnet.com>
Message-ID: <CA+7PDU0Sq6VipN21S-3a6NZj+MbFR1kGSzmmwr-TPUN2jc82bQ@mail.gmail.com>

Hi Sunil,

More recent versions of TerraGo Toolbar understand both ISO and OGC
georegistration encodings, but it's not likely that TerraGo Toolbar
will be useful in verifying whether something is georegistered
properly. As of Version 6, support of non-TerraGo PDFs was dropped for
reasons that I will not go into here. That is, encoding does not
determine if it works or not, but rather have access rights been
embedded into the file to turn on Toolbar. Acrobat and Reader should
support a pretty wide variety of standard GCS/PCSs encoded in either,
but relies on a 9.x era Esri pe.dll, so some of the newer Web Mercator
formulations, updated GCSs, and some regional coordinate systems might
not be recognized as well. FWIW, I recommend that without compelling
reason to do otherwise, to stick to ISO encodings because of good
support of WKT in GDAL and it's much easier to get right since the
registration points are given in the map GCS lon/lats, and you don't
have to worry with projected values for the georegistration metadata.
YMMV.

HTH,

George

On Wed, Apr 8, 2015 at 5:06 AM, Vankadara, Sunil
<sunil.vankadara at hexagongeospatial.com> wrote:
> Here are the details.
>
>
>
> Adobe Reader: 11.0.10
>
> TerraGo Toolbar version 6.6.2.3 January 19 2015
>
> Operating System: Windows 7 Professional Service Pack 1.
>
>
>
> Few modifications embedded in the below mail.
>
>
>
> Regards
>
> Sunil
>
>
>
> -----Original Message-----
> From: Rahkonen Jukka (MML) [mailto:jukka.rahkonen at maanmittauslaitos.fi]
> Sent: 08 April 2015 12:44:PM
> To: Vankadara, Sunil; gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF
> Document
>
>
>
> Hi,
>
>
>
> The OGC_BP option is actually  created by TerraGo and I am surprised that it
> does not work for you with the TerraGo Toolbar because that is the native
> way for adding georeferencing info into GeoPDF (tm) files. In some of my
> early tests I found problems with interoperability:
>
>
>
> Only ISO: OK for Adobe reader, not-OK for TerraGO
>
>
>
> Only OGC-BP: not-OK for Adobe reader, not OK for TerraGo toolBar
>
>
>
> Both ISO and OGC-BP: OK for Adobe reader, not OK for TerraGo toolbar
>
>
>
> I made a bug report about the TerraGo toolbar a few years ago and I think
> that in later versions the bug was fixed so that it could handle also the
> "only ISO"  and "ISO + OGC-BP" cases. Unfortunately I don't have any
> computer with TerraGo toolbar available right now but I will try to make
> some tests later. An ideal case the BOTH option suits both for Adobe reader
> TerraGo toolbar so you could use that and reach the best interoperability
> and advanced features of TerraGo toolbar. Only users with ancient TerraGo
> Toolbar would be sad but they should upgrade in any case. But your findings
> suggest that this may not be the case.
>
>
>
> Please tell us the exact versions of your Adobe Reader and TerraGo Toolbar
> and the operating system you are running.
>
>
>
> I know that TerraGo folks at least used to follow gdal-dev so perhaps we
> will get some true information soon.
>
>
>
> -Jukka Rahkonen.-
>
>
>
>
>
> Vankadara, Sunil wrote:
>
>
>
>> Hi Jukka Rahkonen,
>
>
>
>> Thanks for the provided information.
>
>> Now I am able to see the lat/long values in the GeoLocator tool for the
>> files created with ISO32000 option.
>
>> I have installed the Terrago tool bar and created the file with OGC_BP
>
>> option and noticed that neither Adobe's GeoLocator tool nor Terrago
>> Geolocator toll showing the coordinates.
>
>> In fact the Terrago Geolocator tool is greyed out for this OGC_BP
>
>> option file.  Actually I am confused where this OGC_BP option used in
>> creating the PDF documents? Or is it needs to used using the Terrago s/w
>> only?
>
>
>
> Regards
>
> Sunil
>
> -----Original Message-----
>
> From: gdal-dev-bounces at lists.osgeo.org
> [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Jukka Rahkonen
>
> Sent: 07 April 2015 01:49:PM
>
> To: gdal-dev at lists.osgeo.org
>
> Subject: Re: [gdal-dev] Relating to GeoLocation tool of Geospatial PDF
> Document
>
>
>
> Vankadara, Sunil <sunil.vankadara <at> hexagongeospatial.com> writes:
>
>
>
>>
>
>>
>
>>
>
>> Hi Team,
>
>>
>
>> I created a PDF file with OGC_BP as GEO_ENCODING option like shown in
>
>> the
>
>  below command.  The below tif file?s Datum and Projection details are WGS84
> /Geographic (lat/lon).
>
>>
>
>> ./gdal_translate.exe -of PDF ../../Data/input/sample256x256_1.tif
>
> ../../Data/output/sample256x256_1.pdf -co GEO_ENCODING=OGC_BP -co
> COMPRESS=JPEG -co
>
>>  PRODUCER="ERDAS IMAGINE" -co CREATION_DATE=D:20150407111345+02'00'
>
>>
>
>> Looked at the created PDF file Metadata using QGIS tool and noticed
>
>> that
>
> it is having the same datum and projection details as like below.
>
>>
>
>> Layer Spatial Reference System
>
>>
>
>> +proj=longlat +datum=WGS84 +no_defs
>
>>
>
>> Layer Extent (layer original source projection)
>
>> -84.5046451524118538,34.1200924180016969 :
>
> -84.5042907999925177,34.1204467704210259
>
>>
>
>> When I tried to use the Geospatial Location tool
>
> (Edit->Analysis->Geospatial Location Tool ) in the Adobe PDF Reader then the
> empty lat/long values are displaying at the right bottom of the  document.
>
>> Am I missing anything in creating the Geospatial PDF document ? How to
>
> confirm whether the CRS information is written into the PDF document or not?
>
>> How GDAL PDF handles in case the given projection is not supported by
>
>> the
>
> driver?
>
>
>
> Hi,
>
>
>
> Don't use the -co GEO_ENCODING=OGC_BP option alone if you want to show
> coordinates with standard Acrobat viewer without the TerraGo toolbar. Use
> the default which means ISO32000, or BOTH.
>
>
>
> Confirm the result with gdalinfo "gdalinfo output.pdf". If source SRS is not
> recognized define it explicitly by using parameters -s_srs and -t_srs.
>
> Alternatively you can just attach SRS to output with -a_srs.
>
>
>
> -Jukka Rahkonen-
>
> _______________________________________________
>
> gdal-dev mailing list
>
> gdal-dev at lists.osgeo.org
>
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

From casperhui668 at gmail.com  Wed Apr  8 15:46:00 2015
From: casperhui668 at gmail.com (Arghesti)
Date: Wed, 8 Apr 2015 15:46:00 -0700 (PDT)
Subject: [gdal-dev] gdalwarp 'singular matrix' error on AVHRR L1B,
 but not when executed in GRASS console
Message-ID: <1428533160241-5200513.post@n6.nabble.com>

Hi GDAL-Dev,

For my research, I need to use gdalwarp to rectify AVHRR L1B HRPT imagery
(Band 4). I am using the following command to do so, via bash script on
Linux:

/gdalwarp -tps inputfile.SOMEEXT outputfile.tif/

However, I get the following error messages:

/error: inv(): matrix appears to be singular

matrixInvert(): error occured.
  There is a problem to invert the interpolation matrix

error: inv(): matrix appears to be singular

matrixInvert(): error occured.
  There is a problem to invert the interpolation matrix.
Creating output file that is -2147483648P x 11177L.
ERROR 1: Attempt to create -2147483648x11177 dataset is illegal,sizes must
be larger than zero.
/

Strangely, the same command works nicely when I execute it under a GRASS
(after initializing the GRASS GUI, selecting the database directory,
location and mapset, and then) using the console on Windows 7. What am I
missing here?

Very much appreciate your help on this issue, thanks in advance.



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdalwarp-singular-matrix-error-on-AVHRR-L1B-but-not-when-executed-in-GRASS-console-tp5200513.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From jukka.rahkonen at maanmittauslaitos.fi  Thu Apr  9 08:31:17 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Thu, 9 Apr 2015 15:31:17 +0000 (UTC)
Subject: [gdal-dev] About r28880
Message-ID: <loom.20150409T172848-277@post.gmane.org>

Hi,

http://trac.osgeo.org/gdal/changeset/28880

Summary:
OpenFileGDB: add OPENFILEGDB_REPORTED_DELETED_FEATURES config option to list
deleted features when operating on a .gdbtable only (mostly for
debug/inspection)

Would probably be better to name it as

"OPENFILEGDB_REPORT_DELETED_FEATURES"

-Jukka Rahkonen-


From even.rouault at spatialys.com  Thu Apr  9 08:34:27 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 9 Apr 2015 17:34:27 +0200
Subject: [gdal-dev] About r28880
In-Reply-To: <loom.20150409T172848-277@post.gmane.org>
References: <loom.20150409T172848-277@post.gmane.org>
Message-ID: <201504091734.27255.even.rouault@spatialys.com>

Le jeudi 09 avril 2015 17:31:17, Jukka Rahkonen a ?crit :
> Hi,
> 
> http://trac.osgeo.org/gdal/changeset/28880
> 
> Summary:
> OpenFileGDB: add OPENFILEGDB_REPORTED_DELETED_FEATURES config option to
> list deleted features when operating on a .gdbtable only (mostly for
> debug/inspection)
> 
> Would probably be better to name it as
> 
> "OPENFILEGDB_REPORT_DELETED_FEATURES"

Oh sure, thanks for noticing the typo. Fixed.

> 
> -Jukka Rahkonen-
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jukka.rahkonen at maanmittauslaitos.fi  Thu Apr  9 08:59:23 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Thu, 9 Apr 2015 15:59:23 +0000 (UTC)
Subject: [gdal-dev]
	=?utf-8?q?Relating_to_GeoLocation_tool_of_Geospatial_P?=
	=?utf-8?q?DF=09Document?=
References: <bacbac3f404b49f09226bbb16c458dfa@C119S212VM022.msvyvi.vaha.local>
	<3ED2AF5FA67CF548BC5C06A608D7D40523D9DAB7@IN-MBX2.ingrnet.com>
	<CA+7PDU0Sq6VipN21S-3a6NZj+MbFR1kGSzmmwr-TPUN2jc82bQ@mail.gmail.com>
Message-ID: <loom.20150409T173658-307@post.gmane.org>

George Demmy <gdemmy <at> gmail.com> writes:

> 
> Hi Sunil,
> 
> More recent versions of TerraGo Toolbar understand both ISO and OGC
> georegistration encodings, but it's not likely that TerraGo Toolbar
> will be useful in verifying whether something is georegistered
> properly. As of Version 6, support of non-TerraGo PDFs was dropped for
> reasons that I will not go into here. That is, encoding does not
> determine if it works or not, but rather have access rights been
> embedded into the file to turn on Toolbar. Acrobat and Reader should
> support a pretty wide variety of standard GCS/PCSs encoded in either,
> but relies on a 9.x era Esri pe.dll, so some of the newer Web Mercator
> formulations, updated GCSs, and some regional coordinate systems might
> not be recognized as well. FWIW, I recommend that without compelling
> reason to do otherwise, to stick to ISO encodings because of good
> support of WKT in GDAL and it's much easier to get right since the
> registration points are given in the map GCS lon/lats, and you don't
> have to worry with projected values for the georegistration metadata.
> YMMV.
> 
> HTH,
> 
> George

Hi,

I downloaded and installed today the TerraGo toolbar from
http://www.terragotech.com/software/TerraGo_Toolbar.exe. I installed it on
top of Adobe Reader XI v. 11.0.10.32. The TerraGo plugin does not seem to
tell me anywhere what version it is.

It seems that all the tools in the toolbar stay inactive when I open any
geospatial PDF file which I had created with GDAL v. 2.0-dev. Only tool that
worked for me was the GeoPDF File Properties tool which did find the
georeferencing metadata from the ISO32000 version but not from the OGC_BP
version. Anyway, the toolbar seems to be of no use for those who write
geospatial PDF files with GDAL. I can also recommend to use the ISO 32000
encoding which makes the coordinates to appear in standard Adobe Reader.


-Jukka Rahkonen-


From even.rouault at spatialys.com  Thu Apr  9 11:39:34 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 9 Apr 2015 20:39:34 +0200
Subject: [gdal-dev] MotionS: adopt RFC 56 and RFC 57
Message-ID: <201504092039.34931.even.rouault@spatialys.com>

Hi,

Motion 1 : I move to adopt RFC 56: OFTTime/OFTDateTime millisecond accuracy

https://trac.osgeo.org/gdal/wiki/rfc56_millisecond_precision

Starting with my +1

-------------------------

Motion 2:  I move to adopt RFC 57: 64-bit bucket counts for histograms

https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count

Starting with my +1

Best regards,

Even
-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From dmorissette at mapgears.com  Thu Apr  9 11:40:52 2015
From: dmorissette at mapgears.com (Daniel Morissette)
Date: Thu, 09 Apr 2015 14:40:52 -0400
Subject: [gdal-dev] MotionS: adopt RFC 56 and RFC 57
In-Reply-To: <201504092039.34931.even.rouault@spatialys.com>
References: <201504092039.34931.even.rouault@spatialys.com>
Message-ID: <5526C7B4.5070501@mapgears.com>

+1 for both RFC 56 and RFC 57.

Daniel

On 2015-04-09 2:39 PM, Even Rouault wrote:
> Hi,
>
> Motion 1 : I move to adopt RFC 56: OFTTime/OFTDateTime millisecond accuracy
>
> https://trac.osgeo.org/gdal/wiki/rfc56_millisecond_precision
>
> Starting with my +1
>
> -------------------------
>
> Motion 2:  I move to adopt RFC 57: 64-bit bucket counts for histograms
>
> https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count
>
> Starting with my +1
>
> Best regards,
>
> Even
>


-- 
Daniel Morissette
T: +1 418-696-5056 #201
http://www.mapgears.com/
Provider of Professional MapServer Support since 2000

From jukka.rahkonen at maanmittauslaitos.fi  Thu Apr  9 14:20:57 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Thu, 9 Apr 2015 21:20:57 +0000 (UTC)
Subject: [gdal-dev] MotionS: adopt RFC 56 and RFC 57
References: <201504092039.34931.even.rouault@spatialys.com>
Message-ID: <loom.20150409T231621-284@post.gmane.org>

Even Rouault <even.rouault <at> spatialys.com> writes:

> 
> Hi,
> 
> Motion 1 : I move to adopt RFC 56: OFTTime/OFTDateTime millisecond accuracy
> 
> https://trac.osgeo.org/gdal/wiki/rfc56_millisecond_precision
> 
> Starting with my +1

+1

BTW. OpenJUMP JML format belongs to those which support milliseconds at
least in current development version. It is using the ISO 8601 format:

 <property name="date">2015-01-14T00:00:00.000+0200</property>


> -------------------------
> 
> Motion 2:  I move to adopt RFC 57: 64-bit bucket counts for histograms
> 
> https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count
> 
> Starting with my +1

+1

-Jukka Rahkonen-


From even.rouault at spatialys.com  Thu Apr  9 14:25:56 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 9 Apr 2015 23:25:56 +0200
Subject: [gdal-dev] MotionS: adopt RFC 56 and RFC 57
In-Reply-To: <loom.20150409T231621-284@post.gmane.org>
References: <201504092039.34931.even.rouault@spatialys.com>
	<loom.20150409T231621-284@post.gmane.org>
Message-ID: <201504092325.56465.even.rouault@spatialys.com>

Le jeudi 09 avril 2015 23:20:57, Jukka Rahkonen a ?crit :
> Even Rouault <even.rouault <at> spatialys.com> writes:
> > Hi,
> > 
> > Motion 1 : I move to adopt RFC 56: OFTTime/OFTDateTime millisecond
> > accuracy
> > 
> > https://trac.osgeo.org/gdal/wiki/rfc56_millisecond_precision
> > 
> > Starting with my +1
> 
> +1
> 
> BTW. OpenJUMP JML format belongs to those which support milliseconds at
> least in current development version. It is using the ISO 8601 format:
> 
>  <property name="date">2015-01-14T00:00:00.000+0200</property>

Yes, I've updated the driver. Although in the OpenJUMP version I tested 
(OpenJUMP-1.7.1-r4004), it is imported but milliseconds are not displayed.

> 
> > -------------------------
> > 
> > Motion 2:  I move to adopt RFC 57: 64-bit bucket counts for histograms
> > 
> > https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count
> > 
> > Starting with my +1
> 
> +1
> 
> -Jukka Rahkonen-
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From heiko.thiel at hpi.de  Fri Apr 10 08:37:38 2015
From: heiko.thiel at hpi.de (Heiko Thiel)
Date: Fri, 10 Apr 2015 17:37:38 +0200
Subject: [gdal-dev] Writing interior rings is not working
Message-ID: <5527EE42.4060209@hpi.de>

Hello,

I currently trying to save Polygons in a ShapeFile with Gdal 1.11.2. It 
works so far - except interior rings are not stored. Anyone any idea?

My Code:

#include <ogrsf_frmts.h>
#include <iostream>
#include <vector>
#include <cassert>

int main(int argc, char *argv[])
{
     OGRRegisterAll();

     OGRSFDriver *poDriver = 
OGRSFDriverRegistrar::GetRegistrar()->GetDriverByName("ESRI Shapefile");
     if (poDriver == nullptr)
     {
         std::cout << "ESRI Shapefile driver not available." << std::endl;
         return 0;
     }

     OGRDataSource *poDS = poDriver->CreateDataSource("gdaltest.shp", 
nullptr);
     if (poDS == nullptr)
     {
         std::cout << "Creation of output file failed." << std::endl;
         return 0;
     }

     OGRLayer *poLayer = poDS->CreateLayer("polygons", nullptr, 
wkbPolygon, nullptr);
     if (poLayer == nullptr)
     {
         std::cout << "Layer creation failed." << std::endl;
         OGRDataSource::DestroyDataSource(poDS);
         return 0;
     }

     //write 1 polygon with with 1 exterior and 2 exterior rings

     OGRFeature *poFeature = 
OGRFeature::CreateFeature(poLayer->GetLayerDefn());

     OGRPolygon polygon;

     auto outerRing = std::vector<std::pair<int, int>>({ { 0, 0 }, { 0, 
5 }, { 5, 5 }, { 5, 0 } });

     OGRLinearRing ring;
     for (auto &p : outerRing)
     {
         OGRPoint pt;

         pt.setX(p.first);
         pt.setY(p.second);
         ring.addPoint(&pt);
     }
     polygon.addRing(&ring);

     auto innerRingBase = std::vector<std::pair<int, int>>({ { 1, 1 }, { 
1, 2 }, { 2, 2 }, { 2, 1 } });
     //auto innerRingBase = std::vector<std::pair<int, int>>({ { 2, 1 }, 
{ 2, 2 }, { 1, 2 }, { 1, 1 } }); //reverse order don't work too
     const int innerRingOffsetX = 2;

     for (int i = 0; i < 2; i++)
     {
         OGRLinearRing innerRing;
         for (auto &p : innerRingBase)
         {
             OGRPoint pt;

             pt.setX(p.first + i*innerRingOffsetX);
             pt.setY(p.second);
             ring.addPoint(&pt);
         }

         polygon.addRing(&innerRing);
     }
     assert(polygon.getNumInteriorRings() == 2); //this don't throw, so 
gdal detected interior rings

     polygon.closeRings();
     poFeature->SetGeometry(&polygon);

     if (poLayer->CreateFeature(poFeature) != OGRERR_NONE)
     {
         std::cout << "Failed to create feature in shapefile." << std::endl;
     }

     OGRFeature::DestroyFeature(poFeature);

     OGRDataSource::DestroyDataSource(poDS);

     return 0;
}

Regards

From siebe at hydroconsult.nl  Fri Apr 10 08:18:04 2015
From: siebe at hydroconsult.nl (Siebe Bosch)
Date: Fri, 10 Apr 2015 17:18:04 +0200
Subject: [gdal-dev] gdal_translate truncates nodata_value < -4.21358e-09
Message-ID: <5527E9AC.2090905@hydroconsult.nl>

Dear list,

I am trying to convert one band from a GRIB2-file into an ASCII raster, 
using gdal_translate.
Upon inspection (opening the original raster using the MapWinGis 
ActiveX-component) and requesting the nodata_value, I get this:

? mygrid.Header.NodataValue
-3.40282346638529E+38 {Double}
     Double: -3.40282346638529E+38 {Double}

So far, so good. Now l tried to convert to ASCII using gdal_translate, 
with the arguments "-of AAIGrid -b 13" (to ASC, band #13)
Much to my surprise the nodata-value (inside the grid) has changed in 
-4.2135788191899337e-009. A NODATA_value in the header has not been set 
at all!

So I tried converting to an ERDAS IMG file. Arguments: "-of HFA -b 13"
Inspecting the results in QGIS I see in the metadata that the 
"nodata-value has not been set". The grid itself however contains data 
of the Float type, and the cells that should have nodata-values have now 
values of -4.21358e-09

My conclusion:

GDAL_Translate does not support numbers smaller than -4.21358e-09. Am I 
right?

The problem however is that I do need the nodata-cells to be recognized 
correctly. Is there any tool that can help me to correct this? E.g. can 
I change the nodata-value of the original (multi-band) grid on forehand? 
Or are there additional arguments for gdal_translate that allow values 
up to the original nodata_value?

Many thanks,
Siebe











-- 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/085b6cd4/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature_60pct.gif
Type: image/gif
Size: 30165 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/085b6cd4/attachment-0001.gif>

From Dominik.Schneider at Colorado.EDU  Fri Apr 10 08:55:22 2015
From: Dominik.Schneider at Colorado.EDU (Dominik Schneider)
Date: Fri, 10 Apr 2015 09:55:22 -0600
Subject: [gdal-dev] gdal_translate truncates nodata_value < -4.21358e-09
In-Reply-To: <5527E9AC.2090905@hydroconsult.nl>
References: <5527E9AC.2090905@hydroconsult.nl>
Message-ID: <CAHYDKLYDqdRnJkDzmpAWp2ti2+uapbeeouB8gnfMkPrR8RSd8Q@mail.gmail.com>

Hi Siebe,
gdal_translate has the argument -a_nodata but according to the help it
won't convert nodata values, only defines them in the new file.
http://www.gdal.org/gdal_translate.html
I think you can use gdalwarp to assign the nodata pixels a distinct value
(e.g. -99) in the new file though.
http://www.gdal.org/gdalwarp.html

Someone else might know otherwise though.
ds


On Fri, Apr 10, 2015 at 9:18 AM, Siebe Bosch <siebe at hydroconsult.nl> wrote:

>  Dear list,
>
> I am trying to convert one band from a GRIB2-file into an ASCII raster,
> using gdal_translate.
> Upon inspection (opening the original raster using the MapWinGis
> ActiveX-component) and requesting the nodata_value, I get this:
>
> ? mygrid.Header.NodataValue
> -3.40282346638529E+38 {Double}
>     Double: -3.40282346638529E+38 {Double}
>
> So far, so good. Now l tried to convert to ASCII using gdal_translate,
> with the arguments "-of AAIGrid -b 13" (to ASC, band #13)
> Much to my surprise the nodata-value (inside the grid) has changed in
> -4.2135788191899337e-009. A NODATA_value in the header has not been set at
> all!
>
> So I tried converting to an ERDAS IMG file. Arguments: "-of HFA -b 13"
> Inspecting the results in QGIS I see in the metadata that the
> "nodata-value has not been set". The grid itself however contains data of
> the Float type, and the cells that should have nodata-values have now
> values of -4.21358e-09
>
> My conclusion:
>
> GDAL_Translate does not support numbers smaller than -4.21358e-09. Am I
> right?
>
> The problem however is that I do need the nodata-cells to be recognized
> correctly. Is there any tool that can help me to correct this? E.g. can I
> change the nodata-value of the original (multi-band) grid on forehand? Or
> are there additional arguments for gdal_translate that allow values up to
> the original nodata_value?
>
> Many thanks,
> Siebe
>
>
>
>
>
>
>
>
>
>
>
> --
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/ce979782/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature_60pct.gif
Type: image/gif
Size: 30165 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/ce979782/attachment-0001.gif>

From even.rouault at spatialys.com  Fri Apr 10 09:23:18 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Apr 2015 18:23:18 +0200
Subject: [gdal-dev] Writing interior rings is not working
In-Reply-To: <5527EE42.4060209@hpi.de>
References: <5527EE42.4060209@hpi.de>
Message-ID: <201504101823.18853.even.rouault@spatialys.com>

Le vendredi 10 avril 2015 17:37:38, Heiko Thiel a ?crit :
> Hello,
> 
> I currently trying to save Polygons in a ShapeFile with Gdal 1.11.2. It
> works so far - except interior rings are not stored. Anyone any idea?
> 
> My Code:
> 
> #include <ogrsf_frmts.h>
> #include <iostream>
> #include <vector>
> #include <cassert>
> 
> int main(int argc, char *argv[])
> {
>      OGRRegisterAll();
> 
>      OGRSFDriver *poDriver =
> OGRSFDriverRegistrar::GetRegistrar()->GetDriverByName("ESRI Shapefile");
>      if (poDriver == nullptr)
>      {
>          std::cout << "ESRI Shapefile driver not available." << std::endl;
>          return 0;
>      }
> 
>      OGRDataSource *poDS = poDriver->CreateDataSource("gdaltest.shp",
> nullptr);
>      if (poDS == nullptr)
>      {
>          std::cout << "Creation of output file failed." << std::endl;
>          return 0;
>      }
> 
>      OGRLayer *poLayer = poDS->CreateLayer("polygons", nullptr,
> wkbPolygon, nullptr);
>      if (poLayer == nullptr)
>      {
>          std::cout << "Layer creation failed." << std::endl;
>          OGRDataSource::DestroyDataSource(poDS);
>          return 0;
>      }
> 
>      //write 1 polygon with with 1 exterior and 2 exterior rings
> 
>      OGRFeature *poFeature =
> OGRFeature::CreateFeature(poLayer->GetLayerDefn());
> 
>      OGRPolygon polygon;
> 
>      auto outerRing = std::vector<std::pair<int, int>>({ { 0, 0 }, { 0,
> 5 }, { 5, 5 }, { 5, 0 } });
> 
>      OGRLinearRing ring;
>      for (auto &p : outerRing)
>      {
>          OGRPoint pt;
> 
>          pt.setX(p.first);
>          pt.setY(p.second);
>          ring.addPoint(&pt);
>      }
>      polygon.addRing(&ring);
> 
>      auto innerRingBase = std::vector<std::pair<int, int>>({ { 1, 1 }, {
> 1, 2 }, { 2, 2 }, { 2, 1 } });
>      //auto innerRingBase = std::vector<std::pair<int, int>>({ { 2, 1 },
> { 2, 2 }, { 1, 2 }, { 1, 1 } }); //reverse order don't work too
>      const int innerRingOffsetX = 2;
> 
>      for (int i = 0; i < 2; i++)
>      {
>          OGRLinearRing innerRing;
>          for (auto &p : innerRingBase)
>          {
>              OGRPoint pt;
> 
>              pt.setX(p.first + i*innerRingOffsetX);
>              pt.setY(p.second);
>              ring.addPoint(&pt);

==> Should be innerRing.addPoint(&pt) (took me sometime to realize that...)

>          }
> 
>          polygon.addRing(&innerRing);
>      }
>      assert(polygon.getNumInteriorRings() == 2); //this don't throw, so
> gdal detected interior rings
> 
>      polygon.closeRings();
>      poFeature->SetGeometry(&polygon);
> 
>      if (poLayer->CreateFeature(poFeature) != OGRERR_NONE)
>      {
>          std::cout << "Failed to create feature in shapefile." <<
> std::endl; }
> 
>      OGRFeature::DestroyFeature(poFeature);
> 
>      OGRDataSource::DestroyDataSource(poDS);
> 
>      return 0;
> }
> 
> Regards
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Apr 10 09:28:04 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Apr 2015 18:28:04 +0200
Subject: [gdal-dev] gdal_translate truncates nodata_value < -4.21358e-09
In-Reply-To: <5527E9AC.2090905@hydroconsult.nl>
References: <5527E9AC.2090905@hydroconsult.nl>
Message-ID: <201504101828.04364.even.rouault@spatialys.com>

Le vendredi 10 avril 2015 17:18:04, Siebe Bosch a ?crit :
> Dear list,
> 
> I am trying to convert one band from a GRIB2-file into an ASCII raster,
> using gdal_translate.
> Upon inspection (opening the original raster using the MapWinGis
> ActiveX-component) and requesting the nodata_value, I get this:
> 
> ? mygrid.Header.NodataValue
> -3.40282346638529E+38 {Double}
>      Double: -3.40282346638529E+38 {Double}
> 
> So far, so good. Now l tried to convert to ASCII using gdal_translate,
> with the arguments "-of AAIGrid -b 13" (to ASC, band #13)
> Much to my surprise the nodata-value (inside the grid) has changed in
> -4.2135788191899337e-009. A NODATA_value in the header has not been set
> at all!

Are you using GDAL 1.11 or above ? It should output values with "%.20g" 
formatting by default. See end of http://trac.osgeo.org/gdal/ticket/3732

> 
> So I tried converting to an ERDAS IMG file. Arguments: "-of HFA -b 13"
> Inspecting the results in QGIS I see in the metadata that the
> "nodata-value has not been set". The grid itself however contains data
> of the Float type, and the cells that should have nodata-values have now
> values of -4.21358e-09
> 
> My conclusion:
> 
> GDAL_Translate does not support numbers smaller than -4.21358e-09. Am I
> right?
> 
> The problem however is that I do need the nodata-cells to be recognized
> correctly. Is there any tool that can help me to correct this? E.g. can
> I change the nodata-value of the original (multi-band) grid on forehand?
> Or are there additional arguments for gdal_translate that allow values
> up to the original nodata_value?
> 
> Many thanks,
> Siebe

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From james.c.tilton at nasa.gov  Fri Apr 10 10:54:35 2015
From: james.c.tilton at nasa.gov (Tilton, James C. (GSFC-6063))
Date: Fri, 10 Apr 2015 17:54:35 +0000
Subject: [gdal-dev] Newbie Question
Message-ID: <08985B5E1F05CB4799348219BE2A5C461CBC90@NDMSMBX404.ndc.nasa.gov>

Dear list members,

I have successfully used GDAL for many years for raster data.
I now would like to get into using it for vector data.

I thought a good starting point would be the OGR API Tutorial available at:

http://www.gdal.org/ogr_apitut.html

Unfortunately, I can't even compile the example code. For example, my compiler cannot
find GDALOpenEx and GDAL_OF_VECTOR.

I thought, perhaps, the problem was that I had an older version of GDAL installed.
But building and installing the latest version available from http://trac.osgeo.org/gdal/wiki/DownloadSource
(version 1.11.2) did not solve the problem.

What am I missing?

James C. Tilton
________________________________
Dr. James C. Tilton                                               Voice:   301-286-9510
NASA Goddard Space Flight Center                   FAX:     301-286-1776
Mail Code 606.3                                                    E-Mail:  James.C.Tilton at nasa.gov<mailto:James.C.Tilton at nasa.gov>
(Computational & Information Sciences and Technology Office)
Greenbelt, MD 20771
URLs: http://science.gsfc.nasa.gov/sed/index.cfm?fuseAction=home.main&&navOrgCode=606
and . http://geography.wr.usgs.gov/science/croplands/index.html

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/22fc2a00/attachment.html>

From bishop.dev at gmail.com  Fri Apr 10 11:50:06 2015
From: bishop.dev at gmail.com (Dmitriy Baryshnikov)
Date: Fri, 10 Apr 2015 21:50:06 +0300
Subject: [gdal-dev] Newbie Question
In-Reply-To: <08985B5E1F05CB4799348219BE2A5C461CBC90@NDMSMBX404.ndc.nasa.gov>
References: <08985B5E1F05CB4799348219BE2A5C461CBC90@NDMSMBX404.ndc.nasa.gov>
Message-ID: <55281B5E.3010607@gmail.com>

Hi,

use this tutorial: http://gdal.org/1.11/ogr/ogr_apitut.html
The link you provided for GDAL v2, which is not release yet.

Best regards,
     Dmitry

10.04.2015 20:54, Tilton, James C. (GSFC-6063) ?????:
>
> Dear list members,
>
> I have successfully used GDAL for many years for raster data.
>
> I now would like to get into using it for vector data.
>
> I thought a good starting point would be the OGR API Tutorial 
> available at:
>
> http://www.gdal.org/ogr_apitut.html
>
> Unfortunately, I can?t even compile the example code. For example, my 
> compiler cannot
> find GDALOpenEx and GDAL_OF_VECTOR.
>
> I thought, perhaps, the problem was that I had an older version of 
> GDAL installed.
>
> But building and installing the latest version available from 
> http://trac.osgeo.org/gdal/wiki/DownloadSource
> (version 1.11.2) did not solve the problem.
>
> What am I missing?
>
> James C. Tilton
>
> ------------------------------------------------------------------------
>
> Dr. James C. Tilton Voice:   301-286-9510
>
> NASA Goddard Space Flight CenterFAX:     301-286-1776
>
> Mail Code 606.3 E-Mail: James.C.Tilton at nasa.gov 
> <mailto:James.C.Tilton at nasa.gov>
>
> (Computational & Information Sciences and Technology Office)
>
> Greenbelt, MD 20771
>
> URLs: 
> http://science.gsfc.nasa.gov/sed/index.cfm?fuseAction=home.main&&navOrgCode=606 
>
>
> and . http://geography.wr.usgs.gov/science/croplands/index.html
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/cd62cd10/attachment.html>

From lucena_ivan at hotmail.com  Fri Apr 10 12:56:30 2015
From: lucena_ivan at hotmail.com (Ivan Lucena)
Date: Fri, 10 Apr 2015 15:56:30 -0400
Subject: [gdal-dev] baseline tiff and rpb file
Message-ID: <BLU173-W20D9EAD7244290ABB067590FA0@phx.gbl>

Hi there,

The documentation says:

"GDAL can read and write the RPCCoefficientTag as described in the 
RPCs in GeoTIFF proposed extension. The tag is written only for
files created with the default profile GDALGeoTIFF. For other profiles, a .RPB file
is created. In GDAL data model, the RPC coefficients are stored into the RPC metadata domain.
For more details, see the RPC Georeferencing RFC.
If .RPB or _RPC.TXT files are found, they will be used to read the RPCs, even if the RPCCoefficientTag tag is set." [http://www.gdal.org/frmt_gtiff.html]

But there is no way to export the RPC metadata into the .tif.aux.xml file, like with other drivers.

I tried to turn off the create-option RPB but that doesn't work but It creates the .RPB file anyway.

$ gdal_translate -of gtiff <source dataset> output.tif -co profile=beseline -co RPB=no
$ ls
output.tif
output.RPB

That woks fine with PNG/JPEG/BMP

$ gdal_translate -of png <source dataset> output.png
$ ls
output.png
output.png.aux.xml

Is that how it suppose to be or is it a bug? I mean, by entering -co RPB=no GTIFF should create a  .aux.xml like other drivers do. Right?

Regards,

Ivan

 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/b263a22d/attachment.html>

From siebe at hydroconsult.nl  Fri Apr 10 13:17:21 2015
From: siebe at hydroconsult.nl (Siebe Bosch)
Date: Fri, 10 Apr 2015 22:17:21 +0200
Subject: [gdal-dev]  gdal_translate truncates nodata_value < -4.21358e-09
In-Reply-To: <201504101828.04364.even.rouault@spatialys.com>
References: <201504101828.04364.even.rouault@spatialys.com>
Message-ID: <55282FD1.7030603@hydroconsult.nl>


Thanks Even,

I started with the implementation of GDAL in MapWinGIS, but I also tried 
it with my stand-alone installation of GDAL
I'm using the precompiled windows-version, 32bit from 18 jan 2015 bit by 
Tamas: release-1800-gdal-1-11-1-mapserver-6-4-1 
<http://www.gisinternals.com/query.html?content=filelist&file=release-1800-gdal-1-11-1-mapserver-6-4-1.zip>
However still I get an ascii grid with xxxE9 in nodata-cells.

If I look in my GDAL\bin directory I see a gdal111.dll there, so it must 
be the correct version I'm using.

for the record: this is my batchfile's contents:
setx PATH "C:\GDAL\bin"
"c:\GDAL\bin\gdal\apps\gdal_translate.exe" -of AAIGrid -b 13 
C:\Temp\H11_V7_NED_SINGLE_LEVEL_2011013018_000_GB c:\temp\tempgrid.asc

So version is ok, path is ok.
Is it possible that all DLL's have been updated in this package, but 
that the stand-alone tools are outdated?

Thanks,
Siebe









-------- Forwarded Message --------
Subject: 	Re: [gdal-dev] gdal_translate truncates nodata_value < 
-4.21358e-09
Date: 	Fri, 10 Apr 2015 18:28:04 +0200
From: 	Even Rouault <even.rouault at spatialys.com>
To: 	gdal-dev at lists.osgeo.org
CC: 	Siebe Bosch <siebe at hydroconsult.nl>



Le vendredi 10 avril 2015 17:18:04, Siebe Bosch a ?crit :
> Dear list,
>
> I am trying to convert one band from a GRIB2-file into an ASCII raster,
> using gdal_translate.
> Upon inspection (opening the original raster using the MapWinGis
> ActiveX-component) and requesting the nodata_value, I get this:
>
> ? mygrid.Header.NodataValue
> -3.40282346638529E+38 {Double}
>      Double: -3.40282346638529E+38 {Double}
>
> So far, so good. Now l tried to convert to ASCII using gdal_translate,
> with the arguments "-of AAIGrid -b 13" (to ASC, band #13)
> Much to my surprise the nodata-value (inside the grid) has changed in
> -4.2135788191899337e-009. A NODATA_value in the header has not been set
> at all!

Are you using GDAL 1.11 or above ? It should output values with "%.20g"
formatting by default. See end of http://trac.osgeo.org/gdal/ticket/3732

>
> So I tried converting to an ERDAS IMG file. Arguments: "-of HFA -b 13"
> Inspecting the results in QGIS I see in the metadata that the
> "nodata-value has not been set". The grid itself however contains data
> of the Float type, and the cells that should have nodata-values have now
> values of -4.21358e-09
>
> My conclusion:
>
> GDAL_Translate does not support numbers smaller than -4.21358e-09. Am I
> right?
>
> The problem however is that I do need the nodata-cells to be recognized
> correctly. Is there any tool that can help me to correct this? E.g. can
> I change the nodata-value of the original (multi-band) grid on forehand?
> Or are there additional arguments for gdal_translate that allow values
> up to the original nodata_value?
>
> Many thanks,
> Siebe

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150410/f41a14fe/attachment.html>

From even.rouault at spatialys.com  Fri Apr 10 13:37:43 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Apr 2015 22:37:43 +0200
Subject: [gdal-dev] baseline tiff and rpb file
In-Reply-To: <BLU173-W20D9EAD7244290ABB067590FA0@phx.gbl>
References: <BLU173-W20D9EAD7244290ABB067590FA0@phx.gbl>
Message-ID: <201504102237.43680.even.rouault@spatialys.com>

Le vendredi 10 avril 2015 21:56:30, Ivan Lucena a ?crit :
> Hi there,
> 
> The documentation says:
> 
> "GDAL can read and write the RPCCoefficientTag as described in the
> RPCs in GeoTIFF proposed extension. The tag is written only for
> files created with the default profile GDALGeoTIFF. For other profiles, a
> .RPB file is created. In GDAL data model, the RPC coefficients are stored
> into the RPC metadata domain. For more details, see the RPC Georeferencing
> RFC.
> If .RPB or _RPC.TXT files are found, they will be used to read the RPCs,
> even if the RPCCoefficientTag tag is set."
> [http://www.gdal.org/frmt_gtiff.html]
> 
> But there is no way to export the RPC metadata into the .tif.aux.xml file,
> like with other drivers.
> 
> I tried to turn off the create-option RPB but that doesn't work but It
> creates the .RPB file anyway.
> 
> $ gdal_translate -of gtiff <source dataset> output.tif -co profile=beseline
> -co RPB=no $ ls
> output.tif
> output.RPB
> 
> That woks fine with PNG/JPEG/BMP
> 
> $ gdal_translate -of png <source dataset> output.png
> $ ls
> output.png
> output.png.aux.xml
> 
> Is that how it suppose to be or is it a bug? I mean, by entering -co RPB=no
> GTIFF should create a  .aux.xml like other drivers do. Right?

Hi Ivan

Yes was a bug. I've just fixed it trunk (r28883). We have a non-trivial logic 
to decide how/when/if writing RPC information...

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Apr 10 13:49:06 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Apr 2015 22:49:06 +0200
Subject: [gdal-dev] gdal_translate truncates nodata_value < -4.21358e-09
In-Reply-To: <55282FD1.7030603@hydroconsult.nl>
References: <201504101828.04364.even.rouault@spatialys.com>
	<55282FD1.7030603@hydroconsult.nl>
Message-ID: <201504102249.07046.even.rouault@spatialys.com>

Siebe,

I've created the following test file:

$ cat test.asc
ncols        2
nrows        2
xllcorner    0
yllcorner    0
cellsize     1
NODATA_value  -3.40282346638529E+38
 -3.40282346638529E+38 0
1 2


$ gdalinfo test.asc -stats
Driver: AAIGrid/Arc/Info ASCII Grid
Files: test.asc
Size is 2, 2
Coordinate System is `'
Origin = (0.000000000000000,2.000000000000000)
Pixel Size = (1.000000000000000,-1.000000000000000)
Corner Coordinates:
Upper Left  (   0.0000000,   2.0000000) 
Lower Left  (   0.0000000,   0.0000000) 
Upper Right (   2.0000000,   2.0000000) 
Lower Right (   2.0000000,   0.0000000) 
Center      (   1.0000000,   1.0000000) 
Band 1 Block=2x1 Type=Float32, ColorInterp=Undefined
  Minimum=0.000, Maximum=2.000, Mean=1.000, StdDev=0.816
  NoData Value=-3.4028234663852886e+38
  Metadata:
    STATISTICS_MAXIMUM=2
    STATISTICS_MEAN=1
    STATISTICS_MINIMUM=0
    STATISTICS_STDDEV=0.81649658092773

==> So the nodata value is well taken into account, and the pixel at position 
(0,0) that is at nodata is well excluded from the stats.


Then converting it again to AAIGRID :

$ gdal_translate test.asc test2.asc -of aaigrid

$ cat test2.asc
ncols        2
nrows        2
xllcorner    0.000000000000
yllcorner    0.000000000000
cellsize     1.000000000000
NODATA_value  -3.4028234663852885981e+38
 -3.4028234663852885981e+38 0
 1 2

(slightly different last figures, but as we output 20 and than only 15 or 16 are 
really significant, that doesn't matter)

Confirmed by computing again statistics :

$ gdalinfo -stats test2.asc
Driver: AAIGrid/Arc/Info ASCII Grid
Files: test2.asc
Size is 2, 2
Coordinate System is `'
Origin = (0.000000000000000,2.000000000000000)
Pixel Size = (1.000000000000000,-1.000000000000000)
Corner Coordinates:
Upper Left  (   0.0000000,   2.0000000) 
Lower Left  (   0.0000000,   0.0000000) 
Upper Right (   2.0000000,   2.0000000) 
Lower Right (   2.0000000,   0.0000000) 
Center      (   1.0000000,   1.0000000) 
Band 1 Block=2x1 Type=Float32, ColorInterp=Undefined
  Min=0.000 Max=2.000 
  Minimum=0.000, Maximum=2.000, Mean=1.000, StdDev=0.816
  NoData Value=-3.4028234663852886e+38
  Metadata:
    STATISTICS_MAXIMUM=2
    STATISTICS_MEAN=1
    STATISTICS_MINIMUM=0
    STATISTICS_STDDEV=0.81649658092773

Then converting to HFA :

$ gdal_translate test2.asc test2.img -of hfa

And again checking statistics :

$ gdalinfo test2.img -stats
Driver: HFA/Erdas Imagine Images (.img)
Files: test2.img
Size is 2, 2
Coordinate System is `'
Origin = (0.000000000000000,2.000000000000000)
Pixel Size = (1.000000000000000,-1.000000000000000)
Corner Coordinates:
Upper Left  (   0.0000000,   2.0000000) 
Lower Left  (   0.0000000,   0.0000000) 
Upper Right (   2.0000000,   2.0000000) 
Lower Right (   2.0000000,   0.0000000) 
Center      (   1.0000000,   1.0000000) 
Band 1 Block=64x64 Type=Float32, ColorInterp=Undefined
  Description = Layer_1
  Minimum=0.000, Maximum=2.000, Mean=1.000, StdDev=0.816
  NoData Value=-3.4028234663852886e+38
  Metadata:
    LAYER_TYPE=athematic
    STATISTICS_MAXIMUM=2
    STATISTICS_MEAN=1
    STATISTICS_MINIMUM=0
    STATISTICS_STDDEV=0.81649658092773

So I'm not sure how to reproduce your problem.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sfkeller at gmail.com  Fri Apr 10 14:50:06 2015
From: sfkeller at gmail.com (Stefan Keller)
Date: Fri, 10 Apr 2015 23:50:06 +0200
Subject: [gdal-dev] Height issues with SRTM data after gdalwarp
	WGS84=>Mercator
Message-ID: <CAFcOn2_r_v19iV09m=q-ykXP3ePt_gmPK7jYjyfhbswPSMgUbw@mail.gmail.com>

I'm having similar issues with getting height from after using
gdalwarp to transform SRTM elevation model data from WGS84 (EPSG:4326)
to Mercator (EPSG:3857) similar to this Stackexchange question:
http://gis.stackexchange.com/questions/142154/issues-with-getting-the-height-from-srtm-gdalwarp-wgs84epsg4326-to-mercatore

-S.

From bradh at frogmouth.net  Sat Apr 11 06:19:48 2015
From: bradh at frogmouth.net (Brad Hards)
Date: Sat, 11 Apr 2015 23:19:48 +1000
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <loom.20150407T085218-238@post.gmane.org>
References: <28009649.ARrsKQEWmZ@saxicola>
	<loom.20150407T085218-238@post.gmane.org>
Message-ID: <3557705.hOJuBjjgyZ@saxicola>

On Tue, 7 Apr 2015 07:12:20 AM Jukka Rahkonen wrote:
> I felt that document somehow heavy to read but it appears in many places
> that "Mercator variant A" is the primary name since October 2010. This
> section is from page 34 (of 143)
OK, where do I fix geopackage behaviour - in OGR general, or in geopackage 
format handler?

Brad


From lucadeluge at gmail.com  Sun Apr 12 15:25:34 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Mon, 13 Apr 2015 00:25:34 +0200
Subject: [gdal-dev] FOSS4G EU code sprint
Message-ID: <CAK4m-3yaQZMu2N7Jg4oiKv5kBNhCyjuWXabA7UMpGsr974NJBw@mail.gmail.com>

Dear all,

I'm proud to invite you to the FOSS4G-Europe 2015 code sprint, in Como Italy.

The sprint will be held the last day of the conference, 18th July. For
more info please read the wiki page [0]

Please add your name and the project that you are interested in, to
the wiki page [0], to help organizers plan accordingly.

The code sprint focuses collaboration between Open Source software
community members, including those interested in writing code, or
documenting, or testing, or generally helping projects grow. People
can share experiences and come up with creative new ideas and
collaborations. The sprint allows Open Source community members to
actively work together face-to-face and get their hands dirty
developing great new geospatial tools.

See you there!

[0] http://wiki.osgeo.org/wiki/Conference-Europe_2015-Como/Code_sprint

-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From even.rouault at spatialys.com  Sun Apr 12 15:51:02 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 13 Apr 2015 00:51:02 +0200
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <3557705.hOJuBjjgyZ@saxicola>
References: <28009649.ARrsKQEWmZ@saxicola>
	<loom.20150407T085218-238@post.gmane.org>
	<3557705.hOJuBjjgyZ@saxicola>
Message-ID: <201504130051.02490.even.rouault@spatialys.com>

Le samedi 11 avril 2015 15:19:48, Brad Hards a ?crit :
> On Tue, 7 Apr 2015 07:12:20 AM Jukka Rahkonen wrote:
> > I felt that document somehow heavy to read but it appears in many places
> > that "Mercator variant A" is the primary name since October 2010. This
> > section is from page 34 (of 143)
> 
> OK, where do I fix geopackage behaviour - in OGR general, or in geopackage
> format handler?

It depends on how you want to fix that.

If your intent if to have Mercator_variant_A preserved in the WKT after 
importing it from GPKG, you will likely to have to edit several places in the 
code base to avoid direct string comparisons with SRS_PT_MERCATOR_1SP as done 
currently, but rather use a new 
OGRSpatialReference::IsProjectionMethodAliasOf() or something like that.

Otherwise you can add a normalizing method in OGRSpatialReference 
("morphFromModernEPSG" ??) and call it from the GPKG driver. In my opinion, 
that would be the easiest and less risky way of fixing the issue.

I see exposing (exporting) Mercator_variant_A instead of Mercator_1SP as a 
potential source of incompatibilities with other software, so if we were going 
onto that road, especially using it as the new default name, we should try to 
have a clear view of what is going to break outside of the GDAL world. 
Although I see GeoTools added a few years ago "Mercator (variant A)" as an 
alias : 
https://github.com/geotools/geotools/commit/7fb010411eaf4210fb061f1f7dab6672d364830a
Not sure if that's enough to make them recognize "Mercator_variant_A" also. 
Perhaps Robert as an idea about that since he was the author of that change ? 
And I guess they still use Mercator_1SP as the main name when they export WKT 
?
Apparently GvSIG also added "Mercator_(variant_A)" as an alias: 
https://redmine.gvsig.net/redmine/issues/2624

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From peet.whittaker at gmail.com  Mon Apr 13 01:54:27 2015
From: peet.whittaker at gmail.com (drp33t)
Date: Mon, 13 Apr 2015 01:54:27 -0700 (PDT)
Subject: [gdal-dev]  GDAL NuGet Package
Message-ID: <1428915267090-5201018.post@n6.nabble.com>

Hi,

I am wondering there are any plans to update the version of the GDAL package
in NuGet? Currently the stable release is at version 1.9 (released
2012-12-20) and there is also a pre-release alpha for 1.10 (last updated
2014-01-08).

It would be very beneficial for my work if either 1.10 or 1.11 were
available through NuGet. I am willing to help update / maintain the NuGet
packages if needed.

Regards,
Peet Whittaker



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-GDAL-NuGet-Package-tp5201018.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From szekerest at gmail.com  Mon Apr 13 02:23:17 2015
From: szekerest at gmail.com (Tamas Szekeres)
Date: Mon, 13 Apr 2015 11:23:17 +0200
Subject: [gdal-dev] GDAL NuGet Package
In-Reply-To: <1428915267090-5201018.post@n6.nabble.com>
References: <1428915267090-5201018.post@n6.nabble.com>
Message-ID: <CACALY+TkC-DmESf1Shza3VJF5tj2k0PJGgnZ1yyWsxQ0u=ZG1g@mail.gmail.com>

I've planned to provide nuget packages from the binaries provided at
http://www.gisinternals.com/ long ago, but I had no time to include this
support so far.

The corresponding ticket can be found here:

https://github.com/gisinternals/buildsystem/issues/9

The key features of the packaging should be:

1. Support multiple Visual Studio versions.
2. Support the selection of x86/x64.
3. Support release versions as well as and daily built updates.
4. Packaging should fit into the automated build process (should be done
using command line tools).


Any help would be appreciated have this setup realized.

Best regards,

Tamas



2015-04-13 10:54 GMT+02:00 drp33t <peet.whittaker at gmail.com>:

> Hi,
>
> I am wondering there are any plans to update the version of the GDAL
> package
> in NuGet? Currently the stable release is at version 1.9 (released
> 2012-12-20) and there is also a pre-release alpha for 1.10 (last updated
> 2014-01-08).
>
> It would be very beneficial for my work if either 1.10 or 1.11 were
> available through NuGet. I am willing to help update / maintain the NuGet
> packages if needed.
>
> Regards,
> Peet Whittaker
>
>
>
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/gdal-dev-GDAL-NuGet-Package-tp5201018.html
> Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150413/a5efdbb2/attachment.html>

From yutaxsato at gmail.com  Mon Apr 13 03:44:58 2015
From: yutaxsato at gmail.com (Yuta Sato)
Date: Mon, 13 Apr 2015 19:44:58 +0900
Subject: [gdal-dev] Alternative of GdalBuildVrt.Exe
Message-ID: <CAPqnkJTzq3bndZa6azySMhnv1hUjNMR+C0ODYfGv_BUsHOBJhw@mail.gmail.com>

Dear GDAL Developers and Users:

Is there alternative of GdalBuildVrt.Exe in order to write a VRT file that
includes the files to be mosaicked directly from Python?

Thanks.

Yuta
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150413/3466b4f6/attachment.html>

From lucadeluge at gmail.com  Mon Apr 13 04:25:23 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Mon, 13 Apr 2015 13:25:23 +0200
Subject: [gdal-dev] create GeospatialPDF using Python
Message-ID: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>

Hi all,

I'm trying to create a new GeospatialPDF using Python.

I should be able to create GeospatialPDF with vector, raster and both.

For vector it seems quite simple, just writing a new vector and insert
all features but I'm not able to create it, my code [0] is not
returning any error but I cannot find the output file

For raster should I use CreateCopy? I was able to create a PDFand see
it with a PDF viewer but GDAL doesn't identify it as GeospatialPDF
[1].
Should I add a "Creation Options" of GeospatialPDF driver?

To create a GeospatialPDF with raster and vector (on top of raster)
should I use gdal driver and use "Creation Options" to add the other
layers?
How the "Creation Options" should be passed to CreateCopy?

Thanks
Luca

[0] http://pastebin.com/V8aNqWXD
[1] http://pastebin.com/gNu2gbtF

-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From jukka.rahkonen at maanmittauslaitos.fi  Mon Apr 13 04:48:44 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Mon, 13 Apr 2015 11:48:44 +0000 (UTC)
Subject: [gdal-dev] Alternative of GdalBuildVrt.Exe
References: <CAPqnkJTzq3bndZa6azySMhnv1hUjNMR+C0ODYfGv_BUsHOBJhw@mail.gmail.com>
Message-ID: <loom.20150413T134753-707@post.gmane.org>

Yuta Sato <yutaxsato <at> gmail.com> writes:

> 
> Dear GDAL Developers and Users:
> Is there alternative of GdalBuildVrt.Exe in order to write a VRT file that
includes the files to be mosaicked directly from Python?

Hi,

I would try what this can do:

 http://trac.osgeo.org/gdal/browser/branches/1.6/gdal/swig/python/samples/gdal_vrtmerge.py

-Jukka Rahkonen-


From even.rouault at spatialys.com  Mon Apr 13 05:01:46 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 13 Apr 2015 14:01:46 +0200
Subject: [gdal-dev] GDAL 2.0 release plans
Message-ID: <201504131401.46728.even.rouault@spatialys.com>

Hi,

Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta 
version for the end of this month (April 30th). Are there objections to 
sticking with that plan ? Does someone need a bit more time to finish an 
ongoing work ?

And if things go well with this beta (and potentially other beta(s) needed), 
we could try a release candidate for end of May. One month of beta phase might 
seem a bit short, but I'm not sure extending the beta testing period more will 
bring significant additional feedback (and things tend to slip, so better aim 
for a tight schedule). Thoughts ?
Anyone using GDAL intensively and/or interesting in 2.0 should already track 
trunk closely ;-)

I can wear the hat of 2.0 release manager, but I'm happy to let it to any 
other volunteer.

Best regards,

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Mon Apr 13 05:33:21 2015
From: bishop.dev at gmail.com (Dmitriy Baryshnikov)
Date: Mon, 13 Apr 2015 15:33:21 +0300
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504131401.46728.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
Message-ID: <552BB791.7010507@gmail.com>

Hi Even,

I was very busy with other projects, but now I have some spare time to do:
1) Integrate GSoC'14 GNM by Mikhail Gusev. He finished most of work, but 
I need to review his code.
2) Add support for ArcGIS Server REST API to WMS driver. It'll be very 
good to add this functionality to GDAL v.2
3) Add support for metadata numerous imagery satellites (Alos, EROS, 
Formosat, Kompsat, Landsat, Pleiades, RepidYey, Spot, Resurs-DK).
All this code is in our reposity on github, and I only need to merge it 
with trunk (also add some tests).

Give me this week, on weekend I can say if I need more time to integrate 
this work to GDAL trunk.

Best regards,
     Dmitry

13.04.2015 15:01, Even Rouault ?????:
> Hi,
>
> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
> version for the end of this month (April 30th). Are there objections to
> sticking with that plan ? Does someone need a bit more time to finish an
> ongoing work ?
>
> And if things go well with this beta (and potentially other beta(s) needed),
> we could try a release candidate for end of May. One month of beta phase might
> seem a bit short, but I'm not sure extending the beta testing period more will
> bring significant additional feedback (and things tend to slip, so better aim
> for a tight schedule). Thoughts ?
> Anyone using GDAL intensively and/or interesting in 2.0 should already track
> trunk closely ;-)
>
> I can wear the hat of 2.0 release manager, but I'm happy to let it to any
> other volunteer.
>
> Best regards,
>
> Even
>


From andre.vautour at caris.com  Mon Apr 13 06:00:22 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Mon, 13 Apr 2015 10:00:22 -0300
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <201504130051.02490.even.rouault@spatialys.com>
References: <28009649.ARrsKQEWmZ@saxicola>
	<loom.20150407T085218-238@post.gmane.org>
	<3557705.hOJuBjjgyZ@saxicola>
	<201504130051.02490.even.rouault@spatialys.com>
Message-ID: <552BBDE6.1060107@caris.com>


On 2015-04-12 19:51, Even Rouault wrote:
> Le samedi 11 avril 2015 15:19:48, Brad Hards a ?crit :
>> On Tue, 7 Apr 2015 07:12:20 AM Jukka Rahkonen wrote:
>>> I felt that document somehow heavy to read but it appears in many places
>>> that "Mercator variant A" is the primary name since October 2010. This
>>> section is from page 34 (of 143)

I am not sure I follow what this has to do with the projection name in 
WKT. The newer WKT specification (ISO 19162) relies solely on the 
identifier to determine which operation method to use to project 
coordinates, but the older WKT tends to follow OGC 01-009 which lists 
explicit names to use for the projections. So regardless of what the 
EPSG registry uses for a name, this is the name that is supposed to be 
used for the OGC WKT as far as I am concerned:
OGC 01-009 (http://www.opengeospatial.org/standards/ct): "Mercator_1SP"

Does someone know of another WKT spec that uses that "Mercator variant 
A" name, or I am missing something?
>> OK, where do I fix geopackage behaviour - in OGR general, or in geopackage
>> format handler?
I would ask if this is not a bug in the geopackage itself or whatever 
created that WKT string. After all, it looks like the name used does not 
follow the WKT standard.
> It depends on how you want to fix that.
>
> If your intent if to have Mercator_variant_A preserved in the WKT after
> importing it from GPKG, you will likely to have to edit several places in the
> code base to avoid direct string comparisons with SRS_PT_MERCATOR_1SP as done
> currently, but rather use a new
> OGRSpatialReference::IsProjectionMethodAliasOf() or something like that.
>
> Otherwise you can add a normalizing method in OGRSpatialReference
> ("morphFromModernEPSG" ??) and call it from the GPKG driver. In my opinion,
> that would be the easiest and less risky way of fixing the issue.
I'm not opposed to mapping that "Mercator variant A" name to 
SRS_PT_MERCATOR_1SP on WKT import, but I think there's a limit to how 
far one should go to support non-standard WKT. I am not sure what modern 
EPSG names have to do with the explicitly named WKT projection strings 
that are defined in the actual specification, even spatialreference.org 
is still using "Mercator_1SP" for the OGC WKT.
>
> I see exposing (exporting) Mercator_variant_A instead of Mercator_1SP as a
> potential source of incompatibilities with other software, so if we were going
> onto that road, especially using it as the new default name, we should try to
> have a clear view of what is going to break outside of the GDAL world.
> Although I see GeoTools added a few years ago "Mercator (variant A)" as an
> alias :
> https://github.com/geotools/geotools/commit/7fb010411eaf4210fb061f1f7dab6672d364830a
> Not sure if that's enough to make them recognize "Mercator_variant_A" also.
> Perhaps Robert as an idea about that since he was the author of that change ?
> And I guess they still use Mercator_1SP as the main name when they export WKT
> ?
> Apparently GvSIG also added "Mercator_(variant_A)" as an alias:
> https://redmine.gvsig.net/redmine/issues/2624
Was that for interacting with WKT explicitly, or just for naming the 
projection in general?

http://epsg-registry.org/export.htm?wkt=urn:ogc:def:crs:EPSG::3395 can 
use a better name, as the WKT is based on ISO 19162 which uses the 
identifier for the operation method. In other words, the name no longer 
is used to determine the method, but 
http://spatialreference.org/ref/epsg/3395/prettywkt/ still uses 
"Mercator_1SP" as, in the OGC standard I listed above, that is what the 
name has to be.

>
> Even

Andr?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150413/33536aed/attachment-0001.html>

From even.rouault at spatialys.com  Mon Apr 13 06:42:26 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 13 Apr 2015 15:42:26 +0200
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <552BBDE6.1060107@caris.com>
References: <28009649.ARrsKQEWmZ@saxicola>
	<201504130051.02490.even.rouault@spatialys.com>
	<552BBDE6.1060107@caris.com>
Message-ID: <201504131542.26464.even.rouault@spatialys.com>

Andr?,

> 
> I am not sure I follow what this has to do with the projection name in
> WKT. The newer WKT specification (ISO 19162) relies solely on the
> identifier to determine which operation method to use to project
> coordinates,

Do you know if there's a publicly available version of ISO 19162 ? I could 
only find this draft on OGC website: 
https://portal.opengeospatial.org/files/?artifact_id=54797 ( accessible from 
http://www.opengeospatial.org/standards/requests/112?utm_source=emailcampaign219&utm_medium=phpList&utm_content=HTMLemail&utm_campaign=The+OGC+requests+comment+on+the+candidate+standard+Geographic+Information+%E2%80%93+Well+Known+Text+for+coordinate+reference+systems 
)

> but the older WKT tends to follow OGC 01-009 which lists
> explicit names to use for the projections. So regardless of what the
> EPSG registry uses for a name, this is the name that is supposed to be
> used for the OGC WKT as far as I am concerned:
> OGC 01-009 (http://www.opengeospatial.org/standards/ct): "Mercator_1SP"

AFAICS, OGC 01-009 is very light on details unfortunatelly (doesn't mention  
parameters of all projections), and things have more or less crystalized by 
the practice of the various vendors (including GDAL/libgeotiff/proj.4). But 
yes, it does mention "Mercator_1SP", and the geopackage spec mentions OGC 
01-009 as the standard to use for WKT.

> 
> I would ask if this is not a bug in the geopackage itself or whatever
> created that WKT string. 

Not geopackage itself, but the NGA's profile on it. But your point on not 
mixing the old OGC 01-009 with ISO 19162 new practice is good, and should 
likely be submitted back to NGA.

> I'm not opposed to mapping that "Mercator variant A" name to
> SRS_PT_MERCATOR_1SP on WKT import, but I think there's a limit to how
> far one should go to support non-standard WKT.

In an ideal world, everyone would follow standards, and there would not be 
many standards/formats to do the same thing ;-) As this world doesn't exist, 
GDAL is there to fill in the gaps. I'd say that it is OK to have some ad-hoc 
rules to accomodate for data found in the wild (but I'm not sure there has 
been data released with the NGA's profile yet ?)

> even spatialreference.org
> is still using "Mercator_1SP" for the OGC WKT.

spatialreference.org is not really maintained AFAIK, and is partly based on an 
old GDAL version. So I wouldn't consider it as an authoritative source.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pepijn at vaneeckhoudt.net  Mon Apr 13 07:01:28 2015
From: pepijn at vaneeckhoudt.net (Pepijn Van Eeckhoudt)
Date: Mon, 13 Apr 2015 16:01:28 +0200
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <552BBDE6.1060107@caris.com>
References: <28009649.ARrsKQEWmZ@saxicola>
	<loom.20150407T085218-238@post.gmane.org>
	<3557705.hOJuBjjgyZ@saxicola>
	<201504130051.02490.even.rouault@spatialys.com>
	<552BBDE6.1060107@caris.com>
Message-ID: <06A435AC-3C1D-4AE8-8F91-12D11319817B@vaneeckhoudt.net>


> I am not sure I follow what this has to do with the projection name in WKT. The newer WKT specification (ISO 19162) relies solely on the identifier to determine which operation method to use to project coordinates, but the older WKT tends to follow OGC 01-009 which lists explicit names to use for the projections. So regardless of what the EPSG registry uses for a name, this is the name that is supposed to be used for the OGC WKT as far as I am concerned:
> OGC 01-009 (http://www.opengeospatial.org/standards/ct <http://www.opengeospatial.org/standards/ct>): "Mercator_1SP"
> 
> Does someone know of another WKT spec that uses that "Mercator variant A" name, or I am missing something?


When we were defining the GeoPackage spec I had hoped to be able to point people to one definitive list of projection names and parameters so we could say ?use this, end of story?. I remember discussing this with the CRS WKT people at one of the OGC TCs. IIRC they told me there never was a specification that standardised the projection names. The best practice is to use names that are used in some registry, the EPSG one being the most commonly used one.

The coordinate transformation service spec isn?t actually relevant for GeoPackage and is certainly not some normative reference for WKT projection names. I was under the same impression until I again discussed this with the relevant OGC members and was told that it is not.
The spec that is relevant for GeoPackage is the simple features common architecture one (OGC 06-103r4), section 9. That spec lists a number of projection names in annex B, but that annex is informative and non-exhaustive.

So in short there?s, unfortunately, no such thing as ?standardised? WKT wrt the projection and parameter names.

> I'm not opposed to mapping that "Mercator variant A" name to SRS_PT_MERCATOR_1SP on WKT import, but I think there's a limit to how far one should go to support non-standard WKT. I am not sure what modern EPSG names have to do with the explicitly named WKT projection strings that are defined in the actual specification, even spatialreference.org <http://spatialreference.org/> is still using "Mercator_1SP" for the OGC WKT.

IIRC spatialreference.org isn?t being actively maintained anymore. If http://trac.osgeo.org/metacrs/browser/sr.org <http://trac.osgeo.org/metacrs/browser/sr.org> is still the source repo, last relevant update is from 5 years ago.
Last time I reviewed the source code, the WKT it displays is produced by proj.4 and the data for it is sourced from proj.4?s extract of the EPSG database so of course that?s going to roundtrip well. :)

Since all this data is being source from the EPSG database anyway it seems best to use that as authoritative source. The main name for EPSG:9804 <http://www.epsg-registry.org/report.htm?type=selection&entity=urn:ogc:def:method:EPSG::9804&reportDetail=long&style=urn:uuid:report-style:default-with-code&style_name=OGP%20Default%20With%20Code&title=> is 'Mercator (variant A)' now. The 'Mercator (1SP)? name is still present in the database as an alias. The name change dates back to 2010 stating:

> Code: EPSG::2010.058 
> Reporter: Jay Hollingsworth; Schlumberger 
> Request: Review Mercator and Oblique Mercator method names 
> Actions Taken: For methods 9804-05, 9812-13 and 9815, amended name and added alias. For method 9815 also corrected forward formula for az=90deg case. Added method 1044. For projections 12150, 15001, 15031, 19871-72, 19894-95 and 19956-58, in remarks updated method names. For CRS 3375, in remarks inserted missing and removed spurious space.

Best regards,

Pepijn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150413/5c75c89b/attachment.html>

From andre.vautour at caris.com  Mon Apr 13 07:30:51 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Mon, 13 Apr 2015 11:30:51 -0300
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <201504131542.26464.even.rouault@spatialys.com>
References: <28009649.ARrsKQEWmZ@saxicola>
	<201504130051.02490.even.rouault@spatialys.com>
	<552BBDE6.1060107@caris.com>
	<201504131542.26464.even.rouault@spatialys.com>
Message-ID: <552BD31B.1030205@caris.com>


On 2015-04-13 10:42, Even Rouault wrote:
> Andr?,
>
>> I am not sure I follow what this has to do with the projection name in
>> WKT. The newer WKT specification (ISO 19162) relies solely on the
>> identifier to determine which operation method to use to project
>> coordinates,
> Do you know if there's a publicly available version of ISO 19162 ? I could
> only find this draft on OGC website:
> https://portal.opengeospatial.org/files/?artifact_id=54797 ( accessible from
> http://www.opengeospatial.org/standards/requests/112?utm_source=emailcampaign219&utm_medium=phpList&utm_content=HTMLemail&utm_campaign=The+OGC+requests+comment+on+the+candidate+standard+Geographic+Information+%E2%80%93+Well+Known+Text+for+coordinate+reference+systems
> )
>
>> but the older WKT tends to follow OGC 01-009 which lists
>> explicit names to use for the projections. So regardless of what the
>> EPSG registry uses for a name, this is the name that is supposed to be
>> used for the OGC WKT as far as I am concerned:
>> OGC 01-009 (http://www.opengeospatial.org/standards/ct): "Mercator_1SP"
> AFAICS, OGC 01-009 is very light on details unfortunatelly (doesn't mention
> parameters of all projections), and things have more or less crystalized by
> the practice of the various vendors (including GDAL/libgeotiff/proj.4). But
> yes, it does mention "Mercator_1SP", and the geopackage spec mentions OGC
> 01-009 as the standard to use for WKT.
Don't get me wrong, I agree that the OGC WKT is very fragile around the 
projection. The other WKT components can be fully defined in the WKT and 
their name is really just metadata. My point is that if the WKT produced 
by GDAL can use that particular projection name, I expect you are just 
pushing the problem further down the line. That is, that WKT string will 
eventually get passed to something else that will not understand that name.
>
>> I would ask if this is not a bug in the geopackage itself or whatever
>> created that WKT string.
> Not geopackage itself, but the NGA's profile on it. But your point on not
> mixing the old OGC 01-009 with ISO 19162 new practice is good, and should
> likely be submitted back to NGA.
>
>> I'm not opposed to mapping that "Mercator variant A" name to
>> SRS_PT_MERCATOR_1SP on WKT import, but I think there's a limit to how
>> far one should go to support non-standard WKT.
> In an ideal world, everyone would follow standards, and there would not be
> many standards/formats to do the same thing ;-) As this world doesn't exist,
> GDAL is there to fill in the gaps. I'd say that it is OK to have some ad-hoc
> rules to accomodate for data found in the wild (but I'm not sure there has
> been data released with the NGA's profile yet ?)
I agree, but a key intention behind standards is to improve 
interoperability between different software components. Do you expect 
other software components to be able to ingest that WKT string with that 
projection name? That is, to be able to read it and use the correct 
operation method? How would a WKT implementer know to map that specific 
name to the Mercator operation method to use the correct formula? Are 
you saying you expect somebody implementing an OGC WKT reader to try to 
match the projection name to an operation method name in the 
EPSG-registry when trying to determine the operation method to create?

>> even spatialreference.org
>> is still using "Mercator_1SP" for the OGC WKT.
> spatialreference.org is not really maintained AFAIK, and is partly based on an
> old GDAL version. So I wouldn't consider it as an authoritative source.
That's fair, but epsg-registry.org more than likely doesn't offer the 
OGC WKT because of these limitations. A better way forward would 
obviously be to use the new ISO WKT, but until then this is 
unfortunately the mess we all have to deal with.
>
> Even
>

Andr?

From andre.vautour at caris.com  Mon Apr 13 07:55:00 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Mon, 13 Apr 2015 11:55:00 -0300
Subject: [gdal-dev] Add Mercator_variant_A method?
In-Reply-To: <06A435AC-3C1D-4AE8-8F91-12D11319817B@vaneeckhoudt.net>
References: <28009649.ARrsKQEWmZ@saxicola>
	<loom.20150407T085218-238@post.gmane.org>
	<3557705.hOJuBjjgyZ@saxicola>
	<201504130051.02490.even.rouault@spatialys.com>
	<552BBDE6.1060107@caris.com>
	<06A435AC-3C1D-4AE8-8F91-12D11319817B@vaneeckhoudt.net>
Message-ID: <552BD8C4.1010009@caris.com>


On 2015-04-13 11:01, Pepijn Van Eeckhoudt wrote:
>
>> I am not sure I follow what this has to do with the projection name 
>> in WKT. The newer WKT specification (ISO 19162) relies solely on the 
>> identifier to determine which operation method to use to project 
>> coordinates, but the older WKT tends to follow OGC 01-009 which lists 
>> explicit names to use for the projections. So regardless of what the 
>> EPSG registry uses for a name, this is the name that is supposed to 
>> be used for the OGC WKT as far as I am concerned:
>> OGC 01-009 (http://www.opengeospatial.org/standards/ct): "Mercator_1SP"
>>
>> Does someone know of another WKT spec that uses that "Mercator 
>> variant A" name, or I am missing something?
>
> When we were defining the GeoPackage spec I had hoped to be able to 
> point people to one definitive list of projection names and parameters 
> so we could say ?use this, end of story?. I remember discussing this 
> with the CRS WKT people at one of the OGC TCs. IIRC they told me there 
> never was a specification that standardised the projection names. The 
> best practice is to use names that are used in some registry, the EPSG 
> one being the most commonly used one.
>
> The coordinate transformation service spec isn?t actually relevant for 
> GeoPackage and is certainly not some normative reference for WKT 
> projection names. I was under the same impression until I again 
> discussed this with the relevant OGC members and was told that it is not.
> The spec that is relevant for GeoPackage is the simple features common 
> architecture one (OGC 06-103r4), section 9. That spec lists a number 
> of projection names in annex B, but that annex is informative and 
> non-exhaustive.
>
> So in short there?s, unfortunately, no such thing as ?standardised? 
> WKT wrt the projection and parameter names.
Thanks Pepijn for these clarifications. I was aware of the simple 
feature specs as well, but did not find that annex when I was drafting 
my original reply.

It might be helpful for the OGC to put out a policy guideline like they 
did for the axis ordering http://www.ogcnetwork.net/axisorder. I've 
looked at several of the WKT specs over the years and would not have 
reached that conclusion.
>
>> I'm not opposed to mapping that "Mercator variant A" name to 
>> SRS_PT_MERCATOR_1SP on WKT import, but I think there's a limit to how 
>> far one should go to support non-standard WKT. I am not sure what 
>> modern EPSG names have to do with the explicitly named WKT projection 
>> strings that are defined in the actual specification, even 
>> spatialreference.org <http://spatialreference.org> is still using 
>> "Mercator_1SP" for the OGC WKT.
>
> IIRC spatialreference.org <http://spatialreference.org> isn?t being 
> actively maintained anymore. If 
> http://trac.osgeo.org/metacrs/browser/sr.org is still the source repo, 
> last relevant update is from 5 years ago.
> Last time I reviewed the source code, the WKT it displays is produced 
> by proj.4 and the data for it is sourced from proj.4?s extract of the 
> EPSG database so of course that?s going to roundtrip well. :)
>
> Since all this data is being source from the EPSG database anyway it 
> seems best to use that as authoritative source. The main name for 
> EPSG:9804 
> <http://www.epsg-registry.org/report.htm?type=selection&entity=urn:ogc:def:method:EPSG::9804&reportDetail=long&style=urn:uuid:report-style:default-with-code&style_name=OGP%20Default%20With%20Code&title=> is 
> 'Mercator (variant A)' now. The 'Mercator (1SP)? name is still present 
> in the database as an alias. The name change dates back to 2010 stating:
>
>> Code:
>> EPSG::2010.058
>> Reporter:
>> Jay Hollingsworth; Schlumberger
>> Request:
>> Review Mercator and Oblique Mercator method names
>> Actions Taken:
>> For methods 9804-05, 9812-13 and 9815, amended name and added alias. 
>> For method 9815 also corrected forward formula for az=90deg case. 
>> Added method 1044. For projections 12150, 15001, 15031, 19871-72, 
>> 19894-95 and 19956-58, in remarks updated method names. For CRS 3375, 
>> in remarks inserted missing and removed spurious space.

Thanks again, that answers the main question of my last reply. If that 
is the case, I'll make sure to fallback to a name-lookup of the EPSG 
registry operation method in our in-house implementation. We do use GDAL 
for the WKT parsing, but we then still have to create an operation 
method in our model from the projection's name.

> Best regards,
>
> Pepijn

Andr?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150413/aec7261a/attachment-0001.html>

From Dominik.Schneider at Colorado.EDU  Mon Apr 13 12:46:07 2015
From: Dominik.Schneider at Colorado.EDU (Dominik Schneider)
Date: Mon, 13 Apr 2015 13:46:07 -0600
Subject: [gdal-dev] define netcdf time dimension
Message-ID: <CAHYDKLbFTESqOoAyeB2CknP66HKbwBWJ-xUNmuXOhk8JJ7DvNA@mail.gmail.com>

Hi -

I have some .mdl files from IDL with .hdr header files that I?d like to
convert to netcdf.
The following code produces a netcdf file with a subdataset for each band
in the mdl file. Is there any way to define the bands as the time
dimension, in this case 4416 hourly timesteps?

Or is there another tool that can convert this?

gdal_translate -of NetCDF swe.mdl swe.nc

Thanks
Dominik?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150413/84bf3927/attachment.html>

From mdsumner at gmail.com  Mon Apr 13 23:07:30 2015
From: mdsumner at gmail.com (Michael Sumner)
Date: Tue, 14 Apr 2015 06:07:30 +0000
Subject: [gdal-dev] define netcdf time dimension
In-Reply-To: <CAHYDKLbFTESqOoAyeB2CknP66HKbwBWJ-xUNmuXOhk8JJ7DvNA@mail.gmail.com>
References: <CAHYDKLbFTESqOoAyeB2CknP66HKbwBWJ-xUNmuXOhk8JJ7DvNA@mail.gmail.com>
Message-ID: <CAAcGz9-HJH11+feLkCjPFuZ640MJeXak0aNdGTRcVsUpb0TE2g@mail.gmail.com>

On Tue, 14 Apr 2015 at 05:46 Dominik Schneider <
Dominik.Schneider at colorado.edu> wrote:

> Hi -
>
> I have some .mdl files from IDL with .hdr header files that I?d like to
> convert to netcdf.
> The following code produces a netcdf file with a subdataset for each band
> in the mdl file. Is there any way to define the bands as the time
> dimension, in this case 4416 hourly timesteps?
>
> Or is there another tool that can convert this?
>
> gdal_translate -of NetCDF swe.mdl swe.nc
>
>
Can you list the metadata printed out by gdalinfo swe.mdl?  What driver is
used?

Does that source file have time-metadata inside it each subdataset or do
you need to assign it?

Generally, the subdatasets are not considered as a time series - they are
more like multiple variables for the same observation (whereas a 3rd and
higher dimension/s are often unrolled into a multi-attributed 2D layer and
the time/z step is stored on each band -  it's a bit of a mix/clash of
worlds).

Can you point to and example file somewhere?  I imagine you'll need a
programmed solution, but it should be pretty easy with R or python or
similar.  If R is of interest you can try this and take your question to
the R community:

library(raster)
r <- stack("swe.mdl")
r <- setZ(r, [whatever the vector of dates should be])  ## pseudocode
writeRaster(r, "swe.nc")

That all assumes quite a lot, including available NetCDF versions and
packages, required structure in the output, interpretation of the data read
in,  - so it's just included as an indication how it might be done.

Cheers, Mike.


> Thanks
> Dominik?
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150414/5d82588f/attachment.html>

From ari.jolma at gmail.com  Tue Apr 14 01:04:33 2015
From: ari.jolma at gmail.com (Ari Jolma)
Date: Tue, 14 Apr 2015 11:04:33 +0300
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504131401.46728.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
Message-ID: <552CCA11.3090807@gmail.com>

13.04.2015, 15:01, Even Rouault kirjoitti:
> Hi,
>
> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
> version for the end of this month (April 30th). Are there objections to
> sticking with that plan ? Does someone need a bit more time to finish an
> ongoing work ?

I'm going through and revising the whole Perl API. I'm maybe 70 % done
so April 30th may come a bit soon but it is probably doable.

Thanks,

Ari

>
> And if things go well with this beta (and potentially other beta(s) needed),
> we could try a release candidate for end of May. One month of beta phase might
> seem a bit short, but I'm not sure extending the beta testing period more will
> bring significant additional feedback (and things tend to slip, so better aim
> for a tight schedule). Thoughts ?
> Anyone using GDAL intensively and/or interesting in 2.0 should already track
> trunk closely ;-)
>
> I can wear the hat of 2.0 release manager, but I'm happy to let it to any
> other volunteer.
>
> Best regards,
>
> Even
>


From even.rouault at spatialys.com  Tue Apr 14 02:15:25 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 14 Apr 2015 11:15:25 +0200
Subject: [gdal-dev] MotionS: adopt RFC 56 and RFC 57
In-Reply-To: <201504092039.34931.even.rouault@spatialys.com>
References: <201504092039.34931.even.rouault@spatialys.com>
Message-ID: <201504141115.25078.even.rouault@spatialys.com>

Le jeudi 09 avril 2015 20:39:34, Even Rouault a ?crit :
> Hi,
> 
> Motion 1 : I move to adopt RFC 56: OFTTime/OFTDateTime millisecond accuracy
> 
> https://trac.osgeo.org/gdal/wiki/rfc56_millisecond_precision
> 
> Starting with my +1
> 
> -------------------------
> 
> Motion 2:  I move to adopt RFC 57: 64-bit bucket counts for histograms
> 
> https://trac.osgeo.org/gdal/wiki/rfc57_histogram_64bit_count
> 
> Starting with my +1

I declare both motions passed with +1 from DanielM, JukkaR and me.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From peet.whittaker at gmail.com  Tue Apr 14 04:45:15 2015
From: peet.whittaker at gmail.com (drp33t)
Date: Tue, 14 Apr 2015 04:45:15 -0700 (PDT)
Subject: [gdal-dev] GDAL NuGet Package
In-Reply-To: <CACALY+TkC-DmESf1Shza3VJF5tj2k0PJGgnZ1yyWsxQ0u=ZG1g@mail.gmail.com>
References: <1428915267090-5201018.post@n6.nabble.com>
	<CACALY+TkC-DmESf1Shza3VJF5tj2k0PJGgnZ1yyWsxQ0u=ZG1g@mail.gmail.com>
Message-ID: <1429011915288-5201267.post@n6.nabble.com>

Certainly keen to help out! Disclaimer: I'm fairly familiar with NuGet, but
only as a consumer, never as a package creator / contributor, so let me know
if I'm way off the mark with anything ;)

How were the existing packages created? Looking at the
gisinternals/buildsystem on GitHub, I assume that there are no VS .proj
files to auto-generate the package from?

The good news is that there seems to be much better support for native code
in NuGet now (from v2.5). I don't know if this was already used or if
something else like CoApp was used?

Regards,
Peet Whittaker



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/gdal-dev-GDAL-NuGet-Package-tp5201018p5201267.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr 14 05:35:01 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 14 Apr 2015 12:35:01 +0000 (UTC)
Subject: [gdal-dev] Better way to use GPKG from SpatiaLite
Message-ID: <loom.20150414T141229-987@post.gmane.org>

Hi,

I am reading from http://www.gdal.org/drv_geopackage.html the following

"Starting with GDAL 2.0, SQL SELECT statements passed to ExecuteSQL() are
also executed directly against the database. If Spatialite is used, a recent
version (4.2.0) is needed and use of explicit cast operators AsGPB(),
GeomFromGPB() are required. It is also possible to use with any Spatialite
version, but in a slower way, by specifying the "INDIRECT_SQLITE" dialect.
In which case, GeoPackage geometries appear as Spatialite geometries after
translation by OGR."

I did also read this
https://www.gaia-gis.it/gaia-sins/spatialite-sql-latest.html#p16gpkg and
made some experiments and there is another way to query GeoPackage databases
from SpatiaLite and for me it feels very much more convenient if there is a
need to do spatial queries.

How it works is to execute first AutoGPKGStart(). Before that it would be
good to check if SpatiaLite is recognizing GPKG by executing
CheckGeoPackageMetaData() and since today in the SpatiaLite trunk the check
can also be done with CheckSpatialMetaData(). The expected result is "4".

Successful AutoGPKGStart() creates virtual GPKG tables which can be queried
transparently without casting to/from GPB. The names of the virtual tables
have "vgpkg_" added before the main table name.

I can't say if selecting -dialect SQLite could turn on the AutoGPKGStart
automatically, of if the GPKG database should be opened with
SQLite/SpatiaLite driver instead of GPKG driver from the beginning.

-Jukka Rahkonen-





From even.rouault at spatialys.com  Tue Apr 14 06:53:42 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 14 Apr 2015 15:53:42 +0200
Subject: [gdal-dev] Better way to use GPKG from SpatiaLite
In-Reply-To: <loom.20150414T141229-987@post.gmane.org>
References: <loom.20150414T141229-987@post.gmane.org>
Message-ID: <201504141553.42245.even.rouault@spatialys.com>

Jukka,

From the GPKG driver, it would mean that the user would have to think to 
change its layer names to prefix them with vgpkg_ in his requests and the GPKG 
driver should be modified to accept Spatialite geometries being returned as 
column values.

From the SQLite driver, currently it doesn't recognize well the vgpkg_ tables 
when listing layers (it doesn't recognize the database as being a spatialite 
one or a OGR-style one). When issuing direct SQL, it works better.
If recognizing database/layers was fixed, an extra workaround would have to be 
done since the driver would try to request idx_vgpkg_foo_geometry as the 
spatial index for table foo / vgpkg_foo, whereas the GPKG name is 
rtree_foo_geometry. If manually doing the spatial request (i.e. not using the 
SpatialIndex syntaxic sugar), I guess that should work.

In both cases there's however a cost to pay due to the virtual table 
mechanism, and probably suboptimal/lack of use of attribute indices, etc...

I think the best user friendly, and best performing, solution would be:
- libspatialite: to accept GPKG geometries transparently in all the functions 
that take geometries as argument (and still return a spatialite geometry)
- OGR GPKG driver: to accept spatialite geometries as valid values for results 
of SQL requests.

Even


> Hi,
> 
> I am reading from http://www.gdal.org/drv_geopackage.html the following
> 
> "Starting with GDAL 2.0, SQL SELECT statements passed to ExecuteSQL() are
> also executed directly against the database. If Spatialite is used, a
> recent version (4.2.0) is needed and use of explicit cast operators
> AsGPB(), GeomFromGPB() are required. It is also possible to use with any
> Spatialite version, but in a slower way, by specifying the
> "INDIRECT_SQLITE" dialect. In which case, GeoPackage geometries appear as
> Spatialite geometries after translation by OGR."
> 
> I did also read this
> https://www.gaia-gis.it/gaia-sins/spatialite-sql-latest.html#p16gpkg and
> made some experiments and there is another way to query GeoPackage
> databases from SpatiaLite and for me it feels very much more convenient if
> there is a need to do spatial queries.
> 
> How it works is to execute first AutoGPKGStart(). Before that it would be
> good to check if SpatiaLite is recognizing GPKG by executing
> CheckGeoPackageMetaData() and since today in the SpatiaLite trunk the check
> can also be done with CheckSpatialMetaData(). The expected result is "4".
> 
> Successful AutoGPKGStart() creates virtual GPKG tables which can be queried
> transparently without casting to/from GPB. The names of the virtual tables
> have "vgpkg_" added before the main table name.
> 
> I can't say if selecting -dialect SQLite could turn on the AutoGPKGStart
> automatically, of if the GPKG database should be opened with
> SQLite/SpatiaLite driver instead of GPKG driver from the beginning.
> 
> -Jukka Rahkonen-
> 
> 
> 
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Dominik.Schneider at Colorado.EDU  Tue Apr 14 07:20:14 2015
From: Dominik.Schneider at Colorado.EDU (Dominik Schneider)
Date: Tue, 14 Apr 2015 08:20:14 -0600
Subject: [gdal-dev] define netcdf time dimension
In-Reply-To: <CAAcGz9-HJH11+feLkCjPFuZ640MJeXak0aNdGTRcVsUpb0TE2g@mail.gmail.com>
References: <CAHYDKLbFTESqOoAyeB2CknP66HKbwBWJ-xUNmuXOhk8JJ7DvNA@mail.gmail.com>
	<CAAcGz9-HJH11+feLkCjPFuZ640MJeXak0aNdGTRcVsUpb0TE2g@mail.gmail.com>
Message-ID: <CAHYDKLapW9T0BB-s+pHS6dFHkxmm9+w3bXYbdcMGKUoJ-QbNgQ@mail.gmail.com>

Hi Mike - Thanks for the response and sorry this wasn?t quite clear. IDL
data cubes are of the ENVI format and thus also have an associated ascii
.hdr file. A dataset with 10 bands is here:
https://dl.dropboxusercontent.com/u/5962491/IDLENVIswe.zip
There is no time data in the .mdl file, but I know that the 4416 bands are
hourly timesteps from 0:00 March 1 to 23:00 Aug 31

I could do this in R but was trying to avoid it because R is always so
frustratingly slow for these things?the gdal commandline utilities are much
more awesome!

iMac:~/Downloads $ gdalinfo swe.mdl
Driver: ENVI/ENVI .hdr Labelled
Files: swe.mdl
       swe.hdr
Size is 352, 190
Coordinate System is:
PROJCS["UTM_Zone_13N",
    GEOGCS["GCS_North_American_1983",
        DATUM["North_American_Datum_1983",
            SPHEROID["GRS_1980",6378137.0,298.257222101]],
        PRIMEM["Greenwich",0.0],
        UNIT["Degree",0.0174532925199433]],
    PROJECTION["Transverse_Mercator"],
    PARAMETER["False_Easting",500000.0],
    PARAMETER["False_Northing",0.0],
    PARAMETER["Central_Meridian",-105.0],
    PARAMETER["Scale_Factor",0.9996],
    PARAMETER["Latitude_Of_Origin",0.0],
    UNIT["Meter",1]]
Origin = (444345.080000000016298,4436145.280000000260770)
Pixel Size = (30.000000000000000,-30.000000000000000)
Image Structure Metadata:
  INTERLEAVE=BAND
Corner Coordinates:
Upper Left  (  444345.080, 4436145.280) (105d39' 9.74"W, 40d 4'25.45"N)
Lower Left  (  444345.080, 4430445.280) (105d39' 7.97"W, 40d 1'20.58"N)
Upper Right (  454905.080, 4436145.280) (105d31'43.92"W, 40d 4'27.72"N)
Lower Right (  454905.080, 4430445.280) (105d31'42.49"W, 40d 1'22.85"N)
Center      (  449625.080, 4433295.280) (105d35'26.03"W, 40d 2'54.21"N)
Band 1 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 2 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 3 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 4 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 5 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 6 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 7 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 8 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 9 Block=352x1 Type=Float32, ColorInterp=Undefined
Band 10 Block=352x1 Type=Float32, ColorInterp=Undefined
...
Band 4416 Block=352x1 Type=Float32, ColorInterp=Undefined

?

Dominik Schneider
o 303.735.6296 | c 518.956.3978


On Tue, Apr 14, 2015 at 12:07 AM, Michael Sumner <mdsumner at gmail.com> wrote:

>
>
> On Tue, 14 Apr 2015 at 05:46 Dominik Schneider <
> Dominik.Schneider at colorado.edu> wrote:
>
>> Hi -
>>
>> I have some .mdl files from IDL with .hdr header files that I?d like to
>> convert to netcdf.
>> The following code produces a netcdf file with a subdataset for each band
>> in the mdl file. Is there any way to define the bands as the time
>> dimension, in this case 4416 hourly timesteps?
>>
>> Or is there another tool that can convert this?
>>
>> gdal_translate -of NetCDF swe.mdl swe.nc
>>
>>
> Can you list the metadata printed out by gdalinfo swe.mdl?  What driver is
> used?
>
> Does that source file have time-metadata inside it each subdataset or do
> you need to assign it?
>
> Generally, the subdatasets are not considered as a time series - they are
> more like multiple variables for the same observation (whereas a 3rd and
> higher dimension/s are often unrolled into a multi-attributed 2D layer and
> the time/z step is stored on each band -  it's a bit of a mix/clash of
> worlds).
>
> Can you point to and example file somewhere?  I imagine you'll need a
> programmed solution, but it should be pretty easy with R or python or
> similar.  If R is of interest you can try this and take your question to
> the R community:
>
> library(raster)
> r <- stack("swe.mdl")
> r <- setZ(r, [whatever the vector of dates should be])  ## pseudocode
> writeRaster(r, "swe.nc")
>
> That all assumes quite a lot, including available NetCDF versions and
> packages, required structure in the output, interpretation of the data read
> in,  - so it's just included as an indication how it might be done.
>
> Cheers, Mike.
>
>
>> Thanks
>> Dominik?
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150414/dc30b6d7/attachment-0001.html>

From mdsumner at gmail.com  Tue Apr 14 07:40:26 2015
From: mdsumner at gmail.com (Michael Sumner)
Date: Tue, 14 Apr 2015 14:40:26 +0000
Subject: [gdal-dev] define netcdf time dimension
In-Reply-To: <CAHYDKLapW9T0BB-s+pHS6dFHkxmm9+w3bXYbdcMGKUoJ-QbNgQ@mail.gmail.com>
References: <CAHYDKLbFTESqOoAyeB2CknP66HKbwBWJ-xUNmuXOhk8JJ7DvNA@mail.gmail.com>
	<CAAcGz9-HJH11+feLkCjPFuZ640MJeXak0aNdGTRcVsUpb0TE2g@mail.gmail.com>
	<CAHYDKLapW9T0BB-s+pHS6dFHkxmm9+w3bXYbdcMGKUoJ-QbNgQ@mail.gmail.com>
Message-ID: <CAAcGz98ZXCVnyCq4=oQJYjE25gRdveJHQ=2CNMA+Zrxrs4eC-Q@mail.gmail.com>

Well, FWIW -

Here the CRS doesn't round-trip properly, partly as the PROJ.4 string in R
is not sufficient, and the date type gets recorded as raw integer (that's
ok depending what your target environment will need).  Using gdal_translate
you could augment the netcdf created here with a proper WKT version, so
maybe this is useful in a limited context.

I tried it so you might as well see the result:

library(raster)
r <- stack("swe_sub.mdl")
r
#class       : RasterStack
#dimensions  : 190, 352, 66880, 1  (nrow, ncol, ncell, nlayers)
#resolution  : 30, 30  (x, y)
#extent      : 444345.1, 454905.1, 4430445, 4436145  (xmin, xmax, ymin,
ymax)
#coord. ref. : +proj=utm +zone=13 +datum=NAD83 +units=m +no_defs
#names       : Band.1

dt0 <- seq(as.POSIXct("2014-03-01 00:00:00", tz = "UTC"), by = "1 hour",
length = nlayers(r))
r <- setZ(r, as.character(dt0))
writeRaster(r, "swe_sub.nc")

system("gdalinfo swe_sub.nc")

Warning 1: dimension #2 (easting) is not a Longitude/X dimension.
Warning 1: dimension #1 (northing) is not a Latitude/Y dimension.
Driver: netCDF/Network Common Data Format
Files: swe_sub.nc
Size is 352, 190
Coordinate System is `'
Origin = (444345.080000000016298,4436145.280000000260770)
Pixel Size = (30.000000000000000,-30.000000000000000)
Metadata:
  easting#long_name=easting
  easting#units=meter
  layer#_FillValue=-3.4e+38
  layer#long_name=layer
  layer#max=3.695244550704956
  layer#min=0
  layer#missing_value=-3.4e+38
  layer#projection=+proj=utm +zone=13 +datum=NAD83 +units=m +no_defs
  layer#projection_format=PROJ.4
  NC_GLOBAL#Conventions=CF-1.4
  NC_GLOBAL#created_by=R, packages ncdf and raster (version 2.3-33)
  NC_GLOBAL#date=2015-04-14 04:29:01
  NETCDF_DIM_EXTRA={time}
  NETCDF_DIM_time_DEF={1,6}
  NETCDF_DIM_time_VALUES=1393632000
  northing#long_name=northing
  northing#units=meter
  time#long_name=time
  time#units=seconds since 1970-01-01 00:00:00
Corner Coordinates:
Upper Left  (  444345.080, 4436145.280)
Lower Left  (  444345.080, 4430445.280)
Upper Right (  454905.080, 4436145.280)
Lower Right (  454905.080, 4430445.280)
Center      (  449625.080, 4433295.280)
Band 1 Block=352x1 Type=Float32, ColorInterp=Undefined
  NoData Value=-3.39999999999999996e+38
  Metadata:
    _FillValue=-3.4e+38
    long_name=layer
    max=3.695244550704956
    min=0
    missing_value=-3.4e+38
    NETCDF_DIM_time=1393632000
    NETCDF_VARNAME=layer
    projection=+proj=utm +zone=13 +datum=NAD83 +units=m +no_defs
    projection_format=PROJ.4

## context of the R session
sessionInfo()
R version 3.1.3 (2015-03-09)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.2 LTS

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] raster_2.3-33 sp_1.0-17

loaded via a namespace (and not attached):
[1] grid_3.1.3      lattice_0.20-31 ncdf4_1.13      rgdal_0.9-2


On Wed, 15 Apr 2015 at 00:20 Dominik Schneider <
Dominik.Schneider at colorado.edu> wrote:

> Hi Mike - Thanks for the response and sorry this wasn?t quite clear. IDL
> data cubes are of the ENVI format and thus also have an associated ascii
> .hdr file. A dataset with 10 bands is here:
> https://dl.dropboxusercontent.com/u/5962491/IDLENVIswe.zip
> There is no time data in the .mdl file, but I know that the 4416 bands are
> hourly timesteps from 0:00 March 1 to 23:00 Aug 31
>
> I could do this in R but was trying to avoid it because R is always so
> frustratingly slow for these things?the gdal commandline utilities are much
> more awesome!
>
> iMac:~/Downloads $ gdalinfo swe.mdl
> Driver: ENVI/ENVI .hdr Labelled
> Files: swe.mdl
>        swe.hdr
> Size is 352, 190
> Coordinate System is:
> PROJCS["UTM_Zone_13N",
>     GEOGCS["GCS_North_American_1983",
>         DATUM["North_American_Datum_1983",
>             SPHEROID["GRS_1980",6378137.0,298.257222101]],
>         PRIMEM["Greenwich",0.0],
>         UNIT["Degree",0.0174532925199433]],
>     PROJECTION["Transverse_Mercator"],
>     PARAMETER["False_Easting",500000.0],
>     PARAMETER["False_Northing",0.0],
>     PARAMETER["Central_Meridian",-105.0],
>     PARAMETER["Scale_Factor",0.9996],
>     PARAMETER["Latitude_Of_Origin",0.0],
>     UNIT["Meter",1]]
> Origin = (444345.080000000016298,4436145.280000000260770)
> Pixel Size = (30.000000000000000,-30.000000000000000)
> Image Structure Metadata:
>   INTERLEAVE=BAND
> Corner Coordinates:
> Upper Left  (  444345.080, 4436145.280) (105d39' 9.74"W, 40d 4'25.45"N)
> Lower Left  (  444345.080, 4430445.280) (105d39' 7.97"W, 40d 1'20.58"N)
> Upper Right (  454905.080, 4436145.280) (105d31'43.92"W, 40d 4'27.72"N)
> Lower Right (  454905.080, 4430445.280) (105d31'42.49"W, 40d 1'22.85"N)
> Center      (  449625.080, 4433295.280) (105d35'26.03"W, 40d 2'54.21"N)
> Band 1 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 2 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 3 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 4 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 5 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 6 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 7 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 8 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 9 Block=352x1 Type=Float32, ColorInterp=Undefined
> Band 10 Block=352x1 Type=Float32, ColorInterp=Undefined
> ...
> Band 4416 Block=352x1 Type=Float32, ColorInterp=Undefined
>
> ?
>
> Dominik Schneider
> o 303.735.6296 | c 518.956.3978
>
>
> On Tue, Apr 14, 2015 at 12:07 AM, Michael Sumner <mdsumner at gmail.com>
> wrote:
>
>>
>>
>> On Tue, 14 Apr 2015 at 05:46 Dominik Schneider <
>> Dominik.Schneider at colorado.edu> wrote:
>>
>>> Hi -
>>>
>>> I have some .mdl files from IDL with .hdr header files that I?d like to
>>> convert to netcdf.
>>> The following code produces a netcdf file with a subdataset for each
>>> band in the mdl file. Is there any way to define the bands as the time
>>> dimension, in this case 4416 hourly timesteps?
>>>
>>> Or is there another tool that can convert this?
>>>
>>> gdal_translate -of NetCDF swe.mdl swe.nc
>>>
>>>
>> Can you list the metadata printed out by gdalinfo swe.mdl?  What driver
>> is used?
>>
>> Does that source file have time-metadata inside it each subdataset or do
>> you need to assign it?
>>
>> Generally, the subdatasets are not considered as a time series - they are
>> more like multiple variables for the same observation (whereas a 3rd and
>> higher dimension/s are often unrolled into a multi-attributed 2D layer and
>> the time/z step is stored on each band -  it's a bit of a mix/clash of
>> worlds).
>>
>> Can you point to and example file somewhere?  I imagine you'll need a
>> programmed solution, but it should be pretty easy with R or python or
>> similar.  If R is of interest you can try this and take your question to
>> the R community:
>>
>> library(raster)
>> r <- stack("swe.mdl")
>> r <- setZ(r, [whatever the vector of dates should be])  ## pseudocode
>> writeRaster(r, "swe.nc")
>>
>> That all assumes quite a lot, including available NetCDF versions and
>> packages, required structure in the output, interpretation of the data read
>> in,  - so it's just included as an indication how it might be done.
>>
>> Cheers, Mike.
>>
>>
>>> Thanks
>>> Dominik?
>>> _______________________________________________
>>> gdal-dev mailing list
>>> gdal-dev at lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150414/79fdbddd/attachment-0001.html>

From mdsumner at gmail.com  Tue Apr 14 07:41:49 2015
From: mdsumner at gmail.com (Michael Sumner)
Date: Tue, 14 Apr 2015 14:41:49 +0000
Subject: [gdal-dev] define netcdf time dimension
In-Reply-To: <CAAcGz98ZXCVnyCq4=oQJYjE25gRdveJHQ=2CNMA+Zrxrs4eC-Q@mail.gmail.com>
References: <CAHYDKLbFTESqOoAyeB2CknP66HKbwBWJ-xUNmuXOhk8JJ7DvNA@mail.gmail.com>
	<CAAcGz9-HJH11+feLkCjPFuZ640MJeXak0aNdGTRcVsUpb0TE2g@mail.gmail.com>
	<CAHYDKLapW9T0BB-s+pHS6dFHkxmm9+w3bXYbdcMGKUoJ-QbNgQ@mail.gmail.com>
	<CAAcGz98ZXCVnyCq4=oQJYjE25gRdveJHQ=2CNMA+Zrxrs4eC-Q@mail.gmail.com>
Message-ID: <CAAcGz9_qDOV+-MecQ283jhffoVQ40QSq26f4ZWBw=Q=wML-tJQ@mail.gmail.com>

Sorry, edit - the setZ line should be:

r <- setZ(r, dt0)



On Wed, 15 Apr 2015 at 00:40 Michael Sumner <mdsumner at gmail.com> wrote:

> Well, FWIW -
>
> Here the CRS doesn't round-trip properly, partly as the PROJ.4 string in R
> is not sufficient, and the date type gets recorded as raw integer (that's
> ok depending what your target environment will need).  Using gdal_translate
> you could augment the netcdf created here with a proper WKT version, so
> maybe this is useful in a limited context.
>
> I tried it so you might as well see the result:
>
> library(raster)
> r <- stack("swe_sub.mdl")
> r
> #class       : RasterStack
> #dimensions  : 190, 352, 66880, 1  (nrow, ncol, ncell, nlayers)
> #resolution  : 30, 30  (x, y)
> #extent      : 444345.1, 454905.1, 4430445, 4436145  (xmin, xmax, ymin,
> ymax)
> #coord. ref. : +proj=utm +zone=13 +datum=NAD83 +units=m +no_defs
> #names       : Band.1
>
> dt0 <- seq(as.POSIXct("2014-03-01 00:00:00", tz = "UTC"), by = "1 hour",
> length = nlayers(r))
> r <- setZ(r, as.character(dt0))
> writeRaster(r, "swe_sub.nc")
>
> system("gdalinfo swe_sub.nc")
>
> Warning 1: dimension #2 (easting) is not a Longitude/X dimension.
> Warning 1: dimension #1 (northing) is not a Latitude/Y dimension.
> Driver: netCDF/Network Common Data Format
> Files: swe_sub.nc
> Size is 352, 190
> Coordinate System is `'
> Origin = (444345.080000000016298,4436145.280000000260770)
> Pixel Size = (30.000000000000000,-30.000000000000000)
> Metadata:
>   easting#long_name=easting
>   easting#units=meter
>   layer#_FillValue=-3.4e+38
>   layer#long_name=layer
>   layer#max=3.695244550704956
>   layer#min=0
>   layer#missing_value=-3.4e+38
>   layer#projection=+proj=utm +zone=13 +datum=NAD83 +units=m +no_defs
>   layer#projection_format=PROJ.4
>   NC_GLOBAL#Conventions=CF-1.4
>   NC_GLOBAL#created_by=R, packages ncdf and raster (version 2.3-33)
>   NC_GLOBAL#date=2015-04-14 04:29:01
>   NETCDF_DIM_EXTRA={time}
>   NETCDF_DIM_time_DEF={1,6}
>   NETCDF_DIM_time_VALUES=1393632000
>   northing#long_name=northing
>   northing#units=meter
>   time#long_name=time
>   time#units=seconds since 1970-01-01 00:00:00
> Corner Coordinates:
> Upper Left  (  444345.080, 4436145.280)
> Lower Left  (  444345.080, 4430445.280)
> Upper Right (  454905.080, 4436145.280)
> Lower Right (  454905.080, 4430445.280)
> Center      (  449625.080, 4433295.280)
> Band 1 Block=352x1 Type=Float32, ColorInterp=Undefined
>   NoData Value=-3.39999999999999996e+38
>   Metadata:
>     _FillValue=-3.4e+38
>     long_name=layer
>     max=3.695244550704956
>     min=0
>     missing_value=-3.4e+38
>     NETCDF_DIM_time=1393632000
>     NETCDF_VARNAME=layer
>     projection=+proj=utm +zone=13 +datum=NAD83 +units=m +no_defs
>     projection_format=PROJ.4
>
> ## context of the R session
> sessionInfo()
> R version 3.1.3 (2015-03-09)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 14.04.2 LTS
>
> locale:
>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] raster_2.3-33 sp_1.0-17
>
> loaded via a namespace (and not attached):
> [1] grid_3.1.3      lattice_0.20-31 ncdf4_1.13      rgdal_0.9-2
>
>
> On Wed, 15 Apr 2015 at 00:20 Dominik Schneider <
> Dominik.Schneider at colorado.edu> wrote:
>
>> Hi Mike - Thanks for the response and sorry this wasn?t quite clear. IDL
>> data cubes are of the ENVI format and thus also have an associated ascii
>> .hdr file. A dataset with 10 bands is here:
>> https://dl.dropboxusercontent.com/u/5962491/IDLENVIswe.zip
>> There is no time data in the .mdl file, but I know that the 4416 bands
>> are hourly timesteps from 0:00 March 1 to 23:00 Aug 31
>>
>> I could do this in R but was trying to avoid it because R is always so
>> frustratingly slow for these things?the gdal commandline utilities are much
>> more awesome!
>>
>> iMac:~/Downloads $ gdalinfo swe.mdl
>> Driver: ENVI/ENVI .hdr Labelled
>> Files: swe.mdl
>>        swe.hdr
>> Size is 352, 190
>> Coordinate System is:
>> PROJCS["UTM_Zone_13N",
>>     GEOGCS["GCS_North_American_1983",
>>         DATUM["North_American_Datum_1983",
>>             SPHEROID["GRS_1980",6378137.0,298.257222101]],
>>         PRIMEM["Greenwich",0.0],
>>         UNIT["Degree",0.0174532925199433]],
>>     PROJECTION["Transverse_Mercator"],
>>     PARAMETER["False_Easting",500000.0],
>>     PARAMETER["False_Northing",0.0],
>>     PARAMETER["Central_Meridian",-105.0],
>>     PARAMETER["Scale_Factor",0.9996],
>>     PARAMETER["Latitude_Of_Origin",0.0],
>>     UNIT["Meter",1]]
>> Origin = (444345.080000000016298,4436145.280000000260770)
>> Pixel Size = (30.000000000000000,-30.000000000000000)
>> Image Structure Metadata:
>>   INTERLEAVE=BAND
>> Corner Coordinates:
>> Upper Left  (  444345.080, 4436145.280) (105d39' 9.74"W, 40d 4'25.45"N)
>> Lower Left  (  444345.080, 4430445.280) (105d39' 7.97"W, 40d 1'20.58"N)
>> Upper Right (  454905.080, 4436145.280) (105d31'43.92"W, 40d 4'27.72"N)
>> Lower Right (  454905.080, 4430445.280) (105d31'42.49"W, 40d 1'22.85"N)
>> Center      (  449625.080, 4433295.280) (105d35'26.03"W, 40d 2'54.21"N)
>> Band 1 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 2 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 3 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 4 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 5 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 6 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 7 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 8 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 9 Block=352x1 Type=Float32, ColorInterp=Undefined
>> Band 10 Block=352x1 Type=Float32, ColorInterp=Undefined
>> ...
>> Band 4416 Block=352x1 Type=Float32, ColorInterp=Undefined
>>
>> ?
>>
>> Dominik Schneider
>> o 303.735.6296 | c 518.956.3978
>>
>>
>> On Tue, Apr 14, 2015 at 12:07 AM, Michael Sumner <mdsumner at gmail.com>
>> wrote:
>>
>>>
>>>
>>> On Tue, 14 Apr 2015 at 05:46 Dominik Schneider <
>>> Dominik.Schneider at colorado.edu> wrote:
>>>
>>>> Hi -
>>>>
>>>> I have some .mdl files from IDL with .hdr header files that I?d like to
>>>> convert to netcdf.
>>>> The following code produces a netcdf file with a subdataset for each
>>>> band in the mdl file. Is there any way to define the bands as the time
>>>> dimension, in this case 4416 hourly timesteps?
>>>>
>>>> Or is there another tool that can convert this?
>>>>
>>>> gdal_translate -of NetCDF swe.mdl swe.nc
>>>>
>>>>
>>> Can you list the metadata printed out by gdalinfo swe.mdl?  What driver
>>> is used?
>>>
>>> Does that source file have time-metadata inside it each subdataset or do
>>> you need to assign it?
>>>
>>> Generally, the subdatasets are not considered as a time series - they
>>> are more like multiple variables for the same observation (whereas a 3rd
>>> and higher dimension/s are often unrolled into a multi-attributed 2D layer
>>> and the time/z step is stored on each band -  it's a bit of a mix/clash of
>>> worlds).
>>>
>>> Can you point to and example file somewhere?  I imagine you'll need a
>>> programmed solution, but it should be pretty easy with R or python or
>>> similar.  If R is of interest you can try this and take your question to
>>> the R community:
>>>
>>> library(raster)
>>> r <- stack("swe.mdl")
>>> r <- setZ(r, [whatever the vector of dates should be])  ## pseudocode
>>> writeRaster(r, "swe.nc")
>>>
>>> That all assumes quite a lot, including available NetCDF versions and
>>> packages, required structure in the output, interpretation of the data read
>>> in,  - so it's just included as an indication how it might be done.
>>>
>>> Cheers, Mike.
>>>
>>>
>>>> Thanks
>>>> Dominik?
>>>> _______________________________________________
>>>> gdal-dev mailing list
>>>> gdal-dev at lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150414/b03e98da/attachment-0001.html>

From szekerest at gmail.com  Tue Apr 14 13:56:54 2015
From: szekerest at gmail.com (Tamas Szekeres)
Date: Tue, 14 Apr 2015 22:56:54 +0200
Subject: [gdal-dev] GDAL NuGet Package
In-Reply-To: <1429011915288-5201267.post@n6.nabble.com>
References: <1428915267090-5201018.post@n6.nabble.com>
	<CACALY+TkC-DmESf1Shza3VJF5tj2k0PJGgnZ1yyWsxQ0u=ZG1g@mail.gmail.com>
	<1429011915288-5201267.post@n6.nabble.com>
Message-ID: <CACALY+TzOfouxqaE84VBjg+SaXHEXdjohKwVncdpf47gaWykbQ@mail.gmail.com>

As far as I remember the current packages have been produced by: Felix
Obermaier <obe at ivv-aachen.de> based on the gisinternals packages.

It is interesting that 2.5+ provides better native code support. I'd be
interested in looking into that but I have no spare time in short term.

If you with to get involved in the NuGet package creation, I'd help in
providing all details about the gisinternals packaging details and the
build process.


Best regards,

Tamas



2015-04-14 13:45 GMT+02:00 drp33t <peet.whittaker at gmail.com>:

> Certainly keen to help out! Disclaimer: I'm fairly familiar with NuGet, but
> only as a consumer, never as a package creator / contributor, so let me
> know
> if I'm way off the mark with anything ;)
>
> How were the existing packages created? Looking at the
> gisinternals/buildsystem on GitHub, I assume that there are no VS .proj
> files to auto-generate the package from?
>
> The good news is that there seems to be much better support for native code
> in NuGet now (from v2.5). I don't know if this was already used or if
> something else like CoApp was used?
>
> Regards,
> Peet Whittaker
>
>
>
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/gdal-dev-GDAL-NuGet-Package-tp5201018p5201267.html
> Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150414/fab7e4c8/attachment.html>

From ragg.gdal at free.fr  Tue Apr 14 16:23:01 2015
From: ragg.gdal at free.fr (Nicolas Ragg)
Date: Wed, 15 Apr 2015 01:23:01 +0200
Subject: [gdal-dev] Trouble with French Ecw map
Message-ID: <552DA155.4060304@free.fr>

Hello all

I have a french map in ECW format, i guess it is from IGN. Srs seems ok but when i import
the thing in qgis or try to warp the file it is all shifted to north (Around
Sweden).

The output from gdalinfo 1.11 is
PROJ.4 : '+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742
+x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +to
wgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs '

OGC WKT :
PROJCS["NTF (Paris) / Centre France (deprecated)",
     GEOGCS["NTF (Paris)",
         DATUM["Nouvelle_Triangulation_Francaise_Paris",
             SPHEROID["Clarke 1880 (IGN)",6378249.2,293.4660212936265,
                 AUTHORITY["EPSG","7011"]],
             TOWGS84[-168,-60,320,0,0,0,0],
             AUTHORITY["EPSG","6807"]],
         PRIMEM["Paris",2.33722917,
             AUTHORITY["EPSG","8903"]],
         UNIT["grad",0.01570796326794897,
             AUTHORITY["EPSG","9105"]],
         AUTHORITY["EPSG","4807"]],
     PROJECTION["Lambert_Conformal_Conic_1SP"],
     PARAMETER["latitude_of_origin",52],
     PARAMETER["central_meridian",0],
     PARAMETER["scale_factor",0.99987742],
     PARAMETER["false_easting",600000],
     PARAMETER["false_northing",200000],
     UNIT["metre",1,
         AUTHORITY["EPSG","9001"]],
     AXIS["X",EAST],
     AXIS["Y",NORTH],
     AUTHORITY["EPSG","27592"]]

if i use this proj4 (from another map) (+proj=lcc +lat_1=45.89891888888889
+lat_2=47.69601444444444 +lat_0=46.8 +lon_0=2.337229169999754 +x_0=600000
+y_0=2200000 +a=6378249.2 +b=6356515.000000472 +units=m +no_defs)
it is somehow better.
I didn't have this problem with the previous gdal version we used, but it's an old one , 1.7.2 used in Nasa Worldwind.
so now, what can i say, is there something wrong with my source file? do i have to provide gdal with clue to how interpret this srs?
Is there an issue with old ECW plugin?

Regards

Nicolas


From andre+joost at nurfuerspam.de  Tue Apr 14 21:15:06 2015
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Wed, 15 Apr 2015 06:15:06 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <552DA155.4060304@free.fr>
References: <552DA155.4060304@free.fr>
Message-ID: <mgkokc$knt$1@ger.gmane.org>

Am 15.04.2015 um 01:23 schrieb Nicolas Ragg:
> Hello all
>
> I have a french map in ECW format, i guess it is from IGN. Srs seems ok
> but when i import
> the thing in qgis or try to warp the file it is all shifted to north
> (Around
> Sweden).
>
> The output from gdalinfo 1.11 is
> PROJ.4 : '+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742
> +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +to
> wgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs '
>
> OGC WKT :
> PROJCS["NTF (Paris) / Centre France (deprecated)",
>      GEOGCS["NTF (Paris)",
>          DATUM["Nouvelle_Triangulation_Francaise_Paris",
>              SPHEROID["Clarke 1880 (IGN)",6378249.2,293.4660212936265,
>                  AUTHORITY["EPSG","7011"]],
>              TOWGS84[-168,-60,320,0,0,0,0],
>              AUTHORITY["EPSG","6807"]],
>          PRIMEM["Paris",2.33722917,
>              AUTHORITY["EPSG","8903"]],
>          UNIT["grad",0.01570796326794897,
>              AUTHORITY["EPSG","9105"]],
>          AUTHORITY["EPSG","4807"]],
>      PROJECTION["Lambert_Conformal_Conic_1SP"],
>      PARAMETER["latitude_of_origin",52],
>      PARAMETER["central_meridian",0],
>      PARAMETER["scale_factor",0.99987742],
>      PARAMETER["false_easting",600000],
>      PARAMETER["false_northing",200000],
>      UNIT["metre",1,
>          AUTHORITY["EPSG","9001"]],
>      AXIS["X",EAST],
>      AXIS["Y",NORTH],
>      AUTHORITY["EPSG","27592"]]
>
> if i use this proj4 (from another map) (+proj=lcc +lat_1=45.89891888888889
> +lat_2=47.69601444444444 +lat_0=46.8 +lon_0=2.337229169999754 +x_0=600000
> +y_0=2200000 +a=6378249.2 +b=6356515.000000472 +units=m +no_defs)
> it is somehow better.

The false northing of both projection definitions differs by 2000 km. 
That is probably the reason why you get the shift.

HTH,
Andr? Joost



From jrepetto at free.fr  Tue Apr 14 22:59:11 2015
From: jrepetto at free.fr (Jean-Claude Repetto)
Date: Wed, 15 Apr 2015 07:59:11 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <552DA155.4060304@free.fr>
References: <552DA155.4060304@free.fr>
Message-ID: <552DFE2F.5050700@free.fr>

Le 15/04/2015 01:23, Nicolas Ragg a ?crit :
> Hello all
>
> I have a french map in ECW format, i guess it is from IGN. Srs seems ok
> but when i import
> the thing in qgis or try to warp the file it is all shifted to north
> (Around
> Sweden).
>

Please run the command : gdalinfo -mdd ECW file.ecw
What are the metadata (ECW) :
PROJ= ?
DATUM= ?

Jean-Claude



From even.rouault at spatialys.com  Wed Apr 15 09:15:45 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 15 Apr 2015 18:15:45 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
Message-ID: <201504151815.45808.even.rouault@spatialys.com>

Hi,

I've collected in http://trac.osgeo.org/gdal/ticket/5924 a summary of issues 
and findings when trying to write GeoTIFF files in EPSG:3857 in a "standard" way 
(using ProjectedCSTypeGeoKey = 3857), while making them correctly displayed by 
ArcGIS (and ideally by other independant implementations).
The current situation is that there's no such way (AFAIK). I'd appreciate any 
feedback/suggestion related to that issue.

Best regards,

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From lhomme.xavier at gmail.com  Wed Apr 15 09:21:51 2015
From: lhomme.xavier at gmail.com (xavier lhomme)
Date: Wed, 15 Apr 2015 18:21:51 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504151815.45808.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
Message-ID: <CACqzBMwOi7Ochn-ps1WQ-B7zaOw3xYU4a1x0xPS7PwHU9MpvaA@mail.gmail.com>

Dis you try with 102113 or 102100  instead of 3857 ? I had once to use
those code in order to be discovered as 3857 in arcgis. when i created
geotiff with gdal warp/transform.
Le 15 avr. 2015 18:16, "Even Rouault" <even.rouault at spatialys.com> a ?crit :

> Hi,
>
> I've collected in http://trac.osgeo.org/gdal/ticket/5924 a summary of
> issues
> and findings when trying to write GeoTIFF files in EPSG:3857 in a
> "standard" way
> (using ProjectedCSTypeGeoKey = 3857), while making them correctly
> displayed by
> ArcGIS (and ideally by other independant implementations).
> The current situation is that there's no such way (AFAIK). I'd appreciate
> any
> feedback/suggestion related to that issue.
>
> Best regards,
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150415/4e98ae82/attachment.html>

From even.rouault at spatialys.com  Wed Apr 15 10:59:36 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 15 Apr 2015 19:59:36 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <CACqzBMwOi7Ochn-ps1WQ-B7zaOw3xYU4a1x0xPS7PwHU9MpvaA@mail.gmail.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<CACqzBMwOi7Ochn-ps1WQ-B7zaOw3xYU4a1x0xPS7PwHU9MpvaA@mail.gmail.com>
Message-ID: <201504151959.36977.even.rouault@spatialys.com>

Le mercredi 15 avril 2015 18:21:51, xavier lhomme a ?crit :
> Dis you try with 102113 or 102100  instead of 3857 ? I had once to use
> those code in order to be discovered as 3857 in arcgis. when i created
> geotiff with gdal warp/transform.

Xavier,

thanks for the hint. I've just tried it and thinks it qualifies as yet another 
not completely satisfactory solution.

Using -a_srs EPSG:102113 effectively results in a correctly placed geotiff in 
ArcGIS (with a warning about it being in GCS_WGS_1984_Major_Auxiliary_Sphere), 
but there are several points that are not that great :
- this is not a standard EPSG code
- due to being > 32767, it is not encoded in ProjectedCSTypeGeoKey, which was 
one of my "requirement"
- when read by GDAL, the expanded GeoTIFF definition isn't properly identified 
as WebMercator, consequently the proj.4 string lacks the "+nadgrids=@null" 
stuff, which makes it a non-complete datum definition and cause issues when 
reprojecting such GeoTIFF with GDAL (lack of datum transformation from/to the 
WGS84 datum of WebMercator). That could admitedly being tweaked in GDAL.

For the record, the GeoTIFF keys written by GDAL are:
{{{
      GTModelTypeGeoKey (Short,1): ModelTypeProjected
      GTRasterTypeGeoKey (Short,1): RasterPixelIsArea
      GTCitationGeoKey (Ascii,22): "WGS_1984_Web_Mercator"
      GeographicTypeGeoKey (Short,1): User-Defined
      GeogCitationGeoKey (Ascii,151): "GCS Name = 
GCS_WGS_1984_Major_Auxiliary_Sphere|Datum = WGS_1984_Major_Auxiliary_Sphere|
Ellipsoid = WGS_1984_Major_Auxiliary_Sphere|Primem = Greenwich|"
      GeogGeodeticDatumGeoKey (Short,1): User-Defined
      GeogAngularUnitsGeoKey (Short,1): Angular_Degree
      GeogEllipsoidGeoKey (Short,1): User-Defined
      GeogSemiMajorAxisGeoKey (Double,1): 6378137          
      GeogSemiMinorAxisGeoKey (Double,1): 6378137          
      GeogPrimeMeridianLongGeoKey (Double,1): 0                
      ProjectedCSTypeGeoKey (Short,1): User-Defined
      ProjectionGeoKey (Short,1): User-Defined
      ProjCoordTransGeoKey (Short,1): CT_Mercator
      ProjLinearUnitsGeoKey (Short,1): Linear_Meter
      ProjNatOriginLongGeoKey (Double,1): 0                
      ProjNatOriginLatGeoKey (Double,1): 0                
      ProjFalseEastingGeoKey (Double,1): 0                
      ProjFalseNorthingGeoKey (Double,1): 0                
      ProjScaleAtNatOriginGeoKey (Double,1): 1  
}}}

And GDAL reads that as :
{{{
PROJCS["WGS_1984_Web_Mercator",
    GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",
        DATUM["WGS_1984_Major_Auxiliary_Sphere",
            SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137,0]],
        PRIMEM["Greenwich",0],
        UNIT["degree",0.0174532925199433]],
    PROJECTION["Mercator_1SP"],
    PARAMETER["central_meridian",0],
    PARAMETER["scale_factor",1],
    PARAMETER["false_easting",0],
    PARAMETER["false_northing",0],
    UNIT["metre",1,
        AUTHORITY["EPSG","9001"]]]
}}}
(not sure why it lacks the latitude_of_origin,  but that's another minor 
issue)

ArcCatalog identifies the SRS as:
{{{
WGS_1984_Web_Mercator
WKID: 3785 Authority: EPSG

Projection: Mercator
false_easting: 0.0
false_northing: 0.0
central_meridian: 0.0
standard_parallel_1: 0.0
Linear Unit: Meter (1.0)

Geographic Coordinate System: GCS_WGS_1984_Major_Auxiliary_Sphere
Angular Unit: Degree (0.0174532925199433)
Prime Meridian: Greenwich (0.0)
Datum: D_WGS_1984_Major_Auxiliary_Sphere
  Spheroid: WGS_1984_Major_Auxiliary_Sphere
    Semimajor Axis: 6378137.0
    Semiminor Axis: 6378137.0
    Inverse Flattening: 0.0
}}}

Even

> 
> Le 15 avr. 2015 18:16, "Even Rouault" <even.rouault at spatialys.com> a ?crit :
> > Hi,
> > 
> > I've collected in http://trac.osgeo.org/gdal/ticket/5924 a summary of
> > issues
> > and findings when trying to write GeoTIFF files in EPSG:3857 in a
> > "standard" way
> > (using ProjectedCSTypeGeoKey = 3857), while making them correctly
> > displayed by
> > ArcGIS (and ideally by other independant implementations).
> > The current situation is that there's no such way (AFAIK). I'd appreciate
> > any
> > feedback/suggestion related to that issue.
> > 
> > Best regards,
> > 
> > Even
> > 
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From josh at nside.io  Wed Apr 15 11:58:46 2015
From: josh at nside.io (Dr. Joshua Jackson)
Date: Wed, 15 Apr 2015 13:58:46 -0500
Subject: [gdal-dev] Setting up C++ environment with GDAL on CentOS
Message-ID: <74DCE368-C7EF-4EC4-84C1-0A83C6745ABF@nside.io>

Hey GDAL Team - I have a server running CentOS 6.  I have downloaded the complete 1.11.2 source and successfully built and installed GDAL.

I am now trying to make my C++ program which uses GDAL and I?m not having any luck.  I get an ?unknown reference? error on all my calls to GDAL methods. (GDALAllRegister, GDALOpen, etc).

On my #include I get an error if I use #include ?gdal/gdal_priv.h?; but it makes it past that point if I use #include ?gdal_priv.h? alone.

I am using cmake with this project and here is my CMakeLists.txt below.  I have manually set GDAL_INCLUDE_DIRS to be /usr/local/lib which is where all the libgdal*.so files are located.

cmake_minimum_required(VERSION 2.8)
project( AerialMask )
find_package( OpenCV )
find_package( GDAL )
include_directories( 
	${OpenCV_INCLUDE_DIRS}
	 ${GDAL_INCLUDE_DIRS}
)
add_executable( AerialMask AerialMask.cpp )
target_link_libraries( AerialMask ${OpenCV_LIBS} )


Joshua Jackson, PhD
Senior ResearchEngineer
 (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
 josh at nside.io <mailto:josh at nside.io>   www.nSide.io
 <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150415/f64c071a/attachment.html>

From kyle at pobox.com  Wed Apr 15 12:10:44 2015
From: kyle at pobox.com (Kyle Shannon)
Date: Wed, 15 Apr 2015 13:10:44 -0600
Subject: [gdal-dev] Setting up C++ environment with GDAL on CentOS
In-Reply-To: <74DCE368-C7EF-4EC4-84C1-0A83C6745ABF@nside.io>
References: <74DCE368-C7EF-4EC4-84C1-0A83C6745ABF@nside.io>
Message-ID: <552EB7B4.3040100@pobox.com>

Joshua,

On 04/15/2015 12:58 PM, Dr. Joshua Jackson wrote:
> Hey GDAL Team - I have a server running CentOS 6.  I have downloaded the
> complete 1.11.2 source and successfully built and installed GDAL.
>
> I am now trying to make my C++ program which uses GDAL and I?m not
> having any luck.  I get an ?unknown reference? error on all my calls to
> GDAL methods. (GDALAllRegister, GDALOpen, etc).
>
> On my #include I get an error if I use #include ?gdal/gdal_priv.h?; but
> it makes it past that point if I use #include ?gdal_priv.h? alone.

#include "gdal_priv.h" is the proper syntax.  If you use a pre-built 
package from ubuntu or fedora or other package maintainer, they 
sometimes install the headers in a folder named gdal.  The standard 
build does not.

>
> I am using cmake with this project and here is my CMakeLists.txt below.
>   I have manually set GDAL_INCLUDE_DIRS to be /usr/local/lib which is
> where all the libgdal*.so files are located.

I believe the proper name is GDAL_INCLUDE_DIR and it needs to point to 
the headers so it should be /usr/local/include (assuming a standard 
installation, see above).

>
> cmake_minimum_required(VERSION 2.8)
> project( AerialMask )
> find_package( OpenCV )
> find_package( GDAL )
> include_directories(
> ${OpenCV_INCLUDE_DIRS}
> ${GDAL_INCLUDE_DIRS}
> )
> add_executable( AerialMask AerialMask.cpp )
> target_link_libraries( AerialMask ${OpenCV_LIBS} )

You need to link to libgdal, so:

target_link_libraries( AerialMask ${OpenCV_LIBS} ${GDAL_LIBRARY} )

>
> 	
>
> Joshua Jackson, PhD
>
> Senior ResearchEngineer
>
> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>(256) 648-5109
> <tel:2566485109>
>
> josh at nside.io <mailto:josh at nside.io>www.nSide.io <http://www.nSide.io>
>
> <http://www.nside.io/>4031 Parkway Dr, Suite B, Florence, AL 35630
>
> <http://www.linkedin.com/company/nside/><http://twitter.com/nSide__Out>
>
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>

kss

-- 
Kyle

From andre.vautour at caris.com  Wed Apr 15 12:40:21 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Wed, 15 Apr 2015 16:40:21 -0300
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504151959.36977.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<CACqzBMwOi7Ochn-ps1WQ-B7zaOw3xYU4a1x0xPS7PwHU9MpvaA@mail.gmail.com>
	<201504151959.36977.even.rouault@spatialys.com>
Message-ID: <552EBEA5.6080102@caris.com>


On 2015-04-15 14:59, Even Rouault wrote:
> Le mercredi 15 avril 2015 18:21:51, xavier lhomme a ?crit :
>> Dis you try with 102113 or 102100  instead of 3857 ? I had once to use
>> those code in order to be discovered as 3857 in arcgis. when i created
>> geotiff with gdal warp/transform.
> Xavier,
>
> thanks for the hint. I've just tried it and thinks it qualifies as yet another
> not completely satisfactory solution.
>
> Using -a_srs EPSG:102113 effectively results in a correctly placed geotiff in
> ArcGIS (with a warning about it being in GCS_WGS_1984_Major_Auxiliary_Sphere),
> but there are several points that are not that great :
> - this is not a standard EPSG code
> - due to being > 32767, it is not encoded in ProjectedCSTypeGeoKey, which was
> one of my "requirement"
> - when read by GDAL, the expanded GeoTIFF definition isn't properly identified
> as WebMercator, consequently the proj.4 string lacks the "+nadgrids=@null"
> stuff, which makes it a non-complete datum definition and cause issues when
> reprojecting such GeoTIFF with GDAL (lack of datum transformation from/to the
> WGS84 datum of WebMercator). That could admitedly being tweaked in GDAL.
>
> For the record, the GeoTIFF keys written by GDAL are:
> {{{
>        GTModelTypeGeoKey (Short,1): ModelTypeProjected
>        GTRasterTypeGeoKey (Short,1): RasterPixelIsArea
>        GTCitationGeoKey (Ascii,22): "WGS_1984_Web_Mercator"
>        GeographicTypeGeoKey (Short,1): User-Defined
>        GeogCitationGeoKey (Ascii,151): "GCS Name =
> GCS_WGS_1984_Major_Auxiliary_Sphere|Datum = WGS_1984_Major_Auxiliary_Sphere|
> Ellipsoid = WGS_1984_Major_Auxiliary_Sphere|Primem = Greenwich|"
>        GeogGeodeticDatumGeoKey (Short,1): User-Defined
>        GeogAngularUnitsGeoKey (Short,1): Angular_Degree
>        GeogEllipsoidGeoKey (Short,1): User-Defined
>        GeogSemiMajorAxisGeoKey (Double,1): 6378137
>        GeogSemiMinorAxisGeoKey (Double,1): 6378137
>        GeogPrimeMeridianLongGeoKey (Double,1): 0
>        ProjectedCSTypeGeoKey (Short,1): User-Defined
>        ProjectionGeoKey (Short,1): User-Defined
>        ProjCoordTransGeoKey (Short,1): CT_Mercator
>        ProjLinearUnitsGeoKey (Short,1): Linear_Meter
>        ProjNatOriginLongGeoKey (Double,1): 0
>        ProjNatOriginLatGeoKey (Double,1): 0
>        ProjFalseEastingGeoKey (Double,1): 0
>        ProjFalseNorthingGeoKey (Double,1): 0
>        ProjScaleAtNatOriginGeoKey (Double,1): 1
> }}}
>
> And GDAL reads that as :
> {{{
> PROJCS["WGS_1984_Web_Mercator",
>      GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",
>          DATUM["WGS_1984_Major_Auxiliary_Sphere",
>              SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137,0]],
>          PRIMEM["Greenwich",0],
>          UNIT["degree",0.0174532925199433]],
>      PROJECTION["Mercator_1SP"],
>      PARAMETER["central_meridian",0],
>      PARAMETER["scale_factor",1],
>      PARAMETER["false_easting",0],
>      PARAMETER["false_northing",0],
>      UNIT["metre",1,
>          AUTHORITY["EPSG","9001"]]]
> }}}
> (not sure why it lacks the latitude_of_origin,  but that's another minor
> issue)
>
> ArcCatalog identifies the SRS as:
> {{{
> WGS_1984_Web_Mercator
> WKID: 3785 Authority: EPSG
>
> Projection: Mercator
> false_easting: 0.0
> false_northing: 0.0
> central_meridian: 0.0
> standard_parallel_1: 0.0
> Linear Unit: Meter (1.0)
>
> Geographic Coordinate System: GCS_WGS_1984_Major_Auxiliary_Sphere
> Angular Unit: Degree (0.0174532925199433)
> Prime Meridian: Greenwich (0.0)
> Datum: D_WGS_1984_Major_Auxiliary_Sphere
>    Spheroid: WGS_1984_Major_Auxiliary_Sphere
>      Semimajor Axis: 6378137.0
>      Semiminor Axis: 6378137.0
>      Inverse Flattening: 0.0
> }}}
>
> Even

The way I see it, there are two different ways to model Google Mercator:
1. As a WGS84 datum/ellipsoid with a custom Mercator-based projection 
which uses only the semi-major axis, as seems to be currently done in 
EPSG: http://epsg-registry.org/export.htm?wkt=urn:ogc:def:crs:EPSG::3857
2. As the Google spheroid with Mercator 1SP and no transformation when 
going to WGS 84.

I don't think #1 is currently an option given the list of coordinate 
transformation codes available in the GeoTIFF specification.

For #2, I would think/hope that if you specified the identity 
7-parameter transformation in the GeoTIFF header, ArcGIS would properly 
reproject the image:
http://trac.osgeo.org/geotiff/ticket/26

Andr?


From josh at nside.io  Wed Apr 15 12:42:04 2015
From: josh at nside.io (Dr. Joshua Jackson)
Date: Wed, 15 Apr 2015 14:42:04 -0500
Subject: [gdal-dev] Setting up C++ environment with GDAL on CentOS
In-Reply-To: <552EB7B4.3040100@pobox.com>
References: <74DCE368-C7EF-4EC4-84C1-0A83C6745ABF@nside.io>
	<552EB7B4.3040100@pobox.com>
Message-ID: <E71A0E62-825D-42E9-AA93-1D96B688E146@nside.io>

Thanks!  That worked great!


Joshua Jackson, PhD
Senior ResearchEngineer
 (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
 josh at nside.io <mailto:josh at nside.io>   www.nSide.io
 <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
> On Apr 15, 2015, at 2:10 PM, Kyle Shannon <kyle at pobox.com> wrote:
> 
> Joshua,
> 
> On 04/15/2015 12:58 PM, Dr. Joshua Jackson wrote:
>> Hey GDAL Team - I have a server running CentOS 6.  I have downloaded the
>> complete 1.11.2 source and successfully built and installed GDAL.
>> 
>> I am now trying to make my C++ program which uses GDAL and I?m not
>> having any luck.  I get an ?unknown reference? error on all my calls to
>> GDAL methods. (GDALAllRegister, GDALOpen, etc).
>> 
>> On my #include I get an error if I use #include ?gdal/gdal_priv.h?; but
>> it makes it past that point if I use #include ?gdal_priv.h? alone.
> 
> #include "gdal_priv.h" is the proper syntax.  If you use a pre-built package from ubuntu or fedora or other package maintainer, they sometimes install the headers in a folder named gdal.  The standard build does not.
> 
>> 
>> I am using cmake with this project and here is my CMakeLists.txt below.
>>  I have manually set GDAL_INCLUDE_DIRS to be /usr/local/lib which is
>> where all the libgdal*.so files are located.
> 
> I believe the proper name is GDAL_INCLUDE_DIR and it needs to point to the headers so it should be /usr/local/include (assuming a standard installation, see above).
> 
>> 
>> cmake_minimum_required(VERSION 2.8)
>> project( AerialMask )
>> find_package( OpenCV )
>> find_package( GDAL )
>> include_directories(
>> ${OpenCV_INCLUDE_DIRS}
>> ${GDAL_INCLUDE_DIRS}
>> )
>> add_executable( AerialMask AerialMask.cpp )
>> target_link_libraries( AerialMask ${OpenCV_LIBS} )
> 
> You need to link to libgdal, so:
> 
> target_link_libraries( AerialMask ${OpenCV_LIBS} ${GDAL_LIBRARY} )
> 
>> 
>> 	
>> 
>> Joshua Jackson, PhD
>> 
>> Senior ResearchEngineer
>> 
>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>(256) 648-5109
>> <tel:2566485109>
>> 
>> josh at nside.io <mailto:josh at nside.io>www.nSide.io <http://www.nSide.io>
>> 
>> <http://www.nside.io/>4031 Parkway Dr, Suite B, Florence, AL 35630
>> 
>> <http://www.linkedin.com/company/nside/><http://twitter.com/nSide__Out>
>> 
>> 
>> 
>> 
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>> 
> 
> kss
> 
> -- 
> Kyle
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150415/1c687e41/attachment.html>

From josh at nside.io  Wed Apr 15 12:46:26 2015
From: josh at nside.io (Dr. Joshua Jackson)
Date: Wed, 15 Apr 2015 14:46:26 -0500
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
Message-ID: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>

I?m looking for a good solution to copy the image meta data from one JP2 to another JP2 in C++.  I have a folder full of 4096x4096 JPEG2000 images that I am processing with OpenCV.  On some of them I create a copy of the image and do some manipulations to.  As expected the new image file is missing all the metadata.

I have tried using CreateCopy() with the OpenJPEG library; and while this does work it takes a really long time per image ~40sec.  (My image manipulations take only ~10sec).

Is there some way to use the GetGDALDataSet() on the source file and then call SetMetaData() on the destination file for each meta data item?  How would one iterate through the metadata items?

Here is a sample GDALInfo printout for a source image:

Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
Files: middle_mask.jp2
Size is 4096, 4096
Coordinate System is:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0],
    UNIT["degree",0.0174532925199433],
    AUTHORITY["EPSG","4326"]]
Origin = (-96.965332031250000,32.464599609375000)
Pixel Size = (0.000001341104507,-0.000001341104507)
Image Structure Metadata:
  INTERLEAVE=PIXEL
Corner Coordinates:
Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W, 32d27'52.56"N)
Lower Left  ( -96.9653320,  32.4591064) ( 96d57'55.20"W, 32d27'32.78"N)
Upper Right ( -96.9598389,  32.4645996) ( 96d57'35.42"W, 32d27'52.56"N)
Lower Right ( -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N)
Center      ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N)
Band 1 Block=1024x1024 Type=Byte, ColorInterp=Red
  Overviews: 2048x2048, 1024x1024, 512x512, 256x256
  Overviews: arbitrary
Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
  Overviews: 2048x2048, 1024x1024, 512x512, 256x256
  Overviews: arbitrary
Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
  Overviews: 2048x2048, 1024x1024, 512x512, 256x256
  Overviews: arbitrary


Joshua Jackson, PhD
Senior ResearchEngineer
 (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
 josh at nside.io <mailto:josh at nside.io>   www.nSide.io
 <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150415/ef9ada61/attachment-0001.html>

From norman at cloudant.com  Wed Apr 15 12:52:19 2015
From: norman at cloudant.com (Norman Barker)
Date: Wed, 15 Apr 2015 13:52:19 -0600
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
In-Reply-To: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
References: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
Message-ID: <CACSHx9=T9D5jevSvEEdYiH613GzhzGXKXzoVsHOeyqLxBpBW0Q@mail.gmail.com>

A JP2 is just a JPEG2000 codestream with a JPEG2000 header, as soon as you
get to the SOC marker then you have all the metadata. Alternatively you
could use the JPX file format to store the metadata separately to the
codestream.

I probably wouldn't use GDAL for this task, just read the metadata until
you hit the SOC marker.


Norman

On Wed, Apr 15, 2015 at 1:46 PM, Dr. Joshua Jackson <josh at nside.io> wrote:

> I?m looking for a good solution to copy the image meta data from one JP2
> to another JP2 in C++.  I have a folder full of 4096x4096 JPEG2000 images
> that I am processing with OpenCV.  On some of them I create a copy of the
> image and do some manipulations to.  As expected the new image file is
> missing all the metadata.
>
> I have tried using CreateCopy() with the OpenJPEG library; and while this
> does work it takes a really long time per image ~40sec.  (My image
> manipulations take only ~10sec).
>
> Is there some way to use the GetGDALDataSet() on the source file and then
> call SetMetaData() on the destination file for each meta data item?  How
> would one iterate through the metadata items?
>
> Here is a sample GDALInfo printout for a source image:
>
> Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
> Files: middle_mask.jp2
> Size is 4096, 4096
> Coordinate System is:
> GEOGCS["WGS 84",
>     DATUM["WGS_1984",
>         SPHEROID["WGS 84",6378137,298.257223563,
>             AUTHORITY["EPSG","7030"]],
>         AUTHORITY["EPSG","6326"]],
>     PRIMEM["Greenwich",0],
>     UNIT["degree",0.0174532925199433],
>     AUTHORITY["EPSG","4326"]]
> Origin = (-96.965332031250000,32.464599609375000)
> Pixel Size = (0.000001341104507,-0.000001341104507)
> Image Structure Metadata:
>   INTERLEAVE=PIXEL
> Corner Coordinates:
> Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W, 32d27'52.56"N)
> Lower Left  ( -96.9653320,  32.4591064) ( 96d57'55.20"W, 32d27'32.78"N)
> Upper Right ( -96.9598389,  32.4645996) ( 96d57'35.42"W, 32d27'52.56"N)
> Lower Right ( -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N)
> Center      ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N)
> Band 1 Block=1024x1024 Type=Byte, ColorInterp=Red
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
>
> Joshua Jackson, PhD
>
> Senior ResearchEngineer
>
> (800) 604-1822 Ext. 5109 <8006041822,5109>   (256) 648-5109 <2566485109>
>
> josh at nside.io   www.nSide.io
>
> <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
>
>  <http://www.linkedin.com/company/nside/> <http://twitter.com/nSide__Out>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150415/1dc23128/attachment.html>

From josh at nside.io  Wed Apr 15 12:56:04 2015
From: josh at nside.io (Dr. Joshua Jackson)
Date: Wed, 15 Apr 2015 14:56:04 -0500
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
In-Reply-To: <CACSHx9=T9D5jevSvEEdYiH613GzhzGXKXzoVsHOeyqLxBpBW0Q@mail.gmail.com>
References: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
	<CACSHx9=T9D5jevSvEEdYiH613GzhzGXKXzoVsHOeyqLxBpBW0Q@mail.gmail.com>
Message-ID: <28EBAC3B-69D5-4602-A860-2E746BAE96D3@nside.io>

Norman, do you have a recommended library to do that?  Like Exiv2?


Joshua Jackson, PhD
Senior ResearchEngineer
 (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
 josh at nside.io <mailto:josh at nside.io>   www.nSide.io
 <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
> On Apr 15, 2015, at 2:52 PM, Norman Barker <norman at cloudant.com> wrote:
> 
> A JP2 is just a JPEG2000 codestream with a JPEG2000 header, as soon as you get to the SOC marker then you have all the metadata. Alternatively you could use the JPX file format to store the metadata separately to the codestream.
> 
> I probably wouldn't use GDAL for this task, just read the metadata until you hit the SOC marker.
> 
> 
> Norman
> 
> On Wed, Apr 15, 2015 at 1:46 PM, Dr. Joshua Jackson <josh at nside.io <mailto:josh at nside.io>> wrote:
> I?m looking for a good solution to copy the image meta data from one JP2 to another JP2 in C++.  I have a folder full of 4096x4096 JPEG2000 images that I am processing with OpenCV.  On some of them I create a copy of the image and do some manipulations to.  As expected the new image file is missing all the metadata.
> 
> I have tried using CreateCopy() with the OpenJPEG library; and while this does work it takes a really long time per image ~40sec.  (My image manipulations take only ~10sec).
> 
> Is there some way to use the GetGDALDataSet() on the source file and then call SetMetaData() on the destination file for each meta data item?  How would one iterate through the metadata items?
> 
> Here is a sample GDALInfo printout for a source image:
> 
> Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
> Files: middle_mask.jp2
> Size is 4096, 4096
> Coordinate System is:
> GEOGCS["WGS 84",
>     DATUM["WGS_1984",
>         SPHEROID["WGS 84",6378137,298.257223563,
>             AUTHORITY["EPSG","7030"]],
>         AUTHORITY["EPSG","6326"]],
>     PRIMEM["Greenwich",0],
>     UNIT["degree",0.0174532925199433],
>     AUTHORITY["EPSG","4326"]]
> Origin = (-96.965332031250000,32.464599609375000)
> Pixel Size = (0.000001341104507,-0.000001341104507)
> Image Structure Metadata:
>   INTERLEAVE=PIXEL
> Corner Coordinates:
> Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W, 32d27'52.56"N)
> Lower Left  ( -96.9653320,  32.4591064) ( 96d57'55.20"W, 32d27'32.78"N)
> Upper Right ( -96.9598389,  32.4645996) ( 96d57'35.42"W, 32d27'52.56"N)
> Lower Right ( -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N)
> Center      ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N)
> Band 1 Block=1024x1024 Type=Byte, ColorInterp=Red
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> 
> 
> Joshua Jackson, PhD
> Senior ResearchEngineer
>  (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
>  josh at nside.io <mailto:josh at nside.io>   www.nSide.io <http://www.nside.io/>
>  <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
>   <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>
> http://lists.osgeo.org/mailman/listinfo/gdal-dev <http://lists.osgeo.org/mailman/listinfo/gdal-dev>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150415/cf7c7784/attachment-0001.html>

From even.rouault at spatialys.com  Wed Apr 15 13:06:37 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 15 Apr 2015 22:06:37 +0200
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
In-Reply-To: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
References: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
Message-ID: <201504152206.37920.even.rouault@spatialys.com>

Le mercredi 15 avril 2015 21:46:26, Dr. Joshua Jackson a ?crit :
> I?m looking for a good solution to copy the image meta data from one JP2 to
> another JP2 in C++.  I have a folder full of 4096x4096 JPEG2000 images
> that I am processing with OpenCV.  On some of them I create a copy of the
> image and do some manipulations to.  As expected the new image file is
> missing all the metadata.
> 
> I have tried using CreateCopy() with the OpenJPEG library; and while this
> does work it takes a really long time per image ~40sec.  (My image
> manipulations take only ~10sec).
> 
> Is there some way to use the GetGDALDataSet() on the source file and then
> call SetMetaData() on the destination file for each meta data item?  How
> would one iterate through the metadata items?

The "metadata" you're talking about are more the georeferencing info, right ? 
(In GDAL "metadata" is about all other metadata, excluding the georeferencing)

If you use trunk, you could likely try the new USE_SRC_CODESTREAM=YES creation 
open of the jp2openjpeg driver

Something like:

gdal_translate your_jp2_without_georef.jp2 out.jp2 -co  USE_SRC_CODESTREAM=YES 
-a_srs EPSG:4326 -a_ullr  -96.9653320  32.4645996  -96.9598389 32.4591064

The SetGeoTransform() and SetProjection() API also do something similar 
internally, so you could also do :

gdal_edit.py your_jp2_without_georef.jp2 -a_srs EPSG:4326 -a_ullr  -96.9653320  
32.4645996  -96.9598389 32.4591064

or more conveniently:

gdalcopyproj.py middle_mask.jp2 out.jp2

(http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj.py)

Even

> 
> Here is a sample GDALInfo printout for a source image:
> 
> Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
> Files: middle_mask.jp2
> Size is 4096, 4096
> Coordinate System is:
> GEOGCS["WGS 84",
>     DATUM["WGS_1984",
>         SPHEROID["WGS 84",6378137,298.257223563,
>             AUTHORITY["EPSG","7030"]],
>         AUTHORITY["EPSG","6326"]],
>     PRIMEM["Greenwich",0],
>     UNIT["degree",0.0174532925199433],
>     AUTHORITY["EPSG","4326"]]
> Origin = (-96.965332031250000,32.464599609375000)
> Pixel Size = (0.000001341104507,-0.000001341104507)
> Image Structure Metadata:
>   INTERLEAVE=PIXEL
> Corner Coordinates:
> Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W, 32d27'52.56"N)
> Lower Left  ( -96.9653320,  32.4591064) ( 96d57'55.20"W, 32d27'32.78"N)
> Upper Right ( -96.9598389,  32.4645996) ( 96d57'35.42"W, 32d27'52.56"N)
> Lower Right ( -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N)
> Center      ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N)
> Band 1 Block=1024x1024 Type=Byte, ColorInterp=Red
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
>   Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>   Overviews: arbitrary
> 
> 
> Joshua Jackson, PhD
> Senior ResearchEngineer
>  (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>   www.nSide.io
>  <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
>   <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Wed Apr 15 13:14:37 2015
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Wed, 15 Apr 2015 23:14:37 +0300
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504151815.45808.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
Message-ID: <552EC6AD.4050805@gmail.com>

As for me the main problem is, that gdal write wrong WKT for 3857 
(http://trac.osgeo.org/gdal/ticket/3962).
The Geographic SRS use WGS84 ellipsoid 
(SPHEROID["WGS_1984",6378137,298.257223563]]) instead sphere 
(EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 
+lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext 
+no_defs"],) and all the data shifts.

Best regards,
     Dmitry

15.04.2015 19:15, Even Rouault ?????:
> Hi,
>
> I've collected in http://trac.osgeo.org/gdal/ticket/5924 a summary of issues
> and findings when trying to write GeoTIFF files in EPSG:3857 in a "standard" way
> (using ProjectedCSTypeGeoKey = 3857), while making them correctly displayed by
> ArcGIS (and ideally by other independant implementations).
> The current situation is that there's no such way (AFAIK). I'd appreciate any
> feedback/suggestion related to that issue.
>
> Best regards,
>
> Even
>


From even.rouault at spatialys.com  Wed Apr 15 13:46:49 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 15 Apr 2015 22:46:49 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <552EC6AD.4050805@gmail.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<552EC6AD.4050805@gmail.com>
Message-ID: <201504152246.50086.even.rouault@spatialys.com>

Le mercredi 15 avril 2015 22:14:37, Dmitry Baryshnikov a ?crit :
> As for me the main problem is, that gdal write wrong WKT for 3857
> (http://trac.osgeo.org/gdal/ticket/3962).
> The Geographic SRS use WGS84 ellipsoid
> (SPHEROID["WGS_1984",6378137,298.257223563]]) instead sphere
> (EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0
> +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext
> +no_defs"],) and all the data shifts.

I do think that the above SPHEROID WKT and Proj.4 are both OK, even if they 
don't look consistent. 
The datum is technically WGS84 datum (ellipsoidal), even if the projection 
only uses the semi major axis (spherical). This is all the hell of this 
WebMercator projection ! We use a hack of proj.4 to use classical mercator 
transformation with spherical parameters, while still being considered as a 
WGS84 datum. When reprojecting from a non-WGS 84 datum (let's say EPSG:4322) 
to EPSG:3857, the datum transformation should be from this non-WGS 84 to 
ellipsoid WGS 84, and then the WebMercator projection uses the spherical 
parameters to compute the easting/northing.

Look:

1) Normal EPSG:3857 transformation (with +nadgrids=@null) :

$ echo "2 49" | gdaltransform -s_srs EPSG:4322 -t_srs EPSG:3857
222656.112419298 6274866.20215882 2.9538588412106

--> correct. Same result as operating in 2 steps :

$ echo "2 49" | gdaltransform -s_srs EPSG:4322 -t_srs EPSG:4326 | 
gdaltransform -s_srs EPSG:4326 -t_srs EPSG:3857
222656.112419298 6274866.20215883 2.9538588412106

2) Incorrect definition using +towgs84=0,0,0,0,0,0,0 :

$ gdaltransform -s_srs EPSG:4322 -t_srs "+proj=merc +a=6378137 +b=6378137 
+lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +towgs84=0,0,0,0,0,0,0"
2 49
222656.112419297 6242580.32725437 -12133.4419494262

2 49 is transformed from EPSG:4322 datum to a spherical datum, instead to the 
ellipsoid WGS84 datum.

3) Incorrect definition without +towgs84 or +nadgrids=@null : no datum 
transformation at all is done since its only an ellipsoid definition, and 
proj.4 will not do any ellipsoid transformation in that case

$ gdaltransform -s_srs EPSG:4322 -t_srs "+proj=merc +a=6378137 +b=6378137 
+lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m"
2 49
222638.981586547 6274861.39400658 0


> 
> Best regards,
>      Dmitry
> 
> 15.04.2015 19:15, Even Rouault ?????:
> > Hi,
> > 
> > I've collected in http://trac.osgeo.org/gdal/ticket/5924 a summary of
> > issues and findings when trying to write GeoTIFF files in EPSG:3857 in a
> > "standard" way (using ProjectedCSTypeGeoKey = 3857), while making them
> > correctly displayed by ArcGIS (and ideally by other independant
> > implementations).
> > The current situation is that there's no such way (AFAIK). I'd appreciate
> > any feedback/suggestion related to that issue.
> > 
> > Best regards,
> > 
> > Even
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Wed Apr 15 13:48:45 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 15 Apr 2015 22:48:45 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <552EBEA5.6080102@caris.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504151959.36977.even.rouault@spatialys.com>
	<552EBEA5.6080102@caris.com>
Message-ID: <201504152248.45608.even.rouault@spatialys.com>

> 
> The way I see it, there are two different ways to model Google Mercator:
> 1. As a WGS84 datum/ellipsoid with a custom Mercator-based projection
> which uses only the semi-major axis, as seems to be currently done in
> EPSG: http://epsg-registry.org/export.htm?wkt=urn:ogc:def:crs:EPSG::3857
> 2. As the Google spheroid with Mercator 1SP and no transformation when
> going to WGS 84.
> 
> I don't think #1 is currently an option given the list of coordinate
> transformation codes available in the GeoTIFF specification.

Right, there's no such coordinate transformation for GeoTIFF

> 
> For #2, I would think/hope that if you specified the identity
> 7-parameter transformation in the GeoTIFF header, ArcGIS would properly
> reproject the image:

Hum, this will not work I'm afraid. See my response to Dmitry's to see why 
+towgs84=0,0,0,0,0,0,0 is not appropriate.
(Plus the fact that the +towgs84 in geotiff is probably not very widely 
supported.)

> http://trac.osgeo.org/geotiff/ticket/26
> 
> Andr?
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Wed Apr 15 14:02:34 2015
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Thu, 16 Apr 2015 00:02:34 +0300
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504152246.50086.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<552EC6AD.4050805@gmail.com>
	<201504152246.50086.even.rouault@spatialys.com>
Message-ID: <552ED1EA.6050301@gmail.com>


15.04.2015 23:46, Even Rouault ?????:
> Le mercredi 15 avril 2015 22:14:37, Dmitry Baryshnikov a ?crit :
>> As for me the main problem is, that gdal write wrong WKT for 3857
>> (http://trac.osgeo.org/gdal/ticket/3962).
>> The Geographic SRS use WGS84 ellipsoid
>> (SPHEROID["WGS_1984",6378137,298.257223563]]) instead sphere
>> (EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0
>> +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext
>> +no_defs"],) and all the data shifts.
> I do think that the above SPHEROID WKT and Proj.4 are both OK, even if they
> don't look consistent.
The ArcGIS (or QGIS in qpj) save 3857 in such prj file:

PROJCS["WGS 84 / Pseudo-Mercator",
     GEOGCS["WGS 84",
         DATUM["WGS_1984",
             SPHEROID["WGS 84",6378137,298.257223563,
                 AUTHORITY["EPSG","7030"]],
             AUTHORITY["EPSG","6326"]],
         PRIMEM["Greenwich",0,
             AUTHORITY["EPSG","8901"]],
         UNIT["degree",0.0174532925199433,
             AUTHORITY["EPSG","9122"]],
         AUTHORITY["EPSG","4326"]],
     PROJECTION["Mercator_1SP"],
     PARAMETER["central_meridian",0],
     PARAMETER["scale_factor",1],
     PARAMETER["false_easting",0],
     PARAMETER["false_northing",0],
     UNIT["metre",1,
         AUTHORITY["EPSG","9001"]],
     AXIS["X",EAST],
     AXIS["Y",NORTH],
     EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 
+lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext 
+no_defs"],
     AUTHORITY["EPSG","3857"]]

And GDAL opens such shape file and set the spheroid.
But if I save the shape file in 3857 via GDAL I get ellipsoid:

   PROJCS["WGS_84_Pseudo_Mercator",
     GEOGCS["GCS_WGS_1984",
         DATUM["D_WGS_1984",
             SPHEROID["WGS_1984",6378137,298.257223563]],
         PRIMEM["Greenwich",0],
         UNIT["Degree",0.017453292519943295]],
         PROJECTION["Mercator"],
         PARAMETER["central_meridian",0],
         PARAMETER["false_easting",0],
         PARAMETER["false_northing",0],
         UNIT["Meter",1],
         PARAMETER["standard_parallel_1",0.0]]

And both GDAL(QGIS) and ArcGIS open this shape file and set the ellipsoid!

> The datum is technically WGS84 datum (ellipsoidal), even if the projection
> only uses the semi major axis (spherical). This is all the hell of this
> WebMercator projection ! We use a hack of proj.4 to use classical mercator
> transformation with spherical parameters, while still being considered as a
> WGS84 datum. When reprojecting from a non-WGS 84 datum (let's say EPSG:4322)
> to EPSG:3857, the datum transformation should be from this non-WGS 84 to
> ellipsoid WGS 84, and then the WebMercator projection uses the spherical
> parameters to compute the easting/northing.
>
> Look:
>
> 1) Normal EPSG:3857 transformation (with +nadgrids=@null) :
>
> $ echo "2 49" | gdaltransform -s_srs EPSG:4322 -t_srs EPSG:3857
> 222656.112419298 6274866.20215882 2.9538588412106
>
> --> correct. Same result as operating in 2 steps :
>
> $ echo "2 49" | gdaltransform -s_srs EPSG:4322 -t_srs EPSG:4326 |
> gdaltransform -s_srs EPSG:4326 -t_srs EPSG:3857
> 222656.112419298 6274866.20215883 2.9538588412106
>
> 2) Incorrect definition using +towgs84=0,0,0,0,0,0,0 :
>
> $ gdaltransform -s_srs EPSG:4322 -t_srs "+proj=merc +a=6378137 +b=6378137
> +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +towgs84=0,0,0,0,0,0,0"
> 2 49
> 222656.112419297 6242580.32725437 -12133.4419494262
>
> 2 49 is transformed from EPSG:4322 datum to a spherical datum, instead to the
> ellipsoid WGS84 datum.
>
> 3) Incorrect definition without +towgs84 or +nadgrids=@null : no datum
> transformation at all is done since its only an ellipsoid definition, and
> proj.4 will not do any ellipsoid transformation in that case
>
> $ gdaltransform -s_srs EPSG:4322 -t_srs "+proj=merc +a=6378137 +b=6378137
> +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m"
> 2 49
> 222638.981586547 6274861.39400658 0
>
>
>> Best regards,
>>       Dmitry
>>
>> 15.04.2015 19:15, Even Rouault ?????:
>>> Hi,
>>>
>>> I've collected in http://trac.osgeo.org/gdal/ticket/5924 a summary of
>>> issues and findings when trying to write GeoTIFF files in EPSG:3857 in a
>>> "standard" way (using ProjectedCSTypeGeoKey = 3857), while making them
>>> correctly displayed by ArcGIS (and ideally by other independant
>>> implementations).
>>> The current situation is that there's no such way (AFAIK). I'd appreciate
>>> any feedback/suggestion related to that issue.
>>>
>>> Best regards,
>>>
>>> Even
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev

Best regards,
     Dmitry


From even.rouault at spatialys.com  Wed Apr 15 14:10:13 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 15 Apr 2015 23:10:13 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <552ED1EA.6050301@gmail.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504152246.50086.even.rouault@spatialys.com>
	<552ED1EA.6050301@gmail.com>
Message-ID: <201504152310.13846.even.rouault@spatialys.com>

> The ArcGIS (or QGIS in qpj) save 3857 in such prj file:
> 

I hoped that this thread could remain focused just about GeoTIFF encoding. 
Shapefile encoding issues are a different matter (see 
http://trac.osgeo.org/gdal/ticket/3962)

> PROJCS["WGS 84 / Pseudo-Mercator",
>      GEOGCS["WGS 84",
>          DATUM["WGS_1984",
>              SPHEROID["WGS 84",6378137,298.257223563,
>                  AUTHORITY["EPSG","7030"]],
>              AUTHORITY["EPSG","6326"]],
>          PRIMEM["Greenwich",0,
>              AUTHORITY["EPSG","8901"]],
>          UNIT["degree",0.0174532925199433,
>              AUTHORITY["EPSG","9122"]],
>          AUTHORITY["EPSG","4326"]],
>      PROJECTION["Mercator_1SP"],
>      PARAMETER["central_meridian",0],
>      PARAMETER["scale_factor",1],
>      PARAMETER["false_easting",0],
>      PARAMETER["false_northing",0],
>      UNIT["metre",1,
>          AUTHORITY["EPSG","9001"]],
>      AXIS["X",EAST],
>      AXIS["Y",NORTH],
>      EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0
> +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext
> +no_defs"],
>      AUTHORITY["EPSG","3857"]]
> 

Are you 100% positive that ArcGIS generates such a .prj ? This doesn't look 
like classical ESRI WKT (which generally lacks most AUTHORITY nodes and has no 
EXTENSION PROJ4 stuff), but like GDAL WKT.

> And GDAL opens such shape file and set the spheroid.
> But if I save the shape file in 3857 via GDAL I get ellipsoid:
> 
>    PROJCS["WGS_84_Pseudo_Mercator",
>      GEOGCS["GCS_WGS_1984",
>          DATUM["D_WGS_1984",
>              SPHEROID["WGS_1984",6378137,298.257223563]],
>          PRIMEM["Greenwich",0],
>          UNIT["Degree",0.017453292519943295]],
>          PROJECTION["Mercator"],
>          PARAMETER["central_meridian",0],
>          PARAMETER["false_easting",0],
>          PARAMETER["false_northing",0],
>          UNIT["Meter",1],
>          PARAMETER["standard_parallel_1",0.0]]

Yes, that's the result after morphToESRI(). Which is probably not the right 
ESRI WKT for WebMercator, anyway... Should rather be something like the 
following according to http://trac.osgeo.org/gdal/ticket/3962 :
PROJCS["WGS_1984_Web_Mercator_Auxiliary_Sphere",
    GEOGCS["GCS_WGS_1984",
        DATUM["D_WGS_1984",
            SPHEROID["WGS_1984",6378137.0,298.257223563]],
        PRIMEM["Greenwich",0.0],
        UNIT["Degree",0.0174532925199433]],
    PROJECTION["Mercator_Auxiliary_Sphere"],
    PARAMETER["False_Easting",0.0],
    PARAMETER["False_Northing",0.0],
    PARAMETER["Central_Meridian",0.0],
    PARAMETER["Standard_Parallel_1",0.0],
    PARAMETER["Auxiliary_Sphere_Type",0.0],
    UNIT["Meter",1.0],
    AUTHORITY["ESRI","102100"]]

> 
> And both GDAL(QGIS) and ArcGIS open this shape file and set the ellipsoid!

I don't understand what you mean here.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Wed Apr 15 14:16:44 2015
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Thu, 16 Apr 2015 00:16:44 +0300
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504152310.13846.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504152246.50086.even.rouault@spatialys.com>
	<552ED1EA.6050301@gmail.com>
	<201504152310.13846.even.rouault@spatialys.com>
Message-ID: <552ED53C.8020703@gmail.com>

Sorry for some spam in GeoTIFF topic.

I'll create some shape files and screenshots and attach them to the 
ticket #3962 to explain what  I mean.

Best regards,
     Dmitry

16.04.2015 00:10, Even Rouault ?????:
>> The ArcGIS (or QGIS in qpj) save 3857 in such prj file:
>>
> I hoped that this thread could remain focused just about GeoTIFF encoding.
> Shapefile encoding issues are a different matter (see
> http://trac.osgeo.org/gdal/ticket/3962)
>
>> PROJCS["WGS 84 / Pseudo-Mercator",
>>       GEOGCS["WGS 84",
>>           DATUM["WGS_1984",
>>               SPHEROID["WGS 84",6378137,298.257223563,
>>                   AUTHORITY["EPSG","7030"]],
>>               AUTHORITY["EPSG","6326"]],
>>           PRIMEM["Greenwich",0,
>>               AUTHORITY["EPSG","8901"]],
>>           UNIT["degree",0.0174532925199433,
>>               AUTHORITY["EPSG","9122"]],
>>           AUTHORITY["EPSG","4326"]],
>>       PROJECTION["Mercator_1SP"],
>>       PARAMETER["central_meridian",0],
>>       PARAMETER["scale_factor",1],
>>       PARAMETER["false_easting",0],
>>       PARAMETER["false_northing",0],
>>       UNIT["metre",1,
>>           AUTHORITY["EPSG","9001"]],
>>       AXIS["X",EAST],
>>       AXIS["Y",NORTH],
>>       EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0
>> +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext
>> +no_defs"],
>>       AUTHORITY["EPSG","3857"]]
>>
> Are you 100% positive that ArcGIS generates such a .prj ? This doesn't look
> like classical ESRI WKT (which generally lacks most AUTHORITY nodes and has no
> EXTENSION PROJ4 stuff), but like GDAL WKT.
>
>> And GDAL opens such shape file and set the spheroid.
>> But if I save the shape file in 3857 via GDAL I get ellipsoid:
>>
>>     PROJCS["WGS_84_Pseudo_Mercator",
>>       GEOGCS["GCS_WGS_1984",
>>           DATUM["D_WGS_1984",
>>               SPHEROID["WGS_1984",6378137,298.257223563]],
>>           PRIMEM["Greenwich",0],
>>           UNIT["Degree",0.017453292519943295]],
>>           PROJECTION["Mercator"],
>>           PARAMETER["central_meridian",0],
>>           PARAMETER["false_easting",0],
>>           PARAMETER["false_northing",0],
>>           UNIT["Meter",1],
>>           PARAMETER["standard_parallel_1",0.0]]
> Yes, that's the result after morphToESRI(). Which is probably not the right
> ESRI WKT for WebMercator, anyway... Should rather be something like the
> following according to http://trac.osgeo.org/gdal/ticket/3962 :
> PROJCS["WGS_1984_Web_Mercator_Auxiliary_Sphere",
>      GEOGCS["GCS_WGS_1984",
>          DATUM["D_WGS_1984",
>              SPHEROID["WGS_1984",6378137.0,298.257223563]],
>          PRIMEM["Greenwich",0.0],
>          UNIT["Degree",0.0174532925199433]],
>      PROJECTION["Mercator_Auxiliary_Sphere"],
>      PARAMETER["False_Easting",0.0],
>      PARAMETER["False_Northing",0.0],
>      PARAMETER["Central_Meridian",0.0],
>      PARAMETER["Standard_Parallel_1",0.0],
>      PARAMETER["Auxiliary_Sphere_Type",0.0],
>      UNIT["Meter",1.0],
>      AUTHORITY["ESRI","102100"]]
>
>> And both GDAL(QGIS) and ArcGIS open this shape file and set the ellipsoid!
> I don't understand what you mean here.
>


From ragg.gdal at free.fr  Wed Apr 15 15:25:17 2015
From: ragg.gdal at free.fr (Nicolas Ragg)
Date: Thu, 16 Apr 2015 00:25:17 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <552DFE2F.5050700@free.fr>
References: <552DA155.4060304@free.fr> <552DFE2F.5050700@free.fr>
Message-ID: <552EE54D.2030903@free.fr>

On 15/04/2015 07:59, Jean-Claude Repetto wrote:
> Please run the command : gdalinfo -mdd ECW file.ecw
> What are the metadata (ECW) :
> PROJ= ?
> DATUM= ?
>
> Jean-Claude
>
>
Hello
Thank for your support, here they are :
  PROJ=epsg:27592
  DATUM=epsg:27592
Do you see something weird?

I've noted that i have another map of the same provider, its gdalinfo is 
reported as following

Coordinate System is:
PROJCS["LM2FRANC",
     GEOGCS["N.T.F.",
         DATUM["NTF",
             SPHEROID["CLA80IGN",6378249.2,293.4660213]],
         PRIMEM["Greenwich",0],
         UNIT["degree",0.0174532925199433]],
     PROJECTION["Lambert_Conformal_Conic_2SP"],
     PARAMETER["standard_parallel_1",45.89891888888889],
     PARAMETER["standard_parallel_2",47.69601444444444],
     PARAMETER["latitude_of_origin",46.80000000000000],
     PARAMETER["central_meridian",2.337229169999754],
     PARAMETER["false_easting",600000],
     PARAMETER["false_northing",2200000],
     UNIT["Meter",1]]
Origin = (1079250.000000000000000,1851300.000000000000000)
Pixel Size = (50.000000000000000,-50.000000000000000)
Metadata:
   COLORSPACE=RGB
   COMPRESSION_RATE_TARGET=10
   VERSION=2
Metadata (ECW):
   PROJ=LM2FRANC
   DATUM=NTF
   UNITS=METERS

I'm pretty sure something is wrong in the first file, with gdal 1.7.2 
with matching ECW plugin there was no issue

Thanks again for the support

Nicolas



From even.rouault at spatialys.com  Thu Apr 16 03:08:03 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2015 12:08:03 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <201504152248.45608.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<552EBEA5.6080102@caris.com>
	<201504152248.45608.even.rouault@spatialys.com>
Message-ID: <201504161208.03661.even.rouault@spatialys.com>

Le mercredi 15 avril 2015 22:48:45, Even Rouault a ?crit :
> > The way I see it, there are two different ways to model Google Mercator:
> > 1. As a WGS84 datum/ellipsoid with a custom Mercator-based projection
> > which uses only the semi-major axis, as seems to be currently done in
> > EPSG: http://epsg-registry.org/export.htm?wkt=urn:ogc:def:crs:EPSG::3857
> > 2. As the Google spheroid with Mercator 1SP and no transformation when
> > going to WGS 84.
> > 
> > I don't think #1 is currently an option given the list of coordinate
> > transformation codes available in the GeoTIFF specification.
> 
> Right, there's no such coordinate transformation for GeoTIFF

Thinking a bit more about this issue, a dedicated coordinate transformation 
would be the cleanest way, both in GeoTIFF and proj.4 (or a flag in proj.4 to 
indicate that the spherical version of the projection method, if it exists and 
that's the case for mercator, must be used even if the ellipsoid definition is 
not spherical)
The fact that we manage currently to do WebMercator with proj.4 is due to  
WebMercator being based on WGS84 datum, and WGS84 being the "pivot" datum used 
by proj.4 when doing datum transformations. The +nadgrids=@null basically 
means that the transform from the datum defined with ellipsoid parameters 
+a=6378137 +b=6378137 and grid @null to datum WGS84 is the identity (for that 
part the values of +a and +b are completely ignored. They are only used when 
going from (long,lat) to (x,y)).
If we ever wanted to do spherical mercator on another datum than WGS84, 
there's currently no way to express that with proj.4 (except through a grid 
from the datum to WGS84 perhaps)

All that said, that doesn't really help me solving my issue, but makes me 
believe that with what currently exists in the GeoTIFF spec, there's no clean 
to express WebMercator.
- ProjectedCSTypeGeoKey = 3857 is probably the best one, although it is an 
extension of the original GeoTIFF spec, and that isn't understood properly by 
some readers
- All formulations that try to expand the definition with ProjCoordTransGeoKey 
=  CT_Mercator, its projection parameters and GCS parameters aren't really 
appropriate, since there's no way of capturing that its a spherical mercator 
that must be used.

> 
> > For #2, I would think/hope that if you specified the identity
> > 7-parameter transformation in the GeoTIFF header, ArcGIS would properly
> 
> > reproject the image:
> Hum, this will not work I'm afraid. See my response to Dmitry's to see why
> +towgs84=0,0,0,0,0,0,0 is not appropriate.
> (Plus the fact that the +towgs84 in geotiff is probably not very widely
> supported.)
> 
> > http://trac.osgeo.org/geotiff/ticket/26
> > 
> > Andr?
> > 
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pepijn at vaneeckhoudt.net  Thu Apr 16 04:18:41 2015
From: pepijn at vaneeckhoudt.net (Pepijn Van Eeckhoudt)
Date: Thu, 16 Apr 2015 13:18:41 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <201504161208.03661.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<552EBEA5.6080102@caris.com>
	<201504152248.45608.even.rouault@spatialys.com>
	<201504161208.03661.even.rouault@spatialys.com>
Message-ID: <7ECDFDA5-62BF-46F8-A0D0-83A15E431D03@vaneeckhoudt.net>

Hi Even,

How does this relate to http://trac.osgeo.org/geotiff/wiki/RefiningGeoTIFF? <http://trac.osgeo.org/geotiff/wiki/RefiningGeoTIFF?>

Frank wrote there that 
> accepted industry practice has been to accept newer EPSG PCS and GCS codes even though they are not explicitly listed in the GeoTIFF specification

It?s not clear to me from the GeoTIFF spec what the correct way to convert EPSG PCS codes to GeoTIFF PCS codes is, but it does seem to indicate that this is done somehow already.

OGC started a SWG to do this GeoTIFF spec refinement work. Might be worthwhile to ask that group for input, although looking at their mailing list, github repo and wiki pages there doesn?t seem to be much going on at the moment (or at least there?s no record of it).

Best regards,

Pepijn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150416/369e978a/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 05:04:42 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2015 14:04:42 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <7ECDFDA5-62BF-46F8-A0D0-83A15E431D03@vaneeckhoudt.net>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504161208.03661.even.rouault@spatialys.com>
	<7ECDFDA5-62BF-46F8-A0D0-83A15E431D03@vaneeckhoudt.net>
Message-ID: <201504161404.42290.even.rouault@spatialys.com>

Hi Pepijn,

> 
> How does this relate to http://trac.osgeo.org/geotiff/wiki/RefiningGeoTIFF?
> <http://trac.osgeo.org/geotiff/wiki/RefiningGeoTIFF?>

Very much (although I'm foolishly attempting to reach interoperability with 
existing implementations)

> 
> Frank wrote there that
> 
> > accepted industry practice has been to accept newer EPSG PCS and GCS
> > codes even though they are not explicitly listed in the GeoTIFF
> > specification
> 
> It?s not clear to me from the GeoTIFF spec what the correct way to convert
> EPSG PCS codes to GeoTIFF PCS codes is, but it does seem to indicate that
> this is done somehow already.

The relevant section is :
http://www.remotesensing.org/geotiff/spec/geotiff6.html#6.3.3

6.3.3.1 Projected CS Type Codes

Ranges:
   [    1,   1000]  = Obsolete EPSG/POSC Projection System Codes
   [20000,  32760]  = EPSG Projection System codes
   32767            = user-defined
   [32768,  65535]  = Private User Implementations

But there's a big hole for ]1000,20000[, and 3857 is in it. And even if it was 
in the [2000,3276] range, it didn't exist at the time of the latest GeoTIFF 
spec. Frank's "accepted industry practice" is to just make Projected CS Type 
Code = EPSG PCS code.

> 
> OGC started a SWG to do this GeoTIFF spec refinement work. Might be
> worthwhile to ask that group for input, although looking at their mailing
> list, github repo and wiki pages there doesn?t seem to be much going on at
> the moment (or at least there?s no record of it).

Yes, I've contacted one of the members.

I can't see a geotiff list at https://lists.opengeospatial.org/mailman/listinfo 
. Is it a public one ?

Thanks,

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pepijn at vaneeckhoudt.net  Thu Apr 16 06:27:49 2015
From: pepijn at vaneeckhoudt.net (Pepijn Van Eeckhoudt)
Date: Thu, 16 Apr 2015 15:27:49 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <201504161404.42290.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504161208.03661.even.rouault@spatialys.com>
	<7ECDFDA5-62BF-46F8-A0D0-83A15E431D03@vaneeckhoudt.net>
	<201504161404.42290.even.rouault@spatialys.com>
Message-ID: <D6701B56-8938-46CF-8B5A-7F1C4E70E8D5@vaneeckhoudt.net>

> Ranges:
>   [    1,   1000]  = Obsolete EPSG/POSC Projection System Codes
>   [20000,  32760]  = EPSG Projection System codes
>   32767            = user-defined
>   [32768,  65535]  = Private User Implementations
> 
> But there's a big hole for ]1000,20000[, and 3857 is in it. And even if it was 
> in the [2000,3276] range, it didn't exist at the time of the latest GeoTIFF 
> spec. Frank's "accepted industry practice" is to just make Projected CS Type 
> Code = EPSG PCS code.

Ok. I was looking for some rules that translate the [20000, 32760] range to EPSG codes.

>> OGC started a SWG to do this GeoTIFF spec refinement work. Might be
>> worthwhile to ask that group for input, although looking at their mailing
>> list, github repo and wiki pages there doesn?t seem to be much going on at
>> the moment (or at least there?s no record of it).
> 
> Yes, I've contacted one of the members.
> 
> I can't see a geotiff list at https://lists.opengeospatial.org/mailman/listinfo 
> . Is it a public one ?

The archives are private so you probably need to be an OGC member to access them. I?m not working at Luciad anymore so I can?t be of much help myself; I haven?t registered as an individual member. My old Luciad account is still active which gives me access to the archives, but I?m not sure how long that will remain the case.

Best regards,

Pepijn

From andre.vautour at caris.com  Thu Apr 16 07:15:17 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Thu, 16 Apr 2015 11:15:17 -0300
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504161208.03661.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<552EBEA5.6080102@caris.com>
	<201504152248.45608.even.rouault@spatialys.com>
	<201504161208.03661.even.rouault@spatialys.com>
Message-ID: <552FC3F5.3040703@caris.com>


On 2015-04-16 07:08, Even Rouault wrote:
> Le mercredi 15 avril 2015 22:48:45, Even Rouault a ?crit :
>>> The way I see it, there are two different ways to model Google Mercator:
>>> 1. As a WGS84 datum/ellipsoid with a custom Mercator-based projection
>>> which uses only the semi-major axis, as seems to be currently done in
>>> EPSG: http://epsg-registry.org/export.htm?wkt=urn:ogc:def:crs:EPSG::3857
>>> 2. As the Google spheroid with Mercator 1SP and no transformation when
>>> going to WGS 84.
>>>
>>> I don't think #1 is currently an option given the list of coordinate
>>> transformation codes available in the GeoTIFF specification.
>> Right, there's no such coordinate transformation for GeoTIFF
> Thinking a bit more about this issue, a dedicated coordinate transformation
> would be the cleanest way, both in GeoTIFF and proj.4 (or a flag in proj.4 to
> indicate that the spherical version of the projection method, if it exists and
> that's the case for mercator, must be used even if the ellipsoid definition is
> not spherical)
> The fact that we manage currently to do WebMercator with proj.4 is due to
> WebMercator being based on WGS84 datum, and WGS84 being the "pivot" datum used
> by proj.4 when doing datum transformations. The +nadgrids=@null basically
> means that the transform from the datum defined with ellipsoid parameters
> +a=6378137 +b=6378137 and grid @null to datum WGS84 is the identity (for that
> part the values of +a and +b are completely ignored. They are only used when
> going from (long,lat) to (x,y)).
> If we ever wanted to do spherical mercator on another datum than WGS84,
> there's currently no way to express that with proj.4 (except through a grid
> from the datum to WGS84 perhaps)
>
> All that said, that doesn't really help me solving my issue, but makes me
> believe that with what currently exists in the GeoTIFF spec, there's no clean
> to express WebMercator.
> - ProjectedCSTypeGeoKey = 3857 is probably the best one, although it is an
> extension of the original GeoTIFF spec, and that isn't understood properly by
> some readers
> - All formulations that try to expand the definition with ProjCoordTransGeoKey
> =  CT_Mercator, its projection parameters and GCS parameters aren't really
> appropriate, since there's no way of capturing that its a spherical mercator
> that must be used.
Well, I agree that most readers probably won't be able to handle it, 
that being said, if the de facto convention is to fall-back to EPSG for 
codes that are not understood, setting that key might be your best option.

Setting the ProjCoordTransGeoKey to 1024 as well might be a good idea 
(with WGS 84 as the ellipsoid). The EPSG operation methods, which 
currently fall in the [1000-10000] range, are in the range of the 
supported transformation codes:

6.3.3.3 Coordinate Transformation Codes
Ranges:
    0 = undefined
    [    1, 16383] = GeoTIFF Coordinate Transformation codes
    [16384, 32766] = Reserved by GeoTIFF
    32767          = user-defined
    [32768, 65535] = Private User Implementations

That is, fallback to an EPSG code for the projection if the projection 
does not map to one that is defined in the specification. Of course, 
current readers probably will not handle it correctly. Then again, I 
cannot see how any readers other than the ones who lookup the 
ProjectedCSTypeGeoKey in the EPSG registry could realistically work 
correctly at the moment.

Based on the outcome of 
http://lists.osgeo.org/pipermail/gdal-dev/2015-April/041532.html, WKT 
readers should be able to handle a WKT string with a projection that is 
named "Popular Visualisation Pseudo Mercator" if they do in fact support 
it, so the WKT string for 3857 could also be updated to be modeled the 
same way.

>
>>> For #2, I would think/hope that if you specified the identity
>>> 7-parameter transformation in the GeoTIFF header, ArcGIS would properly
>>> reproject the image:
>> Hum, this will not work I'm afraid. See my response to Dmitry's to see why
>> +towgs84=0,0,0,0,0,0,0 is not appropriate.
>> (Plus the fact that the +towgs84 in geotiff is probably not very widely
>> supported.)
Right, from some reason, I my mind towgs84=0,0,0,0,0,0,0 was the 
identity transformation yesterday as I wrote my reply, but obviously it 
still would need to go to/from geocentric which would cause problems.

Andr?

From even.rouault at spatialys.com  Thu Apr 16 08:07:55 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2015 17:07:55 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <552FC3F5.3040703@caris.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504161208.03661.even.rouault@spatialys.com>
	<552FC3F5.3040703@caris.com>
Message-ID: <201504161707.56064.even.rouault@spatialys.com>

> > - All formulations that try to expand the definition with
> > ProjCoordTransGeoKey =  CT_Mercator, its projection parameters and GCS
> > parameters aren't really appropriate, since there's no way of capturing
> > that its a spherical mercator that must be used.
> 
> Well, I agree that most readers probably won't be able to handle it,
> that being said, if the de facto convention is to fall-back to EPSG for
> codes that are not understood, setting that key might be your best option.
> 
> Setting the ProjCoordTransGeoKey to 1024 as well might be a good idea
> (with WGS 84 as the ellipsoid). The EPSG operation methods, which
> currently fall in the [1000-10000] range, are in the range of the
> supported transformation codes:
> 
> 6.3.3.3 Coordinate Transformation Codes
> Ranges:
>     0 = undefined
>     [    1, 16383] = GeoTIFF Coordinate Transformation codes
>     [16384, 32766] = Reserved by GeoTIFF
>     32767          = user-defined
>     [32768, 65535] = Private User Implementations
> 
> That is, fallback to an EPSG code for the projection if the projection
> does not map to one that is defined in the specification. Of course,
> current readers probably will not handle it correctly. 

Hum, the issue is that the values currently defined by GeoTIFF in the [1, 
16383] range has nothing to do with the EPSG conversion methods. Your proposal 
might be reasonable, but it is AFAIK not at all a current industry practice. 
This would also imply definiing if it is allowed to use the EPSG conversion 
method when there are corresponding  existing GeoTIFF enumerated values

> Then again, I
> cannot see how any readers other than the ones who lookup the
> ProjectedCSTypeGeoKey in the EPSG registry could realistically work
> correctly at the moment.

True. That's more or less what GDAL does currently.

In fact, it is more complicated than that. GDAL relies on the libgeotiff 
function GTIFGetDefn() which, from the raw GeoTIFF keys and the EPSG 
dictionnaries as .csv files, tries to build a fully expanded SRS definition 
using GeoTIFF enumerations. Which explains why GDAL can write some PCS codes 
but not read a correct SRS back, because there might be no GeoTIFF projection 
method corresponding.

GDAL could (should) likely just use its importFromEPSG() method in those 
cases. Not sure why we don't do that already.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From lucena_ivan at hotmail.com  Thu Apr 16 09:02:21 2015
From: lucena_ivan at hotmail.com (Ivan Lucena)
Date: Thu, 16 Apr 2015 12:02:21 -0400
Subject: [gdal-dev] baseline tiff and rpb file
In-Reply-To: <201504102237.43680.even.rouault@spatialys.com>
References: <BLU173-W20D9EAD7244290ABB067590FA0@phx.gbl>,
	<201504102237.43680.even.rouault@spatialys.com>
Message-ID: <BLU173-W9CF985ECB2A877A97494D90E40@phx.gbl>

Hi Even,

Thank you very much for fixing that. Those options are a little trick. I understand.

So now what is the default to deal with RPC on a baseline tiff (-co profile=baseline) is:

a) Create the RPC on a .tif.aux.xml if there is a "RPB=NO" and when there is no RPB.

- That means that for baseline Tiff files the RPC goes to a RPC by default. 

b) Create the RPC on a .tif.aux.xml only if there is a "RPB=NO".

- That means that RPC is not the default. That behavior is more compatible with other "basic" formats. I guess.

Anyway, can we backport that to 1.11 and 1.10?

Thanks a lot.

Ivan

> From: even.rouault at spatialys.com
> To: gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] baseline tiff and rpb file
> Date: Fri, 10 Apr 2015 22:37:43 +0200
> CC: lucena_ivan at hotmail.com
> 
> Le vendredi 10 avril 2015 21:56:30, Ivan Lucena a ?crit :
> > Hi there,
> > 
> > The documentation says:
> > 
> > "GDAL can read and write the RPCCoefficientTag as described in the
> > RPCs in GeoTIFF proposed extension. The tag is written only for
> > files created with the default profile GDALGeoTIFF. For other profiles, a
> > .RPB file is created. In GDAL data model, the RPC coefficients are stored
> > into the RPC metadata domain. For more details, see the RPC Georeferencing
> > RFC.
> > If .RPB or _RPC.TXT files are found, they will be used to read the RPCs,
> > even if the RPCCoefficientTag tag is set."
> > [http://www.gdal.org/frmt_gtiff.html]
> > 
> > But there is no way to export the RPC metadata into the .tif.aux.xml file,
> > like with other drivers.
> > 
> > I tried to turn off the create-option RPB but that doesn't work but It
> > creates the .RPB file anyway.
> > 
> > $ gdal_translate -of gtiff <source dataset> output.tif -co profile=beseline
> > -co RPB=no $ ls
> > output.tif
> > output.RPB
> > 
> > That woks fine with PNG/JPEG/BMP
> > 
> > $ gdal_translate -of png <source dataset> output.png
> > $ ls
> > output.png
> > output.png.aux.xml
> > 
> > Is that how it suppose to be or is it a bug? I mean, by entering -co RPB=no
> > GTIFF should create a  .aux.xml like other drivers do. Right?
> 
> Hi Ivan
> 
> Yes was a bug. I've just fixed it trunk (r28883). We have a non-trivial logic 
> to decide how/when/if writing RPC information...
> 
> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150416/0d3db6cf/attachment.html>

From andre.vautour at caris.com  Thu Apr 16 08:54:59 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Thu, 16 Apr 2015 12:54:59 -0300
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
 and ArcGIS interoperability
In-Reply-To: <201504161707.56064.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<201504161208.03661.even.rouault@spatialys.com>
	<552FC3F5.3040703@caris.com>
	<201504161707.56064.even.rouault@spatialys.com>
Message-ID: <552FDB53.5030804@caris.com>


On 2015-04-16 12:07, Even Rouault wrote:
>>> - All formulations that try to expand the definition with
>>> ProjCoordTransGeoKey =  CT_Mercator, its projection parameters and GCS
>>> parameters aren't really appropriate, since there's no way of capturing
>>> that its a spherical mercator that must be used.
>> Well, I agree that most readers probably won't be able to handle it,
>> that being said, if the de facto convention is to fall-back to EPSG for
>> codes that are not understood, setting that key might be your best option.
>>
>> Setting the ProjCoordTransGeoKey to 1024 as well might be a good idea
>> (with WGS 84 as the ellipsoid). The EPSG operation methods, which
>> currently fall in the [1000-10000] range, are in the range of the
>> supported transformation codes:
>>
>> 6.3.3.3 Coordinate Transformation Codes
>> Ranges:
>>      0 = undefined
>>      [    1, 16383] = GeoTIFF Coordinate Transformation codes
>>      [16384, 32766] = Reserved by GeoTIFF
>>      32767          = user-defined
>>      [32768, 65535] = Private User Implementations
>>
>> That is, fallback to an EPSG code for the projection if the projection
>> does not map to one that is defined in the specification. Of course,
>> current readers probably will not handle it correctly.
> Hum, the issue is that the values currently defined by GeoTIFF in the [1,
> 16383] range has nothing to do with the EPSG conversion methods. Your proposal
> might be reasonable, but it is AFAIK not at all a current industry practice.
> This would also imply definiing if it is allowed to use the EPSG conversion
> method when there are corresponding  existing GeoTIFF enumerated values
Yeah, I was probably overreaching with that. Probably better to just 
make sure the next version of the specification has a transformation 
code available for Google Mercator as a coordinate transformation.

I just don't like having a file with information that will not transform 
correctly in the event the client does not lookup that projected CRS 
code in EPSG. Having the spheroid as the datum with the Mercator 1SP 
projection leads to way too many special cases. I'd rather have a 
projection that some readers might not understand. Seems safer and more 
explicit.

>> Then again, I
>> cannot see how any readers other than the ones who lookup the
>> ProjectedCSTypeGeoKey in the EPSG registry could realistically work
>> correctly at the moment.
> True. That's more or less what GDAL does currently.
>
> In fact, it is more complicated than that. GDAL relies on the libgeotiff
> function GTIFGetDefn() which, from the raw GeoTIFF keys and the EPSG
> dictionnaries as .csv files, tries to build a fully expanded SRS definition
> using GeoTIFF enumerations. Which explains why GDAL can write some PCS codes
> but not read a correct SRS back, because there might be no GeoTIFF projection
> method corresponding.
>
> GDAL could (should) likely just use its importFromEPSG() method in those
> cases. Not sure why we don't do that already.
Trying to import from EPSG first makes a lot of sense to me.

Cheers,
Andr?

From even.rouault at spatialys.com  Thu Apr 16 09:27:48 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2015 18:27:48 +0200
Subject: [gdal-dev] baseline tiff and rpb file
In-Reply-To: <BLU173-W9CF985ECB2A877A97494D90E40@phx.gbl>
References: <BLU173-W20D9EAD7244290ABB067590FA0@phx.gbl>
	<201504102237.43680.even.rouault@spatialys.com>
	<BLU173-W9CF985ECB2A877A97494D90E40@phx.gbl>
Message-ID: <201504161827.48523.even.rouault@spatialys.com>

Le jeudi 16 avril 2015 18:02:21, Ivan Lucena a ?crit :
> Hi Even,
> 
> Thank you very much for fixing that. Those options are a little trick. I
> understand.
> 
> So now what is the default to deal with RPC on a baseline tiff (-co
> profile=baseline) is:
> 
> a) Create the RPC on a .tif.aux.xml if there is a "RPB=NO" and when there
> is no RPB.
> 
> - That means that for baseline Tiff files the RPC goes to a RPC by default.
> 
> b) Create the RPC on a .tif.aux.xml only if there is a "RPB=NO".
> 
> - That means that RPC is not the default. That behavior is more compatible
> with other "basic" formats. I guess.

Sorry, I didn't get the above ;-) The examples speak better:

$ gdal_translate -q byte_rpc.tif out.tif; ll out*
-rw-r--r-- 1 even even 1294 2015-04-16 18:23 out.tif

$ gdal_translate -q byte_rpc.tif out.tif -co RPB=YES; ll out*
-rw-r--r-- 1 even even 2367 2015-04-16 18:25 out.RPB
-rw-r--r-- 1 even even 1294 2015-04-16 18:25 out.tif

$ gdal_translate -q byte_rpc.tif out.tif -co profile=baseline; ll out*
-rw-r--r-- 1 even even 2367 2015-04-16 18:21 out.RPB
-rw-r--r-- 1 even even  546 2015-04-16 18:21 out.tif

$ gdal_translate -q byte_rpc.tif out.tif -co profile=baseline -co rpb=yes; ll out*
-rw-r--r-- 1 even even 2367 2015-04-16 18:21 out.RPB
-rw-r--r-- 1 even even  546 2015-04-16 18:21 out.tif

$ gdal_translate -q byte_rpc.tif out.tif -co profile=baseline -co rpb=no; ll out*
-rw-r--r-- 1 even even  546 2015-04-16 18:21 out.tif
-rw-r--r-- 1 even even 2227 2015-04-16 18:21 out.tif.aux.xml

$ gdal_translate -q byte_rpc.tif out.tif -co profile=baseline -co rpctxt=yes; ll out*
-rw-r--r-- 1 even even 3300 2015-04-16 18:23 out_RPC.TXT
-rw-r--r-- 1 even even  546 2015-04-16 18:23 out.tif

$ gdal_translate -q byte_rpc.tif out.tif -co profile=baseline -co rpb=yes -co rpctxt=yes; ll out*
-rw-r--r-- 1 even even 2367 2015-04-16 18:24 out.RPB
-rw-r--r-- 1 even even 3300 2015-04-16 18:24 out_RPC.TXT
-rw-r--r-- 1 even even  546 2015-04-16 18:24 out.tif

> 
> Anyway, can we backport that to 1.11 and 1.10?

I'm not really enthusiastic about that. The fix was not trivial and required a bit of refactoring.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From m.g.aschenbeck at gmail.com  Thu Apr 16 10:01:57 2015
From: m.g.aschenbeck at gmail.com (Michael Aschenbeck)
Date: Thu, 16 Apr 2015 11:01:57 -0600
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
Message-ID: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>

Hello,

I'm using ChunkAndWarpMulti to warp an image.  The warping is working
nicely, however, at the boundary I seem to be getting some artifacts.

The first artifact i see is a DARK boundary of pixels in some location.  My
guess is that the interpolator is interpolating with blackfill (intensity
zero pixels).  Note that I am using the following setup:
psWarpOptions->padfSrcNoDataReal = (double *)
CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
{
psWarpOptions->padfSrcNoDataReal[ii] = 0;
}
which i thought was supposed to treat zeros as nodata.  It doesn't seem to
be doing what I think it should.

In some cases, I am also noticing a BRIGHT band strip of pixels adjacent to
the dark boundary pixels.  I don't have any thoughts on where this artifact
is coming from.

Below you can find links to an example.  The orange you see is just the
background color of my viewer.  Zero pixels are set to transparent so you
can see the dark boundary artifact.  (Note that all of the orange region is
covered with zero-intensity pixels, so we haven't reached the boundary of
the file, just the boundary of the non-zero pixels.)  Sorry if that's
confusing.
The before image: https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
The after image with the artifacts:
https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0

Any help would be greatly appreciated!

Thanks!
Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150416/5768a0fa/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 10:10:38 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2015 19:10:38 +0200
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
Message-ID: <201504161910.38973.even.rouault@spatialys.com>

Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
> Hello,
> 
> I'm using ChunkAndWarpMulti to warp an image.  The warping is working
> nicely, however, at the boundary I seem to be getting some artifacts.
> 
> The first artifact i see is a DARK boundary of pixels in some location.  My
> guess is that the interpolator is interpolating with blackfill (intensity
> zero pixels).  Note that I am using the following setup:
> psWarpOptions->padfSrcNoDataReal = (double *)
> CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
> for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
> {
> psWarpOptions->padfSrcNoDataReal[ii] = 0;
> }
> which i thought was supposed to treat zeros as nodata.  It doesn't seem to
> be doing what I think it should.
> 
> In some cases, I am also noticing a BRIGHT band strip of pixels adjacent to
> the dark boundary pixels.  I don't have any thoughts on where this artifact
> is coming from.
> 
> Below you can find links to an example.  The orange you see is just the
> background color of my viewer.  Zero pixels are set to transparent so you
> can see the dark boundary artifact.  (Note that all of the orange region is
> covered with zero-intensity pixels, so we haven't reached the boundary of
> the file, just the boundary of the non-zero pixels.)  Sorry if that's
> confusing.
> The before image: https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
> The after image with the artifacts:
> https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
> 

Mike,

Which gdal version ? Which resampling method ?
Do you reproduce with gdalwarp ?
If so, providing input file + full gdalwarp command line would help.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From m.g.aschenbeck at gmail.com  Thu Apr 16 10:42:47 2015
From: m.g.aschenbeck at gmail.com (Michael Aschenbeck)
Date: Thu, 16 Apr 2015 11:42:47 -0600
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <201504161910.38973.even.rouault@spatialys.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
	<201504161910.38973.even.rouault@spatialys.com>
Message-ID: <CADGz_tLRM9cPQw46+_LJ06TYNvhfHL-Q3Xzy=HHk0a+e_enZPw@mail.gmail.com>

Thanks for your reply.

I'm using gdal 1.10.1.  I'm using cubic resampling, but i have noticed the
dark line artifact with bilinear as well.  I unfortunately do not reproduce
the problem with a basic gdalwarp with cubic resampling.

I have written this code to do some registration. It's hard to tell in the
example, but my transformation actually pushed pixels up a bit. The
transformation I use handles interior pixels nicely and extends beyond the
image, so there is nothing 'weird' going on with that near the boundary
that I can think of.

I was hoping there is a warp option i have not yet thought of.

Thanks again,
Mike



On Thu, Apr 16, 2015 at 11:10 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
> > Hello,
> >
> > I'm using ChunkAndWarpMulti to warp an image.  The warping is working
> > nicely, however, at the boundary I seem to be getting some artifacts.
> >
> > The first artifact i see is a DARK boundary of pixels in some location.
> My
> > guess is that the interpolator is interpolating with blackfill (intensity
> > zero pixels).  Note that I am using the following setup:
> > psWarpOptions->padfSrcNoDataReal = (double *)
> > CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
> > {
> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
> > }
> > which i thought was supposed to treat zeros as nodata.  It doesn't seem
> to
> > be doing what I think it should.
> >
> > In some cases, I am also noticing a BRIGHT band strip of pixels adjacent
> to
> > the dark boundary pixels.  I don't have any thoughts on where this
> artifact
> > is coming from.
> >
> > Below you can find links to an example.  The orange you see is just the
> > background color of my viewer.  Zero pixels are set to transparent so you
> > can see the dark boundary artifact.  (Note that all of the orange region
> is
> > covered with zero-intensity pixels, so we haven't reached the boundary of
> > the file, just the boundary of the non-zero pixels.)  Sorry if that's
> > confusing.
> > The before image:
> https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
> > The after image with the artifacts:
> > https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
> >
>
> Mike,
>
> Which gdal version ? Which resampling method ?
> Do you reproduce with gdalwarp ?
> If so, providing input file + full gdalwarp command line would help.
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150416/96d7c3f2/attachment-0001.html>

From matt.a.hanson at gmail.com  Thu Apr 16 10:59:26 2015
From: matt.a.hanson at gmail.com (Matt Hanson)
Date: Thu, 16 Apr 2015 13:59:26 -0400
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <CADGz_tLRM9cPQw46+_LJ06TYNvhfHL-Q3Xzy=HHk0a+e_enZPw@mail.gmail.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
	<201504161910.38973.even.rouault@spatialys.com>
	<CADGz_tLRM9cPQw46+_LJ06TYNvhfHL-Q3Xzy=HHk0a+e_enZPw@mail.gmail.com>
Message-ID: <CAGYeuZnQUL2PiQzP2avRs6BtJ8X4F9V5wo1qiT-F6-qfEz+CKA@mail.gmail.com>

Mike,
Are you setting padfDstNoDataReal as well?     Because GDAL performs the
warp in chunks I'm wondering if previously written data, that should be
NoData, is not recognized as such with later chunks.   However, I'm still
not clear on the exact details of how that works internally, Even would
have a better idea if this even makes sense.

The code I'm using to set WarpOptions for doing warping on multiple input
images to a single outout looks like the below.   Also, are you setting
INIT_DEST option to "NODATA" (it's one of the key-value options that are
assigned to psWarpOptions->papszWarpOptions).

Hope this helps!

GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
psWarpOptions->hDstDS = imgout.GetGDALDataset(); psWarpOptions->nBandCount
= imgout.NumBands(); psWarpOptions->panSrcBands = (int *) CPLMalloc(sizeof(
int) * psWarpOptions->nBandCount ); psWarpOptions->panDstBands = (int *)
CPLMalloc(sizeof(int) * psWarpOptions->nBandCount );
psWarpOptions->padfSrcNoDataReal = (double *) CPLMalloc(sizeof(double) *
psWarpOptions->nBandCount ); psWarpOptions->padfSrcNoDataImag = (double *)
CPLMalloc(sizeof(double) * psWarpOptions->nBandCount );
psWarpOptions->padfDstNoDataReal = (double *) CPLMalloc(sizeof(double) *
psWarpOptions->nBandCount ); psWarpOptions->padfDstNoDataImag = (double *)
CPLMalloc(sizeof(double) * psWarpOptions->nBandCount ); for (unsigned int b=
0;b<imgout.NumBands();b++) { psWarpOptions->panSrcBands[b] = b+1;
psWarpOptions->panDstBands[b] = b+1; psWarpOptions->padfSrcNoDataReal[b] =
images[0][b].NoDataValue(); psWarpOptions->padfDstNoDataReal[b] = imgout[b].
NoDataValue(); psWarpOptions->padfSrcNoDataImag[b] = 0.0;
psWarpOptions->padfDstNoDataImag[b] = 0.0; }

On Thu, Apr 16, 2015 at 1:42 PM, Michael Aschenbeck <
m.g.aschenbeck at gmail.com> wrote:

> Thanks for your reply.
>
> I'm using gdal 1.10.1.  I'm using cubic resampling, but i have noticed the
> dark line artifact with bilinear as well.  I unfortunately do not reproduce
> the problem with a basic gdalwarp with cubic resampling.
>
> I have written this code to do some registration. It's hard to tell in the
> example, but my transformation actually pushed pixels up a bit. The
> transformation I use handles interior pixels nicely and extends beyond the
> image, so there is nothing 'weird' going on with that near the boundary
> that I can think of.
>
> I was hoping there is a warp option i have not yet thought of.
>
> Thanks again,
> Mike
>
>
>
> On Thu, Apr 16, 2015 at 11:10 AM, Even Rouault <even.rouault at spatialys.com
> > wrote:
>
>> Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
>> > Hello,
>> >
>> > I'm using ChunkAndWarpMulti to warp an image.  The warping is working
>> > nicely, however, at the boundary I seem to be getting some artifacts.
>> >
>> > The first artifact i see is a DARK boundary of pixels in some
>> location.  My
>> > guess is that the interpolator is interpolating with blackfill
>> (intensity
>> > zero pixels).  Note that I am using the following setup:
>> > psWarpOptions->padfSrcNoDataReal = (double *)
>> > CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
>> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
>> > {
>> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
>> > }
>> > which i thought was supposed to treat zeros as nodata.  It doesn't seem
>> to
>> > be doing what I think it should.
>> >
>> > In some cases, I am also noticing a BRIGHT band strip of pixels
>> adjacent to
>> > the dark boundary pixels.  I don't have any thoughts on where this
>> artifact
>> > is coming from.
>> >
>> > Below you can find links to an example.  The orange you see is just the
>> > background color of my viewer.  Zero pixels are set to transparent so
>> you
>> > can see the dark boundary artifact.  (Note that all of the orange
>> region is
>> > covered with zero-intensity pixels, so we haven't reached the boundary
>> of
>> > the file, just the boundary of the non-zero pixels.)  Sorry if that's
>> > confusing.
>> > The before image:
>> https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
>> > The after image with the artifacts:
>> > https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
>> >
>>
>> Mike,
>>
>> Which gdal version ? Which resampling method ?
>> Do you reproduce with gdalwarp ?
>> If so, providing input file + full gdalwarp command line would help.
>>
>> Even
>>
>> --
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com
>>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150416/1aedfca3/attachment.html>

From m.g.aschenbeck at gmail.com  Thu Apr 16 12:10:03 2015
From: m.g.aschenbeck at gmail.com (Michael Aschenbeck)
Date: Thu, 16 Apr 2015 13:10:03 -0600
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <CAGYeuZnQUL2PiQzP2avRs6BtJ8X4F9V5wo1qiT-F6-qfEz+CKA@mail.gmail.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
	<201504161910.38973.even.rouault@spatialys.com>
	<CADGz_tLRM9cPQw46+_LJ06TYNvhfHL-Q3Xzy=HHk0a+e_enZPw@mail.gmail.com>
	<CAGYeuZnQUL2PiQzP2avRs6BtJ8X4F9V5wo1qiT-F6-qfEz+CKA@mail.gmail.com>
Message-ID: <CADGz_tKRvfxqytw6y3W9T6_bgOBb+60Hh=hhJJ1zg7M9r_K43A@mail.gmail.com>

Some good ideas, thanks for the suggestions.

I added padfDstNoDataReal, as well as the imaginary values.  I also set
INIT_DEST to NODATA, although from what I read that was more of an option
that affected speed.  Unfortunately my output was identical to the previous
run and the artifacts remain present.

On Thu, Apr 16, 2015 at 11:59 AM, Matt Hanson <matt.a.hanson at gmail.com>
wrote:

> Mike,
> Are you setting padfDstNoDataReal as well?     Because GDAL performs the
> warp in chunks I'm wondering if previously written data, that should be
> NoData, is not recognized as such with later chunks.   However, I'm still
> not clear on the exact details of how that works internally, Even would
> have a better idea if this even makes sense.
>
> The code I'm using to set WarpOptions for doing warping on multiple input
> images to a single outout looks like the below.   Also, are you setting
> INIT_DEST option to "NODATA" (it's one of the key-value options that are
> assigned to psWarpOptions->papszWarpOptions).
>
> Hope this helps!
>
> GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
> psWarpOptions->hDstDS = imgout.GetGDALDataset();
> psWarpOptions->nBandCount = imgout.NumBands(); psWarpOptions->panSrcBands
> = (int *) CPLMalloc(sizeof(int) * psWarpOptions->nBandCount );
> psWarpOptions->panDstBands = (int *) CPLMalloc(sizeof(int) *
> psWarpOptions->nBandCount ); psWarpOptions->padfSrcNoDataReal = (double
> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount );
> psWarpOptions->padfSrcNoDataImag = (double *) CPLMalloc(sizeof(double) *
> psWarpOptions->nBandCount ); psWarpOptions->padfDstNoDataReal = (double
> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount );
> psWarpOptions->padfDstNoDataImag = (double *) CPLMalloc(sizeof(double) *
> psWarpOptions->nBandCount ); for (unsigned int b=0;b<imgout.NumBands();b++)
> { psWarpOptions->panSrcBands[b] = b+1; psWarpOptions->panDstBands[b] = b+1
> ; psWarpOptions->padfSrcNoDataReal[b] = images[0][b].NoDataValue();
> psWarpOptions->padfDstNoDataReal[b] = imgout[b].NoDataValue();
> psWarpOptions->padfSrcNoDataImag[b] = 0.0;
> psWarpOptions->padfDstNoDataImag[b] = 0.0; }
>
> On Thu, Apr 16, 2015 at 1:42 PM, Michael Aschenbeck <
> m.g.aschenbeck at gmail.com> wrote:
>
>> Thanks for your reply.
>>
>> I'm using gdal 1.10.1.  I'm using cubic resampling, but i have noticed
>> the dark line artifact with bilinear as well.  I unfortunately do not
>> reproduce the problem with a basic gdalwarp with cubic resampling.
>>
>> I have written this code to do some registration. It's hard to tell in
>> the example, but my transformation actually pushed pixels up a bit. The
>> transformation I use handles interior pixels nicely and extends beyond the
>> image, so there is nothing 'weird' going on with that near the boundary
>> that I can think of.
>>
>> I was hoping there is a warp option i have not yet thought of.
>>
>> Thanks again,
>> Mike
>>
>>
>>
>> On Thu, Apr 16, 2015 at 11:10 AM, Even Rouault <
>> even.rouault at spatialys.com> wrote:
>>
>>> Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
>>> > Hello,
>>> >
>>> > I'm using ChunkAndWarpMulti to warp an image.  The warping is working
>>> > nicely, however, at the boundary I seem to be getting some artifacts.
>>> >
>>> > The first artifact i see is a DARK boundary of pixels in some
>>> location.  My
>>> > guess is that the interpolator is interpolating with blackfill
>>> (intensity
>>> > zero pixels).  Note that I am using the following setup:
>>> > psWarpOptions->padfSrcNoDataReal = (double *)
>>> > CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
>>> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
>>> > {
>>> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
>>> > }
>>> > which i thought was supposed to treat zeros as nodata.  It doesn't
>>> seem to
>>> > be doing what I think it should.
>>> >
>>> > In some cases, I am also noticing a BRIGHT band strip of pixels
>>> adjacent to
>>> > the dark boundary pixels.  I don't have any thoughts on where this
>>> artifact
>>> > is coming from.
>>> >
>>> > Below you can find links to an example.  The orange you see is just the
>>> > background color of my viewer.  Zero pixels are set to transparent so
>>> you
>>> > can see the dark boundary artifact.  (Note that all of the orange
>>> region is
>>> > covered with zero-intensity pixels, so we haven't reached the boundary
>>> of
>>> > the file, just the boundary of the non-zero pixels.)  Sorry if that's
>>> > confusing.
>>> > The before image:
>>> https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
>>> > The after image with the artifacts:
>>> > https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
>>> >
>>>
>>> Mike,
>>>
>>> Which gdal version ? Which resampling method ?
>>> Do you reproduce with gdalwarp ?
>>> If so, providing input file + full gdalwarp command line would help.
>>>
>>> Even
>>>
>>> --
>>> Spatialys - Geospatial professional services
>>> http://www.spatialys.com
>>>
>>
>>
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150416/87c78de3/attachment.html>

From tomerlieber at gmail.com  Thu Apr 16 14:03:44 2015
From: tomerlieber at gmail.com (Tomer)
Date: Thu, 16 Apr 2015 14:03:44 -0700 (PDT)
Subject: [gdal-dev] RGB to Grayscale
Message-ID: <1429218224190-5201726.post@n6.nabble.com>

Hello,

I want to change a rgb image to a grayscale image.
Is there a way to make it through the gdal_translate.exe utility or through
other utilities.

Best regards,
Tomer.



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/RGB-to-Grayscale-tp5201726.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From kyle at pobox.com  Thu Apr 16 14:32:25 2015
From: kyle at pobox.com (Kyle Shannon)
Date: Thu, 16 Apr 2015 15:32:25 -0600
Subject: [gdal-dev] RGB to Grayscale
In-Reply-To: <1429218224190-5201726.post@n6.nabble.com>
References: <1429218224190-5201726.post@n6.nabble.com>
Message-ID: <55302A69.2050002@pobox.com>

Tomer,

On 04/16/2015 03:03 PM, Tomer wrote:
> Hello,
>
> I want to change a rgb image to a grayscale image.
> Is there a way to make it through the gdal_translate.exe utility or through
> other utilities.
>
> Best regards,
> Tomer.
>
>
>
> --
> View this message in context: http://osgeo-org.1560.x6.nabble.com/RGB-to-Grayscale-tp5201726.html
> Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>

Have you seen/tried rgb2pct.py:

http://gdal.org/rgb2pct.html

-- 
Kyle

From ragg.gdal at free.fr  Thu Apr 16 16:32:01 2015
From: ragg.gdal at free.fr (Nicolas Ragg)
Date: Fri, 17 Apr 2015 01:32:01 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <552DFE2F.5050700@free.fr>
References: <552DA155.4060304@free.fr> <552DFE2F.5050700@free.fr>
Message-ID: <55304671.8070205@free.fr>

On 15/04/2015 07:59, Jean-Claude Repetto wrote:
> Please run the command : gdalinfo -mdd ECW file.ecw
> What are the metadata (ECW) :
> PROJ= ?
> DATUM= ?
>
> Jean-Claude
>
Still looking into this problem, i've run gdalinfo with -mdd VERSION, 
output is :
Metadata:
   COLORSPACE=RGB
   COMPRESSION_RATE_TARGET=10
   VERSION=2

Looking on http://www.gdal.org/frmt_ecw.html, i may be facing backwards 
compatibility issue with a V2 file, something i was not expecting since 
V5.x ECW plugin is supposed to be backward compatible.
Using gdal 1.7.2 i have no mdd at all, and no srs reported but somehow 
the map coordinates are good when importing it in Worldwind.
Could it be related to the plugin compatibility issue related there 
https://trac.osgeo.org/gdal/ticket/4635 ?







From jacek.tomaka at hexagongeospatial.com  Thu Apr 16 17:41:11 2015
From: jacek.tomaka at hexagongeospatial.com (Tomaka, Jacek)
Date: Fri, 17 Apr 2015 00:41:11 +0000
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <55304671.8070205@free.fr>
References: <552DA155.4060304@free.fr> <552DFE2F.5050700@free.fr>
	<55304671.8070205@free.fr>
Message-ID: <3ED562F633B1AE46BF141E903F9813075856CCE2@ap-mbx3.ingrnet.com>

Nicolas, 
What version of ECW library are you using? 
Is there any chance I could see the file(s)?
Regards.
Jacek Tomaka


-----Original Message-----
From: gdal-dev-bounces at lists.osgeo.org [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Nicolas Ragg
Sent: Friday, 17 April 2015 7:32 AM
To: gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Trouble with French Ecw map

On 15/04/2015 07:59, Jean-Claude Repetto wrote:
> Please run the command : gdalinfo -mdd ECW file.ecw What are the 
> metadata (ECW) :
> PROJ= ?
> DATUM= ?
>
> Jean-Claude
>
Still looking into this problem, i've run gdalinfo with -mdd VERSION, output is :
Metadata:
   COLORSPACE=RGB
   COMPRESSION_RATE_TARGET=10
   VERSION=2

Looking on http://www.gdal.org/frmt_ecw.html, i may be facing backwards compatibility issue with a V2 file, something i was not expecting since V5.x ECW plugin is supposed to be backward compatible.
Using gdal 1.7.2 i have no mdd at all, and no srs reported but somehow the map coordinates are good when importing it in Worldwind.
Could it be related to the plugin compatibility issue related there
https://trac.osgeo.org/gdal/ticket/4635 ?






_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/gdal-dev


From ragg.gdal at free.fr  Thu Apr 16 22:53:41 2015
From: ragg.gdal at free.fr (Nicolas Ragg)
Date: Fri, 17 Apr 2015 07:53:41 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <3ED562F633B1AE46BF141E903F9813075856CCE2@ap-mbx3.ingrnet.com>
References: <552DA155.4060304@free.fr> <552DFE2F.5050700@free.fr>
	<55304671.8070205@free.fr>
	<3ED562F633B1AE46BF141E903F9813075856CCE2@ap-mbx3.ingrnet.com>
Message-ID: <55309FE5.5040308@free.fr>

Hello Jacek
I'm using gdal  1.11, binaries  downloaded from gisinternals with the 
ref 1600
gdal_translate -formats gives me that for ECW:
  ECW (rov): ERDAS Compressed Wavelets (SDK 5.0)

In Qgis valmiera i have several gdal dll, so i'm not sure which one they use

And in worldwind it's a custom build, using gdal 1.7.2

Unfortunately I don't think i can share the file, I've to think of a way 
to create another ecw and copying the metadata, i could not using 
gdal_translate

Regards

Nicolas

On 17/04/2015 02:41, Tomaka, Jacek wrote:
> Nicolas,
> What version of ECW library are you using?
> Is there any chance I could see the file(s)?
> Regards.
> Jacek Tomaka
>
>
> -----Original Message-----
> From: gdal-dev-bounces at lists.osgeo.org [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Nicolas Ragg
> Sent: Friday, 17 April 2015 7:32 AM
> To: gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] Trouble with French Ecw map
>
> On 15/04/2015 07:59, Jean-Claude Repetto wrote:
>> Please run the command : gdalinfo -mdd ECW file.ecw What are the
>> metadata (ECW) :
>> PROJ= ?
>> DATUM= ?
>>
>> Jean-Claude
>>
> Still looking into this problem, i've run gdalinfo with -mdd VERSION, output is :
> Metadata:
>     COLORSPACE=RGB
>     COMPRESSION_RATE_TARGET=10
>     VERSION=2
>
> Looking on http://www.gdal.org/frmt_ecw.html, i may be facing backwards compatibility issue with a V2 file, something i was not expecting since V5.x ECW plugin is supposed to be backward compatible.
> Using gdal 1.7.2 i have no mdd at all, and no srs reported but somehow the map coordinates are good when importing it in Worldwind.
> Could it be related to the plugin compatibility issue related there
> https://trac.osgeo.org/gdal/ticket/4635 ?
>
>
>
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>


From jrepetto at free.fr  Thu Apr 16 23:00:09 2015
From: jrepetto at free.fr (Jean-Claude Repetto)
Date: Fri, 17 Apr 2015 08:00:09 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <552EE54D.2030903@free.fr>
References: <552DA155.4060304@free.fr> <552DFE2F.5050700@free.fr>
	<552EE54D.2030903@free.fr>
Message-ID: <5530A169.6050409@free.fr>

Le 16/04/2015 00:25, Nicolas Ragg a ?crit :
> On 15/04/2015 07:59, Jean-Claude Repetto wrote:
>> Please run the command : gdalinfo -mdd ECW file.ecw
>> What are the metadata (ECW) :
>> PROJ= ?
>> DATUM= ?
>>
>> Jean-Claude
>>
>>
> Hello
> Thank for your support, here they are :
>   PROJ=epsg:27592
>   DATUM=epsg:27592
> Do you see something weird?

Yes :
- EPSG:27592 is deprecated, it has been replaced by EPSG:27562
- The false northing of EPSG:27592 is 200000, so GDAL is correct. Your 
map is probably using EPSG:27572 instead, whose false northing is 2200000.
- You can easily correct the error with the gdal_edit.py command :
gdal_edit.py -mo "DATUM=NTF" -mo "PROJ=LM2FRANC" file.ecw
(See : http://www.gdal.org/gdal_edit.html)

Jean-Claude


From jacek.tomaka at hexagongeospatial.com  Thu Apr 16 23:08:56 2015
From: jacek.tomaka at hexagongeospatial.com (Tomaka, Jacek)
Date: Fri, 17 Apr 2015 06:08:56 +0000
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <55309FE5.5040308@free.fr>
References: <552DA155.4060304@free.fr> <552DFE2F.5050700@free.fr>
	<55304671.8070205@free.fr>
	<3ED562F633B1AE46BF141E903F9813075856CCE2@ap-mbx3.ingrnet.com>
	<55309FE5.5040308@free.fr>
Message-ID: <3ED562F633B1AE46BF141E903F9813075856CDE9@ap-mbx3.ingrnet.com>

That is fine. Could you then show me the output of NCSFileReporter.exe ?
This file is part of the APOLLO Essentials Utilities: http://download.intergraph.com/downloads/erdas-apollo-essentials-utilities-2015
Please provide the output on both files. 

Regards.
Jacek Tomaka

-----Original Message-----
From: Nicolas Ragg [mailto:ragg.gdal at free.fr] 
Sent: Friday, 17 April 2015 1:54 PM
To: Tomaka, Jacek; gdal-dev at lists.osgeo.org
Subject: Re: [gdal-dev] Trouble with French Ecw map

Hello Jacek
I'm using gdal  1.11, binaries  downloaded from gisinternals with the ref 1600 gdal_translate -formats gives me that for ECW:
  ECW (rov): ERDAS Compressed Wavelets (SDK 5.0)

In Qgis valmiera i have several gdal dll, so i'm not sure which one they use

And in worldwind it's a custom build, using gdal 1.7.2

Unfortunately I don't think i can share the file, I've to think of a way to create another ecw and copying the metadata, i could not using gdal_translate

Regards

Nicolas

On 17/04/2015 02:41, Tomaka, Jacek wrote:
> Nicolas,
> What version of ECW library are you using?
> Is there any chance I could see the file(s)?
> Regards.
> Jacek Tomaka
>
>
> -----Original Message-----
> From: gdal-dev-bounces at lists.osgeo.org 
> [mailto:gdal-dev-bounces at lists.osgeo.org] On Behalf Of Nicolas Ragg
> Sent: Friday, 17 April 2015 7:32 AM
> To: gdal-dev at lists.osgeo.org
> Subject: Re: [gdal-dev] Trouble with French Ecw map
>
> On 15/04/2015 07:59, Jean-Claude Repetto wrote:
>> Please run the command : gdalinfo -mdd ECW file.ecw What are the 
>> metadata (ECW) :
>> PROJ= ?
>> DATUM= ?
>>
>> Jean-Claude
>>
> Still looking into this problem, i've run gdalinfo with -mdd VERSION, output is :
> Metadata:
>     COLORSPACE=RGB
>     COMPRESSION_RATE_TARGET=10
>     VERSION=2
>
> Looking on http://www.gdal.org/frmt_ecw.html, i may be facing backwards compatibility issue with a V2 file, something i was not expecting since V5.x ECW plugin is supposed to be backward compatible.
> Using gdal 1.7.2 i have no mdd at all, and no srs reported but somehow the map coordinates are good when importing it in Worldwind.
> Could it be related to the plugin compatibility issue related there
> https://trac.osgeo.org/gdal/ticket/4635 ?
>
>
>
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>


From yjacolin at free.fr  Fri Apr 17 00:35:13 2015
From: yjacolin at free.fr (Yves Jacolin)
Date: Fri, 17 Apr 2015 09:35:13 +0200
Subject: [gdal-dev] Encoding EPSG:3857 (WebMercator) in GeoTIFF,
	and ArcGIS interoperability
In-Reply-To: <201504161404.42290.even.rouault@spatialys.com>
References: <201504151815.45808.even.rouault@spatialys.com>
	<7ECDFDA5-62BF-46F8-A0D0-83A15E431D03@vaneeckhoudt.net>
	<201504161404.42290.even.rouault@spatialys.com>
Message-ID: <13747203.k5oVXyQXYV@tatras>

On Thursday, April 16, 2015 14:04:42 Even Rouault wrote:
> > OGC started a SWG to do this GeoTIFF spec refinement work. Might be
> > worthwhile to ask that group for input, although looking at their mailing
> > list, github repo and wiki pages there doesn?t seem to be much going on at
> > the moment (or at least there?s no record of it).
> 
> Yes, I've contacted one of the members.
> 
> I can't see a geotiff list at
> https://lists.opengeospatial.org/mailman/listinfo  . Is it a public one ?
> 
> Thanks,
> 
Even,

OSGeo is an OGC member so you can contact the OSGeo board to see the process 
to get an OSGeo OGC account.

See http://wiki.osgeo.org/wiki/OGC_membership

Y.


From lucadeluge at gmail.com  Fri Apr 17 01:24:17 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Fri, 17 Apr 2015 10:24:17 +0200
Subject: [gdal-dev] OGR style feature
Message-ID: <CAK4m-3x6=Ko1NasvHNbY6LJYeBuQbBOKn6=eYXr5LrW_ODtvWA@mail.gmail.com>

Hi devs,

I'm working on a QGIS plugin to export GeospatialPDF.

I have problems to use the "Symbol Name" according to OGR style feature page [0]
The "Symbol Name or ID" of SYMBOL Tool are working really well but the
"Symbol Name or ID" of PEN and BRUSH are not working for me.

these are the style applied to my features (they seems correct)

polygon BRUSH(fc:#4fbb87ff,id:"ogr-brush-7");PEN(c:#000000ff,w:0.26mm,j:b)
point SYMBOL(id:"ogr-sym-7",c:#ffff00ff,o:#000000ff,w:3mm)
lines PEN(c:#919ce5ff,w:2mm,j:r,cap:p,id:"ogr-pen-5")

and this is the result [1], the polygon should be diagcross hatch and
the line should be dot line.

Any idea to solve the problems?

The gdal version is GDAL 1.11.2

[0] http://www.gdal.org/ogr_feature_style.html
[1] http://geodati.fmach.it/tmp/prova.pdf

-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From even.rouault at spatialys.com  Fri Apr 17 01:33:54 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2015 10:33:54 +0200
Subject: [gdal-dev] OGR style feature
In-Reply-To: <CAK4m-3x6=Ko1NasvHNbY6LJYeBuQbBOKn6=eYXr5LrW_ODtvWA@mail.gmail.com>
References: <CAK4m-3x6=Ko1NasvHNbY6LJYeBuQbBOKn6=eYXr5LrW_ODtvWA@mail.gmail.com>
Message-ID: <201504171033.54181.even.rouault@spatialys.com>

Le vendredi 17 avril 2015 10:24:17, Luca Delucchi a ?crit :
> Hi devs,
> 
> I'm working on a QGIS plugin to export GeospatialPDF.
> 
> I have problems to use the "Symbol Name" according to OGR style feature
> page [0] The "Symbol Name or ID" of SYMBOL Tool are working really well
> but the "Symbol Name or ID" of PEN and BRUSH are not working for me.
> 
> these are the style applied to my features (they seems correct)
> 
> polygon BRUSH(fc:#4fbb87ff,id:"ogr-brush-7");PEN(c:#000000ff,w:0.26mm,j:b)
> point SYMBOL(id:"ogr-sym-7",c:#ffff00ff,o:#000000ff,w:3mm)
> lines PEN(c:#919ce5ff,w:2mm,j:r,cap:p,id:"ogr-pen-5")

Luca,

it is documented in http://gdal.org/frmt_pdf.html that id is only supported on 
SYMBOL for PDF export, but not on PEN and BRUSH.
For dashed line, you can use the p/pattern attribute instead.
For non-solid polygon fill, this would have to be implemented.

Best regards,

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From lucadeluge at gmail.com  Fri Apr 17 01:52:52 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Fri, 17 Apr 2015 10:52:52 +0200
Subject: [gdal-dev] OGR style feature
In-Reply-To: <201504171033.54181.even.rouault@spatialys.com>
References: <CAK4m-3x6=Ko1NasvHNbY6LJYeBuQbBOKn6=eYXr5LrW_ODtvWA@mail.gmail.com>
	<201504171033.54181.even.rouault@spatialys.com>
Message-ID: <CAK4m-3wyh5RNgeW4HvX5KUWPQgnEf3+dqayEEO9bEOr_WLccyQ@mail.gmail.com>

On 17 April 2015 at 10:33, Even Rouault <even.rouault at spatialys.com> wrote:

>
> Luca,
>

Hi Even,

> it is documented in http://gdal.org/frmt_pdf.html that id is only supported on
> SYMBOL for PDF export, but not on PEN and BRUSH.

Sorry, I read PDF document some time ago and I forgot it, I should check again

> For dashed line, you can use the p/pattern attribute instead.

yes

> For non-solid polygon fill, this would have to be implemented.
>

I opened this ticket [0], how complicate is this enhancement?


[0] http://trac.osgeo.org/gdal/ticket/5927

> Best regards,
>
> Even
>


-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From landa.martin at gmail.com  Fri Apr 17 03:26:55 2015
From: landa.martin at gmail.com (Martin Landa)
Date: Fri, 17 Apr 2015 12:26:55 +0200
Subject: [gdal-dev] support for Czech Exchange Format for Land
	Consolidation
In-Reply-To: <CA+Ei1OeBxoKauR_q1GajDxBkyMt0_Z7JV0=4EU63nwOitn0RBg@mail.gmail.com>
References: <CA+Ei1OdXVntkFOL=OamAPM3BhKg+NAXUmoPR_5sYxap5OfmacQ@mail.gmail.com>
	<1411484194.54218a223fad3@imp.free.fr>
	<CA+Ei1OeBxoKauR_q1GajDxBkyMt0_Z7JV0=4EU63nwOitn0RBg@mail.gmail.com>
Message-ID: <CA+Ei1OfBWfv1U9X5GKXnn43=qZdZsQZgBzL5E7tUemda3NaynQ@mail.gmail.com>

Hi,

2015-04-02 17:07 GMT+02:00 Martin Landa <landa.martin at gmail.com>:

[...]

>> to the user, we could have a generic XML driver that would try several XSLT
>> documents and then feed the transformed document to the GML driver. I don't
>
> Anybody here is interested to implement such driver or at least to
> collaborate on such project?
>
>> If you go with a from-the-scratch driver, I would not recommand to go from the
>> GML one which has become very complicated. GeoRSS or GPX are probably better
>> starting points.

it's seems to me that I will go this way (from-the-scratch driver).
Unfortunately I do not have enough time to start working on generic
driver first.

Martin

-- 
Martin Landa
http://geo.fsv.cvut.cz/gwiki/Landa
http://gismentors.cz/mentors/landa

From lucadeluge at gmail.com  Fri Apr 17 04:11:15 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Fri, 17 Apr 2015 13:11:15 +0200
Subject: [gdal-dev] create GeospatialPDF using Python
In-Reply-To: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
References: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
Message-ID: <CAK4m-3wvZg2GncVqyVvkqbmvEdVLi5TJQqbaU=z-XJeuLtMVzQ@mail.gmail.com>

On 13 April 2015 at 13:25, Luca Delucchi <lucadeluge at gmail.com> wrote:
> Hi all,
>

Hi devs,
some updates

>
> For vector it seems quite simple, just writing a new vector and insert
> all features but I'm not able to create it, my code [0] is not
> returning any error but I cannot find the output file
>

Now I'm able but I'm still not able to read it with GDAL, my example
is here [2], maybe some Creation Options is missing?
Also If I'm using gdal_translate after that I'm not able to read with gdalinfo

gdal_translate -of PDF ../STEM/data/OFD/060140_ravina_OFD.tif my.pdf
gdalinfo my.pdf

ERROR 4: `my.pdf' not recognised as a supported file format.

gdalinfo failed - unable to open 'my.pdf'.


> How the "Creation Options" should be passed to CreateCopy?

Maybe I found it

dst_ds = driver.CreateCopy( dst_filename, src_ds, 0,
                                [ 'TILED=YES', 'COMPRESS=PACKBITS' ] )

I was looking to GeospatialPDF format and it seems there is no
Creation Options to pass the style of vector file.
Is also this an enhancement to do?

What is the suggested way to create GeospatialPDF with raster and
styled vector together?

>
> Thanks
> Luca
>
> [0] http://pastebin.com/V8aNqWXD
> [1] http://pastebin.com/gNu2gbtF
>

[2] http://geodati.fmach.it/tmp/prova.pdf

-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From even.rouault at spatialys.com  Fri Apr 17 04:27:02 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2015 13:27:02 +0200
Subject: [gdal-dev] create GeospatialPDF using Python
In-Reply-To: <CAK4m-3wvZg2GncVqyVvkqbmvEdVLi5TJQqbaU=z-XJeuLtMVzQ@mail.gmail.com>
References: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
	<CAK4m-3wvZg2GncVqyVvkqbmvEdVLi5TJQqbaU=z-XJeuLtMVzQ@mail.gmail.com>
Message-ID: <201504171327.02879.even.rouault@spatialys.com>

Le vendredi 17 avril 2015 13:11:15, Luca Delucchi a ?crit :
> On 13 April 2015 at 13:25, Luca Delucchi <lucadeluge at gmail.com> wrote:
> > Hi all,
> 
> Hi devs,
> some updates
> 
> > For vector it seems quite simple, just writing a new vector and insert
> > all features but I'm not able to create it, my code [0] is not
> > returning any error but I cannot find the output file
> 
> Now I'm able but I'm still not able to read it with GDAL, my example
> is here [2],

The link doesn't work. 

> maybe some Creation Options is missing?
> Also If I'm using gdal_translate after that I'm not able to read with
> gdalinfo
> 
> gdal_translate -of PDF ../STEM/data/OFD/060140_ravina_OFD.tif my.pdf
> gdalinfo my.pdf
> 
> ERROR 4: `my.pdf' not recognised as a supported file format.

Can the file be opened in a PDF reader ? If so, check that your GDAL is built 
against libpoppler or libpodofo. That's required for the reading side.

> 
> gdalinfo failed - unable to open 'my.pdf'.
> 
> > How the "Creation Options" should be passed to CreateCopy?
> 
> Maybe I found it
> 
> dst_ds = driver.CreateCopy( dst_filename, src_ds, 0,
>                                 [ 'TILED=YES', 'COMPRESS=PACKBITS' ] )
> 

Yes, except PACKBITS isn't supported for the PDF driver.

> I was looking to GeospatialPDF format and it seems there is no
> Creation Options to pass the style of vector file.
> Is also this an enhancement to do?

The style is attached to each feature.

> 
> What is the suggested way to create GeospatialPDF with raster and
> styled vector together?

gdal_translate (or CreateCopy) with the OGR_DATASOURCE creation option that 
points to a vector file.

Did you have a look at Jukka's excellent tutorial ? (the link is at the bottom 
of http://gdal.org/frmt_pdf.html): 
http://latuviitta.org/documents/Geospatial_PDF_maps_from_OSM_with_GDAL.pdf

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gane.prog at gmail.com  Fri Apr 17 05:43:43 2015
From: gane.prog at gmail.com (Gane R)
Date: Fri, 17 Apr 2015 18:13:43 +0530
Subject: [gdal-dev] gdalwarp skews and rotates PDF rasters,
 when converting to GeoTIFF,
 when PDF raster are in Landscape orientation or (True north facing botton or
 right or left)
Message-ID: <CALMrLdDUwnJ1Vf7w6Rrb+auMALwmC_7EH7pGQ7Zf-yUhvzf3SQ@mail.gmail.com>

I am using gdal 1.10.1

I have a set PDFs, I am converting them to GeoTIFF.

I am using gdal with poppler for pdf  driver.

I have PDFs of places with orientation in Landscape, and north facing right
or left or bottom.

When I apply a gdalwarp for these PDFs I get unexpected rotation at GeoTIFF
output.

I read this link too

http://lists.osgeo.org/pipermail/gdal-dev/2014-June/039438.html


I need some guidance for this. Say some kind of work flow with gdal command
line tool will be of great help.

Thanking you,
Gdal gurus.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150417/d3cd4aeb/attachment.html>

From lucadeluge at gmail.com  Fri Apr 17 05:44:19 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Fri, 17 Apr 2015 14:44:19 +0200
Subject: [gdal-dev] create GeospatialPDF using Python
In-Reply-To: <201504171327.02879.even.rouault@spatialys.com>
References: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
	<CAK4m-3wvZg2GncVqyVvkqbmvEdVLi5TJQqbaU=z-XJeuLtMVzQ@mail.gmail.com>
	<201504171327.02879.even.rouault@spatialys.com>
Message-ID: <CAK4m-3wuw85WvTUq7k-c+_SvtDsW_G=9B9eQ6hfnQ4HarsaebQ@mail.gmail.com>

On 17 April 2015 at 13:27, Even Rouault <even.rouault at spatialys.com> wrote:
> Le vendredi 17 avril 2015 13:11:15, Luca Delucchi a ?crit :
>> On 13 April 2015 at 13:25, Luca Delucchi <lucadeluge at gmail.com> wrote:
>> > Hi all,
>>
>> Hi devs,
>> some updates
>>
>> > For vector it seems quite simple, just writing a new vector and insert
>> > all features but I'm not able to create it, my code [0] is not
>> > returning any error but I cannot find the output file
>>
>> Now I'm able but I'm still not able to read it with GDAL, my example
>> is here [2],
>
> The link doesn't work.
>

sorry, http://geodati.fmach.it/gfoss_geodata/prova.pdf

>> maybe some Creation Options is missing?
>> Also If I'm using gdal_translate after that I'm not able to read with
>> gdalinfo
>>
>> gdal_translate -of PDF ../STEM/data/OFD/060140_ravina_OFD.tif my.pdf
>> gdalinfo my.pdf
>>
>> ERROR 4: `my.pdf' not recognised as a supported file format.
>
> Can the file be opened in a PDF reader ? If so, check that your GDAL is built
> against libpoppler or libpodofo. That's required for the reading side.
>

Yes the PDF reader can open the file, my GDAL version should be build
against libpoppler and libpodofo

Poppler support:           yes
Podofo support:            yes


>
> The style is attached to each feature.
>

ok

>>
>> What is the suggested way to create GeospatialPDF with raster and
>> styled vector together?
>
> gdal_translate (or CreateCopy) with the OGR_DATASOURCE creation option that
> points to a vector file.
>

ok

> Did you have a look at Jukka's excellent tutorial ? (the link is at the bottom
> of http://gdal.org/frmt_pdf.html):
> http://latuviitta.org/documents/Geospatial_PDF_maps_from_OSM_with_GDAL.pdf
>

yes, but I hoped to find another way without use VRT

Thanks for the support

> Even
>


-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From even.rouault at spatialys.com  Fri Apr 17 06:12:59 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2015 15:12:59 +0200
Subject: [gdal-dev] create GeospatialPDF using Python
In-Reply-To: <CAK4m-3wuw85WvTUq7k-c+_SvtDsW_G=9B9eQ6hfnQ4HarsaebQ@mail.gmail.com>
References: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
	<201504171327.02879.even.rouault@spatialys.com>
	<CAK4m-3wuw85WvTUq7k-c+_SvtDsW_G=9B9eQ6hfnQ4HarsaebQ@mail.gmail.com>
Message-ID: <201504171512.59927.even.rouault@spatialys.com>

Le vendredi 17 avril 2015 14:44:19, Luca Delucchi a ?crit :
> On 17 April 2015 at 13:27, Even Rouault <even.rouault at spatialys.com> wrote:
> > Le vendredi 17 avril 2015 13:11:15, Luca Delucchi a ?crit :
> >> On 13 April 2015 at 13:25, Luca Delucchi <lucadeluge at gmail.com> wrote:
> >> > Hi all,
> >> 
> >> Hi devs,
> >> some updates
> >> 
> >> > For vector it seems quite simple, just writing a new vector and insert
> >> > all features but I'm not able to create it, my code [0] is not
> >> > returning any error but I cannot find the output file
> >> 
> >> Now I'm able but I'm still not able to read it with GDAL, my example
> >> is here [2],
> > 
> > The link doesn't work.
> 
> sorry, http://geodati.fmach.it/gfoss_geodata/prova.pdf
> 
> >> maybe some Creation Options is missing?
> >> Also If I'm using gdal_translate after that I'm not able to read with
> >> gdalinfo
> >> 
> >> gdal_translate -of PDF ../STEM/data/OFD/060140_ravina_OFD.tif my.pdf
> >> gdalinfo my.pdf
> >> 
> >> ERROR 4: `my.pdf' not recognised as a supported file format.
> > 
> > Can the file be opened in a PDF reader ? If so, check that your GDAL is
> > built against libpoppler or libpodofo. That's required for the reading
> > side.
> 
> Yes the PDF reader can open the file, my GDAL version should be build
> against libpoppler and libpodofo
> 
> Poppler support:           yes
> Podofo support:            yes

I can open it. See below. If you tried different ./configure options between 
builds, make sure to make clean before rebuilding, otherwise files might not 
get recompiled

$ gdalinfo prova.pdf  -checksum
Driver: PDF/Geospatial PDF
Files: prova.pdf
Size is 1024, 981
Coordinate System is:
GEOGCS["GCS_WGS_1984",
    DATUM["WGS_1984",
        SPHEROID["WGS_84",6378137,298.257223563]],
    PRIMEM["Greenwich",0],
    UNIT["Degree",0.017453292519943295]]
Origin = (11.107265291898358,46.028723077038812)
Pixel Size = (0.000015600143859,-0.000015609058582)
Metadata:
  DPI=72
  NEATLINE=POLYGON ((11.107265291898358 46.028723077038812,11.107265291898358 
46.013410590570132,11.123239839210113 46.013410590570132,11.123239839210113 
46.028723077038812,11.107265291898358 46.028723077038812))
Corner Coordinates:
Upper Left  (  11.1072653,  46.0287231) ( 11d 6'26.16"E, 46d 1'43.40"N)
Lower Left  (  11.1072653,  46.0134106) ( 11d 6'26.16"E, 46d 0'48.28"N)
Upper Right (  11.1232398,  46.0287231) ( 11d 7'23.66"E, 46d 1'43.40"N)
Lower Right (  11.1232398,  46.0134106) ( 11d 7'23.66"E, 46d 0'48.28"N)
Center      (  11.1152526,  46.0210668) ( 11d 6'54.91"E, 46d 1'15.84"N)
Band 1 Block=1024x1 Type=Byte, ColorInterp=Red
  Checksum=39379
Band 2 Block=1024x1 Type=Byte, ColorInterp=Green
  Checksum=19235
Band 3 Block=1024x1 Type=Byte, ColorInterp=Blue
  Checksum=9847


> 
> > The style is attached to each feature.
> 
> ok
> 
> >> What is the suggested way to create GeospatialPDF with raster and
> >> styled vector together?
> > 
> > gdal_translate (or CreateCopy) with the OGR_DATASOURCE creation option
> > that points to a vector file.
> 
> ok
> 
> > Did you have a look at Jukka's excellent tutorial ? (the link is at the
> > bottom of http://gdal.org/frmt_pdf.html):
> > http://latuviitta.org/documents/Geospatial_PDF_maps_from_OSM_with_GDAL.pd
> > f
> 
> yes, but I hoped to find another way without use VRT
> 
> Thanks for the support
> 
> > Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From m.g.aschenbeck at gmail.com  Fri Apr 17 11:00:36 2015
From: m.g.aschenbeck at gmail.com (Michael Aschenbeck)
Date: Fri, 17 Apr 2015 12:00:36 -0600
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <CADGz_tKRvfxqytw6y3W9T6_bgOBb+60Hh=hhJJ1zg7M9r_K43A@mail.gmail.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
	<201504161910.38973.even.rouault@spatialys.com>
	<CADGz_tLRM9cPQw46+_LJ06TYNvhfHL-Q3Xzy=HHk0a+e_enZPw@mail.gmail.com>
	<CAGYeuZnQUL2PiQzP2avRs6BtJ8X4F9V5wo1qiT-F6-qfEz+CKA@mail.gmail.com>
	<CADGz_tKRvfxqytw6y3W9T6_bgOBb+60Hh=hhJJ1zg7M9r_K43A@mail.gmail.com>
Message-ID: <CADGz_tJ3WxsUKMa38BMd064wCifB5-fyqpx=61kv1pWV5j_kDA@mail.gmail.com>

Hey guys,

I realize this is borderline impossible to debug with what I've given you.
So I managed to reproduce it with the C++ code at the bottom of the email.
The image i used is:
https://www.dropbox.com/s/i9fxstyuf8eqe8t/testsingleband.tif?dl=0

Something that is a little weird is that I cropped this image so recreating
the problem is less clunky. When I did that, the artifacts were not
present!  So, that's the reason i'm including a 65mb image.  (Perhaps Matt
was on to something when he thought about gdal chunking bigger images.)
 Using this code and this image, you should see the first nonzero row is
too dark, and the second row is too bright.

Let me know if anyone can recreate the issue and/or has any further ideas.

Thanks again,
Mike



int pushUpToRight(void *hTransforArg, int bDstToSrc, int nPointCount,
double *x, double *y, double *z, int *panSuccess)
{
//First transform to georeferenced units:
GDALGenImgProjTransform(hTransforArg, 0, nPointCount, x, y, z, panSuccess);
//Now we are in georeferenced units

        //push up and to the right
for (int i = 0; i<nPointCount; i++)
{
if (panSuccess[i] != 0)
{
x[i] = x[i] + .01;
y[i] = y[i] + .651;
}
}
 double *geo = new double[6]; //hardcoded for this example
geo[0] = 451581.6; geo[1] = 0.4; geo[2] = 0.0; geo[3] =
2420520.8000000003; geo[4]
= 0.0; geo[5] = -0.4;

//Now convert to pixels
for (int i = 0; i < nPointCount; i++)
{
x[i] = convertXToPixel(x[i], geo);
y[i] = convertYToPixel(y[i], geo);
}

return 1;
}
double convertXToPixel(double xGeo, double *adfGeoTransform) { return
((xGeo - adfGeoTransform[0]) / adfGeoTransform[1]);}
double convertYToPixel(double yGeo, double *adfGeoTransform) { return
((yGeo - adfGeoTransform[3]) / adfGeoTransform[5]);}

int main()
{
GDALDataset *poDataset;
GDALDriver *hDriver;
GDALDataset *hDstDS;

GDALAllRegister();

// Open the source file
poDataset = (GDALDataset *)GDALOpen("E:/Test/TestSingleBand.tif",
GA_ReadOnly);
CPLAssert(poDataset != NULL);

// Get output driver (GeoTIFF format)
hDriver = (GDALDriver*)GDALGetDriverByName("GTiff");
CPLAssert(hDriver != NULL);

// Create the output file.
hDstDS = hDriver->CreateCopy("E:/Test/out.tif",
poDataset,FALSE,NULL,NULL,NULL);
CPLAssert(hDstDS != NULL);

//Create the transformer
void *hTransformArgForward;
hTransformArgForward = GDALCreateGenImgProjTransformer2(poDataset, NULL,
NULL);

        //Create the warper and set various variables
GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();

psWarpOptions->padfSrcNoDataReal = (double
*)CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
{
psWarpOptions->padfSrcNoDataReal[ii] = 0;
}
psWarpOptions->hSrcDS = poDataset;
psWarpOptions->hDstDS = hDstDS;
psWarpOptions->nBandCount = GDALGetRasterCount(poDataset);
psWarpOptions->pTransformerArg = hTransformArgForward;
psWarpOptions->panSrcBands = (int *)CPLMalloc(sizeof(int));
psWarpOptions->panSrcBands[0] = 1;
psWarpOptions->panDstBands = (int *)CPLMalloc(sizeof(int));
psWarpOptions->panDstBands[0] = 1;
psWarpOptions->eResampleAlg = GRA_Cubic;
psWarpOptions->pfnProgress = GDALTermProgress;

// Establish my transformer.
    GDALTransformerFunc myTransformer = &pushUpToRight;
psWarpOptions->pfnTransformer = myTransformer;

// Initialize and execute the warp operation.
GDALWarpOperation oOperation;
oOperation.Initialize(psWarpOptions);
oOperation.ChunkAndWarpImage(0, 0,
GDALGetRasterXSize(hDstDS),
GDALGetRasterYSize(hDstDS));

        //clean
GDALDestroyWarpOptions(psWarpOptions);
GDALClose(hDstDS);
GDALClose(poDataset);

return 0;
}











On Thu, Apr 16, 2015 at 1:10 PM, Michael Aschenbeck <
m.g.aschenbeck at gmail.com> wrote:

> Some good ideas, thanks for the suggestions.
>
> I added padfDstNoDataReal, as well as the imaginary values.  I also set
> INIT_DEST to NODATA, although from what I read that was more of an option
> that affected speed.  Unfortunately my output was identical to the previous
> run and the artifacts remain present.
>
> On Thu, Apr 16, 2015 at 11:59 AM, Matt Hanson <matt.a.hanson at gmail.com>
> wrote:
>
>> Mike,
>> Are you setting padfDstNoDataReal as well?     Because GDAL performs the
>> warp in chunks I'm wondering if previously written data, that should be
>> NoData, is not recognized as such with later chunks.   However, I'm still
>> not clear on the exact details of how that works internally, Even would
>> have a better idea if this even makes sense.
>>
>> The code I'm using to set WarpOptions for doing warping on multiple input
>> images to a single outout looks like the below.   Also, are you setting
>> INIT_DEST option to "NODATA" (it's one of the key-value options that are
>> assigned to psWarpOptions->papszWarpOptions).
>>
>> Hope this helps!
>>
>> GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
>> psWarpOptions->hDstDS = imgout.GetGDALDataset();
>> psWarpOptions->nBandCount = imgout.NumBands();
>> psWarpOptions->panSrcBands = (int *) CPLMalloc(sizeof(int) *
>> psWarpOptions->nBandCount ); psWarpOptions->panDstBands = (int *)
>> CPLMalloc(sizeof(int) * psWarpOptions->nBandCount );
>> psWarpOptions->padfSrcNoDataReal = (double *) CPLMalloc(sizeof(double) *
>> psWarpOptions->nBandCount ); psWarpOptions->padfSrcNoDataImag = (double
>> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount );
>> psWarpOptions->padfDstNoDataReal = (double *) CPLMalloc(sizeof(double) *
>> psWarpOptions->nBandCount ); psWarpOptions->padfDstNoDataImag = (double
>> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount ); for (unsigned
>> int b=0;b<imgout.NumBands();b++) { psWarpOptions->panSrcBands[b] = b+1;
>> psWarpOptions->panDstBands[b] = b+1; psWarpOptions->padfSrcNoDataReal[b]
>> = images[0][b].NoDataValue(); psWarpOptions->padfDstNoDataReal[b] =
>> imgout[b].NoDataValue(); psWarpOptions->padfSrcNoDataImag[b] = 0.0;
>> psWarpOptions->padfDstNoDataImag[b] = 0.0; }
>>
>> On Thu, Apr 16, 2015 at 1:42 PM, Michael Aschenbeck <
>> m.g.aschenbeck at gmail.com> wrote:
>>
>>> Thanks for your reply.
>>>
>>> I'm using gdal 1.10.1.  I'm using cubic resampling, but i have noticed
>>> the dark line artifact with bilinear as well.  I unfortunately do not
>>> reproduce the problem with a basic gdalwarp with cubic resampling.
>>>
>>> I have written this code to do some registration. It's hard to tell in
>>> the example, but my transformation actually pushed pixels up a bit. The
>>> transformation I use handles interior pixels nicely and extends beyond the
>>> image, so there is nothing 'weird' going on with that near the boundary
>>> that I can think of.
>>>
>>> I was hoping there is a warp option i have not yet thought of.
>>>
>>> Thanks again,
>>> Mike
>>>
>>>
>>>
>>> On Thu, Apr 16, 2015 at 11:10 AM, Even Rouault <
>>> even.rouault at spatialys.com> wrote:
>>>
>>>> Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
>>>> > Hello,
>>>> >
>>>> > I'm using ChunkAndWarpMulti to warp an image.  The warping is working
>>>> > nicely, however, at the boundary I seem to be getting some artifacts.
>>>> >
>>>> > The first artifact i see is a DARK boundary of pixels in some
>>>> location.  My
>>>> > guess is that the interpolator is interpolating with blackfill
>>>> (intensity
>>>> > zero pixels).  Note that I am using the following setup:
>>>> > psWarpOptions->padfSrcNoDataReal = (double *)
>>>> > CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
>>>> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
>>>> > {
>>>> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
>>>> > }
>>>> > which i thought was supposed to treat zeros as nodata.  It doesn't
>>>> seem to
>>>> > be doing what I think it should.
>>>> >
>>>> > In some cases, I am also noticing a BRIGHT band strip of pixels
>>>> adjacent to
>>>> > the dark boundary pixels.  I don't have any thoughts on where this
>>>> artifact
>>>> > is coming from.
>>>> >
>>>> > Below you can find links to an example.  The orange you see is just
>>>> the
>>>> > background color of my viewer.  Zero pixels are set to transparent so
>>>> you
>>>> > can see the dark boundary artifact.  (Note that all of the orange
>>>> region is
>>>> > covered with zero-intensity pixels, so we haven't reached the
>>>> boundary of
>>>> > the file, just the boundary of the non-zero pixels.)  Sorry if that's
>>>> > confusing.
>>>> > The before image:
>>>> https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
>>>> > The after image with the artifacts:
>>>> > https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
>>>> >
>>>>
>>>> Mike,
>>>>
>>>> Which gdal version ? Which resampling method ?
>>>> Do you reproduce with gdalwarp ?
>>>> If so, providing input file + full gdalwarp command line would help.
>>>>
>>>> Even
>>>>
>>>> --
>>>> Spatialys - Geospatial professional services
>>>> http://www.spatialys.com
>>>>
>>>
>>>
>>> _______________________________________________
>>> gdal-dev mailing list
>>> gdal-dev at lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150417/2c44ad4e/attachment-0001.html>

From even.rouault at spatialys.com  Fri Apr 17 12:42:28 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2015 21:42:28 +0200
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <CADGz_tJ3WxsUKMa38BMd064wCifB5-fyqpx=61kv1pWV5j_kDA@mail.gmail.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
	<CADGz_tKRvfxqytw6y3W9T6_bgOBb+60Hh=hhJJ1zg7M9r_K43A@mail.gmail.com>
	<CADGz_tJ3WxsUKMa38BMd064wCifB5-fyqpx=61kv1pWV5j_kDA@mail.gmail.com>
Message-ID: <201504172142.28600.even.rouault@spatialys.com>

Le vendredi 17 avril 2015 20:00:36, Michael Aschenbeck a ?crit :
> Hey guys,
> 
> I realize this is borderline impossible to debug with what I've given you.
> So I managed to reproduce it with the C++ code at the bottom of the email.
> The image i used is:
> https://www.dropbox.com/s/i9fxstyuf8eqe8t/testsingleband.tif?dl=0
> 
> Something that is a little weird is that I cropped this image so recreating
> the problem is less clunky. When I did that, the artifacts were not
> present!  So, that's the reason i'm including a 65mb image.  (Perhaps Matt
> was on to something when he thought about gdal chunking bigger images.)
>  Using this code and this image, you should see the first nonzero row is
> too dark, and the second row is too bright.
> 
> Let me know if anyone can recreate the issue and/or has any further ideas.

I can now reproduce and finally found the reason. When you do :

psWarpOptions->padfSrcNoDataReal = (double
*)CPLMalloc(psWarpOptions->nBandCount*sizeof(double));

nBandCount has not yet been set, so it is at its default value 0, and there's 
no nodata declared...

If you do the following instead, it will work:

psWarpOptions->nBandCount = GDALGetRasterCount(poDataset);
psWarpOptions->padfSrcNoDataReal = (double
*)CPLCalloc(psWarpOptions->nBandCount, sizeof(double));
psWarpOptions->padfSrcNoDataImag = (double
*)CPLCalloc(psWarpOptions->nBandCount, sizeof(double));

(note that since you did CreateCopy() before, the original lines will remain 
above the area touched by your warped imagery. So you might want to erase 
everything with ((GDALDataset*)hDstDS)->GetRasterBand(1)->Fill(0); before)

> 
> Thanks again,
> Mike
> 
> 
> 
> int pushUpToRight(void *hTransforArg, int bDstToSrc, int nPointCount,
> double *x, double *y, double *z, int *panSuccess)
> {
> //First transform to georeferenced units:
> GDALGenImgProjTransform(hTransforArg, 0, nPointCount, x, y, z, panSuccess);
> //Now we are in georeferenced units
> 
>         //push up and to the right
> for (int i = 0; i<nPointCount; i++)
> {
> if (panSuccess[i] != 0)
> {
> x[i] = x[i] + .01;
> y[i] = y[i] + .651;
> }
> }
>  double *geo = new double[6]; //hardcoded for this example
> geo[0] = 451581.6; geo[1] = 0.4; geo[2] = 0.0; geo[3] =
> 2420520.8000000003; geo[4]
> = 0.0; geo[5] = -0.4;
> 
> //Now convert to pixels
> for (int i = 0; i < nPointCount; i++)
> {
> x[i] = convertXToPixel(x[i], geo);
> y[i] = convertYToPixel(y[i], geo);
> }
> 
> return 1;
> }
> double convertXToPixel(double xGeo, double *adfGeoTransform) { return
> ((xGeo - adfGeoTransform[0]) / adfGeoTransform[1]);}
> double convertYToPixel(double yGeo, double *adfGeoTransform) { return
> ((yGeo - adfGeoTransform[3]) / adfGeoTransform[5]);}
> 
> int main()
> {
> GDALDataset *poDataset;
> GDALDriver *hDriver;
> GDALDataset *hDstDS;
> 
> GDALAllRegister();
> 
> // Open the source file
> poDataset = (GDALDataset *)GDALOpen("E:/Test/TestSingleBand.tif",
> GA_ReadOnly);
> CPLAssert(poDataset != NULL);
> 
> // Get output driver (GeoTIFF format)
> hDriver = (GDALDriver*)GDALGetDriverByName("GTiff");
> CPLAssert(hDriver != NULL);
> 
> // Create the output file.
> hDstDS = hDriver->CreateCopy("E:/Test/out.tif",
> poDataset,FALSE,NULL,NULL,NULL);
> CPLAssert(hDstDS != NULL);
> 
> //Create the transformer
> void *hTransformArgForward;
> hTransformArgForward = GDALCreateGenImgProjTransformer2(poDataset, NULL,
> NULL);
> 
>         //Create the warper and set various variables
> GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
> 
> psWarpOptions->padfSrcNoDataReal = (double
> *)CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
> for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
> {
> psWarpOptions->padfSrcNoDataReal[ii] = 0;
> }
> psWarpOptions->hSrcDS = poDataset;
> psWarpOptions->hDstDS = hDstDS;
> psWarpOptions->nBandCount = GDALGetRasterCount(poDataset);
> psWarpOptions->pTransformerArg = hTransformArgForward;
> psWarpOptions->panSrcBands = (int *)CPLMalloc(sizeof(int));
> psWarpOptions->panSrcBands[0] = 1;
> psWarpOptions->panDstBands = (int *)CPLMalloc(sizeof(int));
> psWarpOptions->panDstBands[0] = 1;
> psWarpOptions->eResampleAlg = GRA_Cubic;
> psWarpOptions->pfnProgress = GDALTermProgress;
> 
> // Establish my transformer.
>     GDALTransformerFunc myTransformer = &pushUpToRight;
> psWarpOptions->pfnTransformer = myTransformer;
> 
> // Initialize and execute the warp operation.
> GDALWarpOperation oOperation;
> oOperation.Initialize(psWarpOptions);
> oOperation.ChunkAndWarpImage(0, 0,
> GDALGetRasterXSize(hDstDS),
> GDALGetRasterYSize(hDstDS));
> 
>         //clean
> GDALDestroyWarpOptions(psWarpOptions);
> GDALClose(hDstDS);
> GDALClose(poDataset);
> 
> return 0;
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> On Thu, Apr 16, 2015 at 1:10 PM, Michael Aschenbeck <
> 
> m.g.aschenbeck at gmail.com> wrote:
> > Some good ideas, thanks for the suggestions.
> > 
> > I added padfDstNoDataReal, as well as the imaginary values.  I also set
> > INIT_DEST to NODATA, although from what I read that was more of an option
> > that affected speed.  Unfortunately my output was identical to the
> > previous run and the artifacts remain present.
> > 
> > On Thu, Apr 16, 2015 at 11:59 AM, Matt Hanson <matt.a.hanson at gmail.com>
> > 
> > wrote:
> >> Mike,
> >> Are you setting padfDstNoDataReal as well?     Because GDAL performs the
> >> warp in chunks I'm wondering if previously written data, that should be
> >> NoData, is not recognized as such with later chunks.   However, I'm
> >> still not clear on the exact details of how that works internally, Even
> >> would have a better idea if this even makes sense.
> >> 
> >> The code I'm using to set WarpOptions for doing warping on multiple
> >> input images to a single outout looks like the below.   Also, are you
> >> setting INIT_DEST option to "NODATA" (it's one of the key-value options
> >> that are assigned to psWarpOptions->papszWarpOptions).
> >> 
> >> Hope this helps!
> >> 
> >> GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
> >> psWarpOptions->hDstDS = imgout.GetGDALDataset();
> >> psWarpOptions->nBandCount = imgout.NumBands();
> >> psWarpOptions->panSrcBands = (int *) CPLMalloc(sizeof(int) *
> >> psWarpOptions->nBandCount ); psWarpOptions->panDstBands = (int *)
> >> CPLMalloc(sizeof(int) * psWarpOptions->nBandCount );
> >> psWarpOptions->padfSrcNoDataReal = (double *) CPLMalloc(sizeof(double) *
> >> psWarpOptions->nBandCount ); psWarpOptions->padfSrcNoDataImag = (double
> >> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount );
> >> psWarpOptions->padfDstNoDataReal = (double *) CPLMalloc(sizeof(double) *
> >> psWarpOptions->nBandCount ); psWarpOptions->padfDstNoDataImag = (double
> >> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount ); for (unsigned
> >> int b=0;b<imgout.NumBands();b++) { psWarpOptions->panSrcBands[b] = b+1;
> >> psWarpOptions->panDstBands[b] = b+1; psWarpOptions->padfSrcNoDataReal[b]
> >> = images[0][b].NoDataValue(); psWarpOptions->padfDstNoDataReal[b] =
> >> imgout[b].NoDataValue(); psWarpOptions->padfSrcNoDataImag[b] = 0.0;
> >> psWarpOptions->padfDstNoDataImag[b] = 0.0; }
> >> 
> >> On Thu, Apr 16, 2015 at 1:42 PM, Michael Aschenbeck <
> >> 
> >> m.g.aschenbeck at gmail.com> wrote:
> >>> Thanks for your reply.
> >>> 
> >>> I'm using gdal 1.10.1.  I'm using cubic resampling, but i have noticed
> >>> the dark line artifact with bilinear as well.  I unfortunately do not
> >>> reproduce the problem with a basic gdalwarp with cubic resampling.
> >>> 
> >>> I have written this code to do some registration. It's hard to tell in
> >>> the example, but my transformation actually pushed pixels up a bit. The
> >>> transformation I use handles interior pixels nicely and extends beyond
> >>> the image, so there is nothing 'weird' going on with that near the
> >>> boundary that I can think of.
> >>> 
> >>> I was hoping there is a warp option i have not yet thought of.
> >>> 
> >>> Thanks again,
> >>> Mike
> >>> 
> >>> 
> >>> 
> >>> On Thu, Apr 16, 2015 at 11:10 AM, Even Rouault <
> >>> 
> >>> even.rouault at spatialys.com> wrote:
> >>>> Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
> >>>> > Hello,
> >>>> > 
> >>>> > I'm using ChunkAndWarpMulti to warp an image.  The warping is
> >>>> > working nicely, however, at the boundary I seem to be getting some
> >>>> > artifacts.
> >>>> > 
> >>>> > The first artifact i see is a DARK boundary of pixels in some
> >>>> 
> >>>> location.  My
> >>>> 
> >>>> > guess is that the interpolator is interpolating with blackfill
> >>>> 
> >>>> (intensity
> >>>> 
> >>>> > zero pixels).  Note that I am using the following setup:
> >>>> > psWarpOptions->padfSrcNoDataReal = (double *)
> >>>> > CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
> >>>> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
> >>>> > {
> >>>> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
> >>>> > }
> >>>> > which i thought was supposed to treat zeros as nodata.  It doesn't
> >>>> 
> >>>> seem to
> >>>> 
> >>>> > be doing what I think it should.
> >>>> > 
> >>>> > In some cases, I am also noticing a BRIGHT band strip of pixels
> >>>> 
> >>>> adjacent to
> >>>> 
> >>>> > the dark boundary pixels.  I don't have any thoughts on where this
> >>>> 
> >>>> artifact
> >>>> 
> >>>> > is coming from.
> >>>> > 
> >>>> > Below you can find links to an example.  The orange you see is just
> >>>> 
> >>>> the
> >>>> 
> >>>> > background color of my viewer.  Zero pixels are set to transparent
> >>>> > so
> >>>> 
> >>>> you
> >>>> 
> >>>> > can see the dark boundary artifact.  (Note that all of the orange
> >>>> 
> >>>> region is
> >>>> 
> >>>> > covered with zero-intensity pixels, so we haven't reached the
> >>>> 
> >>>> boundary of
> >>>> 
> >>>> > the file, just the boundary of the non-zero pixels.)  Sorry if
> >>>> > that's confusing.
> >>>> 
> >>>> > The before image:
> >>>> https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
> >>>> 
> >>>> > The after image with the artifacts:
> >>>> > https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
> >>>> 
> >>>> Mike,
> >>>> 
> >>>> Which gdal version ? Which resampling method ?
> >>>> Do you reproduce with gdalwarp ?
> >>>> If so, providing input file + full gdalwarp command line would help.
> >>>> 
> >>>> Even
> >>>> 
> >>>> --
> >>>> Spatialys - Geospatial professional services
> >>>> http://www.spatialys.com
> >>> 
> >>> _______________________________________________
> >>> gdal-dev mailing list
> >>> gdal-dev at lists.osgeo.org
> >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From m.g.aschenbeck at gmail.com  Fri Apr 17 13:43:18 2015
From: m.g.aschenbeck at gmail.com (Michael Aschenbeck)
Date: Fri, 17 Apr 2015 14:43:18 -0600
Subject: [gdal-dev] Boundary Artifact with ChunkAndWarpImage
In-Reply-To: <201504172142.28600.even.rouault@spatialys.com>
References: <CADGz_tJbEXhzFNzF6fsyVGpvHzHOLdT4zgw_Qrg+VANtJ999qQ@mail.gmail.com>
	<CADGz_tKRvfxqytw6y3W9T6_bgOBb+60Hh=hhJJ1zg7M9r_K43A@mail.gmail.com>
	<CADGz_tJ3WxsUKMa38BMd064wCifB5-fyqpx=61kv1pWV5j_kDA@mail.gmail.com>
	<201504172142.28600.even.rouault@spatialys.com>
Message-ID: <CADGz_tKHs72s1Lfo+e34Zm5LZ_Y9wzOOJXbE+e040NN64=JHng@mail.gmail.com>

That did the trick!  Sorry to burden the mailing list with a stupid error
like this.  However, I really appreciate you taking the time to help.

Best,
Mike

On Fri, Apr 17, 2015 at 1:42 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Le vendredi 17 avril 2015 20:00:36, Michael Aschenbeck a ?crit :
> > Hey guys,
> >
> > I realize this is borderline impossible to debug with what I've given
> you.
> > So I managed to reproduce it with the C++ code at the bottom of the
> email.
> > The image i used is:
> > https://www.dropbox.com/s/i9fxstyuf8eqe8t/testsingleband.tif?dl=0
> >
> > Something that is a little weird is that I cropped this image so
> recreating
> > the problem is less clunky. When I did that, the artifacts were not
> > present!  So, that's the reason i'm including a 65mb image.  (Perhaps
> Matt
> > was on to something when he thought about gdal chunking bigger images.)
> >  Using this code and this image, you should see the first nonzero row is
> > too dark, and the second row is too bright.
> >
> > Let me know if anyone can recreate the issue and/or has any further
> ideas.
>
> I can now reproduce and finally found the reason. When you do :
>
> psWarpOptions->padfSrcNoDataReal = (double
> *)CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
>
> nBandCount has not yet been set, so it is at its default value 0, and
> there's
> no nodata declared...
>
> If you do the following instead, it will work:
>
> psWarpOptions->nBandCount = GDALGetRasterCount(poDataset);
> psWarpOptions->padfSrcNoDataReal = (double
> *)CPLCalloc(psWarpOptions->nBandCount, sizeof(double));
> psWarpOptions->padfSrcNoDataImag = (double
> *)CPLCalloc(psWarpOptions->nBandCount, sizeof(double));
>
> (note that since you did CreateCopy() before, the original lines will
> remain
> above the area touched by your warped imagery. So you might want to erase
> everything with ((GDALDataset*)hDstDS)->GetRasterBand(1)->Fill(0); before)
>
> >
> > Thanks again,
> > Mike
> >
> >
> >
> > int pushUpToRight(void *hTransforArg, int bDstToSrc, int nPointCount,
> > double *x, double *y, double *z, int *panSuccess)
> > {
> > //First transform to georeferenced units:
> > GDALGenImgProjTransform(hTransforArg, 0, nPointCount, x, y, z,
> panSuccess);
> > //Now we are in georeferenced units
> >
> >         //push up and to the right
> > for (int i = 0; i<nPointCount; i++)
> > {
> > if (panSuccess[i] != 0)
> > {
> > x[i] = x[i] + .01;
> > y[i] = y[i] + .651;
> > }
> > }
> >  double *geo = new double[6]; //hardcoded for this example
> > geo[0] = 451581.6; geo[1] = 0.4; geo[2] = 0.0; geo[3] =
> > 2420520.8000000003; geo[4]
> > = 0.0; geo[5] = -0.4;
> >
> > //Now convert to pixels
> > for (int i = 0; i < nPointCount; i++)
> > {
> > x[i] = convertXToPixel(x[i], geo);
> > y[i] = convertYToPixel(y[i], geo);
> > }
> >
> > return 1;
> > }
> > double convertXToPixel(double xGeo, double *adfGeoTransform) { return
> > ((xGeo - adfGeoTransform[0]) / adfGeoTransform[1]);}
> > double convertYToPixel(double yGeo, double *adfGeoTransform) { return
> > ((yGeo - adfGeoTransform[3]) / adfGeoTransform[5]);}
> >
> > int main()
> > {
> > GDALDataset *poDataset;
> > GDALDriver *hDriver;
> > GDALDataset *hDstDS;
> >
> > GDALAllRegister();
> >
> > // Open the source file
> > poDataset = (GDALDataset *)GDALOpen("E:/Test/TestSingleBand.tif",
> > GA_ReadOnly);
> > CPLAssert(poDataset != NULL);
> >
> > // Get output driver (GeoTIFF format)
> > hDriver = (GDALDriver*)GDALGetDriverByName("GTiff");
> > CPLAssert(hDriver != NULL);
> >
> > // Create the output file.
> > hDstDS = hDriver->CreateCopy("E:/Test/out.tif",
> > poDataset,FALSE,NULL,NULL,NULL);
> > CPLAssert(hDstDS != NULL);
> >
> > //Create the transformer
> > void *hTransformArgForward;
> > hTransformArgForward = GDALCreateGenImgProjTransformer2(poDataset, NULL,
> > NULL);
> >
> >         //Create the warper and set various variables
> > GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
> >
> > psWarpOptions->padfSrcNoDataReal = (double
> > *)CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
> > {
> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
> > }
> > psWarpOptions->hSrcDS = poDataset;
> > psWarpOptions->hDstDS = hDstDS;
> > psWarpOptions->nBandCount = GDALGetRasterCount(poDataset);
> > psWarpOptions->pTransformerArg = hTransformArgForward;
> > psWarpOptions->panSrcBands = (int *)CPLMalloc(sizeof(int));
> > psWarpOptions->panSrcBands[0] = 1;
> > psWarpOptions->panDstBands = (int *)CPLMalloc(sizeof(int));
> > psWarpOptions->panDstBands[0] = 1;
> > psWarpOptions->eResampleAlg = GRA_Cubic;
> > psWarpOptions->pfnProgress = GDALTermProgress;
> >
> > // Establish my transformer.
> >     GDALTransformerFunc myTransformer = &pushUpToRight;
> > psWarpOptions->pfnTransformer = myTransformer;
> >
> > // Initialize and execute the warp operation.
> > GDALWarpOperation oOperation;
> > oOperation.Initialize(psWarpOptions);
> > oOperation.ChunkAndWarpImage(0, 0,
> > GDALGetRasterXSize(hDstDS),
> > GDALGetRasterYSize(hDstDS));
> >
> >         //clean
> > GDALDestroyWarpOptions(psWarpOptions);
> > GDALClose(hDstDS);
> > GDALClose(poDataset);
> >
> > return 0;
> > }
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > On Thu, Apr 16, 2015 at 1:10 PM, Michael Aschenbeck <
> >
> > m.g.aschenbeck at gmail.com> wrote:
> > > Some good ideas, thanks for the suggestions.
> > >
> > > I added padfDstNoDataReal, as well as the imaginary values.  I also set
> > > INIT_DEST to NODATA, although from what I read that was more of an
> option
> > > that affected speed.  Unfortunately my output was identical to the
> > > previous run and the artifacts remain present.
> > >
> > > On Thu, Apr 16, 2015 at 11:59 AM, Matt Hanson <matt.a.hanson at gmail.com
> >
> > >
> > > wrote:
> > >> Mike,
> > >> Are you setting padfDstNoDataReal as well?     Because GDAL performs
> the
> > >> warp in chunks I'm wondering if previously written data, that should
> be
> > >> NoData, is not recognized as such with later chunks.   However, I'm
> > >> still not clear on the exact details of how that works internally,
> Even
> > >> would have a better idea if this even makes sense.
> > >>
> > >> The code I'm using to set WarpOptions for doing warping on multiple
> > >> input images to a single outout looks like the below.   Also, are you
> > >> setting INIT_DEST option to "NODATA" (it's one of the key-value
> options
> > >> that are assigned to psWarpOptions->papszWarpOptions).
> > >>
> > >> Hope this helps!
> > >>
> > >> GDALWarpOptions *psWarpOptions = GDALCreateWarpOptions();
> > >> psWarpOptions->hDstDS = imgout.GetGDALDataset();
> > >> psWarpOptions->nBandCount = imgout.NumBands();
> > >> psWarpOptions->panSrcBands = (int *) CPLMalloc(sizeof(int) *
> > >> psWarpOptions->nBandCount ); psWarpOptions->panDstBands = (int *)
> > >> CPLMalloc(sizeof(int) * psWarpOptions->nBandCount );
> > >> psWarpOptions->padfSrcNoDataReal = (double *)
> CPLMalloc(sizeof(double) *
> > >> psWarpOptions->nBandCount ); psWarpOptions->padfSrcNoDataImag =
> (double
> > >> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount );
> > >> psWarpOptions->padfDstNoDataReal = (double *)
> CPLMalloc(sizeof(double) *
> > >> psWarpOptions->nBandCount ); psWarpOptions->padfDstNoDataImag =
> (double
> > >> *) CPLMalloc(sizeof(double) * psWarpOptions->nBandCount ); for
> (unsigned
> > >> int b=0;b<imgout.NumBands();b++) { psWarpOptions->panSrcBands[b] =
> b+1;
> > >> psWarpOptions->panDstBands[b] = b+1;
> psWarpOptions->padfSrcNoDataReal[b]
> > >> = images[0][b].NoDataValue(); psWarpOptions->padfDstNoDataReal[b] =
> > >> imgout[b].NoDataValue(); psWarpOptions->padfSrcNoDataImag[b] = 0.0;
> > >> psWarpOptions->padfDstNoDataImag[b] = 0.0; }
> > >>
> > >> On Thu, Apr 16, 2015 at 1:42 PM, Michael Aschenbeck <
> > >>
> > >> m.g.aschenbeck at gmail.com> wrote:
> > >>> Thanks for your reply.
> > >>>
> > >>> I'm using gdal 1.10.1.  I'm using cubic resampling, but i have
> noticed
> > >>> the dark line artifact with bilinear as well.  I unfortunately do not
> > >>> reproduce the problem with a basic gdalwarp with cubic resampling.
> > >>>
> > >>> I have written this code to do some registration. It's hard to tell
> in
> > >>> the example, but my transformation actually pushed pixels up a bit.
> The
> > >>> transformation I use handles interior pixels nicely and extends
> beyond
> > >>> the image, so there is nothing 'weird' going on with that near the
> > >>> boundary that I can think of.
> > >>>
> > >>> I was hoping there is a warp option i have not yet thought of.
> > >>>
> > >>> Thanks again,
> > >>> Mike
> > >>>
> > >>>
> > >>>
> > >>> On Thu, Apr 16, 2015 at 11:10 AM, Even Rouault <
> > >>>
> > >>> even.rouault at spatialys.com> wrote:
> > >>>> Le jeudi 16 avril 2015 19:01:57, Michael Aschenbeck a ?crit :
> > >>>> > Hello,
> > >>>> >
> > >>>> > I'm using ChunkAndWarpMulti to warp an image.  The warping is
> > >>>> > working nicely, however, at the boundary I seem to be getting some
> > >>>> > artifacts.
> > >>>> >
> > >>>> > The first artifact i see is a DARK boundary of pixels in some
> > >>>>
> > >>>> location.  My
> > >>>>
> > >>>> > guess is that the interpolator is interpolating with blackfill
> > >>>>
> > >>>> (intensity
> > >>>>
> > >>>> > zero pixels).  Note that I am using the following setup:
> > >>>> > psWarpOptions->padfSrcNoDataReal = (double *)
> > >>>> > CPLMalloc(psWarpOptions->nBandCount*sizeof(double));
> > >>>> > for (int ii = 0; ii < psWarpOptions->nBandCount; ii++)
> > >>>> > {
> > >>>> > psWarpOptions->padfSrcNoDataReal[ii] = 0;
> > >>>> > }
> > >>>> > which i thought was supposed to treat zeros as nodata.  It doesn't
> > >>>>
> > >>>> seem to
> > >>>>
> > >>>> > be doing what I think it should.
> > >>>> >
> > >>>> > In some cases, I am also noticing a BRIGHT band strip of pixels
> > >>>>
> > >>>> adjacent to
> > >>>>
> > >>>> > the dark boundary pixels.  I don't have any thoughts on where this
> > >>>>
> > >>>> artifact
> > >>>>
> > >>>> > is coming from.
> > >>>> >
> > >>>> > Below you can find links to an example.  The orange you see is
> just
> > >>>>
> > >>>> the
> > >>>>
> > >>>> > background color of my viewer.  Zero pixels are set to transparent
> > >>>> > so
> > >>>>
> > >>>> you
> > >>>>
> > >>>> > can see the dark boundary artifact.  (Note that all of the orange
> > >>>>
> > >>>> region is
> > >>>>
> > >>>> > covered with zero-intensity pixels, so we haven't reached the
> > >>>>
> > >>>> boundary of
> > >>>>
> > >>>> > the file, just the boundary of the non-zero pixels.)  Sorry if
> > >>>> > that's confusing.
> > >>>>
> > >>>> > The before image:
> > >>>> https://www.dropbox.com/s/3kmyi8wu0qybsq9/before.JPG?dl=0
> > >>>>
> > >>>> > The after image with the artifacts:
> > >>>> > https://www.dropbox.com/s/fo0m8q95b26s61m/after.JPG?dl=0
> > >>>>
> > >>>> Mike,
> > >>>>
> > >>>> Which gdal version ? Which resampling method ?
> > >>>> Do you reproduce with gdalwarp ?
> > >>>> If so, providing input file + full gdalwarp command line would help.
> > >>>>
> > >>>> Even
> > >>>>
> > >>>> --
> > >>>> Spatialys - Geospatial professional services
> > >>>> http://www.spatialys.com
> > >>>
> > >>> _______________________________________________
> > >>> gdal-dev mailing list
> > >>> gdal-dev at lists.osgeo.org
> > >>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150417/dbfd9b87/attachment-0001.html>

From jukka.rahkonen at maanmittauslaitos.fi  Fri Apr 17 13:50:28 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Fri, 17 Apr 2015 20:50:28 +0000 (UTC)
Subject: [gdal-dev] gdalwarp skews and rotates PDF rasters,
	when converting to GeoTIFF,
	when PDF raster are in Landscape orientation or (True north facing
	botton or right or left)
References: <CALMrLdDUwnJ1Vf7w6Rrb+auMALwmC_7EH7pGQ7Zf-yUhvzf3SQ@mail.gmail.com>
Message-ID: <loom.20150417T224820-330@post.gmane.org>

Gane R <gane.prog <at> gmail.com> writes:

> 
> I am using gdal 1.10.1I have a set PDFs, I am converting them to GeoTIFF.
> I am using gdal with poppler for pdf? driver.
> I have PDFs of places with orientation in Landscape, and north facing
right or left or bottom.
> When I apply a gdalwarp for these PDFs I get unexpected rotation at
GeoTIFF output.
> I read this link
toohttp://lists.osgeo.org/pipermail/gdal-dev/2014-June/039438.html
> I need some guidance for this. Say some kind of work flow with gdal
command line tool will be of great help.

If you can share one of your PDF files and your gdalwarp command then
someone may get interested in trying to reproduce your problemn

-Jukka Rahkonen-

From jukka.rahkonen at maanmittauslaitos.fi  Fri Apr 17 14:22:44 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Fri, 17 Apr 2015 21:22:44 +0000 (UTC)
Subject: [gdal-dev] RGB to Grayscale
References: <1429218224190-5201726.post@n6.nabble.com>
Message-ID: <loom.20150417T231420-34@post.gmane.org>

Tomer <tomerlieber <at> gmail.com> writes:

> 
> Hello,
> 
> I want to change a rgb image to a grayscale image.
> Is there a way to make it through the gdal_translate.exe utility or through
> other utilities.

I guess that gdal_calc.py is your friend http://www.gdal.org/gdal_calc.html.

Syntax could be something like

gdal_calc.py -A input.tif --A_band=1 -B input.tif --B_band=2 -C input.tif
--C_band=3 --outfile=result.tif --calc="A*0.2989+B*0.5870+C*0.1140"

Formula taken from
http://www.mathworks.com/matlabcentral/answers/99136-how-do-i-convert-my-rgb-image-to-grayscale-without-using-the-image-processing-toolbox

Send a mail and tell us the right syntax after your success and I will add
it into the gdal_calc document as one new example because this feels like a
task of general interest.

-Jukka Rahkonen-


From ragg.gdal at free.fr  Fri Apr 17 16:10:27 2015
From: ragg.gdal at free.fr (Nicolas Ragg)
Date: Sat, 18 Apr 2015 01:10:27 +0200
Subject: [gdal-dev] Trouble with French Ecw map
In-Reply-To: <5530A169.6050409@free.fr>
References: <552DA155.4060304@free.fr>
	<552DFE2F.5050700@free.fr>	<552EE54D.2030903@free.fr>
	<5530A169.6050409@free.fr>
Message-ID: <553192E3.7060806@free.fr>

On 17/04/2015 08:00, Jean-Claude Repetto wrote:
> gdal_edit.py -mo "DATUM=NTF" -mo "PROJ=LM2FRANC"
Thank you so much, that did the trick!

From landa.martin at gmail.com  Sat Apr 18 03:20:42 2015
From: landa.martin at gmail.com (Martin Landa)
Date: Sat, 18 Apr 2015 12:20:42 +0200
Subject: [gdal-dev] compilation error (trunk)
Message-ID: <CA+Ei1OfpbXSN8ObW-Ry7dKx0uH_FvVgK9zXsb74nX03_juqkzA@mail.gmail.com>

Hi,

I have problem to compile GDAL trunk on my PC, any idea what could be wrong?

gdalwarpkernel.cpp: In function 'CPLErr GWKOpenCLCase(GDALWarpKernel*)':
gdalwarpkernel.cpp:3802:1: error: jump to label 'free_warper' [-fpermissive]
 free_warper:
 ^
gdalwarpkernel.cpp:3597:22: error:   from here [-fpermissive]
                 goto free_warper;


Thanks, Martin

-- 
Martin Landa
http://geo.fsv.cvut.cz/gwiki/Landa
http://gismentors.cz/mentors/landa

From gdal at awot.fi  Sat Apr 18 09:57:19 2015
From: gdal at awot.fi (Jukka Inkeri)
Date: Sat, 18 Apr 2015 19:57:19 +0300
Subject: [gdal-dev] OGR_STYLE angle problem when using SYMBOL
Message-ID: <55328CEF.2050404@awot.fi>


MTEXT no problem with angle, field/attribute SUUNTA=angle:

$ogr2ogr -f DXF  text2.dxf text2.shp \
   -sql "SELECT *,CONCAT('LABEL(f:Arial,s:12pt,t:', TEKSTI,',a:', 
CAST(SUUNTA/10000/3.14159*180 AS character(255)),')') AS OGR_STYLE FROM 
text2 "

text2.dxf:
MTEXT
   5
20000
   8
0
100
AcDbEntity
100
AcDbMText
  50
12.1295267682925
  40
0.00423334180001693
   1
110
  10
641394.99
  20
6953516.155
   0

When I try to make same to the POINT, not so lucky. suunta=direction.
$ ogr2ogr -f  "DXF" suunta.dxf suunta.shp \
    -sql "SELECT *,CONCAT('SYMBOL(a:',CAST(SUUNTA/10000/3.14159*180 AS 
character(255)),')') AS OGR_STYLE  FROM suunta "

suunta.dxf:
POINT
   5
20000
   8
0
100
AcDbEntity
100
AcDbPoint
  10
643482.817
  20
6953970.315
   0

I think that something like is missing:
  50
-136.7

Example label: works fine
$ ogrinfo -q  -sql "SELECT *,CONCAT('LABEL(f:Arial,s:12pt,t:', 
TEKSTI,',a:', CAST(SUUNTA/10000/3.14159*180 AS character(255)),')') AS 
OGR_STYLE FROM teksti " teksti.shp
...
OGRFeature(teksti):49
  OGR_STYLE (String) = LABEL(f:Arial,s:12pt,t:90,a:41.7113627176048)
   Style = LABEL(f:Arial,s:12pt,t:SomeText,a:41.7113627176048)
   POINT (633137.512 6942615.358)

Example symbol:, not work
$ ogrinfo  -q  suunta.shp -sql "SELECT 
*,CONCAT('SYMBOL(a:',CAST(SUUNTA/10000/3.14159*180 AS 
character(255)),')') AS OGR_STYLE  FROM suunta "
...
OGRFeature(suunta):453
  OGR_STYLE (String) = SYMBOL(a:91.0889072094067)
  Style = SYMBOL(a:91.0889072094067)
  POINT (632094.467 6946124.531)
...

It looks that Gdal not use angle when you have POINT element ?

$ ogr2ogr -f "ESRI Shapefile" x.shp   somesymbol_w_angle.dxf
$ ogrinfo -q -sql "SELECT * FROM x" x.shp
Layer name: x
OGRFeature(x):0
   Layer (String) = 104000 Rinteen suunta
   SubClasses (String) = AcDbEntity
   ExtendedEn (String) = (null)
   Linetype (String) = (null)
   EntityHand (String) = (null)
   Text (String) = (null)
   POINT (637587.5 6953209.45)

OGRFeature(x):1
   Layer (String) = 104000 Rinteen suunta
   SubClasses (String) = AcDbEntity
   ExtendedEn (String) = (null)
   Linetype (String) = (null)
   EntityHand (String) = (null)
   Text (String) = (null)
   POINT (637572.65 6953217.25)

somesymbol_w_angle.dxf: it include angles (attribute 50).
...
POINT
100
AcDbEntity
   8
104000 Rinteen suunta
  10
637587.50
  20
6953209.45
  50
0.0
   0
POINT
100
AcDbEntity
   8
104000 Rinteen suunta
  10
637572.65
  20
6953217.25
  50
-136.7
...

I'm doing conversion packet from shape files to dxf-files then import to 
the Ocad using symbol crosstable. All other features already works fine. 
Symbols, colors, text angle, ...

-jukka-




From even.rouault at spatialys.com  Sat Apr 18 13:26:50 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 18 Apr 2015 22:26:50 +0200
Subject: [gdal-dev] compilation error (trunk)
In-Reply-To: <CA+Ei1OfpbXSN8ObW-Ry7dKx0uH_FvVgK9zXsb74nX03_juqkzA@mail.gmail.com>
References: <CA+Ei1OfpbXSN8ObW-Ry7dKx0uH_FvVgK9zXsb74nX03_juqkzA@mail.gmail.com>
Message-ID: <201504182226.51067.even.rouault@spatialys.com>

Le samedi 18 avril 2015 12:20:42, Martin Landa a ?crit :
> Hi,
> 
> I have problem to compile GDAL trunk on my PC, any idea what could be
> wrong?
> 
> gdalwarpkernel.cpp: In function 'CPLErr GWKOpenCLCase(GDALWarpKernel*)':
> gdalwarpkernel.cpp:3802:1: error: jump to label 'free_warper'
> [-fpermissive] free_warper:
>  ^
> gdalwarpkernel.cpp:3597:22: error:   from here [-fpermissive]
>                  goto free_warper;

I've just fixed it.

You can't do:

'''
goto some_label;
int foo = 0;
some_label:
;
'''

But the following is valid (well, compiles):
'''
goto some_label;
int foo;
foo = 0;
some_label:
;
'''

https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55772 quotes the rule from the 
C++ standard.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Sun Apr 19 15:21:03 2015
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Mon, 20 Apr 2015 01:21:03 +0300
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504131401.46728.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
Message-ID: <55342A4F.1070307@gmail.com>

Hi Even,

As I promise, this is my estimation for finishing previously mentioned 
works:
1) Integrate GSoC'14 GNM by Mikhail Gusev. He finished most of work, but 
I need to review his code. - *plan to finish on 15 of May*
2) Add support for ArcGIS Server REST API to WMS driver. It'll be very 
good to add this functionality to GDAL v.2 - *already commited to trunk**.*
3) Add support for metadata numerous imagery satellites (Alos, EROS, 
Formosat, Kompsat, Landsat, Pleiades, RepidEye, Spot, Resurs-DK). - 
*plan to finished 25 of April *

So only no. 1 will not be ready for GDAL 2.0 beta version release (April 
30th). I think this is not blocking issue. The GNM may be included in 
next release (may be 2.0.1).

Best regards,
     Dmitry

13.04.2015 15:01, Even Rouault ?????:
> Hi,
>
> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
> version for the end of this month (April 30th). Are there objections to
> sticking with that plan ? Does someone need a bit more time to finish an
> ongoing work ?
>
> And if things go well with this beta (and potentially other beta(s) needed),
> we could try a release candidate for end of May. One month of beta phase might
> seem a bit short, but I'm not sure extending the beta testing period more will
> bring significant additional feedback (and things tend to slip, so better aim
> for a tight schedule). Thoughts ?
> Anyone using GDAL intensively and/or interesting in 2.0 should already track
> trunk closely ;-)
>
> I can wear the hat of 2.0 release manager, but I'm happy to let it to any
> other volunteer.
>
> Best regards,
>
> Even
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150420/9c41d182/attachment.html>

From lucadeluge at gmail.com  Mon Apr 20 00:51:57 2015
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Mon, 20 Apr 2015 09:51:57 +0200
Subject: [gdal-dev] create GeospatialPDF using Python
In-Reply-To: <201504171512.59927.even.rouault@spatialys.com>
References: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
	<201504171327.02879.even.rouault@spatialys.com>
	<CAK4m-3wuw85WvTUq7k-c+_SvtDsW_G=9B9eQ6hfnQ4HarsaebQ@mail.gmail.com>
	<201504171512.59927.even.rouault@spatialys.com>
Message-ID: <CAK4m-3yZp2q04E42krneW7dRCHvpjvt-wOCGH2n+f3K2h=zTEA@mail.gmail.com>

On 17 April 2015 at 15:12, Even Rouault <even.rouault at spatialys.com> wrote:
>
>
> I can open it. See below. If you tried different ./configure options between
> builds, make sure to make clean before rebuilding, otherwise files might not
> get recompiled
>

Ok, rebuild from scratch it works.

Last question, I have GeospatialPDF with the right style for vector
and I tried to join it with geotiff, the output has right geometries
position but wrong color, could be this a bug?

-- 
ciao
Luca

http://gis.cri.fmach.it/delucchi/
www.lucadelu.org

From blazej.doruch at gmail.com  Mon Apr 20 01:20:22 2015
From: blazej.doruch at gmail.com (=?UTF-8?B?QsWCYcW8ZWogRG9ydWNo?=)
Date: Mon, 20 Apr 2015 10:20:22 +0200
Subject: [gdal-dev] building interface to org2org
Message-ID: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>

Has anybody make program which implement org2org,
I need to have such functionality:
-select file (files) to convert;
-select type of conversion (source and destination EPSG- only 2175-2177
(both ways));
-select type of file format;
-make conversion;

I need to do it but I really don't know how.
If somebody has such experience plese answer.

Blaze.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150420/d5ee4862/attachment.html>

From eloi at openmailbox.org  Mon Apr 20 02:06:00 2015
From: eloi at openmailbox.org (Eloi)
Date: Mon, 20 Apr 2015 11:06:00 +0200
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
Message-ID: <a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>

On 2015-04-20 10:20, B?a?ej Doruch wrote:
> Has anybody make program which implement org2org,
> 
> I need to have such functionality:
> -select file (files) to convert;
> -select type of conversion (source and destination EPSG- only
> 2175-2177 (both ways));
> -select type of file format;
> -make conversion;

QGIS.
http://qgis.org

-- 
Eloi Ribeiro
Geoinformatic
51.9871, 5.6661
http://eloiribeiro.eu (home server, probably down o_O)

From blazej.doruch at gmail.com  Mon Apr 20 03:01:34 2015
From: blazej.doruch at gmail.com (=?UTF-8?B?QsWCYcW8ZWogRG9ydWNo?=)
Date: Mon, 20 Apr 2015 12:01:34 +0200
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
Message-ID: <CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>

...but in QGIS, and also new version of FWtools 2.4.7 it's some kind of
mistake in transformation beetween EPSG:2175 and 2175 (about 40 meters
displacement)
that's why I must use older version - FWtools 1.3.5 .
And the second reason why I want to do it is that in QGIS as I know there
is no multiple file transformation option.

Blaze

2015-04-20 11:06 GMT+02:00 Eloi <eloi at openmailbox.org>:

> On 2015-04-20 10:20, B?a?ej Doruch wrote:
>
>> Has anybody make program which implement org2org,
>>
>> I need to have such functionality:
>> -select file (files) to convert;
>> -select type of conversion (source and destination EPSG- only
>> 2175-2177 (both ways));
>> -select type of file format;
>> -make conversion;
>>
>
> QGIS.
> http://qgis.org
>
> --
> Eloi Ribeiro
> Geoinformatic
> 51.9871, 5.6661
> http://eloiribeiro.eu (home server, probably down o_O)
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev




-- 
B?a?ej Doruch
blazej.doruch at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150420/3b775a7a/attachment.html>

From vesnikos at gmail.com  Mon Apr 20 03:06:05 2015
From: vesnikos at gmail.com (Nick Ves)
Date: Mon, 20 Apr 2015 13:06:05 +0300
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
Message-ID: <CADCcPvu=TaZuCQy9KqpiqwJutA4PDBPsDwEGbWDhVCo94iwy5A@mail.gmail.com>

You can try ogr2gui. I haven't used it tho. Give it a spin and
afterwards if you want you can tell us if its any good.

http://www.ogr2gui.ca/en/index.php

On Mon, Apr 20, 2015 at 1:01 PM, B?a?ej Doruch <blazej.doruch at gmail.com> wrote:
> ...but in QGIS, and also new version of FWtools 2.4.7 it's some kind of
> mistake in transformation beetween EPSG:2175 and 2175 (about 40 meters
> displacement)
> that's why I must use older version - FWtools 1.3.5 .
> And the second reason why I want to do it is that in QGIS as I know there is
> no multiple file transformation option.
>
> Blaze
>
> 2015-04-20 11:06 GMT+02:00 Eloi <eloi at openmailbox.org>:
>>
>> On 2015-04-20 10:20, B?a?ej Doruch wrote:
>>>
>>> Has anybody make program which implement org2org,
>>>
>>> I need to have such functionality:
>>> -select file (files) to convert;
>>> -select type of conversion (source and destination EPSG- only
>>> 2175-2177 (both ways));
>>> -select type of file format;
>>> -make conversion;
>>
>>
>> QGIS.
>> http://qgis.org
>>
>> --
>> Eloi Ribeiro
>> Geoinformatic
>> 51.9871, 5.6661
>> http://eloiribeiro.eu (home server, probably down o_O)
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
>
>
> --
> B?a?ej Doruch
> blazej.doruch at gmail.com
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

From jukka.rahkonen at maanmittauslaitos.fi  Mon Apr 20 03:56:21 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Mon, 20 Apr 2015 10:56:21 +0000 (UTC)
Subject: [gdal-dev] building interface to org2org
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
	<CADCcPvu=TaZuCQy9KqpiqwJutA4PDBPsDwEGbWDhVCo94iwy5A@mail.gmail.com>
Message-ID: <loom.20150420T123836-331@post.gmane.org>

Nick Ves <vesnikos <at> gmail.com> writes:

> 
> You can try ogr2gui. I haven't used it tho. Give it a spin and
> afterwards if you want you can tell us if its any good.
> 
> http://www.ogr2gui.ca/en/index.php


Ogr2gui is excellent but a new build would be needed. Version 0.7 seems to
be built 2014-06-12 on top of GDAL 1.11. I had to check the date by looking
at the files inside the zip. Perhaps the date under the latest news title is
updating automatically to current date?

Starting to make frequent builds of ogr2ogr would give much value for the
community and probably with a reasonable amount of work and time once the
machinery is running. Any takers?

-Jukka Rahkonen-


From bradh at frogmouth.net  Mon Apr 20 03:57:06 2015
From: bradh at frogmouth.net (Brad Hards)
Date: Mon, 20 Apr 2015 20:57:06 +1000
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
Message-ID: <1433526.nv9VrEHoqo@saxicola>

On Mon, 20 Apr 2015 12:01:34 PM B?a?ej Doruch wrote:
> ...but in QGIS, and also new version of FWtools 2.4.7 it's some kind of
> mistake in transformation beetween EPSG:2175 and 2175 (about 40 meters
> displacement)
Maybe worth filing a bug report to get it fixed instead of working around the 
problem.

Brad

From blazej.doruch at gmail.com  Mon Apr 20 04:34:26 2015
From: blazej.doruch at gmail.com (=?UTF-8?B?QsWCYcW8ZWogRG9ydWNo?=)
Date: Mon, 20 Apr 2015 13:34:26 +0200
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <1433526.nv9VrEHoqo@saxicola>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
	<1433526.nv9VrEHoqo@saxicola>
Message-ID: <CAAi8j4YySRV50BX273nRWq2pv3yTiA8Qfu9tx+xnjGeDEFt3yw@mail.gmail.com>

org2gui looks nice, but there is no support for EPSG that I need.
Blaze

2015-04-20 12:57 GMT+02:00 Brad Hards <bradh at frogmouth.net>:

> On Mon, 20 Apr 2015 12:01:34 PM B?a?ej Doruch wrote:
> > ...but in QGIS, and also new version of FWtools 2.4.7 it's some kind of
> > mistake in transformation beetween EPSG:2175 and 2175 (about 40 meters
> > displacement)
> Maybe worth filing a bug report to get it fixed instead of working around
> the
> problem.
>
> Brad
>



-- 
B?a?ej Doruch
blazej.doruch at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150420/20556724/attachment.html>

From jukka.rahkonen at maanmittauslaitos.fi  Mon Apr 20 04:49:59 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Mon, 20 Apr 2015 11:49:59 +0000 (UTC)
Subject: [gdal-dev] building interface to org2org
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
	<1433526.nv9VrEHoqo@saxicola>
	<CAAi8j4YySRV50BX273nRWq2pv3yTiA8Qfu9tx+xnjGeDEFt3yw@mail.gmail.com>
Message-ID: <loom.20150420T134442-815@post.gmane.org>

B?a?ej Doruch <blazej.doruch <at> gmail.com> writes:

> 
> 
> org2gui looks nice, but there is no support for EPSG that I need.Blaze
> 

I rather believe that there is some bug that cuts loads of supported
projections from the drop-down menu. Try adding your projections directly
into the Options box in ogr2ogr syntax, for example

-s_srs epsg:4326 -t_srs epsg:2175

With those options ogr2gui wrote a shapefile for me with a .prj file

PROJCS["Pulkovo_1942_58_Poland_zone_V",GEOGCS["GCS_Pulkovo
1942(58)",DATUM["D_Pulkovo_1942_Adj_1958",SPHEROID["Krasovsky_1940",
6378245,298.3]],PRIMEM["Greenwich",0],UNIT["Degree",
0.017453292519943295]],PROJECTION["Transverse_Mercator"],
PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",
18.95833333333333],PARAMETER["scale_factor",0.999983],
PARAMETER["false_easting",237000],PARAMETER["false_northing",
-4700000],UNIT["Meter",1]].

-Jukka Rahkonen-

From yjacolin at free.fr  Mon Apr 20 03:19:31 2015
From: yjacolin at free.fr (Yves Jacolin)
Date: Mon, 20 Apr 2015 12:19:31 +0200
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
Message-ID: <2371119.GvFLE9CVOv@tatras>

Hello,

On Monday, April 20, 2015 12:01:34 B?a?ej Doruch wrote:
> ...but in QGIS, and also new version of FWtools 2.4.7 it's some kind of
> mistake in transformation beetween EPSG:2175 and 2175 (about 40 meters
> displacement)
> that's why I must use older version - FWtools 1.3.5 .
> And the second reason why I want to do it is that in QGIS as I know there
> is no multiple file transformation option.
FYI, It does with the processing tools.

Y.

From sean at mapbox.com  Mon Apr 20 09:50:11 2015
From: sean at mapbox.com (Sean Gillies)
Date: Mon, 20 Apr 2015 10:50:11 -0600
Subject: [gdal-dev] Masks vs nodata?
Message-ID: <CADPhZXy=RAoZifmS799O5tMQyFSUh++2Pwj9Qh6OuzXbL=auKQ@mail.gmail.com>

Hi all,

Not being able to unset nodata values for datasets is tripping up GDAL
users at work. I'm considering measures that require 1-bit internal masks
(we're primarily using GeoTIFF) instead of nodata values because, unlike
nodata, the masks can be "cleared" by setting them uniformly to True using
the GDAL API (GDALFillRaster() specifically).

Background: the GeoTIFF driver's SetNoDataValue() method doesn't let us
remove or set a null or empty nodata value or unset the bNoDataSet flag.
Passing a value outside the range of values in the dataset can be
problematic, especially for 8-bit data. Passing -inf, nan, or 256 to
SetNoDataValue() has the same effect on derived masks as passing 0.

I'm looking for expert advice on consequences of using masks instead of
nodata values. Are there features of GDAL that rely on nodata values and
don't respond to masks? Are there adverse implications for
interoperability? Would it be better to simply accept nodata values as
being part of the structure of datasets, like tiling and interleaving, and
immutable once set?

Thanks,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150420/534d35d0/attachment.html>

From even.rouault at spatialys.com  Mon Apr 20 10:20:15 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 20 Apr 2015 19:20:15 +0200
Subject: [gdal-dev] Masks vs nodata?
In-Reply-To: <CADPhZXy=RAoZifmS799O5tMQyFSUh++2Pwj9Qh6OuzXbL=auKQ@mail.gmail.com>
References: <CADPhZXy=RAoZifmS799O5tMQyFSUh++2Pwj9Qh6OuzXbL=auKQ@mail.gmail.com>
Message-ID: <201504201920.15238.even.rouault@spatialys.com>

Sean,

> 
> Not being able to unset nodata values for datasets is tripping up GDAL
> users at work. I'm considering measures that require 1-bit internal masks
> (we're primarily using GeoTIFF) instead of nodata values because, unlike
> nodata, the masks can be "cleared" by setting them uniformly to True using
> the GDAL API (GDALFillRaster() specifically).

If there are external masks .msk, you'd better just deleting the file. That 
will save a bit some processing time for algorithms that deal with masks.

> 
> Background: the GeoTIFF driver's SetNoDataValue() method doesn't let us
> remove or set a null or empty nodata value or unset the bNoDataSet flag.

A ClearNoDataValue() could be an interesting addition to the GDAL API indeed. 
I'm pretty sure there are tickets about that.

> Passing a value outside the range of values in the dataset can be
> problematic, especially for 8-bit data. Passing -inf, nan, or 256 to
> SetNoDataValue() has the same effect on derived masks as passing 0.

Looking at gcore/gdalnodatamaskband.cpp, it indeeds casts dfNoDataValue to 
GByte without checking. Should probably do better checking, although setting 
out-of-range nodata value is a bit in the unspecified behaviour area.

> 
> I'm looking for expert advice on consequences of using masks instead of
> nodata values. Are there features of GDAL that rely on nodata values and
> don't respond to masks? 

I wouldn't be surprised that some algorithms there or there only work with the 
nodata concept and not with the more general concept of masks (GDALContour for 
example from a quick searching)

> Are there adverse implications for
> interoperability?

In TIFF, I don't think one of nodata or nodata masks can be considered as more 
interoperable as the other. the GDAL_NODATA TIFF tag is a GDAL specific TIFF 
tag. If you use external masks (.msk), they are a GDAL specific thing. And if 
you use TIFF internal masks, they are quite an esoteric formulation of TIFF.

> Would it be better to simply accept nodata values as
> being part of the structure of datasets, like tiling and interleaving, and
> immutable once set?

Some drivers accept modifying geotransform or projection, so it is not really 
clear what users might want to change after a dataset has been created. But in 
your use case, it seems that the users do have use case for clearing an 
existing nodata value, so I'm not sure to follow your reasonning about what 
should be immutable.

The easiest way to clear nodata currently is to use :
gdal_translate -a_nodata none in.tif out.tif

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Apr 20 12:27:18 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 20 Apr 2015 21:27:18 +0200
Subject: [gdal-dev] gdalwarp skews and rotates PDF rasters,
	when converting to GeoTIFF,
	when PDF raster are in Landscape orientation or (True north facing
	botton or right or left)
In-Reply-To: <CALMrLdDUwnJ1Vf7w6Rrb+auMALwmC_7EH7pGQ7Zf-yUhvzf3SQ@mail.gmail.com>
References: <CALMrLdDUwnJ1Vf7w6Rrb+auMALwmC_7EH7pGQ7Zf-yUhvzf3SQ@mail.gmail.com>
Message-ID: <201504202127.18284.even.rouault@spatialys.com>

Le vendredi 17 avril 2015 14:43:43, Gane R a ?crit :
> I am using gdal 1.10.1
> 
> I have a set PDFs, I am converting them to GeoTIFF.
> 
> I am using gdal with poppler for pdf  driver.
> 
> I have PDFs of places with orientation in Landscape, and north facing right
> or left or bottom.
> 
> When I apply a gdalwarp for these PDFs I get unexpected rotation at GeoTIFF
> output.
> 
> I read this link too
> 
> http://lists.osgeo.org/pipermail/gdal-dev/2014-June/039438.html

Now fixed in trunk, in the particular case provided by Gane, with OGC Best 
Practice encoding and rotation = 90.
Other cases might require additional adjustments.

> 
> 
> I need some guidance for this. Say some kind of work flow with gdal command
> line tool will be of great help.
> 
> Thanking you,
> Gdal gurus.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From blazej.doruch at gmail.com  Tue Apr 21 01:05:36 2015
From: blazej.doruch at gmail.com (=?UTF-8?B?QsWCYcW8ZWogRG9ydWNo?=)
Date: Tue, 21 Apr 2015 10:05:36 +0200
Subject: [gdal-dev] building interface to org2org
In-Reply-To: <loom.20150420T134442-815@post.gmane.org>
References: <CAAi8j4bzpLtSwhUfvDOJmrNdwEkg+QbxsYMyy0NBR1=ag-cY-Q@mail.gmail.com>
	<a6fd65a1e6c00db3324475c5e7599cc5@openmailbox.org>
	<CAAi8j4bp=3PN=usrezNoF+RosfHZJN0jdwnrm+7Usn=PYdYoqA@mail.gmail.com>
	<1433526.nv9VrEHoqo@saxicola>
	<CAAi8j4YySRV50BX273nRWq2pv3yTiA8Qfu9tx+xnjGeDEFt3yw@mail.gmail.com>
	<loom.20150420T134442-815@post.gmane.org>
Message-ID: <CAAi8j4awN5WFjAxrtaKme9bE4ie_Z3+25yJ-a-XpfjNPjzw=5Q@mail.gmail.com>

Thanks for suggestion, now it's working
Blaze

2015-04-20 13:49 GMT+02:00 Jukka Rahkonen <
jukka.rahkonen at maanmittauslaitos.fi>:

> B?a?ej Doruch <blazej.doruch <at> gmail.com> writes:
>
> >
> >
> > org2gui looks nice, but there is no support for EPSG that I need.Blaze
> >
>
> I rather believe that there is some bug that cuts loads of supported
> projections from the drop-down menu. Try adding your projections directly
> into the Options box in ogr2ogr syntax, for example
>
> -s_srs epsg:4326 -t_srs epsg:2175
>
> With those options ogr2gui wrote a shapefile for me with a .prj file
>
> PROJCS["Pulkovo_1942_58_Poland_zone_V",GEOGCS["GCS_Pulkovo
> 1942(58)",DATUM["D_Pulkovo_1942_Adj_1958",SPHEROID["Krasovsky_1940",
> 6378245,298.3]],PRIMEM["Greenwich",0],UNIT["Degree",
> 0.017453292519943295]],PROJECTION["Transverse_Mercator"],
> PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",
> 18.95833333333333],PARAMETER["scale_factor",0.999983],
> PARAMETER["false_easting",237000],PARAMETER["false_northing",
> -4700000],UNIT["Meter",1]].
>
> -Jukka Rahkonen-
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
B?a?ej Doruch
blazej.doruch at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150421/399d272a/attachment.html>

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr 21 02:00:57 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 21 Apr 2015 09:00:57 +0000 (UTC)
Subject: [gdal-dev] create GeospatialPDF using Python
References: <CAK4m-3zzzZNve0qj4gGd6fQjqmnNHSfp49S6apjvwHq9fsnTFA@mail.gmail.com>
	<201504171327.02879.even.rouault@spatialys.com>
	<CAK4m-3wuw85WvTUq7k-c+_SvtDsW_G=9B9eQ6hfnQ4HarsaebQ@mail.gmail.com>
	<201504171512.59927.even.rouault@spatialys.com>
	<CAK4m-3yZp2q04E42krneW7dRCHvpjvt-wOCGH2n+f3K2h=zTEA@mail.gmail.com>
Message-ID: <loom.20150421T105507-28@post.gmane.org>

Luca Delucchi <lucadeluge <at> gmail.com> writes:

> 
> On 17 April 2015 at 15:12, Even Rouault <even.rouault <at> spatialys.com>
wrote:
> >
> >
> > I can open it. See below. If you tried different ./configure options between
> > builds, make sure to make clean before rebuilding, otherwise files might not
> > get recompiled
> >
> 
> Ok, rebuild from scratch it works.
> 
> Last question, I have GeospatialPDF with the right style for vector
> and I tried to join it with geotiff, the output has right geometries
> position but wrong color, could be this a bug?

Hi,

I would say "Yes, it may be a bug". If you would like to get a better answer
you should show us a simple way to reproduce. In this case I think that an
OGR_STYLE string with your gdal_translate command would be the minimum but
even nicer would be to get also the raster and your faulty result file to
compare with.

-Jukka Rahkonen-





From ammar83_h at yahoo.com  Tue Apr 21 02:08:53 2015
From: ammar83_h at yahoo.com (Ammar)
Date: Tue, 21 Apr 2015 09:08:53 +0000 (UTC)
Subject: [gdal-dev] Retreivinng a table with a condition using ogr2ogr OCI
Message-ID: <34567124.1225608.1429607333387.JavaMail.yahoo@mail.yahoo.com>

Hello all,
I am using ogr2ogr OCI driver to convert an Oracle table to a shape file. The command I am using is (it works perfectly):

ogr2ogr 3011 -f "ESRI Shapefile" OCI:"user/password@(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521)))(CONNECT_DATA = (SID =MY_SID))):TABLE" 

Now, I am trying to use the -sql option so that to retrieve a table only if the condition is true but I am having trouble getting the command to work. The command I'm using is:
ogr2ogr 3011 -f "ESRI Shapefile" OCI:"user/password@(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521)))(CONNECT_DATA = (SID =MY_SID))):TABLE"? -sql "SELECT * FROM TABLE WHERE DETAILTYPE = 'Something'"
and I am getting the following error message:
layer names ignored in combination with -sql.
ERROR 1: Failed to create file .shp file.
ERROR 4: Failed to open Shapefile `3011\SELECT * FROM TABLE WHERE DETAILTYPE = 'Something'.shp'.

ERROR 1: Terminating translation prematurely after failed
translation from sql statement.
How can I get ogr2ogr to work with -sql?

I am using GDAL 1.11.1, released 2014/09/24 on Windows 64-bits.
Thanks in advanceAmmar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150421/e8db14c6/attachment.html>

From even.rouault at spatialys.com  Tue Apr 21 02:36:19 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 21 Apr 2015 11:36:19 +0200
Subject: [gdal-dev] Retreivinng a table with a condition using ogr2ogr
	OCI
In-Reply-To: <34567124.1225608.1429607333387.JavaMail.yahoo@mail.yahoo.com>
References: <34567124.1225608.1429607333387.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <201504211136.19705.even.rouault@spatialys.com>

Le mardi 21 avril 2015 11:08:53, Ammar a ?crit :
> Hello all,
> I am using ogr2ogr OCI driver to convert an Oracle table to a shape file.
> The command I am using is (it works perfectly):
> 
> ogr2ogr 3011 -f "ESRI Shapefile" OCI:"user/password@(DESCRIPTION =
> (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT =
> 1521)))(CONNECT_DATA = (SID =MY_SID))):TABLE"
> 
> Now, I am trying to use the -sql option so that to retrieve a table only if
> the condition is true but I am having trouble getting the command to work.
> The command I'm using is: ogr2ogr 3011 -f "ESRI Shapefile"
> OCI:"user/password@(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL =
> TCP)(HOST = 127.0.0.1)(PORT = 1521)))(CONNECT_DATA = (SID
> =MY_SID))):TABLE"  -sql "SELECT * FROM TABLE WHERE DETAILTYPE =
> 'Something'" and I am getting the following error message:
> layer names ignored in combination with -sql.
> ERROR 1: Failed to create file .shp file.
> ERROR 4: Failed to open Shapefile `3011\SELECT * FROM TABLE WHERE
> DETAILTYPE = 'Something'.shp'.

Ammar,

it seems that the resulting layer from the SQL query is called "SELECT * FROM 
TABLE WHERE ....", which is a bit an unfortunate choice (other drivers 
generally call it "result" or "sql_statement", etc...
Anyway, add "-nln the_layer_name_you_like" to avoid this.
Alternatively you can add  -where "DETAILTYPE = 'Something'" in your first 
ogr2ogr command that operates on the table, as opposed to a full SQL request.

Even

> 
> ERROR 1: Terminating translation prematurely after failed
> translation from sql statement.
> How can I get ogr2ogr to work with -sql?
> 
> I am using GDAL 1.11.1, released 2014/09/24 on Windows 64-bits.
> Thanks in advanceAmmar

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr 21 07:43:44 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 21 Apr 2015 14:43:44 +0000 (UTC)
Subject: [gdal-dev]
	=?utf-8?q?Retreivinng_a_table_with_a_condition_using_o?=
	=?utf-8?q?gr2ogr=09OCI?=
References: <34567124.1225608.1429607333387.JavaMail.yahoo@mail.yahoo.com>
	<201504211136.19705.even.rouault@spatialys.com>
Message-ID: <loom.20150421T163625-281@post.gmane.org>

Even Rouault <even.rouault <at> spatialys.com> writes:


 
> Ammar,
> 
> it seems that the resulting layer from the SQL query is called "SELECT * FROM 
> TABLE WHERE ....", which is a bit an unfortunate choice (other drivers 
> generally call it "result" or "sql_statement", etc...
> Anyway, add "-nln the_layer_name_you_like" to avoid this.
> Alternatively you can add  -where "DETAILTYPE = 'Something'" in your first 
> ogr2ogr command that operates on the table, as opposed to a full SQL request.
 

If I read the command right:
"ogr2ogr 3011 -f "ESRI Shapefile" OCI:"user/password <at> ... "

it does not follow the ogr2ogr syntax as documented in
http://www.gdal.org/ogr2ogr.html

ogr2ogr .... dst_datasource_name src_datasource_name

The command is lacking the dst_datasource name. The real bug for my mind is
that ogr2ogr still tries to create an output. It should rather throw an
error "No destination defined".

Try with 
"ogr2ogr 3011 -f "ESRI Shapefile" output.shp OCI:"user/password <at>... "


-Jukka Rahkonen-


From sean at mapbox.com  Tue Apr 21 08:44:08 2015
From: sean at mapbox.com (Sean Gillies)
Date: Tue, 21 Apr 2015 09:44:08 -0600
Subject: [gdal-dev] Masks vs nodata?
In-Reply-To: <201504201920.15238.even.rouault@spatialys.com>
References: <CADPhZXy=RAoZifmS799O5tMQyFSUh++2Pwj9Qh6OuzXbL=auKQ@mail.gmail.com>
	<201504201920.15238.even.rouault@spatialys.com>
Message-ID: <CADPhZXzRLrA4Uj4WKqyeqH6Wtvd_XwB8UKJBLpwT=0KDBCQpYg@mail.gmail.com>

Hi Even,

On Mon, Apr 20, 2015 at 11:20 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Sean,
>
> >
> > Not being able to unset nodata values for datasets is tripping up GDAL
> > users at work. I'm considering measures that require 1-bit internal masks
> > (we're primarily using GeoTIFF) instead of nodata values because, unlike
> > nodata, the masks can be "cleared" by setting them uniformly to True
> using
> > the GDAL API (GDALFillRaster() specifically).
>
> If there are external masks .msk, you'd better just deleting the file. That
> will save a bit some processing time for algorithms that deal with masks.
>
> >
> > Background: the GeoTIFF driver's SetNoDataValue() method doesn't let us
> > remove or set a null or empty nodata value or unset the bNoDataSet flag.
>
> A ClearNoDataValue() could be an interesting addition to the GDAL API
> indeed.
> I'm pretty sure there are tickets about that.
>
> > Passing a value outside the range of values in the dataset can be
> > problematic, especially for 8-bit data. Passing -inf, nan, or 256 to
> > SetNoDataValue() has the same effect on derived masks as passing 0.
>
> Looking at gcore/gdalnodatamaskband.cpp, it indeeds casts dfNoDataValue to
> GByte without checking. Should probably do better checking, although
> setting
> out-of-range nodata value is a bit in the unspecified behaviour area.
>
> >
> > I'm looking for expert advice on consequences of using masks instead of
> > nodata values. Are there features of GDAL that rely on nodata values and
> > don't respond to masks?
>
> I wouldn't be surprised that some algorithms there or there only work with
> the
> nodata concept and not with the more general concept of masks (GDALContour
> for
> example from a quick searching)
>
> > Are there adverse implications for
> > interoperability?
>
> In TIFF, I don't think one of nodata or nodata masks can be considered as
> more
> interoperable as the other. the GDAL_NODATA TIFF tag is a GDAL specific
> TIFF
> tag. If you use external masks (.msk), they are a GDAL specific thing. And
> if
> you use TIFF internal masks, they are quite an esoteric formulation of
> TIFF.
>
> > Would it be better to simply accept nodata values as
> > being part of the structure of datasets, like tiling and interleaving,
> and
> > immutable once set?
>
> Some drivers accept modifying geotransform or projection, so it is not
> really
> clear what users might want to change after a dataset has been created.
> But in
> your use case, it seems that the users do have use case for clearing an
> existing nodata value, so I'm not sure to follow your reasonning about what
> should be immutable.
>
> The easiest way to clear nodata currently is to use :
> gdal_translate -a_nodata none in.tif out.tif
>

Yes. Thanks for the advice, Even. I'm not ready to take on driver
enhancements, so I'll work on adapting workflows to the constraints of
nodata.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150421/83cd1218/attachment-0001.html>

From even.rouault at spatialys.com  Tue Apr 21 09:05:19 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 21 Apr 2015 18:05:19 +0200
Subject: [gdal-dev]
 =?iso-8859-1?q?Retreivinng_a_table_with_a_condition_us?=
 =?iso-8859-1?q?ing_ogr2ogr=09OCI?=
In-Reply-To: <loom.20150421T163625-281@post.gmane.org>
References: <34567124.1225608.1429607333387.JavaMail.yahoo@mail.yahoo.com>
	<201504211136.19705.even.rouault@spatialys.com>
	<loom.20150421T163625-281@post.gmane.org>
Message-ID: <201504211805.20240.even.rouault@spatialys.com>

Le mardi 21 avril 2015 16:43:44, Jukka Rahkonen a ?crit :
> Even Rouault <even.rouault <at> spatialys.com> writes:
> > Ammar,
> > 
> > it seems that the resulting layer from the SQL query is called "SELECT *
> > FROM TABLE WHERE ....", which is a bit an unfortunate choice (other
> > drivers generally call it "result" or "sql_statement", etc...
> > Anyway, add "-nln the_layer_name_you_like" to avoid this.
> > Alternatively you can add  -where "DETAILTYPE = 'Something'" in your
> > first ogr2ogr command that operates on the table, as opposed to a full
> > SQL request.
> 
> If I read the command right:
> "ogr2ogr 3011 -f "ESRI Shapefile" OCI:"user/password <at> ... "
> 
> it does not follow the ogr2ogr syntax as documented in
> http://www.gdal.org/ogr2ogr.html
> 
> ogr2ogr .... dst_datasource_name src_datasource_name

Jukka,

The target filename (directory) is 3011 in the above. Although it is 
recommanded to put options starting with a dash character before other 
options, the parser is pretty tolerant about that.
From the statements that work and the ones that do not work, and what I saw in 
the OCI driver code, I do think the issue comes from the implicit naming of a 
OCI SQL resulting layer.

Even

> 
> The command is lacking the dst_datasource name. The real bug for my mind is
> that ogr2ogr still tries to create an output. It should rather throw an
> error "No destination defined".
> 
> Try with
> "ogr2ogr 3011 -f "ESRI Shapefile" output.shp OCI:"user/password <at>... "
> 
> 
> -Jukka Rahkonen-
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From xbarnada at gmail.com  Tue Apr 21 10:11:04 2015
From: xbarnada at gmail.com (Xavier Barnada)
Date: Tue, 21 Apr 2015 19:11:04 +0200
Subject: [gdal-dev] API Doubt/ Feature request
Message-ID: <CAMbW+CnOkv3sK1XgszPzi2FnfYuGb+Wc=Sze9KVVrurTvY_64g@mail.gmail.com>

Hi,

I'm trying to convert data from one format to another using ogr with python
(Postgis->SHP) using the following code:

conn=ogr.Open("PG: host=host dbname=db user=user password=password")
if conn is None:
    print 'Could not open a database or GDAL is not correctly installed!'
    sys.exit(1)

output = "out.shp"

# Schema definition of SHP file
#out_driver = ogr.GetDriverByName('Memory')
#out_ds = out_driver.CreateDataSource('out')
out_driver = ogr.GetDriverByName( 'ESRI Shapefile' )
out_ds = out_driver.CreateDataSource(output)
out_srs = None
out_layer = out_ds.CreateLayer("name", out_srs, ogr.wkbMultiLineString)
fd = ogr.FieldDefn('name',ogr.OFTString)
out_layer.CreateField(fd)

layer = conn.ExecuteSQL("select *,'' as TITLE from table")

feat = layer.GetNextFeature()
while feat is not None:
    featDef = ogr.Feature(out_layer.GetLayerDefn())
    featDef.SetGeometry(feat.GetGeometryRef())
    featDef.SetField('name',feat.TITLE)
    out_layer.CreateFeature(featDef)
    feat.Destroy()
    feat = layer.GetNextFeature()

conn.Destroy()
out_ds.Destroy()

That code works corrctly and generates the shape file, but this isn't
adecuate for the program that I'm writing because it's an HTTP service.
There is any way to get the shapefile data without writing and reading it
latter(it's inefficient)? I missed to check somthing from the documentation
 or it's not possible to get the file data as an string?

If it's not possible would it be a good improvment?


Best reggards
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150421/38ad70e9/attachment.html>

From even.rouault at spatialys.com  Tue Apr 21 10:18:59 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 21 Apr 2015 19:18:59 +0200
Subject: [gdal-dev] API Doubt/ Feature request
In-Reply-To: <CAMbW+CnOkv3sK1XgszPzi2FnfYuGb+Wc=Sze9KVVrurTvY_64g@mail.gmail.com>
References: <CAMbW+CnOkv3sK1XgszPzi2FnfYuGb+Wc=Sze9KVVrurTvY_64g@mail.gmail.com>
Message-ID: <201504211918.59994.even.rouault@spatialys.com>

Le mardi 21 avril 2015 19:11:04, Xavier Barnada a ?crit :
> Hi,
> 
> I'm trying to convert data from one format to another using ogr with python
> (Postgis->SHP) using the following code:
> 
> conn=ogr.Open("PG: host=host dbname=db user=user password=password")
> if conn is None:
>     print 'Could not open a database or GDAL is not correctly installed!'
>     sys.exit(1)
> 
> output = "out.shp"
> 
> # Schema definition of SHP file
> #out_driver = ogr.GetDriverByName('Memory')
> #out_ds = out_driver.CreateDataSource('out')
> out_driver = ogr.GetDriverByName( 'ESRI Shapefile' )
> out_ds = out_driver.CreateDataSource(output)
> out_srs = None
> out_layer = out_ds.CreateLayer("name", out_srs, ogr.wkbMultiLineString)
> fd = ogr.FieldDefn('name',ogr.OFTString)
> out_layer.CreateField(fd)
> 
> layer = conn.ExecuteSQL("select *,'' as TITLE from table")
> 
> feat = layer.GetNextFeature()
> while feat is not None:
>     featDef = ogr.Feature(out_layer.GetLayerDefn())
>     featDef.SetGeometry(feat.GetGeometryRef())
>     featDef.SetField('name',feat.TITLE)
>     out_layer.CreateFeature(featDef)
>     feat.Destroy()
>     feat = layer.GetNextFeature()
> 
> conn.Destroy()
> out_ds.Destroy()
> 
> That code works corrctly and generates the shape file, but this isn't
> adecuate for the program that I'm writing because it's an HTTP service.
> There is any way to get the shapefile data without writing and reading it
> latter(it's inefficient)? I missed to check somthing from the documentation
>  or it's not possible to get the file data as an string?

Xavier,

You could write to a in-memory file with "/vsimem/tmp.shp", and then read 
/vsimem/tmp.shp, .shx and .dbf, to send them to the HTTP output.

http://www.gdal.org/cpl__vsi_8h.html#a66e2e6f093fd42f8a941b962d4c8a19e might 
be worth reading.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pi_ml at sourcepole.com  Tue Apr 21 13:18:26 2015
From: pi_ml at sourcepole.com (Pirmin Kalberer)
Date: Tue, 21 Apr 2015 22:18:26 +0200
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504131401.46728.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
Message-ID: <1930241.UaezmnRu34@polarwind2>

Hi Even,

Am Montag, 13. April 2015, 14.01:46 schrieb Even Rouault:
> 
> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
> version for the end of this month (April 30th). Are there objections to
> sticking with that plan ? Does someone need a bit more time to finish an
> ongoing work ?

I should be able to add curve support for the Interlis driver next week.

Regards
Pirmin

-- 
Pirmin Kalberer - @PirminKalberer
Sourcepole - http://www.sourcepole.com

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr 21 13:36:51 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 21 Apr 2015 20:36:51 +0000 (UTC)
Subject: [gdal-dev]
	=?utf-8?q?Retreivinng_a_table_with_a_condition_using_o?=
	=?utf-8?q?gr2ogr=09OCI?=
References: <34567124.1225608.1429607333387.JavaMail.yahoo@mail.yahoo.com>
	<201504211136.19705.even.rouault@spatialys.com>
	<loom.20150421T163625-281@post.gmane.org>
	<201504211805.20240.even.rouault@spatialys.com>
Message-ID: <loom.20150421T220601-174@post.gmane.org>

Even Rouault <even.rouault <at> spatialys.com> writes:

> 
> Le mardi 21 avril 2015 16:43:44, Jukka Rahkonen a ?crit :

....
 
> > If I read the command right:
> > "ogr2ogr 3011 -f "ESRI Shapefile" OCI:"user/password <at> ... "
> > 
> > it does not follow the ogr2ogr syntax as documented in
> > http://www.gdal.org/ogr2ogr.html
> > 
> > ogr2ogr .... dst_datasource_name src_datasource_name
> 
> Jukka,
> 
> The target filename (directory) is 3011 in the above. Although it is 
> recommanded to put options starting with a dash character before other 
> options, the parser is pretty tolerant about that.


Oh no, ogr2ogr caught me unaware after nine years regular exercises on
typing those ogr2ogr and gdal_translate commands. Some freaky programmer
must be smiling.

-Jukka-

From jukka.rahkonen at maanmittauslaitos.fi  Tue Apr 21 14:00:48 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Tue, 21 Apr 2015 21:00:48 +0000 (UTC)
Subject: [gdal-dev] Data type of DATE in SpatiaLite
Message-ID: <loom.20150421T223904-911@post.gmane.org>

Hi,

After short investigation it looks that ogr2ogr is writing DATE data into
Spatialite database by creating a field that is defined to be of type "DATE"
and by inserting there string values in format "2006-12-21".

This is not what current native SpatiaLite tools do. They use either text
strings placed into TEXT field or Julian Day numbers stored into a DOUBLE
field. Details about why in the forum thread
https://groups.google.com/d/msg/spatialite-users/lvd7uPJ3Big/TKNPiG6IqsIJ

>From the GeoPackage specification I can read about how to store DATE:

"ISO-8601 date string in the form YYYY-MM-DD encoded in either UTF-8 or
UTF-16. See TEXT. 
Stored as SQLite TEXT"

DATETIME is to be stored as SQLite TEXT as well:
"ISO-8601 date/time string in the form YYYY-MM-DDTHH:MM:SS.SSSZ with T
separator character and Z suffix for coordinated universal time (UTC)
encoded in either UTF-8 or UTF-16. Stored as SQLite TEXT""

It might be good to uniform the behaviour and make also the
SQLite/Spatialite driver to use a TEXT field for DATE. But how GDAL could
then recognize DATE data when it reads Spatialite? How it is handled in GPKG
driver?

-Jukka Rahkonen-



 


From even.rouault at spatialys.com  Tue Apr 21 14:28:34 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 21 Apr 2015 23:28:34 +0200
Subject: [gdal-dev] Data type of DATE in SpatiaLite
In-Reply-To: <loom.20150421T223904-911@post.gmane.org>
References: <loom.20150421T223904-911@post.gmane.org>
Message-ID: <201504212328.34402.even.rouault@spatialys.com>

Le mardi 21 avril 2015 23:00:48, Jukka Rahkonen a ?crit :
> Hi,
> 
> After short investigation it looks that ogr2ogr is writing DATE data into
> Spatialite database by creating a field that is defined to be of type
> "DATE" and by inserting there string values in format "2006-12-21".
> 
> This is not what current native SpatiaLite tools do. They use either text
> strings placed into TEXT field or Julian Day numbers stored into a DOUBLE
> field. Details about why in the forum thread
> https://groups.google.com/d/msg/spatialite-users/lvd7uPJ3Big/TKNPiG6IqsIJ
> 
> From the GeoPackage specification I can read about how to store DATE:
> 
> "ISO-8601 date string in the form YYYY-MM-DD encoded in either UTF-8 or
> UTF-16. See TEXT.
> Stored as SQLite TEXT"
> 
> DATETIME is to be stored as SQLite TEXT as well:
> "ISO-8601 date/time string in the form YYYY-MM-DDTHH:MM:SS.SSSZ with T
> separator character and Z suffix for coordinated universal time (UTC)
> encoded in either UTF-8 or UTF-16. Stored as SQLite TEXT""
> 

Jukka,

The GPKG spec also mentions that the declared column data type that must be 
used is "DATE" (or "DATETIME"), that is the one used in the CREATE TABLE 
statement : CREATE TABLE my_table ( DATE my_date, ...)

This name in SQLite can be anything, since you can store anything in a SQLite 
cell. See "Type affinity" in https://www.sqlite.org/datatype3.html

On reading, the SQLite driver will currently only accept data with stored as 
text (speaking here about the content of each cell, not the declared column 
type!) and will try to parse them as ISO-8601. If the values are stored as 
floating point or integer values, it will report null. It might be good to 
implement the rule at 1.2 Date and Time Datatype of 
https://www.sqlite.org/datatype3.html to convert from Julian days or Unix 
time.

And AFAIR the SQLite/Spatialite driver must do something similar as you noted. 
This is practical to use a specific type name rather than a generic one like 
TEXT, since you can know the field type of each field.

> It might be good to uniform the behaviour and make also the
> SQLite/Spatialite driver to use a TEXT field for DATE.
> But how GDAL could
> then recognize DATE data when it reads Spatialite?

Honestly I didn't read carefully the whole thread you mention, but it seems 
there's no rule imposed by Spatialite (I should rather the tools in the 
Spatialite ecosystem, since Spatialite itself doesn't manage at all non-
spatial columns, as the name implies). You might have to use appropriate SQL 
functions related on datetimes to transform between Julian days or ISO-8601.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jukka.rahkonen at maanmittauslaitos.fi  Wed Apr 22 00:47:06 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Wed, 22 Apr 2015 07:47:06 +0000 (UTC)
Subject: [gdal-dev] Data type of DATE in SpatiaLite
References: <loom.20150421T223904-911@post.gmane.org>
	<201504212328.34402.even.rouault@spatialys.com>
Message-ID: <loom.20150422T082359-340@post.gmane.org>

Even Rouault <even.rouault <at> spatialys.com> writes:

> 
> Le mardi 21 avril 2015 23:00:48, Jukka Rahkonen a ?crit :
> > Hi,
> > 
> > After short investigation it looks that ogr2ogr is writing DATE data into
> > Spatialite database by creating a field that is defined to be of type
> > "DATE" and by inserting there string values in format "2006-12-21".
> > 
> > This is not what current native SpatiaLite tools do. They use either text
> > strings placed into TEXT field or Julian Day numbers stored into a DOUBLE
> > field. Details about why in the forum thread
> > https://groups.google.com/d/msg/spatialite-users/lvd7uPJ3Big/TKNPiG6IqsIJ
> > 
> > From the GeoPackage specification I can read about how to store DATE:
> > 
> > "ISO-8601 date string in the form YYYY-MM-DD encoded in either UTF-8 or
> > UTF-16. See TEXT.
> > Stored as SQLite TEXT"
> > 
> > DATETIME is to be stored as SQLite TEXT as well:
> > "ISO-8601 date/time string in the form YYYY-MM-DDTHH:MM:SS.SSSZ with T
> > separator character and Z suffix for coordinated universal time (UTC)
> > encoded in either UTF-8 or UTF-16. Stored as SQLite TEXT""
> > 
> 
> Jukka,
> 
> The GPKG spec also mentions that the declared column data type that must be 
> used is "DATE" (or "DATETIME"), that is the one used in the CREATE TABLE 
> statement : CREATE TABLE my_table ( DATE my_date, ...)

You are right even I can't find an example of using CREATE table...DATE from
the specification. However, the CREATE clauses for the system tables do use
DATETIME and I can imagine that the meaning is that DATE should be  used
similarly. Timestamps are created as

last_change DATETIME NOT NULL DEFAULT
(strftime('%Y-%m-%dT%H:%M:%fZ','now')),

The changelog of standard shows that TEXT was considered first 

2013-10-15 R9 Paul Daisey 2.4.3.1.1, Annex C Change timestamp column from
TEXT to DATETIME

It would be totally clear for everybody if the "Table 25
sample_feature_table Table Definition SQL (Informative)" in the page 104 of
the standard was including also own rows for date and timestamp columns but
it does not. Anyway, there is a good reason to believe that DATE and
DATETIME should be used.
 
> This name in SQLite can be anything, since you can store anything in a SQLite 
> cell. See "Type affinity" in https://www.sqlite.org/datatype3.html
> 

I know this and my mail was one consequence. I was testing an application
that is checking the schema with "PRAGMA table_info(table)" and when it
finds a DATE columns it awaits data to be in "DD/MM/YYYY" format. Chancing
the declared data type into TEXT makes this application happy and therefore
it can open Spatialite databases which are created with Spatialite-gui but
not the ones which are created with ogr2ogr.

With GPKG the situation is simple because both the declared column type and
the form of the date string are defined but for Spatialite "DD/MM/YYYY" and
"YYYY-MM-DD" and "foo_&_2_%bar" are all as acceptable as dates. But the
trouble I had comes from a bug in that application and I know how to go
around it.

> On reading, the SQLite driver will currently only accept data with stored as 
> text (speaking here about the content of each cell, not the declared column 
> type!) and will try to parse them as ISO-8601. If the values are stored as 
> floating point or integer values, it will report null. It might be good to 
> implement the rule at 1.2 Date and Time Datatype of 
> https://www.sqlite.org/datatype3.html to convert from Julian days or Unix 
> time.

I agree and I think that on the Spatialite side it might be good to make the
spatialite tools to declare the columns which are known to contain
dates/times as DATE/DATETIME even those types do not really mean anything
for SQLite and huge amounts of existing and future Spatialite databases hold
dates and times in columns which are declared as TEXT, INTEGER, DOUBLE, or
without a type at all.

All in all, handling dates is the typeless SQLite in a reliable and
interoperable way seems to be a bit complicated. I will think about writing
a line or two into http://www.gdal.org/drv_sqlite.html about how GDAL plays
with them once I understand it myself.

-Jukka-

From pepijn at vaneeckhoudt.net  Wed Apr 22 02:41:07 2015
From: pepijn at vaneeckhoudt.net (Pepijn Van Eeckhoudt)
Date: Wed, 22 Apr 2015 11:41:07 +0200
Subject: [gdal-dev] Data type of DATE in SpatiaLite
In-Reply-To: <loom.20150422T082359-340@post.gmane.org>
References: <loom.20150421T223904-911@post.gmane.org>
	<201504212328.34402.even.rouault@spatialys.com>
	<loom.20150422T082359-340@post.gmane.org>
Message-ID: <03F04E1C-4ED8-43B5-B7BE-513C443245AD@vaneeckhoudt.net>


>> Jukka,
>> 
>> The GPKG spec also mentions that the declared column data type that must be 
>> used is "DATE" (or "DATETIME"), that is the one used in the CREATE TABLE 
>> statement : CREATE TABLE my_table ( DATE my_date, ...)
> 
> You are right even I can't find an example of using CREATE table...DATE from
> the specification. However, the CREATE clauses for the system tables do use
> DATETIME and I can imagine that the meaning is that DATE should be  used
> similarly.

That?s correct. The intention is that gpkg authors only use declared column types that are listed in the spec (see req 5 and table 1). This is to allow correct interpretation of columns when exchanging gpkg files between systems.

We restricted the DATE and DATETIME format to a single ISO 8601 variant for each for the same reason. It would makes things too complicated and error prone when exchanging files if any date were allowed. The only downside to this is a performance hit compared to julian time as REAL or unix timestamp as INTEGER since the ISO 8601 string needs to be parsed.

> All in all, handling dates is the typeless SQLite in a reliable and
> interoperable way seems to be a bit complicated. I will think about writing
> a line or two into http://www.gdal.org/drv_sqlite.html <http://www.gdal.org/drv_sqlite.html> about how GDAL plays
> with them once I understand it myself.

That was my conclusion a year or two ago as well :) That?s what led to the current text in gpkg.

The same applies for the other declared column types as well. Earlier revisions of the spec didn?t have the type table which resulted in one vendor using int32, int64, float32, float64, etc; another using int, bigint, float, double and so on. Restricting numeric types to a single list again simplifies things and improves interoperability.
The sizes are intended as hints for applications. The idea is that if a column is declared as FLOAT that you can assign values from this column to a 32-bit floating point variable in Java, C, C#, etc without losing precision. Without this everything has to be 64-bit.

Pepijn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150422/47f91dfd/attachment.html>

From a.furieri at lqt.it  Wed Apr 22 03:03:02 2015
From: a.furieri at lqt.it (a.furieri at lqt.it)
Date: Wed, 22 Apr 2015 12:03:02 +0200
Subject: [gdal-dev] Data type of DATE in SpatiaLite
In-Reply-To: <loom.20150422T082359-340@post.gmane.org>
References: <loom.20150421T223904-911@post.gmane.org>
	<201504212328.34402.even.rouault@spatialys.com>
	<loom.20150422T082359-340@post.gmane.org>
Message-ID: <84d8fd1bfd810ce00f2d0fffcc05ef35@lqt.it>

Jukka, Pepjin and Even,

AFAIK there is not a clearly "better" way to store DATE values
(TIME,  DATETIME, TIMESTAMP and alike) in a SQLite DB-file.

* SQLite practically ignores any datatype definition placed
   at the column level; real datatypes are bound to each
   single cell, and can be one between TEXT, INTEGER, DOUBLE,
   BLOB or NULL.
   for any practical effect DATE or TIMESTAMP (exactly as any
   other "exotic" datatype not directly handled by SQLite) will
   simply default to TEXT.

* a full functional equivalent of DATE/TIME types as usually
   available on more conventional DBMSes is anyway supported,
   but requires a rather unconventional approach.
   you can internally store any DATE/TIME value in the form
   of Julian Numbers (actually a DOUBLE), then calling one
   of the several conversion functions supported by SQLite.
   it works nicely well, but completely depends on user or
   application actions. the DB engine itself is completely
   agnostic and doesn't offers any special support.

* the alternative approach is the one to directly store
   text strings formatted accordingly to ISO-8601.
   this choice has the obvious advantage to present human
   readable values, anyway explicitly calling the appropriate
   conversion SQL function will be always required in order
   to perform any arithmetic operation based on time
   (e.g. computing the number of days elapsed between two
   dates and alike).

both solutions seems to be roughly equivalent: both are
really far from perfection, both are intrinsically weak.
in ultimate analysis all depends on user/application
actions and on conventional assumptions; that's not what
you are expecting from a sane-minded DBMS.

a possible "universal" encoding schema to be applied
by good willing reader appa:

- when a column is declared as DATE, DATETIME etc
   - if the cell value is DOUBLE assume a Julian Number
     and apply the appropriate conversion then returning
	an ISO-8601 string.
   - if the cell value is TEXT assume ISO-8601.
     if the value does not pass formal validation
     then return NULL
   - return NULL in any other case

bye Sandro


From josh at nside.io  Wed Apr 22 09:05:57 2015
From: josh at nside.io (Dr. Joshua Jackson)
Date: Wed, 22 Apr 2015 11:05:57 -0500
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
In-Reply-To: <6EBB1B52-AF8C-4DB0-A571-2DA2342BE2AD@nside.io>
References: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
	<201504152206.37920.even.rouault@spatialys.com>
	<A882992F-324E-4CD6-A338-08844ABDB64D@nside.io>
	<201504152302.31277.even.rouault@spatialys.com>
	<6EBB1B52-AF8C-4DB0-A571-2DA2342BE2AD@nside.io>
Message-ID: <A4B3C705-8574-4096-A57C-C3A02C91F80D@nside.io>

So I changed my C++ code to follow the basic path of gdalcopyproj.py instead of copying the complete data set (see code below), and I am getting a separate .aux.xml file generated instead of the data being merged to the JP2 image file.

Someone mentioned testing against GDAL 2.0, but as I have 1.11.2 which according to the GDAL web page is the latest release.

const char *srcProjection = srcDataset->GetProjectionRef();
    double *srcTransform;
    srcDataset->GetGeoTransform(srcTransform);
    int gcpcount = srcDataset->GetGCPCount();
    const GDAL_GCP *gcps = srcDataset->GetGCPs();
    const char* gcpProj = srcDataset->GetGCPProjection();
    
    dstDataset = (GDALDataset *) GDALOpen(maskPath, GA_Update);
    
    dstDataset->SetGeoTransform(srcTransform);
    dstDataset->SetProjection(srcProjection);
    if (gcpcount > 0) {
        dstDataset->SetGCPs( gcpcount, gcps, gcpProj);
    }
    
    if(dstDataset != NULL)
    {
        GDALClose((GDALDatasetH)dstDataset);
    }




Joshua Jackson, PhD
Senior ResearchEngineer
 (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
 josh at nside.io <mailto:josh at nside.io>   www.nSide.io
 <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
> On Apr 15, 2015, at 4:06 PM, Dr. Joshua Jackson <josh at nside.io> wrote:
> 
> Yes.  For example original file is middle.jp2  New file is middle_mask.jp2.
> 
> gdalcopyproj.py middle.jp2 middle_mask.jp2
> 
> Result is middle_mask.jp2 isn?t even modified according to OS time stamp, but new file is created middle_mask.jp2.aux.xml.
> 
> 
> 
> 
> Joshua Jackson, PhD
> Senior ResearchEngineer
>  (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
>  josh at nside.io <mailto:josh at nside.io>   www.nSide.io <http://www.nside.io/>
>  <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
>   <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
>> On Apr 15, 2015, at 4:02 PM, Even Rouault <even.rouault at spatialys.com <mailto:even.rouault at spatialys.com>> wrote:
>> 
>> Le mercredi 15 avril 2015 22:58:07, Dr. Joshua Jackson a ?crit :
>>> gdalcopyproj does not work for me because it outputs a separate xml file
>>> instead of overlaying the data into the new image file.
>> 
>> Weird. I've just tested it works properly with the latest GDAL trunk (2.0dev).
>> 
>>> 
>>> 
>>> Joshua Jackson, PhD
>>> Senior ResearchEngineer
>>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
>>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io> <mailto:josh at nside.io <mailto:josh at nside.io>>   www.nSide.io <http://www.nside.io/>
>>> <http://www.nside.io/ <http://www.nside.io/>> 4031 Parkway Dr, Suite B, Florence, AL 35630
>>>  <http://www.linkedin.com/company/nside/ <http://www.linkedin.com/company/nside/>>  <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>>
>>> 
>>>> On Apr 15, 2015, at 3:06 PM, Even Rouault <even.rouault at spatialys.com <mailto:even.rouault at spatialys.com>>
>>>> wrote:
>>>> 
>>>> Le mercredi 15 avril 2015 21:46:26, Dr. Joshua Jackson a ?crit :
>>>>> I?m looking for a good solution to copy the image meta data from one JP2
>>>>> to another JP2 in C++.  I have a folder full of 4096x4096 JPEG2000
>>>>> images that I am processing with OpenCV.  On some of them I create a
>>>>> copy of the image and do some manipulations to.  As expected the new
>>>>> image file is missing all the metadata.
>>>>> 
>>>>> I have tried using CreateCopy() with the OpenJPEG library; and while
>>>>> this does work it takes a really long time per image ~40sec.  (My image
>>>>> manipulations take only ~10sec).
>>>>> 
>>>>> Is there some way to use the GetGDALDataSet() on the source file and
>>>>> then call SetMetaData() on the destination file for each meta data
>>>>> item?  How would one iterate through the metadata items?
>>>> 
>>>> The "metadata" you're talking about are more the georeferencing info,
>>>> right ? (In GDAL "metadata" is about all other metadata, excluding the
>>>> georeferencing)
>>>> 
>>>> If you use trunk, you could likely try the new USE_SRC_CODESTREAM=YES
>>>> creation open of the jp2openjpeg driver
>>>> 
>>>> Something like:
>>>> 
>>>> gdal_translate your_jp2_without_georef.jp2 out.jp2 -co 
>>>> USE_SRC_CODESTREAM=YES -a_srs EPSG:4326 -a_ullr  -96.9653320  32.4645996
>>>> -96.9598389 32.4591064
>>>> 
>>>> The SetGeoTransform() and SetProjection() API also do something similar
>>>> internally, so you could also do :
>>>> 
>>>> gdal_edit.py your_jp2_without_georef.jp2 -a_srs EPSG:4326 -a_ullr 
>>>> -96.9653320 32.4645996  -96.9598389 32.4591064
>>>> 
>>>> or more conveniently:
>>>> 
>>>> gdalcopyproj.py middle_mask.jp2 out.jp2
>>>> 
>>>> (http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj.py <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj.py>
>>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj.p <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj.p>
>>>> y>)
>>>> 
>>>> Even
>>>> 
>>>>> Here is a sample GDALInfo printout for a source image:
>>>>> 
>>>>> Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
>>>>> Files: middle_mask.jp2
>>>>> Size is 4096, 4096
>>>>> Coordinate System is:
>>>>> GEOGCS["WGS 84",
>>>>> 
>>>>>   DATUM["WGS_1984",
>>>>> 
>>>>>       SPHEROID["WGS 84",6378137,298.257223563,
>>>>> 
>>>>>           AUTHORITY["EPSG","7030"]],
>>>>> 
>>>>>       AUTHORITY["EPSG","6326"]],
>>>>> 
>>>>>   PRIMEM["Greenwich",0],
>>>>>   UNIT["degree",0.0174532925199433],
>>>>>   AUTHORITY["EPSG","4326"]]
>>>>> 
>>>>> Origin = (-96.965332031250000,32.464599609375000)
>>>>> Pixel Size = (0.000001341104507,-0.000001341104507)
>>>>> 
>>>>> Image Structure Metadata:
>>>>> INTERLEAVE=PIXEL
>>>>> 
>>>>> Corner Coordinates:
>>>>> Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W, 32d27'52.56"N)
>>>>> Lower Left  ( -96.9653320,  32.4591064) ( 96d57'55.20"W, 32d27'32.78"N)
>>>>> Upper Right ( -96.9598389,  32.4645996) ( 96d57'35.42"W, 32d27'52.56"N)
>>>>> Lower Right ( -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N)
>>>>> Center      ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N)
>>>>> Band 1 Block=1024x1024 Type=Byte, ColorInterp=Red
>>>>> 
>>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>>>>> Overviews: arbitrary
>>>>> 
>>>>> Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
>>>>> 
>>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>>>>> Overviews: arbitrary
>>>>> 
>>>>> Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
>>>>> 
>>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>>>>> Overviews: arbitrary
>>>>> 
>>>>> Joshua Jackson, PhD
>>>>> Senior ResearchEngineer
>>>>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
>>>>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io> <mailto:josh at nside.io <mailto:josh at nside.io>>
>>>>> <mailto:josh at nside.io <mailto:josh at nside.io> <mailto:josh at nside.io <mailto:josh at nside.io>>>   www.nSide.io <http://www.nside.io/>
>>>>> <http://www.nside.io/ <http://www.nside.io/>> <http://www.nside.io/ <http://www.nside.io/> <http://www.nside.io/ <http://www.nside.io/>>>
>>>>> 4031 Parkway Dr, Suite B, Florence, AL 35630
>>>>> 
>>>>> <http://www.linkedin.com/company/nside/ <http://www.linkedin.com/company/nside/>
>>>>> <http://www.linkedin.com/company/nside/ <http://www.linkedin.com/company/nside/>>> 
>>>>> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>>>
>> 
>> -- 
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com <http://www.spatialys.com/>
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150422/773dae60/attachment-0001.html>

From even.rouault at spatialys.com  Wed Apr 22 09:15:51 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 22 Apr 2015 18:15:51 +0200
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
In-Reply-To: <A4B3C705-8574-4096-A57C-C3A02C91F80D@nside.io>
References: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
	<6EBB1B52-AF8C-4DB0-A571-2DA2342BE2AD@nside.io>
	<A4B3C705-8574-4096-A57C-C3A02C91F80D@nside.io>
Message-ID: <201504221815.52137.even.rouault@spatialys.com>

Le mercredi 22 avril 2015 18:05:57, Dr. Joshua Jackson a ?crit :
> So I changed my C++ code to follow the basic path of gdalcopyproj.py
> instead of copying the complete data set (see code below), and I am
> getting a separate .aux.xml file generated instead of the data being
> merged to the JP2 image file.
> 
> Someone mentioned testing against GDAL 2.0, but as I have 1.11.2 which
> according to the GDAL web page is the latest release.

Yes, you definitely need the development version GDAL 2.0dev, unreleased yet, 
and compile it from sources :
http://trac.osgeo.org/gdal/wiki/DownloadSource#Developmentversionandsourcecontrol

or use Windows binaries for the development version :
http://www.gisinternals.com/development.php

> 
> const char *srcProjection = srcDataset->GetProjectionRef();
>     double *srcTransform;
>     srcDataset->GetGeoTransform(srcTransform);
>     int gcpcount = srcDataset->GetGCPCount();
>     const GDAL_GCP *gcps = srcDataset->GetGCPs();
>     const char* gcpProj = srcDataset->GetGCPProjection();
> 
>     dstDataset = (GDALDataset *) GDALOpen(maskPath, GA_Update);
> 
>     dstDataset->SetGeoTransform(srcTransform);
>     dstDataset->SetProjection(srcProjection);
>     if (gcpcount > 0) {
>         dstDataset->SetGCPs( gcpcount, gcps, gcpProj);
>     }
> 
>     if(dstDataset != NULL)
>     {
>         GDALClose((GDALDatasetH)dstDataset);
>     }
> 
> 
> 
> 
> Joshua Jackson, PhD
> Senior ResearchEngineer
>  (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>   www.nSide.io
>  <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
>   <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
> 
> > On Apr 15, 2015, at 4:06 PM, Dr. Joshua Jackson <josh at nside.io> wrote:
> > 
> > Yes.  For example original file is middle.jp2  New file is
> > middle_mask.jp2.
> > 
> > gdalcopyproj.py middle.jp2 middle_mask.jp2
> > 
> > Result is middle_mask.jp2 isn?t even modified according to OS time stamp,
> > but new file is created middle_mask.jp2.aux.xml.
> > 
> > 
> > 
> > 
> > Joshua Jackson, PhD
> > Senior ResearchEngineer
> > 
> >  (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
> >  <tel:2566485109> josh at nside.io <mailto:josh at nside.io>   www.nSide.io
> >  <http://www.nside.io/> <http://www.nside.io/> 4031 Parkway Dr, Suite B,
> >  Florence, AL 35630
> >  
> >   <http://www.linkedin.com/company/nside/> 
> >   <http://twitter.com/nSide__Out>
> >> 
> >> On Apr 15, 2015, at 4:02 PM, Even Rouault <even.rouault at spatialys.com
> >> <mailto:even.rouault at spatialys.com>> wrote:
> >> 
> >> Le mercredi 15 avril 2015 22:58:07, Dr. Joshua Jackson a ?crit :
> >>> gdalcopyproj does not work for me because it outputs a separate xml
> >>> file instead of overlaying the data into the new image file.
> >> 
> >> Weird. I've just tested it works properly with the latest GDAL trunk
> >> (2.0dev).
> >> 
> >>> Joshua Jackson, PhD
> >>> Senior ResearchEngineer
> >>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
> >>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>
> >>> <mailto:josh at nside.io <mailto:josh at nside.io>>   www.nSide.io
> >>> <http://www.nside.io/> <http://www.nside.io/ <http://www.nside.io/>>
> >>> 4031 Parkway Dr, Suite B, Florence, AL 35630
> >>> 
> >>>  <http://www.linkedin.com/company/nside/
> >>>  <http://www.linkedin.com/company/nside/>> 
> >>>  <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>>
> >>>  
> >>>> On Apr 15, 2015, at 3:06 PM, Even Rouault <even.rouault at spatialys.com
> >>>> <mailto:even.rouault at spatialys.com>> wrote:
> >>>> 
> >>>> Le mercredi 15 avril 2015 21:46:26, Dr. Joshua Jackson a ?crit :
> >>>>> I?m looking for a good solution to copy the image meta data from one
> >>>>> JP2 to another JP2 in C++.  I have a folder full of 4096x4096
> >>>>> JPEG2000 images that I am processing with OpenCV.  On some of them I
> >>>>> create a copy of the image and do some manipulations to.  As
> >>>>> expected the new image file is missing all the metadata.
> >>>>> 
> >>>>> I have tried using CreateCopy() with the OpenJPEG library; and while
> >>>>> this does work it takes a really long time per image ~40sec.  (My
> >>>>> image manipulations take only ~10sec).
> >>>>> 
> >>>>> Is there some way to use the GetGDALDataSet() on the source file and
> >>>>> then call SetMetaData() on the destination file for each meta data
> >>>>> item?  How would one iterate through the metadata items?
> >>>> 
> >>>> The "metadata" you're talking about are more the georeferencing info,
> >>>> right ? (In GDAL "metadata" is about all other metadata, excluding the
> >>>> georeferencing)
> >>>> 
> >>>> If you use trunk, you could likely try the new USE_SRC_CODESTREAM=YES
> >>>> creation open of the jp2openjpeg driver
> >>>> 
> >>>> Something like:
> >>>> 
> >>>> gdal_translate your_jp2_without_georef.jp2 out.jp2 -co
> >>>> USE_SRC_CODESTREAM=YES -a_srs EPSG:4326 -a_ullr  -96.9653320 
> >>>> 32.4645996 -96.9598389 32.4591064
> >>>> 
> >>>> The SetGeoTransform() and SetProjection() API also do something
> >>>> similar internally, so you could also do :
> >>>> 
> >>>> gdal_edit.py your_jp2_without_georef.jp2 -a_srs EPSG:4326 -a_ullr
> >>>> -96.9653320 32.4645996  -96.9598389 32.4591064
> >>>> 
> >>>> or more conveniently:
> >>>> 
> >>>> gdalcopyproj.py middle_mask.jp2 out.jp2
> >>>> 
> >>>> (http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj
> >>>> .py
> >>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopypro
> >>>> j.py>
> >>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopypro
> >>>> j.p
> >>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopypro
> >>>> j.p> y>)
> >>>> 
> >>>> Even
> >>>> 
> >>>>> Here is a sample GDALInfo printout for a source image:
> >>>>> 
> >>>>> Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
> >>>>> Files: middle_mask.jp2
> >>>>> Size is 4096, 4096
> >>>>> Coordinate System is:
> >>>>> GEOGCS["WGS 84",
> >>>>> 
> >>>>>   DATUM["WGS_1984",
> >>>>>   
> >>>>>       SPHEROID["WGS 84",6378137,298.257223563,
> >>>>>       
> >>>>>           AUTHORITY["EPSG","7030"]],
> >>>>>       
> >>>>>       AUTHORITY["EPSG","6326"]],
> >>>>>   
> >>>>>   PRIMEM["Greenwich",0],
> >>>>>   UNIT["degree",0.0174532925199433],
> >>>>>   AUTHORITY["EPSG","4326"]]
> >>>>> 
> >>>>> Origin = (-96.965332031250000,32.464599609375000)
> >>>>> Pixel Size = (0.000001341104507,-0.000001341104507)
> >>>>> 
> >>>>> Image Structure Metadata:
> >>>>> INTERLEAVE=PIXEL
> >>>>> 
> >>>>> Corner Coordinates:
> >>>>> Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W,
> >>>>> 32d27'52.56"N) Lower Left  ( -96.9653320,  32.4591064) (
> >>>>> 96d57'55.20"W, 32d27'32.78"N) Upper Right ( -96.9598389, 
> >>>>> 32.4645996) ( 96d57'35.42"W, 32d27'52.56"N) Lower Right (
> >>>>> -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N) Center    
> >>>>>  ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N) Band 1
> >>>>> Block=1024x1024 Type=Byte, ColorInterp=Red
> >>>>> 
> >>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
> >>>>> Overviews: arbitrary
> >>>>> 
> >>>>> Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
> >>>>> 
> >>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
> >>>>> Overviews: arbitrary
> >>>>> 
> >>>>> Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
> >>>>> 
> >>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
> >>>>> Overviews: arbitrary
> >>>>> 
> >>>>> Joshua Jackson, PhD
> >>>>> Senior ResearchEngineer
> >>>>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
> >>>>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>
> >>>>> <mailto:josh at nside.io <mailto:josh at nside.io>> <mailto:josh at nside.io
> >>>>> <mailto:josh at nside.io> <mailto:josh at nside.io
> >>>>> <mailto:josh at nside.io>>>   www.nSide.io <http://www.nside.io/>
> >>>>> <http://www.nside.io/ <http://www.nside.io/>> <http://www.nside.io/
> >>>>> <http://www.nside.io/> <http://www.nside.io/
> >>>>> <http://www.nside.io/>>> 4031 Parkway Dr, Suite B, Florence, AL
> >>>>> 35630
> >>>>> 
> >>>>> <http://www.linkedin.com/company/nside/
> >>>>> <http://www.linkedin.com/company/nside/>
> >>>>> <http://www.linkedin.com/company/nside/
> >>>>> <http://www.linkedin.com/company/nside/>>>
> >>>>> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>
> >>>>> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>>>

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From josh at nside.io  Wed Apr 22 09:23:17 2015
From: josh at nside.io (Dr. Joshua Jackson)
Date: Wed, 22 Apr 2015 11:23:17 -0500
Subject: [gdal-dev] Copy meta data from one JP2 to another JP2 C++
In-Reply-To: <201504221815.52137.even.rouault@spatialys.com>
References: <299DCA81-CD2D-4B0B-A79F-F10FD8D6A499@nside.io>
	<6EBB1B52-AF8C-4DB0-A571-2DA2342BE2AD@nside.io>
	<A4B3C705-8574-4096-A57C-C3A02C91F80D@nside.io>
	<201504221815.52137.even.rouault@spatialys.com>
Message-ID: <3A855BFE-6A8E-43C8-933D-10FF01DEBC6F@nside.io>

Thanks!  And since I?m developing on Mac and CentOS I?ll stick with compiling the source :-)


Joshua Jackson, PhD
Senior ResearchEngineer
 (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109 <tel:2566485109>
 josh at nside.io <mailto:josh at nside.io>   www.nSide.io
 <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
> On Apr 22, 2015, at 11:15 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Le mercredi 22 avril 2015 18:05:57, Dr. Joshua Jackson a ?crit :
>> So I changed my C++ code to follow the basic path of gdalcopyproj.py
>> instead of copying the complete data set (see code below), and I am
>> getting a separate .aux.xml file generated instead of the data being
>> merged to the JP2 image file.
>> 
>> Someone mentioned testing against GDAL 2.0, but as I have 1.11.2 which
>> according to the GDAL web page is the latest release.
> 
> Yes, you definitely need the development version GDAL 2.0dev, unreleased yet, 
> and compile it from sources :
> http://trac.osgeo.org/gdal/wiki/DownloadSource#Developmentversionandsourcecontrol
> 
> or use Windows binaries for the development version :
> http://www.gisinternals.com/development.php
> 
>> 
>> const char *srcProjection = srcDataset->GetProjectionRef();
>>    double *srcTransform;
>>    srcDataset->GetGeoTransform(srcTransform);
>>    int gcpcount = srcDataset->GetGCPCount();
>>    const GDAL_GCP *gcps = srcDataset->GetGCPs();
>>    const char* gcpProj = srcDataset->GetGCPProjection();
>> 
>>    dstDataset = (GDALDataset *) GDALOpen(maskPath, GA_Update);
>> 
>>    dstDataset->SetGeoTransform(srcTransform);
>>    dstDataset->SetProjection(srcProjection);
>>    if (gcpcount > 0) {
>>        dstDataset->SetGCPs( gcpcount, gcps, gcpProj);
>>    }
>> 
>>    if(dstDataset != NULL)
>>    {
>>        GDALClose((GDALDatasetH)dstDataset);
>>    }
>> 
>> 
>> 
>> 
>> Joshua Jackson, PhD
>> Senior ResearchEngineer
>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>   www.nSide.io
>> <http://www.nside.io/> 4031 Parkway Dr, Suite B, Florence, AL 35630
>>  <http://www.linkedin.com/company/nside/>  <http://twitter.com/nSide__Out>
>> 
>>> On Apr 15, 2015, at 4:06 PM, Dr. Joshua Jackson <josh at nside.io> wrote:
>>> 
>>> Yes.  For example original file is middle.jp2  New file is
>>> middle_mask.jp2.
>>> 
>>> gdalcopyproj.py middle.jp2 middle_mask.jp2
>>> 
>>> Result is middle_mask.jp2 isn?t even modified according to OS time stamp,
>>> but new file is created middle_mask.jp2.aux.xml.
>>> 
>>> 
>>> 
>>> 
>>> Joshua Jackson, PhD
>>> Senior ResearchEngineer
>>> 
>>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
>>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>   www.nSide.io
>>> <http://www.nside.io/> <http://www.nside.io/> 4031 Parkway Dr, Suite B,
>>> Florence, AL 35630
>>> 
>>>  <http://www.linkedin.com/company/nside/> 
>>>  <http://twitter.com/nSide__Out>
>>>> 
>>>> On Apr 15, 2015, at 4:02 PM, Even Rouault <even.rouault at spatialys.com
>>>> <mailto:even.rouault at spatialys.com>> wrote:
>>>> 
>>>> Le mercredi 15 avril 2015 22:58:07, Dr. Joshua Jackson a ?crit :
>>>>> gdalcopyproj does not work for me because it outputs a separate xml
>>>>> file instead of overlaying the data into the new image file.
>>>> 
>>>> Weird. I've just tested it works properly with the latest GDAL trunk
>>>> (2.0dev).
>>>> 
>>>>> Joshua Jackson, PhD
>>>>> Senior ResearchEngineer
>>>>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
>>>>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>
>>>>> <mailto:josh at nside.io <mailto:josh at nside.io>>   www.nSide.io
>>>>> <http://www.nside.io/> <http://www.nside.io/ <http://www.nside.io/>>
>>>>> 4031 Parkway Dr, Suite B, Florence, AL 35630
>>>>> 
>>>>> <http://www.linkedin.com/company/nside/
>>>>> <http://www.linkedin.com/company/nside/>> 
>>>>> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>>
>>>>> 
>>>>>> On Apr 15, 2015, at 3:06 PM, Even Rouault <even.rouault at spatialys.com
>>>>>> <mailto:even.rouault at spatialys.com>> wrote:
>>>>>> 
>>>>>> Le mercredi 15 avril 2015 21:46:26, Dr. Joshua Jackson a ?crit :
>>>>>>> I?m looking for a good solution to copy the image meta data from one
>>>>>>> JP2 to another JP2 in C++.  I have a folder full of 4096x4096
>>>>>>> JPEG2000 images that I am processing with OpenCV.  On some of them I
>>>>>>> create a copy of the image and do some manipulations to.  As
>>>>>>> expected the new image file is missing all the metadata.
>>>>>>> 
>>>>>>> I have tried using CreateCopy() with the OpenJPEG library; and while
>>>>>>> this does work it takes a really long time per image ~40sec.  (My
>>>>>>> image manipulations take only ~10sec).
>>>>>>> 
>>>>>>> Is there some way to use the GetGDALDataSet() on the source file and
>>>>>>> then call SetMetaData() on the destination file for each meta data
>>>>>>> item?  How would one iterate through the metadata items?
>>>>>> 
>>>>>> The "metadata" you're talking about are more the georeferencing info,
>>>>>> right ? (In GDAL "metadata" is about all other metadata, excluding the
>>>>>> georeferencing)
>>>>>> 
>>>>>> If you use trunk, you could likely try the new USE_SRC_CODESTREAM=YES
>>>>>> creation open of the jp2openjpeg driver
>>>>>> 
>>>>>> Something like:
>>>>>> 
>>>>>> gdal_translate your_jp2_without_georef.jp2 out.jp2 -co
>>>>>> USE_SRC_CODESTREAM=YES -a_srs EPSG:4326 -a_ullr  -96.9653320 
>>>>>> 32.4645996 -96.9598389 32.4591064
>>>>>> 
>>>>>> The SetGeoTransform() and SetProjection() API also do something
>>>>>> similar internally, so you could also do :
>>>>>> 
>>>>>> gdal_edit.py your_jp2_without_georef.jp2 -a_srs EPSG:4326 -a_ullr
>>>>>> -96.9653320 32.4645996  -96.9598389 32.4591064
>>>>>> 
>>>>>> or more conveniently:
>>>>>> 
>>>>>> gdalcopyproj.py middle_mask.jp2 out.jp2
>>>>>> 
>>>>>> (http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopyproj
>>>>>> .py
>>>>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopypro
>>>>>> j.py>
>>>>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopypro
>>>>>> j.p
>>>>>> <http://svn.osgeo.org/gdal/trunk/gdal/swig/python/samples/gdalcopypro
>>>>>> j.p> y>)
>>>>>> 
>>>>>> Even
>>>>>> 
>>>>>>> Here is a sample GDALInfo printout for a source image:
>>>>>>> 
>>>>>>> Driver: JP2OpenJPEG/JPEG-2000 driver based on OpenJPEG library
>>>>>>> Files: middle_mask.jp2
>>>>>>> Size is 4096, 4096
>>>>>>> Coordinate System is:
>>>>>>> GEOGCS["WGS 84",
>>>>>>> 
>>>>>>>  DATUM["WGS_1984",
>>>>>>> 
>>>>>>>      SPHEROID["WGS 84",6378137,298.257223563,
>>>>>>> 
>>>>>>>          AUTHORITY["EPSG","7030"]],
>>>>>>> 
>>>>>>>      AUTHORITY["EPSG","6326"]],
>>>>>>> 
>>>>>>>  PRIMEM["Greenwich",0],
>>>>>>>  UNIT["degree",0.0174532925199433],
>>>>>>>  AUTHORITY["EPSG","4326"]]
>>>>>>> 
>>>>>>> Origin = (-96.965332031250000,32.464599609375000)
>>>>>>> Pixel Size = (0.000001341104507,-0.000001341104507)
>>>>>>> 
>>>>>>> Image Structure Metadata:
>>>>>>> INTERLEAVE=PIXEL
>>>>>>> 
>>>>>>> Corner Coordinates:
>>>>>>> Upper Left  ( -96.9653320,  32.4645996) ( 96d57'55.20"W,
>>>>>>> 32d27'52.56"N) Lower Left  ( -96.9653320,  32.4591064) (
>>>>>>> 96d57'55.20"W, 32d27'32.78"N) Upper Right ( -96.9598389, 
>>>>>>> 32.4645996) ( 96d57'35.42"W, 32d27'52.56"N) Lower Right (
>>>>>>> -96.9598389,  32.4591064) ( 96d57'35.42"W, 32d27'32.78"N) Center    
>>>>>>> ( -96.9625854,  32.4618530) ( 96d57'45.31"W, 32d27'42.67"N) Band 1
>>>>>>> Block=1024x1024 Type=Byte, ColorInterp=Red
>>>>>>> 
>>>>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>>>>>>> Overviews: arbitrary
>>>>>>> 
>>>>>>> Band 2 Block=1024x1024 Type=Byte, ColorInterp=Green
>>>>>>> 
>>>>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>>>>>>> Overviews: arbitrary
>>>>>>> 
>>>>>>> Band 3 Block=1024x1024 Type=Byte, ColorInterp=Blue
>>>>>>> 
>>>>>>> Overviews: 2048x2048, 1024x1024, 512x512, 256x256
>>>>>>> Overviews: arbitrary
>>>>>>> 
>>>>>>> Joshua Jackson, PhD
>>>>>>> Senior ResearchEngineer
>>>>>>> (800) 604-1822 Ext. 5109 <tel:8006041822,5109>   (256) 648-5109
>>>>>>> <tel:2566485109> josh at nside.io <mailto:josh at nside.io>
>>>>>>> <mailto:josh at nside.io <mailto:josh at nside.io>> <mailto:josh at nside.io
>>>>>>> <mailto:josh at nside.io> <mailto:josh at nside.io
>>>>>>> <mailto:josh at nside.io>>>   www.nSide.io <http://www.nside.io/>
>>>>>>> <http://www.nside.io/ <http://www.nside.io/>> <http://www.nside.io/
>>>>>>> <http://www.nside.io/> <http://www.nside.io/
>>>>>>> <http://www.nside.io/>>> 4031 Parkway Dr, Suite B, Florence, AL
>>>>>>> 35630
>>>>>>> 
>>>>>>> <http://www.linkedin.com/company/nside/
>>>>>>> <http://www.linkedin.com/company/nside/>
>>>>>>> <http://www.linkedin.com/company/nside/
>>>>>>> <http://www.linkedin.com/company/nside/>>>
>>>>>>> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>
>>>>>>> <http://twitter.com/nSide__Out <http://twitter.com/nSide__Out>>>
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150422/fa443c79/attachment-0001.html>

From yutaxsato at gmail.com  Wed Apr 22 23:34:16 2015
From: yutaxsato at gmail.com (Yuta Sato)
Date: Thu, 23 Apr 2015 15:34:16 +0900
Subject: [gdal-dev] gdal_grid: Python use
Message-ID: <CAPqnkJTO50GED2d9EmikMUtx=Bu4A_pJibg_GHBMPm0t1VO9Rg@mail.gmail.com>

Dear GDAL Devs and Users:

I wold like to know if there is direct way of using gdal_grid from Python?

http://www.gdal.org/gdal_grid.html

Thanks.

Yuta
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150423/8d81c6e6/attachment.html>

From mdione at grulic.org.ar  Thu Apr 23 02:28:07 2015
From: mdione at grulic.org.ar (Marcos Dione)
Date: Thu, 23 Apr 2015 06:28:07 -0300
Subject: [gdal-dev] Processing huge DEM dataset
Message-ID: <20150423092807.GB26553@grulic.org.ar>


    I have SRTM's DEM 1x1 degree 30m resolution tiles for the whole Europe and I'm trying to generate several raster images based on 
that (elevation coloring, slopeshade and hillshade), but I'm not sure about the right approach to do it for that amount of data.

    The simplest approach is to stitch the DEMs and then process, but that takes ages, specially if I try to use uncompressed, tiled 
GeoTIFFs as output. The stitching can even be done using a virtual file, which saves space.

    If I process each tile individually, and then build a virtual file on top, I get shades on the edges of tiles. This shade is due 
to the tile ending and the shading algorithm assuming there's a 0 elevation point right to it. So, question A) is that so? 

    I think that getting the shade in the output is due to the algorithm for finding a pixel uses the first tile that has it. 
Question B) is that so?

    If so, C) could I simply avoid this by generating another vrt file that lists each tile as having a bbox of only the 1x1 degree 
instead of the 1x1 degree plus an extra pixel border? If I get the time, I'll try this this afternoon (I just thought of it).

    All this I can do more or less with the gdal command line tools, without much programming. Then comes a more programmatic way: 
either use gdaldem or use the GDAL API to process each tile, then cut the 1x1 degree image and save that; then stitch them/build a 
vrt file on top. As you can see, this is what I've been avoiding to do :)

    Finally, I would also like to generate contour lines for this. So far I managed to generate them for 5x5 tiles with 90m 
resolution, then I import them in postgis. When I render them, on the edges of such tiles I see the lines from one crossing the 
others, looking ugly. For instance:

http://grulicueva.homenet.org/~mdione/Elevation/#14/45.0000/15.0000

    I tried used a stitched file for the whole region but I ran out of memory with gdal_contour. Again, this was with 90m resolution 
tiles; now I have 30m, which means 9 times as much data. D) How could I properly process all that?

    Thanks in advance for any ideas,

        -- Marcos.

From leoneslucia at gmail.com  Thu Apr 23 04:52:30 2015
From: leoneslucia at gmail.com (Lucia Leon)
Date: Thu, 23 Apr 2015 20:52:30 +0900
Subject: [gdal-dev] Unable to read data correctly in gdal python
Message-ID: <CAKq5y4wt0rsnLtNtoPd=V6jC_xk4EHWur+3eQdKxWSfq4FY9_g@mail.gmail.com>

Hello,

The gdalinfo.exe correctly shows the subdataset of a HDF4 file with
dimension [180x8x32x9].  But the same subdataset read from gdal in python
is only  [180x8x32].

I was using the gdal binary from Christoph Gohlke in windows, and according
to  him, the GDAL binaries are built with HDF-4.2.10:

http://www.lfd.uci.edu/~gohlke/pythonlibs/6icuform/GDAL-1.11.2-cp27-none-win_amd64.whl

The HDF4 file I was using is here:

ftp://l5eil01.larc.nasa.gov/MISR/MIL2ASLS.002/2011.07.04/MISR_AM1_AS_LAND_P233_O061399_F07_0022.hdf

The code I was using was as follows:

import gdal
from gdalconst import *
data = gdal.Open('HDF4_EOS:EOS_GRID:' + infile +
':RegParamsLnd:ViewZenAng', GA_ReadOnly).ReadAsArray()
print data.shape

I hope some of you can help me.

Lucia
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150423/a7ff952f/attachment.html>

From pramsey at cleverelephant.ca  Thu Apr 23 05:22:30 2015
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 23 Apr 2015 05:22:30 -0700
Subject: [gdal-dev] Processing huge DEM dataset
In-Reply-To: <20150423092807.GB26553@grulic.org.ar>
References: <20150423092807.GB26553@grulic.org.ar>
Message-ID: <etPan.5538e40b.6b8b4567.8c7a@Crane.local>

I have in the past, with other tool sets, not GDAL, approached this by building out padded tiles as the first step. So for each tile, merge it with it?s neighbors, then clip out the middle so you get a somewhat larger tile. Give it a nice thick buffer.

Now all your tiles overlap. Process them all individually. Thanks to the generous overlap they should, on the boundaries, come up w/ the same answers. Once you have final results (hillshades, contours, etc) clip them to the real tile boundary. In the case of contours you may need to finally snap the ends together, but it should not be a huge snap, just a tiny one.

ATB,

P.?


--  
http://postgis.net  
http://cleverelephant.ca


On April 23, 2015 at 3:01:45 AM, Marcos Dione (mdione at grulic.org.ar) wrote:
>  
> I have SRTM's DEM 1x1 degree 30m resolution tiles for the whole Europe and I'm trying to  
> generate several raster images based on
> that (elevation coloring, slopeshade and hillshade), but I'm not sure about the right  
> approach to do it for that amount of data.
>  
> The simplest approach is to stitch the DEMs and then process, but that takes ages, specially  
> if I try to use uncompressed, tiled
> GeoTIFFs as output. The stitching can even be done using a virtual file, which saves space.  
>  
> If I process each tile individually, and then build a virtual file on top, I get shades  
> on the edges of tiles. This shade is due
> to the tile ending and the shading algorithm assuming there's a 0 elevation point right  
> to it. So, question A) is that so?
>  
> I think that getting the shade in the output is due to the algorithm for finding a pixel  
> uses the first tile that has it.
> Question B) is that so?
>  
> If so, C) could I simply avoid this by generating another vrt file that lists each tile  
> as having a bbox of only the 1x1 degree
> instead of the 1x1 degree plus an extra pixel border? If I get the time, I'll try this this  
> afternoon (I just thought of it).
>  
> All this I can do more or less with the gdal command line tools, without much programming.  
> Then comes a more programmatic way:
> either use gdaldem or use the GDAL API to process each tile, then cut the 1x1 degree image  
> and save that; then stitch them/build a
> vrt file on top. As you can see, this is what I've been avoiding to do :)
>  
> Finally, I would also like to generate contour lines for this. So far I managed to generate  
> them for 5x5 tiles with 90m
> resolution, then I import them in postgis. When I render them, on the edges of such tiles  
> I see the lines from one crossing the
> others, looking ugly. For instance:
>  
> http://grulicueva.homenet.org/~mdione/Elevation/#14/45.0000/15.0000
>  
> I tried used a stitched file for the whole region but I ran out of memory with gdal_contour.  
> Again, this was with 90m resolution
> tiles; now I have 30m, which means 9 times as much data. D) How could I properly process  
> all that?
>  
> Thanks in advance for any ideas,
>  
> -- Marcos.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>  


From even.rouault at spatialys.com  Thu Apr 23 05:36:35 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 23 Apr 2015 14:36:35 +0200
Subject: [gdal-dev] Processing huge DEM dataset
In-Reply-To: <etPan.5538e40b.6b8b4567.8c7a@Crane.local>
References: <20150423092807.GB26553@grulic.org.ar>
	<etPan.5538e40b.6b8b4567.8c7a@Crane.local>
Message-ID: <201504231436.35211.even.rouault@spatialys.com>

Le jeudi 23 avril 2015 14:22:30, Paul Ramsey a ?crit :
> I have in the past, with other tool sets, not GDAL, approached this by
> building out padded tiles as the first step. So for each tile, merge it
> with it?s neighbors, then clip out the middle so you get a somewhat larger
> tile. Give it a nice thick buffer.
> 
> Now all your tiles overlap. Process them all individually. Thanks to the
> generous overlap they should, on the boundaries, come up w/ the same
> answers. Once you have final results (hillshades, contours, etc) clip them
> to the real tile boundary. In the case of contours you may need to finally
> snap the ends together, but it should not be a huge snap, just a tiny one.
> 

+1 for Paul's above workflow. Some answers to your questions below

> --
> http://postgis.net
> http://cleverelephant.ca
> 
> On April 23, 2015 at 3:01:45 AM, Marcos Dione (mdione at grulic.org.ar) wrote:
> > I have SRTM's DEM 1x1 degree 30m resolution tiles for the whole Europe
> > and I'm trying to generate several raster images based on
> > that (elevation coloring, slopeshade and hillshade), but I'm not sure
> > about the right approach to do it for that amount of data.
> > 
> > The simplest approach is to stitch the DEMs and then process, but that
> > takes ages, specially if I try to use uncompressed, tiled
> > GeoTIFFs as output. The stitching can even be done using a virtual file,
> > which saves space.
> > 
> > If I process each tile individually, and then build a virtual file on
> > top, I get shades on the edges of tiles. This shade is due
> > to the tile ending and the shading algorithm assuming there's a 0
> > elevation point right to it. So, question A) is that so?

Most gdaldem algorithms (except color-relief) need to compute some form of 
gradient (a 3x3 window around the pixel being computed), so you have edge 
effects. By default, they put a nodata value on the edges.
If you specify -compute_edges, then they will interpolate extra values from 
the ones available so that the edge pixels can be computed. You could still 
see some discontinuity if the prediction isn't that great.

> > 
> > I think that getting the shade in the output is due to the algorithm for
> > finding a pixel uses the first tile that has it.
> > Question B) is that so?
> > 
> > If so, C) could I simply avoid this by generating another vrt file that
> > lists each tile as having a bbox of only the 1x1 degree
> > instead of the 1x1 degree plus an extra pixel border? If I get the time,
> > I'll try this this afternoon (I just thought of it).

For each tile, you could have a VRT of 3x3 tiles. Let's say that a tile if NxN 
pixel, then the VRT would be (N+2)*(N+2). And you would extract NxN pixels 
from the output of gdaldem on that VRT, keeping NxN pixels only. Well, this is 
basically Paul's approach using VRT to do the buffer.

> > 
> > All this I can do more or less with the gdal command line tools, without
> > much programming. Then comes a more programmatic way:
> > either use gdaldem or use the GDAL API to process each tile, then cut the
> > 1x1 degree image and save that; then stitch them/build a
> > vrt file on top. As you can see, this is what I've been avoiding to do :)
> > 
> > Finally, I would also like to generate contour lines for this. So far I
> > managed to generate them for 5x5 tiles with 90m
> > resolution, then I import them in postgis. When I render them, on the
> > edges of such tiles I see the lines from one crossing the
> > others, looking ugly. For instance:
> > 
> > http://grulicueva.homenet.org/~mdione/Elevation/#14/45.0000/15.0000
> > 
> > I tried used a stitched file for the whole region but I ran out of memory
> > with gdal_contour. Again, this was with 90m resolution
> > tiles; now I have 30m, which means 9 times as much data. D) How could I
> > properly process all that?
> > 
> > Thanks in advance for any ideas,
> > 
> > -- Marcos.
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From remi.cura at gmail.com  Thu Apr 23 06:03:47 2015
From: remi.cura at gmail.com (=?UTF-8?Q?R=C3=A9mi_Cura?=)
Date: Thu, 23 Apr 2015 15:03:47 +0200
Subject: [gdal-dev] Processing huge DEM dataset
In-Reply-To: <201504231436.35211.even.rouault@spatialys.com>
References: <20150423092807.GB26553@grulic.org.ar>
	<etPan.5538e40b.6b8b4567.8c7a@Crane.local>
	<201504231436.35211.even.rouault@spatialys.com>
Message-ID: <CAJvUf_ub560zibPWe2U-DwVZ7gwAMkuWJeiHLVPEyotWe+mSuQ@mail.gmail.com>

Hey,
gdal may not be the right tool for this.

You may use Orfeo Tool Box (https://www.orfeo-toolbox.org/),
which has been designed to process huge images with limited cpu and memory.

Cheers,
R?mi-C


2015-04-23 14:36 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:

> Le jeudi 23 avril 2015 14:22:30, Paul Ramsey a ?crit :
> > I have in the past, with other tool sets, not GDAL, approached this by
> > building out padded tiles as the first step. So for each tile, merge it
> > with it?s neighbors, then clip out the middle so you get a somewhat
> larger
> > tile. Give it a nice thick buffer.
> >
> > Now all your tiles overlap. Process them all individually. Thanks to the
> > generous overlap they should, on the boundaries, come up w/ the same
> > answers. Once you have final results (hillshades, contours, etc) clip
> them
> > to the real tile boundary. In the case of contours you may need to
> finally
> > snap the ends together, but it should not be a huge snap, just a tiny
> one.
> >
>
> +1 for Paul's above workflow. Some answers to your questions below
>
> > --
> > http://postgis.net
> > http://cleverelephant.ca
> >
> > On April 23, 2015 at 3:01:45 AM, Marcos Dione (mdione at grulic.org.ar)
> wrote:
> > > I have SRTM's DEM 1x1 degree 30m resolution tiles for the whole Europe
> > > and I'm trying to generate several raster images based on
> > > that (elevation coloring, slopeshade and hillshade), but I'm not sure
> > > about the right approach to do it for that amount of data.
> > >
> > > The simplest approach is to stitch the DEMs and then process, but that
> > > takes ages, specially if I try to use uncompressed, tiled
> > > GeoTIFFs as output. The stitching can even be done using a virtual
> file,
> > > which saves space.
> > >
> > > If I process each tile individually, and then build a virtual file on
> > > top, I get shades on the edges of tiles. This shade is due
> > > to the tile ending and the shading algorithm assuming there's a 0
> > > elevation point right to it. So, question A) is that so?
>
> Most gdaldem algorithms (except color-relief) need to compute some form of
> gradient (a 3x3 window around the pixel being computed), so you have edge
> effects. By default, they put a nodata value on the edges.
> If you specify -compute_edges, then they will interpolate extra values from
> the ones available so that the edge pixels can be computed. You could still
> see some discontinuity if the prediction isn't that great.
>
> > >
> > > I think that getting the shade in the output is due to the algorithm
> for
> > > finding a pixel uses the first tile that has it.
> > > Question B) is that so?
> > >
> > > If so, C) could I simply avoid this by generating another vrt file that
> > > lists each tile as having a bbox of only the 1x1 degree
> > > instead of the 1x1 degree plus an extra pixel border? If I get the
> time,
> > > I'll try this this afternoon (I just thought of it).
>
> For each tile, you could have a VRT of 3x3 tiles. Let's say that a tile if
> NxN
> pixel, then the VRT would be (N+2)*(N+2). And you would extract NxN pixels
> from the output of gdaldem on that VRT, keeping NxN pixels only. Well,
> this is
> basically Paul's approach using VRT to do the buffer.
>
> > >
> > > All this I can do more or less with the gdal command line tools,
> without
> > > much programming. Then comes a more programmatic way:
> > > either use gdaldem or use the GDAL API to process each tile, then cut
> the
> > > 1x1 degree image and save that; then stitch them/build a
> > > vrt file on top. As you can see, this is what I've been avoiding to do
> :)
> > >
> > > Finally, I would also like to generate contour lines for this. So far I
> > > managed to generate them for 5x5 tiles with 90m
> > > resolution, then I import them in postgis. When I render them, on the
> > > edges of such tiles I see the lines from one crossing the
> > > others, looking ugly. For instance:
> > >
> > > http://grulicueva.homenet.org/~mdione/Elevation/#14/45.0000/15.0000
> > >
> > > I tried used a stitched file for the whole region but I ran out of
> memory
> > > with gdal_contour. Again, this was with 90m resolution
> > > tiles; now I have 30m, which means 9 times as much data. D) How could I
> > > properly process all that?
> > >
> > > Thanks in advance for any ideas,
> > >
> > > -- Marcos.
> > > _______________________________________________
> > > gdal-dev mailing list
> > > gdal-dev at lists.osgeo.org
> > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> >
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150423/11707f8f/attachment-0001.html>

From p.baumann at jacobs-university.de  Thu Apr 23 06:07:29 2015
From: p.baumann at jacobs-university.de (Peter Baumann)
Date: Thu, 23 Apr 2015 15:07:29 +0200
Subject: [gdal-dev] Processing huge DEM dataset
In-Reply-To: <CAJvUf_ub560zibPWe2U-DwVZ7gwAMkuWJeiHLVPEyotWe+mSuQ@mail.gmail.com>
References: <20150423092807.GB26553@grulic.org.ar>	<etPan.5538e40b.6b8b4567.8c7a@Crane.local>	<201504231436.35211.even.rouault@spatialys.com>
	<CAJvUf_ub560zibPWe2U-DwVZ7gwAMkuWJeiHLVPEyotWe+mSuQ@mail.gmail.com>
Message-ID: <5538EE91.7010007@jacobs-university.de>

...or rasdaman, www.rasdaman.org. It allows to establish a single seamless map
on which you can run algorithms in a high-level language. The system takes care
of borders etc. Prefab VM is available on request (production not yet automated).
my 2 cents,
Peter


On 04/23/15 15:03, R?mi Cura wrote:
> Hey,
> gdal may not be the right tool for this.
>
> You may use Orfeo Tool Box (https://www.orfeo-toolbox.org/),
> which has been designed to process huge images with limited cpu and memory.
>
> Cheers,
> R?mi-C
>
>
> 2015-04-23 14:36 GMT+02:00 Even Rouault <even.rouault at spatialys.com
> <mailto:even.rouault at spatialys.com>>:
>
>     Le jeudi 23 avril 2015 14:22:30, Paul Ramsey a ?crit :
>     > I have in the past, with other tool sets, not GDAL, approached this by
>     > building out padded tiles as the first step. So for each tile, merge it
>     > with it?s neighbors, then clip out the middle so you get a somewhat larger
>     > tile. Give it a nice thick buffer.
>     >
>     > Now all your tiles overlap. Process them all individually. Thanks to the
>     > generous overlap they should, on the boundaries, come up w/ the same
>     > answers. Once you have final results (hillshades, contours, etc) clip them
>     > to the real tile boundary. In the case of contours you may need to finally
>     > snap the ends together, but it should not be a huge snap, just a tiny one.
>     >
>
>     +1 for Paul's above workflow. Some answers to your questions below
>
>     > --
>     > http://postgis.net
>     > http://cleverelephant.ca
>     >
>     > On April 23, 2015 at 3:01:45 AM, Marcos Dione (mdione at grulic.org.ar
>     <mailto:mdione at grulic.org.ar>) wrote:
>     > > I have SRTM's DEM 1x1 degree 30m resolution tiles for the whole Europe
>     > > and I'm trying to generate several raster images based on
>     > > that (elevation coloring, slopeshade and hillshade), but I'm not sure
>     > > about the right approach to do it for that amount of data.
>     > >
>     > > The simplest approach is to stitch the DEMs and then process, but that
>     > > takes ages, specially if I try to use uncompressed, tiled
>     > > GeoTIFFs as output. The stitching can even be done using a virtual file,
>     > > which saves space.
>     > >
>     > > If I process each tile individually, and then build a virtual file on
>     > > top, I get shades on the edges of tiles. This shade is due
>     > > to the tile ending and the shading algorithm assuming there's a 0
>     > > elevation point right to it. So, question A) is that so?
>
>     Most gdaldem algorithms (except color-relief) need to compute some form of
>     gradient (a 3x3 window around the pixel being computed), so you have edge
>     effects. By default, they put a nodata value on the edges.
>     If you specify -compute_edges, then they will interpolate extra values from
>     the ones available so that the edge pixels can be computed. You could still
>     see some discontinuity if the prediction isn't that great.
>
>     > >
>     > > I think that getting the shade in the output is due to the algorithm for
>     > > finding a pixel uses the first tile that has it.
>     > > Question B) is that so?
>     > >
>     > > If so, C) could I simply avoid this by generating another vrt file that
>     > > lists each tile as having a bbox of only the 1x1 degree
>     > > instead of the 1x1 degree plus an extra pixel border? If I get the time,
>     > > I'll try this this afternoon (I just thought of it).
>
>     For each tile, you could have a VRT of 3x3 tiles. Let's say that a tile if NxN
>     pixel, then the VRT would be (N+2)*(N+2). And you would extract NxN pixels
>     from the output of gdaldem on that VRT, keeping NxN pixels only. Well, this is
>     basically Paul's approach using VRT to do the buffer.
>
>     > >
>     > > All this I can do more or less with the gdal command line tools, without
>     > > much programming. Then comes a more programmatic way:
>     > > either use gdaldem or use the GDAL API to process each tile, then cut the
>     > > 1x1 degree image and save that; then stitch them/build a
>     > > vrt file on top. As you can see, this is what I've been avoiding to do :)
>     > >
>     > > Finally, I would also like to generate contour lines for this. So far I
>     > > managed to generate them for 5x5 tiles with 90m
>     > > resolution, then I import them in postgis. When I render them, on the
>     > > edges of such tiles I see the lines from one crossing the
>     > > others, looking ugly. For instance:
>     > >
>     > > http://grulicueva.homenet.org/~mdione/Elevation/#14/45.0000/15.0000
>     <http://grulicueva.homenet.org/%7Emdione/Elevation/#14/45.0000/15.0000>
>     > >
>     > > I tried used a stitched file for the whole region but I ran out of memory
>     > > with gdal_contour. Again, this was with 90m resolution
>     > > tiles; now I have 30m, which means 9 times as much data. D) How could I
>     > > properly process all that?
>     > >
>     > > Thanks in advance for any ideas,
>     > >
>     > > -- Marcos.
>     > > _______________________________________________
>     > > gdal-dev mailing list
>     > > gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>
>     > > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>     >
>     > _______________________________________________
>     > gdal-dev mailing list
>     > gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>
>     > http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>     --
>     Spatialys - Geospatial professional services
>     http://www.spatialys.com
>     _______________________________________________
>     gdal-dev mailing list
>     gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>
>     http://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Dr. Peter Baumann
 - Professor of Computer Science, Jacobs University Bremen
   www.faculty.jacobs-university.de/pbaumann
   mail: p.baumann at jacobs-university.de
   tel: +49-421-200-3178, fax: +49-421-200-493178
 - Executive Director, rasdaman GmbH Bremen (HRB 26793)
   www.rasdaman.com, mail: baumann at rasdaman.com
   tel: 0800-rasdaman, fax: 0800-rasdafax, mobile: +49-173-5837882
"Si forte in alienas manus oberraverit hec peregrina epistola incertis ventis dimissa, sed Deo commendata, precamur ut ei reddatur cui soli destinata, nec preripiat quisquam non sibi parata." (mail disclaimer, AD 1083)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150423/6c8dc2bd/attachment.html>

From even.rouault at spatialys.com  Thu Apr 23 07:08:04 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 23 Apr 2015 16:08:04 +0200
Subject: [gdal-dev] Easier testing of drivers using HTTP APIs
Message-ID: <201504231608.04781.even.rouault@spatialys.com>

Hi,

This will be of interest mainly for GDAL driver developers of drivers using 
HTTP APIs.

Writing autotests for such drivers isn't always easy, or reliable, since you 
have to connect to a server that may be temporarily unavailable (or definitely  
after some time), or there might be issues with credentials needed, etc...

I've recently experimented a simple trick for the new PLMosaic & PLScenes 
drivers, as well as when doing recent improvements in the WFS driver.

Basically CPLHTTPFetch() now accepts a "URL" that is a /vsimem/ path. So you 
can do things like:

gdal.FileFromMemBuffer('/vsimem/my_fake_url?param1=val1&param2=val2',
content_of_the_file)

CPLHTTPFetch() will only accept such /vsimem/ URLs if the config. option 
CPL_CURL_ENABLE_VSIMEM is set to YES (provision for potential security 
issues). You might also have to do small adjustments to your operational code 
to accept /vsimem/ in addition to http:// or https://

Another big advantage is that you can also more easily simulate errors that 
might be returned by a server, or resilience of your code to unexpected output 
from the server, which can help increasingly the line code coverage.

For real world examples:
http://svn.osgeo.org/gdal/trunk/autotest/gdrivers/plmosaic.py
http://svn.osgeo.org/gdal/trunk/autotest/ogr/ogr_plscenes.py
http://svn.osgeo.org/gdal/trunk/autotest/ogr/ogr_wfs.py

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From mdione at grulic.org.ar  Thu Apr 23 08:09:53 2015
From: mdione at grulic.org.ar (Marcos Dione)
Date: Thu, 23 Apr 2015 12:09:53 -0300
Subject: [gdal-dev] Processing huge DEM dataset
In-Reply-To: <201504231436.35211.even.rouault@spatialys.com>
References: <20150423092807.GB26553@grulic.org.ar>
	<etPan.5538e40b.6b8b4567.8c7a@Crane.local>
	<201504231436.35211.even.rouault@spatialys.com>
Message-ID: <20150423150953.GA9385@grulic.org.ar>

On Thu, Apr 23, 2015 at 02:36:35PM +0200, Even Rouault wrote:
> Most gdaldem algorithms (except color-relief) need to compute some form of 
> gradient (a 3x3 window around the pixel being computed), so you have edge 
> effects. By default, they put a nodata value on the edges.
> If you specify -compute_edges, then they will interpolate extra values from 
> the ones available so that the edge pixels can be computed. You could still 
> see some discontinuity if the prediction isn't that great.

    preliminary tests show that is enough. of course, I will need to do
more exhaustive tests to see if it's so. thanks for the tip :)

From jukka.rahkonen at maanmittauslaitos.fi  Thu Apr 23 09:54:14 2015
From: jukka.rahkonen at maanmittauslaitos.fi (Jukka Rahkonen)
Date: Thu, 23 Apr 2015 16:54:14 +0000 (UTC)
Subject: [gdal-dev] SQL script for creating a test GeoPackage
Message-ID: <loom.20150423T182239-247@post.gmane.org>

Hi,

Inspired by this Spatialite forum thread
https://groups.google.com/d/msg/spatialite-users/rBKeuXLpQv8/THStsQdQXI0J I
started to write a SQL script that creates a GeoPackage database with all
the metadata tables, triggers etc. and also data tables for every possible
geometry type, each with one column for every possible data type, populated
with some data that suits the type. 

However, I started to think that this is so obvious that someone must have
done that already and that could save me a few hours. Even, Pepijn, where do
you have your SQL? This Python in autotest directory probably has it all
http://trac.osgeo.org/gdal/browser/trunk/autotest/ogr/ogr_gpkg.py.

The ultimate GeoPackage experts could then inspect the resulting GPKG
database byte by byte and once it is perfect it could be shared to everybody
and used in the conformance tests.

If I copy and paste right the columns will be:

BOOLEAN
TINYINT
SMALLINT
MEDIUMINT
INTEGER
INT
FLOAT
DOUBLE
TEXT
BLOB
GEOMETRY
DATE
DATETIME

And the basic geometry types:
GEOMETRY
POINT
LINESTRING
POLYGON
MULTIPOLYGON
MULTILINESTRING
MULTIPOLYGON
GEOMETRYCOLLECTION

And the extented geometry types:
CIRCULARSTRING
COMPOUNDCURVE
CURVEPOLYGON
MULTICURVE
MULTISURFACE
CURVE
SURFACE

I have no idea about how I could insert contents to these but I think they
should be put into their own database anyways.

-Jukka Rahkonen-


From even.rouault at spatialys.com  Thu Apr 23 10:04:09 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 23 Apr 2015 19:04:09 +0200
Subject: [gdal-dev] SQL script for creating a test GeoPackage
In-Reply-To: <loom.20150423T182239-247@post.gmane.org>
References: <loom.20150423T182239-247@post.gmane.org>
Message-ID: <201504231904.09822.even.rouault@spatialys.com>

Le jeudi 23 avril 2015 18:54:14, Jukka Rahkonen a ?crit :
> Hi,
> 
> Inspired by this Spatialite forum thread
> https://groups.google.com/d/msg/spatialite-users/rBKeuXLpQv8/THStsQdQXI0J I
> started to write a SQL script that creates a GeoPackage database with all
> the metadata tables, triggers etc. and also data tables for every possible
> geometry type, each with one column for every possible data type, populated
> with some data that suits the type.
> 
> However, I started to think that this is so obvious that someone must have
> done that already and that could save me a few hours. Even, Pepijn, where
> do you have your SQL? This Python in autotest directory probably has it
> all http://trac.osgeo.org/gdal/browser/trunk/autotest/ogr/ogr_gpkg.py.

Jukka,

some time ago, I had shared something like this with the geopackage community 
( http://www.geopackage.org/#implementations ), generated by OGR and provided 
the Python script to do it ( 
http://www.geopackage.org/data/generate_sample_gpkg.py ).

It probably lacks a few data types (boolean, tinyint, integer should now be 
reachable with the latest additions in OGR) and the curve geometries.

Even

> 
> The ultimate GeoPackage experts could then inspect the resulting GPKG
> database byte by byte and once it is perfect it could be shared to
> everybody and used in the conformance tests.
> 
> If I copy and paste right the columns will be:
> 
> BOOLEAN
> TINYINT
> SMALLINT
> MEDIUMINT
> INTEGER
> INT
> FLOAT
> DOUBLE
> TEXT
> BLOB
> GEOMETRY
> DATE
> DATETIME
> 
> And the basic geometry types:
> GEOMETRY
> POINT
> LINESTRING
> POLYGON
> MULTIPOLYGON
> MULTILINESTRING
> MULTIPOLYGON
> GEOMETRYCOLLECTION
> 
> And the extented geometry types:
> CIRCULARSTRING
> COMPOUNDCURVE
> CURVEPOLYGON
> MULTICURVE
> MULTISURFACE
> CURVE
> SURFACE
> 
> I have no idea about how I could insert contents to these but I think they
> should be put into their own database anyways.
> 
> -Jukka Rahkonen-
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pepijn at vaneeckhoudt.net  Thu Apr 23 11:24:28 2015
From: pepijn at vaneeckhoudt.net (Pepijn Van Eeckhoudt)
Date: Thu, 23 Apr 2015 20:24:28 +0200
Subject: [gdal-dev] SQL script for creating a test GeoPackage
In-Reply-To: <loom.20150423T182239-247@post.gmane.org>
References: <loom.20150423T182239-247@post.gmane.org>
Message-ID: <3A8EF983-6999-4AE4-BF32-9825C9323794@vaneeckhoudt.net>

Jukka,

What I have is in the tool I wrote <https://bitbucket.org/luciad/libgpkg> ;) Not easy to copy/paste the SQL though.

Table definitions, required data and validation logic are in gpkg_db.c <https://bitbucket.org/luciad/libgpkg/src/20586fffd8e7ce1af4425d03e99707a5cf6ecdf2/gpkg/gpkg_db.c>. That code gets get called by the Init- and CheckSpatialMetaData SQL functions.

The other test SQL code I have is in the test suite. See addgeometrycolumn_spec.rb <https://bitbucket.org/luciad/libgpkg/src/20586fffd8e7ce1af4425d03e99707a5cf6ecdf2/test/addgeometrycolumn_spec.rb?at=default> for an example.

I don?t have an exhaustive test database generation script I?m afraid. The code Even pointed to is the closest thing to that that I?m aware of.

Pepijn

> On 23 Apr 2015, at 18:54, Jukka Rahkonen <jukka.rahkonen at maanmittauslaitos.fi> wrote:
> 
> Hi,
> 
> Inspired by this Spatialite forum thread
> https://groups.google.com/d/msg/spatialite-users/rBKeuXLpQv8/THStsQdQXI0J I
> started to write a SQL script that creates a GeoPackage database with all
> the metadata tables, triggers etc. and also data tables for every possible
> geometry type, each with one column for every possible data type, populated
> with some data that suits the type. 
> 
> However, I started to think that this is so obvious that someone must have
> done that already and that could save me a few hours. Even, Pepijn, where do
> you have your SQL? This Python in autotest directory probably has it all
> http://trac.osgeo.org/gdal/browser/trunk/autotest/ogr/ogr_gpkg.py.
> 
> The ultimate GeoPackage experts could then inspect the resulting GPKG
> database byte by byte and once it is perfect it could be shared to everybody
> and used in the conformance tests.
> 
> If I copy and paste right the columns will be:
> 
> BOOLEAN
> TINYINT
> SMALLINT
> MEDIUMINT
> INTEGER
> INT
> FLOAT
> DOUBLE
> TEXT
> BLOB
> GEOMETRY
> DATE
> DATETIME
> 
> And the basic geometry types:
> GEOMETRY
> POINT
> LINESTRING
> POLYGON
> MULTIPOLYGON
> MULTILINESTRING
> MULTIPOLYGON
> GEOMETRYCOLLECTION
> 
> And the extented geometry types:
> CIRCULARSTRING
> COMPOUNDCURVE
> CURVEPOLYGON
> MULTICURVE
> MULTISURFACE
> CURVE
> SURFACE
> 
> I have no idea about how I could insert contents to these but I think they
> should be put into their own database anyways.
> 
> -Jukka Rahkonen-
> 
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150423/f828f5a0/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4151 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150423/f828f5a0/attachment.bin>

From cavallini at faunalia.it  Thu Apr 23 21:56:46 2015
From: cavallini at faunalia.it (Paolo Cavallini)
Date: Fri, 24 Apr 2015 06:56:46 +0200
Subject: [gdal-dev] SQL script for creating a test GeoPackage
In-Reply-To: <3A8EF983-6999-4AE4-BF32-9825C9323794@vaneeckhoudt.net>
References: <loom.20150423T182239-247@post.gmane.org>
	<3A8EF983-6999-4AE4-BF32-9825C9323794@vaneeckhoudt.net>
Message-ID: <5539CD0E.2080309@faunalia.it>

Il 23/04/2015 20:24, Pepijn Van Eeckhoudt ha scritto:
> Jukka,
> 
> What I have is in the tool I wrote
> <https://bitbucket.org/luciad/libgpkg> ;) Not easy to copy/paste the SQL
> though.

Hi all,
what a nice idea. Would you be so kind as to let the QGIS-dev list know
when you have a tool ready? I think adding it to QGIS would greatly help
users start using gpkg.
Thanks.

-- 
Paolo Cavallini - www.faunalia.eu
QGIS & PostGIS courses: http://www.faunalia.eu/training.html

From even.rouault at spatialys.com  Fri Apr 24 00:51:06 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 24 Apr 2015 09:51:06 +0200
Subject: [gdal-dev] SQL script for creating a test GeoPackage
In-Reply-To: <5539CD0E.2080309@faunalia.it>
References: <loom.20150423T182239-247@post.gmane.org>
	<3A8EF983-6999-4AE4-BF32-9825C9323794@vaneeckhoudt.net>
	<5539CD0E.2080309@faunalia.it>
Message-ID: <201504240951.07081.even.rouault@spatialys.com>

Le vendredi 24 avril 2015 06:56:46, Paolo Cavallini a ?crit :
> Il 23/04/2015 20:24, Pepijn Van Eeckhoudt ha scritto:
> > Jukka,
> > 
> > What I have is in the tool I wrote
> > <https://bitbucket.org/luciad/libgpkg> ;) Not easy to copy/paste the SQL
> > though.
> 
> Hi all,
> what a nice idea. Would you be so kind as to let the QGIS-dev list know
> when you have a tool ready? I think adding it to QGIS would greatly help
> users start using gpkg.

Paolo,

GDAL already supports GeoPackage since 1.11 (with further enhancements & fixes 
in 2.0dev), so it's already available in QGIS without needing a new dependency 
;-) At least in reading&updating mode, since I think there's perhaps a missing 
GUI item to be able to create a new geopackage.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From cavallini at faunalia.it  Fri Apr 24 03:00:51 2015
From: cavallini at faunalia.it (Paolo Cavallini)
Date: Fri, 24 Apr 2015 12:00:51 +0200
Subject: [gdal-dev] SQL script for creating a test GeoPackage
In-Reply-To: <201504240951.07081.even.rouault@spatialys.com>
References: <loom.20150423T182239-247@post.gmane.org>
	<3A8EF983-6999-4AE4-BF32-9825C9323794@vaneeckhoudt.net>
	<5539CD0E.2080309@faunalia.it>
	<201504240951.07081.even.rouault@spatialys.com>
Message-ID: <553A1453.9030400@faunalia.it>

Il 24/04/2015 09:51, Even Rouault ha scritto:

> GDAL already supports GeoPackage since 1.11 (with further enhancements & fixes 
> in 2.0dev), so it's already available in QGIS without needing a new dependency 
> ;-) At least in reading&updating mode, since I think there's perhaps a missing 
> GUI item to be able to create a new geopackage.

Yes, that's what I meant, sorry for the confusion: it would be good to
have a way to initialize a gpkg proprely.
All the best, and thanks.

-- 
Paolo Cavallini - www.faunalia.eu
QGIS & PostGIS courses: http://www.faunalia.eu/training.html

From andelamax38 at gmail.com  Fri Apr 24 07:39:00 2015
From: andelamax38 at gmail.com (Max Andela)
Date: Fri, 24 Apr 2015 23:39:00 +0900
Subject: [gdal-dev] Import OSGeo4W/Gdal from Python
In-Reply-To: <CAGm=SvbMCjPjOLCzCKxhx50V6+WTJWiTvv71L=XNeckKp3==yw@mail.gmail.com>
References: <CAGm=SvbMCjPjOLCzCKxhx50V6+WTJWiTvv71L=XNeckKp3==yw@mail.gmail.com>
Message-ID: <CAGm=Svb3Fik7vyM=DH3WL1XcyuB9gx51DDfGW5H5=vRqHesdiw@mail.gmail.com>

Dear all,

I have installed Python 2.7 and Osgeo4w in my PC.
The gdal is inside Osgeo4w installation. How can I import that gdal from
Python?
I hope somebody can help me.

Thanks
Max
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150424/fbef0a45/attachment.html>

From leoneslucia at gmail.com  Fri Apr 24 08:07:15 2015
From: leoneslucia at gmail.com (Lucia Leon)
Date: Sat, 25 Apr 2015 00:07:15 +0900
Subject: [gdal-dev] Fwd: Unable to read data correctly in gdal python
Message-ID: <CAKq5y4xxEh9Cu_OpGWdDFtGqMMFqR9Z55dBV5vdCjXbG=XCXOQ@mail.gmail.com>

Dear all:

I tried it with every kind of gdal binaries available: from Christoph
Gohlke, from Tamas Szekeres, and from Osgeo4w.

But all the gdal binaries report wrong dimension of the HDF dataset.

What should I do? Is the problem inherent to gdal source code?

Any of yours idea is appreciated.

Thanks.

Lucia

---------- Forwarded message ----------
From: Lucia Leon <leoneslucia at gmail.com>
Date: Thu, Apr 23, 2015 at 8:52 PM
Subject: Unable to read data correctly in gdal python
To: gdal-dev at lists.osgeo.org


Hello,

The gdalinfo.exe correctly shows the subdataset of a HDF4 file with
dimension [180x8x32x9].  But the same subdataset read from gdal in python
is only  [180x8x32].

I was using the gdal binary from Christoph Gohlke in windows, and according
to  him, the GDAL binaries are built with HDF-4.2.10:

http://www.lfd.uci.edu/~gohlke/pythonlibs/6icuform/GDAL-1.11.2-cp27-none-win_amd64.whl

The HDF4 file I was using is here:

ftp://l5eil01.larc.nasa.gov/MISR/MIL2ASLS.002/2011.07.04/MISR_AM1_AS_LAND_P233_O061399_F07_0022.hdf

The code I was using was as follows:

import gdal
from gdalconst import *
data = gdal.Open('HDF4_EOS:EOS_GRID:' + infile +
':RegParamsLnd:ViewZenAng', GA_ReadOnly).ReadAsArray()
print data.shape

I hope some of you can help me.

Lucia
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150425/76f56fa4/attachment.html>

From yodan.tauber at gmail.com  Sun Apr 26 00:12:22 2015
From: yodan.tauber at gmail.com (yodan)
Date: Sun, 26 Apr 2015 00:12:22 -0700 (PDT)
Subject: [gdal-dev] Building TIFF overviews from bitmap in memory
Message-ID: <1430032342053-5202974.post@n6.nabble.com>

Hi, 

I have a large bitmap in memory, and I need to build overviews for this
image and save them in TIFF format in an .ovr file. I could do this by
saving the bitmap to disk (as a TIFF file), and then calling BuildOverviews
with the path to the TIFF file, but this would use too much unnecessary IO
which I cannot afford.

Now, I figured out how to use VSIFileFromMemBuffer to open my in-memory
bitmap in GDAL without writing it to disk. However, according to my
understanding of BuildOverviews (and correct me if I'm wrong), it will use
the same driver that read the input to produce the output. I understand this
means that when building overviews for a bitmap, the .ovr file will store
the overviews as bitmaps.

Is there any way to build overviews in TIFF format for a bitmap input,
without having to convert the large image to TIFF format?
Alternatively, can I perform the downsampling myself and only let GDAL
manage the format of the .ovr file (by supplying the images for each pyramid
level)?

Thank you for your help!
Yodan

(C++, Windows, MSVC 2012, GDAL 1.9.1)



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Building-TIFF-overviews-from-bitmap-in-memory-tp5202974.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From jamessramm at gmail.com  Mon Apr 27 07:55:24 2015
From: jamessramm at gmail.com (jramm)
Date: Mon, 27 Apr 2015 07:55:24 -0700 (PDT)
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
Message-ID: <1430146524262-5203128.post@n6.nabble.com>

I'm writing a custom processing program using GDAL in C.

I'm processing a raster of roughly 150 000 * 200 000 pixels in windows of
256 * 256 pixels. 

I'm finding that traversing the raster and applying some basic processing to
each of the windows takes very little time; about 10 minutes on my machine.

However, as soon as start writing out each window (to the same output raster
file), the time goes up to about 30 hours....

The writing is not special...just calling RasterIO like so:

<code>GDALRasterIO(wt->hBand, GF_Write, xOff, yOff, xSize, ySize, data,
xSize, ySize, GDT_UInt32, 0, 0);</code>


In a loop like so:

  while (movingwindow_next(&win) == 0)
    {
    process(winsize, &dg, &cats, &bt, resultBuffer);
    xOff = movingwindow_xoff();
    yOff = movingwindow_yoff();
    //writer_writeWindow(&wt, resultBuffer, win.sizeX, win.sizeY, xOff,
yOff);
    }

...I would've expected the code to slow down by 2, 3 or even 4 times, but
300 times is a bit crazy, no?

Are their any techniques I can use to optimise writing?

I am also not particularly limited by the output format if geotiff is not
the most efficient. I am only constrained by the fact that ESRI ArcGIS must
be able to read it...




--
View this message in context: http://osgeo-org.1560.x6.nabble.com/GDAL-slow-to-write-GeoTIFF-tp5203128.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Mon Apr 27 08:11:54 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 27 Apr 2015 17:11:54 +0200
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
In-Reply-To: <1430146524262-5203128.post@n6.nabble.com>
References: <1430146524262-5203128.post@n6.nabble.com>
Message-ID: <201504271711.54758.even.rouault@spatialys.com>

Le lundi 27 avril 2015 16:55:24, jramm a ?crit :
> I'm writing a custom processing program using GDAL in C.
> 
> I'm processing a raster of roughly 150 000 * 200 000 pixels in windows of
> 256 * 256 pixels.

Is the TIFF tiled ? If it is not, this should help. And/or you could perhaps 
try increasing GDAL_CACHEMAX too.
But for a given organization (tiled vs non-tiled), I'm also surprised you 
would get such a difference between read and write scenarios.

> 
> I'm finding that traversing the raster and applying some basic processing
> to each of the windows takes very little time; about 10 minutes on my
> machine.
> 
> However, as soon as start writing out each window (to the same output
> raster file), the time goes up to about 30 hours....
> 
> The writing is not special...just calling RasterIO like so:
> 
> <code>GDALRasterIO(wt->hBand, GF_Write, xOff, yOff, xSize, ySize, data,
> xSize, ySize, GDT_UInt32, 0, 0);</code>
> 
> 
> In a loop like so:
> 
>   while (movingwindow_next(&win) == 0)
>     {
>     process(winsize, &dg, &cats, &bt, resultBuffer);
>     xOff = movingwindow_xoff();
>     yOff = movingwindow_yoff();
>     //writer_writeWindow(&wt, resultBuffer, win.sizeX, win.sizeY, xOff,
> yOff);
>     }
> 
> ...I would've expected the code to slow down by 2, 3 or even 4 times, but
> 300 times is a bit crazy, no?
> 
> Are their any techniques I can use to optimise writing?
> 
> I am also not particularly limited by the output format if geotiff is not
> the most efficient. I am only constrained by the fact that ESRI ArcGIS must
> be able to read it...
> 
> 
> 
> 
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/GDAL-slow-to-write-GeoTIFF-tp5203128.h
> tml Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gdal at stripfamily.net  Mon Apr 27 09:04:30 2015
From: gdal at stripfamily.net (David Strip)
Date: Mon, 27 Apr 2015 10:04:30 -0600
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
In-Reply-To: <201504271711.54758.even.rouault@spatialys.com>
References: <1430146524262-5203128.post@n6.nabble.com>
	<201504271711.54758.even.rouault@spatialys.com>
Message-ID: <553E5E0E.3050803@stripfamily.net>

On 4/27/2015 9:11 AM, Even Rouault wrote:
> Le lundi 27 avril 2015 16:55:24, jramm a ?crit :
>> > I'm writing a custom processing program using GDAL in C.
>> > 
>> > I'm processing a raster of roughly 150 000 * 200 000 pixels in windows of
>> > 256 * 256 pixels.
> Is the TIFF tiled ? If it is not, this should help. And/or you could perhaps 
> try increasing GDAL_CACHEMAX too.
> But for a given organization (tiled vs non-tiled), I'm also surprised you 
> would get such a difference between read and write scenarios.
>
Could the compression mode of the TIFF have any impact here? What
compression mode are you using?

From jrepetto at free.fr  Mon Apr 27 10:16:27 2015
From: jrepetto at free.fr (Jean-Claude Repetto)
Date: Mon, 27 Apr 2015 19:16:27 +0200
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
In-Reply-To: <1430146524262-5203128.post@n6.nabble.com>
References: <1430146524262-5203128.post@n6.nabble.com>
Message-ID: <553E6EEB.2050401@free.fr>

Le 27/04/2015 16:55, jramm a ?crit :
> I'm writing a custom processing program using GDAL in C.

Have you tried gdal_translate on the same raster ?

Jean-Claude


From jamessramm at gmail.com  Mon Apr 27 23:25:57 2015
From: jamessramm at gmail.com (jramm)
Date: Mon, 27 Apr 2015 23:25:57 -0700 (PDT)
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
In-Reply-To: <201504271711.54758.even.rouault@spatialys.com>
References: <1430146524262-5203128.post@n6.nabble.com>
	<201504271711.54758.even.rouault@spatialys.com>
Message-ID: <1430202357778-5203202.post@n6.nabble.com>

By tiled do you mean split into N seperate TIFF files (in which case the
answer is no), or can a single TIFF contain a tiling scheme? If so, is this
some option I need to pass to the driver when creating the output?



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/GDAL-slow-to-write-GeoTIFF-tp5203128p5203202.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From jamessramm at gmail.com  Mon Apr 27 23:26:47 2015
From: jamessramm at gmail.com (jramm)
Date: Mon, 27 Apr 2015 23:26:47 -0700 (PDT)
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
In-Reply-To: <553E5E0E.3050803@stripfamily.net>
References: <1430146524262-5203128.post@n6.nabble.com>
	<201504271711.54758.even.rouault@spatialys.com>
	<553E5E0E.3050803@stripfamily.net>
Message-ID: <1430202407581-5203203.post@n6.nabble.com>

David, there should be no compression, but I will try setting it explicitly
in the driver...



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/GDAL-slow-to-write-GeoTIFF-tp5203128p5203203.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Tue Apr 28 00:38:03 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 28 Apr 2015 09:38:03 +0200
Subject: [gdal-dev] GDAL slow to write GeoTIFF?
In-Reply-To: <1430202357778-5203202.post@n6.nabble.com>
References: <1430146524262-5203128.post@n6.nabble.com>
	<201504271711.54758.even.rouault@spatialys.com>
	<1430202357778-5203202.post@n6.nabble.com>
Message-ID: <201504280938.03780.even.rouault@spatialys.com>

Le mardi 28 avril 2015 08:25:57, jramm a ?crit :
> By tiled do you mean split into N seperate TIFF files (in which case the
> answer is no), or can a single TIFF contain a tiling scheme? 

Yes a TIFF can be tiled internally.

> If so, is this
> some option I need to pass to the driver when creating the output?

Yes TILED=YES. Cf http://www.gdal.org/frmt_gtiff.html
When tiling is enabled, the default tile size is 256x256. Which would match 
the way you operate.

> 
> 
> 
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/GDAL-slow-to-write-GeoTIFF-tp5203128p5
> 203202.html Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From federicojurio at suremptec.com.ar  Tue Apr 28 07:19:48 2015
From: federicojurio at suremptec.com.ar (Federico)
Date: Tue, 28 Apr 2015 07:19:48 -0700 (PDT)
Subject: [gdal-dev] Problems with WMS minidriver
Message-ID: <1430230788865-5203330.post@n6.nabble.com>

Hi guys, i'm trying to get a wmts layer but i'm getting an error. I think
that i'm doing something wrong but i don't what's wrong.

URL: http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts
GetCapabilities:
http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?service=WMTS&request=GetCapabilities
Tile from WMTS:
http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=matrikkel_bakgrunn&STYLE=default&FORMAT=image/png&TILEMATRIXSET=EPSG:4326&TILEMATRIX=EPSG:4326:1&TILEROW=0&TILECOL=2

*My XML file*
<GDAL_WMS>
	<Service name="TMS">
		<Version>1.0.0</Version>
	
<ServerUrl>http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts/lyrs=matrikkel_bakgrunn&x=${x}&y=${y}&z=${z}</ServerUrl>
	</Service>
	<DataWindow>
		<UpperLeftX>180.0</UpperLeftX>
		<UpperLeftY>90.0</UpperLeftY>
		<LowerRightX>-180.0</LowerRightX>
		<LowerRightY>-90.0</LowerRightY>
		<TileLevel>20</TileLevel>
		<TileCountX>1</TileCountX>
		<TileCountY>1</TileCountY>
		<YOrigin>top</YOrigin>
	</DataWindow>
	<Projection>EPSG:4326</Projection>
	<BlockSizeX>256</BlockSizeX>
	<BlockSizeY>256</BlockSizeY>
	<BandsCount>3</BandsCount>
	<MaxConnections>5</MaxConnections>
	<Cache />
</GDAL_WMS>

*gdalinfo from the file*
Driver: WMS/OGC Web Map Service
Files: none associated
Size is 268435456, 268435456
Coordinate System is:
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,
        AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.0174532925199433,
        AUTHORITY["EPSG","9122"]],
    AUTHORITY["EPSG","4326"]]
Origin = (180.000000000000000,90.000000000000000)
Pixel Size = (-0.000001341104507,-0.000000670552254)
Image Structure Metadata:
  INTERLEAVE=PIXEL
Corner Coordinates:
Upper Left  ( 180.0000000,  90.0000000) (180d 0' 0.00"E, 90d 0' 0.00"N)
Lower Left  ( 180.0000000, -90.0000000) (180d 0' 0.00"E, 90d 0' 0.00"S)
Upper Right (-180.0000000,  90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"N)
Lower Right (-180.0000000, -90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"S)
Center      (   0.0000000,   0.0000000) (  0d 0' 0.01"E,  0d 0' 0.01"N)
Band 1 Block=256x256 Type=Byte, ColorInterp=Red
  Overviews: 134217728x134217728, 67108864x67108864, 33554432x33554432,
16777216x16777216, 8388608x8388608, 4194304x4194304, 2097152x2097152,
1048576x1048576, 524288x524288, 262144x262144, 131072x131072, 65536x65536,
32768x32768, 16384x16384, 8192x8192, 4096x4096, 2048x2048, 1024x1024,
512x512, 256x256
Band 2 Block=256x256 Type=Byte, ColorInterp=Green
  Overviews: 134217728x134217728, 67108864x67108864, 33554432x33554432,
16777216x16777216, 8388608x8388608, 4194304x4194304, 2097152x2097152,
1048576x1048576, 524288x524288, 262144x262144, 131072x131072, 65536x65536,
32768x32768, 16384x16384, 8192x8192, 4096x4096, 2048x2048, 1024x1024,
512x512, 256x256
Band 3 Block=256x256 Type=Byte, ColorInterp=Blue
  Overviews: 134217728x134217728, 67108864x67108864, 33554432x33554432,
16777216x16777216, 8388608x8388608, 4194304x4194304, 2097152x2097152,
1048576x1048576, 524288x524288, 262144x262144, 131072x131072, 65536x65536,
32768x32768, 16384x16384, 8192x8192, 4096x4096, 2048x2048, 1024x1024,
512x512, 256x256

*gdal_translate from the file*
C:\>gdal_translate -of JPEG -outsize 256 256 a.xml a.jpeg
Input file size is 268435456, 268435456
0ERROR 1: GDALWMS: The server returned exception: [5][Gatekeeper]
Gatekeeper logon avvist av BAAT.

ERROR 1: a.xml, band 1: IReadBlock failed at X offset 0, Y offset 0
ERROR 1: GetBlockRef failed at X block offset 0, Y block offset 0



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Problems-with-WMS-minidriver-tp5203330.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From andre.vautour at caris.com  Tue Apr 28 07:47:16 2015
From: andre.vautour at caris.com (Andre Vautour)
Date: Tue, 28 Apr 2015 11:47:16 -0300
Subject: [gdal-dev] Problems with WMS minidriver
In-Reply-To: <1430230788865-5203330.post@n6.nabble.com>
References: <1430230788865-5203330.post@n6.nabble.com>
Message-ID: <553F9D74.8000102@caris.com>

On 2015-04-28 11:19, Federico wrote:
> Hi guys, i'm trying to get a wmts layer but i'm getting an error. I think
> that i'm doing something wrong but i don't what's wrong.
>
> URL: http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts
> GetCapabilities:
> http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?service=WMTS&request=GetCapabilities
> Tile from WMTS:
> http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=matrikkel_bakgrunn&STYLE=default&FORMAT=image/png&TILEMATRIXSET=EPSG:4326&TILEMATRIX=EPSG:4326:1&TILEROW=0&TILECOL=2
>
> *My XML file*
> <GDAL_WMS>
> 	<Service name="TMS">
> 		<Version>1.0.0</Version>
> 	
> <ServerUrl>http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts/lyrs=matrikkel_bakgrunn&x=${x}&y=${y}&z=${z}</ServerUrl>
> 	</Service>

Using the TMS mini driver for WMS should work for WMTS as long as the 
following holds true:
* Every tile matrix has the same top-left corner
* Scale denominators increase as powers of 2
* Tile matrix identifiers can be modeled a a prefix with an incremented 
identifier as seems to be the case in this instance: EPSG:4326:1, 
EPSG:4326:2, EPSG:4326:3

Basically, the WMTS tile matrix set needs to be a quad tree.

That being said, I'd expect the server URL to be something like:
http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=matrikkel_bakgrunn&STYLE=default&FORMAT=image/png&TILEMATRIXSET=EPSG:4326&TILEMATRIX=EPSG:4326:${z}&TILEROW=${y}&TILECOL=${x}

Andr?


From jamessramm at gmail.com  Tue Apr 28 13:49:23 2015
From: jamessramm at gmail.com (jramm)
Date: Tue, 28 Apr 2015 13:49:23 -0700 (PDT)
Subject: [gdal-dev] Formats that support RAT's?
Message-ID: <1430254163633-5203365.post@n6.nabble.com>

It seems GDAL will always let you create a Raster Attribute Table (in memory)
but may fail when writing to disk depending on whether the format supports
it? 

I can't seem to find any information anywhere on what formats support RAT's?
Is there a list I can refer to ??



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Formats-that-support-RAT-s-tp5203365.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From even.rouault at spatialys.com  Tue Apr 28 13:58:16 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 28 Apr 2015 22:58:16 +0200
Subject: [gdal-dev] Formats that support RAT's?
In-Reply-To: <1430254163633-5203365.post@n6.nabble.com>
References: <1430254163633-5203365.post@n6.nabble.com>
Message-ID: <201504282258.16809.even.rouault@spatialys.com>

Le mardi 28 avril 2015 22:49:23, jramm a ?crit :
> It seems GDAL will always let you create a Raster Attribute Table (in
> memory) but may fail when writing to disk depending on whether the format
> supports it?
> 

A lot of format that relies on the PAM(Persistant Auxiliary Metadata)Dataset base class will serialize it in a .aux.xml file.

> I can't seem to find any information anywhere on what formats support
> RAT's? Is there a list I can refer to ??

From the result of "grep -r SetDefaultRAT frmts/ ", the answer is Idrisi, GeoRaster, KEA and HFA.

> 
> 
> 
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/Formats-that-support-RAT-s-tp5203365.h
> tml Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From lucena_ivan at hotmail.com  Tue Apr 28 14:04:56 2015
From: lucena_ivan at hotmail.com (Ivan Lucena)
Date: Tue, 28 Apr 2015 17:04:56 -0400
Subject: [gdal-dev] Formats that support RAT's?
In-Reply-To: <201504282258.16809.even.rouault@spatialys.com>
References: <1430254163633-5203365.post@n6.nabble.com>,
	<201504282258.16809.even.rouault@spatialys.com>
Message-ID: <BLU173-W46FC7DEB0B6D505796AA5090E80@phx.gbl>



> From: even.rouault at spatialys.com
> To: gdal-dev at lists.osgeo.org
> Date: Tue, 28 Apr 2015 22:58:16 +0200
> Subject: Re: [gdal-dev] Formats that support RAT's?
> 
> Le mardi 28 avril 2015 22:49:23, jramm a ?crit :
> > It seems GDAL will always let you create a Raster Attribute Table (in
> > memory) but may fail when writing to disk depending on whether the format
> > supports it?
> > 
> 
> A lot of format that relies on the PAM(Persistant Auxiliary Metadata)Dataset base class will serialize it in a .aux.xml file.
> 
> > I can't seem to find any information anywhere on what formats support
> > RAT's? Is there a list I can refer to ??
> 
> From the result of "grep -r SetDefaultRAT frmts/ ", the answer is Idrisi, GeoRaster, KEA and HFA.

The RST format (Idrisi driver) doesn't really support RAT. That was included in the driver because, software ***, could not read GDAL Category Names at that time, but it could read read it as RAT. Don't ask me why.

> 
> > 
> > 
> > 
> > --
> > View this message in context:
> > http://osgeo-org.1560.x6.nabble.com/Formats-that-support-RAT-s-tp5203365.h
> > tml Sent from the GDAL - Dev mailing list archive at Nabble.com.
> > _______________________________________________
> > gdal-dev mailing list
> > gdal-dev at lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/gdal-dev
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150428/8f31263f/attachment.html>

From yuchen at avenza.com  Tue Apr 28 14:03:58 2015
From: yuchen at avenza.com (Yuchen Zhong)
Date: Tue, 28 Apr 2015 17:03:58 -0400
Subject: [gdal-dev] Implementing a streaming version of KML Driver
Message-ID: <E14A545A-23F0-4901-ADCF-1A1211E40F00@avenza.com>

Hello everybody,

I notice that there are two KML drivers in GDAL, namely KMLDriver and LIBKMLDriver. Both of them will load all the data into memory. 

We would like to write a new KML driver for GDAL, a streaming version, so as to reduce memory consumption. We would still want to use LIBKML, so that we don't have to reinvent the wheels. However, the LIBKML only supports SAX API, and GDAL doesn't seems to works with that very well. I am wondering whether it is a good idea to go along this path. 

This is about the existing streaming parse in LIBKML (under KmlStream Section):
https://code.google.com/p/libkml/wiki/KmlEngineReference <https://code.google.com/p/libkml/wiki/KmlEngineReference>

Hope can hear some of your opinions about this idea.

Sincerely, 

Yuchen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150428/cd598216/attachment.html>

From bishop.dev at gmail.com  Tue Apr 28 14:30:56 2015
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Wed, 29 Apr 2015 00:30:56 +0300
Subject: [gdal-dev] Implementing a streaming version of KML Driver
In-Reply-To: <E14A545A-23F0-4901-ADCF-1A1211E40F00@avenza.com>
References: <E14A545A-23F0-4901-ADCF-1A1211E40F00@avenza.com>
Message-ID: <553FFC10.1000208@gmail.com>

Hi,

https://code.google.com/p/libkml/downloads/list?can=1&q=&colspec=Filename+Summary+Uploaded+ReleaseDate+Size+DownloadCount

The last release was on Feb 2010 - 5 year ago. Does the libkml still alive?
Also libkml has depending on boost, and kml driver has no external 
depending.

Best regards,
     Dmitry

29.04.2015 00:03, Yuchen Zhong ?????:
> Hello everybody,
>
> I notice that there are two KML drivers in GDAL, namely KMLDriver and 
> LIBKMLDriver. Both of them will load all the data into memory.
>
> We would like to write a new KML driver for GDAL, a streaming version, 
> so as to reduce memory consumption. We would still want to use LIBKML, 
> so that we don't have to reinvent the wheels. However, the LIBKML only 
> supports SAX API, and GDAL doesn't seems to works with that very well. 
> I am wondering whether it is a good idea to go along this path.
>
> This is about the existing streaming parse in LIBKML (under *KmlStream 
> Section*):
> https://code.google.com/p/libkml/wiki/KmlEngineReference
>
> Hope can hear some of your opinions about this idea.
>
> Sincerely,
>
> Yuchen
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150429/19a5ed62/attachment.html>

From sebastic at xs4all.nl  Tue Apr 28 22:54:43 2015
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 29 Apr 2015 07:54:43 +0200
Subject: [gdal-dev] Implementing a streaming version of KML Driver
In-Reply-To: <553FFC10.1000208@gmail.com>
References: <E14A545A-23F0-4901-ADCF-1A1211E40F00@avenza.com>
	<553FFC10.1000208@gmail.com>
Message-ID: <55407223.1080704@xs4all.nl>

On 04/28/2015 11:30 PM, Dmitry Baryshnikov wrote:
> https://code.google.com/p/libkml/downloads/list?can=1&q=&colspec=Filename+Summary+Uploaded+ReleaseDate+Size+DownloadCount
> 
> 
> The last release was on Feb 2010 - 5 year ago. Does the libkml still alive?
> Also libkml has depending on boost, and kml driver has no external
> depending.

Google was nagged enough to move libkml to GitHub where it got some
updates, but development has stopped there again too. See:

https://github.com/google/libkml/

I'm in discussion with some of the libkml fork developers to get the
community to take over libkml maintenance. See:

https://code.google.com/p/libkml/issues/detail?id=161
https://github.com/google/libkml/issues/4

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From ao at t-kartor.se  Wed Apr 29 00:56:10 2015
From: ao at t-kartor.se (Andreas Oxenstierna)
Date: Wed, 29 Apr 2015 09:56:10 +0200
Subject: [gdal-dev] Problems with WMS minidriver
In-Reply-To: <1430230788865-5203330.post@n6.nabble.com>
References: <1430230788865-5203330.post@n6.nabble.com>
Message-ID: <55408E9A.7020305@t-kartor.se>

Federico,

You got a login error:

0ERROR 1: GDALWMS: The server returned exception: [5][Gatekeeper]
Gatekeeper logon avvist av BAAT.

Your request is thus rejected ("avvist" in Norwegian) by the Norwegian national login service BAAT.
Either you always need to supply a valid login, or there is a limit on the number of tile requests from a
IP number per day for non-authorized requests. This limit was rather low, at least 5 years ago.

Best Regards

Andreas

> Hi guys, i'm trying to get a wmts layer but i'm getting an error. I think
> that i'm doing something wrong but i don't what's wrong.
>
> URL: http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts
> GetCapabilities:
> http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?service=WMTS&request=GetCapabilities
> Tile from WMTS:
> http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=matrikkel_bakgrunn&STYLE=default&FORMAT=image/png&TILEMATRIXSET=EPSG:4326&TILEMATRIX=EPSG:4326:1&TILEROW=0&TILECOL=2
>
> *My XML file*
> <GDAL_WMS>
> 	<Service name="TMS">
> 		<Version>1.0.0</Version>
> 	
> <ServerUrl>http://opencache.statkart.no/gatekeeper/gk/gk.open_wmts/lyrs=matrikkel_bakgrunn&x=${x}&y=${y}&z=${z}</ServerUrl>
> 	</Service>
> 	<DataWindow>
> 		<UpperLeftX>180.0</UpperLeftX>
> 		<UpperLeftY>90.0</UpperLeftY>
> 		<LowerRightX>-180.0</LowerRightX>
> 		<LowerRightY>-90.0</LowerRightY>
> 		<TileLevel>20</TileLevel>
> 		<TileCountX>1</TileCountX>
> 		<TileCountY>1</TileCountY>
> 		<YOrigin>top</YOrigin>
> 	</DataWindow>
> 	<Projection>EPSG:4326</Projection>
> 	<BlockSizeX>256</BlockSizeX>
> 	<BlockSizeY>256</BlockSizeY>
> 	<BandsCount>3</BandsCount>
> 	<MaxConnections>5</MaxConnections>
> 	<Cache />
> </GDAL_WMS>
>
> *gdalinfo from the file*
> Driver: WMS/OGC Web Map Service
> Files: none associated
> Size is 268435456, 268435456
> Coordinate System is:
> GEOGCS["WGS 84",
>      DATUM["WGS_1984",
>          SPHEROID["WGS 84",6378137,298.257223563,
>              AUTHORITY["EPSG","7030"]],
>          AUTHORITY["EPSG","6326"]],
>      PRIMEM["Greenwich",0,
>          AUTHORITY["EPSG","8901"]],
>      UNIT["degree",0.0174532925199433,
>          AUTHORITY["EPSG","9122"]],
>      AUTHORITY["EPSG","4326"]]
> Origin = (180.000000000000000,90.000000000000000)
> Pixel Size = (-0.000001341104507,-0.000000670552254)
> Image Structure Metadata:
>    INTERLEAVE=PIXEL
> Corner Coordinates:
> Upper Left  ( 180.0000000,  90.0000000) (180d 0' 0.00"E, 90d 0' 0.00"N)
> Lower Left  ( 180.0000000, -90.0000000) (180d 0' 0.00"E, 90d 0' 0.00"S)
> Upper Right (-180.0000000,  90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"N)
> Lower Right (-180.0000000, -90.0000000) (180d 0' 0.00"W, 90d 0' 0.00"S)
> Center      (   0.0000000,   0.0000000) (  0d 0' 0.01"E,  0d 0' 0.01"N)
> Band 1 Block=256x256 Type=Byte, ColorInterp=Red
>    Overviews: 134217728x134217728, 67108864x67108864, 33554432x33554432,
> 16777216x16777216, 8388608x8388608, 4194304x4194304, 2097152x2097152,
> 1048576x1048576, 524288x524288, 262144x262144, 131072x131072, 65536x65536,
> 32768x32768, 16384x16384, 8192x8192, 4096x4096, 2048x2048, 1024x1024,
> 512x512, 256x256
> Band 2 Block=256x256 Type=Byte, ColorInterp=Green
>    Overviews: 134217728x134217728, 67108864x67108864, 33554432x33554432,
> 16777216x16777216, 8388608x8388608, 4194304x4194304, 2097152x2097152,
> 1048576x1048576, 524288x524288, 262144x262144, 131072x131072, 65536x65536,
> 32768x32768, 16384x16384, 8192x8192, 4096x4096, 2048x2048, 1024x1024,
> 512x512, 256x256
> Band 3 Block=256x256 Type=Byte, ColorInterp=Blue
>    Overviews: 134217728x134217728, 67108864x67108864, 33554432x33554432,
> 16777216x16777216, 8388608x8388608, 4194304x4194304, 2097152x2097152,
> 1048576x1048576, 524288x524288, 262144x262144, 131072x131072, 65536x65536,
> 32768x32768, 16384x16384, 8192x8192, 4096x4096, 2048x2048, 1024x1024,
> 512x512, 256x256
>
> *gdal_translate from the file*
> C:\>gdal_translate -of JPEG -outsize 256 256 a.xml a.jpeg
> Input file size is 268435456, 268435456
> 0ERROR 1: GDALWMS: The server returned exception: [5][Gatekeeper]
> Gatekeeper logon avvist av BAAT.
>
> ERROR 1: a.xml, band 1: IReadBlock failed at X offset 0, Y offset 0
> ERROR 1: GetBlockRef failed at X block offset 0, Y block offset 0
>
>
>
> --
> View this message in context: http://osgeo-org.1560.x6.nabble.com/Problems-with-WMS-minidriver-tp5203330.html
> Sent from the GDAL - Dev mailing list archive at Nabble.com.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150429/471586a3/attachment-0001.html>

From tomerlieber at gmail.com  Wed Apr 29 05:11:56 2015
From: tomerlieber at gmail.com (Tomer)
Date: Wed, 29 Apr 2015 05:11:56 -0700 (PDT)
Subject: [gdal-dev] Grayscale To RGB
Message-ID: <1430309516837-5203465.post@n6.nabble.com>

Hello,

I want to change a grayscale image to an RGB image, because the gdalbuildvrt
utility only accepts images with the same channels.
Is there a way to do it with the gdal_translate or gdal_calc utilities or
with other utilities. 

Best regards, 
Tomer.



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Grayscale-To-RGB-tp5203465.html
Sent from the GDAL - Dev mailing list archive at Nabble.com.

From sfkeller at gmail.com  Wed Apr 29 11:32:21 2015
From: sfkeller at gmail.com (Stefan Keller)
Date: Wed, 29 Apr 2015 20:32:21 +0200
Subject: [gdal-dev] OGR Field Types?
Message-ID: <CAFcOn28oLBOBdA6ExSUtHOphuYWb-hcyj6oFeAVEoWHzSZRD6A@mail.gmail.com>

I've few questions regarding CSV and OGR field types:

Doc. http://www.gdal.org/ogr2ogr.html mentions following field types
for "-mapFieldType":
Integer, Integer64, Real, String, Date, Time, DateTime, Binary,
IntegerList, Integer64List, RealList, StringList.

Doc http://www.gdal.org/drv_csv.html says:
<<
Limited type recognition can be done for Integer, Real, String, Date
(YYYY-MM-DD), Time (HH:MM:SS+nn), DateTime (YYYY-MM-DD HH:MM:SS+nn)
columns through a descriptive file with the same name as the CSV file,
but a .csvt extension (...) Starting with GDAL 2.0, subtypes can be
passed between parenthesis, such as "Integer(Boolean)",
"Integer(Int16)" and "Real(Float32)"
<<

Questions:
1. How is 'binary' encoded? E.g. when defining binary in a CSV file,
how is it encoded? Hex?
2. Can a field in a CSV input files have a IntegerList or a Binary?
3. What is the value delimiter in a field of type IntegerList,
Integer64List, RealList, StringList?
4. "Boolean, Int16, Float32" are mentioned as subtypes. Are there more subtypes?

-S.

From even.rouault at spatialys.com  Wed Apr 29 11:35:49 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 29 Apr 2015 20:35:49 +0200
Subject: [gdal-dev] OGR Field Types?
In-Reply-To: <CAFcOn28oLBOBdA6ExSUtHOphuYWb-hcyj6oFeAVEoWHzSZRD6A@mail.gmail.com>
References: <CAFcOn28oLBOBdA6ExSUtHOphuYWb-hcyj6oFeAVEoWHzSZRD6A@mail.gmail.com>
Message-ID: <201504292035.49049.even.rouault@spatialys.com>

Stefan
> 
> Questions:
> 1. How is 'binary' encoded? E.g. when defining binary in a CSV file,
> how is it encoded? Hex?

There's no support in the CSV driver for binary data

> 2. Can a field in a CSV input files have a IntegerList or a Binary?

No. Well on writing, the IntegerList will be serialized as a string. But not 
recognized as IntegerList on reading

> 3. What is the value delimiter in a field of type IntegerList,
> Integer64List, RealList, StringList?

The default serializatoin will be (number_of_elements:val1,val2,...,valn), but 
currently it is truncated to 80 chracters

> 4. "Boolean, Int16, Float32" are mentioned as subtypes. Are there more
> subtypes?

Not currently. See https://trac.osgeo.org/gdal/wiki/rfc50_ogr_field_subtype

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Wed Apr 29 11:40:10 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 29 Apr 2015 20:40:10 +0200
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504131401.46728.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
Message-ID: <201504292040.10516.even.rouault@spatialys.com>

Hi,

I wanted to have an update from other developers to know where there are with 
respect to their planned schedule.
I had noted that :
- Dmitriy wanted to integrate his work on metadata support for various 
satellite imagery. I have reviewed a preliminary version of it.
- Ari has ongoing work on Perl. I've seen a few commits passed.
- Pirmin intended to add curve support in Interlis. Haven't seen yet any 
commit.

Are you still in track to finalize those works in the following days ? Would 
adding the week-end help to have that in Beta1 ? I especially think to 
Dmitriy's work who is quite substantial, and perhaps Perl changes if there are 
still breaking change to come. Interlis specfic changes might arrive after 
Beta1 I think.

Even


> Hi,
> 
> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
> version for the end of this month (April 30th). Are there objections to
> sticking with that plan ? Does someone need a bit more time to finish an
> ongoing work ?
> 
> And if things go well with this beta (and potentially other beta(s)
> needed), we could try a release candidate for end of May. One month of
> beta phase might seem a bit short, but I'm not sure extending the beta
> testing period more will bring significant additional feedback (and things
> tend to slip, so better aim for a tight schedule). Thoughts ?
> Anyone using GDAL intensively and/or interesting in 2.0 should already
> track trunk closely ;-)
> 
> I can wear the hat of 2.0 release manager, but I'm happy to let it to any
> other volunteer.
> 
> Best regards,
> 
> Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From bishop.dev at gmail.com  Wed Apr 29 12:05:59 2015
From: bishop.dev at gmail.com (Dmitry Baryshnikov)
Date: Wed, 29 Apr 2015 22:05:59 +0300
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504292040.10516.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
	<201504292040.10516.even.rouault@spatialys.com>
Message-ID: <55412B97.2020203@gmail.com>

Hi Even,

I plan to fix all reported errors on Friday or Saturday, may be add few 
new satellites.

Best regards,
     Dmitry

29.04.2015 21:40, Even Rouault ?????:
> Hi,
>
> I wanted to have an update from other developers to know where there are with
> respect to their planned schedule.
> I had noted that :
> - Dmitriy wanted to integrate his work on metadata support for various
> satellite imagery. I have reviewed a preliminary version of it.
> - Ari has ongoing work on Perl. I've seen a few commits passed.
> - Pirmin intended to add curve support in Interlis. Haven't seen yet any
> commit.
>
> Are you still in track to finalize those works in the following days ? Would
> adding the week-end help to have that in Beta1 ? I especially think to
> Dmitriy's work who is quite substantial, and perhaps Perl changes if there are
> still breaking change to come. Interlis specfic changes might arrive after
> Beta1 I think.
>
> Even
>
>
>> Hi,
>>
>> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
>> version for the end of this month (April 30th). Are there objections to
>> sticking with that plan ? Does someone need a bit more time to finish an
>> ongoing work ?
>>
>> And if things go well with this beta (and potentially other beta(s)
>> needed), we could try a release candidate for end of May. One month of
>> beta phase might seem a bit short, but I'm not sure extending the beta
>> testing period more will bring significant additional feedback (and things
>> tend to slip, so better aim for a tight schedule). Thoughts ?
>> Anyone using GDAL intensively and/or interesting in 2.0 should already
>> track trunk closely ;-)
>>
>> I can wear the hat of 2.0 release manager, but I'm happy to let it to any
>> other volunteer.
>>
>> Best regards,
>>
>> Even


From sfkeller at gmail.com  Wed Apr 29 13:57:05 2015
From: sfkeller at gmail.com (Stefan Keller)
Date: Wed, 29 Apr 2015 22:57:05 +0200
Subject: [gdal-dev] OGR Field Types?
In-Reply-To: <201504292035.49049.even.rouault@spatialys.com>
References: <CAFcOn28oLBOBdA6ExSUtHOphuYWb-hcyj6oFeAVEoWHzSZRD6A@mail.gmail.com>
	<201504292035.49049.even.rouault@spatialys.com>
Message-ID: <CAFcOn29Er991kbrYYx3fE8OCB41bmdxAYpDad00sPJ1Pspuwxw@mail.gmail.com>

Salut Even,

Merci!

2015-04-29 20:35 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:
> Stefan
>>
>> Questions:
>> 1. How is 'binary' encoded? E.g. when defining binary in a CSV file,
>> how is it encoded? Hex?
>
> There's no support in the CSV driver for binary data
>
>> 2. Can a field in a CSV input files have a IntegerList or a Binary?
>
> No. Well on writing, the IntegerList will be serialized as a string. But not
> recognized as IntegerList on reading
>
>> 3. What is the value delimiter in a field of type IntegerList,
>> Integer64List, RealList, StringList?
>
> The default serializatoin will be (number_of_elements:val1,val2,...,valn), but
> currently it is truncated to 80 chracters
>
>> 4. "Boolean, Int16, Float32" are mentioned as subtypes. Are there more
>> subtypes?
>
> Not currently. See https://trac.osgeo.org/gdal/wiki/rfc50_ogr_field_subtype
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From mohammedrashadkm at gmail.com  Wed Apr 29 14:20:41 2015
From: mohammedrashadkm at gmail.com (Rashad M)
Date: Wed, 29 Apr 2015 23:20:41 +0200
Subject: [gdal-dev] Implementing a streaming version of KML Driver
In-Reply-To: <55407223.1080704@xs4all.nl>
References: <E14A545A-23F0-4901-ADCF-1A1211E40F00@avenza.com>
	<553FFC10.1000208@gmail.com> <55407223.1080704@xs4all.nl>
Message-ID: <CANNqv9fmuOBM0jU7YMe3pmWcm44vY8LqytQ-3gLSVZuiwRpq2A@mail.gmail.com>

Hello Yuchen,

Isn't possible to update existing google libkml driver in GDAL with an
option for streaming.?

As Sebastiaan and Dimtry said, google libkml is highly inactive on both
googlecode.com and github.com/google/libkml.

For this reason we created libkml as new fork [1] hoping it will ease use
of libkml in other projects, GDAL being one of them. Developer strength is
low now but feel free to dive in!

[1] github.com/libkml/libkml

On Wed, Apr 29, 2015 at 7:54 AM, Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 04/28/2015 11:30 PM, Dmitry Baryshnikov wrote:
> >
> https://code.google.com/p/libkml/downloads/list?can=1&q=&colspec=Filename+Summary+Uploaded+ReleaseDate+Size+DownloadCount
> >
> >
> > The last release was on Feb 2010 - 5 year ago. Does the libkml still
> alive?
> > Also libkml has depending on boost, and kml driver has no external
> > depending.
>
> Google was nagged enough to move libkml to GitHub where it got some
> updates, but development has stopped there again too. See:
>
> https://github.com/google/libkml/
>
> I'm in discussion with some of the libkml fork developers to get the
> community to take over libkml maintenance. See:
>
> https://code.google.com/p/libkml/issues/detail?id=161
> https://github.com/google/libkml/issues/4
>
> Kind Regards,
>
> Bas
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev
>



-- 
Regards,
   Rashad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150429/061e7f53/attachment.html>

From JPalmer at linz.govt.nz  Wed Apr 29 17:33:47 2015
From: JPalmer at linz.govt.nz (Jeremy Palmer)
Date: Thu, 30 Apr 2015 12:33:47 +1200
Subject: [gdal-dev] WMTS support in GDAL
Message-ID: <C6B695652D5E6B4597E90C5734C024262557CCF7A1@prdlsmmsg01.ad.linz.govt.nz>

Is it now possible to read WMTS sources using the GDAL WMS driver? The case looking at is using a service such as https://data.linz.govt.nz/set/2-nz-aerial-imagery/webservices/ and which has custom tile matrix specification and a RESTFul Tile access API.

Cheers,

Jeremy Palmer
Data Services Group Manager
Location Information - Data Services

E  jpalmer at linz.govt.nz | DDI 04 498 3537 | M 027 2747 862

Wellington Office, Level 7, Radio New Zealand House, 155 The Terrace
PO Box 5501, Wellington 6145, New Zealand | T 04 460 0110
W  www.linz.govt.nz<http://www.linz.govt.nz/> | www.landonline.govt.nz<http://www.landonline.govt.nz/> | data.linz.govt.nz<http://www.data.linz.govt.nz/>
[cid:image001.png at 01D08341.873BCAE0]


________________________________
This message contains information, which may be in confidence and may be subject to legal privilege. If you are not the intended recipient, you must not peruse, use, disseminate, distribute or copy this message. If you have received this message in error, please notify us immediately (Phone 0800 665 463 or info at linz.govt.nz) and destroy the original message. LINZ accepts no responsibility for changes to this email, or for any attachments, after its transmission from LINZ. Thank You.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150430/4dc4c59f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 10101 bytes
Desc: image001.png
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150430/4dc4c59f/attachment-0001.png>

From even.rouault at spatialys.com  Thu Apr 30 00:55:11 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Apr 2015 09:55:11 +0200
Subject: [gdal-dev] WMTS support in GDAL
In-Reply-To: <C6B695652D5E6B4597E90C5734C024262557CCF7A1@prdlsmmsg01.ad.linz.govt.nz>
References: <C6B695652D5E6B4597E90C5734C024262557CCF7A1@prdlsmmsg01.ad.linz.govt.nz>
Message-ID: <201504300955.11983.even.rouault@spatialys.com>

Le jeudi 30 avril 2015 02:33:47, Jeremy Palmer a ?crit :
> Is it now possible to read WMTS sources using the GDAL WMS driver? The case
> looking at is using a service such as
> https://data.linz.govt.nz/set/2-nz-aerial-imagery/webservices/ and which
> has custom tile matrix specification and a RESTFul Tile access API.

Hi Jeremy,

There is no dedicated WMTS driver (or WMS "mini-driver"). However in 
particular - but common-  cases, for example when the tiling scheme is the 
GoogleMapsCompatible one, and more generally when all resolution levels have 
the same origin point, and their resolution differ by a factor of 2, you can 
use a definition of the WMS TMS mini-driver.

In your case, you can put the following content in a .xml file and it will work 
(adapted from http://www.gdal.org/frmt_wms_openstreetmap_tms.xml).

<GDAL_WMS>
    <Service name="TMS">
        <ServerUrl>http://tiles-a.data-
cdn.linz.govt.nz/services;key=327224a02cc4453ba183441bbb6267aa/tiles/v4/set=2/EPSG:3857/${z}/${x}/${y}.png</ServerUrl>
    </Service>
    <DataWindow>
        <UpperLeftX>-20037508.34</UpperLeftX>
        <UpperLeftY>20037508.34</UpperLeftY>
        <LowerRightX>20037508.34</LowerRightX>
        <LowerRightY>-20037508.34</LowerRightY>
        <TileLevel>20</TileLevel> <!-- limited to 20, instead of 21 since GDAL 
block array would require much too memory -->
        <TileCountX>1</TileCountX>
        <TileCountY>1</TileCountY>
        <YOrigin>top</YOrigin>
    </DataWindow>
    <Projection>EPSG:3857</Projection>
    <BlockSizeX>256</BlockSizeX>
    <BlockSizeY>256</BlockSizeY>
    <BandsCount>4</BandsCount>
    <Cache />
</GDAL_WMS>


A proper driver would infer that from the capabilities, and possibly deal with 
the annoying cases I mentionned (the fact that overviews in WMTS may have not 
the same origin point is the most annoying one)

Even

> 
> Cheers,
> 
> Jeremy Palmer
> Data Services Group Manager
> Location Information - Data Services
> 
> E  jpalmer at linz.govt.nz | DDI 04 498 3537 | M 027 2747 862
> 
> Wellington Office, Level 7, Radio New Zealand House, 155 The Terrace
> PO Box 5501, Wellington 6145, New Zealand | T 04 460 0110
> W  www.linz.govt.nz<http://www.linz.govt.nz/> |
> www.landonline.govt.nz<http://www.landonline.govt.nz/> |
> data.linz.govt.nz<http://www.data.linz.govt.nz/>
> [cid:image001.png at 01D08341.873BCAE0]
> 
> 
> ________________________________
> This message contains information, which may be in confidence and may be
> subject to legal privilege. If you are not the intended recipient, you
> must not peruse, use, disseminate, distribute or copy this message. If you
> have received this message in error, please notify us immediately (Phone
> 0800 665 463 or info at linz.govt.nz) and destroy the original message. LINZ
> accepts no responsibility for changes to this email, or for any
> attachments, after its transmission from LINZ. Thank You.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From ari.jolma at gmail.com  Thu Apr 30 02:12:36 2015
From: ari.jolma at gmail.com (Ari Jolma)
Date: Thu, 30 Apr 2015 12:12:36 +0300
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504292040.10516.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
	<201504292040.10516.even.rouault@spatialys.com>
Message-ID: <5541F204.8050205@gmail.com>

29.04.2015, 21:40, Even Rouault kirjoitti:
> Hi,
>
> I wanted to have an update from other developers to know where there are with
> respect to their planned schedule.
> I had noted that :
> - Dmitriy wanted to integrate his work on metadata support for various
> satellite imagery. I have reviewed a preliminary version of it.
> - Ari has ongoing work on Perl. I've seen a few commits passed.
> - Pirmin intended to add curve support in Interlis. Haven't seen yet any
> commit.
>
> Are you still in track to finalize those works in the following days ? Would
> adding the week-end help to have that in Beta1 ? I especially think to
> Dmitriy's work who is quite substantial, and perhaps Perl changes if there are
> still breaking change to come. Interlis specfic changes might arrive after
> Beta1 I think.

There is *a lot* for me still to go through (mainly with writing tests 
and thus seeing if the interface is ok). But maybe the only big breaking 
change thing to do would be to harmonize the constructors.

Swig adds the standard Perl "new" but I've marked that in many cases 
deprecated since I want to use for example human readable strings and 
not integer constants (for example "Point" instead of 
$Geo::OGR::wkbPoint). This has led to a set of "create" constructors. In 
version 2 all the constructors should/could be called "new". Now I know 
how this can be done using a "shadow" feature of Swig.

I can do that today and then I'd be ok for 2.0 beta.

Ari

>
> Even
>
>
>> Hi,
>>
>> Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
>> version for the end of this month (April 30th). Are there objections to
>> sticking with that plan ? Does someone need a bit more time to finish an
>> ongoing work ?
>>
>> And if things go well with this beta (and potentially other beta(s)
>> needed), we could try a release candidate for end of May. One month of
>> beta phase might seem a bit short, but I'm not sure extending the beta
>> testing period more will bring significant additional feedback (and things
>> tend to slip, so better aim for a tight schedule). Thoughts ?
>> Anyone using GDAL intensively and/or interesting in 2.0 should already
>> track trunk closely ;-)
>>
>> I can wear the hat of 2.0 release manager, but I'm happy to let it to any
>> other volunteer.
>>
>> Best regards,
>>
>> Even


From nicolas.simon at spw.wallonie.be  Thu Apr 30 06:30:44 2015
From: nicolas.simon at spw.wallonie.be (SIMON Nicolas)
Date: Thu, 30 Apr 2015 13:30:44 +0000
Subject: [gdal-dev] question about gdaltranslate
Message-ID: <F02D54DF5576D84C86C23A39A792DC7E316C886E@se0002v.wallonie.intra>

Hi list,
        Is it possible to access this DEM with gdal ?

        http://geoservices.wallonie.be/arcgis/rest/services/RELIEF/WALLONIE_MNT_2013_2014_HILLSHADE/MapServer

        What could be the command line to convert a predefine extend into geotiff ?

        Thanks for your help

Nicolas

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20150430/0f90fb57/attachment.html>

From even.rouault at spatialys.com  Thu Apr 30 06:45:48 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Apr 2015 15:45:48 +0200
Subject: [gdal-dev] question about gdaltranslate
In-Reply-To: <F02D54DF5576D84C86C23A39A792DC7E316C886E@se0002v.wallonie.intra>
References: <F02D54DF5576D84C86C23A39A792DC7E316C886E@se0002v.wallonie.intra>
Message-ID: <201504301545.48658.even.rouault@spatialys.com>

Le jeudi 30 avril 2015 15:30:44, SIMON Nicolas a ?crit :
> Hi list,
>         Is it possible to access this DEM with gdal ?
> 
>        
> http://geoservices.wallonie.be/arcgis/rest/services/RELIEF/WALLONIE_MNT_20
> 13_2014_HILLSHADE/MapServer
> 
>         What could be the command line to convert a predefine extend into
> geotiff ?
> 

Nicolas,

This is now possible with the new ArcGIS REST API WMS minidriver in GDAL 
2.0dev/trunk ( http://gdal.org/frmt_wms.html )

If you put the following content (based on the information provided in the 
above link, and assuming a 1m resolution at full resolution) in a file, it is 
recognized as a GDAL raster.

<GDAL_WMS>
    <Service name="AGS">
        <ServerUrl>http://geoservices.wallonie.be/arcgis/rest/services/RELIEF/WALLONIE_MNT_2013_2014_HILLSHADE/MapServer</ServerUrl>
        <BBoxOrder>xyXY</BBoxOrder>
        <SRS>31370</SRS>
    </Service>
    <DataWindow>
        <UpperLeftX>30000</UpperLeftX>
        <UpperLeftY>200000</UpperLeftY>
        <LowerRightX>310000</LowerRightX>
        <LowerRightY>15000</LowerRightY>
        <SizeX>280000</SizeX>
        <SizeY>185000</SizeY>
    </DataWindow>
    <BandsCount>4</BandsCount>
    <Cache/>
</GDAL_WMS>

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pi_ml at sourcepole.com  Thu Apr 30 07:01:24 2015
From: pi_ml at sourcepole.com (Pirmin Kalberer)
Date: Thu, 30 Apr 2015 16:01:24 +0200
Subject: [gdal-dev] GDAL 2.0 release plans
In-Reply-To: <201504292040.10516.even.rouault@spatialys.com>
References: <201504131401.46728.even.rouault@spatialys.com>
	<201504292040.10516.even.rouault@spatialys.com>
Message-ID: <21040430.GTxUrbWfzU@polarwind2>

Hi Even,

Am Mittwoch, 29. April 2015, 20.40:10 schrieb Even Rouault:
> 
> I wanted to have an update from other developers to know where there are
> with respect to their planned schedule.
> I had noted that :
> - Dmitriy wanted to integrate his work on metadata support for various
> satellite imagery. I have reviewed a preliminary version of it.
> - Ari has ongoing work on Perl. I've seen a few commits passed.
> - Pirmin intended to add curve support in Interlis. Haven't seen yet any
> commit.

There are some commits in my git repo... I'm working on it and will be  
hopefully ready to transfer it to SVN tommorrow. The additional weekend would 
be still greatly appreciated.

Pirmin

> 
> Are you still in track to finalize those works in the following days ? Would
> adding the week-end help to have that in Beta1 ? I especially think to
> Dmitriy's work who is quite substantial, and perhaps Perl changes if there
> are still breaking change to come. Interlis specfic changes might arrive
> after Beta1 I think.
> 
> Even
> 
> > Hi,
> > 
> > Some time ago, I mentionned my proposal of issuing a first GDAL 2.0 beta
> > version for the end of this month (April 30th). Are there objections to
> > sticking with that plan ? Does someone need a bit more time to finish an
> > ongoing work ?
> > 
> > And if things go well with this beta (and potentially other beta(s)
> > needed), we could try a release candidate for end of May. One month of
> > beta phase might seem a bit short, but I'm not sure extending the beta
> > testing period more will bring significant additional feedback (and things
> > tend to slip, so better aim for a tight schedule). Thoughts ?
> > Anyone using GDAL intensively and/or interesting in 2.0 should already
> > track trunk closely ;-)
> > 
> > I can wear the hat of 2.0 release manager, but I'm happy to let it to any
> > other volunteer.
> > 
> > Best regards,
> > 
> > Even

-- 
Pirmin Kalberer - @PirminKalberer
Sourcepole - http://www.sourcepole.com

From even.rouault at spatialys.com  Thu Apr 30 15:52:49 2015
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 1 May 2015 00:52:49 +0200
Subject: [gdal-dev] Data type of DATE in SpatiaLite
In-Reply-To: <loom.20150422T082359-340@post.gmane.org>
References: <loom.20150421T223904-911@post.gmane.org>
	<201504212328.34402.even.rouault@spatialys.com>
	<loom.20150422T082359-340@post.gmane.org>
Message-ID: <201505010052.49819.even.rouault@spatialys.com>


> > On reading, the SQLite driver will currently only accept data with stored
> > as text (speaking here about the content of each cell, not the declared
> > column type!) and will try to parse them as ISO-8601. If the values are
> > stored as floating point or integer values, it will report null. It
> > might be good to implement the rule at 1.2 Date and Time Datatype of
> > https://www.sqlite.org/datatype3.html to convert from Julian days or Unix
> > time.

I've added support to recognize floating point values in a Date/DateTime column 
and convert from Julian fractional days to the expanded representation used by 
GDAL. Only on reading. If you create/update records, they will be output as 
ISO-8601 text.

> 
> I agree and I think that on the Spatialite side it might be good to make
> the spatialite tools to declare the columns which are known to contain
> dates/times as DATE/DATETIME even those types do not really mean anything
> for SQLite and huge amounts of existing and future Spatialite databases
> hold dates and times in columns which are declared as TEXT, INTEGER,
> DOUBLE, or without a type at all.
> 
> All in all, handling dates is the typeless SQLite in a reliable and
> interoperable way seems to be a bit complicated. I will think about writing
> a line or two into http://www.gdal.org/drv_sqlite.html about how GDAL plays
> with them once I understand it myself.
> 
> -Jukka-
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

