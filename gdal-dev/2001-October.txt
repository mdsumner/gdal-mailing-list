From pvg at y...  Mon Oct  1 13:53:23 2001
From: pvg at y... (Peter von Gaza)
Date: Wed Nov 21 11:49:14 2007
Subject: GDAL - header compile errors 
Message-ID: <9paaij+qaom@eGroups.com>

Howdy,

I'm new to GDAL. I'm trying to dynamically link to the GDAL dll but 
my Borland C++ Builder compiler doesn't like cpl_vsi.h. For some 
reason the compiler doesn't recognize any declarations with "FILE". 
I've tried placing stdio.h right in that header but it doesn't make 
any difference. I tried compiling under Visual C++ and everything 
works fine. So there is some compiler specific stuff that i don't 
understand. Anybody got any ideas?

Cheers,
Peter von Gaza



From warmerdam at p...  Mon Oct  1 14:04:05 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] GDAL - header compile errors
References: <9paaij+qaom@eGroups.com>
Message-ID: <3BB8B015.20602@p...>



Peter von Gaza wrote:

> Howdy,
> 
> I'm new to GDAL. I'm trying to dynamically link to the GDAL dll but
> my Borland C++ Builder compiler doesn't like cpl_vsi.h. For some
> reason the compiler doesn't recognize any declarations with "FILE".
> I've tried placing stdio.h right in that header but it doesn't make
> any difference. I tried compiling under Visual C++ and everything
> works fine. So there is some compiler specific stuff that i don't
> understand. Anybody got any ideas?


Peter,

Is it possible this is a C++ namespace issue? I don't use Borland C++,
so I know you will have lots of hassles building with it. However, it has
been done before so it is possible with enough fiddling.

Good luck,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent



From andreas.ogren at s...  Mon Oct  1 12:43:42 2001
From: andreas.ogren at s... (Andreas =?iso-8859-1?Q?=D6gren?=)
Date: Wed Nov 21 11:49:14 2007
Subject: GDALDefaultOverviews
Message-ID: <3BB89D3E.56B76127@s...>

Hi!

I'm new to GDAL and I've just started to do a test implementation to see
how it works. There is one problem though, after including
"gdal_priv.h" my VC6 sp5 compiler says that "class
'GDALDefaultOverviews' needs to have dll-interface to be used by clients
of class 'GDALDataset'" (line 232). Any ideas what might be the problem?

- Andreas


From warmerdam at p...  Tue Oct  2 09:16:27 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] GDALDefaultOverviews
References: <3BB89D3E.56B76127@s...>
Message-ID: <3BB9BE2B.8040806@p...>

Andreas ?gren wrote:

> Hi!
> 
> I'm new to GDAL and I've just started to do a test implementation to see
> how it works. There is one problem though, after including
> "gdal_priv.h" my VC6 sp5 compiler says that "class
> 'GDALDefaultOverviews' needs to have dll-interface to be used by clients
> of class 'GDALDataset'" (line 232). Any ideas what might be the problem?


Andreas,

I am not sure why this is affecting you, and not me, but the fix should be
easy. I have commited it to CVS, but basically, you just add CPL_DLL between
"class" and "GDALDefaultOverviews" in the class declaration for this class in
gdal_priv.h.

eg.

/* ******************************************************************** */
/* GDALDefaultOverviews */
/* ******************************************************************** */
class CPL_DLL GDALDefaultOverviews
{
GDALDataset *poDS;
GDALDataset *poODS;

char	*pszOvrFilename;


Let me know if this doesn't solve your problem. You will likely need to
do a clean build.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From pvg at y...  Tue Oct  2 03:15:44 2001
From: pvg at y... (Peter von Gaza)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] GDAL - header compile errors
References: <9paaij+qaom@eGroups.com> <3BB8B015.20602@p...>
Message-ID: <000801c14b12$0ea08560$55637ed8@cactusv2uablvo>


Frank wrote:

> Peter,
>
> Is it possible this is a C++ namespace issue? I don't use Borland C++,
> so I know you will have lots of hassles building with it. However, it has
> been done before so it is possible with enough fiddling.


Hi Frank,

Your probably right, it is probably a namespace issue. I've just started
exploring your GDAL and it looks very interesting and useful. I'm out of
town for a month but will be back in contact when i return.

thanx,
Peter von Gaza



From ldjohn at u...  Tue Oct  9 15:13:28 2001
From: ldjohn at u... (Lowell Johnson)
Date: Wed Nov 21 11:49:14 2007
Subject: More multiresolution and datatype questions
Message-ID: <01100915430601.02842@edclxw5>

Hello Frank,

I have been continuing my analysis of GDAL as a replacement for the
image I/O library in LAS. So far it is looking like a pretty good fit,
with multiresolution support being the biggest concern at this time. (See
below.) I have written a prototype driver set for the "old" LAS image
format and am in the process of modifying one of the existing LAS
applications to use GDAL. So now the implementation details are starting
to unearth more questions.

GDAL handles the image data type at the band level, thus allowing for
multi-datatype images. But I haven't seen an API call that allows for the
creation of multi-datatype images. For instance, GDALDriver::Create() 
passes in a GDALDataType eType parameter. For multiple datatype images, I
expected that this would be an array of size nBands. How are
multi-datatype images created?

As stated in earlier messages, we will need support for multiresolution
images (all bands sharing common corner coordinates, but pixel ground
distances varying). I am probably still misunderstanding something from
your earlier responses, but it is important that I understand the
capabilities and limitations of GDAL.

In an earlier response you said [bracketed comments added by me],
> In theory that [interpretation of GDALRasterBand XSize, YSize values
> to support multiresolution images] might be possible; however, GDAL was
> developed with the assumption that all bands on a given GDALDataset are
> of the same size and same geographic area. Any breaking of this
> assumption could have dramatic consequences.

In the Raster Band documentation, it is stated

A raster band has the following properties: 

* A width and height in pixels and lines. This is the same as that
defined for the dataset, if this is a full resolution band. 

What is the purpose of the band-level width and height if not for
multiresolution? Are they only used for overviews? Before GDAL, I haven't
encountered overviews, so I'm not familiar with their history and usage.
But overviews seem to be smaller representations (i.e., lower
resolution thumbnails?) of a full-resolution band.

I note that you earlier described your concept for subdatasets and how they
can be used to support multiresolution images. This does look like it
would be a solution, but our team would really like to have a library that
handles each band as having a distinct resolution (pixel size), with all
image bands sharing the same geographic corner coordinates. GDAL seems to
have the needed elements (Xsize, YSize per band) in place, but the design
interpretation does not support multiresolution?

I apologize for my need to have it spelled out. I'll continue with my
investigations, but any further explanations that you can give me will
hopefully shorten my analysis period so that we can get on with our
implementation process.

Thanks for you help (and, of course, your library).

Lowell
-- 
--------------------------------------------------
Lowell D. Johnson ldjohn@u...
Software Engineering
Raytheon Systems
EROS Data Center
--------------------------------------------------


From warmerdam at p...  Wed Oct 10 10:37:35 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: GeoTIFF Interleaving
Message-ID: <3BC45D2F.1010102@p...>

Folks,

FYI, I have added the "INTERLEAVE=PIXEL" creation option for GeoTIFF files
for anyone who needs to create pixel interleaved files. The default is
band interleaved but some packages do not support these files.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From tmitchell at l...  Thu Oct 11 19:25:14 2001
From: tmitchell at l... (tmitchell@l...)
Date: Wed Nov 21 11:49:14 2007
Subject: ECW
In-Reply-To: <3BB4EA81.2080509@p...>
Message-ID: <9q59oq+uu30@eGroups.com>

Hi Frank,
I'm definitely interested in any fine tuning that you do and the 
effect it would have on OpenEV. Are there bugs you are aware of at 
present with ECW? I found that when I zoom with bounding box my 
image gets flipped horizontally. Strange. Is there an openev forum 
I could use?

Tyler

--- In gdal-dev@y..., Frank Warmerdam <warmerdam@p...> wrote:
> Folks,
> 
> I have discovered why I used to have such problems with ECW 
support. It
> requires NT 4 SP5 or better. I upgraded to NT4 SP6 and suddenly I 
have no
> problems with system hangs, nor slow processing.
> 
> Incidently, my accelerated OpenGL support even works now in OpenEV!
> 
> I will be doing a bit of work in the coming days to fine tune the 
ECW
> support in GDAL. Anyone interested in it is encouraged to try it 
and let
> me know any problems they encounter.
> 
> Later,
> 
> -- 
> ---------------------------------------+----------------------------
----------
> I set the clouds in motion - turn up | Frank Warmerdam, 
warmerdam@p...
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush | Geospatial Programmer for 
Rent



From warmerdam at p...  Fri Oct 12 11:39:52 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: GDAL 1.1.5a Binary Release on NT
Message-ID: <3BC70EC8.7060409@p...>

Folks,

I have put up a binary snapshot of GDAL/OGR based on what is in CVS now.
This build includes ECW and OGDI support. Let me know if you have problems
setting it up or running. I have omitted libraries and developer support
to keep the package small.

ftp://ftp.remotesensing.org/pub/gdal/gdal-115a-ntbin.zip

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From warmerdam at p...  Fri Oct 12 17:46:06 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] More multiresolution and datatype questions
References: <01100915430601.02842@edclxw5>
Message-ID: <3BC7649E.7060508@p...>



Lowell Johnson wrote:

> GDAL handles the image data type at the band level, thus allowing for
> multi-datatype images. But I haven't seen an API call that allows for the
> creation of multi-datatype images. For instance, GDALDriver::Create()
> passes in a GDALDataType eType parameter. For multiple datatype images, I
> expected that this would be an array of size nBands. How are
> multi-datatype images created?


Lowell,

Because few formats support the creation of datasets with mixed types
I hadn't made it directly accessable from the create method. If you need
to implement a driver which can create mixed types, I would suggest passing
the per-band information as extra info in the options list.

Alternatively, we could add a new method on the GDALDataset for adding
bands, which would include the type. For very dynamic formats this might
be the preferred way of creating a file with fairly particular
characteristics.

> As stated in earlier messages, we will need support for multiresolution
> images (all bands sharing common corner coordinates, but pixel ground
> distances varying). I am probably still misunderstanding something from
> your earlier responses, but it is important that I understand the
> capabilities and limitations of GDAL.
>
> In an earlier response you said [bracketed comments added by me],
> > In theory that [interpretation of GDALRasterBand XSize, YSize values
> > to support multiresolution images] might be possible; however, GDAL was
> > developed with the assumption that all bands on a given GDALDataset are
> > of the same size and same geographic area. Any breaking of this
> > assumption could have dramatic consequences.
>
> In the Raster Band documentation, it is stated
>
> A raster band has the following properties:
>
> * A width and height in pixels and lines. This is the same as that
> defined for the dataset, if this is a full resolution band.
>
> What is the purpose of the band-level width and height if not for
> multiresolution? Are they only used for overviews? Before GDAL, I haven't
> encountered overviews, so I'm not familiar with their history and usage.
> But overviews seem to be smaller representations (i.e., lower
> resolution thumbnails?) of a full-resolution band.


The separate width/height information in the GDALRasterBand is only intended
for the support of overviews.

> I note that you earlier described your concept for subdatasets and how they
> can be used to support multiresolution images. This does look like it
> would be a solution, but our team would really like to have a library that
> handles each band as having a distinct resolution (pixel size), with all
> image bands sharing the same geographic corner coordinates. GDAL seems to
> have the needed elements (Xsize, YSize per band) in place, but the design
> interpretation does not support multiresolution?
>
> I apologize for my need to have it spelled out. I'll continue with my
> investigations, but any further explanations that you can give me will
> hopefully shorten my analysis period so that we can get on with our
> implementation process.

I have agonized over this issue for the last few days. I really hate the
idea of changing the basic data model of GDAL. When I write applications
I don't want to have to check the size of each raster band before I can
access it, which would implicitly be required if we were to relax the
restrictions on different bands having the same size.

However, what I have been thinking is that we could treat the dataset as a
whole as having the resolution of the finest of the bands. Any band at a
reduced resolution would be treated as an overview, but we would have a
base band object provided which would basically know how to resample the
true full res data out to the resolution of the dataset as a whole.

The base level GDALRasterBand could contain specialized metadata identifying
the overview which is the "true" data for applications that are savvy to
the concept of multiple resolution datasets, but more naive applications
could treat the dataset in the more conventional manner.

Does this sound OK?

It would take some extra work to implement the driver for such a
multi-resolution format, but I could provide a GDALRasterBand subclass that
is just virtual ... resampling itself from another resolution for you to
utilize.

Given that you know your different bands will always be for the same
region, just with different resolutions, I think this might be a nicer
approach that the SUBDATASETS idea.

I appologise for taking so long to reply. I really felt I needed to
take some time to digest the implications.

PS. feel free to phone me at (905) 780-0450 if you want to hash this
out more quickly than by email.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent



From neteler at i...  Mon Oct 15 09:13:22 2001
From: neteler at i... (Markus Neteler)
Date: Wed Nov 21 11:49:14 2007
Subject: GDAL and libgrass (and mapserver)
Message-ID: <20011015151322.S29694@i...>

Hi all,

currently I try to investigate if directly reading GRASS
locations from mapserver through GDAL and libgrass
(http://gdal.velocet.ca/projects/grass/)

I have compiled libgrass into GDAL obviously properly:

gdal-config --formats
gxf gtiff hfa aigrid aaigrid ceos ceos2 iso8211 sdts raw dted mem jdem
envisat elas fit gif jpeg png grass

The sample program grassinfo (comes along with libgrass), also
works:

grassinfo
Possible cell names:
shade30m
aspect10
dtm10.shade
dtm10

(this indicates, that $HOME/.grassrc5 is read properly which contains the
location/mapset information and the path to GRASS database)

But, when trying to run gdalinfo on a GRASS raster map, it fails:

gdalinfo /ssi0/ssi/neteler/grassdata5/pat/neteler/cellhd/aspect10
ERROR 4: /ssi0/ssi/neteler/grassdata5/pat/neteler/cellhd/aspect10' not
recognised as a supported file format.

GDALOpen failed - 4
/ssi0/ssi/neteler/grassdata5/pat/neteler/cellhd/aspect10' not recognised as
a supported file format.

If this would be working, I assume that Mapserver also would read this file
(hope so!). I would be glad to receive a hint what I could have done wrong
here.

Best regards

Markus Neteler


From ben at v...  Tue Oct 16 10:17:38 2001
From: ben at v... (Ben Discoe)
Date: Wed Nov 21 11:49:14 2007
Subject: Using GDAL/OGR/OGDI to read ArcInfo road networks
In-Reply-To: <3BA36EB9.2000009@p...>
Message-ID: <MGEOKJAEOFKANAFBLFGGKEEACPAA.ben@v...>


Hi Frank,

I am trying to figure out how to get some data into GDAL/OGR..

I am encountering users who use ArcInfo for road networks. I'd like to be
able to read these roads, with topology intact, into the VTP software, via
OGR.

If they export the roads, as arc Shapefiles, then the topology is lost,
since Shapefiles aren't capable of it.

So, i think i need to read the Arc coverage directly - which is quite a
number of small files, with extensions like .adf, .dir, .dat, .nit.

Looking at the OGR documentation, i believe i need OGDI. So, i downloaded
the OGDI source and built it.

Next, i presume i'll need a version of GDAL/OGR with OGDI support turned on.
You just released a binary (gdal-115a-ntbin.zip) with that feature enabled,
but it lacks the headers/import library. Do i need to build GDAL myself,
with OGDI enabled? If so, how?

Presuming that is resolved, what would the next step be? I read the OGDI
documentation, but it's not clear how to use it. The files are local; do i
really need to provide a "gltp://" path just to load a local file?

Thanks,
Ben



From ldjohn at u...  Tue Oct 16 10:27:40 2001
From: ldjohn at u... (Lowell Johnson)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] More multiresolution and datatype questions
In-Reply-To: <3BC7649E.7060508@p...>
References: <01100915430601.02842@edclxw5> <3BC7649E.7060508@p...>
Message-ID: <01101610095500.08869@edclxw5>

Hello Frank,

Thanks for the response. I wanted to drop a quick note with a few short
replies. I don't have a good picture of exactly what you are suggesting,
but it sounds like something that will most likely work fine for us.

On Fri, 12 Oct 2001, Frank Warmerdam wrote:
> Lowell Johnson wrote:
> 
> > GDAL handles the image data type at the band level, thus allowing for
> > multi-datatype images. But I haven't seen an API call that allows for the
> > creation of multi-datatype images. For instance, GDALDriver::Create()
> > passes in a GDALDataType eType parameter. For multiple datatype images, I
> > expected that this would be an array of size nBands. How are
> > multi-datatype images created?
> 
> 
> Lowell,
> 
> Because few formats support the creation of datasets with mixed types
> I hadn't made it directly accessable from the create method. If you need
> to implement a driver which can create mixed types, I would suggest passing
> the per-band information as extra info in the options list.

Yes, after sending my last message I thought about the use of the options
list. That does seem like an acceptable solution at this point.

> Alternatively, we could add a new method on the GDALDataset for adding
> bands, which would include the type. For very dynamic formats this might
> be the preferred way of creating a file with fairly particular
> characteristics.

I also think that the ability to incrementally build an image by adding
individual bands at any time may come in handy in some situations.

If the datatype passed into the Create() function was a pointer, it could
(optionally) be interpretted as an array (of size nBands) of data types. 
But that would mean a change to some of the core GDAL and possibly end
applications, which (understandably) may not be a popular solution.

[snip]
> > I note that you earlier described your concept for subdatasets and how they
> > can be used to support multiresolution images. This does look like it
> > would be a solution, but our team would really like to have a library that
> > handles each band as having a distinct resolution (pixel size), with all
> > image bands sharing the same geographic corner coordinates. GDAL seems to
> > have the needed elements (Xsize, YSize per band) in place, but the design
> > interpretation does not support multiresolution?
> >
> > I apologize for my need to have it spelled out. I'll continue with my
> > investigations, but any further explanations that you can give me will
> > hopefully shorten my analysis period so that we can get on with our
> > implementation process.
> 
> I have agonized over this issue for the last few days. I really hate the
> idea of changing the basic data model of GDAL. When I write applications
> I don't want to have to check the size of each raster band before I can
> access it, which would implicitly be required if we were to relax the
> restrictions on different bands having the same size.
> 
> However, what I have been thinking is that we could treat the dataset as a
> whole as having the resolution of the finest of the bands. Any band at a
> reduced resolution would be treated as an overview, but we would have a
> base band object provided which would basically know how to resample the
> true full res data out to the resolution of the dataset as a whole.
> 
> The base level GDALRasterBand could contain specialized metadata identifying
> the overview which is the "true" data for applications that are savvy to
> the concept of multiple resolution datasets, but more naive applications
> could treat the dataset in the more conventional manner.
> 
> Does this sound OK?

I'm not exactly sure what you have in mind regarding "the base level
GDALRasterBAnd" and its specialized metadata, but this does sound like the
kind of solution I was hoping for. Since the GDALDataset object contains
the RasterXSize, RasterYSize, I was thinking that these values would define
a "base band" resolution.

If you could flesh out a few more of the details of this idea to help my
understanding, that would be greatly appreciated.

> It would take some extra work to implement the driver for such a
> multi-resolution format, but I could provide a GDALRasterBand subclass that
> is just virtual ... resampling itself from another resolution for you to
> utilize.
> 
> Given that you know your different bands will always be for the same
> region, just with different resolutions, I think this might be a nicer
> approach that the SUBDATASETS idea.

Yes, that sounds much more straightforward for our situation. I do like
the subdataset capability for its flexibility, but for this particular
issue (simple multiresolution) it seems a bit awkward.

> I appologise for taking so long to reply. I really felt I needed to
> take some time to digest the implications.

No apology necessary. I appreciate the thoughtful response and concern
given to our issues.

> PS. feel free to phone me at (905) 780-0450 if you want to hash this
> out more quickly than by email.

Thank you. Once I have more detailed comments and questions, I may indeed
give you a call for discussion.

Thanks again for your help. Talk to you later.


Lowell
-- 
--------------------------------------------------
Lowell D. Johnson ldjohn@u...
Software Engineering
Raytheon Systems
EROS Data Center
47914 252nd Street, Mundt Federal Bldg
Sioux Falls, SD 57198
--------------------------------------------------


From warmerdam at p...  Tue Oct 16 11:11:52 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] Using GDAL/OGR/OGDI to read ArcInfo road networks
References: <MGEOKJAEOFKANAFBLFGGKEEACPAA.ben@v...>
Message-ID: <3BCC4E38.9@p...>

Ben Discoe wrote:

> 
> Hi Frank,
> 
> I am trying to figure out how to get some data into GDAL/OGR..
> 
> I am encountering users who use ArcInfo for road networks. I'd like to be
> able to read these roads, with topology intact, into the VTP software, via
> OGR.
> 
> If they export the roads, as arc Shapefiles, then the topology is lost,
> since Shapefiles aren't capable of it.
> 
> So, i think i need to read the Arc coverage directly - which is quite a
> number of small files, with extensions like .adf, .dir, .dat, .nit.
> 
> Looking at the OGR documentation, i believe i need OGDI. So, i downloaded
> the OGDI source and built it.
> 
> Next, i presume i'll need a version of GDAL/OGR with OGDI support turned on.
> You just released a binary (gdal-115a-ntbin.zip) with that feature enabled,
> but it lacks the headers/import library. Do i need to build GDAL myself,
> with OGDI enabled? If so, how?
> 
> Presuming that is resolved, what would the next step be? I read the OGDI
> documentation, but it's not clear how to use it. The files are local; do i
> really need to provide a "gltp://" path just to load a local file?


Ben,

A few issues:

o The Arc/Info binary translator in OGDI is a commercial adapter from
Global Geomatics - it isn't free. You might want to ensure the pricing
would be acceptable before going too far.

o I can provide import libraries and include files for the last release
quite easily if you want. I ommitted them to trim the download size.

o To build GDAL with OGDI support, you should just need to uncomment and
correct the definition of the three OGDI macros in gdal/nmake.opt.
However, you also need an OGDI distribution built from source to build
and link against.

o Finally, if you did read arc/info vectors through OGDI and/or OGR you
are only going to get the topological connections as an attribute of
some kind. Neither OGR nor OGDI inherently support topological vectors.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From warmerdam at p...  Wed Oct 17 17:48:01 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: SetGCPs
Message-ID: <3BCDFC91.9080700@p...>

Folks,

I have added the virtual method SetGCPs() to the GDALDataset. I am warning
because anyone who updates from the CVS source should do a clean build of
GDAL after getting this change.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From warmerdam at p...  Thu Oct 18 21:36:45 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] More multiresolution and datatype questions
References: <01100915430601.02842@edclxw5> <3BC7649E.7060508@p...> <01101610095500.08869@edclxw5>
Message-ID: <3BCF83AD.3040808@p...>

Lowell Johnson wrote:

> > Alternatively, we could add a new method on the GDALDataset for adding
> > bands, which would include the type. For very dynamic formats this might
> > be the preferred way of creating a file with fairly particular
> > characteristics.
> 
> I also think that the ability to incrementally build an image by adding
> individual bands at any time may come in handy in some situations.
> 
> If the datatype passed into the Create() function was a pointer, it could
> (optionally) be interpretted as an array (of size nBands) of data types.
> But that would mean a change to some of the core GDAL and possibly end
> applications, which (understandably) may not be a popular solution.


Lowell,

As you suspect, i am not keen on changing the Create() arguments. Lets plan on
adding a GDALDataset method for adding a band to an existing dataset.



> I'm not exactly sure what you have in mind regarding "the base level
> GDALRasterBAnd" and its specialized metadata, but this does sound like the
> kind of solution I was hoping for. Since the GDALDataset object contains
> the RasterXSize, RasterYSize, I was thinking that these values would define
> a "base band" resolution.
> 
> If you could flesh out a few more of the details of this idea to help my
> understanding, that would be greatly appreciated.


OK, I will try to spell this out a bit. Imagine one of your new multi-resolution
files (what format will they be in?) call abc.dat with two bands, one that is
1000x1000 and a second that is 500x500. Assume we have no "real" overviews
built.

To applications this file would look like a two band dataset that is 1000x1000.
The first band really is 1000x1000 and has no overviews as far as the application
can tell.

The second band appears to be 1000x1000 but also has a 500x500 overview. The
GDALRasterBand also has some particular piece of metadata which indicates that
the 500x500 data is the "real" raw data. Perhaps a "REAL_RAW_DATA=OVERVIEW_0"
or something like that. If an application accesses the second band normally
the low res data will be automatically resampled up to 1000x1000.

So, generic GDAL applications will just see this as a two band 1000x1000 dataset.
"Multiresolution aware" dataset can check the metadata, and access the overview
directly if they want the "real" data at it's native resolution.

I don't know if you have looked at how the formats are implemented or not.
Normally we would implement a format specific class derived from GDALDataset
for representing datasets of the format, and a format specific class derived
from GDALRasterBand for representing bands.

For our multiresolution format we might implement MultiResDataset, and
MultiResRasterBand for these roles. But we also need a "pseudo-band"
implementation that acts as the 1000x1000 second band that gets automatically
resampled. Lets call this "PseudoRasterBand" and when instantiated it would
basically be given a reference raster band that it would get data from in
order to satisfy application requests. This PseudoRasterBand could
potentially be used by other multiresolution formats than yours if it is
done right.

So when we open our hypothetical multiresolution dataset we would instantiate
a MultiResDataset with the first band being a MultiResRasterBand, and the
second band being a PseudoRasterBand. The second band would have an overview
band which is the 500x500 MultiResRasterBand that "feeds" the PseudoRasterBand.

I would be willing to implement the PseudoRasterBand for you if you would like.

Best regards,


-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From ldjohn at u...  Fri Oct 19 10:20:03 2001
From: ldjohn at u... (ldjohn@u...)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] More multiresolution and datatype questions
In-Reply-To: <3BCF83AD.3040808@p...>
Message-ID: <Pine.LNX.4.21.0110190750580.21579-100000@l...>

On Thu, 18 Oct 2001, Frank Warmerdam wrote:

> Lowell Johnson wrote:
> 
> > > Alternatively, we could add a new method on the GDALDataset for adding
> > > bands, which would include the type. For very dynamic formats this might
> > > be the preferred way of creating a file with fairly particular
> > > characteristics.
> > 
> > I also think that the ability to incrementally build an image by adding
> > individual bands at any time may come in handy in some situations.
> > 
> > If the datatype passed into the Create() function was a pointer, it could
> > (optionally) be interpretted as an array (of size nBands) of data types.
> > But that would mean a change to some of the core GDAL and possibly end
> > applications, which (understandably) may not be a popular solution.
> 
> 
> Lowell,
> 
> As you suspect, i am not keen on changing the Create() arguments. Lets
> plan on adding a GDALDataset method for adding a band to an existing
> dataset.

Hello Frank,

OK, adding bands sounds good to me. I'm also investigating the use of the
Create() control parameters for handling multiple data types as was
mentioned previously.

> > I'm not exactly sure what you have in mind regarding "the base level
> > GDALRasterBAnd" and its specialized metadata, but this does sound like the
> > kind of solution I was hoping for. Since the GDALDataset object contains
> > the RasterXSize, RasterYSize, I was thinking that these values would define
> > a "base band" resolution.
> > 
> > If you could flesh out a few more of the details of this idea to help my
> > understanding, that would be greatly appreciated.
> 
> 
> OK, I will try to spell this out a bit. Imagine one of your new
> multi-resolution files (what format will they be in?) call abc.dat with

We are creating a new LAS data format that will handle multiresolution,
multi-datatype images. We are doing this because we have to support
Landsat 7, ASTER, and MODIS formats, all of which are multiresolution
(in addition, MODIS is multi-datatype) formats. With our existing LAS
data format, we have to break multires images into multiple images, one
per resolution/datatype. This makes the book-keeping rather messy.

> two bands, one that is 1000x1000 and a second that is 500x500. Assume
> we have no "real" overviews built.
> 
> To applications this file would look like a two band dataset that is
> 1000x1000. The first band really is 1000x1000 and has no overviews as
> far as the application can tell.
> 
> The second band appears to be 1000x1000 but also has a 500x500 overview. The 
> GDALRasterBand also has some particular piece of metadata which indicates that
> the 500x500 data is the "real" raw data. Perhaps a "REAL_RAW_DATA=OVERVIEW_0"
> or something like that. If an application accesses the second band normally
> the low res data will be automatically resampled up to 1000x1000.
> 
> So, generic GDAL applications will just see this as a two band 1000x1000
> dataset. "Multiresolution aware" dataset can check the metadata, and
> access the overview directly if they want the "real" data at it's native
> resolution.

Sounds good. If actual overviews were built for the second band, I assume
they would be subsampled from the 500x500 data. So we would not expect
any additional second-band overviews to have resolutions over 500x500 (but
they would be legal). Is that true? Say we added a 250x250 overview. An
application would see a 1000x1000 band with two overviews. For a
MultiResDataset-aware application, would only one overview (250x250) be
reported? I don't know enough about GDAL overview usage to know if this
even makes sense.

> I don't know if you have looked at how the formats are implemented or not.
> Normally we would implement a format specific class derived from GDALDataset
> for representing datasets of the format, and a format specific class derived
> from GDALRasterBand for representing bands.

Yes, I have been prototyping the existing LAS data format into a
LASDataset class derived from the RawDataset class.

> For our multiresolution format we might implement MultiResDataset, and
> MultiResRasterBand for these roles. But we also need a "pseudo-band"
> implementation that acts as the 1000x1000 second band that gets automatically
> resampled. Lets call this "PseudoRasterBand" and when instantiated it would
> basically be given a reference raster band that it would get data from in
> order to satisfy application requests. This PseudoRasterBand could
> potentially be used by other multiresolution formats than yours if it is
> done right.
> 
> So when we open our hypothetical multiresolution dataset we would instantiate
> a MultiResDataset with the first band being a MultiResRasterBand, and the
> second band being a PseudoRasterBand. The second band would have an overview
> band which is the 500x500 MultiResRasterBand that "feeds" the
> PseudoRasterBand.

OK, sounds good.

> I would be willing to implement the PseudoRasterBand for you if you
> would like.

That would be much appreciated. Thank you.

Over the last couple of weeks, our investigations combined with your 
helpful responses have pretty much sold us on using GDAL for our new
image I/O library. So, barring any unforeseen obstacles, I expect that we
will be moving forward with plans to incorporate GDAL into LAS. In
return, we will be releasing any and all formats that we add to GDAL.


Lowell
-- 
--------------------------------------------------
Lowell D. Johnson ldjohn@u...
Software Engineering
Raytheon Systems
EROS Data Center
47914 252nd Street, Mundt Federal Bldg
Sioux Falls, SD 57198
--------------------------------------------------




From nakiya123 at y...  Tue Oct 23 15:43:56 2001
From: nakiya123 at y... (nakiya123@y...)
Date: Wed Nov 21 11:49:14 2007
Subject: trying to get lat/lon out of sdts dem
Message-ID: <9r4h9s+o6it@eGroups.com>

Howdy,

I am trying to extract the lat/lon coordinates out of sdts dem's. I
have looked into and tried to used the OGRSpatialReference class but
have not seen any clear way to do this. How is this done?

Thanks in advance



From warmerdam at p...  Tue Oct 23 16:29:06 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] trying to get lat/lon out of sdts dem
References: <9r4h9s+o6it@eGroups.com>
Message-ID: <3BD5D312.8020305@p...>

nakiya123@y... wrote:

> Howdy,
> 
> I am trying to extract the lat/lon coordinates out of sdts dem's. I
> have looked into and tried to used the OGRSpatialReference class but
> have not seen any clear way to do this. How is this done?
> 
> Thanks in advance


Hi,

Are the DEMs in lat/long already, or UTM? If they are in lat/long you
can just ignore the OGRSpatialReference. Determine the georeferenced
coordinate of the top left corner of a pixel as follows:


dfGeorefX = padfGeoTransform[0] + padfGeoTransform[1] * nPixel
+ padfGeoTransform[2] * nLine;
dfGeorefY = padfGeoTransform[3] + padfGeoTransform[4] * nPixel;
+ padfGeoTransform[5] * nLine;

If the DEM is in UTM, the above will give you the corner in UTM coordinates.
You can then translate this to LatLong using something like the following
to create a reprojector:

#include "gdal_priv.h"
#include "ogr_spatialref.h"

OGRSpatialReference *poUTM = new OGRSpatialReference();
const char *pszUTM_WKT = poDS->GetProjectionRef();

poUTM->importFromWkt( (char **) &pszUTM_WKT );

OGRSpatialReference *poLL = poUTM->CloneGeogCS();

OGRCoordinateTransform *poTransform;

poTransform = OGRCreateCoordinateTransformation( poUTM, poLL );


Then invoke it on points like this:


poTransform->Transform( 1, &dfGeorefX, &dfGeoref );

I hope this helps. Let me know if you need more details.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent




From nakiya123 at y...  Tue Oct 23 17:51:02 2001
From: nakiya123 at y... (nakiya123@y...)
Date: Wed Nov 21 11:49:14 2007
Subject: trying to get lat/lon out of sdts dem
In-Reply-To: <3BD5D312.8020305@p...>
Message-ID: <9r4oo6+icbo@eGroups.com>

--- In gdal-dev@y..., Frank Warmerdam <warmerdam@p...> wrote:
> nakiya123@y... wrote:
> 
> > Howdy,
> > 
> > I am trying to extract the lat/lon coordinates out of sdts dem's. I
> > have looked into and tried to used the OGRSpatialReference class but
> > have not seen any clear way to do this. How is this done?
> > 
> > Thanks in advance
> 
> 
> Hi,
> 
> Are the DEMs in lat/long already, or UTM? If they are in lat/long you
> can just ignore the OGRSpatialReference. Determine the georeferenced
> coordinate of the top left corner of a pixel as follows:
> 
> 
> dfGeorefX = padfGeoTransform[0] + padfGeoTransform[1] * nPixel
> + padfGeoTransform[2] * nLine;
> dfGeorefY = padfGeoTransform[3] + padfGeoTransform[4] * nPixel;
> + padfGeoTransform[5] * nLine;
> 
> If the DEM is in UTM, the above will give you the corner in UTM
coordinates.
> You can then translate this to LatLong using something like the
following
> to create a reprojector:
> 
> #include "gdal_priv.h"
> #include "ogr_spatialref.h"
> 
> OGRSpatialReference *poUTM = new OGRSpatialReference();
> const char *pszUTM_WKT = poDS->GetProjectionRef();
> 
> poUTM->importFromWkt( (char **) &pszUTM_WKT );
> 
> OGRSpatialReference *poLL = poUTM->CloneGeogCS();
> 
> OGRCoordinateTransform *poTransform;
> 
> poTransform = OGRCreateCoordinateTransformation( poUTM, poLL );
> 
> 
> Then invoke it on points like this:
> 
> 
> poTransform->Transform( 1, &dfGeorefX, &dfGeoref );
> 
> I hope this helps. Let me know if you need more details.
> 
> Best regards,
> 
> --

!THANKS FOR THE REPLY!

Just a quick note, poTransform->Transform should be
poTransform->Transformation I think. That worked for me.

I had already tried this and decided I was doing something wrong
because the values of the dfGeoref's. 
i.e. I am using a USGS SDTS DEM in UTM format and after displaying the
results of this code I get:

dfGeorefX = -115.489
dfGeorefY = 0

my GetProjectRef is:
PROJCS["UTM Zone 12, Northern
Hemisphere",GEOGCS["NAD27",DATUM["North_American_Datum_1927",SPHEROID["Clarke
1866",6378206.4,294.978698213898,AUTHORITY["EPSG",7008]],TOWGS84[-3,142,183,0,0,0,0],AUTHORITY["EPSG",6267]],PRIMEM["Greenwich",0,AUTHORITY["EPSG",8901]],UNIT["DMSH",0.0174532925199433,AUTHORITY["EPSG",9108]],AXIS["Lat","NORTH"],AXIS["Long","EAST"],AUTHORITY["EPSG",4267]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-111],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0]]

and the actual lat/lon of the image is in Arizona with a lat/lon of
aprox 33.xxx/111.xxx.

I'm not clear as to what the results of the Transform function are?
I thought they may be the bottom left corner of the UTM Zone but
that's not very useful unless I'm missing something?

Here's the code I used.


double dfGeorefX=0.0, dfGeorefY=0.0;

OGRSpatialReference *poUTM = new OGRSpatialReference();
const char *pszUTM_WKT = poDataset->GetProjectionRef();

cout << endl << pszUTM_WKT << endl << endl;

poUTM->importFromWkt((char**) &pszUTM_WKT);
OGRSpatialReference *poLL = poUTM->CloneGeogCS();

OGRCoordinateTransformation *poTransform;

poTransform = OGRCreateCoordinateTransformation(poUTM, poLL);

poTransform->Transform(1, &dfGeorefX, &dfGeorefY);//dfGeorefY instead

cout << endl << dfGeorefX << " " << dfGeorefY << endl << endl;

thanks again!!!
---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush | Geospatial Programmer for Rent



From warmerdam at p...  Tue Oct 23 18:05:30 2001
From: warmerdam at p... (Frank Warmerdam)
Date: Wed Nov 21 11:49:14 2007
Subject: [gdal-dev] Re: trying to get lat/lon out of sdts dem
References: <9r4oo6+icbo@eGroups.com>
Message-ID: <3BD5E9AA.2080805@p...>



nakiya123@y... wrote:

> double dfGeorefX=0.0, dfGeorefY=0.0;


I think the above line is your problem. You are starting with
a dfGeorefX and dfGeorefY of (0,0), which is the bottom left corner
of the UTM zone. You need to set the initial dfGeorefX and dfGeorefY
values based on the GeoTransform as I showed in my email. Note that
the OGRCoordinateTransformation is only used to transform a correct
UTM coordinate to lat/long. It doesn't know anything about how to
determine the original utm coordinates.

Best regards,


-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent



From nakiya123 at y...  Tue Oct 23 18:01:39 2001
From: nakiya123 at y... (nakiya123@y...)
Date: Wed Nov 21 11:49:14 2007
Subject: trying to get lat/lon out of sdts dem
In-Reply-To: <3BD5D312.8020305@p...>
Message-ID: <9r4pc3+s5ub@eGroups.com>

--- In gdal-dev@y..., Frank Warmerdam <warmerdam@p...> wrote:
> nakiya123@y... wrote:
> 
> > Howdy,
> > 
> > I am trying to extract the lat/lon coordinates out of sdts dem's. I
> > have looked into and tried to used the OGRSpatialReference class but
> > have not seen any clear way to do this. How is this done?
> > 
> > Thanks in advance
> 
> 
> Hi,
> 
> Are the DEMs in lat/long already, or UTM? If they are in lat/long you
> can just ignore the OGRSpatialReference. Determine the georeferenced
> coordinate of the top left corner of a pixel as follows:
> 
> 
> dfGeorefX = padfGeoTransform[0] + padfGeoTransform[1] * nPixel
> + padfGeoTransform[2] * nLine;
> dfGeorefY = padfGeoTransform[3] + padfGeoTransform[4] * nPixel;
> + padfGeoTransform[5] * nLine;
> 
> If the DEM is in UTM, the above will give you the corner in UTM
coordinates.
> You can then translate this to LatLong using something like the
following
> to create a reprojector:
> 
> #include "gdal_priv.h"
> #include "ogr_spatialref.h"
> 
> OGRSpatialReference *poUTM = new OGRSpatialReference();
> const char *pszUTM_WKT = poDS->GetProjectionRef();
> 
> poUTM->importFromWkt( (char **) &pszUTM_WKT );
> 
> OGRSpatialReference *poLL = poUTM->CloneGeogCS();
> 
> OGRCoordinateTransform *poTransform;
> 
> poTransform = OGRCreateCoordinateTransformation( poUTM, poLL );
> 
> 
> Then invoke it on points like this:
> 
> 
> poTransform->Transform( 1, &dfGeorefX, &dfGeoref );
> 
> I hope this helps. Let me know if you need more details.
> 
> Best regards,
> 
> --

!THANKS FOR THE REPLY!

Just a quick note, poTransform->Transform should be
poTransform->Transformation I think. That worked for me.

I had already tried this and decided I was doing something wrong
because the values of the dfGeoref's. 
i.e. I am using a USGS SDTS DEM in UTM format and after displaying the
results of this code I get:

dfGeorefX = -115.489
dfGeorefY = 0

my GetProjectRef is:
PROJCS["UTM Zone 12, Northern
Hemisphere",GEOGCS["NAD27",DATUM["North_American_Datum_1927",SPHEROID["Clarke
1866",6378206.4,294.978698213898,AUTHORITY["EPSG",7008]],TOWGS84[-3,142,183,0,0,0,0],AUTHORITY["EPSG",6267]],PRIMEM["Greenwich",0,AUTHORITY["EPSG",8901]],UNIT["DMSH",0.0174532925199433,AUTHORITY["EPSG",9108]],AXIS["Lat","NORTH"],AXIS["Long","EAST"],AUTHORITY["EPSG",4267]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-111],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0]]

and the actual lat/lon of the image is in Arizona with a lat/lon of
aprox 33.xxx/111.xxx.

I'm not clear as to what the results of the Transform function are?
I thought they may be the bottom left corner of the UTM Zone but
that's not very useful unless I'm missing something?

Here's the code I used.


double dfGeorefX=0.0, dfGeorefY=0.0;

OGRSpatialReference *poUTM = new OGRSpatialReference();
const char *pszUTM_WKT = poDataset->GetProjectionRef();

cout << endl << pszUTM_WKT << endl << endl;

poUTM->importFromWkt((char**) &pszUTM_WKT);
OGRSpatialReference *poLL = poUTM->CloneGeogCS();

OGRCoordinateTransformation *poTransform;

poTransform = OGRCreateCoordinateTransformation(poUTM, poLL);

poTransform->Transform(1, &dfGeorefX, &dfGeorefY);//dfGeorefY instead

cout << endl << dfGeorefX << " " << dfGeorefY << endl << endl;

thanks again!!!
---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush | Geospatial Programmer for Rent



From nakiya123 at y...  Tue Oct 23 18:10:32 2001
From: nakiya123 at y... (nakiya123@y...)
Date: Wed Nov 21 11:49:14 2007
Subject: trying to get lat/lon out of sdts dem
In-Reply-To: <3BD5E9AA.2080805@p...>
Message-ID: <9r4pso+p1dg@eGroups.com>

--- In gdal-dev@y..., Frank Warmerdam <warmerdam@p...> wrote:
> 
> 
> nakiya123@y... wrote:
> 
> > double dfGeorefX=0.0, dfGeorefY=0.0;
> 
> 
> I think the above line is your problem. You are starting with
> a dfGeorefX and dfGeorefY of (0,0), which is the bottom left corner
> of the UTM zone. You need to set the initial dfGeorefX and dfGeorefY
> values based on the GeoTransform as I showed in my email. Note that
> the OGRCoordinateTransformation is only used to transform a correct
> UTM coordinate to lat/long. It doesn't know anything about how to
> determine the original utm coordinates.
> 
> Best regards,
> 
> 
> --

Sorry bout that double posting everyone.

Thanks, that was it. 
>
---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@p...
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush | Geospatial Programmer for Rent



