From warmerda at h...  Wed Dec  2 15:27:52 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: Convenience Functions
References: <36658F59.5CD23C0D@h...> <36659E32.8DFDFE2F@v...>
Message-ID: <3665A2C8.F03883EB@h...>

Daniel Morissette wrote:
> In the meantime, I attached my current cpl.h header and the strlist.c
> source so that you can have a first look... as you'll see, the only
> convenience stuff I have for now is error handling and stringlist
> manipulation, a Tokenize() function (that does not honour "" yet), etc.
> 
> What did we decide about error handling? We should probably make a
> decision about that today. One possibility would be to add an error
> class (LOG, WARNING, FATAL, etc.) to my current implementation... did
> you already have something I could use for error handling?

Daniel,

I don't know that we have really decided on an error handling approach. 
I think we agree on adding an error class (none, log, warning, failure 
and fatal) come to mind. As for error identifiers, there is still the
string vs. number issue.

If we went with numbers, how would we maintain an error number registry?

Ah, heck, lets go with numbers so we can get on with stuff that matters.

BTW, the difference between error classes of failure, and fatal is that
failure indicates something failed, but that the error function won't 
interrupt control (for instance an open failure), while fatal indicates
that the error reporting mechanism will interrupt processing. The
error function will never return. It may exit(), or abort(), or do a
longjmp(), but the caller need not worry. This is useful for the
safe memory allocator for instance.

> Should we give a common prefix to all the stringlist function names,
> like SL or something else?

I had been prefixing everything I considered a convenience function with
CPL, including a new ``safe malloc'' API and an re-implementation of
DKReadLine(). I supposed for any subgroups we want to be able to 
carve off, having a prefix to group them would be a good idea. SL for
all functions related to string lists sounds good to me. 

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Wed Dec  2 23:54:16 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: Convenience Functions
References: <36658F59.5CD23C0D@h...> <36659E32.8DFDFE2F@v...> <3665A2C8.F03883EB@h...> <3665C000.D064B449@v...>
Message-ID: <36661978.866D5F1B@h...>

Daniel Morissette wrote:
> I made sure my CPL files compile here and updated the copyright
> headers, etc. Now, I think I'll let you integrate them where they fit
> in your source tree, and once it's done I'll download the complete CPL
> from your system and work from there. This means that your system
> becomes the master CPL source tree (that's probably simpler this way?),
> and also implies that we'll need to define how I can access your system
> to download updates and checkin stuff etc.

Daniel,

I have incorporated your code, and renamed lots of stuff (again) for the
low level. For access I will organized for CVS checkouts outside my 
machine. For now you might want to login in look in ~warmerda/gdal/port. 
You have a danmo account, though if you don't know the password I can
reset it. 

> I haven't renamed the stringlist functions yet, because I'll have to
> edit the file anyways to make use of your safe malloc and other stuff.

I have renamed them to CSL (Common StringList), and changed to use CPL
malloc functions, and VSI file access functions. I have not tested at
all yet, but they compile. 

> As for the error handling, I haven't added an error class to my error
> stuff because I was not sure if you would work from my implementation or
> from yours... if you want me to take care of modifying my error handling
> stuff then let me know.

I have added it, though now the only error class that has an effect is
the CE_Fatal class. It is also not stored. 

> Finally, you'll probably notice that I don't use the fancy PCI comments
> any more, I use a simplified version of these comments instead... there
> are 2 reasons to that: CPI comments are hard to maintain outside of
> Emacs (inside MS Dev Studio for instance) and also I wanted to avoid
> having any dependency to PCI tools (the PCI*.el files)... I hope it
> won't be too hard to keep our code clean because we use different

I think it shouldn't be a big deal at long as we agree on the relative
precidence of /****/ over /*===*/ over /*---*/. I have also started using
inline comments where block comments seem inappropriate. I still do use
PciEdit.el (must rename!) myself. 

> Also, for now we both use the same coding conventions (the PCI one)... I
> guess if outsiders start contributing to our libs, we'll have to
> document that coding style in order to keep the code clean.

Correct - we will have to establish which aspects matter, and document
them. I am inclined to take a more relaxed view on code style given that
everyone is a volunteer. Eventually as outsiders are contributing it will
be more difficult to enforce a particular style. I would rather stress
issues of portability, error handling, and so forth over internal code
style. 

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Thu Dec  3 14:29:35 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] CVS Access
Message-ID: <3666E69F.B9ACEABE@h...>

Folks,

I have placed all the adapted low level code into CVS, and I would be 
happy to provide accounts so people can extract it from CVS. In particular
you should be able to set CVSROOT to :pserver:warmerda@2...:/usr/cvsroot
and do a ``cvs checkout gdal'' to get the GDAL tree, of particular note
being the gdal/port directory.

A Windows CVS command line client can be fetched from:
http://download.cyclic.com/pub/cvs-1.10/windows/cvs-1.10-win.zip

Unix buildable source also exists up a directory or two from that. 

Contact me if you have problems.

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From danmo at v...  Thu Dec  3 16:16:06 1998
From: danmo at v... (Daniel Morissette)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: CVS Access
References: <3666E69F.B9ACEABE@h...>
Message-ID: <3666FF96.AD0F1E9E@v...>

Frank Warmerdam wrote:
> 
> Folks,
> 
> I have placed all the adapted low level code into CVS, and I would be
> happy to provide accounts so people can extract it from CVS. In particular
> you should be able to set CVSROOT to :pserver:warmerda@2...:/usr/cvsroot
> and do a ``cvs checkout gdal'' to get the GDAL tree, of particular note
> being the gdal/port directory.
> 
> A Windows CVS command line client can be fetched from:
> http://download.cyclic.com/pub/cvs-1.10/windows/cvs-1.10-win.zip
> 

Arrrrrrggghhhhhh... I hate Windows!!!!!! (BTW, I ordered a set of Linux
CDs a couple of days ago but in the meantime I'm still stuck with
Win'95...)

I installed the Windows CVS client, and when I try to checkout the GDAL
tree I get:

Unknown host 24.65.38.156

I am able to ping this address from the same DOS prompt window, so I
assume that my networking stuff should be OK... as far as stuff can be
OK under Win'95...

Any suggestions are welcome...


P.S. Did you ever read that one?
With Win 3.1 we were at the edge of the precipice,
With Win'95, we made a big step forward!
-- 
------------------------------------------------------------
Daniel Morissette danmo@v...
http://pages.infinit.net/danmo/
------------------------------------------------------------
Don't put for tomorrow what you can do today, because if 
you enjoy it today you can do it again tomorrow.

------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Thu Dec  3 16:46:59 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: CVS Access
References: <3666E69F.B9ACEABE@h...> <3666FF96.AD0F1E9E@v...>
Message-ID: <366706D3.F1F15DDF@h...>

Daniel Morissette wrote:
> I installed the Windows CVS client, and when I try to checkout the GDAL
> tree I get:
> 
> Unknown host 24.65.38.156

Daniel,

Try the hostname h24-65-38-156.mt.wave.shaw.ca. I presume your
inability to use the ip number directly with CVS is really a problem
with the TCP/IP support libraries used by CVS, not generally a windows
problem. 

> Any suggestions are welcome...
> 
> P.S. Did you ever read that one?
> With Win 3.1 we were at the edge of the precipice,
> With Win'95, we made a big step forward!

That's cruel.

My god ... I didn't mean to defend windows!

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From danmo at v...  Thu Dec  3 21:45:08 1998
From: danmo at v... (Daniel Morissette)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: CVS Access
References: <3666E69F.B9ACEABE@h...> <3666FF96.AD0F1E9E@v...> <366706D3.F1F15DDF@h...>
Message-ID: <36674CB4.7E7C83EB@v...>

Frank Warmerdam wrote:
> 
> Try the hostname h24-65-38-156.mt.wave.shaw.ca. I presume your
> inability to use the ip number directly with CVS is really a problem
> with the TCP/IP support libraries used by CVS, not generally a windows
> problem.
> 

Frank,

It did work with the new hostname, but then I had to use 'cvs login'
before the checkout and could not login with user 'warmerda' (of
course!) so I used my personal account on your system and was able to
checkout part of the source tree but not all of it. It failed to create
a lock file at some point, probably because my personal account did not
have permissions to write to that directory. FYI, here is what I got: 

D:\proj\gdal\src>cvs checkout gdal
cvs server: Updating gdal
cvs server: Updating gdal/apps
U gdal/apps/GNUmakefile
U gdal/apps/gdalinfo.c
cvs server: Updating gdal/core
U gdal/core/GNUmakefile
U gdal/core/gdal.h
U gdal/core/gdal_priv.h
U gdal/core/gdaldataset.cpp
U gdal/core/gdaldriver.cpp
U gdal/core/gdaldrivermanager.cpp
U gdal/core/gdalopen.cpp
U gdal/core/gdalrasterband.cpp
cvs server: Updating gdal/frmts
cvs server: failed to create lock directory in repository
`/usr/cvsroot/gdal/frmts': Permission denied
cvs server: failed to obtain dir lock in repository
`/usr/cvsroot/gdal/frmts'
cvs [server aborted]: read lock failed - giving up


You'll probably have to create a kind of anonymous account to give
people read-only access to the source tree, or otherwise you'll need to
create accounts for everyone that needs access. I saw that there is a
big section about the authentication stuff in the CVS docs... you
probably already know more than me about that.

> > P.S. Did you ever read that one?
> > With Win 3.1 we were at the edge of the precipice,
> > With Win'95, we made a big step forward!
> 
> That's cruel.
> 
> My god ... I didn't mean to defend windows!
> 

BTW, did you know that the name "Microsoft" was actually an acronym? 
It stands for:

Most Intelligent Customers Realize Our Software Only (for)
Fools (&) Teenagers.

-- 
------------------------------------------------------------
Daniel Morissette danmo@v...
http://pages.infinit.net/danmo/
------------------------------------------------------------
Don't put for tomorrow what you can do today, because if 
you enjoy it today you can do it again tomorrow.

------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Thu Dec  3 22:07:10 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: CVS Access
References: <3666E69F.B9ACEABE@h...> <3666FF96.AD0F1E9E@v...> <366706D3.F1F15DDF@h...> <36674CB4.7E7C83EB@v...>
Message-ID: <366751DE.947B0F13@h...>

Daniel Morissette wrote:
> It did work with the new hostname, but then I had to use 'cvs login'
> before the checkout and could not login with user 'warmerda' (of
> course!) so I used my personal account on your system and was able to
> checkout part of the source tree but not all of it. It failed to create
> a lock file at some point, probably because my personal account did not
> have permissions to write to that directory. FYI, here is what I got:
> 
> D:\proj\gdal\src>cvs checkout gdal
> cvs server: Updating gdal
> cvs server: Updating gdal/apps
> U gdal/apps/GNUmakefile
> U gdal/apps/gdalinfo.c
> cvs server: Updating gdal/core
> U gdal/core/GNUmakefile
> U gdal/core/gdal.h
> U gdal/core/gdal_priv.h
> U gdal/core/gdaldataset.cpp
> U gdal/core/gdaldriver.cpp
> U gdal/core/gdaldrivermanager.cpp
> U gdal/core/gdalopen.cpp
> U gdal/core/gdalrasterband.cpp
> cvs server: Updating gdal/frmts
> cvs server: failed to create lock directory in repository
> `/usr/cvsroot/gdal/frmts': Permission denied
> cvs server: failed to obtain dir lock in repository
> `/usr/cvsroot/gdal/frmts'
> cvs [server aborted]: read lock failed - giving up

Daniel,

I have chmod -r g+w my /usr/cvsroot tree. Could you try again, and see
if it works now?

I will eventually setup anonymous access to the CVS repository, but for
now was planning to give real accounts to those interested (still a
small group). 

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From danmo at v...  Thu Dec  3 22:48:50 1998
From: danmo at v... (Daniel Morissette)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: CVS Access
References: <3666E69F.B9ACEABE@h...> <3666FF96.AD0F1E9E@v...> <366706D3.F1F15DDF@h...>
  <36674CB4.7E7C83EB@v...> <366751DE.947B0F13@h...>
Message-ID: <36675BA2.6E932296@v...>

Frank Warmerdam wrote:
> 
> 
> Daniel,
> 
> I have chmod -r g+w my /usr/cvsroot tree. Could you try again, and see
> if it works now?
> 

It works great now... thanks!

-- 
------------------------------------------------------------
Daniel Morissette danmo@v...
http://pages.infinit.net/danmo/
------------------------------------------------------------
Don't put for tomorrow what you can do today, because if 
you enjoy it today you can do it again tomorrow.
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Sat Dec  5 12:01:56 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: Portability library
References: <36685945.13738D8@v...>
Message-ID: <36696704.350EDC3A@h...>

Daniel Morissette wrote:
> 
> Frank,
> 
> I have modified my OWT lib to make use of the new portability library,
> and by the same way had to make a couple of changes to compile under
> MSVC++:
> 
> (For now I used the symbol WIN32 to tell which platform we are on. i.e.
> #ifdef WIN32 ...)
> 
> - Replaced str*casecmp() with str*icmp() for WIN32
> 
> - Avoid including <unistd.h> under WIN32
> 
> And I also added 3 more functions to manipulate stringlists with
> Name=Value pairs.
> 
> Finally, I checked in my changes remotely and it worked very well.
> (Yep! I did my checkin just a couple of minutes before going away for
> the weekend... some things never change ;)
> 
> Anyways, I think that's a good start for the portability library!

Daniel,

Excellent!

I haven't really thought too much about approaches to portability, or how
to do builds on Unix, and Windows. I am thinking of depending on the 
Cygwin user environment for Windows (includes bash, gnumake, cp, ...) 
and to allow use of VC++, and gcc on Windows as target compilers. I want
to avoid the PCI approach of a #define'ed macro for each supported 
configuration. I would like to learn more about the autoconf, and so
forth when possible. 

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Sat Dec  5 12:41:36 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: GFC
References: <199812050359.WAA23685@g...>
Message-ID: <36697050.513B1DB7@h...>

Liujian Qian wrote:
> Frank,
> 
> I just sent out an invitation letter about joining my newly created
> gfc-dev list. Hope to see you on board ;)

L.J.,

I am there. :-) Because I think the following discussion will be of
substantial interest to GDAL and GFC developers, and am crossposting
to both lists. It isn't my intention that this would always occur, but
for some core data model issues it may be helpful to discuss in both
forums. Certainly with the limited subscriptions currently in place I 
don't think the cost is high. 

> It seems that GDAL is kicking off nicely? Has your CVS server up and
> running?

Yes, Daniel has successfully downloaded source, and updated the master with
portability fixes. 

> I was wondering the other day whether a uniform call interface for
> raster-type data importer is possible, something like:
> 
> class GGridImporter
> {
> public:
> virtual int open (const char* ) = 0;
> virtual void fillGridMeta (GGridMeta& meta) = 0;
> virtual void customHeader (char*& cust_hdr, int& len) = 0;
> virtual int numColumns () = 0;
> virtual int numRows () = 0;
> virtual GCellType baseType () = 0;
> virtual GCellValue ignoreValue () = 0;
> virtual void scanline (int row, char* buf) = 0;
> virtual int close () = 0;
> };
> 
> Then from GGridImporter you can derive any number of custom importers
> that follow this public interface, such as DEMImporter, or
> ArcGridImporter. Now suppose my general grid class GGrid has the following
> two methods:
> 
> GGrid::installImporter(GGridImporter* importer);
> GGrid::importIt();
> 
> where GGrid::importIt() uses only the public interface defined by the
> above GGridImporter to read in all the external data.
> 
> Now if one of my GGrid object (my_grid) decides to
> import some data from a USGS DEM file, It just needs to do the following:
> 
> my_grid->installImporter(new DemImporter);
> my_grid->importIt();
> 
> Later on if the same GGrid object wants to discard the DEM data but
> make use of some Arc/Info grid data, it can do:
> 
> my_grid->installImporter(new ArcGridImporter);
> my_grid->importIt();

The above approach is good, and fairly analygous to the approach I am 
planning within GDAL. I will briefly explain that:

GDALDriver:
This is the base class for each of the format drivers. The 
driver itself is mostly just responsible for reporting some 
general information about the format (or gateway). For instance
the kind of information you would need to populate dialogs allowing
dataset creation before an instance of the format exists. 

Some GDALDrivers will actually be drivers for another underlying 
multi-format API (such as an OGDIDriver) and so I want to ensure 
that would driver can represent a variety of underlying formats
effectively. I am not sure what all this will entail. 

The GDALDriver derived driver class is also responsible for 
dataset opening, and creation. Once the dataset is instantiated
all further data access is the responsibility of the dataset
(GDALDataset). 

In theory one GDALDriver might be responsible for handling a
more than one GDALDataset derived class, though it isn't clear
why this would be needed.

GDALDriverManager: 
This singleton class maintains a list of GDALDriver's. 
In addition to the ability to register a driver with it
there are (or will be) methods to manipulate the order in
which they are tried on unknown datasets. 

The GDALOpen() function essentially passes the dataset to each 
GDALDriver derived driver in turn till one recognises it. 

GDALDataset:
Particular format classes are derived from this base class, which
is a close analog to your GGridImporter. It contains a variety of
virtual methods, some with default implementations and others that
are pure. The derived class of course fills these in. 

It is my intention to use the GDALDataset baseclass for both raster
and vector formats. In part this comes from my grounding in PCIDSK
format which held both raster and vector information. This really
doesn't seem to happen with many other formats, so I don't know if
keeping this commonality is important. 

Comments on GGridImporter:

Multiple Bands:
Do you intend that applications would instantiate a GGridImporter for
each band (channel) of multi-band raster files? Would there be a class
to to relate the different bands? In fact a GDALDataset represents the
entire dataset, and a GDALRasterBand is instantiated for each band. At
the least you might consider extending the GGridImporter to allow 
reporting of the number of bands, and access to a requested band. 

Blocking:
In GDALDataset I have provided three core methods to access raster data.
The simple ReadBlock(), and WriteBlock() methods are intended to simply
read, or write a block of raster data in the ``optimal'' blocking
organization of the underlying dataset. The idea is that when a band is
initially accessed it would return information on it's optimal blocking. 
For many formats the block size would be one scanline. For tiled 
formats the optimal block size would be the tile size. Within GDAL I
am assuming a uniform block size. A format like TIFF might report a
whole strip (usually a number of scanlines amounting to no more than 8K
of data) as the natural block size. 

In order to facilitate efficient access to modern tiled formats, I think
this could be important.

RasterIO:
The third raster access method on the GDALRasterBand is the RasterIO()
method. This is a complex call that allows for rectangular window
resampling, and alteration of datatypes on the fly. The caller expresses
the size of the dataset window, the size of their buffer, and the datatype
of their buffer. The method takes care of resampling, and type conversion.

This method will have a default implementation on the base GDALRasterBand
class, but the intention is that formats with overviews, or that have other
specialized ways of satisfying such requests can override the method to 
to do it more efficiently than the default implementation. 

API Bridges:
Finally, I am thinking about how I would build a single GGridImporter 
interface for GDAL. In effect this wouldn't be very hard, but I think it
would be difficult to make much specialized information about the real
underlying format available. In essence, I would like to be able to report
back some information about the underlying database, such as a short and
long format name that is not fixed by the class (derived from GGridImporter).

> This seems to provide a clean interface for making use of raster data format
> converters that you guys are developing. Comments and suggestions? Is such
> a uniform interface possible? What about vector data formats?

I do think such a clean interface is possible, though certainly the complexity
depends in part on the objectives. It is an objective of GDAL that 
applications be able to operate on any GDAL supported file as if it were
a native file (within the restrictions of the target file format). 

The class you have described is a grid _importer_. Does this mean that 
within your system you are intending to convert data to your own internal
format for further access, or do you intend that the user be able to 
do operations directly with data in other formats? Either is a reasonable
goal, but if you want to be able to do operations directly on foreign 
format data you will need to substantially complicate the methodology. 

> One last thing, in your shapelib 1.2, I found that you use a for loop to
> swap the byte order of shorts/ints/doubles, this seems to be a bit slow
> compared to macros that are based on bit-shifting, particularly on 64-bit
> machines or for the case of shorts/ints (sometimes the macro version is
> 4 or 6 times faster). If you are interested in testing my macro-based
> byte order swaping routine, I can certainly send it to you.

I would be interested in getting these macros for incorporation into the 
CPL (Common Portability Library) (currently in gdal/port). When Shapelib
is brought into the GDAL tree I will update it to use them. I have at least
one client interested in having Shapelib be as efficient as reasonably 
possible. 

PS. It would be nice if the gfc-dev Description contained a clickable
URL for the GFC project web page. 

Best regards,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From qian at g...  Sat Dec  5 15:30:41 1998
From: qian at g... (Liujian Qian)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: [gfc-dev] GFC
In-Reply-To: <36697050.513B1DB7@h...> (message from Frank Warmerdam on
  Sat, 05 Dec 1998 12:41:36 -0500)
Message-ID: <199812052030.PAA13771@h...>

>>>>> "Frank" == Frank Warmerdam <warmerda@h...> writes:

[details on GGridImporter cut]

Frank> The above approach is good, and fairly analygous to the approach I am 
Frank> planning within GDAL. I will briefly explain that:

Nice scheme!

Frank> GDALDriver:
Frank> This is the base class for each of the format drivers. The 
Frank> driver itself is mostly just responsible for reporting some 
Frank> general information about the format (or gateway). For instance
Frank> the kind of information you would need to populate dialogs allowing
Frank> dataset creation before an instance of the format exists. 

Frank> Some GDALDrivers will actually be drivers for another underlying 
Frank> multi-format API (such as an OGDIDriver) and so I want to ensure 
Frank> that would driver can represent a variety of underlying formats
Frank> effectively. I am not sure what all this will entail. 

Have you thought about providing GDALDriver-based interface to things like HDF 
library, which is very complex, but already has a well-developed programming 
interface (it's own driver)? (All this gets me thinking that OGC should push on
a raster specification RSN, so that you can make GDALDriver mimic that, and 
authors of proprietary formats can easily come up with their subclasses of 
GDALDriver and register it with your GDALDriverManager.)

Frank> The GDALDriver derived driver class is also responsible for 
Frank> dataset opening, and creation. Once the dataset is instantiated
Frank> all further data access is the responsibility of the dataset
Frank> (GDALDataset). 

I assume that there will be many interactions between a GDALDriver and the 
GDALDatasets it creats? Say if a dataset wants to check out a particular 
data item it will use the corresponding GDALDriver to get the actual data off a 
formated file or something like? Do you have a protocol for the message
passing between these two types of objects?

Frank> In theory one GDALDriver might be responsible for handling a
Frank> more than one GDALDataset derived class, though it isn't clear
Frank> why this would be needed.

Do you mean one GDALDriver actually *owns* those datasets? I thought it probably
is a good idea to maintain only a loose connection between GDALDatasets and 
GDALDrivers, without each knowing too much about the other. But I could be wrong.


Frank> GDALDriverManager: 
Frank> This singleton class maintains a list of GDALDriver's. 
Frank> In addition to the ability to register a driver with it
Frank> there are (or will be) methods to manipulate the order in
Frank> which they are tried on unknown datasets. 

Frank> The GDALOpen() function essentially passes the dataset to each 
Frank> GDALDriver derived driver in turn till one recognises it. 

Frank> GDALDataset:
Frank> Particular format classes are derived from this base class, which
Frank> is a close analog to your GGridImporter. It contains a variety of
Frank> virtual methods, some with default implementations and others that
Frank> are pure. The derived class of course fills these in. 

Frank> It is my intention to use the GDALDataset baseclass for both raster
Frank> and vector formats. In part this comes from my grounding in PCIDSK
Frank> format which held both raster and vector information. This really
Frank> doesn't seem to happen with many other formats, so I don't know if
Frank> keeping this commonality is important. 

I think to derive both raster and vector dataset classes from GDALDataset is a good
idea. It doesn't necessarily mean that both type of data will physically sit next to
each other in a single dataset. That is indeed rare. But to develop applications 
based on a single uniform notion of GDALDataset is a good idea. 

Frank> Comments on GGridImporter:

Frank> Multiple Bands:
Frank> Do you intend that applications would instantiate a GGridImporter for
Frank> each band (channel) of multi-band raster files? Would there be a class
Frank> to to relate the different bands? In fact a GDALDataset represents the
Frank> entire dataset, and a GDALRasterBand is instantiated for each band. At
Frank> the least you might consider extending the GGridImporter to allow 
Frank> reporting of the number of bands, and access to a requested band. 

My intention is to make GGrid minimum in terms of functionalities and data model.
As such I want GGrid to represent only a single shear/band of grided data, upon
which I can define very generic methods such as boolean operations. Later on there
will be more specific ADTs such as GRMImage (for remote sensing images), which will
maintain a list of GGrid objects each representing a band when necessary. But you
are right I should probably add the interface about band information reporting in
to the base GGridImporter class.

Frank> Blocking:
Frank> In GDALDataset I have provided three core methods to access raster data.
Frank> The simple ReadBlock(), and WriteBlock() methods are intended to simply
Frank> read, or write a block of raster data in the ``optimal'' blocking
Frank> organization of the underlying dataset. The idea is that when a band is
Frank> initially accessed it would return information on it's optimal blocking. 
Frank> For many formats the block size would be one scanline. For tiled 
Frank> formats the optimal block size would be the tile size. Within GDAL I
Frank> am assuming a uniform block size. A format like TIFF might report a
Frank> whole strip (usually a number of scanlines amounting to no more than 8K
Frank> of data) as the natural block size. 

Frank> In order to facilitate efficient access to modern tiled formats, I think
Frank> this could be important.

Frank> RasterIO:
Frank> The third raster access method on the GDALRasterBand is the RasterIO()
Frank> method. This is a complex call that allows for rectangular window
Frank> resampling, and alteration of datatypes on the fly. The caller expresses
Frank> the size of the dataset window, the size of their buffer, and the datatype
Frank> of their buffer. The method takes care of resampling, and type conversion.

This is excellent. Keep it rolling guys.

Frank> This method will have a default implementation on the base GDALRasterBand
Frank> class, but the intention is that formats with overviews, or that have other
Frank> specialized ways of satisfying such requests can override the method to 
Frank> to do it more efficiently than the default implementation. 

Do you think a cache for blocks/tiles of recently processed raster will be useful? I
was thinking about doing that for my GFC, where each grid will have a tag/key string
and the tile cache will look it up there first for a desired tile using the
key string. If it founds it there there is no need for physical I/O; otherwise the
normal disk read/write occur.

Frank> API Bridges:
Frank> Finally, I am thinking about how I would build a single GGridImporter 
Frank> interface for GDAL. In effect this wouldn't be very hard, but I think it
Frank> would be difficult to make much specialized information about the real
Frank> underlying format available. In essence, I would like to be able to report
Frank> back some information about the underlying database, such as a short and
Frank> long format name that is not fixed by the class (derived from GGridImporter).

Yeah I agree with you. That's why I have the customHeader() methods in the importer
class. The idea is that GGridImporter puts whatever specialized information it deems
not of general interest in a custom header (an opaque block of data) of the GGrid. 
It's the specialized GGrid subclasses, such as GDem or GRMImage, that can interpret 
the custom header properly. 

>> This seems to provide a clean interface for making use of raster data format
>> converters that you guys are developing. Comments and suggestions? Is such
>> a uniform interface possible? What about vector data formats?

Frank> I do think such a clean interface is possible, though certainly the complexity
Frank> depends in part on the objectives. It is an objective of GDAL that 
Frank> applications be able to operate on any GDAL supported file as if it were
Frank> a native file (within the restrictions of the target file format). 

Frank> The class you have described is a grid _importer_. Does this mean that 
Frank> within your system you are intending to convert data to your own internal
Frank> format for further access, or do you intend that the user be able to 
Frank> do operations directly with data in other formats? Either is a reasonable
Frank> goal, but if you want to be able to do operations directly on foreign 
Frank> format data you will need to substantially complicate the methodology. 

Good question. For now I have my own grid format (I know, I know, it's probably is
a bad idea), because my generic grid data operations depending on knowing the
exact layout of the grid cells. I will give it some hard thinking about where to
draw the line...

>> One last thing, in your shapelib 1.2, I found that you use a for loop to
>> swap the byte order of shorts/ints/doubles, this seems to be a bit slow
>> compared to macros that are based on bit-shifting, particularly on 64-bit
>> machines or for the case of shorts/ints (sometimes the macro version is
>> 4 or 6 times faster). If you are interested in testing my macro-based
>> byte order swaping routine, I can certainly send it to you.

Frank> I would be interested in getting these macros for incorporation into the 
Frank> CPL (Common Portability Library) (currently in gdal/port). When Shapelib
Frank> is brought into the GDAL tree I will update it to use them. I have at least
Frank> one client interested in having Shapelib be as efficient as reasonably 
Frank> possible. 

I will send it to you in another message...

Cheers,

L.J.

------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Sat Dec  5 17:53:14 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: [gfc-dev] GFC
References: <199812052030.PAA13771@h...>
Message-ID: <3669B95A.82F1A853@h...>

Liujian Qian wrote:
> Have you thought about providing GDALDriver-based interface to things like HDF
> library, which is very complex, but already has a well-developed programming
> interface (it's own driver)? (All this gets me thinking that OGC should push on
> a raster specification RSN, so that you can make GDALDriver mimic that, and
> authors of proprietary formats can easily come up with their subclasses of
> GDALDriver and register it with your GDALDriverManager.)

L.J.

I have written a GeoGateway interface to the HDF EOS library in the past, 
and hope to do so again for GDAL. I would also like to support HDF datasets
that are not EOS as part of that effort. In short, yes, I do imagine there
being an GDALHDFDriver class which acts as a sort of bridge to the HDF
(and HDF EOS) libraries. 

This is a challenging one to do because HDF allows for very complex 
datasets, with many grids of different sizes, different regions and so
forth. 

> Frank> The GDALDriver derived driver class is also responsible for
> Frank> dataset opening, and creation. Once the dataset is instantiated
> Frank> all further data access is the responsibility of the dataset
> Frank> (GDALDataset).
> 
> I assume that there will be many interactions between a GDALDriver and the
> GDALDatasets it creats? Say if a dataset wants to check out a particular
> data item it will use the corresponding GDALDriver to get the actual data off a
> formated file or something like? Do you have a protocol for the message
> passing between these two types of objects?

I actually see the GDALDriver's as being fairly simple, basically providing
some boot strapping support for opening, and creating datasets, but that
virtually all the work would be done by the GDALDataset itself. In that
sense, I don't see alot of interactions between the classes. 

Note that the GDALDriver and GDALDataset are both simple objects in the
current process space. Message passing is via normal object method calls. 

> Frank> In theory one GDALDriver might be responsible for handling a
> Frank> more than one GDALDataset derived class, though it isn't clear
> Frank> why this would be needed.
> 
> Do you mean one GDALDriver actually *owns* those datasets? I thought it probably
> is a good idea to maintain only a loose connection between GDALDatasets and
> GDALDrivers, without each knowing too much about the other. But I could be wrong.

It seems permissible for a particular GDALDriver to have some intimate 
knowledge of the GDALDataset derived class it is implemented to create. 
In general though (at the base class level for instance) I don't see any
special permissions existing. 

> Do you think a cache for blocks/tiles of recently processed raster will be useful? I
> was thinking about doing that for my GFC, where each grid will have a tag/key string
> and the tile cache will look it up there first for a desired tile using the
> key string. If it founds it there there is no need for physical I/O; otherwise the
> normal disk read/write occur.

Within GeoGateway I implemented a simple raster tile cache a couple of 
years ago. Recently this was extended to a sophisticated tiled caching
system with global memory managers to control strategy.

It isn't clear to me too what extent I want to build caching into GDAL, 
but it does seem obvious that some minimal caching will eventually be
needed. However, one criteria would be that application code can easily
turn all caching off to avoid extra memory overhead in situations where
the applications are providing their own caching, or know that they don't
need any. 

> Yeah I agree with you. That's why I have the customHeader() methods in the importer
> class. The idea is that GGridImporter puts whatever specialized information it deems
> not of general interest in a custom header (an opaque block of data) of the GGrid.
> It's the specialized GGrid subclasses, such as GDem or GRMImage, that can interpret
> the custom header properly.

While this approach has some utility, it really gives very little opportunity
for code not specifically aware of that format (or class) to utilize the
data.

Within OGDI the updateDictionary() routine allows you to fetch a (potentially
long) string associated with a particular name. Some names are specific
to that format, and might not have meaning to much application code. 
Other names can be used to share extension data by convention between
a variety of drivers, and application code.

A similar approach was used with GeoGateway and the MetaDataIO() method. 

In GeoSoft DATs they also have a similar extension mechanism. 

My suggestion then is that you modify your customHeader() method to take
a name parameter, and perhaps to give a clue whether the returned data
can be interpreted as printable text, or only binary. 

In GeoGateway the Metadata mechanism was used for a variety of things
but well known conventions were established for some of them. For
instance a metadata item named "NO_DATA_VALUE" would contain as it's
value a string representation of the raster number which was considered
to be a no-data, or dummy value.

Metadata also provided a mechanism to return arbitrary text name value
pairs for specific formats. For instance the SpotSAR file format contained
a variety of interesting information about the acquisition parameters of
the dataset. They were all returned as metadata items where the name 
portion was prefixed by ``SpotSAR_''. The data didn't mean anything specific
to most applications, but a user could easily review it.

I haven't developed a metadata interface for GDAL yet. I have briefly
reviewed FDGC metadata standards from the states, and a couple of different
metadata representations, including the USGS/NASA ODL (Object Definition
Language?) for metadata. I don't know exactly how this will be handled
in GDAL, but I am thinking of going beyond the GeoGateway concept of a 
flag metadata dictionary to a (potentially) heirarchical set of information
and also to carry some typing information with the metadata. 

Best regards,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From qian at g...  Sat Dec  5 21:08:52 1998
From: qian at g... (Liujian Qian)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: [gfc-dev] GFC
In-Reply-To: <3669B95A.82F1A853@h...> (message from Frank Warmerdam on
  Sat, 05 Dec 1998 17:53:14 -0500)
Message-ID: <199812060208.VAA21454@h...>

>>>>> "Frank" == Frank Warmerdam <warmerda@h...> writes:

>> Yeah I agree with you. That's why I have the customHeader() methods in the importer
>> class. The idea is that GGridImporter puts whatever specialized information it deems
>> not of general interest in a custom header (an opaque block of data) of the GGrid.
>> It's the specialized GGrid subclasses, such as GDem or GRMImage, that can interpret
>> the custom header properly.

Frank> While this approach has some utility, it really gives very little opportunity
Frank> for code not specifically aware of that format (or class) to utilize the
Frank> data.

The thing is, even with the meta query mechanism you described below, if the
application code is not specifically aware of the format, how does it know
what names can be used to fetch the metadata associated with them? The problem
is that if you define a set of metadata names for each format, you quickly
lose the purpose of metadata, unless some sort of standard tags or metadata
names have been estabilished. Don't get me wrong though, I consider metadata
query/managment to be very useful to GDAL (and probably GFC as well),
for instance in the internal organization of format drivers, and isn't it 
always nice to have a database of meta data about all the formats GDAL 
understands. Hey you probably can add a GDALMetaManger to
maintain some kind of meta specification for each concrete GDALDataset
class.

This also gets me thinking about a flexible metadata management mechanism.
I think XML-based approach is a serious candidate. It is hiearchical and
it's just sooo flexible. And yeah you can have all the type information
in there as well. I just coined an example below for some LADSAT images :

<METADATA format_name = "LANDAST">
<NO_DATA_VALUE> ????	</NO_DATA_VALUE>
<DATA_TYPE>	int	</DATA_TYPE>
<AGENCY> NASA	</AGENCY>
<PERIOD>	12	</PERIOD>
<BAND id=1>
<NAME> green </NAME>
<SPECTRUM_RANGE> 0.45-0.575 </SPECTRUM_RANGE>
</BAND>
...
<BAND id=3>
<NAME> near infrared </NAME>
<SPECTRUM_RANGE> 0.70-0.83 </SPECTRUM_RANGE>
</BAND>
......
</METADATA>

This can have its own single xml file or it can stay with many other
<METADATA> records each specifying the metainfo of a format. You can
easily query this database with any existing XML parser. 
GFC already has a XML parser based on Clark's C expat package (very easy
to use), and I am thinking of more extended use of XML, not just for
metadata, but also for self-explained geo-dataset transfer over the
web. 

As far as I know, both FGDC and OGC are looking at XML very seriously
and some one has already implemeted the simple feature specification of
OpenGIS in XML... and here in Penn State we also have a group converting
all the FGDC metadata into XML formats....

Cheers,

L.J.

Frank> Within OGDI the updateDictionary() routine allows you to fetch a (potentially
Frank> long) string associated with a particular name. Some names are specific
Frank> to that format, and might not have meaning to much application code. 
Frank> Other names can be used to share extension data by convention between
Frank> a variety of drivers, and application code.

Frank> A similar approach was used with GeoGateway and the MetaDataIO() method. 

Frank> In GeoSoft DATs they also have a similar extension mechanism. 

Frank> My suggestion then is that you modify your customHeader() method to take
Frank> a name parameter, and perhaps to give a clue whether the returned data
Frank> can be interpreted as printable text, or only binary. 

Frank> In GeoGateway the Metadata mechanism was used for a variety of things
Frank> but well known conventions were established for some of them. For
Frank> instance a metadata item named "NO_DATA_VALUE" would contain as it's
Frank> value a string representation of the raster number which was considered
Frank> to be a no-data, or dummy value.

Frank> Metadata also provided a mechanism to return arbitrary text name value
Frank> pairs for specific formats. For instance the SpotSAR file format contained
Frank> a variety of interesting information about the acquisition parameters of
Frank> the dataset. They were all returned as metadata items where the name 
Frank> portion was prefixed by ``SpotSAR_''. The data didn't mean anything specific
Frank> to most applications, but a user could easily review it.

Frank> I haven't developed a metadata interface for GDAL yet. I have briefly
Frank> reviewed FDGC metadata standards from the states, and a couple of different
Frank> metadata representations, including the USGS/NASA ODL (Object Definition
Frank> Language?) for metadata. I don't know exactly how this will be handled
Frank> in GDAL, but I am thinking of going beyond the GeoGateway concept of a 
Frank> flag metadata dictionary to a (potentially) heirarchical set of information
Frank> and also to carry some typing information with the metadata. 

Frank> Best regards,

Frank> -----------------------------------+---------------------------------------
Frank> Who can give them back their lives | Frank Warmerdam, Software Developer
Frank> and all those wasted years? - Rush | URL http://members.home.com/warmerda
Frank> | warmerda@h...
Frank> ------------------------------------------------------------------------
Frank> Egroups is a FREE service thanks to NextCard Internet VISA.
Frank> Apply online now for an intro APR as low as 2.9%.
Frank> http://ads.egroups.com/click/137/2

Frank> Free Web-based e-mail groups -- http://www.eGroups.com


------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Sat Dec  5 22:55:54 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: [gfc-dev] GFC
References: <199812060208.VAA21454@h...>
Message-ID: <366A004A.C322C2E5@h...>

Liujian Qian wrote:
> The thing is, even with the meta query mechanism you described below, if the
> application code is not specifically aware of the format, how does it know
> what names can be used to fetch the metadata associated with them? The problem
> is that if you define a set of metadata names for each format, you quickly
> lose the purpose of metadata, unless some sort of standard tags or metadata
> names have been estabilished. Don't get me wrong though, I consider metadata
> query/managment to be very useful to GDAL (and probably GFC as well),
> for instance in the internal organization of format drivers, and isn't it
> always nice to have a database of meta data about all the formats GDAL
> understands. Hey you probably can add a GDALMetaManger to
> maintain some kind of meta specification for each concrete GDALDataset
> class.

L.J.,

Good point. Certainly the flaw with the OGDI updateDictionary() has been
that you had to purposefully decide to query for particular aspects. In
GeoGateway there was an easy mechanism to get all the metadata, and presumably
there would be within GDAL as well.

> This also gets me thinking about a flexible metadata management mechanism.
> I think XML-based approach is a serious candidate. It is hiearchical and
> it's just sooo flexible. And yeah you can have all the type information
> in there as well. I just coined an example below for some LADSAT images :

This is an excellent point. In fact, I believe that OGDI is moving to 
handling some types of metadata as XML for the very reasons you indicate.
In retrospect, I will think a XML organization of metadata is an excellent
idea. 

This will add some weight to GDAL in the form of an XML parsing library,
but I am lead to understand that a proper XML parser can be quite light,
and that there are at least a few in the public domain (or reasonable
licensing terms). 

When I get to this I will look into it further. Do you have any pointers
to web pages on the use of XML for geographical metadata, or to an OpenSource
XML parser?

Best regards,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Sat Dec  5 23:02:14 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Overriding methods for particular formats
Message-ID: <366A01C6.CABA620C@h...>

Folks,

Up to now I have expected those writing support for particular formats
to directly override the application callable methods they wish to
supply. For instance, the GXFDataset would directly override the
ReadBlock() method on the GDALDataset. 

The problem with this approach was that the base class implementation
had no way of providing generic argument checking, interposing access
to caches and so forth. 

In order to allow an extra layer of indirection I have decided to have
two versions of these overridable methods. First is the application
callback method such as ReadBlock(). This will contain a bunch of
argument validation (and potentially short circuiting code). It will
then call the ``internal'' method (ie. IReadBlock()). This is the
method that the subclasses would be expected to override. 

For instance, the read, and write definitions within GDALRasterBand
now look like this:

public:
CPLErr ReadBlock( int, int, void * );
CPLErr WriteBlock( int, int, void * );

protected:
virtual CPLErr IReadBlock( int, int, void * ) = 0;
virtual CPLErr IWriteBlock( int, int, void * );

Applications can call ReadBlock(), and WriteBlock() directly. Drivers
are expected to override the internal methods (IReadBlock() and 
IWriteBlock()). I will attempt to follow this convention (of prefixing
an I) for all external/internal method pairs. 

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Mon Dec  7 23:47:30 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] gdal.velocet.ca
Message-ID: <366CAF62.A930F661@h...>

Folks,

I just wanted you to all know that my home system can now be addressed
as gdal.velocet.ca instead of just by the IP number. This could be used
in CVSROOT values for instance.

This comes thanks to Dave Gilbert of Velocet Communications. 

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Software Developer
and all those wasted years? - Rush | URL http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From qian at g...  Thu Dec 10 15:47:24 1998
From: qian at g... (Liujian Qian)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Re: XML Information (was OpenMap 3.0 is available) (fwd)
Message-ID: <Pine.SOL.3.94.981210154639.5885A-100000@hither>


Hi, just thought this might be of interest to you.

L.J.

---------- Forwarded message ----------
Date: Thu, 10 Dec 1998 10:31:55 +0100
From: David Skogan <David.Skogan@i...>
To: ron_lake@f...
Cc: OGC Technical Committee <tc@o...>,
WWW Mapping SIG <wwwmap.sig@o...>
Subject: XML Information (was Re: OpenMap 3.0 is available)
Resent-Date: Thu, 10 Dec 1998 04:30:06 -0500
Resent-From: wwwmap.sig@o...

Hi

Here is some information about the progress of XML based Geographic
Information Standards.

ISO/TC 211 Geographic information/Geomatics part 18 Encoding has chosen XML
as the encoding format. This is described in document ISO/TC 211/WG4 N099
Encoding Working Draft 3.0. My plan is to issue WD 4.0 in the middle of
January 1999 and then issue a CD (Committee Draft) in February 1999. 

The ISO Encoding document describes rules for how to map UML schema
information to XML DTD's and how to map data based on UML schemas into XML
files. In theory we can define XML tags based constructs defined in any UML
model. Thus if OGC creates UML models at a certain level of detail, we can
use the Encoding rules of ISO/TC 211 and have an XML based exchange standard. 

The Encoding standard will be based on OMG's SMIF (Stream based Interchange
Format). See
http://www.omg.org/techprocess/meetings/schedule/Stream-based_Model_Intercha
nge.html. 

Work item 18 Encoding is on the list of critical areas identified in the
OGC and ISO/TC 211 cooperation plan.

The Encoding standard will not use the XML style mechanisms. ISO/TC 211
part 17 Portrayal is developing a UML diagram for describing portrayal
information.

If you have any ideas or would like to contribute to the work please
contact me.


Regards

David Skogna
Project Leader Work Item 18 Encoding ISO/TC 211


(SINTEF is a member of OGC)

SINTEF Telecom and Informatics Phone: +47 22 06 78 95
P.O. Box 124 Blindern Fax : +47 22 06 73 50
N-0314 OSLO, NORWAY Email: David.Skogan@i...
Web : http://www.informatics.sintef.no/~das/


At 01:36 1998-12-09 -0800, you wrote:
>Hi
>
>Here is a discussion note on XML for some SIG to consider.
>
>Cheers
>
>Ron
>
>
>Attachment Converted: "P:\E-POST\vedlegg\XML in OGC1.doc"
>


------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



From warmerda at h...  Sat Dec 12 16:18:28 1998
From: warmerda at h... (Frank Warmerdam)
Date: Wed Nov 21 11:49:12 2007
Subject: [gdal-dev] Status Report
Message-ID: <3672DDA4.E3FBFF1B@h...>


Folks,

A quick update on what's happening with me, and GDAL.

o I am off the OGDI contract for PCI (and won't be doing any others)
though Stephane is now handling the OGDI contract for PCI, along with
Duncan. 

o I have been retained by Global Geomatics to write a GXF (Geosoft Grid
eXchange Format) driver for OGDI. Gilles has agreed to allow the 
underlying library to be publically distributed as OpenSource six months
after the drivers release within OGDI (so it should be generally available
late next summer). This low level code (gxfopen.c) has been written 
using various CPL services. 

o While arranging for format specs from GeoSoft here in town, Ian Macleod
indicated that Geosoft would be interested in having me write translators
for them. They have an architecture they call DATs (similar to GDB or
GDAL) for accessing raster files. Ian has agreed that where appropriate
I could write translators as low level C libraries which can be distributed
as OpenSource, and higher level DAT code calling the low level library 
which would be proprietary to Geosoft.

My first project with Geosoft is a GeoTIFF DAT, so the low level library
(libtiff, and libgeotiff) already exist. However, I have taken the 
opportunity to add TIFFGetRGBATile() and TIFFGetRGBAStrip() functions 
to libtiff, allowing for more efficient access to files. The existing
API required the application to read the whole file into memory as one
bit array with 32bits (RGBA) per pixel! This code was released to the
libtiff mailing list, and can be seen in:

http://gdal.velocet.ca/rgba_tiff/

This function (TIFFGetRGBAImage()) was used by Global Geomatics geotiff
support, so I hope to get a job upgrading it to use the new methods. 

I am hoping to do a variety of other formats for Geosoft in the future
if this goes well. Geosoft has a very structured development approach,
which includes custom APIs for memory management, file access and lots
of other things. Ian was pleased to hear of the VSI (Virtual System 
Interface) layer which gives an opportunity to hook must standard 
library access for files, and memory. 

o I am still in contact with Spot about writing a DTED validation, and 
header update utility. Unfortunately they aren't willing to let the
source be OpenSource without a steep discount, so my current quote
to them would not lead to any OpenSource results. We will see whether
they decide to proceed. 

o I received the contract from Intergraph for an Imagine to GeoTIFF 
translator, but it specified that all the results would have to be 
signed over to them. Alternatively if I want to retain ownership
of the code they would want a 50% discount. The matter isn't yet 
resolved.

o I have been doing some work on the GDAL core in fits and starts. I
had the raster reading architecture working OK, with drivers for GXF
and GeoTIFF but I have recently torn things apart again to built
in raster tile (block) caches. I want format writers to be able to
concentrate on implementing the IReadBlock(), and IWriteBlock() 
methods with the core taking care of caching to make stuff like the
generic RasterIO() method efficient. 

o I have also been doing a bit of work for Dave Gilbert at Velocet, but
that doesn't really have much to do with GDAL. I am learning PHP (a
server side web scripting language) though!

o I also put Shapelib 1.2 into general release on the GISTrans-L a week
or two ago. This is the version with 3D Shapefile support. After a 
couple more fixes I will likely announce it on comp.infosystems.gis 
and/or ArcView-L. 

o I have done some work to update GeoTIFF web pages last weekend, but I
have yet to get any response from Niles Ritter who hosts the current
out of date pages. It really seems like the GeoTIFF effort has been
hamstrung by principles moving off to other jobs. It suggests to
to me that it is important for the longevity of a project to have a
central web site supported by a group rather than a single individual.

o The GXF format depends on EPSG projection definitions, the same ones
depended on by GeoTIFF, but in a very different format. In following
up on this I found the current information (which is distributed as a
Microsoft Access .mdb file!). It is quite all encompassing, and well
done. At the last OGDI meeting it was suggested that the EPSG (also
known as POSC) projection standards might be adopted within OGDI, and
also that it would likely be adopted by the OpenGIS consortium. 

One project that I would really like to land would be to incorporate 
EPSG support into PROJ.4 (the projections library used by OGDI). I
am hoping the OGDI Research Institute (well, name to be determined)
might be willing to fund my doing work on this. As well as helping 
OGDI this would also be good for GDAL if we adopt PROJ.4 as our base
library, and if the EPSG projection stuff is widely adopted. I can't
really even promote this project though till the OGDI-RI is actually
setup ... hopefully in January. 

I emailed Gerald Evenden (author of PROJ.4) who is now retired. He
says that PROJ.4 isn't really being maintained by anyone and his 
interests have mostly gone on to other things. I had also posted to
comp.infosystems.gis, asking what public domain library people thought
would be a good candidate for a project like mine. I only got two
responses (by email). Not too overwhelming. The one guy was supportive
of PROJ.4, and felt that it would be a good base. 

My dream project is still to get funding to warm up the GeoTIFF standards, 
upgrade to recent EPSG databases, and build a mapping between GeoTIFF and
PROJ.4. I was hoping to promote this to Space Imaging and Spot, but now
I am not so sure that Spot would buy in.

All, in all, my faith that the world is ready for GDAL is faltering a bit. 
Between events at PCI, OpenSource averse clients, and limited response from
the geomatics community I am now kicking around the idea of applying to
work on Linux related projects at Corel. Oiii!

Later,

-----------------------------------+---------------------------------------
Who can give them back their lives | Frank Warmerdam, Programmer for Hire
and all those wasted years? - Rush | http://members.home.com/warmerda
| warmerda@h...
------------------------------------------------------------------------
Free Web-based e-mail groups -- http://www.eGroups.com



