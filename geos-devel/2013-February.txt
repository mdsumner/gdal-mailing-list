From a.masucci at ucl.ac.uk  Tue Feb  5 04:24:52 2013
From: a.masucci at ucl.ac.uk (Masucci, A)
Date: Tue, 5 Feb 2013 12:24:52 +0000
Subject: [geos-devel] troubles with gPolygonize
Message-ID: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>

Hi,
gPolygonize doesn't work with some simple geometries.
Here is an example:

> LS = list(
+ readWKT("LINESTRING (425963 576719, 425980 576703)"),
+ readWKT("LINESTRING (425963 576719, 425882 577073)"),
+ readWKT("LINESTRING (425980 576703, 426082 577072)"),
+ readWKT("LINESTRING (425882 577073, 426082 577072)"),
+ readWKT("LINESTRING (426138 577068, 426082 577072)"),
+ readWKT("LINESTRING (426138 577068, 426420 577039)"),
+ readWKT("LINESTRING (426420 577039, 426554 576990)"),
+ readWKT("LINESTRING (426751 576924, 426776 576823)"),
+ readWKT("LINESTRING (426751 576924, 426783 576919)"),
+ readWKT("LINESTRING (426751 576924, 426714 576953)"),
+ readWKT("LINESTRING (426776 576823, 426783 576919)"),
+ readWKT("LINESTRING (426658 576966, 426554 576990)"),
+ readWKT("LINESTRING (426658 576966, 426667 577031)"),
+ readWKT("LINESTRING (426658 576966, 426714 576953)"),
+ readWKT("LINESTRING (426667 577031, 426714 576953)")
+ )
> gPolygonize(LS)

Traceback:
 1: .Call("rgeos_polygonize", .RGEOS_HANDLE, splist, id, p4s, getCutEdges,     PACKAGE = "rgeos")
 2: gPolygonize(LS)
Error in gPolygonize(LS) : caught access violation - continue with care

I hope you can help me
Kindest regards

Paolo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130205/b666fe52/attachment.html>

From Roger.Bivand at nhh.no  Wed Feb  6 01:19:33 2013
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Wed, 6 Feb 2013 01:19:33 -0800 (PST)
Subject: [geos-devel] troubles with gPolygonize
In-Reply-To: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>
References: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>
Message-ID: <1360142373761-5032412.post@n6.nabble.com>

This is a question about the use of the R package rgeos, which provides GEOS
for sp classes. Consequently, this list is not a good choice; the R-sig-geo
list would have been better. You have also not provided version information
on rgeos, GEOS, or R; the two first are shown when rgeos is loaded, the
latter as output from sessionInfo().

The problem was an assumption in the R code providing IDs for the output
objects, not in GEOS. A fix has been committed to the R-Forge SVN repository
for rgeos, together with your case in the examples for the function. If you
can, please check out the source:

svn checkout svn://svn.r-forge.r-project.org/svnroot/rgeos/

and report back on whether the fix also works for your real use case.

Roger


Masucci, A wrote
> Hi,
> gPolygonize doesn't work with some simple geometries.
> Here is an example:
> 
>> LS = list(
> + readWKT("LINESTRING (425963 576719, 425980 576703)"),
> + readWKT("LINESTRING (425963 576719, 425882 577073)"),
> + readWKT("LINESTRING (425980 576703, 426082 577072)"),
> + readWKT("LINESTRING (425882 577073, 426082 577072)"),
> + readWKT("LINESTRING (426138 577068, 426082 577072)"),
> + readWKT("LINESTRING (426138 577068, 426420 577039)"),
> + readWKT("LINESTRING (426420 577039, 426554 576990)"),
> + readWKT("LINESTRING (426751 576924, 426776 576823)"),
> + readWKT("LINESTRING (426751 576924, 426783 576919)"),
> + readWKT("LINESTRING (426751 576924, 426714 576953)"),
> + readWKT("LINESTRING (426776 576823, 426783 576919)"),
> + readWKT("LINESTRING (426658 576966, 426554 576990)"),
> + readWKT("LINESTRING (426658 576966, 426667 577031)"),
> + readWKT("LINESTRING (426658 576966, 426714 576953)"),
> + readWKT("LINESTRING (426667 577031, 426714 576953)")
> + )
>> gPolygonize(LS)
> 
> Traceback:
>  1: .Call("rgeos_polygonize", .RGEOS_HANDLE, splist, id, p4s, getCutEdges,    
> PACKAGE = "rgeos")
>  2: gPolygonize(LS)
> Error in gPolygonize(LS) : caught access violation - continue with care
> 
> I hope you can help me
> Kindest regards
> 
> Paolo
> 
> _______________________________________________
> geos-devel mailing list

> geos-devel at .osgeo

> http://lists.osgeo.org/mailman/listinfo/geos-devel





-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5032412.html
Sent from the GEOS Developers mailing list archive at Nabble.com.

From a.masucci at ucl.ac.uk  Wed Feb  6 02:06:46 2013
From: a.masucci at ucl.ac.uk (Masucci, A)
Date: Wed, 6 Feb 2013 10:06:46 +0000
Subject: [geos-devel] troubles with gPolygonize
In-Reply-To: <1360142373761-5032412.post@n6.nabble.com>
References: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>,
	<1360142373761-5032412.post@n6.nabble.com>
Message-ID: <BB75FBC20B2888489FFF29E38D2C6DA55617A4B4@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>

Dear Roger,
thanks for your reply and sorry for writing in the wrong mail list.
These are the information you asked me.

> library(rgeos)
Loading required package: sp
rgeos version: 0.2-12, (SVN revision 372)
 GEOS runtime version: 3.3.6-CAPI-1.7.6 
 Polygon checking: TRUE 

> sessionInfo()
R version 2.14.0 (2011-10-31)
Platform: x86_64-pc-mingw32/x64 (64-bit)

Unfortunately I'm not able to open the svn link you sent me

Paolo



________________________________________
From: geos-devel-bounces at lists.osgeo.org [geos-devel-bounces at lists.osgeo.org] on behalf of Roger Bivand [Roger.Bivand at nhh.no]
Sent: 06 February 2013 09:19
To: geos-devel at lists.osgeo.org
Subject: Re: [geos-devel] troubles with gPolygonize

This is a question about the use of the R package rgeos, which provides GEOS
for sp classes. Consequently, this list is not a good choice; the R-sig-geo
list would have been better. You have also not provided version information
on rgeos, GEOS, or R; the two first are shown when rgeos is loaded, the
latter as output from sessionInfo().

The problem was an assumption in the R code providing IDs for the output
objects, not in GEOS. A fix has been committed to the R-Forge SVN repository
for rgeos, together with your case in the examples for the function. If you
can, please check out the source:

svn checkout svn://svn.r-forge.r-project.org/svnroot/rgeos/

and report back on whether the fix also works for your real use case.

Roger


Masucci, A wrote
> Hi,
> gPolygonize doesn't work with some simple geometries.
> Here is an example:
>
>> LS = list(
> + readWKT("LINESTRING (425963 576719, 425980 576703)"),
> + readWKT("LINESTRING (425963 576719, 425882 577073)"),
> + readWKT("LINESTRING (425980 576703, 426082 577072)"),
> + readWKT("LINESTRING (425882 577073, 426082 577072)"),
> + readWKT("LINESTRING (426138 577068, 426082 577072)"),
> + readWKT("LINESTRING (426138 577068, 426420 577039)"),
> + readWKT("LINESTRING (426420 577039, 426554 576990)"),
> + readWKT("LINESTRING (426751 576924, 426776 576823)"),
> + readWKT("LINESTRING (426751 576924, 426783 576919)"),
> + readWKT("LINESTRING (426751 576924, 426714 576953)"),
> + readWKT("LINESTRING (426776 576823, 426783 576919)"),
> + readWKT("LINESTRING (426658 576966, 426554 576990)"),
> + readWKT("LINESTRING (426658 576966, 426667 577031)"),
> + readWKT("LINESTRING (426658 576966, 426714 576953)"),
> + readWKT("LINESTRING (426667 577031, 426714 576953)")
> + )
>> gPolygonize(LS)
>
> Traceback:
>  1: .Call("rgeos_polygonize", .RGEOS_HANDLE, splist, id, p4s, getCutEdges,
> PACKAGE = "rgeos")
>  2: gPolygonize(LS)
> Error in gPolygonize(LS) : caught access violation - continue with care
>
> I hope you can help me
> Kindest regards
>
> Paolo
>
> _______________________________________________
> geos-devel mailing list

> geos-devel at .osgeo

> http://lists.osgeo.org/mailman/listinfo/geos-devel





-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5032412.html
Sent from the GEOS Developers mailing list archive at Nabble.com.
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel



From geos-trac at osgeo.org  Wed Feb  6 03:34:02 2013
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 06 Feb 2013 11:34:02 -0000
Subject: [geos-devel] [GEOS] #620: Incorrect intersection between geometries
Message-ID: <043.a115d923ea96953b23b80d8e96fd3e2c@osgeo.org>

#620: Incorrect intersection between geometries
------------------------+---------------------------------------------------
 Reporter:  rhf         |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.x                     
Component:  Default     |     Version:  3.3.7                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 I have two polylines A, B which partly overlap.

 When computing the intersection C = intersection(A, B), geos reports the
 correct result, which is a simple linestring with two points.
 One of them is a noded intersection. The other one is not.

 Hereafter I compute D = intersection(B, C). Of course D should equal C.
 Instead I will only get a single point: the noded intersection.

 This seems strange to me: either I would expect C also to be incorrect or
 both queries to give the same result.
 The same issue occurs when I try to compute B - C.

 With similar cases involving a noded and none-noded intersection, I get
 the correct results in all cases. For example when trying to reproduce the
 issue with simple horizontal lines.

 I have attached to small files in WKB format: A.txt, B.txt to be used as
 input to reproduce the issue.
 Actually the original polygons used as input where much larger, but I was
 able to reduce their sizes such that they only have a few points. Also I
 am working with geos via Spatialite, but I do not think this is relevant
 for this issue.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/620>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Feb  6 08:23:19 2013
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 06 Feb 2013 16:23:19 -0000
Subject: [geos-devel] [GEOS] #620: Incorrect intersection between
	geometries
In-Reply-To: <043.a115d923ea96953b23b80d8e96fd3e2c@osgeo.org>
References: <043.a115d923ea96953b23b80d8e96fd3e2c@osgeo.org>
Message-ID: <052.76c0a3cc480a0eb8a7843bd40a7c90be@osgeo.org>

#620: Incorrect intersection between geometries
------------------------+---------------------------------------------------
 Reporter:  rhf         |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.3.x                     
Component:  Default     |      Version:  3.3.7                     
 Severity:  Unassigned  |   Resolution:  wontfix                   
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by mdavis):

  * status:  new => closed
  * resolution:  => wontfix


Comment:

 In general JTS/GEOS overaly operations do not obey the mathematical axioms
 of pure set theory.

 See D7 in the JTS FAQ:

 http://tsusiatsoftware.net/jts/jts-faq/jts-faq.html

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/620#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From Roger.Bivand at nhh.no  Wed Feb  6 09:13:02 2013
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Wed, 6 Feb 2013 09:13:02 -0800 (PST)
Subject: [geos-devel] troubles with gPolygonize
In-Reply-To: <BB75FBC20B2888489FFF29E38D2C6DA55617A4B4@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>
References: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>
	<1360142373761-5032412.post@n6.nabble.com>
	<BB75FBC20B2888489FFF29E38D2C6DA55617A4B4@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>
Message-ID: <1360170782787-5032540.post@n6.nabble.com>

rgeos 0.2-13 is now submitted to CRAN, should be built as a Windows binary
shortly, probably also for your R 2.14. 

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5032540.html
Sent from the GEOS Developers mailing list archive at Nabble.com.

From a.masucci at ucl.ac.uk  Wed Feb  6 09:45:15 2013
From: a.masucci at ucl.ac.uk (Masucci, A)
Date: Wed, 6 Feb 2013 17:45:15 +0000
Subject: [geos-devel] troubles with gPolygonize
In-Reply-To: <1360170782787-5032540.post@n6.nabble.com>
References: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>
	<1360142373761-5032412.post@n6.nabble.com>
	<BB75FBC20B2888489FFF29E38D2C6DA55617A4B4@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>,
	<1360170782787-5032540.post@n6.nabble.com>
Message-ID: <BB75FBC20B2888489FFF29E38D2C6DA55617A650@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>

Roger, 
thank you very much

Paolo

________________________________________
From: geos-devel-bounces at lists.osgeo.org [geos-devel-bounces at lists.osgeo.org] on behalf of Roger Bivand [Roger.Bivand at nhh.no]
Sent: 06 February 2013 17:13
To: geos-devel at lists.osgeo.org
Subject: Re: [geos-devel] troubles with gPolygonize

rgeos 0.2-13 is now submitted to CRAN, should be built as a Windows binary
shortly, probably also for your R 2.14.

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5032540.html
Sent from the GEOS Developers mailing list archive at Nabble.com.
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel



From mats.taraldsvik at norkart.no  Thu Feb  7 23:22:21 2013
From: mats.taraldsvik at norkart.no (Mats Taraldsvik)
Date: Fri, 8 Feb 2013 07:22:21 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
Message-ID: <D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>

Hi,

Have you considered this issue? Do you accept patches to solve this by changing the interface (considering GEOS is a port of JTS and follows it closely)? :)

Regards

Mats Taraldsvik

> -----Opprinnelig melding-----
> Fra: geos-devel-bounces at lists.osgeo.org [mailto:geos-devel-
> bounces at lists.osgeo.org] P? vegne av Mats Taraldsvik
> Sendt: 18. januar 2013 12:53
> Til: geos-devel at lists.osgeo.org
> Emne: [geos-devel] Ability to preallocate the WKT stringstream buffer for
> really large geometries?
> 
> Hi,
> 
> Generally, I'm very satisfied with the WKTWriter, which is really easy to use,
> and converts the Geometries to the WKT format. However, when converting
> _large_ geometries (in this case, contour lines), I get a major decrease in
> performance.
> 
> By looking at the source code (and profiling), I believe the use of a
> stringstream and hence a dynamically increasing string buffer, constantly
> reallocating, is causing the performance penalty. Possibly also copying the
> large string.
> 
> Is there anything I can do to improve this scenario? Do you accept
> contributions to fix this (e.g. passing in the expected size of the resulting
> WKT string)?
> 
> Regards
> 
> Mats Taraldsvik
> mats.taraldsvik at norkart.no
> 
> L?kketangen 20A
> Postboks 145
> N- 1300 Sandvika
> +47 67 55 14 00
> norkart.no
> ______
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From strk at keybit.net  Fri Feb  8 04:27:49 2013
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 8 Feb 2013 13:27:49 +0100
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
Message-ID: <20130208122749.GE4863@gnash>

On Fri, Feb 08, 2013 at 07:22:21AM +0000, Mats Taraldsvik wrote:

> Have you considered this issue? Do you accept patches to solve this
> by changing the interface (considering GEOS is a port of JTS and follows
> it closely)? :)

I'll be glad to review and apply any patch speeding up WKT writing.
I'm fine with providing an enhanced interface for 3.4.x series,
as long as the old one remains for backward API compatibility.

If you start with that please consider taking a look at
http://trac.osgeo.org/geos/ticket/355 and
http://trac.osgeo.org/geos/ticket/310

Please also make sure the testsuite covers enough cases.

Thank you !

--strk;

> Regards
> 
> Mats Taraldsvik
> 
> > -----Opprinnelig melding-----
> > Fra: geos-devel-bounces at lists.osgeo.org [mailto:geos-devel-
> > bounces at lists.osgeo.org] P? vegne av Mats Taraldsvik
> > Sendt: 18. januar 2013 12:53
> > Til: geos-devel at lists.osgeo.org
> > Emne: [geos-devel] Ability to preallocate the WKT stringstream buffer for
> > really large geometries?
> > 
> > Hi,
> > 
> > Generally, I'm very satisfied with the WKTWriter, which is really easy to use,
> > and converts the Geometries to the WKT format. However, when converting
> > _large_ geometries (in this case, contour lines), I get a major decrease in
> > performance.
> > 
> > By looking at the source code (and profiling), I believe the use of a
> > stringstream and hence a dynamically increasing string buffer, constantly
> > reallocating, is causing the performance penalty. Possibly also copying the
> > large string.
> > 
> > Is there anything I can do to improve this scenario? Do you accept
> > contributions to fix this (e.g. passing in the expected size of the resulting
> > WKT string)?
> > 
> > Regards

From a.masucci at ucl.ac.uk  Wed Feb 13 11:42:39 2013
From: a.masucci at ucl.ac.uk (Masucci, A)
Date: Wed, 13 Feb 2013 19:42:39 +0000
Subject: [geos-devel] troubles with gPolygonize
In-Reply-To: <1360170782787-5032540.post@n6.nabble.com>
References: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>
	<1360142373761-5032412.post@n6.nabble.com>
	<BB75FBC20B2888489FFF29E38D2C6DA55617A4B4@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>,
	<1360170782787-5032540.post@n6.nabble.com>
Message-ID: <BB75FBC20B2888489FFF29E38D2C6DA55617AC2E@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>

Dear Roger,
I found that the bug was fixed, thanks so much. 
Now it works great with WKT lines, while it crashes if the lines are given as SpatialLines, but it's not an issue to feed it with WKT
Best regards

Paolo


________________________________________
From: geos-devel-bounces at lists.osgeo.org [geos-devel-bounces at lists.osgeo.org] on behalf of Roger Bivand [Roger.Bivand at nhh.no]
Sent: 06 February 2013 17:13
To: geos-devel at lists.osgeo.org
Subject: Re: [geos-devel] troubles with gPolygonize

rgeos 0.2-13 is now submitted to CRAN, should be built as a Windows binary
shortly, probably also for your R 2.14.

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5032540.html
Sent from the GEOS Developers mailing list archive at Nabble.com.
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel



From Roger.Bivand at nhh.no  Wed Feb 13 12:33:25 2013
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Wed, 13 Feb 2013 12:33:25 -0800 (PST)
Subject: [geos-devel] troubles with gPolygonize
In-Reply-To: <BB75FBC20B2888489FFF29E38D2C6DA55617AC2E@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>
References: <BB75FBC20B2888489FFF29E38D2C6DA5557D793B@AMSPRD0104MB162.eurprd01.prod.exchangelabs.com>
	<1360142373761-5032412.post@n6.nabble.com>
	<BB75FBC20B2888489FFF29E38D2C6DA55617A4B4@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>
	<1360170782787-5032540.post@n6.nabble.com>
	<BB75FBC20B2888489FFF29E38D2C6DA55617AC2E@DBXPRD0111MB526.eurprd01.prod.exchangelabs.com>
Message-ID: <1360787605795-5034068.post@n6.nabble.com>

Thanks for reporting back. I don't think you mean "crash" in the R sense
(error exit from the R interpreter); if the first argument to gPolygonize()
is not a list of SpatialLines objects - in your case it is:

> table(sapply(LS, class))

SpatialLines 
          15 

but a SpatialLines object, the function returns NULL if it cannot be made
into a polygon. There are no WKT objects involved, as readWKT() returns a
Spatial* object with its specific class determined by the type of the WKT
string.

Roger


Masucci, A wrote
> Dear Roger,
> I found that the bug was fixed, thanks so much. 
> Now it works great with WKT lines, while it crashes if the lines are given
> as SpatialLines, but it's not an issue to feed it with WKT
> Best regards
> 
> Paolo
> 
> 
> ________________________________________
> From: 

> geos-devel-bounces at .osgeo

>  [

> geos-devel-bounces at .osgeo

> ] on behalf of Roger Bivand [

> Roger.Bivand@

> ]
> Sent: 06 February 2013 17:13
> To: 

> geos-devel at .osgeo

> Subject: Re: [geos-devel] troubles with gPolygonize
> 
> rgeos 0.2-13 is now submitted to CRAN, should be built as a Windows binary
> shortly, probably also for your R 2.14.
> 
> Roger
> 
> 
> 
> -----
> Roger Bivand
> NHH Norwegian School of Economics, Bergen, Norway
> --
> View this message in context:
> http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5032540.html
> Sent from the GEOS Developers mailing list archive at Nabble.com.
> _______________________________________________
> geos-devel mailing list

> geos-devel at .osgeo

> http://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list

> geos-devel at .osgeo

> http://lists.osgeo.org/mailman/listinfo/geos-devel





-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.n6.nabble.com/troubles-with-gPolygonize-tp5032205p5034068.html
Sent from the GEOS Developers mailing list archive at Nabble.com.

From marco.hugentobler at sourcepole.ch  Fri Feb 15 04:02:11 2013
From: marco.hugentobler at sourcepole.ch (Marco Hugentobler)
Date: Fri, 15 Feb 2013 13:02:11 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
Message-ID: <511E23C3.4050806@sourcepole.ch>

Hi all

I have two geometries (A, B). Now I'm doing GEOSDifference(B, A) and 
then a union of A and the result of the difference operation. The result 
is different compared to GEOSUnion(A, B).
Shouldn't GEOSUnion(A,B) be equal to GEOSUnion( A, GEOSDifference(B, A) 
) ? I have attached a simple test program to reproduce the issue. 
Probably I'm doing something wrong in the code?

Background of my question is that when digitising in QGIS, people are 
frequently using the option to avoid intersection between polygons 
(which calls GEOSDifference). If they repeat that, it turns out, there 
are small gaps between the results of the difference operation and the 
newly added polygons have a wrong shape 
(http://hub.qgis.org/issues/2921). Doing a union of the difference 
results shows the same small gaps betwen the polygons.

Thanks for any hints,
Marco


-- 
Dr. Marco Hugentobler
Sourcepole -  Linux & Open Source Solutions
Weberstrasse 5, CH-8004 Z?rich, Switzerland
marco.hugentobler at sourcepole.ch http://www.sourcepole.ch
Technical Advisor QGIS Project Steering Committee


-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.c
Type: text/x-csrc
Size: 1029 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130215/367475ba/attachment.c>

From strk at keybit.net  Fri Feb 15 04:38:30 2013
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 15 Feb 2013 13:38:30 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
In-Reply-To: <511E23C3.4050806@sourcepole.ch>
References: <511E23C3.4050806@sourcepole.ch>
Message-ID: <20130215123830.GJ8402@gnash>

On Fri, Feb 15, 2013 at 01:02:11PM +0100, Marco Hugentobler wrote:

> I have two geometries (A, B). Now I'm doing GEOSDifference(B, A) and
> then a union of A and the result of the difference operation. The
> result is different compared to GEOSUnion(A, B).
> Shouldn't GEOSUnion(A,B) be equal to GEOSUnion( A, GEOSDifference(B,
> A) ) ? 

Overlay operations can throw exceptions due to robustness issues
during noding. In turn when this happens, a number of heuristics are
attempted to try at working around the problem. If you want to further
debug your case you may try to build geos yourself with uncommenting
the GEOS_DEBUG_BINARYOP define in include/geos/geom/BinaryOp.h and
see what happens to each operation. 

--strk;

From marco.hugentobler at sourcepole.ch  Fri Feb 15 05:40:16 2013
From: marco.hugentobler at sourcepole.ch (Marco Hugentobler)
Date: Fri, 15 Feb 2013 14:40:16 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
In-Reply-To: <20130215123830.GJ8402@gnash>
References: <511E23C3.4050806@sourcepole.ch> <20130215123830.GJ8402@gnash>
Message-ID: <511E3AC0.2070101@sourcepole.ch>

>If you want to further
>debug your case you may try to build geos yourself with uncommenting
>the GEOS_DEBUG_BINARYOP define in include/geos/geom/BinaryOp.h and
>see what happens to each operation.

Ok, the output from the program is now:

Trying with original input.
Trying with original input.
Trying with original input.
POLYGON ((667742.4309483024990186 242527.8379819425463211, 
666346.8681890554726124 243904.6683551594032906, 666702.7835236284881830 
245628.0478699342638720, 667616.2135386734735221 
245333.9510847872006707, 667667.5014041818212718 
246077.6251346581266262, 670730.2465201131999493 
245824.7379232509410940, 669999.6834649369120598 
243558.1192136014287826, 668681.6034982207929716 
244037.8801210268575232, 667742.4309483024990186 242527.8379819425463211))
POLYGON ((667742.4309483024990186 242527.8379819425463211, 
666346.8681890554726124 243904.6683551594032906, 666702.7835236284881830 
245628.0478699342638720, 667616.2135386734735221 
245333.9510847872006707, 667667.5014041818212718 
246077.6251346581266262, 670730.2465201131999493 
245824.7379232509410940, 669999.6834649369120598 
243558.1192136014287826, 668681.6034982207929716 
244037.8801210268575232, 669175.4584796098060906 
244831.9214636523975059, 667742.4309483024990186 242527.8379819425463211))

Does 'Trying with original input' mean there are no robustness issues?

Regards,
Marco

On 15.02.2013 13:38, Sandro Santilli wrote:
> On Fri, Feb 15, 2013 at 01:02:11PM +0100, Marco Hugentobler wrote:
>
>> I have two geometries (A, B). Now I'm doing GEOSDifference(B, A) and
>> then a union of A and the result of the difference operation. The
>> result is different compared to GEOSUnion(A, B).
>> Shouldn't GEOSUnion(A,B) be equal to GEOSUnion( A, GEOSDifference(B,
>> A) ) ?
> Overlay operations can throw exceptions due to robustness issues
> during noding. In turn when this happens, a number of heuristics are
> attempted to try at working around the problem. If you want to further
> debug your case you may try to build geos yourself with uncommenting
> the GEOS_DEBUG_BINARYOP define in include/geos/geom/BinaryOp.h and
> see what happens to each operation.
>
> --strk;


-- 
Dr. Marco Hugentobler
Sourcepole -  Linux & Open Source Solutions
Weberstrasse 5, CH-8004 Z?rich, Switzerland
marco.hugentobler at sourcepole.ch http://www.sourcepole.ch
Technical Advisor QGIS Project Steering Committee


From dburken at comcast.net  Fri Feb 15 06:48:59 2013
From: dburken at comcast.net (David Burken)
Date: Fri, 15 Feb 2013 09:48:59 -0500
Subject: [geos-devel] Compiling geos with mingw64
Message-ID: <511E4ADB.8050006@comcast.net>


Hi,

I'm attempting a 64 bit windows build with the mingw cross compiler on 
linux.  Here's my hacks to get geos to compile if anyone's interested.  
See below.

Take care,
Dave

// My cmake script:
#!/bin/sh

# ---
# File: geos-cmake-config.sh
# ---

build_dir="/work/mingw"

mingw64-cmake -G "Unix Makefiles" \
-DGNU_HOST=x86_64-w64-mingw32 \
-DCMAKE_C_COMPILER=/usr/bin/x86_64-w64-mingw32-gcc \
-DCMAKE_CXX_COMPILER=/usr/bin/x86_64-w64-mingw32-g++ \
-DCMAKE_BUILD_TYPE=Release \
-DCMAKE_INSTALL_PREFIX=${build_dir}/sandbox \
-DCMAKE_MODULE_PATH=${build_dir}/geos/geos-svn/cmake/modules \
../geos-svn

// Files touched:
$ svn status
?       geos_svn_revision.h
M       include/geos/inline.h
M       include/geos/platform.h.cmake
M       include/geos/profiler.h
M       include/geos/timeval.h

// Fixe "multiple defines" in dot.inl files:
$ svn diff include/geos/inline.h
Index: include/geos/inline.h
===================================================================
--- include/geos/inline.h    (revision 3765)
+++ include/geos/inline.h    (working copy)
@@ -18,7 +18,7 @@
  #ifdef GEOS_INLINE
  # define INLINE inline
  #else
-# define INLINE
+# define INLINE inline
  #endif

  // isnan is in std namespace (hack):
$ svn diff include/geos/platform.h.cmake
Index: include/geos/platform.h.cmake
===================================================================
--- include/geos/platform.h.cmake    (revision 3765)
+++ include/geos/platform.h.cmake    (working copy)
@@ -123,6 +123,7 @@
  # endif
  #endif

+#define HAVE_STD_ISNAN 1
  #if defined(HAVE_STD_ISNAN)
  # define ISNAN(x) (std::isnan)(x)
  #elif defined(HAVE_INLINE_ISNAND_XCODE)

// No config.h and gettimeofday call is ambiguous:
$ svn diff include/geos/profiler.h
Index: include/geos/profiler.h
===================================================================
--- include/geos/profiler.h    (revision 3765)
+++ include/geos/profiler.h    (working copy)
@@ -20,7 +20,7 @@
  /* For MingW builds with __STRICT_ANSI__ (-ansi) */
  #if defined(__MINGW32__)
  /* Allow us to check for presence of gettimeofday in MingW */
-#include <config.h>
+// #include <config.h>

  #include <sys/time.h>
  extern "C" {
@@ -71,13 +71,13 @@

      /** \brief start a new timer */
      void start() {
-        gettimeofday(&starttime, NULL);
+           gettimeofday(&starttime, (void*)NULL);
      }

      /** \brief stop current timer */
      void stop()
      {
-        gettimeofday(&stoptime, NULL);
+           gettimeofday(&stoptime, (void*)NULL);
          double elapsed = 1000000*(stoptime.tv_sec-starttime.tv_sec)+
              (stoptime.tv_usec-starttime.tv_usec);


// timezone struct defined in time.h
$ svn diff include/geos/timeval.h
Index: include/geos/timeval.h
===================================================================
--- include/geos/timeval.h    (revision 3765)
+++ include/geos/timeval.h    (working copy)
@@ -31,10 +31,12 @@
  #define EPOCHFILETIME (116444736000000000LL)
  #endif

+#if 0 /* tmp drb */
  struct timezone {
      int tz_minuteswest; /* minutes W of Greenwich */
      int tz_dsttime;     /* type of dst correction */
  };
+#endif




From mateusz at loskot.net  Fri Feb 15 07:06:17 2013
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 15 Feb 2013 15:06:17 +0000
Subject: [geos-devel] Compiling geos with mingw64
In-Reply-To: <511E4ADB.8050006@comcast.net>
References: <511E4ADB.8050006@comcast.net>
Message-ID: <CABUeae8S6TERt7EzkqDJXC+o0Gvv_00BWdb-2O0-jSVVX-F1DQ@mail.gmail.com>

On 15 February 2013 14:48, David Burken <dburken at comcast.net> wrote:
>
> I'm attempting a 64 bit windows build with the mingw cross compiler on
> linux.  Here's my hacks to get geos to compile if anyone's interested.  See below.

Feel free to add to
http://trac.osgeo.org/geos/wiki/BuildingOnWindowsWithCMake

You may also consider ticket with .patch file
attached, with svn diff  output.

Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net

From dburken at comcast.net  Fri Feb 15 07:49:22 2013
From: dburken at comcast.net (David Burken)
Date: Fri, 15 Feb 2013 10:49:22 -0500
Subject: [geos-devel] Compiling geos with mingw64
In-Reply-To: <CABUeae8S6TERt7EzkqDJXC+o0Gvv_00BWdb-2O0-jSVVX-F1DQ@mail.gmail.com>
References: <511E4ADB.8050006@comcast.net>
	<CABUeae8S6TERt7EzkqDJXC+o0Gvv_00BWdb-2O0-jSVVX-F1DQ@mail.gmail.com>
Message-ID: <511E5902.2090801@comcast.net>

Hi,

On 02/15/2013 10:06 AM, Mateusz Loskot wrote:
> On 15 February 2013 14:48, David Burken <dburken at comcast.net> wrote:
>> I'm attempting a 64 bit windows build with the mingw cross compiler on
>> linux.  Here's my hacks to get geos to compile if anyone's interested.  See below.
> Feel free to add to
> http://trac.osgeo.org/geos/wiki/BuildingOnWindowsWithCMake
This is actually a linux build / experiment on Fedora 18.  Fedora yum 
repo has a pile of miingw 64 bit rpms I need including qt4 compiled for 
windows.  Just got geotiff compiled, I'm up to compiling OpenSceneGraph, 
then ossim stuff.
>
> You may also consider ticket with .patch file
> attached, with svn diff  output.
If I get something less hard coded will do ticket.  Was looking at below 
link for isnan error:

http://www.cmake.org/cmake/help/v2.8.10/cmake.html#module:TestForSTDNamespace

Dave

>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>


From strk at keybit.net  Fri Feb 15 08:02:14 2013
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 15 Feb 2013 17:02:14 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
In-Reply-To: <511E3AC0.2070101@sourcepole.ch>
References: <511E23C3.4050806@sourcepole.ch> <20130215123830.GJ8402@gnash>
	<511E3AC0.2070101@sourcepole.ch>
Message-ID: <20130215160214.GA7766@gnash>

On Fri, Feb 15, 2013 at 02:40:16PM +0100, Marco Hugentobler wrote:
> >If you want to further
> >debug your case you may try to build geos yourself with uncommenting
> >the GEOS_DEBUG_BINARYOP define in include/geos/geom/BinaryOp.h and
> >see what happens to each operation.
> 
> Ok, the output from the program is now:
> 
> Trying with original input.
> Trying with original input.
> Trying with original input.
> POLYGON ...
> POLYGON ...
> 
> Does 'Trying with original input' mean there are no robustness issues?

It means no exception has been thrown.
So the problem is NOT with the heuristics in BinaryOp.

After taking a look at the geometries I now know what's going on.
The two very simple (almost rectangle) polygons overlap so that
their boundary intersect at exactly 2 points.

Those 2 points are NOT vertices in the input geometries, so when
constructing a geometry resulting from an overlay (be it union
or difference) a vertex is added to the boundary producing a
slight modification of the so-splitted segment.
This is expected and unavoidable with finite precision.

In the A + B case all geometries take part to the build of a single
topology, so the intersection points become vertexes of the single
output geometry.

In the A + ( B - A ) instead there are two different topologies
being built. First topology (B-A) is built the same way as (B+A)
would be built, produces the same vertices and gives you back
a polygon with those two additional vertices that are NOT NECESSARELY
found on the segment they did split.

The second topology building phase (A + (B-A)) finds one of those
two vertices is NOT on the line, and so does not generate noding at
that specific point.

I see two possible solutions to this problem:

 1. Use arbitrary precision
 2. Use controlled fixed precision

GEOS doesn't implement 1, and I don't think that's generally a good solution.
Fixed precision _is_ implemented BUT not exposed to the C-API yet.

What you could do, as a workaround, is explicitly snapping the geometries
each other to a tolerance of choice. That way geometry A would snap to
the new node - now being a vertex of (B-A) - and topology builder would 
node them consequently.

Exposing fixed precision to the C-API is on the TODO list for 3.1 so if
you want to help with that you're very welcome. It will take exposing
a new PrecisionModel abstract class and provide means to attach them to
GEOSGeometry objects.

See also: http://trac.osgeo.org/postgis/wiki/ToleranceDiscussion

--strk; 

 http://www.cartodb.com - Map, analyze and build applications with your data

                                       ~~ http://strk.keybit.net 


From marco.hugentobler at sourcepole.ch  Fri Feb 15 08:33:53 2013
From: marco.hugentobler at sourcepole.ch (Marco Hugentobler)
Date: Fri, 15 Feb 2013 17:33:53 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
In-Reply-To: <20130215160214.GA7766@gnash>
References: <511E23C3.4050806@sourcepole.ch> <20130215123830.GJ8402@gnash>
	<511E3AC0.2070101@sourcepole.ch> <20130215160214.GA7766@gnash>
Message-ID: <511E6371.3060707@sourcepole.ch>

Hi Sandro

Thanks for explaining this. In the short term, it seems best to me to 
always enable 'topological editing' in QGIS together with avoid 
intersection. That way, the intersection vertices are added to both 
geometries.

>Exposing fixed precision to the C-API is on the TODO list for 3.1 so if
>you want to help with that you're very welcome. It will take exposing
>a new PrecisionModel abstract class and provide means to attach them to
>GEOSGeometry objects.


So basically the subclass of PrecisionModel will do the rounding? Looks 
like a very clean approach to me, I'm looking forward to the new version.

Regards,
Marco

On 15.02.2013 17:02, Sandro Santilli wrote:
> On Fri, Feb 15, 2013 at 02:40:16PM +0100, Marco Hugentobler wrote:
>>> If you want to further
>>> debug your case you may try to build geos yourself with uncommenting
>>> the GEOS_DEBUG_BINARYOP define in include/geos/geom/BinaryOp.h and
>>> see what happens to each operation.
>> Ok, the output from the program is now:
>>
>> Trying with original input.
>> Trying with original input.
>> Trying with original input.
>> POLYGON ...
>> POLYGON ...
>>
>> Does 'Trying with original input' mean there are no robustness issues?
> It means no exception has been thrown.
> So the problem is NOT with the heuristics in BinaryOp.
>
> After taking a look at the geometries I now know what's going on.
> The two very simple (almost rectangle) polygons overlap so that
> their boundary intersect at exactly 2 points.
>
> Those 2 points are NOT vertices in the input geometries, so when
> constructing a geometry resulting from an overlay (be it union
> or difference) a vertex is added to the boundary producing a
> slight modification of the so-splitted segment.
> This is expected and unavoidable with finite precision.
>
> In the A + B case all geometries take part to the build of a single
> topology, so the intersection points become vertexes of the single
> output geometry.
>
> In the A + ( B - A ) instead there are two different topologies
> being built. First topology (B-A) is built the same way as (B+A)
> would be built, produces the same vertices and gives you back
> a polygon with those two additional vertices that are NOT NECESSARELY
> found on the segment they did split.
>
> The second topology building phase (A + (B-A)) finds one of those
> two vertices is NOT on the line, and so does not generate noding at
> that specific point.
>
> I see two possible solutions to this problem:
>
>   1. Use arbitrary precision
>   2. Use controlled fixed precision
>
> GEOS doesn't implement 1, and I don't think that's generally a good solution.
> Fixed precision _is_ implemented BUT not exposed to the C-API yet.
>
> What you could do, as a workaround, is explicitly snapping the geometries
> each other to a tolerance of choice. That way geometry A would snap to
> the new node - now being a vertex of (B-A) - and topology builder would
> node them consequently.
>
> Exposing fixed precision to the C-API is on the TODO list for 3.1 so if
> you want to help with that you're very welcome. It will take exposing
> a new PrecisionModel abstract class and provide means to attach them to
> GEOSGeometry objects.
>
> See also: http://trac.osgeo.org/postgis/wiki/ToleranceDiscussion
>
> --strk;
>
>   http://www.cartodb.com - Map, analyze and build applications with your data
>
>                                         ~~ http://strk.keybit.net
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel



From strk at keybit.net  Fri Feb 15 09:29:18 2013
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 15 Feb 2013 18:29:18 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
In-Reply-To: <511E6371.3060707@sourcepole.ch>
References: <511E23C3.4050806@sourcepole.ch> <20130215123830.GJ8402@gnash>
	<511E3AC0.2070101@sourcepole.ch> <20130215160214.GA7766@gnash>
	<511E6371.3060707@sourcepole.ch>
Message-ID: <20130215172918.GC7766@gnash>

On Fri, Feb 15, 2013 at 05:33:53PM +0100, Marco Hugentobler wrote:
> Hi Sandro
> 
> Thanks for explaining this. In the short term, it seems best to me
> to always enable 'topological editing' in QGIS together with avoid
> intersection. That way, the intersection vertices are added to both
> geometries.

Speaking of which, I was looking for a way to programmatically enable
'topological editing' while editing "TopoGeometry" layers in qgis.
If you can help there I'm all ears :)

> >Exposing fixed precision to the C-API is on the TODO list for 3.1 so if
> >you want to help with that you're very welcome. It will take exposing
> >a new PrecisionModel abstract class and provide means to attach them to
> >GEOSGeometry objects.
> 
> So basically the subclass of PrecisionModel will do the rounding?

That's what it should theoretically happen. Noding will be performed
based on the given precision grid so the segment and the vertex will
be found to be "intersecting" and consequently noded when building
the second topology.

> Looks like a very clean approach to me, I'm looking forward to the
> new version.

Will be a long way.

--strk;


From marco.hugentobler at sourcepole.ch  Sun Feb 17 23:02:10 2013
From: marco.hugentobler at sourcepole.ch (Marco Hugentobler)
Date: Mon, 18 Feb 2013 08:02:10 +0100
Subject: [geos-devel] Small gaps between results of GEOSDifference?
In-Reply-To: <20130215172918.GC7766@gnash>
References: <511E23C3.4050806@sourcepole.ch> <20130215123830.GJ8402@gnash>
	<511E3AC0.2070101@sourcepole.ch> <20130215160214.GA7766@gnash>
	<511E6371.3060707@sourcepole.ch> <20130215172918.GC7766@gnash>
Message-ID: <5121D1F2.9050802@sourcepole.ch>

>I was looking for a way to programmatically enable
>'topological editing' while editing "TopoGeometry" layers in qgis.
>If you can help there I'm all ears :)

This is stored as a project property. So you can do:
QgsProject::instance()->writeEntry( "Digitizing", "/TopologicalEditing", 
true )

QGIS then tries to find matches for each vertex of a geometry, using 
tolerance 0.0000001 for degrees, 0.001 for meters and 0.0001 for feet.

Regards,
Marco

On 15.02.2013 18:29, Sandro Santilli wrote:
> On Fri, Feb 15, 2013 at 05:33:53PM +0100, Marco Hugentobler wrote:
>> Hi Sandro
>>
>> Thanks for explaining this. In the short term, it seems best to me
>> to always enable 'topological editing' in QGIS together with avoid
>> intersection. That way, the intersection vertices are added to both
>> geometries.
> Speaking of which, I was looking for a way to programmatically enable
> 'topological editing' while editing "TopoGeometry" layers in qgis.
> If you can help there I'm all ears :)
>
>>> Exposing fixed precision to the C-API is on the TODO list for 3.1 so if
>>> you want to help with that you're very welcome. It will take exposing
>>> a new PrecisionModel abstract class and provide means to attach them to
>>> GEOSGeometry objects.
>> So basically the subclass of PrecisionModel will do the rounding?
> That's what it should theoretically happen. Noding will be performed
> based on the given precision grid so the segment and the vertex will
> be found to be "intersecting" and consequently noded when building
> the second topology.
>
>> Looks like a very clean approach to me, I'm looking forward to the
>> new version.
> Will be a long way.
>
> --strk;
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel


-- 
Dr. Marco Hugentobler
Sourcepole -  Linux & Open Source Solutions
Weberstrasse 5, CH-8004 Z?rich, Switzerland
marco.hugentobler at sourcepole.ch http://www.sourcepole.ch
Technical Advisor QGIS Project Steering Committee


From mats.taraldsvik at norkart.no  Thu Feb 21 01:22:36 2013
From: mats.taraldsvik at norkart.no (Mats Taraldsvik)
Date: Thu, 21 Feb 2013 09:22:36 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <20130208122749.GE4863@gnash>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
Message-ID: <D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>

I have now submitted pull requests for bug #310 and increased performance and preallocation on github, ready for review:

https://github.com/libgeos/libgeos/pull/5

https://github.com/libgeos/libgeos/pull/4

Locally, I have modified the WKTWriter::writeNumber(double d) method to use boost::spirit::karma::real_generator for conversion of numbers, instead of std::stringstream. This improves writing WKT by 6x-10x on my datasets (tested with linestrings with up to 10000 points). This change *is not* part of the patch for two reasons:

- I don't know whether you want to introduce a dependency on boost::spirit::karma, although it is header-only, so it might not be a large barrier.

- The precision and fixed notation parametres are changed by using policies, essentially structs with static methods that return the precision, trailing_zeros etc. I might be incorrect, but I would have to make policies (structs) for every combination of fixed and decimalPlaces and determine at runtime which of them to use, to make the approach suitable for GEOS. This is easily done, but I don't know if you think it is worth it?

Vennlig hilsen

Mats Taraldsvik
+47?901 65?934


> -----Opprinnelig melding-----
> Fra: Sandro Santilli [mailto:sandro.santilli at gmail.com] P? vegne av Sandro
> Santilli
> Sendt: 8. februar 2013 13:28
> Til: Mats Taraldsvik
> Kopi: GEOS Development List
> Emne: Re: [geos-devel] Ability to preallocate the WKT stringstream buffer for
> really large geometries?
> 
> On Fri, Feb 08, 2013 at 07:22:21AM +0000, Mats Taraldsvik wrote:
> 
> > Have you considered this issue? Do you accept patches to solve this by
> > changing the interface (considering GEOS is a port of JTS and follows
> > it closely)? :)
> 
> I'll be glad to review and apply any patch speeding up WKT writing.
> I'm fine with providing an enhanced interface for 3.4.x series, as long as the
> old one remains for backward API compatibility.
> 
> If you start with that please consider taking a look at
> http://trac.osgeo.org/geos/ticket/355 and
> http://trac.osgeo.org/geos/ticket/310
> 
> Please also make sure the testsuite covers enough cases.
> 
> Thank you !
> 
> --strk;
> 
> > Regards
> >
> > Mats Taraldsvik
> >
> > > -----Opprinnelig melding-----
> > > Fra: geos-devel-bounces at lists.osgeo.org [mailto:geos-devel-
> > > bounces at lists.osgeo.org] P? vegne av Mats Taraldsvik
> > > Sendt: 18. januar 2013 12:53
> > > Til: geos-devel at lists.osgeo.org
> > > Emne: [geos-devel] Ability to preallocate the WKT stringstream
> > > buffer for really large geometries?
> > >
> > > Hi,
> > >
> > > Generally, I'm very satisfied with the WKTWriter, which is really
> > > easy to use, and converts the Geometries to the WKT format. However,
> > > when converting _large_ geometries (in this case, contour lines), I
> > > get a major decrease in performance.
> > >
> > > By looking at the source code (and profiling), I believe the use of
> > > a stringstream and hence a dynamically increasing string buffer,
> > > constantly reallocating, is causing the performance penalty.
> > > Possibly also copying the large string.
> > >
> > > Is there anything I can do to improve this scenario? Do you accept
> > > contributions to fix this (e.g. passing in the expected size of the
> > > resulting WKT string)?
> > >
> > > Regards

From strk at keybit.net  Thu Feb 21 01:41:36 2013
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 21 Feb 2013 10:41:36 +0100
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
	<D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
Message-ID: <20130221094136.GA2964@gnash>

On Thu, Feb 21, 2013 at 09:22:36AM +0000, Mats Taraldsvik wrote:
> I have now submitted pull requests for bug #310 and increased performance and preallocation on github, ready for review:
> 
> https://github.com/libgeos/libgeos/pull/5
> 
> https://github.com/libgeos/libgeos/pull/4

What's the full url to the branches containing those
commits ? I can't find them from the pull requests.

> Locally, I have modified the WKTWriter::writeNumber(double d) method to use boost::spirit::karma::real_generator for conversion of numbers, instead of std::stringstream. This improves writing WKT by 6x-10x on my datasets (tested with linestrings with up to 10000 points). This change *is not* part of the patch for two reasons:
> 
> - I don't know whether you want to introduce a dependency on boost::spirit::karma, although it is header-only, so it might not be a large barrier.
> 
> - The precision and fixed notation parametres are changed by using policies, essentially structs with static methods that return the precision, trailing_zeros etc. I might be incorrect, but I would have to make policies (structs) for every combination of fixed and decimalPlaces and determine at runtime which of them to use, to make the approach suitable for GEOS. This is easily done, but I don't know if you think it is worth it?

No, I don't think we should introduce a dependency on boost yet.

--strk;

From mats.taraldsvik at norkart.no  Thu Feb 21 01:53:25 2013
From: mats.taraldsvik at norkart.no (Mats Taraldsvik)
Date: Thu, 21 Feb 2013 09:53:25 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <20130221094136.GA2964@gnash>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
	<D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
	<20130221094136.GA2964@gnash>
Message-ID: <D9E2BAC444503343ABCE7407085D30F3014D1E8C01@svm-mailR2.norkart.no>



> -----Opprinnelig melding-----
> Fra: geos-devel-bounces at lists.osgeo.org [mailto:geos-devel-
> bounces at lists.osgeo.org] P? vegne av Sandro Santilli
> Sendt: 21. februar 2013 10:42
> Til: GEOS Development List
> Emne: Re: [geos-devel] Ability to preallocate the WKT stringstream buffer for
> really large geometries?
> 
> On Thu, Feb 21, 2013 at 09:22:36AM +0000, Mats Taraldsvik wrote:
> > I have now submitted pull requests for bug #310 and increased
> performance and preallocation on github, ready for review:
> >
> > https://github.com/libgeos/libgeos/pull/5
> >
> > https://github.com/libgeos/libgeos/pull/4
> 
> What's the full url to the branches containing those commits ? I can't find
> them from the pull requests.
> 

I can see the branches/commits by going to libgeos/libgeos -> pull requests -> choose one of the pull requests -> commits

Here are the full urls to the "external" branches

https://github.com/Norkart/libgeos/tree/svn-trunk-wkt-reader-consistency

https://github.com/Norkart/libgeos/tree/svn-trunk-io-wkt-performance


> > Locally, I have modified the WKTWriter::writeNumber(double d) method to
> use boost::spirit::karma::real_generator for conversion of numbers, instead
> of std::stringstream. This improves writing WKT by 6x-10x on my datasets
> (tested with linestrings with up to 10000 points). This change *is not* part of
> the patch for two reasons:
> >
> > - I don't know whether you want to introduce a dependency on
> boost::spirit::karma, although it is header-only, so it might not be a large
> barrier.
> >
> > - The precision and fixed notation parametres are changed by using
> policies, essentially structs with static methods that return the precision,
> trailing_zeros etc. I might be incorrect, but I would have to make policies
> (structs) for every combination of fixed and decimalPlaces and determine at
> runtime which of them to use, to make the approach suitable for GEOS. This
> is easily done, but I don't know if you think it is worth it?
> 
> No, I don't think we should introduce a dependency on boost yet.

I understand :)

> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel 

Vennlig hilsen

Mats Taraldsvik
+47 901 65 934

From mateusz at loskot.net  Thu Feb 21 03:41:49 2013
From: mateusz at loskot.net (Mateusz Loskot)
Date: Thu, 21 Feb 2013 11:41:49 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
	<D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
Message-ID: <CABUeae8HcZXYpOyAh8Uzrqn-RJmFM+LEKGp4v+VkEYzJj1LS=A@mail.gmail.com>

On 21 February 2013 09:22, Mats Taraldsvik <mats.taraldsvik at norkart.no> wrote:
> Locally, I have modified the WKTWriter::writeNumber(double d) method to use boost::spirit::karma::real_generator for conversion
> of numbers, instead of std::stringstream.

Just to back up this idea:

http://alexott.blogspot.co.uk/2010/01/boostspirit2-vs-atoi.html

Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net

From mateusz at loskot.net  Thu Feb 21 03:42:58 2013
From: mateusz at loskot.net (Mateusz Loskot)
Date: Thu, 21 Feb 2013 11:42:58 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <20130221094136.GA2964@gnash>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
	<D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
	<20130221094136.GA2964@gnash>
Message-ID: <CABUeae8ECj2pvdiabAyrtqv3k3aA0GKvXPVH+FLCAUbBuYn47w@mail.gmail.com>

On 21 February 2013 09:41, Sandro Santilli <strk at keybit.net> wrote:
> On Thu, Feb 21, 2013 at 09:22:36AM +0000, Mats Taraldsvik wrote:
>
>> Locally, I have modified the WKTWriter::writeNumber(double d) method to use boost::spirit::karma::real_generator for conversion of numbers, instead of std::stringstream. This improves writing WKT by 6x-10x on my datasets (tested with linestrings with up to 10000 points). This change *is not* part of the patch for two reasons:
>>
>> - I don't know whether you want to introduce a dependency on boost::spirit::karma, although it is header-only, so it might not be a large barrier.
>>
>> - The precision and fixed notation parametres are changed by using policies, essentially structs with static methods that return the precision, trailing_zeros etc. I might be incorrect, but I would have to make policies (structs) for every combination of fixed and decimalPlaces and determine at runtime which of them to use, to make the approach suitable for GEOS. This is easily done, but I don't know if you think it is worth it?
>
> No, I don't think we should introduce a dependency on boost yet.

Any chance to at least conditionally-compile for C++11 and use

http://en.cppreference.com/w/cpp/string/basic_string/stof

Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net

From mats.taraldsvik at norkart.no  Thu Feb 21 04:29:03 2013
From: mats.taraldsvik at norkart.no (Mats Taraldsvik)
Date: Thu, 21 Feb 2013 12:29:03 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <CABUeae8HcZXYpOyAh8Uzrqn-RJmFM+LEKGp4v+VkEYzJj1LS=A@mail.gmail.com>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
	<D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
	<CABUeae8HcZXYpOyAh8Uzrqn-RJmFM+LEKGp4v+VkEYzJj1LS=A@mail.gmail.com>
Message-ID: <D9E2BAC444503343ABCE7407085D30F3014D1E8C30@svm-mailR2.norkart.no>

> -----Opprinnelig melding-----
> Fra: geos-devel-bounces at lists.osgeo.org [mailto:geos-devel-
> bounces at lists.osgeo.org] P? vegne av Mateusz Loskot
> Sendt: 21. februar 2013 12:42
> Til: GEOS Development List
> Emne: Re: [geos-devel] Ability to preallocate the WKT stringstream buffer for
> really large geometries?
> 
> On 21 February 2013 09:22, Mats Taraldsvik <mats.taraldsvik at norkart.no>
> wrote:
> > Locally, I have modified the WKTWriter::writeNumber(double d) method
> > to use boost::spirit::karma::real_generator for conversion of numbers,
> instead of std::stringstream.
> 
> Just to back up this idea:
> 
> http://alexott.blogspot.co.uk/2010/01/boostspirit2-vs-atoi.html
> 

It is, indeed, a lot faster. One could argue, though, that WKB is better suited when one needs performance.

> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

Vennlig hilsen

Mats Taraldsvik
+47 901 65 934

From mats.taraldsvik at norkart.no  Thu Feb 21 04:30:57 2013
From: mats.taraldsvik at norkart.no (Mats Taraldsvik)
Date: Thu, 21 Feb 2013 12:30:57 +0000
Subject: [geos-devel] Ability to preallocate the WKT stringstream buffer
 for really large geometries?
In-Reply-To: <CABUeae8ECj2pvdiabAyrtqv3k3aA0GKvXPVH+FLCAUbBuYn47w@mail.gmail.com>
References: <D9E2BAC444503343ABCE7407085D30F30135622A22@svm-mailR2.norkart.no>
	<D9E2BAC444503343ABCE7407085D30F3013562724F@svm-mailR2.norkart.no>
	<20130208122749.GE4863@gnash>
	<D9E2BAC444503343ABCE7407085D30F3014D1E8BDF@svm-mailR2.norkart.no>
	<20130221094136.GA2964@gnash>
	<CABUeae8ECj2pvdiabAyrtqv3k3aA0GKvXPVH+FLCAUbBuYn47w@mail.gmail.com>
Message-ID: <D9E2BAC444503343ABCE7407085D30F3014D1E8C3F@svm-mailR2.norkart.no>

> -----Opprinnelig melding-----
> Fra: geos-devel-bounces at lists.osgeo.org [mailto:geos-devel-
> bounces at lists.osgeo.org] P? vegne av Mateusz Loskot
> Sendt: 21. februar 2013 12:43
> Til: GEOS Development List
> Emne: Re: [geos-devel] Ability to preallocate the WKT stringstream buffer for
> really large geometries?
> 
> On 21 February 2013 09:41, Sandro Santilli <strk at keybit.net> wrote:
> > On Thu, Feb 21, 2013 at 09:22:36AM +0000, Mats Taraldsvik wrote:
> >
> >> Locally, I have modified the WKTWriter::writeNumber(double d) method
> to use boost::spirit::karma::real_generator for conversion of numbers,
> instead of std::stringstream. This improves writing WKT by 6x-10x on my
> datasets (tested with linestrings with up to 10000 points). This change *is
> not* part of the patch for two reasons:
> >>
> >> - I don't know whether you want to introduce a dependency on
> boost::spirit::karma, although it is header-only, so it might not be a large
> barrier.
> >>
> >> - The precision and fixed notation parametres are changed by using
> policies, essentially structs with static methods that return the precision,
> trailing_zeros etc. I might be incorrect, but I would have to make policies
> (structs) for every combination of fixed and decimalPlaces and determine at
> runtime which of them to use, to make the approach suitable for GEOS. This
> is easily done, but I don't know if you think it is worth it?
> >
> > No, I don't think we should introduce a dependency on boost yet.
> 
> Any chance to at least conditionally-compile for C++11 and use
> 
> http://en.cppreference.com/w/cpp/string/basic_string/stof

If you do, consider similar functions for the reverse conversion :

http://en.cppreference.com/w/cpp/string/basic_string/to_string

Both simpler and faster than std::stringstream. :)

> 
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

Vennlig hilsen

Mats Taraldsvik
+47 901 65 934

From theunsheydenrych at gmail.com  Fri Feb 22 12:11:09 2013
From: theunsheydenrych at gmail.com (Theuns Heydenrych)
Date: Fri, 22 Feb 2013 22:11:09 +0200
Subject: [geos-devel] Building Geos with Mingw64 on Win64 error
Message-ID: <CABWZyyqKf-4n_xEgn5skC2A2=LKWMQPvTSYBPyeVgQ5NL6NSxg@mail.gmail.com>

HI i am building geos-3.3.7 on win64 with mingw64, and get the following
error:

mingw32-make[2]: Entering directory 'C:/msys/local/src/geos-3.3.7/src'
C:/msys/bin/sh.exe ../libtool --tag=CXX   --mode=link g++ -DGEOS_INLINE
 -pedantic -Wall -ansi -Wno-long-long  -ffloat-store -g -O2 -release 3.3.7
-no-undefined  -o libgeos.la -rpath /usr/local/lib inlines.lo algori
thm/libalgorithm.la geom/libgeom.la geomgraph/libgeomgraph.la index/
libindex.la io/libio.la linearref/liblinearref.la noding/libnoding.laoperation/
liboperation.la planargraph/libplanargraph.la precision/libprecisio
n.la simplify/libsimplify.la util/libutil.la
libtool: link: rm -fr  .libs/libgeos.dll.a
libtool: link: g++ -shared -nostdlib
c:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../x86_64-w64-mingw32/lib/../lib/dllcrt2.o
c:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../x86_64-w64-mingw
32/lib/../lib/crtbegin.o  .libs/inlines.o  -Wl,--whole-archive
algorithm/.libs/libalgorithm.a geom/.libs/libgeom.a
geomgraph/.libs/libgeomgraph.a index/.libs/libindex.a io/.libs/libio.a
linearref/.libs/liblinearref.
a noding/.libs/libnoding.a operation/.libs/liboperation.a
planargraph/.libs/libplanargraph.a precision/.libs/libprecision.a
simplify/.libs/libsimplify.a util/.libs/libutil.a -Wl,--no-whole-archive
 -Lc:/mingw/bin/..
/lib/gcc/x86_64-w64-mingw32/4.7.2 -Lc:/mingw/bin/../lib/gcc
-Lc:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../x86_64-w64-mingw32/lib/../lib
-Lc:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../..
/lib
-Lc:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../x86_64-w64-mingw32/lib
-Lc:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../.. -lstdc++
-lmingw32 -lgcc_s -lgcc -lmoldname -lmingwex -lmsvcrt -
lpthread -ladvapi32 -lshell32 -luser32 -lkernel32 -liconv -lmingw32 -lgcc_s
-lgcc -lmoldname -lmingwex -lmsvcrt
c:/mingw/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../x86_64-w64-mingw32/lib/../lib/crtend.o
 -O
2   -o .libs/libgeos-3-3-7.dll -Wl,--enable-auto-image-base -Xlinker
--out-implib -Xlinker .libs/libgeos.dll.a
algorithm/.libs/libalgorithm.a(MCPointInRing.o): In function
`geos::algorithm::MCPointInRing::~MCPointInRing()':
C:\msys\local\src\geos-3.3.7\src\algorithm/MCPointInRing.cpp:66: undefined
reference to `geos::index::bintree::Bintree::~Bintree()'
C:\msys\local\src\geos-3.3.7\src\algorithm/MCPointInRing.cpp:64: undefined
reference to `geos::index::bintree::Interval::~Interval()'
C:\msys\local\src\geos-3.3.7\src\algorithm/MCPointInRing.cpp:64: undefined
reference to `geos::index::bintree::Interval::~Interval()'
algorithm/.libs/libalgorithm.a(MCPointInRing.o): In function
`MonotoneChainSelectAction':
C:\msys\local\src\geos-3.3.7\src\algorithm/../../include/geos/index/chain/MonotoneChainSelectAction.h:54:
undefined reference to `vtable for
geos::index::chain::MonotoneChainSelectAction'
algorithm/.libs/libalgorithm.a(MCPointInRing.o): In function
`geos::algorithm::MCPointInRing::isInside(geos::geom::Coordinate const&)':
C:\msys\local\src\geos-3.3.7\src\algorithm/MCPointInRing.cpp:112: undefined
reference to
`geos::index::bintree::Bintree::query(geos::index::bintree::Interval*)'
algorithm/.libs/libalgorithm.a(MCPointInRing.o): In function
`geos::algorithm::MCPointInRing::testMonotoneChain(geos::geom::Envelope*,
geos::algorithm::MCPointInRing::MCSelecter*,
geos::index::chain::MonotoneChain*)
':

With a lot more to errors to follow
Any ideas how to fix this?

I am using MSys and Mingw64 on Windows7 64 bit.

Regards
Theuns Heydenrych
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130222/f6d13294/attachment.html>

From theunsheydenrych at gmail.com  Mon Feb 25 02:51:55 2013
From: theunsheydenrych at gmail.com (Theuns Heydenrych)
Date: Mon, 25 Feb 2013 12:51:55 +0200
Subject: [geos-devel] GEOS Headers and namespaces
Message-ID: <CABWZyyoRy7z82xV9+WofJSmD=_wpREL1Lg7GUTBGoA=9f5ZMtQ@mail.gmail.com>

I am building a project that depends on gdal and geos.
The build environment is Mingw on Windows7. When compiling the code i get a
lot of the warnigs like the one below.

How do i "update your sources according to new layout of GEOS headers and
namespaces" ?

#warning *** DEPRECATED: You are using deprecated header io.h. Please,
update your sources according to new layout of GEOS headers and namespaces

Best regards
Theuns Heydenrych
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130225/f8fe378e/attachment.html>

From strk at keybit.net  Mon Feb 25 03:15:58 2013
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 25 Feb 2013 12:15:58 +0100
Subject: [geos-devel] GEOS Headers and namespaces
In-Reply-To: <CABWZyyoRy7z82xV9+WofJSmD=_wpREL1Lg7GUTBGoA=9f5ZMtQ@mail.gmail.com>
References: <CABWZyyoRy7z82xV9+WofJSmD=_wpREL1Lg7GUTBGoA=9f5ZMtQ@mail.gmail.com>
Message-ID: <20130225111558.GD9523@gnash>

On Mon, Feb 25, 2013 at 12:51:55PM +0200, Theuns Heydenrych wrote:
> I am building a project that depends on gdal and geos.
> The build environment is Mingw on Windows7. When compiling the code i get a
> lot of the warnigs like the one below.
> 
> How do i "update your sources according to new layout of GEOS headers and
> namespaces" ?
> 
> #warning *** DEPRECATED: You are using deprecated header io.h. Please,
> update your sources according to new layout of GEOS headers and namespaces

The new layout is that you only include the header for the specific
classes you need. Or you use the C-API header geos_c.h and stick with
that for max ABI/API future compatibility.

--strk;

From strk at keybit.net  Thu Feb 28 03:34:52 2013
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 28 Feb 2013 12:34:52 +0100
Subject: [geos-devel] GEOS 3.3.8 released, upgrade recommended
Message-ID: <20130228113452.GC19570@gnash>

GEOS 3.3.8 has been released, fixing a segfault in computation of
geometry collections with EMPTY components.

Download: http://download.osgeo.org/geos/geos-3.3.8.tar.bz2
MD5 sum: 75be476d0831a2d14958fed76ca266de

All changes since 3.3.7:

  - IsValidOp: throw proper error on nested shells (#608)
  - Fix header guards (#617, #618, #619)
  - WKTWriter::appendCoordinate optimisation
  - Fix centroid computation for collections with empty components (#582)

--strk; 

