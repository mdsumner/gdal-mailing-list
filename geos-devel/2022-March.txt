From pramsey at cleverelephant.ca  Mon Mar  7 10:09:16 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 7 Mar 2022 10:09:16 -0800
Subject: [geos-devel] GDAL>GEOS development funding priorities
Message-ID: <19C9FF06-1F7D-473C-881A-FC0B15AC6C1D@cleverelephant.ca>

All,

Below is the list of priorities for GEOS improvement work that Dan will be attacking under the funding provided from the GDAL project. I think these all meet the general definition of being generally infrastructural and unlikely to be dealt with in the ordinary course of affairs: aka good targets for infra funding. As the project contact for the GDAL funding, I can approve this list, and it looks fine to me, so this is mostly a FYI, with an added layer of "hopefully not missing anything obvious". 

ATB,
P

------

> Howard Butler requested that I provide you with a proposed statement of work describing maintenance to be performed on the GEOS library under a grant from the GDAL project. Specifically, he requested that the proposed work target performance improvements and API enhancements that do not typically attract external funding.
> 
> The specific changes made to the library will be identified during the course of the work based on code review and community input. However, based on past discussions with the community and experience contributing to the library since 2015, I recommend the areas of focus listed below.
> 
> Priority 1: Improving storage and access of Coordinates. Like JTS, GEOS requires all coordinates to contain three dimensions and be stored in a container that implements the CoordinateSequence interface. A stated purpose of the CoordinateSequence interface is to allow different underlying representations to be used for coordinate storage, such as an array of XYZ values or parallel arrays of X, Y and Z values. This flexibility comes with a cost of slow Coordinate access through virtual methods. However, other assumptions of GEOS code effectively require the XYZ representation. The result is that GEOS pays a performance penalty without gaining a commensurate amount of implementation flexibility. Converting CoordinateSequence into a concrete class backed by a vector of Coordinates is expected to improve performance throughout the library. Further, many commonly used operations only support two-dimensional coordinates. A CoordinateSequence backed by a vector of doubles, mimicking the PostGIS POINTARRAY type, may also provide improved performance while removing the storage penalty of Z and/or M values where they are not required.
> 
> Priority 2: Exploring applications of non-exclusive object ownership. Unlike JTS, GEOS generally relies on an exclusive ownership model whereby an object such as a GeometryCollection has exclusive ownership over its component Geometry objects, which in turn have exclusive ownership over their CoordinateSequences. While this provides simple and predictable memory management, it may also result in extra copies of objects being generated so that they can be used by an operation that may need to modify them (e.g., noding) or by an operation that requires a specific input representation (e.g., unary union). Using const shared pointers may provide opportunities to reduce copying in a way that mimics JTS. However, the need to expose raw pointers through the C API may limit the application of this technique.
> 
> Priority 3: Removing inheritance from portions of the code where it may reduce performance, such as in SegmentString classes. This would need to be done in coordination with JTS and would be contingent on the availability of Martin Davis during the project period. No work is proposed for classes supporting spatial predicates, as it is expected that these will be replaced in a future release of JTS.
> 
> Priority 4: Reorganization of the C API such that reentrant and non-reentrant versions of a function are in the same translation unit, thereby allowing the compiler to inline trivial functions.
> 
> Priority 5: Removing remaining usage of raw pointer types in favor of managed pointers that communicate lifecycle and ownership.
> 
> Priority 6: Defining a C++ API that can feasibly remain stable between releases. It is challenging for projects to incorporate GEOS via C++ because the library does not promise API or ABI stability between versions. It is not possible to maintain complete API and ABI stability while closely following JTS code without using cumbersome patterns such as PIMPL. However, GEOS could improve its usability for C++ clients by clearly defining limited portions of the API for which the project can support a stability contract (e.g., methods of Geometry) and avoiding the export of internal classes that are not intended for external use.
> 
> As needed, work may also include tasks such as researching and resolving issues reported to GitHub, reviewing pull requests, and supporting projects such as GDAL and shapely in their use of GEOS.
> 
> Proposed changes to GEOS will be described in GitHub issues and/or GitHub pull requests.



From muthu.vallin at gmail.com  Tue Mar 29 08:04:50 2022
From: muthu.vallin at gmail.com (Muthu Vallinayagam)
Date: Tue, 29 Mar 2022 17:04:50 +0200
Subject: [geos-devel] GEOS for 3/more-dimensional polyhedra
Message-ID: <CAAuuGYS6nh45yexnOLJxzZk1Go7Rv=5SoZ50bNsr8u4e16DDxQ@mail.gmail.com>

Dear GEOS developers and users,


first, I thank developers for developing geos. I am using it, but
indirectly, via the Shapely package.


I am using Shapely for my project, which deals with 2-dimensional Polygons.
I need such a package

for 3-dimensional polyhedra and in later cases for 4-d, 5-d, etc., But
presently Shapely supports only

2-dimensional polygons since GEOS supports only 2-dimension.


*so I would like to request the developers about the addition of
a 3-dimension feature in GEOS.*

*I hope that it is to activate one more dimension in the C/C++ array and
change respective algorithms*

*in set operation definitions. *


*Also using calloc and malloc we can leave array dimensions to be filled
dynamically. for example, if Geos*

*is exported as a module in python **script, the first thing user can set
the array dimension as per the needs. *

*If they deal with polygons the dimension is set to be 2 **and for
polyhedra, it is 3.*



*My overall needs are Polygon, Multipolygons, Union, and the intersection
of multipolygons. So *


If I want to change the libs in GEOS what are the libs should I change
first?

is it enough, if I change only the dimension of the array and Set operation
definitions in GEOS library for further applications in higher dimensions?


Looking forward to your hearing


thank you

----

Best regards

Muthu Vallinayagam,

Postdoctorate,

Institute for Experimental physics,

TU Freiberg, Germany
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220329/90bb60e0/attachment.html>

From pramsey at cleverelephant.ca  Tue Mar 29 08:32:25 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 29 Mar 2022 08:32:25 -0700
Subject: [geos-devel] GEOS for 3/more-dimensional polyhedra
In-Reply-To: <CAAuuGYS6nh45yexnOLJxzZk1Go7Rv=5SoZ50bNsr8u4e16DDxQ@mail.gmail.com>
References: <CAAuuGYS6nh45yexnOLJxzZk1Go7Rv=5SoZ50bNsr8u4e16DDxQ@mail.gmail.com>
Message-ID: <A86FBF5F-2213-416B-8328-2EFD3E8ADFE0@cleverelephant.ca>

Muthu,
While more effective handling of higher dimensions is something we are considering in the near/medium term, actually doing volumetric calculations is something that goes far beyond simply handling the extra coordinate dimensions, and is not in any developers roap map to my knowledge.
Your best bet, in python, would be researching Python bindings into CGAL, which not only already handles the extra dimensionality but also already has numerous algorithms for calculations against volumetric types.
P

> On Mar 29, 2022, at 8:04 AM, Muthu Vallinayagam <muthu.vallin at gmail.com> wrote:
> 
> Dear GEOS developers and users,
> 
> first, I thank developers for developing geos. I am using it, but indirectly, via the Shapely package.
> 
> I am using Shapely for my project, which deals with 2-dimensional Polygons. I need such a package
> for 3-dimensional polyhedra and in later cases for 4-d, 5-d, etc., But presently Shapely supports only
> 2-dimensional polygons since GEOS supports only 2-dimension.
> 
> so I would like to request the developers about the addition of a 3-dimension feature in GEOS.
> I hope that it is to activate one more dimension in the C/C++ array and change respective algorithms
> in set operation definitions. 
> 
> Also using calloc and malloc we can leave array dimensions to be filled dynamically. for example, if Geos
> is exported as a module in python script, the first thing user can set the array dimension as per the needs. 
> If they deal with polygons the dimension is set to be 2 and for polyhedra, it is 3.
> 
> 
> My overall needs are Polygon, Multipolygons, Union, and the intersection of multipolygons. So 
> 
> If I want to change the libs in GEOS what are the libs should I change first?
> is it enough, if I change only the dimension of the array and Set operation definitions in GEOS library for further applications in higher dimensions? 
> 
> Looking forward to your hearing 
> 
> thank you 
> ----
> Best regards
> Muthu Vallinayagam,
> Postdoctorate,
> Institute for Experimental physics,
> TU Freiberg, Germany
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


