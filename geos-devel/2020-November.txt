From geos-trac at osgeo.org  Mon Nov  2 02:03:03 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 02 Nov 2020 10:03:03 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.4df7082c442631c5396e41c9f94c2fbf@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+-----------------------
 Reporter:  ndawson      |       Owner:  strk
     Type:  enhancement  |      Status:  assigned
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+-----------------------
Changes (by strk):

 * status:  new => assigned
 * owner:  geos-devel@… => strk


Comment:

 I'm adding GEOSPreparedNearestPoints, PR will follow.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov  2 10:38:17 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 02 Nov 2020 18:38:17 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.ead53fa77576d95f914eea79e58d7910@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 This case also creates an infinite loop when evaluating a Delaunay
 Triangulation.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov  2 11:39:25 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 02 Nov 2020 19:39:25 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.03a7e1e848feb85ae664f193551e8204@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 A slightly smaller reproducer is:
 {{{
 MULTIPOINT ((-10 40), (5 40), (20 40), (-10 55), (5 55), (20 55), (-10
 70), (5 70), (20 70))
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov  2 16:41:55 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 03 Nov 2020 00:41:55 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.c9ea7d43b3da0d038c8f9d6fa6391525@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 After bisecting it appears (not surprisingly) that the cause of this bug
 is the commit:

 https://github.com/libgeos/geos/commit/8b433f0887633e320053e169e5bf71c5bbaecb1f

 Not sure why, however.  I suspect that there's an issue in the
 `QuadEdgeSubdivision::remove` method, since that is only called when there
 is a non-zero tolerance being used.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov  3 13:45:50 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 03 Nov 2020 21:45:50 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.69a11b18f5e6cf479cccb5ea35b1033e@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Found the fix for this.  See https://github.com/libgeos/geos/pull/342

 The problem is caused by two bugs in the `QuadEdgeSubdivision::remove`
 method:

 * Since the method argument can be an edge in either base or sym
 orientation, the code to remove the corresponding `QuadEdgeQuartet` needs
 to check if the quartet base matches the arg edge OR its sym
 * The lambda capture clause must specify the edge parameter as `e`, not
 `&e`, since it is already a reference

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Tue Nov  3 14:45:17 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 3 Nov 2020 14:45:17 -0800
Subject: [geos-devel] OverlayNG as Default
In-Reply-To: <003001d6aef8$a4f6d2d0$eee47870$@pcorp.us>
References: <CACowWR03Dz614d_KGySSKqAR+zfpJTm7d-gk3Xge9yKm+yfhUA@mail.gmail.com>
 <003001d6aef8$a4f6d2d0$eee47870$@pcorp.us>
Message-ID: <CACowWR3NdzJ6Lu++0SnEGUw9botzoECOwnowQdtpz+3T6wv2Zg@mail.gmail.com>

The switch has been flipped.
If you build GEOS without any options, you will get the OverlayNG engine
backing the standard geometry functions.

geom->union()
geom->intersection()
geom->symdifference()
geom->difference()
geom->unaryunion()

The unit and XML tests that differed from the old engine have been updated
to match the new NG outputs. That means if you use the --disable-overlayng
option in autotools or the DISABLE_OVERLAYNG option in cmake, not all tests
will pass anymore. NG is the new normal.

P.

On Fri, Oct 30, 2020 at 1:10 PM Regina Obe <lr at pcorp.us> wrote:

> +1 for flipping the switch.
>
>
>
> I don’t know what “light your hair on fair”   means J
>
>
>
>
>
> *From:* geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] *On Behalf
> Of *Paul Ramsey
> *Sent:* Friday, October 30, 2020 3:47 PM
> *To:* GEOS Development List <geos-devel at lists.osgeo.org>
> *Subject:* [geos-devel] OverlayNG as Default
>
>
>
> OK, it's been a while, and I'd like to flip over GEOS master to use
> OverlayNG as the engine behind
>
>
>
> Geometry.intersection()
>
> Geometry.difference()
>
> Geometry.union()
>
> Geometry.symdifference()
>
> Geometry.unaryunion()
>
>
>
> That will entail changing the expected outputs for a few of the regression
> tests, as detailed here.
>
>
>
>
> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#heading=h.ojs23hjdmk7a
>
>
>
> Once that is done, regressions in PostGIS and other downstream projects
> can be #ifdef'ed around GEOS version. As seen in the document above, there
> actually aren't than many cases that need special handling in PostGIS, and
> hopefully not in other downstream projects.
>
>
>
> If you have any concerns, please light your hair on fair in the next
> couple days.
>
>
>
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201103/64006a61/attachment.html>

From geos-trac at osgeo.org  Tue Nov  3 15:54:48 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 03 Nov 2020 23:54:48 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.21dcf9a5f67d16f1252522cc92ce2537@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Fixed by [changeset:"1198e06ef656ffdce71d1a3bc6e65cd146056677/git"
 1198e06/git]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov  3 15:55:48 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 03 Nov 2020 23:55:48 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.48f017406598d1b64a1876de7b5010b0@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+-----------------------
 Reporter:  robe        |       Owner:  mdavis
     Type:  defect      |      Status:  assigned
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+-----------------------
Changes (by mdavis):

 * status:  new => assigned
 * owner:  geos-devel@… => mdavis


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov  3 16:11:20 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 04 Nov 2020 00:11:20 -0000
Subject: [geos-devel] [GEOS] #859: Voronoi issue
In-Reply-To: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
References: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
Message-ID: <060.f8e671a6eb110eaa1e90edd1e1d7e6e3@osgeo.org>

#859: Voronoi issue
------------------------+---------------------------
 Reporter:  jjgreen     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:6 Paul Ramsey <pramsey@…>]:

 > Curiously, this case blows an exception on PostGIS, but not in the unit
 test.

 The reason the unit test passes is that the triangulation tolerance value
 (100) is larger than the extent of the input geometry.  This causes the
 data to collapse to a point, which produces an empty Voronoi diagram.  If
 a smaller tolerance (say 0.1) is used then the test fails with a Topo
 exception.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/859#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov  3 16:24:37 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 04 Nov 2020 00:24:37 -0000
Subject: [geos-devel] [GEOS] #859: Voronoi issue
In-Reply-To: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
References: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
Message-ID: <060.ed979c82ff75b993bad4946e386b05e3@osgeo.org>

#859: Voronoi issue
------------------------+---------------------------
 Reporter:  jjgreen     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Using DD precision for circumcentre actually fixes this issue.  But the
 [https://github.com/libgeos/geos/blob/master/src/triangulate/quadedge/QuadEdgeSubdivision.cpp#L398
 isocelese triangle heuristic] for performance doesn't work. This is why
 the unit test fails when it is fixed to use an appropriate tolerance.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/859#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov  3 17:20:52 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 04 Nov 2020 01:20:52 -0000
Subject: [geos-devel] [GEOS] #859: Voronoi issue
In-Reply-To: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
References: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
Message-ID: <060.f1773bff1de8d082305134345f7bff2f@osgeo.org>

#859: Voronoi issue
------------------------+---------------------------
 Reporter:  jjgreen     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Verified that the original data on this issue is fixed by using
 circumcentreDD (with no heuristic).

 Note that #976 is testing a subset of this data, which also fails:
 {{{

 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/859#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Nov  5 15:24:23 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 05 Nov 2020 23:24:23 -0000
Subject: [geos-devel] [GEOS] #976: Voronoi polygons robustness issue
In-Reply-To: <044.397241d066e8505928206efe983c3c43@osgeo.org>
References: <044.397241d066e8505928206efe983c3c43@osgeo.org>
Message-ID: <059.7d982292f65298f1395645492c3158ba@osgeo.org>

#976: Voronoi polygons robustness issue
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Fix is in https://github.com/libgeos/geos/pull/344

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/976#comment:24>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Fri Nov  6 11:07:41 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 6 Nov 2020 11:07:41 -0800
Subject: [geos-devel] GH Actions
Message-ID: <BC413709-BD11-4E8B-AAEA-0A062DC051D9@cleverelephant.ca>

Pleased to report that we now have added GitHub actions to our ever growing zoo of CI platforms.

https://github.com/libgeos/geos/actions

Makes getting a PR tested nice and quick. We also have the comprehasive, 50 million test matrix in Azure Pipelines, but I wanted to have something like our existing Travis set that would complete fairly fast and test both CMake and autotools builds. So the Azure Pipelines yaml provided a good starting point and I cut it back and matched up the tests to Travis more. All the jobs run in parallel and it's not queing up, as Travis seems to do more and more. 

Unfortunately, unlike Travis, GH Actions does not have any nifty architecture options like ARM, but maybe that will change shortly as ARM cloud stuff seems to be happening quickly.

P.

From geos-trac at osgeo.org  Fri Nov  6 11:08:24 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 19:08:24 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.70dcbb324af2bf9df279fc0223947eea@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Sandro Santilli <strk@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"07e60468a9a155c63b06fa1e24db7c113f03004a/git" 07e6046/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="07e60468a9a155c63b06fa1e24db7c113f03004a"
 Fix segfault in SimplePointInAreaLocator caused by casting MultiPolygon to
 Polygon

 Closes #1047
 References https://github.com/cockroachdb/cockroach/issues/53254

 Signed-off-by: Sandro Santilli <strk at kbt.io>
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 11:11:17 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 19:11:17 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.13ffe3a644bf23d0225a2fd7a550ec60@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  closed => reopened
 * resolution:  fixed =>


Comment:

 I merged PR https://github.com/libgeos/geos/pull/334 in master (3.9.0) but
 needs to be backported to all affected branches still

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 11:31:19 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 19:31:19 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.cc8c3a146f31d5f6fdd976e612cf7ebc@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Sandro Santilli <strk@…>):

 * status:  reopened => closed
 * resolution:   => fixed


Comment:

 In [changeset:"dfceb3487c2edcba75dac8a47c0153c6ee585305/git" dfceb34/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="dfceb3487c2edcba75dac8a47c0153c6ee585305"
 Fix segfault in SimplePointInAreaLocator

 Backport of patch by Oliver Tan

 Closes #1047 in 3.8 branch (3.8.2dev)
 References https://github.com/cockroachdb/cockroach/issues/53254
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 11:31:46 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 19:31:46 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.1e5a554ccf6ff0353bf37b5f87f0add6@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Branch 3.7 (3.7.3) is not affected

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at kbt.io  Fri Nov  6 11:48:14 2020
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 6 Nov 2020 20:48:14 +0100
Subject: [geos-devel] GH Actions
In-Reply-To: <BC413709-BD11-4E8B-AAEA-0A062DC051D9@cleverelephant.ca>
References: <BC413709-BD11-4E8B-AAEA-0A062DC051D9@cleverelephant.ca>
Message-ID: <20201106194814.GD22163@lif>

On Fri, Nov 06, 2020 at 11:07:41AM -0800, Paul Ramsey wrote:
> Pleased to report that we now have added GitHub actions to our ever growing zoo of CI platforms.
> 
> https://github.com/libgeos/geos/actions

Great, could you add that to the wiki as well ?

Also, since you're having fun with actions, can you see if there's
a way to attach an action to the "merge" green button, for having it
do something different (for a start: nothing, eventually: ping a web
url which will do the right thing).

> Unfortunately, unlike Travis, GH Actions does not have any nifty architecture options like ARM, but maybe that will change shortly as ARM cloud stuff seems to be happening quickly.

In case anyone missed it: Drone supports ARM since 2018, we may look
at using that:
https://blog.drone.io/drone-announces-official-support-for-arm/

--strk;


From geos-trac at osgeo.org  Fri Nov  6 12:34:22 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 20:34:22 -0000
Subject: [geos-devel] [GEOS] #976: Voronoi polygons robustness issue
In-Reply-To: <044.397241d066e8505928206efe983c3c43@osgeo.org>
References: <044.397241d066e8505928206efe983c3c43@osgeo.org>
Message-ID: <059.4b46d10c8aa61ac8692775c865950786@osgeo.org>

#976: Voronoi polygons robustness issue
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by Sandro Santilli <strk@…>):

 In [changeset:"26cd4782faf7451c7a3df6a33a462b2669ef5153/git" 26cd478/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="26cd4782faf7451c7a3df6a33a462b2669ef5153"
 Remove incorrect isoceles heuristic in
 QuadEdgeSubdivision::TriangleCircumcentreVisitor, fix unit test

 References #976 in master (3.9.0dev)
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/976#comment:25>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 12:37:00 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 20:37:00 -0000
Subject: [geos-devel] [GEOS] #976: Voronoi polygons robustness issue
In-Reply-To: <044.397241d066e8505928206efe983c3c43@osgeo.org>
References: <044.397241d066e8505928206efe983c3c43@osgeo.org>
Message-ID: <059.cefa3762b8c78612ca2e1f04201393b0@osgeo.org>

#976: Voronoi polygons robustness issue
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Sandro Santilli <strk@…>):

 * status:  reopened => closed
 * resolution:   => fixed


Comment:

 In [changeset:"e4a0126ab5b3eabafb8d805544a3f3af299acfbe/git" e4a0126/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="e4a0126ab5b3eabafb8d805544a3f3af299acfbe"
 Remove incorrect isoceles heuristic in
 QuadEdgeSubdivision::TriangleCircumcentreVisitor

 Fix related unit test

 Closes #976 in 3.8 branch (3.8.2dev)

 The heuristic was added with 56417ce55
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/976#comment:26>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 12:40:48 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 06 Nov 2020 20:40:48 -0000
Subject: [geos-devel] [GEOS] #859: Voronoi issue
In-Reply-To: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
References: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
Message-ID: <060.4518592db8e0ff0d7d8a66bc572a732d@osgeo.org>

#859: Voronoi issue
------------------------+---------------------------
 Reporter:  jjgreen     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Time to re-test this against master or 3.8 branches (see
 https://trac.osgeo.org/geos/ticket/976#comment:25)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/859#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 16:07:33 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 07 Nov 2020 00:07:33 -0000
Subject: [geos-devel] [GEOS] #1024: ttmath is platform dependent
In-Reply-To: <045.631fdcaf4aab7ff072b004288e7eae07@osgeo.org>
References: <045.631fdcaf4aab7ff072b004288e7eae07@osgeo.org>
Message-ID: <060.72d076cf8154324d11f02f7479a4e3af@osgeo.org>

#1024: ttmath is platform dependent
------------------------+---------------------------
 Reporter:  pramsey     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.2
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Replaced with DD in master, leaving as is on 3.8 until someone has a
 problem.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1024#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov  6 16:50:57 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 07 Nov 2020 00:50:57 -0000
Subject: [geos-devel] [GEOS] #859: Voronoi issue
In-Reply-To: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
References: <045.eb68cecd0b7332a162029ded2e367592@osgeo.org>
Message-ID: <060.06225becb40c30ade2a4186ec5d79b02@osgeo.org>

#859: Voronoi issue
------------------------+---------------------------
 Reporter:  jjgreen     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 I did run this against master as a C++ unit test (but didn't commit it
 because data is so large).  I can commit it if that seems like a good idea
 (there is a unit test which is a subset of this data though).

 Or, have been thinking about adding ability to run Delaunay and Voronoi as
 XML tests (should be fairly easy).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/859#comment:11>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Nov  7 03:37:54 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 07 Nov 2020 11:37:54 -0000
Subject: [geos-devel] [GEOS] #1063: Port OverlayNG Z handling from JTS
In-Reply-To: <042.8250135be9e8a324b6061aef49192332@osgeo.org>
References: <042.8250135be9e8a324b6061aef49192332@osgeo.org>
Message-ID: <057.23a8f10f025346b9722f530d14c2cddf@osgeo.org>

#1063: Port OverlayNG Z handling from JTS
------------------------+---------------------
 Reporter:  strk        |       Owner:  strk
     Type:  task        |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------
Changes (by strk):

 * status:  assigned => new
 * priority:  major => blocker
 * owner:  geos-devel@… => strk


Comment:

 Port in progress: https://git.osgeo.org/gitea/geos/geos/pulls/108

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1063#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From dbaston at gmail.com  Wed Nov 11 17:04:14 2020
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 11 Nov 2020 20:04:14 -0500
Subject: [geos-devel] OverlayNG as Default
In-Reply-To: <CACowWR3NdzJ6Lu++0SnEGUw9botzoECOwnowQdtpz+3T6wv2Zg@mail.gmail.com>
References: <CACowWR03Dz614d_KGySSKqAR+zfpJTm7d-gk3Xge9yKm+yfhUA@mail.gmail.com>
 <003001d6aef8$a4f6d2d0$eee47870$@pcorp.us>
 <CACowWR3NdzJ6Lu++0SnEGUw9botzoECOwnowQdtpz+3T6wv2Zg@mail.gmail.com>
Message-ID: <CA+K_q_qaryhQYqH_CkFhvKa=Y4q0CmqzPVH-oXMNQVOsipHZzA@mail.gmail.com>

This strikes me as a big deal - any thoughts on calling the next release
GEOS 4?

Dan

On Tue, Nov 3, 2020 at 5:45 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> The switch has been flipped.
> If you build GEOS without any options, you will get the OverlayNG engine
> backing the standard geometry functions.
>
> geom->union()
> geom->intersection()
> geom->symdifference()
> geom->difference()
> geom->unaryunion()
>
> The unit and XML tests that differed from the old engine have been updated
> to match the new NG outputs. That means if you use the --disable-overlayng
> option in autotools or the DISABLE_OVERLAYNG option in cmake, not all tests
> will pass anymore. NG is the new normal.
>
> P.
>
> On Fri, Oct 30, 2020 at 1:10 PM Regina Obe <lr at pcorp.us> wrote:
>
>> +1 for flipping the switch.
>>
>>
>>
>> I don’t know what “light your hair on fair”   means J
>>
>>
>>
>>
>>
>> *From:* geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] *On
>> Behalf Of *Paul Ramsey
>> *Sent:* Friday, October 30, 2020 3:47 PM
>> *To:* GEOS Development List <geos-devel at lists.osgeo.org>
>> *Subject:* [geos-devel] OverlayNG as Default
>>
>>
>>
>> OK, it's been a while, and I'd like to flip over GEOS master to use
>> OverlayNG as the engine behind
>>
>>
>>
>> Geometry.intersection()
>>
>> Geometry.difference()
>>
>> Geometry.union()
>>
>> Geometry.symdifference()
>>
>> Geometry.unaryunion()
>>
>>
>>
>> That will entail changing the expected outputs for a few of the
>> regression tests, as detailed here.
>>
>>
>>
>>
>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#heading=h.ojs23hjdmk7a
>>
>>
>>
>> Once that is done, regressions in PostGIS and other downstream projects
>> can be #ifdef'ed around GEOS version. As seen in the document above, there
>> actually aren't than many cases that need special handling in PostGIS, and
>> hopefully not in other downstream projects.
>>
>>
>>
>> If you have any concerns, please light your hair on fair in the next
>> couple days.
>>
>>
>>
>> P.
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201111/56d36178/attachment.html>

From pramsey at cleverelephant.ca  Wed Nov 11 17:33:32 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 11 Nov 2020 17:33:32 -0800
Subject: [geos-devel] OverlayNG as Default
In-Reply-To: <CA+K_q_qaryhQYqH_CkFhvKa=Y4q0CmqzPVH-oXMNQVOsipHZzA@mail.gmail.com>
References: <CACowWR03Dz614d_KGySSKqAR+zfpJTm7d-gk3Xge9yKm+yfhUA@mail.gmail.com>
 <003001d6aef8$a4f6d2d0$eee47870$@pcorp.us>
 <CACowWR3NdzJ6Lu++0SnEGUw9botzoECOwnowQdtpz+3T6wv2Zg@mail.gmail.com>
 <CA+K_q_qaryhQYqH_CkFhvKa=Y4q0CmqzPVH-oXMNQVOsipHZzA@mail.gmail.com>
Message-ID: <CACowWR0Su0pShY4K4oD19vhzqfze5Fgi=AVxb9ruTFjEMnJh3w@mail.gmail.com>

It’s a big feature deal but I tend towards wanting to stick to semver...
not until we break backwards compatibility

On Wed, Nov 11, 2020 at 5:04 PM Daniel Baston <dbaston at gmail.com> wrote:

> This strikes me as a big deal - any thoughts on calling the next release
> GEOS 4?
>
> Dan
>
> On Tue, Nov 3, 2020 at 5:45 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>> The switch has been flipped.
>> If you build GEOS without any options, you will get the OverlayNG engine
>> backing the standard geometry functions.
>>
>> geom->union()
>> geom->intersection()
>> geom->symdifference()
>> geom->difference()
>> geom->unaryunion()
>>
>> The unit and XML tests that differed from the old engine have been
>> updated to match the new NG outputs. That means if you use the
>> --disable-overlayng option in autotools or the DISABLE_OVERLAYNG option in
>> cmake, not all tests will pass anymore. NG is the new normal.
>>
>> P.
>>
>> On Fri, Oct 30, 2020 at 1:10 PM Regina Obe <lr at pcorp.us> wrote:
>>
>>> +1 for flipping the switch.
>>>
>>>
>>>
>>> I don’t know what “light your hair on fair”   means J
>>>
>>>
>>>
>>>
>>>
>>> *From:* geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] *On
>>> Behalf Of *Paul Ramsey
>>> *Sent:* Friday, October 30, 2020 3:47 PM
>>> *To:* GEOS Development List <geos-devel at lists.osgeo.org>
>>> *Subject:* [geos-devel] OverlayNG as Default
>>>
>>>
>>>
>>> OK, it's been a while, and I'd like to flip over GEOS master to use
>>> OverlayNG as the engine behind
>>>
>>>
>>>
>>> Geometry.intersection()
>>>
>>> Geometry.difference()
>>>
>>> Geometry.union()
>>>
>>> Geometry.symdifference()
>>>
>>> Geometry.unaryunion()
>>>
>>>
>>>
>>> That will entail changing the expected outputs for a few of the
>>> regression tests, as detailed here.
>>>
>>>
>>>
>>>
>>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#heading=h.ojs23hjdmk7a
>>>
>>>
>>>
>>> Once that is done, regressions in PostGIS and other downstream projects
>>> can be #ifdef'ed around GEOS version. As seen in the document above, there
>>> actually aren't than many cases that need special handling in PostGIS, and
>>> hopefully not in other downstream projects.
>>>
>>>
>>>
>>> If you have any concerns, please light your hair on fair in the next
>>> couple days.
>>>
>>>
>>>
>>> P.
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201111/cbed7ad3/attachment.html>

From geos-trac at osgeo.org  Thu Nov 12 09:41:54 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 12 Nov 2020 17:41:54 -0000
Subject: [geos-devel] [GEOS] #1044: [OverlayNG]
	general/TestOverlayAAPrec.xml fails
In-Reply-To: <042.41eede8a55ce5383d56decf52e1cef67@osgeo.org>
References: <042.41eede8a55ce5383d56decf52e1cef67@osgeo.org>
Message-ID: <057.597a0831e139daa103c5ffcd1d64b415@osgeo.org>

#1044: [OverlayNG] general/TestOverlayAAPrec.xml fails
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 With the default switchover and accepting NG results for a few cases, this
 should be gone.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1044#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From bcward at astutespruce.com  Fri Nov 13 08:41:05 2020
From: bcward at astutespruce.com (Brendan Ward)
Date: Fri, 13 Nov 2020 08:41:05 -0800
Subject: [geos-devel] Port of PostGIS ST_Subdivide to GEOS / downstream
	libraries
Message-ID: <CAENuiqSh9MmqbQgxtUT3qpK66dTNk44fsV0RBrK1N4wqMpAHoA@mail.gmail.com>

I would like to expose functionality similar to ST_Subdivide (
https://postgis.net/docs/ST_Subdivide.html) in pygeos (ref:
https://github.com/pygeos/pygeos/issues/244), which provides a Python
interface to GEOS.

The algorithm recursively subdivides input geometries along alternating x
vs y dimensions until a target number of vertices per geometry is
reached, which can greatly improve spatial index performance for complex
polygons (e.g., countries with coastlines).  Paul has written a very nice
overview of it here: http://blog.cleverelephant.ca/2019/11/subdivide.html

Apologies if this has already been raised here; I was unable to find any
record of such a discussion in Github, Trac, mailing list archives.

I did not find a counterpart in JTS, so perhaps this is out of scope for
GEOS?

While we can take this on in a downstream library (and indeed may want to
pilot there first), this seems like it would have broader appeal to the
GEOS community if exposed via the C API.  There may also be potential
performance improvements to leveraging aspects of something like STRtree to
help identify x or y subdivision points (ideas not yet well developed
though).

Is there any interest in providing something similar within GEOS?  If so,
perhaps the next stage is to log this as a feature request to Trac.  I
anticipated the need for a little discussion around this topic, so I'm
raising here first.

Thanks,

BCW

-- 
Brendan C. Ward
Owner | Lead Software Engineer
Astute Spruce, LLC
astutespruce.com
541-250-9544
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201113/1acbbaf2/attachment.html>

From dbaston at gmail.com  Fri Nov 13 08:54:26 2020
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 13 Nov 2020 11:54:26 -0500
Subject: [geos-devel] Port of PostGIS ST_Subdivide to GEOS / downstream
	libraries
In-Reply-To: <CAENuiqSh9MmqbQgxtUT3qpK66dTNk44fsV0RBrK1N4wqMpAHoA@mail.gmail.com>
References: <CAENuiqSh9MmqbQgxtUT3qpK66dTNk44fsV0RBrK1N4wqMpAHoA@mail.gmail.com>
Message-ID: <CA+K_q_ofOHsx8Do+N9XjBY21xPCsTN-VyGeMmBb+BTGA72Otrg@mail.gmail.com>

Hi Brendan,

I don't remember it being discussed anywhere, but it's certainly been
floating around in my head for a while. I think it's very much worth
pursuing.

Dan

On Fri, Nov 13, 2020 at 11:41 AM Brendan Ward <bcward at astutespruce.com>
wrote:

> I would like to expose functionality similar to ST_Subdivide (
> https://postgis.net/docs/ST_Subdivide.html) in pygeos (ref:
> https://github.com/pygeos/pygeos/issues/244), which provides a Python
> interface to GEOS.
>
> The algorithm recursively subdivides input geometries along alternating x
> vs y dimensions until a target number of vertices per geometry is
> reached, which can greatly improve spatial index performance for complex
> polygons (e.g., countries with coastlines).  Paul has written a very nice
> overview of it here: http://blog.cleverelephant.ca/2019/11/subdivide.html
>
> Apologies if this has already been raised here; I was unable to find any
> record of such a discussion in Github, Trac, mailing list archives.
>
> I did not find a counterpart in JTS, so perhaps this is out of scope for
> GEOS?
>
> While we can take this on in a downstream library (and indeed may want to
> pilot there first), this seems like it would have broader appeal to the
> GEOS community if exposed via the C API.  There may also be potential
> performance improvements to leveraging aspects of something like STRtree to
> help identify x or y subdivision points (ideas not yet well developed
> though).
>
> Is there any interest in providing something similar within GEOS?  If so,
> perhaps the next stage is to log this as a feature request to Trac.  I
> anticipated the need for a little discussion around this topic, so I'm
> raising here first.
>
> Thanks,
>
> BCW
>
> --
> Brendan C. Ward
> Owner | Lead Software Engineer
> Astute Spruce, LLC
> astutespruce.com
> 541-250-9544
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201113/3e4f3bee/attachment.html>

From geos-trac at osgeo.org  Mon Nov 16 01:46:21 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 16 Nov 2020 09:46:21 -0000
Subject: [geos-devel] [GEOS] #1014: geos-config for Windows?
In-Reply-To: <045.20784e1706db7c8979c6b8632a640f28@osgeo.org>
References: <045.20784e1706db7c8979c6b8632a640f28@osgeo.org>
Message-ID: <060.459aa89d06750f4df13a835e699fb4d9@osgeo.org>

#1014: geos-config for Windows?
-----------------------------------+---------------------------
 Reporter:  Mike Taves             |       Owner:  geos-devel@…
     Type:  enhancement            |      Status:  closed
 Priority:  major                  |   Milestone:  3.9.0
Component:  Build/Install (cmake)  |     Version:  master
 Severity:  Unassigned             |  Resolution:  wontfix
 Keywords:                         |
-----------------------------------+---------------------------
Changes (by Mike Taves):

 * status:  new => closed
 * resolution:   => wontfix


Comment:

 While technically feasible, this idea may not be the best for a long term
 strategy.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1014#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 16 01:59:02 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 16 Nov 2020 09:59:02 -0000
Subject: [geos-devel] [GEOS] #1068: Fix CMake Windows install: keep
	geos-config.cmake
Message-ID: <045.4862fdd97e05f862c7442084dc10152b@osgeo.org>

#1068: Fix CMake Windows install: keep geos-config.cmake
-----------------------------------+--------------------------
 Reporter:  Mike Taves             |      Owner:  geos-devel@…
     Type:  defect                 |     Status:  new
 Priority:  blocker                |  Milestone:
Component:  Build/Install (cmake)  |    Version:  master
 Severity:  Unassigned             |   Keywords:
-----------------------------------+--------------------------
 For a correct Windows install, `geos-config.cmake` needs to be installed.
 This file is not related to the non-Windows `geos-config` utility.

 This is a partial rollback of daf24a4d4025b9068a6f0354da981270182fbdb4

 See https://github.com/libgeos/geos/pull/347

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1068>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 23 13:34:07 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 23 Nov 2020 21:34:07 -0000
Subject: [geos-devel] [GEOS] #1071: Setting lower precision of polygon
 always collapses polygon
Message-ID: <044.55e9d893438e1d38a887811e67ed8222@osgeo.org>

#1071: Setting lower precision of polygon always collapses polygon
--------------------------+--------------------------
 Reporter:  Brendan Ward  |      Owner:  geos-devel@?
     Type:  defect        |     Status:  new
 Priority:  major         |  Milestone:
Component:  Default       |    Version:  3.5.1
 Severity:  Unassigned    |   Keywords:
--------------------------+--------------------------
 Used via C API GEOSGeom_setPrecision_r.

 Given an input polygon WKT: "POLYGON ((0 0, 0.1 0, 0.1 0.1, 0 0.1, 0 0))"
 and a gridSize of 1.

 With flags unset (0), this causes the polygon to collapse to an empty
 polygon (expected): "POLYGON EMPTY"

 With flags set to keep collapsed elements, the polygon is still collapsed
 to an empty polygon (unexpected).

 The expected output is "POLYGON ((0 0, 0 0, 0 0, 0 0, 0 0))".

 In contrast, a linear ring behaves as expected.  Given an input of
 "LINEARRING (0 0, 0.1 0, 0.1 0.1, 0 0.1, 0 0)":

 flag not set: "LINEARRING EMPTY"
 flag set: "LINEARRING (0 0, 0 0, 0 0, 0 0, 0 0)"

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1071>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 23 13:39:51 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 23 Nov 2020 21:39:51 -0000
Subject: [geos-devel] [GEOS] #1072: Setting precision of topologically
 invalid polygon returns incomplete results when preserving topology
Message-ID: <044.4bcef68f343a0451073e2084f034bc36@osgeo.org>

#1072: Setting precision of topologically invalid polygon returns incomplete
results when preserving topology
--------------------------+--------------------------
 Reporter:  Brendan Ward  |      Owner:  geos-devel@?
     Type:  defect        |     Status:  new
 Priority:  major         |  Milestone:
Component:  Default       |    Version:  3.5.1
 Severity:  Unassigned    |   Keywords:
--------------------------+--------------------------
 Used via C API GEOSGeom_setPrecision_r.


 Given an invalid input polygon (bowtie): "POLYGON((0 0, 2.1 2.1, 2.1 0, 0
 2.1, 0 0))" and a gridSize of 1.

 If flag is set to not preserve topology, a topologically invalid polygon
 is emitted as expected: "POLYGON((0 0, 2 2, 2 0, 0 2, 0 0))"

 If flag is set to preserve topology, only one of the expected polygons is
 emitted: "POLYGON ((1 1, 2 2, 2 0, 1 1))"

 The expected result is a multi polygon: "MULTIPOLYGON (((1 1, 0 0, 0 2, 1
 1)), ((1 1, 2 2, 2 0, 1 1)))"

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1072>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 23 16:29:09 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 24 Nov 2020 00:29:09 -0000
Subject: [geos-devel] [GEOS] #1071: Setting lower precision of polygon
 always collapses polygon
In-Reply-To: <044.55e9d893438e1d38a887811e67ed8222@osgeo.org>
References: <044.55e9d893438e1d38a887811e67ed8222@osgeo.org>
Message-ID: <059.dcd5e6076b646f24c0c6aefa156f701b@osgeo.org>

#1071: Setting lower precision of polygon always collapses polygon
--------------------------+---------------------------
 Reporter:  Brendan Ward  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  major         |   Milestone:
Component:  Default       |     Version:  3.5.1
 Severity:  Unassigned    |  Resolution:
 Keywords:                |
--------------------------+---------------------------

Comment (by mdavis):

 The goal of GEOS operations is to always produce valid output.  A polygon
 with zero extent is invalid, so the closest valid result is `POLYGON
 EMPTY`.  Another way to put this is that if a polygon collapses completely
 due to rounding, it disappears rather than becoming a point.

 The collapsed LinearRing result is in fact also invalid.  So probably the
 current result  is out of spec, and should be changed to become
 `LINEARRING EMPTY`.  (In fact this should be the behaviour of the latest
 GEOS version incorporating OverlayNG).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1071#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 23 16:32:16 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 24 Nov 2020 00:32:16 -0000
Subject: [geos-devel] [GEOS] #1072: Setting precision of topologically
 invalid polygon returns incomplete results when preserving topology
In-Reply-To: <044.4bcef68f343a0451073e2084f034bc36@osgeo.org>
References: <044.4bcef68f343a0451073e2084f034bc36@osgeo.org>
Message-ID: <059.8a2fc35e6db39572e605fa4b33a2934d@osgeo.org>

#1072: Setting precision of topologically invalid polygon returns incomplete
results when preserving topology
--------------------------+---------------------------
 Reporter:  Brendan Ward  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  major         |   Milestone:
Component:  Default       |     Version:  3.5.1
 Severity:  Unassigned    |  Resolution:
 Keywords:                |
--------------------------+---------------------------

Comment (by mdavis):

 Generally speaking, GEOS operations require valid input.  For invalid
 input the result is usually undefined (or in some cases an error).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1072#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 23 16:39:37 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 24 Nov 2020 00:39:37 -0000
Subject: [geos-devel] [GEOS] #1071: Setting lower precision of polygon
 always collapses polygon
In-Reply-To: <044.55e9d893438e1d38a887811e67ed8222@osgeo.org>
References: <044.55e9d893438e1d38a887811e67ed8222@osgeo.org>
Message-ID: <059.c6e3c937a5501112f7eaa02c55efa3eb@osgeo.org>

#1071: Setting lower precision of polygon always collapses polygon
--------------------------+---------------------------
 Reporter:  Brendan Ward  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  major         |   Milestone:
Component:  Default       |     Version:  3.5.1
 Severity:  Unassigned    |  Resolution:
 Keywords:                |
--------------------------+---------------------------

Comment (by Brendan Ward):

 It might be useful to clarify the intent of the flag to keep collapsed
 elements; it is not clear what collapsed elements should be retained,
 since their collapse implies that they are no longer toplogically valid.

 Decisions here also affect line strings as well.  Given an input of
 "LINESTRING (0 0, 0.1 0.1)" and gridSize of 1, with this flag set, it
 returns "LINESTRING (0 0, 0 0)", which is not valid (according to
 GEOSisValid_r).

 (have not tested on 3.9 / master)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1071#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov 24 02:31:48 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 24 Nov 2020 10:31:48 -0000
Subject: [geos-devel] [GEOS] #1073: Feature: add support for pkg-config for
 GEOS C API (only)
Message-ID: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>

#1073: Feature: add support for pkg-config for GEOS C API (only)
------------------------+--------------------------
 Reporter:  Mike Taves  |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.6.2
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 This feature adds support for [https://www.freedesktop.org/wiki/Software
 /pkg-config/ pkg-config], which is a helper tool used when compiling
 applications and libraries on *nix systems. It is similar to `geos-
 config`, but is more widespread and generic.

 See https://github.com/libgeos/geos/pull/349

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1073>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov 24 02:34:05 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 24 Nov 2020 10:34:05 -0000
Subject: [geos-devel] [GEOS] #1073: Feature: add support for pkg-config
 for GEOS C API (only)
In-Reply-To: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>
References: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>
Message-ID: <060.e7bbec9b38702aa074e04df5f35b527a@osgeo.org>

#1073: Feature: add support for pkg-config for GEOS C API (only)
-------------------------+---------------------------
 Reporter:  Mike Taves   |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:
Component:  Default      |     Version:  master
 Severity:  Idea         |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by Mike Taves):

 * version:  3.6.2 => master
 * type:  defect => enhancement
 * severity:  Unassigned => Idea


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1073#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Nov 24 10:42:51 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 24 Nov 2020 18:42:51 -0000
Subject: [geos-devel] [GEOS] #1074: Setting precision on some but not all
 geometries causes intersection results to use the smallest nonzero gridSize
Message-ID: <044.84adff160bac2782c8db75ca6941cc85@osgeo.org>

#1074: Setting precision on some but not all geometries causes intersection
results to use the smallest nonzero gridSize
--------------------------+--------------------------
 Reporter:  Brendan Ward  |      Owner:  geos-devel@?
     Type:  defect        |     Status:  new
 Priority:  major         |  Milestone:
Component:  Default       |    Version:  3.8.0
 Severity:  Unassigned    |   Keywords:
--------------------------+--------------------------
 According to the comments in "geos_c.h.in" for GEOSGeom_setPrecision_r:
 "
  * Note that operations will always be performed in the precision
  * of the geometry with higher precision (smaller "gridSize").
  * That same precision will be attached to the operation outputs.
 "

 Given inputs:
 * "POLYGON ((0 0, 0 0.9, 0.9 0.9, 0.9 0, 0 0))"
 * "POLYGON ((0.75 0, 0.75 0.75, 1.75 0.75, 1.75 0, 0.75 0))"

 I then used GEOSGeom_setPrecision_r with a gridSize of 0.5 for the first
 geometry, which returns
 "POLYGON ((0 0, 0 1, 1 1, 1 0, 0 0))", and reports a gridSize of 0.5 via
 GEOSGeom_getPrecision_r.

 Performing an intersection via GEOSIntersection_r, I get back
 "POLYGON ((1 0.75, 1 0, 0.75 0, 0.75 0.75, 1 0.75))"
 which reports a gridSize of 0.5 (second geometry reports a gridSize of 0).

 If I then set a precision of 1 on the second geometry, which produces:
 "POLYGON ((1 0, 1 1, 2 1, 2 0, 1 0))" (second geometry then reports a
 gridSize of 1)

 I get back "LINESTRING (1 1, 1 0)" from intersection, which reports a
 gridSize of 0.5


 This may be expected behavior, but the comment in the code implies that
 the higher precision, in this case full precision as denoted by a gridSize
 of 0, would be used.  If so, perhaps the comment could be clarified to
 note something like:
 * if inputs both have nonzero gridSize, operations will be performed using
 the higher precision (smaller "gridSize").
 * if one but not all of the inputs have a nonzero gridSize, and others
 have a gridSize of 0, the smallest gridSize will be used.


 (only tested on GEOS 3.8 via C API)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1074>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Tue Nov 24 15:44:20 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 24 Nov 2020 15:44:20 -0800
Subject: [geos-devel] Update to 3.9?
Message-ID: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>

Hey all, just truing up what's underway and nearly there...

- Am I right that Z coordinates are nearly done? What's the status there?

I've been trying to address some performance issues, with some success and some ... other things. 

The success is the SimpleSTRtree, which is just the current STRtree but without the inheritance structure and with the nodes stored all next to each other in contiguous memory for more locality. For at least one use case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I have pushed the SimpleSTRtree into master.

While I have implemented the nearestNeighbor() functionality on the SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the IndexedFacetDistance, if anyone is super enthusiastic about it. From there it would affect searching in PreparedGeometry of various sorts.

I also tried using a similar trick with the MonotoneChainBuilder that sits inside the MCIndexNoder, replacing individual heap allocations with slabs by putting objects onto a std::deque, and incidentally stripping out some book-keeping. While that seems to pick up about 3-5% speedwise, unfortunately something about my implementation is incorrect (and in a wonderfully subtle way) as it fails testing on some platforms (not mine). https://github.com/pramsey/geos/tree/monotone-chain-builder

I've put that work to the side for now.

All the performance talk is mostly because JTS still runs a lot faster than GEOS for some bulk processing. My current test is a big union of watershed boundaries, about 6MB of data, which takes about 20s under GEOS and about 25% of that under JTS.  It's a big gap, and in theory the two code bases are pretty aligned right now. Same overlayNG engine, etc. So I figure there has to be a big implementation ball of performance hiding under the covers somewhere. No luck thus far.

I think we're close, looking forward to release :)

P

From lr at pcorp.us  Tue Nov 24 17:01:31 2020
From: lr at pcorp.us (Regina Obe)
Date: Tue, 24 Nov 2020 20:01:31 -0500
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
Message-ID: <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>


> All the performance talk is mostly because JTS still runs a lot faster
than GEOS
> for some bulk processing. My current test is a big union of watershed
> boundaries, about 6MB of data, which takes about 20s under GEOS and
> about 25% of that under JTS.  It's a big gap, and in theory the two code
bases
> are pretty aligned right now. Same overlayNG engine, etc. So I figure
there
> has to be a big implementation ball of performance hiding under the covers
> somewhere. No luck thus far.
> 
> I think we're close, looking forward to release :)
> 
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

You have your sample watershed data set.  Would like to test it out myself.

Thanks,
Regina


From strk at kbt.io  Wed Nov 25 04:35:31 2020
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 25 Nov 2020 13:35:31 +0100
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
Message-ID: <20201125123531.GB7935@cdb>

On Tue, Nov 24, 2020 at 03:44:20PM -0800, Paul Ramsey wrote:
> Hey all, just truing up what's underway and nearly there...
> 
> - Am I right that Z coordinates are nearly done? What's the status there?

I plan to port the last bit of this eary next week.

--strk;

From strk at kbt.io  Wed Nov 25 05:02:57 2020
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 25 Nov 2020 14:02:57 +0100
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <20201125123531.GB7935@cdb>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <20201125123531.GB7935@cdb>
Message-ID: <20201125130257.GB18555@cdb>

On Wed, Nov 25, 2020 at 01:35:31PM +0100, Sandro Santilli wrote:
> On Tue, Nov 24, 2020 at 03:44:20PM -0800, Paul Ramsey wrote:
> > Hey all, just truing up what's underway and nearly there...
> > 
> > - Am I right that Z coordinates are nearly done? What's the status there?
> 
> I plan to port the last bit of this eary next week.

For the record: this is tracked by
https://trac.osgeo.org/geos/ticket/1070
which I marked as blocker for release

Is reported to be the only blocker for 3.9.0 (please mark any other
ticket as blocker for easier management):
https://trac.osgeo.org/geos/query?priority=blocker&status=assigned&status=new&status=reopened&milestone=3.9.0&col=id&col=summary&col=status&col=priority&col=owner&col=type&col=milestone&order=priority

--strk;

From geos-trac at osgeo.org  Wed Nov 25 08:38:54 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 25 Nov 2020 16:38:54 -0000
Subject: [geos-devel] [GEOS] #1044: [OverlayNG]
 general/TestOverlayAAPrec.xml fails
In-Reply-To: <042.41eede8a55ce5383d56decf52e1cef67@osgeo.org>
References: <042.41eede8a55ce5383d56decf52e1cef67@osgeo.org>
Message-ID: <057.29ff2e78505dcb7fd1a22827b805cd31@osgeo.org>

#1044: [OverlayNG] general/TestOverlayAAPrec.xml fails
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * status:  new => closed
 * resolution:   => fixed


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1044#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Nov 25 08:47:19 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 25 Nov 2020 16:47:19 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
In-Reply-To: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
References: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
Message-ID: <063.41c1310b1eb704ce1511e25fddf876e9@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+---------------------------
 Reporter:  dannytoone   |       Owner:  geos-devel@?
     Type:  defect       |      Status:  closed
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.8.0
 Severity:  Significant  |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by pramsey):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Ran all these cases through PostGIS/GEOS 3.9 and they all processed
 without exceptions. Thanks for the sample data!

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Wed Nov 25 08:54:49 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 25 Nov 2020 08:54:49 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
Message-ID: <CAK2ens3ap8s=iqjqTmTDhizK2PA+mg5+bANYE=csZZjgOw8-hQ@mail.gmail.com>

On Tue, Nov 24, 2020 at 3:44 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
> - Am I right that Z coordinates are nearly done? What's the status there?
>

I'm going to say that the JTS Z work is functionally complete.  It
interpolates Z values where possible, and populates missing Z values from
an ElevationModel patterned after the one currently in GEOS.  I think GEOS
does interpolation along a line as well, but that seems questionable to me,
so have not implemented that.

So the final step is to finish porting the JTS code to GEOS, and then try
out the code in PostGIS. No idea how that will match up to the Z unit tests
in PostGIS - but I'm not sure they are based on any actual requirements
anyway?

>
> The success is the SimpleSTRtree, which is just the current STRtree but
> without the inheritance structure and with the nodes stored all next to
> each other in contiguous memory for more locality. For at least one use
> case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place
> of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I
> have pushed the SimpleSTRtree into master.
>
> Nice work.

>
> All the performance talk is mostly because JTS still runs a lot faster
> than GEOS for some bulk processing. My current test is a big union of
> watershed boundaries, about 6MB of data, which takes about 20s under GEOS
> and about 25% of that under JTS.  It's a big gap, and in theory the two
> code bases are pretty aligned right now. Same overlayNG engine, etc. So I
> figure there has to be a big implementation ball of performance hiding
> under the covers somewhere. No luck thus far.
>

That's quite a difference.  Maybe the JVM JIT really is magic?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201125/a20fb50b/attachment.html>

From mwtoews at gmail.com  Wed Nov 25 13:36:35 2020
From: mwtoews at gmail.com (Mike Taves)
Date: Thu, 26 Nov 2020 10:36:35 +1300
Subject: [geos-devel] Drop SWIG bindings
Message-ID: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>

Hi all,

SWIG bindings have existed as part of the core GEOS library since
early development, however they have not received much attention in
many years.

I've (quickly) prepared two options for consideration:

Option one: Drop Python SWIG bindings
https://github.com/mwtoews/geos/pull/1

This keeps the SWIG interface for Ruby bindings, which is packed by
(e.g.) Ubuntu; see https://packages.ubuntu.com/xenial/ruby/ruby-geos
However, it drops the unsupported Python 2 SWIG bindings. Python users
can use either Shapely or PyGEOS.

Option two: Drop SWIG bindings, including for Ruby and Python
https://github.com/mwtoews/geos/pull/2

This drops the whole SWIG interface.
Note that Ruby users can access GEOS bindings via RGeo
https://github.com/rgeo/rgeo, which has a steady history of active
contributions; see https://github.com/rgeo/rgeo/graphs/contributors
Another idea is to move the SWIG Ruby bindings into a separate repo,
similar to php-geos https://git.osgeo.org/gitea/geos/php-geos, however
this would require a volunteer to step in.

Any thoughts to either proposal? And if so, whether this should happen
before or after the next release?

From lr at pcorp.us  Wed Nov 25 14:13:32 2020
From: lr at pcorp.us (Regina Obe)
Date: Wed, 25 Nov 2020 17:13:32 -0500
Subject: [geos-devel] Drop SWIG bindings
In-Reply-To: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
References: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
Message-ID: <004801d6c378$36a28240$a3e786c0$@pcorp.us>

+1 to Option two - Drop Python and Ruby SWIG.

I agree I think most Python users digest their GEOS via Shapely.  It's
better to have one very supported interface than confuse users with 2 one of
which is not maintained.

As far as Ruby -- I'll just take your word for It on that one.  I've never
used Ruby except for the asci doctor bit.



> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Mike Taves
> Sent: Wednesday, November 25, 2020 4:37 PM
> To: geos-devel at lists.osgeo.org
> Subject: [geos-devel] Drop SWIG bindings
> 
> Hi all,
> 
> SWIG bindings have existed as part of the core GEOS library since early
> development, however they have not received much attention in many
> years.
> 
> I've (quickly) prepared two options for consideration:
> 
> Option one: Drop Python SWIG bindings
> https://github.com/mwtoews/geos/pull/1
> 
> This keeps the SWIG interface for Ruby bindings, which is packed by
> (e.g.) Ubuntu; see https://packages.ubuntu.com/xenial/ruby/ruby-geos
> However, it drops the unsupported Python 2 SWIG bindings. Python users
> can use either Shapely or PyGEOS.
> 
> Option two: Drop SWIG bindings, including for Ruby and Python
> https://github.com/mwtoews/geos/pull/2
> 
> This drops the whole SWIG interface.
> Note that Ruby users can access GEOS bindings via RGeo
> https://github.com/rgeo/rgeo, which has a steady history of active
> contributions; see https://github.com/rgeo/rgeo/graphs/contributors
> Another idea is to move the SWIG Ruby bindings into a separate repo,
similar
> to php-geos https://git.osgeo.org/gitea/geos/php-geos, however this would
> require a volunteer to step in.
> 
> Any thoughts to either proposal? And if so, whether this should happen
> before or after the next release?
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Nov 25 14:29:08 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 25 Nov 2020 14:29:08 -0800
Subject: [geos-devel] Drop SWIG bindings
In-Reply-To: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
References: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
Message-ID: <CAK2ens3GQRn_wz5QQ8SsEdeCyJU7vdm-G4jn3TASk7j0-tV-sQ@mail.gmail.com>

+1 to dropping the SWIG bindings.

On Wed, Nov 25, 2020 at 1:37 PM Mike Taves <mwtoews at gmail.com> wrote:

> Hi all,
>
> SWIG bindings have existed as part of the core GEOS library since
> early development, however they have not received much attention in
> many years.
>
> I've (quickly) prepared two options for consideration:
>
> Option one: Drop Python SWIG bindings
> https://github.com/mwtoews/geos/pull/1
>
> This keeps the SWIG interface for Ruby bindings, which is packed by
> (e.g.) Ubuntu; see https://packages.ubuntu.com/xenial/ruby/ruby-geos
> However, it drops the unsupported Python 2 SWIG bindings. Python users
> can use either Shapely or PyGEOS.
>
> Option two: Drop SWIG bindings, including for Ruby and Python
> https://github.com/mwtoews/geos/pull/2
>
> This drops the whole SWIG interface.
> Note that Ruby users can access GEOS bindings via RGeo
> https://github.com/rgeo/rgeo, which has a steady history of active
> contributions; see https://github.com/rgeo/rgeo/graphs/contributors
> Another idea is to move the SWIG Ruby bindings into a separate repo,
> similar to php-geos https://git.osgeo.org/gitea/geos/php-geos, however
> this would require a volunteer to step in.
>
> Any thoughts to either proposal? And if so, whether this should happen
> before or after the next release?
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201125/a08aaa25/attachment.html>

From pramsey at cleverelephant.ca  Wed Nov 25 14:29:38 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 25 Nov 2020 14:29:38 -0800
Subject: [geos-devel] Drop SWIG bindings
In-Reply-To: <004801d6c378$36a28240$a3e786c0$@pcorp.us>
References: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
 <004801d6c378$36a28240$a3e786c0$@pcorp.us>
Message-ID: <2108B9EE-1C6A-4D85-99FA-C897265837E0@cleverelephant.ca>

I think +1 to dropping all swig also. Seems like the world has moved on.

> On Nov 25, 2020, at 2:13 PM, Regina Obe <lr at pcorp.us> wrote:
> 
> +1 to Option two - Drop Python and Ruby SWIG.
> 
> I agree I think most Python users digest their GEOS via Shapely.  It's
> better to have one very supported interface than confuse users with 2 one of
> which is not maintained.
> 
> As far as Ruby -- I'll just take your word for It on that one.  I've never
> used Ruby except for the asci doctor bit.
> 
> 
> 
>> -----Original Message-----
>> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
>> Mike Taves
>> Sent: Wednesday, November 25, 2020 4:37 PM
>> To: geos-devel at lists.osgeo.org
>> Subject: [geos-devel] Drop SWIG bindings
>> 
>> Hi all,
>> 
>> SWIG bindings have existed as part of the core GEOS library since early
>> development, however they have not received much attention in many
>> years.
>> 
>> I've (quickly) prepared two options for consideration:
>> 
>> Option one: Drop Python SWIG bindings
>> https://github.com/mwtoews/geos/pull/1
>> 
>> This keeps the SWIG interface for Ruby bindings, which is packed by
>> (e.g.) Ubuntu; see https://packages.ubuntu.com/xenial/ruby/ruby-geos
>> However, it drops the unsupported Python 2 SWIG bindings. Python users
>> can use either Shapely or PyGEOS.
>> 
>> Option two: Drop SWIG bindings, including for Ruby and Python
>> https://github.com/mwtoews/geos/pull/2
>> 
>> This drops the whole SWIG interface.
>> Note that Ruby users can access GEOS bindings via RGeo
>> https://github.com/rgeo/rgeo, which has a steady history of active
>> contributions; see https://github.com/rgeo/rgeo/graphs/contributors
>> Another idea is to move the SWIG Ruby bindings into a separate repo,
> similar
>> to php-geos https://git.osgeo.org/gitea/geos/php-geos, however this would
>> require a volunteer to step in.
>> 
>> Any thoughts to either proposal? And if so, whether this should happen
>> before or after the next release?
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Wed Nov 25 17:21:19 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 25 Nov 2020 17:21:19 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
Message-ID: <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>



> On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
> 
> 
>> All the performance talk is mostly because JTS still runs a lot faster
> than GEOS
>> for some bulk processing. My current test is a big union of watershed
>> boundaries, about 6MB of data, which takes about 20s under GEOS and
>> about 25% of that under JTS.  It's a big gap, and in theory the two code
> bases
>> are pretty aligned right now. Same overlayNG engine, etc. So I figure
> there
>> has to be a big implementation ball of performance hiding under the covers
>> somewhere. No luck thus far.
>> 
>> I think we're close, looking forward to release :)
>> 
>> P
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> You have your sample watershed data set.  Would like to test it out myself.

https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0

I union all these. It takes about 20s on my Air. 

p

> 
> Thanks,
> Regina
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From dbaston at gmail.com  Wed Nov 25 18:00:17 2020
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 25 Nov 2020 21:00:17 -0500
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
 <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
Message-ID: <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>

After collecting the inputs and writing to WKT:

\copy (select st_astext(st_collect(geom), 18) from wsa_vi) to
~/data/wsa.wkt;

I'm seeing 6 seconds in GEOS (not including WKT parsing)

bin/perf_unary ~/data/wsa.wkt union
# Reading geometries from /home/dan/data/wsa.wkt
# Read 1 geometries.
# 6,137,885 usec

vs 14s in JTS (including WKT parsing)

time bin/jtsop.sh -a ~/data/wsa.wkt -op Overlay.unaryUnion
# 14.43s user 0.47s system 202% cpu 7.354 total

Dan



On Wed, Nov 25, 2020 at 8:21 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
> >
> >
> >> All the performance talk is mostly because JTS still runs a lot faster
> > than GEOS
> >> for some bulk processing. My current test is a big union of watershed
> >> boundaries, about 6MB of data, which takes about 20s under GEOS and
> >> about 25% of that under JTS.  It's a big gap, and in theory the two code
> > bases
> >> are pretty aligned right now. Same overlayNG engine, etc. So I figure
> > there
> >> has to be a big implementation ball of performance hiding under the
> covers
> >> somewhere. No luck thus far.
> >>
> >> I think we're close, looking forward to release :)
> >>
> >> P
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > You have your sample watershed data set.  Would like to test it out
> myself.
>
> https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0
>
> I union all these. It takes about 20s on my Air.
>
> p
>
> >
> > Thanks,
> > Regina
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201125/08ef154c/attachment-0001.html>

From mtnclimb at gmail.com  Wed Nov 25 18:41:25 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 25 Nov 2020 18:41:25 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
 <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
 <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>
Message-ID: <CAK2ens36mUt=+euK0YD7KwLR-u2kw50dROEBaJgTG4mPbMc6Gg@mail.gmail.com>

Actually OverlayNGRobust.unaryUnion will compare the current OverlayNG code
to GEOS. However, OverlayNG is likely to be slower, in any case.

So:
GEOS - 6.1 s
JTS 14.4 s

That's an impressive difference in favour of GEOS.  I wonder why Paul's
timings are so different?

On Wed, Nov 25, 2020 at 6:00 PM Daniel Baston <dbaston at gmail.com> wrote:

> After collecting the inputs and writing to WKT:
>
> \copy (select st_astext(st_collect(geom), 18) from wsa_vi) to
> ~/data/wsa.wkt;
>
> I'm seeing 6 seconds in GEOS (not including WKT parsing)
>
> bin/perf_unary ~/data/wsa.wkt union
> # Reading geometries from /home/dan/data/wsa.wkt
> # Read 1 geometries.
> # 6,137,885 usec
>
> vs 14s in JTS (including WKT parsing)
>
> time bin/jtsop.sh -a ~/data/wsa.wkt -op Overlay.unaryUnion
> # 14.43s user 0.47s system 202% cpu 7.354 total
>
> Dan
>
>
>
> On Wed, Nov 25, 2020 at 8:21 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>>
>>
>> > On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
>> >
>> >
>> >> All the performance talk is mostly because JTS still runs a lot faster
>> > than GEOS
>> >> for some bulk processing. My current test is a big union of watershed
>> >> boundaries, about 6MB of data, which takes about 20s under GEOS and
>> >> about 25% of that under JTS.  It's a big gap, and in theory the two
>> code
>> > bases
>> >> are pretty aligned right now. Same overlayNG engine, etc. So I figure
>> > there
>> >> has to be a big implementation ball of performance hiding under the
>> covers
>> >> somewhere. No luck thus far.
>> >>
>> >> I think we're close, looking forward to release :)
>> >>
>> >> P
>> >> _______________________________________________
>> >> geos-devel mailing list
>> >> geos-devel at lists.osgeo.org
>> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> >
>> > You have your sample watershed data set.  Would like to test it out
>> myself.
>>
>> https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0
>>
>> I union all these. It takes about 20s on my Air.
>>
>> p
>>
>> >
>> > Thanks,
>> > Regina
>> >
>> > _______________________________________________
>> > geos-devel mailing list
>> > geos-devel at lists.osgeo.org
>> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201125/9191b9ce/attachment.html>

From sebastic at xs4all.nl  Wed Nov 25 19:23:19 2020
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 26 Nov 2020 04:23:19 +0100
Subject: [geos-devel] Drop SWIG bindings
In-Reply-To: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
References: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
Message-ID: <95bc23d9-a656-4341-9660-950997ace462@xs4all.nl>

On 11/25/20 10:36 PM, Mike Taves wrote:
> This keeps the SWIG interface for Ruby bindings, which is packed by
> (e.g.) Ubuntu; see https://packages.ubuntu.com/xenial/ruby/ruby-geos

Because the ruby bindings had practically no users, they were dropped in
geos (3.8.0-1) and are no longer available in focal and later.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From pramsey at cleverelephant.ca  Wed Nov 25 19:30:26 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 25 Nov 2020 19:30:26 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CAK2ens36mUt=+euK0YD7KwLR-u2kw50dROEBaJgTG4mPbMc6Gg@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
 <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
 <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>
 <CAK2ens36mUt=+euK0YD7KwLR-u2kw50dROEBaJgTG4mPbMc6Gg@mail.gmail.com>
Message-ID: <06A33A66-9473-4A85-B1F8-77B097F67E57@cleverelephant.ca>



> On Nov 25, 2020, at 6:41 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> Actually OverlayNGRobust.unaryUnion will compare the current OverlayNG code to GEOS. However, OverlayNG is likely to be slower, in any case.
> 
> So:
> GEOS - 6.1 s
> JTS 14.4 s
> 
> That's an impressive difference in favour of GEOS.  I wonder why Paul's timings are so different?

OMG, I wonder... I have a debug build of GEOS (because, you know, debugging). Is that it? Otherwise, are both tests (JTS and GEOS side) running through the OverlayNGRobust? I suppose I should ask: how do I run the JTS test? Then I can cut out the middleman and run them all myself?

P

> 
> On Wed, Nov 25, 2020 at 6:00 PM Daniel Baston <dbaston at gmail.com> wrote:
> After collecting the inputs and writing to WKT:
> 
> \copy (select st_astext(st_collect(geom), 18) from wsa_vi) to ~/data/wsa.wkt;
> 
> I'm seeing 6 seconds in GEOS (not including WKT parsing)
> 
> bin/perf_unary ~/data/wsa.wkt union
> # Reading geometries from /home/dan/data/wsa.wkt
> # Read 1 geometries.
> # 6,137,885 usec
> 
> vs 14s in JTS (including WKT parsing)
> 
> time bin/jtsop.sh -a ~/data/wsa.wkt -op Overlay.unaryUnion   
> # 14.43s user 0.47s system 202% cpu 7.354 total
> 
> Dan
> 
> 
> 
> On Wed, Nov 25, 2020 at 8:21 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> > On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
> > 
> > 
> >> All the performance talk is mostly because JTS still runs a lot faster
> > than GEOS
> >> for some bulk processing. My current test is a big union of watershed
> >> boundaries, about 6MB of data, which takes about 20s under GEOS and
> >> about 25% of that under JTS.  It's a big gap, and in theory the two code
> > bases
> >> are pretty aligned right now. Same overlayNG engine, etc. So I figure
> > there
> >> has to be a big implementation ball of performance hiding under the covers
> >> somewhere. No luck thus far.
> >> 
> >> I think we're close, looking forward to release :)
> >> 
> >> P
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > 
> > You have your sample watershed data set.  Would like to test it out myself.
> 
> https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0
> 
> I union all these. It takes about 20s on my Air. 
> 
> p
> 
> > 
> > Thanks,
> > Regina
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Nov 25 19:37:58 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 25 Nov 2020 19:37:58 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <06A33A66-9473-4A85-B1F8-77B097F67E57@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
 <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
 <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>
 <CAK2ens36mUt=+euK0YD7KwLR-u2kw50dROEBaJgTG4mPbMc6Gg@mail.gmail.com>
 <06A33A66-9473-4A85-B1F8-77B097F67E57@cleverelephant.ca>
Message-ID: <CAK2ens1MOFVvGx4K5Mtg+-7XGao5jJuujvg4O4RirDw4MFn0Rg@mail.gmail.com>

Seems best to try a non-debug build...

To run in JTS you can use:

time bin/jtsop.sh -a ~/data/wsa.wkt -op OverlayNGRobust.unaryUnion

You should run off master for this (or a very recent pull)

Actually it's better to use

bin/jtsop.sh -time -a ~/data/wsa.wkt -op OverlayNGRobust.unaryUnion

That will time only the operation, excluding the I/O.


On Wed, Nov 25, 2020 at 7:30 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Nov 25, 2020, at 6:41 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> >
> > Actually OverlayNGRobust.unaryUnion will compare the current OverlayNG
> code to GEOS. However, OverlayNG is likely to be slower, in any case.
> >
> > So:
> > GEOS - 6.1 s
> > JTS 14.4 s
> >
> > That's an impressive difference in favour of GEOS.  I wonder why Paul's
> timings are so different?
>
> OMG, I wonder... I have a debug build of GEOS (because, you know,
> debugging). Is that it? Otherwise, are both tests (JTS and GEOS side)
> running through the OverlayNGRobust? I suppose I should ask: how do I run
> the JTS test? Then I can cut out the middleman and run them all myself?
>
> P
>
> >
> > On Wed, Nov 25, 2020 at 6:00 PM Daniel Baston <dbaston at gmail.com> wrote:
> > After collecting the inputs and writing to WKT:
> >
> > \copy (select st_astext(st_collect(geom), 18) from wsa_vi) to
> ~/data/wsa.wkt;
> >
> > I'm seeing 6 seconds in GEOS (not including WKT parsing)
> >
> > bin/perf_unary ~/data/wsa.wkt union
> > # Reading geometries from /home/dan/data/wsa.wkt
> > # Read 1 geometries.
> > # 6,137,885 usec
> >
> > vs 14s in JTS (including WKT parsing)
> >
> > time bin/jtsop.sh -a ~/data/wsa.wkt -op Overlay.unaryUnion
> > # 14.43s user 0.47s system 202% cpu 7.354 total
> >
> > Dan
> >
> >
> >
> > On Wed, Nov 25, 2020 at 8:21 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> >
> > > On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
> > >
> > >
> > >> All the performance talk is mostly because JTS still runs a lot faster
> > > than GEOS
> > >> for some bulk processing. My current test is a big union of watershed
> > >> boundaries, about 6MB of data, which takes about 20s under GEOS and
> > >> about 25% of that under JTS.  It's a big gap, and in theory the two
> code
> > > bases
> > >> are pretty aligned right now. Same overlayNG engine, etc. So I figure
> > > there
> > >> has to be a big implementation ball of performance hiding under the
> covers
> > >> somewhere. No luck thus far.
> > >>
> > >> I think we're close, looking forward to release :)
> > >>
> > >> P
> > >> _______________________________________________
> > >> geos-devel mailing list
> > >> geos-devel at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > >
> > > You have your sample watershed data set.  Would like to test it out
> myself.
> >
> > https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0
> >
> > I union all these. It takes about 20s on my Air.
> >
> > p
> >
> > >
> > > Thanks,
> > > Regina
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201125/b6d345d7/attachment-0001.html>

From pramsey at cleverelephant.ca  Wed Nov 25 19:49:32 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 25 Nov 2020 19:49:32 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CAK2ens1MOFVvGx4K5Mtg+-7XGao5jJuujvg4O4RirDw4MFn0Rg@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
 <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
 <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>
 <CAK2ens36mUt=+euK0YD7KwLR-u2kw50dROEBaJgTG4mPbMc6Gg@mail.gmail.com>
 <06A33A66-9473-4A85-B1F8-77B097F67E57@cleverelephant.ca>
 <CAK2ens1MOFVvGx4K5Mtg+-7XGao5jJuujvg4O4RirDw4MFn0Rg@mail.gmail.com>
Message-ID: <355FA19C-9BA0-448A-8E30-D3822ACBFCD9@cleverelephant.ca>

Well then, good news from me, since with a Release build, I can run that union in 4.7s in GEOS and 6.6s in JTS.
w00T!
Now I'm wondering if my other performance work, that yielded relatively little in Debug might be bigger winners in Release...
P.

> On Nov 25, 2020, at 7:37 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> Seems best to try a non-debug build...
> 
> To run in JTS you can use:
> 
> time bin/jtsop.sh -a ~/data/wsa.wkt -op OverlayNGRobust.unaryUnion 
> 
> You should run off master for this (or a very recent pull)
> 
> Actually it's better to use 
> 
> bin/jtsop.sh -time -a ~/data/wsa.wkt -op OverlayNGRobust.unaryUnion 
> 
> That will time only the operation, excluding the I/O.
> 
> 
> On Wed, Nov 25, 2020 at 7:30 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> > On Nov 25, 2020, at 6:41 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> > 
> > Actually OverlayNGRobust.unaryUnion will compare the current OverlayNG code to GEOS. However, OverlayNG is likely to be slower, in any case.
> > 
> > So:
> > GEOS - 6.1 s
> > JTS 14.4 s
> > 
> > That's an impressive difference in favour of GEOS.  I wonder why Paul's timings are so different?
> 
> OMG, I wonder... I have a debug build of GEOS (because, you know, debugging). Is that it? Otherwise, are both tests (JTS and GEOS side) running through the OverlayNGRobust? I suppose I should ask: how do I run the JTS test? Then I can cut out the middleman and run them all myself?
> 
> P
> 
> > 
> > On Wed, Nov 25, 2020 at 6:00 PM Daniel Baston <dbaston at gmail.com> wrote:
> > After collecting the inputs and writing to WKT:
> > 
> > \copy (select st_astext(st_collect(geom), 18) from wsa_vi) to ~/data/wsa.wkt;
> > 
> > I'm seeing 6 seconds in GEOS (not including WKT parsing)
> > 
> > bin/perf_unary ~/data/wsa.wkt union
> > # Reading geometries from /home/dan/data/wsa.wkt
> > # Read 1 geometries.
> > # 6,137,885 usec
> > 
> > vs 14s in JTS (including WKT parsing)
> > 
> > time bin/jtsop.sh -a ~/data/wsa.wkt -op Overlay.unaryUnion   
> > # 14.43s user 0.47s system 202% cpu 7.354 total
> > 
> > Dan
> > 
> > 
> > 
> > On Wed, Nov 25, 2020 at 8:21 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > 
> > 
> > > On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
> > > 
> > > 
> > >> All the performance talk is mostly because JTS still runs a lot faster
> > > than GEOS
> > >> for some bulk processing. My current test is a big union of watershed
> > >> boundaries, about 6MB of data, which takes about 20s under GEOS and
> > >> about 25% of that under JTS.  It's a big gap, and in theory the two code
> > > bases
> > >> are pretty aligned right now. Same overlayNG engine, etc. So I figure
> > > there
> > >> has to be a big implementation ball of performance hiding under the covers
> > >> somewhere. No luck thus far.
> > >> 
> > >> I think we're close, looking forward to release :)
> > >> 
> > >> P
> > >> _______________________________________________
> > >> geos-devel mailing list
> > >> geos-devel at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > 
> > > You have your sample watershed data set.  Would like to test it out myself.
> > 
> > https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0
> > 
> > I union all these. It takes about 20s on my Air. 
> > 
> > p
> > 
> > > 
> > > Thanks,
> > > Regina
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Nov 25 20:11:55 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 25 Nov 2020 20:11:55 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <355FA19C-9BA0-448A-8E30-D3822ACBFCD9@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <008b01d6c2c6$83bdb750$8b3925f0$@pcorp.us>
 <1F193632-4B2F-4D71-B612-00BA94026DED@cleverelephant.ca>
 <CA+K_q_ozXkSMxg911iMh_cELt=cJgg8a9cSELQW76eU-rKeEnw@mail.gmail.com>
 <CAK2ens36mUt=+euK0YD7KwLR-u2kw50dROEBaJgTG4mPbMc6Gg@mail.gmail.com>
 <06A33A66-9473-4A85-B1F8-77B097F67E57@cleverelephant.ca>
 <CAK2ens1MOFVvGx4K5Mtg+-7XGao5jJuujvg4O4RirDw4MFn0Rg@mail.gmail.com>
 <355FA19C-9BA0-448A-8E30-D3822ACBFCD9@cleverelephant.ca>
Message-ID: <CAK2ens1fZjObzVKMsT=E8vswgGUPymVVwOVDnwA2Mj8NtkTWgA@mail.gmail.com>

Excellent news for GEOS... but I'm a little sad for JTS.

Release FTW!

On Wed, Nov 25, 2020 at 7:49 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Well then, good news from me, since with a Release build, I can run that
> union in 4.7s in GEOS and 6.6s in JTS.
> w00T!
> Now I'm wondering if my other performance work, that yielded relatively
> little in Debug might be bigger winners in Release...
> P.
>
> > On Nov 25, 2020, at 7:37 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> >
> > Seems best to try a non-debug build...
> >
> > To run in JTS you can use:
> >
> > time bin/jtsop.sh -a ~/data/wsa.wkt -op OverlayNGRobust.unaryUnion
> >
> > You should run off master for this (or a very recent pull)
> >
> > Actually it's better to use
> >
> > bin/jtsop.sh -time -a ~/data/wsa.wkt -op OverlayNGRobust.unaryUnion
> >
> > That will time only the operation, excluding the I/O.
> >
> >
> > On Wed, Nov 25, 2020 at 7:30 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> >
> > > On Nov 25, 2020, at 6:41 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> > >
> > > Actually OverlayNGRobust.unaryUnion will compare the current OverlayNG
> code to GEOS. However, OverlayNG is likely to be slower, in any case.
> > >
> > > So:
> > > GEOS - 6.1 s
> > > JTS 14.4 s
> > >
> > > That's an impressive difference in favour of GEOS.  I wonder why
> Paul's timings are so different?
> >
> > OMG, I wonder... I have a debug build of GEOS (because, you know,
> debugging). Is that it? Otherwise, are both tests (JTS and GEOS side)
> running through the OverlayNGRobust? I suppose I should ask: how do I run
> the JTS test? Then I can cut out the middleman and run them all myself?
> >
> > P
> >
> > >
> > > On Wed, Nov 25, 2020 at 6:00 PM Daniel Baston <dbaston at gmail.com>
> wrote:
> > > After collecting the inputs and writing to WKT:
> > >
> > > \copy (select st_astext(st_collect(geom), 18) from wsa_vi) to
> ~/data/wsa.wkt;
> > >
> > > I'm seeing 6 seconds in GEOS (not including WKT parsing)
> > >
> > > bin/perf_unary ~/data/wsa.wkt union
> > > # Reading geometries from /home/dan/data/wsa.wkt
> > > # Read 1 geometries.
> > > # 6,137,885 usec
> > >
> > > vs 14s in JTS (including WKT parsing)
> > >
> > > time bin/jtsop.sh -a ~/data/wsa.wkt -op Overlay.unaryUnion
> > > # 14.43s user 0.47s system 202% cpu 7.354 total
> > >
> > > Dan
> > >
> > >
> > >
> > > On Wed, Nov 25, 2020 at 8:21 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > >
> > >
> > > > On Nov 24, 2020, at 5:01 PM, Regina Obe <lr at pcorp.us> wrote:
> > > >
> > > >
> > > >> All the performance talk is mostly because JTS still runs a lot
> faster
> > > > than GEOS
> > > >> for some bulk processing. My current test is a big union of
> watershed
> > > >> boundaries, about 6MB of data, which takes about 20s under GEOS and
> > > >> about 25% of that under JTS.  It's a big gap, and in theory the two
> code
> > > > bases
> > > >> are pretty aligned right now. Same overlayNG engine, etc. So I
> figure
> > > > there
> > > >> has to be a big implementation ball of performance hiding under the
> covers
> > > >> somewhere. No luck thus far.
> > > >>
> > > >> I think we're close, looking forward to release :)
> > > >>
> > > >> P
> > > >> _______________________________________________
> > > >> geos-devel mailing list
> > > >> geos-devel at lists.osgeo.org
> > > >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > >
> > > > You have your sample watershed data set.  Would like to test it out
> myself.
> > >
> > > https://www.dropbox.com/s/9ruvs6gxe3yl93c/wsa_vi.sql.bz2?dl=0
> > >
> > > I union all these. It takes about 20s on my Air.
> > >
> > > p
> > >
> > > >
> > > > Thanks,
> > > > Regina
> > > >
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel at lists.osgeo.org
> > > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201125/a44dd4bb/attachment.html>

From strk at kbt.io  Thu Nov 26 02:44:28 2020
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 26 Nov 2020 11:44:28 +0100
Subject: [geos-devel] Drop SWIG bindings
In-Reply-To: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
References: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
Message-ID: <20201126104427.GB7898@cdb>

On Thu, Nov 26, 2020 at 10:36:35AM +1300, Mike Taves wrote:

[...]

> Option one: Drop Python SWIG bindings
> https://github.com/mwtoews/geos/pull/1

[...]

> Option two: Drop SWIG bindings, including for Ruby and Python
> https://github.com/mwtoews/geos/pull/2

+1 for dropping the whole SWIG interface before 3.9.0

--strk;

From jmckenna at gatewaygeomatics.com  Thu Nov 26 02:56:59 2020
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Thu, 26 Nov 2020 06:56:59 -0400
Subject: [geos-devel] Drop SWIG bindings
In-Reply-To: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
References: <CAM2FmMruZuLc3FzABCB6ni87gft+jM4P9JrY51J6Zmac=XnwJQ@mail.gmail.com>
Message-ID: <c7b4e6f5-6f06-efbe-db8e-79ae12cdc60b@gatewaygeomatics.com>

On 2020-11-25 5:36 p.m., Mike Taves wrote:
> 
> Option two: Drop SWIG bindings, including for Ruby and Python
> https://github.com/mwtoews/geos/pull/2
> 

+1

(the only one that I've heard interest in is PHP-GEOS, which is already 
hosted/moved elsewhere)

-jeff


-- 
Jeff McKenna
MapServer Consulting and Training Services
co-founder of FOSS4G
http://gatewaygeo.com/





From geos-trac at osgeo.org  Thu Nov 26 06:34:56 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 26 Nov 2020 14:34:56 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.dcc28d440dcdf06e6d193f1b20fcaceb@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * cc: mbdavis (added)


Comment:

 I guess one option here would be to pick the leftmost-upmost and the
 rightmost-bottommost points of a ring, split the ring in two parts, merge
 the lines which remain split by the origina vertex, then perform the
 simplification on the two parts and join them back togheter.

 What do you think Martin ?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Nov 26 16:37:30 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 27 Nov 2020 00:37:30 -0000
Subject: [geos-devel] [GEOS] #1073: Feature: add support for pkg-config
 for GEOS C API (only)
In-Reply-To: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>
References: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>
Message-ID: <060.8ce59b9160ad0e64485387a94004bbdd@osgeo.org>

#1073: Feature: add support for pkg-config for GEOS C API (only)
-------------------------+---------------------------
 Reporter:  Mike Taves   |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  master
 Severity:  Idea         |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by Mike Taves):

 * milestone:   => 3.9.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1073#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov 27 10:40:38 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 27 Nov 2020 18:40:38 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.ccbf3a3298c674df75c18cdf9e9c0347@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:2 strk]:
 > I guess one option here would be to pick the leftmost-upmost and the
 rightmost-bottommost points of a ring, split the ring in two parts, merge
 the lines which remain split by the origina vertex, then perform the
 simplification on the two parts and join them back togheter.
 >
 > What do you think Martin ?

 I don't see how that works.  The problem with the current simplification
 algorithm is that it is essentially working on a line, not a ring - which
 is why it doesn't remove the endpoint even if it should be.  Doesn't
 splitting the ring just introduce one more endpoint?

 Not sure of what a solution could be ATM.  The simplification algorithm
 being used is Douglas-Peucker, and I don't know if that can be generalized
 to work on true rings.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Fri Nov 27 10:53:57 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 27 Nov 2020 10:53:57 -0800
Subject: [geos-devel] MSVC Unit Failure
Message-ID: <E6117FFE-F947-4CE1-ACA8-E0894DA9381E@cleverelephant.ca>

Any of our MSVC list members want to take a look at this unit test failure? After cleaning up build errors and warnings it is what's left in our CI breakages.

The following tests FAILED:
Errors while running CTest
198 - unit-simplify-TopologyPreservingSimplifier (Failed)

P.

From geos-trac at osgeo.org  Fri Nov 27 10:54:24 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 27 Nov 2020 18:54:24 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.8ddf2a613d5bff6171adb6e9605a56db@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Not a net new problem; here's some
 [https://stackoverflow.com/questions/8877257/finding-good-starting-points-
 for-douglas-peucker-algorithm-for-closed-polygons ideas] about it.  Not
 sure I totally agree with the suggestions, but they do have some ideas
 that are a starting point.

 How about this: find the vertex for which the triangle formed with the
 adjacent vertices has maximum height, and rotate the ring to use it as the
 starting point?  (Height being the perpendicular distance to the line
 between the adjacent points.  In the case of a regular polygon this is
 arbitrary, so no need to rotate).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Fri Nov 27 10:59:08 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 27 Nov 2020 10:59:08 -0800
Subject: [geos-devel] GEOS 3.9 Beta1
Message-ID: <E16A1B74-E4A3-4E9C-BC2F-76FD6BC875CA@cleverelephant.ca>

I'd like to push out a Beta1 package today to allow our packaging friends to give it a test-drive. Any vetoes?

P

From geos-trac at osgeo.org  Fri Nov 27 11:12:05 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 27 Nov 2020 19:12:05 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.7842f1d6ac37f482ea09d124584d042f@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by uclaros):

 A simplistic solution would be to take the current resulting polygon, use
 its 0, 1, n-1 and n (same as 0) vertices to decide if 0 and n vertices
 should also be removed. If so, remove them and append vertex 1 to the end
 to close the ring.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Nov 27 12:00:24 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 27 Nov 2020 20:00:24 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.998a3d428ddc4f380de7208cff2fdef7@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:5 uclaros]:
 > take the current resulting polygon, use its 0, 1, n-1 and n (same as 0)
 vertices to decide if 0 and n vertices should also be removed.

 Good idea.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mwtoews at gmail.com  Fri Nov 27 12:21:35 2020
From: mwtoews at gmail.com (Mike Taves)
Date: Sat, 28 Nov 2020 09:21:35 +1300
Subject: [geos-devel] GEOS 3.9 Beta1
In-Reply-To: <E16A1B74-E4A3-4E9C-BC2F-76FD6BC875CA@cleverelephant.ca>
References: <E16A1B74-E4A3-4E9C-BC2F-76FD6BC875CA@cleverelephant.ca>
Message-ID: <CAM2FmMo5fu6T4Z0P_wzdE07GxJ1WVkwAyiuRu8Gc8LKdc5hX2Q@mail.gmail.com>

On Sat, 28 Nov 2020 at 07:59, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>
> I'd like to push out a Beta1 package today to allow our packaging friends to give it a test-drive. Any vetoes?

I'd like to get #1073 [1] via GitHub [2] included for Beta1.

This feature adds support for pkg-config, which can be tested by
packagers to see if (e.g.) `pkg-config geos --cflags --libs` does the
right thing.

[1] https://trac.osgeo.org/geos/ticket/1073
[2] https://github.com/libgeos/geos/pull/349

From geos-trac at osgeo.org  Fri Nov 27 12:59:35 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 27 Nov 2020 20:59:35 -0000
Subject: [geos-devel] [GEOS] #1073: Feature: add support for pkg-config
 for GEOS C API (only)
In-Reply-To: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>
References: <045.5afa7cfcffd9c0b450ae23259105e7d6@osgeo.org>
Message-ID: <060.096d89fef36a83b7c9c54bf897c1aca7@osgeo.org>

#1073: Feature: add support for pkg-config for GEOS C API (only)
-------------------------+---------------------------
 Reporter:  Mike Taves   |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  closed
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  master
 Severity:  Idea         |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by Mike Taves <mwtoews@?>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"a555d027627e9729f830d7273d9a1d9d6cf92cf9/git" a555d02/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="a555d027627e9729f830d7273d9a1d9d6cf92cf9"
 Feature: add support for pkg-config for GEOS C API (only)

 Closes #1073
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1073#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Fri Nov 27 12:59:42 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 27 Nov 2020 12:59:42 -0800
Subject: [geos-devel] GEOS 3.9 Beta1
In-Reply-To: <CAM2FmMo5fu6T4Z0P_wzdE07GxJ1WVkwAyiuRu8Gc8LKdc5hX2Q@mail.gmail.com>
References: <E16A1B74-E4A3-4E9C-BC2F-76FD6BC875CA@cleverelephant.ca>
 <CAM2FmMo5fu6T4Z0P_wzdE07GxJ1WVkwAyiuRu8Gc8LKdc5hX2Q@mail.gmail.com>
Message-ID: <1188B600-8B1F-49B3-A954-D5087CA8FD2A@cleverelephant.ca>



> On Nov 27, 2020, at 12:21 PM, Mike Taves <mwtoews at gmail.com> wrote:
> 
> On Sat, 28 Nov 2020 at 07:59, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> 
>> I'd like to push out a Beta1 package today to allow our packaging friends to give it a test-drive. Any vetoes?
> 
> I'd like to get #1073 [1] via GitHub [2] included for Beta1.

Done.

> 
> This feature adds support for pkg-config, which can be tested by
> packagers to see if (e.g.) `pkg-config geos --cflags --libs` does the
> right thing.
> 
> [1] https://trac.osgeo.org/geos/ticket/1073
> [2] https://github.com/libgeos/geos/pull/349
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mwtoews at gmail.com  Fri Nov 27 14:57:00 2020
From: mwtoews at gmail.com (Mike Taves)
Date: Sat, 28 Nov 2020 11:57:00 +1300
Subject: [geos-devel] GEOS 3.9 Beta1
In-Reply-To: <1188B600-8B1F-49B3-A954-D5087CA8FD2A@cleverelephant.ca>
References: <E16A1B74-E4A3-4E9C-BC2F-76FD6BC875CA@cleverelephant.ca>
 <CAM2FmMo5fu6T4Z0P_wzdE07GxJ1WVkwAyiuRu8Gc8LKdc5hX2Q@mail.gmail.com>
 <1188B600-8B1F-49B3-A954-D5087CA8FD2A@cleverelephant.ca>
Message-ID: <CAM2FmMogU8ugiBw3zvRo_dU-Jcr=BCd34miutuVh=bnD_KdGXQ@mail.gmail.com>

On Sat, 28 Nov 2020 at 09:59, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> Done.

Thanks. Last one from me is #1076 [1] on Gitea [2], to drop SWIG bindings.

[1] https://trac.osgeo.org/geos/ticket/1076
[2] https://git.osgeo.org/gitea/geos/geos/pulls/111

From pramsey at cleverelephant.ca  Fri Nov 27 15:00:00 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 27 Nov 2020 15:00:00 -0800
Subject: [geos-devel] GEOS 3.9 Beta1
In-Reply-To: <CAM2FmMogU8ugiBw3zvRo_dU-Jcr=BCd34miutuVh=bnD_KdGXQ@mail.gmail.com>
References: <E16A1B74-E4A3-4E9C-BC2F-76FD6BC875CA@cleverelephant.ca>
 <CAM2FmMo5fu6T4Z0P_wzdE07GxJ1WVkwAyiuRu8Gc8LKdc5hX2Q@mail.gmail.com>
 <1188B600-8B1F-49B3-A954-D5087CA8FD2A@cleverelephant.ca>
 <CAM2FmMogU8ugiBw3zvRo_dU-Jcr=BCd34miutuVh=bnD_KdGXQ@mail.gmail.com>
Message-ID: <86EAA2BE-F62C-42EF-89DE-FCE0AD159216@cleverelephant.ca>

Thanks!

> On Nov 27, 2020, at 2:57 PM, Mike Taves <mwtoews at gmail.com> wrote:
> 
> On Sat, 28 Nov 2020 at 09:59, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> Done.
> 
> Thanks. Last one from me is #1076 [1] on Gitea [2], to drop SWIG bindings.
> 
> [1] https://trac.osgeo.org/geos/ticket/1076
> [2] https://git.osgeo.org/gitea/geos/geos/pulls/111
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Fri Nov 27 19:57:41 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 27 Nov 2020 19:57:41 -0800
Subject: [geos-devel] 3.9.0beta1
Message-ID: <6ECA4D10-778E-4B0A-A243-F4920EC78260@cleverelephant.ca>

OK, without any further ado, here's a beta release for your testing pleasure.

http://download.osgeo.org/geos/geos-3.9.0beta1.tar.bz2

P.

From pramsey at cleverelephant.ca  Fri Nov 27 20:59:10 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 27 Nov 2020 20:59:10 -0800
Subject: [geos-devel] MSVC Unit Failure
In-Reply-To: <E6117FFE-F947-4CE1-ACA8-E0894DA9381E@cleverelephant.ca>
References: <E6117FFE-F947-4CE1-ACA8-E0894DA9381E@cleverelephant.ca>
Message-ID: <C9B2A46F-AA95-4F67-B13F-970927D7B555@cleverelephant.ca>

The actual build logs you can see here

https://dev.azure.com/libgeos/geos/_build/results?buildId=772&view=logs&jobId=305851a9-a7bb-55db-0042-7e2b6f48aa1c&j=2bd7b19d-6351-5e7f-8417-63f327ab45bc

To add to the wierdness, MSVC 2017 C++ 14 works. MSVC 2017 C++ 17 does not.

Platforms!

P

> On Nov 27, 2020, at 10:53 AM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> Any of our MSVC list members want to take a look at this unit test failure? After cleaning up build errors and warnings it is what's left in our CI breakages.
> 
> The following tests FAILED:
> Errors while running CTest
> 198 - unit-simplify-TopologyPreservingSimplifier (Failed)
> 
> P.


From geos-trac at osgeo.org  Sat Nov 28 07:21:16 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 28 Nov 2020 15:21:16 -0000
Subject: [geos-devel] [GEOS] #1078: [C API] GEOSCoordSeq_setOrdinate no
 longer returns error code
Message-ID: <056.c07daae9ddc5694b8ad8d0d187a6231f@osgeo.org>

#1078: [C API] GEOSCoordSeq_setOrdinate no longer returns error code
--------------------------------+--------------------------
 Reporter:  jorisvandenbossche  |      Owner:  geos-devel@?
     Type:  defect              |     Status:  new
 Priority:  major               |  Milestone:  3.9.0
Component:  Default             |    Version:  master
 Severity:  Unassigned          |   Keywords:
--------------------------------+--------------------------
 When trying to set an ordinate for a non-existing dimension, the C
 function no longer returns the correct error return value.

 See https://github.com/pygeos/pygeos/issues/233#issuecomment-723860368 for
 context

 This seems to stem from a small mistake in the refactor in
 https://github.com/libgeos/geos/commit/8e29f768e6d8597a5568acd628712583506f9928,
 which accidentally changed the error return value for
 `GEOSCoordSeq_setOrdinate_r` from 0 to 1, so we no longer catch the error.
 I further checked the rest of the file, but I think this is the only case
 of a wrong return code.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1078>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Nov 28 07:21:32 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 28 Nov 2020 15:21:32 -0000
Subject: [geos-devel] [GEOS] #1078: [C API] GEOSCoordSeq_setOrdinate no
 longer returns error code
In-Reply-To: <056.c07daae9ddc5694b8ad8d0d187a6231f@osgeo.org>
References: <056.c07daae9ddc5694b8ad8d0d187a6231f@osgeo.org>
Message-ID: <071.3a7e7bd46f56a30ce0f5a297cb7a70a3@osgeo.org>

#1078: [C API] GEOSCoordSeq_setOrdinate no longer returns error code
--------------------------------+---------------------------
 Reporter:  jorisvandenbossche  |       Owner:  geos-devel@?
     Type:  defect              |      Status:  new
 Priority:  major               |   Milestone:  3.9.0
Component:  Default             |     Version:  master
 Severity:  Unassigned          |  Resolution:
 Keywords:                      |
--------------------------------+---------------------------

Comment (by jorisvandenbossche):

 (will open a PR with fix shortly)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1078#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From jorisvandenbossche at gmail.com  Sat Nov 28 08:11:42 2020
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Sat, 28 Nov 2020 17:11:42 +0100
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
Message-ID: <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>

Hi all,

On the CI of PyGEOS we have a build testing against GEOS master, and
somewhere in the last 4 days, a lot of the STRtree tests started failing
(see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86).
Looking at the commits of the last days, this might be related to the
SimpleSTRtree work?

A small (python) example of a tree consisting of a single point, which no
longer is returned when querying the tree with a big polygon that certainly
contains the point:

Using released version of GEOS:

>>> import pygeos
>>> pygeos.geos_version
(3, 8, 1)
>>> point = pygeos.Geometry("POINT (2 3)")
>>> tree = pygeos.STRtree([point])
>>> tree.query(pygeos.box(0, 0, 10, 10))
array([0])

This is correctly returning the index of the single point. But when running
with the latest GEOS master, the query doesn't find any point of the tree:

>>> import pygeos
>>> pygeos.geos_version
(3, 9, 0)
>>> point = pygeos.Geometry("POINT (2 3)")
>>> tree = pygeos.STRtree([point])
>>> tree.query(pygeos.box(0, 0, 10, 10))
array([], dtype=int64)

Are there changes expected in how the STRtree C API functions or required
changes in user code? Or maybe we are using it in some incorrect/unexpected
way? (code is at https://github.com/pygeos/pygeos/blob/master/src/strtree.c)

Best,
Joris


On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca> wrote:

> Hey all, just truing up what's underway and nearly there...
>
> - Am I right that Z coordinates are nearly done? What's the status there?
>
> I've been trying to address some performance issues, with some success and
> some ... other things.
>
> The success is the SimpleSTRtree, which is just the current STRtree but
> without the inheritance structure and with the nodes stored all next to
> each other in contiguous memory for more locality. For at least one use
> case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place
> of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I
> have pushed the SimpleSTRtree into master.
>
> While I have implemented the nearestNeighbor() functionality on the
> SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the
> IndexedFacetDistance, if anyone is super enthusiastic about it. From there
> it would affect searching in PreparedGeometry of various sorts.
>
> I also tried using a similar trick with the MonotoneChainBuilder that sits
> inside the MCIndexNoder, replacing individual heap allocations with slabs
> by putting objects onto a std::deque, and incidentally stripping out some
> book-keeping. While that seems to pick up about 3-5% speedwise,
> unfortunately something about my implementation is incorrect (and in a
> wonderfully subtle way) as it fails testing on some platforms (not mine).
> https://github.com/pramsey/geos/tree/monotone-chain-builder
>
> I've put that work to the side for now.
>
> All the performance talk is mostly because JTS still runs a lot faster
> than GEOS for some bulk processing. My current test is a big union of
> watershed boundaries, about 6MB of data, which takes about 20s under GEOS
> and about 25% of that under JTS.  It's a big gap, and in theory the two
> code bases are pretty aligned right now. Same overlayNG engine, etc. So I
> figure there has to be a big implementation ball of performance hiding
> under the covers somewhere. No luck thus far.
>
> I think we're close, looking forward to release :)
>
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/f3984cac/attachment.html>

From pramsey at cleverelephant.ca  Sat Nov 28 11:55:19 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sat, 28 Nov 2020 11:55:19 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
Message-ID: <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>



> On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> 
> Hi all,
> 
> On the CI of PyGEOS we have a build testing against GEOS master, and somewhere in the last 4 days, a lot of the STRtree tests started failing (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86). Looking at the commits of the last days, this might be related to the SimpleSTRtree work?
> 
> A small (python) example of a tree consisting of a single point, which no longer is returned when querying the tree with a big polygon that certainly contains the point:
> 
> Using released version of GEOS:
> 
> >>> import pygeos
> >>> pygeos.geos_version
> (3, 8, 1)
> >>> point = pygeos.Geometry("POINT (2 3)") 
> >>> tree = pygeos.STRtree([point]) 
> >>> tree.query(pygeos.box(0, 0, 10, 10)) 
> array([0])
> 
> This is correctly returning the index of the single point. But when running with the latest GEOS master, the query doesn't find any point of the tree:
> 
> >>> import pygeos
> >>> pygeos.geos_version
> (3, 9, 0)
> >>> point = pygeos.Geometry("POINT (2 3)")
> >>> tree = pygeos.STRtree([point])
> >>> tree.query(pygeos.box(0, 0, 10, 10))
> array([], dtype=int64)
> 
> Are there changes expected in how the STRtree C API functions or required changes in user code? Or maybe we are using it in some incorrect/unexpected way? (code is at https://github.com/pygeos/pygeos/blob/master/src/strtree.c)

There are changes, I don't think you're mis-using anything. I swapped the CAPI to use the SimpleSTRtree, figuring it would be good to share the performance win with downstream. However, I can swap it back to the original STRtree if this remains a problem.

One thing I noticed when trying to construct GEOS envelopes directly was that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a problem in your pre-existing working test. 

I just reconstructed your test in the GEOS CAPI suite, and it works as one would expect. (Namely, it finds the one point.) So I'm not sure why your test is getting different results.


// querying tree with box
template<>
template<>
void object::test<8>
()
{
    GEOSSTRtree* tree = GEOSSTRtree_create(10);
    GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
    GEOSSTRtree_insert(tree, g, g);
    GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");

    typedef std::vector<GEOSGeometry*> GList;
    GList geoms;
    ensure_equals(geoms.size(), 0);
    GEOSSTRtree_query(
        tree,
        q,
        [](void* item, void* userdata) {
            GList* geoms = (GList*)userdata;
            geoms->push_back((GEOSGeometry*)item);
        },
        &geoms);

    ensure_equals(geoms.size(), 1);
    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);

    double x = -1;
    double y = -1;
    GEOSCoordSeq_getXY(seq,  0, &x, &y);
    ensure_equals(x, 2.0);
    ensure_equals(y, 3.0);

    GEOSGeom_destroy(q);
    GEOSGeom_destroy(g);
    GEOSSTRtree_destroy(tree);
}





> 
> Best,
> Joris
> 
> 
> On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> Hey all, just truing up what's underway and nearly there...
> 
> - Am I right that Z coordinates are nearly done? What's the status there?
> 
> I've been trying to address some performance issues, with some success and some ... other things. 
> 
> The success is the SimpleSTRtree, which is just the current STRtree but without the inheritance structure and with the nodes stored all next to each other in contiguous memory for more locality. For at least one use case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I have pushed the SimpleSTRtree into master.
> 
> While I have implemented the nearestNeighbor() functionality on the SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the IndexedFacetDistance, if anyone is super enthusiastic about it. From there it would affect searching in PreparedGeometry of various sorts.
> 
> I also tried using a similar trick with the MonotoneChainBuilder that sits inside the MCIndexNoder, replacing individual heap allocations with slabs by putting objects onto a std::deque, and incidentally stripping out some book-keeping. While that seems to pick up about 3-5% speedwise, unfortunately something about my implementation is incorrect (and in a wonderfully subtle way) as it fails testing on some platforms (not mine). https://github.com/pramsey/geos/tree/monotone-chain-builder
> 
> I've put that work to the side for now.
> 
> All the performance talk is mostly because JTS still runs a lot faster than GEOS for some bulk processing. My current test is a big union of watershed boundaries, about 6MB of data, which takes about 20s under GEOS and about 25% of that under JTS.  It's a big gap, and in theory the two code bases are pretty aligned right now. Same overlayNG engine, etc. So I figure there has to be a big implementation ball of performance hiding under the covers somewhere. No luck thus far.
> 
> I think we're close, looking forward to release :)
> 
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Sat Nov 28 12:11:43 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 28 Nov 2020 20:11:43 -0000
Subject: [geos-devel] [GEOS] #1061: Cannot build GEOS on Windows 10
 under MinGW
In-Reply-To: <047.7e6fca943d9812956254e165f3f9ca71@osgeo.org>
References: <047.7e6fca943d9812956254e165f3f9ca71@osgeo.org>
Message-ID: <062.b2f53a96d3ea140c4df81e571d430156@osgeo.org>

#1061: Cannot build GEOS on Windows 10 under MinGW
-----------------------------+---------------------------
 Reporter:  twrackers        |       Owner:  geos-devel@?
     Type:  defect           |      Status:  new
 Priority:  major            |   Milestone:
Component:  Default          |     Version:  3.6.2
 Severity:  Unassigned       |  Resolution:
 Keywords:  MinGW geos make  |
-----------------------------+---------------------------

Comment (by robe):

 Sorry been distracted of late so just seeing this.  I haven't tested with
 the latest mingw64.  I've been using mingw64 gcc 8.1 and msys2.

 Which CMake are you using?  For some reason I could never get CMake to
 work with the ones I install in mingw as they seemed to be missing the
 msys makefiles.

 So I always used the 32-bit cmake windows binaries from
 https://cmake.org/download/

 I'm currently using the cmake-3.15.4-win32-x86 but the latest on the
 download site
 https://github.com/Kitware/CMake/releases/download/v3.19.1/cmake-3.19.1-win32-x86.zip
 should work fine.

 I'm guessing the 64-bit would work as well.  The main reason I use the
 32-bit is so I can use it under my msys 32-bit /mingw64-w32 builders.


 My build script looks like this very similar to yours.
 {{{
 export GCC_TYPE=81
   cmake -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release
 -DCMAKE_INSTALL_PREFIX:PATH=${PROJECTS}/geos/rel-${GEOS_VER}w${OS_BUILD}${GCC_TYPE}
 -DHAVE_STD_ISNAN=1 -DHAVE_LONG_LONG_INT_64=1 -DDISABLE_GEOS_INLINE=ON  -
 ../${CMAKE_GEOS_VER}
 }}}

 I'm using GCC 8.1

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1061#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Nov 28 12:29:14 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 28 Nov 2020 20:29:14 -0000
Subject: [geos-devel] [GEOS] #1078: [C API] GEOSCoordSeq_setOrdinate no
 longer returns error code
In-Reply-To: <056.c07daae9ddc5694b8ad8d0d187a6231f@osgeo.org>
References: <056.c07daae9ddc5694b8ad8d0d187a6231f@osgeo.org>
Message-ID: <071.45d2fb32be724910e5f8903a5b5a208d@osgeo.org>

#1078: [C API] GEOSCoordSeq_setOrdinate no longer returns error code
--------------------------------+---------------------------
 Reporter:  jorisvandenbossche  |       Owner:  geos-devel@?
     Type:  defect              |      Status:  closed
 Priority:  major               |   Milestone:  3.9.0
Component:  Default             |     Version:  master
 Severity:  Unassigned          |  Resolution:  fixed
 Keywords:                      |
--------------------------------+---------------------------
Changes (by Joris Van den Bossche <jorisvandenbossche@?>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"48d02f65db373bf915ad225a9385c5713077c39e/git" 48d02f6/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="48d02f65db373bf915ad225a9385c5713077c39e"
 Fix return error code of GEOSCoordSeq_setOrdinate (closes #1078)
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1078#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From jorisvandenbossche at gmail.com  Sat Nov 28 12:44:55 2020
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Sat, 28 Nov 2020 21:44:55 +0100
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
Message-ID: <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>

Thanks for trying to reproduce it in C/C++. One obvious difference that I
can spot is that we use an integer for the "item" that gets inserted, and
not the geometry itself, but I wouldn't expect that to influence the
result.
Although, trying to update your test case to do that, the test fails. But
that might also be an issue on my side due to my limited C++ experience (it
already fails on the "geoms.size()" check):

--- a/tests/unit/capi/GEOSSTRtreeTest.cpp
+++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
@@ -268,10 +268,11 @@ void object::test<8>
 {
     GEOSSTRtree* tree = GEOSSTRtree_create(10);
     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
-    GEOSSTRtree_insert(tree, g, g);
+    int idx = 0;
+    GEOSSTRtree_insert(tree, g, (void*)idx);
     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0
0))");

-    typedef std::vector<GEOSGeometry*> GList;
+    typedef std::vector<int> GList;
     GList geoms;
     ensure_equals(geoms.size(), 0);
     GEOSSTRtree_query(
@@ -279,23 +280,16 @@ void object::test<8>
         q,
         [](void* item, void* userdata) {
             GList* geoms = (GList*)userdata;
-            geoms->push_back((GEOSGeometry*)item);
+            geoms->push_back(*((int *)item));
         },
         &geoms);

     ensure_equals(geoms.size(), 1);
-    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
-
-    double x = -1;
-    double y = -1;
-    GEOSCoordSeq_getXY(seq,  0, &x, &y);
-    ensure_equals(x, 2.0);
-    ensure_equals(y, 3.0);
+    ensure_equals(geoms.at(0), 0);


On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca> wrote:

>
>
> > On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
> >
> > Hi all,
> >
> > On the CI of PyGEOS we have a build testing against GEOS master, and
> somewhere in the last 4 days, a lot of the STRtree tests started failing
> (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86).
> Looking at the commits of the last days, this might be related to the
> SimpleSTRtree work?
> >
> > A small (python) example of a tree consisting of a single point, which
> no longer is returned when querying the tree with a big polygon that
> certainly contains the point:
> >
> > Using released version of GEOS:
> >
> > >>> import pygeos
> > >>> pygeos.geos_version
> > (3, 8, 1)
> > >>> point = pygeos.Geometry("POINT (2 3)")
> > >>> tree = pygeos.STRtree([point])
> > >>> tree.query(pygeos.box(0, 0, 10, 10))
> > array([0])
> >
> > This is correctly returning the index of the single point. But when
> running with the latest GEOS master, the query doesn't find any point of
> the tree:
> >
> > >>> import pygeos
> > >>> pygeos.geos_version
> > (3, 9, 0)
> > >>> point = pygeos.Geometry("POINT (2 3)")
> > >>> tree = pygeos.STRtree([point])
> > >>> tree.query(pygeos.box(0, 0, 10, 10))
> > array([], dtype=int64)
> >
> > Are there changes expected in how the STRtree C API functions or
> required changes in user code? Or maybe we are using it in some
> incorrect/unexpected way? (code is at
> https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
>
> There are changes, I don't think you're mis-using anything. I swapped the
> CAPI to use the SimpleSTRtree, figuring it would be good to share the
> performance win with downstream. However, I can swap it back to the
> original STRtree if this remains a problem.
>
> One thing I noticed when trying to construct GEOS envelopes directly was
> that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a
> problem in your pre-existing working test.
>
> I just reconstructed your test in the GEOS CAPI suite, and it works as one
> would expect. (Namely, it finds the one point.) So I'm not sure why your
> test is getting different results.
>
>
> // querying tree with box
> template<>
> template<>
> void object::test<8>
> ()
> {
>     GEOSSTRtree* tree = GEOSSTRtree_create(10);
>     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>     GEOSSTRtree_insert(tree, g, g);
>     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0
> 0))");
>
>     typedef std::vector<GEOSGeometry*> GList;
>     GList geoms;
>     ensure_equals(geoms.size(), 0);
>     GEOSSTRtree_query(
>         tree,
>         q,
>         [](void* item, void* userdata) {
>             GList* geoms = (GList*)userdata;
>             geoms->push_back((GEOSGeometry*)item);
>         },
>         &geoms);
>
>     ensure_equals(geoms.size(), 1);
>     const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
>
>     double x = -1;
>     double y = -1;
>     GEOSCoordSeq_getXY(seq,  0, &x, &y);
>     ensure_equals(x, 2.0);
>     ensure_equals(y, 3.0);
>
>     GEOSGeom_destroy(q);
>     GEOSGeom_destroy(g);
>     GEOSSTRtree_destroy(tree);
> }
>
>
>
>
>
> >
> > Best,
> > Joris
> >
> >
> > On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > Hey all, just truing up what's underway and nearly there...
> >
> > - Am I right that Z coordinates are nearly done? What's the status there?
> >
> > I've been trying to address some performance issues, with some success
> and some ... other things.
> >
> > The success is the SimpleSTRtree, which is just the current STRtree but
> without the inheritance structure and with the nodes stored all next to
> each other in contiguous memory for more locality. For at least one use
> case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place
> of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I
> have pushed the SimpleSTRtree into master.
> >
> > While I have implemented the nearestNeighbor() functionality on the
> SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the
> IndexedFacetDistance, if anyone is super enthusiastic about it. From there
> it would affect searching in PreparedGeometry of various sorts.
> >
> > I also tried using a similar trick with the MonotoneChainBuilder that
> sits inside the MCIndexNoder, replacing individual heap allocations with
> slabs by putting objects onto a std::deque, and incidentally stripping out
> some book-keeping. While that seems to pick up about 3-5% speedwise,
> unfortunately something about my implementation is incorrect (and in a
> wonderfully subtle way) as it fails testing on some platforms (not mine).
> https://github.com/pramsey/geos/tree/monotone-chain-builder
> >
> > I've put that work to the side for now.
> >
> > All the performance talk is mostly because JTS still runs a lot faster
> than GEOS for some bulk processing. My current test is a big union of
> watershed boundaries, about 6MB of data, which takes about 20s under GEOS
> and about 25% of that under JTS.  It's a big gap, and in theory the two
> code bases are pretty aligned right now. Same overlayNG engine, etc. So I
> figure there has to be a big implementation ball of performance hiding
> under the covers somewhere. No luck thus far.
> >
> > I think we're close, looking forward to release :)
> >
> > P
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/b3204ff0/attachment.html>

From pramsey at cleverelephant.ca  Sat Nov 28 12:53:47 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sat, 28 Nov 2020 12:53:47 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
Message-ID: <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>



> On Nov 28, 2020, at 12:44 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> 
> Thanks for trying to reproduce it in C/C++. One obvious difference that I can spot is that we use an integer for the "item" that gets inserted, and not the geometry itself, but I wouldn't expect that to influence the result. 
> Although, trying to update your test case to do that, the test fails. But that might also be an issue on my side due to my limited C++ experience (it already fails on the "geoms.size()" check):

Nope still not seeing it... one small mistake in your query, trying to cast the int to a void, instead of passing in a the pointer to the address, here's one that works. Unfortunately that leaves us no closer to knowing why the SimpleSTRtree is unhappy in the python context. I fear I may just have to revert the CAPI to the old tree.


// querying tree with box
template<>
template<>
void object::test<9>
()
{
    GEOSSTRtree* tree = GEOSSTRtree_create(10);

    GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
    int payload = 876;
    GEOSSTRtree_insert(tree, g, &payload);

    GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");

    typedef std::vector<int*> IList;
    IList items;
    ensure_equals(items.size(), 0);
    GEOSSTRtree_query(
        tree,
        q,
        [](void* item, void* userdata) {
            IList* items = (IList*)userdata;
            items->push_back((int*)item);
        },
        &items);

    ensure_equals(items.size(), 1);

    ensure_equals(*(items[0]), payload);

    GEOSGeom_destroy(q);
    GEOSGeom_destroy(g);
    GEOSSTRtree_destroy(tree);
}




> 
> --- a/tests/unit/capi/GEOSSTRtreeTest.cpp
> +++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
> @@ -268,10 +268,11 @@ void object::test<8>
>  {
>      GEOSSTRtree* tree = GEOSSTRtree_create(10);
>      GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> -    GEOSSTRtree_insert(tree, g, g);
> +    int idx = 0;
> +    GEOSSTRtree_insert(tree, g, (void*)idx);
>      GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>  
> -    typedef std::vector<GEOSGeometry*> GList;
> +    typedef std::vector<int> GList;
>      GList geoms;
>      ensure_equals(geoms.size(), 0);
>      GEOSSTRtree_query(
> @@ -279,23 +280,16 @@ void object::test<8>
>          q,
>          [](void* item, void* userdata) {
>              GList* geoms = (GList*)userdata;
> -            geoms->push_back((GEOSGeometry*)item);
> +            geoms->push_back(*((int *)item));
>          },
>          &geoms);
>  
>      ensure_equals(geoms.size(), 1);
> -    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> -
> -    double x = -1;
> -    double y = -1;
> -    GEOSCoordSeq_getXY(seq,  0, &x, &y);
> -    ensure_equals(x, 2.0);
> -    ensure_equals(y, 3.0);
> +    ensure_equals(geoms.at(0), 0);
>  
> 
> On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> > On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> > 
> > Hi all,
> > 
> > On the CI of PyGEOS we have a build testing against GEOS master, and somewhere in the last 4 days, a lot of the STRtree tests started failing (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86). Looking at the commits of the last days, this might be related to the SimpleSTRtree work?
> > 
> > A small (python) example of a tree consisting of a single point, which no longer is returned when querying the tree with a big polygon that certainly contains the point:
> > 
> > Using released version of GEOS:
> > 
> > >>> import pygeos
> > >>> pygeos.geos_version
> > (3, 8, 1)
> > >>> point = pygeos.Geometry("POINT (2 3)") 
> > >>> tree = pygeos.STRtree([point]) 
> > >>> tree.query(pygeos.box(0, 0, 10, 10)) 
> > array([0])
> > 
> > This is correctly returning the index of the single point. But when running with the latest GEOS master, the query doesn't find any point of the tree:
> > 
> > >>> import pygeos
> > >>> pygeos.geos_version
> > (3, 9, 0)
> > >>> point = pygeos.Geometry("POINT (2 3)")
> > >>> tree = pygeos.STRtree([point])
> > >>> tree.query(pygeos.box(0, 0, 10, 10))
> > array([], dtype=int64)
> > 
> > Are there changes expected in how the STRtree C API functions or required changes in user code? Or maybe we are using it in some incorrect/unexpected way? (code is at https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
> 
> There are changes, I don't think you're mis-using anything. I swapped the CAPI to use the SimpleSTRtree, figuring it would be good to share the performance win with downstream. However, I can swap it back to the original STRtree if this remains a problem.
> 
> One thing I noticed when trying to construct GEOS envelopes directly was that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a problem in your pre-existing working test. 
> 
> I just reconstructed your test in the GEOS CAPI suite, and it works as one would expect. (Namely, it finds the one point.) So I'm not sure why your test is getting different results.
> 
> 
> // querying tree with box
> template<>
> template<>
> void object::test<8>
> ()
> {
>     GEOSSTRtree* tree = GEOSSTRtree_create(10);
>     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>     GEOSSTRtree_insert(tree, g, g);
>     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
> 
>     typedef std::vector<GEOSGeometry*> GList;
>     GList geoms;
>     ensure_equals(geoms.size(), 0);
>     GEOSSTRtree_query(
>         tree,
>         q,
>         [](void* item, void* userdata) {
>             GList* geoms = (GList*)userdata;
>             geoms->push_back((GEOSGeometry*)item);
>         },
>         &geoms);
> 
>     ensure_equals(geoms.size(), 1);
>     const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> 
>     double x = -1;
>     double y = -1;
>     GEOSCoordSeq_getXY(seq,  0, &x, &y);
>     ensure_equals(x, 2.0);
>     ensure_equals(y, 3.0);
> 
>     GEOSGeom_destroy(q);
>     GEOSGeom_destroy(g);
>     GEOSSTRtree_destroy(tree);
> }
> 
> 
> 
> 
> 
> > 
> > Best,
> > Joris
> > 
> > 
> > On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > Hey all, just truing up what's underway and nearly there...
> > 
> > - Am I right that Z coordinates are nearly done? What's the status there?
> > 
> > I've been trying to address some performance issues, with some success and some ... other things. 
> > 
> > The success is the SimpleSTRtree, which is just the current STRtree but without the inheritance structure and with the nodes stored all next to each other in contiguous memory for more locality. For at least one use case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I have pushed the SimpleSTRtree into master.
> > 
> > While I have implemented the nearestNeighbor() functionality on the SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the IndexedFacetDistance, if anyone is super enthusiastic about it. From there it would affect searching in PreparedGeometry of various sorts.
> > 
> > I also tried using a similar trick with the MonotoneChainBuilder that sits inside the MCIndexNoder, replacing individual heap allocations with slabs by putting objects onto a std::deque, and incidentally stripping out some book-keeping. While that seems to pick up about 3-5% speedwise, unfortunately something about my implementation is incorrect (and in a wonderfully subtle way) as it fails testing on some platforms (not mine). https://github.com/pramsey/geos/tree/monotone-chain-builder
> > 
> > I've put that work to the side for now.
> > 
> > All the performance talk is mostly because JTS still runs a lot faster than GEOS for some bulk processing. My current test is a big union of watershed boundaries, about 6MB of data, which takes about 20s under GEOS and about 25% of that under JTS.  It's a big gap, and in theory the two code bases are pretty aligned right now. Same overlayNG engine, etc. So I figure there has to be a big implementation ball of performance hiding under the covers somewhere. No luck thus far.
> > 
> > I think we're close, looking forward to release :)
> > 
> > P
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From jorisvandenbossche at gmail.com  Sat Nov 28 13:05:00 2020
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Sat, 28 Nov 2020 22:05:00 +0100
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
 <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>
Message-ID: <CALQtMBaofDnKi274VS_RPTug6Cm1mrTX0OXTHJhC_EPiAZwang@mail.gmail.com>

On Sat, 28 Nov 2020 at 21:53, Paul Ramsey <pramsey at cleverelephant.ca> wrote:

>
>
> > On Nov 28, 2020, at 12:44 PM, Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
> >
> > Thanks for trying to reproduce it in C/C++. One obvious difference that
> I can spot is that we use an integer for the "item" that gets inserted, and
> not the geometry itself, but I wouldn't expect that to influence the
> result.
> > Although, trying to update your test case to do that, the test fails.
> But that might also be an issue on my side due to my limited C++ experience
> (it already fails on the "geoms.size()" check):
>
> Nope still not seeing it... one small mistake in your query


Also not if you try my original code *with* the mistake?
Because your version indeed passes for me as well, but I *think* the
version I wrote resembles more closely the PyGEOS code (so it might be an
issue in our C code on how we use the tree).


> , trying to cast the int to a void, instead of passing in a the pointer to
> the address, here's one that works. Unfortunately that leaves us no closer
> to knowing why the SimpleSTRtree is unhappy in the python context. I fear I
> may just have to revert the CAPI to the old tree.
>
>
> // querying tree with box
> template<>
> template<>
> void object::test<9>
> ()
> {
>     GEOSSTRtree* tree = GEOSSTRtree_create(10);
>
>     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>     int payload = 876;
>     GEOSSTRtree_insert(tree, g, &payload);
>
>     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0
> 0))");
>
>     typedef std::vector<int*> IList;
>     IList items;
>     ensure_equals(items.size(), 0);
>     GEOSSTRtree_query(
>         tree,
>         q,
>         [](void* item, void* userdata) {
>             IList* items = (IList*)userdata;
>             items->push_back((int*)item);
>         },
>         &items);
>
>     ensure_equals(items.size(), 1);
>
>     ensure_equals(*(items[0]), payload);
>
>     GEOSGeom_destroy(q);
>     GEOSGeom_destroy(g);
>     GEOSSTRtree_destroy(tree);
> }
>
>
>
>
> >
> > --- a/tests/unit/capi/GEOSSTRtreeTest.cpp
> > +++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
> > @@ -268,10 +268,11 @@ void object::test<8>
> >  {
> >      GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >      GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> > -    GEOSSTRtree_insert(tree, g, g);
> > +    int idx = 0;
> > +    GEOSSTRtree_insert(tree, g, (void*)idx);
> >      GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0
> 10, 0 0))");
> >
> > -    typedef std::vector<GEOSGeometry*> GList;
> > +    typedef std::vector<int> GList;
> >      GList geoms;
> >      ensure_equals(geoms.size(), 0);
> >      GEOSSTRtree_query(
> > @@ -279,23 +280,16 @@ void object::test<8>
> >          q,
> >          [](void* item, void* userdata) {
> >              GList* geoms = (GList*)userdata;
> > -            geoms->push_back((GEOSGeometry*)item);
> > +            geoms->push_back(*((int *)item));
> >          },
> >          &geoms);
> >
> >      ensure_equals(geoms.size(), 1);
> > -    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> > -
> > -    double x = -1;
> > -    double y = -1;
> > -    GEOSCoordSeq_getXY(seq,  0, &x, &y);
> > -    ensure_equals(x, 2.0);
> > -    ensure_equals(y, 3.0);
> > +    ensure_equals(geoms.at(0), 0);
> >
> >
> > On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> >
> > > On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
> > >
> > > Hi all,
> > >
> > > On the CI of PyGEOS we have a build testing against GEOS master, and
> somewhere in the last 4 days, a lot of the STRtree tests started failing
> (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86).
> Looking at the commits of the last days, this might be related to the
> SimpleSTRtree work?
> > >
> > > A small (python) example of a tree consisting of a single point, which
> no longer is returned when querying the tree with a big polygon that
> certainly contains the point:
> > >
> > > Using released version of GEOS:
> > >
> > > >>> import pygeos
> > > >>> pygeos.geos_version
> > > (3, 8, 1)
> > > >>> point = pygeos.Geometry("POINT (2 3)")
> > > >>> tree = pygeos.STRtree([point])
> > > >>> tree.query(pygeos.box(0, 0, 10, 10))
> > > array([0])
> > >
> > > This is correctly returning the index of the single point. But when
> running with the latest GEOS master, the query doesn't find any point of
> the tree:
> > >
> > > >>> import pygeos
> > > >>> pygeos.geos_version
> > > (3, 9, 0)
> > > >>> point = pygeos.Geometry("POINT (2 3)")
> > > >>> tree = pygeos.STRtree([point])
> > > >>> tree.query(pygeos.box(0, 0, 10, 10))
> > > array([], dtype=int64)
> > >
> > > Are there changes expected in how the STRtree C API functions or
> required changes in user code? Or maybe we are using it in some
> incorrect/unexpected way? (code is at
> https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
> >
> > There are changes, I don't think you're mis-using anything. I swapped
> the CAPI to use the SimpleSTRtree, figuring it would be good to share the
> performance win with downstream. However, I can swap it back to the
> original STRtree if this remains a problem.
> >
> > One thing I noticed when trying to construct GEOS envelopes directly was
> that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a
> problem in your pre-existing working test.
> >
> > I just reconstructed your test in the GEOS CAPI suite, and it works as
> one would expect. (Namely, it finds the one point.) So I'm not sure why
> your test is getting different results.
> >
> >
> > // querying tree with box
> > template<>
> > template<>
> > void object::test<8>
> > ()
> > {
> >     GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> >     GEOSSTRtree_insert(tree, g, g);
> >     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10,
> 0 0))");
> >
> >     typedef std::vector<GEOSGeometry*> GList;
> >     GList geoms;
> >     ensure_equals(geoms.size(), 0);
> >     GEOSSTRtree_query(
> >         tree,
> >         q,
> >         [](void* item, void* userdata) {
> >             GList* geoms = (GList*)userdata;
> >             geoms->push_back((GEOSGeometry*)item);
> >         },
> >         &geoms);
> >
> >     ensure_equals(geoms.size(), 1);
> >     const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> >
> >     double x = -1;
> >     double y = -1;
> >     GEOSCoordSeq_getXY(seq,  0, &x, &y);
> >     ensure_equals(x, 2.0);
> >     ensure_equals(y, 3.0);
> >
> >     GEOSGeom_destroy(q);
> >     GEOSGeom_destroy(g);
> >     GEOSSTRtree_destroy(tree);
> > }
> >
> >
> >
> >
> >
> > >
> > > Best,
> > > Joris
> > >
> > >
> > > On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > > Hey all, just truing up what's underway and nearly there...
> > >
> > > - Am I right that Z coordinates are nearly done? What's the status
> there?
> > >
> > > I've been trying to address some performance issues, with some success
> and some ... other things.
> > >
> > > The success is the SimpleSTRtree, which is just the current STRtree
> but without the inheritance structure and with the nodes stored all next to
> each other in contiguous memory for more locality. For at least one use
> case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place
> of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I
> have pushed the SimpleSTRtree into master.
> > >
> > > While I have implemented the nearestNeighbor() functionality on the
> SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the
> IndexedFacetDistance, if anyone is super enthusiastic about it. From there
> it would affect searching in PreparedGeometry of various sorts.
> > >
> > > I also tried using a similar trick with the MonotoneChainBuilder that
> sits inside the MCIndexNoder, replacing individual heap allocations with
> slabs by putting objects onto a std::deque, and incidentally stripping out
> some book-keeping. While that seems to pick up about 3-5% speedwise,
> unfortunately something about my implementation is incorrect (and in a
> wonderfully subtle way) as it fails testing on some platforms (not mine).
> https://github.com/pramsey/geos/tree/monotone-chain-builder
> > >
> > > I've put that work to the side for now.
> > >
> > > All the performance talk is mostly because JTS still runs a lot faster
> than GEOS for some bulk processing. My current test is a big union of
> watershed boundaries, about 6MB of data, which takes about 20s under GEOS
> and about 25% of that under JTS.  It's a big gap, and in theory the two
> code bases are pretty aligned right now. Same overlayNG engine, etc. So I
> figure there has to be a big implementation ball of performance hiding
> under the covers somewhere. No luck thus far.
> > >
> > > I think we're close, looking forward to release :)
> > >
> > > P
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/536dd8f1/attachment.html>

From pramsey at cleverelephant.ca  Sat Nov 28 13:11:40 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sat, 28 Nov 2020 13:11:40 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CALQtMBaofDnKi274VS_RPTug6Cm1mrTX0OXTHJhC_EPiAZwang@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
 <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>
 <CALQtMBaofDnKi274VS_RPTug6Cm1mrTX0OXTHJhC_EPiAZwang@mail.gmail.com>
Message-ID: <A8A2B9F8-8E12-4C54-8F45-5B139034D9FD@cleverelephant.ca>



> On Nov 28, 2020, at 1:05 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> 
> 
> On Sat, 28 Nov 2020 at 21:53, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> > On Nov 28, 2020, at 12:44 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> > 
> > Thanks for trying to reproduce it in C/C++. One obvious difference that I can spot is that we use an integer for the "item" that gets inserted, and not the geometry itself, but I wouldn't expect that to influence the result. 
> > Although, trying to update your test case to do that, the test fails. But that might also be an issue on my side due to my limited C++ experience (it already fails on the "geoms.size()" check):
> 
> Nope still not seeing it... one small mistake in your query
> 
> Also not if you try my original code *with* the mistake? 

Well, with the mistake the code is saying "here's a null pointer" (since that's what casting 0 to a void* will get you) index this. I'll see! It shouldn't really matter from an index point-of-view, it should still index it and return a null pointer out the back end.

> Because your version indeed passes for me as well, but I *think* the version I wrote resembles more closely the PyGEOS code (so it might be an issue in our C code on how we use the tree).
>  
> , trying to cast the int to a void, instead of passing in a the pointer to the address, here's one that works. Unfortunately that leaves us no closer to knowing why the SimpleSTRtree is unhappy in the python context. I fear I may just have to revert the CAPI to the old tree.
> 
> 
> // querying tree with box
> template<>
> template<>
> void object::test<9>
> ()
> {
>     GEOSSTRtree* tree = GEOSSTRtree_create(10);
> 
>     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>     int payload = 876;
>     GEOSSTRtree_insert(tree, g, &payload);
> 
>     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
> 
>     typedef std::vector<int*> IList;
>     IList items;
>     ensure_equals(items.size(), 0);
>     GEOSSTRtree_query(
>         tree,
>         q,
>         [](void* item, void* userdata) {
>             IList* items = (IList*)userdata;
>             items->push_back((int*)item);
>         },
>         &items);
> 
>     ensure_equals(items.size(), 1);
> 
>     ensure_equals(*(items[0]), payload);
> 
>     GEOSGeom_destroy(q);
>     GEOSGeom_destroy(g);
>     GEOSSTRtree_destroy(tree);
> }
> 
> 
> 
> 
> > 
> > --- a/tests/unit/capi/GEOSSTRtreeTest.cpp
> > +++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
> > @@ -268,10 +268,11 @@ void object::test<8>
> >  {
> >      GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >      GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> > -    GEOSSTRtree_insert(tree, g, g);
> > +    int idx = 0;
> > +    GEOSSTRtree_insert(tree, g, (void*)idx);
> >      GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
> >  
> > -    typedef std::vector<GEOSGeometry*> GList;
> > +    typedef std::vector<int> GList;
> >      GList geoms;
> >      ensure_equals(geoms.size(), 0);
> >      GEOSSTRtree_query(
> > @@ -279,23 +280,16 @@ void object::test<8>
> >          q,
> >          [](void* item, void* userdata) {
> >              GList* geoms = (GList*)userdata;
> > -            geoms->push_back((GEOSGeometry*)item);
> > +            geoms->push_back(*((int *)item));
> >          },
> >          &geoms);
> >  
> >      ensure_equals(geoms.size(), 1);
> > -    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> > -
> > -    double x = -1;
> > -    double y = -1;
> > -    GEOSCoordSeq_getXY(seq,  0, &x, &y);
> > -    ensure_equals(x, 2.0);
> > -    ensure_equals(y, 3.0);
> > +    ensure_equals(geoms.at(0), 0);
> >  
> > 
> > On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > 
> > 
> > > On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> > > 
> > > Hi all,
> > > 
> > > On the CI of PyGEOS we have a build testing against GEOS master, and somewhere in the last 4 days, a lot of the STRtree tests started failing (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86). Looking at the commits of the last days, this might be related to the SimpleSTRtree work?
> > > 
> > > A small (python) example of a tree consisting of a single point, which no longer is returned when querying the tree with a big polygon that certainly contains the point:
> > > 
> > > Using released version of GEOS:
> > > 
> > > >>> import pygeos
> > > >>> pygeos.geos_version
> > > (3, 8, 1)
> > > >>> point = pygeos.Geometry("POINT (2 3)") 
> > > >>> tree = pygeos.STRtree([point]) 
> > > >>> tree.query(pygeos.box(0, 0, 10, 10)) 
> > > array([0])
> > > 
> > > This is correctly returning the index of the single point. But when running with the latest GEOS master, the query doesn't find any point of the tree:
> > > 
> > > >>> import pygeos
> > > >>> pygeos.geos_version
> > > (3, 9, 0)
> > > >>> point = pygeos.Geometry("POINT (2 3)")
> > > >>> tree = pygeos.STRtree([point])
> > > >>> tree.query(pygeos.box(0, 0, 10, 10))
> > > array([], dtype=int64)
> > > 
> > > Are there changes expected in how the STRtree C API functions or required changes in user code? Or maybe we are using it in some incorrect/unexpected way? (code is at https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
> > 
> > There are changes, I don't think you're mis-using anything. I swapped the CAPI to use the SimpleSTRtree, figuring it would be good to share the performance win with downstream. However, I can swap it back to the original STRtree if this remains a problem.
> > 
> > One thing I noticed when trying to construct GEOS envelopes directly was that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a problem in your pre-existing working test. 
> > 
> > I just reconstructed your test in the GEOS CAPI suite, and it works as one would expect. (Namely, it finds the one point.) So I'm not sure why your test is getting different results.
> > 
> > 
> > // querying tree with box
> > template<>
> > template<>
> > void object::test<8>
> > ()
> > {
> >     GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> >     GEOSSTRtree_insert(tree, g, g);
> >     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
> > 
> >     typedef std::vector<GEOSGeometry*> GList;
> >     GList geoms;
> >     ensure_equals(geoms.size(), 0);
> >     GEOSSTRtree_query(
> >         tree,
> >         q,
> >         [](void* item, void* userdata) {
> >             GList* geoms = (GList*)userdata;
> >             geoms->push_back((GEOSGeometry*)item);
> >         },
> >         &geoms);
> > 
> >     ensure_equals(geoms.size(), 1);
> >     const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> > 
> >     double x = -1;
> >     double y = -1;
> >     GEOSCoordSeq_getXY(seq,  0, &x, &y);
> >     ensure_equals(x, 2.0);
> >     ensure_equals(y, 3.0);
> > 
> >     GEOSGeom_destroy(q);
> >     GEOSGeom_destroy(g);
> >     GEOSSTRtree_destroy(tree);
> > }
> > 
> > 
> > 
> > 
> > 
> > > 
> > > Best,
> > > Joris
> > > 
> > > 
> > > On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > > Hey all, just truing up what's underway and nearly there...
> > > 
> > > - Am I right that Z coordinates are nearly done? What's the status there?
> > > 
> > > I've been trying to address some performance issues, with some success and some ... other things. 
> > > 
> > > The success is the SimpleSTRtree, which is just the current STRtree but without the inheritance structure and with the nodes stored all next to each other in contiguous memory for more locality. For at least one use case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I have pushed the SimpleSTRtree into master.
> > > 
> > > While I have implemented the nearestNeighbor() functionality on the SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the IndexedFacetDistance, if anyone is super enthusiastic about it. From there it would affect searching in PreparedGeometry of various sorts.
> > > 
> > > I also tried using a similar trick with the MonotoneChainBuilder that sits inside the MCIndexNoder, replacing individual heap allocations with slabs by putting objects onto a std::deque, and incidentally stripping out some book-keeping. While that seems to pick up about 3-5% speedwise, unfortunately something about my implementation is incorrect (and in a wonderfully subtle way) as it fails testing on some platforms (not mine). https://github.com/pramsey/geos/tree/monotone-chain-builder
> > > 
> > > I've put that work to the side for now.
> > > 
> > > All the performance talk is mostly because JTS still runs a lot faster than GEOS for some bulk processing. My current test is a big union of watershed boundaries, about 6MB of data, which takes about 20s under GEOS and about 25% of that under JTS.  It's a big gap, and in theory the two code bases are pretty aligned right now. Same overlayNG engine, etc. So I figure there has to be a big implementation ball of performance hiding under the covers somewhere. No luck thus far.
> > > 
> > > I think we're close, looking forward to release :)
> > > 
> > > P
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Sat Nov 28 13:13:59 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sat, 28 Nov 2020 13:13:59 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <A8A2B9F8-8E12-4C54-8F45-5B139034D9FD@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
 <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>
 <CALQtMBaofDnKi274VS_RPTug6Cm1mrTX0OXTHJhC_EPiAZwang@mail.gmail.com>
 <A8A2B9F8-8E12-4C54-8F45-5B139034D9FD@cleverelephant.ca>
Message-ID: <93C912EB-6BCF-4437-817E-068B156D912C@cleverelephant.ca>



> On Nov 28, 2020, at 1:11 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> 
>> On Nov 28, 2020, at 1:05 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
>> 
>> 
>> On Sat, 28 Nov 2020 at 21:53, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> 
>> 
>>> On Nov 28, 2020, at 12:44 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
>>> 
>>> Thanks for trying to reproduce it in C/C++. One obvious difference that I can spot is that we use an integer for the "item" that gets inserted, and not the geometry itself, but I wouldn't expect that to influence the result. 
>>> Although, trying to update your test case to do that, the test fails. But that might also be an issue on my side due to my limited C++ experience (it already fails on the "geoms.size()" check):
>> 
>> Nope still not seeing it... one small mistake in your query
>> 
>> Also not if you try my original code *with* the mistake? 
> 
> Well, with the mistake the code is saying "here's a null pointer" (since that's what casting 0 to a void* will get you) index this. I'll see! It shouldn't really matter from an index point-of-view, it should still index it and return a null pointer out the back end.

And indeed it does not work. So, something to examine... why can we not index with a null item?

P

> 
>> Because your version indeed passes for me as well, but I *think* the version I wrote resembles more closely the PyGEOS code (so it might be an issue in our C code on how we use the tree).
>> 
>> , trying to cast the int to a void, instead of passing in a the pointer to the address, here's one that works. Unfortunately that leaves us no closer to knowing why the SimpleSTRtree is unhappy in the python context. I fear I may just have to revert the CAPI to the old tree.
>> 
>> 
>> // querying tree with box
>> template<>
>> template<>
>> void object::test<9>
>> ()
>> {
>>    GEOSSTRtree* tree = GEOSSTRtree_create(10);
>> 
>>    GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>>    int payload = 876;
>>    GEOSSTRtree_insert(tree, g, &payload);
>> 
>>    GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>> 
>>    typedef std::vector<int*> IList;
>>    IList items;
>>    ensure_equals(items.size(), 0);
>>    GEOSSTRtree_query(
>>        tree,
>>        q,
>>        [](void* item, void* userdata) {
>>            IList* items = (IList*)userdata;
>>            items->push_back((int*)item);
>>        },
>>        &items);
>> 
>>    ensure_equals(items.size(), 1);
>> 
>>    ensure_equals(*(items[0]), payload);
>> 
>>    GEOSGeom_destroy(q);
>>    GEOSGeom_destroy(g);
>>    GEOSSTRtree_destroy(tree);
>> }
>> 
>> 
>> 
>> 
>>> 
>>> --- a/tests/unit/capi/GEOSSTRtreeTest.cpp
>>> +++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
>>> @@ -268,10 +268,11 @@ void object::test<8>
>>> {
>>>     GEOSSTRtree* tree = GEOSSTRtree_create(10);
>>>     GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>>> -    GEOSSTRtree_insert(tree, g, g);
>>> +    int idx = 0;
>>> +    GEOSSTRtree_insert(tree, g, (void*)idx);
>>>     GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>>> 
>>> -    typedef std::vector<GEOSGeometry*> GList;
>>> +    typedef std::vector<int> GList;
>>>     GList geoms;
>>>     ensure_equals(geoms.size(), 0);
>>>     GEOSSTRtree_query(
>>> @@ -279,23 +280,16 @@ void object::test<8>
>>>         q,
>>>         [](void* item, void* userdata) {
>>>             GList* geoms = (GList*)userdata;
>>> -            geoms->push_back((GEOSGeometry*)item);
>>> +            geoms->push_back(*((int *)item));
>>>         },
>>>         &geoms);
>>> 
>>>     ensure_equals(geoms.size(), 1);
>>> -    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
>>> -
>>> -    double x = -1;
>>> -    double y = -1;
>>> -    GEOSCoordSeq_getXY(seq,  0, &x, &y);
>>> -    ensure_equals(x, 2.0);
>>> -    ensure_equals(y, 3.0);
>>> +    ensure_equals(geoms.at(0), 0);
>>> 
>>> 
>>> On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>> 
>>> 
>>>> On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
>>>> 
>>>> Hi all,
>>>> 
>>>> On the CI of PyGEOS we have a build testing against GEOS master, and somewhere in the last 4 days, a lot of the STRtree tests started failing (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86). Looking at the commits of the last days, this might be related to the SimpleSTRtree work?
>>>> 
>>>> A small (python) example of a tree consisting of a single point, which no longer is returned when querying the tree with a big polygon that certainly contains the point:
>>>> 
>>>> Using released version of GEOS:
>>>> 
>>>>>>> import pygeos
>>>>>>> pygeos.geos_version
>>>> (3, 8, 1)
>>>>>>> point = pygeos.Geometry("POINT (2 3)") 
>>>>>>> tree = pygeos.STRtree([point]) 
>>>>>>> tree.query(pygeos.box(0, 0, 10, 10)) 
>>>> array([0])
>>>> 
>>>> This is correctly returning the index of the single point. But when running with the latest GEOS master, the query doesn't find any point of the tree:
>>>> 
>>>>>>> import pygeos
>>>>>>> pygeos.geos_version
>>>> (3, 9, 0)
>>>>>>> point = pygeos.Geometry("POINT (2 3)")
>>>>>>> tree = pygeos.STRtree([point])
>>>>>>> tree.query(pygeos.box(0, 0, 10, 10))
>>>> array([], dtype=int64)
>>>> 
>>>> Are there changes expected in how the STRtree C API functions or required changes in user code? Or maybe we are using it in some incorrect/unexpected way? (code is at https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
>>> 
>>> There are changes, I don't think you're mis-using anything. I swapped the CAPI to use the SimpleSTRtree, figuring it would be good to share the performance win with downstream. However, I can swap it back to the original STRtree if this remains a problem.
>>> 
>>> One thing I noticed when trying to construct GEOS envelopes directly was that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a problem in your pre-existing working test. 
>>> 
>>> I just reconstructed your test in the GEOS CAPI suite, and it works as one would expect. (Namely, it finds the one point.) So I'm not sure why your test is getting different results.
>>> 
>>> 
>>> // querying tree with box
>>> template<>
>>> template<>
>>> void object::test<8>
>>> ()
>>> {
>>>    GEOSSTRtree* tree = GEOSSTRtree_create(10);
>>>    GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>>>    GEOSSTRtree_insert(tree, g, g);
>>>    GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>>> 
>>>    typedef std::vector<GEOSGeometry*> GList;
>>>    GList geoms;
>>>    ensure_equals(geoms.size(), 0);
>>>    GEOSSTRtree_query(
>>>        tree,
>>>        q,
>>>        [](void* item, void* userdata) {
>>>            GList* geoms = (GList*)userdata;
>>>            geoms->push_back((GEOSGeometry*)item);
>>>        },
>>>        &geoms);
>>> 
>>>    ensure_equals(geoms.size(), 1);
>>>    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
>>> 
>>>    double x = -1;
>>>    double y = -1;
>>>    GEOSCoordSeq_getXY(seq,  0, &x, &y);
>>>    ensure_equals(x, 2.0);
>>>    ensure_equals(y, 3.0);
>>> 
>>>    GEOSGeom_destroy(q);
>>>    GEOSGeom_destroy(g);
>>>    GEOSSTRtree_destroy(tree);
>>> }
>>> 
>>> 
>>> 
>>> 
>>> 
>>>> 
>>>> Best,
>>>> Joris
>>>> 
>>>> 
>>>> On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>>> Hey all, just truing up what's underway and nearly there...
>>>> 
>>>> - Am I right that Z coordinates are nearly done? What's the status there?
>>>> 
>>>> I've been trying to address some performance issues, with some success and some ... other things. 
>>>> 
>>>> The success is the SimpleSTRtree, which is just the current STRtree but without the inheritance structure and with the nodes stored all next to each other in contiguous memory for more locality. For at least one use case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I have pushed the SimpleSTRtree into master.
>>>> 
>>>> While I have implemented the nearestNeighbor() functionality on the SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the IndexedFacetDistance, if anyone is super enthusiastic about it. From there it would affect searching in PreparedGeometry of various sorts.
>>>> 
>>>> I also tried using a similar trick with the MonotoneChainBuilder that sits inside the MCIndexNoder, replacing individual heap allocations with slabs by putting objects onto a std::deque, and incidentally stripping out some book-keeping. While that seems to pick up about 3-5% speedwise, unfortunately something about my implementation is incorrect (and in a wonderfully subtle way) as it fails testing on some platforms (not mine). https://github.com/pramsey/geos/tree/monotone-chain-builder
>>>> 
>>>> I've put that work to the side for now.
>>>> 
>>>> All the performance talk is mostly because JTS still runs a lot faster than GEOS for some bulk processing. My current test is a big union of watershed boundaries, about 6MB of data, which takes about 20s under GEOS and about 25% of that under JTS. It's a big gap, and in theory the two code bases are pretty aligned right now. Same overlayNG engine, etc. So I figure there has to be a big implementation ball of performance hiding under the covers somewhere. No luck thus far.
>>>> 
>>>> I think we're close, looking forward to release :)
>>>> 
>>>> P
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>> 
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> 
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Sat Nov 28 13:24:24 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sat, 28 Nov 2020 13:24:24 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <93C912EB-6BCF-4437-817E-068B156D912C@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
 <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>
 <CALQtMBaofDnKi274VS_RPTug6Cm1mrTX0OXTHJhC_EPiAZwang@mail.gmail.com>
 <A8A2B9F8-8E12-4C54-8F45-5B139034D9FD@cleverelephant.ca>
 <93C912EB-6BCF-4437-817E-068B156D912C@cleverelephant.ca>
Message-ID: <BC7CCE84-F849-44E9-856C-B820ECB3A4F6@cleverelephant.ca>



> On Nov 28, 2020, at 1:13 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> 
>> On Nov 28, 2020, at 1:11 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> 
>> 
>> 
>>> On Nov 28, 2020, at 1:05 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
>>> 
>>> 
>>> On Sat, 28 Nov 2020 at 21:53, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>> 
>>> 
>>>> On Nov 28, 2020, at 12:44 PM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
>>>> 
>>>> Thanks for trying to reproduce it in C/C++. One obvious difference that I can spot is that we use an integer for the "item" that gets inserted, and not the geometry itself, but I wouldn't expect that to influence the result. 
>>>> Although, trying to update your test case to do that, the test fails. But that might also be an issue on my side due to my limited C++ experience (it already fails on the "geoms.size()" check):
>>> 
>>> Nope still not seeing it... one small mistake in your query
>>> 
>>> Also not if you try my original code *with* the mistake? 
>> 
>> Well, with the mistake the code is saying "here's a null pointer" (since that's what casting 0 to a void* will get you) index this. I'll see! It shouldn't really matter from an index point-of-view, it should still index it and return a null pointer out the back end.
> 
> And indeed it does not work. So, something to examine... why can we not index with a null item?

Because I was using a non-null item pointer as a cue that the node was a leaf node, so it wasn't picking up null items as leaves. 
So, I've pushed that fix, does that change your test suite all that much?

P


> 
> P
> 
>> 
>>> Because your version indeed passes for me as well, but I *think* the version I wrote resembles more closely the PyGEOS code (so it might be an issue in our C code on how we use the tree).
>>> 
>>> , trying to cast the int to a void, instead of passing in a the pointer to the address, here's one that works. Unfortunately that leaves us no closer to knowing why the SimpleSTRtree is unhappy in the python context. I fear I may just have to revert the CAPI to the old tree.
>>> 
>>> 
>>> // querying tree with box
>>> template<>
>>> template<>
>>> void object::test<9>
>>> ()
>>> {
>>>   GEOSSTRtree* tree = GEOSSTRtree_create(10);
>>> 
>>>   GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>>>   int payload = 876;
>>>   GEOSSTRtree_insert(tree, g, &payload);
>>> 
>>>   GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>>> 
>>>   typedef std::vector<int*> IList;
>>>   IList items;
>>>   ensure_equals(items.size(), 0);
>>>   GEOSSTRtree_query(
>>>       tree,
>>>       q,
>>>       [](void* item, void* userdata) {
>>>           IList* items = (IList*)userdata;
>>>           items->push_back((int*)item);
>>>       },
>>>       &items);
>>> 
>>>   ensure_equals(items.size(), 1);
>>> 
>>>   ensure_equals(*(items[0]), payload);
>>> 
>>>   GEOSGeom_destroy(q);
>>>   GEOSGeom_destroy(g);
>>>   GEOSSTRtree_destroy(tree);
>>> }
>>> 
>>> 
>>> 
>>> 
>>>> 
>>>> --- a/tests/unit/capi/GEOSSTRtreeTest.cpp
>>>> +++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
>>>> @@ -268,10 +268,11 @@ void object::test<8>
>>>> {
>>>>    GEOSSTRtree* tree = GEOSSTRtree_create(10);
>>>>    GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>>>> -    GEOSSTRtree_insert(tree, g, g);
>>>> +    int idx = 0;
>>>> +    GEOSSTRtree_insert(tree, g, (void*)idx);
>>>>    GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>>>> 
>>>> -    typedef std::vector<GEOSGeometry*> GList;
>>>> +    typedef std::vector<int> GList;
>>>>    GList geoms;
>>>>    ensure_equals(geoms.size(), 0);
>>>>    GEOSSTRtree_query(
>>>> @@ -279,23 +280,16 @@ void object::test<8>
>>>>        q,
>>>>        [](void* item, void* userdata) {
>>>>            GList* geoms = (GList*)userdata;
>>>> -            geoms->push_back((GEOSGeometry*)item);
>>>> +            geoms->push_back(*((int *)item));
>>>>        },
>>>>        &geoms);
>>>> 
>>>>    ensure_equals(geoms.size(), 1);
>>>> -    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
>>>> -
>>>> -    double x = -1;
>>>> -    double y = -1;
>>>> -    GEOSCoordSeq_getXY(seq,  0, &x, &y);
>>>> -    ensure_equals(x, 2.0);
>>>> -    ensure_equals(y, 3.0);
>>>> +    ensure_equals(geoms.at(0), 0);
>>>> 
>>>> 
>>>> On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>>> 
>>>> 
>>>>> On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
>>>>> 
>>>>> Hi all,
>>>>> 
>>>>> On the CI of PyGEOS we have a build testing against GEOS master, and somewhere in the last 4 days, a lot of the STRtree tests started failing (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86). Looking at the commits of the last days, this might be related to the SimpleSTRtree work?
>>>>> 
>>>>> A small (python) example of a tree consisting of a single point, which no longer is returned when querying the tree with a big polygon that certainly contains the point:
>>>>> 
>>>>> Using released version of GEOS:
>>>>> 
>>>>>>>> import pygeos
>>>>>>>> pygeos.geos_version
>>>>> (3, 8, 1)
>>>>>>>> point = pygeos.Geometry("POINT (2 3)") 
>>>>>>>> tree = pygeos.STRtree([point]) 
>>>>>>>> tree.query(pygeos.box(0, 0, 10, 10)) 
>>>>> array([0])
>>>>> 
>>>>> This is correctly returning the index of the single point. But when running with the latest GEOS master, the query doesn't find any point of the tree:
>>>>> 
>>>>>>>> import pygeos
>>>>>>>> pygeos.geos_version
>>>>> (3, 9, 0)
>>>>>>>> point = pygeos.Geometry("POINT (2 3)")
>>>>>>>> tree = pygeos.STRtree([point])
>>>>>>>> tree.query(pygeos.box(0, 0, 10, 10))
>>>>> array([], dtype=int64)
>>>>> 
>>>>> Are there changes expected in how the STRtree C API functions or required changes in user code? Or maybe we are using it in some incorrect/unexpected way? (code is at https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
>>>> 
>>>> There are changes, I don't think you're mis-using anything. I swapped the CAPI to use the SimpleSTRtree, figuring it would be good to share the performance win with downstream. However, I can swap it back to the original STRtree if this remains a problem.
>>>> 
>>>> One thing I noticed when trying to construct GEOS envelopes directly was that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a problem in your pre-existing working test. 
>>>> 
>>>> I just reconstructed your test in the GEOS CAPI suite, and it works as one would expect. (Namely, it finds the one point.) So I'm not sure why your test is getting different results.
>>>> 
>>>> 
>>>> // querying tree with box
>>>> template<>
>>>> template<>
>>>> void object::test<8>
>>>> ()
>>>> {
>>>>   GEOSSTRtree* tree = GEOSSTRtree_create(10);
>>>>   GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
>>>>   GEOSSTRtree_insert(tree, g, g);
>>>>   GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))");
>>>> 
>>>>   typedef std::vector<GEOSGeometry*> GList;
>>>>   GList geoms;
>>>>   ensure_equals(geoms.size(), 0);
>>>>   GEOSSTRtree_query(
>>>>       tree,
>>>>       q,
>>>>       [](void* item, void* userdata) {
>>>>           GList* geoms = (GList*)userdata;
>>>>           geoms->push_back((GEOSGeometry*)item);
>>>>       },
>>>>       &geoms);
>>>> 
>>>>   ensure_equals(geoms.size(), 1);
>>>>   const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
>>>> 
>>>>   double x = -1;
>>>>   double y = -1;
>>>>   GEOSCoordSeq_getXY(seq,  0, &x, &y);
>>>>   ensure_equals(x, 2.0);
>>>>   ensure_equals(y, 3.0);
>>>> 
>>>>   GEOSGeom_destroy(q);
>>>>   GEOSGeom_destroy(g);
>>>>   GEOSSTRtree_destroy(tree);
>>>> }
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> 
>>>>> Best,
>>>>> Joris
>>>>> 
>>>>> 
>>>>> On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>>>> Hey all, just truing up what's underway and nearly there...
>>>>> 
>>>>> - Am I right that Z coordinates are nearly done? What's the status there?
>>>>> 
>>>>> I've been trying to address some performance issues, with some success and some ... other things. 
>>>>> 
>>>>> The success is the SimpleSTRtree, which is just the current STRtree but without the inheritance structure and with the nodes stored all next to each other in contiguous memory for more locality. For at least one use case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I have pushed the SimpleSTRtree into master.
>>>>> 
>>>>> While I have implemented the nearestNeighbor() functionality on the SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the IndexedFacetDistance, if anyone is super enthusiastic about it. From there it would affect searching in PreparedGeometry of various sorts.
>>>>> 
>>>>> I also tried using a similar trick with the MonotoneChainBuilder that sits inside the MCIndexNoder, replacing individual heap allocations with slabs by putting objects onto a std::deque, and incidentally stripping out some book-keeping. While that seems to pick up about 3-5% speedwise, unfortunately something about my implementation is incorrect (and in a wonderfully subtle way) as it fails testing on some platforms (not mine). https://github.com/pramsey/geos/tree/monotone-chain-builder
>>>>> 
>>>>> I've put that work to the side for now.
>>>>> 
>>>>> All the performance talk is mostly because JTS still runs a lot faster than GEOS for some bulk processing. My current test is a big union of watershed boundaries, about 6MB of data, which takes about 20s under GEOS and about 25% of that under JTS. It's a big gap, and in theory the two code bases are pretty aligned right now. Same overlayNG engine, etc. So I figure there has to be a big implementation ball of performance hiding under the covers somewhere. No luck thus far.
>>>>> 
>>>>> I think we're close, looking forward to release :)
>>>>> 
>>>>> P
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>> 
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>> 
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Sat Nov 28 13:49:17 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 28 Nov 2020 21:49:17 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.c65f636e4474fcf1f66b432e08197b38@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by komzpa):

 Generally speaking Douglas-Peucker should be replaced with Visvalingam-
 Whyatt when doing anything about area. It is easily adaptable for rings.
 The epsilon will be an area then, it is usually ok to square the DP
 epsilon and run VW instead on areas.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From andrew.d.hershberger at gmail.com  Sat Nov 28 18:33:46 2020
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Sat, 28 Nov 2020 20:33:46 -0600
Subject: [geos-devel] 3.9.0beta1 + GEOSwift
Message-ID: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>

Hi all, I help maintain https://github.com/GEOSwift/GEOSwift

I'm testing out 3.9.0beta1 and have run into a couple things to share.

If you want to try any of these out directly with GEOSwift, I recommend
using the Swift Package Manager. You can clone
https://github.com/GEOSwift/GEOSwift.git and check out
branch geos-3.9.0-testing. Then run `$ swift test` to build and run the
tests. I'm using Swift 5.3.1. One way to get Swift is to use the Docker
image: https://hub.docker.com/_/swift

1) GeometryConvertible_GEOSTests.testMakeValidWhenItIsAPolygon()

This test is checking that makeValid() (a wrapper around the CAPI's
GEOSMakeValid_r) produces an expected result given some pre-defined
geometry. Here's what happened:

Input:

Polygon(
  exterior: LinearRing(
    points: [
      Point(x: 0, y: 0),
      Point(x: 2, y: 0),
      Point(x: 1, y: 1),
      Point(x: 0, y: 2),
      Point(x: 2, y: 2),
      Point(x: 1, y: 1),
      Point(x: 0, y: 0)
    ]
  )
)

Actual (wrapped in a multipolygon)

Polygon(
  exterior: LinearRing(
    points: [
      Point(x: 0, y: 2),
      Point(x: 2, y: 2),
      Point(x: 1, y: 1),
      Point(x: 0, y: 2)
    ]
  )
)

Polygon(
  exterior: LinearRing(
    points: [
      Point(x: 2, y: 0),
      Point(x: 0, y: 0),
      Point(x: 1, y: 1),
      Point(x: 2, y: 0)
    ]
  )
)

Expected (wrapped in any order in a multipolygon)

Polygon(
  exterior: LinearRing(
    points: [
      Point(x: 1, y: 1),
      Point(x: 2, y: 0),
      Point(x: 0, y: 0),
      Point(x: 1, y: 1)
    ]
  )
)

Polygon(
  exterior: LinearRing(
    points: [
      Point(x: 1, y: 1),
      Point(x: 0, y: 2),
      Point(x: 2, y: 2),
      Point(x: 1, y: 1)
    ]
  )
)

Since these are topologically equivalent, I've just updated the test to
check for that instead of exact equality (see GEOSwift
commit 6c4b191646623159528433fbd112c11ddce7c5ea on the aforementioned
branch), but I thought I'd share here just in case this behavior is
unexpected.

2) GeometryConvertible_GEOSTests.testBufferAllTypes()

This test is intended to be a sort of stress-test to make sure that all the
types of geometry on which GEOSwift allows you to invoke buffer(by:)
(wrapper around the CAPI's GEOSBuffer_r) can actually be buffered. In geos
3.8.1, all the sample geometries were able to be buffered without any
issues.

Here's what we get for one of the test cases with 3.9.0beta1:

Input:

GeometryCollection(
  geometries: [
    GeometryCollection(
      geometries: [
        Point(x: 1.0, y: 2.0),
        MultiPoint(
          points: [
            Point(x: 1.0, y: 2.0),
            Point(x: 3.0, y: 4.0)
          ]
        ),
        LineString(
          points: [
            Point(x: 1.0, y: 2.0),
            Point(x: 3.0, y: 4.0)
          ]
        ),
        MultiLineString(
          lineStrings: [
            LineString(
              points: [
                Point(x: 1.0, y: 2.0),
                Point(x: 3.0, y: 4.0)
              ]
            ),
            LineString(
              points: [
                Point(x: 5.0, y: 6.0),
                Point(x: 7.0, y: 8.0)
              ]
            )
          ]
        ),
        Polygon(
          exterior: LinearRing(
            points: [
              Point(x: 2.0, y: 2.0),
              Point(x: -2.0, y: 2.0),
              Point(x: -2.0, y: -2.0),
              Point(x: 2.0, y: -2.0),
              Point(x: 2.0, y: 2.0)
            ]
          ),
          holes: [
            LinearRing(
              points: [
                Point(x: 1.0, y: 1.0),
                Point(x: 1.0, y: -1.0),
                Point(x: -1.0, y: -1.0),
                Point(x: -1.0, y: 1.0),
                Point(x: 1.0, y: 1.0)
              ]
            )
          ]
        ),
        MultiPolygon(
          polygons: [
            Polygon(
              exterior: LinearRing(
                points: [
                  Point(x: 2.0, y: 2.0),
                  Point(x: -2.0, y: 2.0),
                  Point(x: -2.0, y: -2.0),
                  Point(x: 2.0, y: -2.0),
                  Point(x: 2.0, y: 2.0)
                ]
              ),
              holes: [
                LinearRing(
                  points: [
                    Point(x: 1.0, y: 1.0),
                    Point(x: 1.0, y: -1.0),
                    Point(x: -1.0, y: -1.0),
                    Point(x: -1.0, y: 1.0),
                    Point(x: 1.0, y: 1.0)
                  ]
                )
              ]
            ),
            Polygon(
              exterior: LinearRing(
                points: [
                  Point(x: 7.0, y: 2.0),
                  Point(x: 3.0, y: 2.0),
                  Point(x: 3.0, y: -2.0),
                  Point(x: 7.0, y: -2.0),
                  Point(x: 7.0, y: 2.0)
                ]
              ),
              holes: []
            )
          ]
        )
      ]
    )
  ]
)

buffer(by: 0.5)

errorMessage: "IllegalArgumentException: Overlay input is mixed-dimension"

The exception is being thrown from EdgeNodingBuilder.cpp:195.

In frame #2, i = 0

In frame #0, i = 0

This suggests to me that it's checking the dimension of the Point inside of
the child GeometryCollection inside of the parent GeometryCollection.

g->getDimension() is returning 0 (geos::geom::Dimension::DimensionType P)
and expectedDim is 2.

Here's a relevant stack trace:

#0
geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection
const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:195
#1 geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry
const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
#2
geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection
const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:197
#3 geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry
const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
#4
geos::operation::overlayng::EdgeNodingBuilder::build(geos::geom::Geometry
const*, geos::geom::Geometry const*) at
geos/src/operation/overlayng/EdgeNodingBuilder.cpp:82
#5 geos::operation::overlayng::OverlayNG::computeEdgeOverlay() at
geos/src/operation/overlayng/OverlayNG.cpp:222
#6 geos::operation::overlayng::OverlayNG::getResult() at
geos/src/operation/overlayng/OverlayNG.cpp:179
#7
geos::operation::overlayng::PrecisionReducer::reducePrecision(geos::geom::Geometry
const*, geos::geom::PrecisionModel const*, bool) at
geos/src/operation/overlayng/PrecisionReducer.cpp:46
#8 geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry
const&) at geos/src/precision/GeometryPrecisionReducer.cpp:60
#9 geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry
const&, geos::geom::PrecisionModel const&) at
geos/include/geos/precision/GeometryPrecisionReducer.h:102
#10
geos::operation::buffer::BufferOp::bufferFixedPrecision(geos::geom::PrecisionModel
const&) at geos/src/operation/buffer/BufferOp.cpp:263
#11 geos::operation::buffer::BufferOp::bufferReducedPrecision(int) at
geos/src/operation/buffer/BufferOp.cpp:218
#12 geos::operation::buffer::BufferOp::bufferReducedPrecision() at
geos/src/operation/buffer/BufferOp.cpp:168
#13 geos::operation::buffer::BufferOp::computeGeometry() at
geos/src/operation/buffer/BufferOp.cpp:150
#14 geos::operation::buffer::BufferOp::getResultGeometry(double) at
geos/src/operation/buffer/BufferOp.cpp:122
#15 geos::operation::buffer::BufferOp::bufferOp(geos::geom::Geometry
const*, double, int, int) at geos/src/operation/buffer/BufferOp.cpp:114
#16 geos::geom::Geometry::buffer(double, int) const at
geos/src/geom/Geometry.cpp:509
#17 GEOSBuffer_r::$_41::operator()() const at geos/capi/geos_ts_c.cpp:1078
#18
_Z7executeIZ12GEOSBuffer_rE4$_41LDn0EEDTclfp0_EEP20GEOSContextHandle_HSOT_
at geos/capi/geos_ts_c.cpp:388
#19 ::GEOSBuffer_r(GEOSContextHandle_t, const geos::geom::Geometry *,
double, int) at geos/capi/geos_ts_c.cpp:1077
#20 GeometryConvertible.buffer(by:) at
GEOSwift/GEOSwift/GEOS/GeometryConvertible+GEOS.swift:348
#21 GeometryConvertible_GEOSTests.testBufferAllTypes() at
GEOSwift/GEOSwiftTests/GEOS/GeometryConvertible+GEOSTests.swift:856

Let me know what other info I can provide.

--
Andrew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/914dbacf/attachment.html>

From mtnclimb at gmail.com  Sat Nov 28 18:40:21 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Sat, 28 Nov 2020 18:40:21 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
Message-ID: <CAK2ens3OwFRy=9N_yTpO57jfN+wNx3R2c0H6z+3OebWmS-2-Eg@mail.gmail.com>

On Sat, Nov 28, 2020 at 11:55 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote

>
> One thing I noticed when trying to construct GEOS envelopes directly was
> that annoyingly they were xmin xmax, ymin ymax, but I doubt that would be a
> problem in your pre-existing working test.
>

Of all the design decisions made in the white heat of the development of
the initial release of JTS, the ordering of arguments to the Envelope
constructor is one I regret most.  Don't see a way to change it now though
(ideas welcome).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/b89933c1/attachment.html>

From dbaston at gmail.com  Sat Nov 28 19:00:44 2020
From: dbaston at gmail.com (Daniel Baston)
Date: Sat, 28 Nov 2020 22:00:44 -0500
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CAK2ens3OwFRy=9N_yTpO57jfN+wNx3R2c0H6z+3OebWmS-2-Eg@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CAK2ens3OwFRy=9N_yTpO57jfN+wNx3R2c0H6z+3OebWmS-2-Eg@mail.gmail.com>
Message-ID: <CA+K_q_o0jZGHBd7N3gAXQFd+k71WqEOhaj7A0QvPTEf9qvzOGw@mail.gmail.com>

>
> Of all the design decisions made in the white heat of the development of
> the initial release of JTS, the ordering of arguments to the Envelope
> constructor is one I regret most.  Don't see a way to change it now though
> (ideas welcome).
>

I've been thinking of an alternate way to construct an envelope when you
know which of your inputs is the min. Currently GEOS assumes they're
unordered and checks which x value is the min and which is the max, so
there is a tiny optimization potential here. We could kill two birds with
one stone and "fix" the ordering:

https://github.com/libgeos/geos/pull/356

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/d26fb6b5/attachment-0001.html>

From mtnclimb at gmail.com  Sat Nov 28 21:36:46 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Sat, 28 Nov 2020 21:36:46 -0800
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <CA+K_q_o0jZGHBd7N3gAXQFd+k71WqEOhaj7A0QvPTEf9qvzOGw@mail.gmail.com>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CAK2ens3OwFRy=9N_yTpO57jfN+wNx3R2c0H6z+3OebWmS-2-Eg@mail.gmail.com>
 <CA+K_q_o0jZGHBd7N3gAXQFd+k71WqEOhaj7A0QvPTEf9qvzOGw@mail.gmail.com>
Message-ID: <CAK2ens1T_Lh2_ExxRfnUDFmXkhdb57mEDnNBXV3dYRP71TxDDw@mail.gmail.com>

Good point - I didn't see that additional semantic to your PR.  No harm in
having such a method.  Not sure about the naming, though.

On Sat, Nov 28, 2020 at 7:00 PM Daniel Baston <dbaston at gmail.com> wrote:

> Of all the design decisions made in the white heat of the development of
>> the initial release of JTS, the ordering of arguments to the Envelope
>> constructor is one I regret most.  Don't see a way to change it now though
>> (ideas welcome).
>>
>
> I've been thinking of an alternate way to construct an envelope when you
> know which of your inputs is the min. Currently GEOS assumes they're
> unordered and checks which x value is the min and which is the max, so
> there is a tiny optimization potential here. We could kill two birds with
> one stone and "fix" the ordering:
>
> https://github.com/libgeos/geos/pull/356
>
> Dan
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201128/3db4c925/attachment.html>

From jorisvandenbossche at gmail.com  Sun Nov 29 00:26:59 2020
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Sun, 29 Nov 2020 09:26:59 +0100
Subject: [geos-devel] Update to 3.9?
In-Reply-To: <BC7CCE84-F849-44E9-856C-B820ECB3A4F6@cleverelephant.ca>
References: <64EA0754-ECC2-4432-8CAE-FC3CDD609BA1@cleverelephant.ca>
 <CALQtMBYbnnTfwpJzwYtA7=d7MwdZhrVGD6i2wbaghcjFp7WAjw@mail.gmail.com>
 <8009619C-2559-46B3-89A5-2FA6342F17C4@cleverelephant.ca>
 <CALQtMBZ7Wm03DVXxd0ZXPHFi5nz-q9gwrp+5zR1j89DMb92mFg@mail.gmail.com>
 <60C0C903-FBA0-4D19-B2EC-8938458E62D0@cleverelephant.ca>
 <CALQtMBaofDnKi274VS_RPTug6Cm1mrTX0OXTHJhC_EPiAZwang@mail.gmail.com>
 <A8A2B9F8-8E12-4C54-8F45-5B139034D9FD@cleverelephant.ca>
 <93C912EB-6BCF-4437-817E-068B156D912C@cleverelephant.ca>
 <BC7CCE84-F849-44E9-856C-B820ECB3A4F6@cleverelephant.ca>
Message-ID: <CALQtMBZ8rWKGoLnZe=KxdJ9CsfPpS2R5-r+pqcppzD2J6iXuVQ@mail.gmail.com>

On Sat, 28 Nov 2020 at 22:24, Paul Ramsey <pramsey at cleverelephant.ca> wrote:

>
> > On Nov 28, 2020, at 1:13 PM, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> >> On Nov 28, 2020, at 1:11 PM, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>
> >>> On Nov 28, 2020, at 1:05 PM, Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
> >>>
> >>> On Sat, 28 Nov 2020 at 21:53, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>>
> >>>> On Nov 28, 2020, at 12:44 PM, Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
> >>>>
> >>>> Thanks for trying to reproduce it in C/C++. One obvious difference
> that I can spot is that we use an integer for the "item" that gets
> inserted, and not the geometry itself, but I wouldn't expect that to
> influence the result.
> >>>> Although, trying to update your test case to do that, the test fails.
> But that might also be an issue on my side due to my limited C++ experience
> (it already fails on the "geoms.size()" check):
> >>>
> >>> Nope still not seeing it... one small mistake in your query
> >>>
> >>> Also not if you try my original code *with* the mistake?
> >>
> >> Well, with the mistake the code is saying "here's a null pointer"
> (since that's what casting 0 to a void* will get you) index this. I'll see!
> It shouldn't really matter from an index point-of-view, it should still
> index it and return a null pointer out the back end.
> >
> > And indeed it does not work. So, something to examine... why can we not
> index with a null item?
>
> Because I was using a non-null item pointer as a cue that the node was a
> leaf node, so it wasn't picking up null items as leaves.
> So, I've pushed that fix, does that change your test suite all that much?
>
> Yes, thanks, that fixes our tests.
Now, as mentioned on the commit comments on github (
https://github.com/libgeos/geos/commit/ad0122541f85886cf9eb9dd65d8246e0144f7ffa#commitcomment-44623679),
if you rather not support this on the GEOS side, I am fine with having to
fix this in PyGEOS to have it working correctly with GEOS 3.9.

I quickly started looking at a fix in PyGEOS at
https://github.com/pygeos/pygeos/pull/261 (it's not yet working though, I
suppose because we need to keep track of the inserted items)


> P
>
>
> >
> > P
> >
> >>
> >>> Because your version indeed passes for me as well, but I *think* the
> version I wrote resembles more closely the PyGEOS code (so it might be an
> issue in our C code on how we use the tree).
> >>>
> >>> , trying to cast the int to a void, instead of passing in a the
> pointer to the address, here's one that works. Unfortunately that leaves us
> no closer to knowing why the SimpleSTRtree is unhappy in the python
> context. I fear I may just have to revert the CAPI to the old tree.
> >>>
> >>>
> >>> // querying tree with box
> >>> template<>
> >>> template<>
> >>> void object::test<9>
> >>> ()
> >>> {
> >>>   GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >>>
> >>>   GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> >>>   int payload = 876;
> >>>   GEOSSTRtree_insert(tree, g, &payload);
> >>>
> >>>   GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0 10,
> 0 0))");
> >>>
> >>>   typedef std::vector<int*> IList;
> >>>   IList items;
> >>>   ensure_equals(items.size(), 0);
> >>>   GEOSSTRtree_query(
> >>>       tree,
> >>>       q,
> >>>       [](void* item, void* userdata) {
> >>>           IList* items = (IList*)userdata;
> >>>           items->push_back((int*)item);
> >>>       },
> >>>       &items);
> >>>
> >>>   ensure_equals(items.size(), 1);
> >>>
> >>>   ensure_equals(*(items[0]), payload);
> >>>
> >>>   GEOSGeom_destroy(q);
> >>>   GEOSGeom_destroy(g);
> >>>   GEOSSTRtree_destroy(tree);
> >>> }
> >>>
> >>>
> >>>
> >>>
> >>>>
> >>>> --- a/tests/unit/capi/GEOSSTRtreeTest.cpp
> >>>> +++ b/tests/unit/capi/GEOSSTRtreeTest.cpp
> >>>> @@ -268,10 +268,11 @@ void object::test<8>
> >>>> {
> >>>>    GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >>>>    GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> >>>> -    GEOSSTRtree_insert(tree, g, g);
> >>>> +    int idx = 0;
> >>>> +    GEOSSTRtree_insert(tree, g, (void*)idx);
> >>>>    GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0
> 10, 0 0))");
> >>>>
> >>>> -    typedef std::vector<GEOSGeometry*> GList;
> >>>> +    typedef std::vector<int> GList;
> >>>>    GList geoms;
> >>>>    ensure_equals(geoms.size(), 0);
> >>>>    GEOSSTRtree_query(
> >>>> @@ -279,23 +280,16 @@ void object::test<8>
> >>>>        q,
> >>>>        [](void* item, void* userdata) {
> >>>>            GList* geoms = (GList*)userdata;
> >>>> -            geoms->push_back((GEOSGeometry*)item);
> >>>> +            geoms->push_back(*((int *)item));
> >>>>        },
> >>>>        &geoms);
> >>>>
> >>>>    ensure_equals(geoms.size(), 1);
> >>>> -    const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> >>>> -
> >>>> -    double x = -1;
> >>>> -    double y = -1;
> >>>> -    GEOSCoordSeq_getXY(seq,  0, &x, &y);
> >>>> -    ensure_equals(x, 2.0);
> >>>> -    ensure_equals(y, 3.0);
> >>>> +    ensure_equals(geoms.at(0), 0);
> >>>>
> >>>>
> >>>> On Sat, 28 Nov 2020 at 20:55, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>>>
> >>>>
> >>>>> On Nov 28, 2020, at 8:11 AM, Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
> >>>>>
> >>>>> Hi all,
> >>>>>
> >>>>> On the CI of PyGEOS we have a build testing against GEOS master, and
> somewhere in the last 4 days, a lot of the STRtree tests started failing
> (see eg https://github.com/pygeos/pygeos/runs/1465460418#step:9:86).
> Looking at the commits of the last days, this might be related to the
> SimpleSTRtree work?
> >>>>>
> >>>>> A small (python) example of a tree consisting of a single point,
> which no longer is returned when querying the tree with a big polygon that
> certainly contains the point:
> >>>>>
> >>>>> Using released version of GEOS:
> >>>>>
> >>>>>>>> import pygeos
> >>>>>>>> pygeos.geos_version
> >>>>> (3, 8, 1)
> >>>>>>>> point = pygeos.Geometry("POINT (2 3)")
> >>>>>>>> tree = pygeos.STRtree([point])
> >>>>>>>> tree.query(pygeos.box(0, 0, 10, 10))
> >>>>> array([0])
> >>>>>
> >>>>> This is correctly returning the index of the single point. But when
> running with the latest GEOS master, the query doesn't find any point of
> the tree:
> >>>>>
> >>>>>>>> import pygeos
> >>>>>>>> pygeos.geos_version
> >>>>> (3, 9, 0)
> >>>>>>>> point = pygeos.Geometry("POINT (2 3)")
> >>>>>>>> tree = pygeos.STRtree([point])
> >>>>>>>> tree.query(pygeos.box(0, 0, 10, 10))
> >>>>> array([], dtype=int64)
> >>>>>
> >>>>> Are there changes expected in how the STRtree C API functions or
> required changes in user code? Or maybe we are using it in some
> incorrect/unexpected way? (code is at
> https://github.com/pygeos/pygeos/blob/master/src/strtree.c)
> >>>>
> >>>> There are changes, I don't think you're mis-using anything. I swapped
> the CAPI to use the SimpleSTRtree, figuring it would be good to share the
> performance win with downstream. However, I can swap it back to the
> original STRtree if this remains a problem.
> >>>>
> >>>> One thing I noticed when trying to construct GEOS envelopes directly
> was that annoyingly they were xmin xmax, ymin ymax, but I doubt that would
> be a problem in your pre-existing working test.
> >>>>
> >>>> I just reconstructed your test in the GEOS CAPI suite, and it works
> as one would expect. (Namely, it finds the one point.) So I'm not sure why
> your test is getting different results.
> >>>>
> >>>>
> >>>> // querying tree with box
> >>>> template<>
> >>>> template<>
> >>>> void object::test<8>
> >>>> ()
> >>>> {
> >>>>   GEOSSTRtree* tree = GEOSSTRtree_create(10);
> >>>>   GEOSGeometry* g = GEOSGeomFromWKT("POINT (2 3)");
> >>>>   GEOSSTRtree_insert(tree, g, g);
> >>>>   GEOSGeometry* q = GEOSGeomFromWKT("POLYGON ((0 0, 10 0, 10 10, 0
> 10, 0 0))");
> >>>>
> >>>>   typedef std::vector<GEOSGeometry*> GList;
> >>>>   GList geoms;
> >>>>   ensure_equals(geoms.size(), 0);
> >>>>   GEOSSTRtree_query(
> >>>>       tree,
> >>>>       q,
> >>>>       [](void* item, void* userdata) {
> >>>>           GList* geoms = (GList*)userdata;
> >>>>           geoms->push_back((GEOSGeometry*)item);
> >>>>       },
> >>>>       &geoms);
> >>>>
> >>>>   ensure_equals(geoms.size(), 1);
> >>>>   const GEOSCoordSequence* seq = GEOSGeom_getCoordSeq(geoms[0]);
> >>>>
> >>>>   double x = -1;
> >>>>   double y = -1;
> >>>>   GEOSCoordSeq_getXY(seq,  0, &x, &y);
> >>>>   ensure_equals(x, 2.0);
> >>>>   ensure_equals(y, 3.0);
> >>>>
> >>>>   GEOSGeom_destroy(q);
> >>>>   GEOSGeom_destroy(g);
> >>>>   GEOSSTRtree_destroy(tree);
> >>>> }
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>>
> >>>>> Best,
> >>>>> Joris
> >>>>>
> >>>>>
> >>>>> On Wed, 25 Nov 2020 at 00:44, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>>>> Hey all, just truing up what's underway and nearly there...
> >>>>>
> >>>>> - Am I right that Z coordinates are nearly done? What's the status
> there?
> >>>>>
> >>>>> I've been trying to address some performance issues, with some
> success and some ... other things.
> >>>>>
> >>>>> The success is the SimpleSTRtree, which is just the current STRtree
> but without the inheritance structure and with the nodes stored all next to
> each other in contiguous memory for more locality. For at least one use
> case I've seen 20% speed-ups on overlays, using the SimpleSTRtree in place
> of the STRtree inside the MCIndexNoder. I have not seen any slow-downs. I
> have pushed the SimpleSTRtree into master.
> >>>>>
> >>>>> While I have implemented the nearestNeighbor() functionality on the
> SimpleSTRtree, I haven't hooked it up to anything yet. It could go into the
> IndexedFacetDistance, if anyone is super enthusiastic about it. From there
> it would affect searching in PreparedGeometry of various sorts.
> >>>>>
> >>>>> I also tried using a similar trick with the MonotoneChainBuilder
> that sits inside the MCIndexNoder, replacing individual heap allocations
> with slabs by putting objects onto a std::deque, and incidentally stripping
> out some book-keeping. While that seems to pick up about 3-5% speedwise,
> unfortunately something about my implementation is incorrect (and in a
> wonderfully subtle way) as it fails testing on some platforms (not mine).
> https://github.com/pramsey/geos/tree/monotone-chain-builder
> >>>>>
> >>>>> I've put that work to the side for now.
> >>>>>
> >>>>> All the performance talk is mostly because JTS still runs a lot
> faster than GEOS for some bulk processing. My current test is a big union
> of watershed boundaries, about 6MB of data, which takes about 20s under
> GEOS and about 25% of that under JTS. It's a big gap, and in theory the two
> code bases are pretty aligned right now. Same overlayNG engine, etc. So I
> figure there has to be a big implementation ball of performance hiding
> under the covers somewhere. No luck thus far.
> >>>>>
> >>>>> I think we're close, looking forward to release :)
> >>>>>
> >>>>> P
> >>>>> _______________________________________________
> >>>>> geos-devel mailing list
> >>>>> geos-devel at lists.osgeo.org
> >>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>>> _______________________________________________
> >>>>> geos-devel mailing list
> >>>>> geos-devel at lists.osgeo.org
> >>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>>
> >>>> _______________________________________________
> >>>> geos-devel mailing list
> >>>> geos-devel at lists.osgeo.org
> >>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>> _______________________________________________
> >>>> geos-devel mailing list
> >>>> geos-devel at lists.osgeo.org
> >>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel at lists.osgeo.org
> >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel at lists.osgeo.org
> >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201129/38f1477b/attachment-0001.html>

From pramsey at cleverelephant.ca  Sun Nov 29 09:37:59 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sun, 29 Nov 2020 09:37:59 -0800
Subject: [geos-devel] 3.9.0beta1 + GEOSwift
In-Reply-To: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>
References: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>
Message-ID: <57DBD8A8-D251-4BF6-9A1E-88DDB25BCB9A@cleverelephant.ca>

Looking at PrecisionReducer::reducePrecision, it seems like it should perhaps have a little extra logic so that each dimension of the input are handled separately. Underlying the op is just 

  OverlayNG ov(geom, nullptr, gf.get(), OverlayNG::UNION);

So doing that a dimension at a time for any heterogeneous collection makes sense, IMO.
P.


> On Nov 28, 2020, at 6:33 PM, Andrew Hershberger <andrew.d.hershberger at gmail.com> wrote:
> 
> Hi al
> 
> 2) GeometryConvertible_GEOSTests.testBufferAllTypes()
> 
> This test is intended to be a sort of stress-test to make sure that all the types of geometry on which GEOSwift allows you to invoke buffer(by:) (wrapper around the CAPI's GEOSBuffer_r) can actually be buffered. In geos 3.8.1, all the sample geometries were able to be buffered without any issues.
> 
> Here's what we get for one of the test cases with 3.9.0beta1:
> 
> Input:
> 
> GeometryCollection(
>   geometries: [
>     GeometryCollection(
>       geometries: [
>         Point(x: 1.0, y: 2.0),
>         MultiPoint(
>           points: [
>             Point(x: 1.0, y: 2.0),
>             Point(x: 3.0, y: 4.0)
>           ]
>         ),
>         LineString(
>           points: [
>             Point(x: 1.0, y: 2.0),
>             Point(x: 3.0, y: 4.0)
>           ]
>         ),
>         MultiLineString(
>           lineStrings: [
>             LineString(
>               points: [
>                 Point(x: 1.0, y: 2.0),
>                 Point(x: 3.0, y: 4.0)
>               ]
>             ),
>             LineString(
>               points: [
>                 Point(x: 5.0, y: 6.0),
>                 Point(x: 7.0, y: 8.0)
>               ]
>             )
>           ]
>         ),
>         Polygon(
>           exterior: LinearRing(
>             points: [
>               Point(x: 2.0, y: 2.0),
>               Point(x: -2.0, y: 2.0),
>               Point(x: -2.0, y: -2.0),
>               Point(x: 2.0, y: -2.0),
>               Point(x: 2.0, y: 2.0)
>             ]
>           ),
>           holes: [
>             LinearRing(
>               points: [
>                 Point(x: 1.0, y: 1.0),
>                 Point(x: 1.0, y: -1.0),
>                 Point(x: -1.0, y: -1.0),
>                 Point(x: -1.0, y: 1.0),
>                 Point(x: 1.0, y: 1.0)
>               ]
>             )
>           ]
>         ),
>         MultiPolygon(
>           polygons: [
>             Polygon(
>               exterior: LinearRing(
>                 points: [
>                   Point(x: 2.0, y: 2.0),
>                   Point(x: -2.0, y: 2.0),
>                   Point(x: -2.0, y: -2.0),
>                   Point(x: 2.0, y: -2.0),
>                   Point(x: 2.0, y: 2.0)
>                 ]
>               ),
>               holes: [
>                 LinearRing(
>                   points: [
>                     Point(x: 1.0, y: 1.0),
>                     Point(x: 1.0, y: -1.0),
>                     Point(x: -1.0, y: -1.0),
>                     Point(x: -1.0, y: 1.0),
>                     Point(x: 1.0, y: 1.0)
>                   ]
>                 )
>               ]
>             ),
>             Polygon(
>               exterior: LinearRing(
>                 points: [
>                   Point(x: 7.0, y: 2.0),
>                   Point(x: 3.0, y: 2.0),
>                   Point(x: 3.0, y: -2.0),
>                   Point(x: 7.0, y: -2.0),
>                   Point(x: 7.0, y: 2.0)
>                 ]
>               ),
>               holes: []
>             )
>           ]
>         )
>       ]
>     )
>   ]
> )
> 
> buffer(by: 0.5)
> 
> errorMessage: "IllegalArgumentException: Overlay input is mixed-dimension"
> 
> The exception is being thrown from EdgeNodingBuilder.cpp:195.
> 
> In frame #2, i = 0
> 
> In frame #0, i = 0
> 
> This suggests to me that it's checking the dimension of the Point inside of the child GeometryCollection inside of the parent GeometryCollection.
> 
> g->getDimension() is returning 0 (geos::geom::Dimension::DimensionType P) and expectedDim is 2.
> 
> Here's a relevant stack trace:
> 
> #0 geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:195
> #1 geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
> #2 geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:197
> #3 geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
> #4 geos::operation::overlayng::EdgeNodingBuilder::build(geos::geom::Geometry const*, geos::geom::Geometry const*) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:82
> #5 geos::operation::overlayng::OverlayNG::computeEdgeOverlay() at geos/src/operation/overlayng/OverlayNG.cpp:222
> #6 geos::operation::overlayng::OverlayNG::getResult() at geos/src/operation/overlayng/OverlayNG.cpp:179
> #7 geos::operation::overlayng::PrecisionReducer::reducePrecision(geos::geom::Geometry const*, geos::geom::PrecisionModel const*, bool) at geos/src/operation/overlayng/PrecisionReducer.cpp:46
> #8 geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry const&) at geos/src/precision/GeometryPrecisionReducer.cpp:60
> #9 geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry const&, geos::geom::PrecisionModel const&) at geos/include/geos/precision/GeometryPrecisionReducer.h:102
> #10 geos::operation::buffer::BufferOp::bufferFixedPrecision(geos::geom::PrecisionModel const&) at geos/src/operation/buffer/BufferOp.cpp:263
> #11 geos::operation::buffer::BufferOp::bufferReducedPrecision(int) at geos/src/operation/buffer/BufferOp.cpp:218
> #12 geos::operation::buffer::BufferOp::bufferReducedPrecision() at geos/src/operation/buffer/BufferOp.cpp:168
> #13 geos::operation::buffer::BufferOp::computeGeometry() at geos/src/operation/buffer/BufferOp.cpp:150
> #14 geos::operation::buffer::BufferOp::getResultGeometry(double) at geos/src/operation/buffer/BufferOp.cpp:122
> #15 geos::operation::buffer::BufferOp::bufferOp(geos::geom::Geometry const*, double, int, int) at geos/src/operation/buffer/BufferOp.cpp:114
> #16 geos::geom::Geometry::buffer(double, int) const at geos/src/geom/Geometry.cpp:509
> #17 GEOSBuffer_r::$_41::operator()() const at geos/capi/geos_ts_c.cpp:1078
> #18 _Z7executeIZ12GEOSBuffer_rE4$_41LDn0EEDTclfp0_EEP20GEOSContextHandle_HSOT_ at geos/capi/geos_ts_c.cpp:388
> #19 ::GEOSBuffer_r(GEOSContextHandle_t, const geos::geom::Geometry *, double, int) at geos/capi/geos_ts_c.cpp:1077
> #20 GeometryConvertible.buffer(by:) at GEOSwift/GEOSwift/GEOS/GeometryConvertible+GEOS.swift:348
> #21 GeometryConvertible_GEOSTests.testBufferAllTypes() at GEOSwift/GEOSwiftTests/GEOS/GeometryConvertible+GEOSTests.swift:856
> 
> Let me know what other info I can provide.
> 
> --
> Andrew
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Sun Nov 29 10:53:22 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Sun, 29 Nov 2020 10:53:22 -0800
Subject: [geos-devel] 3.9.0beta1 + GEOSwift
In-Reply-To: <57DBD8A8-D251-4BF6-9A1E-88DDB25BCB9A@cleverelephant.ca>
References: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>
 <57DBD8A8-D251-4BF6-9A1E-88DDB25BCB9A@cleverelephant.ca>
Message-ID: <CAK2ens1oALPH+5cYBxr5sKL10NTSYuqzNHK0a_7nOEPGs9d-Ww@mail.gmail.com>

Agreed about the need to handle each dimension of the input separately.
Polygonal elements need to be reduced in a topologically correct way using
OverlayNG PrecisionReducer, and other dimensions can just be reduced in
pointwise fashion.

I intended this logic to go into GeometryPrecisionReducer, rather than
OverlayNG PrecisionReducer, since that preserves the existing API.  I see
now that the logic there is not complete - it handles Polygonal geometries,
but not collections containing Polygonal geometry.  I'll ticket that for
fixing in JTS.

On Sun, Nov 29, 2020 at 9:38 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Looking at PrecisionReducer::reducePrecision, it seems like it should
> perhaps have a little extra logic so that each dimension of the input are
> handled separately. Underlying the op is just
>
>   OverlayNG ov(geom, nullptr, gf.get(), OverlayNG::UNION);
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201129/fdaab7e7/attachment.html>

From geos-trac at osgeo.org  Mon Nov 30 02:22:50 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 10:22:50 -0000
Subject: [geos-devel] [GEOS] #1046: Unary union does not combine all
 parts
In-Reply-To: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
References: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
Message-ID: <060.b6e1a194940eb41e714ccdfc5ed1fdf8@osgeo.org>

#1046: Unary union does not combine all parts
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by Mike Taves):

 Revisiting this with 3.9.0beta1
 {{{
 ls = [x for x in mls.geoms]
 u = ops.unary_union(ls)
 print(len(u))  # 246
 print(u.length) # 27.7963165274577
 print(u.is_valid)  # True
 print(u.is_simple)  # True
 }}}
 so it looks like the unary union with OverlayNG cleaned up several
 redundant line segments, and created a valid/simple output.

 See https://github.com/libgeos/geos/pull/358 to add this as a test.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1046#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 02:27:30 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 10:27:30 -0000
Subject: [geos-devel] [GEOS] #1046: Unary union does not combine all
 parts
In-Reply-To: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
References: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
Message-ID: <060.a91bc9486579e3e4693dde64355475f5@osgeo.org>

#1046: Unary union does not combine all parts
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by Mike Taves):

 And I'll assume there are more geometry parts than the original to make a
 valid geometry.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1046#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 06:58:05 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 14:58:05 -0000
Subject: [geos-devel] [GEOS] #1046: Unary union does not combine all
 parts
In-Reply-To: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
References: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
Message-ID: <060.c32893784447aed28f9a188cbeeda4e7@osgeo.org>

#1046: Unary union does not combine all parts
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Mike Taves <mwtoews@?>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"aefdae974911aefe9bec1f1c2588a81d9e42407f/git" aefdae9/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="aefdae974911aefe9bec1f1c2588a81d9e42407f"
 Validate complex UnaryUnion test with OverlayNG

 Closes #1046
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1046#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:10:10 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:10:10 -0000
Subject: [geos-devel] [GEOS] #572: Contains issue for complex
 LineStrings [JTS fails too]
In-Reply-To: <045.fc82acdace0639d7b6097c86f1a9f515@osgeo.org>
References: <045.fc82acdace0639d7b6097c86f1a9f515@osgeo.org>
Message-ID: <060.b44ffa6f30b69e1b6b22db07b13e85f2@osgeo.org>

#572: Contains issue for complex LineStrings [JTS fails too]
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  GEOS Fund Me
Component:  Default     |     Version:  3.3.4
 Severity:  Unassigned  |  Resolution:
 Keywords:  jtsfail     |
------------------------+---------------------------
Changes (by pramsey):

 * milestone:  3.9.0 => GEOS Fund Me


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/572#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:11:52 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:11:52 -0000
Subject: [geos-devel] [GEOS] #760: Snapping leaves segments below
 tolerance
In-Reply-To: <042.74111cbd57ba43d46691215c36f871cf@osgeo.org>
References: <042.74111cbd57ba43d46691215c36f871cf@osgeo.org>
Message-ID: <057.0bbd812c6fa771c43099b84a7d28fe41@osgeo.org>

#760: Snapping leaves segments below tolerance
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * milestone:  3.9.0 => 3.10.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/760#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:12:18 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:12:18 -0000
Subject: [geos-devel] [GEOS] #755: Overlay ops accept
 GeometryCollections when headers indicate that they don't
In-Reply-To: <045.7f9cb8ae2e569d62a6a347243e4e0d4e@osgeo.org>
References: <045.7f9cb8ae2e569d62a6a347243e4e0d4e@osgeo.org>
Message-ID: <060.c4d408af2fd4b5bcda8e1facac8e3054@osgeo.org>

#755: Overlay ops accept GeometryCollections when headers indicate that they
don't
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * milestone:  3.9.0 => 3.10.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/755#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:21:41 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:21:41 -0000
Subject: [geos-devel] [GEOS] Batch modify: #344, #368, #522, #572, #614, #692,
 #340, #380
In-Reply-To: <067.215b49bbfbfcdf983243ee41c4c50c46@osgeo.org>
References: <067.215b49bbfbfcdf983243ee41c4c50c46@osgeo.org>
Message-ID: <082.5dc4d6d2dded0eb8c0ed0c0d4f9b0224@osgeo.org>

Batch modification to #344, #368, #522, #572, #614, #692, #340, #380 by pramsey:
milestone to Upstream

-- 
Tickets URL: <https://trac.osgeo.org/geos/query?id=344%2C368%2C522%2C572%2C614%2C692%2C340%2C380>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:26:05 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:26:05 -0000
Subject: [geos-devel] [GEOS] #1030: Retain order of inputs in
 GEOSVoronoiDiagram
In-Reply-To: <045.952363c6c575327cb2c28041f12a916f@osgeo.org>
References: <045.952363c6c575327cb2c28041f12a916f@osgeo.org>
Message-ID: <060.84bed00b07fdc6295202013a5ba7b080@osgeo.org>

#1030: Retain order of inputs in GEOSVoronoiDiagram
-------------------------+---------------------------
 Reporter:  dbaston      |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  3.10.0
Component:  Default      |     Version:  master
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by pramsey):

 * milestone:  3.9.0 => 3.10.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1030#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:26:49 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:26:49 -0000
Subject: [geos-devel] [GEOS] #769: Robustness failure in
 GEOSVoronoiDiagram
In-Reply-To: <045.a5d58c4fc8050711f7e9cf27d0a5e356@osgeo.org>
References: <045.a5d58c4fc8050711f7e9cf27d0a5e356@osgeo.org>
Message-ID: <060.85b8e94a334b9f95347be50ace0a3d75@osgeo.org>

#769: Robustness failure in GEOSVoronoiDiagram
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  Upstream
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * milestone:  3.9.0 => Upstream


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/769#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:29:31 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:29:31 -0000
Subject: [geos-devel] [GEOS] #1064: Topology preserve simplify:
 unexpected behavior on similar polygons
In-Reply-To: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
References: <045.abe8b92b93d463fda61bf648574f5880@osgeo.org>
Message-ID: <060.b0c5240428bb453293d3b0d4cddae31c@osgeo.org>

#1064: Topology preserve simplify: unexpected behavior on similar polygons
------------------------+---------------------------
 Reporter:  uclaros     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  GEOS Fund Me
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * milestone:  3.9.0 => GEOS Fund Me


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1064#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 09:47:47 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 17:47:47 -0000
Subject: [geos-devel] [GEOS] #996: Windows CMake Mingw64 32-bit gcc 8.1.0
In-Reply-To: <042.996e9ec0bbdeef3e7bad3688e9ca818c@osgeo.org>
References: <042.996e9ec0bbdeef3e7bad3688e9ca818c@osgeo.org>
Message-ID: <057.c105f43274d365489a27a2214c1417e6@osgeo.org>

#996: Windows CMake Mingw64 32-bit gcc 8.1.0
-------------------------+---------------------------
 Reporter:  robe         |       Owner:  geos-devel@?
     Type:  defect       |      Status:  new
 Priority:  minor        |   Milestone:  3.8.2
Component:  Default      |     Version:  master
 Severity:  Significant  |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by pramsey):

 This seems like an eternal ticket. How will it ever get closed?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/996#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 11:19:15 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 19:19:15 -0000
Subject: [geos-devel] [GEOS] #1046: Unary union does not combine all
 parts
In-Reply-To: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
References: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
Message-ID: <060.eb2e1b1e71e168a67f1ed4798859901c@osgeo.org>

#1046: Unary union does not combine all parts
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by Mike Taves):

 This should have been closed with
 [80f78fb880a911262d4021aca4cf2b47715a40d9/git]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1046#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 11:19:58 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 19:19:58 -0000
Subject: [geos-devel] [GEOS] #1046: Unary union does not combine all
 parts
In-Reply-To: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
References: <045.4b1222dc9e4205efbe02100d334127d4@osgeo.org>
Message-ID: <060.d562e4eed5b3b3b80d8197f880642189@osgeo.org>

#1046: Unary union does not combine all parts
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.9.0
Component:  XML Tests   |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Mike Taves):

 * component:  Default => XML Tests
 * milestone:   => 3.9.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1046#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 12:11:02 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 20:11:02 -0000
Subject: [geos-devel] [GEOS] #1079: Inconsistent dimensionality change
Message-ID: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>

#1079: Inconsistent dimensionality change
------------------------+--------------------------
 Reporter:  Mike Taves  |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  minor       |  Milestone:  3.9.0
Component:  Default     |    Version:  master
 Severity:  Annoyance   |   Keywords:
------------------------+--------------------------
 Over in Shapely, there is a test suite
 [https://github.com/Toblerity/Shapely/blob/b2b536004ee6b8316fffcee36ff8e1e65be71958/tests/test_create_inconsistent_dimensionality.py
 test_create_inconsistent_dimensionality.py] that checks WKT with
 inconsistent dimensionality. For most instances, a geometry with at least
 one 3D coordinate is promoted with a Z dimension, assuming Z=0 for other
 XY coordinates. There are a few isolated cases where the geometry remains
 as a 2D geometry if the 3D coordinate is not the first.

 Of these inconsistencies, one new inconsistency stands out as new and
 unusual.

 GEOS 3.8.1 and earlier:
 {{{
 # preserve 3rd dimension
 LINESTRING (1 1 1, 2 2) -> LINESTRING Z (1 1 1, 2 2 0)
 # drop 3rd dimension
 LINESTRING (1 1, 2 2 2) -> LINESTRING (1 1, 2 2)
 }}}
 Since GEOS 3.9.0beta1:
 {{{
 # drop 3rd dimension
 LINESTRING (1 1 1, 2 2) -> LINESTRING (1 1, 2 2)
 # preserve 3rd dimension
 LINESTRING (1 1, 2 2 2) -> LINESTRING Z (1 1 0, 2 2 2)
 }}}
 why is this the only geometry type scenario that swaps behaviour? Ideally
 any geometry with at lest one 3D coordinate would be promoted with a Z
 dimension.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1079>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Mon Nov 30 14:13:20 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 30 Nov 2020 14:13:20 -0800
Subject: [geos-devel] 3.9.0beta1 + GEOSwift
In-Reply-To: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>
References: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>
Message-ID: <976C65C8-EAC7-4BB0-BAFE-731418ED87D7@cleverelephant.ca>

Thanks for this report! Would you mind trying out the fix here:

https://github.com/libgeos/geos/pull/360

P.

> On Nov 28, 2020, at 6:33 PM, Andrew Hershberger <andrew.d.hershberger at gmail.com> wrote:
> 
> Hi all, I help maintain https://github.com/GEOSwift/GEOSwift
> 
> I'm testing out 3.9.0beta1 and have run into a couple things to share.
> 
> If you want to try any of these out directly with GEOSwift, I recommend using the Swift Package Manager. You can clone https://github.com/GEOSwift/GEOSwift.git and check out branch geos-3.9.0-testing. Then run `$ swift test` to build and run the tests. I'm using Swift 5.3.1. One way to get Swift is to use the Docker image: https://hub.docker.com/_/swift
> 
> 1) GeometryConvertible_GEOSTests.testMakeValidWhenItIsAPolygon()
> 
> This test is checking that makeValid() (a wrapper around the CAPI's GEOSMakeValid_r) produces an expected result given some pre-defined geometry. Here's what happened:
> 
> Input:
> 
> Polygon(
>   exterior: LinearRing(
>     points: [
>       Point(x: 0, y: 0),
>       Point(x: 2, y: 0),
>       Point(x: 1, y: 1),
>       Point(x: 0, y: 2),
>       Point(x: 2, y: 2),
>       Point(x: 1, y: 1),
>       Point(x: 0, y: 0)
>     ]
>   )
> )
> 
> Actual (wrapped in a multipolygon)
> 
> Polygon(
>   exterior: LinearRing(
>     points: [
>       Point(x: 0, y: 2),
>       Point(x: 2, y: 2),
>       Point(x: 1, y: 1),
>       Point(x: 0, y: 2)
>     ]
>   )
> )
> 
> Polygon(
>   exterior: LinearRing(
>     points: [
>       Point(x: 2, y: 0),
>       Point(x: 0, y: 0),
>       Point(x: 1, y: 1),
>       Point(x: 2, y: 0)
>     ]
>   )
> )
> 
> Expected (wrapped in any order in a multipolygon)
> 
> Polygon(
>   exterior: LinearRing(
>     points: [
>       Point(x: 1, y: 1),
>       Point(x: 2, y: 0),
>       Point(x: 0, y: 0),
>       Point(x: 1, y: 1)
>     ]
>   )
> )
> 
> Polygon(
>   exterior: LinearRing(
>     points: [
>       Point(x: 1, y: 1),
>       Point(x: 0, y: 2),
>       Point(x: 2, y: 2),
>       Point(x: 1, y: 1)
>     ]
>   )
> )
> 
> Since these are topologically equivalent, I've just updated the test to check for that instead of exact equality (see GEOSwift commit 6c4b191646623159528433fbd112c11ddce7c5ea on the aforementioned branch), but I thought I'd share here just in case this behavior is unexpected.
> 
> 2) GeometryConvertible_GEOSTests.testBufferAllTypes()
> 
> This test is intended to be a sort of stress-test to make sure that all the types of geometry on which GEOSwift allows you to invoke buffer(by:) (wrapper around the CAPI's GEOSBuffer_r) can actually be buffered. In geos 3.8.1, all the sample geometries were able to be buffered without any issues.
> 
> Here's what we get for one of the test cases with 3.9.0beta1:
> 
> Input:
> 
> GeometryCollection(
>   geometries: [
>     GeometryCollection(
>       geometries: [
>         Point(x: 1.0, y: 2.0),
>         MultiPoint(
>           points: [
>             Point(x: 1.0, y: 2.0),
>             Point(x: 3.0, y: 4.0)
>           ]
>         ),
>         LineString(
>           points: [
>             Point(x: 1.0, y: 2.0),
>             Point(x: 3.0, y: 4.0)
>           ]
>         ),
>         MultiLineString(
>           lineStrings: [
>             LineString(
>               points: [
>                 Point(x: 1.0, y: 2.0),
>                 Point(x: 3.0, y: 4.0)
>               ]
>             ),
>             LineString(
>               points: [
>                 Point(x: 5.0, y: 6.0),
>                 Point(x: 7.0, y: 8.0)
>               ]
>             )
>           ]
>         ),
>         Polygon(
>           exterior: LinearRing(
>             points: [
>               Point(x: 2.0, y: 2.0),
>               Point(x: -2.0, y: 2.0),
>               Point(x: -2.0, y: -2.0),
>               Point(x: 2.0, y: -2.0),
>               Point(x: 2.0, y: 2.0)
>             ]
>           ),
>           holes: [
>             LinearRing(
>               points: [
>                 Point(x: 1.0, y: 1.0),
>                 Point(x: 1.0, y: -1.0),
>                 Point(x: -1.0, y: -1.0),
>                 Point(x: -1.0, y: 1.0),
>                 Point(x: 1.0, y: 1.0)
>               ]
>             )
>           ]
>         ),
>         MultiPolygon(
>           polygons: [
>             Polygon(
>               exterior: LinearRing(
>                 points: [
>                   Point(x: 2.0, y: 2.0),
>                   Point(x: -2.0, y: 2.0),
>                   Point(x: -2.0, y: -2.0),
>                   Point(x: 2.0, y: -2.0),
>                   Point(x: 2.0, y: 2.0)
>                 ]
>               ),
>               holes: [
>                 LinearRing(
>                   points: [
>                     Point(x: 1.0, y: 1.0),
>                     Point(x: 1.0, y: -1.0),
>                     Point(x: -1.0, y: -1.0),
>                     Point(x: -1.0, y: 1.0),
>                     Point(x: 1.0, y: 1.0)
>                   ]
>                 )
>               ]
>             ),
>             Polygon(
>               exterior: LinearRing(
>                 points: [
>                   Point(x: 7.0, y: 2.0),
>                   Point(x: 3.0, y: 2.0),
>                   Point(x: 3.0, y: -2.0),
>                   Point(x: 7.0, y: -2.0),
>                   Point(x: 7.0, y: 2.0)
>                 ]
>               ),
>               holes: []
>             )
>           ]
>         )
>       ]
>     )
>   ]
> )
> 
> buffer(by: 0.5)
> 
> errorMessage: "IllegalArgumentException: Overlay input is mixed-dimension"
> 
> The exception is being thrown from EdgeNodingBuilder.cpp:195.
> 
> In frame #2, i = 0
> 
> In frame #0, i = 0
> 
> This suggests to me that it's checking the dimension of the Point inside of the child GeometryCollection inside of the parent GeometryCollection.
> 
> g->getDimension() is returning 0 (geos::geom::Dimension::DimensionType P) and expectedDim is 2.
> 
> Here's a relevant stack trace:
> 
> #0 geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:195
> #1 geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
> #2 geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:197
> #3 geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
> #4 geos::operation::overlayng::EdgeNodingBuilder::build(geos::geom::Geometry const*, geos::geom::Geometry const*) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:82
> #5 geos::operation::overlayng::OverlayNG::computeEdgeOverlay() at geos/src/operation/overlayng/OverlayNG.cpp:222
> #6 geos::operation::overlayng::OverlayNG::getResult() at geos/src/operation/overlayng/OverlayNG.cpp:179
> #7 geos::operation::overlayng::PrecisionReducer::reducePrecision(geos::geom::Geometry const*, geos::geom::PrecisionModel const*, bool) at geos/src/operation/overlayng/PrecisionReducer.cpp:46
> #8 geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry const&) at geos/src/precision/GeometryPrecisionReducer.cpp:60
> #9 geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry const&, geos::geom::PrecisionModel const&) at geos/include/geos/precision/GeometryPrecisionReducer.h:102
> #10 geos::operation::buffer::BufferOp::bufferFixedPrecision(geos::geom::PrecisionModel const&) at geos/src/operation/buffer/BufferOp.cpp:263
> #11 geos::operation::buffer::BufferOp::bufferReducedPrecision(int) at geos/src/operation/buffer/BufferOp.cpp:218
> #12 geos::operation::buffer::BufferOp::bufferReducedPrecision() at geos/src/operation/buffer/BufferOp.cpp:168
> #13 geos::operation::buffer::BufferOp::computeGeometry() at geos/src/operation/buffer/BufferOp.cpp:150
> #14 geos::operation::buffer::BufferOp::getResultGeometry(double) at geos/src/operation/buffer/BufferOp.cpp:122
> #15 geos::operation::buffer::BufferOp::bufferOp(geos::geom::Geometry const*, double, int, int) at geos/src/operation/buffer/BufferOp.cpp:114
> #16 geos::geom::Geometry::buffer(double, int) const at geos/src/geom/Geometry.cpp:509
> #17 GEOSBuffer_r::$_41::operator()() const at geos/capi/geos_ts_c.cpp:1078
> #18 _Z7executeIZ12GEOSBuffer_rE4$_41LDn0EEDTclfp0_EEP20GEOSContextHandle_HSOT_ at geos/capi/geos_ts_c.cpp:388
> #19 ::GEOSBuffer_r(GEOSContextHandle_t, const geos::geom::Geometry *, double, int) at geos/capi/geos_ts_c.cpp:1077
> #20 GeometryConvertible.buffer(by:) at GEOSwift/GEOSwift/GEOS/GeometryConvertible+GEOS.swift:348
> #21 GeometryConvertible_GEOSTests.testBufferAllTypes() at GEOSwift/GEOSwiftTests/GEOS/GeometryConvertible+GEOSTests.swift:856
> 
> Let me know what other info I can provide.
> 
> --
> Andrew
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Mon Nov 30 14:52:11 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 22:52:11 -0000
Subject: [geos-devel] [GEOS] #1079: Inconsistent dimensionality change
In-Reply-To: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
References: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
Message-ID: <060.c4ce656a9aa672ce8d8f2dce5031a6ef@osgeo.org>

#1079: Inconsistent dimensionality change
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Annoyance   |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 It seems inconsistent all around, to me. What is the consistent rule
 supposed to be? My guess would have been "preserve the dimensionality of
 the first coordinate)" but this test belies that:
 {{{
     ('MULTIPOINT (1 1, 2 2 2)', 'MULTIPOINT Z (1 1 0, 2 2 2)'),
 }}}
 I suppose not changing behaviour is the highest good, I hate to see that
 version switch there when we haven't got consistent behaviour. I guess
 it's too late to be as strict as the PostGIS parser (dimensional mixing ==
 error).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1079#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 15:18:54 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 23:18:54 -0000
Subject: [geos-devel] [GEOS] #1079: Inconsistent dimensionality change
In-Reply-To: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
References: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
Message-ID: <060.5ea52f4cb396fc9999fb0a73de37c3cc@osgeo.org>

#1079: Inconsistent dimensionality change
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Annoyance   |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 Reading through WKTReader, it seems like the general goal is to promote
 the dimensionality of a given CoordinateSequence to the highest
 dimensionality encountered in the sequence. That doesn't seem to match the
 behaviour of the polygon case though, nor the new behaviour of the
 linestring case. In any event, the current model sort of sucks since it's
 possible to make a POLYGON with mixed dimension rings, or a
 multilinestring with mixed dimension members. Also you can make a
 linestringz with 2d coordinates, because the dimensionality tag is mostly
 ignored. (Not always).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1079#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 15:44:16 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 23:44:16 -0000
Subject: [geos-devel] [GEOS] #1079: Inconsistent dimensionality change
In-Reply-To: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
References: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
Message-ID: <060.b4da4138fec1f96b56db56df3e63bfa5@osgeo.org>

#1079: Inconsistent dimensionality change
------------------------+---------------------------
 Reporter:  Mike Taves  |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Annoyance   |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 Please check https://github.com/pramsey/geos/tree/geos-1079

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1079#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Nov 30 15:50:47 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Nov 2020 23:50:47 -0000
Subject: [geos-devel] [GEOS] #1079: Inconsistent dimensionality change
In-Reply-To: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
References: <045.ea86f12ad1e735d1bc8c9cb9611cb15b@osgeo.org>
Message-ID: <060.7bceb4e9c1d8762c1e7e50f5792c188b@osgeo.org>

#1079: Inconsistent dimensionality change
------------------------+----------------------
 Reporter:  Mike Taves  |       Owner:  pramsey
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Annoyance   |  Resolution:
 Keywords:              |
------------------------+----------------------
Changes (by pramsey):

 * owner:  geos-devel@? => pramsey


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1079#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From andrew.d.hershberger at gmail.com  Mon Nov 30 17:22:25 2020
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Mon, 30 Nov 2020 19:22:25 -0600
Subject: [geos-devel] 3.9.0beta1 + GEOSwift
In-Reply-To: <976C65C8-EAC7-4BB0-BAFE-731418ED87D7@cleverelephant.ca>
References: <CACZW30N+acruiUEfM0xN9frcZYav1ukNHO3zLOpPfWPFsvdMkg@mail.gmail.com>
 <976C65C8-EAC7-4BB0-BAFE-731418ED87D7@cleverelephant.ca>
Message-ID: <CACZW30N07eqAF6Bu4pX7UPFqLChpHnFpHARA1CxC5Vx9NGqU6A@mail.gmail.com>

Looks good. The GEOSwift test suite passes with your change. Thanks!

On Mon, Nov 30, 2020 at 4:13 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Thanks for this report! Would you mind trying out the fix here:
>
> https://github.com/libgeos/geos/pull/360
>
> P.
>
> > On Nov 28, 2020, at 6:33 PM, Andrew Hershberger <
> andrew.d.hershberger at gmail.com> wrote:
> >
> > Hi all, I help maintain https://github.com/GEOSwift/GEOSwift
> >
> > I'm testing out 3.9.0beta1 and have run into a couple things to share.
> >
> > If you want to try any of these out directly with GEOSwift, I recommend
> using the Swift Package Manager. You can clone
> https://github.com/GEOSwift/GEOSwift.git and check out branch
> geos-3.9.0-testing. Then run `$ swift test` to build and run the tests. I'm
> using Swift 5.3.1. One way to get Swift is to use the Docker image:
> https://hub.docker.com/_/swift
> >
> > 1) GeometryConvertible_GEOSTests.testMakeValidWhenItIsAPolygon()
> >
> > This test is checking that makeValid() (a wrapper around the CAPI's
> GEOSMakeValid_r) produces an expected result given some pre-defined
> geometry. Here's what happened:
> >
> > Input:
> >
> > Polygon(
> >   exterior: LinearRing(
> >     points: [
> >       Point(x: 0, y: 0),
> >       Point(x: 2, y: 0),
> >       Point(x: 1, y: 1),
> >       Point(x: 0, y: 2),
> >       Point(x: 2, y: 2),
> >       Point(x: 1, y: 1),
> >       Point(x: 0, y: 0)
> >     ]
> >   )
> > )
> >
> > Actual (wrapped in a multipolygon)
> >
> > Polygon(
> >   exterior: LinearRing(
> >     points: [
> >       Point(x: 0, y: 2),
> >       Point(x: 2, y: 2),
> >       Point(x: 1, y: 1),
> >       Point(x: 0, y: 2)
> >     ]
> >   )
> > )
> >
> > Polygon(
> >   exterior: LinearRing(
> >     points: [
> >       Point(x: 2, y: 0),
> >       Point(x: 0, y: 0),
> >       Point(x: 1, y: 1),
> >       Point(x: 2, y: 0)
> >     ]
> >   )
> > )
> >
> > Expected (wrapped in any order in a multipolygon)
> >
> > Polygon(
> >   exterior: LinearRing(
> >     points: [
> >       Point(x: 1, y: 1),
> >       Point(x: 2, y: 0),
> >       Point(x: 0, y: 0),
> >       Point(x: 1, y: 1)
> >     ]
> >   )
> > )
> >
> > Polygon(
> >   exterior: LinearRing(
> >     points: [
> >       Point(x: 1, y: 1),
> >       Point(x: 0, y: 2),
> >       Point(x: 2, y: 2),
> >       Point(x: 1, y: 1)
> >     ]
> >   )
> > )
> >
> > Since these are topologically equivalent, I've just updated the test to
> check for that instead of exact equality (see GEOSwift commit
> 6c4b191646623159528433fbd112c11ddce7c5ea on the aforementioned branch), but
> I thought I'd share here just in case this behavior is unexpected.
> >
> > 2) GeometryConvertible_GEOSTests.testBufferAllTypes()
> >
> > This test is intended to be a sort of stress-test to make sure that all
> the types of geometry on which GEOSwift allows you to invoke buffer(by:)
> (wrapper around the CAPI's GEOSBuffer_r) can actually be buffered. In geos
> 3.8.1, all the sample geometries were able to be buffered without any
> issues.
> >
> > Here's what we get for one of the test cases with 3.9.0beta1:
> >
> > Input:
> >
> > GeometryCollection(
> >   geometries: [
> >     GeometryCollection(
> >       geometries: [
> >         Point(x: 1.0, y: 2.0),
> >         MultiPoint(
> >           points: [
> >             Point(x: 1.0, y: 2.0),
> >             Point(x: 3.0, y: 4.0)
> >           ]
> >         ),
> >         LineString(
> >           points: [
> >             Point(x: 1.0, y: 2.0),
> >             Point(x: 3.0, y: 4.0)
> >           ]
> >         ),
> >         MultiLineString(
> >           lineStrings: [
> >             LineString(
> >               points: [
> >                 Point(x: 1.0, y: 2.0),
> >                 Point(x: 3.0, y: 4.0)
> >               ]
> >             ),
> >             LineString(
> >               points: [
> >                 Point(x: 5.0, y: 6.0),
> >                 Point(x: 7.0, y: 8.0)
> >               ]
> >             )
> >           ]
> >         ),
> >         Polygon(
> >           exterior: LinearRing(
> >             points: [
> >               Point(x: 2.0, y: 2.0),
> >               Point(x: -2.0, y: 2.0),
> >               Point(x: -2.0, y: -2.0),
> >               Point(x: 2.0, y: -2.0),
> >               Point(x: 2.0, y: 2.0)
> >             ]
> >           ),
> >           holes: [
> >             LinearRing(
> >               points: [
> >                 Point(x: 1.0, y: 1.0),
> >                 Point(x: 1.0, y: -1.0),
> >                 Point(x: -1.0, y: -1.0),
> >                 Point(x: -1.0, y: 1.0),
> >                 Point(x: 1.0, y: 1.0)
> >               ]
> >             )
> >           ]
> >         ),
> >         MultiPolygon(
> >           polygons: [
> >             Polygon(
> >               exterior: LinearRing(
> >                 points: [
> >                   Point(x: 2.0, y: 2.0),
> >                   Point(x: -2.0, y: 2.0),
> >                   Point(x: -2.0, y: -2.0),
> >                   Point(x: 2.0, y: -2.0),
> >                   Point(x: 2.0, y: 2.0)
> >                 ]
> >               ),
> >               holes: [
> >                 LinearRing(
> >                   points: [
> >                     Point(x: 1.0, y: 1.0),
> >                     Point(x: 1.0, y: -1.0),
> >                     Point(x: -1.0, y: -1.0),
> >                     Point(x: -1.0, y: 1.0),
> >                     Point(x: 1.0, y: 1.0)
> >                   ]
> >                 )
> >               ]
> >             ),
> >             Polygon(
> >               exterior: LinearRing(
> >                 points: [
> >                   Point(x: 7.0, y: 2.0),
> >                   Point(x: 3.0, y: 2.0),
> >                   Point(x: 3.0, y: -2.0),
> >                   Point(x: 7.0, y: -2.0),
> >                   Point(x: 7.0, y: 2.0)
> >                 ]
> >               ),
> >               holes: []
> >             )
> >           ]
> >         )
> >       ]
> >     )
> >   ]
> > )
> >
> > buffer(by: 0.5)
> >
> > errorMessage: "IllegalArgumentException: Overlay input is
> mixed-dimension"
> >
> > The exception is being thrown from EdgeNodingBuilder.cpp:195.
> >
> > In frame #2, i = 0
> >
> > In frame #0, i = 0
> >
> > This suggests to me that it's checking the dimension of the Point inside
> of the child GeometryCollection inside of the parent GeometryCollection.
> >
> > g->getDimension() is returning 0 (geos::geom::Dimension::DimensionType
> P) and expectedDim is 2.
> >
> > Here's a relevant stack trace:
> >
> > #0
> geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection
> const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:195
> > #1
> geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry
> const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
> > #2
> geos::operation::overlayng::EdgeNodingBuilder::addGeometryCollection(geos::geom::GeometryCollection
> const*, int, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:197
> > #3
> geos::operation::overlayng::EdgeNodingBuilder::add(geos::geom::Geometry
> const*, int) at geos/src/operation/overlayng/EdgeNodingBuilder.cpp:169
> > #4
> geos::operation::overlayng::EdgeNodingBuilder::build(geos::geom::Geometry
> const*, geos::geom::Geometry const*) at
> geos/src/operation/overlayng/EdgeNodingBuilder.cpp:82
> > #5 geos::operation::overlayng::OverlayNG::computeEdgeOverlay() at
> geos/src/operation/overlayng/OverlayNG.cpp:222
> > #6 geos::operation::overlayng::OverlayNG::getResult() at
> geos/src/operation/overlayng/OverlayNG.cpp:179
> > #7
> geos::operation::overlayng::PrecisionReducer::reducePrecision(geos::geom::Geometry
> const*, geos::geom::PrecisionModel const*, bool) at
> geos/src/operation/overlayng/PrecisionReducer.cpp:46
> > #8
> geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry
> const&) at geos/src/precision/GeometryPrecisionReducer.cpp:60
> > #9
> geos::precision::GeometryPrecisionReducer::reduce(geos::geom::Geometry
> const&, geos::geom::PrecisionModel const&) at
> geos/include/geos/precision/GeometryPrecisionReducer.h:102
> > #10
> geos::operation::buffer::BufferOp::bufferFixedPrecision(geos::geom::PrecisionModel
> const&) at geos/src/operation/buffer/BufferOp.cpp:263
> > #11 geos::operation::buffer::BufferOp::bufferReducedPrecision(int) at
> geos/src/operation/buffer/BufferOp.cpp:218
> > #12 geos::operation::buffer::BufferOp::bufferReducedPrecision() at
> geos/src/operation/buffer/BufferOp.cpp:168
> > #13 geos::operation::buffer::BufferOp::computeGeometry() at
> geos/src/operation/buffer/BufferOp.cpp:150
> > #14 geos::operation::buffer::BufferOp::getResultGeometry(double) at
> geos/src/operation/buffer/BufferOp.cpp:122
> > #15 geos::operation::buffer::BufferOp::bufferOp(geos::geom::Geometry
> const*, double, int, int) at geos/src/operation/buffer/BufferOp.cpp:114
> > #16 geos::geom::Geometry::buffer(double, int) const at
> geos/src/geom/Geometry.cpp:509
> > #17 GEOSBuffer_r::$_41::operator()() const at
> geos/capi/geos_ts_c.cpp:1078
> > #18
> _Z7executeIZ12GEOSBuffer_rE4$_41LDn0EEDTclfp0_EEP20GEOSContextHandle_HSOT_
> at geos/capi/geos_ts_c.cpp:388
> > #19 ::GEOSBuffer_r(GEOSContextHandle_t, const geos::geom::Geometry *,
> double, int) at geos/capi/geos_ts_c.cpp:1077
> > #20 GeometryConvertible.buffer(by:) at
> GEOSwift/GEOSwift/GEOS/GeometryConvertible+GEOS.swift:348
> > #21 GeometryConvertible_GEOSTests.testBufferAllTypes() at
> GEOSwift/GEOSwiftTests/GEOS/GeometryConvertible+GEOSTests.swift:856
> >
> > Let me know what other info I can provide.
> >
> > --
> > Andrew
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201130/47185bf9/attachment-0001.html>

From andrew.d.hershberger at gmail.com  Mon Nov 30 19:15:24 2020
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Mon, 30 Nov 2020 21:15:24 -0600
Subject: [geos-devel] 3.9.0beta + GEOSwift + Linux
Message-ID: <CACZW30PS7SUpxbscn8AWFP70VF+251i8XdLgKQ6yJ1e9sFir9g@mail.gmail.com>

Found another issue with the beta when testing GEOSwift on Linux
(specifically, compiling in a Docker container using the Swift Docker
image). Here's what I'm doing:

$ sudo docker run -it --rm swift /bin/bash
# cd home
# git clone https://github.com/GEOSwift/GEOSwift.git
# cd GEOSwift
# git checkout geos-3.9.0-testing
# swift test --enable-test-discovery -v

Among other things, this yields the following line for LineLimiter.cpp:

/usr/bin/clang -target x86_64-unknown-linux-gnu -fPIC -g -O0
-DSWIFT_PACKAGE=1 -DDEBUG=1 -fblocks -fmodules -fmodule-name=geos -I
/home/GEOSwift/.build/checkouts/geos/Sources/geos/public
-fmodules-cache-path=/home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/ModuleCache
-DUSE_UNSTABLE_GEOS_CPP_API
-I/home/GEOSwift/.build/checkouts/geos/Sources/geos/include -MD -MT
dependencies -MF
/home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.d
-std=c++11 -c
/home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp
-o
/home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.o

And this corresponding error:

/home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp:121:24:
error: no member named 'unique' in namespace 'std'
    ptList->erase(std::unique(ptList->begin(), ptList->end()),
ptList->end());
                  ~~~~~^

Here's some clang version info:

clang version 10.0.0 (git at github.com:apple/llvm-project.git
3093af41dd65ad466dcd5603e9289244edfee4f5)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/bin

Any idea what might be going on here?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201130/140b7a58/attachment.html>

From pramsey at cleverelephant.ca  Mon Nov 30 19:17:35 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 30 Nov 2020 19:17:35 -0800
Subject: [geos-devel] 3.9.0beta + GEOSwift + Linux
In-Reply-To: <CACZW30PS7SUpxbscn8AWFP70VF+251i8XdLgKQ6yJ1e9sFir9g@mail.gmail.com>
References: <CACZW30PS7SUpxbscn8AWFP70VF+251i8XdLgKQ6yJ1e9sFir9g@mail.gmail.com>
Message-ID: <B253D9B9-DB88-4B6C-89E5-4347BD76E6B2@cleverelephant.ca>



> On Nov 30, 2020, at 7:15 PM, Andrew Hershberger <andrew.d.hershberger at gmail.com> wrote:
> 
> Found another issue with the beta when testing GEOSwift on Linux (specifically, compiling in a Docker container using the Swift Docker image). Here's what I'm doing:
> 
> $ sudo docker run -it --rm swift /bin/bash
> # cd home
> # git clone https://github.com/GEOSwift/GEOSwift.git
> # cd GEOSwift
> # git checkout geos-3.9.0-testing
> # swift test --enable-test-discovery -v
> 
> Among other things, this yields the following line for LineLimiter.cpp:
> 
> /usr/bin/clang -target x86_64-unknown-linux-gnu -fPIC -g -O0 -DSWIFT_PACKAGE=1 -DDEBUG=1 -fblocks -fmodules -fmodule-name=geos -I /home/GEOSwift/.build/checkouts/geos/Sources/geos/public -fmodules-cache-path=/home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/ModuleCache -DUSE_UNSTABLE_GEOS_CPP_API -I/home/GEOSwift/.build/checkouts/geos/Sources/geos/include -MD -MT dependencies -MF /home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.d -std=c++11 -c /home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp -o /home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.o
> 
> And this corresponding error:
> 
> /home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp:121:24: error: no member named 'unique' in namespace 'std'
>     ptList->erase(std::unique(ptList->begin(), ptList->end()), ptList->end());

Add #include <algorithm>
to LineLimiter.cpp see if that helps?

Not sure why only your version would have this problem. Maybe it's in different headers sometimes?


>                   ~~~~~^
> 
> Here's some clang version info:
> 
> clang version 10.0.0 (git at github.com:apple/llvm-project.git 3093af41dd65ad466dcd5603e9289244edfee4f5)
> Target: x86_64-unknown-linux-gnu
> Thread model: posix
> InstalledDir: /usr/bin
> 
> Any idea what might be going on here?
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mwtoews at gmail.com  Mon Nov 30 20:31:32 2020
From: mwtoews at gmail.com (Mike Taves)
Date: Tue, 1 Dec 2020 17:31:32 +1300
Subject: [geos-devel] MSVC Unit Failure
In-Reply-To: <C9B2A46F-AA95-4F67-B13F-970927D7B555@cleverelephant.ca>
References: <E6117FFE-F947-4CE1-ACA8-E0894DA9381E@cleverelephant.ca>
 <C9B2A46F-AA95-4F67-B13F-970927D7B555@cleverelephant.ca>
Message-ID: <CAM2FmMpKWCnOUV-Qmy9CoNVLHgLtD5Qdnuy4PJyhgK+R4UOT+g@mail.gmail.com>

On Sat, 28 Nov 2020 at 17:59, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>
> The actual build logs you can see here
>
> https://dev.azure.com/libgeos/geos/_build/results?buildId=772&view=logs&jobId=305851a9-a7bb-55db-0042-7e2b6f48aa1c&j=2bd7b19d-6351-5e7f-8417-63f327ab45bc

While I don't know how to fix the issue, I've recompiled the issue
with tests\unit\simplify\TopologyPreservingSimplifierTest.cpp to show
the expected/result info:

D:\src\GEOS\geos-git\build>ctest -C Release -R
unit-simplify-TopologyPreservingSimplifier -V
UpdateCTestConfiguration  from :D:/src/GEOS/geos-git/build/DartConfiguration.tcl
Parse Config file:D:/src/GEOS/geos-git/build/DartConfiguration.tcl
UpdateCTestConfiguration  from :D:/src/GEOS/geos-git/build/DartConfiguration.tcl
Parse Config file:D:/src/GEOS/geos-git/build/DartConfiguration.tcl
Test project D:/src/GEOS/geos-git/build
Constructing a list of tests
Done constructing a list of tests
Updating test list for fixtures
Added 0 tests to meet fixture requirements
Checking test dependency graph...
Checking test dependency graph end
test 198
    Start 198: unit-simplify-TopologyPreservingSimplifier

198: Test command: D:\src\GEOS\geos-git\build\bin\test_geos_unit.exe
"geos::simplify::TopologyPreservingSimplifier"
198: Test timeout computed to be: 1500
198: ===============================
198:   GEOS Test Suite Application
198: ===============================
198:
198: geos::simplify::TopologyPreservingSimplifier:
............expected
0105000000020000000102000000020000000000000000000000000000000000000000000000000059400000000000000000010200000003000000000000000000000000000000000000000000000000004940000000000000F03F00000000000059400000000000000000
198: result 01050000000200000001020000000200000000000000000000000000000000000000000000000000594000000000000000000102000000020000000000000000000000000000000000000000000000000059400000000000000000
198: [14=F]..
198:
198: ---> group: geos::simplify::TopologyPreservingSimplifier, test: test<14>
198:      problem: assertion failed
198:      failed assertion: `number of points do not match: expected
`4` actual `5``
198:
198: tests summary: failures:1 ok:14
1/1 Test #198: unit-simplify-TopologyPreservingSimplifier ...***Failed
   0.03 sec

0% tests passed, 1 tests failed out of 1

Total Test time (real) =   0.07 sec

The following tests FAILED:
        198 - unit-simplify-TopologyPreservingSimplifier (Failed)
Errors while running CTest

D:\src\GEOS\geos-git\build>ctest -C Release -R
unit-simplify-TopologyPreservingSimplifier
Test project D:/src/GEOS/geos-git/build
    Start 198: unit-simplify-TopologyPreservingSimplifier
1/1 Test #198: unit-simplify-TopologyPreservingSimplifier ...   Passed
   0.04 sec

100% tests passed, 0 tests failed out of 1

Total Test time (real) =   0.15 sec

----
This test takes input:
MULTILINESTRING((0 0, 50 0, 70 0, 80 0, 100 0), (0 0, 50 1, 60 1, 100 0))

And performs simplify with tolerance 10.0, and expects:
MULTILINESTRING ((0 0, 100 0), (0 0, 50 1, 100 0))

But for whatever reason, gets:
MULTILINESTRING ((0 0, 100 0), (0 0, 100 0))

From pramsey at cleverelephant.ca  Mon Nov 30 20:41:48 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 30 Nov 2020 20:41:48 -0800
Subject: [geos-devel] MSVC Unit Failure
In-Reply-To: <CAM2FmMpKWCnOUV-Qmy9CoNVLHgLtD5Qdnuy4PJyhgK+R4UOT+g@mail.gmail.com>
References: <E6117FFE-F947-4CE1-ACA8-E0894DA9381E@cleverelephant.ca>
 <C9B2A46F-AA95-4F67-B13F-970927D7B555@cleverelephant.ca>
 <CAM2FmMpKWCnOUV-Qmy9CoNVLHgLtD5Qdnuy4PJyhgK+R4UOT+g@mail.gmail.com>
Message-ID: <858C14AA-0AB7-435D-9651-72632BBB1549@cleverelephant.ca>

I looked into the git log for TopologyPreservingSimplifierTest.cpp and found this:

commit 7014e2b6509709f70dc08ca3b4b4d843d3df2a71
Author: Daniel Baston <dbaston at gmail.com>
Date:   Sat Dec 22 20:49:22 2018 -0500

    Change std::map to std::unordered_map in TopologyPreservingSimplifier

If I change the unordered_map back to a map... I get the exact same unit test failure on my MacOS machine. I've pushed a branch to see if it now succeeds under MSVC.

P


> On Nov 30, 2020, at 8:31 PM, Mike Taves <mwtoews at gmail.com> wrote:
> 
> On Sat, 28 Nov 2020 at 17:59, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> 
>> The actual build logs you can see here
>> 
>> https://dev.azure.com/libgeos/geos/_build/results?buildId=772&view=logs&jobId=305851a9-a7bb-55db-0042-7e2b6f48aa1c&j=2bd7b19d-6351-5e7f-8417-63f327ab45bc
> 
> While I don't know how to fix the issue, I've recompiled the issue
> with tests\unit\simplify\TopologyPreservingSimplifierTest.cpp to show
> the expected/result info:
> 
> D:\src\GEOS\geos-git\build>ctest -C Release -R
> unit-simplify-TopologyPreservingSimplifier -V
> UpdateCTestConfiguration  from :D:/src/GEOS/geos-git/build/DartConfiguration.tcl
> Parse Config file:D:/src/GEOS/geos-git/build/DartConfiguration.tcl
> UpdateCTestConfiguration  from :D:/src/GEOS/geos-git/build/DartConfiguration.tcl
> Parse Config file:D:/src/GEOS/geos-git/build/DartConfiguration.tcl
> Test project D:/src/GEOS/geos-git/build
> Constructing a list of tests
> Done constructing a list of tests
> Updating test list for fixtures
> Added 0 tests to meet fixture requirements
> Checking test dependency graph...
> Checking test dependency graph end
> test 198
>    Start 198: unit-simplify-TopologyPreservingSimplifier
> 
> 198: Test command: D:\src\GEOS\geos-git\build\bin\test_geos_unit.exe
> "geos::simplify::TopologyPreservingSimplifier"
> 198: Test timeout computed to be: 1500
> 198: ===============================
> 198:   GEOS Test Suite Application
> 198: ===============================
> 198:
> 198: geos::simplify::TopologyPreservingSimplifier:
> ............expected
> 0105000000020000000102000000020000000000000000000000000000000000000000000000000059400000000000000000010200000003000000000000000000000000000000000000000000000000004940000000000000F03F00000000000059400000000000000000
> 198: result 01050000000200000001020000000200000000000000000000000000000000000000000000000000594000000000000000000102000000020000000000000000000000000000000000000000000000000059400000000000000000
> 198: [14=F]..
> 198:
> 198: ---> group: geos::simplify::TopologyPreservingSimplifier, test: test<14>
> 198:      problem: assertion failed
> 198:      failed assertion: `number of points do not match: expected
> `4` actual `5``
> 198:
> 198: tests summary: failures:1 ok:14
> 1/1 Test #198: unit-simplify-TopologyPreservingSimplifier ...***Failed
>   0.03 sec
> 
> 0% tests passed, 1 tests failed out of 1
> 
> Total Test time (real) =   0.07 sec
> 
> The following tests FAILED:
>        198 - unit-simplify-TopologyPreservingSimplifier (Failed)
> Errors while running CTest
> 
> D:\src\GEOS\geos-git\build>ctest -C Release -R
> unit-simplify-TopologyPreservingSimplifier
> Test project D:/src/GEOS/geos-git/build
>    Start 198: unit-simplify-TopologyPreservingSimplifier
> 1/1 Test #198: unit-simplify-TopologyPreservingSimplifier ...   Passed
>   0.04 sec
> 
> 100% tests passed, 0 tests failed out of 1
> 
> Total Test time (real) =   0.15 sec
> 
> ----
> This test takes input:
> MULTILINESTRING((0 0, 50 0, 70 0, 80 0, 100 0), (0 0, 50 1, 60 1, 100 0))
> 
> And performs simplify with tolerance 10.0, and expects:
> MULTILINESTRING ((0 0, 100 0), (0 0, 50 1, 100 0))
> 
> But for whatever reason, gets:
> MULTILINESTRING ((0 0, 100 0), (0 0, 100 0))
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From andrew.d.hershberger at gmail.com  Mon Nov 30 21:40:52 2020
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Mon, 30 Nov 2020 23:40:52 -0600
Subject: [geos-devel] 3.9.0beta + GEOSwift + Linux
In-Reply-To: <B253D9B9-DB88-4B6C-89E5-4347BD76E6B2@cleverelephant.ca>
References: <CACZW30PS7SUpxbscn8AWFP70VF+251i8XdLgKQ6yJ1e9sFir9g@mail.gmail.com>
 <B253D9B9-DB88-4B6C-89E5-4347BD76E6B2@cleverelephant.ca>
Message-ID: <CACZW30PWXTM-tjWAB3gnTVuyv_1OkrtPCFqHhqyjFg8RJa2z_A@mail.gmail.com>

That works. I had to add it to KdTree.cpp as well. Agree that it's strange.

On Mon, Nov 30, 2020 at 9:17 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Nov 30, 2020, at 7:15 PM, Andrew Hershberger <
> andrew.d.hershberger at gmail.com> wrote:
> >
> > Found another issue with the beta when testing GEOSwift on Linux
> (specifically, compiling in a Docker container using the Swift Docker
> image). Here's what I'm doing:
> >
> > $ sudo docker run -it --rm swift /bin/bash
> > # cd home
> > # git clone https://github.com/GEOSwift/GEOSwift.git
> > # cd GEOSwift
> > # git checkout geos-3.9.0-testing
> > # swift test --enable-test-discovery -v
> >
> > Among other things, this yields the following line for LineLimiter.cpp:
> >
> > /usr/bin/clang -target x86_64-unknown-linux-gnu -fPIC -g -O0
> -DSWIFT_PACKAGE=1 -DDEBUG=1 -fblocks -fmodules -fmodule-name=geos -I
> /home/GEOSwift/.build/checkouts/geos/Sources/geos/public
> -fmodules-cache-path=/home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/ModuleCache
> -DUSE_UNSTABLE_GEOS_CPP_API
> -I/home/GEOSwift/.build/checkouts/geos/Sources/geos/include -MD -MT
> dependencies -MF
> /home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.d
> -std=c++11 -c
> /home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp
> -o
> /home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.o
> >
> > And this corresponding error:
> >
> >
> /home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp:121:24:
> error: no member named 'unique' in namespace 'std'
> >     ptList->erase(std::unique(ptList->begin(), ptList->end()),
> ptList->end());
>
> Add #include <algorithm>
> to LineLimiter.cpp see if that helps?
>
> Not sure why only your version would have this problem. Maybe it's in
> different headers sometimes?
>
>
> >                   ~~~~~^
> >
> > Here's some clang version info:
> >
> > clang version 10.0.0 (git at github.com:apple/llvm-project.git
> 3093af41dd65ad466dcd5603e9289244edfee4f5)
> > Target: x86_64-unknown-linux-gnu
> > Thread model: posix
> > InstalledDir: /usr/bin
> >
> > Any idea what might be going on here?
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201130/2628841b/attachment-0001.html>

From andrew.d.hershberger at gmail.com  Mon Nov 30 22:13:30 2020
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Tue, 1 Dec 2020 00:13:30 -0600
Subject: [geos-devel] 3.9.0beta + GEOSwift + Linux
In-Reply-To: <CACZW30PWXTM-tjWAB3gnTVuyv_1OkrtPCFqHhqyjFg8RJa2z_A@mail.gmail.com>
References: <CACZW30PS7SUpxbscn8AWFP70VF+251i8XdLgKQ6yJ1e9sFir9g@mail.gmail.com>
 <B253D9B9-DB88-4B6C-89E5-4347BD76E6B2@cleverelephant.ca>
 <CACZW30PWXTM-tjWAB3gnTVuyv_1OkrtPCFqHhqyjFg8RJa2z_A@mail.gmail.com>
Message-ID: <CACZW30PyL2jU7WTxJqr5XnOB9OaufHDjjGqmUOZmFCPQNLju4A@mail.gmail.com>

Seems like the macOS builds are getting their <vector> from llvm's libc++
but that the build in the Swift Docker container is using the GNU C++.
LLVM's vector
(Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/vector)
imports algorithm. The GNU C++ version doesn't (at least not directly). I
find this Swift Package Manager behavior on Linux strange because the
GEOSwift/geos package definition specifically requests "cxx11" (as opposed
to "gnucxx11"). I'll see whether someone from the Swift team can shed
some light on what's going on here.

On Mon, Nov 30, 2020 at 11:40 PM Andrew Hershberger <
andrew.d.hershberger at gmail.com> wrote:

> That works. I had to add it to KdTree.cpp as well. Agree that it's strange.
>
> On Mon, Nov 30, 2020 at 9:17 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>>
>>
>> > On Nov 30, 2020, at 7:15 PM, Andrew Hershberger <
>> andrew.d.hershberger at gmail.com> wrote:
>> >
>> > Found another issue with the beta when testing GEOSwift on Linux
>> (specifically, compiling in a Docker container using the Swift Docker
>> image). Here's what I'm doing:
>> >
>> > $ sudo docker run -it --rm swift /bin/bash
>> > # cd home
>> > # git clone https://github.com/GEOSwift/GEOSwift.git
>> > # cd GEOSwift
>> > # git checkout geos-3.9.0-testing
>> > # swift test --enable-test-discovery -v
>> >
>> > Among other things, this yields the following line for LineLimiter.cpp:
>> >
>> > /usr/bin/clang -target x86_64-unknown-linux-gnu -fPIC -g -O0
>> -DSWIFT_PACKAGE=1 -DDEBUG=1 -fblocks -fmodules -fmodule-name=geos -I
>> /home/GEOSwift/.build/checkouts/geos/Sources/geos/public
>> -fmodules-cache-path=/home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/ModuleCache
>> -DUSE_UNSTABLE_GEOS_CPP_API
>> -I/home/GEOSwift/.build/checkouts/geos/Sources/geos/include -MD -MT
>> dependencies -MF
>> /home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.d
>> -std=c++11 -c
>> /home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp
>> -o
>> /home/GEOSwift/.build/x86_64-unknown-linux-gnu/debug/geos.build/src/operation/overlayng/LineLimiter.cpp.o
>> >
>> > And this corresponding error:
>> >
>> >
>> /home/GEOSwift/.build/checkouts/geos/Sources/geos/src/operation/overlayng/LineLimiter.cpp:121:24:
>> error: no member named 'unique' in namespace 'std'
>> >     ptList->erase(std::unique(ptList->begin(), ptList->end()),
>> ptList->end());
>>
>> Add #include <algorithm>
>> to LineLimiter.cpp see if that helps?
>>
>> Not sure why only your version would have this problem. Maybe it's in
>> different headers sometimes?
>>
>>
>> >                   ~~~~~^
>> >
>> > Here's some clang version info:
>> >
>> > clang version 10.0.0 (git at github.com:apple/llvm-project.git
>> 3093af41dd65ad466dcd5603e9289244edfee4f5)
>> > Target: x86_64-unknown-linux-gnu
>> > Thread model: posix
>> > InstalledDir: /usr/bin
>> >
>> > Any idea what might be going on here?
>> >
>> > _______________________________________________
>> > geos-devel mailing list
>> > geos-devel at lists.osgeo.org
>> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20201201/46abdd4a/attachment.html>

