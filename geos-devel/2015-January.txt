From manisandro at gmail.com  Mon Jan  5 08:17:26 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Mon, 05 Jan 2015 17:17:26 +0100
Subject: [geos-devel] Exposing PrecisionModel,
	GeometryPrecisionReducer in the C API
In-Reply-To: <54996CD1.8060106@gmail.com>
References: <54996CD1.8060106@gmail.com>
Message-ID: <54AAB916.6060209@gmail.com>

On 23.12.2014 14:23, Sandro Mani wrote:
> Hi,
>
> Following the initial discussion in ticket #713 [1], I'd like to 
> discuss the exposing of PrecisionModel and GeometryPrecisionReducer 
> methods in the C API.
>
> Personally I'm interested in having access to the 
> GeometryPrecisionReducer::reduce method, as noted in the ticket there 
> is also the desire [2] to expose the GeometryFactory in the C API and 
> allow creating geometries with a specified GeometryFactory. Below is 
> an initial proposal.
>
> ------------------------------------------------------------------------------- 
>
>
> /** Precision Model **/
> typedef struct GEOSPrecisionModel_t GEOSPrecisionModel;
>
> enum GEOSPrecisionModelType {
>     GEOS_PRECISION_FIXED,
>     GEOS_PRECISION_FLOATING,
>     GEOS_PRECISION_FLOATING_SINGLE
> };
>
> extern GEOSPrecisionModel* GEOSPrecisionModel_create(int type);
> extern GEOSPrecisionModel* GEOSPrecisionModel_createFixed(double scale);
> extern void GEOSPrecisionModel_destroy(GEOSPrecisionModel* model);
>
>
> /** Geometry Factory **/
> typedef struct GEOSGeometryFactory_t GEOSGeometryFactory;
>
> /* pm copied, NULL for default. */
> extern GEOSGeometryFactory* 
> GEOSGeometryFactory_create(GEOSPrecisionModel* pm, int SRID);
> extern void GEOSGeometryFactory_destroy(GEOSGeometryFactory* factory);
>
>
> /** New geometry constructors **/
> /* Factory needs to stay valid */
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createPoint(GEOSGeometryFactory* factory, 
> GEOSCoordSequence* s);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createEmptyPoint(GEOSGeometryFactory* factory);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createLinearRing(GEOSGeometryFactory* factory, 
> GEOSCoordSequence* s);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createLineString(GEOSGeometryFactory* factory, 
> GEOSCoordSequence* s);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createEmptyLineString(GEOSGeometryFactory* factory);
>
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createEmptyPolygon(GEOSGeometryFactory* factory);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createPolygon(GEOSGeometryFactory* factory, 
> GEOSGeometry* shell, GEOSGeometry** holes, unsigned int nholes);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createCollection(GEOSGeometryFactory* factory, 
> int type, GEOSGeometry* *geoms, unsigned int ngeoms);
> extern GEOSGeometry GEOS_DLL 
> *GEOSGeometryFactory_createEmptyCollection(GEOSGeometryFactory* 
> factory, int type);
>
>
> /** Retreive factory from geometry **/
> extern GEOSGeometryFactory GEOSGeom_getGeometryFactory(GEOSGeometry* 
> geom);
>
>
> /** Precision Reducer **/
> typedef struct GEOSGeometryPrecisionReducer_t 
> GEOSGeometryPrecisionReducer;
>
> /* Factory needs to stay valid */
> extern GEOSGeometryPrecisionReducer* 
> GEOSGeometryPrecisionReducer_create_factory(GEOSGeometryFactory* 
> factory);
> extern GEOSGeometry* 
> GEOSGeometryPrecisionReducer_reduce(GEOSGeometryPrecisionReducer* 
> reducer, GEOSGeometry* geometry);
> extern void 
> GEOSGeometryPrecisionReducer_destroy(GEOSGeometryPrecisionReducer* 
> reducer);
>
> ------------------------------------------------------------------------------- 
>
>
> Remarks:
> - GEOSGeometryFactory_createXXX is closer to the C++ API, an 
> alternative would be something like GEOSGeom_createXXX_factory which 
> is closer to what is described in [2].
> - Possibly the CoordinateSequenceFactory needs to be exposed also?
>
> Comments appreciated. Thanks,
> Sandro
>
>
> [1] http://trac.osgeo.org/geos/ticket/713
> [2] http://trac.osgeo.org/geos/wiki/GSoC/CAPI_PrecisionModel
>
Any comments on this? Should I move ahead and post a complete patch?

Thanks,
Sandro


From strk at keybit.net  Tue Jan  6 04:34:00 2015
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 6 Jan 2015 13:34:00 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AAB916.6060209@gmail.com>
References: <54996CD1.8060106@gmail.com>
 <54AAB916.6060209@gmail.com>
Message-ID: <20150106123400.GA5416@localhost>

On Mon, Jan 05, 2015 at 05:17:26PM +0100, Sandro Mani wrote:
> On 23.12.2014 14:23, Sandro Mani wrote:
>
> >Following the initial discussion in ticket #713 [1], I'd like to
> >discuss the exposing of PrecisionModel and
> >GeometryPrecisionReducer methods in the C API.
>
> >[1] http://trac.osgeo.org/geos/ticket/713
> >[2] http://trac.osgeo.org/geos/wiki/GSoC/CAPI_PrecisionModel
> 
> Any comments on this? Should I move ahead and post a complete patch?

I'm not very comfortable with forcing callers to take care of
keeping a PrecisionModel object alive. As you noted it
would be a good idea to just have GeometryFactory keep a copy
of that. I'm actually not even sure this isn't the case already,
should check.

If I recall correctly a previous proposal was to "downgrade" the
precision model to an argument to the GeometryFactory constructor.
What do you think ?

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Wed Jan  7 00:54:32 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Wed, 07 Jan 2015 09:54:32 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150106123400.GA5416@localhost>
References: <54996CD1.8060106@gmail.com> <54AAB916.6060209@gmail.com>
	<20150106123400.GA5416@localhost>
Message-ID: <54ACF448.7030903@gmail.com>


On 06.01.2015 13:34, Sandro Santilli wrote:
> On Mon, Jan 05, 2015 at 05:17:26PM +0100, Sandro Mani wrote:
>> On 23.12.2014 14:23, Sandro Mani wrote:
>>
>>> Following the initial discussion in ticket #713 [1], I'd like to
>>> discuss the exposing of PrecisionModel and
>>> GeometryPrecisionReducer methods in the C API.
>>> [1] http://trac.osgeo.org/geos/ticket/713
>>> [2] http://trac.osgeo.org/geos/wiki/GSoC/CAPI_PrecisionModel
>> Any comments on this? Should I move ahead and post a complete patch?
> I'm not very comfortable with forcing callers to take care of
> keeping a PrecisionModel object alive. As you noted it
> would be a good idea to just have GeometryFactory keep a copy
> of that. I'm actually not even sure this isn't the case already,
> should check.
GeometryFactory does make a copy of the PrecisionModel passed by the 
user, so it is not necessary to keep the copy around.
>
> If I recall correctly a previous proposal was to "downgrade" the
> precision model to an argument to the GeometryFactory constructor.
> What do you think ?
By this you mean not exposting the PrecisionModel at all, and instead 
doing something like this?:

/** Geometry Factory **/
typedef struct GEOSGeometryFactory_t GEOSGeometryFactory;

extern GEOSGeometryFactory* GEOSGeometryFactory_create(int SRID);
extern GEOSGeometryFactory* 
GEOSGeometryFactory_create_doublePrecision(int SRID);
extern GEOSGeometryFactory* 
GEOSGeometryFactory_create_singlePrecision(int SRID);
extern GEOSGeometryFactory* 
GEOSGeometryFactory_create_fixedPrecision(int SRID, double scale);
extern void GEOSGeometryFactory_destroy(GEOSGeometryFactory* factory);

I'm ok with that, it is actually cleaner.

Thanks,
Sandro


From strk at keybit.net  Wed Jan  7 03:00:28 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 7 Jan 2015 12:00:28 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54ACF448.7030903@gmail.com>
References: <54996CD1.8060106@gmail.com> <54AAB916.6060209@gmail.com>
	<20150106123400.GA5416@localhost> <54ACF448.7030903@gmail.com>
Message-ID: <20150107110028.GA6726@localhost>

On Wed, Jan 07, 2015 at 09:54:32AM +0100, Sandro Mani wrote:

> GeometryFactory does make a copy of the PrecisionModel passed by the
> user, so it is not necessary to keep the copy around.

Great

> By this you mean not exposting the PrecisionModel at all, and
> instead doing something like this?:
> 
> /** Geometry Factory **/
> typedef struct GEOSGeometryFactory_t GEOSGeometryFactory;
> 
> extern GEOSGeometryFactory* GEOSGeometryFactory_create(int SRID);
> extern GEOSGeometryFactory*
> GEOSGeometryFactory_create_doublePrecision(int SRID);
> extern GEOSGeometryFactory*
> GEOSGeometryFactory_create_singlePrecision(int SRID);
> extern GEOSGeometryFactory*
> GEOSGeometryFactory_create_fixedPrecision(int SRID, double scale);
> extern void GEOSGeometryFactory_destroy(GEOSGeometryFactory* factory);
> 
> I'm ok with that, it is actually cleaner.

Yes. I'm not sure it's worth having support for single-precision,
and I'd avoid having two different signatures to create a double-precision.

 extern GEOSGeometryFactory*
 GEOSGeometryFactory_createDoublePrecision(int SRID); 

 extern GEOSGeometryFactory*
 GEOSGeometryFactory_createFixedPrecision(int SRID, double scale);

Further thinking about it, I wonder if there's a chance to also hide
the GeometryFactory object completely. I guess the main reason to expose
it is to give caller a way to manage it's lifetime, otherwise it could
be set into the Context before creating any geometry. Could lifetime
be taken care of by the C-API with reference counting ? Aren't Geometry
objects (the sole referers to GeometryFactory objects) solely constructable
and destroyable via C-API methods ? In that case such methods could
increase/decrease refcounts and delete no-more-needed ones.

Refcounting hiding would further simplify the interface because you would
not need to add new constructors signatures for making actual use of
the reduced precision.

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Wed Jan  7 03:28:17 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Wed, 07 Jan 2015 12:28:17 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150107110028.GA6726@localhost>
References: <54996CD1.8060106@gmail.com>
	<54AAB916.6060209@gmail.com>	<20150106123400.GA5416@localhost>
	<54ACF448.7030903@gmail.com> <20150107110028.GA6726@localhost>
Message-ID: <54AD1851.7030604@gmail.com>


On 07.01.2015 12:00, Sandro Santilli wrote:
> On Wed, Jan 07, 2015 at 09:54:32AM +0100, Sandro Mani wrote:
>
>> GeometryFactory does make a copy of the PrecisionModel passed by the
>> user, so it is not necessary to keep the copy around.
> Great
>
>> By this you mean not exposting the PrecisionModel at all, and
>> instead doing something like this?:
>>
>> /** Geometry Factory **/
>> typedef struct GEOSGeometryFactory_t GEOSGeometryFactory;
>>
>> extern GEOSGeometryFactory* GEOSGeometryFactory_create(int SRID);
>> extern GEOSGeometryFactory*
>> GEOSGeometryFactory_create_doublePrecision(int SRID);
>> extern GEOSGeometryFactory*
>> GEOSGeometryFactory_create_singlePrecision(int SRID);
>> extern GEOSGeometryFactory*
>> GEOSGeometryFactory_create_fixedPrecision(int SRID, double scale);
>> extern void GEOSGeometryFactory_destroy(GEOSGeometryFactory* factory);
>>
>> I'm ok with that, it is actually cleaner.
> Yes. I'm not sure it's worth having support for single-precision,
> and I'd avoid having two different signatures to create a double-precision.
>
>   extern GEOSGeometryFactory*
>   GEOSGeometryFactory_createDoublePrecision(int SRID);
>
>   extern GEOSGeometryFactory*
>   GEOSGeometryFactory_createFixedPrecision(int SRID, double scale);
Ah yes indeed GEOSGeometryFactory_create is equivalent to 
GEOSGeometryFactory_createDoublePrecision.
>
> Further thinking about it, I wonder if there's a chance to also hide
> the GeometryFactory object completely. I guess the main reason to expose
> it is to give caller a way to manage it's lifetime, otherwise it could
> be set into the Context before creating any geometry.
I think the main reason for exposing it is to be able to work with 
geometries with different PrecisionModels in the same session. This is 
actually my case: I have a QGIS plugin which take the GEOS Geometries 
from QgsGeometry, which are created with the default (aka double) 
precision, and then I perform operations on those geometries with 
reduced precision. This actually makes me realize that I really should 
be handing back a GEOSGeometry to QgsGeometry with the original 
PrecisionModel, so ideally there would also be a

extern GEOSGeometryPrecisionReducer* 
GEOSGeometryPrecisionReducer_create(double precision);

which does not change the GEOSGeometryFactory of the reduced geometry. 
Or otherwise a function which allows to change the PrecisionModel of a 
Geometry a posteriori.


> Could lifetime
> be taken care of by the C-API with reference counting ? Aren't Geometry
> objects (the sole referers to GeometryFactory objects) solely constructable
> and destroyable via C-API methods ? In that case such methods could
> increase/decrease refcounts and delete no-more-needed ones.
>
> Refcounting hiding would further simplify the interface because you would
> not need to add new constructors signatures for making actual use of
> the reduced precision.


From strk at keybit.net  Wed Jan  7 04:09:32 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 7 Jan 2015 13:09:32 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AD1851.7030604@gmail.com>
References: <54996CD1.8060106@gmail.com> <54AAB916.6060209@gmail.com>
	<20150106123400.GA5416@localhost> <54ACF448.7030903@gmail.com>
	<20150107110028.GA6726@localhost> <54AD1851.7030604@gmail.com>
Message-ID: <20150107120932.GA6879@localhost>

On Wed, Jan 07, 2015 at 12:28:17PM +0100, Sandro Mani wrote:

> I think the main reason for exposing it is to be able to work with
> geometries with different PrecisionModels in the same session. This
> is actually my case: I have a QGIS plugin which take the GEOS
> Geometries from QgsGeometry, which are created with the default (aka
> double) precision, and then I perform operations on those geometries
> with reduced precision.
>
> This actually makes me realize that I really
> should be handing back a GEOSGeometry to QgsGeometry with the
> original PrecisionModel, so ideally there would also be a
> 
> extern GEOSGeometryPrecisionReducer*
> GEOSGeometryPrecisionReducer_create(double precision);
> 
> which does not change the GEOSGeometryFactory of the reduced
> geometry.

Do you really just need a "coordinate rounder" kind of function or do
you want GEOS itself to perform operations using a reduced precision
model ?

> Or otherwise a function which allows to change the
> PrecisionModel of a Geometry a posteriori.

Changing the PrecisionModel of a Geometry is really needed
to change the behavior of GEOS operations themselves. This
is the kind of "exposure" I'd be interested to. 

Once you convert GEOS geometries to QgsGeometry you don't
really care about what PrecisionModel is recorded in them,
do you ?

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Wed Jan  7 04:16:09 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Wed, 07 Jan 2015 13:16:09 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150107120932.GA6879@localhost>
References: <54996CD1.8060106@gmail.com>
	<54AAB916.6060209@gmail.com>	<20150106123400.GA5416@localhost>
	<54ACF448.7030903@gmail.com>	<20150107110028.GA6726@localhost>
	<54AD1851.7030604@gmail.com> <20150107120932.GA6879@localhost>
Message-ID: <54AD2389.5000506@gmail.com>


On 07.01.2015 13:09, Sandro Santilli wrote:
> On Wed, Jan 07, 2015 at 12:28:17PM +0100, Sandro Mani wrote:
>
>> I think the main reason for exposing it is to be able to work with
>> geometries with different PrecisionModels in the same session. This
>> is actually my case: I have a QGIS plugin which take the GEOS
>> Geometries from QgsGeometry, which are created with the default (aka
>> double) precision, and then I perform operations on those geometries
>> with reduced precision.
>>
>> This actually makes me realize that I really
>> should be handing back a GEOSGeometry to QgsGeometry with the
>> original PrecisionModel, so ideally there would also be a
>>
>> extern GEOSGeometryPrecisionReducer*
>> GEOSGeometryPrecisionReducer_create(double precision);
>>
>> which does not change the GEOSGeometryFactory of the reduced
>> geometry.
> Do you really just need a "coordinate rounder" kind of function or do
> you want GEOS itself to perform operations using a reduced precision
> model ?
>
>> Or otherwise a function which allows to change the
>> PrecisionModel of a Geometry a posteriori.
> Changing the PrecisionModel of a Geometry is really needed
> to change the behavior of GEOS operations themselves. This
> is the kind of "exposure" I'd be interested to.
Yes I agree.
> Once you convert GEOS geometries to QgsGeometry you don't
> really care about what PrecisionModel is recorded in them,
> do you ?
I'm not sure, what are the implications if a pass back a GEOSGeometry to 
QgsGeometry which has a fixed precision model, and not the double model 
as is default?
>
> --strk;
>
>    ()   Free GIS & Flash consultant/developer
>    /\   http://strk.keybit.net/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel


From strk at keybit.net  Wed Jan  7 04:19:10 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 7 Jan 2015 13:19:10 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AD2389.5000506@gmail.com>
References: <54996CD1.8060106@gmail.com> <54AAB916.6060209@gmail.com>
	<20150106123400.GA5416@localhost> <54ACF448.7030903@gmail.com>
	<20150107110028.GA6726@localhost> <54AD1851.7030604@gmail.com>
	<20150107120932.GA6879@localhost> <54AD2389.5000506@gmail.com>
Message-ID: <20150107121910.GC6879@localhost>

On Wed, Jan 07, 2015 at 01:16:09PM +0100, Sandro Mani wrote:
> On 07.01.2015 13:09, Sandro Santilli wrote:
>
> >Changing the PrecisionModel of a Geometry is really needed
> >to change the behavior of GEOS operations themselves. This
> >is the kind of "exposure" I'd be interested to.
>
> Yes I agree.
>
> >Once you convert GEOS geometries to QgsGeometry you don't
> >really care about what PrecisionModel is recorded in them,
> >do you ?
>
> I'm not sure, what are the implications if a pass back a
> GEOSGeometry to QgsGeometry which has a fixed precision model, and
> not the double model as is default?

I don't know as I didn't read the QGIS code, but I know in PostGIS
we scan coordinates of each point and copy them so the input
PrecisionModel does not affect the conversion in any way.

Even if you used WKT, the worst that could happen is that
you'd get less decimal digits, but that's the real precision
of the input anyway, so nothing is lost.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Wed Jan  7 04:23:29 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Wed, 07 Jan 2015 13:23:29 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150107121910.GC6879@localhost>
References: <54996CD1.8060106@gmail.com>
	<54AAB916.6060209@gmail.com>	<20150106123400.GA5416@localhost>
	<54ACF448.7030903@gmail.com>	<20150107110028.GA6726@localhost>
	<54AD1851.7030604@gmail.com>	<20150107120932.GA6879@localhost>
	<54AD2389.5000506@gmail.com> <20150107121910.GC6879@localhost>
Message-ID: <54AD2541.8040008@gmail.com>


On 07.01.2015 13:19, Sandro Santilli wrote:
> On Wed, Jan 07, 2015 at 01:16:09PM +0100, Sandro Mani wrote:
>> On 07.01.2015 13:09, Sandro Santilli wrote:
>>
>>> Changing the PrecisionModel of a Geometry is really needed
>>> to change the behavior of GEOS operations themselves. This
>>> is the kind of "exposure" I'd be interested to.
>> Yes I agree.
>>
>>> Once you convert GEOS geometries to QgsGeometry you don't
>>> really care about what PrecisionModel is recorded in them,
>>> do you ?
>> I'm not sure, what are the implications if a pass back a
>> GEOSGeometry to QgsGeometry which has a fixed precision model, and
>> not the double model as is default?
> I don't know as I didn't read the QGIS code, but I know in PostGIS
> we scan coordinates of each point and copy them so the input
> PrecisionModel does not affect the conversion in any way.
>
> Even if you used WKT, the worst that could happen is that
> you'd get less decimal digits, but that's the real precision
> of the input anyway, so nothing is lost.
I could check in the code, but do you know off the top of your head 
whether GEOS can perform operations with geometries of different 
precision, i.e. say an intersection?
> --strk;
>
>    ()   Free GIS & Flash consultant/developer
>    /\   http://strk.keybit.net/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel


From strk at keybit.net  Wed Jan  7 04:44:56 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 7 Jan 2015 13:44:56 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AD2541.8040008@gmail.com>
References: <54996CD1.8060106@gmail.com> <54AAB916.6060209@gmail.com>
	<20150106123400.GA5416@localhost> <54ACF448.7030903@gmail.com>
	<20150107110028.GA6726@localhost> <54AD1851.7030604@gmail.com>
	<20150107120932.GA6879@localhost> <54AD2389.5000506@gmail.com>
	<20150107121910.GC6879@localhost> <54AD2541.8040008@gmail.com>
Message-ID: <20150107124456.GA15487@localhost>

On Wed, Jan 07, 2015 at 01:23:29PM +0100, Sandro Mani wrote:

> I could check in the code, but do you know off the top of your head
> whether GEOS can perform operations with geometries of different
> precision, i.e. say an intersection?

It would use the precision of the smallest-precision geometry
as the precision of the operation. The returned geometry would
have the precision of the operation.

Some operations allow to override the precision, to take it
explicitly rather than from the smallest of the input geometry
precisions.

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Wed Jan  7 05:05:59 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Wed, 07 Jan 2015 14:05:59 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150107124456.GA15487@localhost>
References: <54996CD1.8060106@gmail.com>
	<54AAB916.6060209@gmail.com>	<20150106123400.GA5416@localhost>
	<54ACF448.7030903@gmail.com>	<20150107110028.GA6726@localhost>
	<54AD1851.7030604@gmail.com>	<20150107120932.GA6879@localhost>
	<54AD2389.5000506@gmail.com>	<20150107121910.GC6879@localhost>
	<54AD2541.8040008@gmail.com> <20150107124456.GA15487@localhost>
Message-ID: <54AD2F37.8080207@gmail.com>


On 07.01.2015 13:44, Sandro Santilli wrote:
> On Wed, Jan 07, 2015 at 01:23:29PM +0100, Sandro Mani wrote:
>
>> I could check in the code, but do you know off the top of your head
>> whether GEOS can perform operations with geometries of different
>> precision, i.e. say an intersection?
> It would use the precision of the smallest-precision geometry
> as the precision of the operation. The returned geometry would
> have the precision of the operation.
>
> Some operations allow to override the precision, to take it
> explicitly rather than from the smallest of the input geometry
> precisions.
>
Okay. So back to your point about hiding the GeometryFactory, I'd say no 
since otherwise one is limited to one precision model per context?

From strk at keybit.net  Wed Jan  7 06:25:58 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 7 Jan 2015 15:25:58 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AD2F37.8080207@gmail.com>
References: <20150106123400.GA5416@localhost> <54ACF448.7030903@gmail.com>
	<20150107110028.GA6726@localhost> <54AD1851.7030604@gmail.com>
	<20150107120932.GA6879@localhost> <54AD2389.5000506@gmail.com>
	<20150107121910.GC6879@localhost> <54AD2541.8040008@gmail.com>
	<20150107124456.GA15487@localhost> <54AD2F37.8080207@gmail.com>
Message-ID: <20150107142558.GA15933@localhost>

On Wed, Jan 07, 2015 at 02:05:59PM +0100, Sandro Mani wrote:

> Okay. So back to your point about hiding the GeometryFactory, I'd
> say no since otherwise one is limited to one precision model per
> context?

Yes, but there's no limit on the number of contexts you can hold in
a thread. Also nobody would prevent you from switching precision model
of the current context. The only problem would be, again, management
of GeometryFactory objects that are no more used.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Wed Jan  7 07:48:24 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Wed, 07 Jan 2015 16:48:24 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150107142558.GA15933@localhost>
References: <20150106123400.GA5416@localhost>
	<54ACF448.7030903@gmail.com>	<20150107110028.GA6726@localhost>
	<54AD1851.7030604@gmail.com>	<20150107120932.GA6879@localhost>
	<54AD2389.5000506@gmail.com>	<20150107121910.GC6879@localhost>
	<54AD2541.8040008@gmail.com>	<20150107124456.GA15487@localhost>
	<54AD2F37.8080207@gmail.com> <20150107142558.GA15933@localhost>
Message-ID: <54AD5548.2040709@gmail.com>


On 07.01.2015 15:25, Sandro Santilli wrote:
> On Wed, Jan 07, 2015 at 02:05:59PM +0100, Sandro Mani wrote:
>
>> Okay. So back to your point about hiding the GeometryFactory, I'd
>> say no since otherwise one is limited to one precision model per
>> context?
> Yes, but there's no limit on the number of contexts you can hold in
> a thread. Also nobody would prevent you from switching precision model
> of the current context. The only problem would be, again, management
> of GeometryFactory objects that are no more used.

So this would mean an API like:

/** Create context handle **/
extern GEOSContextHandle_t GEOS_DLL initGEOS_r(GEOSMessageHandler 
notice_function, GEOSMessageHandler error_function);
extern GEOSContextHandle_t GEOS_DLL 
initGEOS_r_fixedPrecision(GEOSMessageHandler notice_function, 
GEOSMessageHandler error_function, double scale);
/** GEOSContextHandle_t internally keeps a reference count, set to 1 on 
creation
  * - *All* methods producing a GEOSGeom increase the reference count
  * - GEOSGeom_destroy decreses the GeometryFactory reference count, if 
0, it destroys the context
  * - finishGEOS_r decreses the reference count, if 0, it destroys the 
context
  */

/** Set context handle precision model **/
void GEOSContextHandle_t 
GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
void GEOSContextHandle_t 
GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double scale);

/** Precision reducer **/
extern GEOSGeometryPrecisionReducer* GEOSGeometryPrecisionReducer_create();
extern GEOSGeometry* 
GEOSGeometryPrecisionReducer_reduce(GEOSGeometryPrecisionReducer* 
reducer, GEOSGeometry* geometry);
extern void 
GEOSGeometryPrecisionReducer_destroy(GEOSGeometryPrecisionReducer* reducer);


The changes needed for reference counting are somewhat invasive IMO.

From strk at keybit.net  Thu Jan  8 03:37:52 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 8 Jan 2015 12:37:52 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AD5548.2040709@gmail.com>
References: <20150107110028.GA6726@localhost> <54AD1851.7030604@gmail.com>
	<20150107120932.GA6879@localhost> <54AD2389.5000506@gmail.com>
	<20150107121910.GC6879@localhost> <54AD2541.8040008@gmail.com>
	<20150107124456.GA15487@localhost> <54AD2F37.8080207@gmail.com>
	<20150107142558.GA15933@localhost> <54AD5548.2040709@gmail.com>
Message-ID: <20150108113752.GA7420@localhost>

On Wed, Jan 07, 2015 at 04:48:24PM +0100, Sandro Mani wrote:
> 
> On 07.01.2015 15:25, Sandro Santilli wrote:
> >On Wed, Jan 07, 2015 at 02:05:59PM +0100, Sandro Mani wrote:
> >
> >>Okay. So back to your point about hiding the GeometryFactory, I'd
> >>say no since otherwise one is limited to one precision model per
> >>context?
> >Yes, but there's no limit on the number of contexts you can hold in
> >a thread. Also nobody would prevent you from switching precision model
> >of the current context. The only problem would be, again, management
> >of GeometryFactory objects that are no more used.
> 
> So this would mean an API like:
> 
> /** Create context handle **/
> extern GEOSContextHandle_t GEOS_DLL initGEOS_r(GEOSMessageHandler
> notice_function, GEOSMessageHandler error_function);
> extern GEOSContextHandle_t GEOS_DLL
> initGEOS_r_fixedPrecision(GEOSMessageHandler notice_function,
> GEOSMessageHandler error_function, double scale);

I don't think it's needed to create a context with non-default
factory, given we have methods to change it later.

> /** Set context handle precision model **/
> void GEOSContextHandle_t
> GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
> void GEOSContextHandle_t
> GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double
> scale);

Yes.

> /** Precision reducer **/
> extern GEOSGeometryPrecisionReducer* GEOSGeometryPrecisionReducer_create();
> extern GEOSGeometry*
> GEOSGeometryPrecisionReducer_reduce(GEOSGeometryPrecisionReducer*
> reducer, GEOSGeometry* geometry);
> extern void
> GEOSGeometryPrecisionReducer_destroy(GEOSGeometryPrecisionReducer*
> reducer);

Or, just calling GEOSGeom_clone() after setting context precision
to fixed ?

> The changes needed for reference counting are somewhat invasive IMO.

True. And I'm not sure it can be done w/out touching the C++ API
either.

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Thu Jan  8 04:08:12 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Thu, 08 Jan 2015 13:08:12 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150108113752.GA7420@localhost>
References: <20150107110028.GA6726@localhost>
	<54AD1851.7030604@gmail.com>	<20150107120932.GA6879@localhost>
	<54AD2389.5000506@gmail.com>	<20150107121910.GC6879@localhost>
	<54AD2541.8040008@gmail.com>	<20150107124456.GA15487@localhost>
	<54AD2F37.8080207@gmail.com>	<20150107142558.GA15933@localhost>
	<54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
Message-ID: <54AE732C.90908@gmail.com>


On 08.01.2015 12:37, Sandro Santilli wrote:
> On Wed, Jan 07, 2015 at 04:48:24PM +0100, Sandro Mani wrote:
>> So this would mean an API like:
>>
>> /** Create context handle **/
>> extern GEOSContextHandle_t GEOS_DLL initGEOS_r(GEOSMessageHandler
>> notice_function, GEOSMessageHandler error_function);
>> extern GEOSContextHandle_t GEOS_DLL
>> initGEOS_r_fixedPrecision(GEOSMessageHandler notice_function,
>> GEOSMessageHandler error_function, double scale);
> I don't think it's needed to create a context with non-default
> factory, given we have methods to change it later.
>
>> /** Set context handle precision model **/
>> void GEOSContextHandle_t
>> GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
>> void GEOSContextHandle_t
>> GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double
>> scale);
> Yes.
>
>> /** Precision reducer **/
>> extern GEOSGeometryPrecisionReducer* GEOSGeometryPrecisionReducer_create();
>> extern GEOSGeometry*
>> GEOSGeometryPrecisionReducer_reduce(GEOSGeometryPrecisionReducer*
>> reducer, GEOSGeometry* geometry);
>> extern void
>> GEOSGeometryPrecisionReducer_destroy(GEOSGeometryPrecisionReducer*
>> reducer);
> Or, just calling GEOSGeom_clone() after setting context precision
> to fixed ?
This would be very compact, though possibly it makes it quite 
un-inutitive for users to even realize that the reduce functionality is 
implicitly exposed through the C API. Some comments could fix that though.
>
>> The changes needed for reference counting are somewhat invasive IMO.
> True. And I'm not sure it can be done w/out touching the C++ API
> either.
Unless I'm missing something, it should be doable, by keeping the 
reference count in GEOSContextHandleInternal and doing all the couning 
in geos_ts_c.cpp.


So to wrap up, things currently look as follows (which I actually think 
is quite neat!):


/** GEOSContextHandle_t internally keeps a reference count, set to 1 on 
creation
  * - *All* methods producing a GEOSGeom increase the reference count
  * - GEOSGeom_destroy decreses the GeometryFactory reference count, if 
0, it destroys the context
  * - finishGEOS_r decreses the reference count, if 0, it destroys the 
context
  */

/** GEOSGeom_clone() clones the geometry and applies 
PrecisionReducer::reduce
  *  if the PrecisionModel of the current context is different than the 
that of
  *  the passed geometry
  */

/** Set context handle precision model **/
void GEOSContextHandle_t 
GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
void GEOSContextHandle_t 
GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double scale);


From geos-trac at osgeo.org  Thu Jan  8 05:29:53 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 08 Jan 2015 13:29:53 -0000
Subject: [geos-devel] [GEOS] #687: Affine transformation functions
In-Reply-To: <045.0d457671c419302d71d1c70b7f41e6ae@osgeo.org>
References: <045.0d457671c419302d71d1c70b7f41e6ae@osgeo.org>
Message-ID: <054.5823341daa82beb00de55ef171668899@osgeo.org>

#687: Affine transformation functions
-----------------------------+----------------------------------------------
 Reporter:  mwtoews          |       Owner:  geos-devel@?              
     Type:  enhancement      |      Status:  new                       
 Priority:  major            |   Milestone:  GEOS Future               
Component:  Default          |     Version:                            
 Severity:  Feature Request  |    Keywords:                            
-----------------------------+----------------------------------------------

Comment(by strk):

 This might help QGIS handling of rotation:
 http://hub.qgis.org/issues/11814

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/687#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From manisandro at gmail.com  Tue Jan 13 02:21:34 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Tue, 13 Jan 2015 11:21:34 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54AE732C.90908@gmail.com>
References: <20150107110028.GA6726@localhost>
	<54AD1851.7030604@gmail.com>	<20150107120932.GA6879@localhost>
	<54AD2389.5000506@gmail.com>	<20150107121910.GC6879@localhost>
	<54AD2541.8040008@gmail.com>	<20150107124456.GA15487@localhost>
	<54AD2F37.8080207@gmail.com>	<20150107142558.GA15933@localhost>
	<54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
	<54AE732C.90908@gmail.com>
Message-ID: <54B4F1AE.3030108@gmail.com>


On 08.01.2015 13:08, Sandro Mani wrote:
> So to wrap up, things currently look as follows (which I actually 
> think is quite neat!):
>
>
> /** GEOSContextHandle_t internally keeps a reference count, set to 1 
> on creation
>  * - *All* methods producing a GEOSGeom increase the reference count
>  * - GEOSGeom_destroy decreses the GeometryFactory reference count, if 
> 0, it destroys the context
>  * - finishGEOS_r decreses the reference count, if 0, it destroys the 
> context
>  */
>
> /** GEOSGeom_clone() clones the geometry and applies 
> PrecisionReducer::reduce
>  *  if the PrecisionModel of the current context is different than the 
> that of
>  *  the passed geometry
>  */
>
> /** Set context handle precision model **/
> void GEOSContextHandle_t 
> GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
> void GEOSContextHandle_t 
> GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double scale);
>
So, what do you think? Worth pursuing this approach?



From strk at keybit.net  Wed Jan 14 01:38:23 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 14 Jan 2015 10:38:23 +0100
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <54B4F1AE.3030108@gmail.com>
References: <54AD2389.5000506@gmail.com> <20150107121910.GC6879@localhost>
	<54AD2541.8040008@gmail.com> <20150107124456.GA15487@localhost>
	<54AD2F37.8080207@gmail.com> <20150107142558.GA15933@localhost>
	<54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
	<54AE732C.90908@gmail.com> <54B4F1AE.3030108@gmail.com>
Message-ID: <20150114093823.GA5770@localhost>

On Tue, Jan 13, 2015 at 11:21:34AM +0100, Sandro Mani wrote:
> 
> On 08.01.2015 13:08, Sandro Mani wrote:
> >So to wrap up, things currently look as follows (which I actually
> >think is quite neat!):
> >
> >
> >/** GEOSContextHandle_t internally keeps a reference count, set to
> >1 on creation
> > * - *All* methods producing a GEOSGeom increase the reference count
> > * - GEOSGeom_destroy decreses the GeometryFactory reference
> >count, if 0, it destroys the context
> > * - finishGEOS_r decreses the reference count, if 0, it destroys
> >the context
> > */
> >
> >/** GEOSGeom_clone() clones the geometry and applies
> >PrecisionReducer::reduce
> > *  if the PrecisionModel of the current context is different than
> >the that of
> > *  the passed geometry
> > */
> >
> >/** Set context handle precision model **/
> >void GEOSContextHandle_t
> >GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
> >void GEOSContextHandle_t
> >GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double
> >scale);
>
> So, what do you think? Worth pursuing this approach?

Sorry I'm not having much time to dedicate to this.
I'm not very sure about the approach, to be honest.
There are indeed 2 possible things one would want to do with PM:

 1. "advertise" the PM of a geometry, w/out rounding coords

 2. "set" the PM of a geometry, rounding coords

I'm not sure we ever want to allow for 1, to avoid wrong advertisement.
The signature in the current proposal makes 2 clear for the cloning
of a geometry, but we're still missing clear documentation about what
happens from the constructors. Would/should they round ?

Example, what should happen here:

  GEOSContextHandle_t h = initGEOS_r(...);
  GEOSCoordSequence *s = GEOSCoordSeq_create_r(h,2,2);
  GEOSContext_setPrecisionDouble(h);
  GEOSCoordSeq_setX_r(h, s, 0, 0);
  GEOSCoordSeq_setY_r(h, s, 0, 0);
  GEOSContext_setPrecisionFixed(h, 1);
  GEOSCoordSeq_setX_r(h, s, 1, 0.2);
  GEOSCoordSeq_setY_r(h, s, 1, 0.2);

Should the coordinate sequence contain 2 equal points after the above ?
And what about WKB/WKT parsing ?

It would help to gather more comments from others.
I've added Oliver and Sean in Cc as they took part of a precedent
discussion about this:
http://lists.osgeo.org/pipermail/geos-devel/2014-February/006780.html

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From geos-trac at osgeo.org  Thu Jan 22 02:26:24 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 22 Jan 2015 10:26:24 -0000
Subject: [geos-devel] [GEOS] #718: Port InteriorIntersectionFinder
	improvements from JTS
Message-ID: <042.c98d58977bf1f66db6bb79e74e6727f3@osgeo.org>

#718: Port InteriorIntersectionFinder improvements from JTS
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.5.0                     
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
 Martin just committed code to allow early-existing from the intersection
 finder as soon as an intersection was found. This could be useful to
 speedup the Intersects operation.

 The patch also adds "nodes counting" capability.
 See http://sourceforge.net/p/jts-topo-suite/code/950/

 Discussion here: http://sourceforge.net/p/jts-topo-
 suite/mailman/message/33252297/

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/718>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan 22 02:29:57 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 22 Jan 2015 10:29:57 -0000
Subject: [geos-devel] [GEOS] #718: Port InteriorIntersectionFinder
 improvements from JTS
In-Reply-To: <042.c98d58977bf1f66db6bb79e74e6727f3@osgeo.org>
References: <042.c98d58977bf1f66db6bb79e74e6727f3@osgeo.org>
Message-ID: <051.fc058aa514748a617e2dee9c3613d5a4@osgeo.org>

#718: Port InteriorIntersectionFinder improvements from JTS
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.5.0                     
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 The intersects operation speedup would help with cases like the one
 reported here: #708
 Actually, I think it would generally speedup any Relate operation as for
 the sake of intersection matrix we just care about the presence of
 intersections, w/out needing to compute all of them.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/718#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From m.orridge at gismosoftware.co.uk  Fri Jan 23 16:41:28 2015
From: m.orridge at gismosoftware.co.uk (Mick Orridge)
Date: Sat, 24 Jan 2015 00:41:28 +0000
Subject: [geos-devel] Memory Leak In GEOSIntersection_r
Message-ID: <54C2EA38.4080806@gismosoftware.co.uk>

This is my first post here, so feel free to let me know if I should be 
doing things differently.

I've been using the nightly snapshot from 4/1/2015 to generate Voronoi 
polygons and then clip them to the UK coastline on Windows 8.1 with 
VS2013. After processing several 100,000 polygons with 
GEOSIntersection_r my laptop was running out of memory.

I've investigated further and it looks like the Edges rejected by 
OverlayOp::insertUniqueEdges in OverlayOp.cpp are not being deleted.

My, not very elegant, solution to fix this is to add a new method to 
OverlayOp as follows:-

void
OverlayOp::deleteOrphanedEdges(vector<Edge*> *edges, const Envelope *env)
{
     for (size_t i = 0, n = edges->size(); i < n; ++i)
     {
         Edge *e = (*edges)[i];
         if (env && !env->intersects(e->getEnvelope())) delete e;
     }
}

and then call this just before exiting the method 
OverlayOp::computeOverlay(OverlayOp::OpCode opCode)

I don't really understand enough about the data structures to know if 
this is a valid fix or not. If somebody who does understand how this 
works could have a look at things I'd appreciate it.

There is also a small memory leak of a geomFactory in init/finishGEOS(). 
The only way I can see to fix this is to introduce a reference count and 
then null the static pointer when it reaches 0. Happy to have a look at 
fixing this if this seems a reasonable approach.

Regards,

Mick Orridge



