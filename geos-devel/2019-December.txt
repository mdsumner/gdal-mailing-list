From geos-trac at osgeo.org  Wed Dec 11 21:17:51 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 12 Dec 2019 05:17:51 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
Message-ID: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+--------------------------
 Reporter:  ndawson      |      Owner:  geos-devel@…
     Type:  enhancement  |     Status:  new
 Priority:  minor        |  Milestone:
Component:  Default      |    Version:
 Severity:  Unassigned   |   Keywords:
-------------------------+--------------------------
 The GEOSNearestPoints_r function should benefit heavily from prepared
 geometries -- consider adding a GEOSPreparedNearestPoints_r call which
 allows this.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Dec 16 05:27:50 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 16 Dec 2019 13:27:50 -0000
Subject: [geos-devel] [GEOS] #1008: Backport IsValid optimization to 3.8
Message-ID: <045.e81185913e47d90f76335c88465038d5@osgeo.org>

#1008: Backport IsValid optimization to 3.8
------------------------+--------------------------
 Reporter:  dbaston     |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.8.1
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Some optimizations to `IsValidOp` where recently committed to master. One
 of these, [changeset:7ed0c824b76e2127a16597546e507/git] is very small and
 of high enough benefit that I think it's worth backporting to 3.8.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1008>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 07:28:08 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 15:28:08 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.8667545eea13edd2f8edf839af940f26@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by dbaston):

 Nyall, do you have a test scenario in mind? `GEOSDistanceIndexed` may be
 of help, too.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 11:28:45 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 19:28:45 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.4ef0caecfbb4b8ca33b222b29c80996b@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by ndawson):

 I'm hitting this one during the qgis label placement engine candidate
 costing code. Qgis first generates a ton of potential candidate label
 positions (basically via a grid over the polygon), and then ranks them by
 calculating the distance of the label to the boundary of the polygon. (So
 labels further from boundaries are preferred). This involves hundreds of
 calls to GEOSNearestPoints for a single polygon.

 I can't find any documentation regarding GEOSDistanceIndexed (anywhere!).
 Does it maintain an index between calls? Is there any downside of using
 this over GEOSNearestPoints?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 11:54:17 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 19:54:17 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.581eaa09e9394e1ed2fb8ce615a34fa5@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by dbaston):

 > I can't find any documentation regarding GEOSDistanceIndexed
 (anywhere!).

 Hmm, maybe that's why I've never seen it used in the wild...

 > Does it maintain an index between calls? Is there any downside of using
 this over GEOSNearestPoints?

 No, and I agree that prepared geometries might be a good vehicle for
 maintaining that index.

 I haven't done testing to see what the break-even point is for an indexed
 vs brute-force distance calculation. The indexed calculation might be
 slower for very small geometries. I think you'd also have to use
 `GEOSBoundary(polygon)` as the input to `GEOSDistanceIndexed`, so you'd be
 paying for a copy.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 11:54:46 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 19:54:46 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.7be38c8976d8de51c799ff5c3f3ee947@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by mdavis):

 An indexed distance algorithm is definitely the way to go here.  I did a
 prototype implementation of a fast polygon labelling algorithm
 [here](https://github.com/dr-jts/jts-
 ports/tree/master/src/main/java/org/geotools/polylabelfast) (AKA Maximum
 Inner Circle). Using indexed distance sped it up hugely.  Hopefully QGIS
 is using a similar approach (iterative refinement of the grid).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 11:56:09 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 19:56:09 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.8a16fe2cc2cb79639f00ebce5ca74750@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:3 dbaston]:
 >
 > No, and I agree that prepared geometries might be a good vehicle for
 maintaining that index.

 Agreed, the indexed distance should be provided under prepared geometry.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 11:58:52 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 19:58:52 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.b065fd4002a68d408693b682544e5d34@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by mdavis):

 When the MaximunInnerCircle algorithm lands in JTS (or before...) perhaps
 the "polygon label point" function could be provide entirely by GEOS?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Dec 17 13:34:08 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 17 Dec 2019 21:34:08 -0000
Subject: [geos-devel] [GEOS] #1007: GEOSNearestPoints_r for prepared
	geometries
In-Reply-To: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
References: <045.2c193f7e48c88c252c3913dc75455910@osgeo.org>
Message-ID: <060.b6a9cd3365b99907c4b073be801a65ac@osgeo.org>

#1007: GEOSNearestPoints_r for prepared geometries
-------------------------+---------------------------
 Reporter:  ndawson      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by ndawson):

 > perhaps the "polygon label point" function could be provide entirely by
 GEOS?

 Is this the same as the "pole of inaccessibility"? If so, then I'd say
 that would be very welcome in GEOS. However, it couldn't be used in the
 QGIS labeling engine because we need to generate many candidates, not just
 a single one. In fact, a wide geographic spread and coverage of the
 polygon by the candidates is what we most require (As it gives the
 labeling problem solver more options to work with vs a cluster of
 candidates centered around one point).

 The current QGIS algorithm is quite rudimentary, as it just halves the
 grid cell size each iteration until a sufficient number of candidates
 located inside the polygon have been generated. It's on my todo list to
 refine this, likely via a modification of the polylabel algorithm so that
 the grid cells further from the boundary are the most likely to be refined
 when more candidates are required (i.e. complete coverage of the whole
 polygon on the first iteration, then successive iterations give more
 candidates towards the middle of the polygon).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1007#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From nyall.dawson at gmail.com  Sun Dec 22 16:12:39 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 23 Dec 2019 10:12:39 +1000
Subject: [geos-devel] Multithreading and interruption
Message-ID: <CAB28AshSdtj7FLx+_N5iEuA9idCjn0KtWm2dxOV2SD4oT=3X5A@mail.gmail.com>

Hi list,

Am I correct in concluding that GEOS_interruptRequest is only usable
in a single-threaded context? The method doesn't utilise a
GEOSContextHandle_t, and I can't see how GEOS would know which
operation to cancel if multiple operations are in place on different
threads...

Nyall

From lr at pcorp.us  Sun Dec 22 17:03:13 2019
From: lr at pcorp.us (Regina Obe)
Date: Sun, 22 Dec 2019 20:03:13 -0500
Subject: [geos-devel] Multithreading and interruption
In-Reply-To: <CAB28AshSdtj7FLx+_N5iEuA9idCjn0KtWm2dxOV2SD4oT=3X5A@mail.gmail.com>
References: <CAB28AshSdtj7FLx+_N5iEuA9idCjn0KtWm2dxOV2SD4oT=3X5A@mail.gmail.com>
Message-ID: <000101d5b92c$c0ffd930$42ff8b90$@pcorp.us>

I suspect so as I recall I think that was introduced for PostGIS to have interruptable GEOS functions and it uses it single-threadedly.

Sandro is that right or did you envision some other use?

Thanks,
Regina

-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Nyall Dawson
Sent: Sunday, December 22, 2019 7:13 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: [geos-devel] Multithreading and interruption

Hi list,

Am I correct in concluding that GEOS_interruptRequest is only usable in a single-threaded context? The method doesn't utilise a GEOSContextHandle_t, and I can't see how GEOS would know which operation to cancel if multiple operations are in place on different threads...

Nyall
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel


From strk at kbt.io  Fri Dec 27 05:37:58 2019
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 27 Dec 2019 14:37:58 +0100
Subject: [geos-devel] Multithreading and interruption
In-Reply-To: <CAB28AshSdtj7FLx+_N5iEuA9idCjn0KtWm2dxOV2SD4oT=3X5A@mail.gmail.com>
References: <CAB28AshSdtj7FLx+_N5iEuA9idCjn0KtWm2dxOV2SD4oT=3X5A@mail.gmail.com>
Message-ID: <20191227133758.GC4992@liz>

On Mon, Dec 23, 2019 at 10:12:39AM +1000, Nyall Dawson wrote:
> Hi list,
> 
> Am I correct in concluding that GEOS_interruptRequest is only usable
> in a single-threaded context? The method doesn't utilise a
> GEOSContextHandle_t, and I can't see how GEOS would know which
> operation to cancel if multiple operations are in place on different
> threads...

Yes, interruption requests are per-process, so multiple threads would
_all_ be interrupted. Interruption is done at low level, and low level
classes do not really have that "context" object handle, so this won't
change unless a big refactoring is undertaken.

--strk;

From nyall.dawson at gmail.com  Sun Dec 29 21:40:40 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 30 Dec 2019 15:40:40 +1000
Subject: [geos-devel] Multithreading and interruption
In-Reply-To: <20191227133758.GC4992@liz>
References: <CAB28AshSdtj7FLx+_N5iEuA9idCjn0KtWm2dxOV2SD4oT=3X5A@mail.gmail.com>
 <20191227133758.GC4992@liz>
Message-ID: <CAB28Asgnv85T61NDvzxEj3k9mwsjoqqaW387KOoJkq8cr7Eq_w@mail.gmail.com>

On Fri, 27 Dec 2019 at 23:38, Sandro Santilli <strk at kbt.io> wrote:
>
> On Mon, Dec 23, 2019 at 10:12:39AM +1000, Nyall Dawson wrote:
> > Hi list,
> >
> > Am I correct in concluding that GEOS_interruptRequest is only usable
> > in a single-threaded context? The method doesn't utilise a
> > GEOSContextHandle_t, and I can't see how GEOS would know which
> > operation to cancel if multiple operations are in place on different
> > threads...
>
> Yes, interruption requests are per-process, so multiple threads would
> _all_ be interrupted. Interruption is done at low level, and low level
> classes do not really have that "context" object handle, so this won't
> change unless a big refactoring is undertaken.

Thanks for the confirmation Sandro!

Nyall

