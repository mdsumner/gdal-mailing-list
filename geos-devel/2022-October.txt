From pramsey at cleverelephant.ca  Mon Oct  3 08:14:07 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 3 Oct 2022 08:14:07 -0700
Subject: [geos-devel] Stepping down from PSC chair
In-Reply-To: <Yy3+77/Oks+0MltI@c19>
References: <Yy30Am+a6JNgRhdk@c19> <000901d8cf7a$61939010$24bab030$@pcorp.us>
 <Yy3+77/Oks+0MltI@c19>
Message-ID: <EB0B6778-28F9-4E41-98DE-1F7B118543D2@cleverelephant.ca>

Since we still "need" to have a PSC per our OSGeo project membership and since Regina says I "have to to it" (paraphrase) I'm putting my name forward.

Thanks to Sandro for his decades of service! 

I think in general, conversation on the mailing list is great, better than votes / moves. Let people know you have plans maybe / preferably before making big PR-sized contributions. If it's scary enough, the converstaion might lead to an RFC. Or maybe the whole thing just resolves on emails. I do like emails. I am old.

ATB,
P

> On Sep 23, 2022, at 11:46 AM, Sandro Santilli <strk at kbt.io> wrote:
> 
> On Fri, Sep 23, 2022 at 02:29:12PM -0400, Regina Obe wrote:
>> 
>> I just ask for votes when I feel whatever I am thinking of doing could be
>> opposed by many or I myself are not sure it's a good idea, before I waste my
>> time making the change.
> 
> Asking on the mailing list is a great way to know what others
> think about a proposal. Can't express a thought with 2 bits
> (which is what you get with voting).
> 
> -strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Mon Oct  3 08:16:07 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 3 Oct 2022 11:16:07 -0400
Subject: [geos-devel] Stepping down from PSC chair
In-Reply-To: <EB0B6778-28F9-4E41-98DE-1F7B118543D2@cleverelephant.ca>
References: <Yy30Am+a6JNgRhdk@c19> <000901d8cf7a$61939010$24bab030$@pcorp.us>
 <Yy3+77/Oks+0MltI@c19>
 <EB0B6778-28F9-4E41-98DE-1F7B118543D2@cleverelephant.ca>
Message-ID: <002d01d8d73b$105492d0$30fdb870$@pcorp.us>

Thank you, Thank you :)


> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Paul Ramsey
> Sent: Monday, October 3, 2022 11:14 AM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] Stepping down from PSC chair
> 
> Since we still "need" to have a PSC per our OSGeo project membership and
> since Regina says I "have to to it" (paraphrase) I'm putting my name
forward.
> 
> Thanks to Sandro for his decades of service!
> 
> I think in general, conversation on the mailing list is great, better than
votes /
> moves. Let people know you have plans maybe / preferably before making big
> PR-sized contributions. If it's scary enough, the converstaion might lead
to an
> RFC. Or maybe the whole thing just resolves on emails. I do like emails. I
am
> old.
> 
> ATB,
> P
> 
> > On Sep 23, 2022, at 11:46 AM, Sandro Santilli <strk at kbt.io> wrote:
> >
> > On Fri, Sep 23, 2022 at 02:29:12PM -0400, Regina Obe wrote:
> >>
> >> I just ask for votes when I feel whatever I am thinking of doing
> >> could be opposed by many or I myself are not sure it's a good idea,
> >> before I waste my time making the change.
> >
> > Asking on the mailing list is a great way to know what others think
> > about a proposal. Can't express a thought with 2 bits (which is what
> > you get with voting).
> >
> > -strk;
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From strk at kbt.io  Mon Oct  3 14:07:07 2022
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 3 Oct 2022 23:07:07 +0200
Subject: [geos-devel] Stepping down from PSC chair
In-Reply-To: <EB0B6778-28F9-4E41-98DE-1F7B118543D2@cleverelephant.ca>
References: <Yy30Am+a6JNgRhdk@c19> <000901d8cf7a$61939010$24bab030$@pcorp.us>
 <Yy3+77/Oks+0MltI@c19>
 <EB0B6778-28F9-4E41-98DE-1F7B118543D2@cleverelephant.ca>
Message-ID: <20221003210707.n72ojjigqf3iwpf2@c19>

On Mon, Oct 03, 2022 at 08:14:07AM -0700, Paul Ramsey wrote:
> Since we still "need" to have a PSC per our OSGeo project membership and since Regina says I "have to to it" (paraphrase) I'm putting my name forward.
> 
> Thanks to Sandro for his decades of service! 
> 
> I think in general, conversation on the mailing list is great, better than votes / moves. Let people know you have plans maybe / preferably before making big PR-sized contributions. If it's scary enough, the converstaion might lead to an RFC. Or maybe the whole thing just resolves on emails. I do like emails. I am old.

Thanks for stepping up, and for being old !

--strk;

From dbaston at gmail.com  Tue Oct  4 08:15:03 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Tue, 4 Oct 2022 11:15:03 -0400
Subject: [geos-devel] CoordinateArraySequence == CoordinateSequence
In-Reply-To: <CAO9vTOy1bWe7JZ8-pRsv3XUmEvt7u0UQ80W5iOs3UGiZDkwehA@mail.gmail.com>
References: <D8E82846-DDEA-4A1A-882F-65DB526A31A5@cleverelephant.ca>
 <CA+K_q_q0O=+WP0F=Wa5i3Ghmzq0v_0X52QYnqhhGD62RS58CPA@mail.gmail.com>
 <CAO9vTOy1bWe7JZ8-pRsv3XUmEvt7u0UQ80W5iOs3UGiZDkwehA@mail.gmail.com>
Message-ID: <CA+K_q_qrAomWPvWTYfJhVdqOvpk-tWq-Tr6B1AHhLVEueRF68A@mail.gmail.com>

 GEOS is pretty tied to the interleaved representation. LIke JTS, it uses
Coordinate struct to pass around coordinates, with fields for X, Y, and Z
values. If we wanted to support a separate-array representation, we'd
either need to either change our Coordinate struct to store pointers to the
X and Y values, or remove the Coordinate struct altogether and have
algorithms ask a CoordinateSequence for X and Y values directly. Both seem
like a large effort to eliminate the first of what is likely several copies.

That said, an updated CoordinateSequence could still bring about more
incremental improvements in this space:
- Eliminating the virtual function overhead of coordinate access (this is
what the linked PR does)
- Allowing the use of an external buffer instead of the one managed by
std::vector, so we could have a zero-copy method of bringing data into GEOS
from an interleaved buffer
- Making Coordinate a bit more generic, so we could avoid storing the Z
value (or requiring it in an external buffer) in the cases where we don't
want it.

Dan

On Thu, Sep 29, 2022 at 11:38 AM Joris Van den Bossche <
jorisvandenbossche at gmail.com> wrote:

> We are currently having a discussion about interleaved (XYXY) vs separate
> arrays (XX YY) in the GeoArrow context (
> https://github.com/geopandas/geo-arrow-spec/pull/26), and I was wondering
> if the GEOS developers have thoughts on that topic (whether it was ever
> specifically discussed if the current approach of CoordinateArraySequence
> to store all dimensions interleaved is the best option for GEOS or if
> separate arrays could be considered as well). But so the above already
> touches upon that topic, and I also noticed related discussion at
> https://github.com/libgeos/geos/pull/674#issuecomment-1245741058
>
> In general, from the Shapely/GeoPandas side, we are certainly interested
> in being able to create CoordinateSequences zero-copy from arrays of
> coordinates (the current GEOSCoordSeq_copyFromBuffer_r et al already helps
> a lot though, although it would be nice if it could use a single memcpy for
> 2D as well (related to underlying memory storage above) or even avoid this
> one memcpy).
>
> Best,
> Joris
>
> On Wed, 24 Aug 2022 at 13:50, Daniel Baston <dbaston at gmail.com> wrote:
>
>> This has come up a few times and despite some pushback from users [1] I
>> agree that the benefits of the simplification probably outweigh the costs.
>> Replacing CoordinateSequence with a concrete implementation is top on my
>> list for the GDAL grant work [2] that I will be available to begin on
>> September 1. My general plan was to
>>
>> 1. Replace CoordinateSequence with CoordinateArraySequence and check
>> performance improvement. Even without algorithmic improvements like the
>> ones you're talking about, I would expect that devirtualizating Coordinate
>> access, and the consequent enabling of inlining, will provide a good
>> benefit across the board.
>> 2. Replace CoordinateArraySequence with a class backed by a buffer of
>> doubles to support future generalization of Coordinate dimension. This may
>> also allow us to offer zero-copy to clients that happen to use an XYXY
>> representation internally (PostGIS)
>> 3. Experiment with a union or std::variant to sneak in an optimized
>> stack-only implementation for Points
>>
>> I do wonder if our embrace of XYXY is the best choice here and if XXYY
>> would enable vectorization in some cases. That would be a pretty invasive
>> experiment to perform across the whole library, but maybe we could look at
>> something like OrientationIndex in isolation.
>>
>> Dan
>>
>> [1] https://github.com/libgeos/geos/issues/564
>> [2] https://lists.osgeo.org/pipermail/geos-devel/2022-March/010672.html
>>
>> On Tue, Aug 23, 2022 at 3:22 PM Paul Ramsey <pramsey at cleverelephant.ca>
>> wrote:
>>
>>> One of the things that tinkering with the SegmenString layer of overlay
>>> brought out to me was the extent to which we construct CoordinateSequence
>>> almost exclusively out of CoordinateArraySequence. Like, all the time. At
>>> yet, because we handle those CoordinateArraySequence at the API level
>>> almost exclusively as  CoordinateSequence we lose the ability to do some
>>> handy optimizations.
>>>
>>> Like, if one were going to (as one does on every single
>>> CoordinateSequence that enters the overlay code)
>>> (1) test if there are repeated points and
>>> (2a) remove any if there are
>>> (2b) just return the untouched CoordinateSequence if there aren't
>>> a useful pattern would be for ::hasRepeatedPoints() to return/populate a
>>> list of indexes at which repeated points appear and for
>>> ::removeRepeatedPoints() to do bulk copies of all the points in between
>>> those indexes. This is foreclosed by the CoordinateSequence API, you can
>>> play this trick nicely with a std::vector living underneath, but the API
>>> doesn't let us see that (in fact) that's what we have 99.9% of the time.
>>>
>>> So, one obvious thing to do would be to remove the virtual methods in
>>> CoordinateSequence and pull the implementation up to that level,
>>> std::vector and all, and give up on the idea of an abstract interface that
>>> we don't actually use. For a handful of use cases, where data access cost
>>> is greater than computation cost (area, length, distance(?), some others
>>> (?)) this might be "bad" in some theoretical way, but note that currently
>>> we still don't actually have that abstract layer in place for a zero copy
>>> computation. Removing the virtual methods and inheritance from
>>> CoordinateSequence would foreclose an option that (a) we seem unlikely to
>>> ever deliver on and (b) has narrow performance benefits even if we did
>>> deliver on it.
>>>
>>> Meanwhile, the flip case seems to likely have a *lot* of performance
>>> benefits just hanging around waiting to be harvested. Coordinate access
>>> without going through the inheritance structure; access to some bulk
>>> operations like the repeated points case.
>>>
>>> For the "zero copy" crew, I feel like a big chunk of gains for them
>>> could be harvested by ensuring that point-based operations are available
>>> and don't require construction of a full Point() object. So things like
>>> PreparedGeometry->intersects(x, y). Sure, you still have to copy in your
>>> polygon feature and prepare it, but much of the overhead in that would
>>> still exist in a "zero copy" paradigm (all the internal index buildings).
>>> Meanwhile you'd no longer need to create a full Point() to do a
>>> point-in-poly test, and that would hopefully be a big win for most users.
>>>
>>> Random thoughs on a sunny day,
>>> P
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221004/e487d5c0/attachment.htm>

From howard at hobu.co  Wed Oct  5 07:20:57 2022
From: howard at hobu.co (Howard Butler)
Date: Wed, 5 Oct 2022 09:20:57 -0500
Subject: [geos-devel] CoordinateArraySequence == CoordinateSequence
In-Reply-To: <CA+K_q_qrAomWPvWTYfJhVdqOvpk-tWq-Tr6B1AHhLVEueRF68A@mail.gmail.com>
References: <D8E82846-DDEA-4A1A-882F-65DB526A31A5@cleverelephant.ca>
 <CA+K_q_q0O=+WP0F=Wa5i3Ghmzq0v_0X52QYnqhhGD62RS58CPA@mail.gmail.com>
 <CAO9vTOy1bWe7JZ8-pRsv3XUmEvt7u0UQ80W5iOs3UGiZDkwehA@mail.gmail.com>
 <CA+K_q_qrAomWPvWTYfJhVdqOvpk-tWq-Tr6B1AHhLVEueRF68A@mail.gmail.com>
Message-ID: <D5C2CC6C-F375-445C-9B99-7294E81EB2FF@hobu.co>



> On Oct 4, 2022, at 10:15 AM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> - Allowing the use of an external buffer instead of the one managed by std::vector, so we could have a zero-copy method of bringing data into GEOS from an interleaved buffer

This. 

In PDAL's (albeit unusual) usage, we pass through millions of points to do things like point-in-poly. Changing/copying data to fit GEOS' data arrangement starts to get really expensive, and for PDAL, we ended up doing our own PiP implementation because of it.

GEOS has come a long way recently thanks to your efforts in expressing interfaces and behavior that are more like C++. If we could go just. a. little. further. to implement stuff like this, there would be some pleasant downstream wins by applications that can take advantage of it. 

Howard

PS. *cough* custom allocators? *cough*


From jorisvandenbossche at gmail.com  Wed Oct  5 09:11:50 2022
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Wed, 5 Oct 2022 18:11:50 +0200
Subject: [geos-devel] CoordinateArraySequence == CoordinateSequence
In-Reply-To: <CA+K_q_qrAomWPvWTYfJhVdqOvpk-tWq-Tr6B1AHhLVEueRF68A@mail.gmail.com>
References: <D8E82846-DDEA-4A1A-882F-65DB526A31A5@cleverelephant.ca>
 <CA+K_q_q0O=+WP0F=Wa5i3Ghmzq0v_0X52QYnqhhGD62RS58CPA@mail.gmail.com>
 <CAO9vTOy1bWe7JZ8-pRsv3XUmEvt7u0UQ80W5iOs3UGiZDkwehA@mail.gmail.com>
 <CA+K_q_qrAomWPvWTYfJhVdqOvpk-tWq-Tr6B1AHhLVEueRF68A@mail.gmail.com>
Message-ID: <CAO9vTOwdMfZ2Ta916b19=n06O0xvSCe4XW+tp+rFmkQSVeMxBQ@mail.gmail.com>

Thanks for the context!

On Tue, 4 Oct 2022 at 17:17, Daniel Baston <dbaston at gmail.com> wrote:

> GEOS is pretty tied to the interleaved representation. LIke JTS, it uses
> Coordinate struct to pass around coordinates, with fields for X, Y, and Z
> values. If we wanted to support a separate-array representation, we'd
> either need to either change our Coordinate struct to store pointers to the
> X and Y values, or remove the Coordinate struct altogether and have
> algorithms ask a CoordinateSequence for X and Y values directly. Both seem
> like a large effort to eliminate the first of what is likely several copies.
>
> That said, an updated CoordinateSequence could still bring about more
> incremental improvements in this space:
> - Eliminating the virtual function overhead of coordinate access (this is
> what the linked PR does)
> - Allowing the use of an external buffer instead of the one managed by
> std::vector, so we could have a zero-copy method of bringing data into GEOS
> from an interleaved buffer
> - Making Coordinate a bit more generic, so we could avoid storing the Z
> value (or requiring it in an external buffer) in the cases where we don't
> want it.
>

I think this last point would certainly be useful indeed. For example with
GEOSCoordSeq_copyFromBuffer, this currently can only use the single-memcpy
case if you have z coordinates. It would be useful to have an efficient
version for the 2D case as well.
I am currently working on an implementation to convert an array of
geometries in GeoArrow format to an array of GEOSGeometries, and even with
the single copy, this copyFromBuffer is what takes the most time. So to
repeat what Howard also just answered, allowing to create a
CoordinateSequence from a buffer without copying would be very useful. But
for this to be useful, such zero-copy option should ideally also work for
2D data, and not require a buffer including z values.

Joris


>
> Dan
>
> On Thu, Sep 29, 2022 at 11:38 AM Joris Van den Bossche <
> jorisvandenbossche at gmail.com> wrote:
>
>> We are currently having a discussion about interleaved (XYXY) vs separate
>> arrays (XX YY) in the GeoArrow context (
>> https://github.com/geopandas/geo-arrow-spec/pull/26), and I was
>> wondering if the GEOS developers have thoughts on that topic (whether it
>> was ever specifically discussed if the current approach of
>> CoordinateArraySequence to store all dimensions interleaved is the best
>> option for GEOS or if separate arrays could be considered as well). But so
>> the above already touches upon that topic, and I also noticed related
>> discussion at
>> https://github.com/libgeos/geos/pull/674#issuecomment-1245741058
>>
>> In general, from the Shapely/GeoPandas side, we are certainly interested
>> in being able to create CoordinateSequences zero-copy from arrays of
>> coordinates (the current GEOSCoordSeq_copyFromBuffer_r et al already helps
>> a lot though, although it would be nice if it could use a single memcpy for
>> 2D as well (related to underlying memory storage above) or even avoid this
>> one memcpy).
>>
>> Best,
>> Joris
>>
>> On Wed, 24 Aug 2022 at 13:50, Daniel Baston <dbaston at gmail.com> wrote:
>>
>>> This has come up a few times and despite some pushback from users [1] I
>>> agree that the benefits of the simplification probably outweigh the costs.
>>> Replacing CoordinateSequence with a concrete implementation is top on my
>>> list for the GDAL grant work [2] that I will be available to begin on
>>> September 1. My general plan was to
>>>
>>> 1. Replace CoordinateSequence with CoordinateArraySequence and check
>>> performance improvement. Even without algorithmic improvements like the
>>> ones you're talking about, I would expect that devirtualizating Coordinate
>>> access, and the consequent enabling of inlining, will provide a good
>>> benefit across the board.
>>> 2. Replace CoordinateArraySequence with a class backed by a buffer of
>>> doubles to support future generalization of Coordinate dimension. This may
>>> also allow us to offer zero-copy to clients that happen to use an XYXY
>>> representation internally (PostGIS)
>>> 3. Experiment with a union or std::variant to sneak in an optimized
>>> stack-only implementation for Points
>>>
>>> I do wonder if our embrace of XYXY is the best choice here and if XXYY
>>> would enable vectorization in some cases. That would be a pretty invasive
>>> experiment to perform across the whole library, but maybe we could look at
>>> something like OrientationIndex in isolation.
>>>
>>> Dan
>>>
>>> [1] https://github.com/libgeos/geos/issues/564
>>> [2] https://lists.osgeo.org/pipermail/geos-devel/2022-March/010672.html
>>>
>>> On Tue, Aug 23, 2022 at 3:22 PM Paul Ramsey <pramsey at cleverelephant.ca>
>>> wrote:
>>>
>>>> One of the things that tinkering with the SegmenString layer of overlay
>>>> brought out to me was the extent to which we construct CoordinateSequence
>>>> almost exclusively out of CoordinateArraySequence. Like, all the time. At
>>>> yet, because we handle those CoordinateArraySequence at the API level
>>>> almost exclusively as  CoordinateSequence we lose the ability to do some
>>>> handy optimizations.
>>>>
>>>> Like, if one were going to (as one does on every single
>>>> CoordinateSequence that enters the overlay code)
>>>> (1) test if there are repeated points and
>>>> (2a) remove any if there are
>>>> (2b) just return the untouched CoordinateSequence if there aren't
>>>> a useful pattern would be for ::hasRepeatedPoints() to return/populate
>>>> a list of indexes at which repeated points appear and for
>>>> ::removeRepeatedPoints() to do bulk copies of all the points in between
>>>> those indexes. This is foreclosed by the CoordinateSequence API, you can
>>>> play this trick nicely with a std::vector living underneath, but the API
>>>> doesn't let us see that (in fact) that's what we have 99.9% of the time.
>>>>
>>>> So, one obvious thing to do would be to remove the virtual methods in
>>>> CoordinateSequence and pull the implementation up to that level,
>>>> std::vector and all, and give up on the idea of an abstract interface that
>>>> we don't actually use. For a handful of use cases, where data access cost
>>>> is greater than computation cost (area, length, distance(?), some others
>>>> (?)) this might be "bad" in some theoretical way, but note that currently
>>>> we still don't actually have that abstract layer in place for a zero copy
>>>> computation. Removing the virtual methods and inheritance from
>>>> CoordinateSequence would foreclose an option that (a) we seem unlikely to
>>>> ever deliver on and (b) has narrow performance benefits even if we did
>>>> deliver on it.
>>>>
>>>> Meanwhile, the flip case seems to likely have a *lot* of performance
>>>> benefits just hanging around waiting to be harvested. Coordinate access
>>>> without going through the inheritance structure; access to some bulk
>>>> operations like the repeated points case.
>>>>
>>>> For the "zero copy" crew, I feel like a big chunk of gains for them
>>>> could be harvested by ensuring that point-based operations are available
>>>> and don't require construction of a full Point() object. So things like
>>>> PreparedGeometry->intersects(x, y). Sure, you still have to copy in your
>>>> polygon feature and prepare it, but much of the overhead in that would
>>>> still exist in a "zero copy" paradigm (all the internal index buildings).
>>>> Meanwhile you'd no longer need to create a full Point() to do a
>>>> point-in-poly test, and that would hopefully be a big win for most users.
>>>>
>>>> Random thoughs on a sunny day,
>>>> P
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221005/56de52f5/attachment.htm>

From mtnclimb at gmail.com  Wed Oct  5 11:04:43 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 5 Oct 2022 11:04:43 -0700
Subject: [geos-devel] CoordinateArraySequence == CoordinateSequence
In-Reply-To: <D5C2CC6C-F375-445C-9B99-7294E81EB2FF@hobu.co>
References: <D8E82846-DDEA-4A1A-882F-65DB526A31A5@cleverelephant.ca>
 <CA+K_q_q0O=+WP0F=Wa5i3Ghmzq0v_0X52QYnqhhGD62RS58CPA@mail.gmail.com>
 <CAO9vTOy1bWe7JZ8-pRsv3XUmEvt7u0UQ80W5iOs3UGiZDkwehA@mail.gmail.com>
 <CA+K_q_qrAomWPvWTYfJhVdqOvpk-tWq-Tr6B1AHhLVEueRF68A@mail.gmail.com>
 <D5C2CC6C-F375-445C-9B99-7294E81EB2FF@hobu.co>
Message-ID: <CAK2ens3jbPfh30VDGcx8xAHy8F9ii5UeO-=6kMPJ_-qN5_BhYw@mail.gmail.com>

On Wed, Oct 5, 2022 at 7:56 AM Howard Butler <howard at hobu.co> wrote:

> In PDAL's (albeit unusual) usage, we pass through millions of points to do
> things like point-in-poly. Changing/copying data to fit GEOS' data
> arrangement starts to get really expensive, and for PDAL, we ended up doing
> our own PiP implementation because of it.
>

Does the new GEOSPrepared_<pred>_XY functions solve the PDAL PIP
performance problem?

https://github.com/libgeos/geos/pull/677
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221005/1d119dc8/attachment-0001.htm>

From even.rouault at spatialys.com  Tue Oct 18 09:55:05 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 18 Oct 2022 18:55:05 +0200
Subject: [geos-devel] (Much) faster intersection of convex quadrilaterals
Message-ID: <e4d04c62-e0ea-7652-c549-fbc25d408d94@spatialys.com>

Hi,

While improving the sum resampling method of gdalwarp, to make it really 
preserve the sums of pixel values accross the whole raster, I need to do 
a lot of intersections of polygons, and get the area of the 
intersection. Typically this involves 4 intersections for each target 
pixel in a reprojection scenario not modifying the resolution. You 
intersect the reprojected shape of each contributing source pixel in 
target pixel coordinates with the shape of the target pixel. And they 
are just intersections of convex quadrilaterals.

My first try was with GEOSIntersects_r() and I had the feeling that the 
result was quite slow compared to what I felt could be the optimum, 
especially when looking at the stack trace which is quite deep, like ~ 
15 nested calls inside GEOS, memory allocations, etc.

I've coded a specialized getConvexPolyIntersection() function in 
https://gist.github.com/rouault/e6a4cfa5952ad1c7601e254b0d25cc5a and it 
is ~ 70 times faster than going through GEOS (tested against latest GEOS 
master). I may have missed a few edge cases, and the O(N^2) complexity 
of the algorithm probably makes it appropriate for very small polygons 
(*), but perhaps there's some potential to improve GEOSIntersects for 
such simple cases. Or offering a dedicated API.

Note: for my use case, the convex property is met in nearly all cases, 
and in the unlikely event where one quadrilateral isn't convex, I can 
just split it into 2 triangles, and fallback doing 2 intersections (one 
of the quadrilateral - the target pixel - is always convex, actually a 
square).

Even

(*) 
https://tildesites.bowdoin.edu/~ltoma/teaching/cs3250-CompGeom/spring17/Lectures/cg-convexintersection.pdf 
presents an algorithm for convex polygon intersection with O(N1+N2) 
complexity.

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From mtnclimb at gmail.com  Tue Oct 18 11:52:21 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 18 Oct 2022 11:52:21 -0700
Subject: [geos-devel] (Much) faster intersection of convex quadrilaterals
In-Reply-To: <e4d04c62-e0ea-7652-c549-fbc25d408d94@spatialys.com>
References: <e4d04c62-e0ea-7652-c549-fbc25d408d94@spatialys.com>
Message-ID: <CAK2ens3DM9V6tzpDTmCt9jVgx+g2d7ZwKv=L+TH1ecw8V+kQwg@mail.gmail.com>

An interesting idea for sure.

Do you need only the area of the intersection?  If so, perhaps the
"area-only overlay" idea of William Franklin [1] would provide an even
faster/simpler implementation?

I have a prototype implementation of this in JTS.  One advantage might be
that it will work for any polygons, although will only be really efficient
for smaller/simpler polygons. It would be worth investigating how fast an
implementation for low-vertex-count polygons would be (i.e that would using
simple loops rather than indexed structures)

[1] https://wrfranklin.org/nikola/pubdetails/f-cmopa-90.html

On Tue, Oct 18, 2022 at 9:55 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi,
>
> While improving the sum resampling method of gdalwarp, to make it really
> preserve the sums of pixel values accross the whole raster, I need to do
> a lot of intersections of polygons, and get the area of the
> intersection. Typically this involves 4 intersections for each target
> pixel in a reprojection scenario not modifying the resolution. You
> intersect the reprojected shape of each contributing source pixel in
> target pixel coordinates with the shape of the target pixel. And they
> are just intersections of convex quadrilaterals.
>
> My first try was with GEOSIntersects_r() and I had the feeling that the
> result was quite slow compared to what I felt could be the optimum,
> especially when looking at the stack trace which is quite deep, like ~
> 15 nested calls inside GEOS, memory allocations, etc.
>
> I've coded a specialized getConvexPolyIntersection() function in
> https://gist.github.com/rouault/e6a4cfa5952ad1c7601e254b0d25cc5a and it
> is ~ 70 times faster than going through GEOS (tested against latest GEOS
> master). I may have missed a few edge cases, and the O(N^2) complexity
> of the algorithm probably makes it appropriate for very small polygons
> (*), but perhaps there's some potential to improve GEOSIntersects for
> such simple cases. Or offering a dedicated API.
>
> Note: for my use case, the convex property is met in nearly all cases,
> and in the unlikely event where one quadrilateral isn't convex, I can
> just split it into 2 triangles, and fallback doing 2 intersections (one
> of the quadrilateral - the target pixel - is always convex, actually a
> square).
>
> Even
>
> (*)
>
> https://tildesites.bowdoin.edu/~ltoma/teaching/cs3250-CompGeom/spring17/Lectures/cg-convexintersection.pdf
> presents an algorithm for convex polygon intersection with O(N1+N2)
> complexity.
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221018/59544759/attachment.htm>

From even.rouault at spatialys.com  Tue Oct 18 12:09:19 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 18 Oct 2022 21:09:19 +0200
Subject: [geos-devel] (Much) faster intersection of convex quadrilaterals
In-Reply-To: <CAK2ens3DM9V6tzpDTmCt9jVgx+g2d7ZwKv=L+TH1ecw8V+kQwg@mail.gmail.com>
References: <e4d04c62-e0ea-7652-c549-fbc25d408d94@spatialys.com>
 <CAK2ens3DM9V6tzpDTmCt9jVgx+g2d7ZwKv=L+TH1ecw8V+kQwg@mail.gmail.com>
Message-ID: <10a7a53c-9f04-d804-4256-208abba055a8@spatialys.com>

Le 18/10/2022 ? 20:52, Martin Davis a ?crit?:
> An interesting idea for sure.
>
> Do you need only the area of the intersection?

Yes.

-- 

http://www.spatialys.com
My software is free, but my time generally not.


From lr at pcorp.us  Fri Oct 21 07:35:22 2022
From: lr at pcorp.us (Regina Obe)
Date: Fri, 21 Oct 2022 10:35:22 -0400
Subject: [geos-devel] GEOS 3.12 regression failure in PostGIS
Message-ID: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>

Hi all,

PostGIS geos310 regression test, detailed here:

https://trac.osgeo.org/postgis/ticket/5260

Started failing around October 18th.

The test is this:
SELECT '#168', ST_NPoints(g), ST_AsText(g), ST_isValidReason(g)
FROM ( VALUES
('01060000C00100000001030000C00100000003000000E3D9107E234F5041A3DB66BC97A30F
4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440D
AF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFF
FFFFFFEFFF'::geometry)
) AS v(g);


I'm guessing might be caused by this commit -
https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4a
b40 
which happened around the same time tests started failing.

The difference from prior versions is that the 3.12 (main branch) now emits
for isValidReason one less coordinate

Too few points in geometry component[4275341.96977851 259186.966993061]

Instead of:
Too few points in geometry component[4275341.96977851 259186.966993061
1323.76295828331]


Which to me makes sense if we are only considering 2 dimensions for
validity.

Before I change the test, I want to confirm that this is an intentional
change.

Thanks,
Regina




From dbaston at gmail.com  Fri Oct 21 08:52:12 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 21 Oct 2022 11:52:12 -0400
Subject: [geos-devel] GEOS 3.12 regression failure in PostGIS
In-Reply-To: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>
References: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>
Message-ID: <CA+K_q_r4NTgSS-bSSz0+8pUvQsC=XHHMXGH6TBK9t1egK64UjA@mail.gmail.com>

It's not intentional. I will fix it in GEOS and add a test there. You might
consider removing the PostGIS test because it's only testing GEOS behavior.

Dan

On Fri, Oct 21, 2022 at 10:35 AM Regina Obe <lr at pcorp.us> wrote:

> Hi all,
>
> PostGIS geos310 regression test, detailed here:
>
> https://trac.osgeo.org/postgis/ticket/5260
>
> Started failing around October 18th.
>
> The test is this:
> SELECT '#168', ST_NPoints(g), ST_AsText(g), ST_isValidReason(g)
> FROM ( VALUES
>
> ('01060000C00100000001030000C00100000003000000E3D9107E234F5041A3DB66BC97A30F
>
> 4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440D
>
> AF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFF
> FFFFFFEFFF'::geometry)
> ) AS v(g);
>
>
> I'm guessing might be caused by this commit -
>
> https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4a
> b40
> <https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4ab40>
> which happened around the same time tests started failing.
>
> The difference from prior versions is that the 3.12 (main branch) now emits
> for isValidReason one less coordinate
>
> Too few points in geometry component[4275341.96977851 259186.966993061]
>
> Instead of:
> Too few points in geometry component[4275341.96977851 259186.966993061
> 1323.76295828331]
>
>
> Which to me makes sense if we are only considering 2 dimensions for
> validity.
>
> Before I change the test, I want to confirm that this is an intentional
> change.
>
> Thanks,
> Regina
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221021/f0e7b470/attachment.htm>

From geos-trac at osgeo.org  Fri Oct 21 09:25:41 2022
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 21 Oct 2022 16:25:41 -0000
Subject: [geos-devel] [GEOS] #540: C-API: Allow passing custom memory
 managment functions
In-Reply-To: <042.82cb26dac31cdafca02d44bda212dad4@osgeo.org>
References: <042.82cb26dac31cdafca02d44bda212dad4@osgeo.org>
Message-ID: <057.49adddd3fb9a016bcda810726f27592d@osgeo.org>

#540: C-API: Allow passing custom memory managment functions
-------------------------+---------------------------
 Reporter:  strk         |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  closed
 Priority:  minor        |   Milestone:  GEOS Fund Me
Component:  Default      |     Version:  main
 Severity:  Unassigned   |  Resolution:  duplicate
 Keywords:               |
-------------------------+---------------------------
Changes (by dbaston):

 * status:  reopened => closed
 * resolution:   => duplicate

Comment:

 Superseded by https://github.com/libgeos/geos/issues/704
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/540#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From lr at pcorp.us  Fri Oct 21 09:32:58 2022
From: lr at pcorp.us (Regina Obe)
Date: Fri, 21 Oct 2022 12:32:58 -0400
Subject: [geos-devel] GEOS 3.12 regression failure in PostGIS
In-Reply-To: <CA+K_q_r4NTgSS-bSSz0+8pUvQsC=XHHMXGH6TBK9t1egK64UjA@mail.gmail.com>
References: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>
 <CA+K_q_r4NTgSS-bSSz0+8pUvQsC=XHHMXGH6TBK9t1egK64UjA@mail.gmail.com>
Message-ID: <002301d8e56a$c7ffbdf0$57ff39d0$@pcorp.us>

Dan,

 

Well if you are going to fix it, less work for me to do nothing :)

So I?ll keep.

 

Thanks for confirming,

Regina

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Daniel Baston
Sent: Friday, October 21, 2022 11:52 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] GEOS 3.12 regression failure in PostGIS

 

It's not intentional. I will fix it in GEOS and add a test there. You might consider removing the PostGIS test because it's only testing GEOS behavior.

 

Dan

 

On Fri, Oct 21, 2022 at 10:35 AM Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

Hi all,

PostGIS geos310 regression test, detailed here:

https://trac.osgeo.org/postgis/ticket/5260

Started failing around October 18th.

The test is this:
SELECT '#168', ST_NPoints(g), ST_AsText(g), ST_isValidReason(g)
FROM ( VALUES
('01060000C00100000001030000C00100000003000000E3D9107E234F5041A3DB66BC97A30F
4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440D
AF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFF
FFFFFFEFFF'::geometry)
) AS v(g);


I'm guessing might be caused by this commit -
https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4a <https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4ab40> 
b40 
which happened around the same time tests started failing.

The difference from prior versions is that the 3.12 (main branch) now emits
for isValidReason one less coordinate

Too few points in geometry component[4275341.96977851 259186.966993061]

Instead of:
Too few points in geometry component[4275341.96977851 259186.966993061
1323.76295828331]


Which to me makes sense if we are only considering 2 dimensions for
validity.

Before I change the test, I want to confirm that this is an intentional
change.

Thanks,
Regina



_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221021/601f312f/attachment.htm>

From mtnclimb at gmail.com  Fri Oct 21 09:48:08 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Fri, 21 Oct 2022 09:48:08 -0700
Subject: [geos-devel] GEOS 3.12 regression failure in PostGIS
In-Reply-To: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>
References: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>
Message-ID: <CAK2ens13xwMnarnLMUTy8HJFX0RQ-EvUZ4dbNsH_yOpOGVr-cg@mail.gmail.com>

Validity is only tested in the XY dimensions.  So it's actually more
appropriate that only the XY value is reported.

On Fri, Oct 21, 2022 at 7:35 AM Regina Obe <lr at pcorp.us> wrote:

> Hi all,
>
> PostGIS geos310 regression test, detailed here:
>
> https://trac.osgeo.org/postgis/ticket/5260
>
> Started failing around October 18th.
>
> The test is this:
> SELECT '#168', ST_NPoints(g), ST_AsText(g), ST_isValidReason(g)
> FROM ( VALUES
>
> ('01060000C00100000001030000C00100000003000000E3D9107E234F5041A3DB66BC97A30F
>
> 4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440D
>
> AF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFF
> FFFFFFEFFF'::geometry)
> ) AS v(g);
>
>
> I'm guessing might be caused by this commit -
>
> https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4a
> b40
> <https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4ab40>
> which happened around the same time tests started failing.
>
> The difference from prior versions is that the 3.12 (main branch) now emits
> for isValidReason one less coordinate
>
> Too few points in geometry component[4275341.96977851 259186.966993061]
>
> Instead of:
> Too few points in geometry component[4275341.96977851 259186.966993061
> 1323.76295828331]
>
>
> Which to me makes sense if we are only considering 2 dimensions for
> validity.
>
> Before I change the test, I want to confirm that this is an intentional
> change.
>
> Thanks,
> Regina
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221021/15e68c66/attachment-0001.htm>

From lr at pcorp.us  Fri Oct 21 10:18:25 2022
From: lr at pcorp.us (Regina Obe)
Date: Fri, 21 Oct 2022 13:18:25 -0400
Subject: [geos-devel] GEOS 3.12 regression failure in PostGIS
In-Reply-To: <CAK2ens13xwMnarnLMUTy8HJFX0RQ-EvUZ4dbNsH_yOpOGVr-cg@mail.gmail.com>
References: <001c01d8e55a$5a898950$0f9c9bf0$@pcorp.us>
 <CAK2ens13xwMnarnLMUTy8HJFX0RQ-EvUZ4dbNsH_yOpOGVr-cg@mail.gmail.com>
Message-ID: <003c01d8e571$215c9390$6415bab0$@pcorp.us>

I?m fine with the behavior changing and agree it makes sense.  Only issue is with it breaking someone?s existing good.  Though I?d doubt if anyone would rely on that as an output, but you never know.

 

I think it?s still good to have a test for it in GEOS to catch these, so it can at least be noted in notes as a breaking change.

 

I?ll take the test out of PostGIS if the behavior is kept in GEOS.

 

Thanks,

Regina

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Martin Davis
Sent: Friday, October 21, 2022 12:48 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] GEOS 3.12 regression failure in PostGIS

 

Validity is only tested in the XY dimensions.  So it's actually more appropriate that only the XY value is reported.

 

On Fri, Oct 21, 2022 at 7:35 AM Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

Hi all,

PostGIS geos310 regression test, detailed here:

https://trac.osgeo.org/postgis/ticket/5260

Started failing around October 18th.

The test is this:
SELECT '#168', ST_NPoints(g), ST_AsText(g), ST_isValidReason(g)
FROM ( VALUES
('01060000C00100000001030000C00100000003000000E3D9107E234F5041A3DB66BC97A30F
4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440D
AF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFF
FFFFFFEFFF'::geometry)
) AS v(g);


I'm guessing might be caused by this commit -
https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4a <https://github.com/libgeos/geos/commit/32348a68c5212c89cfefab46891d2b3aada4ab40> 
b40 
which happened around the same time tests started failing.

The difference from prior versions is that the 3.12 (main branch) now emits
for isValidReason one less coordinate

Too few points in geometry component[4275341.96977851 259186.966993061]

Instead of:
Too few points in geometry component[4275341.96977851 259186.966993061
1323.76295828331]


Which to me makes sense if we are only considering 2 dimensions for
validity.

Before I change the test, I want to confirm that this is an intentional
change.

Thanks,
Regina



_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20221021/251f109c/attachment.htm>

