From geos-trac at osgeo.org  Thu Sep  3 08:47:20 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 03 Sep 2015 15:47:20 -0000
Subject: [geos-devel] [GEOS] #655: Geos make check failure windows XP
	32-bit gcc 4.8.0
In-Reply-To: <042.12b6684cf1559c533e64e4e933130c1f@osgeo.org>
References: <042.12b6684cf1559c533e64e4e933130c1f@osgeo.org>
Message-ID: <057.1719aa43d4d377dc7077a65fe57055c1@osgeo.org>

#655: Geos make check failure windows XP 32-bit gcc 4.8.0
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  GEOS Future
Component:  Default     |     Version:  3.4.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 robe can this be closed ?

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/655#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mika.heiskanen at fmi.fi  Sat Sep  5 06:58:34 2015
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Sat, 5 Sep 2015 16:58:34 +0300
Subject: [geos-devel] Disconnected interior failure?
In-Reply-To: <1434518155.2952.3.camel@fmi.fi>
References: <55717C2F.2000900@fmi.fi> <20150616181103.GA5700@localhost>
	<1434518155.2952.3.camel@fmi.fi>
Message-ID: <55EAF50A.3040200@fmi.fi>

Hello,

After a long busy summer I finally had the time to revisit this
problem, and I'm happy to report that geos got it right. There was an
extra polygon inside the hole which our topology building code did not
handle correctly. Sorry for the noise.

Regards,

Mika Heiskanen / FMI

On 06/17/2015 08:15 AM, Mika Heiskanen wrote:
> No. However, the input set is such that any intersections can occur
> only at vertices. The holes touch at a single vertex, as does
> the exterior with another exterior. I will see if I can reduce
> the problem to a simpler test case.
>
> - Mika
>
> On Tue, 2015-06-16 at 21:11 +0300, Sandro Santilli wrote:
>> Had you checked if the two shell's interior-interior intersection
>> is empty and the boundary-boundary intersection is puntual,
>> with the Relate operation ?
>>
>> --strk;
>>
>> On Fri, Jun 05, 2015 at 01:38:39PM +0300, Mika Heiskanen wrote:
>>> Hi,
>>>
>>> We recently encountered a temperature isoband which GEOS isValidOp
>>> claims is invalid:
>>>
>>>    Interior is disconnected at or near point 16.56825286557833 -6
>>>
>>> The geometry consists of a shell plus two holes. The holes touch at
>>> a single point, but do not touch the shell. The description does not
>>> match to what the ConnectedInteriorTester class reference says:
>>>
>>>     An area Geometry is invalid if the interior is disconnected.
>>>     This can happen if:
>>>
>>>     * one or more holes either form a chain touching the shell
>>>       at two places
>>>     * one or more holes form a ring around a portion of the interior
>>>
>>> I extracted the problematic shell plus the holes from the global data,
>>> and made them temporarily available from http://beta.fmi.fi/geos/
>>>
>>> QGis and MapShaper validators accept the shape made from the WKT
>>> printed by GEOS. Could there be a bug in the GEOS validator?
>>>
>>> Regards,
>>>
>>> Mika Heiskanen / FMI
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>


From geos-trac at osgeo.org  Fri Sep 11 03:50:07 2015
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 11 Sep 2015 10:50:07 -0000
Subject: [geos-devel] [GEOS] #745: finishGEOS() doesn't free the default
 GeometryFactory instance
Message-ID: <045.ce5199ff651c4410192f67763eb61987@osgeo.org>

#745: finishGEOS() doesn't free the default GeometryFactory instance
------------------------+--------------------------
 Reporter:  rouault     |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.5.1
Component:  Default     |    Version:  3.5.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Mostly all in title.

--
Ticket URL: <http://trac.osgeo.org/geos/ticket/745>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Sep 11 03:53:33 2015
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 11 Sep 2015 10:53:33 -0000
Subject: [geos-devel] [GEOS] #745: [PATCH] finishGEOS() doesn't free the
 default GeometryFactory instance (was: finishGEOS() doesn't free the
 default GeometryFactory instance)
In-Reply-To: <045.ce5199ff651c4410192f67763eb61987@osgeo.org>
References: <045.ce5199ff651c4410192f67763eb61987@osgeo.org>
Message-ID: <060.56b08b226b5b3c73cffc306a34e46162@osgeo.org>

#745: [PATCH] finishGEOS() doesn't free the default GeometryFactory instance
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.5.1
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

--
Ticket URL: <http://trac.osgeo.org/geos/ticket/745#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 21 00:18:04 2015
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 21 Sep 2015 07:18:04 -0000
Subject: [geos-devel] [GEOS] #746: GitLab default branch
Message-ID: <045.e06f2fa1252fb7917ee437b161b4a747@osgeo.org>

#746: GitLab default branch
------------------------+--------------------------
 Reporter:  mwtoews     |      Owner:  geos-devel@?
     Type:  task        |     Status:  new
 Priority:  minor       |  Milestone:
Component:  Default     |    Version:  svn-trunk
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Looking at https://gitlab.com/geos/libgeos/branches the default branch is
 `svn-2.1`, showing a default view of GEOS from a decade ago. It should
 ideally be changed to `svn-trunk`. While I can't find any help for GitLab,
 it should probably be similar to [https://help.github.com/articles
 /setting-the-default-branch/ Setting the default branch on GitHub].

 (Issues cannot be added at the GitLab mirror, which is why I'm tracking
 this here.)

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/746>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 21 00:37:53 2015
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 21 Sep 2015 07:37:53 -0000
Subject: [geos-devel] [GEOS] #746: GitLab default branch
In-Reply-To: <045.e06f2fa1252fb7917ee437b161b4a747@osgeo.org>
References: <045.e06f2fa1252fb7917ee437b161b4a747@osgeo.org>
Message-ID: <060.c0762147aa731e121d25ad1769c4b69e@osgeo.org>

#746: GitLab default branch
------------------------+---------------------------
 Reporter:  mwtoews     |       Owner:  geos-devel@?
     Type:  task        |      Status:  closed
 Priority:  minor       |   Milestone:  3.5.1
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed
 * milestone:   => 3.5.1


Comment:

 Default gitlab branch set to trunk, thanks for looking at that new mirror.
 If you want to play with the gitlab CI I'll be happy to add you as a
 gitlab/geos contributor (or what it takes)

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/746#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 21 01:04:14 2015
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 21 Sep 2015 08:04:14 -0000
Subject: [geos-devel] [GEOS] #741: GEOSSimplify() returns empty polygon
 if inner ring dimension < simplify distance
In-Reply-To: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
References: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
Message-ID: <060.bceffa2a382301c21672c7b6578000ee@osgeo.org>

#741: GEOSSimplify() returns empty polygon if inner ring dimension < simplify
distance
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Martin, can you check if this also happens in JTS?

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/741#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From Roger.Bivand at nhh.no  Fri Sep 25 11:03:02 2015
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 25 Sep 2015 20:03:02 +0200
Subject: [geos-devel] Intersection Polygon/Polygon curiosity
Message-ID: <alpine.LFD.2.20.1509251959580.12724@reclus.nhh.no>

Hi,

An oddity has shown up when a toy example is run in R/rgeos and Shapely 
when two polygon geometrycollections are intersected; thread at:

https://stat.ethz.ch/pipermail/r-sig-geo/2015-September/023468.html

With the data as input, GEOSIntersection_r returns the first object 
instead of the intersection. When the coordinates are multiplied by 5, it 
fails with TopologyException: no outgoing dirEdge found ...

Here is the Shapely case (GEOS 3.5.0):

from shapely.wkt import dumps, loads

MyLay = loads("GEOMETRYCOLLECTION (POLYGON ((0.0000000000000000
0.0000000000000000, 0.0000000000000000 1.0000000000000000,
1.0000000000000000 1.0000000000000000, 1.0000000000000000
0.0000000000000000, 0.0000000000000000 0.0000000000000000)), POLYGON
((0.0000000000000000 0.0000000000000000, 1.0000000000000000
0.0000000000000000, 1.0000000000000000 -1.0000000000000000,
0.0000000000000000 -1.0000000000000000, 0.0000000000000000
0.0000000000000000)))")

MyLayl = loads("GEOMETRYCOLLECTION (POLYGON ((0.1000000000000000
0.1000000000000000, 0.1000000000000000 1.1000000000000001,
1.1000000000000001 1.1000000000000001, 1.1000000000000001
0.1000000000000000, 0.1000000000000000 0.1000000000000000)), POLYGON
((0.1000000000000000 0.1000000000000000, 1.1000000000000001
0.1000000000000000, 1.1000000000000001 -0.9000000000000000,
0.1000000000000000 -0.9000000000000000, 0.1000000000000000
0.1000000000000000)))")

merged = MyLay.intersection(MyLayl)

dumps(merged)
'POLYGON ((0.0000000000000000 0.0000000000000000, 0.0000000000000000
1.0000000000000000, 1.0000000000000000 1.0000000000000000,
1.0000000000000000 0.0000000000000000, 1.0000000000000000
-1.0000000000000000, 0.0000000000000000 -1.0000000000000000,
0.0000000000000000 0.0000000000000000))'

merged.equals(MyLay)
True


in R (GEOS 3.5.0):

library(sp)
library(rgeos)
Pol1=rbind(c(0,0),c(0,1),c(1,1),c(1,0),c(0,0))
Pol2=rbind(c(0,0),c(1,0),c(1,-1),c(0,-1),c(0,0))

Pols1=Polygons(list(Polygon(Pol1)),"Pols1")
Pols2=Polygons(list(Polygon(Pol2)),"Pols2")
MyLay=SpatialPolygons(list(Pols1,Pols2))


Pol1l=Pol1+0.1
Pol2l=Pol2+0.1

Pols1l=Polygons(list(Polygon(Pol1l)),"Pols1l")
Pols2l=Polygons(list(Polygon(Pol2l)),"Pols2l")
MyLayl=SpatialPolygons(list(Pols1l,Pols2l))

inter=gIntersection(MyLay,MyLayl)
gEquals(inter, MyLay)

plot(MyLay)
plot(MyLayl,add=TRUE)
plot(inter,col="red",add=TRUE)
writeWKT(MyLay)
writeWKT(MyLayl)

There is a report on the thread of PostGIS not showing the issue, but we 
are checking that the same input data are being used.

Grateful for any input correcting my misunderstanding ...

Roger

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; fax +47 55 95 91 00
e-mail: Roger.Bivand at nhh.no


From geos-trac at osgeo.org  Wed Sep 30 08:55:02 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 30 Sep 2015 15:55:02 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.a5f5eb2eee3390685cfbf94ef0bce0d5@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Sandro: is there an updated patch, or pull request, with the outcome of
 the discussion on the list ?
 I understand you're now using a C wrapper in QGIS to use that
 functionality, are there tests showing how using the precision reduction
 code worked with overlay operations ?

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Wed Sep 30 09:04:24 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 30 Sep 2015 18:04:24 +0200
Subject: [geos-devel] What's the intent of 'assert(!"should never be
 reached")'?
In-Reply-To: <CAOodmJqR6xbrSpzdGBZEjRttCWrNV4gXXwFH4xxP0zLpxpvq+g@mail.gmail.com>
References: <CAOodmJqR6xbrSpzdGBZEjRttCWrNV4gXXwFH4xxP0zLpxpvq+g@mail.gmail.com>
Message-ID: <20150930160424.GA8070@localhost>

On Tue, Jul 07, 2015 at 12:12:54PM -0600, Sean Gillies wrote:
> There are three places in GEOS where this assertion appears
> 
> 
> https://github.com/libgeos/libgeos/blob/c9d94c2ebb68b6b679f03dc7eabebfcd39136def/src/index/strtree/AbstractSTRtree.cpp#L371
> 
> and two them have been tripping up Shapely users on OS X. I've found that
> rebuilding GEOS with --disable-cassert solves the user problems: no assert
> exceptions raised and no other program crashes.
> 
> My question: what is the intent of these statements? If they can be safely
> ignored, as I'm doing, should they not be disabled by default?

Unless you're extending GEOS by subclassing a Boundable, such an
assert would indicate a compile issue.

--strk;

From strk at keybit.net  Wed Sep 30 09:16:03 2015
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 30 Sep 2015 18:16:03 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150114093823.GA5770@localhost>
References: <20150107121910.GC6879@localhost> <54AD2541.8040008@gmail.com>
	<20150107124456.GA15487@localhost> <54AD2F37.8080207@gmail.com>
	<20150107142558.GA15933@localhost> <54AD5548.2040709@gmail.com>
	<20150108113752.GA7420@localhost> <54AE732C.90908@gmail.com>
	<54B4F1AE.3030108@gmail.com> <20150114093823.GA5770@localhost>
Message-ID: <20150930161603.GB8070@localhost>

Sandro, I've been looking at the wrapper you added to QGIS
but from what I read it doesn't seem that the geometry coming out
of GEOSGeometryPrecisionReducer_reduce has an updated PrecisionModel,
which means overlay operations won't be using that new model.

Do you confirm ?

If that's the case, the wrapper doesn't do much more than a
grid-snapping (plus some topological fixes of the snapping),
basically exposing no real management of PrecisionModels...

Are there tests to verify that ?

REF: https://trac.osgeo.org/geos/ticket/713

--strk;

On Wed, Jan 14, 2015 at 10:38:23AM +0100, Sandro Santilli wrote:
> On Tue, Jan 13, 2015 at 11:21:34AM +0100, Sandro Mani wrote:
> > 
> > On 08.01.2015 13:08, Sandro Mani wrote:
> > >So to wrap up, things currently look as follows (which I actually
> > >think is quite neat!):
> > >
> > >
> > >/** GEOSContextHandle_t internally keeps a reference count, set to
> > >1 on creation
> > > * - *All* methods producing a GEOSGeom increase the reference count
> > > * - GEOSGeom_destroy decreses the GeometryFactory reference
> > >count, if 0, it destroys the context
> > > * - finishGEOS_r decreses the reference count, if 0, it destroys
> > >the context
> > > */
> > >
> > >/** GEOSGeom_clone() clones the geometry and applies
> > >PrecisionReducer::reduce
> > > *  if the PrecisionModel of the current context is different than
> > >the that of
> > > *  the passed geometry
> > > */
> > >
> > >/** Set context handle precision model **/
> > >void GEOSContextHandle_t
> > >GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
> > >void GEOSContextHandle_t
> > >GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double
> > >scale);
> >
> > So, what do you think? Worth pursuing this approach?
> 
> Sorry I'm not having much time to dedicate to this.
> I'm not very sure about the approach, to be honest.
> There are indeed 2 possible things one would want to do with PM:
> 
>  1. "advertise" the PM of a geometry, w/out rounding coords
> 
>  2. "set" the PM of a geometry, rounding coords
> 
> I'm not sure we ever want to allow for 1, to avoid wrong advertisement.
> The signature in the current proposal makes 2 clear for the cloning
> of a geometry, but we're still missing clear documentation about what
> happens from the constructors. Would/should they round ?
> 
> Example, what should happen here:
> 
>   GEOSContextHandle_t h = initGEOS_r(...);
>   GEOSCoordSequence *s = GEOSCoordSeq_create_r(h,2,2);
>   GEOSContext_setPrecisionDouble(h);
>   GEOSCoordSeq_setX_r(h, s, 0, 0);
>   GEOSCoordSeq_setY_r(h, s, 0, 0);
>   GEOSContext_setPrecisionFixed(h, 1);
>   GEOSCoordSeq_setX_r(h, s, 1, 0.2);
>   GEOSCoordSeq_setY_r(h, s, 1, 0.2);
> 
> Should the coordinate sequence contain 2 equal points after the above ?
> And what about WKB/WKT parsing ?
> 
> It would help to gather more comments from others.
> I've added Oliver and Sean in Cc as they took part of a precedent
> discussion about this:
> http://lists.osgeo.org/pipermail/geos-devel/2014-February/006780.html
> 
> --strk;
> 
>   ()   Free GIS & Flash consultant/developer
>   /\   http://strk.keybit.net/services.html

From geos-trac at osgeo.org  Wed Sep 30 10:42:27 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 30 Sep 2015 17:42:27 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.a267749d7042244d849de3b78a00fdb6@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by smani):

 The patch attached to this ticket is pretty much what I'm using in QGIS. I
 can create a pull request with that patch if that helps. The discussion on
 the mailing list deviated away from that patch towards a more implicit
 exposure of the precision reduction functionality, but the discussion
 stalled away with various issues with that idea still open. The patch
 attached to this ticket (and what is used in QGIS) is basically a straight
 1:1 port of the C++ api to C.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 30 11:14:00 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 30 Sep 2015 18:14:00 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.33f14ce3b930b2916eccf629c04f9b52@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 From what I can tell the C++ API is wider than the one you exposed to C.
 For example it has two kind of construction for the
 GeometryPrecisionReducer class. One takes a PrecisionModel, and the other
 takes a GeometryFactory. The one taking a GeometryFactory will store the
 GeometryFactory reference in the output Geometry, effectively making it
 "tagged" as having the target "Precision", the other (the only you expose
 to C) will just use the given PrecisionModel as a grid to reduce
 coordinates to, but the output geometry will not be different from before.

 If what I described above is confirmed, the same thing could be exposed as
 a simple "GEOSGeometry_snapToGrid(<some_grid_config>)" function, with no
 need to expose a PrecisionModel _at_all_. This is surely not what I had in
 mind when thinking about exposing the PrecisionModel.

 And I'd also argue that adding a dependency on GEOS-C++ library to QGIS
 for just snapping to a grid is probably overkill.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 30 11:18:53 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 30 Sep 2015 18:18:53 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.1e8d4cb2ace02a22fb97bea59a2d9408@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by smani):

 Right, 1:1 was more like 1:1 of the functionality I needed.

 It's been a while since I did the original experiments, but I think the
 important thing was that the actual precision model of the geometries
 changed in order to have the analysis operations run with that precision
 model.

 Ultimately what I needed was a way to reduce the chance of getting these
 tiny spikes caused by imprecisions when for instance intersecting
 geometries, or cases where unions of neighboring geometries failed due to
 geos thinking they were disjoint (again due to precision issues).

 I agree that having QGIS link agains the entire C++ GEOS library is an
 overkill, but at present it was the only way to get it merged into master.
 As soon as GEOS offers such functionality in the C library I'm happy to
 port the QGIS code to whatever API ultimately is implemented and remove
 the dependency again.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 30 11:34:42 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 30 Sep 2015 18:34:42 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.0d4c1d6c1aa4f30cdc07748e6b4dfaa3@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 What I'm saying is that from what I can read in code, I don't think you
 are having analisys operation run with the custom precision model. A test
 showing they are would be useful, but I found no test under QGIS.

 Such a test would use input geometries that produce the _same_ coordinate
 values (same HEXWKB) after coming out from PrecisionReducer but produce
 spikes (or other issues) when passed directly to those analisys operation
 and do not produce them when passed after the PrecisionReduced threatment.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 30 13:07:14 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 30 Sep 2015 20:07:14 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.4c1bcec473c682a201a1425e5380d0ae@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by smani):

 If I recall correctly the reduce operation returns a geometry with a
 corresponding precision model. And I thought this to be sufficient to have
 the analysis operation run in reduced precision mode?

 I'll see whether I can dig up my test geometries again and produce a test.
 But I definitely recall seeing a difference with and without the reduce
 operation.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:11>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 30 23:05:21 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 06:05:21 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.45d6a70a7b5a546389db970a86e330fa@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Perturbating the input (such as rounding its coordinate values) is often
 enough to change the outcome of operations. A good test would be computing
 the intersection between two segments long 10 times the grid cell size,
 crossing and having the endpoints at "scale" distance each other. If the
 computation is performed at the target precision model the intersection
 point will on the grid, otherwise it'll be in between.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:12>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 30 23:56:18 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 06:56:18 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.d752edd067a1170ddaf9ea9fb675b577@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Here's a simple test (just checked with XMLTester):
 {{{
 A: LINESTRING(0 -10, 2 10)
 B: LINESTRING(2 -10, 0 10)
 Operation: intersection
 Result with FLOATING precision: POINT(1 0)
 Result with FIXED precision (scale="0.5"): POINT(2 0)
 }}}

 Please see if you can reproduce that via the C wrapper of your patch,
 which would need to be accompanied by a unit test to be accepted, in any
 case.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:13>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

