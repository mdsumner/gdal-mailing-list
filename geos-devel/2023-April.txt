From strk at kbt.io  Sat Apr  1 13:21:58 2023
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 1 Apr 2023 22:21:58 +0200
Subject: [geos-devel] Report on GEOS maintenance grant
In-Reply-To: <D50A69DA-C027-4D6D-9A0B-E6B29C60049D@cleverelephant.ca>
References: <CA+K_q_q67yNR_9aSvD4dX0t1Yj4yiR+auW8T76on7=LDBagEqQ@mail.gmail.com>
 <84AFE21A-43CD-429C-A003-D18B69C12F65@hobu.co>
 <D50A69DA-C027-4D6D-9A0B-E6B29C60049D@cleverelephant.ca>
Message-ID: <20230401202158.lty4dof3ase6us4k@c19>

On Feb 27, 2023, at 8:32 AM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> As February comes to a close, I?m winding down the GEOS maintenance
> work that the GDAL PSC funded in 2022

Thanks a lot Daniel, GEOS needed such a refreshing pass !

--strk;

From strk at kbt.io  Thu Apr  6 04:09:34 2023
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 6 Apr 2023 13:09:34 +0200
Subject: [geos-devel] Writing a wrapper around LibGEOS
In-Reply-To: <CABwQhLk=JipB-N5zs5QVAkLu_TxSZU2koP2HnEn+EubXC4Uu1Q@mail.gmail.com>
References: <CABwQhLnUPYvjiFoLq6yneRD42nM4W0HaBPW4Vt2gkfLE3+e6dQ@mail.gmail.com>
 <000301d933aa$565aabe0$031003a0$@pcorp.us>
 <eabfcf35-73c4-6956-f403-972643a2f585@spatialys.com>
 <000101d933e4$63b92b60$2b2b8220$@pcorp.us>
 <CAB28Asi+3=wCcxJxgbhZnSJQuYwkOLC6aDv+J_di6UkOg5XJQw@mail.gmail.com>
 <001301d934bc$ddffb8c0$99ff2a40$@pcorp.us>
 <CABwQhLkFd77HeXSmF_Wq0S-UHd7inDrjBj7VJEWPe2h=1z=u=Q@mail.gmail.com>
 <CAK2ens02+dRjiKWB9JTvFWBHgt8nQgCfRGGCqwUFyN=1+CQThw@mail.gmail.com>
 <CABwQhLk=JipB-N5zs5QVAkLu_TxSZU2koP2HnEn+EubXC4Uu1Q@mail.gmail.com>
Message-ID: <20230406110934.ot2zsasmbgbgp3sq@c19>

On Wed, Mar 08, 2023 at 02:38:47PM -0600, Graham Toal wrote:

> So I'll continue to potter on working on an interface layered on top of
> your package (which is pretty good - the best of all the ones I've looked
> at, that support calling from C) and if any of the GEOS developers find
> anything I'm working on useful in the future then maybe you'll revisit the
> suggestion of adding curves.

FYI: the rttopo library is a fork of a library internally used by
PostGIS to provide various algorithms on geographic datatypes
including curves. The library does call into GEOS for many algorithms,
in which case the curves are flattened out and re-curved on output.

I'm mentioning this because librttopo is written in C, using the GEOS
C-API and some function written "there" (really in the parent code)
eventually migrated into GEOS itself (MakeValid), even if the
intendend scope is more about "topology".

More info here:

    https://strk.kbt.io/projects/rttopo

--strk;

  Libre GIS consultant/developer
  https://strk.kbt.io/services.html

From gtoal at gtoal.com  Thu Apr  6 08:54:29 2023
From: gtoal at gtoal.com (Graham Toal)
Date: Thu, 6 Apr 2023 10:54:29 -0500
Subject: [geos-devel] Writing a wrapper around LibGEOS
In-Reply-To: <20230406110934.ot2zsasmbgbgp3sq@c19>
References: <CABwQhLnUPYvjiFoLq6yneRD42nM4W0HaBPW4Vt2gkfLE3+e6dQ@mail.gmail.com>
 <000301d933aa$565aabe0$031003a0$@pcorp.us>
 <eabfcf35-73c4-6956-f403-972643a2f585@spatialys.com>
 <000101d933e4$63b92b60$2b2b8220$@pcorp.us>
 <CAB28Asi+3=wCcxJxgbhZnSJQuYwkOLC6aDv+J_di6UkOg5XJQw@mail.gmail.com>
 <001301d934bc$ddffb8c0$99ff2a40$@pcorp.us>
 <CABwQhLkFd77HeXSmF_Wq0S-UHd7inDrjBj7VJEWPe2h=1z=u=Q@mail.gmail.com>
 <CAK2ens02+dRjiKWB9JTvFWBHgt8nQgCfRGGCqwUFyN=1+CQThw@mail.gmail.com>
 <CABwQhLk=JipB-N5zs5QVAkLu_TxSZU2koP2HnEn+EubXC4Uu1Q@mail.gmail.com>
 <20230406110934.ot2zsasmbgbgp3sq@c19>
Message-ID: <CABwQhL=9SaB4EL8Gd1mWU29WBGf3xp0Jm5JZYYJ5xcdxQe54HQ@mail.gmail.com>

Appreciate the pointer, thanks!

On Thu, Apr 6, 2023 at 6:08?AM Sandro Santilli <strk at kbt.io> wrote:

> FYI: the rttopo library is a fork of a library internally used by
> PostGIS to provide various algorithms on geographic datatypes
> including curves. The library does call into GEOS for many algorithms,
> in which case the curves are flattened out and re-curved on output.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230406/c94c72ed/attachment.htm>

From geos-trac at osgeo.org  Tue Apr 11 10:05:55 2023
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 11 Apr 2023 17:05:55 -0000
Subject: [geos-devel] [GEOS] #1006: CMake build without tests regression
In-Reply-To: <045.4b7be4b0e27c7c067cce1ac786e0fee9@osgeo.org>
References: <045.4b7be4b0e27c7c067cce1ac786e0fee9@osgeo.org>
Message-ID: <060.53182865655debb91591ae5771289725@osgeo.org>

#1006: CMake build without tests regression
-----------------------------------+---------------------------
 Reporter:  Mike Taves             |       Owner:  geos-devel@?
     Type:  defect                 |      Status:  closed
 Priority:  major                  |   Milestone:
Component:  Build/Install (cmake)  |     Version:  main
 Severity:  Unassigned             |  Resolution:  fixed
 Keywords:                         |
-----------------------------------+---------------------------
Comment (by Mike Taves <mwtoews@?>):

 In [changeset:"ccb2f0fb0a92c42a0a9f44bbb83703fd7f08ebd7/git" ccb2f0f/git]:
 {{{#!CommitTicketReference repository="git"
 revision="ccb2f0fb0a92c42a0a9f44bbb83703fd7f08ebd7"
 Fix CMake build without tests

 Fixes #1006
 }}}
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1006#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Wed Apr 12 07:56:05 2023
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 12 Apr 2023 07:56:05 -0700
Subject: [geos-devel] Coverage Operations API
Message-ID: <E304CB99-D4F1-4511-A65E-90C2D41D5D73@cleverelephant.ca>

Having a little discussion on GH about the first two coverage functions, for validation and simplification, and some opinions from downstream consumers might be good ;)

https://github.com/libgeos/geos/pull/866

P
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230412/450d02f0/attachment.htm>

From pramsey at cleverelephant.ca  Tue Apr 18 15:56:22 2023
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 18 Apr 2023 15:56:22 -0700
Subject: [geos-devel] CoverageUnion
Message-ID: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>

We have quite a few of them? Which one should be keep and bind into CAPI?

geos/operation/union/CoverageUnion.h
geos/operation/overlayng/CoverageUnion.h
geos/coverage/CoverageUnion.h

From mtnclimb at gmail.com  Tue Apr 18 16:05:43 2023
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 18 Apr 2023 16:05:43 -0700
Subject: [geos-devel] CoverageUnion
In-Reply-To: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
Message-ID: <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>

geos/coverage/CoverageUnion in fact delegates to
geos/operation/overlayng/CoverageUnion.  It's there to provide an API which
is the same as the other coverage operations.

overlayng/CoverageUnion seems to be quite a bit faster than
geos/operation/union/CoverageUnion, by my testing.  So it has my vote.(They
are both exposed in geosop, so independent verification is welcome.)

On Tue, Apr 18, 2023 at 3:56?PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> We have quite a few of them? Which one should be keep and bind into CAPI?
>
> geos/operation/union/CoverageUnion.h
> geos/operation/overlayng/CoverageUnion.h
> geos/coverage/CoverageUnion.h
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230418/4a848768/attachment.htm>

From dbaston at gmail.com  Tue Apr 18 17:24:14 2023
From: dbaston at gmail.com (Daniel Baston)
Date: Tue, 18 Apr 2023 20:24:14 -0400
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
Message-ID: <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>

I noticed that the OverlayNG coverage union returns an empty polygon if the
inputs do not form a coverage, whereas the older algorithm produces an
error. I think it would be a good idea to apply an area post-check to the
NG version so that we retain the error. I have also noticed cases (TIGER
county boundaries) where the NG algorithm takes about 2x as long as the old
algorithm but performs better than the old algorithm if the inputs are
pre-sorted (as they are in the old algorithm). Maybe the same sorting
should be added to the NG version.

Otherwise I have no reservations about switching.

Dan

On Tue, Apr 18, 2023 at 7:05?PM Martin Davis <mtnclimb at gmail.com> wrote:

> geos/coverage/CoverageUnion in fact delegates to
> geos/operation/overlayng/CoverageUnion.  It's there to provide an API which
> is the same as the other coverage operations.
>
> overlayng/CoverageUnion seems to be quite a bit faster than
> geos/operation/union/CoverageUnion, by my testing.  So it has my vote.(They
> are both exposed in geosop, so independent verification is welcome.)
>
> On Tue, Apr 18, 2023 at 3:56?PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>> We have quite a few of them? Which one should be keep and bind into CAPI?
>>
>> geos/operation/union/CoverageUnion.h
>> geos/operation/overlayng/CoverageUnion.h
>> geos/coverage/CoverageUnion.h
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230418/56ded38c/attachment.htm>

From mtnclimb at gmail.com  Tue Apr 18 18:50:48 2023
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 18 Apr 2023 18:50:48 -0700
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
Message-ID: <CAK2ens3XGvYhSS0qenMqYjbgDpUhv1hSOf+sFePfT8i9E03tqg@mail.gmail.com>

On Tue, Apr 18, 2023 at 5:24?PM Daniel Baston <dbaston at gmail.com> wrote:

> I noticed that the OverlayNG coverage union returns an empty polygon if
> the inputs do not form a coverage, whereas the older algorithm produces an
> error. I think it would be a good idea to apply an area post-check to the
> NG version so that we retain the error.
>

Seems reasonable.


> I have also noticed cases (TIGER county boundaries) where the NG algorithm
> takes about 2x as long as the old algorithm but performs better than the
> old algorithm if the inputs are pre-sorted (as they are in the old
> algorithm). Maybe the same sorting should be added to the NG version.
>

Any theories about why sorting improves the performance?

Perhaps it's because of the BoundaryChainNoder, which adds segments to an
std::unordered_set<Segment, Segment::HashCode>.  Segments are removed from
the set when duplicates occur.  If the segments inserted have spatial
coherency, that would tend to reduce the dynamic size of the unorderedset,
which perhaps improves performance?

I also note that using the OverlayNG logic for CoverageUnion is a bit of
overkill, since the topology of the unioned coverage is much simpler than a
general topological situation.  At some point it would be good to see if a
dedicated implementation for building the union coverage topology would be
faster.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230418/903610cf/attachment.htm>

From mtnclimb at gmail.com  Wed Apr 19 21:22:42 2023
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 19 Apr 2023 21:22:42 -0700
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
Message-ID: <CAK2ens0KbA91ecWT1W21SDQVmRb42QVhkYHgbcgPwiyKWtEu3A@mail.gmail.com>

On Tue, Apr 18, 2023 at 5:24?PM Daniel Baston <dbaston at gmail.com> wrote:

>  but performs better than the old algorithm if the inputs are pre-sorted
> (as they are in the old algorithm). Maybe the same sorting should be added
> to the NG version.
>

The first step in the union algorithm is to identify segments which are
unique (duplicate segments are removed).  This is done by adding and
removing segments to/from a set.  I wonder if it would be faster to simply
sort all the segments, and scan the list retaining only unique segments?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230419/0338ec21/attachment.htm>

From Roger.Bivand at nhh.no  Tue Apr 25 05:48:01 2023
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Tue, 25 Apr 2023 12:48:01 +0000
Subject: [geos-devel] Fedora 38 GCC 13 3.11.2 build failure
Message-ID: <SV0P279MB04755CF2136D60E1C9CE6018EE649@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>

Having just  upgraded to F38, which comes with GCC 13, I deleted my unpacked tarball, uncompressed 3.11.2, and tried to build. It stopped at 
[ 51%] Building CXX object CMakeFiles/geos.dir/src/shape/fractal/HilbertEncoder.cpp.o
In file included from /home/rsb/topics/geos/geos-3.11.2/src/shape/fractal/HilbertEncoder.cpp:15:
/home/rsb/topics/geos/geos-3.11.2/include/geos/shape/fractal/HilbertEncoder.h:40:28: error: expected ?)? before ?p_level?
   40 |     HilbertEncoder(uint32_t p_level, geom::Envelope& extent);
      |                   ~        ^~~~~~~~
      |                            )
/home/rsb/topics/geos/geos-3.11.2/include/geos/shape/fractal/HilbertEncoder.h:41:5: error: ?uint32_t? does not name a type
   41 |     uint32_t encode(const geom::Envelope* env);
      |     ^~~~~~~~
/home/rsb/topics/geos/geos-3.11.2/include/geos/shape/fractal/HilbertEncoder.h:21:1: note: ?uint32_t? is defined in header ?<cstdint>?; did you forget to ?#include <cstdint>??
   20 | #include <vector>
  +++ |+#include <cstdint>
   21 | 

The HEAD on github builds OK, and ctest runs cleanly; it has the #include <cstdint> declaration. Would this indicate that Fedora 38 users should build from github rather than 3.11.2, since I doubt that GCC 13 fixes are a general requirement?

Sorry for the distraction,

Roger


--
Roger Bivand
Emeritus Professor
Norwegian School of Economics
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway
Roger.Bivand at nhh.no

From pramsey at cleverelephant.ca  Tue Apr 25 08:31:05 2023
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 25 Apr 2023 08:31:05 -0700
Subject: [geos-devel] Fedora 38 GCC 13 3.11.2 build failure
In-Reply-To: <SV0P279MB04755CF2136D60E1C9CE6018EE649@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
References: <SV0P279MB04755CF2136D60E1C9CE6018EE649@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
Message-ID: <5387DCA9-6019-429F-80A8-29B89F3A432C@cleverelephant.ca>

Put up a PR with the changes needed to support Gcc13 in older branches, I?ll merge it in. I just don?t have easy access to gcc13 to do the build/test cycle with.

P

> On Apr 25, 2023, at 5:48 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
> 
> Having just  upgraded to F38, which comes with GCC 13, I deleted my unpacked tarball, uncompressed 3.11.2, and tried to build. It stopped at 
> [ 51%] Building CXX object CMakeFiles/geos.dir/src/shape/fractal/HilbertEncoder.cpp.o
> In file included from /home/rsb/topics/geos/geos-3.11.2/src/shape/fractal/HilbertEncoder.cpp:15:
> /home/rsb/topics/geos/geos-3.11.2/include/geos/shape/fractal/HilbertEncoder.h:40:28: error: expected ?)? before ?p_level?
>   40 |     HilbertEncoder(uint32_t p_level, geom::Envelope& extent);
>      |                   ~        ^~~~~~~~
>      |                            )
> /home/rsb/topics/geos/geos-3.11.2/include/geos/shape/fractal/HilbertEncoder.h:41:5: error: ?uint32_t? does not name a type
>   41 |     uint32_t encode(const geom::Envelope* env);
>      |     ^~~~~~~~
> /home/rsb/topics/geos/geos-3.11.2/include/geos/shape/fractal/HilbertEncoder.h:21:1: note: ?uint32_t? is defined in header ?<cstdint>?; did you forget to ?#include <cstdint>??
>   20 | #include <vector>
>  +++ |+#include <cstdint>
>   21 | 
> 
> The HEAD on github builds OK, and ctest runs cleanly; it has the #include <cstdint> declaration. Would this indicate that Fedora 38 users should build from github rather than 3.11.2, since I doubt that GCC 13 fixes are a general requirement?
> 
> Sorry for the distraction,
> 
> Roger
> 
> 
> --
> Roger Bivand
> Emeritus Professor
> Norwegian School of Economics
> Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway
> Roger.Bivand at nhh.no
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mwtoews at gmail.com  Tue Apr 25 14:49:30 2023
From: mwtoews at gmail.com (Mike Taves)
Date: Wed, 26 Apr 2023 09:49:30 +1200
Subject: [geos-devel] Fedora 38 GCC 13 3.11.2 build failure
In-Reply-To: <5387DCA9-6019-429F-80A8-29B89F3A432C@cleverelephant.ca>
References: <SV0P279MB04755CF2136D60E1C9CE6018EE649@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
 <5387DCA9-6019-429F-80A8-29B89F3A432C@cleverelephant.ca>
Message-ID: <CAM2FmMoPrnAWgoD_FJHrFjiQk5H0J5ayc+_fEO+RQKs8LOsHuw@mail.gmail.com>

On Wed, 26 Apr 2023 at 03:31, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>
> I just don?t have easy access to gcc13 to do the build/test cycle with.

If you have docker set-up locally, could test it with:

docker pull fedora:38
docker run -t -i --rm -v `pwd`:/io fedora:38 bash

then:
yum install -y g++ cmake
cd /io
rm -rf build && mkdir build && cd build
cmake ..
etc...

I've just checked with the 3.8 branch, it seems ok. Probably because of:
https://github.com/libgeos/geos/commit/5fe03b63e2c41ac2922a9865b3d67c006433efe9

From Roger.Bivand at nhh.no  Wed Apr 26 04:34:09 2023
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Wed, 26 Apr 2023 11:34:09 +0000
Subject: [geos-devel] Fedora 38 GCC 13 3.11.2 build failure
In-Reply-To: <SV0P279MB0475FD7B9D654A7923D3107BEE659@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
References: <SV0P279MB0475FD7B9D654A7923D3107BEE659@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
Message-ID: <SV0P279MB0475C043681ABEA431C0DA7EEE659@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>

Paul,

Forking the repo with all branches and cloning locally, I can build and ctest 3.11 and 3.10 successfully with gcc 13; this seems to agree with https://github.com/libgeos/geos/issues/860. 3.9 seems to have many problems beyond the header patched by that issue when using gcc 13, and probably will need someone who knows the code well to make progress. I wouldn't dare try to add the now missing #include <cstdint> where it seems to be needed. I tried -DCMAKE_CXX_STANDARD=98 and 11 without success. Sorry not to be more help.

Roger

--
Roger Bivand
Emeritus Professor
Norwegian School of Economics
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway
Roger.Bivand at nhh.no

From pramsey at cleverelephant.ca  Wed Apr 26 12:45:41 2023
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 26 Apr 2023 12:45:41 -0700
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
Message-ID: <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>

On Tue, Apr 18, 2023 at 5:24?PM Daniel Baston <dbaston at gmail.com> wrote:
>
>  I think it would be a good idea to apply an area post-check to the NG version so that we retain the error.

We have not been able to conjure up a way to note non-coverage inputs
without incurring a huge performance penalty. The NG coverage union
does not return empty on non-valid inputs, it frequently just mirrors
the non-valid parts back on the output. An area test won't catch those
cases necessarily, since the area of the input will equal the area of
the output for example if you feed in two polygons with an overlap and
no shared edges. I am tempted to change the contract and document that
a validity check is a precondition for getting "sensible" results on
output.

> I have also noticed cases (TIGER county boundaries) where the NG algorithm takes about 2x as long as the old algorithm but performs better than the old algorithm if the inputs are pre-sorted (as they are in the old algorithm). Maybe the same sorting should be added to the NG version.

I have added the sorting, and have not yet found a case where the NG
version is slower. Also I have found that doing a union on my 5000
voting area test set, the algorithms are close in speed when
aggregating to one big output, but slower when aggregating 80 smaller
outputs. There must be a somewhat larger fixed cost per calculation in
the operation/union version than the NG one.

(for clarity, this is similar for both implementations, just one output)

  SELECT ST_CoverageUnion(geom) FROM vas;

(and this is 10x slower on the operation/union implementation, 85 outputs)

  SELECT edavbbr ST_CoverageUnion(geom) FROM vas GROUP BY edabbr;

Anyways, question for going forward: OK to change the contract on
GEOSCoverageUnion?

P

>
> Otherwise I have no reservations about switching.
>
> Dan
>
> On Tue, Apr 18, 2023 at 7:05?PM Martin Davis <mtnclimb at gmail.com> wrote:
>>
>> geos/coverage/CoverageUnion in fact delegates to geos/operation/overlayng/CoverageUnion.  It's there to provide an API which is the same as the other coverage operations.
>>
>> overlayng/CoverageUnion seems to be quite a bit faster than geos/operation/union/CoverageUnion, by my testing.  So it has my vote.(They are both exposed in geosop, so independent verification is welcome.)
>>
>> On Tue, Apr 18, 2023 at 3:56?PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>>
>>> We have quite a few of them? Which one should be keep and bind into CAPI?
>>>
>>> geos/operation/union/CoverageUnion.h
>>> geos/operation/overlayng/CoverageUnion.h
>>> geos/coverage/CoverageUnion.h
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

From strk at kbt.io  Thu Apr 27 14:16:05 2023
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 27 Apr 2023 23:16:05 +0200
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
 <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>
Message-ID: <20230427211605.iavnokwinhkmlv6z@c19>

On Wed, Apr 26, 2023 at 12:45:41PM -0700, Paul Ramsey wrote:

> I am tempted to change the contract and document that
> a validity check is a precondition for getting "sensible" results on
> output.

Where's the contract ? I was curious to understand what would
ST_CoverageUnion do for me but only found these short paragraphs:

  https://github.com/libgeos/geos/blob/62c928c9f37957c62fab8db69e6c8efd26ce4085/include/geos/coverage/CoverageUnion.h#L33-L40
  https://github.com/libgeos/geos/blob/62c928c9f37957c62fab8db69e6c8efd26ce4085/include/geos/coverage/CoverageUnion.h#L48-L53

Those two paragraphs boils down to:

  Unions a polygonal coverage in an efficient way.
  Valid polygonal coverage topology allows merging polygons in a very efficient way.
  Takes: the polygons in the coverage (a vector of Geometry pointers)
  Returns: the union of the coverage polygons (a Geometry unique pointer)

Questions I have are:

  - What is a "valid polygonal coverage" ?
  - Do shared edges need to contain the exact same vertices ?

The answer seem to be in the PostGIS pull request to expose the
functionality [1], but it would be useful to have it in the GEOS
(and JTS?) side too. For easier porting of JTS fixes I also find
it useful to encode the "last commit of JTS" in a comment in the
top of each file.

[1] https://github.com/postgis/postgis/pull/731#issue-1683980686

In general GEOS functions are (not sure if documented as such) expected to take
a valid input for their return to be defined. There should be very few exceptions
to this, maybe only the recent MakeValid.

--strk;

From mtnclimb at gmail.com  Thu Apr 27 16:33:26 2023
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 27 Apr 2023 16:33:26 -0700
Subject: [geos-devel] CoverageUnion
In-Reply-To: <20230427211605.iavnokwinhkmlv6z@c19>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
 <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>
 <20230427211605.iavnokwinhkmlv6z@c19>
Message-ID: <CAK2ens1x5KfABQYqToXwD1kwv8g7Pv2L24Znkz8JNPoKntGWNA@mail.gmail.com>

The definition of a valid Simple Polygonal Coverage is presented here:

http://lin-ear-th-inking.blogspot.com/2022/08/validating-polygonal-coverages-in-jts.html

It's in the JTS Javadoc here:

https://github.com/locationtech/jts/blob/master/modules/core/src/main/java/org/locationtech/jts/coverage/CoverageValidator.java#L22

The GEOS doc for GEOSCoverageIsValid is here:

http://libgeos.org/doxygen/geos__c_8h.html#a562112e71b059c2bccd84ba05b5e0907

I'll add some more details to that doco.

It might be nice to have an overview of what SimplePolygonalCoverages are
and the operations available for them.  I'm not sure if there's a way to
have section doc in doxygen.  If anyone has ideas let me know.


On Thu, Apr 27, 2023 at 2:16?PM Sandro Santilli <strk at kbt.io> wrote:

> On Wed, Apr 26, 2023 at 12:45:41PM -0700, Paul Ramsey wrote:
>
> > I am tempted to change the contract and document that
> > a validity check is a precondition for getting "sensible" results on
> > output.
>
> Where's the contract ? I was curious to understand what would
> ST_CoverageUnion do for me but only found these short paragraphs:
>
>
> https://github.com/libgeos/geos/blob/62c928c9f37957c62fab8db69e6c8efd26ce4085/include/geos/coverage/CoverageUnion.h#L33-L40
>
> https://github.com/libgeos/geos/blob/62c928c9f37957c62fab8db69e6c8efd26ce4085/include/geos/coverage/CoverageUnion.h#L48-L53
>
> Those two paragraphs boils down to:
>
>   Unions a polygonal coverage in an efficient way.
>   Valid polygonal coverage topology allows merging polygons in a very
> efficient way.
>   Takes: the polygons in the coverage (a vector of Geometry pointers)
>   Returns: the union of the coverage polygons (a Geometry unique pointer)
>
> Questions I have are:
>
>   - What is a "valid polygonal coverage" ?
>   - Do shared edges need to contain the exact same vertices ?
>
> The answer seem to be in the PostGIS pull request to expose the
> functionality [1], but it would be useful to have it in the GEOS
> (and JTS?) side too. For easier porting of JTS fixes I also find
> it useful to encode the "last commit of JTS" in a comment in the
> top of each file.
>
> [1] https://github.com/postgis/postgis/pull/731#issue-1683980686
>
> In general GEOS functions are (not sure if documented as such) expected to
> take
> a valid input for their return to be defined. There should be very few
> exceptions
> to this, maybe only the recent MakeValid.
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230427/e9b038a7/attachment.htm>

From pramsey at cleverelephant.ca  Fri Apr 28 08:21:41 2023
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 28 Apr 2023 08:21:41 -0700
Subject: [geos-devel] [postgis-devel] Coverage Functions
In-Reply-To: <2F465181-F191-473A-AFF9-5C3398F43E06@cleverelephant.ca>
References: <114C15B0-C1BC-4486-BEB3-851F0DE0CC62@cleverelephant.ca>
 <20230428141837.knowlkprzo2o6p2d@c19>
 <2F465181-F191-473A-AFF9-5C3398F43E06@cleverelephant.ca>
Message-ID: <831CFA79-16F9-48F5-8B13-B7C407364DCE@cleverelephant.ca>

Cc?ing over to geos-devel too

> On Apr 28, 2023, at 8:21 AM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> 
>> On Apr 28, 2023, at 7:18 AM, Sandro Santilli <strk at kbt.io> wrote:
>> 
>> On Tue, Apr 25, 2023 at 05:03:25PM -0700, Paul Ramsey wrote:
>>> The first coverage functions are ready to merge.
>>> 
>>> https://github.com/postgis/postgis/pull/731/files
>> 
>> As mentioned in chat, I'm thinking having a GEOSCoverage
>> datatype would be advisible here, with one constructor
>> taking a vector of Geometry pointer for now but eventually
>> getting more constructors.
>> 
>> Validation could be performed in the constructor itself OR
>> delegated to the validator function. Simplification could be
>> a method taking that datatype, and possibly return again a
>> (simplified) GEOSCoverage from which one could derive a single
>> GEOSGeometry as the current proposed return from the simplification
>> function.
>> 
>> I've the feeling there will be more coverage-related functions,
>> that's why I'm suggesting to have a datatype for it.
> 
> I used to think this too, but I changed my mind. I made ?logical sense? to me that there should be an intermediate stage of ?built out? coverage hanging around that one then asks to do things. It turns out, though, that just having ?clean inputs? is sufficient to achieve what people really want, which is really just replacing map shaper and being able to do polygon simplification that respects neighbours. That?s the use case, pretty much full stop. Secondarily, high-speed union is a benefit to having a set of cleaned polygons lying around.
> 
> Isn?t that inefficient? Well, marginally perhaps, but I can run through very large inputs (150MB, 2M vertices) and get results in under a second. The ?having a real coverage? buys me nothing.
> 
> Also worth noting, these operations run on pretty distinct code lines. There isn?t an edge/node/face abstraction being built under the covers, mostly it?s sets of edges. If we build up a ?coverage object? it will be a Potemkin structure, because it won?t have underneath the kinds of things people expect it to have.
> 
> On the PostGIS side, exposing this as operations against SF collections cuts down the friction to people using it in their normal lives. They just want map shaper. Persisting a topology is overkill. Once we have a basic cleaner, the work flow will become: load shape file; clean; simplify; run various (high speed) unions for outputs. All with SF data.
> 
> In summary, if we in fact *need* an explicit coverage object, if for example we are going to start having an in-memory modifiable edge/node/face object, then we should then make it, but until then this SF approach makes a great deal of sense to me.
> 
> P.
> 
> 
> 
> 
>> 
>> --strk;
>> _______________________________________________
>> postgis-devel mailing list
>> postgis-devel at lists.osgeo.org <mailto:postgis-devel at lists.osgeo.org>
>> https://lists.osgeo.org/mailman/listinfo/postgis-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230428/47796786/attachment-0001.htm>

From pramsey at cleverelephant.ca  Fri Apr 28 14:59:54 2023
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 28 Apr 2023 14:59:54 -0700
Subject: [geos-devel] [postgis-devel] Coverage Functions
In-Reply-To: <CAK2ens3TwO5UnYn1o+kYtZY_Q=czb73f+fd-JS2StuJqRdEPCA@mail.gmail.com>
References: <114C15B0-C1BC-4486-BEB3-851F0DE0CC62@cleverelephant.ca>
 <20230428141837.knowlkprzo2o6p2d@c19>
 <CAK2ens3TwO5UnYn1o+kYtZY_Q=czb73f+fd-JS2StuJqRdEPCA@mail.gmail.com>
Message-ID: <1F6E5C13-98F7-45D9-8325-A4F835A79101@cleverelephant.ca>



> On Apr 28, 2023, at 2:57 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> On Fri, Apr 28, 2023 at 7:18?AM Sandro Santilli <strk at kbt.io <mailto:strk at kbt.io>> wrote:
>> 
>> As mentioned in chat, I'm thinking having a GEOSCoverage
>> datatype would be advisible here, with one constructor
>> taking a vector of Geometry pointer for now but eventually
>> getting more constructors.
> 
> Sandro, are you suggesting a GEOSCoverage type containing a *topological* structure, or one containing a set of Polygons/MultiPolygons?
> 
> For a topological structure, that may be useful, but that is a fair bit of work and is NOT required by the recent coverage functions.  If and when this is done, I suggest it is called GEOSTopology to be totally clear.
> 
> For a coverage type that simply contains a list of polygonal geometries, that is what I have called a Simple Features Coverage.  GEOSCoverage would be a fine name for this.  This is actually what I considered at the start of developing the various coverage operations.  I backed away from this in order to keep things simple.  But it does have some advantages for understanding and documenting the concept of a simple coverage.

We had a little discussion of something much like this when bringing these functions into GEOS CAPI, whether to use a GeometryList as a container, which except for the name, is basically all a GEOSSimpleCoverage container would be doing too. In the end, I was persuaded that a super lightweight approach was better than adding another scruff of a type.

P


>  
> _______________________________________________
> postgis-devel mailing list
> postgis-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/postgis-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230428/a0f0e47a/attachment.htm>

From dbaston at gmail.com  Sat Apr 29 17:14:26 2023
From: dbaston at gmail.com (Daniel Baston)
Date: Sat, 29 Apr 2023 20:14:26 -0400
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
 <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>
Message-ID: <CA+K_q_oUSeZqRpgS-cH=zVztp_L6gyTKwEZOFDy3h4VynS8nGg@mail.gmail.com>

> We have not been able to conjure up a way to note non-coverage inputs
> without incurring a huge performance penalty.


I think the area test we have been using catches many non-contrived cases
with essentially no penalty. What is the benefit to removing it?

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230429/01b4ea83/attachment.htm>

From chirag19 at yahoo.com  Sun Apr 30 23:49:28 2023
From: chirag19 at yahoo.com (chirag soni)
Date: Mon, 1 May 2023 06:49:28 +0000 (UTC)
Subject: [geos-devel] CoverageUnion
In-Reply-To: <CA+K_q_oUSeZqRpgS-cH=zVztp_L6gyTKwEZOFDy3h4VynS8nGg@mail.gmail.com>
References: <B77BC433-0BA1-4F2A-AB63-C9719856CA9E@cleverelephant.ca>
 <CAK2ens2uYH_fwUug8qkv5Xn-WFSDUHWRz0pN1O47W0H+ojCgbA@mail.gmail.com>
 <CA+K_q_pSCNJq3q3GyMdzoVG3rGgjMs3Eu+1TSmgTngCPn2Jdog@mail.gmail.com>
 <CACowWR0gZ4Zt5VF9qoX6JxCLfnYnM2XvK1=G6c_fq6S_=cS70g@mail.gmail.com>
 <CA+K_q_oUSeZqRpgS-cH=zVztp_L6gyTKwEZOFDy3h4VynS8nGg@mail.gmail.com>
Message-ID: <775825471.1220702.1682923768729@mail.yahoo.com>

 I request you to please unsubscribe? my mail from this updates.?
-Chirag? ?
    On Sunday, April 30, 2023 at 05:45:19 AM GMT+5:30, Daniel Baston <dbaston at gmail.com> wrote:  
 
 
We have not been able to conjure up a way to note non-coverage inputs
without incurring a huge performance penalty. 

I think the area test we have been using catches many non-contrived cases with essentially no penalty. What is the benefit to removing it?

Dan
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20230501/0377ad86/attachment.htm>

