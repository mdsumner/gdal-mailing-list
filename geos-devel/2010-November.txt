From geos-trac at osgeo.org  Wed Nov  3 04:29:48 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 04:29:50 2010
Subject: [geos-devel] [GEOS] #383: error occur when buffer
Message-ID: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>

#383: error occur when buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 we debug the source code, and find that this function cause huge memory
 cost, especially of the 'for' circulation.

 void SegmentNodeList::addSplitEdges(std::vector<SegmentString*>& edgeList)
 {

         // testingOnly
 #if GEOS_DEBUG
         std::cerr<<__FUNCTION__<<" entered"<<std::endl;
         std::vector<SegmentString*> testingSplitEdges;
 #endif

         // ensure that the list has entries for the first and last
         // point of the edge
         addEndpoints();
         addCollapsedNodes();

         // there should always be at least two entries in the list
         // since the endpoints are nodes
         iterator it=begin();
         SegmentNode *eiPrev=*it;
         assert(eiPrev);
         it++;

         //problem occurs here
         for(iterator itEnd=end(); it!=itEnd; ++it)
         {
         //&&&&This circulation consumes lots of memory so as to run out of
 the memory,then the program collapse
                 SegmentNode *ei=*it;
                 assert(ei);

                 if ( ! ei->compareTo(*eiPrev) ) continue;

                 SegmentString *newEdge=createSplitEdge(eiPrev, ei);
                 edgeList.push_back(newEdge);
 #if GEOS_DEBUG
                 testingSplitEdges.push_back(newEdge);
 #endif
                 eiPrev = ei;
         }

 #if GEOS_DEBUG
         std::cerr<<__FUNCTION__<<" finished, now checking
 correctness"<<std::endl;
         checkSplitEdgesCorrectness(testingSplitEdges);
 #endif
 }

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 05:04:13 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 05:04:15 2010
Subject: [geos-devel] Re: [GEOS] #383: error occur when buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.4bd42de5771b70e12874bc9969ca9802@osgeo.org>

#383: error occur when buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 Print edgeList.size() as first thing on function enter.
 Also, check the callers.
 Finally attach your input as WKT or WKB.
 Chances are your input geometry is just too big...

 Ah, don't forget to try with current development version !

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 05:35:07 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 05:35:09 2010
Subject: [geos-devel] [GEOS] #384: huge memory cost and program crashed when
 compute buffer
Message-ID: <046.30882c30af3e82d6a62528e1e40ed4f6@osgeo.org>

#384: huge memory cost and program crashed when compute buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 huge memory cost and program crashed when compute buffer, with the
 shapefile in the ticket and a distance of -8665.
 what's the problem of it?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/384>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 05:43:59 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 05:44:01 2010
Subject: [geos-devel] Re: [GEOS] #384: huge memory cost and program crashed
 when compute buffer
In-Reply-To: <046.30882c30af3e82d6a62528e1e40ed4f6@osgeo.org>
References: <046.30882c30af3e82d6a62528e1e40ed4f6@osgeo.org>
Message-ID: <055.62c7bb5c274b00abeb0df4f670f59530@osgeo.org>

#384: huge memory cost and program crashed when compute buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:  3.2.0                     
 Severity:  Unassigned  |   Resolution:  duplicate                 
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => duplicate


Comment:

 Sounds like a duplicate of #383, please try with the development version.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/384#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 05:44:54 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 05:44:56 2010
Subject: [geos-devel] Re: [GEOS] #383: error occur when buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.7b945682a1e93f9874b427de3a67bcb9@osgeo.org>

#383: error occur when buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 See also #384 for another such case

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 05:46:30 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 05:46:32 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
 (was: error occur when buffer)
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.2b85e3583f870fc997012a1f86d3f7d6@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 05:54:44 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 05:54:46 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.128b0f0b8a9a0e5bed8c297f6afb2004@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by atubar):

 So if the geometry is too big, how to solve the problem?
 and where can I find out the limit  size of the geometry?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 06:01:11 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 06:01:13 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.a9bdb6d0980829ef0301a0ee63bb89e9@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 I haven't checked your geometry yet. Anyway, if it's a multi-component try
 applying the buffer to each component in turn.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:5>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 06:13:04 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 06:13:05 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.27ec83b5f74d125ff9ee2370c748bcf6@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by atubar):

 I have attach a ticket, a shapefile with only a entity. when buffering,
 with the shapefile in the ticket and a distance of -8665.
 Can you have a test, and show us a solution?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:6>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 06:19:31 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 06:19:33 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.70cc4e45364d11c353480c4401f53205@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 I cannot look at it shortly, sorry (unless you can buy me some time).

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:7>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Nov  3 06:32:40 2010
From: geos-trac at osgeo.org (GEOS)
Date: Wed Nov  3 06:32:42 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.5245558029b9b184d5c542e8737f9c2e@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.1                     
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by atubar):

 We need to do buffer operation in our program. Often the single geometry
 is huge, and the shapefile is big and contain many geometry.
 So what's the best way that you can show us?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:8>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From mbdavis at refractions.net  Wed Nov  3 12:08:51 2010
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Nov  3 12:04:49 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <055.5245558029b9b184d5c542e8737f9c2e@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
	<055.5245558029b9b184d5c542e8737f9c2e@osgeo.org>
Message-ID: <4CD18913.1040305@refractions.net>

I checked out this case in JTS, and it has the same symptoms.  The 
problem is due to the combination of:

- a very complex input geometry
- a large negative buffer distance, which is the most difficult scenario 
to compute

If you can run Java 64-bit with lots of memory and have time to wait, 
you might get an answer out. Otherwise I don't see any simple solution 
to this problem.  (Actually by manual inspection it looks like the 
buffer output would be the empty geometry for the given buffer distance. 
But this isn't a general solution, obviously)

Another way that might work is to buffer the linework of the boundary of 
the geometry using a positive buffer distance, and then subtract 
(difference) the result from the original polygon.  However, even the 
boundary of this polygon is complex enough that the boundary buffer will 
have to be computed piecewise (i.e. on short sections of the boundary) 
and then merged.

Martin


On 11/3/2010 3:32 AM, GEOS wrote:
> #383: huge memory cost and crash in buffer
> ------------------------+---------------------------------------------------
>   Reporter:  atubar      |       Owner:  geos-devel@?
>       Type:  defect      |      Status:  new
>   Priority:  major       |   Milestone:  3.2.1
> Component:  Default     |     Version:  3.2.0
>   Severity:  Unassigned  |    Keywords:
> ------------------------+---------------------------------------------------
>
> Comment(by atubar):
>
>   We need to do buffer operation in our program. Often the single geometry
>   is huge, and the shapefile is big and contain many geometry.
>   So what's the best way that you can show us?
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mbdavis at refractions.net  Wed Nov  3 14:05:32 2010
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Nov  3 14:01:29 2010
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <4CD18913.1040305@refractions.net>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>	<055.5245558029b9b184d5c542e8737f9c2e@osgeo.org>
	<4CD18913.1040305@refractions.net>
Message-ID: <4CD1A46C.70303@refractions.net>

I just tried the following approach in JTS, and it works fine (and 
reasonably fast)

- Extract all line segments from the boundary of the polygonal geometry P
- Buffer each line segment by the positive buffer amount (i.e. 8665)
- Union the segment buffers (using UnaryUnion for speed) giving geometry U
- Compute P.difference(U)

In the case given the answer is the empty geometry, as expected.  But 
this approach should work for other situations where a non-empty result 
occurs.

On 11/3/2010 9:08 AM, Martin Davis wrote:
> I checked out this case in JTS, and it has the same symptoms.  The 
> problem is due to the combination of:
>
> - a very complex input geometry
> - a large negative buffer distance, which is the most difficult 
> scenario to compute
>
> If you can run Java 64-bit with lots of memory and have time to wait, 
> you might get an answer out. Otherwise I don't see any simple solution 
> to this problem.  (Actually by manual inspection it looks like the 
> buffer output would be the empty geometry for the given buffer 
> distance. But this isn't a general solution, obviously)
>
> Another way that might work is to buffer the linework of the boundary 
> of the geometry using a positive buffer distance, and then subtract 
> (difference) the result from the original polygon.  However, even the 
> boundary of this polygon is complex enough that the boundary buffer 
> will have to be computed piecewise (i.e. on short sections of the 
> boundary) and then merged.
>
> Martin
>
>
> On 11/3/2010 3:32 AM, GEOS wrote:
>> #383: huge memory cost and crash in buffer
>> ------------------------+--------------------------------------------------- 
>>
>>   Reporter:  atubar      |       Owner:  geos-devel@?
>>       Type:  defect      |      Status:  new
>>   Priority:  major       |   Milestone:  3.2.1
>> Component:  Default     |     Version:  3.2.0
>>   Severity:  Unassigned  |    Keywords:
>> ------------------------+--------------------------------------------------- 
>>
>>
>> Comment(by atubar):
>>
>>   We need to do buffer operation in our program. Often the single 
>> geometry
>>   is huge, and the shapefile is big and contain many geometry.
>>   So what's the best way that you can show us?
>>
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From strk at keybit.net  Wed Nov 24 04:52:40 2010
From: strk at keybit.net (strk)
Date: Wed Nov 24 04:52:45 2010
Subject: [geos-devel] git repo
Message-ID: <20101124095240.GC6053@keybit.net>

FYI: I've cloned the SVN trunk branch onto
a git repository on github: https://github.com/strk/geos

I'll be using that one for development, in its own
branch. Dunno if git-svn tools are able to replicate
the branching from git to svn but probably isn't worth
it.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From namrata.r.sorte at gmail.com  Thu Nov 25 12:27:10 2010
From: namrata.r.sorte at gmail.com (Namrata Sorte)
Date: Thu Nov 25 12:27:12 2010
Subject: [geos-devel] Error building GEOS enabled in GDAL on Solaris
Message-ID: <AANLkTimeZamK=QJgr+ESAjWNzQa6xYbVnmUgdX0HSyu_@mail.gmail.com>

Hi,

I am facing problem in installing GDAL with GEOS on Solaris. Below are the
steps follwed:
1) Installed GEOS 3.0.0
2) Configure GDAL with following options:
 ./configure  --prefix=/usr/local \
            --with-threads \
            --with-ogr \
            --with-geos=yes \
            --without-libtool \
            --with-libz=internal \
            --with-libtiff=internal \
            --with-geotiff=internal \
            --without-gif \
            --without-pg \
            --without-grass \
            --without-libgrass \
            --without-cfitsio \
            --without-pcraster \
            --without-netcdf \
            --without-png \
            --without-jpeg \
            --without-gif \
            --without-ogdi \
            --without-fme \
            --without-hdf4 \
            --without-hdf5 \
            --without-jasper \
            --without-ecw \
            --without-kakadu \
            --without-mrsid \
            --without-jp2mrsid \
            --without-bsb \
            --without-grib \
            --without-mysql \
            --without-ingres \
            --without-xerces \
            --without-expat \
            --without-odbc \
            --without-curl \
            --without-sqlite3 \
            --without-dwgdirect \
            --without-panorama \
            --without-idb \
            --without-sde \
            --without-perl \
            --without-php \
            --without-ruby \
            --without-python \
            --without-ogpython \
            --with-hide-internal-symbols
3)make
make[1]: Entering directory `/pool1/innovations/gdal-1.7.
1/port'
g++ -g -O2 -fPIC  -Wall  -DOGR_ENABLED -I/pool1/innovations/gdal-1.7.1/port
     -I../frmts/zlib  -DHAVE_LIBZ -c -o cpl_conv.o cpl_conv.cpp
g++ -g -O2 -fPIC  -Wall  -DOGR_ENABLED -I/pool1/innovations/gdal-1.7.1/port
     -I../frmts/zlib  -DHAVE_LIBZ -c -o cpl_error.o cpl_error.cpp
g++ -g -O2 -fPIC  -Wall  -DOGR_ENABLED -I/pool1/innovations/gdal-1.7.1/port
     -I../frmts/zlib  -DHAVE_LIBZ -c -o cpl_string.o cpl_string.cpp
........ . . . . .
. .

jpeg_set_defaults                   /pool1/innovations/gdal-1.7.1/libgdal.so

jpeg_CreateCompress                 /pool1/innovations/gdal-1.7.1/libgdal.so

jpeg_read_scanlines                 /pool1/innovations/gdal-1.7.1/libgdal.so

jpeg_start_compress                 /pool1/innovations/gdal-1.7.1/libgdal.so

ld: fatal: Symbol referencing errors. No output written to gdalinfo
collect2: ld returned 1 exit status
make[1]: *** [gdalinfo] Error 1
make[1]: Leaving directory `/pool1/innovations/gdal-1.7.1/apps'
make: *** [apps-target] Error 2

I get error here. I am not able to trace the problem! Don't know if GEOS
installed properly because GDAL was installed properly without geos before
but after reinstalled with GEOS it gives error.

Please help me with this issue.

Thanks,
Namrata
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20101125/318a5758/attachment.html
From strk at keybit.net  Thu Nov 25 12:30:52 2010
From: strk at keybit.net (strk)
Date: Thu Nov 25 12:30:55 2010
Subject: [geos-devel] Error building GEOS enabled in GDAL on Solaris
In-Reply-To: <AANLkTimeZamK=QJgr+ESAjWNzQa6xYbVnmUgdX0HSyu_@mail.gmail.com>
References: <AANLkTimeZamK=QJgr+ESAjWNzQa6xYbVnmUgdX0HSyu_@mail.gmail.com>
Message-ID: <20101125173052.GD48768@keybit.net>

On Thu, Nov 25, 2010 at 10:57:10PM +0530, Namrata Sorte wrote:

>             --without-jpeg \

[...]

> jpeg_set_defaults                   /pool1/innovations/gdal-1.7.1/libgdal.so
> jpeg_CreateCompress                 /pool1/innovations/gdal-1.7.1/libgdal.so
> jpeg_read_scanlines                 /pool1/innovations/gdal-1.7.1/libgdal.so
> jpeg_start_compress                 /pool1/innovations/gdal-1.7.1/libgdal.so
> 
> ld: fatal: Symbol referencing errors. No output written to gdalinfo

Sounds like a bug in GDAL build scripts. GEOS surely doesn't use
any jpeg symbol.

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From jay at zoocasa.com  Tue Nov 30 17:05:35 2010
From: jay at zoocasa.com (J Smith)
Date: Tue Nov 30 17:05:58 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
Message-ID: <AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>

Hello list!

I work on a project that has been using the GEOS Ruby bindings for
years and and we've been adding a bunch of extensions and
modifications to it throughout that time. We've gotten to the point
now where we'd like to release this code into the wild world of free
software and open source and thought we'd drop a line to the
geos-devel list to get some feedback and whatnot before releasing the
code.

We're specifically looking to release the following:

- we've gemified the Ruby bindings portion of the GEOS library so it
can be installed separately from the library itself. It still depends
on the library, obviously, but can be built as a standalone gem. We've
extracted the geos.i.in and ruby.i files from the GEOS tarball and
wrote a gemspec and extconf.rb for it that extracts the relevant
version information from geos_c.h and builds the SWIG output
accordingly.

- we've also extracted the Ruby test files and the gem has been tested
on OSX and CentOS 5.5, although some of the tests appear to fail. (The
tests themselves may be a bit stale, perhaps -- one test looks for a
version string matching "3.0.0rc4-CAPI-1.3.3", for instance.)

As for the extensions to the library, we've implemented the following
in Ruby userland as wrappers and whatnot around the GEOS library:

- a host of helper methods to make reading and writing to and from WKT
and WKB easier. For instance, rather than

Geos::WktReader.new.read('POINT(0 0')

you can quickly use

Geos.read('POINT(0 0)')

The Geos.read method also works with WKB in both binary and hex,
recognizes EWKB and EWKT and can read several of Google Maps
JavaScript output formats that we use for our applications. There are
also similar methods for outputting to WKT and WKB such as
Geos::Geometry#to_wkt, #to_kml, #to_georss and a number of methods to
output to Google Maps API v2-style JavaScript.

- a bunch of helper methods to quickly grab some information from
geometries like Geos::Point#lat and Geos::Point#lng.

- in all, some 70+ helper methods have been added to Geos::Geometry types.

- Geos::GeometryCollection has been made an Enumerable.

We've also included some Rails integration for PostGIS, including:

- automatic detection of geometry columns and just-in-time conversions
for input and output to and from WKB when using PostGIS. This allows
you to do stuff like this with your ActiveRecord models:

m = MyModel.find(12345)
m.the_geom # => spits out the untouched geometry value as a string in WKB
m.the_geom_geos # => spits out the geometry wrapped in a Geos::Geometry object
m.the_geom = 'POINT(0 0)' # => setters will automatically make
conversions from any of the formats that the Geos.read can recognize,
so Google Maps formats, WKT, WKB, etc. are all converted
automatically.
m.the_geom_wkt # => automatically converts to a WKT string
m.the_geom_wkb_bin # => automatically converts to WKB in binary

There's also some funky SRID handling code that will automatically
look in the geometry_columns table to make conversions for you when
necessary. Saving WKT as "SRID=default; POINT(0 0)" for instance will
automatically set the SRID when saving the ActiveRecord, or the SRID
can be specified manually.

- multiple geometry columns are supported and detected for
automatically. These column accessors are all generated dynamically at
run time.

- automatic generation of named scopes for ActiveRecord models. The
usual suspects are supported:

* st_contains
* st_containsproperly
* st_covers
* st_coveredby
* st_crosses
* st_disjoint
* st_equals
* st_intersects
* st_orderingequals
* st_overlaps
* st_touches
* st_within
* st_dwithin

These let you chain together scopes to build geospatial queries:

neighbourhood = Neighbourhood.find(12345)
my_model = MyModel.active.
?recent.
?st_within(neighbourhood.the_geom_geos.envelope).
?st_dwithin(point, 0.1).
?all(
? :limit => 10
?)

- we wrote this code for Rails 2.3 and are currently testing on Rails
3, but it appears that everything is working as expected and is
working with Arel (hopefully!).

Our plan at the moment would be to put the code up on to github along
with the appropriate Rubygems releases. We'd like to license the
extensions code under the MIT license as per the usual Ruby and Rails
library terms. As for the gemified build of the GEOS bindings library
itself, would the correct license in this case be the LGPL? We've
included several files from the main GEOS library along with the Ruby
test files, so would this extend that license to the rest of the gem,
which includes only build files like a Rakefile, extconf.rb and a
gemspec and such. We could otherwise license this gem as perhaps a
combination license -- the files from the GEOS library would be marked
as being covered under the LGPL, while the collection as a whole would
be released under our preferred MIT license.

We hope to release this code soon and hope it proves useful to the
GEOS project and Ruby GIS coders. The GEOS Ruby library has been a
real boon to our development, and we hope that our extensions and the
gem build will be useful to others.

Any comments and suggestions are appreciated.

Cheers!

J
From si at tinypla.net  Tue Nov 30 17:22:43 2010
From: si at tinypla.net (Simon Tokumine)
Date: Tue Nov 30 17:23:06 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
Message-ID: <AANLkTi=1sRK92YfCXyT+UaeAed-fa-1f+CPjreDigJZ8@mail.gmail.com>

This is fantastic news! Really looking forwards to the release, and it
lets me cross off a big to-do from my list :)

All the best,

Simon



On Tue, Nov 30, 2010 at 10:05 PM, J Smith <jay@zoocasa.com> wrote:
> Hello list!
>
> I work on a project that has been using the GEOS Ruby bindings for
> years and and we've been adding a bunch of extensions and
> modifications to it throughout that time. We've gotten to the point
> now where we'd like to release this code into the wild world of free
> software and open source and thought we'd drop a line to the
> geos-devel list to get some feedback and whatnot before releasing the
> code.
>
> We're specifically looking to release the following:
>
> - we've gemified the Ruby bindings portion of the GEOS library so it
> can be installed separately from the library itself. It still depends
> on the library, obviously, but can be built as a standalone gem. We've
> extracted the geos.i.in and ruby.i files from the GEOS tarball and
> wrote a gemspec and extconf.rb for it that extracts the relevant
> version information from geos_c.h and builds the SWIG output
> accordingly.
>
> - we've also extracted the Ruby test files and the gem has been tested
> on OSX and CentOS 5.5, although some of the tests appear to fail. (The
> tests themselves may be a bit stale, perhaps -- one test looks for a
> version string matching "3.0.0rc4-CAPI-1.3.3", for instance.)
>
> As for the extensions to the library, we've implemented the following
> in Ruby userland as wrappers and whatnot around the GEOS library:
>
> - a host of helper methods to make reading and writing to and from WKT
> and WKB easier. For instance, rather than
>
> Geos::WktReader.new.read('POINT(0 0')
>
> you can quickly use
>
> Geos.read('POINT(0 0)')
>
> The Geos.read method also works with WKB in both binary and hex,
> recognizes EWKB and EWKT and can read several of Google Maps
> JavaScript output formats that we use for our applications. There are
> also similar methods for outputting to WKT and WKB such as
> Geos::Geometry#to_wkt, #to_kml, #to_georss and a number of methods to
> output to Google Maps API v2-style JavaScript.
>
> - a bunch of helper methods to quickly grab some information from
> geometries like Geos::Point#lat and Geos::Point#lng.
>
> - in all, some 70+ helper methods have been added to Geos::Geometry types.
>
> - Geos::GeometryCollection has been made an Enumerable.
>
> We've also included some Rails integration for PostGIS, including:
>
> - automatic detection of geometry columns and just-in-time conversions
> for input and output to and from WKB when using PostGIS. This allows
> you to do stuff like this with your ActiveRecord models:
>
> m = MyModel.find(12345)
> m.the_geom # => spits out the untouched geometry value as a string in WKB
> m.the_geom_geos # => spits out the geometry wrapped in a Geos::Geometry object
> m.the_geom = 'POINT(0 0)' # => setters will automatically make
> conversions from any of the formats that the Geos.read can recognize,
> so Google Maps formats, WKT, WKB, etc. are all converted
> automatically.
> m.the_geom_wkt # => automatically converts to a WKT string
> m.the_geom_wkb_bin # => automatically converts to WKB in binary
>
> There's also some funky SRID handling code that will automatically
> look in the geometry_columns table to make conversions for you when
> necessary. Saving WKT as "SRID=default; POINT(0 0)" for instance will
> automatically set the SRID when saving the ActiveRecord, or the SRID
> can be specified manually.
>
> - multiple geometry columns are supported and detected for
> automatically. These column accessors are all generated dynamically at
> run time.
>
> - automatic generation of named scopes for ActiveRecord models. The
> usual suspects are supported:
>
> * st_contains
> * st_containsproperly
> * st_covers
> * st_coveredby
> * st_crosses
> * st_disjoint
> * st_equals
> * st_intersects
> * st_orderingequals
> * st_overlaps
> * st_touches
> * st_within
> * st_dwithin
>
> These let you chain together scopes to build geospatial queries:
>
> neighbourhood = Neighbourhood.find(12345)
> my_model = MyModel.active.
> ?recent.
> ?st_within(neighbourhood.the_geom_geos.envelope).
> ?st_dwithin(point, 0.1).
> ?all(
> ? :limit => 10
> ?)
>
> - we wrote this code for Rails 2.3 and are currently testing on Rails
> 3, but it appears that everything is working as expected and is
> working with Arel (hopefully!).
>
> Our plan at the moment would be to put the code up on to github along
> with the appropriate Rubygems releases. We'd like to license the
> extensions code under the MIT license as per the usual Ruby and Rails
> library terms. As for the gemified build of the GEOS bindings library
> itself, would the correct license in this case be the LGPL? We've
> included several files from the main GEOS library along with the Ruby
> test files, so would this extend that license to the rest of the gem,
> which includes only build files like a Rakefile, extconf.rb and a
> gemspec and such. We could otherwise license this gem as perhaps a
> combination license -- the files from the GEOS library would be marked
> as being covered under the LGPL, while the collection as a whole would
> be released under our preferred MIT license.
>
> We hope to release this code soon and hope it proves useful to the
> GEOS project and Ruby GIS coders. The GEOS Ruby library has been a
> real boon to our development, and we hope that our extensions and the
> gem build will be useful to others.
>
> Any comments and suggestions are appreciated.
>
> Cheers!
>
> J
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From cfis at savagexi.com  Tue Nov 30 19:08:28 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Tue Nov 30 19:30:14 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
Message-ID: <4CF591FC.3070807@savagexi.com>

Hi J,

> We're specifically looking to release the following:
>
> - we've gemified the Ruby bindings portion of the GEOS library so it
> can be installed separately from the library itself. It still depends
> on the library, obviously, but can be built as a standalone gem. We've
> extracted the geos.i.in and ruby.i files from the GEOS tarball and
> wrote a gemspec and extconf.rb for it that extracts the relevant
> version information from geos_c.h and builds the SWIG output
> accordingly.

Great - I think it would be a good idea to package this code as a gem so 
its more easily available to the Ruby community.  Will the gem also 
include the generated swig file (I'd say it probably should to eliminate 
the extra dependency on swig) or have you ported the code to just a 
straight ruby extensions?


> - we've also extracted the Ruby test files and the gem has been tested
> on OSX and CentOS 5.5, although some of the tests appear to fail. (The
> tests themselves may be a bit stale, perhaps -- one test looks for a
> version string matching "3.0.0rc4-CAPI-1.3.3", for instance.)
>
> As for the extensions to the library, we've implemented the following
> in Ruby userland as wrappers and whatnot around the GEOS library:
> - in all, some 70+ helper methods have been added to Geos::Geometry types.

Ok, I've done something similar.  Happy to move over to these.  They are 
in Ruby code I assume?

>
> - Geos::GeometryCollection has been made an Enumerable.

Cool.

>
> We've also included some Rails integration for PostGIS, including:

> Our plan at the moment would be to put the code up on to github along
> with the appropriate Rubygems releases.

How about two gems.  One for the geos bindings, and then a separate one 
for rails.  That way people don't have to have the extra rails code if 
they don't want it.

Charlie
From jay at zoocasa.com  Tue Nov 30 19:57:55 2010
From: jay at zoocasa.com (J Smith)
Date: Tue Nov 30 19:58:17 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <4CF591FC.3070807@savagexi.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
Message-ID: <AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>

Hey Charlie.

Just to start off with, as I believe you were the original author of
the SWIG bindings: thanks for the Ruby library! When we first
discovered it we were ecstatic, 'cause the Ruby-based solutions we
were looking at at the time were prohibitively slow. Nothing beats
native libraries (usually, at least), especially when you're dealing
with geometries that have potentially tens of thousands of vertices.

On Tue, Nov 30, 2010 at 7:08 PM, Charlie Savage <cfis@savagexi.com> wrote:
>
> Great - I think it would be a good idea to package this code as a gem so its
> more easily available to the Ruby community. ?Will the gem also include the
> generated swig file (I'd say it probably should to eliminate the extra
> dependency on swig) or have you ported the code to just a straight ruby
> extensions?
>

At the moment I just took the SWIG files and am generating the
geos_wrap.cxx file as per the original build, but thinking on it a bit
more, it doesn't really seem necessary. One of the potential problems
with the SWIG files is that some Ruby constants are filled in at build
time rather than run time, and that could become problematic -- if you
built the gem against GEOS 3.2.0, for instance, but later upgraded the
library itself to GEOS 3.2.2, your Ruby gem would still be reporting
the 3.2.0 version numbers as it was built.

What I think I'll do is just generate the geos_wrap.cxx file from the
SWIG files and use that along with some additions to handle extracting
the version numbers from the GEOS library at run time rather than at
build time. I see that the geos::geom::geosversion() method will
return the GEOS version and in the CAPI GEOSversion() function will
return the CAPI information. I think that would be enough for the
version numbers to be extracted, yeah? I'll give it a shot at any
rate.

> Ok, I've done something similar. ?Happy to move over to these. ?They are in
> Ruby code I assume?
>

All of the extensions are in plain ol' Ruby code.

> How about two gems. ?One for the geos bindings, and then a separate one for
> rails. ?That way people don't have to have the extra rails code if they
> don't want it.
>

I think the plan at the moment is two gems -- one that strictly builds
the GEOS binary and a separate one that contains all of the extension
code plus the Rails integration. The Rails integration is pretty
compact and only gets included when Rails tries to use the gem, so
normal Ruby should never feel the effects.

I'm going to mess around with the generated SWIG code and see what I
can do about removing SWIG as dependency and get the version numbers
working. Once we're ready, I think we'll be posting the project to
github and open things up for patches before we roll releases, just to
give everyone a chance to take a look at the code and make sure it's
sane. Hopefully we'll be ready to do so within the week, so wish us
luck.

Cheers...

J
From jay at zoocasa.com  Tue Nov 30 21:49:58 2010
From: jay at zoocasa.com (J Smith)
Date: Tue Nov 30 21:50:20 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
Message-ID: <AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>

Alright, all, that wasn't too bad...

Using the output from geos.i, I removed the version number constants
that get sorted out when geos.i is generated and which in turn is used
to generate geos_wrap.cxx. Instead of hard coding the constants at
build time, we can just use rb_eval_string during the extension
initialization to extract the version numbers from the Geos.version
method. For the GEOS_JTS_PORT constant, I noticed that the
GEOSjtsport() function isn't exported for the CAPI in geos_c.h, but I
extern'd it in the Ruby extension anyways to extract the version
information. Is GEOSjtsport() unsafe to use for such purposes? It
seems to be similar enough to GEOSversion() that it could probably be
available in the CAPI, no? If GEOSjtsport is unsafe to use I'll remove
it, though; I just wanted to retain complete compatibility with
existing constants is all. Is GEOS_JTS_PORT a particularly useful
constant? I've never had to use it, but then again I don't use JTS
myself directly. (As an aside, I also added a I've also ssws a
Geos.jts_port method similar to the Geos.version method.)

At any rate, the version constants can now be created at extension
initialization so they won't be dependant the geos.i file any more and
SWIG can presumably be removed from the build process.

Thoughts?
