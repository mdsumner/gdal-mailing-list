From bontepaarden at gmail.com  Thu Apr 11 11:57:30 2019
From: bontepaarden at gmail.com (Paul Meems)
Date: Thu, 11 Apr 2019 20:57:30 +0200
Subject: [geos-devel] Removing multiple vertices
Message-ID: <CAHNf2YSuTAXs5FAY8Pv69yKCaUXXLSEgNP1V4TxeTjwgHFUPHg@mail.gmail.com>

Hello,

Currently, I'm working on improving the Shapefile editor of
MapWinGIS/MapWindow5.
Under the hood, it is using a lot of GEOS functions.

When opening a shapefile we can draw a temporary polygon and use it to
erase a part of the shapefile. We use GEOS::Difference to 'eat' the drawn
polygon from the shapefile.
This works fine.

We now want a similar option. But this time not 'stamp' the drawn polygon
on the shapefile but remove all vertices of the shapefile that are inside
(under) the drawn polygon.

Does GEOS have a method for that or should I just loop through all vertices
of the shape and check if it is inside the drawn polygon and remove it when
it does?

Thanks for any advice,

Paul

*Paul Meems *
Release manager, configuration manager
and forum moderator of MapWindow GIS.
www.mapwindow.org

Owner of MapWindow.nl - Support for
Dutch speaking users.
www.mapwindow.nl


*The MapWindow GIS project has a new forum
<https://mapwindow.discourse.group>!*


Download the latest MapWinGIS mapping engine.
<https://github.com/MapWindow/MapWinGIS/releases>

Download the latest MapWindow 5 open source desktop application.
<https://github.com/MapWindow/MapWindow5/releases>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190411/b0b86ad8/attachment.html>

From mtnclimb at gmail.com  Thu Apr 11 12:02:35 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 11 Apr 2019 12:02:35 -0700
Subject: [geos-devel] Removing multiple vertices
In-Reply-To: <CAHNf2YSuTAXs5FAY8Pv69yKCaUXXLSEgNP1V4TxeTjwgHFUPHg@mail.gmail.com>
References: <CAHNf2YSuTAXs5FAY8Pv69yKCaUXXLSEgNP1V4TxeTjwgHFUPHg@mail.gmail.com>
Message-ID: <CAK2ens0FhpY_BMm+k0zOO8yyWvcQ=tOt+8NXZzap=UrLzebOEg@mail.gmail.com>

There's no function for doing that in GEOS. So yes, you will have to
implement that yourself, via the approach you suggest.



On Thu, Apr 11, 2019 at 11:57 AM Paul Meems <bontepaarden at gmail.com> wrote:

> Hello,
>
> Currently, I'm working on improving the Shapefile editor of
> MapWinGIS/MapWindow5.
> Under the hood, it is using a lot of GEOS functions.
>
> When opening a shapefile we can draw a temporary polygon and use it to
> erase a part of the shapefile. We use GEOS::Difference to 'eat' the drawn
> polygon from the shapefile.
> This works fine.
>
> We now want a similar option. But this time not 'stamp' the drawn polygon
> on the shapefile but remove all vertices of the shapefile that are inside
> (under) the drawn polygon.
>
> Does GEOS have a method for that or should I just loop through all
> vertices of the shape and check if it is inside the drawn polygon and
> remove it when it does?
>
> Thanks for any advice,
>
> Paul
>
> *Paul Meems *
> Release manager, configuration manager
> and forum moderator of MapWindow GIS.
> www.mapwindow.org
>
> Owner of MapWindow.nl - Support for
> Dutch speaking users.
> www.mapwindow.nl
>
>
> *The MapWindow GIS project has a new forum
> <https://mapwindow.discourse.group>!*
>
>
> Download the latest MapWinGIS mapping engine.
> <https://github.com/MapWindow/MapWinGIS/releases>
>
> Download the latest MapWindow 5 open source desktop application.
> <https://github.com/MapWindow/MapWindow5/releases>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190411/79e28083/attachment.html>

From mtnclimb at gmail.com  Thu Apr 11 13:06:51 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 11 Apr 2019 13:06:51 -0700
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
Message-ID: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>

Sandro, have you had any further thoughts on fixing the performance
regression caused by https://trac.osgeo.org/geos/ticket/837 ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190411/aad3b5e8/attachment.html>

From geos-trac at osgeo.org  Thu Apr 11 13:11:42 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 11 Apr 2019 20:11:42 -0000
Subject: [geos-devel] [GEOS] #867: Regression in union algorithm between
 GEOS 3.6.1 and GEOS 3.6.2
In-Reply-To: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
References: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
Message-ID: <057.0a289398148e4df728b501eeef5fd7c2@osgeo.org>

#867: Regression in union algorithm between GEOS 3.6.1 and GEOS 3.6.2
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by robe):

 One more complaint about the issue at

 https://lists.osgeo.org/pipermail/postgis-users/2019-April/043307.html

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/867#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Apr 12 14:23:37 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 12 Apr 2019 21:23:37 -0000
Subject: [geos-devel] [GEOS] #867: Regression in union algorithm between
 GEOS 3.6.1 and GEOS 3.6.2
In-Reply-To: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
References: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
Message-ID: <057.f8171111b17e3c20144283dca17acb0a@osgeo.org>

#867: Regression in union algorithm between GEOS 3.6.1 and GEOS 3.6.2
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Martin Davis <mtnclimb@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"1b24aed3c5ef4f972dd46ca46b6b389d02f38136/git" 1b24aed/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="1b24aed3c5ef4f972dd46ca46b6b389d02f38136"
 Rework the logic to cope with unsafe unions by envelope
 (for cases where union snapping alters the result envelope)
 This fixes the performance regression in 3.6.2.

 Fixes #867
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/867#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Apr 12 14:24:38 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 12 Apr 2019 21:24:38 -0000
Subject: [geos-devel] [GEOS] #867: Regression in union algorithm between
 GEOS 3.6.1 and GEOS 3.6.2
In-Reply-To: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
References: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
Message-ID: <057.d0ced6fb718179843b2eab27e07746b3@osgeo.org>

#867: Regression in union algorithm between GEOS 3.6.1 and GEOS 3.6.2
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  blocker     |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by mdavis):

 * status:  closed => reopened
 * resolution:  fixed =>


Comment:

 Reopened until tested.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/867#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Apr 12 14:50:51 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 12 Apr 2019 21:50:51 -0000
Subject: [geos-devel] [GEOS] #867: Regression in union algorithm between
 GEOS 3.6.1 and GEOS 3.6.2
In-Reply-To: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
References: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
Message-ID: <057.f033d875dc557845179375b740ce07e4@osgeo.org>

#867: Regression in union algorithm between GEOS 3.6.1 and GEOS 3.6.2
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  blocker     |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Further details on
 [https://trac.osgeo.org/geos/changeset/1b24aed3c5ef4f972dd46ca46b6b389d02f38136/git
 performance fix]:

 For the test data in the [https://lists.osgeo.org/pipermail/postgis-
 users/2019-April/043307.html 2019-Apr-11] thread the GEOS performance goes
 from 150s to 111 s.

 All unit tests pass, as does the #837 test case.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/867#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Apr 12 14:54:07 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 12 Apr 2019 21:54:07 -0000
Subject: [geos-devel] [GEOS] #867: Regression in union algorithm between
 GEOS 3.6.1 and GEOS 3.6.2
In-Reply-To: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
References: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
Message-ID: <057.d9e77cfcc44b5e598d0f3b434b28bd60@osgeo.org>

#867: Regression in union algorithm between GEOS 3.6.1 and GEOS 3.6.2
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  blocker     |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 For the data in [https://trac.osgeo.org/postgis/ticket/4075 PostGIS ticket
 4075] performance improves to 40 s  from 205 s.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/867#comment:11>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Apr 12 14:54:39 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 12 Apr 2019 21:54:39 -0000
Subject: [geos-devel] [GEOS] #867: Regression in union algorithm between
 GEOS 3.6.1 and GEOS 3.6.2
In-Reply-To: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
References: <042.ca6de3222be0e0fe403bb0f197ebe943@osgeo.org>
Message-ID: <057.12e491f5aaeb6df3683ffc05ce18256c@osgeo.org>

#867: Regression in union algorithm between GEOS 3.6.1 and GEOS 3.6.2
------------------------+---------------------
 Reporter:  robe        |       Owner:  mdavis
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------
Changes (by mdavis):

 * status:  reopened => new
 * owner:  geos-devel@… => mdavis


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/867#comment:12>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at kbt.io  Sun Apr 14 23:01:35 2019
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 15 Apr 2019 08:01:35 +0200
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
Message-ID: <20190415060135.GA9108@liz>

On Thu, Apr 11, 2019 at 01:06:51PM -0700, Martin Davis wrote:
> Sandro, have you had any further thoughts on fixing the performance
> regression caused by https://trac.osgeo.org/geos/ticket/837 ?

There are a few TODO comments left in code, which do look aimed at
improving performance. WARNING: there's some "environment" written
instead of "envelope" (confused mind).

--strk;

From strk at kbt.io  Mon Apr 15 00:02:23 2019
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 15 Apr 2019 09:02:23 +0200
Subject: [geos-devel] [geos-commits] [SCM] GEOS branch master updated.
 a276208d4e887895ce841f76d5a71131d7f49cc1
In-Reply-To: <20190412173349.AD7D23902A9@trac.osgeo.org>
References: <20190412173349.AD7D23902A9@trac.osgeo.org>
Message-ID: <20190415070212.GB10572@liz>

On Fri, Apr 12, 2019 at 10:33:49AM -0700, git at osgeo.org wrote:

> commit a276208d4e887895ce841f76d5a71131d7f49cc1
> Author: Martin Davis <mtnclimb at gmail.co>
> Date:   Fri Apr 12 10:33:28 2019 -0700
> 
>     Add tests README
> 

[...]

> +### Autotools
> +
> +* Executables are in-tree
> +  * `tests/unit/geos_unit`
> +  * `tests/xmltests/XMLtester`
> +
> +### CMake
> +
> +* Executables are in build directory (usually `../build`)
> +  * `../build/bin/test_geos_unit`
> +  * `../build/bin/test_xmltester`

The differenc above is not true, GEOS executables are also
in "build directory". Where the build directory is depends
on where you call "configure" from. This will work:

  src$ mkdir ../bld && cd ../build
  build$ ../src/configure && make

With the above setup the executables will be in:

    build/unit/geos_unit
    build/xmltess/XMLtester

--strk;

From mtnclimb at gmail.com  Mon Apr 15 15:45:38 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Mon, 15 Apr 2019 15:45:38 -0700
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <20190415060135.GA9108@liz>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
Message-ID: <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>

On Sun, Apr 14, 2019 at 11:41 PM Sandro Santilli <strk at kbt.io> wrote:

> On Thu, Apr 11, 2019 at 01:06:51PM -0700, Martin Davis wrote:
> > Sandro, have you had any further thoughts on fixing the performance
> > regression caused by https://trac.osgeo.org/geos/ticket/837 ?
>
> There are a few TODO comments left in code, which do look aimed at
> improving performance. WARNING: there's some "environment" written
> instead of "envelope" (confused mind).
>
>
> Yes, I saw those, and they make sense as being a safe optimization.  Not
sure they will deliver much of a performance boost - but need to code the
iterative approach up to be sure.

I do have a slightly changed patch which runs all current test cases
correctly, and provides similar performance to the original
implementation.  The only catch is that I think it is theoretically not
100% safe, since it still leaves a small opening for having geometry
perturbed by the union causing overlaps and thus invalid output.  This
should be very rare though.  I will push a PR soon with this fix.  Perhaps
it's possible to give it a more thorough stress test and if it passes
switch to using it.

Ultimately I think the ideal approach is going to be abandoning
CascadedUnion and switch to a full union algorithm (which will essentially
be the same as running buffer(0).  This should have very good performance.

It's also possible that there is a further optimization possible for
situations with many disjoint polygons (as in both of the provided
regression cases). This would depend on being able to carry out an
interesects test faster than a full union computation, which seems possible
(something similar is already recommended as an optimization for
intersection).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190415/a9a29828/attachment.html>

From me at komzpa.net  Tue Apr 16 05:26:58 2019
From: me at komzpa.net (=?UTF-8?Q?Darafei_=22Kom=D1=8Fpa=22_Praliaskouski?=)
Date: Tue, 16 Apr 2019 15:26:58 +0300
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
Message-ID: <CAC8Q8tKFo1HFSQTkKEvWObfGSuCELAkzOKFVad9jKFkOmssTuQ@mail.gmail.com>

Hello,


> Ultimately I think the ideal approach is going to be abandoning
> CascadedUnion and switch to a full union algorithm (which will essentially
> be the same as running buffer(0).  This should have very good performance.
>

 We're using PostGIS's ST_Union to dissolve a clipped TIN into a polygon.
Current ST_Union implementation handles this measurably faster than
ST_Buffer(ST_Collect(geom),0). Please keep this case in mind.


-- 
Darafei Praliaskouski
Support me: http://patreon.com/komzpa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190416/efdaba02/attachment.html>

From mtnclimb at gmail.com  Tue Apr 16 08:06:41 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 16 Apr 2019 08:06:41 -0700
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAC8Q8tKFo1HFSQTkKEvWObfGSuCELAkzOKFVad9jKFkOmssTuQ@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
 <CAC8Q8tKFo1HFSQTkKEvWObfGSuCELAkzOKFVad9jKFkOmssTuQ@mail.gmail.com>
Message-ID: <CAK2ens1hjJrb+DgENUZFp1tWkD4Lbc0G=ko8Wmv8uHvwDZLGPA@mail.gmail.com>

That's good to know, Darafei.   Can you provide a data example that we can
use for doing performance testing?

I'm not seeing that JTS buffer(0) is slower than union() on a random
triangulation.  So perhaps either your dataset has some different
characteristic, or possibly GEOS buffer has different performance
characteristics to JTS.

On Tue, Apr 16, 2019 at 5:27 AM Darafei "Komяpa" Praliaskouski <
me at komzpa.net> wrote:

> Hello,
>
>
>> Ultimately I think the ideal approach is going to be abandoning
>> CascadedUnion and switch to a full union algorithm (which will essentially
>> be the same as running buffer(0).  This should have very good performance.
>>
>
>  We're using PostGIS's ST_Union to dissolve a clipped TIN into a polygon.
> Current ST_Union implementation handles this measurably faster than
> ST_Buffer(ST_Collect(geom),0). Please keep this case in mind.
>
>
> --
> Darafei Praliaskouski
> Support me: http://patreon.com/komzpa
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190416/1f2afb98/attachment.html>

From dbaston at gmail.com  Tue Apr 16 08:21:09 2019
From: dbaston at gmail.com (Daniel Baston)
Date: Tue, 16 Apr 2019 11:21:09 -0400
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAK2ens1hjJrb+DgENUZFp1tWkD4Lbc0G=ko8Wmv8uHvwDZLGPA@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
 <CAC8Q8tKFo1HFSQTkKEvWObfGSuCELAkzOKFVad9jKFkOmssTuQ@mail.gmail.com>
 <CAK2ens1hjJrb+DgENUZFp1tWkD4Lbc0G=ko8Wmv8uHvwDZLGPA@mail.gmail.com>
Message-ID: <CA+K_q_qLh3TJz-pBciEJ_q43k-uDqwPUNVvc8GHYrRyebEoEGw@mail.gmail.com>

Either way, the union of a polygonal coverage is a common special case that
would benefit from having its own algorithm. I implemented this for PostGIS
a couple of years ago, though there didn't seem to be much interest at the
time [1]. It's probably a better fit for GEOS anyway. I wrote a fairly ugly
Java implementation several years ago [2] that I could re-do to take
advantage of recent polygonizer improvements and bring into GEOS.

Dan

[1] https://lists.osgeo.org/pipermail/postgis-devel/2016-April/025784.html
[2]
https://github.com/dbaston/CoverageOp/tree/master/src/main/java/org/dbaston/coverageop

On Tue, Apr 16, 2019 at 11:06 AM Martin Davis <mtnclimb at gmail.com> wrote:

> That's good to know, Darafei.   Can you provide a data example that we can
> use for doing performance testing?
>
> I'm not seeing that JTS buffer(0) is slower than union() on a random
> triangulation.  So perhaps either your dataset has some different
> characteristic, or possibly GEOS buffer has different performance
> characteristics to JTS.
>
> On Tue, Apr 16, 2019 at 5:27 AM Darafei "Komяpa" Praliaskouski <
> me at komzpa.net> wrote:
>
>> Hello,
>>
>>
>>> Ultimately I think the ideal approach is going to be abandoning
>>> CascadedUnion and switch to a full union algorithm (which will essentially
>>> be the same as running buffer(0).  This should have very good performance.
>>>
>>
>>  We're using PostGIS's ST_Union to dissolve a clipped TIN into a polygon.
>> Current ST_Union implementation handles this measurably faster than
>> ST_Buffer(ST_Collect(geom),0). Please keep this case in mind.
>>
>>
>> --
>> Darafei Praliaskouski
>> Support me: http://patreon.com/komzpa
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190416/8d8e18ff/attachment.html>

From mtnclimb at gmail.com  Tue Apr 16 08:39:33 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 16 Apr 2019 08:39:33 -0700
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CA+K_q_qLh3TJz-pBciEJ_q43k-uDqwPUNVvc8GHYrRyebEoEGw@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
 <CAC8Q8tKFo1HFSQTkKEvWObfGSuCELAkzOKFVad9jKFkOmssTuQ@mail.gmail.com>
 <CAK2ens1hjJrb+DgENUZFp1tWkD4Lbc0G=ko8Wmv8uHvwDZLGPA@mail.gmail.com>
 <CA+K_q_qLh3TJz-pBciEJ_q43k-uDqwPUNVvc8GHYrRyebEoEGw@mail.gmail.com>
Message-ID: <CAK2ens0EdGtGHOfktbVD0xcocQjTTwtk0zRYOZRCA6fGNkzmYQ@mail.gmail.com>

I've also been thinking that for the case of unioning a polygonal coverage
there could be a much faster algorithm.  Good to hear that you have an
implementation lined up.  Can you work up a GEOS version based on your Java
code?  (And if there are any extension needed to the Polygonizer to support
it, those can be in scope as well).

Are you thinking this would be exposed as a different PostGIS function (say
ST_UnionCoverage)?

I'm aconcerned about what happens if the input is not a valid polygonal
coverage.  It can be very hard to "see" if a dataset is coverage-valid.
(For instance, the dataset of Norwegian poiygons that was posted recently
is *almost* a valid coverage, but out of it's 1.2 M segments has about 3
which cross slightly!  It might be important to provide a IsCoverageValid
function, or perhaps even better a function to report the locations of
crossing segments.  And ideally the ST_UnionCoverage function could report
an error on invalid input - but it's not clear how to do that efficiently,
which would defeat the purpose.


On Tue, Apr 16, 2019 at 8:21 AM Daniel Baston <dbaston at gmail.com> wrote:

> Either way, the union of a polygonal coverage is a common special case
> that would benefit from having its own algorithm. I implemented this for
> PostGIS a couple of years ago, though there didn't seem to be much interest
> at the time [1]. It's probably a better fit for GEOS anyway. I wrote a
> fairly ugly Java implementation several years ago [2] that I could re-do to
> take advantage of recent polygonizer improvements and bring into GEOS.
>
> Dan
>
> [1] https://lists.osgeo.org/pipermail/postgis-devel/2016-April/025784.html
> [2]
> https://github.com/dbaston/CoverageOp/tree/master/src/main/java/org/dbaston/coverageop
>
> On Tue, Apr 16, 2019 at 11:06 AM Martin Davis <mtnclimb at gmail.com> wrote:
>
>> That's good to know, Darafei.   Can you provide a data example that we
>> can use for doing performance testing?
>>
>> I'm not seeing that JTS buffer(0) is slower than union() on a random
>> triangulation.  So perhaps either your dataset has some different
>> characteristic, or possibly GEOS buffer has different performance
>> characteristics to JTS.
>>
>> On Tue, Apr 16, 2019 at 5:27 AM Darafei "Komяpa" Praliaskouski <
>> me at komzpa.net> wrote:
>>
>>> Hello,
>>>
>>>
>>>> Ultimately I think the ideal approach is going to be abandoning
>>>> CascadedUnion and switch to a full union algorithm (which will essentially
>>>> be the same as running buffer(0).  This should have very good performance.
>>>>
>>>
>>>  We're using PostGIS's ST_Union to dissolve a clipped TIN into a
>>> polygon. Current ST_Union implementation handles this measurably faster
>>> than ST_Buffer(ST_Collect(geom),0). Please keep this case in mind.
>>>
>>>
>>> --
>>> Darafei Praliaskouski
>>> Support me: http://patreon.com/komzpa
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190416/13c9b1c1/attachment-0001.html>

From dbaston at gmail.com  Tue Apr 16 08:48:32 2019
From: dbaston at gmail.com (Daniel Baston)
Date: Tue, 16 Apr 2019 11:48:32 -0400
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAK2ens0EdGtGHOfktbVD0xcocQjTTwtk0zRYOZRCA6fGNkzmYQ@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
 <CAC8Q8tKFo1HFSQTkKEvWObfGSuCELAkzOKFVad9jKFkOmssTuQ@mail.gmail.com>
 <CAK2ens1hjJrb+DgENUZFp1tWkD4Lbc0G=ko8Wmv8uHvwDZLGPA@mail.gmail.com>
 <CA+K_q_qLh3TJz-pBciEJ_q43k-uDqwPUNVvc8GHYrRyebEoEGw@mail.gmail.com>
 <CAK2ens0EdGtGHOfktbVD0xcocQjTTwtk0zRYOZRCA6fGNkzmYQ@mail.gmail.com>
Message-ID: <CA+K_q_rXxO6o=9vZMCMXq90jM0RzDd8x+ELagZoYFGgxx5QNPA@mail.gmail.com>

My PostGIS implementation may be lost to time, but I can put together a
GEOS implementation during or maybe before the sprint.

Yes, if exposed in PostGIS it would have to be as a separate function. One
correctness check is that area is preserved; it's difficult for me to
imagine a case where the algorithm I described produces an incorrect result
that still preserves area, but perhaps it's possible.

I used it most often for unioning subsets of triangulations or Voronoi
diagrams, but it did produce correct results on every TIGER dataset I
tried. It is tolerant of some noding errors, as long as they're not on a
boundary of the dissolved polygon.

Dan

On Tue, Apr 16, 2019 at 11:38 AM Martin Davis <mtnclimb at gmail.com> wrote:

> I've also been thinking that for the case of unioning a polygonal coverage
> there could be a much faster algorithm.  Good to hear that you have an
> implementation lined up.  Can you work up a GEOS version based on your Java
> code?  (And if there are any extension needed to the Polygonizer to support
> it, those can be in scope as well).
>
> Are you thinking this would be exposed as a different PostGIS function
> (say ST_UnionCoverage)?
>
> I'm aconcerned about what happens if the input is not a valid polygonal
> coverage.  It can be very hard to "see" if a dataset is coverage-valid.
> (For instance, the dataset of Norwegian poiygons that was posted recently
> is *almost* a valid coverage, but out of it's 1.2 M segments has about 3
> which cross slightly!  It might be important to provide a IsCoverageValid
> function, or perhaps even better a function to report the locations of
> crossing segments.  And ideally the ST_UnionCoverage function could report
> an error on invalid input - but it's not clear how to do that efficiently,
> which would defeat the purpose.
>
>
> On Tue, Apr 16, 2019 at 8:21 AM Daniel Baston <dbaston at gmail.com> wrote:
>
>> Either way, the union of a polygonal coverage is a common special case
>> that would benefit from having its own algorithm. I implemented this for
>> PostGIS a couple of years ago, though there didn't seem to be much interest
>> at the time [1]. It's probably a better fit for GEOS anyway. I wrote a
>> fairly ugly Java implementation several years ago [2] that I could re-do to
>> take advantage of recent polygonizer improvements and bring into GEOS.
>>
>> Dan
>>
>> [1]
>> https://lists.osgeo.org/pipermail/postgis-devel/2016-April/025784.html
>> [2]
>> https://github.com/dbaston/CoverageOp/tree/master/src/main/java/org/dbaston/coverageop
>>
>> On Tue, Apr 16, 2019 at 11:06 AM Martin Davis <mtnclimb at gmail.com> wrote:
>>
>>> That's good to know, Darafei.   Can you provide a data example that we
>>> can use for doing performance testing?
>>>
>>> I'm not seeing that JTS buffer(0) is slower than union() on a random
>>> triangulation.  So perhaps either your dataset has some different
>>> characteristic, or possibly GEOS buffer has different performance
>>> characteristics to JTS.
>>>
>>> On Tue, Apr 16, 2019 at 5:27 AM Darafei "Komяpa" Praliaskouski <
>>> me at komzpa.net> wrote:
>>>
>>>> Hello,
>>>>
>>>>
>>>>> Ultimately I think the ideal approach is going to be abandoning
>>>>> CascadedUnion and switch to a full union algorithm (which will essentially
>>>>> be the same as running buffer(0).  This should have very good performance.
>>>>>
>>>>
>>>>  We're using PostGIS's ST_Union to dissolve a clipped TIN into a
>>>> polygon. Current ST_Union implementation handles this measurably faster
>>>> than ST_Buffer(ST_Collect(geom),0). Please keep this case in mind.
>>>>
>>>>
>>>> --
>>>> Darafei Praliaskouski
>>>> Support me: http://patreon.com/komzpa
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190416/1daa0f97/attachment.html>

From strk at kbt.io  Wed Apr 17 04:01:06 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 17 Apr 2019 13:01:06 +0200
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
Message-ID: <20190417110106.GE6133@liz>

On Mon, Apr 15, 2019 at 03:45:38PM -0700, Martin Davis wrote:

> I do have a slightly changed patch which runs all current test cases
> correctly, and provides similar performance to the original
> implementation.  The only catch is that I think it is theoretically not
> 100% safe, since it still leaves a small opening for having geometry
> perturbed by the union causing overlaps and thus invalid output.  This
> should be very rare though.

I don't think it should be ever accepted for a GEOS algorithm to
possibly return invalid outputs. That's a big cornerstone we're
building on. And was the main reason for me to look for a fix
(callers assume GEOS always returns valid ouput!).

An exception to this rule (always returning valid output) should
always be carefully documented (one case was ClipByBox2d, which
was recently also argued about if I recall correctly).

Can't we just always tell how much the perturbation was, by looking
at the bounding box of the unioned geometries ? I thought that's what
my change was doing but maybe it was just in planning and never went
ahead doing it (your "iterative" approach?)

--strk;

From mtnclimb at gmail.com  Wed Apr 17 08:01:43 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 17 Apr 2019 08:01:43 -0700
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <20190417110106.GE6133@liz>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
 <20190417110106.GE6133@liz>
Message-ID: <CAK2ens0Gsr33B5nfVGOfJDYhfW2WhTjfOdNRP6ob8DgExXWxjw@mail.gmail.com>

On Wed, Apr 17, 2019 at 4:38 AM Sandro Santilli <strk at kbt.io> wrote:

>
>
> I don't think it should be ever accepted for a GEOS algorithm to
> possibly return invalid outputs. That's a big cornerstone we're
> building on. And was the main reason for me to look for a fix
> (callers assume GEOS always returns valid ouput!).
>

Agreed.  Any other way madness lies.

>
> An exception to this rule (always returning valid output) should
> always be carefully documented (one case was ClipByBox2d, which
> was recently also argued about if I recall correctly).
>

Agreed, it might be ok to bend the rule in the following cases:
(a) there is not (yet) an implementation or algorithm that can guarantee
valid output, but the function is still useful
(b) performance when providing invalid output is much better, and
downstream use does not require validity.  (Although this should probably
be exposed as a different function and documented as such)

>
> Can't we just always tell how much the perturbation was, by looking
> at the bounding box of the unioned geometries ? I thought that's what
> my change was doing but maybe it was just in planning and never went
> ahead doing it (your "iterative" approach?)
>

That's the fix that I have now.  In the unionUsingEnvelopeIntersection
function the envelope of the unioned geometries (in the overlap extent) is
compared before and after, and any change triggers dropping back to
computing the full union of both input geometries.  This handles the
previous failure case.

Your previous fix was more conservative, and switched to the slow/safe
logic if there were *any* polygons outside the overlap extent - which means
it almost always was used, and thus the performance impact.

(Kudos to you for finding the failing test case.  Was that just by chance,
or would you be able to give the new potential fix a good workout?)

But... I think there is a slim possibility that:
(a) The envelope does not change
(b) The union moves a line segment slightly (due to snapping or simply by
having a new node introduced)
(c) There is a geometry which lies just outside the overlap extent which is
close enough to the changed segment that it is now intersected

It might be possible to come up with a synthetic test case to demonstrate
this (perhaps using a fixed precision mode, which tends to highlight these
kinds of issues).

One further test would be to compare all the line segments of the union
which lie outside the overlap extent.  If they have not changed then there
should be no risk of an intersection with the other outside polygons.  I
think this should be significantly faster than doing the full union.  I'l
try working that up and see what the impact is.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190417/5e3a90df/attachment.html>

From strk at kbt.io  Wed Apr 17 08:17:23 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 17 Apr 2019 17:17:23 +0200
Subject: [geos-devel] Progress on #837 - TopologyException in UnaryUnion
In-Reply-To: <CAK2ens0Gsr33B5nfVGOfJDYhfW2WhTjfOdNRP6ob8DgExXWxjw@mail.gmail.com>
References: <CAK2ens1JR790pyGTy1b3xY5s+zLZMzLpjoDdt4e=WGQTx+y9Tg@mail.gmail.com>
 <20190415060135.GA9108@liz>
 <CAK2ens2Mf8f3O1KszOqP1-Zv5E0brFxjOV5Ja=6Ox+XQMAC0-w@mail.gmail.com>
 <20190417110106.GE6133@liz>
 <CAK2ens0Gsr33B5nfVGOfJDYhfW2WhTjfOdNRP6ob8DgExXWxjw@mail.gmail.com>
Message-ID: <20190417151723.GG6133@liz>

On Wed, Apr 17, 2019 at 08:01:43AM -0700, Martin Davis wrote:

> (Kudos to you for finding the failing test case.  Was that just by chance,
> or would you be able to give the new potential fix a good workout?)

I think it was reported by a user of PostGIS Topology, where unions is
used heavily. I probably just reduced the testcase. No time to stress
new implementation out (but build PostGIS Topology, it's so easy to
get exceptions ! :)

> But... I think there is a slim possibility that:
> (a) The envelope does not change
> (b) The union moves a line segment slightly (due to snapping or simply by
> having a new node introduced)
> (c) There is a geometry which lies just outside the overlap extent which is
> close enough to the changed segment that it is now intersected

By "is now intersected" in (c) you mean it is moved by
snapping/precision-reducing heuristics in further unioning ?
If that's the case, can't we check envelope intersection again
afterwards ?

> It might be possible to come up with a synthetic test case to demonstrate
> this (perhaps using a fixed precision mode, which tends to highlight these
> kinds of issues).

It'd be great to try hard to break it :)

> One further test would be to compare all the line segments of the union
> which lie outside the overlap extent.  If they have not changed then there
> should be no risk of an intersection with the other outside polygons.  I
> think this should be significantly faster than doing the full union.  I'l
> try working that up and see what the impact is.

Thank you, it's great to see you full speed on GEOS !

--strk;

From geos-trac at osgeo.org  Sun Apr 21 03:25:56 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 21 Apr 2019 10:25:56 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
Message-ID: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+--------------------------
 Reporter:  komzpa      |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.6.2
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 We need to node all roads in a city to feed result further into
 triangulation. We found that PostGIS query works ~1500s with ST_Node vs.
 ~200s with ST_UnaryUnion. Looking at the code, JTS uses some snaprounding
 noder and GEOS implementation is stub O(N^2), even though snaprounding
 implementation is available for UnaryUnion.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

