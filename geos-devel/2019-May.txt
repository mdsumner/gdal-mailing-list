From strk at kbt.io  Wed May  1 01:12:01 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 1 May 2019 10:12:01 +0200
Subject: [geos-devel] OSGeoLive 13.0 - which version of geos should be
	installed?
In-Reply-To: <000000000000917da90587bba308@google.com>
References: <000000000000917da90587bba308@google.com>
Message-ID: <20190501081201.GB4860@liz>

Paul, Martin: do you have any plan for a next GEOS release or should
we tell Astrid to go with 3.7.0 ? I'm guessing 3.7.1 could be nice,
having these fixes:

  - Envelope constructor using strtod (#875 Paul Ramsey)
  - Failure in CMake for OSX Framework (#936 Paul Ramsey)
  - Polygon build failure in Overlay difference (#789 Paul Ramsey)
  - Invalid union result from valid polygon inputs (#838)

--strk;

On Tue, Apr 30, 2019 at 09:00:56AM +0000, astroidex at gmail.com wrote:
> Hi Sandro, Frank,
> 
> The OSGeoLive 13.0 build cycle has started and we already have a build.
> 
> Please download alpha1 version and check your application/data [1]
> http://aiolos.survey.ntua.gr/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso (3.8
> GB)
> http://osprey.ucdavis.edu/downloads/osgeo/gisvm/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso
> (3.8 GB)
> 
> Many projects have already updated their software and are included in
> alpha1. Thank you.
> 
> You can find a list of software versions at:
> 
> https://github.com/OSGeo/OSGeoLive/blob/master/CHANGES.txt
> 
> If your project geos is not available yet, please provide it by 25 June
> 2019.
> 
> * please change your installer at Github [2] or provide a package.
> 
> Key Milestones - see schedule [4]
> 25-June-2019 OSGeoLive Feature Freeze (final application versions installed)
> 09-Jul-2019 English Project Overviews & Quickstarts complete (commit your
> changes on github)
>   Note: our documentation translation has moved to Transifex [3]
> 16-Jul-2019 OSGeoLive RC stage (documentation release)
> 23-Jul-2019 Translations complete (translations are done in Transifex)  [3]
> 30-Jul-2019 OSGeoLive Final ISO
> 26-Aug-2019 FOSS4G 2019 Bucharest, Romania [5]
> 
> Any questions, please ask on the OSGeoLive mailing list [6]  or  meet the
> osgeolive team on irc #osgeolive or contact me directly.
> 
> Warm regards,
> 
> Astrid Emde and the OSGeoLive Team
> 
> [1] http://aiolos.survey.ntua.gr/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso
> (3.8 GB)
> http://osprey.ucdavis.edu/downloads/osgeo/gisvm/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso
> [2] https://trac.osgeo.org/osgeolive/wiki/Source_code
> [3] https://wiki.osgeo.org/wiki/OSGeoLive#Translate
> [4] https://trac.osgeo.org/osgeolive/wiki/Release%20Schedule
> [5] http://2019.foss4g.org/
> [6] https://live.osgeo.org/en/contact.html
> 
> 
> 
> 

From pramsey at cleverelephant.ca  Wed May  1 06:39:26 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 1 May 2019 06:39:26 -0700
Subject: [geos-devel] OSGeoLive 13.0 - which version of geos should be
	installed?
In-Reply-To: <20190501081201.GB4860@liz>
References: <000000000000917da90587bba308@google.com>
 <20190501081201.GB4860@liz>
Message-ID: <0F6024C0-54FB-43C5-B79F-E27308B54C7E@cleverelephant.ca>

I’ll push a patch release out, always good to get changes. Next big release, 3.8, am aiming for the Pg12/PostGIS3 rapture.
P

> On May 1, 2019, at 1:12 AM, Sandro Santilli <strk at kbt.io> wrote:
> 
> Paul, Martin: do you have any plan for a next GEOS release or should
> we tell Astrid to go with 3.7.0 ? I'm guessing 3.7.1 could be nice,
> having these fixes:
> 
>  - Envelope constructor using strtod (#875 Paul Ramsey)
>  - Failure in CMake for OSX Framework (#936 Paul Ramsey)
>  - Polygon build failure in Overlay difference (#789 Paul Ramsey)
>  - Invalid union result from valid polygon inputs (#838)
> 
> --strk;
> 
> On Tue, Apr 30, 2019 at 09:00:56AM +0000, astroidex at gmail.com wrote:
>> Hi Sandro, Frank,
>> 
>> The OSGeoLive 13.0 build cycle has started and we already have a build.
>> 
>> Please download alpha1 version and check your application/data [1]
>> http://aiolos.survey.ntua.gr/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso (3.8
>> GB)
>> http://osprey.ucdavis.edu/downloads/osgeo/gisvm/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso
>> (3.8 GB)
>> 
>> Many projects have already updated their software and are included in
>> alpha1. Thank you.
>> 
>> You can find a list of software versions at:
>> 
>> https://github.com/OSGeo/OSGeoLive/blob/master/CHANGES.txt
>> 
>> If your project geos is not available yet, please provide it by 25 June
>> 2019.
>> 
>> * please change your installer at Github [2] or provide a package.
>> 
>> Key Milestones - see schedule [4]
>> 25-June-2019 OSGeoLive Feature Freeze (final application versions installed)
>> 09-Jul-2019 English Project Overviews & Quickstarts complete (commit your
>> changes on github)
>>  Note: our documentation translation has moved to Transifex [3]
>> 16-Jul-2019 OSGeoLive RC stage (documentation release)
>> 23-Jul-2019 Translations complete (translations are done in Transifex)  [3]
>> 30-Jul-2019 OSGeoLive Final ISO
>> 26-Aug-2019 FOSS4G 2019 Bucharest, Romania [5]
>> 
>> Any questions, please ask on the OSGeoLive mailing list [6]  or  meet the
>> osgeolive team on irc #osgeolive or contact me directly.
>> 
>> Warm regards,
>> 
>> Astrid Emde and the OSGeoLive Team
>> 
>> [1] http://aiolos.survey.ntua.gr/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso
>> (3.8 GB)
>> http://osprey.ucdavis.edu/downloads/osgeo/gisvm/gisvm/13.0/osgeolive-13.0alpha1-amd64.iso
>> [2] https://trac.osgeo.org/osgeolive/wiki/Source_code
>> [3] https://wiki.osgeo.org/wiki/OSGeoLive#Translate
>> [4] https://trac.osgeo.org/osgeolive/wiki/Release%20Schedule
>> [5] http://2019.foss4g.org/
>> [6] https://live.osgeo.org/en/contact.html
>> 
>> 
>> 
>> 


From pramsey at cleverelephant.ca  Thu May  2 08:54:38 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 2 May 2019 08:54:38 -0700
Subject: [geos-devel] 3.7.1 Release
Message-ID: <E75F11F5-A6D9-4972-AEE9-03783DF9E3C7@cleverelephant.ca>

Hi all, 
I’m about to push out a 3.7.1 patch release, if you have any immediate need to delay that release, please reply here ASAP, otherwise expect to see a release at the end of today, west coast NA.
(Sorry for the short timeline, but I have some vacation/travel stuff coming that will otherwise slow the release a good deal and we need a quick release to support an upcoming OSGeo live release.)
Thanks!
P

From sebastic at xs4all.nl  Thu May  2 09:06:34 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 2 May 2019 18:06:34 +0200
Subject: [geos-devel] 3.7.1 Release
In-Reply-To: <E75F11F5-A6D9-4972-AEE9-03783DF9E3C7@cleverelephant.ca>
References: <E75F11F5-A6D9-4972-AEE9-03783DF9E3C7@cleverelephant.ca>
Message-ID: <f18d068e-5087-30ee-2011-f776d316bb4b@xs4all.nl>

On 5/2/19 5:54 PM, Paul Ramsey wrote:
> I’m about to push out a 3.7.1 patch release

GEOS 3.7.1 was released on 2018-11-29, I guess you mean 3.7.2?

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From pramsey at cleverelephant.ca  Thu May  2 09:11:19 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 2 May 2019 09:11:19 -0700
Subject: [geos-devel] 3.7.1 Release
In-Reply-To: <f18d068e-5087-30ee-2011-f776d316bb4b@xs4all.nl>
References: <E75F11F5-A6D9-4972-AEE9-03783DF9E3C7@cleverelephant.ca>
 <f18d068e-5087-30ee-2011-f776d316bb4b@xs4all.nl>
Message-ID: <35800D65-9A11-46A5-B41F-47EDBCEE0322@cleverelephant.ca>

Yep, sorry, a new patch release, which will necessarily be 3.7.2 :)
P

> On May 2, 2019, at 9:06 AM, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> On 5/2/19 5:54 PM, Paul Ramsey wrote:
>> I’m about to push out a 3.7.1 patch release
> 
> GEOS 3.7.1 was released on 2018-11-29, I guess you mean 3.7.2?
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Thu May  2 15:54:19 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 2 May 2019 15:54:19 -0700
Subject: [geos-devel] 3.7.2 Released
Message-ID: <2A20A840-7917-407B-A1E6-32FF4130C6B6@cleverelephant.ca>

Please see https://trac.osgeo.org/geos <https://trac.osgeo.org/geos>

Just a few changes, getting a release out to bring the latest to OSGeo Live packaging for FOSS4G

Changes in 3.7.2
2019-05-02

- Bug fixes / improvements
  - Envelope constructor using strtod (#875 Paul Ramsey)
  - Failure in CMake for OSX Framework (#936 Paul Ramsey)
  - Polygon build failure in Overlay difference (#789 Paul Ramsey)
  - Invalid union result from valid polygon inputs (#838)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190502/a219ac8e/attachment.html>

From me at komzpa.net  Fri May  3 01:29:30 2019
From: me at komzpa.net (=?UTF-8?Q?Darafei_=22Kom=D1=8Fpa=22_Praliaskouski?=)
Date: Fri, 3 May 2019 11:29:30 +0300
Subject: [geos-devel] 3.7.2 Released
In-Reply-To: <2A20A840-7917-407B-A1E6-32FF4130C6B6@cleverelephant.ca>
References: <2A20A840-7917-407B-A1E6-32FF4130C6B6@cleverelephant.ca>
Message-ID: <CAC8Q8t+gAR8hXZgWH2+fzkzVMKZ=pNkYfydcU9sTpAriU5uXig@mail.gmail.com>

Thanks!
Updated PostGIS recommended versions:
https://trac.osgeo.org/postgis/wiki/UsersWikiPostgreSQLPostGIS

On Fri, May 3, 2019 at 1:54 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Please see https://trac.osgeo.org/geos
>
> Just a few changes, getting a release out to bring the latest to OSGeo
> Live packaging for FOSS4G
>
> Changes in 3.7.2
> 2019-05-02
>
> - Bug fixes / improvements
>   - Envelope constructor using strtod (#875 Paul Ramsey)
>   - Failure in CMake for OSX Framework (#936 Paul Ramsey)
>   - Polygon build failure in Overlay difference (#789 Paul Ramsey)
>   - Invalid union result from valid polygon inputs (#838)
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



-- 
Darafei Praliaskouski
Support me: http://patreon.com/komzpa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190503/dce0dd04/attachment.html>

From strk at kbt.io  Fri May  3 07:36:31 2019
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 3 May 2019 16:36:31 +0200
Subject: [geos-devel] 3.7.2 Released
In-Reply-To: <2A20A840-7917-407B-A1E6-32FF4130C6B6@cleverelephant.ca>
References: <2A20A840-7917-407B-A1E6-32FF4130C6B6@cleverelephant.ca>
Message-ID: <20190503143631.GB8085@liz>

On Thu, May 02, 2019 at 03:54:19PM -0700, Paul Ramsey wrote:
> Please see https://trac.osgeo.org/geos <https://trac.osgeo.org/geos>

The above link is a bit generic...

Did you forget to `git push --tags` ? Because I see no 3.7.2. tag in
repo, which is also reflected by
https://git.osgeo.org/gitea/geos/geos/releases

--strk;

From geos-trac at osgeo.org  Wed May  8 16:52:10 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 08 May 2019 23:52:10 -0000
Subject: [geos-devel] [GEOS] #727: Port Polygonizer support for valid
 polygonal output from JTS
In-Reply-To: <042.1be7a6688f09de7627550f99b1a6a174@osgeo.org>
References: <042.1be7a6688f09de7627550f99b1a6a174@osgeo.org>
Message-ID: <057.81a3a4719ffd1f46c44672bfec9529e6@osgeo.org>

#727: Port Polygonizer support for valid polygonal output from JTS
-------------------------+----------------------
 Reporter:  strk         |       Owner:  dbaston
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  3.8.0
Component:  Default      |     Version:  master
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+----------------------
Changes (by dbaston):

 * owner:  geos-devel@… => dbaston
 * milestone:  GEOS Fund Me => 3.8.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/727#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed May  8 16:52:21 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 08 May 2019 23:52:21 -0000
Subject: [geos-devel] [GEOS] #748: Port Polygonizer performance
 improvement from JTS-1.13
In-Reply-To: <042.28a55ac2d602b9217a2700be652f331c@osgeo.org>
References: <042.28a55ac2d602b9217a2700be652f331c@osgeo.org>
Message-ID: <057.938f8f8a0c9fa72c341aa1bb2e5be9e1@osgeo.org>

#748: Port Polygonizer performance improvement from JTS-1.13
-------------------------+----------------------
 Reporter:  strk         |       Owner:  dbaston
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  3.8.0
Component:  Default      |     Version:  3.5.0
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+----------------------
Changes (by dbaston):

 * owner:  geos-devel@… => dbaston


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/748#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed May  8 17:40:42 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 09 May 2019 00:40:42 -0000
Subject: [geos-devel] [GEOS] #735: Minimum bounding circle
In-Reply-To: <045.f4d9583f31d335522c2b252e63a25bb4@osgeo.org>
References: <045.f4d9583f31d335522c2b252e63a25bb4@osgeo.org>
Message-ID: <060.6b07715625de1246cca01adf5d5a5e87@osgeo.org>

#735: Minimum bounding circle
-----------------------------+---------------------------
 Reporter:  Mike Toews       |       Owner:  geos-devel@…
     Type:  enhancement      |      Status:  new
 Priority:  minor            |   Milestone:  3.8.0
Component:  Default          |     Version:  master
 Severity:  Feature Request  |  Resolution:
 Keywords:                   |
-----------------------------+---------------------------

Comment (by dbaston):

 Committed in [changeset:6283586e79e81682d754bc27d8d7d39e48e427c3/git] but
 not yet exposed to C API.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/735#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu May  9 08:36:06 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 09 May 2019 15:36:06 -0000
Subject: [geos-devel] [GEOS] #966: CMake does not build/test doc/example.cpp
Message-ID: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>

#966: CMake does not build/test doc/example.cpp
-----------------------------------+--------------------------
 Reporter:  dbaston                |      Owner:  geos-devel@…
     Type:  defect                 |     Status:  new
 Priority:  major                  |  Milestone:  3.8.0
Component:  Build/Install (cmake)  |    Version:  master
 Severity:  Unassigned             |   Keywords:
-----------------------------------+--------------------------


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/966>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu May  9 08:40:35 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 09 May 2019 15:40:35 -0000
Subject: [geos-devel] [GEOS] #546: polygonize::EdgeRing::ptNotInList bug
	?
In-Reply-To: <042.3b1097c374fee6bd1e87b53ebb906da9@osgeo.org>
References: <042.3b1097c374fee6bd1e87b53ebb906da9@osgeo.org>
Message-ID: <057.8502dc1001d65dfbc7f32fdf3d63e83c@osgeo.org>

#546: polygonize::EdgeRing::ptNotInList bug ?
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.3.3
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Apparently fixed in [changeset:18f5db983d506406e4cb95f/git]

 https://github.com/libgeos/geos/pull/140

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/546#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu May  9 09:20:24 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 09 May 2019 16:20:24 -0000
Subject: [geos-devel] [GEOS] #966: CMake does not build/test
	doc/example.cpp
In-Reply-To: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
References: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
Message-ID: <060.8aa40d95f0ac9237c1509e63bce2bf57@osgeo.org>

#966: CMake does not build/test doc/example.cpp
-----------------------------------+---------------------------
 Reporter:  dbaston                |       Owner:  geos-devel@…
     Type:  defect                 |      Status:  new
 Priority:  major                  |   Milestone:  3.8.0
Component:  Build/Install (cmake)  |     Version:  master
 Severity:  Unassigned             |  Resolution:
 Keywords:                         |
-----------------------------------+---------------------------

Comment (by strk):

 Doesn't really need to... Does autotools do ?
 I guess it's enough that "make check" builds it, as it's just a build
 test, basically (and nobody should use the C++ interface anyway, would be
 about time to have an example.c)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/966#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu May  9 09:22:58 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 09 May 2019 16:22:58 -0000
Subject: [geos-devel] [GEOS] #966: CMake does not build/test
	doc/example.cpp
In-Reply-To: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
References: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
Message-ID: <060.d0891f92e2b5ae052b99d4f749925a2e@osgeo.org>

#966: CMake does not build/test doc/example.cpp
-----------------------------------+---------------------------
 Reporter:  dbaston                |       Owner:  geos-devel@…
     Type:  defect                 |      Status:  new
 Priority:  major                  |   Milestone:  3.8.0
Component:  Build/Install (cmake)  |     Version:  master
 Severity:  Unassigned             |  Resolution:
 Keywords:                         |
-----------------------------------+---------------------------

Comment (by dbaston):

 I just noticed it because Travis showed a build failure with autotools,
 which builds example.cpp, but not with CMake. I don't have an opinion on
 whether we provide an example.cpp, but if do provide one we ought to at
 least test that it compiles and runs.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/966#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu May  9 10:49:58 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 09 May 2019 17:49:58 -0000
Subject: [geos-devel] [GEOS] #966: CMake does not build/test
	doc/example.cpp
In-Reply-To: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
References: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
Message-ID: <060.321fde7dce29edaa91e32f8369a006a4@osgeo.org>

#966: CMake does not build/test doc/example.cpp
-----------------------------------+---------------------------
 Reporter:  dbaston                |       Owner:  geos-devel@…
     Type:  defect                 |      Status:  new
 Priority:  major                  |   Milestone:  3.8.0
Component:  Build/Install (cmake)  |     Version:  master
 Severity:  Unassigned             |  Resolution:
 Keywords:                         |
-----------------------------------+---------------------------

Comment (by strk):

 Agreed about testing it compiles (and sure, why not also run!).
 But has to be done on "make check", to not waste time on
 "make" (it's not meant to be a default target)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/966#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue May 14 07:44:58 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 14 May 2019 14:44:58 -0000
Subject: [geos-devel] [GEOS] #254: Geometry cleaning routine for Invalid
	Geometries
In-Reply-To: <045.746d6246900e6d647012f51d005e87b9@osgeo.org>
References: <045.746d6246900e6d647012f51d005e87b9@osgeo.org>
Message-ID: <060.e29ff9f55657c1fca2f8d47b5e8bdb90@osgeo.org>

#254: Geometry cleaning routine for Invalid Geometries
-------------------------+---------------------------
 Reporter:  pramsey      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  GEOS Fund Me
Component:  Default      |     Version:  master
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by dbaston):

 Paul, do you think we can consider this closed with Even's addition of
 GEOSMakeValid?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/254#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue May 14 07:47:46 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 14 May 2019 14:47:46 -0000
Subject: [geos-devel] [GEOS] #966: CMake does not build/test
	doc/example.cpp
In-Reply-To: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
References: <045.424606304c86fdd346b4cc1dca479fbb@osgeo.org>
Message-ID: <060.0516df6d9e06f27aa7789680789370b7@osgeo.org>

#966: CMake does not build/test doc/example.cpp
-----------------------------------+---------------------------
 Reporter:  dbaston                |       Owner:  geos-devel@…
     Type:  defect                 |      Status:  closed
 Priority:  major                  |   Milestone:  3.8.0
Component:  Build/Install (cmake)  |     Version:  master
 Severity:  Unassigned             |  Resolution:  duplicate
 Keywords:                         |
-----------------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => duplicate


Comment:

 Duplicate of #901

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/966#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue May 14 07:49:43 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 14 May 2019 14:49:43 -0000
Subject: [geos-devel] [GEOS] #785: g++ 6 auto_ptr
In-Reply-To: <046.872d5877427a17995df94f2e08448c2c@osgeo.org>
References: <046.872d5877427a17995df94f2e08448c2c@osgeo.org>
Message-ID: <061.afbd00ce63accd25469f6b9ea86f67fe@osgeo.org>

#785: g++ 6 auto_ptr
------------------------+---------------------------
 Reporter:  rsbivand    |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  minor       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:  wontfix
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => wontfix


Comment:

 I think this can be considered closed now that current GEOS uses C++11,
 and we aren't going to backport C++11 features into stable branches.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/785#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at kbt.io  Wed May 15 23:45:45 2019
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 16 May 2019 08:45:45 +0200
Subject: [geos-devel] git .mailmap
Message-ID: <20190516064545.GC6755@liz>

I've added a .mailmap file to the repository so that `git shortlog`
correctly groups commits by people who for any reason changed their
git attribution (name,email) over time.

Committers please review .mailmap file in the root of the repository
if you want to be recognized in some other way from what I've guessed.

HINT: use `git shortlog -ens` for a quick view of what we have so far

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   https://strk.kbt.io/services.html

From me at komzpa.net  Thu May 16 07:07:39 2019
From: me at komzpa.net (=?UTF-8?Q?Darafei_=22Kom=D1=8Fpa=22_Praliaskouski?=)
Date: Thu, 16 May 2019 09:07:39 -0500
Subject: [geos-devel] git .mailmap
In-Reply-To: <20190516064545.GC6755@liz>
References: <20190516064545.GC6755@liz>
Message-ID: <CAC8Q8tKhgv5O_VvA_52hEGHBsEdDmm5F1OZchM7qGpZWHKnt3Q@mail.gmail.com>

Hi,

Can it also fix the issue that github statistics shows you only starting
working on postgis in 2016?

On Thu, May 16, 2019 at 2:29 AM Sandro Santilli <strk at kbt.io> wrote:

> I've added a .mailmap file to the repository so that `git shortlog`
> correctly groups commits by people who for any reason changed their
> git attribution (name,email) over time.
>
> Committers please review .mailmap file in the root of the repository
> if you want to be recognized in some other way from what I've guessed.
>
> HINT: use `git shortlog -ens` for a quick view of what we have so far
>
> --strk;
>
>   ()   Free GIS & Flash consultant/developer
>   /\   https://strk.kbt.io/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



-- 
Darafei Praliaskouski
Support me: http://patreon.com/komzpa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190516/b75945f9/attachment.html>

From strk at kbt.io  Thu May 16 08:41:47 2019
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 16 May 2019 17:41:47 +0200
Subject: [geos-devel] git stats (was:  git .mailmap)
In-Reply-To: <CAC8Q8tKhgv5O_VvA_52hEGHBsEdDmm5F1OZchM7qGpZWHKnt3Q@mail.gmail.com>
References: <20190516064545.GC6755@liz>
 <CAC8Q8tKhgv5O_VvA_52hEGHBsEdDmm5F1OZchM7qGpZWHKnt3Q@mail.gmail.com>
Message-ID: <20190516154147.GG6755@liz>

On Thu, May 16, 2019 at 09:07:39AM -0500, Darafei "Komяpa" Praliaskouski wrote:

> Can it also fix the issue that github statistics shows you only starting
> working on postgis in 2016?

I've no idea. GitHub bugs can only be fixed by GitHub owners, who
decided that they have exclusive rights on fixing bugs and seeing
how the code works, and on deploying it.

But on the bright side, `git` (without the "hub") is free software,
so you can use this:

	git log --oneline --date-order --reverse --date=short \
					--pretty=format:'%cd -- %aN <%aE>' | \
	perl -ne 'm/(.*) -- (.*)/; print "$1 -- $2\n" unless ( $seen{$2}++ > 0 )'

Which yelds first commit per author:

	2001-06-22 -- No Body <no at body.net>
	2001-06-22 -- David Blasby <dblasby at gmail.com>
	2001-06-26 -- Paul Ramsey <pramsey at cleverelephant.ca>
	2001-09-17 -- Jeff Lounsbury <jeffloun at refractions.net>
	2002-03-22 -- Chris Hodgson <chodgson at refractions.net>
	2003-10-20 -- Sandro Santilli <strk at kbt.io>
	2004-04-29 -- Ralph Mason <ralph.mason at telogis.com>
	2004-08-16 -- Mark Cave-Ayland <mark.cave-ayland at siriusit.co.uk>
	2004-09-16 -- Mark Leslie <mark.leslie at lisasoft.com>
	2005-02-07 -- Markus Schaber <markus at schabi.de>
	2005-09-27 -- Devrim GÜNDÜZ <devrim at gunduz.org>
	2006-12-05 -- Kevin Neufeld <kneufeld.ca at gmail.com>
	2007-06-06 -- Norman Barker <nbarker at ittvis.com>
	2007-07-03 -- Stephen Frost <sfrost at snowman.net>
	2008-01-18 -- Ben Jubb <benjubb at refractions.net>
	2008-06-24 -- Regina Obe <lr at pcorp.us>
	2009-02-10 -- Olivier Courtin <olivier.courtin at camptocamp.com>
	2010-01-21 -- Nicklas Avén <nicklas.aven at jordogskog.no>
	2010-09-26 -- Jorge Arévalo <jorge.arevalo at deimos-space.com>
	2010-10-08 -- Pierre Racine <Pierre.Racine at sbf.ulaval.ca>
	2010-12-02 -- Mateusz Loskot <mateusz at loskot.net>
	2011-05-16 -- Bborie Park <dustymugs at gmail.com>
	2011-09-30 -- David Zwarg <dzwarg at azavea.com>
	2014-03-03 -- Baris Ergun <barisergun75 at gmail.com>
	2014-07-03 -- Stephen Woodbridge <woodbri at swoodbridge.com>
	2015-11-18 -- Daniel Baston <dbaston at gmail.com>
	2017-02-26 -- Björn Harrtell <bjorn at wololo.org>
	2017-12-15 -- Darafei Praliaskouski <me at komzpa.net>
	2018-02-27 -- Raúl Marín Rodríguez <rmrodriguez at carto.com>
	2019-04-11 -- Martin Davis <mtnclimb at gmail.com>

--strk;

From strk at kbt.io  Thu May 16 08:46:15 2019
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 16 May 2019 17:46:15 +0200
Subject: [geos-devel] git stats (was:  git .mailmap)
In-Reply-To: <20190516154147.GG6755@liz>
References: <20190516064545.GC6755@liz>
 <CAC8Q8tKhgv5O_VvA_52hEGHBsEdDmm5F1OZchM7qGpZWHKnt3Q@mail.gmail.com>
 <20190516154147.GG6755@liz>
Message-ID: <20190516154615.GH6755@liz>

On Thu, May 16, 2019 at 05:41:47PM +0200, Sandro Santilli wrote:
> On Thu, May 16, 2019 at 09:07:39AM -0500, Darafei "Komяpa" Praliaskouski wrote:
> 
> > Can it also fix the issue that github statistics shows you only starting
> > working on postgis in 2016?
> 
> I've no idea. GitHub bugs can only be fixed by GitHub owners, who
> decided that they have exclusive rights on fixing bugs and seeing
> how the code works, and on deploying it.
> 
> But on the bright side, `git` (without the "hub") is free software,
> so you can use this:
> 
> 	git log --oneline --date-order --reverse --date=short \
> 					--pretty=format:'%cd -- %aN <%aE>' | \
> 	perl -ne 'm/(.*) -- (.*)/; print "$1 -- $2\n" unless ( $seen{$2}++ > 0 )'
> 
> Which yelds first commit per author:

Sorry, I was running the command on the wrong repository.
For GEOS this is the correct output:

  2002-06-07 -- No Body <no at body.net>
  2002-06-07 -- Paul Ramsey <pramsey at cleverelephant.ca>
  2002-06-11 -- Yury Bychkov <me at yury.ca>
  2002-09-03 -- Fernando Villa <fvilla at zoo.uvm.edu>
  2002-10-23 -- Norman Vine <nhv at cape.com>
  2003-02-11 -- Martin Davis <mtnclimb at gmail.com>
  2003-04-04 -- David Blasby <dblasby at gmail.com>
  2003-09-26 -- Sandro Santilli <strk at kbt.io>
  2004-07-25 -- Sean Gillies <sgillies at frii.com>
  2004-12-03 -- Frank Warmerdam <warmerdam at pobox.com>
  2006-04-04 -- Howard Butler <hobu.inc at gmail.com>
  2006-04-06 -- Mateusz Łoskot <mateusz at loskot.net>
  2006-07-11 -- Charlie Savage <cfis at savagexi.com>
  2007-12-21 -- Ben Jubb <benjubb at refractions.net>
  2009-01-05 -- Stephen Wong <swongu at gmail.com>
  2013-07-31 -- Regina Obe <lr at pcorp.us>
  2017-04-06 -- Daniel Baston <dbaston at gmail.com>
  2017-04-12 -- Kurt Schwehr <schwehr at google.com>
  2017-06-22 -- Manuel Grizonnet <manuel.grizonnet at cnes.fr>
  2017-07-18 -- Tamas Szekeres <szekerest at gmail.com>
  2017-09-01 -- nila <n_larsson at yahoo.com>
  2018-01-06 -- Evgeniy A. Dushistov <dushistov at mail.ru>
  2018-01-10 -- cvvergara <vicky at georepublic.de>
  2018-03-28 -- Even Rouault <even.rouault at spatialys.com>
  2018-06-08 -- Raul Marin <rmrodriguez at cartodb.com>
  2018-06-21 -- J Smith <dark.panda at gmail.com>
  2018-09-16 -- Sergey Fedoseev <fedoseev.sergey at gmail.com>
  2018-10-02 -- John K. Harvey <john.harvey at crunchydata.com>
  2018-10-07 -- Greg Troxel <gdt at lexort.com>
  2018-10-19 -- Simon Wells <simonrwells at gmail.com>
  2018-10-26 -- Darafei Praliaskouski <me at komzpa.net>
  2018-12-09 -- doskabouter <paul.doskabouter at gmail.com>
  2018-12-19 -- doskabouter <doskabouter at users.noreply.github.com>
  2019-03-27 -- Kirill Kouzoubov <kirill888 at gmail.com>

--strk;

From geos-trac at osgeo.org  Thu May 16 13:15:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 16 May 2019 20:15:27 -0000
Subject: [geos-devel] [GEOS] #968: Let Delaunay triangulation look at Z
 values to resolve 2D ties performing 2.5D triangulation
Message-ID: <044.91ad67acbde20d6b73033e17b1d2db44@osgeo.org>

#968: Let Delaunay triangulation look at Z values to resolve 2D ties performing
2.5D triangulation
-----------------------------+--------------------------
 Reporter:  komzpa           |      Owner:  geos-devel@…
     Type:  enhancement      |     Status:  new
 Priority:  major            |  Milestone:
Component:  Default          |    Version:  master
 Severity:  Feature Request  |   Keywords:
-----------------------------+--------------------------
 When performing delaunay triangulation of 2.5D grid, you get randomly
 oriented triangles.

 In this case the tie can be broken by re-running the check with inSphere
 predicate instead of inCircle.

 This also can help resolving numerical precision issues, where inSphere
 resolves in more clear way than inCircle.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/968>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mateusz at loskot.net  Thu May 16 14:28:05 2019
From: mateusz at loskot.net (Mateusz Loskot)
Date: Thu, 16 May 2019 16:28:05 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
Message-ID: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>

Dear All,

I'd like propose to effectively revert the RFC 6:

https://trac.osgeo.org/geos/wiki/RFC9

I'll appreciate if the PSC members considered to review my proposal
and arranged the voting.

Although I've made my best to prepare the write short,
clear and unambiguous proposal, I'll welcome your feedback.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From schwehr at gmail.com  Thu May 16 16:12:45 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Thu, 16 May 2019 16:12:45 -0700
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
Message-ID: <CACmBxytaZSVP0=0JU_us_rz06MshPWLk5fWx4b2EfwOP5nAa-Q@mail.gmail.com>

+1 from a non-PSC person

On Thu, May 16, 2019 at 2:28 PM Mateusz Loskot <mateusz at loskot.net> wrote:

> Dear All,
>
> I'd like propose to effectively revert the RFC 6:
>
> https://trac.osgeo.org/geos/wiki/RFC9
>
> I'll appreciate if the PSC members considered to review my proposal
> and arranged the voting.
>
> Although I've made my best to prepare the write short,
> clear and unambiguous proposal, I'll welcome your feedback.
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190516/8b4be454/attachment.html>

From lr at pcorp.us  Thu May 16 16:49:29 2019
From: lr at pcorp.us (Regina Obe)
Date: Thu, 16 May 2019 19:49:29 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
Message-ID: <001701d50c42$0181b430$04851c90$@pcorp.us>

-1

Not much has changed since we made this decision to make it non-public. In fact ironically I feel like more people are using GEOS than before.
I was hoping removing the C++ public would scare more people away so we could do some major rework :).

I'd like us to be able to guarantee some bit of ABI stability before we go taking this restriction off.

NO ONE READS READMES, they rely on at least some light punches :)




> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Mateusz Loskot
> Sent: Thursday, May 16, 2019 5:28 PM
> To: geos-devel at lists.osgeo.org
> Subject: [geos-devel] RFC 9: Restore C++ API as public API
> 
> Dear All,
> 
> I'd like propose to effectively revert the RFC 6:
> 
> https://trac.osgeo.org/geos/wiki/RFC9
> 
> I'll appreciate if the PSC members considered to review my proposal and
> arranged the voting.
> 
> Although I've made my best to prepare the write short, clear and
> unambiguous proposal, I'll welcome your feedback.
> 
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From sebastic at xs4all.nl  Thu May 16 21:37:38 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 17 May 2019 06:37:38 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
Message-ID: <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>

On 5/16/19 11:28 PM, Mateusz Loskot wrote:
> I'd like propose to effectively revert the RFC 6:
> 
> https://trac.osgeo.org/geos/wiki/RFC9

Please don't. We'll get more projects like OSSIM that break with new
GEOS releases, this causes significant delays before the new release can
be included in distributions where lots of projects depend on GEOS
(which all need to build with the new release).

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From andrew.bell.ia at gmail.com  Fri May 17 04:14:15 2019
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 May 2019 06:14:15 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
Message-ID: <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>

Why is this? There are many libraries that have C++ interfaces.

On Thu, May 16, 2019, 11:37 PM Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 5/16/19 11:28 PM, Mateusz Loskot wrote:
> > I'd like propose to effectively revert the RFC 6:
> >
> > https://trac.osgeo.org/geos/wiki/RFC9
>
> Please don't. We'll get more projects like OSSIM that break with new
> GEOS releases, this causes significant delays before the new release can
> be included in distributions where lots of projects depend on GEOS
> (which all need to build with the new release).
>
> Kind Regards,
>
> Bas
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/540ec865/attachment.html>

From howard at hobu.co  Fri May 17 04:19:16 2019
From: howard at hobu.co (Howard Butler)
Date: Fri, 17 May 2019 06:19:16 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <001701d50c42$0181b430$04851c90$@pcorp.us>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <001701d50c42$0181b430$04851c90$@pcorp.us>
Message-ID: <6D3DF9DD-FFC8-4957-B06E-91219A984596@hobu.co>



> On May 16, 2019, at 6:49 PM, Regina Obe <lr at pcorp.us> wrote:
> 
> -1
> 
> Not much has changed since we made this decision to make it non-public. In fact ironically I feel like more people are using GEOS than before.
> I was hoping removing the C++ public would scare more people away so we could do some major rework :).
> 
> I'd like us to be able to guarantee some bit of ABI stability before we go taking this restriction off.
> 
> NO ONE READS READMES, they rely on at least some light punches :)

The decision to remove the C++ API from GEOS questions we as the GEOS PSC are trustworthy stewards of the library and shows disrespects for our users' investment and use of it. To have snapped our fingers and removed something that we know people were using because a few laggard packages in one packaging system caused some churn was a reckless overreaction. 

I vetoe'd the original proposal at the time because of the proposal to only allow installation of the C++ headers via opt-in. I regret not having holding firm on my veto, and I suppose it is now too late for us to maneuver around each other on the Prairie of Prax.

By the way, RFC6 is listed as Not Passed https://trac.osgeo.org/geos/wiki/RFC6 <https://trac.osgeo.org/geos/wiki/RFC6> without a record of the vote, but the software was implemented as you proposed anyway. 

Howard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/688db634/attachment-0001.html>

From sebastic at xs4all.nl  Fri May 17 04:30:46 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 17 May 2019 13:30:46 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
Message-ID: <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>

On 5/17/19 1:14 PM, Andrew Bell wrote:
> Why is this? There are many libraries that have C++ interfaces.

Which also have difficulty providing a stable ABI. One that doesn't
change the symbols it exports with the new compiler releases, etc.

Having a stable C ABI is a major plus for any project that uses C++ in
its codebase, it makes transitions to new releases much easier. A core
library like GEOS have many projects that require it, some are actively
maintained and implement changes quicky, others don't. And these make
life suck for distributions where all the projects need to be integrated
to work with the same version of GEOS.

> On Thu, May 16, 2019, 11:37 PM Sebastiaan Couwenberg <sebastic at xs4all.nl>
> wrote:
> 
>> On 5/16/19 11:28 PM, Mateusz Loskot wrote:
>>> I'd like propose to effectively revert the RFC 6:
>>>
>>> https://trac.osgeo.org/geos/wiki/RFC9
>>
>> Please don't. We'll get more projects like OSSIM that break with new
>> GEOS releases, this causes significant delays before the new release can
>> be included in distributions where lots of projects depend on GEOS
>> (which all need to build with the new release).

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From andrew.bell.ia at gmail.com  Fri May 17 05:21:20 2019
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 May 2019 07:21:20 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
Message-ID: <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>

But this seems like a choice for library users. From a packaging
perspective, why isn't the issue one of API rather than binary
compatibility? Are you not rebuilding packages?

On Fri, May 17, 2019, 6:30 AM Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 5/17/19 1:14 PM, Andrew Bell wrote:
> > Why is this? There are many libraries that have C++ interfaces.
>
> Which also have difficulty providing a stable ABI. One that doesn't
> change the symbols it exports with the new compiler releases, etc.
>
> Having a stable C ABI is a major plus for any project that uses C++ in
> its codebase, it makes transitions to new releases much easier. A core
> library like GEOS have many projects that require it, some are actively
> maintained and implement changes quicky, others don't. And these make
> life suck for distributions where all the projects need to be integrated
> to work with the same version of GEOS.
>
> > On Thu, May 16, 2019, 11:37 PM Sebastiaan Couwenberg <sebastic at xs4all.nl
> >
> > wrote:
> >
> >> On 5/16/19 11:28 PM, Mateusz Loskot wrote:
> >>> I'd like propose to effectively revert the RFC 6:
> >>>
> >>> https://trac.osgeo.org/geos/wiki/RFC9
> >>
> >> Please don't. We'll get more projects like OSSIM that break with new
> >> GEOS releases, this causes significant delays before the new release can
> >> be included in distributions where lots of projects depend on GEOS
> >> (which all need to build with the new release).
>
> Kind Regards,
>
> Bas
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/a8d731c0/attachment.html>

From geos-trac at osgeo.org  Fri May 17 05:48:43 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 17 May 2019 12:48:43 -0000
Subject: [geos-devel] [GEOS] #969: errors in docs for unary union
Message-ID: <045.93e3616718097e59680653068c6f62da@osgeo.org>

#969: errors in docs for unary union
---------------------------+---------------------------
 Reporter:  kthujvu        |      Owner:  geos-devel@…
     Type:  defect         |     Status:  new
 Priority:  trivial        |  Milestone:
Component:  Documentation  |    Version:  3.6.2
 Severity:  Unassigned     |   Keywords:  documentation
---------------------------+---------------------------
 I noticed some typos on
 https://geos.osgeo.org/doxygen/classgeos_1_1operation_1_1geounion_1_1UnaryUnionOp.html

 "merging al identical" should be "merging all identical"

 Duplicate plural "s" for linked things: Polygonss, Pointss

 All links in the "Detailed Description" point to the page itself.

 "Member Function Documentation" once says "POINT EMPTY" will be returned
 if no input geometry, then says "empty GEOMETRYCOLLECTION". It should be
 the latter.

 No patch from me because that's too complicated on this setup.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/969>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From sebastic at xs4all.nl  Fri May 17 05:56:48 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 17 May 2019 14:56:48 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
Message-ID: <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>

On 5/17/19 2:21 PM, Andrew Bell wrote:
> But this seems like a choice for library users. From a packaging
> perspective, why isn't the issue one of API rather than binary
> compatibility?

Both API and ABI compatibility and an issue. API breaks require the
projects to adapt their code which takes time, ABI breaks require
distros to rebuild the packages. ABI breaks without API breaks suck, and
C++ has a tendency for that which C doesn't have. Yay for stable C symbols.

> Are you not rebuilding packages?

Obviously we are. And that's the problem, new GEOS releases tend to
cause build failures for the projects that rely on the C++ API.

Everything that relies on the stable C API doesn't need to be rebuilt
for new GEOS releases.

> On Fri, May 17, 2019, 6:30 AM Sebastiaan Couwenberg <sebastic at xs4all.nl>
> wrote:
> 
>> On 5/17/19 1:14 PM, Andrew Bell wrote:
>>> Why is this? There are many libraries that have C++ interfaces.
>>
>> Which also have difficulty providing a stable ABI. One that doesn't
>> change the symbols it exports with the new compiler releases, etc.
>>
>> Having a stable C ABI is a major plus for any project that uses C++ in
>> its codebase, it makes transitions to new releases much easier. A core
>> library like GEOS have many projects that require it, some are actively
>> maintained and implement changes quicky, others don't. And these make
>> life suck for distributions where all the projects need to be integrated
>> to work with the same version of GEOS.
>>
>>> On Thu, May 16, 2019, 11:37 PM Sebastiaan Couwenberg <sebastic at xs4all.nl
>>>
>>> wrote:
>>>
>>>> On 5/16/19 11:28 PM, Mateusz Loskot wrote:
>>>>> I'd like propose to effectively revert the RFC 6:
>>>>>
>>>>> https://trac.osgeo.org/geos/wiki/RFC9
>>>>
>>>> Please don't. We'll get more projects like OSSIM that break with new
>>>> GEOS releases, this causes significant delays before the new release can
>>>> be included in distributions where lots of projects depend on GEOS
>>>> (which all need to build with the new release).
>>
>> Kind Regards,
>>
>> Bas
>>
>> --
>>  GPG Key ID: 4096R/6750F10AE88D4AF1
>> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 


-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From andrew.bell.ia at gmail.com  Fri May 17 06:23:26 2019
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 May 2019 08:23:26 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
Message-ID: <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>

On Fri, May 17, 2019, 7:56 AM Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 5/17/19 2:21 PM, Andrew Bell wrote:
>
> > Are you not rebuilding packages?
>
> Obviously we are. And that's the problem, new GEOS releases tend to
> cause build failures for the projects that rely on the C++ API.
>
> Everything that relies on the stable C API doesn't need to be rebuilt
> for new GEOS releases.
>

This implies that "stable" is the
important bit. This is, IMO, a design issue, rather than one of a language
choice, generally speaking.

For people writing C++ there is real value in a stable and well-designed
C++ library interface that simplifies development and potentially reduces
bugs. This is an important consideration. For example, dealing with memory
ownership for some C libraries can be trouble and can make for convoluted
code.

Frequent, breaking API changes seem a problem. ABI changes seem more like a
small annoyance. I can understand how a stable ABI would be nice, but I
personally don't think it's more important than a good interface for
library users.

> On Fri, May 17, 2019, 6:30 AM Sebastiaan Couwenberg <sebastic at xs4all.nl>
> > wrote:
> >
> >> On 5/17/19 1:14 PM, Andrew Bell wrote:
> >>> Why is this? There are many libraries that have C++ interfaces.
> >>
> >> Which also have difficulty providing a stable ABI. One that doesn't
> >> change the symbols it exports with the new compiler releases, etc.
> >>
> >> Having a stable C ABI is a major plus for any project that uses C++ in
> >> its codebase, it makes transitions to new releases much easier. A core
> >> library like GEOS have many projects that require it, some are actively
> >> maintained and implement changes quicky, others don't. And these make
> >> life suck for distributions where all the projects need to be integrated
> >> to work with the same version of GEOS.
> >>
> >>> On Thu, May 16, 2019, 11:37 PM Sebastiaan Couwenberg <
> sebastic at xs4all.nl
> >>>
> >>> wrote:
> >>>
> >>>> On 5/16/19 11:28 PM, Mateusz Loskot wrote:
> >>>>> I'd like propose to effectively revert the RFC 6:
> >>>>>
> >>>>> https://trac.osgeo.org/geos/wiki/RFC9
> >>>>
> >>>> Please don't. We'll get more projects like OSSIM that break with new
> >>>> GEOS releases, this causes significant delays before the new release
> can
> >>>> be included in distributions where lots of projects depend on GEOS
> >>>> (which all need to build with the new release).
> >>
> >> Kind Regards,
> >>
> >> Bas
> >>
> >> --
> >>  GPG Key ID: 4096R/6750F10AE88D4AF1
> >> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
>
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/75506d46/attachment-0001.html>

From sebastic at xs4all.nl  Fri May 17 06:36:26 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 17 May 2019 15:36:26 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
Message-ID: <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>

On 5/17/19 3:23 PM, Andrew Bell wrote:
> Frequent, breaking API changes seem a problem. ABI changes seem more like a
> small annoyance. I can understand how a stable ABI would be nice, but I
> personally don't think it's more important than a good interface for
> library users.

And that's the difference in perspective between a developer and
distribution packager.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From lr at pcorp.us  Fri May 17 06:52:59 2019
From: lr at pcorp.us (Regina Obe)
Date: Fri, 17 May 2019 09:52:59 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
Message-ID: <000201d50cb7$d6d3a240$847ae6c0$@pcorp.us>

> On 5/17/19 3:23 PM, Andrew Bell wrote:
> > Frequent, breaking API changes seem a problem. ABI changes seem more
> > like a small annoyance. I can understand how a stable ABI would be
> > nice, but I personally don't think it's more important than a good
> > interface for library users.
> 
> And that's the difference in perspective between a developer and distribution
> packager.
> 
> Kind Regards,
> 
> Bas
> 
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
[Regina Obe] 
Exactly.  These days my sensitivities like more on the packaging side than the development side.
If GEOS was a fledgling project I would be fine with broadcasting yeh we have a public C++ API.

The thing is you can still use the C++API, we are just making it clear that you are on your own, which mloskot claims C++ developers know already.

Well guess what? the users/developers downstream of some project that depends on GEOS may not know that, and then they'll be screwed when we change the API.
So the notice lets them know they are trusting something they shouldn't if they try to use the C++ API directly.

Right now the C++ API I feel is more in flux than ever, so the last thing I want is people relying on it especially now while we are making major changes to it.
If you are building your pet C++ project that no one else is going to use, we are not stopping you from taking full advantage of the GEOS C++ API, but at your own risk.  If you expect package managers to package your software, then you gotta make it easier for us.

Thanks,
Regina






From andrew.bell.ia at gmail.com  Fri May 17 07:10:40 2019
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 May 2019 09:10:40 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <000201d50cb7$d6d3a240$847ae6c0$@pcorp.us>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <000201d50cb7$d6d3a240$847ae6c0$@pcorp.us>
Message-ID: <CACJ51z3JQgCAG_MmMXykUms_izmkc-8frvRM0tfyUG6ZZG=snA@mail.gmail.com>

On Fri, May 17, 2019, 8:53 AM Regina Obe <lr at pcorp.us> wrote:

> > On 5/17/19 3:23 PM, Andrew Bell wrote:
> > > Frequent, breaking API changes seem a problem. ABI changes seem more
> > > like a small annoyance. I can understand how a stable ABI would be
> > > nice, but I personally don't think it's more important than a good
> > > interface for library users.
> >
> > And that's the difference in perspective between a developer and
> distribution
> > packager.
> >
> > Kind Regards,
> >
> > Bas
> >
> > --
> >  GPG Key ID: 4096R/6750F10AE88D4AF1
> > Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> [Regina Obe]
> Exactly.  These days my sensitivities like more on the packaging side than
> the development side.
> If GEOS was a fledgling project I would be fine with broadcasting yeh we
> have a public C++ API.
>
> The thing is you can still use the C++API, we are just making it clear
> that you are on your own, which mloskot claims C++ developers know already.
>
> Well guess what? the users/developers downstream of some project that
> depends on GEOS may not know that, and then they'll be screwed when we
> change...


How so? Shared libraries are versioned. If you're not rebuilding against a
new API, the soname should guarantee usability.

Right now the C++ API I feel is more in flux than ever, so the last thing I
> want is people relying on it especially now while we are making major
> changes to it.
>

Why are you doing this? If you want to significantly change the interface,
why not make a new one in a new namespace, for example? This would preserve
backward compatibility for existing users.

This really strikes me as a design issue, rather than one of packaging.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/4e00c648/attachment.html>

From pramsey at cleverelephant.ca  Fri May 17 07:28:39 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 17 May 2019 09:28:39 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
Message-ID: <CACowWR1USjz72OmQXaYKUcRBCzwZkVs1UjWB+9DPr_pdGkypeQ@mail.gmail.com>

+1 from me

This change rolled through very quickly. We have survived perfectly
happily with our old policy of installing all the headers and letting
people shoot off exactly as many toes of their feet as they like.
Having a C++ library that doesn't let people build against it is a
little weird. I know packagers like to have only one copy of a system
library that never ever changes, but that's just not realistic. Rather
than packagers wagging the project dog, I would rather see packagers,
who now very much know about this issue, use some other approaches to
achieve the level of stability they desire. I'd think that, for apps
that are built against the C++ API, statically linking them to GEOS
would be a nice way to avoid getting locked into a particular system
version of GEOS.

This change is still intra-release, I see no particular problem with
rolling it back, and having 3.8 look very much like 3.7.

P.


On Thu, May 16, 2019 at 4:28 PM Mateusz Loskot <mateusz at loskot.net> wrote:
>
> Dear All,
>
> I'd like propose to effectively revert the RFC 6:
>
> https://trac.osgeo.org/geos/wiki/RFC9
>
> I'll appreciate if the PSC members considered to review my proposal
> and arranged the voting.
>
> Although I've made my best to prepare the write short,
> clear and unambiguous proposal, I'll welcome your feedback.
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

From mateusz at loskot.net  Fri May 17 07:43:56 2019
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 17 May 2019 09:43:56 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
Message-ID: <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>

On Fri, 17 May 2019 at 08:36, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> On 5/17/19 3:23 PM, Andrew Bell wrote:
> > Frequent, breaking API changes seem a problem. ABI changes seem more like a
> > small annoyance. I can understand how a stable ABI would be nice, but I
> > personally don't think it's more important than a good interface for
> > library users.
>
> And that's the difference in perspective between a developer and
> distribution packager.

It is not my role of a library developer to make packaging easier.
There are many PMs and PDMs, OS-specific, distro-specific
as well as number of OS-agnostic ones. It is not a library developer
role to promise an easy life to maintainers of any of the PMs/PDMs.
It would be a sisyphean task.

Since day one, GEOS has been a C++ library.
Since version 2.2, GEOS offers C API.
Since version 3.6, things started shifting in a direction that transforms
the library, departing from the original concept.
It dents the trust inside the team (what else will get hastily broken?).

It's those who support the intrusive transformation should have forked
GEOS and make their way, not those who want to maintain GEOS
according to the original concept.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From sebastic at xs4all.nl  Fri May 17 07:53:50 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 17 May 2019 16:53:50 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
Message-ID: <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>

On 5/17/19 4:43 PM, Mateusz Loskot wrote:
> On Fri, 17 May 2019 at 08:36, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>> On 5/17/19 3:23 PM, Andrew Bell wrote:
>>> Frequent, breaking API changes seem a problem. ABI changes seem more like a
>>> small annoyance. I can understand how a stable ABI would be nice, but I
>>> personally don't think it's more important than a good interface for
>>> library users.
>>
>> And that's the difference in perspective between a developer and
>> distribution packager.
> 
> It is not my role of a library developer to make packaging easier.
> There are many PMs and PDMs, OS-specific, distro-specific
> as well as number of OS-agnostic ones. It is not a library developer
> role to promise an easy life to maintainers of any of the PMs/PDMs.
> It would be a sisyphean task.

That's not very considerate.

If GEOS becomes too painful to maintain, I'll remove it from Debian to
keep my sanity, and leave it up to users to build it themselves and
integrate it with the other packages.

If that requires the removal of other packages that require GEOS, so be
it. That just reduced the number of packages I have to maintain. It's
not in the best interest of our users, but fuck them too, right?

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From geos-trac at osgeo.org  Fri May 17 10:04:26 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 17 May 2019 17:04:26 -0000
Subject: [geos-devel] [GEOS] #299:
 geos::geom::CoordinateArraySequenceFactory unit test failing on Bad Apple
In-Reply-To: <045.5c01f48de983ff806c0737c1096baff7@osgeo.org>
References: <045.5c01f48de983ff806c0737c1096baff7@osgeo.org>
Message-ID: <060.6bd8edd6b51c9f76cfaa082c1afc75e5@osgeo.org>

#299: geos::geom::CoordinateArraySequenceFactory unit test failing on Bad Apple
----------------------------+---------------------------
 Reporter:  pramsey         |       Owner:  pramsey
     Type:  defect          |      Status:  new
 Priority:  major           |   Milestone:  GEOS Fund Me
Component:  Unit Tests      |     Version:  master
 Severity:  Unassigned      |  Resolution:
 Keywords:  mac,macosx,osx  |
----------------------------+---------------------------
Changes (by dbaston):

 * owner:  geos-devel@… => pramsey
 * status:  reopened => new


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/299#comment:38>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From lnkansa at gmail.com  Fri May 17 10:34:13 2019
From: lnkansa at gmail.com (lnkansa)
Date: Fri, 17 May 2019 19:34:13 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
Message-ID: <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>

NON PSC:
While I do appreciate the work of the library developers, I do support that
fact that C++ API is made available for the larger community. C++ is
enjoying Renaissance (11, 14, 17, 20) and attempts to "force" downstream
developers to use the the C-API rather decreases programmer productivity. A
good example would be the use of unique_ptr for resource management - it is
as good as it gets. Why not just use it as it is intended? After all, there
are always a thousand ways to compile a library with different compiler
switches. That is a beauty and also a pain - This is what partly defines
our DNA. Stable projects would always use CAPI knowing the consequences.
Anyone who opens up the hood should know what he is doing and if the person
shoots himself in the foot so be it. Those using C++ would have to compile
anyway. OSS projects that take such dependencies are the ones that should
pay the price and not the other way around. If their usage breaks your
packaged distro, they should pay the price of being dropped. After all
engineering is about choices. Please bring the C++ API back a first class
citizen.

On Fri, May 17, 2019 at 4:53 PM Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 5/17/19 4:43 PM, Mateusz Loskot wrote:
> > On Fri, 17 May 2019 at 08:36, Sebastiaan Couwenberg <sebastic at xs4all.nl>
> wrote:
> >> On 5/17/19 3:23 PM, Andrew Bell wrote:
> >>> Frequent, breaking API changes seem a problem. ABI changes seem more
> like a
> >>> small annoyance. I can understand how a stable ABI would be nice, but I
> >>> personally don't think it's more important than a good interface for
> >>> library users.
> >>
> >> And that's the difference in perspective between a developer and
> >> distribution packager.
> >
> > It is not my role of a library developer to make packaging easier.
> > There are many PMs and PDMs, OS-specific, distro-specific
> > as well as number of OS-agnostic ones. It is not a library developer
> > role to promise an easy life to maintainers of any of the PMs/PDMs.
> > It would be a sisyphean task.
>
> That's not very considerate.
>
> If GEOS becomes too painful to maintain, I'll remove it from Debian to
> keep my sanity, and leave it up to users to build it themselves and
> integrate it with the other packages.
>
> If that requires the removal of other packages that require GEOS, so be
> it. That just reduced the number of packages I have to maintain. It's
> not in the best interest of our users, but fuck them too, right?
>
> Kind Regards,
>
> Bas
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/d7503e42/attachment.html>

From schwehr at gmail.com  Fri May 17 11:35:12 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Fri, 17 May 2019 11:35:12 -0700
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
Message-ID: <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>

I'm a developer and a package manager (inside Google and somewhat still
around for fink on mac)...

I count on both the C and C++ APIs for many projects.  Projects needing ABI
stability know they need to stick to C interfaces.

For those of us packagers that "live at head" (well mostly...), we know
that ABI stability is out the window and it's up to us to manage things
carefully.

I've been successfully doing C++ management with GEOS and GDAL for many
years.  It seems reasonable for debian to only support C, but please don't
rule out C++ for others.  For me, C++ APIs are radically better than C for
large scale work (aka google) and I really really don't want more
custom/external to the package C++ wrappers for C (with or without wrapping
C++).

On Fri, May 17, 2019 at 10:34 AM lnkansa <lnkansa at gmail.com> wrote:

> NON PSC:
> While I do appreciate the work of the library developers, I do support
> that fact that C++ API is made available for the larger community. C++ is
> enjoying Renaissance (11, 14, 17, 20) and attempts to "force" downstream
> developers to use the the C-API rather decreases programmer productivity. A
> good example would be the use of unique_ptr for resource management - it is
> as good as it gets. Why not just use it as it is intended? After all, there
> are always a thousand ways to compile a library with different compiler
> switches. That is a beauty and also a pain - This is what partly defines
> our DNA. Stable projects would always use CAPI knowing the consequences.
> Anyone who opens up the hood should know what he is doing and if the person
> shoots himself in the foot so be it. Those using C++ would have to compile
> anyway. OSS projects that take such dependencies are the ones that should
> pay the price and not the other way around. If their usage breaks your
> packaged distro, they should pay the price of being dropped. After all
> engineering is about choices. Please bring the C++ API back a first class
> citizen.
>
> On Fri, May 17, 2019 at 4:53 PM Sebastiaan Couwenberg <sebastic at xs4all.nl>
> wrote:
>
>> On 5/17/19 4:43 PM, Mateusz Loskot wrote:
>> > On Fri, 17 May 2019 at 08:36, Sebastiaan Couwenberg <sebastic at xs4all.nl>
>> wrote:
>> >> On 5/17/19 3:23 PM, Andrew Bell wrote:
>> >>> Frequent, breaking API changes seem a problem. ABI changes seem more
>> like a
>> >>> small annoyance. I can understand how a stable ABI would be nice, but
>> I
>> >>> personally don't think it's more important than a good interface for
>> >>> library users.
>> >>
>> >> And that's the difference in perspective between a developer and
>> >> distribution packager.
>> >
>> > It is not my role of a library developer to make packaging easier.
>> > There are many PMs and PDMs, OS-specific, distro-specific
>> > as well as number of OS-agnostic ones. It is not a library developer
>> > role to promise an easy life to maintainers of any of the PMs/PDMs.
>> > It would be a sisyphean task.
>>
>> That's not very considerate.
>>
>> If GEOS becomes too painful to maintain, I'll remove it from Debian to
>> keep my sanity, and leave it up to users to build it themselves and
>> integrate it with the other packages.
>>
>> If that requires the removal of other packages that require GEOS, so be
>> it. That just reduced the number of packages I have to maintain. It's
>> not in the best interest of our users, but fuck them too, right?
>>
>> Kind Regards,
>>
>> Bas
>>
>> --
>>  GPG Key ID: 4096R/6750F10AE88D4AF1
>> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/f7ec298c/attachment.html>

From lr at pcorp.us  Fri May 17 12:13:36 2019
From: lr at pcorp.us (Regina Obe)
Date: Fri, 17 May 2019 15:13:36 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
 <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
Message-ID: <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>

 

I'm a developer and a package manager (inside Google and somewhat still around for fink on mac)...

 

I count on both the C and C++ APIs for many projects.  Projects needing ABI stability know they need to stick to C interfaces.

 

For those of us packagers that "live at head" (well mostly...), we know that ABI stability is out the window and it's up to us to manage things carefully.

 

I've been successfully doing C++ management with GEOS and GDAL for many years.  It seems reasonable for debian to only support C, but please don't rule out C++ for others.  For me, C++ APIs are radically better than C for large scale work (aka google) and I really really don't want more custom/external to the package C++ wrappers for C (with or without wrapping C++).

 

http://schwehr.org

[Regina Obe] 

 

I don't think we should discuss this any further until at least GEOS 3.8 is out.  As we said the C++ API may drastically change in GEOS, so if you are relying on it – you should be SEVERELY warned.  We have not taken away your ability to use it, so I'm not sure what all the fuss is about here.  We just want to discourage sharing it (via the unstable C++ API).  If you live on the head – you compile everything on the head so you can be as unstable as you want.  

 

We said the C++ API is unstable and we aren't willing to put in the effort to guarantee a stable C++ API at this point, so NO it is not a first class citizen.  Something you can't depend on is NOT a first class citizen.  Maybe in the future but NOT NOW.

 

If you want fancy C++ niceties go use Boost Geometry -  I hear their hipster C++ developers.

 

 

 

Thanks,

Regina

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/e32a5e0c/attachment.html>

From mateusz at loskot.net  Fri May 17 14:10:54 2019
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 17 May 2019 16:10:54 -0500
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
 <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
 <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>
Message-ID: <CABUeae_KcmS3AT6u6qS=yJv5nMNKRo1Etg_XRL_gnofM=xc0gg@mail.gmail.com>

Regina,

The first and third statements in the second paragraph of your response is
false.
I have ever asked to "guarantee a stable C++ API at this point in time" or
at any point ever.
It's a fact.

The second statement in the second paragraph of your response is also false.
GEOS users can and do depend on the C++ API.
It's a fact.

The arguments you present show to me you're pursuing goals of a package
manager but not a programmer who wrote that code.
This brought incompatible toys in to the common sandbox.
You do not want to recognise it.

I'm not going to keep convincing you anymore.
I've run out of rational arguments.


Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)


P. S. There is really no need for the epithets


On Fri, 17 May 2019, 14:13 Regina Obe, <lr at pcorp.us> wrote:

>
>
> I'm a developer and a package manager (inside Google and somewhat still
> around for fink on mac)...
>
>
>
> I count on both the C and C++ APIs for many projects.  Projects needing
> ABI stability know they need to stick to C interfaces.
>
>
>
> For those of us packagers that "live at head" (well mostly...), we know
> that ABI stability is out the window and it's up to us to manage things
> carefully.
>
>
>
> I've been successfully doing C++ management with GEOS and GDAL for many
> years.  It seems reasonable for debian to only support C, but please don't
> rule out C++ for others.  For me, C++ APIs are radically better than C for
> large scale work (aka google) and I really really don't want more
> custom/external to the package C++ wrappers for C (with or without wrapping
> C++).
>
>
>
> http://schwehr.org
>
> *[Regina Obe] *
>
>
>
> I don't think we should discuss this any further until at least GEOS 3.8
> is out.  As we said the C++ API may drastically change in GEOS, so if you
> are relying on it – you should be SEVERELY warned.  We have not taken away
> your ability to use it, so I'm not sure what all the fuss is about here.
> We just want to discourage sharing it (via the unstable C++ API).  If you
> live on the head – you compile everything on the head so you can be as
> unstable as you want.
>
>
>
> We said the C++ API is unstable and we aren't willing to put in the effort
> to guarantee a stable C++ API at this point, so NO it is not a first class
> citizen.  Something you can't depend on is NOT a first class citizen.
> Maybe in the future but NOT NOW.
>
>
>
> If you want fancy C++ niceties go use Boost Geometry -  I hear their
> hipster C++ developers.
>
>
>
>
>
>
>
> Thanks,
>
> Regina
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-development



On Fri, 17 May 2019, 14:13 Regina Obe, <lr at pcorp.us> wrote:

>
>
> I'm a developer and a package manager (inside Google and somewhat still
> around for fink on mac)...
>
>
>
> I count on both the C and C++ APIs for many projects.  Projects needing
> ABI stability know they need to stick to C interfaces.
>
>
>
> For those of us packagers that "live at head" (well mostly...), we know
> that ABI stability is out the window and it's up to us to manage things
> carefully.
>
>
>
> I've been successfully doing C++ management with GEOS and GDAL for many
> years.  It seems reasonable for debian to only support C, but please don't
> rule out C++ for others.  For me, C++ APIs are radically better than C for
> large scale work (aka google) and I really really don't want more
> custom/external to the package C++ wrappers for C (with or without wrapping
> C++).
>
>
>
> http://schwehr.org
>
> *[Regina Obe] *
>
>
>
> I don't think we should discuss this any further until at least GEOS 3.8
> is out.  As we said the C++ API may drastically change in GEOS, so if you
> are relying on it – you should be SEVERELY warned.  We have not taken away
> your ability to use it, so I'm not sure what all the fuss is about here.
> We just want to discourage sharing it (via the unstable C++ API).  If you
> live on the head – you compile everything on the head so you can be as
> unstable as you want.
>
>
>
> We said the C++ API is unstable and we aren't willing to put in the effort
> to guarantee a stable C++ API at this point, so NO it is not a first class
> citizen.  Something you can't depend on is NOT a first class citizen.
> Maybe in the future but NOT NOW.
>
>
>
> If you want fancy C++ niceties go use Boost Geometry -  I hear their
> hipster C++ developers.
>
>
>
>
>
>
>
> Thanks,
>
> Regina
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190517/45b4e186/attachment-0001.html>

From lr at pcorp.us  Fri May 17 15:23:35 2019
From: lr at pcorp.us (Regina Obe)
Date: Fri, 17 May 2019 18:23:35 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae_KcmS3AT6u6qS=yJv5nMNKRo1Etg_XRL_gnofM=xc0gg@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
 <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
 <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>
 <CABUeae_KcmS3AT6u6qS=yJv5nMNKRo1Etg_XRL_gnofM=xc0gg@mail.gmail.com>
Message-ID: <000001d50cff$2b646050$822d20f0$@pcorp.us>

Mat,

I think you misunderstood me a little

> The first and third statements in the second paragraph of your response is false. 
> I have ever asked to "guarantee a stable C++ API at this point in time" or at any point ever.
> It's a fact.
> [Regina Obe] 

I never said you wanted to guarantee a stable C++ API.  And we don't have one is my point.
Something that is unstable should not be shared.  It should be statically linked or set aside for your own project and as such you shouldn't expect package maintainers to carry your project.  


> The second statement in the second paragraph of your response is also false.
> GEOS users can and do depend on the C++ API.
> It's a fact. 
No disagreement there - just don't want packagers burdened with having to ship these projects and right now we have few if any that use the C++ API
that packagers need to ship.  I'd like to keep it that way by discouraging sharing of the C++ API.  Installing headers etc -- as pramsey suggested would just open up the flood-gates of C++ projects relying on the C++-API until we have some REALLY IMPORTANT C++ project that relies on GEOS that packagers would like to ship, and expecting them to statically link every GEOS use is insane and a security hole.

I care more about packagers feeling comfortable about shipping a newer GEOS C-API and PostGIS being able to use a newer GEOS C-API than I feel about making C++ developers happy. You people have all proven to be only concerned about your self-interest and your toys.


> The arguments you present show to me you're pursuing goals of a package manager but not a programmer who wrote that code.

The way I see it Mat -- there are way more programmers than there are packagers on the GEOS / PostGIS teams, so YES I got to look out for the minority which has a major impact on the majority, because clearly no one else seems to.

> This brought incompatible toys in to the common sandbox.
What incompatible toys -- you still have your sandbox -- it's just a little more sandboxed.

> You do not want to recognize it.
I recognize it but I care much less about it than other things.  You're the one that turned in your keys to the GEOS project and said you didn't want to be part of it anymore.  I was extremely disappointed when you said that. So why this sudden new found interest?
 
> I'm not going to keep convincing you anymore.
Good cause we are in full agreement - we are just on opposite sides of the spectrum.

Thanks,
Regina



From lnkansa at gmail.com  Fri May 17 23:44:16 2019
From: lnkansa at gmail.com (lnkansa)
Date: Sat, 18 May 2019 08:44:16 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <000001d50cff$2b646050$822d20f0$@pcorp.us>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
 <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
 <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>
 <CABUeae_KcmS3AT6u6qS=yJv5nMNKRo1Etg_XRL_gnofM=xc0gg@mail.gmail.com>
 <000001d50cff$2b646050$822d20f0$@pcorp.us>
Message-ID: <CAKi1hVYPs6j70O94B5gizF+ktVKro9AKypO25g-gjzEiNB8Q=w@mail.gmail.com>

For the second time, this discussion has become very passionate at some
point. That being said, I believe all the package management issues being
used as an excuse are more of an issue for Linux-based systems. Those who
develop Linux-based applications should know better if they depend on
system wide library distribution for their dependencies via some package
management. For them, they should have stability in mind when doing their
development. Why should a larger community pay for the poor choice of
others and would have to jump through additional hoops to achieve what
should be trivial in C++? I am not a Linux expert/developer and would not
be in a position to judge. Such applications could consider static linking
as alternative or risk being dropped by the PACKAGE MANAGERS and those who
want to make their work easier. It is the responsibility of statically
linked application to fix security updates. I do acknowledge most of the
PSC/maintainers primary OS might be linux and might have their own
preferences/biases.

GEOS, we should not forget has a considerable number of Windows users and
on windows, each application is responsible for its own "sandbox"
environment. A case in point is the layout of Postgis windows distribution
as an example. If there is a required security update, it is handled at the
individually installed application level and not system wide. People
develop their own schemes to realize how their dependencies are met. I
rarely hear such issues on Windows like package management. GEOS has the
ability to gain more traction if such artificial restrictions are removed.

Desktop application development stands to benefit a lot on windows - yes
there are people out there using the library on windows. There is no
gainsaying that those doing server application have other considerations to
keep in mind. There should be nothing like "end of discussion - done"
rather it should be based on facts/guidelines/practices as they are. Those
who break it should pay the price. That said what, why should we prevent
the C++ API for being used? Yes, it has special needs. I do not hear such
arguments with GDAL. They broke the API and people had to fix their stuff
did in order to use newer releases. The ABI issues as document should just
be used as reference for those who complain. After all, GEOS is not LINUX
kernel where such drastic considerations have their merits. Even LINUX, we
have seen some positive transformations in the way Linux kernel is managed.

Some people use mostly C language for the obvious reasons. Others use C++
and are looking forward to use the high level abstractions the new
standards (11, 14, 17, 20x) are providing. The interests of the minority
should be respected but should not be used as an excuse to stifle
innovation. Yes there is Boost Geometry as an alternative but why has it
not gained traction? Because of complexity - something GEOS has a an
advantage. GEOS should not be used or turned into as Expert only library.
Please remember package management is a long standing issue in C/C++ based
on its characteristics - those being the same that make them popular when
people want primarily performance.

On Sat, May 18, 2019 at 12:23 AM Regina Obe <lr at pcorp.us> wrote:

> Mat,
>
> I think you misunderstood me a little
>
> > The first and third statements in the second paragraph of your response
> is false.
> > I have ever asked to "guarantee a stable C++ API at this point in time"
> or at any point ever.
> > It's a fact.
> > [Regina Obe]
>
> I never said you wanted to guarantee a stable C++ API.  And we don't have
> one is my point.
> Something that is unstable should not be shared.  It should be statically
> linked or set aside for your own project and as such you shouldn't expect
> package maintainers to carry your project.
>
>
> > The second statement in the second paragraph of your response is also
> false.
> > GEOS users can and do depend on the C++ API.
> > It's a fact.
> No disagreement there - just don't want packagers burdened with having to
> ship these projects and right now we have few if any that use the C++ API
> that packagers need to ship.  I'd like to keep it that way by discouraging
> sharing of the C++ API.  Installing headers etc -- as pramsey suggested
> would just open up the flood-gates of C++ projects relying on the C++-API
> until we have some REALLY IMPORTANT C++ project that relies on GEOS that
> packagers would like to ship, and expecting them to statically link every
> GEOS use is insane and a security hole.
>
> I care more about packagers feeling comfortable about shipping a newer
> GEOS C-API and PostGIS being able to use a newer GEOS C-API than I feel
> about making C++ developers happy. You people have all proven to be only
> concerned about your self-interest and your toys.
>
>
> > The arguments you present show to me you're pursuing goals of a package
> manager but not a programmer who wrote that code.
>
> The way I see it Mat -- there are way more programmers than there are
> packagers on the GEOS / PostGIS teams, so YES I got to look out for the
> minority which has a major impact on the majority, because clearly no one
> else seems to.
>
> > This brought incompatible toys in to the common sandbox.
> What incompatible toys -- you still have your sandbox -- it's just a
> little more sandboxed.
>
> > You do not want to recognize it.
> I recognize it but I care much less about it than other things.  You're
> the one that turned in your keys to the GEOS project and said you didn't
> want to be part of it anymore.  I was extremely disappointed when you said
> that. So why this sudden new found interest?
>
> > I'm not going to keep convincing you anymore.
> Good cause we are in full agreement - we are just on opposite sides of the
> spectrum.
>
> Thanks,
> Regina
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190518/ccef1da3/attachment.html>

From lr at pcorp.us  Sat May 18 07:10:28 2019
From: lr at pcorp.us (Regina Obe)
Date: Sat, 18 May 2019 10:10:28 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CAKi1hVYPs6j70O94B5gizF+ktVKro9AKypO25g-gjzEiNB8Q=w@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
 <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
 <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>
 <CABUeae_KcmS3AT6u6qS=yJv5nMNKRo1Etg_XRL_gnofM=xc0gg@mail.gmail.com>
 <000001d50cff$2b646050$822d20f0$@pcorp.us>
 <CAKi1hVYPs6j70O94B5gizF+ktVKro9AKypO25g-gjzEiNB8Q=w@mail.gmail.com>
Message-ID: <001301d50d83$731069b0$59313d10$@pcorp.us>

Inkana,

 

First of all I am a 90% windows developer, so I'm well aware of the sensitivities of windows.  Guess who builds the EDB Windows PostGIS package? – ME.

I do admit I don't use C++ much so perhaps I don't fully understood the gripe that C++ API developers are complaining about.

 

That said what are we arguing about here? 

https://lists.osgeo.org/pipermail/geos-devel/2017-October/008109.html

 

We are talking about developers who want to use the C++ API adding an extra line in their script to make their intentions clear.

By making your intentions clear – you know others who want to use the C++API will be required to do so too.  Which means you most likely intend to run in a statically compiled or sandboxed environment as all have described that affects no one but users of your project (presumably users who are quite capable of compiling their own stuff) or YOU, who take on the responsibility of packaging as does SAFE Software and other companies.

L

First let me define what I mean by Public:  Projects that rely on packagers to distribute the artifacts of their project.

 

Everyone I talk to that is a C++ developer – I hear "But you are saying C++ API is not as important as the  C-API  and you are discouraging use of the  C++ API by calling it unstable."

 

What I'm saying is -  "C++ API is not AS stable (and probably be even less stable as we introduce new  C++ features) . Sure it's important but we want to change it. The C-API is the bulk of what most public projects using GEOS are using.  I think after osm2pgsql left, there are no more public projects using the C++ API. 

 

If more public projects were already using the C++ API I would have a different tune, but we don't so we are in a good position to enforce it before it's too late.

Thus I care more about ensuring that projects that eventually require packager support use the C-API (at least for now)  than I care about your frustration of having to add an extra line to your compile scripts"

 

> Because of complexity - something GEOS has an advantage. GEOS should not be used or turned into as Expert only library

Exactly and if we continue appealing to every C++ API developer gimme  "But it's a C++ API", we'll become just as complex as Boost Geometry in no time.

 

At this point GEOS as a C-API is more important to the general consumer than its use as a C++ API, and if C++ developers continue with this attitude of  "I don't care if it has a stable C++ API, cause I can stick with the old version if it changes too much and I compile my own stuff anyway", then the C++ API will always have an UNSTABLE caveat.  We don't even guarantee the C++ API won't change in a micro (though we try not to do that).

 

Thanks,

Regina

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of lnkansa
Sent: Saturday, May 18, 2019 2:44 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] RFC 9: Restore C++ API as public API

 

For the second time, this discussion has become very passionate at some point. That being said, I believe all the package management issues being used as an excuse are more of an issue for Linux-based systems. Those who develop Linux-based applications should know better if they depend on system wide library distribution for their dependencies via some package management. For them, they should have stability in mind when doing their development. Why should a larger community pay for the poor choice of others and would have to jump through additional hoops to achieve what should be trivial in C++? I am not a Linux expert/developer and would not be in a position to judge. Such applications could consider static linking as alternative or risk being dropped by the PACKAGE MANAGERS and those who want to make their work easier. It is the responsibility of statically linked application to fix security updates. I do acknowledge most of the PSC/maintainers primary OS might be linux and might have their own preferences/biases.  

 

GEOS, we should not forget has a considerable number of Windows users and on windows, each application is responsible for its own "sandbox" environment. A case in point is the layout of Postgis windows distribution as an example. If there is a required security update, it is handled at the individually installed application level and not system wide. People develop their own schemes to realize how their dependencies are met. I rarely hear such issues on Windows like package management. GEOS has the ability to gain more traction if such artificial restrictions are removed.

 

Desktop application development stands to benefit a lot on windows - yes there are people out there using the library on windows. There is no gainsaying that those doing server application have other considerations to keep in mind. There should be nothing like "end of discussion - done" rather it should be based on facts/guidelines/practices as they are. Those who break it should pay the price. That said what, why should we prevent the C++ API for being used? Yes, it has special needs. I do not hear such arguments with GDAL. They broke the API and people had to fix their stuff did in order to use newer releases. The ABI issues as document should just be used as reference for those who complain. After all, GEOS is not LINUX kernel where such drastic considerations have their merits. Even LINUX, we have seen some positive transformations in the way Linux kernel is managed.

 

Some people use mostly C language for the obvious reasons. Others use C++ and are looking forward to use the high level abstractions the new standards (11, 14, 17, 20x) are providing. The interests of the minority should be respected but should not be used as an excuse to stifle innovation. Yes there is Boost Geometry as an alternative but why has it not gained traction? Because of complexity - something GEOS has a an advantage. GEOS should not be used or turned into as Expert only library. Please remember package management is a long standing issue in C/C++ based on its characteristics - those being the same that make them popular when people want primarily performance.

 

On Sat, May 18, 2019 at 12:23 AM Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

Mat,

I think you misunderstood me a little

> The first and third statements in the second paragraph of your response is false. 
> I have ever asked to "guarantee a stable C++ API at this point in time" or at any point ever.
> It's a fact.
> [Regina Obe] 

I never said you wanted to guarantee a stable C++ API.  And we don't have one is my point.
Something that is unstable should not be shared.  It should be statically linked or set aside for your own project and as such you shouldn't expect package maintainers to carry your project.  


> The second statement in the second paragraph of your response is also false.
> GEOS users can and do depend on the C++ API.
> It's a fact. 
No disagreement there - just don't want packagers burdened with having to ship these projects and right now we have few if any that use the C++ API
that packagers need to ship.  I'd like to keep it that way by discouraging sharing of the C++ API.  Installing headers etc -- as pramsey suggested would just open up the flood-gates of C++ projects relying on the C++-API until we have some REALLY IMPORTANT C++ project that relies on GEOS that packagers would like to ship, and expecting them to statically link every GEOS use is insane and a security hole.

I care more about packagers feeling comfortable about shipping a newer GEOS C-API and PostGIS being able to use a newer GEOS C-API than I feel about making C++ developers happy. You people have all proven to be only concerned about your self-interest and your toys.


> The arguments you present show to me you're pursuing goals of a package manager but not a programmer who wrote that code.

The way I see it Mat -- there are way more programmers than there are packagers on the GEOS / PostGIS teams, so YES I got to look out for the minority which has a major impact on the majority, because clearly no one else seems to.

> This brought incompatible toys in to the common sandbox.
What incompatible toys -- you still have your sandbox -- it's just a little more sandboxed.

> You do not want to recognize it.
I recognize it but I care much less about it than other things.  You're the one that turned in your keys to the GEOS project and said you didn't want to be part of it anymore.  I was extremely disappointed when you said that. So why this sudden new found interest?

> I'm not going to keep convincing you anymore.
Good cause we are in full agreement - we are just on opposite sides of the spectrum.

Thanks,
Regina


_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190518/43bc4d2f/attachment-0001.html>

From strk at kbt.io  Sat May 18 11:18:50 2019
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 18 May 2019 20:18:50 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
References: <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
Message-ID: <20190518181850.GA9799@liz>

On Fri, May 17, 2019 at 07:34:13PM +0200, lnkansa wrote:

> While I do appreciate the work of the library developers, I do support that
> fact that C++ API is made available for the larger community.

I might have missed recent changes but isn't it that we're still
making it available and just raising a compiler WARNING when including
the C++ headers, with hints telling you how to hush those warnings ?

That means the C++ API is still made available...

--strk;

From strk at kbt.io  Sat May 18 11:22:47 2019
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 18 May 2019 20:22:47 +0200
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
Message-ID: <20190518182247.GB9799@liz>

On Thu, May 16, 2019 at 04:28:05PM -0500, Mateusz Loskot wrote:
> Dear All,
> 
> I'd like propose to effectively revert the RFC 6:
> 
> https://trac.osgeo.org/geos/wiki/RFC9
> 
> I'll appreciate if the PSC members considered to review my proposal
> and arranged the voting.
> 
> Although I've made my best to prepare the write short,
> clear and unambiguous proposal, I'll welcome your feedback.

Excuse me, maybe I lost some changes, but the C++ API was still
available as public API. RFC6 was never implemented, as not passed.

The only change related to the mentioned mailing list thread,
that I'm aware of, is commit aae36582e743505c863c5767e5989da48f84d5a6,
which introduced a compiler WARNING emitted (togheter with
instructions on how to hush it) when _building_ applications using
the C++ API of GEOS.

Please correct me if I'm wrong

REF: https://git.osgeo.org/gitea/geos/geos/commit/aae36582e

--strk;

From gdt at lexort.com  Sat May 18 12:10:48 2019
From: gdt at lexort.com (Greg Troxel)
Date: Sat, 18 May 2019 15:10:48 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <CAKi1hVYPs6j70O94B5gizF+ktVKro9AKypO25g-gjzEiNB8Q=w@mail.gmail.com>
 (lnkansa's message of "Sat, 18 May 2019 08:44:16 +0200")
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <eb01019b-a3d7-5344-6958-3f314f28d4d2@xs4all.nl>
 <CACJ51z3X_Vt=LpJEwe_tmxYohkcUWOvDJ8yEk8LGkkwr9jWF9g@mail.gmail.com>
 <c56dc03f-f42c-0327-e109-61b3d8e55f5e@xs4all.nl>
 <CACJ51z3gikbMT3PibAZLkjnkchjn3Nr88rs53at7seL9EP7gsg@mail.gmail.com>
 <2026a73a-6628-dac7-6902-aa5211fcc3e8@xs4all.nl>
 <CACJ51z3SzD_uRP+n1jd6OO=vTK_mFjTqiTG3Y2mpjfXu9_5UzA@mail.gmail.com>
 <2f2e4e2c-8a6e-991e-896e-644769493923@xs4all.nl>
 <CABUeae-jLB=AjMQj+vLdjh8aU2fjWv78DDFrkom4b4-dpbSKyg@mail.gmail.com>
 <1dff2b9d-eb55-68e8-6583-29bd09cd8b63@xs4all.nl>
 <CAKi1hVbRt-y7ejk-xfQJeCyUAKLv=1Mk=tF0Qhh+TePjdbO3MQ@mail.gmail.com>
 <CACmBxytRsv+gaxfpr1CF=S6D9=OcFarVbMr0QGzpqXbwpxkfAw@mail.gmail.com>
 <003d01d50ce4$a19549d0$e4bfdd70$@pcorp.us>
 <CABUeae_KcmS3AT6u6qS=yJv5nMNKRo1Etg_XRL_gnofM=xc0gg@mail.gmail.com>
 <000001d50cff$2b646050$822d20f0$@pcorp.us>
 <CAKi1hVYPs6j70O94B5gizF+ktVKro9AKypO25g-gjzEiNB8Q=w@mail.gmail.com>
Message-ID: <smuzhnjefyf.fsf@linuxpal.mit.edu>

lnkansa <lnkansa at gmail.com> writes:

> For the second time, this discussion has become very passionate at some
> point. That being said, I believe all the package management issues being
> used as an excuse are more of an issue for Linux-based systems. Those who
> develop Linux-based applications should know better if they depend on
> system wide library distribution for their dependencies via some package
> management. For them, they should have stability in mind when doing their
> development. Why should a larger community pay for the poor choice of
> others and would have to jump through additional hoops to achieve what
> should be trivial in C++? I am not a Linux expert/developer and would not
> be in a position to judge. Such applications could consider static linking
> as alternative or risk being dropped by the PACKAGE MANAGERS and those who
> want to make their work easier. It is the responsibility of statically
> linked application to fix security updates. I do acknowledge most of the
> PSC/maintainers primary OS might be linux and might have their own
> preferences/biases.

This is not about GNU/Linux vs other packaging systems.  It is about the
notion that it is normal and proper to use dynamic linking and only have
one copy of a library, such that it can be updated for security issues
without having to update large amounts of other things.

Part of the problem, perhaps most of it, is that programs written in C++
tend not have a stable ABI.  With a notion of ABI stability, I think
most of the objections would be less strong.

From lr at pcorp.us  Sat May 18 12:27:13 2019
From: lr at pcorp.us (Regina Obe)
Date: Sat, 18 May 2019 15:27:13 -0400
Subject: [geos-devel] RFC 9: Restore C++ API as public API
In-Reply-To: <20190518182247.GB9799@liz>
References: <CABUeae_BG6M_O8vuX1iaA=POAKGvabxiYHbWHYeNo3CkFf5OLw@mail.gmail.com>
 <20190518182247.GB9799@liz>
Message-ID: <000401d50daf$b2aa97e0$17ffc7a0$@pcorp.us>

> On Thu, May 16, 2019 at 04:28:05PM -0500, Mateusz Loskot wrote:
> > Dear All,
> >
> > I'd like propose to effectively revert the RFC 6:
> >
> > https://trac.osgeo.org/geos/wiki/RFC9
> >
> > I'll appreciate if the PSC members considered to review my proposal
> > and arranged the voting.
> >
> > Although I've made my best to prepare the write short, clear and
> > unambiguous proposal, I'll welcome your feedback.
> 
> Excuse me, maybe I lost some changes, but the C++ API was still available
as
> public API. RFC6 was never implemented, as not passed.
> 
> The only change related to the mentioned mailing list thread, that I'm
aware
> of, is commit aae36582e743505c863c5767e5989da48f84d5a6,
> which introduced a compiler WARNING emitted (togheter with instructions on
> how to hush it) when _building_ applications using the C++ API of GEOS.
> 
> Please correct me if I'm wrong
> 
> REF: https://git.osgeo.org/gitea/geos/geos/commit/aae36582e
> 
> --strk;
[Regina Obe] 
I always assumed that's what we were arguing about the actual commit.
https://lists.osgeo.org/pipermail/geos-devel/2017-October/008114.html

But the RFC 6 - went back and forth back and forth -
https://trac.osgeo.org/geos/wiki/RFC6  -- so it needs to be rewritten a bit
to reflect the actual reality and probably just passed to minimize on
confusion.

I even thought Mat was on board with the change when we discussed a year and
half ago:

https://lists.osgeo.org/pipermail/geos-devel/2017-October/008049.html

But was hung up on the words -- DEPRECATE   which we did not use.  We used
"GEOS C++ API is unstable" which Mat thought was so intuitively obvious to
not be worthy of mention in any mode in which any developer would be forced
to read it to proceed.

FWIW I think Greg's comments were more "here's the points"  with much less
emotion than we've exhibited the past couple of days.
https://lists.osgeo.org/pipermail/geos-devel/2017-October/008082.html
I don't know if we should provide a link with a long drawn out discussion of
why you should or should not use the C++ API?  (Like is GEOS C++ API for
you?) as it does make a lot of sense to use in many circumstances.


Thanks,
Regina




From geos-trac at osgeo.org  Sat May 18 12:51:31 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 May 2019 19:51:31 -0000
Subject: [geos-devel] [GEOS] #970: CMAke broken on winnie and appveyor
	(mingw64, VS)
Message-ID: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>

#970: CMAke broken on winnie and appveyor (mingw64, VS)
------------------------+--------------------------
 Reporter:  robe        |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.8.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Seems as a result of change

 https://git.osgeo.org/gitea/geos/geos/commit/b15fd1171823d16195bee17f2c7b44778603258d

 Might be just the cmake needs upgrading on both.


 {{{
 Commit 1aedfca497d6de23bd3a857191da10b98b6b01f0 by mateusz

 Modernize CMake configuration
 Refactoring based on practices of the Modern CMake approach:
 * Set project version based on `version.txt` spec.
 * Build shared libraries by default.
 * Build tools and `geos-config` script.
 * Add make `check` target to run `ctest` (no dependencies).
 * Move failing/overlarge tests into `failure` directory.
 * Add target to deploy Config-module with installed targets:
  `GEOS::geos`, `GEOS::geos_c`.
 * Add basic uninstall target
 * Add basic client example configured with CMake to use GEOS targets.
 }}}


 Both winnie and appveyor are broken

 On Winnie (which is running mingw64, but using  general windows compiled
 cmake) I get this - FWIW the cmake version in use is CMake 3.12.1 on
 winnie.
 I'll upgrade to see if it fixes the issue.


 {{{
 -- The C compiler identification is GNU 8.1.0
 -- The CXX compiler identification is GNU 8.1.0
 -- Check for working C compiler: C:/ming64gcc81/mingw64/bin/gcc.exe
 -- Check for working C compiler: C:/ming64gcc81/mingw64/bin/gcc.exe --
 works
 -- Detecting C compiler ABI info
 -- Detecting C compiler ABI info - done
 -- Detecting C compile features
 -- Detecting C compile features - done
 -- Check for working CXX compiler: C:/ming64gcc81/mingw64/bin/g++.exe
 -- Check for working CXX compiler: C:/ming64gcc81/mingw64/bin/g++.exe --
 works
 -- Detecting CXX compiler ABI info
 -- Detecting CXX compiler ABI info - done
 -- Detecting CXX compile features
 -- Detecting CXX compile features - done
 -- GEOS: Version 3.8.0-dev
 -- GEOS: C API soversion
 -- GEOS: JTS port 1.13.0
 -- GEOS: Require C++11
 -- GEOS: Developer mode enabled
 -- Configuring done
 -- Generating done
 :
 Unable to find executable:
 E:/jenkins/geos/branches/build64cmake/tests/perf/operation/predicate/test_perf_rectangle_intersects.exe
 6/7 Test #6: test_perf_rectangle_intersects ...***Not Run   0.00 sec
     Start 7: test_perf_memleak_mp_prep
 Could not find executable
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/test_perf_memleak_mp_prep.exe
 Looked in the following places:
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/test_perf_memleak_mp_prep.exe.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Release/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Release/test_perf_memleak_mp_prep.exe.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Debug/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Debug/test_perf_memleak_mp_prep.exe.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/MinSizeRel/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/MinSizeRel/test_perf_memleak_mp_prep.exe.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/RelWithDebInfo/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/RelWithDebInfo/test_perf_memleak_mp_prep.exe.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Deployment/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Deployment/test_perf_memleak_mp_prep.exe.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Development/test_perf_memleak_mp_prep.exe
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/Development/test_perf_memleak_mp_prep.exe.exe
 Unable to find executable:
 E:/jenkins/geos/branches/build64cmake/tests/perf/capi/test_perf_memleak_mp_prep.exe
 7/7 Test #7: test_perf_memleak_mp_prep ........***Not Run   0.00 sec

 0% tests passed, 7 tests failed out of 7

 Total Test time (real) =   0.04 sec

 The following tests FAILED:
           1 - test_geos_unit (Not Run)
           2 - test_xmltester (Not Run)
           3 - test_bug234 (Not Run)
           4 - test_perf_class_sizes (Not Run)
           5 - test_perf_iterated_buffer (Not Run)
           6 - test_perf_rectangle_intersects (Not Run)
           7 - test_perf_memleak_mp_prep (Not Run)
 Errors while running CTest
 make[3]: *** [tests/CMakeFiles/check.dir/build.make:57:
 tests/CMakeFiles/check] Error 8
 make[2]: *** [CMakeFiles/Makefile2:1190: tests/CMakeFiles/check.dir/all]
 Error 2
 make[1]: *** [CMakeFiles/Makefile2:1197: tests/CMakeFiles/check.dir/rule]
 Error 2
 make: *** [Makefile:591: check] Error 2

 }}}

 Appveyor's issue seems to be just complain about too old a version.
 Version needed is 3.14 or higher, which is odd I didn't get the same
 warning on winnie so maybe that's a VS only check.


 {{{
 uild started
 Write-Host "Building GEOS branch: $env:APPVEYOR_REPO_BRANCH"
 -ForegroundColor Magenta
 Building GEOS branch: master
 if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" if
 "%GENERATOR%"=="NMake Makefiles" if "%PLATFORM%"=="x86" call "C:\Program
 Files (x86)\Microsoft Visual
 Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"
 if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" if
 "%GENERATOR%"=="NMake Makefiles" if "%PLATFORM%"=="x64" call "C:\Program
 Files (x86)\Microsoft Visual
 Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
 if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" if
 "%GENERATOR%"=="NMake Makefiles" if "%PLATFORM%"=="x86" call "C:\Program
 Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
 if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" if
 "%GENERATOR%"=="NMake Makefiles" if "%PLATFORM%"=="x64" call "C:\Program
 Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64
 if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" if
 "%GENERATOR%"=="NMake Makefiles" if "%PLATFORM%"=="x64" call "C:\Program
 Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
 Fetching repository commit (b15fd11)...OK
 Total: 10.1 MB in 1247 files
 Write-Host "Running $env:BUILDER with $env:GENERATOR" -ForegroundColor
 Magenta
 Running CMake with Visual Studio 15 2017 Win64
 if "%BUILDER%"=="CMake" cmake.exe -G "%GENERATOR%"
 -DCMAKE_BUILD_TYPE=%CONFIGURATION% %APPVEYOR_BUILD_FOLDER%
 CMake Error at CMakeLists.txt:18 (cmake_minimum_required):
   CMake 3.14 or higher is required.  You are running version 3.13.3
 -- Configuring incomplete, errors occurred!
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 18 13:06:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 May 2019 20:06:27 -0000
Subject: [geos-devel] [GEOS] #970: CMAke broken on winnie and appveyor
 (mingw64, VS) and travis (was: CMAke broken on winnie and appveyor (mingw64,
 VS))
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.e550bf1430f0490b3b5e1c962f8d75c6@osgeo.org>

#970: CMAke broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by robe):

 Just checked even our happy go luck travis cmake runs are failing.


 {{{
 -- GEOS: C API soversion 11
 -- GEOS: JTS port 1.13.0
 -- GEOS: Require C++11
 -- GEOS: Developer mode enabled
 CMake Error at tests/xmltester/CMakeLists.txt:15 (add_executable):
   add_executable called with incorrect number of arguments
 CMake Error at tests/xmltester/CMakeLists.txt:16 (target_sources):
   Cannot specify sources for target "test_xmltester" which is not built by
   this project.
 CMake Error at tests/xmltester/CMakeLists.txt:23 (target_link_libraries):
   Cannot specify link libraries for target "test_xmltester" which is not
   built by this project.

 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 18 13:21:31 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 May 2019 20:21:31 -0000
Subject: [geos-devel] [GEOS] #970: CMAke broken on winnie and appveyor
 (mingw64, VS) and travis
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.110d3ecf7f43427cfe3c059610026023@osgeo.org>

#970: CMAke broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mloskot):

 Install newer CMake - Kitware makes it very easy do, e.g. like so

 https://github.com/mloskot/wsl-config/blob/master/scripts/install-cmake-
 latest.ps1
 https://github.com/mloskot/wsl-config/blob/master/scripts/install-cmake-
 latest.sh

 or tweak the lines here:

 https://github.com/libgeos/geos/blob/master/CMakeLists.txt#L16-L19

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 18 14:14:31 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 May 2019 21:14:31 -0000
Subject: [geos-devel] [GEOS] #970: CMAke broken on winnie and appveyor
 (mingw64, VS) and travis
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.3b4b5c79432e8cb32133b3619be6bccf@osgeo.org>

#970: CMAke broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by robe):

 Upgraded winnie to latest cmake which is 3.14.4 and that did not fix her
 issue

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 18 14:16:11 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 May 2019 21:16:11 -0000
Subject: [geos-devel] [GEOS] #970: CMake broken on winnie and appveyor
 (mingw64, VS) and travis (was: CMAke broken on winnie and appveyor (mingw64,
 VS) and travis)
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.19119205192d78652b56527d43c2bee5@osgeo.org>

#970: CMake broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 18 14:46:35 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 May 2019 21:46:35 -0000
Subject: [geos-devel] [GEOS] #970: CMake broken on winnie and appveyor
 (mingw64, VS) and travis
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.fb4e2fd953c3476b904538fb492c38e0@osgeo.org>

#970: CMake broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mloskot):

 Must be a different issue then.

 On Linux all builds fine. On Windows, there seem to be only some ttmath
 issues.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue May 21 19:08:24 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 22 May 2019 02:08:24 -0000
Subject: [geos-devel] [GEOS] #971: @GEOS_VERSION@ not being replaced
Message-ID: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>

#971: @GEOS_VERSION@ not being replaced
----------------------+--------------------------
 Reporter:  robe      |      Owner:  geos-devel@…
     Type:  defect    |     Status:  new
 Priority:  major     |  Milestone:  3.8.0
Component:  Default   |    Version:  master
 Severity:  Critical  |   Keywords:
----------------------+--------------------------
 I just noticed that debbie's postgis builds started failing recently.

 Looks like the geos @GEOS_VERSION@ is not being replaced.

 Might be something I need to change but was fine 5 days ago.


 {{{
   WARNING: You have set the --prefix to
 '/var/lib/jenkins/workspace/pg/rel/pg11w64'. But we mostly
   ignore the --prefix. For your info, using the values determined from
   /var/lib/jenkins/workspace/pg/rel/pg11w64/bin/pg_config we will be
 installing:
     * postgis shared library in
 /var/lib/jenkins/workspace/pg/rel/pg11w64/lib
     * postgis SQL files in
 /var/lib/jenkins/workspace/pg/rel/pg11w64/share/postgresql/contrib/postgis-3.0
     * postgis executables in /var/lib/jenkins/workspace/pg/rel/pg11w64/bin
 ------------------------------------------------------------------------
 checking for xml2-config... /usr/bin/xml2-config
 checking libxml/tree.h usability... yes
 checking libxml/tree.h presence... yes
 checking for libxml/tree.h... yes
 checking libxml/parser.h usability... yes
 checking libxml/parser.h presence... yes
 checking for libxml/parser.h... yes
 checking libxml/xpath.h usability... yes
 checking libxml/xpath.h presence... yes
 checking for libxml/xpath.h... yes
 checking libxml/xpathInternals.h usability... yes
 checking libxml/xpathInternals.h presence... yes
 checking for libxml/xpathInternals.h... yes
 checking for xmlInitParser in -lxml2... yes
 Using user-specified geos-config file:
 /var/lib/jenkins/workspace/geos/rel-3.8w64/bin/geos-config
 checking GEOS version... @GEOS_VERSION@
 configure: error: PostGIS requires GEOS >= 3.6.0
 Build step 'Execute shell' marked build as failure
 An attempt to send an e-mail to empty list of recipients, ignored.
 Triggering a new build of PostgreSQL stop
 Finished: FAILURE
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/971>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From communitysprint at osgeo.org  Tue May 21 22:27:57 2019
From: communitysprint at osgeo.org (communitysprint at osgeo.org)
Date: Wed, 22 May 2019 07:27:57 +0200
Subject: [geos-devel] Join us at the FOSS4G 2019 Community Sprint Saturday
 31 August 2019 Bucharest
Message-ID: <79efcc2cfde2928899d7fbcfbe448d28@posteo.de>

Hello,

the FOSS4G 2019 Community Sprint [1] will be right after the global 
FOSS4G
conference [2] and will be your chance to share ideas with the teams, 
and
to discuss and improve different OSGeo projects. We follow this
tradition since 2009.

The Sprint will take place Saturday 31 August 2019
in the University of Bucharest at Faculty of Geography [3] from 9AM
- 18PM.

It offers a great opportunity to meet OSGeo members and get involved in
the projects! The Community Sprint is an opportunity for developers and
non developers to meet with the core team of the projects and get a
deeper insight into the software

The OSGeo Community Sprint is open to all who wish to participate in one
or more projects. There is always plenty to do – it’s not all about
programming. Translation, documentation, feedback, discussions, testing
– all this is also important for projects so everyone is cordially
invited to attend the Community sprint!

The Organizing Team is looking forward to your coming!

Please register soon [1] (important for better planning). If you need an
accomodation take also a look to the accomodation page [4]

See you at FOSS4G 2019!

The FOSS4G 2019 Community Sprint Team


[1] https://wiki.osgeo.org/wiki/FOSS4G_2019_Community_Sprint
[2] http://2019.foss4g.org/
[3] 
https://en.unibuc.ro/academic-programmes/faculties/faculty-of-geography/
[4] https://2019.foss4g.org/attending/accomodation/

-- 
****************************************************
See you in Bucharest at the FOSS4G Community Sprint 2019
Saturday 31. August 2019

https://wiki.osgeo.org/wiki/FOSS4G_2019_Community_Sprint
*****************************************************

From geos-trac at osgeo.org  Tue May 21 23:33:43 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 22 May 2019 06:33:43 -0000
Subject: [geos-devel] [GEOS] #971: @GEOS_VERSION@ not being replaced
In-Reply-To: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
References: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
Message-ID: <057.c13c50bb2bbca691f7327042f25fb7c5@osgeo.org>

#971: @GEOS_VERSION@ not being replaced
----------------------+---------------------------
 Reporter:  robe      |       Owner:  geos-devel@…
     Type:  defect    |      Status:  new
 Priority:  major     |   Milestone:  3.8.0
Component:  Default   |     Version:  master
 Severity:  Critical  |  Resolution:
 Keywords:            |
----------------------+---------------------------

Comment (by strk):

 I'm confused, you're showing what look like being PostGIS build
 output, not GEOS'...

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/971#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed May 22 05:55:43 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 22 May 2019 12:55:43 -0000
Subject: [geos-devel] [GEOS] #971: @GEOS_VERSION@ not being replaced
In-Reply-To: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
References: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
Message-ID: <057.0e857ebb51cdcda8deebe15dba9d384f@osgeo.org>

#971: @GEOS_VERSION@ not being replaced
----------------------+---------------------------
 Reporter:  robe      |       Owner:  geos-devel@…
     Type:  defect    |      Status:  new
 Priority:  major     |   Milestone:  3.8.0
Component:  Default   |     Version:  master
 Severity:  Critical  |  Resolution:
 Keywords:            |
----------------------+---------------------------

Comment (by robe):

 Correct strk, but it's because of GEOS that debbie's postgis builds are
 failing because PostGIS is expecting GEOS 3.6 or greater, and debbie is
 running against GEOS trunk (head) and the geos-config that got installed
 is all screwed up.  No variables got replaced.

 this is the output of geos-config that got installed:


 {{{
 #!/bin/sh

 prefix=@CMAKE_INSTALL_PREFIX@
 exec_prefix=@CMAKE_INSTALL_PREFIX@/bin
 libdir=@CMAKE_INSTALL_PREFIX@/lib

 usage()
 {
     cat <<EOF
 Usage: geos-config [OPTIONS]
 Options:
      [--prefix]
      [--version]
      [--libs]
      [--clibs]
      [--cclibs]
      [--static-clibs]
      [--static-cclibs]
      [--cflags]
      [--ldflags]
      [--includes]
      [--jtsport]
 EOF
     exit $1
 }

 if test $# -eq 0; then
   usage 1 1>&2
 fi

 while test $# -gt 0; do
 case "$1" in
     -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
     *) optarg= ;;
 esac
 case $1 in
     --prefix)
       echo @CMAKE_INSTALL_PREFIX@
       ;;
     --version)
       echo @GEOS_VERSION@
       ;;
     --cflags)
       echo -I at CMAKE_INSTALL_PREFIX@/include
       ;;
     --libs)
       echo -L at CMAKE_INSTALL_PREFIX@/lib -lgeos- at GEOS_VERSION_MAJOR@
       ;;
     --clibs)
       echo -L at CMAKE_INSTALL_PREFIX@/lib -lgeos_c
       ;;
     --cclibs)
       echo -L at CMAKE_INSTALL_PREFIX@/lib -lgeos
       ;;
     --static-clibs)
       echo -L at CMAKE_INSTALL_PREFIX@/lib -lgeos_c -lgeos -lm
       ;;
     --static-cclibs)
       echo -L at CMAKE_INSTALL_PREFIX@/lib -lgeos -lm
       ;;
     --ldflags)
       echo -L at CMAKE_INSTALL_PREFIX@/lib -lgeos
       ;;
     --includes)
       echo @CMAKE_INSTALL_PREFIX@/include
       ;;
     --jtsport)
     echo 1.13.0
       ;;
     *)
       usage 1 1>&2
       ;;
   esac
   shift
 done

 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/971#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed May 22 05:57:03 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 22 May 2019 12:57:03 -0000
Subject: [geos-devel] [GEOS] #971: @GEOS_VERSION@ not being replaced
In-Reply-To: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
References: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
Message-ID: <057.fc92201fb9156a1ecc57e1a9410bf20a@osgeo.org>

#971: @GEOS_VERSION@ not being replaced
----------------------+---------------------------
 Reporter:  robe      |       Owner:  geos-devel@…
     Type:  defect    |      Status:  new
 Priority:  major     |   Milestone:  3.8.0
Component:  Default   |     Version:  master
 Severity:  Critical  |  Resolution:
 Keywords:            |
----------------------+---------------------------

Comment (by robe):

 I should add that the geos 3.7 geos-config last installed 5/2 looks like
 this, see the difference?

 {{{
 #!/bin/sh
 prefix=/var/lib/jenkins/workspace/geos/rel-3.7w64
 exec_prefix=${prefix}
 libdir=${exec_prefix}/lib

 usage()
 {
     cat <<EOF
 Usage: geos-config [OPTIONS]
 Options:
      [--prefix]
      [--version]
      [--libs]
      [--clibs]
      [--cclibs]
      [--static-clibs]
      [--static-cclibs]
      [--cflags]
      [--ldflags]
      [--includes]
      [--jtsport]
 EOF
     exit $1
 }
 if test $# -eq 0; then
   usage 1 1>&2
 fi
 while test $# -gt 0; do
 case "$1" in
     -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
     *) optarg= ;;
 esac
 case $1 in
     --prefix)
     echo ${prefix}
      ;;
     --version)
     echo 3.7.3dev
      ;;
     --cflags)
     echo -I${prefix}/include
       ;;
     --libs)
       # TODO: make an alias for --clibs
       # see http://trac.osgeo.org/geos/ticket/497
       echo -L${libdir} -lgeos-3.7.3
       ;;
     --clibs)
       echo -L${libdir} -lgeos_c
       ;;
     --cclibs)
       echo -L${libdir} -lgeos
       ;;
     --static-clibs)
       echo -L${libdir} -lgeos_c -lgeos -lm
       ;;
     --static-cclibs)
       echo -L${libdir} -lgeos -lm
       ;;
     --ldflags)
       echo -L${libdir}
       ;;
     --includes)
       echo ${prefix}/include
       ;;
     --jtsport)
     echo 1.13.0
       ;;
     *)
       usage 1 1>&2
       ;;
   esac
   shift
 done

 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/971#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From Tim.Balschmiter at rostock.de  Wed May 22 06:03:05 2019
From: Tim.Balschmiter at rostock.de (Tim Balschmiter)
Date: Wed, 22 May 2019 15:03:05 +0200
Subject: [geos-devel] PHP Bindings fir Windows 10 with Wamp and PHP 7.x
Message-ID: <5CE548890200004000003D4B@stadt5.rostock.de>

Hi Community,

The php-bindings of Sandro (https://git.osgeo.org/gitea/geos/php-geos)
is working finde on my ubuntu system, but i can´t get it work on Windows
10.
I´ve installe geos with the OSGeo4W-Package and i´ve install wamp with
php 7.3.1 (the same as on my ubuntu). Now, i installed cygwin (as an
building tool).

Maybe one of you can help me by building it on Win10 or has a
PHP-Bindingpackage, which is working on Winows10.

When i run: $ ./autogen.sh, i get the following output:
Configuring for:
PHP Api Version:         20180731
Zend Module Api No:      20180731
Zend Extension Api No:   320180731

After this i´m getting the following by runing ./configure  :
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for a sed that does not truncate output... /usr/bin/sed
checking for cc... cc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether cc accepts -g... yes
checking for cc option to accept ISO C89... none needed
checking how to run the C preprocessor... cc -E
checking for icc... no
checking for suncc... no
checking whether cc understands -c and -o together... yes
checking for system library directory... lib
checking if compiler supports -R... no
checking if compiler supports -Wl,-rpath,... yes
checking build system type... x86_64-pc-cygwin
checking host system type... x86_64-pc-cygwin
checking target system type... x86_64-pc-cygwin
checking for PHP prefix... /usr
checking for PHP includes... -I/usr/include/php -I/usr/include/php/main
-I/usr/include/php/TSRM -I/usr/include/php/Zend -I/usr/include/php/ext
-I/usr/include/php/ext/date/lib
checking for PHP extension directory... /usr/lib/php/20180731
checking for PHP installed headers prefix... /usr/include/php
checking if debug is enabled... no
checking if zts is enabled... no
checking for re2c... no
configure: WARNING: You will need re2c 0.13.4 or later if you want to
regenerate PHP parsers.
checking for gawk... gawk
checking whether to enable geos support... yes, shared
checking for geos-config... yes, shared
checking for geos-config... no
configure: error: Cannot find geos_c.h. Please specify correct GEOS
installation path

i do not find the place to configure the path for geos_c.h . Maybe you
can help me.
In my opinion a lot of people are interessted in a solution ;-).



thanks a lot for reading my mail
best regards
Tim

p.s. i only need it for desktop pc, where i can not change the OS.




From geos-trac at osgeo.org  Wed May 22 06:43:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 22 May 2019 13:43:27 -0000
Subject: [geos-devel] [GEOS] #971: @GEOS_VERSION@ not being replaced
In-Reply-To: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
References: <042.594d09568862eed15e5601a7aa1de336@osgeo.org>
Message-ID: <057.0d4d5e9d227bd1cf96302a67e2fd57e3@osgeo.org>

#971: @GEOS_VERSION@ not being replaced
----------------------+----------------------
 Reporter:  robe      |       Owner:  pramsey
     Type:  defect    |      Status:  new
 Priority:  major     |   Milestone:  3.8.0
Component:  Default   |     Version:  master
 Severity:  Critical  |  Resolution:
 Keywords:            |
----------------------+----------------------
Changes (by robe):

 * owner:  geos-devel@… => pramsey


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/971#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at kbt.io  Wed May 22 11:04:54 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 22 May 2019 20:04:54 +0200
Subject: [geos-devel] astyle followup
Message-ID: <20190522180454.GB31911@liz>

As I noticed astyle was recently included in the GEOS source tree
(tools/astyle) I thought I'd move another little step in the
direction of having some style enforced by tools.

Result of this excercise was the creation of an astyle wrapper
which landed in tools/astyle.sh that you can pass a list of files
to operate one.

For a test I run it against all the .cpp files in our tree,
except for astyle/ source code itself. The resulting stats:

 317 files changed, 7672 insertions(+), 7634 deletions(-)

Of those 317 files changed:

  120 have less than 10 lines changed
  179 have more than 10 but less than 100 lines changed
   12 have more than 100 lines changed

Those 12 "big offenders" are, in order of lines changed:

   src/operation/polygonize/PolygonizeGraph.cpp       |  100 +-
   src/triangulate/quadedge/QuadEdgeSubdivision.cpp   |  100 +-
   src/io/WKTReader.cpp                               |  102 +-
   src/operation/distance/DistanceOp.cpp              |  102 +-
   src/io/WKTWriter.cpp                               |  106 +-
   src/geom/GeometryFactory.cpp                       |  120 +-
   tests/unit/operation/polygonize/PolygonizeTest.cpp |  120 +-
   src/operation/valid/IsValidOp.cpp                  |  136 +-
   src/operation/overlay/OverlayOp.cpp                |  140 +-
   src/geom/Geometry.cpp                              |  146 +-
   .../intersection/RectangleIntersection.cpp         |  148 +-
   src/operation/valid/MakeValid.cpp                  |  148 +-
   src/algorithm/LineIntersector.cpp                  |  202 +-
   doc/example.cpp                                    |  230 +-
   tests/xmltester/XMLTester.cpp                      |  500 ++-
   capi/geos_ts_c.cpp                                 | 1642 ++++-----
   tests/xmltester/tinyxml2/tinyxml2.cpp              | 1939 +++++------
   tests/xmltester/Stackwalker.cpp                    | 3511 ++++++++++----------

I found out that the astyle configuration will NOT touch multi-line
comments, so style drifts in alignment of `*' symbols in those blocks
won't be fixed.

I think we could play with astyle configuration and see which options
give us the less changes. For example I found that dropping --pad-header
gives us less changes:

 24 files changed, 3056 insertions(+), 3019 deletions(-)


--strk;

  ()   Free GIS & Flash consultant/developer
  /\   https://strk.kbt.io/services.html

From strk at kbt.io  Thu May 23 02:48:02 2019
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 23 May 2019 11:48:02 +0200
Subject: [geos-devel] PHP Bindings fir Windows 10 with Wamp and PHP 7.x
In-Reply-To: <5CE548890200004000003D4B@stadt5.rostock.de>
References: <5CE548890200004000003D4B@stadt5.rostock.de>
Message-ID: <20190523094802.GB25880@liz>

On Wed, May 22, 2019 at 03:03:05PM +0200, Tim Balschmiter wrote:
> Hi Community,
> 
> The php-bindings of Sandro (https://git.osgeo.org/gitea/geos/php-geos)
> is working finde on my ubuntu system, but i can´t get it work on Windows
> 10.

Is this the same problem reported on following ticket ?
https://git.osgeo.org/gitea/geos/php-geos/issues/19

> checking whether to enable geos support... yes, shared
> checking for geos-config... yes, shared
> checking for geos-config... no
> configure: error: Cannot find geos_c.h. Please specify correct GEOS
> installation path
> 
> i do not find the place to configure the path for geos_c.h . Maybe you
> can help me.

  $ ./configure  --help | grep geos
    --enable-geos             Enable geos support
    --with-geos-config=DIR    Use geos-config

Are you passing --with-geos-config switch ?

> In my opinion a lot of people are interessted in a solution ;-).

If you think this is the same problem reported in issues/19 please
update it as you find more things.

> p.s. i only need it for desktop pc, where i can not change the OS.

Virtual machines are easy nowadays :)

--strk;

From Tim.Balschmiter at rostock.de  Thu May 23 05:02:17 2019
From: Tim.Balschmiter at rostock.de (Tim Balschmiter)
Date: Thu, 23 May 2019 14:02:17 +0200
Subject: [geos-devel] Antw: Re: PHP Bindings fir Windows 10 with Wamp and
 PHP 7.x
In-Reply-To: <20190523094802.GB25880@liz>
References: <5CE548890200004000003D4B@stadt5.rostock.de>
 <20190523094802.GB25880@liz>
Message-ID: <5CE68BC90200004000003D4F@stadt5.rostock.de>

I´m not sure, if it is the same problem, in my opinion it is an other
way to build php bindings for geos.
I only need a working solution, so i choose every way. It would be my
first extension, which i build. I don´t know which steps and tools i
need.

best regards


>>> Sandro Santilli <strk at kbt.io> 23.05.2019 11:48 >>>
On Wed, May 22, 2019 at 03:03:05PM +0200, Tim Balschmiter wrote:
> Hi Community,
> 
> The php-bindings of Sandro
(https://git.osgeo.org/gitea/geos/php-geos)
> is working finde on my ubuntu system, but i can´t get it work on
Windows
> 10.

Is this the same problem reported on following ticket ?
https://git.osgeo.org/gitea/geos/php-geos/issues/19 

> checking whether to enable geos support... yes, shared
> checking for geos-config... yes, shared
> checking for geos-config... no
> configure: error: Cannot find geos_c.h. Please specify correct GEOS
> installation path
> 
> i do not find the place to configure the path for geos_c.h . Maybe
you
> can help me.

  $ ./configure  --help | grep geos
    --enable-geos             Enable geos support
    --with-geos-config=DIR    Use geos-config

Are you passing --with-geos-config switch ?

> In my opinion a lot of people are interessted in a solution ;-).

If you think this is the same problem reported in issues/19 please
update it as you find more things.

> p.s. i only need it for desktop pc, where i can not change the OS.

Virtual machines are easy nowadays :)

--strk;
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org 
https://lists.osgeo.org/mailman/listinfo/geos-devel


From Tim.Balschmiter at rostock.de  Thu May 23 07:07:24 2019
From: Tim.Balschmiter at rostock.de (Tim Balschmiter)
Date: Thu, 23 May 2019 16:07:24 +0200
Subject: [geos-devel] Antw: Antw: Re: PHP Bindings fir Windows 10 with Wamp
 and PHP 7.x
In-Reply-To: <5CE68BC90200004000003D4F@stadt5.rostock.de>
References: <5CE548890200004000003D4B@stadt5.rostock.de>
 <20190523094802.GB25880@liz> <5CE68BC90200004000003D4F@stadt5.rostock.de>
Message-ID: <5CE6A91C0200004000003D61@stadt5.rostock.de>

Hi,
i´ve build PHP with this method:
https://medium.com/@erinus/how-to-build-php-on-windows-a7ad0a87862a
And i´ve tested to build the php-geos binding by this way:
https://medium.com/@erinus/how-to-build-php-extension-on-windows-d1667290f809

If i work with the given example (apcu) everything seams to be fine.
If i´m copy the git folder to the php sources and do
configure --disable-all --enable-cli --enable-geos=shared
or
configure --disable-all --enable-cli --enable-php-geos=shared

i get 
The following arguments is invalid, and therefore ignored:
 --enable-geos

So in my opinion i´m using the wrong dataset. Has somebody some
solution ideas?

best regards
Tim





>>> "Tim Balschmiter" <Tim.Balschmiter at rostock.de> 23.05.2019 14:02
>>>
I´m not sure, if it is the same problem, in my opinion it is an other
way to build php bindings for geos.
I only need a working solution, so i choose every way. It would be my
first extension, which i build. I don´t know which steps and tools i
need.

best regards


>>> Sandro Santilli <strk at kbt.io> 23.05.2019 11:48 >>>
On Wed, May 22, 2019 at 03:03:05PM +0200, Tim Balschmiter wrote:
> Hi Community,
> 
> The php-bindings of Sandro
(https://git.osgeo.org/gitea/geos/php-geos)
> is working finde on my ubuntu system, but i can´t get it work on
Windows
> 10.

Is this the same problem reported on following ticket ?
https://git.osgeo.org/gitea/geos/php-geos/issues/19 

> checking whether to enable geos support... yes, shared
> checking for geos-config... yes, shared
> checking for geos-config... no
> configure: error: Cannot find geos_c.h. Please specify correct GEOS
> installation path
> 
> i do not find the place to configure the path for geos_c.h . Maybe
you
> can help me.

  $ ./configure  --help | grep geos
    --enable-geos             Enable geos support
    --with-geos-config=DIR    Use geos-config

Are you passing --with-geos-config switch ?

> In my opinion a lot of people are interessted in a solution ;-).

If you think this is the same problem reported in issues/19 please
update it as you find more things.

> p.s. i only need it for desktop pc, where i can not change the OS.

Virtual machines are easy nowadays :)

--strk;
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org 
https://lists.osgeo.org/mailman/listinfo/geos-devel 

_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org 
https://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Fri May 24 11:49:23 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 24 May 2019 18:49:23 -0000
Subject: [geos-devel] [GEOS] #585: mingw64 trunk make check fail on
	badthreadtest
In-Reply-To: <042.cbd4808d86448f25f39501d3742854e7@osgeo.org>
References: <042.cbd4808d86448f25f39501d3742854e7@osgeo.org>
Message-ID: <057.c5bb1af8756de4391a2b244b10778274@osgeo.org>

#585: mingw64 trunk make check fail on badthreadtest
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  minor       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by robe):

 * status:  reopened => closed
 * resolution:   => fixed
 * milestone:  GEOS Fund Me => 3.8.0


Comment:

 I switched to CMake a while ago, but anyway autotools is working again as
 a result of recent changes in the past 10 days, soo we can close this one
 out as fixed in 3.8

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/585#comment:18>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri May 24 11:55:39 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 24 May 2019 18:55:39 -0000
Subject: [geos-devel] [GEOS] #518: GEOS 3.3.2 crashes on MinGW64
In-Reply-To: <045.a4abcd47e299235a57ee37f37d88543a@osgeo.org>
References: <045.a4abcd47e299235a57ee37f37d88543a@osgeo.org>
Message-ID: <060.38193a5578f37ea05b916369c89aa0e7@osgeo.org>

#518: GEOS 3.3.2 crashes on MinGW64
------------------------+---------------------------
 Reporter:  esseffe     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.3.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by robe):

 * status:  new => closed
 * resolution:   => fixed
 * milestone:  GEOS Fund Me => 3.8.0


Comment:

 I suspect this issue might be fixed in 3.8.  I get a clean autotools build
 and make check now with xmltester under autotools.

 It's now cmake where I'm having issue.  I think Sandro Furieri (esseffe)
 was using autotools for building, so I suspect the issue is probably fixed
 for him.

 Sandro, can you try retesting and reopen if its still an issue in 3.8.
 Feel free to reopen if it is.

 We won't be back porting any changes though so will only work for 3.8+

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/518#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri May 24 12:11:52 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 24 May 2019 19:11:52 -0000
Subject: [geos-devel] [GEOS] #970: CMake broken on winnie and appveyor
 (mingw64, VS) and travis
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.dde13f8936a2120e0230b3130ee611f7@osgeo.org>

#970: CMake broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by robe):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 For the record I think this issue is fixed.

 On winnie I had:


 {{{
 -DGEOS_ENABLE_INLINE=NO
 }}}

 But this variable had been removed in
 https://git.osgeo.org/gitea/geos/geos/commit/b15fd1171823d16195bee17f2c7b44778603258d

 and replaced with a reverse


 {{{
 DISABLE_GEOS_INLINE
 }}}

 In either case the default is to turn inlining ON.  But in using inlining
 on,

 I would get these errors in CMAKE for mingw64 building:


 {{{
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x658):
 multiple definition of `geos::geomgraph::DirectedEdge::isInResult()'
 CMakeFiles/geos.dir/objects.a(DirectedEdgeStar.cpp.obj):DirectedEdgeStar.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge10isInResultEv[_ZN4geos9geomgraph12DirectedEdge10isInResultEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x684):
 multiple definition of `geos::geomgraph::DirectedEdge::setVisited(bool)'
 CMakeFiles/geos.dir/objects.a(DirectedEdge.cpp.obj):DirectedEdge.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge10setVisitedEb[_ZN4geos9geomgraph12DirectedEdge10setVisitedEb]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x6c0):
 multiple definition of `geos::geomgraph::DirectedEdge::getEdgeRing()'
 CMakeFiles/geos.dir/objects.a(DirectedEdgeStar.cpp.obj):DirectedEdgeStar.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge11getEdgeRingEv[_ZN4geos9geomgraph12DirectedEdge11getEdgeRingEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x70a):
 multiple definition of `geos::geomgraph::DirectedEdge::getDepth(int)'
 CMakeFiles/geos.dir/objects.a(DirectedEdgeStar.cpp.obj):DirectedEdgeStar.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge8getDepthEi[_ZN4geos9geomgraph12DirectedEdge8getDepthEi]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x72a):
 multiple definition of `geos::geomgraph::DirectedEdge::getSym()'
 CMakeFiles/geos.dir/objects.a(DirectedEdgeStar.cpp.obj):DirectedEdgeStar.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge6getSymEv[_ZN4geos9geomgraph12DirectedEdge6getSymEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x740):
 multiple definition of `geos::geomgraph::DirectedEdge::isForward()'
 CMakeFiles/geos.dir/objects.a(EdgeRing.cpp.obj):EdgeRing.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge9isForwardEv[_ZN4geos9geomgraph12DirectedEdge9isForwardEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x756):
 multiple definition of
 `geos::geomgraph::DirectedEdge::setSym(geos::geomgraph::DirectedEdge*)'
 CMakeFiles/geos.dir/objects.a(PlanarGraph.cpp.obj):PlanarGraph.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge6setSymEPS1_[_ZN4geos9geomgraph12DirectedEdge6setSymEPS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x774):
 multiple definition of `geos::geomgraph::DirectedEdge::getNext()'
 CMakeFiles/geos.dir/objects.a(EdgeRing.cpp.obj):EdgeRing.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge7getNextEv[_ZN4geos9geomgraph12DirectedEdge7getNextEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x78a):
 multiple definition of
 `geos::geomgraph::DirectedEdge::setNext(geos::geomgraph::DirectedEdge*)'
 CMakeFiles/geos.dir/objects.a(DirectedEdgeStar.cpp.obj):DirectedEdgeStar.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge7setNextEPS1_[_ZN4geos9geomgraph12DirectedEdge7setNextEPS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x7be):
 multiple definition of
 `geos::geomgraph::DirectedEdge::setNextMin(geos::geomgraph::DirectedEdge*)'
 CMakeFiles/geos.dir/objects.a(DirectedEdgeStar.cpp.obj):DirectedEdgeStar.cpp:(.text$_ZN4geos9geomgraph12DirectedEdge10setNextMinEPS1_[_ZN4geos9geomgraph12DirectedEdge10setNextMinEPS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x7dc):
 multiple definition of
 `geos::geomgraph::GeometryGraph::getBoundaryNodes(std::vector<geos::geomgraph::Node*,
 std::allocator<geos::geomgraph::Node*> >&)'
 CMakeFiles/geos.dir/objects.a(GeometryGraph.cpp.obj):GeometryGraph.cpp:(.text$_ZN4geos9geomgraph13GeometryGraph16getBoundaryNodesERSt6vectorIPNS0_4NodeESaIS4_EE[_ZN4geos9geomgraph13GeometryGraph16getBoundaryNodesERSt6vectorIPNS0_4NodeESaIS4_EE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x812):
 multiple definition of `geos::geomgraph::GeometryGraph::getGeometry()'
 CMakeFiles/geos.dir/objects.a(EdgeEndStar.cpp.obj):EdgeEndStar.cpp:(.text$_ZN4geos9geomgraph13GeometryGraph11getGeometryEv[_ZN4geos9geomgraph13GeometryGraph11getGeometryEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x824):
 multiple definition of `geos::geomgraph::GeometryGraph::~GeometryGraph()'
 CMakeFiles/geos.dir/objects.a(PointLocator.cpp.obj):PointLocator.cpp:(.text$_ZN4geos9geomgraph13GeometryGraphD1Ev[_ZN4geos9geomgraph13GeometryGraphD1Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x882):
 multiple definition of `geos::geomgraph::GeometryGraph::~GeometryGraph()'
 CMakeFiles/geos.dir/objects.a(PointLocator.cpp.obj):PointLocator.cpp:(.text$_ZN4geos9geomgraph13GeometryGraphD0Ev[_ZN4geos9geomgraph13GeometryGraphD0Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x8a8):
 multiple definition of
 `geos::algorithm::ConvexHull::ConvexHull(geos::geom::Geometry const*)'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos9algorithm10ConvexHullC1EPKNS_4geom8GeometryE[_ZN4geos9algorithm10ConvexHullC1EPKNS_4geom8GeometryE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x91c):
 multiple definition of `geos::algorithm::ConvexHull::~ConvexHull()'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos9algorithm10ConvexHullD1Ev[_ZN4geos9algorithm10ConvexHullD1Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x940):
 multiple definition of
 `geos::algorithm::ConvexHull::extractCoordinates(geos::geom::Geometry
 const*)'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos9algorithm10ConvexHull18extractCoordinatesEPKNS_4geom8GeometryE[_ZN4geos9algorithm10ConvexHull18extractCoordinatesEPKNS_4geom8GeometryE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x9b8):
 multiple definition of `geos::geom::GeometryCollection::begin() const'
 CMakeFiles/geos.dir/objects.a(PointLocator.cpp.obj):PointLocator.cpp:(.text$_ZNK4geos4geom18GeometryCollection5beginEv[_ZNK4geos4geom18GeometryCollection5beginEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x9f2):
 multiple definition of `geos::geom::GeometryCollection::end() const'
 CMakeFiles/geos.dir/objects.a(PointLocator.cpp.obj):PointLocator.cpp:(.text$_ZNK4geos4geom18GeometryCollection3endEv[_ZNK4geos4geom18GeometryCollection3endEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xa2c):
 multiple definition of
 `geos::geom::LineSegment::LineSegment(geos::geom::LineSegment const&)'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos4geom11LineSegmentC1ERKS1_[_ZN4geos4geom11LineSegmentC1ERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xa8a):
 multiple definition of
 `geos::geom::LineSegment::LineSegment(geos::geom::Coordinate const&,
 geos::geom::Coordinate const&)'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos4geom11LineSegmentC1ERKNS0_10CoordinateES4_[_ZN4geos4geom11LineSegmentC1ERKNS0_10CoordinateES4_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xb76):
 multiple definition of `geos::geom::LineSegment::LineSegment()'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos4geom11LineSegmentC1Ev[_ZN4geos4geom11LineSegmentC1Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xbe0):
 multiple definition of `geos::geom::LineSegment::~LineSegment()'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos4geom11LineSegmentD1Ev[_ZN4geos4geom11LineSegmentD1Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xbfa):
 multiple definition of `geos::geom::LineSegment::~LineSegment()'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZN4geos4geom11LineSegmentD0Ev[_ZN4geos4geom11LineSegmentD0Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xc20):
 multiple definition of
 `geos::geom::LineSegment::distancePerpendicular(geos::geom::Coordinate
 const&) const'
 CMakeFiles/geos.dir/objects.a(MinimumDiameter.cpp.obj):MinimumDiameter.cpp:(.text$_ZNK4geos4geom11LineSegment21distancePerpendicularERKNS0_10CoordinateE[_ZNK4geos4geom11LineSegment21distancePerpendicularERKNS0_10CoordinateE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xc60):
 multiple definition of `geos::geom::LineSegment::pointAlong(double,
 geos::geom::Coordinate&) const'
 CMakeFiles/geos.dir/objects.a(Densifier.cpp.obj):Densifier.cpp:(.text$_ZNK4geos4geom11LineSegment10pointAlongEdRNS0_10CoordinateE[_ZNK4geos4geom11LineSegment10pointAlongEdRNS0_10CoordinateE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xdd6):
 multiple definition of
 `geos::geom::LineSegment::setCoordinates(geos::geom::Coordinate const&,
 geos::geom::Coordinate const&)'
 CMakeFiles/geos.dir/objects.a(LineSegment.cpp.obj):LineSegment.cpp:(.text$_ZN4geos4geom11LineSegment14setCoordinatesERKNS0_10CoordinateES4_[_ZN4geos4geom11LineSegment14setCoordinatesERKNS0_10CoordinateES4_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xefe):
 multiple definition of `geos::geom::LineSegment::getLength() const'
 CMakeFiles/geos.dir/objects.a(Densifier.cpp.obj):Densifier.cpp:(.text$_ZNK4geos4geom11LineSegment9getLengthEv[_ZNK4geos4geom11LineSegment9getLengthEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x125c):
 multiple definition of `geos::geom::PrecisionModel::~PrecisionModel()'
 CMakeFiles/geos.dir/objects.a(Geometry.cpp.obj):Geometry.cpp:(.text$_ZN4geos4geom14PrecisionModelD1Ev[_ZN4geos4geom14PrecisionModelD1Ev]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1268):
 multiple definition of
 `geos::geom::PrecisionModel::makePrecise(geos::geom::Coordinate*) const'
 CMakeFiles/geos.dir/objects.a(GeometryFactory.cpp.obj):GeometryFactory.cpp:(.text$_ZNK4geos4geom14PrecisionModel11makePreciseEPNS0_10CoordinateE[_ZNK4geos4geom14PrecisionModel11makePreciseEPNS0_10CoordinateE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x12c0):
 multiple definition of `geos::geom::PrecisionModel::getScale() const'
 CMakeFiles/geos.dir/objects.a(Geometry.cpp.obj):Geometry.cpp:(.text$_ZNK4geos4geom14PrecisionModel8getScaleEv[_ZNK4geos4geom14PrecisionModel8getScaleEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x131a):
 multiple definition of `geos::geom::Envelope::getMaxY() const'
 CMakeFiles/geos.dir/objects.a(InteriorPointArea.cpp.obj):InteriorPointArea.cpp:(.text$_ZNK4geos4geom8Envelope7getMaxYEv[_ZNK4geos4geom8Envelope7getMaxYEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1338):
 multiple definition of `geos::geom::Envelope::getMaxX() const'
 CMakeFiles/geos.dir/objects.a(Envelope.cpp.obj):Envelope.cpp:(.text$_ZNK4geos4geom8Envelope7getMaxXEv[_ZNK4geos4geom8Envelope7getMaxXEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1356):
 multiple definition of `geos::geom::Envelope::getMinY() const'
 CMakeFiles/geos.dir/objects.a(InteriorPointArea.cpp.obj):InteriorPointArea.cpp:(.text$_ZNK4geos4geom8Envelope7getMinYEv[_ZNK4geos4geom8Envelope7getMinYEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1374):
 multiple definition of `geos::geom::Envelope::getMinX() const'
 CMakeFiles/geos.dir/objects.a(Envelope.cpp.obj):Envelope.cpp:(.text$_ZNK4geos4geom8Envelope7getMinXEv[_ZNK4geos4geom8Envelope7getMinXEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1390):
 multiple definition of
 `geos::geom::Envelope::intersects(geos::geom::Coordinate const&) const'
 CMakeFiles/geos.dir/objects.a(PointLocator.cpp.obj):PointLocator.cpp:(.text$_ZNK4geos4geom8Envelope10intersectsERKNS0_10CoordinateE[_ZNK4geos4geom8Envelope10intersectsERKNS0_10CoordinateE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1408):
 multiple definition of
 `geos::geom::Envelope::intersects(geos::geom::Envelope const&) const'
 CMakeFiles/geos.dir/objects.a(Envelope.cpp.obj):Envelope.cpp:(.text$_ZNK4geos4geom8Envelope10intersectsERKS1_[_ZNK4geos4geom8Envelope10intersectsERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x142e):
 multiple definition of `geos::geom::Envelope::isNull() const'
 CMakeFiles/geos.dir/objects.a(Envelope.cpp.obj):Envelope.cpp:(.text$_ZNK4geos4geom8Envelope6isNullEv[_ZNK4geos4geom8Envelope6isNullEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1450):
 multiple definition of
 `geos::geom::Envelope::intersects(geos::geom::Envelope const*) const'
 CMakeFiles/geos.dir/objects.a(Envelope.cpp.obj):Envelope.cpp:(.text$_ZNK4geos4geom8Envelope10intersectsEPKS1_[_ZNK4geos4geom8Envelope10intersectsEPKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x15c8):
 multiple definition of `geos::geom::Coordinate::setNull()'
 CMakeFiles/geos.dir/objects.a(MinimumBoundingCircle.cpp.obj):MinimumBoundingCircle.cpp:(.text$_ZN4geos4geom10Coordinate7setNullEv[_ZN4geos4geom10Coordinate7setNullEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1606):
 multiple definition of `geos::geom::Coordinate::isNull() const'
 CMakeFiles/geos.dir/objects.a(MinimumBoundingCircle.cpp.obj):MinimumBoundingCircle.cpp:(.text$_ZNK4geos4geom10Coordinate6isNullEv[_ZNK4geos4geom10Coordinate6isNullEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1666):
 multiple definition of `geos::geom::Coordinate::Coordinate(double, double,
 double)'
 CMakeFiles/geos.dir/objects.a(Area.cpp.obj):Area.cpp:(.text$_ZN4geos4geom10CoordinateC1Eddd[_ZN4geos4geom10CoordinateC1Eddd]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x16aa):
 multiple definition of
 `geos::geom::Coordinate::equals2D(geos::geom::Coordinate const&) const'
 CMakeFiles/geos.dir/objects.a(ConvexHull.cpp.obj):ConvexHull.cpp:(.text$_ZNK4geos4geom10Coordinate8equals2DERKS1_[_ZNK4geos4geom10Coordinate8equals2DERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x172c):
 multiple definition of
 `geos::geom::Coordinate::compareTo(geos::geom::Coordinate const&) const'
 CMakeFiles/geos.dir/objects.a(ConvexHull.cpp.obj):ConvexHull.cpp:(.text$_ZNK4geos4geom10Coordinate9compareToERKS1_[_ZNK4geos4geom10Coordinate9compareToERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x185e):
 multiple definition of
 `geos::geom::Coordinate::distance(geos::geom::Coordinate const&) const'
 CMakeFiles/geos.dir/objects.a(Centroid.cpp.obj):Centroid.cpp:(.text$_ZNK4geos4geom10Coordinate8distanceERKS1_[_ZNK4geos4geom10Coordinate8distanceERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1944):
 multiple definition of `geos::geom::Coordinate::hashCode(double)'
 CMakeFiles/geos.dir/objects.a(Envelope.cpp.obj):Envelope.cpp:(.text$_ZN4geos4geom10Coordinate8hashCodeEd[_ZN4geos4geom10Coordinate8hashCodeEd]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1976):
 multiple definition of
 `geos::geom::CoordinateLessThen::operator()(geos::geom::Coordinate const*,
 geos::geom::Coordinate const*) const'
 CMakeFiles/geos.dir/objects.a(ConvexHull.cpp.obj):ConvexHull.cpp:(.text$_ZNK4geos4geom18CoordinateLessThenclEPKNS0_10CoordinateES4_[_ZNK4geos4geom18CoordinateLessThenclEPKNS0_10CoordinateES4_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x19f1):
 multiple definition of `geos::geom::operator==(geos::geom::Coordinate
 const&, geos::geom::Coordinate const&)'
 CMakeFiles/geos.dir/objects.a(Distance.cpp.obj):Distance.cpp:(.text$_ZN4geos4geomeqERKNS0_10CoordinateES3_[_ZN4geos4geomeqERKNS0_10CoordinateES3_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1a40):
 multiple definition of `geos::geom::GeometryFactory::getSRID() const'
 CMakeFiles/geos.dir/objects.a(Geometry.cpp.obj):Geometry.cpp:(.text$_ZNK4geos4geom15GeometryFactory7getSRIDEv[_ZNK4geos4geom15GeometryFactory7getSRIDEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1a52):
 multiple definition of
 `geos::geom::GeometryFactory::getCoordinateSequenceFactory() const'
 CMakeFiles/geos.dir/objects.a(ConvexHull.cpp.obj):ConvexHull.cpp:(.text$_ZNK4geos4geom15GeometryFactory28getCoordinateSequenceFactoryEv[_ZNK4geos4geom15GeometryFactory28getCoordinateSequenceFactoryEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1af4):
 multiple definition of
 `geos::geom::MultiLineString::MultiLineString(geos::geom::MultiLineString
 const&)'
 CMakeFiles/geos.dir/objects.a(MultiLineString.cpp.obj):MultiLineString.cpp:(.text$_ZN4geos4geom15MultiLineStringC1ERKS1_[_ZN4geos4geom15MultiLineStringC1ERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1bd4):
 multiple definition of `geos::geom::MultiLineString::clone() const'
 CMakeFiles/geos.dir/objects.a(MultiLineString.cpp.obj):MultiLineString.cpp:(.text$_ZNK4geos4geom15MultiLineString5cloneEv[_ZNK4geos4geom15MultiLineString5cloneEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1c34):
 multiple definition of `virtual thunk to
 geos::geom::MultiLineString::clone() const'
 CMakeFiles/geos.dir/objects.a(MultiLineString.cpp.obj):MultiLineString.cpp:(.text$_ZTv0_n24_NK4geos4geom15MultiLineString5cloneEv[_ZTv0_n24_NK4geos4geom15MultiLineString5cloneEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1cce):
 multiple definition of
 `geos::geom::MultiPolygon::MultiPolygon(geos::geom::MultiPolygon const&)'
 CMakeFiles/geos.dir/objects.a(MultiPolygon.cpp.obj):MultiPolygon.cpp:(.text$_ZN4geos4geom12MultiPolygonC1ERKS1_[_ZN4geos4geom12MultiPolygonC1ERKS1_]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1dae):
 multiple definition of `geos::geom::MultiPolygon::clone() const'
 CMakeFiles/geos.dir/objects.a(MultiPolygon.cpp.obj):MultiPolygon.cpp:(.text$_ZNK4geos4geom12MultiPolygon5cloneEv[_ZNK4geos4geom12MultiPolygon5cloneEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1e0e):
 multiple definition of `virtual thunk to geos::geom::MultiPolygon::clone()
 const'
 CMakeFiles/geos.dir/objects.a(MultiPolygon.cpp.obj):MultiPolygon.cpp:(.text$_ZTv0_n24_NK4geos4geom12MultiPolygon5cloneEv[_ZTv0_n24_NK4geos4geom12MultiPolygon5cloneEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1e18):
 multiple definition of
 `geos::geom::CoordinateArraySequenceFactory::create() const'
 CMakeFiles/geos.dir/objects.a(CoordinateArraySequenceFactory.cpp.obj):CoordinateArraySequenceFactory.cpp:(.text$_ZNK4geos4geom30CoordinateArraySequenceFactory6createEv[_ZNK4geos4geom30CoordinateArraySequenceFactory6createEv]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1e7a):
 multiple definition of
 `geos::geom::CoordinateArraySequenceFactory::create(std::vector<geos::geom::Coordinate,
 std::allocator<geos::geom::Coordinate> >*, unsigned long long) const'
 CMakeFiles/geos.dir/objects.a(CoordinateArraySequenceFactory.cpp.obj):CoordinateArraySequenceFactory.cpp:(.text$_ZNK4geos4geom30CoordinateArraySequenceFactory6createEPSt6vectorINS0_10CoordinateESaIS3_EEy[_ZNK4geos4geom30CoordinateArraySequenceFactory6createEPSt6vectorINS0_10CoordinateESaIS3_EEy]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1ee8):
 multiple definition of
 `geos::geom::CoordinateArraySequenceFactory::create(unsigned long long,
 unsigned long long) const'
 CMakeFiles/geos.dir/objects.a(CoordinateArraySequenceFactory.cpp.obj):CoordinateArraySequenceFactory.cpp:(.text$_ZNK4geos4geom30CoordinateArraySequenceFactory6createEyy[_ZNK4geos4geom30CoordinateArraySequenceFactory6createEyy]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x1f56):
 multiple definition of
 `geos::geom::CoordinateArraySequenceFactory::create(geos::geom::CoordinateSequence
 const&) const'
 CMakeFiles/geos.dir/objects.a(CoordinateArraySequenceFactory.cpp.obj):CoordinateArraySequenceFactory.cpp:(.text$_ZNK4geos4geom30CoordinateArraySequenceFactory6createERKNS0_18CoordinateSequenceE[_ZNK4geos4geom30CoordinateArraySequenceFactory6createERKNS0_18CoordinateSequenceE]+0x0):
 first defined here
 CMakeFiles/geos.dir/objects.a(WKBReader.cpp.obj):WKBReader.cpp:(.text$_ZN4geos2io21ByteOrderDataInStreamC1EPSi[_ZN4geos2io21ByteOrderDataInStreamC1EPSi]+0x0):
 multiple definition of
 `geos::io::ByteOrderDataInStream::ByteOrderDataInStream(std::istream*)'
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xbc):
 first defined here
 CMakeFiles/geos.dir/objects.a(WKBReader.cpp.obj):WKBReader.cpp:(.text$_ZN4geos2io21ByteOrderDataInStream11setInStreamEPSi[_ZN4geos2io21ByteOrderDataInStream11setInStreamEPSi]+0x0):
 multiple definition of
 `geos::io::ByteOrderDataInStream::setInStream(std::istream*)'
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0xf8):
 first defined here
 CMakeFiles/geos.dir/objects.a(WKBReader.cpp.obj):WKBReader.cpp:(.text$_ZN4geos2io21ByteOrderDataInStream8setOrderEi[_ZN4geos2io21ByteOrderDataInStream8setOrderEi]+0x0):
 multiple definition of `geos::io::ByteOrderDataInStream::setOrder(int)'
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x114):
 first defined here
 CMakeFiles/geos.dir/objects.a(WKBReader.cpp.obj):WKBReader.cpp:(.text$_ZN4geos2io21ByteOrderDataInStream8readByteEv[_ZN4geos2io21ByteOrderDataInStream8readByteEv]+0x0):
 multiple definition of `geos::io::ByteOrderDataInStream::readByte()'
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x12c):
 first defined here
 CMakeFiles/geos.dir/objects.a(WKBReader.cpp.obj):WKBReader.cpp:(.text$_ZN4geos2io21ByteOrderDataInStream7readIntEv[_ZN4geos2io21ByteOrderDataInStream7readIntEv]+0x0):
 multiple definition of `geos::io::ByteOrderDataInStream::readInt()'
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x23a):
 first defined here
 CMakeFiles/geos.dir/objects.a(WKBReader.cpp.obj):WKBReader.cpp:(.text$_ZN4geos2io21ByteOrderDataInStream10readDoubleEv[_ZN4geos2io21ByteOrderDataInStream10readDoubleEv]+0x0):
 multiple definition of `geos::io::ByteOrderDataInStream::readDouble()'
 CMakeFiles/geos.dir/objects.a(inlines.cpp.obj):inlines.cpp:(.text+0x472):
 first defined here
 CMakeFiles/geos.dir/objects.a(LengthIndexOfPoint.cpp.obj):LengthIndexOfPoint.cpp:(.text$_ZNK4geos4geom11LineSegment8distanceERKNS0_10CoordinateE[_ZNK4geos4geom11LineSegment8distanceERKNS0_10CoordinateE]+0x0):
 multiple definition of
 `geos::geom::LineSegment::distance(geos::geom::Coordinate const&) const'

 }}}

 So solution was to either restore the old name or change my script to
 using -D

  -DDISABLE_GEOS_INLINE=ON


 I opted for reverting to the old behavior since pramsey didn't seem to
 care and the new would be a breaking change. at
 https://git.osgeo.org/gitea/geos/geos/commit/1fb11b298d4890afb6a86cdf3325b1272a5def1c

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri May 24 12:15:16 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 24 May 2019 19:15:16 -0000
Subject: [geos-devel] [GEOS] #913: mingw64 gcc 8.1 autotools
In-Reply-To: <042.f93377b20bba7adcd577097bf7a91ca3@osgeo.org>
References: <042.f93377b20bba7adcd577097bf7a91ca3@osgeo.org>
Message-ID: <057.a6225f6d1ad18e4ae4387f319063ede6@osgeo.org>

#913: mingw64 gcc 8.1 autotools
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by robe):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 This problem got fixed as a result of changes done in past 2 weeks.  Not
 sure what fixed it but -- yeh I can compile and regress fine again using
 autotools with mingw64 + gcc 8.1.0

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/913#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri May 24 14:50:13 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 24 May 2019 21:50:13 -0000
Subject: [geos-devel] [GEOS] #970: CMake broken on winnie and appveyor
 (mingw64, VS) and travis
In-Reply-To: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
References: <042.8205cdf8c2893211d359d5c73cbecb0f@osgeo.org>
Message-ID: <057.f8e40372ea7321664c27521aee140ec9@osgeo.org>

#970: CMake broken on winnie and appveyor (mingw64, VS) and travis
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by Regina Obe <lr@…>):

 In [changeset:"39ce10ea7fb7891b6c4f5a241c83a8dc46f8a1c7/git" 39ce10e/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="39ce10ea7fb7891b6c4f5a241c83a8dc46f8a1c7"
 Put back DISABLE_GEOS_INLINE and take out GEOS_ENABLE_INLINE.  Has clearer
 meaning though a breaking change. References #970
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/970#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 25 08:29:22 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 25 May 2019 15:29:22 -0000
Subject: [geos-devel] [GEOS] #913: mingw64 gcc 8.1 autotools
In-Reply-To: <042.f93377b20bba7adcd577097bf7a91ca3@osgeo.org>
References: <042.f93377b20bba7adcd577097bf7a91ca3@osgeo.org>
Message-ID: <057.04e60d26982c8f57156e4ff5476b5a2a@osgeo.org>

#913: mingw64 gcc 8.1 autotools
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Great news. What else needs CMake then ? :)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/913#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat May 25 10:56:31 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 25 May 2019 17:56:31 -0000
Subject: [geos-devel] [GEOS] #913: mingw64 gcc 8.1 autotools
In-Reply-To: <042.f93377b20bba7adcd577097bf7a91ca3@osgeo.org>
References: <042.f93377b20bba7adcd577097bf7a91ca3@osgeo.org>
Message-ID: <057.5623c4414513dbdb8dc4c40e3ad74bbf@osgeo.org>

#913: mingw64 gcc 8.1 autotools
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by robe):

 Everything

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/913#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

