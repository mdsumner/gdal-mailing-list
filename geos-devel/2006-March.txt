From strk at refractions.net  Wed Mar  1 03:48:25 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Unit Tests port
In-Reply-To: <40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>
References: <4404E710.5070407@loskot.net> <4405063E.6060407@alex3>
	<40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>
Message-ID: <20060301084825.GB22097@keybit.net>

I vote for C++ unit testing as well.
Boost could be a good way to go as it's maybe time to 
get boost into the dependency list for GEOS.
The shared_ptr<> template starts to get many points 
in my mind.

--strk;


On Tue, Feb 28, 2006 at 07:19:39PM -0800, Paul Ramsey wrote:
> My sense of cleanliness says that the unit testing framework should  
> be in the language being tested and not add build dependencies, but  
> He Who Commits to the Effort has the most say.
> 
> P
> 
> On Feb 28, 2006, at 6:26 PM, alex bodnaru wrote:
> 
> >hi,
> >
> >i have heard today of a very flexible utf written in python.
> >see http://www.testoob.org.
> >
> >alex
> >
> >Mateusz ??oskot wrote:
> >>Hi,
> >>
> >>I started to think about porting JTS Unit Tests to C++ for GEOS.
> >>During dynamic development Unit Tests can be very helpful, they save
> >>much time and help to track bugs/fixes lifetime, and many many more.
> >>
> >>So, first, I think it's important to choose appropriate
> >>tool - Unit-Testing Framework (UTF).
> >>There are many UTFs so I'm a bit confused which would be best ;-)
> >>I'm going to make some short research in this field but I'd like  
> >>to ask
> >>on the list if anyone has some prefered/recommended UTF and could
> >>present its pros/cons to make some comparison.
> >>
> >>My favourites are:
> >>1 - CxxTest - I have not used it, but it gots max votes in the
> >>article below
> >>http://cxxtest.sourceforge.net/
> >>
> >>2 - Boost.Test - quite complex but powerful
> >>http://www.boost.org/libs/test/doc/
> >>
> >>3 - TUT - very light and simple UTF
> >>http://tut-framework.sourceforge.net
> >>
> >>Here is interesting article exploring available UTFs
> >>(NOTE: this article is 2 years old):
> >>http://www.gamesfromwithin.com/articles/0412/000061.html
> >>
> >>Thanks for your comments!
> >>Cheers
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From strk at refractions.net  Wed Mar  1 03:51:34 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] [PATCH] Update to makefile.vc for building on Win32
	with VC++
In-Reply-To: <43FF632C.1090305@loskot.net>
References: <43FEFBB4.8030704@loskot.net> <43FF632C.1090305@loskot.net>
Message-ID: <20060301085134.GC22097@keybit.net>

On Fri, Feb 24, 2006 at 08:49:00PM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> Is this possible to include this patch to makefile.vc?
> strk tried to do it but he got some strange errors - the patch was 
> rejected. Honestly, it's quite strange for me and I have no idea what is 
>  wrong with this patch.
> 
> It was generated using
> 
> cvs diff -Nua

Can you try with 'cvs diff -U2' instead ?

--strk;

From strk at refractions.net  Wed Mar  1 03:52:55 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] [PATH] dirlist.mak file included by makefile.vc
	according latest patch
In-Reply-To: <43FEFBF5.7070005@loskot.net>
References: <43FEFBF5.7070005@loskot.net>
Message-ID: <20060301085255.GD22097@keybit.net>

Added to HEAD branch.
--strk;

From s.zschocke at infozoom.de  Wed Mar  1 04:27:53 2006
From: s.zschocke at infozoom.de (Stefan Zschocke)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Request for change
Message-ID: <00c101c63d12$6b3467a0$6702a8c0@infozoom.infozoom.de>

The error messages in TopologyValidationError are currently defined as 
	static string errMsg[];
This causes dynamic memory allocations from std::string ctor. Under certain
circumstances, when the Geos.dll is not unloaded before the heap is checked
for leaks, these are incorrectly dumped as memory leaks by VC++.
When these constants are defined as 
	static const char* errMsg[];
Then this doesn't happen and the heap shows clean. The change requires only
changing the type in declaration and implementation without further
necessity of code changes.
Same situation with WBKReader::BAD_GEOM_TYPE_MSG
If the declaration is changed to const char*, then a few code changes need
to be done: 
Instead of 				
  throw new ParseException(BAD_GEOM_TYPE_MSG+	" Polygon");
Make it
  throw new ParseException(string(BAD_GEOM_TYPE_MSG)+	" Polygon");

It takes a minute or so to do it, and after that the heap shows clean, which
makes it much easer to trace "real" leaks.
Stefan


From strk at refractions.net  Wed Mar  1 05:16:43 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Request for change
In-Reply-To: <00c101c63d12$6b3467a0$6702a8c0@infozoom.infozoom.de>
References: <00c101c63d12$6b3467a0$6702a8c0@infozoom.infozoom.de>
Message-ID: <20060301101643.GC23021@keybit.net>

Would 'static const string errMsg[]' have the same effect ?

--strk;

On Wed, Mar 01, 2006 at 10:27:53AM +0100, Stefan Zschocke wrote:
> The error messages in TopologyValidationError are currently defined as 
> 	static string errMsg[];
> This causes dynamic memory allocations from std::string ctor. Under certain
> circumstances, when the Geos.dll is not unloaded before the heap is checked
> for leaks, these are incorrectly dumped as memory leaks by VC++.
> When these constants are defined as 
> 	static const char* errMsg[];
> Then this doesn't happen and the heap shows clean. The change requires only
> changing the type in declaration and implementation without further
> necessity of code changes.
> Same situation with WBKReader::BAD_GEOM_TYPE_MSG
> If the declaration is changed to const char*, then a few code changes need
> to be done: 
> Instead of 				
>   throw new ParseException(BAD_GEOM_TYPE_MSG+	" Polygon");
> Make it
>   throw new ParseException(string(BAD_GEOM_TYPE_MSG)+	" Polygon");
> 
> It takes a minute or so to do it, and after that the heap shows clean, which
> makes it much easer to trace "real" leaks.
> Stefan

From s.zschocke at infozoom.de  Wed Mar  1 05:25:48 2006
From: s.zschocke at infozoom.de (Stefan Zschocke)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Request for change
In-Reply-To: <20060301101643.GC23021@keybit.net>
Message-ID: <00d201c63d1a$8263cb20$6702a8c0@infozoom.infozoom.de>

The const does not make any difference, as the string constructor still is
called.
And the string-ctor does the dynamic memory allocation. 
With the string declaration the texts are actually duplicated in memory:
once as constants and once as static string.
Stefan

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
strk@refractions.net
Sent: Wednesday, March 01, 2006 11:17 AM
To: geos-devel@geos.refractions.net
Subject: Re: [geos-devel] Request for change

Would 'static const string errMsg[]' have the same effect ?

--strk;

On Wed, Mar 01, 2006 at 10:27:53AM +0100, Stefan Zschocke wrote:
> The error messages in TopologyValidationError are currently defined as 
> 	static string errMsg[];
> This causes dynamic memory allocations from std::string ctor. Under 
> certain circumstances, when the Geos.dll is not unloaded before the 
> heap is checked for leaks, these are incorrectly dumped as memory leaks by
VC++.
> When these constants are defined as 
> 	static const char* errMsg[];
> Then this doesn't happen and the heap shows clean. The change requires 
> only changing the type in declaration and implementation without 
> further necessity of code changes.
> Same situation with WBKReader::BAD_GEOM_TYPE_MSG If the declaration is 
> changed to const char*, then a few code changes need to be done:
> Instead of 				
>   throw new ParseException(BAD_GEOM_TYPE_MSG+	" Polygon");
> Make it
>   throw new ParseException(string(BAD_GEOM_TYPE_MSG)+	" Polygon");
> 
> It takes a minute or so to do it, and after that the heap shows clean, 
> which makes it much easer to trace "real" leaks.
> Stefan
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Wed Mar  1 05:35:32 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Request for change
In-Reply-To: <00d201c63d1a$8263cb20$6702a8c0@infozoom.infozoom.de>
References: <20060301101643.GC23021@keybit.net>
	<00d201c63d1a$8263cb20$6702a8c0@infozoom.infozoom.de>
Message-ID: <20060301103532.GD23021@keybit.net>

On Wed, Mar 01, 2006 at 11:25:48AM +0100, Stefan Zschocke wrote:
> The const does not make any difference, as the string constructor still is
> called.
> And the string-ctor does the dynamic memory allocation. 
> With the string declaration the texts are actually duplicated in memory:
> once as constants and once as static string.
> Stefan

Did you check it or is it an assumption ?
I think C++ libs handle consts differently.

There are other cases of static allocations, btw,
are you saying that this is the ony one cousing that
false leak reports ?

--strk;

From strk at refractions.net  Wed Mar  1 05:50:37 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Request for change
In-Reply-To: <20060301103532.GD23021@keybit.net>
References: <20060301101643.GC23021@keybit.net>
	<00d201c63d1a$8263cb20$6702a8c0@infozoom.infozoom.de>
	<20060301103532.GD23021@keybit.net>
Message-ID: <20060301105037.GE23021@keybit.net>

I committed the change, simplifying things is always worth.
I'm still interested in a check for that VC++ bug, though.

On Wed, Mar 01, 2006 at 11:35:32AM +0100, strk@refractions.net wrote:
> On Wed, Mar 01, 2006 at 11:25:48AM +0100, Stefan Zschocke wrote:
> > The const does not make any difference, as the string constructor still is
> > called.
> > And the string-ctor does the dynamic memory allocation. 
> > With the string declaration the texts are actually duplicated in memory:
> > once as constants and once as static string.
> > Stefan
> 
> Did you check it or is it an assumption ?
> I think C++ libs handle consts differently.
> 
> There are other cases of static allocations, btw,
> are you saying that this is the ony one cousing that
> false leak reports ?
> 
> --strk;

From s.zschocke at infozoom.de  Wed Mar  1 05:53:55 2006
From: s.zschocke at infozoom.de (Stefan Zschocke)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Request for change
In-Reply-To: <20060301103532.GD23021@keybit.net>
Message-ID: <00d601c63d1e$70677760$6702a8c0@infozoom.infozoom.de>

Hi, it was an assumption but turned out to be correct.
When switching to static const string, I again get the memory leaks
reported.
My main program for testing this is:
int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	int nRetCode = 0;

	// initialize MFC and print and error on failure
	if (!AfxWinInit(::GetModuleHandle(NULL), NULL, ::GetCommandLine(),
0))
	{
		// TODO: change error code to suit your needs
		_tprintf(_T("Fatal Error: MFC initialization failed\n"));
		nRetCode = 1;
	}	else {
        geos::GeometryFactory factory;
	}
  geos::Unload::Release();
  	return nRetCode;
}

There no other references to geos.
With this program and const string-declarations for the errMsg[] I get the
following dump:

Detected memory leaks!
Dumping objects ->
{132} normal block at 0x003664F8, 32 bytes long.
 Data: <Invalid Coordina> 49 6E 76 61 6C 69 64 20 43 6F 6F 72 64 69 6E 61 
{131} normal block at 0x00366488, 48 bytes long.
 Data: <Too few points i> 54 6F 6F 20 66 65 77 20 70 6F 69 6E 74 73 20 69 
{130} normal block at 0x00366428, 32 bytes long.
 Data: <Ring Self-inters> 52 69 6E 67 20 53 65 6C 66 2D 69 6E 74 65 72 73 
{129} normal block at 0x003663C8, 32 bytes long.
 Data: <Self-intersectio> 53 65 6C 66 2D 69 6E 74 65 72 73 65 63 74 69 6F 
{128} normal block at 0x00366368, 32 bytes long.
 Data: <Interior is disc> 49 6E 74 65 72 69 6F 72 20 69 73 20 64 69 73 63 
{127} normal block at 0x00366308, 32 bytes long.
 Data: <Holes are nested> 48 6F 6C 65 73 20 61 72 65 20 6E 65 73 74 65 64 
{126} normal block at 0x003662A8, 32 bytes long.
 Data: <Hole lies outsid> 48 6F 6C 65 20 6C 69 65 73 20 6F 75 74 73 69 64 
{125} normal block at 0x00366248, 32 bytes long.
 Data: <Topology Validat> 54 6F 70 6F 6C 6F 67 79 20 56 61 6C 69 64 61 74 
Object dump complete.
Interestingly, 8 blocks are reported, whereas errMsg has 11.
Stefan

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
strk@refractions.net
Sent: Wednesday, March 01, 2006 11:36 AM
To: 'GEOS Development List'
Subject: Re: [geos-devel] Request for change

On Wed, Mar 01, 2006 at 11:25:48AM +0100, Stefan Zschocke wrote:
> The const does not make any difference, as the string constructor 
> still is called.
> And the string-ctor does the dynamic memory allocation. 
> With the string declaration the texts are actually duplicated in memory:
> once as constants and once as static string.
> Stefan

Did you check it or is it an assumption ?
I think C++ libs handle consts differently.

There are other cases of static allocations, btw, are you saying that this
is the ony one cousing that false leak reports ?

--strk;
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


From mateusz at loskot.net  Wed Mar  1 06:10:32 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Unit Tests port
In-Reply-To: <20060301084825.GB22097@keybit.net>
References: <4404E710.5070407@loskot.net>
	<4405063E.6060407@alex3>	<40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>
	<20060301084825.GB22097@keybit.net>
Message-ID: <44058128.9040908@loskot.net>

strk@refractions.net wrote:
> I vote for C++ unit testing as well.
> Boost could be a good way to go as it's maybe time to 
> get boost into the dependency list for GEOS.
> The shared_ptr<> template starts to get many points 
> in my mind.

Thank you very much all for your comments!
I have to say I agree with Paul and strk.
IMO it's best to use UTF in "native language" for project.
So, I vote for C++ UTF, especially I'm going to take closer look
at Boost.Test. I'll do some tests today/tomorrow.

BTW, I like strk's idea to incorporate Boost libraries to GEOS.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Wed Mar  1 06:24:30 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <44058128.9040908@loskot.net>
References: <4404E710.5070407@loskot.net> <4405063E.6060407@alex3>
	<40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>
	<20060301084825.GB22097@keybit.net> <44058128.9040908@loskot.net>
Message-ID: <20060301112430.GG23021@keybit.net>

On Wed, Mar 01, 2006 at 12:10:32PM +0100, Mateusz ??oskot wrote:
...
> BTW, I like strk's idea to incorporate Boost libraries to GEOS.

This won't be a simple process, but I think it's worth starting.
What do other developers think about it ?
Is a dependency on boost acceptable ?

--strk;

 State-collected Geographic Data is public property !
 Reject the INSPIRE directive.
 Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Wed Mar  1 06:34:39 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <20060301112430.GG23021@keybit.net>
References: <4404E710.5070407@loskot.net>
	<4405063E.6060407@alex3>	<40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>	<20060301084825.GB22097@keybit.net>
	<44058128.9040908@loskot.net> <20060301112430.GG23021@keybit.net>
Message-ID: <440586CF.4090501@loskot.net>

strk@refractions.net wrote:
> On Wed, Mar 01, 2006 at 12:10:32PM +0100, Mateusz ??oskot wrote:
> 
>>BTW, I like strk's idea to incorporate Boost libraries to GEOS.
> 
> This won't be a simple process, but I think it's worth starting.

Yes, it won't but IMHO it's worth.
Boost is an incubator of new libraries for Standard C++ Library and STL.
I'd also say, Boost is a great polygon of modern C++ and modern C++ 
gives the best way to develop high performance software in C++.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From s.zschocke at infozoom.de  Wed Mar  1 06:38:06 2006
From: s.zschocke at infozoom.de (Stefan Zschocke)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <20060301112430.GG23021@keybit.net>
Message-ID: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>

Well I am a newcomer, thus my opinion should not count much, anyway here it
comes:
I think the source-folder should only contain the core files needed to build
the geos-library.
Then another folder should take the testing stuff and also the examples,
which currently are inside the source-folder tree.
If the testing code has depencies on boot - fine - as long as the core files
for the library (or dll on Windows) don't have them.
Stefan

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
strk@refractions.net
Sent: Wednesday, March 01, 2006 12:25 PM
To: GEOS Development List
Subject: [geos-devel] boost

On Wed, Mar 01, 2006 at 12:10:32PM +0100, Mateusz ??oskot wrote:
...
> BTW, I like strk's idea to incorporate Boost libraries to GEOS.

This won't be a simple process, but I think it's worth starting.
What do other developers think about it ?
Is a dependency on boost acceptable ?

--strk;

 State-collected Geographic Data is public property !
 Reject the INSPIRE directive.
 Sign the petition: http://petition.publicgeodata.org
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


From mateusz at loskot.net  Wed Mar  1 06:42:17 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] [PATCH] Update to makefile.vc for building on Win32
	with VC++
In-Reply-To: <20060301085134.GC22097@keybit.net>
References: <43FEFBB4.8030704@loskot.net> <43FF632C.1090305@loskot.net>
	<20060301085134.GC22097@keybit.net>
Message-ID: <44058899.2020109@loskot.net>

strk@refractions.net wrote:
> On Fri, Feb 24, 2006 at 08:49:00PM +0100, Mateusz ??oskot wrote:
> 
>>Is this possible to include this patch to makefile.vc?
>>strk tried to do it but he got some strange errors - the patch was 
>>rejected. Honestly, it's quite strange for me and I have no idea what is 
>> wrong with this patch.
>>
>>It was generated using
>>
>>cvs diff -Nua
> 
> 
> Can you try with 'cvs diff -U2' instead ?

Sure, I can.
Sorry, but -Nua it's an old habit from SourceForge projects :-)

The new version has been attached to the report #39:
http://postgis.refractions.net/bugs/bug.php?op=show&bugid=39

in file makefile.vc-mloskot-20060301.patch

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Wed Mar  1 06:45:32 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
References: <20060301112430.GG23021@keybit.net>
	<00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
Message-ID: <20060301114532.GI23021@keybit.net>

On Wed, Mar 01, 2006 at 12:38:06PM +0100, Stefan Zschocke wrote:
> Well I am a newcomer, thus my opinion should not count much, anyway here it
> comes:
> I think the source-folder should only contain the core files needed to build
> the geos-library.
> Then another folder should take the testing stuff and also the examples,
> which currently are inside the source-folder tree.

This has changed in the HEAD branch.
If you want to help here is a summary of what's going on:

	- GEOS is known to be slow
	- GEOS is known to be complex (probably unnecessarily)
	- GEOS ABI was too weak, thus we provided 
	  a C-API interface to keep binary compatibility
	  in the long term
	- All love is in HEAD branch, where C++ ABI is being
	  happily braking aiming at performance improvements,
	  this is also where big cleanups and simplifications
	  are to converge.

For the specific case, in HEAD branch source/ only contain core
files, which is what JTS provides in src/com/vividsolution/jts.

Tests have been moved to tests/ directory (out of source/)
and C-API has been moved to capi/ (out of source/).

> If the testing code has depencies on boot - fine - as long as the core files
> for the library (or dll on Windows) don't have them.

This will likely be the first step. The configure script will
check for boost availability and skip unit tests build.
Anyway, given the premises above, having boost as a requirement
for the core library might help in reducing complexity (of
tracking allocations, mostly) and possibly improving performance.

--strk;

From mateusz at loskot.net  Wed Mar  1 06:46:47 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
References: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
Message-ID: <440589A7.6050401@loskot.net>

Stefan Zschocke wrote:
> Well I am a newcomer, thus my opinion should not count much, anyway here it
> comes:
> I think the source-folder should only contain the core files needed to build
> the geos-library.
> Then another folder should take the testing stuff and also the examples,
> which currently are inside the source-folder tree.

I agree.

> If the testing code has depencies on boot - fine - as long as the core files
> for the library (or dll on Windows) don't have them.

Hmm, but what if GEOS core will use e.g. Boost Smart Pointers or
Boost.Array library. Then GEOS core will have Boost as a dependency.
But I think that should not be a problem.

There are a few possibilities, e.g.:
- Boost is assumed to be installed on users machine
- Boost libraries used by GEOS can be included in GEOS source tree,
mostly they are poor headers.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net


From strk at refractions.net  Wed Mar  1 06:48:39 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] [PATCH] Update to makefile.vc for building on Win32
	with VC++
In-Reply-To: <44058899.2020109@loskot.net>
References: <43FEFBB4.8030704@loskot.net> <43FF632C.1090305@loskot.net>
	<20060301085134.GC22097@keybit.net> <44058899.2020109@loskot.net>
Message-ID: <20060301114839.GJ23021@keybit.net>

Applied, please check current HEAD branch.
--strk;

From strk at refractions.net  Wed Mar  1 06:51:57 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <440589A7.6050401@loskot.net>
References: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
	<440589A7.6050401@loskot.net>
Message-ID: <20060301115157.GK23021@keybit.net>

On Wed, Mar 01, 2006 at 12:46:47PM +0100, Mateusz ??oskot wrote:
> Stefan Zschocke wrote:
> >Well I am a newcomer, thus my opinion should not count much, anyway here it
> >comes:
> >I think the source-folder should only contain the core files needed to 
> >build
> >the geos-library.
> >Then another folder should take the testing stuff and also the examples,
> >which currently are inside the source-folder tree.
> 
> I agree.
> 
> >If the testing code has depencies on boot - fine - as long as the core 
> >files
> >for the library (or dll on Windows) don't have them.
> 
> Hmm, but what if GEOS core will use e.g. Boost Smart Pointers or
> Boost.Array library. Then GEOS core will have Boost as a dependency.
> But I think that should not be a problem.
> 
> There are a few possibilities, e.g.:
> - Boost is assumed to be installed on users machine
> - Boost libraries used by GEOS can be included in GEOS source tree,
> mostly they are poor headers.

I've been thinking about option 2, I tried tracking includes
from shared_ptr.hpp but this is also not trivial as copying a single
file... We might try this for the unit testing part and see if
we like it.

--strk;


From mateusz at loskot.net  Wed Mar  1 06:53:26 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <20060301114532.GI23021@keybit.net>
References: <20060301112430.GG23021@keybit.net>	<00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
	<20060301114532.GI23021@keybit.net>
Message-ID: <44058B36.6090900@loskot.net>

strk@refractions.net wrote:
> On Wed, Mar 01, 2006 at 12:38:06PM +0100, Stefan Zschocke wrote:
> 
>>Well I am a newcomer, thus my opinion should not count much, anyway here it
>>comes:
>>I think the source-folder should only contain the core files needed to build
>>the geos-library.
>>Then another folder should take the testing stuff and also the examples,
>>which currently are inside the source-folder tree.


Please, don't get me wrong, but I'd just like to share my comments:

> This has changed in the HEAD branch.
> If you want to help here is a summary of what's going on:
> 
> 	- GEOS is known to be slow

Yes, it is. That's why Java source code should not be projected to C++ 
directly. Java to C++ transition must involve *redesign* because, C++ 
provides quite various paradigms of programming (shortly, combination of 
OOP and functional), so not everything has to be object, second dynamic 
polymorphism, common bread in Java, should be avoided in C++. I mean, 
dynamic polymorphism may cause all C++ robustness will be lost.

> 	- GEOS is known to be complex (probably unnecessarily)

Yup, I'd say there is a need of some UML.

> 	- GEOS ABI was too weak, thus we provided 
> 	  a C-API interface to keep binary compatibility
> 	  in the long term

Unfortunately, I can not get the idea of keeping
double APIs: C and C++ :-)))

If something is written in C++, why to bother with C?

>>If the testing code has depencies on boot - fine - as long as the core files
>>for the library (or dll on Windows) don't have them.
> 
> 
> This will likely be the first step. The configure script will
> check for boost availability and skip unit tests build.

Yes, that's a good idea.

> Anyway, given the premises above, having boost as a requirement
> for the core library might help in reducing complexity (of
> tracking allocations, mostly) and possibly improving performance.

Just as I said. If GEOS Team will find something nice in Boost and will 
want to use it, then Boost should be involved as a core dependency, just 
as STL or CRT.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Wed Mar  1 06:54:29 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <20060301115157.GK23021@keybit.net>
References: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>	<440589A7.6050401@loskot.net>
	<20060301115157.GK23021@keybit.net>
Message-ID: <44058B75.9040402@loskot.net>

strk@refractions.net wrote:
> On Wed, Mar 01, 2006 at 12:46:47PM +0100, Mateusz ??oskot wrote:
>>
>>There are a few possibilities, e.g.:
>>- Boost is assumed to be installed on users machine
>>- Boost libraries used by GEOS can be included in GEOS source tree,
>>mostly they are poor headers.
> 
> 
> I've been thinking about option 2, I tried tracking includes
> from shared_ptr.hpp but this is also not trivial as copying a single
> file... We might try this for the unit testing part and see if
> we like it.

OK, I'll check the situation for unit tests first.
Then we will be able to modify the approach during progress.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Wed Mar  1 07:09:02 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <44058B36.6090900@loskot.net>
References: <20060301112430.GG23021@keybit.net>
	<00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
	<20060301114532.GI23021@keybit.net> <44058B36.6090900@loskot.net>
Message-ID: <20060301120902.GM23021@keybit.net>

On Wed, Mar 01, 2006 at 12:53:26PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:

...

> >	- GEOS ABI was too weak, thus we provided 
> >	  a C-API interface to keep binary compatibility
> >	  in the long term
> 
> Unfortunately, I can not get the idea of keeping
> double APIs: C and C++ :-)))
> 
> If something is written in C++, why to bother with C?

Becase we want some kind of insulation to keep binary compatibility
until GEOS gets stable (could be a very long time).

Note that GEOS is an important module for PostGIS, and 
it is very nice for PostGIS users to be able to upgrade
GEOS library w/out having to recompile PostGIS, as GEOS
life cycle is very much different from PostGIS, which is
a much stable piece of software.

Yes, it would have been possible to make the C++ ABI stable
as well, but not havin done from the start makes it hard now.

A *full-C++* approach has been taken by GDAL. In that case
within a single library you have both C and C++ entry points,
with C ABI compatibility retained and C++ one pretty left
to randomness. This brought to problems in 'encoding' library
versions, as in a versioned library you must either declare compatibility
or not with previoius versions, and you can't make distinctions
between the two entry points.

--strk;

From mateusz at loskot.net  Wed Mar  1 07:20:30 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <20060301120902.GM23021@keybit.net>
References: <20060301112430.GG23021@keybit.net>	<00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>	<20060301114532.GI23021@keybit.net>
	<44058B36.6090900@loskot.net> <20060301120902.GM23021@keybit.net>
Message-ID: <4405918E.3040303@loskot.net>

strk@refractions.net wrote:
> On Wed, Mar 01, 2006 at 12:53:26PM +0100, Mateusz ??oskot wrote:
>>strk@refractions.net wrote:
> 
>>>	- GEOS ABI was too weak, thus we provided 
>>>	  a C-API interface to keep binary compatibility
>>>	  in the long term
>>
>>Unfortunately, I can not get the idea of keeping
>>double APIs: C and C++ :-)))
>>
>>If something is written in C++, why to bother with C?
> 
> Becase we want some kind of insulation to keep binary compatibility
> until GEOS gets stable (could be a very long time).

Yes, that's important reason: GEOS is not stable enough to keep its API 
unchanged during development. But there are many products using GEOS 
already.

> Note that GEOS is an important module for PostGIS, and 
> it is very nice for PostGIS users to be able to upgrade
> GEOS library w/out having to recompile PostGIS, as GEOS
> life cycle is very much different from PostGIS, which is
> a much stable piece of software.

Yes, I definitely understand this situation.

> Yes, it would have been possible to make the C++ ABI stable
> as well, but not havin done from the start makes it hard now.

Sure.

> A *full-C++* approach has been taken by GDAL. In that case
> within a single library you have both C and C++ entry points,
> with C ABI compatibility retained and C++ one pretty left
> to randomness. This brought to problems in 'encoding' library
> versions, as in a versioned library you must either declare compatibility
> or not with previoius versions, and you can't make distinctions
> between the two entry points.

That's the problem.
In COM/CORBA, interface is a contract which can not be changed in 
future. Similarly, to DLL which exposes C++ interface. This interface 
should be designed once and kept in future. Certainly, it's easier to 
say than to do it ;-)))

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From warmerdam at pobox.com  Wed Mar  1 07:57:15 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <440589A7.6050401@loskot.net>
References: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>
	<440589A7.6050401@loskot.net>
Message-ID: <44059A2B.5080105@pobox.com>

Mateusz ?oskot wrote:
> Hmm, but what if GEOS core will use e.g. Boost Smart Pointers or
> Boost.Array library. Then GEOS core will have Boost as a dependency.
> But I think that should not be a problem.

Mateusz / strk,

I can live with having Boost as a dependency of GEOS if it provides
substantial leverage in improving GEOS.

> There are a few possibilities, e.g.:
> - Boost is assumed to be installed on users machine
> - Boost libraries used by GEOS can be included in GEOS source tree,
> mostly they are poor headers.

I like the idea of including a known compatible version in the GEOS
source tree, but make sure it is easy to point the builds (unix and
win32) off to a preinstalled version if there is one.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent


From mateusz at loskot.net  Wed Mar  1 08:39:43 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <44059A2B.5080105@pobox.com>
References: <00e901c63d24$9bfa58b0$6702a8c0@infozoom.infozoom.de>	<440589A7.6050401@loskot.net>
	<44059A2B.5080105@pobox.com>
Message-ID: <4405A41F.7000009@loskot.net>

Frank Warmerdam wrote:
> Mateusz ?oskot wrote:
> 
>> Hmm, but what if GEOS core will use e.g. Boost Smart Pointers or
>> Boost.Array library. Then GEOS core will have Boost as a dependency.
>> But I think that should not be a problem.
> 
> Mateusz / strk,
> 
> I can live with having Boost as a dependency of GEOS if it provides
> substantial leverage in improving GEOS.

The discussion about Boost has been started when I asked about 
Unit-Testing Framework. Boost Test components are one of
suggested UTF to port unit tests from JTS.
First, I think it's good to have well working UTF, and if we decide to 
use Boost's, then automatically we will have GEOS depending on Boost.

But talking about substantial adventages to GEOS core, I'm not able to 
point any concrete place where Boost would be better to replace any 
existing piece of code. I only know general advantages of Boost but for 
not I'm not able to point any place where to incorporate them.
I think it's an open subject and requires some analysis.

>> There are a few possibilities, e.g.:
>> - Boost is assumed to be installed on users machine
>> - Boost libraries used by GEOS can be included in GEOS source tree,
>> mostly they are poor headers.
> 
> 
> I like the idea of including a known compatible version in the GEOS
> source tree, but make sure it is easy to point the builds (unix and
> win32) off to a preinstalled version if there is one.

Yup, good point!

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From todd.jellett at caris.com  Wed Mar  1 11:43:35 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
Message-ID: <4405CF37.70604@caris.com>

Hi all,

I have a question concerning the robustness of the Binary Predicates 
(disjoint, contains, etc.). I see on the JTS site that they are claimed 
to be "completely robust" but I don't see anywhere where the "extraneous 
(secondary) intersection points created from snapping the primary 
intersection points" are detected and processed when using a FIXED 
precision model. The monotone chains only find the primary intersection 
points.

Here is an example which creates "extraneous intersection points".
From:    John D. Hobby, "Practical Segment Intersection with Finite 
Precision Output", Comput. Geom Theory Appl., 13:199-214, 1999

Use precision model with a scale of 1 to setup a FIXED precision model 
with 1 significant figure (Whole Numbers).
LINESTRING (-1.0 -2.0, 9.0 5.0, 0.0 0.0, 13.0 6.0)
LINESTRING (9.0 4.0, 5.0 3.0)

The first LineString consists of 3 segments of which 2 of these segments 
intersect at (5.45,2.52). This intersection point "should" then be 
snapped to the precision model giving (5.0,3.0). Snapping this 
intersection point causes the point to move to the other side of the 
middle segment of the LineString which in turn causes 2 extra 
intersection points to be created ( (4.0,2.0) and (6.0, 3.0) when snapped).

In this particular case it is not these 2 extraneous intersection points 
that are causing me to question the robustness of the Binary Predicates, 
instead it is the *not snapping of the primary intersection point* by 
the Binary Predicates..

This sets up ambiguities such as disjoint = true and touches = false but 
intersection = MULTIPOINT (5.0 3.0, 6.0 3.0, 8.0 4.0).
Should be POINT (5.0 3.0) shouldn't it?

I realize that the final robustness issues of the intersection, union, 
etc. are just being addressed, but to get the 2 sets of operations to be 
consistent and only address robustness issues of the intersection, 
union, and differences, won't it mean that you will have to ignore real 
nodes and edges in the graph when computing one of these? Wouldn't this 
defeat the whole purpose of the graph(s)? How could this work without 
ambiguities?

The Binary Predicates seem to "almost be working at infinite precision".
Shouldn't both the predicates and the set theoretics *both* be operating 
at the precision of the precision model provided?

Note: These extra intersection points can occur even if the precision 
model is FLOATING (ie FIXED with 15 significant figures).

Let me know if any of this is not clear.
I used geos 2.2.0 for my tests.

Todd






From todd.jellett at caris.com  Wed Mar  1 11:59:54 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <4405CF37.70604@caris.com>
References: <4405CF37.70604@caris.com>
Message-ID: <4405D30A.90303@caris.com>

Sorry, the second LineString should be:
LINESTRING (5.0 5.0, 5.0 3.0)

This one crashes in L2->touches( L1 )

Todd

Todd Jellett wrote:

> Hi all,
>
> I have a question concerning the robustness of the Binary Predicates 
> (disjoint, contains, etc.). I see on the JTS site that they are 
> claimed to be "completely robust" but I don't see anywhere where the 
> "extraneous (secondary) intersection points created from snapping the 
> primary intersection points" are detected and processed when using a 
> FIXED precision model. The monotone chains only find the primary 
> intersection points.
>
> Here is an example which creates "extraneous intersection points".
> From:    John D. Hobby, "Practical Segment Intersection with Finite 
> Precision Output", Comput. Geom Theory Appl., 13:199-214, 1999
>
> Use precision model with a scale of 1 to setup a FIXED precision model 
> with 1 significant figure (Whole Numbers).
> LINESTRING (-1.0 -2.0, 9.0 5.0, 0.0 0.0, 13.0 6.0)
> LINESTRING (9.0 4.0, 5.0 3.0)
>
> The first LineString consists of 3 segments of which 2 of these 
> segments intersect at (5.45,2.52). This intersection point "should" 
> then be snapped to the precision model giving (5.0,3.0). Snapping this 
> intersection point causes the point to move to the other side of the 
> middle segment of the LineString which in turn causes 2 extra 
> intersection points to be created ( (4.0,2.0) and (6.0, 3.0) when 
> snapped).
>
> In this particular case it is not these 2 extraneous intersection 
> points that are causing me to question the robustness of the Binary 
> Predicates, instead it is the *not snapping of the primary 
> intersection point* by the Binary Predicates..
>
> This sets up ambiguities such as disjoint = true and touches = false 
> but intersection = MULTIPOINT (5.0 3.0, 6.0 3.0, 8.0 4.0).
> Should be POINT (5.0 3.0) shouldn't it?
>
> I realize that the final robustness issues of the intersection, union, 
> etc. are just being addressed, but to get the 2 sets of operations to 
> be consistent and only address robustness issues of the intersection, 
> union, and differences, won't it mean that you will have to ignore 
> real nodes and edges in the graph when computing one of these? 
> Wouldn't this defeat the whole purpose of the graph(s)? How could this 
> work without ambiguities?
>
> The Binary Predicates seem to "almost be working at infinite precision".
> Shouldn't both the predicates and the set theoretics *both* be 
> operating at the precision of the precision model provided?
>
> Note: These extra intersection points can occur even if the precision 
> model is FLOATING (ie FIXED with 15 significant figures).
>
> Let me know if any of this is not clear.
> I used geos 2.2.0 for my tests.
>
> Todd
>
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel



From mcoletti at gmail.com  Wed Mar  1 15:33:47 2006
From: mcoletti at gmail.com (Mark Coletti)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <20060301112430.GG23021@keybit.net>
References: <4404E710.5070407@loskot.net> <4405063E.6060407@alex3>
	<40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>
	<20060301084825.GB22097@keybit.net> <44058128.9040908@loskot.net>
	<20060301112430.GG23021@keybit.net>
Message-ID: <120095080603011233q2490a37eo429f9503ba0c148c@mail.gmail.com>

On 3/1/06, strk@refractions.net <strk@refractions.net> wrote:
>
> On Wed, Mar 01, 2006 at 12:10:32PM +0100, Mateusz ??oskot wrote:
> ...
> > BTW, I like strk's idea to incorporate Boost libraries to GEOS.
>
> This won't be a simple process, but I think it's worth starting.
> What do other developers think about it ?
> Is a dependency on boost acceptable ?


I've been an Boost fan almost from its inception.  To me, Boost is almost a
mandatory library for C++ developers.  The reference counting shared
pointers are, alone, worth using.  Then there's the string handling,
mathematical operators, "optional" data types, variant types, a plethora of
convenience classes, data/time manipulation, regular expressions, etc.  It's
a cornucopia of useful things.  Once you start using Boost, you won't go
back.

(I've still yet to convince the qgis folks to make the switch, alas.)

Cheers,

Mark
--
I'm taking reality in small doses to build immunity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060301/1d5f0f3c/attachment.html
From mateusz at loskot.net  Wed Mar  1 17:35:07 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] boost
In-Reply-To: <120095080603011233q2490a37eo429f9503ba0c148c@mail.gmail.com>
References: <4404E710.5070407@loskot.net>
	<4405063E.6060407@alex3>	<40856B85-0C2F-4352-8EBE-6E1915DBA9F6@refractions.net>	<20060301084825.GB22097@keybit.net>
	<44058128.9040908@loskot.net>	<20060301112430.GG23021@keybit.net>
	<120095080603011233q2490a37eo429f9503ba0c148c@mail.gmail.com>
Message-ID: <4406219B.3000903@loskot.net>

Mark Coletti wrote:
> On 3/1/06, *strk@refractions.net <mailto:strk@refractions.net>* 
> <strk@refractions.net <mailto:strk@refractions.net>> wrote:
> 
>     On Wed, Mar 01, 2006 at 12:10:32PM +0100, Mateusz ??oskot wrote:
>     ...
>      > BTW, I like strk's idea to incorporate Boost libraries to GEOS.
> 
>     This won't be a simple process, but I think it's worth starting.
>     What do other developers think about it ?
>     Is a dependency on boost acceptable ?
> 
> 
> I've been an Boost fan almost from its inception.  To me, Boost is 
> almost a mandatory library for C++ developers.  

Definitely, agreed!

 > The reference counting
> shared pointers are, alone, worth using. 

Yup, they are simply a robust garbage collector for C++ ;-)

> Then there's the string 
> handling, mathematical operators, "optional" data types, variant types, 
> a plethora of convenience classes, data/time manipulation, regular 
> expressions, etc. 

+ huge graph libraries with Dijkstra's and other shortest
path algorithms
+ statistical computing and many many more.

For those insterested and not familiar with Boost:
Here is a higher-level of table of content:
http://boost.org/libs/libraries.htm

and, as an example, lower level huge list of topics - Graph library:
http://boost.org/libs/graph/doc/table_of_contents.html

 > It's a cornucopia of useful things.  Once you start
> using Boost, you won't go back.

Yup.

> (I've still yet to convince the qgis folks to make the switch, alas.)

IMHO QT is not templates friendly, but I may be wrong.
p.s. When I'll be back to QGIS project I can join you in this
convincing operation :-)

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Thu Mar  2 04:25:22 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <4405D30A.90303@caris.com>
References: <4405CF37.70604@caris.com> <4405D30A.90303@caris.com>
Message-ID: <20060302092522.GA37920@keybit.net>

On Wed, Mar 01, 2006 at 12:59:54PM -0400, Todd Jellett wrote:
> Sorry, the second LineString should be:
> LINESTRING (5.0 5.0, 5.0 3.0)
> 
> This one crashes in L2->touches( L1 )

Can you provide an xml test showing the crash ?
I tried relate(L1,L2) with 2.2.2 and HEAD with
no crashes.

--strk;


From todd.jellett at caris.com  Thu Mar  2 07:16:48 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <20060302092522.GA37920@keybit.net>
References: <4405CF37.70604@caris.com> <4405D30A.90303@caris.com>
	<20060302092522.GA37920@keybit.net>
Message-ID: <4406E230.5000408@caris.com>

Sorry (again), I should have investigated the crash more closely.

It was not occurring in the touches call but rather because I was trying 
to dynamic_cast a Geometry to a GeometryCollection. The first example I 
sent returned a collection from the intersection call while the second 
(corrected) example correctly returns the intersection as a single 
point. I just wasn't checking the result of the cast.

My real problem is that using a FIXED precision model (scale = 1.0 = 
Whole Numbers) and the LineStrings:
L1 = LINESTRING (-1.0 -2.0, 9.0 5.0, 0.0 0.0, 13.0 6.0)
L2 = LINESTRING (5.0 5.0, 5.0 3.0)

I get:
L2->touches( L1 ) = false
L2->disjoint( L1 ) = true
but
L2->intersection( L1 ) = POINT(5.0 3.0)

How can there be a non-NULL intersection (a single point) but still have 
the 2 geometries *being disjoint and not touching*?

The intersection is correct. I am questioning the correctness of the 
Binary Predicates (touches and disjoint) since both should agree.

Sorry for the confusion
Todd


strk@refractions.net wrote:

>On Wed, Mar 01, 2006 at 12:59:54PM -0400, Todd Jellett wrote:
>  
>
>>Sorry, the second LineString should be:
>>LINESTRING (5.0 5.0, 5.0 3.0)
>>
>>This one crashes in L2->touches( L1 )
>>    
>>
>
>Can you provide an xml test showing the crash ?
>I tried relate(L1,L2) with 2.2.2 and HEAD with
>no crashes.
>
>--strk;
>
>_______________________________________________
>geos-devel mailing list
>geos-devel@geos.refractions.net
>http://geos.refractions.net/mailman/listinfo/geos-devel
>  
>


From mateusz at loskot.net  Thu Mar  2 09:38:18 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Question about JTS porting process
Message-ID: <4407035A.2050705@loskot.net>

Hi,

AFAIK GEOS is a kind of direct port of JTS.
Am I right?
So, I have some observation and I'd like to ask for explanation.
It seems some of bugs/typos/inconsistencies are ported
together with features ;-)
Also, obviously there are some things in-progress/not finished yet
in JTS code. So, such incomplete stuff seems also to be ported.
Am I right?

Here is small example of such class in GEOS where such incomplete stuff 
comes straight from JTS:

///////////////////////////////////////////////////////////////////////
// GEOS version of class
class CoordinateArraySequenceFactory : public CoordinateSequenceFactory
{
public:

   // ...

   CoordinateSequence *create(vector<Coordinate> *coords, int dims) const
   {
     return new CoordinateArraySequence(coords);
   }

   CoordinateSequence *create(unsigned int size,
     unsigned int dimension=3) const
   {
     return new CoordinateArraySequence(size);
   }

   // ...
};

///////////////////////////////////////////////////////////////////////
// JTS version of class
DefaultCoordinateSequenceFactory


and sample method:

public CoordinateSequence create(int size, int dimension) {
    return new DefaultCoordinateSequence(size);
}


My question is why those parameters like dims or dimension are not used
in GEOS as well as in JTS?
There are many similar places.

Does it mean that JTS developers are going to extend implementation of 
create method(s) and they will use those (currently unused) parameters?
This would imply the same in GEOS.

But if those unused things won't be used in future then it could be 
better to clean them up during GEOS refactoring.

I'd be thankful if anyone could expain me the idea.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Thu Mar  2 10:31:14 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Question about JTS porting process
In-Reply-To: <4407035A.2050705@loskot.net>
References: <4407035A.2050705@loskot.net>
Message-ID: <20060302153114.GA41543@keybit.net>


CoordinateSequenceFactory::create()

is  a virtual function. The idea is to support an arbitrary
number of dimensions past X/Y.

CoordinateArraySequenceFactory only supports 3d, curently dimension
is *always* forced to 3d.

In order to support higher (or slimmer) CoordinateSequences
developers can derive from the Factory and from CorodinateSequence.

It's pretty new stuff added to the interface.

--strk;


On Thu, Mar 02, 2006 at 03:38:18PM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> AFAIK GEOS is a kind of direct port of JTS.
> Am I right?
> So, I have some observation and I'd like to ask for explanation.
> It seems some of bugs/typos/inconsistencies are ported
> together with features ;-)
> Also, obviously there are some things in-progress/not finished yet
> in JTS code. So, such incomplete stuff seems also to be ported.
> Am I right?
> 
> Here is small example of such class in GEOS where such incomplete stuff 
> comes straight from JTS:
> 
> ///////////////////////////////////////////////////////////////////////
> // GEOS version of class
> class CoordinateArraySequenceFactory : public CoordinateSequenceFactory
> {
> public:
> 
>   // ...
> 
>   CoordinateSequence *create(vector<Coordinate> *coords, int dims) const
>   {
>     return new CoordinateArraySequence(coords);
>   }
> 
>   CoordinateSequence *create(unsigned int size,
>     unsigned int dimension=3) const
>   {
>     return new CoordinateArraySequence(size);
>   }
> 
>   // ...
> };
> 
> ///////////////////////////////////////////////////////////////////////
> // JTS version of class
> DefaultCoordinateSequenceFactory
> 
> 
> and sample method:
> 
> public CoordinateSequence create(int size, int dimension) {
>    return new DefaultCoordinateSequence(size);
> }
> 
> 
> My question is why those parameters like dims or dimension are not used
> in GEOS as well as in JTS?
> There are many similar places.
> 
> Does it mean that JTS developers are going to extend implementation of 
> create method(s) and they will use those (currently unused) parameters?
> This would imply the same in GEOS.
> 
> But if those unused things won't be used in future then it could be 
> better to clean them up during GEOS refactoring.
> 
> I'd be thankful if anyone could expain me the idea.
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Thu Mar  2 16:58:44 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Question about JTS porting process
In-Reply-To: <20060302153114.GA41543@keybit.net>
References: <4407035A.2050705@loskot.net> <20060302153114.GA41543@keybit.net>
Message-ID: <44076A94.5090105@loskot.net>

strk@refractions.net wrote:
> CoordinateSequenceFactory::create()
> 
> is  a virtual function. The idea is to support an arbitrary
> number of dimensions past X/Y.

I understand. Simply, this construction is pretty strange and seems as 
someone has forgot about something.

> CoordinateArraySequenceFactory only supports 3d, curently dimension
> is *always* forced to 3d.
> 
> In order to support higher (or slimmer) CoordinateSequences
> developers can derive from the Factory and from CorodinateSequence.

OK, that's clear.
As we discussed today on #postgis, I'd suggest to comment unused formal 
parameters but only leave type specifier. Then the idea become more 
clear and we can get rid of warnings about unused variables.

> 
> It's pretty new stuff added to the interface.

OK.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar  2 17:04:14 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Is NonRobustLineIntersector deprecated
Message-ID: <44076BDE.30307@loskot.net>

Hi,

I see there is file
/geos/source/algorithm/NonRobustLineIntersector.cpp
which seems to be unused.
I can't find class NonRobustLineIntersector definition or header file.
When I try to compile NonRobustLineIntersector.cpp I get many errors, 
also that class NonRobustLineIntersector is not defined.

The same situation is with following files:
RobustLineIntersector.cpp
CoordinateList.cpp

Are they going to be removed from CVS?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar  2 17:36:57 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] [Bug #46] Small explanation
Message-ID: <44077389.5070403@loskot.net>

Hi,

I've just submited report #46 on the BT with big patch.
This patch includes changes we (strk and me) decided to make today.
Details are included in the report:

http://postgis.refractions.net/bugs/bug.php?op=show&bugid=46

strk: it's quite big, so I'll stop with other new changes for today.
I'll continue after you apply this patch for #46 and I update my 
sandbox. I'll catch you tomorrow if you have any questions/comments.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From pramsey at refractions.net  Thu Mar  2 23:54:52 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <4406E230.5000408@caris.com>
References: <4405CF37.70604@caris.com> <4405D30A.90303@caris.com>
	<20060302092522.GA37920@keybit.net> <4406E230.5000408@caris.com>
Message-ID: <3A7EC5E9-F8A4-47FA-B1A1-8B2267B297B7@refractions.net>

I am surprised Martin has not jumped in here with the definitive  
answer. It looks like the intersection is being done with a precision  
model and the boolean test is not... on graph paper those lines to  
not touch, but they do get within the precision tolerance of one  
another.

P.

On Mar 2, 2006, at 4:16 AM, Todd Jellett wrote:

> Sorry (again), I should have investigated the crash more closely.
>
> It was not occurring in the touches call but rather because I was  
> trying to dynamic_cast a Geometry to a GeometryCollection. The  
> first example I sent returned a collection from the intersection  
> call while the second (corrected) example correctly returns the  
> intersection as a single point. I just wasn't checking the result  
> of the cast.
>
> My real problem is that using a FIXED precision model (scale = 1.0  
> = Whole Numbers) and the LineStrings:
> L1 = LINESTRING (-1.0 -2.0, 9.0 5.0, 0.0 0.0, 13.0 6.0)
> L2 = LINESTRING (5.0 5.0, 5.0 3.0)
>
> I get:
> L2->touches( L1 ) = false
> L2->disjoint( L1 ) = true
> but
> L2->intersection( L1 ) = POINT(5.0 3.0)
>
> How can there be a non-NULL intersection (a single point) but still  
> have the 2 geometries *being disjoint and not touching*?
>
> The intersection is correct. I am questioning the correctness of  
> the Binary Predicates (touches and disjoint) since both should agree.
>
> Sorry for the confusion
> Todd
>
>
> strk@refractions.net wrote:
>
>> On Wed, Mar 01, 2006 at 12:59:54PM -0400, Todd Jellett wrote:
>>
>>> Sorry, the second LineString should be:
>>> LINESTRING (5.0 5.0, 5.0 3.0)
>>>
>>> This one crashes in L2->touches( L1 )
>>>
>>
>> Can you provide an xml test showing the crash ?
>> I tried relate(L1,L2) with 2.2.2 and HEAD with
>> no crashes.
>>
>> --strk;
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Fri Mar  3 04:45:39 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Is NonRobustLineIntersector deprecated
In-Reply-To: <44076BDE.30307@loskot.net>
References: <44076BDE.30307@loskot.net>
Message-ID: <20060303094539.GB51790@keybit.net>

Yes, NonRobust and Robust Have been obsoleted to reduce
cost of dynamic binding. The LineIntersector class is
the Robust version, the NonRobust is not used anymore.

They are in CVS for documentation purpose, but should not
be built. They are not built by UNIX Makefiles. 

--strk;

On Thu, Mar 02, 2006 at 11:04:14PM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> I see there is file
> /geos/source/algorithm/NonRobustLineIntersector.cpp
> which seems to be unused.
> I can't find class NonRobustLineIntersector definition or header file.
> When I try to compile NonRobustLineIntersector.cpp I get many errors, 
> also that class NonRobustLineIntersector is not defined.
> 
> The same situation is with following files:
> RobustLineIntersector.cpp
> CoordinateList.cpp
> 
> Are they going to be removed from CVS?
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net

From todd.jellett at caris.com  Fri Mar  3 07:57:21 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <3A7EC5E9-F8A4-47FA-B1A1-8B2267B297B7@refractions.net>
References: <4405CF37.70604@caris.com>
	<4405D30A.90303@caris.com>	<20060302092522.GA37920@keybit.net>
	<4406E230.5000408@caris.com>
	<3A7EC5E9-F8A4-47FA-B1A1-8B2267B297B7@refractions.net>
Message-ID: <44083D31.4080104@caris.com>

Hi Paul,

Yes I indicated in my first post that the Binary Predicates seemed like 
they were trying to "work at infinite precision" (ie on graph paper) and 
were not honouring the precision model.

I chose my example carefully to illustrate the problem. I chose the end 
point of the second LineString to be the primary intersection point 
because geos actually did find the correct intersection for those 
geometries. If however, I chose L2 to end on one of the "extraneous 
intersection points" but not cross or touch any other part of L1, either 
(4,2) or (6,3), the geos intersection does not fare as well (because it 
does not see these).

So there are 2 problems:
1)   The Binary Predicates are not honouring the precision model.
2)   Geos does not detect "extraneous intersection points" in either the 
Binary Predicates or the set theoretic (intersection, union, differences).

Although the frequency of this phenomenon (extraneous intersection 
points) decreases as the precision becomes finer, they do occur even 
when using a FLOATING precision model (because the computer runs under a 
FIXED model with 15 significant figures). Whether they occur or not is a 
function of the input geometries.

Todd

Paul Ramsey wrote:

> I am surprised Martin has not jumped in here with the definitive  
> answer. It looks like the intersection is being done with a precision  
> model and the boolean test is not... on graph paper those lines to  
> not touch, but they do get within the precision tolerance of one  
> another.
>
> P.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel



From strk at refractions.net  Fri Mar  3 08:26:37 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] [Bug #46] Small explanation
In-Reply-To: <44077389.5070403@loskot.net>
References: <44077389.5070403@loskot.net>
Message-ID: <20060303132637.GL51790@keybit.net>

Applied. Looking at a couple of tests which are failing
after this patch.

--strk;

From mateusz at loskot.net  Sun Mar  5 18:15:57 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] How to make compilation time shorter
Message-ID: <440B712D.3010502@loskot.net>

Hi,

GEOS compilation time is quite long.
Some days ago, I was talking about it with strk and we compared how long
does it take with GCC vc VC++.
The time varies from 3 to a few tens of minutes (strk can say what's the
latter value).

Today, I was working on Unit Tests and I noticed that geom.h file
defines all geometry classes and then it's included in (almost) every
.cpp file.

And if I apply small change to geom.h, e.g. Envelope class then it will
require almost complete rebuild of GEOS to update binaries.
It really slows down development.

I'd suggest to refactor the source code that every class is splitted
into separate .h/.cpp file. geom.h would be the first candidate :-)

So, then envelope.cpp could include *only* envelope.h file.
If something in envelope.h is changed then it will required to recompile
envelope.cpp file + files that include envelope.h.

This second group of files could be yet refactored to minimize
compile-time dependencies, according to some of Herb Sutter's suggestions:
http://www.gotw.ca/gotw/007.htm

Short example:

// a.cpp file
#include "envelope.h"
struct A
{
   Envelope* pe;
   void foo(Envelope* e);
};

In the example above we can safely remove #include "envelope.h" because 
compiler does not need here definition of Envelope class.
We can replace #include "envelope.h" with forward declaration:

// a.cpp file

class Envelope;

struct A
{
   Envelope* pe;
   void foo(Envelope* e);
};

After more such cases would be refactored, then compilation time should 
be significantly shorter. So, development could run faster :-)

What is your opinion?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sun Mar  5 20:16:24 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] First glance at the Unit Test
Message-ID: <440B8D68.90605@loskot.net>

Hi,

I'm sending some example of single Test Suite with a bunch of Test Cases
based on Boost Unit Test Framework.
This Test Suite is dedicated to test Envelope class, so it's called
envelope_class_test suite.
It's based on EnvelopeTest.java - JTS version of test for JUnit.
I hope this small example will give some impression about how Boost UTF
can be incorporated in GEOS.

NOTE: I tested it with VC++ 8.0, so I don't have any makefiles for now, 
only VC++ project files. If anyone is interested I can send VC++ 8.0 
project files.

INSTRUCTIONS
1. Boost

I use current CVS - 1.34 but it should work well with current stable 
1.33.1 release.
The *only* library used (that envelope_class_test is linked with) is 
Unit Test Framework. It is only one binary file. In my case with VC++ 
8.0 I linked this example with
libboost_unit_test_framework-vc80-mt-gd-1_34.lib

So, on Linux yo have to link with file named as something like:
libboost_unit_test_framework-gcc-mt-gd-1_34.a

2.
Next, save the code included below as envelope_class_test.cpp file.

NOTE: there is no main function in the example test, so don't worry
Boost will provide appropriate one :-)

Check if gcc can find header used by the example:
#include <boost/test/unit_test.hpp>

Compile and link with library above.

For instructions about how to build Boost I'd suggest to refere to:
http://boost.org/more/getting_started.html

3. After it builds without any errors, just run it as a common executable.

4. You can change a bit checks in this exmaple to catch
some errors, e.g.: change
BOOST_CHECK( e1.isNull() );
to read as
BOOST_CHECK( !e1.isNull() );

Please note, this exmaple is not going to present all features of Boost 
UTF. Simply, it's not possible in such a small piece of code :-)
After I've read whole Boost.Test documentation I only analyzed Unit Test 
Framework (one of Boost.Test component) according to usage in GEOS,
so this example presents only basic idea of:
- how test cases set in Boost UTF look like
- how test suites look like
- what output you can get
- what are basic checks (macros)

There are many many more features which can be used to develop 
sophisticated Unit Tests, cases and suits but I think we can explore 
them later, after Boost.Test will be incorporated in GEOS.

So, I'm interested in your comments and suggestions.
Do you like it or not, should I procede with implementation of
the rest of tests?


Here is the file:

///////////////////////////////////////////////////////////////////////////////
// envelope_class_test.cpp

// BOOST
#define BOOST_TEST_MODULE envelope_class_test
#include <boost/test/unit_test.hpp>

// GEOS
#include <geos/geom.h>

// Test Suite
BOOST_AUTO_TEST_SUITE( envelope_class_test );

BOOST_AUTO_TEST_CASE( envelope_constructors_test )
{
     // 1 - default constructor
     geos::Envelope e1;

     BOOST_CHECK( e1.isNull() );
     BOOST_CHECK_EQUAL( e1.getWidth(), 0 );
     BOOST_CHECK_EQUAL( e1.getHeight(), 0 );

     // 2
     geos::Envelope e2(100, 200, 100, 200);

     BOOST_CHECK( !e2.isNull() );
     BOOST_CHECK_EQUAL( e2.getMinX(), 100 );
     BOOST_CHECK_EQUAL( e2.getMaxX(), 200 );
     BOOST_CHECK_EQUAL( e2.getMinY(), 100 );
     BOOST_CHECK_EQUAL( e2.getMaxY(), 200 );
     BOOST_CHECK_EQUAL( e2.getWidth(), 100 );
     BOOST_CHECK_EQUAL( e2.getHeight(), 100 );

     // 3 - copy constructor
     geos::Envelope e3(e2);

     BOOST_CHECK( !e3.isNull() );
     BOOST_CHECK_EQUAL( e3.getMinX(), 100 );
     BOOST_CHECK_EQUAL( e3.getMaxX(), 200 );
     BOOST_CHECK_EQUAL( e3.getMinY(), 100 );
     BOOST_CHECK_EQUAL( e3.getMaxY(), 200 );
     BOOST_CHECK_EQUAL( e3.getWidth(), 100 );
     BOOST_CHECK_EQUAL( e3.getHeight(), 100 );
     BOOST_CHECK( e3 == e2 );
     BOOST_CHECK( e3.equals( &e2 ) );

} // envelope_constructors_test

BOOST_AUTO_TEST_CASE( envelope_null_test )
{
     // 1 - Test isNull() and setToNull() functions
     geos::Envelope e1(100, 200, 100, 200);

     BOOST_CHECK( !e1.isNull() );
     e1.setToNull();
     BOOST_CHECK( e1.isNull() );

} // envelope_null_test

BOOST_AUTO_TEST_CASE( envelope_equals_test )
{
     // 1 - Test equals() function
     geos::Envelope e1(100, 200, 100, 200);
     geos::Envelope e2(100, 200, 100, 200);
     geos::Envelope e3(1, 2, 1, 2);

     BOOST_CHECK( !e1.isNull() );
     BOOST_CHECK( !e2.isNull() );
     BOOST_CHECK( !e3.isNull() );

     BOOST_CHECK( e1.equals( &e2 ) );
     BOOST_CHECK( !e1.equals( &e3 ) );
     BOOST_CHECK( !e2.equals( &e3 ) );

} // envelope_equals_test

BOOST_AUTO_TEST_CASE( envelope_contains_test )
{
     // Test contains() predicates
     geos::Envelope e1;
     geos::Envelope e2(-1, 1, -1, 1);
     geos::Envelope e3(-5, 5, -5, 5);

     BOOST_CHECK( !e2.isNull() );
     BOOST_CHECK( !e3.isNull() );

     // 1 - Test empty envelope by reference
     BOOST_CHECK_MESSAGE( !e1.contains( e2 ), "e1 envelope is not empty!" );
     BOOST_CHECK_MESSAGE( !e2.contains( e1 ), "e1 envelope is not empty!");

     // 2 - Test empty envelope by pointer
     BOOST_CHECK_MESSAGE( !e2.contains( &e1 ), "e1 envelope is not empty!");
     BOOST_CHECK_MESSAGE( !e1.contains( &e2 ), "e1 envelope is not 
empty!" );

     // 3 - Test non-empty envelope by reference
     BOOST_CHECK( !e2.contains( e3 ) );
     BOOST_CHECK( e3.contains( e2 ) );

     // 3 - Test raw point
     BOOST_CHECK( e2.contains( 0, 0 ) );
     BOOST_CHECK( e2.contains( -1, -1 ) );
     BOOST_CHECK( !e2.contains( 5, 5 ) );

     // 4 - Test coordinate
     geos::Coordinate c1(0, 0, 0);
     BOOST_REQUIRE_EQUAL( c1.x, 0 );
     BOOST_REQUIRE_EQUAL( c1.y, 0 );
     BOOST_REQUIRE_EQUAL( c1.z, 0 );
     BOOST_CHECK( e2.contains( c1 ) );

} // envelope_contains_test

BOOST_AUTO_TEST_CASE( envelope_intersects_test )
{
     // Test intersects() predicates
     geos::Envelope e1;
     geos::Envelope e2(-100, 100, -100, 100);
     geos::Envelope e3(50, 150, 50, 150);

     BOOST_CHECK( !e2.isNull() );
     BOOST_CHECK( !e3.isNull() );

     // 1 - Test empty envelope by pointer
     BOOST_CHECK_MESSAGE( !e1.intersects( &e2 ), "e1 envelope is not 
empty!" );
     BOOST_CHECK_MESSAGE( !e2.intersects( &e1 ), "e1 envelope is not 
empty!");

     // 2 - Test empty envelope by reference
     BOOST_CHECK_MESSAGE( !e1.intersects( e2 ), "e1 envelope is not 
empty!" );
     BOOST_CHECK_MESSAGE( !e2.intersects( e1 ), "e1 envelope is not 
empty!");

     // 3 - Test empty envelope by reference
     BOOST_CHECK( e2.intersects( e3 ) );
     BOOST_CHECK( e3.intersects( e2 ) );

     // 3 - Test point
     BOOST_CHECK( e2.intersects( 0, 0 ) );
     BOOST_CHECK( e2.intersects( -100, 100 ) );
     BOOST_CHECK( !e2.intersects( -200, 200 ) );

     // XXX - add test for Coordinate

} // envelope_intersects_test

BOOST_AUTO_TEST_CASE( envelope_expand_test )
{
     // TODO

     BOOST_CHECK_MESSAGE( false, "TEST CASE NOT IMPLEMENTED" );

} //envelope_expand_test

BOOST_AUTO_TEST_SUITE_END(); // envelope_class_test

// EOF
///////////////////////////////////////////////////////////////////////////////



-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar  6 04:26:17 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] How to make compilation time shorter
In-Reply-To: <440B712D.3010502@loskot.net>
References: <440B712D.3010502@loskot.net>
Message-ID: <20060306092617.GF84439@keybit.net>

I'm all for the refactoring.
C++ API users should include the geos.h file, anyway,
so we can provide the same definition from it by including
the splitted headers.

Also, I've been experimenting the use of a separate file
for class inlines. So far we only have LineSegment.inl but
the idea is to use a file for each class with inline elements.
The advantage of this is we can switch between inlined and
non-inlined versions by defining an USE_INLINE macro.

This way, developers can use the non-inlined version to make
build time faster when changing inline funx bodies.

Next candidate for this would be Coordinate.

--strk;


On Mon, Mar 06, 2006 at 12:15:57AM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> GEOS compilation time is quite long.
> Some days ago, I was talking about it with strk and we compared how long
> does it take with GCC vc VC++.
> The time varies from 3 to a few tens of minutes (strk can say what's the
> latter value).
> 
> Today, I was working on Unit Tests and I noticed that geom.h file
> defines all geometry classes and then it's included in (almost) every
> .cpp file.
> 
> And if I apply small change to geom.h, e.g. Envelope class then it will
> require almost complete rebuild of GEOS to update binaries.
> It really slows down development.
> 
> I'd suggest to refactor the source code that every class is splitted
> into separate .h/.cpp file. geom.h would be the first candidate :-)
> 
> So, then envelope.cpp could include *only* envelope.h file.
> If something in envelope.h is changed then it will required to recompile
> envelope.cpp file + files that include envelope.h.
> 
> This second group of files could be yet refactored to minimize
> compile-time dependencies, according to some of Herb Sutter's suggestions:
> http://www.gotw.ca/gotw/007.htm
> 
> Short example:
> 
> // a.cpp file
> #include "envelope.h"
> struct A
> {
>   Envelope* pe;
>   void foo(Envelope* e);
> };
> 
> In the example above we can safely remove #include "envelope.h" because 
> compiler does not need here definition of Envelope class.
> We can replace #include "envelope.h" with forward declaration:
> 
> // a.cpp file
> 
> class Envelope;
> 
> struct A
> {
>   Envelope* pe;
>   void foo(Envelope* e);
> };
> 
> After more such cases would be refactored, then compilation time should 
> be significantly shorter. So, development could run faster :-)
> 
> What is your opinion?
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From strk at refractions.net  Mon Mar  6 05:00:36 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] First glance at the Unit Test
In-Reply-To: <440B8D68.90605@loskot.net>
References: <440B8D68.90605@loskot.net>
Message-ID: <20060306100036.GG84439@keybit.net>

Does anybody have an m4 file that can be used 
to detect availability of boost ?

I've found some online, but they don't seem to be checking
for the UTF library.

REF: http://lists.boost.org/Archives/boost/2005/12/98656.php

--strk;

On Mon, Mar 06, 2006 at 02:16:24AM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> I'm sending some example of single Test Suite with a bunch of Test Cases
> based on Boost Unit Test Framework.
> This Test Suite is dedicated to test Envelope class, so it's called
> envelope_class_test suite.
> It's based on EnvelopeTest.java - JTS version of test for JUnit.
> I hope this small example will give some impression about how Boost UTF
> can be incorporated in GEOS.
> 
> NOTE: I tested it with VC++ 8.0, so I don't have any makefiles for now, 
> only VC++ project files. If anyone is interested I can send VC++ 8.0 
> project files.
> 
> INSTRUCTIONS
> 1. Boost
> 
> I use current CVS - 1.34 but it should work well with current stable 
> 1.33.1 release.
> The *only* library used (that envelope_class_test is linked with) is 
> Unit Test Framework. It is only one binary file. In my case with VC++ 
> 8.0 I linked this example with
> libboost_unit_test_framework-vc80-mt-gd-1_34.lib
> 
> So, on Linux yo have to link with file named as something like:
> libboost_unit_test_framework-gcc-mt-gd-1_34.a
> 
> 2.
> Next, save the code included below as envelope_class_test.cpp file.
> 
> NOTE: there is no main function in the example test, so don't worry
> Boost will provide appropriate one :-)
> 
> Check if gcc can find header used by the example:
> #include <boost/test/unit_test.hpp>
> 
> Compile and link with library above.
> 
> For instructions about how to build Boost I'd suggest to refere to:
> http://boost.org/more/getting_started.html
> 
> 3. After it builds without any errors, just run it as a common executable.
> 
> 4. You can change a bit checks in this exmaple to catch
> some errors, e.g.: change
> BOOST_CHECK( e1.isNull() );
> to read as
> BOOST_CHECK( !e1.isNull() );
> 
> Please note, this exmaple is not going to present all features of Boost 
> UTF. Simply, it's not possible in such a small piece of code :-)
> After I've read whole Boost.Test documentation I only analyzed Unit Test 
> Framework (one of Boost.Test component) according to usage in GEOS,
> so this example presents only basic idea of:
> - how test cases set in Boost UTF look like
> - how test suites look like
> - what output you can get
> - what are basic checks (macros)
> 
> There are many many more features which can be used to develop 
> sophisticated Unit Tests, cases and suits but I think we can explore 
> them later, after Boost.Test will be incorporated in GEOS.
> 
> So, I'm interested in your comments and suggestions.
> Do you like it or not, should I procede with implementation of
> the rest of tests?
> 
> 
> Here is the file:
> 
> ///////////////////////////////////////////////////////////////////////////////
> // envelope_class_test.cpp
> 
> // BOOST
> #define BOOST_TEST_MODULE envelope_class_test
> #include <boost/test/unit_test.hpp>
> 
> // GEOS
> #include <geos/geom.h>
> 
> // Test Suite
> BOOST_AUTO_TEST_SUITE( envelope_class_test );
> 
> BOOST_AUTO_TEST_CASE( envelope_constructors_test )
> {
>     // 1 - default constructor
>     geos::Envelope e1;
> 
>     BOOST_CHECK( e1.isNull() );
>     BOOST_CHECK_EQUAL( e1.getWidth(), 0 );
>     BOOST_CHECK_EQUAL( e1.getHeight(), 0 );
> 
>     // 2
>     geos::Envelope e2(100, 200, 100, 200);
> 
>     BOOST_CHECK( !e2.isNull() );
>     BOOST_CHECK_EQUAL( e2.getMinX(), 100 );
>     BOOST_CHECK_EQUAL( e2.getMaxX(), 200 );
>     BOOST_CHECK_EQUAL( e2.getMinY(), 100 );
>     BOOST_CHECK_EQUAL( e2.getMaxY(), 200 );
>     BOOST_CHECK_EQUAL( e2.getWidth(), 100 );
>     BOOST_CHECK_EQUAL( e2.getHeight(), 100 );
> 
>     // 3 - copy constructor
>     geos::Envelope e3(e2);
> 
>     BOOST_CHECK( !e3.isNull() );
>     BOOST_CHECK_EQUAL( e3.getMinX(), 100 );
>     BOOST_CHECK_EQUAL( e3.getMaxX(), 200 );
>     BOOST_CHECK_EQUAL( e3.getMinY(), 100 );
>     BOOST_CHECK_EQUAL( e3.getMaxY(), 200 );
>     BOOST_CHECK_EQUAL( e3.getWidth(), 100 );
>     BOOST_CHECK_EQUAL( e3.getHeight(), 100 );
>     BOOST_CHECK( e3 == e2 );
>     BOOST_CHECK( e3.equals( &e2 ) );
> 
> } // envelope_constructors_test
> 
> BOOST_AUTO_TEST_CASE( envelope_null_test )
> {
>     // 1 - Test isNull() and setToNull() functions
>     geos::Envelope e1(100, 200, 100, 200);
> 
>     BOOST_CHECK( !e1.isNull() );
>     e1.setToNull();
>     BOOST_CHECK( e1.isNull() );
> 
> } // envelope_null_test
> 
> BOOST_AUTO_TEST_CASE( envelope_equals_test )
> {
>     // 1 - Test equals() function
>     geos::Envelope e1(100, 200, 100, 200);
>     geos::Envelope e2(100, 200, 100, 200);
>     geos::Envelope e3(1, 2, 1, 2);
> 
>     BOOST_CHECK( !e1.isNull() );
>     BOOST_CHECK( !e2.isNull() );
>     BOOST_CHECK( !e3.isNull() );
> 
>     BOOST_CHECK( e1.equals( &e2 ) );
>     BOOST_CHECK( !e1.equals( &e3 ) );
>     BOOST_CHECK( !e2.equals( &e3 ) );
> 
> } // envelope_equals_test
> 
> BOOST_AUTO_TEST_CASE( envelope_contains_test )
> {
>     // Test contains() predicates
>     geos::Envelope e1;
>     geos::Envelope e2(-1, 1, -1, 1);
>     geos::Envelope e3(-5, 5, -5, 5);
> 
>     BOOST_CHECK( !e2.isNull() );
>     BOOST_CHECK( !e3.isNull() );
> 
>     // 1 - Test empty envelope by reference
>     BOOST_CHECK_MESSAGE( !e1.contains( e2 ), "e1 envelope is not empty!" );
>     BOOST_CHECK_MESSAGE( !e2.contains( e1 ), "e1 envelope is not empty!");
> 
>     // 2 - Test empty envelope by pointer
>     BOOST_CHECK_MESSAGE( !e2.contains( &e1 ), "e1 envelope is not empty!");
>     BOOST_CHECK_MESSAGE( !e1.contains( &e2 ), "e1 envelope is not 
> empty!" );
> 
>     // 3 - Test non-empty envelope by reference
>     BOOST_CHECK( !e2.contains( e3 ) );
>     BOOST_CHECK( e3.contains( e2 ) );
> 
>     // 3 - Test raw point
>     BOOST_CHECK( e2.contains( 0, 0 ) );
>     BOOST_CHECK( e2.contains( -1, -1 ) );
>     BOOST_CHECK( !e2.contains( 5, 5 ) );
> 
>     // 4 - Test coordinate
>     geos::Coordinate c1(0, 0, 0);
>     BOOST_REQUIRE_EQUAL( c1.x, 0 );
>     BOOST_REQUIRE_EQUAL( c1.y, 0 );
>     BOOST_REQUIRE_EQUAL( c1.z, 0 );
>     BOOST_CHECK( e2.contains( c1 ) );
> 
> } // envelope_contains_test
> 
> BOOST_AUTO_TEST_CASE( envelope_intersects_test )
> {
>     // Test intersects() predicates
>     geos::Envelope e1;
>     geos::Envelope e2(-100, 100, -100, 100);
>     geos::Envelope e3(50, 150, 50, 150);
> 
>     BOOST_CHECK( !e2.isNull() );
>     BOOST_CHECK( !e3.isNull() );
> 
>     // 1 - Test empty envelope by pointer
>     BOOST_CHECK_MESSAGE( !e1.intersects( &e2 ), "e1 envelope is not 
> empty!" );
>     BOOST_CHECK_MESSAGE( !e2.intersects( &e1 ), "e1 envelope is not 
> empty!");
> 
>     // 2 - Test empty envelope by reference
>     BOOST_CHECK_MESSAGE( !e1.intersects( e2 ), "e1 envelope is not 
> empty!" );
>     BOOST_CHECK_MESSAGE( !e2.intersects( e1 ), "e1 envelope is not 
> empty!");
> 
>     // 3 - Test empty envelope by reference
>     BOOST_CHECK( e2.intersects( e3 ) );
>     BOOST_CHECK( e3.intersects( e2 ) );
> 
>     // 3 - Test point
>     BOOST_CHECK( e2.intersects( 0, 0 ) );
>     BOOST_CHECK( e2.intersects( -100, 100 ) );
>     BOOST_CHECK( !e2.intersects( -200, 200 ) );
> 
>     // XXX - add test for Coordinate
> 
> } // envelope_intersects_test
> 
> BOOST_AUTO_TEST_CASE( envelope_expand_test )
> {
>     // TODO
> 
>     BOOST_CHECK_MESSAGE( false, "TEST CASE NOT IMPLEMENTED" );
> 
> } //envelope_expand_test
> 
> BOOST_AUTO_TEST_SUITE_END(); // envelope_class_test
> 
> // EOF
> ///////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Mon Mar  6 05:53:47 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] First glance at the Unit Test
In-Reply-To: <20060306100036.GG84439@keybit.net>
References: <440B8D68.90605@loskot.net> <20060306100036.GG84439@keybit.net>
Message-ID: <440C14BB.5070409@loskot.net>

strk@refractions.net wrote:
> Does anybody have an m4 file that can be used 
> to detect availability of boost ?
> 
> I've found some online, but they don't seem to be checking
> for the UTF library.
> 
> REF: http://lists.boost.org/Archives/boost/2005/12/98656.php

Sorry, I can not help in this problem.
I'm not a m4 guru at all :-)

But I'd suggest to ask for newer (working) macro on boost-build list
http://lists.boost.org/mailman/listinfo.cgi/boost-build


So, strk what's your opinion about Boost.Test in GEOS?
I'd be glad to hear some confirmation officially, to have it stored in 
list archives :-)

Should I move on?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Mon Mar  6 05:55:54 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] How to make compilation time shorter
In-Reply-To: <20060306092617.GF84439@keybit.net>
References: <440B712D.3010502@loskot.net> <20060306092617.GF84439@keybit.net>
Message-ID: <440C153A.6000609@loskot.net>

strk@refractions.net wrote:
> I'm all for the refactoring.

Yes, I'm sure you are.

> C++ API users should include the geos.h file, anyway,
> so we can provide the same definition from it by including
> the splitted headers.

Yes, that's the idea.

> Also, I've been experimenting the use of a separate file
> for class inlines. So far we only have LineSegment.inl but
> the idea is to use a file for each class with inline elements.
> The advantage of this is we can switch between inlined and
> non-inlined versions by defining an USE_INLINE macro.

OK. The only drawback I see is about some additional work for maintenance.

> This way, developers can use the non-inlined version to make
> build time faster when changing inline funx bodies.
> 
> Next candidate for this would be Coordinate.

So, what about splitting geom.h into separate headers?
Should we start?
I could do it together while working on Unit Tests.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar  6 06:47:46 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Can we remove serialVersionUID?
In-Reply-To: <43F9BFAA.3030709@loskot.net>
References: <43F9BFAA.3030709@loskot.net>
Message-ID: <20060306114746.GH84439@keybit.net>

serialVersionUID are gone from geom.h (HEAD branch).
They were unmaintained and GEOS version won't keep in sync with JTS, anyway.
Thanks for the help.

--strk;

On Mon, Feb 20, 2006 at 02:10:02PM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> Yesterday, I consulted with strk and we decided to ask if there is 
> anyone using/relaying on serialVersionUID data member in GEOS classes?
> 
> If it's not used anywhere we would suggest to remove it in near future.
> Any comments?
> 
> Here is a list of files/lines whre serialVersionUID is defined.
> I found it using following command:
> 
> findu . -name *.h | xargs grep "Version"
> 
> ./headers/geos/config.h:/* Version number of package */
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 7777263578777803835I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 7777263578777803835LL;
> ./headers/geos/geom.h:	static const int64 
> serialVersionUID=6683108902428366910I64;
> ./headers/geos/geom.h:	static const int64 
> serialVersionUID=6683108902428366910LL;
> ./headers/geos/geom.h:	static const int64 
> serialVersionUID=5873921885273102420I64;
> ./headers/geos/geom.h:	static const int64 
> serialVersionUID=5873921885273102420LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -6820524753094095635I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -6820524753094095635LL;
> ./headers/geos/geom.h:    static const int64 serialVersionUID = 
> 8763622679187376702I64;
> ./headers/geos/geom.h:    static const int64 serialVersionUID = 
> 8763622679187376702LL;
> ./headers/geos/geom.h:  static const int64 
> serialVersionUID=3252005833466256227I64;
> ./headers/geos/geom.h:  static const int64 
> serialVersionUID=3252005833466256227LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -5694727726395021467I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -5694727726395021467LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 4902022702746614570I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 4902022702746614570LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 3110669828065365560I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 3110669828065365560LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -4261142084085851829I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -4261142084085851829LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -3494792200821764533I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -3494792200821764533LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -8048474874175355449I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -8048474874175355449LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 8166665132445433741I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> 8166665132445433741LL;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -551033529766975875I64;
> ./headers/geos/geom.h:	static const int64 serialVersionUID = 
> -551033529766975875LL;
> 
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From strk at refractions.net  Mon Mar  6 06:49:56 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] How to make compilation time shorter
In-Reply-To: <440C153A.6000609@loskot.net>
References: <440B712D.3010502@loskot.net> <20060306092617.GF84439@keybit.net>
	<440C153A.6000609@loskot.net>
Message-ID: <20060306114956.GI84439@keybit.net>

On Mon, Mar 06, 2006 at 11:55:54AM +0100, Mateusz ??oskot wrote:

> So, what about splitting geom.h into separate headers?
> Should we start?
> I could do it together while working on Unit Tests.

That'd be very nice, thank you !

--strk;

From mateusz at loskot.net  Mon Mar  6 06:50:20 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Can we remove serialVersionUID?
In-Reply-To: <20060306114746.GH84439@keybit.net>
References: <43F9BFAA.3030709@loskot.net> <20060306114746.GH84439@keybit.net>
Message-ID: <440C21FC.903@loskot.net>

strk@refractions.net wrote:
> serialVersionUID are gone from geom.h (HEAD branch).
> They were unmaintained and GEOS version won't keep in sync with JTS, anyway.
> Thanks for the help.

I'd only add it was removed according to the Bug #47
http://postgis.refractions.net/bugs/bug.php?op=show&bugid=47

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at keybit.net  Mon Mar  6 10:02:30 2006
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Invalid geometry returned from buffer
Message-ID: <20060306150230.GA96298@keybit.net>

Making some TopologyException handling tests i've
hit a possible bug in Buffer operation.

The attached XML test results in an Invalid output
from buffer(1). Input is valid.
Expected result is also valid (the test, in GEOS, 
succeeds as a tolerance-based comparison between expected
and obtained result is performed with a tolerance of
0.00000000000001).

Note that if precisionModel is set to FLOATING_SINGLE
the output will NOT be invalid.

Martin, can you reproduce the bug with JTS ?
With GEOS I added a --test-valid-output switch to
perform the specific check.

--strk;
-------------- next part --------------

<run>
  <precisionModel type="FLOATING" />
  <precisionModel type="FLOATING_SINGLE" />
<case><desc>Invalid output ?</desc>
<a>
GEOMETRYCOLLECTION (POLYGON ((0 10, 10 0, 10 10, 0 10), (4 8, 8 4, 8 8, 4 8)), LINESTRING (6 6, 20 20))
</a>
<test>
<op name="buffer" arg1="a" arg3="1">
 POLYGON ((-1.0000000000000000 9.9999999999401386, -0.9807852804178286 10.1950903219427378, -0.9238795325456491 10.3826834322821320, -0.8314696123607461 10.5555702329324976, -0.7071067812712054 10.7071067811018903, -0.5555702331315925 10.8314696122277159, -0.3826834325033531 10.9238795324540163, -0.1950903221775858 10.9807852803711139, -0.0000000001795863 11.0000000000000000, 0.0000000000000000 11.0000000000000000, 9.5857864376269042 11.0000000000000000, 19.2928932188134539 20.7071067811865461, 19.2928932188134539 20.7071067811865497, 19.4444297669803987 20.8314696123025449, 19.6173165676349122 20.9238795325112861, 19.8049096779838720 20.9807852804032322, 20.0000000000000000 21.0000000000000000, 20.1950903220161280 20.9807852804032287, 20.3826834323650914 20.9238795325112861, 20.5555702330196013 20.8314696123025449, 20.7071067811865461 20.7071067811865461, 20.8314696123025449 20.5555702330196013, 20.9238795325112861 20.3826834323650914, 20.9807852804032287 20.1950903220161280, 21.0000000000000000 20.0000000000000000, 20.9807852804032322 19.8049096779838720, 20.9238795325112861 19.6173165676349122, 20.8314696123025449 19.4444297669803987, 20.7071067811865461 19.2928932188134539, 11.0000000000000000 9.5857864376269042, 11.0000000000000000 0.0000000000000000, 10.9807852804032304 -0.1950903220161285, 10.9238795325112861 -0.3826834323650899, 10.8314696123025449 -0.5555702330196024, 10.7071067811865479 -0.7071067811865477, 10.5555702330196013 -0.8314696123025453, 10.3826834323650896 -0.9238795325112868, 10.1950903220161280 -0.9807852804032304, 10.0000000000000000 -1.0000000000000000, 9.8049096779838720 -0.9807852804032304, 9.6173165676349104 -0.9238795325112866, 9.4444297669803969 -0.8314696123025451, 9.2928932188134521 -0.7071067811865472, 9.2928932188134521 -0.7071067811865476, -0.7071067811865476 9.2928932188134521, -0.7071067811865478 9.2928932188134521, -0.8314696122942310 9.4444297669679553, -0.9238795324998327 9.6173165676072578, -0.9807852803944715 9.8049096779398379, -1.0000000000000000 9.9999999999401386))
</op>
</test>
</case>
</run>
From mbdavis at VividSolutions.com  Mon Mar  6 15:15:43 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3EFC@venus.VividSolutions.com>

I've been on holiday - lucky me.

Paul's assessment is correct.  JTS predicates operate in "infinite
precision", and are not affected by the precision model, roundoff
errors, or robustness issues.

The boolean operations, on the other hand (and all other constructive
operations) work within the Precision Model specified, and hence can
produce results which are affected by roundoff error.

Yes, this can lead to inconsistencies, such as the one shown.  Whether
this is a problem or not depends on the application.  

Should JTS apply the Precision Model to the predicates as well?  Well,
maybe.  One thing is for sure - this would be slower than the current
approach.  Snap-rounding (as used in the Hobby paper) is *much* slower
than the intersection detection algorithm currently used.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Paul Ramsey
> Sent: March 2, 2006 8:55 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Robustness of Binary Predicates
> 
> 
> I am surprised Martin has not jumped in here with the definitive  
> answer. It looks like the intersection is being done with a 
> precision  
> model and the boolean test is not... on graph paper those lines to  
> not touch, but they do get within the precision tolerance of one  
> another.
> 
> P.
> 
> On Mar 2, 2006, at 4:16 AM, Todd Jellett wrote:
> 
> > Sorry (again), I should have investigated the crash more closely.
> >
> > It was not occurring in the touches call but rather because I was
> > trying to dynamic_cast a Geometry to a GeometryCollection. The  
> > first example I sent returned a collection from the intersection  
> > call while the second (corrected) example correctly returns the  
> > intersection as a single point. I just wasn't checking the result  
> > of the cast.
> >
> > My real problem is that using a FIXED precision model (scale = 1.0
> > = Whole Numbers) and the LineStrings:
> > L1 = LINESTRING (-1.0 -2.0, 9.0 5.0, 0.0 0.0, 13.0 6.0)
> > L2 = LINESTRING (5.0 5.0, 5.0 3.0)
> >
> > I get:
> > L2->touches( L1 ) = false
> > L2->disjoint( L1 ) = true
> > but
> > L2->intersection( L1 ) = POINT(5.0 3.0)
> >
> > How can there be a non-NULL intersection (a single point) but still
> > have the 2 geometries *being disjoint and not touching*?
> >
> > The intersection is correct. I am questioning the correctness of
> > the Binary Predicates (touches and disjoint) since both 
> should agree.
> >
> > Sorry for the confusion
> > Todd
> >
> >
> > strk@refractions.net wrote:
> >
> >> On Wed, Mar 01, 2006 at 12:59:54PM -0400, Todd Jellett wrote:
> >>
> >>> Sorry, the second LineString should be:
> >>> LINESTRING (5.0 5.0, 5.0 3.0)
> >>>
> >>> This one crashes in L2->touches( L1 )
> >>>
> >>
> >> Can you provide an xml test showing the crash ?
> >> I tried relate(L1,L2) with 2.2.2 and HEAD with
> >> no crashes.
> >>
> >> --strk;
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net 
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mcoletti at gmail.com  Mon Mar  6 17:10:54 2006
From: mcoletti at gmail.com (Mark Coletti)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] First glance at the Unit Test
In-Reply-To: <20060306100036.GG84439@keybit.net>
References: <440B8D68.90605@loskot.net> <20060306100036.GG84439@keybit.net>
Message-ID: <120095080603061410h42d95661uc258463778c5503b@mail.gmail.com>

On 3/6/06, strk@refractions.net <strk@refractions.net> wrote:
>
> Does anybody have an m4 file that can be used
> to detect availability of boost ?
>
> I've found some online, but they don't seem to be checking
> for the UTF library.


Here're some of mine that I use; feel free to hack to fit:

------------------------------->8 snip
8<-----------------------------------------

dnl
dnl Look for the Boost C++ class template header files
dnl

AC_ARG_WITH( [boost],
             AC_HELP_STRING([--with-boost=path],[path to Boost C++ class
library headers]),
             BOOST_PATH="$withval" )

if ! test -z "$BOOST_PATH" ; then
  CPPFLAGS="$CPPFLAGS -I${BOOST_PATH}"
fi


AC_CHECK_HEADERS([boost/smart_ptr.hpp],,
         AC_MSG_ERROR([No Boost C++ library -- get from
http://www.boost.org/]))


dnl
dnl NOw look for Boost binaries, such as the boost date/time stuff
dnl

AC_ARG_WITH( [boost-lib],
             AC_HELP_STRING([--with-boost-lib=path],
                [path to Boost C++ class library librarys]),
              [BOOST_LDPATH="$withval"] )

if test ! -z "$BOOST_LDPATH" ; then
  LIBS="$LIBS -L$BOOST_LDPATH"
fi

dnl find Boost library names
dnl AC_SEARCH_LIBS( [_init],
dnl         [libboost_date_time, libboost_date_time-gcc],
dnl         [],
dnl         AC_MSG_ERROR([Unable to find Boost date library]) )


dnl AC_SEARCH_LIBS( [boost::c_regex_traits<char>::init()],
dnl         [libboost_regex libboost_regex-gcc],
dnl         [],
dnl         AC_MSG_ERROR([Unable to find Boost regex library]) )



AC_LIB_HAVE_LINKFLAGS( boost_date_time,,
[
#include <boost/date_time/gregorian/gregorian.hpp>
#include <boost/date_time/date_parsing.hpp>
#include <iostream>
#include <string>
],
[boost::gregorian::date d(boost::gregorian::from_string("2001-10-9"));] )

dnl failing the previous, try the common name variant
if test x${HAVE_LIBBOOST_DATE_TIME} = "xno"; then

AC_LIB_HAVE_LINKFLAGS( boost_date_time-gcc,,
[
#include <boost/date_time/gregorian/gregorian.hpp>
#include <boost/date_time/date_parsing.hpp>
#include <iostream>
#include <string>
],
[boost::gregorian::date d(boost::gregorian::from_string("2001-10-9"));] )

dnl substitute back canonical name (i.e., without gcc suffix)
LIBBOOST_DATE_TIME=${LIBBOOST_DATE_TIME_GCC}
LTLIBBOOST_DATE_TIME=${LTLIBBOOST_DATE_TIME_GCC}
HAVE_LIBBOOST_DATE_TIME=${HAVE_LIBBOOST_DATE_TIME_GCC}

dnl note that these will be 'no' or blank if even the "-gcc" suffix failed

fi


AC_LIB_HAVE_LINKFLAGS( boost_test_exec_monitor, ,
[
  #include <boost/test/test_tools.hpp>
  int test_main( int, char* [] )
  {
    int i = 2;
    int j = 1;
    BOOST_CHECK_EQUAL( i, j );

    return 0;
  }
],
[] )


dnl failing the previous, try the common name variant
if test x${HAVE_LIBBOOST_TEST_EXEC_MONITOR} = "xno"; then


AC_LIB_HAVE_LINKFLAGS( boost_test_exec_monitor-gcc, ,
[
  #include <boost/test/test_tools.hpp>
  int test_main( int, char* [] )
  {
    int i = 2;
    int j = 1;
    BOOST_CHECK_EQUAL( i, j );

    return 0;
  }
],
[] )

dnl substitute back canonical name (i.e., without gcc suffix)
LIBBOOST_TEST_EXEC_MONITOR=$LIBBOOST_TEST_EXEC_MONITOR_GCC
LTLIBBOOST_TEST_EXEC_MONITOR=$LTLIBBOOST_TEST_EXEC_MONITOR_GCC
HAVE_LIBBOOST_TEST_EXEC_MONITOR=$HAVE_LIBBOOST_TEST_EXEC_MONITOR_GCC

dnl note that these will be 'no' or blank if even the "-gcc" suffix failed


fi


AC_LIB_HAVE_LINKFLAGS( boost_filesystem, ,
[
  #include <boost/filesystem/path.hpp>
],
[boost::filesystem::path myPath("somedir/file.txt");] )


dnl failing the previous, try the common name variant
if test x${HAVE_LIBBOOST_FILESYSTEM} = "xno"; then


AC_LIB_HAVE_LINKFLAGS( boost_filesystem-gcc, ,
[
  #include <boost/filesystem/path.hpp>
],
[boost::filesystem::path myPath("somedir/file.txt");] )

dnl substitute back canonical name (i.e., without gcc suffix)
LIBBOOST_FILESYSTEM=${LIBBOOST_FILESYSTEM_GCC}
LTLIBBOOST_FILESYSTEM=${LTLIBBOOST_FILESYSTEM_GCC}
HAVE_LIBBOOST_FILESYSTEM=${HAVE_LIBBOOST_FILESYSTEM_GCC}

dnl note that these will be 'no' or blank if even the "-gcc" suffix failed


fi


AC_LIB_HAVE_LINKFLAGS( boost_regex,,
[
#include <boost/regex.hpp>
#include <string>
],
[static const boost::regex e("(\\d{4}[- ]){3}\\d{4}");] )

dnl failing the previous, try the common name variant
if test x${HAVE_LIBBOOST_REGEX} = "xno"; then

AC_LIB_HAVE_LINKFLAGS( boost_regex-gcc,,
[
#include <boost/regex.hpp>
#include <string>
],
[static const boost::regex e("(\\d{4}[- ]){3}\\d{4}");] )

dnl substitute back canonical name (i.e., without gcc suffix)
LIBBOOST_REGEX=${LIBBOOST_REGEX_GCC}
LTLIBBOOST_REGEX=${LTLIBBOOST_REGEX_GCC}
HAVE_LIBBOOST_REGEX=${HAVE_LIBBOOST_REGEX_GCC}

dnl note that these will be 'no' or blank if even the "-gcc" suffix failed

fi
------------------------------->8 snip
8<-----------------------------------------

Admittedly these check for other boost items, so you may want to snip out
all but the unit test stuff.  Note, too, that BOOST_PATH and BOOST_LDPATH
are set after a successful invocation of the configure script.  So I have
things like this in my Makefile.am files:


INCLUDES = -I.. -I$(top_srcdir)/featurelib -I$(includedir) -I$(BOOST_PATH)
$(GDAL_CFLAGS)

schema_type_t_SOURCES      = schema_type_t.cpp
schema_type_t_LDADD        = ../featurelib/SchemaType.o
$(LIBBOOST_TEST_EXEC_MONITOR)



Hope this helps!

Cheers,

Mark
--
I'm taking reality in small doses to build immunity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060306/9410cf44/attachment.html
From mateusz at loskot.net  Wed Mar  8 03:31:09 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Unit Tests organization
Message-ID: <440E964D.1060405@loskot.net>

Hi,

Continuing discussion about Unit Tests for GEOS I'd like
to present next ideas and ask some questions.

First, anyone interested in Boost's Unit Test Framework usage in the
bigger picture, please refer to following posts I sent on the Boost
lists. There you'll find some tips about how to organize physical and
logical structure of tests.

What's best practice to incorporate Boost.Test in own project?
http://lists.boost.org/boost-users/2006/03/17800.php

How to organize my Unit Tests?
http://lists.boost.org/boost-users/2006/03/17804.php

You can also find those posts through Gmane gateway:
http://news.gmane.org/gmane.comp.lib.boost.user

I'd like to recommend Gennadiy's posts as IMHO including best ideas.
For your information, Gennadiy Rozental is the leader of Boost.Test
libraries development.

Here are those posts I'd recommend:
http://lists.boost.org/boost-users/2006/03/17825.php
http://lists.boost.org/boost-users/2006/03/17827.php



OK, next I'd like to move to organization of particular Unit Tests
in GEOS. Obviously, Boost UTF based test follow quite different approach
than those for JUnit (currently implemented for JTS).
I'm not a Java programmer but as far as I revealed, JUnit tests are
divided by-class: every test modul (.java file) is dedicated for single
class.

In Boost UTF (what you can read in posts referenced above) there are
two levels:
- test implementation (.cpp file)
- test executable module (building output as binary file) - Test Module

Every single implementation file (.cpp) will produce single
executable. Next, in that single .cpp file you can define a number of
tests cases and/or test suits organizing a number of test cases.
Example in pseudocode for simplification:

// my_test_module.cpp
TEST_SUITE_START( first )
TEST_CASE( one )
TEST_SUITE_CASE()

TEST_SUITE_START( second )
TEST_CASE( one )
TEST_CASE( two
TEST_CASE( three )
TEST_SUITE_CASE()

TEST_CASE( standalone_test_case )
//...

Finally, my_test_module.cpp will produce one executable file and
will allow to run a bunch of tests defined inside.


Now, I'd like to hear your suggestions about how to organize (slice)
test cases/suites in test modules? According to what criterion?

Simple tips proposing by Gennadiy (from Boost list posts):
"You could have any number of those [tests] in a single test module.
You could use your own judgement to decide when to split your test
module into separtate executable.
Usually reasons more or less clear:
    * Different units/subsytem needs to have separate executable
    * If some feature may casue compilation error - move it into separate
module.
    * If number of test module execution time exceed some limit (your
choice) - split it."


According to my current knowledge of the structure of GEOS, I'd propose
following ruls of organization of tests:

1. Test of every geometry primitive (point, coordinate, envelope,
linestring, etc.) will be defined as separate TEST SUITE (with Test Cases)
2. All Test Suites for geometry primitives can be stored in single .cpp
file -> run from single executable file
3. Possible approach for other classes is to organize Test Modules
according to namespaces (one namespace = one test module). Test of
classes for single namespace may be organized into Test Suites includin
a number of Test Cases for testing such class.
4. Every algorithm from \source\algorithm could be tested in separate
Test Modules or related algorithms could be grouped into one Test Module.
5. If single class or namespace (related classes) requires external data 
source (e.g. XML file) to do tests then such test should have be run 
inside separate executable  -> defined in separate .cpp file.
6. ... ???


Another approach is to slice GEOS by class and organize every test into 
single executable Test Module. But I'm not sure if this is applicable.

Thank you for your comments in advance.
They would be very thankful to organize tests in clear structure.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From todd.jellett at caris.com  Wed Mar  8 10:25:50 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3EFC@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3EFC@venus.VividSolutions.com>
Message-ID: <440EF77E.4070509@caris.com>

Hi Martin,

Just got back from an extended weekend myself.

We are currently implementing our 4th generation geometries. This 
version is based on ISO 19107 while the previous generations are based 
on SFS. We wanted to use geos as a reference model to test our new code 
against since robustness is claimed (at least for the Predicates). My 
impression of the specs (both of them) was that the "package", both 
Binary Predicates and set theoretics (intersection, union, and 
differences), should be robust. To me this implies that the Binary 
Predicates and the set theoretics should agree. I acknowledge that 
neither of the specs define "robustness".

See my comments below. Since we can't use geos as a reference model (for 
the obvious reasons) you can take my comments as you wish.

Todd

Martin Davis wrote:

>I've been on holiday - lucky me.
>
>Paul's assessment is correct.  JTS predicates operate in "infinite
>precision", and are not affected by the precision model, roundoff
>errors, or robustness issues.
>
>The boolean operations, on the other hand (and all other constructive
>operations) work within the Precision Model specified, and hence can
>produce results which are affected by roundoff error.
>  
>
But the implementation of the boolean operations should be insulated 
from round-off errors by design (choice of algorithms), shouldn't they?
If you are affected by round-off errors, you have a robustness problem 
by definition don't you? (Using a computational geometry definitition of 
robustness.)

>Yes, this can lead to inconsistencies, such as the one shown.  Whether
>this is a problem or not depends on the application.  
>  
>
When I have *data* that is at a particular resolution (precision), like 
s57 or VPF data, I would expect the Binary Predicates (ie disjoint) to 
honour the precision of the *data* (because I would not get what I 
expect otherwise). Typically we would test geometries for being disjoint 
and *only* perform an intersection on the geometries that are *not* 
disjoint. Here we would get the "wrong anwer".

Can't any piece of software claim robustness as long as it is qualified 
with a "depends on the application"? You need to define your "robustness".

>Should JTS apply the Precision Model to the predicates as well?  Well,
>maybe.  One thing is for sure - this would be slower than the current
>approach.  Snap-rounding (as used in the Hobby paper) is *much* slower
>than the intersection detection algorithm currently used.
>
>  
>
Every time you snap a point, you move one end of every segment that has 
that particular point as an end point. Every time you move a segment, 
you could be creating new intersection points (and possibly removing 
others).  This can even occur in a FLOATING model where the FPU rounds 
your intersection points (and moves segments). If you don't account for 
these "extraneous intersection points" you will always have 
inconsistencies (robustness problems).

Yes I agree that it will be slower but...

We have a saying around here "Speed is important, but it doesn't matter 
how fast you get the wrong answer". :-)
Translation - In engineering applications robustness/correctness trumps 
speed of execution.  If the "intersection detection algorithm currently 
used" does not find *all* the intersection points, when it needs to find 
*all* of the intersection points to be robust, it doesn't matter how 
fast it is. This is an indication that the current algorithm needs to be 
adjusted or re-implemented using an algorithm that does find *all* the 
intersection points. Make it correct first then profile to see where it 
can be sped up.

>Martin Davis, Senior Technical Architect
>Vivid Solutions Inc.      www.vividsolutions.com
>Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
>Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
>
>
>  
>
>>-----Original Message-----
>>From: geos-devel-bounces@geos.refractions.net 
>>[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
>>Paul Ramsey
>>Sent: March 2, 2006 8:55 PM
>>To: GEOS Development List
>>Subject: Re: [geos-devel] Robustness of Binary Predicates
>>
>>
>>I am surprised Martin has not jumped in here with the definitive  
>>answer. It looks like the intersection is being done with a 
>>precision  
>>model and the boolean test is not... on graph paper those lines to  
>>not touch, but they do get within the precision tolerance of one  
>>another.
>>
>>P.
>>
>>On Mar 2, 2006, at 4:16 AM, Todd Jellett wrote:
>>
>>    
>>
>>>Sorry (again), I should have investigated the crash more closely.
>>>
>>>It was not occurring in the touches call but rather because I was
>>>trying to dynamic_cast a Geometry to a GeometryCollection. The  
>>>first example I sent returned a collection from the intersection  
>>>call while the second (corrected) example correctly returns the  
>>>intersection as a single point. I just wasn't checking the result  
>>>of the cast.
>>>
>>>My real problem is that using a FIXED precision model (scale = 1.0
>>>= Whole Numbers) and the LineStrings:
>>>L1 = LINESTRING (-1.0 -2.0, 9.0 5.0, 0.0 0.0, 13.0 6.0)
>>>L2 = LINESTRING (5.0 5.0, 5.0 3.0)
>>>
>>>I get:
>>>L2->touches( L1 ) = false
>>>L2->disjoint( L1 ) = true
>>>but
>>>L2->intersection( L1 ) = POINT(5.0 3.0)
>>>
>>>How can there be a non-NULL intersection (a single point) but still
>>>have the 2 geometries *being disjoint and not touching*?
>>>
>>>The intersection is correct. I am questioning the correctness of
>>>the Binary Predicates (touches and disjoint) since both 
>>>      
>>>
>>should agree.
>>    
>>
>>>Sorry for the confusion
>>>Todd
>>>
>>>
>>>strk@refractions.net wrote:
>>>
>>>      
>>>
>>>>On Wed, Mar 01, 2006 at 12:59:54PM -0400, Todd Jellett wrote:
>>>>
>>>>        
>>>>
>>>>>Sorry, the second LineString should be:
>>>>>LINESTRING (5.0 5.0, 5.0 3.0)
>>>>>
>>>>>This one crashes in L2->touches( L1 )
>>>>>
>>>>>          
>>>>>
>>>>Can you provide an xml test showing the crash ?
>>>>I tried relate(L1,L2) with 2.2.2 and HEAD with
>>>>no crashes.
>>>>
>>>>--strk;
>>>>
>>>>_______________________________________________
>>>>geos-devel mailing list
>>>>geos-devel@geos.refractions.net 
>>>>http://geos.refractions.net/mailman/listinfo/geos-devel
>>>>
>>>>        
>>>>
>>>_______________________________________________
>>>geos-devel mailing list
>>>geos-devel@geos.refractions.net 
>>>http://geos.refractions.net/mailman/listinfo/geos-devel
>>>      
>>>
>>_______________________________________________
>>geos-devel mailing list
>>geos-devel@geos.refractions.net 
>>http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>>    
>>
>_______________________________________________
>geos-devel mailing list
>geos-devel@geos.refractions.net
>http://geos.refractions.net/mailman/listinfo/geos-devel
>  
>


From mbdavis at VividSolutions.com  Wed Mar  8 12:09:33 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3F00@venus.VividSolutions.com>

I think there are several issues here.  One is a question of algorithm
robustness and correctness, and the others are design decisions (= value
judgements).

The ideal of robustness in geometric algorithms is that an particular
implementation produces answers which are correct according to some
model.  JTS does this for binary predicates, and attempts to do this for
boolean operations.  The latter is significantly harder than the former,
which is why we claim robustness for the first but not the second.  Here
I use "robust" to mean "consistent and correct within the related group
of operations". 

One design decision is whether you extend robustness to mean
"consistency all of the predicates and boolean operations together".
This is no doubt a worthwhile goal for some applications.  However, I
don't think that it is an absolute requirement for using an API to do
useful work.  (It's also worth noting that the basic set of IEEE
floating point operations would fail this criterion).

Another design decision is whether the binary predicates should take the
precision model into account.  This also is probably a worthwhile goal,
but doesn't seem to be top of the list as far as most people's
functionality requirements.  It's worth repeating here that whether the
binary predicates respect the precision model has nothing to do with
whether they are robust (and also consistent).  If you represent
geometry using floating point values for the coordinates, the
topological relationship of two geometries is well-defined regardless of
the precision model.  (And this is the most efficient and most easily
understood semantics, IMO.  If you require the precision model to be
taken into account this requires substantially more complex processing).

A few more direct comments:

> If you are affected by round-off errors, you  have a robustness
problem  by definition don't you? 

No, if your operations are consistent with the semantic model you
specify.  Boolean operations are *always* affected by round-off error.
The important thing is that there is a well-defined semantics for the
results of computation which takes this into account.  (By the way, are
you expecting that your boolean operations should be self-consistent?
E.g. fully associative?  Is this even possible?  If you have defined and
implemented this semantics, I suggest you publish it right away - I've
never seen any kind of analysis of this issue, and it would be
fascinating to read).

> Can't any piece of software claim robustness as long as it is
qualified 
> with a "depends on the application"? You need to define your
"robustness".

We have tried to do this (with respect to our documentation resources -
see my comment above about the lack of published analyses anywhere, not
just in JTS).  Consider the above as further documentation.

Finally, I'm honoured that you considered using my open source
implementation as a validator for your (presumably) commercial software
package.  I'm sorry it falls a bit short of your requirements.  It
sounds like you have some ambitious goals for making your software fully
robust.  Perhaps you should consider publishing your own work in the
open-source realm, so that the rest of us can benefit from it.  Or even
better, fund some further work on JTS/GEOS to address some of the issues
that you've raised.

I'd welcome further discussion on this - accompanied by source code if
possible!

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


From todd.jellett at caris.com  Wed Mar  8 16:52:26 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F00@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F00@venus.VividSolutions.com>
Message-ID: <440F521A.7090305@caris.com>

Hi Martin,

Thanks for taking the time to reply. We all have so little time. I'd 
also like to say that I am not just playing "devils advocate". Although 
I disagree with some of your design decisions, I am genuinely interested 
in why you made the decisions you did. Reply when you find the time.

The most important question would be why you chose to have the Binary 
Predicates operate at "infinite precision" rather than at the precision 
of the precision model (ie in most cases at the precision of the data 
itself). The computer itself cannot work at infinite precision.

Instead of  trying to make the FIXED precision model a special case of 
the FLOATING model, we have the FLOATING precision model as a special 
case of the FIXED model. Everything falls into place better.

A few short comments below

Todd

Martin Davis wrote:

>I think there are several issues here.  One is a question of algorithm
>robustness and correctness, and the others are design decisions (= value
>judgements).
>
>The ideal of robustness in geometric algorithms is that an particular
>implementation produces answers which are correct according to some
>model.  JTS does this for binary predicates, and attempts to do this for
>boolean operations.  The latter is significantly harder than the former,
>which is why we claim robustness for the first but not the second.  Here
>I use "robust" to mean "consistent and correct within the related group
>of operations". 
>  
>
My interpretation of the spec(s) assumes predicates and boolean 
operations are within the same related group of operations.

>One design decision is whether you extend robustness to mean
>"consistency all of the predicates and boolean operations together".
>This is no doubt a worthwhile goal for some applications.  However, I
>don't think that it is an absolute requirement for using an API to do
>useful work.  (It's also worth noting that the basic set of IEEE
>floating point operations would fail this criterion).
>
>Another design decision is whether the binary predicates should take the
>precision model into account.  This also is probably a worthwhile goal,
>but doesn't seem to be top of the list as far as most people's
>functionality requirements.  It's worth repeating here that whether the
>binary predicates respect the precision model has nothing to do with
>whether they are robust (and also consistent).  If you represent
>geometry using floating point values for the coordinates, the
>topological relationship of two geometries is well-defined regardless of
>the precision model.  (And this is the most efficient and most easily
>understood semantics, IMO.  If you require the precision model to be
>taken into account this requires substantially more complex processing).
>
>  
>
IMHO the Binary Predicates must honour the precision model. How can the 
boolean operations operate at infinite precision when the computer is 
restricted to 15+ significant figures?

>A few more direct comments:
>
>  
>
>>If you are affected by round-off errors, you  have a robustness
>>    
>>
>problem  by definition don't you? 
>
>No, if your operations are consistent with the semantic model you
>specify.  Boolean operations are *always* affected by round-off error.
>  
>
IMHO a missed intersection point is not a semantic issue but rather a 
robustness issue.

>The important thing is that there is a well-defined semantics for the
>results of computation which takes this into account.  (By the way, are
>you expecting that your boolean operations should be self-consistent?
>E.g. fully associative?  Is this even possible?  If you have defined and
>implemented this semantics, I suggest you publish it right away - I've
>never seen any kind of analysis of this issue, and it would be
>fascinating to read).
>  
>
No not fully associative (because a*b is not associative (or 
commutative) on a computer with 15 digits) but we will be as accurate as 
the computer can be in our equivalent of a FLOATING model and accurate 
to the precision model (the data)  in our equivalent of a FIXED model. 
FLOATING model is a special case of FIXED (see above).

>  
>
>>Can't any piece of software claim robustness as long as it is
>>    
>>
>qualified 
>  
>
>>with a "depends on the application"? You need to define your
>>    
>>
>"robustness".
>
>We have tried to do this (with respect to our documentation resources -
>see my comment above about the lack of published analyses anywhere, not
>just in JTS).  Consider the above as further documentation.
>
>Finally, I'm honoured that you considered using my open source
>implementation as a validator for your (presumably) commercial software
>package.  I'm sorry it falls a bit short of your requirements.  It
>sounds like you have some ambitious goals for making your software fully
>robust.
>
Having taken 3 previous runs at this helps. Not as ambitious as you make 
out. Building on what we already have would be more like it.
The "Geometries" are not a commercial product but they will be used in 
commercial applications.

>  Perhaps you should consider publishing your own work in the
>open-source realm, so that the rest of us can benefit from it.  Or even
>better, fund some further work on JTS/GEOS to address some of the issues
>that you've raised.
>  
>
Unfortunately I do not own the rights to the work, my employer does.

>I'd welcome further discussion on this - accompanied by source code if
>possible!
>
>Martin Davis, Senior Technical Architect
>Vivid Solutions Inc.      www.vividsolutions.com
>Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
>Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
>
>_______________________________________________
>geos-devel mailing list
>geos-devel@geos.refractions.net
>http://geos.refractions.net/mailman/listinfo/geos-devel
>  
>


From mbdavis at VividSolutions.com  Wed Mar  8 17:30:08 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] Robustness of Binary Predicates
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3F02@venus.VividSolutions.com>

Hi, Todd.

> The most important question would be why you chose to have the Binary 
> Predicates operate at "infinite precision" rather than at the 
> precision 
> of the precision model (ie in most cases at the precision of the data 
> itself). The computer itself cannot work at infinite precision.

There are a few rationales behind this decision:

- It is perfectly feasible to compute the exact topological relationship
for double-precision coordinates.  Any given double-precision coordinate
defines a finitely specified location in space.  Any two DP segments are
finitely defined, and have a well-defined topological relationship to
each other.  The relationship of all higher-order geometry can be
determined from the relationships identified for the segments comprising
them.  

- The goal was to compute topological relationships for the exact
coordinates presented by the user, not some rounded or processed
representation.  To my mind the computation of the exact relationship
given by the full-precision arrangement is the most fundamental
operation.  If a rounded representation is required, that could be
provided as a "front-end" to the relationship computation.

- To my mind the semantics of relationships using full-precision is
easier to define and comprehend than when the precision model is
incorporated.  Witness your example - visually it's obvious that the
lines do not intersect.  It's much less obvious what the correct
relationship is if the geometries are implicitly snapped to a precision
model

> Instead of  trying to make the FIXED precision model a special case of

> the FLOATING model, we have the FLOATING precision model as a special 
> case of the FIXED model. Everything falls into place better.

JTS uses floating-point for a few reasons  It's faster than integer.  It
doesn't require scale factors to represent very large or small
coordinate spaces.  It supplies 54 bits of precision (some existing
systems are limited to 32 bits, which is too small for a lot of
requirements).  

I do agree, though, that in order to provide fully robust boolean
operations (as opposed to predicates) that you probably have to round
things to a fixed-precision grid.  Another advantage of using
floating-point may be that this rounding can take place on a
case-by-case basis, rather than forcing every geometry to be rounded a
priori to the same grid.  (Looking ahead to Google Quantum Cosmos, which
displays every single atom and star in the Universe  8^)

Nice to hear that you find basing things on FIXED works better.  I'd be
interested in seeing how the API supports presenting the user with a
floating-point model.  And I hope you offer more than 32 bits of
precision!

> IMHO the Binary Predicates must honour the precision model. 
> How can the boolean operations operate at infinite precision when the
computer is 
> restricted to 15+ significant figures?

The boolean operations (overlay) can't.  The Binary Predicates can (by
virtue of the fact that they are not constructive, but simply return a
boolean value representing a computation on a finitely specified state).

Sorry to hear that all your good thinking on this topic is not going to
be readily available to the community.  There's some big issues
underneath all this, and it would be nice to be able define a standard
approach to handling this.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


From bluecarto at gmail.com  Thu Mar  9 08:09:46 2006
From: bluecarto at gmail.com (Pierre GIRAUD)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] truncated buffer result
Message-ID: <d50f50e60603090509j5d3a6c23sc90c5d0ebbd3bab8@mail.gmail.com>

Hello,

I probably found a tiny issue in the buffer computation on a POYGON shape.

Using Mapserver geos implementation, I fell on a curious behaviour of
the buffer compuation (see attached image).
To reproduce the bug, I tried a similar request in PostGIS, and
obtained the same result. So I suppose this is a GEOS library issue.

psql -d database -c "SELECT
astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));"

Do I have to fill in a bug ?

Regards

Pierre GIRAUD
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 1141835200104121.gif
Type: image/gif
Size: 1387 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060309/01370454/1141835200104121.gif
From strk at refractions.net  Thu Mar  9 08:22:53 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] truncated buffer result
In-Reply-To: <d50f50e60603090509j5d3a6c23sc90c5d0ebbd3bab8@mail.gmail.com>
References: <d50f50e60603090509j5d3a6c23sc90c5d0ebbd3bab8@mail.gmail.com>
Message-ID: <20060309132253.GC32919@keybit.net>

On Thu, Mar 09, 2006 at 02:09:46PM +0100, Pierre GIRAUD wrote:
> Hello,
> 
> I probably found a tiny issue in the buffer computation on a POYGON shape.
> 
> Using Mapserver geos implementation, I fell on a curious behaviour of
> the buffer compuation (see attached image).
> To reproduce the bug, I tried a similar request in PostGIS, and
> obtained the same result. So I suppose this is a GEOS library issue.
> 
> psql -d database -c "SELECT
> astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
> 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));"
> 
> Do I have to fill in a bug ?

If it happens with GEOS-2.2 or above please file a bug report
http://postgis.refractions.net/bugs/

Thanks.

--strk;

From woodbri at swoodbridge.com  Thu Mar  9 08:51:27 2006
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] truncated buffer result
In-Reply-To: <d50f50e60603090509j5d3a6c23sc90c5d0ebbd3bab8@mail.gmail.com>
References: <d50f50e60603090509j5d3a6c23sc90c5d0ebbd3bab8@mail.gmail.com>
Message-ID: <441032DF.7020304@swoodbridge.com>

I just tried this on "POSTGIS="1.1.1" GEOS="2.2.1-CAPI-1.0.1" USE_STATS"

and got "ERROR:  geometry contains non-closed rings"

SELECT
astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));
                                                ^^^^^^^

Notice the Y value of the last point has an extra leading "1", if I 
remove that I get:

POLYGON((663144 796327,663144 1796327.1,663144.894659621 
1796336.51623843,663147.54662185 1796345.59550374,663151.860982546 
1796354.01288182,663157.683346337 1796361.46714516,663164.805351871 
1796367.69153262,663172.972128319 1796372.46329587,663181.891416275 
1796375.61167076,663191.244026668 1796377.02398833,663200.695263383 
1796376.64970684,663209.906900826 1796374.50222048,663218.549287795 
1796370.65838001,663218.736835661 1796370.52787101,663242.124446399 
1796399.44346247,663248.737676265 1796406.19872337,663256.504198503 
1796411.58848138,663265.146380576 1796415.42006697,663274.355287429 
1796417.55651112,663283.801725107 1796417.92144165,663293.148008554 
1796416.50181325,663302.060032965 1796413.34837386,663310.219217141 
1796408.57385057,663317.333891921 1796402.34891989,663323.14972658 
1796394.89610658,663327.45882048 1796386.4818289,663330.10713496 
1796377.40687494,663330.999999811 1796367.99565018,663243.999999811 
796326.995650178,663243.038468287 796317.241484331,663240.192519963 
796307.862312066,663235.571516999 796299.218549815,663229.353032144 
796291.642354176,663221.776025092 796285.424858027,663213.131659899 
796280.804983066,663203.752116332 796277.960258697,663193.997825094 
796277.000000047,663184.243617431 796277.96110728,663174.86432138 
796280.806647624,663166.220358132 796285.427274594,663158.643892007 
796291.645429891,663152.426066276 796299.222166486,663147.805815305 
796307.866330715,663144.960682944 796317.245750531,663144 
796326.999999991,663144 796327))

Sorry no, pretty graphic, but the start and end points do match and they 
appear to be 50 units west of the start of the orginal polyline.

Hope this helps,
   -Steve



Pierre GIRAUD wrote:
> Hello,
> 
> I probably found a tiny issue in the buffer computation on a POYGON shape.
> 
> Using Mapserver geos implementation, I fell on a curious behaviour of
> the buffer compuation (see attached image).
> To reproduce the bug, I tried a similar request in PostGIS, and
> obtained the same result. So I suppose this is a GEOS library issue.
> 
> psql -d database -c "SELECT
> astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
> 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));"
> 
> Do I have to fill in a bug ?
> 
> Regards
> 
> Pierre GIRAUD
> 
> 
> ------------------------------------------------------------------------
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From bluecarto at gmail.com  Thu Mar  9 09:38:43 2006
From: bluecarto at gmail.com (Pierre GIRAUD)
Date: Fri Nov  2 20:52:58 2007
Subject: [geos-devel] truncated buffer result
In-Reply-To: <441032DF.7020304@swoodbridge.com>
References: <d50f50e60603090509j5d3a6c23sc90c5d0ebbd3bab8@mail.gmail.com>
	<441032DF.7020304@swoodbridge.com>
Message-ID: <d50f50e60603090638i6bd9ea41ld0ce49a41ed2926@mail.gmail.com>

Sorry there was a typo :

SELECT  astext(buffer(geometryfromtext('POLYGON((663194 1796327,663281
1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));

The error was the first point didn't match the first one : missing "1"
( 796327 -> 1796327).

I also just tested in an upgraded postgis : POSTGIS="1.1.1"
GEOS="2.2.1" PROJ="Rel. 4.4.9, 29 Oct 2004" USE_STATS

Here is the response :

POLYGON((663193.969722321 1796327.06424776,663172.685114959
1796372.22914631,663259.685114959 1796413.22914631,663268.718916272
1796416.46828842,663278.205160608 1796417.92182762,663287.794368624
1796417.53621458,663297.133267731 1796415.32565554,663305.877806879
1796411.37158891,663313.705831622 1796405.81968506,663320.328952494
1796398.87447968,663325.503169464 1796390.79183862,663329.037861049
1796381.86953156,663330.802806939 1796372.43626205,663330.732985393
1796362.83955778,663328.830968681 1796353.43296753,663325.166828321
1796344.56303612,663319.875553601 1796336.55653753,663264.875553601
1796268.55653753,663257.885682593 1796261.48632391,663249.635099941
1796255.93888278,663240.4500212 1796252.13355155,663230.693610484
1796250.22078726,663220.751621512 1796250.27621773,663211.017145485
1796252.29765131,663201.875068854 1796256.20516358,663193.686855497
1796261.84425741,663161.686855497 1796288.94425741,663193.969722321
1796327.06424776))

I'll fill a bug.

On 3/9/06, Stephen Woodbridge <woodbri@swoodbridge.com> wrote:
> I just tried this on "POSTGIS="1.1.1" GEOS="2.2.1-CAPI-1.0.1" USE_STATS"
>
> and got "ERROR:  geometry contains non-closed rings"
>
> SELECT
> astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
> 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));
>                                                 ^^^^^^^
>
> Notice the Y value of the last point has an extra leading "1", if I
> remove that I get:
>
> POLYGON((663144 796327,663144 1796327.1,663144.894659621
> 1796336.51623843,663147.54662185 1796345.59550374,663151.860982546
> 1796354.01288182,663157.683346337 1796361.46714516,663164.805351871
> 1796367.69153262,663172.972128319 1796372.46329587,663181.891416275
> 1796375.61167076,663191.244026668 1796377.02398833,663200.695263383
> 1796376.64970684,663209.906900826 1796374.50222048,663218.549287795
> 1796370.65838001,663218.736835661 1796370.52787101,663242.124446399
> 1796399.44346247,663248.737676265 1796406.19872337,663256.504198503
> 1796411.58848138,663265.146380576 1796415.42006697,663274.355287429
> 1796417.55651112,663283.801725107 1796417.92144165,663293.148008554
> 1796416.50181325,663302.060032965 1796413.34837386,663310.219217141
> 1796408.57385057,663317.333891921 1796402.34891989,663323.14972658
> 1796394.89610658,663327.45882048 1796386.4818289,663330.10713496
> 1796377.40687494,663330.999999811 1796367.99565018,663243.999999811
> 796326.995650178,663243.038468287 796317.241484331,663240.192519963
> 796307.862312066,663235.571516999 796299.218549815,663229.353032144
> 796291.642354176,663221.776025092 796285.424858027,663213.131659899
> 796280.804983066,663203.752116332 796277.960258697,663193.997825094
> 796277.000000047,663184.243617431 796277.96110728,663174.86432138
> 796280.806647624,663166.220358132 796285.427274594,663158.643892007
> 796291.645429891,663152.426066276 796299.222166486,663147.805815305
> 796307.866330715,663144.960682944 796317.245750531,663144
> 796326.999999991,663144 796327))
>
> Sorry no, pretty graphic, but the start and end points do match and they
> appear to be 50 units west of the start of the orginal polyline.
>
> Hope this helps,
>    -Steve
>
>
>
> Pierre GIRAUD wrote:
> > Hello,
> >
> > I probably found a tiny issue in the buffer computation on a POYGON shape.
> >
> > Using Mapserver geos implementation, I fell on a curious behaviour of
> > the buffer compuation (see attached image).
> > To reproduce the bug, I tried a similar request in PostGIS, and
> > obtained the same result. So I suppose this is a GEOS library issue.
> >
> > psql -d database -c "SELECT
> > astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
> > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));"
> >
> > Do I have to fill in a bug ?
> >
> > Regards
> >
> > Pierre GIRAUD
> >
> >
> > ------------------------------------------------------------------------
> >
> >
> > ------------------------------------------------------------------------
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

From todd.jellett at caris.com  Thu Mar  9 09:38:58 2006
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Robustness of Binary Predicates
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F02@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F02@venus.VividSolutions.com>
Message-ID: <44103E02.9040203@caris.com>

Hi Martin,

See Below

Todd

Martin Davis wrote:

>Hi, Todd.
>
>  
>
>>The most important question would be why you chose to have the Binary 
>>Predicates operate at "infinite precision" rather than at the 
>>precision 
>>of the precision model (ie in most cases at the precision of the data 
>>itself). The computer itself cannot work at infinite precision.
>>    
>>
>
>There are a few rationales behind this decision:
>
>- It is perfectly feasible to compute the exact topological relationship
>for double-precision coordinates.  Any given double-precision coordinate
>defines a finitely specified location in space.  Any two DP segments are
>finitely defined, and have a well-defined topological relationship to
>each other.  The relationship of all higher-order geometry can be
>determined from the relationships identified for the segments comprising
>them.  
>
>- The goal was to compute topological relationships for the exact
>coordinates presented by the user, not some rounded or processed
>representation.  To my mind the computation of the exact relationship
>given by the full-precision arrangement is the most fundamental
>operation.  If a rounded representation is required, that could be
>provided as a "front-end" to the relationship computation.
>
>- To my mind the semantics of relationships using full-precision is
>easier to define and comprehend than when the precision model is
>incorporated.  Witness your example - visually it's obvious that the
>lines do not intersect.  It's much less obvious what the correct
>relationship is if the geometries are implicitly snapped to a precision
>model
>
>  
>
The problem I see with this approach is that the Binary Predicates can 
*never* agree with the boolean operations (which I have indicated is how 
I interpret the spec(s)).

>>Instead of  trying to make the FIXED precision model a special case of
>>    
>>
>
>  
>
>>the FLOATING model, we have the FLOATING precision model as a special 
>>case of the FIXED model. Everything falls into place better.
>>    
>>
>
>JTS uses floating-point for a few reasons  It's faster than integer.  It
>doesn't require scale factors to represent very large or small
>coordinate spaces.  It supplies 54 bits of precision (some existing
>systems are limited to 32 bits, which is too small for a lot of
>requirements).  
>
>I do agree, though, that in order to provide fully robust boolean
>operations (as opposed to predicates) that you probably have to round
>things to a fixed-precision grid.  Another advantage of using
>floating-point may be that this rounding can take place on a
>case-by-case basis, rather than forcing every geometry to be rounded a
>priori to the same grid.  (Looking ahead to Google Quantum Cosmos, which
>displays every single atom and star in the Universe  8^)
>
>Nice to hear that you find basing things on FIXED works better.  I'd be
>interested in seeing how the API supports presenting the user with a
>floating-point model.  And I hope you offer more than 32 bits of
>precision!
>
>  
>
I think I have somehow confused you. We don't use integers, we 
snap/round to a fixed precision grid (even for the FLOATING model). We 
do this for both the Binary Predicates and the boolean operations, so 
that they agree with each other. They agree in our 3rd generation 
geometries and they will in the 4th generation as well. The move to ISO 
19107 is mainly to provide a framework to tie 2D, 3D, interpolation, 
TINs, VOXELS and various types of surfaces (ie parametric surfaces) 
together. It will also allow us to create new types such as parametric 
and geodetic LineStrings.

For the FLOATING model, the FPU does the rounding but we treat it as 
FIXED with 15 significant figures. All that's needed to do this is a 
robust 3x3 (sign of) determinant which can robustly determine 
isLeftOf(), isRightOf(), and isCollinear() for 3 points *beyond* the 
precision of the computer. (We use Shewchuck's Exact Adaptive 
Orientation tests.)

For both Binary Predicates and Boolean Operations:
-Find *all* the primary and secondary intersection points up front 
(includes the extraneous intersection points).
-Snap/Round the intersection points to the precision model (This gives 
all the correct nodes and edges in your graph/TP_COMPLEX(s))
-Once you have the correct nodes and edges (based on the precision 
model), treat the graph(s)/TP_COMPLEX(s) as verbatim and "discover" what 
is there. The only computational geometry required is point-in-polygon 
(EdgeRing).

As far as mapping the universe goes, all of our clients are here on 
Earth :-) . Realistically, the 15 digits of precision gives us more 
resolution (1/10000 of a millimeter) everywhere on this planet than can 
be realistically measured (absolute measurment). When the error in a 
datum transformation is in the order of meters, this more than enough 
precision for us earthlings.

>>IMHO the Binary Predicates must honour the precision model. 
>>How can the boolean operations operate at infinite precision when the
>>    
>>
>computer is 
>  
>
>>restricted to 15+ significant figures?
>>    
>>
>
>The boolean operations (overlay) can't.  The Binary Predicates can (by
>virtue of the fact that they are not constructive, but simply return a
>boolean value representing a computation on a finitely specified state).
>  
>
I see this as a restriction not an asset. Not only are the Binary 
Predicates not constructive but they cannot be used in any geometric 
constructive operation because they will cause errors due to ambiguities.

>Sorry to hear that all your good thinking on this topic is not going to
>be readily available to the community.  There's some big issues
>underneath all this, and it would be nice to be able define a standard
>approach to handling this.
>  
>
Got to pay the mortgage (regularly) somehow. OpenSource is nice in 
theory but realistically, how many OpenSource authors are out there that 
are completely self-sustained on their OpenSource income. Yes I know 
there are some, and some of them do very well, but the majority are not 
so lucky.

>Martin Davis, Senior Technical Architect
>Vivid Solutions Inc.      www.vividsolutions.com
>Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
>Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
>
>_______________________________________________
>geos-devel mailing list
>geos-devel@geos.refractions.net
>http://geos.refractions.net/mailman/listinfo/geos-devel
>  
>


From mbdavis at VividSolutions.com  Thu Mar  9 17:38:42 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] truncated buffer result
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D8BF@venus.VividSolutions.com>

The odd buffer result is because the input polygon is invalid
(self-intersection at (663194.0947744681, 1796327.0446638297) - see
attached image).

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Pierre GIRAUD
> Sent: March 9, 2006 6:39 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] truncated buffer result
> 
> 
> Sorry there was a typo :
> 
> SELECT  astext(buffer(geometryfromtext('POLYGON((663194 
> 1796327,663281 1796368,663226 1796300,663194 1796327.1,663194 
> 1796327))'), 50));
> 
> The error was the first point didn't match the first one : 
> missing "1" ( 796327 -> 1796327).
> 
> I also just tested in an upgraded postgis : POSTGIS="1.1.1" 
> GEOS="2.2.1" PROJ="Rel. 4.4.9, 29 Oct 2004" USE_STATS
> 
> Here is the response :
> 
> POLYGON((663193.969722321 1796327.06424776,663172.685114959 
> 1796372.22914631,663259.685114959 
> 1796413.22914631,663268.718916272 
> 1796416.46828842,663278.205160608 
> 1796417.92182762,663287.794368624 
> 1796417.53621458,663297.133267731 
> 1796415.32565554,663305.877806879 
> 1796411.37158891,663313.705831622 
> 1796405.81968506,663320.328952494 
> 1796398.87447968,663325.503169464 
> 1796390.79183862,663329.037861049 
> 1796381.86953156,663330.802806939 
> 1796372.43626205,663330.732985393 
> 1796362.83955778,663328.830968681 
> 1796353.43296753,663325.166828321 
> 1796344.56303612,663319.875553601 
> 1796336.55653753,663264.875553601 
> 1796268.55653753,663257.885682593 
> 1796261.48632391,663249.635099941 
> 1796255.93888278,663240.4500212 
> 1796252.13355155,663230.693610484 
> 1796250.22078726,663220.751621512 
> 1796250.27621773,663211.017145485 
> 1796252.29765131,663201.875068854 
> 1796256.20516358,663193.686855497 
> 1796261.84425741,663161.686855497 1796288.94425741,663193.969722321
> 1796327.06424776))
> 
> I'll fill a bug.
> 
> On 3/9/06, Stephen Woodbridge <woodbri@swoodbridge.com> wrote:
> > I just tried this on "POSTGIS="1.1.1" GEOS="2.2.1-CAPI-1.0.1" 
> > USE_STATS"
> >
> > and got "ERROR:  geometry contains non-closed rings"
> >
> > SELECT
> > astext(buffer(geometryfromtext('POLYGON((663194 796327,663281 
> > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));
> >                                                 ^^^^^^^
> >
> > Notice the Y value of the last point has an extra leading "1", if I 
> > remove that I get:
> >
> > POLYGON((663144 796327,663144 1796327.1,663144.894659621 
> > 1796336.51623843,663147.54662185 1796345.59550374,663151.860982546 
> > 1796354.01288182,663157.683346337 1796361.46714516,663164.805351871 
> > 1796367.69153262,663172.972128319 1796372.46329587,663181.891416275 
> > 1796375.61167076,663191.244026668 1796377.02398833,663200.695263383 
> > 1796376.64970684,663209.906900826 1796374.50222048,663218.549287795 
> > 1796370.65838001,663218.736835661 1796370.52787101,663242.124446399 
> > 1796399.44346247,663248.737676265 1796406.19872337,663256.504198503 
> > 1796411.58848138,663265.146380576 1796415.42006697,663274.355287429 
> > 1796417.55651112,663283.801725107 1796417.92144165,663293.148008554 
> > 1796416.50181325,663302.060032965 1796413.34837386,663310.219217141 
> > 1796408.57385057,663317.333891921 1796402.34891989,663323.14972658 
> > 1796394.89610658,663327.45882048 1796386.4818289,663330.10713496 
> > 1796377.40687494,663330.999999811 1796367.99565018,663243.999999811 
> > 796326.995650178,663243.038468287 796317.241484331,663240.192519963 
> > 796307.862312066,663235.571516999 796299.218549815,663229.353032144 
> > 796291.642354176,663221.776025092 796285.424858027,663213.131659899 
> > 796280.804983066,663203.752116332 796277.960258697,663193.997825094 
> > 796277.000000047,663184.243617431 796277.96110728,663174.86432138 
> > 796280.806647624,663166.220358132 796285.427274594,663158.643892007 
> > 796291.645429891,663152.426066276 796299.222166486,663147.805815305 
> > 796307.866330715,663144.960682944 796317.245750531,663144 
> > 796326.999999991,663144 796327))
> >
> > Sorry no, pretty graphic, but the start and end points do match and 
> > they appear to be 50 units west of the start of the orginal 
> polyline.
> >
> > Hope this helps,
> >    -Steve
> >
> >
> >
> > Pierre GIRAUD wrote:
> > > Hello,
> > >
> > > I probably found a tiny issue in the buffer computation 
> on a POYGON 
> > > shape.
> > >
> > > Using Mapserver geos implementation, I fell on a curious 
> behaviour 
> > > of the buffer compuation (see attached image). To 
> reproduce the bug, 
> > > I tried a similar request in PostGIS, and obtained the 
> same result. 
> > > So I suppose this is a GEOS library issue.
> > >
> > > psql -d database -c "SELECT 
> > > astext(buffer(geometryfromtext('POLYGON((663194 796327,663281 
> > > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));"
> > >
> > > Do I have to fill in a bug ?
> > >
> > > Regards
> > >
> > > Pierre GIRAUD
> > >
> > >
> > > 
> --------------------------------------------------------------------
> > > ----
> > >
> > >
> > > 
> --------------------------------------------------------------------
> > > ----
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: badBuffer.png
Type: image/png
Size: 17262 bytes
Desc: badBuffer.png
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060309/196432dd/badBuffer.png
From john.c.cartwright at comcast.net  Fri Mar 10 00:19:33 2006
From: john.c.cartwright at comcast.net (John Cartwright)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] WKTReader and python bindings
Message-ID: <5D7FBA76-E39E-418E-9C9C-E71595109B51@comcast.net>

Hello All,

I'm using the python bindings for version 2.2.1 and am surprised to  
find that while

gf = geos.GeometryFactory()
reader = geos.WKTReader(gf)
reader.read(wkt)

works fine, the code below segfaults.

reader = geos.WKTReader(geos.GeometryFactory())
geom = reader.read(wkt)

I would have thought the two code snippets would behave identically -  
can someone explain why not?

Thanks!

-- john


From hobu at iastate.edu  Fri Mar 10 00:24:06 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] WKTReader and python bindings
In-Reply-To: <5D7FBA76-E39E-418E-9C9C-E71595109B51@comcast.net>
References: <5D7FBA76-E39E-418E-9C9C-E71595109B51@comcast.net>
Message-ID: <p06200704c036bd61af99@[192.168.11.4]>

John,

SWIG's __del__ implementation is biting you here.  In the second 
example, the geos.GeometryFactory() goes out of scope and a reference 
isn't kept alive by Python.  The GDAL guys tease me by calling this 
incantination a "hobuism" because I like to chain things together 
like this in Python (that's what it's for, right :)

My only fix for this in the 2.2 series was to go through the geos.py 
and comment out all of the __del__ implementations and let it leak.

Howard

At 10:19 PM -0700 3/9/06, John Cartwright wrote:
>Hello All,
>
>I'm using the python bindings for version 2.2.1 and am surprised to 
>find that while
>
>gf = geos.GeometryFactory()
>reader = geos.WKTReader(gf)
>reader.read(wkt)
>
>works fine, the code below segfaults.
>
>reader = geos.WKTReader(geos.GeometryFactory())
>geom = reader.read(wkt)
>
>I would have thought the two code snippets would behave identically 
>- can someone explain why not?
>
>Thanks!
>
>-- john
>
>_______________________________________________
>geos-devel mailing list
>geos-devel@geos.refractions.net
>http://geos.refractions.net/mailman/listinfo/geos-devel


From john.c.cartwright at comcast.net  Fri Mar 10 00:27:59 2006
From: john.c.cartwright at comcast.net (John Cartwright)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] WKTReader and python bindings
In-Reply-To: <p06200704c036bd61af99@[192.168.11.4]>
References: <5D7FBA76-E39E-418E-9C9C-E71595109B51@comcast.net>
	<p06200704c036bd61af99@[192.168.11.4]>
Message-ID: <AC31BA66-EAEC-4B2A-ADBB-DE892EA45AA1@comcast.net>

Whoa - that was a fast response!  Thanks for the explanation Howard.

-- john

On Mar 9, 2006, at 10:24 PM, Howard Butler wrote:

> John,
>
> SWIG's __del__ implementation is biting you here.  In the second  
> example, the geos.GeometryFactory() goes out of scope and a  
> reference isn't kept alive by Python.  The GDAL guys tease me by  
> calling this incantination a "hobuism" because I like to chain  
> things together like this in Python (that's what it's for, right :)
>
> My only fix for this in the 2.2 series was to go through the  
> geos.py and comment out all of the __del__ implementations and let  
> it leak.
>
> Howard
>
> At 10:19 PM -0700 3/9/06, John Cartwright wrote:
>> Hello All,
>>
>> I'm using the python bindings for version 2.2.1 and am surprised  
>> to find that while
>>
>> gf = geos.GeometryFactory()
>> reader = geos.WKTReader(gf)
>> reader.read(wkt)
>>
>> works fine, the code below segfaults.
>>
>> reader = geos.WKTReader(geos.GeometryFactory())
>> geom = reader.read(wkt)
>>
>> I would have thought the two code snippets would behave  
>> identically - can someone explain why not?
>>
>> Thanks!
>>
>> -- john
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From ari.jolma at tkk.fi  Fri Mar 10 04:41:05 2006
From: ari.jolma at tkk.fi (Ari Jolma)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] WKTReader and python bindings
In-Reply-To: <p06200704c036bd61af99@[192.168.11.4]>
References: <5D7FBA76-E39E-418E-9C9C-E71595109B51@comcast.net>
	<p06200704c036bd61af99@[192.168.11.4]>
Message-ID: <441149B1.20705@tkk.fi>

Howard Butler kirjoitti:
> John,
> 
> SWIG's __del__ implementation is biting you here.  In the second
> example, the geos.GeometryFactory() goes out of scope and a reference
> isn't kept alive by Python.  The GDAL guys tease me by calling this
> incantination a "hobuism" because I like to chain things together like
> this in Python (that's what it's for, right :)


I've been looking into adding Perl to the swigged GEOS interfaces (the
CVS code did not compile last time I tried so I postponed submitting my
code a bit). I'm definitely for allowing hobuisms in scripting
languages. I'm a bit disappointed we haven't been able to allow hobuisms
in GDAL.

Ari


> 
> My only fix for this in the 2.2 series was to go through the geos.py and
> comment out all of the __del__ implementations and let it leak.
> 
> Howard
> 
> At 10:19 PM -0700 3/9/06, John Cartwright wrote:
>> Hello All,
>>
>> I'm using the python bindings for version 2.2.1 and am surprised to
>> find that while
>>
>> gf = geos.GeometryFactory()
>> reader = geos.WKTReader(gf)
>> reader.read(wkt)
>>
>> works fine, the code below segfaults.
>>
>> reader = geos.WKTReader(geos.GeometryFactory())
>> geom = reader.read(wkt)
>>
>> I would have thought the two code snippets would behave identically -
>> can someone explain why not?
>>
>> Thanks!
>>
>> -- john
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 
Prof. Ari Jolma
Kartografia ja Geoinformatiikka / Cartography and Geoinformatics
Teknillinen Korkeakoulu / Helsinki University of Technology
tel: +358 9 451 3886 address: POBox 1200, 02015 TKK, Finland
Email: ari.jolma at tkk.fi URL: http://www.tkk.fi/~jolma

From bluecarto at gmail.com  Fri Mar 10 04:47:13 2006
From: bluecarto at gmail.com (Pierre GIRAUD)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] truncated buffer result
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D8BF@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D8BF@venus.VividSolutions.com>
Message-ID: <d50f50e60603100147k3fa45c45ud00254ecfae8327d@mail.gmail.com>

Hum, I didn't check that because it wasn't expected for those data.

I feel embarrassed because issimple on this geometry returns true.

SELECT  issimple(geometryfromtext('POLYGON((663194 1796327,663281
1796368,663226 1796300,663194 1796327.1,663194 1796327))'));

Regards

On 3/9/06, Martin Davis <mbdavis@vividsolutions.com> wrote:
> The odd buffer result is because the input polygon is invalid
> (self-intersection at (663194.0947744681, 1796327.0446638297) - see
> attached image).
>
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
>
>
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
> > Pierre GIRAUD
> > Sent: March 9, 2006 6:39 AM
> > To: GEOS Development List
> > Subject: Re: [geos-devel] truncated buffer result
> >
> >
> > Sorry there was a typo :
> >
> > SELECT  astext(buffer(geometryfromtext('POLYGON((663194
> > 1796327,663281 1796368,663226 1796300,663194 1796327.1,663194
> > 1796327))'), 50));
> >
> > The error was the first point didn't match the first one :
> > missing "1" ( 796327 -> 1796327).
> >
> > I also just tested in an upgraded postgis : POSTGIS="1.1.1"
> > GEOS="2.2.1" PROJ="Rel. 4.4.9, 29 Oct 2004" USE_STATS
> >
> > Here is the response :
> >
> > POLYGON((663193.969722321 1796327.06424776,663172.685114959
> > 1796372.22914631,663259.685114959
> > 1796413.22914631,663268.718916272
> > 1796416.46828842,663278.205160608
> > 1796417.92182762,663287.794368624
> > 1796417.53621458,663297.133267731
> > 1796415.32565554,663305.877806879
> > 1796411.37158891,663313.705831622
> > 1796405.81968506,663320.328952494
> > 1796398.87447968,663325.503169464
> > 1796390.79183862,663329.037861049
> > 1796381.86953156,663330.802806939
> > 1796372.43626205,663330.732985393
> > 1796362.83955778,663328.830968681
> > 1796353.43296753,663325.166828321
> > 1796344.56303612,663319.875553601
> > 1796336.55653753,663264.875553601
> > 1796268.55653753,663257.885682593
> > 1796261.48632391,663249.635099941
> > 1796255.93888278,663240.4500212
> > 1796252.13355155,663230.693610484
> > 1796250.22078726,663220.751621512
> > 1796250.27621773,663211.017145485
> > 1796252.29765131,663201.875068854
> > 1796256.20516358,663193.686855497
> > 1796261.84425741,663161.686855497 1796288.94425741,663193.969722321
> > 1796327.06424776))
> >
> > I'll fill a bug.
> >
> > On 3/9/06, Stephen Woodbridge <woodbri@swoodbridge.com> wrote:
> > > I just tried this on "POSTGIS="1.1.1" GEOS="2.2.1-CAPI-1.0.1"
> > > USE_STATS"
> > >
> > > and got "ERROR:  geometry contains non-closed rings"
> > >
> > > SELECT
> > > astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
> > > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));
> > >                                                 ^^^^^^^
> > >
> > > Notice the Y value of the last point has an extra leading "1", if I
> > > remove that I get:
> > >
> > > POLYGON((663144 796327,663144 1796327.1,663144.894659621
> > > 1796336.51623843,663147.54662185 1796345.59550374,663151.860982546
> > > 1796354.01288182,663157.683346337 1796361.46714516,663164.805351871
> > > 1796367.69153262,663172.972128319 1796372.46329587,663181.891416275
> > > 1796375.61167076,663191.244026668 1796377.02398833,663200.695263383
> > > 1796376.64970684,663209.906900826 1796374.50222048,663218.549287795
> > > 1796370.65838001,663218.736835661 1796370.52787101,663242.124446399
> > > 1796399.44346247,663248.737676265 1796406.19872337,663256.504198503
> > > 1796411.58848138,663265.146380576 1796415.42006697,663274.355287429
> > > 1796417.55651112,663283.801725107 1796417.92144165,663293.148008554
> > > 1796416.50181325,663302.060032965 1796413.34837386,663310.219217141
> > > 1796408.57385057,663317.333891921 1796402.34891989,663323.14972658
> > > 1796394.89610658,663327.45882048 1796386.4818289,663330.10713496
> > > 1796377.40687494,663330.999999811 1796367.99565018,663243.999999811
> > > 796326.995650178,663243.038468287 796317.241484331,663240.192519963
> > > 796307.862312066,663235.571516999 796299.218549815,663229.353032144
> > > 796291.642354176,663221.776025092 796285.424858027,663213.131659899
> > > 796280.804983066,663203.752116332 796277.960258697,663193.997825094
> > > 796277.000000047,663184.243617431 796277.96110728,663174.86432138
> > > 796280.806647624,663166.220358132 796285.427274594,663158.643892007
> > > 796291.645429891,663152.426066276 796299.222166486,663147.805815305
> > > 796307.866330715,663144.960682944 796317.245750531,663144
> > > 796326.999999991,663144 796327))
> > >
> > > Sorry no, pretty graphic, but the start and end points do match and
> > > they appear to be 50 units west of the start of the orginal
> > polyline.
> > >
> > > Hope this helps,
> > >    -Steve
> > >
> > >
> > >
> > > Pierre GIRAUD wrote:
> > > > Hello,
> > > >
> > > > I probably found a tiny issue in the buffer computation
> > on a POYGON
> > > > shape.
> > > >
> > > > Using Mapserver geos implementation, I fell on a curious
> > behaviour
> > > > of the buffer compuation (see attached image). To
> > reproduce the bug,
> > > > I tried a similar request in PostGIS, and obtained the
> > same result.
> > > > So I suppose this is a GEOS library issue.
> > > >
> > > > psql -d database -c "SELECT
> > > > astext(buffer(geometryfromtext('POLYGON((663194 796327,663281
> > > > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'), 50));"
> > > >
> > > > Do I have to fill in a bug ?
> > > >
> > > > Regards
> > > >
> > > > Pierre GIRAUD
> > > >
> > > >
> > > >
> > --------------------------------------------------------------------
> > > > ----
> > > >
> > > >
> > > >
> > --------------------------------------------------------------------
> > > > ----
> > > >
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
>
>

From strk at refractions.net  Fri Mar 10 06:14:14 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] truncated buffer result
In-Reply-To: <d50f50e60603100147k3fa45c45ud00254ecfae8327d@mail.gmail.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D8BF@venus.VividSolutions.com>
	<d50f50e60603100147k3fa45c45ud00254ecfae8327d@mail.gmail.com>
Message-ID: <20060310111414.GB44071@keybit.net>

On Fri, Mar 10, 2006 at 10:47:13AM +0100, Pierre GIRAUD wrote:
> Hum, I didn't check that because it wasn't expected for those data.
> 
> I feel embarrassed because issimple on this geometry returns true.
> 
> SELECT  issimple(geometryfromtext('POLYGON((663194 1796327,663281
> 1796368,663226 1796300,663194 1796327.1,663194 1796327))'));

You should use isvalid() instead.
--strk;

From bluecarto at gmail.com  Fri Mar 10 06:49:09 2006
From: bluecarto at gmail.com (Pierre GIRAUD)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] truncated buffer result
In-Reply-To: <20060310111414.GB44071@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D8BF@venus.VividSolutions.com>
	<d50f50e60603100147k3fa45c45ud00254ecfae8327d@mail.gmail.com>
	<20060310111414.GB44071@keybit.net>
Message-ID: <d50f50e60603100349raabffaaqeaae76756658f482@mail.gmail.com>

Hum it works.

Note : the documentation doesn't match ?

----------
IsSimple(geometry)

    Returns 1 (TRUE) if this Geometry has no anomalous geometric
points, such as self intersection or self tangency.

    Performed by the GEOS module

    OGC SPEC s2.1.1.1
----------

On 3/10/06, strk@refractions.net <strk@refractions.net> wrote:
> On Fri, Mar 10, 2006 at 10:47:13AM +0100, Pierre GIRAUD wrote:
> > Hum, I didn't check that because it wasn't expected for those data.
> >
> > I feel embarrassed because issimple on this geometry returns true.
> >
> > SELECT  issimple(geometryfromtext('POLYGON((663194 1796327,663281
> > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'));
>
> You should use isvalid() instead.
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

From mbdavis at VividSolutions.com  Fri Mar 10 11:32:58 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] truncated buffer result
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D8C4@venus.VividSolutions.com>

The documentation & isSimple method assumes a valid geometry as input
(like all JTS methods).   Given this, Polygon.isSimple always returns
true.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Pierre GIRAUD
> Sent: March 10, 2006 3:49 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] truncated buffer result
> 
> 
> Hum it works.
> 
> Note : the documentation doesn't match ?
> 
> ----------
> IsSimple(geometry)
> 
>     Returns 1 (TRUE) if this Geometry has no anomalous 
> geometric points, such as self intersection or self tangency.
> 
>     Performed by the GEOS module
> 
>     OGC SPEC s2.1.1.1
> ----------
> 
> On 3/10/06, strk@refractions.net <strk@refractions.net> wrote:
> > On Fri, Mar 10, 2006 at 10:47:13AM +0100, Pierre GIRAUD wrote:
> > > Hum, I didn't check that because it wasn't expected for 
> those data.
> > >
> > > I feel embarrassed because issimple on this geometry returns true.
> > >
> > > SELECT  issimple(geometryfromtext('POLYGON((663194 1796327,663281 
> > > 1796368,663226 1796300,663194 1796327.1,663194 1796327))'));
> >
> > You should use isvalid() instead.
> > --strk;
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mateusz at loskot.net  Fri Mar 10 11:42:05 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] File names
Message-ID: <4411AC5D.4010300@loskot.net>

Hi,

What do you think about making sources file names consistent?
I'd suggest two rename them to lower-case, no camel-case or so.
Now, there is no consistent rule so some fiels are named with CameCase, 
other as camelCaseWithFirstLetterLowerCase, yet another are written all 
lowercase.

What do you think about that?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From pramsey at refractions.net  Fri Mar 10 12:35:40 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] File names
In-Reply-To: <4411AC5D.4010300@loskot.net>
References: <4411AC5D.4010300@loskot.net>
Message-ID: <0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>

Change for changes sake? :)  We could lint all the files too, while  
we are at it :)
I'll bow to the will of the developers though... this is something  
best done at the archive level, I believe, since we are in CVS not  
SVN. Hey, speaking of disruptive change, how about an SVN archive :)

P

On 10-Mar-06, at 8:42 AM, Mateusz ?oskot wrote:

> What do you think about making sources file names consistent?
> I'd suggest two rename them to lower-case, no camel-case or so.
> Now, there is no consistent rule so some fiels are named with  
> CameCase, other as camelCaseWithFirstLetterLowerCase, yet another  
> are written all lowercase.
>
> What do you think about that?


From hobu at iastate.edu  Fri Mar 10 12:48:53 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] File names
In-Reply-To: <0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
References: <4411AC5D.4010300@loskot.net>
	<0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
Message-ID: <6.2.3.4.2.20060310114818.028ec8b8@hobu.mail.iastate.edu>

+1 for SVN.  Put it all in SVN and *then* rename it

At 11:35 AM 3/10/2006, Paul Ramsey wrote:
>Change for changes sake? :)  We could lint all the files too, while
>we are at it :)
>I'll bow to the will of the developers though... this is something
>best done at the archive level, I believe, since we are in CVS not
>SVN. Hey, speaking of disruptive change, how about an SVN archive :)
>
>P
>
>On 10-Mar-06, at 8:42 AM, Mateusz ??oskot wrote:
>
>>What do you think about making sources file names consistent?
>>I'd suggest two rename them to lower-case, no camel-case or so.
>>Now, there is no consistent rule so some fiels are named with
>>CameCase, other as camelCaseWithFirstLetterLowerCase, yet another
>>are written all lowercase.
>>
>>What do you think about that?
>
>_______________________________________________
>geos-devel mailing list
>geos-devel@geos.refractions.net
>http://geos.refractions.net/mailman/listinfo/geos-devel


From cfis at interserv.com  Fri Mar 10 12:54:00 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] WKTReader and python bindings
In-Reply-To: <441149B1.20705@tkk.fi>
References: <5D7FBA76-E39E-418E-9C9C-E71595109B51@comcast.net>	<p06200704c036bd61af99@[192.168.11.4]>
	<441149B1.20705@tkk.fi>
Message-ID: <4411BD38.8050303@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060310/4728dcee/smime.bin
From mateusz at loskot.net  Fri Mar 10 13:42:03 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] File names
In-Reply-To: <0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
References: <4411AC5D.4010300@loskot.net>
	<0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
Message-ID: <4411C87B.4040703@loskot.net>

Paul Ramsey wrote:
> Change for changes sake? :)

I think it's a good time to make big changes, but necessary for easier
maintenance in future.

Why?
- GEOS 3.0.0 will very likely break backward compatibility regarding
C++ API
- currently, strk commits pretty big changes
- currently, GEOS source code is being refactored seriously
- GEOS 3.0.0 is not released yet, so changes are possible
- it's better to release big amount of changes at once than release
them in smaller chuncks in time. Especially that every such chunk is
going to break backward compatibility, so there is no difference for
users: once or in pieces, but once sounds better for developers ;-)

> We could lint all the files too, while we are at it :)

You have my vote.
I've also called to build GEOS with -ansi and -pedantic switches of
GCC on.
Currently, I have to work using VC++ 8.0 because company I work for
(Taxus SI Ltd.) is going to use GEOS on Windows.
So, I'm trying to help strk in refactoring and bug fixing job to get
stable GEOS as fast as possible.
And latest VC++ 8.0 seems to be quite more restrictive about ISO C++ by
default than GCC. Example: strk repored he does not get much warnings
with -Wall switch on, but I get about 500 warnings using /W3 (from /W1
to /W4) flag. Every warning is a potential bug, obviously.

So, I think lint would help us much to find potentially unsafe
constructions.

The same about Unit Tests. I started to incorporated Boost UTF library.
I hope I'll finish JTS unit tests ported to C++/Boost UTF this weekend.
They are extremely helpful.
Why?
After I created two very simple tests: for Envelope class and for
CGAlgorithms I found unsafe code and - before an hour - serious memory
leaks (already fixed and I'll send patch tonight).
I have not to do anything more than just run those two tests and analyze
output :-)
So, I put big hope in those test to help us much.

> I'll bow to the will of the developers though...

Me to. I'm not a GEOS developer but just a freelance contributor so my
word certainly may be not taken under consideration and no problem about
that. But I hope I'm doing nothing wrong with sharing my opinion and
trigger a little dicussion :-)))

 > this is something
> best done at the archive level, I believe, since we are in CVS not 
> SVN. Hey, speaking of disruptive change, how about an SVN archive :)

I'd love to see GEOS controlled by SVN.
You have my vote!

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sat Mar 11 08:40:18 2006
From: mateusz at loskot.net (Mateusz =?iso-8859-2?Q?=A3oskot?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
Message-ID: <57153.127.0.0.1.1142084418.squirrel@loskot.net>

Hi,

Sandro, this post is related to our chat on the #postgis in Friday.

I had to fix Unit Tests to be able to build & run them using Boost 1.33.
Usually, I use latest Boost CVS, currently 1.34 so there were some changes
required.

The only change I had to make is to change version

// for Boost 1.34
#define BOOST_TEST_MAIN
#include <boost/test/unit_test.hpp>

to read

// for Boost 1.33
#define BOOST_AUTO_TEST_MAIN
#include <boost/test/auto_unit_test.hpp>

So, in order to enable users to use older and newer versions of Boost
I suppose there may be some #ifdef's required.

In the meantime, I attached unit.tar.gz with fixed envelope_class_test.cpp
file and some small fixes (please, review them) in Makefiles

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: unit.tar.gz
Type: application/x-gzip
Size: 13120 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060311/53539852/unit.tar.gz
From mateusz at loskot.net  Sat Mar 11 10:02:14 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
Message-ID: <4412E676.70903@loskot.net>

Mateusz ?oskot wrote:
> The only change I had to make is to change version
> 
> // for Boost 1.34
> #define BOOST_TEST_MAIN
> #include <boost/test/unit_test.hpp>
> 
> to read
> 
> // for Boost 1.33
> #define BOOST_AUTO_TEST_MAIN
> #include <boost/test/auto_unit_test.hpp>
> 
> So, in order to enable users to use older and newer versions of Boost
> I suppose there may be some #ifdef's required.

Hi,

I've just tested the version for Boost 1.33 above with Boost 1.34 (CVS) 
and it's working. Does mean the header
#include <boost/test/auto_unit_test.hpp>
is present in 1.34 and compatible, so no #ifdef's are required so far.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Sat Mar 11 12:28:39 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] SVN
In-Reply-To: <0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
References: <4411AC5D.4010300@loskot.net>
	<0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
Message-ID: <20060311172839.GF47999@keybit.net>

On Fri, Mar 10, 2006 at 09:35:40AM -0800, Paul Ramsey wrote:
> Change for changes sake? :)  We could lint all the files too, while  
> we are at it :)
> I'll bow to the will of the developers though... this is something  
> best done at the archive level, I believe, since we are in CVS not  
> SVN. Hey, speaking of disruptive change, how about an SVN archive :)

As far as the learning curve won't be too long I'm ok with SVN
(comments on this?)

--strk;




From mateusz at loskot.net  Sat Mar 11 13:07:23 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] SVN
In-Reply-To: <20060311172839.GF47999@keybit.net>
References: <4411AC5D.4010300@loskot.net>	<0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
	<20060311172839.GF47999@keybit.net>
Message-ID: <441311DB.5090105@loskot.net>

strk@refractions.net wrote:
> On Fri, Mar 10, 2006 at 09:35:40AM -0800, Paul Ramsey wrote:
> 
>>Change for changes sake? :)  We could lint all the files too, while  
>>we are at it :)
>>I'll bow to the will of the developers though... this is something  
>>best done at the archive level, I believe, since we are in CVS not  
>>SVN. Hey, speaking of disruptive change, how about an SVN archive :)
> 
> 
> As far as the learning curve won't be too long I'm ok with SVN
> (comments on this?)

Hi strk,
 From my experience, I can say curve of learning SVN is really
short and flat :-)

Here you have an excelent free book:
http://svnbook.red-bean.com/

If I could suggest what to read from this book, here it is:

First, what's Subversion
http://svnbook.red-bean.com/nightly/en/svn.intro.html#svn.intro.whatis

A Quick Start
http://svnbook.red-bean.com/nightly/en/svn.intro.quickstart.html

About working copies and revisions idea:
http://svnbook.red-bean.com/nightly/en/svn.basic.in-action.html

Finally, Basic Work Cycle:
http://svnbook.red-bean.com/nightly/en/svn.tour.cycle.html

This definitely is enough to understand SVN and start to work with it.

Next, more advanced topic is tags and branches:
http://svnbook.red-bean.com/nightly/en/svn.branchmerge.html


Here you can get tiny but comparative look at CVS and SVN
(and other RCS's):
http://better-scm.berlios.de/comparison/comparison.html

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Sat Mar 11 13:34:56 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] FileNames + Roadmap
In-Reply-To: <4411C87B.4040703@loskot.net>
References: <4411AC5D.4010300@loskot.net>
	<0466D58C-685A-4E2A-91DB-9BBF0297E0BA@refractions.net>
	<4411C87B.4040703@loskot.net>
Message-ID: <20060311183456.GG47999@keybit.net>

On Fri, Mar 10, 2006 at 07:42:03PM +0100, Mateusz ??oskot wrote:
> Paul Ramsey wrote:
> >Change for changes sake? :)
> 
> I think it's a good time to make big changes, but necessary for easier
> maintenance in future.
> 
> Why?
> - GEOS 3.0.0 will very likely break backward compatibility regarding
> C++ API

Already had, given the huge size of it (the C++ API).
Reducing it is the problem of highest priority if we want
to get a 'maintained' C++ API back.
I virtually dropped it intrudicing the C-API, altought I
still try to keep compatible the subset of the API which
was the only one intentionally documented in Doxygen output
(Geometry, CoordinateSequence, GeometryFactory, GEOSException).

> - currently, strk commits pretty big changes

The *big* changes are basically namespaces additions and headers split.
The former (namespaces addition) is aimed at getting closer
to JTS and possibly includes classes/filename renaming (see below).
The latter (headers split) is aimed at reducing build times,
better documenting the code and opening the road to a reduced
C++ API (by only installing a selected subset of them).

> - currently, GEOS source code is being refactored seriously
> - GEOS 3.0.0 is not released yet, so changes are possible
> - it's better to release big amount of changes at once than release
> them in smaller chuncks in time. Especially that every such chunk is
> going to break backward compatibility, so there is no difference for
> users: once or in pieces, but once sounds better for developers ;-)

The C-API is here for exactly this purpose: allowing us to
spread the refactoring process over multiple releases w/out C-API
users noticing it (yes, C++ users will suffer from this, but
GEOS-3.0.0 is already pending for a too long time).

> Currently, I have to work using VC++ 8.0 because company I work for
> (Taxus SI Ltd.) is going to use GEOS on Windows.
> So, I'm trying to help strk in refactoring and bug fixing job to get
> stable GEOS as fast as possible.

Your help is highly appreciated :)

> >I'll bow to the will of the developers though...
> 
> Me to. I'm not a GEOS developer but just a freelance contributor so my
> word certainly may be not taken under consideration and no problem about
> that. But I hope I'm doing nothing wrong with sharing my opinion and
> trigger a little dicussion :-)))

About FileNames, most cases of camelWithInitialLowercase
are due to name clashes between classes in different namespaces.
For example, in JTS you have multiple Node classes.
In GEOS these have been remaned to Node, planarNode etc.
We also have PlanarGraph and planarPlanarGraph.
Isn't it horrible ?

By introducing additional namespaces we would now be able
to rename those classes and let the names resolver find
correct one (by using namespace directives or explicit qualification).

I already provided some typedefs (typedef planarPlanarGraph PlanarGraph
in namespace planargraph, for example). And I find it much more cleaner.

This way C++ api users won't suffer much for the change, and I think
it's worth reducing the troubles for them :)

I'd like to actually rename the classes instead and provide typedefs
for backward compatibility. This will help transitions (for example
JTS seems to be going to drop what we call PlanarGraph and keep
using what we call planarPlanarGraph. I'd hate to have a
planarPlanarGraph  w/out even a PlanarGraph defined!.

Similar cases are in index/quadtree.
QuadTreeKey, QuadTreeRoot and who knows which other classes are
actually ported by quadtree::Key, quadtree::Root and the like.
In this case we don't have the camelLowerCased problem but
still a non-direct mapping to JTS names.

I think it's important we get as close as possible to JTS
as we want to maintain correctness and improve performance.

For the correctness part we need to work in strict contact
with JTS developers (we're doing already, with pretty much
success).

For the improvement part we'll surely have to change
implementations, but layout would probably do fine.

So to summarize, roadmap could be:

	- SVN (would help step 2, but we can do w/out)

	- headers split with classes/filenames rename
	  when appropriate (JTS-driven)

	- Unit testing (helpful to know
	  how to name them, so worth doing after/togheter with
	  renames)

	- incremental refactoring during all steps
	  (iterators, templates, standard algorithms, reduction
	  of virtual funx calls, to name a few)

--strk;

From mateusz at loskot.net  Sat Mar 11 14:14:35 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
Message-ID: <4413219B.1020307@loskot.net>

Hi,

Could anyone explain me the idea behind Unload class and its Release 
function?
I'm also interested in the idea behind this static member:
const GeometryFactory* Geometry::INTERNAL_GEOMETRY_FACTORY;

What semantic exactly those entities represent?
What is the lifetime of Geometry::INTERNAL_GEOMETRY_FACTORY;

IMHO geos::io::Unload::Release() may confuse users and they can use it 
in wrong way pretty easily.

Let's consider small example:

Here is a file test.cpp and in that file I have two
functions: foo and bar.
Inside each function I have some automatic objects: local 
GeometryFactory and PrecisionModel and I also create new geometries.
Nothing comes in and goes out to/from those functions.

// File: test.cpp

#include <geos/unload.h>
#include <geos/geom/Coordinate.h>
#include <geos/geom/Envelope.h>
#include <geos/geom/GeometryFactory.h>
#include <geos/geom/Point.h>
#include <geos/geom/PrecisionModel.h>

void run()
{
    foo();
    bar(); <--- BANG!
}

void foo()
{
     geos::geom::PrecisionModel pm(1);
     geos::geom::GeometryFactory gf(&pm, 0);

     geos::geom::Coordinate c1(5, 6);
     geos::geom::Point* p1 = gf.createPoint(c1);
     geos::geom::Geometry* e1 = p1->getEnvelope();

     // Do something else
     // ...

     // MEMORY CLEAN UP
     delete e1;
     delete p1;
     geos::io::Unload::Release(); // <----------- HERE IS OK
}

void bar()
{
     geos::geom::PrecisionModel pm(1);
     geos::geom::GeometryFactory gf(&pm, 0);

     geos::geom::Coordinate c1(5, 6);
     geos::geom::Point* p1 = gf.createPoint(c1);
     geos::geom::Geometry* e1 = p1->getEnvelope();

     // Do something else
     // ...

     // MEMORY CLEAN UP
     delete e1;
     delete p1;
     geos::io::Unload::Release(); // <----------- BANG! BANG!
}

Simply, it seems Unload::Release() can not be called twice in the same 
module/program. Is this correct assumption and behaviour?

It's not clear for my why to not to hide clean up operations inside 
destructors or why not to make some of "long living single objects" as 
singletons that are safe regarding memory management?
If relations are more complex and the number of global objects that we 
need to release is not known, then I'd suggest to provide a kind of 
arena idiom or smart pointer to get garbage collected properly.

Please, review current situation.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Sat Mar 11 14:19:39 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <4413219B.1020307@loskot.net>
References: <4413219B.1020307@loskot.net>
Message-ID: <20060311191939.GJ47999@keybit.net>

Geometry::INTERNAL_GEOMETRY_FACTORY should really
be a singleton, probably GeometryFactory::getInternalInstance()

Unload class has been introduced to procrastinate these kind
of cleanups :) Your assumption is correct, should only be
called as *last* action of a *debuggin* module, no need
to be called by user code, it's just there to avoid false leaks
reported by memory checkers.

--strk;

On Sat, Mar 11, 2006 at 08:14:35PM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> Could anyone explain me the idea behind Unload class and its Release 
> function?
> I'm also interested in the idea behind this static member:
> const GeometryFactory* Geometry::INTERNAL_GEOMETRY_FACTORY;
> 
> What semantic exactly those entities represent?
> What is the lifetime of Geometry::INTERNAL_GEOMETRY_FACTORY;
> 
> IMHO geos::io::Unload::Release() may confuse users and they can use it 
> in wrong way pretty easily.
> 
> Let's consider small example:
> 
> Here is a file test.cpp and in that file I have two
> functions: foo and bar.
> Inside each function I have some automatic objects: local 
> GeometryFactory and PrecisionModel and I also create new geometries.
> Nothing comes in and goes out to/from those functions.
> 
> // File: test.cpp
> 
> #include <geos/unload.h>
> #include <geos/geom/Coordinate.h>
> #include <geos/geom/Envelope.h>
> #include <geos/geom/GeometryFactory.h>
> #include <geos/geom/Point.h>
> #include <geos/geom/PrecisionModel.h>
> 
> void run()
> {
>    foo();
>    bar(); <--- BANG!
> }
> 
> void foo()
> {
>     geos::geom::PrecisionModel pm(1);
>     geos::geom::GeometryFactory gf(&pm, 0);
> 
>     geos::geom::Coordinate c1(5, 6);
>     geos::geom::Point* p1 = gf.createPoint(c1);
>     geos::geom::Geometry* e1 = p1->getEnvelope();
> 
>     // Do something else
>     // ...
> 
>     // MEMORY CLEAN UP
>     delete e1;
>     delete p1;
>     geos::io::Unload::Release(); // <----------- HERE IS OK
> }
> 
> void bar()
> {
>     geos::geom::PrecisionModel pm(1);
>     geos::geom::GeometryFactory gf(&pm, 0);
> 
>     geos::geom::Coordinate c1(5, 6);
>     geos::geom::Point* p1 = gf.createPoint(c1);
>     geos::geom::Geometry* e1 = p1->getEnvelope();
> 
>     // Do something else
>     // ...
> 
>     // MEMORY CLEAN UP
>     delete e1;
>     delete p1;
>     geos::io::Unload::Release(); // <----------- BANG! BANG!
> }
> 
> Simply, it seems Unload::Release() can not be called twice in the same 
> module/program. Is this correct assumption and behaviour?
> 
> It's not clear for my why to not to hide clean up operations inside 
> destructors or why not to make some of "long living single objects" as 
> singletons that are safe regarding memory management?
> If relations are more complex and the number of global objects that we 
> need to release is not known, then I'd suggest to provide a kind of 
> arena idiom or smart pointer to get garbage collected properly.
> 
> Please, review current situation.
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Sat Mar 11 15:02:42 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <20060311191939.GJ47999@keybit.net>
References: <4413219B.1020307@loskot.net> <20060311191939.GJ47999@keybit.net>
Message-ID: <44132CE2.1020308@loskot.net>

strk@refractions.net wrote:
> Geometry::INTERNAL_GEOMETRY_FACTORY should really
> be a singleton, probably GeometryFactory::getInternalInstance()

Is this internal factory used at all?
First, I see the only function using it is marked as deprecated:

headers/geos/geom/Geometry.h
/// @deprecated
//Geometry* toInternalGeometry(const Geometry *g) const;

/// @deprecated
//Geometry* fromInternalGeometry(const Geometry *g) const;

Second, I see it's a static data member, so it's a singleton - only one
copy shared between all instances of Geometry class.
According to my current knowledge of GEOS,
Geometry::INTERNAL_GEOMETRY_FACTORY
could be declared as a static data member but non-pointer.
Then no deletion is required

struct A;
struct B
{
static A a_; // static lifetime
}


> Unload class has been introduced to procrastinate these kind
> of cleanups :) Your assumption is correct, should only be
> called as *last* action of a *debuggin* module, no need
> to be called by user code, it's just there to avoid false leaks
> reported by memory checkers.

I understand, but this gadget causes some difficulties in Unit Tests ;-)


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net


From strk at refractions.net  Sun Mar 12 06:05:26 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <44132CE2.1020308@loskot.net>
References: <4413219B.1020307@loskot.net> <20060311191939.GJ47999@keybit.net>
	<44132CE2.1020308@loskot.net>
Message-ID: <20060312110526.GA70744@keybit.net>

static lifetime should be ok.
I dunno if it's used by client code, anyway it might 
be useful to have a 'default' factory to use instead
of having to construct (and maintain alive) a custom
one. I'd move access to it to GeometryFactory::defaultInstance()
--strk;


On Sat, Mar 11, 2006 at 09:02:42PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >Geometry::INTERNAL_GEOMETRY_FACTORY should really
> >be a singleton, probably GeometryFactory::getInternalInstance()
> 
> Is this internal factory used at all?
> First, I see the only function using it is marked as deprecated:
> 
> headers/geos/geom/Geometry.h
> /// @deprecated
> //Geometry* toInternalGeometry(const Geometry *g) const;
> 
> /// @deprecated
> //Geometry* fromInternalGeometry(const Geometry *g) const;
> 
> Second, I see it's a static data member, so it's a singleton - only one
> copy shared between all instances of Geometry class.
> According to my current knowledge of GEOS,
> Geometry::INTERNAL_GEOMETRY_FACTORY
> could be declared as a static data member but non-pointer.
> Then no deletion is required
> 
> struct A;
> struct B
> {
> static A a_; // static lifetime
> }
> 
> 
> >Unload class has been introduced to procrastinate these kind
> >of cleanups :) Your assumption is correct, should only be
> >called as *last* action of a *debuggin* module, no need
> >to be called by user code, it's just there to avoid false leaks
> >reported by memory checkers.
> 
> I understand, but this gadget causes some difficulties in Unit Tests ;-)
> 
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Sun Mar 12 06:45:31 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <20060312110526.GA70744@keybit.net>
References: <4413219B.1020307@loskot.net>
	<20060311191939.GJ47999@keybit.net>	<44132CE2.1020308@loskot.net>
	<20060312110526.GA70744@keybit.net>
Message-ID: <441409DB.9020007@loskot.net>

strk@refractions.net wrote:
> static lifetime should be ok. I dunno if it's used by client code,
> anyway it might be useful to have a 'default' factory to use instead 
> of having to construct (and maintain alive) a custom one. I'd move
> access to it to GeometryFactory::defaultInstance()

I see the idea behind default factory.
So, I'd make it a singleton, constructed on first request of its 
instance. As I understand defaultInstance() is sucha a solution.
The only problem is to properly define Singleton class.

Here is some simple proposal:

template<class T>
class Singleton
{
private:

     class InstancePtr
     {
     public:
         InstancePtr() : m_ptr(0) {}
         ~InstancePtr() { delete m_ptr; }

         T* Get()
         {
             return m_ptr;
         }

         void Set(T* p)
         {
             if(p!= 0)
             {
                 if (m_ptr != 0)
                 {
                     delete m_ptr;
                 }
                 m_ptr = p;
             }
         }

     private:

         T* m_ptr;
     };

     static InstancePtr m_instptr;

     Singleton();

     Singleton(const Singleton&);

     Singleton& operator=(const Singleton&);

public:

     static T* Instance()
     {
         if(m_instptr.Get() == 0)
         {
             m_instptr.Set(new T());
         }
         return m_instptr.Get();
     }
};

But it may be better defined using smart pointers as well.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sun Mar 12 07:42:37 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <4412E676.70903@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4412E676.70903@loskot.net>
Message-ID: <4414173D.7010100@loskot.net>

Mateusz ?oskot wrote:
> Mateusz ?oskot wrote:
> 
>> The only change I had to make is to change version
>> 
>> // for Boost 1.34 #define BOOST_TEST_MAIN #include 
>> <boost/test/unit_test.hpp>
>> 
>> to read
>> 
>> // for Boost 1.33 #define BOOST_AUTO_TEST_MAIN #include 
>> <boost/test/auto_unit_test.hpp>
>> 
>> So, in order to enable users to use older and newer versions of 
>> Boost I suppose there may be some #ifdef's required.
> 
> 
> Hi,
> 
> I've just tested the version for Boost 1.33 above with Boost 1.34 
> (CVS) and it's working. Does mean the header #include 
> <boost/test/auto_unit_test.hpp> is present in 1.34 and compatible, so
>  no #ifdef's are required so far.


Hi,

I have bad news.
Inspite of that solution above works with older and
newer Boost versions it's not recommended to use old-style
verson for Boost 1.33.

Here is a small thread in which I'm asking how to procede:

http://thread.gmane.org/gmane.comp.lib.boost.user/17409

Gennadiy does not recommend the approach I revealed as working:

No - old names are depricated. You still could use it.
But it's going to be removed in some future release.
Boost 1.34 should be out pretty soon. You may want to wait till it's out
and rely purely on new names.

Please, discuss a little how should we handle this issue?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sun Mar 12 13:28:54 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <4414173D.7010100@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4412E676.70903@loskot.net>
	<4414173D.7010100@loskot.net>
Message-ID: <44146866.8060500@loskot.net>

Mateusz ?oskot wrote:
> Mateusz ?oskot wrote:
>> Mateusz ?oskot wrote:
>> 
>>> The only change I had to make is to change version
>>> 
>>> // for Boost 1.34 #define BOOST_TEST_MAIN #include 
>>> <boost/test/unit_test.hpp>
>>> 
>>> to read
>>> 
>>> // for Boost 1.33 #define BOOST_AUTO_TEST_MAIN #include 
>>> <boost/test/auto_unit_test.hpp>
>>> 
>>> So, in order to enable users to use older and newer versions of
>>> Boost I suppose there may be some #ifdef's required.
>> 
>> 
>> I've just tested the version for Boost 1.33 above with Boost 1.34 
>> (CVS) and it's working. Does mean the header #include 
>> <boost/test/auto_unit_test.hpp> is present in 1.34 and compatible,
>> so no #ifdef's are required so far.
> 
> 
> 
> Hi,
> 
> I have bad news. Inspite of that solution above works with older and 
> newer Boost versions it's not recommended to use old-style verson for
> Boost 1.33.
> 
> Here is a small thread in which I'm asking how to procede:
> 
> http://thread.gmane.org/gmane.comp.lib.boost.user/17409
> 
> Gennadiy does not recommend the approach I revealed as working:
> 
> No - old names are depricated. You still could use it. But it's going
> to be removed in some future release. Boost 1.34 should be out pretty
> soon. You may want to wait till it's out and rely purely on new
> names.
> 
> Please, discuss a little how should we handle this issue?


Some thoughts about the problem.
May be we could provide following solution:
1. Include Boost UTF library (binary) into GEOS source tree and build
(link) tests with this library by default

2. Provide configure switch e.g. --with-own-boost
to enable user to use his own installation of boost instead of
UTF library from project tree.
Here, we should also provide checking for proper version of Boost.


Such solution would allow us to work with latest version of UTF - from
Boost 1.34 instead of legacy and incompatible with future releases -
Boost 1.33

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sun Mar 12 18:03:37 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
Message-ID: <4414A8C9.6050601@loskot.net>

Hi,

I'd like to ask you for your opinion about the issue
described in this thread.
It's very important for me, because I've had to stop portig Unit Tests
because I'd like not to do it twice.
So, please Leaders, share your ideas.

Thanks in advance

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From pramsey at refractions.net  Sun Mar 12 19:39:27 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <4414A8C9.6050601@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4414A8C9.6050601@loskot.net>
Message-ID: <78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>

The situation in general makes me wary, if Boost is going to changing  
incompatibly with some regularity.  We want to use it to reduce  
workload, and it could potentially add workload.

In the short term, can we simply wait for the 1.34 release as  
suggested?  We have gotten this far with blackbox testing, we can  
hold on for a little longer.  It would be interesting to know  
historically how often Boost has had incompatible changes.

P

On 12-Mar-06, at 3:03 PM, Mateusz ?oskot wrote:

> Hi,
>
> I'd like to ask you for your opinion about the issue
> described in this thread.
> It's very important for me, because I've had to stop portig Unit Tests
> because I'd like not to do it twice.
> So, please Leaders, share your ideas.
>
> Thanks in advance
>
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Mon Mar 13 06:05:32 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <441409DB.9020007@loskot.net>
References: <4413219B.1020307@loskot.net> <20060311191939.GJ47999@keybit.net>
	<44132CE2.1020308@loskot.net> <20060312110526.GA70744@keybit.net>
	<441409DB.9020007@loskot.net>
Message-ID: <20060313110532.GD70744@keybit.net>

On Sun, Mar 12, 2006 at 12:45:31PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >static lifetime should be ok. I dunno if it's used by client code,
> >anyway it might be useful to have a 'default' factory to use instead 
> >of having to construct (and maintain alive) a custom one. I'd move
> >access to it to GeometryFactory::defaultInstance()
> 
> I see the idea behind default factory.
> So, I'd make it a singleton, constructed on first request of its 
> instance. As I understand defaultInstance() is sucha a solution.
> The only problem is to properly define Singleton class.
> 
> Here is some simple proposal:

... mmm .. simple ? :)
How about:

class PrecisionModel { 
public:
	.....
	const PrecisionModel* defaultInstance() {
		static PrecisionModel defInstance(PrecisionModel::defaultInstance());
		return &defInstance;
	}
};

class GeometryFactory { 
public:
	.....
	const GeometryFactory* defaultInstance() {
		static GeometryFactory defInstance(PrecisionModel::defaultInstance());
		return &defInstance;
	}
};

--strk;


> 
> template<class T>
> class Singleton
> {
> private:
> 
>     class InstancePtr
>     {
>     public:
>         InstancePtr() : m_ptr(0) {}
>         ~InstancePtr() { delete m_ptr; }
> 
>         T* Get()
>         {
>             return m_ptr;
>         }
> 
>         void Set(T* p)
>         {
>             if(p!= 0)
>             {
>                 if (m_ptr != 0)
>                 {
>                     delete m_ptr;
>                 }
>                 m_ptr = p;
>             }
>         }
> 
>     private:
> 
>         T* m_ptr;
>     };
> 
>     static InstancePtr m_instptr;
> 
>     Singleton();
> 
>     Singleton(const Singleton&);
> 
>     Singleton& operator=(const Singleton&);
> 
> public:
> 
>     static T* Instance()
>     {
>         if(m_instptr.Get() == 0)
>         {
>             m_instptr.Set(new T());
>         }
>         return m_instptr.Get();
>     }
> };
> 
> But it may be better defined using smart pointers as well.
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From strk at refractions.net  Mon Mar 13 06:09:45 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
Message-ID: <20060313110945.GE70744@keybit.net>

Yep, I also feel this is going to be more complex then I imagined.
I always tried to do w/out boost exactly fearing for these kind
of problems (common when external dependencies are added).

Mateusz: how about boost-less port of the JTS unit tests instead ?

--strk;

On Sun, Mar 12, 2006 at 04:39:27PM -0800, Paul Ramsey wrote:
> The situation in general makes me wary, if Boost is going to changing  
> incompatibly with some regularity.  We want to use it to reduce  
> workload, and it could potentially add workload.
> 
> In the short term, can we simply wait for the 1.34 release as  
> suggested?  We have gotten this far with blackbox testing, we can  
> hold on for a little longer.  It would be interesting to know  
> historically how often Boost has had incompatible changes.
> 
> P
> 
> On 12-Mar-06, at 3:03 PM, Mateusz ??oskot wrote:
> 
> >Hi,
> >
> >I'd like to ask you for your opinion about the issue
> >described in this thread.
> >It's very important for me, because I've had to stop portig Unit Tests
> >because I'd like not to do it twice.
> >So, please Leaders, share your ideas.
> >
> >Thanks in advance

From mateusz at loskot.net  Mon Mar 13 06:11:12 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
Message-ID: <44155350.4070707@loskot.net>

Paul Ramsey wrote:
> The situation in general makes me wary, if Boost is going to changing
>  incompatibly with some regularity.

Yes, I also have similar thoughts.
Honestly, I'm a bit surprised that some Boost library can break 
compatibility between releases 1.33 and 1.34.
I have to discuss it with Gennadyi Rozental - the author of Boost.Test

> We want to use it to reduce 
> workload, and it could potentially add workload.

Sure

> In the short term, can we simply wait for the 1.34 release as 
> suggested?  

I'm well prepared to go on, but if there are such problems
then I can wait.
Though, I'd like to know strk's opinion.

> We have gotten this far with blackbox testing, we can
> hold on for a little longer.  It would be interesting to know
> historically how often Boost has had incompatible changes.

Yes, that's the question.
I'm going to ask Gennadyi today about this issue.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Mon Mar 13 06:17:38 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <20060313110945.GE70744@keybit.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<20060313110945.GE70744@keybit.net>
Message-ID: <441554D2.6050502@loskot.net>

strk@refractions.net wrote:
> Yep, I also feel this is going to be more complex then I imagined. I
> always tried to do w/out boost exactly fearing for these kind of
> problems (common when external dependencies are added).

Just as I said, I'm also a bit disappointed.
But in fact, Boost.Test provides most rich features from other libs I know.
May be we can wait for what Gennadyi Rozental will say about possible 
crucial changes between releases.

> Mateusz: how about boost-less port of the JTS unit tests instead ?

Yes, it's possible but I still need to have some Unit Test Framework.
So, we should go back to
http://geos.refractions.net/pipermail/geos-devel/2006-February/001788.html

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 13 06:34:47 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <441554D2.6050502@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<20060313110945.GE70744@keybit.net> <441554D2.6050502@loskot.net>
Message-ID: <20060313113447.GG70744@keybit.net>

On Mon, Mar 13, 2006 at 12:17:38PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >Yep, I also feel this is going to be more complex then I imagined. I
> >always tried to do w/out boost exactly fearing for these kind of
> >problems (common when external dependencies are added).
> 
> Just as I said, I'm also a bit disappointed.
> But in fact, Boost.Test provides most rich features from other libs I know.
> May be we can wait for what Gennadyi Rozental will say about possible 
> crucial changes between releases.
> 
> >Mateusz: how about boost-less port of the JTS unit tests instead ?
> 
> Yes, it's possible but I still need to have some Unit Test Framework.
> So, we should go back to
> http://geos.refractions.net/pipermail/geos-devel/2006-February/001788.html

Both TUT and cxxtest are headers-only, I'd pick the smallest one
to distribute togheter with GEOS.

TUT seems a good choice (20K in a single header file).

Here is an excerpt from TUT website about supported compilers,
please raise your hand if you have any concern about it:

      Supported:

      * GNU GCC 2.95
      * GNU GCC 3.x (both under unix and MinGW)
      * Borland 5.6 (Borland C++ Builder 6)
      * Intel C++ Compiler 6.x
      * Intel C++ Compiler 8.1
      * Sun Studio 9: C++ 5.6 Compiler
      * Microsoft VC7 (Microsoft VS.NET 2003 and later)
      * Sun WorkShop 6 update 2 C++ 5.3 (probably, previous versions as well)

      Unsupported:

      * Borland 5.5.x (Borland C++ Builder 5)
      * Microsoft VC6 (including SP5)
      * Microsoft VC7 (Microsoft VS.NET 2002)
      * C for AIX Compiler, Version 6
      * KAI C++ Compiler
      * Portland Group Compiler, Version 5.2-4

--strk;


From mateusz at loskot.net  Mon Mar 13 07:19:12 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <20060313110532.GD70744@keybit.net>
References: <4413219B.1020307@loskot.net>
	<20060311191939.GJ47999@keybit.net>	<44132CE2.1020308@loskot.net>
	<20060312110526.GA70744@keybit.net>	<441409DB.9020007@loskot.net>
	<20060313110532.GD70744@keybit.net>
Message-ID: <44156340.7020608@loskot.net>

strk@refractions.net wrote:
> On Sun, Mar 12, 2006 at 12:45:31PM +0100, Mateusz ??oskot wrote:
> 
>>strk@refractions.net wrote:
>>
>>>static lifetime should be ok. I dunno if it's used by client code,
>>>anyway it might be useful to have a 'default' factory to use instead 
>>>of having to construct (and maintain alive) a custom one. I'd move
>>>access to it to GeometryFactory::defaultInstance()
>>
>>I see the idea behind default factory.
>>So, I'd make it a singleton, constructed on first request of its 
>>instance. As I understand defaultInstance() is sucha a solution.
>>The only problem is to properly define Singleton class.
>>
>>Here is some simple proposal:
> 
> 
> ... mmm .. simple ? :)

IMHO it's simple and extensible.
This template class can be used to implement singleton for any type of
our classes.

> How about:
> 
> class PrecisionModel { 
> public:
> 	.....
> 	const PrecisionModel* defaultInstance() {
> 		static PrecisionModel defInstance(PrecisionModel::defaultInstance());
> 		return &defInstance;
> 	}
> };
> 
> class GeometryFactory { 
> public:
> 	.....
> 	const GeometryFactory* defaultInstance() {
> 		static GeometryFactory defInstance(PrecisionModel::defaultInstance());
> 		return &defInstance;
> 	}
> };

It's OK, but slightly different idea.
I mean, the first I gave is for global objects representation.

For less typing, I'd suggest to use a little modified version ;-)

template <typename T>
class Singleton
{
~Singleton() {}
public:
    static T* instance();

};

template <typename T>
T* Singleton<T>::instance()
{
   static T single;
   return(&single);
}


//////////////////////
// Example:
struct A
{
     friend class Singleton<A>;
     void doit() { std::cout << "DO IT\n"; }
};

int main()
{
     A* ptr = Singleton<A>::instance();
     ptr->doit();
	
     return 0;
}




Another option, I'd say recommended, is to return reference instead of 
pointer. I'm only not sure if GCC will handle it well.
I mean, if gcc can destroy object earlier, when still holding by 
reference - behaviour undefined. Though, this would be bug in gcc.

Here is example of usage with reference:

     A a = Singleton<A>::instance();
     a.doit();

     A b = Singleton<A>::instance();
     b.doit();


a and b refer to the same instance.


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net


From mateusz at loskot.net  Mon Mar 13 07:44:43 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <20060313113447.GG70744@keybit.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>	<20060313110945.GE70744@keybit.net>
	<441554D2.6050502@loskot.net> <20060313113447.GG70744@keybit.net>
Message-ID: <4415693B.8010002@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 13, 2006 at 12:17:38PM +0100, Mateusz ??oskot wrote:
>>strk@refractions.net wrote:
>>
>>>Yep, I also feel this is going to be more complex then I imagined. I
>>>always tried to do w/out boost exactly fearing for these kind of
>>>problems (common when external dependencies are added).
>>
>>Just as I said, I'm also a bit disappointed.
>>But in fact, Boost.Test provides most rich features from other libs I know.
>>May be we can wait for what Gennadyi Rozental will say about possible 
>>crucial changes between releases.
>>
>>
>>>Mateusz: how about boost-less port of the JTS unit tests instead ?
>>
>>Yes, it's possible but I still need to have some Unit Test Framework.
>>So, we should go back to
>>http://geos.refractions.net/pipermail/geos-devel/2006-February/001788.html
> 
> 
> Both TUT and cxxtest are headers-only, I'd pick the smallest one
> to distribute togheter with GEOS.
> 
> TUT seems a good choice (20K in a single header file).

Yes, TUT is the first Unit Testing tool I started to use for C++.
I like it much, simple and powerful.

> Here is an excerpt from TUT website about supported compilers,
> please raise your hand if you have any concern about it:

I vote for it.


>       Supported:
> 
>       * GNU GCC 2.95
>       * GNU GCC 3.x (both under unix and MinGW)
>       * Borland 5.6 (Borland C++ Builder 6)
>       * Intel C++ Compiler 6.x
>       * Intel C++ Compiler 8.1
>       * Sun Studio 9: C++ 5.6 Compiler
>       * Microsoft VC7 (Microsoft VS.NET 2003 and later)

This is not precise information:
VC++ from VS .NET 2003 is VC++ 7.1, but not 7 what implies 7.0
(from VS 2002).
There is huge difference between 7.0 and 7.1.

>       * Sun WorkShop 6 update 2 C++ 5.3 (probably, previous versions as well)
> 
>       Unsupported:
> 
>       * Borland 5.5.x (Borland C++ Builder 5)
>       * Microsoft VC6 (including SP5)
>       * Microsoft VC7 (Microsoft VS.NET 2002)

That's what I'm talking about, VC++ 7.0

>       * C for AIX Compiler, Version 6
>       * KAI C++ Compiler
>       * Portland Group Compiler, Version 5.2-4

I agree to move to TUT.

So, should I start?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net


From mateusz at loskot.net  Mon Mar 13 07:43:37 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <20060313110532.GD70744@keybit.net>
References: <4413219B.1020307@loskot.net>
	<20060311191939.GJ47999@keybit.net>	<44132CE2.1020308@loskot.net>
	<20060312110526.GA70744@keybit.net>	<441409DB.9020007@loskot.net>
	<20060313110532.GD70744@keybit.net>
Message-ID: <441568F9.6000600@loskot.net>

strk@refractions.net wrote:
> On Sun, Mar 12, 2006 at 12:45:31PM +0100, Mateusz ??oskot wrote:
> 
>>strk@refractions.net wrote:
>>
>>>static lifetime should be ok. I dunno if it's used by client code,
>>>anyway it might be useful to have a 'default' factory to use instead 
>>>of having to construct (and maintain alive) a custom one. I'd move
>>>access to it to GeometryFactory::defaultInstance()
>>
>>I see the idea behind default factory.
>>So, I'd make it a singleton, constructed on first request of its 
>>instance. As I understand defaultInstance() is sucha a solution.
>>The only problem is to properly define Singleton class.
>>
>>Here is some simple proposal:
> 
> 
> ... mmm .. simple ? :)
> How about:
> 

One note more, this is so called Scott Meyers' singleton.
Here is deeper explanation of possible problems.
I'd suggest to consider them too, especially to run this example:

http://www.gamedev.net/columns/gameengineering/singleton/breakmeyer.zip

Article:
http://www.gamedev.net/reference/articles/article1825.asp

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 13 07:48:32 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <44156340.7020608@loskot.net>
References: <4413219B.1020307@loskot.net> <20060311191939.GJ47999@keybit.net>
	<44132CE2.1020308@loskot.net> <20060312110526.GA70744@keybit.net>
	<441409DB.9020007@loskot.net> <20060313110532.GD70744@keybit.net>
	<44156340.7020608@loskot.net>
Message-ID: <20060313124832.GI70744@keybit.net>

On Mon, Mar 13, 2006 at 01:19:12PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >On Sun, Mar 12, 2006 at 12:45:31PM +0100, Mateusz ?
?oskot wrote:
> >
> >>strk@refractions.net wrote:
> >>
> >>>static lifetime should be ok. I dunno if it's used by client code,
> >>>anyway it might be useful to have a 'default' factory to use instead 
> >>>of having to construct (and maintain alive) a custom one. I'd move
> >>>access to it to GeometryFactory::defaultInstance()
> >>
> >>I see the idea behind default factory.
> >>So, I'd make it a singleton, constructed on first request of its 
> >>instance. As I understand defaultInstance() is sucha a solution.
> >>The only problem is to properly define Singleton class.
> >>
> >>Here is some simple proposal:
> >
> >
> >... mmm .. simple ? :)
> 
> IMHO it's simple and extensible.
> This template class can be used to implement singleton for any type of
> our classes.
> 
> >How about:
> >
> >class PrecisionModel { 
> >public:
> >	.....
> >	const PrecisionModel* defaultInstance() {
> >		static PrecisionModel 
> >		defInstance(PrecisionModel::defaultInstance());
> >		return &defInstance;
> >	}
> >};
> >
> >class GeometryFactory { 
> >public:
> >	.....
> >	const GeometryFactory* defaultInstance() {
> >		static GeometryFactory 
> >		defInstance(PrecisionModel::defaultInstance());
> >		return &defInstance;
> >	}
> >};
> 
> It's OK, but slightly different idea.
> I mean, the first I gave is for global objects representation.
> 
> For less typing, I'd suggest to use a little modified version ;-)
> 
> template <typename T>
> class Singleton
> {
> ~Singleton() {}
> public:
>    static T* instance();
> 
> };
> 
> template <typename T>
> T* Singleton<T>::instance()
> {
>   static T single;
>   return(&single);
> }

Yes, this was my idea.

> //////////////////////
> // Example:
> struct A
> {
>     friend class Singleton<A>;
>     void doit() { std::cout << "DO IT\n"; }
> };
> 
> int main()
> {
>     A* ptr = Singleton<A>::instance();

I'd like to keep doing

	A* ptr = A::instance():

template should only be known by class A.

class A {
	Singleton<A> defaultInstance;
public:
	A* getDefaultInstance() { defaultInstance.instance(); }
};

The template itself could return by ref, to make it clean.
The template users (classes that want to provide default instances)
will keep returning pointers if this is what client code expects
(we can always add a return-ref version for new code written, anyway
so far pointers are most used to signal NULLS to class taking
it - those NULL will usually trigger use of the default instance).

--strk;

From mateusz at loskot.net  Mon Mar 13 08:20:11 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <20060313124832.GI70744@keybit.net>
References: <4413219B.1020307@loskot.net>
	<20060311191939.GJ47999@keybit.net>	<44132CE2.1020308@loskot.net>
	<20060312110526.GA70744@keybit.net>	<441409DB.9020007@loskot.net>
	<20060313110532.GD70744@keybit.net>	<44156340.7020608@loskot.net>
	<20060313124832.GI70744@keybit.net>
Message-ID: <4415718B.4090202@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 13, 2006 at 01:19:12PM +0100, Mateusz ??oskot wrote:
> 
>>strk@refractions.net wrote:
>>
>>>On Sun, Mar 12, 2006 at 12:45:31PM +0100, Mateusz ???oskot wrote:
>>>
>>>
>>>>strk@refractions.net wrote:
>>>>
>>>>
>>>>>static lifetime should be ok. I dunno if it's used by client code,
>>>>>anyway it might be useful to have a 'default' factory to use instead 
>>>>>of having to construct (and maintain alive) a custom one. I'd move
>>>>>access to it to GeometryFactory::defaultInstance()
>>>>
>>>>I see the idea behind default factory.
>>>>So, I'd make it a singleton, constructed on first request of its 
>>>>instance. As I understand defaultInstance() is sucha a solution.
>>>>The only problem is to properly define Singleton class.
>>>>
>>>>Here is some simple proposal:
>>>
>>>
>>>... mmm .. simple ? :)
>>
>>IMHO it's simple and extensible.
>>This template class can be used to implement singleton for any type of
>>our classes.
>>
>>
>>>How about:
>>>
>>>class PrecisionModel { 
>>>public:
>>>	.....
>>>	const PrecisionModel* defaultInstance() {
>>>		static PrecisionModel 
>>>		defInstance(PrecisionModel::defaultInstance());
>>>		return &defInstance;
>>>	}
>>>};
>>>
>>>class GeometryFactory { 
>>>public:
>>>	.....
>>>	const GeometryFactory* defaultInstance() {
>>>		static GeometryFactory 
>>>		defInstance(PrecisionModel::defaultInstance());
>>>		return &defInstance;
>>>	}
>>>};
>>
>>It's OK, but slightly different idea.
>>I mean, the first I gave is for global objects representation.
>>
>>For less typing, I'd suggest to use a little modified version ;-)
>>
>>template <typename T>
>>class Singleton
>>{
>>~Singleton() {}
>>public:
>>   static T* instance();
>>
>>};
>>
>>template <typename T>
>>T* Singleton<T>::instance()
>>{
>>  static T single;
>>  return(&single);
>>}
> 
> 
> Yes, this was my idea.
> 
> 
>>//////////////////////
>>// Example:
>>struct A
>>{
>>    friend class Singleton<A>;
>>    void doit() { std::cout << "DO IT\n"; }
>>};
>>
>>int main()
>>{
>>    A* ptr = Singleton<A>::instance();
> 
> 
> I'd like to keep doing
> 
> 	A* ptr = A::instance():
> 
> template should only be known by class A.

I don't agree.
Template is not a type.
It's a template for new type.
Template is not a memory or objects, etc.
You can use same tempalate to generate many similar objects:
use template for singleton to make types A, B, C, etc. behaving as a 
singleton.

Just like having a one form and use it to make e.g. 100 cakes.

> class A {
> 	Singleton<A> defaultInstance;
> public:
> 	A* getDefaultInstance() { defaultInstance.instance(); }
> };
> 
> The template itself could return by ref, to make it clean.

Yes, but there are still problems explained in my latest post about 
breaking Meyers' singleton.

> The template users (classes that want to provide default instances)
> will keep returning pointers if this is what client code expects
> (we can always add a return-ref version for new code written, anyway
> so far pointers are most used to signal NULLS to class taking
> it - those NULL will usually trigger use of the default instance).

I don't agree.
You MUST NOT expect that singleton will be null, because it's always 
instantiated! That's how singleton works.

I'd also propose to not to double interfaces for references and 
pointers. In example, this does not to seem resonable:

struct CoordinateLessThen {
	bool operator()(const Coordinate* a, const Coordinate* b) const;
	bool operator()(const Coordinate& a, const Coordinate& b) const;
};

Why not to keep it simple

struct CoordinateLessThen {
	bool operator()(const Coordinate& a, const Coordinate& b) const;
};

This interface can work well with pointers (by dereferencing) and 
references.

Simply, I'm trying to say that references are much more recommended 
where pointers can be used.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Mon Mar 13 08:46:42 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
Message-ID: <441577C2.9040907@loskot.net>

Paul Ramsey wrote:
> In the short term, can we simply wait for the 1.34 release as  
> suggested? 

I've just sent a message to Gennadiy about our doubts:
http://article.gmane.org/gmane.comp.lib.boost.user/17458

Here is complete thread:
http://thread.gmane.org/gmane.comp.lib.boost.user/17409

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 13 09:12:31 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <4415693B.8010002@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<20060313110945.GE70744@keybit.net> <441554D2.6050502@loskot.net>
	<20060313113447.GG70744@keybit.net> <4415693B.8010002@loskot.net>
Message-ID: <20060313141231.GJ70744@keybit.net>

On Mon, Mar 13, 2006 at 01:44:43PM +0100, Mateusz ??oskot wrote:

> So, should I start?

You're welcome.

--strk;

From mateusz at loskot.net  Mon Mar 13 09:16:44 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <20060313141231.GJ70744@keybit.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>	<20060313110945.GE70744@keybit.net>
	<441554D2.6050502@loskot.net>	<20060313113447.GG70744@keybit.net>
	<4415693B.8010002@loskot.net> <20060313141231.GJ70744@keybit.net>
Message-ID: <44157ECC.7040507@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 13, 2006 at 01:44:43PM +0100, Mateusz ??oskot wrote:
> 
> 
>>So, should I start?
> 
> 
> You're welcome.

OK, so I move to TUT.

I'd suggest to define base dirs structure as follows:

geos\sources
geos\tests\unit
geos\tests\unit\tut  - here sources of TUT
geos\tests\unit\test - here structure of files and subdirs with tests

Is this OK?
Simply, I'd need to have path to include TUT header fixed ;-)

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 13 09:27:30 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] Question about geos::io::Unload::Release()
In-Reply-To: <4415718B.4090202@loskot.net>
References: <4413219B.1020307@loskot.net> <20060311191939.GJ47999@keybit.net>
	<44132CE2.1020308@loskot.net> <20060312110526.GA70744@keybit.net>
	<441409DB.9020007@loskot.net> <20060313110532.GD70744@keybit.net>
	<44156340.7020608@loskot.net> <20060313124832.GI70744@keybit.net>
	<4415718B.4090202@loskot.net>
Message-ID: <20060313142730.GK70744@keybit.net>

On Mon, Mar 13, 2006 at 02:20:11PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >
> >I'd like to keep doing
> >
> >	A* ptr = A::instance():
> >
> >template should only be known by class A.
> 
> I don't agree.
> Template is not a type.
> It's a template for new type.
> Template is not a memory or objects, etc.
> You can use same tempalate to generate many similar objects:
> use template for singleton to make types A, B, C, etc. behaving as a 
> singleton.

Of course.
I meant that client code should not know about the templated implementation.

> >class A {
> >	Singleton<A> defaultInstance;
> >public:
> >	A* getDefaultInstance() { defaultInstance.instance(); }
> >};
> >
> >The template itself could return by ref, to make it clean.
> 
> Yes, but there are still problems explained in my latest post about 
> breaking Meyers' singleton.
> 
> >The template users (classes that want to provide default instances)
> >will keep returning pointers if this is what client code expects
> >(we can always add a return-ref version for new code written, anyway
> >so far pointers are most used to signal NULLS to class taking
> >it - those NULL will usually trigger use of the default instance).
> 
> I don't agree.
> You MUST NOT expect that singleton will be null, because it's always 
> instantiated! That's how singleton works.

I don't. I'm talking about some classes ctors that has nothing to do
with the singletons we're talkin about. They excepect a pointer, possibly
NULL. When the pointer is NULL they'd use the "default" instance of
that pointer type. Since getDefaultInstance() is going to be a new interface
there should be nothing to protect here.

> I'd also propose to not to double interfaces for references and 
> pointers. In example, this does not to seem resonable:
> 
> struct CoordinateLessThen {
> 	bool operator()(const Coordinate* a, const Coordinate* b) const;
> 	bool operator()(const Coordinate& a, const Coordinate& b) const;
> };
> 
> Why not to keep it simple
> 
> struct CoordinateLessThen {
> 	bool operator()(const Coordinate& a, const Coordinate& b) const;
> };

Because we use set<Coordinate> and set<Coordinate*> both needing an ordering
functor.

> This interface can work well with pointers (by dereferencing) and 
> references.

Feel free to simplify things when you see it fit.

> Simply, I'm trying to say that references are much more recommended 
> where pointers can be used.

I'm all for using refs when possible, but also consider sensible interfaces.
We want simple C++ users to still build. By 'simple' I mean the one only
using Geometry, CoordinateSequence, GeometryFactory and PrecisionModel.
Everything more "internal" (conceptually speaking) can be changed.

--strk;


From strk at refractions.net  Mon Mar 13 09:30:54 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <44157ECC.7040507@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<20060313110945.GE70744@keybit.net> <441554D2.6050502@loskot.net>
	<20060313113447.GG70744@keybit.net> <4415693B.8010002@loskot.net>
	<20060313141231.GJ70744@keybit.net> <44157ECC.7040507@loskot.net>
Message-ID: <20060313143054.GL70744@keybit.net>

On Mon, Mar 13, 2006 at 03:16:44PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >On Mon, Mar 13, 2006 at 01:44:43PM +0100, Mateusz ?
?oskot wrote:
> >
> >
> >>So, should I start?
> >
> >
> >You're welcome.
> 
> OK, so I move to TUT.
> 
> I'd suggest to define base dirs structure as follows:
> 
> geos\sources
> geos\tests\unit
> geos\tests\unit\tut  - here sources of TUT
> geos\tests\unit\test - here structure of files and subdirs with tests
> 
> Is this OK?
> Simply, I'd need to have path to include TUT header fixed ;-)

Isn't it a single header file ?
I'd place it in
geos/tests/unit/whatever_it_is_named.h

--strk;

From mateusz at loskot.net  Mon Mar 13 09:51:20 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <20060313143054.GL70744@keybit.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>	<20060313110945.GE70744@keybit.net>
	<441554D2.6050502@loskot.net>	<20060313113447.GG70744@keybit.net>
	<4415693B.8010002@loskot.net>	<20060313141231.GJ70744@keybit.net>
	<44157ECC.7040507@loskot.net> <20060313143054.GL70744@keybit.net>
Message-ID: <441586E8.1040109@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 13, 2006 at 03:16:44PM +0100, Mateusz ??oskot wrote:
> 
>>strk@refractions.net wrote:
>>
>>>On Mon, Mar 13, 2006 at 01:44:43PM +0100, Mateusz ???oskot wrote:
>>>
>>>
>>>
>>>>So, should I start?
>>>
>>>
>>>You're welcome.
>>
>>OK, so I move to TUT.
>>
>>I'd suggest to define base dirs structure as follows:
>>
>>geos\sources
>>geos\tests\unit
>>geos\tests\unit\tut  - here sources of TUT
>>geos\tests\unit\test - here structure of files and subdirs with tests
>>
>>Is this OK?
>>Simply, I'd need to have path to include TUT header fixed ;-)
> 
> 
> Isn't it a single header file ?
> I'd place it in
> geos/tests/unit/whatever_it_is_named.h

In fact, TUT consists of 3 files:
tut.h
tut_reporter.h
tut_restartable.h

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 13 09:56:08 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <441586E8.1040109@loskot.net>
References: <4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<20060313110945.GE70744@keybit.net> <441554D2.6050502@loskot.net>
	<20060313113447.GG70744@keybit.net> <4415693B.8010002@loskot.net>
	<20060313141231.GJ70744@keybit.net> <44157ECC.7040507@loskot.net>
	<20060313143054.GL70744@keybit.net> <441586E8.1040109@loskot.net>
Message-ID: <20060313145608.GA87311@keybit.net>

On Mon, Mar 13, 2006 at 03:51:20PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >On Mon, Mar 13, 2006 at 03:16:44PM +0100, Mateusz ?
?oskot wrote:

> In fact, TUT consists of 3 files:
> tut.h
> tut_reporter.h
> tut_restartable.h

If they are going to be useful for different kind
of tests we might use:

	geos/test/tut
	geos/test/unit
	geos/test/unit/geom
	geos/test/unit/noding
	geos/test/unit/...
	geos/test/xmltester 
	geos/test/.... 

--strk;

From mateusz at loskot.net  Mon Mar 13 10:31:50 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <20060313145608.GA87311@keybit.net>
References: <4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>	<20060313110945.GE70744@keybit.net>
	<441554D2.6050502@loskot.net>	<20060313113447.GG70744@keybit.net>
	<4415693B.8010002@loskot.net>	<20060313141231.GJ70744@keybit.net>
	<44157ECC.7040507@loskot.net>	<20060313143054.GL70744@keybit.net>
	<441586E8.1040109@loskot.net> <20060313145608.GA87311@keybit.net>
Message-ID: <44159066.40900@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 13, 2006 at 03:51:20PM +0100, Mateusz ??oskot wrote:
>>strk@refractions.net wrote:
>>>On Mon, Mar 13, 2006 at 03:16:44PM +0100, Mateusz ???oskot wrote:
> 
>>In fact, TUT consists of 3 files:
>>tut.h
>>tut_reporter.h
>>tut_restartable.h
> 
> If they are going to be useful for different kind
> of tests we might use:
> 
> 	geos/test/tut
> 	geos/test/unit
> 	geos/test/unit/geom
> 	geos/test/unit/noding
> 	geos/test/unit/...
> 	geos/test/xmltester 
> 	geos/test/.... 

Yes, they are. I use tut.h together with tut_reporter.h
Good. I'll stick to this structure.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Mon Mar 13 15:08:56 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <44155350.4070707@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<44155350.4070707@loskot.net>
Message-ID: <4415D158.9090809@loskot.net>

Mateusz ?oskot wrote:
> Paul Ramsey wrote:
> 
>> The situation in general makes me wary, if Boost is going to changing
>>  incompatibly with some regularity.
> 
> 
> Yes, I also have similar thoughts.
> Honestly, I'm a bit surprised that some Boost library can break 
> compatibility between releases 1.33 and 1.34.
> I have to discuss it with Gennadyi Rozental - the author of Boost.Test


So, as Gennadiy has explained me, Boost is backward compatible, but not 
forward. It's safe to use older API from Boost 1.33.

Complete story I'd suggest to take a look at is here,

http://thread.gmane.org/gmane.comp.lib.boost.user/17409


Now, I don't want to make much commotion about tests, and if we've just 
decided to go on with TUT that's OK for me.

But my next question is more about GEOS future. Should be Boost 
considered or not?
As we discussed it much with Sandro and Norman on the #postgis channel,
in future it would be nice to move to modern C++, so then I suppose it's 
not possible to drop Boost (I mean without huge amount of work :-)).
So, I'm trying to convince myself about that Boost is still good piece 
of software and worth to use.

If I'd like to redesign "something" in GEOS, rewrite in more 
safe/short/elegant way then how should I do it to provide useful code?
Is this OK if I'll use Boost e.g. it's Smart Pointers or other stuff.

Please, give me some light about potential possibilities for future GEOS 
development.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 13 16:11:55 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <4415D158.9090809@loskot.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>
	<4414A8C9.6050601@loskot.net>
	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>
	<44155350.4070707@loskot.net> <4415D158.9090809@loskot.net>
Message-ID: <20060313211155.GB90008@keybit.net>

On Mon, Mar 13, 2006 at 09:08:56PM +0100, Mateusz ??oskot wrote:
> Mateusz ??oskot wrote:
> >Paul Ramsey wrote:
> >
> >>The situation in general makes me wary, if Boost is going to changing
> >> incompatibly with some regularity.
> >
> >
> >Yes, I also have similar thoughts.
> >Honestly, I'm a bit surprised that some Boost library can break 
> >compatibility between releases 1.33 and 1.34.
> >I have to discuss it with Gennadyi Rozental - the author of Boost.Test
> 
> 
> So, as Gennadiy has explained me, Boost is backward compatible, but not 
> forward. It's safe to use older API from Boost 1.33.

As you know debian stable ships with 1.32.
As far as boost is known to be backward compatible I think we
should stick with oldest release. Ideally before 1.32, but
if that's the oldest we have access to I think it's a good candidate.

> Complete story I'd suggest to take a look at is here,
> 
> http://thread.gmane.org/gmane.comp.lib.boost.user/17409
> 
> 
> Now, I don't want to make much commotion about tests, and if we've just 
> decided to go on with TUT that's OK for me.

That's ok with me too. Anyway, since automake tests
are already there, and we might be using other boost
feature in future refactoring, I'd go with boost.
Of course I'm assuming backward compatibility for all 1.XXX versions.

> But my next question is more about GEOS future. Should be Boost 
> considered or not?
> As we discussed it much with Sandro and Norman on the #postgis channel,
> in future it would be nice to move to modern C++, so then I suppose it's 
> not possible to drop Boost (I mean without huge amount of work :-)).
> So, I'm trying to convince myself about that Boost is still good piece 
> of software and worth to use.
> 
> If I'd like to redesign "something" in GEOS, rewrite in more 
> safe/short/elegant way then how should I do it to provide useful code?
> Is this OK if I'll use Boost e.g. it's Smart Pointers or other stuff.

I'd say not before release 3.0.0.
Worth adding comments in the code with *suggestions* on where to use it.
Anyway, there are many places where, not "modern", but "simple" C++ should
be enforced :)

--strk;

From mateusz at loskot.net  Mon Mar 13 16:29:32 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] [UTF] envelope_class_test.cpp fixed for Boost 1.33
In-Reply-To: <20060313211155.GB90008@keybit.net>
References: <57153.127.0.0.1.1142084418.squirrel@loskot.net>	<4414A8C9.6050601@loskot.net>	<78740F2F-9EBF-425F-8108-88892B22C8BB@refractions.net>	<44155350.4070707@loskot.net>
	<4415D158.9090809@loskot.net> <20060313211155.GB90008@keybit.net>
Message-ID: <4415E43C.1060605@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 13, 2006 at 09:08:56PM +0100, Mateusz ??oskot wrote:
>> Mateusz ??oskot wrote:
>>> Paul Ramsey wrote:
>>> 
>>> 
>>>> The situation in general makes me wary, if Boost is going to
>>>> changing incompatibly with some regularity.
>>> 
>>> 
>>> Yes, I also have similar thoughts. Honestly, I'm a bit surprised
>>> that some Boost library can break compatibility between releases
>>> 1.33 and 1.34. I have to discuss it with Gennadyi Rozental - the
>>> author of Boost.Test
>> 
>> 
>> So, as Gennadiy has explained me, Boost is backward compatible, but
>> not forward. It's safe to use older API from Boost 1.33.
> 
> 
> As you know debian stable ships with 1.32. As far as boost is known
> to be backward compatible I think we should stick with oldest
> release. Ideally before 1.32, but if that's the oldest we have access
> to I think it's a good candidate.


OK, let's give Boost last chance :-)
Please, could you check if the envelope test (attached to this thread)
runs well with Boost 1.32?
It is based on older and backward compatible API>


>> Complete story I'd suggest to take a look at is here,
>> 
>> http://thread.gmane.org/gmane.comp.lib.boost.user/17409
>> 
>> 
>> Now, I don't want to make much commotion about tests, and if we've
>> just decided to go on with TUT that's OK for me.
> 
> 
> That's ok with me too. Anyway, since automake tests are already
> there, and we might be using other boost feature in future
> refactoring, I'd go with boost. Of course I'm assuming backward
> compatibility for all 1.XXX versions.


OK, so please check this envelope test with Boost 1.32 and if it run 
well, then I'll keep going with Boost. OK?


>> But my next question is more about GEOS future. Should be Boost 
>> considered or not? As we discussed it much with Sandro and Norman
>> on the #postgis channel, in future it would be nice to move to
>> modern C++, so then I suppose it's not possible to drop Boost (I
>> mean without huge amount of work :-)). So, I'm trying to convince
>> myself about that Boost is still good piece of software and worth
>> to use.
>> 
>> If I'd like to redesign "something" in GEOS, rewrite in more 
>> safe/short/elegant way then how should I do it to provide useful
>> code? Is this OK if I'll use Boost e.g. it's Smart Pointers or
>> other stuff.
> 
> 
> I'd say not before release 3.0.0. Worth adding comments in the code
> with *suggestions* on where to use it. Anyway, there are many places
> where, not "modern", but "simple" C++ should be enforced :)


Sure, that's clear. But if I'll find some time, then I can do some tests 
to discuss it.


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Wed Mar 15 20:01:13 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] First example of Unit Tests with TUT
Message-ID: <4418B8D9.90408@loskot.net>

Hi,

After quite long process of selecting Unit Testing Framework,
we decided to use TUT (http://tut-framework.sourceforge.net/)
- very simple but powerful UTF.

TUT is only one header (+ 2 optional headers) C++ tool,
so it can be easily incorporated to GEOS sources.

Boost's UTF is also very good tool, but the main problem is that
the compatibility has been broken somewhere between
versions 1.30 - 1.33. Older versions is quite poor toolset in comparison
to 1.33, but tests written on base of 1.33 can not be used with 1.30.

After experiencing Boost,
we decided to use TUT as simple, so stable, tool that does the
testing job very well.
Also, nice advantage is that TUT simplicity makes it
easy to extend with new features and improvements.
Tonight, I added some small features
(e.g. displaying number of tests passed for every test group)
without much learning :-)
Another advantage I see is the idea of 'reporter' object,
that makes it easy to add new output format of test results (e.g. HTML
to publish on the GEOS website) and switch between output formats easily
(e.g. using command line options).

So, I've ported 2 new tests of Envelope class and isRectangle function
using TUT. Both tests are attached to this post, together with TUT
framework sources.

As we already decided with strk on the #postgis,
rest of JTS Unit Tests will be ported using TUT.

I'd like to encourage everyone interested to take a look at those test,
try to compile and run them.

Package:
- TUT sources: 3 files named as tut_*.h (included by test examples 
source files)

- Test examples:
-- main.cpp file is the entry point of Unit Testing
application (runner).
-- test_*.cpp files are test modules - every module consists of
one test group (a set of test cases)


All comments and questions are strongly welcome.

Best regards
-- 
Mateusz ?oskot
http://mateusz.loskot.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos-tut-first-tests.tar.gz
Type: application/x-gzip
Size: 10821 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060316/5ec57acd/geos-tut-first-tests.tar.gz
From strk at refractions.net  Thu Mar 16 05:31:21 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:59 2007
Subject: [geos-devel] First example of Unit Tests with TUT
In-Reply-To: <4418B8D9.90408@loskot.net>
References: <4418B8D9.90408@loskot.net>
Message-ID: <20060316103121.GB19593@keybit.net>

Thank you Mateusz,
They build w/out problems.
I've committed them. Next we want them to be run by 'make check'.
Currently it runs but it's invoked with no args and appears to
succeed when in fact does nothing. As we discussed on #postgis
I'll wait for a patch to it.

--strk;

On Thu, Mar 16, 2006 at 02:01:13AM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> After quite long process of selecting Unit Testing Framework,
> we decided to use TUT (http://tut-framework.sourceforge.net/)
> - very simple but powerful UTF.
> 
> TUT is only one header (+ 2 optional headers) C++ tool,
> so it can be easily incorporated to GEOS sources.
> 
> Boost's UTF is also very good tool, but the main problem is that
> the compatibility has been broken somewhere between
> versions 1.30 - 1.33. Older versions is quite poor toolset in comparison
> to 1.33, but tests written on base of 1.33 can not be used with 1.30.
> 
> After experiencing Boost,
> we decided to use TUT as simple, so stable, tool that does the
> testing job very well.
> Also, nice advantage is that TUT simplicity makes it
> easy to extend with new features and improvements.
> Tonight, I added some small features
> (e.g. displaying number of tests passed for every test group)
> without much learning :-)
> Another advantage I see is the idea of 'reporter' object,
> that makes it easy to add new output format of test results (e.g. HTML
> to publish on the GEOS website) and switch between output formats easily
> (e.g. using command line options).
> 
> So, I've ported 2 new tests of Envelope class and isRectangle function
> using TUT. Both tests are attached to this post, together with TUT
> framework sources.
> 
> As we already decided with strk on the #postgis,
> rest of JTS Unit Tests will be ported using TUT.
> 
> I'd like to encourage everyone interested to take a look at those test,
> try to compile and run them.
> 
> Package:
> - TUT sources: 3 files named as tut_*.h (included by test examples 
> source files)
> 
> - Test examples:
> -- main.cpp file is the entry point of Unit Testing
> application (runner).
> -- test_*.cpp files are test modules - every module consists of
> one test group (a set of test cases)
> 
> 
> All comments and questions are strongly welcome.
> 
> Best regards
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net


> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Thu Mar 16 05:43:37 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] First example of Unit Tests with TUT
In-Reply-To: <20060316103121.GB19593@keybit.net>
References: <4418B8D9.90408@loskot.net> <20060316103121.GB19593@keybit.net>
Message-ID: <44194159.2030300@loskot.net>

strk@refractions.net wrote:
> Thank you Mateusz,

My pleasure!

> They build w/out problems.

Great!

> I've committed them. Next we want them to be run by 'make check'.
> Currently it runs but it's invoked with no args and appears to
> succeed when in fact does nothing. As we discussed on #postgis
> I'll wait for a patch to it.

I've just submitted patch
#65 Command line changes and EOL fixes Unit Test

Now, if geos_unit is executed w/out any command line arguments,
it run all tests.

Is this what you need?

As we discussed on the #postgis,
it could be usefull to divide unit test executables according to
GEOS namespaces.

So, that's not a problem but then geos_unit executable will be replaced 
with separate programs per namespace.
Is this OK or you'd have different idea?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Thu Mar 16 06:10:30 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] First example of Unit Tests with TUT
In-Reply-To: <44194159.2030300@loskot.net>
References: <4418B8D9.90408@loskot.net> <20060316103121.GB19593@keybit.net>
	<44194159.2030300@loskot.net>
Message-ID: <20060316111030.GB27508@keybit.net>

On Thu, Mar 16, 2006 at 11:43:37AM +0100, Mateusz ??oskot wrote:

> As we discussed on the #postgis,
> it could be usefull to divide unit test executables according to
> GEOS namespaces.
> 
> So, that's not a problem but then geos_unit executable will be replaced 
> with separate programs per namespace.
> Is this OK or you'd have different idea?

I'm still unsure about this.
I guess it's not important for now.
Let's move on with new tests.

(your patch applied, unit tests are run by 'make check' now)

--strk;

From mateusz at loskot.net  Thu Mar 16 07:05:07 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] First example of Unit Tests with TUT
In-Reply-To: <20060316111030.GB27508@keybit.net>
References: <4418B8D9.90408@loskot.net>
	<20060316103121.GB19593@keybit.net>	<44194159.2030300@loskot.net>
	<20060316111030.GB27508@keybit.net>
Message-ID: <44195473.1010601@loskot.net>

strk@refractions.net wrote:
> On Thu, Mar 16, 2006 at 11:43:37AM +0100, Mateusz ??oskot wrote:
> 
> 
>>As we discussed on the #postgis,
>>it could be usefull to divide unit test executables according to
>>GEOS namespaces.
>>
>>So, that's not a problem but then geos_unit executable will be replaced 
>>with separate programs per namespace.
>>Is this OK or you'd have different idea?
> 
> 
> I'm still unsure about this.
> I guess it's not important for now.

Yes, it isn't.
We can reorganize tests in every moment without rewriting anything.

> Let's move on with new tests.

Right.

> (your patch applied, unit tests are run by 'make check' now)

Yes, but the usage message does still disinform.
As I reported in #66, I'll fix it together with unifying to GNU style.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From matthieu.desile at free.fr  Mon Mar 20 06:32:30 2006
From: matthieu.desile at free.fr (Matthieu DESILE)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Geos CVS compilation with GCC 4.1, include error
Message-ID: <20060320113230.GA1469@studio>

Hello,

This morning I tried to compile geos from cvs and encountered several
errors of the same nature, where math functions were declared out of
scope (fabs, sin, ...), causing the compilation to abort.

It seems related to the not-inclusion of <cmath>, since its inclusion
gets rid of the errors.

Attached is a patch that includes <cmath> in the sources files that were
causing the compilation to abort.

Matthieu Desile.

PS: Environment :

Linux studio 2.6.15-gentoo-r7 #3 SMP Sat Mar 18 19:33:50 CET 2006 x86_64 AMD Athlon(tm) 64 X2 Dual Core Processor 3800+ GNU/Linux

GCC :

gcc (GCC) 4.1.0 (Gentoo 4.1.0)
Copyright (C) 2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

-------------- next part --------------
? py-compile
Index: source/noding/Octant.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/noding/Octant.cpp,v
retrieving revision 1.5
diff -u -r1.5 Octant.cpp
--- source/noding/Octant.cpp	15 Mar 2006 09:51:12 -0000	1.5
+++ source/noding/Octant.cpp	20 Mar 2006 11:19:13 -0000
@@ -17,6 +17,7 @@
  *
  **********************************************************************/
 
+#include <cmath>
 #include <sstream>
 
 #include <geos/util/IllegalArgumentException.h>
Index: source/operation/buffer/OffsetCurveBuilder.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/operation/buffer/OffsetCurveBuilder.cpp,v
retrieving revision 1.31
diff -u -r1.31 OffsetCurveBuilder.cpp
--- source/operation/buffer/OffsetCurveBuilder.cpp	14 Mar 2006 00:19:40 -0000	1.31
+++ source/operation/buffer/OffsetCurveBuilder.cpp	20 Mar 2006 11:19:13 -0000
@@ -19,6 +19,7 @@
  **********************************************************************/
 
 #include <cassert>
+#include <cmath>
 #include <vector>
 
 #include <geos/algorithm/CGAlgorithms.h>
Index: source/operation/buffer/OffsetCurveSetBuilder.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/operation/buffer/OffsetCurveSetBuilder.cpp,v
retrieving revision 1.30
diff -u -r1.30 OffsetCurveSetBuilder.cpp
--- source/operation/buffer/OffsetCurveSetBuilder.cpp	14 Mar 2006 00:19:40 -0000	1.30
+++ source/operation/buffer/OffsetCurveSetBuilder.cpp	20 Mar 2006 11:19:13 -0000
@@ -18,6 +18,7 @@
  *
  **********************************************************************/
 
+#include <cmath>
 #include <vector>
 
 #include <geos/algorithm/CGAlgorithms.h>
From strk at refractions.net  Mon Mar 20 06:43:20 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Geos CVS compilation with GCC 4.1, include error
In-Reply-To: <20060320113230.GA1469@studio>
References: <20060320113230.GA1469@studio>
Message-ID: <20060320114320.GD80337@keybit.net>

Applied, thanks.
--strk;

On Mon, Mar 20, 2006 at 12:32:30PM +0100, Matthieu DESILE wrote:
> Hello,
> 
> This morning I tried to compile geos from cvs and encountered several
> errors of the same nature, where math functions were declared out of
> scope (fabs, sin, ...), causing the compilation to abort.
> 
> It seems related to the not-inclusion of <cmath>, since its inclusion
> gets rid of the errors.
> 
> Attached is a patch that includes <cmath> in the sources files that were
> causing the compilation to abort.
> 
> Matthieu Desile.
> 
> PS: Environment :
> 
> Linux studio 2.6.15-gentoo-r7 #3 SMP Sat Mar 18 19:33:50 CET 2006 x86_64 AMD Athlon(tm) 64 X2 Dual Core Processor 3800+ GNU/Linux
> 
> GCC :
> 
> gcc (GCC) 4.1.0 (Gentoo 4.1.0)
> Copyright (C) 2006 Free Software Foundation, Inc.
> This is free software; see the source for copying conditions.  There is NO
> warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
> 

From mateusz at loskot.net  Mon Mar 20 07:13:32 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Why WKBConstants is a namespace?
Message-ID: <441E9C6C.6000302@loskot.net>

Why WKBConstants is a namespace instead of enum?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 20 07:18:41 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Why WKBConstants is a namespace?
In-Reply-To: <441E9C6C.6000302@loskot.net>
References: <441E9C6C.6000302@loskot.net>
Message-ID: <20060320121841.GE80337@keybit.net>

On Mon, Mar 20, 2006 at 01:13:32PM +0100, Mateusz ??oskot wrote:
> Why WKBConstants is a namespace instead of enum?

It was a namespace in Java (an interface):

public interface WKBConstants {
  int wkbXDR = 0;
  int wkbNDR = 1;

  int wkbPoint = 1;
  int wkbLineString = 2;
  int wkbPolygon = 3;
  int wkbMultiPoint = 4;
  int wkbMultiLineString = 5;
  int wkbMultiPolygon = 6;
  int wkbGeometryCollection = 7;
}
 
As you can see an enum won't be able to hold wkbPoint
and wkbNDR  with the same value.
Also, it might grow including flags for dimensionality
and SRID presence or whatever ends up being a WKB
constant.

--strk;

From mateusz at loskot.net  Mon Mar 20 08:05:27 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Why WKBConstants is a namespace?
In-Reply-To: <20060320121841.GE80337@keybit.net>
References: <441E9C6C.6000302@loskot.net> <20060320121841.GE80337@keybit.net>
Message-ID: <441EA897.6090109@loskot.net>

strk@refractions.net wrote:
> On Mon, Mar 20, 2006 at 01:13:32PM +0100, Mateusz ??oskot wrote:
> 
>>Why WKBConstants is a namespace instead of enum?
> 
> 
> It was a namespace in Java (an interface):
> 
> public interface WKBConstants {
>   int wkbXDR = 0;
>   int wkbNDR = 1;
> 
>   int wkbPoint = 1;
>   int wkbLineString = 2;
>   int wkbPolygon = 3;
>   int wkbMultiPoint = 4;
>   int wkbMultiLineString = 5;
>   int wkbMultiPolygon = 6;
>   int wkbGeometryCollection = 7;
> }
>  
> As you can see an enum won't be able to hold wkbPoint
> and wkbNDR  with the same value.

Why?
AFAIK it will be able.

C++ Standard says in "7.2 Enumeration declarations":

"If the first enumerator has no initializer, the value of
the corresponding constant is zero. An enumerator-definition without an 
initializer gives the enumerator the value
obtained by increasing the value of the previous enumerator by one.

[ Example:
enum { a , b , c =0 };
enum { d , e , f=e +2 };
defines a, c, and d to be zero, b and e to be 1, and f to be 3.
?end example]"

As you can see:
enum { a , b , c =0 };

is equivalent of:

enum { a = 0, b = 0, c = 0 };

> Also, it might grow including flags for dimensionality
> and SRID presence or whatever ends up being a WKB
> constant.

Yes, but those would be placed to separate enums.

It will also provide better type-safety in some cases.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Mar 20 08:17:54 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Why WKBConstants is a namespace?
In-Reply-To: <441EA897.6090109@loskot.net>
References: <441E9C6C.6000302@loskot.net> <20060320121841.GE80337@keybit.net>
	<441EA897.6090109@loskot.net>
Message-ID: <20060320131754.GC82496@keybit.net>

Ok for the enum, as long as full qualification remains:

WKBConstant::whatever

--strk;

On Mon, Mar 20, 2006 at 02:05:27PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >On Mon, Mar 20, 2006 at 01:13:32PM +0100, Mateusz ?
?oskot wrote:
> >
> >>Why WKBConstants is a namespace instead of enum?
> >
> >
> >It was a namespace in Java (an interface):
> >
> >public interface WKBConstants {
> >  int wkbXDR = 0;
> >  int wkbNDR = 1;
> >
> >  int wkbPoint = 1;
> >  int wkbLineString = 2;
> >  int wkbPolygon = 3;
> >  int wkbMultiPoint = 4;
> >  int wkbMultiLineString = 5;
> >  int wkbMultiPolygon = 6;
> >  int wkbGeometryCollection = 7;
> >}
> > 
> >As you can see an enum won't be able to hold wkbPoint
> >and wkbNDR  with the same value.
> 
> Why?
> AFAIK it will be able.
> 
> C++ Standard says in "7.2 Enumeration declarations":
> 
> "If the first enumerator has no initializer, the value of
> the corresponding constant is zero. An enumerator-definition without an 
> initializer gives the enumerator the value
> obtained by increasing the value of the previous enumerator by one.
> 
> [ Example:
> enum { a , b , c =0 };
> enum { d , e , f=e +2 };
> defines a, c, and d to be zero, b and e to be 1, and f to be 3.
> ???end example]"
> 
> As you can see:
> enum { a , b , c =0 };
> 
> is equivalent of:
> 
> enum { a = 0, b = 0, c = 0 };
> 
> >Also, it might grow including flags for dimensionality
> >and SRID presence or whatever ends up being a WKB
> >constant.
> 
> Yes, but those would be placed to separate enums.
> 
> It will also provide better type-safety in some cases.
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Mon Mar 20 17:28:35 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Pedantic build of GEOS
Message-ID: <441F2C93.9010507@loskot.net>

Hi,

A few minutes ago, I tried to build GEOS with -pedantic and -ansi
switches on.

The only *errors* I got were related to extra semicolons at the end of
functions body, e.g.:

void foo()
{
//...
};
^^^ - extra semicolon

I removed them and did complete rebuild.

Then I made short analysis of warnings.
Almost all warnings were related to missing virtual destructors in base
classes that have some virtual member functions.

I reported it as a bug, a critical bug:

Bug #73 - Many classes have no virtual destructor but having virtual
member functions


I managed to identify 25 classes that need virtual destructors.
Is there any rationale for not adding virtual destructors?
I don't see any and I'd say it is pretty critical to add this
destructors, because it may cause serious bugs, even memory leaks.

After those destructors are added I think it would be helpful to add
-pedantic and -ansi switches to default set of compilator flags for GEOS.
Today, we were discussing about it with strk and Norman on the #postgis
channel and there was no consensus but I'd stronlgy suggest to add those
flags. Why not to help compiler help us  :-)))

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Tue Mar 21 05:44:00 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] [From Boost] Interest on a geometry library
Message-ID: <441FD8F0.1090902@loskot.net>

Hi,

I've just encountered interesting thread on boost@lists.boost.org
There is some interest in library with geometry primitives and algorithms:

http://thread.gmane.org/gmane.comp.lib.boost.devel/139743

This may be interesteing regarding GEOS transition to better performance 
and type safety.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Tue Mar 21 06:07:37 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Pedantic build of GEOS
In-Reply-To: <441F2C93.9010507@loskot.net>
References: <441F2C93.9010507@loskot.net>
Message-ID: <20060321110737.GA94557@keybit.net>

By building with -pedantic on I get warnings  about the
use of 'long long'. Do you have suggestion as how to 
change it to a standard name ?

About virtual destructor I agree we should fix that.
Patches welcome.

--strk;

On Mon, Mar 20, 2006 at 11:28:35PM +0100, Mateusz ??oskot wrote:
> Hi,
> 
> A few minutes ago, I tried to build GEOS with -pedantic and -ansi
> switches on.
> 
> The only *errors* I got were related to extra semicolons at the end of
> functions body, e.g.:
> 
> void foo()
> {
> //...
> };
> ^^^ - extra semicolon
> 
> I removed them and did complete rebuild.
> 
> Then I made short analysis of warnings.
> Almost all warnings were related to missing virtual destructors in base
> classes that have some virtual member functions.
> 
> I reported it as a bug, a critical bug:
> 
> Bug #73 - Many classes have no virtual destructor but having virtual
> member functions
> 
> 
> I managed to identify 25 classes that need virtual destructors.
> Is there any rationale for not adding virtual destructors?
> I don't see any and I'd say it is pretty critical to add this
> destructors, because it may cause serious bugs, even memory leaks.
> 
> After those destructors are added I think it would be helpful to add
> -pedantic and -ansi switches to default set of compilator flags for GEOS.
> Today, we were discussing about it with strk and Norman on the #postgis
> channel and there was no consensus but I'd stronlgy suggest to add those
> flags. Why not to help compiler help us  :-)))
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
----------------------------------------------------------------------
State-collected Geographic Data is public property !
Reject the INSPIRE directive.
Sign the petition: http://petition.publicgeodata.org

From mateusz at loskot.net  Tue Mar 21 06:17:43 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Pedantic build of GEOS
In-Reply-To: <20060321110737.GA94557@keybit.net>
References: <441F2C93.9010507@loskot.net> <20060321110737.GA94557@keybit.net>
Message-ID: <441FE0D7.5020609@loskot.net>

strk@refractions.net wrote:
> By building with -pedantic on I get warnings  about the use of 'long
> long'.

I attached report with complete output from my try.

> Do you have suggestion as how to change it to a standard name ?

AFAIK there is no standard way to solve the problem.
C99 and gcc provides support of 64 integral type as long long.
Microsoft VC++ supports it too in form of type named as __int64.

So, I think the only solution is to wrap it in #ifdef's and typedef's.

Here is some example of possible header I found on
comp.lang.c++, author: Eyal Ben-David.
This header wraps integral types in multiplatform way, so I think
similar solution will suffice:

/---------------------------------------------------
//
// Note 1:
// we can replace CHAR_BIT with C++ header <limits> and the member
// function digits(), but G++ does'n have it (yet)
//
// Note 2:
// I needed the preprocessor for conditional compilation because I
// wanted to support non standard types such as __int64 or long long
//
#include <limits.h>

namespace Int_Types {

#if defined (_WIN32) && (defined(__BORLANDC__) || defined (_MSC_VER))
typedef __int64 LONG_LONG;
typedef __int64 U_LONG_LONG;
typedef __int64 S_LONG_LONG;
#endif

#if defined (__GNUG__)
typedef long long          LONG_LONG;
typedef signed long long   S_LONG_LONG;
typedef unsigned long long U_LONG_LONG;
#endif

template <int N> struct IntTypeHelper
{
};
template<> struct IntTypeHelper<0>
{
    typedef char           type;
    typedef signed char    signed_type;
    typedef unsigned char  unsigned_type;
};
template<> struct IntTypeHelper<1>
{
    typedef short           type;
    typedef signed short    signed_type;
    typedef unsigned short  unsigned_type;
};
template<> struct IntTypeHelper<2>
{
    typedef int           type;
    typedef signed int    signed_type;
    typedef unsigned int  unsigned_type;
};
template<> struct IntTypeHelper<3>
{
    typedef long           type;
    typedef signed long    signed_type;
    typedef unsigned long  unsigned_type;
};
template<> struct IntTypeHelper<4>
{
    typedef LONG_LONG    type;
    typedef S_LONG_LONG  signed_type;
    typedef U_LONG_LONG  unsigned_type;
};
template <int N> class IntType
{
private:
    enum
    {
       value =
          (N > (sizeof(char) * CHAR_BIT)) +
          (N > (sizeof(short)* CHAR_BIT)) +
          (N > (sizeof(int)  * CHAR_BIT)) +
          (N > (sizeof(long) * CHAR_BIT)) +
          (N > (sizeof(LONG_LONG) * CHAR_BIT))
    };

public:
    typedef typename IntTypeHelper<value>::type           type;
    typedef typename IntTypeHelper<value>::signed_type    signed_type;
    typedef typename IntTypeHelper<value>::unsigned_type  unsigned_type;
};
// declare some common typedefs.
//
typedef IntType<8>::type              int8;
typedef IntType<8>::signed_type      sint8;
typedef IntType<8>::unsigned_type    uint8;
typedef IntType<16>::type            int16;
typedef IntType<16>::signed_type    sint16;
typedef IntType<16>::unsigned_type  uint16;
typedef IntType<32>::type            int32;
typedef IntType<32>::signed_type    sint32;
typedef IntType<32>::unsigned_type  uint32;
typedef IntType<64>::type            int64;
typedef IntType<64>::signed_type    sint64;
typedef IntType<64>::unsigned_type  uint64;

} // namespace Int_Types

#ifdef TEST

#include <iostream>
#include <typeinfo>

int main()
{
    using namespace std;
    using namespace Int_Types;

    // uncomment to see ...
    //cout << typeid( IntType<65>::unsigned_type).name() << "\n";

    cout << typeid( IntType<5>::type).name() << ", "
         << typeid( IntType<10>::type).name() << ", "
         << typeid( IntType<20>::type).name() << ", "
         << typeid( IntType<33>::type).name() << "\n";

    cout << "int 8:\t"
         << typeid(int8).name() << ", "
         << typeid(sint8).name() << ", "
         << typeid(uint8).name() << endl;

    cout << "int 16:\t"
         << typeid(int16).name() << ", "
         << typeid(sint16).name() << ", "
         << typeid(uint16).name() << endl;

    cout << "int 32:\t"
         << typeid(int32).name() << ", "
         << typeid(sint32).name() << ", "
         << typeid(uint32).name() << endl;

    cout << "int 64:\t"
         << typeid(int64).name() << ", "
         << typeid(sint64).name() << ", "
         << typeid(uint64).name() << endl;

}

#endif // TEST
//------------------------------------------------------------


> 
> About virtual destructor I agree we should fix that. Patches welcome.
> 

OK. I've assigned myself to this bug. I'll fix it this week.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net
-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos-pedantic-warnings.tar.gz
Type: application/x-gzip
Size: 13330 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060321/11c86815/geos-pedantic-warnings.tar.gz
From strk at refractions.net  Tue Mar 21 06:20:06 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Pedantic build of GEOS
In-Reply-To: <441FE0D7.5020609@loskot.net>
References: <441F2C93.9010507@loskot.net> <20060321110737.GA94557@keybit.net>
	<441FE0D7.5020609@loskot.net>
Message-ID: <20060321112006.GB94557@keybit.net>

On Tue, Mar 21, 2006 at 12:17:43PM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >By building with -pedantic on I get warnings  about the use of 'long
> >long'.
> 
> I attached report with complete output from my try.
> 
> >Do you have suggestion as how to change it to a standard name ?
> 
> AFAIK there is no standard way to solve the problem.
> C99 and gcc provides support of 64 integral type as long long.
> Microsoft VC++ supports it too in form of type named as __int64.
> 
> So, I think the only solution is to wrap it in #ifdef's and typedef's.

We should already be doing this, in platform.h
still gcc with -ansi -pedantic  warns about the fact that long long
is NOT ansi (but a GCC extension).

--strk;

From mateusz at loskot.net  Tue Mar 21 06:31:49 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Pedantic build of GEOS
In-Reply-To: <20060321112006.GB94557@keybit.net>
References: <441F2C93.9010507@loskot.net>
	<20060321110737.GA94557@keybit.net>	<441FE0D7.5020609@loskot.net>
	<20060321112006.GB94557@keybit.net>
Message-ID: <441FE425.8090801@loskot.net>

strk@refractions.net wrote:
> On Tue, Mar 21, 2006 at 12:17:43PM +0100, Mateusz ??oskot wrote:
> 
>>strk@refractions.net wrote:
>>
>>>By building with -pedantic on I get warnings  about the use of 'long
>>>long'.
>>
>>I attached report with complete output from my try.
>>
>>
>>>Do you have suggestion as how to change it to a standard name ?
>>
>>AFAIK there is no standard way to solve the problem.
>>C99 and gcc provides support of 64 integral type as long long.
>>Microsoft VC++ supports it too in form of type named as __int64.
>>
>>So, I think the only solution is to wrap it in #ifdef's and typedef's.
> 
> 
> We should already be doing this, in platform.h

Yup.

> still gcc with -ansi -pedantic  warns about the fact that long long
> is NOT ansi (but a GCC extension).

Yes, and it will warn.
I have no idea how to get rid of those warnings.
May be there is some pragma or sth like tis.

But I think warnings like those can be safely ignored.
The advantages is -pedantic will help us to catch more serious
possible problems, I hope so.

Cheers

-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Tue Mar 21 06:52:33 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] SWIG bindings
Message-ID: <20060321115233.GC94557@keybit.net>

It seems that Makefile.am 's for SWIG binding are currently broken.
Is there still anyone maintaining them ?

--strk;

From cfis at interserv.com  Tue Mar 21 13:20:52 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Re: SWIG bindings
In-Reply-To: <20060321115233.GC94557@keybit.net>
References: <20060321115233.GC94557@keybit.net>
Message-ID: <44204404.9020207@interserv.com>

Hi Strk,

I've been maintaining them.  I have a big patch for the SWIG stuff, but 
have been waiting for GEOS to stabilize a bit to check them in.  Let me 
know if this is a good time or not.

Charlie

strk@refractions.net wrote:
> It seems that Makefile.am 's for SWIG binding are currently broken.
> Is there still anyone maintaining them ?
>
> --strk;
>
>
>   
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060321/0a1500bb/smime.bin
From strk at refractions.net  Tue Mar 21 13:46:48 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Re: SWIG bindings
In-Reply-To: <44204404.9020207@interserv.com>
References: <20060321115233.GC94557@keybit.net>
	<44204404.9020207@interserv.com>
Message-ID: <20060321184648.GD95430@keybit.net>

On Tue, Mar 21, 2006 at 11:20:52AM -0700, Charlie Savage wrote:
> Hi Strk,
> 
> I've been maintaining them.  I have a big patch for the SWIG stuff, but 
> have been waiting for GEOS to stabilize a bit to check them in.  Let me 
> know if this is a good time or not.

Excellent. We have no stability yet, but it's worth making
the 'make dist' rule work or the online cvs .bz2 package
won't be produced. Do you think you can look at that ?

--strk;

From cfis at interserv.com  Tue Mar 21 19:00:41 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Re: SWIG bindings
In-Reply-To: <20060321184648.GD95430@keybit.net>
References: <20060321115233.GC94557@keybit.net>
	<44204404.9020207@interserv.com>
	<20060321184648.GD95430@keybit.net>
Message-ID: <442093A9.3080200@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060321/1e28034b/smime.bin
From gjanee at alexandria.ucsb.edu  Wed Mar 22 14:13:16 2006
From: gjanee at alexandria.ucsb.edu (=?ISO-8859-1?Q?Greg_Jan=E9e?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] predicates on geometry collections supported?
Message-ID: <bd8a5723f9135f6bb95105a54ff2ef46@alexandria.ucsb.edu>

The PostGIS documentation says that predicates such as Overlaps and 
Contains cannot be used on geometry collections.  But the GEOS homepage 
says it supports all "Simple Features" functions and operators, and 
doesn't mention any limitations.  Which is correct?


From chodgson at refractions.net  Wed Mar 22 14:28:20 2006
From: chodgson at refractions.net (Chris Hodgson)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] predicates on geometry collections supported?
In-Reply-To: <bd8a5723f9135f6bb95105a54ff2ef46@alexandria.ucsb.edu>
References: <bd8a5723f9135f6bb95105a54ff2ef46@alexandria.ucsb.edu>
Message-ID: <4421A554.1010407@refractions.net>

What the documentation means to say is that the operation:

Overlaps( geomentryCollection1, geomertryCollection2 )

is not supported. The reason for this is two-fold, as I understand it. 
Firstly, the meaning of the predicates in terms of comparing two 
geometry collections with eachother is not obvious (nor is it defined by 
the "Simple Features" spec), and secondly, I believe there are issues 
with math when you are dealing with collections, that make it impossible 
to robustly and consistently determine the result of the predicates, 
even if the meaning were defined.

However, GEOS _does_ support the operation:

Overlaps( geometry1, geometry2 )

which _is_ defined by the Simple Features spec, and in natural language 
might be described as using a predicate on a collection of geometries 
(namely, the collection containing geometry1 and geometry2). So 
hopefully that answers your question...

Chris

Greg Jan?e wrote:
> The PostGIS documentation says that predicates such as Overlaps and 
> Contains cannot be used on geometry collections.  But the GEOS homepage 
> says it supports all "Simple Features" functions and operators, and 
> doesn't mention any limitations.  Which is correct?
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Thu Mar 23 04:33:10 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
Message-ID: <20060323093310.GA22011@keybit.net>

I've completed the namespaces and headers split step.

GEOS namespaces now reflect JTS packages, and
all classes are named after JTS classes/interfaces.
There are now duplicated names, but in different
namespaces (as it is for JTS).

Most client apps will just use the 'geos::geom',
'geos::io' and 'geos::util' namespaces and also
not all classes from them. This opens up a chance
to reduce exposed API by only installed "maintained"
interfaces. We attempted at doing this from the start
by providing a geos.h header, including a minimal
set of internal headers. We could now reduce that
minimal set. What do you think ?

Note that the original "catch-all" headers have
been currently retained, as a convenience to allow
existing application to build w/out much modification.
As an example, qgis still builds w/out modifications
against GEOS-HEAD.

--strk;

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Thu Mar 23 05:31:18 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Re: SWIG bindings
In-Reply-To: <442093A9.3080200@interserv.com>
References: <20060321115233.GC94557@keybit.net>
	<44204404.9020207@interserv.com>
	<20060321184648.GD95430@keybit.net>
	<442093A9.3080200@interserv.com>
Message-ID: <20060323103118.GA22643@keybit.net>

On Tue, Mar 21, 2006 at 05:00:41PM -0700, Charlie Savage wrote:
> Sure.  Let me resync with CVS and make sure everything still works.  
> Then I'll send along a patch to you as usual.  FYI, the patch is 
> backwards compatible with GEOS 2.2.1 since thats what I've been using in 
> the interim.  Of course, it won't build automatically since the top 
> level automake files would need to be updated, and I don't think that's 
> an appropriate thing to do for 2.2.1.  Let me know if you think 
> otherwise and I can hop on IRC to discuss.

2.2 doesn't need automatic build.
I'd like to have it for HEAD though.

--strk;

From mateusz at loskot.net  Thu Mar 23 20:13:27 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <20060323093310.GA22011@keybit.net>
References: <20060323093310.GA22011@keybit.net>
Message-ID: <442347B7.5040906@loskot.net>

strk@refractions.net wrote:
> I've completed the namespaces and headers split step.

Great work!

> GEOS namespaces now reflect JTS packages, and all classes are named 
> after JTS classes/interfaces. There are now duplicated names, but in 
> different namespaces (as it is for JTS).

Are behind those duplicated names also duplicated types?

If you don't mind, I'd have one more suggestion.
Currently, the source tree is quite complex and the main trunk with
implementation files (.cpp) includes its mirror in form of headers subdirs.
Here is short example presenting how does it look like now:

/geos/capi
/geos/source/operation/buffer
/geos/source/headers/geos
/geos/source/headers/geos/operation/buffer

So, as you can see, headers directory has the same structure
(operation/buffer) but the only difference is that it contains headers
(.h) files.
Shortly, GEOS follows the concept clear separation of headers and
implementation files, just like common GNU project structure, that includes:

/project-name/src
/project-name/include

Now, my suggestion is to make GEOS' structure more clear by arranging it
in real GNU style.

Here is new version of the example above:

/geos/src/capi
/geos/src/operation/buffer
/geos/include/capi
/geos/include/operation/buffer


In my opinion, the this could make the structure better readable and
clear. As wall as less deep, so it's would make if easier to navigate
through it.
Note, that there would not be much problem with header files inclusion, 
because GEOS' implementation files use include path based on -I compiler 
definition.


What do you think about my suggestion?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 23 22:03:09 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] A word about Javisms
Message-ID: <4423616D.7090501@loskot.net>

Hi,

This post is just a digression about Javisms.
As a C++ purist, I was always affraid of Javisms.
GEOS is a kind of direct port of JTS - Java software - so there
is potential Javisms hazard around.

I'm just reading about design of TUT Framework the its author - Vladimir
Dyuzhev - gives small overview of Javisms in relation of existing ports
of JUnit.

I hope you don't mind if I suggest to take a look at this small
paragraph. That may provoke to reconsidering relation between GEOS and JTS.

http://tut-framework.sourceforge.net/design/

"Javisms

Most implementors of C++ test frameworks know about JUnit and inspired
by this exciting tool. But, carelessly copying a Java implementation to
C++, we can get strange and ugly design.

Rather obvious example: JUnit has methods for setting up a test (setUp)
and for cleaning after it (tearDown). I know at least two C++ frameworks
that have these methods with the same semantics and names. But in C++
the job these methods do is the responsibility of constructor and
destructor! In Java we don't have guaranteed destruction, so JUnit
authors had to invent their own replacement for it - tearDown(); and it
was natural then to introduce constructing counterpart - setUp(). Doing
the same in C++ is absolutely redundant

C++ has its own way of working, and whenever possible, I am going to
stay at the C++ roads, and will not repeat Java implementation just
because it is really good for Java."


Things I'd like to discuss and learn are (in groups):

Should GEOS be direct port - a mirror - of JTS?
If it should, how to make it a mirror but in C++ manner?

Are there any places in GEOS representing Javisms? How to redesing it?
What kind of problems existings Javisms in GEOS causes?
Does it decrease performance in any way?
What is "the right way" to solve and redesign particular
Javisms in GEOS?

What does GEOS compatibility with JTS mean?
Does possible redesign to C++ style will make GEOS incompatible
with JTS in any way?
What about idea to make GEOS compatible with JTS on the level of
interface but not implementation?

Finally, GEOS is a C++ application but how to make C++ API stable?

I'd love to hear your opinion about those issues.

Best regards
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From sgillies at frii.com  Thu Mar 23 22:34:47 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <20060228155731.GA12685@keybit.net>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
Message-ID: <51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>

On Feb 28, 2006, at 8:57 AM, strk@refractions.net wrote:

> On Mon, Feb 27, 2006 at 10:37:42PM -0700, Sean Gillies wrote:
>>
>> On Feb 27, 2006, at 11:11 AM, strk@refractions.net wrote:
>>
>>> On Mon, Feb 27, 2006 at 10:42:35AM -0700, Sean Gillies wrote:
>>>> I'd really like to see a GEOS 2.2.2 release that adds GEOSArea and
>>>> GEOSGeomType to the C API and also incorporates some recent work
>>>> Howard Butler has done to enabling linking the GEOS DLL with  
>>>> MSVC 6.
>>>> I'm willing to help out as much as I can. I could do some of the
>>>> boring stuff like running the tests, updating docs, writing a  
>>>> release
>>>> note. I am also willing to step up and help out with support of the
>>>> old 2.2 branch. How does that sound?
>>>
>>> Sounds good to me.
>>>
>>>> One more question: how far out is 3.0?
>>>
>>> Far enough to make 2.2.2 a good idea :)
>>>
>>> --strk;
>>
>> Great! Howard and I committed changes to geos_c.cpp, geos_c.h.in, and
>> also an nmake file into branch-2-2. I also incremented the revision
>> in configure.in so that the C API is 1.0.2, same as the CVS HEAD.
>>
>> Call on me when it is time to release.
>
> Please take a look at the HOW_TO_RELEASE file in HEAD.
> It contains information on the process. It's a pretty
> new file, so let me know if you have any question you'd
> like to discuss.
>
> Note that it has been written w/out thinking about a 2.2.2 release,
> so I'm not sure about implications of the 2.2.2 release.
>
> In particular, in HEAD we decided to name C++ library after release,
> with every release breaking ABI with previous (libgeos-2.2.2.so).
>
> The 2.2. branch shouldn't have this big change, so we should make it
> binary-compatible with the previous, thus only incrementing MICRO
> version (libgeos.so.2.2.2). We should check if everything goes as
> expected still followin the same release process.
>
> --strk;

Alright, I've read it and seems fine, but your uncertainty about the  
implications confuses me. I've incremented VERSION_PATCH in  
configure.in to 2. Make install results in libgeos.so.2.2.2 and  
libgeos_c.so.1.0.2. I've made dist and verfied that the tarball will  
build and install. Can we tag it and release?

Sean

---
Sean Gillies
http://zcologia.com




From pramsey at refractions.net  Thu Mar 23 22:39:25 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] A word about Javisms
In-Reply-To: <4423616D.7090501@loskot.net>
References: <4423616D.7090501@loskot.net>
Message-ID: <A049AF6D-5C90-43A8-830F-DF9340DDDDE7@refractions.net>


On Mar 23, 2006, at 7:03 PM, Mateusz ?oskot wrote:

> What does GEOS compatibility with JTS mean?

It means that porting concepts, bug fixes, and new algorithms from  
JTS to GEOS not be made difficult by differences in the code bases.   
Why?  Because the limiting factor in the development of GEOS is not C+ 
+ coding expertise, it is computational geometry and geometric  
algorithm expertise.  We are lucky to be able to sponge off of Martin  
Davis' work in JTS, and in particular his expertise in the subject  
matter area.  The years of experience Martin has are not easily  
replicable, so even when we have clients asking us for improvements  
specifically in PostGIS/GEOS (and we do), it makes sense to have  
Martin do them in JTS and then port them, when they are algorithmic  
and conceptual in nature.

> Does possible redesign to C++ style will make GEOS incompatible
> with JTS in any way?

That is in the eyes of the person who will have to do the ports,  
Sandro.  So as long as it is still clear enough to him, it works for  
me.  If you want a flavour of it, diff the JTS source from 1.7 to the  
present and then see if you can figure out where/how the changes  
effect GEOS.

> What about idea to make GEOS compatible with JTS on the level of
> interface but not implementation?

It is actually the implementation which matters, in this case.

> Finally, GEOS is a C++ application but how to make C++ API stable?

Is the API not stable?  (Well, if you guys stop reorganizing code and  
namespaces, it will get stable, but I assume this is a one-time spasm.)

P.

>
> I'd love to hear your opinion about those issues.
>
> Best regards
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From pramsey at refractions.net  Thu Mar 23 22:45:46 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] A word about Javisms
In-Reply-To: <A049AF6D-5C90-43A8-830F-DF9340DDDDE7@refractions.net>
References: <4423616D.7090501@loskot.net>
	<A049AF6D-5C90-43A8-830F-DF9340DDDDE7@refractions.net>
Message-ID: <69470723-4609-462D-B76E-D323DD53E270@refractions.net>

I should point out here, that the JTS relationship has been virtuous  
in both directions. The GEOS community has had performance issues  
which for some reason the JTS using community has not, and this has  
resulted in a number of efficiency ideas which have migrated from the  
GEOS list and implementations back into JTS as Martin saw the merit  
in them.  (Primarily rather simple short-circuit ideas which were not  
required for JTS correctness but make a big difference in the Real  
World when things start getting exercised.)

P

On Mar 23, 2006, at 7:39 PM, Paul Ramsey wrote:

> It means that porting concepts, bug fixes, and new algorithms from  
> JTS to GEOS not be made difficult by differences in the code  
> bases.  Why?  Because the limiting factor in the development of  
> GEOS is not C++ coding expertise, it is computational geometry and  
> geometric algorithm expertise.  We are lucky to be able to sponge  
> off of Martin Davis' work in JTS, and in particular his expertise  
> in the subject matter area.  The years of experience Martin has are  
> not easily replicable, so even when we have clients asking us for  
> improvements specifically in PostGIS/GEOS (and we do), it makes  
> sense to have Martin do them in JTS and then port them, when they  
> are algorithmic and conceptual in nature.


From strk at refractions.net  Fri Mar 24 04:23:27 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <442347B7.5040906@loskot.net>
References: <20060323093310.GA22011@keybit.net> <442347B7.5040906@loskot.net>
Message-ID: <20060324092327.GB35448@keybit.net>

Yes, taking include out of source/ seems fine to me.
CAPI should still reside outside of the main src/ IMHO, as
it's really an additional interface, and a separate library.

Also, renaming 'source' to 'src' seems good.
Time for SVN ?

--strk;

On Fri, Mar 24, 2006 at 02:13:27AM +0100, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> >I've completed the namespaces and headers split step.
> 
> Great work!
> 
> >GEOS namespaces now reflect JTS packages, and all classes are named 
> >after JTS classes/interfaces. There are now duplicated names, but in 
> >different namespaces (as it is for JTS).
> 
> Are behind those duplicated names also duplicated types?
> 
> If you don't mind, I'd have one more suggestion.
> Currently, the source tree is quite complex and the main trunk with
> implementation files (.cpp) includes its mirror in form of headers subdirs.
> Here is short example presenting how does it look like now:
> 
> /geos/capi
> /geos/source/operation/buffer
> /geos/source/headers/geos
> /geos/source/headers/geos/operation/buffer
> 
> So, as you can see, headers directory has the same structure
> (operation/buffer) but the only difference is that it contains headers
> (.h) files.
> Shortly, GEOS follows the concept clear separation of headers and
> implementation files, just like common GNU project structure, that includes:
> 
> /project-name/src
> /project-name/include
> 
> Now, my suggestion is to make GEOS' structure more clear by arranging it
> in real GNU style.
> 
> Here is new version of the example above:
> 
> /geos/src/capi
> /geos/src/operation/buffer
> /geos/include/capi
> /geos/include/operation/buffer
> 
> 
> In my opinion, the this could make the structure better readable and
> clear. As wall as less deep, so it's would make if easier to navigate
> through it.
> Note, that there would not be much problem with header files inclusion, 
> because GEOS' implementation files use include path based on -I compiler 
> definition.
> 
> 
> What do you think about my suggestion?
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Fri Mar 24 04:52:42 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
Message-ID: <20060324095242.GC35448@keybit.net>

On Thu, Mar 23, 2006 at 08:34:47PM -0700, Sean Gillies wrote:

> >Please take a look at the HOW_TO_RELEASE file in HEAD.
> >It contains information on the process. It's a pretty
> >new file, so let me know if you have any question you'd
> >like to discuss.
> >
> >Note that it has been written w/out thinking about a 2.2.2 release,
> >so I'm not sure about implications of the 2.2.2 release.
> >
> >In particular, in HEAD we decided to name C++ library after release,
> >with every release breaking ABI with previous (libgeos-2.2.2.so).
> >
> >The 2.2. branch shouldn't have this big change, so we should make it
> >binary-compatible with the previous, thus only incrementing MICRO
> >version (libgeos.so.2.2.2). We should check if everything goes as
> >expected still followin the same release process.
> >
> >--strk;
> 
> Alright, I've read it and seems fine, but your uncertainty about the  
> implications confuses me. I've incremented VERSION_PATCH in  
> configure.in to 2. Make install results in libgeos.so.2.2.2 and  
> libgeos_c.so.1.0.2. I've made dist and verfied that the tarball will  
> build and install. Can we tag it and release?

Sounds good to me, as a final test can you run 'make dist', build
and install from the resulting package ? Keep an eye to swig.

--strk;

From mateusz at loskot.net  Fri Mar 24 06:36:09 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <20060324092327.GB35448@keybit.net>
References: <20060323093310.GA22011@keybit.net> <442347B7.5040906@loskot.net>
	<20060324092327.GB35448@keybit.net>
Message-ID: <4423D9A9.9070509@loskot.net>

strk@refractions.net wrote:
> Yes, taking include out of source/ seems fine to me.

Good!

> CAPI should still reside outside of the main src/ IMHO, as
> it's really an additional interface, and a separate library.

Yes.

> Also, renaming 'source' to 'src' seems good.

Yes.

> Time for SVN ?

That would be the best to move to SVN first.
Then every rename/move/delete operation will be versioned well, so it 
makes possible to get back in case of problems.

AFAIK the decision about SVN is in Paul Ramsey's hands. Right?

strk do you mind to move to SVN soon?
Paul, what do you think about moving to SVN soon?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From pramsey at refractions.net  Fri Mar 24 08:12:40 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <20060324092327.GB35448@keybit.net>
References: <20060323093310.GA22011@keybit.net> <442347B7.5040906@loskot.net>
	<20060324092327.GB35448@keybit.net>
Message-ID: <A769C77B-1AA8-4976-A6F1-7E3E5B8E95E8@refractions.net>

Won't be time until Monday or Tuesday next, as I am away until  
then... you can use the intervening time to be sure you are sure...
:)
P
On 24-Mar-06, at 1:23 AM, strk@refractions.net wrote:

> Yes, taking include out of source/ seems fine to me.
> CAPI should still reside outside of the main src/ IMHO, as
> it's really an additional interface, and a separate library.
>
> Also, renaming 'source' to 'src' seems good.
> Time for SVN ?
>
> --strk;
>
> On Fri, Mar 24, 2006 at 02:13:27AM +0100, Mateusz ??oskot wrote:
>> strk@refractions.net wrote:
>>> I've completed the namespaces and headers split step.
>>
>> Great work!
>>
>>> GEOS namespaces now reflect JTS packages, and all classes are named
>>> after JTS classes/interfaces. There are now duplicated names, but in
>>> different namespaces (as it is for JTS).
>>
>> Are behind those duplicated names also duplicated types?
>>
>> If you don't mind, I'd have one more suggestion.
>> Currently, the source tree is quite complex and the main trunk with
>> implementation files (.cpp) includes its mirror in form of headers  
>> subdirs.
>> Here is short example presenting how does it look like now:
>>
>> /geos/capi
>> /geos/source/operation/buffer
>> /geos/source/headers/geos
>> /geos/source/headers/geos/operation/buffer
>>
>> So, as you can see, headers directory has the same structure
>> (operation/buffer) but the only difference is that it contains  
>> headers
>> (.h) files.
>> Shortly, GEOS follows the concept clear separation of headers and
>> implementation files, just like common GNU project structure, that  
>> includes:
>>
>> /project-name/src
>> /project-name/include
>>
>> Now, my suggestion is to make GEOS' structure more clear by  
>> arranging it
>> in real GNU style.
>>
>> Here is new version of the example above:
>>
>> /geos/src/capi
>> /geos/src/operation/buffer
>> /geos/include/capi
>> /geos/include/operation/buffer
>>
>>
>> In my opinion, the this could make the structure better readable and
>> clear. As wall as less deep, so it's would make if easier to navigate
>> through it.
>> Note, that there would not be much problem with header files  
>> inclusion,
>> because GEOS' implementation files use include path based on -I  
>> compiler
>> definition.
>>
>>
>> What do you think about my suggestion?
>>
>> Cheers
>> -- 
>> Mateusz ??oskot
>> http://mateusz.loskot.net
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>
> -- 
>
>  /"\    ASCII Ribbon Campaign
>  \ /    Respect for low technology.
>   X     Keep e-mail messages readable by any computer system.
>  / \    Keep it ASCII.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From mateusz at loskot.net  Fri Mar 24 08:40:44 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <A769C77B-1AA8-4976-A6F1-7E3E5B8E95E8@refractions.net>
References: <20060323093310.GA22011@keybit.net>
	<442347B7.5040906@loskot.net>	<20060324092327.GB35448@keybit.net>
	<A769C77B-1AA8-4976-A6F1-7E3E5B8E95E8@refractions.net>
Message-ID: <4423F6DC.5000108@loskot.net>

Paul Ramsey wrote:
> Won't be time until Monday or Tuesday next, as I am away until  then... 
> you can use the intervening time to be sure you are sure...
> :)

I'm just pushing a proposal with hope that Sandro will make a good decision.

I agree with SVN, but also if Sandro will decide it's not necessary and 
my proposal is not good, then situation is clear ;-)

p.s. It's not a secret that I'm often like a demon
whispering from behind your shoulders ;-)))

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From sgillies at frii.com  Fri Mar 24 09:00:49 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <4423F6DC.5000108@loskot.net>
References: <20060323093310.GA22011@keybit.net>
	<442347B7.5040906@loskot.net>	<20060324092327.GB35448@keybit.net>
	<A769C77B-1AA8-4976-A6F1-7E3E5B8E95E8@refractions.net>
	<4423F6DC.5000108@loskot.net>
Message-ID: <8D9EF608-1C93-433F-A086-65F1A934E4C0@frii.com>

On Mar 24, 2006, at 6:40 AM, Mateusz ?oskot wrote:

> Paul Ramsey wrote:
>> Won't be time until Monday or Tuesday next, as I am away until   
>> then... you can use the intervening time to be sure you are sure...
>> :)
>
> I'm just pushing a proposal with hope that Sandro will make a good  
> decision.
>
> I agree with SVN, but also if Sandro will decide it's not necessary  
> and my proposal is not good, then situation is clear ;-)
>
> p.s. It's not a secret that I'm often like a demon
> whispering from behind your shoulders ;-)))

And maybe a serious issue tracker? Once you've got SVN going, Trac  
(just an example) is not at all hard to install and admin.

cheers,
Sean

---
Sean Gillies
http://zcologia.com




From sgillies at frii.com  Fri Mar 24 09:11:10 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <20060324095242.GC35448@keybit.net>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
Message-ID: <A1929B91-376A-4F62-9F99-715D62F5E9E8@frii.com>

On Mar 24, 2006, at 2:52 AM, strk@refractions.net wrote:

> On Thu, Mar 23, 2006 at 08:34:47PM -0700, Sean Gillies wrote:
>
>>> Please take a look at the HOW_TO_RELEASE file in HEAD.
>>> It contains information on the process. It's a pretty
>>> new file, so let me know if you have any question you'd
>>> like to discuss.
>>>
>>> Note that it has been written w/out thinking about a 2.2.2 release,
>>> so I'm not sure about implications of the 2.2.2 release.
>>>
>>> In particular, in HEAD we decided to name C++ library after release,
>>> with every release breaking ABI with previous (libgeos-2.2.2.so).
>>>
>>> The 2.2. branch shouldn't have this big change, so we should make it
>>> binary-compatible with the previous, thus only incrementing MICRO
>>> version (libgeos.so.2.2.2). We should check if everything goes as
>>> expected still followin the same release process.
>>>
>>> --strk;
>>
>> Alright, I've read it and seems fine, but your uncertainty about the
>> implications confuses me. I've incremented VERSION_PATCH in
>> configure.in to 2. Make install results in libgeos.so.2.2.2 and
>> libgeos_c.so.1.0.2. I've made dist and verfied that the tarball will
>> build and install. Can we tag it and release?
>
> Sounds good to me, as a final test can you run 'make dist', build
> and install from the resulting package ? Keep an eye to swig.
>
> --strk;

Done. Checks out. Swig Python module builds as well, but I'm starting  
to think that the swig interface should be discouraged for the same  
reasons you discourage use of the C++ API. There's no stability to it.

Sean
---
Sean Gillies
http://zcologia.com




From mateusz at loskot.net  Fri Mar 24 09:15:26 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Namespaces and headers split
In-Reply-To: <8D9EF608-1C93-433F-A086-65F1A934E4C0@frii.com>
References: <20060323093310.GA22011@keybit.net>	<442347B7.5040906@loskot.net>	<20060324092327.GB35448@keybit.net>	<A769C77B-1AA8-4976-A6F1-7E3E5B8E95E8@refractions.net>	<4423F6DC.5000108@loskot.net>
	<8D9EF608-1C93-433F-A086-65F1A934E4C0@frii.com>
Message-ID: <4423FEFE.2090709@loskot.net>

Sean Gillies wrote:
> On Mar 24, 2006, at 6:40 AM, Mateusz ?oskot wrote:
>> Paul Ramsey wrote:
>>
>>> Won't be time until Monday or Tuesday next, as I am away until   
>>> then... you can use the intervening time to be sure you are sure...
>>> :)
>>
>> I'm just pushing a proposal with hope that Sandro will make a good  
>> decision.
>>
>> I agree with SVN, but also if Sandro will decide it's not necessary  
>> and my proposal is not good, then situation is clear ;-)
>>
>> p.s. It's not a secret that I'm often like a demon
>> whispering from behind your shoulders ;-)))
> 
> 
> And maybe a serious issue tracker? Once you've got SVN going, Trac  
> (just an example) is not at all hard to install and admin.


Hmm, what's wrong with BT?
http://postgis.refractions.net/bugs/index.php

It's simple but does the job well.

Regarding other tracking tools, Edgewall Trac is my favourite too.
So, if there would be any idea to move Bug Tracker to other engine, I'd 
vote for Trac.

BTW, QGIS is also going to migrate current bug tracker from SF.net to 
other engine. Here is poll on this subject:
http://postgis.refractions.net/bugs/index.php

p.s. I'm quite surprised Bugzilla has such many votes :-)))

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From cfis at interserv.com  Fri Mar 24 16:35:48 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <20060324095242.GC35448@keybit.net>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>	<20060227181154.GA545@keybit.net>	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>	<20060228155731.GA12685@keybit.net>	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
Message-ID: <44246634.4090008@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060324/ca0f0687/smime.bin
From strk at refractions.net  Mon Mar 27 04:07:58 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <44246634.4090008@interserv.com>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
Message-ID: <20060327090758.GC74063@keybit.net>

On Fri, Mar 24, 2006 at 02:35:48PM -0700, Charlie Savage wrote:
> Do we want to include the swig patches I have for 2.2.2?  Includes Ruby 
> bindings, and more polished Python bindings.

No problem for me. I'm pretty much assorbed in HEAD, and it might
come out not much later then 2.2.2.
BTW, class renames is finished, did you give HEAD a try with swig ?

--strk;


From sgillies at frii.com  Mon Mar 27 09:15:55 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <20060327090758.GC74063@keybit.net>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
	<20060327090758.GC74063@keybit.net>
Message-ID: <422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>

On Mar 27, 2006, at 2:07 AM, strk@refractions.net wrote:

> On Fri, Mar 24, 2006 at 02:35:48PM -0700, Charlie Savage wrote:
>> Do we want to include the swig patches I have for 2.2.2?  Includes  
>> Ruby
>> bindings, and more polished Python bindings.
>
> No problem for me. I'm pretty much assorbed in HEAD, and it might
> come out not much later then 2.2.2.
> BTW, class renames is finished, did you give HEAD a try with swig ?
>
> --strk;
>

Charlie, I feel that we shouldn't make significant changes like that  
in a point release. Besides, isn't the SWIG API going to break from  
2.2 to 3.0? It doesn't make sense to me to release something that  
will be immediately broken.

Anything else I can do to get 2.2.2 out the door, Sandro?

Sean

---
Sean Gillies
http://zcologia.com




From strk at refractions.net  Mon Mar 27 11:58:22 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
	<20060327090758.GC74063@keybit.net>
	<422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
Message-ID: <20060327165822.GA79860@keybit.net>

On Mon, Mar 27, 2006 at 07:15:55AM -0700, Sean Gillies wrote:
> On Mar 27, 2006, at 2:07 AM, strk@refractions.net wrote:
> 
> >On Fri, Mar 24, 2006 at 02:35:48PM -0700, Charlie Savage wrote:
> >>Do we want to include the swig patches I have for 2.2.2?  Includes  
> >>Ruby
> >>bindings, and more polished Python bindings.
> >
> >No problem for me. I'm pretty much assorbed in HEAD, and it might
> >come out not much later then 2.2.2.
> >BTW, class renames is finished, did you give HEAD a try with swig ?
> >
> >--strk;
> >
> 
> Charlie, I feel that we shouldn't make significant changes like that  
> in a point release. Besides, isn't the SWIG API going to break from  
> 2.2 to 3.0? It doesn't make sense to me to release something that  
> will be immediately broken.
> 
> Anything else I can do to get 2.2.2 out the door, Sandro?

I'm still unsure about versioning of the C library.
Having added new functions we should increment MINOR.

Could you check what happens using:
 CAPI_INTERFACE_CURRENT=2
 CAPI_INTERFACE_REVISION=0
 CAPI_INTERFACE_AGE=1
?

It should produce (on Linux): libgeos_c.so.1.1.0

SONAME should be libgeos_c.so.1 so this shouldn't represent
a binary incompatibility. At least it is on my system
(GNU/Linux)

readelf -a <path_to>/libgeos_c.so | grep -i SONAME

--strk;

From sgillies at frii.com  Mon Mar 27 14:48:44 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <20060327165822.GA79860@keybit.net>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
	<20060327090758.GC74063@keybit.net>
	<422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
	<20060327165822.GA79860@keybit.net>
Message-ID: <A76A421D-B6BA-40CB-907B-C6C087A26F4E@frii.com>

On Mar 27, 2006, at 9:58 AM, strk@refractions.net wrote:

> On Mon, Mar 27, 2006 at 07:15:55AM -0700, Sean Gillies wrote:
>> On Mar 27, 2006, at 2:07 AM, strk@refractions.net wrote:
>>
>>> On Fri, Mar 24, 2006 at 02:35:48PM -0700, Charlie Savage wrote:
>>>> Do we want to include the swig patches I have for 2.2.2?  Includes
>>>> Ruby
>>>> bindings, and more polished Python bindings.
>>>
>>> No problem for me. I'm pretty much assorbed in HEAD, and it might
>>> come out not much later then 2.2.2.
>>> BTW, class renames is finished, did you give HEAD a try with swig ?
>>>
>>> --strk;
>>>
>>
>> Charlie, I feel that we shouldn't make significant changes like that
>> in a point release. Besides, isn't the SWIG API going to break from
>> 2.2 to 3.0? It doesn't make sense to me to release something that
>> will be immediately broken.
>>
>> Anything else I can do to get 2.2.2 out the door, Sandro?
>
> I'm still unsure about versioning of the C library.
> Having added new functions we should increment MINOR.
>
> Could you check what happens using:
>  CAPI_INTERFACE_CURRENT=2
>  CAPI_INTERFACE_REVISION=0
>  CAPI_INTERFACE_AGE=1
> ?
>
> It should produce (on Linux): libgeos_c.so.1.1.0

That's what I get.

>
> SONAME should be libgeos_c.so.1 so this shouldn't represent
> a binary incompatibility. At least it is on my system
> (GNU/Linux)
>
> readelf -a <path_to>/libgeos_c.so | grep -i SONAME
>
> --strk;

Same here. I'll commit that change to configure.in now.

Sean



From cfis at interserv.com  Mon Mar 27 16:08:03 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
	<20060327090758.GC74063@keybit.net>
	<422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
Message-ID: <44285433.4060802@interserv.com>

Actually, the bindings work on both 2.2.2 and 3.0.  The main difference 
is the renaming of a couple of classes, other than that the bindings 
just mirror whatever the C++ api is.

I'm fine either way on this, just thought it be nice to get out there 
for people to use.

Strk - any timeline on a 3.0 release?

And sorry, haven't looked at head yet...but will.

Charlie

Sean Gillies wrote:
> On Mar 27, 2006, at 2:07 AM, strk@refractions.net wrote:
>
>> On Fri, Mar 24, 2006 at 02:35:48PM -0700, Charlie Savage wrote:
>>> Do we want to include the swig patches I have for 2.2.2?  Includes Ruby
>>> bindings, and more polished Python bindings.
>>
>> No problem for me. I'm pretty much assorbed in HEAD, and it might
>> come out not much later then 2.2.2.
>> BTW, class renames is finished, did you give HEAD a try with swig ?
>>
>> --strk;
>>
>
> Charlie, I feel that we shouldn't make significant changes like that 
> in a point release. Besides, isn't the SWIG API going to break from 
> 2.2 to 3.0? It doesn't make sense to me to release something that will 
> be immediately broken.
>
> Anything else I can do to get 2.2.2 out the door, Sandro?
>
> Sean
>
> ---
> Sean Gillies
> http://zcologia.com
>
>
>
>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060327/f2c0c984/smime.bin
From strk at refractions.net  Tue Mar 28 03:26:13 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <44285433.4060802@interserv.com>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>
	<20060227181154.GA545@keybit.net>
	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
	<20060327090758.GC74063@keybit.net>
	<422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
	<44285433.4060802@interserv.com>
Message-ID: <20060328082613.GA87797@keybit.net>

On Mon, Mar 27, 2006 at 02:08:03PM -0700, Charlie Savage wrote:
> Actually, the bindings work on both 2.2.2 and 3.0.  The main difference 
> is the renaming of a couple of classes, other than that the bindings 
> just mirror whatever the C++ api is.
> 
> I'm fine either way on this, just thought it be nice to get out there 
> for people to use.

That's ok for me, it will delay release 2.2.2 by the time
needed to touch build scripts. If you provide them
looking at the python ones I'll wait.

> Strk - any timeline on a 3.0 release?

Not yet. I'd like to receive some feedback
about reduction of installed C++ headers.
Beside, I didn't look at SWIG binding, how many
classes are actually exposed ? Maybe C++ exposure
could follow SWIG one.

> And sorry, haven't looked at head yet...but will.

That'll also help releasing sooner.

--strk;

From mateusz at loskot.net  Wed Mar 29 01:28:04 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New release of TUT is available
Message-ID: <442A28F4.4010902@loskot.net>

Hi,

The latest TUT includes new callback events: group_started() and
group_completed().

http://tut-framework.sourceforge.net/download/

Cheers

-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Wed Mar 29 02:47:20 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New release of TUT is available
In-Reply-To: <442A28F4.4010902@loskot.net>
References: <442A28F4.4010902@loskot.net>
Message-ID: <20060329074720.GE92709@keybit.net>

Mateus, we need unit tests.
If newer tut is still just an header AND
existing tests don't need to be changed to use
the new one, I have no problem in using it.
Anyway, I'd rather rely on an older version,
probably less bogus, and go on with tests writing.
We can switch later.
Do you have any new on that front ?
I added a test for WKB I/O. Very simple, simpler
then the corresponding JTS test.

--strk;

On Wed, Mar 29, 2006 at 08:28:04AM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> The latest TUT includes new callback events: group_started() and
> group_completed().
> 
> http://tut-framework.sourceforge.net/download/
> 
> Cheers
> 
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net

From cfis at interserv.com  Wed Mar 29 14:21:24 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <20060328082613.GA87797@keybit.net>
References: <2BB776E4-D87A-4D2A-B36E-C8AEDB1AA65C@frii.com>	<20060227181154.GA545@keybit.net>	<D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>	<20060228155731.GA12685@keybit.net>	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>	<20060324095242.GC35448@keybit.net>	<44246634.4090008@interserv.com>	<20060327090758.GC74063@keybit.net>	<422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>	<44285433.4060802@interserv.com>
	<20060328082613.GA87797@keybit.net>
Message-ID: <442ADE34.20806@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060329/1417a1aa/smime.bin
From mateusz at loskot.net  Thu Mar 30 00:02:27 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] No default constructor in Triangle
Message-ID: <442B6663.7060107@loskot.net>

Hi,

Is there any rationale behind not including default constructor in
Triangle class?
I can't see any such. If user would want to create a collection of
triangles then the situation becomes quite complex, so I'd suggest to
include default constructor.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 01:21:06 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] WKTReader - ambiguous comments
Message-ID: <442B78D2.5020802@loskot.net>

Hi,

The WKTReader constructor:
WKTReader(const geom::GeometryFactory *gf);
takes geometry factory by const pointer and
as I see it creates internal copy of object pointed by gf pointer:

// WKTReader.inl file

WKTReader::WKTReader(const geom::GeometryFactory *gf)
: geometryFactory(gf)

Here, copy constructor of GeometryFactory is called.

I'd suggest to add appropriate explanation about what exactly WKTReader
constructor does - that it creates a copy of GeometryFactory instance.
Now, the comment is as follows and IMHO it's quite ambiguous, especially
this part "be sure you'll keep the factory alive":

* Note that all Geometry objects created by the
* parser will contain a pointer to the given factory
* so be sure you'll keep the factory alive for the
* whole WKTReader and created Geometry life.


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From sgillies at frii.com  Thu Mar 30 03:45:12 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
Message-ID: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>

strk,

I have a program that was running almost leak free with GEOS 2.2.1,  
but I am seeing leaks now with the head of the 2.2 branch. I'm using  
valgrind.

==16249==
==16249== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 9361  
from 7)
==16249== malloc/free: in use at exit: 1468711 bytes in 1164 blocks.
==16249== malloc/free: 30535 allocs, 29371 frees, 4851492 bytes  
allocated.
==16249== For counts of detected errors, rerun with: -v
==16249== searching for pointers to 1164 not-freed blocks.
==16249== checked 14088580 bytes.
==16249==
==16249== 16 bytes in 1 blocks are definitely lost in loss record 10  
of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1CA4D124: initGEOS (geos_c.cpp:162)
==16249==    by 0x1C090677: init_geom (_geommodule.c:2197)
==16249==    by 0x80CB80D: _PyImport_LoadDynamicModule (importdl.c:53)

^^^^^
This 16 bytes was the only leak I saw in 2.2.1.

Here are the new ones:

==16249==
==16249==
==16249== 24 bytes in 1 blocks are definitely lost in loss record 14  
of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C7C6B: geos::GeometryFactory::createLinearRing 
(geos::CoordinateSequence*) const (GeometryFactory.cpp:423)
==16249==    by 0x1CA5223E: GEOSGeom_createLinearRing (geos_c.cpp:1938)
==16249==    by 0x1C0911AE: Geometry_copyFromCoordSeq (_geommodule.c: 
676)
==16249==
==16249==
==16249== 48 bytes in 2 blocks are definitely lost in loss record 23  
of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C7D13: geos::GeometryFactory::createMultiPoint 
(std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
const (GeometryFactory.cpp:459)
==16249==    by 0x1C504E5F: geos::WKBReader::readMultiPoint()  
(WKBReader.cpp:195)
==16249==    by 0x1C5044DC: geos::WKBReader::readGeometry()  
(WKBReader.cpp:113)
==16249==
==16249==
==16249== 72 bytes in 3 blocks are definitely lost in loss record 29  
of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C7A33: geos::GeometryFactory::createMultiPolygon 
(std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
const (GeometryFactory.cpp:362)
==16249==    by 0x1C505517: geos::WKBReader::readMultiPolygon()  
(WKBReader.cpp:243)
==16249==    by 0x1C5044F9: geos::WKBReader::readGeometry()  
(WKBReader.cpp:117)
==16249==
==16249==
==16249== 72 bytes in 3 blocks are definitely lost in loss record 30  
of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C74BB:  
geos::GeometryFactory::createMultiLineString 
(std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
const (GeometryFactory.cpp:234)
==16249==    by 0x1C5051BB: geos::WKBReader::readMultiLineString()  
(WKBReader.cpp:219)
==16249==    by 0x1C5044E9: geos::WKBReader::readGeometry()  
(WKBReader.cpp:115)
==16249==
==16249==
==16249== 264 bytes in 11 blocks are definitely lost in loss record  
45 of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C833F: geos::GeometryFactory::createLineString 
(geos::CoordinateSequence*) const (GeometryFactory.cpp:613)
==16249==    by 0x1CA5235A: GEOSGeom_createLineString (geos_c.cpp:1961)
==16249==    by 0x1C091218: Geometry_copyFromCoordSeq (_geommodule.c: 
673)
==16249==
==16249==
==16249== 308 bytes in 11 blocks are definitely lost in loss record  
48 of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C80CF: geos::GeometryFactory::createPolygon 
(geos::LinearRing*, std::vector<geos::Geometry*,  
std::allocator<geos::Geometry*> >*) const (GeometryFactory.cpp:554)
==16249==    by 0x1C501846: geos::WKTReader::readPolygonText 
(geos::StringTokenizer*) (WKTReader.cpp:242)
==16249==    by 0x1C501270: geos::WKTReader::readGeometryTaggedText 
(geos::StringTokenizer*) (WKTReader.cpp:173)
==16249==
==16249==
==16249== 432 bytes in 18 blocks are definitely lost in loss record  
53 of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C77FB:  
geos::GeometryFactory::createGeometryCollection 
(std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
const (GeometryFactory.cpp:304)
==16249==    by 0x1C501F20:  
geos::WKTReader::readGeometryCollectionText(geos::StringTokenizer*)  
(WKTReader.cpp:296)
==16249==    by 0x1C501310: geos::WKTReader::readGeometryTaggedText 
(geos::StringTokenizer*) (WKTReader.cpp:181)
==16249==
==16249==
==16249== 1776 bytes in 74 blocks are definitely lost in loss record  
65 of 78
==16249==    at 0x1B904BF7: operator new(unsigned)  
(vg_replace_malloc.c:133)
==16249==    by 0x1C4C738F: geos::GeometryFactory::createPoint 
(geos::CoordinateSequence*) const (GeometryFactory.cpp:183)
==16249==    by 0x1CA52122: GEOSGeom_createPoint (geos_c.cpp:1915)
==16249==    by 0x1C0911F2: Geometry_copyFromCoordSeq (_geommodule.c: 
670)
==16249==
==16249== LEAK SUMMARY:
==16249==    definitely lost: 3012 bytes in 124 blocks.
==16249==    possibly lost:   0 bytes in 0 blocks.
==16249==    still reachable: 1465499 bytes in 1039 blocks.
==16249==         suppressed: 200 bytes in 1 blocks.
==16249== Reachable blocks (those to which a pointer was found) are  
not shown.
==16249== To see them, rerun with: --show-reachable=yes
[sean@lenny tests]$

Any ideas?

---
Sean Gillies
http://zcologia.com




From strk at refractions.net  Thu Mar 30 04:21:48 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Petition for a 2.2.2 release
In-Reply-To: <442ADE34.20806@interserv.com>
References: <D4AF574B-8B7D-4B8D-A0E1-31CC211205CE@frii.com>
	<20060228155731.GA12685@keybit.net>
	<51E32BA9-9342-48A2-9F35-A864ED777277@frii.com>
	<20060324095242.GC35448@keybit.net>
	<44246634.4090008@interserv.com>
	<20060327090758.GC74063@keybit.net>
	<422DAC7A-5649-4518-83E3-316D2A8657EB@frii.com>
	<44285433.4060802@interserv.com>
	<20060328082613.GA87797@keybit.net> <442ADE34.20806@interserv.com>
Message-ID: <20060330092148.GC16421@keybit.net>

On Wed, Mar 29, 2006 at 12:21:24PM -0700, Charlie Savage wrote:
> Hi Strk,
> 
> Thanks for the patience.
> 
> Took a look at this last night.  The problems with the python make file 
> appear automake related.  IE., the generated build file is wrong.  It 
> includes @....@ markers that are not replaced by automake. No solution 
> yet, not sure what is going wrong.

I woudn't put too much effort in this, if nobody comes out
with a working solution we can revert to 2.2.2 behaviour
of just including sources in distribution w/out attempting
to automatically build them.

> Second, the change in the header files has broken SWIG.  SWIG doesn't 
> follow #includes, thus the bindings have to be updated to include the 
> correct #includes.  I am thinking of just adding in the ones defined in 
> geom.h and the io headers.  Does that sound right?

As far as SWIG uses it's own bindings the changes breaking it
are: namespaces addition and some classes rename. Hopefully
none of the omonimous classes in different namespaces needs
to be directly accessed by SWIG.
Headers included by geom.h and io.h might still be too wide
for my taste.
Try to only use headers named after classes.
As a sit-on-the-pants guess you'd need:
	Geometry.h
	GeometryFactory.h
	PrecisionModel.h
	CoordinateSequenceFactory.h
	Coordinate.h
	CoordinateSequence.h
	WKB{Reader,Writer}.h
	WKT{Reader,Writer}.h
	GEOSException.h 
	(actually derived from std::exception, so possibly
	 not even needed)

If you need access to Geometry derivates please use the
specific headers:
	Point.h
	LineString.h
	LinearRing.h
	Polygon.h
	MultiPoint.h
	MultiLineString.h
	MultiPolygon.h
	GeometryCollection.h

But the fewer, the better.
	

> To answer your question below, SWIG exposes the GEOS version, the 
> geometry classes, and the IO classes.  It also exposes a couple of other 
> header files that ended up being needed via includes from the top header 
> file.

With the new layout all "specific" headers use Forward Declarations
when possible, so the cascade effect should be much less intrusive.
A problem is that inlining makes this effect wider.
Inlining will be the default. Users will be able to disable
inlining. Wheter library was compiled with or w/out inlining
can be obtained by running geos-config --cflags. Inlined
builds will result in -DGEOS_INLINE being part of the flags.

> If you have suggestions on what should be exposed let me know.  It a 
> matter of pointing SWIG at the header files you want to be wrapped.

I hope the above answers your question.

--strk;

> 
> Charlie
> 
> 
> strk@refractions.net wrote:
> >On Mon, Mar 27, 2006 at 02:08:03PM -0700, Charlie Savage wrote:
> >  
> >>Actually, the bindings work on both 2.2.2 and 3.0.  The main difference 
> >>is the renaming of a couple of classes, other than that the bindings 
> >>just mirror whatever the C++ api is.
> >>
> >>I'm fine either way on this, just thought it be nice to get out there 
> >>for people to use.
> >>    
> >
> >That's ok for me, it will delay release 2.2.2 by the time
> >needed to touch build scripts. If you provide them
> >looking at the python ones I'll wait.
> >
> >  
> >>Strk - any timeline on a 3.0 release?
> >>    
> >
> >Not yet. I'd like to receive some feedback
> >about reduction of installed C++ headers.
> >Beside, I didn't look at SWIG binding, how many
> >classes are actually exposed ? Maybe C++ exposure
> >could follow SWIG one.
> >
> >  
> >>And sorry, haven't looked at head yet...but will.
> >>    
> >
> >That'll also help releasing sooner.
> >
> >--strk;
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> >
> >  



> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Thu Mar 30 04:25:25 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
In-Reply-To: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
References: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
Message-ID: <20060330092525.GD16421@keybit.net>

It looks like you're not deleting the Geometries returned
by some functions. If youre *positive* you do are releasing
that memory there might be the same horrible bug I'm hunting
in the HEAD branch: memory corruption, confusing every
memory checker I've tested so far.

--strk;


On Thu, Mar 30, 2006 at 01:45:12AM -0700, Sean Gillies wrote:
> strk,
> 
> I have a program that was running almost leak free with GEOS 2.2.1,  
> but I am seeing leaks now with the head of the 2.2 branch. I'm using  
> valgrind.
> 
> ==16249==
> ==16249== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 9361  
> from 7)
> ==16249== malloc/free: in use at exit: 1468711 bytes in 1164 blocks.
> ==16249== malloc/free: 30535 allocs, 29371 frees, 4851492 bytes  
> allocated.
> ==16249== For counts of detected errors, rerun with: -v
> ==16249== searching for pointers to 1164 not-freed blocks.
> ==16249== checked 14088580 bytes.
> ==16249==
> ==16249== 16 bytes in 1 blocks are definitely lost in loss record 10  
> of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1CA4D124: initGEOS (geos_c.cpp:162)
> ==16249==    by 0x1C090677: init_geom (_geommodule.c:2197)
> ==16249==    by 0x80CB80D: _PyImport_LoadDynamicModule (importdl.c:53)
> 
> ^^^^^
> This 16 bytes was the only leak I saw in 2.2.1.
> 
> Here are the new ones:
> 
> ==16249==
> ==16249==
> ==16249== 24 bytes in 1 blocks are definitely lost in loss record 14  
> of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C7C6B: geos::GeometryFactory::createLinearRing 
> (geos::CoordinateSequence*) const (GeometryFactory.cpp:423)
> ==16249==    by 0x1CA5223E: GEOSGeom_createLinearRing (geos_c.cpp:1938)
> ==16249==    by 0x1C0911AE: Geometry_copyFromCoordSeq (_geommodule.c: 
> 676)
> ==16249==
> ==16249==
> ==16249== 48 bytes in 2 blocks are definitely lost in loss record 23  
> of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C7D13: geos::GeometryFactory::createMultiPoint 
> (std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
> const (GeometryFactory.cpp:459)
> ==16249==    by 0x1C504E5F: geos::WKBReader::readMultiPoint()  
> (WKBReader.cpp:195)
> ==16249==    by 0x1C5044DC: geos::WKBReader::readGeometry()  
> (WKBReader.cpp:113)
> ==16249==
> ==16249==
> ==16249== 72 bytes in 3 blocks are definitely lost in loss record 29  
> of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C7A33: geos::GeometryFactory::createMultiPolygon 
> (std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
> const (GeometryFactory.cpp:362)
> ==16249==    by 0x1C505517: geos::WKBReader::readMultiPolygon()  
> (WKBReader.cpp:243)
> ==16249==    by 0x1C5044F9: geos::WKBReader::readGeometry()  
> (WKBReader.cpp:117)
> ==16249==
> ==16249==
> ==16249== 72 bytes in 3 blocks are definitely lost in loss record 30  
> of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C74BB:  
> geos::GeometryFactory::createMultiLineString 
> (std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
> const (GeometryFactory.cpp:234)
> ==16249==    by 0x1C5051BB: geos::WKBReader::readMultiLineString()  
> (WKBReader.cpp:219)
> ==16249==    by 0x1C5044E9: geos::WKBReader::readGeometry()  
> (WKBReader.cpp:115)
> ==16249==
> ==16249==
> ==16249== 264 bytes in 11 blocks are definitely lost in loss record  
> 45 of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C833F: geos::GeometryFactory::createLineString 
> (geos::CoordinateSequence*) const (GeometryFactory.cpp:613)
> ==16249==    by 0x1CA5235A: GEOSGeom_createLineString (geos_c.cpp:1961)
> ==16249==    by 0x1C091218: Geometry_copyFromCoordSeq (_geommodule.c: 
> 673)
> ==16249==
> ==16249==
> ==16249== 308 bytes in 11 blocks are definitely lost in loss record  
> 48 of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C80CF: geos::GeometryFactory::createPolygon 
> (geos::LinearRing*, std::vector<geos::Geometry*,  
> std::allocator<geos::Geometry*> >*) const (GeometryFactory.cpp:554)
> ==16249==    by 0x1C501846: geos::WKTReader::readPolygonText 
> (geos::StringTokenizer*) (WKTReader.cpp:242)
> ==16249==    by 0x1C501270: geos::WKTReader::readGeometryTaggedText 
> (geos::StringTokenizer*) (WKTReader.cpp:173)
> ==16249==
> ==16249==
> ==16249== 432 bytes in 18 blocks are definitely lost in loss record  
> 53 of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C77FB:  
> geos::GeometryFactory::createGeometryCollection 
> (std::vector<geos::Geometry*, std::allocator<geos::Geometry*> >*)  
> const (GeometryFactory.cpp:304)
> ==16249==    by 0x1C501F20:  
> geos::WKTReader::readGeometryCollectionText(geos::StringTokenizer*)  
> (WKTReader.cpp:296)
> ==16249==    by 0x1C501310: geos::WKTReader::readGeometryTaggedText 
> (geos::StringTokenizer*) (WKTReader.cpp:181)
> ==16249==
> ==16249==
> ==16249== 1776 bytes in 74 blocks are definitely lost in loss record  
> 65 of 78
> ==16249==    at 0x1B904BF7: operator new(unsigned)  
> (vg_replace_malloc.c:133)
> ==16249==    by 0x1C4C738F: geos::GeometryFactory::createPoint 
> (geos::CoordinateSequence*) const (GeometryFactory.cpp:183)
> ==16249==    by 0x1CA52122: GEOSGeom_createPoint (geos_c.cpp:1915)
> ==16249==    by 0x1C0911F2: Geometry_copyFromCoordSeq (_geommodule.c: 
> 670)
> ==16249==
> ==16249== LEAK SUMMARY:
> ==16249==    definitely lost: 3012 bytes in 124 blocks.
> ==16249==    possibly lost:   0 bytes in 0 blocks.
> ==16249==    still reachable: 1465499 bytes in 1039 blocks.
> ==16249==         suppressed: 200 bytes in 1 blocks.
> ==16249== Reachable blocks (those to which a pointer was found) are  
> not shown.
> ==16249== To see them, rerun with: --show-reachable=yes
> [sean@lenny tests]$
> 
> Any ideas?
> 
> ---
> Sean Gillies
> http://zcologia.com
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Thu Mar 30 04:27:59 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] WKTReader - ambiguous comments
In-Reply-To: <442B78D2.5020802@loskot.net>
References: <442B78D2.5020802@loskot.net>
Message-ID: <20060330092759.GE16421@keybit.net>

On Thu, Mar 30, 2006 at 08:21:06AM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> The WKTReader constructor:
> WKTReader(const geom::GeometryFactory *gf);
> takes geometry factory by const pointer and
> as I see it creates internal copy of object pointed by gf pointer:
> 
> // WKTReader.inl file
> 
> WKTReader::WKTReader(const geom::GeometryFactory *gf)
> : geometryFactory(gf)

No copy here, geometryFactory is a pointer, and gets assigned
the given pointer.
One of zillion cases where shared_ptr<> would be more appropriate.

--strk;

From strk at refractions.net  Thu Mar 30 04:29:39 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] No default constructor in Triangle
In-Reply-To: <442B6663.7060107@loskot.net>
References: <442B6663.7060107@loskot.net>
Message-ID: <20060330092939.GF16421@keybit.net>

On Thu, Mar 30, 2006 at 07:02:27AM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> Is there any rationale behind not including default constructor in
> Triangle class?
> I can't see any such. If user would want to create a collection of
> triangles then the situation becomes quite complex, so I'd suggest to
> include default constructor.

That's JTS design decision.
I'd be more concerned about it using real Coordinates
rather then pointers. Do you want to check that ?

--strk;

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From mateusz at loskot.net  Thu Mar 30 04:54:57 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
In-Reply-To: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
References: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
Message-ID: <442BAAF1.9010509@loskot.net>

Sean Gillies wrote:
> strk,
> 
> I have a program that was running almost leak free with GEOS 2.2.1,
> but I am seeing leaks now with the head of the 2.2 branch. I'm using
> valgrind.
> 
> [...] Any ideas?

Could you post a piece the of code using GEOS?
It would be helpful to be able to track the lifetime of objects
returned by all geos::GeometryFactory::create* calls.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 04:58:10 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
In-Reply-To: <442BAAF1.9010509@loskot.net>
References: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
	<442BAAF1.9010509@loskot.net>
Message-ID: <442BABB2.2020208@loskot.net>

Mateusz ?oskot wrote:
> Sean Gillies wrote:
>> strk,
>>
>> I have a program that was running almost leak free with GEOS 2.2.1,
>> but I am seeing leaks now with the head of the 2.2 branch. I'm using
>> valgrind.
>>
>> [...] Any ideas?
> 
> Could you post a piece the of code using GEOS?

Oh Mom!
Sorry for this crap english :-)
I was thinking about too many things at that moment.

I meant, could you post the code where you're
using GeometryFactory's methods?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 05:37:26 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] No default constructor in Triangle
In-Reply-To: <20060330092939.GF16421@keybit.net>
References: <442B6663.7060107@loskot.net> <20060330092939.GF16421@keybit.net>
Message-ID: <442BB4E6.3010003@loskot.net>

strk@refractions.net wrote:
> On Thu, Mar 30, 2006 at 07:02:27AM +0200, Mateusz ??oskot wrote:
>> Hi,
>> 
>> Is there any rationale behind not including default constructor in
>>  Triangle class? I can't see any such. If user would want to create
>>  a collection of triangles then the situation becomes quite
>> complex, so I'd suggest to include default constructor.
> 
> That's JTS design decision.

Hmm :-)
I don't get it because construction and initialization in Java is
different than in C++. Consider, default initializator of Object types
is null. In C++ there is no such term as default initializator.

> I'd be more concerned about it using real Coordinates rather then 
> pointers. Do you want to check that ?

I'm not sure what pointer are you talking about?
I'm talking about Triangle class that includes 3 members of type of
Coordinate. Where are those pointers?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 05:50:43 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] createEmptyGeometry() creates instance of
	GeometryCollection
Message-ID: <442BB803.6040703@loskot.net>

Hi,

Simple question, is this intentional to return empty
GeometryCollection instance from createEmptyGeometry() function?
Currently, this function does the same as createGeometryCollection().

GeometryCollection*
GeometryFactory::createGeometryCollection() const
{
   return new GeometryCollection(NULL,this);
}

Geometry*
GeometryFactory::createEmptyGeometry() const
{
   return new GeometryCollection(NULL,this);
}

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net


From mateusz at loskot.net  Thu Mar 30 09:24:49 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Is empty LinearRing closed?
Message-ID: <442BEA31.8010805@loskot.net>

Hi,

As I see, LinearRing is always closed:

bool LinearRing::isClosed() const {
	return true;
}

GeometryFactory ::createLinearRing() call creates empty LinerRing.
So, should it be considered as closed by default?

IMO empty LinearRing should not be considered as closed. OGC Simple
Feature Spec. says about IsClosed for Curve type (base of LinearRing):

IsClosed( ):
(TRUE) if this Curve is closed (StartPoint ( ) = EndPoint ( )).


So, according to OGC SF Spec. LinearRing::isClosed() should be
implemented as follows;

bool LinearRing::isClosed() const {
	return (getStartPoint() == getEndPoint());
}

Am I correct?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 10:25:38 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Bug #81 - Memory access violation in
	LineString::getStartPoint()
Message-ID: <442BF872.6070205@loskot.net>

Hi,

Forgive me that I may post redundant messages to the list but I think
this one is very important.
Below I pasted Bug Report #81 I've just submitted:
http://postgis.refractions.net/bugs/bug.php?op=show&bugid=81&pos=4

I'd be very glad if we could discuss this report in details,
verify if this is really a bug, but no my mistake and then
let's try to take some decisions about GEOS design in relation to JTS
that would help GEOS get stable and mature C++ code.

Please, forgive me every hard word I give but this bug made me
really bad ;-)))

OK, let's start the show.

Today, when I was woring on Unit Tests I found a pretty serious bug
causing memory access violation error. Here is the story:

// Factory object preparation
const int srid = 1;
geos::geom::PrecisionModel pm(1.0);
geos::geom::GeometryFactory factory(&pm, srid),

// Use factory to create empty LinearRing
LinearRingPtr ring = factory.createLinearRing();

// ring is empty, but let's see what will happen
PointPtr x = ring->getStartPoint(); <--- BUM!

The line marked with BUM! causes memory access violation error.

Here is descriptive backtrace with complete call chain (lines marked
with <--- are executed during step-by-step debugging):

1.

PointPtr x = ring->getStartPoint(); <---

1.1.

Point* LineString::getStartPoint() const {
   if (isEmpty()) {
      return new Point(NULL, NULL); // <----
   }
   return getPointN(0);
}

2. Point(NULL, NULL); <---

Parameters:
newCoord = NULL
factory = NULL

2.1.

Point::Point(CoordinateSequence *newCoords, const GeometryFactory *factory)
: Geometry(factory) <---
{
//...
}

3.

Geometry(factory)

factory = NULL

3.1.

Geometry::Geometry(const GeometryFactory* newFactory)
{
   factory=newFactory; <--- [1]
   SRID=factory->getSRID(); <--- [2] BUUUUM!
   envelope=NULL;
   userData=NULL;
}

[1]
newFactory = NULL, so factory gets becomes null pointer

[2] BUUUM!
factory is a null pointer and calling member on a null pointer value
causes undefined behaviour!

SRID=factory->getSRID();

4. Finally, GeometryFactory::getSRID() throws
   MEMORY ACCESS VIOLATION ERROR!


Summary:
- the Geometry constructor is used incorrectly
- or this constructor is incorrectly designed to handle all valid cases
- This is another example of ***JAVISMS***.

JTS version of getStartPoint is defined as follows:

public Point getStartPoint() {
   if (isEmpty()) {
      return null; // <--- [3]
   }
   return getPointN(0);
}

[3] returning null reference is completely different semantic of
returning pointer to newly allocated object, what happens in GEOS'
version of getStartPoint!!!

GEOS' version of getStartPoint is buggy in two ways:
1. Causes memory access violation
2. There is logical bug: how can user expect to get Point object
returned from *empty* LinearRing??? Such behaviour does not make sense.
It's also, what is most important, incompatible behaviour with that in
JTS version!

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 11:52:06 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Is empty LinearRing closed?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9B9@venus.VividSolutions.com>

But the definition of LinearRing is that the start point equals the end point.   This makes the test unnecessary for a valid LinearRing.  However, maybe it's more general to use the explicit test.

As for an empty LinearRing, well, I don't know of any semantics which covers this.  This might be an angels-on-the-head-of-a-pin kind of thing.  If you don't like the JTS semantics for your particular use-case, you should just implement your own test.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 6:25 AM
> To: GEOS Development List
> Subject: [geos-devel] Is empty LinearRing closed?
> 
> 
> Hi,
> 
> As I see, LinearRing is always closed:
> 
> bool LinearRing::isClosed() const {
> 	return true;
> }
> 
> GeometryFactory ::createLinearRing() call creates empty 
> LinerRing. So, should it be considered as closed by default?
> 
> IMO empty LinearRing should not be considered as closed. OGC 
> Simple Feature Spec. says about IsClosed for Curve type (base 
> of LinearRing):
> 
> IsClosed( ):
> (TRUE) if this Curve is closed (StartPoint ( ) = EndPoint ( )).
> 
> 
> So, according to OGC SF Spec. LinearRing::isClosed() should 
> be implemented as follows;
> 
> bool LinearRing::isClosed() const {
> 	return (getStartPoint() == getEndPoint());
> }
> 
> Am I correct?
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Thu Mar 30 11:54:55 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] createEmptyGeometry() creates instance
	ofGeometryCollection
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9BA@venus.VividSolutions.com>

Yes.  The spec doesn't cover this, but I chose to use an empty GeometryCollection as a "typeless" empty geometry, for methods which need to return one.  The createEmptyGeometry method is just a convenience method for this convention.

Anyway, what else could that method return that would make sense (given that it has no type information)?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 2:51 AM
> To: GEOS Development List
> Subject: [geos-devel] createEmptyGeometry() creates instance 
> ofGeometryCollection
> 
> 
> Hi,
> 
> Simple question, is this intentional to return empty 
> GeometryCollection instance from createEmptyGeometry() 
> function? Currently, this function does the same as 
> createGeometryCollection().
> 
> GeometryCollection*
> GeometryFactory::createGeometryCollection() const
> {
>    return new GeometryCollection(NULL,this);
> }
> 
> Geometry*
> GeometryFactory::createEmptyGeometry() const
> {
>    return new GeometryCollection(NULL,this);
> }
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Thu Mar 30 11:56:03 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] No default constructor in Triangle
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9BB@venus.VividSolutions.com>

No particular reason, just that JTS didn't need a default constructor.  Feel free to add one.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 29, 2006 9:02 PM
> To: GEOS Development List
> Subject: [geos-devel] No default constructor in Triangle
> 
> 
> Hi,
> 
> Is there any rationale behind not including default 
> constructor in Triangle class? I can't see any such. If user 
> would want to create a collection of triangles then the 
> situation becomes quite complex, so I'd suggest to include 
> default constructor.
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From sgillies at frii.com  Thu Mar 30 12:16:08 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
In-Reply-To: <20060330092525.GD16421@keybit.net>
References: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
	<20060330092525.GD16421@keybit.net>
Message-ID: <9E1EE226-CCA8-402F-8C92-763828F05D94@frii.com>

After looking through the changes to GEOS, I found nothing likely to  
have caused any new leaks. Went back to my own code and found the  
problem. False alarm, sorry.

Can we have 2.2.2 now? ;)

Sean

On Mar 30, 2006, at 2:25 AM, strk@refractions.net wrote:

> It looks like you're not deleting the Geometries returned
> by some functions. If youre *positive* you do are releasing
> that memory there might be the same horrible bug I'm hunting
> in the HEAD branch: memory corruption, confusing every
> memory checker I've tested so far.
>
> --strk;
>
>

From strk at refractions.net  Thu Mar 30 13:09:16 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] No default constructor in Triangle
In-Reply-To: <442BB4E6.3010003@loskot.net>
References: <442B6663.7060107@loskot.net> <20060330092939.GF16421@keybit.net>
	<442BB4E6.3010003@loskot.net>
Message-ID: <20060330180916.GA21841@keybit.net>

On Thu, Mar 30, 2006 at 12:37:26PM +0200, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> > On Thu, Mar 30, 2006 at 07:02:27AM +0200, Mateusz ?
?oskot wrote:
> >> Hi,
> >> 
> >> Is there any rationale behind not including default constructor in
> >>  Triangle class? I can't see any such. If user would want to create
> >>  a collection of triangles then the situation becomes quite
> >> complex, so I'd suggest to include default constructor.
> > 
> > That's JTS design decision.
> 
> Hmm :-)
> I don't get it because construction and initialization in Java is
> different than in C++. Consider, default initializator of Object types
> is null. In C++ there is no such term as default initializator.
> 
> > I'd be more concerned about it using real Coordinates rather then 
> > pointers. Do you want to check that ?
> 
> I'm not sure what pointer are you talking about?
> I'm talking about Triangle class that includes 3 members of type of
> Coordinate. Where are those pointers?

There are none, I'm saying it would better have pointers
rather then values. That way creating vector of default-constructed
Triangles would be more efficient then would be with values.

--strk;

From strk at refractions.net  Thu Mar 30 13:10:12 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
In-Reply-To: <9E1EE226-CCA8-402F-8C92-763828F05D94@frii.com>
References: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>
	<20060330092525.GD16421@keybit.net>
	<9E1EE226-CCA8-402F-8C92-763828F05D94@frii.com>
Message-ID: <20060330181012.GB21841@keybit.net>

On Thu, Mar 30, 2006 at 10:16:08AM -0700, Sean Gillies wrote:
> After looking through the changes to GEOS, I found nothing likely to  
> have caused any new leaks. Went back to my own code and found the  
> problem. False alarm, sorry.
> 
> Can we have 2.2.2 now? ;)

Aren't we waiting for adding ruby and python cleanups ?

--strk;

From strk at refractions.net  Thu Mar 30 13:11:51 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] createEmptyGeometry() creates instance of
	GeometryCollection
In-Reply-To: <442BB803.6040703@loskot.net>
References: <442BB803.6040703@loskot.net>
Message-ID: <20060330181151.GC21841@keybit.net>

::createEmptyGeometry() has been my own addition.
It's not in JTS.
I thought it was clearer then createGeometryCollection()
An EMPTY geometry *is* a GeometryCollection with 0 elements.

--strk;

On Thu, Mar 30, 2006 at 12:50:43PM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> Simple question, is this intentional to return empty
> GeometryCollection instance from createEmptyGeometry() function?
> Currently, this function does the same as createGeometryCollection().
> 
> GeometryCollection*
> GeometryFactory::createGeometryCollection() const
> {
>    return new GeometryCollection(NULL,this);
> }
> 
> Geometry*
> GeometryFactory::createEmptyGeometry() const
> {
>    return new GeometryCollection(NULL,this);
> }
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Thu Mar 30 13:13:02 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9B9@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9B9@venus.VividSolutions.com>
Message-ID: <20060330181302.GD21841@keybit.net>

The only valid EMPTY geometry would be a GEOMETRYCOLLECTION.
All other possibilities should be avoided IMO.

--strk;

On Thu, Mar 30, 2006 at 08:52:06AM -0800, Martin Davis wrote:
> But the definition of LinearRing is that the start point equals the end point.   This makes the test unnecessary for a valid LinearRing.  However, maybe it's more general to use the explicit test.
> 
> As for an empty LinearRing, well, I don't know of any semantics which covers this.  This might be an angels-on-the-head-of-a-pin kind of thing.  If you don't like the JTS semantics for your particular use-case, you should just implement your own test.
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net 
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> > Mateusz Loskot
> > Sent: March 30, 2006 6:25 AM
> > To: GEOS Development List
> > Subject: [geos-devel] Is empty LinearRing closed?
> > 
> > 
> > Hi,
> > 
> > As I see, LinearRing is always closed:
> > 
> > bool LinearRing::isClosed() const {
> > 	return true;
> > }
> > 
> > GeometryFactory ::createLinearRing() call creates empty 
> > LinerRing. So, should it be considered as closed by default?
> > 
> > IMO empty LinearRing should not be considered as closed. OGC 
> > Simple Feature Spec. says about IsClosed for Curve type (base 
> > of LinearRing):
> > 
> > IsClosed( ):
> > (TRUE) if this Curve is closed (StartPoint ( ) = EndPoint ( )).
> > 
> > 
> > So, according to OGC SF Spec. LinearRing::isClosed() should 
> > be implemented as follows;
> > 
> > bool LinearRing::isClosed() const {
> > 	return (getStartPoint() == getEndPoint());
> > }
> > 
> > Am I correct?
> > 
> > Cheers
> > -- 
> > Mateusz ?oskot
> > http://mateusz.loskot.net 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Thu Mar 30 13:14:56 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] Bug #81 - Memory access violation in
	LineString::getStartPoint()
In-Reply-To: <442BF872.6070205@loskot.net>
References: <442BF872.6070205@loskot.net>
Message-ID: <20060330181456.GE21841@keybit.net>

As said in previous mail, I'd drop createLinearRing().
Every intention to create an EMPTY geometry should be
expressed using the function I added for this purpose:
createEmptyGeometry().
This should reduce error possibilities.

--strk;

On Thu, Mar 30, 2006 at 05:25:38PM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> Forgive me that I may post redundant messages to the list but I think
> this one is very important.
> Below I pasted Bug Report #81 I've just submitted:
> http://postgis.refractions.net/bugs/bug.php?op=show&bugid=81&pos=4
> 
> I'd be very glad if we could discuss this report in details,
> verify if this is really a bug, but no my mistake and then
> let's try to take some decisions about GEOS design in relation to JTS
> that would help GEOS get stable and mature C++ code.
> 
> Please, forgive me every hard word I give but this bug made me
> really bad ;-)))
> 
> OK, let's start the show.
> 
> Today, when I was woring on Unit Tests I found a pretty serious bug
> causing memory access violation error. Here is the story:
> 
> // Factory object preparation
> const int srid = 1;
> geos::geom::PrecisionModel pm(1.0);
> geos::geom::GeometryFactory factory(&pm, srid),
> 
> // Use factory to create empty LinearRing
> LinearRingPtr ring = factory.createLinearRing();
> 
> // ring is empty, but let's see what will happen
> PointPtr x = ring->getStartPoint(); <--- BUM!
> 
> The line marked with BUM! causes memory access violation error.
> 
> Here is descriptive backtrace with complete call chain (lines marked
> with <--- are executed during step-by-step debugging):
> 
> 1.
> 
> PointPtr x = ring->getStartPoint(); <---
> 
> 1.1.
> 
> Point* LineString::getStartPoint() const {
>    if (isEmpty()) {
>       return new Point(NULL, NULL); // <----
>    }
>    return getPointN(0);
> }
> 
> 2. Point(NULL, NULL); <---
> 
> Parameters:
> newCoord = NULL
> factory = NULL
> 
> 2.1.
> 
> Point::Point(CoordinateSequence *newCoords, const GeometryFactory *factory)
> : Geometry(factory) <---
> {
> //...
> }
> 
> 3.
> 
> Geometry(factory)
> 
> factory = NULL
> 
> 3.1.
> 
> Geometry::Geometry(const GeometryFactory* newFactory)
> {
>    factory=newFactory; <--- [1]
>    SRID=factory->getSRID(); <--- [2] BUUUUM!
>    envelope=NULL;
>    userData=NULL;
> }
> 
> [1]
> newFactory = NULL, so factory gets becomes null pointer
> 
> [2] BUUUM!
> factory is a null pointer and calling member on a null pointer value
> causes undefined behaviour!
> 
> SRID=factory->getSRID();
> 
> 4. Finally, GeometryFactory::getSRID() throws
>    MEMORY ACCESS VIOLATION ERROR!
> 
> 
> Summary:
> - the Geometry constructor is used incorrectly
> - or this constructor is incorrectly designed to handle all valid cases
> - This is another example of ***JAVISMS***.
> 
> JTS version of getStartPoint is defined as follows:
> 
> public Point getStartPoint() {
>    if (isEmpty()) {
>       return null; // <--- [3]
>    }
>    return getPointN(0);
> }
> 
> [3] returning null reference is completely different semantic of
> returning pointer to newly allocated object, what happens in GEOS'
> version of getStartPoint!!!
> 
> GEOS' version of getStartPoint is buggy in two ways:
> 1. Causes memory access violation
> 2. There is logical bug: how can user expect to get Point object
> returned from *empty* LinearRing??? Such behaviour does not make sense.
> It's also, what is most important, incompatible behaviour with that in
> JTS version!
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From mbdavis at VividSolutions.com  Thu Mar 30 13:24:26 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] createEmptyGeometry() creates instance
	ofGeometryCollection
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9C2@venus.VividSolutions.com>

Good addition.... This standardizes on what is used to represent a "null" geometry.  I'll add this to JTS.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> strk@refractions.net
> Sent: March 30, 2006 10:12 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] createEmptyGeometry() creates 
> instance ofGeometryCollection
> 
> 
> ::createEmptyGeometry() has been my own addition.
> It's not in JTS.
> I thought it was clearer then createGeometryCollection()
> An EMPTY geometry *is* a GeometryCollection with 0 elements.
> 
> --strk;
> 
> On Thu, Mar 30, 2006 at 12:50:43PM +0200, Mateusz ??oskot wrote:
> > Hi,
> > 
> > Simple question, is this intentional to return empty 
> > GeometryCollection instance from createEmptyGeometry() function? 
> > Currently, this function does the same as 
> createGeometryCollection().
> > 
> > GeometryCollection*
> > GeometryFactory::createGeometryCollection() const
> > {
> >    return new GeometryCollection(NULL,this);
> > }
> > 
> > Geometry*
> > GeometryFactory::createEmptyGeometry() const
> > {
> >    return new GeometryCollection(NULL,this);
> > }
> > 
> > Cheers
> > --
> > Mateusz ??oskot
> > http://mateusz.loskot.net
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> -- 
> 
>  /"\    ASCII Ribbon Campaign
>  \ /    Respect for low technology.
>   X     Keep e-mail messages readable by any computer system.
>  / \    Keep it ASCII. 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From cfis at interserv.com  Thu Mar 30 13:40:29 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] New memory leaks in the 2.2 branch since 2.2.1?
In-Reply-To: <20060330181012.GB21841@keybit.net>
References: <4CDD64B1-F1CC-4A85-966A-B366910C3CDD@frii.com>	<20060330092525.GD16421@keybit.net>	<9E1EE226-CCA8-402F-8C92-763828F05D94@frii.com>
	<20060330181012.GB21841@keybit.net>
Message-ID: <442C261D.5060408@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060330/a0628b03/smime.bin
From pramsey at refractions.net  Thu Mar 30 15:58:39 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] FOSS4G
Message-ID: <F5DC3090-C64B-4789-B030-0CBCC5656A3D@refractions.net>

FOSS4G2006, the international conference addressing geospatial data  
technologies developed by or of relevance to the Open  Source  
community, will be held September 12-15th, 2006 in Lausanne,   
Switzerland. The conference will bring together all of the  Free and  
Open Source Software for Geoinformatics (FOSS4G) communities.  The  
conference incorporates the OSGIS Conference, Mapserver User  
Meeting,  GRASS Users Conference, Java oriented FOSS4G and EOGEO  
Workshops with  the intent to be broadly inclusive.

Lausanne, Switzerland will host the conference, making it the first  
time many of these groups will  meet in Europe. A committee is  
working to design a program with elements  that will interest  
participants from the novice to the expert. The  conference strives  
to build on the successes and enthusiasm generated  by previous,  
related meetings.

Important dates to note (dates are approximate and subject to change):

   April 15, 2006    Workshop submission deadline

   June 30, 2006     Presentation submission deadline


   April 15, 2006    Final registration opening
             (pre-registration is open)

   June 30, 2006     Early registration deadline

We strongly encourage making your room reservation early as September  
is still high season for tourism in Lausanne.

For more information, registration and/or submit a contribution,  
please visit the conference website at

     http://www.foss4g2006.org

Take advantage of the opportunity FOSS4G2006 offers to network with  
fellow geospatial data professionals, renewing old  acquaintances and  
making new ones. Hope to see you there!


From mateusz at loskot.net  Thu Mar 30 16:46:08 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] No default constructor in Triangle
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9BB@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9BB@venus.VividSolutions.com>
Message-ID: <442C51A0.1010307@loskot.net>

Martin Davis wrote:
> No particular reason, just that JTS didn't need a default
> constructor.  Feel free to add one.

Hi Martin,
That's what I supposed and that's why I'm asking.
Now it's clear. Thanks

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 17:04:39 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] createEmptyGeometry() creates
	instance	ofGeometryCollection
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9BA@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9BA@venus.VividSolutions.com>
Message-ID: <442C55F7.3000905@loskot.net>

Martin Davis wrote:
> Yes.  The spec doesn't cover this, but I chose to use an empty 
> GeometryCollection as a "typeless" empty geometry, for methods which 
> need to return one.  The createEmptyGeometry method is just a 
> convenience method for this convention.

OK, I understant it.

> Anyway, what else could that method return that would make sense 
> (given that it has no type information)?

It depends on the idea behind "empty geometry" or "null geometry" [1].
As I know, OGC Simple Feature Spec. explains that empty geometry
represents empty point set (empty set of coordinates).
According to my understanding:
Point is empty if it contains "uninitialized" coordinates
MultiPoint is empty if it contains no points in its set.
etc.

There is also a distinction between empty and null.
NULL means something undefined, uninitialized - something unsafe.
EMPTY means something well constructor but with empty set of points.
In some case, NULL object can be compared to EMPTY object with true result.

So, I think isEmpty() function should check the state of the coordinates
set of Geometry return appropriate value (true/false).

[1] Saying "null geometry" I think about logical meaning but not the
physical representation of instance of geometry: null reference/null
pointer.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 17:23:50 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:07 2007
Subject: [geos-devel] createEmptyGeometry()
	createsinstance	ofGeometryCollection
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3F26@venus.VividSolutions.com>

This isn't a question of what Geometry.isEmpty() returns.  In fact, isEmpty behaves exactly the way you mention - it checks whether there are any points in the Geometry, and returns false if not.

The issue is: what should a method return when it needs to return an empty geometry, but there is no guide about what type of geometry to return?  For instance, if you run line.intersect(polygon), and they don't actually intersect, what should be returned?  JTS adopts the convention that an empty GeometryCollection is returned.  Otherwise, it would have to choose a particular type to return, and this might be misleading.

Actually reviewing this has exposed a minor but probably bad design decision in JTS: empty buffers currently return an empty GC, whereas they should return an empty Polygon (to maintain the exit condition that buffer always returns a polygonal object).

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 2:05 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] createEmptyGeometry() 
> createsinstance ofGeometryCollection
> 
> 
> Martin Davis wrote:
> > Yes.  The spec doesn't cover this, but I chose to use an empty
> > GeometryCollection as a "typeless" empty geometry, for 
> methods which 
> > need to return one.  The createEmptyGeometry method is just a 
> > convenience method for this convention.
> 
> OK, I understant it.
> 
> > Anyway, what else could that method return that would make sense
> > (given that it has no type information)?
> 
> It depends on the idea behind "empty geometry" or "null 
> geometry" [1]. As I know, OGC Simple Feature Spec. explains 
> that empty geometry represents empty point set (empty set of 
> coordinates). According to my understanding: Point is empty 
> if it contains "uninitialized" coordinates MultiPoint is 
> empty if it contains no points in its set. etc.
> 
> There is also a distinction between empty and null.
> NULL means something undefined, uninitialized - something 
> unsafe. EMPTY means something well constructor but with empty 
> set of points. In some case, NULL object can be compared to 
> EMPTY object with true result.
> 
> So, I think isEmpty() function should check the state of the 
> coordinates set of Geometry return appropriate value (true/false).
> 
> [1] Saying "null geometry" I think about logical meaning but 
> not the physical representation of instance of geometry: null 
> reference/null pointer.
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Thu Mar 30 17:26:41 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]
	createEmptyGeometry()createsinstance	ofGeometryCollection
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9C8@venus.VividSolutions.com>

Here's another example of the use of an empty GeometryCollection: it's what Point.getBoundary() returns.  It would definitely be misleading to return something of more definite type in this case, IMO.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Martin Davis
> Sent: March 30, 2006 2:24 PM
> To: GEOS Development List
> Subject: RE: [geos-devel] 
> createEmptyGeometry()createsinstance ofGeometryCollection
> 
> 
> This isn't a question of what Geometry.isEmpty() returns.  In 
> fact, isEmpty behaves exactly the way you mention - it checks 
> whether there are any points in the Geometry, and returns 
> false if not.
> 
> The issue is: what should a method return when it needs to 
> return an empty geometry, but there is no guide about what 
> type of geometry to return?  For instance, if you run 
> line.intersect(polygon), and they don't actually intersect, 
> what should be returned?  JTS adopts the convention that an 
> empty GeometryCollection is returned.  Otherwise, it would 
> have to choose a particular type to return, and this might be 
> misleading.
> 
> Actually reviewing this has exposed a minor but probably bad 
> design decision in JTS: empty buffers currently return an 
> empty GC, whereas they should return an empty Polygon (to 
> maintain the exit condition that buffer always returns a 
> polygonal object).
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> > Mateusz Loskot
> > Sent: March 30, 2006 2:05 PM
> > To: GEOS Development List
> > Subject: Re: [geos-devel] createEmptyGeometry() 
> > createsinstance ofGeometryCollection
> > 
> > 
> > Martin Davis wrote:
> > > Yes.  The spec doesn't cover this, but I chose to use an empty 
> > > GeometryCollection as a "typeless" empty geometry, for
> > methods which
> > > need to return one.  The createEmptyGeometry method is just a
> > > convenience method for this convention.
> > 
> > OK, I understant it.
> > 
> > > Anyway, what else could that method return that would make sense 
> > > (given that it has no type information)?
> > 
> > It depends on the idea behind "empty geometry" or "null
> > geometry" [1]. As I know, OGC Simple Feature Spec. explains 
> > that empty geometry represents empty point set (empty set of 
> > coordinates). According to my understanding: Point is empty 
> > if it contains "uninitialized" coordinates MultiPoint is 
> > empty if it contains no points in its set. etc.
> > 
> > There is also a distinction between empty and null.
> > NULL means something undefined, uninitialized - something
> > unsafe. EMPTY means something well constructor but with empty 
> > set of points. In some case, NULL object can be compared to 
> > EMPTY object with true result.
> > 
> > So, I think isEmpty() function should check the state of the
> > coordinates set of Geometry return appropriate value (true/false).
> > 
> > [1] Saying "null geometry" I think about logical meaning but
> > not the physical representation of instance of geometry: null 
> > reference/null pointer.
> > 
> > Cheers
> > --
> > Mateusz ?oskot
> > http://mateusz.loskot.net 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From simonom at gmail.com  Thu Mar 30 17:29:02 2006
From: simonom at gmail.com (Simon O'Malley)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
Message-ID: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>

Hi All

I wont confess to being a developer so hopefully there is someone on the
list who can help.

Has anyone successfully built geos-2.2.0 on fedora core 5.

I get the following errors when running make.

[root@nazgul geos-2.2.0]# make
Making all in source
make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
Making all in geom
make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H -I.
-I. -I../../source/headers -I../../source/headers/geos
-I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
Coordinate.lo Coordinate.cpp; \
then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
".deps/Coordinate.Tpo"; exit 1; fi
mkdir .libs
 g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
-I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0 -g
-O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c Coordinate.cpp
-fPIC -DPIC -o .libs/Coordinate.o
../../source/headers/geos/geom.h:361: error: extra qualification
'geos::Coordinate::' on member 'setNull'
../../source/headers/geos/geom.h:367: error: extra qualification
'geos::Coordinate::' on member 'getNull'
../../source/headers/geos/geom.h:371: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:377: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:384: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:394: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:400: error: extra qualification
'geos::Coordinate::' on member 'setCoordinate'
../../source/headers/geos/geom.h:406: error: extra qualification
'geos::Coordinate::' on member 'equals2D'
../../source/headers/geos/geom.h:416: error: extra qualification
'geos::Coordinate::' on member 'compareTo'
../../source/headers/geos/geom.h:432: error: extra qualification
'geos::Coordinate::' on member 'equals3D'
../../source/headers/geos/geom.h:436: error: extra qualification
'geos::Coordinate::' on member 'makePrecise'
../../source/headers/geos/geom.h:441: error: extra qualification
'geos::Coordinate::' on member 'distance'
../../source/headers/geos/geom.h:447: error: extra qualification
'geos::Coordinate::' on member 'hashCode'
../../source/headers/geos/geom.h:459: error: extra qualification
'geos::Coordinate::' on member 'hashCode'
make[2]: *** [Coordinate.lo] Error 1
make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
make: *** [all-recursive] Error 1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060331/911ac21b/attachment.html
From cfis at interserv.com  Thu Mar 30 17:32:30 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]
	createEmptyGeometry()	createsinstance	ofGeometryCollection
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F26@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F26@venus.VividSolutions.com>
Message-ID: <442C5C7E.5070202@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060330/88fef388/smime.bin
From mateusz at loskot.net  Thu Mar 30 17:35:07 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9B9@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9B9@venus.VividSolutions.com>
Message-ID: <442C5D1B.2030509@loskot.net>

Martin Davis wrote:
> But the definition of LinearRing is that the start point equals the 
> end point.   This makes the test unnecessary for a valid LinearRing.
>  However, maybe it's more general to use the explicit test.

In my opinion this test is necessary to be checked explicitly.
LinearRing is of type of LineString, so it is possible to pass
LinearRing where LineString is expected, and the other way.
So, checking "static state" of those two types may result in wrong asnwer.

Empty LineString in OGR is created explicitly as empty set of points +
collection (array) of points is UNDEFINED:

/**
 * Create an empty line string.
 */
OGRLineString::OGRLineString()
{
    nPointCount = 0;
    paoPoints = NULL;
    padfZ = NULL;
}

> As for an empty LinearRing, well, I don't know of any semantics which
>  covers this.

I think its simple to understand but quit difficult to implement this
semantic properly. Here is my understanding of the emptiness (according
to MySQL, ArcSDE impl. and OGC Simple Feature Spec.):

1. Empty geometries contain no coordinates. IOW, geometry is empty if it
does not have any coordinates.

2. Following properties of empty geometry are not defined as well:
exterior, interior, and boundary. According to ArcSDE, an empty geometry
has a NULL envelope, boundary, interior, and exterior.

3. Empty geometry is always simple.

4. I like the idea of MySQL Spatial Ext. that empty geometry has
dimension set to -1 (undefined).

5. Empty surface geometry has area equal to 0, empty curves( linestrings
and multilinestrings) have a 0 length.

NOW THE MOST IMPORTANT:
The IsEmpty function checks emptiness of geometry and returns TRUE if
the geometry is empty or FALSE if the geometry is not empty.

That clearly means it's *incorrect* to set that some type *always*
returns true or false. This behaviour is dynamic, depending on current
state of geometry (if it contains empty set of points or not).

Please, not that some of types of OGC Geometries has a logical meaning
and they are not required to be represented as accurate instance of such
type.

I mean, ArcSDE does not use LinearRing at all, but only LineString type
(exteriorRing() returns instance of LineString but not LinearRing).
Second, the LineString becomes LinearRing as OGC Simple Feaure Spec. says:

"A LinearRing is a LineString that is both closed and simple."

So, I understand this behaviour as very dynamic. LineString X can
become a LinearRing and vice versa.


> This might be an angels-on-the-head-of-a-pin kind of thing.  If you 
> don't like the JTS semantics for your particular use-case, you should
>  just implement your own test.

The semantic is clearly explained in OGC Spec. but it's implemented
incorrectly.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 17:36:15 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <20060330181302.GD21841@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9B9@venus.VividSolutions.com>
	<20060330181302.GD21841@keybit.net>
Message-ID: <442C5D5F.8060001@loskot.net>

strk@refractions.net wrote:
> The only valid EMPTY geometry would be a GEOMETRYCOLLECTION. All
> other possibilities should be avoided IMO.

Honestly, I don't like it.
This is unclear and messed solution.
What is the rationale to return instance of GeometryCollection where
empty Point is expected?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 17:42:19 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>

I'm not sure why strk is making this comment.  JTS/GEOS supports empty geometries of all types (as per the OGC SFS).  

That said, what kind of empty geometry is returned from various methods is open to interpretation, I think.  In some cases I think the best you can do is to return an empty GC.  In other cases a more precise kind of empty geometry can be returned  (and as I noted, JTS/GEOS could probably improve it's semantics in a few cases. )

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 2:36 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Is empty LinearRing closed?
> 
> 
> strk@refractions.net wrote:
> > The only valid EMPTY geometry would be a 
> GEOMETRYCOLLECTION. All other 
> > possibilities should be avoided IMO.
> 
> Honestly, I don't like it.
> This is unclear and messed solution.
> What is the rationale to return instance of 
> GeometryCollection where empty Point is expected?
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Thu Mar 30 17:47:02 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3F27@venus.VividSolutions.com>

> In my opinion this test is necessary to be checked 
> explicitly. LinearRing is of type of LineString, so it is 
> possible to pass LinearRing where LineString is expected, and 
> the other way. So, checking "static state" of those two types 
> may result in wrong asnwer.

No, the point is that if the LinearRing is valid, isClosed always returns the correct answer.  It doesn't matter where this method is evaluated.

> The IsEmpty function checks emptiness of geometry and returns 
> TRUE if the geometry is empty or FALSE if the geometry is not empty.

This *IS* the way it is implemented in JTS/GEOS.

> So, I understand this behaviour as very dynamic. LineString X 
> can become a LinearRing and vice versa.

Well, a LineString can't just change type into a LinearRing.  But if you're saying that a LineString might be closed, yes I agree and JTS/GEOS will return the right answer in this case (for a LineString, isClosed checks the endpoints are equal).

Anyway, this isn't a big deal IMHO - I'd be perfectly happy changing the LinearRing method so it just uses the LIneString implementation.


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 2:35 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Is empty LinearRing closed?
> 
> 
> Martin Davis wrote:
> > But the definition of LinearRing is that the start point equals the 
> > end point.   This makes the test unnecessary for a valid LinearRing.
> >  However, maybe it's more general to use the explicit test.
> 
> In my opinion this test is necessary to be checked 
> explicitly. LinearRing is of type of LineString, so it is 
> possible to pass LinearRing where LineString is expected, and 
> the other way. So, checking "static state" of those two types 
> may result in wrong asnwer.
> 
> Empty LineString in OGR is created explicitly as empty set of 
> points + collection (array) of points is UNDEFINED:
> 
> /**
>  * Create an empty line string.
>  */
> OGRLineString::OGRLineString()
> {
>     nPointCount = 0;
>     paoPoints = NULL;
>     padfZ = NULL;
> }
> 
> > As for an empty LinearRing, well, I don't know of any 
> semantics which  
> > covers this.
> 
> I think its simple to understand but quit difficult to 
> implement this semantic properly. Here is my understanding of 
> the emptiness (according to MySQL, ArcSDE impl. and OGC 
> Simple Feature Spec.):
> 
> 1. Empty geometries contain no coordinates. IOW, geometry is 
> empty if it does not have any coordinates.
> 
> 2. Following properties of empty geometry are not defined as 
> well: exterior, interior, and boundary. According to ArcSDE, 
> an empty geometry has a NULL envelope, boundary, interior, 
> and exterior.
> 
> 3. Empty geometry is always simple.
> 
> 4. I like the idea of MySQL Spatial Ext. that empty geometry 
> has dimension set to -1 (undefined).
> 
> 5. Empty surface geometry has area equal to 0, empty curves( 
> linestrings and multilinestrings) have a 0 length.
> 
> NOW THE MOST IMPORTANT:
> The IsEmpty function checks emptiness of geometry and returns 
> TRUE if the geometry is empty or FALSE if the geometry is not empty.
> 
> That clearly means it's *incorrect* to set that some type 
> *always* returns true or false. This behaviour is dynamic, 
> depending on current state of geometry (if it contains empty 
> set of points or not).
> 
> Please, not that some of types of OGC Geometries has a 
> logical meaning and they are not required to be represented 
> as accurate instance of such type.
> 
> I mean, ArcSDE does not use LinearRing at all, but only 
> LineString type
> (exteriorRing() returns instance of LineString but not 
> LinearRing). Second, the LineString becomes LinearRing as OGC 
> Simple Feaure Spec. says:
> 
> "A LinearRing is a LineString that is both closed and simple."
> 
> So, I understand this behaviour as very dynamic. LineString X 
> can become a LinearRing and vice versa.
> 
> 
> > This might be an angels-on-the-head-of-a-pin kind of thing.  If you
> > don't like the JTS semantics for your particular use-case, 
> you should
> >  just implement your own test.
> 
> The semantic is clearly explained in OGC Spec. but it's 
> implemented incorrectly.
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mateusz at loskot.net  Thu Mar 30 17:49:38 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]
	createEmptyGeometry()	createsinstance	ofGeometryCollection
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F26@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F26@venus.VividSolutions.com>
Message-ID: <442C6082.5040003@loskot.net>

Martin Davis wrote:
> This isn't a question of what Geometry.isEmpty() returns.  In fact, 
> isEmpty behaves exactly the way you mention - it checks whether there
>  are any points in the Geometry, and returns false if not.

OK, now I see that even Point is implemented on base of sequence of
points. I give up :-)

> The issue is: what should a method return when it needs to return an 
> empty geometry, but there is no guide about what type of geometry to 
> return?

Empty geometry does not need any additional type like EmptyGeometry.
Every type of geometry can represent empty geometry.

> For instance, if you run line.intersect(polygon), and they don't 
> actually intersect, what should be returned?  JTS adopts the 
> convention that an empty GeometryCollection is returned.  Otherwise, 
> it would have to choose a particular type to return, and this might 
> be misleading.

Yes, it should choose particular type depending on input types.
E.g. intersection of two envelopes should produce new envelope.
If those envelopes do not intersect, then empty envelop is returned.

> Actually reviewing this has exposed a minor but probably bad design 
> decision in JTS: empty buffers currently return an empty GC, whereas 
> they should return an empty Polygon (to maintain the exit condition 
> that buffer always returns a polygonal object).

Yes, I think so.

Please, understand my point. I'm not an expert, I'm just learning,
reading and analyzing, and I'm trying to understand the situation and
make it better if there is any room for improvements.
I'm thankful you are discussing those issues what helps in my better
understanding!

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 17:53:06 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9CC@venus.VividSolutions.com>

> Yes, it should choose particular type depending on input 
> types. E.g. intersection of two envelopes should produce new 
> envelope. If those envelopes do not intersect, then empty 
> envelop is returned.

So what type is returned if the two input geometries have different
type?  


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046

From mateusz at loskot.net  Thu Mar 30 18:03:12 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9CC@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9CC@venus.VividSolutions.com>
Message-ID: <442C63B0.5060200@loskot.net>

Martin Davis wrote:
>> Yes, it should choose particular type depending on input types.
>> E.g. intersection of two envelopes should produce new envelope. If
>> those envelopes do not intersect, then empty envelop is returned.
> 
> So what type is returned if the two input geometries have different 
> type?

I think there is no one possibility.
The result may be produced as point, multipoint, polygon or even
heterogenous geometry collection. Every such type can be returned by
reference to the base type of Geometry.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 18:04:58 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
In-Reply-To: <442C63B0.5060200@loskot.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9CC@venus.VividSolutions.com>
	<442C63B0.5060200@loskot.net>
Message-ID: <442C641A.1060207@loskot.net>

Mateusz ?oskot wrote:
> Martin Davis wrote:
>>> Yes, it should choose particular type depending on input types.
>>> E.g. intersection of two envelopes should produce new envelope. If
>>> those envelopes do not intersect, then empty envelop is returned.
>> So what type is returned if the two input geometries have different 
>> type?
> 
> I think there is no one possibility.
> The result may be produced as point, multipoint, polygon or even
> heterogenous geometry collection. Every such type can be returned by
> reference to the base type of Geometry.

Oh Mom! I'm an idiot :-)
Sorry, too much posts in the same time.

The question is about what to return as empty geometry.
I think empty geometry collection is fine.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 18:07:44 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>
Message-ID: <442C64C0.3040107@loskot.net>

Martin Davis wrote:
> I'm not sure why strk is making this comment.  JTS/GEOS supports
> empty geometries of all types (as per the OGC SFS).

Yup.

> That said, what kind of empty geometry is returned from various
> methods is open to interpretation, I think.  

I think it's correct interpretation.

> In some cases I think
> the best you can do is to return an empty GC.

Yes, I'm convinced. As in this example with empty intersection
of different geometries. Thanks for guiding me to this conclusion :-)

> In other cases a more
> precise kind of empty geometry can be returned  (and as I noted,
> JTS/GEOS could probably improve it's semantics in a few cases. )

Yes.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 18:08:30 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9CE@venus.VividSolutions.com>

I thought about this, but on the principal of Occam's Razor decided just to use an empty GC.  This has the advantage that there are fewer cases to handle for both developers and clients.
 
 
Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046

	-----Original Message-----
	From: geos-devel-bounces@geos.refractions.net [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Charlie Savage
	Sent: March 30, 2006 2:33 PM
	To: GEOS Development List
	Subject: Re: [geos-devel]createEmptyGeometry() createsinstance ofGeometryCollection
	
	
	Would it make sense to have a separate EmptyGeometryClass specifically for this purpose?
	
	Charlie
	
	Martin Davis wrote: 

		This isn't a question of what Geometry.isEmpty() returns.  In fact, isEmpty behaves exactly the way you mention - it checks whether there are any points in the Geometry, and returns false if not.
		
		The issue is: what should a method return when it needs to return an empty geometry, but there is no guide about what type of geometry to return?  For instance, if you run line.intersect(polygon), and they don't actually intersect, what should be returned?  JTS adopts the convention that an empty GeometryCollection is returned.  Otherwise, it would have to choose a particular type to return, and this might be misleading.
		
		Actually reviewing this has exposed a minor but probably bad design decision in JTS: empty buffers currently return an empty GC, whereas they should return an empty Polygon (to maintain the exit condition that buffer always returns a polygonal object).
		
		Martin Davis, Senior Technical Architect
		Vivid Solutions Inc.      www.vividsolutions.com
		Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
		Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
		
		
		  

			-----Original Message-----
			From: geos-devel-bounces@geos.refractions.net 
			[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
			Mateusz Loskot
			Sent: March 30, 2006 2:05 PM
			To: GEOS Development List
			Subject: Re: [geos-devel] createEmptyGeometry() 
			createsinstance ofGeometryCollection
			
			
			Martin Davis wrote:
			    

				Yes.  The spec doesn't cover this, but I chose to use an empty
				GeometryCollection as a "typeless" empty geometry, for 
				      

			methods which 
			    

				need to return one.  The createEmptyGeometry method is just a 
				convenience method for this convention.
				      

			OK, I understant it.
			
			    

				Anyway, what else could that method return that would make sense
				(given that it has no type information)?
				      

			It depends on the idea behind "empty geometry" or "null 
			geometry" [1]. As I know, OGC Simple Feature Spec. explains 
			that empty geometry represents empty point set (empty set of 
			coordinates). According to my understanding: Point is empty 
			if it contains "uninitialized" coordinates MultiPoint is 
			empty if it contains no points in its set. etc.
			
			There is also a distinction between empty and null.
			NULL means something undefined, uninitialized - something 
			unsafe. EMPTY means something well constructor but with empty 
			set of points. In some case, NULL object can be compared to 
			EMPTY object with true result.
			
			So, I think isEmpty() function should check the state of the 
			coordinates set of Geometry return appropriate value (true/false).
			
			[1] Saying "null geometry" I think about logical meaning but 
			not the physical representation of instance of geometry: null 
			reference/null pointer.
			
			Cheers
			-- 
			Mateusz ?oskot
			http://mateusz.loskot.net 
			_______________________________________________
			geos-devel mailing list
			geos-devel@geos.refractions.net 
			http://geos.refractions.net/mailman/listinfo/geos-devel
			
			    

		_______________________________________________
		geos-devel mailing list
		geos-devel@geos.refractions.net
		http://geos.refractions.net/mailman/listinfo/geos-devel
		
		
		  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060330/ee4365a8/attachment.html
From mateusz at loskot.net  Thu Mar 30 18:17:47 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F27@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F27@venus.VividSolutions.com>
Message-ID: <442C671B.6060107@loskot.net>

Martin Davis wrote:
>> In my opinion this test is necessary to be checked explicitly. 
>> LinearRing is of type of LineString, so it is possible to pass 
>> LinearRing where LineString is expected, and the other way. So, 
>> checking "static state" of those two types may result in wrong 
>> asnwer.
> 
> No, the point is that if the LinearRing is valid, isClosed always 
> returns the correct answer.  It doesn't matter where this method is 
> evaluated.

You're right that if the LinearRing is valid then it's closed.
But it can stop to be valid after some opertion, right? e.g. after user
removes end point?

Second, as far as I know, there is nothing said about that every
LinearRing is considered as a valid LinearRing automatically.

Isn't it possible to have invalid LinearRing?
IMO, isValid predicate should also use isClosed to check the validation,
shouldn't it?

That's why I think LinearRing::isClosed should not return one and the
only one possible value - true.

>> The IsEmpty function checks emptiness of geometry and returns TRUE
>>  if the geometry is empty or FALSE if the geometry is not empty.
> 
> This *IS* the way it is implemented in JTS/GEOS.

Sure.

>> So, I understand this behaviour as very dynamic. LineString X can 
>> become a LinearRing and vice versa.
> 
> Well, a LineString can't just change type into a LinearRing. But if 
> you're saying that a LineString might be closed, yes I agree and 
> JTS/GEOS will return the right answer in this case (for a LineString,
>  isClosed checks the endpoints are equal).

Yes, that's what I'm talking.
Also, the other way operation is (should be) possible: LinearRing
becomes not closed anymore then isClosed for LinearRing returns
false :-)
Would not it be correct?

> Anyway, this isn't a big deal IMHO - I'd be perfectly happy changing
>  the LinearRing method so it just uses the LIneString implementation.
> 
Yup. That's a way I have implemented my own version of OGC Spec some
time ago (closed source :-( ).

Cheers

-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 18:20:51 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9CE@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9CE@venus.VividSolutions.com>
Message-ID: <442C67D3.50408@loskot.net>

Martin Davis wrote:
> I thought about this, but on the principal of Occam's Razor decided 
> just to use an empty GC.  This has the advantage that there are fewer
>  cases to handle for both developers and clients.

That's clear for me.

strk:
The only thing I'd do is to review current impl. of GEOS and see if
there are any possible runtime bugs.

strk:
Another thing I'd consider is to check if we could check this behaviour
to operate with types more strictly. May be it would help to get rid of
dynamic polymorphism overhead.


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 18:28:55 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Bug #81 - Memory access violation
	in	LineString::getStartPoint()
In-Reply-To: <20060330181456.GE21841@keybit.net>
References: <442BF872.6070205@loskot.net> <20060330181456.GE21841@keybit.net>
Message-ID: <442C69B7.5040202@loskot.net>

strk@refractions.net wrote:
> As said in previous mail, I'd drop createLinearRing().
> Every intention to create an EMPTY geometry should be
> expressed using the function I added for this purpose:
> createEmptyGeometry().
> This should reduce error possibilities.

This does not solve the problem.
The problem is that:
1. LinearRing design is incorrect in terms of creating it's empty
representation
2. Or, the usage is incorrect (passing null pointer for factory)
3. Or, implementation of construction is incorrect and it should accept
null pointers to factory (empty LinearRing does not need a factory).

These problems can apply to every geometry, I suppose so.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From simonom at gmail.com  Thu Mar 30 18:52:41 2006
From: simonom at gmail.com (Simon O'Malley)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5 Again
Message-ID: <e3a3ae450603301552h304ddef0h6276af05ed005830@mail.gmail.com>

Hi All

Not sure if this is a list or a gmail problem as this message never showed
up. If this is a double post please ignore.

Has anyone successfully built geos-2.2.0 on fedora core 5.

I get the following errors when running make.

[root@nazgul geos-2.2.0]# make
Making all in source
make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
Making all in geom
make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H -I.
-I. -I../../source/headers -I../../source/headers/geos
-I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
Coordinate.lo Coordinate.cpp; \
then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
".deps/Coordinate.Tpo"; exit 1; fi
mkdir .libs
 g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
-I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0 -g
-O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c Coordinate.cpp
-fPIC -DPIC -o .libs/Coordinate.o
../../source/headers/geos/geom.h:361: error: extra qualification
'geos::Coordinate::' on member 'setNull'
../../source/headers/geos/geom.h:367: error: extra qualification
'geos::Coordinate::' on member 'getNull'
../../source/headers/geos/geom.h:371: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:377: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:384: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:394: error: extra qualification
'geos::Coordinate::' on member 'Coordinate'
../../source/headers/geos/geom.h:400: error: extra qualification
'geos::Coordinate::' on member 'setCoordinate'
../../source/headers/geos/geom.h:406: error: extra qualification
'geos::Coordinate::' on member 'equals2D'
../../source/headers/geos/geom.h:416: error: extra qualification
'geos::Coordinate::' on member 'compareTo'
../../source/headers/geos/geom.h:432: error: extra qualification
'geos::Coordinate::' on member 'equals3D'
../../source/headers/geos/geom.h:436: error: extra qualification
'geos::Coordinate::' on member 'makePrecise'
../../source/headers/geos/geom.h:441: error: extra qualification
'geos::Coordinate::' on member 'distance'
../../source/headers/geos/geom.h:447: error: extra qualification
'geos::Coordinate::' on member 'hashCode'
../../source/headers/geos/geom.h:459: error: extra qualification
'geos::Coordinate::' on member 'hashCode'
make[2]: *** [Coordinate.lo] Error 1
make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
make: *** [all-recursive] Error 1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060331/4465ab81/attachment.html
From mateusz at loskot.net  Thu Mar 30 20:09:41 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
Message-ID: <442C8155.9060108@loskot.net>

Hi,

Could anyone explain/confirm me assumptions behind
the GeometryFactory class?
Depending on its semantic I'd have some proposal to refactor it.
Here are my qusetions:

Are following assumptions correct?

1. Ever instance of Geometry type (or its subtype) can have assigned its
own instance of GeometryFactory

2. One instance of GeometryFactory class can be shared (assigned to)
between more than one objects of Geometry class

3. It is not assumed that all geometries share the same
common instance of GeometryFactory

Thanks in advance for comments
Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From cfis at interserv.com  Thu Mar 30 20:20:58 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C8155.9060108@loskot.net>
References: <442C8155.9060108@loskot.net>
Message-ID: <442C83FA.3000503@interserv.com>

While on the subject of geometry factories....

Would it be possible to add a global, default factory?  This would be 
very helpful when accessing GEOS from scripting languages like ruby and 
python.

The first issue it would solve is worrying about keeping geometry 
factories alive for longer than the geometries themselves.  This is 
tricker than it sounds because at least in Ruby you're dealing with a 
mark and sweep garbage collector.  So what I do in Ruby is create a 
global factory and always use that.

However, that solution breaks down when dealing with marshaling 
objects.  Ruby has the concept of marshal/unmarshal like a lot of other 
languages.  Since GEOS is in C, these methods need to be implemented in 
C++ (as part of the SWIG bindings).  Thus, since I'm in C++ I don't have 
easy access to the geometry factory I created on the Ruby side.  Thus in 
C++ I can create a GeometryFactory as a global of some sort fully 
realizing it will never be freed and thus leak memory.  The alternative 
is worse, create the factory, create the geometry, free the factory, get 
a segmentation fault.  For the moment, I go with a static variable in 
the SWIG bindings...would be nice to get something like this officially 
supported.

Of course, removing the dependency between geometries and factories 
would be even better.  I have no idea if its possible since I haven't 
looked at that part of the code - but it is a bit annoying having the 
back reference from geometries to factories to have to worry about.

Charlie


Mateusz ?oskot wrote:
> Hi,
>
> Could anyone explain/confirm me assumptions behind
> the GeometryFactory class?
> Depending on its semantic I'd have some proposal to refactor it.
> Here are my qusetions:
>
> Are following assumptions correct?
>
> 1. Ever instance of Geometry type (or its subtype) can have assigned its
> own instance of GeometryFactory
>
> 2. One instance of GeometryFactory class can be shared (assigned to)
> between more than one objects of Geometry class
>
> 3. It is not assumed that all geometries share the same
> common instance of GeometryFactory
>
> Thanks in advance for comments
> Cheers
>   
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060330/8dd98ba3/smime.bin
From mbdavis at VividSolutions.com  Thu Mar 30 20:28:00 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>

Those assumptions are correct.

There were two main reason for designing the GeometryFactory concept:

1) Provide a convenient, single location for defining the various "initial conditions" for Geometries.  This includes the Precision Model, the CoordinateSequenceFactory, and sometimes the SRID.  It may be extended in the future to contain things like which Polygon model to use, and preferences for precision handling.

2) Reduce the memory overhead of Geometries by moving relatively static objects (references) out of the Geometry and into a single shared object.

Hopefully this makes sense... But if anyone has good opinions about another design pattern, send them along.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 5:10 PM
> To: GEOS Development List
> Subject: [geos-devel] GeometryFactory - call for explanation
> 
> 
> Hi,
> 
> Could anyone explain/confirm me assumptions behind
> the GeometryFactory class?
> Depending on its semantic I'd have some proposal to refactor 
> it. Here are my qusetions:
> 
> Are following assumptions correct?
> 
> 1. Ever instance of Geometry type (or its subtype) can have 
> assigned its own instance of GeometryFactory
> 
> 2. One instance of GeometryFactory class can be shared 
> (assigned to) between more than one objects of Geometry class
> 
> 3. It is not assumed that all geometries share the same
> common instance of GeometryFactory
> 
> Thanks in advance for comments
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From cfis at interserv.com  Thu Mar 30 20:40:46 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>
Message-ID: <442C889E.6010100@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3166 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060330/8b9cf9d2/smime.bin
From mateusz at loskot.net  Thu Mar 30 20:45:25 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>
Message-ID: <442C89B5.9090700@loskot.net>

Martin Davis wrote:
> Those assumptions are correct. There were two main reason for 
> designing the GeometryFactory concept:
> 
> 1) Provide a convenient, single location for defining the various 
> "initial conditions" for Geometries.

Yes, that's what factory pattern is for.

> 2) Reduce the memory overhead of Geometries by moving relatively 
> static objects (references) out of the Geometry and into a single 
> shared object.
> 
> Hopefully this makes sense... But if anyone has good opinions about 
> another design pattern, send them along.

I'd like ask question related to the second point.

Do you mean that another option would be to create one single (global?)
and shared factory?

If you do, then I'd say this stays in opposition to the assumption nr 3:

"3. It is not assumed that all geometries share the same common instance
of GeometryFactory"


We, with Sandro, are considering possible improvements related to
managing and track lifetime of object like those factories.
So, if my 3 assumptions I presented are correct, and they are as you've
confirmed already, then here is my proposal:

I'd suggest to use "Shared Smart Pointer" semantic to manage geometry
factories and their relations to geometry objects.
One possibility is to use boost::shared_ptr (no linking to ext. libs
required, just including one header, as <vector> or <list>).

Why?

1. Using shared_ptr we don't have to track which factory is assigned to
which geometry.

2. Using shared_ptr we don't have to track where is particular factory used.

3. Using shared_ptr it is guaranteed that GeometryFactory object lives
as long as it is required and no longer.

Why not to use singleton or when to use it?

Singleton is another option but *does* *not* apply to the current
design, according to assumptions already confirmed.

There is rationale to implement GeometryFactory as a Singleton *only* if
it is assumed that there is only *one* factory and it is common to all
instances of Geometry class. But this situation does not occur as I
understand (and 3 assumptions confirm).

strk:
How are you convinced to move to smart pointers?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 20:46:27 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9D4@venus.VividSolutions.com>

Good point about splitting the initial conditions out from the GeometryFactory.  I was trying to reduce the number of classes - but maybe that's somewhat less flexible.
 
And yes, this is all trivial in Java - I commiserate with you C++ guys....  8^)
 
I would think smart pointers would help here.  As for a default factory, that probably makes a lot of sense for 98% of users - so seems like a good idea.
 
Martin
 
 
Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046

	-----Original Message-----
	From: geos-devel-bounces@geos.refractions.net [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Charlie Savage
	Sent: March 30, 2006 5:41 PM
	To: GEOS Development List
	Subject: Re: [geos-devel] GeometryFactory - call for explanation
	
	
	Thanks for the explanation Martin.  Seems like that is a workable design in Java, where the garbage collector worries about freeing the factories for you when they are no longer referenced by any geometries.  I suppose I would probably split out the initial conditions into some other object - so the factory just creates geometries.  But in the end, that doesn't change the issue I brought up.
	
	So, in C++ Geos could we use smart pointers to achieve the same effect?  And maybe add in a default global factory?
	
	Charlie
	
	Martin Davis wrote: 

		Those assumptions are correct.
		
		There were two main reason for designing the GeometryFactory concept:
		
		1) Provide a convenient, single location for defining the various "initial conditions" for Geometries.  This includes the Precision Model, the CoordinateSequenceFactory, and sometimes the SRID.  It may be extended in the future to contain things like which Polygon model to use, and preferences for precision handling.
		
		2) Reduce the memory overhead of Geometries by moving relatively static objects (references) out of the Geometry and into a single shared object.
		
		Hopefully this makes sense... But if anyone has good opinions about another design pattern, send them along.
		
		Martin Davis, Senior Technical Architect
		Vivid Solutions Inc.      www.vividsolutions.com
		Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
		Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
		
		
		  

			-----Original Message-----
			From: geos-devel-bounces@geos.refractions.net 
			[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
			Mateusz Loskot
			Sent: March 30, 2006 5:10 PM
			To: GEOS Development List
			Subject: [geos-devel] GeometryFactory - call for explanation
			
			
			Hi,
			
			Could anyone explain/confirm me assumptions behind
			the GeometryFactory class?
			Depending on its semantic I'd have some proposal to refactor 
			it. Here are my qusetions:
			
			Are following assumptions correct?
			
			1. Ever instance of Geometry type (or its subtype) can have 
			assigned its own instance of GeometryFactory
			
			2. One instance of GeometryFactory class can be shared 
			(assigned to) between more than one objects of Geometry class
			
			3. It is not assumed that all geometries share the same
			common instance of GeometryFactory
			
			Thanks in advance for comments
			Cheers
			-- 
			Mateusz ?oskot
			http://mateusz.loskot.net 
			_______________________________________________
			geos-devel mailing list
			geos-devel@geos.refractions.net 
			http://geos.refractions.net/mailman/listinfo/geos-devel
			
			    

		_______________________________________________
		geos-devel mailing list
		geos-devel@geos.refractions.net
		http://geos.refractions.net/mailman/listinfo/geos-devel
		
		
		  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060330/d41429b3/attachment.html
From mateusz at loskot.net  Thu Mar 30 20:47:48 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C889E.6010100@interserv.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>
	<442C889E.6010100@interserv.com>
Message-ID: <442C8A44.6000504@loskot.net>

Charlie Savage wrote:
> 
> So, in C++ Geos could we use smart pointers to achieve the same
> effect? And maybe add in a default global factory?

As I explained in my recent post, 2 mintues ago, I'm affraid those two
approaches are completely different and not fully interchangable.
So, we (I mean GEOS DevTeam, I'm only doing some
clean up here :-)) should decide.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Thu Mar 30 20:49:25 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9D5@venus.VividSolutions.com>

Notice I said "*relatively* static".  You still need the flexibility to use different Precision Models and difference CoordinateSequence implementations when required.  I would think that a static default factory with a FLOATING PM and the default CS would be handy, though.

As for smart pointers, seems like a good idea - although being a Java guy now I have happily purged all of this kind of knowledge from my brain   8^) 

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 5:45 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] GeometryFactory - call for explanation
> 
> 
> Martin Davis wrote:
> > Those assumptions are correct. There were two main reason for
> > designing the GeometryFactory concept:
> > 
> > 1) Provide a convenient, single location for defining the various
> > "initial conditions" for Geometries.
> 
> Yes, that's what factory pattern is for.
> 
> > 2) Reduce the memory overhead of Geometries by moving relatively
> > static objects (references) out of the Geometry and into a single 
> > shared object.
> > 
> > Hopefully this makes sense... But if anyone has good opinions about
> > another design pattern, send them along.
> 
> I'd like ask question related to the second point.
> 
> Do you mean that another option would be to create one single 
> (global?) and shared factory?
> 
> If you do, then I'd say this stays in opposition to the 
> assumption nr 3:
> 
> "3. It is not assumed that all geometries share the same 
> common instance of GeometryFactory"
> 
> 
> We, with Sandro, are considering possible improvements 
> related to managing and track lifetime of object like those 
> factories. So, if my 3 assumptions I presented are correct, 
> and they are as you've confirmed already, then here is my proposal:
> 
> I'd suggest to use "Shared Smart Pointer" semantic to manage 
> geometry factories and their relations to geometry objects. 
> One possibility is to use boost::shared_ptr (no linking to 
> ext. libs required, just including one header, as <vector> or <list>).
> 
> Why?
> 
> 1. Using shared_ptr we don't have to track which factory is 
> assigned to which geometry.
> 
> 2. Using shared_ptr we don't have to track where is 
> particular factory used.
> 
> 3. Using shared_ptr it is guaranteed that GeometryFactory 
> object lives as long as it is required and no longer.
> 
> Why not to use singleton or when to use it?
> 
> Singleton is another option but *does* *not* apply to the 
> current design, according to assumptions already confirmed.
> 
> There is rationale to implement GeometryFactory as a 
> Singleton *only* if it is assumed that there is only *one* 
> factory and it is common to all instances of Geometry class. 
> But this situation does not occur as I understand (and 3 
> assumptions confirm).
> 
> strk:
> How are you convinced to move to smart pointers?
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mateusz at loskot.net  Thu Mar 30 20:52:12 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9D4@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9D4@venus.VividSolutions.com>
Message-ID: <442C8B4C.3000400@loskot.net>

Martin Davis wrote:
> 
> And yes, this is all trivial in Java - I commiserate with you C++ 
> guys....  8^)

Hehe, I'll leave it with silence just to not to start flame war ;-)))


> I would think smart pointers would help here.

Yup

> As for a default factory, that probably makes a lot of sense for 98%
> of users - so seems like a good idea.

Yes, it makes sense, but also it should be clear
that "default factory" =/= "common factory (as a singleton"

I mean, according to the current approach (and the 3 assumptions
presented in this thread) default factory could be a shared factory, but
not the only-single-global-common factory to N objects.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 20:56:23 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9D5@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9D5@venus.VividSolutions.com>
Message-ID: <442C8C47.4090200@loskot.net>

Martin Davis wrote:
> Notice I said "*relatively* static".  You still need the flexibility 
> to use different Precision Models and difference CoordinateSequence 
> implementations when required.  I would think that a static default 
> factory with a FLOATING PM and the default CS would be handy, though.
> 
OK. That's not a problem.
It is possible to replace current factory with new one for particular
geometry object or to create new factory customized properly and use it
to build geometries.
Shared smart pointer idiom helps to handle both cases.

> As for smart pointers, seems like a good idea - although being a Java
>  guy now I have happily purged all of this kind of knowledge from my 
> brain   8^)

Yes, but that not a problem :-)
I mean, first all assumptions have to be considered in details.
And when those assumptions are stable, then it is possible to implement
the solution properly: in Java or in C++, it does not matter, just using
tools that particular language provides.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 21:10:53 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C83FA.3000503@interserv.com>
References: <442C8155.9060108@loskot.net> <442C83FA.3000503@interserv.com>
Message-ID: <442C8FAD.2040909@loskot.net>

Charlie Savage wrote:
> While on the subject of geometry factories....
> 
> Would it be possible to add a global, default factory?  This would be
>  very helpful when accessing GEOS from scripting languages like ruby
>  and python.

Should it be global?

> The first issue it would solve is worrying about keeping geometry 
> factories alive for longer than the geometries themselves.  This is 
> tricker than it sounds because at least in Ruby you're dealing with a
>  mark and sweep garbage collector.  So what I do in Ruby is create a 
> global factory and always use that.

I'm not an experienced implementor of binding to scripting environment,
but I'd say shared_ptr will solve the problem.
Smart pointer is just a garbage collector.
Shared smart pointer tracks all its clients and will collect the object
it manages only after the last client will disconnect.
Does it look ok for you?

> However, that solution breaks down when dealing with marshaling 
> objects.  Ruby has the concept of marshal/unmarshal like a lot of 
> other languages.  Since GEOS is in C, these methods need to be 
> implemented in C++ (as part of the SWIG bindings).

AFAIK GEOS is in C++ :-)

> Thus, since I'm in C++ I don't have easy access to the geometry
> factory I created on the Ruby side.  Thus in C++ I can create a
> GeometryFactory as a global of some sort fully realizing it will
> never be freed and thus leak memory.  The alternative is worse,
> create the factory, create the geometry, free the factory, get a
> segmentation fault.

My option is to let the factory be collected automatically when it is
not used anymore - by smart pointer, a garbage collector.


> Of course, removing the dependency between geometries and factories 
> would be even better.

Definitely, but there seems to be a good reason that every geometry
knows its factory. I mean, it's not very uncommon :-)

Another option is to make it possible to do both:
- create geometry with assigning the factory to it
- create geometry without assigning the factory to it (or assign shared
default factory automatically, but I'm not sure such factory will be
usable in all cases)

> I have no idea if its possible since I haven't looked at that part of
> the code - but it is a bit annoying having the back reference from
> geometries to factories to have to worry about.

That's why I've started this thread.
My idea is to make it not necessary to
track "where is my factory" back :-)

But note, that this is not very uncommon that geometry knows its
factory, e.g. for further usage/modification of this geometry.
Simple example:
You have an instance of the GeometryCollection class and theFactory
object is assigned to this geometry. You've configured this factory
according to your needs (PrecisionModel, etc.).
Now, you want to create and add new (sub)geometry to this collection.
Would you prefer to create new factory? I would not.
The most convenient is to query theFactory object from the
GeometryCollection instance (let's call it Master Factory) and use it to
create (sub)geometries that will be added to this collection.
This way all geometries will use common conditions (PrecisionModel, etc.)


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Thu Mar 30 22:01:52 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Why empty LineString should return a null pointer from
	getCoordiante()
Message-ID: <442C9BA0.9040307@loskot.net>

Hi,

Please, forgive me that I'm annoying with all those recent questions but
I really would like to understand GEOS internals.


Here is getCoordinate:

const Coordinate* LineString::getCoordinate() const
{
   // should use auto_ptr here or return NULL or throw an exception !
   // 	--strk;
   if (isEmpty())
      return(new Coordinate());

   return &(points->getAt(0));
}

as you see, there is Sandro's comment about what could be best.
I think it's time to answer this question :-)

For comparison and reference, here is JTS' version of this function:

public Coordinate getCoordinate()
{
   if (isEmpty()) return null;
   return points.getCoordinate(0);
}

Here are my comments to current solution:
1. Returning newly allocated Coordinate is confusing and will cause
problems that user won't free the memory

2. This brokes the logic because how empty linestring can return any
Coordinate? This does not make any sense.


Here are my comments to possible solution:

1. auto_ptr will not solve the problem because it won't fix broken logic
will

2. My suggestion is to return *null pointer*

As you can see above, JTS version returns null reference.

What is Java null reference (a pointer to nothing)?
It is a reference that does not refer to any instance of any type.

What we can do with Java null reference?
null reference can be safely compared with other references (null or not
null), null reference can be safely passed to the function, returned
from function, null reference can be safely assigned to the existing
reference etc.
What we can not do with null reference is dereferencing, e.g.:

Type x = null;
x.Fire(); // BUM!

Now, how to transit this Javism to C++. It's very simple - just use null
pointer.

What is null pointer in C++?
Null pointer is a *valid* pointer value that doesn?t point to anything.
Just as null reference in Java.

Similarly, with null pointers in C++ we can do (almost) the same as what
we can do with Java null reference.

The only thin that can not be done with C++ null pointer is
dereferencing. Dereferencing null pointer causes undefined behavior
This rule applies to every pointer that does not point to point to anything.

What I'd like to repeat is that "null pointer is a *valid* pointer",
but not invalid. Invalid pointer is another category and *any* use of
invalid pointer causes Undefined Behaviour, even comparing, etc.

So, I vote for returning null pointer.

3. Throwing an exception is a bad idea

Exceptions should be used for unexpected situations but when user is
asking object for coordinate he is aware that the object may or may not
include any coordinates. So, there is no unexpected behaviour here.


BTW, I'm really sorry if my explanation seems to be like in books of
seriece "XXX for dummies". This is completely not my intetion!
Simply, I usualy try to explain my point as clear as possible.


Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From woodbri at swoodbridge.com  Thu Mar 30 22:21:01 2006
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Why empty LineString should return a null pointer
	from	getCoordiante()
In-Reply-To: <442C9BA0.9040307@loskot.net>
References: <442C9BA0.9040307@loskot.net>
Message-ID: <442CA01D.9090205@swoodbridge.com>

Mateusz,

I think this thread is great and I am learning a lot about GEOS 
internals and about C++ in general. I can not imagine anyone taking 
exception to your trying to learn more about GEOS or trying to explain 
your reason behind you suggestions. GEOS is an important tool for us in 
the C/C++ world so many thanks to you for trying to make it better, for 
Sandro for all his efforts in porting JTS and Martin for his efforts in 
creating, and all the others that I have missed calling out.

Personally, I appreciate all the effort.
Thank you all,
   -Steve

Mateusz ?oskot wrote:
> Hi,
> 
> Please, forgive me that I'm annoying with all those recent questions but
> I really would like to understand GEOS internals.
> 
> 
> Here is getCoordinate:
> 
> const Coordinate* LineString::getCoordinate() const
> {
>    // should use auto_ptr here or return NULL or throw an exception !
>    // 	--strk;
>    if (isEmpty())
>       return(new Coordinate());
> 
>    return &(points->getAt(0));
> }
> 
> as you see, there is Sandro's comment about what could be best.
> I think it's time to answer this question :-)
> 
> For comparison and reference, here is JTS' version of this function:
> 
> public Coordinate getCoordinate()
> {
>    if (isEmpty()) return null;
>    return points.getCoordinate(0);
> }
> 
> Here are my comments to current solution:
> 1. Returning newly allocated Coordinate is confusing and will cause
> problems that user won't free the memory
> 
> 2. This brokes the logic because how empty linestring can return any
> Coordinate? This does not make any sense.
> 
> 
> Here are my comments to possible solution:
> 
> 1. auto_ptr will not solve the problem because it won't fix broken logic
> will
> 
> 2. My suggestion is to return *null pointer*
> 
> As you can see above, JTS version returns null reference.
> 
> What is Java null reference (a pointer to nothing)?
> It is a reference that does not refer to any instance of any type.
> 
> What we can do with Java null reference?
> null reference can be safely compared with other references (null or not
> null), null reference can be safely passed to the function, returned
> from function, null reference can be safely assigned to the existing
> reference etc.
> What we can not do with null reference is dereferencing, e.g.:
> 
> Type x = null;
> x.Fire(); // BUM!
> 
> Now, how to transit this Javism to C++. It's very simple - just use null
> pointer.
> 
> What is null pointer in C++?
> Null pointer is a *valid* pointer value that doesn?t point to anything.
> Just as null reference in Java.
> 
> Similarly, with null pointers in C++ we can do (almost) the same as what
> we can do with Java null reference.
> 
> The only thin that can not be done with C++ null pointer is
> dereferencing. Dereferencing null pointer causes undefined behavior
> This rule applies to every pointer that does not point to point to anything.
> 
> What I'd like to repeat is that "null pointer is a *valid* pointer",
> but not invalid. Invalid pointer is another category and *any* use of
> invalid pointer causes Undefined Behaviour, even comparing, etc.
> 
> So, I vote for returning null pointer.
> 
> 3. Throwing an exception is a bad idea
> 
> Exceptions should be used for unexpected situations but when user is
> asking object for coordinate he is aware that the object may or may not
> include any coordinates. So, there is no unexpected behaviour here.
> 
> 
> BTW, I'm really sorry if my explanation seems to be like in books of
> seriece "XXX for dummies". This is completely not my intetion!
> Simply, I usualy try to explain my point as clear as possible.
> 
> 
> Cheers


From mgleahy at alumni.uwaterloo.ca  Thu Mar 30 23:25:38 2006
From: mgleahy at alumni.uwaterloo.ca (Mike Leahy)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5 Again
In-Reply-To: <e3a3ae450603301552h304ddef0h6276af05ed005830@mail.gmail.com>
References: <e3a3ae450603301552h304ddef0h6276af05ed005830@mail.gmail.com>
Message-ID: <442CAF42.3050505@alumni.uwaterloo.ca>

Hey Simon,

I haven't tried compiling geos on Fedora, but I've had similar problems
with other stuff - it's an issue with gcc-4.1.1 being more strict than
earlier versions.  If you can edit the source code that contains those
errors, and remove the unwanted 'extra qualifications'.  E.g., in the
file /source/headers/geos/geom.h on line 361, remove the text
"geos::Coordinate::" from the code...do the same for any similar extra
qualification errors.  After you clean up those errors, if you're lucky
it will compile, if you're less lucky, you'll find more extra
qualifications to clean up.  If you're unlucky, you'll find something
harder to deal with.

Good luck,
Mike

Simon O'Malley wrote:
> Hi All
> 
> Not sure if this is a list or a gmail problem as this message never showed
> up. If this is a double post please ignore.
> 
> Has anyone successfully built geos-2.2.0 on fedora core 5.
> 
> I get the following errors when running make.
> 
> [root@nazgul geos-2.2.0]# make
> Making all in source
> make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
> Making all in geom
> make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
> if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H -I.
> -I. -I../../source/headers -I../../source/headers/geos
> -I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
> Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
> Coordinate.lo Coordinate.cpp; \
> then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
> ".deps/Coordinate.Tpo"; exit 1; fi
> mkdir .libs
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
> -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0 -g
> -O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c Coordinate.cpp
> -fPIC -DPIC -o .libs/Coordinate.o
> ../../source/headers/geos/geom.h:361: error: extra qualification
> 'geos::Coordinate::' on member 'setNull'
> ../../source/headers/geos/geom.h:367: error: extra qualification
> 'geos::Coordinate::' on member 'getNull'
> ../../source/headers/geos/geom.h:371: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:377: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:384: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:394: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:400: error: extra qualification
> 'geos::Coordinate::' on member 'setCoordinate'
> ../../source/headers/geos/geom.h:406: error: extra qualification
> 'geos::Coordinate::' on member 'equals2D'
> ../../source/headers/geos/geom.h:416: error: extra qualification
> 'geos::Coordinate::' on member 'compareTo'
> ../../source/headers/geos/geom.h:432: error: extra qualification
> 'geos::Coordinate::' on member 'equals3D'
> ../../source/headers/geos/geom.h:436: error: extra qualification
> 'geos::Coordinate::' on member 'makePrecise'
> ../../source/headers/geos/geom.h:441: error: extra qualification
> 'geos::Coordinate::' on member 'distance'
> ../../source/headers/geos/geom.h:447: error: extra qualification
> 'geos::Coordinate::' on member 'hashCode'
> ../../source/headers/geos/geom.h:459: error: extra qualification
> 'geos::Coordinate::' on member 'hashCode'
> make[2]: *** [Coordinate.lo] Error 1
> make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
> make[1]: *** [all-recursive] Error 1
> make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
> make: *** [all-recursive] Error 1
> 
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From mateusz at loskot.net  Fri Mar 31 00:05:01 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Why empty LineString should return a null pointer
	from getCoordiante()
In-Reply-To: <442CA01D.9090205@swoodbridge.com>
References: <442C9BA0.9040307@loskot.net> <442CA01D.9090205@swoodbridge.com>
Message-ID: <442CB87D.7080805@loskot.net>

Stephen Woodbridge wrote:
> Mateusz,
> 
> I think this thread is great and I am learning a lot about GEOS 
> internals and about C++ in general. I can not imagine anyone taking 
> exception to your trying to learn more about GEOS or trying to
> explain your reason behind you suggestions.

Thank you Stephen!

> GEOS is an important tool for us in the C/C++ world so many thanks to
> you for trying to make it better, for Sandro for all his efforts in
> porting JTS and Martin for his efforts in creating, and all the
> others that I have missed calling out.
> 
> Personally, I appreciate all the effort. Thank you all,

Let me to join to render thanks as well.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From ari.jolma at tkk.fi  Fri Mar 31 00:55:51 2006
From: ari.jolma at tkk.fi (Ari Jolma)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5 Again
In-Reply-To: <442CAF42.3050505@alumni.uwaterloo.ca>
References: <e3a3ae450603301552h304ddef0h6276af05ed005830@mail.gmail.com>
	<442CAF42.3050505@alumni.uwaterloo.ca>
Message-ID: <442CC467.8090404@tkk.fi>

I've succesfully compiled geos with Fedora 5 and the complete solution 
is as explained below.

Ari

Mike Leahy kirjoitti:
> Hey Simon,
>
> I haven't tried compiling geos on Fedora, but I've had similar problems
> with other stuff - it's an issue with gcc-4.1.1 being more strict than
> earlier versions.  If you can edit the source code that contains those
> errors, and remove the unwanted 'extra qualifications'.  E.g., in the
> file /source/headers/geos/geom.h on line 361, remove the text
> "geos::Coordinate::" from the code...do the same for any similar extra
> qualification errors.  After you clean up those errors, if you're lucky
> it will compile, if you're less lucky, you'll find more extra
> qualifications to clean up.  If you're unlucky, you'll find something
> harder to deal with.
>
> Good luck,
> Mike
>
> Simon O'Malley wrote:
>   
>> Hi All
>>
>> Not sure if this is a list or a gmail problem as this message never showed
>> up. If this is a double post please ignore.
>>
>> Has anyone successfully built geos-2.2.0 on fedora core 5.
>>
>> I get the following errors when running make.
>>
>> [root@nazgul geos-2.2.0]# make
>> Making all in source
>> make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
>> Making all in geom
>> make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
>> if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H -I.
>> -I. -I../../source/headers -I../../source/headers/geos
>> -I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
>> Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
>> Coordinate.lo Coordinate.cpp; \
>> then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
>> ".deps/Coordinate.Tpo"; exit 1; fi
>> mkdir .libs
>>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
>> -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0 -g
>> -O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c Coordinate.cpp
>> -fPIC -DPIC -o .libs/Coordinate.o
>> ../../source/headers/geos/geom.h:361: error: extra qualification
>> 'geos::Coordinate::' on member 'setNull'
>> ../../source/headers/geos/geom.h:367: error: extra qualification
>> 'geos::Coordinate::' on member 'getNull'
>> ../../source/headers/geos/geom.h:371: error: extra qualification
>> 'geos::Coordinate::' on member 'Coordinate'
>> ../../source/headers/geos/geom.h:377: error: extra qualification
>> 'geos::Coordinate::' on member 'Coordinate'
>> ../../source/headers/geos/geom.h:384: error: extra qualification
>> 'geos::Coordinate::' on member 'Coordinate'
>> ../../source/headers/geos/geom.h:394: error: extra qualification
>> 'geos::Coordinate::' on member 'Coordinate'
>> ../../source/headers/geos/geom.h:400: error: extra qualification
>> 'geos::Coordinate::' on member 'setCoordinate'
>> ../../source/headers/geos/geom.h:406: error: extra qualification
>> 'geos::Coordinate::' on member 'equals2D'
>> ../../source/headers/geos/geom.h:416: error: extra qualification
>> 'geos::Coordinate::' on member 'compareTo'
>> ../../source/headers/geos/geom.h:432: error: extra qualification
>> 'geos::Coordinate::' on member 'equals3D'
>> ../../source/headers/geos/geom.h:436: error: extra qualification
>> 'geos::Coordinate::' on member 'makePrecise'
>> ../../source/headers/geos/geom.h:441: error: extra qualification
>> 'geos::Coordinate::' on member 'distance'
>> ../../source/headers/geos/geom.h:447: error: extra qualification
>> 'geos::Coordinate::' on member 'hashCode'
>> ../../source/headers/geos/geom.h:459: error: extra qualification
>> 'geos::Coordinate::' on member 'hashCode'
>> make[2]: *** [Coordinate.lo] Error 1
>> make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
>> make[1]: *** [all-recursive] Error 1
>> make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
>> make: *** [all-recursive] Error 1
>>
>>
>>
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>     
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>   


-- 
Prof. Ari Jolma
Kartografia ja Geoinformatiikka / Cartography and Geoinformatics
Teknillinen Korkeakoulu / Helsinki University of Technology
POBox 1200, 02015 TKK, Finland
Email: ari.jolma at tkk.fi URL: http://www.tkk.fi/~jolma


From mateusz at loskot.net  Fri Mar 31 01:14:03 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Envelope of empty Polygon
Message-ID: <442CC8AB.3070205@loskot.net>

Hi,

I'm bringing next subject to discuss.

The main question is what should be returned by getEnvelope()
called on empty polygon?

Here is simple use case:

GeometryFactory factory(...);
//...

// create empty polygon
Polygon* poly = factory.createPolygon();

// request for its envelope
Geometry* geo = 0;
geo = poly->getEnvelope();
geo->isEmpty(); // <--- THE PROBLEM


As I revealed, when exterior ring is empty geometry,
getEnvelope() returns or creates instance of envelope object.
This object is initialized by Envelope::setToNull().
So, returned envelope for empty polygon has following coordinates:
minx = -1.0
maxx = 0.0
miny = -1.0
maxx = 0.0

Is this correct behaviour?
Is empty polygon assumed to return non-empty envelope as above?

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Fri Mar 31 02:55:33 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>
Message-ID: <20060331075533.GI21841@keybit.net>

On Thu, Mar 30, 2006 at 02:42:19PM -0800, Martin Davis wrote:
> I'm not sure why strk is making this comment.  JTS/GEOS supports empty geometries of all types (as per the OGC SFS).  

I'm a bit PostGIS oriented. There's no support for EMPTY whatever
in PostGIS except GEOMETRYCOLLECTION. As always I'd follow
JTS, so if the plan is to support any kind of empty geom
we should drop the ::createEmptyGeometry() and ensure no
memory violation is triggered by EMPTY types *and* results
are semantically correct.

--strk;

From strk at refractions.net  Fri Mar 31 02:58:53 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] createEmptyGeometry() creates
	instance	ofGeometryCollection
In-Reply-To: <442C55F7.3000905@loskot.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9BA@venus.VividSolutions.com>
	<442C55F7.3000905@loskot.net>
Message-ID: <20060331075853.GJ21841@keybit.net>

On Fri, Mar 31, 2006 at 12:04:39AM +0200, Mateusz ?oskot wrote:
> Martin Davis wrote:
> > Yes.  The spec doesn't cover this, but I chose to use an empty 
> > GeometryCollection as a "typeless" empty geometry, for methods which 
> > need to return one.  The createEmptyGeometry method is just a 
> > convenience method for this convention.
> 
> OK, I understant it.
> 
> > Anyway, what else could that method return that would make sense 
> > (given that it has no type information)?
> 
> It depends on the idea behind "empty geometry" or "null geometry" [1].
> As I know, OGC Simple Feature Spec. explains that empty geometry
> represents empty point set (empty set of coordinates).
> According to my understanding:
> Point is empty if it contains "uninitialized" coordinates
> MultiPoint is empty if it contains no points in its set.
> etc.
> 
> There is also a distinction between empty and null.
> NULL means something undefined, uninitialized - something unsafe.
> EMPTY means something well constructor but with empty set of points.
> In some case, NULL object can be compared to EMPTY object with true result.

But what's defined in an EMPTY set of points ?
It's the points themself giving semantic of a geometry type.
What distinguish an EMPTY point from an EMPTY line from an
EMPTY collection ? It's the exactly same topological space:
the NO space at all. How can you say that NOTHING is a point
or a line or an area ?

--strk;

From strk at refractions.net  Fri Mar 31 03:02:01 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
In-Reply-To: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>
References: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>
Message-ID: <20060331080201.GK21841@keybit.net>

2.2.1 should have fixed this, could you give it a try ?
TIA
--strk;

On Fri, Mar 31, 2006 at 10:29:02AM +1200, Simon O'Malley wrote:
> Hi All
> 
> I wont confess to being a developer so hopefully there is someone on the
> list who can help.
> 
> Has anyone successfully built geos-2.2.0 on fedora core 5.
> 
> I get the following errors when running make.
> 
> [root@nazgul geos-2.2.0]# make
> Making all in source
> make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
> Making all in geom
> make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
> if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H -I.
> -I. -I../../source/headers -I../../source/headers/geos
> -I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
> Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
> Coordinate.lo Coordinate.cpp; \
> then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
> ".deps/Coordinate.Tpo"; exit 1; fi
> mkdir .libs
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
> -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0 -g
> -O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c Coordinate.cpp
> -fPIC -DPIC -o .libs/Coordinate.o
> ../../source/headers/geos/geom.h:361: error: extra qualification
> 'geos::Coordinate::' on member 'setNull'
> ../../source/headers/geos/geom.h:367: error: extra qualification
> 'geos::Coordinate::' on member 'getNull'
> ../../source/headers/geos/geom.h:371: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:377: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:384: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:394: error: extra qualification
> 'geos::Coordinate::' on member 'Coordinate'
> ../../source/headers/geos/geom.h:400: error: extra qualification
> 'geos::Coordinate::' on member 'setCoordinate'
> ../../source/headers/geos/geom.h:406: error: extra qualification
> 'geos::Coordinate::' on member 'equals2D'
> ../../source/headers/geos/geom.h:416: error: extra qualification
> 'geos::Coordinate::' on member 'compareTo'
> ../../source/headers/geos/geom.h:432: error: extra qualification
> 'geos::Coordinate::' on member 'equals3D'
> ../../source/headers/geos/geom.h:436: error: extra qualification
> 'geos::Coordinate::' on member 'makePrecise'
> ../../source/headers/geos/geom.h:441: error: extra qualification
> 'geos::Coordinate::' on member 'distance'
> ../../source/headers/geos/geom.h:447: error: extra qualification
> 'geos::Coordinate::' on member 'hashCode'
> ../../source/headers/geos/geom.h:459: error: extra qualification
> 'geos::Coordinate::' on member 'hashCode'
> make[2]: *** [Coordinate.lo] Error 1
> make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
> make[1]: *** [all-recursive] Error 1
> make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
> make: *** [all-recursive] Error 1

> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From mateusz at loskot.net  Fri Mar 31 03:03:07 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <20060331075533.GI21841@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>
	<20060331075533.GI21841@keybit.net>
Message-ID: <442CE23B.2060501@loskot.net>

strk@refractions.net wrote:
> On Thu, Mar 30, 2006 at 02:42:19PM -0800, Martin Davis wrote:
>> I'm not sure why strk is making this comment.  JTS/GEOS supports 
>> empty geometries of all types (as per the OGC SFS).
> 
> I'm a bit PostGIS oriented. There's no support for EMPTY whatever in
>  PostGIS except GEOMETRYCOLLECTION. As always I'd follow JTS, so if 
> the plan is to support any kind of empty geom we should drop the 
> ::createEmptyGeometry() and ensure no memory violation is triggered 
> by EMPTY types *and* results are semantically correct.

Hi,

Another idea, possible and simple way to handle empty geometries would
be to add a boolean flag to the Geometry class - bool empty;

Then, if this flag is set, the geometry is empty.

Drawback:
This approach requires to keep this flag synchronized with state of
geometry to avoid situation when geometry is a non-empty set of points
but the empty flag is set to true ;-)

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Fri Mar 31 03:06:04 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C83FA.3000503@interserv.com>
References: <442C8155.9060108@loskot.net> <442C83FA.3000503@interserv.com>
Message-ID: <20060331080604.GL21841@keybit.net>

I'm in favour of this, but it would be an immutable
instance, using a FLOATING PrecisionModel.
There is already one in Geometry::INTERNAL_FACTORY, I
would change it's access method to GeometryFactory::defaultInstance()
and ensure constness.

--strk;

On Thu, Mar 30, 2006 at 06:20:58PM -0700, Charlie Savage wrote:
> While on the subject of geometry factories....
> 
> Would it be possible to add a global, default factory?  This would be 
> very helpful when accessing GEOS from scripting languages like ruby and 
> python.
> 
> The first issue it would solve is worrying about keeping geometry 
> factories alive for longer than the geometries themselves.  This is 
> tricker than it sounds because at least in Ruby you're dealing with a 
> mark and sweep garbage collector.  So what I do in Ruby is create a 
> global factory and always use that.
> 
> However, that solution breaks down when dealing with marshaling 
> objects.  Ruby has the concept of marshal/unmarshal like a lot of other 
> languages.  Since GEOS is in C, these methods need to be implemented in 
> C++ (as part of the SWIG bindings).  Thus, since I'm in C++ I don't have 
> easy access to the geometry factory I created on the Ruby side.  Thus in 
> C++ I can create a GeometryFactory as a global of some sort fully 
> realizing it will never be freed and thus leak memory.  The alternative 
> is worse, create the factory, create the geometry, free the factory, get 
> a segmentation fault.  For the moment, I go with a static variable in 
> the SWIG bindings...would be nice to get something like this officially 
> supported.
> 
> Of course, removing the dependency between geometries and factories 
> would be even better.  I have no idea if its possible since I haven't 
> looked at that part of the code - but it is a bit annoying having the 
> back reference from geometries to factories to have to worry about.
> 
> Charlie
> 
> 
> Mateusz ??oskot wrote:
> >Hi,
> >
> >Could anyone explain/confirm me assumptions behind
> >the GeometryFactory class?
> >Depending on its semantic I'd have some proposal to refactor it.
> >Here are my qusetions:
> >
> >Are following assumptions correct?
> >
> >1. Ever instance of Geometry type (or its subtype) can have assigned its
> >own instance of GeometryFactory
> >
> >2. One instance of GeometryFactory class can be shared (assigned to)
> >between more than one objects of Geometry class
> >
> >3. It is not assumed that all geometries share the same
> >common instance of GeometryFactory
> >
> >Thanks in advance for comments
> >Cheers
> >  



> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Fri Mar 31 03:07:27 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C8155.9060108@loskot.net>
References: <442C8155.9060108@loskot.net>
Message-ID: <20060331080727.GM21841@keybit.net>

All three assumptions are correct.
I'd add in (1) that each instance MUST have a GeometryFactory
assigned.
--strk;

On Fri, Mar 31, 2006 at 03:09:41AM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> Could anyone explain/confirm me assumptions behind
> the GeometryFactory class?
> Depending on its semantic I'd have some proposal to refactor it.
> Here are my qusetions:
> 
> Are following assumptions correct?
> 
> 1. Ever instance of Geometry type (or its subtype) can have assigned its
> own instance of GeometryFactory
> 
> 2. One instance of GeometryFactory class can be shared (assigned to)
> between more than one objects of Geometry class
> 
> 3. It is not assumed that all geometries share the same
> common instance of GeometryFactory
> 
> Thanks in advance for comments
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From simonom at gmail.com  Fri Mar 31 03:27:12 2006
From: simonom at gmail.com (Simon O'Malley)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
In-Reply-To: <20060331080201.GK21841@keybit.net>
References: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>
	<20060331080201.GK21841@keybit.net>
Message-ID: <e3a3ae450603310027m496879dbl9e68c6ddbf1c1c44@mail.gmail.com>

Hi strk

Same error with 2.2.1

Simon

On 3/31/06, strk@refractions.net <strk@refractions.net> wrote:
>
> 2.2.1 should have fixed this, could you give it a try ?
> TIA
> --strk;
>
> On Fri, Mar 31, 2006 at 10:29:02AM +1200, Simon O'Malley wrote:
> > Hi All
> >
> > I wont confess to being a developer so hopefully there is someone on the
> > list who can help.
> >
> > Has anyone successfully built geos-2.2.0 on fedora core 5.
> >
> > I get the following errors when running make.
> >
> > [root@nazgul geos-2.2.0]# make
> > Making all in source
> > make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
> > Making all in geom
> > make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
> > if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H
> -I.
> > -I. -I../../source/headers -I../../source/headers/geos
> > -I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
> > Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
> > Coordinate.lo Coordinate.cpp; \
> > then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
> > ".deps/Coordinate.Tpo"; exit 1; fi
> > mkdir .libs
> >  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
> > -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0-g
> > -O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c Coordinate.cpp
> > -fPIC -DPIC -o .libs/Coordinate.o
> > ../../source/headers/geos/geom.h:361: error: extra qualification
> > 'geos::Coordinate::' on member 'setNull'
> > ../../source/headers/geos/geom.h:367: error: extra qualification
> > 'geos::Coordinate::' on member 'getNull'
> > ../../source/headers/geos/geom.h:371: error: extra qualification
> > 'geos::Coordinate::' on member 'Coordinate'
> > ../../source/headers/geos/geom.h:377: error: extra qualification
> > 'geos::Coordinate::' on member 'Coordinate'
> > ../../source/headers/geos/geom.h:384: error: extra qualification
> > 'geos::Coordinate::' on member 'Coordinate'
> > ../../source/headers/geos/geom.h:394: error: extra qualification
> > 'geos::Coordinate::' on member 'Coordinate'
> > ../../source/headers/geos/geom.h:400: error: extra qualification
> > 'geos::Coordinate::' on member 'setCoordinate'
> > ../../source/headers/geos/geom.h:406: error: extra qualification
> > 'geos::Coordinate::' on member 'equals2D'
> > ../../source/headers/geos/geom.h:416: error: extra qualification
> > 'geos::Coordinate::' on member 'compareTo'
> > ../../source/headers/geos/geom.h:432: error: extra qualification
> > 'geos::Coordinate::' on member 'equals3D'
> > ../../source/headers/geos/geom.h:436: error: extra qualification
> > 'geos::Coordinate::' on member 'makePrecise'
> > ../../source/headers/geos/geom.h:441: error: extra qualification
> > 'geos::Coordinate::' on member 'distance'
> > ../../source/headers/geos/geom.h:447: error: extra qualification
> > 'geos::Coordinate::' on member 'hashCode'
> > ../../source/headers/geos/geom.h:459: error: extra qualification
> > 'geos::Coordinate::' on member 'hashCode'
> > make[2]: *** [Coordinate.lo] Error 1
> > make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
> > make[1]: *** [all-recursive] Error 1
> > make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
> > make: *** [all-recursive] Error 1
>
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
> --
>
> /"\    ASCII Ribbon Campaign
> \ /    Respect for low technology.
>   X     Keep e-mail messages readable by any computer system.
> / \    Keep it ASCII.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060331/a45b1091/attachment.html
From mateusz at loskot.net  Fri Mar 31 03:31:33 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <20060331080604.GL21841@keybit.net>
References: <442C8155.9060108@loskot.net> <442C83FA.3000503@interserv.com>
	<20060331080604.GL21841@keybit.net>
Message-ID: <442CE8E5.2080601@loskot.net>

strk@refractions.net wrote:
> I'm in favour of this, but it would be an immutable
> instance, using a FLOATING PrecisionModel.

Do you mean you want to provide single global common factory?

> There is already one in Geometry::INTERNAL_FACTORY, I
> would change it's access method to GeometryFactory::defaultInstance()
> and ensure constness.

and I'd let defaultInstance() to return shared_ptr.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Fri Mar 31 03:38:04 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <20060331080727.GM21841@keybit.net>
References: <442C8155.9060108@loskot.net> <20060331080727.GM21841@keybit.net>
Message-ID: <442CEA6C.2010907@loskot.net>

strk@refractions.net wrote:
> All three assumptions are correct.
> I'd add in (1) that each instance MUST have a GeometryFactory
> assigned.


OK, so let default constructor(s) of geometry class(es) get factorry
from external source - passed as a ctor param - or if no factory is
passed, then Geometry ctor calls GeometryFactory::defaultFactory().

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From simonom at gmail.com  Fri Mar 31 03:56:12 2006
From: simonom at gmail.com (Simon O'Malley)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5 Again
In-Reply-To: <442CC467.8090404@tkk.fi>
References: <e3a3ae450603301552h304ddef0h6276af05ed005830@mail.gmail.com>
	<442CAF42.3050505@alumni.uwaterloo.ca> <442CC467.8090404@tkk.fi>
Message-ID: <e3a3ae450603310056s2c46a6aaja5b91534ae39d43e@mail.gmail.com>

Hi Mike / Ari

Thanks for the pointer, compiling happily now.

Simon

On 3/31/06, Ari Jolma <ari.jolma@tkk.fi> wrote:
>
> I've succesfully compiled geos with Fedora 5 and the complete solution
> is as explained below.
>
> Ari
>
> Mike Leahy kirjoitti:
> > Hey Simon,
> >
> > I haven't tried compiling geos on Fedora, but I've had similar problems
> > with other stuff - it's an issue with gcc-4.1.1 being more strict than
> > earlier versions.  If you can edit the source code that contains those
> > errors, and remove the unwanted 'extra qualifications'.  E.g., in the
> > file /source/headers/geos/geom.h on line 361, remove the text
> > "geos::Coordinate::" from the code...do the same for any similar extra
> > qualification errors.  After you clean up those errors, if you're lucky
> > it will compile, if you're less lucky, you'll find more extra
> > qualifications to clean up.  If you're unlucky, you'll find something
> > harder to deal with.
> >
> > Good luck,
> > Mike
> >
> > Simon O'Malley wrote:
> >
> >> Hi All
> >>
> >> Not sure if this is a list or a gmail problem as this message never
> showed
> >> up. If this is a double post please ignore.
> >>
> >> Has anyone successfully built geos-2.2.0 on fedora core 5.
> >>
> >> I get the following errors when running make.
> >>
> >> [root@nazgul geos-2.2.0]# make
> >> Making all in source
> >> make[1]: Entering directory `/usr/src/postgres/geos-2.2.0/source'
> >> Making all in geom
> >> make[2]: Entering directory `/usr/src/postgres/geos-2.2.0/source/geom'
> >> if /bin/sh ../../libtool --mode=compile --tag=CXX g++ -DHAVE_CONFIG_H
> -I.
> >> -I. -I../../source/headers -I../../source/headers/geos
> >> -I../../source/headers -DGEOS_VERSION=""2.2.0""    -g -O2 -MT
> >> Coordinate.lo-MD -MP -MF ".deps/Coordinate.Tpo" -c -o
> >> Coordinate.lo Coordinate.cpp; \
> >> then mv -f ".deps/Coordinate.Tpo" ".deps/Coordinate.Plo"; else rm -f
> >> ".deps/Coordinate.Tpo"; exit 1; fi
> >> mkdir .libs
> >>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
> >> -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.0-g
> >> -O2 -MT Coordinate.lo -MD -MP -MF .deps/Coordinate.Tpo -c
> Coordinate.cpp
> >> -fPIC -DPIC -o .libs/Coordinate.o
> >> ../../source/headers/geos/geom.h:361: error: extra qualification
> >> 'geos::Coordinate::' on member 'setNull'
> >> ../../source/headers/geos/geom.h:367: error: extra qualification
> >> 'geos::Coordinate::' on member 'getNull'
> >> ../../source/headers/geos/geom.h:371: error: extra qualification
> >> 'geos::Coordinate::' on member 'Coordinate'
> >> ../../source/headers/geos/geom.h:377: error: extra qualification
> >> 'geos::Coordinate::' on member 'Coordinate'
> >> ../../source/headers/geos/geom.h:384: error: extra qualification
> >> 'geos::Coordinate::' on member 'Coordinate'
> >> ../../source/headers/geos/geom.h:394: error: extra qualification
> >> 'geos::Coordinate::' on member 'Coordinate'
> >> ../../source/headers/geos/geom.h:400: error: extra qualification
> >> 'geos::Coordinate::' on member 'setCoordinate'
> >> ../../source/headers/geos/geom.h:406: error: extra qualification
> >> 'geos::Coordinate::' on member 'equals2D'
> >> ../../source/headers/geos/geom.h:416: error: extra qualification
> >> 'geos::Coordinate::' on member 'compareTo'
> >> ../../source/headers/geos/geom.h:432: error: extra qualification
> >> 'geos::Coordinate::' on member 'equals3D'
> >> ../../source/headers/geos/geom.h:436: error: extra qualification
> >> 'geos::Coordinate::' on member 'makePrecise'
> >> ../../source/headers/geos/geom.h:441: error: extra qualification
> >> 'geos::Coordinate::' on member 'distance'
> >> ../../source/headers/geos/geom.h:447: error: extra qualification
> >> 'geos::Coordinate::' on member 'hashCode'
> >> ../../source/headers/geos/geom.h:459: error: extra qualification
> >> 'geos::Coordinate::' on member 'hashCode'
> >> make[2]: *** [Coordinate.lo] Error 1
> >> make[2]: Leaving directory `/usr/src/postgres/geos-2.2.0/source/geom'
> >> make[1]: *** [all-recursive] Error 1
> >> make[1]: Leaving directory `/usr/src/postgres/geos-2.2.0/source'
> >> make: *** [all-recursive] Error 1
> >>
> >>
> >>
> >>
> ------------------------------------------------------------------------
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>
>
> --
> Prof. Ari Jolma
> Kartografia ja Geoinformatiikka / Cartography and Geoinformatics
> Teknillinen Korkeakoulu / Helsinki University of Technology
> POBox 1200, 02015 TKK, Finland
> Email: ari.jolma at tkk.fi URL: http://www.tkk.fi/~jolma
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060331/f12413e2/attachment.html
From strk at refractions.net  Fri Mar 31 04:59:18 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C89B5.9090700@loskot.net>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F28@venus.VividSolutions.com>
	<442C89B5.9090700@loskot.net>
Message-ID: <20060331095918.GN21841@keybit.net>

On Fri, Mar 31, 2006 at 03:45:25AM +0200, Mateusz ?oskot wrote:

> I'd suggest to use "Shared Smart Pointer" semantic to manage geometry
> factories and their relations to geometry objects.
> One possibility is to use boost::shared_ptr (no linking to ext. libs
> required, just including one header, as <vector> or <list>).

I agree on using shared pointer, but I don't think it takes
a single header. If you want to inspect this please do, and
also remember Frank request of making it possible for
builders to choose between the GEOS-embedded version and
an external version of them (acting on the -I switch 
would be enough).

> Why not to use singleton or when to use it?
> 
> Singleton is another option but *does* *not* apply to the current
> design, according to assumptions already confirmed.

I might have used the wrong term, but by Singleton I meant
a "default" instance of a GeometryFactory, for use by
calls w/out an explicit provision of it. 
I don't know if it's worth the trouble, when
using shared_ptr. Probably not.

--strk;

From strk at refractions.net  Fri Mar 31 05:02:21 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442C8B4C.3000400@loskot.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9D4@venus.VividSolutions.com>
	<442C8B4C.3000400@loskot.net>
Message-ID: <20060331100221.GO21841@keybit.net>

On Fri, Mar 31, 2006 at 03:52:12AM +0200, Mateusz ?oskot wrote:
..
> I mean, according to the current approach (and the 3 assumptions
> presented in this thread) default factory could be a shared factory, but
> not the only-single-global-common factory to N objects.

+1

--strk;

From strk at refractions.net  Fri Mar 31 05:12:40 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442CEA6C.2010907@loskot.net>
References: <442C8155.9060108@loskot.net> <20060331080727.GM21841@keybit.net>
	<442CEA6C.2010907@loskot.net>
Message-ID: <20060331101240.GP21841@keybit.net>

On Fri, Mar 31, 2006 at 10:38:04AM +0200, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> > All three assumptions are correct.
> > I'd add in (1) that each instance MUST have a GeometryFactory
> > assigned.
> 
> 
> OK, so let default constructor(s) of geometry class(es) get factorry
> from external source - passed as a ctor param - or if no factory is
> passed, then Geometry ctor calls GeometryFactory::defaultFactory().

Yes, this is how I think it should work.
Note, though, that I'm not sure this is the right time for it.
I prepared the road for these kind of changes by providing
a C api, but not everybody switched yet.
A small part of the C++ API is dangerous land we should try
not to mess too much with, to at least allow API compatibility.
Note that qgis currently builds against GEOS-HEAD, but would
likely NOT build if we introduce changes there, unless much
care is taken.

For example: do you guys think Geometry and subclasses should
have PRIVATE (or protected) constructors ?
If we can guarantee that no clients build geometry by their
constructors, but keep using the Factory idiom, we have
no problem changing the constructors.
Also, how can a GeometryFactory know where is shared_ptr is 
in order to pass it to a Geometry Constructor ?
I mean, making *this* change likely breaks *every* GEOS client.

There are a lot of other places that could take advantage 
of boost::shared_ptr<>, and many are to be considered "internal".
So my strategy is to first "reduce" the API to be able to
tell what's "external" and what's "internal". Then, introduce
shared_ptr in the "internal" part, and "finally" reach the
API, likey reintroducing a form of ABI compatibility control.

About the ABI comp. control: what I decided some time ago
was to ship libgeos-Maj.min.mic.so, practically making
*every* release unused by existing code. This is what I
call "drop" the ABI compatibility control.

The alternative would be shipping next release as
libgeos.so.3.0.0.so and "defend" the ABI. Since it
seems there are more people involved in development now,
do you really think this would be possible in 2 months ?

To state it more clearly: do you think 2 months are enough
to give geos a *new* *backward-incompatible* but *abi-stable*
interface ? I'm personally NOT sure, and I think *reducing*
the interface would already be a good step forward.

Comments welcome.

--strk;

From strk at refractions.net  Fri Mar 31 05:17:08 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Why empty LineString should return a null pointer
	from getCoordiante()
In-Reply-To: <442C9BA0.9040307@loskot.net>
References: <442C9BA0.9040307@loskot.net>
Message-ID: <20060331101708.GQ21841@keybit.net>

+1 on returning NULL.
Again, this is part of the *HUGE* exposed API :)

--strk;

On Fri, Mar 31, 2006 at 05:01:52AM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> Please, forgive me that I'm annoying with all those recent questions but
> I really would like to understand GEOS internals.
> 
> 
> Here is getCoordinate:
> 
> const Coordinate* LineString::getCoordinate() const
> {
>    // should use auto_ptr here or return NULL or throw an exception !
>    // 	--strk;
>    if (isEmpty())
>       return(new Coordinate());
> 
>    return &(points->getAt(0));
> }
> 
> as you see, there is Sandro's comment about what could be best.
> I think it's time to answer this question :-)
> 
> For comparison and reference, here is JTS' version of this function:
> 
> public Coordinate getCoordinate()
> {
>    if (isEmpty()) return null;
>    return points.getCoordinate(0);
> }
> 
> Here are my comments to current solution:
> 1. Returning newly allocated Coordinate is confusing and will cause
> problems that user won't free the memory
> 
> 2. This brokes the logic because how empty linestring can return any
> Coordinate? This does not make any sense.
> 
> 
> Here are my comments to possible solution:
> 
> 1. auto_ptr will not solve the problem because it won't fix broken logic
> will
> 
> 2. My suggestion is to return *null pointer*
> 
> As you can see above, JTS version returns null reference.
> 
> What is Java null reference (a pointer to nothing)?
> It is a reference that does not refer to any instance of any type.
> 
> What we can do with Java null reference?
> null reference can be safely compared with other references (null or not
> null), null reference can be safely passed to the function, returned
> from function, null reference can be safely assigned to the existing
> reference etc.
> What we can not do with null reference is dereferencing, e.g.:
> 
> Type x = null;
> x.Fire(); // BUM!
> 
> Now, how to transit this Javism to C++. It's very simple - just use null
> pointer.
> 
> What is null pointer in C++?
> Null pointer is a *valid* pointer value that doesn???t point to anything.
> Just as null reference in Java.
> 
> Similarly, with null pointers in C++ we can do (almost) the same as what
> we can do with Java null reference.
> 
> The only thin that can not be done with C++ null pointer is
> dereferencing. Dereferencing null pointer causes undefined behavior
> This rule applies to every pointer that does not point to point to anything.
> 
> What I'd like to repeat is that "null pointer is a *valid* pointer",
> but not invalid. Invalid pointer is another category and *any* use of
> invalid pointer causes Undefined Behaviour, even comparing, etc.
> 
> So, I vote for returning null pointer.
> 
> 3. Throwing an exception is a bad idea
> 
> Exceptions should be used for unexpected situations but when user is
> asking object for coordinate he is aware that the object may or may not
> include any coordinates. So, there is no unexpected behaviour here.
> 
> 
> BTW, I'm really sorry if my explanation seems to be like in books of
> seriece "XXX for dummies". This is completely not my intetion!
> Simply, I usualy try to explain my point as clear as possible.
> 
> 
> Cheers
> -- 
> Mateusz ??oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Fri Mar 31 05:21:44 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Envelope of empty Polygon
In-Reply-To: <442CC8AB.3070205@loskot.net>
References: <442CC8AB.3070205@loskot.net>
Message-ID: <20060331102144.GR21841@keybit.net>

On Fri, Mar 31, 2006 at 08:14:03AM +0200, Mateusz ??oskot wrote:
> Hi,
> 
> I'm bringing next subject to discuss.
> 
> The main question is what should be returned by getEnvelope()
> called on empty polygon?
> 
> Here is simple use case:
> 
> GeometryFactory factory(...);
> //...
> 
> // create empty polygon
> Polygon* poly = factory.createPolygon();
> 
> // request for its envelope
> Geometry* geo = 0;
> geo = poly->getEnvelope();
> geo->isEmpty(); // <--- THE PROBLEM
> 
> 
> As I revealed, when exterior ring is empty geometry,
> getEnvelope() returns or creates instance of envelope object.
> This object is initialized by Envelope::setToNull().
> So, returned envelope for empty polygon has following coordinates:
> minx = -1.0
> maxx = 0.0
> miny = -1.0
> maxx = 0.0
> 
> Is this correct behaviour?
> Is empty polygon assumed to return non-empty envelope as above?

Doens't seem correct.
Envelope does have a NULL representation, which is
minx > maxx
miny > maxy
See Envelope::isNull()

Similar approach is used for Coordinate
(see ::setNull, ::getNullCoordinate)

Generally speaking I'm sure NULL pointers would be much more
appropriately used.

Also, for Geometry, check out  getEnvelopeInternal().
That should return a pointer to internal cache, thus caller
wouldn't need to free the result.
JTS getEnvelope() is really what getEnvelopeInternal() is for
GEOS.
I'd drop the copying one and rename the *Internal() one.

Again: exposed interface (in installed headers).

--strk;

From strk at refractions.net  Fri Mar 31 05:23:26 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <442CE23B.2060501@loskot.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>
	<20060331075533.GI21841@keybit.net> <442CE23B.2060501@loskot.net>
Message-ID: <20060331102326.GS21841@keybit.net>

On Fri, Mar 31, 2006 at 10:03:07AM +0200, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> > On Thu, Mar 30, 2006 at 02:42:19PM -0800, Martin Davis wrote:
> >> I'm not sure why strk is making this comment.  JTS/GEOS supports 
> >> empty geometries of all types (as per the OGC SFS).
> > 
> > I'm a bit PostGIS oriented. There's no support for EMPTY whatever in
> >  PostGIS except GEOMETRYCOLLECTION. As always I'd follow JTS, so if 
> > the plan is to support any kind of empty geom we should drop the 
> > ::createEmptyGeometry() and ensure no memory violation is triggered 
> > by EMPTY types *and* results are semantically correct.
> 
> Hi,
> 
> Another idea, possible and simple way to handle empty geometries would
> be to add a boolean flag to the Geometry class - bool empty;

We don't really need it.
All geometries have either a CoordinateSequence pointer
or a std::vector<> pointer.
NULL pointer would express Emptyness.

--strk;

From strk at refractions.net  Fri Mar 31 05:26:06 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
In-Reply-To: <e3a3ae450603310027m496879dbl9e68c6ddbf1c1c44@mail.gmail.com>
References: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>
	<20060331080201.GK21841@keybit.net>
	<e3a3ae450603310027m496879dbl9e68c6ddbf1c1c44@mail.gmail.com>
Message-ID: <20060331102606.GT21841@keybit.net>

On Fri, Mar 31, 2006 at 08:27:12PM +1200, Simon O'Malley wrote:
> Hi strk
> 
> Same error with 2.2.1

May I ask you another test with the 2.2 branch ?
You need a CVS client to access it, and grab
'branch-2-2'.

We're going to release 2.2.2 soon from it, so
if the problem is there we'll likely include
a fix in that release.

--strk;

From strk at refractions.net  Fri Mar 31 05:35:12 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
In-Reply-To: <442C67D3.50408@loskot.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9CE@venus.VividSolutions.com>
	<442C67D3.50408@loskot.net>
Message-ID: <20060331103512.GU21841@keybit.net>

On Fri, Mar 31, 2006 at 01:20:51AM +0200, Mateusz ?oskot wrote:
> Martin Davis wrote:
> > I thought about this, but on the principal of Occam's Razor decided 
> > just to use an empty GC.  This has the advantage that there are fewer
> >  cases to handle for both developers and clients.
> 
> That's clear for me.
> 
> strk:
> The only thing I'd do is to review current impl. of GEOS and see if
> there are any possible runtime bugs.

Code is FULL of assumption about the fact that geometries 
are not EMTPY... just took a look at LineString.cpp, and
the CoordinateSequence pointer is dereferenced always w/out
checks.
Note that the same happens with JTS. Example:

  public Coordinate[] getCoordinates() {
    return points.toCoordinateArray();
 }

'points' is not checked for being NULL.
In other places it is.

Now, what does this comport in Java I don't know,
but doesn't look correct to me.

BTW, still we're all learning something, what
would happen by dereferencing a NULL shared_ptr<> ?

Example:
	boost::shared_ptr<Geometry> g;
	g->isEmpty();

Is an exception thrown ?

--strk;
> 
> strk:
> Another thing I'd consider is to check if we could check this behaviour
> to operate with types more strictly. May be it would help to get rid of
> dynamic polymorphism overhead.
> 
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Fri Mar 31 05:36:39 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] GeometryFactory - call for explanation
In-Reply-To: <442CE8E5.2080601@loskot.net>
References: <442C8155.9060108@loskot.net> <442C83FA.3000503@interserv.com>
	<20060331080604.GL21841@keybit.net> <442CE8E5.2080601@loskot.net>
Message-ID: <20060331103639.GV21841@keybit.net>

On Fri, Mar 31, 2006 at 10:31:33AM +0200, Mateusz ??oskot wrote:
> strk@refractions.net wrote:
> > I'm in favour of this, but it would be an immutable
> > instance, using a FLOATING PrecisionModel.
> 
> Do you mean you want to provide single global common factory?

Yes, but not preventing the construction of new ones.
BTW, in case we use shared_ptr<> should we prevent
direct construction by using the 'named construction idiom' ?

> > There is already one in Geometry::INTERNAL_FACTORY, I
> > would change it's access method to GeometryFactory::defaultInstance()
> > and ensure constness.
> 
> and I'd let defaultInstance() to return shared_ptr.

Agreed.
--strk;

From strk at refractions.net  Fri Mar 31 05:43:28 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel]createEmptyGeometry()
In-Reply-To: <20060331103512.GU21841@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9CE@venus.VividSolutions.com>
	<442C67D3.50408@loskot.net> <20060331103512.GU21841@keybit.net>
Message-ID: <20060331104328.GX21841@keybit.net>

On Fri, Mar 31, 2006 at 12:35:12PM +0200, strk@refractions.net wrote:
> On Fri, Mar 31, 2006 at 01:20:51AM +0200, Mateusz ?oskot wrote:
> > Martin Davis wrote:
> > > I thought about this, but on the principal of Occam's Razor decided 
> > > just to use an empty GC.  This has the advantage that there are fewer
> > >  cases to handle for both developers and clients.
> > 
> > That's clear for me.
> > 
> > strk:
> > The only thing I'd do is to review current impl. of GEOS and see if
> > there are any possible runtime bugs.
> 
> Code is FULL of assumption about the fact that geometries 
> are not EMTPY... just took a look at LineString.cpp, and
> the CoordinateSequence pointer is dereferenced always w/out
> checks.
> Note that the same happens with JTS. Example:
> 
>   public Coordinate[] getCoordinates() {
>     return points.toCoordinateArray();
>  }
> 
> 'points' is not checked for being NULL.
> In other places it is.

...

Sorry, I had a closer look, at it seems that
LineString refuses to be contructed with a NULL
CoordinateSequence. It creates an *empty*
CoordinateSequence when passed NULL as arg.

Yet another useless waste of memory, similar
to the NULL Envelope and NULL Coordinate representations...

--strk;

From strk at refractions.net  Fri Mar 31 06:12:59 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] FIX: Memory access violation in
	LineString::getStartPoint()
Message-ID: <20060331111259.GY21841@keybit.net>

I committed a patch for the Geometry constructor
in both HEAD and 2.2 branch.

A check is now made to ensure a Geometry is always constructed
with a GeometryFactory. If passed GeometryFactory is NULL
the INTERNAL_GEOMETRY_FACTORY is used.

--strk;

From mbdavis at VividSolutions.com  Fri Mar 31 12:00:10 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] createEmptyGeometry()
	createsinstance	ofGeometryCollection
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9D9@venus.VividSolutions.com>

Well, geometrically I agree with you, but practically speaking I suspect it simplifies calling code if you return an expected type (where such a type exists).

This also allows you to have nice invariants such as "buffer always returns a Polygonal geometry".

Remember: floating point <> real numbers, and Geometry <> geometry

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> strk@refractions.net
> Sent: March 30, 2006 11:59 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] createEmptyGeometry() 
> createsinstance ofGeometryCollection
> 
> 
> On Fri, Mar 31, 2006 at 12:04:39AM +0200, Mateusz ?oskot wrote:
> > Martin Davis wrote:
> > > Yes.  The spec doesn't cover this, but I chose to use an empty
> > > GeometryCollection as a "typeless" empty geometry, for 
> methods which 
> > > need to return one.  The createEmptyGeometry method is just a 
> > > convenience method for this convention.
> > 
> > OK, I understant it.
> > 
> > > Anyway, what else could that method return that would make sense
> > > (given that it has no type information)?
> > 
> > It depends on the idea behind "empty geometry" or "null 
> geometry" [1]. 
> > As I know, OGC Simple Feature Spec. explains that empty geometry 
> > represents empty point set (empty set of coordinates). 
> According to my 
> > understanding: Point is empty if it contains "uninitialized" 
> > coordinates MultiPoint is empty if it contains no points in its set.
> > etc.
> > 
> > There is also a distinction between empty and null.
> > NULL means something undefined, uninitialized - something unsafe. 
> > EMPTY means something well constructor but with empty set 
> of points. 
> > In some case, NULL object can be compared to EMPTY object with true 
> > result.
> 
> But what's defined in an EMPTY set of points ?
> It's the points themself giving semantic of a geometry type. 
> What distinguish an EMPTY point from an EMPTY line from an 
> EMPTY collection ? It's the exactly same topological space: 
> the NO space at all. How can you say that NOTHING is a point 
> or a line or an area ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Fri Mar 31 12:01:01 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9DA@venus.VividSolutions.com>

This is uneccessary - there is already a perfectly well defined way of representing emptiness for every Geometry class.  And this is simple to test.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 31, 2006 12:03 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] Is empty LinearRing closed?
> 
> 
> strk@refractions.net wrote:
> > On Thu, Mar 30, 2006 at 02:42:19PM -0800, Martin Davis wrote:
> >> I'm not sure why strk is making this comment.  JTS/GEOS supports
> >> empty geometries of all types (as per the OGC SFS).
> > 
> > I'm a bit PostGIS oriented. There's no support for EMPTY 
> whatever in  
> > PostGIS except GEOMETRYCOLLECTION. As always I'd follow 
> JTS, so if the 
> > plan is to support any kind of empty geom we should drop the
> > ::createEmptyGeometry() and ensure no memory violation is triggered
> > by EMPTY types *and* results are semantically correct.
> 
> Hi,
> 
> Another idea, possible and simple way to handle empty 
> geometries would be to add a boolean flag to the Geometry 
> class - bool empty;
> 
> Then, if this flag is set, the geometry is empty.
> 
> Drawback:
> This approach requires to keep this flag synchronized with 
> state of geometry to avoid situation when geometry is a 
> non-empty set of points but the empty flag is set to true ;-)
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Fri Mar 31 12:03:37 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Envelope of empty Polygon
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02796D9DB@venus.VividSolutions.com>

JTS defines a concept of a null Envelope object state for precisely this reason.

The reason for returning a null Envelope object rather than null is that in my experience most callers of getEnvelopeInternal want something they can test against.  If null was returned calling code would need a special check for every call.

This is the same reason that empty Geometries are defined.  Often it simplifies code if there is something there, rather than null.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: March 30, 2006 10:14 PM
> To: GEOS Development List
> Subject: [geos-devel] Envelope of empty Polygon
> 
> 
> Hi,
> 
> I'm bringing next subject to discuss.
> 
> The main question is what should be returned by getEnvelope() 
> called on empty polygon?
> 
> Here is simple use case:
> 
> GeometryFactory factory(...);
> //...
> 
> // create empty polygon
> Polygon* poly = factory.createPolygon();
> 
> // request for its envelope
> Geometry* geo = 0;
> geo = poly->getEnvelope();
> geo->isEmpty(); // <--- THE PROBLEM
> 
> 
> As I revealed, when exterior ring is empty geometry,
> getEnvelope() returns or creates instance of envelope object. 
> This object is initialized by Envelope::setToNull(). So, 
> returned envelope for empty polygon has following 
> coordinates: minx = -1.0 maxx = 0.0 miny = -1.0 maxx = 0.0
> 
> Is this correct behaviour?
> Is empty polygon assumed to return non-empty envelope as above?
> 
> Cheers
> -- 
> Mateusz ?oskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at refractions.net  Fri Mar 31 12:56:02 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Envelope of empty Polygon
In-Reply-To: <20060331102144.GR21841@keybit.net>
References: <442CC8AB.3070205@loskot.net> <20060331102144.GR21841@keybit.net>
Message-ID: <20060331175602.GA35635@keybit.net>

On Fri, Mar 31, 2006 at 12:21:44PM +0200, strk@refractions.net wrote:

> Also, for Geometry, check out  getEnvelopeInternal().
> That should return a pointer to internal cache, thus caller
> wouldn't need to free the result.
> JTS getEnvelope() is really what getEnvelopeInternal() is for
> GEOS.
> I'd drop the copying one and rename the *Internal() one.

ERRATA CORRIGE.

getEnvelopeInternal *is* a JTS method.
It returns a cached Envelope.
Always, never a NULL pointer
(rather its NULL representation for EMPTY geoms).

Note that a NULL pointer, in this case
is used to detect a not-yet-computed
cache.

--strk;

From mgleahy at alumni.uwaterloo.ca  Fri Mar 31 13:21:44 2006
From: mgleahy at alumni.uwaterloo.ca (Mike Leahy)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
In-Reply-To: <20060331102606.GT21841@keybit.net>
References: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>	<20060331080201.GK21841@keybit.net>	<e3a3ae450603310027m496879dbl9e68c6ddbf1c1c44@mail.gmail.com>
	<20060331102606.GT21841@keybit.net>
Message-ID: <442D7338.9090109@alumni.uwaterloo.ca>

I gave this a try - I got the geos cvs from branch-2-2, ran
./autogen.sh, then ./configure...and got the following error at the end
of the configure:

config.status: creating Makefile
config.status: error: cannot find input file: Makefile.in

Is there a file missing, or did I miss something?

Mike

strk@refractions.net wrote:
> On Fri, Mar 31, 2006 at 08:27:12PM +1200, Simon O'Malley wrote:
>> Hi strk
>>
>> Same error with 2.2.1
> 
> May I ask you another test with the 2.2 branch ?
> You need a CVS client to access it, and grab
> 'branch-2-2'.
> 
> We're going to release 2.2.2 soon from it, so
> if the problem is there we'll likely include
> a fix in that release.
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at refractions.net  Fri Mar 31 13:56:09 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
In-Reply-To: <442D7338.9090109@alumni.uwaterloo.ca>
References: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>
	<20060331080201.GK21841@keybit.net>
	<e3a3ae450603310027m496879dbl9e68c6ddbf1c1c44@mail.gmail.com>
	<20060331102606.GT21841@keybit.net>
	<442D7338.9090109@alumni.uwaterloo.ca>
Message-ID: <20060331185609.GC35635@keybit.net>

On Fri, Mar 31, 2006 at 01:21:44PM -0500, Mike Leahy wrote:
> I gave this a try - I got the geos cvs from branch-2-2, ran
> ./autogen.sh, then ./configure...and got the following error at the end
> of the configure:
> 
> config.status: creating Makefile
> config.status: error: cannot find input file: Makefile.in
> 
> Is there a file missing, or did I miss something?

Did you get any error from ./autogen.sh ?
Makefile.in should be created from Makefile.am
by automake run, invoked in autogen.sh.

--strk;


From mgleahy at alumni.uwaterloo.ca  Fri Mar 31 16:58:00 2006
From: mgleahy at alumni.uwaterloo.ca (Mike Leahy)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Building geos-2.2.0 on fedora core 5
In-Reply-To: <20060331185609.GC35635@keybit.net>
References: <e3a3ae450603301429q2ed3452dkdf43b8db19e7a009@mail.gmail.com>	<20060331080201.GK21841@keybit.net>	<e3a3ae450603310027m496879dbl9e68c6ddbf1c1c44@mail.gmail.com>	<20060331102606.GT21841@keybit.net>	<442D7338.9090109@alumni.uwaterloo.ca>
	<20060331185609.GC35635@keybit.net>
Message-ID: <442DA5E8.6060800@alumni.uwaterloo.ca>

You're right...I didn't take notice of the './ChangeLog not found'
notice from the autogen output (below).  I ran 'touch ChangeLog', and
the error went away when I re-ran autogen, although those warnings about
underquoted definitions persist.  After that, ./configure and make both
worked fine.  I haven't done anything else to test it, but I imagine
it'll work fine.

Running autoheader
Running aclocal
/usr/share/aclocal/mpatrol.m4:37: warning: underquoted definition of
AM_WITH_MPATROL
  run info '(automake)Extending aclocal'
  or see http://sources.redhat.com/automake/automake.html#Extending-aclocal
/usr/share/aclocal/libfame.m4:6: warning: underquoted definition of
AM_PATH_LIBFAME
Running libtoolize
Running automake
configure.in: installing `./install-sh'
configure.in: installing `./missing'
doc/Makefile.am: installing `./depcomp'
Makefile.am: required file `./ChangeLog' not found
Running autoconf
======================================
Now you are ready to run './configure'
======================================


strk@refractions.net wrote:
> On Fri, Mar 31, 2006 at 01:21:44PM -0500, Mike Leahy wrote:
>> I gave this a try - I got the geos cvs from branch-2-2, ran
>> ./autogen.sh, then ./configure...and got the following error at the end
>> of the configure:
>>
>> config.status: creating Makefile
>> config.status: error: cannot find input file: Makefile.in
>>
>> Is there a file missing, or did I miss something?
> 
> Did you get any error from ./autogen.sh ?
> Makefile.in should be created from Makefile.am
> by automake run, invoked in autogen.sh.
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mateusz at loskot.net  Fri Mar 31 19:09:51 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <20060331102326.GS21841@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9C9@venus.VividSolutions.com>	<20060331075533.GI21841@keybit.net>
	<442CE23B.2060501@loskot.net> <20060331102326.GS21841@keybit.net>
Message-ID: <442DC4CF.6030902@loskot.net>

strk@refractions.net wrote:
> On Fri, Mar 31, 2006 at 10:03:07AM +0200, Mateusz ??oskot wrote:
>> strk@refractions.net wrote:
>>> On Thu, Mar 30, 2006 at 02:42:19PM -0800, Martin Davis wrote:
>>>> I'm not sure why strk is making this comment.  JTS/GEOS supports 
>>>> empty geometries of all types (as per the OGC SFS).
>>> I'm a bit PostGIS oriented. There's no support for EMPTY whatever in
>>>  PostGIS except GEOMETRYCOLLECTION. As always I'd follow JTS, so if 
>>> the plan is to support any kind of empty geom we should drop the 
>>> ::createEmptyGeometry() and ensure no memory violation is triggered 
>>> by EMPTY types *and* results are semantically correct.
>> Hi,
>>
>> Another idea, possible and simple way to handle empty geometries would
>> be to add a boolean flag to the Geometry class - bool empty;
> 
> We don't really need it.

Just an idea.

> All geometries have either a CoordinateSequence pointer
> or a std::vector<> pointer.
> NULL pointer would express Emptyness.

Definitely, yes.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Fri Mar 31 19:49:14 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:53:08 2007
Subject: [geos-devel] Is empty LinearRing closed?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02796D9DA@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02796D9DA@venus.VividSolutions.com>
Message-ID: <442DCE0A.50709@loskot.net>

Martin Davis wrote:
> This is uneccessary - there is already a perfectly well defined way
> of representing emptiness for every Geometry class.  And this is
> simple to test.

Sure.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

