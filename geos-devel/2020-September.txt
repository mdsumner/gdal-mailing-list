From geos-trac at osgeo.org  Wed Sep  2 11:05:48 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 02 Sep 2020 18:05:48 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.72c6cca692982ff60a0f37ca40e7f1b1@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 In JTS at least, spatial predicates do not support GEOMETRYCOLLECTIONs as
 inputs.  So this is a case of erroneous input.  But should not be allowed
 to cause a segfault, for sure.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep  2 11:40:57 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 02 Sep 2020 18:40:57 -0000
Subject: [geos-devel] [GEOS] #1042: Segfault on multipolygon
In-Reply-To: <045.74b275ead7856326ae7320f1abd5bbc6@osgeo.org>
References: <045.74b275ead7856326ae7320f1abd5bbc6@osgeo.org>
Message-ID: <060.8bb7aeac865b52edfd9bccd9485184ad@osgeo.org>

#1042: Segfault on multipolygon
------------------------+---------------------------
 Reporter:  stefgis     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  minor       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:  duplicate
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 This ticket has a better test case than the other one.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1042#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep  2 12:31:36 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 02 Sep 2020 19:31:36 -0000
Subject: [geos-devel] [GEOS] #1042: Segfault on multipolygon
In-Reply-To: <045.74b275ead7856326ae7320f1abd5bbc6@osgeo.org>
References: <045.74b275ead7856326ae7320f1abd5bbc6@osgeo.org>
Message-ID: <060.acf0c6957b0521324052e008a4963818@osgeo.org>

#1042: Segfault on multipolygon
------------------------+---------------------------
 Reporter:  stefgis     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  minor       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:  duplicate
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Here's a simple reproducer:
 {{{
 select st_intersects(
     'LINESTRING (0 0, 1 0)',
     'GEOMETRYCOLLECTION (MULTIPOLYGON (((922337 -922337, 922337 922337,
 -922337 922337, -922337 922337, 922337 -922337))))');
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1042#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep  2 12:37:24 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 02 Sep 2020 19:37:24 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.f60cb478d2256f2692d7fab89ed0cdc5@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 As background, the reason general GCs aren't supported for predicstes in
 general is because of the difficulty of computing some of the more
 specific predicates over inputs containing overlapping polygons.

 The `intersects` predicate could be computed correctly, in theory.  But
 this will require a different code path to the other predicates.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From Zachary.Deziel at USherbrooke.ca  Thu Sep  3 06:46:00 2020
From: Zachary.Deziel at USherbrooke.ca (=?iso-8859-1?Q?Zachary_D=E9ziel?=)
Date: Thu, 3 Sep 2020 13:46:00 +0000
Subject: [geos-devel] Complexity of algorithms
Message-ID: <YQBPR0101MB152388340C979716F8E7FED5FE2C0@YQBPR0101MB1523.CANPRD01.PROD.OUTLOOK.COM>

Hi all,

Sorry for disturbing and I hope I am passing through the right channel for my question. If not, please feel free to redirect me!

I have been searching in the documentation and elsewhere for information regarding the time complexity of the algorithms of GEOS. More precisely around the classic operations on point, line and polygon data structures (buffer, intersect, etc).  The only mention of complexity I found was regarding a trade-off between simplicity for the intersection method. Is there some hidden documentation somewhere that covers the time and/or memory complexity of the algorithms? If no such documentation exists, are there reasons for it not existing? Is it simply a matter of not being a priority in the development cycle?

Sorry for the compact and numerous questions, if you have any interest in the subject please reach out.

Sincerely,

Zachary Deziel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200903/ca24896b/attachment.html>

From mtnclimb at gmail.com  Thu Sep  3 09:37:59 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 3 Sep 2020 09:37:59 -0700
Subject: [geos-devel] Complexity of algorithms
In-Reply-To: <YQBPR0101MB152388340C979716F8E7FED5FE2C0@YQBPR0101MB1523.CANPRD01.PROD.OUTLOOK.COM>
References: <YQBPR0101MB152388340C979716F8E7FED5FE2C0@YQBPR0101MB1523.CANPRD01.PROD.OUTLOOK.COM>
Message-ID: <CAK2ens3LK09vL2MWuOK_kKW+_7=K3Tk1p8=wxEMXg7dezHy7WA@mail.gmail.com>

Hi.  The algorithms in GEOS are almost all ported from the JTS Topology
Suite, fyi.

The reason for not having explicit documentation for algorithm complexity
is time/effort, and difficulty of proving the complexity.

In general the algorithms should be roughly O(n log n) (as opposed to the
O(n^2) that would result from a naive implementation, which is too slow for
production use).  The complexity may also be data-dependent, since despite
best efforts there may be one or two O(n^2) steps in the code for certain
geometry cases.

On Thu, Sep 3, 2020 at 6:46 AM Zachary Déziel <Zachary.Deziel at usherbrooke.ca>
wrote:

> Hi all,
>
>
>
> Sorry for disturbing and I hope I am passing through the right channel for
> my question. If not, please feel free to redirect me!
>
>
>
> I have been searching in the documentation and elsewhere for information
> regarding the time complexity of the algorithms of GEOS. More precisely
> around the classic operations on point, line and polygon data structures
> (buffer, intersect, etc).  The only mention of complexity I found was
> regarding a trade-off between simplicity for the intersection method. Is
> there some hidden documentation somewhere that covers the time and/or
> memory complexity of the algorithms? If no such documentation exists, are
> there reasons for it not existing? Is it simply a matter of not being a
> priority in the development cycle?
>
>
>
> Sorry for the compact and numerous questions, if you have any interest in
> the subject please reach out.
>
>
>
> Sincerely,
>
>
>
> Zachary Deziel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200903/1972b40d/attachment.html>

From geos-trac at osgeo.org  Fri Sep  4 10:48:27 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 04 Sep 2020 17:48:27 -0000
Subject: [geos-devel] [GEOS] #1047: GEOS Panics on GeometryCollection
 with 1 MultiPolygon object
In-Reply-To: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
References: <042.fab70f2ddc7e3e25e3dfb748888ae40a@osgeo.org>
Message-ID: <057.6364dfb1979344a91744611afb082bbb@osgeo.org>

#1047: GEOS Panics on GeometryCollection with 1 MultiPolygon object
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.8.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 See [https://trac.osgeo.org/postgis/ticket/4749 PostGIS 4749] for a
 proposal to allow predicates to handle GeometryCollections.  Most or all
 of this logic could be implemented in GEOS.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1047#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Sep 10 02:41:24 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 10 Sep 2020 09:41:24 -0000
Subject: [geos-devel] [GEOS] #979: Topology exception in UnaryUnion
In-Reply-To: <045.626905fce957d03ae25185ae0ffb87b1@osgeo.org>
References: <045.626905fce957d03ae25185ae0ffb87b1@osgeo.org>
Message-ID: <060.e3cbb965a3a39897c1208fbb82547e98@osgeo.org>

#979: Topology exception in UnaryUnion
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 I confirm the input is invalid. But with current master branch the test
 passes. I'm closing this.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/979#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Sep 10 02:41:32 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 10 Sep 2020 09:41:32 -0000
Subject: [geos-devel] [GEOS] #979: Topology exception in UnaryUnion
In-Reply-To: <045.626905fce957d03ae25185ae0ffb87b1@osgeo.org>
References: <045.626905fce957d03ae25185ae0ffb87b1@osgeo.org>
Message-ID: <060.06cf70a3b42dd3f7e38aee73e8110725@osgeo.org>

#979: Topology exception in UnaryUnion
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/979#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 14 02:27:25 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 14 Sep 2020 09:27:25 -0000
Subject: [geos-devel] [GEOS] #980: GEOSBuffer emits invalid buffering a
	collection
In-Reply-To: <044.ec6b5735740f3db08c79ba996cbaa931@osgeo.org>
References: <044.ec6b5735740f3db08c79ba996cbaa931@osgeo.org>
Message-ID: <059.6688cac3bf133edd13e316322a5d1336@osgeo.org>

#980: GEOSBuffer emits invalid buffering a collection
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 I'd like to test this with current GEOS but there's in input in this
 ticket ?
 Martin where did you find the input ?
 Both exhibit1 and exhibit2 are self-intersecting multipolygons.
 In both cases Buffer(0) output a still-invalid geometry, while UnaryUnion
 fixes the invalidity.
 I don't think by contract Buffer(0) is to be guaranteed to output a valid
 geometry from an invalid one ?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/980#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 14 09:10:35 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 14 Sep 2020 16:10:35 -0000
Subject: [geos-devel] [GEOS] #960: Exception when creating geometry
	buffer
In-Reply-To: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
References: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
Message-ID: <065.c4708ebcab013c31a33b3dadaca35905@osgeo.org>

#960: Exception when creating geometry buffer
---------------------------------------+---------------------------
 Reporter:  allenkim0129               |       Owner:  geos-devel@…
     Type:  defect                     |      Status:  new
 Priority:  blocker                    |   Milestone:
Component:  Default                    |     Version:  3.6.2
 Severity:  Unassigned                 |  Resolution:
 Keywords:  Buffer, TopologyException  |
---------------------------------------+---------------------------

Comment (by strk):

 Martin can the usability range be computed to avoid such occurrences ?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/960#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 14 10:53:58 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 14 Sep 2020 17:53:58 -0000
Subject: [geos-devel] [GEOS] #980: GEOSBuffer emits invalid buffering a
	collection
In-Reply-To: <044.ec6b5735740f3db08c79ba996cbaa931@osgeo.org>
References: <044.ec6b5735740f3db08c79ba996cbaa931@osgeo.org>
Message-ID: <059.d3794a1778cd9b01bc4b78a3a3f3a9ca@osgeo.org>

#980: GEOSBuffer emits invalid buffering a collection
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 The data is in #979 and #978.

 Yes, there is no contract about buffer(0) fixing invalid geometry
 (although it actually does for many cases).  We should focus on ensuring
 that OverlayNG works with this data (and it is included as part of the
 OverlayNG robustness unit tests [https://github.com/dr-jts/jts/blob
 /overlayng-tests/modules/tests/src/test/resources/testxml/robust/overlay
 /TestOverlay-geos-979.xml here]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/980#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 14 12:46:46 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 14 Sep 2020 19:46:46 -0000
Subject: [geos-devel] [GEOS] #960: Exception when creating geometry
	buffer
In-Reply-To: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
References: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
Message-ID: <065.cdf5f902529f54512915da97bcfbe93f@osgeo.org>

#960: Exception when creating geometry buffer
---------------------------------------+---------------------------
 Reporter:  allenkim0129               |       Owner:  geos-devel@…
     Type:  defect                     |      Status:  new
 Priority:  blocker                    |   Milestone:
Component:  Default                    |     Version:  3.6.2
 Severity:  Unassigned                 |  Resolution:
 Keywords:  Buffer, TopologyException  |
---------------------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:3 strk]:
 > Martin can the usability range be computed to avoid such occurrences ?

 Maybe.  It might be that if the length of the end segments is less than
 the buffer distance then there may be visual artifacts present.  That
 would certainly include this case.  It's an overly aggressive heuristic
 though, since it would prevent running lots of cases which would not show
 artifacts.

 A more sophisticated heuristic would be to check if the end cap line
 intersected any of the side offset lines.

 But if what you are suggesting is throwing an error such as "Unable to
 compute buffer for given buffer distance", then this could just be emitted
 as the error when a TopologyException occurs.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/960#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Tue Sep 15 18:03:03 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 15 Sep 2020 18:03:03 -0700
Subject: [geos-devel] GEOS NG Regression Review
Message-ID: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>

All, after receiving the latest improvement from Martin, to allow overlay to return mixed dimensionality results, which harmonizes with old behaviour, and porting that improvement, I have flipped the default overlay functions (setting DISABLE_OVERLAYNG to OFF) to use NG, and then run the GEOS internal regression suite.

That means the following operations all use NG overlay, instead of the old overlay.

Geometry->Intersection(Geometry)
Geometry->Difference(Geometry)
Geometry->SynDifference(Geometry)
Geometry->Union(Geometry)
Geometry->Union()

Doing this run over the whole suite basically compares the behaviour of the new overlay to all the examples we have of the old behaviour.

The result of that work can be reviewed here:

https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#

In general, all the failures are entirely defensible. The new results aren't the same as the old ones, but they are different in ways that generally fall into a "who cares" bucket or a "that's actually better" bucket.

If we are to move to NG as our default overlay engine, I'd simply recommend updating the tests to expect the NG results. They seem just fine to me.

The next major effort of testing on NG overlay needs to be the PostGIS regression suite, which has a lot of routines that will exercise the code in interesting and different ways.

ATB,

P


PS - Although we know that GEOS has Z-coordinate handling in overlay, we have no regression failures in Z-coordinate handling, which means we probably are low on unit and integration tests for that behaviour. Something to improve when we get that last compatibility feature from Martin.


From pramsey at cleverelephant.ca  Wed Sep 16 13:25:39 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 16 Sep 2020 13:25:39 -0700
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
Message-ID: <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>


> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#

I have run the PostGIS regression suite with the GEOS 3.9 NG build installed, and analyzed all the discrepencies, and there are very few of them (thanks Regina for fixing up the first route of normalizations).

Discussion of each case is at the end of the document linked above.

* There were a few more normalizations to add, in the split and tickets tests.
* There was one cunit makevalid test that duplicates an existing test in GEOS. It can fairly be removed, IMO.
* There was one small discrepency in a subdivide test, which might need to be version guarded, or maybe just altered slightly. The results appeared consistent for practical purposes (identical areas, etc).
* Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?

I think we are very close to being able to make NG the default overlay engine in GEOS. The task would look like:

GEOS
* Make NG the default.
* Update the small set of GEOS regression tests that need changes to expect NG outputs.

PostGIS
* Remove duplicated cunit makevalid tset
* Normalize test outputs as necessary (already done on branch, to be merged shortly)
* Version guard or remove the subdivide regress test in postgis.
* Version guard or fix the topology failure case (depends on what Sandro finds is the root cause)
* Version guard the tickets test error messages and only test against 3.9

Thoughts?

P

From pramsey at cleverelephant.ca  Wed Sep 16 15:02:36 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 16 Sep 2020 15:02:36 -0700
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
Message-ID: <7052DC87-B2DC-4C52-BB59-4E75253B07D5@cleverelephant.ca>



> On Sep 16, 2020, at 1:25 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> 
> I have run the PostGIS regression suite with the GEOS 3.9 NG build installed, and analyzed all the discrepencies, and there are very few of them (thanks Regina for fixing up the first route of normalizations).
> 
> Discussion of each case is at the end of the document linked above.
> 
> * There were a few more normalizations to add, in the split and tickets tests.
> * There was one cunit makevalid test that duplicates an existing test in GEOS. It can fairly be removed, IMO.
> * There was one small discrepency in a subdivide test, which might need to be version guarded, or maybe just altered slightly. The results appeared consistent for practical purposes (identical areas, etc).
> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?
> 
> I think we are very close to being able to make NG the default overlay engine in GEOS. The task would look like:

Subject to completing Z coordinate preservation in NG overlay, first.

P


From even.rouault at spatialys.com  Thu Sep 17 04:21:29 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 17 Sep 2020 13:21:29 +0200
Subject: [geos-devel] GEOS NG Regression Review (GDAL feedback)
In-Reply-To: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
Message-ID: <4516768.hQr2fojI3t@even-i700>

Hi Paul,

I gave a try to GEOS git head built with -DDISABLE_OVERLAYNG=OFF, and ran it against 
GDAL autotest suite.

The needed changes are in https://github.com/OSGeo/gdal/pull/2942

Most of them are boring, due to polygon vertices not being returned in the same order, and 
fixed by using spatial equality instead of plain WKT comparison.

One non-trivial change I had to do was related to a convoluted way of how OGR tries to split 
line or polygon geometries crossing the antimeridian, when reprojecting from a projected 
CRS crossing the antimedian (e.g. UTM zone 60), to geographic coordinates. The resulting 
geometry needs to be a multilinestring or multipolygon with one (or several) part close to 
longitude +180 and another one close to longitude -180. Typically needed when reprojecting 
geometries for GeoJSON RFC7946 compliance.

1) For each segment of the input geometry that crosses the antimeridian, OGR determines 
by dichotomy the coordinates, in the projected CRS, of the intersection with the 
antimeridian. This leads to a list of points P_antimeridian[], that is sorted by increasing y.
2) Previously, OGR built a polygon, at the left of the antimeridian, whose right edge are 
points whose x is at P_antimeridian[].x - epsilon, and another one, at the right of the 
antimeridian, whose left edge are points whose x is at P_antimeridian[].x + epsilon. Then it 
creates a multipolygon with those 2 polygons.
3) Then it intersects the input geometry with those 2 multipolygons, which leads to a multi-
geometry not crossing the antimeridian.
4) And finally it reprojects that geometry to geographic coordinates.

The intersection of the input geometry with this multipolygon of 2 parts can be shown with:

from osgeo import ogr

# input geometry crossing the antimeridian (UTM 60N)
geom = ogr.CreateGeometryFromWkt('LINESTRING(832864.275023695 0,835092.849076364 
0)')

# multipolygon with one part left to the antimeridian, one part right
geom2 = ogr.CreateGeometryFromWkt('MULTIPOLYGON (((832864.275023695 
0.0,833978.556808034 -0.000110682755987,833978.556808034 0.0,833978.556808034 
0.000110682755987,832864.275023695 0.0,832864.275023695 0.0)),((835092.849076364 
0.0,833978.557030887 -0.000110682755987,833978.557030887 0.0,833978.557030887 
0.000110682755987,835092.849076364 0.0,835092.849076364 0.0)))')

# intersection
print(geom.Intersection(geom2))

With OverlayNG, the following leads to a LINESTRING EMPTY, whereas with GEOS 
3.8something, it leads to the expected result of
MULTILINESTRING ((832864.275023695 0.0,833978.556808034 0.0),(833978.557030887 
0.0,835092.849076364 0.0))

I'm not sure if the OverlayNG result is a feature or a bug.

Anyway, I've changed the GDAL code to compute the difference between the input 
geometry and a polygon with one edge with points whose x is at P_antimeridian[].x - epsilon 
and another one with points whose x is at P_antimeridian[].x + epsilon. This is more 
straightforward, and works with any GEOS version.

(by the way, I don't think the GDAL autotest suite exercices much GEOS Z handling)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200917/02c47f09/attachment.html>

From strk at kbt.io  Thu Sep 17 06:54:14 2020
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 17 Sep 2020 15:54:14 +0200
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
Message-ID: <20200917135414.GA78909@lif>

On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
> 
> > https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> 

> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?

A quick look suggests this is just a lack of normalization from
the output of OverlayNG (did the old overlay normalize internally ?)

--strk;

From pramsey at cleverelephant.ca  Thu Sep 17 06:55:16 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 17 Sep 2020 06:55:16 -0700
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <20200917135414.GA78909@lif>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
Message-ID: <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>



> On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
> 
> On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
>> 
>>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
>> 
> 
>> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?
> 
> A quick look suggests this is just a lack of normalization from
> the output of OverlayNG (did the old overlay normalize internally ?)

No, neither normalizes, it's wasted overhead except in testing. Things just come out of the graphs in different orders.

P.


From strk at kbt.io  Thu Sep 17 08:18:30 2020
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 17 Sep 2020 17:18:30 +0200
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
 <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
Message-ID: <20200917151830.GA96321@lif>

On Thu, Sep 17, 2020 at 06:55:16AM -0700, Paul Ramsey wrote:
> 
> 
> > On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
> > 
> > On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
> >> 
> >>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> >> 
> > 
> >> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?
> > 
> > A quick look suggests this is just a lack of normalization from
> > the output of OverlayNG (did the old overlay normalize internally ?)
> 
> No, neither normalizes, it's wasted overhead except in testing. Things just come out of the graphs in different orders.

Well the result seem to be compatible, just different order,
so this case could be threated like the other ones of expecting
different results based on GEOS version.

--strk;

From mtnclimb at gmail.com  Thu Sep 17 08:50:16 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 17 Sep 2020 08:50:16 -0700
Subject: [geos-devel] GEOS NG Regression Review (GDAL feedback)
In-Reply-To: <4516768.hQr2fojI3t@even-i700>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <4516768.hQr2fojI3t@even-i700>
Message-ID: <CAK2ens2AaH8wsMhHJ5gFoEACawPTCdqo3Qru64KeC0kRncKbJQ@mail.gmail.com>

Thanks for testing, Even.

Interestingly, in JTS the test case you give below for
OverlayNG.intersection actually returns the same result as the old code:

MULTILINESTRING ((833978.557030887 0, 835092.849076364 0),
(832864.275023695 0, 833978.556808034 0))

So this is something to look into on the GEOS side.

On Thu, Sep 17, 2020 at 4:39 AM Even Rouault <even.rouault at spatialys.com>
wrote:

>
>
>
> The intersection of the input geometry with this multipolygon of 2 parts
> can be shown with:
>
>
>
> from osgeo import ogr
>
>
>
> # input geometry crossing the antimeridian (UTM 60N)
>
> geom = ogr.CreateGeometryFromWkt('LINESTRING(832864.275023695
> 0,835092.849076364 0)')
>
>
>
> # multipolygon with one part left to the antimeridian, one part right
>
> geom2 = ogr.CreateGeometryFromWkt('MULTIPOLYGON (((832864.275023695
> 0.0,833978.556808034 -0.000110682755987,833978.556808034
> 0.0,833978.556808034 0.000110682755987,832864.275023695
> 0.0,832864.275023695 0.0)),((835092.849076364 0.0,833978.557030887
> -0.000110682755987,833978.557030887 0.0,833978.557030887
> 0.000110682755987,835092.849076364 0.0,835092.849076364 0.0)))')
>
>
>
> # intersection
>
> print(geom.Intersection(geom2))
>
>
>
> With OverlayNG, the following leads to a LINESTRING EMPTY, whereas with
> GEOS 3.8something, it leads to the expected result of
>
> MULTILINESTRING ((832864.275023695 0.0,833978.556808034
> 0.0),(833978.557030887 0.0,835092.849076364 0.0))
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200917/0b67a004/attachment.html>

From pramsey at cleverelephant.ca  Thu Sep 17 09:02:29 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 17 Sep 2020 09:02:29 -0700
Subject: [geos-devel] GEOS NG Regression Review (GDAL feedback)
In-Reply-To: <CAK2ens2AaH8wsMhHJ5gFoEACawPTCdqo3Qru64KeC0kRncKbJQ@mail.gmail.com>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <4516768.hQr2fojI3t@even-i700>
 <CAK2ens2AaH8wsMhHJ5gFoEACawPTCdqo3Qru64KeC0kRncKbJQ@mail.gmail.com>
Message-ID: <F9F35D29-3612-4C98-AED4-A0D41AE41668@cleverelephant.ca>



> On Sep 17, 2020, at 8:50 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> Thanks for testing, Even.
> 
> Interestingly, in JTS the test case you give below for OverlayNG.intersection actually returns the same result as the old code:
> 
> MULTILINESTRING ((833978.557030887 0, 835092.849076364 0), (832864.275023695 0, 833978.556808034 0))
> 
> So this is something to look into on the GEOS side.

I have confirmed this happens in GEOS, with a little unit test, so it's nothing to do with GDAL. Looks like a morning in the debugger awaits.

P


> 
> On Thu, Sep 17, 2020 at 4:39 AM Even Rouault <even.rouault at spatialys.com> wrote:
> 
>  
> The intersection of the input geometry with this multipolygon of 2 parts can be shown with:
>  
> from osgeo import ogr
>  
> # input geometry crossing the antimeridian (UTM 60N)
> geom = ogr.CreateGeometryFromWkt('LINESTRING(832864.275023695 0,835092.849076364 0)')
>  
> # multipolygon with one part left to the antimeridian, one part right
> geom2 = ogr.CreateGeometryFromWkt('MULTIPOLYGON (((832864.275023695 0.0,833978.556808034 -0.000110682755987,833978.556808034 0.0,833978.556808034 0.000110682755987,832864.275023695 0.0,832864.275023695 0.0)),((835092.849076364 0.0,833978.557030887 -0.000110682755987,833978.557030887 0.0,833978.557030887 0.000110682755987,835092.849076364 0.0,835092.849076364 0.0)))')
>  
> # intersection
> print(geom.Intersection(geom2))
>  
> With OverlayNG, the following leads to a LINESTRING EMPTY, whereas with GEOS 3.8something, it leads to the expected result of
> MULTILINESTRING ((832864.275023695 0.0,833978.556808034 0.0),(833978.557030887 0.0,835092.849076364 0.0))
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Thu Sep 17 10:01:09 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 17 Sep 2020 10:01:09 -0700
Subject: [geos-devel] GEOS NG Regression Review (GDAL feedback)
In-Reply-To: <F9F35D29-3612-4C98-AED4-A0D41AE41668@cleverelephant.ca>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <4516768.hQr2fojI3t@even-i700>
 <CAK2ens2AaH8wsMhHJ5gFoEACawPTCdqo3Qru64KeC0kRncKbJQ@mail.gmail.com>
 <F9F35D29-3612-4C98-AED4-A0D41AE41668@cleverelephant.ca>
Message-ID: <6B6DB091-1B4A-40CB-A2B5-03E4543A77CC@cleverelephant.ca>

Problem found and fixed, thanks Even!

https://github.com/libgeos/geos/commit/49ac5aa4

P

> On Sep 17, 2020, at 9:02 AM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> 
>> On Sep 17, 2020, at 8:50 AM, Martin Davis <mtnclimb at gmail.com> wrote:
>> 
>> Thanks for testing, Even.
>> 
>> Interestingly, in JTS the test case you give below for OverlayNG.intersection actually returns the same result as the old code:
>> 
>> MULTILINESTRING ((833978.557030887 0, 835092.849076364 0), (832864.275023695 0, 833978.556808034 0))
>> 
>> So this is something to look into on the GEOS side.
> 
> I have confirmed this happens in GEOS, with a little unit test, so it's nothing to do with GDAL. Looks like a morning in the debugger awaits.
> 
> P
> 
> 
>> 
>> On Thu, Sep 17, 2020 at 4:39 AM Even Rouault <even.rouault at spatialys.com> wrote:
>> 
>> 
>> The intersection of the input geometry with this multipolygon of 2 parts can be shown with:
>> 
>> from osgeo import ogr
>> 
>> # input geometry crossing the antimeridian (UTM 60N)
>> geom = ogr.CreateGeometryFromWkt('LINESTRING(832864.275023695 0,835092.849076364 0)')
>> 
>> # multipolygon with one part left to the antimeridian, one part right
>> geom2 = ogr.CreateGeometryFromWkt('MULTIPOLYGON (((832864.275023695 0.0,833978.556808034 -0.000110682755987,833978.556808034 0.0,833978.556808034 0.000110682755987,832864.275023695 0.0,832864.275023695 0.0)),((835092.849076364 0.0,833978.557030887 -0.000110682755987,833978.557030887 0.0,833978.557030887 0.000110682755987,835092.849076364 0.0,835092.849076364 0.0)))')
>> 
>> # intersection
>> print(geom.Intersection(geom2))
>> 
>> With OverlayNG, the following leads to a LINESTRING EMPTY, whereas with GEOS 3.8something, it leads to the expected result of
>> MULTILINESTRING ((832864.275023695 0.0,833978.556808034 0.0),(833978.557030887 0.0,835092.849076364 0.0))
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 


From jorisvandenbossche at gmail.com  Fri Sep 18 02:39:53 2020
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Fri, 18 Sep 2020 11:39:53 +0200
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <20200917151830.GA96321@lif>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
 <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
 <20200917151830.GA96321@lif>
Message-ID: <CALQtMBbEYhtbrLNnFG9dccwMkbXSKOBYppjXVF_gY7f3v+OKpg@mail.gmail.com>

Hi all,

First, thanks for all the work on improving the overlay operations!

I ran the test suites of Shapely and PyGEOS with GEOS master and
DISABLE_OVERLAYNG=OFF.

For PyGEOS there are 2 failing tests related to MakeValid. But both are
just a change in coordinate order and solved by using spatial equality or
normalizing the resulting and expected multipolygon first.
And for Shapely there is 1 failing test caused by a union operation
returning a GeometryCollection with the parts in a different order, so
again only a normalization issue.

So basically nothing to report. But that probably says more about the
Shapely/PyGEOS test suites (which mostly test the *bindings* with simple
cases, and don't include much complex geometry test cases deferring that to
GEOS), than about OverlayNG not causing behaviour changes ;)

Best,
Joris

On Thu, 17 Sep 2020 at 17:18, Sandro Santilli <strk at kbt.io> wrote:

> On Thu, Sep 17, 2020 at 06:55:16AM -0700, Paul Ramsey wrote:
> >
> >
> > > On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
> > >
> > > On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
> > >>
> > >>>
> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> > >>
> > >
> > >> * Despite worries, only one file in topology showed any differences.
> topogeo_addlinestring.sql needs to be looked at by a topology expert,
> Sandro do you think you could?
> > >
> > > A quick look suggests this is just a lack of normalization from
> > > the output of OverlayNG (did the old overlay normalize internally ?)
> >
> > No, neither normalizes, it's wasted overhead except in testing. Things
> just come out of the graphs in different orders.
>
> Well the result seem to be compatible, just different order,
> so this case could be threated like the other ones of expecting
> different results based on GEOS version.
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200918/2e74b3b3/attachment.html>

From pramsey at cleverelephant.ca  Fri Sep 18 08:39:36 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 18 Sep 2020 08:39:36 -0700
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <CALQtMBbEYhtbrLNnFG9dccwMkbXSKOBYppjXVF_gY7f3v+OKpg@mail.gmail.com>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
 <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
 <20200917151830.GA96321@lif>
 <CALQtMBbEYhtbrLNnFG9dccwMkbXSKOBYppjXVF_gY7f3v+OKpg@mail.gmail.com>
Message-ID: <918DB91B-2C0E-43E6-99CD-107E4DD3B142@cleverelephant.ca>



> On Sep 18, 2020, at 2:39 AM, Joris Van den Bossche <jorisvandenbossche at gmail.com> wrote:
> 
> Hi all,
> 
> First, thanks for all the work on improving the overlay operations!
> 
> I ran the test suites of Shapely and PyGEOS with GEOS master and DISABLE_OVERLAYNG=OFF.
> 
> For PyGEOS there are 2 failing tests related to MakeValid. But both are just a change in coordinate order and solved by using spatial equality or normalizing the resulting and expected multipolygon first. 
> And for Shapely there is 1 failing test caused by a union operation returning a GeometryCollection with the parts in a different order, so again only a normalization issue.
> 
> So basically nothing to report. But that probably says more about the Shapely/PyGEOS test suites (which mostly test the *bindings* with simple cases, and don't include much complex geometry test cases deferring that to GEOS), than about OverlayNG not causing behaviour changes ;)

Every little bit counts! Thanks for testing!
P


> 
> Best,
> Joris
> 
> On Thu, 17 Sep 2020 at 17:18, Sandro Santilli <strk at kbt.io> wrote:
> On Thu, Sep 17, 2020 at 06:55:16AM -0700, Paul Ramsey wrote:
> > 
> > 
> > > On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
> > > 
> > > On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
> > >> 
> > >>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> > >> 
> > > 
> > >> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?
> > > 
> > > A quick look suggests this is just a lack of normalization from
> > > the output of OverlayNG (did the old overlay normalize internally ?)
> > 
> > No, neither normalizes, it's wasted overhead except in testing. Things just come out of the graphs in different orders.
> 
> Well the result seem to be compatible, just different order,
> so this case could be threated like the other ones of expecting
> different results based on GEOS version.
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Fri Sep 18 09:47:33 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Fri, 18 Sep 2020 09:47:33 -0700
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <CALQtMBbEYhtbrLNnFG9dccwMkbXSKOBYppjXVF_gY7f3v+OKpg@mail.gmail.com>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
 <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
 <20200917151830.GA96321@lif>
 <CALQtMBbEYhtbrLNnFG9dccwMkbXSKOBYppjXVF_gY7f3v+OKpg@mail.gmail.com>
Message-ID: <CAK2ens2o4+4L1OxsVxzKr=hiuB2-0fY_yrPOSz3hj2mY1hDSKA@mail.gmail.com>

Thanks for testing, Joris.

It makes sense that downstream project unit tests are focussed on the code
that is net new to the project.  Still, it is always reassuring to run a
set of functional tests as well. One way to do this fairly easily would be
to develop a test runer that is able to exercise the JTS / GEOS XML test
suites [1][2].  That might be a nice addition to Shapely et al.

[1]
https://github.com/locationtech/jts/tree/master/modules/tests/src/test/resources/testxml
[2] https://github.com/libgeos/geos/tree/master/tests/xmltester/tests

And would be great is to retry some of the (numerous) Shapely issues filed
which involve overlay robust problems.  Here's a selection:

https://github.com/Toblerity/Shapely/issues/829
https://github.com/Toblerity/Shapely/issues/970



On Fri, Sep 18, 2020 at 2:40 AM Joris Van den Bossche <
jorisvandenbossche at gmail.com> wrote:

> Hi all,
>
> First, thanks for all the work on improving the overlay operations!
>
> I ran the test suites of Shapely and PyGEOS with GEOS master and
> DISABLE_OVERLAYNG=OFF.
>
> For PyGEOS there are 2 failing tests related to MakeValid. But both are
> just a change in coordinate order and solved by using spatial equality or
> normalizing the resulting and expected multipolygon first.
> And for Shapely there is 1 failing test caused by a union operation
> returning a GeometryCollection with the parts in a different order, so
> again only a normalization issue.
>
> So basically nothing to report. But that probably says more about the
> Shapely/PyGEOS test suites (which mostly test the *bindings* with simple
> cases, and don't include much complex geometry test cases deferring that to
> GEOS), than about OverlayNG not causing behaviour changes ;)
>
> Best,
> Joris
>
> On Thu, 17 Sep 2020 at 17:18, Sandro Santilli <strk at kbt.io> wrote:
>
>> On Thu, Sep 17, 2020 at 06:55:16AM -0700, Paul Ramsey wrote:
>> >
>> >
>> > > On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
>> > >
>> > > On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
>> > >>
>> > >>>
>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
>> > >>
>> > >
>> > >> * Despite worries, only one file in topology showed any differences.
>> topogeo_addlinestring.sql needs to be looked at by a topology expert,
>> Sandro do you think you could?
>> > >
>> > > A quick look suggests this is just a lack of normalization from
>> > > the output of OverlayNG (did the old overlay normalize internally ?)
>> >
>> > No, neither normalizes, it's wasted overhead except in testing. Things
>> just come out of the graphs in different orders.
>>
>> Well the result seem to be compatible, just different order,
>> so this case could be threated like the other ones of expecting
>> different results based on GEOS version.
>>
>> --strk;
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200918/68cf8cad/attachment.html>

From strk at kbt.io  Mon Sep 21 03:59:23 2020
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 21 Sep 2020 12:59:23 +0200
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <20200917151830.GA96321@lif>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
 <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
 <20200917151830.GA96321@lif>
Message-ID: <20200921105923.GD4691@lif>

On Thu, Sep 17, 2020 at 05:18:30PM +0200, Sandro Santilli wrote:
> On Thu, Sep 17, 2020 at 06:55:16AM -0700, Paul Ramsey wrote:
> > 
> > 
> > > On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
> > > 
> > > On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
> > >> 
> > >>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> > >> 
> > > 
> > >> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?
> > > 
> > > A quick look suggests this is just a lack of normalization from
> > > the output of OverlayNG (did the old overlay normalize internally ?)
> > 
> > No, neither normalizes, it's wasted overhead except in testing. Things just come out of the graphs in different orders.
> 
> Well the result seem to be compatible, just different order,
> so this case could be threated like the other ones of expecting
> different results based on GEOS version.

I'll see how to modify the test to not be order dependent.

--strk;

From strk at kbt.io  Mon Sep 21 07:21:26 2020
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 21 Sep 2020 16:21:26 +0200
Subject: [geos-devel] GEOS NG Regression Review
In-Reply-To: <20200921105923.GD4691@lif>
References: <05F36AEB-2BD9-4D29-9914-FE71F4478C3E@cleverelephant.ca>
 <87963059-45ED-4AA7-AFE3-5E9F89F841A8@cleverelephant.ca>
 <20200917135414.GA78909@lif>
 <3CA48ADA-8F84-46BD-A107-130F425ECACE@cleverelephant.ca>
 <20200917151830.GA96321@lif> <20200921105923.GD4691@lif>
Message-ID: <20200921142126.GF4691@lif>

On Mon, Sep 21, 2020 at 12:59:23PM +0200, Sandro Santilli wrote:
> On Thu, Sep 17, 2020 at 05:18:30PM +0200, Sandro Santilli wrote:
> > On Thu, Sep 17, 2020 at 06:55:16AM -0700, Paul Ramsey wrote:
> > > 
> > > 
> > > > On Sep 17, 2020, at 6:54 AM, Sandro Santilli <strk at kbt.io> wrote:
> > > > 
> > > > On Wed, Sep 16, 2020 at 01:25:39PM -0700, Paul Ramsey wrote:
> > > >> 
> > > >>> https://docs.google.com/document/d/1TDm2aR4a7O41-soS-25Xog1EdQcjmvKCnKltxjbxOC0/edit#
> > > >> 
> > > > 
> > > >> * Despite worries, only one file in topology showed any differences. topogeo_addlinestring.sql needs to be looked at by a topology expert, Sandro do you think you could?
> > > > 
> > > > A quick look suggests this is just a lack of normalization from
> > > > the output of OverlayNG (did the old overlay normalize internally ?)
> > > 
> > > No, neither normalizes, it's wasted overhead except in testing. Things just come out of the graphs in different orders.
> > 
> > Well the result seem to be compatible, just different order,
> > so this case could be threated like the other ones of expecting
> > different results based on GEOS version.
> 
> I'll see how to modify the test to not be order dependent.

I modified the tests so that they now pass both with "old" and
"ng" GEOS overlay 

--strk;

From geos-trac at osgeo.org  Wed Sep 23 04:00:00 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 23 Sep 2020 11:00:00 -0000
Subject: [geos-devel] [GEOS] #1049: Inconsistency with POINT(nan nan)
Message-ID: <045.e7e07a87f900c22683dade4e63e106b1@osgeo.org>

#1049: Inconsistency with POINT(nan nan)
------------------------+--------------------------
 Reporter:  Mike Taves  |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Consider two points that use the "NaN" convention to try and create `POINT
 EMPTY`. This example uses shapely:
 {{{
 from shapely import wkt
 from shapely.geometry import Point

 # two different ways to create a point with NaN
 point_nan_from_val = Point(float('nan'), float('nan'))
 point_nan_from_wkt = wkt.loads('point(nan nan)')

 point_nan_from_val.is_empty  # False
 point_nan_from_wkt.is_empty  # True

 point_nan_from_val.wkt  # POINT (nan nan)
 point_nan_from_wkt.wkt  # POINT EMPTY
 }}}
 And a similar example with PyGEOS (master), which side-steps #1048 by
 [https://github.com/pygeos/pygeos/pull/179 correctly writing WKB] for
 POINT EMPTY:
 {{{
 import pygeos

 point_nan_from_val = pygeos.points(float('nan'), float('nan'))
 point_nan_from_wkt = pygeos.Geometry('point(nan nan)')

 pygeos.is_empty(point_nan_from_val)  # False
 pygeos.is_empty(point_nan_from_wkt)  # True

 # Different WKT
 pygeos.to_wkt(point_nan_from_val)  # POINT (nan nan)
 pygeos.to_wkt(point_nan_from_wkt)  # POINT EMPTY

 # Same WKB
 pygeos.to_wkb(point_nan_from_val) == pygeos.to_wkb(point_nan_from_wkt)  #
 True
 }}}
 The two points behave very differently, with different WKT and same WKB
 (when #1048 is resolved).

 Seeing that `POINT EMPTY` is generally serialised in WKB as `POINT(nan
 nan)` (#1005), it could be expected that geometries created with nan
 coordinate values should be `POINT EMPTY` too, and not non-empty points
 with nan coordinates.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1049>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 02:50:33 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 09:50:33 -0000
Subject: [geos-devel] [GEOS] #980: GEOSBuffer emits invalid buffering a
	collection
In-Reply-To: <044.ec6b5735740f3db08c79ba996cbaa931@osgeo.org>
References: <044.ec6b5735740f3db08c79ba996cbaa931@osgeo.org>
Message-ID: <059.8255a1cc9737222590eb61158cc09a11@osgeo.org>

#980: GEOSBuffer emits invalid buffering a collection
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 The test is already included in GEOS testsuite, data from 979 passes in
 current GEOS so I'm closing this

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/980#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 03:44:00 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 10:44:00 -0000
Subject: [geos-devel] [GEOS] #960: Exception when creating geometry
	buffer
In-Reply-To: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
References: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
Message-ID: <065.227e31894c0e4b9f097852be4d38d5b2@osgeo.org>

#960: Exception when creating geometry buffer
---------------------------------------+---------------------------
 Reporter:  allenkim0129               |       Owner:  geos-devel@…
     Type:  defect                     |      Status:  closed
 Priority:  blocker                    |   Milestone:
Component:  Default                    |     Version:  3.6.2
 Severity:  Unassigned                 |  Resolution:  fixed
 Keywords:  Buffer, TopologyException  |
---------------------------------------+---------------------------
Changes (by Sandro Santilli <strk@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"23ce93fe1ed062fca0ad035fca54e0002570b7f0/git" 23ce93f/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="23ce93fe1ed062fca0ad035fca54e0002570b7f0"
 Add test for ticket #960

 No exception is thrown, so this commit
 closes #960
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/960#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 03:44:52 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 10:44:52 -0000
Subject: [geos-devel] [GEOS] #960: Exception when creating geometry
	buffer
In-Reply-To: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
References: <050.0363606e7bee87d149abb38507ca349d@osgeo.org>
Message-ID: <065.c856fdb1dc09350deb3d635eacefe78f@osgeo.org>

#960: Exception when creating geometry buffer
---------------------------------------+---------------------------
 Reporter:  allenkim0129               |       Owner:  geos-devel@…
     Type:  defect                     |      Status:  closed
 Priority:  blocker                    |   Milestone:
Component:  Default                    |     Version:  3.6.2
 Severity:  Unassigned                 |  Resolution:  fixed
 Keywords:  Buffer, TopologyException  |
---------------------------------------+---------------------------

Comment (by strk):

 A test with current master shows there's no exception. Test was added to
 testsuite, closing this ticket.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/960#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 05:48:01 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 12:48:01 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
Message-ID: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+--------------------------
 Reporter:  strk        |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  blocker     |  Milestone:  3.9.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 OverlayNG difference crashes with a failed assertion when fed valid data
 in input.
 The input data can be found in https://github.com/qgis/QGIS/issues/39029

 Old generation results in TopologyException. New generation crashes:
 {{{
 postgres: ../../../../../src/operation/overlayng/EdgeMerger.cpp:57:
 std::vector<geos::operation::overlayng::Edge*>
 geos::operation::overlayng::EdgeMerger::merge(): Assertion
 `baseEdge->size() == edge->size()' failed.
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 06:04:36 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 13:04:36 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.92d8a76564f16ac7f179f07978df7850@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * Attachment "TestOverlayNG-geos-1051.xml" added.

 XML testcase

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 06:06:57 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 13:06:57 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.497811861ab27560a59a14f8f1b63cb0@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 I've attached an XML testcase to reproduce the problem. Simple OverlayNG
 still throws an exception, but OverlayRobust catches the exception to
 attempt another run (after snapping, I guess) and triggers the crash.

 Martin: how do I trigger OverlayNGRobust in JTS from the XML ? I found
 GEOS only uses OverlayNGRobust with the "overlayareatest" XML operation,
 but JTS doesn't look like doing that

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 06:09:03 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 13:09:03 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.0061aa6608c5024d26aca28df1e9e945@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 The crash happens when OverlayNGRobust tries overlaySnapping(tol
 1.79499e-06)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 06:59:29 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 13:59:29 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.9217a6ff8a2143a8a5279c18e5715d29@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 I tried {{{   <op name="differencesr" arg1="A" arg2="B"
 arg3="1.79499e-06"> }}} but it returns a POLYGON EMPTY, which doesn't make
 much sense to me (both in JTS and GEOS)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 08:10:01 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 15:10:01 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.3421ee749f29d7e26db40cc9bb0077bf@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:3 strk]:
 > I tried {{{   <op name="differencesr" arg1="A" arg2="B"
 arg3="1.79499e-06"> }}} but it returns a POLYGON EMPTY, which doesn't make
 much sense to me (both in JTS and GEOS)

 Yes, because that is using SnapRounding, which is not what needs to be
 tested.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 08:15:21 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 15:15:21 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.33f5e356b94ffd09b4d9533023eb76e0@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Replying to [comment:1 strk]:
 > I've attached an XML testcase to reproduce the problem. Simple OverlayNG
 still throws an exception, but OverlayRobust catches the exception to
 attempt another run (after snapping, I guess) and triggers the crash.
 >
 > Martin: how do I trigger OverlayNGRobust in JTS from the XML ? I found
 GEOS only uses OverlayNGRobust with the "overlayareatest" XML operation,
 but JTS doesn't look like doing that

 Use the TestRunner option `-geomfunc
 org.locationtech.jtstest.function.OverlayNGRobustFunctions
 org.locationtech.jts.operation.overlayng.OverlayNGRobust`.

 Note that the `overlayAreaTest` operation is boolean-valued, so the XML
 test file will be have to changed to have `true` as the expected output.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 08:22:44 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 15:22:44 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.c190a86ed2cb1ca2efcafc646f30af7a@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 This is a good test - we can add it to the robust/overlay test corpus.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 08:27:33 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 15:27:33 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.8b8a93135e7aa5d8bb14d0c92995971d@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 A quick hack/fix would be to change the EdgeMerger assertion into a
 TopologyException.  Then the OverlayNGRobust logic I think would drop
 through to use Snap-Rounding, which should work.

 It would be nice to fix the noding code, however - if that's possible.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 12:25:46 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 19:25:46 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.c4c2f74a53faa3aebf8ac75bbabdc193@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Martin I'm unable to use the -geomfunc option, can you give full
 commandline ?
 I'm getting:
 {{{
 java.lang.ClassNotFoundException:
 org.locationtech.jtstest.function.OverlayNGRobustFunctions
 org.locationtech.jts.operation.overlayng.OverlayNGRobust
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 12:45:01 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 19:45:01 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.6e0e94af77503c5fe0b445098f4b728b@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 The TopologyException trick works, without getting to Snap-Rounding but
 simply using a bigger snap tolerance:
 {{{
 loating point overlay FAILURE: TopologyException: found non-noded
 intersection between LINESTRING (655065 1.79482e+06, 655065 1.79482e+06)
 and LINESTRING (655065 1.79482e+06, 655065 1.79482e+06) at
 655065.0840699079 1794820.6249905184
 Trying overlaySnapping(tol 1.79499e-06).
 overlaySnapping(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 overlaySnapBoth(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 Trying overlaySnapping(tol 1.79499e-05).
 Floating point overlay FAILURE: TopologyException: found non-noded
 intersection between LINESTRING (655065 1.79482e+06, 655065 1.79482e+06)
 and LINESTRING (655065 1.79482e+06, 655065 1.79482e+06) at
 655065.0840699079 1794820.6249905184
 Trying overlaySnapping(tol 1.79499e-06).
 overlaySnapping(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 overlaySnapBoth(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 Trying overlaySnapping(tol 1.79499e-05).
 Floating point overlay FAILURE: TopologyException: found non-noded
 intersection between LINESTRING (655065 1.79482e+06, 655065 1.79482e+06)
 and LINESTRING (655065 1.79482e+06, 655065 1.79482e+06) at
 655065.0840699079 1794820.6249905184
 Trying overlaySnapping(tol 1.79499e-06).
 overlaySnapping(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 overlaySnapBoth(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 Trying overlaySnapping(tol 1.79499e-05).
 Floating point overlay FAILURE: TopologyException: found non-noded
 intersection between LINESTRING (655065 1.79482e+06, 655065 1.79482e+06)
 and LINESTRING (655065 1.79482e+06, 655065 1.79482e+06) at
 655065.0840699079 1794820.6249905184
 Trying overlaySnapping(tol 1.79499e-06).
 overlaySnapping(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 overlaySnapBoth(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 Trying overlaySnapping(tol 1.79499e-05).
 Floating point overlay FAILURE: TopologyException: found non-noded
 intersection between LINESTRING (655065 1.79482e+06, 655065 1.79482e+06)
 and LINESTRING (655065 1.79482e+06, 655065 1.79482e+06) at
 655065.0840699079 1794820.6249905184
 Trying overlaySnapping(tol 1.79499e-06).
 overlaySnapping(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 overlaySnapBoth(tol 1.79499e-06) FAILURE: TopologyException: Merge of
 edges of different sizes - probable noding error.
 Trying overlaySnapping(tol 1.79499e-05).
 ../../tests/xmltester/tests/robust/overlay/TestOverlayNG-geos-1051.xml:
 case1: test1: overlayareatest(A, B): ok. (0 ms)
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 12:50:04 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 19:50:04 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.a62c880929f56072e542872342d897a1@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Sandro Santilli <strk@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"abb96620c275dc898be5795261359e4c0ce3760c/git" abb9662/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="abb96620c275dc898be5795261359e4c0ce3760c"
 Throw TopologyException on noding error after snapping

 Fixes #1051

 NOTE: JTS passes the test without change, so we should really fix
       the noding code...
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Sep 28 13:03:56 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 28 Sep 2020 20:03:56 -0000
Subject: [geos-devel] [GEOS] #1052: Thread safety: C API contexts use shared
 GeometryFactory without any refCount synchronization
Message-ID: <046.559ef089fa02ac6dcea3d40c7cbdf478@osgeo.org>

#1052: Thread safety: C API contexts use shared GeometryFactory without any
refCount synchronization
------------------------+--------------------------
 Reporter:  macdrevx    |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.6.2
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 The C API's `GEOSContextHandle_HS` initializes its `geomFactory` fields
 via

 {{{
 geomFactory = GeometryFactory::getDefaultInstance();
 }}}

 Various operations subsequently utilize the reference counting features of
 `GeometryFactory` without synchronization.

 We have
 [https://github.com/GEOSwift/GEOSwift/issues/190#issuecomment-699502839
 observed] that this can lead to data races.

 It appears as though a corruption of the value in `_refCount` could
 possibly be harmless so long as `GeometryFactory::destroy()` is never
 invoked, thus setting `_autoDestroy` to `true`. As far as I can tell,
 `destroy()` is never invoked on `GeometryFactory` returned from
 `getDefaultInstance()`, so perhaps we're getting lucky so long as we're
 only using the C API.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1052>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep 29 08:31:03 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 29 Sep 2020 15:31:03 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.7cd7f07f1c943c5898f5c66df846ef1a@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 After building JTS with `mvn clean install`, the command for running the
 test is:
 {{{
 bin/testrunner.sh
 -geomfunc org.locationtech.jtstest.function.OverlayNGRobustFunctions
 org.locationtech.jts.operation.overlayng.OverlayNGRobust
 -files <file-dir>/TestOverlayNG-geos-1051.xml
 }}}
 Note that the `Functions` classes are in the `app` module, so if running
 in an environment such as Eclipse, the run needs to include that module.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:11>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep 29 09:53:34 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 29 Sep 2020 16:53:34 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.8c7a0dbe75c6304d48d887a44a13c782@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Here's what happens to me:
 {{{
 $ bin/testrunner.sh -geomfunc \
 > org.locationtech.jtstest.function.OverlayNGRobustFunctions \
 > org.locationtech.jts.operation.overlayng.OverlayNGRobust \
 > -files TestOverlayNG-geos-1051.xml
 =====  Test Runner  -  JTS Topology Suite (Version 1.18.0 SNAPSHOT) =====
 Adding Geometry Functions from:
 org.locationtech.jtstest.function.OverlayNGRobustFunctions
 java.lang.ClassNotFoundException:
 org.locationtech.jtstest.function.OverlayNGRobustFunctions
         at
 java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
         at
 java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
         at
 org.locationtech.jtstest.geomop.GeometryFunctionRegistry.add(GeometryFunctionRegistry.java:77)
         at
 org.locationtech.jtstest.testrunner.JTSTestRunnerCmd.readOptions(JTSTestRunnerCmd.java:227)
         at
 org.locationtech.jtstest.testrunner.JTSTestRunnerCmd.main(JTSTestRunnerCmd.java:205)
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:12>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep 29 10:05:47 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 29 Sep 2020 17:05:47 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.eef51ac3e812b92b71a5d33b278a3b2b@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Sorry, after {{{ mvn clean install }}} things work fine!

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:13>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep 29 10:11:11 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 29 Sep 2020 17:11:11 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.693e76dc40b503aec69059d4bc860f3a@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Hmm, I'm actually suprised to hear that, since I realized that
 `testrunner.sh` runs a jar file that doesn't include the `app` module
 classes.

 Here's a command line that works for me.  In the JTS root dir:
 {{{
 java -cp modules/app/target/JTSTestBuilder.jar \
 org.locationtech.jtstest.testrunner.JTSTestRunnerCmd \
 -geomfunc org.locationtech.jtstest.function.OverlayNGRobustFunctions  \
 org.locationtech.jts.operation.overlayng.OverlayNGRobust \
 -files TestOverlayNG-geos-1051.xml
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:14>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep 29 11:31:44 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 29 Sep 2020 18:31:44 -0000
Subject: [geos-devel] [GEOS] #1051: overlayng::EdgeMerger::merge():
 Assertion `baseEdge->size() == edge->size()' failed.
In-Reply-To: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
References: <042.342c1954f77a6c6b1dbb6e63979c24eb@osgeo.org>
Message-ID: <057.34d8450940868280d8801b002ff24e70@osgeo.org>

#1051: overlayng::EdgeMerger::merge(): Assertion `baseEdge->size() ==
edge->size()' failed.
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 One way to try and bisect the cause of this problem is to choose some info
 to dump out during noding, and compare to JTS.  Could start with the
 points that are snapped.  Also the final set of edge before merging would
 be interesting to compare (since that is apparently the source of the
 error).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1051#comment:15>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From lr at pcorp.us  Wed Sep 30 08:39:36 2020
From: lr at pcorp.us (Regina Obe)
Date: Wed, 30 Sep 2020 11:39:36 -0400
Subject: [geos-devel] Ticket #1050: Debug assertion failure when buiding
	GEOS under windows with MSVC /MTd flag -who can help
Message-ID: <000801d6973f$e7f03020$b7d09060$@pcorp.us>

I forget which folks we have are proficient with using Windows Visual
Studio.

The particular ticket is 

https://trac.osgeo.org/geos/ticket/1050

which is about VS 2015.  I'm not sure where to start with it and he does
have some suggestions on how to fix.. 


 I have VS 2019 but not really proficient with using it with CMake or C++
and I'm not sure I would run into the same issues anyway since I don't have
VS 2015 anymore.

Thanks,
Regina






