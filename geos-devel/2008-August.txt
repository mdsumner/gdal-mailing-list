From mateusz at loskot.net  Fri Aug  1 19:27:47 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug  1 19:27:52 2008
Subject: [geos-devel] Proposing GEOS 3.0.1 or 3.1.0
Message-ID: <48939BF3.2020105@loskot.net>

Folks, Dear PSC,

Recently, new feature [1] to the public C API has been applied.
It was on request from QGIS folks. They are are porting QGIS to GEOS C 
API and use Polygonizer::getCutEdges which was not exposed.
Now, it seems important to synchronize release dates of QGIS 1.0.0
with new release of GEOS - the one that will include the new features.

First, I thought GEOS 3.0.1 (with #195 fix included) should make the 
job, but then I reminded that the fix changes public api, so it applies 
more to GEOS 3.1.0.

IMO, would not be a bad idea to release 3.1.0.
It's been 8 months since 3.0.0 and a bunch of fixes have
been applied [3].


What do you think?


[1] http://trac.osgeo.org/geos/ticket/195
[2] http://lists.osgeo.org/pipermail/qgis-developer/2008-July/004529.html
[3] 
http://trac.osgeo.org/geos/timeline?from=08%2F01%2F08&daysback=225&changeset=on

Best regards
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Fri Aug  1 19:38:34 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Aug  1 19:35:44 2008
Subject: [geos-devel] Proposing GEOS 3.0.1 or 3.1.0
In-Reply-To: <48939BF3.2020105@loskot.net>
References: <48939BF3.2020105@loskot.net>
Message-ID: <48939E7A.503@refractions.net>

Seems reasonable to me. 

Am I correct in thinking that the primary functionality change is the 
addition of PreparedGeometry?  The SVN history is very long and 
complicated - is there any way of boiling it down to highlight what are 
the key changes that have been made?  Or is it all of equal interest?

Mateusz Loskot wrote:
> Folks, Dear PSC,
>
> Recently, new feature [1] to the public C API has been applied.
> It was on request from QGIS folks. They are are porting QGIS to GEOS C 
> API and use Polygonizer::getCutEdges which was not exposed.
> Now, it seems important to synchronize release dates of QGIS 1.0.0
> with new release of GEOS - the one that will include the new features.
>
> First, I thought GEOS 3.0.1 (with #195 fix included) should make the 
> job, but then I reminded that the fix changes public api, so it 
> applies more to GEOS 3.1.0.
>
> IMO, would not be a bad idea to release 3.1.0.
> It's been 8 months since 3.0.0 and a bunch of fixes have
> been applied [3].
>
>
> What do you think?
>
>
> [1] http://trac.osgeo.org/geos/ticket/195
> [2] http://lists.osgeo.org/pipermail/qgis-developer/2008-July/004529.html
> [3] 
> http://trac.osgeo.org/geos/timeline?from=08%2F01%2F08&daysback=225&changeset=on 
>
>
> Best regards

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Fri Aug  1 19:56:54 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug  1 19:57:00 2008
Subject: [geos-devel] Proposing GEOS 3.0.1 or 3.1.0
In-Reply-To: <48939E7A.503@refractions.net>
References: <48939BF3.2020105@loskot.net> <48939E7A.503@refractions.net>
Message-ID: <4893A2C6.8000904@loskot.net>

Martin Davis wrote:
> Seems reasonable to me.
> Am I correct in thinking that the primary functionality change is the 
> addition of PreparedGeometry?

Martin,

This is my understanding. Here is an old talk

http://lists.osgeo.org/pipermail/geos-devel/2007-December/

> The SVN history is very long and 
> complicated - is there any way of boiling it down to highlight what are 
> the key changes that have been made?  Or is it all of equal interest?

Assuming we all provide meaningful log messages while committing
and revision 2046 is the point of GEOS 3.0.0, I do it this way

1) chronological order, ascending

svn log -r 2046:2146 http://svn.osgeo.org/geos/trunk

2) chronological order, descending

svn log -r 2146:2046 http://svn.osgeo.org/geos/trunk


You may add --verbose option to get more details (ie. list of files)


Best regards
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From pramsey at cleverelephant.ca  Tue Aug  5 19:07:13 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue Aug  5 19:07:16 2008
Subject: [geos-devel] Proposing GEOS 3.0.1 or 3.1.0
In-Reply-To: <48939BF3.2020105@loskot.net>
References: <48939BF3.2020105@loskot.net>
Message-ID: <30fe546d0808051607r5f85c2eax48f1db5e0bed269f@mail.gmail.com>

Blug, I was hoping the memory leak in the preparedgeometry work would
be gone before we got 3.1 out the door. I'm afraid that the 1.3.x
series of PostGIS has a detection in it that will turn on the prepared
optimization if it detects GEOS 3.1, which would be bad if GEOS 3.1
has a broken prepared implementation. :(

Rock meet hard place.

P

On Fri, Aug 1, 2008 at 4:27 PM, Mateusz Loskot <mateusz@loskot.net> wrote:
> Folks, Dear PSC,
>
> Recently, new feature [1] to the public C API has been applied.
> It was on request from QGIS folks. They are are porting QGIS to GEOS C API
> and use Polygonizer::getCutEdges which was not exposed.
> Now, it seems important to synchronize release dates of QGIS 1.0.0
> with new release of GEOS - the one that will include the new features.
>
> First, I thought GEOS 3.0.1 (with #195 fix included) should make the job,
> but then I reminded that the fix changes public api, so it applies more to
> GEOS 3.1.0.
>
> IMO, would not be a bad idea to release 3.1.0.
> It's been 8 months since 3.0.0 and a bunch of fixes have
> been applied [3].
>
>
> What do you think?
>
>
> [1] http://trac.osgeo.org/geos/ticket/195
> [2] http://lists.osgeo.org/pipermail/qgis-developer/2008-July/004529.html
> [3]
> http://trac.osgeo.org/geos/timeline?from=08%2F01%2F08&daysback=225&changeset=on
>
> Best regards
> --
> Mateusz Loskot, http://mateusz.loskot.net
> Charter Member of OSGeo, http://osgeo.org
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From mateusz at loskot.net  Wed Aug  6 05:51:08 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Aug  6 05:51:16 2008
Subject: [geos-devel] Proposing GEOS 3.0.1 or 3.1.0
In-Reply-To: <30fe546d0808051607r5f85c2eax48f1db5e0bed269f@mail.gmail.com>
References: <48939BF3.2020105@loskot.net>
	<30fe546d0808051607r5f85c2eax48f1db5e0bed269f@mail.gmail.com>
Message-ID: <4899740C.6060505@loskot.net>

Paul Ramsey wrote:
> Blug, I was hoping the memory leak in the preparedgeometry work would
> be gone before we got 3.1 out the door. I'm afraid that the 1.3.x
> series of PostGIS has a detection in it that will turn on the prepared
> optimization if it detects GEOS 3.1, which would be bad if GEOS 3.1
> has a broken prepared implementation. :(

Paul,

I agree. I just didn't know about this issue.
Is there any plan for fixing it?

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From pramsey at cleverelephant.ca  Thu Aug  7 13:15:32 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu Aug  7 13:15:35 2008
Subject: [geos-devel] GEOS Incubation
Message-ID: <30fe546d0808071015j18663634k1b021ba593e4e174@mail.gmail.com>

Frank,

Could you review the status at

http://wiki.osgeo.org/wiki/GEOS_Incubation_Status

and let me know how you think we're doing?

Thanks,

Paul
From swongu at gmail.com  Fri Aug  8 14:48:10 2008
From: swongu at gmail.com (Stephen Wong)
Date: Fri Aug  8 14:48:12 2008
Subject: [geos-devel] Crash when buffering a geometry
Message-ID: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>

Hello,
I have found that when using BufferOp on a specific polygon, GEOS crashes
with an assertion failure.  This failure appears to be within
RightmostEdgeFinder, and I have documented it on a ticket (
http://trac.osgeo.org/geos/ticket/188). On that ticket, I have also provided
a .zip file that reproduces the error. The surprising this is that the
geometry is not complicated at all!

I have posted this problem in March (see
http://lists.osgeo.org/pipermail/geos-devel/2008-March/003324.html), but
didn't get a response thus far; hopefully posting here will help.  Thanks in
advance.

Regards,

Stephen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080808/7bc5ca8d/attachment.html
From warmerdam at pobox.com  Sat Aug  9 01:32:36 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Sat Aug  9 01:32:53 2008
Subject: [geos-devel] Re: GEOS Incubation
In-Reply-To: <30fe546d0808071015j18663634k1b021ba593e4e174@mail.gmail.com>
References: <30fe546d0808071015j18663634k1b021ba593e4e174@mail.gmail.com>
Message-ID: <489D2BF4.20200@pobox.com>

Paul Ramsey wrote:
> Frank,
> 
> Could you review the status at
> 
> http://wiki.osgeo.org/wiki/GEOS_Incubation_Status
> 
> and let me know how you think we're doing?

Paul,

I have reviewed the documents and I think they look great.  Did we
get all the existing authorized commiters to agree to the terms of
RFC 2?  I don't recall.  It might be worth noting in the last item of
the incubation status.

I am happy with the Provenance Review, and don't see further action
needed in that regard.

I have two outstanding issues with regard to GEOS before I'd be very
comfortable recommending it for graduation.

1) I'd like to see the PSC making some decisions (RFCs, approving releases,
etc) to demonstrate that the PSC is operating effectively.

2) I'd like to see some active contribution from several parties.  I feel
like the activity level is quite low on GEOS.  This might be partly that it
is satisfactory already, or that no one has a pressing need just now, but
it leaves me uncertain about the project.  For instance I recall there were
issues in the past raised by Safe, and the MapGuide folks about GEOS. I'd love
to see them re-raising those issues - hammer out a consensus via the PSC/RFC
process, and then implementing changes that get out as a release.

It is my opinion that there is no harm in us sitting in incubation for a while
till we can demonstrate more of the above.  I hope you are ok with this since
my concerns are rather subjective.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From mateusz at loskot.net  Sat Aug  9 11:40:37 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sat Aug  9 11:40:45 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
Message-ID: <489DBA75.9060609@loskot.net>

Dear PSC and GEOS Community,

I'd like to give my agreement on the Committer Guidelines described
in the GEOS RFC 2 document available at

http://trac.osgeo.org/geos/wiki/RFC2

I have read, understand, and agree to follow the terms of this document.


Best regards
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From pramsey at cleverelephant.ca  Mon Aug 11 14:42:30 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Aug 11 14:42:33 2008
Subject: [geos-devel] Crash when buffering a geometry
In-Reply-To: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>
References: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>
Message-ID: <30fe546d0808111142l1caa22n7519688724806334@mail.gmail.com>

Stephen,

When I integrate your code into my OS/X build and run the unit tests,
I don't get as far as buffering...

---> group: geos::operation::BufferOp, test: test<1>
     problem: unexpected exception
     exception typeid: N4geos2io14ParseExceptionE
     message: "ParseException: Unknown WKB type 0"

Are you certain that WKB fragment is good?

Paul

On Fri, Aug 8, 2008 at 11:48 AM, Stephen Wong <swongu@gmail.com> wrote:
> Hello,
> I have found that when using BufferOp on a specific polygon, GEOS crashes
> with an assertion failure.  This failure appears to be within
> RightmostEdgeFinder, and I have documented it on a ticket
> (http://trac.osgeo.org/geos/ticket/188). On that ticket, I have also
> provided a .zip file that reproduces the error. The surprising this is that
> the geometry is not complicated at all!
> I have posted this problem in March
> (see http://lists.osgeo.org/pipermail/geos-devel/2008-March/003324.html),
> but didn't get a response thus far; hopefully posting here will help.
>  Thanks in advance.
> Regards,
> Stephen
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From pramsey at cleverelephant.ca  Mon Aug 11 14:59:14 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Aug 11 14:59:17 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
In-Reply-To: <489DBA75.9060609@loskot.net>
References: <489DBA75.9060609@loskot.net>
Message-ID: <30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>

I also read, understand and will follow RFC2.

The following people need to affirm the same:

   *  pramsey - Paul Ramsey (124, 2007-12-21)
    * mbdavis - Martin Davis (1, 2003-02-11)
    * hobu - Howard Butler (17, 2006-11-10)
    * mloskot - Mateusz Loskot (136, 2008-08-01)
    * csavage - Charlie Savage (102, 2007-09-21)
    * frank, warmerdam - Frank Warmerdam (27, 2008-07-19)
    * sgillies - Sean Gillies (10, 2008-01-02)
    * benjubb - Ben Jubb (38, 2008-01-30)

On Sat, Aug 9, 2008 at 8:40 AM, Mateusz Loskot <mateusz@loskot.net> wrote:
> Dear PSC and GEOS Community,
>
> I'd like to give my agreement on the Committer Guidelines described
> in the GEOS RFC 2 document available at
>
> http://trac.osgeo.org/geos/wiki/RFC2
>
> I have read, understand, and agree to follow the terms of this document.
>
>
> Best regards
> --
> Mateusz Loskot, http://mateusz.loskot.net
> Charter Member of OSGeo, http://osgeo.org
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From pramsey at cleverelephant.ca  Mon Aug 11 15:02:20 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Aug 11 15:02:22 2008
Subject: [geos-devel] Re: GEOS Incubation
In-Reply-To: <489D2BF4.20200@pobox.com>
References: <30fe546d0808071015j18663634k1b021ba593e4e174@mail.gmail.com>
	<489D2BF4.20200@pobox.com>
Message-ID: <30fe546d0808111202v36c2678ap740b05fa02deb64f@mail.gmail.com>

On Fri, Aug 8, 2008 at 10:32 PM, Frank Warmerdam <warmerdam@pobox.com> wrote:
>  Did we
> get all the existing authorized commiters to agree to the terms of
> RFC 2?  I don't recall.  It might be worth noting in the last item of
> the incubation status.

The PSC members did, implicitly at least, when approving RF2. That
leaves a few folks out. Hopefully we can get everyone on Mateusz'
email chain.

> 1) I'd like to see the PSC making some decisions (RFCs, approving releases,
> etc) to demonstrate that the PSC is operating effectively.

> 2) I'd like to see some active contribution from several parties.

I don't disagree, though I don't know what the magic word is... the
last time GEOS had significant development activity was when
Refractions was funding Sandro for a reasonable chunk of his time.

I will be pursuing a few of our corporate members for some assistance
in putting together a fund to have a maintainer available.

Paul
From sgillies at frii.com  Mon Aug 11 15:06:59 2008
From: sgillies at frii.com (Sean Gillies)
Date: Mon Aug 11 15:06:14 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
In-Reply-To: <30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
References: <489DBA75.9060609@loskot.net>
	<30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
Message-ID: <48A08DD3.5050603@frii.com>

I have read, understand, and agree to follow the terms of this document.

Paul Ramsey wrote:
> I also read, understand and will follow RFC2.
> 
> The following people need to affirm the same:
> 
>    *  pramsey - Paul Ramsey (124, 2007-12-21)
>     * mbdavis - Martin Davis (1, 2003-02-11)
>     * hobu - Howard Butler (17, 2006-11-10)
>     * mloskot - Mateusz Loskot (136, 2008-08-01)
>     * csavage - Charlie Savage (102, 2007-09-21)
>     * frank, warmerdam - Frank Warmerdam (27, 2008-07-19)
>     * sgillies - Sean Gillies (10, 2008-01-02)
>     * benjubb - Ben Jubb (38, 2008-01-30)
> 
> On Sat, Aug 9, 2008 at 8:40 AM, Mateusz Loskot <mateusz@loskot.net> wrote:
>> Dear PSC and GEOS Community,
>>
>> I'd like to give my agreement on the Committer Guidelines described
>> in the GEOS RFC 2 document available at
>>
>> http://trac.osgeo.org/geos/wiki/RFC2
>>
>> I have read, understand, and agree to follow the terms of this document.
>>
>>
>> Best regards
>> --
>> Mateusz Loskot, http://mateusz.loskot.net
>> Charter Member of OSGeo, http://osgeo.org
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
> 

From sgillies at frii.com  Mon Aug 11 15:02:44 2008
From: sgillies at frii.com (Sean Gillies)
Date: Mon Aug 11 15:07:36 2008
Subject: [geos-devel] Re: GEOS Incubation
In-Reply-To: <489D2BF4.20200@pobox.com>
References: <30fe546d0808071015j18663634k1b021ba593e4e174@mail.gmail.com>
	<489D2BF4.20200@pobox.com>
Message-ID: <48A08CD4.200@frii.com>

Frank Warmerdam wrote:
> Paul Ramsey wrote:
>> Frank,
>>
>> Could you review the status at
>>
>> http://wiki.osgeo.org/wiki/GEOS_Incubation_Status
>>
>> and let me know how you think we're doing?
> 
> Paul,
> 
> I have reviewed the documents and I think they look great.  Did we
> get all the existing authorized commiters to agree to the terms of
> RFC 2?  I don't recall.  It might be worth noting in the last item of
> the incubation status.
> 
> I am happy with the Provenance Review, and don't see further action
> needed in that regard.
> 
> I have two outstanding issues with regard to GEOS before I'd be very
> comfortable recommending it for graduation.
> 
> 1) I'd like to see the PSC making some decisions (RFCs, approving releases,
> etc) to demonstrate that the PSC is operating effectively.
> 
> 2) I'd like to see some active contribution from several parties.  I feel
> like the activity level is quite low on GEOS.  This might be partly that it
> is satisfactory already, or that no one has a pressing need just now, but
> it leaves me uncertain about the project.  For instance I recall there were
> issues in the past raised by Safe, and the MapGuide folks about GEOS.
> I'd love
> to see them re-raising those issues - hammer out a consensus via the
> PSC/RFC
> process, and then implementing changes that get out as a release.
> 

+1. Let's see the stakeholders become more active -- "stake wielders", even.

> It is my opinion that there is no harm in us sitting in incubation for a
> while
> till we can demonstrate more of the above.  I hope you are ok with this
> since
> my concerns are rather subjective.
> 
> Best regards,

The question of whether GEOS remains slaved to JTS or not seems to be
something that might be resolved before graduation?

Cheers,
Sean


From swongu at gmail.com  Mon Aug 11 16:41:27 2008
From: swongu at gmail.com (Stephen Wong)
Date: Mon Aug 11 16:41:44 2008
Subject: [geos-devel] Crash when buffering a geometry
In-Reply-To: <30fe546d0808111142l1caa22n7519688724806334@mail.gmail.com>
References: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>
	<30fe546d0808111142l1caa22n7519688724806334@mail.gmail.com>
Message-ID: <633230220808111341h147be04en3e281f9b40615a8d@mail.gmail.com>

Hi Paul,
Thanks for the quick response. I just ran the test again (Windows Vista,
32-bit) and it doesn't get stuck on reading the WKB, so maybe it has to do
with cross-platform compatibility.  I took the WKB and converted it to hex,
so hopefully, it will work this time. I've attached it to the ticket (
http://trac.osgeo.org/geos/ticket/188). The file I/O operations in the .cpp
file now look like this:

std::ifstream fin ;
fin.open( "hex.ogc" ) ;
GeometryAPtr geom( reader_.readHEX( fin ) ) ;

Thanks,

Stephen

On Mon, Aug 11, 2008 at 11:42 AM, Paul Ramsey <pramsey@cleverelephant.ca>wrote:

> Stephen,
>
> When I integrate your code into my OS/X build and run the unit tests,
> I don't get as far as buffering...
>
> ---> group: geos::operation::BufferOp, test: test<1>
>     problem: unexpected exception
>     exception typeid: N4geos2io14ParseExceptionE
>     message: "ParseException: Unknown WKB type 0"
>
> Are you certain that WKB fragment is good?
>
> Paul
>
> On Fri, Aug 8, 2008 at 11:48 AM, Stephen Wong <swongu@gmail.com> wrote:
> > Hello,
> > I have found that when using BufferOp on a specific polygon, GEOS crashes
> > with an assertion failure.  This failure appears to be within
> > RightmostEdgeFinder, and I have documented it on a ticket
> > (http://trac.osgeo.org/geos/ticket/188). On that ticket, I have also
> > provided a .zip file that reproduces the error. The surprising this is
> that
> > the geometry is not complicated at all!
> > I have posted this problem in March
> > (see http://lists.osgeo.org/pipermail/geos-devel/2008-March/003324.html
> ),
> > but didn't get a response thus far; hopefully posting here will help.
> >  Thanks in advance.
> > Regards,
> > Stephen
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080811/6192e11a/attachment.html
From cfis at savagexi.com  Mon Aug 11 16:24:29 2008
From: cfis at savagexi.com (Charlie Savage)
Date: Mon Aug 11 16:48:04 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
In-Reply-To: <30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
References: <489DBA75.9060609@loskot.net>
	<30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
Message-ID: <48A09FFD.5010407@savagexi.com>




> I also read, understand and will follow RFC2.
> 
> The following people need to affirm the same:
> 
>     * csavage - Charlie Savage (102, 2007-09-21)

I also agree.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20080811/8ea86c33/smime-0001.bin
From mateusz at loskot.net  Mon Aug 11 17:16:50 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Aug 11 17:16:56 2008
Subject: [geos-devel] Re: GEOS Incubation
In-Reply-To: <48A08CD4.200@frii.com>
References: <30fe546d0808071015j18663634k1b021ba593e4e174@mail.gmail.com>	<489D2BF4.20200@pobox.com>
	<48A08CD4.200@frii.com>
Message-ID: <48A0AC42.4090302@loskot.net>

Sean Gillies wrote:
> The question of whether GEOS remains slaved to JTS or not seems to be
> something that might be resolved before graduation?

Yes, this is important question.
Next question I propose to get answered is the GEOS development
roadmap regarding new features. If the idea is to port next elements of 
JTS, then let's list them in order they should be ported.

IMO, clear vision and plans are helpful.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Mon Aug 11 17:46:45 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Mon Aug 11 17:43:13 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
In-Reply-To: <30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
References: <489DBA75.9060609@loskot.net>
	<30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
Message-ID: <48A0B345.6070702@refractions.net>

I have read, understood and will follow RFC2

Martin

Paul Ramsey wrote:
> I also read, understand and will follow RFC2.
>
> The following people need to affirm the same:
>
>    *  pramsey - Paul Ramsey (124, 2007-12-21)
>     * mbdavis - Martin Davis (1, 2003-02-11)
>     * hobu - Howard Butler (17, 2006-11-10)
>     * mloskot - Mateusz Loskot (136, 2008-08-01)
>     * csavage - Charlie Savage (102, 2007-09-21)
>     * frank, warmerdam - Frank Warmerdam (27, 2008-07-19)
>     * sgillies - Sean Gillies (10, 2008-01-02)
>     * benjubb - Ben Jubb (38, 2008-01-30)
>
> On Sat, Aug 9, 2008 at 8:40 AM, Mateusz Loskot <mateusz@loskot.net> wrote:
>   
>> Dear PSC and GEOS Community,
>>
>> I'd like to give my agreement on the Committer Guidelines described
>> in the GEOS RFC 2 document available at
>>
>> http://trac.osgeo.org/geos/wiki/RFC2
>>
>> I have read, understand, and agree to follow the terms of this document.
>>
>>
>> Best regards
>> --
>> Mateusz Loskot, http://mateusz.loskot.net
>> Charter Member of OSGeo, http://osgeo.org
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>     
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mbdavis at refractions.net  Mon Aug 11 17:53:59 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Mon Aug 11 17:50:28 2008
Subject: [geos-devel] Crash when buffering a geometry
In-Reply-To: <633230220808111341h147be04en3e281f9b40615a8d@mail.gmail.com>
References: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>	<30fe546d0808111142l1caa22n7519688724806334@mail.gmail.com>
	<633230220808111341h147be04en3e281f9b40615a8d@mail.gmail.com>
Message-ID: <48A0B4F7.9010807@refractions.net>

FWIW, this test case works in the current JTS codebase, but apparently 
not in JTS 1.9.  So this might narrow down where to look.  There has 
been at least one change to the buffering code since 1.9, to do with 
improving how offset curve generation is handled.

Stephen Wong wrote:
> Hi Paul,
>
> Thanks for the quick response. I just ran the test again (Windows 
> Vista, 32-bit) and it doesn't get stuck on reading the WKB, so maybe 
> it has to do with cross-platform compatibility.  I took the WKB and 
> converted it to hex, so hopefully, it will work this time. I've 
> attached it to the ticket (http://trac.osgeo.org/geos/ticket/188). The 
> file I/O operations in the .cpp file now look like this:
>
> std::ifstream fin ;
> fin.open( "hex.ogc" ) ;
> GeometryAPtr geom( reader_.readHEX( fin ) ) ;
>
> Thanks,
>
> Stephen
>
> On Mon, Aug 11, 2008 at 11:42 AM, Paul Ramsey 
> <pramsey@cleverelephant.ca <mailto:pramsey@cleverelephant.ca>> wrote:
>
>     Stephen,
>
>     When I integrate your code into my OS/X build and run the unit tests,
>     I don't get as far as buffering...
>
>     ---> group: geos::operation::BufferOp, test: test<1>
>         problem: unexpected exception
>         exception typeid: N4geos2io14ParseExceptionE
>         message: "ParseException: Unknown WKB type 0"
>
>     Are you certain that WKB fragment is good?
>
>     Paul
>
>     On Fri, Aug 8, 2008 at 11:48 AM, Stephen Wong <swongu@gmail.com
>     <mailto:swongu@gmail.com>> wrote:
>     > Hello,
>     > I have found that when using BufferOp on a specific polygon,
>     GEOS crashes
>     > with an assertion failure.  This failure appears to be within
>     > RightmostEdgeFinder, and I have documented it on a ticket
>     > (http://trac.osgeo.org/geos/ticket/188). On that ticket, I have also
>     > provided a .zip file that reproduces the error. The surprising
>     this is that
>     > the geometry is not complicated at all!
>     > I have posted this problem in March
>     > (see
>     http://lists.osgeo.org/pipermail/geos-devel/2008-March/003324.html),
>     > but didn't get a response thus far; hopefully posting here will
>     help.
>     >  Thanks in advance.
>     > Regards,
>     > Stephen
>     > _______________________________________________
>     > geos-devel mailing list
>     > geos-devel@lists.osgeo.org <mailto:geos-devel@lists.osgeo.org>
>     > http://lists.osgeo.org/mailman/listinfo/geos-devel
>     >
>     _______________________________________________
>     geos-devel mailing list
>     geos-devel@lists.osgeo.org <mailto:geos-devel@lists.osgeo.org>
>     http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Mon Aug 11 18:01:03 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Aug 11 18:01:08 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
Message-ID: <48A0B69F.8070906@loskot.net>

Folks,

There is PreparedGeometryFactory class with create/prepare methods.
Both return object of PreparedGeometry type dynamically allocated on 
heap (using new operator).

Now, how such geometry returned from the factory is supposed to be 
destroyed?

Comparing to GeometryFactory, there is destroyGeometry method that 
accepts pointer to object of Geometry type. It works well.

Back to prepared geometry, GeometryFactory::destroyGeometry() can not be 
used to destroy object of type of PreparedGeometry because it is 
unrelated in any way to Geometry type, so no casting is possible.

For me it looks that there is one method missing 
PreparedGeometryFactory::destroyGeometry, though I may have missed some 
other way to destroy prep geom.

Any suggestions?

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Mon Aug 11 18:38:20 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Mon Aug 11 18:34:49 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
In-Reply-To: <48A0B69F.8070906@loskot.net>
References: <48A0B69F.8070906@loskot.net>
Message-ID: <48A0BF5C.6070302@refractions.net>

I would think that there should be a destructor defined for the 
PreparedGeometry class.  Would this be the appropriate C++ pattern?

Mateusz Loskot wrote:
> Folks,
>
> There is PreparedGeometryFactory class with create/prepare methods.
> Both return object of PreparedGeometry type dynamically allocated on 
> heap (using new operator).
>
> Now, how such geometry returned from the factory is supposed to be 
> destroyed?
>
> Comparing to GeometryFactory, there is destroyGeometry method that 
> accepts pointer to object of Geometry type. It works well.
>
> Back to prepared geometry, GeometryFactory::destroyGeometry() can not 
> be used to destroy object of type of PreparedGeometry because it is 
> unrelated in any way to Geometry type, so no casting is possible.
>
> For me it looks that there is one method missing 
> PreparedGeometryFactory::destroyGeometry, though I may have missed 
> some other way to destroy prep geom.
>
> Any suggestions?
>
> Best regards,

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Mon Aug 11 18:46:27 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Aug 11 18:46:33 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
In-Reply-To: <48A0BF5C.6070302@refractions.net>
References: <48A0B69F.8070906@loskot.net> <48A0BF5C.6070302@refractions.net>
Message-ID: <48A0C143.4030903@loskot.net>

Martin Davis wrote:
> I would think that there should be a destructor defined for the 
> PreparedGeometry class.  Would this be the appropriate C++ pattern?

Martin,

Not really. The C++ standard says:

"If a class has no user-declared destructor, a destructor is
declared implicitly"

It means, PreparedGeometry class has implicit destructor.
The problem is that it is never called (implicitly) because 
PreparedGeometryFactory constructs PreparedGeometry objects on heap.
So, user has to trigger destructor execution. In most cases, we do in 
C++ this:

PreparedGeometryFactory f;
Geometry* g = ... // create geometry
PreparedGeometry* pg = f.create(g);
... // use prepared geom
delete pg; // request destruction

And I could use this pattern without problems, however it is not bullet 
proof for "DLL Hell" problems on Windows/Visual C++ because "memory 
crosses DLL boundaries". In example above, GEOS DLL binary allocates 
memory for prepared geometry, but client calls "delete" operator on side 
of his program (.exe binary or another .dll). And crash is very probable.

GeometryFactory::destroyGeometry solves this problem because it calls 
delete operator on the GEOS DLL side.

The same pattern is used in GDAL:


"How should I deallocate resources acquainted from GDAL on Windows?"

http://trac.osgeo.org/gdal/wiki/FAQMiscellaneous


Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From pramsey at cleverelephant.ca  Mon Aug 11 18:53:51 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Aug 11 18:53:53 2008
Subject: [geos-devel] Crash when buffering a geometry
In-Reply-To: <633230220808111341h147be04en3e281f9b40615a8d@mail.gmail.com>
References: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>
	<30fe546d0808111142l1caa22n7519688724806334@mail.gmail.com>
	<633230220808111341h147be04en3e281f9b40615a8d@mail.gmail.com>
Message-ID: <30fe546d0808111553k38f5b23dkbb8fb433abc74b55@mail.gmail.com>

In retrospect, the problem was (surprise!) between my ears. The unit
test harness runs in the context of a directory one lower than your
test case directory. When I copied the test data down into the
expected location, it ran, and failed.

So, consider your test case confirmed on OS/X. It be broken. Now I'll
try the patch.

P.

On Mon, Aug 11, 2008 at 1:41 PM, Stephen Wong <swongu@gmail.com> wrote:
> Hi Paul,
> Thanks for the quick response. I just ran the test again (Windows Vista,
> 32-bit) and it doesn't get stuck on reading the WKB, so maybe it has to do
> with cross-platform compatibility.  I took the WKB and converted it to hex,
> so hopefully, it will work this time. I've attached it to the ticket
> (http://trac.osgeo.org/geos/ticket/188). The file I/O operations in the .cpp
> file now look like this:
> std::ifstream fin ;
> fin.open( "hex.ogc" ) ;
> GeometryAPtr geom( reader_.readHEX( fin ) ) ;
> Thanks,
> Stephen
>
> On Mon, Aug 11, 2008 at 11:42 AM, Paul Ramsey <pramsey@cleverelephant.ca>
> wrote:
>>
>> Stephen,
>>
>> When I integrate your code into my OS/X build and run the unit tests,
>> I don't get as far as buffering...
>>
>> ---> group: geos::operation::BufferOp, test: test<1>
>>     problem: unexpected exception
>>     exception typeid: N4geos2io14ParseExceptionE
>>     message: "ParseException: Unknown WKB type 0"
>>
>> Are you certain that WKB fragment is good?
>>
>> Paul
>>
>> On Fri, Aug 8, 2008 at 11:48 AM, Stephen Wong <swongu@gmail.com> wrote:
>> > Hello,
>> > I have found that when using BufferOp on a specific polygon, GEOS
>> > crashes
>> > with an assertion failure.  This failure appears to be within
>> > RightmostEdgeFinder, and I have documented it on a ticket
>> > (http://trac.osgeo.org/geos/ticket/188). On that ticket, I have also
>> > provided a .zip file that reproduces the error. The surprising this is
>> > that
>> > the geometry is not complicated at all!
>> > I have posted this problem in March
>> > (see
>> > http://lists.osgeo.org/pipermail/geos-devel/2008-March/003324.html),
>> > but didn't get a response thus far; hopefully posting here will help.
>> >  Thanks in advance.
>> > Regards,
>> > Stephen
>> > _______________________________________________
>> > geos-devel mailing list
>> > geos-devel@lists.osgeo.org
>> > http://lists.osgeo.org/mailman/listinfo/geos-devel
>> >
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From mbdavis at refractions.net  Mon Aug 11 19:00:31 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Mon Aug 11 18:57:04 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
In-Reply-To: <48A0C143.4030903@loskot.net>
References: <48A0B69F.8070906@loskot.net> <48A0BF5C.6070302@refractions.net>
	<48A0C143.4030903@loskot.net>
Message-ID: <48A0C48F.3090007@refractions.net>

Ugh.

Sounds like we need a 
PreparedGeometryFactory::destroyPreparedGeometry(PreparedGeometry *) 
method, then - as per your suggestion.

Does this same situation exist for all objects which might be allocated 
on the heap?  There's lots of classes in GEOS "below the Geometry level" 
which might be used by a coder using the C++ API.  Perhaps there should 
be a warning about this (in the non-existent FAQ?)

M



Mateusz Loskot wrote:
> Martin Davis wrote:
>> I would think that there should be a destructor defined for the 
>> PreparedGeometry class.  Would this be the appropriate C++ pattern?
>
> Martin,
>
> Not really. The C++ standard says:
>
> "If a class has no user-declared destructor, a destructor is
> declared implicitly"
>
> It means, PreparedGeometry class has implicit destructor.
> The problem is that it is never called (implicitly) because 
> PreparedGeometryFactory constructs PreparedGeometry objects on heap.
> So, user has to trigger destructor execution. In most cases, we do in 
> C++ this:
>
> PreparedGeometryFactory f;
> Geometry* g = ... // create geometry
> PreparedGeometry* pg = f.create(g);
> ... // use prepared geom
> delete pg; // request destruction
>
> And I could use this pattern without problems, however it is not 
> bullet proof for "DLL Hell" problems on Windows/Visual C++ because 
> "memory crosses DLL boundaries". In example above, GEOS DLL binary 
> allocates memory for prepared geometry, but client calls "delete" 
> operator on side of his program (.exe binary or another .dll). And 
> crash is very probable.
>
> GeometryFactory::destroyGeometry solves this problem because it calls 
> delete operator on the GEOS DLL side.
>
> The same pattern is used in GDAL:
>
>
> "How should I deallocate resources acquainted from GDAL on Windows?"
>
> http://trac.osgeo.org/gdal/wiki/FAQMiscellaneous
>
>
> Best regards,

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Mon Aug 11 19:10:45 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Aug 11 19:10:58 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
In-Reply-To: <48A0C48F.3090007@refractions.net>
References: <48A0B69F.8070906@loskot.net>
	<48A0BF5C.6070302@refractions.net>	<48A0C143.4030903@loskot.net>
	<48A0C48F.3090007@refractions.net>
Message-ID: <48A0C6F5.3090308@loskot.net>

Martin Davis wrote:
> Ugh.
> 
> Sounds like we need a 
> PreparedGeometryFactory::destroyPreparedGeometry(PreparedGeometry *) 
> method, then - as per your suggestion.

or just

PreparedGeometryFactory::destroy(PreparedGeometry* )

as we have prepare() and create() but not preparePreparedGeometry etc.

(Actually, I would vote for renaming destroyGeometry() to just destroy() 
from the same reasons, but I understand it's likely impossible as it 
breaks public API)

> Does this same situation exist for all objects which might be allocated 
> on the heap?

Yes, it does exist for all objects that:
a) are allocated on the heap
b) and are returned outside GEOS, to user
c) and the ownership is transfered to user


The c) means that a user is responsible for destroying it.

> There's lots of classes in GEOS "below the Geometry level" 
> which might be used by a coder using the C++ API.  Perhaps there should 
> be a warning about this (in the non-existent FAQ?)

Yes, FAQ is good, but empty:

http://trac.osgeo.org/geos/wiki/FAQ

The explanation can be stolen from GDAL FAQ with some changes related to 
GEOS. Before I compile something, I need to find more examples of 
potentially dangerous places in GEOS.

Best regards
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Mon Aug 11 19:32:39 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Mon Aug 11 19:29:07 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
In-Reply-To: <48A0C6F5.3090308@loskot.net>
References: <48A0B69F.8070906@loskot.net>	<48A0BF5C.6070302@refractions.net>	<48A0C143.4030903@loskot.net>	<48A0C48F.3090007@refractions.net>
	<48A0C6F5.3090308@loskot.net>
Message-ID: <48A0CC17.2090500@refractions.net>

Sure, sounds good - I agree with your reasoning.  Simpler is better!

Mateusz Loskot wrote:
> Martin Davis wrote:
>> Ugh.
>>
>> Sounds like we need a 
>> PreparedGeometryFactory::destroyPreparedGeometry(PreparedGeometry *) 
>> method, then - as per your suggestion.
>
> or just
>
> PreparedGeometryFactory::destroy(PreparedGeometry* )
>
> as we have prepare() and create() but not preparePreparedGeometry etc.
>
> (Actually, I would vote for renaming destroyGeometry() to just 
> destroy() from the same reasons, but I understand it's likely 
> impossible as it breaks public API)
>
>> Does this same situation exist for all objects which might be 
>> allocated on the heap?
>
> Yes, it does exist for all objects that:
> a) are allocated on the heap
> b) and are returned outside GEOS, to user
> c) and the ownership is transfered to user
>
>
> The c) means that a user is responsible for destroying it.
>
>> There's lots of classes in GEOS "below the Geometry level" which 
>> might be used by a coder using the C++ API.  Perhaps there should be 
>> a warning about this (in the non-existent FAQ?)
>
> Yes, FAQ is good, but empty:
>
> http://trac.osgeo.org/geos/wiki/FAQ
>
> The explanation can be stolen from GDAL FAQ with some changes related 
> to GEOS. Before I compile something, I need to find more examples of 
> potentially dangerous places in GEOS.
>
> Best regards

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Mon Aug 11 19:58:39 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Aug 11 19:58:45 2008
Subject: [geos-devel] How to destroy PreparedGeometry object?
In-Reply-To: <48A0CC17.2090500@refractions.net>
References: <48A0B69F.8070906@loskot.net>	<48A0BF5C.6070302@refractions.net>	<48A0C143.4030903@loskot.net>	<48A0C48F.3090007@refractions.net>	<48A0C6F5.3090308@loskot.net>
	<48A0CC17.2090500@refractions.net>
Message-ID: <48A0D22F.7060903@loskot.net>

Martin Davis wrote:
> Sure, sounds good - I agree with your reasoning.  Simpler is better!

Fixed in trunk:

http://trac.osgeo.org/geos/ticket/198

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From hobu.inc at gmail.com  Wed Aug 13 01:03:49 2008
From: hobu.inc at gmail.com (Howard Butler)
Date: Wed Aug 13 01:03:57 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
In-Reply-To: <48A0B345.6070702@refractions.net>
References: <489DBA75.9060609@loskot.net>
	<30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
	<48A0B345.6070702@refractions.net>
Message-ID: <F1D2DBB6-3187-4942-BF6E-A44D1F12BFFB@gmail.com>

I have read, understood and will follow RFC2

Howard

On Aug 11, 2008, at 4:46 PM, Martin Davis wrote:

> I have read, understood and will follow RFC2
>
> Martin
>
> Paul Ramsey wrote:
>> I also read, understand and will follow RFC2.
>>
>> The following people need to affirm the same:
>>
>>   *  pramsey - Paul Ramsey (124, 2007-12-21)
>>    * mbdavis - Martin Davis (1, 2003-02-11)
>>    * hobu - Howard Butler (17, 2006-11-10)
>>    * mloskot - Mateusz Loskot (136, 2008-08-01)
>>    * csavage - Charlie Savage (102, 2007-09-21)
>>    * frank, warmerdam - Frank Warmerdam (27, 2008-07-19)
>>    * sgillies - Sean Gillies (10, 2008-01-02)
>>    * benjubb - Ben Jubb (38, 2008-01-30)
>>
>> On Sat, Aug 9, 2008 at 8:40 AM, Mateusz Loskot <mateusz@loskot.net>  
>> wrote:
>>
>>> Dear PSC and GEOS Community,
>>>
>>> I'd like to give my agreement on the Committer Guidelines described
>>> in the GEOS RFC 2 document available at
>>>
>>> http://trac.osgeo.org/geos/wiki/RFC2
>>>
>>> I have read, understand, and agree to follow the terms of this  
>>> document.
>>>
>>>
>>> Best regards
>>> --
>>> Mateusz Loskot, http://mateusz.loskot.net
>>> Charter Member of OSGeo, http://osgeo.org
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>
> -- 
> Martin Davis
> Senior Technical Architect
> Refractions Research, Inc.
> (250) 383-3022
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From warmerdam at pobox.com  Wed Aug 13 23:40:18 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed Aug 13 23:40:29 2008
Subject: [geos-devel] [Agreement] GEOS RFC 2: Committer Guidelines
In-Reply-To: <30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
References: <489DBA75.9060609@loskot.net>
	<30fe546d0808111159q7cf3ede9sd65cc00507c90e29@mail.gmail.com>
Message-ID: <931f8ea90808132040w50882e50ofba44b55135f1d3a@mail.gmail.com>

On Mon, Aug 11, 2008 at 2:59 PM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> I also read, understand and will follow RFC2.

I have read, understood and plan to follow the guidelines.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent
From pramsey at cleverelephant.ca  Fri Aug 15 14:31:43 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri Aug 15 14:31:46 2008
Subject: [geos-devel] Migration Complete
Message-ID: <30fe546d0808151131x11d29892k2697b74286c55e41@mail.gmail.com>

FYI, all the GEOS assets and nightly scripts have now been migrated to
osgeo.org, so GEOS is completely in its new home.

Downloads are at

  http://download.osgeo.org/

SVN ChangeLog is at

  http://download.osgeo.org/SVN.txt

Nightly snap is at

  http://download.osgeo.org/geos-svn.tar.bz2
From woodbri at swoodbridge.com  Fri Aug 15 16:54:33 2008
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Fri Aug 15 15:53:30 2008
Subject: [geos-devel] Migration Complete
In-Reply-To: <30fe546d0808151131x11d29892k2697b74286c55e41@mail.gmail.com>
References: <30fe546d0808151131x11d29892k2697b74286c55e41@mail.gmail.com>
Message-ID: <48A5ED09.6070609@swoodbridge.com>

Hi Paul,

These URLs do not look correct. You might want to check that they really 
work as expected. They didn't work for me.

-Steve

Paul Ramsey wrote:
> FYI, all the GEOS assets and nightly scripts have now been migrated to
> osgeo.org, so GEOS is completely in its new home.
> 
> Downloads are at
> 
>   http://download.osgeo.org/
> 
> SVN ChangeLog is at
> 
>   http://download.osgeo.org/SVN.txt
> 
> Nightly snap is at
> 
>   http://download.osgeo.org/geos-svn.tar.bz2
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From woodbri at swoodbridge.com  Fri Aug 15 17:06:55 2008
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Fri Aug 15 16:05:51 2008
Subject: [geos-devel] Migration Complete
In-Reply-To: <48A5ED09.6070609@swoodbridge.com>
References: <30fe546d0808151131x11d29892k2697b74286c55e41@mail.gmail.com>
	<48A5ED09.6070609@swoodbridge.com>
Message-ID: <48A5EFEF.4040608@swoodbridge.com>

Stephen Woodbridge wrote:
> Hi Paul,
> 
> These URLs do not look correct. You might want to check that they really 
> work as expected. They didn't work for me.
> 
> -Steve
> 
> Paul Ramsey wrote:
>> FYI, all the GEOS assets and nightly scripts have now been migrated to
>> osgeo.org, so GEOS is completely in its new home.
>>
>> Downloads are at
>>
>>   http://download.osgeo.org/

      http://download.osgeo.org/geos/

>>
>> SVN ChangeLog is at
>>
>>   http://download.osgeo.org/SVN.txt

      http://download.osgeo.org/geos/SVN.txt

>>
>> Nightly snap is at
>>
>>   http://download.osgeo.org/geos-svn.tar.bz2

      http://download.osgeo.org/geos/geos-svn.tar.bz2

OK, poking around looks like the URLs should be as above. And you need 
to update the index.html page at http://download.osgeo.org/ to include a 
link to the geos directory.

-Steve
From pramsey at cleverelephant.ca  Fri Aug 15 17:50:18 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri Aug 15 17:50:21 2008
Subject: [geos-devel] Leaking Prepared Geometries
Message-ID: <30fe546d0808151450s3da8e21fg5853235d7fa84cdf@mail.gmail.com>

OK, it took quite a while to set up, but I got an example leaking its
way through valgrind.  This is using geos trunk and postgis trunk,
with PREPARED_GEOM set to 1.  Here's the commandline invocation:

echo "select va.edabbr, count(*) from ed join va on
(st_contains(ed.the_geom, va.the_geom, ed.gid)) where va.edabbr =
'PRO' and va.vaabbr like '02%' group by va.edabbr" | valgrind
--leak-check=yes --log-file=valgrindlog
/usr/local/pgsql/8.3/bin/postgres --single postgis

ed is a table of complex largish polygons and va is a table of
smallish polygons. The where clause limited it to about 15 tests, so
it "only" leaked about 100Mb. At 100 or so tests, it was leaking 500Mb
and creaming the VM on which I'm running this stuff.

The valgrind output is attached.

Paul
-------------- next part --------------
==28178== Memcheck, a memory error detector.
==28178== Copyright (C) 2002-2006, and GNU GPL'd, by Julian Seward et al.
==28178== Using LibVEX rev 1658, a library for dynamic binary translation.
==28178== Copyright (C) 2004-2006, and GNU GPL'd, by OpenWorks LLP.
==28178== Using valgrind-3.2.1, a dynamic binary instrumentation framework.
==28178== Copyright (C) 2000-2006, and GNU GPL'd, by Julian Seward et al.
==28178== For more details, rerun with: -v
==28178== 
==28178== My PID = 28178, parent PID = 6049.  Prog and args are:
==28178==    /usr/local/pgsql/8.3/bin/postgres
==28178==    --single
==28178==    postgis
==28178== 
==28178== Syscall param write(buf) points to uninitialised byte(s)
==28178==    at 0x40D3F53: __write_nocancel (in /lib/libc-2.5.so)
==28178==    by 0x4075544: new_do_write (in /lib/libc-2.5.so)
==28178==    by 0x407582E: _IO_do_write@@GLIBC_2.1 (in /lib/libc-2.5.so)
==28178==    by 0x407611D: _IO_file_overflow@@GLIBC_2.1 (in /lib/libc-2.5.so)
==28178==    by 0x407571B: _IO_file_xsputn@@GLIBC_2.1 (in /lib/libc-2.5.so)
==28178==    by 0x406BCDE: fwrite (in /lib/libc-2.5.so)
==28178==    by 0x8277998: write_item (relcache.c:3832)
==28178==    by 0x8277B86: write_relcache_init_file (relcache.c:3720)
==28178==    by 0x827B740: RelationCacheInitializePhase2 (relcache.c:2663)
==28178==    by 0x828D59F: InitPostgres (postinit.c:536)
==28178==    by 0x81E676B: PostgresMain (postgres.c:3292)
==28178==    by 0x8177A59: main (main.c:186)
==28178==  Address 0x4009466 is not stack'd, malloc'd or (recently) free'd
==28178== 
==28178== Syscall param write(buf) points to uninitialised byte(s)
==28178==    at 0x40D3F53: __write_nocancel (in /lib/libc-2.5.so)
==28178==    by 0x4075544: new_do_write (in /lib/libc-2.5.so)
==28178==    by 0x407582E: _IO_do_write@@GLIBC_2.1 (in /lib/libc-2.5.so)
==28178==    by 0x4076C14: _IO_file_close_it@@GLIBC_2.1 (in /lib/libc-2.5.so)
==28178==    by 0x406A81D: fclose@@GLIBC_2.1 (in /lib/libc-2.5.so)
==28178==    by 0x81D24C4: FreeDesc (fd.c:1322)
==28178==    by 0x81D25E4: FreeFile (fd.c:1359)
==28178==    by 0x8277CD4: write_relcache_init_file (relcache.c:3780)
==28178==    by 0x827B740: RelationCacheInitializePhase2 (relcache.c:2663)
==28178==    by 0x828D59F: InitPostgres (postinit.c:536)
==28178==    by 0x81E676B: PostgresMain (postgres.c:3292)
==28178==    by 0x8177A59: main (main.c:186)
==28178==  Address 0x40091DE is not stack'd, malloc'd or (recently) free'd
==28178== 
==28178== ERROR SUMMARY: 20 errors from 2 contexts (suppressed: 42 from 1)
==28178== malloc/free: in use at exit: 11,284,212 bytes in 227,180 blocks.
==28178== malloc/free: 450,018 allocs, 222,838 frees, 2,521,992,627 bytes allocated.
==28178== For counts of detected errors, rerun with: -v
==28178== searching for pointers to 227,180 not-freed blocks.
==28178== checked 2,272,612 bytes.
==28178== 
==28178== 
==28178== 16 bytes in 1 blocks are possibly lost in loss record 6 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x7028082: geos::index::strtree::STRtree::createNode(int) (STRtree.cpp:222)
==28178==    by 0x702B992: geos::index::strtree::AbstractSTRtree::createParentBoundables(std::vector<geos::index::strtree::Boundable*, std::allocator<geos::index::strtree::Boundable*> >*, int) (AbstractSTRtree.cpp:83)
==28178==    by 0x70287F1: geos::index::strtree::STRtree::createParentBoundablesFromVerticalSlice(std::vector<geos::index::strtree::Boundable*, std::allocator<geos::index::strtree::Boundable*> >*, int) (STRtree.cpp:154)
==28178==    by 0x70288C5: geos::index::strtree::STRtree::createParentBoundablesFromVerticalSlices(std::vector<std::vector<geos::index::strtree::Boundable*, std::allocator<geos::index::strtree::Boundable*> >*, std::allocator<std::vector<geos::index::strtree::Boundable*, std::allocator<geos::index::strtree::Boundable*> >*> >*, int) (STRtree.cpp:139)
==28178==    by 0x7028AE7: geos::index::strtree::STRtree::createParentBoundables(std::vector<geos::index::strtree::Boundable*, std::allocator<geos::index::strtree::Boundable*> >*, int) (STRtree.cpp:117)
==28178==    by 0x702B7F5: geos::index::strtree::AbstractSTRtree::createHigherLevels(std::vector<geos::index::strtree::Boundable*, std::allocator<geos::index::strtree::Boundable*> >*, int) (AbstractSTRtree.cpp:98)
==28178==    by 0x702A9D8: geos::index::strtree::AbstractSTRtree::build() (AbstractSTRtree.cpp:58)
==28178==    by 0x702AA16: geos::index::strtree::AbstractSTRtree::query(void const*, std::vector<void*, std::allocator<void*> >&) (AbstractSTRtree.cpp:123)
==28178==    by 0x7028FB8: geos::index::strtree::STRtree::query(geos::geom::Envelope const*, std::vector<void*, std::allocator<void*> >&) (STRtree.h:129)
==28178==    by 0x703E503: geos::noding::MCIndexSegmentSetMutualIntersector::intersectChains() (MCIndexSegmentSetMutualIntersector.cpp:65)
==28178==    by 0x703EAFE: geos::noding::MCIndexSegmentSetMutualIntersector::process(std::vector<geos::noding::SegmentString const*, std::allocator<geos::noding::SegmentString const*> >*) (MCIndexSegmentSetMutualIntersector.cpp:137)
==28178== 
==28178== 
==28178== 24 bytes in 1 blocks are possibly lost in loss record 11 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x702352C: geos::index::chain::MonotoneChainBuilder::getChains(geos::geom::CoordinateSequence const*, void*, std::vector<geos::index::chain::MonotoneChain*, std::allocator<geos::index::chain::MonotoneChain*> >&) (MonotoneChainBuilder.cpp:65)
==28178==    by 0x702360A: geos::index::chain::MonotoneChainBuilder::getChains(geos::geom::CoordinateSequence const*, void*) (MonotoneChainBuilder.cpp:46)
==28178==    by 0x703E6B3: geos::noding::MCIndexSegmentSetMutualIntersector::addToIndex(geos::noding::SegmentString*) (MCIndexSegmentSetMutualIntersector.cpp:39)
==28178==    by 0x703E760: geos::noding::MCIndexSegmentSetMutualIntersector::setBaseSegments(std::vector<geos::noding::SegmentString const*, std::allocator<geos::noding::SegmentString const*> >*) (MCIndexSegmentSetMutualIntersector.cpp:121)
==28178==    by 0x703BAE1: geos::noding::FastSegmentSetIntersectionFinder::FastSegmentSetIntersectionFinder(std::vector<geos::noding::SegmentString const*, std::allocator<geos::noding::SegmentString const*> >*) (FastSegmentSetIntersectionFinder.cpp:42)
==28178==    by 0x7002D5E: geos::geom::prep::PreparedPolygon::getIntersectionFinder() const (PreparedPolygon.cpp:69)
==28178==    by 0x70023FF: geos::geom::prep::AbstractPreparedPolygonContains::findAndClassifyIntersections(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:86)
==28178==    by 0x700268A: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:141)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178==    by 0x6EFB017: containsPrepared (lwgeom_geos_c.c:3802)
==28178== 
==28178== 
==28178== 38 bytes in 1 blocks are definitely lost in loss record 17 of 106
==28178==    at 0x40053C0: malloc (vg_replace_malloc.c:149)
==28178==    by 0x4081D1F: strdup (in /lib/libc-2.5.so)
==28178==    by 0x82A73C9: set_pglocale_pgservice (exec.c:660)
==28178==    by 0x81775DE: main (main.c:90)
==28178== 
==28178== 
==28178== 1,122 (84 direct, 1,038 indirect) bytes in 1 blocks are definitely lost in loss record 26 of 106
==28178==    at 0x40053C0: malloc (vg_replace_malloc.c:149)
==28178==    by 0x8298776: save_ps_display_args (ps_status.c:162)
==28178==    by 0x81775C9: main (main.c:79)
==28178== 
==28178== 
==28178== 224 bytes in 8 blocks are possibly lost in loss record 37 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x7023902: geos::index::intervalrtree::SortedPackedIntervalRTree::buildLevel(std::vector<geos::index::intervalrtree::IntervalRTreeNode const*, std::allocator<geos::index::intervalrtree::IntervalRTreeNode const*> >*, std::vector<geos::index::intervalrtree::IntervalRTreeNode const*, std::allocator<geos::index::intervalrtree::IntervalRTreeNode const*> >*) (SortedPackedIntervalRTree.cpp:83)
==28178==    by 0x7023B1E: geos::index::intervalrtree::SortedPackedIntervalRTree::buildTree() (SortedPackedIntervalRTree.cpp:51)
==28178==    by 0x7023B9F: geos::index::intervalrtree::SortedPackedIntervalRTree::init() (SortedPackedIntervalRTree.cpp:36)
==28178==    by 0x7023BDB: geos::index::intervalrtree::SortedPackedIntervalRTree::query(double, double, geos::index::ItemVisitor*) (SortedPackedIntervalRTree.cpp:136)
==28178==    by 0x6FE5005: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::query(double, double, geos::index::ItemVisitor*) (IndexedPointInAreaLocator.cpp:136)
==28178==    by 0x6FE559F: geos::algorithm::locate::IndexedPointInAreaLocator::locate(geos::geom::Coordinate const*) (IndexedPointInAreaLocator.cpp:120)
==28178==    by 0x7001A15: geos::geom::prep::PreparedPolygonPredicate::isAllTestComponentsInTargetArea(geos::geom::Geometry const*) (PreparedPolygonPredicate.cpp:44)
==28178==    by 0x70025B5: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:112)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178==    by 0x6EFB017: containsPrepared (lwgeom_geos_c.c:3802)
==28178== 
==28178== 
==28178== 8,910,300 (660 direct, 8,909,640 indirect) bytes in 15 blocks are definitely lost in loss record 53 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x700399C: geos::geom::prep::PreparedGeometryFactory::create(geos::geom::Geometry const*) const (PreparedGeometryFactory.cpp:58)
==28178==    by 0x6F38232: GEOSPrepare (PreparedGeometryFactory.h:61)
==28178==    by 0x6EF7715: get_prepared_geometry_cache_key (lwgeom_geos_c.c:3702)
==28178==    by 0x6EFAF9E: containsPrepared (lwgeom_geos_c.c:3781)
==28178==    by 0x815E007: ExecMakeFunctionResultNoSets (execQual.c:1412)
==28178==    by 0x815E06B: ExecQual (execQual.c:4501)
==28178==    by 0x81693B8: ExecNestLoop (nodeNestloop.c:231)
==28178==    by 0x81592DC: ExecProcNode (execProcnode.c:367)
==28178==    by 0x8163898: ExecAgg (nodeAgg.c:865)
==28178==    by 0x8159339: ExecProcNode (execProcnode.c:394)
==28178==    by 0x8158299: ExecutorRun (execMain.c:1248)
==28178== 
==28178== 
==28178== 936 bytes in 18 blocks are possibly lost in loss record 56 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x6FE50EE: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::addLine(geos::geom::CoordinateSequence*) (IndexedPointInAreaLocator.cpp:72)
==28178==    by 0x6FE53D7: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::init(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:61)
==28178==    by 0x6FE5477: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::IntervalIndexedGeometry(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:42)
==28178==    by 0x6FE54BC: geos::algorithm::locate::IndexedPointInAreaLocator::buildIndex(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:85)
==28178==    by 0x6FE5C9E: geos::algorithm::locate::IndexedPointInAreaLocator::IndexedPointInAreaLocator(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:105)
==28178==    by 0x70028D1: geos::geom::prep::PreparedPolygon::getPointLocator() const (PreparedPolygon.cpp:79)
==28178==    by 0x7001A09: geos::geom::prep::PreparedPolygonPredicate::isAllTestComponentsInTargetArea(geos::geom::Geometry const*) (PreparedPolygonPredicate.cpp:44)
==28178==    by 0x70025B5: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:112)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178==    by 0x6EFB017: containsPrepared (lwgeom_geos_c.c:3802)
==28178== 
==28178== 
==28178== 135,196 (24 direct, 135,172 indirect) bytes in 1 blocks are definitely lost in loss record 65 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x6FF106B: geos::geom::GeometryFactory::createMultiPolygon(std::vector<geos::geom::Geometry*, std::allocator<geos::geom::Geometry*> >*) const (GeometryFactory.cpp:361)
==28178==    by 0x6F393A8: GEOSGeom_createCollection (geos_c.cpp:1282)
==28178==    by 0x6EF75ED: LWGEOM2GEOS (lwgeom_geos_c.c:3156)
==28178==    by 0x6EF768D: POSTGIS2GEOS (lwgeom_geos_c.c:3191)
==28178==    by 0x6EF770D: get_prepared_geometry_cache_key (lwgeom_geos_c.c:3701)
==28178==    by 0x6EFAF9E: containsPrepared (lwgeom_geos_c.c:3781)
==28178==    by 0x815E007: ExecMakeFunctionResultNoSets (execQual.c:1412)
==28178==    by 0x815E06B: ExecQual (execQual.c:4501)
==28178==    by 0x81693B8: ExecNestLoop (nodeNestloop.c:231)
==28178==    by 0x81592DC: ExecProcNode (execProcnode.c:367)
==28178==    by 0x8163898: ExecAgg (nodeAgg.c:865)
==28178== 
==28178== 
==28178== 56 bytes in 7 blocks are definitely lost in loss record 71 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x70015E1: geos::geom::prep::PreparedPolygonPredicate::isAnyTargetComponentInTestArea(geos::geom::Geometry const*, std::vector<geos::geom::Coordinate const*, std::allocator<geos::geom::Coordinate const*> > const*) (PreparedPolygonPredicate.cpp:104)
==28178==    by 0x700265B: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:175)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178==    by 0x6EFB017: containsPrepared (lwgeom_geos_c.c:3802)
==28178==    by 0x815E007: ExecMakeFunctionResultNoSets (execQual.c:1412)
==28178==    by 0x815E06B: ExecQual (execQual.c:4501)
==28178==    by 0x81693B8: ExecNestLoop (nodeNestloop.c:231)
==28178==    by 0x81592DC: ExecProcNode (execProcnode.c:367)
==28178==    by 0x8163964: ExecAgg (nodeAgg.c:921)
==28178==    by 0x8159339: ExecProcNode (execProcnode.c:394)
==28178== 
==28178== 
==28178== 240 bytes in 10 blocks are possibly lost in loss record 82 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x7023F16: geos::index::intervalrtree::SortedPackedIntervalRTree::insert(double, double, void*) (SortedPackedIntervalRTree.cpp:130)
==28178==    by 0x6FE5180: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::addLine(geos::geom::CoordinateSequence*) (IndexedPointInAreaLocator.cpp:77)
==28178==    by 0x6FE53D7: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::init(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:61)
==28178==    by 0x6FE5477: geos::algorithm::locate::IndexedPointInAreaLocator::IntervalIndexedGeometry::IntervalIndexedGeometry(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:42)
==28178==    by 0x6FE54BC: geos::algorithm::locate::IndexedPointInAreaLocator::buildIndex(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:85)
==28178==    by 0x6FE5C9E: geos::algorithm::locate::IndexedPointInAreaLocator::IndexedPointInAreaLocator(geos::geom::Geometry const&) (IndexedPointInAreaLocator.cpp:105)
==28178==    by 0x70028D1: geos::geom::prep::PreparedPolygon::getPointLocator() const (PreparedPolygon.cpp:79)
==28178==    by 0x7001A09: geos::geom::prep::PreparedPolygonPredicate::isAllTestComponentsInTargetArea(geos::geom::Geometry const*) (PreparedPolygonPredicate.cpp:44)
==28178==    by 0x70025B5: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:112)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178== 
==28178== 
==28178== 36,972 (108 direct, 36,864 indirect) bytes in 9 blocks are definitely lost in loss record 88 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x70235D4: geos::index::chain::MonotoneChainBuilder::getChains(geos::geom::CoordinateSequence const*, void*) (MonotoneChainBuilder.cpp:45)
==28178==    by 0x703E6B3: geos::noding::MCIndexSegmentSetMutualIntersector::addToIndex(geos::noding::SegmentString*) (MCIndexSegmentSetMutualIntersector.cpp:39)
==28178==    by 0x703E760: geos::noding::MCIndexSegmentSetMutualIntersector::setBaseSegments(std::vector<geos::noding::SegmentString const*, std::allocator<geos::noding::SegmentString const*> >*) (MCIndexSegmentSetMutualIntersector.cpp:121)
==28178==    by 0x703BAE1: geos::noding::FastSegmentSetIntersectionFinder::FastSegmentSetIntersectionFinder(std::vector<geos::noding::SegmentString const*, std::allocator<geos::noding::SegmentString const*> >*) (FastSegmentSetIntersectionFinder.cpp:42)
==28178==    by 0x7002D5E: geos::geom::prep::PreparedPolygon::getIntersectionFinder() const (PreparedPolygon.cpp:69)
==28178==    by 0x70023FF: geos::geom::prep::AbstractPreparedPolygonContains::findAndClassifyIntersections(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:86)
==28178==    by 0x700268A: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:141)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178==    by 0x6EFB017: containsPrepared (lwgeom_geos_c.c:3802)
==28178==    by 0x815E007: ExecMakeFunctionResultNoSets (execQual.c:1412)
==28178== 
==28178== 
==28178== 360,768 bytes in 4 blocks are possibly lost in loss record 104 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x6FE8395: geos::geom::CoordinateArraySequence::CoordinateArraySequence(geos::geom::CoordinateArraySequence const&) (new_allocator.h:88)
==28178==    by 0x6FE845C: geos::geom::CoordinateArraySequence::clone() const (CoordinateArraySequence.cpp:58)
==28178==    by 0x6FF6D3F: geos::geom::LineString::getCoordinates() const (LineString.cpp:110)
==28178==    by 0x7002B62: geos::geom::prep::PreparedPolygon::getIntersectionFinder() const (SegmentStringUtil.h:56)
==28178==    by 0x70023FF: geos::geom::prep::AbstractPreparedPolygonContains::findAndClassifyIntersections(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:86)
==28178==    by 0x700268A: geos::geom::prep::AbstractPreparedPolygonContains::eval(geos::geom::Geometry const*) (AbstractPreparedPolygonContains.cpp:141)
==28178==    by 0x7002A42: geos::geom::prep::PreparedPolygon::contains(geos::geom::Geometry const*) const (PreparedPolygonContains.h:96)
==28178==    by 0x6F3673C: GEOSPreparedContains (geos_c.cpp:2381)
==28178==    by 0x6EFB017: containsPrepared (lwgeom_geos_c.c:3802)
==28178==    by 0x815E007: ExecMakeFunctionResultNoSets (execQual.c:1412)
==28178==    by 0x815E06B: ExecQual (execQual.c:4501)
==28178== 
==28178== 
==28178== 405,552 bytes in 4 blocks are possibly lost in loss record 105 of 106
==28178==    at 0x4005B65: operator new(unsigned) (vg_replace_malloc.c:163)
==28178==    by 0x6FE8057: geos::geom::CoordinateArraySequence::CoordinateArraySequence(unsigned) (new_allocator.h:88)
==28178==    by 0x6FD6FE0: geos::geom::CoordinateArraySequenceFactory::create(unsigned, unsigned) const (CoordinateArraySequenceFactory.inl:44)
==28178==    by 0x6F37121: GEOSCoordSeq_create (geos_c.cpp:1522)
==28178==    by 0x6EF7376: ptarray_to_GEOSCoordSeq (lwgeom_geos_c.c:3050)
==28178==    by 0x6EF74D1: LWGEOM2GEOS (lwgeom_geos_c.c:3117)
==28178==    by 0x6EF75C6: LWGEOM2GEOS (lwgeom_geos_c.c:3153)
==28178==    by 0x6EF768D: POSTGIS2GEOS (lwgeom_geos_c.c:3191)
==28178==    by 0x6EF770D: get_prepared_geometry_cache_key (lwgeom_geos_c.c:3701)
==28178==    by 0x6EFAF9E: containsPrepared (lwgeom_geos_c.c:3781)
==28178==    by 0x815E007: ExecMakeFunctionResultNoSets (execQual.c:1412)
==28178==    by 0x815E06B: ExecQual (execQual.c:4501)
==28178== 
==28178== LEAK SUMMARY:
==28178==    definitely lost: 970 bytes in 34 blocks.
==28178==    indirectly lost: 9,082,714 bytes in 226,239 blocks.
==28178==      possibly lost: 767,760 bytes in 46 blocks.
==28178==    still reachable: 1,432,768 bytes in 861 blocks.
==28178==         suppressed: 0 bytes in 0 blocks.
==28178== Reachable blocks (those to which a pointer was found) are not shown.
==28178== To see them, rerun with: --show-reachable=yes
From warmerdam at pobox.com  Mon Aug 18 10:30:50 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Mon Aug 18 10:30:51 2008
Subject: [geos-devel] Migration Complete
In-Reply-To: <48A5EFEF.4040608@swoodbridge.com>
References: <30fe546d0808151131x11d29892k2697b74286c55e41@mail.gmail.com>
	<48A5ED09.6070609@swoodbridge.com> <48A5EFEF.4040608@swoodbridge.com>
Message-ID: <931f8ea90808180730h6f7b45f5g5ee3a5d0a31f57ad@mail.gmail.com>

On 8/15/08, Stephen Woodbridge <woodbri@swoodbridge.com> wrote:
>  OK, poking around looks like the URLs should be as above. And you need to
> update the index.html page at http://download.osgeo.org/ to include a link
> to the geos directory.

Steve,

I have added a link to GEOS in the main download index page.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent
From pramsey at cleverelephant.ca  Mon Aug 18 19:53:27 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Aug 18 19:53:31 2008
Subject: [geos-devel] Finding the Leak
Message-ID: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>

I had a few spare minutes today and poked around the area of the
biggest leak...

I see this construct in the PostGIS side in get_prepared_geometry_cache

		if ( !cache->prepared_geom )
		{
			LWDEBUGF(3, "get_prepared_geometry_cache: preparing obj");
			
			g = POSTGIS2GEOS( serialized_geom);
			cache->prepared_geom = GEOSPrepare( g);
		}

So, a GEOS geometry is being created, and then converted into a
prepared geometry, but *not* destroyed.  Attempting to destroy the
geometry right away leads to a crash, presumably because the
PreparedGeometry contains a reference to it in baseGeom?

Later in the life cycle, the prepared geometry gets destroyed,

		GEOSPreparedGeom_destroy( cache->prepared_geom);

But, in the PreparedGeometry destructor, the baseGeom is not destroyed...

PreparedPolygon::
~PreparedPolygon( )
{
        delete segIntFinder;
        delete ptOnGeomLoc;

        for ( size_t i = 0, ni = segStrings.size(); i < ni; i++ )
        {
                delete segStrings[ i ]->getCoordinates();
                delete segStrings[ i ];
        }
}

I guess this makes sense (not to always destroy the base geometry in
the GEOS code), but in our code that means the geometry is allocated
but not destroyed, yes?

Can saner heads than me confirm my analysis?

P.
From mbdavis at refractions.net  Mon Aug 18 20:06:20 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Mon Aug 18 20:02:17 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>
Message-ID: <48AA0E7C.2070607@refractions.net>

That makes sense to me.  In JTS-land, PreparedGeometry was intended to 
be a "decorator" for Geometry.  (Although this is really a moot point in 
Java, since GC handles all magically....)

Under this pattern, the decorated geometry must be deleted after the PG 
is deleted, by the calling code.

Next step is to try it and see!

Oh, and yes, the Geometry needs to outlive the PG...

Paul Ramsey wrote:
> I had a few spare minutes today and poked around the area of the
> biggest leak...
>
> I see this construct in the PostGIS side in get_prepared_geometry_cache
>
> 		if ( !cache->prepared_geom )
> 		{
> 			LWDEBUGF(3, "get_prepared_geometry_cache: preparing obj");
> 			
> 			g = POSTGIS2GEOS( serialized_geom);
> 			cache->prepared_geom = GEOSPrepare( g);
> 		}
>
> So, a GEOS geometry is being created, and then converted into a
> prepared geometry, but *not* destroyed.  Attempting to destroy the
> geometry right away leads to a crash, presumably because the
> PreparedGeometry contains a reference to it in baseGeom?
>
> Later in the life cycle, the prepared geometry gets destroyed,
>
> 		GEOSPreparedGeom_destroy( cache->prepared_geom);
>
> But, in the PreparedGeometry destructor, the baseGeom is not destroyed...
>
> PreparedPolygon::
> ~PreparedPolygon( )
> {
>         delete segIntFinder;
>         delete ptOnGeomLoc;
>
>         for ( size_t i = 0, ni = segStrings.size(); i < ni; i++ )
>         {
>                 delete segStrings[ i ]->getCoordinates();
>                 delete segStrings[ i ];
>         }
> }
>
> I guess this makes sense (not to always destroy the base geometry in
> the GEOS code), but in our code that means the geometry is allocated
> but not destroyed, yes?
>
> Can saner heads than me confirm my analysis?
>
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Mon Aug 18 22:15:05 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Aug 18 22:15:12 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <48AA0E7C.2070607@refractions.net>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>
	<48AA0E7C.2070607@refractions.net>
Message-ID: <48AA2CA9.3070904@loskot.net>

Martin Davis wrote:
> That makes sense to me.  In JTS-land, PreparedGeometry was intended to
> be a "decorator" for Geometry.  (Although this is really a moot point in
> Java, since GC handles all magically....)
> 
> Under this pattern, the decorated geometry must be deleted after the PG
> is deleted, by the calling code.
>
> Next step is to try it and see!
> 
> Oh, and yes, the Geometry needs to outlive the PG...


If the requirement that Geometry (G) needs to outlive PG is strong,
then using raw pointers for linking G and PG objects is not safe
regarding resources management (memory).

I'd even rephrase the requirements above this way:
"G and PG *share* common resources and we *do*not* want to know when
this resources needs to be released (memory deallocated)"

Possible solution is to use smart pointer (like boost::shared_ptr)
idiom to track lifetime of shared resource and collect after
last client disconnects.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From pramsey at cleverelephant.ca  Mon Aug 18 23:10:27 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Aug 18 23:10:30 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <48AA2CA9.3070904@loskot.net>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>
	<48AA0E7C.2070607@refractions.net> <48AA2CA9.3070904@loskot.net>
Message-ID: <30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>

I was thinking that the blunt-force solution would be to clone the
Geometry when PreparedGeometry is constructed, rather than retaining a
reference, so we an delete the whole kit-n-kaboodle when we're done
with the PreparedGeometry.

P.

On Mon, Aug 18, 2008 at 7:15 PM, Mateusz Loskot <mateusz@loskot.net> wrote:
> Martin Davis wrote:
>> That makes sense to me.  In JTS-land, PreparedGeometry was intended to
>> be a "decorator" for Geometry.  (Although this is really a moot point in
>> Java, since GC handles all magically....)
>>
>> Under this pattern, the decorated geometry must be deleted after the PG
>> is deleted, by the calling code.
>>
>> Next step is to try it and see!
>>
>> Oh, and yes, the Geometry needs to outlive the PG...
>
>
> If the requirement that Geometry (G) needs to outlive PG is strong,
> then using raw pointers for linking G and PG objects is not safe
> regarding resources management (memory).
>
> I'd even rephrase the requirements above this way:
> "G and PG *share* common resources and we *do*not* want to know when
> this resources needs to be released (memory deallocated)"
>
> Possible solution is to use smart pointer (like boost::shared_ptr)
> idiom to track lifetime of shared resource and collect after
> last client disconnects.
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> Charter Member of OSGeo, http://osgeo.org
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From mateusz at loskot.net  Tue Aug 19 08:04:31 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue Aug 19 08:04:36 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>	<48AA0E7C.2070607@refractions.net>
	<48AA2CA9.3070904@loskot.net>
	<30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>
Message-ID: <48AAB6CF.90707@loskot.net>

Paul Ramsey wrote:
> I was thinking that the blunt-force solution would be to clone the
> Geometry when PreparedGeometry is constructed, rather than retaining a
> reference, so we an delete the whole kit-n-kaboodle when we're done
> with the PreparedGeometry.

Paul,

I agree it would solve the lack of RAII in current version.
However, personally I'd not be happy with that solution :-)
PreparedGeometry stuff is supposed to optimize [1] certain spatial 
operations. Making a deep copy of geometries, often huge and complex, is 
expansive. I presume copying op would countervail the potential gain of 
efficiency we want to benefit from prepared geometry concept.

I understand (and I agree) that better is the enemy of good, however
at the same time I believe that a makeshift is the enemy of good :-)
So, I can't resist the temptation of proposing and trying to improve GEOS.

Back to the reality, I understand we lack of manpower, but perhaps we 
could try to relax the requirements a little :-)
For example, why not to allow PreparedGeometry to outlive the Geometry 
but in safe way - PG is notified that Geometry has expired.
It should be easily achieved with help of two idioms:
1) shared resources
2) weak reference.

Talking of examples, the former is available as boost::shared_ptr and 
the latter boost::weak_ptr. Here is a good intro to these concepts [2]

I am trying to convince to use Boost and make it a new dependency for 
GEOS. I just use it as an example of very well-thought implementations 
of the concepts discussed above. Though, it's not a secret it would be 
easier to actually use Boost :-)

[1] 
http://lin-ear-th-inking.blogspot.com/2007/08/preparedgeometry-efficient-batch.html
[2] http://www.ddj.com/cpp/184402026

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Tue Aug 19 11:43:50 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Tue Aug 19 11:39:45 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>	<48AA0E7C.2070607@refractions.net>
	<48AA2CA9.3070904@loskot.net>
	<30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>
Message-ID: <48AAEA36.4020704@refractions.net>

I don't really feel competent to comment on Mateusz' suggestion of smart 
pointers.  But in the near term, isn't the simplest solution just to 
declare that managing the Geometry associated with the PreparedGeometry 
is the responsibility of the client?  In this case the client is 
PostGIS, and I think I'm right in saying that there is an obvious, 
correct place to delete the created geometry - i.e. immediately after 
the PrepGeom is deleted.

This avoids copying, and doesn't require any fancy pointer stuff.

Or am I missing something?


Paul Ramsey wrote:
> I was thinking that the blunt-force solution would be to clone the
> Geometry when PreparedGeometry is constructed, rather than retaining a
> reference, so we an delete the whole kit-n-kaboodle when we're done
> with the PreparedGeometry.
>
> P.
>
> On Mon, Aug 18, 2008 at 7:15 PM, Mateusz Loskot <mateusz@loskot.net> wrote:
>   
>> Martin Davis wrote:
>>     
>>> That makes sense to me.  In JTS-land, PreparedGeometry was intended to
>>> be a "decorator" for Geometry.  (Although this is really a moot point in
>>> Java, since GC handles all magically....)
>>>
>>> Under this pattern, the decorated geometry must be deleted after the PG
>>> is deleted, by the calling code.
>>>
>>> Next step is to try it and see!
>>>
>>> Oh, and yes, the Geometry needs to outlive the PG...
>>>       
>> If the requirement that Geometry (G) needs to outlive PG is strong,
>> then using raw pointers for linking G and PG objects is not safe
>> regarding resources management (memory).
>>
>> I'd even rephrase the requirements above this way:
>> "G and PG *share* common resources and we *do*not* want to know when
>> this resources needs to be released (memory deallocated)"
>>
>> Possible solution is to use smart pointer (like boost::shared_ptr)
>> idiom to track lifetime of shared resource and collect after
>> last client disconnects.
>>
>> Best regards,
>> --
>> Mateusz Loskot, http://mateusz.loskot.net
>> Charter Member of OSGeo, http://osgeo.org
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>     
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Tue Aug 19 11:53:37 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue Aug 19 11:53:43 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <48AAEA36.4020704@refractions.net>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>	<48AA0E7C.2070607@refractions.net>	<48AA2CA9.3070904@loskot.net>	<30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>
	<48AAEA36.4020704@refractions.net>
Message-ID: <48AAEC81.8060509@loskot.net>

Martin Davis wrote:
> I don't really feel competent to comment on Mateusz' suggestion of smart 
> pointers.  But in the near term, isn't the simplest solution just to 
> declare that managing the Geometry associated with the PreparedGeometry 
> is the responsibility of the client?  In this case the client is 
> PostGIS, and I think I'm right in saying that there is an obvious, 
> correct place to delete the created geometry - i.e. immediately after 
> the PrepGeom is deleted.
> 
> This avoids copying, and doesn't require any fancy pointer stuff.
> 
> Or am I missing something?

Martin,

I support this idea and AFAIU the problem it should work well.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From pramsey at cleverelephant.ca  Tue Aug 19 12:01:14 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue Aug 19 12:01:17 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <48AAEC81.8060509@loskot.net>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>
	<48AA0E7C.2070607@refractions.net> <48AA2CA9.3070904@loskot.net>
	<30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>
	<48AAEA36.4020704@refractions.net> <48AAEC81.8060509@loskot.net>
Message-ID: <30fe546d0808190901o3acdf03frf8457ad241e6c17a@mail.gmail.com>

This is where I was headed this morning until I had two children
dropped on me. There needs to be an accessor for baseGeom in the capi
so that PostGIS can actually manage the destruction of the Geometry.
BTW have a look at the _destroy functions in capi and tell me if it
would be better to run the factory destruction than what is there now
(simple delete).

P.

On Tue, Aug 19, 2008 at 8:53 AM, Mateusz Loskot <mateusz@loskot.net> wrote:
> Martin Davis wrote:
>>
>> I don't really feel competent to comment on Mateusz' suggestion of smart
>> pointers.  But in the near term, isn't the simplest solution just to declare
>> that managing the Geometry associated with the PreparedGeometry is the
>> responsibility of the client?  In this case the client is PostGIS, and I
>> think I'm right in saying that there is an obvious, correct place to delete
>> the created geometry - i.e. immediately after the PrepGeom is deleted.
>>
>> This avoids copying, and doesn't require any fancy pointer stuff.
>>
>> Or am I missing something?
>
> Martin,
>
> I support this idea and AFAIU the problem it should work well.
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> Charter Member of OSGeo, http://osgeo.org
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From mateusz at loskot.net  Tue Aug 19 12:35:05 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue Aug 19 12:35:10 2008
Subject: [geos-devel] Finding the Leak
In-Reply-To: <30fe546d0808190901o3acdf03frf8457ad241e6c17a@mail.gmail.com>
References: <30fe546d0808181653ka51f496me9a1439b5e501e8c@mail.gmail.com>	<48AA0E7C.2070607@refractions.net>
	<48AA2CA9.3070904@loskot.net>	<30fe546d0808182010p7e310db2x992b1fca72a2e27a@mail.gmail.com>	<48AAEA36.4020704@refractions.net>
	<48AAEC81.8060509@loskot.net>
	<30fe546d0808190901o3acdf03frf8457ad241e6c17a@mail.gmail.com>
Message-ID: <48AAF639.40703@loskot.net>

Paul Ramsey wrote:
> This is where I was headed this morning until I had two children 
> dropped on me. There needs to be an accessor for baseGeom in the capi
>  so that PostGIS can actually manage the destruction of the Geometry.
>  BTW have a look at the _destroy functions in capi and tell me if it 
> would be better to run the factory destruction than what is there now
>  (simple delete).

Paul,

AFAIU, purpose of keeping link to parent factory in Geometry object is
that it's used for "reflection" purposes, so users can query Geometry
object for factory properties (precision model, etc.) that were used to
construct that geometry.

If my understanding above is correct, then there is no semantical
difference between calling delete operator on pointer to Geometry object
and using GeometryFactory::destroyGeometry() to deallocate geometry.

The situation would be different if GeometryFactory manages list of
geometries it created, but this is not the case here.

However, considering problems while crossing boundaries of DLL binaries
under Windows, I'd use deallocators provided by factory classes.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From warmerdam at pobox.com  Fri Aug 22 13:10:44 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Aug 22 13:11:13 2008
Subject: [geos-devel] Default Component Assignment in GEOS Trac
Message-ID: <48AEF314.7020905@pobox.com>

Folks,

I observe that tickets created for trac are not by default being assigned
to anyone with the exception of the Unit Tests which Mateusz has taken
responsibility for.

I would like to change the configuration to assign tickets not otherwise
owned to geos-devel@lists.osgeo.org by default.  That way someone will find
out right away about new tickets while now they can sit there silently ignored
without anyone being notified.

Any objections?

Note: it would be even better for individuals to take responsibilities for
particular components - this is more a stopgap.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From Charles.Thibert at ingres.com  Fri Aug 22 13:45:27 2008
From: Charles.Thibert at ingres.com (Charles Thibert)
Date: Fri Aug 22 13:46:30 2008
Subject: [geos-devel] CAPI Thread Safety
Message-ID: <1219427127.3422.45.camel@localhost.localdomain>

Hello,

Little introduction first.  I'm working for Ingres with Andrew Ross on
the new Ingres geospatial extensions.  Ingres is planning to re-use the
GEOS library through the CAPI.  I've been looking over it to 1)
familiarize myself with the code and 2) to identify possible thread
safety issues.

There are two things that jump out at me.  1) The error/notification
handlers are definitely not thread safe unless each thread can use the
same handlers.  2) The geometryFactory worries me.  It seems like it may
be thread safe, such that it creates new objects only.  I'm looking for
some expert opinions on that.

I've tried to search the archives of the mailing list but the .gz files
don't seem to work for me and the online browsing isn't search-able, so
forgive me if this questions been asked before... Are there any current
plans/work being done to make the CAPI more thread safe?

Thanks,
Chuck Thibert

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080822/e79bc553/attachment.html
From mateusz at loskot.net  Fri Aug 22 14:18:39 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug 22 14:18:44 2008
Subject: [geos-devel] Default Component Assignment in GEOS Trac
In-Reply-To: <48AEF314.7020905@pobox.com>
References: <48AEF314.7020905@pobox.com>
Message-ID: <48AF02FF.8030809@loskot.net>

Frank Warmerdam wrote:
> Folks,
> 
> I observe that tickets created for trac are not by default being assigned
> to anyone with the exception of the Unit Tests which Mateusz has taken
> responsibility for.
> 
> I would like to change the configuration to assign tickets not otherwise
> owned to geos-devel@lists.osgeo.org by default.  That way someone will find
> out right away about new tickets while now they can sit there silently 
> ignored without anyone being notified.
> 
> Any objections?

Frank,

Good point and no objections from me.

> Note: it would be even better for individuals to take responsibilities for
> particular components - this is more a stopgap.

I've assigned myself additionally to Build/Install and Documentation.
I think I'd not mind to get all Core stuff assigned to me, but GEOS core 
is vast and I am not able to cover all of its components.
So, I'd vote for redirecting Core stuff to geos-devel and then we can 
decide on the list who will take care of particular reports.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mateusz at loskot.net  Fri Aug 22 14:36:08 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug 22 14:36:14 2008
Subject: [geos-devel] CAPI Thread Safety
In-Reply-To: <1219427127.3422.45.camel@localhost.localdomain>
References: <1219427127.3422.45.camel@localhost.localdomain>
Message-ID: <48AF0718.7000208@loskot.net>

Charles Thibert wrote:
> Hello,
> 
> Little introduction first.  I'm working for Ingres with Andrew Ross
> on the new Ingres geospatial extensions.

Charles,

Welcome!

> Ingres is planning to re-use the GEOS library through the CAPI.

Great to hear.

> I've been looking over it to 1) familiarize myself with the code and
> 2) to identify possible thread safety issues.

That's quite a challenge, indeed.
I've not analysed thread-safety of GEOS myself (yet).

> There are two things that jump out at me.  1) The error/notification 
> handlers are definitely not thread safe unless each thread can use
> the same handlers.

Yes, your assumption is probably correct.

> 2) The geometryFactory worries me.  It seems like
> it may be thread safe, such that it creates new objects only.  I'm
> looking for some expert opinions on that.

Yes, the main responsibility of the factory is to create new geometry 
objects by number of named constructors provided.
Second, user can query factory object for details of precision model 
associated with it.
Third, GeometryFactory::destroyGeometry() helps to deallocate geometry 
object where it was constructed, it is important on Windows. See last 
Q&A here http://trac.osgeo.org/gdal/wiki/FAQMiscellaneous

> I've tried to search the archives of the mailing list but the .gz
> files don't seem to work for me and the online browsing isn't
> search-able, so forgive me if this questions been asked before...


You can input this line below to the Google box to get some discussions:

+thread +safety site:http://lists.osgeo.org/pipermail/geos-devel/

> Are there any current plans/work being done to make the CAPI more thread
> safe?

I am not aware of any plans. However, if there are some plans I'd expect 
them covered in appropriate RFC document (example [1]) proposing 
necessary chanages.

[1] http://trac.osgeo.org/gdal/wiki/rfc16_ogr_reentrancy

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mchapman at fortifieddatacom.com  Fri Aug 22 15:21:19 2008
From: mchapman at fortifieddatacom.com (Martin Chapman)
Date: Fri Aug 22 15:31:56 2008
Subject: [geos-devel] CAPI Thread Safety
In-Reply-To: <1219427127.3422.45.camel@localhost.localdomain>
References: <1219427127.3422.45.camel@localhost.localdomain>
Message-ID: <001e01c9048c$419dc140$c4d943c0$@com>

Chuck,

 

You should make your own thread-safe wrapper class(es) for using GEOS in my
opinion.  That's what I do and it works great.  If you need high performance
on a server then create a thread pool manager with a semaphore around a pool
of your wrapper classes.

 

Martin

 

From: geos-devel-bounces@lists.osgeo.org
[mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Charles Thibert
Sent: Friday, August 22, 2008 11:45 AM
To: geos-devel@lists.osgeo.org
Subject: [geos-devel] CAPI Thread Safety

 

Hello,

Little introduction first.  I'm working for Ingres with Andrew Ross on
the new Ingres geospatial extensions.  Ingres is planning to re-use the
GEOS library through the CAPI.  I've been looking over it to 1)
familiarize myself with the code and 2) to identify possible thread
safety issues.

There are two things that jump out at me.  1) The error/notification
handlers are definitely not thread safe unless each thread can use the
same handlers.  2) The geometryFactory worries me.  It seems like it may
be thread safe, such that it creates new objects only.  I'm looking for
some expert opinions on that.

I've tried to search the archives of the mailing list but the .gz files
don't seem to work for me and the online browsing isn't search-able, so
forgive me if this questions been asked before... Are there any current
plans/work being done to make the CAPI more thread safe?

Thanks,
Chuck Thibert

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080822/73620927/attachment.html
From geos-trac at osgeo.org  Fri Aug 22 17:17:58 2008
From: geos-trac at osgeo.org (GEOS)
Date: Fri Aug 22 17:17:59 2008
Subject: [geos-devel] Re: [GEOS] #200: test ticket
In-Reply-To: <049.f93f54aa11ff955d7c6199df246dd5ba@osgeo.org>
References: <049.f93f54aa11ff955d7c6199df246dd5ba@osgeo.org>
Message-ID: <058.43565ec26888fc5b280f645715a64357@osgeo.org>

#200: test ticket
------------------------+---------------------------------------------------
 Reporter:  warmerdam   |        Owner:  geos-devel@lists.osgeo.org
     Type:  task        |       Status:  new                       
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:                            
 Severity:  Unassigned  |   Resolution:                            
 Keywords:              |  
------------------------+---------------------------------------------------
Comment (by warmerdam):

 This time just might work.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/200#comment:6>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Aug 22 17:18:59 2008
From: geos-trac at osgeo.org (GEOS)
Date: Fri Aug 22 17:19:01 2008
Subject: [geos-devel] Re: [GEOS] #200: test ticket
In-Reply-To: <049.f93f54aa11ff955d7c6199df246dd5ba@osgeo.org>
References: <049.f93f54aa11ff955d7c6199df246dd5ba@osgeo.org>
Message-ID: <058.1f320feec8e5f332809940f8d264940a@osgeo.org>

#200: test ticket
------------------------+---------------------------------------------------
 Reporter:  warmerdam   |        Owner:  geos-devel@lists.osgeo.org
     Type:  task        |       Status:  closed                    
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:                            
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by warmerdam):

  * status:  new => closed
  * resolution:  => fixed

Comment:

 Success! Closing.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/200#comment:7>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From pramsey at cleverelephant.ca  Sat Aug 23 23:50:22 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sat Aug 23 23:50:25 2008
Subject: [geos-devel] Leak Update
Message-ID: <30fe546d0808232050s5b59262cgc101f4994b604ff0@mail.gmail.com>

FYI,

Due to no effort on my part, it looks like the leak is getting
smaller. The changes that Mateusz committed recently reduced it from a
fire hose to a garden hose.  It's still pretty big, but it's better.
Annoyingly, nothing I do on the postgis side causes it to get smaller
(grr!).  I'm off to the beach for a while, so I won't be looking at my
side again until September. Hopefully the traces I posted earlier can
be helpful to people who want to squash some remaining dribbles.

Paul
From geos-trac at osgeo.org  Wed Aug 27 11:02:13 2008
From: geos-trac at osgeo.org (GEOS)
Date: Wed Aug 27 11:02:15 2008
Subject: [geos-devel] [GEOS] #201: Current locale considered when converting
 a geometry to WKT
Message-ID: <049.628845aa0c786155daa967914aa5249f@osgeo.org>

#201: Current locale considered when converting a geometry to WKT
------------------------+---------------------------------------------------
 Reporter:  luizvital   |       Owner:  geos-devel@lists.osgeo.org
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:                            
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 This was noticed when using geodjango ctypes wraper in python.
 A more detailed description here http://code.djangoproject.com/ticket/8563

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/201>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Aug 27 11:37:35 2008
From: geos-trac at osgeo.org (GEOS)
Date: Wed Aug 27 11:37:37 2008
Subject: [geos-devel] Re: [GEOS] #201: Current locale considered when
 converting a geometry to WKT
In-Reply-To: <049.628845aa0c786155daa967914aa5249f@osgeo.org>
References: <049.628845aa0c786155daa967914aa5249f@osgeo.org>
Message-ID: <058.494d6ceaea5692a52ac6723ff08851a0@osgeo.org>

#201: Current locale considered when converting a geometry to WKT
------------------------+---------------------------------------------------
 Reporter:  luizvital   |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect      |       Status:  new                       
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:                            
 Severity:  Unassigned  |   Resolution:                            
 Keywords:              |  
------------------------+---------------------------------------------------
Comment (by jbronn):

 More specifically, !GeoDjango's `GEOSGeometry` object is essentially just
 returning the output of the GEOS C API method  `GEOSGeomToWKT`
 [source:/trunk/capi/geos_c.cpp@2144#L528 (link)].

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/201#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From sgillies at frii.com  Thu Aug 28 12:43:39 2008
From: sgillies at frii.com (sgillies@frii.com)
Date: Thu Aug 28 12:43:41 2008
Subject: [geos-devel] Delocalizing the WKT writer?
Message-ID: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>

Can one of the C++ gurus explain why delocalizing the writer (to fix bug
201) isn't as simple as bracing the guts of this function with calls to
setlocale()?

capi/geos_c.cpp:

char*
GEOSWKTWriter_write(WKTWriter *writer, const Geometry *geom)
{
    try
	{
                // switch to C locale
                std::setlocale(LC_ALL, "C");
		std::string s = writer->write(geom);

		char *result;
		result = (char*) std::malloc( s.length() + 1);
		std::strcpy(result, s.c_str() );
                // switch back to native locale
                std::setlocale(LC_ALL, "");
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Sure, it would be nice to work this down into the C++ code, but the
WKTWriter class is a nightmare.

Sean

From chodgson at refractions.net  Thu Aug 28 12:49:19 2008
From: chodgson at refractions.net (Chris Hodgson)
Date: Thu Aug 28 12:48:53 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
Message-ID: <48B6D70F.80703@refractions.net>

I'm no locale expert, but it looks to me like that is the code that IS 
de-localizing, setting to using the C locale instead of whatever the 
locale is set to in the system? Are there other setlocale calls in the 
writer code itself that undermine this?

Chris

sgillies@frii.com wrote:
> Can one of the C++ gurus explain why delocalizing the writer (to fix bug
> 201) isn't as simple as bracing the guts of this function with calls to
> setlocale()?
>
> capi/geos_c.cpp:
>
> char*
> GEOSWKTWriter_write(WKTWriter *writer, const Geometry *geom)
> {
>     try
> 	{
>                 // switch to C locale
>                 std::setlocale(LC_ALL, "C");
> 		std::string s = writer->write(geom);
>
> 		char *result;
> 		result = (char*) std::malloc( s.length() + 1);
> 		std::strcpy(result, s.c_str() );
>                 // switch back to native locale
>                 std::setlocale(LC_ALL, "");
> 		return result;
> 	}
> 	catch (const std::exception &e)
> 	{
> 		ERROR_MESSAGE("%s", e.what());
> 		return NULL;
> 	}
>
> 	catch (...)
> 	{
> 		ERROR_MESSAGE("Unknown exception thrown");
> 		return NULL;
> 	}
> }
>
> Sure, it would be nice to work this down into the C++ code, but the
> WKTWriter class is a nightmare.
>
> Sean
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>   

From warmerdam at pobox.com  Thu Aug 28 12:57:32 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu Aug 28 12:57:34 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
Message-ID: <931f8ea90808280957p46d85837q6b5377d85b29ee39@mail.gmail.com>

On Thu, Aug 28, 2008 at 12:43 PM,  <sgillies@frii.com> wrote:
> Can one of the C++ gurus explain why delocalizing the writer (to fix bug
> 201) isn't as simple as bracing the guts of this function with calls to
> setlocale()?

>                // switch to C locale
>                std::setlocale(LC_ALL, "C");
...
>                // switch back to native locale
>                std::setlocale(LC_ALL, "");

Sean,

This would seem ok to me, except that you need to ensure
you restore the original locale setting, not just blindly set "".
In my CPLLocaleC class from GDAL I do something like this
to reset, and then restore the locale.

    pszOldLocale = strdup(setlocale(LC_NUMERIC,NULL));
    if( setlocale(LC_NUMERIC,"C") == NULL )
        pszOldLocale = NULL;

...

    if( pszOldLocale != NULL )
    {
        setlocale( LC_NUMERIC, pszOldLocale );
        CPLFree( pszOldLocale );
    }

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush | Geospatial Programmer for Rent
From sgillies at frii.com  Thu Aug 28 13:00:09 2008
From: sgillies at frii.com (sgillies@frii.com)
Date: Thu Aug 28 13:00:11 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B6D70F.80703@refractions.net>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
	<48B6D70F.80703@refractions.net>
Message-ID: <65463.76.25.18.202.1219942809.squirrel@users.frii.com>

Chris,

The calls below were added for illustration, they are not in the source
trunk. Sorry about the confusion. I haven't found any other calls to
setlocale.

Sean

> I'm no locale expert, but it looks to me like that is the code that IS
> de-localizing, setting to using the C locale instead of whatever the
> locale is set to in the system? Are there other setlocale calls in the
> writer code itself that undermine this?
>
> Chris
>
> sgillies@frii.com wrote:
>> Can one of the C++ gurus explain why delocalizing the writer (to fix bug
>> 201) isn't as simple as bracing the guts of this function with calls to
>> setlocale()?
>>
>> capi/geos_c.cpp:
>>
>> char*
>> GEOSWKTWriter_write(WKTWriter *writer, const Geometry *geom)
>> {
>>     try
>> 	{
>>                 // switch to C locale
>>                 std::setlocale(LC_ALL, "C");
>> 		std::string s = writer->write(geom);
>>
>> 		char *result;
>> 		result = (char*) std::malloc( s.length() + 1);
>> 		std::strcpy(result, s.c_str() );
>>                 // switch back to native locale
>>                 std::setlocale(LC_ALL, "");
>> 		return result;
>> 	}
>> 	catch (const std::exception &e)
>> 	{
>> 		ERROR_MESSAGE("%s", e.what());
>> 		return NULL;
>> 	}
>>
>> 	catch (...)
>> 	{
>> 		ERROR_MESSAGE("Unknown exception thrown");
>> 		return NULL;
>> 	}
>> }
>>
>> Sure, it would be nice to work this down into the C++ code, but the
>> WKTWriter class is a nightmare.
>>
>> Sean
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>


From sgillies at frii.com  Thu Aug 28 13:08:06 2008
From: sgillies at frii.com (sgillies@frii.com)
Date: Thu Aug 28 13:08:07 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <931f8ea90808280957p46d85837q6b5377d85b29ee39@mail.gmail.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
	<931f8ea90808280957p46d85837q6b5377d85b29ee39@mail.gmail.com>
Message-ID: <8158.76.25.18.202.1219943286.squirrel@users.frii.com>

> On Thu, Aug 28, 2008 at 12:43 PM,  <sgillies@frii.com> wrote:
>> Can one of the C++ gurus explain why delocalizing the writer (to fix bug
>> 201) isn't as simple as bracing the guts of this function with calls to
>> setlocale()?
>
>>                // switch to C locale
>>                std::setlocale(LC_ALL, "C");
> ...
>>                // switch back to native locale
>>                std::setlocale(LC_ALL, "");
>
> Sean,
>
> This would seem ok to me, except that you need to ensure
> you restore the original locale setting, not just blindly set "".
> In my CPLLocaleC class from GDAL I do something like this
> to reset, and then restore the locale.
>
>     pszOldLocale = strdup(setlocale(LC_NUMERIC,NULL));
>     if( setlocale(LC_NUMERIC,"C") == NULL )
>         pszOldLocale = NULL;
>
> ...
>
>     if( pszOldLocale != NULL )
>     {
>         setlocale( LC_NUMERIC, pszOldLocale );
>         CPLFree( pszOldLocale );
>     }
>
> Best regards,

Thanks, Frank. Indeed, the writer could be used in the context of another
app that manipulates the locale.

Sean


From chodgson at refractions.net  Thu Aug 28 14:08:04 2008
From: chodgson at refractions.net (Chris Hodgson)
Date: Thu Aug 28 14:07:39 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <65463.76.25.18.202.1219942809.squirrel@users.frii.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>
	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>
Message-ID: <48B6E984.5020303@refractions.net>

Oh, now I understand - by "bracing the guts" you meant wrapping it with 
those calls - I thought you meant commenting out those calls. With 
Frank's suggested changes I expect your solution will do the job.

Chris

sgillies@frii.com wrote:
> Chris,
>
> The calls below were added for illustration, they are not in the source
> trunk. Sorry about the confusion. I haven't found any other calls to
> setlocale.
>
> Sean
>
>   
>> I'm no locale expert, but it looks to me like that is the code that IS
>> de-localizing, setting to using the C locale instead of whatever the
>> locale is set to in the system? Are there other setlocale calls in the
>> writer code itself that undermine this?
>>
>> Chris
>>
>> sgillies@frii.com wrote:
>>     
>>> Can one of the C++ gurus explain why delocalizing the writer (to fix bug
>>> 201) isn't as simple as bracing the guts of this function with calls to
>>> setlocale()?
>>>
>>> capi/geos_c.cpp:
>>>
>>> char*
>>> GEOSWKTWriter_write(WKTWriter *writer, const Geometry *geom)
>>> {
>>>     try
>>> 	{
>>>                 // switch to C locale
>>>                 std::setlocale(LC_ALL, "C");
>>> 		std::string s = writer->write(geom);
>>>
>>> 		char *result;
>>> 		result = (char*) std::malloc( s.length() + 1);
>>> 		std::strcpy(result, s.c_str() );
>>>                 // switch back to native locale
>>>                 std::setlocale(LC_ALL, "");
>>> 		return result;
>>> 	}
>>> 	catch (const std::exception &e)
>>> 	{
>>> 		ERROR_MESSAGE("%s", e.what());
>>> 		return NULL;
>>> 	}
>>>
>>> 	catch (...)
>>> 	{
>>> 		ERROR_MESSAGE("Unknown exception thrown");
>>> 		return NULL;
>>> 	}
>>> }
>>>
>>> Sure, it would be nice to work this down into the C++ code, but the
>>> WKTWriter class is a nightmare.
>>>
>>> Sean
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>       
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>     
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>   

From sgillies at frii.com  Thu Aug 28 15:27:00 2008
From: sgillies at frii.com (Sean Gillies)
Date: Thu Aug 28 15:25:30 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B6E984.5020303@refractions.net>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>
	<48B6E984.5020303@refractions.net>
Message-ID: <48B6FC04.9010107@frii.com>

Yep, works. Any objections to the changes?

http://trac.osgeo.org/geos/changeset/2172

Would anyone like to see me use a macro instead?

Sean

Chris Hodgson wrote:
> Oh, now I understand - by "bracing the guts" you meant wrapping it with
> those calls - I thought you meant commenting out those calls. With
> Frank's suggested changes I expect your solution will do the job.
> 
> Chris
> 
> sgillies@frii.com wrote:
>> Chris,
>>
>> The calls below were added for illustration, they are not in the source
>> trunk. Sorry about the confusion. I haven't found any other calls to
>> setlocale.
>>
>> Sean
>>
>>  
>>> I'm no locale expert, but it looks to me like that is the code that IS
>>> de-localizing, setting to using the C locale instead of whatever the
>>> locale is set to in the system? Are there other setlocale calls in the
>>> writer code itself that undermine this?
>>>
>>> Chris
>>>
>>> sgillies@frii.com wrote:
>>>    
>>>> Can one of the C++ gurus explain why delocalizing the writer (to fix
>>>> bug
>>>> 201) isn't as simple as bracing the guts of this function with calls to
>>>> setlocale()?
>>>>
>>>> capi/geos_c.cpp:
>>>>
>>>> char*
>>>> GEOSWKTWriter_write(WKTWriter *writer, const Geometry *geom)
>>>> {
>>>>     try
>>>>     {
>>>>                 // switch to C locale
>>>>                 std::setlocale(LC_ALL, "C");
>>>>         std::string s = writer->write(geom);
>>>>
>>>>         char *result;
>>>>         result = (char*) std::malloc( s.length() + 1);
>>>>         std::strcpy(result, s.c_str() );
>>>>                 // switch back to native locale
>>>>                 std::setlocale(LC_ALL, "");
>>>>         return result;
>>>>     }
>>>>     catch (const std::exception &e)
>>>>     {
>>>>         ERROR_MESSAGE("%s", e.what());
>>>>         return NULL;
>>>>     }
>>>>
>>>>     catch (...)
>>>>     {
>>>>         ERROR_MESSAGE("Unknown exception thrown");
>>>>         return NULL;
>>>>     }
>>>> }
>>>>
>>>> Sure, it would be nice to work this down into the C++ code, but the
>>>> WKTWriter class is a nightmare.
>>>>
>>>> Sean
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>       
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>     
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>   
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
> 

From warmerdam at pobox.com  Thu Aug 28 15:38:09 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu Aug 28 15:38:39 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B6FC04.9010107@frii.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
	<48B6D70F.80703@refractions.net>
	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>
	<48B6E984.5020303@refractions.net> <48B6FC04.9010107@frii.com>
Message-ID: <48B6FEA1.3010206@pobox.com>

Sean Gillies wrote:
> Yep, works. Any objections to the changes?
> 
> http://trac.osgeo.org/geos/changeset/2172

Sean,

It looks ok to me.

> Would anyone like to see me use a macro instead?

If we were to propagate this mechanism further in GEOS I think it
should be wrapped up as a class or something.  For this limited use
I suppose it is ok.

There is an example C++ class (objects of which can be instantiated
to establish a scope of "C" locale-ness) in gdal/port/cpl_conv.h
(CPLLocaleC).  The nice thing is that it cleans up the locale setting
cleanly when the object falls out of scope.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From jef at norbit.de  Thu Aug 28 16:15:52 2008
From: jef at norbit.de (=?iso-8859-1?B?SvxyZ2VuIEUu?= Fischer)
Date: Thu Aug 28 16:15:59 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B6FEA1.3010206@pobox.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>
	<48B6D70F.80703@refractions.net>
	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>
	<48B6E984.5020303@refractions.net> <48B6FC04.9010107@frii.com>
	<48B6FEA1.3010206@pobox.com>
Message-ID: <20080828201552.GA10094@norbit.de>

Hi,

On Thu, 28. Aug 2008 at 15:38:09 -0400, Frank Warmerdam wrote:
> There is an example C++ class (objects of which can be instantiated
> to establish a scope of "C" locale-ness) in gdal/port/cpl_conv.h
> (CPLLocaleC).  The nice thing is that it cleans up the locale setting
> cleanly when the object falls out of scope.

I was about to say, that the change doesn't restore the locale in case
there is an exception.  I suppose that class would also address that.


J?rgen

-- 
J?rgen E. Fischer         norBIT GmbH               Tel. +49-4931-918175-0
Dipl.-Inf. (FH)           Rheinstra?e 13            Fax. +49-4931-918175-50
Software Engineer         D-26506 Norden               http://www.norbit.de

-- 
norBIT Gesellschaft fuer Unternehmensberatung und Informationssysteme mbH
Rheinstrasse 13, 26506 Norden
GF: Jelto Buurman, HR: Amtsgericht Emden, HRB 5502

From mateusz at loskot.net  Thu Aug 28 16:29:39 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Thu Aug 28 16:29:57 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B6FC04.9010107@frii.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>	<48B6E984.5020303@refractions.net>
	<48B6FC04.9010107@frii.com>
Message-ID: <48B70AB3.60601@loskot.net>

Sean Gillies wrote:
> Yep, works. Any objections to the changes?
> 
> http://trac.osgeo.org/geos/changeset/2172

Sean,

Generally, it solves the problem of lack of locale independence of GEOS
but this code is far from exception safety.

Frank's CPLLocaleC can solve it but, I am personally allergic to C-style 
locale management.

In C library, there is only one global locale object.
In C++, locale management makes it possible to change locales for 
particular scope/operation only, without influencing any external parts 
of software.
Using setlocale from C library switches C++ library to C-style locale 
management.

I agree with you that implementation WKTReader/Writer is not very clean,
and it mixes use of C and C++ I/O, what also makes a mess regarding 
locale management.

I'm going to try to review and reafactor WKT classes to base on C++ I/O 
then switching locales for particular instance of WKT writing (ie. in 
GEOSGeomToWKT) will be as easy as:


Geometry* g =
...

{
    std::ostringstring os;
    std::locale loc("C"); // global locale untouched
    s.imbue(loc);

    char* wkt = g->toString(os); //

    return wkt;
}

> Would anyone like to see me use a macro instead?

I would not like to see macros :-)

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mateusz at loskot.net  Thu Aug 28 16:32:03 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Thu Aug 28 16:32:08 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B70AB3.60601@loskot.net>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>	<48B6E984.5020303@refractions.net>	<48B6FC04.9010107@frii.com>
	<48B70AB3.60601@loskot.net>
Message-ID: <48B70B43.30405@loskot.net>

Mateusz Loskot wrote:
> I'm going to try to review and reafactor WKT classes to base on C++ I/O 

I've forgot to add, that I'd suggest to leave current solution, possibly 
fixed with CPLLocaleC class, until I bring better solution into 
WKTReader/WKTWriter.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From sgillies at frii.com  Thu Aug 28 16:38:05 2008
From: sgillies at frii.com (Sean Gillies)
Date: Thu Aug 28 16:36:37 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B70B43.30405@loskot.net>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>	<48B6E984.5020303@refractions.net>	<48B6FC04.9010107@frii.com>	<48B70AB3.60601@loskot.net>
	<48B70B43.30405@loskot.net>
Message-ID: <48B70CAD.6030204@frii.com>

Mateusz Loskot wrote:
> Mateusz Loskot wrote:
>> I'm going to try to review and reafactor WKT classes to base on C++ I/O 
> 
> I've forgot to add, that I'd suggest to leave current solution, possibly
> fixed with CPLLocaleC class, until I bring better solution into
> WKTReader/WKTWriter.
> 
> Best regards,

Okay. I'll learn what I can from CPLLocaleC.

Sean
From mateusz at loskot.net  Thu Aug 28 17:08:31 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Thu Aug 28 17:08:36 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B70CAD.6030204@frii.com>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>	<48B6E984.5020303@refractions.net>	<48B6FC04.9010107@frii.com>	<48B70AB3.60601@loskot.net>	<48B70B43.30405@loskot.net>
	<48B70CAD.6030204@frii.com>
Message-ID: <48B713CF.7030001@loskot.net>

Sean Gillies wrote:
> Mateusz Loskot wrote:
>> Mateusz Loskot wrote:
>>> I'm going to try to review and reafactor WKT classes to base on C++ I/O 
>> I've forgot to add, that I'd suggest to leave current solution, possibly
>> fixed with CPLLocaleC class, until I bring better solution into
>> WKTReader/WKTWriter.
>>
>> Best regards,
> 
> Okay. I'll learn what I can from CPLLocaleC.

Sean, thanks for fixing.
It's simple to use CPLLocaleC class

void foo() // function that is assumed to depend on C locale
{
    CPLLocaleC loc; // set "C" locale

    // ... some operations that should be locale indenendent


} // loc destructor resets locale back to original

-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From sgillies at frii.com  Thu Aug 28 18:24:52 2008
From: sgillies at frii.com (Sean Gillies)
Date: Thu Aug 28 18:23:19 2008
Subject: [geos-devel] Delocalizing the WKT writer?
In-Reply-To: <48B713CF.7030001@loskot.net>
References: <65302.76.25.18.202.1219941819.squirrel@users.frii.com>	<48B6D70F.80703@refractions.net>	<65463.76.25.18.202.1219942809.squirrel@users.frii.com>	<48B6E984.5020303@refractions.net>	<48B6FC04.9010107@frii.com>	<48B70AB3.60601@loskot.net>	<48B70B43.30405@loskot.net>	<48B70CAD.6030204@frii.com>
	<48B713CF.7030001@loskot.net>
Message-ID: <48B725B4.9060102@frii.com>

Mateusz Loskot wrote:
> Sean Gillies wrote:
>> Mateusz Loskot wrote:
>>> Mateusz Loskot wrote:
>>>> I'm going to try to review and reafactor WKT classes to base on C++ I/O 
>>> I've forgot to add, that I'd suggest to leave current solution, possibly
>>> fixed with CPLLocaleC class, until I bring better solution into
>>> WKTReader/WKTWriter.
>>>
>>> Best regards,
>>
>> Okay. I'll learn what I can from CPLLocaleC.
> 
> Sean, thanks for fixing.
> It's simple to use CPLLocaleC class
> 
> void foo() // function that is assumed to depend on C locale
> {
>    CPLLocaleC loc; // set "C" locale
> 
>    // ... some operations that should be locale indenendent
> 
> 
> } // loc destructor resets locale back to original
> 

Thanks, Mateusz. Here's my new and improved solution:

http://trac.osgeo.org/geos/changeset/2174

Sean
From geos-trac at osgeo.org  Thu Aug 28 20:11:13 2008
From: geos-trac at osgeo.org (GEOS)
Date: Thu Aug 28 20:11:15 2008
Subject: [geos-devel] [GEOS] #202: Undefined behavior in Coordinate::hashCode
Message-ID: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>

#202: Undefined behavior in Coordinate::hashCode
-------------------------+--------------------------------------------------
 Reporter:  mloskot      |       Owner:  geos-devel@lists.osgeo.org
     Type:  defect       |      Status:  new                       
 Priority:  major        |   Milestone:                            
Component:  Core         |     Version:  svn-trunk                 
 Severity:  Significant  |    Keywords:  coordinate hash double    
-------------------------+--------------------------------------------------
 If ./configure fails to detect availability of ''64-bit integer'', it sets
 ''int64'' typedef to ''long int'' (in file platform.h).

 In this case, when in64 is 32-bit wide, ''undefined behavior'' occurs in
 Coordiante::hashDouble() function:

 {{{
 unsigned int Coordinate::hashCode(double d)
 {
    int64 f = (int64)(d);
    return (int)(f^(f>>32)); // <--- UB
 }
 }}}

 According to the standards C (section 6.5.7/3) and C++ (section 5.8/1):

  ''The behavior is unde?ned if the right operand is negative, or greater
 than or equal to the length in bits of the promoted left operand.''

 This error occur in '''f>>32''', when ''sizeof(f) == 32''.

 Simple but not ideal fix could be:

 {{{
 #include <cstring> // std::memcpy

 int Coordinate::hashDouble(double d)
 {
    unsigned int arr[2] = { 0 };
    std::memcpy(arr, &x, sizeof(double));
    return (arr[0] ^ (((arr[1] >> 16) & 0x000000FF)
            | ((arr[1] >> 8) & 0x0000FF00)
            | ((arr[1] << 8) & 0x00FF0000)
            | ((arr[1] << 16) & 0xFF000000)));
 }
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/202>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From ben at gls.co.za  Fri Aug 29 03:34:51 2008
From: ben at gls.co.za (Ben Harper)
Date: Fri Aug 29 03:36:16 2008
Subject: [geos-devel] Ticket #202 (double hash)
Message-ID: <27BA4145191C1849903386A90FE16D650C446AEA@XSERVER.gls.co.za>

Apologies for sending this to the entire list, but I couldn't figure out how to comment on the ticket alone.
I created an OSGeo user account, and logged in to trac, but still no GUI available.

Anyway, concerning an I32 hash on a double, I think the easiest naive solution
that does not have terrible performance concerns is:

unsigned int HashDouble( double d )
{
 unsigned int* i = (unsigned int*) &d;
 return i[0] ^ i[1];
}

Ben
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080829/0c48014d/attachment.html
From mateusz at loskot.net  Fri Aug 29 06:32:49 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug 29 06:32:54 2008
Subject: [geos-devel] Ticket #202 (double hash)
In-Reply-To: <27BA4145191C1849903386A90FE16D650C446AEA@XSERVER.gls.co.za>
References: <27BA4145191C1849903386A90FE16D650C446AEA@XSERVER.gls.co.za>
Message-ID: <48B7D051.1060007@loskot.net>

Ben Harper wrote:
> Apologies for sending this to the entire list, but I couldn't figure
> out how to comment on the ticket alone. I created an OSGeo user
> account, and logged in to trac, but still no GUI available.

Ben,

This is strange. Perhaps you could report this problem to SAC
mailing list: http://lists.osgeo.org/mailman/listinfo/sac

> Anyway, concerning an I32 hash on a double, I think the easiest naive
> solution that does not have terrible performance concerns is:
> 
> unsigned int HashDouble( double d )
 > {
 >   unsigned int* i = (unsigned int*) &d;

This construction breaks strict aliasing rules,
so it's undefined behavior.

 >   return i[0] ^ i[1];
 > }

Yes, this is popular hack, however AFAIK it doesn't promise no 
duplication will occur.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From sgillies at frii.com  Fri Aug 29 11:04:50 2008
From: sgillies at frii.com (Sean Gillies)
Date: Fri Aug 29 11:03:17 2008
Subject: [geos-devel] Tabs versus spaces?
Message-ID: <48B81012.7040104@frii.com>

I'm finding a lot of tabs in the GEOS source -- is this our convention?

Sean
From mateusz at loskot.net  Fri Aug 29 11:42:41 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug 29 11:42:47 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <48B81012.7040104@frii.com>
References: <48B81012.7040104@frii.com>
Message-ID: <48B818F1.409@loskot.net>

Sean Gillies wrote:
> I'm finding a lot of tabs in the GEOS source -- is this our convention?

Sean,

AFAIR, Sandro preferred to use tabs. I've also found it inconvenient as 
I personally believe in spaces :-)

Perhaps, if others will agree, we can migrate GEOS sources to spaces.
Single big batch operation and commit should fix it.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From hobu.inc at gmail.com  Fri Aug 29 11:52:27 2008
From: hobu.inc at gmail.com (Howard Butler)
Date: Fri Aug 29 11:52:55 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <48B818F1.409@loskot.net>
References: <48B81012.7040104@frii.com> <48B818F1.409@loskot.net>
Message-ID: <B142C12F-368E-446B-B8B0-4133CFECBA0B@gmail.com>


On Aug 29, 2008, at 10:42 AM, Mateusz Loskot wrote:

> Sean Gillies wrote:
>> I'm finding a lot of tabs in the GEOS source -- is this our  
>> convention?
>
> Sean,
>
> AFAIR, Sandro preferred to use tabs. I've also found it inconvenient  
> as I personally believe in spaces :-)
>
> Perhaps, if others will agree, we can migrate GEOS sources to spaces.
> Single big batch operation and commit should fix it.

+10 :)

Howard

From cfis at savagexi.com  Fri Aug 29 12:03:21 2008
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Aug 29 12:03:27 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <48B81012.7040104@frii.com>
References: <48B81012.7040104@frii.com>
Message-ID: <48B81DC9.8070008@savagexi.com>

> I'm finding a lot of tabs in the GEOS source -- is this our convention?

Trying to start a religious war, eh?

+1 for spaces on my side.  And just to really stir things up, I'd go for 
an indentation of 2 spaces....

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20080829/9bb28a0e/smime.bin
From hobu.inc at gmail.com  Fri Aug 29 12:10:36 2008
From: hobu.inc at gmail.com (Howard Butler)
Date: Fri Aug 29 12:23:07 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <48B81DC9.8070008@savagexi.com>
References: <48B81012.7040104@frii.com> <48B81DC9.8070008@savagexi.com>
Message-ID: <249ED3E4-A4FF-4080-9C89-BE6B23866374@gmail.com>


On Aug 29, 2008, at 11:03 AM, Charlie Savage wrote:
> +1 for spaces on my side.  And just to really stir things up, I'd go  
> for an indentation of 2 spaces....

I think it is an OSGeo standard for all source code to be spaces with  
an indentation level of 4 spaces :)  We don't want to jeopardize our  
incubation or anything :P

Howard
From sgillies at frii.com  Fri Aug 29 12:26:43 2008
From: sgillies at frii.com (Sean Gillies)
Date: Fri Aug 29 12:25:09 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <B142C12F-368E-446B-B8B0-4133CFECBA0B@gmail.com>
References: <48B81012.7040104@frii.com> <48B818F1.409@loskot.net>
	<B142C12F-368E-446B-B8B0-4133CFECBA0B@gmail.com>
Message-ID: <48B82343.80801@frii.com>

Howard Butler wrote:
> 
> On Aug 29, 2008, at 10:42 AM, Mateusz Loskot wrote:
> 
>> Sean Gillies wrote:
>>> I'm finding a lot of tabs in the GEOS source -- is this our convention?
>>
>> Sean,
>>
>> AFAIR, Sandro preferred to use tabs. I've also found it inconvenient
>> as I personally believe in spaces :-)
>>
>> Perhaps, if others will agree, we can migrate GEOS sources to spaces.
>> Single big batch operation and commit should fix it.
> 
> +10 :)
> 
> Howard

No, 10 is too much. 4 would be fine.

Sean
From mateusz at loskot.net  Fri Aug 29 12:52:53 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Aug 29 12:52:59 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <249ED3E4-A4FF-4080-9C89-BE6B23866374@gmail.com>
References: <48B81012.7040104@frii.com> <48B81DC9.8070008@savagexi.com>
	<249ED3E4-A4FF-4080-9C89-BE6B23866374@gmail.com>
Message-ID: <48B82965.6010402@loskot.net>

Howard Butler wrote:
> 
> On Aug 29, 2008, at 11:03 AM, Charlie Savage wrote:
>> +1 for spaces on my side.  And just to really stir things up, I'd go 
>> for an indentation of 2 spaces....
> 
> I think it is an OSGeo standard for all source code to be spaces with an 
> indentation level of 4 spaces :)

Hobu,

+1 for 4 spaces.

Tell it to QGIS Team ;-)
Is this a written rule or you are kidding?

> We don't want to jeopardize our 
> incubation or anything :P

:-)


Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From geos-trac at osgeo.org  Fri Aug 29 16:08:11 2008
From: geos-trac at osgeo.org (GEOS)
Date: Fri Aug 29 16:08:13 2008
Subject: [geos-devel] Re: [GEOS] #202: Undefined behavior in
	Coordinate::hashCode
In-Reply-To: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
References: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
Message-ID: <056.d398917d16eff3f782cce50f9c61f4ae@osgeo.org>

#202: Undefined behavior in Coordinate::hashCode
------------------------------------+---------------------------------------
 Reporter:  mloskot                 |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect                  |       Status:  new                       
 Priority:  major                   |    Milestone:                            
Component:  Core                    |      Version:  svn-trunk                 
 Severity:  Significant             |   Resolution:                            
 Keywords:  coordinate hash double  |  
------------------------------------+---------------------------------------
Comment (by bmharper):

 Mateusz - you mentioned that this violates aliasing rules:

 unsigned int HashDouble( double d )
 {
  unsigned int* i = (unsigned int*) &d;
  return i[0] ^ i[1];
 }

 Can you explain further, or point me to the relevant C/++ docs?

 Thanks,
 Ben

 ps-- Your code references &x. Should this not be &d?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/202#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Aug 29 16:19:30 2008
From: geos-trac at osgeo.org (GEOS)
Date: Fri Aug 29 16:19:30 2008
Subject: [geos-devel] Re: [GEOS] #202: Undefined behavior in
	Coordinate::hashCode
In-Reply-To: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
References: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
Message-ID: <056.139f625d80ee8b3a2ad2b47fa1791dce@osgeo.org>

#202: Undefined behavior in Coordinate::hashCode
------------------------------------+---------------------------------------
 Reporter:  mloskot                 |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect                  |       Status:  new                       
 Priority:  major                   |    Milestone:                            
Component:  Core                    |      Version:  svn-trunk                 
 Severity:  Significant             |   Resolution:                            
 Keywords:  coordinate hash double  |  
------------------------------------+---------------------------------------
Old description:

> If ./configure fails to detect availability of ''64-bit integer'', it
> sets ''int64'' typedef to ''long int'' (in file platform.h).
>
> In this case, when in64 is 32-bit wide, ''undefined behavior'' occurs in
> Coordiante::hashDouble() function:
>
> {{{
> unsigned int Coordinate::hashCode(double d)
> {
>    int64 f = (int64)(d);
>    return (int)(f^(f>>32)); // <--- UB
> }
> }}}
>
> According to the standards C (section 6.5.7/3) and C++ (section 5.8/1):
>
>  ''The behavior is unde?ned if the right operand is negative, or greater
> than or equal to the length in bits of the promoted left operand.''
>
> This error occur in '''f>>32''', when ''sizeof(f) == 32''.
>
> Simple but not ideal fix could be:
>
> {{{
> #include <cstring> // std::memcpy
>
> int Coordinate::hashDouble(double d)
> {
>    unsigned int arr[2] = { 0 };
>    std::memcpy(arr, &x, sizeof(double));
>    return (arr[0] ^ (((arr[1] >> 16) & 0x000000FF)
>            | ((arr[1] >> 8) & 0x0000FF00)
>            | ((arr[1] << 8) & 0x00FF0000)
>            | ((arr[1] << 16) & 0xFF000000)));
> }
> }}}

New description:

 If ./configure fails to detect availability of ''64-bit integer'', it sets
 ''int64'' typedef to ''long int'' (in file platform.h).

 In this case, when in64 is 32-bit wide, ''undefined behavior'' occurs in
 Coordiante::hashDouble() function:

 {{{
 unsigned int Coordinate::hashCode(double d)
 {
    int64 f = (int64)(d);
    return (int)(f^(f>>32)); // <--- UB
 }
 }}}

 According to the standards C (section 6.5.7/3) and C++ (section 5.8/1):

  ''The behavior is unde?ned if the right operand is negative, or greater
 than or equal to the length in bits of the promoted left operand.''

 This error occur in '''f>>32''', when ''sizeof(f) == 32''.

 Simple but not ideal fix could be:

 {{{
 #include <cstring> // std::memcpy

 int Coordinate::hashDouble(double d)
 {
    unsigned int arr[2] = { 0 };
    std::memcpy(arr, &d, sizeof(double));
    return (arr[0] ^ (((arr[1] >> 16) & 0x000000FF)
            | ((arr[1] >> 8) & 0x0000FF00)
            | ((arr[1] << 8) & 0x00FF0000)
            | ((arr[1] << 16) & 0xFF000000)));
 }
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/202#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Aug 29 17:00:48 2008
From: geos-trac at osgeo.org (GEOS)
Date: Fri Aug 29 17:00:50 2008
Subject: [geos-devel] Re: [GEOS] #202: Undefined behavior in
	Coordinate::hashCode
In-Reply-To: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
References: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
Message-ID: <056.0e2d2a422f7418a0765b4a80aca6dbaa@osgeo.org>

#202: Undefined behavior in Coordinate::hashCode
------------------------------------+---------------------------------------
 Reporter:  mloskot                 |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect                  |       Status:  new                       
 Priority:  major                   |    Milestone:                            
Component:  Core                    |      Version:  svn-trunk                 
 Severity:  Significant             |   Resolution:                            
 Keywords:  coordinate hash double  |  
------------------------------------+---------------------------------------
Comment (by mloskot):

 Ben,

 The doc is C++ ISO/IEC 14882:2003 (6.10 lvalues and rvalues, paragraph
 15). Also, chapter 6.5 and paragraph 7 of ISO 9899:1999 defines aliasing
 rules for C language.

 Shortly, the rule is as simple as:

  ''Pointers of different types (say int* and float*) can?t point to the
 same object''

 It was very well explained in presentation by Andrey Bokhanko and
 Alexander Isaev from Intel Labs
 ([http://www.ice.gelato.org/oct07/pres_pdf/gelato_ICE07oct_aliasing_isaev_intel.pdf
 PDF])

 If standards are too heavy, then Wikipedia is handy, see
 [http://en.wikipedia.org/wiki/Type_punning#Floating-point_example Type
 punning] article and floating-point example based on your suggestion and
 commented this way:

  ''this kind of type punning is more dangerous than most''

 Just to give an example of how dangerous this kind of hack can be, here is
 [http://trac.osgeo.org/gdal/ticket/2521 my story of finding root of a very
 strange bug] in GDAL that took me hours :-)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/202#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Sat Aug 30 11:19:45 2008
From: geos-trac at osgeo.org (GEOS)
Date: Sat Aug 30 11:19:46 2008
Subject: [geos-devel] Re: [GEOS] #202: Undefined behavior in
	Coordinate::hashCode
In-Reply-To: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
References: <047.73fdea73f1e1c54c7376c787498f724a@osgeo.org>
Message-ID: <056.5c6180c597229db8561833c4de17aa93@osgeo.org>

#202: Undefined behavior in Coordinate::hashCode
------------------------------------+---------------------------------------
 Reporter:  mloskot                 |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect                  |       Status:  new                       
 Priority:  major                   |    Milestone:                            
Component:  Core                    |      Version:  svn-trunk                 
 Severity:  Significant             |   Resolution:                            
 Keywords:  coordinate hash double  |  
------------------------------------+---------------------------------------
Comment (by bmharper):

 Thanks Mateusz!
 I wasn't aware of these issues.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/202#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From warmerdam at pobox.com  Sun Aug 31 23:50:03 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Sun Aug 31 23:50:17 2008
Subject: [geos-devel] Tabs versus spaces?
In-Reply-To: <48B82965.6010402@loskot.net>
References: <48B81012.7040104@frii.com> <48B81DC9.8070008@savagexi.com>
	<249ED3E4-A4FF-4080-9C89-BE6B23866374@gmail.com>
	<48B82965.6010402@loskot.net>
Message-ID: <48BB666B.70607@pobox.com>

Mateusz Loskot wrote:
> Howard Butler wrote:
>>
>> On Aug 29, 2008, at 11:03 AM, Charlie Savage wrote:
>>> +1 for spaces on my side.  And just to really stir things up, I'd go 
>>> for an indentation of 2 spaces....
>>
>> I think it is an OSGeo standard for all source code to be spaces with 
>> an indentation level of 4 spaces :)
> 
> Hobu,
> 
> +1 for 4 spaces.
> 
> Tell it to QGIS Team ;-)
> Is this a written rule or you are kidding?

Folks,

I'm also in favor of 4 space indentation and replacing tabs with
spaces.  But I am not keen on being too strict about this.

PS. the part about an OSGeo rule was a joke.  But 4 space indentation
seems to be the convention of most OSGeo C/C++ projects.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

