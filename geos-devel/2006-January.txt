From eric.faurot at gmail.com  Thu Jan  5 17:38:56 2006
From: eric.faurot at gmail.com (Eric Faurot)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <20051230143503.GD72134@keybit.net>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
	<e012d6b50512290315p7dc221ccneead47d86ebb1a42@mail.gmail.com>
	<20051230143503.GD72134@keybit.net>
Message-ID: <e012d6b50601051438u6efd4924k278f86de404a5a@mail.gmail.com>

On 12/30/05, strk@refractions.net <strk@refractions.net> wrote:

Sorry for answering that late.

> Mm... my libtool responds with:
> libtool: invalid tag name: CXX c++
>
> Does this have to do with the "do not force use of your libtool"
> request below ? Note that the `libtool' script is NOT shipped
> with GEOS package, only the ltmain.sh script, as reccommended
> in the libtool info page.

OpenBSD provides its own libtool that we really want to use.
I thought I saw a LIBTOOL=$(topbuildir)/libtool or something like that,
but I must have dreamed...

> > The corrolary is that postgis 1.1.0 now fails because it uses the capi
> > and the liblwgeom.so is incorrectly linked, so postgres cannot dlopen it
> > (undefined reference to C++ symbols)...
>
> Maybe OpenBSD *needs* to explicitly link libstdc++ ?
> I think we can safely always include libstdc++ link in postgis
> build scripts... they would not hurt.
> Could you check that adding -lstdc++ in SHLIB_LINK line of lwgeom/Makefile
> (around line 46) fixes the problem ?

-lstdc++ works, but I also need -lm. I can live with that, though.
FYI, you can find the ports at:
http://ekyo.nerim.net/openbsd/ports/geos.tgz
http://ekyo.nerim.net/openbsd/ports/postgis.tgz

There are a few other patches that you might want to integrate into
your tree, but IMHO, it is generaly better to let packagers write small
patches than making the configure process too complicated.

Eric.
From strk at refractions.net  Fri Jan  6 09:51:59 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <e012d6b50601051438u6efd4924k278f86de404a5a@mail.gmail.com>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
	<e012d6b50512290315p7dc221ccneead47d86ebb1a42@mail.gmail.com>
	<20051230143503.GD72134@keybit.net>
	<e012d6b50601051438u6efd4924k278f86de404a5a@mail.gmail.com>
Message-ID: <20060106145159.GG13253@keybit.net>

On Thu, Jan 05, 2006 at 11:38:56PM +0100, Eric Faurot wrote:
> On 12/30/05, strk@refractions.net <strk@refractions.net> wrote:
> 
> Sorry for answering that late.
> 
> > Mm... my libtool responds with:
> > libtool: invalid tag name: CXX c++
> >
> > Does this have to do with the "do not force use of your libtool"
> > request below ? Note that the `libtool' script is NOT shipped
> > with GEOS package, only the ltmain.sh script, as reccommended
> > in the libtool info page.
> 
> OpenBSD provides its own libtool that we really want to use.
> I thought I saw a LIBTOOL=$(topbuildir)/libtool or something like that,
> but I must have dreamed...

mmm.. you're right, no dreams. It's in aclocal.m4:

	# Always use our own libtool.
	LIBTOOL='$(SHELL) $(top_builddir)/libtool'
	AC_SUBST(LIBTOOL)

Don't know the rationale of this. Maybe the fact that
"our own" libtool is generated... anyone else's experience ?

> > > The corrolary is that postgis 1.1.0 now fails because it uses the capi
> > > and the liblwgeom.so is incorrectly linked, so postgres cannot dlopen it
> > > (undefined reference to C++ symbols)...
> >
> > Maybe OpenBSD *needs* to explicitly link libstdc++ ?
> > I think we can safely always include libstdc++ link in postgis
> > build scripts... they would not hurt.
> > Could you check that adding -lstdc++ in SHLIB_LINK line of lwgeom/Makefile
> > (around line 46) fixes the problem ?
> 
> -lstdc++ works, but I also need -lm. I can live with that, though.
> FYI, you can find the ports at:
> http://ekyo.nerim.net/openbsd/ports/geos.tgz
> http://ekyo.nerim.net/openbsd/ports/postgis.tgz
> 
> There are a few other patches that you might want to integrate into
> your tree, but IMHO, it is generaly better to let packagers write small
> patches than making the configure process too complicated.

Well, I think it's good for builders to have a working build method.
It's not only packagers, but also final user (I build from sources a lot!).

Chances are there's a way to explicitly define dependencies and let
libtool decide wheter to pass that info to the linker or not...

Again, help is welcome.

--strk;

From cfis at interserv.com  Sat Jan  7 19:09:20 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
Message-ID: <43C05830.2030105@interserv.com>

Hi everyone,

I'm trying to compile GEOS HEAD using Visual C++ 2005.  I had to patch a 
couple files, which I explain below (patch is also attached below).

There is however a more fundamental issue which is setting up the right 
exports for libgeos.dll.  This is generally done via 
dllexport/dllimport, just like in libgeos_c.  Since libgeos.dll exports 
C++ classes, you can dllexport all the classes.  Of course any such 
exported classes can only be used by code compiled by VC++ due to C++ 
name mangling.  The same if also true if you are using any other 
compiler, for example MingW, to build libgeos.dll - it can only be 
linked against by MinGW.

Anyway, there are few solutions.  First, do nothing and disallow the 
creation of dlls using VC++ (you could build static libraries instead).  
Second, add the right dllExport/dllImport macros to the class 
definitions.  Third, and what I did, manually construct a def file by 
using information extracted from the dll by dumpbin or the VC++ /MAP 
option.  The third option isn't very good because it is manually 
intensive and fairly brittle - although I suppose you could automate it 
using a fair bit of scripting magic.

Anyway, being able to build geos with VC++ is useful, because it makes 
it easier to build extensions for Ruby and Python, both of which are 
compiled using VC++ on Windows.

Just my two cents.

Thanks,

Charlie

-------------------------------

The following patches are needed to build GEOS with Visual Studio C++ 
2005.  I've tested them against both VC++ and MinGW on Windows.  Note I 
have also created updated Visual Studio C++  if anyone is interested 
(the old that was removed from CVS no longer works).

1.  The main issue is from geomgraph.h, lines 490 and 491:

    EdgeIntersectionListIterator begin() const { return nodeMap.begin(); }
    EdgeIntersectionListIterator end() const { return nodeMap.end(); }

Where:

typedef set<EdgeIntersection *, EdgeIntersectionLessThen>::iterator 
EdgeIntersectionListIterator;

VC++ does not compile this because it complains that a non-const 
iterator is being returned from a function that is marked const.  It 
seems to me that VC++ is correct, and this should not be allowed.  The 
fix is easy enough, return an const_iterator (which I called 
EdgeIntersectionListIterator Const) instead of a iterator.  This then 
effects a couple of places in the code.

2.  geos_c.cpp, line 1570.

return (finite(az) && az != DoubleNotANumber);

There is not a finite function, but there is a FINITE macro.  So I 
switched to the macro.

3.  GeometricShapeFactory, line 202

    if (angSize <= 0.0 || angSize > 2 * M_PI) //3.14159265358979

M_PI does not seem defined on Windows, so I defined it at the top of the 
file.

Thanks,

Charlie

-----------------------------------------------

Index: source/geomgraph/EdgeIntersectionList.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/geomgraph/EdgeIntersectionList.cpp,v
retrieving revision 1.16
diff -u -r1.16 EdgeIntersectionList.cpp
--- source/geomgraph/EdgeIntersectionList.cpp    8 Dec 2005 01:11:29 
-0000    1.16
+++ source/geomgraph/EdgeIntersectionList.cpp    7 Jan 2006 23:48:53 -0000
@@ -65,7 +65,7 @@
 bool
 EdgeIntersectionList::isIntersection(const Coordinate& pt) const
 {
-    EdgeIntersectionListIterator it=nodeMap.begin(), endIt=nodeMap.end();
+    EdgeIntersectionListIteratorConst it=nodeMap.begin(), 
endIt=nodeMap.end();
     for (; it!=endIt; ++it)
     {
         EdgeIntersection *ei=*it;
@@ -158,7 +158,7 @@
 EdgeIntersectionList::print() const
 {
     string out="Intersections: ";
-    EdgeIntersectionListIterator it=begin(), endIt=end();
+    EdgeIntersectionListIteratorConst it=begin(), endIt=end();
     for (; it!=endIt; ++it) {
         EdgeIntersection *ei=*it;
         out+=ei->print();
Index: source/util/GeometricShapeFactory.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/util/GeometricShapeFactory.cpp,v
retrieving revision 1.8
diff -u -r1.8 GeometricShapeFactory.cpp
--- source/util/GeometricShapeFactory.cpp    8 Dec 2004 13:54:44 
-0000    1.8
+++ source/util/GeometricShapeFactory.cpp    7 Jan 2006 23:48:53 -0000
@@ -17,6 +17,10 @@
 #include <geos/util.h>
 #include <stdio.h>
 
+#ifndef M_PI
+#define M_PI        3.14159265358979323846
+#endif
+
 namespace geos {
 
 /*
Index: source/headers/geos/geomgraph.h
===================================================================
RCS file: /home/cvs/postgis/geos/source/headers/geos/geomgraph.h,v
retrieving revision 1.26
diff -u -r1.26 geomgraph.h
--- source/headers/geos/geomgraph.h    7 Dec 2005 19:18:23 -0000    1.26
+++ source/headers/geos/geomgraph.h    7 Jan 2006 23:48:53 -0000
@@ -464,6 +464,7 @@
 };
 
 typedef set<EdgeIntersection *, EdgeIntersectionLessThen>::iterator 
EdgeIntersectionListIterator;
+typedef set<EdgeIntersection *, 
EdgeIntersectionLessThen>::const_iterator EdgeIntersectionListIteratorConst;
 
 /**
  * A list of edge intersections along an Edge.
@@ -486,8 +487,8 @@
 
     EdgeIntersectionListIterator begin() { return nodeMap.begin(); }
     EdgeIntersectionListIterator end() { return nodeMap.end(); }
-    EdgeIntersectionListIterator begin() const { return nodeMap.begin(); }
-    EdgeIntersectionListIterator end() const { return nodeMap.end(); }
+    EdgeIntersectionListIteratorConst begin() const { return 
nodeMap.begin(); }
+    EdgeIntersectionListIteratorConst end() const { return nodeMap.end(); }
 
     bool isEmpty() const;
     bool isIntersection(const Coordinate& pt) const;
Index: source/capi/geos_c.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/capi/geos_c.cpp,v
retrieving revision 1.19
diff -u -r1.19 geos_c.cpp
--- source/capi/geos_c.cpp    13 Dec 2005 23:03:25 -0000    1.19
+++ source/capi/geos_c.cpp    7 Jan 2006 23:48:53 -0000
@@ -1567,7 +1567,7 @@
     double az = g->getCoordinate()->z;
     //sprintf(msg, "ZCoord: %g", az);
     //ERROR_MESSAGE(msg);
-    return (finite(az) && az != DoubleNotANumber);
+    return (FINITE(az) && az != DoubleNotANumber);
 }
 
 int


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060107/45ae6bc0/smime.bin
From strk at refractions.net  Sun Jan  8 08:55:36 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <43C05830.2030105@interserv.com>
References: <43C05830.2030105@interserv.com>
Message-ID: <20060108135536.GB40902@keybit.net>

Thank you.
During my changes I found anther way to define
container-related things, which seems to me
more consistent with C++ practice:

class EdgeIntersectionList {
public:
	typedef set<...> container;
	typedef container::iterator iterator;
	typedef container::const_iterator const_iterator;
...
}

I've used this with other classes (EdgeEndStar, for example).

Do you think we should use this format for all classes ?
I'd say we do, unless there are known platform on which
this is unsupported.

--strk;


On Sat, Jan 07, 2006 at 05:09:20PM -0700, Charlie Savage wrote:
> Hi everyone,
> 
> I'm trying to compile GEOS HEAD using Visual C++ 2005.  I had to patch a 
> couple files, which I explain below (patch is also attached below).
> 
> There is however a more fundamental issue which is setting up the right 
> exports for libgeos.dll.  This is generally done via 
> dllexport/dllimport, just like in libgeos_c.  Since libgeos.dll exports 
> C++ classes, you can dllexport all the classes.  Of course any such 
> exported classes can only be used by code compiled by VC++ due to C++ 
> name mangling.  The same if also true if you are using any other 
> compiler, for example MingW, to build libgeos.dll - it can only be 
> linked against by MinGW.
> 
> Anyway, there are few solutions.  First, do nothing and disallow the 
> creation of dlls using VC++ (you could build static libraries instead).  
> Second, add the right dllExport/dllImport macros to the class 
> definitions.  Third, and what I did, manually construct a def file by 
> using information extracted from the dll by dumpbin or the VC++ /MAP 
> option.  The third option isn't very good because it is manually 
> intensive and fairly brittle - although I suppose you could automate it 
> using a fair bit of scripting magic.
> 
> Anyway, being able to build geos with VC++ is useful, because it makes 
> it easier to build extensions for Ruby and Python, both of which are 
> compiled using VC++ on Windows.
> 
> Just my two cents.
> 
> Thanks,
> 
> Charlie
> 
> -------------------------------
> 
> The following patches are needed to build GEOS with Visual Studio C++ 
> 2005.  I've tested them against both VC++ and MinGW on Windows.  Note I 
> have also created updated Visual Studio C++  if anyone is interested 
> (the old that was removed from CVS no longer works).
> 
> 1.  The main issue is from geomgraph.h, lines 490 and 491:
> 
>    EdgeIntersectionListIterator begin() const { return nodeMap.begin(); }
>    EdgeIntersectionListIterator end() const { return nodeMap.end(); }
> 
> Where:
> 
> typedef set<EdgeIntersection *, EdgeIntersectionLessThen>::iterator 
> EdgeIntersectionListIterator;
> 
> VC++ does not compile this because it complains that a non-const 
> iterator is being returned from a function that is marked const.  It 
> seems to me that VC++ is correct, and this should not be allowed.  The 
> fix is easy enough, return an const_iterator (which I called 
> EdgeIntersectionListIterator Const) instead of a iterator.  This then 
> effects a couple of places in the code.
> 
> 2.  geos_c.cpp, line 1570.
> 
> return (finite(az) && az != DoubleNotANumber);
> 
> There is not a finite function, but there is a FINITE macro.  So I 
> switched to the macro.
> 
> 3.  GeometricShapeFactory, line 202
> 
>    if (angSize <= 0.0 || angSize > 2 * M_PI) //3.14159265358979
> 
> M_PI does not seem defined on Windows, so I defined it at the top of the 
> file.
> 
> Thanks,
> 
> Charlie
> 
> -----------------------------------------------
> 
> Index: source/geomgraph/EdgeIntersectionList.cpp
> ===================================================================
> RCS file: /home/cvs/postgis/geos/source/geomgraph/EdgeIntersectionList.cpp,v
> retrieving revision 1.16
> diff -u -r1.16 EdgeIntersectionList.cpp
> --- source/geomgraph/EdgeIntersectionList.cpp    8 Dec 2005 01:11:29 
> -0000    1.16
> +++ source/geomgraph/EdgeIntersectionList.cpp    7 Jan 2006 23:48:53 -0000
> @@ -65,7 +65,7 @@
> bool
> EdgeIntersectionList::isIntersection(const Coordinate& pt) const
> {
> -    EdgeIntersectionListIterator it=nodeMap.begin(), endIt=nodeMap.end();
> +    EdgeIntersectionListIteratorConst it=nodeMap.begin(), 
> endIt=nodeMap.end();
>     for (; it!=endIt; ++it)
>     {
>         EdgeIntersection *ei=*it;
> @@ -158,7 +158,7 @@
> EdgeIntersectionList::print() const
> {
>     string out="Intersections: ";
> -    EdgeIntersectionListIterator it=begin(), endIt=end();
> +    EdgeIntersectionListIteratorConst it=begin(), endIt=end();
>     for (; it!=endIt; ++it) {
>         EdgeIntersection *ei=*it;
>         out+=ei->print();
> Index: source/util/GeometricShapeFactory.cpp
> ===================================================================
> RCS file: /home/cvs/postgis/geos/source/util/GeometricShapeFactory.cpp,v
> retrieving revision 1.8
> diff -u -r1.8 GeometricShapeFactory.cpp
> --- source/util/GeometricShapeFactory.cpp    8 Dec 2004 13:54:44 
> -0000    1.8
> +++ source/util/GeometricShapeFactory.cpp    7 Jan 2006 23:48:53 -0000
> @@ -17,6 +17,10 @@
> #include <geos/util.h>
> #include <stdio.h>
> 
> +#ifndef M_PI
> +#define M_PI        3.14159265358979323846
> +#endif
> +
> namespace geos {
> 
> /*
> Index: source/headers/geos/geomgraph.h
> ===================================================================
> RCS file: /home/cvs/postgis/geos/source/headers/geos/geomgraph.h,v
> retrieving revision 1.26
> diff -u -r1.26 geomgraph.h
> --- source/headers/geos/geomgraph.h    7 Dec 2005 19:18:23 -0000    1.26
> +++ source/headers/geos/geomgraph.h    7 Jan 2006 23:48:53 -0000
> @@ -464,6 +464,7 @@
> };
> 
> typedef set<EdgeIntersection *, EdgeIntersectionLessThen>::iterator 
> EdgeIntersectionListIterator;
> +typedef set<EdgeIntersection *, 
> EdgeIntersectionLessThen>::const_iterator EdgeIntersectionListIteratorConst;
> 
> /**
>  * A list of edge intersections along an Edge.
> @@ -486,8 +487,8 @@
> 
>     EdgeIntersectionListIterator begin() { return nodeMap.begin(); }
>     EdgeIntersectionListIterator end() { return nodeMap.end(); }
> -    EdgeIntersectionListIterator begin() const { return nodeMap.begin(); }
> -    EdgeIntersectionListIterator end() const { return nodeMap.end(); }
> +    EdgeIntersectionListIteratorConst begin() const { return 
> nodeMap.begin(); }
> +    EdgeIntersectionListIteratorConst end() const { return nodeMap.end(); }
> 
>     bool isEmpty() const;
>     bool isIntersection(const Coordinate& pt) const;
> Index: source/capi/geos_c.cpp
> ===================================================================
> RCS file: /home/cvs/postgis/geos/source/capi/geos_c.cpp,v
> retrieving revision 1.19
> diff -u -r1.19 geos_c.cpp
> --- source/capi/geos_c.cpp    13 Dec 2005 23:03:25 -0000    1.19
> +++ source/capi/geos_c.cpp    7 Jan 2006 23:48:53 -0000
> @@ -1567,7 +1567,7 @@
>     double az = g->getCoordinate()->z;
>     //sprintf(msg, "ZCoord: %g", az);
>     //ERROR_MESSAGE(msg);
> -    return (finite(az) && az != DoubleNotANumber);
> +    return (FINITE(az) && az != DoubleNotANumber);
> }
> 
> int
> 
> 



> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From artem at pavlenko.uklinux.net  Sun Jan  8 09:34:53 2006
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <20060108135536.GB40902@keybit.net>
References: <43C05830.2030105@interserv.com>
	<20060108135536.GB40902@keybit.net>
Message-ID: <43C1230D.7050600@pavlenko.uklinux.net>

Hi strk,

See below,
> anther way to define
> container-related things, which seems to me
> more consistent with C++ practice:
>
> class EdgeIntersectionList {
> public:
> 	typedef set<...> container;
> 	typedef container::iterator iterator;
> 	typedef container::const_iterator const_iterator;
> ...
> }
>   
Why don't you go one step  further and make templated version e.g 
something like that:

template <typename T>
class EdgeIntersectionList
{
         typedef T container;
         ........................
         ........................   
};
typedef EdgeIntersectionList< std::set <...> > MyEdgeIntersectionList
I think this would be more flexible.

> Do you think we should use this format for all classes ?
>   
Yes.
> I'd say we do, unless there are known platform on which
> this is unsupported.
>   
Do mean compiler support?  I can not see any problems as this is a 
standard c++.
Cheers
Artem



From strk at refractions.net  Sun Jan  8 10:17:15 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <43C1230D.7050600@pavlenko.uklinux.net>
References: <43C05830.2030105@interserv.com>
	<20060108135536.GB40902@keybit.net>
	<43C1230D.7050600@pavlenko.uklinux.net>
Message-ID: <20060108151715.GD40902@keybit.net>

On Sun, Jan 08, 2006 at 02:34:53PM +0000, Artem Pavlenko wrote:
> Hi strk,
> 
> See below,
> >anther way to define
> >container-related things, which seems to me
> >more consistent with C++ practice:
> >
> >class EdgeIntersectionList {
> >public:
> >	typedef set<...> container;
> >	typedef container::iterator iterator;
> >	typedef container::const_iterator const_iterator;
> >...
> >}
> >  
> Why don't you go one step  further and make templated version e.g 

Because:

	1) This is already a step further from simply appying
	   patch provided by Charlie

	and, most importantly:

	2) We're short of funds on GEOS development

Thanks for feedback, anyway.

--strk;

> something like that:
> 
> template <typename T>
> class EdgeIntersectionList
> {
>         typedef T container;
>         ........................
>         ........................   
> };
> typedef EdgeIntersectionList< std::set <...> > MyEdgeIntersectionList
> I think this would be more flexible.
> 
> >Do you think we should use this format for all classes ?
> >  
> Yes.
> >I'd say we do, unless there are known platform on which
> >this is unsupported.
> >  
> Do mean compiler support?  I can not see any problems as this is a 
> standard c++.
> Cheers
> Artem
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Sun Jan  8 10:42:20 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <43C05830.2030105@interserv.com>
References: <43C05830.2030105@interserv.com>
Message-ID: <20060108154220.GB41960@keybit.net>

On Sat, Jan 07, 2006 at 05:09:20PM -0700, Charlie Savage wrote:
> Hi everyone,
> 
> I'm trying to compile GEOS HEAD using Visual C++ 2005.  I had to patch a 
> couple files, which I explain below (patch is also attached below).
> 
> There is however a more fundamental issue which is setting up the right 
> exports for libgeos.dll.  This is generally done via 
> dllexport/dllimport, just like in libgeos_c.  Since libgeos.dll exports 
> C++ classes, you can dllexport all the classes.  Of course any such 
> exported classes can only be used by code compiled by VC++ due to C++ 
> name mangling.  The same if also true if you are using any other 
> compiler, for example MingW, to build libgeos.dll - it can only be 
> linked against by MinGW.

Please remember that use of the C++ ABI will not be maintained
stable, so I wouldn't put any effort in making it *more* accessible.
Rather, I'd shrink it down.
Using explicit dllexport would not be of general use for shrinking
it down (wold only work under windows).

I've committed your patches, with the modifications explained
earlier. I don't know if those changes (typedefs) influenced
in any way the SWIG wrapper, could you try that ?

TIA

--strk;

From cfis at interserv.com  Sun Jan  8 15:12:00 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <43C1230D.7050600@pavlenko.uklinux.net>
References: <43C05830.2030105@interserv.com>	<20060108135536.GB40902@keybit.net>
	<43C1230D.7050600@pavlenko.uklinux.net>
Message-ID: <43C17210.8050501@interserv.com>

Either strk's idea of Artem's idea works for me.

Charlie

Artem Pavlenko wrote:
> Hi strk,
>
> See below,
>> anther way to define
>> container-related things, which seems to me
>> more consistent with C++ practice:
>>
>> class EdgeIntersectionList {
>> public:
>>     typedef set<...> container;
>>     typedef container::iterator iterator;
>>     typedef container::const_iterator const_iterator;
>> ...
>> }
>>   
> Why don't you go one step  further and make templated version e.g 
> something like that:
>
> template <typename T>
> class EdgeIntersectionList
> {
>         typedef T container;
>         ........................
>         ........................   };
> typedef EdgeIntersectionList< std::set <...> > MyEdgeIntersectionList
> I think this would be more flexible.
>
>> Do you think we should use this format for all classes ?
>>   
> Yes.
>> I'd say we do, unless there are known platform on which
>> this is unsupported.
>>   
> Do mean compiler support?  I can not see any problems as this is a 
> standard c++.
> Cheers
> Artem
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060108/2ba2a21d/smime.bin
From cfis at interserv.com  Sun Jan  8 15:18:06 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <20060108154220.GB41960@keybit.net>
References: <43C05830.2030105@interserv.com>
	<20060108154220.GB41960@keybit.net>
Message-ID: <43C1737E.5090307@interserv.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060108/d924c9a4/smime.bin
From cfis at interserv.com  Sun Jan  8 19:25:09 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] Patch that adds reading/writing WKB hex format
Message-ID: <43C1AD65.405@interserv.com>

I'm using geos in a stand-alone library that gets data from a remote 
PostGIS server and then does some additional processing.  As a result it 
would be helpful if geos could read in the wkb hex format that PostGIS 
produces.  Looking through the GEOS/PostGIS code, I see that the wkb hex 
interpretation code is in PostGIS and not geos.

As a result, I have added to geos the methods WKBReader.readHex, 
WKBWriter.writeHEX (under the covers it calls WKBReader.printHEX which 
already exists, although I'm not sure why its on WKBReader).   I also 
added a constructor to Envelope that takes a string - the same string 
produced by Envelope.toString().  This makes it easy to serialize an 
envelope to a string, and then recreate the Envelope later.

Since I thought these changes might be generally useful, I've attached a 
patch below.  The patch also fixes a few spelling mistakes that I 
noticed in some error messages and in the DOxygen API comments.

Thanks,

Charlie

Index:  source/headers/geos/io.h
===================================================================
RCS file: /home/cvs/postgis/geos/source/headers/geos/io.h,v
retrieving revision 1.18
diff -u -r1.18 io.h
---  source/headers/geos/io.h    29 Nov 2005 13:39:56 -0000    1.18
+++  source/headers/geos/io.h    8 Jan 2006 23:34:01 -0000
@@ -265,7 +265,7 @@
     {
         stream->read(reinterpret_cast<char *>(buf), 1);
         if ( stream->eof() )
-            throw new ParseException("Unespected EOF parsing WKB");
+            throw new ParseException("Unexpected EOF parsing WKB");
         return buf[0];
     }
 
@@ -273,7 +273,7 @@
     {
         stream->read(reinterpret_cast<char *>(buf), 4);
         if ( stream->eof() )
-            throw new ParseException("Unespected EOF parsing WKB");
+            throw new ParseException("Unexpected EOF parsing WKB");
         return ByteOrderValues::getInt(buf, byteOrder);
     }
 
@@ -281,7 +281,7 @@
     {
         stream->read(reinterpret_cast<char *>(buf), 8);
         if ( stream->eof() )
-            throw new ParseException("Unespected EOF parsing WKB");
+            throw new ParseException("Unexpected EOF parsing WKB");
         return ByteOrderValues::getLong(buf, byteOrder);
     }
 
@@ -289,7 +289,7 @@
     {
         stream->read(reinterpret_cast<char *>(buf), 8);
         if ( stream->eof() )
-            throw new ParseException("Unespected EOF parsing WKB");
+            throw new ParseException("Unexpected EOF parsing WKB");
         return ByteOrderValues::getDouble(buf, byteOrder);
     }
 
@@ -336,6 +336,17 @@
         // throws IOException, ParseException
 
     /**
+     * \brief Reads a Geometry from an istream in hex format.
+     *
+     * @param is the stream to read from
+     * @return the Geometry read
+     * @throws IOException
+     * @throws ParseException
+     */
+    Geometry *readHEX(istream &is);
+        // throws IOException, ParseException
+
+    /**
      * \brief Print WKB in HEX form to out stream
      *
      * @param is is the stream to read from
@@ -419,6 +430,16 @@
     WKBWriter(int dims=2, int bo=getMachineByteOrder());
 
     /**
+       * \brief Write a Geometry to an ostream in binary hex format.
+     *
+     * @param g the geometry to write
+     * @param os the output stream
+     * @throws IOException
+     */
+    void
+    WKBWriter::writeHEX(const Geometry &g, ostream &os);
+
+    /**
      * \brief Write a Geometry to an ostream.
      *
      * @param g the geometry to write
Index:  source/headers/geos/geom.h
===================================================================
RCS file: /home/cvs/postgis/geos/source/headers/geos/geom.h,v
retrieving revision 1.57
diff -u -r1.57 geom.h
---  source/headers/geos/geom.h    8 Dec 2005 14:14:07 -0000    1.57
+++  source/headers/geos/geom.h    8 Jan 2006 23:30:03 -0000
@@ -1023,6 +1023,7 @@
     Envelope(const Coordinate& p1, const Coordinate& p2);
     Envelope(const Coordinate& p);
     Envelope(const Envelope &env);
+    Envelope::Envelope(const string &str);
     ~Envelope(void);
     static bool intersects(const Coordinate& p1,const Coordinate& 
p2,const Coordinate& q);
     static bool intersects(const Coordinate& p1,const Coordinate& 
p2,const Coordinate& q1,const Coordinate& q2);
@@ -1070,31 +1071,31 @@
 
     /**
      * Check if the point p
-     * overlaps (lies inside) the region of this Envelope.
+     * intersects (lies inside) the region of this Envelope.
      *
      * @param  p      the Coordinate to be tested
-     * @return true if the point overlaps this Envelope
+     * @return true if the point intersects this Envelope
      */
     inline bool intersects(const Coordinate& p) const;
 
     /**
      *  Check if the point (x, y)
-     *  overlaps (lies inside) the region of this Envelope.
+     *  intersects (lies inside) the region of this Envelope.
      *
      * @param  x  the x-ordinate of the point
      * @param  y  the y-ordinate of the point
-     * @return <code>true</code> if the point overlaps this Envelope
+     * @return <code>true</code> if the point intersects this Envelope
      */
     inline bool intersects(double x, double y) const;
 
     /**
      * Check if the region defined by other Envelope
-     * overlaps (intersects) the region of this Envelope.
+     * intersects (intersects) the region of this Envelope.
      *
      * @param other the Envelope which this Envelope is
-     *              being checked for overlapping
+     *              being checked for intersection
      *
-     * @return      true if the Envelopes overlap
+     * @return      true if the Envelopes intersects
      */
     inline bool intersects(const Envelope* other) const;
 
@@ -1104,6 +1105,7 @@
     int hashCode() const;
 
 private:
+    vector<string> split(const string &str, const string &delimiters = 
" ");
     static double distance(double x0,double y0,double x1,double y1);
     double minx;    /// the minimum x-coordinate
     double maxx;    /// the maximum x-coordinate
Index: source/geom/Envelope.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/geom/Envelope.cpp,v
retrieving revision 1.21
diff -u -r1.21 Envelope.cpp
--- source/geom/Envelope.cpp    8 Nov 2005 10:03:28 -0000    1.21
+++ source/geom/Envelope.cpp    8 Jan 2006 23:18:09 -0000
@@ -135,6 +135,32 @@
     init(env.minx, env.maxx, env.miny, env.maxy);
 }
 
+/**
+ *  Create an <code>Envelope</code> from an Envelope
+ *  string representation produced by Envelope.toString()
+ *
+ * @param  env  the string Envelope to initialize from
+ */
+Envelope::Envelope(const string &str)
+{
+  // The string should be in the format:
+  // Env[7.2:2.3,7.1:8.2]
+
+  // extract out the values between the [ and ] characters
+  int index = str.find("[");
+  string coordString = str.substr(index + 1, str.size() - 1 - 1);
+
+  // now split apart the string on : and , characters
+  vector<string> values = split(coordString, ":,");
+
+  // create a new envelope
+  init(::atof(values[0].c_str()),
+       ::atof(values[1].c_str()),
+       ::atof(values[2].c_str()),
+       ::atof(values[3].c_str()));
+}
+
+
 ///Default destructor
 Envelope::~Envelope(void) {}
 
@@ -464,10 +490,39 @@
     result = 37 * result + Coordinate::hashCode(minx);
     result = 37 * result + Coordinate::hashCode(maxx);
     result = 37 * result + Coordinate::hashCode(miny);
-    result = 37 * result + Coordinate::hashCode(maxy);
+   result = 37 * result + Coordinate::hashCode(maxy);
     return result;
 }
 
+/* This is a generic function that really belongs in a utility
+   file somewhere */
+/**
+ * Splits a string into parts based on the supplied delimiters.
+ */
+vector<string> Envelope::split(const string &str, const string &delimiters)
+{
+  vector<string> tokens;
+
+  // Find first "non-delimiter".
+  string::size_type lastPos = 0;
+  string::size_type pos = str.find_first_of(delimiters, lastPos);
+
+  while (string::npos != pos || string::npos != lastPos)
+  {
+    // Found a token, add it to the vector.
+    tokens.push_back(str.substr(lastPos, pos - lastPos));
+    
+    // Skip delimiters.  Note the "not_of"
+    lastPos = str.find_first_not_of(delimiters, pos);
+
+    // Find next "non-delimiter"
+    pos = str.find_first_of(delimiters, lastPos);
+  }
+
+  return tokens;
+}
+
+
 } // namespace geos
 
 /**********************************************************************
Index: source/io/WKBWriter.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/io/WKBWriter.cpp,v
retrieving revision 1.3
diff -u -r1.3 WKBWriter.cpp
--- source/io/WKBWriter.cpp    28 Sep 2005 10:15:34 -0000    1.3
+++ source/io/WKBWriter.cpp    8 Jan 2006 21:00:21 -0000
@@ -27,6 +27,19 @@
 }
 
 void
+WKBWriter::writeHEX(const Geometry &g, ostream &os)
+{
+  // setup input/output stream
+  stringstream stream;
+  
+  // write the geometry in wkb format
+  this->write(g, stream);
+
+  // convert to HEX
+  WKBReader::printHEX(stream, os);
+}
+
+void
 WKBWriter::write(const Geometry &g, ostream &os)
 {
     outStream = &os;
Index: source/io/WKBReader.cpp
===================================================================
RCS file: /home/cvs/postgis/geos/source/io/WKBReader.cpp,v
retrieving revision 1.11
diff -u -r1.11 WKBReader.cpp
--- source/io/WKBReader.cpp    10 Nov 2005 16:26:12 -0000    1.11
+++ source/io/WKBReader.cpp    8 Jan 2006 20:58:34 -0000
@@ -47,6 +47,132 @@
     return os;
 }
 
+Geometry *
+WKBReader::readHEX(istream &is){
+  // setup input/output stream
+  stringstream os;
+
+  unsigned char high, low, result_high, result_low, value;
+
+  while(!is.eof())
+    {
+    // get the high part of the byte
+    is >> high;
+    // geth the low part of the byte
+    is >> low;
+
+    switch (high)
+      {
+          case '0' :
+              result_high = 0;
+              break;
+          case '1' :
+              result_high = 1;
+              break;
+          case '2' :
+              result_high = 2;
+              break;
+          case '3' :
+              result_high = 3;
+              break;
+          case '4' :
+              result_high = 4;
+              break;
+          case '5' :
+              result_high = 5;
+              break;
+          case '6' :
+              result_high = 6;
+              break;
+          case '7' :
+              result_high = 7;
+              break;
+          case '8' :
+              result_high = 8;
+              break;
+          case '9' :
+              result_high = 9;
+              break;
+          case 'A' :
+              result_high = 10;
+              break;
+          case 'B' :
+              result_high = 11;
+              break;
+          case 'C' :
+              result_high = 12;
+              break;
+          case 'D' :
+              result_high = 13;
+              break;
+          case 'E' :
+              result_high = 14;
+              break;
+          case 'F' :
+              result_high = 15;
+              break;
+      }
+
+    switch (low)
+      {
+          case '0' :
+              result_low = 0;
+              break;
+          case '1' :
+              result_low = 1;
+              break;
+          case '2' :
+              result_low = 2;
+              break;
+          case '3' :
+              result_low = 3;
+              break;
+          case '4' :
+              result_low = 4;
+              break;
+          case '5' :
+              result_low = 5;
+              break;
+          case '6' :
+              result_low = 6;
+              break;
+          case '7' :
+              result_low = 7;
+              break;
+          case '8' :
+              result_low = 8;
+              break;
+          case '9' :
+              result_low = 9;
+              break;
+          case 'A' :
+              result_low = 10;
+              break;
+          case 'B' :
+              result_low = 11;
+              break;
+          case 'C' :
+              result_low = 12;
+              break;
+          case 'D' :
+              result_low = 13;
+              break;
+          case 'E' :
+              result_low = 14;
+              break;
+          case 'F' :
+              result_low = 15;
+              break;
+      }
+
+    value = (result_high<<4) + result_low;
+    // write the value to the output stream
+    os << value;
+  }
+  
+  // now call read to convert the geometry
+  return this->read(os);
+}
 
 Geometry *
 WKBReader::read(istream &is)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060108/12753795/smime.bin
From warmerdam at pobox.com  Sun Jan  8 21:06:16 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <43C1737E.5090307@interserv.com>
References: <43C05830.2030105@interserv.com>
	<20060108154220.GB41960@keybit.net> <43C1737E.5090307@interserv.com>
Message-ID: <931f8ea90601081806i2b2e3436x410835745fb13bd3@mail.gmail.com>

On 1/8/06, Charlie Savage <cfis@interserv.com> wrote:
>  Understood about the C++ ABI and it not being stable.  Two things to
> consider though.
>
>  First, without the dllexport/dllimport you can't build the C API using VC++
> unless you combine libgeos and libgeos_c into one big dll - but that is not
> what is currently done with GCC (it can't be built as is with VC++ because
> libgeos doesn't export any symbols so there is nothing for libgeos_c to link
> against).

Charlie,

For what it's worth, I've always built the C and C++ api as one
DLL on windows, but you are right.  If we want to parallel unix
we would need to expose the C++ API, at least for SWIG
and the C DLL.

Best regards,
--
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From bt at ccgis.de  Mon Jan  9 06:05:48 2006
From: bt at ccgis.de (Benjamin Thelen)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <20051229110134.GA61427@keybit.net>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
Message-ID: <43C2438C.4050508@ccgis.de>

Hello,

Ups, sorry, my fault. I've been so busy with this, that I mistakenly 
assumed that you of course know what I'm talking about :-). Sorry.


Building geos-2.2.1 fails on FreeBSD 4.11 (gcc-2.95) with this error:

--------------------------------------------------------------------
.
.
  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.1 
-g -O2 -c ../io/WKBReader.cpp -Wp,-MD,.deps/WKBReader.TPlo  -fPIC -DPIC 
-o .libs/WKBReader.o
../io/WKBReader.cpp: In function `static class ostream & 
geos::WKBReader::printHEX(istream &, ostream &)':
../io/WKBReader.cpp:27: syntax error before `::'
../io/WKBReader.cpp:46: `fl' undeclared (first use this function)
../io/WKBReader.cpp:46: (Each undeclared identifier is reported only once
../io/WKBReader.cpp:46: for each function it appears in.)
gmake[2]: *** [WKBReader.lo] Error 1
gmake[2]: Leaving directory `/data/src/geos-2.2.1/source/geom'
gmake[1]: *** [all-recursive] Error 1
gmake[1]: Leaving directory `/data/src/geos-2.2.1/source'
gmake: *** [all-recursive] Error 1
--------------------------------------------------------------------


If you need to have more information, please let me know!


Any idea?


Kind Regards,
Ben









strk@refractions.net schrieb:
> If you are more specific on what's wrong we *might* help.
> --strk;
> 
> On Fri, Dec 23, 2005 at 08:52:55AM +0100, Benjamin Thelen wrote:
> 
>>Hello list,
>>
>>I've just subscribed to the geos-devel list in order to ask what it's
>>about geos > 2.1.4 (which succesfully builds on FreeBSD4) on FreeBSD4
>>and saw that the responsible FreeBSD portmaintainer has already been 
>>asking there. But to be honest, I did't get the conclusion, whether you 
>>or he is working on a solution or whether there already is a solution or 
>>whether there is just no.
>>
>>I've just tried to build 2.2.0, 2.2.1 using gcc-3.4, but without success.
>>
>>What's the status, will there be a solution or a workaround? This would
>>really be great! I'd really appreciate any information.
>>
>>Thanks,
>>Ben
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Mon Jan  9 06:17:00 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <43C2438C.4050508@ccgis.de>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
	<43C2438C.4050508@ccgis.de>
Message-ID: <20060109111700.GF46109@keybit.net>

>From the INSTALL file in GEOS toplevel dir:

<<
Compatibility notes
===================

GCC 2.95.2 seems to lack the 'sstream' header file required
to build GEOS. GCC 2.96 is known to work.
>>

--strk;


On Mon, Jan 09, 2006 at 12:05:48PM +0100, Benjamin Thelen wrote:
> Hello,
> 
> Ups, sorry, my fault. I've been so busy with this, that I mistakenly 
> assumed that you of course know what I'm talking about :-). Sorry.
> 
> 
> Building geos-2.2.1 fails on FreeBSD 4.11 (gcc-2.95) with this error:
> 
> --------------------------------------------------------------------
> .
> .
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
> -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.1 
> -g -O2 -c ../io/WKBReader.cpp -Wp,-MD,.deps/WKBReader.TPlo  -fPIC -DPIC 
> -o .libs/WKBReader.o
> ../io/WKBReader.cpp: In function `static class ostream & 
> geos::WKBReader::printHEX(istream &, ostream &)':
> ../io/WKBReader.cpp:27: syntax error before `::'
> ../io/WKBReader.cpp:46: `fl' undeclared (first use this function)
> ../io/WKBReader.cpp:46: (Each undeclared identifier is reported only once
> ../io/WKBReader.cpp:46: for each function it appears in.)
> gmake[2]: *** [WKBReader.lo] Error 1
> gmake[2]: Leaving directory `/data/src/geos-2.2.1/source/geom'
> gmake[1]: *** [all-recursive] Error 1
> gmake[1]: Leaving directory `/data/src/geos-2.2.1/source'
> gmake: *** [all-recursive] Error 1
> --------------------------------------------------------------------
> 
> 
> If you need to have more information, please let me know!
> 
> 
> Any idea?
> 
> 
> Kind Regards,
> Ben
> 
> 
> 
> 
> 
> 
> 
> 
> 
> strk@refractions.net schrieb:
> >If you are more specific on what's wrong we *might* help.
> >--strk;
> >
> >On Fri, Dec 23, 2005 at 08:52:55AM +0100, Benjamin Thelen wrote:
> >
> >>Hello list,
> >>
> >>I've just subscribed to the geos-devel list in order to ask what it's
> >>about geos > 2.1.4 (which succesfully builds on FreeBSD4) on FreeBSD4
> >>and saw that the responsible FreeBSD portmaintainer has already been 
> >>asking there. But to be honest, I did't get the conclusion, whether you 
> >>or he is working on a solution or whether there already is a solution or 
> >>whether there is just no.
> >>
> >>I've just tried to build 2.2.0, 2.2.1 using gcc-3.4, but without success.
> >>
> >>What's the status, will there be a solution or a workaround? This would
> >>really be great! I'd really appreciate any information.
> >>
> >>Thanks,
> >>Ben
> >
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From niki.spahiev at gmail.com  Mon Jan  9 06:43:35 2006
From: niki.spahiev at gmail.com (Niki Spahiev)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] GEOS and VC++ 2005
In-Reply-To: <931f8ea90601081806i2b2e3436x410835745fb13bd3@mail.gmail.com>
References: <43C05830.2030105@interserv.com>
	<20060108154220.GB41960@keybit.net> <43C1737E.5090307@interserv.com>
	<931f8ea90601081806i2b2e3436x410835745fb13bd3@mail.gmail.com>
Message-ID: <67c229320601090343v2e2f8bd6t@mail.gmail.com>

> For what it's worth, I've always built the C and C++ api as one
> DLL on windows, but you are right.  If we want to parallel unix
> we would need to expose the C++ API, at least for SWIG
> and the C DLL.

No. For SWIG static lib is better. Other way there will be to DLLs.
E.g. geos-2.dll and geos.pyd.

Niki Spahiev

From bt at ccgis.de  Mon Jan  9 08:27:28 2006
From: bt at ccgis.de (Benjamin Thelen)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <20060109111700.GF46109@keybit.net>
References: <43ABACD7.9010202@ccgis.de>
	<20051229110134.GA61427@keybit.net>	<43C2438C.4050508@ccgis.de>
	<20060109111700.GF46109@keybit.net>
Message-ID: <43C264C0.5040309@ccgis.de>



Well, I don't have 2.96, but I have 3.4.6, what doesn't do a better job, 
I'm afraid:


Making all in capi
gmake[2]: Entering directory 
`/data/ports/graphics/geos/work/geos-2.2.1/source/capi'
if /bin/sh /usr/local/bin/libtool15 --mode=compile --tag=CXX g++34 
-DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos  -DGEOS_CAPI_VERSION='"2.2.1-CAPI-1.0.1"' 
-O -pipe -march=pentiumpro -MT libgeos_c_la-geos_c.lo -MD -MP -MF 
".deps/libgeos_c_la-geos_c.Tpo" -c -o libgeos_c_la-geos_c.lo `test -f 
'geos_c.cpp' || echo './'`geos_c.cpp; \
then mv -f ".deps/libgeos_c_la-geos_c.Tpo" 
".deps/libgeos_c_la-geos_c.Plo"; else rm -f 
".deps/libgeos_c_la-geos_c.Tpo"; exit 1; fi
mkdir .libs
  g++34 -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos -DGEOS_CAPI_VERSION=\"2.2.1-CAPI-1.0.1\" -O 
-pipe -march=pentiumpro -MT libgeos_c_la-geos_c.lo -MD -MP -MF 
.deps/libgeos_c_la-geos_c.Tpo -c geos_c.cpp  -fPIC -DPIC -o 
.libs/libgeos_c_la-geos_c.o
  g++34 -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos -DGEOS_CAPI_VERSION=\"2.2.1-CAPI-1.0.1\" -O 
-pipe -march=pentiumpro -MT libgeos_c_la-geos_c.lo -MD -MP -MF 
.deps/libgeos_c_la-geos_c.Tpo -c geos_c.cpp -o libgeos_c_la-geos_c.o 
 >/dev/null 2>&1
/bin/sh /usr/local/bin/libtool15 --mode=link --tag=CXX g++34  -O -pipe 
-march=pentiumpro   -o libgeos_c.la -rpath /usr/local/lib -version-info 
1:1:0 -no-undefined libgeos_c_la-geos_c.lo  ../../source/geom/libgeos.la
c++ -shared -nostdlib /usr/lib/crti.o /usr/lib/crtbeginS.o 
.libs/libgeos_c_la-geos_c.o  -Wl,--rpath 
-Wl,/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs 
-Wl,--rpath -Wl,/usr/local/lib ../../source/geom/.libs/libgeos.so 
-L/usr/lib -lstdc++ -lm -lgcc /usr/lib/crtendS.o /usr/lib/crtn.o 
-march=pentiumpro -Wl,-soname -Wl,libgeos_c.so.1 -o .libs/libgeos_c.so.1
(cd .libs && rm -f libgeos_c.so && ln -s libgeos_c.so.1 libgeos_c.so)
(cd .libs && rm -f libgeos_c.so && ln -s libgeos_c.so.1 libgeos_c.so)
ar cru .libs/libgeos_c.a  libgeos_c_la-geos_c.o
ranlib .libs/libgeos_c.a
creating libgeos_c.la
(cd .libs && rm -f libgeos_c.la && ln -s ../libgeos_c.la libgeos_c.la)
if gcc34 -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos     -O -pipe -march=pentiumpro -MT 
geostest.o -MD -MP -MF ".deps/geostest.Tpo" -c -o geostest.o geostest.c; \
then mv -f ".deps/geostest.Tpo" ".deps/geostest.Po"; else rm -f 
".deps/geostest.Tpo"; exit 1; fi
/bin/sh /usr/local/bin/libtool15 --mode=link --tag=CC gcc34  -O -pipe 
-march=pentiumpro   -o geostest  geostest.o libgeos_c.la 
../../source/geom/libgeos.la
gcc34 -O -pipe -march=pentiumpro -o .libs/geostest geostest.o 
./.libs/libgeos_c.so 
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so 
../../source/geom/.libs/libgeos.so -Wl,--rpath -Wl,/usr/local/lib
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ios<char, std::char_traits<char> 
 >::init(std::basic_streambuf<char, std::char_traits<char> >*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, 
std::char_traits<char> >&, char const*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `__cxa_rethrow'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::operator<< <char, std::char_traits<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::basic_string(unsigned int, char, 
std::allocator<char> const&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::operator+=(char)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `__gnu_cxx::__exchange_and_add(int volatile*, int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::operator=(char const*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::_Rb_tree_decrement(std::_Rb_tree_node_base*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for std::basic_ostringstream<char, 
std::char_traits<char>, std::allocator<char> >'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::compare(char const*) const'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> 
 >::basic_string(std::basic_string<char, std::char_traits<char>, 
std::allocator<char> > const&)'
./.libs/libgeos_c.so: undefined reference to 
`std::basic_ostringstream<char, std::char_traits<char>, 
std::allocator<char> >::str() const'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::cerr'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, 
std::char_traits<char> >&, char)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `typeinfo for void*'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::allocator<char>::~allocator()'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> 
 >::operator=(std::basic_string<char, std::char_traits<char>, 
std::allocator<char> > const&)'
./.libs/libgeos_c.so: undefined reference to 
`std::allocator<char>::allocator()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `VTT for std::basic_ostringstream<char, 
std::char_traits<char>, std::allocator<char> >'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::append(char const*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::assign(std::basic_string<char, 
std::char_traits<char>, std::allocator<char> > const&)'
./.libs/libgeos_c.so: undefined reference to `vtable for 
__cxxabiv1::__pointer_type_info'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for __cxxabiv1::__si_class_type_info'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> >::~basic_string()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::operator<<(std::basic_ostream<char, std::char_traits<char> >& 
(*)(std::basic_ostream<char, std::char_traits<char> >&))'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ios<char, std::char_traits<char> 
 >::~basic_ios()'
./.libs/libgeos_c.so: undefined reference to `operator delete(void*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::_Rb_tree_increment(std::_Rb_tree_node_base 
const*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ios<char, std::char_traits<char> 
 >::eof() const'
./.libs/libgeos_c.so: undefined reference to `__cxa_end_catch'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to 
`std::allocator<char>::allocator(std::allocator<char> const&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_stringbuf<char, 
std::char_traits<char>, std::allocator<char> 
 >::basic_stringbuf(std::_Ios_Openmode)'
./.libs/libgeos_c.so: undefined reference to `__gxx_personality_v0'
./.libs/libgeos_c.so: undefined reference to `typeinfo for std::exception'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::reserve(unsigned int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ios<char, std::char_traits<char> 
 >::operator void*() const'
./.libs/libgeos_c.so: undefined reference to 
`std::allocator<char>::~allocator()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::_Rep::_S_empty_rep_storage'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `__cxa_pure_virtual'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::operator<<(int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::operator[](unsigned int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::ios_base::ios_base()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::operator<<(unsigned int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::basic_ostream()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ios<char, std::char_traits<char> 
 >::widen(char) const'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::locale::~locale()'
./.libs/libgeos_c.so: undefined reference to `std::ios_base::Init::Init()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_istream<char, std::char_traits<char> 
 >::read(char*, int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for __cxxabiv1::__class_type_info'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `__cxa_throw'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::find_first_not_of(char const*, unsigned int) const'
./.libs/libgeos_c.so: undefined reference to 
`std::basic_istringstream<char, std::char_traits<char>, 
std::allocator<char> >::~basic_istringstream()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::_Rb_tree_insert_and_rebalance(bool, 
std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, 
std::_Rb_tree_node_base&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::~basic_ostream()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::append(std::basic_string<char, 
std::char_traits<char>, std::allocator<char> > const&)'
./.libs/libgeos_c.so: undefined reference to `std::basic_istream<char, 
std::char_traits<char> >::seekg(long long, std::_Ios_Seekdir)'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> >::basic_string(char 
const*, std::allocator<char> const&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to 
`std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, 
std::_Rb_tree_node_base&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_istream<char, std::char_traits<char> 
 >::tellg()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::_M_leak_hard()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for __cxxabiv1::__vmi_class_type_info'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::substr(unsigned int, unsigned int) const'
./.libs/libgeos_c.so: undefined reference to `std::ios_base::Init::~Init()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for std::basic_stringbuf<char, 
std::char_traits<char>, std::allocator<char> >'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for std::basic_streambuf<char, 
std::char_traits<char> >'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> >::basic_string(char 
const*, unsigned int, std::allocator<char> const&)'
./.libs/libgeos_c.so: undefined reference to `__cxa_begin_catch'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `__cxa_allocate_exception'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `vtable for std::basic_ios<char, 
std::char_traits<char> >'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, 
std::char_traits<char> >&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to 
`std::allocator<char>::allocator(std::allocator<char> const&)'
./.libs/libgeos_c.so: undefined reference to 
`std::basic_ostringstream<char, std::char_traits<char>, 
std::allocator<char> >::~basic_ostringstream()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::write(char const*, int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::_Rb_tree_increment(std::_Rb_tree_node_base*)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::cout'
./.libs/libgeos_c.so: undefined reference to `operator new(unsigned int)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::operator+=(std::basic_string<char, 
std::char_traits<char>, std::allocator<char> > const&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::find_first_of(char const*, unsigned int) const'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> >::c_str() const'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ios<char, std::char_traits<char> 
 >::clear(std::_Ios_Iostate)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >::operator<<(double)'
./.libs/libgeos_c.so: undefined reference to 
`std::basic_istringstream<char, std::char_traits<char>, 
std::allocator<char> >::str(std::basic_string<char, 
std::char_traits<char>, std::allocator<char> > const&)'
./.libs/libgeos_c.so: undefined reference to 
`std::basic_istringstream<char, std::char_traits<char>, 
std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::operator+=(char const*)'
./.libs/libgeos_c.so: undefined reference to 
`std::basic_ostringstream<char, std::char_traits<char>, 
std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> >::length() const'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `__cxa_bad_typeid'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_ostream<char, std::char_traits<char> 
 >& std::operator<< <char, std::char_traits<char>, std::allocator<char> 
 >(std::basic_ostream<char, std::char_traits<char> >&, 
std::basic_string<char, std::char_traits<char>, std::allocator<char> > 
const&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_istream<char, std::char_traits<char> 
 >::seekg(std::fpos<__mbstate_t>)'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::_Rep::_M_refdata()'
./.libs/libgeos_c.so: undefined reference to `std::basic_string<char, 
std::char_traits<char>, std::allocator<char> >::basic_string()'
/data/ports/graphics/geos/work/geos-2.2.1/source/geom/.libs/libgeos.so: 
undefined reference to `std::basic_string<char, std::char_traits<char>, 
std::allocator<char> >::append(char const*, unsigned int)'
collect2: ld returned 1 exit status
gmake[2]: *** [geostest] Error 1
gmake[2]: Leaving directory 
`/data/ports/graphics/geos/work/geos-2.2.1/source/capi'
gmake[1]: *** [all-recursive] Error 1
gmake[1]: Leaving directory 
`/data/ports/graphics/geos/work/geos-2.2.1/source'
gmake: *** [all-recursive] Error 1
*** Error code 2

Stop in /data/ports/graphics/geos.




Ben




strk@refractions.net schrieb:
>>From the INSTALL file in GEOS toplevel dir:
> 
> <<
> Compatibility notes
> ===================
> 
> GCC 2.95.2 seems to lack the 'sstream' header file required
> to build GEOS. GCC 2.96 is known to work.
> 
> 
> --strk;
> 
> 
> On Mon, Jan 09, 2006 at 12:05:48PM +0100, Benjamin Thelen wrote:
> 
>>Hello,
>>
>>Ups, sorry, my fault. I've been so busy with this, that I mistakenly 
>>assumed that you of course know what I'm talking about :-). Sorry.
>>
>>
>>Building geos-2.2.1 fails on FreeBSD 4.11 (gcc-2.95) with this error:
>>
>>--------------------------------------------------------------------
>>.
>>.
>> g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
>>-I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.2.1 
>>-g -O2 -c ../io/WKBReader.cpp -Wp,-MD,.deps/WKBReader.TPlo  -fPIC -DPIC 
>>-o .libs/WKBReader.o
>>../io/WKBReader.cpp: In function `static class ostream & 
>>geos::WKBReader::printHEX(istream &, ostream &)':
>>../io/WKBReader.cpp:27: syntax error before `::'
>>../io/WKBReader.cpp:46: `fl' undeclared (first use this function)
>>../io/WKBReader.cpp:46: (Each undeclared identifier is reported only once
>>../io/WKBReader.cpp:46: for each function it appears in.)
>>gmake[2]: *** [WKBReader.lo] Error 1
>>gmake[2]: Leaving directory `/data/src/geos-2.2.1/source/geom'
>>gmake[1]: *** [all-recursive] Error 1
>>gmake[1]: Leaving directory `/data/src/geos-2.2.1/source'
>>gmake: *** [all-recursive] Error 1
>>--------------------------------------------------------------------
>>
>>
>>If you need to have more information, please let me know!
>>
>>
>>Any idea?
>>
>>
>>Kind Regards,
>>Ben
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>strk@refractions.net schrieb:
>>
>>>If you are more specific on what's wrong we *might* help.
>>>--strk;
>>>
>>>On Fri, Dec 23, 2005 at 08:52:55AM +0100, Benjamin Thelen wrote:
>>>
>>>
>>>>Hello list,
>>>>
>>>>I've just subscribed to the geos-devel list in order to ask what it's
>>>>about geos > 2.1.4 (which succesfully builds on FreeBSD4) on FreeBSD4
>>>>and saw that the responsible FreeBSD portmaintainer has already been 
>>>>asking there. But to be honest, I did't get the conclusion, whether you 
>>>>or he is working on a solution or whether there already is a solution or 
>>>>whether there is just no.
>>>>
>>>>I've just tried to build 2.2.0, 2.2.1 using gcc-3.4, but without success.
>>>>
>>>>What's the status, will there be a solution or a workaround? This would
>>>>really be great! I'd really appreciate any information.
>>>>
>>>>Thanks,
>>>>Ben
>>>
>>>_______________________________________________
>>>geos-devel mailing list
>>>geos-devel@geos.refractions.net
>>>http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>>_______________________________________________
>>geos-devel mailing list
>>geos-devel@geos.refractions.net
>>http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 


From strk at refractions.net  Mon Jan  9 12:29:28 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <43C264C0.5040309@ccgis.de>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
	<43C2438C.4050508@ccgis.de> <20060109111700.GF46109@keybit.net>
	<43C264C0.5040309@ccgis.de>
Message-ID: <20060109172927.GA55997@keybit.net>

On Mon, Jan 09, 2006 at 02:27:28PM +0100, Benjamin Thelen wrote:
> 
> 
> Well, I don't have 2.96, but I have 3.4.6, what doesn't do a better job, 
> I'm afraid:

Is this after a make clean ?

--strk;

From bt at ccgis.de  Tue Jan 10 10:37:19 2006
From: bt at ccgis.de (Benjamin Thelen)
Date: Fri Nov  2 20:52:56 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <20060109172927.GA55997@keybit.net>
References: <43ABACD7.9010202@ccgis.de>
	<20051229110134.GA61427@keybit.net>	<43C2438C.4050508@ccgis.de>
	<20060109111700.GF46109@keybit.net>	<43C264C0.5040309@ccgis.de>
	<20060109172927.GA55997@keybit.net>
Message-ID: <43C3D4AF.3060306@ccgis.de>

Hello,

I used the FreeBSD ports' geos and bend the geos port to use gcc34 what 
lead to the error I've send to you yesterday. I did a make clean, but 
the means I used to force the FreeBSD geos port to use gcc34 did 
obviously not suffice.

Doing a "gmake clean && ./configure CC=gcc34 CXX=g++34 && gmake" not 
using the ports version did it:

root@wms1# chmod u+x tools/geos-config
root@wms1# tools/geos-config --version
2.2.1

This is geos-2.2.1 built with gcc34 on FreeBSD 4.11. Of course up to 
now, I don't know, whether geos will work correctly! Are there maybe 
some tests I can perform to check the functionality quickly?

I'll get in touch with the ports maintainer again, I think.

Thanks,
Ben







strk@refractions.net schrieb:
> On Mon, Jan 09, 2006 at 02:27:28PM +0100, Benjamin Thelen wrote:
> 
>>
>>Well, I don't have 2.96, but I have 3.4.6, what doesn't do a better job, 
>>I'm afraid:
> 
> 
> Is this after a make clean ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Tue Jan 10 11:46:29 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <43C3D4AF.3060306@ccgis.de>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
	<43C2438C.4050508@ccgis.de> <20060109111700.GF46109@keybit.net>
	<43C264C0.5040309@ccgis.de> <20060109172927.GA55997@keybit.net>
	<43C3D4AF.3060306@ccgis.de>
Message-ID: <20060110164629.GB68822@keybit.net>

You can:

(1)
	$ cd source/test
	$ ./XMLTester testLeaksBig.xml | tail -4

(2)
	- Build postgis against the newly installed GEOS
	$ make test

--strk;

On Tue, Jan 10, 2006 at 04:37:19PM +0100, Benjamin Thelen wrote:
> Hello,
> 
> I used the FreeBSD ports' geos and bend the geos port to use gcc34 what 
> lead to the error I've send to you yesterday. I did a make clean, but 
> the means I used to force the FreeBSD geos port to use gcc34 did 
> obviously not suffice.
> 
> Doing a "gmake clean && ./configure CC=gcc34 CXX=g++34 && gmake" not 
> using the ports version did it:
> 
> root@wms1# chmod u+x tools/geos-config
> root@wms1# tools/geos-config --version
> 2.2.1
> 
> This is geos-2.2.1 built with gcc34 on FreeBSD 4.11. Of course up to 
> now, I don't know, whether geos will work correctly! Are there maybe 
> some tests I can perform to check the functionality quickly?
> 
> I'll get in touch with the ports maintainer again, I think.
> 
> Thanks,
> Ben
> 
> 
> 
> 
> 
> 
> 
> strk@refractions.net schrieb:
> >On Mon, Jan 09, 2006 at 02:27:28PM +0100, Benjamin Thelen wrote:
> >
> >>
> >>Well, I don't have 2.96, but I have 3.4.6, what doesn't do a better job, 
> >>I'm afraid:
> >
> >
> >Is this after a make clean ?
> >
> >--strk;
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From cfis at interserv.com  Tue Jan 10 03:43:32 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] Updated SWIG bindings and Patch
Message-ID: <43C373B4.9040909@interserv.com>

I've finally had a chance over the last couple of days to dig into the 
Geos SWIG bindings and made a bunch of changes - see the attached 
patch.  The good news is that everything now works, I can run through 
the example test program without causing any segmentation faults.  So at 
this point I think the SWIG bindings are in pretty good shape for Ruby, 
and hopefully not to far behind for Python.

Changes include:

1.  Went through public GEOS api and figured out which methods return 
new objects and which methods take ownership of objects.  I then updated 
the SWIG bindings appropriately.

2.  Added better exception handling

Last, I just want to publicly write down the tricky bit of the SWIG 
bindings for anyone who struggles with them in the future.  The key 
issue is that GEOS makes heavy use of vectors of pointers (geometry, 
linestrings and polygons).  This can be tricky in a scripting language - 
imagine this scenario (in Ruby):

// create a geometry vector
geoms = Geos::GeometryVector.new()
// create a point
point = Geos::GeomFactory.createPoint(someCoord)
// put the point in the vector
geoms.push(point)
// release the reference to the point
point = nil
// run the garbage collector
GC.start()

Although the Ruby point object has gone out of scope, we do not want to 
free the underlying C++ object because its still in the vector and may 
be accessed again.  I've setup the Ruby SWIG bindings to handle this 
appropriately via the use of Ruby mark functions.

I haven't tested this with Python, but Python works differently than 
Ruby since it uses reference counting to keep track of objects.  So the 
Python binding benefits from the changes described above, but at some 
point needs to be checked that it is handling vectors of geometries 
correctly.

Thanks,

Charlie


Index: swig/geos.i
===================================================================
RCS file: /home/cvs/postgis/geos/swig/geos.i,v
retrieving revision 1.6
diff -u -b -r1.6 geos.i
--- swig/geos.i    22 Dec 2005 12:46:13 -0000    1.6
+++ swig/geos.i    10 Jan 2006 08:08:19 -0000
@@ -90,7 +90,7 @@
   /* Convert from scripting language string to char* */
   if (SWIG_AsCharPtrAndSize($input, &buf, &size, &alloc) != SWIG_OK)
   {
-    %argument_fail(SWIG_TypeError, "(TYPEMAP, SIZE)", $argnum);
+    %argument_fail(SWIG_TypeError, "(TYPEMAP, SIZE)", $symname, $argnum);
   }
  
   /* Write data to the stream */
@@ -133,20 +133,80 @@
 %apply SWIGTYPE *DISOWN { geos::CoordinateSequence * };
 %apply SWIGTYPE *DISOWN { geos::LinearRing * };
 %apply SWIGTYPE *DISOWN { std::vector<geos::Geometry * > * };
+%apply SWIGTYPE *DISOWN { std::vector<geos::Coordinate> * };
 
 
+// These methods create new objects
+%newobject *::clone;
+%newobject *::getCoordinates;
+%newobject geos::WKBReader::read;
+%newobject geos::WKBReader::read_hex;
+%newobject geos::WKTReader::read;
+%newobject geos::DefaultCoordinateSequenceFactory::create;
+%newobject geos::GeometryFactory::createPointFromInternalCoord;
+%newobject geos::GeometryFactory::toGeometry;
+%newobject geos::GeometryFactory::createPoint;
+%newobject geos::GeometryFactory::createGeometryCollection;
+%newobject geos::GeometryFactory::createMultiLineString;
+%newobject geos::GeometryFactory::createMultiPolygon;
+%newobject geos::GeometryFactory::createLinearRing;
+%newobject geos::GeometryFactory::createMultiPoint;
+%newobject geos::GeometryFactory::createPolygon;
+%newobject geos::GeometryFactory::createLineString;
+%newobject geos::GeometryFactory::buildGeometry;
+%newobject geos::GeometryFactory::createGeometry;
+%newobject geos::GeometricShapeFactory::getEnvelope;
+
 /* ================= Exception Handling  ============== */
 
-/* Setup up generalized exception handling */
+/* Mark these classes as exception classes */
+%exceptionclass geos::GEOSException;
+
+/* These are all subclasses of GEOSException */
+%exceptionclass geos::AssertionFailedException;
+%exceptionclass geos::IllegalArgumentException;
+%exceptionclass geos::ParseException;
+%exceptionclass geos::TopologyException;
+%exceptionclass geos::UnsupportedOperationException;
+
+/* This exception class is not surfaced to SWIG
+%exceptionclass geos::NotRepresentableException;*/
+
+/* Setup up generalized exception handling.  Note that GEOS throws
+   classes that are allocated on the heap so we need to catch them
+   by pointer and are responsible for freeing them.  To do this
+   we'll just pass the object along the scripting language (wrapped
+   of course) and make it responsbile for freeing the object via the
+   use of the SWIG_POINTER_OWN flag.*/
+
 %exception {
     try {
         $action
     }
+  catch (geos::AssertionFailedException *e) {
+            %raise(SWIG_NewPointerObj(e, 
SWIGTYPE_p_geos__AssertionFailedException, SWIG_POINTER_OWN), 
"geos::AssertionFailedException", 
SWIGTYPE_p_geos__AssertionFailedException);
+  }
+  catch (geos::IllegalArgumentException *e) {
+            %raise(SWIG_NewPointerObj(e, 
SWIGTYPE_p_geos__IllegalArgumentException, SWIG_POINTER_OWN), 
"geos::IllegalArgumentException", 
SWIGTYPE_p_geos__IllegalArgumentException);
+  }
+  catch (geos::ParseException *e) {
+            %raise(SWIG_NewPointerObj(e, 
SWIGTYPE_p_geos__ParseException, SWIG_POINTER_OWN), 
"geos::ParseException", SWIGTYPE_p_geos__ParseException);
+  }
+  catch (geos::TopologyException *e) {
+            %raise(SWIG_NewPointerObj(e, 
SWIGTYPE_p_geos__TopologyException, SWIG_POINTER_OWN), 
"geos::TopologyException", SWIGTYPE_p_geos__TopologyException);
+  }
+  catch (geos::UnsupportedOperationException *e) {
+            %raise(SWIG_NewPointerObj(e, 
SWIGTYPE_p_geos__UnsupportedOperationException, SWIG_POINTER_OWN), 
"geos::UnsupportedOperationException", 
SWIGTYPE_p_geos__UnsupportedOperationException);
+  }
     catch (geos::GEOSException *e) {
-        SWIG_exception(SWIG_RuntimeError, e->toString().data());
+            %raise(SWIG_NewPointerObj(e, 
SWIGTYPE_p_geos__GEOSException, SWIG_POINTER_OWN), 
"geos::GEOSException", SWIGTYPE_p_geos__GEOSException);
+  }
+  catch (...) {
+      SWIG_exception(SWIG_RuntimeError, "Unknown exception took place 
in the method: $symname.");
     }
 }
 
+
 /* =============  Classes to ignore (why are these ignored? ======= */
 %ignore geos::LineMergeDirectedEdge;
 %ignore geos::PolygonizeEdge;
Index: swig/ruby/renames.i
===================================================================
RCS file: /home/cvs/postgis/geos/swig/ruby/renames.i,v
retrieving revision 1.1
diff -u -b -r1.1 renames.i
--- swig/ruby/renames.i    22 Dec 2005 12:46:13 -0000    1.1
+++ swig/ruby/renames.i    8 Jan 2006 21:04:34 -0000
@@ -301,6 +301,8 @@
 %rename(get_cut_edges) geos::Polygonizer::getCutEdges;
 %rename(get_invalid_ring_lines) geos::Polygonizer::getInvalidRingLines;
 %rename(print_hex) geos::WKBReader::printHEX;
+%rename(read_hex) geos::WKBReader::readHEX;
+%rename(write_hex) geos::WKBWriter::writeHEX;
 
 // -------  SWIG Aliases ------------
 %alias geos::CoordinateSequenceFactory::create "create";
Index: swig/ruby/ruby.i
===================================================================
RCS file: /home/cvs/postgis/geos/swig/ruby/ruby.i,v
retrieving revision 1.1
diff -u -b -r1.1 ruby.i
--- swig/ruby/ruby.i    22 Dec 2005 12:46:13 -0000    1.1
+++ swig/ruby/ruby.i    10 Jan 2006 08:23:48 -0000
@@ -48,7 +48,200 @@
 #undef select
 %}
 
-/* Define various template classes */
+
+/* Extend a few classes to add nice string representations */
+%extend geos::PrecisionModel {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::PrecisionModel ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::Coordinate {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::Coordinate ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::CoordinateSequence {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::CoordinateSequence ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::DefaultCoordinateSequence {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::DefaultCoordinateSequence ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::Envelope {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::Envelope ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::Geometry {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::Geometry ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::LineSegment {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::LineSegment ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+%extend geos::IntersectionMatrix {
+    string to_s()
+    {
+        ostringstream os;
+        os << "<Geos::IntersectionMatrix ";
+        os << self->toString();
+        os << ">";
+        return os.str();
+    }
+};
+
+/* Geos uses vectors of pointers to pass around geometries.  These will be
+     wrapped by SWIG - but we have to be careful.  The problem is
+   if we put a C++ object into the vector that a Ruby object owns, when
+   that Ruby object goes out of scope the C++ object will be freed.  Thus
+   the pointer inside the vector becomes corrupt.  To stop this from 
happening
+   we have to implement a Ruby mark function, which in turn requires 
turning
+   on SWIG Ruby Object tracking for these containers.*/
+
+// First declare mark functions for the containers
+%markfunc std::vector<geos::Geometry *> "mark_GeometryVector";
+%markfunc std::vector<geos::LineString *> "mark_LineStringVector";
+%markfunc std::vector<geos::Polygon *> "mark_PolygonVector";
+
+// Now define the containers
 %template("GeometryVector") std::vector<geos::Geometry *>;
 %template("LineStringVector") std::vector<geos::LineString *>;
 %template("PolygonVector") std::vector<geos::Polygon *>;
+
+// Now track the objects that go go into the containers, which
+// is Geometry or any class inherited from Geometry
+%trackobjects geos::Geometry;
+%trackobjects geos::Point;
+%trackobjects geos::LineString;
+%trackobjects geos::LinearRing;
+%trackobjects geos::Polygon;
+%trackobjects geos::GeometryCollection;
+%trackobjects geos::MultiPoint;
+%trackobjects geos::MultiLineString;
+%trackobjects geos::MultiPolygon;
+
+// Last define the mark functions
+%header %{
+    static void mark_GeometryVector(void* ptr)
+    {
+      typedef std::vector<geos::Geometry *> GeometryVector;
+      typedef GeometryVector::iterator GeometryVectorIter;
+     
+      GeometryVector *vec = reinterpret_cast<GeometryVector*>(ptr);
+      GeometryVectorIter iter = vec->begin();
+      GeometryVectorIter last = vec->end();
+     
+        for(; iter != last; ++iter)
+        {
+            geos::Geometry *geometry = *iter;
+            VALUE object = SWIG_RubyInstanceFor(geometry);
+            if (object != Qnil)
+            {
+                rb_gc_mark(object);
+            }
+            else
+            {
+                // This should not happen
+                rb_raise(rb_eRuntimeError, "Unknown object stored in 
vector");
+            }
+        }
+    }
+
+    static void mark_LineStringVector(void* ptr)
+    {
+      typedef std::vector<geos::LineString *> LineStringVector;
+      typedef LineStringVector::iterator LineStringVectorIter;
+     
+      LineStringVector *vec = reinterpret_cast<LineStringVector*>(ptr);
+      LineStringVectorIter iter = vec->begin();
+      LineStringVectorIter last = vec->end();
+     
+        for(; iter != last; ++iter)
+        {
+            geos::LineString *geometry = *iter;
+            VALUE object = SWIG_RubyInstanceFor(geometry);
+            if (object != Qnil)
+            {
+                rb_gc_mark(object);
+            }
+            else
+            {
+                // This should not happen
+                rb_raise(rb_eRuntimeError, "Unknown object stored in 
vector");
+            }
+        }
+    }
+
+    static void mark_PolygonVector(void* ptr)
+    {
+      typedef std::vector<geos::Polygon *> PolygonVector;
+      typedef PolygonVector::iterator PolygonVectorIter;
+     
+      PolygonVector *vec = reinterpret_cast<PolygonVector*>(ptr);
+      PolygonVectorIter iter = vec->begin();
+      PolygonVectorIter last = vec->end();
+     
+        for(; iter != last; ++iter)
+        {
+            geos::Polygon *geometry = *iter;
+            VALUE object = SWIG_RubyInstanceFor(geometry);
+            if (object != Qnil)
+            {
+                rb_gc_mark(object);
+            }
+            else
+            {
+                // This should not happen
+                rb_raise(rb_eRuntimeError, "Unknown object stored in 
vector");
+            }
+        }
+    }
+%}



-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060110/7f227c57/smime.bin
From cfis at interserv.com  Tue Jan 10 03:55:26 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] Ruby Test Suite
Message-ID: <43C3767E.8010105@interserv.com>

In case people are interested, I developed a set of unit tests to make 
sure the Ruby bindings were working correctly.  I did this by running 
the example C++ program, noted down the results, and made sure the Ruby 
bindings match them.  So no guarantee the results are actually correct, 
but it would be quite easy to see if they change in the future.  Patch 
is below.

One thing I did notice of interest - I can't round trip one of the 
polygons via either the WKT or WKB format (by roundtrip I mean take a 
geometry, output it to WKT/WKB, then reimport it).  The geometry of 
interest is this one:

Geom In: <Geos::Geometry POLYGON ((5.00 0.00, 4.99 0.31, 4.96 0.63, 4.91 
0.94, etc. >>

It comes back as this:

Geom Out: <Geos::Geometry POLYGON ((5.00 0.00, 5.00 0.50, 5.00 0.50, 
5.00 1.00, etc. >>

Should this be happening - is it a precision issue.  I'm creating the 
geometry the same way as in the C++ code, so like this:

    pm = Geos::PrecisionModel.new(2.0, 0, 0)
    @geom_factory = Geos::GeometryFactory.new(pm, -1)

Thanks,

Charlie
 
----------------------------------------------------

--- /dev/null    Tue Jan 10 01:46:19 2006
+++ geos_tests.rb    Mon Jan  9 19:00:06 2006
@@ -0,0 +1,7 @@
+# Runs the test cases that have been developed for GEOS
+
+require 'test_simple'
+require 'test_io'
+require 'test_operations'
+require 'test_relations'
+require 'test_combinations'
--- /dev/null    Tue Jan 10 01:46:34 2006
+++ test_simple.rb    Mon Jan  9 18:56:26 2006
@@ -0,0 +1,30 @@
+#!/usr/bin/env ruby
+
+require 'test/unit'
+require 'geos'
+require 'test_helper'
+
+class TestGeosSimple < Test::Unit::TestCase
+  def setup
+    @test_helper = GeosTestHelper.new()
+  end
+  
+  def test_create_coord
+    coord = @test_helper.create_coord(5,6)
+    assert_equal(5, coord.x)
+    assert_equal(6, coord.y)
+  end
+  
+  def test_create_point
+    point = @test_helper.create_point(5,6)
+    assert_equal(5, point.x)
+    assert_equal(6, point.y)
+  end
+
+  def test_envelope
+    in_envelope = Geos::Envelope.new(3.1,3.3, 7.215, 8.392)
+    str = in_envelope.to_string()
+    out_envelope = Geos::Envelope.new(str)
+    assert(out_envelope.equals(in_envelope))
+  end
+end
\ No newline at end of file
--- /dev/null    Tue Jan 10 01:46:41 2006
+++ test_io.rb    Tue Jan 10 01:09:09 2006
@@ -0,0 +1,67 @@
+#!/usr/bin/env ruby
+
+require 'test/unit'
+require 'geos'
+require 'test_helper'
+
+class TestGeosIO < Test::Unit::TestCase
+  def setup
+    @test_helper = GeosTestHelper.new()
+  end
+
+  def run_test(message, &block)
+    # This function tests writing and reading geometries to
+    # the well-known binary hex format
+    geoms = @test_helper.create_geoms()
+
+    STDOUT << "\n" << "-------- #{message} ----------" << "\n"
+    geoms.each do |geom_in|
+      geom_out = yield(geom_in)
+
+      begin
+        ## Geometries should be equal
+        assert(geom_out.equals(geom_in),
+               "Geom In: #{geom_in}\nGeom Out: #{geom_out}")
+      rescue Geos::IllegalArgumentException => error
+        # this is ok
+      end
+
+      ## Check precision model
+      geom_in.normalize()
+      geom_out.normalize()
+
+      ## This seems to always fail
+     # assert_equal(0, geom_in.compare_to(geom_out))
+    end
+  end
+  
+  def test_wkb_hex()
+    wkb_writer = Geos::WKBWriter.new()
+    wkb_reader = Geos::WKBReader.new(@test_helper.geom_factory)
+
+    self.run_test("TESTING WKB HEX IO") do |geom_in|
+      value = wkb_writer.write_hex(geom_in)
+      geom_out = wkb_reader.read_hex(value)
+    end     
+  end
+  
+  def test_wkb()
+    wkb_writer = Geos::WKBWriter.new()
+    wkb_reader = Geos::WKBReader.new(@test_helper.geom_factory)
+
+    self.run_test("TESTING WKB IO") do |geom_in|
+      value = wkb_writer.write(geom_in)
+      geom_out = wkb_reader.read(value)
+    end     
+  end
+  
+  def test_wkt()
+    wkt_writer = Geos::WKTWriter.new()
+    wkt_reader = Geos::WKTReader.new(@test_helper.geom_factory)
+
+    self.run_test("TESTING WKT IO") do |geom_in|
+      value = wkt_writer.write(geom_in)
+      geom_out = wkt_reader.read(value)
+    end     
+  end
+end
\ No newline at end of file
--- /dev/null    Tue Jan 10 01:46:48 2006
+++ test_operations.rb    Mon Jan  9 18:51:31 2006
@@ -0,0 +1,85 @@
+#!/usr/bin/env ruby
+
+require 'test/unit'
+require 'geos'
+require 'test_helper'
+
+class TestGeosOperations < Test::Unit::TestCase
+  def setup
+    @test_helper = GeosTestHelper.new()
+    @wkt_reader = Geos::WKTReader.new(@test_helper.geom_factory)
+  end
+
+  def run_operation(results, &block)
+    geoms = @test_helper.create_geoms()
+
+    geoms.each_with_index do |geom_in, i|
+      # Get expected result
+      expected = @wkt_reader.read(results[i])
+      
+      # Get the actual result
+      actual = yield(geom_in)
+
+      assert(actual.equals(expected),
+             "Expected: #{expected}\nActual: #{actual}")
+    end
+  end
+
+  def test_centroid()
+    results = Array.new()
+    results[0]  = "POINT (150.00 350.00)"
+    results[1]  = "POINT (110.00 126.50)"
+    results[2]  = "POINT (50.00 50.00)"
+    results[3]  = "POINT (150.00 350.00)"
+    results[4]  = "POINT (150.00 400.00)"
+    results[5]  = "POINT (150.00 375.00)"
+    results[6]  = "POINT (-0.00 -0.00)"
+    results[7]  = "POINT (-0.00 0.00)"
+    results[8]  = "POINT (-0.00 -0.00)"
+    results[9]  = "POINT (-0.00 5.00)"
+    results[10] = "POINT (8.50 16.00)"
+
+    run_operation(results) do |geom|
+      geom.get_centroid()
+    end
+  end
+
+  def test_buffer()
+    results = Array.new()
+    results[0]  = "POLYGON ((140.00 348.00, 140.00 350.00, 140.00 
352.00, 141.00 354.00, 141.50 355.50, 143.00 357.00, 144.50 358.50, 
146.00 359.00, 148.00 360.00, 150.00 360.00, 152.00 360.00, 154.00 
359.00, 155.50 358.50, 157.00 357.00, 158.50 355.50, 159.00 354.00, 
160.00 352.00, 160.00 350.00, 160.00 348.00, 159.00 346.00, 158.50 
344.50, 157.00 343.00, 155.50 341.50, 154.00 341.00, 152.00 340.00, 
150.00 340.00, 148.00 340.00, 146.00 341.00, 144.50 341.50, 143.00 
343.00, 141.50 344.50, 141.00 346.00, 140.00 348.00))"
+    results[1]  = "POLYGON ((50.00 58.00, 50.00 60.00, 50.00 160.00, 
50.00 162.00, 51.00 164.00, 51.50 165.50, 53.00 167.00, 54.50 168.50, 
56.00 169.00, 58.00 170.00, 60.00 170.00, 160.00 170.00, 162.00 170.00, 
164.00 169.00, 165.50 168.50, 167.00 167.00, 168.50 165.50, 169.00 
164.00, 170.00 162.00, 170.00 160.00, 170.00 60.00, 170.00 58.00, 169.00 
56.00, 168.50 54.50, 167.00 53.00, 165.50 51.50, 164.00 51.00, 162.00 
50.00, 160.00 50.00, 158.00 50.00, 156.00 51.00, 154.50 51.50, 153.00 
53.00, 151.50 54.50, 151.00 56.00, 150.00 58.00, 150.00 60.00, 150.00 
150.00, 70.00 150.00, 70.00 60.00, 70.00 58.00, 69.00 56.00, 68.50 
54.50, 67.00 53.00, 65.50 51.50, 64.00 51.00, 62.00 50.00, 60.00 50.00, 
58.00 50.00, 56.00 51.00, 54.50 51.50, 53.00 53.00, 51.50 54.50, 51.00 
56.00, 50.00 58.00))"
+    results[2]  = "POLYGON ((-10.00 -2.00, -10.00 0.00, -10.00 2.00, 
-10.00 100.00, -10.00 102.00, -9.00 104.00, -8.50 105.50, -7.00 107.00, 
-5.50 108.50, -4.00 109.00, -2.00 110.00, 0.00 110.00, 100.00 110.00, 
102.00 110.00, 104.00 109.00, 105.50 108.50, 107.00 107.00, 108.50 
105.50, 109.00 104.00, 110.00 102.00, 110.00 100.00, 110.00 0.00, 110.00 
-2.00, 109.00 -4.00, 108.50 -5.50, 107.00 -7.00, 105.50 -8.50, 104.00 
-9.00, 102.00 -10.00, 100.00 -10.00, 2.00 -10.00, 0.00 -10.00, -2.00 
-10.00, -4.00 -9.00, -5.50 -8.50, -7.00 -7.00, -8.50 -5.50, -9.00 -4.00, 
-10.00 -2.00), (10.00 10.00, 90.00 10.00, 90.00 90.00, 10.00 90.00, 
10.00 10.00))"
+    results[3]  = "POLYGON ((-10.00 198.00, -10.00 200.00, -10.00 
500.00, -10.00 502.00, -9.00 504.00, -8.50 505.50, -7.00 507.00, -5.50 
508.50, -4.00 509.00, -2.00 510.00, 0.00 510.00, 300.00 510.00, 302.00 
510.00, 304.00 509.00, 305.50 508.50, 307.00 507.00, 308.50 505.50, 
309.00 504.00, 310.00 502.00, 310.00 500.00, 310.00 200.00, 310.00 
198.00, 309.00 196.00, 308.50 194.50, 307.00 193.00, 305.50 191.50, 
304.00 191.00, 302.00 190.00, 300.00 190.00, 0.00 190.00, -2.00 190.00, 
-4.00 191.00, -5.50 191.50, -7.00 193.00, -8.50 194.50, -9.00 196.00, 
-10.00 198.00), (110.00 310.00, 190.00 310.00, 190.00 390.00, 110.00 
390.00, 110.00 310.00))"
+    results[4]  = "POLYGON ((-10.00 248.00, -10.00 250.00, -10.00 
550.00, -10.00 552.00, -9.00 554.00, -8.50 555.50, -7.00 557.00, -5.50 
558.50, -4.00 559.00, -2.00 560.00, 0.00 560.00, 300.00 560.00, 302.00 
560.00, 304.00 559.00, 305.50 558.50, 307.00 557.00, 308.50 555.50, 
309.00 554.00, 310.00 552.00, 310.00 550.00, 310.00 250.00, 310.00 
248.00, 309.00 246.00, 308.50 244.50, 307.00 243.00, 305.50 241.50, 
304.00 241.00, 302.00 240.00, 300.00 240.00, 0.00 240.00, -2.00 240.00, 
-4.00 241.00, -5.50 241.50, -7.00 243.00, -8.50 244.50, -9.00 246.00, 
-10.00 248.00), (110.00 360.00, 190.00 360.00, 190.00 440.00, 110.00 
440.00, 110.00 360.00))"
+    results[5]  = "MULTIPOLYGON (((-10.00 -2.00, -10.00 0.00, -10.00 
2.00, -10.00 100.00, -10.00 102.00, -9.00 104.00, -8.50 105.50, -7.00 
107.00, -5.50 108.50, -4.00 109.00, -2.00 110.00, 0.00 110.00, 50.00 
110.00, 50.00 160.00, 50.00 162.00, 51.00 164.00, 51.50 165.50, 53.00 
167.00, 54.50 168.50, 56.00 169.00, 58.00 170.00, 60.00 170.00, 160.00 
170.00, 162.00 170.00, 164.00 169.00, 165.50 168.50, 167.00 167.00, 
168.50 165.50, 169.00 164.00, 170.00 162.00, 170.00 160.00, 170.00 
60.00, 170.00 58.00, 169.00 56.00, 168.50 54.50, 167.00 53.00, 165.50 
51.50, 164.00 51.00, 162.00 50.00, 160.00 50.00, 158.00 50.00, 156.00 
51.00, 154.50 51.50, 153.00 53.00, 151.50 54.50, 151.00 56.00, 150.00 
58.00, 150.00 60.00, 150.00 150.00, 70.00 150.00, 70.00 110.00, 100.00 
110.00, 102.00 110.00, 104.00 109.00, 105.50 108.50, 107.00 107.00, 
108.50 105.50, 109.00 104.00, 110.00 102.00, 110.00 100.00, 110.00 0.00, 
110.00 -2.00, 109.00 -4.00, 108.50 -5.50, 107.00 -7.00, 105.50 -8.50, 
104.00 -9.00, 102.00 -10.00, 100.00 -10.00, 2.00 -10.00, 0.00 -10.00, 
-2.00 -10.00, -4.00 -9.00, -5.50 -8.50, -7.00 -7.00, -8.50 -5.50, -9.00 
-4.00, -10.00 -2.00), (10.00 10.00, 90.00 10.00, 90.00 90.00, 70.00 
90.00, 70.00 60.00, 70.00 58.00, 69.00 56.00, 68.50 54.50, 67.00 53.00, 
65.50 51.50, 64.00 51.00, 62.00 50.00, 60.00 50.00, 58.00 50.00, 56.00 
51.00, 54.50 51.50, 53.00 53.00, 51.50 54.50, 51.00 56.00, 50.00 58.00, 
50.00 60.00, 50.00 90.00, 10.00 90.00, 10.00 10.00)), ((-10.00 198.00, 
-10.00 200.00, -10.00 248.00, -10.00 250.00, -10.00 500.00, -10.00 
502.00, -10.00 550.00, -10.00 552.00, -9.00 554.00, -8.50 555.50, -7.00 
557.00, -5.50 558.50, -4.00 559.00, -2.00 560.00, 0.00 560.00, 300.00 
560.00, 302.00 560.00, 304.00 559.00, 305.50 558.50, 307.00 557.00, 
308.50 555.50, 309.00 554.00, 310.00 552.00, 310.00 550.00, 310.00 
502.00, 310.00 500.00, 310.00 250.00, 310.00 248.00, 310.00 200.00, 
310.00 198.00, 309.00 196.00, 308.50 194.50, 307.00 193.00, 305.50 
191.50, 304.00 191.00, 302.00 190.00, 300.00 190.00, 0.00 190.00, -2.00 
190.00, -4.00 191.00, -5.50 191.50, -7.00 193.00, -8.50 194.50, -9.00 
196.00, -10.00 198.00), (110.00 360.00, 148.00 360.00, 150.00 360.00, 
152.00 360.00, 190.00 360.00, 190.00 390.00, 110.00 390.00, 110.00 
360.00)))"
+    results[6]  = "POLYGON ((-15.00 -2.50, -15.00 -2.00, -15.00 -1.50, 
-15.00 -0.50, -15.00 0.50, -15.00 1.50, -15.00 2.00, -15.00 2.50, -14.50 
3.00, -14.50 3.50, -14.50 4.00, -14.50 4.50, -14.00 5.00, -14.00 6.00, 
-13.50 6.00, -13.50 6.50, -13.50 7.00, -13.00 7.50, -13.00 8.00, -12.50 
8.50, -12.00 9.00, -12.00 9.50, -11.50 10.00, -11.00 10.00, -10.50 
10.50, -10.00 11.00, -10.00 11.50, -9.50 12.00, -9.00 12.00, -8.50 
12.50, -8.00 13.00, -7.50 13.00, -7.00 13.50, -6.50 13.50, -6.00 13.50, 
-6.00 14.00, -5.00 14.00, -4.50 14.50, -4.00 14.50, -3.50 14.50, -3.00 
14.50, -2.50 15.00, -2.00 15.00, -1.50 15.00, -0.50 15.00, 0.50 15.00, 
1.50 15.00, 2.00 15.00, 2.50 15.00, 3.00 14.50, 3.50 14.50, 4.00 14.50, 
4.50 14.50, 5.00 14.00, 6.00 14.00, 6.00 13.50, 6.50 13.50, 7.00 13.50, 
7.50 13.00, 8.00 13.00, 8.50 12.50, 9.00 12.00, 9.50 12.00, 10.00 11.50, 
10.00 11.00, 10.50 10.50, 11.00 10.00, 11.50 10.00, 12.00 9.50, 12.00 
9.00, 12.50 8.50, 13.00 8.00, 13.00 7.50, 13.50 7.00, 13.50 6.50, 13.50 
6.00, 14.00 6.00, 14.00 5.00, 14.50 4.50, 14.50 4.00, 14.50 3.50, 14.50 
3.00, 15.00 2.50, 15.00 2.00, 15.00 1.50, 15.00 0.50, 15.00 -0.50, 15.00 
-1.50, 15.00 -2.00, 15.00 -2.50, 14.50 -3.00, 14.50 -3.50, 14.50 -4.00, 
14.50 -4.50, 14.00 -5.00, 14.00 -6.00, 13.50 -6.00, 13.50 -6.50, 13.50 
-7.00, 13.00 -7.50, 13.00 -8.00, 12.50 -8.50, 12.00 -9.00, 12.00 -9.50, 
11.50 -10.00, 11.00 -10.00, 10.50 -10.50, 10.00 -11.00, 10.00 -11.50, 
9.50 -12.00, 9.00 -12.00, 8.50 -12.50, 8.00 -13.00, 7.50 -13.00, 7.00 
-13.50, 6.50 -13.50, 6.00 -13.50, 6.00 -14.00, 5.00 -14.00, 4.50 -14.50, 
4.00 -14.50, 3.50 -14.50, 3.00 -14.50, 2.50 -15.00, 2.00 -15.00, 1.50 
-15.00, 0.50 -15.00, -0.50 -15.00, -1.50 -15.00, -2.00 -15.00, -2.50 
-15.00, -3.00 -14.50, -3.50 -14.50, -4.00 -14.50, -4.50 -14.50, -5.00 
-14.00, -6.00 -14.00, -6.00 -13.50, -6.50 -13.50, -7.00 -13.50, -7.50 
-13.00, -8.00 -13.00, -8.50 -12.50, -9.00 -12.00, -9.50 -12.00, -10.00 
-11.50, -10.00 -11.00, -10.50 -10.50, -11.00 -10.00, -11.50 -10.00, 
-12.00 -9.50, -12.00 -9.00, -12.50 -8.50, -13.00 -8.00, -13.00 -7.50, 
-13.50 -7.00, -13.50 -6.50, -13.50 -6.00, -14.00 -6.00, -14.00 -5.00, 
-14.50 -4.50, -14.50 -4.00, -14.50 -3.50, -14.50 -3.00, -15.00 -2.50))"
+    results[7]  = "POLYGON ((-14.00 -3.00, -14.00 -2.50, -14.00 -2.00, 
-14.00 -1.50, -14.00 -1.00, -14.00 -0.50, -14.00 -0.00, -14.00 0.50, 
-14.00 1.00, -14.00 1.50, -14.00 2.00, -14.00 2.50, -14.00 3.00, -13.50 
3.50, -13.50 4.00, -13.50 4.50, -13.50 5.00, -13.00 5.50, -13.00 6.00, 
-13.00 6.50, -12.50 7.00, -12.50 7.50, -12.00 8.00, -12.00 8.50, -11.50 
9.00, -11.00 9.50, -11.00 10.00, -10.50 10.50, -10.00 11.00, -10.00 
11.50, -9.50 12.00, -9.00 12.50, -8.50 12.50, -8.00 13.00, -8.00 13.50, 
-7.00 14.00, -6.00 14.50, -5.00 15.00, -4.00 15.50, -3.00 15.50, -2.00 
16.00, -1.50 16.00, -0.50 16.00, 0.50 16.00, 1.50 16.00, 2.00 16.00, 
3.00 15.50, 4.00 15.50, 5.00 15.00, 6.00 14.50, 7.00 14.00, 8.00 13.50, 
8.00 13.00, 8.50 12.50, 9.00 12.50, 9.50 12.00, 10.00 11.50, 10.00 
11.00, 10.50 10.50, 11.00 10.00, 11.00 9.50, 11.50 9.00, 12.00 8.50, 
12.00 8.00, 12.50 7.50, 12.50 7.00, 13.00 6.50, 13.00 6.00, 13.00 5.50, 
13.50 5.00, 13.50 4.50, 13.50 4.00, 13.50 3.50, 14.00 3.00, 14.00 2.50, 
14.00 2.00, 14.00 1.50, 14.00 1.00, 14.00 0.50, 14.00 0.00, 14.00 -0.50, 
14.00 -1.00, 14.00 -1.50, 14.00 -2.00, 14.00 -2.50, 14.00 -3.00, 13.50 
-3.50, 13.50 -4.00, 13.50 -4.50, 13.50 -5.00, 13.00 -5.50, 13.00 -6.00, 
13.00 -6.50, 12.50 -7.00, 12.50 -7.50, 12.00 -8.00, 12.00 -8.50, 11.50 
-9.00, 11.00 -9.50, 11.00 -10.00, 10.50 -10.50, 10.00 -11.00, 10.00 
-11.50, 9.50 -12.00, 9.00 -12.50, 8.50 -12.50, 8.00 -13.00, 8.00 -13.50, 
7.00 -14.00, 6.00 -14.50, 5.00 -15.00, 4.00 -15.50, 3.00 -15.50, 2.00 
-16.00, 1.50 -16.00, 0.50 -16.00, -0.50 -16.00, -1.50 -16.00, -2.00 
-16.00, -3.00 -15.50, -4.00 -15.50, -5.00 -15.00, -6.00 -14.50, -7.00 
-14.00, -8.00 -13.50, -8.00 -13.00, -8.50 -12.50, -9.00 -12.50, -9.50 
-12.00, -10.00 -11.50, -10.00 -11.00, -10.50 -10.50, -11.00 -10.00, 
-11.00 -9.50, -11.50 -9.00, -12.00 -8.50, -12.00 -8.00, -12.50 -7.50, 
-12.50 -7.00, -13.00 -6.50, -13.00 -6.00, -13.00 -5.50, -13.50 -5.00, 
-13.50 -4.50, -13.50 -4.00, -13.50 -3.50, -14.00 -3.00))"
+    results[8]  = "POLYGON ((-15.00 -7.00, -15.00 -5.00, -15.00 5.00, 
-15.00 7.00, -14.00 9.00, -13.50 10.50, -12.00 12.00, -10.50 13.50, 
-9.00 14.00, -7.00 15.00, -5.00 15.00, 5.00 15.00, 7.00 15.00, 9.00 
14.00, 10.50 13.50, 12.00 12.00, 13.50 10.50, 14.00 9.00, 15.00 7.00, 
15.00 5.00, 15.00 -5.00, 15.00 -7.00, 14.00 -9.00, 13.50 -10.50, 12.00 
-12.00, 10.50 -13.50, 9.00 -14.00, 7.00 -15.00, 5.00 -15.00, -5.00 
-15.00, -7.00 -15.00, -9.00 -14.00, -10.50 -13.50, -12.00 -12.00, -13.50 
-10.50, -14.00 -9.00, -15.00 -7.00))"
+    results[9]  = "POLYGON ((-15.00 -7.00, -15.00 -5.00, -15.00 15.00, 
-15.00 17.00, -14.00 19.00, -13.50 20.50, -12.00 22.00, -10.50 23.50, 
-9.00 24.00, -7.00 25.00, -5.00 25.00, 5.00 25.00, 7.00 25.00, 9.00 
24.00, 10.50 23.50, 12.00 22.00, 13.50 20.50, 14.00 19.00, 15.00 17.00, 
15.00 15.00, 15.00 -5.00, 15.00 -7.00, 14.00 -9.00, 13.50 -10.50, 12.00 
-12.00, 10.50 -13.50, 9.00 -14.00, 7.00 -15.00, 5.00 -15.00, -5.00 
-15.00, -7.00 -15.00, -9.00 -14.00, -10.50 -13.50, -12.00 -12.00, -13.50 
-10.50, -14.00 -9.00, -15.00 -7.00))"
+    results[10] = "POLYGON ((-5.00 18.00, -5.00 20.00, -5.00 22.00, 
-4.00 24.00, -3.50 25.50, -2.00 27.00, -0.50 28.50, 1.00 29.00, 3.00 
30.00, 5.00 30.00, 6.00 30.00, 8.00 30.00, 9.00 29.50, 10.00 29.00, 
11.50 28.50, 12.00 28.00, 12.50 28.00, 13.00 27.50, 13.50 27.00, 14.00 
26.50, 14.50 26.00, 15.00 25.50, 15.50 25.00, 16.00 24.50, 16.50 24.00, 
17.00 23.00, 17.00 22.50, 17.00 22.00, 17.50 22.00, 18.00 20.50, 18.50 
19.50, 19.00 18.50, 19.00 18.00, 19.50 17.00, 19.50 16.00, 20.00 15.00, 
20.00 13.00, 20.00 10.00, 20.00 8.00, 19.00 6.00, 18.50 4.50, 17.00 
3.00, 15.50 1.50, 14.00 1.00, 12.00 0.00, 10.00 0.00, 8.00 0.00, 6.00 
1.00, 4.50 1.50, 3.00 3.00, 1.50 4.50, 1.00 6.00, 0.00 8.00, 0.00 10.00, 
-0.50 11.00, -0.50 11.50, -2.00 13.00, -3.50 14.50, -4.00 16.00, -5.00 
18.00))"
+
+    # Note - this test is quite slow
+    run_operation(results) do |geom|
+      geom.buffer(10)
+    end
+  end
+  
+  def test_convex_hull()
+    results = Array.new()
+    results[0]  = "POINT (150.00 350.00)"
+    results[1]  = "POLYGON ((60.00 60.00, 60.00 160.00, 160.00 160.00, 
160.00 60.00, 60.00 60.00))"
+    results[2]  = "POLYGON ((0.00 0.00, 0.00 100.00, 100.00 100.00, 
100.00 0.00, 0.00 0.00))"
+    results[3]  = "POLYGON ((0.00 200.00, 0.00 500.00, 300.00 500.00, 
300.00 200.00, 0.00 200.00))"
+    results[4]  = "POLYGON ((0.00 250.00, 0.00 550.00, 300.00 550.00, 
300.00 250.00, 0.00 250.00))"
+    results[5]  = "POLYGON ((0.00 0.00, 0.00 550.00, 300.00 550.00, 
300.00 200.00, 100.00 0.00, 0.00 0.00))"
+    results[6]  = "POLYGON ((-5.00 0.00, -4.99 0.31, -4.96 0.63, -4.91 
0.94, -4.84 1.24, -4.76 1.55, -4.65 1.84, -4.52 2.13, -4.38 2.41, -4.22 
2.68, -4.05 2.94, -3.85 3.19, -3.64 3.42, -3.42 3.64, -3.19 3.85, -2.94 
4.05, -2.68 4.22, -2.41 4.38, -2.13 4.52, -1.84 4.65, -1.55 4.76, -1.24 
4.84, -0.94 4.91, -0.63 4.96, -0.31 4.99, 0.00 5.00, 0.31 4.99, 0.63 
4.96, 0.94 4.91, 1.24 4.84, 1.55 4.76, 1.84 4.65, 2.13 4.52, 2.41 4.38, 
2.68 4.22, 2.94 4.05, 3.19 3.85, 3.42 3.64, 3.64 3.42, 3.85 3.19, 4.05 
2.94, 4.22 2.68, 4.38 2.41, 4.52 2.13, 4.65 1.84, 4.76 1.55, 4.84 1.24, 
4.91 0.94, 4.96 0.63, 4.99 0.31, 5.00 0.00, 4.99 -0.31, 4.96 -0.63, 4.91 
-0.94, 4.84 -1.24, 4.76 -1.55, 4.65 -1.84, 4.52 -2.13, 4.38 -2.41, 4.22 
-2.68, 4.05 -2.94, 3.85 -3.19, 3.64 -3.42, 3.42 -3.64, 3.19 -3.85, 2.94 
-4.05, 2.68 -4.22, 2.41 -4.38, 2.13 -4.52, 1.84 -4.65, 1.55 -4.76, 1.24 
-4.84, 0.94 -4.91, 0.63 -4.96, 0.31 -4.99, -0.00 -5.00, -0.31 -4.99, 
-0.63 -4.96, -0.94 -4.91, -1.24 -4.84, -1.55 -4.76, -1.84 -4.65, -2.13 
-4.52, -2.41 -4.38, -2.68 -4.22, -2.94 -4.05, -3.19 -3.85, -3.42 -3.64, 
-3.64 -3.42, -3.85 -3.19, -4.05 -2.94, -4.22 -2.68, -4.38 -2.41, -4.52 
-2.13, -4.65 -1.84, -4.76 -1.55, -4.84 -1.24, -4.91 -0.94, -4.96 -0.63, 
-4.99 -0.31, -5.00 0.00))"
+    results[7]  = "POLYGON ((-4.00 0.00, -3.99 0.38, -3.97 0.75, -3.93 
1.12, -3.87 1.49, -3.80 1.85, -3.72 2.21, -3.62 2.55, -3.51 2.89, -3.38 
3.21, -3.24 3.53, -3.08 3.82, -2.92 4.11, -2.74 4.37, -2.55 4.62, -2.35 
4.85, -2.14 5.07, -1.93 5.26, -1.70 5.43, -1.47 5.58, -1.24 5.71, -0.99 
5.81, -0.75 5.89, -0.50 5.95, -0.25 5.99, 0.00 6.00, 0.25 5.99, 0.50 
5.95, 0.75 5.89, 0.99 5.81, 1.24 5.71, 1.47 5.58, 1.70 5.43, 1.93 5.26, 
2.14 5.07, 2.35 4.85, 2.55 4.62, 2.74 4.37, 2.92 4.11, 3.08 3.82, 3.24 
3.53, 3.38 3.21, 3.51 2.89, 3.62 2.55, 3.72 2.21, 3.80 1.85, 3.87 1.49, 
3.93 1.12, 3.97 0.75, 3.99 0.38, 4.00 0.00, 3.99 -0.38, 3.97 -0.75, 3.93 
-1.12, 3.87 -1.49, 3.80 -1.85, 3.72 -2.21, 3.62 -2.55, 3.51 -2.89, 3.38 
-3.21, 3.24 -3.53, 3.08 -3.82, 2.92 -4.11, 2.74 -4.37, 2.55 -4.62, 2.35 
-4.85, 2.14 -5.07, 1.93 -5.26, 1.70 -5.43, 1.47 -5.58, 1.24 -5.71, 0.99 
-5.81, 0.75 -5.89, 0.50 -5.95, 0.25 -5.99, -0.00 -6.00, -0.25 -5.99, 
-0.50 -5.95, -0.75 -5.89, -0.99 -5.81, -1.24 -5.71, -1.47 -5.58, -1.70 
-5.43, -1.93 -5.26, -2.14 -5.07, -2.35 -4.85, -2.55 -4.62, -2.74 -4.37, 
-2.92 -4.11, -3.08 -3.82, -3.24 -3.53, -3.38 -3.21, -3.51 -2.89, -3.62 
-2.55, -3.72 -2.21, -3.80 -1.85, -3.87 -1.49, -3.93 -1.12, -3.97 -0.75, 
-3.99 -0.38, -4.00 0.00))"
+    results[8]  = "POLYGON ((-5.00 -5.00, -5.00 5.00, 5.00 5.00, 5.00 
-5.00, -5.00 -5.00))"
+    results[9]  = "POLYGON ((-5.00 -5.00, -5.00 15.00, 5.00 15.00, 5.00 
-5.00, -5.00 -5.00))"
+    results[10] = "POLYGON ((5.00 20.00, 6.00 20.00, 7.00 19.50, 8.00 
18.50, 9.00 16.50, 9.50 15.00, 10.00 13.00, 10.00 10.00, 5.00 20.00))"
+
+    run_operation(results) do |geom|
+      geom.convex_hull()
+    end
+  end
+end
\ No newline at end of file
--- /dev/null    Tue Jan 10 01:46:58 2006
+++ test_relations.rb    Tue Jan 10 01:12:31 2006
@@ -0,0 +1,329 @@
+#!/usr/bin/env ruby
+
+# These tests evaluate the geos relational operators
+
+
+require 'test/unit'
+require 'geos'
+require 'test_helper'
+
+class TestGeosRelations < Test::Unit::TestCase
+  X = Geos::IllegalArgumentException
+  
+  def setup
+    @test_helper = GeosTestHelper.new()
+  end
+
+  def get_expected_result(results, row, column)
+    value = results[row][column]
+
+    # 0 is false and 1 is true
+    case
+      when value == 0
+        return false
+      when value == 1
+        return true
+      when value == X
+        return X
+      else
+        raise ArgumentError, "Unknown result value"
+    end
+  end
+  
+  def run_relational_operation(operation, results, &block)
+    STDOUT << "\n" << "------ #{operation} RELATION  ------" << "\n"
+    STDOUT.flush()  
+
+    # Create the geometries
+    geoms = @test_helper.create_geoms()
+
+    # Loop through the the geometries the first time
+    row = 0
+    geoms.each do |geom1|
+      # Loop through the the geometries the second time
+      column = 0
+      geoms.each do |geom2|
+        # Get the expected result
+        expected = self.get_expected_result(results, row, column)
+
+        begin
+          # Get the actual result from the provided block
+          result = yield(geom1, geom2)
+
+          if result
+            STDOUT << "1\t"
+          else
+            STDOUT << "0\t"
+          end
+
+          # Did this work?
+          assert_equal(expected, result, "#{operation} failure")
+
+        # Geometry Collection is not a valid argument
+        rescue Geos::IllegalArgumentException => error
+          # This is probably ok but check
+          assert_equal(expected, Geos::IllegalArgumentException)
+          STDOUT << "X\t"
+        end
+        STDOUT.flush()
+        column += 1
+      end
+      STDOUT << "\n"
+      STDOUT.flush()
+      row += 1
+    end
+  end
+
+  def test_contains()
+    # Setup the expected results
+
+    # CONTAINS Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[1] =  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[3] =  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
+    results[5] =  [X, X, X, X, X, X, 0, 0, 0, 0, X]
+    results[6] =  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
+    results[7] =  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
+    results[8] =  [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]
+    results[9] =  [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]
+    results[10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
+    
+    self.run_relational_operation("CONTAINS", results) do |geom1, geom2|
+      geom1.contains(geom2)
+    end
+  end
+  
+  def test_crosses()
+    # Setup the expected results
+
+    # CROSSES Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[1] =  [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[2] =  [0, 1, 0, 0, 0, X, 1, 1, 1, 1, 0]
+    results[3] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[5] =  [X, X, X, X, X, X, X, X, X, X, X]
+    results[6] =  [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[7] =  [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[8] =  [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[9] =  [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[10] = [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    
+    self.run_relational_operation("CROSSES", results) do |geom1, geom2|
+      geom1.crosses(geom2)
+    end
+  end
+  
+  def test_disjoint()
+    # Setup the expected results
+
+    # DISJOINT Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [0, 1, 1, 1, 0, X, 1, 1, 1, 1, 1]
+    results[1] =  [1, 0, 0, 1, 1, X, 1, 1, 1, 1, 1]
+    results[2] =  [1, 0, 0, 1, 1, X, 0, 0, 0, 0, 0]
+    results[3] =  [1, 1, 1, 0, 0, X, 1, 1, 1, 1, 1]
+    results[4] =  [0, 1, 1, 0, 0, X, 1, 1, 1, 1, 1]
+    results[5] =  [X, X, X, X, X, X, X, X, X, X, X]
+    results[6] =  [1, 1, 0, 1, 1, X, 0, 0, 0, 0, 1]
+    results[7] =  [1, 1, 0, 1, 1, X, 0, 0, 0, 0, 1]
+    results[8] =  [1, 1, 0, 1, 1, X, 0, 0, 0, 0, 1]
+    results[9] =  [1, 1, 0, 1, 1, X, 0, 0, 0, 0, 1]
+    results[10] = [1, 1, 0, 1, 1, X, 1, 1, 1, 1, 0]
+    
+    self.run_relational_operation("DISJOINT", results) do |geom1, geom2|
+      geom1.disjoint(geom2)
+    end
+  end
+
+  def test_equals()
+    # Setup the expected results
+
+    # EQUALS Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[1] =  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[3] =  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
+    results[5] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[6] =  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
+    results[7] =  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
+    results[8] =  [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
+    results[9] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
+    results[10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
+    
+    self.run_relational_operation("EQUALS", results) do |geom1, geom2|
+      geom1.equals(geom2)
+    end
+  end
+
+  def test_equals_exact()
+    # Setup the expected results
+
+    # EQUALS_EXACT Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[1] =  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[3] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[5] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[6] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[7] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[8] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[9] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    results[10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
+    
+    self.run_relational_operation("EQUALS_EXACT", results) do |geom1, 
geom2|
+      geom1.equals_exact(geom2)
+    end
+  end
+  
+  def test_intersects()
+    # Setup the expected results
+
+    # INTERSECTS Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [1, 0, 0, 0, 1, X, 0, 0, 0, 0, 0]
+    results[1] =  [0, 1, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[2] =  [0, 1, 1, 0, 0, X, 1, 1, 1, 1, 1]
+    results[3] =  [0, 0, 0, 1, 1, X, 0, 0, 0, 0, 0]
+    results[4] =  [1, 0, 0, 1, 1, X, 0, 0, 0, 0, 0]
+    results[5] =  [X, X, X, X, X, X, X, X, X, X, X]
+    results[6] =  [0, 0, 1, 0, 0, X, 1, 1, 1, 1, 0]
+    results[7] =  [0, 0, 1, 0, 0, X, 1, 1, 1, 1, 0]
+    results[8] =  [0, 0, 1, 0, 0, X, 1, 1, 1, 1, 0]
+    results[9] =  [0, 0, 1, 0, 0, X, 1, 1, 1, 1, 0]
+    results[10] = [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 1]
+    
+    self.run_relational_operation("INTERSECTS", results) do |geom1, geom2|
+      geom1.intersects(geom2)
+    end
+  end
+
+  def test_is_within_distance()
+    # Setup the expected results
+
+    # IS_WITHIN_DISTANCE Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
+    results[1] =  [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0]
+    results[2] =  [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0]
+    results[3] =  [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]
+    results[4] =  [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]
+    results[5] =  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
+    results[6] =  [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0]
+    results[7] =  [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0]
+    results[8] =  [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0]
+    results[9] =  [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0]
+    results[10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
+    
+    self.run_relational_operation("IS_WITHIN_DISTANCE", results) do 
|geom1, geom2|
+      geom1.is_within_distance(geom2, 2)
+    end
+  end
+  
+  def test_overlaps()
+    # Setup the expected results
+
+    # OVERLAPS Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[1] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 1]
+    results[3] =  [0, 0, 0, 0, 1, X, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 1, 0, X, 0, 0, 0, 0, 0]
+    results[5] =  [X, X, X, X, X, X, X, X, X, X, X]
+    results[6] =  [0, 0, 0, 0, 0, X, 0, 1, 0, 0, 0]
+    results[7] =  [0, 0, 0, 0, 0, X, 1, 0, 1, 1, 0]
+    results[8] =  [0, 0, 0, 0, 0, X, 0, 1, 0, 0, 0]
+    results[9] =  [0, 0, 0, 0, 0, X, 0, 1, 0, 0, 0]
+    results[10] = [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    
+    self.run_relational_operation("OVERLAPS", results) do |geom1, geom2|
+      geom1.overlaps(geom2)
+    end
+  end
+
+  def test_relate()
+    # Setup the expected results
+
+    # RELATE Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[1] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[3] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[5] =  [X, X, X, X, X, X, X, X, X, X, X]
+    results[6] =  [0, 0, 0, 0, 0, X, 0, 1, 0, 0, 0]
+    results[7] =  [0, 0, 0, 0, 0, X, 1, 0, 1, 1, 0]
+    results[8] =  [0, 0, 0, 0, 0, X, 0, 1, 0, 0, 0]
+    results[9] =  [0, 0, 0, 0, 0, X, 0, 1, 0, 0, 0]
+    results[10] = [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    
+    self.run_relational_operation("RELATE", results) do |geom1, geom2|
+      geom1.relate(geom2, "212101212")
+    end
+  end
+
+  def test_touches()
+    # Setup the expected results
+
+    # TOUCHES Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [0, 0, 0, 0, 1, X, 0, 0, 0, 0, 0]
+    results[1] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[3] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[4] =  [1, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[5] =  [X, X, X, X, X, X, X, X, X, X, X]
+    results[6] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[7] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[8] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[9] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[10] = [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    
+    self.run_relational_operation("TOUCHES", results) do |geom1, geom2|
+      geom1.touches(geom2)
+    end
+  end
+
+  def test_within()
+    # Setup the expected results
+
+    # WITHIN Results
+    #             [0][1][2][3][4][5][6][7][8][9][10]
+    results = Array.new()
+    results[0] =  [1, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[1] =  [0, 1, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[2] =  [0, 0, 1, 0, 0, X, 0, 0, 0, 0, 0]
+    results[3] =  [0, 0, 0, 1, 0, X, 0, 0, 0, 0, 0]
+    results[4] =  [0, 0, 0, 0, 1, X, 0, 0, 0, 0, 0]
+    results[5] =  [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 0]
+    results[6] =  [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]
+    results[7] =  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
+    results[8] =  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
+    results[9] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
+    results[10] = [0, 0, 0, 0, 0, X, 0, 0, 0, 0, 1]
+    
+    self.run_relational_operation("WITHIN", results) do |geom1, geom2|
+      geom1.within(geom2)
+    end
+  end
+end
\ No newline at end of file
--- /dev/null    Tue Jan 10 01:47:05 2006
+++ test_combinations.rb    Tue Jan 10 01:13:38 2006
@@ -0,0 +1,55 @@
+#!/usr/bin/env ruby
+
+require 'test/unit'
+require 'geos'
+require 'test_helper'
+
+class TestGeosCombinations < Test::Unit::TestCase
+  def setup
+    @test_helper = GeosTestHelper.new()
+  end
+  
+  def run_combination(message, &block)
+    STDOUT << "\n" << "-------- #{message} COMBINATION  ------" << "\n"
+    STDOUT.flush()
+
+    geoms = @test_helper.create_geoms()
+
+    geoms.each do |geom1|
+      geoms.each do |geom2|
+        begin
+          # Get the actual result from the provided block
+          result = yield(geom1, geom2)
+          puts result
+        # Geometry Collection is not a valid argument
+        rescue Geos::IllegalArgumentException => error
+          # This is ok
+        end
+      end
+    end
+  end
+
+  def test_union()
+    run_combination("UNION") do |geom1, geom2|
+      geom1.union(geom2)
+    end
+  end
+
+  def test_intersection()
+    run_combination("INTERSECTION") do |geom1, geom2|
+      geom1.intersection(geom2)
+    end
+  end
+  
+  def test_difference()
+    run_combination("DIFFERENCE") do |geom1, geom2|
+      geom1.difference(geom2)
+    end
+  end
+  
+  def test_symdifference()
+    run_combination("SYMDIFFERENCE") do |geom1, geom2|
+      geom1.sym_difference(geom2)
+    end
+  end
+end
\ No newline at end of file
--- /dev/null    Tue Jan 10 01:47:13 2006
+++ test_helper.rb    Mon Jan  9 18:10:59 2006
@@ -0,0 +1,172 @@
+#!/usr/bin/env ruby
+
+require 'geos'
+
+class GeosTestHelper
+  attr_reader :geom_factory
+  
+  def initialize
+    # Define a precision model using 0,0 as the reference origin
+    # and 2.0 as coordinates scale.
+    pm = Geos::PrecisionModel.new(2.0, 0, 0)
+    @geom_factory = Geos::GeometryFactory.new(pm, -1)
+  end
+  
+  def create_coord(x, y)
+    Geos::Coordinate.new(x, y)
+  end
+
+  def create_point(x, y)
+    coord = create_coord(x, y)
+    @geom_factory.create_point(coord)
+  end
+  
+  def create_ushaped_linestring(xoffset, yoffset, side)
+    # We will use a coordinate list to build the linestring
+    cl = Geos::DefaultCoordinateSequence.new()
+    cl.add(Geos::Coordinate.new(xoffset, yoffset))
+    cl.add(Geos::Coordinate.new(xoffset, yoffset+side))
+    cl.add(Geos::Coordinate.new(xoffset+side, yoffset+side))
+    cl.add(Geos::Coordinate.new(xoffset+side, yoffset))
+
+    # Now that we have a CoordinateSequence we can create the linestring.
+    # The newly created LineString will take ownership of the 
CoordinateSequence.
+    @geom_factory.create_line_string!(cl)
+
+    # This is what you do if you want the new LineString
+    # to make a copy of your CoordinateSequence:
+    @geom_factory.create_line_string(cl)
+  end
+    
+  # This function will create a LinearRing geometry
+  # representing a square with the given origin and side
+  def create_square_linearring(xoffset, yoffset, side)
+    # We will use a coordinate list to build the linearring
+    cl = Geos::DefaultCoordinateSequence.new()
+    cl.add(Geos::Coordinate.new(xoffset, yoffset))
+    cl.add(Geos::Coordinate.new(xoffset, yoffset+side))
+    cl.add(Geos::Coordinate.new(xoffset+side, yoffset+side))
+    cl.add(Geos::Coordinate.new(xoffset+side, yoffset))
+    cl.add(Geos::Coordinate.new(xoffset, yoffset))
+
+    # Create the line string The newly created LinearRing will
+    # take ownership of the CoordinateSequence.
+    @geom_factory.create_linear_ring!(cl)
+
+    # To make a copy of your CoordinateSequence
+    @geom_factory.create_linear_ring(cl)
+  end
+
+  def create_square_polygon(xoffset, yoffset, side)
+    # This function will create a Polygon
+    # geometry rapresenting a square with the given origin
+    # and side and with a central hole 1/3 sided.
+
+    # We need a LinearRing for the polygon shell
+    outer = create_square_linearring(xoffset,yoffset,side);
+
+    # And another for the hole
+    inner = create_square_linearring(xoffset+(side/3), 
yoffset+(side/3),(side/3));
+  
+    # Specify hole as vector of Geometries
+    holes = Geos::GeometryVector.new()
+
+    # Add the newly created geometry to the vector of holes.
+    holes.push(inner)
+
+    # Finally we call the polygon constructor. Both the outer LinearRing
+    # and the vector of holes will be referenced by the resulting
+    # Polygon object.
+    poly = @geom_factory.create_polygon(outer, holes)
+  end
+  
+  def create_simple_collection(geoms)
+    # To transfer ownership of the vector and its
+    # elements you can do this
+    # @geom_factory.create_geometry_collection!(geoms)
+
+    # This function creates a GeometryCollection
+    # containing copies of all Geometries in given vector.
+    @geom_factory.create_geometry_collection(geoms)
+  end
+
+  def create_circle(centerX, centerY, radius)
+    # Use a GeometricShapeFactory to render
+    # a circle having the specified center and radius
+
+    shapefactory = Geos::GeometricShapeFactory.new(@geom_factory)
+    shapefactory.set_centre(Geos::Coordinate.new(centerX, centerY))
+    shapefactory.set_size(radius);
+    # same as:
+    #   shapefactory.set_height(radius)
+    #   shapefactory.set_width(radius)
+    
+    shapefactory.create_circle()
+  end
+
+  def create_ellipse(centerX, centerY, width, height)
+    # Use a GeometricShapeFactory to render
+    # a circle having the specified center and radius
+
+    shapefactory = Geos::GeometricShapeFactory.new(@geom_factory)
+    shapefactory.set_centre(Geos::Coordinate.new(centerX, centerY))
+    shapefactory.set_height(width)
+    shapefactory.set_width(height)
+    
+    shapefactory.create_circle()
+  end
+
+  def create_rectangle(llX, llY, width, height)
+    # This function uses GeometricShapeFactory to render
+    # a rectangle having lower-left corner at given coordinates
+    # and given sizes.
+
+    shapefactory = Geos::GeometricShapeFactory.new(@geom_factory)
+    shapefactory.set_base(Geos::Coordinate.new(llX, llY))
+    shapefactory.set_height(height)
+    shapefactory.set_width(width)
+    
+    # we don't need more then 4 points for a rectangle...
+    shapefactory.set_num_points(4)
+    # can use setSize for a square
+    shapefactory.create_rectangle()
+  end
+  
+  def create_arc(llX, llY, width, height, startang, endang)
+    # This function uses GeometricShapeFactory to render
+    # an arc having lower-left corner at given coordinates,
+    # given sizes and given angles.
+
+    shapefactory = Geos::GeometricShapeFactory.new(@geom_factory)
+    shapefactory.set_base(Geos::Coordinate.new(llX, llY))
+    shapefactory.set_height(height)
+    shapefactory.set_width(width)
+    # the default (100 pts)
+    shapefactory.set_num_points(100)
+    
+    shapefactory.create_arc(startang, endang)
+  end
+  
+  def create_geoms
+    geoms = Geos::GeometryVector.new()
+
+    geoms.push(create_point(150, 350))
+    geoms.push(create_ushaped_linestring(60,60,100))
+    geoms.push(create_square_linearring(0,0,100))
+    geoms.push(create_square_polygon(0,200,300))
+    geoms.push(create_square_polygon(0,250,300))
+    geoms.push(create_simple_collection(geoms))
+
+    # These ones use a GeometricShapeFactory
+    geoms.push(create_circle(0, 0, 10))
+    geoms.push(create_ellipse(0, 0, 8, 12))
+    # A square
+    geoms.push(create_rectangle(-5, -5, 10, 10))
+    # A rectangle
+    geoms.push(create_rectangle(-5, -5, 10, 20))
+    # The upper-right quarter of a vertical ellipse
+    geoms.push(create_arc(0, 0, 10, 20, 0, Math::PI/2))
+
+    return geoms
+  end
+end
\ No newline at end of file

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060110/57e45656/smime.bin
From bt at ccgis.de  Thu Jan 12 04:59:42 2006
From: bt at ccgis.de (Benjamin Thelen)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <20060110164629.GB68822@keybit.net>
References: <43ABACD7.9010202@ccgis.de>
	<20051229110134.GA61427@keybit.net>	<43C2438C.4050508@ccgis.de>
	<20060109111700.GF46109@keybit.net>	<43C264C0.5040309@ccgis.de>
	<20060109172927.GA55997@keybit.net>	<43C3D4AF.3060306@ccgis.de>
	<20060110164629.GB68822@keybit.net>
Message-ID: <43C6288E.2000806@ccgis.de>


Thank you! Meanwhile Konstatin has solved the error. It had something to 
with a wrong version of libtool.

Ben


strk@refractions.net schrieb:
> You can:
> 
> (1)
> 	$ cd source/test
> 	$ ./XMLTester testLeaksBig.xml | tail -4
> 
> (2)
> 	- Build postgis against the newly installed GEOS
> 	$ make test
> 
> --strk;
> 
> On Tue, Jan 10, 2006 at 04:37:19PM +0100, Benjamin Thelen wrote:
> 
>>Hello,
>>
>>I used the FreeBSD ports' geos and bend the geos port to use gcc34 what 
>>lead to the error I've send to you yesterday. I did a make clean, but 
>>the means I used to force the FreeBSD geos port to use gcc34 did 
>>obviously not suffice.
>>
>>Doing a "gmake clean && ./configure CC=gcc34 CXX=g++34 && gmake" not 
>>using the ports version did it:
>>
>>root@wms1# chmod u+x tools/geos-config
>>root@wms1# tools/geos-config --version
>>2.2.1
>>
>>This is geos-2.2.1 built with gcc34 on FreeBSD 4.11. Of course up to 
>>now, I don't know, whether geos will work correctly! Are there maybe 
>>some tests I can perform to check the functionality quickly?
>>
>>I'll get in touch with the ports maintainer again, I think.
>>
>>Thanks,
>>Ben
>>
>>
>>
>>
>>
>>
>>
>>strk@refractions.net schrieb:
>>
>>>On Mon, Jan 09, 2006 at 02:27:28PM +0100, Benjamin Thelen wrote:
>>>
>>>
>>>>Well, I don't have 2.96, but I have 3.4.6, what doesn't do a better job, 
>>>>I'm afraid:
>>>
>>>
>>>Is this after a make clean ?
>>>
>>>--strk;
>>>_______________________________________________
>>>geos-devel mailing list
>>>geos-devel@geos.refractions.net
>>>http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>>_______________________________________________
>>geos-devel mailing list
>>geos-devel@geos.refractions.net
>>http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 


From saurbier at math.uni-bielefeld.de  Thu Jan 12 05:43:38 2006
From: saurbier at math.uni-bielefeld.de (Konstantin Saurbier)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] geos-2.2.0 / FreeBSD 4
In-Reply-To: <43C6288E.2000806@ccgis.de>
References: <43ABACD7.9010202@ccgis.de> <20051229110134.GA61427@keybit.net>
	<43C2438C.4050508@ccgis.de> <20060109111700.GF46109@keybit.net>
	<43C264C0.5040309@ccgis.de> <20060109172927.GA55997@keybit.net>
	<43C3D4AF.3060306@ccgis.de> <20060110164629.GB68822@keybit.net>
	<43C6288E.2000806@ccgis.de>
Message-ID: <20060112104338.GA46957@fuji11.math.uni-bielefeld.de>

Benjamin Thelen wrote on Thu Jan 12, 2006 um 10:59:42AM:
> 
> Thank you! Meanwhile Konstatin has solved the error. It had something to with a 
> wrong version of libtool.

The error was compiler dependand. While geos cannot be build with gcc 2.95
and needs to get USE_GCC=3.4+ set in the port Makefile, libtool15 was 
compiled with gcc 2.95.
Bacause of the version differences ld fails.
The solution was to use the libtool scripts shipped with geos.

I have updated the FreeBSD geos port to 2.2.1. Now it compiles without
complains on FreeBSD 4.x, 5.x and 6.0.
-- 

Best regards,

Konstantin Saurbier
(Maintainer of the FreeBSD Port graphics/geos)

------------------------------------------------------
Konstantin Saurbier                Tel.: 0521 106 3861
Computerlabor Mathematik                        U5-138
Universitaet Bielefeld             Universitaetsstr.25
33501 Bielefeld
email:                  saurbier@math.uni-bielefeld.de
------------------------------------------------------

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 187 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060112/e83e7917/attachment.bin
From mccann0011 at hotmail.com  Sat Jan 14 18:46:30 2006
From: mccann0011 at hotmail.com (Shawn McCann)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] Building geos with gcc 4.1
Message-ID: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>

As a heads up, I've added geos to Fedora Extras but ran into a problem 
getting it to compile on FC5. FC5 uses gcc 4.1 instead of gcc 4.0 and 
encounters errors with geom.h

./../source/headers/geos/geom.h:361: error: extra qualification 
'geos::Coordinate::' on member 'setNull'
../../source/headers/geos/geom.h:367: error: extra qualification 
'geos::Coordinate::' on member 'getNull'
../../source/headers/geos/geom.h:371: error: extra qualification 
'geos::Coordinate::' on member 'Coordinate'

Apparently GCC-4.1 dislikes constructs like this:

class MyClass {
int MyClass::method(...);
}

and wants this instead

class MyClass {
int method(...);
}

We created a patch to remove the Coordinate:: tags from geom.h and all works 
well now.

Shawn



From strk at refractions.net  Mon Jan 16 06:08:42 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] Building geos with gcc 4.1
In-Reply-To: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>
References: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>
Message-ID: <20060116110842.GA50985@keybit.net>

Fixed, thanks.
Could you test both the 2.2 (branch-2-2) and HEAD branches ?
TIA

--strk;

On Sat, Jan 14, 2006 at 03:46:30PM -0800, Shawn McCann wrote:
> As a heads up, I've added geos to Fedora Extras but ran into a problem 
> getting it to compile on FC5. FC5 uses gcc 4.1 instead of gcc 4.0 and 
> encounters errors with geom.h
> 
> ./../source/headers/geos/geom.h:361: error: extra qualification 
> 'geos::Coordinate::' on member 'setNull'
> ../../source/headers/geos/geom.h:367: error: extra qualification 
> 'geos::Coordinate::' on member 'getNull'
> ../../source/headers/geos/geom.h:371: error: extra qualification 
> 'geos::Coordinate::' on member 'Coordinate'
> 
> Apparently GCC-4.1 dislikes constructs like this:
> 
> class MyClass {
> int MyClass::method(...);
> }
> 
> and wants this instead
> 
> class MyClass {
> int method(...);
> }
> 
> We created a patch to remove the Coordinate:: tags from geom.h and all 
> works well now.
> 
> Shawn
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From hobu at iastate.edu  Mon Jan 23 16:54:17 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] CVS PrecisionModel segfault on Windows MSVC 7.1 
In-Reply-To: <20060116110842.GA50985@keybit.net>
References: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>
	<20060116110842.GA50985@keybit.net>
Message-ID: <6.2.3.4.2.20060123154417.01ea5c20@hobu.mail.iastate.edu>

All,

I'm having trouble with a MSVC 7.1- compiled version of GEOS where 
I'm attempting to buffer a geometry that was defined with this wkt:

LINESTRING (2.000000000000 1.000000000000, 1.000000000000 3.000000000000)

I am using 30.0 as my buffer distance (using 3.0 also causes a 
segfault in the same spot).

Here is the stack trace of my segfault:

> 
>_geos_d.pyd!geos::PrecisionModel::makePrecise(geos::Coordinate * 
>coord=0x0021a1e8)  Line 137 + 0x3      C++
>         _geos_d.pyd!geos::OffsetCurveBuilder::addPt(const 
> geos::Coordinate & pt={...})  Line 198        C++
>         _geos_d.pyd!geos::OffsetCurveBuilder::addLastSegment() 
> Line 315        C++
> 
>_geos_d.pyd!geos::OffsetCurveBuilder::computeLineBufferCurve(const 
>geos::CoordinateSequence * inputPts=0x00b6f980)  Line 165    C++
>         _geos_d.pyd!geos::OffsetCurveBuilder::getLineCurve(const 
> geos::CoordinateSequence * inputPts=0x00b6f980, double 
> distance=30.000000000000000)  Line 95   C++
> 
>_geos_d.pyd!geos::OffsetCurveSetBuilder::addLineString(const 
>geos::LineString * line=0x00a4dfe0)  Line 152 + 0x1b       C++
>         _geos_d.pyd!geos::OffsetCurveSetBuilder::add(const 
> geos::Geometry * g=0x00a4dfe0)  Line 105     C++
>         _geos_d.pyd!geos::OffsetCurveSetBuilder::getCurves()  Line 54   C++
>         _geos_d.pyd!geos::BufferBuilder::buffer(geos::Geometry * 
> g=0x00a4dfe0, double distance=30.000000000000000)  Line 111 + 0x8      C++
>         _geos_d.pyd!geos::BufferOp::bufferOriginalPrecision()  Line 
> 206 + 0x1a  C++
>         _geos_d.pyd!geos::BufferOp::computeGeometry()  Line 169 C++
>         _geos_d.pyd!geos::BufferOp::getResultGeometry(double 
> nDistance=30.000000000000000)  Line 132    C++
>         _geos_d.pyd!geos::BufferOp::bufferOp(geos::Geometry * 
> g=0x00a4dfe0, double distance=30.000000000000000)  Line 75 + 0x1c C++
>         _geos_d.pyd!geos::Geometry::buffer(double 
> distance=30.000000000000000)  Line 543 + 0x12 C++
>         _geos_d.pyd!_wrap_Geometry_buffer__SWIG_0(_object * 
> __formal=0x00000000, _object * args=0x00aec338)  Line 10283 + 0x14  C++
>         _geos_d.pyd!_wrap_Geometry_buffer(_object * 
> self=0x00000000, _object * args=0x00aec338)  Line 10357 + 0xd       C++

The code at that location is:

>void PrecisionModel::makePrecise(Coordinate *coord) const {
>     // optimization for full precision
>         if (modelType==FLOATING) return;
>         coord->x=makePrecise(coord->x);
>         coord->y=makePrecise(coord->y);
>}

and when I inspect modelType with the debugger.  It isn't 
anything.  Grepping through the source code, I noticed that a lot of 
the modelType==FOO throughout PrecisionModel.cpp have been commented 
out.  The CVS log doesn't show that anything has changed much in 
quite a while though.  Anyone have any idea what might be going on so 
that modelType isn't initialized?

Thanks

Howard 


From mateusz at loskot.net  Wed Jan 25 06:43:15 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] Building GEOS with eVC++ 4.0
Message-ID: <43D76453.3070706@loskot.net>

Hi,

Yesterday, I tried to compile GEOS with Microsoft eVC++ 4.0 compiler.
It's pretty old compiler based on VC++ 6.0, so it may be considered as
VC++ 6.0 when talking about ANSI/ISO C++ conformation (or lack of
conformation :-)).
My goal is to use GEOS on Windows CE based devices, together with OGR
(work is in progress).
So, after my first try of building GEOS with eVC++ I realized that
I'll need to do quite much changes inside GEOS source code.
Yesterday, I talked a little about it with FrankW and nhv
on the #gdal channel.
They suggested me to talk to strk (IRC nick) or write on the geos list
about it. So, I'd like to ask GEOS developers about best possible way I 
should go to make GEOS compilable on eVC++.

Simple example, eVC++ does not support in-place initialization of static 
const data members of classes
(http://mateusz.loskot.net/2006/01/24/yet-another-trap-in-the-evc-compiler/).

So I'd have to do quite much changes inside geom.h.
I predict there may be much more changes but I believe they are doable 
and it will work. My main question is less technical but more about how 
to organize it, release my work etc.

Is it possible to include my changes to the official GEOS repository?
Should I derive new projects e.g. geos-wince just as sqlite-wince is 
derived from sqlite and is hosted separately on SF.net?

p.s. Forgive me my ignorance I use IRC nicks instead of full names of
persons I'm calling here in my post but simply I don't know them by name.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Thu Jan 26 12:39:49 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] CVS PrecisionModel segfault on Windows MSVC 7.1
In-Reply-To: <6.2.3.4.2.20060123154417.01ea5c20@hobu.mail.iastate.edu>
References: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>
	<20060116110842.GA50985@keybit.net>
	<6.2.3.4.2.20060123154417.01ea5c20@hobu.mail.iastate.edu>
Message-ID: <20060126173949.GA39550@keybit.net>

On Mon, Jan 23, 2006 at 03:54:17PM -0600, Howard Butler wrote:
> All,
> 
> I'm having trouble with a MSVC 7.1- compiled version of GEOS where 
> I'm attempting to buffer a geometry that was defined with this wkt:
> 
> LINESTRING (2.000000000000 1.000000000000, 1.000000000000 3.000000000000)
> 
> I am using 30.0 as my buffer distance (using 3.0 also causes a 
> segfault in the same spot).
> 
> Here is the stack trace of my segfault:

...

> and when I inspect modelType with the debugger.  It isn't 
> anything.  Grepping through the source code, I noticed that a lot of 
> the modelType==FOO throughout PrecisionModel.cpp have been commented 
> out.  The CVS log doesn't show that anything has changed much in 
> quite a while though.  Anyone have any idea what might be going on so 
> that modelType isn't initialized?

Can it be you deleted it ?
PrecisionModels are inside GeometryFactories, which must
keep alive for the whole lifetime of geometries created with it.

--strk; 

 +----------------------------------------+
 | Fight against software patents in EU!  |
 | www.ffii.org www.nosoftwarepatents.org |
 +----------------------------------------+


From hobu at iastate.edu  Thu Jan 26 13:00:40 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] CVS PrecisionModel segfault on Windows MSVC
  7.1
In-Reply-To: <20060126173949.GA39550@keybit.net>
References: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>
	<20060116110842.GA50985@keybit.net>
	<6.2.3.4.2.20060123154417.01ea5c20@hobu.mail.iastate.edu>
	<20060126173949.GA39550@keybit.net>
Message-ID: <6.2.1.2.2.20060126115713.01e6ba30@hobu.mail.iastate.edu>


>Can it be you deleted it ?
>PrecisionModels are inside GeometryFactories, which must
>keep alive for the whole lifetime of geometries created with it.
>
>--strk;

That's very possible.  I'm driving things with the python swig bindings 
(pre Charlies patch because of its reliance on an unreleased cvs swig that 
I can't build on windows or os x).  At least the autogen.sh/configure stuff 
currently in cvs complains about the lack of swig 1.3.28, which doesn't exist.

In the meantime, I will try bumping the reference count of the object to cheat.

It's interesting that the same code doesn't puke on OS X though.

Howard 


From hobu at iastate.edu  Thu Jan 26 13:39:40 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] CVS PrecisionModel segfault on Windows MSVC
  7.1
In-Reply-To: <6.2.1.2.2.20060126115713.01e6ba30@hobu.mail.iastate.edu>
References: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>
	<20060116110842.GA50985@keybit.net>
	<6.2.3.4.2.20060123154417.01ea5c20@hobu.mail.iastate.edu>
	<20060126173949.GA39550@keybit.net>
	<6.2.1.2.2.20060126115713.01e6ba30@hobu.mail.iastate.edu>
Message-ID: <6.2.1.2.2.20060126123851.01df8170@hobu.mail.iastate.edu>


strk --

please add 	operation\buffer\DepthSegment.obj \ to the OBJ line of the 
makefile.vc in source

Thanks,

Howard


From cfis at interserv.com  Thu Jan 26 13:40:15 2006
From: cfis at interserv.com (Charlie Savage)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] CVS PrecisionModel segfault on Windows MSVC  7.1
In-Reply-To: <6.2.1.2.2.20060126115713.01e6ba30@hobu.mail.iastate.edu>
References: <BAY105-F225E8235A1FC2711AC01C8C3190@phx.gbl>	<20060116110842.GA50985@keybit.net>	<6.2.3.4.2.20060123154417.01ea5c20@hobu.mail.iastate.edu>	<20060126173949.GA39550@keybit.net>
	<6.2.1.2.2.20060126115713.01e6ba30@hobu.mail.iastate.edu>
Message-ID: <43D9178F.6030404@interserv.com>

There is nothing in the updated SWIG bindings that would affect Geometry 
factories or precision models.  However, there are changes with passing 
vectors of coordinates and geometries to functions.  Do you have some 
test code I could look at?  This could be caused by one of the methods 
your are calling taking over ownership of the geometry, but Python 
doesn't know it. 

Charlie

Howard Butler wrote:
>
>> Can it be you deleted it ?
>> PrecisionModels are inside GeometryFactories, which must
>> keep alive for the whole lifetime of geometries created with it.
>>
>> --strk;
>
> That's very possible.  I'm driving things with the python swig 
> bindings (pre Charlies patch because of its reliance on an unreleased 
> cvs swig that I can't build on windows or os x).  At least the 
> autogen.sh/configure stuff currently in cvs complains about the lack 
> of swig 1.3.28, which doesn't exist.
>
> In the meantime, I will try bumping the reference count of the object 
> to cheat.
>
> It's interesting that the same code doesn't puke on OS X though.
>
> Howard
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 2781 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060126/c9fee168/smime.bin
From mateusz at loskot.net  Mon Jan 30 16:05:20 2006
From: mateusz at loskot.net (=?ISO-8859-2?Q?Mateusz_=A3oskot?=)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] Building GEOS with eVC++ 4.0
In-Reply-To: <43D76453.3070706@loskot.net>
References: <43D76453.3070706@loskot.net>
Message-ID: <43DE7F90.70107@loskot.net>

Mateusz ?oskot wrote:
> [...]
> Is it possible to include my changes to the official GEOS repository?
> Should I derive new projects e.g. geos-wince just as sqlite-wince is 
> derived from sqlite and is hosted separately on SF.net?

Is there any chance to get my questions answered?
Please, forgive me if I'm annoying.
Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From strk at refractions.net  Tue Jan 31 18:18:07 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
Message-ID: <20060131231807.GB37818@keybit.net>

Is there any known problem in using assert.h with GEOS ?
I'm asking as I know there have been issues with stdio.h
in the past, but I'd like to be able using assert()
or any equivalent standard C++ thing to easy debugging.

--strk; 

From artem at pavlenko.uklinux.net  Tue Jan 31 18:24:31 2006
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <20060131231807.GB37818@keybit.net>
References: <20060131231807.GB37818@keybit.net>
Message-ID: <43DFF1AF.3080303@pavlenko.uklinux.net>

Strk,

Shouldn't you be using <cassert>?

Artem


strk@refractions.net wrote:
> Is there any known problem in using assert.h with GEOS ?
> I'm asking as I know there have been issues with stdio.h
> in the past, but I'd like to be able using assert()
> or any equivalent standard C++ thing to easy debugging.
>
> --strk; 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
>   

From woodbri at swoodbridge.com  Tue Jan 31 18:31:23 2006
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <20060131231807.GB37818@keybit.net>
References: <20060131231807.GB37818@keybit.net>
Message-ID: <43DFF34B.6090403@swoodbridge.com>

strk@refractions.net wrote:
> Is there any known problem in using assert.h with GEOS ?
> I'm asking as I know there have been issues with stdio.h
> in the past, but I'd like to be able using assert()
> or any equivalent standard C++ thing to easy debugging.

Why not wrap is in a #define like

#ifdef DEBUG
#define ASSERT(x) assert(x)
#else
#define ASSERT(x)
#endif

or something like that. Then it is easy to add it to the source but 
exclude when required.

-Steve W.

From strk at refractions.net  Tue Jan 31 18:39:35 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <43DFF34B.6090403@swoodbridge.com>
References: <20060131231807.GB37818@keybit.net>
	<43DFF34B.6090403@swoodbridge.com>
Message-ID: <20060131233935.GC37818@keybit.net>

On Tue, Jan 31, 2006 at 06:31:23PM -0500, Stephen Woodbridge wrote:
> strk@refractions.net wrote:
> >Is there any known problem in using assert.h with GEOS ?
> >I'm asking as I know there have been issues with stdio.h
> >in the past, but I'd like to be able using assert()
> >or any equivalent standard C++ thing to easy debugging.
> 
> Why not wrap is in a #define like
> 
> #ifdef DEBUG
> #define ASSERT(x) assert(x)
> #else
> #define ASSERT(x)
> #endif
> 
> or something like that. Then it is easy to add it to the source but 
> exclude when required.

assert() is a macro, you exclude it by defining NDEBUG.

--strk;

From strk at refractions.net  Tue Jan 31 18:40:38 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <43DFF1AF.3080303@pavlenko.uklinux.net>
References: <20060131231807.GB37818@keybit.net>
	<43DFF1AF.3080303@pavlenko.uklinux.net>
Message-ID: <20060131234038.GD37818@keybit.net>

On Tue, Jan 31, 2006 at 11:24:31PM +0000, Artem Pavlenko wrote:

> Shouldn't you be using <cassert>?

Yes, probably. Would it then be accepted with
all standard libraries ?

--strk;

From artem at pavlenko.uklinux.net  Tue Jan 31 18:43:53 2006
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <20060131234038.GD37818@keybit.net>
References: <20060131231807.GB37818@keybit.net>	<43DFF1AF.3080303@pavlenko.uklinux.net>
	<20060131234038.GD37818@keybit.net>
Message-ID: <43DFF639.5030906@pavlenko.uklinux.net>

It is a part of c++ standard. Yes!


strk@refractions.net wrote:
> On Tue, Jan 31, 2006 at 11:24:31PM +0000, Artem Pavlenko wrote:
>
>   
>> Shouldn't you be using <cassert>?
>>     
>
> Yes, probably. Would it then be accepted with
> all standard libraries ?
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
>   

From artem at pavlenko.uklinux.net  Tue Jan 31 18:45:54 2006
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <43DFF34B.6090403@swoodbridge.com>
References: <20060131231807.GB37818@keybit.net>
	<43DFF34B.6090403@swoodbridge.com>
Message-ID: <43DFF6B2.7060809@pavlenko.uklinux.net>

Stephen,

GEOS is a c++ library, right? Please see [Stroustrup94],[Stroustrup00] 
on the topic 'Why to avoid macros when possible'.

Artem


Stephen Woodbridge wrote:
> strk@refractions.net wrote:
>> Is there any known problem in using assert.h with GEOS ?
>> I'm asking as I know there have been issues with stdio.h
>> in the past, but I'd like to be able using assert()
>> or any equivalent standard C++ thing to easy debugging.
>
> Why not wrap is in a #define like
>
> #ifdef DEBUG
> #define ASSERT(x) assert(x)
> #else
> #define ASSERT(x)
> #endif
>
> or something like that. Then it is easy to add it to the source but 
> exclude when required.
>
> -Steve W.
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>

From mateusz at loskot.net  Tue Jan 31 18:53:38 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <20060131231807.GB37818@keybit.net>
References: <20060131231807.GB37818@keybit.net>
Message-ID: <43DFF882.2030604@loskot.net>

strk@refractions.net wrote:
> Is there any known problem in using assert.h with GEOS ?

I don't know any problems with using assert() macro but it should be 
included from <cassert> header in C++.

Most popular debugging tool defined by C++ Standard is assert() macro.
As C++ Standard says (17.4.1.2) it should be defined as macro, even if
some C implementations define assert() as a function.

In order to make things more clear, C++ Standard uses c prefix (cname) 
for every header provided by Standard C Library. Also, C++ Standard says 
"the contents of each header cname shall be the same as that of the 
corresponding header name.h, as specified in ISO/IEC 9899:1990 
Programming Languages C"

But the very important note is that:
"In the C++ Standard Library, however, the declarations and definitions 
(except for names which are defined as macros in C) are within namespace 
scope (3.3.5) of the namespace std."

According to the note above, assert() macro from <cassert> header is not 
placed in std namespace. The rest of contents from <cstdio>, <cstdlib> 
etc. is placed in std namespace.

Finally, the contents of assert.h and cassert is the same, both declare 
macro named assert(). But for better ANSI/ISO C++ compliance it's 
recommended to use <cassert> in C++ programs.

Besides assert() macro, C++ Standard defines exceptions and error 
numbers (just as in C).

 > I'm asking
 > as I know there have been issues with stdio.h in the past, but I'd
 > like to be able using assert() or any equivalent standard C++ thing
 > to easy debugging.

I don't know what problems you are talking about but I suppose they were 
related to std namespace and stdio and <cstdio>.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Tue Jan 31 18:54:22 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <43DFF1AF.3080303@pavlenko.uklinux.net>
References: <20060131231807.GB37818@keybit.net>
	<43DFF1AF.3080303@pavlenko.uklinux.net>
Message-ID: <43DFF8AE.2000708@loskot.net>

Artem Pavlenko wrote:
> Strk,
> 
> Shouldn't you be using <cassert>?

In C++ programs yes it should.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

From mateusz at loskot.net  Tue Jan 31 19:02:40 2006
From: mateusz at loskot.net (=?UTF-8?B?TWF0ZXVzeiDFgW9za290?=)
Date: Fri Nov  2 20:52:57 2007
Subject: [geos-devel] assert.h / assert()
In-Reply-To: <43DFF6B2.7060809@pavlenko.uklinux.net>
References: <20060131231807.GB37818@keybit.net>	<43DFF34B.6090403@swoodbridge.com>
	<43DFF6B2.7060809@pavlenko.uklinux.net>
Message-ID: <43DFFAA0.8030305@loskot.net>

Artem Pavlenko wrote:
> Stephen,
> 
> GEOS is a c++ library, right? Please see [Stroustrup94],[Stroustrup00] 
> on the topic 'Why to avoid macros when possible'.

Yup, macros are not recommended besides those defined by C++ Standard.
Together with macros, it's possible to set permanent assertions that do 
not depends on NDEBUG definition.

template <class E, class A> inline void StaticAssert(A expr)
{
    if (!expr)
    {
       throw E();
    }
}

Usage:


class BadPolyException {};

MyPoly p;
// ... construct poly
// and check it
StaticAssert<BadPolyException>(p.IsClosed());

We don't need to catch exception, because it will work just as assert() 
macro and program execution will be terminated if StaticAssert return false.

It also can be tweaked to be enabled/disabled by NDEBUG.

Cheers
-- 
Mateusz ?oskot
http://mateusz.loskot.net

