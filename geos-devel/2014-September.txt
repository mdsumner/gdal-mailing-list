From strk at keybit.net  Tue Sep  9 03:18:44 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 12:18:44 +0200
Subject: [geos-devel] Optimized Geometry/Rectangle Intersection status (#699)
In-Reply-To: <20140829142011.GB32764@localhost>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
	<53FCD05C.4070603@fmi.fi> <20140827080957.GA4175@localhost>
	<54008B95.3090700@fmi.fi> <20140829142011.GB32764@localhost>
Message-ID: <20140909101844.GB5496@localhost>

FYI, Mika sent me his code and I've completed its porting to GEOS.
At the moment all provided tests (142 cases) pass and valgrind reports
no memory error (apart some small leaks).

If anyone wants to take a look the code can be found here:

 https://github.com/strk/libgeos/tree/svn-trunk-fast-rect-intersection

Here are the tests:

 https://github.com/strk/libgeos/blob/svn-trunk-fast-rect-intersection/tests/unit/operation/intersection/RectangleIntersectionTest.cpp

Next I'll plug the memory leaks and then start looking at more test cases
and performance. 

One thing I noticed is that 2.5D Coordinates are not fully supported by
this class, while they are by the standard intersection code. Making
the new code fired on standard intersection would require adding such
support.

Tests welcome !

--strk;

On Fri, Aug 29, 2014 at 04:20:11PM +0200, Sandro Santilli wrote:
> On Fri, Aug 29, 2014 at 05:17:57PM +0300, Mika Heiskanen wrote:
> > On 08/27/2014 11:09 AM, Sandro Santilli wrote:
> > >I'm very interested in your code and willing to help with integration.
> > >
> > >I guess this could be a RectangleIntersection class under a new
> > >geos::operation::intersection namespace, eventually further wrapped
> > >by a generic IntersectionOp using RectangleIntersection when an input
> > >is a rectangle or the generic OverlayOp in other cases.
> > >Then Geometry::intersection would be using that specialized class.
> > >
> > >Please let me know how I can help with this.
> > 
> > I will try to port the code to the class and namespace you mentioned.
> > There will be some helper classes too. I will also see if I can
> > integrate the tests we have with your existing system. Integration with
> > IntersectionOp etc is not what I am comfortable with, as I know too
> > little of existing GEOS code.
> 
> Don't worry about intergration with IntersectionOp, I can do that part.
> Testcases would be very important to get in.
> 
> --strk;
> 
>  ()  ASCII ribbon campaign  --  Keep it simple !
>  /\  http://strk.keybit.net/rants/ascii_mails.txt  

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Tue Sep  9 03:21:01 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 10:21:01 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.e95be056b868533cd1ed88ef03ac9f31@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 Work is in progress here: https://github.com/strk/libgeos/tree/svn-trunk-
 fast-rect-intersection

 Thanks Mika Heiskanen for the algorithm!

 I'm not sure if this should be in 3.4.3 or 3.5.0 ... (when ready)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Tue Sep  9 03:48:23 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 12:48:23 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
Message-ID: <20140909104823.GC5496@localhost>

RE: rectangle intersection (#699)

I've plugged the leak and compared the result of Geometry::intersection()
and RectangleIntersection. One difference is about the linemerge operation
happening in the RectangleIntersection class, that is a line going outside
and then back inside the clipping rectangle gets merged by
RectangleIntersection while it is not by standard intersection.

The tests you provided expect the merging to happen, so if I drop the merging
those tests are going to fail. What's the rationale for that additional
operation ?

--strk;

From geos-trac at osgeo.org  Tue Sep  9 04:22:39 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 11:22:39 -0000
Subject: [geos-devel] [GEOS] #702: OverlayOp takes mover 20 minutes when a
 polygon with over a million holes is involved
Message-ID: <044.b8780021a24f7f7d63bddc6aed91f34f@osgeo.org>

#702: OverlayOp takes mover 20 minutes when a polygon with over a million holes
is involved
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 I've been looking at a huge polygon having over a million small holes and
 a large extent, and saw ST_Intersection between it and a rectangle take
 around 26 minutes.

 Implementing a quick short-circuit based on analyzing each hole in turn
 for it being in-or-out of the rectangle can take the time down to 5
 seconds.

 As of the new rectangle intersection optimization code (#699) I've seen
 the same intersection take around 1 second.

 This ticket is to find out if there's anything that could be optimized in
 GeometryGraph building with these kind of inputs.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/702>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mika.heiskanen at fmi.fi  Tue Sep  9 05:00:44 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Tue, 09 Sep 2014 15:00:44 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
In-Reply-To: <20140909104823.GC5496@localhost>
References: <20140909104823.GC5496@localhost>
Message-ID: <540EEBEC.3040403@fmi.fi>

On 09/09/2014 01:48 PM, Sandro Santilli wrote:
> RE: rectangle intersection (#699)
>
> I've plugged the leak and compared the result of Geometry::intersection()
> and RectangleIntersection. One difference is about the linemerge operation
> happening in the RectangleIntersection class, that is a line going outside
> and then back inside the clipping rectangle gets merged by
> RectangleIntersection while it is not by standard intersection.
>
> The tests you provided expect the merging to happen, so if I drop the merging
> those tests are going to fail. What's the rationale for that additional
> operation ?

I assume you are referring to these comments:

  * Sample clip with a rectangle 0,0 --> 10,10 without reconnecting:
  *
  *   Input:   POLYGON ((5 10,0 0,10 0,5 10))
  *   Output:  MULTILINESTRING ((5 10,0 0),(10 0,5 10))
  *   Desired: LINESTRING (10 0,5 10,0 0)

If you recall, we wrote the algorithm for rendering. In this case if we
do not reconnect the two linestrings line-join behaviour will be broken
during rendering.

Regards,

Mika Heiskanen / FMI





From strk at keybit.net  Tue Sep  9 06:06:25 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 15:06:25 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
In-Reply-To: <540EEBEC.3040403@fmi.fi>
References: <20140909104823.GC5496@localhost>
 <540EEBEC.3040403@fmi.fi>
Message-ID: <20140909130625.GE5496@localhost>

On Tue, Sep 09, 2014 at 03:00:44PM +0300, Mika Heiskanen wrote:
> On 09/09/2014 01:48 PM, Sandro Santilli wrote:
> >RE: rectangle intersection (#699)
> >
> >I've plugged the leak and compared the result of Geometry::intersection()
> >and RectangleIntersection. One difference is about the linemerge operation
> >happening in the RectangleIntersection class, that is a line going outside
> >and then back inside the clipping rectangle gets merged by
> >RectangleIntersection while it is not by standard intersection.
> >
> >The tests you provided expect the merging to happen, so if I drop the merging
> >those tests are going to fail. What's the rationale for that additional
> >operation ?
> 
> I assume you are referring to these comments:
> 
>  * Sample clip with a rectangle 0,0 --> 10,10 without reconnecting:
>  *
>  *   Input:   POLYGON ((5 10,0 0,10 0,5 10))
>  *   Output:  MULTILINESTRING ((5 10,0 0),(10 0,5 10))
>  *   Desired: LINESTRING (10 0,5 10,0 0)
> 
> If you recall, we wrote the algorithm for rendering. In this case if we
> do not reconnect the two linestrings line-join behaviour will be broken
> during rendering.

But this is not the ST_Intersection equivalent operation.
That one would output POLYGON from a POLYGON input, while it would
output LINESTRING if the input was a LINESTRING.

One failing test (when using ST_Intersection) is this one
(number 87 in the unit test):

    // triangle corner at left edge
    Input:   LINESTRING (3 3,0 6,3 9)
    Desired: LINESTRING (3 3,0 6,3 9)

ST_Intersection outputs this instead:

    Output:  MULTILINESTRING ((0 6, 3 9), (0 6, 3 3))

I guess line-join behavior would be broken also if the vertex was
slightly off the rectangle, if the join style would be visible inside
of it. It's tipical to use a somewhat larger clipping box to avoid these
issues (for rendering purposes).

Right now I'm trying to see if it's possible to transparently use
the RectangleIntersection clip from Geometry::intersection(), when one
of the operands is a Rectangle.

On a closer look the RectangleIntersection output is not even due to
clipping but rather to RectangleIntersection::clip_linestring_parts
considering "boundary" position the same as "internal" in the "else"
branch around line 248. There's actually no "Boundary" position known
in the Position enum in Rectangle.h, maybe should be added...

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Tue Sep  9 06:17:24 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 13:17:24 -0000
Subject: [geos-devel] [GEOS] #703: Empty.equals(Empty) == false
Message-ID: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>

#703: Empty.equals(Empty) == false
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 Empty geometrycollections do not equal themself...

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/703>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mika.heiskanen at fmi.fi  Tue Sep  9 06:45:11 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Tue, 09 Sep 2014 16:45:11 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
In-Reply-To: <20140909130625.GE5496@localhost>
References: <20140909104823.GC5496@localhost> <540EEBEC.3040403@fmi.fi>
	<20140909130625.GE5496@localhost>
Message-ID: <540F0467.1000006@fmi.fi>

On 09/09/2014 04:06 PM, Sandro Santilli wrote:
> On Tue, Sep 09, 2014 at 03:00:44PM +0300, Mika Heiskanen wrote:
>> On 09/09/2014 01:48 PM, Sandro Santilli wrote:
>>> RE: rectangle intersection (#699)
>>>
>>> I've plugged the leak and compared the result of Geometry::intersection()
>>> and RectangleIntersection. One difference is about the linemerge operation
>>> happening in the RectangleIntersection class, that is a line going outside
>>> and then back inside the clipping rectangle gets merged by
>>> RectangleIntersection while it is not by standard intersection.
[snip]
>> I assume you are referring to these comments:
>>
>>   * Sample clip with a rectangle 0,0 --> 10,10 without reconnecting:
>>   *
>>   *   Input:   POLYGON ((5 10,0 0,10 0,5 10))
>>   *   Output:  MULTILINESTRING ((5 10,0 0),(10 0,5 10))
>>   *   Desired: LINESTRING (10 0,5 10,0 0)
>>
>> If you recall, we wrote the algorithm for rendering. In this case if we
>> do not reconnect the two linestrings line-join behaviour will be broken
>> during rendering.
>
> But this is not the ST_Intersection equivalent operation.
> That one would output POLYGON from a POLYGON input, while it would
> output LINESTRING if the input was a LINESTRING.

Then we were not discussing the same thing. I was referring to the
way the boundary of the polygon is clipped.

> One failing test (when using ST_Intersection) is this one
> (number 87 in the unit test):
>
>      // triangle corner at left edge
>      Input:   LINESTRING (3 3,0 6,3 9)
>      Desired: LINESTRING (3 3,0 6,3 9)
>
> ST_Intersection outputs this instead:
>
>      Output:  MULTILINESTRING ((0 6, 3 9), (0 6, 3 3))

I do not see why the output should be split unless it has been
agreed in some (de facto?) standard. Has it?

> I guess line-join behavior would be broken also if the vertex was
> slightly off the rectangle, if the join style would be visible inside
> of it. It's tipical to use a somewhat larger clipping box to avoid these
> issues (for rendering purposes).

In the case I was referring to the linestring is reconnected to avoid
a broken line-join *inside* the rectangle, and does not seem to be
relevant to the discussion here.

> On a closer look the RectangleIntersection output is not even due to
> clipping but rather to RectangleIntersection::clip_linestring_parts
> considering "boundary" position the same as "internal" in the "else"
> branch around line 248. There's actually no "Boundary" position known
> in the Position enum in Rectangle.h, maybe should be added...

Rectangle::onEdge is equivalent.

However, changing that particular part of the code may be quite
compilicated - the nested if-else statements are pretty nasty.
Luckily the regression tests cover the ifs pretty well.

The first thing I'd do, if you want the original GEOS behavior, would
be to change code as follows:

156  if(pos != Rectangle::Inside)

163     if(x <= rect.xmin())
164       while(i < n && cs[i].x <= rect.xmin())
165          ++i

and similarly for lines 167-177. I fear some escalation is bound to
happen after that.

Regards,

Mika




From strk at keybit.net  Tue Sep  9 06:55:04 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 15:55:04 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
In-Reply-To: <540F0467.1000006@fmi.fi>
References: <20140909104823.GC5496@localhost> <540EEBEC.3040403@fmi.fi>
	<20140909130625.GE5496@localhost> <540F0467.1000006@fmi.fi>
Message-ID: <20140909135504.GG5496@localhost>

On Tue, Sep 09, 2014 at 04:45:11PM +0300, Mika Heiskanen wrote:
> On 09/09/2014 04:06 PM, Sandro Santilli wrote:

> >One failing test (when using ST_Intersection) is this one
> >(number 87 in the unit test):
> >
> >     // triangle corner at left edge
> >     Input:   LINESTRING (3 3,0 6,3 9)
> >     Desired: LINESTRING (3 3,0 6,3 9)
> >
> >ST_Intersection outputs this instead:
> >
> >     Output:  MULTILINESTRING ((0 6, 3 9), (0 6, 3 3))
> 
> I do not see why the output should be split unless it has been
> agreed in some (de facto?) standard. Has it?

Not really. It just happen to be the case due to the algorithm used
for the overlay based intersection. When the topology is built the
edge do not get sewed unless needed (ie: for polygons).

I think avoiding the re-join is just done to do less work, as if needed
it can be obtained by a subsequent step.

> The first thing I'd do, if you want the original GEOS behavior, would
> be to change code as follows:
> 
> 156  if(pos != Rectangle::Inside)
> 
> 163     if(x <= rect.xmin())
> 164       while(i < n && cs[i].x <= rect.xmin())
> 165          ++i
> 
> and similarly for lines 167-177. I fear some escalation is bound to
> happen after that.

Yep, I was looking there. Not sure if it's worth the trouble really,
or if I should just update the test to check for spatial (rather
than structural) equality.

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From mika.heiskanen at fmi.fi  Tue Sep  9 07:07:40 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Tue, 09 Sep 2014 17:07:40 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
In-Reply-To: <20140909135504.GG5496@localhost>
References: <20140909104823.GC5496@localhost> <540EEBEC.3040403@fmi.fi>
	<20140909130625.GE5496@localhost> <540F0467.1000006@fmi.fi>
	<20140909135504.GG5496@localhost>
Message-ID: <540F09AC.3080701@fmi.fi>

On 09/09/2014 04:55 PM, Sandro Santilli wrote:
> On Tue, Sep 09, 2014 at 04:45:11PM +0300, Mika Heiskanen wrote:
>> On 09/09/2014 04:06 PM, Sandro Santilli wrote:
>
>>> One failing test (when using ST_Intersection) is this one
>>> (number 87 in the unit test):
>>>
>>>      // triangle corner at left edge
>>>      Input:   LINESTRING (3 3,0 6,3 9)
>>>      Desired: LINESTRING (3 3,0 6,3 9)
>>>
>>> ST_Intersection outputs this instead:
>>>
>>>      Output:  MULTILINESTRING ((0 6, 3 9), (0 6, 3 3))
>>
>> I do not see why the output should be split unless it has been
>> agreed in some (de facto?) standard. Has it?
>
> Not really. It just happen to be the case due to the algorithm used
> for the overlay based intersection. When the topology is built the
> edge do not get sewed unless needed (ie: for polygons).
>
> I think avoiding the re-join is just done to do less work, as if needed
> it can be obtained by a subsequent step.

But in the case of the current algorithm, there is no need for re-join
as the edge point is included automatically. The algorithm will skip
edges which travel along the edges of the rectangle, not single vertices
that just visit an edge. No amount of work is really saved by skipping
the edge point. In fact, one might argue it would be slower to skip
it since then there would be two memory allocations for the separate
linestrings instead of just one for one linestring.

Regards,

Mika Heiskanen / FMI


From geos-trac at osgeo.org  Tue Sep  9 07:15:47 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 14:15:47 -0000
Subject: [geos-devel] [GEOS] #703: Empty.equals(Empty) == false
In-Reply-To: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
References: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
Message-ID: <053.de9f18d4282e98fe1fd8782f106d6f95@osgeo.org>

#703: Empty.equals(Empty) == false
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 Same happens with Polygon empty. The common root is
 Envelope::equals(Envelope) returning false for the so-called "null
 envelope". Should it be true instead ?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/703#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep  9 07:16:35 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 14:16:35 -0000
Subject: [geos-devel] [GEOS] #703: Empty.equals(Empty) == false
In-Reply-To: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
References: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
Message-ID: <053.23e9f4ddafc35a23524bc53f22b7e4c4@osgeo.org>

#703: Empty.equals(Empty) == false
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 indeed in JTS null Envelope is equal to null Envelope, so yes, it shoudl
 return true !

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/703#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Tue Sep  9 07:28:11 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 16:28:11 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection, line merging ?
In-Reply-To: <540F09AC.3080701@fmi.fi>
References: <20140909104823.GC5496@localhost> <540EEBEC.3040403@fmi.fi>
	<20140909130625.GE5496@localhost> <540F0467.1000006@fmi.fi>
	<20140909135504.GG5496@localhost> <540F09AC.3080701@fmi.fi>
Message-ID: <20140909142811.GH5496@localhost>

On Tue, Sep 09, 2014 at 05:07:40PM +0300, Mika Heiskanen wrote:
> On 09/09/2014 04:55 PM, Sandro Santilli wrote:

> >I think avoiding the re-join is just done to do less work, as if needed
> >it can be obtained by a subsequent step.
> 
> But in the case of the current algorithm, there is no need for re-join
> as the edge point is included automatically. The algorithm will skip
> edges which travel along the edges of the rectangle, not single vertices
> that just visit an edge. No amount of work is really saved by skipping
> the edge point. In fact, one might argue it would be slower to skip
> it since then there would be two memory allocations for the separate
> linestrings instead of just one for one linestring.

True. I'll try to make the existing tests tolerant to point-set equality
instead, so to accept both split and non-split results as valid.

I'd really love to get this path taken by default from ST_Intersection
if no other robustness issues come out.

--strk; 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Tue Sep  9 07:29:44 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 14:29:44 -0000
Subject: [geos-devel] [GEOS] #703: Empty.equals(Empty) == false
In-Reply-To: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
References: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
Message-ID: <053.ca1439ce5b9d746e1706fae7d445c418@osgeo.org>

#703: Empty.equals(Empty) == false
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 I've found PointEmpty.equals(PointEmpty) being also regress-tested to be
 false, but I'll update the test too...

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/703#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep  9 07:46:51 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 14:46:51 -0000
Subject: [geos-devel] [GEOS] #703: Empty.equals(Empty) == false
In-Reply-To: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
References: <044.6d09292f06a139bd0607b4064fc80793@osgeo.org>
Message-ID: <053.c285e0f1e73cfcec061f168067717484@osgeo.org>

#703: Empty.equals(Empty) == false
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.4.3                     
Component:  Default     |      Version:  3.3.9                     
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * version:  3.4.2 => 3.3.9
  * resolution:  => fixed


Comment:

 Fixed by r3999 in 3.3 branch (3.3.10), r4000 in 3.4. branch (3.4.3) and
 r4001 in trunk (3.5.0)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/703#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Tue Sep  9 07:56:55 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 16:56:55 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
Message-ID: <20140909145655.GA32173@localhost>

Another case where output differs from ST_Intersection:

  Rectangle: 0,0 10,10
   Geometry: LINESTRING(10 0, 20 0)
   Expected: POINT(10, 0)
   Obtained: EMPTY

  +----------+
  |          |
  |          |
  |          |
  +----------O------------+

That is, the intersection of a rectangle and a linestring whose endpoint
is on one of its corners is expected to yeld the corner point.

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From mika.heiskanen at fmi.fi  Tue Sep  9 08:20:04 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Tue, 09 Sep 2014 18:20:04 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <20140909145655.GA32173@localhost>
References: <20140909145655.GA32173@localhost>
Message-ID: <540F1AA4.5030104@fmi.fi>

On 09/09/2014 05:56 PM, Sandro Santilli wrote:
> Another case where output differs from ST_Intersection:
>
>    Rectangle: 0,0 10,10
>     Geometry: LINESTRING(10 0, 20 0)
>     Expected: POINT(10, 0)
>     Obtained: EMPTY
>
>    +----------+
>    |          |
>    |          |
>    |          |
>    +----------O------------+
>
> That is, the intersection of a rectangle and a linestring whose endpoint
> is on one of its corners is expected to yeld the corner point.

Well, this is unfortunate. As implied earlier, I did not check any 
standards on how such things are resolved, I merely programmed it
as quickly as I could from the perspective of rendering. Our
algorithm produces only linestrings and polygons for respective
input. Points are generated only for pointlike input.

If this is how clipping is to be defined, it is going to have
a serious impact on the algorithm. There aren't that many special
cases, but handling them within the already complex if-else
sequences could be a nasty task.

The special cases are as far as the current code would be concerned are:

* a vertex is on a rectangle edge
* a vertex is on a rectangle corner
* an edge passes through a corner of the rectangle

The RectangleClipBuilder API would have to be enlarged to
handle individual points. The implementation should probably
merge all such points into a multipoint.

I'd like to see a reference where all such special cases
are defined explicitly. (No, I never looked for one, as explained
before.) In your previous example a linestring was split in half
because a vertex is on the rectangle edge. This is kind of consistent
with the interpretation that the vertex is considered to be out.
However, the example presented here is consistent with the
interpretation that the vertex should be considered to be in.

Regards,

Mika Heiskanen / FMI



From strk at keybit.net  Tue Sep  9 08:27:10 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 17:27:10 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <540F1AA4.5030104@fmi.fi>
References: <20140909145655.GA32173@localhost>
 <540F1AA4.5030104@fmi.fi>
Message-ID: <20140909152710.GB32173@localhost>

On Tue, Sep 09, 2014 at 06:20:04PM +0300, Mika Heiskanen wrote:
> On 09/09/2014 05:56 PM, Sandro Santilli wrote:
> >Another case where output differs from ST_Intersection:
> >
> >   Rectangle: 0,0 10,10
> >    Geometry: LINESTRING(10 0, 20 0)
> >    Expected: POINT(10, 0)
> >    Obtained: EMPTY
> >
> >   +----------+
> >   |          |
> >   |          |
> >   |          |
> >   +----------O------------+
> >
> >That is, the intersection of a rectangle and a linestring whose endpoint
> >is on one of its corners is expected to yeld the corner point.
> 
> Well, this is unfortunate. As implied earlier, I did not check any
> standards on how such things are resolved, I merely programmed it
> as quickly as I could from the perspective of rendering. Our
> algorithm produces only linestrings and polygons for respective
> input. Points are generated only for pointlike input.
> 
> If this is how clipping is to be defined, it is going to have
> a serious impact on the algorithm. There aren't that many special
> cases, but handling them within the already complex if-else
> sequences could be a nasty task.
> 
> The special cases are as far as the current code would be concerned are:
> 
> * a vertex is on a rectangle edge
> * a vertex is on a rectangle corner
> * an edge passes through a corner of the rectangle

I found another:

 * an edge goes on a rectangle edge:

  Rectangle: 0,0 10,10
   Geometry: LINESTRING (0 3,0 5,0 7)
   Expected: LINESTRING (0 3,0 5,0 7)
   Obtained: EMPTY

> The RectangleClipBuilder API would have to be enlarged to
> handle individual points. The implementation should probably
> merge all such points into a multipoint.
> 
> I'd like to see a reference where all such special cases
> are defined explicitly. (No, I never looked for one, as explained
> before.) In your previous example a linestring was split in half
> because a vertex is on the rectangle edge. This is kind of consistent
> with the interpretation that the vertex is considered to be out.
> However, the example presented here is consistent with the
> interpretation that the vertex should be considered to be in.

Indeed the results are formally confusing.
I hope Martin Davis can chime in, being the author of the currently
used algorithm.

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From mika.heiskanen at fmi.fi  Tue Sep  9 08:44:49 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Tue, 09 Sep 2014 18:44:49 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <20140909152710.GB32173@localhost>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost>
Message-ID: <540F2071.6060104@fmi.fi>

On 09/09/2014 06:27 PM, Sandro Santilli wrote:
>> I'd like to see a reference where all such special cases
>> are defined explicitly. (No, I never looked for one, as explained
>> before.) In your previous example a linestring was split in half
>> because a vertex is on the rectangle edge. This is kind of consistent
>> with the interpretation that the vertex is considered to be out.
>> However, the example presented here is consistent with the
>> interpretation that the vertex should be considered to be in.
>
> Indeed the results are formally confusing.
> I hope Martin Davis can chime in, being the author of the currently
> used algorithm.

Our algorithm discards all points on the rectangle edges unless they
are required to represent the resulting geometry. This means
intermediate vertices might be skipped when the edges are travelling
along the rectangle edge.

I do see however that someone might wish original vertices on the edges
to be preserved during polygon clipping, for example if the geometry is
to be projected afterwards.

Regards,

Mika Heiskanen / FMI





From strk at keybit.net  Tue Sep  9 08:53:00 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 9 Sep 2014 17:53:00 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <540F2071.6060104@fmi.fi>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost> <540F2071.6060104@fmi.fi>
Message-ID: <20140909155300.GD32173@localhost>

On Tue, Sep 09, 2014 at 06:44:49PM +0300, Mika Heiskanen wrote:
> On 09/09/2014 06:27 PM, Sandro Santilli wrote:
> >>I'd like to see a reference where all such special cases
> >>are defined explicitly. (No, I never looked for one, as explained
> >>before.) In your previous example a linestring was split in half
> >>because a vertex is on the rectangle edge. This is kind of consistent
> >>with the interpretation that the vertex is considered to be out.
> >>However, the example presented here is consistent with the
> >>interpretation that the vertex should be considered to be in.
> >
> >Indeed the results are formally confusing.
> >I hope Martin Davis can chime in, being the author of the currently
> >used algorithm.
> 
> Our algorithm discards all points on the rectangle edges unless they
> are required to represent the resulting geometry. This means
> intermediate vertices might be skipped when the edges are travelling
> along the rectangle edge.
> 
> I do see however that someone might wish original vertices on the edges
> to be preserved during polygon clipping, for example if the geometry is
> to be projected afterwards.

Yep. Best would be if all these options could be available as parameters
of the RectangleIntersection class.

Beside, re-thinking about the consistency of the split, I think the reason
why the linestring was split was not because the boundary of the rectangle
was not considered part of the result, but rather just a subproduct of
the geomgraph building algorithm. I'm saying this because in the case of
a linestring laying on a single edge of the rectangle, that line also
becomes a multiline, for no apparent reason. 

So my guess is that boundary intersections are always included in
the result as either points, lines or polygons depending on the
dimension of the intersection.

--strk; 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Tue Sep  9 09:33:33 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 09 Sep 2014 16:33:33 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.4f94aee3a5ea593f6cf7f59be11a1691@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 I'm currently in the process of slightly modifying the algo so that points
 on the rectangle boundary are also included in the output (if the other
 geometry has any intersection with them).
 This requires reviewing each testcase and adapt it to the new expectance
 (the code part wasn't hard)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Wed Sep 10 07:07:34 2014
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 10 Sep 2014 16:07:34 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <20140909155300.GD32173@localhost>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost> <540F2071.6060104@fmi.fi>
	<20140909155300.GD32173@localhost>
Message-ID: <20140910140734.GE4375@localhost>

So I've modified the RectangleIntersection algorithm to include
boundary points/lines in the output and updated the test to
expect those additional parts in the result.

Additionally, I've modified the tester to also run the current
overlay-based intersection and compare the results, and so far
I got the same results, so it would sound closer to be a transparent
replacement.

Tests are very welcome.

NOTE: if you build with -DUSE_RECTANGLE_INTERSECTION=1 you'll get
a version of GEOS automatically using the new algoritm whenever
GEOSIntersection (Geometry::intersection) is called with either
operands being a rectangle.

--strk;

On Tue, Sep 09, 2014 at 05:53:00PM +0200, Sandro Santilli wrote:
> On Tue, Sep 09, 2014 at 06:44:49PM +0300, Mika Heiskanen wrote:
> > On 09/09/2014 06:27 PM, Sandro Santilli wrote:
> > >>I'd like to see a reference where all such special cases
> > >>are defined explicitly. (No, I never looked for one, as explained
> > >>before.) In your previous example a linestring was split in half
> > >>because a vertex is on the rectangle edge. This is kind of consistent
> > >>with the interpretation that the vertex is considered to be out.
> > >>However, the example presented here is consistent with the
> > >>interpretation that the vertex should be considered to be in.
> > >
> > >Indeed the results are formally confusing.
> > >I hope Martin Davis can chime in, being the author of the currently
> > >used algorithm.
> > 
> > Our algorithm discards all points on the rectangle edges unless they
> > are required to represent the resulting geometry. This means
> > intermediate vertices might be skipped when the edges are travelling
> > along the rectangle edge.
> > 
> > I do see however that someone might wish original vertices on the edges
> > to be preserved during polygon clipping, for example if the geometry is
> > to be projected afterwards.
> 
> Yep. Best would be if all these options could be available as parameters
> of the RectangleIntersection class.
> 
> Beside, re-thinking about the consistency of the split, I think the reason
> why the linestring was split was not because the boundary of the rectangle
> was not considered part of the result, but rather just a subproduct of
> the geomgraph building algorithm. I'm saying this because in the case of
> a linestring laying on a single edge of the rectangle, that line also
> becomes a multiline, for no apparent reason. 
> 
> So my guess is that boundary intersections are always included in
> the result as either points, lines or polygons depending on the
> dimension of the intersection.
> 
> --strk; 
> 
>  ()  ASCII ribbon campaign  --  Keep it simple !
>  /\  http://strk.keybit.net/rants/ascii_mails.txt  

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Wed Sep 10 09:22:39 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 10 Sep 2014 16:22:39 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.bed0b2002e6dfba26e6b78749d80711a@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 UPDATE: boundary intersections are now included in the result, and GEOS
 can be built to automatically use RectangleIntersection from the standard
 intersection API by defining USE_RECTANGLE_INTERSECTION macro at compile-
 time.

 Doing that enables a lot of other tests existing for general intersection.
 Some of them fail for the removal of boundary vertexes which are already
 covered by an edge segment, as reported by Mika on the mailing list. That
 we want fixed.

 Some of them fail due to the presence of duplicated vertices, minor but
 also worth fixing.

 Some are failing badly, returning invalid multipolygons.

 A good starting point is ./tests/general/TestFunctionAA.xml
 I'll keep looking at them.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mika.heiskanen at fmi.fi  Wed Sep 10 10:08:27 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Wed, 10 Sep 2014 20:08:27 +0300
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <053.bed0b2002e6dfba26e6b78749d80711a@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
	<053.bed0b2002e6dfba26e6b78749d80711a@osgeo.org>
Message-ID: <5410858B.7030005@fmi.fi>

Could you comment on how the returned multipolygons are invalid?
This is of major interest to us too at FMI. I can pull the
code and study the results myself, but likely not until
next week.

- Mika


From geos-trac at osgeo.org  Thu Sep 11 05:21:33 2014
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 11 Sep 2014 12:21:33 -0000
Subject: [geos-devel] [GEOS] #704: Difference error
Message-ID: <050.a4f356e76a61641b5767b5ba4664166b@osgeo.org>

#704: Difference error
------------------------+---------------------------------------------------
 Reporter:  yanivnavon  |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 When performing a Difference between two polygons which shares the same
 polyline or part of it, the resulting polygon would have some unwanted
 lines.

 Reproduce:

 1. Polygons:
 A)
 POLYGON ((580 337, 580 342.1, 581.3 338.8, 581.3666666666667
 338.8833333333333, 581.4166666666666 339, 581.45 339.1166666666667,
 581.5166666666667 339.26666666666665, 582.4 341.9, 583.5 337.1, 580 337))

 B)
 POLYGON ((578.3 340.9, 578.4166666666666 340.9166666666667, 578.55
 340.9166666666667, 585.1 341, 585 340.4, 578.9 340.4, 578.3 340.9))

 2. Perform Union between polygon A and polygon B to get shared lines.

 3. Perform Difference between result from #2 and polygon B.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/704>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Thu Sep 11 06:52:21 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 11 Sep 2014 15:52:21 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
Message-ID: <20140911135221.GA5735@localhost>

On Wed, Sep 10, 2014 at 06:59:53PM -0700, Martin Davis wrote:
> Sandro, are the two cases below currently in JTS?  If not I should add
> them...

I hadn't checked, but I'm using GEOS results as reference, so it gives
the results I'm reporting already.

Actually one result I'm looking at is perplexing.
One operand is the usual rectangle, the other is a polygon which
is cut by the right-edge of the rectangle and has a rectangular
hole whose right edge is covered by the rectangle edge:

 POLYGON(
  (5 2,5 8,15 8,15 2,5 2),
  (8 4, 8 6, 10 6, 10 4, 8 4)
 )

10 +-----------+
   |           |
 8 |    +------+----+
   |    |      :    |   h: hole
 6 |    |  +---+    |   s: shell
   |    |  | h |    |   
 4 |    |  +---+    |
   |    |      :    |
   |    |   s  :  s |
 2 |    +------+----+
   |           |
 0 +-----------+
   0    5  8  10   15

GEOS intersection result is:

 GEOMETRYCOLLECTION (
   POLYGON ((8 4, 8 6, 10 6, 10 4, 8 4)),
   LINESTRING (10 2, 5 2, 5 8, 10 8)
 )

Visually:

10 . . . . . . .
   .           .
 8 .    +------+     
   .    |      .        
 6 .    |  +---+       
   .    |  |   |        
 4 .    |  +---+     
   .    |      .     
   .    |      .     
 2 .    +------+     
   .           .
 0 . . . . . . .
   0    5  8  10   15

Does JTS give the correct answer for that ?

--strk;

From strk at keybit.net  Thu Sep 11 06:58:32 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 11 Sep 2014 15:58:32 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <20140911135221.GA5735@localhost>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost>
Message-ID: <20140911135832.GB5735@localhost>

On Thu, Sep 11, 2014 at 03:52:21PM +0200, Sandro Santilli wrote:
> On Wed, Sep 10, 2014 at 06:59:53PM -0700, Martin Davis wrote:
> > Sandro, are the two cases below currently in JTS?  If not I should add
> > them...
> 
> I hadn't checked, but I'm using GEOS results as reference, so it gives
> the results I'm reporting already.
> 
> Actually one result I'm looking at is perplexing.
> One operand is the usual rectangle, the other is a polygon which
> is cut by the right-edge of the rectangle and has a rectangular
> hole whose right edge is covered by the rectangle edge:
> 
>  POLYGON(
>   (5 2,5 8,15 8,15 2,5 2),
>   (8 4, 8 6, 10 6, 10 4, 8 4)
>  )
> 
> 10 +-----------+
>    |           |
>  8 |    +------+----+
>    |    |      :    |   h: hole
>  6 |    |  +---+    |   s: shell
>    |    |  | h |    |   
>  4 |    |  +---+    |
>    |    |      :    |
>    |    |   s  :  s |
>  2 |    +------+----+
>    |           |
>  0 +-----------+
>    0    5  8  10   15
> 
> GEOS intersection result is:
> 
>  GEOMETRYCOLLECTION (
>    POLYGON ((8 4, 8 6, 10 6, 10 4, 8 4)),
>    LINESTRING (10 2, 5 2, 5 8, 10 8)
>  )
> 
> Visually:
> 
> 10 . . . . . . .
>    .           .
>  8 .    +------+     
>    .    |      .        
>  6 .    |  +---+       
>    .    |  |   |        
>  4 .    |  +---+     
>    .    |      .     
>    .    |      .     
>  2 .    +------+     
>    .           .
>  0 . . . . . . .
>    0    5  8  10   15
> 
> Does JTS give the correct answer for that ?

Sorry, I've accidentally sent the result obtained by the new
RectangleIntersection code (the one returning lines rather than
rectangle) instead of the one returned by GEOS.

The one returned by GEOS is still suspicious:

 GEOMETRYCOLLECTION (
  LINESTRING (10 6, 10 4),
  POLYGON ((5 2, 5 8, 10 8, 10 6, 8 6, 8 4, 10 4, 10 2, 5 2))
 )

That is, the polygon I'd expect plus a dangling line I would
not expect to see in output.  Visually: 

 10 . . . . . . .
    .           .
  8 .    +------+
    .    |      |
  6 .    |  +---+
    .    |  |   |<-- spurious line
  4 .    |  +---+
    .    |      |
    .    |    s | <-- s: shell
  2 .    +------+
    .           .
  0 . . . . . . .
    0    5  8  10 

Is the dangling line expected to be in output ? If so, why ?
Does JTS also include it ?

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Thu Sep 11 07:06:27 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 11 Sep 2014 16:06:27 +0200
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <5410858B.7030005@fmi.fi>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
	<053.bed0b2002e6dfba26e6b78749d80711a@osgeo.org>
	<5410858B.7030005@fmi.fi>
Message-ID: <20140911140627.GC5735@localhost>

On Wed, Sep 10, 2014 at 08:08:27PM +0300, Mika Heiskanen wrote:
> Could you comment on how the returned multipolygons are invalid?
> This is of major interest to us too at FMI. I can pull the
> code and study the results myself, but likely not until
> next week.

The invalidity I was referring to in the ticket had to do with the
attempt at creating linear rings by closing linestring of 2 vertices,
creating a 3-vertex ring, which is obviously invalid (no area).

I've fixed that in code by keeping those lines as such rather than
attempting to create areas out of them.

Right now I'm trying to fix other cases that arise by running the
current RectangleIntersection code against the testcases
in tests/general/TestFunctionAA.xml (for example case13 test3).
Some of them may be due to my changes of considering boundary as
being "internal", if you have code your side to test it, the input is:

  Rectangle(0,0,10,10);
  "POLYGON((5 2,5 8,15 8,15 2,5 2),(8 4, 8 6, 10 6, 10 4, 8 4))"

--strk;

From strk at keybit.net  Thu Sep 11 08:17:02 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 11 Sep 2014 17:17:02 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <20140911135832.GB5735@localhost>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
Message-ID: <20140911151702.GA22865@localhost>

On Thu, Sep 11, 2014 at 03:58:32PM +0200, Sandro Santilli wrote:
> On Thu, Sep 11, 2014 at 03:52:21PM +0200, Sandro Santilli wrote:

> > Actually one result I'm looking at is perplexing.
> > One operand is the usual rectangle, the other is a polygon which
> > is cut by the right-edge of the rectangle and has a rectangular
> > hole whose right edge is covered by the rectangle edge:
> > 
> >  POLYGON(
> >   (5 2,5 8,15 8,15 2,5 2),
> >   (8 4, 8 6, 10 6, 10 4, 8 4)
> >  )
> > 
> > 10 +-----------+
> >    |           |
> >  8 |    +------+----+
> >    |    |      :    |   h: hole
> >  6 |    |  +---+    |   s: shell
> >    |    |  | h |    |   
> >  4 |    |  +---+    |
> >    |    |      :    |
> >    |    |   s  :  s |
> >  2 |    +------+----+
> >    |           |
> >  0 +-----------+
> >    0    5  8  10   15
> > 
> > GEOS intersection result is:
> 
>  GEOMETRYCOLLECTION (
>   LINESTRING (10 6, 10 4),
>   POLYGON ((5 2, 5 8, 10 8, 10 6, 8 6, 8 4, 10 4, 10 2, 5 2))
>  )
> 
> That is, the polygon I'd expect plus a dangling line I would
> not expect to see in output.  Visually: 
> 
>  10 . . . . . . .
>     .           .
>   8 .    +------+
>     .    |      |
>   6 .    |  +---+
>     .    |  |   |<-- spurious line
>   4 .    |  +---+
>     .    |      |
>     .    |    s | <-- s: shell
>   2 .    +------+
>     .           .
>   0 . . . . . . .
>     0    5  8  10 
> 
> Is the dangling line expected to be in output ? If so, why ?
> Does JTS also include it ?

I've just tried with JTS and it indeed gives the same result.
Is including that right line correct ?
Being a Boundary-Boundary intersection of the two operands it
would indeed seem correct to include it.

I dunno how the RectangleIntersection could handle such case...

--strk; 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Thu Sep 11 08:57:52 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 11 Sep 2014 17:57:52 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
	touching rectangle
In-Reply-To: <CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
References: <20140909145655.GA32173@localhost> <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
Message-ID: <20140911155752.GB26196@localhost>

[re-adding geos-devel in the recipient lits]

On Thu, Sep 11, 2014 at 08:50:17AM -0700, Martin Davis wrote:
> Yup, that's correct output for JTS, as per it's spec (not the OGC spec -
> they didn't actually specify any semantics, so I made them up  8^)

Indeed OGC only talks about what "intersects" mean, but I guess for extension
returning something that contains all shared points from interior-or-boundary
of either operands is the closest thing to do.

> The rationale is as before - provide everything back, and it can be
> filtered post-op if required.  That said, JTS really needs an easy way to
> retain just the polygons- or even better retain just the highest dimension
> output geometries.
>
> Not sure how this could be handled by the RectangleIntersection.   I'm sure
> it could be done, but might be complicated.

Did you take a look at the algorithm ?
It sounds like by the end of operations the class is left with a bunch
of lines to work with, not much to build a result w/out going back
to look at which sides of those lines are internal or external of the
originals.

> I'd be tempted to just provide the RI as a separate class...

Yeah, it is already a separate class, I might just give up making it
transparently used by Geometry::intersection().

--strk;

From mika.heiskanen at fmi.fi  Thu Sep 11 09:30:45 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Thu, 11 Sep 2014 19:30:45 +0300
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <20140911155752.GB26196@localhost>
References: <20140909145655.GA32173@localhost>
	<540F1AA4.5030104@fmi.fi>	<20140909152710.GB32173@localhost>	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>	<20140911135221.GA5735@localhost>
	<20140911135832.GB5735@localhost>	<20140911151702.GA22865@localhost>	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost>
Message-ID: <5411CE35.3060607@fmi.fi>

On 09/11/2014 06:57 PM, Sandro Santilli wrote:
> Did you take a look at the algorithm ?
> It sounds like by the end of operations the class is left with a bunch
> of lines to work with, not much to build a result w/out going back
> to look at which sides of those lines are internal or external of the
> originals.

At the time of insertion into the builder it is known for all
linestrings whether they are part of a hole or the exterior of
a polygon. This information can be inserted into the builder
along with the linestring, and used in the rebuild phase. Currently
the logic dictates that any clipped hole must necessarily become
a part of the exterior of a polygon, and the linestrings are
connected accordingly by traveling the rectangle clockwise to
find the next linestring to connect to. Even though the orientation
of the holes was counter-clockwise, connecting to the linestring in
the original order is correct for building the exterior.

What should remain is how to detect in the reconnect
phase the special case of a linestring traveling only on the edges
of the rectangle, and to handle it accordingly. I'm not sure,
but wouldn't the boolean passed along with the linestring
(hole or not) be enough to decide whether to just throw the
linestring away or keep it in the reconnect phase? Possibly
such a linestring could be even detected during the clipping
phase by keeping track on whether all the vertices so far have
been on the edges without true intersections, and then the
linestring would not be inserted into the builder at all if it is
not of the correct type (hole/exterior).

Mika Heiskanen / FMI




From mika.heiskanen at fmi.fi  Thu Sep 11 13:07:26 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Thu, 11 Sep 2014 23:07:26 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
References: <20140909145655.GA32173@localhost>	<540F1AA4.5030104@fmi.fi>	<20140909152710.GB32173@localhost>	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>	<20140911135221.GA5735@localhost>	<20140911135832.GB5735@localhost>	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
Message-ID: <541200FE.8020705@fmi.fi>

On 09/11/2014 06:49 PM, Martin Davis wrote:
> Yup, that's correct output for JTS, as per it's spec (not the OGC spec -
> they didn't actually specify any semantics, so I made them up  8^)
>
> The rationale is as before - provide everything back, and it can be
> filtered post-op if required.  That said, JTS really needs an easy way
> to retain just the polygons- or even better retain just the highest
> dimension output geometries.

The rationale for leaving the post processing task to the user
is not solid, since the user may not be aware of what is required
to achieve the desired result. You certainly have not documented
the GEOS/JTS API well enough for casual user to be able to do so.

A case study from personal experience: I implemented a contouring
(isoline and isoband calculation) algorithm which feeds the line
segments to the GEOS Polygonizer class. I then found out that the
polygonizer would build all possible geometries instead of building
just the one that fit the input. In other words, I got polygons with
holes, but also the same holes as separate polygons. I eventually
had to write a separate post processing stage that would remove the
superfluous rings to get a single consistent geometry. An ordinary
user should not be expected to do so, the required code is not
trivial.

Regards,

Mika Heiskanen / FMI



From mika.heiskanen at fmi.fi  Thu Sep 11 20:57:43 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 06:57:43 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection: line touching
	rectangle
In-Reply-To: <CAK2ens3V9=o2YTnfAFU3tkAAXX6i9h9hYVERmKL0O+xTzVjiMg@mail.gmail.com>
References: <20140909145655.GA32173@localhost>	<540F1AA4.5030104@fmi.fi>	<20140909152710.GB32173@localhost>	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>	<20140911135221.GA5735@localhost>	<20140911135832.GB5735@localhost>	<20140911151702.GA22865@localhost>	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>	<541200FE.8020705@fmi.fi>
	<CAK2ens3V9=o2YTnfAFU3tkAAXX6i9h9hYVERmKL0O+xTzVjiMg@mail.gmail.com>
Message-ID: <54126F37.6070500@fmi.fi>

On 09/12/2014 03:23 AM, Martin Davis wrote:
>
> I agree that having a built-in way to extract only the outer polygons
> from a polygonized dataset would be useful.  Someone else asked for this
> just yesterday. I haven't come across this use case before, so hadn't
> realized it was needed.  Have you made any attempt to share the code you
> wrote to solve this problem?  You can do so on the JTS list, or via the
> usual ways of sharing code (ie GitHub).  If not, please don't complain
> that it isn't present in JTS.

Actually I initially reported it as a bug:

   http://lists.osgeo.org/pipermail/geos-devel/2014-March/006821.html

and was explained it was not. I was then informed of PostGIS BuildArea
function. The function does a final overlay operation, which I thought 
we would not need. I then offered our a bit different solution, but
there was no interest then:

   http://lists.osgeo.org/pipermail/geos-devel/2014-March/006831.html

I'm including the code below so you can check if you see any
use for the code. The main code has called normalize for all the input
polygons, and then calls buildGeometry to build the final result.


    * \brief Remove superfluous polygons from the list
    *
    * We need to remove those polygons whose outer rings
    * are holes in another polygon. For the original algorithm
    * see PostGIS liblwgeom/lwgeom_geos.c source code. However,
    * we can improve on it since we know for a fact that all
    * edges in the input appeared only once. Hence we can just
    * take a sample edge from all rings, and see if they appear
    * both in an outer ring and in a hole. If that happens
    * we remove the polygon where the edge is in the outer
    * ring. However, there may be multiple nesting, we must
    * only remove the polygon if its number of parents is
    * odd.
    *
    * For this to be efficient each polygon should be in normalized
    * form, which is actually good also for the stability of the
    * regression tests. In the normalized form the inner and
    * outer rings will have the same first coordinate, but
    * the order of the remaining coordinates is reversed for
    * holes. Hence we can check whether the first and second coordinates
    * match the first and second to last coordinates of the hole.
    *
    * PostGIS compares the full ring and also does an
    * extra overlay on the final result to dissolve duplicate
    * edges.
    */



   void 
GeosBuilder::remove_superfluous_polygons(std::vector<geos::geom::Polygon 
*>  & polys)
   {
     namespace gg = geos::geom;

     // No need for the extra check if there are no multiple polygons
     // or if there are no holes

     if(polys.size() < 2 || !has_holes(polys))
       return;

     // Child polygon indices
     std::vector<int> children(polys.size(), -1);


     for(std::size_t p=0; p<polys.size(); p++)
       {
         for(std::size_t h=0; h<polys[p]->getNumInteriorRing(); h++)
           {
             const gg::LineString * hole = polys[p]->getInteriorRingN(h);
             if(hole != NULL)
               {
                 const gg::CoordinateSequence * cs = 
hole->getCoordinatesRO();
                 const gg::Coordinate & p1 = cs->getAt(0);
                 const gg::Coordinate & p2 = cs->getAt(cs->size()-2);

                 // Now find if there is a matching outer ring

                 for(std::size_t pp=0; pp<polys.size(); pp++)
                   {
                     if(p != pp && polys[pp] != NULL)
                       {
                         const gg::LineString * shell = 
polys[pp]->getExteriorRing();
                         if(shell != NULL)
                           {
                             const gg::CoordinateSequence * cs2 = 
shell->getCoordinatesRO();
                             const gg::Coordinate & sp1 = cs2->getAt(0);
                             const gg::Coordinate & sp2 = cs2->getAt(1);

                             if(p1 == sp1 && p2 == sp2)
                               {
                                 children[pp] = static_cast<int>(p);
                                 break;
                               }
                           }
                       }
                       }
               }
           }
       }

     // Now delete polygons which have an even number of children

     std::size_t outpos = 0;
     for(std::size_t p=0; p<polys.size(); p++)
       {
         int count = 0;
         int pos = static_cast<int>(p);
         while(children[pos] >= 0)
           {
             ++count;
             pos = children[pos];
           }
         if(count % 2 == 1)
           {
             delete polys[p];
           }
         else
           {
             polys[outpos++] = polys[p];
           }
       }
     polys.resize(outpos);

   }

   bool GeosBuilder::has_holes(const std::vector<geos::geom::Polygon *> 
  & polys)
   {
     if(polys.empty())
       return false;

     for(std::size_t i=0; i<polys.size(); i++)
       {
         if( polys[i]->getNumInteriorRing() != 0)
           return true;
       }

     return false;
   }



From strk at keybit.net  Fri Sep 12 01:07:03 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 10:07:03 +0200
Subject: [geos-devel] Area building (was: Geometry/Rectangle Intersection:
 line touching rectangle)
Message-ID: <20140912080703.GA5342@localhost>

On Fri, Sep 12, 2014 at 06:57:43AM +0300, Mika Heiskanen wrote:
> On 09/12/2014 03:23 AM, Martin Davis wrote:
> >
> >I agree that having a built-in way to extract only the outer polygons
> >from a polygonized dataset would be useful.
>
> I was then informed of PostGIS BuildArea
> function. The function does a final overlay operation, which I
> thought we would not need. I then offered our a bit different
> solution, but there was no interest then:
> 
>   http://lists.osgeo.org/pipermail/geos-devel/2014-March/006831.html

Personally I hadn't shown interest because the postgis algorithm was
recently (greatly) improved, enough to be happy about it.
Also, you hadn't shown performance comparison in that mail, so taking
it in consideration would have required me to do so myself, that is
port the code to PostGIS, test it against the existing testsuite,
check performance. Too much work for unknown benefit.

Following latest changes in PostGIS your code could possibly
speedup the "findFaceHoles", but it'd need to be profiled against
a set of tests to really tell. There's also a TODO in the "findFacesHole"
function suggesting further speedups.

The final overlay (self-union) was needed to allow building an area
from a linework like this:

 +---+---+
 |   |   |
 +---+---+

It might indeed be useful to make the self-union optional for cases in
which it is known in advance that the above case would never happen.

I hope the C++ code you wrote can be useful to Martin for eventually
embedding it as an optional feature of the Polygonizer class.

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Fri Sep 12 01:28:43 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 10:28:43 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <5411CE35.3060607@fmi.fi>
References: <540F1AA4.5030104@fmi.fi> <20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
Message-ID: <20140912082843.GB5342@localhost>

On Thu, Sep 11, 2014 at 07:30:45PM +0300, Mika Heiskanen wrote:
> On 09/11/2014 06:57 PM, Sandro Santilli wrote:
> >Did you take a look at the algorithm ?
> >It sounds like by the end of operations the class is left with a bunch
> >of lines to work with, not much to build a result w/out going back
> >to look at which sides of those lines are internal or external of the
> >originals.
> 
> At the time of insertion into the builder it is known for all
> linestrings whether they are part of a hole or the exterior of
> a polygon. This information can be inserted into the builder
> along with the linestring, and used in the rebuild phase.

Not only whether the linestring was part of an hole or a shell, but
in case it was part of the hole, we must also pass along which side
of boundary segments had the area. Look here:

Clipping rectangle       Expected result
and input                ( a poligon + a line )

 +-------+               . . . . .
 |rect   |               .       .
 |  +----:-----+         .  +----+
 |  |    :     |         .  |    |
 |  | +--+     |         .  | +--+
 |  | |h |     |         .  | |  | <-- dangling line
 |  | +--+ s   |         .  | +--+
 |  |    :     |         .  |    |
 |  |    +--+  |         .  |    |
 |  |    |h |  |         .  |    | <-- dissolved
 |  |    +--+  |         .  |    |
 |  |    :     |         .  |    |
 |  +----:-----+         .  +----+
 |       :               .       .
 +-------+               . . . . .

> Currently
> the logic dictates that any clipped hole must necessarily become
> a part of the exterior of a polygon, and the linestrings are
> connected accordingly by traveling the rectangle clockwise to
> find the next linestring to connect to. Even though the orientation
> of the holes was counter-clockwise, connecting to the linestring in
> the original order is correct for building the exterior.

That logic doesn't work in the case above

Builder currently        And after connecting the linsestrings
sees this:               produces this (single polygon with an hole):

 . . . . .               . . . . .
 .       .  l: line      .       .  s: shell
 .  +----+  p: poly      .  +----+  h: hole
 .  |    .               .  | s  |
 .  | +--+               .  | +--+  This is an invalid polygon
 .  | | p|               .  | | h|  because the shell and the
 .  | +--+               .  | +--+  hole have a linear intersection
 .  |    .               .  |    |  thus producing a "side-location conflict"
 .  |    +               .  |    |  when attempts are made to build a
 . l|    |l              .  |    |  topology of them (ie: both sides
 .  |    +               .  |    |  of the edge are _external_).
 .  |    .               .  |    |
 .  +----+               .  +----+
 .       .               .       .
 . . . . .               . . . . .

In order to fix the above, the Builder should not receive the top hole
as a polygon, but as a line:

  +-------+             . . . . .         
  |rect   |             .       .  l: line
  |  +----:-----+       .  +----+  
  |  |    :     |       .  |    .         
  |  | +--+     |       .  | +--+        
  |  | |h |     |       .  | |l .        
  |  | +--+ s   |       .  | +--+        
  |  |    :     |       .  |    .        
  |  |    +--+  |       .  |    +        
  |  |    |h |  |       . l|    |l       
  |  |    +--+  |       .  |    +        
  |  |    :     |       .  |    .        
  |  +----:-----+       .  +----+        
  |       :             .       .        
  +-------+             . . . . .        

In order to do so, the RectangleIntersection class should be able
to distinguish hole boundaries falling on the rectangle boundary
in base or the side containing the interior hole. If the hole
interior is interior to the rectangle (top hole), then the boundary edge
needs to be omitted, if it's exterior (bottom hole), it must be included.

Still, in order to be able to construct the expected output, the
hole boundary which was "omitted" would need to be re-included as
part of the output collection, in order not to drop any point in
the intersection point-set. So maybe RectangleIntersectionBuilder
would also need another container to push things to...

--strk;

> What should remain is how to detect in the reconnect
> phase the special case of a linestring traveling only on the edges
> of the rectangle, and to handle it accordingly. I'm not sure,
> but wouldn't the boolean passed along with the linestring
> (hole or not) be enough to decide whether to just throw the
> linestring away or keep it in the reconnect phase? Possibly
> such a linestring could be even detected during the clipping
> phase by keeping track on whether all the vertices so far have
> been on the edges without true intersections, and then the
> linestring would not be inserted into the builder at all if it is
> not of the correct type (hole/exterior).
> 
> Mika Heiskanen / FMI

From mika.heiskanen at fmi.fi  Fri Sep 12 02:32:32 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 12:32:32 +0300
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <20140912082843.GB5342@localhost>
References: <540F1AA4.5030104@fmi.fi>
	<20140909152710.GB32173@localhost>	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>	<20140911135221.GA5735@localhost>
	<20140911135832.GB5735@localhost>	<20140911151702.GA22865@localhost>	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>	<20140911155752.GB26196@localhost>
	<5411CE35.3060607@fmi.fi> <20140912082843.GB5342@localhost>
Message-ID: <5412BDB0.3030404@fmi.fi>

On 09/12/2014 11:28 AM, Sandro Santilli wrote:
> On Thu, Sep 11, 2014 at 07:30:45PM +0300, Mika Heiskanen wrote:
>> On 09/11/2014 06:57 PM, Sandro Santilli wrote:
>>> Did you take a look at the algorithm ?
>>> It sounds like by the end of operations the class is left with a bunch
>>> of lines to work with, not much to build a result w/out going back
>>> to look at which sides of those lines are internal or external of the
>>> originals.
>>
>> At the time of insertion into the builder it is known for all
>> linestrings whether they are part of a hole or the exterior of
>> a polygon. This information can be inserted into the builder
>> along with the linestring, and used in the rebuild phase.
>
> Not only whether the linestring was part of an hole or a shell, but
> in case it was part of the hole, we must also pass along which side
> of boundary segments had the area. Look here:
>
> Clipping rectangle       Expected result
> and input                ( a poligon + a line )
>
>   +-------+               . . . . .
>   |rect   |               .       .
>   |  +----:-----+         .  +----+
>   |  |    :     |         .  |    |
>   |  | +--+     |         .  | +--+
>   |  | |h |     |         .  | |  | <-- dangling line
>   |  | +--+ s   |         .  | +--+
>   |  |    :     |         .  |    |
>   |  |    +--+  |         .  |    |
>   |  |    |h |  |         .  |    | <-- dissolved
>   |  |    +--+  |         .  |    |
>   |  |    :     |         .  |    |
>   |  +----:-----+         .  +----+
>   |       :               .       .
>   +-------+               . . . . .

I do not think the extra information is necessary, since if the input
is a valid geometry, the hole is counter-clockwise. The direction of the 
shared partial edge should  dictate the position of the hole with 
respect to the rectangle. In the above example the upper edge is
counter-clockwise in the rectangle while the lower edge is clockwise.

Regards,

Mika Heiskanen / Finnish Meteorological Institute

From mika.heiskanen at fmi.fi  Fri Sep 12 02:36:30 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 12:36:30 +0300
Subject: [geos-devel] Area building (was: Geometry/Rectangle
 Intersection: line touching rectangle)
In-Reply-To: <20140912080703.GA5342@localhost>
References: <20140912080703.GA5342@localhost>
Message-ID: <5412BE9E.3000007@fmi.fi>

On 09/12/2014 11:07 AM, Sandro Santilli wrote:
> On Fri, Sep 12, 2014 at 06:57:43AM +0300, Mika Heiskanen wrote:
>> On 09/12/2014 03:23 AM, Martin Davis wrote:
>>>
>>> I agree that having a built-in way to extract only the outer polygons
>> >from a polygonized dataset would be useful.
>>
>> I was then informed of PostGIS BuildArea
>> function. The function does a final overlay operation, which I
>> thought we would not need. I then offered our a bit different
>> solution, but there was no interest then:
>>
>>    http://lists.osgeo.org/pipermail/geos-devel/2014-March/006831.html
>
> Personally I hadn't shown interest because the postgis algorithm was
> recently (greatly) improved, enough to be happy about it.
> Also, you hadn't shown performance comparison in that mail, so taking
> it in consideration would have required me to do so myself, that is
> port the code to PostGIS, test it against the existing testsuite,
> check performance. Too much work for unknown benefit.

True, I never tested the code for speed. The extra overlay was the
killer for us.

> The final overlay (self-union) was needed to allow building an area
> from a linework like this:
>
>   +---+---+
>   |   |   |
>   +---+---+
>
> It might indeed be useful to make the self-union optional for cases in
> which it is known in advance that the above case would never happen.

That could provide a great speedup for complex geometries.

Regards,

Mika Heiskanen / Finnish Meteorological Institute



From strk at keybit.net  Fri Sep 12 02:42:17 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 11:42:17 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <5412BDB0.3030404@fmi.fi>
References: <CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912082843.GB5342@localhost> <5412BDB0.3030404@fmi.fi>
Message-ID: <20140912094217.GC5342@localhost>

On Fri, Sep 12, 2014 at 12:32:32PM +0300, Mika Heiskanen wrote:
> On 09/12/2014 11:28 AM, Sandro Santilli wrote:
> >On Thu, Sep 11, 2014 at 07:30:45PM +0300, Mika Heiskanen wrote:
> >>On 09/11/2014 06:57 PM, Sandro Santilli wrote:
> >>>Did you take a look at the algorithm ?
> >>>It sounds like by the end of operations the class is left with a bunch
> >>>of lines to work with, not much to build a result w/out going back
> >>>to look at which sides of those lines are internal or external of the
> >>>originals.
> >>
> >>At the time of insertion into the builder it is known for all
> >>linestrings whether they are part of a hole or the exterior of
> >>a polygon. This information can be inserted into the builder
> >>along with the linestring, and used in the rebuild phase.
> >
> >Not only whether the linestring was part of an hole or a shell, but
> >in case it was part of the hole, we must also pass along which side
> >of boundary segments had the area. Look here:
> >
> >Clipping rectangle       Expected result
> >and input                ( a poligon + a line )
> >
> >  +-------+               . . . . .
> >  |rect   |               .       .
> >  |  +----:-----+         .  +----+
> >  |  |    :     |         .  |    |
> >  |  | +--+     |         .  | +--+
> >  |  | |h |     |         .  | |  | <-- dangling line
> >  |  | +--+ s   |         .  | +--+
> >  |  |    :     |         .  |    |
> >  |  |    +--+  |         .  |    |
> >  |  |    |h |  |         .  |    | <-- dissolved
> >  |  |    +--+  |         .  |    |
> >  |  |    :     |         .  |    |
> >  |  +----:-----+         .  +----+
> >  |       :               .       .
> >  +-------+               . . . . .
> 
> I do not think the extra information is necessary, since if the input
> is a valid geometry, the hole is counter-clockwise. The direction of
> the shared partial edge should  dictate the position of the hole
> with respect to the rectangle. In the above example the upper edge
> is
> counter-clockwise in the rectangle while the lower edge is clockwise.

Winding order of shells and holes do not count as per OGC validity.
Of course we could make RectangleIntersection ensure right-hand-rule
upfront...

--strk;

From strk at keybit.net  Fri Sep 12 02:45:32 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 11:45:32 +0200
Subject: [geos-devel] Area building (was: Geometry/Rectangle
 Intersection: line touching rectangle)
In-Reply-To: <5412BE9E.3000007@fmi.fi>
References: <20140912080703.GA5342@localhost>
 <5412BE9E.3000007@fmi.fi>
Message-ID: <20140912094532.GD5342@localhost>

On Fri, Sep 12, 2014 at 12:36:30PM +0300, Mika Heiskanen wrote:
> On 09/12/2014 11:07 AM, Sandro Santilli wrote:

> >The final overlay (self-union) was needed to allow building an area
> >from a linework like this:
> >
> >  +---+---+
> >  |   |   |
> >  +---+---+
> >
> >It might indeed be useful to make the self-union optional for cases in
> >which it is known in advance that the above case would never happen.
> 
> That could provide a great speedup for complex geometries.

PostGIS topology would also not need the final overlay.
Changing this would require adding a new function signature to liblwgeom
(keeping old to retain backward compatibility) while at the SQL level
there could be just an override. Patch welcome ! :)

--strk;

From mika.heiskanen at fmi.fi  Fri Sep 12 02:47:26 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 12:47:26 +0300
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <20140912094217.GC5342@localhost>
References: <CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>	<20140911135221.GA5735@localhost>
	<20140911135832.GB5735@localhost>	<20140911151702.GA22865@localhost>	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>	<20140911155752.GB26196@localhost>
	<5411CE35.3060607@fmi.fi>	<20140912082843.GB5342@localhost>
	<5412BDB0.3030404@fmi.fi> <20140912094217.GC5342@localhost>
Message-ID: <5412C12E.6020104@fmi.fi>

On 09/12/2014 12:42 PM, Sandro Santilli wrote:
> Winding order of shells and holes do not count as per OGC validity.
> Of course we could make RectangleIntersection ensure right-hand-rule
> upfront...

The algorithm requires the winding orders to be correct with the 
right-hand-rule, otherwise it will reconnect the linestrings incorrectly.

Regards,

Mika Heiskanen / Finnish Meteorological Institute


From strk at keybit.net  Fri Sep 12 03:03:32 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 12:03:32 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <5412C12E.6020104@fmi.fi>
References: <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912082843.GB5342@localhost> <5412BDB0.3030404@fmi.fi>
	<20140912094217.GC5342@localhost> <5412C12E.6020104@fmi.fi>
Message-ID: <20140912100318.GE5342@localhost>

On Fri, Sep 12, 2014 at 12:47:26PM +0300, Mika Heiskanen wrote:
> On 09/12/2014 12:42 PM, Sandro Santilli wrote:
> >Winding order of shells and holes do not count as per OGC validity.
> >Of course we could make RectangleIntersection ensure right-hand-rule
> >upfront...
> 
> The algorithm requires the winding orders to be correct with the
> right-hand-rule, otherwise it will reconnect the linestrings
> incorrectly.

Ah, this is an important information to document in the class,
it means we need to do this externally to ever use as replacement
for overlay based intersection. I've pushed that addition to class
doc.

BTW, is this statement correct in the docs ?

 [...] the second clips the boundaries of polygons,
 not the polygons themselves. 
 In the latter case polygons will be converted to polylines
 if any vertex is outside the clipping rectangle,
  ^^^^^^^^^^^^^^^^^^^^
 or will be cut out completely.

Does it mean fully-contained polygons would be omitted from output ?
Test 48 suggests the contrary (the polygon is found fully in output).

--strk;

From mika.heiskanen at fmi.fi  Fri Sep 12 03:08:24 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 13:08:24 +0300
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <20140912100318.GE5342@localhost>
References: <20140911135832.GB5735@localhost>	<20140911151702.GA22865@localhost>	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>	<20140911155752.GB26196@localhost>
	<5411CE35.3060607@fmi.fi>	<20140912082843.GB5342@localhost>
	<5412BDB0.3030404@fmi.fi>	<20140912094217.GC5342@localhost>
	<5412C12E.6020104@fmi.fi> <20140912100318.GE5342@localhost>
Message-ID: <5412C618.70104@fmi.fi>

On 09/12/2014 01:03 PM, Sandro Santilli wrote:
> BTW, is this statement correct in the docs ?
>
>   [...] the second clips the boundaries of polygons,
>   not the polygons themselves.
>   In the latter case polygons will be converted to polylines
>   if any vertex is outside the clipping rectangle,
>    ^^^^^^^^^^^^^^^^^^^^
>   or will be cut out completely.
>
> Does it mean fully-contained polygons would be omitted from output ?
> Test 48 suggests the contrary (the polygon is found fully in output).

No, my wording is poor. What I tried to say was that if any vertex is 
outside, the result will always be either a polyline or nothing.
A polygon will result only if all vertices are in.

Regards,

Mika Heiskanen / Finnish Meteorological Institute


From strk at keybit.net  Fri Sep 12 03:19:25 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 12:19:25 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <5412C618.70104@fmi.fi>
References: <CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912082843.GB5342@localhost> <5412BDB0.3030404@fmi.fi>
	<20140912094217.GC5342@localhost> <5412C12E.6020104@fmi.fi>
	<20140912100318.GE5342@localhost> <5412C618.70104@fmi.fi>
Message-ID: <20140912101925.GG5342@localhost>

On Fri, Sep 12, 2014 at 01:08:24PM +0300, Mika Heiskanen wrote:
> On 09/12/2014 01:03 PM, Sandro Santilli wrote:
> >BTW, is this statement correct in the docs ?
> >
> >  [...] the second clips the boundaries of polygons,
> >  not the polygons themselves.
> >  In the latter case polygons will be converted to polylines
> >  if any vertex is outside the clipping rectangle,
> >   ^^^^^^^^^^^^^^^^^^^^
> >  or will be cut out completely.
> >
> >Does it mean fully-contained polygons would be omitted from output ?
> >Test 48 suggests the contrary (the polygon is found fully in output).
> 
> No, my wording is poor. What I tried to say was that if any vertex
> is outside, the result will always be either a polyline or nothing.
> A polygon will result only if all vertices are in.

I've changed as:

 In the latter case polygons
 will be converted to polylines only if not fully inside or fully outside
 of the rectangle.

Does it sound correct ?

--strk;

From mika.heiskanen at fmi.fi  Fri Sep 12 03:24:42 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 13:24:42 +0300
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <20140912101925.GG5342@localhost>
References: <CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>	<20140911155752.GB26196@localhost>
	<5411CE35.3060607@fmi.fi>	<20140912082843.GB5342@localhost>
	<5412BDB0.3030404@fmi.fi>	<20140912094217.GC5342@localhost>
	<5412C12E.6020104@fmi.fi>	<20140912100318.GE5342@localhost>
	<5412C618.70104@fmi.fi> <20140912101925.GG5342@localhost>
Message-ID: <5412C9EA.1010207@fmi.fi>

On 09/12/2014 01:19 PM, Sandro Santilli wrote:
> On Fri, Sep 12, 2014 at 01:08:24PM +0300, Mika Heiskanen wrote:
>> On 09/12/2014 01:03 PM, Sandro Santilli wrote:
>>> BTW, is this statement correct in the docs ?
>>>
>>>   [...] the second clips the boundaries of polygons,
>>>   not the polygons themselves.
>>>   In the latter case polygons will be converted to polylines
>>>   if any vertex is outside the clipping rectangle,
>>>    ^^^^^^^^^^^^^^^^^^^^
>>>   or will be cut out completely.
>>>
>>> Does it mean fully-contained polygons would be omitted from output ?
>>> Test 48 suggests the contrary (the polygon is found fully in output).
>>
>> No, my wording is poor. What I tried to say was that if any vertex
>> is outside, the result will always be either a polyline or nothing.
>> A polygon will result only if all vertices are in.
>
> I've changed as:
>
>   In the latter case polygons
>   will be converted to polylines only if not fully inside or fully outside
>   of the rectangle.
>
> Does it sound correct ?

Yes. Another way of saying it would be to emphasize that the resulting 
geometry consists only of edges or their parts in the original geometry,
parts of the rectangle not in the original geometry will not be used
to close polygons. as is the case in the other method call.

Regards,

Mika Heiskanen / Finnish Meteorological Institute


From strk at keybit.net  Fri Sep 12 09:31:57 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 12 Sep 2014 18:31:57 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <5411CE35.3060607@fmi.fi>
References: <540F1AA4.5030104@fmi.fi> <20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
Message-ID: <20140912163157.GE14271@localhost>

I've made some progress, if not else by adding a couple more tests
and having them all pass the "point-set equality test" with the
expected result.

But distinguishing between which boundary lines will need to be
added to the result and which not is still not done explicitly.

I'll continue looking on monday and I hope you'll be able then
to help more with making this ready for merging into trunk.

If you want to squash some more cases there's an #if 0 to turn on in
tests/unit/operation/intersection/RectangleIntersectionTest.cpp
Seek for WARNING labels.

The disabled block checks if the actual result is a GEOMETRYCOLLECTION
and if so, it requires the expected result to also be such (in addition
to point-set equality). Enabling that define shows all exiting tests
for which the current RectangleIntersection code (as modified by me
in these days) ends up adding more components to the output than 
required (lines and points for polygon inputs).

Again, I won't touch that code till monday so feel like touching it
over the weekend don't be afraid of conflicts :)

--strk;

On Thu, Sep 11, 2014 at 07:30:45PM +0300, Mika Heiskanen wrote:
> On 09/11/2014 06:57 PM, Sandro Santilli wrote:
> >Did you take a look at the algorithm ?
> >It sounds like by the end of operations the class is left with a bunch
> >of lines to work with, not much to build a result w/out going back
> >to look at which sides of those lines are internal or external of the
> >originals.
> 
> At the time of insertion into the builder it is known for all
> linestrings whether they are part of a hole or the exterior of
> a polygon. This information can be inserted into the builder
> along with the linestring, and used in the rebuild phase. Currently
> the logic dictates that any clipped hole must necessarily become
> a part of the exterior of a polygon, and the linestrings are
> connected accordingly by traveling the rectangle clockwise to
> find the next linestring to connect to. Even though the orientation
> of the holes was counter-clockwise, connecting to the linestring in
> the original order is correct for building the exterior.
> 
> What should remain is how to detect in the reconnect
> phase the special case of a linestring traveling only on the edges
> of the rectangle, and to handle it accordingly. I'm not sure,
> but wouldn't the boolean passed along with the linestring
> (hole or not) be enough to decide whether to just throw the
> linestring away or keep it in the reconnect phase? Possibly
> such a linestring could be even detected during the clipping
> phase by keeping track on whether all the vertices so far have
> been on the edges without true intersections, and then the
> linestring would not be inserted into the builder at all if it is
> not of the correct type (hole/exterior).
> 
> Mika Heiskanen / FMI
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From mika.heiskanen at fmi.fi  Fri Sep 12 10:04:10 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Fri, 12 Sep 2014 20:04:10 +0300
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <20140912163157.GE14271@localhost>
References: <540F1AA4.5030104@fmi.fi> <20140909152710.GB32173@localhost>
	<CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost>
Message-ID: <5413278A.4080700@fmi.fi>

On 09/12/2014 07:31 PM, Sandro Santilli wrote:
> But distinguishing between which boundary lines will need to be
> added to the result and which not is still not done explicitly.

I believe I can help with that. First I'll have to check your changes
to the algorithm to catch up.

Regards,

Mika Heiskanen / Finnish Meteorological Institute






From geos-trac at osgeo.org  Mon Sep 15 05:43:06 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 15 Sep 2014 12:43:06 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.899af2f16fa90bd37f759d250c6c9c81@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 As of commit bd3ca56e6ecc27586f83fd7f2a0abb91e7351c49 bounday
 intersections are only included in the result as collection element IFF
 they were part of internal holes (otherwise the boundary would just be
 included as boundary of the exterior ring. Back to test time.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Mon Sep 15 06:16:16 2014
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 15 Sep 2014 15:16:16 +0200
Subject: [geos-devel] Fwd: Geometry/Rectangle Intersection: line
 touching rectangle
In-Reply-To: <5413278A.4080700@fmi.fi>
References: <CAK2ens3_RypcaMGaU16K61W_Zc-03SNgFW05=C9DKqXgan2oPg@mail.gmail.com>
	<20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
Message-ID: <20140915131616.GB4391@localhost>

On Fri, Sep 12, 2014 at 08:04:10PM +0300, Mika Heiskanen wrote:
> On 09/12/2014 07:31 PM, Sandro Santilli wrote:
> >But distinguishing between which boundary lines will need to be
> >added to the result and which not is still not done explicitly.
> 
> I believe I can help with that. First I'll have to check your changes
> to the algorithm to catch up.

I ended up completing this part myself. During subsequent tests
I found a case included in your set which was failing. On a closer
look the hole was not obeying to the right-hand-rule, so as you said
it would be expected:

  // Surround the rectangle, hole outside rectangle but shares edge
  {
    "POLYGON ((-15 -15,-15 15,15 15,15 -15,-15 -15),(0 5,-1 5,-1 6,0 6,0 5))",
    "POLYGON ((0 0,0 10,10 10,10 0,0 0))"
  }

With the new code the shared edge is considered as needed in the output
as it goes upside-down (thus counter-clockwise on the rect edge).

I wonder if the RectangleIntersection class should check winding order
and reverse rings if needed...

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Mon Sep 15 07:12:04 2014
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 15 Sep 2014 16:12:04 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
	rectangle
In-Reply-To: <20140915131616.GB4391@localhost>
References: <20140911135221.GA5735@localhost> <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost>
Message-ID: <20140915141204.GD4391@localhost>

On Mon, Sep 15, 2014 at 03:16:16PM +0200, Sandro Santilli wrote:

> I wonder if the RectangleIntersection class should check winding order
> and reverse rings if needed...

I've added a check for winding order in the rectangle clipping code.
This adds one more full vertices scan for each hole. It doesn't look
like code winding order would affect the algorithm, am I right ?

See commit 4ae01eb0711baac11c102a847b90952619379b0d

--strk; 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Mon Sep 15 07:53:43 2014
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 15 Sep 2014 16:53:43 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
	rectangle
In-Reply-To: <20140915141204.GD4391@localhost>
References: <20140911135832.GB5735@localhost>
	<20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
Message-ID: <20140915145343.GF4391@localhost>

On Mon, Sep 15, 2014 at 04:12:04PM +0200, Sandro Santilli wrote:
> On Mon, Sep 15, 2014 at 03:16:16PM +0200, Sandro Santilli wrote:
> 
> > I wonder if the RectangleIntersection class should check winding order
> > and reverse rings if needed...
> 
> I've added a check for winding order in the rectangle clipping code.
> This adds one more full vertices scan for each hole. It doesn't look
> like code winding order would affect the algorithm, am I right ?
> 
> See commit 4ae01eb0711baac11c102a847b90952619379b0d

I was wrong, it was easy to find a case of failure with counterclockwise
shell. I'll add shell winding checking too. It'll add yet another full
vertex scan for the exterior ring, further degrading performances ...

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Mon Sep 15 07:58:44 2014
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 15 Sep 2014 16:58:44 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
In-Reply-To: <20140915145343.GF4391@localhost>
References: <20140911151702.GA22865@localhost>
	<CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
	<20140915145343.GF4391@localhost>
Message-ID: <20140915145844.GG4391@localhost>

On Mon, Sep 15, 2014 at 04:53:43PM +0200, Sandro Santilli wrote:
> On Mon, Sep 15, 2014 at 04:12:04PM +0200, Sandro Santilli wrote:
> > On Mon, Sep 15, 2014 at 03:16:16PM +0200, Sandro Santilli wrote:
> > 
> > > I wonder if the RectangleIntersection class should check winding order
> > > and reverse rings if needed...
> > 
> > I've added a check for winding order in the rectangle clipping code.
> > This adds one more full vertices scan for each hole. It doesn't look
> > like code winding order would affect the algorithm, am I right ?
> > 
> > See commit 4ae01eb0711baac11c102a847b90952619379b0d
> 
> I was wrong, it was easy to find a case of failure with counterclockwise
> shell. I'll add shell winding checking too. It'll add yet another full
> vertex scan for the exterior ring, further degrading performances ...

Mika, do you think RectangleIntersectionBuilder::reconnectPolygons could
accept an additional argument saying if the shell was CW or CCW ?
That way we could skip the additional full scan of the shell whenever
it is fully contained in the rectangle OR it fully contains it...

--strk;

From strk at keybit.net  Mon Sep 15 08:35:52 2014
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 15 Sep 2014 17:35:52 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
In-Reply-To: <20140915145844.GG4391@localhost>
References: <CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
	<20140915145343.GF4391@localhost> <20140915145844.GG4391@localhost>
Message-ID: <20140915153552.GH4391@localhost>

On Mon, Sep 15, 2014 at 04:58:44PM +0200, Sandro Santilli wrote:
> On Mon, Sep 15, 2014 at 04:53:43PM +0200, Sandro Santilli wrote:
> > On Mon, Sep 15, 2014 at 04:12:04PM +0200, Sandro Santilli wrote:
> > > On Mon, Sep 15, 2014 at 03:16:16PM +0200, Sandro Santilli wrote:
> > > 
> > > > I wonder if the RectangleIntersection class should check winding order
> > > > and reverse rings if needed...
> > > 
> > > I've added a check for winding order in the rectangle clipping code.
> > > This adds one more full vertices scan for each hole. It doesn't look
> > > like code winding order would affect the algorithm, am I right ?
> > > 
> > > See commit 4ae01eb0711baac11c102a847b90952619379b0d
> > 
> > I was wrong, it was easy to find a case of failure with counterclockwise
> > shell. I'll add shell winding checking too. It'll add yet another full
> > vertex scan for the exterior ring, further degrading performances ...
> 
> Mika, do you think RectangleIntersectionBuilder::reconnectPolygons could
> accept an additional argument saying if the shell was CW or CCW ?
> That way we could skip the additional full scan of the shell whenever
> it is fully contained in the rectangle OR it fully contains it...

FYI: I've added such parameter to reconnectPolygons, if the shell is
clockwise, lines will be reversed. Seems to work fine.

 See commit 94238a220de2f64f8f4753652a7659107f77ea51

Test time again !

--strk; 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Mon Sep 15 09:32:23 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 15 Sep 2014 16:32:23 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.ec37d07445da9b018ba04fd43b14d8b2@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 As of commit 94238a220de2f64f8f4753652a7659107f77ea51 also the exterior
 ring is correctly handled no matter its winding order. Enabling rectangle
 optimized intersection transparently still gives some failures which has
 to be researched upon.

 With PostGIS a single test fails, the one for
 http://trac.osgeo.org/postgis/ticket/2423
 It seem to be related to including a point which is already covered.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:5>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mika.heiskanen at fmi.fi  Mon Sep 15 11:19:32 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Mon, 15 Sep 2014 21:19:32 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
In-Reply-To: <20140915153552.GH4391@localhost>
References: <CAK2ens32emC3UQOoJe3PvQtKkC8F8tOAv81ntXkY_+VJoCcwFA@mail.gmail.com>
	<CAK2ens2bCmFjJ04XubdrSc_C-JcPe1V7eAiZ5c=SoWM1-g0XbQ@mail.gmail.com>
	<20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
	<20140915145343.GF4391@localhost> <20140915145844.GG4391@localhost>
	<20140915153552.GH4391@localhost>
Message-ID: <54172DB4.2010809@fmi.fi>

On 09/15/2014 06:35 PM, Sandro Santilli wrote:
> On Mon, Sep 15, 2014 at 04:58:44PM +0200, Sandro Santilli wrote:
>> On Mon, Sep 15, 2014 at 04:53:43PM +0200, Sandro Santilli wrote:
>>> On Mon, Sep 15, 2014 at 04:12:04PM +0200, Sandro Santilli wrote:
>>>> On Mon, Sep 15, 2014 at 03:16:16PM +0200, Sandro Santilli wrote:
>>>>
>>>>> I wonder if the RectangleIntersection class should check winding order
>>>>> and reverse rings if needed...
>>>>
>>>> I've added a check for winding order in the rectangle clipping code.
>>>> This adds one more full vertices scan for each hole. It doesn't look
>>>> like code winding order would affect the algorithm, am I right ?
>>>>
>>>> See commit 4ae01eb0711baac11c102a847b90952619379b0d
>>>
>>> I was wrong, it was easy to find a case of failure with counterclockwise
>>> shell. I'll add shell winding checking too. It'll add yet another full
>>> vertex scan for the exterior ring, further degrading performances ...
>>
>> Mika, do you think RectangleIntersectionBuilder::reconnectPolygons could
>> accept an additional argument saying if the shell was CW or CCW ?
>> That way we could skip the additional full scan of the shell whenever
>> it is fully contained in the rectangle OR it fully contains it...
>
> FYI: I've added such parameter to reconnectPolygons, if the shell is
> clockwise, lines will be reversed. Seems to work fine.

Sorry, I couldn't keep up with you today.

The winding rule requirement was given in one of the algorithms I
researched for implementing the rectangle clipper. If the shells
are clockwise and the holes counter-clockwise, finding the next
linestring by looking clockwise around the rectangle and checking
the first vertex only will find the correct linestring to connect to
and the linestring will be in the correct order. The extra boolean
would indicate whether we need to compare the first or last vertex
of the linestring when deciding which linestring to connect next.
Sounds like you may have solved it already that way.

Regards,

Mika Heiskanen / Finnish Meteorological Institute


From strk at keybit.net  Tue Sep 16 00:44:39 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 16 Sep 2014 09:44:39 +0200
Subject: [geos-devel] Polygon winding according to OGC
In-Reply-To: <54174A63.2020908@fmi.fi>
References: <20140909104823.GC5496@localhost> <540EEBEC.3040403@fmi.fi>
	<20140909130625.GE5496@localhost> <541349C1.2020908@fmi.fi>
	<20140915064043.GA4342@localhost> <5416AAB1.7050405@fmi.fi>
	<20140915090424.GA4391@localhost> <541744E2.9050202@fmi.fi>
	<54174A63.2020908@fmi.fi>
Message-ID: <20140916074439.GA4784@localhost>

On Mon, Sep 15, 2014 at 11:21:55PM +0300, Mika Heiskanen wrote:
> Hello Sandro,
> 
> I just checked this page:
> 
>   http://en.wikipedia.org/wiki/Well-known_text
> 
> Quote:
> 
>   It's useful to note that the OGC standard definition requires a
>   polygon to be topologically closed. It also states that if the
>   exterior linear ring of a polygon is defined in a counter clockwise
>   direction it will be seen from the "top". Any interior linear rings
>   should be defined in opposite fashion compared to the exterior ring,
>   in this case, clockwise.[1]
> 
> Strange. I did not know the winding rule could be left so arbitrary.
> However, if the statement is true, should not GEOS also enforce a
> winding rule?

Reading the actual document (06-103r4):
http://portal.opengeospatial.org/files/?artifact_id=25355

While there's a mention of this "opposite direction" for shell and holes
there's no trace of that requirement in the list of assertions that define
polygons as "valid".

That said, there's a "normalize" function in GEOS that ensures exterior
ring is clockwise and holes are counterclockwise (thus, according to the OGC
document, making the polygon be viewed from the "bottom").

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Tue Sep 16 00:54:21 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 16 Sep 2014 09:54:21 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
In-Reply-To: <54172DB4.2010809@fmi.fi>
References: <20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
	<20140915145343.GF4391@localhost> <20140915145844.GG4391@localhost>
	<20140915153552.GH4391@localhost> <54172DB4.2010809@fmi.fi>
Message-ID: <20140916075421.GC4784@localhost>

On Mon, Sep 15, 2014 at 09:19:32PM +0300, Mika Heiskanen wrote:
> On 09/15/2014 06:35 PM, Sandro Santilli wrote:

> >FYI: I've added such parameter to reconnectPolygons, if the shell is
> >clockwise, lines will be reversed. Seems to work fine.
> 
> Sorry, I couldn't keep up with you today.
> 
> The winding rule requirement was given in one of the algorithms I
> researched for implementing the rectangle clipper. If the shells
> are clockwise and the holes counter-clockwise, finding the next
> linestring by looking clockwise around the rectangle and checking
> the first vertex only will find the correct linestring to connect to
> and the linestring will be in the correct order. The extra boolean
> would indicate whether we need to compare the first or last vertex
> of the linestring when deciding which linestring to connect next.
> Sounds like you may have solved it already that way.

Uhm, given this description I might have not, as I'm only swapping
the order of line components and their vertices IFF the outer shell
is counterclockwise. If both the outer and the holes are clockwise 
there would be no reversing. Instead I understand there would need
to be a per-ring reordering of lines depending on the winding.

Will try today to add a test for such case. Thanks for the info.

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From mika.heiskanen at fmi.fi  Tue Sep 16 02:32:16 2014
From: mika.heiskanen at fmi.fi (Mika Heiskanen)
Date: Tue, 16 Sep 2014 12:32:16 +0300
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
In-Reply-To: <20140916075421.GC4784@localhost>
References: <20140911155752.GB26196@localhost> <5411CE35.3060607@fmi.fi>
	<20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
	<20140915145343.GF4391@localhost> <20140915145844.GG4391@localhost>
	<20140915153552.GH4391@localhost> <54172DB4.2010809@fmi.fi>
	<20140916075421.GC4784@localhost>
Message-ID: <541803A0.1070604@fmi.fi>

On 09/16/2014 10:54 AM, Sandro Santilli wrote:
>> The winding rule requirement was given in one of the algorithms I
>> researched for implementing the rectangle clipper. If the shells
>> are clockwise and the holes counter-clockwise, finding the next
>> linestring by looking clockwise around the rectangle and checking
>> the first vertex only will find the correct linestring to connect to
>> and the linestring will be in the correct order. The extra boolean
>> would indicate whether we need to compare the first or last vertex
>> of the linestring when deciding which linestring to connect next.
>> Sounds like you may have solved it already that way.
>
> Uhm, given this description I might have not, as I'm only swapping
> the order of line components and their vertices IFF the outer shell
> is counterclockwise. If both the outer and the holes are clockwise
> there would be no reversing. Instead I understand there would need
> to be a per-ring reordering of lines depending on the winding.

I guess in the simplest terms the idea is that if you traverse the outer 
shell clockwise, then you will also have to reconnect the
linestrings by going clockwise around the rectangle. Holes you
traverse counter-clockwise, but reconnect them by going clockwise
as before. So, if no winding rule is enforced, and we process the
rings in the actual order of the vertices, then in the reconnecting
phase

    CW shell  connects from the start point
    CCW shell connects from the end point
    CCW hole  connects from the start point
    CW hole   connects from the end point

and all connecting would be done by going clockwise around the rectangle 
looking for the next vertex. The next vertex may be
the start point of the ring that is being built.

An alternative algorithm is described in

   http://dna.fernuni-hagen.de/papers/GeoInfo-2007.pdf

but it does not seem to be any simpler.

Regards,

Mika Heiskanen / Finnish Meteorological Institute


From strk at keybit.net  Tue Sep 16 02:57:32 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 16 Sep 2014 11:57:32 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: winding order
In-Reply-To: <541803A0.1070604@fmi.fi>
References: <20140912163157.GE14271@localhost> <5413278A.4080700@fmi.fi>
	<20140915131616.GB4391@localhost> <20140915141204.GD4391@localhost>
	<20140915145343.GF4391@localhost> <20140915145844.GG4391@localhost>
	<20140915153552.GH4391@localhost> <54172DB4.2010809@fmi.fi>
	<20140916075421.GC4784@localhost> <541803A0.1070604@fmi.fi>
Message-ID: <20140916095732.GE4784@localhost>

On Tue, Sep 16, 2014 at 12:32:16PM +0300, Mika Heiskanen wrote:

> So, if no winding rule is enforced, and we process the
> rings in the actual order of the vertices, then in the reconnecting
> phase
> 
>    CW shell  connects from the start point
>    CCW shell connects from the end point
>    CCW hole  connects from the start point
>    CW hole   connects from the end point
> 
> and all connecting would be done by going clockwise around the
> rectangle looking for the next vertex. The next vertex may be
> the start point of the ring that is being built.

I pushed code to check winding for ring that had any intersection
with the rectangle and reverse the clipping lines if the ring was
not in the expected order (CW for shells, CCW for holes).
Fully outside or inside rings are not checked again.

No failing test in the RectangleIntersectionTest so far.
I'm back to analyze the failures I get when enabling transparent use
of RectangleIntersection from Geometry::intersection.

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Tue Sep 16 03:35:16 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 16 Sep 2014 12:35:16 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: duplicated points
	removal
Message-ID: <20140916103516.GG4784@localhost>

So right now the only failing test in geos_unit, when enabling the
rectangle-optimized intersection code, is VoronoiDiagramBuilder not
matching the expected result.

The difference is with Rectangle-based intersection NOT removing
duplicated points from the input, whereas it looks like
QuadEdgeSubdivision::getVoronoiDiagram returns polygons with such
duplicated vertices.

The test checks for exact WKT and thus fail, finding the duplicated
point. 

All overlay-based operations supposedly return lines with no duplicated
vertices, although short-circuits could return the input untouched and
thus let them in. I'm not sure if we should ensure outputs are normalized
or not to this extent.

What do you think, Martin ? See also the other discussion about normalize
and duplicated vertices here:
http://sourceforge.net/p/jts-topo-suite/mailman/message/32833678/

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Tue Sep 16 03:55:19 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 16 Sep 2014 12:55:19 +0200
Subject: [geos-devel] Geometry/Rectangle Intersection: duplicated points
	removal
In-Reply-To: <20140916103516.GG4784@localhost>
References: <20140916103516.GG4784@localhost>
Message-ID: <20140916105519.GH4784@localhost>

FYI: in the case I'm looking at the clipping rectangle fully contains
the other geometry, so basically the contained geometry is returned
untouched, togheter with its duplicated points... 

--strk;


On Tue, Sep 16, 2014 at 12:35:16PM +0200, Sandro Santilli wrote:
> So right now the only failing test in geos_unit, when enabling the
> rectangle-optimized intersection code, is VoronoiDiagramBuilder not
> matching the expected result.
> 
> The difference is with Rectangle-based intersection NOT removing
> duplicated points from the input, whereas it looks like
> QuadEdgeSubdivision::getVoronoiDiagram returns polygons with such
> duplicated vertices.
> 
> The test checks for exact WKT and thus fail, finding the duplicated
> point. 
> 
> All overlay-based operations supposedly return lines with no duplicated
> vertices, although short-circuits could return the input untouched and
> thus let them in. I'm not sure if we should ensure outputs are normalized
> or not to this extent.
> 
> What do you think, Martin ? See also the other discussion about normalize
> and duplicated vertices here:
> http://sourceforge.net/p/jts-topo-suite/mailman/message/32833678/
> 
> --strk;
> 
>  ()  ASCII ribbon campaign  --  Keep it simple !
>  /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Tue Sep 16 06:16:11 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 16 Sep 2014 13:16:11 -0000
Subject: [geos-devel] [GEOS] #705:
 QuadEdgeSubdivision::getVoronoiCellPolygon produces polygons with
 duplicated points
Message-ID: <044.1e5a2afbed6bdde815e78d3dc0d87629@osgeo.org>

#705: QuadEdgeSubdivision::getVoronoiCellPolygon produces polygons with
duplicated points
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 Spotted while testing the rectangle-based intersection optimization
 (#699) there are cases in which QuadEdgeSubdivision::getVoronoiCellPolygon
 return a polygon with duplicated points.

 Looking at JTS code it seems that the port failed to add the duplicated
 points removal call. It would need a testcase to secure the fix.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/705>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep 16 08:04:17 2014
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 16 Sep 2014 15:04:17 -0000
Subject: [geos-devel] [GEOS] #705:
 QuadEdgeSubdivision::getVoronoiCellPolygon produces polygons with
 duplicated points
In-Reply-To: <044.1e5a2afbed6bdde815e78d3dc0d87629@osgeo.org>
References: <044.1e5a2afbed6bdde815e78d3dc0d87629@osgeo.org>
Message-ID: <053.a6964d77b8333ed8874d6ff5cd39b70c@osgeo.org>

#705: QuadEdgeSubdivision::getVoronoiCellPolygon produces polygons with
duplicated points
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.5.0                     
Component:  Default     |      Version:  svn-trunk                 
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * version:  3.4.2 => svn-trunk
  * resolution:  => fixed
  * milestone:  3.4.3 => 3.5.0


Comment:

 Fixed in trunk with r4007
 3.4 did not have Voronoi so nothing to do there.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/705#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 01:49:40 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 08:49:40 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.acb9dc8ad13f804888deb1b1acfbf49b@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 The inclusion of the spurious point was fixed with commit
 416a6689a2e2fcd941cb57385588719934dc30ed

 Thinking about it, I guess there are still many failure cases for
 linestrings, which are allowed to get on the same vertex multiple times
 (non-simple lines). In that case the builder should remove duplicate
 points and then avoid to add as points those that are already covered by
 lines. I guess it'd take another container for "boundary points".

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:6>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 02:15:44 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 09:15:44 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.cc966446057c854c9b4af4b0b3cf6b34@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 Next issue: robustness.

 Existing test in TestFuncionAAPrec:
         Description: AA - sliver triangle, cut by polygon
         Geometry A: POLYGON ((10 10, 100 10, 10 11, 10 10))
         Geometry B: POLYGON ((90 0, 200 0, 200 200, 90 200, 90 0))
         Expected result: LINESTRING (90 10, 100 10)
         Obtained result: POLYGON ((90 10, 90 10, 100 10, 90 10))

 In this case RectangleIntersection class returns an invalid polygon
 (collapsed to a line)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:7>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 03:08:00 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 10:08:00 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.15eaa216399fa678d6cb000f79a75a65@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 I start to think that RectangleIntersection goals (speed) may not be
 compatible with Geometry::intersection goals (correctness, robustness),
 enough that it might really be better for it to only be available as a
 separate interface... I'm thinking about Z interpolation, support for
 invalid input and tolerance to invalid output

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:8>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 03:09:40 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 10:09:40 -0000
Subject: [geos-devel] [GEOS] #702: OverlayOp takes mover 20 minutes when
 a polygon with over a million holes is involved
In-Reply-To: <044.b8780021a24f7f7d63bddc6aed91f34f@osgeo.org>
References: <044.b8780021a24f7f7d63bddc6aed91f34f@osgeo.org>
Message-ID: <053.e866fd70d9598fce358a440dba6498c5@osgeo.org>

#702: OverlayOp takes mover 20 minutes when a polygon with over a million holes
is involved
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 I was thinking that a generic speedup for "intersection" could be to
 restrict topology building to the extent resulting from the intersection
 of bounding boxes of the source geometries.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/702#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 08:06:38 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 15:06:38 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.f658683e579ea48ca2e40b4c6eb874b0@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 Other failures: CCW shell boundary partially overlapping the rectangle
 boundary is not included in the result, same with shell boundary touching
 the rectangle boundary in a single point.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:9>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 08:20:40 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 15:20:40 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.bdad98a2b1735d9e49049c84e42a1373@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 I'd notice that both documented failures (invalid polygon output from
 sliver polygon and lack of boundary line and point) would not be real
 failures if the behaviour is documented to be like that, and thus
 different from the one of Geometry->Intersection

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:10>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 17 08:41:21 2014
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 17 Sep 2014 15:41:21 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.17bfcfd346cfdb131774cf3a78cabfa0@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 A precision about the sliver polygon test: the expected result is only
 valid with a FIXED precision model. In FLOATING precision model there's no
 collapse. But this is another problem with the RectangleIntersection (it
 does not take PrecisionModel in consideration)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:11>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Thu Sep 18 10:10:54 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 18 Sep 2014 19:10:54 +0200
Subject: [geos-devel] Extent-limited graph building ?
Message-ID: <20140918171054.GD14152@localhost>

Martin,
in order to speed up intersection overlay operation, would it work to
limit the GeometryGraph building by a bounding box ?

The current interface of GeometryGraph does not allow it, but from the
point of view of the algorithm, do you think it could work ?
If could speed up both intersection and difference.

Basically OverlayOp and GeometryGraph would need to take an optional 
Envelope for limiting operations.

What do you think ?

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Thu Sep 18 22:42:45 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 07:42:45 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
Message-ID: <20140919054245.GA4283@localhost>

On Thu, Sep 18, 2014 at 10:41:46AM -0700, Martin Davis wrote:
> Funny, this recently occurred to me as well.
> 
> The first place I'd look for introducing BBOX limiting is in the noding
> phase.  The selfNode creation (in GeometryGraph) could just checking edges
> within the overlap bounding box.  (This would work for intersection, but
> technically not difference since then the output would not be fully noded,
> which breaks the current JTS contract).
> 
> The computeEdgeIntersections could probably be limited to a BBOX as well.
> 
> Are you seeing data situations where this approach would produce a
> significant win?

The case I'm looking at is a collection of 250000+ components.
Profiling, the most expensive operation is PointInRing checking,
which happens at adding the rings endpoints to the topology, I think.
REF: http://trac.osgeo.org/postgis/ticket/2933#comment:6

The rectangle-based intersection helps a lot in this case, probably
just because it skips components that do not intersect the rectangle.
A kind of "cascaded" intersection should also help there.

--strk;
 
> 
> On Thu, Sep 18, 2014 at 10:10 AM, Sandro Santilli <strk at keybit.net> wrote:
> 
> > Martin,
> > in order to speed up intersection overlay operation, would it work to
> > limit the GeometryGraph building by a bounding box ?
> >
> > The current interface of GeometryGraph does not allow it, but from the
> > point of view of the algorithm, do you think it could work ?
> > If could speed up both intersection and difference.
> >
> > Basically OverlayOp and GeometryGraph would need to take an optional
> > Envelope for limiting operations.
> >
> > What do you think ?
> >
> > --strk;
> >
> >  ()  ASCII ribbon campaign  --  Keep it simple !
> >  /\  http://strk.keybit.net/rants/ascii_mails.txt
> >

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From remi.cura at gmail.com  Fri Sep 19 03:56:20 2014
From: remi.cura at gmail.com (=?UTF-8?Q?R=C3=A9mi_Cura?=)
Date: Fri, 19 Sep 2014 12:56:20 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919054245.GA4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919054245.GA4283@localhost>
Message-ID: <CAJvUf_sQk+q46dLFVkpJgA+sKGN9iahh4ogCV1ES60S7nEpHjA@mail.gmail.com>

Hello Sandro,
out of curiosity (I know very little of Geos),
Isn't waht you are doing equivalent to using an acceleration structure,
and wouldn't be the job of the database.
(ie : why parse a 250k  myultipolygon, and not 250k simple polygon?).

Cheers,
R?mi-C
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20140919/c801fd2f/attachment.html>

From strk at keybit.net  Fri Sep 19 05:46:52 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 14:46:52 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <CAJvUf_sQk+q46dLFVkpJgA+sKGN9iahh4ogCV1ES60S7nEpHjA@mail.gmail.com>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919054245.GA4283@localhost>
	<CAJvUf_sQk+q46dLFVkpJgA+sKGN9iahh4ogCV1ES60S7nEpHjA@mail.gmail.com>
Message-ID: <20140919124652.GB4283@localhost>

On Fri, Sep 19, 2014 at 12:56:20PM +0200, R?mi Cura wrote:
> Hello Sandro,
> out of curiosity (I know very little of Geos),
> Isn't waht you are doing equivalent to using an acceleration structure,
> and wouldn't be the job of the database.
> (ie : why parse a 250k  myultipolygon, and not 250k simple polygon?).

Yes R?mi, it's much better to keep those polygons as 250k simple
polygons in terms of retrival and processing speed.

Another use case: a polygon with 250k holes intersected with another
with the same structure. Also in this case it would be better to split
the polygon into multiple smaller ones, but it's a bit harder to do,
and requires invoking the intersection again (for the split).

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From vincent.ml at oslandia.com  Fri Sep 19 06:05:51 2014
From: vincent.ml at oslandia.com (Vincent Picavet)
Date: Fri, 19 Sep 2014 15:05:51 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919124652.GB4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAJvUf_sQk+q46dLFVkpJgA+sKGN9iahh4ogCV1ES60S7nEpHjA@mail.gmail.com>
	<20140919124652.GB4283@localhost>
Message-ID: <201409191505.51259.vincent.ml@oslandia.com>

Hi there,

Le vendredi 19 septembre 2014 14:46:52, Sandro Santilli a ?crit :
> Another use case: a polygon with 250k holes intersected with another
> with the same structure. Also in this case it would be better to split
> the polygon into multiple smaller ones, but it's a bit harder to do,
> and requires invoking the intersection again (for the split).

As far as I know, this is the kind of use cases Korotkov & al are trying to 
get fast in PostgreSQL (and PostGIS) with their VODKA indexing concept, a kind 
of subindexing.

Some information here :
http://www.pgcon.org/2014/schedule/events/696.en.html


Vincent

From remi.cura at gmail.com  Fri Sep 19 06:23:05 2014
From: remi.cura at gmail.com (=?UTF-8?Q?R=C3=A9mi_Cura?=)
Date: Fri, 19 Sep 2014 15:23:05 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <201409191505.51259.vincent.ml@oslandia.com>
References: <20140918171054.GD14152@localhost>
	<CAJvUf_sQk+q46dLFVkpJgA+sKGN9iahh4ogCV1ES60S7nEpHjA@mail.gmail.com>
	<20140919124652.GB4283@localhost>
	<201409191505.51259.vincent.ml@oslandia.com>
Message-ID: <CAJvUf_sPm8GpvcjT_dn_qCHC+fYSKX6qUBkwc9v1TbU+NLHTWQ@mail.gmail.com>

Thanks for the information,
this is a very intersting subject in my opinion.

Cheers,
R?mi-C

2014-09-19 15:05 GMT+02:00 Vincent Picavet <vincent.ml at oslandia.com>:

> Hi there,
>
> Le vendredi 19 septembre 2014 14:46:52, Sandro Santilli a ?crit :
> > Another use case: a polygon with 250k holes intersected with another
> > with the same structure. Also in this case it would be better to split
> > the polygon into multiple smaller ones, but it's a bit harder to do,
> > and requires invoking the intersection again (for the split).
>
> As far as I know, this is the kind of use cases Korotkov & al are trying to
> get fast in PostgreSQL (and PostGIS) with their VODKA indexing concept, a
> kind
> of subindexing.
>
> Some information here :
> http://www.pgcon.org/2014/schedule/events/696.en.html
>
>
> Vincent
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20140919/0650af3d/attachment.html>

From strk at keybit.net  Fri Sep 19 06:34:37 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 15:34:37 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <201409191505.51259.vincent.ml@oslandia.com>
References: <20140918171054.GD14152@localhost>
	<CAJvUf_sQk+q46dLFVkpJgA+sKGN9iahh4ogCV1ES60S7nEpHjA@mail.gmail.com>
	<20140919124652.GB4283@localhost>
	<201409191505.51259.vincent.ml@oslandia.com>
Message-ID: <20140919133437.GC4283@localhost>

On Fri, Sep 19, 2014 at 03:05:51PM +0200, Vincent Picavet wrote:
> Le vendredi 19 septembre 2014 14:46:52, Sandro Santilli a ?crit :
> > Another use case: a polygon with 250k holes intersected with another
> > with the same structure. Also in this case it would be better to split
> > the polygon into multiple smaller ones, but it's a bit harder to do,
> > and requires invoking the intersection again (for the split).
> 
> As far as I know, this is the kind of use cases Korotkov & al are trying to 
> get fast in PostgreSQL (and PostGIS) with their VODKA indexing concept, a kind 
> of subindexing.
> 
> Some information here :
> http://www.pgcon.org/2014/schedule/events/696.en.html

Interesting pointer, thanks!
Anyway, this is outside the scope of GEOS, which would benefit from
restricting work to the one really needed for the result of intersection.

The real case at hand computes in 21 seconds with OverlayOp, while it
takes 0.7 seconds to compute by the RectangleIntersection class, which
scans off-sight holes just once to find they are outside of the area
of interest.

--strk;

From strk at keybit.net  Fri Sep 19 07:45:58 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 16:45:58 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
Message-ID: <20140919144558.GD4283@localhost>

On Thu, Sep 18, 2014 at 10:41:46AM -0700, Martin Davis wrote:
> Funny, this recently occurred to me as well.
> 
> The first place I'd look for introducing BBOX limiting is in the noding
> phase.  The selfNode creation (in GeometryGraph) could just checking edges
> within the overlap bounding box.  (This would work for intersection, but
> technically not difference since then the output would not be fully noded,
> which breaks the current JTS contract).
> 
> The computeEdgeIntersections could probably be limited to a BBOX as well.
> 
> Are you seeing data situations where this approach would produce a
> significant win?

So back to this, reducing the work of computeEdgeIntersections so to
only consider edges that intersect the target extent brings down the
time of the overlay operation I'm looking at from ~15 to ~9.5 seconds.
All existing testcases still succeed (also using the first geometry's
envelope for the DIFFERENCE op) so this sounds like a safe optimization.

Extending this to self-nodes computation (and copyPoint too?) should
speed things further up.

I pushed the GEOS code of this in the "ext-limited-graph" branch in
my github fork (if anyone wants to take a look).

For comparison, the RectangleIntersection based code completes the
operation in 40ms (!!). That's really hard to beat.

--strk;

> On Thu, Sep 18, 2014 at 10:10 AM, Sandro Santilli <strk at keybit.net> wrote:
> 
> > Martin,
> > in order to speed up intersection overlay operation, would it work to
> > limit the GeometryGraph building by a bounding box ?
> >
> > The current interface of GeometryGraph does not allow it, but from the
> > point of view of the algorithm, do you think it could work ?
> > If could speed up both intersection and difference.
> >
> > Basically OverlayOp and GeometryGraph would need to take an optional
> > Envelope for limiting operations.
> >
> > What do you think ?
> >
> > --strk;
> >
> >  ()  ASCII ribbon campaign  --  Keep it simple !
> >  /\  http://strk.keybit.net/rants/ascii_mails.txt
> >

From strk at keybit.net  Fri Sep 19 08:24:12 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 17:24:12 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919144558.GD4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost>
Message-ID: <20140919152412.GE4283@localhost>

On Fri, Sep 19, 2014 at 04:45:58PM +0200, Sandro Santilli wrote:
> On Thu, Sep 18, 2014 at 10:41:46AM -0700, Martin Davis wrote:
> > Funny, this recently occurred to me as well.
> > 
> > The first place I'd look for introducing BBOX limiting is in the noding
> > phase.  The selfNode creation (in GeometryGraph) could just checking edges
> > within the overlap bounding box.  (This would work for intersection, but
> > technically not difference since then the output would not be fully noded,
> > which breaks the current JTS contract).
> > 
> > The computeEdgeIntersections could probably be limited to a BBOX as well.
> > 
> > Are you seeing data situations where this approach would produce a
> > significant win?
> 
> So back to this, reducing the work of computeEdgeIntersections so to
> only consider edges that intersect the target extent brings down the
> time of the overlay operation I'm looking at from ~15 to ~9.5 seconds.
> All existing testcases still succeed (also using the first geometry's
> envelope for the DIFFERENCE op) so this sounds like a safe optimization.
> 
> Extending this to self-nodes computation (and copyPoint too?) should
> speed things further up.

It does, time is down to ~3 seconds now, despite edges selection happening
twice (once in computeEdgeIntersections and once in computeSelfNodes).
Time to add it to copyPoints, I guess. But then we'd better not to add
those elements in the graph from the start, to save even more time.

--strk;


> I pushed the GEOS code of this in the "ext-limited-graph" branch in
> my github fork (if anyone wants to take a look).
> 
> For comparison, the RectangleIntersection based code completes the
> operation in 40ms (!!). That's really hard to beat.
> 
> --strk;
> 
> > On Thu, Sep 18, 2014 at 10:10 AM, Sandro Santilli <strk at keybit.net> wrote:
> > 
> > > Martin,
> > > in order to speed up intersection overlay operation, would it work to
> > > limit the GeometryGraph building by a bounding box ?
> > >
> > > The current interface of GeometryGraph does not allow it, but from the
> > > point of view of the algorithm, do you think it could work ?
> > > If could speed up both intersection and difference.
> > >
> > > Basically OverlayOp and GeometryGraph would need to take an optional
> > > Envelope for limiting operations.
> > >
> > > What do you think ?
> > >
> > > --strk;
> > >
> > >  ()  ASCII ribbon campaign  --  Keep it simple !
> > >  /\  http://strk.keybit.net/rants/ascii_mails.txt
> > >

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Fri Sep 19 08:31:50 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 17:31:50 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919152412.GE4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
Message-ID: <20140919153150.GF4283@localhost>

On Fri, Sep 19, 2014 at 05:24:12PM +0200, Sandro Santilli wrote:
> On Fri, Sep 19, 2014 at 04:45:58PM +0200, Sandro Santilli wrote:
> > On Thu, Sep 18, 2014 at 10:41:46AM -0700, Martin Davis wrote:
> > > Funny, this recently occurred to me as well.
> > > 
> > > The first place I'd look for introducing BBOX limiting is in the noding
> > > phase.  The selfNode creation (in GeometryGraph) could just checking edges
> > > within the overlap bounding box.  (This would work for intersection, but
> > > technically not difference since then the output would not be fully noded,
> > > which breaks the current JTS contract).
> > > 
> > > The computeEdgeIntersections could probably be limited to a BBOX as well.
> > > 
> > > Are you seeing data situations where this approach would produce a
> > > significant win?
> > 
> > So back to this, reducing the work of computeEdgeIntersections so to
> > only consider edges that intersect the target extent brings down the
> > time of the overlay operation I'm looking at from ~15 to ~9.5 seconds.
> > All existing testcases still succeed (also using the first geometry's
> > envelope for the DIFFERENCE op) so this sounds like a safe optimization.
> > 
> > Extending this to self-nodes computation (and copyPoint too?) should
> > speed things further up.
> 
> It does, time is down to ~3 seconds now, despite edges selection happening
> twice (once in computeEdgeIntersections and once in computeSelfNodes).
> Time to add it to copyPoints, I guess. But then we'd better not to add
> those elements in the graph from the start, to save even more time.

One note: with computeSelfNodes skipping non-overlapping edges there's
indeed a failure in a testcase computing DIFFERENCE. As I'm looking at
speeding up clipping for now I'll just enable the optimization for
INTERSECTION and move on.

The code is still in "ext-limited-graph" branch.

--strk;

> > I pushed the GEOS code of this in the "ext-limited-graph" branch in
> > my github fork (if anyone wants to take a look).
> > 
> > For comparison, the RectangleIntersection based code completes the
> > operation in 40ms (!!). That's really hard to beat.
> > 
> > --strk;
> > 
> > > On Thu, Sep 18, 2014 at 10:10 AM, Sandro Santilli <strk at keybit.net> wrote:
> > > 
> > > > Martin,
> > > > in order to speed up intersection overlay operation, would it work to
> > > > limit the GeometryGraph building by a bounding box ?
> > > >
> > > > The current interface of GeometryGraph does not allow it, but from the
> > > > point of view of the algorithm, do you think it could work ?
> > > > If could speed up both intersection and difference.
> > > >
> > > > Basically OverlayOp and GeometryGraph would need to take an optional
> > > > Envelope for limiting operations.
> > > >
> > > > What do you think ?
> > > >
> > > > --strk;
> > > >
> > > >  ()  ASCII ribbon campaign  --  Keep it simple !
> > > >  /\  http://strk.keybit.net/rants/ascii_mails.txt
> > > >
> 
> -- 
> 
>  ()  ASCII ribbon campaign  --  Keep it simple !
>  /\  http://strk.keybit.net/rants/ascii_mails.txt  

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Fri Sep 19 08:54:10 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 17:54:10 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919153150.GF4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost>
Message-ID: <20140919155410.GG4283@localhost>

So I completed the work adding copyPoint filtering too.
The time went from ~3 to ~2.8 seconds.

I re-enabled the optimization for DIFFERENCE as the real
problem was indeed with fixed precision model, as evidently
it could possible enlarge the "target extent" (could be easy
to determine the growing value for it, in that case).
an easy-to-determine growing value).

So, to recap, we go from ~15 seconds to ~2.8 seconds with my
specific case (polygon with ~250k holes, intersected with small
box).

Some nice debugging output:

  Copied 467 nodes out of 10711 for geom 0
  Copied 0 nodes out of 1 for geom 1
  (computeSelfNodes) Self edges reduced from 10711 to 470
  (computeSelfNodes) Self edges reduced from 1 to 1
  Self edges reduced from 10711 to 470
  Other edges reduced from 1 to 1

It looks like the majority of the time is still spent after
the last output line. Now profiling that one.

Whole testsuite still succeed, and latest code is pushed to github:
https://github.com/strk/libgeos/tree/ext-limited-graph

--strk;

On Fri, Sep 19, 2014 at 05:31:50PM +0200, Sandro Santilli wrote:
> On Fri, Sep 19, 2014 at 05:24:12PM +0200, Sandro Santilli wrote:
> > On Fri, Sep 19, 2014 at 04:45:58PM +0200, Sandro Santilli wrote:
> > > On Thu, Sep 18, 2014 at 10:41:46AM -0700, Martin Davis wrote:
> > > > Funny, this recently occurred to me as well.
> > > > 
> > > > The first place I'd look for introducing BBOX limiting is in the noding
> > > > phase.  The selfNode creation (in GeometryGraph) could just checking edges
> > > > within the overlap bounding box.  (This would work for intersection, but
> > > > technically not difference since then the output would not be fully noded,
> > > > which breaks the current JTS contract).
> > > > 
> > > > The computeEdgeIntersections could probably be limited to a BBOX as well.
> > > > 
> > > > Are you seeing data situations where this approach would produce a
> > > > significant win?
> > > 
> > > So back to this, reducing the work of computeEdgeIntersections so to
> > > only consider edges that intersect the target extent brings down the
> > > time of the overlay operation I'm looking at from ~15 to ~9.5 seconds.
> > > All existing testcases still succeed (also using the first geometry's
> > > envelope for the DIFFERENCE op) so this sounds like a safe optimization.
> > > 
> > > Extending this to self-nodes computation (and copyPoint too?) should
> > > speed things further up.
> > 
> > It does, time is down to ~3 seconds now, despite edges selection happening
> > twice (once in computeEdgeIntersections and once in computeSelfNodes).
> > Time to add it to copyPoints, I guess. But then we'd better not to add
> > those elements in the graph from the start, to save even more time.
> 
> One note: with computeSelfNodes skipping non-overlapping edges there's
> indeed a failure in a testcase computing DIFFERENCE. As I'm looking at
> speeding up clipping for now I'll just enable the optimization for
> INTERSECTION and move on.
> 
> The code is still in "ext-limited-graph" branch.
> 
> --strk;
> 
> > > I pushed the GEOS code of this in the "ext-limited-graph" branch in
> > > my github fork (if anyone wants to take a look).
> > > 
> > > For comparison, the RectangleIntersection based code completes the
> > > operation in 40ms (!!). That's really hard to beat.
> > > 
> > > --strk;
> > > 
> > > > On Thu, Sep 18, 2014 at 10:10 AM, Sandro Santilli <strk at keybit.net> wrote:
> > > > 
> > > > > Martin,
> > > > > in order to speed up intersection overlay operation, would it work to
> > > > > limit the GeometryGraph building by a bounding box ?
> > > > >
> > > > > The current interface of GeometryGraph does not allow it, but from the
> > > > > point of view of the algorithm, do you think it could work ?
> > > > > If could speed up both intersection and difference.
> > > > >
> > > > > Basically OverlayOp and GeometryGraph would need to take an optional
> > > > > Envelope for limiting operations.
> > > > >
> > > > > What do you think ?
> > > > >
> > > > > --strk;
> > > > >
> > > > >  ()  ASCII ribbon campaign  --  Keep it simple !
> > > > >  /\  http://strk.keybit.net/rants/ascii_mails.txt
> > > > >
> > 
> > -- 
> > 
> >  ()  ASCII ribbon campaign  --  Keep it simple !
> >  /\  http://strk.keybit.net/rants/ascii_mails.txt  
> 
> -- 
> 
>  ()  ASCII ribbon campaign  --  Keep it simple !
>  /\  http://strk.keybit.net/rants/ascii_mails.txt  

-- 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From strk at keybit.net  Fri Sep 19 09:05:09 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 18:05:09 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919155410.GG4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
Message-ID: <20140919160509.GH4283@localhost>

On Fri, Sep 19, 2014 at 05:54:10PM +0200, Sandro Santilli wrote:

> So, to recap, we go from ~15 seconds to ~2.8 seconds with my
> specific case (polygon with ~250k holes, intersected with small
> box).
> 
> Some nice debugging output:
> 
>   Copied 467 nodes out of 10711 for geom 0
>   Copied 0 nodes out of 1 for geom 1
>   (computeSelfNodes) Self edges reduced from 10711 to 470
>   (computeSelfNodes) Self edges reduced from 1 to 1
>   Self edges reduced from 10711 to 470
>   Other edges reduced from 1 to 1
> 
> It looks like the majority of the time is still spent after
> the last output line. Now profiling that one.

Interesting, the profiler shows the same number of calls to 
index::strtree::STRtree::STRIntersectsOp::intersects(void const*, void const*)
with and without the envelope restriction optimization.

Calls to that function represent the 32% of total time with optimization
activated, and 18% without.

We're talking about 124380300 calls, all coming from 338673 calls to
index::strtree::AbstractSTRtree::query, in turn all coming from the
FastNodingValidator. This means 30% of those ~3 seconds are spent
validating the output, doesn't it ? Is that step still needed ?
That's one of the steps that a "loose" (visualization-oriented)
function would not spend time on.

--strk;

> Whole testsuite still succeed, and latest code is pushed to github:
> https://github.com/strk/libgeos/tree/ext-limited-graph

From strk at keybit.net  Fri Sep 19 09:17:33 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 18:17:33 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919160509.GH4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
	<20140919160509.GH4283@localhost>
Message-ID: <20140919161733.GI4283@localhost>

On Fri, Sep 19, 2014 at 06:05:09PM +0200, Sandro Santilli wrote:
> On Fri, Sep 19, 2014 at 05:54:10PM +0200, Sandro Santilli wrote:
> 
> > So, to recap, we go from ~15 seconds to ~2.8 seconds with my
> > specific case (polygon with ~250k holes, intersected with small
> > box).
> > 
> > Some nice debugging output:
> > 
> >   Copied 467 nodes out of 10711 for geom 0
> >   Copied 0 nodes out of 1 for geom 1
> >   (computeSelfNodes) Self edges reduced from 10711 to 470
> >   (computeSelfNodes) Self edges reduced from 1 to 1
> >   Self edges reduced from 10711 to 470
> >   Other edges reduced from 1 to 1
> > 
> > It looks like the majority of the time is still spent after
> > the last output line. Now profiling that one.
> 
> Interesting, the profiler shows the same number of calls to 
> index::strtree::STRtree::STRIntersectsOp::intersects(void const*, void const*)
> with and without the envelope restriction optimization.
> 
> Calls to that function represent the 32% of total time with optimization
> activated, and 18% without.
> 
> We're talking about 124380300 calls, all coming from 338673 calls to
> index::strtree::AbstractSTRtree::query, in turn all coming from the
> FastNodingValidator. This means 30% of those ~3 seconds are spent
> validating the output, doesn't it ? Is that step still needed ?
> That's one of the steps that a "loose" (visualization-oriented)
> function would not spend time on.

Removing the noding validator step results in current trunk
taking ~13 seconds instead of ~15 and the envelope-filtering version
taking ~0.9 seconds instead of ~3 seconds

The testsuite shows no failure with the noding validator off (both GEOS
one and PostGIS one). Are there no known cases where that's needed ?
Sounds like a relatively big cost to keep.

Coming down from 15 seconds to < 1 sounds good :)

--strk;

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From geos-trac at osgeo.org  Fri Sep 19 09:26:01 2014
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 19 Sep 2014 16:26:01 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.ebea55b8b6b396a581bb450c145fa245@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.3                     
Component:  Default      |     Version:  3.4.2                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 So I officially decided this optimization will NOT get used transparently
 by Geometry::intersection. There's just a lot of effort taken to validate
 the result which may not be the target of RectangleIntersection.

 The RectangleIntersection class is more useful as it was originally, known
 to possibly return invalid results but good enough for some uses (quick
 visualization). So I'll rebase it to trunk and squash to a single commit,
 then commit as its C++ interface.

 At that point we'll need a name for the C-API signature, a name hopefully
 reflecting the "quick&dirty" nature of the function.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:12>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Fri Sep 19 09:32:18 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 19 Sep 2014 18:32:18 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919161733.GI4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
	<20140919160509.GH4283@localhost> <20140919161733.GI4283@localhost>
Message-ID: <20140919163218.GJ4283@localhost>

On Fri, Sep 19, 2014 at 06:17:33PM +0200, Sandro Santilli wrote:

> The testsuite shows no failure with the noding validator off 

Forget this, I actually found many:

 tests/xmltester/tests/robustness.xml: case1: test1: areatest(): failed.
 tests/xmltester/tests/ticket/bug392.xml: case1: test2: union(A): failed.
 tests/xmltester/tests/ticket/bug459.xml: case1: test1: union(A, B): failed.
 tests/xmltester/tests/ticket/bug527.xml: case1: test1: union(A): failed. 
 tests/xmltester/tests/ticket/bug586.xml: case1: test1: intersection(A, B): failed. 
 tests/xmltester/tests/ticket/bug599.xml: case1: test3: union(A, B): failed.
 tests/xmltester/tests/stmlf/stmlf-cases-20061020.xml: case1: test1: areatest(): failed.
 tests/xmltester/tests/stmlf/stmlf-cases-20061020-invalid-output.xml: case1: test1: areatest(): failed.

So it looks like we still need to check output noding (pity!)

--strk;

From geos-trac at osgeo.org  Mon Sep 22 01:10:29 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 22 Sep 2014 08:10:29 -0000
Subject: [geos-devel] [GEOS] #702: OverlayOp takes mover 20 minutes when
 a polygon with over a million holes is involved
In-Reply-To: <044.b8780021a24f7f7d63bddc6aed91f34f@osgeo.org>
References: <044.b8780021a24f7f7d63bddc6aed91f34f@osgeo.org>
Message-ID: <053.b02a556c784b376aab99cf39f40fbf78@osgeo.org>

#702: OverlayOp takes mover 20 minutes when a polygon with over a million holes
is involved
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 NOTE: the test I was running could have been also affected by a PostGIS
 issue: http://trac.osgeo.org/postgis/ticket/2933#comment:8

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/702#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Tue Sep 23 00:57:23 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 23 Sep 2014 09:57:23 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919163218.GJ4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
	<20140919160509.GH4283@localhost> <20140919161733.GI4283@localhost>
	<20140919163218.GJ4283@localhost>
Message-ID: <20140923075723.GA5140@localhost>

FYI: I've committed the "restricted-extent" changes to trunk.
They could be further optimized to avoid computing the overlapping
edges twice or even by not adding them at all in the graph, but for
now the speedup is noticeable enough to accept.

--strk;

On Fri, Sep 19, 2014 at 06:32:18PM +0200, Sandro Santilli wrote:
> On Fri, Sep 19, 2014 at 06:17:33PM +0200, Sandro Santilli wrote:
> 
> > The testsuite shows no failure with the noding validator off 
> 
> Forget this, I actually found many:
> 
>  tests/xmltester/tests/robustness.xml: case1: test1: areatest(): failed.
>  tests/xmltester/tests/ticket/bug392.xml: case1: test2: union(A): failed.
>  tests/xmltester/tests/ticket/bug459.xml: case1: test1: union(A, B): failed.
>  tests/xmltester/tests/ticket/bug527.xml: case1: test1: union(A): failed. 
>  tests/xmltester/tests/ticket/bug586.xml: case1: test1: intersection(A, B): failed. 
>  tests/xmltester/tests/ticket/bug599.xml: case1: test3: union(A, B): failed.
>  tests/xmltester/tests/stmlf/stmlf-cases-20061020.xml: case1: test1: areatest(): failed.
>  tests/xmltester/tests/stmlf/stmlf-cases-20061020-invalid-output.xml: case1: test1: areatest(): failed.
> 
> So it looks like we still need to check output noding (pity!)
> 
> --strk;

From strk at keybit.net  Tue Sep 23 01:21:13 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 23 Sep 2014 10:21:13 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140919161733.GI4283@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
	<20140919160509.GH4283@localhost> <20140919161733.GI4283@localhost>
Message-ID: <20140923082113.GB5140@localhost>

On Fri, Sep 19, 2014 at 06:17:33PM +0200, Sandro Santilli wrote:
> On Fri, Sep 19, 2014 at 06:05:09PM +0200, Sandro Santilli wrote:
> > On Fri, Sep 19, 2014 at 05:54:10PM +0200, Sandro Santilli wrote:
> > 
> > > So, to recap, we go from ~15 seconds to ~2.8 seconds with my
> > > specific case (polygon with ~250k holes, intersected with small
> > > box).
> > > 
> > > Some nice debugging output:
> > > 
> > >   Copied 467 nodes out of 10711 for geom 0
> > >   Copied 0 nodes out of 1 for geom 1
> > >   (computeSelfNodes) Self edges reduced from 10711 to 470
> > >   (computeSelfNodes) Self edges reduced from 1 to 1
> > >   Self edges reduced from 10711 to 470
> > >   Other edges reduced from 1 to 1
> > > 
> > > It looks like the majority of the time is still spent after
> > > the last output line. Now profiling that one.
> > 
> > Interesting, the profiler shows the same number of calls to 
> > index::strtree::STRtree::STRIntersectsOp::intersects(void const*, void const*)
> > with and without the envelope restriction optimization.
> > 
> > Calls to that function represent the 32% of total time with optimization
> > activated, and 18% without.
> > 
> > We're talking about 124380300 calls, all coming from 338673 calls to
> > index::strtree::AbstractSTRtree::query, in turn all coming from the
> > FastNodingValidator. This means 30% of those ~3 seconds are spent
> > validating the output, doesn't it ? Is that step still needed ?
> > That's one of the steps that a "loose" (visualization-oriented)
> > function would not spend time on.
> 
> Removing the noding validator step results in current trunk
> taking ~13 seconds instead of ~15 and the envelope-filtering version
> taking ~0.9 seconds instead of ~3 seconds

Good news, I further reduced the time spent in noding validator
by NOT adding in the OverlayOp edgeList those edges whose envelope does
not overlap the target one. This brings the total time down to 2 seconds
(from the original 15 seconds).

I've committed all of this already, but I guess it could be further
optimized by completely avoiding to push the input geometries components
at the very start, so we'd save having to filter them out later (or deleting
them once right after construction, which currently does not allow passing
a "target extent").

--strk; 

 ()  ASCII ribbon campaign  --  Keep it simple !
 /\  http://strk.keybit.net/rants/ascii_mails.txt  

From remi.cura at gmail.com  Tue Sep 23 03:17:24 2014
From: remi.cura at gmail.com (=?UTF-8?Q?R=C3=A9mi_Cura?=)
Date: Tue, 23 Sep 2014 12:17:24 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <20140923082113.GB5140@localhost>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
	<20140919160509.GH4283@localhost> <20140919161733.GI4283@localhost>
	<20140923082113.GB5140@localhost>
Message-ID: <CAJvUf_vwhGHmEi4FGTnDLC=ziyRaRSn8rmgBF5RjEsa0-KSN_g@mail.gmail.com>

Wov 15 sec to 2 sec is a very nice speed up !
Cheers,
R?mi-C

2014-09-23 10:21 GMT+02:00 Sandro Santilli <strk at keybit.net>:

> On Fri, Sep 19, 2014 at 06:17:33PM +0200, Sandro Santilli wrote:
> > On Fri, Sep 19, 2014 at 06:05:09PM +0200, Sandro Santilli wrote:
> > > On Fri, Sep 19, 2014 at 05:54:10PM +0200, Sandro Santilli wrote:
> > >
> > > > So, to recap, we go from ~15 seconds to ~2.8 seconds with my
> > > > specific case (polygon with ~250k holes, intersected with small
> > > > box).
> > > >
> > > > Some nice debugging output:
> > > >
> > > >   Copied 467 nodes out of 10711 for geom 0
> > > >   Copied 0 nodes out of 1 for geom 1
> > > >   (computeSelfNodes) Self edges reduced from 10711 to 470
> > > >   (computeSelfNodes) Self edges reduced from 1 to 1
> > > >   Self edges reduced from 10711 to 470
> > > >   Other edges reduced from 1 to 1
> > > >
> > > > It looks like the majority of the time is still spent after
> > > > the last output line. Now profiling that one.
> > >
> > > Interesting, the profiler shows the same number of calls to
> > > index::strtree::STRtree::STRIntersectsOp::intersects(void const*, void
> const*)
> > > with and without the envelope restriction optimization.
> > >
> > > Calls to that function represent the 32% of total time with
> optimization
> > > activated, and 18% without.
> > >
> > > We're talking about 124380300 calls, all coming from 338673 calls to
> > > index::strtree::AbstractSTRtree::query, in turn all coming from the
> > > FastNodingValidator. This means 30% of those ~3 seconds are spent
> > > validating the output, doesn't it ? Is that step still needed ?
> > > That's one of the steps that a "loose" (visualization-oriented)
> > > function would not spend time on.
> >
> > Removing the noding validator step results in current trunk
> > taking ~13 seconds instead of ~15 and the envelope-filtering version
> > taking ~0.9 seconds instead of ~3 seconds
>
> Good news, I further reduced the time spent in noding validator
> by NOT adding in the OverlayOp edgeList those edges whose envelope does
> not overlap the target one. This brings the total time down to 2 seconds
> (from the original 15 seconds).
>
> I've committed all of this already, but I guess it could be further
> optimized by completely avoiding to push the input geometries components
> at the very start, so we'd save having to filter them out later (or
> deleting
> them once right after construction, which currently does not allow passing
> a "target extent").
>
> --strk;
>
>  ()  ASCII ribbon campaign  --  Keep it simple !
>  /\  http://strk.keybit.net/rants/ascii_mails.txt
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20140923/76ae4a8b/attachment.html>

From strk at keybit.net  Tue Sep 23 03:24:35 2014
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 23 Sep 2014 12:24:35 +0200
Subject: [geos-devel] Extent-limited graph building ?
In-Reply-To: <CAJvUf_vwhGHmEi4FGTnDLC=ziyRaRSn8rmgBF5RjEsa0-KSN_g@mail.gmail.com>
References: <20140918171054.GD14152@localhost>
	<CAK2ens3huh5Cy753s4O8R6ZKxY6rCDyOK10Ry-58VizU9n5h9Q@mail.gmail.com>
	<20140919144558.GD4283@localhost> <20140919152412.GE4283@localhost>
	<20140919153150.GF4283@localhost> <20140919155410.GG4283@localhost>
	<20140919160509.GH4283@localhost> <20140919161733.GI4283@localhost>
	<20140923082113.GB5140@localhost>
	<CAJvUf_vwhGHmEi4FGTnDLC=ziyRaRSn8rmgBF5RjEsa0-KSN_g@mail.gmail.com>
Message-ID: <20140923102435.GA3610@localhost>

On Tue, Sep 23, 2014 at 12:17:24PM +0200, R?mi Cura wrote:
> Wov 15 sec to 2 sec is a very nice speed up !

It is, but also the input was a very nice one:
~250k polygons in a multipolygon intersected with a small rectangle.

I'd love to have feedback about how does the new code perform on
other kind of real-world datasets. Note that clipping a dataset
by a regular grid would be the perfect use case :)

--strk;

From alex.flint at gmail.com  Tue Sep 23 06:33:55 2014
From: alex.flint at gmail.com (Alex Flint)
Date: Tue, 23 Sep 2014 09:33:55 -0400
Subject: [geos-devel] =?utf-8?q?libgeos_BufferOp_gives_TopologyException_?=
	=?utf-8?b?4oCcZGVwdGggbWlzbWF0Y2jigJ0=?=
Message-ID: <CAN7yqbA7k1v-L6J5RFBZYOj4xrXoAzED=sPA6pxHrbxYQzAOZQ@mail.gmail.com>

I am working with the c++ interface to geos 3.4.2 on OSX (installed via
homebrew with --c++11).

I have created a LineString containing a CoordinateSequence of length 382
and then I run a buffer operation using:

    geos::operation::buffer::BufferParameters buffer_params;
    geos::operation::buffer::BufferOp buffer_op(input, buffer_params);
    geos::geom::Geometry* output = buffer_op.getResultGeometry(1.5);

This throws a geos::geom::TopologyException with message:

   depth mismatch at  at -6 -10.5

I have searched quite a bit for this error message but I have not found
anything about what "depth mismatch" actually means. What does this error
mean and what can I do about it?

The 382 points in my coordinate sequence are here:
https://gist.github.com/alexflint/dcea786628af3b43d21a

Thanks!

Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20140923/2f3154d9/attachment.html>

From geos-trac at osgeo.org  Thu Sep 25 03:48:50 2014
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 25 Sep 2014 10:48:50 -0000
Subject: [geos-devel] [GEOS] #699: Optimize Geometry->Intersection with
 rectangular argument
In-Reply-To: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
References: <044.882b181b337f713b29f94d288e899da6@osgeo.org>
Message-ID: <053.b41d91d893bbf9c70025a4d48684fef2@osgeo.org>

#699: Optimize Geometry->Intersection with rectangular argument
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.5.0                     
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
Changes (by strk):

  * version:  3.4.2 => svn-trunk
  * milestone:  3.4.3 => 3.5.0


Comment:

 As of r4021 the RectangleIntersection class and a GEOSClipByRect C-API
 function are in trunk (for 3.5.0). I've reverted the algorithm to the
 initial one, just adding the CCW/CW handling.

 The function will not attempt to handle precision model nor to ensure a
 valid output, nor to retain boundary points. But it will be fast.

 Adding the PHP binding of it would be nice, before closing this ticket.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/699#comment:13>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Sep 26 11:51:07 2014
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 26 Sep 2014 18:51:07 -0000
Subject: [geos-devel] [GEOS] #707: WKBReader does not read geometries with Z,
 M or ZM outside of Point
Message-ID: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>

#707: WKBReader does not read geometries with Z, M or ZM outside of Point
----------------------+-----------------------------------------------------
 Reporter:  benmorel  |       Owner:  geos-devel@?              
     Type:  defect    |      Status:  new                       
 Priority:  blocker   |   Milestone:  3.4.3                     
Component:  Default   |     Version:  svn-trunk                 
 Severity:  Critical  |    Keywords:  WKBReader                 
----------------------+-----------------------------------------------------
 Strangely, trying to read any Geometry, apart from a Point, with Z, M or
 ZM coordinates from WKB always fails with a message such as:

 "ParseException: Unknown WKB type 234"

 An example of such geometry is the following:

 LINESTRING Z (0 1 2, 1 2 3, 2 3 4)

 Its (hex) WKB representation is:

 01ea030000030000000000000000000000000000000000f03f0000000000000040000000000000f03f00000000000000400000000000000840000000000000004000000000000008400000000000001040

 This WKB is correct, and PostGIS and others handle it properly.

 I will post a pull request on GitHub with failing tests, and put the link
 here.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/707>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Sep 26 11:52:40 2014
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 26 Sep 2014 18:52:40 -0000
Subject: [geos-devel] [GEOS] #707: WKBReader does not read geometries
 with Z, M or ZM outside of Point
In-Reply-To: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>
References: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>
Message-ID: <057.3004c7dff7556e4d0a9acbbaea5c9cc8@osgeo.org>

#707: WKBReader does not read geometries with Z, M or ZM outside of Point
----------------------+-----------------------------------------------------
 Reporter:  benmorel  |       Owner:  geos-devel@?              
     Type:  defect    |      Status:  new                       
 Priority:  blocker   |   Milestone:  3.4.3                     
Component:  Default   |     Version:  svn-trunk                 
 Severity:  Critical  |    Keywords:  WKBReader                 
----------------------+-----------------------------------------------------

Comment(by benmorel):

 Failing tests: https://github.com/libgeos/libgeos/pull/39

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/707#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Sep 26 18:55:13 2014
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 27 Sep 2014 01:55:13 -0000
Subject: [geos-devel] [GEOS] #707: WKBReader does not read geometries
 with Z, M or ZM outside of Point
In-Reply-To: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>
References: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>
Message-ID: <057.a29b2eb6f31e557494daee31c9c6ed82@osgeo.org>

#707: WKBReader does not read geometries with Z, M or ZM outside of Point
----------------------+-----------------------------------------------------
 Reporter:  benmorel  |       Owner:  geos-devel@?              
     Type:  defect    |      Status:  new                       
 Priority:  blocker   |   Milestone:  3.4.3                     
Component:  Default   |     Version:  svn-trunk                 
 Severity:  Critical  |    Keywords:  WKBReader                 
----------------------+-----------------------------------------------------

Comment(by mwtoews):

 This is a duplicate of #466

 The example geometry is ISO WKB. GEOS currently only supports EWKB,
 defined by PostGIS (however, PostGIS seamlessly supports both ISO WKB and
 EWKB formats).

 The EWKB equivalent of the example linestring is:
 {{{
 0102000080030000000000000000000000000000000000F03F0000000000000040000000000000F03F00000000000000400000000000000840000000000000004000000000000008400000000000001040
 }}}

 But yeah, I agree it would be nice to have GEOS catch up to the abilities
 of PostGIS.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/707#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Sep 27 05:26:38 2014
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 27 Sep 2014 12:26:38 -0000
Subject: [geos-devel] [GEOS] #707: WKBReader does not read geometries
 with Z, M or ZM outside of Point
In-Reply-To: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>
References: <048.00eba90b8d888e0e8498460945f8ab94@osgeo.org>
Message-ID: <057.e80d120d6aca9283aabd87d7f3954aad@osgeo.org>

#707: WKBReader does not read geometries with Z, M or ZM outside of Point
----------------------+-----------------------------------------------------
 Reporter:  benmorel  |       Owner:  geos-devel@?              
     Type:  defect    |      Status:  new                       
 Priority:  blocker   |   Milestone:  3.4.3                     
Component:  Default   |     Version:  svn-trunk                 
 Severity:  Critical  |    Keywords:  WKBReader                 
----------------------+-----------------------------------------------------

Comment(by benmorel):

 Thanks, I did not think one second that GEOS would not be able to handle
 ISO WKB. I'll see if I can make changes to the WKBReader so that it can
 handle WKB as well: any WKB being valid EWKB, it should be possible
 without breaking anything.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/707#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From CABO at NIRAS.DK  Mon Sep 29 12:05:28 2014
From: CABO at NIRAS.DK (=?iso-8859-1?Q?Casper_B=F8rgesen_=28CABO=29?=)
Date: Mon, 29 Sep 2014 19:05:28 +0000
Subject: [geos-devel] Buffering of invalid polygon seems to produce a less
	useable result
Message-ID: <BCF6B63AE0B25941A7F56567B58A28056B4C7206@allkexa1.NIRAS.INT>

Hi!

I hope this is the right place to ask my question. I am using Shapely (GEOS 3.3.0) for doing a lot of intersections and buffering. I have encountered the following polygon:

POLYGON ((495500.0008984859 6223520.993661864, 495499.998 6223520.995448768, 495499.9991735771 6223527.855730382, 495508.4863142541 6223531.706871153, 495530.2685512748 6223543.411751036, 495533.1580739201 6223544.947487216, 495533.8227791181 6223543.611840623, 495533.8271434258 6223543.603092512, 495555.6344791899 6223499.999, 495566.8171459202 6223499.999, 495566.8180398509 6223500.000448206, 495566.1117119509 6223501.409196244, 495542.7750432596 6223548.072535053, 495526.8506947843 6223580.070632624, 495529.2135856081 6223581.293180954, 495552.9615536986 6223534.554188457, 495570.1400217356 6223499.999, 495581.3075270238 6223499.999, 495581.3084224826 6223500.000445144, 495561.9082049726 6223539.026180848, 495561.8885137878 6223539.065359981, 495538.1146364022 6223585.855345234, 495559.0058384891 6223596.461268372, 495566.4481611441 6223599.999096851, 495566.4477318175 6223600.001, 495543.8828814158 6223600.000891673, 495533.6582439464 6223594.810107598, 495531.1272425454 6223600.001, 495600.0010000134 6223600.001, 495600.002 6223599.999999792, 495600 6223593.009925384, 495596.8509020228 6223591.430463607, 495596.8495582865 6223591.430912227, 495596.1490985376 6223592.839558984, 495590.0299959367 6223589.770009149, 495575.7599193477 6223582.619950288, 495574.7599693871 6223581.849986448, 495573.6199312546 6223580.849924827, 495572.4699504239 6223579.319921299, 495571.6599650297 6223577.669868131, 495571.4399859799 6223576.499942598, 495571.3299971888 6223574.919921184, 495571.5300424019 6223572.699865821, 495572.0800108417 6223571.299956108, 495578.5195385296 6223558.440899175, 495578.1804384738 6223558.269103024, 495595.8708982405 6223522.980438616, 495599.9998027192 6223525.048014081, 495600.0012504738 6223525.047119915, 495599.9999999871 6223499.998, 495530.7043992468 6223499.998449264, 495516.0786580448 6223529.078217097, 495500.0008984859 6223520.993661864))

According to QGIS it has a self-intersection at (495566.447732, 6223600.001) and the polygon is the result of previous intersections with other valid geometry.

I am trying to buffer the polygon 0.001 meter (no segments) to avoid the self-intersection. But instead I end up with this MultiPolygon:

MULTIPOLYGON (((495555.6332172451 6223499.999287644, 495566.8184538786 6223499.999215126, 495566.8179968625 6223499.99847474, 495566.8171459202 6223499.998, 495555.6344791899 6223499.998, 495555.6335848061 6223499.9985527, 495555.6332172451 6223499.999287644)), ((495570.1388087373 6223499.999193599, 495581.3087785234 6223499.999121181, 495581.3083770663 6223499.998473286, 495581.3075270238 6223499.998, 495570.1400217356 6223499.998, 495570.1391262832 6223499.998554843, 495570.1388087373 6223499.999193599)), ((495566.4489825341 6223600, 495543.878915958 6223600, 495543.8824287364 6223600.001783347, 495543.8828814111 6223600.001891674, 495566.4477318127 6223600.002, 495566.4487073044 6223600.001220058, 495566.4489825341 6223600)))

Though it is valid it only represents the part of the polygon I would like to avoid, but in this case increase to ensure validity on the expense of a slightly increased area.

Is the MultiPolygon the intended result of the specified operation?

Are there any methods to better ensure validity of geometries resulting from the various geometric functions?


Kind regards, Casper
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20140929/e115ebf5/attachment.html>

