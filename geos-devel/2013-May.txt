From tfiedlerova at gmail.com  Wed May  8 04:59:28 2013
From: tfiedlerova at gmail.com (=?ISO-8859-1?Q?Tereza_Fiedlerov=E1?=)
Date: Wed, 8 May 2013 13:59:28 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
Message-ID: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>

Hello,

I'm trying to edit Geometry using class CoordinateOperation. My
implementation of CoordinateOperation::edit function looks like follows:


CoordinateSequence* VertexGeometryEditorOperation::edit(const
CoordinateSequence *, const Geometry *geom )
{
    CoordinateSequence* coord = geom->getCoordinates();

    for ( size_t i = 0; i < coord->getSize(); i++)
    {
            coord->setAt( closeCoord->getAt(i)+number, i );
    }

    return coord;

}

Everything works fine, but when I check it with walgrind it returned these
memory leaks:

==19845== 168 bytes in 3 blocks are possibly lost in loss record 335 of 426
==19845==    at 0x4C2C154: operator new(unsigned long)
(vg_replace_malloc.c:298)
==19845==    by 0xF206682:
geos::geom::GeometryFactory::createLinearRing(geos::geom::CoordinateSequence*)
const (GeometryFactory.cpp:411)
==19845==    by 0xF211A31:
geos::geom::util::CoordinateOperation::edit(geos::geom::Geometry const*,
geos::geom::GeometryFactory const*) (CoordinateOperation.cpp:38)
==19845==    by 0xF2123D6:
geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon const*,
geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:117)
==19845==    by 0xF212273:
geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:88)
==19845==    by 0xBFB30FE:
geoc::alg::VertexSnapper::snapVertices(geoc::geo::GEOCGeom*,
geos::geom::CoordinateSequence*) (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0xBFB33A1: geoc::alg::VertexSnapper::snap() (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0x566782E: QgsConflateProvider::vertexSnap() (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/qgsconflate/libqgsconflate.so.1.0.0)
==19845==    by 0x401C65: main (main.cpp:85)

==19845== 192 bytes in 3 blocks are possibly lost in loss record 347 of 426
==19845==    at 0x4C2C154: operator new(unsigned long)
(vg_replace_malloc.c:298)
==19845==    by 0xF206ACA:
geos::geom::GeometryFactory::createPolygon(geos::geom::LinearRing*,
std::vector<geos::geom::Geometry*, std::allocator<geos::geom::Geometry*>
>*) const (GeometryFactory.cpp:525)
==19845==    by 0xF212568:
geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon const*,
geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:144)
==19845==    by 0xF212273:
geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:88)
==19845==    by 0xBFB30FE:
geoc::alg::VertexSnapper::snapVertices(geoc::geo::GEOCGeom*,
geos::geom::CoordinateSequence*) (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0xBFB33A1: geoc::alg::VertexSnapper::snap() (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0x566782E: QgsConflateProvider::vertexSnap() (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/qgsconflate/libqgsconflate.so.1.0.0)
==19845==    by 0x401C65: main (main.cpp:85)


==19845== 408 bytes in 3 blocks are possibly lost in loss record 382 of 426
==19845==    at 0x4C2C154: operator new(unsigned long)
(vg_replace_malloc.c:298)
==19845==    by 0xF1FABE5:
geos::geom::CoordinateArraySequence::CoordinateArraySequence(geos::geom::CoordinateArraySequence
const&) (new_allocator.h:92)
==19845==    by 0xF1FACD8: geos::geom::CoordinateArraySequence::clone()
const (CoordinateArraySequence.cpp:77)
==19845==    by 0xBFB7B6C:
geoc::edit::VertexGeometryEditorOperation::edit(geos::geom::CoordinateSequence
const*, geos::geom::Geometry const*) (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0xF211A26:
geos::geom::util::CoordinateOperation::edit(geos::geom::Geometry const*,
geos::geom::GeometryFactory const*) (CoordinateOperation.cpp:36)
==19845==    by 0xF2123D6:
geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon const*,
geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:117)
==19845==    by 0xF212273:
geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:88)
==19845==    by 0xBFB30FE:
geoc::alg::VertexSnapper::snapVertices(geoc::geo::GEOCGeom*,
geos::geom::CoordinateSequence*) (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0xBFB33A1: geoc::alg::VertexSnapper::snap() (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
==19845==    by 0x566782E: QgsConflateProvider::vertexSnap() (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/src/qgsconflate/libqgsconflate.so.1.0.0)
==19845==    by 0x401C65: main (main.cpp:85)

...

Anybody knows how to fix that?

Thanks,

Tereza
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130508/36fe3e97/attachment.html>

From strk at keybit.net  Mon May 13 03:16:15 2013
From: strk at keybit.net (Sandro Santilli)
Date: Mon, 13 May 2013 12:16:15 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
Message-ID: <20130513101615.GE10928@gnash>


Hi Tereza, could you include a full testcase, including caller ?

--strk;

On Wed, May 08, 2013 at 01:59:28PM +0200, Tereza Fiedlerov? wrote:
> Hello,
> 
> I'm trying to edit Geometry using class CoordinateOperation. My
> implementation of CoordinateOperation::edit function looks like follows:
> 
> 
> CoordinateSequence* VertexGeometryEditorOperation::edit(const
> CoordinateSequence *, const Geometry *geom )
> {
>     CoordinateSequence* coord = geom->getCoordinates();
> 
>     for ( size_t i = 0; i < coord->getSize(); i++)
>     {
>             coord->setAt( closeCoord->getAt(i)+number, i );
>     }
> 
>     return coord;
> 
> }
> 
> Everything works fine, but when I check it with walgrind it returned these
> memory leaks:
> 
> ==19845== 168 bytes in 3 blocks are possibly lost in loss record 335 of 426
> ==19845==    at 0x4C2C154: operator new(unsigned long)
> (vg_replace_malloc.c:298)
> ==19845==    by 0xF206682:
> geos::geom::GeometryFactory::createLinearRing(geos::geom::CoordinateSequence*)
> const (GeometryFactory.cpp:411)
> ==19845==    by 0xF211A31:
> geos::geom::util::CoordinateOperation::edit(geos::geom::Geometry const*,
> geos::geom::GeometryFactory const*) (CoordinateOperation.cpp:38)
> ==19845==    by 0xF2123D6:
> geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon const*,
> geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:117)
> ==19845==    by 0xF212273:
> geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
> geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:88)
> ==19845==    by 0xBFB30FE:
> geoc::alg::VertexSnapper::snapVertices(geoc::geo::GEOCGeom*,
> geos::geom::CoordinateSequence*) (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0xBFB33A1: geoc::alg::VertexSnapper::snap() (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0x566782E: QgsConflateProvider::vertexSnap() (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/qgsconflate/libqgsconflate.so.1.0.0)
> ==19845==    by 0x401C65: main (main.cpp:85)
> 
> ==19845== 192 bytes in 3 blocks are possibly lost in loss record 347 of 426
> ==19845==    at 0x4C2C154: operator new(unsigned long)
> (vg_replace_malloc.c:298)
> ==19845==    by 0xF206ACA:
> geos::geom::GeometryFactory::createPolygon(geos::geom::LinearRing*,
> std::vector<geos::geom::Geometry*, std::allocator<geos::geom::Geometry*>
> >*) const (GeometryFactory.cpp:525)
> ==19845==    by 0xF212568:
> geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon const*,
> geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:144)
> ==19845==    by 0xF212273:
> geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
> geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:88)
> ==19845==    by 0xBFB30FE:
> geoc::alg::VertexSnapper::snapVertices(geoc::geo::GEOCGeom*,
> geos::geom::CoordinateSequence*) (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0xBFB33A1: geoc::alg::VertexSnapper::snap() (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0x566782E: QgsConflateProvider::vertexSnap() (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/qgsconflate/libqgsconflate.so.1.0.0)
> ==19845==    by 0x401C65: main (main.cpp:85)
> 
> 
> ==19845== 408 bytes in 3 blocks are possibly lost in loss record 382 of 426
> ==19845==    at 0x4C2C154: operator new(unsigned long)
> (vg_replace_malloc.c:298)
> ==19845==    by 0xF1FABE5:
> geos::geom::CoordinateArraySequence::CoordinateArraySequence(geos::geom::CoordinateArraySequence
> const&) (new_allocator.h:92)
> ==19845==    by 0xF1FACD8: geos::geom::CoordinateArraySequence::clone()
> const (CoordinateArraySequence.cpp:77)
> ==19845==    by 0xBFB7B6C:
> geoc::edit::VertexGeometryEditorOperation::edit(geos::geom::CoordinateSequence
> const*, geos::geom::Geometry const*) (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0xF211A26:
> geos::geom::util::CoordinateOperation::edit(geos::geom::Geometry const*,
> geos::geom::GeometryFactory const*) (CoordinateOperation.cpp:36)
> ==19845==    by 0xF2123D6:
> geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon const*,
> geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:117)
> ==19845==    by 0xF212273:
> geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
> geos::geom::util::GeometryEditorOperation*) (GeometryEditor.cpp:88)
> ==19845==    by 0xBFB30FE:
> geoc::alg::VertexSnapper::snapVertices(geoc::geo::GEOCGeom*,
> geos::geom::CoordinateSequence*) (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0xBFB33A1: geoc::alg::VertexSnapper::snap() (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/geoc_cpp/libgeoc.so.1.0.0)
> ==19845==    by 0x566782E: QgsConflateProvider::vertexSnap() (in
> /host/Users/Tereza/Documents/CVUT-FSv/BP/src/qgsconflate/libqgsconflate.so.1.0.0)
> ==19845==    by 0x401C65: main (main.cpp:85)
> 
> ...
> 
> Anybody knows how to fix that?
> 
> Thanks,
> 
> Tereza

From tfiedlerova at gmail.com  Wed May 15 13:42:08 2013
From: tfiedlerova at gmail.com (=?ISO-8859-1?Q?Tereza_Fiedlerov=E1?=)
Date: Wed, 15 May 2013 22:42:08 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <20130513101615.GE10928@gnash>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
Message-ID: <CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>

2013/5/13 Sandro Santilli <strk at keybit.net>:
>
> Hi Tereza, could you include a full testcase, including caller ?
>
> --strk;

Hi,

I tried to make it easier, but I see it wasn't good idea, so I'm
giving here the necessary code without changes:

vertexgeometryeditoroperation.h
--------------------------------

#ifndef VERTEXGEOMETRYEDITOROPERATION_H
#define VERTEXGEOMETRYEDITOROPERATION_H

// GEOS includes
#include <geos/geom/CoordinateSequence.h>
#include <geos/geom/Geometry.h>
#include <geos/geom/util/CoordinateOperation.h>
#include <geos/geom/CoordinateSequenceFactory.h>

// local includes
#include "geoc.h"

#include <QtGui>

using namespace std;
using namespace geos;
using namespace geos::geom;
using namespace geos::geom::util;

using namespace geoc;
using namespace geoc::geo;
using namespace geoc::alg;
using namespace geoc::edit;

namespace geoc {
namespace edit {

/** Class for editing geometry - snap vertices to the closest points. */

class VertexGeometryEditorOperation: public CoordinateOperation
{

    using CoordinateOperation::edit;

public:

    /// Constructor
    VertexGeometryEditorOperation(  ): closeCoord(NULL),
tolDistance(0), changed(false){}

    /** Set private closeCoord to given coord.
     */
    void setCloseCoordSeq( CoordinateSequence *coord ) { closeCoord = coord; }

    /** Set tolerance distance
      */
    void setTolDistance( double tol ) { tolDistance = tol; }

    /** Return true if geometry was changed
      */
    bool isChanged() { return changed; }

    /** Virtual function for editing geometry - snap to closest vertices.
     * @param coordinates Not important.
     * @param gGeometry to be edited.
     */
    CoordinateSequence* edit(const CoordinateSequence *coordinates,
const Geometry *g );


private:

    CoordinateSequence *closeCoord;
    double tolDistance;
    bool changed;

};

} //namespace geoc
} //namespace edit

#endif // VERTEXGEOMETRYEDITOROPERATION_H


------------------------------
vertexgeometryoperation.cpp
------------------------------

#include "vertexgeometryeditoroperation.h"

namespace geoc {
namespace edit {

CoordinateSequence* VertexGeometryEditorOperation::edit(const
CoordinateSequence *, const Geometry *geom )
{
    CoordinateSequence* coord = geom->getCoordinates();

    // find closest point from closeCoord
    for ( size_t i = 0; i < coord->getSize(); i++)
    {
        // minimal distance
        double minDist = tolDistance;
        size_t indMin = 0;
        bool isMin = false;

        for ( size_t j = 0; j < closeCoord->getSize(); j++ )
        {
            // compute distance between two tested points
            double dist = coord->getAt(i).distance( closeCoord->getAt(j) );

            if( (0 < dist) && (dist < minDist) )
            {
                minDist = dist;
                indMin = j;
                isMin = true;
            }

        }

        // set new coordinate to the closest point if there is some
        if ( isMin )
        {
            coord->setAt( closeCoord->getAt(indMin), i );
            changed = true;
        }

    }

    return coord;

}

} //namespace geoc
} //namespace edit


--------------------------
function using code above
--------------------------

void VertexSnapper::snapVertices(Geometry *geom, CoordinateSequence *closeCoord)
{

    // create and set geometry editor
    VertexGeometryEditorOperation myOp;
    myOp.setCloseCoordSeq( closeCoord );
    myOp.setTolDistance( tolDistance );

    GeometryEditor geomEdit( geom->getFactory() );

    // set geometry to edited one
    geom=( geomEdit.edit( geom , &myOp ) );


}


Thanks for help in advance,

Tereza

From strk at keybit.net  Thu May 16 01:43:29 2013
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 16 May 2013 10:43:29 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
Message-ID: <20130516084329.GD14994@gnash>

What I need is a full contained test.
A .cpp file that built and run exposes the leak.
It must include the geometry input.

--strk;

On Wed, May 15, 2013 at 10:42:08PM +0200, Tereza Fiedlerov? wrote:
> 2013/5/13 Sandro Santilli <strk at keybit.net>:
> >
> > Hi Tereza, could you include a full testcase, including caller ?
> >
> > --strk;
> 
> Hi,
> 
> I tried to make it easier, but I see it wasn't good idea, so I'm
> giving here the necessary code without changes:
> 
> vertexgeometryeditoroperation.h
> --------------------------------
> 
> #ifndef VERTEXGEOMETRYEDITOROPERATION_H
> #define VERTEXGEOMETRYEDITOROPERATION_H
> 
> // GEOS includes
> #include <geos/geom/CoordinateSequence.h>
> #include <geos/geom/Geometry.h>
> #include <geos/geom/util/CoordinateOperation.h>
> #include <geos/geom/CoordinateSequenceFactory.h>
> 
> // local includes
> #include "geoc.h"
> 
> #include <QtGui>
> 
> using namespace std;
> using namespace geos;
> using namespace geos::geom;
> using namespace geos::geom::util;
> 
> using namespace geoc;
> using namespace geoc::geo;
> using namespace geoc::alg;
> using namespace geoc::edit;
> 
> namespace geoc {
> namespace edit {
> 
> /** Class for editing geometry - snap vertices to the closest points. */
> 
> class VertexGeometryEditorOperation: public CoordinateOperation
> {
> 
>     using CoordinateOperation::edit;
> 
> public:
> 
>     /// Constructor
>     VertexGeometryEditorOperation(  ): closeCoord(NULL),
> tolDistance(0), changed(false){}
> 
>     /** Set private closeCoord to given coord.
>      */
>     void setCloseCoordSeq( CoordinateSequence *coord ) { closeCoord = coord; }
> 
>     /** Set tolerance distance
>       */
>     void setTolDistance( double tol ) { tolDistance = tol; }
> 
>     /** Return true if geometry was changed
>       */
>     bool isChanged() { return changed; }
> 
>     /** Virtual function for editing geometry - snap to closest vertices.
>      * @param coordinates Not important.
>      * @param gGeometry to be edited.
>      */
>     CoordinateSequence* edit(const CoordinateSequence *coordinates,
> const Geometry *g );
> 
> 
> private:
> 
>     CoordinateSequence *closeCoord;
>     double tolDistance;
>     bool changed;
> 
> };
> 
> } //namespace geoc
> } //namespace edit
> 
> #endif // VERTEXGEOMETRYEDITOROPERATION_H
> 
> 
> ------------------------------
> vertexgeometryoperation.cpp
> ------------------------------
> 
> #include "vertexgeometryeditoroperation.h"
> 
> namespace geoc {
> namespace edit {
> 
> CoordinateSequence* VertexGeometryEditorOperation::edit(const
> CoordinateSequence *, const Geometry *geom )
> {
>     CoordinateSequence* coord = geom->getCoordinates();
> 
>     // find closest point from closeCoord
>     for ( size_t i = 0; i < coord->getSize(); i++)
>     {
>         // minimal distance
>         double minDist = tolDistance;
>         size_t indMin = 0;
>         bool isMin = false;
> 
>         for ( size_t j = 0; j < closeCoord->getSize(); j++ )
>         {
>             // compute distance between two tested points
>             double dist = coord->getAt(i).distance( closeCoord->getAt(j) );
> 
>             if( (0 < dist) && (dist < minDist) )
>             {
>                 minDist = dist;
>                 indMin = j;
>                 isMin = true;
>             }
> 
>         }
> 
>         // set new coordinate to the closest point if there is some
>         if ( isMin )
>         {
>             coord->setAt( closeCoord->getAt(indMin), i );
>             changed = true;
>         }
> 
>     }
> 
>     return coord;
> 
> }
> 
> } //namespace geoc
> } //namespace edit
> 
> 
> --------------------------
> function using code above
> --------------------------
> 
> void VertexSnapper::snapVertices(Geometry *geom, CoordinateSequence *closeCoord)
> {
> 
>     // create and set geometry editor
>     VertexGeometryEditorOperation myOp;
>     myOp.setCloseCoordSeq( closeCoord );
>     myOp.setTolDistance( tolDistance );
> 
>     GeometryEditor geomEdit( geom->getFactory() );
> 
>     // set geometry to edited one
>     geom=( geomEdit.edit( geom , &myOp ) );
> 
> 
> }
> 
> 
> Thanks for help in advance,

From tfiedlerova at gmail.com  Wed May 22 00:58:20 2013
From: tfiedlerova at gmail.com (=?ISO-8859-1?Q?Tereza_Fiedlerov=E1?=)
Date: Wed, 22 May 2013 09:58:20 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <20130516084329.GD14994@gnash>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
Message-ID: <CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>

Hi,

I'm sorry for my long reaction time, but I have still the same problem
and I hope you still can help me. I tried to create a minimal example.
This example returns both my problems - memory leak because of using
WKT and also the problem with GeometryEditorOperation as I wrote
before.
The input is simple wkt polygon and I just trying to change its
position. The main.cpp file is attached to this email.

The output from valgrind --leak-check=full is as follows:

==3366== Memcheck, a memory error detector
==3366== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==3366== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==3366== Command: ./Example
==3366==
==3366==
==3366== HEAP SUMMARY:
==3366==     in use at exit: 1,112 bytes in 22 blocks
==3366==   total heap usage: 82 allocs, 60 frees, 9,200 bytes allocated
==3366==
==3366== 520 (64 direct, 456 indirect) bytes in 1 blocks are
definitely lost in loss record 21 of 22
==3366==    at 0x4C2C154: operator new(unsigned long) (vg_replace_malloc.c:298)
==3366==    by 0x4ED5CEA:
geos::geom::GeometryFactory::createPolygon(geos::geom::LinearRing*,
std::vector<geos::geom::Geometry*,
std::allocator<geos::geom::Geometry*> >*) const (in
/usr/lib/libgeos-3.3.3.so)
==3366==    by 0x4EE1718:
geos::geom::util::GeometryEditor::editPolygon(geos::geom::Polygon
const*, geos::geom::util::GeometryEditorOperation*) (in
/usr/lib/libgeos-3.3.3.so)
==3366==    by 0x4EE1423:
geos::geom::util::GeometryEditor::edit(geos::geom::Geometry const*,
geos::geom::util::GeometryEditorOperation*) (in
/usr/lib/libgeos-3.3.3.so)
==3366==    by 0x400EE1: main (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/Example/Example)
==3366==
==3366== 592 (64 direct, 528 indirect) bytes in 1 blocks are
definitely lost in loss record 22 of 22
==3366==    at 0x4C2C154: operator new(unsigned long) (vg_replace_malloc.c:298)
==3366==    by 0x4ED5CEA:
geos::geom::GeometryFactory::createPolygon(geos::geom::LinearRing*,
std::vector<geos::geom::Geometry*,
std::allocator<geos::geom::Geometry*> >*) const (in
/usr/lib/libgeos-3.3.3.so)
==3366==    by 0x4F09E3E:
geos::io::WKTReader::readPolygonText(geos::io::StringTokenizer*) (in
/usr/lib/libgeos-3.3.3.so)
==3366==    by 0x4F0B053:
geos::io::WKTReader::readGeometryTaggedText(geos::io::StringTokenizer*)
(in /usr/lib/libgeos-3.3.3.so)
==3366==    by 0x4F0B49B: geos::io::WKTReader::read(std::string
const&) (in /usr/lib/libgeos-3.3.3.so)
==3366==    by 0x400EAD: main (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/Example/Example)
==3366==
==3366== LEAK SUMMARY:
==3366==    definitely lost: 128 bytes in 2 blocks
==3366==    indirectly lost: 984 bytes in 20 blocks
==3366==      possibly lost: 0 bytes in 0 blocks
==3366==    still reachable: 0 bytes in 0 blocks
==3366==         suppressed: 0 bytes in 0 blocks
==3366==
==3366== For counts of detected and suppressed errors, rerun with: -v
==3366== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)


I will really appreciate your help. Thanks

Tereza






2013/5/16 Sandro Santilli <strk at keybit.net>:
> What I need is a full contained test.
> A .cpp file that built and run exposes the leak.
> It must include the geometry input.
>
> --strk;
>
> On Wed, May 15, 2013 at 10:42:08PM +0200, Tereza Fiedlerov? wrote:
>> 2013/5/13 Sandro Santilli <strk at keybit.net>:
>> >
>> > Hi Tereza, could you include a full testcase, including caller ?
>> >
>> > --strk;
>>
>> Hi,
>>
>> I tried to make it easier, but I see it wasn't good idea, so I'm
>> giving here the necessary code without changes:
>>
>> vertexgeometryeditoroperation.h
>> --------------------------------
>>
>> #ifndef VERTEXGEOMETRYEDITOROPERATION_H
>> #define VERTEXGEOMETRYEDITOROPERATION_H
>>
>> // GEOS includes
>> #include <geos/geom/CoordinateSequence.h>
>> #include <geos/geom/Geometry.h>
>> #include <geos/geom/util/CoordinateOperation.h>
>> #include <geos/geom/CoordinateSequenceFactory.h>
>>
>> // local includes
>> #include "geoc.h"
>>
>> #include <QtGui>
>>
>> using namespace std;
>> using namespace geos;
>> using namespace geos::geom;
>> using namespace geos::geom::util;
>>
>> using namespace geoc;
>> using namespace geoc::geo;
>> using namespace geoc::alg;
>> using namespace geoc::edit;
>>
>> namespace geoc {
>> namespace edit {
>>
>> /** Class for editing geometry - snap vertices to the closest points. */
>>
>> class VertexGeometryEditorOperation: public CoordinateOperation
>> {
>>
>>     using CoordinateOperation::edit;
>>
>> public:
>>
>>     /// Constructor
>>     VertexGeometryEditorOperation(  ): closeCoord(NULL),
>> tolDistance(0), changed(false){}
>>
>>     /** Set private closeCoord to given coord.
>>      */
>>     void setCloseCoordSeq( CoordinateSequence *coord ) { closeCoord = coord; }
>>
>>     /** Set tolerance distance
>>       */
>>     void setTolDistance( double tol ) { tolDistance = tol; }
>>
>>     /** Return true if geometry was changed
>>       */
>>     bool isChanged() { return changed; }
>>
>>     /** Virtual function for editing geometry - snap to closest vertices.
>>      * @param coordinates Not important.
>>      * @param gGeometry to be edited.
>>      */
>>     CoordinateSequence* edit(const CoordinateSequence *coordinates,
>> const Geometry *g );
>>
>>
>> private:
>>
>>     CoordinateSequence *closeCoord;
>>     double tolDistance;
>>     bool changed;
>>
>> };
>>
>> } //namespace geoc
>> } //namespace edit
>>
>> #endif // VERTEXGEOMETRYEDITOROPERATION_H
>>
>>
>> ------------------------------
>> vertexgeometryoperation.cpp
>> ------------------------------
>>
>> #include "vertexgeometryeditoroperation.h"
>>
>> namespace geoc {
>> namespace edit {
>>
>> CoordinateSequence* VertexGeometryEditorOperation::edit(const
>> CoordinateSequence *, const Geometry *geom )
>> {
>>     CoordinateSequence* coord = geom->getCoordinates();
>>
>>     // find closest point from closeCoord
>>     for ( size_t i = 0; i < coord->getSize(); i++)
>>     {
>>         // minimal distance
>>         double minDist = tolDistance;
>>         size_t indMin = 0;
>>         bool isMin = false;
>>
>>         for ( size_t j = 0; j < closeCoord->getSize(); j++ )
>>         {
>>             // compute distance between two tested points
>>             double dist = coord->getAt(i).distance( closeCoord->getAt(j) );
>>
>>             if( (0 < dist) && (dist < minDist) )
>>             {
>>                 minDist = dist;
>>                 indMin = j;
>>                 isMin = true;
>>             }
>>
>>         }
>>
>>         // set new coordinate to the closest point if there is some
>>         if ( isMin )
>>         {
>>             coord->setAt( closeCoord->getAt(indMin), i );
>>             changed = true;
>>         }
>>
>>     }
>>
>>     return coord;
>>
>> }
>>
>> } //namespace geoc
>> } //namespace edit
>>
>>
>> --------------------------
>> function using code above
>> --------------------------
>>
>> void VertexSnapper::snapVertices(Geometry *geom, CoordinateSequence *closeCoord)
>> {
>>
>>     // create and set geometry editor
>>     VertexGeometryEditorOperation myOp;
>>     myOp.setCloseCoordSeq( closeCoord );
>>     myOp.setTolDistance( tolDistance );
>>
>>     GeometryEditor geomEdit( geom->getFactory() );
>>
>>     // set geometry to edited one
>>     geom=( geomEdit.edit( geom , &myOp ) );
>>
>>
>> }
>>
>>
>> Thanks for help in advance,
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: main.cpp
Type: text/x-c++src
Size: 1194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130522/ae9df2a2/attachment.cpp>

From strk at keybit.net  Wed May 22 09:36:50 2013
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 22 May 2013 18:36:50 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
	<CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
Message-ID: <20130522163650.GA3906@gnash>

On Wed, May 22, 2013 at 09:58:20AM +0200, Tereza Fiedlerov? wrote:
> Hi,
> 
> I'm sorry for my long reaction time, but I have still the same problem
> and I hope you still can help me. I tried to create a minimal example.
> This example returns both my problems - memory leak because of using
> WKT and also the problem with GeometryEditorOperation as I wrote
> before.
> The input is simple wkt polygon and I just trying to change its
> position. The main.cpp file is attached to this email.

Tereza, the GeometryEditor::edit method is documented [1] to return
a _new_ Geometry, so it's up to you to delete the one you passed to it,
just do that and all leaks are gone.

[1] http://trac.osgeo.org/geos/browser/tags/3.3.8/include/geos/geom/util/GeometryEditor.h#L118

--strk;

From tfiedlerova at gmail.com  Wed May 22 09:59:05 2013
From: tfiedlerova at gmail.com (=?ISO-8859-1?Q?Tereza_Fiedlerov=E1?=)
Date: Wed, 22 May 2013 18:59:05 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <20130522163650.GA3906@gnash>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
	<CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
	<20130522163650.GA3906@gnash>
Message-ID: <CAOE=Tx0jDYBi7vdx81kX2Jf4DXVmOPOi+3nNpNH0BMPNAAetEw@mail.gmail.com>

Hi,

I deleted geosGeom from example and the first leak is gone (thank
you), but the second one concerned wkt [1] doesn't. Do you know how to
solve this one?

Tereza

[1]
==7557== 592 (64 direct, 528 indirect) bytes in 1 blocks are
definitely lost in loss record 11 of 11
==7557==    at 0x4C2C154: operator new(unsigned long) (vg_replace_malloc.c:298)
==7557==    by 0x4ED5CEA:
geos::geom::GeometryFactory::createPolygon(geos::geom::LinearRing*,
std::vector<geos::geom::Geometry*,
std::allocator<geos::geom::Geometry*> >*) const (in
/usr/lib/libgeos-3.3.3.so)
==7557==    by 0x4F09E3E:
geos::io::WKTReader::readPolygonText(geos::io::StringTokenizer*) (in
/usr/lib/libgeos-3.3.3.so)
==7557==    by 0x4F0B053:
geos::io::WKTReader::readGeometryTaggedText(geos::io::StringTokenizer*)
(in /usr/lib/libgeos-3.3.3.so)
==7557==    by 0x4F0B49B: geos::io::WKTReader::read(std::string
const&) (in /usr/lib/libgeos-3.3.3.so)
==7557==    by 0x400EAD: main (in
/host/Users/Tereza/Documents/CVUT-FSv/BP/example/Example)



2013/5/22 Sandro Santilli <strk at keybit.net>:
> On Wed, May 22, 2013 at 09:58:20AM +0200, Tereza Fiedlerov? wrote:
>> Hi,
>>
>> I'm sorry for my long reaction time, but I have still the same problem
>> and I hope you still can help me. I tried to create a minimal example.
>> This example returns both my problems - memory leak because of using
>> WKT and also the problem with GeometryEditorOperation as I wrote
>> before.
>> The input is simple wkt polygon and I just trying to change its
>> position. The main.cpp file is attached to this email.
>
> Tereza, the GeometryEditor::edit method is documented [1] to return
> a _new_ Geometry, so it's up to you to delete the one you passed to it,
> just do that and all leaks are gone.
>
> [1] http://trac.osgeo.org/geos/browser/tags/3.3.8/include/geos/geom/util/GeometryEditor.h#L118
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From strk at keybit.net  Wed May 22 11:16:18 2013
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 22 May 2013 20:16:18 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <CAOE=Tx0jDYBi7vdx81kX2Jf4DXVmOPOi+3nNpNH0BMPNAAetEw@mail.gmail.com>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
	<CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
	<20130522163650.GA3906@gnash>
	<CAOE=Tx0jDYBi7vdx81kX2Jf4DXVmOPOi+3nNpNH0BMPNAAetEw@mail.gmail.com>
Message-ID: <20130522175605.GA25354@gnash>

On Wed, May 22, 2013 at 06:59:05PM +0200, Tereza Fiedlerov? wrote:
> Hi,
> 
> I deleted geosGeom from example and the first leak is gone (thank
> you), but the second one concerned wkt [1] doesn't. Do you know how to
> solve this one?

I get NO leaks reported by Valgrind with this code:
http://strk.keybit.net/tmp/main.cpp

--strk;

From tfiedlerova at gmail.com  Wed May 22 12:23:04 2013
From: tfiedlerova at gmail.com (=?ISO-8859-1?Q?Tereza_Fiedlerov=E1?=)
Date: Wed, 22 May 2013 21:23:04 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <20130522175605.GA25354@gnash>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
	<CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
	<20130522163650.GA3906@gnash>
	<CAOE=Tx0jDYBi7vdx81kX2Jf4DXVmOPOi+3nNpNH0BMPNAAetEw@mail.gmail.com>
	<20130522175605.GA25354@gnash>
Message-ID: <CAOE=Tx1OhJDhzpaDQ_a9oyo9TUMCn7mEVJ04YQMJFJvwucKYUw@mail.gmail.com>

> I get NO leaks reported by Valgrind with this code:
> http://strk.keybit.net/tmp/main.cpp
>
> --strk;


I cannot open your link (403 Forbidden), but with my code posted
before just with line delete geosGeom in the end of main.cpp, I still
get that one leak. Could it be caused by my GEOS version? I'm using
Geos 3.3.3?

Tereza

From strk at keybit.net  Wed May 22 12:44:01 2013
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 22 May 2013 21:44:01 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <CAOE=Tx1OhJDhzpaDQ_a9oyo9TUMCn7mEVJ04YQMJFJvwucKYUw@mail.gmail.com>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
	<CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
	<20130522163650.GA3906@gnash>
	<CAOE=Tx0jDYBi7vdx81kX2Jf4DXVmOPOi+3nNpNH0BMPNAAetEw@mail.gmail.com>
	<20130522175605.GA25354@gnash>
	<CAOE=Tx1OhJDhzpaDQ_a9oyo9TUMCn7mEVJ04YQMJFJvwucKYUw@mail.gmail.com>
Message-ID: <20130522194401.GB25354@gnash>

On Wed, May 22, 2013 at 09:23:04PM +0200, Tereza Fiedlerov? wrote:
> > I get NO leaks reported by Valgrind with this code:
> > http://strk.keybit.net/tmp/main.cpp
> >
> > --strk;
> 
> I cannot open your link (403 Forbidden), but with my code posted
> before just with line delete geosGeom in the end of main.cpp, I still
> get that one leak. Could it be caused by my GEOS version? I'm using
> Geos 3.3.3?

Please try again.
You're assigning to geosGeom the return from the function, making
the previous value of geosGeom unreachable, thus leaking.

--strk;

From tfiedlerova at gmail.com  Wed May 22 12:55:59 2013
From: tfiedlerova at gmail.com (=?ISO-8859-1?Q?Tereza_Fiedlerov=E1?=)
Date: Wed, 22 May 2013 21:55:59 +0200
Subject: [geos-devel] using CoordinateOperation::edit cause memory leaks
In-Reply-To: <20130522194401.GB25354@gnash>
References: <CAOE=Tx0XYpGS_37D-VGhZqwS2Zi0vBW4--BE0K6U1x=mCQ2NaQ@mail.gmail.com>
	<20130513101615.GE10928@gnash>
	<CAOE=Tx0PFOZ8eza7mdXYk0Sc00_jDFTFJysAzZnLRPB7gnA+hw@mail.gmail.com>
	<20130516084329.GD14994@gnash>
	<CAOE=Tx3SVOp=XGCL+2ZAKkAZxQ5z7gPkJH15bzGcvf=ab-5S1w@mail.gmail.com>
	<20130522163650.GA3906@gnash>
	<CAOE=Tx0jDYBi7vdx81kX2Jf4DXVmOPOi+3nNpNH0BMPNAAetEw@mail.gmail.com>
	<20130522175605.GA25354@gnash>
	<CAOE=Tx1OhJDhzpaDQ_a9oyo9TUMCn7mEVJ04YQMJFJvwucKYUw@mail.gmail.com>
	<20130522194401.GB25354@gnash>
Message-ID: <CAOE=Tx2_2zvFCK8K26rVJThsnRB2vMUacD3pCiaO2-EKjvEdNQ@mail.gmail.com>

I understand it now. My problem is solved. Thank you for your help and patience.

Tereza


2013/5/22 Sandro Santilli <strk at keybit.net>:
> On Wed, May 22, 2013 at 09:23:04PM +0200, Tereza Fiedlerov? wrote:
>> > I get NO leaks reported by Valgrind with this code:
>> > http://strk.keybit.net/tmp/main.cpp
>> >
>> > --strk;
>>
>> I cannot open your link (403 Forbidden), but with my code posted
>> before just with line delete geosGeom in the end of main.cpp, I still
>> get that one leak. Could it be caused by my GEOS version? I'm using
>> Geos 3.3.3?
>
> Please try again.
> You're assigning to geosGeom the return from the function, making
> the previous value of geosGeom unreachable, thus leaking.
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From woodbri at swoodbridge.com  Thu May 23 07:41:40 2013
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Thu, 23 May 2013 10:41:40 -0400
Subject: [geos-devel] Looking for 3.4 to use the Delauny Triangles
Message-ID: <519E2AA4.4040405@swoodbridge.com>

Hi,

I'm trying to install postgis 2.1beta with support for Delauny triangles 
which says GEOS 3.4 is required. I'm not seeing that on the website

http://trac.osgeo.org/geos/

So I guessed I needed to grab the current nightly snapshot. I got

http://geos.osgeo.org/snapshots/geos-20130522.tar.bz2

Configured it with:
./configure --enable-php --enable-python
  ...
Swig: true
Python bindings: true
Ruby bindings: false
PHP bindings: true
  PHP: /usr/bin/php
  PHPUNIT:
configure: WARNING: PHP Unit testing disabled (missing PHP or PHPUNIT)
woodbri at maps:/u/software/geos-20130522$ make
sh ./tools/svn_repo_revision.sh
sh: Can't open ./tools/svn_repo_revision.sh
make: *** [geos_svn_revision.h] Error 127
woodbri at maps:/u/software/geos-20130522$ ls tools/
CMakeLists.txt  geos-config  geos-config.in  Makefile  Makefile.am 
Makefile.in
woodbri at maps:/u/software/geos-20130522$ find . -name svn_repo_revision.sh
woodbri at maps:/u/software/geos-20130522$

Is there a better nightly build that works?

-Steve

From olivier.courtin at oslandia.com  Thu May 23 07:50:08 2013
From: olivier.courtin at oslandia.com (Olivier Courtin)
Date: Thu, 23 May 2013 16:50:08 +0200
Subject: [geos-devel] Looking for 3.4 to use the Delauny Triangles
In-Reply-To: <519E2AA4.4040405@swoodbridge.com>
References: <519E2AA4.4040405@swoodbridge.com>
Message-ID: <90C1A32F-01D4-4817-9D36-A254FA5935BD@oslandia.com>

On May 23, 2013, at 4:41 PM, Stephen Woodbridge wrote:

Hi Stephen,

> sh: Can't open ./tools/svn_repo_revision.sh

You need to create it manually before launching make step,
Cf: http://trac.osgeo.org/geos/wiki/BuildingOnUnixWithCMake


Dunno, really why this step was added...

O.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130523/4445b4da/attachment.html>

From woodbri at swoodbridge.com  Thu May 23 08:06:37 2013
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Thu, 23 May 2013 11:06:37 -0400
Subject: [geos-devel] Looking for 3.4 to use the Delauny Triangles
In-Reply-To: <90C1A32F-01D4-4817-9D36-A254FA5935BD@oslandia.com>
References: <519E2AA4.4040405@swoodbridge.com>
	<90C1A32F-01D4-4817-9D36-A254FA5935BD@oslandia.com>
Message-ID: <519E307D.8040905@swoodbridge.com>

On 5/23/2013 10:50 AM, Olivier Courtin wrote:
> On May 23, 2013, at 4:41 PM, Stephen Woodbridge wrote:
>
> Hi Stephen,
>
>> sh: Can't open ./tools/svn_repo_revision.sh
>
> You need to create it manually before launching make step,
> Cf: http://trac.osgeo.org/geos/wiki/BuildingOnUnixWithCMake
>
>
> Dunno, really why this step was added...

Thanks for the pointer Olivier.

Well, it defeats the whole usefulness of generating nightly snapshots. 
The script that generates the snapshots should be updated to create 
geos_svn_revision.h or a dummy svn_repo_revision.sh with the version of 
the snapshot hard coded in it before creating the tarball. Since the 
snapshot is NOT an svn working copy there is NO way to get the svn info 
version number to accurately create the file. Which means you have to 
checkout the respository to be able to build it.

Thanks,
   -Steve

From strk at keybit.net  Thu May 23 08:20:29 2013
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 23 May 2013 17:20:29 +0200
Subject: [geos-devel] Looking for 3.4 to use the Delauny Triangles
In-Reply-To: <519E2AA4.4040405@swoodbridge.com>
References: <519E2AA4.4040405@swoodbridge.com>
Message-ID: <20130523152029.GB28043@gnash>

On Thu, May 23, 2013 at 10:41:40AM -0400, Stephen Woodbridge wrote:

> http://geos.osgeo.org/snapshots/geos-20130522.tar.bz2
...
> woodbri at maps:/u/software/geos-20130522$ make
> sh ./tools/svn_repo_revision.sh
> sh: Can't open ./tools/svn_repo_revision.sh

My fault, forgot to put in EXTRA_DIST.
Should be in next snapshot (right after I push it)

--strk;

From strk at keybit.net  Mon May 27 23:45:31 2013
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 28 May 2013 08:45:31 +0200
Subject: [geos-devel] Voroni project accepted for GSoC '13
Message-ID: <20130528064531.GC9352@gnash>

FYI: Vishal's GSoC proposal for adding Voronoi diagrams to GEOS
has been accepted.

https://google-melange.appspot.com/gsoc/proposal/review/google/gsoc2013/vishal_tiwari/13001

Congrats, Vishal !
Looking forward to your progress reports on the list :)

--strk;

From strk at keybit.net  Tue May 28 04:08:35 2013
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 28 May 2013 13:08:35 +0200
Subject: [geos-devel] QGIS vs. GEOS geometry validation
Message-ID: <20130528110835.GA24931@gnash>

I'm playing with editing a ~50k vertices polygon with qgis and found
that the QGIS geometry validation takes a lot lot more than the GEOS
one (Settings -> Options -> Digitizing -> Validate geometries).

Is there a reason why QGIS is the default, when GEOS is available ?

--strk;

From strk at keybit.net  Tue May 28 04:59:52 2013
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 28 May 2013 13:59:52 +0200
Subject: [geos-devel] QGIS vs. GEOS geometry validation
In-Reply-To: <20130528110835.GA24931@gnash>
References: <20130528110835.GA24931@gnash>
Message-ID: <20130528115952.GC24931@gnash>

On Tue, May 28, 2013 at 01:08:35PM +0200, Sandro Santilli wrote:
> I'm playing with editing a ~50k vertices polygon with qgis and found
> that the QGIS geometry validation takes a lot lot more than the GEOS
> one (Settings -> Options -> Digitizing -> Validate geometries).

Oops, this message was clearly NOT for this list.

Anyway you may be interested in knowing that GEOS is faster
than QGIS at detecting geometry validity :)

If you're interested in followups:
http://lists.osgeo.org/pipermail/qgis-developer/2013-May/026371.html

--strk;

From hi.vishal123 at gmail.com  Tue May 28 09:49:58 2013
From: hi.vishal123 at gmail.com (vishal tiwari)
Date: Tue, 28 May 2013 22:19:58 +0530
Subject: [geos-devel] Voroni project accepted for GSoC '13
In-Reply-To: <20130528064531.GC9352@gnash>
References: <20130528064531.GC9352@gnash>
Message-ID: <CAJW9wotQCyhy3VPLPPiUH1btN6MurBaDGtOPzFLBR1sw=WAbGw@mail.gmail.com>

Thanks strk,

I am very excited and looking forward to work on this project, during this
years GSoC. :)


On 28 May 2013 12:15, Sandro Santilli <strk at keybit.net> wrote:

> FYI: Vishal's GSoC proposal for adding Voronoi diagrams to GEOS
> has been accepted.
>
>
> https://google-melange.appspot.com/gsoc/proposal/review/google/gsoc2013/vishal_tiwari/13001
>
> Congrats, Vishal !
> Looking forward to your progress reports on the list :)
>
> --strk;
>



-- 
Vishal Tiwari
Undergraduate
Computer Science and Engineering
Lab for Spatial Informatics
IIIT-Hyderabad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20130528/e6fd3557/attachment.html>

From geos-trac at osgeo.org  Thu May 30 13:33:16 2013
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 30 May 2013 20:33:16 -0000
Subject: [geos-devel] [GEOS] #501: Snap operation: wrong snapping
In-Reply-To: <049.647d33647a081b59a67c0f1853a22e42@osgeo.org>
References: <049.647d33647a081b59a67c0f1853a22e42@osgeo.org>
Message-ID: <058.f2565354ed51124dc20a9840daa67871@osgeo.org>

#501: Snap operation: wrong snapping
------------------------+---------------------------------------------------
 Reporter:  aperi2007   |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.3.9                     
Component:  Default     |      Version:  svn-trunk                 
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:  jtsfail     |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => fixed
  * milestone:  GEOS Future => 3.3.9


Comment:

 Closed by r3800 in trunk and r3801 in 3.3 branch

 Martin Davis: take a look, you may like this

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/501#comment:10>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

