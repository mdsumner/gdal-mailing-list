From geos-trac at osgeo.org  Fri Jun  7 06:04:47 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 07 Jun 2019 13:04:47 -0000
Subject: [geos-devel] [GEOS] #955: Reducing number of configurations in
	appveyor.yml
In-Reply-To: <045.b086b2ddc8db2cee02bef7fa60005ad2@osgeo.org>
References: <045.b086b2ddc8db2cee02bef7fa60005ad2@osgeo.org>
Message-ID: <060.2551a7fda6896f6abee904743697712a@osgeo.org>

#955: Reducing number of configurations in appveyor.yml
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by mloskot):

 For future reference, "Clean up and update AppVeyor configuration",
 dropped
 https://github.com/libgeos/geos/pull/182

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/955#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jun 10 05:46:42 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 10 Jun 2019 12:46:42 -0000
Subject: [geos-devel] [GEOS] #929: Memory sanitizer warnings in
	GeometryFactory.cpp
In-Reply-To: <048.c8e56bc538f1ff1fcbe56b9a28ce4912@osgeo.org>
References: <048.c8e56bc538f1ff1fcbe56b9a28ce4912@osgeo.org>
Message-ID: <063.77303770cf4a6c0ac73c9947e544fdcf@osgeo.org>

#929: Memory sanitizer warnings in GeometryFactory.cpp
------------------------+---------------------------
 Reporter:  Algunenano  |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.5.3
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Algunenano):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 This was merged into master

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/929#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jun 10 06:06:51 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 10 Jun 2019 13:06:51 -0000
Subject: [geos-devel] [GEOS] #973: Polygon clipping and validation over
 integer coordinates
Message-ID: <048.3bf392d768882dadb8c69a26ad9ba8ef@osgeo.org>

#973: Polygon clipping and validation over integer coordinates
-----------------------------+--------------------------
 Reporter:  Algunenano       |      Owner:  geos-devel@…
     Type:  enhancement      |     Status:  new
 Priority:  minor            |  Milestone:  GEOS Fund Me
Component:  Default          |    Version:  master
 Severity:  Feature Request  |   Keywords:
-----------------------------+--------------------------
 Comes from https://trac.osgeo.org/geos/ticket/959

 To generate MVT geometries, Postgis transforms the input geometries into
 the MVT coordinate system (coordinates aren't absolute, but relative to
 the tile, the y axis is reverted with 0,0 being the top left, and only
 integer values can be used), clips them to the tile if required and
 transforms them to have a valid output.

 Doing this using GEOS has proven to be extremely hard for several reasons:
 - `GEOSClipByRect` is fast, but only guarantees a valid output on valid
 input. `GEOSIntersection` is order of magnitude slower and also requires
 valid input. Since making a polygon valid is an even slower operation,
 there are several hacks trying to detect the issue and work around the
 limits of `GEOSClipByRect`.

 - Both `GEOSClipByRect` and `GEOSMakeValid` (which Postgis currently
 doesn't use, but the issue is the same) can add new points that require
 double precision (not integers), which then require a new operation and
 rechecking validation. You can guess that the performance in those cases
 is terrible. You can even get a polygon that is valid, becomes invalid
 when using int precision, becomes valid when calling MakeValid but using
 doubles, then invalid with ints and you can keep going ad eternum.


 Currently, I've introduced an extra library in Postgis, Wagyu, to deal
 with this since it provides fast clipping and, more importantly, fast
 polygon validation with int coordinates; but ideally this could be
 provided by GEOS to reduce the dependencies.

 I've talked a couple of times with @mdavis about this, but I wanted to
 fill the ticket and have it documented somewhere.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/973>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jun 10 06:52:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 10 Jun 2019 13:52:27 -0000
Subject: [geos-devel] [GEOS] #973: Polygon clipping and validation over
 integer coordinates
In-Reply-To: <048.3bf392d768882dadb8c69a26ad9ba8ef@osgeo.org>
References: <048.3bf392d768882dadb8c69a26ad9ba8ef@osgeo.org>
Message-ID: <063.7a86ac69215be0dcf31ca66bddd925e1@osgeo.org>

#973: Polygon clipping and validation over integer coordinates
-----------------------------+---------------------------
 Reporter:  Algunenano       |       Owner:  geos-devel@…
     Type:  enhancement      |      Status:  new
 Priority:  minor            |   Milestone:  GEOS Fund Me
Component:  Default          |     Version:  master
 Severity:  Feature Request  |  Resolution:
 Keywords:                   |
-----------------------------+---------------------------

Comment (by dbaston):

 Thanks, Raul. Do you need to properly handle polygons that are invalid
 before the coordinate transformation, or only those that are made invalid
 by the transformation?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/973#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jun 10 08:40:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 10 Jun 2019 15:40:27 -0000
Subject: [geos-devel] [GEOS] #973: Polygon clipping and validation over
 integer coordinates
In-Reply-To: <048.3bf392d768882dadb8c69a26ad9ba8ef@osgeo.org>
References: <048.3bf392d768882dadb8c69a26ad9ba8ef@osgeo.org>
Message-ID: <063.038d24a8d992be898d34ec0f693df93a@osgeo.org>

#973: Polygon clipping and validation over integer coordinates
-----------------------------+---------------------------
 Reporter:  Algunenano       |       Owner:  geos-devel@…
     Type:  enhancement      |      Status:  new
 Priority:  minor            |   Milestone:  GEOS Fund Me
Component:  Default          |     Version:  master
 Severity:  Feature Request  |  Resolution:
 Keywords:                   |
-----------------------------+---------------------------

Comment (by Algunenano):

 I need to handle also the ones that are invalid beforehand; this is both
 because invalid input is (currently) accepted and because we call
 `lwgeom_simplify_in_place` (to reduce the number of points) and
 `lwgeom_affine` (to transform to int), and both functions can return
 invalid polygons.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/973#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at kbt.io  Tue Jun 11 23:47:14 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 12 Jun 2019 08:47:14 +0200
Subject: [geos-devel] pip-performance merge bug
Message-ID: <20190612064714.GA6607@liz>

On Tue, Jun 11, 2019 at 04:52:28PM -0700, git at osgeo.org wrote:

[...]

> commit f378ac5348002ce611a360eaf59a8bb281ecfa7b
> Author: Daniel Baston <dbaston at gmail.com>
> Date:   Mon Jun 10 15:09:56 2019 -0400
> 
>     Avoid relying on numeric ordering of Location
> 

[...]

>  
> -        max_loc = std::max(max_loc, loc);
> -        if (max_loc == geom::Location::EXTERIOR) {
> -            found = true;
> +        if (outermost_loc == Location::UNDEF || outermost_loc == Location::INTERIOR) {
> +            outermost_loc = loc;
> +        } else if (Location::EXTERIOR) {
> +            outermost_loc = loc;
> +            done = true;
>          }
>      }

The final "else if" condition will always be true (or false, depending
on the value of Location::EXTERIOR constant). I'm concerned that no
test failed with that bug in place, so if there's anything you can do
to trigger such bug it'd be great to add a test for it.

NOTE: my compiler (gcc 7.3.0) did catch it:

  .../src/geom/prep/PreparedPolygonPredicate.cpp:101:38: warning: enum constant in boolean context [-Wint-in-bool-context]
          } else if (Location::EXTERIOR) {
                     ^

--strk;


From geos-trac at osgeo.org  Thu Jun 13 18:31:19 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 14 Jun 2019 01:31:19 -0000
Subject: [geos-devel] [GEOS] #850: Segfault in
 geos::algorithm::ConvexHull::preSort with extreme outlier
In-Reply-To: <046.c1ce43c98a39655c523014d2e576713f@osgeo.org>
References: <046.c1ce43c98a39655c523014d2e576713f@osgeo.org>
Message-ID: <061.9a531ff3e0bff8d2d9bbe319349ac0b1@osgeo.org>

#850: Segfault in geos::algorithm::ConvexHull::preSort with extreme outlier
------------------------+---------------------------
 Reporter:  sgillies    |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 This is apparently fixed with the introduction of the robust orientation
 index. Added a test case in [changeset:36d1c696/git]. Not sure if it's
 feasible to backport anything to 3.6/3.7.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/850#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jun 13 18:37:06 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 14 Jun 2019 01:37:06 -0000
Subject: [geos-devel] [GEOS] #956: Speed-up Travis-CI builds by using
	ccache
In-Reply-To: <045.aec45f25644f1944c512dc4d18abf4f5@osgeo.org>
References: <045.aec45f25644f1944c512dc4d18abf4f5@osgeo.org>
Message-ID: <060.0ab9c9f1062cccc7b926512a0ce88eea@osgeo.org>

#956: Speed-up Travis-CI builds by using ccache
-------------------------+---------------------------
 Reporter:  rouault      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  closed
 Priority:  major        |   Milestone:
Component:  Default      |     Version:
 Severity:  Unassigned   |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Committed as [changeset:219383fafd/git]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/956#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jun 13 18:53:35 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 14 Jun 2019 01:53:35 -0000
Subject: [geos-devel] [GEOS] #918: memory leak in
	GeometryCollection::getCoordinate()
In-Reply-To: <048.4d729d8e34b24bbfabf09b0eeac7acbe@osgeo.org>
References: <048.4d729d8e34b24bbfabf09b0eeac7acbe@osgeo.org>
Message-ID: <063.07e328cff626d883fe09fd2f19c2c578@osgeo.org>

#918: memory leak in GeometryCollection::getCoordinate()
------------------------+---------------------------
 Reporter:  basiliscos  |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"d1556af8cddca70ef7872c9b157907cdf07a1f8a/git" d1556af/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="d1556af8cddca70ef7872c9b157907cdf07a1f8a"
 Fix memory leak on GeometryCollection::getCoordinate

 Add tests to ensure all Geometry types have the same behavior when
 calling getCoordinate on an empty geometry.

 Fixes #918
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/918#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Mon Jun 24 11:55:39 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Mon, 24 Jun 2019 11:55:39 -0700
Subject: [geos-devel] Performance improvement in Prepared predicates?
Message-ID: <CAK2ens0kLgUDeQwi5+s7Auenu=peZSJ2H76M7pAx9QWDPBmj6Q@mail.gmail.com>

There may be a further performance improvement available for
PreparedGeometry predicates, for situations where a test geometry is wholly
inside or outside the prepared target.  This situation would seem to be
relatively common - an example would be checking small parcel polygons
against much larger jurisdiction boundaries.

The optimization is in the segment-intersection phase of the test chain.
It's possible to first test the *envelope* of the test (B) geometry against
the target (A) segment index, to see if the envelope intersects any
segment.  If no segment-envelope intersection is found, this provides a
fast negative result for intersects, and a fast positive result for
contains and covers.

I'll put this in the queue to prototype and metric in JTS.  I'm putting it
out here in case someone wants to try this out in GEOS/PostGIS to test it
against some real-world workloads.

My current thinking for implementation is to enhance
FastSegmentSetIntersectionFinder to provide a boolean intersects(Envelope)
method.  In turn this requires extensions to MonotoneChainOverlapAction and
possibly some other classes.

Feedback welcome.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190624/4ab44e49/attachment.html>

