From pramsey at refractions.net  Mon Jun  7 13:09:42 2004
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] Re: [postgis-users] Win32 PostgreSQL 7.5/PostGIS
	snapshot update
In-Reply-To: <8F4A22E017460A458DB7BBAB65CA6AE50265E4@openmanage>
References: <8F4A22E017460A458DB7BBAB65CA6AE50265E4@openmanage>
Message-ID: <40C4A156.3000803@refractions.net>

Hey Mark,
Do you have a test case for the memory leak in GEOS-CVS? We are trying 
to stomp those all down so we can do a numbered release in the nearish term.
Thanks,
Paul

Mark Cave-Ayland wrote:

> Hi guys,
> 
> Just to let you know I've updated my Win32 snapshot again at
> http://www.webbased.co.uk/mca/pgsql75win.zip. The CVS snapshot of GEOS
> that I used in the original build was found to have some bugs in it
> which could cause out of memory errors and/or the backend to die when
> using certain GEOS functions. This version of the snapshot is compiled
> against the proper GEOS 1.0 release and now things appear to work as
> they should. If you are not using any GEOS function then this will not
> affect you! Note I have not upgraded the PostgreSQL snapshot so you can
> copy your existing data/ directory into the new distribution and
> continue working as before.
> 
> 
> Many thanks to David Techer for his help and patience solving this
> problem.
> 
> Mark.


-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_

From warmerdam at pobox.com  Mon Jun 14 14:32:33 2004
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] GEOS Questions
Message-ID: <40CDEF41.2070907@pobox.com>

Folks,

Re-invigorated after the MUM/OSGIS meeting last week, I have decided to dig
somewhat deeper into using GEOS for geometry operations in OGR.  After a first
quick inspection a few questions arise:

1) Are there some sample applications I am missing demonstrating use of geos?

2) Is there a well known binary reader and writer analygous to the WKTReader
    and WKTWriter already incorporated?

3) Does geos support 2.5D geometries?

4) How do I do the wrapping of my own geometry classes with GEOS Geometry
    objects?

5) Has there been any thought to providing Python or other SWIG based scripting
    languages access to GEOS?  Would you be interested in my doing so?

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent


From chodgson at refractions.net  Mon Jun 14 14:44:54 2004
From: chodgson at refractions.net (Chris Hodgson)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] GEOS Questions
References: <40CDEF41.2070907@pobox.com>
Message-ID: <004201c4523f$af3d8b80$4132a8c0@chihuahua>

Hi Frank,

I'm not actually working on the GEOS development, but I'll try to give you
some quick answers to get you started... the best answers will probably come
from strk but he's probably sleeping right now ;-)

> 1) Are there some sample applications I am missing demonstrating use of
geos?
PostGIS? not much else.. is there still a simple demo app in the source tree
somewhere?

> 2) Is there a well known binary reader and writer analygous to the
WKTReader
>     and WKTWriter already incorporated?
I don't think there is, I believe these were implemented primarily to allow
the JTS test cases to be run.

> 4) How do I do the wrapping of my own geometry classes with GEOS Geometry
>     objects?
You might want to look at the source for PostGIS for an idea, but I'm sure
someone else on this list can offer more help.

> 5) Has there been any thought to providing Python or other SWIG based
scripting
>     languages access to GEOS?  Would you be interested in my doing so?
No one has mentioned this before on this list... however it was clear at the
MUM that Howard Butler was interested in doing this for python - I don't
know if he's on this list yet... but you may want to work with him on it.

Nice to have you on-board!

Chris


From dblasby at refractions.net  Mon Jun 14 15:12:40 2004
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] GEOS Questions
In-Reply-To: <40CDEF41.2070907@pobox.com>
References: <40CDEF41.2070907@pobox.com>
Message-ID: <40CDF8A8.5090301@refractions.net>

Frank Warmerdam wrote:

> 1) Are there some sample applications I am missing demonstrating use of 
> geos?

There aren't many sample applications, but GEOS is very much like JTS. 
If you look at JTS code, you should see how to use GEOS.

There are a few simple programs in the GEOS archive, and you can look at 
postgis.

I dont think there is a WKB reader for it.  If you're interested in 
learning how to do GEOS programming, this is an excellent mini-project!

Look at the GeometryFactory class.  There's examples of how to use it in 
the PostGIS code (NOTE: the postgis code was written before the 
GeometryFactory class was in it current state, so its a bit messy).

You'll be making lists of coordinates, then throwing them at 
constructors inside the GeometryFactory.  There's nothing magic here, so 
once you've done one geometry type, the rest should be easy.

> 2) Is there a well known binary reader and writer analygous to the 
> WKTReader
>    and WKTWriter already incorporated?

see above

> 3) Does geos support 2.5D geometries?

Yes and No.  You can use the "standard" coordinate type (x,y,z), but 
most calculations are done in (x,y).  Most of the time, this does what 
you want.  However, when GEOS has to construct new Coordinates, it 
doesnt really know what to put in for the Z value.  I believe you can 
somehow attach a heiristic to these functions so it can put in a Z value.

This is a bit of deep mojo, but Martin has put the ability in.

You can also use user-defined coordinates - so you can have 
(x,y,m,z,z',z'',g) coordinates if you want.


> 4) How do I do the wrapping of my own geometry classes with GEOS Geometry
>    objects?

I'm not sure if you really want to wrap your classes directly.  You can 
build coordinate sequence that are "backed" by your (non-GEOS) geometry 
to save memory.

> 5) Has there been any thought to providing Python or other SWIG based 
> scripting
>    languages access to GEOS?  Would you be interested in my doing so?


This certainly is possible, and I think it would be rather straight 
forward to do.

dave

From MChapman at sanz.com  Mon Jun 14 15:28:55 2004
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] GEOS Questions
Message-ID: <ED3A48B9840E594890A2BC172D119465FB9647@mailman.san.com>

Frank,

Another way to look at the problem may be to integrate OGR into GEOS.
That would seem like an easier integration strategy to me.  That way,
you could just build some classes that would use OGR to open a set of
geometries into GEOS.  Otherwise, I think there will be a lot of overlap
between object models.  Plus, that would allow PostGIS to use the
existing GEOS lib with the addition of a new persistence layer provided
by OGR.

Just a thought.

Martin Chapman

-----Original Message-----
From: Frank Warmerdam [mailto:warmerdam@pobox.com] 
Sent: Monday, June 14, 2004 12:33 PM
To: GEOS
Subject: [geos-devel] GEOS Questions


Folks,

Re-invigorated after the MUM/OSGIS meeting last week, I have decided to
dig somewhat deeper into using GEOS for geometry operations in OGR.
After a first quick inspection a few questions arise:

1) Are there some sample applications I am missing demonstrating use of
geos?

2) Is there a well known binary reader and writer analygous to the
WKTReader
    and WKTWriter already incorporated?

3) Does geos support 2.5D geometries?

4) How do I do the wrapping of my own geometry classes with GEOS
Geometry
    objects?

5) Has there been any thought to providing Python or other SWIG based
scripting
    languages access to GEOS?  Would you be interested in my doing so?

Best regards,
-- 
---------------------------------------+--------------------------------
---------------------------------------+------
I set the clouds in motion - turn up   | Frank Warmerdam,
warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From Horst.Duester at bd.so.ch  Tue Jun 15 03:57:46 2004
From: Horst.Duester at bd.so.ch (=?ISO-8859-1?Q?D=FCster_Horst?=)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] Compiling Error GEOS-1.4
Message-ID: <5B025B1F39D6D4119F5700508BEEEC66F94AC6@SRSOFAIOI4546>

I try to compile GEOS-1.4 but without success. After download
geos-cvs.tar.bz2 and ./configure

make results in the following crash:

if /bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I.
-I../../source/headers -I../../source/headers -I../../so
urce/headers -DGEOS_VERSION=""1.4""    -g -O2 -MT planarDirectedEdge.lo -MD
-MP -MF ".deps/planarDirectedEdge.Tpo" \
  -c -o planarDirectedEdge.lo `test -f
'../planargraph/planarDirectedEdge.cpp' || echo
'./'`../planargraph/planarDirectedEdg
e.cpp; \
then mv -f ".deps/planarDirectedEdge.Tpo" ".deps/planarDirectedEdge.Plo"; \
else rm -f ".deps/planarDirectedEdge.Tpo"; exit 1; \
fi
 g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers -I../../source/headers
-I../../source/headers -DGEOS_VERSION=1.4 -g -O2
-MT planarDirectedEdge.lo -MD -MP -MF .deps/planarDirectedEdge.Tpo -c
../planargraph/planarDirectedEdge.cpp  -fPIC -DPIC -o
.libs/planarDirectedEdge.o
../planargraph/planarDirectedEdge.cpp: In method `string
geos::planarDirectedEdge::print ()':
../planargraph/planarDirectedEdge.cpp:198: `sprintf' undeclared (first use
this function)
../planargraph/planarDirectedEdge.cpp:198: (Each undeclared identifier is
reported only once for each
function it appears in.)
make[2]: *** [planarDirectedEdge.lo] Error 1
make[2]: leaving directory ?/usr/local/src/sogis/geos-1.4/source/geom?
make[1]: *** [all-recursive] Error 1
make[1]: leaving directory ?/usr/local/src/sogis/geos-1.4/source?
make: *** [all-recursive] Error 1

My system:
gcc version 2.96 20000731 
Red Hat Linux 7.1 2.96-98


I would be appreciated about any hint.

Best regards 
Horst

From strk at keybit.net  Tue Jun 15 03:32:58 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] Compiling Error GEOS-1.4
In-Reply-To: <5B025B1F39D6D4119F5700508BEEEC66F94AC6@SRSOFAIOI4546>
References: <5B025B1F39D6D4119F5700508BEEEC66F94AC6@SRSOFAIOI4546>
Message-ID: <20040615073258.GA13414@freek.keybit.net>

On Tue, Jun 15, 2004 at 08:57:46AM +0100, D?ster Horst wrote:
> I try to compile GEOS-1.4 but without success. After download
> geos-cvs.tar.bz2 and ./configure
> 
> make results in the following crash:
> 
> if /bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I.
> -I../../source/headers -I../../source/headers -I../../so
> urce/headers -DGEOS_VERSION=""1.4""    -g -O2 -MT planarDirectedEdge.lo -MD
> -MP -MF ".deps/planarDirectedEdge.Tpo" \
>   -c -o planarDirectedEdge.lo `test -f
> '../planargraph/planarDirectedEdge.cpp' || echo
> './'`../planargraph/planarDirectedEdg
> e.cpp; \
> then mv -f ".deps/planarDirectedEdge.Tpo" ".deps/planarDirectedEdge.Plo"; \
> else rm -f ".deps/planarDirectedEdge.Tpo"; exit 1; \
> fi
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers -I../../source/headers
> -I../../source/headers -DGEOS_VERSION=1.4 -g -O2
> -MT planarDirectedEdge.lo -MD -MP -MF .deps/planarDirectedEdge.Tpo -c
> ../planargraph/planarDirectedEdge.cpp  -fPIC -DPIC -o
> .libs/planarDirectedEdge.o
> ../planargraph/planarDirectedEdge.cpp: In method `string
> geos::planarDirectedEdge::print ()':
> ../planargraph/planarDirectedEdge.cpp:198: `sprintf' undeclared (first use
> this function)
> ../planargraph/planarDirectedEdge.cpp:198: (Each undeclared identifier is
> reported only once for each
> function it appears in.)
> make[2]: *** [planarDirectedEdge.lo] Error 1
> make[2]: leaving directory ?/usr/local/src/sogis/geos-1.4/source/geom?
> make[1]: *** [all-recursive] Error 1
> make[1]: leaving directory ?/usr/local/src/sogis/geos-1.4/source?
> make: *** [all-recursive] Error 1
> 
> My system:
> gcc version 2.96 20000731 
> Red Hat Linux 7.1 2.96-98
> 
> 
> I would be appreciated about any hint.
> 
> Best regards 
> Horst

Horst, add this at line 30:
#include <stdio.h>

Let me know if you still have problems.

--strk;

> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Jun 15 03:57:00 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] GEOS Questions
In-Reply-To: <40CDEF41.2070907@pobox.com>
References: <40CDEF41.2070907@pobox.com>
Message-ID: <20040615075700.GB13455@freek.keybit.net>

On Mon, Jun 14, 2004 at 02:32:33PM -0400, Frank Warmerdam wrote:
> Folks,
> 
> Re-invigorated after the MUM/OSGIS meeting last week, I have decided to dig
> somewhat deeper into using GEOS for geometry operations in OGR.  After a 
> first
> quick inspection a few questions arise:
> 
> 1) Are there some sample applications I am missing demonstrating use of 
> geos?

doc/example.cpp contains code and comments about the interface.
It is not complete, and shows a few inconsistencies with parameters
ownership semantics. Maybe you'll want to help fixing them before
interfacing ogr or python...

(many cuts here... people have answered you already)

--strk;


From strk at keybit.net  Tue Jun 15 04:39:21 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] Interface consistency
Message-ID: <20040615083921.GC13455@freek.keybit.net>

Before releasing next GEOS I'd like to fix interface inconsistencies.
Namely some geometry constructors take ownership over passed
components:

	o Polygon::Polygon(LinearRing *shell, vector<Geoemtry *> *holes)
		will not copy shell and holes, and destroy it at
		polygon destruction time.

	o GeometryCollection::GeometryCollection(const vector<Geometry *>*geoms)
		will copy vector, but not geoms, which it will destroy
		at GeometryCollection destruction time.

	o MultiGEOM::MultiGEOM(const vector<GEOM *>*geoms)
		see GeoemtryCollection constructor

Other geometry constructors all copy their arguments. I think this needs
to be fixed to "all-constructors-copy-arguments". This will break existing
applications, but if we make the change now I don't think there will be
so much applications involved.

Comments ?

--strk;


From warmerdam at pobox.com  Tue Jun 15 10:15:31 2004
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:27 2007
Subject: [geos-devel] Interface consistency
In-Reply-To: <20040615083921.GC13455@freek.keybit.net>
References: <20040615083921.GC13455@freek.keybit.net>
Message-ID: <40CF0483.3030206@pobox.com>

strk wrote:
> Before releasing next GEOS I'd like to fix interface inconsistencies.
> Namely some geometry constructors take ownership over passed
> components:
> 
> 	o Polygon::Polygon(LinearRing *shell, vector<Geoemtry *> *holes)
> 		will not copy shell and holes, and destroy it at
> 		polygon destruction time.
> 
> 	o GeometryCollection::GeometryCollection(const vector<Geometry *>*geoms)
> 		will copy vector, but not geoms, which it will destroy
> 		at GeometryCollection destruction time.
> 
> 	o MultiGEOM::MultiGEOM(const vector<GEOM *>*geoms)
> 		see GeoemtryCollection constructor
> 
> Other geometry constructors all copy their arguments. I think this needs
> to be fixed to "all-constructors-copy-arguments". This will break existing
> applications, but if we make the change now I don't think there will be
> so much applications involved.

Strk,

I ran up against a similar issue in GDAL and ended up having two forms of
some of the "attach" methods.  For instance, I have an addRing() method on
the OGRPolygon as well as an addRingDirectly().  The "directly" method takes
ownership of the passed geometry and can save alot of clone/delete overhead
in many common situations.

I gather that the only way to attach the subgeometries to a GEOS geometry
is during the constructor, is that right?  That is, the geometries are
essentially immutable after creation?   This makes it harder to have explicit
means to create attach the geometry with different rules via different named
methods.

I would suggest adding a "bool takeOwnership" argument to the constructors
which is defaulted to false. This allows code that wants to avoid the
clone/delete overhead to explicitly control ownership but returns the default
to a consistent approach.

I would add that behavioural changes like this are an awful source of bugs.
All code written against GEOS so far will need careful review to see if this
behavioural change affects them.  The sooner a change such as this is made,
the better.

PS. My integration of GEOS into OGR is going very well.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent


From strk at keybit.net  Tue Jun 15 10:26:32 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface consistency
In-Reply-To: <40CF0483.3030206@pobox.com>
References: <20040615083921.GC13455@freek.keybit.net>
	<40CF0483.3030206@pobox.com>
Message-ID: <20040615142632.GA21380@freek.keybit.net>

On Tue, Jun 15, 2004 at 10:15:31AM -0400, Frank Warmerdam wrote:
> strk wrote:
> >Before releasing next GEOS I'd like to fix interface inconsistencies.
> >Namely some geometry constructors take ownership over passed
> >components:
> >
> >	o Polygon::Polygon(LinearRing *shell, vector<Geoemtry *> *holes)
> >		will not copy shell and holes, and destroy it at
> >		polygon destruction time.
> >
> >	o GeometryCollection::GeometryCollection(const vector<Geometry 
> >	*>*geoms)
> >		will copy vector, but not geoms, which it will destroy
> >		at GeometryCollection destruction time.
> >
> >	o MultiGEOM::MultiGEOM(const vector<GEOM *>*geoms)
> >		see GeoemtryCollection constructor
> >
> >Other geometry constructors all copy their arguments. I think this needs
> >to be fixed to "all-constructors-copy-arguments". This will break existing
> >applications, but if we make the change now I don't think there will be
> >so much applications involved.
> 
> Strk,
> 
> I ran up against a similar issue in GDAL and ended up having two forms of
> some of the "attach" methods.  For instance, I have an addRing() method on
> the OGRPolygon as well as an addRingDirectly().  The "directly" method takes
> ownership of the passed geometry and can save alot of clone/delete overhead
> in many common situations.
> 
> I gather that the only way to attach the subgeometries to a GEOS geometry
> is during the constructor, is that right?  That is, the geometries are
> essentially immutable after creation?   This makes it harder to have 
> explicit
> means to create attach the geometry with different rules via different named
> methods.

There is an apply_rw method by which geometry modification is possible.

> 
> I would suggest adding a "bool takeOwnership" argument to the constructors
> which is defaulted to false. This allows code that wants to avoid the
> clone/delete overhead to explicitly control ownership but returns the 
> default
> to a consistent approach.

This is what I was thinking about, unfortunately this would not be
transparent... 

> 
> I would add that behavioural changes like this are an awful source of bugs.
> All code written against GEOS so far will need careful review to see if this
> behavioural change affects them.  The sooner a change such as this is made,
> the better.

I know... anyway I'm sure this *really* needs to be done.

> 
> PS. My integration of GEOS into OGR is going very well.

Good to know :)

--strk;


From strk at keybit.net  Tue Jun 15 11:04:34 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface consistency
In-Reply-To: <20040615142632.GA21380@freek.keybit.net>
References: <20040615083921.GC13455@freek.keybit.net>
	<40CF0483.3030206@pobox.com>
	<20040615142632.GA21380@freek.keybit.net>
Message-ID: <20040615150434.GB21380@freek.keybit.net>

On Tue, Jun 15, 2004 at 04:26:32PM +0200, strk wrote:
> On Tue, Jun 15, 2004 at 10:15:31AM -0400, Frank Warmerdam wrote:
> > strk wrote:
> > >Before releasing next GEOS I'd like to fix interface inconsistencies.
> > >Namely some geometry constructors take ownership over passed
> > >components:
> > >
> > >	o Polygon::Polygon(LinearRing *shell, vector<Geoemtry *> *holes)
> > >		will not copy shell and holes, and destroy it at
> > >		polygon destruction time.
> > >
> > >	o GeometryCollection::GeometryCollection(const vector<Geometry 
> > >	*>*geoms)
> > >		will copy vector, but not geoms, which it will destroy
> > >		at GeometryCollection destruction time.
> > >
> > >	o MultiGEOM::MultiGEOM(const vector<GEOM *>*geoms)
> > >		see GeoemtryCollection constructor
> > >
> > >Other geometry constructors all copy their arguments. I think this needs
> > >to be fixed to "all-constructors-copy-arguments". This will break existing
> > >applications, but if we make the change now I don't think there will be
> > >so much applications involved.
> > 
> > Strk,
> > 
> > I ran up against a similar issue in GDAL and ended up having two forms of
> > some of the "attach" methods.  For instance, I have an addRing() method on
> > the OGRPolygon as well as an addRingDirectly().  The "directly" method takes
> > ownership of the passed geometry and can save alot of clone/delete overhead
> > in many common situations.
> > 
> > I gather that the only way to attach the subgeometries to a GEOS geometry
> > is during the constructor, is that right?  That is, the geometries are
> > essentially immutable after creation?   This makes it harder to have 
> > explicit
> > means to create attach the geometry with different rules via different named
> > methods.
> 
> There is an apply_rw method by which geometry modification is possible.
> 
> > 
> > I would suggest adding a "bool takeOwnership" argument to the constructors
> > which is defaulted to false. This allows code that wants to avoid the
> > clone/delete overhead to explicitly control ownership but returns the 
> > default
> > to a consistent approach.
> 
> This is what I was thinking about, unfortunately this would not be
> transparent... 

I wanted to add that this would break 'const correctness' of the code,
as it would be impossible to know at compile time whether the given
argument will need threatment as a 'const' or a 'non const'.

--strk;

> 
> > 
> > I would add that behavioural changes like this are an awful source of bugs.
> > All code written against GEOS so far will need careful review to see if this
> > behavioural change affects them.  The sooner a change such as this is made,
> > the better.
> 
> I know... anyway I'm sure this *really* needs to be done.
> 
> > 
> > PS. My integration of GEOS into OGR is going very well.
> 
> Good to know :)
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From tjmitchell at riverside.bc.ca  Tue Jun 15 11:38:50 2004
From: tjmitchell at riverside.bc.ca (Tyler Mitchell)
Date: Fri Nov  2 20:52:28 2007
Subject: Fw: [geos-devel] GEOS Questions
Message-ID: <OF32394B4A.6FB1CCD9-ON88256EB4.0055E4B7-88256EB4.0055F37D@Riverside.bc.ca>

> 1) Are there some sample applications I am missing demonstrating use of 
geos?

I thought there were a set of test scenarios, i.e. to test OGC compliance. 
 Am I wrong?

Tyler

From klaus.foerster at uibk.ac.at  Wed Jun 16 02:40:11 2004
From: klaus.foerster at uibk.ac.at (Klaus Foerster)
Date: Fri Nov  2 20:52:28 2007
Subject: Fw: [geos-devel] GEOS Questions
References: <OF32394B4A.6FB1CCD9-ON88256EB4.0055E4B7-88256EB4.0055F37D@Riverside.bc.ca>
Message-ID: <40CFEB4B.9C4ACB56@uibk.ac.at>

hi,

i've done a simple visual presentation of OGC's "Simple Features for SQL Test Suite"
using postgis, geos (and svg) - you can find it at http://svg.cc/pg/ogc/

greetings from innsbruck

klaus

Tyler Mitchell wrote:
> 
> > 1) Are there some sample applications I am missing demonstrating use of
> geos?
> 
> I thought there were a set of test scenarios, i.e. to test OGC compliance.
>  Am I wrong?
> 
> Tyler
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
         O-.
         /_ )
          | (U
klaus*   /|
        / /
        ~ ~

From strk at keybit.net  Wed Jun 16 09:18:46 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
Message-ID: <20040616131846.GD22637@freek.keybit.net>

I've updated GEOS interface to make all geometry constructors
copy given arguments (vector AND content).

As a side effect:

        o SegmentString constructor also copy given CoordinateList
          and deletes it at destruction time

        o SegmentString::getCoordinates() returns a copy of internal
          CoordinateList

        o new SegmentString::getCoordinatesRO() returns a pointer to
          the internal CoordinateList (no copy involved)

        o GeometryFactory::buildGeometry always returns a newly
          allocated geometry, so that the caller is free to delete
          arguments passed to it.

        o GeometryFactory geometry collection creators
          (createMulti*, createGeometryCollection) copy given
          vector AND content.

Reasoning about clients switched I've found that geos-config was 
broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
instead of actual version). I've fixed that, but I think a version
number (major,minor,patchlevel) should be put in some header for
ease of use. What do you think Frank ?

--strk;

From ferdinando.villa at uvm.edu  Wed Jun 16 09:30:13 2004
From: ferdinando.villa at uvm.edu (Ferdinando Villa)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
In-Reply-To: <20040616131846.GD22637@freek.keybit.net>
References: <20040616131846.GD22637@freek.keybit.net>
Message-ID: <1087392613.4459.11.camel@basil.snr.uvm.edu>

Yes please, add the version info - I think I originally put it at the
very start of configure.in, with a matching AC_SUBST at the end - that
should take care of it for geos-config and should propagate to the
object files through a gcc command line define. Maybe I just thought I
put it there :)

One point about version numbers: the geos.m4 macro file that I added to
the distribution (which defines GEOS_INIT(version) to be used in
configure.in by any automake-based program that wants to check for geos)
depends on having all three version numbers, and will not work correctly
with two. So if we want that to keep working, we should have 1.4.0, not
1.4, or the m4 macro should be made smarter (probably a better idea).

Ciao,
ferdinando

On Wed, 2004-06-16 at 09:18, strk wrote:
> I've updated GEOS interface to make all geometry constructors
> copy given arguments (vector AND content).
> 
> As a side effect:
> 
>         o SegmentString constructor also copy given CoordinateList
>           and deletes it at destruction time
> 
>         o SegmentString::getCoordinates() returns a copy of internal
>           CoordinateList
> 
>         o new SegmentString::getCoordinatesRO() returns a pointer to
>           the internal CoordinateList (no copy involved)
> 
>         o GeometryFactory::buildGeometry always returns a newly
>           allocated geometry, so that the caller is free to delete
>           arguments passed to it.
> 
>         o GeometryFactory geometry collection creators
>           (createMulti*, createGeometryCollection) copy given
>           vector AND content.
> 
> Reasoning about clients switched I've found that geos-config was 
> broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
> instead of actual version). I've fixed that, but I think a version
> number (major,minor,patchlevel) should be put in some header for
> ease of use. What do you think Frank ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-- 


From strk at keybit.net  Wed Jun 16 10:20:59 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
In-Reply-To: <1087392613.4459.11.camel@basil.snr.uvm.edu>
References: <20040616131846.GD22637@freek.keybit.net>
	<1087392613.4459.11.camel@basil.snr.uvm.edu>
Message-ID: <20040616142059.GH22637@freek.keybit.net>

On Wed, Jun 16, 2004 at 09:30:13AM -0400, Ferdinando Villa wrote:
> Yes please, add the version info - I think I originally put it at the
> very start of configure.in, with a matching AC_SUBST at the end - that
> should take care of it for geos-config and should propagate to the
> object files through a gcc command line define. Maybe I just thought I
> put it there :)

No geos headers appear in AC_SUBST.
Do you think geom.h is the right place ?

I think these would be useful to have:
	#define GEOS_MAJOR_VERSION 1
	#define GEOS_MINOR_VERSION 4
	#define GEOS_PATCHLEVEL 0
	#define GEOS_VERSION "1.4.0"
	int geos::geos_major_version();
	int geos::geos_minor_version();
	int geos::geos_patchlevel();
	string geos::geos_version();

Comments ?

BTW, to split version in major/minor/patchlevel configure.in should also
be modified..

> 
> One point about version numbers: the geos.m4 macro file that I added to
> the distribution (which defines GEOS_INIT(version) to be used in
> configure.in by any automake-based program that wants to check for geos)
> depends on having all three version numbers, and will not work correctly
> with two. So if we want that to keep working, we should have 1.4.0, not
> 1.4, or the m4 macro should be made smarter (probably a better idea).

probably a better idea...

--strk;

> 
> Ciao,
> ferdinando
> 
> On Wed, 2004-06-16 at 09:18, strk wrote:
> > I've updated GEOS interface to make all geometry constructors
> > copy given arguments (vector AND content).
> > 
> > As a side effect:
> > 
> >         o SegmentString constructor also copy given CoordinateList
> >           and deletes it at destruction time
> > 
> >         o SegmentString::getCoordinates() returns a copy of internal
> >           CoordinateList
> > 
> >         o new SegmentString::getCoordinatesRO() returns a pointer to
> >           the internal CoordinateList (no copy involved)
> > 
> >         o GeometryFactory::buildGeometry always returns a newly
> >           allocated geometry, so that the caller is free to delete
> >           arguments passed to it.
> > 
> >         o GeometryFactory geometry collection creators
> >           (createMulti*, createGeometryCollection) copy given
> >           vector AND content.
> > 
> > Reasoning about clients switched I've found that geos-config was 
> > broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
> > instead of actual version). I've fixed that, but I think a version
> > number (major,minor,patchlevel) should be put in some header for
> > ease of use. What do you think Frank ?
> > 
> > --strk;
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> -- 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From ferdinando.villa at uvm.edu  Wed Jun 16 10:28:36 2004
From: ferdinando.villa at uvm.edu (Ferdinando Villa)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
In-Reply-To: <20040616142059.GH22637@freek.keybit.net>
References: <20040616131846.GD22637@freek.keybit.net>
	<1087392613.4459.11.camel@basil.snr.uvm.edu>
	<20040616142059.GH22637@freek.keybit.net>
Message-ID: <1087396116.4459.18.camel@basil.snr.uvm.edu>

On Wed, 2004-06-16 at 10:20, strk wrote:
> On Wed, Jun 16, 2004 at 09:30:13AM -0400, Ferdinando Villa wrote:
> > Yes please, add the version info - I think I originally put it at the
> > very start of configure.in, with a matching AC_SUBST at the end - that
> > should take care of it for geos-config and should propagate to the
> > object files through a gcc command line define. Maybe I just thought I
> > put it there :)
> 
> No geos headers appear in AC_SUBST.
> Do you think geom.h is the right place ?

Yes, or better, have these defined in geos_version.h and include it
first thing in geom.h (btw - shouldn't it be geos.h, or maybe we should
have a geos.h including geos_version.h and geom.h?). I usually prefer to
have version numbers configured in configure.in and use the gcc command
line to propagate them, but this has the disadvantage of needing a
different strategy for Windows. Your defs and interface functions sound
great to me.

ferdinando


> I think these would be useful to have:
> 	#define GEOS_MAJOR_VERSION 1
> 	#define GEOS_MINOR_VERSION 4
> 	#define GEOS_PATCHLEVEL 0
> 	#define GEOS_VERSION "1.4.0"
> 	int geos::geos_major_version();
> 	int geos::geos_minor_version();
> 	int geos::geos_patchlevel();
> 	string geos::geos_version();
> 
> Comments ?
> 
> BTW, to split version in major/minor/patchlevel configure.in should also
> be modified..
> 
> > 
> > One point about version numbers: the geos.m4 macro file that I added to
> > the distribution (which defines GEOS_INIT(version) to be used in
> > configure.in by any automake-based program that wants to check for geos)
> > depends on having all three version numbers, and will not work correctly
> > with two. So if we want that to keep working, we should have 1.4.0, not
> > 1.4, or the m4 macro should be made smarter (probably a better idea).
> 
> probably a better idea...
> 
> --strk;
> 
> > 
> > Ciao,
> > ferdinando
> > 
> > On Wed, 2004-06-16 at 09:18, strk wrote:
> > > I've updated GEOS interface to make all geometry constructors
> > > copy given arguments (vector AND content).
> > > 
> > > As a side effect:
> > > 
> > >         o SegmentString constructor also copy given CoordinateList
> > >           and deletes it at destruction time
> > > 
> > >         o SegmentString::getCoordinates() returns a copy of internal
> > >           CoordinateList
> > > 
> > >         o new SegmentString::getCoordinatesRO() returns a pointer to
> > >           the internal CoordinateList (no copy involved)
> > > 
> > >         o GeometryFactory::buildGeometry always returns a newly
> > >           allocated geometry, so that the caller is free to delete
> > >           arguments passed to it.
> > > 
> > >         o GeometryFactory geometry collection creators
> > >           (createMulti*, createGeometryCollection) copy given
> > >           vector AND content.
> > > 
> > > Reasoning about clients switched I've found that geos-config was 
> > > broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
> > > instead of actual version). I've fixed that, but I think a version
> > > number (major,minor,patchlevel) should be put in some header for
> > > ease of use. What do you think Frank ?
> > > 
> > > --strk;
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > -- 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-- 


From ferdinando.villa at uvm.edu  Wed Jun 16 10:31:53 2004
From: ferdinando.villa at uvm.edu (Ferdinando Villa)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
In-Reply-To: <1087396116.4459.18.camel@basil.snr.uvm.edu>
References: <20040616131846.GD22637@freek.keybit.net>
	<1087392613.4459.11.camel@basil.snr.uvm.edu>
	<20040616142059.GH22637@freek.keybit.net>
	<1087396116.4459.18.camel@basil.snr.uvm.edu>
Message-ID: <1087396312.4459.22.camel@basil.snr.uvm.edu>

On Wed, 2004-06-16 at 10:28, Ferdinando Villa wrote:
> Yes, or better, have these defined in geos_version.h and include it
> first thing in geom.h (btw - shouldn't it be geos.h, or maybe we should
> have a geos.h including geos_version.h and geom.h?). I usually prefer to
> have version numbers configured in configure.in and use the gcc command
> line to propagate them, but this has the disadvantage of needing a
> different strategy for Windows. Your defs and interface functions sound
> great to me.

...on second thought, having it #defined in a header file will prevent
automake checking through a macro, as done in geos.m4, and require
tedious programming using geos-config (the configuration script won't
know the version, and I would strongly argue against duplicating the
info). So maybe there are arguments to keep the four defines as
variables in configure.in, although I don't know what's required to do
the same in Win.


> ferdinando
> 
> 
> > I think these would be useful to have:
> > 	#define GEOS_MAJOR_VERSION 1
> > 	#define GEOS_MINOR_VERSION 4
> > 	#define GEOS_PATCHLEVEL 0
> > 	#define GEOS_VERSION "1.4.0"
> > 	int geos::geos_major_version();
> > 	int geos::geos_minor_version();
> > 	int geos::geos_patchlevel();
> > 	string geos::geos_version();
> > 
> > Comments ?
> > 
> > BTW, to split version in major/minor/patchlevel configure.in should also
> > be modified..
> > 
> > > 
> > > One point about version numbers: the geos.m4 macro file that I added to
> > > the distribution (which defines GEOS_INIT(version) to be used in
> > > configure.in by any automake-based program that wants to check for geos)
> > > depends on having all three version numbers, and will not work correctly
> > > with two. So if we want that to keep working, we should have 1.4.0, not
> > > 1.4, or the m4 macro should be made smarter (probably a better idea).
> > 
> > probably a better idea...
> > 
> > --strk;
> > 
> > > 
> > > Ciao,
> > > ferdinando
> > > 
> > > On Wed, 2004-06-16 at 09:18, strk wrote:
> > > > I've updated GEOS interface to make all geometry constructors
> > > > copy given arguments (vector AND content).
> > > > 
> > > > As a side effect:
> > > > 
> > > >         o SegmentString constructor also copy given CoordinateList
> > > >           and deletes it at destruction time
> > > > 
> > > >         o SegmentString::getCoordinates() returns a copy of internal
> > > >           CoordinateList
> > > > 
> > > >         o new SegmentString::getCoordinatesRO() returns a pointer to
> > > >           the internal CoordinateList (no copy involved)
> > > > 
> > > >         o GeometryFactory::buildGeometry always returns a newly
> > > >           allocated geometry, so that the caller is free to delete
> > > >           arguments passed to it.
> > > > 
> > > >         o GeometryFactory geometry collection creators
> > > >           (createMulti*, createGeometryCollection) copy given
> > > >           vector AND content.
> > > > 
> > > > Reasoning about clients switched I've found that geos-config was 
> > > > broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
> > > > instead of actual version). I've fixed that, but I think a version
> > > > number (major,minor,patchlevel) should be put in some header for
> > > > ease of use. What do you think Frank ?
> > > > 
> > > > --strk;
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > -- 
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
-- 


From strk at keybit.net  Wed Jun 16 11:00:10 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
In-Reply-To: <1087396312.4459.22.camel@basil.snr.uvm.edu>
References: <20040616131846.GD22637@freek.keybit.net>
	<1087392613.4459.11.camel@basil.snr.uvm.edu>
	<20040616142059.GH22637@freek.keybit.net>
	<1087396116.4459.18.camel@basil.snr.uvm.edu>
	<1087396312.4459.22.camel@basil.snr.uvm.edu>
Message-ID: <20040616150010.GI22637@freek.keybit.net>

On Wed, Jun 16, 2004 at 10:31:53AM -0400, Ferdinando Villa wrote:
> On Wed, 2004-06-16 at 10:28, Ferdinando Villa wrote:
> > Yes, or better, have these defined in geos_version.h and include it
> > first thing in geom.h (btw - shouldn't it be geos.h, or maybe we should
> > have a geos.h including geos_version.h and geom.h?). I usually prefer to
> > have version numbers configured in configure.in and use the gcc command
> > line to propagate them, but this has the disadvantage of needing a
> > different strategy for Windows. Your defs and interface functions sound
> > great to me.
> 
> ...on second thought, having it #defined in a header file will prevent
> automake checking through a macro, as done in geos.m4, and require
> tedious programming using geos-config (the configuration script won't
> know the version, and I would strongly argue against duplicating the
> info). So maybe there are arguments to keep the four defines as
> variables in configure.in, although I don't know what's required to do
> the same in Win.

The main GEOS application is Postgis.
Postgis does not have an autoconf interface, so geos.m4
won't be useful for it. It will *need* #defines to work
correctly. 

As for geos.h / geom.h there is currently no single header
defining all the operations available with geos.
Postgis - for example - includes geom.h and util.h (another 
*really* dangerous name).

Maybe GEOS should provide a 'public' geos.h containing all public
and protected interfaces as well as version infos. This could
hopefully be done automatically.

Finally, for the geos.m4 macro. I see no problem in writing
version info in configure.in. The geos_version.h (or geos.h)
would be substitution targets the same as geos-config.

--strk;

> 
> 
> > ferdinando
> > 
> > 
> > > I think these would be useful to have:
> > > 	#define GEOS_MAJOR_VERSION 1
> > > 	#define GEOS_MINOR_VERSION 4
> > > 	#define GEOS_PATCHLEVEL 0
> > > 	#define GEOS_VERSION "1.4.0"
> > > 	int geos::geos_major_version();
> > > 	int geos::geos_minor_version();
> > > 	int geos::geos_patchlevel();
> > > 	string geos::geos_version();
> > > 
> > > Comments ?
> > > 
> > > BTW, to split version in major/minor/patchlevel configure.in should also
> > > be modified..
> > > 
> > > > 
> > > > One point about version numbers: the geos.m4 macro file that I added to
> > > > the distribution (which defines GEOS_INIT(version) to be used in
> > > > configure.in by any automake-based program that wants to check for geos)
> > > > depends on having all three version numbers, and will not work correctly
> > > > with two. So if we want that to keep working, we should have 1.4.0, not
> > > > 1.4, or the m4 macro should be made smarter (probably a better idea).
> > > 
> > > probably a better idea...
> > > 
> > > --strk;
> > > 
> > > > 
> > > > Ciao,
> > > > ferdinando
> > > > 
> > > > On Wed, 2004-06-16 at 09:18, strk wrote:
> > > > > I've updated GEOS interface to make all geometry constructors
> > > > > copy given arguments (vector AND content).
> > > > > 
> > > > > As a side effect:
> > > > > 
> > > > >         o SegmentString constructor also copy given CoordinateList
> > > > >           and deletes it at destruction time
> > > > > 
> > > > >         o SegmentString::getCoordinates() returns a copy of internal
> > > > >           CoordinateList
> > > > > 
> > > > >         o new SegmentString::getCoordinatesRO() returns a pointer to
> > > > >           the internal CoordinateList (no copy involved)
> > > > > 
> > > > >         o GeometryFactory::buildGeometry always returns a newly
> > > > >           allocated geometry, so that the caller is free to delete
> > > > >           arguments passed to it.
> > > > > 
> > > > >         o GeometryFactory geometry collection creators
> > > > >           (createMulti*, createGeometryCollection) copy given
> > > > >           vector AND content.
> > > > > 
> > > > > Reasoning about clients switched I've found that geos-config was 
> > > > > broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
> > > > > instead of actual version). I've fixed that, but I think a version
> > > > > number (major,minor,patchlevel) should be put in some header for
> > > > > ease of use. What do you think Frank ?
> > > > > 
> > > > > --strk;

From strk at keybit.net  Wed Jun 16 11:03:22 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Interface changes
In-Reply-To: <20040616150010.GI22637@freek.keybit.net>
References: <20040616131846.GD22637@freek.keybit.net>
	<1087392613.4459.11.camel@basil.snr.uvm.edu>
	<20040616142059.GH22637@freek.keybit.net>
	<1087396116.4459.18.camel@basil.snr.uvm.edu>
	<1087396312.4459.22.camel@basil.snr.uvm.edu>
	<20040616150010.GI22637@freek.keybit.net>
Message-ID: <20040616150322.GJ22637@freek.keybit.net>

On Wed, Jun 16, 2004 at 05:00:10PM +0200, strk wrote:
> On Wed, Jun 16, 2004 at 10:31:53AM -0400, Ferdinando Villa wrote:
> > On Wed, 2004-06-16 at 10:28, Ferdinando Villa wrote:
> > > Yes, or better, have these defined in geos_version.h and include it
> > > first thing in geom.h (btw - shouldn't it be geos.h, or maybe we should
> > > have a geos.h including geos_version.h and geom.h?). I usually prefer to
> > > have version numbers configured in configure.in and use the gcc command
> > > line to propagate them, but this has the disadvantage of needing a
> > > different strategy for Windows. Your defs and interface functions sound
> > > great to me.
> > 
> > ...on second thought, having it #defined in a header file will prevent
> > automake checking through a macro, as done in geos.m4, and require
> > tedious programming using geos-config (the configuration script won't
> > know the version, and I would strongly argue against duplicating the
> > info). So maybe there are arguments to keep the four defines as
> > variables in configure.in, although I don't know what's required to do
> > the same in Win.
> 
> The main GEOS application is Postgis.
> Postgis does not have an autoconf interface, so geos.m4
> won't be useful for it. It will *need* #defines to work
> correctly. 
> 
> As for geos.h / geom.h there is currently no single header
> defining all the operations available with geos.
> Postgis - for example - includes geom.h and util.h (another 
> *really* dangerous name).
> 
> Maybe GEOS should provide a 'public' geos.h containing all public
> and protected interfaces as well as version infos. This could
> hopefully be done automatically.

Oh... I forgot to mention... using geos.h would be yet another
"interface" change client applications should take care of,
and this time only geos-config could help finding out how.

--strk;

> 
> Finally, for the geos.m4 macro. I see no problem in writing
> version info in configure.in. The geos_version.h (or geos.h)
> would be substitution targets the same as geos-config.
> 
> --strk;
> 
> > 
> > 
> > > ferdinando
> > > 
> > > 
> > > > I think these would be useful to have:
> > > > 	#define GEOS_MAJOR_VERSION 1
> > > > 	#define GEOS_MINOR_VERSION 4
> > > > 	#define GEOS_PATCHLEVEL 0
> > > > 	#define GEOS_VERSION "1.4.0"
> > > > 	int geos::geos_major_version();
> > > > 	int geos::geos_minor_version();
> > > > 	int geos::geos_patchlevel();
> > > > 	string geos::geos_version();
> > > > 
> > > > Comments ?
> > > > 
> > > > BTW, to split version in major/minor/patchlevel configure.in should also
> > > > be modified..
> > > > 
> > > > > 
> > > > > One point about version numbers: the geos.m4 macro file that I added to
> > > > > the distribution (which defines GEOS_INIT(version) to be used in
> > > > > configure.in by any automake-based program that wants to check for geos)
> > > > > depends on having all three version numbers, and will not work correctly
> > > > > with two. So if we want that to keep working, we should have 1.4.0, not
> > > > > 1.4, or the m4 macro should be made smarter (probably a better idea).
> > > > 
> > > > probably a better idea...
> > > > 
> > > > --strk;
> > > > 
> > > > > 
> > > > > Ciao,
> > > > > ferdinando
> > > > > 
> > > > > On Wed, 2004-06-16 at 09:18, strk wrote:
> > > > > > I've updated GEOS interface to make all geometry constructors
> > > > > > copy given arguments (vector AND content).
> > > > > > 
> > > > > > As a side effect:
> > > > > > 
> > > > > >         o SegmentString constructor also copy given CoordinateList
> > > > > >           and deletes it at destruction time
> > > > > > 
> > > > > >         o SegmentString::getCoordinates() returns a copy of internal
> > > > > >           CoordinateList
> > > > > > 
> > > > > >         o new SegmentString::getCoordinatesRO() returns a pointer to
> > > > > >           the internal CoordinateList (no copy involved)
> > > > > > 
> > > > > >         o GeometryFactory::buildGeometry always returns a newly
> > > > > >           allocated geometry, so that the caller is free to delete
> > > > > >           arguments passed to it.
> > > > > > 
> > > > > >         o GeometryFactory geometry collection creators
> > > > > >           (createMulti*, createGeometryCollection) copy given
> > > > > >           vector AND content.
> > > > > > 
> > > > > > Reasoning about clients switched I've found that geos-config was 
> > > > > > broken in GEOS-1.0 (run with --version returned @@GEOS_VERSION@@
> > > > > > instead of actual version). I've fixed that, but I think a version
> > > > > > number (major,minor,patchlevel) should be put in some header for
> > > > > > ease of use. What do you think Frank ?
> > > > > > 
> > > > > > --strk;

From steve.lime at dnr.state.mn.us  Wed Jun 16 12:02:08 2004
From: steve.lime at dnr.state.mn.us (Steve Lime)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Examples using GEOS from C?
Message-ID: <s0d028c5.051@co5.dnr.state.mn.us>

Hi Folks: I'm starting to tinker with using GEOS with MapServer. I'm
wondering if folks have any examples of using it from within straight C
code. I'd also be interested in learning more about the best ways to
operate on non-GEOS geometries. I've heard folks mention that there
should be more efficient ways than converting between representations.
Thanks!

Steve


Stephen Lime
Data & Applications Manager

Minnesota DNR
500 Lafayette Road
St. Paul, MN 55155
651-297-2937

From nhv at cape.com  Wed Jun 16 12:16:45 2004
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Examples using GEOS from C?
In-Reply-To: <s0d028c5.051@co5.dnr.state.mn.us>
Message-ID: <EKEJIKAILPONGGENMBGAGEGOHNAA.nhv@cape.com>

Steve Lime writes:
> 
> Hi Folks: I'm starting to tinker with using GEOS with MapServer. I'm
> wondering if folks have any examples of using it from within straight C
> code. 

Hi Steve,

You probably want to look at the PostGIS source

see struct GEOMETRY in postgis.h
and 
postgis_geos_wrapper.cpp
postgis_geos.c

HTH

Norman

From dblasby at refractions.net  Wed Jun 16 12:23:26 2004
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Examples using GEOS from C?
In-Reply-To: <s0d028c5.051@co5.dnr.state.mn.us>
References: <s0d028c5.051@co5.dnr.state.mn.us>
Message-ID: <40D073FE.60900@refractions.net>

Steve Lime wrote:
> Hi Folks: I'm starting to tinker with using GEOS with MapServer. I'm
> wondering if folks have any examples of using it from within straight C
> code. I'd also be interested in learning more about the best ways to
> operate on non-GEOS geometries. I've heard folks mention that there
> should be more efficient ways than converting between representations.
> Thanks!

PostGIS is a C program, so if you look in there you'll see an example.

Basically, I wrote a very very simple C++ library 
(postgis_geos_wrapper.cpp) that interfaced with GEOS.   If you tag your 
C++ functions with 'extern "C"', you'll be able to call them from a C 
library (postgis_geos.c).

You'll have to write your own constructors that take the mapserv 
ShapeObjs and convert to GEOS geometries.  You can either construct 
brand-new real-live GEOS Coordinates, or you can wrap the ShapeObj 
coordinates with a CoordinateList class.

For example:

(C++:)
extern "C" char GEOSisSimple(Geometry *g1);
char GEOSisSimple(Geometry *g1)
{
	try
	{
		return g1->isSimple();
	}
	catch (GEOSException *ge)
	{
			// give error message as a NOTICE
		NOTICE_MESSAGE((char *)ge->toString().c_str());
		delete ge;
		return 2;  // error occured
	}

	catch (...)
	{
		return 2; //error occured
	}
}



(C:)

Datum issimple(PG_FUNCTION_ARGS)
{
	GEOMETRY		*geom = (GEOMETRY *)  PG_DETOAST_DATUM(PG_GETARG_DATUM(0));

	Geometry *g1;
	int result;

	if (geom->nobjs == 0)
		PG_RETURN_BOOL(true);

		initGEOS(MAXIMUM_ALIGNOF);

	//elog(NOTICE,"GEOS init()");

		g1 = 	POSTGIS2GEOS(geom ); // construct GEOS geometry

		result = GEOSisSimple(g1);
		GEOSdeleteGeometry(g1);

			if (result == 2)
			{
				elog(ERROR,"GEOS issimple() threw an error!");
				PG_RETURN_NULL(); //never get here
			}

	PG_RETURN_BOOL(result);
}


From strk at keybit.net  Wed Jun 16 12:27:54 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Examples using GEOS from C?
In-Reply-To: <EKEJIKAILPONGGENMBGAGEGOHNAA.nhv@cape.com>
References: <s0d028c5.051@co5.dnr.state.mn.us>
	<EKEJIKAILPONGGENMBGAGEGOHNAA.nhv@cape.com>
Message-ID: <20040616162754.GM22637@freek.keybit.net>

Be aware that GEOS interface is changing in next release...
--strk;

On Wed, Jun 16, 2004 at 12:16:45PM -0400, Norman Vine wrote:
> Steve Lime writes:
> > 
> > Hi Folks: I'm starting to tinker with using GEOS with MapServer. I'm
> > wondering if folks have any examples of using it from within straight C
> > code. 
> 
> Hi Steve,
> 
> You probably want to look at the PostGIS source
> 
> see struct GEOMETRY in postgis.h
> and 
> postgis_geos_wrapper.cpp
> postgis_geos.c
> 
> HTH
> 
> Norman
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Wed Jun 16 16:03:14 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] GEOS interface change: postgis case
Message-ID: <20040616200314.GC39246@freek.keybit.net>

I've updated postgis to perform the needed cleanup after
multi geometry construction when built agains GEOS > 1.0.

The only viable way to detect GEOS version was to use
'geos-config --version' and handle bogus output from the
GEOS-1.0 revision. This needed an external script that
outputs two defines: POSTGIS_GEOS_VERSION with GEOS major
and minor (2 digits) version numbers, and GEOS_VERSION with
the compete version as a string.

Even if GEOS-1.4 will provide a geos_version.h postgis would
not be able to detect wheter or not that header is availble
(it was not available for GEOS-1.0).

Adding version string to geom.h would not have worked, as
one part of the connector is C code and does not understand
the geom.h header.
 
GEOS_VERSION is currently unused (POSTGIS_GEOS_VERSION format
is more easly usable) but I'd like to use it in the output
of postgis_version().

--strk;

From steve.lime at dnr.state.mn.us  Wed Jun 16 23:54:29 2004
From: steve.lime at dnr.state.mn.us (Steve Lime)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Examples using GEOS from C?
Message-ID: <s0d0cfc6.043@co5.dnr.state.mn.us>

Thanks Dave (and Norman)! Just the help I needed to get started. Let's
see if we can get buffering working...

Steve

>>> dblasby@refractions.net 06/16/04 11:23 AM >>>
Steve Lime wrote:
> Hi Folks: I'm starting to tinker with using GEOS with MapServer. I'm
> wondering if folks have any examples of using it from within straight
C
> code. I'd also be interested in learning more about the best ways to
> operate on non-GEOS geometries. I've heard folks mention that there
> should be more efficient ways than converting between representations.
> Thanks!

PostGIS is a C program, so if you look in there you'll see an example.

Basically, I wrote a very very simple C++ library 
(postgis_geos_wrapper.cpp) that interfaced with GEOS.   If you tag your 
C++ functions with 'extern "C"', you'll be able to call them from a C 
library (postgis_geos.c).

You'll have to write your own constructors that take the mapserv 
ShapeObjs and convert to GEOS geometries.  You can either construct 
brand-new real-live GEOS Coordinates, or you can wrap the ShapeObj 
coordinates with a CoordinateList class.

For example:

(C++:)
extern "C" char GEOSisSimple(Geometry *g1);
char GEOSisSimple(Geometry *g1)
{
	try
	{
		return g1->isSimple();
	}
	catch (GEOSException *ge)
	{
			// give error message as a NOTICE
		NOTICE_MESSAGE((char *)ge->toString().c_str());
		delete ge;
		return 2;  // error occured
	}

	catch (...)
	{
		return 2; //error occured
	}
}



(C:)

Datum issimple(PG_FUNCTION_ARGS)
{
	GEOMETRY		*geom = (GEOMETRY *) 
PG_DETOAST_DATUM(PG_GETARG_DATUM(0));

	Geometry *g1;
	int result;

	if (geom->nobjs == 0)
		PG_RETURN_BOOL(true);

		initGEOS(MAXIMUM_ALIGNOF);

	//elog(NOTICE,"GEOS init()");

		g1 = 	POSTGIS2GEOS(geom ); // construct GEOS geometry

		result = GEOSisSimple(g1);
		GEOSdeleteGeometry(g1);

			if (result == 2)
			{
				elog(ERROR,"GEOS issimple() threw an
error!");
				PG_RETURN_NULL(); //never get here
			}

	PG_RETURN_BOOL(result);
}

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Mon Jun 21 18:58:47 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] headers layout & versioning
Message-ID: <20040621225847.GA90878@freek.keybit.net>

I've added a geos_version.h which gets created by ./configure
with values set in configure.in. It contains the following defines:

        GEOS_VERSION_MAJOR <number>
        GEOS_VERSION_MINOR <number>
        GEOS_VERSION_PATCH <number>
        GEOS_VERSION <string>

The file is installed by the 'install' Makefile rule.

I dunno how this is handled by Win, but I think it was handled
somehow already, can you tell us more about this Yury ?

I'd put runtime version extractor functions in geom.h and
Geometry.cpp, comments ?

About headers layout, we could provide a geos.h header file
including geom.h AND geos_version.h, and it should also
include utils.h, which contains GEOSException definition ...
Ideally this file could include *all* geos headers giving
all of GEOS support from a single include.

One problem I see about headers layout is that some header files
(like utils.h or platform.h) have too generic names, making it
possible to conflict with system or other packages headers (most
probably client application headers).

A possible solution I see is having geos.h include all GEOS
headers using the geos/ prefix, and require client application
rely on geos-config --cflags or equivalent include path. Still
geom.h includes "platform.h" which would be unfindable in this case,
and I dunno how many other header files use this cross inclusions.

Another solution would be to rename all "ambiguos" files to be
prefixed by geos_. Note though, that geos-config --cflags should
be corrected to reflect "suggested" use, as current output "suggests"
prefixing geos header inclusions with 'geos/'. 

How do you see it ? Are these fake problems ?

--strk;

From sdlime at comcast.net  Fri Jun 25 00:38:23 2004
From: sdlime at comcast.net (Stephen Lime)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
Message-ID: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>

Hi folks: Trying to integrate geos into a configure script based on the 
output from geos-config. I'm curious if the --includes and --cflags 
options should be producing the same output (they do). I expected one 
of them to produce "-I/usr/local/include/geos". I can work around this 
using the --prefix but was wondering if the behavior is as intended.

Steve


From strk at keybit.net  Fri Jun 25 04:40:44 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
Message-ID: <20040625084044.GC25925@freek.keybit.net>

I don't like this also.
I think it should produce just the path without the -I switch.
Anyway, you should find a geos.m4 file in the GEOS distribution
handy for application's configure scripts.

--strk;

On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> Hi folks: Trying to integrate geos into a configure script based on the 
> output from geos-config. I'm curious if the --includes and --cflags 
> options should be producing the same output (they do). I expected one 
> of them to produce "-I/usr/local/include/geos". I can work around this 
> using the --prefix but was wondering if the behavior is as intended.
> 
> Steve
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From ferdinando.villa at uvm.edu  Fri Jun 25 09:16:08 2004
From: ferdinando.villa at uvm.edu (Ferdinando Villa)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <20040625084044.GC25925@freek.keybit.net>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
	<20040625084044.GC25925@freek.keybit.net>
Message-ID: <1088169367.4456.3.camel@basil.snr.uvm.edu>

Yes - --cflags should produce the -I line, --includes should just list
the path. The current script is buggy - strk can you fix it? 

The procedure to use the geos.m4 macro is as follows:

put GEOS_INIT(1.0.0) in configure.int

run aclocal -I macros instead of aclocal 
the rest is the same

your CXXFLAGS will include the geos path automatically and your LIBS
will link geos in.

ferdinando

On Fri, 2004-06-25 at 04:40, strk wrote:
> I don't like this also.
> I think it should produce just the path without the -I switch.
> Anyway, you should find a geos.m4 file in the GEOS distribution
> handy for application's configure scripts.
> 
> --strk;
> 
> On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> > Hi folks: Trying to integrate geos into a configure script based on the 
> > output from geos-config. I'm curious if the --includes and --cflags 
> > options should be producing the same output (they do). I expected one 
> > of them to produce "-I/usr/local/include/geos". I can work around this 
> > using the --prefix but was wondering if the behavior is as intended.
> > 
> > Steve
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-- 


From strk at keybit.net  Fri Jun 25 10:29:18 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <1088169367.4456.3.camel@basil.snr.uvm.edu>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
	<20040625084044.GC25925@freek.keybit.net>
	<1088169367.4456.3.camel@basil.snr.uvm.edu>
Message-ID: <20040625142918.GB28214@freek.keybit.net>

On Fri, Jun 25, 2004 at 09:16:08AM -0400, Ferdinando Villa wrote:
> Yes - --cflags should produce the -I line, --includes should just list
> the path. The current script is buggy - strk can you fix it? 

The fix is in current CVS.
Ferdinando, do you think includes should be
.../includes or .../includes/geos ?
I'd like application to use #include "geos/geom.h" or
similar (which would work with current geos-config output)
but then geom.h includes platform.h (and not geos/platform.h)
and it should not work then....
What do you think should be done about this ?

--strk;

> 
> The procedure to use the geos.m4 macro is as follows:
> 
> put GEOS_INIT(1.0.0) in configure.int
> 
> run aclocal -I macros instead of aclocal 
> the rest is the same
> 
> your CXXFLAGS will include the geos path automatically and your LIBS
> will link geos in.
> 
> ferdinando
> 
> On Fri, 2004-06-25 at 04:40, strk wrote:
> > I don't like this also.
> > I think it should produce just the path without the -I switch.
> > Anyway, you should find a geos.m4 file in the GEOS distribution
> > handy for application's configure scripts.
> > 
> > --strk;
> > 
> > On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> > > Hi folks: Trying to integrate geos into a configure script based on the 
> > > output from geos-config. I'm curious if the --includes and --cflags 
> > > options should be producing the same output (they do). I expected one 
> > > of them to produce "-I/usr/local/include/geos". I can work around this 
> > > using the --prefix but was wondering if the behavior is as intended.
> > > 
> > > Steve
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> -- 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From ferdinando.villa at uvm.edu  Fri Jun 25 10:31:18 2004
From: ferdinando.villa at uvm.edu (Ferdinando Villa)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <20040625142918.GB28214@freek.keybit.net>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
	<20040625084044.GC25925@freek.keybit.net>
	<1088169367.4456.3.camel@basil.snr.uvm.edu>
	<20040625142918.GB28214@freek.keybit.net>
Message-ID: <1088173878.4456.8.camel@basil.snr.uvm.edu>

That's debatable, but my vote would go to cflags pointing to /includes,
and prefixing all includes as geos/. I don't see
a problem in having geo{s|m}.h containing lines like

#ifndef __geos_platform_h
#include <geos/platform.h>
#endif
 
using the bracket notation should keep us safe from ambiguity and it
would work as long as the include path is given as /includes. Looks
elegant to me, too, but that's me...

cheers
f

On Fri, 2004-06-25 at 10:29, strk wrote:
> On Fri, Jun 25, 2004 at 09:16:08AM -0400, Ferdinando Villa wrote:
> > Yes - --cflags should produce the -I line, --includes should just list
> > the path. The current script is buggy - strk can you fix it? 
> 
> The fix is in current CVS.
> Ferdinando, do you think includes should be
> .../includes or .../includes/geos ?
> I'd like application to use #include "geos/geom.h" or
> similar (which would work with current geos-config output)
> but then geom.h includes platform.h (and not geos/platform.h)
> and it should not work then....
> What do you think should be done about this ?
> 
> --strk;
> 
> > 
> > The procedure to use the geos.m4 macro is as follows:
> > 
> > put GEOS_INIT(1.0.0) in configure.int
> > 
> > run aclocal -I macros instead of aclocal 
> > the rest is the same
> > 
> > your CXXFLAGS will include the geos path automatically and your LIBS
> > will link geos in.
> > 
> > ferdinando
> > 
> > On Fri, 2004-06-25 at 04:40, strk wrote:
> > > I don't like this also.
> > > I think it should produce just the path without the -I switch.
> > > Anyway, you should find a geos.m4 file in the GEOS distribution
> > > handy for application's configure scripts.
> > > 
> > > --strk;
> > > 
> > > On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> > > > Hi folks: Trying to integrate geos into a configure script based on the 
> > > > output from geos-config. I'm curious if the --includes and --cflags 
> > > > options should be producing the same output (they do). I expected one 
> > > > of them to produce "-I/usr/local/include/geos". I can work around this 
> > > > using the --prefix but was wondering if the behavior is as intended.
> > > > 
> > > > Steve
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > -- 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-- 


From strk at keybit.net  Fri Jun 25 10:47:20 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <1088173878.4456.8.camel@basil.snr.uvm.edu>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
	<20040625084044.GC25925@freek.keybit.net>
	<1088169367.4456.3.camel@basil.snr.uvm.edu>
	<20040625142918.GB28214@freek.keybit.net>
	<1088173878.4456.8.camel@basil.snr.uvm.edu>
Message-ID: <20040625144720.GC28214@freek.keybit.net>

On Fri, Jun 25, 2004 at 10:31:18AM -0400, Ferdinando Villa wrote:
> That's debatable, but my vote would go to cflags pointing to /includes,
> and prefixing all includes as geos/. I don't see
> a problem in having geo{s|m}.h containing lines like
> 
> #ifndef __geos_platform_h
> #include <geos/platform.h>
> #endif
>  
> using the bracket notation should keep us safe from ambiguity and it
> would work as long as the include path is given as /includes. Looks
> elegant to me, too, but that's me...

Note that geom.h is included by GEOS modules themself, whose headers
do not currently reside under a geos/ directory, so the switch should
be something like

#ifdef __BUILDING_GEOS
#include "platform.h"
#else
#include <geos/platform.h>
#endif

The switch would not be needed for geos.h since it is a front-end only
header file....

--strk;


> 
> cheers
> f
> 
> On Fri, 2004-06-25 at 10:29, strk wrote:
> > On Fri, Jun 25, 2004 at 09:16:08AM -0400, Ferdinando Villa wrote:
> > > Yes - --cflags should produce the -I line, --includes should just list
> > > the path. The current script is buggy - strk can you fix it? 
> > 
> > The fix is in current CVS.
> > Ferdinando, do you think includes should be
> > .../includes or .../includes/geos ?
> > I'd like application to use #include "geos/geom.h" or
> > similar (which would work with current geos-config output)
> > but then geom.h includes platform.h (and not geos/platform.h)
> > and it should not work then....
> > What do you think should be done about this ?
> > 
> > --strk;
> > 
> > > 
> > > The procedure to use the geos.m4 macro is as follows:
> > > 
> > > put GEOS_INIT(1.0.0) in configure.int
> > > 
> > > run aclocal -I macros instead of aclocal 
> > > the rest is the same
> > > 
> > > your CXXFLAGS will include the geos path automatically and your LIBS
> > > will link geos in.
> > > 
> > > ferdinando
> > > 
> > > On Fri, 2004-06-25 at 04:40, strk wrote:
> > > > I don't like this also.
> > > > I think it should produce just the path without the -I switch.
> > > > Anyway, you should find a geos.m4 file in the GEOS distribution
> > > > handy for application's configure scripts.
> > > > 
> > > > --strk;
> > > > 
> > > > On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> > > > > Hi folks: Trying to integrate geos into a configure script based on the 
> > > > > output from geos-config. I'm curious if the --includes and --cflags 
> > > > > options should be producing the same output (they do). I expected one 
> > > > > of them to produce "-I/usr/local/include/geos". I can work around this 
> > > > > using the --prefix but was wondering if the behavior is as intended.
> > > > > 
> > > > > Steve
> > > > > 
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > -- 
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> -- 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From ferdinando.villa at uvm.edu  Fri Jun 25 10:48:57 2004
From: ferdinando.villa at uvm.edu (Ferdinando Villa)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <20040625144720.GC28214@freek.keybit.net>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
	<20040625084044.GC25925@freek.keybit.net>
	<1088169367.4456.3.camel@basil.snr.uvm.edu>
	<20040625142918.GB28214@freek.keybit.net>
	<1088173878.4456.8.camel@basil.snr.uvm.edu>
	<20040625144720.GC28214@freek.keybit.net>
Message-ID: <1088174937.4456.13.camel@basil.snr.uvm.edu>

Ugh... ok that's not too bad, but would it be terribly messy to put all
headers under a geos/ directory and include all of them with the same
notation everywhere? The build process for postgis etc wouldn't change
as long as geos-config is used... the BUILDING_GEOS conditional sounds a
bit perverse to me... and I think we really need to prefix header files
to avoid ambiguities. If folks think we should do it this way, I can
volunteer to code that in if it's too much work for one person.

On Fri, 2004-06-25 at 10:47, strk wrote:
> On Fri, Jun 25, 2004 at 10:31:18AM -0400, Ferdinando Villa wrote:
> > That's debatable, but my vote would go to cflags pointing to /includes,
> > and prefixing all includes as geos/. I don't see
> > a problem in having geo{s|m}.h containing lines like
> > 
> > #ifndef __geos_platform_h
> > #include <geos/platform.h>
> > #endif
> >  
> > using the bracket notation should keep us safe from ambiguity and it
> > would work as long as the include path is given as /includes. Looks
> > elegant to me, too, but that's me...
> 
> Note that geom.h is included by GEOS modules themself, whose headers
> do not currently reside under a geos/ directory, so the switch should
> be something like
> 
> #ifdef __BUILDING_GEOS
> #include "platform.h"
> #else
> #include <geos/platform.h>
> #endif
> 
> The switch would not be needed for geos.h since it is a front-end only
> header file....
> 
> --strk;
> 
> 
> > 
> > cheers
> > f
> > 
> > On Fri, 2004-06-25 at 10:29, strk wrote:
> > > On Fri, Jun 25, 2004 at 09:16:08AM -0400, Ferdinando Villa wrote:
> > > > Yes - --cflags should produce the -I line, --includes should just list
> > > > the path. The current script is buggy - strk can you fix it? 
> > > 
> > > The fix is in current CVS.
> > > Ferdinando, do you think includes should be
> > > .../includes or .../includes/geos ?
> > > I'd like application to use #include "geos/geom.h" or
> > > similar (which would work with current geos-config output)
> > > but then geom.h includes platform.h (and not geos/platform.h)
> > > and it should not work then....
> > > What do you think should be done about this ?
> > > 
> > > --strk;
> > > 
> > > > 
> > > > The procedure to use the geos.m4 macro is as follows:
> > > > 
> > > > put GEOS_INIT(1.0.0) in configure.int
> > > > 
> > > > run aclocal -I macros instead of aclocal 
> > > > the rest is the same
> > > > 
> > > > your CXXFLAGS will include the geos path automatically and your LIBS
> > > > will link geos in.
> > > > 
> > > > ferdinando
> > > > 
> > > > On Fri, 2004-06-25 at 04:40, strk wrote:
> > > > > I don't like this also.
> > > > > I think it should produce just the path without the -I switch.
> > > > > Anyway, you should find a geos.m4 file in the GEOS distribution
> > > > > handy for application's configure scripts.
> > > > > 
> > > > > --strk;
> > > > > 
> > > > > On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> > > > > > Hi folks: Trying to integrate geos into a configure script based on the 
> > > > > > output from geos-config. I'm curious if the --includes and --cflags 
> > > > > > options should be producing the same output (they do). I expected one 
> > > > > > of them to produce "-I/usr/local/include/geos". I can work around this 
> > > > > > using the --prefix but was wondering if the behavior is as intended.
> > > > > > 
> > > > > > Steve
> > > > > > 
> > > > > > _______________________________________________
> > > > > > geos-devel mailing list
> > > > > > geos-devel@geos.refractions.net
> > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > -- 
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > -- 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
-- 


From strk at keybit.net  Fri Jun 25 11:38:06 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] geos-config
In-Reply-To: <1088174937.4456.13.camel@basil.snr.uvm.edu>
References: <7DE218E9-C661-11D8-BECC-000A95C8F1B4@comcast.net>
	<20040625084044.GC25925@freek.keybit.net>
	<1088169367.4456.3.camel@basil.snr.uvm.edu>
	<20040625142918.GB28214@freek.keybit.net>
	<1088173878.4456.8.camel@basil.snr.uvm.edu>
	<20040625144720.GC28214@freek.keybit.net>
	<1088174937.4456.13.camel@basil.snr.uvm.edu>
Message-ID: <20040625153806.GA28694@freek.keybit.net>

On Fri, Jun 25, 2004 at 10:48:57AM -0400, Ferdinando Villa wrote:
> Ugh... ok that's not too bad, but would it be terribly messy to put all
> headers under a geos/ directory and include all of them with the same
> notation everywhere? The build process for postgis etc wouldn't change
> as long as geos-config is used... the BUILDING_GEOS conditional sounds a
> bit perverse to me... and I think we really need to prefix header files
> to avoid ambiguities. If folks think we should do it this way, I can
> volunteer to code that in if it's too much work for one person.

postgis build process should change because geos wrapper includes
geom.h and util.h (with no geso/ prefix) but I can take care of this
(maybe including just geos.h for GEOS_VERSION > 1.0.0)
Your contribution is welcome in moving all the stuff as I think it 
might be a bigger work then it looks. Let's see what does Paul
think about this.

--strk;

> 
> On Fri, 2004-06-25 at 10:47, strk wrote:
> > On Fri, Jun 25, 2004 at 10:31:18AM -0400, Ferdinando Villa wrote:
> > > That's debatable, but my vote would go to cflags pointing to /includes,
> > > and prefixing all includes as geos/. I don't see
> > > a problem in having geo{s|m}.h containing lines like
> > > 
> > > #ifndef __geos_platform_h
> > > #include <geos/platform.h>
> > > #endif
> > >  
> > > using the bracket notation should keep us safe from ambiguity and it
> > > would work as long as the include path is given as /includes. Looks
> > > elegant to me, too, but that's me...
> > 
> > Note that geom.h is included by GEOS modules themself, whose headers
> > do not currently reside under a geos/ directory, so the switch should
> > be something like
> > 
> > #ifdef __BUILDING_GEOS
> > #include "platform.h"
> > #else
> > #include <geos/platform.h>
> > #endif
> > 
> > The switch would not be needed for geos.h since it is a front-end only
> > header file....
> > 
> > --strk;
> > 
> > 
> > > 
> > > cheers
> > > f
> > > 
> > > On Fri, 2004-06-25 at 10:29, strk wrote:
> > > > On Fri, Jun 25, 2004 at 09:16:08AM -0400, Ferdinando Villa wrote:
> > > > > Yes - --cflags should produce the -I line, --includes should just list
> > > > > the path. The current script is buggy - strk can you fix it? 
> > > > 
> > > > The fix is in current CVS.
> > > > Ferdinando, do you think includes should be
> > > > .../includes or .../includes/geos ?
> > > > I'd like application to use #include "geos/geom.h" or
> > > > similar (which would work with current geos-config output)
> > > > but then geom.h includes platform.h (and not geos/platform.h)
> > > > and it should not work then....
> > > > What do you think should be done about this ?
> > > > 
> > > > --strk;
> > > > 
> > > > > 
> > > > > The procedure to use the geos.m4 macro is as follows:
> > > > > 
> > > > > put GEOS_INIT(1.0.0) in configure.int
> > > > > 
> > > > > run aclocal -I macros instead of aclocal 
> > > > > the rest is the same
> > > > > 
> > > > > your CXXFLAGS will include the geos path automatically and your LIBS
> > > > > will link geos in.
> > > > > 
> > > > > ferdinando
> > > > > 
> > > > > On Fri, 2004-06-25 at 04:40, strk wrote:
> > > > > > I don't like this also.
> > > > > > I think it should produce just the path without the -I switch.
> > > > > > Anyway, you should find a geos.m4 file in the GEOS distribution
> > > > > > handy for application's configure scripts.
> > > > > > 
> > > > > > --strk;
> > > > > > 
> > > > > > On Thu, Jun 24, 2004 at 11:38:23PM -0500, Stephen Lime wrote:
> > > > > > > Hi folks: Trying to integrate geos into a configure script based on the 
> > > > > > > output from geos-config. I'm curious if the --includes and --cflags 
> > > > > > > options should be producing the same output (they do). I expected one 
> > > > > > > of them to produce "-I/usr/local/include/geos". I can work around this 
> > > > > > > using the --prefix but was wondering if the behavior is as intended.
> > > > > > > 
> > > > > > > Steve
> > > > > > > 
> > > > > > > _______________________________________________
> > > > > > > geos-devel mailing list
> > > > > > > geos-devel@geos.refractions.net
> > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > _______________________________________________
> > > > > > geos-devel mailing list
> > > > > > geos-devel@geos.refractions.net
> > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > -- 
> > > > > 
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > -- 
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> -- 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From pramsey at refractions.net  Sat Jun 26 21:40:55 2004
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Version Check
Message-ID: <08586E81-C7DB-11D8-B897-000393D33C2E@refractions.net>

OK, I need a version check. I am getting no love trying to compile the 
CVS tip on OS/X.

./configure: line 7359: syntax error near unexpected token 
`PGAC_TYPE_64BIT_INT(long'
./configure: line 7359: `PGAC_TYPE_64BIT_INT(long int)'

automake (GNU automake) 1.6.1
autoconf (GNU Autoconf) 2.52
gcc 2.95.2

When did we get this 64bit test in configure.in, btw?

      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From strk at keybit.net  Sun Jun 27 06:11:09 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Version Check
In-Reply-To: <08586E81-C7DB-11D8-B897-000393D33C2E@refractions.net>
References: <08586E81-C7DB-11D8-B897-000393D33C2E@refractions.net>
Message-ID: <20040627101109.GA45238@freek.keybit.net>

On Sat, Jun 26, 2004 at 06:40:55PM -0700, Paul Ramsey wrote:
> OK, I need a version check. I am getting no love trying to compile the 
> CVS tip on OS/X.
> 
> ./configure: line 7359: syntax error near unexpected token 
> `PGAC_TYPE_64BIT_INT(long'
> ./configure: line 7359: `PGAC_TYPE_64BIT_INT(long int)'
> 
> automake (GNU automake) 1.6.1
> autoconf (GNU Autoconf) 2.52
> gcc 2.95.2
> 
> When did we get this 64bit test in configure.in, btw?

It's been there since release 1.0, needed to make 64 integers usable
in a portable way. The macro is defined in acsite.m4 and have been 
copied from postgresql 7.3.4. It helps defining int64 to 'long' or
'long long' (unavailable on some systems).
You error message suggests to me the acsite.m4 file has not been
parsed by autoconf when producing 'configure' (there should be no
PGAC_TYPE.. call in the 'configure' script itself).

I'm using GNU Autoconf 2.57 with success. Note that autoconf reads
both aclocal.m4 and acsite.m4. I did not use aclocal.m4 because that
is currently generated by 'aclocal'. Maybe Fernando can help
with these auto* tools.

--strk;

> 
>      Paul Ramsey
>      Refractions Research
>      Email: pramsey@refractions.net
>      Phone: (250) 885-0632
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From pramsey at refractions.net  Sun Jun 27 12:26:08 2004
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Version Check
In-Reply-To: <20040627101109.GA45238@freek.keybit.net>
Message-ID: <B1BB2F64-C856-11D8-B897-000393D33C2E@refractions.net>

It seems suspiciously like acsite.m4 is being ignored, that is for 
sure, since that macro is not getting expanded in configure. Arg, as 
they say in the movies.


On Sunday, June 27, 2004, at 03:11 AM, strk wrote:

> On Sat, Jun 26, 2004 at 06:40:55PM -0700, Paul Ramsey wrote:
>> OK, I need a version check. I am getting no love trying to compile the
>> CVS tip on OS/X.
>>
>> ./configure: line 7359: syntax error near unexpected token
>> `PGAC_TYPE_64BIT_INT(long'
>> ./configure: line 7359: `PGAC_TYPE_64BIT_INT(long int)'
>>
>> automake (GNU automake) 1.6.1
>> autoconf (GNU Autoconf) 2.52
>> gcc 2.95.2
>>
>> When did we get this 64bit test in configure.in, btw?
>
> It's been there since release 1.0, needed to make 64 integers usable
> in a portable way. The macro is defined in acsite.m4 and have been
> copied from postgresql 7.3.4. It helps defining int64 to 'long' or
> 'long long' (unavailable on some systems).
> You error message suggests to me the acsite.m4 file has not been
> parsed by autoconf when producing 'configure' (there should be no
> PGAC_TYPE.. call in the 'configure' script itself).
>
> I'm using GNU Autoconf 2.57 with success. Note that autoconf reads
> both aclocal.m4 and acsite.m4. I did not use aclocal.m4 because that
> is currently generated by 'aclocal'. Maybe Fernando can help
> with these auto* tools.
>
> --strk;
>
>>
>>      Paul Ramsey
>>      Refractions Research
>>      Email: pramsey@refractions.net
>>      Phone: (250) 885-0632
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From strk at keybit.net  Sun Jun 27 20:21:40 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Version Check
In-Reply-To: <B1BB2F64-C856-11D8-B897-000393D33C2E@refractions.net>
References: <20040627101109.GA45238@freek.keybit.net>
	<B1BB2F64-C856-11D8-B897-000393D33C2E@refractions.net>
Message-ID: <20040628002140.GA45544@freek.keybit.net>

On Sun, Jun 27, 2004 at 09:26:08AM -0700, Paul Ramsey wrote:
> It seems suspiciously like acsite.m4 is being ignored, that is for 
> sure, since that macro is not getting expanded in configure. Arg, as 
> they say in the movies.

Fernando, do you have any suggestion on how to handle this
situation ? 

--strk;

> 
> 
> On Sunday, June 27, 2004, at 03:11 AM, strk wrote:
> 
> >On Sat, Jun 26, 2004 at 06:40:55PM -0700, Paul Ramsey wrote:
> >>OK, I need a version check. I am getting no love trying to compile the
> >>CVS tip on OS/X.
> >>
> >>./configure: line 7359: syntax error near unexpected token
> >>`PGAC_TYPE_64BIT_INT(long'
> >>./configure: line 7359: `PGAC_TYPE_64BIT_INT(long int)'
> >>
> >>automake (GNU automake) 1.6.1
> >>autoconf (GNU Autoconf) 2.52
> >>gcc 2.95.2
> >>
> >>When did we get this 64bit test in configure.in, btw?
> >
> >It's been there since release 1.0, needed to make 64 integers usable
> >in a portable way. The macro is defined in acsite.m4 and have been
> >copied from postgresql 7.3.4. It helps defining int64 to 'long' or
> >'long long' (unavailable on some systems).
> >You error message suggests to me the acsite.m4 file has not been
> >parsed by autoconf when producing 'configure' (there should be no
> >PGAC_TYPE.. call in the 'configure' script itself).
> >
> >I'm using GNU Autoconf 2.57 with success. Note that autoconf reads
> >both aclocal.m4 and acsite.m4. I did not use aclocal.m4 because that
> >is currently generated by 'aclocal'. Maybe Fernando can help
> >with these auto* tools.
> >
> >--strk;
> >
> >>
> >>     Paul Ramsey
> >>     Refractions Research
> >>     Email: pramsey@refractions.net
> >>     Phone: (250) 885-0632
> >>
> >>_______________________________________________
> >>geos-devel mailing list
> >>geos-devel@geos.refractions.net
> >>http://geos.refractions.net/mailman/listinfo/geos-devel
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>      Paul Ramsey
>      Refractions Research
>      Email: pramsey@refractions.net
>      Phone: (250) 885-0632
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Mon Jun 28 05:15:45 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8728@itl-serv1.infoterra-global.com>

Hi all,

I am creating polygons with holes and want to use geos to allow me to output them in WKT.

A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.

I am using version 1.0.

I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).

Is there a fix for this, or has anyone come accross it?

Thanks in advance,
Darren


"The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".


From strk at keybit.net  Mon Jun 28 06:01:20 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8728@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8728@itl-serv1.infoterra-global.com>
Message-ID: <20040628100120.GB53486@freek.keybit.net>

Can you send the test code ?
There are currently no known bug ...
--strk;

On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> Hi all,
> 
> I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> 
> A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> 
> I am using version 1.0.
> 
> I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> 
> Is there a fix for this, or has anyone come accross it?
> 
> Thanks in advance,
> Darren
> 
> 
> "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Mon Jun 28 06:05:22 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B879E@itl-serv1.infoterra-global.com>

defs:
typedef struct boundaryPt {
  double x;
  double y;
};
typedef vector<boundaryPt>    boundary;
typedef vector<boundary>      boundaryList;
typedef vector<boundaryList>  polygonList;

class members used:
  polygonList       ptPolygons;
  string tmpStr;
  string errMsg;

class function:
string c_polygon_gml::WKTString(void) {
  TRACE_FUNC("c_polygon_gml::WKTString");
  vector<Geometry *> polygons;
  vector<Geometry *> holes;
  int i,j,k;
  string resStr = "";

  try{
    GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);

    // for each outer ring create a CoordinateList and add all the points to it
    for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
      CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
      boundaryList bl = ptPolygons[i];
      boundary b = bl[0];
      TRACE_OUTPUT("Polygon " << i);
      for(k=0; k< static_cast<int>(b.size()); k++) {
        TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
        cl1->add(*(new Coordinate(b[k].x,b[k].y)));
      }

      // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
      for(j=1; j< static_cast<int>(bl.size()); j++) {
        TRACE_OUTPUT("Hole " << j);
        boundary b = bl[j];
        CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
        for(k=0; k< static_cast<int>(b.size()); k++) {
          TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
          cl2->add(*(new Coordinate(b[k].x,b[k].y)));
        }
        TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
        Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
        TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
        holes.push_back(geom1);
        delete cl2;
      }
      // create a polygon from the 1st CoordinateList and the holes
      TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
      Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
      TRACE_OUTPUT("test ");
      TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());

      // save this polygon in another vector
      TRACE_OUTPUT("Adding polygon " << i);
      polygons.push_back(geom2);
      delete cl1;
    }
    TRACE_OUTPUT("Creating multi-polygon");
    // when all done create a MultiPolygon object
    Geometry *geom3=gf->createMultiPolygon(&polygons);
    TRACE_OUTPUT("Creating string");
    resStr = geom3->toString();

    //clean up
    delete geom3;
    delete gf;
  }
  catch (GEOSException *ge) {
    errMsg = ge->toString();
  }
  return resStr;
}

XML read in by class and stored in ptPolygons:
<?xml version="1.0" encoding="UTF-8"?>
<AreaDefinition>
<GDSRequest>
<query>
<AreaQuery outputContent="public">
<queryArea>
<Polygon srsName="osgb:BNG">
<outerBoundaryIs>
<LinearRing>
<coordinates>
339252,1019302
339252,1029077
348752,1029077
346102,1019653
339252,1019302
</coordinates>
</LinearRing>
</outerBoundaryIs>
<innerBoundaryIs>
<LinearRing>
<coordinates>
340000,1020000
340000,1021000
341000,1021000
341000,1020000
340000,1020000
</coordinates>
</LinearRing>
</innerBoundaryIs>
</Polygon>
</queryArea>
</AreaQuery>
</query>
</GDSRequest>
</AreaDefinition>

Output:
TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
TR:   Polygon 0
TR:   Added point 339252,1.0193e+06
TR:   Added point 339252,1.02908e+06
TR:   Added point 348752,1.02908e+06
TR:   Added point 346102,1.01965e+06
TR:   Added point 339252,1.0193e+06
TR:   Hole 1
TR:   Added point 340000,1.02e+06
TR:   Added point 340000,1.021e+06
TR:   Added point 341000,1.021e+06
TR:   Added point 341000,1.02e+06
TR:   Added point 340000,1.02e+06
TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
TR:   test
Segmentation fault

Output when the hole is removed:
TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
TR:   Polygon 0
TR:   Added point 339252,1.0193e+06
TR:   Added point 339252,1.02908e+06
TR:   Added point 348752,1.02908e+06
TR:   Added point 346102,1.01965e+06
TR:   Added point 339252,1.0193e+06
TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
TR:   test
TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
TR:   Adding polygon 0
TR:   Creating multi-polygon
TR:   Creating string
TR: TRACE EXIT:c_polygon_gml::WKTString
ERROR:
WTF format
MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))


-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 28 June 2004 11:01
To: GEOS Development List
Subject: Re: [geos-devel] Problems creating polygons with holes


Can you send the test code ?
There are currently no known bug ...
--strk;

On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> Hi all,
> 
> I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> 
> A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> 
> I am using version 1.0.
> 
> I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> 
> Is there a fix for this, or has anyone come accross it?
> 
> Thanks in advance,
> Darren
> 
> 
> "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Jun 28 06:28:02 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B879E@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B879E@itl-serv1.infoterra-global.com>
Message-ID: <20040628102802.GA53903@freek.keybit.net>

Can you produce a neter code exploiting the bug ?
I mean a .cpp file I can compile and run and debug :)

-strk;

On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> defs:
> typedef struct boundaryPt {
>   double x;
>   double y;
> };
> typedef vector<boundaryPt>    boundary;
> typedef vector<boundary>      boundaryList;
> typedef vector<boundaryList>  polygonList;
> 
> class members used:
>   polygonList       ptPolygons;
>   string tmpStr;
>   string errMsg;
> 
> class function:
> string c_polygon_gml::WKTString(void) {
>   TRACE_FUNC("c_polygon_gml::WKTString");
>   vector<Geometry *> polygons;
>   vector<Geometry *> holes;
>   int i,j,k;
>   string resStr = "";
> 
>   try{
>     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>     // for each outer ring create a CoordinateList and add all the points to it
>     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
>       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
>       boundaryList bl = ptPolygons[i];
>       boundary b = bl[0];
>       TRACE_OUTPUT("Polygon " << i);
>       for(k=0; k< static_cast<int>(b.size()); k++) {
>         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
>         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
>       }
> 
>       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
>       for(j=1; j< static_cast<int>(bl.size()); j++) {
>         TRACE_OUTPUT("Hole " << j);
>         boundary b = bl[j];
>         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
>         for(k=0; k< static_cast<int>(b.size()); k++) {
>           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
>           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
>         }
>         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
>         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
>         holes.push_back(geom1);
>         delete cl2;
>       }
>       // create a polygon from the 1st CoordinateList and the holes
>       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
>       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
>       TRACE_OUTPUT("test ");
>       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> 
>       // save this polygon in another vector
>       TRACE_OUTPUT("Adding polygon " << i);
>       polygons.push_back(geom2);
>       delete cl1;
>     }
>     TRACE_OUTPUT("Creating multi-polygon");
>     // when all done create a MultiPolygon object
>     Geometry *geom3=gf->createMultiPolygon(&polygons);
>     TRACE_OUTPUT("Creating string");
>     resStr = geom3->toString();
> 
>     //clean up
>     delete geom3;
>     delete gf;
>   }
>   catch (GEOSException *ge) {
>     errMsg = ge->toString();
>   }
>   return resStr;
> }
> 
> XML read in by class and stored in ptPolygons:
> <?xml version="1.0" encoding="UTF-8"?>
> <AreaDefinition>
> <GDSRequest>
> <query>
> <AreaQuery outputContent="public">
> <queryArea>
> <Polygon srsName="osgb:BNG">
> <outerBoundaryIs>
> <LinearRing>
> <coordinates>
> 339252,1019302
> 339252,1029077
> 348752,1029077
> 346102,1019653
> 339252,1019302
> </coordinates>
> </LinearRing>
> </outerBoundaryIs>
> <innerBoundaryIs>
> <LinearRing>
> <coordinates>
> 340000,1020000
> 340000,1021000
> 341000,1021000
> 341000,1020000
> 340000,1020000
> </coordinates>
> </LinearRing>
> </innerBoundaryIs>
> </Polygon>
> </queryArea>
> </AreaQuery>
> </query>
> </GDSRequest>
> </AreaDefinition>
> 
> Output:
> TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> TR:   Polygon 0
> TR:   Added point 339252,1.0193e+06
> TR:   Added point 339252,1.02908e+06
> TR:   Added point 348752,1.02908e+06
> TR:   Added point 346102,1.01965e+06
> TR:   Added point 339252,1.0193e+06
> TR:   Hole 1
> TR:   Added point 340000,1.02e+06
> TR:   Added point 340000,1.021e+06
> TR:   Added point 341000,1.021e+06
> TR:   Added point 341000,1.02e+06
> TR:   Added point 340000,1.02e+06
> TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> TR:   test
> Segmentation fault
> 
> Output when the hole is removed:
> TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> TR:   Polygon 0
> TR:   Added point 339252,1.0193e+06
> TR:   Added point 339252,1.02908e+06
> TR:   Added point 348752,1.02908e+06
> TR:   Added point 346102,1.01965e+06
> TR:   Added point 339252,1.0193e+06
> TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> TR:   test
> TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> TR:   Adding polygon 0
> TR:   Creating multi-polygon
> TR:   Creating string
> TR: TRACE EXIT:c_polygon_gml::WKTString
> ERROR:
> WTF format
> MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> 
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 28 June 2004 11:01
> To: GEOS Development List
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> Can you send the test code ?
> There are currently no known bug ...
> --strk;
> 
> On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > Hi all,
> > 
> > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > 
> > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > 
> > I am using version 1.0.
> > 
> > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > 
> > Is there a fix for this, or has anyone come accross it?
> > 
> > Thanks in advance,
> > Darren
> > 
> > 
> > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Mon Jun 28 06:47:17 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B87D4@itl-serv1.infoterra-global.com>

#include <geos/io.h>
#include <geos/geom.h>

using namespace std;
using namespace geos;

typedef struct boundaryPt {
  double x;
  double y;
};
typedef vector<boundaryPt>    boundary;
typedef vector<boundary>      boundaryList;
typedef vector<boundaryList>  polygonList;

polygonList       ptPolygons;

int main(int argc, char *argv[]) {
  vector<Geometry *> polygons;
  vector<Geometry *> holes;
  int i,j,k;
  string resStr = "";

  boundaryPt poly1[5];
  boundaryPt hole1[5];
  boundary tmpBoundary;
  boundaryList tmpBoundaryList;
  polygonList ptPolygons;

  poly1[0].x = 339252;
  poly1[0].y = 1019302;
  poly1[1].x = 339252;
  poly1[1].y = 1029077;
  poly1[2].x = 348752;
  poly1[2].y = 1029077;
  poly1[3].x = 346102;
  poly1[3].y = 1019653;
  poly1[4].x = 339252;
  poly1[4].y = 1019302;

  hole1[0].x = 340000;
  hole1[0].y = 1020000;
  hole1[1].x = 340000;
  hole1[1].y = 1021000;
  hole1[2].x = 341000;
  hole1[2].y = 1021000;
  hole1[3].x = 341000;
  hole1[3].y = 1020000;
  hole1[4].x = 340000;
  hole1[4].y = 1020000;

  for (i=0; i<5; i++) {
    tmpBoundary.push_back(poly1[i]);
  }
  tmpBoundaryList.push_back(tmpBoundary);
  tmpBoundary.clear();

  for (i=0; i<5; i++) {
    tmpBoundary.push_back(hole1[i]);
  }
  tmpBoundaryList.push_back(tmpBoundary);
  tmpBoundary.clear();

  ptPolygons.push_back(tmpBoundaryList);
  for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
    tmpBoundaryList[i].clear();
  }
  tmpBoundaryList.clear();


  try{
    GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);

    // for each outer ring create a CoordinateList and add all the points to it
    for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
      CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
      boundaryList bl = ptPolygons[i];
      boundary b = bl[0];
      cout << "Polygon " << i << endl;
      for(k=0; k< static_cast<int>(b.size()); k++) {
        cout << "Added point " << b[k].x << ',' << b[k].y << endl;
        cl1->add(*(new Coordinate(b[k].x,b[k].y)));
      }

      // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
      for(j=1; j< static_cast<int>(bl.size()); j++) {
        cout << "Hole " << j << endl;
        boundary b = bl[j];
        CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
        for(k=0; k< static_cast<int>(b.size()); k++) {
          cout << "Added point " << b[k].x << ',' << b[k].y << endl;
          cl2->add(*(new Coordinate(b[k].x,b[k].y)));
        }
        cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
        Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
        cout << "Geometry " << j << " : " << geom1->toString() << endl;
        holes.push_back(geom1);
        delete cl2;
      }
      // create a polygon from the 1st CoordinateList and the holes
      cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
      Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
      cout << "test " << endl;
      cout << "Geometry " << i << " : " << geom2->toString() << endl;

      // save this polygon in another vector
      cout << "Adding polygon " << i << endl;
      polygons.push_back(geom2);
      delete cl1;
    }
    cout << "Creating multi-polygon" << endl;
    // when all done create a MultiPolygon object
    Geometry *geom3=gf->createMultiPolygon(&polygons);
    cout << "Creating string" << endl;
    resStr = geom3->toString();

    //clean up
    delete geom3;
    delete gf;
  }
  catch (GEOSException *ge) {
    cout << "ERROR: " << ge->toString() << endl;
  }
  cout << resStr << endl;
}

-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 28 June 2004 11:28
To: GEOS Development List
Subject: Re: [geos-devel] Problems creating polygons with holes


Can you produce a neter code exploiting the bug ?
I mean a .cpp file I can compile and run and debug :)

-strk;

On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> defs:
> typedef struct boundaryPt {
>   double x;
>   double y;
> };
> typedef vector<boundaryPt>    boundary;
> typedef vector<boundary>      boundaryList;
> typedef vector<boundaryList>  polygonList;
> 
> class members used:
>   polygonList       ptPolygons;
>   string tmpStr;
>   string errMsg;
> 
> class function:
> string c_polygon_gml::WKTString(void) {
>   TRACE_FUNC("c_polygon_gml::WKTString");
>   vector<Geometry *> polygons;
>   vector<Geometry *> holes;
>   int i,j,k;
>   string resStr = "";
> 
>   try{
>     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>     // for each outer ring create a CoordinateList and add all the points to it
>     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
>       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
>       boundaryList bl = ptPolygons[i];
>       boundary b = bl[0];
>       TRACE_OUTPUT("Polygon " << i);
>       for(k=0; k< static_cast<int>(b.size()); k++) {
>         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
>         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
>       }
> 
>       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
>       for(j=1; j< static_cast<int>(bl.size()); j++) {
>         TRACE_OUTPUT("Hole " << j);
>         boundary b = bl[j];
>         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
>         for(k=0; k< static_cast<int>(b.size()); k++) {
>           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
>           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
>         }
>         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
>         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
>         holes.push_back(geom1);
>         delete cl2;
>       }
>       // create a polygon from the 1st CoordinateList and the holes
>       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
>       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
>       TRACE_OUTPUT("test ");
>       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> 
>       // save this polygon in another vector
>       TRACE_OUTPUT("Adding polygon " << i);
>       polygons.push_back(geom2);
>       delete cl1;
>     }
>     TRACE_OUTPUT("Creating multi-polygon");
>     // when all done create a MultiPolygon object
>     Geometry *geom3=gf->createMultiPolygon(&polygons);
>     TRACE_OUTPUT("Creating string");
>     resStr = geom3->toString();
> 
>     //clean up
>     delete geom3;
>     delete gf;
>   }
>   catch (GEOSException *ge) {
>     errMsg = ge->toString();
>   }
>   return resStr;
> }
> 
> XML read in by class and stored in ptPolygons:
> <?xml version="1.0" encoding="UTF-8"?>
> <AreaDefinition>
> <GDSRequest>
> <query>
> <AreaQuery outputContent="public">
> <queryArea>
> <Polygon srsName="osgb:BNG">
> <outerBoundaryIs>
> <LinearRing>
> <coordinates>
> 339252,1019302
> 339252,1029077
> 348752,1029077
> 346102,1019653
> 339252,1019302
> </coordinates>
> </LinearRing>
> </outerBoundaryIs>
> <innerBoundaryIs>
> <LinearRing>
> <coordinates>
> 340000,1020000
> 340000,1021000
> 341000,1021000
> 341000,1020000
> 340000,1020000
> </coordinates>
> </LinearRing>
> </innerBoundaryIs>
> </Polygon>
> </queryArea>
> </AreaQuery>
> </query>
> </GDSRequest>
> </AreaDefinition>
> 
> Output:
> TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> TR:   Polygon 0
> TR:   Added point 339252,1.0193e+06
> TR:   Added point 339252,1.02908e+06
> TR:   Added point 348752,1.02908e+06
> TR:   Added point 346102,1.01965e+06
> TR:   Added point 339252,1.0193e+06
> TR:   Hole 1
> TR:   Added point 340000,1.02e+06
> TR:   Added point 340000,1.021e+06
> TR:   Added point 341000,1.021e+06
> TR:   Added point 341000,1.02e+06
> TR:   Added point 340000,1.02e+06
> TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> TR:   test
> Segmentation fault
> 
> Output when the hole is removed:
> TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> TR:   Polygon 0
> TR:   Added point 339252,1.0193e+06
> TR:   Added point 339252,1.02908e+06
> TR:   Added point 348752,1.02908e+06
> TR:   Added point 346102,1.01965e+06
> TR:   Added point 339252,1.0193e+06
> TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> TR:   test
> TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> TR:   Adding polygon 0
> TR:   Creating multi-polygon
> TR:   Creating string
> TR: TRACE EXIT:c_polygon_gml::WKTString
> ERROR:
> WTF format
> MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> 
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 28 June 2004 11:01
> To: GEOS Development List
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> Can you send the test code ?
> There are currently no known bug ...
> --strk;
> 
> On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > Hi all,
> > 
> > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > 
> > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > 
> > I am using version 1.0.
> > 
> > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > 
> > Is there a fix for this, or has anyone come accross it?
> > 
> > Thanks in advance,
> > Darren
> > 
> > 
> > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Jun 28 15:58:54 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B87D4@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B87D4@itl-serv1.infoterra-global.com>
Message-ID: <20040628195854.GA56051@freek.keybit.net>

I could not find the problem.
Here is a reduced code exploiting the error.
I'll keep inspecting this...

BTW: I don't feel comportable in Polygon constructor taking
ownership of passed arguments, what people think about modifying
this as well ?

--strk;

//--------------------------8<-------------------

#include <geos/io.h>
#include <geos/geom.h>
#include <geos/util.h>

using namespace std;
using namespace geos;

int main(int argc, char *argv[]) {
        Coordinate c;
        CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
        CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();

        c.x = 339252; c.y = 1019302; cl1->add(c);
        c.x = 339252; c.y = 1029077; cl1->add(c);
        c.x = 348752; c.y = 1029077; cl1->add(c);
        c.x = 346102; c.y = 1019653; cl1->add(c);
        c.x = 339252; c.y = 1019302; cl1->add(c);

        c.x = 340000; c.y = 1020000; cl2->add(c);
        c.x = 340000; c.y = 1021000; cl2->add(c);
        c.x = 341000; c.y = 1021000; cl2->add(c);
        c.x = 341000; c.y = 1020000; cl2->add(c);
        c.x = 340000; c.y = 1020000; cl2->add(c);

        try {
                GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);

                Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
                cout<<"geom1: "<<geom1->toString()<<endl;
                Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
                cout<<"geom2: "<<geom2->toString()<<endl;
                vector<Geometry*>*holes = new vector<Geometry*>(1);
                (*holes)[0] = geom2->clone();
                Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
                cout<<"geom3: "<<geom3->toString()<<endl;
                delete cl1;
                delete cl2;
        } catch (GEOSException *ge) {
                cout << "ERROR: " << ge->toString() << endl;
        } catch (...) {
                cout << "generic ERROR" << endl;
        }
}

//--------------------------8<-------------------


On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> #include <geos/io.h>
> #include <geos/geom.h>
> 
> using namespace std;
> using namespace geos;
> 
> typedef struct boundaryPt {
>   double x;
>   double y;
> };
> typedef vector<boundaryPt>    boundary;
> typedef vector<boundary>      boundaryList;
> typedef vector<boundaryList>  polygonList;
> 
> polygonList       ptPolygons;
> 
> int main(int argc, char *argv[]) {
>   vector<Geometry *> polygons;
>   vector<Geometry *> holes;
>   int i,j,k;
>   string resStr = "";
> 
>   boundaryPt poly1[5];
>   boundaryPt hole1[5];
>   boundary tmpBoundary;
>   boundaryList tmpBoundaryList;
>   polygonList ptPolygons;
> 
>   poly1[0].x = 339252;
>   poly1[0].y = 1019302;
>   poly1[1].x = 339252;
>   poly1[1].y = 1029077;
>   poly1[2].x = 348752;
>   poly1[2].y = 1029077;
>   poly1[3].x = 346102;
>   poly1[3].y = 1019653;
>   poly1[4].x = 339252;
>   poly1[4].y = 1019302;
> 
>   hole1[0].x = 340000;
>   hole1[0].y = 1020000;
>   hole1[1].x = 340000;
>   hole1[1].y = 1021000;
>   hole1[2].x = 341000;
>   hole1[2].y = 1021000;
>   hole1[3].x = 341000;
>   hole1[3].y = 1020000;
>   hole1[4].x = 340000;
>   hole1[4].y = 1020000;
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(poly1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(hole1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   ptPolygons.push_back(tmpBoundaryList);
>   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
>     tmpBoundaryList[i].clear();
>   }
>   tmpBoundaryList.clear();
> 
> 
>   try{
>     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>     // for each outer ring create a CoordinateList and add all the points to it
>     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
>       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
>       boundaryList bl = ptPolygons[i];
>       boundary b = bl[0];
>       cout << "Polygon " << i << endl;
>       for(k=0; k< static_cast<int>(b.size()); k++) {
>         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
>       }
> 
>       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
>       for(j=1; j< static_cast<int>(bl.size()); j++) {
>         cout << "Hole " << j << endl;
>         boundary b = bl[j];
>         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
>         for(k=0; k< static_cast<int>(b.size()); k++) {
>           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
>         }
>         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
>         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>         cout << "Geometry " << j << " : " << geom1->toString() << endl;
>         holes.push_back(geom1);
>         delete cl2;
>       }
>       // create a polygon from the 1st CoordinateList and the holes
>       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
>       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
>       cout << "test " << endl;
>       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> 
>       // save this polygon in another vector
>       cout << "Adding polygon " << i << endl;
>       polygons.push_back(geom2);
>       delete cl1;
>     }
>     cout << "Creating multi-polygon" << endl;
>     // when all done create a MultiPolygon object
>     Geometry *geom3=gf->createMultiPolygon(&polygons);
>     cout << "Creating string" << endl;
>     resStr = geom3->toString();
> 
>     //clean up
>     delete geom3;
>     delete gf;
>   }
>   catch (GEOSException *ge) {
>     cout << "ERROR: " << ge->toString() << endl;
>   }
>   cout << resStr << endl;
> }
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 28 June 2004 11:28
> To: GEOS Development List
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> Can you produce a neter code exploiting the bug ?
> I mean a .cpp file I can compile and run and debug :)
> 
> -strk;
> 
> On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > defs:
> > typedef struct boundaryPt {
> >   double x;
> >   double y;
> > };
> > typedef vector<boundaryPt>    boundary;
> > typedef vector<boundary>      boundaryList;
> > typedef vector<boundaryList>  polygonList;
> > 
> > class members used:
> >   polygonList       ptPolygons;
> >   string tmpStr;
> >   string errMsg;
> > 
> > class function:
> > string c_polygon_gml::WKTString(void) {
> >   TRACE_FUNC("c_polygon_gml::WKTString");
> >   vector<Geometry *> polygons;
> >   vector<Geometry *> holes;
> >   int i,j,k;
> >   string resStr = "";
> > 
> >   try{
> >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >     // for each outer ring create a CoordinateList and add all the points to it
> >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> >       boundaryList bl = ptPolygons[i];
> >       boundary b = bl[0];
> >       TRACE_OUTPUT("Polygon " << i);
> >       for(k=0; k< static_cast<int>(b.size()); k++) {
> >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> >       }
> > 
> >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> >         TRACE_OUTPUT("Hole " << j);
> >         boundary b = bl[j];
> >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> >         for(k=0; k< static_cast<int>(b.size()); k++) {
> >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> >         }
> >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> >         holes.push_back(geom1);
> >         delete cl2;
> >       }
> >       // create a polygon from the 1st CoordinateList and the holes
> >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> >       TRACE_OUTPUT("test ");
> >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > 
> >       // save this polygon in another vector
> >       TRACE_OUTPUT("Adding polygon " << i);
> >       polygons.push_back(geom2);
> >       delete cl1;
> >     }
> >     TRACE_OUTPUT("Creating multi-polygon");
> >     // when all done create a MultiPolygon object
> >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> >     TRACE_OUTPUT("Creating string");
> >     resStr = geom3->toString();
> > 
> >     //clean up
> >     delete geom3;
> >     delete gf;
> >   }
> >   catch (GEOSException *ge) {
> >     errMsg = ge->toString();
> >   }
> >   return resStr;
> > }
> > 
> > XML read in by class and stored in ptPolygons:
> > <?xml version="1.0" encoding="UTF-8"?>
> > <AreaDefinition>
> > <GDSRequest>
> > <query>
> > <AreaQuery outputContent="public">
> > <queryArea>
> > <Polygon srsName="osgb:BNG">
> > <outerBoundaryIs>
> > <LinearRing>
> > <coordinates>
> > 339252,1019302
> > 339252,1029077
> > 348752,1029077
> > 346102,1019653
> > 339252,1019302
> > </coordinates>
> > </LinearRing>
> > </outerBoundaryIs>
> > <innerBoundaryIs>
> > <LinearRing>
> > <coordinates>
> > 340000,1020000
> > 340000,1021000
> > 341000,1021000
> > 341000,1020000
> > 340000,1020000
> > </coordinates>
> > </LinearRing>
> > </innerBoundaryIs>
> > </Polygon>
> > </queryArea>
> > </AreaQuery>
> > </query>
> > </GDSRequest>
> > </AreaDefinition>
> > 
> > Output:
> > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > TR:   Polygon 0
> > TR:   Added point 339252,1.0193e+06
> > TR:   Added point 339252,1.02908e+06
> > TR:   Added point 348752,1.02908e+06
> > TR:   Added point 346102,1.01965e+06
> > TR:   Added point 339252,1.0193e+06
> > TR:   Hole 1
> > TR:   Added point 340000,1.02e+06
> > TR:   Added point 340000,1.021e+06
> > TR:   Added point 341000,1.021e+06
> > TR:   Added point 341000,1.02e+06
> > TR:   Added point 340000,1.02e+06
> > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > TR:   test
> > Segmentation fault
> > 
> > Output when the hole is removed:
> > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > TR:   Polygon 0
> > TR:   Added point 339252,1.0193e+06
> > TR:   Added point 339252,1.02908e+06
> > TR:   Added point 348752,1.02908e+06
> > TR:   Added point 346102,1.01965e+06
> > TR:   Added point 339252,1.0193e+06
> > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > TR:   test
> > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > TR:   Adding polygon 0
> > TR:   Creating multi-polygon
> > TR:   Creating string
> > TR: TRACE EXIT:c_polygon_gml::WKTString
> > ERROR:
> > WTF format
> > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > 
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 11:01
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Can you send the test code ?
> > There are currently no known bug ...
> > --strk;
> > 
> > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > Hi all,
> > > 
> > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > 
> > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > 
> > > I am using version 1.0.
> > > 
> > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > 
> > > Is there a fix for this, or has anyone come accross it?
> > > 
> > > Thanks in advance,
> > > Darren
> > > 
> > > 
> > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Jun 28 16:37:03 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <20040628195854.GA56051@freek.keybit.net>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B87D4@itl-serv1.infoterra-global.com>
	<20040628195854.GA56051@freek.keybit.net>
Message-ID: <20040628203703.GA58204@freek.keybit.net>

Ok. I've found the bug.
It is in your code (and in GEOS not handling it).

Main problem: you push a Polygon in the holes vector.
This - although defined as a Geometry vector - is indeed a LinearRing
vector, failing to enforce this typing does result in segfault
(not checked in Polygon.cpp).

Sub-problem1: your holes vector is an automatic variable, so it
is deleted when the code exits the block it is defined in.
The Polygon constructor copy the vector pointer and will delete it
at Polygon destructio time (I'd change this).

Sub-problem2: if I understood your code you are pushing in the
holes vector the geometries you previously created, with no cloning.
Again the Polygon constructor will take ownership of them (which should
be LinearRing) so you should ->clone() them before adding to the vector.

My proposal: make Polygon contructor deep copy shell and holes checking
for holes type to be LinearRing.

A question: why isn't holes a vector <LinearRing *> * ?

A note: I did not update CVS... I'd like to hear about my proposal first.

--strk;

On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> I could not find the problem.
> Here is a reduced code exploiting the error.
> I'll keep inspecting this...
> 
> BTW: I don't feel comportable in Polygon constructor taking
> ownership of passed arguments, what people think about modifying
> this as well ?
> 
> --strk;
> 
> //--------------------------8<-------------------
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> #include <geos/util.h>
> 
> using namespace std;
> using namespace geos;
> 
> int main(int argc, char *argv[]) {
>         Coordinate c;
>         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
>         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> 
>         c.x = 339252; c.y = 1019302; cl1->add(c);
>         c.x = 339252; c.y = 1029077; cl1->add(c);
>         c.x = 348752; c.y = 1029077; cl1->add(c);
>         c.x = 346102; c.y = 1019653; cl1->add(c);
>         c.x = 339252; c.y = 1019302; cl1->add(c);
> 
>         c.x = 340000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1020000; cl2->add(c);
> 
>         try {
>                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
>                 cout<<"geom1: "<<geom1->toString()<<endl;
>                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>                 cout<<"geom2: "<<geom2->toString()<<endl;
>                 vector<Geometry*>*holes = new vector<Geometry*>(1);
>                 (*holes)[0] = geom2->clone();
>                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
>                 cout<<"geom3: "<<geom3->toString()<<endl;
>                 delete cl1;
>                 delete cl2;
>         } catch (GEOSException *ge) {
>                 cout << "ERROR: " << ge->toString() << endl;
>         } catch (...) {
>                 cout << "generic ERROR" << endl;
>         }
> }
> 
> //--------------------------8<-------------------
> 
> 
> On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > typedef struct boundaryPt {
> >   double x;
> >   double y;
> > };
> > typedef vector<boundaryPt>    boundary;
> > typedef vector<boundary>      boundaryList;
> > typedef vector<boundaryList>  polygonList;
> > 
> > polygonList       ptPolygons;
> > 
> > int main(int argc, char *argv[]) {
> >   vector<Geometry *> polygons;
> >   vector<Geometry *> holes;
> >   int i,j,k;
> >   string resStr = "";
> > 
> >   boundaryPt poly1[5];
> >   boundaryPt hole1[5];
> >   boundary tmpBoundary;
> >   boundaryList tmpBoundaryList;
> >   polygonList ptPolygons;
> > 
> >   poly1[0].x = 339252;
> >   poly1[0].y = 1019302;
> >   poly1[1].x = 339252;
> >   poly1[1].y = 1029077;
> >   poly1[2].x = 348752;
> >   poly1[2].y = 1029077;
> >   poly1[3].x = 346102;
> >   poly1[3].y = 1019653;
> >   poly1[4].x = 339252;
> >   poly1[4].y = 1019302;
> > 
> >   hole1[0].x = 340000;
> >   hole1[0].y = 1020000;
> >   hole1[1].x = 340000;
> >   hole1[1].y = 1021000;
> >   hole1[2].x = 341000;
> >   hole1[2].y = 1021000;
> >   hole1[3].x = 341000;
> >   hole1[3].y = 1020000;
> >   hole1[4].x = 340000;
> >   hole1[4].y = 1020000;
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(poly1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(hole1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   ptPolygons.push_back(tmpBoundaryList);
> >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> >     tmpBoundaryList[i].clear();
> >   }
> >   tmpBoundaryList.clear();
> > 
> > 
> >   try{
> >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >     // for each outer ring create a CoordinateList and add all the points to it
> >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> >       boundaryList bl = ptPolygons[i];
> >       boundary b = bl[0];
> >       cout << "Polygon " << i << endl;
> >       for(k=0; k< static_cast<int>(b.size()); k++) {
> >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> >       }
> > 
> >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> >         cout << "Hole " << j << endl;
> >         boundary b = bl[j];
> >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> >         for(k=0; k< static_cast<int>(b.size()); k++) {
> >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> >         }
> >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> >         holes.push_back(geom1);
> >         delete cl2;
> >       }
> >       // create a polygon from the 1st CoordinateList and the holes
> >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> >       cout << "test " << endl;
> >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > 
> >       // save this polygon in another vector
> >       cout << "Adding polygon " << i << endl;
> >       polygons.push_back(geom2);
> >       delete cl1;
> >     }
> >     cout << "Creating multi-polygon" << endl;
> >     // when all done create a MultiPolygon object
> >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> >     cout << "Creating string" << endl;
> >     resStr = geom3->toString();
> > 
> >     //clean up
> >     delete geom3;
> >     delete gf;
> >   }
> >   catch (GEOSException *ge) {
> >     cout << "ERROR: " << ge->toString() << endl;
> >   }
> >   cout << resStr << endl;
> > }
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 11:28
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Can you produce a neter code exploiting the bug ?
> > I mean a .cpp file I can compile and run and debug :)
> > 
> > -strk;
> > 
> > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > defs:
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > class members used:
> > >   polygonList       ptPolygons;
> > >   string tmpStr;
> > >   string errMsg;
> > > 
> > > class function:
> > > string c_polygon_gml::WKTString(void) {
> > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       TRACE_OUTPUT("Polygon " << i);
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         TRACE_OUTPUT("Hole " << j);
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > >       TRACE_OUTPUT("test ");
> > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > 
> > >       // save this polygon in another vector
> > >       TRACE_OUTPUT("Adding polygon " << i);
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     TRACE_OUTPUT("Creating multi-polygon");
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     TRACE_OUTPUT("Creating string");
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     errMsg = ge->toString();
> > >   }
> > >   return resStr;
> > > }
> > > 
> > > XML read in by class and stored in ptPolygons:
> > > <?xml version="1.0" encoding="UTF-8"?>
> > > <AreaDefinition>
> > > <GDSRequest>
> > > <query>
> > > <AreaQuery outputContent="public">
> > > <queryArea>
> > > <Polygon srsName="osgb:BNG">
> > > <outerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 339252,1019302
> > > 339252,1029077
> > > 348752,1029077
> > > 346102,1019653
> > > 339252,1019302
> > > </coordinates>
> > > </LinearRing>
> > > </outerBoundaryIs>
> > > <innerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 340000,1020000
> > > 340000,1021000
> > > 341000,1021000
> > > 341000,1020000
> > > 340000,1020000
> > > </coordinates>
> > > </LinearRing>
> > > </innerBoundaryIs>
> > > </Polygon>
> > > </queryArea>
> > > </AreaQuery>
> > > </query>
> > > </GDSRequest>
> > > </AreaDefinition>
> > > 
> > > Output:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Hole 1
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Added point 340000,1.021e+06
> > > TR:   Added point 341000,1.021e+06
> > > TR:   Added point 341000,1.02e+06
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > Segmentation fault
> > > 
> > > Output when the hole is removed:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > TR:   Adding polygon 0
> > > TR:   Creating multi-polygon
> > > TR:   Creating string
> > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > ERROR:
> > > WTF format
> > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > 
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:01
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you send the test code ?
> > > There are currently no known bug ...
> > > --strk;
> > > 
> > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > Hi all,
> > > > 
> > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > 
> > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > 
> > > > I am using version 1.0.
> > > > 
> > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > 
> > > > Is there a fix for this, or has anyone come accross it?
> > > > 
> > > > Thanks in advance,
> > > > Darren
> > > > 
> > > > 
> > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From mbdavis at VividSolutions.com  Mon Jun 28 16:50:09 2004
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F54AD@venus.VividSolutions.com>

Strk:

IMO the current paradigm (that of constructors taking ownership of their
components) is the correct one.  The reason is to avoid unecessary
copying of argument data (which could be large).  It should be left up
to the caller to decide when and where they need to copy arguments.

Yes, this is a potential source of errors for clients, if they don't
understand how to properly use the library.  But the alternative forces
clients to tolerate extra overhead even when they don't need it, which
is not friendly behaviour from a library.

If this is really onerous, two versions of each constructor could be
provided.  Or possibly even better, a pattern & support class to make it
easy to copy arguments.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: strk [mailto:strk@keybit.net] 
> Sent: June 28, 2004 12:59 PM
> To: Darren Carman
> Cc: GEOS Development List
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> I could not find the problem.
> Here is a reduced code exploiting the error.
> I'll keep inspecting this...
> 
> BTW: I don't feel comportable in Polygon constructor taking 
> ownership of passed arguments, what people think about 
> modifying this as well ?
> 
> --strk;
> 
> //--------------------------8<-------------------
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> #include <geos/util.h>
> 
> using namespace std;
> using namespace geos;
> 
> int main(int argc, char *argv[]) {
>         Coordinate c;
>         CoordinateList *cl1 = 
> CoordinateListFactory::internalFactory->createCoordinateList();
>         CoordinateList *cl2 = 
> CoordinateListFactory::internalFactory->createCoordinateList();
> 
>         c.x = 339252; c.y = 1019302; cl1->add(c);
>         c.x = 339252; c.y = 1029077; cl1->add(c);
>         c.x = 348752; c.y = 1029077; cl1->add(c);
>         c.x = 346102; c.y = 1019653; cl1->add(c);
>         c.x = 339252; c.y = 1019302; cl1->add(c);
> 
>         c.x = 340000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1020000; cl2->add(c);
> 
>         try {
>                 GeometryFactory *gf=new GeometryFactory(new 
> PrecisionModel(),0);
> 
>                 Geometry 
> *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
>                 cout<<"geom1: "<<geom1->toString()<<endl;
>                 Geometry 
> *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>                 cout<<"geom2: "<<geom2->toString()<<endl;
>                 vector<Geometry*>*holes = new vector<Geometry*>(1);
>                 (*holes)[0] = geom2->clone();
>                 Geometry 
> *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
>                 cout<<"geom3: "<<geom3->toString()<<endl;
>                 delete cl1;
>                 delete cl2;
>         } catch (GEOSException *ge) {
>                 cout << "ERROR: " << ge->toString() << endl;
>         } catch (...) {
>                 cout << "generic ERROR" << endl;
>         }
> }
> 
> //--------------------------8<-------------------
> 
> 
> On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > typedef struct boundaryPt {
> >   double x;
> >   double y;
> > };
> > typedef vector<boundaryPt>    boundary;
> > typedef vector<boundary>      boundaryList;
> > typedef vector<boundaryList>  polygonList;
> > 
> > polygonList       ptPolygons;
> > 
> > int main(int argc, char *argv[]) {
> >   vector<Geometry *> polygons;
> >   vector<Geometry *> holes;
> >   int i,j,k;
> >   string resStr = "";
> > 
> >   boundaryPt poly1[5];
> >   boundaryPt hole1[5];
> >   boundary tmpBoundary;
> >   boundaryList tmpBoundaryList;
> >   polygonList ptPolygons;
> > 
> >   poly1[0].x = 339252;
> >   poly1[0].y = 1019302;
> >   poly1[1].x = 339252;
> >   poly1[1].y = 1029077;
> >   poly1[2].x = 348752;
> >   poly1[2].y = 1029077;
> >   poly1[3].x = 346102;
> >   poly1[3].y = 1019653;
> >   poly1[4].x = 339252;
> >   poly1[4].y = 1019302;
> > 
> >   hole1[0].x = 340000;
> >   hole1[0].y = 1020000;
> >   hole1[1].x = 340000;
> >   hole1[1].y = 1021000;
> >   hole1[2].x = 341000;
> >   hole1[2].y = 1021000;
> >   hole1[3].x = 341000;
> >   hole1[3].y = 1020000;
> >   hole1[4].x = 340000;
> >   hole1[4].y = 1020000;
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(poly1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(hole1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   ptPolygons.push_back(tmpBoundaryList);
> >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> >     tmpBoundaryList[i].clear();
> >   }
> >   tmpBoundaryList.clear();
> > 
> > 
> >   try{
> >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >     // for each outer ring create a CoordinateList and add 
> all the points to it
> >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> >       CoordinateList 
> *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> >       boundaryList bl = ptPolygons[i];
> >       boundary b = bl[0];
> >       cout << "Polygon " << i << endl;
> >       for(k=0; k< static_cast<int>(b.size()); k++) {
> >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> >       }
> > 
> >       // for each hole create a coordinate list like above, 
> create a polygon and add to a Geometry vector
> >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> >         cout << "Hole " << j << endl;
> >         boundary b = bl[j];
> >         CoordinateList 
> *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> >         for(k=0; k< static_cast<int>(b.size()); k++) {
> >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> >         }
> >         cout << "Creating polygon for hole " << j << ": " 
> << cl2->toString() << endl;
> >         Geometry 
> *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >         cout << "Geometry " << j << " : " << 
> geom1->toString() << endl;
> >         holes.push_back(geom1);
> >         delete cl2;
> >       }
> >       // create a polygon from the 1st CoordinateList and the holes
> >       cout << "Creating polygon " << i << ": " << 
> cl1->toString() << endl;
> >       Geometry 
> *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);   
>                                           
> >       cout << "test " << endl;
> >       cout << "Geometry " << i << " : " << 
> geom2->toString() << endl;
> > 
> >       // save this polygon in another vector
> >       cout << "Adding polygon " << i << endl;
> >       polygons.push_back(geom2);
> >       delete cl1;
> >     }
> >     cout << "Creating multi-polygon" << endl;
> >     // when all done create a MultiPolygon object
> >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> >     cout << "Creating string" << endl;
> >     resStr = geom3->toString();
> > 
> >     //clean up
> >     delete geom3;
> >     delete gf;
> >   }
> >   catch (GEOSException *ge) {
> >     cout << "ERROR: " << ge->toString() << endl;
> >   }
> >   cout << resStr << endl;
> > }
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 11:28
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Can you produce a neter code exploiting the bug ?
> > I mean a .cpp file I can compile and run and debug :)
> > 
> > -strk;
> > 
> > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > defs:
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > class members used:
> > >   polygonList       ptPolygons;
> > >   string tmpStr;
> > >   string errMsg;
> > > 
> > > class function:
> > > string c_polygon_gml::WKTString(void) {
> > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new 
> PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and 
> add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList 
> *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       TRACE_OUTPUT("Polygon " << i);
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like 
> above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         TRACE_OUTPUT("Hole " << j);
> > >         boundary b = bl[j];
> > >         CoordinateList 
> *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         TRACE_OUTPUT("Creating polygon for hole " << j << 
> ": " << cl2->toString());
> > >         Geometry 
> *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         TRACE_OUTPUT("Geometry " << j << " : " << 
> geom1->toString());
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and 
> the holes
> > >       TRACE_OUTPUT("Creating polygon " << i << ": " << 
> cl1->toString());
> > >       Geometry 
> *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > >       TRACE_OUTPUT("test ");
> > >       TRACE_OUTPUT("Geometry " << i << " : " << 
> geom2->toString());
> > > 
> > >       // save this polygon in another vector
> > >       TRACE_OUTPUT("Adding polygon " << i);
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     TRACE_OUTPUT("Creating multi-polygon");
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     TRACE_OUTPUT("Creating string");
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     errMsg = ge->toString();
> > >   }
> > >   return resStr;
> > > }
> > > 
> > > XML read in by class and stored in ptPolygons:
> > > <?xml version="1.0" encoding="UTF-8"?>
> > > <AreaDefinition>
> > > <GDSRequest>
> > > <query>
> > > <AreaQuery outputContent="public">
> > > <queryArea>
> > > <Polygon srsName="osgb:BNG">
> > > <outerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 339252,1019302
> > > 339252,1029077
> > > 348752,1029077
> > > 346102,1019653
> > > 339252,1019302
> > > </coordinates>
> > > </LinearRing>
> > > </outerBoundaryIs>
> > > <innerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 340000,1020000
> > > 340000,1021000
> > > 341000,1021000
> > > 341000,1020000
> > > 340000,1020000
> > > </coordinates>
> > > </LinearRing>
> > > </innerBoundaryIs>
> > > </Polygon>
> > > </queryArea>
> > > </AreaQuery>
> > > </query>
> > > </GDSRequest>
> > > </AreaDefinition>
> > > 
> > > Output:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file 
> c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Hole 1
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Added point 340000,1.021e+06
> > > TR:   Added point 341000,1.021e+06
> > > TR:   Added point 341000,1.02e+06
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Creating polygon for hole 1: 
> (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) 
> (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) 
> (340000,1.02e+06,1.7e-308)
> > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 
> 1020000.0000000000000000, 340000.0000000000000000 
> 1021000.0000000000000000, 341000.0000000000000000 
> 1021000.0000000000000000, 341000.0000000000000000 
> 1020000.0000000000000000, 340000.0000000000000000 
> 1020000.0000000000000000))
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) 
> (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) 
> (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > Segmentation fault
> > > 
> > > Output when the hole is removed:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file 
> c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) 
> (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) 
> (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 
> 1019302.0000000000000000, 339252.0000000000000000 
> 1029077.0000000000000000, 348752.0000000000000000 
> 1029077.0000000000000000, 346102.0000000000000000 
> 1019653.0000000000000000, 339252.0000000000000000 
> 1019302.0000000000000000))
> > > TR:   Adding polygon 0
> > > TR:   Creating multi-polygon
> > > TR:   Creating string
> > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > ERROR:
> > > WTF format
> > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 
> > > 339252.0000000000000000 1029077.0000000000000000, 
> > > 348752.0000000000000000 1029077.0000000000000000, 
> > > 346102.0000000000000000 1019653.0000000000000000, 
> > > 339252.0000000000000000 1019302.0000000000000000)))
> > > 
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:01
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you send the test code ?
> > > There are currently no known bug ...
> > > --strk;
> > > 
> > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > Hi all,
> > > > 
> > > > I am creating polygons with holes and want to use geos 
> to allow me 
> > > > to output them in WKT.
> > > > 
> > > > A polygon without a hole works fine, but as soon as I 
> add a hole I 
> > > > get a segmentation fault after calling the 
> createPolygon function 
> > > > (GeometryFactory) and trying to run toString on that polygon.
> > > > 
> > > > I am using version 1.0.
> > > > 
> > > > I have tried getting the latest version from CVS but 
> this causes a 
> > > > segmentation fault to occur while adding the 5th polygon 
> > > > coordinate to the CoordinateList (there are only 4 
> coordinates in 
> > > > the test polygon, the 5th being the first one repeated 
> - I tried 
> > > > making it 6 to see if it was a problem with closing the polygon 
> > > > but I still got a segmentation fault while adding the 5th).
> > > > 
> > > > Is there a fix for this, or has anyone come accross it?
> > > > 
> > > > Thanks in advance,
> > > > Darren
> > > > 
> > > > 
> > > > "The information in this e-mail and any attachment is 
> confidential 
> > > > and may be privileged. If you have received this e-mail 
> in error, 
> > > > please delete it immediately and destroy any copies on your 
> > > > system. You should not retain, copy or use this e-mail for any 
> > > > purpose, nor disclose all or any part of its content to 
> any other 
> > > > person. Opinions expressed in this e-mail may not be 
> endorsed by 
> > > > the company and unless explicitly indicated, this 
> e-mail shall not 
> > > > form part of any binding agreement".
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net 
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at keybit.net  Mon Jun 28 16:59:24 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F54AD@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0274F54AD@venus.VividSolutions.com>
Message-ID: <20040628205924.GB58204@freek.keybit.net>

On Mon, Jun 28, 2004 at 01:50:09PM -0700, Martin Davis wrote:
> Strk:
> 
> IMO the current paradigm (that of constructors taking ownership of their
> components) is the correct one.  The reason is to avoid unecessary
> copying of argument data (which could be large).  It should be left up
> to the caller to decide when and where they need to copy arguments.
> 
> Yes, this is a potential source of errors for clients, if they don't
> understand how to properly use the library.  But the alternative forces
> clients to tolerate extra overhead even when they don't need it, which
> is not friendly behaviour from a library.
> 
> If this is really onerous, two versions of each constructor could be
> provided.  Or possibly even better, a pattern & support class to make it
> easy to copy arguments.

Unfortunately geos-1.0 was released with mixed policy, which is what
I'm trying to conform now.

I like the idea of letting callers specify whether or not to take
ownership and so far duplicationg each constructor seems the cleaner
way (adding a parameter takeOwnership would make all const correctness
useless and will require modifications in many places).

What do you mean by pattern & support class ?

--strk;


> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net] 
> > Sent: June 28, 2004 12:59 PM
> > To: Darren Carman
> > Cc: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > I could not find the problem.
> > Here is a reduced code exploiting the error.
> > I'll keep inspecting this...
> > 
> > BTW: I don't feel comportable in Polygon constructor taking 
> > ownership of passed arguments, what people think about 
> > modifying this as well ?
> > 
> > --strk;
> > 
> > //--------------------------8<-------------------
> > 
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > #include <geos/util.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > int main(int argc, char *argv[]) {
> >         Coordinate c;
> >         CoordinateList *cl1 = 
> > CoordinateListFactory::internalFactory->createCoordinateList();
> >         CoordinateList *cl2 = 
> > CoordinateListFactory::internalFactory->createCoordinateList();
> > 
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> >         c.x = 339252; c.y = 1029077; cl1->add(c);
> >         c.x = 348752; c.y = 1029077; cl1->add(c);
> >         c.x = 346102; c.y = 1019653; cl1->add(c);
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > 
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > 
> >         try {
> >                 GeometryFactory *gf=new GeometryFactory(new 
> > PrecisionModel(),0);
> > 
> >                 Geometry 
> > *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> >                 cout<<"geom1: "<<geom1->toString()<<endl;
> >                 Geometry 
> > *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >                 cout<<"geom2: "<<geom2->toString()<<endl;
> >                 vector<Geometry*>*holes = new vector<Geometry*>(1);
> >                 (*holes)[0] = geom2->clone();
> >                 Geometry 
> > *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> >                 cout<<"geom3: "<<geom3->toString()<<endl;
> >                 delete cl1;
> >                 delete cl2;
> >         } catch (GEOSException *ge) {
> >                 cout << "ERROR: " << ge->toString() << endl;
> >         } catch (...) {
> >                 cout << "generic ERROR" << endl;
> >         }
> > }
> > 
> > //--------------------------8<-------------------
> > 
> > 
> > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > #include <geos/io.h>
> > > #include <geos/geom.h>
> > > 
> > > using namespace std;
> > > using namespace geos;
> > > 
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > polygonList       ptPolygons;
> > > 
> > > int main(int argc, char *argv[]) {
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   boundaryPt poly1[5];
> > >   boundaryPt hole1[5];
> > >   boundary tmpBoundary;
> > >   boundaryList tmpBoundaryList;
> > >   polygonList ptPolygons;
> > > 
> > >   poly1[0].x = 339252;
> > >   poly1[0].y = 1019302;
> > >   poly1[1].x = 339252;
> > >   poly1[1].y = 1029077;
> > >   poly1[2].x = 348752;
> > >   poly1[2].y = 1029077;
> > >   poly1[3].x = 346102;
> > >   poly1[3].y = 1019653;
> > >   poly1[4].x = 339252;
> > >   poly1[4].y = 1019302;
> > > 
> > >   hole1[0].x = 340000;
> > >   hole1[0].y = 1020000;
> > >   hole1[1].x = 340000;
> > >   hole1[1].y = 1021000;
> > >   hole1[2].x = 341000;
> > >   hole1[2].y = 1021000;
> > >   hole1[3].x = 341000;
> > >   hole1[3].y = 1020000;
> > >   hole1[4].x = 340000;
> > >   hole1[4].y = 1020000;
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(poly1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(hole1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   ptPolygons.push_back(tmpBoundaryList);
> > >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> > >     tmpBoundaryList[i].clear();
> > >   }
> > >   tmpBoundaryList.clear();
> > > 
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add 
> > all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       cout << "Polygon " << i << endl;
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, 
> > create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         cout << "Hole " << j << endl;
> > >         boundary b = bl[j];
> > >         CoordinateList 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         cout << "Creating polygon for hole " << j << ": " 
> > << cl2->toString() << endl;
> > >         Geometry 
> > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         cout << "Geometry " << j << " : " << 
> > geom1->toString() << endl;
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       cout << "Creating polygon " << i << ": " << 
> > cl1->toString() << endl;
> > >       Geometry 
> > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);   
> >                                           
> > >       cout << "test " << endl;
> > >       cout << "Geometry " << i << " : " << 
> > geom2->toString() << endl;
> > > 
> > >       // save this polygon in another vector
> > >       cout << "Adding polygon " << i << endl;
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     cout << "Creating multi-polygon" << endl;
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     cout << "Creating string" << endl;
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     cout << "ERROR: " << ge->toString() << endl;
> > >   }
> > >   cout << resStr << endl;
> > > }
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:28
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you produce a neter code exploiting the bug ?
> > > I mean a .cpp file I can compile and run and debug :)
> > > 
> > > -strk;
> > > 
> > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > defs:
> > > > typedef struct boundaryPt {
> > > >   double x;
> > > >   double y;
> > > > };
> > > > typedef vector<boundaryPt>    boundary;
> > > > typedef vector<boundary>      boundaryList;
> > > > typedef vector<boundaryList>  polygonList;
> > > > 
> > > > class members used:
> > > >   polygonList       ptPolygons;
> > > >   string tmpStr;
> > > >   string errMsg;
> > > > 
> > > > class function:
> > > > string c_polygon_gml::WKTString(void) {
> > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > >   vector<Geometry *> polygons;
> > > >   vector<Geometry *> holes;
> > > >   int i,j,k;
> > > >   string resStr = "";
> > > > 
> > > >   try{
> > > >     GeometryFactory *gf=new GeometryFactory(new 
> > PrecisionModel(),0);
> > > > 
> > > >     // for each outer ring create a CoordinateList and 
> > add all the points to it
> > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > >       CoordinateList 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >       boundaryList bl = ptPolygons[i];
> > > >       boundary b = bl[0];
> > > >       TRACE_OUTPUT("Polygon " << i);
> > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >       }
> > > > 
> > > >       // for each hole create a coordinate list like 
> > above, create a polygon and add to a Geometry vector
> > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > >         TRACE_OUTPUT("Hole " << j);
> > > >         boundary b = bl[j];
> > > >         CoordinateList 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >         }
> > > >         TRACE_OUTPUT("Creating polygon for hole " << j << 
> > ": " << cl2->toString());
> > > >         Geometry 
> > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >         TRACE_OUTPUT("Geometry " << j << " : " << 
> > geom1->toString());
> > > >         holes.push_back(geom1);
> > > >         delete cl2;
> > > >       }
> > > >       // create a polygon from the 1st CoordinateList and 
> > the holes
> > > >       TRACE_OUTPUT("Creating polygon " << i << ": " << 
> > cl1->toString());
> > > >       Geometry 
> > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > >       TRACE_OUTPUT("test ");
> > > >       TRACE_OUTPUT("Geometry " << i << " : " << 
> > geom2->toString());
> > > > 
> > > >       // save this polygon in another vector
> > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > >       polygons.push_back(geom2);
> > > >       delete cl1;
> > > >     }
> > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > >     // when all done create a MultiPolygon object
> > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > >     TRACE_OUTPUT("Creating string");
> > > >     resStr = geom3->toString();
> > > > 
> > > >     //clean up
> > > >     delete geom3;
> > > >     delete gf;
> > > >   }
> > > >   catch (GEOSException *ge) {
> > > >     errMsg = ge->toString();
> > > >   }
> > > >   return resStr;
> > > > }
> > > > 
> > > > XML read in by class and stored in ptPolygons:
> > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > <AreaDefinition>
> > > > <GDSRequest>
> > > > <query>
> > > > <AreaQuery outputContent="public">
> > > > <queryArea>
> > > > <Polygon srsName="osgb:BNG">
> > > > <outerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 339252,1019302
> > > > 339252,1029077
> > > > 348752,1029077
> > > > 346102,1019653
> > > > 339252,1019302
> > > > </coordinates>
> > > > </LinearRing>
> > > > </outerBoundaryIs>
> > > > <innerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 340000,1020000
> > > > 340000,1021000
> > > > 341000,1021000
> > > > 341000,1020000
> > > > 340000,1020000
> > > > </coordinates>
> > > > </LinearRing>
> > > > </innerBoundaryIs>
> > > > </Polygon>
> > > > </queryArea>
> > > > </AreaQuery>
> > > > </query>
> > > > </GDSRequest>
> > > > </AreaDefinition>
> > > > 
> > > > Output:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file 
> > c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Hole 1
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Added point 340000,1.021e+06
> > > > TR:   Added point 341000,1.021e+06
> > > > TR:   Added point 341000,1.02e+06
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Creating polygon for hole 1: 
> > (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) 
> > (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) 
> > (340000,1.02e+06,1.7e-308)
> > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 
> > 1020000.0000000000000000, 340000.0000000000000000 
> > 1021000.0000000000000000, 341000.0000000000000000 
> > 1021000.0000000000000000, 341000.0000000000000000 
> > 1020000.0000000000000000, 340000.0000000000000000 
> > 1020000.0000000000000000))
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) 
> > (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) 
> > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > Segmentation fault
> > > > 
> > > > Output when the hole is removed:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file 
> > c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) 
> > (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) 
> > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 
> > 1019302.0000000000000000, 339252.0000000000000000 
> > 1029077.0000000000000000, 348752.0000000000000000 
> > 1029077.0000000000000000, 346102.0000000000000000 
> > 1019653.0000000000000000, 339252.0000000000000000 
> > 1019302.0000000000000000))
> > > > TR:   Adding polygon 0
> > > > TR:   Creating multi-polygon
> > > > TR:   Creating string
> > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > ERROR:
> > > > WTF format
> > > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 
> > > > 339252.0000000000000000 1029077.0000000000000000, 
> > > > 348752.0000000000000000 1029077.0000000000000000, 
> > > > 346102.0000000000000000 1019653.0000000000000000, 
> > > > 339252.0000000000000000 1019302.0000000000000000)))
> > > > 
> > > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: 28 June 2004 11:01
> > > > To: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > Can you send the test code ?
> > > > There are currently no known bug ...
> > > > --strk;
> > > > 
> > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > Hi all,
> > > > > 
> > > > > I am creating polygons with holes and want to use geos 
> > to allow me 
> > > > > to output them in WKT.
> > > > > 
> > > > > A polygon without a hole works fine, but as soon as I 
> > add a hole I 
> > > > > get a segmentation fault after calling the 
> > createPolygon function 
> > > > > (GeometryFactory) and trying to run toString on that polygon.
> > > > > 
> > > > > I am using version 1.0.
> > > > > 
> > > > > I have tried getting the latest version from CVS but 
> > this causes a 
> > > > > segmentation fault to occur while adding the 5th polygon 
> > > > > coordinate to the CoordinateList (there are only 4 
> > coordinates in 
> > > > > the test polygon, the 5th being the first one repeated 
> > - I tried 
> > > > > making it 6 to see if it was a problem with closing the polygon 
> > > > > but I still got a segmentation fault while adding the 5th).
> > > > > 
> > > > > Is there a fix for this, or has anyone come accross it?
> > > > > 
> > > > > Thanks in advance,
> > > > > Darren
> > > > > 
> > > > > 
> > > > > "The information in this e-mail and any attachment is 
> > confidential 
> > > > > and may be privileged. If you have received this e-mail 
> > in error, 
> > > > > please delete it immediately and destroy any copies on your 
> > > > > system. You should not retain, copy or use this e-mail for any 
> > > > > purpose, nor disclose all or any part of its content to 
> > any other 
> > > > > person. Opinions expressed in this e-mail may not be 
> > endorsed by 
> > > > > the company and unless explicitly indicated, this 
> > e-mail shall not 
> > > > > form part of any binding agreement".
> > > > > 
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net 
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net 
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net 
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Jun 28 17:20:08 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F54B1@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0274F54B1@venus.VividSolutions.com>
Message-ID: <20040628212008.GA58052@freek.keybit.net>

On Mon, Jun 28, 2004 at 02:15:31PM -0700, Martin Davis wrote:
> By pattern/support class is just fancy software engineering speak for
> "make it standard and simple for the client".  
> 
> What do you mean by "duplicating each constructor"?  Do you mean
> duplicating each method on the GeometryFactory?

Wooo.. actually I meant each Geometry constructor AND GeometryFactory
methods. GeometryFactory methods call Geometry constructors after 
all so the double-approach must be present in both places.

--strk;

> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net] 
> > Sent: June 28, 2004 1:59 PM
> > To: Martin Davis
> > Cc: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > On Mon, Jun 28, 2004 at 01:50:09PM -0700, Martin Davis wrote:
> > > Strk:
> > > 
> > > IMO the current paradigm (that of constructors taking ownership of 
> > > their
> > > components) is the correct one.  The reason is to avoid unecessary
> > > copying of argument data (which could be large).  It should 
> > be left up
> > > to the caller to decide when and where they need to copy arguments.
> > > 
> > > Yes, this is a potential source of errors for clients, if 
> > they don't 
> > > understand how to properly use the library.  But the alternative 
> > > forces clients to tolerate extra overhead even when they don't need 
> > > it, which is not friendly behaviour from a library.
> > > 
> > > If this is really onerous, two versions of each constructor 
> > could be 
> > > provided.  Or possibly even better, a pattern & support 
> > class to make 
> > > it easy to copy arguments.
> > 
> > Unfortunately geos-1.0 was released with mixed policy, which 
> > is what I'm trying to conform now.
> > 
> > I like the idea of letting callers specify whether or not to 
> > take ownership and so far duplicationg each constructor seems 
> > the cleaner way (adding a parameter takeOwnership would make 
> > all const correctness useless and will require modifications 
> > in many places).
> > 
> > What do you mean by pattern & support class ?
> > 
> > --strk;
> > 
> > 
> > > 
> > > Martin Davis, Senior Technical Architect
> > > Vivid Solutions Inc.      www.vividsolutions.com
> > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > 
> > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: June 28, 2004 12:59 PM
> > > > To: Darren Carman
> > > > Cc: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > I could not find the problem.
> > > > Here is a reduced code exploiting the error.
> > > > I'll keep inspecting this...
> > > > 
> > > > BTW: I don't feel comportable in Polygon constructor taking
> > > > ownership of passed arguments, what people think about 
> > > > modifying this as well ?
> > > > 
> > > > --strk;
> > > > 
> > > > //--------------------------8<-------------------
> > > > 
> > > > #include <geos/io.h>
> > > > #include <geos/geom.h>
> > > > #include <geos/util.h>
> > > > 
> > > > using namespace std;
> > > > using namespace geos;
> > > > 
> > > > int main(int argc, char *argv[]) {
> > > >         Coordinate c;
> > > >         CoordinateList *cl1 =
> > > > CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         CoordinateList *cl2 = 
> > > > CoordinateListFactory::internalFactory->createCoordinateList();
> > > > 
> > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > >         c.x = 339252; c.y = 1029077; cl1->add(c);
> > > >         c.x = 348752; c.y = 1029077; cl1->add(c);
> > > >         c.x = 346102; c.y = 1019653; cl1->add(c);
> > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > 
> > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > >         c.x = 340000; c.y = 1021000; cl2->add(c);
> > > >         c.x = 341000; c.y = 1021000; cl2->add(c);
> > > >         c.x = 341000; c.y = 1020000; cl2->add(c);
> > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > 
> > > >         try {
> > > >                 GeometryFactory *gf=new GeometryFactory(new
> > > > PrecisionModel(),0);
> > > > 
> > > >                 Geometry
> > > > *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> > > >                 cout<<"geom1: "<<geom1->toString()<<endl;
> > > >                 Geometry 
> > > > *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >                 cout<<"geom2: "<<geom2->toString()<<endl;
> > > >                 vector<Geometry*>*holes = new 
> > vector<Geometry*>(1);
> > > >                 (*holes)[0] = geom2->clone();
> > > >                 Geometry 
> > > > *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> > > >                 cout<<"geom3: "<<geom3->toString()<<endl;
> > > >                 delete cl1;
> > > >                 delete cl2;
> > > >         } catch (GEOSException *ge) {
> > > >                 cout << "ERROR: " << ge->toString() << endl;
> > > >         } catch (...) {
> > > >                 cout << "generic ERROR" << endl;
> > > >         }
> > > > }
> > > > 
> > > > //--------------------------8<-------------------
> > > > 
> > > > 
> > > > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > > > #include <geos/io.h>
> > > > > #include <geos/geom.h>
> > > > > 
> > > > > using namespace std;
> > > > > using namespace geos;
> > > > > 
> > > > > typedef struct boundaryPt {
> > > > >   double x;
> > > > >   double y;
> > > > > };
> > > > > typedef vector<boundaryPt>    boundary;
> > > > > typedef vector<boundary>      boundaryList;
> > > > > typedef vector<boundaryList>  polygonList;
> > > > > 
> > > > > polygonList       ptPolygons;
> > > > > 
> > > > > int main(int argc, char *argv[]) {
> > > > >   vector<Geometry *> polygons;
> > > > >   vector<Geometry *> holes;
> > > > >   int i,j,k;
> > > > >   string resStr = "";
> > > > > 
> > > > >   boundaryPt poly1[5];
> > > > >   boundaryPt hole1[5];
> > > > >   boundary tmpBoundary;
> > > > >   boundaryList tmpBoundaryList;
> > > > >   polygonList ptPolygons;
> > > > > 
> > > > >   poly1[0].x = 339252;
> > > > >   poly1[0].y = 1019302;
> > > > >   poly1[1].x = 339252;
> > > > >   poly1[1].y = 1029077;
> > > > >   poly1[2].x = 348752;
> > > > >   poly1[2].y = 1029077;
> > > > >   poly1[3].x = 346102;
> > > > >   poly1[3].y = 1019653;
> > > > >   poly1[4].x = 339252;
> > > > >   poly1[4].y = 1019302;
> > > > > 
> > > > >   hole1[0].x = 340000;
> > > > >   hole1[0].y = 1020000;
> > > > >   hole1[1].x = 340000;
> > > > >   hole1[1].y = 1021000;
> > > > >   hole1[2].x = 341000;
> > > > >   hole1[2].y = 1021000;
> > > > >   hole1[3].x = 341000;
> > > > >   hole1[3].y = 1020000;
> > > > >   hole1[4].x = 340000;
> > > > >   hole1[4].y = 1020000;
> > > > > 
> > > > >   for (i=0; i<5; i++) {
> > > > >     tmpBoundary.push_back(poly1[i]);
> > > > >   }
> > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > >   tmpBoundary.clear();
> > > > > 
> > > > >   for (i=0; i<5; i++) {
> > > > >     tmpBoundary.push_back(hole1[i]);
> > > > >   }
> > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > >   tmpBoundary.clear();
> > > > > 
> > > > >   ptPolygons.push_back(tmpBoundaryList);
> > > > >   for(int i=0; i< 
> > static_cast<int>(tmpBoundaryList.size()); i++) {
> > > > >     tmpBoundaryList[i].clear();
> > > > >   }
> > > > >   tmpBoundaryList.clear();
> > > > > 
> > > > > 
> > > > >   try{
> > > > >     GeometryFactory *gf=new GeometryFactory(new 
> > > > > PrecisionModel(),0);
> > > > > 
> > > > >     // for each outer ring create a CoordinateList and add
> > > > all the points to it
> > > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > > >       CoordinateList
> > > > 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > >       boundaryList bl = ptPolygons[i];
> > > > >       boundary b = bl[0];
> > > > >       cout << "Polygon " << i << endl;
> > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > >         cout << "Added point " << b[k].x << ',' << 
> > b[k].y << endl;
> > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > >       }
> > > > > 
> > > > >       // for each hole create a coordinate list like above,
> > > > create a polygon and add to a Geometry vector
> > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > >         cout << "Hole " << j << endl;
> > > > >         boundary b = bl[j];
> > > > >         CoordinateList
> > > > 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > >           cout << "Added point " << b[k].x << ',' << 
> > b[k].y << endl;
> > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > >         }
> > > > >         cout << "Creating polygon for hole " << j << ": "
> > > > << cl2->toString() << endl;
> > > > >         Geometry
> > > > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > >         cout << "Geometry " << j << " : " <<
> > > > geom1->toString() << endl;
> > > > >         holes.push_back(geom1);
> > > > >         delete cl2;
> > > > >       }
> > > > >       // create a polygon from the 1st CoordinateList 
> > and the holes
> > > > >       cout << "Creating polygon " << i << ": " <<
> > > > cl1->toString() << endl;
> > > > >       Geometry
> > > > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);   
> > > >                                           
> > > > >       cout << "test " << endl;
> > > > >       cout << "Geometry " << i << " : " <<
> > > > geom2->toString() << endl;
> > > > > 
> > > > >       // save this polygon in another vector
> > > > >       cout << "Adding polygon " << i << endl;
> > > > >       polygons.push_back(geom2);
> > > > >       delete cl1;
> > > > >     }
> > > > >     cout << "Creating multi-polygon" << endl;
> > > > >     // when all done create a MultiPolygon object
> > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > >     cout << "Creating string" << endl;
> > > > >     resStr = geom3->toString();
> > > > > 
> > > > >     //clean up
> > > > >     delete geom3;
> > > > >     delete gf;
> > > > >   }
> > > > >   catch (GEOSException *ge) {
> > > > >     cout << "ERROR: " << ge->toString() << endl;
> > > > >   }
> > > > >   cout << resStr << endl;
> > > > > }
> > > > > 
> > > > > -----Original Message-----
> > > > > From: strk [mailto:strk@keybit.net]
> > > > > Sent: 28 June 2004 11:28
> > > > > To: GEOS Development List
> > > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > > 
> > > > > 
> > > > > Can you produce a neter code exploiting the bug ?
> > > > > I mean a .cpp file I can compile and run and debug :)
> > > > > 
> > > > > -strk;
> > > > > 
> > > > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > > > defs:
> > > > > > typedef struct boundaryPt {
> > > > > >   double x;
> > > > > >   double y;
> > > > > > };
> > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > typedef vector<boundary>      boundaryList;
> > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > 
> > > > > > class members used:
> > > > > >   polygonList       ptPolygons;
> > > > > >   string tmpStr;
> > > > > >   string errMsg;
> > > > > > 
> > > > > > class function:
> > > > > > string c_polygon_gml::WKTString(void) {
> > > > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > > > >   vector<Geometry *> polygons;
> > > > > >   vector<Geometry *> holes;
> > > > > >   int i,j,k;
> > > > > >   string resStr = "";
> > > > > > 
> > > > > >   try{
> > > > > >     GeometryFactory *gf=new GeometryFactory(new
> > > > PrecisionModel(),0);
> > > > > > 
> > > > > >     // for each outer ring create a CoordinateList and
> > > > add all the points to it
> > > > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > > > >       CoordinateList
> > > > 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > >       boundaryList bl = ptPolygons[i];
> > > > > >       boundary b = bl[0];
> > > > > >       TRACE_OUTPUT("Polygon " << i);
> > > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' 
> > << b[k].y);
> > > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > >       }
> > > > > > 
> > > > > >       // for each hole create a coordinate list like
> > > > above, create a polygon and add to a Geometry vector
> > > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > > >         TRACE_OUTPUT("Hole " << j);
> > > > > >         boundary b = bl[j];
> > > > > >         CoordinateList
> > > > 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > >           TRACE_OUTPUT("Added point " << b[k].x << 
> > ',' << b[k].y);
> > > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > >         }
> > > > > >         TRACE_OUTPUT("Creating polygon for hole " << j <<
> > > > ": " << cl2->toString());
> > > > > >         Geometry
> > > > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > >         TRACE_OUTPUT("Geometry " << j << " : " <<
> > > > geom1->toString());
> > > > > >         holes.push_back(geom1);
> > > > > >         delete cl2;
> > > > > >       }
> > > > > >       // create a polygon from the 1st CoordinateList and
> > > > the holes
> > > > > >       TRACE_OUTPUT("Creating polygon " << i << ": " <<
> > > > cl1->toString());
> > > > > >       Geometry
> > > > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > > > >       TRACE_OUTPUT("test ");
> > > > > >       TRACE_OUTPUT("Geometry " << i << " : " <<
> > > > geom2->toString());
> > > > > > 
> > > > > >       // save this polygon in another vector
> > > > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > > > >       polygons.push_back(geom2);
> > > > > >       delete cl1;
> > > > > >     }
> > > > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > > > >     // when all done create a MultiPolygon object
> > > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > > >     TRACE_OUTPUT("Creating string");
> > > > > >     resStr = geom3->toString();
> > > > > > 
> > > > > >     //clean up
> > > > > >     delete geom3;
> > > > > >     delete gf;
> > > > > >   }
> > > > > >   catch (GEOSException *ge) {
> > > > > >     errMsg = ge->toString();
> > > > > >   }
> > > > > >   return resStr;
> > > > > > }
> > > > > > 
> > > > > > XML read in by class and stored in ptPolygons:
> > > > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > > > <AreaDefinition>
> > > > > > <GDSRequest>
> > > > > > <query>
> > > > > > <AreaQuery outputContent="public">
> > > > > > <queryArea>
> > > > > > <Polygon srsName="osgb:BNG">
> > > > > > <outerBoundaryIs>
> > > > > > <LinearRing>
> > > > > > <coordinates>
> > > > > > 339252,1019302
> > > > > > 339252,1029077
> > > > > > 348752,1029077
> > > > > > 346102,1019653
> > > > > > 339252,1019302
> > > > > > </coordinates>
> > > > > > </LinearRing>
> > > > > > </outerBoundaryIs>
> > > > > > <innerBoundaryIs>
> > > > > > <LinearRing>
> > > > > > <coordinates>
> > > > > > 340000,1020000
> > > > > > 340000,1021000
> > > > > > 341000,1021000
> > > > > > 341000,1020000
> > > > > > 340000,1020000
> > > > > > </coordinates>
> > > > > > </LinearRing>
> > > > > > </innerBoundaryIs>
> > > > > > </Polygon>
> > > > > > </queryArea>
> > > > > > </AreaQuery>
> > > > > > </query>
> > > > > > </GDSRequest>
> > > > > > </AreaDefinition>
> > > > > > 
> > > > > > Output:
> > > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file
> > > > c_polygon_gml.cpp
> > > > > > TR:   Polygon 0
> > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > TR:   Hole 1
> > > > > > TR:   Added point 340000,1.02e+06
> > > > > > TR:   Added point 340000,1.021e+06
> > > > > > TR:   Added point 341000,1.021e+06
> > > > > > TR:   Added point 341000,1.02e+06
> > > > > > TR:   Added point 340000,1.02e+06
> > > > > > TR:   Creating polygon for hole 1: 
> > > > (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308)
> > > > (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) 
> > > > (340000,1.02e+06,1.7e-308)
> > > > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 
> > > > 1020000.0000000000000000, 340000.0000000000000000
> > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > 1020000.0000000000000000, 340000.0000000000000000 
> > > > 1020000.0000000000000000))
> > > > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) 
> > > > (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308)
> > > > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > > TR:   test
> > > > > > Segmentation fault
> > > > > > 
> > > > > > Output when the hole is removed:
> > > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file
> > > > c_polygon_gml.cpp
> > > > > > TR:   Polygon 0
> > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) 
> > > > (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308)
> > > > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > > TR:   test
> > > > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 
> > > > 1019302.0000000000000000, 339252.0000000000000000
> > > > 1029077.0000000000000000, 348752.0000000000000000 
> > > > 1029077.0000000000000000, 346102.0000000000000000 
> > > > 1019653.0000000000000000, 339252.0000000000000000 
> > > > 1019302.0000000000000000))
> > > > > > TR:   Adding polygon 0
> > > > > > TR:   Creating multi-polygon
> > > > > > TR:   Creating string
> > > > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > > > ERROR:
> > > > > > WTF format
> > > > > > MULTIPOLYGON (((339252.0000000000000000 
> > > > > > 1019302.0000000000000000,
> > > > > > 339252.0000000000000000 1029077.0000000000000000, 
> > > > > > 348752.0000000000000000 1029077.0000000000000000, 
> > > > > > 346102.0000000000000000 1019653.0000000000000000, 
> > > > > > 339252.0000000000000000 1019302.0000000000000000)))
> > > > > > 
> > > > > > 
> > > > > > -----Original Message-----
> > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > Sent: 28 June 2004 11:01
> > > > > > To: GEOS Development List
> > > > > > Subject: Re: [geos-devel] Problems creating polygons 
> > with holes
> > > > > > 
> > > > > > 
> > > > > > Can you send the test code ?
> > > > > > There are currently no known bug ...
> > > > > > --strk;
> > > > > > 
> > > > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > > > Hi all,
> > > > > > > 
> > > > > > > I am creating polygons with holes and want to use geos
> > > > to allow me
> > > > > > > to output them in WKT.
> > > > > > > 
> > > > > > > A polygon without a hole works fine, but as soon as I
> > > > add a hole I
> > > > > > > get a segmentation fault after calling the
> > > > createPolygon function
> > > > > > > (GeometryFactory) and trying to run toString on 
> > that polygon.
> > > > > > > 
> > > > > > > I am using version 1.0.
> > > > > > > 
> > > > > > > I have tried getting the latest version from CVS but
> > > > this causes a
> > > > > > > segmentation fault to occur while adding the 5th polygon
> > > > > > > coordinate to the CoordinateList (there are only 4 
> > > > coordinates in
> > > > > > > the test polygon, the 5th being the first one repeated
> > > > - I tried
> > > > > > > making it 6 to see if it was a problem with closing the 
> > > > > > > polygon
> > > > > > > but I still got a segmentation fault while adding the 5th).
> > > > > > > 
> > > > > > > Is there a fix for this, or has anyone come accross it?
> > > > > > > 
> > > > > > > Thanks in advance,
> > > > > > > Darren
> > > > > > > 
> > > > > > > 
> > > > > > > "The information in this e-mail and any attachment is
> > > > confidential
> > > > > > > and may be privileged. If you have received this e-mail
> > > > in error,
> > > > > > > please delete it immediately and destroy any copies on your
> > > > > > > system. You should not retain, copy or use this 
> > e-mail for any 
> > > > > > > purpose, nor disclose all or any part of its content to 
> > > > any other
> > > > > > > person. Opinions expressed in this e-mail may not be
> > > > endorsed by
> > > > > > > the company and unless explicitly indicated, this
> > > > e-mail shall not
> > > > > > > form part of any binding agreement".
> > > > > > > 
> > > > > > > _______________________________________________
> > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > _______________________________________________
> > > > > > geos-devel mailing list
> > > > > > geos-devel@geos.refractions.net
> > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > _______________________________________________
> > > > > > geos-devel mailing list
> > > > > > geos-devel@geos.refractions.net 
> > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net 
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 

From sdlime at comcast.net  Mon Jun 28 18:19:58 2004
From: sdlime at comcast.net (Stephen Lime)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Perhaps a stupid question about polygons...
Message-ID: <4AA1195C-C951-11D8-BECC-000A95C8F1B4@comcast.net>

Hi all: The recent thread about polygons and holes got me thinking.  
Does building polygons in geos require the client to know if a ring in 
a particular polygon is inner vs. outer? MapServer makes no provision 
for this since it's not necessary for rendering features nor simple 
intersection tests.

Steve 


From mbdavis at VividSolutions.com  Mon Jun 28 18:26:14 2004
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Perhaps a stupid question about polygons...
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F54BD@venus.VividSolutions.com>

Yup, absolutely.  

This shouldn't be too much of a showstopper tho.  It's easy to write
code to detect which is the outer shell.  I think the easiest algorithm
would just be to take the ring with the largest x or y extent.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Stephen Lime [mailto:sdlime@comcast.net] 
> Sent: June 28, 2004 3:20 PM
> To: geos-devel@geos.refractions.net
> Subject: [geos-devel] Perhaps a stupid question about polygons...
> 
> 
> Hi all: The recent thread about polygons and holes got me thinking.  
> Does building polygons in geos require the client to know if 
> a ring in 
> a particular polygon is inner vs. outer? MapServer makes no provision 
> for this since it's not necessary for rendering features nor simple 
> intersection tests.
> 
> Steve 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From sdlime at comcast.net  Mon Jun 28 18:52:46 2004
From: sdlime at comcast.net (Stephen Lime)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Perhaps a stupid question about polygons...
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F54BD@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0274F54BD@venus.VividSolutions.com>
Message-ID: <DF8857EC-C955-11D8-BECC-000A95C8F1B4@comcast.net>

I've already done it to export as GML 2.0. Your idea would work except 
MapServer polygons can have multiple outer rings too in the case of a 
lake with multiple basins and islands in each basin (which could also 
contain holes). If I recall I ended up looking at a single vertex in 
each part and counting the number of other parts it falls into.

Steve

On Jun 28, 2004, at 5:26 PM, Martin Davis wrote:

> Yup, absolutely.
>
> This shouldn't be too much of a showstopper tho.  It's easy to write
> code to detect which is the outer shell.  I think the easiest algorithm
> would just be to take the ring with the largest x or y extent.
>
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
>
>
>> -----Original Message-----
>> From: Stephen Lime [mailto:sdlime@comcast.net]
>> Sent: June 28, 2004 3:20 PM
>> To: geos-devel@geos.refractions.net
>> Subject: [geos-devel] Perhaps a stupid question about polygons...
>>
>>
>> Hi all: The recent thread about polygons and holes got me thinking.
>> Does building polygons in geos require the client to know if
>> a ring in
>> a particular polygon is inner vs. outer? MapServer makes no provision
>> for this since it's not necessary for rendering features nor simple
>> intersection tests.
>>
>> Steve
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>


From mbdavis at VividSolutions.com  Mon Jun 28 19:23:33 2004
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Perhaps a stupid question about polygons...
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F54C1@venus.VividSolutions.com>

That would complicate things, alright.  

I used the vertex-checking approach in JTS as well, in the validation
routines.  The tricky part there is that in the OGC model vertices of
holes can lie on the shell, or on other holes...

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Stephen Lime [mailto:sdlime@comcast.net] 
> Sent: June 28, 2004 3:53 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Perhaps a stupid question about polygons...
> 
> 
> I've already done it to export as GML 2.0. Your idea would 
> work except 
> MapServer polygons can have multiple outer rings too in the case of a 
> lake with multiple basins and islands in each basin (which could also 
> contain holes). If I recall I ended up looking at a single vertex in 
> each part and counting the number of other parts it falls into.
> 
> Steve
> 
> On Jun 28, 2004, at 5:26 PM, Martin Davis wrote:
> 
> > Yup, absolutely.
> >
> > This shouldn't be too much of a showstopper tho.  It's easy 
> to write 
> > code to detect which is the outer shell.  I think the easiest 
> > algorithm would just be to take the ring with the largest x or y 
> > extent.
> >
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> >
> >
> >> -----Original Message-----
> >> From: Stephen Lime [mailto:sdlime@comcast.net]
> >> Sent: June 28, 2004 3:20 PM
> >> To: geos-devel@geos.refractions.net
> >> Subject: [geos-devel] Perhaps a stupid question about polygons...
> >>
> >>
> >> Hi all: The recent thread about polygons and holes got me 
> thinking. 
> >> Does building polygons in geos require the client to know 
> if a ring 
> >> in a particular polygon is inner vs. outer? MapServer makes no 
> >> provision for this since it's not necessary for rendering features 
> >> nor simple intersection tests.
> >>
> >> Steve
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net 
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From MChapman at sanz.com  Mon Jun 28 19:44:38 2004
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Perhaps a stupid question about polygons...
Message-ID: <ED3A48B9840E594890A2BC172D119465FB9686@mailman.san.com>

I always understood a hole as a ring whose vertices are wound (CCW vs
CW) in the opposite direction.  Is that wrong?

Martin

-----Original Message-----
From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
Sent: Monday, June 28, 2004 5:24 PM
To: GEOS Development List
Subject: RE: [geos-devel] Perhaps a stupid question about polygons...


That would complicate things, alright.  

I used the vertex-checking approach in JTS as well, in the validation
routines.  The tricky part there is that in the OGC model vertices of
holes can lie on the shell, or on other holes...

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Stephen Lime [mailto:sdlime@comcast.net]
> Sent: June 28, 2004 3:53 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Perhaps a stupid question about polygons...
> 
> 
> I've already done it to export as GML 2.0. Your idea would
> work except 
> MapServer polygons can have multiple outer rings too in the case of a 
> lake with multiple basins and islands in each basin (which could also 
> contain holes). If I recall I ended up looking at a single vertex in 
> each part and counting the number of other parts it falls into.
> 
> Steve
> 
> On Jun 28, 2004, at 5:26 PM, Martin Davis wrote:
> 
> > Yup, absolutely.
> >
> > This shouldn't be too much of a showstopper tho.  It's easy
> to write
> > code to detect which is the outer shell.  I think the easiest
> > algorithm would just be to take the ring with the largest x or y 
> > extent.
> >
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> >
> >
> >> -----Original Message-----
> >> From: Stephen Lime [mailto:sdlime@comcast.net]
> >> Sent: June 28, 2004 3:20 PM
> >> To: geos-devel@geos.refractions.net
> >> Subject: [geos-devel] Perhaps a stupid question about polygons...
> >>
> >>
> >> Hi all: The recent thread about polygons and holes got me
> thinking.
> >> Does building polygons in geos require the client to know
> if a ring
> >> in a particular polygon is inner vs. outer? MapServer makes no
> >> provision for this since it's not necessary for rendering features 
> >> nor simple intersection tests.
> >>
> >> Steve
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From MChapman at sanz.com  Mon Jun 28 19:45:18 2004
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Perhaps a stupid question about polygons...
Message-ID: <ED3A48B9840E594890A2BC172D119465FB9687@mailman.san.com>

Maybe that is just an OpenGL thing...

Martin

-----Original Message-----
From: Chapman, Martin 
Sent: Monday, June 28, 2004 5:45 PM
To: GEOS Development List
Subject: RE: [geos-devel] Perhaps a stupid question about polygons...


I always understood a hole as a ring whose vertices are wound (CCW vs
CW) in the opposite direction.  Is that wrong?

Martin

-----Original Message-----
From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
Sent: Monday, June 28, 2004 5:24 PM
To: GEOS Development List
Subject: RE: [geos-devel] Perhaps a stupid question about polygons...


That would complicate things, alright.  

I used the vertex-checking approach in JTS as well, in the validation
routines.  The tricky part there is that in the OGC model vertices of
holes can lie on the shell, or on other holes...

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Stephen Lime [mailto:sdlime@comcast.net]
> Sent: June 28, 2004 3:53 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Perhaps a stupid question about polygons...
> 
> 
> I've already done it to export as GML 2.0. Your idea would work except
> MapServer polygons can have multiple outer rings too in the case of a 
> lake with multiple basins and islands in each basin (which could also 
> contain holes). If I recall I ended up looking at a single vertex in 
> each part and counting the number of other parts it falls into.
> 
> Steve
> 
> On Jun 28, 2004, at 5:26 PM, Martin Davis wrote:
> 
> > Yup, absolutely.
> >
> > This shouldn't be too much of a showstopper tho.  It's easy
> to write
> > code to detect which is the outer shell.  I think the easiest 
> > algorithm would just be to take the ring with the largest x or y 
> > extent.
> >
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> >
> >
> >> -----Original Message-----
> >> From: Stephen Lime [mailto:sdlime@comcast.net]
> >> Sent: June 28, 2004 3:20 PM
> >> To: geos-devel@geos.refractions.net
> >> Subject: [geos-devel] Perhaps a stupid question about polygons...
> >>
> >>
> >> Hi all: The recent thread about polygons and holes got me
> thinking.
> >> Does building polygons in geos require the client to know
> if a ring
> >> in a particular polygon is inner vs. outer? MapServer makes no 
> >> provision for this since it's not necessary for rendering features 
> >> nor simple intersection tests.
> >>
> >> Steve
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net 
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Tue Jun 29 03:58:31 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8A7A@itl-serv1.infoterra-global.com>

I changed the polygons and holes vectors to be vector <LinearRing *>, and changed the createPolygon calls to (LinearRing *). This got me past the seg fault. 

I now seg fault after creating the MultiPolygon and trying the toString function.

What type should I be using for this (I have tried MultiPolygon, LinearRing and Geometry with no luck) or should polygons be a different type (didnt work for Geometry or LinearRing vectors)?

>From Sub-problem1&2:
Thanks for that. In the actual code it is accounted for, but as I only had 1 hole in this example I didnt bother changing it.

Thanks,
Darren

-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 28 June 2004 21:37
To: Darren Carman; GEOS Development List
Cc: Paul Ramsey; Yury A. Bychkov
Subject: Re: [geos-devel] Problems creating polygons with holes


Ok. I've found the bug.
It is in your code (and in GEOS not handling it).

Main problem: you push a Polygon in the holes vector.
This - although defined as a Geometry vector - is indeed a LinearRing
vector, failing to enforce this typing does result in segfault
(not checked in Polygon.cpp).

Sub-problem1: your holes vector is an automatic variable, so it
is deleted when the code exits the block it is defined in.
The Polygon constructor copy the vector pointer and will delete it
at Polygon destructio time (I'd change this).

Sub-problem2: if I understood your code you are pushing in the
holes vector the geometries you previously created, with no cloning.
Again the Polygon constructor will take ownership of them (which should
be LinearRing) so you should ->clone() them before adding to the vector.

My proposal: make Polygon contructor deep copy shell and holes checking
for holes type to be LinearRing.

A question: why isn't holes a vector <LinearRing *> * ?

A note: I did not update CVS... I'd like to hear about my proposal first.

--strk;

On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> I could not find the problem.
> Here is a reduced code exploiting the error.
> I'll keep inspecting this...
> 
> BTW: I don't feel comportable in Polygon constructor taking
> ownership of passed arguments, what people think about modifying
> this as well ?
> 
> --strk;
> 
> //--------------------------8<-------------------
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> #include <geos/util.h>
> 
> using namespace std;
> using namespace geos;
> 
> int main(int argc, char *argv[]) {
>         Coordinate c;
>         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
>         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> 
>         c.x = 339252; c.y = 1019302; cl1->add(c);
>         c.x = 339252; c.y = 1029077; cl1->add(c);
>         c.x = 348752; c.y = 1029077; cl1->add(c);
>         c.x = 346102; c.y = 1019653; cl1->add(c);
>         c.x = 339252; c.y = 1019302; cl1->add(c);
> 
>         c.x = 340000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1020000; cl2->add(c);
> 
>         try {
>                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
>                 cout<<"geom1: "<<geom1->toString()<<endl;
>                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>                 cout<<"geom2: "<<geom2->toString()<<endl;
>                 vector<Geometry*>*holes = new vector<Geometry*>(1);
>                 (*holes)[0] = geom2->clone();
>                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
>                 cout<<"geom3: "<<geom3->toString()<<endl;
>                 delete cl1;
>                 delete cl2;
>         } catch (GEOSException *ge) {
>                 cout << "ERROR: " << ge->toString() << endl;
>         } catch (...) {
>                 cout << "generic ERROR" << endl;
>         }
> }
> 
> //--------------------------8<-------------------
> 
> 
> On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > typedef struct boundaryPt {
> >   double x;
> >   double y;
> > };
> > typedef vector<boundaryPt>    boundary;
> > typedef vector<boundary>      boundaryList;
> > typedef vector<boundaryList>  polygonList;
> > 
> > polygonList       ptPolygons;
> > 
> > int main(int argc, char *argv[]) {
> >   vector<Geometry *> polygons;
> >   vector<Geometry *> holes;
> >   int i,j,k;
> >   string resStr = "";
> > 
> >   boundaryPt poly1[5];
> >   boundaryPt hole1[5];
> >   boundary tmpBoundary;
> >   boundaryList tmpBoundaryList;
> >   polygonList ptPolygons;
> > 
> >   poly1[0].x = 339252;
> >   poly1[0].y = 1019302;
> >   poly1[1].x = 339252;
> >   poly1[1].y = 1029077;
> >   poly1[2].x = 348752;
> >   poly1[2].y = 1029077;
> >   poly1[3].x = 346102;
> >   poly1[3].y = 1019653;
> >   poly1[4].x = 339252;
> >   poly1[4].y = 1019302;
> > 
> >   hole1[0].x = 340000;
> >   hole1[0].y = 1020000;
> >   hole1[1].x = 340000;
> >   hole1[1].y = 1021000;
> >   hole1[2].x = 341000;
> >   hole1[2].y = 1021000;
> >   hole1[3].x = 341000;
> >   hole1[3].y = 1020000;
> >   hole1[4].x = 340000;
> >   hole1[4].y = 1020000;
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(poly1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(hole1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   ptPolygons.push_back(tmpBoundaryList);
> >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> >     tmpBoundaryList[i].clear();
> >   }
> >   tmpBoundaryList.clear();
> > 
> > 
> >   try{
> >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >     // for each outer ring create a CoordinateList and add all the points to it
> >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> >       boundaryList bl = ptPolygons[i];
> >       boundary b = bl[0];
> >       cout << "Polygon " << i << endl;
> >       for(k=0; k< static_cast<int>(b.size()); k++) {
> >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> >       }
> > 
> >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> >         cout << "Hole " << j << endl;
> >         boundary b = bl[j];
> >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> >         for(k=0; k< static_cast<int>(b.size()); k++) {
> >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> >         }
> >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> >         holes.push_back(geom1);
> >         delete cl2;
> >       }
> >       // create a polygon from the 1st CoordinateList and the holes
> >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> >       cout << "test " << endl;
> >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > 
> >       // save this polygon in another vector
> >       cout << "Adding polygon " << i << endl;
> >       polygons.push_back(geom2);
> >       delete cl1;
> >     }
> >     cout << "Creating multi-polygon" << endl;
> >     // when all done create a MultiPolygon object
> >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> >     cout << "Creating string" << endl;
> >     resStr = geom3->toString();
> > 
> >     //clean up
> >     delete geom3;
> >     delete gf;
> >   }
> >   catch (GEOSException *ge) {
> >     cout << "ERROR: " << ge->toString() << endl;
> >   }
> >   cout << resStr << endl;
> > }
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 11:28
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Can you produce a neter code exploiting the bug ?
> > I mean a .cpp file I can compile and run and debug :)
> > 
> > -strk;
> > 
> > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > defs:
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > class members used:
> > >   polygonList       ptPolygons;
> > >   string tmpStr;
> > >   string errMsg;
> > > 
> > > class function:
> > > string c_polygon_gml::WKTString(void) {
> > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       TRACE_OUTPUT("Polygon " << i);
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         TRACE_OUTPUT("Hole " << j);
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > >       TRACE_OUTPUT("test ");
> > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > 
> > >       // save this polygon in another vector
> > >       TRACE_OUTPUT("Adding polygon " << i);
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     TRACE_OUTPUT("Creating multi-polygon");
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     TRACE_OUTPUT("Creating string");
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     errMsg = ge->toString();
> > >   }
> > >   return resStr;
> > > }
> > > 
> > > XML read in by class and stored in ptPolygons:
> > > <?xml version="1.0" encoding="UTF-8"?>
> > > <AreaDefinition>
> > > <GDSRequest>
> > > <query>
> > > <AreaQuery outputContent="public">
> > > <queryArea>
> > > <Polygon srsName="osgb:BNG">
> > > <outerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 339252,1019302
> > > 339252,1029077
> > > 348752,1029077
> > > 346102,1019653
> > > 339252,1019302
> > > </coordinates>
> > > </LinearRing>
> > > </outerBoundaryIs>
> > > <innerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 340000,1020000
> > > 340000,1021000
> > > 341000,1021000
> > > 341000,1020000
> > > 340000,1020000
> > > </coordinates>
> > > </LinearRing>
> > > </innerBoundaryIs>
> > > </Polygon>
> > > </queryArea>
> > > </AreaQuery>
> > > </query>
> > > </GDSRequest>
> > > </AreaDefinition>
> > > 
> > > Output:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Hole 1
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Added point 340000,1.021e+06
> > > TR:   Added point 341000,1.021e+06
> > > TR:   Added point 341000,1.02e+06
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > Segmentation fault
> > > 
> > > Output when the hole is removed:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > TR:   Adding polygon 0
> > > TR:   Creating multi-polygon
> > > TR:   Creating string
> > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > ERROR:
> > > WTF format
> > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > 
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:01
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you send the test code ?
> > > There are currently no known bug ...
> > > --strk;
> > > 
> > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > Hi all,
> > > > 
> > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > 
> > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > 
> > > > I am using version 1.0.
> > > > 
> > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > 
> > > > Is there a fix for this, or has anyone come accross it?
> > > > 
> > > > Thanks in advance,
> > > > Darren
> > > > 
> > > > 
> > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Tue Jun 29 04:05:18 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8A8E@itl-serv1.infoterra-global.com>

Sorry - scratch this last problem. It is now fixed.

Thanks for the help.
Darren

-----Original Message-----
From: Darren Carman 
Sent: 29 June 2004 08:59
To: GEOS Development List
Subject: RE: [geos-devel] Problems creating polygons with holes


I changed the polygons and holes vectors to be vector <LinearRing *>, and changed the createPolygon calls to (LinearRing *). This got me past the seg fault. 

I now seg fault after creating the MultiPolygon and trying the toString function.

What type should I be using for this (I have tried MultiPolygon, LinearRing and Geometry with no luck) or should polygons be a different type (didnt work for Geometry or LinearRing vectors)?

>From Sub-problem1&2:
Thanks for that. In the actual code it is accounted for, but as I only had 1 hole in this example I didnt bother changing it.

Thanks,
Darren

-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 28 June 2004 21:37
To: Darren Carman; GEOS Development List
Cc: Paul Ramsey; Yury A. Bychkov
Subject: Re: [geos-devel] Problems creating polygons with holes


Ok. I've found the bug.
It is in your code (and in GEOS not handling it).

Main problem: you push a Polygon in the holes vector.
This - although defined as a Geometry vector - is indeed a LinearRing
vector, failing to enforce this typing does result in segfault
(not checked in Polygon.cpp).

Sub-problem1: your holes vector is an automatic variable, so it
is deleted when the code exits the block it is defined in.
The Polygon constructor copy the vector pointer and will delete it
at Polygon destructio time (I'd change this).

Sub-problem2: if I understood your code you are pushing in the
holes vector the geometries you previously created, with no cloning.
Again the Polygon constructor will take ownership of them (which should
be LinearRing) so you should ->clone() them before adding to the vector.

My proposal: make Polygon contructor deep copy shell and holes checking
for holes type to be LinearRing.

A question: why isn't holes a vector <LinearRing *> * ?

A note: I did not update CVS... I'd like to hear about my proposal first.

--strk;

On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> I could not find the problem.
> Here is a reduced code exploiting the error.
> I'll keep inspecting this...
> 
> BTW: I don't feel comportable in Polygon constructor taking
> ownership of passed arguments, what people think about modifying
> this as well ?
> 
> --strk;
> 
> //--------------------------8<-------------------
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> #include <geos/util.h>
> 
> using namespace std;
> using namespace geos;
> 
> int main(int argc, char *argv[]) {
>         Coordinate c;
>         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
>         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> 
>         c.x = 339252; c.y = 1019302; cl1->add(c);
>         c.x = 339252; c.y = 1029077; cl1->add(c);
>         c.x = 348752; c.y = 1029077; cl1->add(c);
>         c.x = 346102; c.y = 1019653; cl1->add(c);
>         c.x = 339252; c.y = 1019302; cl1->add(c);
> 
>         c.x = 340000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1020000; cl2->add(c);
> 
>         try {
>                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
>                 cout<<"geom1: "<<geom1->toString()<<endl;
>                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>                 cout<<"geom2: "<<geom2->toString()<<endl;
>                 vector<Geometry*>*holes = new vector<Geometry*>(1);
>                 (*holes)[0] = geom2->clone();
>                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
>                 cout<<"geom3: "<<geom3->toString()<<endl;
>                 delete cl1;
>                 delete cl2;
>         } catch (GEOSException *ge) {
>                 cout << "ERROR: " << ge->toString() << endl;
>         } catch (...) {
>                 cout << "generic ERROR" << endl;
>         }
> }
> 
> //--------------------------8<-------------------
> 
> 
> On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > typedef struct boundaryPt {
> >   double x;
> >   double y;
> > };
> > typedef vector<boundaryPt>    boundary;
> > typedef vector<boundary>      boundaryList;
> > typedef vector<boundaryList>  polygonList;
> > 
> > polygonList       ptPolygons;
> > 
> > int main(int argc, char *argv[]) {
> >   vector<Geometry *> polygons;
> >   vector<Geometry *> holes;
> >   int i,j,k;
> >   string resStr = "";
> > 
> >   boundaryPt poly1[5];
> >   boundaryPt hole1[5];
> >   boundary tmpBoundary;
> >   boundaryList tmpBoundaryList;
> >   polygonList ptPolygons;
> > 
> >   poly1[0].x = 339252;
> >   poly1[0].y = 1019302;
> >   poly1[1].x = 339252;
> >   poly1[1].y = 1029077;
> >   poly1[2].x = 348752;
> >   poly1[2].y = 1029077;
> >   poly1[3].x = 346102;
> >   poly1[3].y = 1019653;
> >   poly1[4].x = 339252;
> >   poly1[4].y = 1019302;
> > 
> >   hole1[0].x = 340000;
> >   hole1[0].y = 1020000;
> >   hole1[1].x = 340000;
> >   hole1[1].y = 1021000;
> >   hole1[2].x = 341000;
> >   hole1[2].y = 1021000;
> >   hole1[3].x = 341000;
> >   hole1[3].y = 1020000;
> >   hole1[4].x = 340000;
> >   hole1[4].y = 1020000;
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(poly1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(hole1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   ptPolygons.push_back(tmpBoundaryList);
> >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> >     tmpBoundaryList[i].clear();
> >   }
> >   tmpBoundaryList.clear();
> > 
> > 
> >   try{
> >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >     // for each outer ring create a CoordinateList and add all the points to it
> >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> >       boundaryList bl = ptPolygons[i];
> >       boundary b = bl[0];
> >       cout << "Polygon " << i << endl;
> >       for(k=0; k< static_cast<int>(b.size()); k++) {
> >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> >       }
> > 
> >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> >         cout << "Hole " << j << endl;
> >         boundary b = bl[j];
> >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> >         for(k=0; k< static_cast<int>(b.size()); k++) {
> >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> >         }
> >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> >         holes.push_back(geom1);
> >         delete cl2;
> >       }
> >       // create a polygon from the 1st CoordinateList and the holes
> >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> >       cout << "test " << endl;
> >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > 
> >       // save this polygon in another vector
> >       cout << "Adding polygon " << i << endl;
> >       polygons.push_back(geom2);
> >       delete cl1;
> >     }
> >     cout << "Creating multi-polygon" << endl;
> >     // when all done create a MultiPolygon object
> >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> >     cout << "Creating string" << endl;
> >     resStr = geom3->toString();
> > 
> >     //clean up
> >     delete geom3;
> >     delete gf;
> >   }
> >   catch (GEOSException *ge) {
> >     cout << "ERROR: " << ge->toString() << endl;
> >   }
> >   cout << resStr << endl;
> > }
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 11:28
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Can you produce a neter code exploiting the bug ?
> > I mean a .cpp file I can compile and run and debug :)
> > 
> > -strk;
> > 
> > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > defs:
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > class members used:
> > >   polygonList       ptPolygons;
> > >   string tmpStr;
> > >   string errMsg;
> > > 
> > > class function:
> > > string c_polygon_gml::WKTString(void) {
> > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       TRACE_OUTPUT("Polygon " << i);
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         TRACE_OUTPUT("Hole " << j);
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > >       TRACE_OUTPUT("test ");
> > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > 
> > >       // save this polygon in another vector
> > >       TRACE_OUTPUT("Adding polygon " << i);
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     TRACE_OUTPUT("Creating multi-polygon");
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     TRACE_OUTPUT("Creating string");
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     errMsg = ge->toString();
> > >   }
> > >   return resStr;
> > > }
> > > 
> > > XML read in by class and stored in ptPolygons:
> > > <?xml version="1.0" encoding="UTF-8"?>
> > > <AreaDefinition>
> > > <GDSRequest>
> > > <query>
> > > <AreaQuery outputContent="public">
> > > <queryArea>
> > > <Polygon srsName="osgb:BNG">
> > > <outerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 339252,1019302
> > > 339252,1029077
> > > 348752,1029077
> > > 346102,1019653
> > > 339252,1019302
> > > </coordinates>
> > > </LinearRing>
> > > </outerBoundaryIs>
> > > <innerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 340000,1020000
> > > 340000,1021000
> > > 341000,1021000
> > > 341000,1020000
> > > 340000,1020000
> > > </coordinates>
> > > </LinearRing>
> > > </innerBoundaryIs>
> > > </Polygon>
> > > </queryArea>
> > > </AreaQuery>
> > > </query>
> > > </GDSRequest>
> > > </AreaDefinition>
> > > 
> > > Output:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Hole 1
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Added point 340000,1.021e+06
> > > TR:   Added point 341000,1.021e+06
> > > TR:   Added point 341000,1.02e+06
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > Segmentation fault
> > > 
> > > Output when the hole is removed:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > TR:   Adding polygon 0
> > > TR:   Creating multi-polygon
> > > TR:   Creating string
> > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > ERROR:
> > > WTF format
> > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > 
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:01
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you send the test code ?
> > > There are currently no known bug ...
> > > --strk;
> > > 
> > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > Hi all,
> > > > 
> > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > 
> > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > 
> > > > I am using version 1.0.
> > > > 
> > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > 
> > > > Is there a fix for this, or has anyone come accross it?
> > > > 
> > > > Thanks in advance,
> > > > Darren
> > > > 
> > > > 
> > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Tue Jun 29 05:37:01 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8B4A@itl-serv1.infoterra-global.com>

Sorry, it didnt work - I forgot that I had commented out the hole initialisation in my code.

I changed your code below to use LinearRings (for geom1, geom2 and geom3) as well and saw the seg fault while calling toString on geom3 (as happens in my code). Again no seg fault is seen when no hole is supplied (it also works with geom1-3 as Geometry * when no hole is supplied).

So I am still at a loss.

Maybe it would help if I could get the cvs version to work - I do the following:
./autogen.sh                                 --> as no configure there
./configure --prefix=$HOME/<path>/           --> lib is used locally, not globally
make
make install

then when I make and run the test program I get the following:
./test_bug: relocation error: ./test_bug: undefined symbol: _ZNK4geos15GeometryFactory16createLinearRingEPNS_14CoordinateListE

Thanks,
Darren

-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 28 June 2004 21:37
To: Darren Carman; GEOS Development List
Cc: Paul Ramsey; Yury A. Bychkov
Subject: Re: [geos-devel] Problems creating polygons with holes


Ok. I've found the bug.
It is in your code (and in GEOS not handling it).

Main problem: you push a Polygon in the holes vector.
This - although defined as a Geometry vector - is indeed a LinearRing
vector, failing to enforce this typing does result in segfault
(not checked in Polygon.cpp).

Sub-problem1: your holes vector is an automatic variable, so it
is deleted when the code exits the block it is defined in.
The Polygon constructor copy the vector pointer and will delete it
at Polygon destructio time (I'd change this).

Sub-problem2: if I understood your code you are pushing in the
holes vector the geometries you previously created, with no cloning.
Again the Polygon constructor will take ownership of them (which should
be LinearRing) so you should ->clone() them before adding to the vector.

My proposal: make Polygon contructor deep copy shell and holes checking
for holes type to be LinearRing.

A question: why isn't holes a vector <LinearRing *> * ?

A note: I did not update CVS... I'd like to hear about my proposal first.

--strk;

On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> I could not find the problem.
> Here is a reduced code exploiting the error.
> I'll keep inspecting this...
> 
> BTW: I don't feel comportable in Polygon constructor taking
> ownership of passed arguments, what people think about modifying
> this as well ?
> 
> --strk;
> 
> //--------------------------8<-------------------
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> #include <geos/util.h>
> 
> using namespace std;
> using namespace geos;
> 
> int main(int argc, char *argv[]) {
>         Coordinate c;
>         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
>         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> 
>         c.x = 339252; c.y = 1019302; cl1->add(c);
>         c.x = 339252; c.y = 1029077; cl1->add(c);
>         c.x = 348752; c.y = 1029077; cl1->add(c);
>         c.x = 346102; c.y = 1019653; cl1->add(c);
>         c.x = 339252; c.y = 1019302; cl1->add(c);
> 
>         c.x = 340000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1021000; cl2->add(c);
>         c.x = 341000; c.y = 1020000; cl2->add(c);
>         c.x = 340000; c.y = 1020000; cl2->add(c);
> 
>         try {
>                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
>                 cout<<"geom1: "<<geom1->toString()<<endl;
>                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
>                 cout<<"geom2: "<<geom2->toString()<<endl;
>                 vector<Geometry*>*holes = new vector<Geometry*>(1);
>                 (*holes)[0] = geom2->clone();
>                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
>                 cout<<"geom3: "<<geom3->toString()<<endl;
>                 delete cl1;
>                 delete cl2;
>         } catch (GEOSException *ge) {
>                 cout << "ERROR: " << ge->toString() << endl;
>         } catch (...) {
>                 cout << "generic ERROR" << endl;
>         }
> }
> 
> //--------------------------8<-------------------
> 
> 
> On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > typedef struct boundaryPt {
> >   double x;
> >   double y;
> > };
> > typedef vector<boundaryPt>    boundary;
> > typedef vector<boundary>      boundaryList;
> > typedef vector<boundaryList>  polygonList;
> > 
> > polygonList       ptPolygons;
> > 
> > int main(int argc, char *argv[]) {
> >   vector<Geometry *> polygons;
> >   vector<Geometry *> holes;
> >   int i,j,k;
> >   string resStr = "";
> > 
> >   boundaryPt poly1[5];
> >   boundaryPt hole1[5];
> >   boundary tmpBoundary;
> >   boundaryList tmpBoundaryList;
> >   polygonList ptPolygons;
> > 
> >   poly1[0].x = 339252;
> >   poly1[0].y = 1019302;
> >   poly1[1].x = 339252;
> >   poly1[1].y = 1029077;
> >   poly1[2].x = 348752;
> >   poly1[2].y = 1029077;
> >   poly1[3].x = 346102;
> >   poly1[3].y = 1019653;
> >   poly1[4].x = 339252;
> >   poly1[4].y = 1019302;
> > 
> >   hole1[0].x = 340000;
> >   hole1[0].y = 1020000;
> >   hole1[1].x = 340000;
> >   hole1[1].y = 1021000;
> >   hole1[2].x = 341000;
> >   hole1[2].y = 1021000;
> >   hole1[3].x = 341000;
> >   hole1[3].y = 1020000;
> >   hole1[4].x = 340000;
> >   hole1[4].y = 1020000;
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(poly1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   for (i=0; i<5; i++) {
> >     tmpBoundary.push_back(hole1[i]);
> >   }
> >   tmpBoundaryList.push_back(tmpBoundary);
> >   tmpBoundary.clear();
> > 
> >   ptPolygons.push_back(tmpBoundaryList);
> >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> >     tmpBoundaryList[i].clear();
> >   }
> >   tmpBoundaryList.clear();
> > 
> > 
> >   try{
> >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >     // for each outer ring create a CoordinateList and add all the points to it
> >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> >       boundaryList bl = ptPolygons[i];
> >       boundary b = bl[0];
> >       cout << "Polygon " << i << endl;
> >       for(k=0; k< static_cast<int>(b.size()); k++) {
> >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> >       }
> > 
> >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> >         cout << "Hole " << j << endl;
> >         boundary b = bl[j];
> >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> >         for(k=0; k< static_cast<int>(b.size()); k++) {
> >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> >         }
> >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> >         holes.push_back(geom1);
> >         delete cl2;
> >       }
> >       // create a polygon from the 1st CoordinateList and the holes
> >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> >       cout << "test " << endl;
> >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > 
> >       // save this polygon in another vector
> >       cout << "Adding polygon " << i << endl;
> >       polygons.push_back(geom2);
> >       delete cl1;
> >     }
> >     cout << "Creating multi-polygon" << endl;
> >     // when all done create a MultiPolygon object
> >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> >     cout << "Creating string" << endl;
> >     resStr = geom3->toString();
> > 
> >     //clean up
> >     delete geom3;
> >     delete gf;
> >   }
> >   catch (GEOSException *ge) {
> >     cout << "ERROR: " << ge->toString() << endl;
> >   }
> >   cout << resStr << endl;
> > }
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 11:28
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Can you produce a neter code exploiting the bug ?
> > I mean a .cpp file I can compile and run and debug :)
> > 
> > -strk;
> > 
> > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > defs:
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > class members used:
> > >   polygonList       ptPolygons;
> > >   string tmpStr;
> > >   string errMsg;
> > > 
> > > class function:
> > > string c_polygon_gml::WKTString(void) {
> > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       TRACE_OUTPUT("Polygon " << i);
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         TRACE_OUTPUT("Hole " << j);
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > >       TRACE_OUTPUT("test ");
> > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > 
> > >       // save this polygon in another vector
> > >       TRACE_OUTPUT("Adding polygon " << i);
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     TRACE_OUTPUT("Creating multi-polygon");
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     TRACE_OUTPUT("Creating string");
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     errMsg = ge->toString();
> > >   }
> > >   return resStr;
> > > }
> > > 
> > > XML read in by class and stored in ptPolygons:
> > > <?xml version="1.0" encoding="UTF-8"?>
> > > <AreaDefinition>
> > > <GDSRequest>
> > > <query>
> > > <AreaQuery outputContent="public">
> > > <queryArea>
> > > <Polygon srsName="osgb:BNG">
> > > <outerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 339252,1019302
> > > 339252,1029077
> > > 348752,1029077
> > > 346102,1019653
> > > 339252,1019302
> > > </coordinates>
> > > </LinearRing>
> > > </outerBoundaryIs>
> > > <innerBoundaryIs>
> > > <LinearRing>
> > > <coordinates>
> > > 340000,1020000
> > > 340000,1021000
> > > 341000,1021000
> > > 341000,1020000
> > > 340000,1020000
> > > </coordinates>
> > > </LinearRing>
> > > </innerBoundaryIs>
> > > </Polygon>
> > > </queryArea>
> > > </AreaQuery>
> > > </query>
> > > </GDSRequest>
> > > </AreaDefinition>
> > > 
> > > Output:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Hole 1
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Added point 340000,1.021e+06
> > > TR:   Added point 341000,1.021e+06
> > > TR:   Added point 341000,1.02e+06
> > > TR:   Added point 340000,1.02e+06
> > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > Segmentation fault
> > > 
> > > Output when the hole is removed:
> > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > TR:   Polygon 0
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Added point 339252,1.02908e+06
> > > TR:   Added point 348752,1.02908e+06
> > > TR:   Added point 346102,1.01965e+06
> > > TR:   Added point 339252,1.0193e+06
> > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > TR:   test
> > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > TR:   Adding polygon 0
> > > TR:   Creating multi-polygon
> > > TR:   Creating string
> > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > ERROR:
> > > WTF format
> > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > 
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:01
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you send the test code ?
> > > There are currently no known bug ...
> > > --strk;
> > > 
> > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > Hi all,
> > > > 
> > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > 
> > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > 
> > > > I am using version 1.0.
> > > > 
> > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > 
> > > > Is there a fix for this, or has anyone come accross it?
> > > > 
> > > > Thanks in advance,
> > > > Darren
> > > > 
> > > > 
> > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > 
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Jun 29 18:47:54 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8A6E@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8A6E@itl-serv1.infoterra-global.com>
Message-ID: <20040629224754.GA67881@freek.keybit.net>

MultiPolygon constructor (as of GEOS version 1.0) take
ownership of Geometry * in the passed vector.
This might be your problem.
Martin Davis suggests users learn this, so here is an hint:
	geom_copy = geom->clone()
GEOS-CVS changes this, deep copying passed geometries.
Next GEOS release might change the whole copying mechanism,
but we are currently discussing how.

--strk;

On Tue, Jun 29, 2004 at 08:53:22AM +0100, Darren Carman wrote:
> I changed the polygons and holes vectors to be vector <LinearRing *>, and changed the createPolygon calls to (LinearRing *). This got me past the seg fault. 
> 
> I now seg fault after creating the MultiPolygon and trying the toString function.
> 
> What type should I be using for this (I have tried MultiPolygon, LinearRing and Geometry with no luck) or should polygons be a different type (didnt work for Geometry or LinearRing vectors)?
> 
> >From Sub-problem1&2:
> Thanks for that. In the actual code it is accounted for, but as I only had 1 hole in this example I didnt bother changing it.
> 
> Thanks,
> Darren
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 28 June 2004 21:37
> To: Darren Carman; GEOS Development List
> Cc: Paul Ramsey; Yury A. Bychkov
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> Ok. I've found the bug.
> It is in your code (and in GEOS not handling it).
> 
> Main problem: you push a Polygon in the holes vector.
> This - although defined as a Geometry vector - is indeed a LinearRing
> vector, failing to enforce this typing does result in segfault
> (not checked in Polygon.cpp).
> 
> Sub-problem1: your holes vector is an automatic variable, so it
> is deleted when the code exits the block it is defined in.
> The Polygon constructor copy the vector pointer and will delete it
> at Polygon destructio time (I'd change this).
> 
> Sub-problem2: if I understood your code you are pushing in the
> holes vector the geometries you previously created, with no cloning.
> Again the Polygon constructor will take ownership of them (which should
> be LinearRing) so you should ->clone() them before adding to the vector.
> 
> My proposal: make Polygon contructor deep copy shell and holes checking
> for holes type to be LinearRing.
> 
> A question: why isn't holes a vector <LinearRing *> * ?
> 
> A note: I did not update CVS... I'd like to hear about my proposal first.
> 
> --strk;
> 
> On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> > I could not find the problem.
> > Here is a reduced code exploiting the error.
> > I'll keep inspecting this...
> > 
> > BTW: I don't feel comportable in Polygon constructor taking
> > ownership of passed arguments, what people think about modifying
> > this as well ?
> > 
> > --strk;
> > 
> > //--------------------------8<-------------------
> > 
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > #include <geos/util.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > int main(int argc, char *argv[]) {
> >         Coordinate c;
> >         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
> >         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> > 
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> >         c.x = 339252; c.y = 1029077; cl1->add(c);
> >         c.x = 348752; c.y = 1029077; cl1->add(c);
> >         c.x = 346102; c.y = 1019653; cl1->add(c);
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > 
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > 
> >         try {
> >                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> >                 cout<<"geom1: "<<geom1->toString()<<endl;
> >                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >                 cout<<"geom2: "<<geom2->toString()<<endl;
> >                 vector<Geometry*>*holes = new vector<Geometry*>(1);
> >                 (*holes)[0] = geom2->clone();
> >                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> >                 cout<<"geom3: "<<geom3->toString()<<endl;
> >                 delete cl1;
> >                 delete cl2;
> >         } catch (GEOSException *ge) {
> >                 cout << "ERROR: " << ge->toString() << endl;
> >         } catch (...) {
> >                 cout << "generic ERROR" << endl;
> >         }
> > }
> > 
> > //--------------------------8<-------------------
> > 
> > 
> > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > #include <geos/io.h>
> > > #include <geos/geom.h>
> > > 
> > > using namespace std;
> > > using namespace geos;
> > > 
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > polygonList       ptPolygons;
> > > 
> > > int main(int argc, char *argv[]) {
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   boundaryPt poly1[5];
> > >   boundaryPt hole1[5];
> > >   boundary tmpBoundary;
> > >   boundaryList tmpBoundaryList;
> > >   polygonList ptPolygons;
> > > 
> > >   poly1[0].x = 339252;
> > >   poly1[0].y = 1019302;
> > >   poly1[1].x = 339252;
> > >   poly1[1].y = 1029077;
> > >   poly1[2].x = 348752;
> > >   poly1[2].y = 1029077;
> > >   poly1[3].x = 346102;
> > >   poly1[3].y = 1019653;
> > >   poly1[4].x = 339252;
> > >   poly1[4].y = 1019302;
> > > 
> > >   hole1[0].x = 340000;
> > >   hole1[0].y = 1020000;
> > >   hole1[1].x = 340000;
> > >   hole1[1].y = 1021000;
> > >   hole1[2].x = 341000;
> > >   hole1[2].y = 1021000;
> > >   hole1[3].x = 341000;
> > >   hole1[3].y = 1020000;
> > >   hole1[4].x = 340000;
> > >   hole1[4].y = 1020000;
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(poly1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(hole1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   ptPolygons.push_back(tmpBoundaryList);
> > >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> > >     tmpBoundaryList[i].clear();
> > >   }
> > >   tmpBoundaryList.clear();
> > > 
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       cout << "Polygon " << i << endl;
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         cout << "Hole " << j << endl;
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> > >       cout << "test " << endl;
> > >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > > 
> > >       // save this polygon in another vector
> > >       cout << "Adding polygon " << i << endl;
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     cout << "Creating multi-polygon" << endl;
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     cout << "Creating string" << endl;
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     cout << "ERROR: " << ge->toString() << endl;
> > >   }
> > >   cout << resStr << endl;
> > > }
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:28
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you produce a neter code exploiting the bug ?
> > > I mean a .cpp file I can compile and run and debug :)
> > > 
> > > -strk;
> > > 
> > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > defs:
> > > > typedef struct boundaryPt {
> > > >   double x;
> > > >   double y;
> > > > };
> > > > typedef vector<boundaryPt>    boundary;
> > > > typedef vector<boundary>      boundaryList;
> > > > typedef vector<boundaryList>  polygonList;
> > > > 
> > > > class members used:
> > > >   polygonList       ptPolygons;
> > > >   string tmpStr;
> > > >   string errMsg;
> > > > 
> > > > class function:
> > > > string c_polygon_gml::WKTString(void) {
> > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > >   vector<Geometry *> polygons;
> > > >   vector<Geometry *> holes;
> > > >   int i,j,k;
> > > >   string resStr = "";
> > > > 
> > > >   try{
> > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > 
> > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >       boundaryList bl = ptPolygons[i];
> > > >       boundary b = bl[0];
> > > >       TRACE_OUTPUT("Polygon " << i);
> > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >       }
> > > > 
> > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > >         TRACE_OUTPUT("Hole " << j);
> > > >         boundary b = bl[j];
> > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >         }
> > > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > > >         holes.push_back(geom1);
> > > >         delete cl2;
> > > >       }
> > > >       // create a polygon from the 1st CoordinateList and the holes
> > > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > >       TRACE_OUTPUT("test ");
> > > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > > 
> > > >       // save this polygon in another vector
> > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > >       polygons.push_back(geom2);
> > > >       delete cl1;
> > > >     }
> > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > >     // when all done create a MultiPolygon object
> > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > >     TRACE_OUTPUT("Creating string");
> > > >     resStr = geom3->toString();
> > > > 
> > > >     //clean up
> > > >     delete geom3;
> > > >     delete gf;
> > > >   }
> > > >   catch (GEOSException *ge) {
> > > >     errMsg = ge->toString();
> > > >   }
> > > >   return resStr;
> > > > }
> > > > 
> > > > XML read in by class and stored in ptPolygons:
> > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > <AreaDefinition>
> > > > <GDSRequest>
> > > > <query>
> > > > <AreaQuery outputContent="public">
> > > > <queryArea>
> > > > <Polygon srsName="osgb:BNG">
> > > > <outerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 339252,1019302
> > > > 339252,1029077
> > > > 348752,1029077
> > > > 346102,1019653
> > > > 339252,1019302
> > > > </coordinates>
> > > > </LinearRing>
> > > > </outerBoundaryIs>
> > > > <innerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 340000,1020000
> > > > 340000,1021000
> > > > 341000,1021000
> > > > 341000,1020000
> > > > 340000,1020000
> > > > </coordinates>
> > > > </LinearRing>
> > > > </innerBoundaryIs>
> > > > </Polygon>
> > > > </queryArea>
> > > > </AreaQuery>
> > > > </query>
> > > > </GDSRequest>
> > > > </AreaDefinition>
> > > > 
> > > > Output:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Hole 1
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Added point 340000,1.021e+06
> > > > TR:   Added point 341000,1.021e+06
> > > > TR:   Added point 341000,1.02e+06
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > Segmentation fault
> > > > 
> > > > Output when the hole is removed:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > > TR:   Adding polygon 0
> > > > TR:   Creating multi-polygon
> > > > TR:   Creating string
> > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > ERROR:
> > > > WTF format
> > > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > > 
> > > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: 28 June 2004 11:01
> > > > To: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > Can you send the test code ?
> > > > There are currently no known bug ...
> > > > --strk;
> > > > 
> > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > Hi all,
> > > > > 
> > > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > > 
> > > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > > 
> > > > > I am using version 1.0.
> > > > > 
> > > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > > 
> > > > > Is there a fix for this, or has anyone come accross it?
> > > > > 
> > > > > Thanks in advance,
> > > > > Darren
> > > > > 
> > > > > 
> > > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > > 
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Jun 29 18:54:18 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8B4A@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8B4A@itl-serv1.infoterra-global.com>
Message-ID: <20040629225418.GB67881@freek.keybit.net>

On Tue, Jun 29, 2004 at 10:37:01AM +0100, Darren Carman wrote:
> Sorry, it didnt work - I forgot that I had commented out the hole initialisation in my code.
> 
> I changed your code below to use LinearRings (for geom1, geom2 and geom3) as well and saw the seg fault while calling toString on geom3 (as happens in my code). Again no seg fault is seen when no hole is supplied (it also works with geom1-3 as Geometry * when no hole is supplied).
> 
> So I am still at a loss.

The code I've sent you was not intended to work.
Please send another 'clean' and buildable example of your work.

> 
> Maybe it would help if I could get the cvs version to work - I do the following:
> ./autogen.sh                                 --> as no configure there
> ./configure --prefix=$HOME/<path>/           --> lib is used locally, not globally
> make
> make install
> 
> then when I make and run the test program I get the following:
> ./test_bug: relocation error: ./test_bug: undefined symbol: _ZNK4geos15GeometryFactory16createLinearRingEPNS_14CoordinateListE

GEOS-CVS is not ABI-compatible with GEOS-1.0
You have to re-compile your test code.
Please let me know.

--strk;

> 
> Thanks,
> Darren
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 28 June 2004 21:37
> To: Darren Carman; GEOS Development List
> Cc: Paul Ramsey; Yury A. Bychkov
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> Ok. I've found the bug.
> It is in your code (and in GEOS not handling it).
> 
> Main problem: you push a Polygon in the holes vector.
> This - although defined as a Geometry vector - is indeed a LinearRing
> vector, failing to enforce this typing does result in segfault
> (not checked in Polygon.cpp).
> 
> Sub-problem1: your holes vector is an automatic variable, so it
> is deleted when the code exits the block it is defined in.
> The Polygon constructor copy the vector pointer and will delete it
> at Polygon destructio time (I'd change this).
> 
> Sub-problem2: if I understood your code you are pushing in the
> holes vector the geometries you previously created, with no cloning.
> Again the Polygon constructor will take ownership of them (which should
> be LinearRing) so you should ->clone() them before adding to the vector.
> 
> My proposal: make Polygon contructor deep copy shell and holes checking
> for holes type to be LinearRing.
> 
> A question: why isn't holes a vector <LinearRing *> * ?
> 
> A note: I did not update CVS... I'd like to hear about my proposal first.
> 
> --strk;
> 
> On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> > I could not find the problem.
> > Here is a reduced code exploiting the error.
> > I'll keep inspecting this...
> > 
> > BTW: I don't feel comportable in Polygon constructor taking
> > ownership of passed arguments, what people think about modifying
> > this as well ?
> > 
> > --strk;
> > 
> > //--------------------------8<-------------------
> > 
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > #include <geos/util.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > int main(int argc, char *argv[]) {
> >         Coordinate c;
> >         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
> >         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> > 
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> >         c.x = 339252; c.y = 1029077; cl1->add(c);
> >         c.x = 348752; c.y = 1029077; cl1->add(c);
> >         c.x = 346102; c.y = 1019653; cl1->add(c);
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > 
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > 
> >         try {
> >                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> >                 cout<<"geom1: "<<geom1->toString()<<endl;
> >                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >                 cout<<"geom2: "<<geom2->toString()<<endl;
> >                 vector<Geometry*>*holes = new vector<Geometry*>(1);
> >                 (*holes)[0] = geom2->clone();
> >                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> >                 cout<<"geom3: "<<geom3->toString()<<endl;
> >                 delete cl1;
> >                 delete cl2;
> >         } catch (GEOSException *ge) {
> >                 cout << "ERROR: " << ge->toString() << endl;
> >         } catch (...) {
> >                 cout << "generic ERROR" << endl;
> >         }
> > }
> > 
> > //--------------------------8<-------------------
> > 
> > 
> > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > #include <geos/io.h>
> > > #include <geos/geom.h>
> > > 
> > > using namespace std;
> > > using namespace geos;
> > > 
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > polygonList       ptPolygons;
> > > 
> > > int main(int argc, char *argv[]) {
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   boundaryPt poly1[5];
> > >   boundaryPt hole1[5];
> > >   boundary tmpBoundary;
> > >   boundaryList tmpBoundaryList;
> > >   polygonList ptPolygons;
> > > 
> > >   poly1[0].x = 339252;
> > >   poly1[0].y = 1019302;
> > >   poly1[1].x = 339252;
> > >   poly1[1].y = 1029077;
> > >   poly1[2].x = 348752;
> > >   poly1[2].y = 1029077;
> > >   poly1[3].x = 346102;
> > >   poly1[3].y = 1019653;
> > >   poly1[4].x = 339252;
> > >   poly1[4].y = 1019302;
> > > 
> > >   hole1[0].x = 340000;
> > >   hole1[0].y = 1020000;
> > >   hole1[1].x = 340000;
> > >   hole1[1].y = 1021000;
> > >   hole1[2].x = 341000;
> > >   hole1[2].y = 1021000;
> > >   hole1[3].x = 341000;
> > >   hole1[3].y = 1020000;
> > >   hole1[4].x = 340000;
> > >   hole1[4].y = 1020000;
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(poly1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(hole1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   ptPolygons.push_back(tmpBoundaryList);
> > >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> > >     tmpBoundaryList[i].clear();
> > >   }
> > >   tmpBoundaryList.clear();
> > > 
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       cout << "Polygon " << i << endl;
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         cout << "Hole " << j << endl;
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> > >       cout << "test " << endl;
> > >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > > 
> > >       // save this polygon in another vector
> > >       cout << "Adding polygon " << i << endl;
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     cout << "Creating multi-polygon" << endl;
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     cout << "Creating string" << endl;
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     cout << "ERROR: " << ge->toString() << endl;
> > >   }
> > >   cout << resStr << endl;
> > > }
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:28
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you produce a neter code exploiting the bug ?
> > > I mean a .cpp file I can compile and run and debug :)
> > > 
> > > -strk;
> > > 
> > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > defs:
> > > > typedef struct boundaryPt {
> > > >   double x;
> > > >   double y;
> > > > };
> > > > typedef vector<boundaryPt>    boundary;
> > > > typedef vector<boundary>      boundaryList;
> > > > typedef vector<boundaryList>  polygonList;
> > > > 
> > > > class members used:
> > > >   polygonList       ptPolygons;
> > > >   string tmpStr;
> > > >   string errMsg;
> > > > 
> > > > class function:
> > > > string c_polygon_gml::WKTString(void) {
> > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > >   vector<Geometry *> polygons;
> > > >   vector<Geometry *> holes;
> > > >   int i,j,k;
> > > >   string resStr = "";
> > > > 
> > > >   try{
> > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > 
> > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >       boundaryList bl = ptPolygons[i];
> > > >       boundary b = bl[0];
> > > >       TRACE_OUTPUT("Polygon " << i);
> > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >       }
> > > > 
> > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > >         TRACE_OUTPUT("Hole " << j);
> > > >         boundary b = bl[j];
> > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >         }
> > > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > > >         holes.push_back(geom1);
> > > >         delete cl2;
> > > >       }
> > > >       // create a polygon from the 1st CoordinateList and the holes
> > > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > >       TRACE_OUTPUT("test ");
> > > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > > 
> > > >       // save this polygon in another vector
> > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > >       polygons.push_back(geom2);
> > > >       delete cl1;
> > > >     }
> > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > >     // when all done create a MultiPolygon object
> > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > >     TRACE_OUTPUT("Creating string");
> > > >     resStr = geom3->toString();
> > > > 
> > > >     //clean up
> > > >     delete geom3;
> > > >     delete gf;
> > > >   }
> > > >   catch (GEOSException *ge) {
> > > >     errMsg = ge->toString();
> > > >   }
> > > >   return resStr;
> > > > }
> > > > 
> > > > XML read in by class and stored in ptPolygons:
> > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > <AreaDefinition>
> > > > <GDSRequest>
> > > > <query>
> > > > <AreaQuery outputContent="public">
> > > > <queryArea>
> > > > <Polygon srsName="osgb:BNG">
> > > > <outerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 339252,1019302
> > > > 339252,1029077
> > > > 348752,1029077
> > > > 346102,1019653
> > > > 339252,1019302
> > > > </coordinates>
> > > > </LinearRing>
> > > > </outerBoundaryIs>
> > > > <innerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 340000,1020000
> > > > 340000,1021000
> > > > 341000,1021000
> > > > 341000,1020000
> > > > 340000,1020000
> > > > </coordinates>
> > > > </LinearRing>
> > > > </innerBoundaryIs>
> > > > </Polygon>
> > > > </queryArea>
> > > > </AreaQuery>
> > > > </query>
> > > > </GDSRequest>
> > > > </AreaDefinition>
> > > > 
> > > > Output:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Hole 1
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Added point 340000,1.021e+06
> > > > TR:   Added point 341000,1.021e+06
> > > > TR:   Added point 341000,1.02e+06
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > Segmentation fault
> > > > 
> > > > Output when the hole is removed:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > > TR:   Adding polygon 0
> > > > TR:   Creating multi-polygon
> > > > TR:   Creating string
> > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > ERROR:
> > > > WTF format
> > > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > > 
> > > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: 28 June 2004 11:01
> > > > To: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > Can you send the test code ?
> > > > There are currently no known bug ...
> > > > --strk;
> > > > 
> > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > Hi all,
> > > > > 
> > > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > > 
> > > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > > 
> > > > > I am using version 1.0.
> > > > > 
> > > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > > 
> > > > > Is there a fix for this, or has anyone come accross it?
> > > > > 
> > > > > Thanks in advance,
> > > > > Darren
> > > > > 
> > > > > 
> > > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > > 
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Jun 29 19:28:02 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F54B9@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0274F54B9@venus.VividSolutions.com>
Message-ID: <20040629232802.GC67881@freek.keybit.net>

On Mon, Jun 28, 2004 at 03:04:21PM -0700, Martin Davis wrote:
> Not sure there's any neat solution to this problem....  I think you'll
> have to go with the extra arg.  
> 
> The other option is to just provide the copying functionality in the
> GeometryFactory, not in the basic constructors.  

We'd have to modify Geometry constructors anyway, so this would not
really reduce the effort.

> Personally I would rather keep the whole thing clean, and not provide
> copying. After all, who is the client for this?  And why can't they
> learn to copy when needed?

Unfortunately copying is not always clean ...
For Geometries your have the ->clone() method, while
the same is not that clear for other types of constructors...
LineString - for example - take a CoordinateList, which is copied with:
points=CoordinateListFactory::internalFactory->createCoordinateList(pts)
(which is ugly and very unconfortable).
Polygon - another example - take vector<Geometry *>*holes as second
argument, which takes a loop to be copied.

My point is that current GEOS status has not a neat copying interface
for all everyday use classes, so hiding the complexity of it might be
worth. Another point - but that is opinable - is that as a standard
way of programming any object should be destroyed by the object that
created it, for mind serenity's sake, so a non-standard behaviour should
be explicitly advertised (an additional arg would do).

See also darren problems with memory management
(sure he DO can learn...)

--strk;

> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net] 
> > Sent: June 28, 2004 2:56 PM
> > To: Martin Davis
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > On Mon, Jun 28, 2004 at 02:21:12PM -0700, Martin Davis wrote:
> > > Good point.
> > > 
> > > How are you going to indicate that copying is required in the 
> > > constructors?
> > 
> > I'm stuck on that part :)
> > Basically I was thinking about duplicating each constructor
> > so to have a deep-copier and a ownership-taker.
> > The two constructors would be distinguished by a fake 
> > additional argument (an argument needed just to distinguish 
> > them, whose value does not matter). I don't like this setup, 
> > but I don't see any enlightment.
> > 
> > Just one more alternative is putting this logic in the 
> > geometryfactory which could create empty versions and then 
> > 'install' actual content... this would waste some space and 
> > cpu but not that much.
> > 
> > What do you think? 
> > 
> > --strk;
> > 
> > > 
> > > Martin Davis, Senior Technical Architect
> > > Vivid Solutions Inc.      www.vividsolutions.com
> > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > 
> > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: June 28, 2004 2:20 PM
> > > > To: Martin Davis
> > > > Cc: geos-devel@geos.refractions.net
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > On Mon, Jun 28, 2004 at 02:15:31PM -0700, Martin Davis wrote:
> > > > > By pattern/support class is just fancy software engineering
> > > > speak for
> > > > > "make it standard and simple for the client".
> > > > > 
> > > > > What do you mean by "duplicating each constructor"?  Do you mean
> > > > > duplicating each method on the GeometryFactory?
> > > > 
> > > > Wooo.. actually I meant each Geometry constructor AND
> > > > GeometryFactory methods. GeometryFactory methods call 
> > > > Geometry constructors after 
> > > > all so the double-approach must be present in both places.
> > > > 
> > > > --strk;
> > > > 
> > > > > 
> > > > > Martin Davis, Senior Technical Architect
> > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > 
> > > > > 
> > > > > > -----Original Message-----
> > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > Sent: June 28, 2004 1:59 PM
> > > > > > To: Martin Davis
> > > > > > Cc: GEOS Development List
> > > > > > Subject: Re: [geos-devel] Problems creating polygons 
> > with holes
> > > > > > 
> > > > > > 
> > > > > > On Mon, Jun 28, 2004 at 01:50:09PM -0700, Martin Davis wrote:
> > > > > > > Strk:
> > > > > > > 
> > > > > > > IMO the current paradigm (that of constructors taking
> > > > ownership of
> > > > > > > their
> > > > > > > components) is the correct one.  The reason is to avoid
> > > > unecessary
> > > > > > > copying of argument data (which could be large).  It should
> > > > > > be left up
> > > > > > > to the caller to decide when and where they need to copy
> > > > > > > arguments.
> > > > > > > 
> > > > > > > Yes, this is a potential source of errors for clients, if
> > > > > > they don't
> > > > > > > understand how to properly use the library.  But the 
> > > > > > > alternative forces clients to tolerate extra overhead even 
> > > > > > > when
> > > > they don't need
> > > > > > > it, which is not friendly behaviour from a library.
> > > > > > > 
> > > > > > > If this is really onerous, two versions of each constructor
> > > > > > could be
> > > > > > > provided.  Or possibly even better, a pattern & support
> > > > > > class to make
> > > > > > > it easy to copy arguments.
> > > > > > 
> > > > > > Unfortunately geos-1.0 was released with mixed 
> > policy, which is 
> > > > > > what I'm trying to conform now.
> > > > > > 
> > > > > > I like the idea of letting callers specify whether or not to 
> > > > > > take ownership and so far duplicationg each constructor seems 
> > > > > > the cleaner way (adding a parameter takeOwnership 
> > would make all 
> > > > > > const correctness useless and will require 
> > modifications in many 
> > > > > > places).
> > > > > > 
> > > > > > What do you mean by pattern & support class ?
> > > > > > 
> > > > > > --strk;
> > > > > > 
> > > > > > 
> > > > > > > 
> > > > > > > Martin Davis, Senior Technical Architect
> > > > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > > > 
> > > > > > > 
> > > > > > > > -----Original Message-----
> > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > Sent: June 28, 2004 12:59 PM
> > > > > > > > To: Darren Carman
> > > > > > > > Cc: GEOS Development List
> > > > > > > > Subject: Re: [geos-devel] Problems creating polygons
> > > > with holes
> > > > > > > > 
> > > > > > > > 
> > > > > > > > I could not find the problem.
> > > > > > > > Here is a reduced code exploiting the error.
> > > > > > > > I'll keep inspecting this...
> > > > > > > > 
> > > > > > > > BTW: I don't feel comportable in Polygon 
> > constructor taking
> > > > > > > > ownership of passed arguments, what people think 
> > > > about modifying
> > > > > > > > this as well ?
> > > > > > > > 
> > > > > > > > --strk;
> > > > > > > > 
> > > > > > > > //--------------------------8<-------------------
> > > > > > > > 
> > > > > > > > #include <geos/io.h>
> > > > > > > > #include <geos/geom.h>
> > > > > > > > #include <geos/util.h>
> > > > > > > > 
> > > > > > > > using namespace std;
> > > > > > > > using namespace geos;
> > > > > > > > 
> > > > > > > > int main(int argc, char *argv[]) {
> > > > > > > >         Coordinate c;
> > > > > > > >         CoordinateList *cl1 =
> > > > > > > > 
> > > > CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > >         CoordinateList *cl2 =
> > > > > > > > 
> > > > CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > 
> > > > > > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > > > > >         c.x = 339252; c.y = 1029077; cl1->add(c);
> > > > > > > >         c.x = 348752; c.y = 1029077; cl1->add(c);
> > > > > > > >         c.x = 346102; c.y = 1019653; cl1->add(c);
> > > > > > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > > > > > 
> > > > > > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > > > > >         c.x = 340000; c.y = 1021000; cl2->add(c);
> > > > > > > >         c.x = 341000; c.y = 1021000; cl2->add(c);
> > > > > > > >         c.x = 341000; c.y = 1020000; cl2->add(c);
> > > > > > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > > > > > 
> > > > > > > >         try {
> > > > > > > >                 GeometryFactory *gf=new 
> > GeometryFactory(new
> > > > > > > > PrecisionModel(),0);
> > > > > > > > 
> > > > > > > >                 Geometry
> > > > > > > > *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> > > > > > > >                 cout<<"geom1: "<<geom1->toString()<<endl;
> > > > > > > >                 Geometry
> > > > > > > > *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > >                 cout<<"geom2: "<<geom2->toString()<<endl;
> > > > > > > >                 vector<Geometry*>*holes = new 
> > > > > > vector<Geometry*>(1);
> > > > > > > >                 (*holes)[0] = geom2->clone();
> > > > > > > >                 Geometry 
> > > > > > > > *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> > > > > > > >                 cout<<"geom3: "<<geom3->toString()<<endl;
> > > > > > > >                 delete cl1;
> > > > > > > >                 delete cl2;
> > > > > > > >         } catch (GEOSException *ge) {
> > > > > > > >                 cout << "ERROR: " << 
> > ge->toString() << endl;
> > > > > > > >         } catch (...) {
> > > > > > > >                 cout << "generic ERROR" << endl;
> > > > > > > >         }
> > > > > > > > }
> > > > > > > > 
> > > > > > > > //--------------------------8<-------------------
> > > > > > > > 
> > > > > > > > 
> > > > > > > > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman 
> > > > > > > > wrote:
> > > > > > > > > #include <geos/io.h>
> > > > > > > > > #include <geos/geom.h>
> > > > > > > > > 
> > > > > > > > > using namespace std;
> > > > > > > > > using namespace geos;
> > > > > > > > > 
> > > > > > > > > typedef struct boundaryPt {
> > > > > > > > >   double x;
> > > > > > > > >   double y;
> > > > > > > > > };
> > > > > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > > > > typedef vector<boundary>      boundaryList;
> > > > > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > > > > 
> > > > > > > > > polygonList       ptPolygons;
> > > > > > > > > 
> > > > > > > > > int main(int argc, char *argv[]) {
> > > > > > > > >   vector<Geometry *> polygons;
> > > > > > > > >   vector<Geometry *> holes;
> > > > > > > > >   int i,j,k;
> > > > > > > > >   string resStr = "";
> > > > > > > > > 
> > > > > > > > >   boundaryPt poly1[5];
> > > > > > > > >   boundaryPt hole1[5];
> > > > > > > > >   boundary tmpBoundary;
> > > > > > > > >   boundaryList tmpBoundaryList;
> > > > > > > > >   polygonList ptPolygons;
> > > > > > > > > 
> > > > > > > > >   poly1[0].x = 339252;
> > > > > > > > >   poly1[0].y = 1019302;
> > > > > > > > >   poly1[1].x = 339252;
> > > > > > > > >   poly1[1].y = 1029077;
> > > > > > > > >   poly1[2].x = 348752;
> > > > > > > > >   poly1[2].y = 1029077;
> > > > > > > > >   poly1[3].x = 346102;
> > > > > > > > >   poly1[3].y = 1019653;
> > > > > > > > >   poly1[4].x = 339252;
> > > > > > > > >   poly1[4].y = 1019302;
> > > > > > > > > 
> > > > > > > > >   hole1[0].x = 340000;
> > > > > > > > >   hole1[0].y = 1020000;
> > > > > > > > >   hole1[1].x = 340000;
> > > > > > > > >   hole1[1].y = 1021000;
> > > > > > > > >   hole1[2].x = 341000;
> > > > > > > > >   hole1[2].y = 1021000;
> > > > > > > > >   hole1[3].x = 341000;
> > > > > > > > >   hole1[3].y = 1020000;
> > > > > > > > >   hole1[4].x = 340000;
> > > > > > > > >   hole1[4].y = 1020000;
> > > > > > > > > 
> > > > > > > > >   for (i=0; i<5; i++) {
> > > > > > > > >     tmpBoundary.push_back(poly1[i]);
> > > > > > > > >   }
> > > > > > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > > > > > >   tmpBoundary.clear();
> > > > > > > > > 
> > > > > > > > >   for (i=0; i<5; i++) {
> > > > > > > > >     tmpBoundary.push_back(hole1[i]);
> > > > > > > > >   }
> > > > > > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > > > > > >   tmpBoundary.clear();
> > > > > > > > > 
> > > > > > > > >   ptPolygons.push_back(tmpBoundaryList);
> > > > > > > > >   for(int i=0; i<
> > > > > > static_cast<int>(tmpBoundaryList.size()); i++) {
> > > > > > > > >     tmpBoundaryList[i].clear();
> > > > > > > > >   }
> > > > > > > > >   tmpBoundaryList.clear();
> > > > > > > > > 
> > > > > > > > > 
> > > > > > > > >   try{
> > > > > > > > >     GeometryFactory *gf=new GeometryFactory(new 
> > > > > > > > > PrecisionModel(),0);
> > > > > > > > > 
> > > > > > > > >     // for each outer ring create a 
> > CoordinateList and add
> > > > > > > > all the points to it
> > > > > > > > >     for(i=0; i< 
> > static_cast<int>(ptPolygons.size()); i++) {
> > > > > > > > >       CoordinateList
> > > > > > > > 
> > > > > > 
> > > > 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > >       boundaryList bl = ptPolygons[i];
> > > > > > > > >       boundary b = bl[0];
> > > > > > > > >       cout << "Polygon " << i << endl;
> > > > > > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > >         cout << "Added point " << b[k].x << ',' <<
> > > > > > b[k].y << endl;
> > > > > > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > >       }
> > > > > > > > > 
> > > > > > > > >       // for each hole create a coordinate list like 
> > > > > > > > > above,
> > > > > > > > create a polygon and add to a Geometry vector
> > > > > > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > > > > > >         cout << "Hole " << j << endl;
> > > > > > > > >         boundary b = bl[j];
> > > > > > > > >         CoordinateList
> > > > > > > > 
> > > > > > 
> > > > 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > >           cout << "Added point " << b[k].x << ',' <<
> > > > > > b[k].y << endl;
> > > > > > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > >         }
> > > > > > > > >         cout << "Creating polygon for hole " << 
> > j << ": "
> > > > > > > > << cl2->toString() << endl;
> > > > > > > > >         Geometry
> > > > > > > > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > > >         cout << "Geometry " << j << " : " <<
> > > > > > > > geom1->toString() << endl;
> > > > > > > > >         holes.push_back(geom1);
> > > > > > > > >         delete cl2;
> > > > > > > > >       }
> > > > > > > > >       // create a polygon from the 1st CoordinateList
> > > > > > and the holes
> > > > > > > > >       cout << "Creating polygon " << i << ": " <<
> > > > > > > > cl1->toString() << endl;
> > > > > > > > >       Geometry
> > > > > > > > 
> > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);   
> > > > > > > >                                           
> > > > > > > > >       cout << "test " << endl;
> > > > > > > > >       cout << "Geometry " << i << " : " <<
> > > > > > > > geom2->toString() << endl;
> > > > > > > > > 
> > > > > > > > >       // save this polygon in another vector
> > > > > > > > >       cout << "Adding polygon " << i << endl;
> > > > > > > > >       polygons.push_back(geom2);
> > > > > > > > >       delete cl1;
> > > > > > > > >     }
> > > > > > > > >     cout << "Creating multi-polygon" << endl;
> > > > > > > > >     // when all done create a MultiPolygon object
> > > > > > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > > > > > >     cout << "Creating string" << endl;
> > > > > > > > >     resStr = geom3->toString();
> > > > > > > > > 
> > > > > > > > >     //clean up
> > > > > > > > >     delete geom3;
> > > > > > > > >     delete gf;
> > > > > > > > >   }
> > > > > > > > >   catch (GEOSException *ge) {
> > > > > > > > >     cout << "ERROR: " << ge->toString() << endl;
> > > > > > > > >   }
> > > > > > > > >   cout << resStr << endl;
> > > > > > > > > }
> > > > > > > > > 
> > > > > > > > > -----Original Message-----
> > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > Sent: 28 June 2004 11:28
> > > > > > > > > To: GEOS Development List
> > > > > > > > > Subject: Re: [geos-devel] Problems creating 
> > polygons with
> > > > > > > > > holes
> > > > > > > > > 
> > > > > > > > > 
> > > > > > > > > Can you produce a neter code exploiting the bug 
> > ? I mean a 
> > > > > > > > > .cpp file I can compile and run and debug :)
> > > > > > > > > 
> > > > > > > > > -strk;
> > > > > > > > > 
> > > > > > > > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren
> > > > Carman wrote:
> > > > > > > > > > defs:
> > > > > > > > > > typedef struct boundaryPt {
> > > > > > > > > >   double x;
> > > > > > > > > >   double y;
> > > > > > > > > > };
> > > > > > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > > > > > typedef vector<boundary>      boundaryList;
> > > > > > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > > > > > 
> > > > > > > > > > class members used:
> > > > > > > > > >   polygonList       ptPolygons;
> > > > > > > > > >   string tmpStr;
> > > > > > > > > >   string errMsg;
> > > > > > > > > > 
> > > > > > > > > > class function:
> > > > > > > > > > string c_polygon_gml::WKTString(void) {
> > > > > > > > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > > > > > > > >   vector<Geometry *> polygons;
> > > > > > > > > >   vector<Geometry *> holes;
> > > > > > > > > >   int i,j,k;
> > > > > > > > > >   string resStr = "";
> > > > > > > > > > 
> > > > > > > > > >   try{
> > > > > > > > > >     GeometryFactory *gf=new GeometryFactory(new
> > > > > > > > PrecisionModel(),0);
> > > > > > > > > > 
> > > > > > > > > >     // for each outer ring create a CoordinateList and
> > > > > > > > add all the points to it
> > > > > > > > > >     for(i=0; i<
> > > > static_cast<int>(ptPolygons.size()); i++) {
> > > > > > > > > >       CoordinateList
> > > > > > > > 
> > > > > > 
> > > > 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > >       boundaryList bl = ptPolygons[i];
> > > > > > > > > >       boundary b = bl[0];
> > > > > > > > > >       TRACE_OUTPUT("Polygon " << i);
> > > > > > > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > > >         TRACE_OUTPUT("Added point " << b[k].x << ','
> > > > > > << b[k].y);
> > > > > > > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > > >       }
> > > > > > > > > > 
> > > > > > > > > >       // for each hole create a coordinate list like
> > > > > > > > above, create a polygon and add to a Geometry vector
> > > > > > > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > > > > > > >         TRACE_OUTPUT("Hole " << j);
> > > > > > > > > >         boundary b = bl[j];
> > > > > > > > > >         CoordinateList
> > > > > > > > 
> > > > > > 
> > > > 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > > >           TRACE_OUTPUT("Added point " << b[k].x <<
> > > > > > ',' << b[k].y);
> > > > > > > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > > >         }
> > > > > > > > > >         TRACE_OUTPUT("Creating polygon for 
> > hole " << j 
> > > > > > > > > > <<
> > > > > > > > ": " << cl2->toString());
> > > > > > > > > >         Geometry
> > > > > > > > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > > > >         TRACE_OUTPUT("Geometry " << j << " : " <<
> > > > > > > > geom1->toString());
> > > > > > > > > >         holes.push_back(geom1);
> > > > > > > > > >         delete cl2;
> > > > > > > > > >       }
> > > > > > > > > >       // create a polygon from the 1st CoordinateList 
> > > > > > > > > > and
> > > > > > > > the holes
> > > > > > > > > >       TRACE_OUTPUT("Creating polygon " << i << ": " <<
> > > > > > > > cl1->toString());
> > > > > > > > > >       Geometry
> > > > > > > > 
> > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > > > > > > > >       TRACE_OUTPUT("test ");
> > > > > > > > > >       TRACE_OUTPUT("Geometry " << i << " : " <<
> > > > > > > > geom2->toString());
> > > > > > > > > > 
> > > > > > > > > >       // save this polygon in another vector
> > > > > > > > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > > > > > > > >       polygons.push_back(geom2);
> > > > > > > > > >       delete cl1;
> > > > > > > > > >     }
> > > > > > > > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > > > > > > > >     // when all done create a MultiPolygon object
> > > > > > > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > > > > > > >     TRACE_OUTPUT("Creating string");
> > > > > > > > > >     resStr = geom3->toString();
> > > > > > > > > > 
> > > > > > > > > >     //clean up
> > > > > > > > > >     delete geom3;
> > > > > > > > > >     delete gf;
> > > > > > > > > >   }
> > > > > > > > > >   catch (GEOSException *ge) {
> > > > > > > > > >     errMsg = ge->toString();
> > > > > > > > > >   }
> > > > > > > > > >   return resStr;
> > > > > > > > > > }
> > > > > > > > > > 
> > > > > > > > > > XML read in by class and stored in ptPolygons: <?xml
> > > > > > > > > > version="1.0" encoding="UTF-8"?> <AreaDefinition>
> > > > > > > > > > <GDSRequest>
> > > > > > > > > > <query>
> > > > > > > > > > <AreaQuery outputContent="public">
> > > > > > > > > > <queryArea>
> > > > > > > > > > <Polygon srsName="osgb:BNG">
> > > > > > > > > > <outerBoundaryIs>
> > > > > > > > > > <LinearRing>
> > > > > > > > > > <coordinates>
> > > > > > > > > > 339252,1019302
> > > > > > > > > > 339252,1029077
> > > > > > > > > > 348752,1029077
> > > > > > > > > > 346102,1019653
> > > > > > > > > > 339252,1019302
> > > > > > > > > > </coordinates>
> > > > > > > > > > </LinearRing>
> > > > > > > > > > </outerBoundaryIs>
> > > > > > > > > > <innerBoundaryIs>
> > > > > > > > > > <LinearRing>
> > > > > > > > > > <coordinates>
> > > > > > > > > > 340000,1020000
> > > > > > > > > > 340000,1021000
> > > > > > > > > > 341000,1021000
> > > > > > > > > > 341000,1020000
> > > > > > > > > > 340000,1020000
> > > > > > > > > > </coordinates>
> > > > > > > > > > </LinearRing>
> > > > > > > > > > </innerBoundaryIs>
> > > > > > > > > > </Polygon>
> > > > > > > > > > </queryArea>
> > > > > > > > > > </AreaQuery>
> > > > > > > > > > </query>
> > > > > > > > > > </GDSRequest>
> > > > > > > > > > </AreaDefinition>
> > > > > > > > > > 
> > > > > > > > > > Output:
> > > > > > > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file
> > > > > > > > c_polygon_gml.cpp
> > > > > > > > > > TR:   Polygon 0
> > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > TR:   Hole 1
> > > > > > > > > > TR:   Added point 340000,1.02e+06
> > > > > > > > > > TR:   Added point 340000,1.021e+06
> > > > > > > > > > TR:   Added point 341000,1.021e+06
> > > > > > > > > > TR:   Added point 341000,1.02e+06
> > > > > > > > > > TR:   Added point 340000,1.02e+06
> > > > > > > > > > TR:   Creating polygon for hole 1: 
> > > > > > > > (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308)
> > > > > > > > (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308)
> > > > > > > > (340000,1.02e+06,1.7e-308)
> > > > > > > > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 
> > > > > > > > 1020000.0000000000000000, 340000.0000000000000000
> > > > > > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > > > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > > > > > 1020000.0000000000000000, 340000.0000000000000000
> > > > > > > > 1020000.0000000000000000))
> > > > > > > > > > TR:   Creating polygon 0: 
> > (339252,1.0193e+06,1.7e-308) 
> > > > > > > > (339252,1.02908e+06,1.7e-308) 
> > (348752,1.02908e+06,1.7e-308)
> > > > > > > > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > TR:   test
> > > > > > > > > > Segmentation fault
> > > > > > > > > > 
> > > > > > > > > > Output when the hole is removed:
> > > > > > > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file
> > > > > > > > c_polygon_gml.cpp
> > > > > > > > > > TR:   Polygon 0
> > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > TR:   Creating polygon 0: 
> > (339252,1.0193e+06,1.7e-308) 
> > > > > > > > (339252,1.02908e+06,1.7e-308) 
> > (348752,1.02908e+06,1.7e-308)
> > > > > > > > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > TR:   test
> > > > > > > > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 
> > > > > > > > 1019302.0000000000000000, 339252.0000000000000000
> > > > > > > > 1029077.0000000000000000, 348752.0000000000000000 
> > > > > > > > 1029077.0000000000000000, 346102.0000000000000000 
> > > > > > > > 1019653.0000000000000000, 339252.0000000000000000
> > > > > > > > 1019302.0000000000000000))
> > > > > > > > > > TR:   Adding polygon 0
> > > > > > > > > > TR:   Creating multi-polygon
> > > > > > > > > > TR:   Creating string
> > > > > > > > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > > > > > > > ERROR:
> > > > > > > > > > WTF format
> > > > > > > > > > MULTIPOLYGON (((339252.0000000000000000 
> > > > > > > > > > 1019302.0000000000000000, 339252.0000000000000000 
> > > > > > > > > > 1029077.0000000000000000, 348752.0000000000000000 
> > > > > > > > > > 1029077.0000000000000000, 346102.0000000000000000 
> > > > > > > > > > 1019653.0000000000000000, 339252.0000000000000000 
> > > > > > > > > > 1019302.0000000000000000)))
> > > > > > > > > > 
> > > > > > > > > > 
> > > > > > > > > > -----Original Message-----
> > > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > > Sent: 28 June 2004 11:01
> > > > > > > > > > To: GEOS Development List
> > > > > > > > > > Subject: Re: [geos-devel] Problems creating polygons
> > > > > > with holes
> > > > > > > > > > 
> > > > > > > > > > 
> > > > > > > > > > Can you send the test code ?
> > > > > > > > > > There are currently no known bug ...
> > > > > > > > > > --strk;
> > > > > > > > > > 
> > > > > > > > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, 
> > Darren Carman
> > > > > > > > > > wrote:
> > > > > > > > > > > Hi all,
> > > > > > > > > > > 
> > > > > > > > > > > I am creating polygons with holes and want 
> > to use geos
> > > > > > > > to allow me
> > > > > > > > > > > to output them in WKT.
> > > > > > > > > > > 
> > > > > > > > > > > A polygon without a hole works fine, but as 
> > soon as I
> > > > > > > > add a hole I
> > > > > > > > > > > get a segmentation fault after calling the
> > > > > > > > createPolygon function
> > > > > > > > > > > (GeometryFactory) and trying to run toString on
> > > > > > that polygon.
> > > > > > > > > > > 
> > > > > > > > > > > I am using version 1.0.
> > > > > > > > > > > 
> > > > > > > > > > > I have tried getting the latest version from CVS but
> > > > > > > > this causes a
> > > > > > > > > > > segmentation fault to occur while adding the
> > > > 5th polygon
> > > > > > > > > > > coordinate to the CoordinateList (there are only 4
> > > > > > > > coordinates in
> > > > > > > > > > > the test polygon, the 5th being the first 
> > one repeated
> > > > > > > > - I tried
> > > > > > > > > > > making it 6 to see if it was a problem with closing 
> > > > > > > > > > > the polygon but I still got a segmentation 
> > fault while
> > > > adding the 5th).
> > > > > > > > > > > 
> > > > > > > > > > > Is there a fix for this, or has anyone come accross 
> > > > > > > > > > > it?
> > > > > > > > > > > 
> > > > > > > > > > > Thanks in advance,
> > > > > > > > > > > Darren
> > > > > > > > > > > 
> > > > > > > > > > > 
> > > > > > > > > > > "The information in this e-mail and any 
> > attachment is
> > > > > > > > confidential
> > > > > > > > > > > and may be privileged. If you have received this 
> > > > > > > > > > > e-mail
> > > > > > > > in error,
> > > > > > > > > > > please delete it immediately and destroy 
> > any copies on
> > > > > > > > > > > your system. You should not retain, copy or use this
> > > > > > e-mail for any
> > > > > > > > > > > purpose, nor disclose all or any part of 
> > its content 
> > > > > > > > > > > to
> > > > > > > > any other
> > > > > > > > > > > person. Opinions expressed in this e-mail may not be
> > > > > > > > endorsed by
> > > > > > > > > > > the company and unless explicitly indicated, this
> > > > > > > > e-mail shall not
> > > > > > > > > > > form part of any binding agreement".
> > > > > > > > > > > 
> > > > > > > > > > > _______________________________________________
> > > > > > > > > > > geos-devel mailing list 
> > > > > > > > > > > geos-devel@geos.refractions.net
> > > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > 
> > > > > > > _______________________________________________
> > > > > > > > > > geos-devel mailing list 
> > geos-devel@geos.refractions.net 
> > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > 
> > > > > > > _______________________________________________
> > > > > > > > > > geos-devel mailing list 
> > geos-devel@geos.refractions.net
> > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > 
> > > > > > _______________________________________________
> > > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net 
> > > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > > _______________________________________________
> > > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > _______________________________________________
> > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > 
> > > > > > > _______________________________________________
> > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > 
> > > > 
> > 

From strk at keybit.net  Tue Jun 29 21:02:47 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <20040629232802.GC67881@freek.keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA0274F54B9@venus.VividSolutions.com>
	<20040629232802.GC67881@freek.keybit.net>
Message-ID: <20040630010247.GA68868@freek.keybit.net>

Another alternative would be having pass-by-reference 
deep copy and pass-by-pointer take ownership.
Geometries taking vector could base the check on the
vector itself (Collections, Polygon).
This would avoid using the additional argument, which in some
cases could require big changes (casing const pointers
to non-const).

What do you think about this ?

--strk;

On Wed, Jun 30, 2004 at 01:28:02AM +0200, strk wrote:
> On Mon, Jun 28, 2004 at 03:04:21PM -0700, Martin Davis wrote:
> > Not sure there's any neat solution to this problem....  I think you'll
> > have to go with the extra arg.  
> > 
> > The other option is to just provide the copying functionality in the
> > GeometryFactory, not in the basic constructors.  
> 
> We'd have to modify Geometry constructors anyway, so this would not
> really reduce the effort.
> 
> > Personally I would rather keep the whole thing clean, and not provide
> > copying. After all, who is the client for this?  And why can't they
> > learn to copy when needed?
> 
> Unfortunately copying is not always clean ...
> For Geometries your have the ->clone() method, while
> the same is not that clear for other types of constructors...
> LineString - for example - take a CoordinateList, which is copied with:
> points=CoordinateListFactory::internalFactory->createCoordinateList(pts)
> (which is ugly and very unconfortable).
> Polygon - another example - take vector<Geometry *>*holes as second
> argument, which takes a loop to be copied.
> 
> My point is that current GEOS status has not a neat copying interface
> for all everyday use classes, so hiding the complexity of it might be
> worth. Another point - but that is opinable - is that as a standard
> way of programming any object should be destroyed by the object that
> created it, for mind serenity's sake, so a non-standard behaviour should
> be explicitly advertised (an additional arg would do).
> 
> See also darren problems with memory management
> (sure he DO can learn...)
> 
> --strk;
> 
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > 
> > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net] 
> > > Sent: June 28, 2004 2:56 PM
> > > To: Martin Davis
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > On Mon, Jun 28, 2004 at 02:21:12PM -0700, Martin Davis wrote:
> > > > Good point.
> > > > 
> > > > How are you going to indicate that copying is required in the 
> > > > constructors?
> > > 
> > > I'm stuck on that part :)
> > > Basically I was thinking about duplicating each constructor
> > > so to have a deep-copier and a ownership-taker.
> > > The two constructors would be distinguished by a fake 
> > > additional argument (an argument needed just to distinguish 
> > > them, whose value does not matter). I don't like this setup, 
> > > but I don't see any enlightment.
> > > 
> > > Just one more alternative is putting this logic in the 
> > > geometryfactory which could create empty versions and then 
> > > 'install' actual content... this would waste some space and 
> > > cpu but not that much.
> > > 
> > > What do you think? 
> > > 
> > > --strk;
> > > 
> > > > 
> > > > Martin Davis, Senior Technical Architect
> > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > 
> > > > 
> > > > > -----Original Message-----
> > > > > From: strk [mailto:strk@keybit.net]
> > > > > Sent: June 28, 2004 2:20 PM
> > > > > To: Martin Davis
> > > > > Cc: geos-devel@geos.refractions.net
> > > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > > 
> > > > > 
> > > > > On Mon, Jun 28, 2004 at 02:15:31PM -0700, Martin Davis wrote:
> > > > > > By pattern/support class is just fancy software engineering
> > > > > speak for
> > > > > > "make it standard and simple for the client".
> > > > > > 
> > > > > > What do you mean by "duplicating each constructor"?  Do you mean
> > > > > > duplicating each method on the GeometryFactory?
> > > > > 
> > > > > Wooo.. actually I meant each Geometry constructor AND
> > > > > GeometryFactory methods. GeometryFactory methods call 
> > > > > Geometry constructors after 
> > > > > all so the double-approach must be present in both places.
> > > > > 
> > > > > --strk;
> > > > > 
> > > > > > 
> > > > > > Martin Davis, Senior Technical Architect
> > > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > > 
> > > > > > 
> > > > > > > -----Original Message-----
> > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > Sent: June 28, 2004 1:59 PM
> > > > > > > To: Martin Davis
> > > > > > > Cc: GEOS Development List
> > > > > > > Subject: Re: [geos-devel] Problems creating polygons 
> > > with holes
> > > > > > > 
> > > > > > > 
> > > > > > > On Mon, Jun 28, 2004 at 01:50:09PM -0700, Martin Davis wrote:
> > > > > > > > Strk:
> > > > > > > > 
> > > > > > > > IMO the current paradigm (that of constructors taking
> > > > > ownership of
> > > > > > > > their
> > > > > > > > components) is the correct one.  The reason is to avoid
> > > > > unecessary
> > > > > > > > copying of argument data (which could be large).  It should
> > > > > > > be left up
> > > > > > > > to the caller to decide when and where they need to copy
> > > > > > > > arguments.
> > > > > > > > 
> > > > > > > > Yes, this is a potential source of errors for clients, if
> > > > > > > they don't
> > > > > > > > understand how to properly use the library.  But the 
> > > > > > > > alternative forces clients to tolerate extra overhead even 
> > > > > > > > when
> > > > > they don't need
> > > > > > > > it, which is not friendly behaviour from a library.
> > > > > > > > 
> > > > > > > > If this is really onerous, two versions of each constructor
> > > > > > > could be
> > > > > > > > provided.  Or possibly even better, a pattern & support
> > > > > > > class to make
> > > > > > > > it easy to copy arguments.
> > > > > > > 
> > > > > > > Unfortunately geos-1.0 was released with mixed 
> > > policy, which is 
> > > > > > > what I'm trying to conform now.
> > > > > > > 
> > > > > > > I like the idea of letting callers specify whether or not to 
> > > > > > > take ownership and so far duplicationg each constructor seems 
> > > > > > > the cleaner way (adding a parameter takeOwnership 
> > > would make all 
> > > > > > > const correctness useless and will require 
> > > modifications in many 
> > > > > > > places).
> > > > > > > 
> > > > > > > What do you mean by pattern & support class ?
> > > > > > > 
> > > > > > > --strk;
> > > > > > > 
> > > > > > > 
> > > > > > > > 
> > > > > > > > Martin Davis, Senior Technical Architect
> > > > > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > > > > 
> > > > > > > > 
> > > > > > > > > -----Original Message-----
> > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > Sent: June 28, 2004 12:59 PM
> > > > > > > > > To: Darren Carman
> > > > > > > > > Cc: GEOS Development List
> > > > > > > > > Subject: Re: [geos-devel] Problems creating polygons
> > > > > with holes
> > > > > > > > > 
> > > > > > > > > 
> > > > > > > > > I could not find the problem.
> > > > > > > > > Here is a reduced code exploiting the error.
> > > > > > > > > I'll keep inspecting this...
> > > > > > > > > 
> > > > > > > > > BTW: I don't feel comportable in Polygon 
> > > constructor taking
> > > > > > > > > ownership of passed arguments, what people think 
> > > > > about modifying
> > > > > > > > > this as well ?
> > > > > > > > > 
> > > > > > > > > --strk;
> > > > > > > > > 
> > > > > > > > > //--------------------------8<-------------------
> > > > > > > > > 
> > > > > > > > > #include <geos/io.h>
> > > > > > > > > #include <geos/geom.h>
> > > > > > > > > #include <geos/util.h>
> > > > > > > > > 
> > > > > > > > > using namespace std;
> > > > > > > > > using namespace geos;
> > > > > > > > > 
> > > > > > > > > int main(int argc, char *argv[]) {
> > > > > > > > >         Coordinate c;
> > > > > > > > >         CoordinateList *cl1 =
> > > > > > > > > 
> > > > > CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > >         CoordinateList *cl2 =
> > > > > > > > > 
> > > > > CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > 
> > > > > > > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > > > > > >         c.x = 339252; c.y = 1029077; cl1->add(c);
> > > > > > > > >         c.x = 348752; c.y = 1029077; cl1->add(c);
> > > > > > > > >         c.x = 346102; c.y = 1019653; cl1->add(c);
> > > > > > > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > > > > > > 
> > > > > > > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > > > > > >         c.x = 340000; c.y = 1021000; cl2->add(c);
> > > > > > > > >         c.x = 341000; c.y = 1021000; cl2->add(c);
> > > > > > > > >         c.x = 341000; c.y = 1020000; cl2->add(c);
> > > > > > > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > > > > > > 
> > > > > > > > >         try {
> > > > > > > > >                 GeometryFactory *gf=new 
> > > GeometryFactory(new
> > > > > > > > > PrecisionModel(),0);
> > > > > > > > > 
> > > > > > > > >                 Geometry
> > > > > > > > > *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> > > > > > > > >                 cout<<"geom1: "<<geom1->toString()<<endl;
> > > > > > > > >                 Geometry
> > > > > > > > > *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > > >                 cout<<"geom2: "<<geom2->toString()<<endl;
> > > > > > > > >                 vector<Geometry*>*holes = new 
> > > > > > > vector<Geometry*>(1);
> > > > > > > > >                 (*holes)[0] = geom2->clone();
> > > > > > > > >                 Geometry 
> > > > > > > > > *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> > > > > > > > >                 cout<<"geom3: "<<geom3->toString()<<endl;
> > > > > > > > >                 delete cl1;
> > > > > > > > >                 delete cl2;
> > > > > > > > >         } catch (GEOSException *ge) {
> > > > > > > > >                 cout << "ERROR: " << 
> > > ge->toString() << endl;
> > > > > > > > >         } catch (...) {
> > > > > > > > >                 cout << "generic ERROR" << endl;
> > > > > > > > >         }
> > > > > > > > > }
> > > > > > > > > 
> > > > > > > > > //--------------------------8<-------------------
> > > > > > > > > 
> > > > > > > > > 
> > > > > > > > > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman 
> > > > > > > > > wrote:
> > > > > > > > > > #include <geos/io.h>
> > > > > > > > > > #include <geos/geom.h>
> > > > > > > > > > 
> > > > > > > > > > using namespace std;
> > > > > > > > > > using namespace geos;
> > > > > > > > > > 
> > > > > > > > > > typedef struct boundaryPt {
> > > > > > > > > >   double x;
> > > > > > > > > >   double y;
> > > > > > > > > > };
> > > > > > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > > > > > typedef vector<boundary>      boundaryList;
> > > > > > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > > > > > 
> > > > > > > > > > polygonList       ptPolygons;
> > > > > > > > > > 
> > > > > > > > > > int main(int argc, char *argv[]) {
> > > > > > > > > >   vector<Geometry *> polygons;
> > > > > > > > > >   vector<Geometry *> holes;
> > > > > > > > > >   int i,j,k;
> > > > > > > > > >   string resStr = "";
> > > > > > > > > > 
> > > > > > > > > >   boundaryPt poly1[5];
> > > > > > > > > >   boundaryPt hole1[5];
> > > > > > > > > >   boundary tmpBoundary;
> > > > > > > > > >   boundaryList tmpBoundaryList;
> > > > > > > > > >   polygonList ptPolygons;
> > > > > > > > > > 
> > > > > > > > > >   poly1[0].x = 339252;
> > > > > > > > > >   poly1[0].y = 1019302;
> > > > > > > > > >   poly1[1].x = 339252;
> > > > > > > > > >   poly1[1].y = 1029077;
> > > > > > > > > >   poly1[2].x = 348752;
> > > > > > > > > >   poly1[2].y = 1029077;
> > > > > > > > > >   poly1[3].x = 346102;
> > > > > > > > > >   poly1[3].y = 1019653;
> > > > > > > > > >   poly1[4].x = 339252;
> > > > > > > > > >   poly1[4].y = 1019302;
> > > > > > > > > > 
> > > > > > > > > >   hole1[0].x = 340000;
> > > > > > > > > >   hole1[0].y = 1020000;
> > > > > > > > > >   hole1[1].x = 340000;
> > > > > > > > > >   hole1[1].y = 1021000;
> > > > > > > > > >   hole1[2].x = 341000;
> > > > > > > > > >   hole1[2].y = 1021000;
> > > > > > > > > >   hole1[3].x = 341000;
> > > > > > > > > >   hole1[3].y = 1020000;
> > > > > > > > > >   hole1[4].x = 340000;
> > > > > > > > > >   hole1[4].y = 1020000;
> > > > > > > > > > 
> > > > > > > > > >   for (i=0; i<5; i++) {
> > > > > > > > > >     tmpBoundary.push_back(poly1[i]);
> > > > > > > > > >   }
> > > > > > > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > > > > > > >   tmpBoundary.clear();
> > > > > > > > > > 
> > > > > > > > > >   for (i=0; i<5; i++) {
> > > > > > > > > >     tmpBoundary.push_back(hole1[i]);
> > > > > > > > > >   }
> > > > > > > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > > > > > > >   tmpBoundary.clear();
> > > > > > > > > > 
> > > > > > > > > >   ptPolygons.push_back(tmpBoundaryList);
> > > > > > > > > >   for(int i=0; i<
> > > > > > > static_cast<int>(tmpBoundaryList.size()); i++) {
> > > > > > > > > >     tmpBoundaryList[i].clear();
> > > > > > > > > >   }
> > > > > > > > > >   tmpBoundaryList.clear();
> > > > > > > > > > 
> > > > > > > > > > 
> > > > > > > > > >   try{
> > > > > > > > > >     GeometryFactory *gf=new GeometryFactory(new 
> > > > > > > > > > PrecisionModel(),0);
> > > > > > > > > > 
> > > > > > > > > >     // for each outer ring create a 
> > > CoordinateList and add
> > > > > > > > > all the points to it
> > > > > > > > > >     for(i=0; i< 
> > > static_cast<int>(ptPolygons.size()); i++) {
> > > > > > > > > >       CoordinateList
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > >       boundaryList bl = ptPolygons[i];
> > > > > > > > > >       boundary b = bl[0];
> > > > > > > > > >       cout << "Polygon " << i << endl;
> > > > > > > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > > >         cout << "Added point " << b[k].x << ',' <<
> > > > > > > b[k].y << endl;
> > > > > > > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > > >       }
> > > > > > > > > > 
> > > > > > > > > >       // for each hole create a coordinate list like 
> > > > > > > > > > above,
> > > > > > > > > create a polygon and add to a Geometry vector
> > > > > > > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > > > > > > >         cout << "Hole " << j << endl;
> > > > > > > > > >         boundary b = bl[j];
> > > > > > > > > >         CoordinateList
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > > >           cout << "Added point " << b[k].x << ',' <<
> > > > > > > b[k].y << endl;
> > > > > > > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > > >         }
> > > > > > > > > >         cout << "Creating polygon for hole " << 
> > > j << ": "
> > > > > > > > > << cl2->toString() << endl;
> > > > > > > > > >         Geometry
> > > > > > > > > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > > > >         cout << "Geometry " << j << " : " <<
> > > > > > > > > geom1->toString() << endl;
> > > > > > > > > >         holes.push_back(geom1);
> > > > > > > > > >         delete cl2;
> > > > > > > > > >       }
> > > > > > > > > >       // create a polygon from the 1st CoordinateList
> > > > > > > and the holes
> > > > > > > > > >       cout << "Creating polygon " << i << ": " <<
> > > > > > > > > cl1->toString() << endl;
> > > > > > > > > >       Geometry
> > > > > > > > > 
> > > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);   
> > > > > > > > >                                           
> > > > > > > > > >       cout << "test " << endl;
> > > > > > > > > >       cout << "Geometry " << i << " : " <<
> > > > > > > > > geom2->toString() << endl;
> > > > > > > > > > 
> > > > > > > > > >       // save this polygon in another vector
> > > > > > > > > >       cout << "Adding polygon " << i << endl;
> > > > > > > > > >       polygons.push_back(geom2);
> > > > > > > > > >       delete cl1;
> > > > > > > > > >     }
> > > > > > > > > >     cout << "Creating multi-polygon" << endl;
> > > > > > > > > >     // when all done create a MultiPolygon object
> > > > > > > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > > > > > > >     cout << "Creating string" << endl;
> > > > > > > > > >     resStr = geom3->toString();
> > > > > > > > > > 
> > > > > > > > > >     //clean up
> > > > > > > > > >     delete geom3;
> > > > > > > > > >     delete gf;
> > > > > > > > > >   }
> > > > > > > > > >   catch (GEOSException *ge) {
> > > > > > > > > >     cout << "ERROR: " << ge->toString() << endl;
> > > > > > > > > >   }
> > > > > > > > > >   cout << resStr << endl;
> > > > > > > > > > }
> > > > > > > > > > 
> > > > > > > > > > -----Original Message-----
> > > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > > Sent: 28 June 2004 11:28
> > > > > > > > > > To: GEOS Development List
> > > > > > > > > > Subject: Re: [geos-devel] Problems creating 
> > > polygons with
> > > > > > > > > > holes
> > > > > > > > > > 
> > > > > > > > > > 
> > > > > > > > > > Can you produce a neter code exploiting the bug 
> > > ? I mean a 
> > > > > > > > > > .cpp file I can compile and run and debug :)
> > > > > > > > > > 
> > > > > > > > > > -strk;
> > > > > > > > > > 
> > > > > > > > > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren
> > > > > Carman wrote:
> > > > > > > > > > > defs:
> > > > > > > > > > > typedef struct boundaryPt {
> > > > > > > > > > >   double x;
> > > > > > > > > > >   double y;
> > > > > > > > > > > };
> > > > > > > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > > > > > > typedef vector<boundary>      boundaryList;
> > > > > > > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > > > > > > 
> > > > > > > > > > > class members used:
> > > > > > > > > > >   polygonList       ptPolygons;
> > > > > > > > > > >   string tmpStr;
> > > > > > > > > > >   string errMsg;
> > > > > > > > > > > 
> > > > > > > > > > > class function:
> > > > > > > > > > > string c_polygon_gml::WKTString(void) {
> > > > > > > > > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > > > > > > > > >   vector<Geometry *> polygons;
> > > > > > > > > > >   vector<Geometry *> holes;
> > > > > > > > > > >   int i,j,k;
> > > > > > > > > > >   string resStr = "";
> > > > > > > > > > > 
> > > > > > > > > > >   try{
> > > > > > > > > > >     GeometryFactory *gf=new GeometryFactory(new
> > > > > > > > > PrecisionModel(),0);
> > > > > > > > > > > 
> > > > > > > > > > >     // for each outer ring create a CoordinateList and
> > > > > > > > > add all the points to it
> > > > > > > > > > >     for(i=0; i<
> > > > > static_cast<int>(ptPolygons.size()); i++) {
> > > > > > > > > > >       CoordinateList
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > > *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > > >       boundaryList bl = ptPolygons[i];
> > > > > > > > > > >       boundary b = bl[0];
> > > > > > > > > > >       TRACE_OUTPUT("Polygon " << i);
> > > > > > > > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > > > >         TRACE_OUTPUT("Added point " << b[k].x << ','
> > > > > > > << b[k].y);
> > > > > > > > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > > > >       }
> > > > > > > > > > > 
> > > > > > > > > > >       // for each hole create a coordinate list like
> > > > > > > > > above, create a polygon and add to a Geometry vector
> > > > > > > > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > > > > > > > >         TRACE_OUTPUT("Hole " << j);
> > > > > > > > > > >         boundary b = bl[j];
> > > > > > > > > > >         CoordinateList
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > > *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > > > > > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > > > > > > > >           TRACE_OUTPUT("Added point " << b[k].x <<
> > > > > > > ',' << b[k].y);
> > > > > > > > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > > > > > > > >         }
> > > > > > > > > > >         TRACE_OUTPUT("Creating polygon for 
> > > hole " << j 
> > > > > > > > > > > <<
> > > > > > > > > ": " << cl2->toString());
> > > > > > > > > > >         Geometry
> > > > > > > > > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > > > > >         TRACE_OUTPUT("Geometry " << j << " : " <<
> > > > > > > > > geom1->toString());
> > > > > > > > > > >         holes.push_back(geom1);
> > > > > > > > > > >         delete cl2;
> > > > > > > > > > >       }
> > > > > > > > > > >       // create a polygon from the 1st CoordinateList 
> > > > > > > > > > > and
> > > > > > > > > the holes
> > > > > > > > > > >       TRACE_OUTPUT("Creating polygon " << i << ": " <<
> > > > > > > > > cl1->toString());
> > > > > > > > > > >       Geometry
> > > > > > > > > 
> > > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > > > > > > > > >       TRACE_OUTPUT("test ");
> > > > > > > > > > >       TRACE_OUTPUT("Geometry " << i << " : " <<
> > > > > > > > > geom2->toString());
> > > > > > > > > > > 
> > > > > > > > > > >       // save this polygon in another vector
> > > > > > > > > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > > > > > > > > >       polygons.push_back(geom2);
> > > > > > > > > > >       delete cl1;
> > > > > > > > > > >     }
> > > > > > > > > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > > > > > > > > >     // when all done create a MultiPolygon object
> > > > > > > > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > > > > > > > >     TRACE_OUTPUT("Creating string");
> > > > > > > > > > >     resStr = geom3->toString();
> > > > > > > > > > > 
> > > > > > > > > > >     //clean up
> > > > > > > > > > >     delete geom3;
> > > > > > > > > > >     delete gf;
> > > > > > > > > > >   }
> > > > > > > > > > >   catch (GEOSException *ge) {
> > > > > > > > > > >     errMsg = ge->toString();
> > > > > > > > > > >   }
> > > > > > > > > > >   return resStr;
> > > > > > > > > > > }
> > > > > > > > > > > 
> > > > > > > > > > > XML read in by class and stored in ptPolygons: <?xml
> > > > > > > > > > > version="1.0" encoding="UTF-8"?> <AreaDefinition>
> > > > > > > > > > > <GDSRequest>
> > > > > > > > > > > <query>
> > > > > > > > > > > <AreaQuery outputContent="public">
> > > > > > > > > > > <queryArea>
> > > > > > > > > > > <Polygon srsName="osgb:BNG">
> > > > > > > > > > > <outerBoundaryIs>
> > > > > > > > > > > <LinearRing>
> > > > > > > > > > > <coordinates>
> > > > > > > > > > > 339252,1019302
> > > > > > > > > > > 339252,1029077
> > > > > > > > > > > 348752,1029077
> > > > > > > > > > > 346102,1019653
> > > > > > > > > > > 339252,1019302
> > > > > > > > > > > </coordinates>
> > > > > > > > > > > </LinearRing>
> > > > > > > > > > > </outerBoundaryIs>
> > > > > > > > > > > <innerBoundaryIs>
> > > > > > > > > > > <LinearRing>
> > > > > > > > > > > <coordinates>
> > > > > > > > > > > 340000,1020000
> > > > > > > > > > > 340000,1021000
> > > > > > > > > > > 341000,1021000
> > > > > > > > > > > 341000,1020000
> > > > > > > > > > > 340000,1020000
> > > > > > > > > > > </coordinates>
> > > > > > > > > > > </LinearRing>
> > > > > > > > > > > </innerBoundaryIs>
> > > > > > > > > > > </Polygon>
> > > > > > > > > > > </queryArea>
> > > > > > > > > > > </AreaQuery>
> > > > > > > > > > > </query>
> > > > > > > > > > > </GDSRequest>
> > > > > > > > > > > </AreaDefinition>
> > > > > > > > > > > 
> > > > > > > > > > > Output:
> > > > > > > > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file
> > > > > > > > > c_polygon_gml.cpp
> > > > > > > > > > > TR:   Polygon 0
> > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > TR:   Hole 1
> > > > > > > > > > > TR:   Added point 340000,1.02e+06
> > > > > > > > > > > TR:   Added point 340000,1.021e+06
> > > > > > > > > > > TR:   Added point 341000,1.021e+06
> > > > > > > > > > > TR:   Added point 341000,1.02e+06
> > > > > > > > > > > TR:   Added point 340000,1.02e+06
> > > > > > > > > > > TR:   Creating polygon for hole 1: 
> > > > > > > > > (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308)
> > > > > > > > > (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308)
> > > > > > > > > (340000,1.02e+06,1.7e-308)
> > > > > > > > > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 
> > > > > > > > > 1020000.0000000000000000, 340000.0000000000000000
> > > > > > > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > > > > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > > > > > > 1020000.0000000000000000, 340000.0000000000000000
> > > > > > > > > 1020000.0000000000000000))
> > > > > > > > > > > TR:   Creating polygon 0: 
> > > (339252,1.0193e+06,1.7e-308) 
> > > > > > > > > (339252,1.02908e+06,1.7e-308) 
> > > (348752,1.02908e+06,1.7e-308)
> > > > > > > > > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > > TR:   test
> > > > > > > > > > > Segmentation fault
> > > > > > > > > > > 
> > > > > > > > > > > Output when the hole is removed:
> > > > > > > > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file
> > > > > > > > > c_polygon_gml.cpp
> > > > > > > > > > > TR:   Polygon 0
> > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > TR:   Creating polygon 0: 
> > > (339252,1.0193e+06,1.7e-308) 
> > > > > > > > > (339252,1.02908e+06,1.7e-308) 
> > > (348752,1.02908e+06,1.7e-308)
> > > > > > > > > (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > > TR:   test
> > > > > > > > > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 
> > > > > > > > > 1019302.0000000000000000, 339252.0000000000000000
> > > > > > > > > 1029077.0000000000000000, 348752.0000000000000000 
> > > > > > > > > 1029077.0000000000000000, 346102.0000000000000000 
> > > > > > > > > 1019653.0000000000000000, 339252.0000000000000000
> > > > > > > > > 1019302.0000000000000000))
> > > > > > > > > > > TR:   Adding polygon 0
> > > > > > > > > > > TR:   Creating multi-polygon
> > > > > > > > > > > TR:   Creating string
> > > > > > > > > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > > > > > > > > ERROR:
> > > > > > > > > > > WTF format
> > > > > > > > > > > MULTIPOLYGON (((339252.0000000000000000 
> > > > > > > > > > > 1019302.0000000000000000, 339252.0000000000000000 
> > > > > > > > > > > 1029077.0000000000000000, 348752.0000000000000000 
> > > > > > > > > > > 1029077.0000000000000000, 346102.0000000000000000 
> > > > > > > > > > > 1019653.0000000000000000, 339252.0000000000000000 
> > > > > > > > > > > 1019302.0000000000000000)))
> > > > > > > > > > > 
> > > > > > > > > > > 
> > > > > > > > > > > -----Original Message-----
> > > > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > > > Sent: 28 June 2004 11:01
> > > > > > > > > > > To: GEOS Development List
> > > > > > > > > > > Subject: Re: [geos-devel] Problems creating polygons
> > > > > > > with holes
> > > > > > > > > > > 
> > > > > > > > > > > 
> > > > > > > > > > > Can you send the test code ?
> > > > > > > > > > > There are currently no known bug ...
> > > > > > > > > > > --strk;
> > > > > > > > > > > 
> > > > > > > > > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, 
> > > Darren Carman
> > > > > > > > > > > wrote:
> > > > > > > > > > > > Hi all,
> > > > > > > > > > > > 
> > > > > > > > > > > > I am creating polygons with holes and want 
> > > to use geos
> > > > > > > > > to allow me
> > > > > > > > > > > > to output them in WKT.
> > > > > > > > > > > > 
> > > > > > > > > > > > A polygon without a hole works fine, but as 
> > > soon as I
> > > > > > > > > add a hole I
> > > > > > > > > > > > get a segmentation fault after calling the
> > > > > > > > > createPolygon function
> > > > > > > > > > > > (GeometryFactory) and trying to run toString on
> > > > > > > that polygon.
> > > > > > > > > > > > 
> > > > > > > > > > > > I am using version 1.0.
> > > > > > > > > > > > 
> > > > > > > > > > > > I have tried getting the latest version from CVS but
> > > > > > > > > this causes a
> > > > > > > > > > > > segmentation fault to occur while adding the
> > > > > 5th polygon
> > > > > > > > > > > > coordinate to the CoordinateList (there are only 4
> > > > > > > > > coordinates in
> > > > > > > > > > > > the test polygon, the 5th being the first 
> > > one repeated
> > > > > > > > > - I tried
> > > > > > > > > > > > making it 6 to see if it was a problem with closing 
> > > > > > > > > > > > the polygon but I still got a segmentation 
> > > fault while
> > > > > adding the 5th).
> > > > > > > > > > > > 
> > > > > > > > > > > > Is there a fix for this, or has anyone come accross 
> > > > > > > > > > > > it?
> > > > > > > > > > > > 
> > > > > > > > > > > > Thanks in advance,
> > > > > > > > > > > > Darren
> > > > > > > > > > > > 
> > > > > > > > > > > > 
> > > > > > > > > > > > "The information in this e-mail and any 
> > > attachment is
> > > > > > > > > confidential
> > > > > > > > > > > > and may be privileged. If you have received this 
> > > > > > > > > > > > e-mail
> > > > > > > > > in error,
> > > > > > > > > > > > please delete it immediately and destroy 
> > > any copies on
> > > > > > > > > > > > your system. You should not retain, copy or use this
> > > > > > > e-mail for any
> > > > > > > > > > > > purpose, nor disclose all or any part of 
> > > its content 
> > > > > > > > > > > > to
> > > > > > > > > any other
> > > > > > > > > > > > person. Opinions expressed in this e-mail may not be
> > > > > > > > > endorsed by
> > > > > > > > > > > > the company and unless explicitly indicated, this
> > > > > > > > > e-mail shall not
> > > > > > > > > > > > form part of any binding agreement".
> > > > > > > > > > > > 
> > > > > > > > > > > > _______________________________________________
> > > > > > > > > > > > geos-devel mailing list 
> > > > > > > > > > > > geos-devel@geos.refractions.net
> > > > > > > > > > > > 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > 
> > > > > > > > _______________________________________________
> > > > > > > > > > > geos-devel mailing list 
> > > geos-devel@geos.refractions.net 
> > > > > > > > > > > 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > 
> > > > > > > > _______________________________________________
> > > > > > > > > > > geos-devel mailing list 
> > > geos-devel@geos.refractions.net
> > > > > > > > > > > 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > 
> > > > > > > _______________________________________________
> > > > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net 
> > > > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > > > _______________________________________________
> > > > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > > _______________________________________________
> > > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > > 
> > > > > > > > _______________________________________________
> > > > > > > > geos-devel mailing list geos-devel@geos.refractions.net
> > > > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > 
> > > > > 
> > > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Wed Jun 30 03:31:52 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:28 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8E8C@itl-serv1.infoterra-global.com>

> The code I've sent you was not intended to work.
> Please send another 'clean' and buildable example of your work.

I have left control of the objects with geos, so havent bothered using ->clone(). I only have 1 polygon with 1 hole. If others have this working then I guess I am doing something stupid, but honestly cannot see it.

I'm not sure how relevant it is, but thought I should mention that i'm using Red Hat Advanced Server OS.

#include <geos/io.h>
#include <geos/geom.h>

using namespace std;
using namespace geos;

typedef struct boundaryPt {
  double x;
  double y;
};
typedef vector<boundaryPt>    boundary;
typedef vector<boundary>      boundaryList;
typedef vector<boundaryList>  polygonList;


void createPolys(polygonList &polys) {
  int i;

  boundaryPt poly1[5];
  boundaryPt hole1[5];
  boundary tmpBoundary;
  boundaryList tmpBoundaryList;
  polygonList ptPolygons;

  poly1[0].x = 339252; poly1[0].y = 1019302;
  poly1[1].x = 339252; poly1[1].y = 1029077;
  poly1[2].x = 348752; poly1[2].y = 1029077;
  poly1[3].x = 346102; poly1[3].y = 1019653;
  poly1[4].x = 339252; poly1[4].y = 1019302;

  hole1[0].x = 340000; hole1[0].y = 1020000;
  hole1[1].x = 340000; hole1[1].y = 1021000;
  hole1[2].x = 341000; hole1[2].y = 1021000;
  hole1[3].x = 341000; hole1[3].y = 1020000;
  hole1[4].x = 340000; hole1[4].y = 1020000;

  for (i=0; i<5; i++) {
    tmpBoundary.push_back(poly1[i]);
  }
  tmpBoundaryList.push_back(tmpBoundary);
  tmpBoundary.clear();

  for (i=0; i<5; i++) {
    tmpBoundary.push_back(hole1[i]);
  }
  tmpBoundaryList.push_back(tmpBoundary);
  tmpBoundary.clear();

  polys.push_back(tmpBoundaryList);
  for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
    tmpBoundaryList[i].clear();
  }
  tmpBoundaryList.clear();
}


int main(int argc, char *argv[]) {
  vector<LinearRing *> *polygons;
  vector<LinearRing *> *holes;
  int i,j,k;
  string resStr = "";
  polygonList ptPolygons;

  createPolys(ptPolygons);
  try{
    GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);

    // for each outer ring create a CoordinateList and add all the points to it
    polygons = new vector<LinearRing *>();
    for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
      CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
      boundaryList bl = ptPolygons[i];
      boundary b = bl[0];
      cout << "Polygon " << i << endl;
      for(k=0; k< static_cast<int>(b.size()); k++) {
        cout << "Added point " << b[k].x << ',' << b[k].y << endl;
        cl1->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
      }

      // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
      holes = new vector<LinearRing *>();
      for(j=1; j< static_cast<int>(bl.size()); j++) {
        cout << "Hole " << j << endl;
        boundary b = bl[j];
        CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
        for(k=0; k< static_cast<int>(b.size()); k++) {
          cout << "Added point " << b[k].x << ',' << b[k].y << endl;
          cl2->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
        }
        cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
        LinearRing *lin1=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl2),NULL);
        cout << "Geometry " << j << " : " << lin1->toString() << endl;
        holes->push_back(lin1);
        delete cl2;
      }
      // create a polygon from the 1st CoordinateList and the holes
      cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
      LinearRing *lin2=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl1),(vector<Geometry *> *)holes);
      cout << "test " << endl;
      cout << "Geometry " << i << " : " << lin2->toString() << endl;

      // save this polygon in another vector
      cout << "Adding polygon " << i << endl;
      polygons->push_back(lin2);
      delete cl1;
    }
    cout << "Creating multi-polygon" << endl;
    // when all done create a MultiPolygon object
    Geometry *lin3=gf->createMultiPolygon((vector<Geometry *> *)polygons);
    cout << "Creating string" << endl;
    resStr = lin3->toString();

    //clean up
    delete lin3;
    delete gf;
  }
  catch (GEOSException *ge) {
    cout << "ERROR: " << ge->toString() << endl;
  }
  cout << resStr << endl;
}

> GEOS-CVS is not ABI-compatible with GEOS-1.0
> You have to re-compile your test code.
> Please let me know.

I did re-compile my code after make install on the geos CVS library, so i'm not too sure what you mean here.

Thanks,
Darren



-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 29 June 2004 23:54
To: Darren Carman
Cc: GEOS Development List
Subject: Re: [geos-devel] Problems creating polygons with holes


On Tue, Jun 29, 2004 at 10:37:01AM +0100, Darren Carman wrote:
> Sorry, it didnt work - I forgot that I had commented out the hole initialisation in my code.
> 
> I changed your code below to use LinearRings (for geom1, geom2 and geom3) as well and saw the seg fault while calling toString on geom3 (as happens in my code). Again no seg fault is seen when no hole is supplied (it also works with geom1-3 as Geometry * when no hole is supplied).
> 
> So I am still at a loss.

The code I've sent you was not intended to work.
Please send another 'clean' and buildable example of your work.

> 
> Maybe it would help if I could get the cvs version to work - I do the following:
> ./autogen.sh                                 --> as no configure there
> ./configure --prefix=$HOME/<path>/           --> lib is used locally, not globally
> make
> make install
> 
> then when I make and run the test program I get the following:
> ./test_bug: relocation error: ./test_bug: undefined symbol: _ZNK4geos15GeometryFactory16createLinearRingEPNS_14CoordinateListE

GEOS-CVS is not ABI-compatible with GEOS-1.0
You have to re-compile your test code.
Please let me know.

--strk;

> 
> Thanks,
> Darren
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 28 June 2004 21:37
> To: Darren Carman; GEOS Development List
> Cc: Paul Ramsey; Yury A. Bychkov
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> Ok. I've found the bug.
> It is in your code (and in GEOS not handling it).
> 
> Main problem: you push a Polygon in the holes vector.
> This - although defined as a Geometry vector - is indeed a LinearRing
> vector, failing to enforce this typing does result in segfault
> (not checked in Polygon.cpp).
> 
> Sub-problem1: your holes vector is an automatic variable, so it
> is deleted when the code exits the block it is defined in.
> The Polygon constructor copy the vector pointer and will delete it
> at Polygon destructio time (I'd change this).
> 
> Sub-problem2: if I understood your code you are pushing in the
> holes vector the geometries you previously created, with no cloning.
> Again the Polygon constructor will take ownership of them (which should
> be LinearRing) so you should ->clone() them before adding to the vector.
> 
> My proposal: make Polygon contructor deep copy shell and holes checking
> for holes type to be LinearRing.
> 
> A question: why isn't holes a vector <LinearRing *> * ?
> 
> A note: I did not update CVS... I'd like to hear about my proposal first.
> 
> --strk;
> 
> On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> > I could not find the problem.
> > Here is a reduced code exploiting the error.
> > I'll keep inspecting this...
> > 
> > BTW: I don't feel comportable in Polygon constructor taking
> > ownership of passed arguments, what people think about modifying
> > this as well ?
> > 
> > --strk;
> > 
> > //--------------------------8<-------------------
> > 
> > #include <geos/io.h>
> > #include <geos/geom.h>
> > #include <geos/util.h>
> > 
> > using namespace std;
> > using namespace geos;
> > 
> > int main(int argc, char *argv[]) {
> >         Coordinate c;
> >         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
> >         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> > 
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> >         c.x = 339252; c.y = 1029077; cl1->add(c);
> >         c.x = 348752; c.y = 1029077; cl1->add(c);
> >         c.x = 346102; c.y = 1019653; cl1->add(c);
> >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > 
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1021000; cl2->add(c);
> >         c.x = 341000; c.y = 1020000; cl2->add(c);
> >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > 
> >         try {
> >                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > 
> >                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> >                 cout<<"geom1: "<<geom1->toString()<<endl;
> >                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> >                 cout<<"geom2: "<<geom2->toString()<<endl;
> >                 vector<Geometry*>*holes = new vector<Geometry*>(1);
> >                 (*holes)[0] = geom2->clone();
> >                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> >                 cout<<"geom3: "<<geom3->toString()<<endl;
> >                 delete cl1;
> >                 delete cl2;
> >         } catch (GEOSException *ge) {
> >                 cout << "ERROR: " << ge->toString() << endl;
> >         } catch (...) {
> >                 cout << "generic ERROR" << endl;
> >         }
> > }
> > 
> > //--------------------------8<-------------------
> > 
> > 
> > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > #include <geos/io.h>
> > > #include <geos/geom.h>
> > > 
> > > using namespace std;
> > > using namespace geos;
> > > 
> > > typedef struct boundaryPt {
> > >   double x;
> > >   double y;
> > > };
> > > typedef vector<boundaryPt>    boundary;
> > > typedef vector<boundary>      boundaryList;
> > > typedef vector<boundaryList>  polygonList;
> > > 
> > > polygonList       ptPolygons;
> > > 
> > > int main(int argc, char *argv[]) {
> > >   vector<Geometry *> polygons;
> > >   vector<Geometry *> holes;
> > >   int i,j,k;
> > >   string resStr = "";
> > > 
> > >   boundaryPt poly1[5];
> > >   boundaryPt hole1[5];
> > >   boundary tmpBoundary;
> > >   boundaryList tmpBoundaryList;
> > >   polygonList ptPolygons;
> > > 
> > >   poly1[0].x = 339252;
> > >   poly1[0].y = 1019302;
> > >   poly1[1].x = 339252;
> > >   poly1[1].y = 1029077;
> > >   poly1[2].x = 348752;
> > >   poly1[2].y = 1029077;
> > >   poly1[3].x = 346102;
> > >   poly1[3].y = 1019653;
> > >   poly1[4].x = 339252;
> > >   poly1[4].y = 1019302;
> > > 
> > >   hole1[0].x = 340000;
> > >   hole1[0].y = 1020000;
> > >   hole1[1].x = 340000;
> > >   hole1[1].y = 1021000;
> > >   hole1[2].x = 341000;
> > >   hole1[2].y = 1021000;
> > >   hole1[3].x = 341000;
> > >   hole1[3].y = 1020000;
> > >   hole1[4].x = 340000;
> > >   hole1[4].y = 1020000;
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(poly1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   for (i=0; i<5; i++) {
> > >     tmpBoundary.push_back(hole1[i]);
> > >   }
> > >   tmpBoundaryList.push_back(tmpBoundary);
> > >   tmpBoundary.clear();
> > > 
> > >   ptPolygons.push_back(tmpBoundaryList);
> > >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> > >     tmpBoundaryList[i].clear();
> > >   }
> > >   tmpBoundaryList.clear();
> > > 
> > > 
> > >   try{
> > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >     // for each outer ring create a CoordinateList and add all the points to it
> > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > >       boundaryList bl = ptPolygons[i];
> > >       boundary b = bl[0];
> > >       cout << "Polygon " << i << endl;
> > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > >       }
> > > 
> > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > >         cout << "Hole " << j << endl;
> > >         boundary b = bl[j];
> > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > >         }
> > >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> > >         holes.push_back(geom1);
> > >         delete cl2;
> > >       }
> > >       // create a polygon from the 1st CoordinateList and the holes
> > >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> > >       cout << "test " << endl;
> > >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > > 
> > >       // save this polygon in another vector
> > >       cout << "Adding polygon " << i << endl;
> > >       polygons.push_back(geom2);
> > >       delete cl1;
> > >     }
> > >     cout << "Creating multi-polygon" << endl;
> > >     // when all done create a MultiPolygon object
> > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > >     cout << "Creating string" << endl;
> > >     resStr = geom3->toString();
> > > 
> > >     //clean up
> > >     delete geom3;
> > >     delete gf;
> > >   }
> > >   catch (GEOSException *ge) {
> > >     cout << "ERROR: " << ge->toString() << endl;
> > >   }
> > >   cout << resStr << endl;
> > > }
> > > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: 28 June 2004 11:28
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > 
> > > 
> > > Can you produce a neter code exploiting the bug ?
> > > I mean a .cpp file I can compile and run and debug :)
> > > 
> > > -strk;
> > > 
> > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > defs:
> > > > typedef struct boundaryPt {
> > > >   double x;
> > > >   double y;
> > > > };
> > > > typedef vector<boundaryPt>    boundary;
> > > > typedef vector<boundary>      boundaryList;
> > > > typedef vector<boundaryList>  polygonList;
> > > > 
> > > > class members used:
> > > >   polygonList       ptPolygons;
> > > >   string tmpStr;
> > > >   string errMsg;
> > > > 
> > > > class function:
> > > > string c_polygon_gml::WKTString(void) {
> > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > >   vector<Geometry *> polygons;
> > > >   vector<Geometry *> holes;
> > > >   int i,j,k;
> > > >   string resStr = "";
> > > > 
> > > >   try{
> > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > 
> > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >       boundaryList bl = ptPolygons[i];
> > > >       boundary b = bl[0];
> > > >       TRACE_OUTPUT("Polygon " << i);
> > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >       }
> > > > 
> > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > >         TRACE_OUTPUT("Hole " << j);
> > > >         boundary b = bl[j];
> > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >         }
> > > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > > >         holes.push_back(geom1);
> > > >         delete cl2;
> > > >       }
> > > >       // create a polygon from the 1st CoordinateList and the holes
> > > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > >       TRACE_OUTPUT("test ");
> > > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > > 
> > > >       // save this polygon in another vector
> > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > >       polygons.push_back(geom2);
> > > >       delete cl1;
> > > >     }
> > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > >     // when all done create a MultiPolygon object
> > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > >     TRACE_OUTPUT("Creating string");
> > > >     resStr = geom3->toString();
> > > > 
> > > >     //clean up
> > > >     delete geom3;
> > > >     delete gf;
> > > >   }
> > > >   catch (GEOSException *ge) {
> > > >     errMsg = ge->toString();
> > > >   }
> > > >   return resStr;
> > > > }
> > > > 
> > > > XML read in by class and stored in ptPolygons:
> > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > <AreaDefinition>
> > > > <GDSRequest>
> > > > <query>
> > > > <AreaQuery outputContent="public">
> > > > <queryArea>
> > > > <Polygon srsName="osgb:BNG">
> > > > <outerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 339252,1019302
> > > > 339252,1029077
> > > > 348752,1029077
> > > > 346102,1019653
> > > > 339252,1019302
> > > > </coordinates>
> > > > </LinearRing>
> > > > </outerBoundaryIs>
> > > > <innerBoundaryIs>
> > > > <LinearRing>
> > > > <coordinates>
> > > > 340000,1020000
> > > > 340000,1021000
> > > > 341000,1021000
> > > > 341000,1020000
> > > > 340000,1020000
> > > > </coordinates>
> > > > </LinearRing>
> > > > </innerBoundaryIs>
> > > > </Polygon>
> > > > </queryArea>
> > > > </AreaQuery>
> > > > </query>
> > > > </GDSRequest>
> > > > </AreaDefinition>
> > > > 
> > > > Output:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Hole 1
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Added point 340000,1.021e+06
> > > > TR:   Added point 341000,1.021e+06
> > > > TR:   Added point 341000,1.02e+06
> > > > TR:   Added point 340000,1.02e+06
> > > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > Segmentation fault
> > > > 
> > > > Output when the hole is removed:
> > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > TR:   Polygon 0
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Added point 339252,1.02908e+06
> > > > TR:   Added point 348752,1.02908e+06
> > > > TR:   Added point 346102,1.01965e+06
> > > > TR:   Added point 339252,1.0193e+06
> > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > TR:   test
> > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > > TR:   Adding polygon 0
> > > > TR:   Creating multi-polygon
> > > > TR:   Creating string
> > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > ERROR:
> > > > WTF format
> > > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > > 
> > > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: 28 June 2004 11:01
> > > > To: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > Can you send the test code ?
> > > > There are currently no known bug ...
> > > > --strk;
> > > > 
> > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > Hi all,
> > > > > 
> > > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > > 
> > > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > > 
> > > > > I am using version 1.0.
> > > > > 
> > > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > > 
> > > > > Is there a fix for this, or has anyone come accross it?
> > > > > 
> > > > > Thanks in advance,
> > > > > Darren
> > > > > 
> > > > > 
> > > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > > 
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Wed Jun 30 08:12:19 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8E8C@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B8E8C@itl-serv1.infoterra-global.com>
Message-ID: <20040630121219.GA73093@freek.keybit.net>

        LinearRing *lin1=(LinearRing*)gf->createPolygon(gf->createLinearRing(cl2),NULL);
        cout << "Geometry " << j << " : " << lin1->toString() << endl;
        holes->push_back(lin1);

What is this ? Holes must be a vector of LinearRing.
Your lin1 is not really a LinearRing, you cheated with static-cast!
It's a Polygon...

--strk;

On Wed, Jun 30, 2004 at 08:31:52AM +0100, Darren Carman wrote:
> > The code I've sent you was not intended to work.
> > Please send another 'clean' and buildable example of your work.
> 
> I have left control of the objects with geos, so havent bothered using ->clone(). I only have 1 polygon with 1 hole. If others have this working then I guess I am doing something stupid, but honestly cannot see it.
> 
> I'm not sure how relevant it is, but thought I should mention that i'm using Red Hat Advanced Server OS.
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> 
> using namespace std;
> using namespace geos;
> 
> typedef struct boundaryPt {
>   double x;
>   double y;
> };
> typedef vector<boundaryPt>    boundary;
> typedef vector<boundary>      boundaryList;
> typedef vector<boundaryList>  polygonList;
> 
> 
> void createPolys(polygonList &polys) {
>   int i;
> 
>   boundaryPt poly1[5];
>   boundaryPt hole1[5];
>   boundary tmpBoundary;
>   boundaryList tmpBoundaryList;
>   polygonList ptPolygons;
> 
>   poly1[0].x = 339252; poly1[0].y = 1019302;
>   poly1[1].x = 339252; poly1[1].y = 1029077;
>   poly1[2].x = 348752; poly1[2].y = 1029077;
>   poly1[3].x = 346102; poly1[3].y = 1019653;
>   poly1[4].x = 339252; poly1[4].y = 1019302;
> 
>   hole1[0].x = 340000; hole1[0].y = 1020000;
>   hole1[1].x = 340000; hole1[1].y = 1021000;
>   hole1[2].x = 341000; hole1[2].y = 1021000;
>   hole1[3].x = 341000; hole1[3].y = 1020000;
>   hole1[4].x = 340000; hole1[4].y = 1020000;
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(poly1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(hole1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   polys.push_back(tmpBoundaryList);
>   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
>     tmpBoundaryList[i].clear();
>   }
>   tmpBoundaryList.clear();
> }
> 
> 
> int main(int argc, char *argv[]) {
>   vector<LinearRing *> *polygons;
>   vector<LinearRing *> *holes;
>   int i,j,k;
>   string resStr = "";
>   polygonList ptPolygons;
> 
>   createPolys(ptPolygons);
>   try{
>     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>     // for each outer ring create a CoordinateList and add all the points to it
>     polygons = new vector<LinearRing *>();
>     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
>       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
>       boundaryList bl = ptPolygons[i];
>       boundary b = bl[0];
>       cout << "Polygon " << i << endl;
>       for(k=0; k< static_cast<int>(b.size()); k++) {
>         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>         cl1->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
>       }
> 
>       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
>       holes = new vector<LinearRing *>();
>       for(j=1; j< static_cast<int>(bl.size()); j++) {
>         cout << "Hole " << j << endl;
>         boundary b = bl[j];
>         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
>         for(k=0; k< static_cast<int>(b.size()); k++) {
>           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>           cl2->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
>         }
>         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
>         LinearRing *lin1=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl2),NULL);
>         cout << "Geometry " << j << " : " << lin1->toString() << endl;
>         holes->push_back(lin1);
>         delete cl2;
>       }
>       // create a polygon from the 1st CoordinateList and the holes
>       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
>       LinearRing *lin2=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl1),(vector<Geometry *> *)holes);
>       cout << "test " << endl;
>       cout << "Geometry " << i << " : " << lin2->toString() << endl;
> 
>       // save this polygon in another vector
>       cout << "Adding polygon " << i << endl;
>       polygons->push_back(lin2);
>       delete cl1;
>     }
>     cout << "Creating multi-polygon" << endl;
>     // when all done create a MultiPolygon object
>     Geometry *lin3=gf->createMultiPolygon((vector<Geometry *> *)polygons);
>     cout << "Creating string" << endl;
>     resStr = lin3->toString();
> 
>     //clean up
>     delete lin3;
>     delete gf;
>   }
>   catch (GEOSException *ge) {
>     cout << "ERROR: " << ge->toString() << endl;
>   }
>   cout << resStr << endl;
> }
> 
> > GEOS-CVS is not ABI-compatible with GEOS-1.0
> > You have to re-compile your test code.
> > Please let me know.
> 
> I did re-compile my code after make install on the geos CVS library, so i'm not too sure what you mean here.
> 
> Thanks,
> Darren
> 
> 
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 29 June 2004 23:54
> To: Darren Carman
> Cc: GEOS Development List
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> On Tue, Jun 29, 2004 at 10:37:01AM +0100, Darren Carman wrote:
> > Sorry, it didnt work - I forgot that I had commented out the hole initialisation in my code.
> > 
> > I changed your code below to use LinearRings (for geom1, geom2 and geom3) as well and saw the seg fault while calling toString on geom3 (as happens in my code). Again no seg fault is seen when no hole is supplied (it also works with geom1-3 as Geometry * when no hole is supplied).
> > 
> > So I am still at a loss.
> 
> The code I've sent you was not intended to work.
> Please send another 'clean' and buildable example of your work.
> 
> > 
> > Maybe it would help if I could get the cvs version to work - I do the following:
> > ./autogen.sh                                 --> as no configure there
> > ./configure --prefix=$HOME/<path>/           --> lib is used locally, not globally
> > make
> > make install
> > 
> > then when I make and run the test program I get the following:
> > ./test_bug: relocation error: ./test_bug: undefined symbol: _ZNK4geos15GeometryFactory16createLinearRingEPNS_14CoordinateListE
> 
> GEOS-CVS is not ABI-compatible with GEOS-1.0
> You have to re-compile your test code.
> Please let me know.
> 
> --strk;
> 
> > 
> > Thanks,
> > Darren
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 21:37
> > To: Darren Carman; GEOS Development List
> > Cc: Paul Ramsey; Yury A. Bychkov
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Ok. I've found the bug.
> > It is in your code (and in GEOS not handling it).
> > 
> > Main problem: you push a Polygon in the holes vector.
> > This - although defined as a Geometry vector - is indeed a LinearRing
> > vector, failing to enforce this typing does result in segfault
> > (not checked in Polygon.cpp).
> > 
> > Sub-problem1: your holes vector is an automatic variable, so it
> > is deleted when the code exits the block it is defined in.
> > The Polygon constructor copy the vector pointer and will delete it
> > at Polygon destructio time (I'd change this).
> > 
> > Sub-problem2: if I understood your code you are pushing in the
> > holes vector the geometries you previously created, with no cloning.
> > Again the Polygon constructor will take ownership of them (which should
> > be LinearRing) so you should ->clone() them before adding to the vector.
> > 
> > My proposal: make Polygon contructor deep copy shell and holes checking
> > for holes type to be LinearRing.
> > 
> > A question: why isn't holes a vector <LinearRing *> * ?
> > 
> > A note: I did not update CVS... I'd like to hear about my proposal first.
> > 
> > --strk;
> > 
> > On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> > > I could not find the problem.
> > > Here is a reduced code exploiting the error.
> > > I'll keep inspecting this...
> > > 
> > > BTW: I don't feel comportable in Polygon constructor taking
> > > ownership of passed arguments, what people think about modifying
> > > this as well ?
> > > 
> > > --strk;
> > > 
> > > //--------------------------8<-------------------
> > > 
> > > #include <geos/io.h>
> > > #include <geos/geom.h>
> > > #include <geos/util.h>
> > > 
> > > using namespace std;
> > > using namespace geos;
> > > 
> > > int main(int argc, char *argv[]) {
> > >         Coordinate c;
> > >         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
> > >         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> > > 
> > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > >         c.x = 339252; c.y = 1029077; cl1->add(c);
> > >         c.x = 348752; c.y = 1029077; cl1->add(c);
> > >         c.x = 346102; c.y = 1019653; cl1->add(c);
> > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > 
> > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > >         c.x = 340000; c.y = 1021000; cl2->add(c);
> > >         c.x = 341000; c.y = 1021000; cl2->add(c);
> > >         c.x = 341000; c.y = 1020000; cl2->add(c);
> > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > 
> > >         try {
> > >                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> > >                 cout<<"geom1: "<<geom1->toString()<<endl;
> > >                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >                 cout<<"geom2: "<<geom2->toString()<<endl;
> > >                 vector<Geometry*>*holes = new vector<Geometry*>(1);
> > >                 (*holes)[0] = geom2->clone();
> > >                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> > >                 cout<<"geom3: "<<geom3->toString()<<endl;
> > >                 delete cl1;
> > >                 delete cl2;
> > >         } catch (GEOSException *ge) {
> > >                 cout << "ERROR: " << ge->toString() << endl;
> > >         } catch (...) {
> > >                 cout << "generic ERROR" << endl;
> > >         }
> > > }
> > > 
> > > //--------------------------8<-------------------
> > > 
> > > 
> > > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > > #include <geos/io.h>
> > > > #include <geos/geom.h>
> > > > 
> > > > using namespace std;
> > > > using namespace geos;
> > > > 
> > > > typedef struct boundaryPt {
> > > >   double x;
> > > >   double y;
> > > > };
> > > > typedef vector<boundaryPt>    boundary;
> > > > typedef vector<boundary>      boundaryList;
> > > > typedef vector<boundaryList>  polygonList;
> > > > 
> > > > polygonList       ptPolygons;
> > > > 
> > > > int main(int argc, char *argv[]) {
> > > >   vector<Geometry *> polygons;
> > > >   vector<Geometry *> holes;
> > > >   int i,j,k;
> > > >   string resStr = "";
> > > > 
> > > >   boundaryPt poly1[5];
> > > >   boundaryPt hole1[5];
> > > >   boundary tmpBoundary;
> > > >   boundaryList tmpBoundaryList;
> > > >   polygonList ptPolygons;
> > > > 
> > > >   poly1[0].x = 339252;
> > > >   poly1[0].y = 1019302;
> > > >   poly1[1].x = 339252;
> > > >   poly1[1].y = 1029077;
> > > >   poly1[2].x = 348752;
> > > >   poly1[2].y = 1029077;
> > > >   poly1[3].x = 346102;
> > > >   poly1[3].y = 1019653;
> > > >   poly1[4].x = 339252;
> > > >   poly1[4].y = 1019302;
> > > > 
> > > >   hole1[0].x = 340000;
> > > >   hole1[0].y = 1020000;
> > > >   hole1[1].x = 340000;
> > > >   hole1[1].y = 1021000;
> > > >   hole1[2].x = 341000;
> > > >   hole1[2].y = 1021000;
> > > >   hole1[3].x = 341000;
> > > >   hole1[3].y = 1020000;
> > > >   hole1[4].x = 340000;
> > > >   hole1[4].y = 1020000;
> > > > 
> > > >   for (i=0; i<5; i++) {
> > > >     tmpBoundary.push_back(poly1[i]);
> > > >   }
> > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > >   tmpBoundary.clear();
> > > > 
> > > >   for (i=0; i<5; i++) {
> > > >     tmpBoundary.push_back(hole1[i]);
> > > >   }
> > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > >   tmpBoundary.clear();
> > > > 
> > > >   ptPolygons.push_back(tmpBoundaryList);
> > > >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> > > >     tmpBoundaryList[i].clear();
> > > >   }
> > > >   tmpBoundaryList.clear();
> > > > 
> > > > 
> > > >   try{
> > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > 
> > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >       boundaryList bl = ptPolygons[i];
> > > >       boundary b = bl[0];
> > > >       cout << "Polygon " << i << endl;
> > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >       }
> > > > 
> > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > >         cout << "Hole " << j << endl;
> > > >         boundary b = bl[j];
> > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >         }
> > > >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> > > >         holes.push_back(geom1);
> > > >         delete cl2;
> > > >       }
> > > >       // create a polygon from the 1st CoordinateList and the holes
> > > >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> > > >       cout << "test " << endl;
> > > >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > > > 
> > > >       // save this polygon in another vector
> > > >       cout << "Adding polygon " << i << endl;
> > > >       polygons.push_back(geom2);
> > > >       delete cl1;
> > > >     }
> > > >     cout << "Creating multi-polygon" << endl;
> > > >     // when all done create a MultiPolygon object
> > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > >     cout << "Creating string" << endl;
> > > >     resStr = geom3->toString();
> > > > 
> > > >     //clean up
> > > >     delete geom3;
> > > >     delete gf;
> > > >   }
> > > >   catch (GEOSException *ge) {
> > > >     cout << "ERROR: " << ge->toString() << endl;
> > > >   }
> > > >   cout << resStr << endl;
> > > > }
> > > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: 28 June 2004 11:28
> > > > To: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > Can you produce a neter code exploiting the bug ?
> > > > I mean a .cpp file I can compile and run and debug :)
> > > > 
> > > > -strk;
> > > > 
> > > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > > defs:
> > > > > typedef struct boundaryPt {
> > > > >   double x;
> > > > >   double y;
> > > > > };
> > > > > typedef vector<boundaryPt>    boundary;
> > > > > typedef vector<boundary>      boundaryList;
> > > > > typedef vector<boundaryList>  polygonList;
> > > > > 
> > > > > class members used:
> > > > >   polygonList       ptPolygons;
> > > > >   string tmpStr;
> > > > >   string errMsg;
> > > > > 
> > > > > class function:
> > > > > string c_polygon_gml::WKTString(void) {
> > > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > > >   vector<Geometry *> polygons;
> > > > >   vector<Geometry *> holes;
> > > > >   int i,j,k;
> > > > >   string resStr = "";
> > > > > 
> > > > >   try{
> > > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > > 
> > > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > >       boundaryList bl = ptPolygons[i];
> > > > >       boundary b = bl[0];
> > > > >       TRACE_OUTPUT("Polygon " << i);
> > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > >       }
> > > > > 
> > > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > >         TRACE_OUTPUT("Hole " << j);
> > > > >         boundary b = bl[j];
> > > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > >         }
> > > > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > > > >         holes.push_back(geom1);
> > > > >         delete cl2;
> > > > >       }
> > > > >       // create a polygon from the 1st CoordinateList and the holes
> > > > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > > >       TRACE_OUTPUT("test ");
> > > > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > > > 
> > > > >       // save this polygon in another vector
> > > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > > >       polygons.push_back(geom2);
> > > > >       delete cl1;
> > > > >     }
> > > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > > >     // when all done create a MultiPolygon object
> > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > >     TRACE_OUTPUT("Creating string");
> > > > >     resStr = geom3->toString();
> > > > > 
> > > > >     //clean up
> > > > >     delete geom3;
> > > > >     delete gf;
> > > > >   }
> > > > >   catch (GEOSException *ge) {
> > > > >     errMsg = ge->toString();
> > > > >   }
> > > > >   return resStr;
> > > > > }
> > > > > 
> > > > > XML read in by class and stored in ptPolygons:
> > > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > > <AreaDefinition>
> > > > > <GDSRequest>
> > > > > <query>
> > > > > <AreaQuery outputContent="public">
> > > > > <queryArea>
> > > > > <Polygon srsName="osgb:BNG">
> > > > > <outerBoundaryIs>
> > > > > <LinearRing>
> > > > > <coordinates>
> > > > > 339252,1019302
> > > > > 339252,1029077
> > > > > 348752,1029077
> > > > > 346102,1019653
> > > > > 339252,1019302
> > > > > </coordinates>
> > > > > </LinearRing>
> > > > > </outerBoundaryIs>
> > > > > <innerBoundaryIs>
> > > > > <LinearRing>
> > > > > <coordinates>
> > > > > 340000,1020000
> > > > > 340000,1021000
> > > > > 341000,1021000
> > > > > 341000,1020000
> > > > > 340000,1020000
> > > > > </coordinates>
> > > > > </LinearRing>
> > > > > </innerBoundaryIs>
> > > > > </Polygon>
> > > > > </queryArea>
> > > > > </AreaQuery>
> > > > > </query>
> > > > > </GDSRequest>
> > > > > </AreaDefinition>
> > > > > 
> > > > > Output:
> > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > > TR:   Polygon 0
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Added point 339252,1.02908e+06
> > > > > TR:   Added point 348752,1.02908e+06
> > > > > TR:   Added point 346102,1.01965e+06
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Hole 1
> > > > > TR:   Added point 340000,1.02e+06
> > > > > TR:   Added point 340000,1.021e+06
> > > > > TR:   Added point 341000,1.021e+06
> > > > > TR:   Added point 341000,1.02e+06
> > > > > TR:   Added point 340000,1.02e+06
> > > > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > TR:   test
> > > > > Segmentation fault
> > > > > 
> > > > > Output when the hole is removed:
> > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > > TR:   Polygon 0
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Added point 339252,1.02908e+06
> > > > > TR:   Added point 348752,1.02908e+06
> > > > > TR:   Added point 346102,1.01965e+06
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > TR:   test
> > > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > > > TR:   Adding polygon 0
> > > > > TR:   Creating multi-polygon
> > > > > TR:   Creating string
> > > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > > ERROR:
> > > > > WTF format
> > > > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > > > 
> > > > > 
> > > > > -----Original Message-----
> > > > > From: strk [mailto:strk@keybit.net]
> > > > > Sent: 28 June 2004 11:01
> > > > > To: GEOS Development List
> > > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > > 
> > > > > 
> > > > > Can you send the test code ?
> > > > > There are currently no known bug ...
> > > > > --strk;
> > > > > 
> > > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > > Hi all,
> > > > > > 
> > > > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > > > 
> > > > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > > > 
> > > > > > I am using version 1.0.
> > > > > > 
> > > > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > > > 
> > > > > > Is there a fix for this, or has anyone come accross it?
> > > > > > 
> > > > > > Thanks in advance,
> > > > > > Darren
> > > > > > 
> > > > > > 
> > > > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > > > 
> > > > > > _______________________________________________
> > > > > > geos-devel mailing list
> > > > > > geos-devel@geos.refractions.net
> > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel

From darren.carman at infoterra-global.com  Wed Jun 30 09:16:41 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B9101@itl-serv1.infoterra-global.com>

Aaaaaah .. I understand now.

Changed that line to LinearRing *lin1=gf->createLinearRing(cl2); and it now works.

I had assumed that the holes were treated as polygons as well :(

Thanks for all the help,
Darren

-----Original Message-----
From: strk [mailto:strk@keybit.net]
Sent: 30 June 2004 13:12
To: Darren Carman
Cc: GEOS Development List
Subject: Re: [geos-devel] Problems creating polygons with holes


        LinearRing *lin1=(LinearRing*)gf->createPolygon(gf->createLinearRing(cl2),NULL);
        cout << "Geometry " << j << " : " << lin1->toString() << endl;
        holes->push_back(lin1);

What is this ? Holes must be a vector of LinearRing.
Your lin1 is not really a LinearRing, you cheated with static-cast!
It's a Polygon...

--strk;

On Wed, Jun 30, 2004 at 08:31:52AM +0100, Darren Carman wrote:
> > The code I've sent you was not intended to work.
> > Please send another 'clean' and buildable example of your work.
> 
> I have left control of the objects with geos, so havent bothered using ->clone(). I only have 1 polygon with 1 hole. If others have this working then I guess I am doing something stupid, but honestly cannot see it.
> 
> I'm not sure how relevant it is, but thought I should mention that i'm using Red Hat Advanced Server OS.
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> 
> using namespace std;
> using namespace geos;
> 
> typedef struct boundaryPt {
>   double x;
>   double y;
> };
> typedef vector<boundaryPt>    boundary;
> typedef vector<boundary>      boundaryList;
> typedef vector<boundaryList>  polygonList;
> 
> 
> void createPolys(polygonList &polys) {
>   int i;
> 
>   boundaryPt poly1[5];
>   boundaryPt hole1[5];
>   boundary tmpBoundary;
>   boundaryList tmpBoundaryList;
>   polygonList ptPolygons;
> 
>   poly1[0].x = 339252; poly1[0].y = 1019302;
>   poly1[1].x = 339252; poly1[1].y = 1029077;
>   poly1[2].x = 348752; poly1[2].y = 1029077;
>   poly1[3].x = 346102; poly1[3].y = 1019653;
>   poly1[4].x = 339252; poly1[4].y = 1019302;
> 
>   hole1[0].x = 340000; hole1[0].y = 1020000;
>   hole1[1].x = 340000; hole1[1].y = 1021000;
>   hole1[2].x = 341000; hole1[2].y = 1021000;
>   hole1[3].x = 341000; hole1[3].y = 1020000;
>   hole1[4].x = 340000; hole1[4].y = 1020000;
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(poly1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(hole1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   polys.push_back(tmpBoundaryList);
>   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
>     tmpBoundaryList[i].clear();
>   }
>   tmpBoundaryList.clear();
> }
> 
> 
> int main(int argc, char *argv[]) {
>   vector<LinearRing *> *polygons;
>   vector<LinearRing *> *holes;
>   int i,j,k;
>   string resStr = "";
>   polygonList ptPolygons;
> 
>   createPolys(ptPolygons);
>   try{
>     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>     // for each outer ring create a CoordinateList and add all the points to it
>     polygons = new vector<LinearRing *>();
>     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
>       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
>       boundaryList bl = ptPolygons[i];
>       boundary b = bl[0];
>       cout << "Polygon " << i << endl;
>       for(k=0; k< static_cast<int>(b.size()); k++) {
>         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>         cl1->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
>       }
> 
>       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
>       holes = new vector<LinearRing *>();
>       for(j=1; j< static_cast<int>(bl.size()); j++) {
>         cout << "Hole " << j << endl;
>         boundary b = bl[j];
>         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
>         for(k=0; k< static_cast<int>(b.size()); k++) {
>           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>           cl2->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
>         }
>         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
>         LinearRing *lin1=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl2),NULL);
>         cout << "Geometry " << j << " : " << lin1->toString() << endl;
>         holes->push_back(lin1);
>         delete cl2;
>       }
>       // create a polygon from the 1st CoordinateList and the holes
>       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
>       LinearRing *lin2=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl1),(vector<Geometry *> *)holes);
>       cout << "test " << endl;
>       cout << "Geometry " << i << " : " << lin2->toString() << endl;
> 
>       // save this polygon in another vector
>       cout << "Adding polygon " << i << endl;
>       polygons->push_back(lin2);
>       delete cl1;
>     }
>     cout << "Creating multi-polygon" << endl;
>     // when all done create a MultiPolygon object
>     Geometry *lin3=gf->createMultiPolygon((vector<Geometry *> *)polygons);
>     cout << "Creating string" << endl;
>     resStr = lin3->toString();
> 
>     //clean up
>     delete lin3;
>     delete gf;
>   }
>   catch (GEOSException *ge) {
>     cout << "ERROR: " << ge->toString() << endl;
>   }
>   cout << resStr << endl;
> }
> 
> > GEOS-CVS is not ABI-compatible with GEOS-1.0
> > You have to re-compile your test code.
> > Please let me know.
> 
> I did re-compile my code after make install on the geos CVS library, so i'm not too sure what you mean here.
> 
> Thanks,
> Darren
> 
> 
> 
> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: 29 June 2004 23:54
> To: Darren Carman
> Cc: GEOS Development List
> Subject: Re: [geos-devel] Problems creating polygons with holes
> 
> 
> On Tue, Jun 29, 2004 at 10:37:01AM +0100, Darren Carman wrote:
> > Sorry, it didnt work - I forgot that I had commented out the hole initialisation in my code.
> > 
> > I changed your code below to use LinearRings (for geom1, geom2 and geom3) as well and saw the seg fault while calling toString on geom3 (as happens in my code). Again no seg fault is seen when no hole is supplied (it also works with geom1-3 as Geometry * when no hole is supplied).
> > 
> > So I am still at a loss.
> 
> The code I've sent you was not intended to work.
> Please send another 'clean' and buildable example of your work.
> 
> > 
> > Maybe it would help if I could get the cvs version to work - I do the following:
> > ./autogen.sh                                 --> as no configure there
> > ./configure --prefix=$HOME/<path>/           --> lib is used locally, not globally
> > make
> > make install
> > 
> > then when I make and run the test program I get the following:
> > ./test_bug: relocation error: ./test_bug: undefined symbol: _ZNK4geos15GeometryFactory16createLinearRingEPNS_14CoordinateListE
> 
> GEOS-CVS is not ABI-compatible with GEOS-1.0
> You have to re-compile your test code.
> Please let me know.
> 
> --strk;
> 
> > 
> > Thanks,
> > Darren
> > 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: 28 June 2004 21:37
> > To: Darren Carman; GEOS Development List
> > Cc: Paul Ramsey; Yury A. Bychkov
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Ok. I've found the bug.
> > It is in your code (and in GEOS not handling it).
> > 
> > Main problem: you push a Polygon in the holes vector.
> > This - although defined as a Geometry vector - is indeed a LinearRing
> > vector, failing to enforce this typing does result in segfault
> > (not checked in Polygon.cpp).
> > 
> > Sub-problem1: your holes vector is an automatic variable, so it
> > is deleted when the code exits the block it is defined in.
> > The Polygon constructor copy the vector pointer and will delete it
> > at Polygon destructio time (I'd change this).
> > 
> > Sub-problem2: if I understood your code you are pushing in the
> > holes vector the geometries you previously created, with no cloning.
> > Again the Polygon constructor will take ownership of them (which should
> > be LinearRing) so you should ->clone() them before adding to the vector.
> > 
> > My proposal: make Polygon contructor deep copy shell and holes checking
> > for holes type to be LinearRing.
> > 
> > A question: why isn't holes a vector <LinearRing *> * ?
> > 
> > A note: I did not update CVS... I'd like to hear about my proposal first.
> > 
> > --strk;
> > 
> > On Mon, Jun 28, 2004 at 09:58:54PM +0200, strk wrote:
> > > I could not find the problem.
> > > Here is a reduced code exploiting the error.
> > > I'll keep inspecting this...
> > > 
> > > BTW: I don't feel comportable in Polygon constructor taking
> > > ownership of passed arguments, what people think about modifying
> > > this as well ?
> > > 
> > > --strk;
> > > 
> > > //--------------------------8<-------------------
> > > 
> > > #include <geos/io.h>
> > > #include <geos/geom.h>
> > > #include <geos/util.h>
> > > 
> > > using namespace std;
> > > using namespace geos;
> > > 
> > > int main(int argc, char *argv[]) {
> > >         Coordinate c;
> > >         CoordinateList *cl1 = CoordinateListFactory::internalFactory->createCoordinateList();
> > >         CoordinateList *cl2 = CoordinateListFactory::internalFactory->createCoordinateList();
> > > 
> > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > >         c.x = 339252; c.y = 1029077; cl1->add(c);
> > >         c.x = 348752; c.y = 1029077; cl1->add(c);
> > >         c.x = 346102; c.y = 1019653; cl1->add(c);
> > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > 
> > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > >         c.x = 340000; c.y = 1021000; cl2->add(c);
> > >         c.x = 341000; c.y = 1021000; cl2->add(c);
> > >         c.x = 341000; c.y = 1020000; cl2->add(c);
> > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > 
> > >         try {
> > >                 GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > 
> > >                 Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> > >                 cout<<"geom1: "<<geom1->toString()<<endl;
> > >                 Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > >                 cout<<"geom2: "<<geom2->toString()<<endl;
> > >                 vector<Geometry*>*holes = new vector<Geometry*>(1);
> > >                 (*holes)[0] = geom2->clone();
> > >                 Geometry *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> > >                 cout<<"geom3: "<<geom3->toString()<<endl;
> > >                 delete cl1;
> > >                 delete cl2;
> > >         } catch (GEOSException *ge) {
> > >                 cout << "ERROR: " << ge->toString() << endl;
> > >         } catch (...) {
> > >                 cout << "generic ERROR" << endl;
> > >         }
> > > }
> > > 
> > > //--------------------------8<-------------------
> > > 
> > > 
> > > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren Carman wrote:
> > > > #include <geos/io.h>
> > > > #include <geos/geom.h>
> > > > 
> > > > using namespace std;
> > > > using namespace geos;
> > > > 
> > > > typedef struct boundaryPt {
> > > >   double x;
> > > >   double y;
> > > > };
> > > > typedef vector<boundaryPt>    boundary;
> > > > typedef vector<boundary>      boundaryList;
> > > > typedef vector<boundaryList>  polygonList;
> > > > 
> > > > polygonList       ptPolygons;
> > > > 
> > > > int main(int argc, char *argv[]) {
> > > >   vector<Geometry *> polygons;
> > > >   vector<Geometry *> holes;
> > > >   int i,j,k;
> > > >   string resStr = "";
> > > > 
> > > >   boundaryPt poly1[5];
> > > >   boundaryPt hole1[5];
> > > >   boundary tmpBoundary;
> > > >   boundaryList tmpBoundaryList;
> > > >   polygonList ptPolygons;
> > > > 
> > > >   poly1[0].x = 339252;
> > > >   poly1[0].y = 1019302;
> > > >   poly1[1].x = 339252;
> > > >   poly1[1].y = 1029077;
> > > >   poly1[2].x = 348752;
> > > >   poly1[2].y = 1029077;
> > > >   poly1[3].x = 346102;
> > > >   poly1[3].y = 1019653;
> > > >   poly1[4].x = 339252;
> > > >   poly1[4].y = 1019302;
> > > > 
> > > >   hole1[0].x = 340000;
> > > >   hole1[0].y = 1020000;
> > > >   hole1[1].x = 340000;
> > > >   hole1[1].y = 1021000;
> > > >   hole1[2].x = 341000;
> > > >   hole1[2].y = 1021000;
> > > >   hole1[3].x = 341000;
> > > >   hole1[3].y = 1020000;
> > > >   hole1[4].x = 340000;
> > > >   hole1[4].y = 1020000;
> > > > 
> > > >   for (i=0; i<5; i++) {
> > > >     tmpBoundary.push_back(poly1[i]);
> > > >   }
> > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > >   tmpBoundary.clear();
> > > > 
> > > >   for (i=0; i<5; i++) {
> > > >     tmpBoundary.push_back(hole1[i]);
> > > >   }
> > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > >   tmpBoundary.clear();
> > > > 
> > > >   ptPolygons.push_back(tmpBoundaryList);
> > > >   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
> > > >     tmpBoundaryList[i].clear();
> > > >   }
> > > >   tmpBoundaryList.clear();
> > > > 
> > > > 
> > > >   try{
> > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > 
> > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >       boundaryList bl = ptPolygons[i];
> > > >       boundary b = bl[0];
> > > >       cout << "Polygon " << i << endl;
> > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >       }
> > > > 
> > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > >         cout << "Hole " << j << endl;
> > > >         boundary b = bl[j];
> > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > >           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
> > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > >         }
> > > >         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
> > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > >         cout << "Geometry " << j << " : " << geom1->toString() << endl;
> > > >         holes.push_back(geom1);
> > > >         delete cl2;
> > > >       }
> > > >       // create a polygon from the 1st CoordinateList and the holes
> > > >       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
> > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);                                             
> > > >       cout << "test " << endl;
> > > >       cout << "Geometry " << i << " : " << geom2->toString() << endl;
> > > > 
> > > >       // save this polygon in another vector
> > > >       cout << "Adding polygon " << i << endl;
> > > >       polygons.push_back(geom2);
> > > >       delete cl1;
> > > >     }
> > > >     cout << "Creating multi-polygon" << endl;
> > > >     // when all done create a MultiPolygon object
> > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > >     cout << "Creating string" << endl;
> > > >     resStr = geom3->toString();
> > > > 
> > > >     //clean up
> > > >     delete geom3;
> > > >     delete gf;
> > > >   }
> > > >   catch (GEOSException *ge) {
> > > >     cout << "ERROR: " << ge->toString() << endl;
> > > >   }
> > > >   cout << resStr << endl;
> > > > }
> > > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: 28 June 2004 11:28
> > > > To: GEOS Development List
> > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > 
> > > > 
> > > > Can you produce a neter code exploiting the bug ?
> > > > I mean a .cpp file I can compile and run and debug :)
> > > > 
> > > > -strk;
> > > > 
> > > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren Carman wrote:
> > > > > defs:
> > > > > typedef struct boundaryPt {
> > > > >   double x;
> > > > >   double y;
> > > > > };
> > > > > typedef vector<boundaryPt>    boundary;
> > > > > typedef vector<boundary>      boundaryList;
> > > > > typedef vector<boundaryList>  polygonList;
> > > > > 
> > > > > class members used:
> > > > >   polygonList       ptPolygons;
> > > > >   string tmpStr;
> > > > >   string errMsg;
> > > > > 
> > > > > class function:
> > > > > string c_polygon_gml::WKTString(void) {
> > > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > > >   vector<Geometry *> polygons;
> > > > >   vector<Geometry *> holes;
> > > > >   int i,j,k;
> > > > >   string resStr = "";
> > > > > 
> > > > >   try{
> > > > >     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> > > > > 
> > > > >     // for each outer ring create a CoordinateList and add all the points to it
> > > > >     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
> > > > >       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > >       boundaryList bl = ptPolygons[i];
> > > > >       boundary b = bl[0];
> > > > >       TRACE_OUTPUT("Polygon " << i);
> > > > >       for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > >         TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > > >         cl1->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > >       }
> > > > > 
> > > > >       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
> > > > >       for(j=1; j< static_cast<int>(bl.size()); j++) {
> > > > >         TRACE_OUTPUT("Hole " << j);
> > > > >         boundary b = bl[j];
> > > > >         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
> > > > >         for(k=0; k< static_cast<int>(b.size()); k++) {
> > > > >           TRACE_OUTPUT("Added point " << b[k].x << ',' << b[k].y);
> > > > >           cl2->add(*(new Coordinate(b[k].x,b[k].y)));
> > > > >         }
> > > > >         TRACE_OUTPUT("Creating polygon for hole " << j << ": " << cl2->toString());
> > > > >         Geometry *geom1=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > >         TRACE_OUTPUT("Geometry " << j << " : " << geom1->toString());
> > > > >         holes.push_back(geom1);
> > > > >         delete cl2;
> > > > >       }
> > > > >       // create a polygon from the 1st CoordinateList and the holes
> > > > >       TRACE_OUTPUT("Creating polygon " << i << ": " << cl1->toString());
> > > > >       Geometry *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > > >       TRACE_OUTPUT("test ");
> > > > >       TRACE_OUTPUT("Geometry " << i << " : " << geom2->toString());
> > > > > 
> > > > >       // save this polygon in another vector
> > > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > > >       polygons.push_back(geom2);
> > > > >       delete cl1;
> > > > >     }
> > > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > > >     // when all done create a MultiPolygon object
> > > > >     Geometry *geom3=gf->createMultiPolygon(&polygons);
> > > > >     TRACE_OUTPUT("Creating string");
> > > > >     resStr = geom3->toString();
> > > > > 
> > > > >     //clean up
> > > > >     delete geom3;
> > > > >     delete gf;
> > > > >   }
> > > > >   catch (GEOSException *ge) {
> > > > >     errMsg = ge->toString();
> > > > >   }
> > > > >   return resStr;
> > > > > }
> > > > > 
> > > > > XML read in by class and stored in ptPolygons:
> > > > > <?xml version="1.0" encoding="UTF-8"?>
> > > > > <AreaDefinition>
> > > > > <GDSRequest>
> > > > > <query>
> > > > > <AreaQuery outputContent="public">
> > > > > <queryArea>
> > > > > <Polygon srsName="osgb:BNG">
> > > > > <outerBoundaryIs>
> > > > > <LinearRing>
> > > > > <coordinates>
> > > > > 339252,1019302
> > > > > 339252,1029077
> > > > > 348752,1029077
> > > > > 346102,1019653
> > > > > 339252,1019302
> > > > > </coordinates>
> > > > > </LinearRing>
> > > > > </outerBoundaryIs>
> > > > > <innerBoundaryIs>
> > > > > <LinearRing>
> > > > > <coordinates>
> > > > > 340000,1020000
> > > > > 340000,1021000
> > > > > 341000,1021000
> > > > > 341000,1020000
> > > > > 340000,1020000
> > > > > </coordinates>
> > > > > </LinearRing>
> > > > > </innerBoundaryIs>
> > > > > </Polygon>
> > > > > </queryArea>
> > > > > </AreaQuery>
> > > > > </query>
> > > > > </GDSRequest>
> > > > > </AreaDefinition>
> > > > > 
> > > > > Output:
> > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > > TR:   Polygon 0
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Added point 339252,1.02908e+06
> > > > > TR:   Added point 348752,1.02908e+06
> > > > > TR:   Added point 346102,1.01965e+06
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Hole 1
> > > > > TR:   Added point 340000,1.02e+06
> > > > > TR:   Added point 340000,1.021e+06
> > > > > TR:   Added point 341000,1.021e+06
> > > > > TR:   Added point 341000,1.02e+06
> > > > > TR:   Added point 340000,1.02e+06
> > > > > TR:   Creating polygon for hole 1: (340000,1.02e+06,1.7e-308) (340000,1.021e+06,1.7e-308) (341000,1.021e+06,1.7e-308) (341000,1.02e+06,1.7e-308) (340000,1.02e+06,1.7e-308)
> > > > > TR:   Geometry 1 : POLYGON ((340000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1021000.0000000000000000, 341000.0000000000000000 1020000.0000000000000000, 340000.0000000000000000 1020000.0000000000000000))
> > > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > TR:   test
> > > > > Segmentation fault
> > > > > 
> > > > > Output when the hole is removed:
> > > > > TR: TRACE ENTRY:c_polygon_gml::WKTString line 168 file c_polygon_gml.cpp
> > > > > TR:   Polygon 0
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Added point 339252,1.02908e+06
> > > > > TR:   Added point 348752,1.02908e+06
> > > > > TR:   Added point 346102,1.01965e+06
> > > > > TR:   Added point 339252,1.0193e+06
> > > > > TR:   Creating polygon 0: (339252,1.0193e+06,1.7e-308) (339252,1.02908e+06,1.7e-308) (348752,1.02908e+06,1.7e-308) (346102,1.01965e+06,1.7e-308) (339252,1.0193e+06,1.7e-308)
> > > > > TR:   test
> > > > > TR:   Geometry 0 : POLYGON ((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000))
> > > > > TR:   Adding polygon 0
> > > > > TR:   Creating multi-polygon
> > > > > TR:   Creating string
> > > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > > ERROR:
> > > > > WTF format
> > > > > MULTIPOLYGON (((339252.0000000000000000 1019302.0000000000000000, 339252.0000000000000000 1029077.0000000000000000, 348752.0000000000000000 1029077.0000000000000000, 346102.0000000000000000 1019653.0000000000000000, 339252.0000000000000000 1019302.0000000000000000)))
> > > > > 
> > > > > 
> > > > > -----Original Message-----
> > > > > From: strk [mailto:strk@keybit.net]
> > > > > Sent: 28 June 2004 11:01
> > > > > To: GEOS Development List
> > > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > > 
> > > > > 
> > > > > Can you send the test code ?
> > > > > There are currently no known bug ...
> > > > > --strk;
> > > > > 
> > > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100, Darren Carman wrote:
> > > > > > Hi all,
> > > > > > 
> > > > > > I am creating polygons with holes and want to use geos to allow me to output them in WKT.
> > > > > > 
> > > > > > A polygon without a hole works fine, but as soon as I add a hole I get a segmentation fault after calling the createPolygon function (GeometryFactory) and trying to run toString on that polygon.
> > > > > > 
> > > > > > I am using version 1.0.
> > > > > > 
> > > > > > I have tried getting the latest version from CVS but this causes a segmentation fault to occur while adding the 5th polygon coordinate to the CoordinateList (there are only 4 coordinates in the test polygon, the 5th being the first one repeated - I tried making it 6 to see if it was a problem with closing the polygon but I still got a segmentation fault while adding the 5th).
> > > > > > 
> > > > > > Is there a fix for this, or has anyone come accross it?
> > > > > > 
> > > > > > Thanks in advance,
> > > > > > Darren
> > > > > > 
> > > > > > 
> > > > > > "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> > > > > > Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> > > > > > 
> > > > > > _______________________________________________
> > > > > > geos-devel mailing list
> > > > > > geos-devel@geos.refractions.net
> > > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > _______________________________________________
> > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel

From chodgson at refractions.net  Wed Jun 30 10:54:43 2004
From: chodgson at refractions.net (chodgson@refractions.net)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B9101@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B9101@itl-serv1.infoterra-global.com>
Message-ID: <1088607283.40e2d433106bb@hydra>

> I had assumed that the holes were treated as polygons as well :(

If polygon holes were defined by polygons, then your holes could have holes 
(which in turn could have holes...)!

:)
Chris


From darren.carman at infoterra-global.com  Wed Jun 30 11:13:58 2004
From: darren.carman at infoterra-global.com (Darren Carman)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <C858B7EA73E00F4F97CBD68FA8BE7EC31B91C8@itl-serv1.infoterra-global.com>

The way we deal with them holes can contain polygons, which in turn can contain holes, etc. and we still treat holes as polygons -- hence my confusion.

If you would like to use my code as another one of your examples in the distribution - for polygons with holes - then feel free (if you think it may help someone else).

Here is the working code:

#include <geos/io.h>
#include <geos/geom.h>

using namespace std;
using namespace geos;

typedef struct boundaryPt {
  double x;
  double y;
};
typedef vector<boundaryPt>    boundary;
typedef vector<boundary>      boundaryList;
typedef vector<boundaryList>  polygonList;


void createPolys(polygonList &polys) {
  int i;

  boundaryPt poly1[5];
  boundaryPt hole1[5];
  boundary tmpBoundary;
  boundaryList tmpBoundaryList;
  polygonList ptPolygons;

  poly1[0].x = 339252; poly1[0].y = 1019302;
  poly1[1].x = 339252; poly1[1].y = 1029077;
  poly1[2].x = 348752; poly1[2].y = 1029077;
  poly1[3].x = 346102; poly1[3].y = 1019653;
  poly1[4].x = 339252; poly1[4].y = 1019302;

  hole1[0].x = 340000; hole1[0].y = 1020000;
  hole1[1].x = 340000; hole1[1].y = 1021000;
  hole1[2].x = 341000; hole1[2].y = 1021000;
  hole1[3].x = 341000; hole1[3].y = 1020000;
  hole1[4].x = 340000; hole1[4].y = 1020000;

  for (i=0; i<5; i++) {
    tmpBoundary.push_back(poly1[i]);
  }
  tmpBoundaryList.push_back(tmpBoundary);
  tmpBoundary.clear();

  for (i=0; i<5; i++) {
    tmpBoundary.push_back(hole1[i]);
  }
  tmpBoundaryList.push_back(tmpBoundary);
  tmpBoundary.clear();

  polys.push_back(tmpBoundaryList);
  for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
    tmpBoundaryList[i].clear();
  }
  tmpBoundaryList.clear();
}


int main(int argc, char *argv[]) {
  vector<Geometry *> *polygons;
  vector<LinearRing *> *holes;
  int i,j,k;
  string resStr = "";
  polygonList ptPolygons;

  createPolys(ptPolygons);
  try{
    GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);

    // for each outer ring create a CoordinateList and add all the points to it
    polygons = new vector<Geometry *>();
    for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
      CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
      boundaryList bl = ptPolygons[i];
      boundary b = bl[0];
      cout << "Polygon " << i << endl;
      for(k=0; k< static_cast<int>(b.size()); k++) {
        cout << "Added point " << b[k].x << ',' << b[k].y << endl;
        cl1->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
      }

      // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
      holes = new vector<LinearRing *>();
      for(j=1; j< static_cast<int>(bl.size()); j++) {
        cout << "Hole " << j << endl;
        boundary b = bl[j];
        CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
        for(k=0; k< static_cast<int>(b.size()); k++) {
          cout << "Added point " << b[k].x << ',' << b[k].y << endl;
          cl2->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
        }
        cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
        //LinearRing *lin1=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl2),NULL);
        LinearRing *lin1=gf->createLinearRing(cl2);
        cout << "Geometry " << j << " : " << lin1->toString() << endl;
        holes->push_back(lin1);
        delete cl2;
      }
      // create a polygon from the 1st CoordinateList and the holes
      cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
      Geometry *geom1=(Geometry *)gf->createPolygon(gf->createLinearRing(cl1),(vector<Geometry *> *)holes);
      cout << "Geometry " << i << " : " << geom1->toString() << endl;

      // save this polygon in another vector
      cout << "Adding polygon " << i << endl;
      polygons->push_back(geom1);
      delete cl1;
    }
    cout << "Creating multi-polygon" << endl;
    // when all done create a MultiPolygon object
    Geometry *geom2=gf->createMultiPolygon((vector<Geometry *> *)polygons);
    cout << "Creating string" << endl;
    resStr = geom2->toString();

    //clean up
    delete geom2;
    delete gf;
  }
  catch (GEOSException *ge) {
    cout << "ERROR: " << ge->toString() << endl;
  }
  cout << resStr << endl;
}

Cheers,
Darren

-----Original Message-----
From: chodgson@refractions.net [mailto:chodgson@refractions.net]
Sent: 30 June 2004 15:55
To: GEOS Development List
Subject: RE: [geos-devel] Problems creating polygons with holes


> I had assumed that the holes were treated as polygons as well :(

If polygon holes were defined by polygons, then your holes could have holes (which in turn could have holes...)!

:)
Chris

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


"The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".


From nhv at cape.com  Wed Jun 30 11:23:06 2004
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <1088607283.40e2d433106bb@hydra>
Message-ID: <EKEJIKAILPONGGENMBGAMEJMHPAA.nhv@cape.com>

> 
> > I had assumed that the holes were treated as polygons as well :(
> 
> If polygon holes were defined by polygons, then your holes could have holes 
> (which in turn could have holes...)!

not so far fetched ..

ie. an island in a pond in an island in a lake in an island in the ocean :-)

< assuming a hole in a water polygon is land and visa versa >

Norman



From mbdavis at VividSolutions.com  Wed Jun 30 11:30:14 2004
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F54D9@venus.VividSolutions.com>

You can model this situation with a MultiPolygon.

I think you'd find if you worked out the details that allowing Polygons
to be holes would create all sorts of strange situations that the code
would have to handle.  Besides, if there's an application that really
needs this they can fairly easily create helper code to provide the ring
components in the way GEOS needs them.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Norman Vine [mailto:nhv@cape.com] 
> Sent: June 30, 2004 8:23 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] Problems creating polygons with holes
> 
> 
> > 
> > > I had assumed that the holes were treated as polygons as well :(
> > 
> > If polygon holes were defined by polygons, then your holes 
> could have 
> > holes
> > (which in turn could have holes...)!
> 
> not so far fetched ..
> 
> ie. an island in a pond in an island in a lake in an island 
> in the ocean :-)
> 
> < assuming a hole in a water polygon is land and visa versa >
> 
> Norman
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at keybit.net  Wed Jun 30 13:21:04 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F54D8@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0274F54D8@venus.VividSolutions.com>
Message-ID: <20040630172104.GA73648@freek.keybit.net>

On Wed, Jun 30, 2004 at 08:26:04AM -0700, Martin Davis wrote:
> Sounds like a clever solution.  My C++ is a little rusty - is there a
> way to differentiate between pass-by-ref and pass-by-pointer?   And are
> you saying that for vectors you would pass the vector itself as ref or
> ptr?

pass-by-ref on the caller side is the same of pass-by-value:

	Point p1();
	do_something_on_point(p1);  // pass-by-value or pass-by-ref

the way it is handled depends on the called function definition:

	do_something_on_point(Point& pref)  // pass-by-ref
	{
		pref.do_somthing_else();
	}

	do_something_on_point(Point pcopy)  // pass-by-value
	{
		pref.do_somthing_else();
	}

For vector args I would pass the vector itself as ref or pointer because
current format of geomtry vectors is currently:

 vector<Geometry *> *geometries;

So tranforming it to vector<Geometry> would be a pain...
Instead I would just check for vector by-ref or by-pointer, as in:

 vector<Geometry *> *geometries;
 Geometry *deep_copy = new GeometryCollection(geometries);
 Geometry *take_ownshp = new GeometryCollection(*geometries);

Does it sound ?

--strk;

> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net] 
> > Sent: June 29, 2004 6:03 PM
> > To: Martin Davis; geos-devel@geos.refractions.net
> > Subject: Re: [geos-devel] Problems creating polygons with holes
> > 
> > 
> > Another alternative would be having pass-by-reference 
> > deep copy and pass-by-pointer take ownership.
> > Geometries taking vector could base the check on the
> > vector itself (Collections, Polygon).
> > This would avoid using the additional argument, which in some 
> > cases could require big changes (casing const pointers to non-const).
> > 
> > What do you think about this ?
> > 
> > --strk;
> > 
> > On Wed, Jun 30, 2004 at 01:28:02AM +0200, strk wrote:
> > > On Mon, Jun 28, 2004 at 03:04:21PM -0700, Martin Davis wrote:
> > > > Not sure there's any neat solution to this problem....  I think 
> > > > you'll have to go with the extra arg.
> > > > 
> > > > The other option is to just provide the copying 
> > functionality in the 
> > > > GeometryFactory, not in the basic constructors.
> > > 
> > > We'd have to modify Geometry constructors anyway, so this would not 
> > > really reduce the effort.
> > > 
> > > > Personally I would rather keep the whole thing clean, and not 
> > > > provide copying. After all, who is the client for this?  And why 
> > > > can't they learn to copy when needed?
> > > 
> > > Unfortunately copying is not always clean ...
> > > For Geometries your have the ->clone() method, while
> > > the same is not that clear for other types of constructors... 
> > > LineString - for example - take a CoordinateList, which is copied 
> > > with:
> > > 
> > points=CoordinateListFactory::internalFactory->createCoordinat
> > eList(pts)
> > > (which is ugly and very unconfortable).
> > > Polygon - another example - take vector<Geometry *>*holes as second
> > > argument, which takes a loop to be copied.
> > > 
> > > My point is that current GEOS status has not a neat copying 
> > interface 
> > > for all everyday use classes, so hiding the complexity of 
> > it might be 
> > > worth. Another point - but that is opinable - is that as a standard 
> > > way of programming any object should be destroyed by the 
> > object that 
> > > created it, for mind serenity's sake, so a non-standard behaviour 
> > > should be explicitly advertised (an additional arg would do).
> > > 
> > > See also darren problems with memory management
> > > (sure he DO can learn...)
> > > 
> > > --strk;
> > > 
> > > > 
> > > > Martin Davis, Senior Technical Architect
> > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > 
> > > > 
> > > > > -----Original Message-----
> > > > > From: strk [mailto:strk@keybit.net]
> > > > > Sent: June 28, 2004 2:56 PM
> > > > > To: Martin Davis
> > > > > Subject: Re: [geos-devel] Problems creating polygons with holes
> > > > > 
> > > > > 
> > > > > On Mon, Jun 28, 2004 at 02:21:12PM -0700, Martin Davis wrote:
> > > > > > Good point.
> > > > > > 
> > > > > > How are you going to indicate that copying is required in the
> > > > > > constructors?
> > > > > 
> > > > > I'm stuck on that part :)
> > > > > Basically I was thinking about duplicating each 
> > constructor so to 
> > > > > have a deep-copier and a ownership-taker. The two constructors 
> > > > > would be distinguished by a fake additional argument 
> > (an argument 
> > > > > needed just to distinguish them, whose value does not 
> > matter). I 
> > > > > don't like this setup, but I don't see any enlightment.
> > > > > 
> > > > > Just one more alternative is putting this logic in the
> > > > > geometryfactory which could create empty versions and then 
> > > > > 'install' actual content... this would waste some space and 
> > > > > cpu but not that much.
> > > > > 
> > > > > What do you think?
> > > > > 
> > > > > --strk;
> > > > > 
> > > > > > 
> > > > > > Martin Davis, Senior Technical Architect
> > > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > > 
> > > > > > 
> > > > > > > -----Original Message-----
> > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > Sent: June 28, 2004 2:20 PM
> > > > > > > To: Martin Davis
> > > > > > > Cc: geos-devel@geos.refractions.net
> > > > > > > Subject: Re: [geos-devel] Problems creating polygons with 
> > > > > > > holes
> > > > > > > 
> > > > > > > 
> > > > > > > On Mon, Jun 28, 2004 at 02:15:31PM -0700, Martin 
> > Davis wrote:
> > > > > > > > By pattern/support class is just fancy software 
> > engineering
> > > > > > > speak for
> > > > > > > > "make it standard and simple for the client".
> > > > > > > > 
> > > > > > > > What do you mean by "duplicating each 
> > constructor"?  Do you 
> > > > > > > > mean duplicating each method on the GeometryFactory?
> > > > > > > 
> > > > > > > Wooo.. actually I meant each Geometry constructor AND 
> > > > > > > GeometryFactory methods. GeometryFactory methods 
> > call Geometry 
> > > > > > > constructors after all so the double-approach must 
> > be present 
> > > > > > > in both places.
> > > > > > > 
> > > > > > > --strk;
> > > > > > > 
> > > > > > > > 
> > > > > > > > Martin Davis, Senior Technical Architect
> > > > > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > > > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > > > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > > > > 
> > > > > > > > 
> > > > > > > > > -----Original Message-----
> > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > Sent: June 28, 2004 1:59 PM
> > > > > > > > > To: Martin Davis
> > > > > > > > > Cc: GEOS Development List
> > > > > > > > > Subject: Re: [geos-devel] Problems creating polygons
> > > > > with holes
> > > > > > > > > 
> > > > > > > > > 
> > > > > > > > > On Mon, Jun 28, 2004 at 01:50:09PM -0700, Martin Davis 
> > > > > > > > > wrote:
> > > > > > > > > > Strk:
> > > > > > > > > > 
> > > > > > > > > > IMO the current paradigm (that of constructors taking
> > > > > > > ownership of
> > > > > > > > > > their
> > > > > > > > > > components) is the correct one.  The reason 
> > is to avoid
> > > > > > > unecessary
> > > > > > > > > > copying of argument data (which could be large).  It 
> > > > > > > > > > should
> > > > > > > > > be left up
> > > > > > > > > > to the caller to decide when and where they 
> > need to copy 
> > > > > > > > > > arguments.
> > > > > > > > > > 
> > > > > > > > > > Yes, this is a potential source of errors for 
> > clients, 
> > > > > > > > > > if
> > > > > > > > > they don't
> > > > > > > > > > understand how to properly use the library.  But the
> > > > > > > > > > alternative forces clients to tolerate extra 
> > overhead even 
> > > > > > > > > > when
> > > > > > > they don't need
> > > > > > > > > > it, which is not friendly behaviour from a library.
> > > > > > > > > > 
> > > > > > > > > > If this is really onerous, two versions of each 
> > > > > > > > > > constructor
> > > > > > > > > could be
> > > > > > > > > > provided.  Or possibly even better, a pattern 
> > & support
> > > > > > > > > class to make
> > > > > > > > > > it easy to copy arguments.
> > > > > > > > > 
> > > > > > > > > Unfortunately geos-1.0 was released with mixed
> > > > > policy, which is
> > > > > > > > > what I'm trying to conform now.
> > > > > > > > > 
> > > > > > > > > I like the idea of letting callers specify 
> > whether or not 
> > > > > > > > > to
> > > > > > > > > take ownership and so far duplicationg each 
> > constructor seems 
> > > > > > > > > the cleaner way (adding a parameter takeOwnership 
> > > > > would make all
> > > > > > > > > const correctness useless and will require
> > > > > modifications in many
> > > > > > > > > places).
> > > > > > > > > 
> > > > > > > > > What do you mean by pattern & support class ?
> > > > > > > > > 
> > > > > > > > > --strk;
> > > > > > > > > 
> > > > > > > > > 
> > > > > > > > > > 
> > > > > > > > > > Martin Davis, Senior Technical Architect
> > > > > > > > > > Vivid Solutions Inc.      www.vividsolutions.com
> > > > > > > > > > Suite #1A-2328 Government Street Victoria, 
> > B.C. V8T 5G5
> > > > > > > > > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > > > > > > > > 
> > > > > > > > > > 
> > > > > > > > > > > -----Original Message-----
> > > > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > > > Sent: June 28, 2004 12:59 PM
> > > > > > > > > > > To: Darren Carman
> > > > > > > > > > > Cc: GEOS Development List
> > > > > > > > > > > Subject: Re: [geos-devel] Problems creating polygons
> > > > > > > with holes
> > > > > > > > > > > 
> > > > > > > > > > > 
> > > > > > > > > > > I could not find the problem.
> > > > > > > > > > > Here is a reduced code exploiting the 
> > error. I'll keep 
> > > > > > > > > > > inspecting this...
> > > > > > > > > > > 
> > > > > > > > > > > BTW: I don't feel comportable in Polygon
> > > > > constructor taking
> > > > > > > > > > > ownership of passed arguments, what people think
> > > > > > > about modifying
> > > > > > > > > > > this as well ?
> > > > > > > > > > > 
> > > > > > > > > > > --strk;
> > > > > > > > > > > 
> > > > > > > > > > > //--------------------------8<-------------------
> > > > > > > > > > > 
> > > > > > > > > > > #include <geos/io.h>
> > > > > > > > > > > #include <geos/geom.h>
> > > > > > > > > > > #include <geos/util.h>
> > > > > > > > > > > 
> > > > > > > > > > > using namespace std;
> > > > > > > > > > > using namespace geos;
> > > > > > > > > > > 
> > > > > > > > > > > int main(int argc, char *argv[]) {
> > > > > > > > > > >         Coordinate c;
> > > > > > > > > > >         CoordinateList *cl1 =
> > > > > > > > > > > 
> > > > > > > 
> > CoordinateListFactory::internalFactory->createCoordinateList()
> > > > > > > ;
> > > > > > > > > > >         CoordinateList *cl2 =
> > > > > > > > > > > 
> > > > > > > 
> > CoordinateListFactory::internalFactory->createCoordinateList()
> > > > > > > ;
> > > > > > > > > > > 
> > > > > > > > > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > > > > > > > >         c.x = 339252; c.y = 1029077; cl1->add(c);
> > > > > > > > > > >         c.x = 348752; c.y = 1029077; cl1->add(c);
> > > > > > > > > > >         c.x = 346102; c.y = 1019653; cl1->add(c);
> > > > > > > > > > >         c.x = 339252; c.y = 1019302; cl1->add(c);
> > > > > > > > > > > 
> > > > > > > > > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > > > > > > > >         c.x = 340000; c.y = 1021000; cl2->add(c);
> > > > > > > > > > >         c.x = 341000; c.y = 1021000; cl2->add(c);
> > > > > > > > > > >         c.x = 341000; c.y = 1020000; cl2->add(c);
> > > > > > > > > > >         c.x = 340000; c.y = 1020000; cl2->add(c);
> > > > > > > > > > > 
> > > > > > > > > > >         try {
> > > > > > > > > > >                 GeometryFactory *gf=new
> > > > > GeometryFactory(new
> > > > > > > > > > > PrecisionModel(),0);
> > > > > > > > > > > 
> > > > > > > > > > >                 Geometry 
> > > > > > > > > > > 
> > *geom1=gf->createPolygon(gf->createLinearRing(cl1),NULL);
> > > > > > > > > > >                 cout<<"geom1: 
> > "<<geom1->toString()<<endl;
> > > > > > > > > > >                 Geometry 
> > > > > > > > > > > 
> > *geom2=gf->createPolygon(gf->createLinearRing(cl2),NULL);
> > > > > > > > > > >                 cout<<"geom2: 
> > "<<geom2->toString()<<endl;
> > > > > > > > > > >                 vector<Geometry*>*holes = new
> > > > > > > > > vector<Geometry*>(1);
> > > > > > > > > > >                 (*holes)[0] = geom2->clone();
> > > > > > > > > > >                 Geometry
> > > > > > > > > > > 
> > *geom3=gf->createPolygon(gf->createLinearRing(cl1),holes);
> > > > > > > > > > >                 cout<<"geom3: 
> > "<<geom3->toString()<<endl;
> > > > > > > > > > >                 delete cl1;
> > > > > > > > > > >                 delete cl2;
> > > > > > > > > > >         } catch (GEOSException *ge) {
> > > > > > > > > > >                 cout << "ERROR: " << 
> > > > > ge->toString() << endl;
> > > > > > > > > > >         } catch (...) {
> > > > > > > > > > >                 cout << "generic ERROR" << endl;
> > > > > > > > > > >         }
> > > > > > > > > > > }
> > > > > > > > > > > 
> > > > > > > > > > > //--------------------------8<-------------------
> > > > > > > > > > > 
> > > > > > > > > > > 
> > > > > > > > > > > On Mon, Jun 28, 2004 at 11:47:17AM +0100, Darren 
> > > > > > > > > > > Carman
> > > > > > > > > > > wrote:
> > > > > > > > > > > > #include <geos/io.h>
> > > > > > > > > > > > #include <geos/geom.h>
> > > > > > > > > > > > 
> > > > > > > > > > > > using namespace std;
> > > > > > > > > > > > using namespace geos;
> > > > > > > > > > > > 
> > > > > > > > > > > > typedef struct boundaryPt {
> > > > > > > > > > > >   double x;
> > > > > > > > > > > >   double y;
> > > > > > > > > > > > };
> > > > > > > > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > > > > > > > typedef vector<boundary>      boundaryList;
> > > > > > > > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > > > > > > > 
> > > > > > > > > > > > polygonList       ptPolygons;
> > > > > > > > > > > > 
> > > > > > > > > > > > int main(int argc, char *argv[]) {
> > > > > > > > > > > >   vector<Geometry *> polygons;
> > > > > > > > > > > >   vector<Geometry *> holes;
> > > > > > > > > > > >   int i,j,k;
> > > > > > > > > > > >   string resStr = "";
> > > > > > > > > > > > 
> > > > > > > > > > > >   boundaryPt poly1[5];
> > > > > > > > > > > >   boundaryPt hole1[5];
> > > > > > > > > > > >   boundary tmpBoundary;
> > > > > > > > > > > >   boundaryList tmpBoundaryList;
> > > > > > > > > > > >   polygonList ptPolygons;
> > > > > > > > > > > > 
> > > > > > > > > > > >   poly1[0].x = 339252;
> > > > > > > > > > > >   poly1[0].y = 1019302;
> > > > > > > > > > > >   poly1[1].x = 339252;
> > > > > > > > > > > >   poly1[1].y = 1029077;
> > > > > > > > > > > >   poly1[2].x = 348752;
> > > > > > > > > > > >   poly1[2].y = 1029077;
> > > > > > > > > > > >   poly1[3].x = 346102;
> > > > > > > > > > > >   poly1[3].y = 1019653;
> > > > > > > > > > > >   poly1[4].x = 339252;
> > > > > > > > > > > >   poly1[4].y = 1019302;
> > > > > > > > > > > > 
> > > > > > > > > > > >   hole1[0].x = 340000;
> > > > > > > > > > > >   hole1[0].y = 1020000;
> > > > > > > > > > > >   hole1[1].x = 340000;
> > > > > > > > > > > >   hole1[1].y = 1021000;
> > > > > > > > > > > >   hole1[2].x = 341000;
> > > > > > > > > > > >   hole1[2].y = 1021000;
> > > > > > > > > > > >   hole1[3].x = 341000;
> > > > > > > > > > > >   hole1[3].y = 1020000;
> > > > > > > > > > > >   hole1[4].x = 340000;
> > > > > > > > > > > >   hole1[4].y = 1020000;
> > > > > > > > > > > > 
> > > > > > > > > > > >   for (i=0; i<5; i++) {
> > > > > > > > > > > >     tmpBoundary.push_back(poly1[i]);
> > > > > > > > > > > >   }
> > > > > > > > > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > > > > > > > > >   tmpBoundary.clear();
> > > > > > > > > > > > 
> > > > > > > > > > > >   for (i=0; i<5; i++) {
> > > > > > > > > > > >     tmpBoundary.push_back(hole1[i]);
> > > > > > > > > > > >   }
> > > > > > > > > > > >   tmpBoundaryList.push_back(tmpBoundary);
> > > > > > > > > > > >   tmpBoundary.clear();
> > > > > > > > > > > > 
> > > > > > > > > > > >   ptPolygons.push_back(tmpBoundaryList);
> > > > > > > > > > > >   for(int i=0; i<
> > > > > > > > > static_cast<int>(tmpBoundaryList.size()); i++) {
> > > > > > > > > > > >     tmpBoundaryList[i].clear();
> > > > > > > > > > > >   }
> > > > > > > > > > > >   tmpBoundaryList.clear();
> > > > > > > > > > > > 
> > > > > > > > > > > > 
> > > > > > > > > > > >   try{
> > > > > > > > > > > >     GeometryFactory *gf=new GeometryFactory(new
> > > > > > > > > > > > PrecisionModel(),0);
> > > > > > > > > > > > 
> > > > > > > > > > > >     // for each outer ring create a
> > > > > CoordinateList and add
> > > > > > > > > > > all the points to it
> > > > > > > > > > > >     for(i=0; i<
> > > > > static_cast<int>(ptPolygons.size()); i++) {
> > > > > > > > > > > >       CoordinateList
> > > > > > > > > > > 
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList(
> > > > > );
> > > > > > > > > > > >       boundaryList bl = ptPolygons[i];
> > > > > > > > > > > >       boundary b = bl[0];
> > > > > > > > > > > >       cout << "Polygon " << i << endl;
> > > > > > > > > > > >       for(k=0; k< 
> > static_cast<int>(b.size()); k++) {
> > > > > > > > > > > >         cout << "Added point " << b[k].x << ',' <<
> > > > > > > > > b[k].y << endl;
> > > > > > > > > > > >         cl1->add(*(new 
> > Coordinate(b[k].x,b[k].y)));
> > > > > > > > > > > >       }
> > > > > > > > > > > > 
> > > > > > > > > > > >       // for each hole create a 
> > coordinate list like
> > > > > > > > > > > > above,
> > > > > > > > > > > create a polygon and add to a Geometry vector
> > > > > > > > > > > >       for(j=1; j< 
> > static_cast<int>(bl.size()); j++) {
> > > > > > > > > > > >         cout << "Hole " << j << endl;
> > > > > > > > > > > >         boundary b = bl[j];
> > > > > > > > > > > >         CoordinateList
> > > > > > > > > > > 
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList(
> > > > > );
> > > > > > > > > > > >         for(k=0; k< 
> > static_cast<int>(b.size()); k++) {
> > > > > > > > > > > >           cout << "Added point " << 
> > b[k].x << ',' <<
> > > > > > > > > b[k].y << endl;
> > > > > > > > > > > >           cl2->add(*(new 
> > Coordinate(b[k].x,b[k].y)));
> > > > > > > > > > > >         }
> > > > > > > > > > > >         cout << "Creating polygon for hole " <<
> > > > > j << ": "
> > > > > > > > > > > << cl2->toString() << endl;
> > > > > > > > > > > >         Geometry
> > > > > > > > > > > 
> > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NUL
> > > > > > > > > > > L);
> > > > > > > > > > > >         cout << "Geometry " << j << " : " <<
> > > > > > > > > > > geom1->toString() << endl;
> > > > > > > > > > > >         holes.push_back(geom1);
> > > > > > > > > > > >         delete cl2;
> > > > > > > > > > > >       }
> > > > > > > > > > > >       // create a polygon from the 1st 
> > > > > > > > > > > > CoordinateList
> > > > > > > > > and the holes
> > > > > > > > > > > >       cout << "Creating polygon " << i << ": " <<
> > > > > > > > > > > cl1->toString() << endl;
> > > > > > > > > > > >       Geometry
> > > > > > > > > > > 
> > > > > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);   
> > > > > > > > > > >                                           
> > > > > > > > > > > >       cout << "test " << endl;
> > > > > > > > > > > >       cout << "Geometry " << i << " : " <<
> > > > > > > > > > > geom2->toString() << endl;
> > > > > > > > > > > > 
> > > > > > > > > > > >       // save this polygon in another vector
> > > > > > > > > > > >       cout << "Adding polygon " << i << endl;
> > > > > > > > > > > >       polygons.push_back(geom2);
> > > > > > > > > > > >       delete cl1;
> > > > > > > > > > > >     }
> > > > > > > > > > > >     cout << "Creating multi-polygon" << endl;
> > > > > > > > > > > >     // when all done create a MultiPolygon object
> > > > > > > > > > > >     Geometry 
> > *geom3=gf->createMultiPolygon(&polygons);
> > > > > > > > > > > >     cout << "Creating string" << endl;
> > > > > > > > > > > >     resStr = geom3->toString();
> > > > > > > > > > > > 
> > > > > > > > > > > >     //clean up
> > > > > > > > > > > >     delete geom3;
> > > > > > > > > > > >     delete gf;
> > > > > > > > > > > >   }
> > > > > > > > > > > >   catch (GEOSException *ge) {
> > > > > > > > > > > >     cout << "ERROR: " << ge->toString() << endl;
> > > > > > > > > > > >   }
> > > > > > > > > > > >   cout << resStr << endl;
> > > > > > > > > > > > }
> > > > > > > > > > > > 
> > > > > > > > > > > > -----Original Message-----
> > > > > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > > > > Sent: 28 June 2004 11:28
> > > > > > > > > > > > To: GEOS Development List
> > > > > > > > > > > > Subject: Re: [geos-devel] Problems creating
> > > > > polygons with
> > > > > > > > > > > > holes
> > > > > > > > > > > > 
> > > > > > > > > > > > 
> > > > > > > > > > > > Can you produce a neter code exploiting the bug
> > > > > ? I mean a
> > > > > > > > > > > > .cpp file I can compile and run and debug :)
> > > > > > > > > > > > 
> > > > > > > > > > > > -strk;
> > > > > > > > > > > > 
> > > > > > > > > > > > On Mon, Jun 28, 2004 at 11:05:22AM +0100, Darren
> > > > > > > Carman wrote:
> > > > > > > > > > > > > defs:
> > > > > > > > > > > > > typedef struct boundaryPt {
> > > > > > > > > > > > >   double x;
> > > > > > > > > > > > >   double y;
> > > > > > > > > > > > > };
> > > > > > > > > > > > > typedef vector<boundaryPt>    boundary;
> > > > > > > > > > > > > typedef vector<boundary>      boundaryList;
> > > > > > > > > > > > > typedef vector<boundaryList>  polygonList;
> > > > > > > > > > > > > 
> > > > > > > > > > > > > class members used:
> > > > > > > > > > > > >   polygonList       ptPolygons;
> > > > > > > > > > > > >   string tmpStr;
> > > > > > > > > > > > >   string errMsg;
> > > > > > > > > > > > > 
> > > > > > > > > > > > > class function:
> > > > > > > > > > > > > string c_polygon_gml::WKTString(void) {
> > > > > > > > > > > > >   TRACE_FUNC("c_polygon_gml::WKTString");
> > > > > > > > > > > > >   vector<Geometry *> polygons;
> > > > > > > > > > > > >   vector<Geometry *> holes;
> > > > > > > > > > > > >   int i,j,k;
> > > > > > > > > > > > >   string resStr = "";
> > > > > > > > > > > > > 
> > > > > > > > > > > > >   try{
> > > > > > > > > > > > >     GeometryFactory *gf=new GeometryFactory(new
> > > > > > > > > > > PrecisionModel(),0);
> > > > > > > > > > > > > 
> > > > > > > > > > > > >     // for each outer ring create a 
> > CoordinateList 
> > > > > > > > > > > > > and
> > > > > > > > > > > add all the points to it
> > > > > > > > > > > > >     for(i=0; i<
> > > > > > > static_cast<int>(ptPolygons.size()); i++) {
> > > > > > > > > > > > >       CoordinateList
> > > > > > > > > > > 
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > *cl1=CoordinateListFactory::internalFactory->createCoordinateList(
> > > > > );
> > > > > > > > > > > > >       boundaryList bl = ptPolygons[i];
> > > > > > > > > > > > >       boundary b = bl[0];
> > > > > > > > > > > > >       TRACE_OUTPUT("Polygon " << i);
> > > > > > > > > > > > >       for(k=0; k< 
> > static_cast<int>(b.size()); k++) {
> > > > > > > > > > > > >         TRACE_OUTPUT("Added point " << 
> > b[k].x << 
> > > > > > > > > > > > > ','
> > > > > > > > > << b[k].y);
> > > > > > > > > > > > >         cl1->add(*(new 
> > Coordinate(b[k].x,b[k].y)));
> > > > > > > > > > > > >       }
> > > > > > > > > > > > > 
> > > > > > > > > > > > >       // for each hole create a coordinate list 
> > > > > > > > > > > > > like
> > > > > > > > > > > above, create a polygon and add to a Geometry vector
> > > > > > > > > > > > >       for(j=1; j< 
> > static_cast<int>(bl.size()); j++) {
> > > > > > > > > > > > >         TRACE_OUTPUT("Hole " << j);
> > > > > > > > > > > > >         boundary b = bl[j];
> > > > > > > > > > > > >         CoordinateList
> > > > > > > > > > > 
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > *cl2=CoordinateListFactory::internalFactory->createCoordinateList(
> > > > > );
> > > > > > > > > > > > >         for(k=0; k< 
> > static_cast<int>(b.size()); k++) {
> > > > > > > > > > > > >           TRACE_OUTPUT("Added point " 
> > << b[k].x <<
> > > > > > > > > ',' << b[k].y);
> > > > > > > > > > > > >           cl2->add(*(new 
> > Coordinate(b[k].x,b[k].y)));
> > > > > > > > > > > > >         }
> > > > > > > > > > > > >         TRACE_OUTPUT("Creating polygon for
> > > > > hole " << j
> > > > > > > > > > > > > <<
> > > > > > > > > > > ": " << cl2->toString());
> > > > > > > > > > > > >         Geometry
> > > > > > > > > > > 
> > *geom1=gf->createPolygon(gf->createLinearRing(cl2),NUL
> > > > > > > > > > > L);
> > > > > > > > > > > > >         TRACE_OUTPUT("Geometry " << j 
> > << " : " <<
> > > > > > > > > > > geom1->toString());
> > > > > > > > > > > > >         holes.push_back(geom1);
> > > > > > > > > > > > >         delete cl2;
> > > > > > > > > > > > >       }
> > > > > > > > > > > > >       // create a polygon from the 1st 
> > > > > > > > > > > > > CoordinateList
> > > > > > > > > > > > > and
> > > > > > > > > > > the holes
> > > > > > > > > > > > >       TRACE_OUTPUT("Creating polygon " 
> > << i << ": 
> > > > > > > > > > > > > " <<
> > > > > > > > > > > cl1->toString());
> > > > > > > > > > > > >       Geometry
> > > > > > > > > > > 
> > > > > *geom2=gf->createPolygon(gf->createLinearRing(cl1),&holes);
> > > > > > > > > > > > >       TRACE_OUTPUT("test ");
> > > > > > > > > > > > >       TRACE_OUTPUT("Geometry " << i << " : " <<
> > > > > > > > > > > geom2->toString());
> > > > > > > > > > > > > 
> > > > > > > > > > > > >       // save this polygon in another vector
> > > > > > > > > > > > >       TRACE_OUTPUT("Adding polygon " << i);
> > > > > > > > > > > > >       polygons.push_back(geom2);
> > > > > > > > > > > > >       delete cl1;
> > > > > > > > > > > > >     }
> > > > > > > > > > > > >     TRACE_OUTPUT("Creating multi-polygon");
> > > > > > > > > > > > >     // when all done create a 
> > MultiPolygon object
> > > > > > > > > > > > >     Geometry 
> > *geom3=gf->createMultiPolygon(&polygons);
> > > > > > > > > > > > >     TRACE_OUTPUT("Creating string");
> > > > > > > > > > > > >     resStr = geom3->toString();
> > > > > > > > > > > > > 
> > > > > > > > > > > > >     //clean up
> > > > > > > > > > > > >     delete geom3;
> > > > > > > > > > > > >     delete gf;
> > > > > > > > > > > > >   }
> > > > > > > > > > > > >   catch (GEOSException *ge) {
> > > > > > > > > > > > >     errMsg = ge->toString();
> > > > > > > > > > > > >   }
> > > > > > > > > > > > >   return resStr;
> > > > > > > > > > > > > }
> > > > > > > > > > > > > 
> > > > > > > > > > > > > XML read in by class and stored in ptPolygons: 
> > > > > > > > > > > > > <?xml version="1.0" encoding="UTF-8"?> 
> > > > > > > > > > > > > <AreaDefinition> <GDSRequest> <query>
> > > > > > > > > > > > > <AreaQuery outputContent="public">
> > > > > > > > > > > > > <queryArea>
> > > > > > > > > > > > > <Polygon srsName="osgb:BNG">
> > > > > > > > > > > > > <outerBoundaryIs>
> > > > > > > > > > > > > <LinearRing>
> > > > > > > > > > > > > <coordinates>
> > > > > > > > > > > > > 339252,1019302
> > > > > > > > > > > > > 339252,1029077
> > > > > > > > > > > > > 348752,1029077
> > > > > > > > > > > > > 346102,1019653
> > > > > > > > > > > > > 339252,1019302
> > > > > > > > > > > > > </coordinates>
> > > > > > > > > > > > > </LinearRing>
> > > > > > > > > > > > > </outerBoundaryIs>
> > > > > > > > > > > > > <innerBoundaryIs>
> > > > > > > > > > > > > <LinearRing>
> > > > > > > > > > > > > <coordinates>
> > > > > > > > > > > > > 340000,1020000
> > > > > > > > > > > > > 340000,1021000
> > > > > > > > > > > > > 341000,1021000
> > > > > > > > > > > > > 341000,1020000
> > > > > > > > > > > > > 340000,1020000
> > > > > > > > > > > > > </coordinates>
> > > > > > > > > > > > > </LinearRing>
> > > > > > > > > > > > > </innerBoundaryIs>
> > > > > > > > > > > > > </Polygon>
> > > > > > > > > > > > > </queryArea>
> > > > > > > > > > > > > </AreaQuery>
> > > > > > > > > > > > > </query>
> > > > > > > > > > > > > </GDSRequest>
> > > > > > > > > > > > > </AreaDefinition>
> > > > > > > > > > > > > 
> > > > > > > > > > > > > Output:
> > > > > > > > > > > > > TR: TRACE 
> > ENTRY:c_polygon_gml::WKTString line 168 
> > > > > > > > > > > > > file
> > > > > > > > > > > c_polygon_gml.cpp
> > > > > > > > > > > > > TR:   Polygon 0
> > > > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > > > > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > > > > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > > > TR:   Hole 1
> > > > > > > > > > > > > TR:   Added point 340000,1.02e+06
> > > > > > > > > > > > > TR:   Added point 340000,1.021e+06
> > > > > > > > > > > > > TR:   Added point 341000,1.021e+06
> > > > > > > > > > > > > TR:   Added point 341000,1.02e+06
> > > > > > > > > > > > > TR:   Added point 340000,1.02e+06
> > > > > > > > > > > > > TR:   Creating polygon for hole 1: 
> > > > > > > > > > > (340000,1.02e+06,1.7e-308) 
> > (340000,1.021e+06,1.7e-308)
> > > > > > > > > > > (341000,1.021e+06,1.7e-308) 
> > (341000,1.02e+06,1.7e-308)
> > > > > > > > > > > (340000,1.02e+06,1.7e-308)
> > > > > > > > > > > > > TR:   Geometry 1 : POLYGON 
> > ((340000.0000000000000000 
> > > > > > > > > > > 1020000.0000000000000000, 340000.0000000000000000 
> > > > > > > > > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > > > > > > > > 1021000.0000000000000000, 341000.0000000000000000 
> > > > > > > > > > > 1020000.0000000000000000, 340000.0000000000000000
> > > > > > > > > > > 1020000.0000000000000000))
> > > > > > > > > > > > > TR:   Creating polygon 0: 
> > > > > (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > > (339252,1.02908e+06,1.7e-308)
> > > > > (348752,1.02908e+06,1.7e-308)
> > > > > > > > > > > (346102,1.01965e+06,1.7e-308) 
> > > > > > > > > > > (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > > > > TR:   test
> > > > > > > > > > > > > Segmentation fault
> > > > > > > > > > > > > 
> > > > > > > > > > > > > Output when the hole is removed:
> > > > > > > > > > > > > TR: TRACE 
> > ENTRY:c_polygon_gml::WKTString line 168 
> > > > > > > > > > > > > file
> > > > > > > > > > > c_polygon_gml.cpp
> > > > > > > > > > > > > TR:   Polygon 0
> > > > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > > > TR:   Added point 339252,1.02908e+06
> > > > > > > > > > > > > TR:   Added point 348752,1.02908e+06
> > > > > > > > > > > > > TR:   Added point 346102,1.01965e+06
> > > > > > > > > > > > > TR:   Added point 339252,1.0193e+06
> > > > > > > > > > > > > TR:   Creating polygon 0: 
> > > > > (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > > (339252,1.02908e+06,1.7e-308)
> > > > > (348752,1.02908e+06,1.7e-308)
> > > > > > > > > > > (346102,1.01965e+06,1.7e-308) 
> > > > > > > > > > > (339252,1.0193e+06,1.7e-308)
> > > > > > > > > > > > > TR:   test
> > > > > > > > > > > > > TR:   Geometry 0 : POLYGON 
> > ((339252.0000000000000000 
> > > > > > > > > > > 1019302.0000000000000000, 339252.0000000000000000 
> > > > > > > > > > > 1029077.0000000000000000, 348752.0000000000000000 
> > > > > > > > > > > 1029077.0000000000000000, 346102.0000000000000000 
> > > > > > > > > > > 1019653.0000000000000000, 339252.0000000000000000
> > > > > > > > > > > 1019302.0000000000000000))
> > > > > > > > > > > > > TR:   Adding polygon 0
> > > > > > > > > > > > > TR:   Creating multi-polygon
> > > > > > > > > > > > > TR:   Creating string
> > > > > > > > > > > > > TR: TRACE EXIT:c_polygon_gml::WKTString
> > > > > > > > > > > > > ERROR:
> > > > > > > > > > > > > WTF format
> > > > > > > > > > > > > MULTIPOLYGON (((339252.0000000000000000
> > > > > > > > > > > > > 1019302.0000000000000000, 
> > 339252.0000000000000000 
> > > > > > > > > > > > > 1029077.0000000000000000, 
> > 348752.0000000000000000 
> > > > > > > > > > > > > 1029077.0000000000000000, 
> > 346102.0000000000000000 
> > > > > > > > > > > > > 1019653.0000000000000000, 
> > 339252.0000000000000000 
> > > > > > > > > > > > > 1019302.0000000000000000)))
> > > > > > > > > > > > > 
> > > > > > > > > > > > > 
> > > > > > > > > > > > > -----Original Message-----
> > > > > > > > > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > > > > > > > > Sent: 28 June 2004 11:01
> > > > > > > > > > > > > To: GEOS Development List
> > > > > > > > > > > > > Subject: Re: [geos-devel] Problems creating 
> > > > > > > > > > > > > polygons
> > > > > > > > > with holes
> > > > > > > > > > > > > 
> > > > > > > > > > > > > 
> > > > > > > > > > > > > Can you send the test code ?
> > > > > > > > > > > > > There are currently no known bug ... --strk;
> > > > > > > > > > > > > 
> > > > > > > > > > > > > On Mon, Jun 28, 2004 at 10:15:45AM +0100,
> > > > > Darren Carman
> > > > > > > > > > > > > wrote:
> > > > > > > > > > > > > > Hi all,
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > I am creating polygons with holes and want
> > > > > to use geos
> > > > > > > > > > > to allow me
> > > > > > > > > > > > > > to output them in WKT.
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > A polygon without a hole works fine, but as
> > > > > soon as I
> > > > > > > > > > > add a hole I
> > > > > > > > > > > > > > get a segmentation fault after calling the
> > > > > > > > > > > createPolygon function
> > > > > > > > > > > > > > (GeometryFactory) and trying to run 
> > toString on
> > > > > > > > > that polygon.
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > I am using version 1.0.
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > I have tried getting the latest 
> > version from CVS 
> > > > > > > > > > > > > > but
> > > > > > > > > > > this causes a
> > > > > > > > > > > > > > segmentation fault to occur while adding the
> > > > > > > 5th polygon
> > > > > > > > > > > > > > coordinate to the CoordinateList 
> > (there are only 
> > > > > > > > > > > > > > 4
> > > > > > > > > > > coordinates in
> > > > > > > > > > > > > > the test polygon, the 5th being the first
> > > > > one repeated
> > > > > > > > > > > - I tried
> > > > > > > > > > > > > > making it 6 to see if it was a problem with 
> > > > > > > > > > > > > > closing
> > > > > > > > > > > > > > the polygon but I still got a segmentation 
> > > > > fault while
> > > > > > > adding the 5th).
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > Is there a fix for this, or has anyone come 
> > > > > > > > > > > > > > accross
> > > > > > > > > > > > > > it?
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > Thanks in advance,
> > > > > > > > > > > > > > Darren
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > "The information in this e-mail and any
> > > > > attachment is
> > > > > > > > > > > confidential
> > > > > > > > > > > > > > and may be privileged. If you have 
> > received this
> > > > > > > > > > > > > > e-mail
> > > > > > > > > > > in error,
> > > > > > > > > > > > > > please delete it immediately and destroy
> > > > > any copies on
> > > > > > > > > > > > > > your system. You should not retain, 
> > copy or use 
> > > > > > > > > > > > > > this
> > > > > > > > > e-mail for any
> > > > > > > > > > > > > > purpose, nor disclose all or any part of
> > > > > its content
> > > > > > > > > > > > > > to
> > > > > > > > > > > any other
> > > > > > > > > > > > > > person. Opinions expressed in this e-mail may 
> > > > > > > > > > > > > > not be
> > > > > > > > > > > endorsed by
> > > > > > > > > > > > > > the company and unless explicitly indicated, 
> > > > > > > > > > > > > > this
> > > > > > > > > > > e-mail shall not
> > > > > > > > > > > > > > form part of any binding agreement".
> > > > > > > > > > > > > > 
> > > > > > > > > > > > > > 
> > _______________________________________________
> > > > > > > > > > > > > > geos-devel mailing list
> > > > > > > > > > > > > > geos-devel@geos.refractions.net
> > > > > > > > > > > > > > 
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > 
> > > > > > > > > > _______________________________________________
> > > > > > > > > > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > > > > > > > > > 
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > 
> > > > > > > > > > _______________________________________________
> > > > > > > > > > > > > geos-devel mailing list
> > > > > geos-devel@geos.refractions.net
> > > > > > > > > > > > > 
> > > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > 
> > > > > > > > > _______________________________________________
> > > > > > > > > > > > geos-devel mailing list 
> > > > > > > > > > > > geos-devel@geos.refractions.net
> > > > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > 
> > > > > > > > > _______________________________________________
> > > > > > > > > > > > geos-devel mailing list 
> > geos-devel@geos.refractions.net
> > > > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > 
> > > > > > > > _______________________________________________
> > > > > > > > > > > geos-devel mailing list 
> > > > > > > > > > > geos-devel@geos.refractions.net 
> > > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-deve
> > > > > 
> > > > > > > > l
> > > > > > > > > > > 
> > > > > > > > > > _______________________________________________
> > > > > > > > > > geos-devel mailing list 
> > geos-devel@geos.refractions.net 
> > > > > > > > > > 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > > > > > > 
> > > > > > > 
> > > > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 

From strk at keybit.net  Wed Jun 30 15:49:14 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] GeometryFactory argument in Geometry constructors
Message-ID: <20040630194914.GA76624@freek.keybit.net>

Another element which should be take part of the next API
is GeoemtryFactory. GEOS-1.0 did not have geom constructors
taking GeometryFactory (did have PrecisionModel and SRID which
the constructors used to build a new Factory). Next GEOS will
have GeometryFactory as an argument to the constructor (so to
have PrecisionModel and SRID already defined there).

Would the factory element of each Geometry be better a pointer
to external resource or a owned copy ? It is currently a copy
so I was wondering. If we need both behaviour with this too
it will make 4 constructor versions for each geometry :!!

Just a note: when building a geometry with no defined factory
current behaviour is to create a new Factory (which would leak
unless deleted at geometry destruction time). If we decide to
go with pointer-to-external-object we could use an
internalGeometryFactory in thee cases.

--strk;


From strk at keybit.net  Wed Jun 30 16:58:29 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] GeometryFactory argument in Geometry constructors
In-Reply-To: <20040630194914.GA76624@freek.keybit.net>
References: <20040630194914.GA76624@freek.keybit.net>
Message-ID: <20040630205829.GA77353@freek.keybit.net>

I ask and answer myself :)
I've removed GeometryConstrauctor automatic copy from
Geometry constructors. This want change the way applications
will call them.

Now on with the ref/pointer switch for ownership...

--strk;

On Wed, Jun 30, 2004 at 09:49:14PM +0200, strk wrote:
> Another element which should be take part of the next API
> is GeoemtryFactory. GEOS-1.0 did not have geom constructors
> taking GeometryFactory (did have PrecisionModel and SRID which
> the constructors used to build a new Factory). Next GEOS will
> have GeometryFactory as an argument to the constructor (so to
> have PrecisionModel and SRID already defined there).
> 
> Would the factory element of each Geometry be better a pointer
> to external resource or a owned copy ? It is currently a copy
> so I was wondering. If we need both behaviour with this too
> it will make 4 constructor versions for each geometry :!!
> 
> Just a note: when building a geometry with no defined factory
> current behaviour is to create a new Factory (which would leak
> unless deleted at geometry destruction time). If we decide to
> go with pointer-to-external-object we could use an
> internalGeometryFactory in thee cases.
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Wed Jun 30 17:21:42 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] CoordinateListFactory
Message-ID: <20040630212142.GB77353@freek.keybit.net>

I've seen jts does not define a CoordinateListFactory
What is the reason to have it in GEOS ?

GOES has CoordinateList BasicCoordinateList and Factories
for both...

I'm trying to make life easier ...

--strk;

From strk at keybit.net  Wed Jun 30 18:05:37 2004
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:29 2007
Subject: [geos-devel] Problems creating polygons with holes
In-Reply-To: <C858B7EA73E00F4F97CBD68FA8BE7EC31B91C8@itl-serv1.infoterra-global.com>
References: <C858B7EA73E00F4F97CBD68FA8BE7EC31B91C8@itl-serv1.infoterra-global.com>
Message-ID: <20040630220537.GC77353@freek.keybit.net>

On Wed, Jun 30, 2004 at 04:13:58PM +0100, Darren Carman wrote:
> The way we deal with them holes can contain polygons, which in turn can contain holes, etc. and we still treat holes as polygons -- hence my confusion.
> 
> If you would like to use my code as another one of your examples in the distribution - for polygons with holes - then feel free (if you think it may help someone else).

Thanks, but I belive doc/example.cpp already contains a polygon with a hole.
--strk;

> 
> Here is the working code:
> 
> #include <geos/io.h>
> #include <geos/geom.h>
> 
> using namespace std;
> using namespace geos;
> 
> typedef struct boundaryPt {
>   double x;
>   double y;
> };
> typedef vector<boundaryPt>    boundary;
> typedef vector<boundary>      boundaryList;
> typedef vector<boundaryList>  polygonList;
> 
> 
> void createPolys(polygonList &polys) {
>   int i;
> 
>   boundaryPt poly1[5];
>   boundaryPt hole1[5];
>   boundary tmpBoundary;
>   boundaryList tmpBoundaryList;
>   polygonList ptPolygons;
> 
>   poly1[0].x = 339252; poly1[0].y = 1019302;
>   poly1[1].x = 339252; poly1[1].y = 1029077;
>   poly1[2].x = 348752; poly1[2].y = 1029077;
>   poly1[3].x = 346102; poly1[3].y = 1019653;
>   poly1[4].x = 339252; poly1[4].y = 1019302;
> 
>   hole1[0].x = 340000; hole1[0].y = 1020000;
>   hole1[1].x = 340000; hole1[1].y = 1021000;
>   hole1[2].x = 341000; hole1[2].y = 1021000;
>   hole1[3].x = 341000; hole1[3].y = 1020000;
>   hole1[4].x = 340000; hole1[4].y = 1020000;
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(poly1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   for (i=0; i<5; i++) {
>     tmpBoundary.push_back(hole1[i]);
>   }
>   tmpBoundaryList.push_back(tmpBoundary);
>   tmpBoundary.clear();
> 
>   polys.push_back(tmpBoundaryList);
>   for(int i=0; i< static_cast<int>(tmpBoundaryList.size()); i++) {
>     tmpBoundaryList[i].clear();
>   }
>   tmpBoundaryList.clear();
> }
> 
> 
> int main(int argc, char *argv[]) {
>   vector<Geometry *> *polygons;
>   vector<LinearRing *> *holes;
>   int i,j,k;
>   string resStr = "";
>   polygonList ptPolygons;
> 
>   createPolys(ptPolygons);
>   try{
>     GeometryFactory *gf=new GeometryFactory(new PrecisionModel(),0);
> 
>     // for each outer ring create a CoordinateList and add all the points to it
>     polygons = new vector<Geometry *>();
>     for(i=0; i< static_cast<int>(ptPolygons.size()); i++) {
>       CoordinateList *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
>       boundaryList bl = ptPolygons[i];
>       boundary b = bl[0];
>       cout << "Polygon " << i << endl;
>       for(k=0; k< static_cast<int>(b.size()); k++) {
>         cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>         cl1->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
>       }
> 
>       // for each hole create a coordinate list like above, create a polygon and add to a Geometry vector
>       holes = new vector<LinearRing *>();
>       for(j=1; j< static_cast<int>(bl.size()); j++) {
>         cout << "Hole " << j << endl;
>         boundary b = bl[j];
>         CoordinateList *cl2=CoordinateListFactory::internalFactory->createCoordinateList();
>         for(k=0; k< static_cast<int>(b.size()); k++) {
>           cout << "Added point " << b[k].x << ',' << b[k].y << endl;
>           cl2->add(*(new Coordinate(b[k].x,b[k].y,0.0)));
>         }
>         cout << "Creating polygon for hole " << j << ": " << cl2->toString() << endl;
>         //LinearRing *lin1=(LinearRing *)gf->createPolygon(gf->createLinearRing(cl2),NULL);
>         LinearRing *lin1=gf->createLinearRing(cl2);
>         cout << "Geometry " << j << " : " << lin1->toString() << endl;
>         holes->push_back(lin1);
>         delete cl2;
>       }
>       // create a polygon from the 1st CoordinateList and the holes
>       cout << "Creating polygon " << i << ": " << cl1->toString() << endl;
>       Geometry *geom1=(Geometry *)gf->createPolygon(gf->createLinearRing(cl1),(vector<Geometry *> *)holes);
>       cout << "Geometry " << i << " : " << geom1->toString() << endl;
> 
>       // save this polygon in another vector
>       cout << "Adding polygon " << i << endl;
>       polygons->push_back(geom1);
>       delete cl1;
>     }
>     cout << "Creating multi-polygon" << endl;
>     // when all done create a MultiPolygon object
>     Geometry *geom2=gf->createMultiPolygon((vector<Geometry *> *)polygons);
>     cout << "Creating string" << endl;
>     resStr = geom2->toString();
> 
>     //clean up
>     delete geom2;
>     delete gf;
>   }
>   catch (GEOSException *ge) {
>     cout << "ERROR: " << ge->toString() << endl;
>   }
>   cout << resStr << endl;
> }
> 
> Cheers,
> Darren
> 
> -----Original Message-----
> From: chodgson@refractions.net [mailto:chodgson@refractions.net]
> Sent: 30 June 2004 15:55
> To: GEOS Development List
> Subject: RE: [geos-devel] Problems creating polygons with holes
> 
> 
> > I had assumed that the holes were treated as polygons as well :(
> 
> If polygon holes were defined by polygons, then your holes could have holes (which in turn could have holes...)!
> 
> :)
> Chris
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> "The information in this e-mail and any attachment is confidential and may be privileged. If you have received this e-mail in error, please delete it immediately and destroy any copies on your system. You should not retain, copy or use this e-mail for any purpose, nor disclose all or any part of its content to any other person.
> Opinions expressed in this e-mail may not be endorsed by the company and unless explicitly indicated, this e-mail shall not form part of any binding agreement".
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

