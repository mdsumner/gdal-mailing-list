From geos-trac at osgeo.org  Wed Feb  1 07:20:21 2017
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Feb 2017 15:20:21 -0000
Subject: [geos-devel] [GEOS] #638: Recommend a static_cast around assert
	strings
In-Reply-To: <045.940cc187df987db690e26110886e1a54@osgeo.org>
References: <045.940cc187df987db690e26110886e1a54@osgeo.org>
Message-ID: <060.1602abc763c24ebdc3c465685d3984c6@osgeo.org>

#638: Recommend a static_cast around assert strings
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.7.0
Component:  Default     |     Version:  3.3.8
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by goatbar):

 https://github.com/libgeos/libgeos/pull/77

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/638#comment:14>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Feb  1 09:29:05 2017
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Feb 2017 17:29:05 -0000
Subject: [geos-devel] [GEOS] #638: Recommend a static_cast around assert
	strings
In-Reply-To: <045.940cc187df987db690e26110886e1a54@osgeo.org>
References: <045.940cc187df987db690e26110886e1a54@osgeo.org>
Message-ID: <060.4f8d479ab02b9e2ab50166756891398c@osgeo.org>

#638: Recommend a static_cast around assert strings
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.7.0
Component:  Default     |     Version:  3.3.8
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"4331" 4331]:
 {{{
 #!CommitTicketReference repository="" revision="4331"
 Add static_assert<bool> to strings inside of assert calls

 Allows compiling with -Wpointer-bool-conversion.

 Patch by Kurt Schwehr <schwehr at google.com>
 Closes #638
 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/638#comment:15>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Feb  1 09:30:59 2017
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Feb 2017 17:30:59 -0000
Subject: [geos-devel] [GEOS] #638: Recommend a static_cast around assert
	strings
In-Reply-To: <045.940cc187df987db690e26110886e1a54@osgeo.org>
References: <045.940cc187df987db690e26110886e1a54@osgeo.org>
Message-ID: <060.1858d8d1f4430b4d9636e3325ef8ff67@osgeo.org>

#638: Recommend a static_cast around assert strings
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.7.0
Component:  Default     |     Version:  3.3.8
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 In [changeset:"4332" 4332]:
 {{{
 #!CommitTicketReference repository="" revision="4332"
 Add static_assert<bool> to strings inside of assert calls

 Allows compiling with -Wpointer-bool-conversion.

 Patch by Kurt Schwehr <schwehr at google.com>
 Closes #638
 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/638#comment:16>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Feb  1 11:35:47 2017
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Feb 2017 19:35:47 -0000
Subject: [geos-devel] [GEOS] #809: Test failure with MinimumClearanceLine
	with geos 3.6.1
Message-ID: <045.d1d2bf1bc480902669f0b5bcc174677f@osgeo.org>

#809: Test failure with MinimumClearanceLine with geos 3.6.1
------------------------+----------------------------------
 Reporter:  goatbar     |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.6.1
Component:  Default     |    Version:  3.6.0
 Severity:  Unassigned  |   Keywords:  MinimumClearanceLine
------------------------+----------------------------------
 I'm getting a failure that I've yet to understand with the source from
 3.6.1.  I'm in a custom linux env.  Before I try going back to ubuntu
 14.04 or a mac, anyone have an idea what is going on?

 {{{
 geos_unittest capi::GEOSMinimumClearance
 ===============================
   GEOS Test Suite Application
 ===============================
 input:
 0106000000010000000103000000010000001a00000035d42824992d5cc01b834e081dca404073b9c150872d5cc03465a71fd4c940400ec00644882d5cc03b8a73d4d1c94040376dc669882d5cc0bf9cd9aed0c940401363997e892d5cc002f4fbfecdc94040ca4e3fa88b2d5cc0a487a1d5c9c940408f1ce90c8c2d5cc0698995d1c8c94040fab836548c2d5cc0bd175fb4c7c940409f1f46088f2d5cc0962023a0c2c940407b15191d902d5cc068041bd7bfc940400397c79a912d5cc0287d21e4bcc940403201bf46922d5cc065e3c116bbc940409d9d0c8e922d5cc0060fd3beb9c940400ef7915b932d5cc09012bbb6b7c940404fe61f7d932d5cc0e4a08499b6c94040fc71fbe5932d5cc0ea9106b7b5c94040eaec6470942d5cc0c2323674b3c94040601dc70f952d5cc043588d25acc94040aea06989952d5cc03ecf9f36aac94040307f85cc952d5cc0e5eb32fca7c94040dd0a6135962d5cc01b615111a7c9404048a7ae7c962d5cc00a2aaa7ea5c94040f4328ae5962d5cc05eb87361a4c94040c49448a2972d5cc04d81cccea2c940407c80eecb992d5cc06745d4449fc9404035d42824992d5cc01b834e081dca4040
 expected: LINESTRING (-112.712119 33.575919, -112.712127 33.575885)
 NOTICE: ParseException: Invalid HEX char

 capi::GEOSMinimumClearance: [4=F]input: POLYGON EMPTY
 expected: LINESTRING EMPTY
 .

 ---> group: capi::GEOSMinimumClearance, test: test<4>
      problem: assertion failed
      failed assertion: "input must not be null: GEOSGeomFromHEX_buf"
 }}}

 My tweaked test setup:
 {{{#!c++
         void testClearance(const std::string & wkx_input,
                            const std::string & wkx_expected,
                            double clearance) {

             std::cerr << "input: " << wkx_input << "\n";
             std::cerr << "expected: " << wkx_expected << "\n";
             GEOSGeometry* input = NULL;
             GEOSGeometry* expected_result = NULL;
             if (wkx_input[0] == '0') {
                 input = GEOSGeomFromHEX_buf((const unsigned char*)
 wkx_input.c_str(), wkx_input.length());
                 ensure("input must not be null: GEOSGeomFromHEX_buf",
 input != NULL);
             } else {
                 input = GEOSGeomFromWKT(wkx_input.c_str());
                 ensure("input must not be null: GEOSGeomFromWKT", input !=
 NULL);
             }

             if (wkx_expected[0] == '0')
                 expected_result = GEOSGeomFromHEX_buf((const unsigned
 char*) wkx_expected.c_str(), wkx_expected.length());
             else
                 expected_result = GEOSGeomFromWKT(wkx_expected.c_str());

             double d;
             int error = GEOSMinimumClearance(input, &d);

             ensure(!error);
             if (clearance == std::numeric_limits<double>::infinity()) {
                 ensure(d == clearance);
             } else {
                 ensure_equals("clearance", d, clearance, 1e-12);
             }

             GEOSGeometry* result = GEOSMinimumClearanceLine(input);
             ensure(result != NULL);
             ensure_equals(1, GEOSEquals(result, expected_result));

             GEOSGeom_destroy(input);
             GEOSGeom_destroy(expected_result);
             GEOSGeom_destroy(result);
         }
 }}}

 Poking around with gdal built against 3.5.0:

 {{{#!python
 geom =
 ogr.CreateGeometryFromWkb("""\x01\x06\x00\x00\x00\x01\x00\x00\x00\x01\x03\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x35\xd4\x28\x24\x99\x2d\x5c\xc0\x1b\x83\x4e\x08\x1d\xca\x40\x40\x73\xb9\xc1\x50\x87\x2d\x5c\xc0\x34\x65\xa7\x1f\xd4\xc9\x40\x40\x0e\xc0\x06\x44\x88\x2d\x5c\xc0\x3b\x8a\x73\xd4\xd1\xc9\x40\x40\x37\x6d\xc6\x69\x88\x2d\x5c\xc0\xbf\x9c\xd9\xae\xd0\xc9\x40\x40\x13\x63\x99\x7e\x89\x2d\x5c\xc0\x02\xf4\xfb\xfe\xcd\xc9\x40\x40\xca\x4e\x3f\xa8\x8b\x2d\x5c\xc0\xa4\x87\xa1\xd5\xc9\xc9\x40\x40\x8f\x1c\xe9\x0c\x8c\x2d\x5c\xc0\x69\x89\x95\xd1\xc8\xc9\x40\x40\xfa\xb8\x36\x54\x8c\x2d\x5c\xc0\xbd\x17\x5f\xb4\xc7\xc9\x40\x40\x9f\x1f\x46\x08\x8f\x2d\x5c\xc0\x96\x20\x23\xa0\xc2\xc9\x40\x40\x7b\x15\x19\x1d\x90\x2d\x5c\xc0\x68\x04\x1b\xd7\xbf\xc9\x40\x40\x03\x97\xc7\x9a\x91\x2d\x5c\xc0\x28\x7d\x21\xe4\xbc\xc9\x40\x40\x32\x01\xbf\x46\x92\x2d\x5c\xc0\x65\xe3\xc1\x16\xbb\xc9\x40\x40\x9d\x9d\x0c\x8e\x92\x2d\x5c\xc0\x06\x0f\xd3\xbe\xb9\xc9\x40\x40\x0e\xf7\x91\x5b\x93\x2d\x5c\xc0\x90\x12\xbb\xb6\xb7\xc9\x40\x40\x4f\xe6\x1f\x7d\x93\x2d\x5c\xc0\xe4\xa0\x84\x99\xb6\xc9\x40\x40\xfc\x71\xfb\xe5\x93\x2d\x5c\xc0\xea\x91\x06\xb7\xb5\xc9\x40\x40\xea\xec\x64\x70\x94\x2d\x5c\xc0\xc2\x32\x36\x74\xb3\xc9\x40\x40\x60\x1d\xc7\x0f\x95\x2d\x5c\xc0\x43\x58\x8d\x25\xac\xc9\x40\x40\xae\xa0\x69\x89\x95\x2d\x5c\xc0\x3e\xcf\x9f\x36\xaa\xc9\x40\x40\x30\x7f\x85\xcc\x95\x2d\x5c\xc0\xe5\xeb\x32\xfc\xa7\xc9\x40\x40\xdd\x0a\x61\x35\x96\x2d\x5c\xc0\x1b\x61\x51\x11\xa7\xc9\x40\x40\x48\xa7\xae\x7c\x96\x2d\x5c\xc0\x0a\x2a\xaa\x7e\xa5\xc9\x40\x40\xf4\x32\x8a\xe5\x96\x2d\x5c\xc0\x5e\xb8\x73\x61\xa4\xc9\x40\x40\xc4\x94\x48\xa2\x97\x2d\x5c\xc0\x4d\x81\xcc\xce\xa2\xc9\x40\x40\x7c\x80\xee\xcb\x99\x2d\x5c\xc0\x67\x45\xd4\x44\x9f\xc9\x40\x40\x35\xd4\x28\x24\x99\x2d\x5c\xc0\x1b\x83\x4e\x08\x1d\xca\x40\x40""")

 geom.ExportToWkt()
 Out[4]: 'MULTIPOLYGON (((-112.712472 33.579011,-112.711384
 33.576786,-112.711442 33.576716,-112.711451 33.576681,-112.711517
 33.576599,-112.711649 33.576472,-112.711673 33.576441,-112.71169
 33.576407,-112.711855 33.576252,-112.711921 33.576167,-112.712012
 33.576077,-112.712053 33.576022,-112.71207 33.575981,-112.712119
 33.575919,-112.712127 33.575885,-112.712152 33.575858,-112.712185
 33.575789,-112.712223 33.575566,-112.712252 33.575507,-112.712268
 33.575439,-112.712293 33.575411,-112.71231 33.575363,-112.712335
 33.575329,-112.71238 33.575281,-112.712512 33.575173,-112.712472
 33.579011)))'
 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/809>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Feb  1 13:31:53 2017
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Feb 2017 21:31:53 -0000
Subject: [geos-devel] [GEOS] #809: Test failure with
 MinimumClearanceLine with geos 3.6.1
In-Reply-To: <045.d1d2bf1bc480902669f0b5bcc174677f@osgeo.org>
References: <045.d1d2bf1bc480902669f0b5bcc174677f@osgeo.org>
Message-ID: <060.183b7b09604b9ca81ec4e0842ff6d5a0@osgeo.org>

#809: Test failure with MinimumClearanceLine with geos 3.6.1
----------------------------------+---------------------------
 Reporter:  goatbar               |       Owner:  geos-devel@…
     Type:  defect                |      Status:  new
 Priority:  major                 |   Milestone:  3.6.1
Component:  Default               |     Version:  3.6.0
 Severity:  Unassigned            |  Resolution:
 Keywords:  MinimumClearanceLine  |
----------------------------------+---------------------------

Comment (by goatbar):

 Still investigating.  Not surprising, I'm getting a failure on WKB
 reading.

 {{{
 geos_unittest geos::io::WKBReader
 ===============================
   GEOS Test Suite Application
 ===============================

 geos::io::WKBReader: [1=X][2=X][3=X][4=X][5=X][6=X][7=X][8=F][9=X]

 ---> group: geos::io::WKBReader, test: test<1>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<2>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<3>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<4>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<5>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<6>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<7>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 ---> group: geos::io::WKBReader, test: test<8>
      problem: assertion failed
      failed assertion: "Values are not equal: expected 'ParseException:
 Premature end of HEX string' actual 'ParseException: Invalid HEX char'"

 ---> group: geos::io::WKBReader, test: test<9>
      problem: unexpected exception
      exception typeid: N4geos2io14ParseExceptionE
      message: "ParseException: Invalid HEX char"

 tests summary: exceptions:8 failures:1 ok:0
 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/809#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Feb  2 00:05:05 2017
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 02 Feb 2017 08:05:05 -0000
Subject: [geos-devel] [GEOS] #809: Test failure with
 MinimumClearanceLine with geos 3.6.1
In-Reply-To: <045.d1d2bf1bc480902669f0b5bcc174677f@osgeo.org>
References: <045.d1d2bf1bc480902669f0b5bcc174677f@osgeo.org>
Message-ID: <060.48d12d8aca9ab838a725fc627752cb6b@osgeo.org>

#809: Test failure with MinimumClearanceLine with geos 3.6.1
----------------------------------+---------------------------
 Reporter:  goatbar               |       Owner:  geos-devel@…
     Type:  defect                |      Status:  new
 Priority:  major                 |   Milestone:  3.6.1
Component:  Default               |     Version:  3.6.0
 Severity:  Unassigned            |  Resolution:
 Keywords:  MinimumClearanceLine  |
----------------------------------+---------------------------

Comment (by strk):

 try taking those hex strings outside of the source code and feed them
 to another hex reader. Maybe the sources got corrupted somehow ?

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/809#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From gim.spb at gmail.com  Wed Feb  8 05:25:45 2017
From: gim.spb at gmail.com (Gorbachev Ivan)
Date: Wed, 8 Feb 2017 16:25:45 +0300
Subject: [geos-devel] thread save
Message-ID: <CADijsLS=pXaRnqjHUGi6WMKmE3Vb9-W+_X-4Qgj51utpPnBtFA@mail.gmail.com>

Hello!

I need to find the intersections with a set of the poligons and a set of
the lines. I have to many poligons and lines, so i decide to do it in the
different threads. For each line I start own thread. In that thread there
is the calculation of the intersection with each polygon from the set and
one line. Application crashes with an segmentation fault. I use C++ API. Is
CAPI can help me (using the reentrant API) ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20170208/a23baf1e/attachment.html>

From strk at kbt.io  Wed Feb  8 05:46:15 2017
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 8 Feb 2017 14:46:15 +0100
Subject: [geos-devel] thread save
In-Reply-To: <CADijsLS=pXaRnqjHUGi6WMKmE3Vb9-W+_X-4Qgj51utpPnBtFA@mail.gmail.com>
References: <CADijsLS=pXaRnqjHUGi6WMKmE3Vb9-W+_X-4Qgj51utpPnBtFA@mail.gmail.com>
Message-ID: <20170208134615.GA8261@localhost>

On Wed, Feb 08, 2017 at 04:25:45PM +0300, Gorbachev Ivan wrote:
> Hello!
> 
> I need to find the intersections with a set of the poligons and a set of
> the lines. I have to many poligons and lines, so i decide to do it in the
> different threads. For each line I start own thread. In that thread there
> is the calculation of the intersection with each polygon from the set and
> one line. Application crashes with an segmentation fault. I use C++ API. Is
> CAPI can help me (using the reentrant API) ?

The CAPI should not give you any more reentrancy than the C++ one, which
is what effectively limits the thread-safety of the reentrant C API too.

It would be useful to dig further to find the culprit of your segfault,
just in case it's an actual bug you're hitting.

--strk;

From gim.spb at gmail.com  Wed Feb  8 23:48:11 2017
From: gim.spb at gmail.com (Gorbachev Ivan)
Date: Thu, 9 Feb 2017 10:48:11 +0300
Subject: [geos-devel] thread save
Message-ID: <CADijsLRar4GiggSFZ9RYBAWdMd0ObBXGtTkS=Yc1WMyb4Z3V0Q@mail.gmail.com>

Segmentation fault in this place:

bool
Geometry::intersects(const Geometry *g) const
{
#ifdef SHORTCIRCUIT_PREDICATES
    // short-circuit test
    if (! getEnvelopeInternal()->intersects(g->getEnvelopeInternal()))
<--------- Segmentation fault
        return false;
#endif
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20170209/13427b83/attachment.html>

From strk at kbt.io  Thu Feb  9 00:37:24 2017
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 9 Feb 2017 09:37:24 +0100
Subject: [geos-devel] thread save
In-Reply-To: <CADijsLRar4GiggSFZ9RYBAWdMd0ObBXGtTkS=Yc1WMyb4Z3V0Q@mail.gmail.com>
References: <CADijsLRar4GiggSFZ9RYBAWdMd0ObBXGtTkS=Yc1WMyb4Z3V0Q@mail.gmail.com>
Message-ID: <20170209083724.GD5137@localhost>

On Thu, Feb 09, 2017 at 10:48:11AM +0300, Gorbachev Ivan wrote:
> Segmentation fault in this place:
> 
> bool
> Geometry::intersects(const Geometry *g) const
> {
> #ifdef SHORTCIRCUIT_PREDICATES
>     // short-circuit test
>     if (! getEnvelopeInternal()->intersects(g->getEnvelopeInternal()))
> <--------- Segmentation fault
>         return false;
> #endif

Can you reproduce with just getEnvelopeInternal() calls,
w/out "intersects" ? Those are mutator methods, so maybe
something could go wrong if two threads mutate the object
at the same time. Or can you try asking valgrind's tool "hellgrind"
what it finds about thread safety ?

--strk;

From seboricor at gmail.com  Mon Feb 13 01:36:57 2017
From: seboricor at gmail.com (seboricor)
Date: Mon, 13 Feb 2017 10:36:57 +0100
Subject: [geos-devel] Union of XYZ or XYM polygons
Message-ID: <5f0fab3a-b0c6-1fe1-8ce5-3ddcf7798ca5@gmail.com>

Hello,

I would like to know if it is planned that GEOS implements union of XYM 
or XYZ polygons ?

I think it would be very interesting that the union of XYZ (or XYM) 
polygons returns an XYZ polygon and not only an XY (something as shown 
in the joined drawing)

It is for a personnal project (isochron implementation of a sailing 
route predictor with R).

Regards

Sébastien SAILLET (France)

PS : the small test I did with R
require(sf)
outer = matrix(c(0,0,111,10,0, 222,10,10,333,0,10,444,0,0,111),ncol=3, 
byrow=TRUE)
pol1 = st_polygon(list(outer), dim="XYZ")
outer2 = matrix(c(5,5,1111,15,5, 
2222,15,15,3333,5,15,4444,5,5,1111),ncol=3, byrow=TRUE)
pol2 = st_polygon(list(outer2), dim="XYZ")
(pol3 = st_union(pol1, pol2))

note that if I use "XYM", the last line returns an error


---
L'absence de virus dans ce courrier électronique a été vérifiée par le logiciel antivirus Avast.
https://www.avast.com/antivirus


From geos-trac at osgeo.org  Mon Feb 13 01:46:46 2017
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 13 Feb 2017 09:46:46 -0000
Subject: [geos-devel] [GEOS] #792: Move official code to GIT
In-Reply-To: <042.0691ab2c9fdcb14330fcff8c8f719a97@osgeo.org>
References: <042.0691ab2c9fdcb14330fcff8c8f719a97@osgeo.org>
Message-ID: <057.c9b9d452ce369f588b8aba206f7b15e8@osgeo.org>

#792: Move official code to GIT
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  GEOS Future
Component:  Default     |     Version:  3.6.0
 Severity:  Unassigned  |  Resolution:
 Keywords:  git         |
------------------------+---------------------------
Changes (by Mateusz Łoskot):

 * cc: Mateusz Łoskot (added)


--
Ticket URL: <https://trac.osgeo.org/geos/ticket/792#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Feb 13 01:47:14 2017
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 13 Feb 2017 09:47:14 -0000
Subject: [geos-devel] [GEOS] #770: Give Dan Baston commit access to GEOS
In-Reply-To: <042.5234bcd3453b5b59b896bed5938c2183@osgeo.org>
References: <042.5234bcd3453b5b59b896bed5938c2183@osgeo.org>
Message-ID: <057.380c05d36979273cf7f45d0808436e1c@osgeo.org>

#770: Give Dan Baston commit access to GEOS
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  task        |      Status:  new
 Priority:  major       |   Milestone:  3.5.2
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by Mateusz Łoskot):

 +1

 Dan, is all working for you?
 Can we close this now?

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/770#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mateusz at loskot.net  Mon Feb 13 01:57:13 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 13 Feb 2017 10:57:13 +0100
Subject: [geos-devel] Union of XYZ or XYM polygons
In-Reply-To: <5f0fab3a-b0c6-1fe1-8ce5-3ddcf7798ca5@gmail.com>
References: <5f0fab3a-b0c6-1fe1-8ce5-3ddcf7798ca5@gmail.com>
Message-ID: <CABUeae9tb=Q-ckW=EkaMc5rCe1qu1y-vWapDUcy+cgtkkUdpng@mail.gmail.com>

On 13 February 2017 at 10:36, seboricor <seboricor at gmail.com> wrote:
> Hello,
>
> I would like to know if it is planned that GEOS implements union of XYM or
> XYZ polygons ?
>
> I think it would be very interesting that the union of XYZ (or XYM) polygons
> returns an XYZ polygon and not only an XY (something as shown in the joined
> drawing)

You may read related threads about XYZ, XYM, XYZM support
https://lists.osgeo.org/pipermail/geos-devel/2012-July/005959.html
https://lists.osgeo.org/pipermail/geos-devel/2013-March/006245.html

AFAIK, GEOS has no M support.
You may try to implement coordinate interfaces, as briefely
explained here
https://trac.osgeo.org/geos/browser/trunk/include/geos/geom/CoordinateSequence.h#L46

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From geos-trac at osgeo.org  Tue Feb 14 08:41:33 2017
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 14 Feb 2017 16:41:33 -0000
Subject: [geos-devel] [GEOS] Batch modify: #724, #702, #730, #731, #732, #738,
 #679, #728, ...
In-Reply-To: <179.f7bbba0951e1ad67f7860abecbf04a9e@osgeo.org>
References: <179.f7bbba0951e1ad67f7860abecbf04a9e@osgeo.org>
Message-ID: <179.f7bbba0951e1ad67f7860abecbf04a9e@osgeo.org>

Batch modification to #724, #702, #730, #731, #732, #738, #679, #728, #632, #704, #671, #692, #722, #723, #694, #697, #630, #706, #708, #682, #712, #667, #714, #685, #688, #737, #717, #720, #535, #801, #798, #805, #806, #809, #810, #807 by strk:
milestone to 3.6.2

Comment:
Ticket retargeted after milestone closed

--
Tickets URL: <https://trac.osgeo.org/geos/query?id=724%2C702%2C730%2C731%2C732%2C738%2C679%2C728%2C632%2C704%2C671%2C692%2C722%2C723%2C694%2C697%2C630%2C706%2C708%2C682%2C712%2C667%2C714%2C685%2C688%2C737%2C717%2C720%2C535%2C801%2C798%2C805%2C806%2C809%2C810%2C807>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From gim.spb at gmail.com  Tue Feb 28 03:46:47 2017
From: gim.spb at gmail.com (Gorbachev Ivan)
Date: Tue, 28 Feb 2017 14:46:47 +0300
Subject: [geos-devel] union to save a holes
Message-ID: <CADijsLTP++GtwJL_Zfj3+=woFvfn+4YvpdTT5cu5sTkvZ2yScA@mail.gmail.com>

Hello!

I need to union a set of the polygons. But I need to save an all holes in
the union. CascadePolygonUnion remove all holes in the result. How to do
that ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20170228/f29564b3/attachment.html>

From strk at kbt.io  Tue Feb 28 05:32:54 2017
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 28 Feb 2017 14:32:54 +0100
Subject: [geos-devel] union to save a holes
In-Reply-To: <CADijsLTP++GtwJL_Zfj3+=woFvfn+4YvpdTT5cu5sTkvZ2yScA@mail.gmail.com>
References: <CADijsLTP++GtwJL_Zfj3+=woFvfn+4YvpdTT5cu5sTkvZ2yScA@mail.gmail.com>
Message-ID: <20170228133254.GA9885@localhost>

On Tue, Feb 28, 2017 at 02:46:47PM +0300, Gorbachev Ivan wrote:
> Hello!
> 
> I need to union a set of the polygons. But I need to save an all holes in
> the union. CascadePolygonUnion remove all holes in the result. How to do
> that ?

Holes should only be removed if there's a polygon in the input set
that covers those holes.

If you want to be sure all holes are kept compute the difference
between the result of the union of the polygons shells and the
union of the polygons holes.

--strk;

From TazMainiac at gmail.com  Tue Feb 28 07:30:09 2017
From: TazMainiac at gmail.com (TazMainiac)
Date: Tue, 28 Feb 2017 09:30:09 -0600
Subject: [geos-devel] finding intersection of LineString and large list of
	Polygon's
Message-ID: <CA+DQs543sgh3FFgErTr1B0o6UD5u4s2s+5x0Xk8yKqOjKrJ3rw@mail.gmail.com>

Hi,

  I'm not sure if this is the right mailing list for this or not - let me
know if I should post somewhere else.

  I'm using GEOS (3.5.0) via the Django (1.6.7) Python wrappers.  Under
Cygwin currently but will be on Linux later.

  I have a large list (1000's) of Polygons some of which overlap.  What is
the most efficient way to find which polygons in the list intersect with a
LineString?

  I would have thought that turning the list of Polygon's into a
MultiPolygon, then calling MultiPolygon.intersection with the line segment
would give me the polygon that the line segment intersected on.  This does
work, but it just returns the line segment itself.  I'm trying to go the
other way.

  I was hoping for a faster mechanism than just iterating over the original
polygon list and calling intersect's on each.

  I'm new to GEOS so please forgive me if I'm using incorrect terminology.

Thanks,
Taz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20170228/8c68d52a/attachment.html>

From forrest.williams at gmail.com  Tue Feb 28 08:12:15 2017
From: forrest.williams at gmail.com (Forrest Williams)
Date: Tue, 28 Feb 2017 10:12:15 -0600
Subject: [geos-devel] finding intersection of LineString and large list
	of Polygon's
In-Reply-To: <CA+DQs543sgh3FFgErTr1B0o6UD5u4s2s+5x0Xk8yKqOjKrJ3rw@mail.gmail.com>
References: <CA+DQs543sgh3FFgErTr1B0o6UD5u4s2s+5x0Xk8yKqOjKrJ3rw@mail.gmail.com>
Message-ID: <CAAb5Js-LVYJry7kCz-TfajutPK4SgCyH_8F8AZTyTpaWS5N2Nw@mail.gmail.com>

First thought would be to use something like RTree
<https://github.com/Toblerity/rtree> to build an index on the polygons.

If you didn't want to go down the RTree route and stuck to the iterative
method, you could speed things up by "preparing
<https://docs.djangoproject.com/en/1.10/ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry.prepared>"
the
linestring (and possibly preparing the polygons as well beforehand, but not
sure if you're thrashing at that point, I'd say play around with it).


Forrest W.

On Tue, Feb 28, 2017 at 9:30 AM, TazMainiac <TazMainiac at gmail.com> wrote:

> Hi,
>
>   I'm not sure if this is the right mailing list for this or not - let me
> know if I should post somewhere else.
>
>   I'm using GEOS (3.5.0) via the Django (1.6.7) Python wrappers.  Under
> Cygwin currently but will be on Linux later.
>
>   I have a large list (1000's) of Polygons some of which overlap.  What is
> the most efficient way to find which polygons in the list intersect with a
> LineString?
>
>   I would have thought that turning the list of Polygon's into a
> MultiPolygon, then calling MultiPolygon.intersection with the line segment
> would give me the polygon that the line segment intersected on.  This does
> work, but it just returns the line segment itself.  I'm trying to go the
> other way.
>
>   I was hoping for a faster mechanism than just iterating over the
> original polygon list and calling intersect's on each.
>
>   I'm new to GEOS so please forgive me if I'm using incorrect terminology.
>
> Thanks,
> Taz
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20170228/8d2bf9ea/attachment.html>

From TazMainiac at gmail.com  Tue Feb 28 15:09:50 2017
From: TazMainiac at gmail.com (TazMainiac)
Date: Tue, 28 Feb 2017 17:09:50 -0600
Subject: [geos-devel] finding intersection of LineString and large list
	of Polygon's
In-Reply-To: <CAAb5Js-LVYJry7kCz-TfajutPK4SgCyH_8F8AZTyTpaWS5N2Nw@mail.gmail.com>
References: <CA+DQs543sgh3FFgErTr1B0o6UD5u4s2s+5x0Xk8yKqOjKrJ3rw@mail.gmail.com>
 <CAAb5Js-LVYJry7kCz-TfajutPK4SgCyH_8F8AZTyTpaWS5N2Nw@mail.gmail.com>
Message-ID: <CA+DQs56-E6VK+yJbik-PPp6VuOyV6NewU5JbT=2h7+R-7SGcaQ@mail.gmail.com>

Thanks - RTree looks like what I need.

Taz

On Tue, Feb 28, 2017 at 10:12 AM, Forrest Williams <
forrest.williams at gmail.com> wrote:

> First thought would be to use something like RTree
> <https://github.com/Toblerity/rtree> to build an index on the polygons.
>
> If you didn't want to go down the RTree route and stuck to the iterative
> method, you could speed things up by "preparing
> <https://docs.djangoproject.com/en/1.10/ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry.prepared>" the
> linestring (and possibly preparing the polygons as well beforehand, but not
> sure if you're thrashing at that point, I'd say play around with it).
>
>
> Forrest W.
>
> On Tue, Feb 28, 2017 at 9:30 AM, TazMainiac <TazMainiac at gmail.com> wrote:
>
>> Hi,
>>
>>   I'm not sure if this is the right mailing list for this or not - let me
>> know if I should post somewhere else.
>>
>>   I'm using GEOS (3.5.0) via the Django (1.6.7) Python wrappers.  Under
>> Cygwin currently but will be on Linux later.
>>
>>   I have a large list (1000's) of Polygons some of which overlap.  What
>> is the most efficient way to find which polygons in the list intersect with
>> a LineString?
>>
>>   I would have thought that turning the list of Polygon's into a
>> MultiPolygon, then calling MultiPolygon.intersection with the line segment
>> would give me the polygon that the line segment intersected on.  This does
>> work, but it just returns the line segment itself.  I'm trying to go the
>> other way.
>>
>>   I was hoping for a faster mechanism than just iterating over the
>> original polygon list and calling intersect's on each.
>>
>>   I'm new to GEOS so please forgive me if I'm using incorrect terminology.
>>
>> Thanks,
>> Taz
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20170228/d8931268/attachment.html>

