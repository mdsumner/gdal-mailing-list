From me at yury.ca  Wed Oct  1 03:47:40 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
References: <3F7A193B.9040209@refractions.net>
Message-ID: <004101c387f0$4c0fa3a0$96d16c18@yury>

Yes, there is a leak in some of the overlay operations. It showed up in one of
the recent versions after a bugfix. I've been trying to plug it for some time
now, but it's rather weird so it'll probably take a couple more days.

Yury

----- Original Message ----- 
From: "David Blasby" <dblasby@refractions.net>
To: <geos-devel@geos.refractions.net>; "strk" <strk@keybit.net>
Sent: Tuesday, September 30, 2003 5:00 PM
Subject: [geos-devel] is this a big leak?


> Yuri,
>
> Find attached a program that creates a bunch of multipolygons and unions
> them together.
>
> It appears to leak memory quite quickly. Valgrind says:
>
>
>
> ==3035== 267096 bytes in 41 blocks are still reachable in loss record 14
> of 14
> ==3035==    at 0x40168BBF: malloc (vg_clientfuncs.c:103)
> ==3035==    by 0x804AECA: __default_alloc_template<true,
> 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
> ==3035==    by 0x804ACAB: __default_alloc_template<true,
> 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> ==3035==    by 0x402D82FB: basic_string<char, string_char_traits<char>,
> __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int,
> char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> ==3035==    by 0x402CE628: __static_initialization_and_destruction_0
> (/usr/include/g++-3/std/bastring.h:223)
> ==3035==    by 0x402CEAB1:
> geos::TopologyValidationError::TopologyValidationError(int,
> geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> ==3035==    by 0x402D7424: (within /raid/local/lib/libgeos.so.1.0.0)
> ==3035==    by 0x4000CA20: _dl_init (dl-init.c:70)
> ==3035==    by 0x400012F0: (within /lib/ld-2.2.4.so)
> ==3035==
> ==3035== LEAK SUMMARY:
> ==3035==    definitely lost: 0 bytes in 0 blocks.
> ==3035==    possibly lost:   0 bytes in 0 blocks.
> ==3035==    still reachable: 267936 bytes in 54 blocks.
> ==3035==         suppressed: 0 bytes in 0 blocks.
> ==3035==
>
> I assume this is a leak of some sort - its a bit of a funny leak.
>
> dave
>


--------------------------------------------------------------------------------


> // g++ -g test6.cpp -I/usr/local/include/geos -lgeos; ./a.out
> // g++ -g test6.cpp -I/usr/local/include/geos -lgeos ;
valgrind --leak-check=yes --num-callers=10 ./a.out
>
> #include "stdio.h"
> #include "io.h"
> #include "geom.h"
>
> using namespace geos;
>
> double global_offset = 0;
>     PrecisionModel *pm= new PrecisionModel();
> GeometryFactory *geomFactory = new GeometryFactory( pm, -1);
>
> //create a simple multi-polygon
> // offset shift the polygon to the left <offset> units
> // MULTIPOLYGON (((0.0000000000000000 0.0000000000000000, 10.0000000000000000
0.0000000000000000, 10.0000000000000000 10.0000000000000000, 0.0000000000000000
10.0000000000000000, 0.0000000000000000 0.0000000000000000), (2.0000000000000000
2.0000000000000000, 4.0000000000000000 2.0000000000000000, 4.0000000000000000
4.0000000000000000, 2.0000000000000000 4.0000000000000000, 2.0000000000000000
2.0000000000000000)))
>
> Geometry *a(double offset)
> {
>
>
> Geometry *g1, *g2 ;
>     Coordinate *c;
>     CoordinateList *cl;
>     LinearRing *outerRing;
>     vector<Geometry *> *innerRings=new vector<Geometry *>;
>
>
> LinearRing *innerRing;
>     vector<Geometry *> *polys=new vector<Geometry *>;
>
> cl = new BasicCoordinateList(5);
>
>
> c = new Coordinate(0+offset, 0);
> cl->setAt( *c ,0);
> delete c;
> c = new Coordinate(10+offset, 0);
> cl->setAt( *c ,1);
> delete c;
> c = new Coordinate(10+offset, 10);
> cl->setAt( *c ,2);
> delete c;
> c = new Coordinate(0+offset, 10);
> cl->setAt( *c ,3);
> delete c;
> c = new Coordinate(0+offset, 0);
> cl->setAt( *c ,4);
> delete c;
>
> outerRing = (LinearRing*) geomFactory->createLinearRing(cl);
>
>
> cl = new BasicCoordinateList(5);
>
>
> c = new Coordinate(2+offset, 2);
> cl->setAt( *c ,0);
> delete c;
> c = new Coordinate(4+offset, 2);
> cl->setAt( *c ,1);
> delete c;
> c = new Coordinate(4+offset, 4);
> cl->setAt( *c ,2);
> delete c;
> c = new Coordinate(2+offset, 4);
> cl->setAt( *c ,3);
> delete c;
> c = new Coordinate(2+offset, 2);
> cl->setAt( *c ,4);
> delete c;
>
> innerRing = (LinearRing *) geomFactory->createLinearRing(cl);
> innerRings->push_back(innerRing);
>
>
> g1 = geomFactory->createPolygon(outerRing, innerRings);
>
> polys->push_back(g1);
>
> g2 = geomFactory->createMultiPolygon(polys);
>
>
>
> return g2;
> }
>
> //unions
> //    aa  AND
> //    a new geometry, which is the standard multipolygon translated to the
right
>
> Geometry *op(Geometry *aa)
> {
> Geometry  *bb, *cc;
>
>
> bb = a(global_offset);
> //15 ==> leaks a lot
> //5  ==> leaks a constant amount
> global_offset += 15;
>
> cc = aa->Union(bb);
> delete aa;
> delete bb;
>
> return cc;
>
> }
>
>
> int main(int argC, char* argV[])
> {
> Geometry *aa;
>
> aa = a(global_offset);
>
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
> aa = op(aa);
>
> string s= aa->toString();
> cout << "geom1 == "<<s << endl;
>
>
> delete aa;
> delete geomFactory;
> delete pm;
> }
>
>
>


--------------------------------------------------------------------------------


> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>


From me at yury.ca  Thu Oct  2 21:21:18 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
References: <3F7A193B.9040209@refractions.net>
	<004101c387f0$4c0fa3a0$96d16c18@yury>
Message-ID: <00ef01c3894c$a7eef100$96d16c18@yury>

I've just fixed that leak in Overlay and committed the code to CVS.

Yury

----- Original Message ----- 
From: "Yury A. Bychkov" <me@yury.ca>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Wednesday, October 01, 2003 12:47 AM
Subject: Re: [geos-devel] is this a big leak?


> Yes, there is a leak in some of the overlay operations. It showed up in one of
> the recent versions after a bugfix. I've been trying to plug it for some time
> now, but it's rather weird so it'll probably take a couple more days.
>
> Yury
>
> ----- Original Message ----- 
> From: "David Blasby" <dblasby@refractions.net>
> To: <geos-devel@geos.refractions.net>; "strk" <strk@keybit.net>
> Sent: Tuesday, September 30, 2003 5:00 PM
> Subject: [geos-devel] is this a big leak?
>
>
> > Yuri,
> >
> > Find attached a program that creates a bunch of multipolygons and unions
> > them together.
> >
> > It appears to leak memory quite quickly. Valgrind says:
> >
> >
> >
> > ==3035== 267096 bytes in 41 blocks are still reachable in loss record 14
> > of 14
> > ==3035==    at 0x40168BBF: malloc (vg_clientfuncs.c:103)
> > ==3035==    by 0x804AECA: __default_alloc_template<true,
> > 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
> > ==3035==    by 0x804ACAB: __default_alloc_template<true,
> > 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> > ==3035==    by 0x402D82FB: basic_string<char, string_char_traits<char>,
> > __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int,
> > char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> > ==3035==    by 0x402CE628: __static_initialization_and_destruction_0
> > (/usr/include/g++-3/std/bastring.h:223)
> > ==3035==    by 0x402CEAB1:
> > geos::TopologyValidationError::TopologyValidationError(int,
> > geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> > ==3035==    by 0x402D7424: (within /raid/local/lib/libgeos.so.1.0.0)
> > ==3035==    by 0x4000CA20: _dl_init (dl-init.c:70)
> > ==3035==    by 0x400012F0: (within /lib/ld-2.2.4.so)
> > ==3035==
> > ==3035== LEAK SUMMARY:
> > ==3035==    definitely lost: 0 bytes in 0 blocks.
> > ==3035==    possibly lost:   0 bytes in 0 blocks.
> > ==3035==    still reachable: 267936 bytes in 54 blocks.
> > ==3035==         suppressed: 0 bytes in 0 blocks.
> > ==3035==
> >
> > I assume this is a leak of some sort - its a bit of a funny leak.
> >
> > dave
> >
>
>
> ------------------------------------------------------------------------------
--
>
>
> > // g++ -g test6.cpp -I/usr/local/include/geos -lgeos; ./a.out
> > // g++ -g test6.cpp -I/usr/local/include/geos -lgeos ;
> valgrind --leak-check=yes --num-callers=10 ./a.out
> >
> > #include "stdio.h"
> > #include "io.h"
> > #include "geom.h"
> >
> > using namespace geos;
> >
> > double global_offset = 0;
> >     PrecisionModel *pm= new PrecisionModel();
> > GeometryFactory *geomFactory = new GeometryFactory( pm, -1);
> >
> > //create a simple multi-polygon
> > // offset shift the polygon to the left <offset> units
> > // MULTIPOLYGON (((0.0000000000000000 0.0000000000000000,
10.0000000000000000
> 0.0000000000000000, 10.0000000000000000 10.0000000000000000,
0.0000000000000000
> 10.0000000000000000, 0.0000000000000000 0.0000000000000000),
(2.0000000000000000
> 2.0000000000000000, 4.0000000000000000 2.0000000000000000, 4.0000000000000000
> 4.0000000000000000, 2.0000000000000000 4.0000000000000000, 2.0000000000000000
> 2.0000000000000000)))
> >
> > Geometry *a(double offset)
> > {
> >
> >
> > Geometry *g1, *g2 ;
> >     Coordinate *c;
> >     CoordinateList *cl;
> >     LinearRing *outerRing;
> >     vector<Geometry *> *innerRings=new vector<Geometry *>;
> >
> >
> > LinearRing *innerRing;
> >     vector<Geometry *> *polys=new vector<Geometry *>;
> >
> > cl = new BasicCoordinateList(5);
> >
> >
> > c = new Coordinate(0+offset, 0);
> > cl->setAt( *c ,0);
> > delete c;
> > c = new Coordinate(10+offset, 0);
> > cl->setAt( *c ,1);
> > delete c;
> > c = new Coordinate(10+offset, 10);
> > cl->setAt( *c ,2);
> > delete c;
> > c = new Coordinate(0+offset, 10);
> > cl->setAt( *c ,3);
> > delete c;
> > c = new Coordinate(0+offset, 0);
> > cl->setAt( *c ,4);
> > delete c;
> >
> > outerRing = (LinearRing*) geomFactory->createLinearRing(cl);
> >
> >
> > cl = new BasicCoordinateList(5);
> >
> >
> > c = new Coordinate(2+offset, 2);
> > cl->setAt( *c ,0);
> > delete c;
> > c = new Coordinate(4+offset, 2);
> > cl->setAt( *c ,1);
> > delete c;
> > c = new Coordinate(4+offset, 4);
> > cl->setAt( *c ,2);
> > delete c;
> > c = new Coordinate(2+offset, 4);
> > cl->setAt( *c ,3);
> > delete c;
> > c = new Coordinate(2+offset, 2);
> > cl->setAt( *c ,4);
> > delete c;
> >
> > innerRing = (LinearRing *) geomFactory->createLinearRing(cl);
> > innerRings->push_back(innerRing);
> >
> >
> > g1 = geomFactory->createPolygon(outerRing, innerRings);
> >
> > polys->push_back(g1);
> >
> > g2 = geomFactory->createMultiPolygon(polys);
> >
> >
> >
> > return g2;
> > }
> >
> > //unions
> > //    aa  AND
> > //    a new geometry, which is the standard multipolygon translated to the
> right
> >
> > Geometry *op(Geometry *aa)
> > {
> > Geometry  *bb, *cc;
> >
> >
> > bb = a(global_offset);
> > //15 ==> leaks a lot
> > //5  ==> leaks a constant amount
> > global_offset += 15;
> >
> > cc = aa->Union(bb);
> > delete aa;
> > delete bb;
> >
> > return cc;
> >
> > }
> >
> >
> > int main(int argC, char* argV[])
> > {
> > Geometry *aa;
> >
> > aa = a(global_offset);
> >
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> > aa = op(aa);
> >
> > string s= aa->toString();
> > cout << "geom1 == "<<s << endl;
> >
> >
> > delete aa;
> > delete geomFactory;
> > delete pm;
> > }
> >
> >
> >
>
>
> ------------------------------------------------------------------------------
--
>
>
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From pramsey at refractions.net  Fri Oct  3 00:20:55 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
In-Reply-To: <00ef01c3894c$a7eef100$96d16c18@yury>
References: <3F7A193B.9040209@refractions.net>
 <004101c387f0$4c0fa3a0$96d16c18@yury> <00ef01c3894c$a7eef100$96d16c18@yury>
Message-ID: <200310022120.55916.pramsey@refractions.net>

Great news! Time to run the conformance test suite again :)

On Thursday 02 October 2003 18:21, Yury A. Bychkov wrote:
> I've just fixed that leak in Overlay and committed the code to CVS.
>
> Yury
>
> ----- Original Message -----
> From: "Yury A. Bychkov" <me@yury.ca>
> To: "GEOS Development List" <geos-devel@geos.refractions.net>
> Sent: Wednesday, October 01, 2003 12:47 AM
> Subject: Re: [geos-devel] is this a big leak?
>
> > Yes, there is a leak in some of the overlay operations. It showed up in
> > one of the recent versions after a bugfix. I've been trying to plug it
> > for some time now, but it's rather weird so it'll probably take a couple
> > more days.
> >
> > Yury
> >
> > ----- Original Message -----
> > From: "David Blasby" <dblasby@refractions.net>
> > To: <geos-devel@geos.refractions.net>; "strk" <strk@keybit.net>
> > Sent: Tuesday, September 30, 2003 5:00 PM
> > Subject: [geos-devel] is this a big leak?
> >
> > > Yuri,
> > >
> > > Find attached a program that creates a bunch of multipolygons and
> > > unions them together.
> > >
> > > It appears to leak memory quite quickly. Valgrind says:
> > >
> > >
> > >
> > > ==3035== 267096 bytes in 41 blocks are still reachable in loss record
> > > 14 of 14
> > > ==3035==    at 0x40168BBF: malloc (vg_clientfuncs.c:103)
> > > ==3035==    by 0x804AECA: __default_alloc_template<true,
> > > 0>::_S_chunk_alloc(unsigned int, int &)
> > > (/usr/include/g++-3/stl_alloc.h:490) ==3035==    by 0x804ACAB:
> > > __default_alloc_template<true,
> > > 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> > > ==3035==    by 0x402D82FB: basic_string<char, string_char_traits<char>,
> > > __default_alloc_template<true, 0> >::replace(unsigned int, unsigned
> > > int, char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> > > ==3035==    by 0x402CE628: __static_initialization_and_destruction_0
> > > (/usr/include/g++-3/std/bastring.h:223)
> > > ==3035==    by 0x402CEAB1:
> > > geos::TopologyValidationError::TopologyValidationError(int,
> > > geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> > > ==3035==    by 0x402D7424: (within /raid/local/lib/libgeos.so.1.0.0)
> > > ==3035==    by 0x4000CA20: _dl_init (dl-init.c:70)
> > > ==3035==    by 0x400012F0: (within /lib/ld-2.2.4.so)
> > > ==3035==
> > > ==3035== LEAK SUMMARY:
> > > ==3035==    definitely lost: 0 bytes in 0 blocks.
> > > ==3035==    possibly lost:   0 bytes in 0 blocks.
> > > ==3035==    still reachable: 267936 bytes in 54 blocks.
> > > ==3035==         suppressed: 0 bytes in 0 blocks.
> > > ==3035==
> > >
> > > I assume this is a leak of some sort - its a bit of a funny leak.
> > >
> > > dave
> >
> > -------------------------------------------------------------------------
> >-----
>
> --
>
> > > // g++ -g test6.cpp -I/usr/local/include/geos -lgeos; ./a.out
> > > // g++ -g test6.cpp -I/usr/local/include/geos -lgeos ;
> >
> > valgrind --leak-check=yes --num-callers=10 ./a.out
> >
> > > #include "stdio.h"
> > > #include "io.h"
> > > #include "geom.h"
> > >
> > > using namespace geos;
> > >
> > > double global_offset = 0;
> > >     PrecisionModel *pm= new PrecisionModel();
> > > GeometryFactory *geomFactory = new GeometryFactory( pm, -1);
> > >
> > > //create a simple multi-polygon
> > > // offset shift the polygon to the left <offset> units
> > > // MULTIPOLYGON (((0.0000000000000000 0.0000000000000000,
>
> 10.0000000000000000
>
> > 0.0000000000000000, 10.0000000000000000 10.0000000000000000,
>
> 0.0000000000000000
>
> > 10.0000000000000000, 0.0000000000000000 0.0000000000000000),
>
> (2.0000000000000000
>
> > 2.0000000000000000, 4.0000000000000000 2.0000000000000000,
> > 4.0000000000000000 4.0000000000000000, 2.0000000000000000
> > 4.0000000000000000, 2.0000000000000000 2.0000000000000000)))
> >
> > > Geometry *a(double offset)
> > > {
> > >
> > >
> > > Geometry *g1, *g2 ;
> > >     Coordinate *c;
> > >     CoordinateList *cl;
> > >     LinearRing *outerRing;
> > >     vector<Geometry *> *innerRings=new vector<Geometry *>;
> > >
> > >
> > > LinearRing *innerRing;
> > >     vector<Geometry *> *polys=new vector<Geometry *>;
> > >
> > > cl = new BasicCoordinateList(5);
> > >
> > >
> > > c = new Coordinate(0+offset, 0);
> > > cl->setAt( *c ,0);
> > > delete c;
> > > c = new Coordinate(10+offset, 0);
> > > cl->setAt( *c ,1);
> > > delete c;
> > > c = new Coordinate(10+offset, 10);
> > > cl->setAt( *c ,2);
> > > delete c;
> > > c = new Coordinate(0+offset, 10);
> > > cl->setAt( *c ,3);
> > > delete c;
> > > c = new Coordinate(0+offset, 0);
> > > cl->setAt( *c ,4);
> > > delete c;
> > >
> > > outerRing = (LinearRing*) geomFactory->createLinearRing(cl);
> > >
> > >
> > > cl = new BasicCoordinateList(5);
> > >
> > >
> > > c = new Coordinate(2+offset, 2);
> > > cl->setAt( *c ,0);
> > > delete c;
> > > c = new Coordinate(4+offset, 2);
> > > cl->setAt( *c ,1);
> > > delete c;
> > > c = new Coordinate(4+offset, 4);
> > > cl->setAt( *c ,2);
> > > delete c;
> > > c = new Coordinate(2+offset, 4);
> > > cl->setAt( *c ,3);
> > > delete c;
> > > c = new Coordinate(2+offset, 2);
> > > cl->setAt( *c ,4);
> > > delete c;
> > >
> > > innerRing = (LinearRing *) geomFactory->createLinearRing(cl);
> > > innerRings->push_back(innerRing);
> > >
> > >
> > > g1 = geomFactory->createPolygon(outerRing, innerRings);
> > >
> > > polys->push_back(g1);
> > >
> > > g2 = geomFactory->createMultiPolygon(polys);
> > >
> > >
> > >
> > > return g2;
> > > }
> > >
> > > //unions
> > > //    aa  AND
> > > //    a new geometry, which is the standard multipolygon translated to
> > > the
> >
> > right
> >
> > > Geometry *op(Geometry *aa)
> > > {
> > > Geometry  *bb, *cc;
> > >
> > >
> > > bb = a(global_offset);
> > > //15 ==> leaks a lot
> > > //5  ==> leaks a constant amount
> > > global_offset += 15;
> > >
> > > cc = aa->Union(bb);
> > > delete aa;
> > > delete bb;
> > >
> > > return cc;
> > >
> > > }
> > >
> > >
> > > int main(int argC, char* argV[])
> > > {
> > > Geometry *aa;
> > >
> > > aa = a(global_offset);
> > >
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > > aa = op(aa);
> > >
> > > string s= aa->toString();
> > > cout << "geom1 == "<<s << endl;
> > >
> > >
> > > delete aa;
> > > delete geomFactory;
> > > delete pm;
> > > }
> >
> > -------------------------------------------------------------------------
> >-----
>
> --
>
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Fri Oct  3 06:09:18 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
In-Reply-To: <200310022120.55916.pramsey@refractions.net>;
	from pramsey@refractions.net on Thu, Oct 02, 2003 at 09:20:55PM -0700
References: <3F7A193B.9040209@refractions.net>
	<004101c387f0$4c0fa3a0$96d16c18@yury> <00ef01c3894c$a7eef100$96d16c18@yury>
	<200310022120.55916.pramsey@refractions.net>
Message-ID: <20031003120918.A35233@freek.keybit.net>

I've parametrized Dave's test6.cpp so that first argument
is the number of calls to op() and second argument is the
global offset used. With the code updated by Yurj I continue
to get still-reachable memory growing as the number of calls
to union grow. 

$ vg ./test6 1 15
==22612==    still reachable: 22432 bytes in 22 blocks.

$ vg ./test6 10 15
==22613==    still reachable: 61360 bytes in 32 blocks.

The test I used to detect the leak initially run again gaves
the same results.

strk wrote:
> Geometry set size is about 2MB:
>   gis=# select sum(mem_size(the_geom)) from world where gid < 50;
>   2148316
> 
> Initial postmaster process status is:
>   PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME COMMAND
>   566 pgsql     15   0  3288 3288  2684 S     0.0  0.4   0:00 postmaster
> 
> After query:
>   gis=# select box(unite(the_geom)) from plmshp02_1 where gid < 50;
>   (180,83.1138763427734),(-180,-90)
> 
> The postmaster grew of about 66M (having touched a 78MB upper limit):
>   PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME COMMAND
>   566 pgsql     19   0 71472  69M  3396 S     0.0  9.2   3:35 postmaster
> 
> If I run that again, *exactly the same query*:
>   PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME COMMAND
>   566 pgsql     14   0  126M 126M  3396 S     0.0 16.8   7:13 postmaster

Also the segfault is still there, but I could not isolate it yet.

--strk;

pramsey wrote:
> Great news! Time to run the conformance test suite again :)
> 
> On Thursday 02 October 2003 18:21, Yury A. Bychkov wrote:
> > I've just fixed that leak in Overlay and committed the code to CVS.
> >
> > Yury

From strk at keybit.net  Fri Oct  3 13:18:55 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
In-Reply-To: <20031003120918.A35233@freek.keybit.net>;
	from strk@keybit.net on Fri, Oct 03, 2003 at 12:09:18PM +0200
References: <3F7A193B.9040209@refractions.net>
	<004101c387f0$4c0fa3a0$96d16c18@yury> <00ef01c3894c$a7eef100$96d16c18@yury>
	<200310022120.55916.pramsey@refractions.net>
	<20031003120918.A35233@freek.keybit.net>
Message-ID: <20031003191855.A38559@freek.keybit.net>

Its being really hard for me to understand GEOS code.
Anyhow, my *impression* about this bug is that some
edges or points which are added to graph due to intersection
detection remains allocated because not tranferred to the
final output and thus not freed by final output deletion.

--strk;

From me at yury.ca  Fri Oct  3 16:12:33 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
References: 
	<3F7A193B.9040209@refractions.net><004101c387f0$4c0fa3a0$96d16c18@yury>
	<00ef01c3894c$a7eef100$96d16c18@yury><200310022120.55916.pramsey@refractions.net>
	<20031003120918.A35233@freek.keybit.net>
Message-ID: <007701c389ea$b0029e20$96d16c18@yury>

This is weird. When I run Dave's test I don't get any leaks (at least none are
detected by my software). What are you using for memory leak detection?
Valgrind?
Can you send me the complete leak report that you get?

Yury
P.S. Oh, and can you send me your parameterized test as well?

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Friday, October 03, 2003 3:09 AM
Subject: Re: [geos-devel] is this a big leak?


> I've parametrized Dave's test6.cpp so that first argument
> is the number of calls to op() and second argument is the
> global offset used. With the code updated by Yurj I continue
> to get still-reachable memory growing as the number of calls
> to union grow.
>
> $ vg ./test6 1 15
> ==22612==    still reachable: 22432 bytes in 22 blocks.
>
> $ vg ./test6 10 15
> ==22613==    still reachable: 61360 bytes in 32 blocks.
>
> The test I used to detect the leak initially run again gaves
> the same results.
>
> strk wrote:
> > Geometry set size is about 2MB:
> >   gis=# select sum(mem_size(the_geom)) from world where gid < 50;
> >   2148316
> >
> > Initial postmaster process status is:
> >   PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME COMMAND
> >   566 pgsql     15   0  3288 3288  2684 S     0.0  0.4   0:00 postmaster
> >
> > After query:
> >   gis=# select box(unite(the_geom)) from plmshp02_1 where gid < 50;
> >   (180,83.1138763427734),(-180,-90)
> >
> > The postmaster grew of about 66M (having touched a 78MB upper limit):
> >   PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME COMMAND
> >   566 pgsql     19   0 71472  69M  3396 S     0.0  9.2   3:35 postmaster
> >
> > If I run that again, *exactly the same query*:
> >   PID USER     PRI  NI  SIZE  RSS SHARE STAT %CPU %MEM   TIME COMMAND
> >   566 pgsql     14   0  126M 126M  3396 S     0.0 16.8   7:13 postmaster
>
> Also the segfault is still there, but I could not isolate it yet.
>
> --strk;
>
> pramsey wrote:
> > Great news! Time to run the conformance test suite again :)
> >
> > On Thursday 02 October 2003 18:21, Yury A. Bychkov wrote:
> > > I've just fixed that leak in Overlay and committed the code to CVS.
> > >
> > > Yury
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Fri Oct  3 17:15:40 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
In-Reply-To: <007701c389ea$b0029e20$96d16c18@yury>;
	from me@yury.ca on Fri, Oct 03, 2003 at 01:12:33PM -0700
References: 
	<3F7A193B.9040209@refractions.net><004101c387f0$4c0fa3a0$96d16c18@yury>
	<00ef01c3894c$a7eef100$96d16c18@yury><200310022120.55916.pramsey@refractions.net>
	<20031003120918.A35233@freek.keybit.net> <007701c389ea$b0029e20$96d16c18@yury>
Message-ID: <20031003231540.A40017@freek.keybit.net>

me wrote:
> This is weird. When I run Dave's test I don't get any leaks (at least none are
> detected by my software). What are you using for memory leak detection?
> Valgrind?
> Can you send me the complete leak report that you get?
> 
> Yury
> P.S. Oh, and can you send me your parameterized test as well?

Here they are
--strk;

$ valgrind --leak-check=yes --show-reachable=yes --num-callers=10 ./test6
==18711== Memcheck, a.k.a. Valgrind, a memory error detector for x86-linux.
==18711== Copyright (C) 2002-2003, and GNU GPL'd, by Julian Seward.
==18711== Using valgrind-20030725, a program supervision framework for x86-linux.
==18711== Copyright (C) 2000-2003, and GNU GPL'd, by Julian Seward.
==18711== Estimated CPU clock rate is 1667 MHz
==18711== For more details, rerun with: -v
==18711== 
==18711== 
==18711== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==18711== malloc/free: in use at exit: 22432 bytes in 22 blocks.
==18711== malloc/free: 773 allocs, 751 frees, 48088 bytes allocated.
==18711== For counts of detected errors, rerun with: -v
==18711== searching for pointers to 22 not-freed blocks.
==18711== checked 4976936 bytes.
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 1 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x4028D697: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_algobase.h:5)
==18711==    by 0x4028D6F1: global constructors keyed to geos::CoordinateListFactory::internalFactory (CoordinateListFactory.cpp:290)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 2 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x40294245: __static_initialization_and_destruction_0 (Geometry.cpp:17)
==18711==    by 0x402942C9: geos::Geometry::Geometry(void) (Geometry.cpp:445)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 3 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x40294213: __static_initialization_and_destruction_0 (Geometry.cpp:16)
==18711==    by 0x402942C9: geos::Geometry::Geometry(void) (Geometry.cpp:445)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 4 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402B1DBB: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_map.h:9)
==18711==    by 0x402B1E15: geos::EdgeEnd::EdgeEnd(void) (/usr/include/g++-3/stl_map.h:76)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 5 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402BB00B: __static_initialization_and_destruction_0 (../graph/PlanarGraph.cpp:5)
==18711==    by 0x402BB0C5: global constructors keyed to geos::linkResultDirectedEdges(vector<geos::Node *, allocator<geos::Node *> > *) (../graph/PlanarGraph.cpp:14)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 6 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402D506F: __static_initialization_and_destruction_0 (../operation/GeometryGraphOperation.cpp:6)
==18711==    by 0x402D5129: geos::GeometryGraphOperation::GeometryGraphOperation(geos::Geometry *, geos::Geometry *) (../operation/GeometryGraphOperation.cpp:15)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 7 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402A84EE: geos::PointLocator::PointLocator(void) (../algorithm/PointLocator.cpp:8)
==18711==    by 0x402E2B96: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:8)
==18711==    by 0x402E2C11: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 4 bytes in 1 blocks are still reachable in loss record 8 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402E5E6B: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_set.h:9)
==18711==    by 0x402E5EC5: global constructors keyed to geos::IsValidOp::findPtNotNode(geos::CoordinateList *, geos::LinearRing *, geos::GeometryGraph *) (/usr/include/g++-3/stl_set.h:61)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 12 bytes in 1 blocks are still reachable in loss record 9 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402E2B8C: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:8)
==18711==    by 0x402E2C11: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 28 bytes in 1 blocks are still reachable in loss record 10 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402C25AE: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_algobase.h:7)
==18711==    by 0x402C2605: geos::QuadTreeRoot::QuadTreeRoot(void) (../index/quadtree/QuadTreeRoot.cpp:99)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 256 bytes in 1 blocks are still reachable in loss record 11 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402BB040: __static_initialization_and_destruction_0 (../graph/PlanarGraph.cpp:6)
==18711==    by 0x402BB0C5: global constructors keyed to geos::linkResultDirectedEdges(vector<geos::Node *, allocator<geos::Node *> > *) (../graph/PlanarGraph.cpp:14)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 256 bytes in 1 blocks are still reachable in loss record 12 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402D50A4: __static_initialization_and_destruction_0 (../operation/GeometryGraphOperation.cpp:7)
==18711==    by 0x402D5129: geos::GeometryGraphOperation::GeometryGraphOperation(geos::Geometry *, geos::Geometry *) (../operation/GeometryGraphOperation.cpp:15)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 256 bytes in 1 blocks are still reachable in loss record 13 of 14
==18711==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18711==    by 0x402E2B5A: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:7)
==18711==    by 0x402E2C11: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== 
==18711== 21592 bytes in 9 blocks are still reachable in loss record 14 of 14
==18711==    at 0x4002A9A4: malloc (vg_replace_malloc.c:153)
==18711==    by 0x804ABAA: __default_alloc_template<true, 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
==18711==    by 0x804A997: __default_alloc_template<true, 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
==18711==    by 0x402F08FB: basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int, char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
==18711==    by 0x402E789B: __static_initialization_and_destruction_0 (/usr/include/g++-3/std/bastring.h:223)
==18711==    by 0x402E7D3D: geos::TopologyValidationError::TopologyValidationError(int, geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
==18711==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18711==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18711==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18711== 
==18711== LEAK SUMMARY:
==18711==    definitely lost: 0 bytes in 0 blocks.
==18711==    possibly lost:   0 bytes in 0 blocks.
==18711==    still reachable: 22432 bytes in 22 blocks.
==18711==         suppressed: 0 bytes in 0 blocks.
==18711== 

$ valgrind --leak-check=yes --show-reachable=yes --num-callers=10 ./test6
==18712== Memcheck, a.k.a. Valgrind, a memory error detector for x86-linux.
==18712== Copyright (C) 2002-2003, and GNU GPL'd, by Julian Seward.
==18712== Using valgrind-20030725, a program supervision framework for x86-linux.
==18712== Copyright (C) 2000-2003, and GNU GPL'd, by Julian Seward.
==18712== Estimated CPU clock rate is 1670 MHz
==18712== For more details, rerun with: -v
==18712== 
==18712== 
==18712== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==18712== malloc/free: in use at exit: 61360 bytes in 32 blocks.
==18712== malloc/free: 23117 allocs, 23085 frees, 998698 bytes allocated.
==18712== For counts of detected errors, rerun with: -v
==18712== searching for pointers to 32 not-freed blocks.
==18712== checked 5015384 bytes.
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 1 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x4028D697: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_algobase.h:5)
==18712==    by 0x4028D6F1: global constructors keyed to geos::CoordinateListFactory::internalFactory (CoordinateListFactory.cpp:290)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 2 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x40294245: __static_initialization_and_destruction_0 (Geometry.cpp:17)
==18712==    by 0x402942C9: geos::Geometry::Geometry(void) (Geometry.cpp:445)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 3 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x40294213: __static_initialization_and_destruction_0 (Geometry.cpp:16)
==18712==    by 0x402942C9: geos::Geometry::Geometry(void) (Geometry.cpp:445)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 4 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402B1DBB: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_map.h:9)
==18712==    by 0x402B1E15: geos::EdgeEnd::EdgeEnd(void) (/usr/include/g++-3/stl_map.h:76)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 5 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402BB00B: __static_initialization_and_destruction_0 (../graph/PlanarGraph.cpp:5)
==18712==    by 0x402BB0C5: global constructors keyed to geos::linkResultDirectedEdges(vector<geos::Node *, allocator<geos::Node *> > *) (../graph/PlanarGraph.cpp:14)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 6 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402D506F: __static_initialization_and_destruction_0 (../operation/GeometryGraphOperation.cpp:6)
==18712==    by 0x402D5129: geos::GeometryGraphOperation::GeometryGraphOperation(geos::Geometry *, geos::Geometry *) (../operation/GeometryGraphOperation.cpp:15)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 7 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402A84EE: geos::PointLocator::PointLocator(void) (../algorithm/PointLocator.cpp:8)
==18712==    by 0x402E2B96: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:8)
==18712==    by 0x402E2C11: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 4 bytes in 1 blocks are still reachable in loss record 8 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402E5E6B: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_set.h:9)
==18712==    by 0x402E5EC5: global constructors keyed to geos::IsValidOp::findPtNotNode(geos::CoordinateList *, geos::LinearRing *, geos::GeometryGraph *) (/usr/include/g++-3/stl_set.h:61)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 12 bytes in 1 blocks are still reachable in loss record 9 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402E2B8C: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:8)
==18712==    by 0x402E2C11: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 28 bytes in 1 blocks are still reachable in loss record 10 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402C25AE: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_algobase.h:7)
==18712==    by 0x402C2605: geos::QuadTreeRoot::QuadTreeRoot(void) (../index/quadtree/QuadTreeRoot.cpp:99)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 256 bytes in 1 blocks are still reachable in loss record 11 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402BB040: __static_initialization_and_destruction_0 (../graph/PlanarGraph.cpp:6)
==18712==    by 0x402BB0C5: global constructors keyed to geos::linkResultDirectedEdges(vector<geos::Node *, allocator<geos::Node *> > *) (../graph/PlanarGraph.cpp:14)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 256 bytes in 1 blocks are still reachable in loss record 12 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402D50A4: __static_initialization_and_destruction_0 (../operation/GeometryGraphOperation.cpp:7)
==18712==    by 0x402D5129: geos::GeometryGraphOperation::GeometryGraphOperation(geos::Geometry *, geos::Geometry *) (../operation/GeometryGraphOperation.cpp:15)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 256 bytes in 1 blocks are still reachable in loss record 13 of 14
==18712==    at 0x4002AA98: __builtin_new (vg_replace_malloc.c:172)
==18712==    by 0x402E2B5A: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:7)
==18712==    by 0x402E2C11: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== 
==18712== 60520 bytes in 19 blocks are still reachable in loss record 14 of 14
==18712==    at 0x4002A9A4: malloc (vg_replace_malloc.c:153)
==18712==    by 0x804ABAA: __default_alloc_template<true, 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
==18712==    by 0x804A997: __default_alloc_template<true, 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
==18712==    by 0x402F08FB: basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int, char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
==18712==    by 0x402E789B: __static_initialization_and_destruction_0 (/usr/include/g++-3/std/bastring.h:223)
==18712==    by 0x402E7D3D: geos::TopologyValidationError::TopologyValidationError(int, geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
==18712==    by 0x402EFAD4: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4028682D: (within /extra/geos/lib/libgeos.so.1.0.0)
==18712==    by 0x4000D1D8: _dl_init (dl-init.c:70)
==18712==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
==18712== 
==18712== LEAK SUMMARY:
==18712==    definitely lost: 0 bytes in 0 blocks.
==18712==    possibly lost:   0 bytes in 0 blocks.
==18712==    still reachable: 61360 bytes in 32 blocks.
==18712==         suppressed: 0 bytes in 0 blocks.
==18712== 

$ cat test6.cpp
// g++ -g -o test6 test6.cpp -I/usr/local/include/geos -lgeos
// valgrind --leak-check=yes --num-callers=10 ./test6 <iterations> <offset>

#include "stdio.h"
#include "io.h"
#include "geom.h"

using namespace geos;

double global_offset = 0;

//create a simple multi-polygon
// offset shift the polygon to the left <offset> units
// MULTIPOLYGON (((0.0000000000000000 0.0000000000000000, 10.0000000000000000 0.0000000000000000, 10.0000000000000000 10.0000000000000000, 0.0000000000000000 10.0000000000000000, 0.0000000000000000 0.0000000000000000), (2.0000000000000000 2.0000000000000000, 4.0000000000000000 2.0000000000000000, 4.0000000000000000 4.0000000000000000, 2.0000000000000000 4.0000000000000000, 2.0000000000000000 2.0000000000000000)))

Geometry *a(double offset, GeometryFactory *geomFactory)
{


	Geometry *g1, *g2 ;
    Coordinate *c;
    CoordinateList *cl;
    LinearRing *outerRing;
    vector<Geometry *> *innerRings=new vector<Geometry *>;


	LinearRing *innerRing;
    vector<Geometry *> *polys=new vector<Geometry *>;

	cl = new BasicCoordinateList(5);


	c = new Coordinate(0+offset, 0);
	cl->setAt( *c ,0);
	delete c;
	c = new Coordinate(10+offset, 0);
	cl->setAt( *c ,1);
	delete c;
	c = new Coordinate(10+offset, 10);
	cl->setAt( *c ,2);
	delete c;
	c = new Coordinate(0+offset, 10);
	cl->setAt( *c ,3);
	delete c;
	c = new Coordinate(0+offset, 0);
	cl->setAt( *c ,4);
	delete c;

	outerRing = (LinearRing*) geomFactory->createLinearRing(cl);


	cl = new BasicCoordinateList(5);


	c = new Coordinate(2+offset, 2);
	cl->setAt( *c ,0);
	delete c;
	c = new Coordinate(4+offset, 2);
	cl->setAt( *c ,1);
	delete c;
	c = new Coordinate(4+offset, 4);
	cl->setAt( *c ,2);
	delete c;
	c = new Coordinate(2+offset, 4);
	cl->setAt( *c ,3);
	delete c;
	c = new Coordinate(2+offset, 2);
	cl->setAt( *c ,4);
	delete c;

	innerRing = (LinearRing *) geomFactory->createLinearRing(cl);
	innerRings->push_back(innerRing);


	g1 = geomFactory->createPolygon(outerRing, innerRings);


	polys->push_back(g1);
	g2 = geomFactory->createMultiPolygon(polys);

	return g2;
}

//unions
//    aa  AND
//    a new geometry, which is the standard multipolygon translated to the right

Geometry *op(Geometry *aa, int offset, GeometryFactory *gf)
{
	Geometry  *bb, *cc;


		bb = a(global_offset, gf);
			//15 ==> leaks a lot
			//5  ==> leaks a constant amount
		global_offset += offset;

		try {
			cc = aa->Union(bb);
		}
		catch (...)
		{
			cerr << "Exception trhown by Union"<<endl;
		}
		delete aa;
		delete bb;

		return cc;

}


int main(int argC, char* argV[])
{
	PrecisionModel *pm= new PrecisionModel();
	GeometryFactory *gf = new GeometryFactory( pm, -1);
	Geometry *aa, *bb;
	int i;
	int numiterations = 5;
	int offset = 15;

	if ( argC > 1 ) numiterations = atoi(argV[1]);
	if ( argC > 2 ) offset = atoi(argV[2]);

	aa = a(offset, gf);
	for (i=0; i<numiterations; i++)
	{
			aa = op(aa, offset, gf);
	}

	//string s= aa->toString();
	//cout << s << endl;

	delete aa;
	delete gf;
	delete pm;
}


From dblasby at refractions.net  Fri Oct  3 17:26:39 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] is this a big leak?
In-Reply-To: <007701c389ea$b0029e20$96d16c18@yury>
References: 
	<3F7A193B.9040209@refractions.net><004101c387f0$4c0fa3a0$96d16c18@yury>
	<00ef01c3894c$a7eef100$96d16c18@yury><200310022120.55916.pramsey@refractions.net>
	<20031003120918.A35233@freek.keybit.net> <007701c389ea$b0029e20$96d16c18@yury>
Message-ID: <3F7DE98F.1030004@refractions.net>

Here's the run from the test6.cpp I sent a little while ago.  I just ran 
it with the new GEOS.

  g++ -g test6.cpp -I/usr/local/include/geos -lgeos ; valgrind 
--leak-check=yes --num-callers=10 --show-reachable=yes ./a.out > & val_out



dave
-------------- next part --------------
==5384== Memcheck, a.k.a. Valgrind, a memory error detector for x86-linux.
==5384== Copyright (C) 2002, and GNU GPL'd, by Julian Seward.
==5384== Using valgrind-1.9.6, a program instrumentation system for x86-linux.
==5384== Copyright (C) 2000-2002, and GNU GPL'd, by Julian Seward.
==5384== Estimated CPU clock rate is 1685 MHz
==5384== For more details, rerun with: -v
==5384== 
geom1 == MULTIPOLYGON (((10.0000000000000000 0.0000000000000000, 0.0000000000000000 0.0000000000000000, 0.0000000000000000 10.0000000000000000, 10.0000000000000000 10.0000000000000000, 10.0000000000000000 0.0000000000000000), (2.0000000000000000 2.0000000000000000, 4.0000000000000000 2.0000000000000000, 4.0000000000000000 4.0000000000000000, 2.0000000000000000 4.0000000000000000, 2.0000000000000000 2.0000000000000000)), ((15.0000000000000000 0.0000000000000000, 15.0000000000000000 10.0000000000000000, 25.0000000000000000 10.0000000000000000, 25.0000000000000000 0.0000000000000000, 15.0000000000000000 0.0000000000000000), (17.0000000000000000 2.0000000000000000, 19.0000000000000000 2.0000000000000000, 19.0000000000000000 4.0000000000000000, 17.0000000000000000 4.0000000000000000, 17.0000000000000000 2.0000000000000000)), ((30.0000000000000000 0.0000000000000000, 30.0000000000000000 10.0000000000000000, 40.0000000000000000 10.0000000000000000, 40.0000000000000000 0.0000000000000000, 30.0000000000000000 0.0000000000000000), (32.0000000000000000 2.0000000000000000, 34.0000000000000000 2.0000000000000000, 34.0000000000000000 4.0000000000000000, 32.0000000000000000 4.0000000000000000, 32.0000000000000000 2.0000000000000000)), ((45.0000000000000000 0.0000000000000000, 45.0000000000000000 10.0000000000000000, 55.0000000000000000 10.0000000000000000, 55.0000000000000000 0.0000000000000000, 45.0000000000000000 0.0000000000000000), (47.0000000000000000 2.0000000000000000, 49.0000000000000000 2.0000000000000000, 49.0000000000000000 4.0000000000000000, 47.0000000000000000 4.0000000000000000, 47.0000000000000000 2.0000000000000000)), ((60.0000000000000000 0.0000000000000000, 60.0000000000000000 10.0000000000000000, 70.0000000000000000 10.0000000000000000, 70.0000000000000000 0.0000000000000000, 60.0000000000000000 0.0000000000000000), (62.0000000000000000 2.0000000000000000, 64.0000000000000000 2.0000000000000000, 64.0000000000000000 4.0000000000000000, 62.0000000000000000 4.0000000000000000, 62.0000000000000000 2.0000000000000000)), ((75.0000000000000000 0.0000000000000000, 75.0000000000000000 10.0000000000000000, 85.0000000000000000 10.0000000000000000, 85.0000000000000000 0.0000000000000000, 75.0000000000000000 0.0000000000000000), (77.0000000000000000 2.0000000000000000, 79.0000000000000000 2.0000000000000000, 79.0000000000000000 4.0000000000000000, 77.0000000000000000 4.0000000000000000, 77.0000000000000000 2.0000000000000000)), ((90.0000000000000000 0.0000000000000000, 90.0000000000000000 10.0000000000000000, 100.0000000000000000 10.0000000000000000, 100.0000000000000000 0.0000000000000000, 90.0000000000000000 0.0000000000000000), (92.0000000000000000 2.0000000000000000, 94.0000000000000000 2.0000000000000000, 94.0000000000000000 4.0000000000000000, 92.0000000000000000 4.0000000000000000, 92.0000000000000000 2.0000000000000000)), ((105.0000000000000000 0.0000000000000000, 105.0000000000000000 10.0000000000000000, 115.0000000000000000 10.0000000000000000, 115.0000000000000000 0.0000000000000000, 105.0000000000000000 0.0000000000000000), (107.0000000000000000 2.0000000000000000, 109.0000000000000000 2.0000000000000000, 109.0000000000000000 4.0000000000000000, 107.0000000000000000 4.0000000000000000, 107.0000000000000000 2.0000000000000000)), ((120.0000000000000000 0.0000000000000000, 120.0000000000000000 10.0000000000000000, 130.0000000000000000 10.0000000000000000, 130.0000000000000000 0.0000000000000000, 120.0000000000000000 0.0000000000000000), (122.0000000000000000 2.0000000000000000, 124.0000000000000000 2.0000000000000000, 124.0000000000000000 4.0000000000000000, 122.0000000000000000 4.0000000000000000, 122.0000000000000000 2.0000000000000000)), ((135.0000000000000000 0.0000000000000000, 135.0000000000000000 10.0000000000000000, 145.0000000000000000 10.0000000000000000, 145.0000000000000000 0.0000000000000000, 135.0000000000000000 0.0000000000000000), (137.0000000000000000 2.0000000000000000, 139.0000000000000000 2.0000000000000000, 139.0000000000000000 4.0000000000000000, 137.0000000000000000 4.0000000000000000, 137.0000000000000000 2.0000000000000000)), ((150.0000000000000000 0.0000000000000000, 150.0000000000000000 10.0000000000000000, 160.0000000000000000 10.0000000000000000, 160.0000000000000000 0.0000000000000000, 150.0000000000000000 0.0000000000000000), (152.0000000000000000 2.0000000000000000, 154.0000000000000000 2.0000000000000000, 154.0000000000000000 4.0000000000000000, 152.0000000000000000 4.0000000000000000, 152.0000000000000000 2.0000000000000000)), ((165.0000000000000000 0.0000000000000000, 165.0000000000000000 10.0000000000000000, 175.0000000000000000 10.0000000000000000, 175.0000000000000000 0.0000000000000000, 165.0000000000000000 0.0000000000000000), (167.0000000000000000 2.0000000000000000, 169.0000000000000000 2.0000000000000000, 169.0000000000000000 4.0000000000000000, 167.0000000000000000 4.0000000000000000, 167.0000000000000000 2.0000000000000000)), ((180.0000000000000000 0.0000000000000000, 180.0000000000000000 10.0000000000000000, 190.0000000000000000 10.0000000000000000, 190.0000000000000000 0.0000000000000000, 180.0000000000000000 0.0000000000000000), (182.0000000000000000 2.0000000000000000, 184.0000000000000000 2.0000000000000000, 184.0000000000000000 4.0000000000000000, 182.0000000000000000 4.0000000000000000, 182.0000000000000000 2.0000000000000000)), ((195.0000000000000000 0.0000000000000000, 195.0000000000000000 10.0000000000000000, 205.0000000000000000 10.0000000000000000, 205.0000000000000000 0.0000000000000000, 195.0000000000000000 0.0000000000000000), (197.0000000000000000 2.0000000000000000, 199.0000000000000000 2.0000000000000000, 199.0000000000000000 4.0000000000000000, 197.0000000000000000 4.0000000000000000, 197.0000000000000000 2.0000000000000000)), ((210.0000000000000000 0.0000000000000000, 210.0000000000000000 10.0000000000000000, 220.0000000000000000 10.0000000000000000, 220.0000000000000000 0.0000000000000000, 210.0000000000000000 0.0000000000000000), (212.0000000000000000 2.0000000000000000, 214.0000000000000000 2.0000000000000000, 214.0000000000000000 4.0000000000000000, 212.0000000000000000 4.0000000000000000, 212.0000000000000000 2.0000000000000000)), ((225.0000000000000000 0.0000000000000000, 225.0000000000000000 10.0000000000000000, 235.0000000000000000 10.0000000000000000, 235.0000000000000000 0.0000000000000000, 225.0000000000000000 0.0000000000000000), (227.0000000000000000 2.0000000000000000, 229.0000000000000000 2.0000000000000000, 229.0000000000000000 4.0000000000000000, 227.0000000000000000 4.0000000000000000, 227.0000000000000000 2.0000000000000000)), ((240.0000000000000000 0.0000000000000000, 240.0000000000000000 10.0000000000000000, 250.0000000000000000 10.0000000000000000, 250.0000000000000000 0.0000000000000000, 240.0000000000000000 0.0000000000000000), (242.0000000000000000 2.0000000000000000, 244.0000000000000000 2.0000000000000000, 244.0000000000000000 4.0000000000000000, 242.0000000000000000 4.0000000000000000, 242.0000000000000000 2.0000000000000000)), ((255.0000000000000000 0.0000000000000000, 255.0000000000000000 10.0000000000000000, 265.0000000000000000 10.0000000000000000, 265.0000000000000000 0.0000000000000000, 255.0000000000000000 0.0000000000000000), (257.0000000000000000 2.0000000000000000, 259.0000000000000000 2.0000000000000000, 259.0000000000000000 4.0000000000000000, 257.0000000000000000 4.0000000000000000, 257.0000000000000000 2.0000000000000000)), ((270.0000000000000000 0.0000000000000000, 270.0000000000000000 10.0000000000000000, 280.0000000000000000 10.0000000000000000, 280.0000000000000000 0.0000000000000000, 270.0000000000000000 0.0000000000000000), (272.0000000000000000 2.0000000000000000, 274.0000000000000000 2.0000000000000000, 274.0000000000000000 4.0000000000000000, 272.0000000000000000 4.0000000000000000, 272.0000000000000000 2.0000000000000000)), ((285.0000000000000000 0.0000000000000000, 285.0000000000000000 10.0000000000000000, 295.0000000000000000 10.0000000000000000, 295.0000000000000000 0.0000000000000000, 285.0000000000000000 0.0000000000000000), (287.0000000000000000 2.0000000000000000, 289.0000000000000000 2.0000000000000000, 289.0000000000000000 4.0000000000000000, 287.0000000000000000 4.0000000000000000, 287.0000000000000000 2.0000000000000000)), ((300.0000000000000000 0.0000000000000000, 300.0000000000000000 10.0000000000000000, 310.0000000000000000 10.0000000000000000, 310.0000000000000000 0.0000000000000000, 300.0000000000000000 0.0000000000000000), (302.0000000000000000 2.0000000000000000, 304.0000000000000000 2.0000000000000000, 304.0000000000000000 4.0000000000000000, 302.0000000000000000 4.0000000000000000, 302.0000000000000000 2.0000000000000000)), ((315.0000000000000000 0.0000000000000000, 315.0000000000000000 10.0000000000000000, 325.0000000000000000 10.0000000000000000, 325.0000000000000000 0.0000000000000000, 315.0000000000000000 0.0000000000000000), (317.0000000000000000 2.0000000000000000, 319.0000000000000000 2.0000000000000000, 319.0000000000000000 4.0000000000000000, 317.0000000000000000 4.0000000000000000, 317.0000000000000000 2.0000000000000000)), ((330.0000000000000000 0.0000000000000000, 330.0000000000000000 10.0000000000000000, 340.0000000000000000 10.0000000000000000, 340.0000000000000000 0.0000000000000000, 330.0000000000000000 0.0000000000000000), (332.0000000000000000 2.0000000000000000, 334.0000000000000000 2.0000000000000000, 334.0000000000000000 4.0000000000000000, 332.0000000000000000 4.0000000000000000, 332.0000000000000000 2.0000000000000000)), ((345.0000000000000000 0.0000000000000000, 345.0000000000000000 10.0000000000000000, 355.0000000000000000 10.0000000000000000, 355.0000000000000000 0.0000000000000000, 345.0000000000000000 0.0000000000000000), (347.0000000000000000 2.0000000000000000, 349.0000000000000000 2.0000000000000000, 349.0000000000000000 4.0000000000000000, 347.0000000000000000 4.0000000000000000, 347.0000000000000000 2.0000000000000000)), ((360.0000000000000000 0.0000000000000000, 360.0000000000000000 10.0000000000000000, 370.0000000000000000 10.0000000000000000, 370.0000000000000000 0.0000000000000000, 360.0000000000000000 0.0000000000000000), (362.0000000000000000 2.0000000000000000, 364.0000000000000000 2.0000000000000000, 364.0000000000000000 4.0000000000000000, 362.0000000000000000 4.0000000000000000, 362.0000000000000000 2.0000000000000000)), ((375.0000000000000000 0.0000000000000000, 375.0000000000000000 10.0000000000000000, 385.0000000000000000 10.0000000000000000, 385.0000000000000000 0.0000000000000000, 375.0000000000000000 0.0000000000000000), (377.0000000000000000 2.0000000000000000, 379.0000000000000000 2.0000000000000000, 379.0000000000000000 4.0000000000000000, 377.0000000000000000 4.0000000000000000, 377.0000000000000000 2.0000000000000000)), ((390.0000000000000000 0.0000000000000000, 390.0000000000000000 10.0000000000000000, 400.0000000000000000 10.0000000000000000, 400.0000000000000000 0.0000000000000000, 390.0000000000000000 0.0000000000000000), (392.0000000000000000 2.0000000000000000, 394.0000000000000000 2.0000000000000000, 394.0000000000000000 4.0000000000000000, 392.0000000000000000 4.0000000000000000, 392.0000000000000000 2.0000000000000000)), ((405.0000000000000000 0.0000000000000000, 405.0000000000000000 10.0000000000000000, 415.0000000000000000 10.0000000000000000, 415.0000000000000000 0.0000000000000000, 405.0000000000000000 0.0000000000000000), (407.0000000000000000 2.0000000000000000, 409.0000000000000000 2.0000000000000000, 409.0000000000000000 4.0000000000000000, 407.0000000000000000 4.0000000000000000, 407.0000000000000000 2.0000000000000000)), ((420.0000000000000000 0.0000000000000000, 420.0000000000000000 10.0000000000000000, 430.0000000000000000 10.0000000000000000, 430.0000000000000000 0.0000000000000000, 420.0000000000000000 0.0000000000000000), (422.0000000000000000 2.0000000000000000, 424.0000000000000000 2.0000000000000000, 424.0000000000000000 4.0000000000000000, 422.0000000000000000 4.0000000000000000, 422.0000000000000000 2.0000000000000000)), ((435.0000000000000000 0.0000000000000000, 435.0000000000000000 10.0000000000000000, 445.0000000000000000 10.0000000000000000, 445.0000000000000000 0.0000000000000000, 435.0000000000000000 0.0000000000000000), (437.0000000000000000 2.0000000000000000, 439.0000000000000000 2.0000000000000000, 439.0000000000000000 4.0000000000000000, 437.0000000000000000 4.0000000000000000, 437.0000000000000000 2.0000000000000000)), ((450.0000000000000000 0.0000000000000000, 450.0000000000000000 10.0000000000000000, 460.0000000000000000 10.0000000000000000, 460.0000000000000000 0.0000000000000000, 450.0000000000000000 0.0000000000000000), (452.0000000000000000 2.0000000000000000, 454.0000000000000000 2.0000000000000000, 454.0000000000000000 4.0000000000000000, 452.0000000000000000 4.0000000000000000, 452.0000000000000000 2.0000000000000000)), ((465.0000000000000000 0.0000000000000000, 465.0000000000000000 10.0000000000000000, 475.0000000000000000 10.0000000000000000, 475.0000000000000000 0.0000000000000000, 465.0000000000000000 0.0000000000000000), (467.0000000000000000 2.0000000000000000, 469.0000000000000000 2.0000000000000000, 469.0000000000000000 4.0000000000000000, 467.0000000000000000 4.0000000000000000, 467.0000000000000000 2.0000000000000000)), ((480.0000000000000000 0.0000000000000000, 480.0000000000000000 10.0000000000000000, 490.0000000000000000 10.0000000000000000, 490.0000000000000000 0.0000000000000000, 480.0000000000000000 0.0000000000000000), (482.0000000000000000 2.0000000000000000, 484.0000000000000000 2.0000000000000000, 484.0000000000000000 4.0000000000000000, 482.0000000000000000 4.0000000000000000, 482.0000000000000000 2.0000000000000000)), ((495.0000000000000000 0.0000000000000000, 495.0000000000000000 10.0000000000000000, 505.0000000000000000 10.0000000000000000, 505.0000000000000000 0.0000000000000000, 495.0000000000000000 0.0000000000000000), (497.0000000000000000 2.0000000000000000, 499.0000000000000000 2.0000000000000000, 499.0000000000000000 4.0000000000000000, 497.0000000000000000 4.0000000000000000, 497.0000000000000000 2.0000000000000000)), ((510.0000000000000000 0.0000000000000000, 510.0000000000000000 10.0000000000000000, 520.0000000000000000 10.0000000000000000, 520.0000000000000000 0.0000000000000000, 510.0000000000000000 0.0000000000000000), (512.0000000000000000 2.0000000000000000, 514.0000000000000000 2.0000000000000000, 514.0000000000000000 4.0000000000000000, 512.0000000000000000 4.0000000000000000, 512.0000000000000000 2.0000000000000000)), ((525.0000000000000000 0.0000000000000000, 525.0000000000000000 10.0000000000000000, 535.0000000000000000 10.0000000000000000, 535.0000000000000000 0.0000000000000000, 525.0000000000000000 0.0000000000000000), (527.0000000000000000 2.0000000000000000, 529.0000000000000000 2.0000000000000000, 529.0000000000000000 4.0000000000000000, 527.0000000000000000 4.0000000000000000, 527.0000000000000000 2.0000000000000000)), ((540.0000000000000000 0.0000000000000000, 540.0000000000000000 10.0000000000000000, 550.0000000000000000 10.0000000000000000, 550.0000000000000000 0.0000000000000000, 540.0000000000000000 0.0000000000000000), (542.0000000000000000 2.0000000000000000, 544.0000000000000000 2.0000000000000000, 544.0000000000000000 4.0000000000000000, 542.0000000000000000 4.0000000000000000, 542.0000000000000000 2.0000000000000000)), ((555.0000000000000000 0.0000000000000000, 555.0000000000000000 10.0000000000000000, 565.0000000000000000 10.0000000000000000, 565.0000000000000000 0.0000000000000000, 555.0000000000000000 0.0000000000000000), (557.0000000000000000 2.0000000000000000, 559.0000000000000000 2.0000000000000000, 559.0000000000000000 4.0000000000000000, 557.0000000000000000 4.0000000000000000, 557.0000000000000000 2.0000000000000000)), ((570.0000000000000000 0.0000000000000000, 570.0000000000000000 10.0000000000000000, 580.0000000000000000 10.0000000000000000, 580.0000000000000000 0.0000000000000000, 570.0000000000000000 0.0000000000000000), (572.0000000000000000 2.0000000000000000, 574.0000000000000000 2.0000000000000000, 574.0000000000000000 4.0000000000000000, 572.0000000000000000 4.0000000000000000, 572.0000000000000000 2.0000000000000000)), ((585.0000000000000000 0.0000000000000000, 585.0000000000000000 10.0000000000000000, 595.0000000000000000 10.0000000000000000, 595.0000000000000000 0.0000000000000000, 585.0000000000000000 0.0000000000000000), (587.0000000000000000 2.0000000000000000, 589.0000000000000000 2.0000000000000000, 589.0000000000000000 4.0000000000000000, 587.0000000000000000 4.0000000000000000, 587.0000000000000000 2.0000000000000000)), ((600.0000000000000000 0.0000000000000000, 600.0000000000000000 10.0000000000000000, 610.0000000000000000 10.0000000000000000, 610.0000000000000000 0.0000000000000000, 600.0000000000000000 0.0000000000000000), (602.0000000000000000 2.0000000000000000, 604.0000000000000000 2.0000000000000000, 604.0000000000000000 4.0000000000000000, 602.0000000000000000 4.0000000000000000, 602.0000000000000000 2.0000000000000000)), ((615.0000000000000000 0.0000000000000000, 615.0000000000000000 10.0000000000000000, 625.0000000000000000 10.0000000000000000, 625.0000000000000000 0.0000000000000000, 615.0000000000000000 0.0000000000000000), (617.0000000000000000 2.0000000000000000, 619.0000000000000000 2.0000000000000000, 619.0000000000000000 4.0000000000000000, 617.0000000000000000 4.0000000000000000, 617.0000000000000000 2.0000000000000000)), ((630.0000000000000000 0.0000000000000000, 630.0000000000000000 10.0000000000000000, 640.0000000000000000 10.0000000000000000, 640.0000000000000000 0.0000000000000000, 630.0000000000000000 0.0000000000000000), (632.0000000000000000 2.0000000000000000, 634.0000000000000000 2.0000000000000000, 634.0000000000000000 4.0000000000000000, 632.0000000000000000 4.0000000000000000, 632.0000000000000000 2.0000000000000000)), ((645.0000000000000000 0.0000000000000000, 645.0000000000000000 10.0000000000000000, 655.0000000000000000 10.0000000000000000, 655.0000000000000000 0.0000000000000000, 645.0000000000000000 0.0000000000000000), (647.0000000000000000 2.0000000000000000, 649.0000000000000000 2.0000000000000000, 649.0000000000000000 4.0000000000000000, 647.0000000000000000 4.0000000000000000, 647.0000000000000000 2.0000000000000000)), ((660.0000000000000000 0.0000000000000000, 660.0000000000000000 10.0000000000000000, 670.0000000000000000 10.0000000000000000, 670.0000000000000000 0.0000000000000000, 660.0000000000000000 0.0000000000000000), (662.0000000000000000 2.0000000000000000, 664.0000000000000000 2.0000000000000000, 664.0000000000000000 4.0000000000000000, 662.0000000000000000 4.0000000000000000, 662.0000000000000000 2.0000000000000000)), ((675.0000000000000000 0.0000000000000000, 675.0000000000000000 10.0000000000000000, 685.0000000000000000 10.0000000000000000, 685.0000000000000000 0.0000000000000000, 675.0000000000000000 0.0000000000000000), (677.0000000000000000 2.0000000000000000, 679.0000000000000000 2.0000000000000000, 679.0000000000000000 4.0000000000000000, 677.0000000000000000 4.0000000000000000, 677.0000000000000000 2.0000000000000000)), ((690.0000000000000000 0.0000000000000000, 690.0000000000000000 10.0000000000000000, 700.0000000000000000 10.0000000000000000, 700.0000000000000000 0.0000000000000000, 690.0000000000000000 0.0000000000000000), (692.0000000000000000 2.0000000000000000, 694.0000000000000000 2.0000000000000000, 694.0000000000000000 4.0000000000000000, 692.0000000000000000 4.0000000000000000, 692.0000000000000000 2.0000000000000000)), ((705.0000000000000000 0.0000000000000000, 705.0000000000000000 10.0000000000000000, 715.0000000000000000 10.0000000000000000, 715.0000000000000000 0.0000000000000000, 705.0000000000000000 0.0000000000000000), (707.0000000000000000 2.0000000000000000, 709.0000000000000000 2.0000000000000000, 709.0000000000000000 4.0000000000000000, 707.0000000000000000 4.0000000000000000, 707.0000000000000000 2.0000000000000000)))
==5384== 
==5384== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==5384== malloc/free: in use at exit: 267936 bytes in 54 blocks.
==5384== malloc/free: 910310 allocs, 910256 frees, 46871026 bytes allocated.
==5384== For counts of detected errors, rerun with: -v
==5384== searching for pointers to 54 not-freed blocks.
==5384== checked 5194924 bytes.
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 1 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402707F3: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_algobase.h:5)
==5384==    by 0x40270851: global constructors keyed to geos::CoordinateListFactory::internalFactory (CoordinateListFactory.cpp:290)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 2 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x40277539: __static_initialization_and_destruction_0 (Geometry.cpp:17)
==5384==    by 0x402775D1: geos::Geometry::Geometry(void) (Geometry.cpp:445)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 3 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x4027751B: __static_initialization_and_destruction_0 (Geometry.cpp:16)
==5384==    by 0x402775D1: geos::Geometry::Geometry(void) (Geometry.cpp:445)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 4 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402963A3: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_map.h:9)
==5384==    by 0x40296401: geos::EdgeEnd::EdgeEnd(void) (/usr/include/g++-3/stl_map.h:76)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 5 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x4029FC1B: __static_initialization_and_destruction_0 (../graph/PlanarGraph.cpp:5)
==5384==    by 0x4029FCD1: global constructors keyed to geos::linkResultDirectedEdges(vector<geos::Node *, allocator<geos::Node *> > *) (../graph/PlanarGraph.cpp:14)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 6 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402BB18B: __static_initialization_and_destruction_0 (../operation/GeometryGraphOperation.cpp:6)
==5384==    by 0x402BB241: geos::GeometryGraphOperation::GeometryGraphOperation(geos::Geometry *, geos::Geometry *) (../operation/GeometryGraphOperation.cpp:15)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 7 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x4028C4AA: geos::PointLocator::PointLocator(void) (../algorithm/PointLocator.cpp:8)
==5384==    by 0x402C9636: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:8)
==5384==    by 0x402C96C1: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 4 bytes in 1 blocks are still reachable in loss record 8 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402CCB53: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_set.h:9)
==5384==    by 0x402CCBB1: global constructors keyed to geos::IsValidOp::findPtNotNode(geos::CoordinateList *, geos::LinearRing *, geos::GeometryGraph *) (/usr/include/g++-3/stl_set.h:61)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 12 bytes in 1 blocks are still reachable in loss record 9 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402C962C: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:8)
==5384==    by 0x402C96C1: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 28 bytes in 1 blocks are still reachable in loss record 10 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402A7A26: __static_initialization_and_destruction_0 (/usr/include/g++-3/stl_algobase.h:7)
==5384==    by 0x402A7A81: geos::QuadTreeRoot::QuadTreeRoot(void) (../index/quadtree/QuadTreeRoot.cpp:99)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 256 bytes in 1 blocks are still reachable in loss record 11 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x4029FC39: __static_initialization_and_destruction_0 (../graph/PlanarGraph.cpp:6)
==5384==    by 0x4029FCD1: global constructors keyed to geos::linkResultDirectedEdges(vector<geos::Node *, allocator<geos::Node *> > *) (../graph/PlanarGraph.cpp:14)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 256 bytes in 1 blocks are still reachable in loss record 12 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402BB1A9: __static_initialization_and_destruction_0 (../operation/GeometryGraphOperation.cpp:7)
==5384==    by 0x402BB241: geos::GeometryGraphOperation::GeometryGraphOperation(geos::Geometry *, geos::Geometry *) (../operation/GeometryGraphOperation.cpp:15)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 256 bytes in 1 blocks are still reachable in loss record 13 of 14
==5384==    at 0x40168CBF: __builtin_new (vg_clientfuncs.c:129)
==5384==    by 0x402C960E: __static_initialization_and_destruction_0 (../operation/relate/RelateComputer.cpp:7)
==5384==    by 0x402C96C1: geos::RelateComputer::RelateComputer(void) (../operation/relate/RelateComputer.cpp:13)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== 267096 bytes in 41 blocks are still reachable in loss record 14 of 14
==5384==    at 0x40168BBF: malloc (vg_clientfuncs.c:103)
==5384==    by 0x804B50A: __default_alloc_template<true, 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
==5384==    by 0x804B2EB: __default_alloc_template<true, 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
==5384==    by 0x402D83AB: basic_string<char, string_char_traits<char>, __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int, char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
==5384==    by 0x402CE6D8: __static_initialization_and_destruction_0 (/usr/include/g++-3/std/bastring.h:223)
==5384==    by 0x402CEB61: geos::TopologyValidationError::TopologyValidationError(int, geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
==5384==    by 0x402D74D4: (within /raid/local/lib/libgeos.so.1.0.0)
==5384==    by 0x4000CA20: _dl_init (dl-init.c:70)
==5384==    by 0x400012F0: (within /lib/ld-2.2.4.so)
==5384== 
==5384== LEAK SUMMARY:
==5384==    definitely lost: 0 bytes in 0 blocks.
==5384==    possibly lost:   0 bytes in 0 blocks.
==5384==    still reachable: 267936 bytes in 54 blocks.
==5384==         suppressed: 0 bytes in 0 blocks.
==5384== 
From strk at keybit.net  Mon Oct  6 14:39:03 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Coordinate Destruction
Message-ID: <20031006203903.A64089@freek.keybit.net>


As a debugging test I made Coordinate constructors
and destructor print a message containing own address.

It seems that a lot of Coordinates are created without being
ever destroyed. Is it a distorted perception of the Object
Oriented World I'm having here ?

--strk;

From pramsey at refractions.net  Mon Oct  6 22:52:05 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Re: geos-devel Digest, Vol 12, Issue 5
In-Reply-To: <003601c38c7c$34cb7c10$1a00a8c0@JingpingXie>
Message-ID: <3BE2B79F-F871-11D7-BD26-000393D33C2E@refractions.net>

Jingping Xie,
Can you submit your changes as diff's against the CVS tree?
Or, perhaps someone else on the list could extract them and check them?
P.


On Monday, October 6, 2003, at 07:39 PM, ???? wrote:

>  Hello
>
> I am Jingping Xie.
>
>  I change the source a little.
>  1.change it to library.
>  2.amend some memory leak.
>  3.create test program by .NET 2003.
>
>  you can search by "xie" to find where I amend.
>  Please open the source by .NET 2003.
>
>  2003,10,07
>
>  ----- Original Message -----
>  From: <geos-devel-request@geos.refractions.net>
>  To: <geos-devel@geos.refractions.net>
>  Sent: Tuesday, October 07, 2003 4:00 AM
>  Subject: geos-devel Digest, Vol 12, Issue 5
>
>
>> Send geos-devel mailing list submissions to
>>> geos-devel@geos.refractions.net
>>>
>>> To subscribe or unsubscribe via the World Wide Web, visit
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>> or, via email, send a message with subject or body 'help' to
>>> geos-devel-request@geos.refractions.net
>>>
>>> You can reach the person managing the list at
>>> geos-devel-owner@geos.refractions.net
>>>
>>> When replying, please edit your Subject line so it is more specific
>>> than "Re: Contents of geos-devel digest..."
>>>
>>>
>>> Today's Topics:
>>>
>>>    1. Coordinate Destruction (strk)
>>>
>>>
>>> --------------------------------------------------------------------- 
>>> -
>>>
>>> Date: Mon, 6 Oct 2003 20:39:03 +0200
>>> From: strk <strk@keybit.net>
>>> To: geos-devel@geos.refractions.net
>>> Subject: [geos-devel] Coordinate Destruction
>>> Message-ID: <20031006203903.A64089@freek.keybit.net>
>>> Content-Type: text/plain; charset=us-ascii
>>> MIME-Version: 1.0
>>> Precedence: list
>>> Reply-To: GEOS Development List <geos-devel@geos.refractions.net>
>>> Message: 1
>>>
>>>
>>> As a debugging test I made Coordinate constructors
>>> and destructor print a message containing own address.
>>>
>>> It seems that a lot of Coordinates are created without being
>>> ever destroyed. Is it a distorted perception of the Object
>>> Oriented World I'm having here ?
>>>
>>> --strk;
>>>
>>> ------------------------------
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>>
>>> End of geos-devel Digest, Vol 12, Issue 5
>>> *****************************************
> <geos.lzh>


From pramsey at refractions.net  Mon Oct  6 23:10:00 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Re: geos-devel Digest, Vol 12, Issue 5
In-Reply-To: <005201c38c7d$a48499a0$1a00a8c0@JingpingXie>
Message-ID: <BCFA0448-F873-11D7-BD26-000393D33C2E@refractions.net>

We'll look at the tarball and try to diff it ourselves...
What do you mean when you say you "made it a library". I though we  
already had a library :)
Paul

On Monday, October 6, 2003, at 07:49 PM, ???? wrote:

> I'm sorry.
> I don't know how to upload the new source and how to submit my changes  
> as
> diff's against the CVS tree.
>
> ----- Original Message -----
> From: "Paul Ramsey" <pramsey@refractions.net>
> To: "????" <jingping.xie@jicoux.com>
> Cc: <geos-devel@geos.refractions.net>
> Sent: Tuesday, October 07, 2003 11:52 AM
> Subject: Re: geos-devel Digest, Vol 12, Issue 5
>
>
>> Jingping Xie,
>> Can you submit your changes as diff's against the CVS tree?
>> Or, perhaps someone else on the list could extract them and check  
>> them?
>> P.
>>
>>
>> On Monday, October 6, 2003, at 07:39 PM, ???? wrote:
>>
>>>  Hello
>>>
>>> I am Jingping Xie.
>>>
>>>  I change the source a little.
>>>  1.change it to library.
>>>  2.amend some memory leak.
>>>  3.create test program by .NET 2003.
>>>
>>>  you can search by "xie" to find where I amend.
>>>  Please open the source by .NET 2003.
>>>
>>>  2003,10,07
>>>
>>>  ----- Original Message -----
>>>  From: <geos-devel-request@geos.refractions.net>
>>>  To: <geos-devel@geos.refractions.net>
>>>  Sent: Tuesday, October 07, 2003 4:00 AM
>>>  Subject: geos-devel Digest, Vol 12, Issue 5
>>>
>>>
>>>> Send geos-devel mailing list submissions to
>>>>> geos-devel@geos.refractions.net
>>>>>
>>>>> To subscribe or unsubscribe via the World Wide Web, visit
>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>>> or, via email, send a message with subject or body 'help' to
>>>>> geos-devel-request@geos.refractions.net
>>>>>
>>>>> You can reach the person managing the list at
>>>>> geos-devel-owner@geos.refractions.net
>>>>>
>>>>> When replying, please edit your Subject line so it is more specific
>>>>> than "Re: Contents of geos-devel digest..."
>>>>>
>>>>>
>>>>> Today's Topics:
>>>>>
>>>>>    1. Coordinate Destruction (strk)
>>>>>
>>>>>
>>>>> ------------------------------------------------------------------- 
>>>>> --
>>>>> -
>>>>>
>>>>> Date: Mon, 6 Oct 2003 20:39:03 +0200
>>>>> From: strk <strk@keybit.net>
>>>>> To: geos-devel@geos.refractions.net
>>>>> Subject: [geos-devel] Coordinate Destruction
>>>>> Message-ID: <20031006203903.A64089@freek.keybit.net>
>>>>> Content-Type: text/plain; charset=us-ascii
>>>>> MIME-Version: 1.0
>>>>> Precedence: list
>>>>> Reply-To: GEOS Development List <geos-devel@geos.refractions.net>
>>>>> Message: 1
>>>>>
>>>>>
>>>>> As a debugging test I made Coordinate constructors
>>>>> and destructor print a message containing own address.
>>>>>
>>>>> It seems that a lot of Coordinates are created without being
>>>>> ever destroyed. Is it a distorted perception of the Object
>>>>> Oriented World I'm having here ?
>>>>>
>>>>> --strk;
>>>>>
>>>>> ------------------------------
>>>>>
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@geos.refractions.net
>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>>>
>>>>>
>>>>> End of geos-devel Digest, Vol 12, Issue 5
>>>>> *****************************************
>>> <geos.lzh>
>>
>>
>
>
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From pramsey at refractions.net  Mon Oct  6 23:25:57 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Re: geos-devel Digest, Vol 12, Issue 5
In-Reply-To: <003601c38c7c$34cb7c10$1a00a8c0@JingpingXie>
Message-ID: <F74E4332-F875-11D7-BD26-000393D33C2E@refractions.net>

I looked through the diff against my source tree here at home.  There 
are 44 xie entries, and a couple of unmarked places as well which look 
like memory fixes. (Someone smarter than me will need to verify them.)  
There is also a bunch of stuff like this:

+
+#ifdef _DEBUG
+   #undef THIS_FILE
+   static char THIS_FILE[]=__FILE__;
+   #define new DEBUG_NEW
+#endif
+
+#ifdef _DEBUG
+#ifndef _INC_CRTDBG
+#error Missing include "Supports debugging features of the C runtime 
library."
+#endif

And lots of new includes to this header:

+#include "../headers/stdafx.h"

Can I assume this is .Net stuff we can safely ignore?

Paul


On Monday, October 6, 2003, at 07:39 PM, ???? wrote:
> I am Jingping Xie.
>
>  I change the source a little.
>  1.change it to library.
>  2.amend some memory leak.
>  3.create test program by .NET 2003.
>
>  you can search by "xie" to find where I amend.


From me at yury.ca  Tue Oct  7 03:55:10 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Re: geos-devel Digest, Vol 12, Issue 5
References: <F74E4332-F875-11D7-BD26-000393D33C2E@refractions.net>
Message-ID: <00c101c38ca8$9a25d1b0$96d16c18@yury>

I think we can safely ignore most of the _DEBUG and new #includes. They are most
likely added by C++.Net automatically and don't perform any functions that we
need.
As for the memory fixes, I'd like to take a look at them before we add them to
the CVS. Paul, can you forward me Xie's file?

Yury

----- Original Message ----- 
From: "Paul Ramsey" <pramsey@refractions.net>
To: "????" <jingping.xie@jicoux.com>
Cc: "GEOS List" <geos-devel@geos.refractions.net>
Sent: Monday, October 06, 2003 8:25 PM
Subject: [geos-devel] Re: geos-devel Digest, Vol 12, Issue 5


> I looked through the diff against my source tree here at home.  There
> are 44 xie entries, and a couple of unmarked places as well which look
> like memory fixes. (Someone smarter than me will need to verify them.)
> There is also a bunch of stuff like this:
>
> +
> +#ifdef _DEBUG
> +   #undef THIS_FILE
> +   static char THIS_FILE[]=__FILE__;
> +   #define new DEBUG_NEW
> +#endif
> +
> +#ifdef _DEBUG
> +#ifndef _INC_CRTDBG
> +#error Missing include "Supports debugging features of the C runtime
> library."
> +#endif
>
> And lots of new includes to this header:
>
> +#include "../headers/stdafx.h"
>
> Can I assume this is .Net stuff we can safely ignore?
>
> Paul
>
>
> On Monday, October 6, 2003, at 07:39 PM, ???? wrote:
> > I am Jingping Xie.
> >
> >  I change the source a little.
> >  1.change it to library.
> >  2.amend some memory leak.
> >  3.create test program by .NET 2003.
> >
> >  you can search by "xie" to find where I amend.
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From me at yury.ca  Tue Oct  7 04:13:52 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Coordinate Destruction
References: <20031006203903.A64089@freek.keybit.net>
Message-ID: <00c601c38caa$fe075c10$96d16c18@yury>

As far as I know most of Coordinates are created as instance variables and not
as pointers, so they should be destroyed automatically. And if any of the few
non-instance Coordinates were not destroyed, hopefully my memory leak finder
should have detected that. However, there is a chance that it didn't (based on
some recent emails it seems that some peculiar leak type is not detected by the
software that I use) Can you send me your test code and Valgrind report so I can
try to figure it out?

Yury

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: <geos-devel@geos.refractions.net>
Sent: Monday, October 06, 2003 11:39 AM
Subject: [geos-devel] Coordinate Destruction


>
> As a debugging test I made Coordinate constructors
> and destructor print a message containing own address.
>
> It seems that a lot of Coordinates are created without being
> ever destroyed. Is it a distorted perception of the Object
> Oriented World I'm having here ?
>
> --strk;
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Tue Oct  7 06:06:14 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Coordinate Destruction
In-Reply-To: <00c601c38caa$fe075c10$96d16c18@yury>;
	from me@yury.ca on Tue, Oct 07, 2003 at 01:13:52AM -0700
References: <20031006203903.A64089@freek.keybit.net>
	<00c601c38caa$fe075c10$96d16c18@yury>
Message-ID: <20031007120614.A70091@freek.keybit.net>

me wrote:
> As far as I know most of Coordinates are created as instance variables and not
> as pointers, so they should be destroyed automatically. And if any of the few
> non-instance Coordinates were not destroyed, hopefully my memory leak finder
> should have detected that. However, there is a chance that it didn't (based on
> some recent emails it seems that some peculiar leak type is not detected by the
> software that I use) Can you send me your test code and Valgrind report so I can
> try to figure it out?
> 
> Yury

I figured out myself.
They are created in static data initialization, thus never released.

--strk;

> 
> ----- Original Message ----- 
> From: "strk" <strk@keybit.net>
> To: <geos-devel@geos.refractions.net>
> Sent: Monday, October 06, 2003 11:39 AM
> Subject: [geos-devel] Coordinate Destruction
> 
> 
> >
> > As a debugging test I made Coordinate constructors
> > and destructor print a message containing own address.
> >
> > It seems that a lot of Coordinates are created without being
> > ever destroyed. Is it a distorted perception of the Object
> > Oriented World I'm having here ?
> >
> > --strk;
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Oct  7 15:30:47 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] xie work
Message-ID: <20031007213047.A73342@freek.keybit.net>

Hello people,
I've committed a few patches extracted from xie work.
Sorry about scrambled commit log - I meant to abort but I couldn't.

Anyway, news are that some functions will work by value instead
of by reference.

LineString::LineString(CoordinateList *,...) will copy given
CoordinateList argument to private space.
This mean that code like test6.cpp (posted
by dave) will leak memory unless the CoordinateList used to
initialize a geometry is explicitly deleted.

LineString::getCoordinates() will return return a copy of
private CoordinateList (as all other subclass corrispondent
functions do).
This mean that callers of getCoordinates() should delete result
when done.
GeometryCollection::getCoordinate() is one of these callers,
modified to delete childCoordinates. PointLocator::locate()
is another one fixed. GeometryGraph::addPolygonRing() is another
one. 

CoordinateList::removeRepeatedPoints(CoordinateList *)
will now return a copy of given object with consecutive equal
points removed. This means that all callers can safely delete
returned value.

I did commit these changes because the more I test the more
code I might change due to the nature of these modification,
and I did not want to find myself patching an obsolete geos ;)

We should be syncronized about this.

I think that being more memory consumptive but less error prone
will help geos get to a release. It is clear to me that most of
geos bugs are related to memory management issues that might not
have been a problem in a garbage collecting environment like JAVA.

I would start writing some comments before every patched
public method to document its behaviour in respect to memory
management. How is this done to have doxygen understand it ?

Please note that committed patches will probably result in more
cascading leaks detected, but the leaks should now be more easly
removed.

--strk;

From dblasby at refractions.net  Tue Oct  7 17:15:07 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Documentation
Message-ID: <3F832CDB.7080803@refractions.net>

Sounds like there's a bunch of changes happening to GEOS.

We really need to have some documentation on what GEOS-enabled software 
is supposed to do with respect to memory management.

I mean, when I construct a Geometry out of a CoordinateList, can I 
delete it when the Geometry is constructed?  Or is it autmatically 
destroyed when the Geometry is destroyed.

How about functions like getCoordinate() or getCoordinates() - are these 
returning copies or the actual set of coordinates?

So far I've been trying to answer these questions by reading the code 
(which is cumbersome), or (worse) making test programs and seeing if 
valgrind complains!

This could be simple program that would construct,use, and delete some 
geometries, with comments about when you should (or should not) free memory.

dave


From strk at keybit.net  Tue Oct  7 17:23:35 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Documentation
In-Reply-To: <3F832CDB.7080803@refractions.net>;
	from dblasby@refractions.net on Tue, Oct 07, 2003 at 02:15:07PM -0700
References: <3F832CDB.7080803@refractions.net>
Message-ID: <20031007232335.A74274@freek.keybit.net>

I feel the same exact need. I'm still cascade-patching GEOS to
reflect getCoordinates() change to return a copy of the actual
set, which I'm not sure its the correct behaviour.
Who is responsible for GEOS overall architecture ?

PS: I will try adding an example.cpp file containing what I've
understood so far ...

--strk;

dblasby wrote:
> Sounds like there's a bunch of changes happening to GEOS.
> 
> We really need to have some documentation on what GEOS-enabled software 
> is supposed to do with respect to memory management.
> 
> I mean, when I construct a Geometry out of a CoordinateList, can I 
> delete it when the Geometry is constructed?  Or is it autmatically 
> destroyed when the Geometry is destroyed.
> 
> How about functions like getCoordinate() or getCoordinates() - are these 
> returning copies or the actual set of coordinates?
> 
> So far I've been trying to answer these questions by reading the code 
> (which is cumbersome), or (worse) making test programs and seeing if 
> valgrind complains!
> 
> This could be simple program that would construct,use, and delete some 
> geometries, with comments about when you should (or should not) free memory.
> 
> dave
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From dblasby at refractions.net  Tue Oct  7 17:32:50 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Documentation
In-Reply-To: <20031007232335.A74274@freek.keybit.net>
References: <3F832CDB.7080803@refractions.net>
	<20031007232335.A74274@freek.keybit.net>
Message-ID: <3F833102.7090206@refractions.net>

strk wrote:

> Who is responsible for GEOS overall architecture ?

This would be Martin Davis, Yuri Bychkov, and Paul Ramsey.  But, its 
open source, so its really a community process.  If you have suggestions 
- just post them to the list.

 >PS: I will try adding an example.cpp file containing what I've
 >understood so far ...

Excellent!

Personally, I'm not too concerned about returning copies of object or 
the actual object (Although the latter has a big efficiency plus.).  We 
just need to be consistent and explicit.

I think PostGIS is the only real application using GEOS at the moment - 
and I'm willing to modify the POSTGIS->GEOS and GEOS->POSTGIS converters 
if necessary.

I'm actually really quite impressed with GEOS in PostGIS. I've been 
doing quite a bit of actual processing and checking using it!  Its so 
much easier to write simple SQL instead of Java (or worse C++) code to 
check data or actually process stuff.

Kudos to everyone involved!

dave


From tvollmer at digitalglobe.com  Tue Oct  7 18:46:31 2003
From: tvollmer at digitalglobe.com (Todd Vollmer)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Documentation
Message-ID: <782C91C1988A404980FDAEA2E0C65CC020683E@comail.digitalglobe.com>

I would suggest that the correct way to write a function that must return a
object is to have that function return a new object not a pointer to the
object. Yes you will incur some overhead for creation of the object but you
will at least guarantee a  consistent behaviour.

Todd V.

-----Original Message-----
From: David Blasby [mailto:dblasby@refractions.net]
Sent: Tuesday, October 07, 2003 3:33 PM
To: GEOS Development List
Subject: Re: [geos-devel] Documentation


strk wrote:

> Who is responsible for GEOS overall architecture ?

This would be Martin Davis, Yuri Bychkov, and Paul Ramsey.  But, its 
open source, so its really a community process.  If you have suggestions 
- just post them to the list.

 >PS: I will try adding an example.cpp file containing what I've
 >understood so far ...

Excellent!

Personally, I'm not too concerned about returning copies of object or 
the actual object (Although the latter has a big efficiency plus.).  We 
just need to be consistent and explicit.

I think PostGIS is the only real application using GEOS at the moment - 
and I'm willing to modify the POSTGIS->GEOS and GEOS->POSTGIS converters 
if necessary.

I'm actually really quite impressed with GEOS in PostGIS. I've been 
doing quite a bit of actual processing and checking using it!  Its so 
much easier to write simple SQL instead of Java (or worse C++) code to 
check data or actually process stuff.

Kudos to everyone involved!

dave


_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20031007/f84f9e00/attachment.html
From strk at keybit.net  Wed Oct  8 04:09:25 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Was it a big memory leak ?
Message-ID: <20031008100925.A77959@freek.keybit.net>

It seems it was not, but a feature/bug of the STL library (caching).
valgrind FAQ contains tips on how to disable this binding in gcc
please read and comment on this - I think it should be specified
at configuration time wheter to force this or that behaviour
(when not possible at runtime).

--strk;


----- Forwarded message from Geoff Alexander <galexander2@nc.rr.com> -----

From: "Geoff Alexander" <galexander2@nc.rr.com>
To: "strk" <strk@keybit.net>, <valgrind-users@lists.sourceforge.net>
Cc: <dblasby@refractions.net>
Subject: Re: [Valgrind-users] still reachable from basic_string (C++)
Date: Tue, 7 Oct 2003 21:19:42 -0400

Looks like this may be Q14 in the valgrind FAQ
(http://developer.kde.org/~sewardj/docs-1.9.5/FAQ.txt).

Geoff Alexander

----- Original Message -----
From: "strk" <strk@keybit.net>
To: <valgrind-users@lists.sourceforge.net>
Cc: <dblasby@refractions.net>
Sent: Tuesday, October 07, 2003 5:29 PM
Subject: [Valgrind-users] still reachable from basic_string (C++)


> Does the following valgrind detect a memory leak in the libstdc++ ?
>
> ==2410== 114048 bytes in 26 blocks are still reachable in loss record 14
of 14
> ==2410==    at 0x4002A9A4: malloc (vg_replace_malloc.c:153)
> ==2410==    by 0x804BB6E: __default_alloc_template<true,
0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
> ==2410==    by 0x804B95B: __default_alloc_template<true,
0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> ==2410==    by 0x402F092B: basic_string<char, string_char_traits<char>,
__default_alloc_template<true, 0> >::replace(unsigned int, unsigned int,
char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> ==2410==    by 0x402E78C7: __static_initialization_and_destruction_0
(/usr/include/g++-3/std/bastring.h:223)
> ==2410==    by 0x402E7D69:
geos::TopologyValidationError::TopologyValidationError(int,
geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> ==2410==    by 0x402EFB04: (within /extra/geos/lib/libgeos.so.1.0.0)
> ==2410==    by 0x40286855: (within /extra/geos/lib/libgeos.so.1.0.0)
> ==2410==    by 0x4000D1D8: _dl_init (dl-init.c:70)
> ==2410==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
>
>
>
> -------------------------------------------------------
> This sf.net email is sponsored by:ThinkGeek
> Welcome to geek heaven.
> http://thinkgeek.com/sf
> _______________________________________________
> Valgrind-users mailing list
> Valgrind-users@lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/valgrind-users

----- End forwarded message -----

From me at yury.ca  Wed Oct  8 05:11:14 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Was it a big memory leak ?
References: <20031008100925.A77959@freek.keybit.net>
Message-ID: <01d901c38d7c$22ef11e0$96d16c18@yury>

Good news. I was wondering why my memory leak detector didn't complain about
that. Since that FAQ says that disabling the caching will slow down things
considerably, we should probably leave it as it is.

BTW, can you send a message to the list once you finish cascade-patching for
getCoordinates(), so that I can start on fixing the leaks it caused (when I ran
the current code on my big test file (1673 tests) I've got 55162 leaks) ?

Yury

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: <geos-devel@geos.refractions.net>
Sent: Wednesday, October 08, 2003 1:09 AM
Subject: [geos-devel] Was it a big memory leak ?


> It seems it was not, but a feature/bug of the STL library (caching).
> valgrind FAQ contains tips on how to disable this binding in gcc
> please read and comment on this - I think it should be specified
> at configuration time wheter to force this or that behaviour
> (when not possible at runtime).
>
> --strk;
>
>
> ----- Forwarded message from Geoff Alexander <galexander2@nc.rr.com> -----
>
> From: "Geoff Alexander" <galexander2@nc.rr.com>
> To: "strk" <strk@keybit.net>, <valgrind-users@lists.sourceforge.net>
> Cc: <dblasby@refractions.net>
> Subject: Re: [Valgrind-users] still reachable from basic_string (C++)
> Date: Tue, 7 Oct 2003 21:19:42 -0400
>
> Looks like this may be Q14 in the valgrind FAQ
> (http://developer.kde.org/~sewardj/docs-1.9.5/FAQ.txt).
>
> Geoff Alexander
>
> ----- Original Message -----
> From: "strk" <strk@keybit.net>
> To: <valgrind-users@lists.sourceforge.net>
> Cc: <dblasby@refractions.net>
> Sent: Tuesday, October 07, 2003 5:29 PM
> Subject: [Valgrind-users] still reachable from basic_string (C++)
>
>
> > Does the following valgrind detect a memory leak in the libstdc++ ?
> >
> > ==2410== 114048 bytes in 26 blocks are still reachable in loss record 14
> of 14
> > ==2410==    at 0x4002A9A4: malloc (vg_replace_malloc.c:153)
> > ==2410==    by 0x804BB6E: __default_alloc_template<true,
> 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
> > ==2410==    by 0x804B95B: __default_alloc_template<true,
> 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> > ==2410==    by 0x402F092B: basic_string<char, string_char_traits<char>,
> __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int,
> char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> > ==2410==    by 0x402E78C7: __static_initialization_and_destruction_0
> (/usr/include/g++-3/std/bastring.h:223)
> > ==2410==    by 0x402E7D69:
> geos::TopologyValidationError::TopologyValidationError(int,
> geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> > ==2410==    by 0x402EFB04: (within /extra/geos/lib/libgeos.so.1.0.0)
> > ==2410==    by 0x40286855: (within /extra/geos/lib/libgeos.so.1.0.0)
> > ==2410==    by 0x4000D1D8: _dl_init (dl-init.c:70)
> > ==2410==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
> >
> >
> >
> > -------------------------------------------------------
> > This sf.net email is sponsored by:ThinkGeek
> > Welcome to geek heaven.
> > http://thinkgeek.com/sf
> > _______________________________________________
> > Valgrind-users mailing list
> > Valgrind-users@lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/valgrind-users
>
> ----- End forwarded message -----
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Wed Oct  8 05:32:47 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] Was it a big memory leak ?
In-Reply-To: <01d901c38d7c$22ef11e0$96d16c18@yury>;
	from me@yury.ca on Wed, Oct 08, 2003 at 02:11:14AM -0700
References: <20031008100925.A77959@freek.keybit.net>
	<01d901c38d7c$22ef11e0$96d16c18@yury>
Message-ID: <20031008113247.B78558@freek.keybit.net>

I don't have a good test to check all occurences: the once I've seen
are now all fixed.
If you send your big test file we can work togheter on the others.

About caching: I'm trying to test the feature trying to aggregate-union
boundaries of world nations. It's been running for 50 minutes so far
and memory usage is 584Mb. I want to see what is going to happen when it
will hit the up limit of 768M (I disabled any swap). If you want to test
yourself geometries are the imported shapefiles from ArcView demo data
(Global200/cntry.shp).

--strk;


me wrote:
> Good news. I was wondering why my memory leak detector didn't complain about
> that. Since that FAQ says that disabling the caching will slow down things
> considerably, we should probably leave it as it is.
> 
> BTW, can you send a message to the list once you finish cascade-patching for
> getCoordinates(), so that I can start on fixing the leaks it caused (when I ran
> the current code on my big test file (1673 tests) I've got 55162 leaks) ?
> 
> Yury
> 
> ----- Original Message ----- 
> From: "strk" <strk@keybit.net>
> To: <geos-devel@geos.refractions.net>
> Sent: Wednesday, October 08, 2003 1:09 AM
> Subject: [geos-devel] Was it a big memory leak ?
> 
> 
> > It seems it was not, but a feature/bug of the STL library (caching).
> > valgrind FAQ contains tips on how to disable this binding in gcc
> > please read and comment on this - I think it should be specified
> > at configuration time wheter to force this or that behaviour
> > (when not possible at runtime).
> >
> > --strk;
> >
> >
> > ----- Forwarded message from Geoff Alexander <galexander2@nc.rr.com> -----
> >
> > From: "Geoff Alexander" <galexander2@nc.rr.com>
> > To: "strk" <strk@keybit.net>, <valgrind-users@lists.sourceforge.net>
> > Cc: <dblasby@refractions.net>
> > Subject: Re: [Valgrind-users] still reachable from basic_string (C++)
> > Date: Tue, 7 Oct 2003 21:19:42 -0400
> >
> > Looks like this may be Q14 in the valgrind FAQ
> > (http://developer.kde.org/~sewardj/docs-1.9.5/FAQ.txt).
> >
> > Geoff Alexander
> >
> > ----- Original Message -----
> > From: "strk" <strk@keybit.net>
> > To: <valgrind-users@lists.sourceforge.net>
> > Cc: <dblasby@refractions.net>
> > Sent: Tuesday, October 07, 2003 5:29 PM
> > Subject: [Valgrind-users] still reachable from basic_string (C++)
> >
> >
> > > Does the following valgrind detect a memory leak in the libstdc++ ?
> > >
> > > ==2410== 114048 bytes in 26 blocks are still reachable in loss record 14
> > of 14
> > > ==2410==    at 0x4002A9A4: malloc (vg_replace_malloc.c:153)
> > > ==2410==    by 0x804BB6E: __default_alloc_template<true,
> > 0>::_S_chunk_alloc(unsigned int, int &) (/usr/include/g++-3/stl_alloc.h:490)
> > > ==2410==    by 0x804B95B: __default_alloc_template<true,
> > 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> > > ==2410==    by 0x402F092B: basic_string<char, string_char_traits<char>,
> > __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int,
> > char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> > > ==2410==    by 0x402E78C7: __static_initialization_and_destruction_0
> > (/usr/include/g++-3/std/bastring.h:223)
> > > ==2410==    by 0x402E7D69:
> > geos::TopologyValidationError::TopologyValidationError(int,
> > geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> > > ==2410==    by 0x402EFB04: (within /extra/geos/lib/libgeos.so.1.0.0)
> > > ==2410==    by 0x40286855: (within /extra/geos/lib/libgeos.so.1.0.0)
> > > ==2410==    by 0x4000D1D8: _dl_init (dl-init.c:70)
> > > ==2410==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
> > >
> > >
> > >
> > > -------------------------------------------------------
> > > This sf.net email is sponsored by:ThinkGeek
> > > Welcome to geek heaven.
> > > http://thinkgeek.com/sf
> > > _______________________________________________
> > > Valgrind-users mailing list
> > > Valgrind-users@lists.sourceforge.net
> > > https://lists.sourceforge.net/lists/listinfo/valgrind-users
> >
> > ----- End forwarded message -----
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Wed Oct  8 06:31:12 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] GeometryCollection constructor
Message-ID: <20031008123112.A78941@freek.keybit.net>

Constructing a GeometryCollection from a vector of Geometry pointer
right now will just copy the pointer to that vector to private 
space, this mean that after having constructed the geometries forming
the collection and having put them in a vector you pass the
vector to new GeometryCollection and you are left with pointers to
memory that from now on should be manipulated only by the
GeometryCollection object.
I don't think this is correct. Latest postgis tries to delete the
vector used to contain child geoms and thus segfaults. I patched
GeometryCollection to copy the actual vector, not just the pointer,
but my question is: should memory copy go further copying each
object in the vector instead of just the vector itself ?

--strk;

PS: about the example cpp, I think its too early for that, I could not
    do it, but I would add comments to class definitions as soon as
    a get a cleaner idea about them. Who knows which is the format for
    doxygen to understand that again  ?


From nhv at cape.com  Wed Oct  8 06:54:51 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <20031008123112.A78941@freek.keybit.net>
Message-ID: <EKEJIKAILPONGGENMBGAGENHEPAA.nhv@cape.com>

strk writes:
> 
> Constructing a GeometryCollection from a vector of Geometry pointer
> right now will just copy the pointer to that vector to private 
> space, this mean that after having constructed the geometries forming
> the collection and having put them in a vector you pass the
> vector to new GeometryCollection and you are left with pointers to
> memory that from now on should be manipulated only by the
> GeometryCollection object.
> I don't think this is correct. Latest postgis tries to delete the
> vector used to contain child geoms and thus segfaults. I patched
> GeometryCollection to copy the actual vector, not just the pointer,
> but my question is: should memory copy go further copying each
> object in the vector instead of just the vector itself ?

Ack...

I thought we were going to use reference counted pointers
just so we could *safely* pass pointers instead of objects around
and not have to worry about objects being prematurely deleted
or conversely needlessly left on the heap !!

Cheers

Norman
 

From strk at keybit.net  Wed Oct  8 08:40:39 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <EKEJIKAILPONGGENMBGAGENHEPAA.nhv@cape.com>;
	from nhv@cape.com on Wed, Oct 08, 2003 at 06:54:51AM -0400
References: <20031008123112.A78941@freek.keybit.net>
	<EKEJIKAILPONGGENMBGAGENHEPAA.nhv@cape.com>
Message-ID: <20031008144039.A79736@freek.keybit.net>

nhv wrote:
> strk writes:
> > 
> > but my question is: should memory copy go further copying each
> > object in the vector instead of just the vector itself ?
> 
> Ack...
> 
> I thought we were going to use reference counted pointers
> just so we could *safely* pass pointers instead of objects around
> and not have to worry about objects being prematurely deleted
> or conversely needlessly left on the heap !!

Sometimes you really want a copy, because you are going to modify it,
while sometimes a pointer would be just fine ... 
You might make a copy when needed, but it would be better to make
it *MANDATORY* for developers willing to modify returned objects
(would a 'const'  work for that?). Alternatively every change to an object
should be done using public methods that in turn should check ownership
of the object (caller object address? is that available?) and transparently
make a copy of it when needed ... wouldn't be easier to use directly
Java for it ? ;)

--strk;

From nhv at cape.com  Wed Oct  8 09:15:24 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <20031008144039.A79736@freek.keybit.net>
Message-ID: <EKEJIKAILPONGGENMBGAKENNEPAA.nhv@cape.com>

strk writes:
> nhv wrote:
> > strk writes:
> > > 
> > > but my question is: should memory copy go further copying each
> > > object in the vector instead of just the vector itself ?
> > 
> > Ack...
> > 
> > I thought we were going to use reference counted pointers
> > just so we could *safely* pass pointers instead of objects around
> > and not have to worry about objects being prematurely deleted
> > or conversely needlessly left on the heap !!
> 
> Sometimes you really want a copy, because you are going to modify it,
> while sometimes a pointer would be just fine ... 

Indeed we need 'deep' and 'shallow' copy methods

> You might make a copy when needed, but it would be better to make
> it *MANDATORY* for developers willing to modify returned objects
> (would a 'const'  work for that?). 

this should work by passing a 'const pointer' when that is what is wanted

> Alternatively every change to an object
> should be done using public methods that in turn should check ownership
> of the object (caller object address? is that available?) and transparently
> make a copy of it when needed ... 

Or just use the 'deep' copy method when appropriate.
But we certainlly don't want to be copying every data structure every operation
or GEOS will return to a 'crawl' as it was with it's initial 'naive' Java Translation

> wouldn't be easier to use directly Java for it ? ;)

Well there is JTS if that is your language of choice :-)
 
Norman

From nhv at cape.com  Wed Oct  8 09:19:21 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:09 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <EKEJIKAILPONGGENMBGAKENNEPAA.nhv@cape.com>
Message-ID: <EKEJIKAILPONGGENMBGAIENOEPAA.nhv@cape.com>

Norman Vine wrote:
>
> But we certainlly don't want to be copying every data structure every operation
> or GEOS will return to a 'crawl' as it was with it's initial 'naive' Java Translation

Ack,...                                                                                            
 or GEOS will return to a 'crawl' as it was with it's initial 'naive' translation from Java
                                                                                                ^^^^^^^^^^^^^^^^

From strk at keybit.net  Wed Oct  8 10:27:48 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <EKEJIKAILPONGGENMBGAKENNEPAA.nhv@cape.com>;
	from nhv@cape.com on Wed, Oct 08, 2003 at 09:15:24AM -0400
References: <20031008144039.A79736@freek.keybit.net>
	<EKEJIKAILPONGGENMBGAKENNEPAA.nhv@cape.com>
Message-ID: <20031008162748.A80537@freek.keybit.net>

nhv wrote:
> strk writes:
> > nhv wrote:
> > > strk writes:
> > > > 
> > > > but my question is: should memory copy go further copying each
> > > > object in the vector instead of just the vector itself ?
> > > 
> > > Ack...
> > > 
> > > I thought we were going to use reference counted pointers
> > > just so we could *safely* pass pointers instead of objects around
> > > and not have to worry about objects being prematurely deleted
> > > or conversely needlessly left on the heap !!
> > 
> > Sometimes you really want a copy, because you are going to modify it,
> > while sometimes a pointer would be just fine ... 
> 
> Indeed we need 'deep' and 'shallow' copy methods
> 
> > You might make a copy when needed, but it would be better to make
> > it *MANDATORY* for developers willing to modify returned objects
> > (would a 'const'  work for that?). 
> 
> this should work by passing a 'const pointer' when that is what is wanted

what if I pass a 'const pointer' to a vector of pointers to
private/protected/read_only Geometries ? would that be a 
const pointer to vector<const Geometry *> ?
And again, will CoordinateList internal to each geometry be
modifiable by geometry's public method or they would get 'const'ed 
as well ?

> 
> > Alternatively every change to an object
> > should be done using public methods that in turn should check ownership
> > of the object (caller object address? is that available?) and transparently
> > make a copy of it when needed ... 
> 
> Or just use the 'deep' copy method when appropriate.
> But we certainlly don't want to be copying every data structure every operation
> or GEOS will return to a 'crawl' as it was with it's initial 'naive' Java Translation

Ok, I understand this. So we should talk about a specific change:
CoordinateList *Geometry::getCoordinates()
When the geometry is a Point, there is no CoordinateList element,
so it is created on-purpose.
When the geometry is a Polygon a CoordinateList object must be
created in order to contain all CoordinateLists of all rings.
When the geometry is a LineString an available internal CoordinateList
exists and was returned.

Now, I made LineString always return a copy, as all other types do
( as suggested by xie ). I might have used auto_ptr for other cases
of creation instead, is that what you are saying ? In that case
callers would not bother deleting method result value. But then again
sometimes the CoordinateList returned by calls to this function is
reduced by means of its own method removeRepeatedPoints which did
delete internal vector and created a new one. This was unacceptable,
because at the end an internal CoordinateList *
(LineString::points - protected) would have been modified (deleted?)
by a function that had nothing to do with LineString itself.

Would declaring
const CoordinateList *LineString::getCoordinates()
have solved this ?

--strk;

From strk at keybit.net  Wed Oct  8 10:30:27 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
In-Reply-To: <01d901c38d7c$22ef11e0$96d16c18@yury>;
	from me@yury.ca on Wed, Oct 08, 2003 at 02:11:14AM -0700
References: <20031008100925.A77959@freek.keybit.net>
	<01d901c38d7c$22ef11e0$96d16c18@yury>
Message-ID: <20031008163027.B80537@freek.keybit.net>

me wrote:
> Good news. I was wondering why my memory leak detector didn't complain about
> that. Since that FAQ says that disabling the caching will slow down things
> considerably, we should probably leave it as it is.

Since postgis is the primary application of GEOS we could prefer
having the user choose what to do about memory. Having a postgres
session taking up all the available memory might not be the best
thing to do ...

--strk;

From pramsey at refractions.net  Wed Oct  8 10:39:34 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <EKEJIKAILPONGGENMBGAIENOEPAA.nhv@cape.com>
Message-ID: <3BF107CA-F99D-11D7-B187-000393D33C2E@refractions.net>

Yes, it is good to remember the history of why we got the 
implementation we did...
:)

P
On Wednesday, October 8, 2003, at 06:19 AM, Norman Vine wrote:

> Norman Vine wrote:
>>
>> But we certainlly don't want to be copying every data structure every 
>> operation
>> or GEOS will return to a 'crawl' as it was with it's initial 'naive' 
>> Java Translation
>
> Ack,...
>  or GEOS will return to a 'crawl' as it was with it's initial 'naive' 
> translation from Java
>                                                                        
>                          ^^^^^^^^^^^^^^^^
>
    Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From nhv at cape.com  Wed Oct  8 12:07:12 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <20031008162748.A80537@freek.keybit.net>
Message-ID: <EKEJIKAILPONGGENMBGAOEOJEPAA.nhv@cape.com>

strk writes:
> nhv wrote:
> > strk writes:
> > > nhv wrote:
> > > > strk writes:
> > > > > 
> > > > > but my question is: should memory copy go further copying each
> > > > > object in the vector instead of just the vector itself ?
> > > > 
> > > > Ack...
> > > > 
> > > > I thought we were going to use reference counted pointers
> > > > just so we could *safely* pass pointers instead of objects around
> > > > and not have to worry about objects being prematurely deleted
> > > > or conversely needlessly left on the heap !!
> 
> Now, I made LineString always return a copy, as all other types do
> ( as suggested by xie ). I might have used auto_ptr for other cases
> of creation instead, is that what you are saying ? In that case
> callers would not bother deleting method result value. But then again
> sometimes the CoordinateList returned by calls to this function is
> reduced by means of its own method removeRepeatedPoints which did
> delete internal vector and created a new one. This was unacceptable,
> because at the end an internal CoordinateList *
> (LineString::points - protected) would have been modified (deleted?)
> by a function that had nothing to do with LineString itself.

I suggest that if one *must* copy data then one derive new classes
from the low-level geos classes that IMHO should *never* copy data
for performance reasons. < well hardly ever >.  This way there can 
be a 'safe' interface for those that don't feel comfortable with the
responsibilities that come with having the 'raw' acess that is necessary 
for *speed*.  

Cheers

Norman


 

From strk at keybit.net  Wed Oct  8 12:38:10 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection constructor
In-Reply-To: <EKEJIKAILPONGGENMBGAOEOJEPAA.nhv@cape.com>;
	from nhv@cape.com on Wed, Oct 08, 2003 at 12:07:12PM -0400
References: <20031008162748.A80537@freek.keybit.net>
	<EKEJIKAILPONGGENMBGAOEOJEPAA.nhv@cape.com>
Message-ID: <20031008183810.A81575@freek.keybit.net>

If giving direct access to private data is ok for everybody,
I will change getCoordinates() behaviour back to its pre-patch one,
adding a 'const' keyword to function definition and using auto_ptr
when creating custom new CoordinateLists. 

Then, we'll have to discuss about constructors arguments: shall
those be freely deleted by caller or instead taken under
constructed object responsability ?


--strk;

nhv wrote:
> strk writes:
> > nhv wrote:
> > > strk writes:
> > > > nhv wrote:
> > > > > strk writes:
> > > > > > 
> > > > > > but my question is: should memory copy go further copying each
> > > > > > object in the vector instead of just the vector itself ?
> > > > > 
> > > > > Ack...
> > > > > 
> > > > > I thought we were going to use reference counted pointers
> > > > > just so we could *safely* pass pointers instead of objects around
> > > > > and not have to worry about objects being prematurely deleted
> > > > > or conversely needlessly left on the heap !!
> > 
> > Now, I made LineString always return a copy, as all other types do
> > ( as suggested by xie ). I might have used auto_ptr for other cases
> > of creation instead, is that what you are saying ? In that case
> > callers would not bother deleting method result value. But then again
> > sometimes the CoordinateList returned by calls to this function is
> > reduced by means of its own method removeRepeatedPoints which did
> > delete internal vector and created a new one. This was unacceptable,
> > because at the end an internal CoordinateList *
> > (LineString::points - protected) would have been modified (deleted?)
> > by a function that had nothing to do with LineString itself.
> 
> I suggest that if one *must* copy data then one derive new classes
> from the low-level geos classes that IMHO should *never* copy data
> for performance reasons. < well hardly ever >.  This way there can 
> be a 'safe' interface for those that don't feel comfortable with the
> responsibilities that come with having the 'raw' acess that is necessary 
> for *speed*.  
> 
> Cheers
> 
> Norman
> 
> 
>  
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Wed Oct  8 12:54:45 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Unload class
Message-ID: <20031008185445.A81822@freek.keybit.net>

I've added the Unload class prepared by xie with small modifications.
You can use Unload::Release() in your test code as the last step to
remove all static allocations done by geos. Oh.. you'll have to
include "unload.h" too...

WARNING: any use of GEOS after call to Unload::Release() is undefined !

--strk;

From strk at keybit.net  Wed Oct  8 20:16:37 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] doc/example.cpp
Message-ID: <20031009021637.A84769@freek.keybit.net>

I've added a document/discuss-by-example file to the repository.
Contains a few things, but confused ;)

a LinearRing creation function,
a Polygon creation function,
a GeometryCollection creation function.

Reading the code you'll find out problems related to
by-value/by-reference usage of objects.

Please add any easier/cleaner way to do things.

--strk;

From me at yury.ca  Thu Oct  9 05:23:33 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
References: 
	<20031008100925.A77959@freek.keybit.net><01d901c38d7c$22ef11e0$96d16c18@yury>
	<20031008163027.B80537@freek.keybit.net>
Message-ID: <00e001c38e47$1e9cf190$96d16c18@yury>

I guess you are right. I didn't think about it form PostGIS perspective.

Yury

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Wednesday, October 08, 2003 7:30 AM
Subject: Re: [geos-devel] Was it a big memory leak ?


> me wrote:
> > Good news. I was wondering why my memory leak detector didn't complain about
> > that. Since that FAQ says that disabling the caching will slow down things
> > considerably, we should probably leave it as it is.
>
> Since postgis is the primary application of GEOS we could prefer
> having the user choose what to do about memory. Having a postgres
> session taking up all the available memory might not be the best
> thing to do ...
>
> --strk;
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From me at yury.ca  Thu Oct  9 05:30:51 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
References: <20031008100925.A77959@freek.keybit.net>
	<01d901c38d7c$22ef11e0$96d16c18@yury> <20031008113247.B78558@freek.keybit.net>
Message-ID: <00eb01c38e48$0a09cdb0$96d16c18@yury>

Sorry for the delay, I was quite busy today. I am attaching a big file (1673
cases, assembled from a bunch of other tests) that I use for leak checking.
New version of GEOS still leaks quite a bit. I'll start fixing it (and you are
welcome to join :-)) Thursday afternoon.

Yury.
Note: A few of the tests in the attached file will fail (mainly because their
intended result is for another precision model), but don't pay much attention to
that, since it's not designed for correctness.

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Cc: <me@yury.ca>
Sent: Wednesday, October 08, 2003 2:32 AM
Subject: Re: [geos-devel] Was it a big memory leak ?


> I don't have a good test to check all occurences: the once I've seen
> are now all fixed.
> If you send your big test file we can work togheter on the others.
>
> About caching: I'm trying to test the feature trying to aggregate-union
> boundaries of world nations. It's been running for 50 minutes so far
> and memory usage is 584Mb. I want to see what is going to happen when it
> will hit the up limit of 768M (I disabled any swap). If you want to test
> yourself geometries are the imported shapefiles from ArcView demo data
> (Global200/cntry.shp).
>
> --strk;
>
>
> me wrote:
> > Good news. I was wondering why my memory leak detector didn't complain about
> > that. Since that FAQ says that disabling the caching will slow down things
> > considerably, we should probably leave it as it is.
> >
> > BTW, can you send a message to the list once you finish cascade-patching for
> > getCoordinates(), so that I can start on fixing the leaks it caused (when I
ran
> > the current code on my big test file (1673 tests) I've got 55162 leaks) ?
> >
> > Yury
> >
> > ----- Original Message ----- 
> > From: "strk" <strk@keybit.net>
> > To: <geos-devel@geos.refractions.net>
> > Sent: Wednesday, October 08, 2003 1:09 AM
> > Subject: [geos-devel] Was it a big memory leak ?
> >
> >
> > > It seems it was not, but a feature/bug of the STL library (caching).
> > > valgrind FAQ contains tips on how to disable this binding in gcc
> > > please read and comment on this - I think it should be specified
> > > at configuration time wheter to force this or that behaviour
> > > (when not possible at runtime).
> > >
> > > --strk;
> > >
> > >
> > > ----- Forwarded message from Geoff Alexander <galexander2@nc.rr.com> -----
> > >
> > > From: "Geoff Alexander" <galexander2@nc.rr.com>
> > > To: "strk" <strk@keybit.net>, <valgrind-users@lists.sourceforge.net>
> > > Cc: <dblasby@refractions.net>
> > > Subject: Re: [Valgrind-users] still reachable from basic_string (C++)
> > > Date: Tue, 7 Oct 2003 21:19:42 -0400
> > >
> > > Looks like this may be Q14 in the valgrind FAQ
> > > (http://developer.kde.org/~sewardj/docs-1.9.5/FAQ.txt).
> > >
> > > Geoff Alexander
> > >
> > > ----- Original Message -----
> > > From: "strk" <strk@keybit.net>
> > > To: <valgrind-users@lists.sourceforge.net>
> > > Cc: <dblasby@refractions.net>
> > > Sent: Tuesday, October 07, 2003 5:29 PM
> > > Subject: [Valgrind-users] still reachable from basic_string (C++)
> > >
> > >
> > > > Does the following valgrind detect a memory leak in the libstdc++ ?
> > > >
> > > > ==2410== 114048 bytes in 26 blocks are still reachable in loss record 14
> > > of 14
> > > > ==2410==    at 0x4002A9A4: malloc (vg_replace_malloc.c:153)
> > > > ==2410==    by 0x804BB6E: __default_alloc_template<true,
> > > 0>::_S_chunk_alloc(unsigned int, int &)
(/usr/include/g++-3/stl_alloc.h:490)
> > > > ==2410==    by 0x804B95B: __default_alloc_template<true,
> > > 0>::_S_refill(unsigned int) (/usr/include/g++-3/stl_alloc.h:531)
> > > > ==2410==    by 0x402F092B: basic_string<char, string_char_traits<char>,
> > > __default_alloc_template<true, 0> >::replace(unsigned int, unsigned int,
> > > char const *, unsigned int) (/usr/include/g++-3/stl_alloc.h:332)
> > > > ==2410==    by 0x402E78C7: __static_initialization_and_destruction_0
> > > (/usr/include/g++-3/std/bastring.h:223)
> > > > ==2410==    by 0x402E7D69:
> > > geos::TopologyValidationError::TopologyValidationError(int,
> > > geos::Coordinate) (/usr/include/g++-3/stl_map.h:76)
> > > > ==2410==    by 0x402EFB04: (within /extra/geos/lib/libgeos.so.1.0.0)
> > > > ==2410==    by 0x40286855: (within /extra/geos/lib/libgeos.so.1.0.0)
> > > > ==2410==    by 0x4000D1D8: _dl_init (dl-init.c:70)
> > > > ==2410==    by 0x40001DB0: (within /lib/ld-2.2.2.so)
> > > >
> > > >
> > > >
> > > > -------------------------------------------------------
> > > > This sf.net email is sponsored by:ThinkGeek
> > > > Welcome to geek heaven.
> > > > http://thinkgeek.com/sf
> > > > _______________________________________________
> > > > Valgrind-users mailing list
> > > > Valgrind-users@lists.sourceforge.net
> > > > https://lists.sourceforge.net/lists/listinfo/valgrind-users
> > >
> > > ----- End forwarded message -----
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: testLeaksBig.xml
Type: text/xml
Size: 434211 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20031009/37135031/testLeaksBig.xml
From strk at keybit.net  Thu Oct  9 05:32:40 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] use of const in GeometryFactory constructor
Message-ID: <20031009113240.A87844@freek.keybit.net>

GeometryFactory(PrecisionModel * newPrecisionModel, int SRID)
Will copy the PrecisionModel arg into private space.

The arguments naming convention used elsewere makes you think
the PresionModel object has to be created on purpose and thus
that you'll have to forget about it. Anyway this is not the
actual implementation and I don't know about usage of it
by other GEOS parts.

As a test, I tried to "formalize" the implementation behaviour
adding a 'const' in front of the first arg both in GeometryFactory.cpp
and geom.h (and changing the name of it to disambiguate meaning).

The library resulted by this was corrupted, when trying to run a
linked executable I got:
./example: error while loading shared libraries: ./example: undefined symbol:
__Q24geos15GeometryFactoryPQ24geos14PrecisionModeli

Question 1: do you think using 'const' there is the right way to go ?

Question 2: do you think I've a bogus compiler ? (gcc-2.96)

--strk;



From strk at keybit.net  Thu Oct  9 05:38:53 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
In-Reply-To: <00eb01c38e48$0a09cdb0$96d16c18@yury>;
	from me@yury.ca on Thu, Oct 09, 2003 at 02:30:51AM -0700
References: <20031008100925.A77959@freek.keybit.net>
	<01d901c38d7c$22ef11e0$96d16c18@yury> <20031008113247.B78558@freek.keybit.net>
	<00eb01c38e48$0a09cdb0$96d16c18@yury>
Message-ID: <20031009113853.B87844@freek.keybit.net>

me wrote:
> Sorry for the delay, I was quite busy today. I am attaching a big file (1673
> cases, assembled from a bunch of other tests) that I use for leak checking.
> New version of GEOS still leaks quite a bit. I'll start fixing it (and you are
> welcome to join :-)) Thursday afternoon.

How do I run the test ?

PS: just a curiosity: do you start fixing bugs @ 02:30:51AM ? ;)

--strk;

From nhv at cape.com  Thu Oct  9 06:10:41 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] use of const in GeometryFactory constructor
In-Reply-To: <20031009113240.A87844@freek.keybit.net>
Message-ID: <EKEJIKAILPONGGENMBGAEEBGFAAA.nhv@cape.com>

strk writes:
> 
> GeometryFactory(PrecisionModel * newPrecisionModel, int SRID)
> Will copy the PrecisionModel arg into private space.
> 
> The arguments naming convention used elsewere makes you think
> the PresionModel object has to be created on purpose and thus
> that you'll have to forget about it. Anyway this is not the
> actual implementation and I don't know about usage of it
> by other GEOS parts.
> 
> As a test, I tried to "formalize" the implementation behaviour
> adding a 'const' in front of the first arg both in GeometryFactory.cpp
> and geom.h (and changing the name of it to disambiguate meaning).
> 
> The library resulted by this was corrupted, when trying to run a
> linked executable I got:
> ./example: error while loading shared libraries: ./example: undefined symbol:
> __Q24geos15GeometryFactoryPQ24geos14PrecisionModeli
> 
> Question 1: do you think using 'const' there is the right way to go ?

Most likely
http://www.parashift.com/c++-faq-lite/const-correctness.html
 
> Question 2: do you think I've a bogus compiler ? (gcc-2.96)

If it hasn't been patched *yes* 2.96 was a RedHat special that needed patching 
from it's original release < note this was not an official gnu release >  
check RedHat site for needed patches
http://gcc.gnu.org/gcc-2.96.html

The *real* 3.x series is *much* more C++ standard conformant and seems
to produce slightly faster code esp on the newer procesors

If you do upgrade I reccomend 3.3.1 < the current release >
http://gcc.gnu.org/gcc-3.3/changes.html

Norman

From strk at keybit.net  Thu Oct  9 12:55:40 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] use of const in GeometryFactory constructor
In-Reply-To: <EKEJIKAILPONGGENMBGAEEBGFAAA.nhv@cape.com>;
	from nhv@cape.com on Thu, Oct 09, 2003 at 06:10:41AM -0400
References: <20031009113240.A87844@freek.keybit.net>
	<EKEJIKAILPONGGENMBGAEEBGFAAA.nhv@cape.com>
Message-ID: <20031009185540.A90861@freek.keybit.net>

Ok, problems with compiler seems to be gone (dunno how)...
I've already added a const keyword to PrecisionModel *
argument of GoemetryFactory constructor.

Right now I'm in the process of formalizing the const nature
of the CoordinateList * passed to the LineString constructor,
and this is being really really long ... it is tainting the
whole code set !

.. we might have found a good way to consistency ..

--strk;


nhv wrote:
> strk writes:
> > 
> > GeometryFactory(PrecisionModel * newPrecisionModel, int SRID)
> > Will copy the PrecisionModel arg into private space.
> > 
> > The arguments naming convention used elsewere makes you think
> > the PresionModel object has to be created on purpose and thus
> > that you'll have to forget about it. Anyway this is not the
> > actual implementation and I don't know about usage of it
> > by other GEOS parts.
> > 
> > As a test, I tried to "formalize" the implementation behaviour
> > adding a 'const' in front of the first arg both in GeometryFactory.cpp
> > and geom.h (and changing the name of it to disambiguate meaning).
> > 
> > The library resulted by this was corrupted, when trying to run a
> > linked executable I got:
> > ./example: error while loading shared libraries: ./example: undefined symbol:
> > __Q24geos15GeometryFactoryPQ24geos14PrecisionModeli
> > 
> > Question 1: do you think using 'const' there is the right way to go ?
> 
> Most likely
> http://www.parashift.com/c++-faq-lite/const-correctness.html
>  
> > Question 2: do you think I've a bogus compiler ? (gcc-2.96)
> 
> If it hasn't been patched *yes* 2.96 was a RedHat special that needed patching 
> from it's original release < note this was not an official gnu release >  
> check RedHat site for needed patches
> http://gcc.gnu.org/gcc-2.96.html
> 
> The *real* 3.x series is *much* more C++ standard conformant and seems
> to produce slightly faster code esp on the newer procesors
> 
> If you do upgrade I reccomend 3.3.1 < the current release >
> http://gcc.gnu.org/gcc-3.3/changes.html
> 
> Norman
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From pramsey at refractions.net  Thu Oct  9 13:06:25 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] use of const in GeometryFactory constructor
In-Reply-To: <20031009185540.A90861@freek.keybit.net>
References: <20031009113240.A87844@freek.keybit.net>
 <EKEJIKAILPONGGENMBGAEEBGFAAA.nhv@cape.com>
 <20031009185540.A90861@freek.keybit.net>
Message-ID: <3F859591.3090707@refractions.net>

Keep in mind that some of the design decisions WRT pass-by-reference vs 
pass-by-value were made for performance reasons early on. Check your 
performance with the TestLineSweep program regularly and make sure 
things do not get worse while they get better...

P.

strk wrote:
> Ok, problems with compiler seems to be gone (dunno how)...
> I've already added a const keyword to PrecisionModel *
> argument of GoemetryFactory constructor.
> 
> Right now I'm in the process of formalizing the const nature
> of the CoordinateList * passed to the LineString constructor,
> and this is being really really long ... it is tainting the
> whole code set !
> 
> .. we might have found a good way to consistency ..
> 
> --strk;
> 
> 
> nhv wrote:
> 
>>strk writes:
>>
>>>GeometryFactory(PrecisionModel * newPrecisionModel, int SRID)
>>>Will copy the PrecisionModel arg into private space.
>>>
>>>The arguments naming convention used elsewere makes you think
>>>the PresionModel object has to be created on purpose and thus
>>>that you'll have to forget about it. Anyway this is not the
>>>actual implementation and I don't know about usage of it
>>>by other GEOS parts.
>>>
>>>As a test, I tried to "formalize" the implementation behaviour
>>>adding a 'const' in front of the first arg both in GeometryFactory.cpp
>>>and geom.h (and changing the name of it to disambiguate meaning).
>>>
>>>The library resulted by this was corrupted, when trying to run a
>>>linked executable I got:
>>>./example: error while loading shared libraries: ./example: undefined symbol:
>>>__Q24geos15GeometryFactoryPQ24geos14PrecisionModeli
>>>
>>>Question 1: do you think using 'const' there is the right way to go ?
>>
>>Most likely
>>http://www.parashift.com/c++-faq-lite/const-correctness.html
>> 
>>
>>>Question 2: do you think I've a bogus compiler ? (gcc-2.96)
>>
>>If it hasn't been patched *yes* 2.96 was a RedHat special that needed patching 
>>from it's original release < note this was not an official gnu release >  
>>check RedHat site for needed patches
>>http://gcc.gnu.org/gcc-2.96.html
>>
>>The *real* 3.x series is *much* more C++ standard conformant and seems
>>to produce slightly faster code esp on the newer procesors
>>
>>If you do upgrade I reccomend 3.3.1 < the current release >
>>http://gcc.gnu.org/gcc-3.3/changes.html
>>
>>Norman
>>
>>_______________________________________________
>>geos-devel mailing list
>>geos-devel@geos.refractions.net
>>http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From strk at keybit.net  Thu Oct  9 14:34:11 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] use of const in GeometryFactory constructor
In-Reply-To: <3F859591.3090707@refractions.net>;
	from pramsey@refractions.net on Thu, Oct 09, 2003 at 10:06:25AM -0700
References: <20031009113240.A87844@freek.keybit.net>
	<EKEJIKAILPONGGENMBGAEEBGFAAA.nhv@cape.com>
	<20031009185540.A90861@freek.keybit.net> <3F859591.3090707@refractions.net>
Message-ID: <20031009203411.A91547@freek.keybit.net>

pramsey wrote:
> Keep in mind that some of the design decisions WRT pass-by-reference vs 
> pass-by-value were made for performance reasons early on. Check your 
> performance with the TestLineSweep program regularly and make sure 
> things do not get worse while they get better...
> 
> P.

Right now I'm just "formalizing" current behaviour.
My question about reverting getCoordinates() changes
is still open, and I can also revert LineString constructor
changes.

I think the addition of 'const' keywords in the code will
help all people involved in keeping consistency.

Actually, it brings to attention a lot of other architectural
issues, so much that I would commit the changes made so far to
permit parallel discussion about them. Note that the code will
not compile so far, but will warn about const objects misuse...

What do you think, should I commit ?

--strk;

> 
> strk wrote:
> > Ok, problems with compiler seems to be gone (dunno how)...
> > I've already added a const keyword to PrecisionModel *
> > argument of GoemetryFactory constructor.
> > 
> > Right now I'm in the process of formalizing the const nature
> > of the CoordinateList * passed to the LineString constructor,
> > and this is being really really long ... it is tainting the
> > whole code set !
> > 
> > .. we might have found a good way to consistency ..
> > 
> > --strk;
> > 
> > 
> > nhv wrote:
> > 
> >>strk writes:
> >>
> >>>GeometryFactory(PrecisionModel * newPrecisionModel, int SRID)
> >>>Will copy the PrecisionModel arg into private space.
> >>>
> >>>The arguments naming convention used elsewere makes you think
> >>>the PresionModel object has to be created on purpose and thus
> >>>that you'll have to forget about it. Anyway this is not the
> >>>actual implementation and I don't know about usage of it
> >>>by other GEOS parts.
> >>>
> >>>As a test, I tried to "formalize" the implementation behaviour
> >>>adding a 'const' in front of the first arg both in GeometryFactory.cpp
> >>>and geom.h (and changing the name of it to disambiguate meaning).
> >>>
> >>>The library resulted by this was corrupted, when trying to run a
> >>>linked executable I got:
> >>>./example: error while loading shared libraries: ./example: undefined symbol:
> >>>__Q24geos15GeometryFactoryPQ24geos14PrecisionModeli
> >>>
> >>>Question 1: do you think using 'const' there is the right way to go ?
> >>
> >>Most likely
> >>http://www.parashift.com/c++-faq-lite/const-correctness.html
> >> 
> >>
> >>>Question 2: do you think I've a bogus compiler ? (gcc-2.96)
> >>
> >>If it hasn't been patched *yes* 2.96 was a RedHat special that needed patching 
> >>from it's original release < note this was not an official gnu release >  
> >>check RedHat site for needed patches
> >>http://gcc.gnu.org/gcc-2.96.html
> >>
> >>The *real* 3.x series is *much* more C++ standard conformant and seems
> >>to produce slightly faster code esp on the newer procesors
> >>
> >>If you do upgrade I reccomend 3.3.1 < the current release >
> >>http://gcc.gnu.org/gcc-3.3/changes.html
> >>
> >>Norman
> >>
> >>_______________________________________________
> >>geos-devel mailing list
> >>geos-devel@geos.refractions.net
> >>http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> -- 
>        __
>       /
>       | Paul Ramsey
>       | Refractions Research
>       | Email: pramsey@refractions.net
>       | Phone: (250) 885-0632
>       \_
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From me at yury.ca  Fri Oct 10 04:50:20 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
References: 
	<20031008100925.A77959@freek.keybit.net><01d901c38d7c$22ef11e0$96d16c18@yury>
	<20031008113247.B78558@freek.keybit.net><00eb01c38e48$0a09cdb0$96d16c18@yury>
	<20031009113853.B87844@freek.keybit.net>
Message-ID: <008501c38f0b$8dc02d20$96d16c18@yury>

> strk wrote:
> How do I run the test ?

You can use the test file as an input for XMLTester.cpp (the path to the input
file is specified on line 55 (or 56 for *nix)).

> PS: just a curiosity: do you start fixing bugs @ 02:30:51AM ? ;)
Normally I try to do it a little earlier ;-), but this week I am exceptionally
busy and that is pretty much the only time I can work on GEOS.


Yury


From strk at keybit.net  Fri Oct 10 05:10:58 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] code consistency work
Message-ID: <20031010111058.A96985@freek.keybit.net>

I'm hardly busy solving issued compiler wornings about
'const' objects misuse. Sometimes I did have to make
a copy of an object when there was none before, but
sometimes I did remove copies.

I think this is an important work that needs to be
done before proceeding any further (the earlier you
add 'const' keywords, the easies it will be mantaining
the code). Moreover, I'm touching so many files that I 
would not like to end up with a bunch of conflicts at 
commit time.

I cannot make a pronostic on how much time will this take,
I think I've past half the job needed. Since the beginning... ;)

So is it ok for you if I commit at current status ?
Code is not buildable but further work could be shared ...

--strk;

From strk at keybit.net  Fri Oct 10 22:16:27 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] const introduction
Message-ID: <20031011041627.A6517@freek.keybit.net>

Wow! I did not think it would have been so hard.
I've just committed the first thread of 'const'
specification. It took more then 30 hours to
follow all dependencies started by adding 'const' 
to the first argument of LineString constructor !!!

I committed now because *finally* the code can be built
with no warnings (related to const).
However - since now and then I modified things around
to make compiler happy about const objects - the
doc/example.cpp code segfaults, and I guess it is
not the only one ;)

Please forgive me for having committed such a buggy
code, but I really needed to release the stress
associated with having a completely modified local
CVS tree.

Note that the const introduction process is neither
complete nor definitive, but it is based on deduction
of current behaviours and it is aimed at defining
a consistent interface.

PS: the getCoordinates() method still return a copy.
PPS: many bugs have been fixed.

--strk;

From strk at keybit.net  Fri Oct 10 23:29:04 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] const introduction
In-Reply-To: <20031011041627.A6517@freek.keybit.net>;
	from strk@keybit.net on Sat, Oct 11, 2003 at 04:16:27AM +0200
References: <20031011041627.A6517@freek.keybit.net>
Message-ID: <20031011052904.A7105@freek.keybit.net>

Ok, I've found the bug - a typo ...
I can go to sleep now (I think I'll sleep for 2 days)

--strk;

strk wrote:
> Wow! I did not think it would have been so hard.
> I've just committed the first thread of 'const'
> specification. It took more then 30 hours to
> follow all dependencies started by adding 'const' 
> to the first argument of LineString constructor !!!
> 
> I committed now because *finally* the code can be built
> with no warnings (related to const).
> However - since now and then I modified things around
> to make compiler happy about const objects - the
> doc/example.cpp code segfaults, and I guess it is
> not the only one ;)
> 
> Please forgive me for having committed such a buggy
> code, but I really needed to release the stress
> associated with having a completely modified local
> CVS tree.
> 
> Note that the const introduction process is neither
> complete nor definitive, but it is based on deduction
> of current behaviours and it is aimed at defining
> a consistent interface.
> 
> PS: the getCoordinates() method still return a copy.
> PPS: many bugs have been fixed.
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Oct 13 11:43:26 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
In-Reply-To: <008501c38f0b$8dc02d20$96d16c18@yury>;
	from me@yury.ca on Fri, Oct 10, 2003 at 01:50:20AM -0700
References: 
	<20031008100925.A77959@freek.keybit.net><01d901c38d7c$22ef11e0$96d16c18@yury>
	<20031008113247.B78558@freek.keybit.net><00eb01c38e48$0a09cdb0$96d16c18@yury>
	<20031009113853.B87844@freek.keybit.net> <008501c38f0b$8dc02d20$96d16c18@yury>
Message-ID: <20031013174326.A26554@freek.keybit.net>

me wrote:
> > strk wrote:
> > How do I run the test ?
> 
> You can use the test file as an input for XMLTester.cpp (the path to the input
> file is specified on line 55 (or 56 for *nix)).

What should Case #53 (desc: SegFault) do ?
It segfaults, does it mean it is correct ??
Should I remove it from input file in order to continue checking ?


--strk;

PS: I added to XMLTester.cpp tha ability of using the first argument as
    path to input file.

From me at yury.ca  Mon Oct 13 13:32:03 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
References: 
	<20031008100925.A77959@freek.keybit.net><01d901c38d7c$22ef11e0$96d16c18@yury><20031008113247.B78558@freek.keybit.net><00eb01c38e48$0a09cdb0$96d16c18@yury><20031009113853.B87844@freek.keybit.net>
	<008501c38f0b$8dc02d20$96d16c18@yury> <20031013174326.A26554@freek.keybit.net>
Message-ID: <005601c391af$ec6f0930$96d16c18@yury>

Sorry, I should have put a clearer description there.No, this test shouldn't
segfault. "SegFault" description means that this test used to cause a segfault
in my code.  This problem has since been fixed, so hopefully it doesn't do that
anymore.

Yury

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Monday, October 13, 2003 8:43 AM
Subject: Re: [geos-devel] Was it a big memory leak ?


> me wrote:
> > > strk wrote:
> > > How do I run the test ?
> >
> > You can use the test file as an input for XMLTester.cpp (the path to the
input
> > file is specified on line 55 (or 56 for *nix)).
>
> What should Case #53 (desc: SegFault) do ?
> It segfaults, does it mean it is correct ??
> Should I remove it from input file in order to continue checking ?
>
>
> --strk;
>
> PS: I added to XMLTester.cpp tha ability of using the first argument as
>     path to input file.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Mon Oct 13 13:56:38 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Was it a big memory leak ?
In-Reply-To: <005601c391af$ec6f0930$96d16c18@yury>;
	from me@yury.ca on Mon, Oct 13, 2003 at 10:32:03AM -0700
References: 
	<20031008100925.A77959@freek.keybit.net><01d901c38d7c$22ef11e0$96d16c18@yury><20031008113247.B78558@freek.keybit.net><00eb01c38e48$0a09cdb0$96d16c18@yury><20031009113853.B87844@freek.keybit.net>
	<008501c38f0b$8dc02d20$96d16c18@yury> <20031013174326.A26554@freek.keybit.net>
	<005601c391af$ec6f0930$96d16c18@yury>
Message-ID: <20031013195638.A27555@freek.keybit.net>

me wrote:
> Sorry, I should have put a clearer description there.No, this test shouldn't
> segfault. "SegFault" description means that this test used to cause a segfault
> in my code.  This problem has since been fixed, so hopefully it doesn't do that
> anymore.

Yes it still did. I just fixed (parentGeom used both as argument name
and private element).

--strk;

From strk at keybit.net  Tue Oct 14 06:10:39 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] about getCoordinates()
Message-ID: <20031014121039.A33496@freek.keybit.net>

Since a CoordinateList object does not exists ready to be
returned for Point,Polygon and Collections, obtaining a
pointer to internal CoordinateList for modification does
only make sense for LineString classes and subs.

Now. Since getCoordinates() is a pure virtual method of
the Geometry class I made it a const method (won't modify
own object) and forced LineString to return a copy instead
of a direct pointer so to assure this could not be broken
(I could have getCoordinate() return a const CoordinateList
 instead reducing memory copy but I'd have introduced other
 overheads due to reference counting for those other Classes
 that would have made a copy anyway) 

Finally, since sometimes you really want a direct access to
a LineString CoordinateList (reducing duplicates, reversing
and the like) we have two chances to do this:

1) Implement all modification method in the LineString class
   itself.

2) Make CoordinateList *points public (from protected)

The second one would be faster since no function call would be
implied to get to the actual CoordinateList. We could also
continue to use static methods like
CoordinateList::removeRepeatedPoints(CoordinateList *) or
CoordinateList::reverse(CoordinateList *) instead of having
to make them non-static.

I opt for the second. Any suggestions on this ?

From strk at keybit.net  Wed Oct 15 05:54:34 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] about getCoordinates()
In-Reply-To: <20031014121039.A33496@freek.keybit.net>;
	from strk@keybit.net on Tue, Oct 14, 2003 at 12:10:39PM +0200
References: <20031014121039.A33496@freek.keybit.net>
Message-ID: <20031015115434.A43389@freek.keybit.net>

Ok, since I did not get any comment on this... that's what I've worked out:
I added a getCoordinatesRO() method for LineString class returning
the internal CoordinateList object as a const (ReadOnly).

In this way we gain performace for operations that only need read access
to CoordinateList.

Arbitrary modifications of a LineString Coordinates are still possible
using the public setPoints() method.

--strk;


strk wrote:
> Since a CoordinateList object does not exists ready to be
> returned for Point,Polygon and Collections, obtaining a
> pointer to internal CoordinateList for modification does
> only make sense for LineString classes and subs.
> 
> Now. Since getCoordinates() is a pure virtual method of
> the Geometry class I made it a const method (won't modify
> own object) and forced LineString to return a copy instead
> of a direct pointer so to assure this could not be broken
> (I could have getCoordinate() return a const CoordinateList
>  instead reducing memory copy but I'd have introduced other
>  overheads due to reference counting for those other Classes
>  that would have made a copy anyway) 
> 
> Finally, since sometimes you really want a direct access to
> a LineString CoordinateList (reducing duplicates, reversing
> and the like) we have two chances to do this:
> 
> 1) Implement all modification method in the LineString class
>    itself.
> 
> 2) Make CoordinateList *points public (from protected)
> 
> The second one would be faster since no function call would be
> implied to get to the actual CoordinateList. We could also
> continue to use static methods like
> CoordinateList::removeRepeatedPoints(CoordinateList *) or
> CoordinateList::reverse(CoordinateList *) instead of having
> to make them non-static.
> 
> I opt for the second. Any suggestions on this ?
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Thu Oct 16 09:10:18 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Leaks are gone
Message-ID: <20031016151018.A53589@freek.keybit.net>

Well, almost ;)
There is a 32bytes definitely lost running XMLTester on the
test data provided by Yury. Allocated bytes are for an Empty
LineString forming an Empty Polygon. Yury, any help on this ?
Does XMLTester fail to delete Geometries resulting from EMPTY
XML reads ?

Then - I get from valgrind notice of 480492 bytes in 23 blocks
still reachable. XMLTester is now using Unload::Release(), so
we might be facing libstdc++ smart memory caching / bugus
released version here. Can anybody else try this version ?

--strk;


From pschirus at gmx.net  Thu Oct 16 11:29:25 2003
From: pschirus at gmx.net (Christian Pschierer)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
Message-ID: <Pine.GHP.4.21.0310151722180.29287-100000@wpax13.physik.uni-wuerzburg.de>

Hi all,

we are currently writing a little application which checks geometries for
true intersections and returns the area of the intersection.

...
if( ( g1->intersects( g2 ) == TRUE ) &&
    ( g1->touches( g2 ) == FALSE ) ){
   intersectionArea = g1->intersection( g2 )->getArea();
...

On Linux this works pretty well. On Windows XP (Visual Studio 6.0) and
Irix (MIPSpro Compilers: Version 7.3.1.3m) we found 2 polygons which cause
an Exception in intersection().

We traced the error back to the file
 geos/source/graph/DirectedEdgeStar.cpp:178

if (state==LINKING_TO_OUTGOING) {
   if (firstOut==NULL)
      throw new TopologyException("no outgoing dirEdge
      found",&(getCoordinate()));
...

Any ideas what causes this problem and how to solve it? Our guess is, that
some kind of numerical precision problem leads to this behavior, as Linux
computes an area of 0 for in this case.

Below you can find a modified SimpleWKTTester-program which can reproduce
this error on Windows and Irix.


Greetings
Christian Pschierer


P.S.:
 The TopologyException-Class is missing the toString()-Method. 
Can someone with write-Access to the CVS-Repository please copy this
method from source/util/GEOSException.cpp to
source/geom/TopologyException.cpp? Thank you.


WKTIn:
POLYGON(( -79.63495899324135500000 43.68317101967772900000,
 -79.63535258791171100000 43.68308676161363700000,
 -79.63709417370184000000 43.68469600959869600000,
 -79.63582188599052400000 43.68383905676894600000,
 -79.63495899324135500000 43.68317101967772900000))
POLYGON(( -79.63544261367904700000 43.68354543050776300000,
 -79.63538454138728200000 43.68359271151414400000,
 -79.63528343774432000000 43.68352100382917100000,
 -79.63533917745682800000 43.68346535191968600000,
 -79.63544261367904700000 43.68354543050776300000))



Main.cpp:

#include <iostream>
#include <fstream>

#include "headers/io.h"

using namespace std;
using namespace geos;

int main(int argc, char** argv)
{
	 
	try {
		ifstream in("WKTIn");
		string instr;
		WKTReader *r = new WKTReader(new GeometryFactory(new
PrecisionModel(),10));
		Geometry *g1;
		Geometry *g2;
		Geometry *intersectg1g2;
		bool intersect;
		bool touch;

		getline(in,instr);
		g1=r->read(instr);
		getline(in,instr);
		g2=r->read(instr);

		intersect=g1->intersects(g2);
		if(intersect)
			cout << "g1 and g2 intersect!" << endl;
		else
			cout << "g1 and g2 do not intersect!" << endl;

		touch=g1->touches(g2);
		if(touch)
			cout << "g1 and g2 touch!" << endl;
		else
			cout << "g1 and g2 do not touch!" << endl;

		///////////////////////////////////////////
		// This leads to an exception under WinXP and Irix

		cout << "Before intersection" << endl;
		intersectg1g2=g1->intersection( g2 );
		cout << "After intersection" << endl;
		
		///////////////////////////////////////////

		if( intersectg1g2 ) {
			cout << "The intersection has an area of " <<
intersectg1g2->getArea() << endl;
		}
	}
	catch (GEOSException *ge) {
		cout << "Caught GEOSException!" << endl;
		cout << ge->toString() << endl;
	}
	catch (TopologyException *te) {
		cout << "Caught TopologyException!" << endl;
	}

	return 0;
}





From mbdavis at VividSolutions.com  Thu Oct 16 11:54:30 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DFC4F@venus.VividSolutions.com>

This is definitely a robustness issue (related to the "numerical precision" you mention, but more complex).  JTS 1.3 exhibits the same problem.  I'm happy to say that the forthcoming JTS 1.4 contains some bug fixes which seem to solve this problem.  These will need to be rolled into GEOS sometime... (but first - FIXING LEAKS!)

Strange that Linux doesn't exhibit the same problem.  What hardware are you running on?  These kind of problems will work better on machines with higher precision floating point - could that be the difference?    Otherwise I can't imagine what aspect of the Linux box would make a difference (I'd like to attribute it to a higher quality OS, but realistically that's unlikely to have any effect...)

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: Christian Pschierer [mailto:pschirus@gmx.net]
> Sent: Thursday, October 16, 2003 8:29 AM
> To: GEOS Development List
> Subject: [geos-devel] intersect/intersection() problem under Win
> 
> 
> Hi all,
> 
> we are currently writing a little application which checks 
> geometries for
> true intersections and returns the area of the intersection.
> 
> ...
> if( ( g1->intersects( g2 ) == TRUE ) &&
>     ( g1->touches( g2 ) == FALSE ) ){
>    intersectionArea = g1->intersection( g2 )->getArea();
> ...
> 
> On Linux this works pretty well. On Windows XP (Visual Studio 6.0) and
> Irix (MIPSpro Compilers: Version 7.3.1.3m) we found 2 
> polygons which cause
> an Exception in intersection().
> 
> We traced the error back to the file
>  geos/source/graph/DirectedEdgeStar.cpp:178
> 
> if (state==LINKING_TO_OUTGOING) {
>    if (firstOut==NULL)
>       throw new TopologyException("no outgoing dirEdge
>       found",&(getCoordinate()));
> ...
> 
> Any ideas what causes this problem and how to solve it? Our 
> guess is, that
> some kind of numerical precision problem leads to this 
> behavior, as Linux
> computes an area of 0 for in this case.
> 
> Below you can find a modified SimpleWKTTester-program which 
> can reproduce
> this error on Windows and Irix.
> 
> 
> Greetings
> Christian Pschierer
> 
> 
> P.S.:
>  The TopologyException-Class is missing the toString()-Method. 
> Can someone with write-Access to the CVS-Repository please copy this
> method from source/util/GEOSException.cpp to
> source/geom/TopologyException.cpp? Thank you.
> 
> 
> WKTIn:
> POLYGON(( -79.63495899324135500000 43.68317101967772900000,
>  -79.63535258791171100000 43.68308676161363700000,
>  -79.63709417370184000000 43.68469600959869600000,
>  -79.63582188599052400000 43.68383905676894600000,
>  -79.63495899324135500000 43.68317101967772900000))
> POLYGON(( -79.63544261367904700000 43.68354543050776300000,
>  -79.63538454138728200000 43.68359271151414400000,
>  -79.63528343774432000000 43.68352100382917100000,
>  -79.63533917745682800000 43.68346535191968600000,
>  -79.63544261367904700000 43.68354543050776300000))
> 
> 
> 
> Main.cpp:
> 
> #include <iostream>
> #include <fstream>
> 
> #include "headers/io.h"
> 
> using namespace std;
> using namespace geos;
> 
> int main(int argc, char** argv)
> {
> 	 
> 	try {
> 		ifstream in("WKTIn");
> 		string instr;
> 		WKTReader *r = new WKTReader(new GeometryFactory(new
> PrecisionModel(),10));
> 		Geometry *g1;
> 		Geometry *g2;
> 		Geometry *intersectg1g2;
> 		bool intersect;
> 		bool touch;
> 
> 		getline(in,instr);
> 		g1=r->read(instr);
> 		getline(in,instr);
> 		g2=r->read(instr);
> 
> 		intersect=g1->intersects(g2);
> 		if(intersect)
> 			cout << "g1 and g2 intersect!" << endl;
> 		else
> 			cout << "g1 and g2 do not intersect!" << endl;
> 
> 		touch=g1->touches(g2);
> 		if(touch)
> 			cout << "g1 and g2 touch!" << endl;
> 		else
> 			cout << "g1 and g2 do not touch!" << endl;
> 
> 		///////////////////////////////////////////
> 		// This leads to an exception under WinXP and Irix
> 
> 		cout << "Before intersection" << endl;
> 		intersectg1g2=g1->intersection( g2 );
> 		cout << "After intersection" << endl;
> 		
> 		///////////////////////////////////////////
> 
> 		if( intersectg1g2 ) {
> 			cout << "The intersection has an area of " <<
> intersectg1g2->getArea() << endl;
> 		}
> 	}
> 	catch (GEOSException *ge) {
> 		cout << "Caught GEOSException!" << endl;
> 		cout << ge->toString() << endl;
> 	}
> 	catch (TopologyException *te) {
> 		cout << "Caught TopologyException!" << endl;
> 	}
> 
> 	return 0;
> }
> 
> 
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at keybit.net  Thu Oct 16 12:09:11 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
In-Reply-To: 
	<5A94289A9268514C8D6C0F1FF44BA0271DFC4F@venus.VividSolutions.com>; from
	mbdavis@VividSolutions.com on Thu, Oct 16, 2003 at 08:54:30AM -0700
References: <5A94289A9268514C8D6C0F1FF44BA0271DFC4F@venus.VividSolutions.com>
Message-ID: <20031016180911.A55229@freek.keybit.net>

mbdavis wrote:
> This is definitely a robustness issue (related to the "numerical precision" you mention, but more complex).  JTS 1.3 exhibits the same problem.  I'm happy to say that the forthcoming JTS 1.4 contains some bug fixes which seem to solve this problem.  These will need to be rolled into GEOS sometime... (but first - FIXING LEAKS!)

Remember, if you want something done fast, pay the developer.

--strk;

From strk at keybit.net  Thu Oct 16 13:12:21 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
In-Reply-To: 
	<Pine.GHP.4.21.0310151722180.29287-100000@wpax13.physik.uni-wuerzburg.de>;
	from pschirus@gmx.net on Thu, Oct 16, 2003 at 05:29:25PM +0200
References: <Pine.GHP.4.21.0310151722180.29287-100000@wpax13.physik.uni-wuerzburg.de>
Message-ID: <20031016191221.A55720@freek.keybit.net>

pschirus wrote:
> P.S.:
>  The TopologyException-Class is missing the toString()-Method. 
> Can someone with write-Access to the CVS-Repository please copy this
> method from source/util/GEOSException.cpp to
> source/geom/TopologyException.cpp? Thank you.

I've made TopologyException derive from GEOSException,
you should get what you need now.

--strk;

From pschirus at gmx.net  Thu Oct 16 14:46:48 2003
From: pschirus at gmx.net (Christian Pschierer)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
In-Reply-To: <20031016191221.A55720@freek.keybit.net>
Message-ID: <Pine.GHP.4.21.0310161957420.17164-100000@wpax13.physik.uni-wuerzburg.de>


On Thu, 16 Oct 2003, strk wrote:

> pschirus wrote:
> > P.S.:
> >  The TopologyException-Class is missing the toString()-Method. 
> > Can someone with write-Access to the CVS-Repository please copy this
> > method from source/util/GEOSException.cpp to
> > source/geom/TopologyException.cpp? Thank you.
> 
> I've made TopologyException derive from GEOSException,
> you should get what you need now.

Ok, thanks a lot.

Christian



From pschirus at gmx.net  Thu Oct 16 14:47:54 2003
From: pschirus at gmx.net (Christian Pschierer)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DFC4F@venus.VividSolutions.com>
Message-ID: <Pine.GHP.4.21.0310161958330.17164-100000@wpax13.physik.uni-wuerzburg.de>


On Thu, 16 Oct 2003, Martin Davis wrote:

> This is definitely a robustness issue (related to the "numerical
> precision" you mention, but more complex).  JTS 1.3 exhibits the same
> problem.  I'm happy to say that the forthcoming JTS 1.4 contains some
> bug fixes which seem to solve this problem.  These will need to be
> rolled into GEOS sometime... (but first - FIXING LEAKS!)

This is true. When simply computing the intersection() for all polygons
and checking for areas > 0, the application runs 10% faster than with the
additional intersects/touches checks, but leaks about 70MB memory.


> Strange that Linux doesn't exhibit the same problem.  What hardware
> are you running on?  These kind of problems will work better on
> machines with higher precision floating point - could that be the
> difference?  

I don't think so. We are using the same Laptops under Linux and WinXP (see
below), so it must be a software/compiler problem.

Linux: Centrino 1.6GHz (SuSE8.2, gcc3.3) and Athlon 2GHz (SuSE8.1, gcc3.2)
Windows: Centrino 1.6GHz (WinXP, MS Visual Studio 6.0 with the standard MS
	 Compilers)
Irix: Onyx (R10000 CPU with R10010 FPU)

If I have some time I will try the Intel Compiler on Linux and see what
happens.


Christian




From dblasby at refractions.net  Thu Oct 16 15:04:49 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Doc for the DE-9IM
Message-ID: <3F8EEBD1.1070106@refractions.net>

Would it be possible to add this to the JTS and GEOS documenation?  The 
order of the 9 components of the DE-9IM matrix is confusing and not 
specified.
---------------------------------------------

The order of the elements of the DE-9IM intersection matrix looks like this:

For A.relate(B)::

                                    B
                   Interior     Boundary    Exterior
     Interior         1st          2nd        3rd
A   Boundary         4th          5th        6th
     Exterior         7th          8th        9th


So "**F******"  means that the Interior of A must not
interact with the Exterior of B.


From nhv at cape.com  Fri Oct 17 01:36:12 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] intersect/intersection() problem under Win
In-Reply-To: <20031016180911.A55229@freek.keybit.net>
Message-ID: <EKEJIKAILPONGGENMBGAEEJPFBAA.nhv@cape.com>

strk writes:
> 
> mbdavis wrote:
> > This is definitely a robustness issue (related to the "numerical precision" you mention, but more complex).  JTS 1.3 
> exhibits the same problem.  I'm happy to say that the forthcoming JTS 1.4 contains some bug fixes which seem to solve 
> this problem.  These will need to be rolled into GEOS sometime... (but first - FIXING LEAKS!)
> 
> Remember, if you want something done fast, pay the developer.

Now where have I heard that before :-))

Cheers

Norman

From me at yury.ca  Fri Oct 17 01:55:55 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Leaks are gone
References: <20031016151018.A53589@freek.keybit.net>
Message-ID: <01d101c39473$574622f0$96d16c18@yury>

I've just fixed that Empty Polygon memory leak (new code is in CVS), but since
my leak finder can't detect still reachable blocks, the caching question still
stands.

Yury

----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: <geos-devel@geos.refractions.net>
Cc: <pramsey@refractions.net>
Sent: Thursday, October 16, 2003 6:10 AM
Subject: [geos-devel] Leaks are gone


> Well, almost ;)
> There is a 32bytes definitely lost running XMLTester on the
> test data provided by Yury. Allocated bytes are for an Empty
> LineString forming an Empty Polygon. Yury, any help on this ?
> Does XMLTester fail to delete Geometries resulting from EMPTY
> XML reads ?
>
> Then - I get from valgrind notice of 480492 bytes in 23 blocks
> still reachable. XMLTester is now using Unload::Release(), so
> we might be facing libstdc++ smart memory caching / bugus
> released version here. Can anybody else try this version ?
>
> --strk;
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Fri Oct 17 05:14:24 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Leaks are gone
In-Reply-To: <01d101c39473$574622f0$96d16c18@yury>;
	from me@yury.ca on Thu, Oct 16, 2003 at 10:55:55PM -0700
References: <20031016151018.A53589@freek.keybit.net>
	<01d101c39473$574622f0$96d16c18@yury>
Message-ID: <20031017111424.A61784@freek.keybit.net>

me wrote:
> I've just fixed that Empty Polygon memory leak (new code is in CVS), but since
> my leak finder can't detect still reachable blocks, the caching question still
> stands.

Everything sounds leak-free to me.
I'm pretty sure the caching question is an actual bug of my compiler. 
I'll get a stable version of it and see what happen.

--strk;

> 
> Yury
> 
> ----- Original Message ----- 
> From: "strk" <strk@keybit.net>
> To: <geos-devel@geos.refractions.net>
> Cc: <pramsey@refractions.net>
> Sent: Thursday, October 16, 2003 6:10 AM
> Subject: [geos-devel] Leaks are gone
> 
> 
> > Well, almost ;)
> > There is a 32bytes definitely lost running XMLTester on the
> > test data provided by Yury. Allocated bytes are for an Empty
> > LineString forming an Empty Polygon. Yury, any help on this ?
> > Does XMLTester fail to delete Geometries resulting from EMPTY
> > XML reads ?
> >
> > Then - I get from valgrind notice of 480492 bytes in 23 blocks
> > still reachable. XMLTester is now using Unload::Release(), so
> > we might be facing libstdc++ smart memory caching / bugus
> > released version here. Can anybody else try this version ?
> >
> > --strk;
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From pramsey at refractions.net  Sat Oct 18 19:46:18 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Still Leaking in PostGIS
Message-ID: <3F91D0CA.3070906@refractions.net>

I loaded up a polygon table, and then did this:

   select wb_id from csn_waterbodies where isvalid(the_geom) limit 100;

I did this over and over. Each time, the postgres instance I was 
connected to got a little bit larger. Probably this is repeatable with 
any data set at all, but I can provide the 100 records I used if necessary.

P.

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_



From strk at keybit.net  Sun Oct 19 06:14:08 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Still Leaking in PostGIS
In-Reply-To: <3F91D0CA.3070906@refractions.net>;
	from pramsey@refractions.net on Sat, Oct 18, 2003 at 04:46:18PM -0700
References: <3F91D0CA.3070906@refractions.net>
Message-ID: <20031019121408.A75198@freek.keybit.net>

pramsey wrote:
> I loaded up a polygon table, and then did this:
> 
>    select wb_id from csn_waterbodies where isvalid(the_geom) limit 100;
> 
> I did this over and over. Each time, the postgres instance I was 
> connected to got a little bit larger. Probably this is repeatable with 
> any data set at all, but I can provide the 100 records I used if necessary.
> 
> P.

We should inspect stdlibc++ "smart" automatic memory caching/management.
I think if we can keep lib/compiler from using this "feature" (as an option
at compile/run time) it will be easier to debug these kind of leaks.

PS: is anybody mantaining the build system ?

--strk;

From strk at keybit.net  Sun Oct 19 06:39:46 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] const-correctness
Message-ID: <20031019123946.D75198@freek.keybit.net>

What do you think about getting things const correct in GEOS ?
It helped a lot finding and fixing bugs so far, but it is still
an incomplete work.

Quoting from C++ FAQ Lite:
<http://www.parashift.com/c++-faq-lite/const-correctness.html#faq-18.3>

[18.3] Should I try to get things const correct "sooner" or "later"?

   At the very, very, very beginning.

   Back-patching const correctness results in a snowball effect: every
   const you add "over here" requires four more to be added "over there."

--strk;

From strk at keybit.net  Sun Oct 19 06:48:42 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection interfaces
Message-ID: <20031019124841.E75198@freek.keybit.net>

When constructing geometry collections (Multi*, GeometryCollection)
we will pass the constructors a vector to "component" geometries.
The vector will be untouched while the pointed-to geometries will
be taken on by created object. This means that you can NOT
delete base geometries passed to geometry collection constructor.
This also mean that you can not do something like:

PSEUDOCODE:
	1: point = createPoint;
	2: line = createLine;
	3: polygon = createPolygon;
	4: collection1 = createCollection(point, line);
	5: collection2 = createCollection(point, polygon);
	6: destroy collection1;
	7: destroy collection2;

This is because line 6 will destroy all collection1 components that
is point and line. Line 7 will try to destroy components of collection2
which are point and polygon. Well: point will have been already destroyed,
segfault!

Needless to say you won't be able to use point, line, polygon any further
because you are left (after line 6) with pointer to "private" space!
You have loaded weapons in your hands!

What do you think about this ? I have few proposal, but I'd like to hear
from you first.

--strk;

From nhv at cape.com  Sun Oct 19 07:29:56 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection interfaces
In-Reply-To: <20031019124841.E75198@freek.keybit.net>
Message-ID: <EKEJIKAILPONGGENMBGAGEPMFBAA.nhv@cape.com>

strk writes:
> 
> When constructing geometry collections (Multi*, GeometryCollection)
> we will pass the constructors a vector to "component" geometries.
> The vector will be untouched while the pointed-to geometries will
> be taken on by created object. This means that you can NOT
> delete base geometries passed to geometry collection constructor.
> This also mean that you can not do something like:
> 
> PSEUDOCODE:
> 	1: point = createPoint;
> 	2: line = createLine;
> 	3: polygon = createPolygon;
> 	4: collection1 = createCollection(point, line);
> 	5: collection2 = createCollection(point, polygon);
> 	6: destroy collection1;
> 	7: destroy collection2;
> 
> This is because line 6 will destroy all collection1 components that
> is point and line. Line 7 will try to destroy components of collection2
> which are point and polygon. Well: point will have been already destroyed,
> segfault!
> 
> Needless to say you won't be able to use point, line, polygon any further
> because you are left (after line 6) with pointer to "private" space!
> You have loaded weapons in your hands!

IMO we should be using something like
http://www.boost.org/libs/smart_ptr/smart_ptr.htm
so these sorts of things are a non-issue

Cheers

Norman


From pramsey at refractions.net  Sun Oct 19 11:59:18 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Still Leaking in PostGIS
In-Reply-To: <20031019121408.A75198@freek.keybit.net>
Message-ID: <324AE4DE-024D-11D8-BA9B-000393D33C2E@refractions.net>

In an adhoc way. Since Yury does not use it, either me or Norman have 
been putting it back in order after major commits.

On Sunday, October 19, 2003, at 03:14 AM, strk wrote:

> pramsey wrote:
>> I loaded up a polygon table, and then did this:
>>
>>    select wb_id from csn_waterbodies where isvalid(the_geom) limit 
>> 100;
>>
>> I did this over and over. Each time, the postgres instance I was
>> connected to got a little bit larger. Probably this is repeatable with
>> any data set at all, but I can provide the 100 records I used if 
>> necessary.
>>
>> P.
>
> We should inspect stdlibc++ "smart" automatic memory 
> caching/management.
> I think if we can keep lib/compiler from using this "feature" (as an 
> option
> at compile/run time) it will be easier to debug these kind of leaks.
>
> PS: is anybody mantaining the build system ?
>
> --strk;
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From strk at keybit.net  Mon Oct 20 10:04:37 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Re: [postgis-users] Dissolve obsolete polygon borders
In-Reply-To: <5B025B1F39D6D4119F5700508BEEEC66F94859@srsofaioi4546.ktso.ch>;
	from Horst.Duester@bd.so.ch on Fri, Oct 17, 2003 at 01:55:29PM +0100
References: <5B025B1F39D6D4119F5700508BEEEC66F94859@srsofaioi4546.ktso.ch>
Message-ID: <20031020160437.A88895@freek.keybit.net>

There are two cases for this to happen, can you update your GEOS sources
and try again (a more explicit exception message have been introduced)

--strk;

Horst.Duester wrote:
> strk
> 
> I recompiled GEOS and PostGIS and tied to dissolve the large table. Now GEOS
> responsed with a NOTICE:
> 
> NOTICE:  AssertionFaiedException: found null Directed Edge
> ERROR:  GEOS union() threw an error!
> 
> Horst
> 
> -----Urspr?ngliche Nachricht-----
> Von: strk [mailto:strk@keybit.net]
> Gesendet am: Donnerstag, 16. Oktober 2003 16:57
> An: D?ster Horst
> Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> 
> Do you have heterogeneous geometries in your table ?
> 
> --stkr;
> 
> Horst.Duester wrote:
> > Ok. Now I tried to dissolve a large table with more than 80'000 Records.
> > After nearly 20 Minutes of processing time PostGIS breakes with 
> > 
> > GEOS union() threw an error!
> > 
> > A NOTICE didn't appear. 
> > 
> > Horst
> > 
> > 
> > 
> > 
> > -----Urspr?ngliche Nachricht-----
> > Von: strk [mailto:strk@keybit.net]
> > Gesendet am: Donnerstag, 16. Oktober 2003 16:16
> > An: D?ster Horst
> > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > 
> > Didn't you get an Exception thrown ?
> > 
> > Horst.Duester wrote:
> > > Thank you for your response. I doesn't work, PostgreSQL responses with
> > > "GEOS union() threw an error!".
> > 
> > Please, check if that error is now more meaningful.
> > A NOTICE should appear right before that response.
> > 
> > --strk;
> > 
> > Horst.Duester wrote:
> > > Yes, great now it works and I'm able to dissolve my geometry. Thank you
> > very
> > > much for your efforts and your time you spent for me.
> > > 
> > > Horst
> > > 
> > > 
> > > 
> > > -----Urspr?ngliche Nachricht-----
> > > Von: strk [mailto:strk@keybit.net]
> > > Gesendet am: Donnerstag, 16. Oktober 2003 08:21
> > > An: PostGIS Users Discussion
> > > Cc: Horst.Duester@bd.so.ch
> > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > 
> > > Horst.Duester wrote:
> > > > strk
> > > > 
> > > > Thank you for your response. I doesn't work, PostgreSQL responses with
> 
> > > > "GEOS union() threw an error!".
> > > > 
> > > > Horst
> > > 
> > > Try downloading the latest postgis from CVS repository, it now contains
> > > new code to show a more meaningful message (thanks Dave).
> > > 
> > > --strk;
> > > 
> > > > 
> > > > 
> > > > -----Urspr?ngliche Nachricht-----
> > > > Von: strk [mailto:strk@keybit.net]
> > > > Gesendet am: Mittwoch, 15. Oktober 2003 14:58
> > > > An: PostGIS Users Discussion
> > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > 
> > > > Try this:
> > > > 
> > > > CREATE AGGREGATE unite (
> > > >         sfunc = GeomUnion,
> > > >         basetype = geometry,
> > > >         stype = geometry
> > > > ); -- this creates an aggregate out of GEOS's geomunion()
> > > > 
> > > > -- and this is your query 
> > > > SELECT your_attribute, unite(the_geom)
> > > > 	FROM your_table
> > > > 	GROUP BY your_attribute;
> > > > 
> > > > Note that GEOS cvs version is pretty memory absorbing (actually
> leaking)
> > > > and probably also buggy. Please let me know whether it worked for you.
> > > > 
> > > > --strk;
> > > > 
> > > > Horst.Duester wrote:
> > > > > Is there a way to dissolve obsolete borders between polygons with
> > equal
> > > > > attributes??
> > > > >  
> > > > > I will appreciate your hints.
> > > > >  
> > > > > Horst
> > > > > 
> > > > > _______________________________________________
> > > > > postgis-users mailing list
> > > > > postgis-users@postgis.refractions.net
> > > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users

From mbdavis at VividSolutions.com  Mon Oct 20 12:11:16 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] const-correctness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DFC71@venus.VividSolutions.com>

My personal opinion is that it's probably more trouble than it's worth, at this point.  As the FAQ points out it's a bear trying to retrofit const correctness.  

What sort of bugs was it catching?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: Sunday, October 19, 2003 3:40 AM
> To: geos-devel@geos.refractions.net
> Subject: [geos-devel] const-correctness
> 
> 
> What do you think about getting things const correct in GEOS ?
> It helped a lot finding and fixing bugs so far, but it is still
> an incomplete work.
> 
> Quoting from C++ FAQ Lite:
> <http://www.parashift.com/c++-faq-lite/const-correctness.html#
faq-18.3>

[18.3] Should I try to get things const correct "sooner" or "later"?

   At the very, very, very beginning.

   Back-patching const correctness results in a snowball effect: every
   const you add "over here" requires four more to be added "over there."

--strk;

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From mbdavis at VividSolutions.com  Mon Oct 20 12:14:20 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GeometryCollection interfaces
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DFC72@venus.VividSolutions.com>

Personally I felt that this was pretty much an issue for the programmer.  He needs to be aware that he is aliasing Geometrys when he's constructing them, and copy them as necessary.  I don't think this copying should be done internally by GEOS, since it can't know the usage pattern and so may make unecessary copies.

What are your ideas for coping with this?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: Sunday, October 19, 2003 3:49 AM
> To: geos-devel@geos.refractions.net
> Cc: pramsey@refractions.net
> Subject: [geos-devel] GeometryCollection interfaces
> 
> 
> When constructing geometry collections (Multi*, GeometryCollection)
> we will pass the constructors a vector to "component" geometries.
> The vector will be untouched while the pointed-to geometries will
> be taken on by created object. This means that you can NOT
> delete base geometries passed to geometry collection constructor.
> This also mean that you can not do something like:
> 
> PSEUDOCODE:
> 	1: point = createPoint;
> 	2: line = createLine;
> 	3: polygon = createPolygon;
> 	4: collection1 = createCollection(point, line);
> 	5: collection2 = createCollection(point, polygon);
> 	6: destroy collection1;
> 	7: destroy collection2;
> 
> This is because line 6 will destroy all collection1 components that
> is point and line. Line 7 will try to destroy components of 
> collection2
> which are point and polygon. Well: point will have been 
> already destroyed,
> segfault!
> 
> Needless to say you won't be able to use point, line, polygon 
> any further
> because you are left (after line 6) with pointer to "private" space!
> You have loaded weapons in your hands!
> 
> What do you think about this ? I have few proposal, but I'd 
> like to hear
> from you first.
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Mon Oct 20 12:32:14 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] RE: GeometryCollection interfaces & memory management
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0272255D2@venus.VividSolutions.com>

Continuing this thought, my idea is that GeometryCollections own their components, and will delete them when they themselves are deleted.  This means that the coder should *never* pass aliased Geometrys into a GeometryCollection constructor.

Your pseudocode should read:

> > PSEUDOCODE:
> > 	1: point = createPoint;
> > 	2: line = createLine;
> > 	3: polygon = createPolygon;
> > 	4: collection1 = createCollection(point, line);
> > 	5: collection2 = createCollection(point.clone(), polygon );  // copy point since it's already been used
> > 	6: destroy collection1;	// no problem here
> > 	7: destroy collection2;  // or here

This shouldn't be too onerous for users who are using the GEOS functions in fairly constrained ways (e.g. as is the case in PostGIS, I would imagine).

Norman, smart pointers look pretty tricky to understand to me.  In order for GEOS to go that route someone is going to have to take on porting the existing code base and proving that it works, is reasonable maintainable, is open, etc etc.   Also, I don't think that it really buys the user all that much.  I doubt there are very many usage patterns where it really is desired to have aliased Geometrys.  The only reason I can think of is to save space, and that's pretty much a non-issue these days, for any reasonable usage.

It seems to me that the saving grace of GEOS memory management is that the only objects which users might want to persist are Geometrys.  All other objects created by the API are temporary during method invocation.  This might offer another way to guarantee memory safety - develop a memory management layer based on sub-allocation out of an extensible pool of memory.  When a method completes the entire pool is freed.  Anyone have any opinions on whether this is a reasonable strategy?


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: Martin Davis 
> Sent: Monday, October 20, 2003 9:14 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] GeometryCollection interfaces
> 
> 
> Personally I felt that this was pretty much an issue for the 
> programmer.  He needs to be aware that he is aliasing 
> Geometrys when he's constructing them, and copy them as 
> necessary.  I don't think this copying should be done 
> internally by GEOS, since it can't know the usage pattern and 
> so may make unecessary copies.
> 
> What are your ideas for coping with this?
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.
> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> Phone: (250) 385 6040    Fax: (250) 385 6046
> 
> 
> 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: Sunday, October 19, 2003 3:49 AM
> > To: geos-devel@geos.refractions.net
> > Cc: pramsey@refractions.net
> > Subject: [geos-devel] GeometryCollection interfaces
> > 
> > 
> > When constructing geometry collections (Multi*, GeometryCollection)
> > we will pass the constructors a vector to "component" geometries.
> > The vector will be untouched while the pointed-to geometries will
> > be taken on by created object. This means that you can NOT
> > delete base geometries passed to geometry collection constructor.
> > This also mean that you can not do something like:
> > 
> > PSEUDOCODE:
> > 	1: point = createPoint;
> > 	2: line = createLine;
> > 	3: polygon = createPolygon;
> > 	4: collection1 = createCollection(point, line);
> > 	5: collection2 = createCollection(point, polygon);
> > 	6: destroy collection1;
> > 	7: destroy collection2;
> > 
> > This is because line 6 will destroy all collection1 components that
> > is point and line. Line 7 will try to destroy components of 
> > collection2
> > which are point and polygon. Well: point will have been 
> > already destroyed,
> > segfault!
> > 
> > Needless to say you won't be able to use point, line, polygon 
> > any further
> > because you are left (after line 6) with pointer to "private" space!
> > You have loaded weapons in your hands!
> > 
> > What do you think about this ? I have few proposal, but I'd 
> > like to hear
> > from you first.
> > 
> > --strk;
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From pramsey at refractions.net  Mon Oct 20 12:46:37 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
Message-ID: <3F94116D.9040906@refractions.net>

About the PostGIS/GEOS leak I reported, I do not know if I quantified it 
in my email. Even though I was only running isvalid() with a limit of 
100, I was adding over 1Mb of size to the postgres backend with each 
invocation. So, not a memory leak so much as a memory deluge. Could we 
have a bad PostGIS/GEOS interface now, after some of the GEOS changes?
Paul

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From strk at keybit.net  Mon Oct 20 13:14:27 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] const-correctness
In-Reply-To: 
	<5A94289A9268514C8D6C0F1FF44BA0271DFC71@venus.VividSolutions.com>; from
	mbdavis@VividSolutions.com on Mon, Oct 20, 2003 at 09:11:16AM -0700
References: <5A94289A9268514C8D6C0F1FF44BA0271DFC71@venus.VividSolutions.com>
Message-ID: <20031020191427.A90008@freek.keybit.net>

mbdavis wrote:
> My personal opinion is that it's probably more trouble than it's worth, at this point.  As the FAQ points out it's a bear trying to retrofit const correctness.  
> 
> What sort of bugs was it catching?

Modifications made on objects passed for read-only purposes..
Can't remember exactly, but I had to define filter_ro, filter_rw
and apply_ro, apply_rw because there was an inconsistency between
the two about whether they were keeping the passed argument const.

But mainly it has to do with ability of read/mantain the code since
I've the impression that the code has been changed many times for
each method to touch/non_touch given argument copy/non_copying it
and the like. If introduction of 'const' makes it clear what to do
and *sometimes* forbid you from touching an untouchable object
I think it is worth introducing.

Yes, it might be *very* long to do in one shot, but can be done
for one particular interface down to its diramation in reduced time.

For example, if we'd like to fix the semantic of GeometryCollection
constructors we should use 'const' to set it. And... yes... comments
above each method should do more the contrary of 'const'.

--strk;


From strk at keybit.net  Mon Oct 20 13:45:56 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] RE: GeometryCollection interfaces & memory
	management
In-Reply-To: 
	<5A94289A9268514C8D6C0F1FF44BA0272255D2@venus.VividSolutions.com>; from
	mbdavis@VividSolutions.com on Mon, Oct 20, 2003 at 09:32:14AM -0700
References: <5A94289A9268514C8D6C0F1FF44BA0272255D2@venus.VividSolutions.com>
Message-ID: <20031020194556.B90008@freek.keybit.net>

mbdavis wrote:
> Continuing this thought, my idea is that GeometryCollections own their components, and will delete them when they themselves are deleted.  This means that the coder should *never* pass aliased Geometrys into a GeometryCollection constructor.

Is there any way to *force* this [ SHOULD NEVER ] rule ?
Isn't it safer just to make the copy for him ?
He will be left with references to 'protected' space !

If reducing copies from GEOS internal is the problem we
could provide another interface or (better) declare some
'friends' to directly access protected area.

Finally, whatever method we decide to use we should at least
make both vector and geometries of the same kind (cont or not).
Right now the vector will be copied while the geometries will not!

> Your pseudocode should read:
> 
> > > PSEUDOCODE:
> > > 	1: point = createPoint;
> > > 	2: line = createLine;
> > > 	3: polygon = createPolygon;
> > > 	4: collection1 = createCollection(point, line);
> > > 	5: collection2 = createCollection(point.clone(), polygon );  // copy point since it's already been used
> > > 	6: destroy collection1;	// no problem here
> > > 	7: destroy collection2;  // or here

My pseudocode did not go any further, but you can imagine programmer could
also want to:

 	8: destroy polygon
 	9: destroy line
     	10: destory point

Maybe after having modified the line multiple times as a DP simplification
demo ;)

> 
> This shouldn't be too onerous for users who are using the GEOS functions in fairly constrained ways (e.g. as is the case in PostGIS, I would imagine).
> 
> Norman, smart pointers look pretty tricky to understand to me.  In order for GEOS to go that route someone is going to have to take on porting the existing code base and proving that it works, is reasonable maintainable, is open, etc etc.   Also, I don't think that it really buys the user all that much.  I doubt there are very many usage patterns where it really is desired to have aliased Geometrys.  The only reason I can think of is to save space, and that's pretty much a non-issue these days, for any reasonable usage.
> 
> It seems to me that the saving grace of GEOS memory management is that the only objects which users might want to persist are Geometrys.  All other objects created by the API are temporary during method invocation.  This might offer another way to guarantee memory safety - develop a memory management layer based on sub-allocation out of an extensible pool of memory.  When a method completes the entire pool is freed.  Anyone have any opinions on whether this is a reasonable strategy?

I think smart pointer would make the code even less readable and harly
controllable.

The memory management layer could be a good idea but first of all we'll
need to decide the scope of this entire pool. Which methods will create
a new pool ? How long will these pool last ? I feel confortable with
the general assumption about Geometry-only persistence.

--strk;

> > -----Original Message-----
> > From: Martin Davis 
> > Sent: Monday, October 20, 2003 9:14 AM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] GeometryCollection interfaces
> > 
> > 
> > Personally I felt that this was pretty much an issue for the 
> > programmer.  He needs to be aware that he is aliasing 
> > Geometrys when he's constructing them, and copy them as 
> > necessary.  I don't think this copying should be done 
> > internally by GEOS, since it can't know the usage pattern and 
> > so may make unecessary copies.
> > 
> > What are your ideas for coping with this?
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.
> > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > Phone: (250) 385 6040    Fax: (250) 385 6046
> > 
> > 
> > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: Sunday, October 19, 2003 3:49 AM
> > > To: geos-devel@geos.refractions.net
> > > Cc: pramsey@refractions.net
> > > Subject: [geos-devel] GeometryCollection interfaces
> > > 
> > > 
> > > When constructing geometry collections (Multi*, GeometryCollection)
> > > we will pass the constructors a vector to "component" geometries.
> > > The vector will be untouched while the pointed-to geometries will
> > > be taken on by created object. This means that you can NOT
> > > delete base geometries passed to geometry collection constructor.
> > > This also mean that you can not do something like:
> > > 
> > > PSEUDOCODE:
> > > 	1: point = createPoint;
> > > 	2: line = createLine;
> > > 	3: polygon = createPolygon;
> > > 	4: collection1 = createCollection(point, line);
> > > 	5: collection2 = createCollection(point, polygon);
> > > 	6: destroy collection1;
> > > 	7: destroy collection2;
> > > 
> > > This is because line 6 will destroy all collection1 components that
> > > is point and line. Line 7 will try to destroy components of 
> > > collection2
> > > which are point and polygon. Well: point will have been 
> > > already destroyed,
> > > segfault!
> > > 
> > > Needless to say you won't be able to use point, line, polygon 
> > > any further
> > > because you are left (after line 6) with pointer to "private" space!
> > > You have loaded weapons in your hands!
> > > 
> > > What do you think about this ? I have few proposal, but I'd 
> > > like to hear
> > > from you first.
> > > 
> > > --strk;

From strk at keybit.net  Mon Oct 20 13:47:07 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
In-Reply-To: <3F94116D.9040906@refractions.net>;
	from pramsey@refractions.net on Mon, Oct 20, 2003 at 09:46:37AM -0700
References: <3F94116D.9040906@refractions.net>
Message-ID: <20031020194707.C90008@freek.keybit.net>

pramsey wrote:
> About the PostGIS/GEOS leak I reported, I do not know if I quantified it 
> in my email. Even though I was only running isvalid() with a limit of 
> 100, I was adding over 1Mb of size to the postgres backend with each 
> invocation. So, not a memory leak so much as a memory deluge. Could we 
> have a bad PostGIS/GEOS interface now, after some of the GEOS changes?
> Paul

Yes. May be. I'll check tomorrow (tuesday).


--strk;

From me at yury.ca  Mon Oct 20 13:51:12 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net>
Message-ID: <009301c39732$c306af20$96d16c18@yury>

I wonder if that leak could also be caused by the caching problem (from
libstdc++ smart memory management). Unfortunately (as all of you probably know
by now), my leak detector doesn't detect that. Can anyone with valgrind check if
that is the case?

Yury
----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Monday, October 20, 2003 10:47 AM
Subject: Re: [geos-devel] PostGIS Leak


> pramsey wrote:
> > About the PostGIS/GEOS leak I reported, I do not know if I quantified it
> > in my email. Even though I was only running isvalid() with a limit of
> > 100, I was adding over 1Mb of size to the postgres backend with each
> > invocation. So, not a memory leak so much as a memory deluge. Could we
> > have a bad PostGIS/GEOS interface now, after some of the GEOS changes?
> > Paul
>
> Yes. May be. I'll check tomorrow (tuesday).
>
>
> --strk;
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Mon Oct 20 13:57:52 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] WKTWriter bug ?
Message-ID: <20031020195752.D90008@freek.keybit.net>

There seems to be a bug in the WKTWriter.
Try uncommenting line 206 of doc/example.cpp
and setting numgeoms = 5 at line 172.

A point will be created and, when printed will segfault.

Valgrind reports automatic string destruction to be responsible.
Do you have any hints about string usage (I'm not familiar with it) ?
Is adding constant strings ("this like") to a string object safe ?
will returning a string copy all string components ?
This is driving me crazy since redirecting output to a file makes
the process live more then when printing to console !!

--strk;

From strk at keybit.net  Mon Oct 20 15:53:09 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
In-Reply-To: <20031020194707.C90008@freek.keybit.net>;
	from strk@keybit.net on Mon, Oct 20, 2003 at 07:47:07PM +0200
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net>
Message-ID: <20031020215309.A91255@freek.keybit.net>

strk wrote:
> pramsey wrote:
> > About the PostGIS/GEOS leak I reported, I do not know if I quantified it 
> > in my email. Even though I was only running isvalid() with a limit of 
> > 100, I was adding over 1Mb of size to the postgres backend with each 
> > invocation. So, not a memory leak so much as a memory deluge. Could we 
> > have a bad PostGIS/GEOS interface now, after some of the GEOS changes?
> > Paul
> 
> Yes. May be. I'll check tomorrow (tuesday).

I did check today. Please try now.
--strk;

From pramsey at refractions.net  Mon Oct 20 17:44:02 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOS/PostGIS Leak
Message-ID: <3F945722.1060901@refractions.net>

That seems to have killed it. I am now running

   select gid from csn_waterbodies where not isvalid(the_geom)

and not going above 6Mb.

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_



From pramsey at refractions.net  Tue Oct 21 01:29:03 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Release Time?
Message-ID: <3F94C41F.7050804@refractions.net>


Could I hear some opinions about the pros/cons of doing a 1.0 release 
soon? Things seem moderately stable and working at this point, and a 1.0 
release could sync with a postgis 0.8 release.

Paul

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From nhv at cape.com  Tue Oct 21 02:05:50 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Release Time?
In-Reply-To: <3F94C41F.7050804@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAOEEJFCAA.nhv@cape.com>

Paul Ramsey writes:
> 
> Could I hear some opinions about the pros/cons of doing a 1.0 release 
> soon? Things seem moderately stable and working at this point, and a 1.0 
> release could sync with a postgis 0.8 release.

IMO making a release is almost always a good idea IAW the
'release early, release often principal' but .....

I would label it 0.1 

Cheers

Norman




From strk at keybit.net  Tue Oct 21 02:53:34 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Release Time?
In-Reply-To: <3F94C41F.7050804@refractions.net>;
	from pramsey@refractions.net on Mon, Oct 20, 2003 at 10:29:03PM -0700
References: <3F94C41F.7050804@refractions.net>
Message-ID: <20031021085334.B91255@freek.keybit.net>

pramsey wrote:
> 
> Could I hear some opinions about the pros/cons of doing a 1.0 release 
> soon? Things seem moderately stable and working at this point, and a 1.0 
> release could sync with a postgis 0.8 release.

pros: a lot more people will help detecting bugs.
cons: more people will have forced upgrade problems when and if we
      change public interfaces.

If we can make at least one user layer consistent (might be the
GeometryFactory) it might be easier. 


--strk;


From strk at keybit.net  Tue Oct 21 02:56:46 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
In-Reply-To: <009301c39732$c306af20$96d16c18@yury>;
	from me@yury.ca on Mon, Oct 20, 2003 at 10:51:12AM -0700
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net> <009301c39732$c306af20$96d16c18@yury>
Message-ID: <20031021085646.C91255@freek.keybit.net>

Can you try reproducing the bug I reported about WKTPrinting a point
geometry ? I can't understant if that is a problem with my environment.

--strk;

me wrote:
> I wonder if that leak could also be caused by the caching problem (from
> libstdc++ smart memory management). Unfortunately (as all of you probably know
> by now), my leak detector doesn't detect that. Can anyone with valgrind check if
> that is the case?
> 
> Yury
> ----- Original Message ----- 
> From: "strk" <strk@keybit.net>
> To: "GEOS Development List" <geos-devel@geos.refractions.net>
> Sent: Monday, October 20, 2003 10:47 AM
> Subject: Re: [geos-devel] PostGIS Leak
> 
> 
> > pramsey wrote:
> > > About the PostGIS/GEOS leak I reported, I do not know if I quantified it
> > > in my email. Even though I was only running isvalid() with a limit of
> > > 100, I was adding over 1Mb of size to the postgres backend with each
> > > invocation. So, not a memory leak so much as a memory deluge. Could we
> > > have a bad PostGIS/GEOS interface now, after some of the GEOS changes?
> > > Paul
> >
> > Yes. May be. I'll check tomorrow (tuesday).
> >
> >
> > --strk;
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From me at yury.ca  Tue Oct 21 03:16:37 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net> <009301c39732$c306af20$96d16c18@yury>
	<20031021085646.C91255@freek.keybit.net>
Message-ID: <008a01c397a3$45f8c2e0$96d16c18@yury>

Strangely enough your example runs fine on my system and I get no segfault while
printing the point.

Yury

P.S. Sorry for the delay, but Monday is my "busy" day


----- Original Message ----- 
From: "strk" <strk@keybit.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Cc: <me@yury.ca>
Sent: Monday, October 20, 2003 11:56 PM
Subject: Re: [geos-devel] PostGIS Leak


> Can you try reproducing the bug I reported about WKTPrinting a point
> geometry ? I can't understant if that is a problem with my environment.
>
> --strk;
>
> me wrote:
> > I wonder if that leak could also be caused by the caching problem (from
> > libstdc++ smart memory management). Unfortunately (as all of you probably
know
> > by now), my leak detector doesn't detect that. Can anyone with valgrind
check if
> > that is the case?
> >
> > Yury
> > ----- Original Message ----- 
> > From: "strk" <strk@keybit.net>
> > To: "GEOS Development List" <geos-devel@geos.refractions.net>
> > Sent: Monday, October 20, 2003 10:47 AM
> > Subject: Re: [geos-devel] PostGIS Leak
> >
> >
> > > pramsey wrote:
> > > > About the PostGIS/GEOS leak I reported, I do not know if I quantified it
> > > > in my email. Even though I was only running isvalid() with a limit of
> > > > 100, I was adding over 1Mb of size to the postgres backend with each
> > > > invocation. So, not a memory leak so much as a memory deluge. Could we
> > > > have a bad PostGIS/GEOS interface now, after some of the GEOS changes?
> > > > Paul
> > >
> > > Yes. May be. I'll check tomorrow (tuesday).
> > >
> > >
> > > --strk;
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at keybit.net  Tue Oct 21 10:53:12 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] 
 [Horst.Duester@bd.so.ch: AW: [postgis-users] Dissolve obsolete
 polygon borders]
Message-ID: <20031021165312.A98117@freek.keybit.net>

Are these bugs or normal administration ?
I mean: does it have to do with malformed/unsupported input geometries
or with bogus GEOS code ? Any hint on this ?

Horst, please, continue this on the mailing list.

--strk;

----- Forwarded message from D?ster Horst <Horst.Duester@bd.so.ch> -----

From: D?ster Horst <Horst.Duester@bd.so.ch>
To: "'strk'" <strk@keybit.net>
Subject: AW: [postgis-users] Dissolve obsolete polygon borders
Date: Tue, 21 Oct 2003 11:23:30 +0100

strk

Now Postgis responses with the following NOTICE/MESSAGE

NOTICE:  TopologyException: side location conflict (628374,239597)
ERROR:  GEOS union() threw an error!


Horst

-----Urspr?ngliche Nachricht-----
Von: strk [mailto:strk@keybit.net]
Gesendet am: Montag, 20. Oktober 2003 15:05
An: D?ster Horst
Cc: geos-devel@geos.refractions.net
Betreff: Re: [postgis-users] Dissolve obsolete polygon borders

There are two cases for this to happen, can you update your GEOS sources
and try again (a more explicit exception message have been introduced)

--strk;

Horst.Duester wrote:
> strk
> 
> I recompiled GEOS and PostGIS and tied to dissolve the large table. Now
GEOS
> responsed with a NOTICE:
> 
> NOTICE:  AssertionFaiedException: found null Directed Edge
> ERROR:  GEOS union() threw an error!
> 
> Horst
> 
> -----Urspr?ngliche Nachricht-----
> Von: strk [mailto:strk@keybit.net]
> Gesendet am: Donnerstag, 16. Oktober 2003 16:57
> An: D?ster Horst
> Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> 
> Do you have heterogeneous geometries in your table ?
> 
> --stkr;
> 
> Horst.Duester wrote:
> > Ok. Now I tried to dissolve a large table with more than 80'000 Records.
> > After nearly 20 Minutes of processing time PostGIS breakes with 
> > 
> > GEOS union() threw an error!
> > 
> > A NOTICE didn't appear. 
> > 
> > Horst
> > 
> > 
> > 
> > 
> > -----Urspr?ngliche Nachricht-----
> > Von: strk [mailto:strk@keybit.net]
> > Gesendet am: Donnerstag, 16. Oktober 2003 16:16
> > An: D?ster Horst
> > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > 
> > Didn't you get an Exception thrown ?
> > 
> > Horst.Duester wrote:
> > > Thank you for your response. I doesn't work, PostgreSQL responses with
> > > "GEOS union() threw an error!".
> > 
> > Please, check if that error is now more meaningful.
> > A NOTICE should appear right before that response.
> > 
> > --strk;
> > 
> > Horst.Duester wrote:
> > > Yes, great now it works and I'm able to dissolve my geometry. Thank
you
> > very
> > > much for your efforts and your time you spent for me.
> > > 
> > > Horst
> > > 
> > > 
> > > 
> > > -----Urspr?ngliche Nachricht-----
> > > Von: strk [mailto:strk@keybit.net]
> > > Gesendet am: Donnerstag, 16. Oktober 2003 08:21
> > > An: PostGIS Users Discussion
> > > Cc: Horst.Duester@bd.so.ch
> > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > 
> > > Horst.Duester wrote:
> > > > strk
> > > > 
> > > > Thank you for your response. I doesn't work, PostgreSQL responses
with
> 
> > > > "GEOS union() threw an error!".
> > > > 
> > > > Horst
> > > 
> > > Try downloading the latest postgis from CVS repository, it now
contains
> > > new code to show a more meaningful message (thanks Dave).
> > > 
> > > --strk;
> > > 
> > > > 
> > > > 
> > > > -----Urspr?ngliche Nachricht-----
> > > > Von: strk [mailto:strk@keybit.net]
> > > > Gesendet am: Mittwoch, 15. Oktober 2003 14:58
> > > > An: PostGIS Users Discussion
> > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > 
> > > > Try this:
> > > > 
> > > > CREATE AGGREGATE unite (
> > > >         sfunc = GeomUnion,
> > > >         basetype = geometry,
> > > >         stype = geometry
> > > > ); -- this creates an aggregate out of GEOS's geomunion()
> > > > 
> > > > -- and this is your query 
> > > > SELECT your_attribute, unite(the_geom)
> > > > 	FROM your_table
> > > > 	GROUP BY your_attribute;
> > > > 
> > > > Note that GEOS cvs version is pretty memory absorbing (actually
> leaking)
> > > > and probably also buggy. Please let me know whether it worked for
you.
> > > > 
> > > > --strk;
> > > > 
> > > > Horst.Duester wrote:
> > > > > Is there a way to dissolve obsolete borders between polygons with
> > equal
> > > > > attributes??
> > > > >  
> > > > > I will appreciate your hints.
> > > > >  
> > > > > Horst
> > > > > 
> > > > > _______________________________________________
> > > > > postgis-users mailing list
> > > > > postgis-users@postgis.refractions.net
> > > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users

----- End forwarded message -----

From strk at keybit.net  Tue Oct 21 11:01:46 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Copying / Non copying constructors
Message-ID: <20031021170146.B98117@freek.keybit.net>

Please not that Polygon constructor "suffers" from the same
problems as GeometryCollection. Constituent LinearRings will
not be copied; differently from GeometryCollection though,
vector of (holes) LinearRings is not copied as well.

You make up a LinearRing as the shell and a vector or
LinearRings as the holes, then you pass everything to 
Polygon constructor and are left with pointers to
untouchable memory.

Please consider this other element in further consistency 
related discussion.

--strk;


From strk at keybit.net  Tue Oct 21 11:03:39 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] WKTWriter and LinearRing
Message-ID: <20031021170339.C98117@freek.keybit.net>

I've added LinearRing support (some time ago) to WKTWriter.
I made it print LINEARRING(()) style, but is that WKT ??
Should I just handle it as a normal LINESTRING instead ?

--strk;

From Horst.Duester at bd.so.ch  Tue Oct 21 12:05:37 2003
From: Horst.Duester at bd.so.ch (=?ISO-8859-1?Q?D=FCster_Horst?=)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] AW:Dissolve obsolete polygon borders
Message-ID: <5B025B1F39D6D4119F5700508BEEEC66F9486E@srsofaioi4546.ktso.ch>

strk

I took a look at the point where the conflict is located (swiss coordinates)
and figured out that there is an overlapping area of three polygones. The
group attribute of this polygons have the same value. 

Could it be that this constallation causes the error?

Horst

-----Urspr?ngliche Nachricht-----
Von: strk [mailto:strk@keybit.net]
Gesendet am: Dienstag, 21. Oktober 2003 15:53
An: geos-devel@geos.refractions.net
Cc: horst.duester@bd.so.ch
Betreff: [Horst.Duester@bd.so.ch: AW: [postgis-users] Dissolve obsolete
polygon borders]

Are these bugs or normal administration ?
I mean: does it have to do with malformed/unsupported input geometries
or with bogus GEOS code ? Any hint on this ?

Horst, please, continue this on the mailing list.

--strk;

----- Forwarded message from D?ster Horst <Horst.Duester@bd.so.ch> -----

From: D?ster Horst <Horst.Duester@bd.so.ch>
To: "'strk'" <strk@keybit.net>
Subject: AW: [postgis-users] Dissolve obsolete polygon borders
Date: Tue, 21 Oct 2003 11:23:30 +0100

strk

Now Postgis responses with the following NOTICE/MESSAGE

NOTICE:  TopologyException: side location conflict (628374,239597)
ERROR:  GEOS union() threw an error!


Horst

-----Urspr?ngliche Nachricht-----
Von: strk [mailto:strk@keybit.net]
Gesendet am: Montag, 20. Oktober 2003 15:05
An: D?ster Horst
Cc: geos-devel@geos.refractions.net
Betreff: Re: [postgis-users] Dissolve obsolete polygon borders

There are two cases for this to happen, can you update your GEOS sources
and try again (a more explicit exception message have been introduced)

--strk;

Horst.Duester wrote:
> strk
> 
> I recompiled GEOS and PostGIS and tied to dissolve the large table. Now
GEOS
> responsed with a NOTICE:
> 
> NOTICE:  AssertionFaiedException: found null Directed Edge
> ERROR:  GEOS union() threw an error!
> 
> Horst
> 
> -----Urspr?ngliche Nachricht-----
> Von: strk [mailto:strk@keybit.net]
> Gesendet am: Donnerstag, 16. Oktober 2003 16:57
> An: D?ster Horst
> Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> 
> Do you have heterogeneous geometries in your table ?
> 
> --stkr;
> 
> Horst.Duester wrote:
> > Ok. Now I tried to dissolve a large table with more than 80'000 Records.
> > After nearly 20 Minutes of processing time PostGIS breakes with 
> > 
> > GEOS union() threw an error!
> > 
> > A NOTICE didn't appear. 
> > 
> > Horst
> > 
> > 
> > 
> > 
> > -----Urspr?ngliche Nachricht-----
> > Von: strk [mailto:strk@keybit.net]
> > Gesendet am: Donnerstag, 16. Oktober 2003 16:16
> > An: D?ster Horst
> > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > 
> > Didn't you get an Exception thrown ?
> > 
> > Horst.Duester wrote:
> > > Thank you for your response. I doesn't work, PostgreSQL responses with
> > > "GEOS union() threw an error!".
> > 
> > Please, check if that error is now more meaningful.
> > A NOTICE should appear right before that response.
> > 
> > --strk;
> > 
> > Horst.Duester wrote:
> > > Yes, great now it works and I'm able to dissolve my geometry. Thank
you
> > very
> > > much for your efforts and your time you spent for me.
> > > 
> > > Horst
> > > 
> > > 
> > > 
> > > -----Urspr?ngliche Nachricht-----
> > > Von: strk [mailto:strk@keybit.net]
> > > Gesendet am: Donnerstag, 16. Oktober 2003 08:21
> > > An: PostGIS Users Discussion
> > > Cc: Horst.Duester@bd.so.ch
> > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > 
> > > Horst.Duester wrote:
> > > > strk
> > > > 
> > > > Thank you for your response. I doesn't work, PostgreSQL responses
with
> 
> > > > "GEOS union() threw an error!".
> > > > 
> > > > Horst
> > > 
> > > Try downloading the latest postgis from CVS repository, it now
contains
> > > new code to show a more meaningful message (thanks Dave).
> > > 
> > > --strk;
> > > 
> > > > 
> > > > 
> > > > -----Urspr?ngliche Nachricht-----
> > > > Von: strk [mailto:strk@keybit.net]
> > > > Gesendet am: Mittwoch, 15. Oktober 2003 14:58
> > > > An: PostGIS Users Discussion
> > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > 
> > > > Try this:
> > > > 
> > > > CREATE AGGREGATE unite (
> > > >         sfunc = GeomUnion,
> > > >         basetype = geometry,
> > > >         stype = geometry
> > > > ); -- this creates an aggregate out of GEOS's geomunion()
> > > > 
> > > > -- and this is your query 
> > > > SELECT your_attribute, unite(the_geom)
> > > > 	FROM your_table
> > > > 	GROUP BY your_attribute;
> > > > 
> > > > Note that GEOS cvs version is pretty memory absorbing (actually
> leaking)
> > > > and probably also buggy. Please let me know whether it worked for
you.
> > > > 
> > > > --strk;
> > > > 
> > > > Horst.Duester wrote:
> > > > > Is there a way to dissolve obsolete borders between polygons with
> > equal
> > > > > attributes??
> > > > >  
> > > > > I will appreciate your hints.
> > > > >  
> > > > > Horst
> > > > > 
> > > > > _______________________________________________
> > > > > postgis-users mailing list
> > > > > postgis-users@postgis.refractions.net
> > > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users

----- End forwarded message -----

From mbdavis at VividSolutions.com  Tue Oct 21 12:07:27 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] [Horst.Duester@bd.so.ch: AW: [postgis-users]
	Dissolve obsoletepolygon borders]
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DFC83@venus.VividSolutions.com>


> I mean: does it have to do with malformed/unsupported input geometries
> or with bogus GEOS code ? Any hint on this ?

Almost certainly neither.  Instead, this is an example of the known limitations with robustness handling in JTS/GEOS.  Unfortunately, currently there's no 100% workaround for this, at least not in the context of PostGIS.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: Tuesday, October 21, 2003 7:53 AM
> To: geos-devel@geos.refractions.net
> Subject: [geos-devel] [Horst.Duester@bd.so.ch: AW: [postgis-users]
> Dissolve obsoletepolygon borders]
> 
> 
> Are these bugs or normal administration ?
> I mean: does it have to do with malformed/unsupported input geometries
> or with bogus GEOS code ? Any hint on this ?
> 
> Horst, please, continue this on the mailing list.
> 
> --strk;
> 
> ----- Forwarded message from D?ster Horst 
> <Horst.Duester@bd.so.ch> -----
> 
> From: D?ster Horst <Horst.Duester@bd.so.ch>
> To: "'strk'" <strk@keybit.net>
> Subject: AW: [postgis-users] Dissolve obsolete polygon borders
> Date: Tue, 21 Oct 2003 11:23:30 +0100
> 
> strk
> 
> Now Postgis responses with the following NOTICE/MESSAGE
> 
> NOTICE:  TopologyException: side location conflict (628374,239597)
> ERROR:  GEOS union() threw an error!
> 
> 
> Horst
> 
> -----Urspr?ngliche Nachricht-----
> Von: strk [mailto:strk@keybit.net]
> Gesendet am: Montag, 20. Oktober 2003 15:05
> An: D?ster Horst
> Cc: geos-devel@geos.refractions.net
> Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> 
> There are two cases for this to happen, can you update your 
> GEOS sources
> and try again (a more explicit exception message have been introduced)
> 
> --strk;
> 
> Horst.Duester wrote:
> > strk
> > 
> > I recompiled GEOS and PostGIS and tied to dissolve the 
> large table. Now
> GEOS
> > responsed with a NOTICE:
> > 
> > NOTICE:  AssertionFaiedException: found null Directed Edge
> > ERROR:  GEOS union() threw an error!
> > 
> > Horst
> > 
> > -----Urspr?ngliche Nachricht-----
> > Von: strk [mailto:strk@keybit.net]
> > Gesendet am: Donnerstag, 16. Oktober 2003 16:57
> > An: D?ster Horst
> > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > 
> > Do you have heterogeneous geometries in your table ?
> > 
> > --stkr;
> > 
> > Horst.Duester wrote:
> > > Ok. Now I tried to dissolve a large table with more than 
> 80'000 Records.
> > > After nearly 20 Minutes of processing time PostGIS breakes with 
> > > 
> > > GEOS union() threw an error!
> > > 
> > > A NOTICE didn't appear. 
> > > 
> > > Horst
> > > 
> > > 
> > > 
> > > 
> > > -----Urspr?ngliche Nachricht-----
> > > Von: strk [mailto:strk@keybit.net]
> > > Gesendet am: Donnerstag, 16. Oktober 2003 16:16
> > > An: D?ster Horst
> > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > 
> > > Didn't you get an Exception thrown ?
> > > 
> > > Horst.Duester wrote:
> > > > Thank you for your response. I doesn't work, PostgreSQL 
> responses with
> > > > "GEOS union() threw an error!".
> > > 
> > > Please, check if that error is now more meaningful.
> > > A NOTICE should appear right before that response.
> > > 
> > > --strk;
> > > 
> > > Horst.Duester wrote:
> > > > Yes, great now it works and I'm able to dissolve my 
> geometry. Thank
> you
> > > very
> > > > much for your efforts and your time you spent for me.
> > > > 
> > > > Horst
> > > > 
> > > > 
> > > > 
> > > > -----Urspr?ngliche Nachricht-----
> > > > Von: strk [mailto:strk@keybit.net]
> > > > Gesendet am: Donnerstag, 16. Oktober 2003 08:21
> > > > An: PostGIS Users Discussion
> > > > Cc: Horst.Duester@bd.so.ch
> > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > 
> > > > Horst.Duester wrote:
> > > > > strk
> > > > > 
> > > > > Thank you for your response. I doesn't work, 
> PostgreSQL responses
> with
> > 
> > > > > "GEOS union() threw an error!".
> > > > > 
> > > > > Horst
> > > > 
> > > > Try downloading the latest postgis from CVS repository, it now
> contains
> > > > new code to show a more meaningful message (thanks Dave).
> > > > 
> > > > --strk;
> > > > 
> > > > > 
> > > > > 
> > > > > -----Urspr?ngliche Nachricht-----
> > > > > Von: strk [mailto:strk@keybit.net]
> > > > > Gesendet am: Mittwoch, 15. Oktober 2003 14:58
> > > > > An: PostGIS Users Discussion
> > > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > > 
> > > > > Try this:
> > > > > 
> > > > > CREATE AGGREGATE unite (
> > > > >         sfunc = GeomUnion,
> > > > >         basetype = geometry,
> > > > >         stype = geometry
> > > > > ); -- this creates an aggregate out of GEOS's geomunion()
> > > > > 
> > > > > -- and this is your query 
> > > > > SELECT your_attribute, unite(the_geom)
> > > > > 	FROM your_table
> > > > > 	GROUP BY your_attribute;
> > > > > 
> > > > > Note that GEOS cvs version is pretty memory absorbing 
> (actually
> > leaking)
> > > > > and probably also buggy. Please let me know whether 
> it worked for
> you.
> > > > > 
> > > > > --strk;
> > > > > 
> > > > > Horst.Duester wrote:
> > > > > > Is there a way to dissolve obsolete borders between 
> polygons with
> > > equal
> > > > > > attributes??
> > > > > >  
> > > > > > I will appreciate your hints.
> > > > > >  
> > > > > > Horst
> > > > > > 
> > > > > > _______________________________________________
> > > > > > postgis-users mailing list
> > > > > > postgis-users@postgis.refractions.net
> > > > > > 
http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users

----- End forwarded message -----

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From mbdavis at VividSolutions.com  Tue Oct 21 12:14:13 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] AW:Dissolve obsolete polygon borders
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DFC85@venus.VividSolutions.com>

Again, this is almost certainly a robustness issue.  Robustness issues typically surface in cases where there is linework in two polygons which is very similar, but not identical.  About all you can do is to fix the linework so that the vertices are either identical or further apart.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: D?ster Horst [mailto:Horst.Duester@bd.so.ch]
> Sent: Tuesday, October 21, 2003 9:06 AM
> To: 'geos-devel@geos.refractions.net'
> Subject: [geos-devel] AW:Dissolve obsolete polygon borders
> 
> 
> strk
> 
> I took a look at the point where the conflict is located 
> (swiss coordinates)
> and figured out that there is an overlapping area of three 
> polygones. The
> group attribute of this polygons have the same value. 
> 
> Could it be that this constallation causes the error?
> 
> Horst
> 
> -----Urspr?ngliche Nachricht-----
> Von: strk [mailto:strk@keybit.net]
> Gesendet am: Dienstag, 21. Oktober 2003 15:53
> An: geos-devel@geos.refractions.net
> Cc: horst.duester@bd.so.ch
> Betreff: [Horst.Duester@bd.so.ch: AW: [postgis-users] 
> Dissolve obsolete
> polygon borders]
> 
> Are these bugs or normal administration ?
> I mean: does it have to do with malformed/unsupported input geometries
> or with bogus GEOS code ? Any hint on this ?
> 
> Horst, please, continue this on the mailing list.
> 
> --strk;
> 
> ----- Forwarded message from D?ster Horst 
> <Horst.Duester@bd.so.ch> -----
> 
> From: D?ster Horst <Horst.Duester@bd.so.ch>
> To: "'strk'" <strk@keybit.net>
> Subject: AW: [postgis-users] Dissolve obsolete polygon borders
> Date: Tue, 21 Oct 2003 11:23:30 +0100
> 
> strk
> 
> Now Postgis responses with the following NOTICE/MESSAGE
> 
> NOTICE:  TopologyException: side location conflict (628374,239597)
> ERROR:  GEOS union() threw an error!
> 
> 
> Horst
> 
> -----Urspr?ngliche Nachricht-----
> Von: strk [mailto:strk@keybit.net]
> Gesendet am: Montag, 20. Oktober 2003 15:05
> An: D?ster Horst
> Cc: geos-devel@geos.refractions.net
> Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> 
> There are two cases for this to happen, can you update your 
> GEOS sources
> and try again (a more explicit exception message have been introduced)
> 
> --strk;
> 
> Horst.Duester wrote:
> > strk
> > 
> > I recompiled GEOS and PostGIS and tied to dissolve the 
> large table. Now
> GEOS
> > responsed with a NOTICE:
> > 
> > NOTICE:  AssertionFaiedException: found null Directed Edge
> > ERROR:  GEOS union() threw an error!
> > 
> > Horst
> > 
> > -----Urspr?ngliche Nachricht-----
> > Von: strk [mailto:strk@keybit.net]
> > Gesendet am: Donnerstag, 16. Oktober 2003 16:57
> > An: D?ster Horst
> > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > 
> > Do you have heterogeneous geometries in your table ?
> > 
> > --stkr;
> > 
> > Horst.Duester wrote:
> > > Ok. Now I tried to dissolve a large table with more than 
> 80'000 Records.
> > > After nearly 20 Minutes of processing time PostGIS breakes with 
> > > 
> > > GEOS union() threw an error!
> > > 
> > > A NOTICE didn't appear. 
> > > 
> > > Horst
> > > 
> > > 
> > > 
> > > 
> > > -----Urspr?ngliche Nachricht-----
> > > Von: strk [mailto:strk@keybit.net]
> > > Gesendet am: Donnerstag, 16. Oktober 2003 16:16
> > > An: D?ster Horst
> > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > 
> > > Didn't you get an Exception thrown ?
> > > 
> > > Horst.Duester wrote:
> > > > Thank you for your response. I doesn't work, PostgreSQL 
> responses with
> > > > "GEOS union() threw an error!".
> > > 
> > > Please, check if that error is now more meaningful.
> > > A NOTICE should appear right before that response.
> > > 
> > > --strk;
> > > 
> > > Horst.Duester wrote:
> > > > Yes, great now it works and I'm able to dissolve my 
> geometry. Thank
> you
> > > very
> > > > much for your efforts and your time you spent for me.
> > > > 
> > > > Horst
> > > > 
> > > > 
> > > > 
> > > > -----Urspr?ngliche Nachricht-----
> > > > Von: strk [mailto:strk@keybit.net]
> > > > Gesendet am: Donnerstag, 16. Oktober 2003 08:21
> > > > An: PostGIS Users Discussion
> > > > Cc: Horst.Duester@bd.so.ch
> > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > 
> > > > Horst.Duester wrote:
> > > > > strk
> > > > > 
> > > > > Thank you for your response. I doesn't work, 
> PostgreSQL responses
> with
> > 
> > > > > "GEOS union() threw an error!".
> > > > > 
> > > > > Horst
> > > > 
> > > > Try downloading the latest postgis from CVS repository, it now
> contains
> > > > new code to show a more meaningful message (thanks Dave).
> > > > 
> > > > --strk;
> > > > 
> > > > > 
> > > > > 
> > > > > -----Urspr?ngliche Nachricht-----
> > > > > Von: strk [mailto:strk@keybit.net]
> > > > > Gesendet am: Mittwoch, 15. Oktober 2003 14:58
> > > > > An: PostGIS Users Discussion
> > > > > Betreff: Re: [postgis-users] Dissolve obsolete polygon borders
> > > > > 
> > > > > Try this:
> > > > > 
> > > > > CREATE AGGREGATE unite (
> > > > >         sfunc = GeomUnion,
> > > > >         basetype = geometry,
> > > > >         stype = geometry
> > > > > ); -- this creates an aggregate out of GEOS's geomunion()
> > > > > 
> > > > > -- and this is your query 
> > > > > SELECT your_attribute, unite(the_geom)
> > > > > 	FROM your_table
> > > > > 	GROUP BY your_attribute;
> > > > > 
> > > > > Note that GEOS cvs version is pretty memory absorbing 
> (actually
> > leaking)
> > > > > and probably also buggy. Please let me know whether 
> it worked for
> you.
> > > > > 
> > > > > --strk;
> > > > > 
> > > > > Horst.Duester wrote:
> > > > > > Is there a way to dissolve obsolete borders between 
> polygons with
> > > equal
> > > > > > attributes??
> > > > > >  
> > > > > > I will appreciate your hints.
> > > > > >  
> > > > > > Horst
> > > > > > 
> > > > > > _______________________________________________
> > > > > > postgis-users mailing list
> > > > > > postgis-users@postgis.refractions.net
> > > > > > 
http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users
> > > > 
> > > > _______________________________________________
> > > > postgis-users mailing list
> > > > postgis-users@postgis.refractions.net
> > > > http://postgis.refractions.net/mailman/listinfo/postgis-users

----- End forwarded message -----

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Oct 21 12:19:55 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
In-Reply-To: <008a01c397a3$45f8c2e0$96d16c18@yury>;
	from me@yury.ca on Tue, Oct 21, 2003 at 12:16:37AM -0700
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net> <009301c39732$c306af20$96d16c18@yury>
	<20031021085646.C91255@freek.keybit.net> <008a01c397a3$45f8c2e0$96d16c18@yury>
Message-ID: <20031021181955.A98688@freek.keybit.net>

me wrote:
> Strangely enough your example runs fine on my system and I get no segfault while
> printing the point.
> 
> Yury

I finally upgraded compiler to version 3.0 and... Magic !
Segfault disappeared. I can finally disable gcc's "smart"
memory magic and... Surprise ! There seems to be a bug
somewhere.. I get a segfault when deleting the vector
used as input to GeometryCollection constructor (a just
in time real life example of consistency issues).

The bug probably does not show up due to memory caching smartness.

I'll inspect on this. BTW to disable memory caching with gcc 2.91,
2.95, 3.0, 3.1 export CXXFLAGS=-D__USE_MALLOC and re-compile both
geos and example.cpp. For gcc >= 3.2.2 export GLIBCPP_FORCE_NEW
and/or GLIBCXX_FORCE_NEW at runtime.

--strk;


From strk at keybit.net  Tue Oct 21 12:23:28 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] AW:Dissolve obsolete polygon borders
In-Reply-To: 
	<5A94289A9268514C8D6C0F1FF44BA0271DFC85@venus.VividSolutions.com>; from
	mbdavis@VividSolutions.com on Tue, Oct 21, 2003 at 09:14:13AM -0700
References: <5A94289A9268514C8D6C0F1FF44BA0271DFC85@venus.VividSolutions.com>
Message-ID: <20031021182328.B98688@freek.keybit.net>

mbdavis wrote:
> Again, this is almost certainly a robustness issue.  Robustness issues typically surface in cases where there is linework in two polygons which is very similar, but not identical.  About all you can do is to fix the linework so that the vertices are either identical or further apart.

Is JCS capable of automating this process ?

--strk;

From mbdavis at VividSolutions.com  Tue Oct 21 13:15:46 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] WKTWriter and LinearRing
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0272255D5@venus.VividSolutions.com>

WKT has no spec for LINEARRING.  We have just added it to JTS with the syntax LINEARRING ( <coordinates> ) (in line with the LINESTRING syntax.  GEOS should follow this syntax.


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: Tuesday, October 21, 2003 8:04 AM
> To: geos-devel@geos.refractions.net
> Subject: [geos-devel] WKTWriter and LinearRing
> 
> 
> I've added LinearRing support (some time ago) to WKTWriter.
> I made it print LINEARRING(()) style, but is that WKT ??
> Should I just handle it as a normal LINESTRING instead ?
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Tue Oct 21 13:20:29 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] AW:Dissolve obsolete polygon borders
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DFC8A@venus.VividSolutions.com>

JCS contains a CoverageCleaning API & GUI, which allows fixing this kind of error.  However, it's not 100% automatic - it can fix about 95% of problems automatically, but in some cases manual input is still required.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046



> -----Original Message-----
> From: strk [mailto:strk@keybit.net]
> Sent: Tuesday, October 21, 2003 9:23 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] AW:Dissolve obsolete polygon borders
> 
> 
> mbdavis wrote:
> > Again, this is almost certainly a robustness issue.  
> Robustness issues typically surface in cases where there is 
> linework in two polygons which is very similar, but not 
> identical.  About all you can do is to fix the linework so 
> that the vertices are either identical or further apart.
> 
> Is JCS capable of automating this process ?
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at keybit.net  Tue Oct 21 20:43:22 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Re: Portable Quadtree
In-Reply-To: 
	<5A94289A9268514C8D6C0F1FF44BA0272255D6@venus.VividSolutions.com>; from
	mbdavis@VividSolutions.com on Tue, Oct 21, 2003 at 11:17:47AM -0700
References: <5A94289A9268514C8D6C0F1FF44BA0272255D6@venus.VividSolutions.com>
Message-ID: <20031022024322.B2160@freek.keybit.net>

I've added an autoconf check to find 64bit integer definition.
Inserted in platform.h ifdef-switced typedef of int64 to long int
or long long int. long int will be the default but if that is not really
64bits a INT64_IS_REALLY32 macro is defined and a warning issued.
When (and if) we'll work out an alternative scheme we'll be able to use
that define to switch between the fast/portable way.

--strk;

mbdavis wrote:
> > used by bintree/Key.cpp. We might want to go for alternative 
> > implementation of these two functions... what do you think ?
> 
> Yep, that should work.  I don't think those functions are intrinsically dependent on IEEE-754 - they just use knowledge of that format to speed up their performance.
> 
> > that since they are guaranteed to be 64bits. What about defining
> > INT64 somewhere in the includes ? 
> 
> Sounds like a good idea.  Again, the use of long is only because that's how Java gives you access to the bit pattern of floating-point.  C++ might be able to use a union (but this would still be implementation dependent, so I guess that doesn't solve the problem)
> 
> > Is there any test that would fail in case of a non IEEE-754 compiled
> > GEOS ?
> 
> The one thing that *might* fail in non-IEEE-754 is the RobustDeterminant computation.  However, I've taken a quick look at the original paper and it doesn't mention any such dependency, so I think we can just plunge ahead and not worry about it.
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.
> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> Phone: (250) 385 6040    Fax: (250) 385 6046
> 
> 
> 
> > -----Original Message-----
> > From: strk [mailto:strk@keybit.net]
> > Sent: Tuesday, October 21, 2003 10:47 AM
> > To: Martin Davis
> > Cc: Paul Ramsey
> > Subject: Re: Portable Quadtree
> > 
> > 
> > I've checked actual usage of bogus methods (powerOf2,biasedExponent).
> > While biasedExponent is only used by Quadtree.cpp, powerOf2 is also
> > used by bintree/Key.cpp. We might want to go for alternative 
> > implementation of these two functions... what do you think ?
> > 
> > Actually I don't know about IEEE-754 popularity. GCC have few
> > command line switches to modify its support but It looks like
> > defaulting to that format. My concern was only about shifting
> > amount bigger then number of bits in data type. It seems that
> > microsoft environment have no problems in 52-shifting long
> > integers, while gcc would like to use 'long long integers' for
> > that since they are guaranteed to be 64bits. What about defining
> > INT64 somewhere in the includes ? postgresql-7.3.4 typedefs int64
> > using autoconf checks. Excerpt from configure.in:
> > 
> > dnl Check to see if we have a working 64-bit integer type.
> > dnl This breaks down into two steps:
> > dnl (1) figure out if the compiler has a 64-bit int type with working
> > dnl arithmetic, and if so
> > dnl (2) see whether snprintf() can format the type correctly. 
> >  (Currently,
> > dnl snprintf is the only library routine we really need for 
> > int8 support.)
> > dnl It's entirely possible to have a compiler that handles a 
> > 64-bit type
> > dnl when the C library doesn't; this is fairly likely when 
> > using gcc on
> > dnl an older platform, for example.
> > dnl If there is no native snprintf() or it does not handle 
> > the 64-bit type,
> > dnl we force our own version of snprintf() to be used instead.
> > dnl Note this test must be run after our initial check for 
> > snprintf/vsnprintf.
> > 
> > PGAC_TYPE_64BIT_INT([long int])
> > 
> > if test x"$HAVE_LONG_INT_64" = x"no" ; then
> >   PGAC_TYPE_64BIT_INT([long long int])
> > fi
> > 
> > 
> > Later on, ifdef HAVE_LONG_INT_64 ... typedefs int64 type.
> > 
> > This might be the first step to take. Then we'll have to make sure
> > IEEE-754 is supported or find a (maybe slower) alternative 
> > implementation.
> > 
> > Is there any test that would fail in case of a non IEEE-754 compiled
> > GEOS ?
> > 
> > --strk;
> > 
> > mbdavis wrote:
> > > uh-oh...  The current quadtree implementation in JTS is 
> > highly dependent on the IEEE-754 double-precision floating 
> > point format.  This obviously isn't very portable to other 
> > architectures.  We may have to think of an alternative 
> > implementation to Quadtree that uses a different scheme to 
> > determine the sizes of the quads.
> > > 
> > > Alternatively, for all internal GEOS uses it is possible to 
> > use a STRtree instead of a Quadtree.  strk, can you try this fix?
> > > 
> > > Martin Davis, Senior Technical Architect
> > > Vivid Solutions Inc.
> > > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > > Phone: (250) 385 6040    Fax: (250) 385 6046
> > > 
> > > 
> > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: Tuesday, October 21, 2003 12:13 AM
> > > > To: Paul Ramsey
> > > > Cc: Martin Davis
> > > > Subject: Re: Portable Quadtree
> > > > 
> > > > 
> > > > pramsey wrote:
> > > > > Ah, OK. I should turn on our old Ultra10 and see if GEOS 
> > > > works at all :/
> > > > > P.
> > > > 
> > > > Simple test on my architecture (i686):
> > > > 	Size of short: 2
> > > > 	Size of int: 4
> > > > 	Size of long: 4
> > > > 	Size of long long: 8
> > > > 
> > > > Type 'long long' is a GNU extension. I don't know what 
> > those Quadtree
> > > > methods are supposed to do, but I'm really not sure about 
> > > > whether or not
> > > > it is really working here and now. G++ warning is:
> > > > 
> > > > 
> > > > index/quadtree/DoubleBits.cpp: In function `double
> > > > geos::DoubleBits::powerOf2 (int)':
> > > > index/quadtree/DoubleBits.cpp:12: warning: left shift count 
> > > > >= width of type
> > > > index/quadtree/DoubleBits.cpp: In method `int 
> > > > geos::DoubleBits::biasedExponent ()':
> > > > ../index/quadtree/DoubleBits.cpp:60: warning: right shift 
> > > > count >= width of type
> > > > 
> > > > powerOf2(int) and biasedExponent() might be broken. Or 
> > they might know
> > > > exacly what they are doing ...
> > > > Martin, can you tell what you think about this ?
> > > > 
> > > > --strk;
> > > > 
> > > > > 
> > > > > On Monday, October 20, 2003, at 12:48 PM, strk wrote:
> > > > > 
> > > > > > pramsey wrote:
> > > > > >>
> > > > > >> Explain? We have a non portable qtree right now?
> > > > > >
> > > > > > There is a bitwise shift of 52 positions on a long integer
> > > > > > which is guaranteed to be at least 32 bit. Compiler issues
> > > > > > a warning so I thought it was a portability issue. Yury
> > > > > > does not get a warning there, I think we should inspect this.
> > > > > >
> > > > > > --strk;
> > > > > >
> > > > 
> > 

From strk at keybit.net  Tue Oct 21 20:53:46 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Re: Portable Quadtree
In-Reply-To: <20031022024322.B2160@freek.keybit.net>;
	from strk@keybit.net on Wed, Oct 22, 2003 at 02:43:22AM +0200
References: <5A94289A9268514C8D6C0F1FF44BA0272255D6@venus.VividSolutions.com>
	<20031022024322.B2160@freek.keybit.net>
Message-ID: <20031022025346.C2160@freek.keybit.net>

I forgot: you'll have to run ./autogen; ./configure again for this to work.

Please report any missing 64bit detection (build will #warn a lot)

--strk;

strk wrote:
> I've added an autoconf check to find 64bit integer definition.
> Inserted in platform.h ifdef-switced typedef of int64 to long int
> or long long int. long int will be the default but if that is not really
> 64bits a INT64_IS_REALLY32 macro is defined and a warning issued.
> When (and if) we'll work out an alternative scheme we'll be able to use
> that define to switch between the fast/portable way.
> 
> --strk;
> 
> mbdavis wrote:
> > > used by bintree/Key.cpp. We might want to go for alternative 
> > > implementation of these two functions... what do you think ?
> > 
> > Yep, that should work.  I don't think those functions are intrinsically dependent on IEEE-754 - they just use knowledge of that format to speed up their performance.
> > 
> > > that since they are guaranteed to be 64bits. What about defining
> > > INT64 somewhere in the includes ? 
> > 
> > Sounds like a good idea.  Again, the use of long is only because that's how Java gives you access to the bit pattern of floating-point.  C++ might be able to use a union (but this would still be implementation dependent, so I guess that doesn't solve the problem)
> > 
> > > Is there any test that would fail in case of a non IEEE-754 compiled
> > > GEOS ?
> > 
> > The one thing that *might* fail in non-IEEE-754 is the RobustDeterminant computation.  However, I've taken a quick look at the original paper and it doesn't mention any such dependency, so I think we can just plunge ahead and not worry about it.
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.
> > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > Phone: (250) 385 6040    Fax: (250) 385 6046
> > 
> > 
> > 
> > > -----Original Message-----
> > > From: strk [mailto:strk@keybit.net]
> > > Sent: Tuesday, October 21, 2003 10:47 AM
> > > To: Martin Davis
> > > Cc: Paul Ramsey
> > > Subject: Re: Portable Quadtree
> > > 
> > > 
> > > I've checked actual usage of bogus methods (powerOf2,biasedExponent).
> > > While biasedExponent is only used by Quadtree.cpp, powerOf2 is also
> > > used by bintree/Key.cpp. We might want to go for alternative 
> > > implementation of these two functions... what do you think ?
> > > 
> > > Actually I don't know about IEEE-754 popularity. GCC have few
> > > command line switches to modify its support but It looks like
> > > defaulting to that format. My concern was only about shifting
> > > amount bigger then number of bits in data type. It seems that
> > > microsoft environment have no problems in 52-shifting long
> > > integers, while gcc would like to use 'long long integers' for
> > > that since they are guaranteed to be 64bits. What about defining
> > > INT64 somewhere in the includes ? postgresql-7.3.4 typedefs int64
> > > using autoconf checks. Excerpt from configure.in:
> > > 
> > > dnl Check to see if we have a working 64-bit integer type.
> > > dnl This breaks down into two steps:
> > > dnl (1) figure out if the compiler has a 64-bit int type with working
> > > dnl arithmetic, and if so
> > > dnl (2) see whether snprintf() can format the type correctly. 
> > >  (Currently,
> > > dnl snprintf is the only library routine we really need for 
> > > int8 support.)
> > > dnl It's entirely possible to have a compiler that handles a 
> > > 64-bit type
> > > dnl when the C library doesn't; this is fairly likely when 
> > > using gcc on
> > > dnl an older platform, for example.
> > > dnl If there is no native snprintf() or it does not handle 
> > > the 64-bit type,
> > > dnl we force our own version of snprintf() to be used instead.
> > > dnl Note this test must be run after our initial check for 
> > > snprintf/vsnprintf.
> > > 
> > > PGAC_TYPE_64BIT_INT([long int])
> > > 
> > > if test x"$HAVE_LONG_INT_64" = x"no" ; then
> > >   PGAC_TYPE_64BIT_INT([long long int])
> > > fi
> > > 
> > > 
> > > Later on, ifdef HAVE_LONG_INT_64 ... typedefs int64 type.
> > > 
> > > This might be the first step to take. Then we'll have to make sure
> > > IEEE-754 is supported or find a (maybe slower) alternative 
> > > implementation.
> > > 
> > > Is there any test that would fail in case of a non IEEE-754 compiled
> > > GEOS ?
> > > 
> > > --strk;
> > > 
> > > mbdavis wrote:
> > > > uh-oh...  The current quadtree implementation in JTS is 
> > > highly dependent on the IEEE-754 double-precision floating 
> > > point format.  This obviously isn't very portable to other 
> > > architectures.  We may have to think of an alternative 
> > > implementation to Quadtree that uses a different scheme to 
> > > determine the sizes of the quads.
> > > > 
> > > > Alternatively, for all internal GEOS uses it is possible to 
> > > use a STRtree instead of a Quadtree.  strk, can you try this fix?
> > > > 
> > > > Martin Davis, Senior Technical Architect
> > > > Vivid Solutions Inc.
> > > > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > > > Phone: (250) 385 6040    Fax: (250) 385 6046
> > > > 
> > > > 
> > > > 
> > > > > -----Original Message-----
> > > > > From: strk [mailto:strk@keybit.net]
> > > > > Sent: Tuesday, October 21, 2003 12:13 AM
> > > > > To: Paul Ramsey
> > > > > Cc: Martin Davis
> > > > > Subject: Re: Portable Quadtree
> > > > > 
> > > > > 
> > > > > pramsey wrote:
> > > > > > Ah, OK. I should turn on our old Ultra10 and see if GEOS 
> > > > > works at all :/
> > > > > > P.
> > > > > 
> > > > > Simple test on my architecture (i686):
> > > > > 	Size of short: 2
> > > > > 	Size of int: 4
> > > > > 	Size of long: 4
> > > > > 	Size of long long: 8
> > > > > 
> > > > > Type 'long long' is a GNU extension. I don't know what 
> > > those Quadtree
> > > > > methods are supposed to do, but I'm really not sure about 
> > > > > whether or not
> > > > > it is really working here and now. G++ warning is:
> > > > > 
> > > > > 
> > > > > index/quadtree/DoubleBits.cpp: In function `double
> > > > > geos::DoubleBits::powerOf2 (int)':
> > > > > index/quadtree/DoubleBits.cpp:12: warning: left shift count 
> > > > > >= width of type
> > > > > index/quadtree/DoubleBits.cpp: In method `int 
> > > > > geos::DoubleBits::biasedExponent ()':
> > > > > ../index/quadtree/DoubleBits.cpp:60: warning: right shift 
> > > > > count >= width of type
> > > > > 
> > > > > powerOf2(int) and biasedExponent() might be broken. Or 
> > > they might know
> > > > > exacly what they are doing ...
> > > > > Martin, can you tell what you think about this ?
> > > > > 
> > > > > --strk;
> > > > > 
> > > > > > 
> > > > > > On Monday, October 20, 2003, at 12:48 PM, strk wrote:
> > > > > > 
> > > > > > > pramsey wrote:
> > > > > > >>
> > > > > > >> Explain? We have a non portable qtree right now?
> > > > > > >
> > > > > > > There is a bitwise shift of 52 positions on a long integer
> > > > > > > which is guaranteed to be at least 32 bit. Compiler issues
> > > > > > > a warning so I thought it was a portability issue. Yury
> > > > > > > does not get a warning there, I think we should inspect this.
> > > > > > >
> > > > > > > --strk;
> > > > > > >
> > > > > 
> > > 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Wed Oct 22 20:06:57 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Re: Portable Quadtree
In-Reply-To: <20031022025346.C2160@freek.keybit.net>;
	from strk@keybit.net on Wed, Oct 22, 2003 at 02:53:46AM +0200
References: <5A94289A9268514C8D6C0F1FF44BA0272255D6@venus.VividSolutions.com>
	<20031022024322.B2160@freek.keybit.net>
	<20031022025346.C2160@freek.keybit.net>
Message-ID: <20031023020657.A10288@freek.keybit.net>

I moved HAVE_LONG_INT_64 and HAVE_LONG_LONG_INT_64 defines in platform.h.
They where solely in config.h but that was a bad setup since forced
inclusion of config.h in other header files just for a typedef.
Since config.h will not get installed with other geos headers inclusion
of it would have failed.

Now both defines and ifdef-typedef switches are in platform.h which is
in turn created by configure using template platform.h.in.

NOTE that right now no module or header includes config.h ...

--strk;

strk wrote:
> I forgot: you'll have to run ./autogen; ./configure again for this to work.
> 
> Please report any missing 64bit detection (build will #warn a lot)
> 
> --strk;
> 
> strk wrote:
> > I've added an autoconf check to find 64bit integer definition.
> > Inserted in platform.h ifdef-switced typedef of int64 to long int
> > or long long int. long int will be the default but if that is not really
> > 64bits a INT64_IS_REALLY32 macro is defined and a warning issued.
> > When (and if) we'll work out an alternative scheme we'll be able to use
> > that define to switch between the fast/portable way.
> > 
> > --strk;
> > 
> > mbdavis wrote:
> > > > used by bintree/Key.cpp. We might want to go for alternative 
> > > > implementation of these two functions... what do you think ?
> > > 
> > > Yep, that should work.  I don't think those functions are intrinsically dependent on IEEE-754 - they just use knowledge of that format to speed up their performance.
> > > 
> > > > that since they are guaranteed to be 64bits. What about defining
> > > > INT64 somewhere in the includes ? 
> > > 
> > > Sounds like a good idea.  Again, the use of long is only because that's how Java gives you access to the bit pattern of floating-point.  C++ might be able to use a union (but this would still be implementation dependent, so I guess that doesn't solve the problem)
> > > 
> > > > Is there any test that would fail in case of a non IEEE-754 compiled
> > > > GEOS ?
> > > 
> > > The one thing that *might* fail in non-IEEE-754 is the RobustDeterminant computation.  However, I've taken a quick look at the original paper and it doesn't mention any such dependency, so I think we can just plunge ahead and not worry about it.
> > > 
> > > Martin Davis, Senior Technical Architect
> > > Vivid Solutions Inc.
> > > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > > Phone: (250) 385 6040    Fax: (250) 385 6046
> > > 
> > > 
> > > 
> > > > -----Original Message-----
> > > > From: strk [mailto:strk@keybit.net]
> > > > Sent: Tuesday, October 21, 2003 10:47 AM
> > > > To: Martin Davis
> > > > Cc: Paul Ramsey
> > > > Subject: Re: Portable Quadtree
> > > > 
> > > > 
> > > > I've checked actual usage of bogus methods (powerOf2,biasedExponent).
> > > > While biasedExponent is only used by Quadtree.cpp, powerOf2 is also
> > > > used by bintree/Key.cpp. We might want to go for alternative 
> > > > implementation of these two functions... what do you think ?
> > > > 
> > > > Actually I don't know about IEEE-754 popularity. GCC have few
> > > > command line switches to modify its support but It looks like
> > > > defaulting to that format. My concern was only about shifting
> > > > amount bigger then number of bits in data type. It seems that
> > > > microsoft environment have no problems in 52-shifting long
> > > > integers, while gcc would like to use 'long long integers' for
> > > > that since they are guaranteed to be 64bits. What about defining
> > > > INT64 somewhere in the includes ? postgresql-7.3.4 typedefs int64
> > > > using autoconf checks. Excerpt from configure.in:
> > > > 
> > > > dnl Check to see if we have a working 64-bit integer type.
> > > > dnl This breaks down into two steps:
> > > > dnl (1) figure out if the compiler has a 64-bit int type with working
> > > > dnl arithmetic, and if so
> > > > dnl (2) see whether snprintf() can format the type correctly. 
> > > >  (Currently,
> > > > dnl snprintf is the only library routine we really need for 
> > > > int8 support.)
> > > > dnl It's entirely possible to have a compiler that handles a 
> > > > 64-bit type
> > > > dnl when the C library doesn't; this is fairly likely when 
> > > > using gcc on
> > > > dnl an older platform, for example.
> > > > dnl If there is no native snprintf() or it does not handle 
> > > > the 64-bit type,
> > > > dnl we force our own version of snprintf() to be used instead.
> > > > dnl Note this test must be run after our initial check for 
> > > > snprintf/vsnprintf.
> > > > 
> > > > PGAC_TYPE_64BIT_INT([long int])
> > > > 
> > > > if test x"$HAVE_LONG_INT_64" = x"no" ; then
> > > >   PGAC_TYPE_64BIT_INT([long long int])
> > > > fi
> > > > 
> > > > 
> > > > Later on, ifdef HAVE_LONG_INT_64 ... typedefs int64 type.
> > > > 
> > > > This might be the first step to take. Then we'll have to make sure
> > > > IEEE-754 is supported or find a (maybe slower) alternative 
> > > > implementation.
> > > > 
> > > > Is there any test that would fail in case of a non IEEE-754 compiled
> > > > GEOS ?
> > > > 
> > > > --strk;
> > > > 
> > > > mbdavis wrote:
> > > > > uh-oh...  The current quadtree implementation in JTS is 
> > > > highly dependent on the IEEE-754 double-precision floating 
> > > > point format.  This obviously isn't very portable to other 
> > > > architectures.  We may have to think of an alternative 
> > > > implementation to Quadtree that uses a different scheme to 
> > > > determine the sizes of the quads.
> > > > > 
> > > > > Alternatively, for all internal GEOS uses it is possible to 
> > > > use a STRtree instead of a Quadtree.  strk, can you try this fix?
> > > > > 
> > > > > Martin Davis, Senior Technical Architect
> > > > > Vivid Solutions Inc.
> > > > > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > > > > Phone: (250) 385 6040    Fax: (250) 385 6046
> > > > > 
> > > > > 
> > > > > 
> > > > > > -----Original Message-----
> > > > > > From: strk [mailto:strk@keybit.net]
> > > > > > Sent: Tuesday, October 21, 2003 12:13 AM
> > > > > > To: Paul Ramsey
> > > > > > Cc: Martin Davis
> > > > > > Subject: Re: Portable Quadtree
> > > > > > 
> > > > > > 
> > > > > > pramsey wrote:
> > > > > > > Ah, OK. I should turn on our old Ultra10 and see if GEOS 
> > > > > > works at all :/
> > > > > > > P.
> > > > > > 
> > > > > > Simple test on my architecture (i686):
> > > > > > 	Size of short: 2
> > > > > > 	Size of int: 4
> > > > > > 	Size of long: 4
> > > > > > 	Size of long long: 8
> > > > > > 
> > > > > > Type 'long long' is a GNU extension. I don't know what 
> > > > those Quadtree
> > > > > > methods are supposed to do, but I'm really not sure about 
> > > > > > whether or not
> > > > > > it is really working here and now. G++ warning is:
> > > > > > 
> > > > > > 
> > > > > > index/quadtree/DoubleBits.cpp: In function `double
> > > > > > geos::DoubleBits::powerOf2 (int)':
> > > > > > index/quadtree/DoubleBits.cpp:12: warning: left shift count 
> > > > > > >= width of type
> > > > > > index/quadtree/DoubleBits.cpp: In method `int 
> > > > > > geos::DoubleBits::biasedExponent ()':
> > > > > > ../index/quadtree/DoubleBits.cpp:60: warning: right shift 
> > > > > > count >= width of type
> > > > > > 
> > > > > > powerOf2(int) and biasedExponent() might be broken. Or 
> > > > they might know
> > > > > > exacly what they are doing ...
> > > > > > Martin, can you tell what you think about this ?
> > > > > > 
> > > > > > --strk;
> > > > > > 
> > > > > > > 
> > > > > > > On Monday, October 20, 2003, at 12:48 PM, strk wrote:
> > > > > > > 
> > > > > > > > pramsey wrote:
> > > > > > > >>
> > > > > > > >> Explain? We have a non portable qtree right now?
> > > > > > > >
> > > > > > > > There is a bitwise shift of 52 positions on a long integer
> > > > > > > > which is guaranteed to be at least 32 bit. Compiler issues
> > > > > > > > a warning so I thought it was a portability issue. Yury
> > > > > > > > does not get a warning there, I think we should inspect this.
> > > > > > > >
> > > > > > > > --strk;
> > > > > > > >
> > > > > > 
> > > > 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Thu Oct 23 12:31:14 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
In-Reply-To: <20031021181955.A98688@freek.keybit.net>;
	from strk@keybit.net on Tue, Oct 21, 2003 at 06:19:55PM +0200
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net> <009301c39732$c306af20$96d16c18@yury>
	<20031021085646.C91255@freek.keybit.net> <008a01c397a3$45f8c2e0$96d16c18@yury>
	<20031021181955.A98688@freek.keybit.net>
Message-ID: <20031023183114.A14985@freek.keybit.net>

Hope this is the last one.
I got g++-3.3.2 / libstdc++5-3.3
exporting GLIBCPP_FORCE_NEW=1 and running doc/example
through valgrind make the following statement:

==20854== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==20854== malloc/free: in use at exit: 0 bytes in 0 blocks.
==20854== malloc/free: 6248 allocs, 6248 frees, 207321 bytes allocated.
==20854== For counts of detected errors, rerun with: -v
==20854== No malloc'd blocks -- no leaks are possible.

FINALLY! :DD

I'm now checking postgis leaks

--strk;

strk wrote:
> me wrote:
> > Strangely enough your example runs fine on my system and I get no segfault while
> > printing the point.
> > 
> > Yury
> 
> I finally upgraded compiler to version 3.0 and... Magic !
> Segfault disappeared. I can finally disable gcc's "smart"
> memory magic and... Surprise ! There seems to be a bug
> somewhere.. I get a segfault when deleting the vector
> used as input to GeometryCollection constructor (a just
> in time real life example of consistency issues).
> 
> The bug probably does not show up due to memory caching smartness.
> 
> I'll inspect on this. BTW to disable memory caching with gcc 2.91,
> 2.95, 3.0, 3.1 export CXXFLAGS=-D__USE_MALLOC and re-compile both
> geos and example.cpp. For gcc >= 3.2.2 export GLIBCPP_FORCE_NEW
> and/or GLIBCXX_FORCE_NEW at runtime.
> 
> --strk;
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From hi_ono2001 at ybb.ne.jp  Thu Oct 23 17:41:19 2003
From: hi_ono2001 at ybb.ne.jp (Hisaji Ono)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Can current release do polygon overlay analysis?
References: <5A94289A9268514C8D6C0F1FF44BA0272255D6@venus.VividSolutions.com>
	<20031022024322.B2160@freek.keybit.net>
Message-ID: <016001c399ae$64ea9400$818001db@webgis>

Hi.

 Current GEOS' CVS really supports intersections, buffering and other
overlay analysis functions.

 Sorry I could not follow topics in this list.

 Thanks.


From pramsey at refractions.net  Thu Oct 23 17:46:30 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Can current release do polygon overlay analysis?
In-Reply-To: <016001c399ae$64ea9400$818001db@webgis>
Message-ID: <5CF4B010-05A2-11D8-9764-000393D33C2E@refractions.net>

Yes, it does all of that. You may find robustness failures in the 
overlay,intersection,buffer code, but it should handle most cases 
gracefully.

P.

On Thursday, October 23, 2003, at 02:41 PM, Hisaji Ono wrote:

>  Current GEOS' CVS really supports intersections, buffering and other
> overlay analysis functions.
>
>  Sorry I could not follow topics in this list.
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From hi_ono2001 at ybb.ne.jp  Thu Oct 23 17:49:37 2003
From: hi_ono2001 at ybb.ne.jp (Hisaji Ono)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Can current release do polygon overlay analysis?
References: <5CF4B010-05A2-11D8-9764-000393D33C2E@refractions.net>
Message-ID: <017201c399af$8e1eb710$818001db@webgis>

Thank you, Paul.

----- Original Message ----- 
From: "Paul Ramsey" <pramsey@refractions.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Friday, October 24, 2003 6:46 AM
Subject: Re: [geos-devel] Can current release do polygon overlay analysis?


> Yes, it does all of that. You may find robustness failures in the 
> overlay,intersection,buffer code, but it should handle most cases 
> gracefully.
> 

 Oh, it's very nice!! Thank you for Canadian People.

 By the way, any sample codes for overlay analysis will be provided?


Regards.

From pramsey at refractions.net  Thu Oct 23 17:56:17 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Can current release do polygon overlay analysis?
In-Reply-To: <017201c399af$8e1eb710$818001db@webgis>
Message-ID: <BA880AFB-05A3-11D8-9764-000393D33C2E@refractions.net>

I may have spoken out of turn: GEOS does union, intersection, buffer.
Overlay analysis can be done through the repeated application of the 
intersection function.  Take two sets of features, A and B. For feature 
A(1), find all features in B that are nearby and run an intersection 
against them. For each intersected resultant B(n), merge the attributes 
of A(1) and B(n). Wash, rinse, repeat.
Paul

On Thursday, October 23, 2003, at 02:49 PM, Hisaji Ono wrote:

> Thank you, Paul.
>
> ----- Original Message -----
> From: "Paul Ramsey" <pramsey@refractions.net>
> To: "GEOS Development List" <geos-devel@geos.refractions.net>
> Sent: Friday, October 24, 2003 6:46 AM
> Subject: Re: [geos-devel] Can current release do polygon overlay 
> analysis?
>
>
>> Yes, it does all of that. You may find robustness failures in the
>> overlay,intersection,buffer code, but it should handle most cases
>> gracefully.
>>
>
>  Oh, it's very nice!! Thank you for Canadian People.
>
>  By the way, any sample codes for overlay analysis will be provided?
>
>
> Regards.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From strk at keybit.net  Fri Oct 24 04:48:45 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] PostGIS Leak
In-Reply-To: <20031023183114.A14985@freek.keybit.net>;
	from strk@keybit.net on Thu, Oct 23, 2003 at 06:31:14PM +0200
References: <3F94116D.9040906@refractions.net>
	<20031020194707.C90008@freek.keybit.net> <009301c39732$c306af20$96d16c18@yury>
	<20031021085646.C91255@freek.keybit.net> <008a01c397a3$45f8c2e0$96d16c18@yury>
	<20031021181955.A98688@freek.keybit.net>
	<20031023183114.A14985@freek.keybit.net>
Message-ID: <20031024104845.A21665@freek.keybit.net>

Postgis does definely have leaks. I removed a few but please
report any repeated-query-makes-postgres-process-size-grow
occurrence since that way it will be easier and quicker.

Right now I'm hunting for a 12bytes leak in geomunion.

Note that in order to avoid "smart" memory caching you might
need to export GLIBCPP_FORCE_NEW=1 before running postgres
for gcc>=3.2.2 while you'll have to compile both GEOS and
postgis/postgis_geos_wrapper.cpp using -D__USE_MALLOC CXXFLAG
for gcc 2.91, 2.95, 3.0 and 3.1.

--strk;

strk wrote:
> Hope this is the last one.
> I got g++-3.3.2 / libstdc++5-3.3
> exporting GLIBCPP_FORCE_NEW=1 and running doc/example
> through valgrind make the following statement:
> 
> ==20854== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
> ==20854== malloc/free: in use at exit: 0 bytes in 0 blocks.
> ==20854== malloc/free: 6248 allocs, 6248 frees, 207321 bytes allocated.
> ==20854== For counts of detected errors, rerun with: -v
> ==20854== No malloc'd blocks -- no leaks are possible.
> 
> FINALLY! :DD
> 
> I'm now checking postgis leaks
> 
> --strk;
> 
> strk wrote:
> > me wrote:
> > > Strangely enough your example runs fine on my system and I get no segfault while
> > > printing the point.
> > > 
> > > Yury
> > 
> > I finally upgraded compiler to version 3.0 and... Magic !
> > Segfault disappeared. I can finally disable gcc's "smart"
> > memory magic and... Surprise ! There seems to be a bug
> > somewhere.. I get a segfault when deleting the vector
> > used as input to GeometryCollection constructor (a just
> > in time real life example of consistency issues).
> > 
> > The bug probably does not show up due to memory caching smartness.
> > 
> > I'll inspect on this. BTW to disable memory caching with gcc 2.91,
> > 2.95, 3.0, 3.1 export CXXFLAGS=-D__USE_MALLOC and re-compile both
> > geos and example.cpp. For gcc >= 3.2.2 export GLIBCPP_FORCE_NEW
> > and/or GLIBCXX_FORCE_NEW at runtime.
> > 
> > --strk;
> > 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Fri Oct 24 10:49:51 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug fix)
Message-ID: <20031024164951.A23653@freek.keybit.net>

The function GEOSGetCoordinates() had a comment on top stating
it would have been called just for linestring, so I casted given
pointer to a linestring and used getCoordinatesRO() for performance.

Well. this is not the case. That function is called for all kind
of geometry since after all from postgis point of view every kind
of geometry will have a straight list of points. Underlying 
GEOS getCoordinates() is not documented to return points in the exact
same manner useful for postgis, but I suppose it does. Since postgis
wrapper will only need geometry CoordinateList for read and copy
purposes it is a waste to make one more copy of them.

I'd like to go back to calling getCoordinatesRO() and having GEOS taking
care of optimizing memory copy to reduce it at most. This mean that
getCoordinatesRO() should be made a virtual method of GeometryClass and
the way it will organize returned coordinates should be documented.

>From an architectural point of view we'll obtain greater abstraction.

>From an implementation point of view we'll move to GEOS internal
every optimization work. What do you think, should getCoordinatesRO()
be a virtual Geometry method ?

--strk;

From strk at keybit.net  Fri Oct 24 11:33:32 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <20031024164951.A23653@freek.keybit.net>;
	from strk@keybit.net on Fri, Oct 24, 2003 at 04:49:51PM +0200
References: <20031024164951.A23653@freek.keybit.net>
Message-ID: <20031024173332.A24089@freek.keybit.net>

Sorry, forget all.
I realized that in order to make up an aligned memory containing
POINT3D structures is is preferrable to optimize postgis_geos_wrapper
instead.

--strk;

strk wrote:
> The function GEOSGetCoordinates() had a comment on top stating
> it would have been called just for linestring, so I casted given
> pointer to a linestring and used getCoordinatesRO() for performance.
> 
> Well. this is not the case. That function is called for all kind
> of geometry since after all from postgis point of view every kind
> of geometry will have a straight list of points. Underlying 
> GEOS getCoordinates() is not documented to return points in the exact
> same manner useful for postgis, but I suppose it does. Since postgis
> wrapper will only need geometry CoordinateList for read and copy
> purposes it is a waste to make one more copy of them.
> 
> I'd like to go back to calling getCoordinatesRO() and having GEOS taking
> care of optimizing memory copy to reduce it at most. This mean that
> getCoordinatesRO() should be made a virtual method of GeometryClass and
> the way it will organize returned coordinates should be documented.
> 
> >From an architectural point of view we'll obtain greater abstraction.
> 
> >From an implementation point of view we'll move to GEOS internal
> every optimization work. What do you think, should getCoordinatesRO()
> be a virtual Geometry method ?
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From dblasby at refractions.net  Fri Oct 24 12:18:43 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
 fix)
In-Reply-To: <20031024164951.A23653@freek.keybit.net>
References: <20031024164951.A23653@freek.keybit.net>
Message-ID: <3F9950E3.3060603@refractions.net>

strk wrote:
> The function GEOSGetCoordinates() had a comment on top stating
> it would have been called just for linestring, so I casted given
> pointer to a linestring and used getCoordinatesRO() for performance.

It was orginally only going to be called for linestrings and linearrings 
(like the comment says).  Then I noticed it does "the right things" for 
polygons and multipoints.

Remove the comment.

dave


From strk at keybit.net  Fri Oct 24 12:36:31 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <3F9950E3.3060603@refractions.net>;
	from dblasby@refractions.net on Fri, Oct 24, 2003 at 09:18:43AM -0700
References: <20031024164951.A23653@freek.keybit.net>
	<3F9950E3.3060603@refractions.net>
Message-ID: <20031024183631.A24622@freek.keybit.net>

dblasby wrote:
> strk wrote:
> > The function GEOSGetCoordinates() had a comment on top stating
> > it would have been called just for linestring, so I casted given
> > pointer to a linestring and used getCoordinatesRO() for performance.
> 
> It was orginally only going to be called for linestrings and linearrings 
> (like the comment says).  Then I noticed it does "the right things" for 
> polygons and multipoints.

I was trying to remove unnecessary memory copies and I though we could
call getCoordinatesRO() in PolyFromGeometry. Why call GEOSGetCoordinates
and then make a copy of the whole list ? The list returned by
GEOSGetCoordinates is not needed in the first place and moreover it
might be not in the format suitable for postgis (in the future - who knows?).

Since GEOSGetCoordinates will return a POINT3D array it could detect
he's faced with a Polygon or Line or whatever and use an ad-hoc function
to do the job with less copying possible. What do you think ? Will
Defining functions like GEOSGetCoordinates(Polygon *),
GEOSGetCoordinates(LineString *), etc  work for this ?

Do you think it's worth taking this path ? I'm trying to speedup
unite() aggregate... I'd also like to talk about all those strcmp.

--strk;

From dblasby at refractions.net  Fri Oct 24 13:07:24 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
 fix)
In-Reply-To: <20031024183631.A24622@freek.keybit.net>
References: <20031024164951.A23653@freek.keybit.net>
	<3F9950E3.3060603@refractions.net> <20031024183631.A24622@freek.keybit.net>
Message-ID: <3F995C4C.1050800@refractions.net>

> I was trying to remove unnecessary memory copies and I though we could
> call getCoordinatesRO() in PolyFromGeometry. Why call GEOSGetCoordinates
> and then make a copy of the whole list ? The list returned by
> GEOSGetCoordinates is not needed in the first place and moreover it
> might be not in the format suitable for postgis (in the future - who knows?).

Whenever I call the getCoordinates() function, I immediately make a copy 
of the list by converting it from the GEOS coordinates to PostGIS POINT3Ds.

ALL the PostGIS functions look like this:

1. get input PostGIS geometry/geometries
2. convert the PostGIS geometries to GEOS geometries
3. run the GEOS function
4. delete original GEOS geometries
5. convert the resulting GEOS geometry to PostGIS Geometry
6. delete resulting GEOS geometry

* step 4 may take place at the same time as step 6

So, feel free to have all the Postgis GetCoordinates() access read-only 
version.

> Since GEOSGetCoordinates will return a POINT3D array it could detect
> he's faced with a Polygon or Line or whatever and use an ad-hoc function
> to do the job with less copying possible. What do you think ? Will
> Defining functions like GEOSGetCoordinates(Polygon *),
> GEOSGetCoordinates(LineString *), etc  work for this ?


> Do you think it's worth taking this path ? I'm trying to speedup
> unite() aggregate... 

UNIT probably spending a lot of time building Postgis and GEOS geometries.

1. start with 2 input postgis geometrys
2. convert them to GEOS (O(n) where n=# of subcomponents)
3. run union
4. convert back to postgis (O(n) where n=# of subcomponents)
5. start again at step #1

As you can see there possibly O(n^2) constructions (and certainly O(n^2) 
point copies).

If you take an input dataset of disjoint polygons, you'll see this is 
O(n^2) in terms of geometry convertions and copying.

 >>I'd also like to talk about all those strcmp.

You mean in converting from GEOS->PostGIS geometries?  If you add
a GEOS function (or to Postgis_geos_wrapper.cpp) that returns an integer 
instead of a string for geometrytype you'll be able to remove them.

dave


From strk at keybit.net  Fri Oct 24 17:27:47 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <3F995C4C.1050800@refractions.net>;
	from dblasby@refractions.net on Fri, Oct 24, 2003 at 10:07:24AM -0700
References: <20031024164951.A23653@freek.keybit.net>
	<3F9950E3.3060603@refractions.net> <20031024183631.A24622@freek.keybit.net>
	<3F995C4C.1050800@refractions.net>
Message-ID: <20031024232747.A26770@freek.keybit.net>

dblasby wrote:
> You mean in converting from GEOS->PostGIS geometries?  If you add
> a GEOS function (or to Postgis_geos_wrapper.cpp) that returns an integer 
> instead of a string for geometrytype you'll be able to remove them.

I've added the following:
    
    enum geos::GeometryTypeId {
          GEOS_POINT,
          GEOS_LINESTRING,
          GEOS_POLYGON,
          GEOS_MULTIPOINT,
          GEOS_MULTILINESTRING,
          GEOS_MULTIPOLYGON,
          GEOS_GEOMETRYCOLLECTION
    };
    
    GeometryTypeId Geometry::getGeometryTypeId() const;
    
PS: I've declared and defined the functions in geom.h for quick review.

--strk;

From strk at keybit.net  Fri Oct 24 17:42:49 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <3F995C4C.1050800@refractions.net>;
	from dblasby@refractions.net on Fri, Oct 24, 2003 at 10:07:24AM -0700
References: <20031024164951.A23653@freek.keybit.net>
	<3F9950E3.3060603@refractions.net> <20031024183631.A24622@freek.keybit.net>
	<3F995C4C.1050800@refractions.net>
Message-ID: <20031024234249.B26770@freek.keybit.net>

dblasby wrote:
> Whenever I call the getCoordinates() function, I immediately make a copy 
> of the list by converting it from the GEOS coordinates to PostGIS POINT3Ds.
> 
> So, feel free to have all the Postgis GetCoordinates() access read-only 
> version.

I've made a specialized POINT3D-array-from-Polygon function using read-only
direct access to internal Polygon's LinearRings. Speed up is to evaluate
but personally I can not really appreciate it...

> UNIT probably spending a lot of time building Postgis and GEOS geometries.
>
> 1. start with 2 input postgis geometrys
> 2. convert them to GEOS (O(n) where n=# of subcomponents)
> 3. run union
> 4. convert back to postgis (O(n) where n=# of subcomponents)
> 5. start again at step #1
>
> As you can see there possibly O(n^2) constructions (and certainly O(n^2)
> point copies).
>
> If you take an input dataset of disjoint polygons, you'll see this is
> O(n^2) in terms of geometry convertions and copying.

Do you think defining an ad-hoc postgresql type will give it a burst ?

--strk;

From chodgson at refractions.net  Fri Oct 24 18:17:11 2003
From: chodgson at refractions.net (chodgson@refractions.net)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <20031024234249.B26770@freek.keybit.net>
References: <20031024164951.A23653@freek.keybit.net>
	<3F9950E3.3060603@refractions.net> <20031024183631.A24622@freek.keybit.net>
	<3F995C4C.1050800@refractions.net> <20031024234249.B26770@freek.keybit.net>
Message-ID: <1067033831.3f99a4e7a6eb3@hydra>

The way postgres handles user-defined aggregate functions is what is limiting 
you. The problem is that aggregates are designed to use a "one-at-a-time" 
approach to aggregating, which means that at each step of the process you must 
have "geom UNION geom = geom". 

Clearly, if there was a postgres type which was a serialized GEOS gemetry (call 
it type geos_geom) then we could write a geos_geom_union function which was 
geos_geom UNION geos_geom = geos_geom, and as long as the serialization can be 
done quickly (and is even possible?) then a faster union aggregate could result 
from a query like:

SELECT geos_geom_to_geom( geos_geom_union( geom_to_geos_geom( the-geom ) ) ) 
FROM the_table GROUP BY class_id;

I don't know enough C/C++ to know if such a serialization of a GEOS geometry is 
possible, or fast... but if so, this would probably do it.

It could even be possible to re-write all of the geos functions to accept 
geos_geom objects, and have standard geom object be auto-typecast into 
geos_geom objects (using the "geom_to_geos_geom()" function, of course)... then 
it would be easy to cache the geos objects in between processing stages - who 
knows how big they might be... again, if this is even possible.

Chris

Quoting strk <strk@keybit.net>:

> dblasby wrote:
> > Whenever I call the getCoordinates() function, I immediately make a copy
> > of the list by converting it from the GEOS coordinates to PostGIS POINT3Ds.
> >
> > So, feel free to have all the Postgis GetCoordinates() access read-only
> > version.
> 
> I've made a specialized POINT3D-array-from-Polygon function using read-only
> direct access to internal Polygon's LinearRings. Speed up is to evaluate
> but personally I can not really appreciate it...
> 
> > UNIT probably spending a lot of time building Postgis and GEOS geometries.
> >
> > 1. start with 2 input postgis geometrys
> > 2. convert them to GEOS (O(n) where n=# of subcomponents)
> > 3. run union
> > 4. convert back to postgis (O(n) where n=# of subcomponents)
> > 5. start again at step #1
> >
> > As you can see there possibly O(n^2) constructions (and certainly O(n^2)
> > point copies).
> >
> > If you take an input dataset of disjoint polygons, you'll see this is
> > O(n^2) in terms of geometry convertions and copying.
> 
> Do you think defining an ad-hoc postgresql type will give it a burst ?
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 





From strk at keybit.net  Mon Oct 27 06:36:48 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <1067033831.3f99a4e7a6eb3@hydra>;
	from chodgson@refractions.net on Fri, Oct 24, 2003 at 03:17:11PM -0700
References: <20031024164951.A23653@freek.keybit.net>
	<3F9950E3.3060603@refractions.net> <20031024183631.A24622@freek.keybit.net>
	<3F995C4C.1050800@refractions.net> <20031024234249.B26770@freek.keybit.net>
	<1067033831.3f99a4e7a6eb3@hydra>
Message-ID: <20031027123648.A48587@freek.keybit.net>

Defining a new postgres type for geos-geom might give a better performance
but sounds (IMHO) like a slow development process. I've been thinking 
about this thought. Here is what I propose:

We now have, for each row in input relation:

CASE 1:
	ITERATE:
	1) pgis->geos conversion (first arg)
	2) pgis->geos conversion (second arg)
	3) geosUnion  call
	4) geos->pgis conversion (result)

Note that step 1 will be for each iteration after the first EXACTLY the
output of step 3 from previous iteration. We could use a final func
for the whole job to be done and a state transaction function to just
gather informations about which geometries to work on.

CASE 2:
	ITERATE:
	1) get geometry array (first arg)
	2) get geometry (second arg)
	3) append geometry to array 
	END:
	1) UNION = array[0]->geos (conversion)
	2) for each array item N > 0
	3)	nextgeom = array[N]->geos (conversion)
	4) 	geosUnion call (UNION, nextgeom)
	5) end
	6) geos->pgis conversion (UNION)

With N input geometries we will have the following conversions:
	CASE 1: 2*N pgis->geos + N geos->pgis (might be missing something)
	CASE 2:   N pgis->geos + 1 geos->pgis 

Anyway, CASE 2 seems nicer with system resources.. but it might be
very memory expensive! If output geometry will be just a collection
of input geometries that big memory will be allocated anyway, thus
as long as we release each array element as soon as added to the
output geometry this will not be a big deal. On the other hand, if
resulting union will remove a lot of borders allocated memory will
be much more then the size required by step-by-step processing.

What do you think about this solution ?

--strk;

chodgson wrote:
> The way postgres handles user-defined aggregate functions is what is limiting 
> you. The problem is that aggregates are designed to use a "one-at-a-time" 
> approach to aggregating, which means that at each step of the process you must 
> have "geom UNION geom = geom". 
> 
> Clearly, if there was a postgres type which was a serialized GEOS gemetry (call 
> it type geos_geom) then we could write a geos_geom_union function which was 
> geos_geom UNION geos_geom = geos_geom, and as long as the serialization can be 
> done quickly (and is even possible?) then a faster union aggregate could result 
> from a query like:
> 
> SELECT geos_geom_to_geom( geos_geom_union( geom_to_geos_geom( the-geom ) ) ) 
> FROM the_table GROUP BY class_id;
> 
> I don't know enough C/C++ to know if such a serialization of a GEOS geometry is 
> possible, or fast... but if so, this would probably do it.
> 
> It could even be possible to re-write all of the geos functions to accept 
> geos_geom objects, and have standard geom object be auto-typecast into 
> geos_geom objects (using the "geom_to_geos_geom()" function, of course)... then 
> it would be easy to cache the geos objects in between processing stages - who 
> knows how big they might be... again, if this is even possible.
> 
> Chris
> 
> Quoting strk <strk@keybit.net>:
> 
> > dblasby wrote:
> > > Whenever I call the getCoordinates() function, I immediately make a copy
> > > of the list by converting it from the GEOS coordinates to PostGIS POINT3Ds.
> > >
> > > So, feel free to have all the Postgis GetCoordinates() access read-only
> > > version.
> > 
> > I've made a specialized POINT3D-array-from-Polygon function using read-only
> > direct access to internal Polygon's LinearRings. Speed up is to evaluate
> > but personally I can not really appreciate it...
> > 
> > > UNIT probably spending a lot of time building Postgis and GEOS geometries.
> > >
> > > 1. start with 2 input postgis geometrys
> > > 2. convert them to GEOS (O(n) where n=# of subcomponents)
> > > 3. run union
> > > 4. convert back to postgis (O(n) where n=# of subcomponents)
> > > 5. start again at step #1
> > >
> > > As you can see there possibly O(n^2) constructions (and certainly O(n^2)
> > > point copies).
> > >
> > > If you take an input dataset of disjoint polygons, you'll see this is
> > > O(n^2) in terms of geometry convertions and copying.
> > 
> > Do you think defining an ad-hoc postgresql type will give it a burst ?
> > 
> > --strk;
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> 
> 
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Oct 27 08:26:24 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Aggregate detoasted arguments lifetime
Message-ID: <20031027142624.A49271@freek.keybit.net>

Dear pg-hackers,

Making an aggregate I want to stuff all input values (detoasted)
in an array and process them all togheter with finalfunc.

This is because in order to process them a conversion is involved
and I'm trying to reduce the number of conversions to the lowest
possible.

My question is: if I write in the "state" array
pointers to DETOASTED input args,
will I find them intact at finalfunc time ?

TIA

--strk;

From pramsey at refractions.net  Mon Oct 27 10:20:37 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <20031027123648.A48587@freek.keybit.net>
Message-ID: <1E1BFA85-0891-11D8-84B1-000393D33C2E@refractions.net>

I was talking about this with Chris a week ago, and we came to similar 
conclusions, with one difference: we think we need to have both methods 
available.  A CPU intensive but memory light version for large-but-slow 
queries and an optimized but memory heavy version for small-but-fast 
interactive queries.  Neither version can meet all the likely use cases 
for a union aggregate on their own.
P

On Monday, October 27, 2003, at 03:36 AM, strk wrote:

> Defining a new postgres type for geos-geom might give a better 
> performance
> but sounds (IMHO) like a slow development process. I've been thinking
> about this thought. Here is what I propose:
>
> We now have, for each row in input relation:
>
> CASE 1:
> 	ITERATE:
> 	1) pgis->geos conversion (first arg)
> 	2) pgis->geos conversion (second arg)
> 	3) geosUnion  call
> 	4) geos->pgis conversion (result)
>
> Note that step 1 will be for each iteration after the first EXACTLY the
> output of step 3 from previous iteration. We could use a final func
> for the whole job to be done and a state transaction function to just
> gather informations about which geometries to work on.
>
> CASE 2:
> 	ITERATE:
> 	1) get geometry array (first arg)
> 	2) get geometry (second arg)
> 	3) append geometry to array
> 	END:
> 	1) UNION = array[0]->geos (conversion)
> 	2) for each array item N > 0
> 	3)	nextgeom = array[N]->geos (conversion)
> 	4) 	geosUnion call (UNION, nextgeom)
> 	5) end
> 	6) geos->pgis conversion (UNION)
>
> With N input geometries we will have the following conversions:
> 	CASE 1: 2*N pgis->geos + N geos->pgis (might be missing something)
> 	CASE 2:   N pgis->geos + 1 geos->pgis
>
> Anyway, CASE 2 seems nicer with system resources.. but it might be
> very memory expensive! If output geometry will be just a collection
> of input geometries that big memory will be allocated anyway, thus
> as long as we release each array element as soon as added to the
> output geometry this will not be a big deal. On the other hand, if
> resulting union will remove a lot of borders allocated memory will
> be much more then the size required by step-by-step processing.
>
> What do you think about this solution ?
>
> --strk;
>
> chodgson wrote:
>> The way postgres handles user-defined aggregate functions is what is 
>> limiting
>> you. The problem is that aggregates are designed to use a 
>> "one-at-a-time"
>> approach to aggregating, which means that at each step of the process 
>> you must
>> have "geom UNION geom = geom".
>>
>> Clearly, if there was a postgres type which was a serialized GEOS 
>> gemetry (call
>> it type geos_geom) then we could write a geos_geom_union function 
>> which was
>> geos_geom UNION geos_geom = geos_geom, and as long as the 
>> serialization can be
>> done quickly (and is even possible?) then a faster union aggregate 
>> could result
>> from a query like:
>>
>> SELECT geos_geom_to_geom( geos_geom_union( geom_to_geos_geom( 
>> the-geom ) ) )
>> FROM the_table GROUP BY class_id;
>>
>> I don't know enough C/C++ to know if such a serialization of a GEOS 
>> geometry is
>> possible, or fast... but if so, this would probably do it.
>>
>> It could even be possible to re-write all of the geos functions to 
>> accept
>> geos_geom objects, and have standard geom object be auto-typecast into
>> geos_geom objects (using the "geom_to_geos_geom()" function, of 
>> course)... then
>> it would be easy to cache the geos objects in between processing 
>> stages - who
>> knows how big they might be... again, if this is even possible.
>>
>> Chris
>>
>> Quoting strk <strk@keybit.net>:
>>
>>> dblasby wrote:
>>>> Whenever I call the getCoordinates() function, I immediately make a 
>>>> copy
>>>> of the list by converting it from the GEOS coordinates to PostGIS 
>>>> POINT3Ds.
>>>>
>>>> So, feel free to have all the Postgis GetCoordinates() access 
>>>> read-only
>>>> version.
>>>
>>> I've made a specialized POINT3D-array-from-Polygon function using 
>>> read-only
>>> direct access to internal Polygon's LinearRings. Speed up is to 
>>> evaluate
>>> but personally I can not really appreciate it...
>>>
>>>> UNIT probably spending a lot of time building Postgis and GEOS 
>>>> geometries.
>>>>
>>>> 1. start with 2 input postgis geometrys
>>>> 2. convert them to GEOS (O(n) where n=# of subcomponents)
>>>> 3. run union
>>>> 4. convert back to postgis (O(n) where n=# of subcomponents)
>>>> 5. start again at step #1
>>>>
>>>> As you can see there possibly O(n^2) constructions (and certainly 
>>>> O(n^2)
>>>> point copies).
>>>>
>>>> If you take an input dataset of disjoint polygons, you'll see this 
>>>> is
>>>> O(n^2) in terms of geometry convertions and copying.
>>>
>>> Do you think defining an ad-hoc postgresql type will give it a burst 
>>> ?
>>>
>>> --strk;
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From strk at keybit.net  Mon Oct 27 10:39:37 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Re: [HACKERS] Aggregate detoasted arguments lifetime
In-Reply-To: <29243.1067267037@sss.pgh.pa.us>;
	from tgl@sss.pgh.pa.us on Mon, Oct 27, 2003 at 10:03:57AM -0500
References: <20031027142624.A49271@freek.keybit.net>
	<29243.1067267037@sss.pgh.pa.us>
Message-ID: <20031027163937.A50013@freek.keybit.net>

tgl wrote:
> strk <strk@keybit.net> writes:
> > My question is: if I write in the "state" array
> > pointers to DETOASTED input args,
> > will I find them intact at finalfunc time ?
> 
> No, not without pushups.  You are called in a short-lived memory
> context.  You could allocate query-lifetime memory in fcinfo->fn_mcxt,
> but it's then your responsibility to ensure there are no undesirable
> memory leaks.

How do I allocate query-lifetime memory ?
How do I force arguments DETOASTing into this query-lifetime memory
(if I can at all) ?

What do I have to keep in mind about postgres version compatibility
issues ?

Thanks

PS: If this is a FAQ please point me to the answer

--strk;

> 
> 			regards, tom lane

From strk at keybit.net  Mon Oct 27 10:40:19 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] GEOSGetCoordinates() and performance (postgis bug
	fix)
In-Reply-To: <1E1BFA85-0891-11D8-84B1-000393D33C2E@refractions.net>;
	from pramsey@refractions.net on Mon, Oct 27, 2003 at 07:20:37AM -0800
References: <20031027123648.A48587@freek.keybit.net>
	<1E1BFA85-0891-11D8-84B1-000393D33C2E@refractions.net>
Message-ID: <20031027164019.B50013@freek.keybit.net>

I'm working on the small-but-fast interface.
Can Chris check out serialization of either geos geometry or
some other intermediate class used for Overlay Operations 
(like PlanarGraph or something) ? Martin, any help on this ?

--strk;

pramsey wrote:
> I was talking about this with Chris a week ago, and we came to similar 
> conclusions, with one difference: we think we need to have both methods 
> available.  A CPU intensive but memory light version for large-but-slow 
> queries and an optimized but memory heavy version for small-but-fast 
> interactive queries.  Neither version can meet all the likely use cases 
> for a union aggregate on their own.
> P
> 
> On Monday, October 27, 2003, at 03:36 AM, strk wrote:
> 
> > Defining a new postgres type for geos-geom might give a better 
> > performance
> > but sounds (IMHO) like a slow development process. I've been thinking
> > about this thought. Here is what I propose:
> >
> > We now have, for each row in input relation:
> >
> > CASE 1:
> > 	ITERATE:
> > 	1) pgis->geos conversion (first arg)
> > 	2) pgis->geos conversion (second arg)
> > 	3) geosUnion  call
> > 	4) geos->pgis conversion (result)
> >
> > Note that step 1 will be for each iteration after the first EXACTLY the
> > output of step 3 from previous iteration. We could use a final func
> > for the whole job to be done and a state transaction function to just
> > gather informations about which geometries to work on.
> >
> > CASE 2:
> > 	ITERATE:
> > 	1) get geometry array (first arg)
> > 	2) get geometry (second arg)
> > 	3) append geometry to array
> > 	END:
> > 	1) UNION = array[0]->geos (conversion)
> > 	2) for each array item N > 0
> > 	3)	nextgeom = array[N]->geos (conversion)
> > 	4) 	geosUnion call (UNION, nextgeom)
> > 	5) end
> > 	6) geos->pgis conversion (UNION)
> >
> > With N input geometries we will have the following conversions:
> > 	CASE 1: 2*N pgis->geos + N geos->pgis (might be missing something)
> > 	CASE 2:   N pgis->geos + 1 geos->pgis
> >
> > Anyway, CASE 2 seems nicer with system resources.. but it might be
> > very memory expensive! If output geometry will be just a collection
> > of input geometries that big memory will be allocated anyway, thus
> > as long as we release each array element as soon as added to the
> > output geometry this will not be a big deal. On the other hand, if
> > resulting union will remove a lot of borders allocated memory will
> > be much more then the size required by step-by-step processing.
> >
> > What do you think about this solution ?
> >
> > --strk;
> >
> > chodgson wrote:
> >> The way postgres handles user-defined aggregate functions is what is 
> >> limiting
> >> you. The problem is that aggregates are designed to use a 
> >> "one-at-a-time"
> >> approach to aggregating, which means that at each step of the process 
> >> you must
> >> have "geom UNION geom = geom".
> >>
> >> Clearly, if there was a postgres type which was a serialized GEOS 
> >> gemetry (call
> >> it type geos_geom) then we could write a geos_geom_union function 
> >> which was
> >> geos_geom UNION geos_geom = geos_geom, and as long as the 
> >> serialization can be
> >> done quickly (and is even possible?) then a faster union aggregate 
> >> could result
> >> from a query like:
> >>
> >> SELECT geos_geom_to_geom( geos_geom_union( geom_to_geos_geom( 
> >> the-geom ) ) )
> >> FROM the_table GROUP BY class_id;
> >>
> >> I don't know enough C/C++ to know if such a serialization of a GEOS 
> >> geometry is
> >> possible, or fast... but if so, this would probably do it.
> >>
> >> It could even be possible to re-write all of the geos functions to 
> >> accept
> >> geos_geom objects, and have standard geom object be auto-typecast into
> >> geos_geom objects (using the "geom_to_geos_geom()" function, of 
> >> course)... then
> >> it would be easy to cache the geos objects in between processing 
> >> stages - who
> >> knows how big they might be... again, if this is even possible.
> >>
> >> Chris
> >>
> >> Quoting strk <strk@keybit.net>:
> >>
> >>> dblasby wrote:
> >>>> Whenever I call the getCoordinates() function, I immediately make a 
> >>>> copy
> >>>> of the list by converting it from the GEOS coordinates to PostGIS 
> >>>> POINT3Ds.
> >>>>
> >>>> So, feel free to have all the Postgis GetCoordinates() access 
> >>>> read-only
> >>>> version.
> >>>
> >>> I've made a specialized POINT3D-array-from-Polygon function using 
> >>> read-only
> >>> direct access to internal Polygon's LinearRings. Speed up is to 
> >>> evaluate
> >>> but personally I can not really appreciate it...
> >>>
> >>>> UNIT probably spending a lot of time building Postgis and GEOS 
> >>>> geometries.
> >>>>
> >>>> 1. start with 2 input postgis geometrys
> >>>> 2. convert them to GEOS (O(n) where n=# of subcomponents)
> >>>> 3. run union
> >>>> 4. convert back to postgis (O(n) where n=# of subcomponents)
> >>>> 5. start again at step #1
> >>>>
> >>>> As you can see there possibly O(n^2) constructions (and certainly 
> >>>> O(n^2)
> >>>> point copies).
> >>>>
> >>>> If you take an input dataset of disjoint polygons, you'll see this 
> >>>> is
> >>>> O(n^2) in terms of geometry convertions and copying.
> >>>
> >>> Do you think defining an ad-hoc postgresql type will give it a burst 
> >>> ?
> >>>
> >>> --strk;
> >>>
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel@geos.refractions.net
> >>> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>>
> >>
> >>
> >>
> >>
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Mon Oct 27 12:23:45 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
Message-ID: <20031027182345.B50921@freek.keybit.net>

I've made a fastunion() aggregate working in a collect/union
way as explained in previous messages. 

Process size does not grow more then with plain unite() use.
It is actually the contrary: it keeps slightly smaller.
I think this is due to geomunion not releasing as soon as possible
detoasted arguments, but I did not check that yet.

Running speed is about 25% higher on a table of 191 geometries
organized in 20 records. Most of the time is spent in the finalfunc
and time spent grows with a rapid curve at each iteration.

If 'fastunion' is a good name for you I'll commit, so we can test
togheter. 

-strk;



From pramsey at refractions.net  Mon Oct 27 13:16:29 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <20031027182345.B50921@freek.keybit.net>
References: <20031027182345.B50921@freek.keybit.net>
Message-ID: <3F9D60FD.2010300@refractions.net>

strk wrote:

> If 'fastunion' is a good name for you I'll commit, so we can test
> togheter. 

Lets think about this. If the fastunion in fact takes up no more space 
than the regular union, then perhaps we can simply use it with the name 
as the geomunion(A,B)?

Then we have:

geomunion(A,B)
geomunion(recordset)
memgeomunion(recordset) for the future slow'n'steady version?

P.

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From dblasby at refractions.net  Mon Oct 27 13:15:32 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <20031027182345.B50921@freek.keybit.net>
References: <20031027182345.B50921@freek.keybit.net>
Message-ID: <3F9D60C4.3020908@refractions.net>

strk,

I assume your fast algorthim looks like this:

1. Define a type for "Array of Geometry" (already automatically defined 
by postgresql)

2. have a modified collect() that just builds a big array of geometries 
instead of building a single big geometry.   If you wanted to get really 
fancy, you could probably just store the geometry's subobjects (but 
thats probably extra effort for little gain).

4. Then do the actual union (foldl).  Be aggressive in memory deallocation.
     result = 1st geometry in array
     for each other geometry in array
        result = result union new geometry

Alternatively, we could define a pair-wise union (i.e. 1 union 2 = A, 3 
union 4 = B, 5 union 6 = C,7 union 8 = D... then A union B , C union 
D...)  This might work out better for certain types of data.

5. convert the resulting geometry to postgis.


This should be pretty fast since we're only converting postgis->GEOS 
once and only one GEOS->postgis.

Unfortunately, for large unites, we could have memory problems.
The above process will use memory equal to all the geometries.  During 
step #4, we should be holding about constant memory in the worst case.

In the worst case (uniting a set of disjoint polygons), this shouldnt 
use more memory than any other method.


dave
ps. Ideally it would be great to carry around GEOS geometries instead of 
postgis geometries, but I think we'll run into problem with events like 
aborted queries and the like.

pps.  The geometry-constructing routine used by collect is O(n^2), but I 
bet it would be much faster to write your own (O(n)).  Basically, you'll 
have to scan the Array of Geometry to find the number of sub-objects and 
their sizes (make sure you account for memory alignment).  Then you just 
create a big resulting geometry.

The current method looks like this:
	a. create a single-subobject geometry
	b. create a brand new 2-object geometry based on a + another sub-object
	c. create a brand new 3-object geometry based on b + another sub-object
	d. create a brand new 4-object geometry based on c + another sub-object

Each sub-object will be copied, on average, n/2 times.


From strk at keybit.net  Mon Oct 27 13:45:22 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <3F9D60C4.3020908@refractions.net>;
	from dblasby@refractions.net on Mon, Oct 27, 2003 at 10:15:32AM -0800
References: <20031027182345.B50921@freek.keybit.net>
	<3F9D60C4.3020908@refractions.net>
Message-ID: <20031027194522.A51468@freek.keybit.net>

dblasby wrote:
> strk,
> 
> I assume your fast algorthim looks like this:
> 
> 1. Define a type for "Array of Geometry" (already automatically defined 
> by postgresql)
> 
> 2. have a modified collect() that just builds a big array of geometries 
> instead of building a single big geometry.   If you wanted to get really 
> fancy, you could probably just store the geometry's subobjects (but 
> thats probably extra effort for little gain).
> 
> 4. Then do the actual union (foldl).  Be aggressive in memory deallocation.
>      result = 1st geometry in array
>      for each other geometry in array
>         result = result union new geometry
> 
> 
> 5. convert the resulting geometry to postgis.

Yes. This is exactly how it works.

> Alternatively, we could define a pair-wise union (i.e. 1 union 2 = A, 3 
> union 4 = B, 5 union 6 = C,7 union 8 = D... then A union B , C union 
> D...)  This might work out better for certain types of data.

We can modify that if you think will be faster.

> This should be pretty fast since we're only converting postgis->GEOS 
> once and only one GEOS->postgis.

It seems faster to me.

> 
> Unfortunately, for large unites, we could have memory problems.
> The above process will use memory equal to all the geometries.  During 
> step #4, we should be holding about constant memory in the worst case.
> 
> In the worst case (uniting a set of disjoint polygons), this shouldnt 
> use more memory than any other method.

The other method (GeomUnion recursion) *might* release detoasted memory
sooner. If postgresql will release row-based memory in aggregate calls
(as I think I've been told) that would reduce memory (need to be tested)

> dave
> ps. Ideally it would be great to carry around GEOS geometries instead of 
> postgis geometries, but I think we'll run into problem with events like 
> aborted queries and the like.

It'll be greater to carry around PlanarGraph, but I'm not prepared
to this yet. Maybe Martin can help here. The SweepLine would ideally
be run only once. For this to work we need to construct the graph of
the whole geometry set in input. If the graph for a geometry is not
much bigger then the geometry itself this might be not-so
memory-consuming. 

Actually I don't know who would do this - don't look at me ;)

> pps.  The geometry-constructing routine used by collect is O(n^2), but I 
> bet it would be much faster to write your own (O(n)).  Basically, you'll 
> have to scan the Array of Geometry to find the number of sub-objects and 
> their sizes (make sure you account for memory alignment).  Then you just 
> create a big resulting geometry.
> 
> The current method looks like this:
> 	a. create a single-subobject geometry
> 	b. create a brand new 2-object geometry based on a + another sub-object
> 	c. create a brand new 3-object geometry based on b + another sub-object
> 	d. create a brand new 4-object geometry based on c + another sub-object
> 
> Each sub-object will be copied, on average, n/2 times.

Well. In this case memory usage can not really grow, we will
at most use geometry header * num_input_rows more then current
usage. I can take a look at it.

--strk;

From strk at keybit.net  Mon Oct 27 13:52:58 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <3F9D60FD.2010300@refractions.net>;
	from pramsey@refractions.net on Mon, Oct 27, 2003 at 10:16:29AM -0800
References: <20031027182345.B50921@freek.keybit.net>
	<3F9D60FD.2010300@refractions.net>
Message-ID: <20031027195258.B51468@freek.keybit.net>

pramsey wrote:
> strk wrote:
> 
> > If 'fastunion' is a good name for you I'll commit, so we can test
> > togheter. 
> 
> Lets think about this. If the fastunion in fact takes up no more space 
> than the regular union, then perhaps we can simply use it with the name 
> as the geomunion(A,B)?
> 
> Then we have:
> 
> geomunion(A,B)
> geomunion(recordset)
> memgeomunion(recordset) for the future slow'n'steady version?

I can do the following:
	- commit changes to geomUnion() for soon-memory-release
	- commit support routines for "fast" union
	- post on the mailing list SQL query to enable/disable "fast" union
In this way we can test both of them on different dataset.

Fundamentally the point is the the "WORST" case memory occupation
will be about the same, while the "BEST" case memory occupation
will be MUCH less with the old code.

Imagine 3000 square polygons whose union makes a rectangle :)
Old way will take up  (releasing memory soon) a rectangle size memory.
New way will take up 3000 * square size memory (before staring to release it)

What do you think ?

--strk;

From pramsey at refractions.net  Mon Oct 27 13:57:14 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <20031027195258.B51468@freek.keybit.net>
References: <20031027182345.B50921@freek.keybit.net>
	<3F9D60FD.2010300@refractions.net> <20031027195258.B51468@freek.keybit.net>
Message-ID: <3F9D6A8A.7030508@refractions.net>

Go for it.
P.

strk wrote:

> pramsey wrote:
> 
>>strk wrote:
>>
>>
>>>If 'fastunion' is a good name for you I'll commit, so we can test
>>>togheter. 
>>
>>Lets think about this. If the fastunion in fact takes up no more space 
>>than the regular union, then perhaps we can simply use it with the name 
>>as the geomunion(A,B)?
>>
>>Then we have:
>>
>>geomunion(A,B)
>>geomunion(recordset)
>>memgeomunion(recordset) for the future slow'n'steady version?
> 
> 
> I can do the following:
> 	- commit changes to geomUnion() for soon-memory-release
> 	- commit support routines for "fast" union
> 	- post on the mailing list SQL query to enable/disable "fast" union
> In this way we can test both of them on different dataset.
> 
> Fundamentally the point is the the "WORST" case memory occupation
> will be about the same, while the "BEST" case memory occupation
> will be MUCH less with the old code.
> 
> Imagine 3000 square polygons whose union makes a rectangle :)
> Old way will take up  (releasing memory soon) a rectangle size memory.
> New way will take up 3000 * square size memory (before staring to release it)
> 
> What do you think ?
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From strk at keybit.net  Mon Oct 27 15:18:15 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <3F9D6A8A.7030508@refractions.net>;
	from pramsey@refractions.net on Mon, Oct 27, 2003 at 10:57:14AM -0800
References: <20031027182345.B50921@freek.keybit.net>
	<3F9D60FD.2010300@refractions.net> <20031027195258.B51468@freek.keybit.net>
	<3F9D6A8A.7030508@refractions.net>
Message-ID: <20031027211815.D51468@freek.keybit.net>

Changes committed.
Here is SQL code to enable/disable "fastunion"

--8<------------------------------------------------------------------

DROP AGGREGATE fastunion(geometry);
DROP FUNCTION unite_sfunc(geometry[], geometry);
DROP FUNCTION unite_finalfunc(geometry[]);

CREATE FUNCTION unite_sfunc (geometry[],geometry)
        RETURNS geometry[]
        AS '/usr/src/postgis/postgis/libpostgis.so.0.8'
        LANGUAGE 'C' WITH (isstrict);

CREATE FUNCTION unite_finalfunc (geometry[])
        RETURNS geometry
        AS '/usr/src/postgis/postgis/libpostgis.so.0.8'
        LANGUAGE 'C' WITH (isstrict);

CREATE AGGREGATE fastunion (
        initcond = '{}', -- needed for basetype != style && sfunc isstrict
        sfunc = unite_sfunc,
        basetype = geometry,
        stype = geometry[],
        finalfunc = unite_finalfunc
);

--8<------------------------------------------------------------------


Have fun.

PS: using fastunion in a GREOUP BY query gives me a segfault,
    still inspecting it.


-strk;

pramsey wrote:
> Go for it.
> P.
> 
> strk wrote:
> 
> > pramsey wrote:
> > 
> >>strk wrote:
> >>
> >>
> >>>If 'fastunion' is a good name for you I'll commit, so we can test
> >>>togheter. 
> >>
> >>Lets think about this. If the fastunion in fact takes up no more space 
> >>than the regular union, then perhaps we can simply use it with the name 
> >>as the geomunion(A,B)?
> >>
> >>Then we have:
> >>
> >>geomunion(A,B)
> >>geomunion(recordset)
> >>memgeomunion(recordset) for the future slow'n'steady version?
> > 
> > 
> > I can do the following:
> > 	- commit changes to geomUnion() for soon-memory-release
> > 	- commit support routines for "fast" union
> > 	- post on the mailing list SQL query to enable/disable "fast" union
> > In this way we can test both of them on different dataset.
> > 
> > Fundamentally the point is the the "WORST" case memory occupation
> > will be about the same, while the "BEST" case memory occupation
> > will be MUCH less with the old code.
> > 
> > Imagine 3000 square polygons whose union makes a rectangle :)
> > Old way will take up  (releasing memory soon) a rectangle size memory.
> > New way will take up 3000 * square size memory (before staring to release it)
> > 
> > What do you think ?
> > 
> > --strk;
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> -- 
>        __
>       /
>       | Paul Ramsey
>       | Refractions Research
>       | Email: pramsey@refractions.net
>       | Phone: (250) 885-0632
>       \_
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Oct 28 06:05:33 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <20031027211815.D51468@freek.keybit.net>;
	from strk@keybit.net on Mon, Oct 27, 2003 at 09:18:15PM +0100
References: <20031027182345.B50921@freek.keybit.net>
	<3F9D60FD.2010300@refractions.net> <20031027195258.B51468@freek.keybit.net>
	<3F9D6A8A.7030508@refractions.net> <20031027211815.D51468@freek.keybit.net>
Message-ID: <20031028120533.A57331@freek.keybit.net>

Having problems with memory instability I changed
unite_sfunc to always allocate memory for the sate array
in higher memory context. Since I do not know about initcond
lifetime interface is changed to having NULl state array as
initial condition and ! strict state and final functions:

--8<------------------------------------------------------------------

DROP AGGREGATE fastunion(geometry);
DROP FUNCTION unite_sfunc(geometry[], geometry);
DROP FUNCTION unite_finalfunc(geometry[]);

CREATE FUNCTION unite_sfunc (geometry[],geometry)
        RETURNS geometry[]
        AS '/usr/src/postgis/postgis/libpostgis.so.0.8'
        LANGUAGE 'C'; -- WITH (isstrict);

CREATE FUNCTION unite_finalfunc (geometry[])
        RETURNS geometry
        AS '/usr/src/postgis/postgis/libpostgis.so.0.8'
        LANGUAGE 'C'; --  WITH (isstrict);

CREATE AGGREGATE fastunion (
        -- initcond = '{}', -- needed for basetype != style && sfunc isstrict
        sfunc = unite_sfunc,
        basetype = geometry,
        stype = geometry[],
        finalfunc = unite_finalfunc
);

--8<------------------------------------------------------------------

Please report any segfault...

PS: remember to cvs update 

--strk;

From strk at keybit.net  Tue Oct 28 10:21:27 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] fastunion aggregate
In-Reply-To: <20031028120533.A57331@freek.keybit.net>;
	from strk@keybit.net on Tue, Oct 28, 2003 at 12:05:33PM +0100
References: <20031027182345.B50921@freek.keybit.net>
	<3F9D60FD.2010300@refractions.net> <20031027195258.B51468@freek.keybit.net>
	<3F9D6A8A.7030508@refractions.net> <20031027211815.D51468@freek.keybit.net>
	<20031028120533.A57331@freek.keybit.net>
Message-ID: <20031028162127.A59194@freek.keybit.net>

I moved unite_sfunc() to postgis_fn.c and renamed it to
geom_accum(). I think that will be a generic function.

again, drop old defs:

> DROP AGGREGATE fastunion(geometry);
> DROP FUNCTION unite_sfunc(geometry[], geometry);
> DROP FUNCTION unite_finalfunc(geometry[]);

and use newer:

> CREATE FUNCTION geom_accum (geometry[],geometry)
>         RETURNS geometry[]
>         AS '@INSTALLDIR@/libpostgis.so.0.8'
>         LANGUAGE 'C'; 
>
> CREATE FUNCTION unite_finalfunc (geometry[])
>         RETURNS geometry
>         AS '@INSTALLDIR@/libpostgis.so.0.8'
>         LANGUAGE 'C'; -- WITH (isstrict); -- can also be strict I think
>
> CREATE AGGREGATE fastunion (
>         sfunc = geom_accum,
>         basetype = geometry,
>         stype = geometry[],
>         finalfunc = unite_finalfunc
> );


--strk;

strk wrote:
> Having problems with memory instability I changed
> unite_sfunc to always allocate memory for the sate array
> in higher memory context. Since I do not know about initcond
> lifetime interface is changed to having NULl state array as
> initial condition and ! strict state and final functions:
> 
> --8<------------------------------------------------------------------
> 
> DROP AGGREGATE fastunion(geometry);
> DROP FUNCTION unite_sfunc(geometry[], geometry);
> DROP FUNCTION unite_finalfunc(geometry[]);
> 
> CREATE FUNCTION unite_sfunc (geometry[],geometry)
>         RETURNS geometry[]
>         AS '/usr/src/postgis/postgis/libpostgis.so.0.8'
>         LANGUAGE 'C'; -- WITH (isstrict);
> 
> CREATE FUNCTION unite_finalfunc (geometry[])
>         RETURNS geometry
>         AS '/usr/src/postgis/postgis/libpostgis.so.0.8'
>         LANGUAGE 'C'; --  WITH (isstrict);
> 
> CREATE AGGREGATE fastunion (
>         -- initcond = '{}', -- needed for basetype != style && sfunc isstrict
>         sfunc = unite_sfunc,
>         basetype = geometry,
>         stype = geometry[],
>         finalfunc = unite_finalfunc
> );
> 
> --8<------------------------------------------------------------------
> 
> Please report any segfault...
> 
> PS: remember to cvs update 
> 
> --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Oct 28 11:59:48 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Fast collect() aggregate
Message-ID: <20031028175948.A59854@freek.keybit.net>

I've made the fast collect() aggregate.
It uses geom_accum() as state transaction function
and a newly made collect_garray() as final function.

Running time to collect  8109 objects in 8102 geometries
goes from 32 minutes to less then 5 minutes.

I strongly belive no much more memory is used by new implementation
since array-accumulated geometries will be (in this case) bigger
then result collection by 8102 geometry headers (number of geoms in input).

Memory usage evaluation - though - is not easy with postgresql.

Anyway: here is how to enable 'fastcollect':

If you did not already do it for 'fastunion' create the geom_accum() function:

        CREATE FUNCTION geom_accum (geometry[],geometry)
                RETURNS geometry[]
                AS '$libdir/../libpostgis.so.0.8'
                LANGUAGE 'C';

Create the new collect_garray function and the aggregate:

        CREATE FUNCTION collect_garray (geometry[])
                RETURNS geometry
                AS '$libdir/../libpostgis.so.0.8'
                LANGUAGE 'C';

        CREATE AGGREGATE fastcollect (
                sfunc = geom_accum,
                basetype = geometry,
                stype = geometry[],
                finalfunc = collect_garray
        );
                                                        [

PS: remember to get in sync with CVS.

--strk;

From pramsey at refractions.net  Tue Oct 28 12:05:47 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Solaris
Message-ID: <3F9EA1EB.2030404@refractions.net>

Before I do any more work getting our Solaris environment back up and 
running:

Do we still have open issues with Solaris build and test?

Paul

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From strk at keybit.net  Tue Oct 28 12:18:32 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] geom_accum and memory management
Message-ID: <20031028181832.A59984@freek.keybit.net>

The introduced geom_accum function will force a copy of DETOASTED
geometries to allow for final functions release of memory associated
with each array element. Without an explicit copy, PG_DETOAST_DATUM
might or not allocate new memory, so we will not be safe explicitly
pfree'ing result.

Now. 

Final aggregate functions (fastcollect, fastunion) will release
memory associated with each array element to reduce old memory
usage while allocating new memory for the resulting objects.

If we did not force a copy in the state transaction functions,
we would not able to tell whether or not we have a safely releasable
memory.

On the other hand, since the final functions can be invoked by the
user, they can be fed by an array of geometries NOT constructed by
the state transaction function, thus not guaranteed to be made of
safely releasable geometry objects. If you try yourself, you'll 
the backend die:

	select unite_finalfunc('{POINT(0 0 0), POINT(0 0 0)}');

1) One alternative to this is to just forget about prematurely pfreeing
   objects.

2) Another alternative is to use a two-dimensional array having a
   GEOMETRY and a flag stating its allocation status.

3) Yet another alternative is to not tell anyone about the presence
   of final function :)

Solution 2 will make user call more bad-looking and not error prone
(user can pretend it is safe to delete hand written geometries which
is not!), but will alow for a finer grained memory control. Ie. in
state transaction functions we might call PG_DETOAST_DATUM without
forcing a copy and then check whether geometry has been copied or not
thus probably reducing memory copies. Of course this has to be tested
since we won't be able to move allocation to an higher memory context,
and this seems to be really needed.

Solution 1 will be easier to implement, but might be memory expensive
(not much more then worst case for both collect and union).

Solution 3 is evil! ... but already implemented !

Place your bet...

--strk;


From heitzso at growthmodels.com  Tue Oct 28 13:03:31 2003
From: heitzso at growthmodels.com (Heitzso)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] geom_accum and memory management
In-Reply-To: <20031028181832.A59984@freek.keybit.net>
References: <20031028181832.A59984@freek.keybit.net>
Message-ID: <3F9EAF73.7010801@growthmodels.com>

Hi, I'm monitoring the geos list and am grateful for all of the hard
work that everyone is putting into this package.  But sometimes the
details of the whirlwind changes obscure the bigger picture for me.
Are you nearing a release or are all of the big/good changes that
are going into cvs going to require a cooling-off period for a few
months to shake out the last memory/other bugs? 

Probably a better way to phrase my question is .... when
will these mods be settled in and ready for use in a production
environment?

Thanks!

strk wrote:

>The introduced geom_accum function will force a copy of DETOASTED
>geometries to allow for final functions release of memory associated
>with each array element. Without an explicit copy, PG_DETOAST_DATUM
>might or not allocate new memory, so we will not be safe explicitly
>pfree'ing result.
>
>Now. 
>
>Final aggregate functions (fastcollect, fastunion) will release
>memory associated with each array element to reduce old memory
>usage while allocating new memory for the resulting objects.
>
>  
>
.....


From pramsey at refractions.net  Tue Oct 28 13:08:01 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] geom_accum and memory management
In-Reply-To: <3F9EAF73.7010801@growthmodels.com>
References: <20031028181832.A59984@freek.keybit.net>
	<3F9EAF73.7010801@growthmodels.com>
Message-ID: <3F9EB081.9000005@refractions.net>

We are using the CVS versions in a production environment right now.
Frankly, I could have packaged a release last week, mostly it is just a 
matter of time for me... I like the versioned releases to be internally 
consistent, and that means going through the documentation, etc, and 
making sure everything is up to date, which takes a while.

Paul

Heitzso wrote:

> Hi, I'm monitoring the geos list and am grateful for all of the hard
> work that everyone is putting into this package.  But sometimes the
> details of the whirlwind changes obscure the bigger picture for me.
> Are you nearing a release or are all of the big/good changes that
> are going into cvs going to require a cooling-off period for a few
> months to shake out the last memory/other bugs?
> Probably a better way to phrase my question is .... when
> will these mods be settled in and ready for use in a production
> environment?
> 
> Thanks!
> 
> strk wrote:
> 
>> The introduced geom_accum function will force a copy of DETOASTED
>> geometries to allow for final functions release of memory associated
>> with each array element. Without an explicit copy, PG_DETOAST_DATUM
>> might or not allocate new memory, so we will not be safe explicitly
>> pfree'ing result.
>>
>> Now.
>> Final aggregate functions (fastcollect, fastunion) will release
>> memory associated with each array element to reduce old memory
>> usage while allocating new memory for the resulting objects.


-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From pramsey at refractions.net  Tue Oct 28 21:24:53 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Solaris
Message-ID: <3F9F24F5.6070906@refractions.net>

Yeah, unfortunately, looks like Solaris support needs a little tweaking...

 > ./SimpleWKTTester
Start Testing:
Segmentation fault (core dumped)

 > ./TestSweepLineSpeed
Segmentation fault (core dumped)


P.

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_



From dblasby at refractions.net  Tue Oct 28 23:05:49 2003
From: dblasby at refractions.net (Dave Blasby)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Solaris
In-Reply-To: <3F9F24F5.6070906@refractions.net>
References: <3F9F24F5.6070906@refractions.net>
Message-ID: <1067400349.3f9f3c9da66a7@hydra>

Quoting Paul Ramsey <pramsey@refractions.net>:

> Yeah, unfortunately, looks like Solaris support needs a little tweaking...
>

1. compile geos with debugging (-g)
2. run it in the debugger 
   (gdb ./SimpleWKTTester)
3. when it crashes, type "w" (for 'where')


Solaris is much more picky about memory mangement issues than linux, but I 
would have thought valgrind would have picked it up.  Solaris also has 
different byte alignments (8 byte word align for doubles on solaris vs 4 on 
intel).

dave


From pramsey at refractions.net  Tue Oct 28 23:09:39 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Solaris
In-Reply-To: <1067400349.3f9f3c9da66a7@hydra>
References: <3F9F24F5.6070906@refractions.net>
	<1067400349.3f9f3c9da66a7@hydra>
Message-ID: <3F9F3D83.1060703@refractions.net>

Cool, debugging by email. What next, you going to teach me to land a 
plane over the radio? :)

 > gdb ./XMLTester
GNU gdb 4.17
Copyright 1998 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain 
conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "sparc-sun-solaris2.6"...
(gdb) run
Starting program: /var/home/office/geos/source/test/.libs/./XMLTester

Program received signal SIGABRT, Aborted.
0xef50a8f0 in _kill ()
(gdb) where
#0  0xef50a8f0 in _kill ()
#1  0xef4bb318 in abort ()
#2  0xef5e55f0 in _ZN10__cxxabiv111__terminateEPFvvE (
     handler=0xef4bb214 <abort>)
     at ../../../../libstdc++-v3/libsupc++/eh_terminate.cc:47
#3  0xef5e5640 in _ZSt9terminatev ()
     at ../../../../libstdc++-v3/libsupc++/eh_terminate.cc:57
#4  0xef5e57b4 in __cxa_throw (obj=0x30448, tinfo=0xef768154, dest=0)
     at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:77
#5  0xef6d4fd4 in _ZN4geos14PrecisionModelC1Eddd (this=<incomplete type>,
     newScale=0, newOffsetX=0, newOffsetY=0) at PrecisionModel.cpp:72
#6  0x15e98 in main (argC=-268436416, argV=0xeffffc38) at XMLTester.cpp:109
(gdb)


Dave Blasby wrote:

> Quoting Paul Ramsey <pramsey@refractions.net>:
> 
> 
>>Yeah, unfortunately, looks like Solaris support needs a little tweaking...
>>
> 
> 
> 1. compile geos with debugging (-g)
> 2. run it in the debugger 
>    (gdb ./SimpleWKTTester)
> 3. when it crashes, type "w" (for 'where')
> 
> Solaris is much more picky about memory mangement issues than linux, but I 
> would have thought valgrind would have picked it up.  Solaris also has 
> different byte alignments (8 byte word align for doubles on solaris vs 4 on 
> intel).
> 
> dave


-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From dblasby at refractions.net  Wed Oct 29 02:36:46 2003
From: dblasby at refractions.net (Dave Blasby)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Solaris
In-Reply-To: <3F9F3D83.1060703@refractions.net>
References: <3F9F24F5.6070906@refractions.net>
	<1067400349.3f9f3c9da66a7@hydra> <3F9F3D83.1060703@refractions.net>
Message-ID: <1067413005.3f9f6e0e0242a@hydra>

> (gdb) run

Ooops - forgot to tell you to type "r" (or run) to start the program!

> Starting program: /var/home/office/geos/source/test/.libs/./XMLTester
> 
> Program received signal SIGABRT, Aborted.
...
> #6  0x15e98 in main (argC=-268436416, argV=0xeffffc38) at XMLTester.cpp:109

Hum - not so helpfull.  Sounds like something major is very wrong.  Perhaps 
the ./configure is bad?  Are all the libraries being linked properly?  

- SIGABRT sounds like a C++ exception being thrown instead of segfault.  
- argC=-268436416 implies either that the program started "very wrong" or 
memory has been corrupted.


dave


From pramsey at refractions.net  Wed Oct 29 11:55:03 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] Solaris Success
Message-ID: <3F9FF0E7.4000301@refractions.net>

Yeah, the problem was definately in the critial infrastructure area. The 
problem was linking using the old Solaris tools. Solved by ensuring that 
all tools used during the build were the recent GNU tools. Installing 
all the Solaris GNU development tools (www.sunfreeware.com):

libgcc
gcc
binutils
m4
gdb

and setting appropriate environment variables:

setenv M4 /usr/local/bin/m4
setenv LD /usr/local/bin/ld
setenv AR /usr/local/bin/ar

before autoconf, and configure, and now I have results.

XMLTester:
Failed: 0
Succeeded: 490

TestSweepLineSpeed:
n Pts: 1024000  Executed in 20440 ms

Ultra10, 300Mhz, Solaris 2.6

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_



From strk at keybit.net  Fri Oct 31 11:41:14 2003
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:52:10 2007
Subject: [geos-devel] clone()
Message-ID: <20031031174114.A84727@freek.keybit.net>

I've reintroduced the clone() virtual method for all geometries.
I've found comments stating it would have been replaced by copy
constructors, but copy constructors can not be virtual:

	Geometry *g1, *g2;
	g2 = new Geometry(*g); // won't work
	g2 = g1->clone();      // will work

--strk;

