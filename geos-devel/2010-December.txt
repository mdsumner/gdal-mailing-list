From pramsey at opengeo.org  Wed Dec  1 00:21:56 2010
From: pramsey at opengeo.org (Paul Ramsey)
Date: Wed Dec  1 00:22:00 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
Message-ID: <AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>

My only thought is, "my, I know nothing about Ruby!". So, do tell me
what needs to be in the main GEOS repo and who is going to need access
to commit it. :)

Best,

P.

On Tue, Nov 30, 2010 at 6:49 PM, J Smith <jay@zoocasa.com> wrote:
> Alright, all, that wasn't too bad...
>
> Using the output from geos.i, I removed the version number constants
> that get sorted out when geos.i is generated and which in turn is used
> to generate geos_wrap.cxx. Instead of hard coding the constants at
> build time, we can just use rb_eval_string during the extension
> initialization to extract the version numbers from the Geos.version
> method. For the GEOS_JTS_PORT constant, I noticed that the
> GEOSjtsport() function isn't exported for the CAPI in geos_c.h, but I
> extern'd it in the Ruby extension anyways to extract the version
> information. Is GEOSjtsport() unsafe to use for such purposes? It
> seems to be similar enough to GEOSversion() that it could probably be
> available in the CAPI, no? If GEOSjtsport is unsafe to use I'll remove
> it, though; I just wanted to retain complete compatibility with
> existing constants is all. Is GEOS_JTS_PORT a particularly useful
> constant? I've never had to use it, but then again I don't use JTS
> myself directly. (As an aside, I also added a I've also ssws a
> Geos.jts_port method similar to the Geos.version method.)
>
> At any rate, the version constants can now be created at extension
> initialization so they won't be dependant the geos.i file any more and
> SWIG can presumably be removed from the build process.
>
> Thoughts?
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From strk at keybit.net  Wed Dec  1 05:16:50 2010
From: strk at keybit.net (strk)
Date: Wed Dec  1 05:16:59 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
Message-ID: <20101201101650.GA71099@keybit.net>

On Tue, Nov 30, 2010 at 05:05:35PM -0500, J Smith wrote:

> Our plan at the moment would be to put the code up on to github along
> with the appropriate Rubygems releases.

Good idea.

> We'd like to license the
> extensions code under the MIT license as per the usual Ruby and Rails
> library terms.

Why not LGPL ?

As per "usual", freshmeat finds 276 projects written in Ruby,
with their licenses:

        GPL: 90
      MIT/X: 43
BSD Revised: 33
       LGPL: 28
      GPLv3: 18
          .....

http://freshmeat.net/search?page=1&q=ruby&submit=Search&with=800&without=

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From jay at zoocasa.com  Wed Dec  1 09:24:58 2010
From: jay at zoocasa.com (J Smith)
Date: Wed Dec  1 09:25:22 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <20101201101650.GA71099@keybit.net>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<20101201101650.GA71099@keybit.net>
Message-ID: <AANLkTinb0wHB5n_1K2gJ68zS_pJ1xRNXapg0eGczchtF@mail.gmail.com>

On Wed, Dec 1, 2010 at 5:16 AM, strk <strk@keybit.net> wrote:
>
> Why not LGPL ?
>
> As per "usual", freshmeat finds 276 projects written in Ruby,
> with their licenses:
>
> ? ? ? ?GPL: 90
> ? ? ?MIT/X: 43
> BSD Revised: 33
> ? ? ? LGPL: 28
> ? ? ?GPLv3: 18
> ? ? ? ? ?.....
>
> http://freshmeat.net/search?page=1&q=ruby&submit=Search&with=800&without=
>

The MIT license is sort of the trending license for Ruby projects
these days, if you will. I think Rails started the trend, as its major
components are all MIT licensed, as are many of the more popular
Ruby-based projects like Phusion Passenger, Bundler, rspec, gemcutter,
jeweler... on my system for instance, out of the 276 gems I have
installed (strange coincidence), approximately 207 gems appear to be
using the MIT license after some grepping around. ("Approximately", as
the license information seems to be omitted from the gemspecs way more
often than not, so my grepping was done using portions of the text of
the license itself and the phrase "MIT licen[sc]e".)

Anyways, when in Rome and all that...

Raw numbers aside, we also like the simple terms of the license and
its permissive nature.
From jay at zoocasa.com  Wed Dec  1 11:26:16 2010
From: jay at zoocasa.com (J Smith)
Date: Wed Dec  1 11:26:40 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
Message-ID: <AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>

On Wed, Dec 1, 2010 at 12:21 AM, Paul Ramsey <pramsey@opengeo.org> wrote:
> My only thought is, "my, I know nothing about Ruby!". So, do tell me
> what needs to be in the main GEOS repo and who is going to need access
> to commit it. :)
>
> Best,
>
> P.
>

Hi Paul.

At the moment the number of files is minimal:

- a Rakefile for various build tasks and such, via a Ruby package
called jeweler which automates builds and releases to the rubygems
infrastructure

- an extconf.rb file, which creates Makefiles for Ruby extensions.

- a modified source file based on the output created by the SWIG Ruby
output produced during the normal GEOS build process.

The big question is: do we want to have this code directly in the main
GEOS repository? We were planning on using github to facilitate the
whole social coding scene thing and 'cause we like the dead-simple
release management that jeweler provides.

Of course, the downside to this is that there would be a divergence
between the main-line SWIG bindings in the GEOS repository versus the
gemified version available via github and rubygems. On the other hand,
decoupling the Ruby bindings from the main library would allow for
independent releases where Ruby-specific features can be written and
released without having to do an entire GEOS release.

At any rate, the big news here is that the Ruby extension can be made
available via rubygems and thus available to a wider audience. At the
moment, installing the Ruby bindings usually means either hoping your
package management system has a geos-ruby-type package available or
you're building by hand and manually enabling with --enable-ruby.
Personally I'd say going the github way would be preferable from
release management and visibility perspectives, but if we want to look
at integration into the GEOS as an option we can hash it out.

Cheers.
From strk at keybit.net  Wed Dec  1 11:31:41 2010
From: strk at keybit.net (strk)
Date: Wed Dec  1 11:31:44 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>
Message-ID: <20101201163141.GD87879@keybit.net>

On Wed, Dec 01, 2010 at 11:26:16AM -0500, J Smith wrote:

> The big question is: do we want to have this code directly in the main
> GEOS repository? We were planning on using github to facilitate the
> whole social coding scene thing and 'cause we like the dead-simple
> release management that jeweler provides.

I second using a separate repository.
That way you can keep binding release cycles completely separated
from the core GEOS library.

I've been too lazy to do that for the PHP bindings...

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From pramsey at opengeo.org  Wed Dec  1 11:38:33 2010
From: pramsey at opengeo.org (Paul Ramsey)
Date: Wed Dec  1 11:38:36 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <20101201163141.GD87879@keybit.net>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>
	<20101201163141.GD87879@keybit.net>
Message-ID: <AANLkTi=zG8n2OdADNTjfKPG_oXWoNOm4TE8XOR9sQ5Oi@mail.gmail.com>

If there's no integration *required* to make the Ruby stuff work well,
then (a) you should keep them  and (b) we should strip out the old
ones and replace them with a readme.txt pointing to the location of
the maintained ones.

P.

On Wed, Dec 1, 2010 at 8:31 AM, strk <strk@keybit.net> wrote:
> On Wed, Dec 01, 2010 at 11:26:16AM -0500, J Smith wrote:
>
>> The big question is: do we want to have this code directly in the main
>> GEOS repository? We were planning on using github to facilitate the
>> whole social coding scene thing and 'cause we like the dead-simple
>> release management that jeweler provides.
>
> I second using a separate repository.
> That way you can keep binding release cycles completely separated
> from the core GEOS library.
>
> I've been too lazy to do that for the PHP bindings...
>
> --strk;
>
> ?() ? Free GIS & Flash consultant/developer
> ?/\ ? http://strk.keybit.net/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From jay at zoocasa.com  Wed Dec  1 11:53:08 2010
From: jay at zoocasa.com (J Smith)
Date: Wed Dec  1 11:53:30 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTi=zG8n2OdADNTjfKPG_oXWoNOm4TE8XOR9sQ5Oi@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>
	<20101201163141.GD87879@keybit.net>
	<AANLkTi=zG8n2OdADNTjfKPG_oXWoNOm4TE8XOR9sQ5Oi@mail.gmail.com>
Message-ID: <AANLkTinD84dh9JADyX+UVe=_9WGJ0cFe=80Q7VoVvtQA@mail.gmail.com>

On Wed, Dec 1, 2010 at 11:38 AM, Paul Ramsey <pramsey@opengeo.org> wrote:
> If there's no integration *required* to make the Ruby stuff work well,
> then (a) you should keep them ?and (b) we should strip out the old
> ones and replace them with a readme.txt pointing to the location of
> the maintained ones.
>
> P.
>

That would be cool. A further option to that -- if there's an official
GEOS or OpenGeo github account, our gem could be forked and that could
sort of become the official "GEOS-blessed" gem and we, as Zoocasa,
could have our own separate fork in a more unofficial way. That way we
can add stuff as we need to to our gem but it won't affect the
upstream blessed-gem unless you guys decide to merge any changes in.
(This whole social coding thing is pretty cool, yeah?)

I don't really know how much maintenance would be required going
forward as the Ruby bindings seem are quite stable. Perhaps this sort
of release will foster some interest in new features in the bindings
themselves. For our part, we've never had to patch away at the
bindings directly and have been putting all of our extensions into the
separate gem we'll be releasing, so that's kind of a separate thing.

Cheers!
From strk at keybit.net  Wed Dec  1 12:04:03 2010
From: strk at keybit.net (strk)
Date: Wed Dec  1 12:04:06 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTinD84dh9JADyX+UVe=_9WGJ0cFe=80Q7VoVvtQA@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>
	<20101201163141.GD87879@keybit.net>
	<AANLkTi=zG8n2OdADNTjfKPG_oXWoNOm4TE8XOR9sQ5Oi@mail.gmail.com>
	<AANLkTinD84dh9JADyX+UVe=_9WGJ0cFe=80Q7VoVvtQA@mail.gmail.com>
Message-ID: <20101201170403.GB89861@keybit.net>

On Wed, Dec 01, 2010 at 11:53:08AM -0500, J Smith wrote:

> That would be cool. A further option to that -- if there's an official
> GEOS or OpenGeo github account, our gem could be forked and that could
> sort of become the official "GEOS-blessed" gem and we, as Zoocasa,
> could have our own separate fork in a more unofficial way. That way we
> can add stuff as we need to to our gem but it won't affect the
> upstream blessed-gem unless you guys decide to merge any changes in.
> (This whole social coding thing is pretty cool, yeah?)

I'm loving distributed VCS too, but in this case we're talking
about keeping the binding separated so don't see a reason for
a fork.

I've an unofficial copy of geos svn on github.com/strk
Would love to see osgeo provide a git infrastructure.
Unfortunately github uses proprietary software for that.
But code used by gitorious.org is free-as-in-freedom.

All in all it's not important _where_ you put the code, if it's
in a git repo you can still share the efforts. Don't need the
web buttons for doing forks and pull requests. 

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From cfis at savagexi.com  Wed Dec  1 13:44:05 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Wed Dec  1 13:44:06 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>	<4CF591FC.3070807@savagexi.com>	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
Message-ID: <4CF69775.6000001@savagexi.com>

> My only thought is, "my, I know nothing about Ruby!". So, do tell me
> what needs to be in the main GEOS repo and who is going to need access
> to commit it. :)
In theory nothing - the idea would be move the ruby bindings outside of 
the geos source tree and have them live on their own and packaged as gem.

The advantage is that it becomes much more accessible to ruby developers 
because they could just do something like this:

yum install geos
gem install geos

And equivalent on Linuxes and OSX.  Windows of course would still remain 
more difficult.

That is actually how most ruby bindings to native libraries work - they 
aren't included as part of the native library itself.

The downside is that the different language bindings (ie python and 
ruby) go their separate ways. But that is already the case anyway...

Charlie
>
> Best,
>
> P.
>
> On Tue, Nov 30, 2010 at 6:49 PM, J Smith<jay@zoocasa.com>  wrote:
>> Alright, all, that wasn't too bad...
>>
>> Using the output from geos.i, I removed the version number constants
>> that get sorted out when geos.i is generated and which in turn is used
>> to generate geos_wrap.cxx. Instead of hard coding the constants at
>> build time, we can just use rb_eval_string during the extension
>> initialization to extract the version numbers from the Geos.version
>> method. For the GEOS_JTS_PORT constant, I noticed that the
>> GEOSjtsport() function isn't exported for the CAPI in geos_c.h, but I
>> extern'd it in the Ruby extension anyways to extract the version
>> information. Is GEOSjtsport() unsafe to use for such purposes? It
>> seems to be similar enough to GEOSversion() that it could probably be
>> available in the CAPI, no? If GEOSjtsport is unsafe to use I'll remove
>> it, though; I just wanted to retain complete compatibility with
>> existing constants is all. Is GEOS_JTS_PORT a particularly useful
>> constant? I've never had to use it, but then again I don't use JTS
>> myself directly. (As an aside, I also added a I've also ssws a
>> Geos.jts_port method similar to the Geos.version method.)
>>
>> At any rate, the version constants can now be created at extension
>> initialization so they won't be dependant the geos.i file any more and
>> SWIG can presumably be removed from the build process.
>>
>> Thoughts?
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Charlie Savage
http://cfis.savagexi.com
From cfis at savagexi.com  Wed Dec  1 13:48:54 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Wed Dec  1 13:48:54 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTinD84dh9JADyX+UVe=_9WGJ0cFe=80Q7VoVvtQA@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>	<4CF591FC.3070807@savagexi.com>	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>	<AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>	<20101201163141.GD87879@keybit.net>	<AANLkTi=zG8n2OdADNTjfKPG_oXWoNOm4TE8XOR9sQ5Oi@mail.gmail.com>
	<AANLkTinD84dh9JADyX+UVe=_9WGJ0cFe=80Q7VoVvtQA@mail.gmail.com>
Message-ID: <4CF69896.6030604@savagexi.com>

> I don't really know how much maintenance would be required going
> forward as the Ruby bindings seem are quite stable. Perhaps this sort
> of release will foster some interest in new features in the bindings
> themselves. For our part, we've never had to patch away at the
> bindings directly and have been putting all of our extensions into the
> separate gem we'll be releasing, so that's kind of a separate thing.

In a perfect world, I would probably rewrite the Ruby bindings to not 
use SWIG because that makes it really hard for others to contribute due 
to SWIG's learning code and the awful C code it generates.

However, its not that big of a win as long as the current bindings 
expose whats needed from the geos c api and then any 
extensions/additions/language specific stuff is done in regular ruby code.

But if you have a week to kill J, I think it would be a nice change :)

Charlie
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Charlie Savage
http://cfis.savagexi.com
From strk at keybit.net  Wed Dec  1 13:55:12 2010
From: strk at keybit.net (strk)
Date: Wed Dec  1 13:55:16 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <4CF69775.6000001@savagexi.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<4CF69775.6000001@savagexi.com>
Message-ID: <20101201185512.GB92106@keybit.net>

On Wed, Dec 01, 2010 at 11:44:05AM -0700, Charlie Savage wrote:

> The downside is that the different language bindings (ie python and 
> ruby) go their separate ways. But that is already the case anyway...

Yeah, also for PHP I didn't use swig...

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From jay at zoocasa.com  Wed Dec  1 14:13:35 2010
From: jay at zoocasa.com (J Smith)
Date: Wed Dec  1 14:13:40 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <4CF69896.6030604@savagexi.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<AANLkTinfdRX8jwOBP6OYF7qS8VrAogh+dbx1VjUjws2n@mail.gmail.com>
	<20101201163141.GD87879@keybit.net>
	<AANLkTi=zG8n2OdADNTjfKPG_oXWoNOm4TE8XOR9sQ5Oi@mail.gmail.com>
	<AANLkTinD84dh9JADyX+UVe=_9WGJ0cFe=80Q7VoVvtQA@mail.gmail.com>
	<4CF69896.6030604@savagexi.com>
Message-ID: <8992332A-6465-4C2C-8EA0-31198849778E@zoocasa.com>

That's a possibility, perhaps using ruby's ffi bindings, assuming it doesn't hurt performance and keeps the existing API. It sure could make things nicer for adding functionality and could open the code up potentially to a new audience who aren't familiar with hacking at ruby at the C level. I have previously done an ffi library, having converted the old ruby gd2 bindings library from using dlopen and friends to using ffi (see the gd2-ffij gem), so I'm familiar with the process. Something to think about for sure... Dammit, I think my weekend might have just been ruined, thanks for the idea. :)

Sent from my mobile

On 2010-12-01, at 1:48 PM, Charlie Savage <cfis@savagexi.com> wrote:

>> I don't really know how much maintenance would be required going
>> forward as the Ruby bindings seem are quite stable. Perhaps this sort
>> of release will foster some interest in new features in the bindings
>> themselves. For our part, we've never had to patch away at the
>> bindings directly and have been putting all of our extensions into the
>> separate gem we'll be releasing, so that's kind of a separate thing.
> 
> In a perfect world, I would probably rewrite the Ruby bindings to not use SWIG because that makes it really hard for others to contribute due to SWIG's learning code and the awful C code it generates.
> 
> However, its not that big of a win as long as the current bindings expose whats needed from the geos c api and then any extensions/additions/language specific stuff is done in regular ruby code.
> 
> But if you have a week to kill J, I think it would be a nice change :)
> 
> Charlie
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> -- 
> Charlie Savage
> http://cfis.savagexi.com
From sean.gillies at gmail.com  Wed Dec  1 14:15:23 2010
From: sean.gillies at gmail.com (Sean Gillies)
Date: Wed Dec  1 14:15:25 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <20101201185512.GB92106@keybit.net>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<4CF69775.6000001@savagexi.com> <20101201185512.GB92106@keybit.net>
Message-ID: <AANLkTi=57ZeXNQCvg5TUAH5jw+g70KV-5gZRqBJ2MZ9Y@mail.gmail.com>

On Wed, Dec 1, 2010 at 11:55 AM, strk <strk@keybit.net> wrote:
> On Wed, Dec 01, 2010 at 11:44:05AM -0700, Charlie Savage wrote:
>
>> The downside is that the different language bindings (ie python and
>> ruby) go their separate ways. But that is already the case anyway...
>
> Yeah, also for PHP I didn't use swig...
>

I've nothing other than anecdotal evidence, but I'm convinced Shapely
(https://github.com/sgillies/shapely) has picked up more patches than
it would have if it were maintained within GEOS. I've also been able
to push out 22 releases in the time that GEOS has had 11 (11 is not a
bad number at all).

Isn't Ruby-FFI (https://github.com/ffi/ffi/wiki/why-use-ffi)
production ready? I'm having nothing but success with Python's ctypes
(and libffi) on Linux, OS X, and Windows.

--
Sean Gillies
Programmer
Institute for the Study of the Ancient World
New York University
From si at tinypla.net  Wed Dec  1 15:16:50 2010
From: si at tinypla.net (Simon Tokumine)
Date: Wed Dec  1 15:17:13 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTi=57ZeXNQCvg5TUAH5jw+g70KV-5gZRqBJ2MZ9Y@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>
	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>
	<4CF591FC.3070807@savagexi.com>
	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>
	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>
	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>
	<4CF69775.6000001@savagexi.com> <20101201185512.GB92106@keybit.net>
	<AANLkTi=57ZeXNQCvg5TUAH5jw+g70KV-5gZRqBJ2MZ9Y@mail.gmail.com>
Message-ID: <2CAB74EF-EE59-4816-9CB8-DC9428D32817@tinypla.net>

Ruby ffi went 1.0 yesterday, so perhaps good timing? I'd be very happy to help with a porting to FFI if it happened.

All the best,

Simon

On 1 Dec 2010, at 19:15, Sean Gillies <sean.gillies@gmail.com> wrote:

> On Wed, Dec 1, 2010 at 11:55 AM, strk <strk@keybit.net> wrote:
>> On Wed, Dec 01, 2010 at 11:44:05AM -0700, Charlie Savage wrote:
>> 
>>> The downside is that the different language bindings (ie python and
>>> ruby) go their separate ways. But that is already the case anyway...
>> 
>> Yeah, also for PHP I didn't use swig...
>> 
> 
> I've nothing other than anecdotal evidence, but I'm convinced Shapely
> (https://github.com/sgillies/shapely) has picked up more patches than
> it would have if it were maintained within GEOS. I've also been able
> to push out 22 releases in the time that GEOS has had 11 (11 is not a
> bad number at all).
> 
> Isn't Ruby-FFI (https://github.com/ffi/ffi/wiki/why-use-ffi)
> production ready? I'm having nothing but success with Python's ctypes
> (and libffi) on Linux, OS X, and Windows.
> 
> --
> Sean Gillies
> Programmer
> Institute for the Study of the Ancient World
> New York University
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
From cfis at savagexi.com  Wed Dec  1 15:57:07 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Wed Dec  1 15:57:07 2010
Subject: [geos-devel] GEOS Ruby bindings gem and extensions
In-Reply-To: <AANLkTi=57ZeXNQCvg5TUAH5jw+g70KV-5gZRqBJ2MZ9Y@mail.gmail.com>
References: <AANLkTimm2rQwX9kd+DJzR8JiQsu1nBROZMJfYdmmTBgp@mail.gmail.com>	<AANLkTi=uvzOSmgWkDFx_Zpt_V7-J+DvdieH7w3mUYWU7@mail.gmail.com>	<4CF591FC.3070807@savagexi.com>	<AANLkTin+tQt4QfKqf=pi9xrHfFxsOoYeReH=nbqFJ74F@mail.gmail.com>	<AANLkTikad=90U9Doo_N-RP-k65ktK2hkh6qchuM=nTAK@mail.gmail.com>	<AANLkTin2+XphuK5tLusPaP+Nt92k3ooddEFkwAPLGJuv@mail.gmail.com>	<4CF69775.6000001@savagexi.com>
	<20101201185512.GB92106@keybit.net>
	<AANLkTi=57ZeXNQCvg5TUAH5jw+g70KV-5gZRqBJ2MZ9Y@mail.gmail.com>
Message-ID: <4CF6B6A3.90802@savagexi.com>

> I've nothing other than anecdotal evidence, but I'm convinced Shapely
> (https://github.com/sgillies/shapely) has picked up more patches than
> it would have if it were maintained within GEOS. I've also been able
> to push out 22 releases in the time that GEOS has had 11 (11 is not a
> bad number at all).
>
> Isn't Ruby-FFI (https://github.com/ffi/ffi/wiki/why-use-ffi)
> production ready? I'm having nothing but success with Python's ctypes
> (and libffi) on Linux, OS X, and Windows.

Ah, good point.  Yes it is, and is a default part of Ruby 1.9.2 I 
believe.  So that's another option that didn't really exist back when 
the bindings were first done.  Using them, you could do all ruby code.

Charlie

-- 
Charlie Savage
http://cfis.savagexi.com
From strk at keybit.net  Thu Dec  2 10:50:19 2010
From: strk at keybit.net (strk)
Date: Thu Dec  2 10:50:26 2010
Subject: [geos-devel] Snapping bug ?
Message-ID: <20101202155019.GG93040@keybit.net>

Martin, could you try this snapping with JTS ?

  input: POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))
snap_to: POINT(0.5 0)

In GEOS, it returns:

  POLYGON ((0.5 0, 0.5 0, 1 1, 0 1, 0.5 0))

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From dark.panda+lists at gmail.com  Thu Dec  2 19:21:06 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Thu Dec  2 19:21:28 2010
Subject: [geos-devel] GEOS FFI Ruby bindings
In-Reply-To: <AANLkTi=O+npjxTJKeA3AxEyCu8SLLRoV2gPMcS075KSq@mail.gmail.com>
References: <AANLkTi=O+npjxTJKeA3AxEyCu8SLLRoV2gPMcS075KSq@mail.gmail.com>
Message-ID: <AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>

Howdy folks.

Well, Charlie Savage planted the idea in my mind, so I'm currently in
the process of re-writing the GEOS bindings for Ruby in Ruby using
FFI.

After a hack-fest last night, I've gotten the basics down, and am
writing a unit test suite that can be used to compare against the
current SWIG-based library. So far I've only implemented
CoordinateSequence, WktReader, a couple of utility functions and the
various constants defined in the Geos module along with the very
basics of Geometry and the geometry classes that derive from it (i.e.
Point, LineString, etc.) and am currently messing around with the
callbacks to initGEOS to handle errors properly.

The goal is gonna be feature and functional parity with the existing
library and from there... well, who knows. At least it will hopefully
be easier for people to start hacking with.

I don't have a timeline on this yet, but I'd like to hopefully have
something up on github Real Soon Now for some collaboration. It's
coming along pretty quickly so I hope to put a couple more hours in
tonight and wrap up a lot of stuff and then we'll go from there.

Cheers and more to come.
From mtnclimb at telus.net  Thu Dec  2 22:55:06 2010
From: mtnclimb at telus.net (Martin Davis)
Date: Thu Dec  2 23:38:49 2010
Subject: [geos-devel] Snapping bug ?
In-Reply-To: <20101202155019.GG93040@keybit.net>
References: <20101202155019.GG93040@keybit.net>
Message-ID: <4CF86A1A.2060000@telus.net>

strk,

I'm not exactly sure which snapping routine you are using (and I'm not 
even sure if GEOS is in synch with JTS for this functionality).

Can you provide more details on the code you're using?  Is there a 
tolerance involved?

strk wrote:
> Martin, could you try this snapping with JTS ?
>
>   input: POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))
> snap_to: POINT(0.5 0)
>
> In GEOS, it returns:
>
>   POLYGON ((0.5 0, 0.5 0, 1 1, 0 1, 0.5 0))
>
> --strk;
>
>   ()   Free GIS & Flash consultant/developer
>   /\   http://strk.keybit.net/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> -----
> No virus found in this message.
> Checked by AVG - www.avg.com
> Version: 10.0.1170 / Virus Database: 426/3291 - Release Date: 12/01/10
>
>
>   
From cfis at savagexi.com  Fri Dec  3 00:50:32 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Dec  3 00:51:06 2010
Subject: [geos-devel] GEOS FFI Ruby bindings
In-Reply-To: <AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>
References: <AANLkTi=O+npjxTJKeA3AxEyCu8SLLRoV2gPMcS075KSq@mail.gmail.com>
	<AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>
Message-ID: <4CF88528.10707@savagexi.com>

>
> Well, Charlie Savage planted the idea in my mind, so I'm currently in
> the process of re-writing the GEOS bindings for Ruby in Ruby using
> FFI.

Very cool - but I think Sean deserves the credit...

>
> The goal is gonna be feature and functional parity with the existing
> library and from there... well, who knows. At least it will hopefully
> be easier for people to start hacking with.

Once you have something in reasonable shape, I'm happy to give it a try 
in our environment.

Thanks for pushing this forward...

Charlie
From dark.panda+lists at gmail.com  Fri Dec  3 01:06:26 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Fri Dec  3 01:06:48 2010
Subject: [geos-devel] GEOS FFI Ruby bindings
In-Reply-To: <4CF88528.10707@savagexi.com>
References: <AANLkTi=O+npjxTJKeA3AxEyCu8SLLRoV2gPMcS075KSq@mail.gmail.com>
	<AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>
	<4CF88528.10707@savagexi.com>
Message-ID: <AANLkTimGSw9FRBhFKY0=LfL3agaaGGNqjaGupHtKfkwe@mail.gmail.com>

On Fri, Dec 3, 2010 at 12:50 AM, Charlie Savage <cfis@savagexi.com> wrote:
>>
>> Well, Charlie Savage planted the idea in my mind, so I'm currently in
>> the process of re-writing the GEOS bindings for Ruby in Ruby using
>> FFI.
>
> Very cool - but I think Sean deserves the credit...
>

Well, it was certainly a team effort at the very least, eh?

> Once you have something in reasonable shape, I'm happy to give it a try in
> our environment.
>
> Thanks for pushing this forward...
>

Things are looking good now. I'm basing the test suite largely off of
the PHP tests and at the moment I have 41 tests and 194 assertions
passing in both the original SWIG extension and via FFI.

The performance difference at the moment isn't overly noticeable
(0.012859 s for SWIG, 0.018612 s for FFI on the last run, not that
that means a lot) and things have yet to be optimized. The API is
mostly the same the same. I haven't run into anything that needed to
be removed except for the GEOS_JTS_PORT constant which doesn't appear
to be exported in the C API. I have added a couple of methods that
have been added to GEOS since the last SWIG modifications such as I
believe union_cascaded, though. and probably be able to add wrappers
for GEOSGeom_extractUniquePoints, GEOSHausdorffDistance,
GEOSHausdorffDistanceDensify, and GEOSSharedPaths before wrapping it
all up.

Anyways, it's coming along quite quickly now that I've got a groove
goin' on. Hopefully I'll be posting to github before the weekend is
out at this rate.

Cheers
From strk at keybit.net  Fri Dec  3 04:58:08 2010
From: strk at keybit.net (strk)
Date: Fri Dec  3 04:58:15 2010
Subject: [geos-devel] GEOS FFI Ruby bindings
In-Reply-To: <AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>
References: <AANLkTi=O+npjxTJKeA3AxEyCu8SLLRoV2gPMcS075KSq@mail.gmail.com>
	<AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>
Message-ID: <20101203095808.GG24825@keybit.net>

On Thu, Dec 02, 2010 at 07:21:06PM -0500, J Smith wrote:
> Howdy folks.
> 
> Well, Charlie Savage planted the idea in my mind, so I'm currently in
> the process of re-writing the GEOS bindings for Ruby in Ruby using
> FFI.
> 
> After a hack-fest last night, I've gotten the basics down, and am
> writing a unit test suite that can be used to compare against the
> current SWIG-based library. So far I've only implemented
> CoordinateSequence, WktReader, a couple of utility functions and the
> various constants defined in the Geos module along with the very
> basics of Geometry and the geometry classes that derive from it (i.e.
> Point, LineString, etc.) and am currently messing around with the
> callbacks to initGEOS to handle errors properly.

Make sure to use the reentrant interface, worth, for new projects.
We may add support for precision models and things like that with its
use (contextual settings).

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Fri Dec  3 05:02:35 2010
From: strk at keybit.net (strk)
Date: Fri Dec  3 05:02:41 2010
Subject: [geos-devel] Snapping bug ?
In-Reply-To: <4CF86A1A.2060000@telus.net>
References: <20101202155019.GG93040@keybit.net> <4CF86A1A.2060000@telus.net>
Message-ID: <20101203100235.GH24825@keybit.net>

On Thu, Dec 02, 2010 at 07:55:06PM -0800, Martin Davis wrote:
> strk,
> 
> I'm not exactly sure which snapping routine you are using (and I'm not 
> even sure if GEOS is in synch with JTS for this functionality).
> 
> Can you provide more details on the code you're using?  Is there a 
> tolerance involved?

GEOS/JTS in sync
(I checked and synched, only additional snapToSelf was missing).

Tolerance is 1, but 0.6 is also enough. 

It's now in postgis too:

=# select st_asewkt(st_snap(
 'POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))',
 'POINT(0.5 0)',
 0.6
));
POLYGON((0.5 0,0.5 0,1 1,0 1,0.5 0))

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Fri Dec  3 09:23:43 2010
From: strk at keybit.net (strk)
Date: Fri Dec  3 09:23:49 2010
Subject: [geos-devel] Snapping bug ?
In-Reply-To: <20101203100235.GH24825@keybit.net>
References: <20101202155019.GG93040@keybit.net> <4CF86A1A.2060000@telus.net>
	<20101203100235.GH24825@keybit.net>
Message-ID: <20101203142343.GJ24825@keybit.net>

On Fri, Dec 03, 2010 at 11:02:35AM +0100, strk wrote:

> GEOS/JTS in sync
> (I checked and synched, only additional snapToSelf was missing).

So, Martin. 
After a closer look I found that indeed GEOS wasn't checking
for duplicates as JTS was. BUT: reading the code JTS seems to
be only checking for duplicates when snapping segments, not vertices.
So this specific case still yelds the duplicated point after porting
that part of the code.

Did you try with JTS ?

> =# select st_asewkt(st_snap(
>  'POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))',
>  'POINT(0.5 0)',
>  0.6
> ));

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Fri Dec  3 11:55:00 2010
From: strk at keybit.net (strk)
Date: Fri Dec  3 11:55:06 2010
Subject: [geos-devel] Snapping bug ?
In-Reply-To: <20101203142343.GJ24825@keybit.net>
References: <20101202155019.GG93040@keybit.net> <4CF86A1A.2060000@telus.net>
	<20101203100235.GH24825@keybit.net>
	<20101203142343.GJ24825@keybit.net>
Message-ID: <20101203165500.GM24825@keybit.net>

On Fri, Dec 03, 2010 at 03:23:43PM +0100, strk wrote:
> On Fri, Dec 03, 2010 at 11:02:35AM +0100, strk wrote:
> 
> > GEOS/JTS in sync
> > (I checked and synched, only additional snapToSelf was missing).
> 
> So, Martin. 
> After a closer look I found that indeed GEOS wasn't checking
> for duplicates as JTS was. BUT: reading the code JTS seems to
> be only checking for duplicates when snapping segments, not vertices.

Moreover, the check for duplicates found in snapSegments seems
to be useless to me, in that findSegmentToSnap will not return
a segment only snapping to endpoint, which means you'll never have
a coordinate being a duplicate of previous.

Please give me a case failing by dropping that check if I'm wrong
(I couldn't find one).

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From dark.panda+lists at gmail.com  Fri Dec  3 12:07:55 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Fri Dec  3 12:08:17 2010
Subject: [geos-devel] GEOS FFI Ruby bindings
In-Reply-To: <20101203095808.GG24825@keybit.net>
References: <AANLkTi=O+npjxTJKeA3AxEyCu8SLLRoV2gPMcS075KSq@mail.gmail.com>
	<AANLkTindKMHEHpvpW4eCGcqG+BsEwR5v8pQBzX1r-D=Z@mail.gmail.com>
	<20101203095808.GG24825@keybit.net>
Message-ID: <AANLkTikOmfA3Dg4D114r9eD6dQV=U70Q8JLpgcF6Lamq@mail.gmail.com>

On Fri, Dec 3, 2010 at 4:58 AM, strk <strk@keybit.net> wrote:
>
> Make sure to use the reentrant interface, worth, for new projects.
> We may add support for precision models and things like that with its
> use (contextual settings).
>

You mean use the *_r(handle, ...) functions and whatnot? Yeah, I
switched over to using those already. Yay for unit tests, eh?

As for the precision stuff, I can add round_precision methods to the
WktWriter class. Are there any other similar enhancements worth adding
that I might not have noticed with the current dev version of GEOS?
From mtnclimb at telus.net  Fri Dec  3 17:09:38 2010
From: mtnclimb at telus.net (Martin Davis)
Date: Fri Dec  3 17:10:13 2010
Subject: [geos-devel] Snapping bug ?
In-Reply-To: <20101203142343.GJ24825@keybit.net>
References: <20101202155019.GG93040@keybit.net> <4CF86A1A.2060000@telus.net>
	<20101203100235.GH24825@keybit.net>
	<20101203142343.GJ24825@keybit.net>
Message-ID: <4CF96AA2.7030300@telus.net>

Ok, I've tried this in JTS, and I get the same results as you posted for 
GEOS.

POLYGON ((0.5 0, 0.5 0, 1 1, 0 1, 0.5 0))

So yes, duplicate points are not being removed correctly.

This isn't a problem in the context in which this code is being used in 
JTS (polygon overlay), since duplicate vertices are supported under the 
JTS geometry model.

Might be nice to improve this behaviour, though. 


strk wrote:
> On Fri, Dec 03, 2010 at 11:02:35AM +0100, strk wrote:
>
>   
>> GEOS/JTS in sync
>> (I checked and synched, only additional snapToSelf was missing).
>>     
>
> So, Martin. 
> After a closer look I found that indeed GEOS wasn't checking
> for duplicates as JTS was. BUT: reading the code JTS seems to
> be only checking for duplicates when snapping segments, not vertices.
> So this specific case still yelds the duplicated point after porting
> that part of the code.
>
> Did you try with JTS ?
>
>   
>> =# select st_asewkt(st_snap(
>>  'POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))',
>>  'POINT(0.5 0)',
>>  0.6
>> ));
>>     
>
> --strk;
>
>   ()   Free GIS & Flash consultant/developer
>   /\   http://strk.keybit.net/services.html
>
>
> -----
> No virus found in this message.
> Checked by AVG - www.avg.com
> Version: 10.0.1170 / Virus Database: 426/3294 - Release Date: 12/03/10
>
>
>   
From dark.panda+lists at gmail.com  Sat Dec  4 21:56:51 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Sat Dec  4 21:57:13 2010
Subject: [geos-devel] GEOS FFI Ruby bindings now on github
In-Reply-To: <mailman.11837.1291517114.2887.geos-devel@lists.osgeo.org>
References: <mailman.11837.1291517114.2887.geos-devel@lists.osgeo.org>
Message-ID: <AANLkTiniPPX-CJWE3LEXb1xnLVTqffO4HpBVvW=smWD=@mail.gmail.com>

Howdy y'all.

I just finished pushing an implementation of the FFI-based GEOS Ruby
bindings to github. The new repository is available here:

https://github.com/dark-panda/ffi-geos

Included in the code:

- the code is built on the current svn trunk and definitely bombs out
using GEOS 3.2.2 at the moment. You can set the GEOS_LIBRARY_PATH
environment variable to point towards a GEOS install to run against,
and by default we look in the usual locations. (/usr/lib,
/usr/local/lib, /opt/local/lib, etc.)

- we're using the re-entrant CAPI functions. The TS handle is set in
Thread.current[:ffi_geos_handle] and calling Geos.current_handle grabs
whatever the current handle as well as initializes one if none exists
in the current thread.

- a test suite based mostly on the PHP extension's test suite.
Included are 99 tests and 481 assertions. The same test suite can be
run against the binary SWIG-based library too to help with
compatibility testing. Set the USE_BINARY_GEM environment variable to
run against the old GEOS binary. (This is kind of a poorly named
variable -- on my system I do have the original binary extension set
up as a gem, but that hasn't been released yet, so this name is
awkward, but I'm way too tired to change it at this point.) Anyways,
the test suite will run 75 tests and 354 assertions against the old
library, as it will skip any functionality not implemented in the
older build.

- extra goodies like rounding_precision and all that jazz.

- new functionality like polygonize et al, hausdorff_distance,
union_cascaded, extract_unique_points, valid_reason and valid_detail,
project, interpolate, point_n, start_point, end_point, snap,
shared_paths, and stuff I can't even begin to remember at the moment.

- Ruby's FFI bindings can't do varargs in callbacks, so the error
handling code the C API can't report its errors to Ruby at the moment.
All errors thrown from the C API unfortunately show up as
RuntimeErrors without much of an explanation other than a back trace.
I don't think there's much we can do about that short of re-jiggering
how the C API reports errors.

- I think there's a few methods I forgot to implement -- I'm seeing
module functions for Geos.create_point, create_polygon, etc., which I
never noticed before and don't personally use Whoops. I'll add those
tomorrow.

- I've made GeometryCollection an enumerable as I did in my other
extensions module.

Outside of the unit tests I haven't had a chance to try this in any
sort of real-world situation like testing it out on a major
application; I literally finished writing things up as I'm typing
this, so this is very much an alpha and anyone using it for anything
serious at the moment is crazy, 'cause this thing needs to be
thoroughly tested and re-tested and so on.

The Big To Do List:

- documentation. I basically just wrote code flat out and nonstop,
rdoc API docs would be nice.

- implement those aforementioned functions for create_point,
create_polygon, etc. I forgot about, along with any other functions I
might have missed.

- testing on platforms other than my laptop. I haven't run this code
outside of my MacBook, so the only platform known to work at the
moment is OSX 10.6.5 in 64-bit mode running Ruby 1.8.7-p302. I tried
running with Ruby 1.9.2-p0 but I'm getting segfaults coming out of
FFI, so more investigation is needed on that front.

- look for memory leaks and stuff. I don't know if I'm cleaning up
everything as I should be.

- optimize for performance. The code isn't all that much slower than
the current bindings, but it is slower.

- other clean ups.

Anyways, that's the code in a nut shell. Comments and patches are welcomed!

Cheers!
From geos-trac at osgeo.org  Tue Dec  7 07:05:11 2010
From: geos-trac at osgeo.org (GEOS)
Date: Tue Dec  7 07:05:13 2010
Subject: [geos-devel] [GEOS] #389: BufferOp assertion on make check
Message-ID: <049.8222eeaa4499685fecba3f8c2f719af9@osgeo.org>

#389: BufferOp assertion on make check
------------------------+---------------------------------------------------
 Reporter:  alopezcia   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:                            
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 Hello,
 any suggestion to determinate the error causes?

 -------------------------
 geos::simplify::TopologyPreservingSimplifier: ..........
 geos::util::UniqueCoordinateArrayFilter: .

 ---> group: geos::operation::buffer::BufferOp, test: test<4>
 problem: assertion failed

 tests summary: failures:1 ok:556
 FAIL: geos_unit
 ==================
 1 of 1 test failed
 ==================
 make: 1254-004 The error code from the last command is 1.
 --------------------------------------

 I'm using AIX 5.3, gcc 4.2.4 with this options

 CC=gcc
 CFLAGS='-maix64 -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -D_AIX53
 -D_AIX53 -D_ALL_SOURCE -DFUNCPROTO=15 -O -I/opt/freeware/include'
 CXX=g++
 CXXFLAGS='-maix64 -DSYSV -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51
 -D_AIX53 -D_
 AIX53 -D_ALL_SOURCE -DFUNCPROTO=15 -O -I/opt/freeware/include'
 LD=ld
 LDFLAGS=-L/opt/freeware/lib/gcc/powerpc-ibm-aix5.3.0.0/4.2.4/ppc64

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/389>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From dark.panda+lists at gmail.com  Wed Dec  8 23:50:18 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Wed Dec  8 23:50:39 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
Message-ID: <AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>

Howdy list.

I've run into a problem with the Ruby FFI bindings[1] and was
wondering if anyone has hit onto this problem before or has any
advice.

The basic gist of it goes something like this: as far as I can tell,
it seems that the error/notice handling code in GEOS is giving Ruby
and/or FFI a conniption fit. This may well be due to how I'm using FFI
to handle exceptions, but I'm not entirely sure of an alternative.

The basic idea is that I'm calling initGEOS_r with callbacks to a
notice handler and an error handler. The notice handler does nothing
and just ignores any raised notices, while the error handler will
raise a RuntimeError with the error message.

In some cases, these exceptions lead to segfaults and other strange
memory errors. The errors are reproducible, although finding the
conditions required to create them can be difficult and the results
can vary each time they are run. The best example I have at the moment
is the following using Ruby 1.9.2 and the ffi gem version 1.0.1 on OSX:

?$: << '.'
?require 'lib/ffi-geos'

?2.times do
? ?wktr = Geos::WktReader.new
? ?begin
? ? ?g = wktr.read('POINT(gibberish)')
? ?rescue RuntimeError => e
? ? ?puts e
? ?end
? ?GC.start
end

During the second loop, this code will sometimes result in a segfault
while other times it will raise a Ruby exception from FFI along the
lines of

`GEOSWKTReader_read_r': method `call' called on hidden T_ARRAY object
(0x0000010284b298 flags=0xa007 klass=0x0) (NotImplementedError)

Garbage collection plays a role in the error as well -- removing the
GC.start line will cause the script to succeed. The number of loops
can also be increased, but the error, be it a segfault or a catchable
Ruby exception, will occur eventually once GC runs.

I believe that the crux of the problem may be due to GEOS's error
handlers using varargs, which libffi cannot handle in callbacks
according to its documentation. Many of the errors raised via
ERROR_MESSAGE in GEOS use an sprintf format string along with the
actual error, while others sometimes just return the error message
string as a single argument.

As a test, I patched the current svn trunk to allow the pointers
ERROR_MESSAGE and NOTICE_MESSAGE to be set to NULL (or nil in Ruby via
FFI) and wrapped all uses of them in checks for NULL. The segfaults
now go away in both Ruby 1.8.7 and 1.9.2, but this also means that the
error messages provided are gone, which kinda sucks.

I'm not aware of a solution to try Ruby- or FFI-wise, but if anybody
has any hints that would be awesome. Alternatively, would it be
possible to patch the CAPI to accommodate? I'm not overly familiar
with the CAPI code outside of some experimentation I've been doing
over the past few days, but perhaps it would be possible to have
alternative error handlers that don't use varargs and could instead
pass a definitive set of arguments to their callbacks or something?
Another alternative may be to store the most recent error message in
the context handle and have it retrievable through a function when needed.

Any suggestions or advice would be much appreciated. Thanks for reading, list!

Cheers!

J

[1] Source code available via https://github.com/dark-panda/ffi-geos
From cfis at savagexi.com  Thu Dec  9 00:09:06 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Thu Dec  9 00:09:05 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
	<AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>
Message-ID: <4D006472.305@savagexi.com>

> I believe that the crux of the problem may be due to GEOS's error
> handlers using varargs, which libffi cannot handle in callbacks
> according to its documentation.

Just did a quick read of https://github.com/ffi/ffi/wiki/examples and 
the google group. Seems like in general FFI does support varargs.  Are 
callbacks a special case that isn't handled?  How hard do you suppose to 
get them to work?

Charlie
From dark.panda+lists at gmail.com  Thu Dec  9 00:34:22 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Thu Dec  9 00:41:23 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <4D006472.305@savagexi.com>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
	<AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>
	<4D006472.305@savagexi.com>
Message-ID: <AANLkTimtXBe42or7GG8aqNBGADaGov=-cPGp5jq_rfJw@mail.gmail.com>

On Thu, Dec 9, 2010 at 12:09 AM, Charlie Savage <cfis@savagexi.com> wrote:
>> I believe that the crux of the problem may be due to GEOS's error
>> handlers using varargs, which libffi cannot handle in callbacks
>> according to its documentation.
>
> Just did a quick read of https://github.com/ffi/ffi/wiki/examples and the
> google group. Seems like in general FFI does support varargs. ?Are callbacks
> a special case that isn't handled? ?How hard do you suppose to get them to
> work?
>

I think callbacks are a special case, although the documentation is
somewhat vague. In the Missing Features section of the info
documentation, it says:

"There is no support for calling varargs functions.  This may work on
some platforms, depending on how the ABI is defined, but it is not
reliable."

I believe this is referring to callbacks. When setting up a callback
along these lines...

attach_function(:initGEOS_r, callback([ :string, :varargs ], :void), :void)
...
FFIGeos.initGEOS_r(
  self.method(:error_handler),
  self.method(:error_handler)
)
...
def error_handler(*args)
  p(args)
end

All you get for the varargs argument is nil and the segfaults and
weirdness occurs as before. It appears that this is a special case, I
guess.

Another option beyond modifying GEOS directly might be to write a
small native C shim between the CAPI and Ruby and access the error
messages through that. It might not be ideal, as I think it would be
preferable to keep the library purely Ruby, but it would be an option
that wouldn't affect the CAPI or cause any binary compatibility breaks
should the context handler need to be changed.

I'll ask around the FFI groups and see what turns up.

Cheers!
From xie_jiong at 163.com  Thu Dec  9 03:59:24 2010
From: xie_jiong at 163.com (xie_jiong)
Date: Thu Dec  9 04:14:37 2010
Subject: [geos-devel] about buffer of self-intersect polygon
Message-ID: <3E7E1D0C05E04C7086D692A05A4BB219@workstation>

Hi All,

   Dose GEOS supports buffer of self-intersected polygon, just like 'POLYGON ((2 2,-2 -2,2 -2,-2 2,2 2))'. I get the wrong polygon result with GEOSBuffer('POLYGON ((2 2,-2 -2,2 -2,-2 2,2 2))',0.5,8). I use newest verion.
   Thanks.

Jiong
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20101209/65fa2fb0/attachment.html
From strk at keybit.net  Thu Dec  9 05:15:00 2010
From: strk at keybit.net (strk)
Date: Thu Dec  9 05:15:04 2010
Subject: [geos-devel] about buffer of self-intersect polygon
In-Reply-To: <3E7E1D0C05E04C7086D692A05A4BB219@workstation>
References: <3E7E1D0C05E04C7086D692A05A4BB219@workstation>
Message-ID: <20101209101500.GA54106@keybit.net>

On Thu, Dec 09, 2010 at 04:59:24PM +0800, xie_jiong wrote:
> Hi All,
> 
>    Dose GEOS supports buffer of self-intersected polygon, just like 'POLYGON ((2 2,-2 -2,2 -2,-2 2,2 2))'. I get the wrong polygon result with GEOSBuffer('POLYGON ((2 2,-2 -2,2 -2,-2 2,2 2))',0.5,8). I use newest verion.

Self-intersecting polygon is invalid.
Any invalid input is not supposed to yeld meaningful output.
You need to clean the invalidity up.

FYI: PostGIS has a geos-based routing doing a cleanup like this:

# select st_asewkt(st_makevalid('POLYGON ((2 2,-2 -2,2 -2,-2 2,2 2))'));
MULTIPOLYGON(((2 2,0 0,-2 2,2 2)),((0 0,2 -2,-2 -2,0 0)))

You can then successfully buffer the result (getting back to a POLYGON).

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From namrata.r.sorte at gmail.com  Thu Dec  9 06:10:00 2010
From: namrata.r.sorte at gmail.com (Namrata)
Date: Thu Dec  9 06:10:01 2010
Subject: [geos-devel] Help - Want to merge / join two polygons
Message-ID: <1291893000093-5818592.post@n2.nabble.com>


Hi,

I am exploring GEOS features. I want to know if it is possible to merge or
join 2 polygons?

And if I have MultiplePolygons and want to merge /join them all, is there
any such method in GEOS?

Your kind help is appreciated.

Thanks,
Namrata
-- 
View this message in context: http://osgeo-org.1803224.n2.nabble.com/Help-Want-to-merge-join-two-polygons-tp5818592p5818592.html
Sent from the GEOS Developers mailing list archive at Nabble.com.
From strk at keybit.net  Thu Dec  9 07:48:19 2010
From: strk at keybit.net (strk)
Date: Thu Dec  9 07:48:23 2010
Subject: [geos-devel] Help - Want to merge / join two polygons
In-Reply-To: <1291893000093-5818592.post@n2.nabble.com>
References: <1291893000093-5818592.post@n2.nabble.com>
Message-ID: <20101209124819.GD54106@keybit.net>

On Thu, Dec 09, 2010 at 03:10:00AM -0800, Namrata wrote:
> 
> Hi,
> 
> I am exploring GEOS features. I want to know if it is possible to merge or
> join 2 polygons?
> 
> And if I have MultiplePolygons and want to merge /join them all, is there
> any such method in GEOS?

Sure. See the Union operation.
For a collection, see the Cascaded flavor.

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From sean.gillies at gmail.com  Thu Dec  9 12:32:12 2010
From: sean.gillies at gmail.com (Sean Gillies)
Date: Thu Dec  9 12:32:15 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <AANLkTimtXBe42or7GG8aqNBGADaGov=-cPGp5jq_rfJw@mail.gmail.com>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
	<AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>
	<4D006472.305@savagexi.com>
	<AANLkTimtXBe42or7GG8aqNBGADaGov=-cPGp5jq_rfJw@mail.gmail.com>
Message-ID: <AANLkTi=O3bvOMcMxCWeEQMxAmb52f-KoDoT1kNFhygX6@mail.gmail.com>

On Wed, Dec 8, 2010 at 10:34 PM, J Smith <dark.panda+lists@gmail.com> wrote:
> On Thu, Dec 9, 2010 at 12:09 AM, Charlie Savage <cfis@savagexi.com> wrote:
>>> I believe that the crux of the problem may be due to GEOS's error
>>> handlers using varargs, which libffi cannot handle in callbacks
>>> according to its documentation.
>>
>> Just did a quick read of https://github.com/ffi/ffi/wiki/examples and the
>> google group. Seems like in general FFI does support varargs. ?Are callbacks
>> a special case that isn't handled? ?How hard do you suppose to get them to
>> work?
>>
>
> I think callbacks are a special case, although the documentation is
> somewhat vague. In the Missing Features section of the info
> documentation, it says:
>
> "There is no support for calling varargs functions. ?This may work on
> some platforms, depending on how the ABI is defined, but it is not
> reliable."
>
> I believe this is referring to callbacks. When setting up a callback
> along these lines...
>
> attach_function(:initGEOS_r, callback([ :string, :varargs ], :void), :void)
> ...
> FFIGeos.initGEOS_r(
> ?self.method(:error_handler),
> ?self.method(:error_handler)
> )
> ...
> def error_handler(*args)
> ?p(args)
> end
>
> All you get for the varargs argument is nil and the segfaults and
> weirdness occurs as before. It appears that this is a special case, I
> guess.
>
> Another option beyond modifying GEOS directly might be to write a
> small native C shim between the CAPI and Ruby and access the error
> messages through that. It might not be ideal, as I think it would be
> preferable to keep the library purely Ruby, but it would be an option
> that wouldn't affect the CAPI or cause any binary compatibility breaks
> should the context handler need to be changed.
>
> I'll ask around the FFI groups and see what turns up.
>
> Cheers!

FWIW, here's the GeoDjango approach:

  http://code.djangoproject.com/browser/django/trunk/django/contrib/gis/geos/libgeos.py#L53

and the Shapely approach:

  https://github.com/sgillies/shapely/blob/master/shapely/geos.py#L148

Shapely by default takes the error messages and sends them to
/dev/null because I didn't find them super useful. Each of the above
use a callback factory from ctypes

  http://docs.python.org/library/ctypes.html#callback-functions
From dark.panda+lists at gmail.com  Thu Dec  9 17:45:00 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Thu Dec  9 17:45:23 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <AANLkTi=O3bvOMcMxCWeEQMxAmb52f-KoDoT1kNFhygX6@mail.gmail.com>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
	<AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>
	<4D006472.305@savagexi.com>
	<AANLkTimtXBe42or7GG8aqNBGADaGov=-cPGp5jq_rfJw@mail.gmail.com>
	<AANLkTi=O3bvOMcMxCWeEQMxAmb52f-KoDoT1kNFhygX6@mail.gmail.com>
Message-ID: <AANLkTimwZ7DsxM1RWeMPRvztZTueXowZ=kNfCrPViO48@mail.gmail.com>

On Thu, Dec 9, 2010 at 12:32 PM, Sean Gillies <sean.gillies@gmail.com> wrote:
> FWIW, here's the GeoDjango approach:
>
> ?http://code.djangoproject.com/browser/django/trunk/django/contrib/gis/geos/libgeos.py#L53
>
> and the Shapely approach:
>
> ?https://github.com/sgillies/shapely/blob/master/shapely/geos.py#L148
>
> Shapely by default takes the error messages and sends them to
> /dev/null because I didn't find them super useful. Each of the above
> use a callback factory from ctypes
>
> ?http://docs.python.org/library/ctypes.html#callback-functions

I was poking around those projects last night and gave a similar
approach a try by tossing the errors out and relying on return values
from GEOS functions instead, but the problem remains.

I pared everything down to a minimal script to reproduce the problem.
Here's where it gets weird... this is the definition of the
initialization with the notice and error handlers:

def error_handler(*args)
  #print "anything"
  raise args[0] % args[1]
end

This will cause the segfault/weirdness to occur. However, when you
uncomment the print line, you get no segfault or weirdness. The print
line can even output an empty string so long as you NULL terminate it,
so outputting with 'print "\0"' will still eliminate the segfaults.

I'll drop a line to the FFI groups when I get a chance and we'll see
how that goes.

Cheers
From dark.panda+lists at gmail.com  Fri Dec 10 02:20:52 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Fri Dec 10 02:21:16 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <AANLkTimwZ7DsxM1RWeMPRvztZTueXowZ=kNfCrPViO48@mail.gmail.com>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>
	<AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>
	<4D006472.305@savagexi.com>
	<AANLkTimtXBe42or7GG8aqNBGADaGov=-cPGp5jq_rfJw@mail.gmail.com>
	<AANLkTi=O3bvOMcMxCWeEQMxAmb52f-KoDoT1kNFhygX6@mail.gmail.com>
	<AANLkTimwZ7DsxM1RWeMPRvztZTueXowZ=kNfCrPViO48@mail.gmail.com>
Message-ID: <AANLkTimX=a7TFL3-jVhY-9xzemV9xjJzAXjUpArbjQiZ@mail.gmail.com>

Alright, I think it's all good. I posted to the ruby-ffi list and got
back a response already and the prognosis is good! See
http://groups.google.com/group/ruby-ffi/browse_thread/thread/836d6c772d8088dc
, wherein I picked up the science that Mr. Wayne Meissner laid down.

Apparently the garbage collector was collecting some objects that
shouldn't have been collected, so the solution is to store them
somewhere until they can more safely be discarded with. I've patched
things up and stored the error and notice handler return values in
Thread.current and voil?, things started working -- no segfaults, no
weird memory errors. The full test suite is now running crash-free on
both Ruby 1.8.7 and 1.9.2, including a new multithreading test using
multiple WkbWriters, byte orders and dimensions and the whole shebang.

(As an aside, the varchars thing was a red herring -- the
documentation on "Missing Features" was a bit confusing and didn't
mean at all what I thought it did...)

Anyways, things are looking quite good now and we're getting closer to
a usable state! Rad!

J!
From cfis at savagexi.com  Fri Dec 10 02:25:55 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Dec 10 02:25:53 2010
Subject: [geos-devel] Ruby, FFI and ERROR_/NOTICE_MESSAGE
In-Reply-To: <AANLkTimX=a7TFL3-jVhY-9xzemV9xjJzAXjUpArbjQiZ@mail.gmail.com>
References: <mailman.12340.1291870078.2887.geos-devel@lists.osgeo.org>	<AANLkTi=SV0=wUPJT3o230qxeFBBQu0E3Ab2MdJeCHE7s@mail.gmail.com>	<4D006472.305@savagexi.com>	<AANLkTimtXBe42or7GG8aqNBGADaGov=-cPGp5jq_rfJw@mail.gmail.com>	<AANLkTi=O3bvOMcMxCWeEQMxAmb52f-KoDoT1kNFhygX6@mail.gmail.com>	<AANLkTimwZ7DsxM1RWeMPRvztZTueXowZ=kNfCrPViO48@mail.gmail.com>
	<AANLkTimX=a7TFL3-jVhY-9xzemV9xjJzAXjUpArbjQiZ@mail.gmail.com>
Message-ID: <4D01D603.6020505@savagexi.com>

> Alright, I think it's all good. I posted to the ruby-ffi list and got
> back a response already and the prognosis is good! See
> http://groups.google.com/group/ruby-ffi/browse_thread/thread/836d6c772d8088dc
> , wherein I picked up the science that Mr. Wayne Meissner laid down.

Ah, reading his response, your callbacks were eaten by the garbage 
collector.  That would explain the strange behavior and why commenting 
in and out lines of codes would sometimes change the results.  Sorry, I 
should have put 2 and 2 together based on your earlier description (been 
there done that with those sort of symptoms wrapping other C extensions).

>
> Apparently the garbage collector was collecting some objects that
> shouldn't have been collected, so the solution is to store them
> somewhere until they can more safely be discarded with. I've patched
> things up and stored the error and notice handler return values in
> Thread.current and voil?, things started working -- no segfaults, no
> weird memory errors. The full test suite is now running crash-free on
> both Ruby 1.8.7 and 1.9.2, including a new multithreading test using
> multiple WkbWriters, byte orders and dimensions and the whole shebang.

Excellent.

> Anyways, things are looking quite good now and we're getting closer to
> a usable state! Rad!

Nice work!

Charlie
From ahh34 at cam.ac.uk  Tue Dec 14 11:20:45 2010
From: ahh34 at cam.ac.uk (Alex Hagen-Zanker)
Date: Tue Dec 14 11:37:06 2010
Subject: [geos-devel] Cannot build from trunk because of SharedPathsOp
Message-ID: <4D07995D.3060202@cam.ac.uk>

Using nmake and the latest version from geos-svn I cannot build GEOS. 
There are unresolved link error related to SharedPathsOp.
I suppose the make files need to be updated to include SharedPathsOp.cpp.

I reverted to revision 3118 and it was OK.

Kind regards, Alex
From pramsey at opengeo.org  Tue Dec 14 12:09:20 2010
From: pramsey at opengeo.org (Paul Ramsey)
Date: Tue Dec 14 12:09:22 2010
Subject: [geos-devel] Cannot build from trunk because of SharedPathsOp
In-Reply-To: <4D07995D.3060202@cam.ac.uk>
References: <4D07995D.3060202@cam.ac.uk>
Message-ID: <AANLkTi=8vwsaSkYHQ5pXuhX58OxOCLant0Gs2-mawyT+@mail.gmail.com>

Re-run ./autogen.sh and ./configure

P

On Tue, Dec 14, 2010 at 8:20 AM, Alex Hagen-Zanker <ahh34@cam.ac.uk> wrote:
> Using nmake and the latest version from geos-svn I cannot build GEOS. There
> are unresolved link error related to SharedPathsOp.
> I suppose the make files need to be updated to include SharedPathsOp.cpp.
>
> I reverted to revision 3118 and it was OK.
>
> Kind regards, Alex
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From ahh34 at cam.ac.uk  Tue Dec 14 12:16:46 2010
From: ahh34 at cam.ac.uk (Alex Hagen-Zanker)
Date: Tue Dec 14 12:16:47 2010
Subject: Fwd: Re: [geos-devel] Cannot build from trunk because of SharedPathsOp
Message-ID: <4D07A67E.40602@cam.ac.uk>

Thanks, I am using windows, so I assume this doesn't apply?

 >>Re-run ./autogen.sh and ./configure

>>P

On Tue, Dec 14, 2010 at 8:20 AM, Alex Hagen-Zanker<ahh34@cam.ac.uk>  wrote:
>  Using nmake and the latest version from geos-svn I cannot build GEOS. There
>  are unresolved link error related to SharedPathsOp.
>  I suppose the make files need to be updated to include SharedPathsOp.cpp.
>
>  I reverted to revision 3118 and it was OK.
>
>  Kind regards, Alex
>  _______________________________________________
>  geos-devel mailing list
>  geos-devel@lists.osgeo.org
>  http://lists.osgeo.org/mailman/listinfo/geos-devel
>
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel

From strk at keybit.net  Tue Dec 14 13:00:17 2010
From: strk at keybit.net (strk)
Date: Tue Dec 14 13:00:20 2010
Subject: Fwd: Re: [geos-devel] Cannot build from trunk because of
	SharedPathsOp
In-Reply-To: <4D07A67E.40602@cam.ac.uk>
References: <4D07A67E.40602@cam.ac.uk>
Message-ID: <20101214180017.GG71533@keybit.net>

On Tue, Dec 14, 2010 at 05:16:46PM +0000, Alex Hagen-Zanker wrote:
> Thanks, I am using windows, so I assume this doesn't apply?

It depends on which tools you use for building.

> I suppose the make files need to be updated to include 
> SharedPathsOp.cpp.

Yes, SharedPathsOp (both .cpp and .h) would need to be
added to whatever build script is used.
"Send a patch" always applies.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From cfis at savagexi.com  Wed Dec 15 02:38:51 2010
From: cfis at savagexi.com (Charlie Savage)
Date: Wed Dec 15 02:38:52 2010
Subject: [geos-devel] Another GEOS Ruby Library
Message-ID: <4D08708B.40505@savagexi.com>

Just noticed this, RGeo:

http://www.daniel-azuma.com/blog/archives/28

J - worth pinging them?

Thanks,

Charlie
From ahh34 at cam.ac.uk  Wed Dec 15 04:28:29 2010
From: ahh34 at cam.ac.uk (Alex Hagen-Zanker)
Date: Wed Dec 15 04:28:31 2010
Subject: Fwd: Re: [geos-devel] Cannot build from trunk because
	of	SharedPathsOp
In-Reply-To: <20101214180017.GG71533@keybit.net>
References: <4D07A67E.40602@cam.ac.uk> <20101214180017.GG71533@keybit.net>
Message-ID: <4D088A3D.9020901@cam.ac.uk>

On 14/12/2010 18:00, strk wrote:
> On Tue, Dec 14, 2010 at 05:16:46PM +0000, Alex Hagen-Zanker wrote:
>> Thanks, I am using windows, so I assume this doesn't apply?
> It depends on which tools you use for building.
I am using NMAKE and follow the instruction from the GEOS website.
>> I suppose the make files need to be updated to include
>> SharedPathsOp.cpp.
> Yes, SharedPathsOp (both .cpp and .h) would need to be
> added to whatever build script is used.
> "Send a patch" always applies.
>
> --strk;
>
I would if I could. There is too much magic in it for me.

-- 
Alex

From dark.panda+lists at gmail.com  Wed Dec 15 18:50:17 2010
From: dark.panda+lists at gmail.com (J Smith)
Date: Wed Dec 15 18:50:38 2010
Subject: [geos-devel] Another GEOS Ruby Library
In-Reply-To: <4D08708B.40505@savagexi.com>
References: <4D08708B.40505@savagexi.com>
Message-ID: <AANLkTik_SAxtkO0NfCDgLtoZM3te7GTmoq0gbKTKtQ8f@mail.gmail.com>

On Wed, Dec 15, 2010 at 2:38 AM, Charlie Savage <cfis@savagexi.com> wrote:
> Just noticed this, RGeo:
>
> http://www.daniel-azuma.com/blog/archives/28
>
> J - worth pinging them?
>

Yeah, I noticed that last night when I saw that someone else added
themselves to the github watch list on ffi-geos. I just dropped a line
to the author to see if there's any opportunities for
cross-pollination. It looks like RGeo is using some custom C-based
wrappers for GEOS, so this might be an interesting place to use
ffi-geos as the library interface and keep everything in Ruby versus
partial user-land, partial native-land.

As an aside and along those lines, I just confirmed that ffi-geos
works in JRuby, so cross-platformed-ness here we come! Now maybe I'll
try my hand at Rubinius... I think I'm going to give ffi-proj4 a go,
too, just to round out the tool kit. Then we'd really be cooking with
fire, eh?

Cheers
From geos-trac at osgeo.org  Thu Dec 16 20:10:00 2010
From: geos-trac at osgeo.org (GEOS)
Date: Thu Dec 16 20:10:02 2010
Subject: [geos-devel] [GEOS] #390: Cascade Union Static Methods & More
	Qualified util
Message-ID: <049.a4c5007dfdf8cb74e7568fe6632c8845@osgeo.org>

#390: Cascade Union Static Methods & More Qualified util
-------------------------+--------------------------------------------------
 Reporter:  tomatsafe    |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  trivial      |   Milestone:                            
Component:  Default      |     Version:  3.0.3                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
 Hi All,

 Safe Software would like to offer another commit back to the GEOS trunk.

 I've modified GEOS code slightly to allow us to plug into Cascade Union in
 a certain way by changing some union methods to be static. I also had to
 add more qualificaiton to  'util::TopologyException' in BinaryOp.h to
 'geos::util::TopologyException' after running into a small issue with
 that.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/390>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Sat Dec 18 08:45:01 2010
From: geos-trac at osgeo.org (GEOS)
Date: Sat Dec 18 08:45:04 2010
Subject: [geos-devel] Re: [GEOS] #390: Cascade Union Static Methods & More
	Qualified util
In-Reply-To: <049.a4c5007dfdf8cb74e7568fe6632c8845@osgeo.org>
References: <049.a4c5007dfdf8cb74e7568fe6632c8845@osgeo.org>
Message-ID: <058.96082f153bf5465280f676b332a99888@osgeo.org>

#390: Cascade Union Static Methods & More Qualified util
-------------------------+--------------------------------------------------
 Reporter:  tomatsafe    |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  trivial      |   Milestone:                            
Component:  Default      |     Version:  3.0.3                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------

Comment(by strk):

 the patch contains indent changes too, could you please use the same
 indenting ?
 Also since you're at it please consider splitting the patch in two (the
 BinaryOp and static method)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/390#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
