From andrew.bell.ia at gmail.com  Fri Jan  3 07:24:20 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 3 Jan 2020 10:24:20 -0500
Subject: [geos-devel] Multipolygon Simplification
Message-ID: <CACJ51z3EZvbSPJPfPekXaTDW5LBnwspwgTDJu=PJGGmaE-JqsQ@mail.gmail.com>

Hi,

Does SimplifyPreserveTopolgy() work on multipolygons?  Can I be sure that a
valid multipolygon won't be turned into an invalid one (introduce some
intersection between polygons) when using this operation?

Thanks,

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200103/76f00d19/attachment.html>

From mtnclimb at gmail.com  Fri Jan  3 08:45:14 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Fri, 3 Jan 2020 08:45:14 -0800
Subject: [geos-devel] Multipolygon Simplification
In-Reply-To: <CACJ51z3EZvbSPJPfPekXaTDW5LBnwspwgTDJu=PJGGmaE-JqsQ@mail.gmail.com>
References: <CACJ51z3EZvbSPJPfPekXaTDW5LBnwspwgTDJu=PJGGmaE-JqsQ@mail.gmail.com>
Message-ID: <CAK2ens1T+nTCMFy=cMNaYoxHdSqiRY6L=McwLqkOvz3CmSt-Gg@mail.gmail.com>

Yes, SimplifyPreserveTopolgy() works with MultiPolygons.

On Fri, Jan 3, 2020 at 7:24 AM Andrew Bell <andrew.bell.ia at gmail.com> wrote:

> Hi,
>
> Does SimplifyPreserveTopolgy() work on multipolygons?  Can I be sure that
> a valid multipolygon won't be turned into an invalid one (introduce some
> intersection between polygons) when using this operation?
>
> Thanks,
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200103/69de8642/attachment.html>

From geos-trac at osgeo.org  Wed Jan 15 11:09:59 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 15 Jan 2020 19:09:59 -0000
Subject: [geos-devel] [GEOS] #1010: Leak in GEOSLineMerge_r
Message-ID: <048.5d6cd7b67058cfdf66a9c9b3cb169646@osgeo.org>

#1010: Leak in GEOSLineMerge_r
------------------------+--------------------------
 Reporter:  Algunenano  |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.9.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 From Postgis tests with HEAD:
 {{{
 $ valgrind --leak-check=full --show-leak-kinds=all ./cunit/cu_tester
 test_geos_linemerge

 ==548693== 40 bytes in 1 blocks are indirectly lost in loss record 2 of 6
 ==548693==    at 0x4838DEF: operator new(unsigned long)
 (vg_replace_malloc.c:344)
 ==548693==    by 0x5C8C098:
 geos::operation::linemerge::EdgeString::getCoordinates()
 (EdgeString.cpp:66)
 ==548693==    by 0x5C8C1FD:
 geos::operation::linemerge::EdgeString::toLineString() (EdgeString.cpp:96)
 ==548693==    by 0x5C8D4CE:
 geos::operation::linemerge::LineMerger::merge() (LineMerger.cpp:130)
 ==548693==    by 0x5C8DADD:
 geos::operation::linemerge::LineMerger::getMergedLineStrings()
 (LineMerger.cpp:233)
 ==548693==    by 0x4BF67CA: operator() (geos_ts_c.cpp:1896)
 ==548693==    by 0x4BF67CA: execute<(lambda at geos_ts_c.cpp:1890:35),
 nullptr> (geos_ts_c.cpp:377)
 ==548693==    by 0x4BF67CA: GEOSLineMerge_r (geos_ts_c.cpp:1890)
 ==548693==    by 0x1AB257: lwgeom_linemerge (lwgeom_geos.c:727)
 ==548693==    by 0x125E18: test_geos_linemerge (cu_geos.c:89)
 ==548693==    by 0x4884117: ??? (in /usr/lib/libcunit.so.1.0.1)
 ==548693==    by 0x4884AAF: CU_run_test (in /usr/lib/libcunit.so.1.0.1)
 ==548693==    by 0x158A12: main (cu_tester.c:226)
 ==548693==
 ==548693== 96 bytes in 1 blocks are indirectly lost in loss record 3 of 6
 ==548693==    at 0x4838DEF: operator new(unsigned long)
 (vg_replace_malloc.c:344)
 ==548693==    by 0x5C184A1: allocate (new_allocator.h:114)
 ==548693==    by 0x5C184A1: allocate (alloc_traits.h:444)
 ==548693==    by 0x5C184A1: _M_allocate (stl_vector.h:343)
 ==548693==    by 0x5C184A1: _M_realloc_insert<const geos::geom::Coordinate
 &> (vector.tcc:440)
 ==548693==    by 0x5C184A1: push_back (stl_vector.h:1195)
 ==548693==    by 0x5C184A1:
 geos::geom::CoordinateArraySequence::add(geos::geom::Coordinate const&,
 bool) (CoordinateArraySequence.cpp:135)
 ==548693==    by 0x5C185F9:
 geos::geom::CoordinateArraySequence::add(geos::geom::CoordinateSequence
 const*, bool, bool) (CoordinateArraySequence.cpp:146)
 ==548693==    by 0x5C8C15D:
 geos::operation::linemerge::EdgeString::getCoordinates()
 (EdgeString.cpp:79)
 ==548693==    by 0x5C8C1FD:
 geos::operation::linemerge::EdgeString::toLineString() (EdgeString.cpp:96)
 ==548693==    by 0x5C8D4CE:
 geos::operation::linemerge::LineMerger::merge() (LineMerger.cpp:130)
 ==548693==    by 0x5C8DADD:
 geos::operation::linemerge::LineMerger::getMergedLineStrings()
 (LineMerger.cpp:233)
 ==548693==    by 0x4BF67CA: operator() (geos_ts_c.cpp:1896)
 ==548693==    by 0x4BF67CA: execute<(lambda at geos_ts_c.cpp:1890:35),
 nullptr> (geos_ts_c.cpp:377)
 ==548693==    by 0x4BF67CA: GEOSLineMerge_r (geos_ts_c.cpp:1890)
 ==548693==    by 0x1AB257: lwgeom_linemerge (lwgeom_geos.c:727)
 ==548693==    by 0x125E18: test_geos_linemerge (cu_geos.c:89)
 ==548693==    by 0x4884117: ??? (in /usr/lib/libcunit.so.1.0.1)
 ==548693==    by 0x4884AAF: CU_run_test (in /usr/lib/libcunit.so.1.0.1)
 }}}


 The bisection points to
 https://github.com/libgeos/geos/commit/7a7cbf84fc5d4369baaf4c6e0614f44d4207503f
 as the culprit.

 I've tried to readd the removed `delete` call but it doesn't fix it:
 - delete didn't fix it: https://github.com/Algunenano/geos/commit/f40a4eb8
 - unique_ptr didn't fix it:
 https://github.com/Algunenano/geos/commit/3e5f8c59
 - full revert does fix it:
 https://github.com/Algunenano/geos/commit/0e40b08a

 I'm not sure what is causing the leak in the changes, so I'm not opening a
 PR yet, but feel free to fix it if you see what the issue is.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1010>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Jan 15 13:27:24 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 15 Jan 2020 21:27:24 -0000
Subject: [geos-devel] [GEOS] #1010: Leak in GEOSLineMerge_r
In-Reply-To: <048.5d6cd7b67058cfdf66a9c9b3cb169646@osgeo.org>
References: <048.5d6cd7b67058cfdf66a9c9b3cb169646@osgeo.org>
Message-ID: <063.762817189485547c4099924a15dae260@osgeo.org>

#1010: Leak in GEOSLineMerge_r
------------------------+---------------------------
 Reporter:  Algunenano  |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 https://github.com/libgeos/geos/pull/269

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1010#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan 16 06:39:43 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 16 Jan 2020 14:39:43 -0000
Subject: [geos-devel] [GEOS] #1008: Backport IsValid optimization to 3.8
In-Reply-To: <045.e81185913e47d90f76335c88465038d5@osgeo.org>
References: <045.e81185913e47d90f76335c88465038d5@osgeo.org>
Message-ID: <060.1b4ec7fe550cf47409fc7a987fcd959a@osgeo.org>

#1008: Backport IsValid optimization to 3.8
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.1
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"c2a683d19b72d092f11f59e6063dfdf1cb739d9a/git" c2a683d/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="c2a683d19b72d092f11f59e6063dfdf1cb739d9a"
 Avoid MonotoneChain self-compare in SimpleMCSweepLineIntersector

 This is a hotspot in validity profiling. This commit reduces the runtime
 of GEOSisValid from 3.7s to 2.0s for the 5,489 polygons in the
 HydroBASINS level 5 dataset, and from 610ms to 360ms for the individual
 polygon components of the boundary of Australia in the GADM country
 dataset.

 Fixes #1008
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1008#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Jan 17 19:10:56 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 18 Jan 2020 03:10:56 -0000
Subject: [geos-devel] [GEOS] #1010: Leak in GEOSLineMerge_r
In-Reply-To: <048.5d6cd7b67058cfdf66a9c9b3cb169646@osgeo.org>
References: <048.5d6cd7b67058cfdf66a9c9b3cb169646@osgeo.org>
Message-ID: <063.5a5083ddde378966809c0f29fd5a0c4b@osgeo.org>

#1010: Leak in GEOSLineMerge_r
------------------------+---------------------------
 Reporter:  Algunenano  |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"24f22e720ebcd3ed12d1651e539f44f774f3c5ef/git" 24f22e7/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="24f22e720ebcd3ed12d1651e539f44f774f3c5ef"
 Fix memory leak in GEOSLineMerge

 Fixes #1010
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1010#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From bontepaarden at gmail.com  Tue Jan 21 07:32:26 2020
From: bontepaarden at gmail.com (Paul Meems)
Date: Tue, 21 Jan 2020 16:32:26 +0100
Subject: [geos-devel] Clip and Union --> is my implementation correct?
In-Reply-To: <CAK2ens1EqO_ndkjoBoQ0Pib1NU-DRUJm277gu_RVUafSA9ccJA@mail.gmail.com>
References: <CAHNf2YS3UAxc7Bpd0QeAjo9Esqze8jY3YBZY0kK3qc3t2KRe=A@mail.gmail.com>
 <CAK2ens1EqO_ndkjoBoQ0Pib1NU-DRUJm277gu_RVUafSA9ccJA@mail.gmail.com>
Message-ID: <CAHNf2YQXy+G3DvfD1__dPm1F-ifefBy6W6=W436UjSEQR8My5g@mail.gmail.com>

Hi Martin,

Thanks for the answer and sorry for the late reply.
Because we couldn't do a quick magic trick we had to move on.

But now I'm at a similar point.
Again I have two large polygons files that I want to clip.
This is very slow. In fact, I have never succeeded because after 6+ hours I
canceled the process.

You mentioned a new function could be added to GEOS for quicker clipping of
polygons.
Is that still the case? If so how much budget would be needed to get this
function built?
It is quite a showstopper for us right now and I could gather some funding
for this.

Regards,

Paul Meems

Op di 15 okt. 2019 om 20:01 schreef Martin Davis <mtnclimb at gmail.com>:

> This sounds like a classic polygon coverage overlay operation?
>
> The "obvious" way to do this in GEOS is by using the overlay operations.
> However, these work on pairs of geometries only, which means that (a) it's
> a bit complicated to compute a full polygon coverage overlay and (b) this
> tends to be quite slow.
>
> The other way to do this in GEOS is to node the linework of the input
> coverages (GEOSUnion can do this), polygonize the linework, generate
> interior points for all resulting polygons, and then determine the
> parentage of each resultant by using point-in-polygon tests against the
> input coverages.
>
> This is a fair amount of complex code. But it should be faster (at least,
> if spatial indexes are used where appropriate).
>
> Perhaps we can add a function into GEOS to perform this operation at some
> point.
>
> On Tue, Oct 15, 2019 at 1:06 AM Paul Meems <bontepaarden at gmail.com> wrote:
>
>> Hi List,
>>
>> I have a large shapefile (land use) with a lot of small shapes (392k).
>> I also have a smaller shapefile (catchments) with larger shapes (2.5k).
>> The smaller shapefile overlaps the larger shapefile in the center.
>>
>> I need to create a new shapefile (expected number of shapes is several
>> 100k) that have the values of the land use and the catchments combined.
>> Currently, I'm doing a GEOSClip() of the land use by the catchment first
>> and then a GEOSUnion of the clipped result and the catchment.
>>
>> This is a bit slow. The clipping already takes 40 minutes.
>>
>> Am I using the right approach or should I use a different one?
>>
>> Extra info. I'm using MapWinGIS (C++) which includes GDAL and GEOS.
>> This is the implementation of GEOSClip:
>>
>> https://github.com/MapWindow/MapWinGIS/blob/develop/src/COM%20classes/Shapefile_Geoprocessing.cpp#L1936
>> It was created years ago. Perhaps the implementation can/should be
>> optimized as well.
>>
>> Thanks,
>>
>> Paul Meems
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200121/70f98cf9/attachment.html>

From geos-trac at osgeo.org  Sat Jan 25 08:13:56 2020
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 25 Jan 2020 16:13:56 -0000
Subject: [geos-devel] [GEOS] #1012: Thread Sanitizer warns of data race in
 geos::util::Interrupt::cancel()
Message-ID: <046.b5405f3a930bd392f9a7c59bf85ebfb2@osgeo.org>

#1012: Thread Sanitizer warns of data race in geos::util::Interrupt::cancel()
------------------------+--------------------------
 Reporter:  macdrevx    |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.7.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Original ticket: https://github.com/GEOSwift/GEOSwift/issues/192

 Actual geos version is 3.7.1 but it's not one of the available options in
 Version field.

 Two threads invoke `GEOS_init_r()` which in turn invokes
 `geos::util::Interrupt::cancel()`. Both threads write to the requested
 variable, which is detected by the [Thread
 Sanitizer|https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer]
 as a data race.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1012>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jan 27 11:49:23 2020
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 27 Jan 2020 19:49:23 -0000
Subject: [geos-devel] [GEOS] #1012: Thread Sanitizer warns of data race
 in geos::util::Interrupt::cancel()
In-Reply-To: <046.b5405f3a930bd392f9a7c59bf85ebfb2@osgeo.org>
References: <046.b5405f3a930bd392f9a7c59bf85ebfb2@osgeo.org>
Message-ID: <061.a79622b1cd60644bc7046ba1fcb0ac28@osgeo.org>

#1012: Thread Sanitizer warns of data race in geos::util::Interrupt::cancel()
------------------------+---------------------------
 Reporter:  macdrevx    |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 Both threads write the same value, however. Seems like the bigger issue
 would be if one thread is checking for an interrupt while another thread
 is requesting one.

 Could change the variable in question to a std::atomic<bool>.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1012#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan 30 07:44:18 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 30 Jan 2020 15:44:18 -0000
Subject: [geos-devel] [GEOS] #1013: MultiLineString::reverse should not
 change component order
Message-ID: <045.a67f2786ca38a2cc0f16a8f9745beb80@osgeo.org>

#1013: MultiLineString::reverse should not change component order
------------------------+--------------------------
 Reporter:  dbaston     |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.7.3
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 This behavior is inconsistent with other geometry types. Recently fixed in
 JTS.

 Recommend backporting to 3.7.x, where GEOSReverse was added to C API.

 PR at https://github.com/libgeos/geos/pull/271

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1013>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Jan 31 07:30:02 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 31 Jan 2020 15:30:02 -0000
Subject: [geos-devel] [GEOS] #1012: Thread Sanitizer warns of data race
 in geos::util::Interrupt::cancel()
In-Reply-To: <046.b5405f3a930bd392f9a7c59bf85ebfb2@osgeo.org>
References: <046.b5405f3a930bd392f9a7c59bf85ebfb2@osgeo.org>
Message-ID: <061.540ff9889ff73175c54293209e3fd5a9@osgeo.org>

#1012: Thread Sanitizer warns of data race in geos::util::Interrupt::cancel()
------------------------+---------------------------
 Reporter:  macdrevx    |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by macdrevx):

 If I'm reading the source correctly, it seems like the interrupt mechanism
 can be used from any thread and when it is, it will interrupt only that
 one thread. Is there any reason why this shouldn't be a thread-specific or
 context-specific construct?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1012#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

