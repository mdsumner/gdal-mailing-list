From pramsey at refractions.net  Tue Apr  1 19:38:15 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status?
Message-ID: <3E8A30F7.5040207@refractions.net>

What's the current status? Can we have the latest example programs and a 
  known clean build checked in and confirmed as clean by Wednesday please?
Thanks,
Paul

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From me at yury.ca  Wed Apr  2 04:22:31 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (Tuesday, April 1st)
References: <3E8A30F7.5040207@refractions.net>
Message-ID: <01b701c2f8f9$65a013d0$b9354d18@yury>

Sorry for the delay with the status report, but it didn't change (from my last
email on Mar. 23) until a short time ago. I've just finished debugging isValid
about an hour ago. It had some hard to catch bugs, but now it works fine and
passes all 805 tests.
Newest code that I've just committed to the repository compiles and runs fine on
Windows.
Overlay functions have not been tested yet.

In my phone meeting with Martin today we decided that it might be a good idea to
modify Norman's recommendation of adding raw*At (he recommended that these
methods (that don't check if the index is inside the list) can be used in places
that we know that the index is correct.) methods to CoordinateList* classes a
bit. Martin's thought today was that we probably should just modify normal getAt
(and etc.) methods so that they don't test the validity of the index and make it
a responsibility of the programmer (so far no calls produce the exception
anyway). If no one has any objections, I'll change the code accordingly. I can
also add safeGetAt (and etc.) methods that would check the index if someone
thinks that is should be done.


Yury

----- Original Message -----
From: "Paul Ramsey" <pramsey@refractions.net>
To: <geos-devel@geos.refractions.net>
Sent: Tuesday, April 01, 2003 4:38 PM
Subject: [geos-devel] Status?


> What's the current status? Can we have the latest example programs and a
>   known clean build checked in and confirmed as clean by Wednesday please?
> Thanks,
> Paul
>
> --
>        __
>       /
>       | Paul Ramsey
>       | Refractions Research
>       | Email: pramsey@refractions.net
>       | Phone: (250) 885-0632
>       \_
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From me at yury.ca  Thu Apr  3 05:58:25 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
Message-ID: <013f01c2f9cf$f4d966b0$b9354d18@yury>

I've added a new example that shows how to write a CoordinateList class that
wraps some other storage method (in this case an array of point_3d) to the CVS.

Yury

From pramsey at refractions.net  Thu Apr  3 22:56:27 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] GNU Build
Message-ID: <694AB450-6651-11D7-9CF6-000393D33C2E@refractions.net>

The latest commit builds under GNU and new test programs run no 
problems. GNU'sters update your archives for the latest build support.

Paul

      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From hi_ono2001 at ybb.ne.jp  Fri Apr  4 09:55:07 2003
From: hi_ono2001 at ybb.ne.jp (Hisaji Ono)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] About Compiling GEOS by MinGW
Message-ID: <004101c2faba$2f09fd00$4f8001db@webgis>

Hello.

 Thank to awesome work of development team, I could build latest GEOS in
Cygwin on WinXP.

 I'd also like to build GEOS in Mingw for linking R(Open Source Statistical
Language) with GEOS.

 Could some build this?

 Regards.



From nhv at cape.com  Fri Apr  4 14:16:59 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] About Compiling GEOS by MinGW
In-Reply-To: <004101c2faba$2f09fd00$4f8001db@webgis>
Message-ID: <EKEJIKAILPONGGENMBGAAEPODAAA.nhv@cape.com>

Hisaji Ono writes:
> 
>  I'd also like to build GEOS in Mingw for linking R(Open Source 
> Statistical
> Language) with GEOS.

This will have to wait for the GEOS namespace implementation
as there is a confict due to MingW STL including <windows.h>
which causes a conflivt with 'Polygon'

Once the GEOS namespace is implemented you should be able
to build GEOS with MingW by doing something like

% CC="c++ -mno-cygwin" CXX="c++ -mno-cygwin" configure; make

Norman

From hi_ono2001 at ybb.ne.jp  Fri Apr  4 17:04:51 2003
From: hi_ono2001 at ybb.ne.jp (Hisaji Ono)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] About Compiling GEOS by MinGW
References: <EKEJIKAILPONGGENMBGAAEPODAAA.nhv@cape.com>
Message-ID: <003b01c2faf6$3714e410$4f8001db@webgis>

Thank you very much, Mr. Vine.

> 
> This will have to wait for the GEOS namespace implementation
> as there is a confict due to MingW STL including <windows.h>
> which causes a conflivt with 'Polygon'
> 
> Once the GEOS namespace is implemented you should be able
> to build GEOS with MingW by doing something like
> 
> % CC="c++ -mno-cygwin" CXX="c++ -mno-cygwin" configure; make
> 


From dblasby at refractions.net  Fri Apr  4 17:06:22 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <013f01c2f9cf$f4d966b0$b9354d18@yury>
References: <013f01c2f9cf$f4d966b0$b9354d18@yury>
Message-ID: <3E8E01DE.3090505@refractions.net>

Yury A. Bychkov wrote:

>I've added a new example that shows how to write a CoordinateList class that
>wraps some other storage method (in this case an array of point_3d) to the CVS.
>
>  
>
I've started work on the PostGIS interface to GEOS.  I'm trying to 
decide between the normal
CoordinateList interface (BasicCoordinateList) and a custom CoordinateList:

The "normal list" would be something like: (cf. 
CoordinateListsExample.cpp in examples/)

CoordinateList 
*cl1=CoordinateListFactory::internalFactory->createCoordinateList();
cl1->add(*(new Coordinate(140,120)));

So, I'd convert my PostGIS point lists into a CoordinateList.  This 
would require
1. about 2* the memory since I'll have my PostGIS POINT3D and GEOS 
Coordinates around.
2. the time required to make the coordinates

The CustomCoordinate (cf. CustomPointCoordinateList.cpp in examples/) 
would allow me
to wrap my PostGIS POINT3D arrays into a CoordinateList.

On first account, this looks more memory efficient and time efficient, 
but upon closer
examination, it looks worse.  Lets look at the getAt(int) function:

Coordinate& CustomPointCoordinateList::getAt(int pos){
    point_3d pt;
    if (pos>=0 && pos<size) {
        pt=pts[pos];
        return *(new Coordinate(pt.x,pt.y,pt.z));
    } else
        throw "CustomPointCoordinateList exception: can't retrieve 
element\n";
}

 From a time perspective, any GEOS function  (like relate() ) that looks 
at each of the points in a
geometry will have to create a new Coordinate() for each PostGIS POINT3D.  
Its even worse if you look at each of the points
in a geometry twice (or more) - you'll construct several Coordanates. 
 This makes the
getAt() function *very* costly.  It also means that coordlist.get(3) 
will return a different object every
invocation.

For memory usage,  the GEOS function do something like build an index 
(ie. all the Coordinates are stored somewhere),
we are not saving any memory, not to mention we could be leaking memory 
with multiple calls to getAt().

So, it appears that the correct interface to use would be the 
BasicCoordinateList, not a custom one.  

Comments?

dave
ps. The PostGIS POINT3D is identical to the GEOS geom.h point_3d.



From mbdavis at VividSolutions.com  Fri Apr  4 17:18:53 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>

Sigh...  I guess you're right about this.  

This isn't what was intended.  I thought that the original design of the CoordinateList interface specified a method

Coordinate getAt(int i).  

This would return a Coordinate created on the stack, which should be a lot more efficient than creating a entire new Coordinate.  Possibly this message got lost somewhere along the way...  or did we try this and found it was slower or problematic?  Yury, can you remember?

The other option is to have a method getAt(int i, Coordinate& coord) which simply copies the Coordinate value into another reference object.  No new Coordinate objects are created.  Unfortunately all of the GEOS code would have to be revisited to make sure that it used this method, instead of getAt(int i).

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Friday, April 04, 2003 2:06 PM
> To: Yury A. Bychkov; GEOS Development List
> Subject: Re: [geos-devel] Status (New Example)
> 
> 
> Yury A. Bychkov wrote:
> 
> >I've added a new example that shows how to write a 
> CoordinateList class that
> >wraps some other storage method (in this case an array of 
> point_3d) to the CVS.
> >
> >  
> >
> I've started work on the PostGIS interface to GEOS.  I'm trying to 
> decide between the normal
> CoordinateList interface (BasicCoordinateList) and a custom 
> CoordinateList:
> 
> The "normal list" would be something like: (cf. 
> CoordinateListsExample.cpp in examples/)
> 
> CoordinateList 
> *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> cl1->add(*(new Coordinate(140,120)));
> 
> So, I'd convert my PostGIS point lists into a CoordinateList.  This 
> would require
> 1. about 2* the memory since I'll have my PostGIS POINT3D and GEOS 
> Coordinates around.
> 2. the time required to make the coordinates
> 
> The CustomCoordinate (cf. CustomPointCoordinateList.cpp in examples/) 
> would allow me
> to wrap my PostGIS POINT3D arrays into a CoordinateList.
> 
> On first account, this looks more memory efficient and time 
> efficient, 
> but upon closer
> examination, it looks worse.  Lets look at the getAt(int) function:
> 
> Coordinate& CustomPointCoordinateList::getAt(int pos){
>     point_3d pt;
>     if (pos>=0 && pos<size) {
>         pt=pts[pos];
>         return *(new Coordinate(pt.x,pt.y,pt.z));
>     } else
>         throw "CustomPointCoordinateList exception: can't retrieve 
> element\n";
> }
> 
>  From a time perspective, any GEOS function  (like relate() ) 
> that looks 
> at each of the points in a
> geometry will have to create a new Coordinate() for each 
> PostGIS POINT3D.  
> Its even worse if you look at each of the points
> in a geometry twice (or more) - you'll construct several Coordanates. 
>  This makes the
> getAt() function *very* costly.  It also means that coordlist.get(3) 
> will return a different object every
> invocation.
> 
> For memory usage,  the GEOS function do something like build an index 
> (ie. all the Coordinates are stored somewhere),
> we are not saving any memory, not to mention we could be 
> leaking memory 
> with multiple calls to getAt().
> 
> So, it appears that the correct interface to use would be the 
> BasicCoordinateList, not a custom one.  
> 
> Comments?
> 
> dave
> ps. The PostGIS POINT3D is identical to the GEOS geom.h point_3d.
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From dblasby at refractions.net  Fri Apr  4 19:37:55 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] WKTreader is broken
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>
Message-ID: <3E8E2563.7010401@refractions.net>

WKT reader doesnt like 3d points.

To cause a failure, modify  test/WKTin so it has one line:
POINT(1 1 1)

and run ./SimpleWKTTester

You'll get an abort exception.

I've also noticed that the WKTWriter (and geom->asString()) cause 
incorrect results like
 POINT (%.0-2147483647f %.0-2147483647f)

This might be a problem with my code since it almost always happens. 
 It'll take me a bit
to track it down since there's a lots of points of failure between 
postgis, the postgis adapter,
and the GEOS wrapper.

dave




From me at yury.ca  Fri Apr  4 21:09:44 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] WKTreader is broken
References: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>
	<3E8E2563.7010401@refractions.net>
Message-ID: <00b901c2fb18$7137e2b0$b9354d18@yury>

Dave, it is not a fault of your code. In its current implementation (both in C++
and Java) WKTReader doesn't support 3d points.

Yury

----- Original Message -----
From: "David Blasby" <dblasby@refractions.net>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Cc: "Yury A. Bychkov" <reply@yury.ca>
Sent: Friday, April 04, 2003 4:37 PM
Subject: [geos-devel] WKTreader is broken


> WKT reader doesnt like 3d points.
>
> To cause a failure, modify  test/WKTin so it has one line:
> POINT(1 1 1)
>
> and run ./SimpleWKTTester
>
> You'll get an abort exception.
>
> I've also noticed that the WKTWriter (and geom->asString()) cause
> incorrect results like
>  POINT (%.0-2147483647f %.0-2147483647f)
>
> This might be a problem with my code since it almost always happens.
>  It'll take me a bit
> to track it down since there's a lots of points of failure between
> postgis, the postgis adapter,
> and the GEOS wrapper.
>
> dave
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From me at yury.ca  Sat Apr  5 05:32:22 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
References: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>
Message-ID: <016801c2fb5e$a66af440$b9354d18@yury>

1. Original design was to return the Coordinate on stack (getAt(int i) had
return Coordinate(pt.x,pt.y,pt.z) instead of return *(new
Coordinate(pt.x,pt.y,pt.z)) ), but, if I remember correctly, that caused a
problem in a GNU compile.

2. Even if we'll solve the memory issue (maybe there are some options that could
be specified to fix the GNU compile), as far as I can see, the time issue in
unfixable, because if we store the data in another format (point_3d) and the
caller needs a Coordinate, then it HAS to be converted into a Coordinate every
time the call is made. Hopefully someone has an idea how to avoid that.

Yury



----- Original Message -----
From: "Martin Davis" <mbdavis@VividSolutions.com>
To: "GEOS Development List" <geos-devel@geos.refractions.net>; "Yury A. Bychkov"
<reply@yury.ca>; "Dave Blasby (E-mail)" <dblasby@refractions.net>
Sent: Friday, April 04, 2003 2:18 PM
Subject: RE: [geos-devel] Status (New Example)


Sigh...  I guess you're right about this.

This isn't what was intended.  I thought that the original design of the
CoordinateList interface specified a method

Coordinate getAt(int i).

This would return a Coordinate created on the stack, which should be a lot more
efficient than creating a entire new Coordinate.  Possibly this message got lost
somewhere along the way...  or did we try this and found it was slower or
problematic?  Yury, can you remember?

The other option is to have a method getAt(int i, Coordinate& coord) which
simply copies the Coordinate value into another reference object.  No new
Coordinate objects are created.  Unfortunately all of the GEOS code would have
to be revisited to make sure that it used this method, instead of getAt(int i).

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Friday, April 04, 2003 2:06 PM
> To: Yury A. Bychkov; GEOS Development List
> Subject: Re: [geos-devel] Status (New Example)
>
>
> Yury A. Bychkov wrote:
>
> >I've added a new example that shows how to write a
> CoordinateList class that
> >wraps some other storage method (in this case an array of
> point_3d) to the CVS.
> >
> >
> >
> I've started work on the PostGIS interface to GEOS.  I'm trying to
> decide between the normal
> CoordinateList interface (BasicCoordinateList) and a custom
> CoordinateList:
>
> The "normal list" would be something like: (cf.
> CoordinateListsExample.cpp in examples/)
>
> CoordinateList
> *cl1=CoordinateListFactory::internalFactory->createCoordinateList();
> cl1->add(*(new Coordinate(140,120)));
>
> So, I'd convert my PostGIS point lists into a CoordinateList.  This
> would require
> 1. about 2* the memory since I'll have my PostGIS POINT3D and GEOS
> Coordinates around.
> 2. the time required to make the coordinates
>
> The CustomCoordinate (cf. CustomPointCoordinateList.cpp in examples/)
> would allow me
> to wrap my PostGIS POINT3D arrays into a CoordinateList.
>
> On first account, this looks more memory efficient and time
> efficient,
> but upon closer
> examination, it looks worse.  Lets look at the getAt(int) function:
>
> Coordinate& CustomPointCoordinateList::getAt(int pos){
>     point_3d pt;
>     if (pos>=0 && pos<size) {
>         pt=pts[pos];
>         return *(new Coordinate(pt.x,pt.y,pt.z));
>     } else
>         throw "CustomPointCoordinateList exception: can't retrieve
> element\n";
> }
>
>  From a time perspective, any GEOS function  (like relate() )
> that looks
> at each of the points in a
> geometry will have to create a new Coordinate() for each
> PostGIS POINT3D.
> Its even worse if you look at each of the points
> in a geometry twice (or more) - you'll construct several Coordanates.
>  This makes the
> getAt() function *very* costly.  It also means that coordlist.get(3)
> will return a different object every
> invocation.
>
> For memory usage,  the GEOS function do something like build an index
> (ie. all the Coordinates are stored somewhere),
> we are not saving any memory, not to mention we could be
> leaking memory
> with multiple calls to getAt().
>
> So, it appears that the correct interface to use would be the
> BasicCoordinateList, not a custom one.
>
> Comments?
>
> dave
> ps. The PostGIS POINT3D is identical to the GEOS geom.h point_3d.
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


From dblasby at refractions.net  Sat Apr  5 18:29:26 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <016801c2fb5e$a66af440$b9354d18@yury>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>
	<016801c2fb5e$a66af440$b9354d18@yury>
Message-ID: <3E8F66D6.9050608@refractions.net>

I'm trying to get  a C program to talk to GEOS. I'm having difficulties.

I've attached 2 files - a .cpp wrapper for geos and a little .c program. 
 Basically it passes a string to the
wrapper (test.cpp) that turns it into a Geometry.  The resulting 
Geometry is wrapper in a GeometryWrapper
and returned to the C program.  The C program then passes the 
GeometryWrapper to the .cpp library
and asks it to return a string (char *) representation.  Really simple, 
but it doesnt work.

Here's what happens when I compile and run it.  Somehow the Geometry 
object gets corrupted.  
The programs are very simple, so I must be doing something subtly wrong. 
 The only real instructions
I've seen for calling C++ from C are at 
http://www.parashift.com/c++-faq-lite/mixing-c-and-cpp.html.  I think
I've followed it pretty closely.  It does make this warning, though:

 >Passing pointers to C++ objects to/from C functions will fail if you 
pass and get back something that isn't
 >exactly the same pointer. For example, don't pass a base class pointer 
and receive back a derived class
 >pointer, since your C compiler won't understand the pointer 
conversions necessary to handle multiple
 >and/or virtual inheritance.


[dblasby@hydra work_dave]$ g++ -g test.cpp -c -I/usr/local/include/geos 
; gcc -g test.c -o test test.o -lm -lstdc++ -lgeos ; ./test
geom text (to be parsed):POLYGON((100 200,100 140,180 140,180 200,100 200))
geom (WKTWriter):POLYGON ((100.0000000000000000 200.0000000000000000, 
100.0000000000000000 140.0000000000000000, 180.0000000000000000 
140.0000000000000000, 180.0000000000000000 200.0000000000000000, 
100.0000000000000000 200.0000000000000000))
GEOSasText is about to return : POLYGON ((100.0000000000000000 
200.0000000000000000, inf inf, inf inf, inf inf, inf inf))
result in C is POLYGON ((100.0000000000000000 200.0000000000000000, inf 
inf, inf inf, inf inf, inf inf))


I'm passing around a  GeometryWraper to try to isolate some problems. 
 Pretty much the same thing happens if you dont use the GeometryWrapper 
and just return a Geometry.

Any ideas?

dave
-------------- next part --------------
// g++ -g test.cpp -c -I/usr/local/include/geos



#include <stdio.h>

#include <string>
#include <iostream>
#include <fstream>

//#include "geom.h"
//#include "util.h"
//#include "graph.h"
#include "io.h"
//#include "opRelate.h"


	//sometimes the Virtual methods of Geometry can cause problems
	// when transiting from C to C++ - this helps to abstract those
	//  problems.  C.F. http://www.parashift.com/c++-faq-lite/mixing-c-and-cpp.html
	//
	// The same results happen if you dont wrap the Geometry in a simple structure.

typedef struct {
		Geometry *g;
} GeometryWrapper;

extern "C" GeometryWrapper *createGEOSFromText(char *wkt);
extern "C" char * GEOSasText(GeometryWrapper *g1);




char *GEOSasText(GeometryWrapper *g)
{
	Geometry *g1 = g->g;

	WKTWriter *w=new WKTWriter();


	string s = w->write(g1);

	char *result = (char *) s.c_str();

	printf("GEOSasText is about to return : %s\n",result);

	return result ;
}


GeometryWrapper *createGEOSFromText(char *wkt)
{
	GeometryWrapper *result = (GeometryWrapper *) malloc(sizeof(GeometryWrapper));
	//string s= string(wkt);
	//string s= "POLYGON((100 200,100 140,180 140,180 200,100 200))";
	string s= wkt;

	cout  <<"geom text (to be parsed):"<<s<<endl;



	Geometry *g;
	WKTReader *r = new WKTReader(new GeometryFactory(new PrecisionModel(),-1));

	g	 =r->read(s);

	WKTWriter *w=new WKTWriter();


		string s2 = w->write(g);

		cout <<"geom (WKTWriter):"<<s2<<endl;


	delete r;
	result->g = g;
	return result;
}

-------------- next part --------------
//gcc -g test.c -o test test.o -lm -lstdc++ -lgeos

#include "stdio.h"

typedef  struct GeometryWrapper GeometryWrapper;
extern    GeometryWrapper *createGEOSFromText(char *wkt);
extern    char * GEOSasText(GeometryWrapper *g1);




int main(int argC, char* argV[])
{
			GeometryWrapper *g = createGEOSFromText("POLYGON((100 200,100 140,180 140,180 200,100 200))");

			printf("result in C is %s\n",GEOSasText(g));
}

From nhv at cape.com  Sun Apr  6 09:47:10 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <3E8F66D6.9050608@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAEECMDBAA.nhv@cape.com>

David Blasby writes:
> 
> I've attached 2 files - a .cpp wrapper for geos and a little .c program. 
>  Basically it passes a string to the
> wrapper (test.cpp) that turns it into a Geometry.  The resulting 
> Geometry is wrapper in a GeometryWrapper
> and returned to the C program.  The C program then passes the 
> GeometryWrapper to the .cpp library
> and asks it to return a string (char *) representation.  Really simple, 
> but it doesnt work.

HTH

Norman
-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos_api.h
Type: application/octet-stream
Size: 309 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030406/c83f7af9/geos_api.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.c
Type: application/octet-stream
Size: 415 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030406/c83f7af9/test.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test_cpp.cpp
Type: application/octet-stream
Size: 699 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030406/c83f7af9/test_cpp.obj
From nhv at cape.com  Sun Apr  6 10:11:07 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <EKEJIKAILPONGGENMBGAEECMDBAA.nhv@cape.com>
Message-ID: <EKEJIKAILPONGGENMBGAMECMDBAA.nhv@cape.com>


Let me try that again I cleaned up to much of
my debugging 'cruft' from my earlier files

Norman


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net
> [mailto:geos-devel-bounces@geos.refractions.net]On Behalf Of Norman Vine
> Sent: Sunday, April 06, 2003 9:47 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] Status (New Example)
>
>
> David Blasby writes:
> >
> > I've attached 2 files - a .cpp wrapper for geos and a little .c
> program.
> >  Basically it passes a string to the
> > wrapper (test.cpp) that turns it into a Geometry.  The resulting
> > Geometry is wrapper in a GeometryWrapper
> > and returned to the C program.  The C program then passes the
> > GeometryWrapper to the .cpp library
> > and asks it to return a string (char *) representation.  Really simple,
> > but it doesnt work.
>
> HTH
>
> Norman
-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos_api.h
Type: application/octet-stream
Size: 309 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030406/a032aba7/geos_api.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.c
Type: application/octet-stream
Size: 415 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030406/a032aba7/test.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test_cpp.cpp
Type: application/octet-stream
Size: 725 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030406/a032aba7/test_cpp.obj
From dblasby at refractions.net  Sun Apr  6 15:57:21 2003
From: dblasby at refractions.net (Dave Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <EKEJIKAILPONGGENMBGAMECMDBAA.nhv@cape.com>
References: <EKEJIKAILPONGGENMBGAMECMDBAA.nhv@cape.com>
Message-ID: <1049659040.3e9086a100835@www>

Quoting Norman Vine <nhv@cape.com>:

> 
> Let me try that again I cleaned up to much of
> my debugging 'cruft' from my earlier files

I've tried running your files, but I get the same results as before.  (I put 
the words "norman" in so I was sure it was using the correct .o files).

I had a though on friday that the c++ wrapper ("test_cpp.cpp") might need more 
compile options than "-c"; say something like "-fpic".

Here's what i did (see the bottom for version info):

[dblasby@hydra work_dave]$ rm *.o
[dblasby@hydra work_dave]$ g++ -g test_cpp.cpp -c -I/usr/local/include/geos
[dblasby@hydra work_dave]$ gcc -g -o test test.c test_cpp.o -lm -lgeos -lstdc++
[dblasby@hydra work_dave]$ ./test
geom text (to be parsed norman):POLYGON((100 200,100 140,180 140,180 200,100 
200))

geom (WKTWriter):POLYGON ((100.0000000000000000 200.0000000000000000, 
100.0000000000000000 140.0000000000000000, 180.0000000000000000 
140.0000000000000000, 180.0000000000000000 200.0000000000000000, 
100.0000000000000000 200.0000000000000000))

result in C (norman) is
POLYGON ((100.0000000000000000 200.0000000000000000, 100.0000000000000000 
140.0000000000000000, inf inf, inf inf, inf inf))
[dblasby@hydra work_dave]$[dblasby@hydra work_dave]$ cat test.c
//c++ -c test_cpp.cpp
//gcc -g -o test test.c test_cpp.o -lm -lgeos -lstdc++

#include "stdio.h"
#include "geos_api.h"

extern    GeometryWrapper createGEOSFromText(char *wkt);
extern    char * GEOSasText(GeometryWrapper g1);


int main(int argC, char* argV[])
{
                        GeometryWrapper g =
createGEOSFromText("POLYGON((100 200,100 140,180 140,180 200,100 200))");

                        printf("\nresult in C (norman) is
%s\n",GEOSasText(g));
}

[dblasby@hydra work_dave]$ cat geos_api.h
#ifdef __cplusplus
#  define GEOS_C_START           extern "C" {
#  define GEOS_C_END             }
#else
#  define GEOS_C_START
#  define GEOS_C_END
#endif

GEOS_C_START;

typedef void *GeometryWrapper;

GeometryWrapper createGEOSFromText(char *wkt);
char * GEOSasText(GeometryWrapper g1);

GEOS_C_END;

[dblasby@hydra work_dave]$ cat test_cpp.cpp
// g++ -g test.cpp -c -I/usr/local/include/geos

#include <string>
#include <iostream>
#include <fstream>

#include "io.h"
#include "geos_api.h"

char *GEOSasText(GeometryWrapper g)
{
        Geometry *g1 = (Geometry *)g;

        WKTWriter *w=new WKTWriter();

        string s = w->write(g1);

        char *result = (char *)s.c_str();

        return result ;
}


GeometryWrapper createGEOSFromText(char *wkt)
{
        cout  <<"geom text (to be parsed norman):"<< wkt << endl;

    Geometry *g = new Geometry;

        WKTReader *r = new WKTReader(new GeometryFactory(new
PrecisionModel(),-1));

        g = r->read(wkt);

        WKTWriter *w=new WKTWriter();

    cout << endl << "geom (WKTWriter):"<< w->write(g) << endl;

        delete r;
    delete w;

        return (GeometryWrapper)g;
}



[dblasby@hydra work_dave]$
[dblasby@hydra work_dave]$ ldd test
        libm.so.6 => /lib/libm.so.6 (0x40028000)
        libgeos.so.1 => /usr/local/lib/libgeos.so.1 (0x4004a000)
        libstdc++-libc6.2-2.so.3 => /usr/lib/libstdc++-libc6.2-2.so.3 
(0x40100000)
        libc.so.6 => /lib/libc.so.6 (0x4014e000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)

[dblasby@hydra work_dave]$ gcc --version
2.96
[dblasby@hydra work_dave]$ g++ --version
2.96
[dblasby@hydra work_dave]$ ln --version
ln (fileutils) 4.1.5
Written by Mike Parker and David MacKenzie.

Copyright (C) 2002 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.




From nhv at cape.com  Sun Apr  6 21:02:30 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <1049659040.3e9086a100835@www>
Message-ID: <EKEJIKAILPONGGENMBGAKEDFDBAA.nhv@cape.com>

Dave Blasby writes:
>
> Quoting Norman Vine <nhv@cape.com>:
>
> >
> > Let me try that again I cleaned up to much of
> > my debugging 'cruft' from my earlier files
>
> I've tried running your files, but I get the same results as
> before.  (I put
> the words "norman" in so I was sure it was using the correct .o files).
>
> I had a though on friday that the c++ wrapper ("test_cpp.cpp")
> might need more
> compile options than "-c"; say something like "-fpic".
>

Curious ?

Here is what I get with Cygwin and gcc 3.2

==== cut makeit.sh ====
#!/usr/bin/bash

HEADERS="../../source/headers"
LIBS="../source/geom/.libs/"

g++ -I${HEADERS} -c test_cpp.cpp
gcc -I./ -o test test.c test_cpp.o -L${LIBS} -lgeos -lstdc++

./test
===== cut ====

<530>
$ ./makeit
geom text (to be parsed):POLYGON((100 200,100 140,180 140,180 200,100 200))

geom (WKTWriter):POLYGON ((100.0000000000000000 200.0000000000000000,
100.0000000000000000 140.0000000000000000, 180.000
0000000000000 140.0000000000000000, 180.0000000000000000
200.0000000000000000, 100.0000000000000000 200.0000000000000000
))

result in C is POLYGON ((100.0000000000000000 200.0000000000000000,
100.0000000000000000 140.0000000000000000, 180.00000
00000000000 140.0000000000000000, 180.0000000000000000 200.0000000000000000,
100.0000000000000000 200.0000000000000000))



From dblasby at refractions.net  Sun Apr  6 21:18:26 2003
From: dblasby at refractions.net (dblasby@refractions.net)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <EKEJIKAILPONGGENMBGAKEDFDBAA.nhv@cape.com>
Message-ID: <20030407011826.B7D13E3AC@lion.animals>

> Curious ?

Hum - there must be some difference between how linux and cygwin handle the 
communication between C and C++.  Perhaps there are some changes in the 
default options for gcc under cygwin??

What version of gcc are you using?

dave

From nhv at cape.com  Sun Apr  6 21:28:35 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <20030407011826.B7D13E3AC@lion.animals>
Message-ID: <EKEJIKAILPONGGENMBGAOEDHDBAA.nhv@cape.com>


 
> > Curious ?
> 
> Hum - there must be some difference between how linux and cygwin 
> handle the 
> communication between C and C++.  Perhaps there are some changes in the 
> default options for gcc under cygwin??
> 
> What version of gcc are you using?

3.2 but that shouldn't make any difference as this technique is identical
to that used by GDAL which AFAIK has had no problems reported

Norman 

From dblasby at refractions.net  Sun Apr  6 23:37:45 2003
From: dblasby at refractions.net (dblasby@refractions.net)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Status (New Example)
In-Reply-To: <EKEJIKAILPONGGENMBGAOEDHDBAA.nhv@cape.com>
Message-ID: <20030407033745.3547DE3AC@lion.animals>

Norman Vine <nhv@cape.com> said:

> > > Curious ?
> > 
> > Hum - there must be some difference between how linux and cygwin 
> > handle the 
> > communication between C and C++.  Perhaps there are some changes in the 
> > default options for gcc under cygwin??
> > 
> > What version of gcc are you using?
> 
> 3.2 but that shouldn't make any difference as this technique is identical
> to that used by GDAL which AFAIK has had no problems reported

Perhaps someone could try your program on another linux system - then we can 
narrow it down to something wrong on our system.

dave

From pramsey at refractions.net  Mon Apr  7 12:47:13 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] automake/conf/aclocal
Message-ID: <3E91AB91.9050709@refractions.net>

Norman,
What are your versions of automake, autoconf?
Thanks,
Paul

-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From nhv at cape.com  Mon Apr  7 12:57:07 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] automake/conf/aclocal
In-Reply-To: <3E91AB91.9050709@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAMEEPDBAA.nhv@cape.com>

Paul Ramsey writes:
>
> Norman,
> What are your versions of automake, autoconf?

autoconf 2.57
automake 1-7.3

These are the standard Cygwin 'devel' versions
and are required for libtool 1.4,
the minimum version with Cygwin DLL support

note the 'stable' Cygwin versions of these are

autoconf 2.13
automake 1.4p5

Norman


From dblasby at refractions.net  Mon Apr  7 16:00:21 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] automake/conf/aclocal
In-Reply-To: <EKEJIKAILPONGGENMBGAMEEPDBAA.nhv@cape.com>
References: <EKEJIKAILPONGGENMBGAMEEPDBAA.nhv@cape.com>
Message-ID: <3E91D8D5.6090107@refractions.net>

I tried again on a different linux machine here, unfortunately with the 
same wrong results.

[dblasby@lion work_dave]$ rm *.o test
[dblasby@lion work_dave]$ ./make_it
geom text (to be parsed norman):POLYGON((100 200,100 140,180 140,180 
200,100 200))

geom (WKTWriter):POLYGON ((100.0000000000000000 200.0000000000000000, 
100.0000000000000000 140.00000000
00000000, 180.0000000000000000 140.0000000000000000, 
180.0000000000000000 200.0000000000000000, 100.000
0000000000000 200.0000000000000000))

result in C (norman) is
POLYGON ((100.0000000000000000 200.0000000000000000, 
100.0000000000000000 140.0000000000000000, inf inf
, inf inf, inf inf))
[dblasby@lion work_dave]$ cat make_it
#!/bin/bash

HEADERS="/usr/local/include/geos"
LIBS="/usr/local/lib/"

g++ -I${HEADERS} -c test_cpp.cpp
gcc -I./ -o test test.c test_cpp.o -L${LIBS} -lgeos -lstdc++

./test
[dblasby@lion work_dave]$ cat test_cpp.cpp
// g++ -g test.cpp -c -I/usr/local/include/geos

#include <string>
#include <iostream>
#include <fstream>

#include "io.h"
#include "geos_api.h"

char *GEOSasText(GeometryWrapper g)
{
        Geometry *g1 = (Geometry *)g;

        WKTWriter *w=new WKTWriter();

        string s = w->write(g1);

        char *result = (char *)s.c_str();

        return result ;
}


GeometryWrapper createGEOSFromText(char *wkt)
{
        cout  <<"geom text (to be parsed norman):"<< wkt << endl;

    Geometry *g = new Geometry;
   
        WKTReader *r = new WKTReader(new GeometryFactory(new
PrecisionModel(),-1));

        g = r->read(wkt);

        WKTWriter *w=new WKTWriter();

    cout << endl << "geom (WKTWriter):"<< w->write(g) << endl;

        delete r;
    delete w;
   
        return (GeometryWrapper)g;
}



[dblasby@lion work_dave]$ cat test.c
//c++ -c test_cpp.cpp
//gcc -g -o test test.c test_cpp.o -lm -lgeos -lstdc++

#include "stdio.h"
#include "geos_api.h"

extern    GeometryWrapper createGEOSFromText(char *wkt);
extern    char * GEOSasText(GeometryWrapper g1);


int main(int argC, char* argV[])
{
                        GeometryWrapper g =
createGEOSFromText("POLYGON((100 200,100 140,180 140,180 200,100 200))");

                        printf("\nresult in C (norman) is
%s\n",GEOSasText(g));
}



[dblasby@lion work_dave]$ cat geos_api.h
#ifdef __cplusplus
#  define GEOS_C_START           extern "C" {
#  define GEOS_C_END             }
#else
#  define GEOS_C_START
#  define GEOS_C_END
#endif

GEOS_C_START;

typedef void *GeometryWrapper;

GeometryWrapper createGEOSFromText(char *wkt);
char * GEOSasText(GeometryWrapper g1);

GEOS_C_END;

  

[dblasby@lion work_dave]$ ldd test
        libgeos.so.1 => /usr/local/lib/libgeos.so.1 (0x40027000)
        libstdc++-libc6.2-2.so.3 => /usr/lib/libstdc++-libc6.2-2.so.3 
(0x400d8000)
        libc.so.6 => /lib/libc.so.6 (0x4011b000)
        libm.so.6 => /lib/libm.so.6 (0x40242000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
[dblasby@lion work_dave]$ gcc --version
2.96
[dblasby@lion work_dave]$ g++ --version
2.96
[dblasby@lion work_dave]$ ld --version
GNU ld version 2.11.93.0.2 20020207
Copyright 2002 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License.  This program has absolutely no warranty.
[dblasby@lion work_dave]$ libtool --version
ltmain.sh (GNU libtool) 1.4.3 (1.922.2.110 2002/10/23 01:39:54)
[dblasby@lion work_dave]$ ldd /usr/local/lib/libgeos.so
        libc.so.6 => /lib/libc.so.6 (0x400c4000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x80000000)



From dblasby at refractions.net  Mon Apr  7 16:50:01 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] problems with C/C++- getting warmer! (Reader Frees too
	much?)
In-Reply-To: <3E91D8D5.6090107@refractions.net>
References: <EKEJIKAILPONGGENMBGAMEEPDBAA.nhv@cape.com>
	<3E91D8D5.6090107@refractions.net>
Message-ID: <3E91E479.9090905@refractions.net>

Norman,

    Could you give this little C++ code a try?  Then try it again 
without the "delete r;  delete w;" lines commented out.
On my linux system, it works with the 2 lines commented out, but fails 
with them actually in.  More specficially it
fails if the reader (r) is deleted.  

My bet is that the reader is freeing too much (perhaps the 
PrecisionModel?).  The difference is functinality is probably
how cygwin actually implements its deletes at the operating system 
level.  I know that solaris machines are really picky about
memory allocations and deletions - more so than linux machines.  Perhaps 
linux is more picky than cygwin?

I'll look in the actual geos code, but I wanted to know what happens on 
your system.


 [dblasby@lion work_dave]$ g++ test.cpp -I/usr/local/include/geos -lgeos 
; ./a.out
geom (WKTWriter first try (should work) ):POLYGON ((100.0000000000000000 
200.0000000000000000, 100.0000000000000000 140.0000000000000000, 
180.0000000000000000 140.0000000000000000, 180.0000000000000000 
200.0000000000000000, 100.0000000000000000 200.0000000000000000))

geom (WKTWriter):POLYGON ((100.0000000000000000 200.0000000000000000, 
100.0000000000000000 140.0000000000000000, 180.0000000000000000 
140.0000000000000000, 180.0000000000000000 200.0000000000000000, 
100.0000000000000000 200.0000000000000000))
[dblasby@lion work_dave]$ cat test.cpp
// g++ test.cpp -I/usr/local/include/geos -lgeos

#include "stdio.h"
#include "io.h"


int main(int argC, char* argV[])
{

    Geometry *g = new Geometry;
    WKTReader *r = new WKTReader(new GeometryFactory(new 
PrecisionModel(),-1));
    WKTWriter *w=new WKTWriter();
    string wkt_out;


    g = r->read("POLYGON((100 200,100 140,180 140,180 200,100 200))");

    wkt_out =  w->write(g) ;

        cout << endl << "geom (WKTWriter first try (should work) ):"<< 
wkt_out << endl;

    //delete r;       //uncommenting this will cause this program to 
fail on linux machines.
    //delete w;

    w=new WKTWriter();
    wkt_out =  w->write(g) ;

    cout << endl << "geom (WKTWriter):"<< wkt_out << endl;


}




From nhv at cape.com  Mon Apr  7 17:03:41 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] problems with C/C++- getting warmer! (Reader Frees
	toomuch?)
In-Reply-To: <3E91E479.9090905@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAMEFMDBAA.nhv@cape.com>

David Blasby writes:
> 
> Norman,
> 
>     Could you give this little C++ code a try?  Then try it again 
> without the "delete r;  delete w;" lines commented out.
> On my linux system, it works with the 2 lines commented out, but fails 
> with them actually in.  More specficially it
> fails if the reader (r) is deleted.  

Sure this works OK albeit but will leak a bit of memory

Norman

From dblasby at refractions.net  Mon Apr  7 17:08:14 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] problems with C/C++- getting warmer! (Reader Frees
 toomuch?)
In-Reply-To: <EKEJIKAILPONGGENMBGAMEFMDBAA.nhv@cape.com>
References: <EKEJIKAILPONGGENMBGAMEFMDBAA.nhv@cape.com>
Message-ID: <3E91E8BE.7080400@refractions.net>

Norman Vine wrote:

>David Blasby writes:
>  
>
>>Norman,
>>
>>    Could you give this little C++ code a try?  Then try it again 
>>without the "delete r;  delete w;" lines commented out.
>>On my linux system, it works with the 2 lines commented out, but fails 
>>with them actually in.  More specficially it
>>fails if the reader (r) is deleted.  
>>    
>>
>
>Sure this works OK albeit but will leak a bit of memory
>
I'm not advocating not deleting the reader - but its obviously a big 
hint as to why I'm having troubles.  I'm looking at the Readers code now.



From nhv at cape.com  Mon Apr  7 17:29:18 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] problems with C/C++- getting warmer! (Reader Frees
	toomuch?)
In-Reply-To: <3E91E8BE.7080400@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAEEFODBAA.nhv@cape.com>

Dave 

does this work for you ?

Norman

=== cut ===

#include <string>
#include <iostream>

#include "io.h"
#include "geos_api.h"

char *GEOSasText(GeometryWrapper g)
{
	string s = WKTWriter().write((Geometry *)g);

	char *result = (char *)s.c_str();

	return result ;
}


GeometryWrapper createGEOSFromText(char *wkt)
{
	cout  <<"geom text (to be parsed):"<< wkt << endl;

	Geometry *g = new Geometry;
    
	WKTReader r = WKTReader(new GeometryFactory(new PrecisionModel(),-1));

	g = r.read(wkt);

	cout << endl << "geom (WKTWriter):"<< WKTWriter().write(g) << endl;

	return (GeometryWrapper)g;
}


From dblasby at refractions.net  Mon Apr  7 17:51:59 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Deleting PrecisionModels
In-Reply-To: <016801c2fb5e$a66af440$b9354d18@yury>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF41B@venus.VividSolutions.com>
	<016801c2fb5e$a66af440$b9354d18@yury>
Message-ID: <3E91F2FF.2060607@refractions.net>

Yury and everyone,

I've been looking at memory management and the PrecisionModel().  Take a 
look at Geometry.cpp, GeometryFactory.cpp, WKTReader.cpp, and something 
like Point.cpp.

There's some major issues here, I hope that they can be easily solved.

WKTReader/GeometryFactory

    Lets look at some code like this:

    WKTReader *r = new WKTReader(new GeometryFactory(new 
PrecisionModel(),-1));
    Geometry g1 = r->read("some WKT");
    Geometry g2 = r->read("some more WKT");

    At this stage  the WKTReader, GeometryFactory (inside the 
WKTReader), g1, and g2 all have references to the same PrecisionModel(). 
 If you were to:

    a) delete r;
            g1,g2, and the GeometryFactory now have pointers to an 
illegal PrecisionModel.  WKTReader delete method also deletes the shared 
PrecisionModel.
    b) delete g1;
           r, g2, and the GeometryFactory have an illegal PrecisionModel 
since the Geometry delete method also deletes the shared PrecisionModel.
    c) delete the GeometryFactory
            This is okay since the Factory doesnt delete the 
PrecisionModel.  Note - using "new GeometryFactory()" will leak a 
PrecisionModel.

JTS gets away with this because of java's reference counting and garbage 
collection.

The main issue is that Geometries share a common PrecisionModel (via the 
GeometryFactory).  This PrecisionModel is deleted in several places.

One way to deal with this is to *never* delete a PrecisionModel - leave 
that up to the user.  Typically a program would look like:

{
    PrecisionModel *pm = new PrecisionModel(); //only ever make one!!
        // make your WKTReader, GeometryFactories, and Geometry's here 
and always
       // refer to the same pm.

      // when there are no more Geometries or Factories, etc...
    delete pm;
}

The user would have to be careful to never delete a PrecisionModel or 
have the compiler auto-delete it (like at the end of function).

Alternatively, each geometry can have its very own PrecisionModel.  When 
the Geometry is deleted, also delete the PrecisionModel.
The GeometryFactory would have to clone its PrecisionModel everytime it 
creates a geometry.  Although this will have every Geometry take up more 
space, it would always be freed when its no longer needed.

Comments?
dave



From dblasby at refractions.net  Mon Apr  7 17:59:20 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] problems with C/C++- getting warmer! (Reader Frees
 toomuch?)
In-Reply-To: <EKEJIKAILPONGGENMBGAEEFODBAA.nhv@cape.com>
References: <EKEJIKAILPONGGENMBGAEEFODBAA.nhv@cape.com>
Message-ID: <3E91F4B8.3000302@refractions.net>

Norman Vine wrote:

>Dave 
>
>does this work for you ?
>  
>
No.

The reason is likely because "WKTReader r" is auto-deleted by the compiler when 

createGEOSFromText(char *wkt) returns.

If I change it so "r" is not deleted (by using new and no delete):

	WKTReader *r =  new WKTReader(new GeometryFactory(new PrecisionModel(),-1));
	g = r->read(wkt);

it works correctly.

dave



From mbdavis at VividSolutions.com  Mon Apr  7 19:32:54 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Deleting PrecisionModels
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF43B@venus.VividSolutions.com>

Darn...  (stronger language used in non-virtual life).

I guess Precision Model should become a value type, so that each Geometry has its own copy created as an instance variable within the object.  This shouldn't cause any problem, other than taking up space.

Yury, does this make sense to you? Can you please make this change to the code?

In JTS 1.3 I've made a slight change that means that the PrecisionModel no longer needs to be identical between two Geometrys which are the arguments to a method (like relate, for instance).  We should make this change in GEOS as well.  I guess this should be sooner rather than later, given this issue. Note that if you're always just using FLOATING (as 99% of users will I suspect) this isn't an issue.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Monday, April 07, 2003 2:52 PM
> To: Yury A. Bychkov; GEOS Development List
> Subject: [geos-devel] Deleting PrecisionModels
> 
> 
> Yury and everyone,
> 
> I've been looking at memory management and the 
> PrecisionModel().  Take a 
> look at Geometry.cpp, GeometryFactory.cpp, WKTReader.cpp, and 
> something 
> like Point.cpp.
> 
> There's some major issues here, I hope that they can be easily solved.
> 
> WKTReader/GeometryFactory
> 
>     Lets look at some code like this:
> 
>     WKTReader *r = new WKTReader(new GeometryFactory(new 
> PrecisionModel(),-1));
>     Geometry g1 = r->read("some WKT");
>     Geometry g2 = r->read("some more WKT");
> 
>     At this stage  the WKTReader, GeometryFactory (inside the 
> WKTReader), g1, and g2 all have references to the same 
> PrecisionModel(). 
>  If you were to:
> 
>     a) delete r;
>             g1,g2, and the GeometryFactory now have pointers to an 
> illegal PrecisionModel.  WKTReader delete method also deletes 
> the shared 
> PrecisionModel.
>     b) delete g1;
>            r, g2, and the GeometryFactory have an illegal 
> PrecisionModel 
> since the Geometry delete method also deletes the shared 
> PrecisionModel.
>     c) delete the GeometryFactory
>             This is okay since the Factory doesnt delete the 
> PrecisionModel.  Note - using "new GeometryFactory()" will leak a 
> PrecisionModel.
> 
> JTS gets away with this because of java's reference counting 
> and garbage 
> collection.
> 
> The main issue is that Geometries share a common 
> PrecisionModel (via the 
> GeometryFactory).  This PrecisionModel is deleted in several places.
> 
> One way to deal with this is to *never* delete a 
> PrecisionModel - leave 
> that up to the user.  Typically a program would look like:
> 
> {
>     PrecisionModel *pm = new PrecisionModel(); //only ever make one!!
>         // make your WKTReader, GeometryFactories, and 
> Geometry's here 
> and always
>        // refer to the same pm.
> 
>       // when there are no more Geometries or Factories, etc...
>     delete pm;
> }
> 
> The user would have to be careful to never delete a PrecisionModel or 
> have the compiler auto-delete it (like at the end of function).
> 
> Alternatively, each geometry can have its very own 
> PrecisionModel.  When 
> the Geometry is deleted, also delete the PrecisionModel.
> The GeometryFactory would have to clone its PrecisionModel 
> everytime it 
> creates a geometry.  Although this will have every Geometry 
> take up more 
> space, it would always be freed when its no longer needed.
> 
> Comments?
> dave
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From me at yury.ca  Mon Apr  7 20:27:42 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Deleting PrecisionModels
References: <5A94289A9268514C8D6C0F1FF44BA0271DF43B@venus.VividSolutions.com>
Message-ID: <00df01c2fd65$add3fa70$b9354d18@yury>

Yes, that makes sense. I'll try to change PrecisionModel to value type.
BTW, GEOS has not yet been thoroughly checked for memory leaks and other
allocation problems (even though I tried not to make such mistakes ;-)), so
there might be some more problems like this.

Yury


----- Original Message -----
From: "Martin Davis" <mbdavis@VividSolutions.com>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Cc: "Yury Bychkov (E-mail)" <ybychkov@direct.ca>
Sent: Monday, April 07, 2003 4:32 PM
Subject: RE: [geos-devel] Deleting PrecisionModels


Darn...  (stronger language used in non-virtual life).

I guess Precision Model should become a value type, so that each Geometry has
its own copy created as an instance variable within the object.  This shouldn't
cause any problem, other than taking up space.

Yury, does this make sense to you? Can you please make this change to the code?

In JTS 1.3 I've made a slight change that means that the PrecisionModel no
longer needs to be identical between two Geometrys which are the arguments to a
method (like relate, for instance).  We should make this change in GEOS as well.
I guess this should be sooner rather than later, given this issue. Note that if
you're always just using FLOATING (as 99% of users will I suspect) this isn't an
issue.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Monday, April 07, 2003 2:52 PM
> To: Yury A. Bychkov; GEOS Development List
> Subject: [geos-devel] Deleting PrecisionModels
>
>
> Yury and everyone,
>
> I've been looking at memory management and the
> PrecisionModel().  Take a
> look at Geometry.cpp, GeometryFactory.cpp, WKTReader.cpp, and
> something
> like Point.cpp.
>
> There's some major issues here, I hope that they can be easily solved.
>
> WKTReader/GeometryFactory
>
>     Lets look at some code like this:
>
>     WKTReader *r = new WKTReader(new GeometryFactory(new
> PrecisionModel(),-1));
>     Geometry g1 = r->read("some WKT");
>     Geometry g2 = r->read("some more WKT");
>
>     At this stage  the WKTReader, GeometryFactory (inside the
> WKTReader), g1, and g2 all have references to the same
> PrecisionModel().
>  If you were to:
>
>     a) delete r;
>             g1,g2, and the GeometryFactory now have pointers to an
> illegal PrecisionModel.  WKTReader delete method also deletes
> the shared
> PrecisionModel.
>     b) delete g1;
>            r, g2, and the GeometryFactory have an illegal
> PrecisionModel
> since the Geometry delete method also deletes the shared
> PrecisionModel.
>     c) delete the GeometryFactory
>             This is okay since the Factory doesnt delete the
> PrecisionModel.  Note - using "new GeometryFactory()" will leak a
> PrecisionModel.
>
> JTS gets away with this because of java's reference counting
> and garbage
> collection.
>
> The main issue is that Geometries share a common
> PrecisionModel (via the
> GeometryFactory).  This PrecisionModel is deleted in several places.
>
> One way to deal with this is to *never* delete a
> PrecisionModel - leave
> that up to the user.  Typically a program would look like:
>
> {
>     PrecisionModel *pm = new PrecisionModel(); //only ever make one!!
>         // make your WKTReader, GeometryFactories, and
> Geometry's here
> and always
>        // refer to the same pm.
>
>       // when there are no more Geometries or Factories, etc...
>     delete pm;
> }
>
> The user would have to be careful to never delete a PrecisionModel or
> have the compiler auto-delete it (like at the end of function).
>
> Alternatively, each geometry can have its very own
> PrecisionModel.  When
> the Geometry is deleted, also delete the PrecisionModel.
> The GeometryFactory would have to clone its PrecisionModel
> everytime it
> creates a geometry.  Although this will have every Geometry
> take up more
> space, it would always be freed when its no longer needed.
>
> Comments?
> dave
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel


From dblasby at refractions.net  Tue Apr  8 13:34:18 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Deleting PrecisionModels
In-Reply-To: <00df01c2fd65$add3fa70$b9354d18@yury>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF43B@venus.VividSolutions.com>
	<00df01c2fd65$add3fa70$b9354d18@yury>
Message-ID: <3E93081A.3070203@refractions.net>

I'm getting this compile warning (with -Wall).  I couldnt find what its 
complaining about.

In file included from /usr/local/include/geos/io.h:10,
                 from postgis_GEOSwrapper.cpp:13:
/usr/local/include/geos/geom.h:195: warning: `class BasicCoordinateList' 
has virtual functions but
non-virtual destructor
/usr/local/include/geos/geom.h:226: warning: `class PointCoordinateList' 
has virtual functions but
non-virtual destructor



From nhv at cape.com  Tue Apr  8 13:48:05 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Deleting PrecisionModels
In-Reply-To: <3E93081A.3070203@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAKEINDBAA.nhv@cape.com>

David Blasby writes:
>
> I'm getting this compile warning (with -Wall).  I couldnt find what its
> complaining about.
>
> In file included from /usr/local/include/geos/io.h:10,
>                  from postgis_GEOSwrapper.cpp:13:
> /usr/local/include/geos/geom.h:195: warning: `class BasicCoordinateList'
> has virtual functions but
> non-virtual destructor
> /usr/local/include/geos/geom.h:226: warning: `class PointCoordinateList'
> has virtual functions but
> non-virtual destructor

Since there are virtual methods the detructors should be declared as virtual

ie in geom.h
change from
  ~BasicCoordinateList();
to
  virtual ~BasicCoordinateList();

The .cpp files do not need a change

Norman


From dblasby at refractions.net  Tue Apr  8 16:05:40 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Does geos handle 3d points
In-Reply-To: <3E93081A.3070203@refractions.net>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF43B@venus.VividSolutions.com>
	<00df01c2fd65$add3fa70$b9354d18@yury> <3E93081A.3070203@refractions.net>
Message-ID: <3E932B94.6060108@refractions.net>

The output of the included program is "geom = POINT (0.0000000000000000 
1.0000000000000000)".  Is the Z ordinate just not being printed or is it 
lost?  

If its not being printed, then we should fix this.  Also, the 
WKTReader() should handle 3d points as well.


// g++ test2.cpp -I/usr/local/include/geos -lgeos

#include "stdio.h"
#include "io.h"


int main(int argC, char* argV[])
{

    Coordinate *c;
    GeometryFactory *geomFactory;
    Geometry *g ;

    geomFactory= new GeometryFactory( new PrecisionModel(), -1);
    c = new Coordinate(0,1,2);
    g= geomFactory->createPoint(*c);

    string s= g->toString();
    cout << "geom = "<<s;
}




From dblasby at refractions.net  Tue Apr  8 16:12:24 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
In-Reply-To: <3E932B94.6060108@refractions.net>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF43B@venus.VividSolutions.com>
	<00df01c2fd65$add3fa70$b9354d18@yury> <3E93081A.3070203@refractions.net>
	<3E932B94.6060108@refractions.net>
Message-ID: <3E932D28.6090006@refractions.net>

This fails in the relate() method.  I imagine that its because of the 
GEOMETRYCOLLECTION.


// g++ test2.cpp -I/usr/local/include/geos -lgeos

#include "stdio.h"
#include "io.h"


int main(int argC, char* argV[])
{

    WKTReader *r = new WKTReader();
    GeometryFactory *geomFactory;
    Geometry *g1, *g2 ;

    geomFactory= new GeometryFactory( new PrecisionModel(), -1);

    g1 = r->read("GEOMETRYCOLLECTION (POINT (1.0000000000000000 
2.0000000000000000), POINT (3.0000000000000000 4.0000000000000000), 
LINESTRING (5.0000000000000000 6.0000000000000000, 8.0000000000000000 
9.0000000000000000))");
    g2 = r->read("POINT(0 0)");

    string s= g1->toString();
    cout << "geom1 = "<<s << endl;

    s= g2->toString();
    cout << "geom1 = "<<s<< endl;

    IntersectionMatrix *im = g1->relate(g2);


    s= im->toString();
    cout << "relate(g1,g2) = "<<s<< endl;

}



From mbdavis at VividSolutions.com  Tue Apr  8 16:28:13 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF44C@venus.VividSolutions.com>

Yep.  Neither GEOS nor JTS support GeometryCollections as arguments to relate.  This is partly because the semantics aren't very well defined, and partly because the obvious semantics [ X.relate(GC) = X.relate(union(GC.components) ] would make the operation non-robust.

That said, we or you could always implement the above semantics fairly easily...

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Tuesday, April 08, 2003 1:12 PM
> To: GEOS Development List
> Subject: [geos-devel] BUG: relate(g1,g2) crashes with
> GEOMETRYCOLLECTION?
> 
> 
> This fails in the relate() method.  I imagine that its because of the 
> GEOMETRYCOLLECTION.
> 
> 
> // g++ test2.cpp -I/usr/local/include/geos -lgeos
> 
> #include "stdio.h"
> #include "io.h"
> 
> 
> int main(int argC, char* argV[])
> {
> 
>     WKTReader *r = new WKTReader();
>     GeometryFactory *geomFactory;
>     Geometry *g1, *g2 ;
> 
>     geomFactory= new GeometryFactory( new PrecisionModel(), -1);
> 
>     g1 = r->read("GEOMETRYCOLLECTION (POINT (1.0000000000000000 
> 2.0000000000000000), POINT (3.0000000000000000 4.0000000000000000), 
> LINESTRING (5.0000000000000000 6.0000000000000000, 8.0000000000000000 
> 9.0000000000000000))");
>     g2 = r->read("POINT(0 0)");
> 
>     string s= g1->toString();
>     cout << "geom1 = "<<s << endl;
> 
>     s= g2->toString();
>     cout << "geom1 = "<<s<< endl;
> 
>     IntersectionMatrix *im = g1->relate(g2);
> 
> 
>     s= im->toString();
>     cout << "relate(g1,g2) = "<<s<< endl;
> 
> }
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From dblasby at refractions.net  Tue Apr  8 16:42:31 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DF44C@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF44C@venus.VividSolutions.com>
Message-ID: <3E933437.8020902@refractions.net>

Martin Davis wrote:

>Yep.  Neither GEOS nor JTS support GeometryCollections as arguments to relate.  This is partly because the semantics aren't very well defined, and partly because the obvious semantics [ X.relate(GC) = X.relate(union(GC.components) ] would make the operation non-robust.
>
>That said, we or you could always implement the above semantics fairly easily...
>
Its unfortunate that the spec doesnt tell you what to do in the case of 
GEOMETRYCOLLECTIONs.

I've also noticed that overlaps(g,g) is FALSE!

dave




From pramsey at refractions.net  Tue Apr  8 16:49:21 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
In-Reply-To: <3E933437.8020902@refractions.net>
Message-ID: <92ED25A8-6A03-11D7-ABF7-000393D33C2E@refractions.net>

Enlighten me: how would relate on a geometrycollection differ from 
relate on a multipolygon? Don't most of the tests collapse to an or() 
of the results of each test performed individually on the collection 
components?

overlaps (gc(A,B),gc(C,D)) = 
or(overlaps(A,C),overlaps(A,D),overlaps(B,C),overlaps(B,D))

P.

On Tuesday, April 8, 2003, at 01:42 PM, David Blasby wrote:

> Martin Davis wrote:
>
>> Yep.  Neither GEOS nor JTS support GeometryCollections as arguments 
>> to relate.  This is partly because the semantics aren't very well 
>> defined, and partly because the obvious semantics [ X.relate(GC) = 
>> X.relate(union(GC.components) ] would make the operation non-robust.
>>
>> That said, we or you could always implement the above semantics 
>> fairly easily...
>>
> Its unfortunate that the spec doesnt tell you what to do in the case 
> of GEOMETRYCOLLECTIONs.
>
> I've also noticed that overlaps(g,g) is FALSE!
>
> dave
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From mbdavis at VividSolutions.com  Tue Apr  8 16:51:45 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF44E@venus.VividSolutions.com>

Yep, overlaps(G,G) = false according to the OGC spec.  This may be a bit counter-intuitive.  Not sure what the rationale behind this decision was. 

I usually use A.relate(B, "T********") to determine if things overlap "properly".

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Tuesday, April 08, 2003 1:43 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
> GEOMETRYCOLLECTION?
> 
> 
> Martin Davis wrote:
> 
> >Yep.  Neither GEOS nor JTS support GeometryCollections as 
> arguments to relate.  This is partly because the semantics 
> aren't very well defined, and partly because the obvious 
> semantics [ X.relate(GC) = X.relate(union(GC.components) ] 
> would make the operation non-robust.
> >
> >That said, we or you could always implement the above 
> semantics fairly easily...
> >
> Its unfortunate that the spec doesnt tell you what to do in 
> the case of 
> GEOMETRYCOLLECTIONs.
> 
> I've also noticed that overlaps(g,g) is FALSE!
> 
> dave
> 
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From pramsey at refractions.net  Tue Apr  8 16:55:47 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DF44E@venus.VividSolutions.com>
Message-ID: <78FE8D78-6A04-11D7-ABF7-000393D33C2E@refractions.net>

G definitionally does not overlap itself if it is a 
geometrycollection??? Maybe this was a typo and not an actual decision 
on the part of the drafters?

On Tuesday, April 8, 2003, at 01:51 PM, Martin Davis wrote:

> Yep, overlaps(G,G) = false according to the OGC spec.  This may be a 
> bit counter-intuitive.  Not sure what the rationale behind this 
> decision was.
>
> I usually use A.relate(B, "T********") to determine if things overlap 
> "properly".
>
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.
> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> Phone: (250) 385 6040    Fax: (250) 385 6046
> EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com
>
>
>> -----Original Message-----
>> From: David Blasby [mailto:dblasby@refractions.net]
>> Sent: Tuesday, April 08, 2003 1:43 PM
>> To: GEOS Development List
>> Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
>> GEOMETRYCOLLECTION?
>>
>>
>> Martin Davis wrote:
>>
>>> Yep.  Neither GEOS nor JTS support GeometryCollections as
>> arguments to relate.  This is partly because the semantics
>> aren't very well defined, and partly because the obvious
>> semantics [ X.relate(GC) = X.relate(union(GC.components) ]
>> would make the operation non-robust.
>>>
>>> That said, we or you could always implement the above
>> semantics fairly easily...
>>>
>> Its unfortunate that the spec doesnt tell you what to do in
>> the case of
>> GEOMETRYCOLLECTIONs.
>>
>> I've also noticed that overlaps(g,g) is FALSE!
>>
>> dave
>>
>>
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From mbdavis at VividSolutions.com  Tue Apr  8 16:57:35 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF44F@venus.VividSolutions.com>

Nope - if you look at the spec it clearly spells out that A and B overlap *only* if A intersects exterior(B) or vice-versa.  They clearly intended the answer to be FALSE if the geometries were the same.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Martin Davis 
> Sent: Tuesday, April 08, 2003 1:52 PM
> To: GEOS Development List
> Subject: RE: [geos-devel] BUG: relate(g1,g2) crashes with
> GEOMETRYCOLLECTION?
> 
> 
> Yep, overlaps(G,G) = false according to the OGC spec.  This 
> may be a bit counter-intuitive.  Not sure what the rationale 
> behind this decision was. 
> 
> I usually use A.relate(B, "T********") to determine if things 
> overlap "properly".
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.
> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> Phone: (250) 385 6040    Fax: (250) 385 6046
> EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com
> 
> 
> > -----Original Message-----
> > From: David Blasby [mailto:dblasby@refractions.net]
> > Sent: Tuesday, April 08, 2003 1:43 PM
> > To: GEOS Development List
> > Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
> > GEOMETRYCOLLECTION?
> > 
> > 
> > Martin Davis wrote:
> > 
> > >Yep.  Neither GEOS nor JTS support GeometryCollections as 
> > arguments to relate.  This is partly because the semantics 
> > aren't very well defined, and partly because the obvious 
> > semantics [ X.relate(GC) = X.relate(union(GC.components) ] 
> > would make the operation non-robust.
> > >
> > >That said, we or you could always implement the above 
> > semantics fairly easily...
> > >
> > Its unfortunate that the spec doesnt tell you what to do in 
> > the case of 
> > GEOMETRYCOLLECTIONs.
> > 
> > I've also noticed that overlaps(g,g) is FALSE!
> > 
> > dave
> > 
> > 
> > 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Tue Apr  8 17:01:07 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
Message-ID: <5A94289A9268514C8D6C0F1FF44BA02701DE64@venus.VividSolutions.com>

In GeometryCollections polygons can overlap, whereas in valid MultiPolygons they can't.  When polygons overlap they may or may not do so at defined points.  If the intersection point is not defined explicitly, it must be computed.  You can't in general compute an intersection point exactly.  This means you can't precisely compute the local topology of the edges incident on the point.  This leads to robustness failures.

This is why relate for general GeometryCollections is equivalent to computing the union of the geometries.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Paul Ramsey [mailto:pramsey@refractions.net]
> Sent: Tuesday, April 08, 2003 1:49 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
> GEOMETRYCOLLECTION?
> 
> 
> Enlighten me: how would relate on a geometrycollection differ from 
> relate on a multipolygon? Don't most of the tests collapse to an or() 
> of the results of each test performed individually on the collection 
> components?
> 
> overlaps (gc(A,B),gc(C,D)) = 
> or(overlaps(A,C),overlaps(A,D),overlaps(B,C),overlaps(B,D))
> 
> P.
> 
> On Tuesday, April 8, 2003, at 01:42 PM, David Blasby wrote:
> 
> > Martin Davis wrote:
> >
> >> Yep.  Neither GEOS nor JTS support GeometryCollections as 
> arguments 
> >> to relate.  This is partly because the semantics aren't very well 
> >> defined, and partly because the obvious semantics [ X.relate(GC) = 
> >> X.relate(union(GC.components) ] would make the operation 
> non-robust.
> >>
> >> That said, we or you could always implement the above semantics 
> >> fairly easily...
> >>
> > Its unfortunate that the spec doesnt tell you what to do in 
> the case 
> > of GEOMETRYCOLLECTIONs.
> >
> > I've also noticed that overlaps(g,g) is FALSE!
> >
> > dave
> >
> >
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From pramsey at refractions.net  Tue Apr  8 17:02:10 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] BUG: relate(g1,g2) crashes with GEOMETRYCOLLECTION?
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DF44F@venus.VividSolutions.com>
Message-ID: <5D1EDE1C-6A05-11D7-ABF7-000393D33C2E@refractions.net>

Nice. Overlaps is not what I thought it was. What is the test for 
interior(A) intersects interior(B)?
P.

On Tuesday, April 8, 2003, at 01:57 PM, Martin Davis wrote:

> Nope - if you look at the spec it clearly spells out that A and B 
> overlap *only* if A intersects exterior(B) or vice-versa.  They 
> clearly intended the answer to be FALSE if the geometries were the 
> same.
>
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.
> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> Phone: (250) 385 6040    Fax: (250) 385 6046
> EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com
>
>
>> -----Original Message-----
>> From: Martin Davis
>> Sent: Tuesday, April 08, 2003 1:52 PM
>> To: GEOS Development List
>> Subject: RE: [geos-devel] BUG: relate(g1,g2) crashes with
>> GEOMETRYCOLLECTION?
>>
>>
>> Yep, overlaps(G,G) = false according to the OGC spec.  This
>> may be a bit counter-intuitive.  Not sure what the rationale
>> behind this decision was.
>>
>> I usually use A.relate(B, "T********") to determine if things
>> overlap "properly".
>>
>> Martin Davis, Senior Technical Architect
>> Vivid Solutions Inc.
>> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
>> Phone: (250) 385 6040    Fax: (250) 385 6046
>> EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com
>>
>>
>>> -----Original Message-----
>>> From: David Blasby [mailto:dblasby@refractions.net]
>>> Sent: Tuesday, April 08, 2003 1:43 PM
>>> To: GEOS Development List
>>> Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
>>> GEOMETRYCOLLECTION?
>>>
>>>
>>> Martin Davis wrote:
>>>
>>>> Yep.  Neither GEOS nor JTS support GeometryCollections as
>>> arguments to relate.  This is partly because the semantics
>>> aren't very well defined, and partly because the obvious
>>> semantics [ X.relate(GC) = X.relate(union(GC.components) ]
>>> would make the operation non-robust.
>>>>
>>>> That said, we or you could always implement the above
>>> semantics fairly easily...
>>>>
>>> Its unfortunate that the spec doesnt tell you what to do in
>>> the case of
>>> GEOMETRYCOLLECTIONs.
>>>
>>> I've also noticed that overlaps(g,g) is FALSE!
>>>
>>> dave
>>>
>>>
>>>
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From dblasby at refractions.net  Tue Apr  8 17:05:10 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] PostGIS-GEOS connection status
In-Reply-To: <92ED25A8-6A03-11D7-ABF7-000393D33C2E@refractions.net>
References: <92ED25A8-6A03-11D7-ABF7-000393D33C2E@refractions.net>
Message-ID: <3E933986.60709@refractions.net>

I have a working version now!  I'll be commiting it to CVS after paul 
and I do a few things like updating the Makefile - hopefully tomorrow. 
Then we'll release it to people on this list to find out if there are 
any install problems.

NOTES:
0. The following operations are supported:  relate(g1,g2) (returns a 
string), relate_pattern(g1,g2,pattern), overlaps(g1,g2), 
contains(g1,g2), within(g1,g2), crosses(g1,g2), intersects(g1,g2), 
touches(g1,g2),disjoint(g1,g2).
1. Since deleting a geometry will cause all geometry's (and the 
GeometryFactory's) PrecisionModel to become invalid, I dont delete 
anything.  So, this version leaks memory *very* quickly.  Once Yuri 
commits a fix, I'll have postgis do more cleaning.
2. If you try a relate operation on a GEOMETRYCOLLECTION, an error is 
thrown.
3. I've tested this with the 400+ test cases included with GEOS.  This 
only tests relate(g1,g2), but I'm confident that the rest of the 
functions also work.

dave


From pramsey at refractions.net  Tue Apr  8 17:11:06 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] PostGIS-GEOS connection status
In-Reply-To: <3E933986.60709@refractions.net>
Message-ID: <9C9F1C7A-6A06-11D7-ABF7-000393D33C2E@refractions.net>

Good work Dave!
(a) don't commit to CVS until I have warned the postgis-users that we 
are about to make the CVS tree unstable
(b) you should be able to do isValid as well, I think Yury noted that 
as debugged in his last CVS commit
(c) I think a couple of the operators are done too (difference?) Yury 
can confirm
P.

On Tuesday, April 8, 2003, at 02:05 PM, David Blasby wrote:

> I have a working version now!  I'll be commiting it to CVS after paul 
> and I do a few things like updating the Makefile - hopefully tomorrow. 
> Then we'll release it to people on this list to find out if there are 
> any install problems.
>
> NOTES:
> 0. The following operations are supported:  relate(g1,g2) (returns a 
> string), relate_pattern(g1,g2,pattern), overlaps(g1,g2), 
> contains(g1,g2), within(g1,g2), crosses(g1,g2), intersects(g1,g2), 
> touches(g1,g2),disjoint(g1,g2).
> 1. Since deleting a geometry will cause all geometry's (and the 
> GeometryFactory's) PrecisionModel to become invalid, I dont delete 
> anything.  So, this version leaks memory *very* quickly.  Once Yuri 
> commits a fix, I'll have postgis do more cleaning.
> 2. If you try a relate operation on a GEOMETRYCOLLECTION, an error is 
> thrown.
> 3. I've tested this with the 400+ test cases included with GEOS.  This 
> only tests relate(g1,g2), but I'm confident that the rest of the 
> functions also work.
>
> dave
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From mbdavis at VividSolutions.com  Tue Apr  8 17:27:47 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] test for interior(A) intersects interior(B)
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF453@venus.VividSolutions.com>

A.relate(B, "T********") 

Good thing we have the relate operation!  I had to use this in JCS, and I suspect it will be used a fair bit by others too.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Paul Ramsey [mailto:pramsey@refractions.net]
> Sent: Tuesday, April 08, 2003 2:02 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
> GEOMETRYCOLLECTION?
> 
> 
> Nice. Overlaps is not what I thought it was. What is the test for 
> interior(A) intersects interior(B)?
> P.
> 
> On Tuesday, April 8, 2003, at 01:57 PM, Martin Davis wrote:
> 
> > Nope - if you look at the spec it clearly spells out that A and B 
> > overlap *only* if A intersects exterior(B) or vice-versa.  They 
> > clearly intended the answer to be FALSE if the geometries were the 
> > same.
> >
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.
> > Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> > Phone: (250) 385 6040    Fax: (250) 385 6046
> > EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com
> >
> >
> >> -----Original Message-----
> >> From: Martin Davis
> >> Sent: Tuesday, April 08, 2003 1:52 PM
> >> To: GEOS Development List
> >> Subject: RE: [geos-devel] BUG: relate(g1,g2) crashes with
> >> GEOMETRYCOLLECTION?
> >>
> >>
> >> Yep, overlaps(G,G) = false according to the OGC spec.  This
> >> may be a bit counter-intuitive.  Not sure what the rationale
> >> behind this decision was.
> >>
> >> I usually use A.relate(B, "T********") to determine if things
> >> overlap "properly".
> >>
> >> Martin Davis, Senior Technical Architect
> >> Vivid Solutions Inc.
> >> Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
> >> Phone: (250) 385 6040    Fax: (250) 385 6046
> >> EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com
> >>
> >>
> >>> -----Original Message-----
> >>> From: David Blasby [mailto:dblasby@refractions.net]
> >>> Sent: Tuesday, April 08, 2003 1:43 PM
> >>> To: GEOS Development List
> >>> Subject: Re: [geos-devel] BUG: relate(g1,g2) crashes with
> >>> GEOMETRYCOLLECTION?
> >>>
> >>>
> >>> Martin Davis wrote:
> >>>
> >>>> Yep.  Neither GEOS nor JTS support GeometryCollections as
> >>> arguments to relate.  This is partly because the semantics
> >>> aren't very well defined, and partly because the obvious
> >>> semantics [ X.relate(GC) = X.relate(union(GC.components) ]
> >>> would make the operation non-robust.
> >>>>
> >>>> That said, we or you could always implement the above
> >>> semantics fairly easily...
> >>>>
> >>> Its unfortunate that the spec doesnt tell you what to do in
> >>> the case of
> >>> GEOMETRYCOLLECTIONs.
> >>>
> >>> I've also noticed that overlaps(g,g) is FALSE!
> >>>
> >>> dave
> >>>
> >>>
> >>>
> >>>
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel@geos.refractions.net
> >>> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>>
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@geos.refractions.net
> >> http://geos.refractions.net/mailman/listinfo/geos-devel
> >>
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From me at yury.ca  Tue Apr  8 18:26:46 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] PostGIS-GEOS connection status
References: <9C9F1C7A-6A06-11D7-ABF7-000393D33C2E@refractions.net>
Message-ID: <00b301c2fe1e$05f7b8f0$b9354d18@yury>

>Good work Dave!

> (b) you should be able to do isValid as well, I think Yury noted that
> as debugged in his last CVS commit
Yes, isValid has been ported and tested.

> (c) I think a couple of the operators are done too (difference?) Yury
> can confirm
Overlay (union, intersection, difference, etc.) has been ported, but I have not
finished testing it yet, so there might be bugs.


> P.
>
> On Tuesday, April 8, 2003, at 02:05 PM, David Blasby wrote:
>
> > I have a working version now!  I'll be commiting it to CVS after paul
> > and I do a few things like updating the Makefile - hopefully tomorrow.
> > Then we'll release it to people on this list to find out if there are
> > any install problems.
> >
> > NOTES:
> > 0. The following operations are supported:  relate(g1,g2) (returns a
> > string), relate_pattern(g1,g2,pattern), overlaps(g1,g2),
> > contains(g1,g2), within(g1,g2), crosses(g1,g2), intersects(g1,g2),
> > touches(g1,g2),disjoint(g1,g2).
> > 1. Since deleting a geometry will cause all geometry's (and the
> > GeometryFactory's) PrecisionModel to become invalid, I dont delete
> > anything.  So, this version leaks memory *very* quickly.  Once Yuri
> > commits a fix, I'll have postgis do more cleaning.
> > 2. If you try a relate operation on a GEOMETRYCOLLECTION, an error is
> > thrown.
> > 3. I've tested this with the 400+ test cases included with GEOS.  This
> > only tests relate(g1,g2), but I'm confident that the rest of the
> > functions also work.
> >
> > dave
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> >
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From dblasby at refractions.net  Tue Apr  8 19:38:54 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] isValid() - repeated points
In-Reply-To: <00b301c2fe1e$05f7b8f0$b9354d18@yury>
References: <9C9F1C7A-6A06-11D7-ABF7-000393D33C2E@refractions.net>
	<00b301c2fe1e$05f7b8f0$b9354d18@yury>
Message-ID: <3E935D8E.7090909@refractions.net>

Has the definition of "isValid()" changed?

It seems that GEOS says that repeated points are invalid, but the XML 
test files say they are valid.

The good news is that isValid() is in PostGIS now (that took 2 minutes), 
but it took a few hours to sledgehammer to XML test data in.  Of the 806 
test cases, there are 7 discrepencies (all to do with repeated points).

dave


From mbdavis at VividSolutions.com  Tue Apr  8 19:41:50 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] isValid() - repeated points
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF45F@venus.VividSolutions.com>

The change to allowing repeated points was done in JTS 1.3, so that hasn't percolated through to GEOS yet (ah, the joys of multiple code bases....).

That's in the plan to do - in the meantime, assume that repeated points are NOT allowed and you'll sleep happily...  8^)

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Tuesday, April 08, 2003 4:39 PM
> To: GEOS Development List
> Subject: [geos-devel] isValid() - repeated points
> 
> 
> Has the definition of "isValid()" changed?
> 
> It seems that GEOS says that repeated points are invalid, but the XML 
> test files say they are valid.
> 
> The good news is that isValid() is in PostGIS now (that took 
> 2 minutes), 
> but it took a few hours to sledgehammer to XML test data in.  
> Of the 806 
> test cases, there are 7 discrepencies (all to do with 
> repeated points).
> 
> dave
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From pramsey at refractions.net  Wed Apr  9 13:46:06 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Memory Fix
Message-ID: <23A90AB6-6AB3-11D7-A3A4-000393D33C2E@refractions.net>

Do we have a plan to resolve the memory management issues that 
currently exist in GEOS?
P.

      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From mbdavis at VividSolutions.com  Wed Apr  9 13:47:12 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Memory Fix
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF46D@venus.VividSolutions.com>

Yes - Yury should be working on fixing the handling of PrecisionModel to treat it as a value type (i.e. to allocate it as an instance variable within each Geometry, not dynamically)

Do you agree with this, Yury?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Paul Ramsey [mailto:pramsey@refractions.net]
> Sent: Wednesday, April 09, 2003 10:46 AM
> To: GEOS List
> Subject: [geos-devel] Memory Fix
> 
> 
> Do we have a plan to resolve the memory management issues that 
> currently exist in GEOS?
> P.
> 
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From me at yury.ca  Wed Apr  9 14:51:43 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Memory Fix
References: <5A94289A9268514C8D6C0F1FF44BA0271DF46D@venus.VividSolutions.com>
Message-ID: <008401c2fec9$13ced980$b9354d18@yury>


Yes. Right now I am debugging the overlays, but after I finish it I'll fix the
PrecisionModel.

Yury


----- Original Message -----
From: "Martin Davis" <mbdavis@VividSolutions.com>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Cc: "Yury Bychkov (E-mail)" <ybychkov@direct.ca>
Sent: Wednesday, April 09, 2003 10:47 AM
Subject: RE: [geos-devel] Memory Fix


Yes - Yury should be working on fixing the handling of PrecisionModel to treat
it as a value type (i.e. to allocate it as an instance variable within each
Geometry, not dynamically)

Do you agree with this, Yury?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Paul Ramsey [mailto:pramsey@refractions.net]
> Sent: Wednesday, April 09, 2003 10:46 AM
> To: GEOS List
> Subject: [geos-devel] Memory Fix
>
>
> Do we have a plan to resolve the memory management issues that
> currently exist in GEOS?
> P.
>
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

From dblasby at refractions.net  Wed Apr  9 14:54:14 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] PostGIS CVS has GEOS support
In-Reply-To: <5D1EDE1C-6A05-11D7-ABF7-000393D33C2E@refractions.net>
References: <5D1EDE1C-6A05-11D7-ABF7-000393D33C2E@refractions.net>
Message-ID: <3E946C56.3040203@refractions.net>

The PostGIS CVS now has GEOS support.

Here's some instructions.  The Makefile is a bit "iffy" right now until 
paul takes a look at it. 
So if things dont work for you they should fix themselves in a few days. 
 USE AT OWN RISK.

a. this version of GEOS leaks memory very quickly (nothing is ever deleted)
b. using relate()-type function with a geometrycollection will throw an 
error
c. functions added are:  
  relate(g1,g2)  - returns the 3*3 matrix
  relate_pattern(g1,g2,pattern)  - returns true if relate(g1,g2) is 
'compatible' with pattern.
  overlaps(g1,g2)  - returns true if g1 overlaps g2
  contains(g1,g2) - returns true if g1 contains g2
  within(g1,g2)- returns true if g1 is  within g2
 crosses(g1,g2)- returns true if g1  crossesg2
 intersects(g1,g2)- returns true if g1  intersectsg2
 touches(g1,g2)- returns true if g1  touches g2
 disjoint(g1,g2)- returns true if g1 disjoint from g2
 isvalid(g)        - returns true if g1 is a valid geometry
These are defined in the OGC SF SQL specification - they are not always 
what you might think!
http://www.opengis.org/techno/specs/99-049.pdf

Here's what to do (EXACTLY like a normal postgis install)

0. install GEOS
1. get new postgis CVS
2. set PGSQL_SRC to your postgresql source (like normal)
3. make
    - if you have troubles compiling postgis_geos_wrapper.cpp,
      something like this should do the trick (with 2 warning):
      g++ -Wall postgis_GEOSwrapper.cpp -c -I/usr/local/include 
-I/usr/local/include/geos

4. make install
5. create your database
6. install plpgsql language in your new database
7. install the postgis.sql file in your new database
8. TEST: upload the two new tables in postgis/regress/   
    psql geos2 < relate_test     555 relate() tests
    psql geos2 < isvalid_test    806 isvalid() tests
9. TEST: check results

    select relate(g1,g2),result, relate(g1,g2)=result from relate_test ;
   
    This should give 0 rows:
    select relate(g1,g2),result from relate_test where 
relate(g1,g2)!=result;
   
   
   
    select isvalid(g), result, comment from validtest ;   
   
    This should give 0 rows, but gives 7 because GEOS says
    repeated points are invalid, but JTS 1.3 says they are.
    This will be fixed soon.
   
    select g,isvalid(g), result,comment from validtest where isvalid(g) 
!= result;

   


From nhv at cape.com  Wed Apr  9 15:52:10 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] PostGIS CVS has GEOS support
In-Reply-To: <3E946C56.3040203@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAKENBDBAA.nhv@cape.com>

David Blasby writes:
> 
> The PostGIS CVS now has GEOS support.
> 
> Here's some instructions.  The Makefile is a bit "iffy" right now until 
> paul takes a look at it. 
> So if things dont work for you they should fix themselves in a few days. 
>  USE AT OWN RISK.

attached diff for Makefile allows compilation with Cygwin
link order matters with Win32, ie,  symbols must be linked
after functions that use them. linked objects can be included
multiple times if necessary < -Wl,--allow-multiple-definitions > 

haven't tried running it yet

Cheers

Norman
-------------- next part --------------
A non-text attachment was scrubbed...
Name: diffs
Type: application/octet-stream
Size: 749 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20030409/2f0d8f9f/diffs.obj
From pramsey at refractions.net  Wed Apr  9 18:08:50 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] PostGIS/GEOS
Message-ID: <D7B2E137-6AD7-11D7-A3A4-000393D33C2E@refractions.net>

OK, I've somewhat updated the Makefile. It's still a big of a wreck, 
but it seems to work. I have tested the PostGIS/GEOS combination on 
PgSQL 7.1,7.2,7.3 and it works OK.

      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From pramsey at refractions.net  Thu Apr 10 01:14:09 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] GEOS/PostGIS/OSX
Message-ID: <429EE181-6B13-11D7-A7CE-000393D33C2E@refractions.net>

Godo news from the iBook:

pramsey=# select count(*) from relate_test where relate(g1,g2) = result;
  count
-------
    555
(1 row)

pramsey=# select count(*) from relate_test ;
  count
-------
    555
(1 row)


      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From nhv at cape.com  Thu Apr 10 12:03:31 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] GEOS/PostGIS/OSX
In-Reply-To: <429EE181-6B13-11D7-A7CE-000393D33C2E@refractions.net>
Message-ID: <EKEJIKAILPONGGENMBGAKEPNDBAA.nhv@cape.com>

Paul Ramsey writes:
>
> Godo news from the iBook:
>
> pramsey=# select count(*) from relate_test where relate(g1,g2) = result;
>   count
> -------
>     555
> (1 row)
>
> pramsey=# select count(*) from relate_test ;
>   count
> -------
>     555
> (1 row)

NICE


<32> nhv
$ uname -a
CYGWIN_NT-5.0 sfdev3 1.3.23(0.82/3/2) 2003-04-010 11:08 i686 unknown unknown
Cygwin

gis=# select count(*) from relate_test where relate(g1,g2) = result;
 count
-------
   555
(1 row)

gis=# select count(*) from relate_test ;
 count
-------
   555
(1 row)

Cheers

Norman


From dblasby at refractions.net  Thu Apr 10 13:29:36 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Zero-based indexing
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0270A2B06@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0270A2B06@venus.VividSolutions.com>
Message-ID: <3E95AA00.5050204@refractions.net>

I've noticed that JTS (and GEOS) uses 0-based indexing.  I.e. 
getGeometryN(), pointN(), getInteriorRingN() - the first "thing" is 0.
PostGIS also follows this convention.

Unfortunately, the OGC SF SQL conformance test uses 1-based indexing. 
 pointN(1) is the first point.

I looked in the SF SQL specification, and it doesnt specify which to 
use.  Does anyone have a reference to say that 0-based indexing is 
correct?  The conformance test is filled with errors so I dont trust it.

dave
ps. yes, this means that we are getting close to having postgis pass the 
conformance tests.


From dblasby at refractions.net  Fri Apr 11 18:26:26 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Error handling:  GEOS throws in PostGIS.
In-Reply-To: <EKEJIKAILPONGGENMBGAKEPNDBAA.nhv@cape.com>
References: <EKEJIKAILPONGGENMBGAKEPNDBAA.nhv@cape.com>
Message-ID: <3E974112.8010301@refractions.net>

I'm having troubles trapping exceptions thrown by GEOS in postgresql.
My GEOS wrapper (postgis_geos_wrapper.cpp) looks like this:


// call g1->contains(g2)
// returns 0 = false
//         1 = true
//         2 = error was trapped
char GEOSrelateContains(Geometry *g1, Geometry*g2)
{
    try {
        bool result;
        result = g1->contains(g2);
        if (result)
            return 1;
        else
            return 0;
    }
    catch (...)
    {
        return 2;
    }
}

And in the .c PostGIS (postgis_geos.c):

// overlaps(GEOMETRY g1,GEOMETRY g2)
// returns  if GEOS::g1->overlaps(g2) returns true
// throws an error (elog(ERROR,...)) if GEOS throws an error
PG_FUNCTION_INFO_V1(overlaps);
Datum overlaps(PG_FUNCTION_ARGS)
{
    GEOMETRY        *geom1 = (GEOMETRY *)  
PG_DETOAST_DATUM(PG_GETARG_DATUM(0));
    GEOMETRY        *geom2 = (GEOMETRY *)  
PG_DETOAST_DATUM(PG_GETARG_DATUM(1));


    Geometry *g1,*g2;
    bool result;

    errorIfGeometryCollection(geom1,geom2);
    initGEOS(MAXIMUM_ALIGNOF);

    g1 =     POSTGIS2GEOS(geom1 );
    g2 =     POSTGIS2GEOS(geom2 );

    GEOSdeleteGeometry(g1);
    GEOSdeleteGeometry(g2);

    result = GEOSrelateOverlaps(g1,g2);
    if (result == 2)
    {
        elog(ERROR,"GEOS overlaps() threw an error!");
        PG_RETURN_NULL(); //never get here
    }

    PG_RETURN_BOOL(result);
}


This works great in simple examples (like the test.c norman wrote).
But, when you have another layer of indirection - like with postgresql,
problems happen.  I think the problem is with postgresql loading a
C .so (postgis), which is linked to a C++ .so (GEOS).  Postgresql
is far removed from the GEOS error handling (in libc++).

Basically, as soon as "g1->contains(g2);" throws an error that leaves
the GEOS .so, postgresql dies immediately - the exception is not
catch so terminate() is called.

This doesnt happen if you are using GEOS in a c++ program, or using
a C++ wrapper for a C program. It only has problems with 3 levels
of indirection.

Others have had this problem - for example people writing PERL modules
that use the perl "C" api to call C++ libraries.  People doing the same
with PYTHON have also had problems. The only technical reference
I can find is at:
http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=37933

Basically, there's a problem if libc is loaded before libc++.

The only solution I can find to this (apart from forcing people to
use a very up-to-date gcc/g++ and perhaps statically linking libc++ to
postgresql) is actually write the C wrapper as part of GEOS.

In order to test this, I modified GEOS so that GEOMETRY has a function:

 void Geometry::throw_exception()
 {
        throw "I see dead people!";
 }


If you call g->throw_exception() in the postgis geos wrapper, postgresql
will immediately die.  But, if you re-write it (still in GEOS) like:

 void Geometry::throw_exception()
 {
     try
     {
         cout << "in throw_exception() try block - about to throw an 
error"<<endl;
               throw "I see dead people!";
          }
          catch (...)
          {
              cout << "in throw_exception() - caught an error"<<endl;
              return;
          }
          // never get here
 }

You can successfully catch the error!


So, unless anyone has any bright ideas, we could think about putting a C 
api directly in GEOS.  If we use the standard C way of error handling 
(return an error code or NULL, like in the above), PostGIS should have 
no problems.  Unfortunately, this does
"pollute" GEOS.

What think?

dave


From mbdavis at VividSolutions.com  Fri Apr 11 20:11:10 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] RE: Error handling:  GEOS throws in PostGIS.
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF49A@venus.VividSolutions.com>


Is what you're suggesting this:  

Catch all GEOS errors internally and return a status code instead. If a method already has a return value, return NULL

This seems like a pretty substantial change to GEOS.  Does it mean that everyone using GEOS now has to check return codes, instead of using exceptions?

Is there any way of providing a yet higher wrapper in between GEOS and PostGIS which converts exceptions into return codes (so that GEOS is kept pure and PostGIS can call it safely)?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Friday, April 11, 2003 3:26 PM
> To: postgis-users@postgis.refractions.net; GEOS Development List
> Subject: [postgis-users] Error handling: GEOS throws in PostGIS.
> 
> 
> I'm having troubles trapping exceptions thrown by GEOS in postgresql.
> My GEOS wrapper (postgis_geos_wrapper.cpp) looks like this:
> 
> 
> // call g1->contains(g2)
> // returns 0 = false
> //         1 = true
> //         2 = error was trapped
> char GEOSrelateContains(Geometry *g1, Geometry*g2)
> {
>     try {
>         bool result;
>         result = g1->contains(g2);
>         if (result)
>             return 1;
>         else
>             return 0;
>     }
>     catch (...)
>     {
>         return 2;
>     }
> }
> 
> And in the .c PostGIS (postgis_geos.c):
> 
> // overlaps(GEOMETRY g1,GEOMETRY g2)
> // returns  if GEOS::g1->overlaps(g2) returns true
> // throws an error (elog(ERROR,...)) if GEOS throws an error
> PG_FUNCTION_INFO_V1(overlaps);
> Datum overlaps(PG_FUNCTION_ARGS)
> {
>     GEOMETRY        *geom1 = (GEOMETRY *)  
> PG_DETOAST_DATUM(PG_GETARG_DATUM(0));
>     GEOMETRY        *geom2 = (GEOMETRY *)  
> PG_DETOAST_DATUM(PG_GETARG_DATUM(1));
> 
> 
>     Geometry *g1,*g2;
>     bool result;
> 
>     errorIfGeometryCollection(geom1,geom2);
>     initGEOS(MAXIMUM_ALIGNOF);
> 
>     g1 =     POSTGIS2GEOS(geom1 );
>     g2 =     POSTGIS2GEOS(geom2 );
> 
>     GEOSdeleteGeometry(g1);
>     GEOSdeleteGeometry(g2);
> 
>     result = GEOSrelateOverlaps(g1,g2);
>     if (result == 2)
>     {
>         elog(ERROR,"GEOS overlaps() threw an error!");
>         PG_RETURN_NULL(); //never get here
>     }
> 
>     PG_RETURN_BOOL(result);
> }
> 
> 
> This works great in simple examples (like the test.c norman wrote).
> But, when you have another layer of indirection - like with 
> postgresql,
> problems happen.  I think the problem is with postgresql loading a
> C .so (postgis), which is linked to a C++ .so (GEOS).  Postgresql
> is far removed from the GEOS error handling (in libc++).
> 
> Basically, as soon as "g1->contains(g2);" throws an error that leaves
> the GEOS .so, postgresql dies immediately - the exception is not
> catch so terminate() is called.
> 
> This doesnt happen if you are using GEOS in a c++ program, or using
> a C++ wrapper for a C program. It only has problems with 3 levels
> of indirection.
> 
> Others have had this problem - for example people writing PERL modules
> that use the perl "C" api to call C++ libraries.  People 
> doing the same
> with PYTHON have also had problems. The only technical reference
> I can find is at:
> http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=37933
> 
> Basically, there's a problem if libc is loaded before libc++.
> 
> The only solution I can find to this (apart from forcing people to
> use a very up-to-date gcc/g++ and perhaps statically linking libc++ to
> postgresql) is actually write the C wrapper as part of GEOS.
> 
> In order to test this, I modified GEOS so that GEOMETRY has a 
> function:
> 
>  void Geometry::throw_exception()
>  {
>         throw "I see dead people!";
>  }
> 
> 
> If you call g->throw_exception() in the postgis geos wrapper, 
> postgresql
> will immediately die.  But, if you re-write it (still in GEOS) like:
> 
>  void Geometry::throw_exception()
>  {
>      try
>      {
>          cout << "in throw_exception() try block - about to throw an 
> error"<<endl;
>                throw "I see dead people!";
>           }
>           catch (...)
>           {
>               cout << "in throw_exception() - caught an error"<<endl;
>               return;
>           }
>           // never get here
>  }
> 
> You can successfully catch the error!
> 
> 
> So, unless anyone has any bright ideas, we could think about 
> putting a C 
> api directly in GEOS.  If we use the standard C way of error handling 
> (return an error code or NULL, like in the above), PostGIS 
> should have 
> no problems.  Unfortunately, this does
> "pollute" GEOS.
> 
> What think?
> 
> dave
> 
> 
> _______________________________________________
> postgis-users mailing list
> postgis-users@postgis.refractions.net
> http://postgis.refractions.net/mailman/listinfo/postgis-users
> 

_______________________________________________
postgis-users mailing list
postgis-users@postgis.refractions.net
http://postgis.refractions.net/mailman/listinfo/postgis-users

From pramsey at refractions.net  Fri Apr 11 20:16:31 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Re: [postgis-users] Error handling:  GEOS throws in
	PostGIS.
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA02701DE6E@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA02701DE6E@venus.VividSolutions.com>
Message-ID: <3E975ADF.1090503@refractions.net>

Dave is suggesting your second option, adding a wrapper (perhaps as part 
of GEOS) which provides access to the GEOS functionality, but with all 
the exceptions kept hidden from the outside world.

It is not pretty, but we appear to have no other option.

P.

Martin Davis wrote:
> Is what you're suggesting this:
> 
> Catch all GEOS errors internally and return a status code instead. If
> a method already has a return value, return NULL
> 
> This seems like a pretty substantial change to GEOS.  Does it mean
> that everyone using GEOS now has to check return codes, instead of
> using exceptions?
> 
> Is there any way of providing a yet higher wrapper in between GEOS
> and PostGIS which converts exceptions into return codes (so that GEOS
> is kept pure and PostGIS can call it safely)?
> 
> Martin Davis, Senior Technical Architect Vivid Solutions Inc. Suite
> #1A-2328 Government Street   Victoria, B.C.   V8T 5G5 Phone: (250)
> 385 6040    Fax: (250) 385 6046 EMail: mbdavis@vividsolutions.com
> Web: www.vividsolutions.com
> 
> 
> 
>> -----Original Message----- From: David Blasby
>> [mailto:dblasby@refractions.net] Sent: Friday, April 11, 2003 3:26
>> PM To: postgis-users@postgis.refractions.net; GEOS Development List
>>  Subject: [postgis-users] Error handling: GEOS throws in PostGIS.
>> 
>> 
>> I'm having troubles trapping exceptions thrown by GEOS in
>> postgresql. My GEOS wrapper (postgis_geos_wrapper.cpp) looks like
>> this:
>> 
>> 
>> // call g1->contains(g2) // returns 0 = false //         1 = true 
>> //         2 = error was trapped char GEOSrelateContains(Geometry
>> *g1, Geometry*g2) { try { bool result; result = g1->contains(g2); 
>> if (result) return 1; else return 0; } catch (...) { return 2; } }
>> 
>> And in the .c PostGIS (postgis_geos.c):
>> 
>> // overlaps(GEOMETRY g1,GEOMETRY g2) // returns  if
>> GEOS::g1->overlaps(g2) returns true // throws an error
>> (elog(ERROR,...)) if GEOS throws an error 
>> PG_FUNCTION_INFO_V1(overlaps); Datum overlaps(PG_FUNCTION_ARGS) { 
>> GEOMETRY        *geom1 = (GEOMETRY *) 
>> PG_DETOAST_DATUM(PG_GETARG_DATUM(0)); GEOMETRY        *geom2 =
>> (GEOMETRY *) PG_DETOAST_DATUM(PG_GETARG_DATUM(1));
>> 
>> 
>> Geometry *g1,*g2; bool result;
>> 
>> errorIfGeometryCollection(geom1,geom2); initGEOS(MAXIMUM_ALIGNOF);
>> 
>> g1 =     POSTGIS2GEOS(geom1 ); g2 =     POSTGIS2GEOS(geom2 );
>> 
>> GEOSdeleteGeometry(g1); GEOSdeleteGeometry(g2);
>> 
>> result = GEOSrelateOverlaps(g1,g2); if (result == 2) { 
>> elog(ERROR,"GEOS overlaps() threw an error!"); PG_RETURN_NULL();
>> //never get here }
>> 
>> PG_RETURN_BOOL(result); }
>> 
>> 
>> This works great in simple examples (like the test.c norman wrote).
>>  But, when you have another layer of indirection - like with 
>> postgresql, problems happen.  I think the problem is with
>> postgresql loading a C .so (postgis), which is linked to a C++ .so
>> (GEOS).  Postgresql is far removed from the GEOS error handling (in
>> libc++).
>> 
>> Basically, as soon as "g1->contains(g2);" throws an error that
>> leaves the GEOS .so, postgresql dies immediately - the exception is
>> not catch so terminate() is called.
>> 
>> This doesnt happen if you are using GEOS in a c++ program, or using
>>  a C++ wrapper for a C program. It only has problems with 3 levels 
>> of indirection.
>> 
>> Others have had this problem - for example people writing PERL
>> modules that use the perl "C" api to call C++ libraries.  People 
>> doing the same with PYTHON have also had problems. The only
>> technical reference I can find is at: 
>> http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=37933
>> 
>> Basically, there's a problem if libc is loaded before libc++.
>> 
>> The only solution I can find to this (apart from forcing people to 
>> use a very up-to-date gcc/g++ and perhaps statically linking libc++
>> to postgresql) is actually write the C wrapper as part of GEOS.
>> 
>> In order to test this, I modified GEOS so that GEOMETRY has a 
>> function:
>> 
>> void Geometry::throw_exception() { throw "I see dead people!"; }
>> 
>> 
>> If you call g->throw_exception() in the postgis geos wrapper, 
>> postgresql will immediately die.  But, if you re-write it (still in
>> GEOS) like:
>> 
>> void Geometry::throw_exception() { try { cout << "in
>> throw_exception() try block - about to throw an error"<<endl; throw
>> "I see dead people!"; } catch (...) { cout << "in throw_exception()
>> - caught an error"<<endl; return; } // never get here }
>> 
>> You can successfully catch the error!
>> 
>> 
>> So, unless anyone has any bright ideas, we could think about 
>> putting a C api directly in GEOS.  If we use the standard C way of
>> error handling (return an error code or NULL, like in the above),
>> PostGIS should have no problems.  Unfortunately, this does 
>> "pollute" GEOS.
>> 
>> What think?
>> 
>> dave
>> 
>> 
>> _______________________________________________ postgis-users
>> mailing list postgis-users@postgis.refractions.net 
>> http://postgis.refractions.net/mailman/listinfo/postgis-users
>> 
> 
> 
> _______________________________________________ postgis-users mailing
> list postgis-users@postgis.refractions.net 
> http://postgis.refractions.net/mailman/listinfo/postgis-users


-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From mbdavis at VividSolutions.com  Fri Apr 11 20:19:47 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] RE: [postgis-users] Error handling:  GEOS throws in
	PostGIS.
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF49B@venus.VividSolutions.com>

Well, that sounds like a fairly clean solution, if we can make it work.  Building a wrapper for the entire Geometry class hierarchy isn't totally trivial - that's why I was wondering if that's really what he meant.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Paul Ramsey [mailto:pramsey@refractions.net]
> Sent: Friday, April 11, 2003 5:17 PM
> To: PostGIS Users Discussion; GEOS Development List
> Subject: Re: [postgis-users] Error handling: GEOS throws in PostGIS.
> 
> 
> Dave is suggesting your second option, adding a wrapper 
> (perhaps as part 
> of GEOS) which provides access to the GEOS functionality, but 
> with all 
> the exceptions kept hidden from the outside world.
> 
> It is not pretty, but we appear to have no other option.
> 
> P.
> 
> Martin Davis wrote:
> > Is what you're suggesting this:
> > 
> > Catch all GEOS errors internally and return a status code 
> instead. If
> > a method already has a return value, return NULL
> > 
> > This seems like a pretty substantial change to GEOS.  Does it mean
> > that everyone using GEOS now has to check return codes, instead of
> > using exceptions?
> > 
> > Is there any way of providing a yet higher wrapper in between GEOS
> > and PostGIS which converts exceptions into return codes (so 
> that GEOS
> > is kept pure and PostGIS can call it safely)?
> > 
> > Martin Davis, Senior Technical Architect Vivid Solutions Inc. Suite
> > #1A-2328 Government Street   Victoria, B.C.   V8T 5G5 Phone: (250)
> > 385 6040    Fax: (250) 385 6046 EMail: mbdavis@vividsolutions.com
> > Web: www.vividsolutions.com
> > 
> > 
> > 
> >> -----Original Message----- From: David Blasby
> >> [mailto:dblasby@refractions.net] Sent: Friday, April 11, 2003 3:26
> >> PM To: postgis-users@postgis.refractions.net; GEOS Development List
> >>  Subject: [postgis-users] Error handling: GEOS throws in PostGIS.
> >> 
> >> 
> >> I'm having troubles trapping exceptions thrown by GEOS in
> >> postgresql. My GEOS wrapper (postgis_geos_wrapper.cpp) looks like
> >> this:
> >> 
> >> 
> >> // call g1->contains(g2) // returns 0 = false //         1 = true 
> >> //         2 = error was trapped char GEOSrelateContains(Geometry
> >> *g1, Geometry*g2) { try { bool result; result = g1->contains(g2); 
> >> if (result) return 1; else return 0; } catch (...) { return 2; } }
> >> 
> >> And in the .c PostGIS (postgis_geos.c):
> >> 
> >> // overlaps(GEOMETRY g1,GEOMETRY g2) // returns  if
> >> GEOS::g1->overlaps(g2) returns true // throws an error
> >> (elog(ERROR,...)) if GEOS throws an error 
> >> PG_FUNCTION_INFO_V1(overlaps); Datum overlaps(PG_FUNCTION_ARGS) { 
> >> GEOMETRY        *geom1 = (GEOMETRY *) 
> >> PG_DETOAST_DATUM(PG_GETARG_DATUM(0)); GEOMETRY        *geom2 =
> >> (GEOMETRY *) PG_DETOAST_DATUM(PG_GETARG_DATUM(1));
> >> 
> >> 
> >> Geometry *g1,*g2; bool result;
> >> 
> >> errorIfGeometryCollection(geom1,geom2); initGEOS(MAXIMUM_ALIGNOF);
> >> 
> >> g1 =     POSTGIS2GEOS(geom1 ); g2 =     POSTGIS2GEOS(geom2 );
> >> 
> >> GEOSdeleteGeometry(g1); GEOSdeleteGeometry(g2);
> >> 
> >> result = GEOSrelateOverlaps(g1,g2); if (result == 2) { 
> >> elog(ERROR,"GEOS overlaps() threw an error!"); PG_RETURN_NULL();
> >> //never get here }
> >> 
> >> PG_RETURN_BOOL(result); }
> >> 
> >> 
> >> This works great in simple examples (like the test.c norman wrote).
> >>  But, when you have another layer of indirection - like with 
> >> postgresql, problems happen.  I think the problem is with
> >> postgresql loading a C .so (postgis), which is linked to a C++ .so
> >> (GEOS).  Postgresql is far removed from the GEOS error handling (in
> >> libc++).
> >> 
> >> Basically, as soon as "g1->contains(g2);" throws an error that
> >> leaves the GEOS .so, postgresql dies immediately - the exception is
> >> not catch so terminate() is called.
> >> 
> >> This doesnt happen if you are using GEOS in a c++ program, or using
> >>  a C++ wrapper for a C program. It only has problems with 3 levels 
> >> of indirection.
> >> 
> >> Others have had this problem - for example people writing PERL
> >> modules that use the perl "C" api to call C++ libraries.  People 
> >> doing the same with PYTHON have also had problems. The only
> >> technical reference I can find is at: 
> >> http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=37933
> >> 
> >> Basically, there's a problem if libc is loaded before libc++.
> >> 
> >> The only solution I can find to this (apart from forcing people to 
> >> use a very up-to-date gcc/g++ and perhaps statically linking libc++
> >> to postgresql) is actually write the C wrapper as part of GEOS.
> >> 
> >> In order to test this, I modified GEOS so that GEOMETRY has a 
> >> function:
> >> 
> >> void Geometry::throw_exception() { throw "I see dead people!"; }
> >> 
> >> 
> >> If you call g->throw_exception() in the postgis geos wrapper, 
> >> postgresql will immediately die.  But, if you re-write it (still in
> >> GEOS) like:
> >> 
> >> void Geometry::throw_exception() { try { cout << "in
> >> throw_exception() try block - about to throw an error"<<endl; throw
> >> "I see dead people!"; } catch (...) { cout << "in throw_exception()
> >> - caught an error"<<endl; return; } // never get here }
> >> 
> >> You can successfully catch the error!
> >> 
> >> 
> >> So, unless anyone has any bright ideas, we could think about 
> >> putting a C api directly in GEOS.  If we use the standard C way of
> >> error handling (return an error code or NULL, like in the above),
> >> PostGIS should have no problems.  Unfortunately, this does 
> >> "pollute" GEOS.
> >> 
> >> What think?
> >> 
> >> dave
> >> 
> >> 
> >> _______________________________________________ postgis-users
> >> mailing list postgis-users@postgis.refractions.net 
> >> http://postgis.refractions.net/mailman/listinfo/postgis-users
> >> 
> > 
> > 
> > _______________________________________________ 
> postgis-users mailing
> > list postgis-users@postgis.refractions.net 
> > http://postgis.refractions.net/mailman/listinfo/postgis-users
> 
> 
> -- 
>        __
>       /
>       | Paul Ramsey
>       | Refractions Research
>       | Email: pramsey@refractions.net
>       | Phone: (250) 885-0632
>       \_
> 
> 
> _______________________________________________
> postgis-users mailing list
> postgis-users@postgis.refractions.net
> http://postgis.refractions.net/mailman/listinfo/postgis-users
> 

From mbdavis at VividSolutions.com  Fri Apr 11 20:21:00 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Design of exception-trapping wrapper
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF49C@venus.VividSolutions.com>

Does anyone have time and ideas to prototype the design of this wrapper?  I'm not sure I understand the problem quite well enough yet to propose a design.   A small mockup might help to clarify the situation.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


From dblasby at refractions.net  Fri Apr 11 20:33:20 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Design of exception-trapping wrapper
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DF49C@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF49C@venus.VividSolutions.com>
Message-ID: <3E975ED0.9070406@refractions.net>

Martin Davis wrote:

>Does anyone have time and ideas to prototype the design of this wrapper?  I'm not sure I understand the problem quite well enough yet to propose a design.   A small mockup might help to clarify the situation.
>
Something like the function included below.
NOTE: this is an *added* interface, not the ONLY interface.  C++ and 
simple C programs could use the system exactly the way it is now.

We'd have to come up with name so we dont have any redundant symbols.

 >>This seems like a pretty substantial change to GEOS.

No - I think it would be pretty easy.  We could add another class to 
GEOS.  It wouldnt even have to be compiled unless you're using postgis...

Unfortunately, there could be a lot of these little functions.  But, if 
we stick to just wrapping the Geometry interface, we should be okay.  I 
dont think postgis requires more than this.

// call g1->contains(g2)
// returns 0 = false
//         1 = true
//         2 = error was trapped
char GEOSrelateContains(Geometry *g1, Geometry*g2)
{
   try {
       bool result;
       result = g1->contains(g2);
       if (result)
           return 1;
       else
           return 0;
   }
   catch (...)
   {
       return 2;
   }
}

The postgis_wrapper.cpp would be very simple:

char relate(Geometry *g1, Geometry *g2)
{
     return  GEOSrelateContains(g1,g2);
}


From mbdavis at VividSolutions.com  Fri Apr 11 20:35:56 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Design of exception-trapping wrapper
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF4A0@venus.VividSolutions.com>

Sounds good to me then... press on!

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: David Blasby [mailto:dblasby@refractions.net]
> Sent: Friday, April 11, 2003 5:33 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] Design of exception-trapping wrapper
> 
> 
> Martin Davis wrote:
> 
> >Does anyone have time and ideas to prototype the design of 
> this wrapper?  I'm not sure I understand the problem quite 
> well enough yet to propose a design.   A small mockup might 
> help to clarify the situation.
> >
> Something like the function included below.
> NOTE: this is an *added* interface, not the ONLY interface.  C++ and 
> simple C programs could use the system exactly the way it is now.
> 
> We'd have to come up with name so we dont have any redundant symbols.
> 
>  >>This seems like a pretty substantial change to GEOS.
> 
> No - I think it would be pretty easy.  We could add another class to 
> GEOS.  It wouldnt even have to be compiled unless you're 
> using postgis...
> 
> Unfortunately, there could be a lot of these little 
> functions.  But, if 
> we stick to just wrapping the Geometry interface, we should 
> be okay.  I 
> dont think postgis requires more than this.
> 
> // call g1->contains(g2)
> // returns 0 = false
> //         1 = true
> //         2 = error was trapped
> char GEOSrelateContains(Geometry *g1, Geometry*g2)
> {
>    try {
>        bool result;
>        result = g1->contains(g2);
>        if (result)
>            return 1;
>        else
>            return 0;
>    }
>    catch (...)
>    {
>        return 2;
>    }
> }
> 
> The postgis_wrapper.cpp would be very simple:
> 
> char relate(Geometry *g1, Geometry *g2)
> {
>      return  GEOSrelateContains(g1,g2);
> }
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From dblasby at refractions.net  Fri Apr 11 20:40:17 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:06 2007
Subject: [geos-devel] Design of exception-trapping wrapper
In-Reply-To: <3E975ED0.9070406@refractions.net>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF49C@venus.VividSolutions.com>
	<3E975ED0.9070406@refractions.net>
Message-ID: <3E976071.7090804@refractions.net>

> No - I think it would be pretty easy.  We could add another class to 
> GEOS.  It wouldnt even have to be compiled unless you're using postgis... 

I forgot to more detail in this.  This would keep the wrapper down to 
its own little class in GEOS:


// GeometryWrapper  -- passes off execution to the appropriate function.
//   any exception are caught.
// for GEOS functions that return a bool, these return 0 (false), 1 
(true), 2 (error)
//  for GEOS functions that return an object, these return the object or 
NULL (error)
class GeometryWrapper
{
    char   contains(Geometry *g1, Geometry *g2);
    ....
   // perhaps put a GeometryFactory in here too
}

and in the postgis_wrapper.cpp:

GeometryWrapper *wrapper  = new GeometryWrapper();

char GEOScontains(Geometry *g1, Geometry *g2)
{
    return   wrapper->contains(g1,g2);
}

postgis_geos.c would look like this:

// overlaps(GEOMETRY g1,GEOMETRY g2)
// returns  if GEOS::g1->overlaps(g2) returns true
// throws an error (elog(ERROR,...)) if GEOS throws an error
PG_FUNCTION_INFO_V1(overlaps);
Datum overlaps(PG_FUNCTION_ARGS)
{
   GEOMETRY        *geom1 = (GEOMETRY *)  
PG_DETOAST_DATUM(PG_GETARG_DATUM(0));
   GEOMETRY        *geom2 = (GEOMETRY *)  
PG_DETOAST_DATUM(PG_GETARG_DATUM(1));


   Geometry *g1,*g2;
   bool result;

   errorIfGeometryCollection(geom1,geom2);
   initGEOS(MAXIMUM_ALIGNOF);

   g1 =     POSTGIS2GEOS(geom1 );
   g2 =     POSTGIS2GEOS(geom2 );

   GEOSdeleteGeometry(g1);
   GEOSdeleteGeometry(g2);

   result = GEOSrelateOverlaps(g1,g2);
   if (result == 2)
   {
       elog(ERROR,"GEOS overlaps() threw an error!");
       PG_RETURN_NULL(); //never get here
   }

   PG_RETURN_BOOL(result);
}










From dblasby at refractions.net  Fri Apr 11 20:41:14 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] 
 [Fwd: [HACKERS] backend dies when C function calls C++ library that
 throws an exception]
Message-ID: <3E9760AA.3000506@refractions.net>

Here's the message I sent off the the postgresql hacker list.

-------------- next part --------------
An embedded message was scrubbed...
From: David Blasby <dblasby@refractions.net>
Subject: [HACKERS] backend dies when C function calls C++ library that throws
	an exception
Date: Fri, 11 Apr 2003 16:20:59 -0700
Size: 5022
Url: http://lists.osgeo.org/pipermail/geos-devel/attachments/20030411/ce4061ad/attachment.mht
From dblasby at refractions.net  Fri Apr 11 20:41:50 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] 
 [Fwd: Re: [HACKERS] backend dies when C function calls C++ library
 that throws an exception]
Message-ID: <3E9760CE.9070702@refractions.net>

Here's the response I got from the lead developer of postgres.


-------------- next part --------------
An embedded message was scrubbed...
From: Tom Lane <tgl@sss.pgh.pa.us>
Subject: Re: [HACKERS] backend dies when C function calls C++ library that
	throws an exception 
Date: Fri, 11 Apr 2003 19:55:00 -0400
Size: 2550
Url: http://lists.osgeo.org/pipermail/geos-devel/attachments/20030411/1a2f0983/attachment.mht
From dblasby at refractions.net  Fri Apr 11 21:06:34 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS thread-safe?
In-Reply-To: <3E976071.7090804@refractions.net>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF49C@venus.VividSolutions.com>
	<3E975ED0.9070406@refractions.net> <3E976071.7090804@refractions.net>
Message-ID: <3E97669A.1030704@refractions.net>

I know there were problems with JTS 1.2 and thread-safety, but how is 
GEOS?  

Is it safe to use as a .so?

dave


From CarstenNeumann at web.de  Sat Apr 12 07:04:21 2003
From: CarstenNeumann at web.de (Carsten Neumann)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
Message-ID: <000901c300e3$4a3884a0$0101a8c0@hal9000>

Hello,

for an univerity project I'm using the GEOS library to test intersection of
polygons given in WKT-strings. But - while everything aparently works fine
on my LINUX-PC at home - it fails on solaris (identified by ./configure as
"sparc-sun-solaris2.8" )

Before compiling the sources I had to run these commands because ./configure
always stops in the directory source/examples (Makefile.in is missing) - on
both systems

cd geos
cp /usr/local/share/automake/depcomp .
autoconf             (version 2.52)
automake           (version 1.6.3)

Then it compiles successfully with:

./configure --prefix=$HOME/nexus
gmake
gmake install

But then on the solaris system all the tests shipped with the sources fail
with "segmentation fault". Except - and that might provide some clues - the
SimpleWKTTester. It works just fine, if there are only POINTs and no
complicated geometries (like Multipoint ..) in the WKTIn-File (so the
compilation is correct?)

Has anyone any ideas where the problem might be - are there bugs in the
library that are only showing on solaris (because of stricter testing
perhaps) - or are there mistakes in my configuration?

I would be happy for any help, answers, suggestions ...

Thanks ...

_____________________________
CarstenNeumann@web.de
University of Stuttgart, Germany



From nhv at cape.com  Sat Apr 12 11:57:47 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
In-Reply-To: <000901c300e3$4a3884a0$0101a8c0@hal9000>
Message-ID: <EKEJIKAILPONGGENMBGAAEGLDCAA.nhv@cape.com>

Carsten Neumann writes:
>
> for an univerity project I'm using the GEOS library to test
> intersection of
> polygons given in WKT-strings. But - while everything aparently works fine
> on my LINUX-PC at home - it fails on solaris (identified by ./configure as
> "sparc-sun-solaris2.8" )
>
> Before compiling the sources I had to run these commands because
> ./configure
> always stops in the directory source/examples (Makefile.in is
> missing) - on
> both systems
>
> cd geos
> cp /usr/local/share/automake/depcomp .
> autoconf             (version 2.52)
> automake           (version 1.6.3)
>
> Then it compiles successfully with:
>
> ./configure --prefix=$HOME/nexus
> gmake
> gmake install

try

cd geos
autogen.sh
./configure --prefix=$HOME/nexus
gmake

HTH

Norman


From pramsey at refractions.net  Sat Apr 12 12:16:56 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
In-Reply-To: <000901c300e3$4a3884a0$0101a8c0@hal9000>
Message-ID: <2E9A6C16-6D02-11D7-AC5A-000393D33C2E@refractions.net>

Sounds like trouble :) we'll take our Ultra10 out of mothballs and see 
if we get the same results. You can generate the build stuff by running 
the 'autogen.sh' script in the geos directory. Try that once (I doubt 
it's the problem, but never hurts).
P.

On Saturday, April 12, 2003, at 04:04 AM, Carsten Neumann wrote:

> Hello,
>
> for an univerity project I'm using the GEOS library to test 
> intersection of
> polygons given in WKT-strings. But - while everything aparently works 
> fine
> on my LINUX-PC at home - it fails on solaris (identified by 
> ./configure as
> "sparc-sun-solaris2.8" )
>
> Before compiling the sources I had to run these commands because 
> ./configure
> always stops in the directory source/examples (Makefile.in is missing) 
> - on
> both systems
>
> cd geos
> cp /usr/local/share/automake/depcomp .
> autoconf             (version 2.52)
> automake           (version 1.6.3)
>
> Then it compiles successfully with:
>
> ./configure --prefix=$HOME/nexus
> gmake
> gmake install
>
> But then on the solaris system all the tests shipped with the sources 
> fail
> with "segmentation fault". Except - and that might provide some clues 
> - the
> SimpleWKTTester. It works just fine, if there are only POINTs and no
> complicated geometries (like Multipoint ..) in the WKTIn-File (so the
> compilation is correct?)
>
> Has anyone any ideas where the problem might be - are there bugs in the
> library that are only showing on solaris (because of stricter testing
> perhaps) - or are there mistakes in my configuration?
>
> I would be happy for any help, answers, suggestions ...
>
> Thanks ...
>
> _____________________________
> CarstenNeumann@web.de
> University of Stuttgart, Germany
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From dblasby at refractions.net  Sat Apr 12 18:29:30 2003
From: dblasby at refractions.net (dblasby@refractions.net)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
In-Reply-To: <2E9A6C16-6D02-11D7-AC5A-000393D33C2E@refractions.net>
Message-ID: <20030412222930.19C87E3AC@lion.animals>

This maybe a symptom of memory management issues.

As I said before, windows is pretty easy if you free something and try to use 
it again.  Linux (on intel) is a bit easier - it usually works.

Solaris is really aggressive about seg faulting if you do something wrong in 
the memory-management department.  This could be pointing to more subtle 
issues within the library.  This is good - hopefully we can find the problem.

Could you verify that you are not deleting *anything* in the code you're 
using?

It could also just be a system-issue...


We're the first people actually using the system, so there's bugs to be found 
and quashed.

dave

From CarstenNeumann at web.de  Sun Apr 13 16:02:55 2003
From: CarstenNeumann at web.de (Carsten Neumann)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
Message-ID: <001801c301f7$b30b06a0$0101a8c0@hal9000>

Hello!

Yes, the "autogen.sh" script works just fine to repair/create the missing
makefiles. But it didn't solve the real problem. I just recompiled the
library from scratch (after uploading the latest version) an retried the
tests and examples (without changing anything).

Here is the output:

> SimpleWKTTester
Start Testing:
Segmentation Fault

> cat WKTOut
----------
POINT(110 130)
POINT (110.0000000000000000 130.0000000000000000)
----------

So at least the POINT (it also works with several points) gets processed.
But none of the more complex objects.
Other tests:

> CoordinateListsExample
Start:

Segmentation Fault

> CustomCoordinateListExample
Start:


CoordinateList cl: (11,11,1.7e-308) (140,200,1.7e-308) (240,200,1.7e-308)
(55,55,1.7e-308) (140,120,1.7e-308)
CoordinateList cl: (140,120,1.7e-308) (140,200,1.7e-308) (240,200,1.7e-308)
(240,120,1.7e-308) (140,120,1.7e-308)

Geometry:
POLYGON ((140.0000000000000000 120.0000000000000000, 140.0000000000000000
200.0000000000000000, 240.0000000000000000 200.0000000000000000,
240.0000000000000000 120.0000000000000000, 140.0000000000000000
120.0000000000000000))
Segmentation Fault

.
.
.

.. Carsten.






From nhv at cape.com  Sun Apr 13 16:21:43 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
In-Reply-To: <001801c301f7$b30b06a0$0101a8c0@hal9000>
Message-ID: <EKEJIKAILPONGGENMBGAKEHKDCAA.nhv@cape.com>

Carsten Neumann writes:
> 
> Yes, the "autogen.sh" script works just fine to repair/create the missing
> makefiles. But it didn't solve the real problem. I just recompiled the
> library from scratch (after uploading the latest version) an retried the
> tests and examples (without changing anything).

Carsten

Could you try running one of the examples that crash under gdb
and report the results

Here is an example of running gdb on a program call test1.exe
Just in case in case you are not familiar with gdb

(gdb) is the gdb prompt

so in this case I entered
'run' at first opportunity
'bt'   at first prompt after crash

Thanks

Norman

% gdb test1.exe
(gdb) run
Starting program: /src/mpatrol/tests/fail/test1.exe

Program received signal SIGSEGV, Segmentation fault.
0x6100d174 in cygwin_attach_handle_to_fd () from /bin/cygwin1.dll
(gdb) bt
#0  0x6100d174 in cygwin_attach_handle_to_fd () from /bin/cygwin1.dll
#1  0x6100d1e8 in getenv () from /bin/cygwin1.dll
#2  0x00408d9c in __mp_proffile (m=0x473020, s=0x0) at diag.c:384

From me at yury.ca  Mon Apr 14 01:35:35 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Status (Sunday, April 13th)
Message-ID: <00db01c30247$b143a5c0$b9354d18@yury>

Overlay has been debugged and now passes all tests correctly. The latest version
has been committed to CVS.

Next to do:
1. Fix the problems with PrecisionModel (change it to value type)
2. Since no one had any objections, remove bounds checking from *At methods in
Coordinate.
3. Bring the GEOS up to date with the latest JTS version (1.3) and add
namespace.

Things left to port:
1. ConvexHull class from 'algorithm'
2. 'operation/buffer' package
3. 'operation/distance' package

Yury


From rodin at unix.lib.itb.ac.id  Mon Apr 14 02:12:24 2003
From: rodin at unix.lib.itb.ac.id (Romi Hardiyanto)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] CVS autogen.sh
In-Reply-To: <00db01c30247$b143a5c0$b9354d18@yury>
Message-ID: <20030414130133.F52373-100000@unix.lib.itb.ac.id>

Hi, i'm try to compile geos for university project i work on,

i'm using redhat 8.0, the autoconf-2.53 always complaining about these macros:

configure.in:16: error: possibly undefined macro: AC_LIBTOOL_DLOPEN
configure.in:17: error: possibly undefined macro: AC_LIBTOOL_WIN32_DLL
configure.in:18: error: possibly undefined macro: AM_PROG_LIBTOOL


Cygwin autoconf is ok (using autoconf 2.52), but i always get errors when
linking objects: libtool seems doesn't pass -lstdc++ 'gcc -shared'.

any ideas?

Regards,

Romi Hardiyanto


From nhv at cape.com  Mon Apr 14 04:50:32 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] CVS autogen.sh
In-Reply-To: <20030414130133.F52373-100000@unix.lib.itb.ac.id>
Message-ID: <EKEJIKAILPONGGENMBGAIEIFDCAA.nhv@cape.com>

Romi Hardiyanto writes:
> 
> Hi, i'm try to compile geos for university project i work on,
> 
> i'm using redhat 8.0, the autoconf-2.53 always complaining about 
> these macros:
> 
> configure.in:16: error: possibly undefined macro: AC_LIBTOOL_DLOPEN
> configure.in:17: error: possibly undefined macro: AC_LIBTOOL_WIN32_DLL
> configure.in:18: error: possibly undefined macro: AM_PROG_LIBTOOL

Do you have libtool installed on this system ? 

> Cygwin autoconf is ok (using autoconf 2.52), but i always get errors when
> linking objects: libtool seems doesn't pass -lstdc++ 'gcc -shared'.
> 
> any ideas?

this is a known problem with Cygwin libtool :-(
Explicitly set LD
 'configure LD=g++'

HTH

Norman

From rodin at unix.lib.itb.ac.id  Mon Apr 14 06:35:01 2003
From: rodin at unix.lib.itb.ac.id (Romi Hardiyanto)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] CVS autogen.sh
In-Reply-To: <EKEJIKAILPONGGENMBGAIEIFDCAA.nhv@cape.com>
Message-ID: <20030414173419.E53861-100000@unix.lib.itb.ac.id>

Oops, sorry. Forgot to install one :) Thanks!

On Mon, 14 Apr 2003, Norman Vine wrote:

> Romi Hardiyanto writes:
> >
> > Hi, i'm try to compile geos for university project i work on,
> >
> > i'm using redhat 8.0, the autoconf-2.53 always complaining about
> > these macros:
> >
> > configure.in:16: error: possibly undefined macro: AC_LIBTOOL_DLOPEN
> > configure.in:17: error: possibly undefined macro: AC_LIBTOOL_WIN32_DLL
> > configure.in:18: error: possibly undefined macro: AM_PROG_LIBTOOL
>
> Do you have libtool installed on this system ?
>
> > Cygwin autoconf is ok (using autoconf 2.52), but i always get errors when
> > linking objects: libtool seems doesn't pass -lstdc++ 'gcc -shared'.
> >
> > any ideas?
>
> this is a known problem with Cygwin libtool :-(
> Explicitly set LD
>  'configure LD=g++'
>
> HTH
>
> Norman
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>


From pramsey at refractions.net  Wed Apr 16 00:20:50 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Re: [postgis-users] Call for Debuggers
In-Reply-To: <20030416041506.GA12000@vadose.dvg>
Message-ID: <CDFA9A6F-6FC2-11D7-A525-000393D33C2E@refractions.net>


Interesting indeed.
Instant segfault was reported to occur on object creation, which is to 
say basically all the time in any test.
The only test you haven't run is in bigtest, the TestListSweep test, 
but in any event it looks like the results are QUITE DIFFERENT from 
what we had reported on Solaris.

Paul

On Tuesday, April 15, 2003, at 09:15 PM, Carl Anderson wrote:

>
> Ok in what context does "instant segfault" occur
>
> I compiled geos on a Solaris 5.7 with gcc3.2.2 using GNU ld
>
> autoheader-1.6
> automake-1.6 --add-missing --gnu
> autoconf
> configure CXXFLAGS="-g" CFLAGS="-g"
> make
>
> Notice that I'm disabling the default CXXFLAGS "-g -O2"
>
> Paul the autogen.sh calls a default aclocal and automake.  Many (i 
> don't know if all)
> automake ver 1.6 install themselves as automake-1.6 in addition to 
> automake.
> (same for aclocal-1.6)
> I have both automake-1.4 and automake-1.6 installed.  geos does not
> compile with automake-1.4 so that may be part of the issue.
>
> then run tests
>
> source/test/CTS
> ok
>
> source/test/XMLTester
> ok
>
> source/test/SimpleWKTTester
> ok
>
> source/example/CoordinateListsExample
> ok
>
> source/example/CustomCoordinateListExample
> ok
>
>
> Are there other tests to run.
>
>
> C.
>
> _______________________________________________
> postgis-users mailing list
> postgis-users@postgis.refractions.net
> http://postgis.refractions.net/mailman/listinfo/postgis-users
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From CarstenNeumann at web.de  Wed Apr 16 16:45:42 2003
From: CarstenNeumann at web.de (Carsten Neumann)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
Message-ID: <005701c30459$33bb01c0$0101a8c0@hal9000>

Hi!

Sorry, but I haven't had the time to answer earlier.

I have tried debugger on the examples but it doesn't start because there is
no real executable.

If I start the script, I'm getting:

bash-2.03$ /home/neumancn/nexus/src/gdb-5.3/gdb/gdb SimpleWKTTester
GNU gdb 5.3
Copyright 2002 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain
conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as
"sparc-sun-solaris2.8"..."/home/neumancn/nexus/src/ge
os/source/test/SimpleWKTTester": not in executable format: File format not
recog
nized
(gdb) run
Starting program:
No executable file specified.
Use the "file" or "exec-file" command.


If I try the objectfile, the result is:

bash-2.03$ /home/neumancn/nexus/src/gdb-5.3/gdb/gdb SimpleWKTTester.o
GNU gdb 5.3
Copyright 2002 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain
conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "sparc-sun-solaris2.8"...
(gdb) run
Starting program:
/home/neumancn/nexus/src/geos/source/test/SimpleWKTTester.o
Warning:
Cannot insert breakpoint -1.
Error accessing memory address 0xe0: I/O error.
The same program may be running in another process.



So what command should I try?

Carsten



From dblasby at refractions.net  Wed Apr 16 17:00:10 2003
From: dblasby at refractions.net (David Blasby)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] GEOS on Solaris?!
In-Reply-To: <005701c30459$33bb01c0$0101a8c0@hal9000>
References: <005701c30459$33bb01c0$0101a8c0@hal9000>
Message-ID: <3E9DC45A.90900@refractions.net>

>
>
>So what command should I try?
>  
>
Try looking for SimpleWKTTester in .libs/  -
geos/source/test/.libs/SimpleWKTTester

Did you compile GEOS with the -g option and NOT the -O2?

dave


From CarstenNeumann at web.de  Thu Apr 17 07:12:38 2003
From: CarstenNeumann at web.de (Carsten Neumann)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Debugging results on Solaris
Message-ID: <001001c304d2$45a6abe0$0101a8c0@hal9000>

I have recompiled the library with "-g" and now at least some of the test
run fine (XMLTester, CTS). The others still fail.

> autoheader-1.6
> automake-1.6 --add-missing --gnu
> autoconf
> configure CXXFLAGS="-g" CFLAGS="-g"
> make

**************************************************************

bash-2.03$ gdb .libs/SimpleWKTTester
This GDB was configured as "sparc-sun-solaris2.8"...
(gdb) run
Starting program:
/home/neumancn/nexus/src/geos/source/test/.libs/SimpleWKTTeste
r
Start Testing:

Program received signal SIGSEGV, Segmentation fault.
0xff29aa6c in _ZN9WKTReader14getCoordinatesEP15StringTokenizer (
    this=<incomplete type>, tokenizer=0x230b0) at ../io/WKTReader.cpp:32
32              CoordinateList
*coordinates=CoordinateListFactory::internalFacto
ry->createCoordinateList();
(gdb) bt
#0  0xff29aa6c in _ZN9WKTReader14getCoordinatesEP15StringTokenizer (
    this=<incomplete type>, tokenizer=0x230b0) at ../io/WKTReader.cpp:32
#1  0xff29cb58 in _ZN9WKTReader18readLineStringTextEP15StringTokenizer (
    this=<incomplete type>, tokenizer=0x230b0) at ../io/WKTReader.cpp:155
#2  0xff29c55c in _ZN9WKTReader22readGeometryTaggedTextEP15StringTokenizer (
    this=<incomplete type>, tokenizer=0x230b0) at ../io/WKTReader.cpp:125
#3  0xff29a814 in _ZN9WKTReader4readESs (this=<incomplete type>,
    wellKnownText={static npos = <incomplete type>,
      _M_dataplus = {<allocator<char>> = {<No data fields>},
        _M_p = 0x29a14 "LINESTRING(40 40, 50 130, 130 130)"},
      static _S_empty_rep_storage = {0, 0, 1, 0}}) at ../io/WKTReader.cpp:20
#4  0x11744 in main (argc=1, argv=0xffbef4f4) at SimpleWKTTester.cpp:27

**************************************************************

bash-2.03$ gdb .libs/CTS
(gdb) run
Starting program: /home/neumancn/nexus/src/geos/source/test/.libs/CTS
Start:
End

Program exited normally.

**************************************************************

bash-2.03$ gdb .libs/XMLTester
(gdb) run
Starting program: /home/neumancn/nexus/src/geos/source/test/.libs/XMLTester
Precision Model:
Failed: 0
Succeeded: 0
End Test
Program exited normally.

**************************************************************

bash-2.03$ gdb .libs/CoordinateListsExample
(gdb) run
Starting program:
/home/neumancn/nexus/src/geos/source/examples/.libs/Coordinate
ListsExample
Start:



Program received signal SIGSEGV, Segmentation fault.
0x11824 in main (argc=1, argv=0xffbef4e4) at CoordinateListsExample.cpp:17
17              CoordinateList
*cl1=CoordinateListFactory::internalFactory->crea
teCoordinateList();
(gdb) bt
#0  0x11824 in main (argc=1, argv=0xffbef4e4) at
CoordinateListsExample.cpp:17

**************************************************************

bash-2.03$ gdb .libs/CustomCoordinateListExample
(gdb) run
Starting program:
/home/neumancn/nexus/src/geos/source/examples/.libs/CustomCoor
dinateListExample
Start:


CoordinateList cl: (11,11,1.7e-308) (140,200,1.7e-308) (240,200,1.7e-308)
(55,55
,1.7e-308) (140,120,1.7e-308)
CoordinateList cl: (140,120,1.7e-308) (140,200,1.7e-308) (240,200,1.7e-308)
(240
,120,1.7e-308) (140,120,1.7e-308)

Geometry:
POLYGON ((140.0000000000000000 120.0000000000000000, 140.0000000000000000
200.00
00000000000000, 240.0000000000000000 200.0000000000000000,
240.0000000000000000
120.0000000000000000, 140.0000000000000000 120.0000000000000000))

Program received signal SIGSEGV, Segmentation fault.
0xff2b3efc in
_ZN22GeometryGraphOperation23setComputationPrecisionEP14PrecisionM
odel (this=<incomplete type>, pm=0x2bc08)
    at ../operation/GeometryGraphOperation.cpp:27
27              li->setMakePrecise(makePrecise);
(gdb) bt
#0  0xff2b3efc in
_ZN22GeometryGraphOperation23setComputationPrecisionEP14Precis
ionModel (this=<incomplete type>, pm=0x2bc08)
    at ../operation/GeometryGraphOperation.cpp:27
#1  0xff2b3b90 in _ZN22GeometryGraphOperationC2EP8Geometry (
    this=<incomplete type>, g0=0x2cb10)
    at ../operation/GeometryGraphOperation.cpp:16
#2  0xff2c4420 in _ZN9IsValidOpC1EP8Geometry (this=<incomplete type>,
    g=0x2cb10) at ../operation/valid/IsValidOp.cpp:22
#3  0xff26a434 in _ZN8Geometry7isValidEv (this=<incomplete type>)
    at Geometry.cpp:121
#4  0x1519c in main (argc=1, argv=0xffbef4dc)
    at CustomCoordinateListExample.cpp:56


___________

Carsten



From nhv at cape.com  Thu Apr 17 09:02:13 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Debugging results on Solaris
In-Reply-To: <001001c304d2$45a6abe0$0101a8c0@hal9000>
Message-ID: <EKEJIKAILPONGGENMBGAOECEDDAA.nhv@cape.com>

Carsten Neumann writes:
> 
> I have recompiled the library with "-g" and now at least some of the test
> run fine (XMLTester, CTS). The others still fail.

Carsten

OK we can see where the programs are failing now 
we just have to figure out why :-)

What compiler are you using ??

% gcc --version

Thanks

Norman

From pramsey at refractions.net  Thu Apr 17 10:04:13 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Debugging results on Solaris
In-Reply-To: <001001c304d2$45a6abe0$0101a8c0@hal9000>
Message-ID: <7811E9DF-70DD-11D7-B243-000393D33C2E@refractions.net>

For XML tester you need to edit the line which points to the tests.xml 
file. Yury leaves it set to a DOS path, which unix merrily ignores, so 
you aren't actually testing anything.

On Thursday, April 17, 2003, at 04:12 AM, Carsten Neumann wrote:

> I have recompiled the library with "-g" and now at least some of the 
> test
> run fine (XMLTester, CTS). The others still fail.
>
>> autoheader-1.6
>> automake-1.6 --add-missing --gnu
>> autoconf
>> configure CXXFLAGS="-g" CFLAGS="-g"
>> make
>
> **************************************************************
>
> bash-2.03$ gdb .libs/SimpleWKTTester
> This GDB was configured as "sparc-sun-solaris2.8"...
> (gdb) run
> Starting program:
> /home/neumancn/nexus/src/geos/source/test/.libs/SimpleWKTTeste
> r
> Start Testing:
>
> Program received signal SIGSEGV, Segmentation fault.
> 0xff29aa6c in _ZN9WKTReader14getCoordinatesEP15StringTokenizer (
>     this=<incomplete type>, tokenizer=0x230b0) at 
> ../io/WKTReader.cpp:32
> 32              CoordinateList
> *coordinates=CoordinateListFactory::internalFacto
> ry->createCoordinateList();
> (gdb) bt
> #0  0xff29aa6c in _ZN9WKTReader14getCoordinatesEP15StringTokenizer (
>     this=<incomplete type>, tokenizer=0x230b0) at 
> ../io/WKTReader.cpp:32
> #1  0xff29cb58 in _ZN9WKTReader18readLineStringTextEP15StringTokenizer 
> (
>     this=<incomplete type>, tokenizer=0x230b0) at 
> ../io/WKTReader.cpp:155
> #2  0xff29c55c in 
> _ZN9WKTReader22readGeometryTaggedTextEP15StringTokenizer (
>     this=<incomplete type>, tokenizer=0x230b0) at 
> ../io/WKTReader.cpp:125
> #3  0xff29a814 in _ZN9WKTReader4readESs (this=<incomplete type>,
>     wellKnownText={static npos = <incomplete type>,
>       _M_dataplus = {<allocator<char>> = {<No data fields>},
>         _M_p = 0x29a14 "LINESTRING(40 40, 50 130, 130 130)"},
>       static _S_empty_rep_storage = {0, 0, 1, 0}}) at 
> ../io/WKTReader.cpp:20
> #4  0x11744 in main (argc=1, argv=0xffbef4f4) at SimpleWKTTester.cpp:27
>
> **************************************************************
>
> bash-2.03$ gdb .libs/CTS
> (gdb) run
> Starting program: /home/neumancn/nexus/src/geos/source/test/.libs/CTS
> Start:
> End
>
> Program exited normally.
>
> **************************************************************
>
> bash-2.03$ gdb .libs/XMLTester
> (gdb) run
> Starting program: 
> /home/neumancn/nexus/src/geos/source/test/.libs/XMLTester
> Precision Model:
> Failed: 0
> Succeeded: 0
> End Test
> Program exited normally.
>
> **************************************************************
>
> bash-2.03$ gdb .libs/CoordinateListsExample
> (gdb) run
> Starting program:
> /home/neumancn/nexus/src/geos/source/examples/.libs/Coordinate
> ListsExample
> Start:
>
>
>
> Program received signal SIGSEGV, Segmentation fault.
> 0x11824 in main (argc=1, argv=0xffbef4e4) at 
> CoordinateListsExample.cpp:17
> 17              CoordinateList
> *cl1=CoordinateListFactory::internalFactory->crea
> teCoordinateList();
> (gdb) bt
> #0  0x11824 in main (argc=1, argv=0xffbef4e4) at
> CoordinateListsExample.cpp:17
>
> **************************************************************
>
> bash-2.03$ gdb .libs/CustomCoordinateListExample
> (gdb) run
> Starting program:
> /home/neumancn/nexus/src/geos/source/examples/.libs/CustomCoor
> dinateListExample
> Start:
>
>
> CoordinateList cl: (11,11,1.7e-308) (140,200,1.7e-308) 
> (240,200,1.7e-308)
> (55,55
> ,1.7e-308) (140,120,1.7e-308)
> CoordinateList cl: (140,120,1.7e-308) (140,200,1.7e-308) 
> (240,200,1.7e-308)
> (240
> ,120,1.7e-308) (140,120,1.7e-308)
>
> Geometry:
> POLYGON ((140.0000000000000000 120.0000000000000000, 
> 140.0000000000000000
> 200.00
> 00000000000000, 240.0000000000000000 200.0000000000000000,
> 240.0000000000000000
> 120.0000000000000000, 140.0000000000000000 120.0000000000000000))
>
> Program received signal SIGSEGV, Segmentation fault.
> 0xff2b3efc in
> _ZN22GeometryGraphOperation23setComputationPrecisionEP14PrecisionM
> odel (this=<incomplete type>, pm=0x2bc08)
>     at ../operation/GeometryGraphOperation.cpp:27
> 27              li->setMakePrecise(makePrecise);
> (gdb) bt
> #0  0xff2b3efc in
> _ZN22GeometryGraphOperation23setComputationPrecisionEP14Precis
> ionModel (this=<incomplete type>, pm=0x2bc08)
>     at ../operation/GeometryGraphOperation.cpp:27
> #1  0xff2b3b90 in _ZN22GeometryGraphOperationC2EP8Geometry (
>     this=<incomplete type>, g0=0x2cb10)
>     at ../operation/GeometryGraphOperation.cpp:16
> #2  0xff2c4420 in _ZN9IsValidOpC1EP8Geometry (this=<incomplete type>,
>     g=0x2cb10) at ../operation/valid/IsValidOp.cpp:22
> #3  0xff26a434 in _ZN8Geometry7isValidEv (this=<incomplete type>)
>     at Geometry.cpp:121
> #4  0x1519c in main (argc=1, argv=0xffbef4dc)
>     at CustomCoordinateListExample.cpp:56
>
>
> ___________
>
> Carsten
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>
      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From pramsey at refractions.net  Sat Apr 19 03:22:52 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Exceptions
Message-ID: <BB74F403-7237-11D7-811D-000393D33C2E@refractions.net>

The exceptions continue to muck with us. Exceptions thrown in geos have 
not been catchable, and are taking down the postgres backend with 
sigabort. I did a grep for "throw" in the source code, and the 
exceptions are a bit of a mishmash. Most of them are of the form,

   throw "PointCoordinateList exception: can't retrieve element\n";

But some are of the form,

   throw new ParseException(e.toString());

or

   throw ParseException("Expected number but encountered ')'")

So, sometimes we are throwing strings, sometimes we are throwing new 
exception objects and other times just static things?

Anyhow, we have had better luck catching the simple throws (the 
strings). Is there a reason for throwing specially constructed 
exception objects?


      Paul Ramsey
      Refractions Research
      Email: pramsey@refractions.net
      Phone: (250) 885-0632


From me at yury.ca  Sat Apr 19 04:23:52 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Exceptions
References: <BB74F403-7237-11D7-811D-000393D33C2E@refractions.net>
Message-ID: <059601c3064d$23843060$b9354d18@yury>

Yes, exceptions in GEOS hasn't been uniformized yet. The reason why they are in
different forms is simple: in JTS code some exceptions have their own classes
(e.g. AssertionFailedException) and for these I've created a corresponding class
in GEOS, and some are native java exceptions and for them I use strings. I was
originally planning to create classes for all exceptions later, but if strings
are better, then I can change everything to strings.

Yury

----- Original Message -----
From: "Paul Ramsey" <pramsey@refractions.net>
To: "GEOS List" <geos-devel@geos.refractions.net>
Sent: Saturday, April 19, 2003 12:22 AM
Subject: [geos-devel] Exceptions


> The exceptions continue to muck with us. Exceptions thrown in geos have
> not been catchable, and are taking down the postgres backend with
> sigabort. I did a grep for "throw" in the source code, and the
> exceptions are a bit of a mishmash. Most of them are of the form,
>
>    throw "PointCoordinateList exception: can't retrieve element\n";
>
> But some are of the form,
>
>    throw new ParseException(e.toString());
>
> or
>
>    throw ParseException("Expected number but encountered ')'")
>
> So, sometimes we are throwing strings, sometimes we are throwing new
> exception objects and other times just static things?
>
> Anyhow, we have had better luck catching the simple throws (the
> strings). Is there a reason for throwing specially constructed
> exception objects?
>
>
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From me at yury.ca  Sat Apr 19 04:33:38 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Status (Friday, April 18th)
Message-ID: <002201c3064e$6207cd00$b9354d18@yury>

PrecisionModel has been changed it value type to fix deletion errors.
Bounds checking was removed from *At methods in CoordinateLists. This resulted
in about 20% performance improvement.
Before the change:
    n Pts: 256000  Executed in   2353 ms.
    n Pts: 512000  Executed in   4676 ms.
    n Pts: 1024000  Executed in  10716 ms.
After the change:
    n Pts: 256000  Executed in   1953 ms.
    n Pts: 512000  Executed in   3816 ms.
    n Pts: 1024000  Executed in   7851 ms.
(Tests were done on P4-2.53)

The latest version has been committed to CVS.

Next to do:
1. Bring the GEOS up to date with the latest JTS version (1.3) and add
namespace.
2. Port 'operation/buffer' package

Things left to port:
1. ConvexHull class from 'algorithm'
2. 'operation/distance' package

Yury


From hi_ono2001 at ybb.ne.jp  Sat Apr 19 07:21:42 2003
From: hi_ono2001 at ybb.ne.jp (Hisaji Ono)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] How to build GEOS by VC++ 6.0
References: <002201c3064e$6207cd00$b9354d18@yury>
Message-ID: <005d01c30665$da972d30$818001db@webgis>

Hello.

According to old articles of  this mailing-list, GEOS was originally
developed by VC++.

 But I could not find makefile.vc or other VC related files in latest CVS
files.

 Could someone tell me how to build GEOS by VC++ if possible?


 Regards.


From nhv at cape.com  Sat Apr 19 08:44:47 2003
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] How to build GEOS by VC++ 6.0
In-Reply-To: <005d01c30665$da972d30$818001db@webgis>
Message-ID: <EKEJIKAILPONGGENMBGACEGMDDAA.nhv@cape.com>

Hisaji Ono
> 
> According to old articles of  this mailing-list, GEOS was originally
> developed by VC++.
> 
>  But I could not find makefile.vc or other VC related files in latest CVS
> files.
> 
>  Could someone tell me how to build GEOS by VC++ if possible?

Yury

Could you add the required files todo this to the CVS

I reccomend using a new top level directory called "VisualStudio"
for holding the .dsw and rhe .dsp files in a mirror heirarchy

But whatever works for you is fine

Thanks

Norman


From me at yury.ca  Mon Apr 21 18:23:12 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] How to build GEOS by VC++ 6.0
References: <EKEJIKAILPONGGENMBGACEGMDDAA.nhv@cape.com>
Message-ID: <01e201c30854$9a20ecf0$b9354d18@yury>

I've created and added to CVS a new top-level directory called VisualStudio that
contains a project and solution files (GEOS.vcproj and GEOS.sln respectively)
for Visual C++ 7 (from Visual Studio .Net)
Hopefully it will work for earlier versions as well.

Yury

----- Original Message -----
From: "Norman Vine" <nhv@cape.com>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Saturday, April 19, 2003 5:44 AM
Subject: RE: [geos-devel] How to build GEOS by VC++ 6.0


> Hisaji Ono
> >
> > According to old articles of  this mailing-list, GEOS was originally
> > developed by VC++.
> >
> >  But I could not find makefile.vc or other VC related files in latest CVS
> > files.
> >
> >  Could someone tell me how to build GEOS by VC++ if possible?
>
> Yury
>
> Could you add the required files todo this to the CVS
>
> I reccomend using a new top level directory called "VisualStudio"
> for holding the .dsw and rhe .dsp files in a mirror heirarchy
>
> But whatever works for you is fine
>
> Thanks
>
> Norman
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From mbdavis at VividSolutions.com  Tue Apr 22 11:24:08 2003
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Exceptions
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0271DF4F1@venus.VividSolutions.com>

Yes, absolutely.  The whole idea behind structured exception handling is so that higher layers of client code can catch some or all of them and handle them intelligently.  To do this, exceptions need to be typed, and they often need to carry extra information about the nature of the error.  

If every exception thrown is a string, the only handling strategy possible is to abort printing out the string.

It's easy to degrade exceptions to strings, but very hard to make them back into typed exceptions.  If typed exceptions are causing a problem, the answer is to catch them all in the "C PostgresQL wrapper" and convert them to strings.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.
Suite #1A-2328 Government Street   Victoria, B.C.   V8T 5G5
Phone: (250) 385 6040    Fax: (250) 385 6046
EMail: mbdavis@vividsolutions.com  Web: www.vividsolutions.com


> -----Original Message-----
> From: Paul Ramsey [mailto:pramsey@refractions.net]
> Sent: Saturday, April 19, 2003 12:23 AM
> To: GEOS List
> Subject: [geos-devel] Exceptions
> 
> 
> The exceptions continue to muck with us. Exceptions thrown in 
> geos have 
> not been catchable, and are taking down the postgres backend with 
> sigabort. I did a grep for "throw" in the source code, and the 
> exceptions are a bit of a mishmash. Most of them are of the form,
> 
>    throw "PointCoordinateList exception: can't retrieve element\n";
> 
> But some are of the form,
> 
>    throw new ParseException(e.toString());
> 
> or
> 
>    throw ParseException("Expected number but encountered ')'")
> 
> So, sometimes we are throwing strings, sometimes we are throwing new 
> exception objects and other times just static things?
> 
> Anyhow, we have had better luck catching the simple throws (the 
> strings). Is there a reason for throwing specially constructed 
> exception objects?
> 
> 
>       Paul Ramsey
>       Refractions Research
>       Email: pramsey@refractions.net
>       Phone: (250) 885-0632
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From hi_ono2001 at ybb.ne.jp  Tue Apr 22 15:03:30 2003
From: hi_ono2001 at ybb.ne.jp (Hisaji Ono)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] How to build GEOS by VC++ 6.0
References: <EKEJIKAILPONGGENMBGACEGMDDAA.nhv@cape.com>
	<01e201c30854$9a20ecf0$b9354d18@yury>
Message-ID: <000701c30901$dce3a6b0$818001db@webgis>

Thank you very much, Mr. Bychkov & Mr. Vine.


----- Original Message -----
From: "Yury A. Bychkov" <me@yury.ca>
To: "GEOS Development List" <geos-devel@geos.refractions.net>
Sent: Tuesday, April 22, 2003 7:23 AM
Subject: Re: [geos-devel] How to build GEOS by VC++ 6.0


> I've created and added to CVS a new top-level directory called
VisualStudio that
> contains a project and solution files (GEOS.vcproj and GEOS.sln
respectively)
> for Visual C++ 7 (from Visual Studio .Net)
> Hopefully it will work for earlier versions as well.
>

  Unfortunately, I couldn't build this GEOS sources by my VC++ 6.0.

 Regards.



From pramsey at refractions.net  Tue Apr 22 16:43:51 2003
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Exceptions
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0271DF4F1@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0271DF4F1@venus.VividSolutions.com>
Message-ID: <3EA5A987.7070902@refractions.net>

Martin Davis wrote:
> Yes, absolutely.  The whole idea behind structured exception handling
> is so that higher layers of client code can catch some or all of them
> and handle them intelligently.  To do this, exceptions need to be
> typed, and they often need to carry extra information about the
> nature of the error.
> 
> If every exception thrown is a string, the only handling strategy
> possible is to abort printing out the string.
> 
> It's easy to degrade exceptions to strings, but very hard to make
> them back into typed exceptions.  If typed exceptions are causing a
> problem, the answer is to catch them all in the "C PostgresQL
> wrapper" and convert them to strings.

Unfortunately that is not an option for us, because the act of throwing 
the exception also sends the backend a sigabort. The backend is dead 
before it can catch the exception.

Don't worry about making any changes until Dave gets back and can 
provide more detailed guidance. I don't know that there is any guarantee 
that string-based exceptions would be any more catchable and any less 
deadly to us.

> Martin Davis, Senior Technical Architect Vivid Solutions Inc. Suite
> #1A-2328 Government Street   Victoria, B.C.   V8T 5G5 Phone: (250)
> 385 6040    Fax: (250) 385 6046 EMail: mbdavis@vividsolutions.com
> Web: www.vividsolutions.com
> 
> 
> 
>> -----Original Message----- From: Paul Ramsey
>> [mailto:pramsey@refractions.net] Sent: Saturday, April 19, 2003
>> 12:23 AM To: GEOS List Subject: [geos-devel] Exceptions
>> 
>> 
>> The exceptions continue to muck with us. Exceptions thrown in geos
>> have not been catchable, and are taking down the postgres backend
>> with sigabort. I did a grep for "throw" in the source code, and the
>>  exceptions are a bit of a mishmash. Most of them are of the form,
>> 
>> throw "PointCoordinateList exception: can't retrieve element\n";
>> 
>> But some are of the form,
>> 
>> throw new ParseException(e.toString());
>> 
>> or
>> 
>> throw ParseException("Expected number but encountered ')'")
>> 
>> So, sometimes we are throwing strings, sometimes we are throwing
>> new exception objects and other times just static things?
>> 
>> Anyhow, we have had better luck catching the simple throws (the 
>> strings). Is there a reason for throwing specially constructed 
>> exception objects?
>> 
>> 
>> Paul Ramsey Refractions Research Email: pramsey@refractions.net 
>> Phone: (250) 885-0632
>> 
>> 
>> _______________________________________________ geos-devel mailing
>> list geos-devel@geos.refractions.net 
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>> 
> 
> 
> _______________________________________________ geos-devel mailing
> list geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 
       __
      /
      | Paul Ramsey
      | Refractions Research
      | Email: pramsey@refractions.net
      | Phone: (250) 885-0632
      \_


From me at yury.ca  Mon Apr 28 11:09:45 2003
From: me at yury.ca (Yury A. Bychkov)
Date: Fri Nov  2 20:52:07 2007
Subject: [geos-devel] Status (Sunday, April 28th)
References: <002201c3064e$6207cd00$b9354d18@yury>
Message-ID: <002201c30d98$362f3780$b9354d18@yury>

I am in the process of bringing GEOS up to date with the latest JTS version
(1.3). It'll probably take a couple more days to finish.

Next to do:
1. Change all exceptions to classes.

Things left to port:
1. ConvexHull class from 'algorithm'
2. 'operation/distance' package
3. 'operation/buffer' package


Yury


