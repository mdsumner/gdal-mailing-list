From strk at kbt.io  Sun Oct  1 11:47:51 2017
From: strk at kbt.io (Sandro Santilli)
Date: Sun, 1 Oct 2017 20:47:51 +0200
Subject: [geos-devel] GEOS C++ API deprecated? (was: PostGIS 2.5 what
 should be minimum requirements?)
In-Reply-To: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
Message-ID: <20171001184751.ewyxexosya4r55cf@liz>

On Sat, Sep 30, 2017 at 09:26:42PM +0200, Mateusz Loskot wrote:
> /topic changed
> /cc geos-devel
> 
> On 30 September 2017 at 20:47, Greg Troxel <gdt at lexort.com> wrote:

> >   ### Using the C++ interface (discouraged)
> >
> >   NB: The C++ interface should not be used directly; the GEOS project
> >   views it as a bug for another program to use the C++ interface or even
> >   to directly link against the C++ library.
> > [...]

> > Mateusz Loskot <mateusz at loskot.net> writes:
> 
> Moreover, this paragraph has no rights to be there or in any official
> GEOS writing.
> I'm very surprised Sandro allowed it in - I assume a merge in rush.

Maybe "a bug" is too much, but the "discouraged" label is important.
We don't want client software to use the C++ API, and you see the
reason today (GEOS is kept back in Debian because a client used the
C++ API).

> Finally, even if GEOS C++ API was/is marked as deprecated, then I ask
> where is the RFC, where is the PSC voting the motion,
> where is the public announcement?

Idea was announced here:
https://lists.osgeo.org/pipermail/geos-devel/2005-April/001375.html

Work was announced here:
https://lists.osgeo.org/pipermail/geos-devel/2005-September/001574.html

First release and recommendation to avoid C++ API was here:
https://lists.osgeo.org/pipermail/geos-devel/2005-November/001619.html

I'm not aware of any motion to explicitly mark C++ API as "deprecated"
but as it's effectively not maintained, it is continuosly "deprecated".

--strk;

From mateusz at loskot.net  Sun Oct  1 12:33:47 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sun, 1 Oct 2017 21:33:47 +0200
Subject: [geos-devel] GEOS C++ API deprecated? (was: PostGIS 2.5 what
 should be minimum requirements?)
In-Reply-To: <20171001184751.ewyxexosya4r55cf@liz>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
Message-ID: <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>

On 1 October 2017 at 20:47, Sandro Santilli <strk at kbt.io> wrote:
> On Sat, Sep 30, 2017 at 09:26:42PM +0200, Mateusz Loskot wrote:
>> /topic changed
>> /cc geos-devel
>>
>> On 30 September 2017 at 20:47, Greg Troxel <gdt at lexort.com> wrote:
>
>> >   ### Using the C++ interface (discouraged)
>> >
>> >   NB: The C++ interface should not be used directly; the GEOS project
>> >   views it as a bug for another program to use the C++ interface or even
>> >   to directly link against the C++ library.
>> > [...]
>
>> > Mateusz Loskot <mateusz at loskot.net> writes:
>>
>> Moreover, this paragraph has no rights to be there or in any official
>> GEOS writing.
>> I'm very surprised Sandro allowed it in - I assume a merge in rush.
>
> Maybe "a bug" is too much, but the "discouraged" label is important.
> We don't want client software to use the C++ API,

So, we decide for clients?
Clients are warned, we don't care what API they decide to use.

> and you see the reason today (GEOS is kept back in Debian because a client used the
> C++ API).

So what? It's still ac client's authors freedom to decide.
If they use the C++ API despite the no stability promise policy,
and they packaged it for a distro, perhaps authors of the software
should not be doing what they are doing if they don't care about
reading the basic info about the library they use.

>> Finally, even if GEOS C++ API was/is marked as deprecated, then I ask
>> where is the RFC, where is the PSC voting the motion,
>> where is the public announcement?
>
> Idea was announced here:
> https://lists.osgeo.org/pipermail/geos-devel/2005-April/001375.html
>
> Work was announced here:
> https://lists.osgeo.org/pipermail/geos-devel/2005-September/001574.html
>
> First release and recommendation to avoid C++ API was here:
> https://lists.osgeo.org/pipermail/geos-devel/2005-November/001619.html

Those are not related to this particular discussion.
Those are about developing the C API, but its introduction had not
deprecated anything. It just made life of developers easier.

> I'm not aware of any motion to explicitly mark C++ API as "deprecated"
> but as it's effectively not maintained, it is continuosly "deprecated".

The C++ API is maintained, but every new release introduces new C++ API
and saying it is becoming deprecated is incorrect.

Unless, Sandro, your aim is to eventually mark C++ API deprecated
and stop installing C++ API libraries and headers.

That will require RFC and that is what I'm debating about.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From mateusz at loskot.net  Sun Oct  1 13:05:43 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sun, 1 Oct 2017 22:05:43 +0200
Subject: [geos-devel] [postgis-devel] GEOS C++ API deprecated? (was:
 PostGIS 2.5 what should be minimum requirements?)
In-Reply-To: <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
Message-ID: <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>

On 1 October 2017 at 21:47, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> On 10/01/2017 09:33 PM, Mateusz Loskot wrote:
>> Unless, Sandro, your aim is to eventually mark C++ API deprecated
>> and stop installing C++ API libraries and headers.
>>
>> That will require RFC and that is what I'm debating about.
>
> To end this debate once and for all,

Mind you, that does not ends anything, it starts it.

> I'd love for the C++ API to be officially deprecated and no longer installed soon after.

As member of GEOS development team, I'm deeply concerned about
taking such comments seriously, by rest of GEOS team.

> As long as libgeos is provided alongside libgeos_c, C++ projects will be tempted to
> keep using it.

So what.

> And from my perspective as a package maintainer, I would
> like for those projects to stop doing that and have them all use the C
> API instead.

Just stop accepting such GEOS-based software for packaging
and keep nagging authors of such projects to switch to GEOS C API,
but do not delegate your problem to GEOS.
It is not GEOS problem that someone uses GEOS C++ API.
GEOS is C/C++ library.

Having said enough, I'm not going to participate in the debate any longer.

I only ask Sandro, as the GEOS leader/PSC member to answer one question:

Do you plan to practically deprecate GEOS C++ API and stop installing
GEOS C++ headers?

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From strk at kbt.io  Sun Oct  1 13:17:59 2017
From: strk at kbt.io (Sandro Santilli)
Date: Sun, 1 Oct 2017 22:17:59 +0200
Subject: [geos-devel] [postgis-devel] GEOS C++ API deprecated? (was:
 PostGIS 2.5 what should be minimum requirements?)
In-Reply-To: <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
Message-ID: <20171001201759.mu2bwhg76pvzrpvu@liz>

On Sun, Oct 01, 2017 at 10:05:43PM +0200, Mateusz Loskot wrote:

> I only ask Sandro, as the GEOS leader/PSC member to answer one question:
> 
> Do you plan to practically deprecate GEOS C++ API and stop installing
> GEOS C++ headers?

I don't have such plan, but it could be an idea to make it more
noisy to use (like print a warning at compile time) or harder to
install (like a ./configure switch to do so).

A look at this list:
https://trac.osgeo.org/geos/wiki/Applications
shows that node-geos, osgEarth and Osmium library
are the only known C++ users.

--strk;

From sebastic at xs4all.nl  Sun Oct  1 13:17:55 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Sun, 1 Oct 2017 22:17:55 +0200
Subject: [geos-devel] [postgis-devel] GEOS C++ API deprecated? (was:
 PostGIS 2.5 what should be minimum requirements?)
In-Reply-To: <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
Message-ID: <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>

On 10/01/2017 10:05 PM, Mateusz Loskot wrote:
> On 1 October 2017 at 21:47, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>> On 10/01/2017 09:33 PM, Mateusz Loskot wrote:
>>> Unless, Sandro, your aim is to eventually mark C++ API deprecated
>>> and stop installing C++ API libraries and headers.
>>>
>>> That will require RFC and that is what I'm debating about.
>>
>> To end this debate once and for all,
> 
> Mind you, that does not ends anything, it starts it.

Yes, you seem to want to keep this debate alive.

>> I'd love for the C++ API to be officially deprecated and no longer installed soon after.
> 
> As member of GEOS development team, I'm deeply concerned about
> taking such comments seriously, by rest of GEOS team.
> 
>> As long as libgeos is provided alongside libgeos_c, C++ projects will be tempted to
>> keep using it.
> 
> So what.

You don't seem to understand the pain it causes downstream.

>> And from my perspective as a package maintainer, I would
>> like for those projects to stop doing that and have them all use the C
>> API instead.
> 
> Just stop accepting such GEOS-based software for packaging
> and keep nagging authors of such projects to switch to GEOS C API,
> but do not delegate your problem to GEOS.

The projects in question have been nagged, but that doesn't solve the
issue. It did cause the libosmium & osm2pgsql authors to drop support
for GEOS. It did not convince the OSSIM developers to switch to the C API.

Not accepting such software for packaging is a disservice to our users
and hence undesirable. Packages are part of a larger ecosystem which is
affected by removals down the tree, e.g. the removal of OSSIM causes the
removal of OTB.

> It is not GEOS problem that someone uses GEOS C++ API.
> GEOS is C/C++ library.

It is however a problem that slows adoption of newer GEOS releases, and
by extension newer PostGIS releases when they depend on features in
those releases.

> Having said enough, I'm not going to participate in the debate any longer.
> 
> I only ask Sandro, as the GEOS leader/PSC member to answer one question:
> 
> Do you plan to practically deprecate GEOS C++ API and stop installing
> GEOS C++ headers?

Why do you care so much about the C++ API? What keeps you from using the
C API?

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From mateusz at loskot.net  Sun Oct  1 13:22:29 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sun, 1 Oct 2017 22:22:29 +0200
Subject: [geos-devel] [postgis-devel] GEOS C++ API deprecated? (was:
 PostGIS 2.5 what should be minimum requirements?)
In-Reply-To: <20171001201759.mu2bwhg76pvzrpvu@liz>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
 <20171001201759.mu2bwhg76pvzrpvu@liz>
Message-ID: <CABUeae_-nSLP3r6XoRyS=4Vdpb3OGs8s_=9NjSD69iS_hzTB8w@mail.gmail.com>

On 1 October 2017 at 22:17, Sandro Santilli <strk at kbt.io> wrote:
> On Sun, Oct 01, 2017 at 10:05:43PM +0200, Mateusz Loskot wrote:
>
>> I only ask Sandro, as the GEOS leader/PSC member to answer one question:
>>
>> Do you plan to practically deprecate GEOS C++ API and stop installing
>> GEOS C++ headers?
>
> I don't have such plan

Sandro,

Thank you!

> , but it could be an idea to make it more
> noisy to use (like print a warning at compile time) or harder to
> install (like a ./configure switch to do so).

To me, you could even stick  "If you use GEOS C++ API, you are an idiot"
on the front page. It does not matter.
What matters is (was) the use of word deprecate.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From mateusz at loskot.net  Sun Oct  1 13:25:00 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sun, 1 Oct 2017 22:25:00 +0200
Subject: [geos-devel] [postgis-devel] GEOS C++ API deprecated? (was:
 PostGIS 2.5 what should be minimum requirements?)
In-Reply-To: <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
 <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>
Message-ID: <CABUeae9+cYcOm7Sob1nAY3tB1UW_BbkTesbRjFhW3ZCMr5e9pA@mail.gmail.com>

On 1 October 2017 at 22:17, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> On 10/01/2017 10:05 PM, Mateusz Loskot wrote:
>> On 1 October 2017 at 21:47, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>> On 10/01/2017 09:33 PM, Mateusz Loskot wrote:
>>>> Unless, Sandro, your aim is to eventually mark C++ API deprecated
>>>> and stop installing C++ API libraries and headers.
>>>>
>>>> That will require RFC and that is what I'm debating about.
>>>
>>> To end this debate once and for all,
>>
>> Mind you, that does not ends anything, it starts it.
>
> Yes, you seem to want to keep this debate alive.

Sandro's answer has just finished it to me.

Please, accept my apologies for the continued annoyance,
could have been killed earlier by Sandro's earlier response.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From lr at pcorp.us  Sun Oct  1 19:49:52 2017
From: lr at pcorp.us (Regina Obe)
Date: Sun, 1 Oct 2017 22:49:52 -0400
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
Message-ID: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>

Okay I have created an RFC6 to officially drop GEOS C++ starting at GEOS 3.8  (so as soon as we release GEOS 3.7 (which should be next month), and flip the switch, we drop the C++ headers as well so developers won't be tempted to use them.

https://trac.osgeo.org/geos/wiki/RFC6


As Bas said already it causes packagers headaches.  It causes PostGIS headaches because users can't easily migrate to newer versions of GEOS because the packages they rely on e.g osm2pgsql (which is going away because we broke ABI with C++ aPI between 3.5 and 3.6).

If we can't support something, let's not provide it period.  It's disservice to everybody.   

I know Sandro you think making it noisy would solve the issue.  Trust me it won't.  There is so much noise with all dependencies people compile with that most developers are trained to ignore them.  
The proof to them is it compiles and passes their tests.  Unless of course you plan to introduce noise in production build, which makes GEOS useless anyway.


It is my understanding that only osm2pgsql (which is dropping GEOS anyway) and osmium which has already dropped GEOS, were the only big projects using the C++ API.  Lets not leave it in as that will just leave the whole open for newer projects to start using it.


As GEOS PSC member I vote +1 for dropping GEOS C++ API.


Thanks,
Regina






From schwehr at gmail.com  Sun Oct  1 20:02:37 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 1 Oct 2017 20:02:37 -0700
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
Message-ID: <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>

-1 (non-PSC).  Please do not drop the C++ the C++ API.  Some folks (e.g. me
at Google) statically link GEOS and ABI compatibility is not an issue.
Every build is a complete system.  Working with C APIs is far harder.  We
end up having to wrap a C++ API back over C APIs.  But do note that I don't
use any of the provided build systems.  It's unclear what you mean in RFC6
by not providing the C++ headers.  I presume that you mean in the install
destination or do you just mean that packagers can drop the C++ header?

It's perfectly reasonable for packages to only depend on the C API and I
think that does make sense for PostGIS.

On Sun, Oct 1, 2017 at 7:49 PM, Regina Obe <lr at pcorp.us> wrote:

> Okay I have created an RFC6 to officially drop GEOS C++ starting at GEOS
> 3.8  (so as soon as we release GEOS 3.7 (which should be next month), and
> flip the switch, we drop the C++ headers as well so developers won't be
> tempted to use them.
>
> https://trac.osgeo.org/geos/wiki/RFC6
>
>
> As Bas said already it causes packagers headaches.  It causes PostGIS
> headaches because users can't easily migrate to newer versions of GEOS
> because the packages they rely on e.g osm2pgsql (which is going away
> because we broke ABI with C++ aPI between 3.5 and 3.6).
>
> If we can't support something, let's not provide it period.  It's
> disservice to everybody.
>
> I know Sandro you think making it noisy would solve the issue.  Trust me
> it won't.  There is so much noise with all dependencies people compile with
> that most developers are trained to ignore them.
> The proof to them is it compiles and passes their tests.  Unless of course
> you plan to introduce noise in production build, which makes GEOS useless
> anyway.
>
>
> It is my understanding that only osm2pgsql (which is dropping GEOS anyway)
> and osmium which has already dropped GEOS, were the only big projects using
> the C++ API.  Lets not leave it in as that will just leave the whole open
> for newer projects to start using it.
>
>
> As GEOS PSC member I vote +1 for dropping GEOS C++ API.
>
>
> Thanks,
> Regina
>
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel




-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171001/e65b2243/attachment.html>

From lr at pcorp.us  Sun Oct  1 20:19:48 2017
From: lr at pcorp.us (Regina Obe)
Date: Sun, 1 Oct 2017 23:19:48 -0400
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
Message-ID: <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>

Kurt,

 

Thanks for responding.  It's still on the table.  I just wanted to air out the issues.  

 

I was referring to install of headers.

 

Sandro et. al,

 

Getting back to your option with ./configure, would it be possible to only allow enabling of the C++ API if it's being built as a static library.  I think our main issue is when it's shared.

So if you link dynamically you'd be forced to use the C-API since you are impacting other possible application use.  If done statically, we don't care cause you are mixing your own soup.

 

The alternative thought is to start earnestly taking care of the ABI compatibility of the C++ API  and ensuring we don't recklessly break it.  

I don't think we should do that unless someone is willing to support the work or fund the extra effort to continually support it.

 

Thanks,

Regina

 

 

 

 

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Kurt Schwehr
Sent: Sunday, October 01, 2017 11:03 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Cc: PostGIS Development Discussion <postgis-devel at lists.osgeo.org>
Subject: Re: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

 

-1 (non-PSC).  Please do not drop the C++ the C++ API.  Some folks (e.g. me at Google) statically link GEOS and ABI compatibility is not an issue.  Every build is a complete system.  Working with C APIs is far harder.  We end up having to wrap a C++ API back over C APIs.  But do note that I don't use any of the provided build systems.  It's unclear what you mean in RFC6 by not providing the C++ headers.  I presume that you mean in the install destination or do you just mean that packagers can drop the C++ header?

 

It's perfectly reasonable for packages to only depend on the C API and I think that does make sense for PostGIS.

 

On Sun, Oct 1, 2017 at 7:49 PM, Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

Okay I have created an RFC6 to officially drop GEOS C++ starting at GEOS 3.8  (so as soon as we release GEOS 3.7 (which should be next month), and flip the switch, we drop the C++ headers as well so developers won't be tempted to use them.

https://trac.osgeo.org/geos/wiki/RFC6


As Bas said already it causes packagers headaches.  It causes PostGIS headaches because users can't easily migrate to newer versions of GEOS because the packages they rely on e.g osm2pgsql (which is going away because we broke ABI with C++ aPI between 3.5 and 3.6).

If we can't support something, let's not provide it period.  It's disservice to everybody.

I know Sandro you think making it noisy would solve the issue.  Trust me it won't.  There is so much noise with all dependencies people compile with that most developers are trained to ignore them.
The proof to them is it compiles and passes their tests.  Unless of course you plan to introduce noise in production build, which makes GEOS useless anyway.


It is my understanding that only osm2pgsql (which is dropping GEOS anyway) and osmium which has already dropped GEOS, were the only big projects using the C++ API.  Lets not leave it in as that will just leave the whole open for newer projects to start using it.


As GEOS PSC member I vote +1 for dropping GEOS C++ API.


Thanks,
Regina





_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel





 

-- 

--

http://schwehr.org

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171001/990b2029/attachment.html>

From strk at kbt.io  Sun Oct  1 22:58:49 2017
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 2 Oct 2017 07:58:49 +0200
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
 <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>
Message-ID: <20171002055849.4bda2djnehcdq7o5@liz>

On Sun, Oct 01, 2017 at 11:19:48PM -0400, Regina Obe wrote:

> Getting back to your option with ./configure, would it be possible to only allow enabling of the C++ API if it's being built as a static library.  I think our main issue is when it's shared.

I was thinking of a more explicit --enable-c++-headers-install
(or similar)

And for the compile-time warning (which could be a first step),
it could be a warning that's spit at compile time and only if you
don't define some macro like:

  #define I_KNOW_I_SHOULD_NOT_BE_USING_GEOS_CPLUSPLUS_API 1
  #include <geos.h>

The warning will give an hint about the macro, ofc :)

> So if you link dynamically you'd be forced to use the C-API since you are impacting other possible application use.  If done statically, we don't care cause you are mixing your own soup.

Static-only C++ library would mean statically linking it in
libgeos-c.so, which is currently dynamically-linked instead.

It could be a useful thing to do, but better gather more
opinions from packagers too.

--strk;

From strk at kbt.io  Sun Oct  1 23:13:29 2017
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 2 Oct 2017 08:13:29 +0200
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
Message-ID: <20171002061328.b7ndywmblsdjb56f@liz>

On Sun, Oct 01, 2017 at 08:02:37PM -0700, Kurt Schwehr wrote:
> -1 (non-PSC).  Please do not drop the C++ the C++ API.  Some folks (e.g. me
> at Google) statically link GEOS and ABI compatibility is not an issue.

Is your @Google project on the GEOS Applications page ?
https://trac.osgeo.org/geos/wiki/Applications
If not, could you add it ?

> Every build is a complete system.  Working with C APIs is far harder.  We
> end up having to wrap a C++ API back over C APIs.

I've been thinking for some time that we could do actually do this in
GEOS directly: a thin C++ wrapper around the C APIs. Sounds like a fun
crazy thing to do...

--strk;

From mateusz at loskot.net  Mon Oct  2 00:13:05 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 2 Oct 2017 09:13:05 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
Message-ID: <CABUeae9D3Nb2hmc2q7Ppku1cWcJp7cjFJgoL_cOYfWJKtwX_kQ@mail.gmail.com>

-1 (as used-to-be-PSC)

> As Bas said already it causes packagers headaches.

So, the solution is to take the toys away from the kids...


Regards,
Mateusz



On 2 October 2017 at 04:49, Regina Obe <lr at pcorp.us> wrote:
> Okay I have created an RFC6 to officially drop GEOS C++ starting at GEOS 3.8  (so as soon as we release GEOS 3.7 (which should be next month), and flip the switch, we drop the C++ headers as well so developers won't be tempted to use them.
>
> https://trac.osgeo.org/geos/wiki/RFC6
>
>
> As Bas said already it causes packagers headaches.  It causes PostGIS headaches because users can't easily migrate to newer versions of GEOS because the packages they rely on e.g osm2pgsql (which is going away because we broke ABI with C++ aPI between 3.5 and 3.6).
>
> If we can't support something, let's not provide it period.  It's disservice to everybody.
>
> I know Sandro you think making it noisy would solve the issue.  Trust me it won't.  There is so much noise with all dependencies people compile with that most developers are trained to ignore them.
> The proof to them is it compiles and passes their tests.  Unless of course you plan to introduce noise in production build, which makes GEOS useless anyway.
>
>
> It is my understanding that only osm2pgsql (which is dropping GEOS anyway) and osmium which has already dropped GEOS, were the only big projects using the C++ API.  Lets not leave it in as that will just leave the whole open for newer projects to start using it.
>
>
> As GEOS PSC member I vote +1 for dropping GEOS C++ API.
>
>
> Thanks,
> Regina
>
>
>
>
>
> _______________________________________________
> postgis-devel mailing list
> postgis-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/postgis-devel



-- 
Mateusz Loskot, http://mateusz.loskot.net

From sebastic at xs4all.nl  Mon Oct  2 00:30:28 2017
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Mon, 02 Oct 2017 09:30:28 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <CABUeae9D3Nb2hmc2q7Ppku1cWcJp7cjFJgoL_cOYfWJKtwX_kQ@mail.gmail.com>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CABUeae9D3Nb2hmc2q7Ppku1cWcJp7cjFJgoL_cOYfWJKtwX_kQ@mail.gmail.com>
Message-ID: <9775f2764c0aa0af26f01d4d4f92ba79@xs4all.nl>

On 2017-10-02 09:13, Mateusz Loskot wrote:
>> As Bas said already it causes packagers headaches.
> 
> So, the solution is to take the toys away from the kids...

Please help us understand your point of view. Why do you want to keep 
the C++ API?

I like Sandros proposal to disable the C++ API by default and provide a 
configure option to (re-)enable it combined with the header to state 
that the developer has considered the downsides of using the C++ API.

It seems to address you concerns too, it doesn't take away your toy, it 
just raises the barrier to using it because its a toy that can easily be 
used to hurt others.

Kind Regards,

Bas

From mateusz at loskot.net  Mon Oct  2 00:35:57 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 2 Oct 2017 09:35:57 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <9775f2764c0aa0af26f01d4d4f92ba79@xs4all.nl>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CABUeae9D3Nb2hmc2q7Ppku1cWcJp7cjFJgoL_cOYfWJKtwX_kQ@mail.gmail.com>
 <9775f2764c0aa0af26f01d4d4f92ba79@xs4all.nl>
Message-ID: <CABUeae_A84t0zH1URysZpHpcxzavV82ZHykDn=A-ETgX6firuA@mail.gmail.com>

On 2 October 2017 at 09:30, Bas Couwenberg <sebastic at xs4all.nl> wrote:
> On 2017-10-02 09:13, Mateusz Loskot wrote:
>>>
>>> As Bas said already it causes packagers headaches.
>>
>> So, the solution is to take the toys away from the kids...
>
>
> Please help us understand your point of view. Why do you want to keep the
> C++ API?

Please, don't try to help me solve my problems.
Those are orthogonal to the matter discussed here.

Since day one, GEOS was C++ library. Fullstop.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From lr at pcorp.us  Mon Oct  2 01:08:34 2017
From: lr at pcorp.us (Regina Obe)
Date: Mon, 2 Oct 2017 04:08:34 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
In-Reply-To: <CABUeae_A84t0zH1URysZpHpcxzavV82ZHykDn=A-ETgX6firuA@mail.gmail.com>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CABUeae9D3Nb2hmc2q7Ppku1cWcJp7cjFJgoL_cOYfWJKtwX_kQ@mail.gmail.com>
 <9775f2764c0aa0af26f01d4d4f92ba79@xs4all.nl>
 <CABUeae_A84t0zH1URysZpHpcxzavV82ZHykDn=A-ETgX6firuA@mail.gmail.com>
Message-ID: <000301d33b55$a50eb5e0$ef2c21a0$@pcorp.us>


On 2 October 2017 at 09:30, Bas Couwenberg <sebastic at xs4all.nl> wrote:
> On 2017-10-02 09:13, Mateusz Loskot wrote:
>>>
>>> As Bas said already it causes packagers headaches.
>>
>> So, the solution is to take the toys away from the kids...
>>
>>
>> Please help us understand your point of view. Why do you want to keep 
>> the
>> C++ API?

Added this back from Bas's comment as I think it's important.
>>  I like Sandros proposal to disable the C++ API by default and provide a configure option to (re-)enable it combined with the header to state that the developer has considered the downsides of using the C++ API.
>> It seems to address you concerns too, it doesn't take away your toy, it just raises the barrier to using it because its a toy that can easily be used to hurt others.

I'm willing to rewrite the RFC to that if all are in agreement.


> Please, don't try to help me solve my problems.
> Those are orthogonal to the matter discussed here.

They are not orthogonal when your use is hurting me.  At that point you've made your problem my problem and I need to solve yours to solve mine.


>  Since day one, GEOS was C++ library. Fullstop.

Since Day One  GEOS was created to serve PostGIS -- a C project.
Sure it has expanded since, but it has expanded not just because it was a C++ library,  but primarily because people found it useful to use.

Now GEOS usefulness  is at jeopardy because people are afraid to use it because when they need to upgrade, it breaks all their other software.

Hey I hate Java, but I still use Jenkins CI because it serves my purposes.  I wasn't out looking for a CI tool written in Java.

Just because you see C++ as a defining feature of GEOS, doesn't mean all other projects that build on it feel the same way.
Sure there are many that do, but we need to come to some comfortable middle ground.


Thanks,
Regina




From mateusz at loskot.net  Mon Oct  2 01:25:32 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 2 Oct 2017 10:25:32 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <000301d33b55$a50eb5e0$ef2c21a0$@pcorp.us>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CABUeae9D3Nb2hmc2q7Ppku1cWcJp7cjFJgoL_cOYfWJKtwX_kQ@mail.gmail.com>
 <9775f2764c0aa0af26f01d4d4f92ba79@xs4all.nl>
 <CABUeae_A84t0zH1URysZpHpcxzavV82ZHykDn=A-ETgX6firuA@mail.gmail.com>
 <000301d33b55$a50eb5e0$ef2c21a0$@pcorp.us>
Message-ID: <CABUeae_E5+sMm37DZqKZJEii3k8qo0_NH5=O53hx+MWoJ7-v9A@mail.gmail.com>

On 2 October 2017 at 10:08, Regina Obe <lr at pcorp.us> wrote:
> On 2 October 2017 at 09:30, Bas Couwenberg <sebastic at xs4all.nl> wrote:
>> On 2017-10-02 09:13, Mateusz Loskot wrote:
>>>>
>>>> As Bas said already it causes packagers headaches.
>>>
>>> So, the solution is to take the toys away from the kids...
>>>
>>>
>>> Please help us understand your point of view. Why do you want to keep
>>> the
>>> C++ API?
>
>> Please, don't try to help me solve my problems.
>> Those are orthogonal to the matter discussed here.
>
> They are not orthogonal when your use is hurting me.
> At that point you've made your problem my problem and I need to solve yours to solve mine.

I only ask to keep deploying all GEOS headers and libraries, that's it.

You think that is dangerous because some projects may prefer to stick
to C++ API,
so you want to prevent them from such freedom of choice.

Please, consider me out of this discussion.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From mateusz at loskot.net  Mon Oct  2 01:34:24 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 2 Oct 2017 10:34:24 +0200
Subject: [geos-devel] [PSC] Commit access removal
Message-ID: <CABUeae_hm33D0eOt65ERLpwqjx2RT2TG4hsciGq8UGfQG9bXEA@mail.gmail.com>

Dear PSC,

Following the procedure outlined in RFC2:

I'd like to give up my privilege of write and commit access to GEOS
repositories.
Please, remove OSGeo ID mloskot from the committers.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From strk at kbt.io  Mon Oct  2 02:57:09 2017
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 2 Oct 2017 11:57:09 +0200
Subject: [geos-devel] [PSC] Commit access removal
In-Reply-To: <CABUeae_hm33D0eOt65ERLpwqjx2RT2TG4hsciGq8UGfQG9bXEA@mail.gmail.com>
References: <CABUeae_hm33D0eOt65ERLpwqjx2RT2TG4hsciGq8UGfQG9bXEA@mail.gmail.com>
Message-ID: <20171002095709.wrmd7knfhxjt2qfx@liz>

On Mon, Oct 02, 2017 at 10:34:24AM +0200, Mateusz Loskot wrote:

> Following the procedure outlined in RFC2:
> 
> I'd like to give up my privilege of write and commit access
> to GEOS repositories.
> Please, remove OSGeo ID mloskot from the committers.

May I ask you why you came to this decision ?

I mean, you can always just not use your powers if you
don't feel like, why giving back the key ?

It'd be a pity to loose one of the most proficient
contributors of GEOS !

--strk;

From mateusz at loskot.net  Mon Oct  2 03:20:22 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 2 Oct 2017 12:20:22 +0200
Subject: [geos-devel] [PSC] Commit access removal
In-Reply-To: <20171002095709.wrmd7knfhxjt2qfx@liz>
References: <CABUeae_hm33D0eOt65ERLpwqjx2RT2TG4hsciGq8UGfQG9bXEA@mail.gmail.com>
 <20171002095709.wrmd7knfhxjt2qfx@liz>
Message-ID: <CABUeae-O7CwbakkQsVcCxP=27-GSQvvFY5drWtxoD8R4dpFXpA@mail.gmail.com>

On 2 October 2017 at 11:57, Sandro Santilli <strk at kbt.io> wrote:
> On Mon, Oct 02, 2017 at 10:34:24AM +0200, Mateusz Loskot wrote:
>
>> Following the procedure outlined in RFC2:
>>
>> I'd like to give up my privilege of write and commit access
>> to GEOS repositories.
>> Please, remove OSGeo ID mloskot from the committers.
>
> May I ask you why you came to this decision ?

Significant difference of opinions.

> I mean, you can always just not use your powers if you
> don't feel like, why giving back the key ?

My policy is to always return any unused keys, also for security reason.

If I ever arrive with any patch for GEOS, I will use PRs.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From strk at kbt.io  Mon Oct  2 04:00:14 2017
From: strk at kbt.io (Sandro Santilli)
Date: Mon, 2 Oct 2017 13:00:14 +0200
Subject: [geos-devel] [PSC] Commit access removal
In-Reply-To: <CABUeae-O7CwbakkQsVcCxP=27-GSQvvFY5drWtxoD8R4dpFXpA@mail.gmail.com>
References: <CABUeae_hm33D0eOt65ERLpwqjx2RT2TG4hsciGq8UGfQG9bXEA@mail.gmail.com>
 <20171002095709.wrmd7knfhxjt2qfx@liz>
 <CABUeae-O7CwbakkQsVcCxP=27-GSQvvFY5drWtxoD8R4dpFXpA@mail.gmail.com>
Message-ID: <20171002110014.44kq5lqkfmb2d5iw@liz>

On Mon, Oct 02, 2017 at 12:20:22PM +0200, Mateusz Loskot wrote:
> On 2 October 2017 at 11:57, Sandro Santilli <strk at kbt.io> wrote:
> > On Mon, Oct 02, 2017 at 10:34:24AM +0200, Mateusz Loskot wrote:
> 
> My policy is to always return any unused keys, also for security reason.

I've removed osgeo userid `mloskot` from the `geos` LDAP group [1]
and from the `core-committers` Gogs GEOS Team [2].
Committers wiki page was updated too [3].

[1] https://www.osgeo.org/cgi-bin/auth/ldap_group.py
[2] https://git.osgeo.org/gogs/org/geos/teams/core-committers
[3] https://trac.osgeo.org/geos/wiki/PSC

Thanks for flying with us !

--strk;

From mateusz at loskot.net  Mon Oct  2 04:06:31 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 2 Oct 2017 13:06:31 +0200
Subject: [geos-devel] [PSC] Commit access removal
In-Reply-To: <20171002110014.44kq5lqkfmb2d5iw@liz>
References: <CABUeae_hm33D0eOt65ERLpwqjx2RT2TG4hsciGq8UGfQG9bXEA@mail.gmail.com>
 <20171002095709.wrmd7knfhxjt2qfx@liz>
 <CABUeae-O7CwbakkQsVcCxP=27-GSQvvFY5drWtxoD8R4dpFXpA@mail.gmail.com>
 <20171002110014.44kq5lqkfmb2d5iw@liz>
Message-ID: <CABUeae_SR4uH18Xg+ctejHmC3bcKHxc2anBUbFUd_scBraec5Q@mail.gmail.com>

On 2 October 2017 at 13:00, Sandro Santilli <strk at kbt.io> wrote:
> On Mon, Oct 02, 2017 at 12:20:22PM +0200, Mateusz Loskot wrote:
>> On 2 October 2017 at 11:57, Sandro Santilli <strk at kbt.io> wrote:
>> > On Mon, Oct 02, 2017 at 10:34:24AM +0200, Mateusz Loskot wrote:
>>
>> My policy is to always return any unused keys, also for security reason.
>
> I've removed osgeo userid `mloskot` from the `geos` LDAP group [1]
> and from the `core-committers` Gogs GEOS Team [2].
> Committers wiki page was updated too [3].
>
> Thanks for flying with us !

Thanks Sandro!

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From geos-trac at osgeo.org  Mon Oct  2 14:30:35 2017
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 02 Oct 2017 21:30:35 -0000
Subject: [geos-devel] [GEOS] #844: Geos 3.6.2 tests failing on ppc64le
	architecture
Message-ID: <049.bac5d574e4e038e8f9c0c157cdfe0b7a@osgeo.org>

#844: Geos 3.6.2 tests failing on ppc64le architecture
------------------------------+--------------------------
 Reporter:  Roberto Oliveira  |      Owner:  geos-devel@…
     Type:  defect            |     Status:  new
 Priority:  major             |  Milestone:  3.6.3
Component:  Default           |    Version:  3.6.2
 Severity:  Unassigned        |   Keywords:
------------------------------+--------------------------
 I am able to build (make) geos on ppc64le architecture but when running
 the test suite (make check), 2 tests are failing.

 The tests are:

 ./tests/ticket/bug398.xml: case1: test1: union(A, B): failed. (0 ms)

 ./tests/general/TestCentroid.xml: case31: test1: getcentroid(A): failed.
 (0 ms)


 I tried it both in Alpine 3.6 and Ubuntu 16.04.3 and in both distros the
 same tests failed.


 The failure log:

 {{{

 Using an overlay tolerance of 3.6e-08
 ./tests/ticket/bug398.xml: case1: test1: union(A, B): failed. (0 ms)
         Description: http://trac.osgeo.org/geos/ticket/398
 Assertion `shellCount <= 1' failed.
         Geometry A: MULTIPOLYGON (((60.0000000000000000
 6.5105151320986412, 44.0044859469790026 11.6931320480208569,
 0.0000000000000000 25.9507790663861222, 0.0000000000000000
 26.8608278557796467, 0.0000000000000000 29.8387923019253307,
 60.0000000000000000 10.3985283676378408, 60.0000000000000000
 7.8021345594223774, 60.0000000000000000 6.6570998796460161,
 60.0000000000000000 6.5105151320986412)), ((43.3161197496508308
 0.0000000000000000, 0.0000000000000000 0.0000000000000000,
 0.0000000000000000 14.0346133423735822, 0.0000000000000000
 17.9226661292310787, 0.0000000000000000 21.5874865260243638,
 34.0258524396557860 6.8981402622972743, 55.3161197496508308
 0.0000000000000000, 50.0044466166182886 0.0000000000000000,
 43.3161197496508308 0.0000000000000000)), ((13.4455725323347899
 36.0000000000000000, 60.0000000000000000 36.0000000000000000,
 60.0000000000000000 16.7944518298098018, 60.0000000000000000
 16.3644011555093201, 60.0000000000000000 14.0439960304547569,
 2.9187843276549756 36.0000000000000000, 11.8945390820010992
 36.0000000000000000, 13.4455725323347899 36.0000000000000000)))
         Geometry B: POLYGON ((50.0044466166182886 0.0000000000000000,
 0.0000000000000000 21.5874865260243638, 0.0000000000000000
 35.7392139719321804, 60.0000000000000000 13.1838946818537934,
 60.0000000000000000 0.0000000000000000, 50.0044466166182886
 0.0000000000000000))
         Expected result: MULTIPOLYGON (((0.0000000000000000
 25.9507790663861222, 0.0000000000000000 26.8608278557796467,
 0.0000000000000000 29.8387923019253307, 0.0000000000000000
 35.7392139719321804, 60.0000000000000000 13.1838946818537934,
 60.0000000000000000 10.3985283676378408, 60.0000000000000000
 7.8021345594223774, 60.0000000000000000 6.6570998796460161,
 60.0000000000000000 6.5105151320986412, 60.0000000000000000
 0.0000000000000000, 55.3161197496508308 0.0000000000000000,
 50.0044466166182886 0.0000000000000000, 43.3161197496508308
 0.0000000000000000, 0.0000000000000000 0.0000000000000000,
 0.0000000000000000 14.0346133423735822, 0.0000000000000000
 17.9226661292310787, 0.0000000000000000 21.5874865260243638,
 0.0000000000000000 25.9507790663861222), (0.0000000000000000
 21.5874865260243638, 34.0258524396557860 6.8981402622972743,
 34.0258524396557931 6.8981402622972734, 0.0000000000000000
 21.5874865260243638)), ((13.4455725323347899 36.0000000000000000,
 60.0000000000000000 36.0000000000000000, 60.0000000000000000
 16.7944518298098018, 60.0000000000000000 16.3644011555093201,
 60.0000000000000000 14.0439960304547569, 2.9187843276549756
 36.0000000000000000, 11.8945390820010992 36.0000000000000000,
 13.4455725323347899 36.0000000000000000)))
         Obtained result: MULTIPOLYGON (((0.0000000000000000
 25.9507790663861222, 0.0000000000000000 26.8608278557796467,
 0.0000000000000000 29.8387923019253307, 0.0000000000000000
 35.7392139719321804, 60.0000000000000000 13.1838946818537934,
 60.0000000000000000 10.3985283676378408, 60.0000000000000000
 7.8021345594223774, 60.0000000000000000 6.6570998796460161,
 60.0000000000000000 6.5105151320986412, 60.0000000000000000
 0.0000000000000000, 55.3161197496508308 0.0000000000000000,
 50.0044466166182886 0.0000000000000000, 43.3161197496508308
 0.0000000000000000, 0.0000000000000000 0.0000000000000000,
 0.0000000000000000 14.0346133423735822, 0.0000000000000000
 17.9226661292310787, 0.0000000000000000 21.5874865260243638,
 0.0000000000000000 25.9507790663861222)), ((13.4455725323347899
 36.0000000000000000, 60.0000000000000000 36.0000000000000000,
 60.0000000000000000 16.7944518298098018, 60.0000000000000000
 16.3644011555093201, 60.0000000000000000 14.0439960304547569,
 2.9187843276549756 36.0000000000000000, 11.8945390820010992
 36.0000000000000000, 13.4455725323347899 36.0000000000000000)))


 ./tests/general/TestCentroid.xml: case31: test1: getcentroid(A): failed.
 (0 ms)
         Description: A - almost degenerate triangle
         Geometry A: POLYGON ((56.5286666666999977 25.2101666667000011,
 56.5290000000000035 25.2104999999999997, 56.5288333332999997
 25.2103333332999995, 56.5286666666999977 25.2101666667000011))
         Expected result: POINT (56.5288333333500006 25.2103333333500004)
         Obtained result: POINT (56.5288333333333313 25.2103333333333346)


 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/844>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From dale.lutz at safe.com  Mon Oct  2 16:59:23 2017
From: dale.lutz at safe.com (Dale Lutz)
Date: Mon, 02 Oct 2017 23:59:23 +0000
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
Message-ID: <CANGtUwPeqKy5e2Rx_d17J+KwCk5NbwnT8ka05D=bpzGVAfLvyg@mail.gmail.com>

As someone who was around in the earliest of days of GEOS, I'd like to
confirm that it was intended as a C++ port of the JTS (generally), and yes,
to be used in PostGIS ultimately.

But from the first day it was a C++ project.

I do realize the nightmare that shared packages impose as things upgrade,
which is why, again, as an old crusty guy that remembers DLL HELL of
Windows, my starting point is that I want to control whatever libraries I'm
going to rely upon.  So we don't rely on any pre-installed GEOS on any
platform we deploy to -- instead we just link to our own library (which we
prefix with our own name so we don't bump into anyone).  We do use the C++
API and so would expect it, in some form, to be available forever more.  I
do realize there is a difference between what gets "installed" in a linux
distribution and what a developer that wants to ship their own has.

The team here suggested that namespacing the C++ API could be a way to
avoid unexpected collisions -- I can ask them for more details if anyone is
interested.

In short, though, we do rely on a C++ API and so I could not, in good
conscience, vote to have it dropped.  A more nuanced proposal, which would
separate those who link statically or "build their own" from those who rely
on things in distributions, might be needed.

Dale
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171002/5b2586e8/attachment.html>

From lr at pcorp.us  Mon Oct  2 17:32:48 2017
From: lr at pcorp.us (Regina Obe)
Date: Mon, 2 Oct 2017 20:32:48 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
In-Reply-To: <CANGtUwPeqKy5e2Rx_d17J+KwCk5NbwnT8ka05D=bpzGVAfLvyg@mail.gmail.com>
References: <CANGtUwPeqKy5e2Rx_d17J+KwCk5NbwnT8ka05D=bpzGVAfLvyg@mail.gmail.com>
Message-ID: <004f01d33bdf$24048c60$6c0da520$@pcorp.us>

Dale,

 

Yes would be interested in hearing what they have to say about name spacing.

 

What's your thoughts on strk's proposition which Bas thought was agreeable from a packaging perspective to just require a configure switch if building with C++

 

https://lists.osgeo.org/pipermail/geos-devel/2017-October/008054.html (listed below this message too)

 

I'm not sure why Mat dismissed it and got so angry.  

 

I'm willing to dispense with the static linking as it sounds like it might be too harsh of a compromise for those who control their whole environment.

Then again would be nice to have that option so that projects that insist on having the C++ api would use the named .so like geos-3.6 and the libgeos-c.so can stand alone with the 3.6++ or 3.7 embedded.

 

But I still think we at least need a configure opt-in to prevent developers from ignoring our ABI warning message.

 

Thanks,

Regina

 

  _____  

On Sun, Oct 01, 2017 at 11:19:48PM -0400, Regina Obe wrote:

 

> Getting back to your option with ./configure, would it be possible to only allow enabling of the C++ API if it's being built as a static library.  I think our main issue is when it's shared.

 

I was thinking of a more explicit --enable-c++-headers-install

(or similar)

 

And for the compile-time warning (which could be a first step),

it could be a warning that's spit at compile time and only if you

don't define some macro like:

 

  #define I_KNOW_I_SHOULD_NOT_BE_USING_GEOS_CPLUSPLUS_API 1

  #include <geos.h>

 

The warning will give an hint about the macro, ofc :)

 

> So if you link dynamically you'd be forced to use the C-API since you are impacting other possible application use.  If done statically, we don't care cause you are mixing your own soup.

 

Static-only C++ library would mean statically linking it in

libgeos-c.so, which is currently dynamically-linked instead.

 

It could be a useful thing to do, but better gather more

opinions from packagers too.

 

--strk;

 

------

 

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Dale Lutz
Sent: Monday, October 02, 2017 7:59 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

 

As someone who was around in the earliest of days of GEOS, I'd like to confirm that it was intended as a C++ port of the JTS (generally), and yes, to be used in PostGIS ultimately.

 

But from the first day it was a C++ project.

 

I do realize the nightmare that shared packages impose as things upgrade, which is why, again, as an old crusty guy that remembers DLL HELL of Windows, my starting point is that I want to control whatever libraries I'm going to rely upon.  So we don't rely on any pre-installed GEOS on any platform we deploy to -- instead we just link to our own library (which we prefix with our own name so we don't bump into anyone).  We do use the C++ API and so would expect it, in some form, to be available forever more.  I do realize there is a difference between what gets "installed" in a linux distribution and what a developer that wants to ship their own has.  

 

The team here suggested that namespacing the C++ API could be a way to avoid unexpected collisions -- I can ask them for more details if anyone is interested.

 

In short, though, we do rely on a C++ API and so I could not, in good conscience, vote to have it dropped.  A more nuanced proposal, which would separate those who link statically or "build their own" from those who rely on things in distributions, might be needed.

 

Dale

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171002/59939265/attachment-0001.html>

From lr at pcorp.us  Mon Oct  2 18:02:38 2017
From: lr at pcorp.us (Regina Obe)
Date: Mon, 2 Oct 2017 21:02:38 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
Message-ID: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>

I've revised the RFC6 so hopefully it's more agreeable to everyone.

 

https://trac.osgeo.org/geos/wiki/RFC6

 

Perhaps in future when we have the manpower or funding to whole-heartedly support ABI compatibility for the C++ API as well, we can lift this guard.

 

Thanks,

Regina

 

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Dale Lutz
Sent: Monday, October 02, 2017 7:59 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

 

As someone who was around in the earliest of days of GEOS, I'd like to confirm that it was intended as a C++ port of the JTS (generally), and yes, to be used in PostGIS ultimately.

 

But from the first day it was a C++ project.

 

I do realize the nightmare that shared packages impose as things upgrade, which is why, again, as an old crusty guy that remembers DLL HELL of Windows, my starting point is that I want to control whatever libraries I'm going to rely upon.  So we don't rely on any pre-installed GEOS on any platform we deploy to -- instead we just link to our own library (which we prefix with our own name so we don't bump into anyone).  We do use the C++ API and so would expect it, in some form, to be available forever more.  I do realize there is a difference between what gets "installed" in a linux distribution and what a developer that wants to ship their own has.  

 

The team here suggested that namespacing the C++ API could be a way to avoid unexpected collisions -- I can ask them for more details if anyone is interested.

 

In short, though, we do rely on a C++ API and so I could not, in good conscience, vote to have it dropped.  A more nuanced proposal, which would separate those who link statically or "build their own" from those who rely on things in distributions, might be needed.

 

Dale

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171002/5e99f595/attachment.html>

From strk at kbt.io  Tue Oct  3 04:33:10 2017
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 3 Oct 2017 13:33:10 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
Message-ID: <20171003113310.cxmd3gcqhon347wf@liz>

On Mon, Oct 02, 2017 at 09:02:38PM -0400, Regina Obe wrote:
> I've revised the RFC6 so hopefully it's more agreeable to everyone.
> https://trac.osgeo.org/geos/wiki/RFC6

That RFC introduces a configure-time switch to enable installing C++
header, but doesn't mention installing C++ library, sounds
inconsistent to me.

Right now, the shared C library dynamically links to the shared C++ library,
so we *must* always install the shared C++ library. But the static C++ library
is only useful to those who can access the headers, so it woulnd't
make sense to install it when not installing headers too.

Maybe it could be:

   ./configure --with-cplusplus-sdk-install
   cmake -DINSTALL_CPLUSPLUS_SDK

But still, packagers will still pass that flag, in order to build
their packages, so I'm really not sure how this would help
discouraging developers from refraining to use the C++ API...

--strk;
 

From lr at pcorp.us  Tue Oct  3 07:33:51 2017
From: lr at pcorp.us (Regina Obe)
Date: Tue, 3 Oct 2017 10:33:51 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
In-Reply-To: <20171003113310.cxmd3gcqhon347wf@liz>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz>
Message-ID: <004e01d33c54$a2817970$e7846c50$@pcorp.us>

Strk,

Is there a way to get rid of the shared C++ library and just have a C library or is that what you were talking about with the static  C++ library.

That extra library I have to carry around annoys me as it's so easy for one to be overwritten and the other to be not.  I'd love to just have one library to worry about that all applications that use the C-API link to.

Not sure how other packagers feel about that.  

So in my perfect vision the following things would happen

1) Package Distributions would never compile with these flags
2) The end effect being, no C++ header, no C++ library to worry about -- just a single .so or .dll  and a C header file
3) People building their own binaries or their own projects that utilize the C++ API will not be able to use GEOS from packages since GEOS packages will not have the C++ API bindings they need. 
 They will have to compile their own GEOS.
This means if they want their product to be shipped with other distributed software and share the same GEOS, they will need to use the C-API.

That way new projects will be clear about what compromise they are making using the C++ API.  
That means they will not be able to use GEOS from packages in their CI integration (e.g. travis, appveyor etc that people commonly do apt-get ...)

Are all in agreement with the above.  If so can you rewrite the RFC to effect that intent.  You have a better idea of what is possible or not with the GEOS code.


Thanks,
Regina


-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Sandro Santilli
Sent: Tuesday, October 03, 2017 7:33 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

On Mon, Oct 02, 2017 at 09:02:38PM -0400, Regina Obe wrote:
> I've revised the RFC6 so hopefully it's more agreeable to everyone.
> https://trac.osgeo.org/geos/wiki/RFC6

That RFC introduces a configure-time switch to enable installing C++ header, but doesn't mention installing C++ library, sounds inconsistent to me.

Right now, the shared C library dynamically links to the shared C++ library, so we *must* always install the shared C++ library. But the static C++ library is only useful to those who can access the headers, so it woulnd't make sense to install it when not installing headers too.

Maybe it could be:

   ./configure --with-cplusplus-sdk-install
   cmake -DINSTALL_CPLUSPLUS_SDK

But still, packagers will still pass that flag, in order to build their packages, so I'm really not sure how this would help discouraging developers from refraining to use the C++ API...

--strk;
 
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Tue Oct  3 08:26:25 2017
From: lr at pcorp.us (Regina Obe)
Date: Tue, 3 Oct 2017 11:26:25 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz> 
Message-ID: <000e01d33c5b$fa90cb00$efb26100$@pcorp.us>

Per strk's requiest, here is my revised RFC.

https://trac.osgeo.org/geos/wiki/RFC6



-----Original Message-----
From: Regina Obe [mailto:lr at pcorp.us] 
Sent: Tuesday, October 03, 2017 10:34 AM
To: 'GEOS Development List' <geos-devel at lists.osgeo.org>
Subject: RE: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

Strk,

Is there a way to get rid of the shared C++ library and just have a C library or is that what you were talking about with the static  C++ library.

That extra library I have to carry around annoys me as it's so easy for one to be overwritten and the other to be not.  I'd love to just have one library to worry about that all applications that use the C-API link to.

Not sure how other packagers feel about that.  

So in my perfect vision the following things would happen

1) Package Distributions would never compile with these flags
2) The end effect being, no C++ header, no C++ library to worry about -- just a single .so or .dll  and a C header file
3) People building their own binaries or their own projects that utilize the C++ API will not be able to use GEOS from packages since GEOS packages will not have the C++ API bindings they need. 
 They will have to compile their own GEOS.
This means if they want their product to be shipped with other distributed software and share the same GEOS, they will need to use the C-API.

That way new projects will be clear about what compromise they are making using the C++ API.  
That means they will not be able to use GEOS from packages in their CI integration (e.g. travis, appveyor etc that people commonly do apt-get ...)

Are all in agreement with the above.  If so can you rewrite the RFC to effect that intent.  You have a better idea of what is possible or not with the GEOS code.


Thanks,
Regina


-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Sandro Santilli
Sent: Tuesday, October 03, 2017 7:33 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

On Mon, Oct 02, 2017 at 09:02:38PM -0400, Regina Obe wrote:
> I've revised the RFC6 so hopefully it's more agreeable to everyone.
> https://trac.osgeo.org/geos/wiki/RFC6

That RFC introduces a configure-time switch to enable installing C++ header, but doesn't mention installing C++ library, sounds inconsistent to me.

Right now, the shared C library dynamically links to the shared C++ library, so we *must* always install the shared C++ library. But the static C++ library is only useful to those who can access the headers, so it woulnd't make sense to install it when not installing headers too.

Maybe it could be:

   ./configure --with-cplusplus-sdk-install
   cmake -DINSTALL_CPLUSPLUS_SDK

But still, packagers will still pass that flag, in order to build their packages, so I'm really not sure how this would help discouraging developers from refraining to use the C++ API...

--strk;
 
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel


From howard at hobu.co  Tue Oct  3 10:37:15 2017
From: howard at hobu.co (Howard Butler)
Date: Tue, 3 Oct 2017 12:37:15 -0500
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
In-Reply-To: <004e01d33c54$a2817970$e7846c50$@pcorp.us>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz>
 <004e01d33c54$a2817970$e7846c50$@pcorp.us>
Message-ID: <3496F4A7-3159-4714-9D83-258D4B5DDC30@hobu.co>

> 
> On Oct 3, 2017, at 9:33 AM, Regina Obe <lr at pcorp.us> wrote:
> 
> Strk,
> 
> Is there a way to get rid of the shared C++ library and just have a C library or is that what you were talking about with the static  C++ library.
> 
> That extra library I have to carry around annoys me as it's so easy for one to be overwritten and the other to be not.  I'd love to just have one library to worry about that all applications that use the C-API link to.
> 
> Not sure how other packagers feel about that.  
> 
> So in my perfect vision the following things would happen
> 
> 1) Package Distributions would never compile with these flags
> 2) The end effect being, no C++ header, no C++ library to worry about -- just a single .so or .dll  and a C header file
> 3) People building their own binaries or their own projects that utilize the C++ API will not be able to use GEOS from packages since GEOS packages will not have the C++ API bindings they need. 
> They will have to compile their own GEOS.
> This means if they want their product to be shipped with other distributed software and share the same GEOS, they will need to use the C-API.
> 
> That way new projects will be clear about what compromise they are making using the C++ API.  
> That means they will not be able to use GEOS from packages in their CI integration (e.g. travis, appveyor etc that people commonly do apt-get ...)
> 
> Are all in agreement with the above.  If so can you rewrite the RFC to effect that intent.  You have a better idea of what is possible or not with the GEOS code.

I'm -1 on this. The library's contract with its users is not to take API away. The contract with the C++ API was you as a developer were responsible for ABI compatibility, not the project. The contract was never that the project reserves the right to arbitrarily pull the rug out from underneath you because it isn't convenient to one ecosystem of tools that can't keep their linkages straight.

What if we were to do the same thing with GDAL -- take away GDAL's C++ API which you were not supposed to use, but we put it out there anyway, because it was inconvenient for some of the open source packaging systems? Not possible because too many open source things in Deb/RH use GDAL C++ API, right? 

Defaulting the C++ API installation to off as the RFC currently proposes effectively removes it.

From sebastic at xs4all.nl  Tue Oct  3 10:52:21 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Tue, 3 Oct 2017 19:52:21 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <3496F4A7-3159-4714-9D83-258D4B5DDC30@hobu.co>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz>
 <004e01d33c54$a2817970$e7846c50$@pcorp.us>
 <3496F4A7-3159-4714-9D83-258D4B5DDC30@hobu.co>
Message-ID: <66fcbe80-1618-25e7-6632-c84f5c38fa55@xs4all.nl>

On 10/03/2017 07:37 PM, Howard Butler wrote:
> What if we were to do the same thing with GDAL -- take away GDAL's C++ API which you were not supposed to use, but we put it out there anyway, because it was inconvenient for some of the open source packaging systems? Not possible because too many open source things in Deb/RH use GDAL C++ API, right? 

Those projects would be forced to adopt the C API just like for GEOS.
And that would make life for distributions much easier as well,
especially since GDAL has many more reverse dependencies than GEOS.
Because of the importance of GDAL to most projects, they will be
sufficiently motivated to port their project to use the C API.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From strk at kbt.io  Tue Oct  3 11:32:15 2017
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 3 Oct 2017 20:32:15 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
In-Reply-To: <004e01d33c54$a2817970$e7846c50$@pcorp.us>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz>
 <004e01d33c54$a2817970$e7846c50$@pcorp.us>
Message-ID: <20171003183215.ier3cx2xbzngvdzl@liz>

On Tue, Oct 03, 2017 at 10:33:51AM -0400, Regina Obe wrote:

> Is there a way to get rid of the shared C++ library and just have a C library or is that what you were talking about with the static  C++ library.

That's what I'm talking about with the static-only C++ library.
The C library would then _include_ (statically link to) the
C++ library.

I'm not sure about the consequences of that though (guess we'd
need more symbols hiding or it could still be possible for
different versions of the embedded C++ library to be confused
during code execution).

--strk;

From lr at pcorp.us  Tue Oct  3 11:32:23 2017
From: lr at pcorp.us (Regina Obe)
Date: Tue, 3 Oct 2017 14:32:23 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at
	GEOS	3.8
In-Reply-To: <66fcbe80-1618-25e7-6632-c84f5c38fa55@xs4all.nl>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz>
 <004e01d33c54$a2817970$e7846c50$@pcorp.us>
 <3496F4A7-3159-4714-9D83-258D4B5DDC30@hobu.co>
 <66fcbe80-1618-25e7-6632-c84f5c38fa55@xs4all.nl>
Message-ID: <004f01d33c75$f53f8fa0$dfbeaee0$@pcorp.us>

>> On 10/03/2017 07:37 PM, Howard Butler wrote:
>> What if we were to do the same thing with GDAL -- take away GDAL's C++ API which you were not supposed to use, but we put it out there anyway, because it was inconvenient for some of the open source packaging systems? Not possible because too many open source things in Deb/RH use GDAL C++ API, right? 

Just curious how many projects that rely on GDAL use the C++ API are distributed by packages.

> Those projects would be forced to adopt the C API just like for GEOS.
> And that would make life for distributions much easier as well, especially since GDAL has many more reverse dependencies than GEOS.
>  Because of the importance of GDAL to most projects, they will be sufficiently motivated to port their project to use the C API.

> Kind Regards,

> Bas
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1 _______________________________________________

I will say this much.  Right now we don't have too many projects that are distributed using a shared GEOS library not using the C-API.

The ones mentioned -- Kurt  (Google) and Dale (Safe)
Both package their own GEOS and don't trust their stuff sharing libraries with other software.
They know the risks, asking them to add an extra switch to use the C++ API is not the same as taking away the C++ API.  Your comment is a bit exaggerated.

I put lots of configure crap when I build GDAL just cause I have to do something like --with-sqlite=... doesn't mean my ability to use SQLite is essentially taken away from  me .

The other GEOS that are shared, use the C-API and we really want to keep it that way since we have the bandwidth to support that.  
We don't want to get into a state like GDAL where lots of projects are happily being distributed and using the GEOS C++ API with no guarantee of long-term stability.

If GEOS can not guarantee the same kind of longevity of the C++ API/ABI that it can for the C-API, it shouldn't be 
encouraging developers to use it by allowing it in its default behavior. 

BTW that's the same reason I shot down the idea of a shared liblwgeom, 
I knew that we as PostGIS project did not have the bandwidth to support it as a shared thing, so we didn't want anyone using it but us.
And if you really went thru the effort to do so by cd'ing into our folder, you're clearly  on your own.


Thanks,
Regina






From sebastic at xs4all.nl  Tue Oct  3 11:48:46 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Tue, 3 Oct 2017 20:48:46 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
	3.8
In-Reply-To: <004f01d33c75$f53f8fa0$dfbeaee0$@pcorp.us>
References: <006201d33be3$4ee93e40$ecbbbac0$@pcorp.us>
 <20171003113310.cxmd3gcqhon347wf@liz>
 <004e01d33c54$a2817970$e7846c50$@pcorp.us>
 <3496F4A7-3159-4714-9D83-258D4B5DDC30@hobu.co>
 <66fcbe80-1618-25e7-6632-c84f5c38fa55@xs4all.nl>
 <004f01d33c75$f53f8fa0$dfbeaee0$@pcorp.us>
Message-ID: <97a891a5-e2c5-a29c-9020-3c87a6955b4f@xs4all.nl>

On 10/03/2017 08:32 PM, Regina Obe wrote:
> Just curious how many projects that rely on GDAL use the C++ API are distributed by packages.

In Debian most packages use at least one GDAL C++ symbol:

 dans-gdal-scripts  C++
 fiona              C++
 gazebo             C++
 gmt                C
 imposm             C
 libcitygml         C++
 liblas             C++
 libosmium          C
 mapcache           C
 mapnik             C++
 mapproxy           C
 mapserver          C
 merkaartor         C++
 mysql-workbench    C++
 ncl                C
 node-srs           C++
 octave-mapping     C++
 openscenegraph     C++
 pdal               C++
 pgsql-ogr-fdw      C
 postgis            C
 pprepair           C++
 prepair            C++
 python-django      C
 qlandkartegt       C++
 qmapshack          C++
 rasterio           C++
 saga               C++
 sumo               C++
 thuban             C++
 vtk6               C++
 xastir             C

 grass              C
 openscenegraph-3.4 C++
 osmcoastline       C++
 otb                C++
 pktools            C++
 pyosmium           C

 libgdal-grass      C++
 osgearth           C++
 qgis               C++

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From lr at pcorp.us  Tue Oct  3 12:44:03 2017
From: lr at pcorp.us (Regina Obe)
Date: Tue, 3 Oct 2017 15:44:03 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Require explicit configure
	to use the C++ API
Message-ID: <005801d33c7f$f7efaff0$e7cf0fd0$@pcorp.us>

After much heated argument on this mailing list and PostGIS IRC, none of the other PSC members seem interested in changing GEOS at all.

Hobu booed, strk didn't want to say anything, mloskot booed, pramsey was silent.

Dale and Keith ironically seemed to be the most agreeable folks using GEOS.

Hobu and Mloskot feel strongly that  GEOS C++ API is a major feature of GEOS and the key feature and if packagers feel strongly against allowing C++ API GEOS projects in the packages, 
they should stop shipping the libgeos++-dev so users trying to use those will not be able to compile said projects against  a packaged GEOS.

I have marked the RFC as failed so it's there, we know we officially discussed it,  and officially shot it down.

https://trac.osgeo.org/geos/wiki/RFC6

Sorry for this waste of everyone's time,

Regina


-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Sandro Santilli
Sent: Tuesday, October 03, 2017 2:32 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

On Tue, Oct 03, 2017 at 10:33:51AM -0400, Regina Obe wrote:

> Is there a way to get rid of the shared C++ library and just have a C library or is that what you were talking about with the static  C++ library.

That's what I'm talking about with the static-only C++ library.
The C library would then _include_ (statically link to) the
C++ library.

I'm not sure about the consequences of that though (guess we'd need more symbols hiding or it could still be possible for different versions of the embedded C++ library to be confused during code execution).

--strk;
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel


From schwehr at gmail.com  Tue Oct  3 15:07:30 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 3 Oct 2017 15:07:30 -0700
Subject: [geos-devel] [postgis-devel] RFC6 - Require explicit configure
 to use the C++ API
In-Reply-To: <005801d33c7f$f7efaff0$e7cf0fd0$@pcorp.us>
References: <005801d33c7f$f7efaff0$e7cf0fd0$@pcorp.us>
Message-ID: <CACmBxytFwtnh-QftuyMx7QpGoGQ6KHNDhnMirDt1T5bUt8=qjA@mail.gmail.com>

I don't consider it a waste of time.  Thank you for taking the time for the
RFC and especially for the summary.

On Oct 3, 2017 12:44 PM, "Regina Obe" <lr at pcorp.us> wrote:

> After much heated argument on this mailing list and PostGIS IRC, none of
> the other PSC members seem interested in changing GEOS at all.
>
> Hobu booed, strk didn't want to say anything, mloskot booed, pramsey was
> silent.
>
> Dale and Keith ironically seemed to be the most agreeable folks using GEOS.
>
> Hobu and Mloskot feel strongly that  GEOS C++ API is a major feature of
> GEOS and the key feature and if packagers feel strongly against allowing
> C++ API GEOS projects in the packages,
> they should stop shipping the libgeos++-dev so users trying to use those
> will not be able to compile said projects against  a packaged GEOS.
>
> I have marked the RFC as failed so it's there, we know we officially
> discussed it,  and officially shot it down.
>
> https://trac.osgeo.org/geos/wiki/RFC6
>
> Sorry for this waste of everyone's time,
>
> Regina
>
>
> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Sandro Santilli
> Sent: Tuesday, October 03, 2017 2:32 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS
> 3.8
>
> On Tue, Oct 03, 2017 at 10:33:51AM -0400, Regina Obe wrote:
>
> > Is there a way to get rid of the shared C++ library and just have a C
> library or is that what you were talking about with the static  C++ library.
>
> That's what I'm talking about with the static-only C++ library.
> The C library would then _include_ (statically link to) the
> C++ library.
>
> I'm not sure about the consequences of that though (guess we'd need more
> symbols hiding or it could still be possible for different versions of the
> embedded C++ library to be confused during code execution).
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171003/0b9d6481/attachment.html>

From lr at pcorp.us  Tue Oct  3 16:45:16 2017
From: lr at pcorp.us (Regina Obe)
Date: Tue, 3 Oct 2017 19:45:16 -0400
Subject: [geos-devel] [postgis-devel] RFC6 - Require explicit configure
	to use the C++ API
In-Reply-To: <CACmBxytFwtnh-QftuyMx7QpGoGQ6KHNDhnMirDt1T5bUt8=qjA@mail.gmail.com>
References: <005801d33c7f$f7efaff0$e7cf0fd0$@pcorp.us>
 <CACmBxytFwtnh-QftuyMx7QpGoGQ6KHNDhnMirDt1T5bUt8=qjA@mail.gmail.com>
Message-ID: <000001d33ca1$aa631de0$ff2959a0$@pcorp.us>

Glad it wasn't totally wasted effort and thanks for being so agreeable and explaining your use. 

 I also apologize for mistyping your name.

 

 

Thanks,

Regina

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Kurt Schwehr
Sent: Tuesday, October 03, 2017 6:08 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Require explicit configure to use the C++ API

 

I don't consider it a waste of time.  Thank you for taking the time for the RFC and especially for the summary. 

 

On Oct 3, 2017 12:44 PM, "Regina Obe" <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

After much heated argument on this mailing list and PostGIS IRC, none of the other PSC members seem interested in changing GEOS at all.

Hobu booed, strk didn't want to say anything, mloskot booed, pramsey was silent.

Dale and Keith ironically seemed to be the most agreeable folks using GEOS.

Hobu and Mloskot feel strongly that  GEOS C++ API is a major feature of GEOS and the key feature and if packagers feel strongly against allowing C++ API GEOS projects in the packages,
they should stop shipping the libgeos++-dev so users trying to use those will not be able to compile said projects against  a packaged GEOS.

I have marked the RFC as failed so it's there, we know we officially discussed it,  and officially shot it down.

https://trac.osgeo.org/geos/wiki/RFC6

Sorry for this waste of everyone's time,

Regina


-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org <mailto:geos-devel-bounces at lists.osgeo.org> ] On Behalf Of Sandro Santilli
Sent: Tuesday, October 03, 2017 2:32 PM
To: GEOS Development List <geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> >
Subject: Re: [geos-devel] [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

On Tue, Oct 03, 2017 at 10:33:51AM -0400, Regina Obe wrote:

> Is there a way to get rid of the shared C++ library and just have a C library or is that what you were talking about with the static  C++ library.

That's what I'm talking about with the static-only C++ library.
The C library would then _include_ (statically link to) the
C++ library.

I'm not sure about the consequences of that though (guess we'd need more symbols hiding or it could still be possible for different versions of the embedded C++ library to be confused during code execution).

--strk;
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171003/ac863d37/attachment.html>

From gdt at lexort.com  Tue Oct  3 17:15:05 2017
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 03 Oct 2017 20:15:05 -0400
Subject: [geos-devel] [postgis-devel]  GEOS C++ API deprecated?
In-Reply-To: <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl> (Sebastiaan
 Couwenberg's message of "Sun, 1 Oct 2017 22:17:55 +0200")
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
 <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>
Message-ID: <smua817ix9y.fsf@linuxpal.mit.edu>


I realize this is basically over now, but as someone who feels like a
bit of an instigator, a few comments.

Sebastiaan Couwenberg <sebastic at xs4all.nl> writes:

> On 10/01/2017 10:05 PM, Mateusz Loskot wrote:
>> On 1 October 2017 at 21:47, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>> On 10/01/2017 09:33 PM, Mateusz Loskot wrote:

>> Just stop accepting such GEOS-based software for packaging
>> and keep nagging authors of such projects to switch to GEOS C API,
>> but do not delegate your problem to GEOS.

Mateusz,

I really do not understand your view.  One one hand you seem very
against labeling the C++ API deprecated.  But on the other hand you say
that packagers should consider any package that uses the C++ API
sufficiently broken or wrong that it should be rejected from the
packaging system.

To me, either it's ok to use, or it's not really ok to use.

> The projects in question have been nagged, but that doesn't solve the
> issue. It did cause the libosmium & osm2pgsql authors to drop support
> for GEOS. It did not convince the OSSIM developers to switch to the C API.

all,

As a packager, multiple goals have to be satisfied at once.  The main
one is that with minimal duplicated copies, all the packages have to
build.  Another is that packages do not have included source copies of
other packages, because that slows down patching for vulnerabilities.

Overall, this leads to API stability being important, and that really
isn't about packaging.  The fact that we are talking about a C++ API is
not the point; the basic issue is that an API changed in a way that a
depending program failed to build, and it was not trivial to fix.  Then
that depending program did not quickly issue a release that worked with
the new API.  There was no new major release, and no patch release of
the previous version with an adaptation for the new API.  This shouldn't
be read as a criticism of osm2pgsql; it's a reflection of limited time
budgets and the fact that API breaks really do have a cost.

Packages change APIs (by removing functions) all the time.  But usually
they mark them deprecated and have a new way that's relatively easy to
adapt to, and depending packages mostly adapt and can build with either
for a time.

So I had to essentially decide:

  1) do I update geos and break osm2pgsql, or

  2) do I leave geos and let osm2pgsql still work, at the expense of
  other packages having to use old geos, or

  3) do I reimport the geos package as geos35 and namespace it to allow
  simultaneous installation with the 3.6 version, and have some way for
  osm2pgsql to link against the 3.5 version instead.

I decided (3) was too much work, absent someone paying for labor hours.
(1) did not seem reasonable for the first few months.  After most of a
year (2) did not seem reasonable any longer.  So to decide between 1 and
2, the question arises:

  which of these packages is out of line?

which leads me to ask

   Is it a geos bug that the C++ API changes in ways that break programs
   that use it?

   Is it a bug for other programs to use the C++ API at all?

   Is it a bug in osm2pgsql that a new version did not appear within 3
   months, such that the new osm2pgsql works with the new version of
   geos (perhaps by not calling it at all)?

and hence to poke geos to declare its norms.

We didn't really resolve this -- only deciding not to drop the C++ API.
But as I read the comments, with my own spin, it's generally:

  programs shouldn't really use the C++ API.  But if they do, they have
  to cope with changes, because we aren't making stability guarantees.
  So packagers should feel free to update geos to a release with an
  API-breaking change after a few months, and if any depending package
  breaks, it's their fault because they should have had a new release
  that can use the new API.

> Not accepting such software for packaging is a disservice to our users
> and hence undesirable. Packages are part of a larger ecosystem which is
> affected by removals down the tree, e.g. the removal of OSSIM causes the
> removal of OTB.

Agreed.  It's all about what best serves the users of the packaging system.

>> It is not GEOS problem that someone uses GEOS C++ API.
>> GEOS is C/C++ library.

It is a problem to have APIs that are not stable, regardless of
language.  Others, once they realize this, will try not to use APIs at
all :-)


[ notion of not installing C++ API by default ]

I don't like this at all.  It doesn't address the real issue -- other
packages can still say they need to use the C++ API.  And it just makes
more packages -- one with the C API, and then a 2nd one that adds the
C++ API -- for no real progress.


Note that in all of this I haven't talked about ABI compatibility, only
API.  ABI is much less of a big deal; libraries bump their shlib major
number relatively often.  It does mean that all packages that depend on
the ABI-changed package have to be recompiled, but that's far easier
than having to be rewritten, and it's a fairly normal occurence in
packaging.

Greg
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171003/5570c512/attachment-0001.sig>

From gdt at lexort.com  Tue Oct  3 17:34:38 2017
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 03 Oct 2017 20:34:38 -0400
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <20171002055849.4bda2djnehcdq7o5@liz> (Sandro Santilli's message
 of "Mon, 2 Oct 2017 07:58:49 +0200")
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
 <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>
 <20171002055849.4bda2djnehcdq7o5@liz>
Message-ID: <smu60bviwdd.fsf@linuxpal.mit.edu>


(assuming the questions of whether to make any changes to the install,
and to the README, are still on the table)

Sandro Santilli <strk at kbt.io> writes:

> On Sun, Oct 01, 2017 at 11:19:48PM -0400, Regina Obe wrote:
>
>> Getting back to your option with ./configure, would it be possible
>> to only allow enabling of the C++ API if it's being built as a
>> static library.  I think our main issue is when it's shared.
>
> I was thinking of a more explicit --enable-c++-headers-install
> (or similar)

So when I create a geos package, do I turn on that switch or not?  When
people build things from source, they can set switches.  But packages
have to choose a way for all users, and it's messy to create multiple
packages that behave like options being off and on.

And, installing the header does not cause the harm.  It's others using
it.  I don't see geos having a install-headers switch causing other
packages to decide not to use the C++ API.

> And for the compile-time warning (which could be a first step),
> it could be a warning that's spit at compile time and only if you
> don't define some macro like:
>
>   #define I_KNOW_I_SHOULD_NOT_BE_USING_GEOS_CPLUSPLUS_API 1
>   #include <geos.h>
>
> The warning will give an hint about the macro, ofc :)

I actually kind of like this; perhaps even

#define WE_ACKNOWLEDGE_THAT_THE_C++_API_IS_UNSTABLE

or it doesn't appear.  But really this is all playing games, and should
just be clear in the README.

My real point is that if geos means:

  We do not make any guarantees about the C++ API being stable across
  major releases.  Therefore, any program that uses the C++ API accepts
  an obligation to adapt to whatever new API appears, and to issue
  updated releases (on all upstream stable branches) within 3 months of
  the API-breaking geos release.

it should say it.

>> So if you link dynamically you'd be forced to use the C-API since
>> you are impacting other possible application use.  If done
>> statically, we don't care cause you are mixing your own soup.
>
> Static-only C++ library would mean statically linking it in
> libgeos-c.so, which is currently dynamically-linked instead.
>
> It could be a useful thing to do, but better gather more
> opinions from packagers too.

Static linking is discouraged, because it means that if you have a
security issue, you can't just fix it and replace that package, but you
have to rebuild anything that ended up with the static library, which
means that you need a way to keep track of that.

And, at least pkgsrc wants to be able to build all packages starting
from nothing, so statically linking an old version imposes the need to
have the old version also in the packaging system.  (I get it that a
depending package built before the geos upgrade would still work.)

There are packaging systems that make each package be essentially its
own chroot with all the dependencies, so there are no conflicts for
wanting different versions.  But I view that as a reaction to deal with
API instability, rather than a desirable outcome.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171003/eae08281/attachment.sig>

From lr at pcorp.us  Tue Oct  3 18:17:16 2017
From: lr at pcorp.us (Regina Obe)
Date: Tue, 3 Oct 2017 21:17:16 -0400
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <smu60bviwdd.fsf@linuxpal.mit.edu>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
 <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>
 <20171002055849.4bda2djnehcdq7o5@liz> <smu60bviwdd.fsf@linuxpal.mit.edu>
Message-ID: <000101d33cae$84ef2ec0$8ecd8c40$@pcorp.us>

Well README on this page reads okay to me and says 

https://git.osgeo.org/gogs/geos/geos#client-applications  no stability offered for C++ API.
Anything you want changed there?


All my suggested changes to install Hobu and Mat booed so I think install changes are off the table.

I think the only other thing we can do is remind people in every release note that if they are using the C++ API they need to check their code before using it.  But not sure how many folks actually read release notes.

I really wanted it just turned off by default so lazy people who refuse to read wouldn't be using the C++ API, because in order to know how to use the C++ API, you have to read our warning first :)

So much for that effort.


Thanks,
Regina





-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Greg Troxel
Sent: Tuesday, October 03, 2017 8:35 PM
To: Sandro Santilli <strk at kbt.io>
Cc: GEOS Development List <geos-devel at lists.osgeo.org>; 'PostGIS Development Discussion' <postgis-devel at lists.osgeo.org>
Subject: Re: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8


(assuming the questions of whether to make any changes to the install, and to the README, are still on the table)

Sandro Santilli <strk at kbt.io> writes:

> On Sun, Oct 01, 2017 at 11:19:48PM -0400, Regina Obe wrote:
>
>> Getting back to your option with ./configure, would it be possible to 
>> only allow enabling of the C++ API if it's being built as a static 
>> library.  I think our main issue is when it's shared.
>
> I was thinking of a more explicit --enable-c++-headers-install (or 
> similar)

So when I create a geos package, do I turn on that switch or not?  When people build things from source, they can set switches.  But packages have to choose a way for all users, and it's messy to create multiple packages that behave like options being off and on.

And, installing the header does not cause the harm.  It's others using it.  I don't see geos having a install-headers switch causing other packages to decide not to use the C++ API.

> And for the compile-time warning (which could be a first step), it 
> could be a warning that's spit at compile time and only if you don't 
> define some macro like:
>
>   #define I_KNOW_I_SHOULD_NOT_BE_USING_GEOS_CPLUSPLUS_API 1
>   #include <geos.h>
>
> The warning will give an hint about the macro, ofc :)

I actually kind of like this; perhaps even

#define WE_ACKNOWLEDGE_THAT_THE_C++_API_IS_UNSTABLE

or it doesn't appear.  But really this is all playing games, and should just be clear in the README.

My real point is that if geos means:

  We do not make any guarantees about the C++ API being stable across
  major releases.  Therefore, any program that uses the C++ API accepts
  an obligation to adapt to whatever new API appears, and to issue
  updated releases (on all upstream stable branches) within 3 months of
  the API-breaking geos release.

it should say it.

>> So if you link dynamically you'd be forced to use the C-API since you 
>> are impacting other possible application use.  If done statically, we 
>> don't care cause you are mixing your own soup.
>
> Static-only C++ library would mean statically linking it in 
> libgeos-c.so, which is currently dynamically-linked instead.
>
> It could be a useful thing to do, but better gather more opinions from 
> packagers too.

Static linking is discouraged, because it means that if you have a security issue, you can't just fix it and replace that package, but you have to rebuild anything that ended up with the static library, which means that you need a way to keep track of that.

And, at least pkgsrc wants to be able to build all packages starting from nothing, so statically linking an old version imposes the need to have the old version also in the packaging system.  (I get it that a depending package built before the geos upgrade would still work.)

There are packaging systems that make each package be essentially its own chroot with all the dependencies, so there are no conflicts for wanting different versions.  But I view that as a reaction to deal with API instability, rather than a desirable outcome.


From dale.lutz at safe.com  Tue Oct  3 20:17:05 2017
From: dale.lutz at safe.com (Dale Lutz)
Date: Wed, 04 Oct 2017 03:17:05 +0000
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <CANGtUwNHemx6XnR83eE3JkfHj+inU81rvQz0q9fL1mxSUVxZeA@mail.gmail.com>
References: <CANGtUwNHemx6XnR83eE3JkfHj+inU81rvQz0q9fL1mxSUVxZeA@mail.gmail.com>
Message-ID: <CANGtUwPX6-GYNy=BxsP6O_XaR=LQG8Oo_-rwTXR7EO+OToF0vw@mail.gmail.com>

I see that the issue has now dropped and I apologize if it was because I
mis-addressed my note below from earlier today.

But, just for the record, I want it to be known that we're cool with
whatever decision is taken.  So my attempt at an earlier response is pasted
below.

Dale

---------- Forwarded message ---------
From: Dale Lutz <dale.lutz at safe.com>
Date: Tue, Oct 3, 2017 at 1:40 PM
Subject: Re: [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
To: <geos-devel-request at lists.osgeo.org>


The team here has advised looked over the situation and the constraints (as
others have written in this list), and concluded that the proposal at
https://trac.osgeo.org/geos/wiki/RFC6 seems reasonable.  The C++ headers
become clearly "internal use only" but still available for sufficiently
adventurous souls (such as we self-define as).

So +1 from us.

Dale
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171004/93c7b36f/attachment.html>

From lr at pcorp.us  Tue Oct  3 22:08:37 2017
From: lr at pcorp.us (Regina Obe)
Date: Wed, 4 Oct 2017 01:08:37 -0400
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
	configure switch to install the c++ headers and SDK
Message-ID: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>

Dale,

 

Thanks. Yes I missed this note.  I've revised the subject line above to make it clear what my proposal was changed to after input from you and Kurt.

 

The new proposal - https://trac.osgeo.org/geos/wiki/RFC6  is to keep the C++ API but require people building to have a –with-cplusplus-sdk-install to enable it.

 

So far we have the following PSC Votes

 

Dale +1

Regina + 1

Hobu -1

Paul Ramsey hasn't voted

Sandro Santilli hasn't voted

 

Mat gave his -1 but he doesn't count cause he's not on the PSC :)

But I do see that Mat updated the ReadMe  -- thanks Mat -  https://git.osgeo.org/gogs/geos/geos/commit/18ad844411880b3b15507ff21c7a452ab8694cc2 

 

I should add now that osm2pgsql and osmium are leaving the GEOS camp and it is my understanding 

they were the only widely used projects using the GEOS C++ API now is a perfect time to make this motion

before any future projects start relying on the C++ API without reading the fine print and get widely adopted.

 

I do not trust people to read fine print, cause hell I don't until something doesn't work and I assume everyone is like me :)

 

If in the future we can find a way to provide the same stability promise for C++ API as we do for C API then I'm all for allowing the C++ API to be by default available without requiring any extra configure.

 

According to RFC1 – it says the motion can not pass    https://trac.osgeo.org/geos/wiki/RFC1  with a -1 and I have to give Hobu a chance to debate his point :)

 

"Respondents may vote "-1" to veto a proposal, but must provide clear reasoning and alternate approaches to resolving the problem within the two days."

 

So I'd like to hear Hobu's alternative suggestions.

 

 

Thanks,

Regina

 

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Dale Lutz
Sent: Tuesday, October 03, 2017 11:17 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

 

I see that the issue has now dropped and I apologize if it was because I mis-addressed my note below from earlier today.


But, just for the record, I want it to be known that we're cool with whatever decision is taken.  So my attempt at an earlier response is pasted below.

 

Dale

---------- Forwarded message ---------
From: Dale Lutz <dale.lutz at safe.com <mailto:dale.lutz at safe.com> >
Date: Tue, Oct 3, 2017 at 1:40 PM
Subject: Re: [postgis-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
To: <geos-devel-request at lists.osgeo.org <mailto:geos-devel-request at lists.osgeo.org> >

 

The team here has advised looked over the situation and the constraints (as others have written in this list), and concluded that the proposal at  <https://trac.osgeo.org/geos/wiki/RFC6> https://trac.osgeo.org/geos/wiki/RFC6 seems reasonable.  The C++ headers become clearly "internal use only" but still available for sufficiently adventurous souls (such as we self-define as).

 

So +1 from us.


Dale

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171004/4d3d27cd/attachment-0001.html>

From strk at kbt.io  Wed Oct  4 00:29:04 2017
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 4 Oct 2017 09:29:04 +0200
Subject: [geos-devel] [postgis-devel]  GEOS C++ API deprecated?
In-Reply-To: <smua817ix9y.fsf@linuxpal.mit.edu>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
 <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>
 <smua817ix9y.fsf@linuxpal.mit.edu>
Message-ID: <20171004072904.yn2usqrw3bonmmwf@liz>

On Tue, Oct 03, 2017 at 08:15:05PM -0400, Greg Troxel wrote:

>   3) do I reimport the geos package as geos35 and namespace it to allow
>   simultaneous installation with the 3.6 version, and have some way for
>   osm2pgsql to link against the 3.5 version instead.

The C++ geos library should already have a different name for every
version (both filename and SONAME). But I guess you'd need to tweak
the link line of depending packages to find the correct one ?

>    Is it a geos bug that the C++ API changes in ways that break programs
>    that use it?

I wouldn't say so. It's documented that the C++ API is subject
to frequent changes. In the future I see more smart pointers and
templates coming, which would be again destruptive for the C++ API
(but safe for the C API).

>    Is it a bug for other programs to use the C++ API at all?

It's not a bug per-se, but it introduces some issues for
packagere.

>   programs shouldn't really use the C++ API.  But if they do, they have
>   to cope with changes, because we aren't making stability guarantees.
>   So packagers should feel free to update geos to a release with an
>   API-breaking change after a few months, and if any depending package
>   breaks, it's their fault because they should have had a new release
>   that can use the new API.

Had you consider NOT replacing one version of GEOS C++ library with
another but rather keep both, when one of the packages doesn't build
(or work, ABI-wise) with new version ?

--strk;

From strk at kbt.io  Wed Oct  4 01:12:10 2017
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 4 Oct 2017 10:12:10 +0200
Subject: [geos-devel] [postgis-devel] RFC6 - Require explicit configure
 to use the C++ API
In-Reply-To: <CACmBxytFwtnh-QftuyMx7QpGoGQ6KHNDhnMirDt1T5bUt8=qjA@mail.gmail.com>
References: <005801d33c7f$f7efaff0$e7cf0fd0$@pcorp.us>
 <CACmBxytFwtnh-QftuyMx7QpGoGQ6KHNDhnMirDt1T5bUt8=qjA@mail.gmail.com>
Message-ID: <20171004081210.wwclon3uwv3qokuz@liz>

On Tue, Oct 03, 2017 at 03:07:30PM -0700, Kurt Schwehr wrote:
> I don't consider it a waste of time.  Thank you for taking the time for the
> RFC and especially for the summary.

Agreed, thanks Regina for the discussion.
And please consider RFC'ing the I_WAS_WARNED macro idea :)

--strk;

From strk at kbt.io  Wed Oct  4 03:15:41 2017
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 4 Oct 2017 12:15:41 +0200
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <smu60bviwdd.fsf@linuxpal.mit.edu>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
 <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>
 <20171002055849.4bda2djnehcdq7o5@liz>
 <smu60bviwdd.fsf@linuxpal.mit.edu>
Message-ID: <20171004101541.cpxihsdx4rbzvvrc@liz>

On Tue, Oct 03, 2017 at 08:34:38PM -0400, Greg Troxel wrote:

> I actually kind of like this; perhaps even
> 
> #define WE_ACKNOWLEDGE_THAT_THE_C++_API_IS_UNSTABLE

See how you like it:
https://git.osgeo.org/gogs/geos/geos/pulls/14

It's still just a warning, but could be turned into an ERROR if
we prefer...

--strk;

From lr at pcorp.us  Wed Oct  4 07:39:08 2017
From: lr at pcorp.us (Regina Obe)
Date: Wed, 4 Oct 2017 10:39:08 -0400
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning at
	compile time about C++ API being unstable (#14)
Message-ID: <000401d33d1e$8995de90$9cc19bb0$@pcorp.us>

Can all PSC folks vote if this is agreeable.  This will be done for GEOS 3.7 and above.

Feedback from others is welcome as well.

This  GEOS patch will display a warning in the Geometry.h header which appears during compile time whenever the C++ API is used to compile a projects source, unless 

WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE  

Is defined? 

https://git.osgeo.org/gogs/geos/geos/pulls/14


+1

Thanks,
Regina



-----Original Message-----
From: Sandro Santilli [mailto:gogs-admin at lists.osgeo.org] 
Sent: Wednesday, October 04, 2017 10:26 AM
To: dbaston at gmail.com; lr at pcorp.us; mwtoews at gmail.com
Subject: [geos] Emit a warning at compile time about C++ API being unstable (#14)

I say just start a [MOTION] thread to accept this PR

---
View it on Gogs ( https://git.osgeo.org/gogs/geos/geos/pulls/14 ) .


From lr at pcorp.us  Wed Oct  4 07:42:36 2017
From: lr at pcorp.us (Regina Obe)
Date: Wed, 4 Oct 2017 10:42:36 -0400
Subject: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8
In-Reply-To: <CAFLLRpK-hHqbyD5eNorH_s3g_VNwL+ovJCPDO4UMkgte=qD8Zw@mail.gmail.com>
References: <002601d33b29$1f5ef0d0$5e1cd270$@pcorp.us>
 <CACmBxysxkg1qxa1iR-7Fak0qRDQ7S-U2HavS42vCrOGbY-d4bw@mail.gmail.com>
 <003101d33b2d$4e045430$ea0cfc90$@pcorp.us>
 <20171002055849.4bda2djnehcdq7o5@liz> <smu60bviwdd.fsf@linuxpal.mit.edu>
 <000101d33cae$84ef2ec0$8ecd8c40$@pcorp.us>
 <CAFLLRpK-hHqbyD5eNorH_s3g_VNwL+ovJCPDO4UMkgte=qD8Zw@mail.gmail.com>
Message-ID: <000a01d33d1f$05935ae0$10ba10a0$@pcorp.us>

Rob,

 

Thanks for the reaffirmation that I wasn't imagining the issue :)

 

Thanks,

Regina

 

From: Robert Coup [mailto:robert.coup at koordinates.com] 
Sent: Wednesday, October 04, 2017 10:12 AM
To: Regina Obe <lr at pcorp.us>
Subject: Re: [geos-devel] RFC6 - Drop GEOS C++ API at GEOS 3.8

 

Hi Regina,

 

On 4 October 2017 at 03:17, Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

All my suggested changes to install Hobu and Mat booed so I think install changes are off the table. 

...

So much for that effort.

 

Sorry, been away for a week and come back to this saga. My 2c is you're entirely right, and having spent two days recently upgrading the nightmare that is Debian packaging for our internal GDAL builds, it's spectacularly simpler for a library to only have a C API, and that a build flag to enable the footgun for internal use is entirely reasonable. I'm sure there are other people using the C++ API out there, but they're unlikely to be updating codebases anyway. And if they are then adding --footgun is fine. (Maybe should have been GEOS 4.0 not 3.7? Academic now)

 

Thanks for picking up this issue, and your persistence and pragmatism, and the way you strived to listen to concerns and reach a consensus. Frankly from reading all the threads in one sitting, Mateusz and Howard didn't approach it similarly which is disappointing.

 

If you'd prefer I'm happy to post this to the list, I didn't want to resurrect the threads with more fire straight off.

 

Keep up your awesomeness, we appreciate it.

 

Thanks,

 

Rob :)

 

-- 

Chief Technology Officer Koordinates

+44 759 987 3480 <tel:+44%20759%209873480>  /  <http://koordinates.com/> koordinates.com /  <https://twitter.com/koordinates> @koordinates 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171004/e7aef88f/attachment.html>

From howard at hobu.co  Wed Oct  4 08:19:47 2017
From: howard at hobu.co (Howard Butler)
Date: Wed, 4 Oct 2017 10:19:47 -0500
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
Message-ID: <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>


> On Oct 4, 2017, at 12:08 AM, Regina Obe <lr at pcorp.us> wrote:
> 
> According to RFC1 – it says the motion can not pass    https://trac.osgeo.org/geos/wiki/RFC1 <https://trac.osgeo.org/geos/wiki/RFC1>  with a -1 and I have to give Hobu a chance to debate his point J
>  
> "Respondents may vote "-1" to veto a proposal, but must provide clear reasoning and alternate approaches to resolving the problem within the two days."
>  
> So I'd like to hear Hobu's alternative suggestions.

Sandro's suggestion to require users to #define an obnoxious acknowledgement to use the C++ API, with the expectation that it continues to be installed by default for any and all to continue, is a reasonable compromise to me.

I'll back down my -1 to -0 if the RFC is modified to reflect that scenario.

> Thanks for picking up this issue, and your persistence and pragmatism, and the way you strived to listen to concerns and reach a consensus. Frankly from reading all the threads in one sitting, Mateusz and Howard didn't approach it similarly which is disappointing.

My pragmatism is we don't get to change the rules after we've put things out there and people now might depend upon us. The C++ API for GEOS *pre-dates* the C API. The GEOS C API was a response to the recognition that some API insulation (along with a FFI-friendly interface) would be useful. 

It is not the library's responsibility to provide personal protective equipment. C++ users know the deal and accept that bargain when they use APIs. My note about GDAL in the previous email was to acknowledge that this same suggestion, to remove the C++ API, could not even be seriously considered there because there is so much public use of that API. There's even more *private* use that people probably don't know about. The same could be said for GEOS.

Packaging systems need to make decisions about moving forward with base versions of foundational libraries like GDAL and GEOS with acknowledgement that doing so may cause some laggards to be dropped. The packagers can't write software to update the laggards, and the libraries need the freedom to innovate. Attention is life, as Paul said.

Howard


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171004/e7c86d8f/attachment-0001.html>

From strk at kbt.io  Wed Oct  4 08:26:19 2017
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 4 Oct 2017 17:26:19 +0200
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
 at compile time about C++ API being unstable (#14)
In-Reply-To: <000401d33d1e$8995de90$9cc19bb0$@pcorp.us>
References: <000401d33d1e$8995de90$9cc19bb0$@pcorp.us>
Message-ID: <20171004152619.hgg5s3wxppmmm76c@liz>

On Wed, Oct 04, 2017 at 10:39:08AM -0400, Regina Obe wrote:
> Can all PSC folks vote if this is agreeable.  This will be done for GEOS 3.7 and above.
> 
> Feedback from others is welcome as well.
> 
> This  GEOS patch will display a warning in the Geometry.h header which appears during compile time whenever the C++ API is used to compile a projects source, unless 
> 
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE  
> 
> Is defined? 
> 
> https://git.osgeo.org/gogs/geos/geos/pulls/14
> 
> 
> +1

+1, ofc (next step would be turning that warning into an error)

--strk;

From lr at pcorp.us  Wed Oct  4 08:45:23 2017
From: lr at pcorp.us (Regina Obe)
Date: Wed, 4 Oct 2017 11:45:23 -0400
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
	configure switch to install the c++ headers and SDK
In-Reply-To: <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
Message-ID: <002301d33d27$cb303770$6190a650$@pcorp.us>

Hobu,

 

I take that to be a +1 for my subsequent motion to  accept Sandro's pull request for GEOS 3.7.0

 

https://lists.osgeo.org/pipermail/geos-devel/2017-October/008092.html

 

 

After we release GEOS 3.7.0 we can revote to flip the warning to an error as strk noted.  

I think a warning for GEOS 3.7 is good enough and GEOS 3.8 we can revisit making it into an error. 

 

Because in GEOS 3.8 we'll probably be doing some serious breaking of the C++ API to bring it up to modern C++ standards.

 

 

Thanks,

Regina

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Howard Butler
Sent: Wednesday, October 04, 2017 11:20 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] RFC6 - Discourage use of C++ API by requiring a configure switch to install the c++ headers and SDK

 

 

On Oct 4, 2017, at 12:08 AM, Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

 

According to RFC1 – it says the motion can not pass     <https://trac.osgeo.org/geos/wiki/RFC1> https://trac.osgeo.org/geos/wiki/RFC1  with a -1 and I have to give Hobu a chance to debate his point :)

 

"Respondents may vote "-1" to veto a proposal, but must provide clear reasoning and alternate approaches to resolving the problem within the two days."

 

So I'd like to hear Hobu's alternative suggestions.

 

Sandro's suggestion to require users to #define an obnoxious acknowledgement to use the C++ API, with the expectation that it continues to be installed by default for any and all to continue, is a reasonable compromise to me.

 

I'll back down my -1 to -0 if the RFC is modified to reflect that scenario.

 

Thanks for picking up this issue, and your persistence and pragmatism, and the way you strived to listen to concerns and reach a consensus. Frankly from reading all the threads in one sitting, Mateusz and Howard didn't approach it similarly which is disappointing.

 

My pragmatism is we don't get to change the rules after we've put things out there and people now might depend upon us. The C++ API for GEOS *pre-dates* the C API. The GEOS C API was a response to the recognition that some API insulation (along with a FFI-friendly interface) would be useful. 

 

It is not the library's responsibility to provide personal protective equipment. C++ users know the deal and accept that bargain when they use APIs. My note about GDAL in the previous email was to acknowledge that this same suggestion, to remove the C++ API, could not even be seriously considered there because there is so much public use of that API. There's even more *private* use that people probably don't know about. The same could be said for GEOS.

 

Packaging systems need to make decisions about moving forward with base versions of foundational libraries like GDAL and GEOS with acknowledgement that doing so may cause some laggards to be dropped. The packagers can't write software to update the laggards, and the libraries need the freedom to innovate. Attention is life, as Paul said.

 

Howard

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171004/d7ab25a4/attachment.html>

From schwehr at gmail.com  Wed Oct  4 09:07:09 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 4 Oct 2017 09:07:09 -0700
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
Message-ID: <CACmBxyvzBhvndpzjGEUwUeF7RgM5U5yqvKM9sJY645fNYLxVaQ@mail.gmail.com>

> It is not the library's responsibility to provide personal protective
equipment.
> C++ users know the deal and accept that bargain when they use APIs

With my packagers hat on... just offering a data point about what exists
that many folks might not know about.

If we can add a flag to the build configuration to keep the C++ install,
then life will continue as normal for users of fink.  I'll leave the
evaluation of the quality of the solution to others, but it has kept fink
packaging going with GEOS.

BABA and I have been packaging GEOS for fink on the mac for a long time
now.  We have created a tree that has separate contained areas for each
release of geos.  Only one -dev package can be installed at a time and and
subtree depending on geos must stick to the same version of geos.  Those
building their own stuff against geos can go it alone with an older version
of geos.  We don't even expose anything in the global
/sw/{bin,lib,include}.  headers, libs, and geos-config are down in the
version directory so that people have to buy into it.

I've not done the same with GDAL.  You buy into one version of GDAL and
that what you are forced to.  ABI problems in external code using GDAL from
fink?  My only response is: recompile and fix anything that doesn't match
the current API.

fink list libgeos
Information about 11072 packages read in 1 seconds.
     libgeos3.3.0                              3.3.0-1
    Geometry Engine - Open Source
     libgeos3.3.0-shlibs                       3.3.0-1
    Geometry Engine - Open Source
     libgeos3.3.1                              3.3.1-1
    Geometry Engine - Open Source
     libgeos3.3.1-shlibs                       3.3.1-1
    Geometry Engine - Open Source
     libgeos3.3.3                              3.3.3-1
    Geometry Engine - Open Source
     libgeos3.3.3-shlibs                       3.3.3-1
    Geometry Engine - Open Source
     libgeos3.3.6                              3.3.6-1
    Geometry Engine - Open Source
     libgeos3.3.6-shlibs                       3.3.6-1
    Geometry Engine - Open Source
     libgeos3.3.8                              3.3.8-1
    Geometry Engine - Open Source
     libgeos3.3.8-shlibs                       3.3.8-1
    Geometry Engine - Open Source
     libgeos3.4.2                              3.4.2-1
    Geometry Engine - Open Source
     libgeos3.4.2-shlibs                       3.4.2-1
    Geometry Engine - Open Source
 i   libgeos3.5.0                              3.5.0-2
    Geometry Engine - Open Source
 i   libgeos3.5.0-shlibs                       3.5.0-2
    Geometry Engine - Open Source
 i   libgeos3.6.1                              3.6.1-1
    Geometry Engine - Open Source
 i   libgeos3.6.1-shlibs                       3.6.1-1
    Geometry Engine - Open Source

dpkg -L libgeos3.6.1-shlibs | egrep '[.](dylib|a)'
/sw/opt/libgeos3.6.1/lib/libgeos-3.6.1.dylib
/sw/opt/libgeos3.6.1/lib/libgeos_c.1.dylib

dpkg -L libgeos3.6.1 | egrep '[.](dylib|a)'
/sw/opt/libgeos3.6.1/lib/libgeos.a
/sw/opt/libgeos3.6.1/lib/libgeos_c.a
/sw/opt/libgeos3.6.1/lib/libgeos.dylib
/sw/opt/libgeos3.6.1/lib/libgeos_c.dylib

On Wed, Oct 4, 2017 at 8:19 AM, Howard Butler <howard at hobu.co> wrote:

>
> On Oct 4, 2017, at 12:08 AM, Regina Obe <lr at pcorp.us> wrote:
>
> According to RFC1 – it says the motion can not pass
> https://trac.osgeo.org/geos/wiki/RFC1  with a -1 and I have to give Hobu
> a chance to debate his point J
>
> *"Respondents may vote "-1" to veto a proposal, but must provide clear
> reasoning and alternate approaches to resolving the problem within the two
> days."*
>
> So I'd like to hear Hobu's alternative suggestions.
>
>
> Sandro's suggestion to require users to #define an obnoxious
> acknowledgement to use the C++ API, with the expectation that it continues
> to be installed by default for any and all to continue, is a reasonable
> compromise to me.
>
> I'll back down my -1 to -0 if the RFC is modified to reflect that scenario.
>
> Thanks for picking up this issue, and your persistence and pragmatism, and
> the way you strived to listen to concerns and reach a consensus. Frankly
> from reading all the threads in one sitting, Mateusz and Howard didn't
> approach it similarly which is disappointing.
>
>
> My pragmatism is we don't get to change the rules after we've put things
> out there and people now might depend upon us. The C++ API for GEOS
> *pre-dates* the C API. The GEOS C API was a response to the recognition
> that some API insulation (along with a FFI-friendly interface) would be
> useful.
>
> It is not the library's responsibility to provide personal protective
> equipment. C++ users know the deal and accept that bargain when they use
> APIs. My note about GDAL in the previous email was to acknowledge that this
> same suggestion, to remove the C++ API, could not even be seriously
> considered there because there is so much public use of that API. There's
> even more *private* use that people probably don't know about. The same
> could be said for GEOS.
>
> Packaging systems need to make decisions about moving forward with base
> versions of foundational libraries like GDAL and GEOS with acknowledgement
> that doing so may cause some laggards to be dropped. The packagers can't
> write software to update the laggards, and the libraries need the freedom
> to innovate. Attention is life, as Paul said.
>
> Howard
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171004/e5fcd286/attachment-0001.html>

From strk at kbt.io  Wed Oct  4 09:12:40 2017
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 4 Oct 2017 18:12:40 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <002301d33d27$cb303770$6190a650$@pcorp.us>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <002301d33d27$cb303770$6190a650$@pcorp.us>
Message-ID: <20171004161240.b2zxesuhdoxeoltk@liz>

On Wed, Oct 04, 2017 at 11:45:23AM -0400, Regina Obe wrote:

> I take that to be a +1 for my subsequent motion to  accept Sandro's pull request for GEOS 3.7.0

[Chair hat on]

Please avoid confusion and keep motions simple and immutable, and
interpretations clear. Hobu's vote on RFC6 was -1, and I think
he mentioned -0 on raising a warning unless a macro is defined.

The -0 can be made official by replying the the actual [MOTION]
thread. Otherwise is just an informal -0. Surely cannot be
taken a +1

--strk;

From robert.coup at onetrackmind.co.nz  Wed Oct  4 15:34:02 2017
From: robert.coup at onetrackmind.co.nz (Robert Coup)
Date: Thu, 5 Oct 2017 00:34:02 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
Message-ID: <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>

Hi Howard,

It's quite possible I read the threads out of order and assumed you'd seen
the latest/final proposal when you hadn't. Apologies - your pragmatism is
important!

On 4 October 2017 at 17:19, Howard Butler <howard at hobu.co> wrote:

>
> My pragmatism is we don't get to change the rules after we've put things
> out there and people now might depend upon us. The C++ API for GEOS
> *pre-dates* the C API.
>

Yes, maybe it's something that's made a 4.0 as a breaking compatibility
change, but that's details wrt the concept.

If the docs & the warnings and everything say "avoid the C++ API" and
there's no resources in GEOS to maintain a stable C++ API, then it's not
really "public" in a library way I think? Any more than I can grab raw
source of any OSS code and twist it to my own purposes. Possible vs Easy.


> The GEOS C API was a response to the recognition that some API insulation
> (along with a FFI-friendly interface) would be useful.
>

> It is not the library's responsibility to provide personal protective
> equipment. C++ users know the deal and accept that bargain when they use
> APIs. My note about GDAL in the previous email was to acknowledge that this
> same suggestion, to remove the C++ API, could not even be seriously
> considered there because there is so much public use of that API. There's
> even more *private* use that people probably don't know about. The same
> could be said for GEOS.
>

I'm sure there is a lot of private C++ use of GEOS, I have had some on
occasions – it's a great library! But those people are either quite capable
of `--enable-cpp-sdk` or are using an old version and not upgrading anyway?
They're clearly not using the distro GEOS packages without recompiling.

GDAL - that horse is bolted. But the time between GDAL releases and distro
packaging release can be pretty substantial because (AFAIK) of the C++ API
complexities, and that causes other problems downstream. Ending up with
people who have installs of postgis against GDAL2.0, with Mapnik against
GDAL2.2 and then another set of binaries & python bindings and What Fun™.

Packaging systems need to make decisions about moving forward with base
> versions of foundational libraries like GDAL and GEOS with acknowledgement
> that doing so may cause some laggards to be dropped. The packagers can't
> write software to update the laggards, and the libraries need the freedom
> to innovate. Attention is life, as Paul said.
>

Yeah, Debian and others sit in a difficult place with conflicting goals,
but the stronger we can make the hint of "only use the stable C API" the
better I think, so that there's *likely * to be less new software using the
C++ API, which means that distributions can roll new GEOS releases ASAP.
And yes, if there's *still *software out there and it's still not upgraded
maybe that's tough and it gets pulled from the distro. (Hopefully distros
don't enable the C++ API and put it all right back here again).

Alternative is to work with on C++ APIs/ABIs and compatibility with the
distros and make it clear that having 7 versions of GEOS installed is
completely normal. And woe betide if there's a security problem with the
WKB parser that affects them all. But that's a huge amount of effort to go
to for something the project has recommended against since forever...

Cheers,

Rob :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171005/574adc14/attachment.html>

From sebastic at xs4all.nl  Wed Oct  4 23:02:01 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 5 Oct 2017 08:02:01 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
Message-ID: <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>

On 10/05/2017 12:34 AM, Robert Coup wrote:
> Alternative is to work with on C++ APIs/ABIs and compatibility with the
> distros and make it clear that having 7 versions of GEOS installed is
> completely normal. And woe betide if there's a security problem with the
> WKB parser that affects them all. But that's a huge amount of effort to go
> to for something the project has recommended against since forever...

That may be fine for fink, but having more than one version of a library
is not acceptable for Debian and neither is it for EPEL AFAIK. So the
above is not going to happen in the most popular Linux distributions.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From lr at pcorp.us  Wed Oct  4 23:35:30 2017
From: lr at pcorp.us (Regina Obe)
Date: Thu, 5 Oct 2017 02:35:30 -0400
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
	at compile time about C++ API being unstable (#14) -
	Summarize of votes
Message-ID: <005e01d33da4$24399240$6cacb6c0$@pcorp.us>

Just to confirm intention and the fact I misquoted Hobu as strk pointed out.

The MOTION for geos 3.7.0 is to put a warning in theG eometry.h header file that will show whenever a user compiles a project source against the GEOS C++ API.
With the intention of come next major/minor release after 3.7 turning that Warning into an error unless said user defines the 

WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE    in there Geometry.h  header file

This will allow packagers to still distribute the headers and C++ libs if they want, but users will have to be smart enough to edit the header file to compile projects that use the GEOS C++ API.

Votes as I understand -- Dale and Hobu will need to reaffirm (since this is a softer stop gap compromise)

Strk  -  +1
Hobu -0  (please confirm Hobu to make Strk happy that I'm not putting words into your mouth :)  )
Dale - +1  (though Dale did not officially vote on this Motion he voted for the more aggressive RFC6 - https://trac.osgeo.org/geos/wiki/RFC6   (which we will revisit after GEOS 3.7.0 release )
Regina +1
Paul -- Did not vote (Presumably because he doesn't want to make any enemies on either side -- he's a king trapped by pawns and a queen)
Martin Davis - sorry forgot about you Vote if you have an opinion

Thanks,
Regina



-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Sandro Santilli
Sent: Wednesday, October 04, 2017 11:26 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] MOTION to accept this patch [geos] Emit a warning at compile time about C++ API being unstable (#14)

On Wed, Oct 04, 2017 at 10:39:08AM -0400, Regina Obe wrote:
> Can all PSC folks vote if this is agreeable.  This will be done for GEOS 3.7 and above.
> 
> Feedback from others is welcome as well.
> 
> This  GEOS patch will display a warning in the Geometry.h header which appears during compile time whenever the C++ API is used to compile a projects source, unless 
> 
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE  
> 
> Is defined? 
> 
> https://git.osgeo.org/gogs/geos/geos/pulls/14
> 
> 
> +1

+1, ofc (next step would be turning that warning into an error)

--strk;
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel


From strk at kbt.io  Thu Oct  5 01:44:34 2017
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 5 Oct 2017 10:44:34 +0200
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
 at compile time about C++ API being unstable (#14) - Summarize of votes
In-Reply-To: <005e01d33da4$24399240$6cacb6c0$@pcorp.us>
References: <005e01d33da4$24399240$6cacb6c0$@pcorp.us>
Message-ID: <20171005084434.75crrhnf63q4hhxk@liz>

On Thu, Oct 05, 2017 at 02:35:30AM -0400, Regina Obe wrote:

> The MOTION for geos 3.7.0 is to put a warning in the Geometry.h header
> file that will show whenever a user compiles a project source against
> the GEOS C++ API.
> With the intention of come next major/minor release after 3.7 turning that Warning into an error unless said user defines the 
> 
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE    in there Geometry.h  header file
> 
> This will allow packagers to still distribute the headers and C++ libs if they want, but users will have to be smart enough to edit the header file to compile projects that use the GEOS C++ API.

Just a correction: it doesn't take changing the header, all you have
to do is make sure to define that macro before including the C++ header
(can be done via commandline, CXXFLAGS or whatever)

And that hushing macro is already working in the current PR
(with warning only behavior). So, we're voting on:

Do you agree that you get a warning unless you acknowledge instability
of the API via defining a macro before including GEOS C++ header ?

-strk;

From robert.coup at onetrackmind.co.nz  Thu Oct  5 02:49:53 2017
From: robert.coup at onetrackmind.co.nz (Robert Coup)
Date: Thu, 5 Oct 2017 10:49:53 +0100
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
 <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
Message-ID: <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>

Hi Bas,

On 5 October 2017 at 07:02, Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 10/05/2017 12:34 AM, Robert Coup wrote:
> > Alternative is to work with on C++ APIs/ABIs and compatibility with the
> > distros and make it clear that having 7 versions of GEOS installed is
> > completely normal. And woe betide if there's a security problem with the
> > WKB parser that affects them all. But that's a huge amount of effort to
> go
> > to for something the project has recommended against since forever...
>
> That may be fine for fink, but having more than one version of a library
> is not acceptable for Debian and neither is it for EPEL AFAIK. So the
> above is not going to happen in the most popular Linux distributions.
>

Trying to understand this a bit deeper - it's possible to have 2x GDALs
installed. eg. libgdal1h and libgdal20 will live side by side (though
python-gdal/gdal-bin clash), but you're saying a particular release
(xenial/jessie) will only ever have 1x GDAL package in it?

Thanks

Rob :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171005/8eaddfaa/attachment.html>

From strk at kbt.io  Thu Oct  5 02:52:39 2017
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 5 Oct 2017 11:52:39 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
 <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
 <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
Message-ID: <20171005095239.jchswmvhdxq2e7vu@liz>

On Thu, Oct 05, 2017 at 10:49:53AM +0100, Robert Coup wrote:
> Hi Bas,
> 
> On 5 October 2017 at 07:02, Sebastiaan Couwenberg <sebastic at xs4all.nl>
> wrote:
> 
> > On 10/05/2017 12:34 AM, Robert Coup wrote:
> > > Alternative is to work with on C++ APIs/ABIs and compatibility with the
> > > distros and make it clear that having 7 versions of GEOS installed is
> > > completely normal. And woe betide if there's a security problem with the
> > > WKB parser that affects them all. But that's a huge amount of effort to
> > go
> > > to for something the project has recommended against since forever...
> >
> > That may be fine for fink, but having more than one version of a library
> > is not acceptable for Debian and neither is it for EPEL AFAIK. So the
> > above is not going to happen in the most popular Linux distributions.
> 
> Trying to understand this a bit deeper - it's possible to have 2x GDALs
> installed. eg. libgdal1h and libgdal20 will live side by side (though
> python-gdal/gdal-bin clash), but you're saying a particular release
> (xenial/jessie) will only ever have 1x GDAL package in it?

This is also an interesting question for PostGIS, where lack of
multiple-versions of the same thing would prevent proper upgrades.

BTW, I have python2 and python3 installed at the same time, via
packages, and I think qt4 and qt5 too...

--strk;

From sebastic at xs4all.nl  Thu Oct  5 03:01:27 2017
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Thu, 05 Oct 2017 12:01:27 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
 <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
 <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
Message-ID: <862b6c5aacef50927ca1281bbd95047e@xs4all.nl>

On 2017-10-05 11:49, Robert Coup wrote:
> On 5 October 2017 at 07:02, Sebastiaan Couwenberg <sebastic at xs4all.nl>
> wrote:
> 
>> On 10/05/2017 12:34 AM, Robert Coup wrote:
>> > Alternative is to work with on C++ APIs/ABIs and compatibility with the
>> > distros and make it clear that having 7 versions of GEOS installed is
>> > completely normal. And woe betide if there's a security problem with the
>> > WKB parser that affects them all. But that's a huge amount of effort to
>> go
>> > to for something the project has recommended against since forever...
>> 
>> That may be fine for fink, but having more than one version of a 
>> library
>> is not acceptable for Debian and neither is it for EPEL AFAIK. So the
>> above is not going to happen in the most popular Linux distributions.
>> 
> 
> Trying to understand this a bit deeper - it's possible to have 2x GDALs
> installed. eg. libgdal1h and libgdal20 will live side by side (though
> python-gdal/gdal-bin clash), but you're saying a particular release
> (xenial/jessie) will only ever have 1x GDAL package in it?

Yes, Debian distributions will only ever have a single gdal package, 
Ubuntu by extension will too (because they just copy the packages from 
Debian) although newer versions are available in the UbuntuGIS PPA 
(which is a separate repository from the Ubunu ones). The same goes for 
other packages like geos, spatialite, rasterlite, spatialindex, postgis, 
etc, only one version will be included in the distribution that all 
reverse dependencies will use.

Multiple versions make security updates more complex because more than 
one package needs to be patched, and also makes integration of reverse 
dependencies more complex because they'll need to be adapted for one of 
the versions.

If you need newer GDAL on Debian stable releases, you either need to 
backport the Debian package and update all reverse dependencies, or you 
need to not use the package and compile gdal and its reverse 
dependencies yourself (all in /usr/local).

Kind Regards,

Bas

From sebastic at xs4all.nl  Thu Oct  5 03:11:45 2017
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Thu, 05 Oct 2017 12:11:45 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <20171005095239.jchswmvhdxq2e7vu@liz>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
 <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
 <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
 <20171005095239.jchswmvhdxq2e7vu@liz>
Message-ID: <ef7dca39514c7a14057138cbe850ec0c@xs4all.nl>

On 2017-10-05 11:52, Sandro Santilli wrote:
> On Thu, Oct 05, 2017 at 10:49:53AM +0100, Robert Coup wrote:
>> Hi Bas,
>> 
>> On 5 October 2017 at 07:02, Sebastiaan Couwenberg <sebastic at xs4all.nl>
>> wrote:
>> 
>> > On 10/05/2017 12:34 AM, Robert Coup wrote:
>> > > Alternative is to work with on C++ APIs/ABIs and compatibility with the
>> > > distros and make it clear that having 7 versions of GEOS installed is
>> > > completely normal. And woe betide if there's a security problem with the
>> > > WKB parser that affects them all. But that's a huge amount of effort to
>> > go
>> > > to for something the project has recommended against since forever...
>> >
>> > That may be fine for fink, but having more than one version of a library
>> > is not acceptable for Debian and neither is it for EPEL AFAIK. So the
>> > above is not going to happen in the most popular Linux distributions.
>> 
>> Trying to understand this a bit deeper - it's possible to have 2x 
>> GDALs
>> installed. eg. libgdal1h and libgdal20 will live side by side (though
>> python-gdal/gdal-bin clash), but you're saying a particular release
>> (xenial/jessie) will only ever have 1x GDAL package in it?
> 
> This is also an interesting question for PostGIS, where lack of
> multiple-versions of the same thing would prevent proper upgrades.
> 
> BTW, I have python2 and python3 installed at the same time, via
> packages, and I think qt4 and qt5 too...

Python interpreters and Qt frameworks are different. The changes between 
python2/3 & qt4/5 are major, it's not just a newer version. There still 
is only a single version of each.

In Debian unstable we have multiple Python 3 versions when we're 
transitioning to a new version after which the old one is removed.

Debian also only has a single PostgreSQL release in the distribution and 
all reverse dependencies are integrated with it, if you need another 
version you'll need to use the apt.postgresql.org repository.

Kind Regards,

Bas

From penorman at mac.com  Thu Oct  5 02:36:19 2017
From: penorman at mac.com (Paul Norman)
Date: Thu, 05 Oct 2017 02:36:19 -0700
Subject: [geos-devel] [postgis-devel]  GEOS C++ API deprecated?
In-Reply-To: <CABUeae8LWv0SHizsJfY+fictpiu2ovkg2Da=ZxDLhJhuUZvaoQ@mail.gmail.com>
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
 <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>
 <smua817ix9y.fsf@linuxpal.mit.edu>
 <CABUeae8LWv0SHizsJfY+fictpiu2ovkg2Da=ZxDLhJhuUZvaoQ@mail.gmail.com>
Message-ID: <a9383d3a-ebac-20b5-d1bf-798c5897b3c9@mac.com>

On 10/4/2017 12:14 AM, Mateusz Loskot wrote:
> As I explained on IRC last night, IMHO, dropping GEOS by
> osm2pgsql and switch to libosmium turned to be good.
> The GEOS API breakage just catalised the switch, which
> IMO was inevitable anyway.

osm2pgsql dropping GEOS is unrelated to its API switch. The idea has 
been around since before GEOS 3.5 and development work started before we 
were aware of GEOS 3.6 issues.

We looked at switching to the C API but that wasn't considered a 
worthwhile use of time. We also didn't have any patches which would 
support GEOS 3.6 without breaking support for earlier versions. There 
were also questions on if we could fit those changes into a patch release.

From howard at hobu.co  Thu Oct  5 09:20:28 2017
From: howard at hobu.co (Howard Butler)
Date: Thu, 5 Oct 2017 11:20:28 -0500
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
 at compile time about C++ API being unstable (#14) - Summarize of votes
In-Reply-To: <005e01d33da4$24399240$6cacb6c0$@pcorp.us>
References: <005e01d33da4$24399240$6cacb6c0$@pcorp.us>
Message-ID: <F713B72E-27A7-4AB1-AE6D-31E8ED39840D@hobu.co>


> On Oct 5, 2017, at 1:35 AM, Regina Obe <lr at pcorp.us> wrote:
> 
> Just to confirm intention and the fact I misquoted Hobu as strk pointed out.
> 
> The MOTION for geos 3.7.0 is to put a warning in theG eometry.h header file that will show whenever a user compiles a project source against the GEOS C++ API.
> With the intention of come next major/minor release after 3.7 turning that Warning into an error unless said user defines the 
> 
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE    in there Geometry.h  header file
> 
> This will allow packagers to still distribute the headers and C++ libs if they want, but users will have to be smart enough to edit the header file to compile projects that use the GEOS C++ API.
> 
> Votes as I understand -- Dale and Hobu will need to reaffirm (since this is a softer stop gap compromise)
> 
> Strk  -  +1
> Hobu -0  (please confirm Hobu to make Strk happy that I'm not putting words into your mouth :)  )

Confirmed. I'm -0 on this.

> Dale - +1  (though Dale did not officially vote on this Motion he voted for the more aggressive RFC6 - https://trac.osgeo.org/geos/wiki/RFC6   (which we will revisit after GEOS 3.7.0 release )
> Regina +1
> Paul -- Did not vote (Presumably because he doesn't want to make any enemies on either side -- he's a king trapped by pawns and a queen)
> Martin Davis - sorry forgot about you Vote if you have an opinion


From dale.lutz at safe.com  Thu Oct  5 17:04:00 2017
From: dale.lutz at safe.com (Dale Lutz)
Date: Fri, 06 Oct 2017 00:04:00 +0000
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
 at compile time about C++ API being unstable (#14) - Summarize of votes
Message-ID: <CANGtUwNzfnp-tuzjMhPE6cw_GwHneFpver9pt56aMCFa9ntWKg@mail.gmail.com>

Hi all,

RE:
> The MOTION for geos 3.7.0 is to put a warning in theG eometry.h header
file that will show whenever a user compiles a project source against the
GEOS C++ API.
> With the intention of come next major/minor release after 3.7 turning
that Warning into an error unless said user defines the
>
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE    in there
Geometry.h  header file
>
> This will allow packagers to still distribute the headers and C++ libs if
they want, but users will have to be smart enough to edit the header file
to compile projects that use the GEOS C++ API.
>
> Votes as I understand -- Dale and Hobu will need to reaffirm (since this
is a softer stop gap compromise)
>
> Strk  -  +1
> Hobu -0  (please confirm Hobu to make Strk happy that I'm not putting
words into your mouth :)  )


I am happy to officially vote +1.  Lots of empty board space around me.
Kinda lonely, really.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171006/e36b1bb0/attachment.html>

From robert.coup at onetrackmind.co.nz  Fri Oct  6 01:28:00 2017
From: robert.coup at onetrackmind.co.nz (Robert Coup)
Date: Fri, 6 Oct 2017 09:28:00 +0100
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <862b6c5aacef50927ca1281bbd95047e@xs4all.nl>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
 <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
 <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
 <862b6c5aacef50927ca1281bbd95047e@xs4all.nl>
Message-ID: <CAFLLRp+r6NtgE4O70PiUmRDsGxp1cyjsDTM-wkZL5ouDBXYetg@mail.gmail.com>

Hi Bas,

On 5 October 2017 at 11:01, Bas Couwenberg <sebastic at xs4all.nl> wrote:

> Yes, Debian distributions will only ever have a single gdal package,
> Ubuntu by extension will too (because they just copy the packages from
> Debian) although newer versions are available in the UbuntuGIS PPA (which
> is a separate repository from the Ubunu ones). The same goes for other
> packages like geos, spatialite, rasterlite, spatialindex, postgis, etc,
> only one version will be included in the distribution that all reverse
> dependencies will use.
>
> Multiple versions make security updates more complex because more than one
> package needs to be patched, and also makes integration of reverse
> dependencies more complex because they'll need to be adapted for one of the
> versions.
>

Ok, so the restriction is policy-based, not technical. Debian/Ubuntu
releases won't provide multiple versions of GEOS, but if someone
builds/runs their own repo then the system will support multiple versions
(eg. continuing my example, a backport of the libgdal20 package will
install alongside libgdal1h).

Seems fair enough :)

Followup question (and vaguely asking you to generalise on behalf of all
distro maintainers) – do you think in the general case distros would take
the upstream project advice and *not* set `--enable-the-cpp-sdk` in builds,
and also therefore *not* accept uploads of new packages using the C++ API?
Debian tends to have a build-with-the-kitchen-sink approach in my
experience, but there has to be a limit somewhere.

Cheers

Rob :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171006/dfb5bbbc/attachment.html>

From sebastic at xs4all.nl  Fri Oct  6 02:01:45 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 6 Oct 2017 11:01:45 +0200
Subject: [geos-devel] RFC6 - Discourage use of C++ API by requiring a
 configure switch to install the c++ headers and SDK
In-Reply-To: <CAFLLRp+r6NtgE4O70PiUmRDsGxp1cyjsDTM-wkZL5ouDBXYetg@mail.gmail.com>
References: <000d01d33cce$d63910f0$82ab32d0$@pcorp.us>
 <39F96B9C-C396-487F-A12C-5FEF5C415748@hobu.co>
 <CAFLLRpJHkvta70hLg4-V6AkNce7rYhkb1etjdnht02_9QnSUpA@mail.gmail.com>
 <1c2ae628-aaee-ff2c-0070-43f940c6a31b@xs4all.nl>
 <CAFLLRpLFD1b_Ds-uPMrqYsN5Djo+qL5drzD3WR2qwxZtEDOo5Q@mail.gmail.com>
 <862b6c5aacef50927ca1281bbd95047e@xs4all.nl>
 <CAFLLRp+r6NtgE4O70PiUmRDsGxp1cyjsDTM-wkZL5ouDBXYetg@mail.gmail.com>
Message-ID: <8b397da6-9707-8dac-94cf-3797e9ca3bbb@xs4all.nl>

On 10/06/2017 10:28 AM, Robert Coup wrote:
> Hi Bas,
> 
> On 5 October 2017 at 11:01, Bas Couwenberg <sebastic at xs4all.nl> wrote:
> 
>> Yes, Debian distributions will only ever have a single gdal package,
>> Ubuntu by extension will too (because they just copy the packages from
>> Debian) although newer versions are available in the UbuntuGIS PPA (which
>> is a separate repository from the Ubunu ones). The same goes for other
>> packages like geos, spatialite, rasterlite, spatialindex, postgis, etc,
>> only one version will be included in the distribution that all reverse
>> dependencies will use.
>>
>> Multiple versions make security updates more complex because more than one
>> package needs to be patched, and also makes integration of reverse
>> dependencies more complex because they'll need to be adapted for one of the
>> versions.
>>
> 
> Ok, so the restriction is policy-based, not technical. Debian/Ubuntu
> releases won't provide multiple versions of GEOS, but if someone
> builds/runs their own repo then the system will support multiple versions
> (eg. continuing my example, a backport of the libgdal20 package will
> install alongside libgdal1h).

The fun begins when you have libgdal20 in the distribution and build the
latest 2.x yourself. Nobody should be using distributions with libgdal1h
any more.

> Seems fair enough :)
> 
> Followup question (and vaguely asking you to generalise on behalf of all
> distro maintainers) – do you think in the general case distros would take
> the upstream project advice and *not* set `--enable-the-cpp-sdk` in builds,
> and also therefore *not* accept uploads of new packages using the C++ API?
> Debian tends to have a build-with-the-kitchen-sink approach in my
> experience, but there has to be a limit somewhere.
Since I maintain the geos package in Debian and have to coordinate the
transitions when ABIs break, the package will not re-enable the C++
headers. That will cause bugreports for GRASS & OSSIM to switch to the C
API, or their projects will be removed from Debian and by extension from
Ubuntu. GRASS will most likely make the switch shortly thereafter, OSSIM
probably not. The OTB project will have to act to not have their package
removed due to their ossim dependency, and move on with their
ossim-light fork that lacks the problematic GEOS dependency.

I cannot speak for the other distributions, but I expect them to not
enable the configure option unless they have other packages that need
it. E.g. all distributions that also include GRASS and/or OSSIM. The
GRASS dependency on libgeos may just be because they use `geos-config
--libs` instead of `geos-config --clibs`.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From lr at pcorp.us  Fri Oct  6 13:55:43 2017
From: lr at pcorp.us (Regina Obe)
Date: Fri, 6 Oct 2017 16:55:43 -0400
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
	at compile time about C++ API being unstable (#14) - PASSES
Message-ID: <004101d33ee5$7a6b4680$6f41d380$@pcorp.us>

MOTION  PASSES to accept this PULL request for GEOS 3.7.0  with 3+, one -0 and 2 abstains

https://git.osgeo.org/gogs/geos/geos/pulls/14


Dale +1
Regina +1
Sandro +1
Hobu -0
Paul - did not vote
Martin - did not vote


Thanks all for your perspectives.

Regina

-------

RE:  Dale Lutz wrote:
> The MOTION for geos 3.7.0 is to put a warning in theG eometry.h header
file that will show whenever a user compiles a project source against the
GEOS C++ API.
> With the intention of come next major/minor release after 3.7 turning
that Warning into an error unless said user defines the
>
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE    in there
Geometry.h  header file
>
> This will allow packagers to still distribute the headers and C++ libs if
they want, but users will have to be smart enough to edit the header file
to compile projects that use the GEOS C++ API.
>
> Votes as I understand -- Dale and Hobu will need to reaffirm (since this
is a softer stop gap compromise)
>
> Strk  -  +1
> Hobu -0  (please confirm Hobu to make Strk happy that I'm not putting
words into your mouth :)  )


I am happy to officially vote +1.  Lots of empty board space around me.
Kinda lonely, really.


On Thu, Oct 05, 2017 at 02:35:30AM -0400, Regina Obe wrote:

> The MOTION for geos 3.7.0 is to put a warning in the Geometry.h header 
> file that will show whenever a user compiles a project source against 
> the GEOS C++ API.
> With the intention of come next major/minor release after 3.7 turning 
> that Warning into an error unless said user defines the
> 
> WE_ACKNOWLEDGE_THAT_THE_GEOS_CPLUSPLUS_API_IS_UNSTABLE    in there Geometry.h  header file
> 
> This will allow packagers to still distribute the headers and C++ libs if they want, but users will have to be smart enough to edit the header file to compile projects that use the GEOS C++ API.

Just a correction: it doesn't take changing the header, all you have to do is make sure to define that macro before including the C++ header (can be done via commandline, CXXFLAGS or whatever)

And that hushing macro is already working in the current PR (with warning only behavior). So, we're voting on:

Do you agree that you get a warning unless you acknowledge instability of the API via defining a macro before including GEOS C++ header ?

-strk;
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Fri Oct  6 14:03:58 2017
From: lr at pcorp.us (Regina Obe)
Date: Fri, 6 Oct 2017 17:03:58 -0400
Subject: [geos-devel] Thoughts on Backporting the emit warning message to
	GEOS 3.6 and GEOS 3.5
Message-ID: <004201d33ee6$a165a630$e430f290$@pcorp.us>

I'm only softly proposing this but want to get a feel if anyone has issues
before we do.

https://git.osgeo.org/gogs/geos/geos/pulls/14

I would like to back port this pull to GEOS 3.6 and GEOS 3.5 branches.

The reason being is

1) It's just a warning that shows when compiling code that uses the C++ API
so doesn't impact existing compiles.  No one has to change their compile
scripts.
But users using libgeos-dev for example from packages would be subjected to
the warning if they are using a project that uses the C++ API.

2) It gives people notice compiling projects using GEOS C++ API, that their
use may be in jeopardy in future and they might want to consider switching
to the C API or brace for breaking changes to the C++ API.


That warning will hopefully give folks enough time to switch to C-API so
that we feel comfortable doing some spring cleaning breaking 
changes to the underlying C++ API in GEOS 3.8 or 4.0 with minimal effect on
existing users.


Thanks,
Regina


From lr at pcorp.us  Fri Oct  6 14:05:59 2017
From: lr at pcorp.us (Regina Obe)
Date: Fri, 6 Oct 2017 17:05:59 -0400
Subject: [geos-devel] Thoughts on Backporting the emit warning message
	to GEOS 3.6 and GEOS 3.5
Message-ID: <004501d33ee6$e95701f0$bc0505d0$@pcorp.us>

Slight correction I meant

"would be subjected to the warning if they are compiling source code that
uses the C++ API."

-----Original Message-----
From: Regina Obe [mailto:lr at pcorp.us] 
Sent: Friday, October 06, 2017 5:04 PM
To: 'GEOS Development List' <geos-devel at lists.osgeo.org>
Subject: Thoughts on Backporting the emit warning message to GEOS 3.6 and
GEOS 3.5

I'm only softly proposing this but want to get a feel if anyone has issues
before we do.

https://git.osgeo.org/gogs/geos/geos/pulls/14

I would like to back port this pull to GEOS 3.6 and GEOS 3.5 branches.

The reason being is

1) It's just a warning that shows when compiling code that uses the C++ API
so doesn't impact existing compiles.  No one has to change their compile
scripts.
But users using libgeos-dev for example from packages would be subjected to
the warning if they are using a project that uses the C++ API.

2) It gives people notice compiling projects using GEOS C++ API, that their
use may be in jeopardy in future and they might want to consider switching
to the C API or brace for breaking changes to the C++ API.


That warning will hopefully give folks enough time to switch to C-API so
that we feel comfortable doing some spring cleaning breaking changes to the
underlying C++ API in GEOS 3.8 or 4.0 with minimal effect on existing users.


Thanks,
Regina


From even.rouault at spatialys.com  Fri Oct  6 14:13:51 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 06 Oct 2017 23:13:51 +0200
Subject: [geos-devel] Thoughts on Backporting the emit warning message
	to GEOS 3.6 and GEOS 3.5
In-Reply-To: <004201d33ee6$a165a630$e430f290$@pcorp.us>
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
Message-ID: <29003962.Qj20OlUqS0@even-i700>

On vendredi 6 octobre 2017 17:03:58 CEST Regina Obe wrote:
> I'm only softly proposing this but want to get a feel if anyone has issues
> before we do.
> 
> https://git.osgeo.org/gogs/geos/geos/pulls/14
> 
> I would like to back port this pull to GEOS 3.6 and GEOS 3.5 branches.
> 
> The reason being is
> 
> 1) It's just a warning that shows when compiling code that uses the C++ API
> so doesn't impact existing compiles.  No one has to change their compile
> scripts.

Not that I'd be impacted myself, but that is not true if they build with
-Werror, or expect that their build log remains clean if it was already.

(but my experience building GDAL with -Werror and most pedantic warnings turned on has 
demonstrated that for a lot of packages you have to include external headers with compiler 
mechanism to temporarily turn off warnings due to them)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171006/9dff6f89/attachment.html>

From strk at kbt.io  Sat Oct  7 01:30:58 2017
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 7 Oct 2017 10:30:58 +0200
Subject: [geos-devel] Thoughts on Backporting the emit warning message
 to GEOS 3.6 and GEOS 3.5
In-Reply-To: <004201d33ee6$a165a630$e430f290$@pcorp.us>
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
Message-ID: <20171007083058.tjztagjimqfesamu@liz>

On Fri, Oct 06, 2017 at 05:03:58PM -0400, Regina Obe wrote:
> I'm only softly proposing this but want to get a feel if anyone has issues
> before we do.
> 
> https://git.osgeo.org/gogs/geos/geos/pulls/14
> 
> I would like to back port this pull to GEOS 3.6 and GEOS 3.5 branches.

I think only bugfixes should be backported.

--strk;

From strk at kbt.io  Sat Oct  7 02:06:43 2017
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 7 Oct 2017 11:06:43 +0200
Subject: [geos-devel] MOTION to accept this patch [geos] Emit a warning
 at compile time about C++ API being unstable (#14) - PASSES
In-Reply-To: <004101d33ee5$7a6b4680$6f41d380$@pcorp.us>
References: <004101d33ee5$7a6b4680$6f41d380$@pcorp.us>
Message-ID: <20171007090643.2fxlfjccmjbguux2@liz>

On Fri, Oct 06, 2017 at 04:55:43PM -0400, Regina Obe wrote:
> MOTION  PASSES to accept this PULL request for GEOS 3.7.0  with 3+, one -0 and 2 abstains
> 
> https://git.osgeo.org/gogs/geos/geos/pulls/14
> 
> 
> Dale +1
> Regina +1
> Sandro +1
> Hobu -0
> Paul - did not vote
> Martin - did not vote

Landed in master as commit aae36582e743505c863c5767e5989da48f84d5a6
See https://git.osgeo.org/gogs/geos/geos/commit/aae36582

--strk;

From penorman at mac.com  Sat Oct  7 03:30:26 2017
From: penorman at mac.com (Paul Norman)
Date: Sat, 07 Oct 2017 03:30:26 -0700
Subject: [geos-devel] Thoughts on Backporting the emit warning message
 to GEOS 3.6 and GEOS 3.5
In-Reply-To: <29003962.Qj20OlUqS0@even-i700>
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
 <29003962.Qj20OlUqS0@even-i700>
Message-ID: <9c254762-b391-7606-d851-2767d4900a55@mac.com>

On 10/6/2017 2:13 PM, Even Rouault wrote:
>
> > 1) It's just a warning that shows when compiling code that uses the 
> C++ API
>
> > so doesn't impact existing compiles. No one has to change their compile
>
> > scripts.
>
> Not that I'd be impacted myself, but that is not true if they build with
>
> -Werror, or expect that their build log remains clean if it was already.
>

Yes - and for development and CI this is a good practice. That's why I 
think it's better to avoid adding this to old versions. It's not a 
versioning violating, but it will require some people to change scripts.

> (but my experience building GDAL with -Werror and most pedantic 
> warnings turned on has demonstrated that for a lot of packages you 
> have to include external headers with compiler mechanism to 
> temporarily turn off warnings due to them)
>

GEOS, GDAL, and other system libraries should be included with -isystem. 
This will stop warnings being generated for questionable syntax, etc. I 
don't think it will suppress warnings that *are* generated, such as in 
this case where there's an explicit preprocessor directive.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171007/934959e2/attachment-0001.html>

From strk at kbt.io  Sat Oct  7 04:17:05 2017
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 7 Oct 2017 13:17:05 +0200
Subject: [geos-devel] Thoughts on Backporting the emit warning message
 to GEOS 3.6 and GEOS 3.5
In-Reply-To: <9c254762-b391-7606-d851-2767d4900a55@mac.com>
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
 <29003962.Qj20OlUqS0@even-i700>
 <9c254762-b391-7606-d851-2767d4900a55@mac.com>
Message-ID: <20171007111705.mjyfevpil5ncxptl@liz>

On Sat, Oct 07, 2017 at 03:30:26AM -0700, Paul Norman wrote:
> On 10/6/2017 2:13 PM, Even Rouault wrote:

> > -Werror, or expect that their build log remains clean if it was already.
> 
> Yes - and for development and CI this is a good practice.

Pull requests adding -Werror to our CI bots are welcome
  .drone.yml     - PR to git.osgeo.org please
  .gitlab-ci.yml - PR to gitlab.com please
  .travis.yml    - PR to github.com please

I don't think Jenkins bots have in-repository configuration but
Regina might know better.

Ticketting this task would be also helpful.

--strk;

From gdt at lexort.com  Sat Oct  7 07:24:40 2017
From: gdt at lexort.com (Greg Troxel)
Date: Sat, 07 Oct 2017 10:24:40 -0400
Subject: [geos-devel] Thoughts on Backporting the emit warning message
	to GEOS 3.6 and GEOS 3.5
In-Reply-To: <20171007083058.tjztagjimqfesamu@liz> (Sandro Santilli's message
 of "Sat, 7 Oct 2017 10:30:58 +0200")
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
 <20171007083058.tjztagjimqfesamu@liz>
Message-ID: <smu7ew79gt3.fsf@linuxpal.mit.edu>


Sandro Santilli <strk at kbt.io> writes:

> On Fri, Oct 06, 2017 at 05:03:58PM -0400, Regina Obe wrote:
>> I'm only softly proposing this but want to get a feel if anyone has issues
>> before we do.
>> 
>> https://git.osgeo.org/gogs/geos/geos/pulls/14
>> 
>> I would like to back port this pull to GEOS 3.6 and GEOS 3.5 branches.
>
> I think only bugfixes should be backported.

(I am not caught up on this whole thread) The point about -Werror is an
excellent one.  For that reason, I don't think backporting is a good
idea.  And I agree with strk about only bugfixes, more or less.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20171007/5e750094/attachment.sig>

From lr at pcorp.us  Sat Oct  7 08:51:01 2017
From: lr at pcorp.us (Regina Obe)
Date: Sat, 7 Oct 2017 11:51:01 -0400
Subject: [geos-devel] Thoughts on Backporting the emit warning
	message	to GEOS 3.6 and GEOS 3.5
In-Reply-To: <smu7ew79gt3.fsf@linuxpal.mit.edu>
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
 <20171007083058.tjztagjimqfesamu@liz> <smu7ew79gt3.fsf@linuxpal.mit.edu>
Message-ID: <000201d33f84$13dadda0$3b9098e0$@pcorp.us>

Okay I'm fine with that.

Thanks all for input and Even's note about the -wError case.

-----Original Message-----
From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Greg Troxel
Sent: Saturday, October 07, 2017 10:25 AM
To: Sandro Santilli <strk at kbt.io>
Cc: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] Thoughts on Backporting the emit warning message to GEOS 3.6 and GEOS 3.5


Sandro Santilli <strk at kbt.io> writes:

> On Fri, Oct 06, 2017 at 05:03:58PM -0400, Regina Obe wrote:
>> I'm only softly proposing this but want to get a feel if anyone has 
>> issues before we do.
>> 
>> https://git.osgeo.org/gogs/geos/geos/pulls/14
>> 
>> I would like to back port this pull to GEOS 3.6 and GEOS 3.5 branches.
>
> I think only bugfixes should be backported.

(I am not caught up on this whole thread) The point about -Werror is an excellent one.  For that reason, I don't think backporting is a good idea.  And I agree with strk about only bugfixes, more or less.


From penorman at mac.com  Sun Oct  8 02:17:06 2017
From: penorman at mac.com (Paul Norman)
Date: Sun, 08 Oct 2017 02:17:06 -0700
Subject: [geos-devel] Thoughts on Backporting the emit warning message
 to GEOS 3.6 and GEOS 3.5
In-Reply-To: <20171007111705.mjyfevpil5ncxptl@liz>
References: <004201d33ee6$a165a630$e430f290$@pcorp.us>
 <29003962.Qj20OlUqS0@even-i700> <9c254762-b391-7606-d851-2767d4900a55@mac.com>
 <20171007111705.mjyfevpil5ncxptl@liz>
Message-ID: <fa286302-08a4-7739-49eb-380ce290a678@mac.com>

On 10/7/2017 4:17 AM, Sandro Santilli wrote:
> On Sat, Oct 07, 2017 at 03:30:26AM -0700, Paul Norman wrote:
>> On 10/6/2017 2:13 PM, Even Rouault wrote:
>>> -Werror, or expect that their build log remains clean if it was already.
>> Yes - and for development and CI this is a good practice.
> Pull requests adding -Werror to our CI bots are welcome

I was speaking of practices for users of GEOS. I'm not developing any 
libraries currently, so I don't know what best practices are there.

From gdt at lexort.com  Sun Oct  8 17:04:15 2017
From: gdt at lexort.com (Greg Troxel)
Date: Sun, 08 Oct 2017 20:04:15 -0400
Subject: [geos-devel] [postgis-devel]  GEOS C++ API deprecated?
In-Reply-To: <CABUeae8LWv0SHizsJfY+fictpiu2ovkg2Da=ZxDLhJhuUZvaoQ@mail.gmail.com>
 (Mateusz Loskot's message of "Wed, 4 Oct 2017 09:14:13 +0200")
References: <CABUeae9=hAkTb5AM3GFRq1cGiUoSvkUtkeyXV3CsEBNVsYmHsg@mail.gmail.com>
 <20171001184751.ewyxexosya4r55cf@liz>
 <CABUeae-XE_7nymty97rYhXnTsHQEMYwnMnL+HHWSZbSUij6GPA@mail.gmail.com>
 <4c20b566-7fa9-c969-b245-ff9386adc32f@xs4all.nl>
 <CABUeae85tr+49wtW0Z7517oq-hp8Fy7A_krMnHCdYPpXqXbHfQ@mail.gmail.com>
 <caa35024-43b6-be8d-e9fd-287a8f570d5f@xs4all.nl>
 <smua817ix9y.fsf@linuxpal.mit.edu>
 <CABUeae8LWv0SHizsJfY+fictpiu2ovkg2Da=ZxDLhJhuUZvaoQ@mail.gmail.com>
Message-ID: <smuh8v9xk3k.fsf@linuxpal.mit.edu>

Mateusz Loskot <mateusz at loskot.net> writes:

>> It is a problem to have APIs that are not stable, regardless of
>> language.  Others, once they realize this, will try not to use APIs at
>> all :-)
>
> Greg, I do understand it. I still keep my position (no longer relevant
> for the GEOS decision outcome)
> Let me summarise my point,
>
> I develop a software. I use lib X. I use whichever lib X's API I prefer.
> Someone spots my software and packages.
> After a few released versions, lib X breaks API.
> The old version works for me, so I stick to it.
> Now, I'm the troublemaker.
> Maintainer of the package is trying to force my project to switch.
> She/He fails to convince me and turns the spears towards the lib X.
> Now, the lib X is the bad guy.

> Now, that is a very unacceptable practice for me, no matter how high and
> good are intentions of the maintainer.

I see your point.

>From the packaging point of view, one wants to update X, and keep your
software.  And not to keep multiple versions of libraries.

The combination of API changes, packages that don't have releases with
the new API, packaging systems not wanting to have multiple versions of
many packages, and wanting to keep as much software packaged as
possible, leads to not having a solution in some cases.  I think your
preference is just to drop the package that doesn't build anymore,
without malice, and without complaining.  That seems totally reasonable
and I think I'm coming around to that, since it's essentially what would
have happened in the end, without as much angst.

> That, combined with some smaller incidents or commentary
> directed to such disobedient open source project(s)
> may raise the blood pressure quite a lot.

Understood.  I'm sorry if I contributed to that; I was really just trying
to figure out how to decide how much pain to impose on users of which
package, given that it wasn't really possible to make everything happy
at once.

> However, in GEOS, I acknowledge there is significant difference of
> opinions here and, without any window dressing, I've now respected
> that.
>
> Greg and Bas, any disprespect that I might have generated against you
> was unintentional, please accept my apologies.

No problem - while it's clear there was disagreement, I always believed
everyone was working towards the overall interests of the Free Software
world.  Thank you for taking the time to explain your thoughts.

Greg

