From strk at keybit.net  Tue Jun  5 13:31:47 2007
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] [karl@flightaware.com: Bug in geos configure --
	requires python even if python wasn't enabled or was disabled]
Message-ID: <20070605173147.GB47747@keybit.net>

----- Forwarded message from Karl Lehenbauer <karl@flightaware.com> -----

Date: Tue, 5 Jun 2007 12:12:49 -0500
From: Karl Lehenbauer <karl@flightaware.com>
X-Mailer: Apple Mail (2.752.3)
Subject: Bug in geos configure -- requires python even if python wasn't enabled or was disabled
To: strk@keybit.net

The culprit seems to be the AM_PATH_PYTHON in configure.in.  It  
should come inside the if statement where it checks to see if python  
is being used.

I tested this and it seems to work.

This is using the RC4 version.

Regards,

Karl Lehenbauer

----- End forwarded message -----

-- 

 ()   ASCII Ribbon Campaign
 /\   Keep it simple! 


From frank.koormann at intevation.de  Wed Jun  6 03:22:33 2007
From: frank.koormann at intevation.de (Frank Koormann)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] [karl@flightaware.com: Bug in geos configure --
	requires python even if python wasn't enabled or was disabled]
In-Reply-To: <20070605173147.GB47747@keybit.net>
References: <20070605173147.GB47747@keybit.net>
Message-ID: <20070606072233.GA4818@intevation.de>

* strk <strk@keybit.net> [070605 19:32]:
> ----- Forwarded message from Karl Lehenbauer <karl@flightaware.com> -----
> The culprit seems to be the AM_PATH_PYTHON in configure.in.  It  
> should come inside the if statement where it checks to see if python  
> is being used.
> 
> I tested this and it seems to work.
> 
> This is using the RC4 version.

The problem has been reported as bug 141:
http://postgis.refractions.net/bugs/bug.php?op=show&bugid=141

and is fixed in SVN trunk.

Btw, the "Download hourly SVN snapshot of GEOS code" section is broken.
The directory name of the extracted tarball indicates 3.0.0rc1, the last
ChangeLog entry dates "2006-10-30"!

Cheers,

        Frank
 
-- 
Frank Koormann    |   ++49-541-335 08 30    |   http://www.intevation.net/
Intevation GmbH, Osnabr?ck, DE | Commercial Register Osnabr?ck, HR B 18998
Managing Directors: Frank Koormann, Bernhard Reiter, Dr. Jan-Oliver Wagner

From mateusz at loskot.net  Fri Jun  8 10:54:37 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Re: AW: [GEOS] missing geos_c.h.vc
In-Reply-To: <5AC0F51A926CD442BC08D55DA7DAB1D4012ABD44@3mxma1r.hpi.uni-potsdam.de>
References: <5AC0F51A926CD442BC08D55DA7DAB1D406268461@3mxma1r.hpi.uni-potsdam.de>
	<4665A505.6050108@loskot.net>
	<5AC0F51A926CD442BC08D55DA7DAB1D4012ABD44@3mxma1r.hpi.uni-potsdam.de>
Message-ID: <46696DAD.5020206@loskot.net>

Baumann, Konstantin wrote:
> I know, how I can fix this by hand, but I would like to have it
> automatically done, since I would like to add GEOS as an external SVN
> reference in our SVN project tree and therefore I need it to be
> checkout-able and compilable without manual work done in between...
> 
> Can't you reference the "version.h" from headers/geos/version.h from
> within geos_c.h(.in)? Then you do not need to duplicate the
> versioning information...

Hi Konstantin,

I tested and applied your suggestion to the SVN,
so now the problem with generating geos_c.h.in for VC++ seems to be
solved. Thanks!

> About the warnings: if you plan to fix them, leave the warnings on...
> :-)

Yes, I'm cleaning them day by day.

p.s. I'm pushing my reply to the GEOS list so we have archived
information about source of this patch above.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Mon Jun 11 10:10:01 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] What's the roadmap? 
Message-ID: <466D57B9.1000605@loskot.net>

Hi,

What is the current roadmap for GEOS?
Do we have all JTS 1.7 features included or there are some missing?
I've noticed there are some features in the JTS CVS version that are
not included in GEOS SVN.

I'm going to update a few things but I'd like to not to mess
or de-sync anything in coming stable GEOS 3.0.0.

I think it would be helpful to draw status of current GEOS
in comparison to current JTS version.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Mon Jun 11 12:09:46 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] [Fwd: [mapguide-trac] #172: Bug in Selection polygon
 from PostGiS (PostgreSql)]
Message-ID: <466D73CA.4050302@loskot.net>

Hi,

I'm forwarding Ticket reported to the MapGuide Trac system:

http://trac.osgeo.org/mapguide/ticket/172#comment:6

It's also related to GEOS and may be interesting.

Shortly, one of datasource supported by MapGuide is OGR.
OGR uses GEOS, so MapGuide indirectly uses GEOS capabilities
for various geometric operations.

I believe it's worth to check the whole ticket, but below
I pasted most interesting comment:

############################################################################
#172: Bug in Selection polygon from PostGiS (PostgreSql)
------------------------------------------+---------------------------------
 Reporter:  maciej.skorczewski@procad.pl  |         Owner:
     Type:  defect                        |        Status:  new
 Priority:  high                          |     Milestone:
Component:  General                       |       Version:  1.2.0
 Severity:  major                         |    Resolution:
 Keywords:                                |   External_id:  939561
------------------------------------------+---------------------------------
Comment (by ksgeograf):

 I have been examining the problem, using a custom build of the OGR
 provider.
 It is true that without GEOS support in OGR, the Intersect only does a
 BBOX check.

 However, merely enabling GEOS will not work, as the viewer sends a square
 that is orthogonal to the axes (like a BBOX). The GEOS library will
 interpret this as another BBOX, and only perform the BBOX check anyway.

 When I change the polgyon sent from the viewer to a triangle, it takes 22
 seconds to calculate the Intersects result with a polygon with 8000
 linesegments. I have a 2+ GHz machine.

 It seems that GEOS always builds a full intersection matrix, before
 returning the result. This is obviously not optimal for a simple hit test.
 Even with this knowledge, I still don't see how it can take 22 seconds to
 calculate 8000 * 3 intersections.

 Can someone explain this, or how to fix it?
############################################################################


Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From todd.jellett at caris.com  Tue Jun 12 10:02:59 2007
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug
Message-ID: <466EA793.9060201@caris.com>

Hi all,

First question I'd like to ask is "Are the binary predicates supposed to 
be mutually exclusive?". For any 2 geometries, is there only one binary 
predicate that is a member of (disjoint, equal, touches, contains, 
within, overlaps) that can be true and all the others must be false? 
Note I am leaving out intersects because it is a special case of the 
other predicates. It is not the same type of spatial relation as 
contains/within.

If this is so, I'd like to report a bug. Given the 2 simple single ring 
polygons:

GeomA = POLYGON((0.0 0.0), (5.0 0.0), (5.0 5.0), (0.0 5.0), (0.0 0.0))
and
GeomB = POLYGON((5.0 5.0), (0.0 5.0), (0.0 0.0), (5.0 0.0), (5.0 5.0))

Note that these are essentially the same ring, just starting at a 
different position on the ring.

Running all of the above predicates (disjoint, equal, touches, contains, 
within and overlaps) for both GeomA->GeomB and GeomB->GeomA I get:

GeomA->GeomB
Disjoint   False
Equal      True
Touch     False
Contain   True
Within     True
Overlap   False

GeomB->GeomA
Disjoint   False
Equal      True
Touch     False
Contain   True
Within     True
Overlap   False

As you can see, all 3 of (equals, contains, and within) come back as True.

Shouldn't this just be an equal?
How can 2 simple geometries be equal *and* contained *and* within? This 
does not make sense.

Although these geometries are simple, I suspect this behavior holds for 
all geometries that are "equivalent" but just start/end on a different 
point.

I'm testing with v3.0.0 rc4

Todd


From todd.jellett at caris.com  Tue Jun 12 11:05:58 2007
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug - Even Worse!
In-Reply-To: <466EA793.9060201@caris.com>
References: <466EA793.9060201@caris.com>
Message-ID: <466EB656.5010104@caris.com>

It turns out that this is also the case for identical geometries!

If you take just GeomA and run all the listed binary predicates (below) 
against itself, you get exactly the same as below.

Running GeomA->GeomA I get:
Disjoint    False
Equal       True
Touch      False
Contain    True
Within      True
Overlap    False

Running a simple geometry against itself should return True for Equals 
*only*. It is ambiguous to be also contained and within.

Todd

Todd Jellett wrote:
> Hi all,
>
> First question I'd like to ask is "Are the binary predicates supposed 
> to be mutually exclusive?". For any 2 geometries, is there only one 
> binary predicate that is a member of (disjoint, equal, touches, 
> contains, within, overlaps) that can be true and all the others must 
> be false? Note I am leaving out intersects because it is a special 
> case of the other predicates. It is not the same type of spatial 
> relation as contains/within.
>
> If this is so, I'd like to report a bug. Given the 2 simple single 
> ring polygons:
>
> GeomA = POLYGON((0.0 0.0), (5.0 0.0), (5.0 5.0), (0.0 5.0), (0.0 0.0))
> and
> GeomB = POLYGON((5.0 5.0), (0.0 5.0), (0.0 0.0), (5.0 0.0), (5.0 5.0))
>
> Note that these are essentially the same ring, just starting at a 
> different position on the ring.
>
> Running all of the above predicates (disjoint, equal, touches, 
> contains, within and overlaps) for both GeomA->GeomB and GeomB->GeomA 
> I get:
>
> GeomA->GeomB
> Disjoint   False
> Equal      True
> Touch     False
> Contain   True
> Within     True
> Overlap   False
>
> GeomB->GeomA
> Disjoint   False
> Equal      True
> Touch     False
> Contain   True
> Within     True
> Overlap   False
>
> As you can see, all 3 of (equals, contains, and within) come back as 
> True.
>
> Shouldn't this just be an equal?
> How can 2 simple geometries be equal *and* contained *and* within? 
> This does not make sense.
>
> Although these geometries are simple, I suspect this behavior holds 
> for all geometries that are "equivalent" but just start/end on a 
> different point.
>
> I'm testing with v3.0.0 rc4
>
> Todd
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From pramsey at refractions.net  Tue Jun 12 11:42:14 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug - Even Worse!
In-Reply-To: <466EB656.5010104@caris.com>
References: <466EA793.9060201@caris.com> <466EB656.5010104@caris.com>
Message-ID: <466EBED6.2090708@refractions.net>

The OGC SFSQL document says that

A.Within(B) implies Insersection(A,B) == A

And Contains is just defined for commutative purposes against Within():

A.Within(B) implies B.Contains(A).

So, you might not like the semantics, but they are implemented as 
defined by the standards body.

Paul

Todd Jellett wrote:
> It turns out that this is also the case for identical geometries!
> 
> If you take just GeomA and run all the listed binary predicates (below) 
> against itself, you get exactly the same as below.
> 
> Running GeomA->GeomA I get:
> Disjoint    False
> Equal       True
> Touch      False
> Contain    True
> Within      True
> Overlap    False
> 
> Running a simple geometry against itself should return True for Equals 
> *only*. It is ambiguous to be also contained and within.
> 
> Todd

-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From todd.jellett at caris.com  Tue Jun 12 13:01:28 2007
From: todd.jellett at caris.com (Todd Jellett)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug - Even Worse!
In-Reply-To: <466EBED6.2090708@refractions.net>
References: <466EA793.9060201@caris.com> <466EB656.5010104@caris.com>
	<466EBED6.2090708@refractions.net>
Message-ID: <466ED168.9070109@caris.com>

Read the post Paul. I very aware of what the spec is and says.

Note that nowhere do I talk about Intersection(A,B). I'm talking about 
the inverse of disjoint(), intersects(), the Binary Predicate.

A.equals(B) = TRUE implies that A.intersects(B) = TRUE  
A.touches(B) = TRUE implies that A.intersects(B) = TRUE
A.contains(B) = TRUE implies that A.intersects(B) = TRUE
A.within(B) = TRUE implies that A.intersects(B) = TRUE
A.overlaps(B) = TRUE implies that A.intersects(B) = TRUE

on the other hand this *does not* work the same way for contains/within

A.equals(B) = TRUE *does not imply* that A.within(B) = TRUE  
A.touches(B) = TRUE *does not imply* that A.within(B) = TRUE
A.contains(B) = TRUE *does not imply* that A.within(B) = TRUE
A.disjoint(B) = TRUE *does not imply* that A.within(B) = TRUE

So I excluded the binary predicate intersects() to simplify my example 
(which you seem to have missed altogether).

My example has a simple 1-ring 5-point polygon that is a square. When 
this geometry is tested against itself by calling each of the binary 
predicates in turn, I observe that A.equals(B) = TRUE, A.contains(B) = 
TRUE *and* A.within(B) = TRUE. This is what I am questioning the 
validity of.

Nowhere, absolutely nowhere in the OGC SFSQL does it say that a single 
geometry (any two geometries for that matter) can be equal to each 
other, and at the same time have A be contained in itself (or another 
geometry B) *and* have A within itself (or another geometry B).

If this is how it is supposed to be then the equals() predicate is 
redundant and could be eliminated. (equal = contains && within).

Todd

Paul Ramsey wrote:
> The OGC SFSQL document says that
>
> A.Within(B) implies Insersection(A,B) == A
>
> And Contains is just defined for commutative purposes against Within():
>
> A.Within(B) implies B.Contains(A).
>
> So, you might not like the semantics, but they are implemented as 
> defined by the standards body.
>
> Paul
>
> Todd Jellett wrote:
>> It turns out that this is also the case for identical geometries!
>>
>> If you take just GeomA and run all the listed binary predicates 
>> (below) against itself, you get exactly the same as below.
>>
>> Running GeomA->GeomA I get:
>> Disjoint    False
>> Equal       True
>> Touch      False
>> Contain    True
>> Within      True
>> Overlap    False
>>
>> Running a simple geometry against itself should return True for 
>> Equals *only*. It is ambiguous to be also contained and within.
>>
>> Todd
>

From pramsey at refractions.net  Tue Jun 12 13:17:58 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug - Even Worse!
In-Reply-To: <466ED168.9070109@caris.com>
References: <466EA793.9060201@caris.com>
	<466EB656.5010104@caris.com>	<466EBED6.2090708@refractions.net>
	<466ED168.9070109@caris.com>
Message-ID: <466ED546.5020101@refractions.net>

Todd,

Perhaps we are talking at cross purposes here. The definition of 
Within() on page 2-27 of SFSQL 1.1 seems to imply to me that A.Within(A) 
is TRUE. So A.Contains(A) is also TRUE.

And I agree, if that is the case, then Equals() would be redundant, 
since the only way A.Contains(B) and A.Within(B) is if A.Equals(B).

I only used "Intersection()" because I couldn't type in the 
upside-down-U set intersection symbol that appears in the manual.

Do you feel page 2-27 means something else?

Best regards,

Paul

Todd Jellett wrote:
> Read the post Paul. I very aware of what the spec is and says.
> 
> Note that nowhere do I talk about Intersection(A,B). I'm talking about 
> the inverse of disjoint(), intersects(), the Binary Predicate.
> 
> A.equals(B) = TRUE implies that A.intersects(B) = TRUE  A.touches(B) = 
> TRUE implies that A.intersects(B) = TRUE
> A.contains(B) = TRUE implies that A.intersects(B) = TRUE
> A.within(B) = TRUE implies that A.intersects(B) = TRUE
> A.overlaps(B) = TRUE implies that A.intersects(B) = TRUE
> 
> on the other hand this *does not* work the same way for contains/within
> 
> A.equals(B) = TRUE *does not imply* that A.within(B) = TRUE  
> A.touches(B) = TRUE *does not imply* that A.within(B) = TRUE
> A.contains(B) = TRUE *does not imply* that A.within(B) = TRUE
> A.disjoint(B) = TRUE *does not imply* that A.within(B) = TRUE
> 
> So I excluded the binary predicate intersects() to simplify my example 
> (which you seem to have missed altogether).
> 
> My example has a simple 1-ring 5-point polygon that is a square. When 
> this geometry is tested against itself by calling each of the binary 
> predicates in turn, I observe that A.equals(B) = TRUE, A.contains(B) = 
> TRUE *and* A.within(B) = TRUE. This is what I am questioning the 
> validity of.
> 
> Nowhere, absolutely nowhere in the OGC SFSQL does it say that a single 
> geometry (any two geometries for that matter) can be equal to each 
> other, and at the same time have A be contained in itself (or another 
> geometry B) *and* have A within itself (or another geometry B).
> 
> If this is how it is supposed to be then the equals() predicate is 
> redundant and could be eliminated. (equal = contains && within).
> 
> Todd
> 
> Paul Ramsey wrote:
>> The OGC SFSQL document says that
>>
>> A.Within(B) implies Insersection(A,B) == A
>>
>> And Contains is just defined for commutative purposes against Within():
>>
>> A.Within(B) implies B.Contains(A).
>>
>> So, you might not like the semantics, but they are implemented as 
>> defined by the standards body.
>>
>> Paul
>>
>> Todd Jellett wrote:
>>> It turns out that this is also the case for identical geometries!
>>>
>>> If you take just GeomA and run all the listed binary predicates 
>>> (below) against itself, you get exactly the same as below.
>>>
>>> Running GeomA->GeomA I get:
>>> Disjoint    False
>>> Equal       True
>>> Touch      False
>>> Contain    True
>>> Within      True
>>> Overlap    False
>>>
>>> Running a simple geometry against itself should return True for 
>>> Equals *only*. It is ambiguous to be also contained and within.
>>>
>>> Todd
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From chodgson at refractions.net  Tue Jun 12 13:29:45 2007
From: chodgson at refractions.net (Chris Hodgson)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug - Even Worse!
In-Reply-To: <466ED168.9070109@caris.com>
References: <466EA793.9060201@caris.com>
	<466EB656.5010104@caris.com>	<466EBED6.2090708@refractions.net>
	<466ED168.9070109@caris.com>
Message-ID: <466ED809.7040408@refractions.net>

With all due respect I think you need to read the spec again. Below is a 
very nice example from a fairly reliable source that I believe clearly 
indicates that:

A.equals(B) -> A.contains(B), A.within(B)

Or simply that it is always the case that:

A.contains(A) and A.within(A)

http://publib.boulder.ibm.com/infocenter/db2luw/v8/index.jsp?topic=/com.ibm.db2.udb.doc/opt/csbp4181.htm

Basically, neither within() nor contains() care about whether the 
boundaries of the geometries touch. Equals IS effectively redundant as 
you suggest, and that is perfectly reasonable as about half of the 
functions are "redundant" in the same way:

A.intersects(B) <=> !A.disjoint(B)
A.contains(B) <=> B.within(A)
etc.

I would imagine they are just there for completeness and clarity.

Regards,
Chris

Todd Jellett wrote:
> Read the post Paul. I very aware of what the spec is and says.
> 
> Note that nowhere do I talk about Intersection(A,B). I'm talking about 
> the inverse of disjoint(), intersects(), the Binary Predicate.
> 
> A.equals(B) = TRUE implies that A.intersects(B) = TRUE  A.touches(B) = 
> TRUE implies that A.intersects(B) = TRUE
> A.contains(B) = TRUE implies that A.intersects(B) = TRUE
> A.within(B) = TRUE implies that A.intersects(B) = TRUE
> A.overlaps(B) = TRUE implies that A.intersects(B) = TRUE
> 
> on the other hand this *does not* work the same way for contains/within
> 
> A.equals(B) = TRUE *does not imply* that A.within(B) = TRUE  
> A.touches(B) = TRUE *does not imply* that A.within(B) = TRUE
> A.contains(B) = TRUE *does not imply* that A.within(B) = TRUE
> A.disjoint(B) = TRUE *does not imply* that A.within(B) = TRUE
> 
> So I excluded the binary predicate intersects() to simplify my example 
> (which you seem to have missed altogether).
> 
> My example has a simple 1-ring 5-point polygon that is a square. When 
> this geometry is tested against itself by calling each of the binary 
> predicates in turn, I observe that A.equals(B) = TRUE, A.contains(B) = 
> TRUE *and* A.within(B) = TRUE. This is what I am questioning the 
> validity of.
> 
> Nowhere, absolutely nowhere in the OGC SFSQL does it say that a single 
> geometry (any two geometries for that matter) can be equal to each 
> other, and at the same time have A be contained in itself (or another 
> geometry B) *and* have A within itself (or another geometry B).
> 
> If this is how it is supposed to be then the equals() predicate is 
> redundant and could be eliminated. (equal = contains && within).
> 
> Todd
> 
> Paul Ramsey wrote:
>> The OGC SFSQL document says that
>>
>> A.Within(B) implies Insersection(A,B) == A
>>
>> And Contains is just defined for commutative purposes against Within():
>>
>> A.Within(B) implies B.Contains(A).
>>
>> So, you might not like the semantics, but they are implemented as 
>> defined by the standards body.
>>
>> Paul
>>
>> Todd Jellett wrote:
>>> It turns out that this is also the case for identical geometries!
>>>
>>> If you take just GeomA and run all the listed binary predicates 
>>> (below) against itself, you get exactly the same as below.
>>>
>>> Running GeomA->GeomA I get:
>>> Disjoint    False
>>> Equal       True
>>> Touch      False
>>> Contain    True
>>> Within      True
>>> Overlap    False
>>>
>>> Running a simple geometry against itself should return True for 
>>> Equals *only*. It is ambiguous to be also contained and within.
>>>
>>> Todd
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From mbdavis at refractions.net  Tue Jun 12 17:14:11 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] strange behaviour of LinearRing::within()
Message-ID: <466F0CA3.7070106@refractions.net>

Marco,

I suspect this is because you are expecting linear rings to "contains" 
the area they enclose. But this is not how linear rings are defined - 
they are 1-dimensional features, not areal ones.  A linear ring would 
only be "within" another one if its linework lay exactly on top of the 
other one's linework.   GEOS is behaving correctly, according to the SFS 
geometry model.

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From mbdavis at refractions.net  Tue Jun 12 17:17:08 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Binary Predicate Bug - Even Worse!
Message-ID: <466F0D54.7040009@refractions.net>

I agree with Chris and Paul.  The predicates are clearly not intended to 
be mutually disjoint.  They are probably intended to capture the most 
common use cases in single functions (which allows for some aggressive 
optimization - some day 8^).

Refractions: 3, Jellet: 1 - we win!  8^)

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From mbdavis at refractions.net  Tue Jun 12 17:27:14 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] GEOS & DWithin/Beyond
Message-ID: <466F0FB2.4080607@refractions.net>

I'm not 100% sure of the semantics of DWithin and Beyond, but I assume 
that they test if two geometries are within or further than a given 
distance from each other. 

These seem like complementary functions, so I'm not sure why both are 
provided - but perhaps it's awkward to express negation in Filter?

Anyway, GEOS, like JTS, provides the isWithinDistance method which 
computes this predicate.

As a further note, the reason for having this as a separate predicate 
rather than simply using distance() is that in theory isWithinDistance 
can be optimized more easily and aggresively than distance().

Hope this helps...   Martin

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From mbdavis at refractions.net  Tue Jun 12 17:47:14 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Buffer op - end cap styles
Message-ID: <466F1462.3010600@refractions.net>

Ben,

This is a few months old now, but I'm just rejoing this list and am 
going thru some old posts...

The reason you're not noticing any difference from specifying a round 
endcap style is that this is the default.

As for modifying the buffer algorithm to produce different width 
buffers, yep, this is possible, with a bit of work. We'd be interested 
in talking if you have funding for this...  8^)

What is your use case for this?  Did you just want a set of linestrings 
with each one buffered by a different, but constant amount?  (E.g. 
equivalent to buffering each individually and then unioning them)  Or 
did you want to buffer a linestring with a varying buffer width along 
the linestring?  This latter is the more interesting & challenging 
case.  If that, could you comment on what you'd expect to pass in as 
arguments to such a routine?  (I.e. how would you want to specify the 
varying buffer width?)

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From pramsey at refractions.net  Tue Jun 12 18:17:55 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] GEOS & DWithin/Beyond
In-Reply-To: <466F0FB2.4080607@refractions.net>
References: <466F0FB2.4080607@refractions.net>
Message-ID: <466F1B93.4030903@refractions.net>

Martin Davis wrote:

> As a further note, the reason for having this as a separate predicate 
> rather than simply using distance() is that in theory isWithinDistance 
> can be optimized more easily and aggresively than distance().

In practice as well, Mark Leslie will be committing an ST_DWithin to 
PostGIS shortly that transparently does the Right Thing to index the call.

-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From marco.hugentobler at karto.baug.ethz.ch  Wed Jun 13 05:25:56 2007
From: marco.hugentobler at karto.baug.ethz.ch (Marco Hugentobler)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] strange behaviour of LinearRing::within()
In-Reply-To: <466F0CA3.7070106@refractions.net>
References: <466F0CA3.7070106@refractions.net>
Message-ID: <200706131125.56357.marco.hugentobler@karto.baug.ethz.ch>

On Tuesday 12 June 2007 23:14:11 Martin Davis wrote:
> Marco,
>
> I suspect this is because you are expecting linear rings to "contains"
> the area they enclose. But this is not how linear rings are defined -
> they are 1-dimensional features, not areal ones.  A linear ring would
> only be "within" another one if its linework lay exactly on top of the
> other one's linework.   GEOS is behaving correctly, according to the SFS
> geometry model.

Hi Martin,

Ok, I see. Thanks for clarification.

Marco

-- 
Dr. Marco Hugentobler
Institute of Cartography
ETH Zurich
marco.hugentobler@karto.baug.ethz.ch

From mateusz at loskot.net  Thu Jun 14 09:05:40 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] Any List of Supported Complilers?
In-Reply-To: <40a421600705102322g411cb643kbd6e72fa5bb5dc50@mail.gmail.com>
References: <40a421600705102304g78910860qf83fac43ac454928@mail.gmail.com>
	<40a421600705102322g411cb643kbd6e72fa5bb5dc50@mail.gmail.com>
Message-ID: <46713D24.1090504@loskot.net>

Ryan Chang wrote:
> I have searched the list archive for a "official" list of supported
> compilers but failed, so would anybody please give such a list, so that
> we can decide if it is applicable to compile it with Sun Studio10?

AFAIK, there is no official list of compilers.
GEOS is a standard C++ ISO code so general rule is to use not-too-old
C++ compiler.

Personally, I use GCC 4.x and Visual C++ (8.0) 2005.
I can confirm that Visual C++ 6.0 and 7.0 are not supported,
also old GCC won't work.

I don't have any access to Sun platform to test GEOS on it,
but may be you can give more details about what errors you're getting?

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From pramsey at refractions.net  Fri Jun 22 11:52:21 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] FOSS4G 2007 Call for Presentations Closes in ONE WEEK
Message-ID: <BC3FBCC4-A5FB-4E54-B1BC-96ACF0FC621B@refractions.net>

http://www.foss4g2007.org/

June 29 is the close of the Call for Presentations for FOSS4G (Free  
and Open Source Software for Geospatial). If you plan on giving a 25  
minute presentation at FOSS4G, make sure you get your abstract in  
before the deadline!

http://www.foss4g2007.org/presentations/

FOSS4G 2007 presentations are 25 minute talks, with 5 minute question  
and answer sessions at the end. Presentations cover the use or  
development of open source geospatial software. Anyone can can submit  
a presentation proposal and take part in the conference as a presenter.

Some topics of interest for this year are:

* Case Studies: Relate the experiences of you and your organization  
using open source geospatial. Where do things work well? Poorly? What  
problems did you solve, and at what cost? What do you recommend for  
others? Why?
* Benchmarks: Comparisons between pieces of geospatial software. How  
do features compare? Speed? Ease of use? What do you recommend for  
others?
* Visualization: Tell about your tips and tricks for effective  
visualization. How do you present information in a compelling way?  
3D? Cartographic tricks? Labelling and naming ideas? Graphs and  
hybrid map/data combinations?
* Development: What are the new developments in your open source  
geospatial software product? How does it work, how do people use it,  
what are the technical issues you are running into?
* Hacks and Mashing: Have you put together something novel or cool  
this year? What did you stick together, how did it work, show us your  
gizmo!
* Collaboration: What techniques are you using to improve  
collaboration between organizations and between individuals. Public  
geodata, collaborative data collection, data sharing, open standards,  
de facto standards, and more!
If you have an open source geospatial story to tell, we want to hear it!

DEMO THEATER

Looking to show off your project in a short format venue? Check out  
the demo theater! Note that space is limited, and sponsors get first  
priority for slots.

http://www.foss4g2007.org/exhibition/demotheatre/



From obaltzer at cs.dal.ca  Mon Jun 25 22:03:46 2007
From: obaltzer at cs.dal.ca (Oliver Baltzer)
Date: Fri Nov  2 20:53:42 2007
Subject: [geos-devel] TopologyException: Non-noded Intersection
Message-ID: <20070626020346.GA30338@frederic.cs.dal.ca>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Digital signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070625/a7034e48/attachment.bin
