From geos-trac at osgeo.org  Thu Oct  1 04:01:15 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 11:01:15 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.d910860c1a7e098319adf89d9f1de635@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by smani):

 Ok, bad news:

 https://github.com/manisandro/QGIS/commit/1738337ddea6d3242abd22bd8fc3b9d6b2ce3b2b
 {{{
     ********* Start testing of TestQgsGeos *********
     Config: Using QTest library 4.8.7, Qt 4.8.7
     PASS   : TestQgsGeos::initTestCase()
     FAIL!  : TestQgsGeos::lineIntersection(fixed) Compared values are not
 the same
        Actual (QString(resultwkt)): POINT (1.0000000000000000
 0.0000000000000000)
        Expected (wkt_result): POINT (2.0000000000000000
 0.0000000000000000)
        Loc: [/home/sandro/Documents/Devel/QGIS/qgis-
 master-2/tests/src/core/testqgsgeos.cpp(94)]
     PASS   : TestQgsGeos::cleanupTestCase()
     Totals: 2 passed, 1 failed, 0 skipped
     ********* Finished testing of TestQgsGeos *********
 }}}

 So intersection is running in full precision mode.

 From http://lists.osgeo.org/pipermail/geos-devel/2015-January/007086.html
 I had interpreted that GEOSGeometryPrecisionReducer_reduce would change
 the geometry factory of the reduced geometry. Did I get that wrong, or is
 more needed to have the operations run in reduced precision mode? Because
 that is what I'm ultimately interested in, the simple snap-to-grid is a
 start but not the full solution (and that could indeed be implemented
 stand-alone, without pulling in the GEOS C++ API as you pointed out on the
 mailing list).

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:14>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Oct  1 04:18:39 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 11:18:39 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.3f2f34c25c1238d8676cd7890bc0a64b@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 GeometryPrecisionReducer can change or not change the geometry factory of
 the reduced geometry, depending on how it is constructed. If you pass a
 new GeometryFactory to the constructor, it will use it for the output
 geometry, otherwise it will not. Your implementation is passing a
 PrecisionModel rather than a pointer to a GeometryFactory, that's the
 problem.

 This brings us to the need of exposing a GeometryFactory, more than a
 PrecisionModel.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:15>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Oct  1 04:20:51 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 11:20:51 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.dbe468758d78d995e861db47287daa88@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 From what I can tell the discussion about GeomtryFactory management
 stalled here:
 https://lists.osgeo.org/pipermail/geos-devel/2015-January/007097.html

 Should we re-take that on the mailing list ?

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:16>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Oct  1 04:23:19 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 11:23:19 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.bba2c5c9f454acc698a4a55463f260b5@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by smani):

 First thing to decide IMO is how to proceed for QGIS 2.10: I can fix my
 geos_extra to construct the precision reducer correctly, get the fix
 commited, and then as far as QGIS 2.10 is concerned things are ok and then
 we can take the time to design a proper C API for GEOS. If this is okay
 with you, I'll do that and then yes, we can continue where we left of on
 the mailing list.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:17>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Oct  1 04:24:11 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 11:24:11 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.60de56c258e1b432025007492049301a@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by smani):

 * QGIS 2.12 clearly

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:18>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Oct  1 04:27:45 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Oct 2015 11:27:45 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.283666de71ad311572844289e8373d92@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 QGIS matters are better discussed on the qgis mailing list, let's use it:
 https://lists.osgeo.org/pipermail/qgis-developer/2015-October/039418.html

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:19>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at keybit.net  Thu Oct  1 07:47:52 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 16:47:52 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20150930161603.GB8070@localhost>
References: <54AD2541.8040008@gmail.com> <20150107124456.GA15487@localhost>
	<54AD2F37.8080207@gmail.com> <20150107142558.GA15933@localhost>
	<54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
	<54AE732C.90908@gmail.com> <54B4F1AE.3030108@gmail.com>
	<20150114093823.GA5770@localhost> <20150930161603.GB8070@localhost>
Message-ID: <20151001144752.GD28946@localhost>

So to followup,
it is confirmed that the QGIS wrapper in its current incarnation
is not useful for the purpose of changing the precision model of the
operations.

Meanwhile I've worked on a reference-counting mechanism for
GeometryFactory that would allow us to expose a single function
to change a geometry's PrecisionModel (effectively it's reference
"GeometryFactory") in a way that avoids memory leaks.

Here's the code: https://github.com/libgeos/libgeos/pull/52

Basically each GeometryFactory will be holding a count of Geometry
objects referencing it. Every Geometry will signal its birth and death
to it. When you don't need a GeometryFactory anymore you can request
its auto-destruction and it'll stay alive only as long as any of its
child is will also be alive.

Explicitly deleting a GeometryFactory before any of its child would
become a coding error, in the current version of the code. Eventually,
this may change to be more tolerant (at the cost of growing the size
of a GeometryFactory to store all child pointers in a list).

With such kind of automatic memory management we'd be in a position
to expose at the C-API level a single function to change a
Geometry's precision. Such function would find or create an appropriate
GeometryFactory, assign it to the geometry and mark it for
auto-destruction. The calling code would have no need to ever know
about the existanc eof such GeometryFactory object.

How would you feel about such a change ?

--strk;

On Wed, Sep 30, 2015 at 06:16:03PM +0200, Sandro Santilli wrote:
> Sandro, I've been looking at the wrapper you added to QGIS
> but from what I read it doesn't seem that the geometry coming out
> of GEOSGeometryPrecisionReducer_reduce has an updated PrecisionModel,
> which means overlay operations won't be using that new model.
> 
> Do you confirm ?
> 
> If that's the case, the wrapper doesn't do much more than a
> grid-snapping (plus some topological fixes of the snapping),
> basically exposing no real management of PrecisionModels...
> 
> Are there tests to verify that ?
> 
> REF: https://trac.osgeo.org/geos/ticket/713
> 
> --strk;
> 
> On Wed, Jan 14, 2015 at 10:38:23AM +0100, Sandro Santilli wrote:
> > On Tue, Jan 13, 2015 at 11:21:34AM +0100, Sandro Mani wrote:
> > > 
> > > On 08.01.2015 13:08, Sandro Mani wrote:
> > > >So to wrap up, things currently look as follows (which I actually
> > > >think is quite neat!):
> > > >
> > > >
> > > >/** GEOSContextHandle_t internally keeps a reference count, set to
> > > >1 on creation
> > > > * - *All* methods producing a GEOSGeom increase the reference count
> > > > * - GEOSGeom_destroy decreses the GeometryFactory reference
> > > >count, if 0, it destroys the context
> > > > * - finishGEOS_r decreses the reference count, if 0, it destroys
> > > >the context
> > > > */
> > > >
> > > >/** GEOSGeom_clone() clones the geometry and applies
> > > >PrecisionReducer::reduce
> > > > *  if the PrecisionModel of the current context is different than
> > > >the that of
> > > > *  the passed geometry
> > > > */
> > > >
> > > >/** Set context handle precision model **/
> > > >void GEOSContextHandle_t
> > > >GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
> > > >void GEOSContextHandle_t
> > > >GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double
> > > >scale);
> > >
> > > So, what do you think? Worth pursuing this approach?
> > 
> > Sorry I'm not having much time to dedicate to this.
> > I'm not very sure about the approach, to be honest.
> > There are indeed 2 possible things one would want to do with PM:
> > 
> >  1. "advertise" the PM of a geometry, w/out rounding coords
> > 
> >  2. "set" the PM of a geometry, rounding coords
> > 
> > I'm not sure we ever want to allow for 1, to avoid wrong advertisement.
> > The signature in the current proposal makes 2 clear for the cloning
> > of a geometry, but we're still missing clear documentation about what
> > happens from the constructors. Would/should they round ?
> > 
> > Example, what should happen here:
> > 
> >   GEOSContextHandle_t h = initGEOS_r(...);
> >   GEOSCoordSequence *s = GEOSCoordSeq_create_r(h,2,2);
> >   GEOSContext_setPrecisionDouble(h);
> >   GEOSCoordSeq_setX_r(h, s, 0, 0);
> >   GEOSCoordSeq_setY_r(h, s, 0, 0);
> >   GEOSContext_setPrecisionFixed(h, 1);
> >   GEOSCoordSeq_setX_r(h, s, 1, 0.2);
> >   GEOSCoordSeq_setY_r(h, s, 1, 0.2);
> > 
> > Should the coordinate sequence contain 2 equal points after the above ?
> > And what about WKB/WKT parsing ?
> > 
> > It would help to gather more comments from others.
> > I've added Oliver and Sean in Cc as they took part of a precedent
> > discussion about this:
> > http://lists.osgeo.org/pipermail/geos-devel/2014-February/006780.html
> > 
> > --strk;
> > 
> >   ()   Free GIS & Flash consultant/developer
> >   /\   http://strk.keybit.net/services.html

From strk at keybit.net  Thu Oct  1 09:02:20 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 18:02:20 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20151001144752.GD28946@localhost>
References: <20150107124456.GA15487@localhost> <54AD2F37.8080207@gmail.com>
	<20150107142558.GA15933@localhost> <54AD5548.2040709@gmail.com>
	<20150108113752.GA7420@localhost> <54AE732C.90908@gmail.com>
	<54B4F1AE.3030108@gmail.com> <20150114093823.GA5770@localhost>
	<20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost>
Message-ID: <20151001160220.GB27345@localhost>

Sandro, others:
here's what I'm thinking to add as the single new signature
to the C-API for GEOS-3.6.0, what do you think ?

 /*
  * Set the geometry's precision, optionally rounding all its
  * coordinates to the precision grid (if it changes).
  *
  * @param gridSize size of the precision grid, or -1 for FLOATING
  *                 precision.
  * @param forceSnap specifies whether snapping to the precision grid
  *                  should be forced: -1 prevents snapping, which can
  *                  be used when the input is known to be already
  *                  rounded to the target grid; 0 only snaps if the
  *                  new precision grid is not equal or compatible with
  *                  the new precision grid; 1 always snaps.
  *
  */
 extern GEOSGeometry GEOS_DLL *GEOSGeom_setPrecision_r(
                                       GEOSContextHandle_t handle,
                                       double gridSize, int forceSnap);

Of course it can only work if the memory management for
GeometryFactory is automatic, as proposed in the PR
(which might be dangerous for any existing C++ client out there).

--strk;

On Thu, Oct 01, 2015 at 04:47:52PM +0200, Sandro Santilli wrote:
> So to followup,
> it is confirmed that the QGIS wrapper in its current incarnation
> is not useful for the purpose of changing the precision model of the
> operations.
> 
> Meanwhile I've worked on a reference-counting mechanism for
> GeometryFactory that would allow us to expose a single function
> to change a geometry's PrecisionModel (effectively it's reference
> "GeometryFactory") in a way that avoids memory leaks.
> 
> Here's the code: https://github.com/libgeos/libgeos/pull/52
> 
> Basically each GeometryFactory will be holding a count of Geometry
> objects referencing it. Every Geometry will signal its birth and death
> to it. When you don't need a GeometryFactory anymore you can request
> its auto-destruction and it'll stay alive only as long as any of its
> child is will also be alive.
> 
> Explicitly deleting a GeometryFactory before any of its child would
> become a coding error, in the current version of the code. Eventually,
> this may change to be more tolerant (at the cost of growing the size
> of a GeometryFactory to store all child pointers in a list).
> 
> With such kind of automatic memory management we'd be in a position
> to expose at the C-API level a single function to change a
> Geometry's precision. Such function would find or create an appropriate
> GeometryFactory, assign it to the geometry and mark it for
> auto-destruction. The calling code would have no need to ever know
> about the existanc eof such GeometryFactory object.
> 
> How would you feel about such a change ?
> 
> --strk;
> 
> On Wed, Sep 30, 2015 at 06:16:03PM +0200, Sandro Santilli wrote:
> > Sandro, I've been looking at the wrapper you added to QGIS
> > but from what I read it doesn't seem that the geometry coming out
> > of GEOSGeometryPrecisionReducer_reduce has an updated PrecisionModel,
> > which means overlay operations won't be using that new model.
> > 
> > Do you confirm ?
> > 
> > If that's the case, the wrapper doesn't do much more than a
> > grid-snapping (plus some topological fixes of the snapping),
> > basically exposing no real management of PrecisionModels...
> > 
> > Are there tests to verify that ?
> > 
> > REF: https://trac.osgeo.org/geos/ticket/713
> > 
> > --strk;
> > 
> > On Wed, Jan 14, 2015 at 10:38:23AM +0100, Sandro Santilli wrote:
> > > On Tue, Jan 13, 2015 at 11:21:34AM +0100, Sandro Mani wrote:
> > > > 
> > > > On 08.01.2015 13:08, Sandro Mani wrote:
> > > > >So to wrap up, things currently look as follows (which I actually
> > > > >think is quite neat!):
> > > > >
> > > > >
> > > > >/** GEOSContextHandle_t internally keeps a reference count, set to
> > > > >1 on creation
> > > > > * - *All* methods producing a GEOSGeom increase the reference count
> > > > > * - GEOSGeom_destroy decreses the GeometryFactory reference
> > > > >count, if 0, it destroys the context
> > > > > * - finishGEOS_r decreses the reference count, if 0, it destroys
> > > > >the context
> > > > > */
> > > > >
> > > > >/** GEOSGeom_clone() clones the geometry and applies
> > > > >PrecisionReducer::reduce
> > > > > *  if the PrecisionModel of the current context is different than
> > > > >the that of
> > > > > *  the passed geometry
> > > > > */
> > > > >
> > > > >/** Set context handle precision model **/
> > > > >void GEOSContextHandle_t
> > > > >GEOSContext_setPrecisionDouble(GEOSContextHandle_t* handle);
> > > > >void GEOSContextHandle_t
> > > > >GEOSContext_setPrecisionFixed(GEOSContextHandle_t* handle, double
> > > > >scale);
> > > >
> > > > So, what do you think? Worth pursuing this approach?
> > > 
> > > Sorry I'm not having much time to dedicate to this.
> > > I'm not very sure about the approach, to be honest.
> > > There are indeed 2 possible things one would want to do with PM:
> > > 
> > >  1. "advertise" the PM of a geometry, w/out rounding coords
> > > 
> > >  2. "set" the PM of a geometry, rounding coords
> > > 
> > > I'm not sure we ever want to allow for 1, to avoid wrong advertisement.
> > > The signature in the current proposal makes 2 clear for the cloning
> > > of a geometry, but we're still missing clear documentation about what
> > > happens from the constructors. Would/should they round ?
> > > 
> > > Example, what should happen here:
> > > 
> > >   GEOSContextHandle_t h = initGEOS_r(...);
> > >   GEOSCoordSequence *s = GEOSCoordSeq_create_r(h,2,2);
> > >   GEOSContext_setPrecisionDouble(h);
> > >   GEOSCoordSeq_setX_r(h, s, 0, 0);
> > >   GEOSCoordSeq_setY_r(h, s, 0, 0);
> > >   GEOSContext_setPrecisionFixed(h, 1);
> > >   GEOSCoordSeq_setX_r(h, s, 1, 0.2);
> > >   GEOSCoordSeq_setY_r(h, s, 1, 0.2);
> > > 
> > > Should the coordinate sequence contain 2 equal points after the above ?
> > > And what about WKB/WKT parsing ?
> > > 
> > > It would help to gather more comments from others.
> > > I've added Oliver and Sean in Cc as they took part of a precedent
> > > discussion about this:
> > > http://lists.osgeo.org/pipermail/geos-devel/2014-February/006780.html
> > > 
> > > --strk;

From strk at keybit.net  Thu Oct  1 09:08:55 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 18:08:55 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20151001160220.GB27345@localhost>
References: <54AD2F37.8080207@gmail.com> <20150107142558.GA15933@localhost>
	<54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
	<54AE732C.90908@gmail.com> <54B4F1AE.3030108@gmail.com>
	<20150114093823.GA5770@localhost> <20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost>
Message-ID: <20151001160855.GC27345@localhost>

On Thu, Oct 01, 2015 at 06:02:20PM +0200, Sandro Santilli wrote:
> Sandro, others:
> here's what I'm thinking to add as the single new signature
> to the C-API for GEOS-3.6.0, what do you think ?
> 
>  /*
>   * Set the geometry's precision, optionally rounding all its
>   * coordinates to the precision grid (if it changes).
>   *
>   * @param gridSize size of the precision grid, or -1 for FLOATING
>   *                 precision.
>   * @param forceSnap specifies whether snapping to the precision grid
>   *                  should be forced: -1 prevents snapping, which can
>   *                  be used when the input is known to be already
>   *                  rounded to the target grid; 0 only snaps if the
>   *                  new precision grid is not equal or compatible with
>   *                  the new precision grid; 1 always snaps.
>   *
>   */
>  extern GEOSGeometry GEOS_DLL *GEOSGeom_setPrecision_r(
>                                        GEOSContextHandle_t handle,
>                                        double gridSize, int forceSnap);
> 
> Of course it can only work if the memory management for
> GeometryFactory is automatic, as proposed in the PR
> (which might be dangerous for any existing C++ client out there).

Of course there must be a GEOSGeometry argument too:

 GEOSGeometry *GEOSGeom_setPrecision_r(
                                       GEOSContextHandle_t handle,
                                       const GEOSGeometry *g,
                                       double gridSize, int forceSnap);

I'm not sure about returning a copy. One idea was, in the long run,
to also make GEOSGeometry objects automatically managed as per memory
lifetime, such thing would be easier by threating geometries as
immutable objects (and this is also the policy used in JTS); but
there's a known single function that is already not respecting that
immutability, which is GEOSNormalize.

--strk;

From manisandro at gmail.com  Thu Oct  1 09:14:10 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Thu, 1 Oct 2015 18:14:10 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20151001160855.GC27345@localhost>
References: <54AD2F37.8080207@gmail.com> <20150107142558.GA15933@localhost>
	<54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
	<54AE732C.90908@gmail.com> <54B4F1AE.3030108@gmail.com>
	<20150114093823.GA5770@localhost> <20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost> <20151001160220.GB27345@localhost>
	<20151001160855.GC27345@localhost>
Message-ID: <560D5BD2.2050501@gmail.com>



On 01.10.2015 18:08, Sandro Santilli wrote:
> On Thu, Oct 01, 2015 at 06:02:20PM +0200, Sandro Santilli wrote:
>> Sandro, others:
>> here's what I'm thinking to add as the single new signature
>> to the C-API for GEOS-3.6.0, what do you think ?
>>
>>   /*
>>    * Set the geometry's precision, optionally rounding all its
>>    * coordinates to the precision grid (if it changes).
>>    *
>>    * @param gridSize size of the precision grid, or -1 for FLOATING
>>    *                 precision.
>>    * @param forceSnap specifies whether snapping to the precision grid
>>    *                  should be forced: -1 prevents snapping, which can
>>    *                  be used when the input is known to be already
>>    *                  rounded to the target grid; 0 only snaps if the
>>    *                  new precision grid is not equal or compatible with
>>    *                  the new precision grid; 1 always snaps.
>>    *
>>    */
>>   extern GEOSGeometry GEOS_DLL *GEOSGeom_setPrecision_r(
>>                                         GEOSContextHandle_t handle,
>>                                         double gridSize, int forceSnap);
>>
>> Of course it can only work if the memory management for
>> GeometryFactory is automatic, as proposed in the PR
>> (which might be dangerous for any existing C++ client out there).
> Of course there must be a GEOSGeometry argument too:
>
>   GEOSGeometry *GEOSGeom_setPrecision_r(
>                                         GEOSContextHandle_t handle,
>                                         const GEOSGeometry *g,
>                                         double gridSize, int forceSnap);
>
> I'm not sure about returning a copy. One idea was, in the long run,
> to also make GEOSGeometry objects automatically managed as per memory
> lifetime, such thing would be easier by threating geometries as
> immutable objects (and this is also the policy used in JTS); but
> there's a known single function that is already not respecting that
> immutability, which is GEOSNormalize.
>
As far as QGIS is concerned, it might also be an idea to just have a 
function which sets the precision geos-context-wide:

void GEOS_setPrecision_r(GEOSContextHandle_t handle, double gridSize)

removing the need to do all the cloning of geometries just to reduce the 
precision. After all, all QGIS geometry processing functions would 
benefit from reduced precision computations.

From strk at keybit.net  Thu Oct  1 09:42:32 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 18:42:32 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <560D5BD2.2050501@gmail.com>
References: <54AD5548.2040709@gmail.com> <20150108113752.GA7420@localhost>
	<54AE732C.90908@gmail.com> <54B4F1AE.3030108@gmail.com>
	<20150114093823.GA5770@localhost> <20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost>
	<20151001160855.GC27345@localhost> <560D5BD2.2050501@gmail.com>
Message-ID: <20151001164232.GD27345@localhost>

On Thu, Oct 01, 2015 at 06:14:10PM +0200, Sandro Mani wrote:
> 
> 
> On 01.10.2015 18:08, Sandro Santilli wrote:
> >On Thu, Oct 01, 2015 at 06:02:20PM +0200, Sandro Santilli wrote:
> >>Sandro, others:
> >>here's what I'm thinking to add as the single new signature
> >>to the C-API for GEOS-3.6.0, what do you think ?
> >>
> >>  /*
> >>   * Set the geometry's precision, optionally rounding all its
> >>   * coordinates to the precision grid (if it changes).
> >>   *
> >>   * @param gridSize size of the precision grid, or -1 for FLOATING
> >>   *                 precision.
> >>   * @param forceSnap specifies whether snapping to the precision grid
> >>   *                  should be forced: -1 prevents snapping, which can
> >>   *                  be used when the input is known to be already
> >>   *                  rounded to the target grid; 0 only snaps if the
> >>   *                  new precision grid is not equal or compatible with
> >>   *                  the new precision grid; 1 always snaps.
> >>   *
> >>   */
> >>  extern GEOSGeometry GEOS_DLL *GEOSGeom_setPrecision_r(
> >>                                        GEOSContextHandle_t handle,
> >>                                        double gridSize, int forceSnap);
> >>
> >>Of course it can only work if the memory management for
> >>GeometryFactory is automatic, as proposed in the PR
> >>(which might be dangerous for any existing C++ client out there).
> >Of course there must be a GEOSGeometry argument too:
> >
> >  GEOSGeometry *GEOSGeom_setPrecision_r(
> >                                        GEOSContextHandle_t handle,
> >                                        const GEOSGeometry *g,
> >                                        double gridSize, int forceSnap);
> >
> >I'm not sure about returning a copy. One idea was, in the long run,
> >to also make GEOSGeometry objects automatically managed as per memory
> >lifetime, such thing would be easier by threating geometries as
> >immutable objects (and this is also the policy used in JTS); but
> >there's a known single function that is already not respecting that
> >immutability, which is GEOSNormalize.
>
> As far as QGIS is concerned, it might also be an idea to just have a
> function which sets the precision geos-context-wide:
> 
> void GEOS_setPrecision_r(GEOSContextHandle_t handle, double gridSize)
> 
> removing the need to do all the cloning of geometries just to reduce
> the precision. After all, all QGIS geometry processing functions
> would benefit from reduced precision computations.

Note that the _rounding_ of coordinates is expected to be performed
outside of the processing functions, for them work correctly, so
you'll need to perform this rounding/scaling step at some point
anyway.

A generic GEOS_setPrecision sounds interesting, but then you'll need
to go through each and every function returning a GEOSGeometry and
specify what happens to it depending on the precision.

For example:

  - should GEOSGeom_clone assign the "context" precision
    to the clone; should it scale/round ?

  - should GEOSProject use the input or the context precision
    for the output ?

  - should GEOSIntersection use the context precision or one
    of the input precision ?

  - should GEOSGeom_createLineString round the input
    coordinates to the context precision ?

On the C++ side, it is the input that determines the output precision
(smallest precision in case of multiple inputs) and rounding of input
only happens with the WKTReader.

Note that a function capable of rounding would still be needed.

Surely allowing for in-place editing would help cases in which
you just want to round w/out changing the reference precision:

 GEOSGeom_setPrecision_r(g, 2, 0);   // snap to grid of size 2
 GEOSGeom_setPrecision_r(g, -1, -1); // set precision to floating

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From strk at keybit.net  Thu Oct  1 09:47:00 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 18:47:00 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20151001164232.GD27345@localhost>
References: <20150108113752.GA7420@localhost> <54AE732C.90908@gmail.com>
	<54B4F1AE.3030108@gmail.com> <20150114093823.GA5770@localhost>
	<20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost>
	<20151001160855.GC27345@localhost> <560D5BD2.2050501@gmail.com>
	<20151001164232.GD27345@localhost>
Message-ID: <20151001164700.GE27345@localhost>

Cleaned up proposal. No copying, using 0 for FLOATING and returning
previous precision.

  /**
   * Set the geometry's precision, optionally rounding all its
   * coordinates to the precision grid (if it changes).
   *
   * @param gridSize size of the precision grid, or 0 for FLOATING
   *                 precision.
   * @param forceSnap specifies whether snapping to the precision grid
   *                  should be forced: -1 prevents snapping, which can
   *                  be used when the input is known to be already
   *                  rounded to the target grid; 0 only snaps if the
   *                  new precision grid is not equal or compatible with
   *                  the new precision grid; 1 always snaps.
   * @retuns -1 on exception, previous size of precision grid otherwise.
   *
   */
  extern int GEOS_DLL *GEOSGeom_setPrecision_r(
                                         GEOSContextHandle_t handle,
                                         GEOSGeometry *g,
                                         double gridSize, int forceSnap);

I guess one might want a _getPrecision too...

--strk;


On Thu, Oct 01, 2015 at 06:42:32PM +0200, Sandro Santilli wrote:
> On Thu, Oct 01, 2015 at 06:14:10PM +0200, Sandro Mani wrote:
> > 
> > 
> > On 01.10.2015 18:08, Sandro Santilli wrote:
> > >On Thu, Oct 01, 2015 at 06:02:20PM +0200, Sandro Santilli wrote:
> > >>Sandro, others:
> > >>here's what I'm thinking to add as the single new signature
> > >>to the C-API for GEOS-3.6.0, what do you think ?
> > >>
> > >>  /*
> > >>   * Set the geometry's precision, optionally rounding all its
> > >>   * coordinates to the precision grid (if it changes).
> > >>   *
> > >>   * @param gridSize size of the precision grid, or -1 for FLOATING
> > >>   *                 precision.
> > >>   * @param forceSnap specifies whether snapping to the precision grid
> > >>   *                  should be forced: -1 prevents snapping, which can
> > >>   *                  be used when the input is known to be already
> > >>   *                  rounded to the target grid; 0 only snaps if the
> > >>   *                  new precision grid is not equal or compatible with
> > >>   *                  the new precision grid; 1 always snaps.
> > >>   *
> > >>   */
> > >>  extern GEOSGeometry GEOS_DLL *GEOSGeom_setPrecision_r(
> > >>                                        GEOSContextHandle_t handle,
> > >>                                        double gridSize, int forceSnap);
> > >>
> > >>Of course it can only work if the memory management for
> > >>GeometryFactory is automatic, as proposed in the PR
> > >>(which might be dangerous for any existing C++ client out there).
> > >Of course there must be a GEOSGeometry argument too:
> > >
> > >  GEOSGeometry *GEOSGeom_setPrecision_r(
> > >                                        GEOSContextHandle_t handle,
> > >                                        const GEOSGeometry *g,
> > >                                        double gridSize, int forceSnap);
> > >
> > >I'm not sure about returning a copy. One idea was, in the long run,
> > >to also make GEOSGeometry objects automatically managed as per memory
> > >lifetime, such thing would be easier by threating geometries as
> > >immutable objects (and this is also the policy used in JTS); but
> > >there's a known single function that is already not respecting that
> > >immutability, which is GEOSNormalize.
> >
> > As far as QGIS is concerned, it might also be an idea to just have a
> > function which sets the precision geos-context-wide:
> > 
> > void GEOS_setPrecision_r(GEOSContextHandle_t handle, double gridSize)
> > 
> > removing the need to do all the cloning of geometries just to reduce
> > the precision. After all, all QGIS geometry processing functions
> > would benefit from reduced precision computations.
> 
> Note that the _rounding_ of coordinates is expected to be performed
> outside of the processing functions, for them work correctly, so
> you'll need to perform this rounding/scaling step at some point
> anyway.
> 
> A generic GEOS_setPrecision sounds interesting, but then you'll need
> to go through each and every function returning a GEOSGeometry and
> specify what happens to it depending on the precision.
> 
> For example:
> 
>   - should GEOSGeom_clone assign the "context" precision
>     to the clone; should it scale/round ?
> 
>   - should GEOSProject use the input or the context precision
>     for the output ?
> 
>   - should GEOSIntersection use the context precision or one
>     of the input precision ?
> 
>   - should GEOSGeom_createLineString round the input
>     coordinates to the context precision ?
> 
> On the C++ side, it is the input that determines the output precision
> (smallest precision in case of multiple inputs) and rounding of input
> only happens with the WKTReader.
> 
> Note that a function capable of rounding would still be needed.
> 
> Surely allowing for in-place editing would help cases in which
> you just want to round w/out changing the reference precision:
> 
>  GEOSGeom_setPrecision_r(g, 2, 0);   // snap to grid of size 2
>  GEOSGeom_setPrecision_r(g, -1, -1); // set precision to floating
> 
> --strk; 
> 
>   ()   Free GIS & Flash consultant/developer
>   /\   http://strk.keybit.net/services.html

From manisandro at gmail.com  Thu Oct  1 09:51:44 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Thu, 1 Oct 2015 18:51:44 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20151001164700.GE27345@localhost>
References: <20150108113752.GA7420@localhost> <54AE732C.90908@gmail.com>
	<54B4F1AE.3030108@gmail.com> <20150114093823.GA5770@localhost>
	<20150930161603.GB8070@localhost> <20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost> <20151001160855.GC27345@localhost>
	<560D5BD2.2050501@gmail.com> <20151001164232.GD27345@localhost>
	<20151001164700.GE27345@localhost>
Message-ID: <560D64A0.6070101@gmail.com>



On 01.10.2015 18:47, Sandro Santilli wrote:
> Cleaned up proposal. No copying, using 0 for FLOATING and returning
> previous precision.
>
>    /**
>     * Set the geometry's precision, optionally rounding all its
>     * coordinates to the precision grid (if it changes).
>     *
>     * @param gridSize size of the precision grid, or 0 for FLOATING
>     *                 precision.
>     * @param forceSnap specifies whether snapping to the precision grid
>     *                  should be forced: -1 prevents snapping, which can
>     *                  be used when the input is known to be already
>     *                  rounded to the target grid; 0 only snaps if the
>     *                  new precision grid is not equal or compatible with
>     *                  the new precision grid; 1 always snaps.
>     * @retuns -1 on exception, previous size of precision grid otherwise.
>     *
>     */
>    extern int GEOS_DLL *GEOSGeom_setPrecision_r(
>                                           GEOSContextHandle_t handle,
>                                           GEOSGeometry *g,
>                                           double gridSize, int forceSnap);
>
> I guess one might want a _getPrecision too...
I like the in-place approach. So as far as my needs go, this would be 
perfectly adequate. (And about the generic GEOS_setPrecision, looks like 
too much trouble).


From strk at keybit.net  Thu Oct  1 09:58:54 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 18:58:54 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <560D64A0.6070101@gmail.com>
References: <54B4F1AE.3030108@gmail.com> <20150114093823.GA5770@localhost>
	<20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost>
	<20151001160855.GC27345@localhost> <560D5BD2.2050501@gmail.com>
	<20151001164232.GD27345@localhost>
	<20151001164700.GE27345@localhost> <560D64A0.6070101@gmail.com>
Message-ID: <20151001165854.GF27345@localhost>

On Thu, Oct 01, 2015 at 06:51:44PM +0200, Sandro Mani wrote:
> 
> 
> On 01.10.2015 18:47, Sandro Santilli wrote:
> >Cleaned up proposal. No copying, using 0 for FLOATING and returning
> >previous precision.
> >
> >   /**
> >    * Set the geometry's precision, optionally rounding all its
> >    * coordinates to the precision grid (if it changes).
> >    *
> >    * @param gridSize size of the precision grid, or 0 for FLOATING
> >    *                 precision.
> >    * @param forceSnap specifies whether snapping to the precision grid
> >    *                  should be forced: -1 prevents snapping, which can
> >    *                  be used when the input is known to be already
> >    *                  rounded to the target grid; 0 only snaps if the
> >    *                  new precision grid is not equal or compatible with
> >    *                  the new precision grid; 1 always snaps.
> >    * @retuns -1 on exception, previous size of precision grid otherwise.
> >    *
> >    */
> >   extern int GEOS_DLL *GEOSGeom_setPrecision_r(
> >                                          GEOSContextHandle_t handle,
> >                                          GEOSGeometry *g,
> >                                          double gridSize, int forceSnap);
> >
> >I guess one might want a _getPrecision too...
>
> I like the in-place approach. So as far as my needs go, this would
> be perfectly adequate. (And about the generic GEOS_setPrecision,
> looks like too much trouble).

Great, I'll be pushing an implementation of that to the same PR
with the automatic memory management for GeometryFactory (which
seems an indispensable part of this) tomorrow, stay tuned for
tests your side !

--strk;

From manisandro at gmail.com  Thu Oct  1 10:01:33 2015
From: manisandro at gmail.com (Sandro Mani)
Date: Thu, 1 Oct 2015 19:01:33 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <20151001165854.GF27345@localhost>
References: <54B4F1AE.3030108@gmail.com> <20150114093823.GA5770@localhost>
	<20150930161603.GB8070@localhost> <20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost> <20151001160855.GC27345@localhost>
	<560D5BD2.2050501@gmail.com> <20151001164232.GD27345@localhost>
	<20151001164700.GE27345@localhost> <560D64A0.6070101@gmail.com>
	<20151001165854.GF27345@localhost>
Message-ID: <560D66ED.7010908@gmail.com>



On 01.10.2015 18:58, Sandro Santilli wrote:
> On Thu, Oct 01, 2015 at 06:51:44PM +0200, Sandro Mani wrote:
>>
>> On 01.10.2015 18:47, Sandro Santilli wrote:
>>> Cleaned up proposal. No copying, using 0 for FLOATING and returning
>>> previous precision.
>>>
>>>    /**
>>>     * Set the geometry's precision, optionally rounding all its
>>>     * coordinates to the precision grid (if it changes).
>>>     *
>>>     * @param gridSize size of the precision grid, or 0 for FLOATING
>>>     *                 precision.
>>>     * @param forceSnap specifies whether snapping to the precision grid
>>>     *                  should be forced: -1 prevents snapping, which can
>>>     *                  be used when the input is known to be already
>>>     *                  rounded to the target grid; 0 only snaps if the
>>>     *                  new precision grid is not equal or compatible with
>>>     *                  the new precision grid; 1 always snaps.
>>>     * @retuns -1 on exception, previous size of precision grid otherwise.
>>>     *
>>>     */
>>>    extern int GEOS_DLL *GEOSGeom_setPrecision_r(
>>>                                           GEOSContextHandle_t handle,
>>>                                           GEOSGeometry *g,
>>>                                           double gridSize, int forceSnap);
>>>
>>> I guess one might want a _getPrecision too...
>> I like the in-place approach. So as far as my needs go, this would
>> be perfectly adequate. (And about the generic GEOS_setPrecision,
>> looks like too much trouble).
> Great, I'll be pushing an implementation of that to the same PR
> with the automatic memory management for GeometryFactory (which
> seems an indispensable part of this) tomorrow, stay tuned for
> tests your side !
Cool, thanks!

From strk at keybit.net  Thu Oct  1 10:15:51 2015
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 1 Oct 2015 19:15:51 +0200
Subject: [geos-devel] Exposing PrecisionModel,
 GeometryPrecisionReducer in the C API
In-Reply-To: <560D66ED.7010908@gmail.com>
References: <20150930161603.GB8070@localhost>
	<20151001144752.GD28946@localhost>
	<20151001160220.GB27345@localhost>
	<20151001160855.GC27345@localhost> <560D5BD2.2050501@gmail.com>
	<20151001164232.GD27345@localhost>
	<20151001164700.GE27345@localhost> <560D64A0.6070101@gmail.com>
	<20151001165854.GF27345@localhost> <560D66ED.7010908@gmail.com>
Message-ID: <20151001171551.GH27345@localhost>

On Thu, Oct 01, 2015 at 07:01:33PM +0200, Sandro Mani wrote:
> On 01.10.2015 18:58, Sandro Santilli wrote:
> >On Thu, Oct 01, 2015 at 06:51:44PM +0200, Sandro Mani wrote:

> >>I like the in-place approach. So as far as my needs go, this would
> >>be perfectly adequate. (And about the generic GEOS_setPrecision,
> >>looks like too much trouble).
> >
> >Great, I'll be pushing an implementation of that to the same PR
> >with the automatic memory management for GeometryFactory (which
> >seems an indispensable part of this) tomorrow, stay tuned for
> >tests your side !
> 
> Cool, thanks!

Oh well, I spoke too soon.
It turns out Geometry objects are seriously immutable at the
C++ side, and don't feel like changing that.
The "normalize" method is indeed an exception also in C++,
but the only way to change a Geometry's GeometryFactory pointer is by
creating a new Geometry.

In order to reduce the copies, I'm sure we can find another signature
to apply the precision and rounding at construction time.
I'll let you make a proposal for that while I'll work on the
GEOSGeometry-returning version of the "_setPrecision" function.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From strk at keybit.net  Fri Oct  2 03:07:24 2015
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 2 Oct 2015 12:07:24 +0200
Subject: [geos-devel] Automatic memory management for GeometryFactory objects
Message-ID: <20151002100724.GA10805@localhost>

As part of the effort to expose PrecisionModel to the C-API I've
just committed a change to the C++ API introducing automatic memory
management for GeometryFactory objects.

GeometryFactory objects will now be automatically deleted when its owner
drops it _and_ the last referencing Geometry is deleted.

Ownership of GeometryFactory object is delegated to a
GeometryFactory::unique_ptr smart pointer with ownership transfer
semantic.

The change does not go as deep as ensuring _all_ referees register
themselves into the GeometryFactory, but only the Geometry objects
do. This means you still have to take care of keeping your
GeometryFactory alive (by keeping the unique smart pointer alive)
if storing a reference to it in any other place.

Code is in r4091

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html

From geos-trac at osgeo.org  Fri Oct  2 09:48:35 2015
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 02 Oct 2015 16:48:35 -0000
Subject: [geos-devel] [GEOS] #713: [Patch] Add GeometryPrecisionReducer
	to C API
In-Reply-To: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
References: <043.7f9b7ae2ba9662e28291e6aacd05dc73@osgeo.org>
Message-ID: <058.416af9030ef2b85442047c25d4a7533d@osgeo.org>

#713: [Patch] Add GeometryPrecisionReducer to C API
------------------------+---------------------------
 Reporter:  smani       |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 A GEOSGeom_setPrecision function is in as of r4092.
 Tests are welcome, and if you find any issue or have enhancement
 proposals, please file a new ticket.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/713#comment:20>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Oct  4 08:10:09 2015
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 04 Oct 2015 15:10:09 -0000
Subject: [geos-devel] [GEOS] #747: BufferBuilder::bufferLineSingleSided
 leaks buffer geometry on exception
Message-ID: <045.f637cc1a4f457554b7cf5523c7c6efa0@osgeo.org>

#747: BufferBuilder::bufferLineSingleSided leaks buffer geometry on exception
-------------------------+--------------------------
 Reporter:  mloskot      |      Owner:  geos-devel@?
     Type:  defect       |     Status:  new
 Priority:  major        |  Milestone:  3.5.1
Component:  Default      |    Version:  svn-trunk
 Severity:  Significant  |   Keywords:
-------------------------+--------------------------
 In BufferBuilder::bufferLineSingleSided, there is this code

 {{{
 ...
 Geometry* buf = 0;
 {
     BufferBuilder tmp(modParams);
     buf = tmp.buffer( l, distance );
 }
 ... //
 }}}

 This code is followed by around 200 lines of complex logic.
 If any of the following steps throw exception, that buffer geometry leaks
 as unreachable.

 I was tempted to apply the simplest fix - wrap the whole
 bufferLineSingleSided  with try-catch and manually release all the
 internally allocated resources. But, I'm not sure as I may be missing
 something that actually allows to delete the memory there.

 Actually, this is the case in current
 [source:trunk/tests/unit/capi/GEOSOffsetCurveTest.cpp at 3846#L278] where the
 memory leaks.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/747>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Oct  4 09:09:56 2015
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 04 Oct 2015 16:09:56 -0000
Subject: [geos-devel] [GEOS] #747: BufferBuilder::bufferLineSingleSided
 leaks buffer geometry on exception
In-Reply-To: <045.f637cc1a4f457554b7cf5523c7c6efa0@osgeo.org>
References: <045.f637cc1a4f457554b7cf5523c7c6efa0@osgeo.org>
Message-ID: <060.d7974d5a4a37c5808db3f33acdf366ec@osgeo.org>

#747: BufferBuilder::bufferLineSingleSided leaks buffer geometry on exception
-------------------------+---------------------------
 Reporter:  mloskot      |       Owner:  geos-devel@?
     Type:  defect       |      Status:  closed
 Priority:  major        |   Milestone:  3.5.1
Component:  Default      |     Version:  svn-trunk
 Severity:  Significant  |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Should be better as of r4101 (3.5 branch for 3.5.1) and r4103 in trunk
 (for 3.6.0)

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/747#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Oct  4 10:57:27 2015
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 04 Oct 2015 17:57:27 -0000
Subject: [geos-devel] [GEOS] #747: BufferBuilder::bufferLineSingleSided
 leaks buffer geometry on exception
In-Reply-To: <045.f637cc1a4f457554b7cf5523c7c6efa0@osgeo.org>
References: <045.f637cc1a4f457554b7cf5523c7c6efa0@osgeo.org>
Message-ID: <060.ad92785ac0501851a7ff41b1d59d2af8@osgeo.org>

#747: BufferBuilder::bufferLineSingleSided leaks buffer geometry on exception
-------------------------+---------------------------
 Reporter:  mloskot      |       Owner:  geos-devel@?
     Type:  defect       |      Status:  closed
 Priority:  major        |   Milestone:  3.5.1
Component:  Default      |     Version:  svn-trunk
 Severity:  Significant  |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------

Comment (by mloskot):

 @strk I forgot the auto_ptr is kosher. Great, it fixes the issues. Thanks!

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/747#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Oct  7 01:31:22 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 07 Oct 2015 08:31:22 -0000
Subject: [geos-devel] [GEOS] #748: Port Polygonizer performance improvement
	from JTS-1.13
Message-ID: <042.28a55ac2d602b9217a2700be652f331c@osgeo.org>

#748: Port Polygonizer performance improvement from JTS-1.13
-------------------------+--------------------------
 Reporter:  strk         |      Owner:  geos-devel@?
     Type:  enhancement  |     Status:  new
 Priority:  major        |  Milestone:  3.5.1
Component:  Default      |    Version:  3.5.0
 Severity:  Unassigned   |   Keywords:
-------------------------+--------------------------
 In version 1.13 of JTS, the Polygonizer class got a performance
 improvements for cases of polygons with many holes.

--
Ticket URL: <http://trac.osgeo.org/geos/ticket/748>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Oct  7 01:33:20 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 07 Oct 2015 08:33:20 -0000
Subject: [geos-devel] [GEOS] #748: Port Polygonizer performance
 improvement from JTS-1.13
In-Reply-To: <042.28a55ac2d602b9217a2700be652f331c@osgeo.org>
References: <042.28a55ac2d602b9217a2700be652f331c@osgeo.org>
Message-ID: <057.3ba4955e883fe47f689571b77d8bc020@osgeo.org>

#748: Port Polygonizer performance improvement from JTS-1.13
-------------------------+---------------------------
 Reporter:  strk         |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  3.5.1
Component:  Default      |     Version:  3.5.0
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by strk):

 For the record, I'm talking about `r607` in JTS SVN repo

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/748#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Oct  7 02:35:11 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 07 Oct 2015 09:35:11 -0000
Subject: [geos-devel] [GEOS] #741: GEOSSimplify() returns empty polygon
 if inner ring dimension < simplify distance
In-Reply-To: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
References: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
Message-ID: <060.d278d577cc717cbfe2f07d37abcb26f9@osgeo.org>

#741: GEOSSimplify() returns empty polygon if inner ring dimension < simplify
distance
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by rouault):

 * Attachment "geossimplify_small_innerring_741.patch" added.

 Proposed patch

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/741>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Oct  7 02:35:40 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 07 Oct 2015 09:35:40 -0000
Subject: [geos-devel] [GEOS] #741: [PATCH] GEOSSimplify() returns empty
 polygon if inner ring dimension < simplify distance (was: GEOSSimplify()
 returns empty polygon if inner ring dimension < simplify distance)
In-Reply-To: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
References: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
Message-ID: <060.be5d7c7e97e358460a04619dabadb110@osgeo.org>

#741: [PATCH] GEOSSimplify() returns empty polygon if inner ring dimension <
simplify distance
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by rouault):

 Attached a patch + new test step that fixes the issue

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/741#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Oct  7 02:43:45 2015
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 07 Oct 2015 09:43:45 -0000
Subject: [geos-devel] [GEOS] #741: [PATCH] GEOSSimplify() returns empty
 polygon if inner ring dimension < simplify distance
In-Reply-To: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
References: <045.24f715a14f26fc5c9e65b45b150aa16e@osgeo.org>
Message-ID: <060.d7b5a403a4a720d4796b6aeb9027dfd2@osgeo.org>

#741: [PATCH] GEOSSimplify() returns empty polygon if inner ring dimension <
simplify distance
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.4.3
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Martin can you take a look at this, sounds sensible to me.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/741#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From sean.gillies at gmail.com  Wed Oct  7 08:52:32 2015
From: sean.gillies at gmail.com (Sean Gillies)
Date: Wed, 7 Oct 2015 11:52:32 -0400
Subject: [geos-devel] What's the intent of 'assert(!"should never be
	reached")'?
In-Reply-To: <20150930160424.GA8070@localhost>
References: <CAOodmJqR6xbrSpzdGBZEjRttCWrNV4gXXwFH4xxP0zLpxpvq+g@mail.gmail.com>
	<20150930160424.GA8070@localhost>
Message-ID: <CAOodmJqyBEttT-YRqnOGt+OQgjYQjuv=-y4FJzVCXNzO_QWdPw@mail.gmail.com>

On Wed, Sep 30, 2015 at 12:04 PM, Sandro Santilli <strk at keybit.net> wrote:
> On Tue, Jul 07, 2015 at 12:12:54PM -0600, Sean Gillies wrote:
>> There are three places in GEOS where this assertion appears
>>
>>
>> https://github.com/libgeos/libgeos/blob/c9d94c2ebb68b6b679f03dc7eabebfcd39136def/src/index/strtree/AbstractSTRtree.cpp#L371
>>
>> and two them have been tripping up Shapely users on OS X. I've found that
>> rebuilding GEOS with --disable-cassert solves the user problems: no assert
>> exceptions raised and no other program crashes.
>>
>> My question: what is the intent of these statements? If they can be safely
>> ignored, as I'm doing, should they not be disabled by default?
>
> Unless you're extending GEOS by subclassing a Boundable, such an
> assert would indicate a compile issue.
>

Thanks for the reply, Sandro. I've switched over to --disable-cassert
(-DNDEBUG) in my library builds but am still falling through the tests
above that assert at runtime in a particular case:

- on OS X
- calling unary union
- loading libgeos_c.dylib via Shapely *after* loading libgeos_c.dylib
(using a different path) via a different Python C extension module
(Fiona).

As reported at https://github.com/Toblerity/Fiona/issues/276, there's
a unary union operation that returns a multipolygon when Shapely is
imported first and an empty geometry collection when Shapely is
imported second.

Are there inherent pitfalls in loading libgeos twice on OS X?

-- 
Sean Gillies

From geos-trac at osgeo.org  Tue Oct 13 03:08:00 2015
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 13 Oct 2015 10:08:00 -0000
Subject: [geos-devel] [GEOS] #749: GeometryPrecisionReducer not honouring
	target PM
Message-ID: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>

#749: GeometryPrecisionReducer not honouring target PM
------------------------+--------------------------
 Reporter:  strk        |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  blocker     |  Milestone:  3.6.0
Component:  Default     |    Version:  svn-trunk
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 This needs more testing but I've added a GEOSGeom_getPrecision function to
 the C-API and in some cases it's not confirming that the corresponding
 GEOSGeom_setPrecision did what it advertise to do.

 Adding debugging lines shows a possible bug in GeometryPrecisionReducer
 not properly setting the output model.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/749>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Oct 13 03:31:09 2015
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 13 Oct 2015 10:31:09 -0000
Subject: [geos-devel] [GEOS] #749: GeometryPrecisionReducer not
	honouring target PM
In-Reply-To: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
References: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
Message-ID: <057.323a1f3b7b94f3ad29c8c4e8f27c723c@osgeo.org>

#749: GeometryPrecisionReducer not honouring target PM
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.6.0
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 I think I've spotted the bug being in CoordinateOperation::edit ending
 with a geometr->clone() rather than using the new factory.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/749#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Oct 13 03:39:17 2015
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 13 Oct 2015 10:39:17 -0000
Subject: [geos-devel] [GEOS] #749: GeometryPrecisionReducer not
	honouring target PM
In-Reply-To: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
References: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
Message-ID: <057.9661b9cc68bec7e007214d9aa8b56b5e@osgeo.org>

#749: GeometryPrecisionReducer not honouring target PM
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.6.0
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * cc: mbdavis (added)


Comment:

 I'd note that the same issue exists in JTS, whereas the class is called
 CoordinateSequenceOperation there.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/749#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Oct 13 03:55:55 2015
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 13 Oct 2015 10:55:55 -0000
Subject: [geos-devel] [GEOS] #749: GeometryPrecisionReducer not
	honouring target PM
In-Reply-To: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
References: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
Message-ID: <057.8726778b0d941cc8a3604a80d647376f@osgeo.org>

#749: GeometryPrecisionReducer not honouring target PM
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.6.0
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Alright I restricted the problem to EMPTY input.
 Generally speaking, if the input has no Coordinates, the GeometryEditor
 with CoordinateOperation visitor does _not_ change the GeometryFactory.

 I'm tempted to call this a bug, for GeometryPrecisionReducer to not change
 the factory of an empty.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/749#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Oct 13 04:07:19 2015
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 13 Oct 2015 11:07:19 -0000
Subject: [geos-devel] [GEOS] #749: GeometryPrecisionReducer not
	honouring target PM
In-Reply-To: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
References: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
Message-ID: <057.b40c26a8d074f1e2f4129020f3596e9e@osgeo.org>

#749: GeometryPrecisionReducer not honouring target PM
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.6.0
Component:  Default     |     Version:  svn-trunk
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by strk):

 Note that the bug of GeometryEditor also affects
 GeometryFactory->createGeometry() in that it uses GeometryEditor to change
 factory of geometries.

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/749#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Oct 13 04:44:36 2015
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 13 Oct 2015 11:44:36 -0000
Subject: [geos-devel] [GEOS] #749: GeometryPrecisionReducer not
 honouring target PM for empty geometry inputs (was:
 GeometryPrecisionReducer not honouring target PM)
In-Reply-To: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
References: <042.bc63b602e44eac40836f82278976ed24@osgeo.org>
Message-ID: <057.56ba6bc6eb8d9c77475cdef6abd8390c@osgeo.org>

#749: GeometryPrecisionReducer not honouring target PM for empty geometry inputs
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.5.1
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * milestone:  3.6.0 => 3.5.1
 * resolution:   => fixed
 * version:  svn-trunk => 3.5.0


Comment:

 GeometryEditor fixed in 3.5 branch with r4110 (for 3.5.1) and in trunk
 with r4109 (for 3.6.0)

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/749#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mateusz at loskot.net  Tue Oct 13 06:32:40 2015
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 13 Oct 2015 15:32:40 +0200
Subject: [geos-devel] [wip] Windows builds on AppVeyor
Message-ID: <CABUeae8=49UfL42W7CTcHJbe+=WByg2-mzHdwGNhTFwv67g_AQ@mail.gmail.com>

Folks,

I have been trying to configure AppVeyor builds for GEOS

First stab at appveyor.xml is in svn-trunk branch at
https://github.com/mloskot/libgeos

First, I aimed at Visual Studio 2015 + NMAKE builds,
32 and 64 bit, debug and release.

Things work well for 32-bit builds.

Unfortunately, there is a strange issue with 64-bit build, see details:

http://help.appveyor.com/discussions/problems/3203-vs2015-and-incorrect-mspdb140dll-version

It seems, that the issue is strange to AppVeyor support folks too.

I'm looking for some AppVeyor gurus that could help here.

Best regards,
-- 
Mateusz  Loskot, http://mateusz.loskot.net

From strk at keybit.net  Tue Oct 13 07:05:30 2015
From: strk at keybit.net (Sandro Santilli)
Date: Tue, 13 Oct 2015 16:05:30 +0200
Subject: [geos-devel] [wip] Windows builds on AppVeyor
In-Reply-To: <CABUeae8=49UfL42W7CTcHJbe+=WByg2-mzHdwGNhTFwv67g_AQ@mail.gmail.com>
References: <CABUeae8=49UfL42W7CTcHJbe+=WByg2-mzHdwGNhTFwv67g_AQ@mail.gmail.com>
Message-ID: <20151013140530.GB23804@localhost>

Sorry for the ignorance, but ... what is appveyor ?
Does it provide a nice-looking badge we can add to the README.md ? :>

--strk;

On Tue, Oct 13, 2015 at 03:32:40PM +0200, Mateusz Loskot wrote:
> Folks,
> 
> I have been trying to configure AppVeyor builds for GEOS
> 
> First stab at appveyor.xml is in svn-trunk branch at
> https://github.com/mloskot/libgeos
> 
> First, I aimed at Visual Studio 2015 + NMAKE builds,
> 32 and 64 bit, debug and release.
> 
> Things work well for 32-bit builds.
> 
> Unfortunately, there is a strange issue with 64-bit build, see details:
> 
> http://help.appveyor.com/discussions/problems/3203-vs2015-and-incorrect-mspdb140dll-version
> 
> It seems, that the issue is strange to AppVeyor support folks too.
> 
> I'm looking for some AppVeyor gurus that could help here.
> 
> Best regards,
> -- 
> Mateusz  Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From mateusz at loskot.net  Tue Oct 13 07:32:14 2015
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 13 Oct 2015 16:32:14 +0200
Subject: [geos-devel] [wip] Windows builds on AppVeyor
In-Reply-To: <20151013140530.GB23804@localhost>
References: <CABUeae8=49UfL42W7CTcHJbe+=WByg2-mzHdwGNhTFwv67g_AQ@mail.gmail.com>
 <20151013140530.GB23804@localhost>
Message-ID: <CABUeae-f7ay6xCeY4079BhBPyJwOfVkvniedRcQ0TQDJUTqV6g@mail.gmail.com>

On 13 October 2015 at 16:05, Sandro Santilli <strk at keybit.net> wrote:
> Sorry for the ignorance, but ... what is appveyor ?

Think of Travis CI for Windows.

> Does it provide a nice-looking badge we can add to the README.md ? :>

Yes, of course :)

Best regards,
-- 
Mateusz  Loskot, http://mateusz.loskot.net

From geos-trac at osgeo.org  Thu Oct 15 11:40:18 2015
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 15 Oct 2015 18:40:18 -0000
Subject: [geos-devel] [GEOS] #737: TopologyException for Valid geoemtries
In-Reply-To: <052.fa7d997ed8bb4b3b3ed759cc9cc5ef85@osgeo.org>
References: <052.fa7d997ed8bb4b3b3ed759cc9cc5ef85@osgeo.org>
Message-ID: <067.442d6556efffd785737ce784ff8fd61c@osgeo.org>

#737: TopologyException for Valid geoemtries
----------------------------+---------------------------
 Reporter:  bladeoflight16  |       Owner:  geos-devel@…
     Type:  defect          |      Status:  new
 Priority:  major           |   Milestone:  3.4.3
Component:  Default         |     Version:  3.4.2
 Severity:  Unassigned      |  Resolution:
 Keywords:                  |
----------------------------+---------------------------

Comment (by strk):

 The inputs in WKT form (confirmed to still trigger the exception):

 {{{
  MULTIPOLYGON(((374426.89741116 4787675.8025854,374427.56662258
 4787711.99283997,374426.900569702 4787675.97339609,374426.902728388
 4787675.96917152,374426.975653354 4787675.87688639,374427.06518102
 4787675.80060145,374427.067252051 4787675.79944476,374475.444261707
 4787674.90487385,374426.89741116 4787675.8025854)),((374428.75351687
 4787776.17884336,374428.756657488 4787776.34868469,374529.302733787
 4787774.48939022,374529.299575299 4787774.31857999,374529.297416752
 4787774.32280429,374529.224491812 4787774.41508938,374529.134964183
 4787774.49137429,374529.132893285 4787774.49253091,374428.927468682
 4787776.34552605,374428.923243803 4787776.34336721,374428.830958625
 4787776.27044224,374428.754673643 4787776.18091454,374428.75351687
 4787776.17884336)),((374527.446655853 4787674.11316295,374527.443515282
 4787673.94332165,374527.272704118 4787673.94648023,374527.276928978
 4787673.94863906,374527.369214133 4787674.02156407,374527.445499087
 4787674.11109178,374527.446655853 4787674.11316295)))

  POLYGON((374428.926498378 4787776.345544,374428.924427348
 4787776.34670069,374428.834899705 4787776.42298565,374428.761974768
 4787776.5152708,374428.759816084 4787776.51949538,374430.61279467
 4787876.72495747,374430.613951443 4787876.72702865,374430.690236453
 4787876.81655632,374430.782521654 4787876.88948127,374430.786746533
 4787876.89164011,374530.99214325 4787875.03861435,374530.994214147
 4787875.03745774,374531.083741752 4787874.96117279,374531.156666663
 4787874.86888768,374531.158825209 4787874.86466338,374529.305874411
 4787774.65923153,374529.304717644 4787774.65716035,374529.228432662
 4787774.56763266,374529.136147484 4787774.49470769,374529.131922623
 4787774.49254886,374428.926498378 4787776.345544))
 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/737#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From thilo.fischer at ksti.de  Tue Oct 27 04:48:45 2015
From: thilo.fischer at ksti.de (thilo.fischer at ksti.de)
Date: Tue, 27 Oct 2015 11:48:45 +0000
Subject: [geos-devel] Object Destruction
Message-ID: <D253FA57.79B3%thilo.fischer@ksti.de>

Hello,

to my understanding, one should always delete/free heap memory allocations
with the same mechanism and in the same context as used to allocate the
memory. E.g. don't mix C's malloc with C++'s delete or C++'s new with C's
free on the same object. For this reason, I always use
  myGeosGeometry->getFactory()->destroyGeometry(myGeosGeometry);
instead of
  delete myGeosGeometry;
This looks a little odd, but after some googling this was the best
approach I could find to destroy GEOS Geometry objects properly.

Now I need to delete a CoordinateSequence, and could not find any
appropriate destroy function to do so. destroyGeometry won't work because
CoordinateSequence is not a child class of Geometry.

After some googling, the only thing I found on this topic was this
http://trac.osgeo.org/geos/ticket/325 wontfix-closed task from 2008. This
mailing-list discussion thread
https://lists.osgeo.org/pipermail/geos-devel/2008-August/thread.html#3437
addressed the same issue, but for a different class (PreparedGeometry). As
Mateusz and his referenced FAQ entry from the GDAL wiki point out, one
might get serious trouble on Windows systems when reserving and deleting
heap allocations inconsistently. I guess this would have been the point
why to expose such interface that was not seen when closing #325 wontfix :(

Is it that a destroy function for CoordinateSequence is missing in GEOS
(is it a bug?), or did I fail to notice some detail in the GEOS API which
solves this issue? Is
myGeosGeometry->getFactory()->destroyGeometry(myGeosGeometry) the intended
way to delete Geometry objects?

Thank, best regards

Thilo Fischer




From mateusz at loskot.net  Fri Oct 30 02:10:55 2015
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 30 Oct 2015 10:10:55 +0100
Subject: [geos-devel] Object Destruction
In-Reply-To: <D253FA57.79B3%thilo.fischer@ksti.de>
References: <D253FA57.79B3%thilo.fischer@ksti.de>
Message-ID: <CABUeae95UTS0VP14+uYKaJFhNOd7OOcyevjpPgwO1hzb99DJKg@mail.gmail.com>

On 27 October 2015 at 12:48, thilo.fischer at ksti.de
<thilo.fischer at ksti.de> wrote:
> http://trac.osgeo.org/geos/ticket/325
> [...]
> Is it that a destroy function for CoordinateSequence is missing in GEOS
> (is it a bug?),

I'd say, Sandro's comment explains the reason:

"In JTS GeometryFactory? is a class while CoordinateSequenceFactory?
is an interface. In JTS neither GeometryFactory? nor
CoordinateSequenceFactory? have a destroy function."

> or did I fail to notice some detail in the GEOS API which solves this issue?

C API offers GEOSCoordSeq_destroy for this purpose.

> Is myGeosGeometry->getFactory()->destroyGeometry(myGeosGeometry) the intended
> way to delete Geometry objects?

IMO, yes, whenever you have access to "named destructor", call it.

Best regards,
-- 
Mateusz  Loskot, http://mateusz.loskot.net

From thilo.fischer at ksti.de  Fri Oct 30 02:47:57 2015
From: thilo.fischer at ksti.de (thilo.fischer at ksti.de)
Date: Fri, 30 Oct 2015 09:47:57 +0000
Subject: [geos-devel] Object Destruction
In-Reply-To: <CABUeae95UTS0VP14+uYKaJFhNOd7OOcyevjpPgwO1hzb99DJKg@mail.gmail.com>
References: <D253FA57.79B3%thilo.fischer@ksti.de>
 <CABUeae95UTS0VP14+uYKaJFhNOd7OOcyevjpPgwO1hzb99DJKg@mail.gmail.com>
Message-ID: <D258F77D.79D8%thilo.fischer@ksti.de>

On 30 October 2015 at 10:10, <geos-devel-bounces at lists.osgeo.org on behalf
of mateusz at loskot.net> wrote:
>> http://trac.osgeo.org/geos/ticket/325
>> [...]
>> Is it that a destroy function for CoordinateSequence is missing in GEOS
>> (is it a bug?),
>
>I'd say, Sandro's comment explains the reason:
>
>"In JTS GeometryFactory? is a class while CoordinateSequenceFactory?
>is an interface. In JTS neither GeometryFactory? nor
>CoordinateSequenceFactory? have a destroy function."

I must confess: I don't fully understand this part of Sandro's comment. In
JTS, we have Garbage Collection and thus no need for destruction
functions, isn't it? Thus, it is a completely different story in JTS and
GEOS IMHO. Why would it matter whether the one or the other thing is a
class or an interface on JTS side?

Thanks, best regards,

Thilo Fischer
>


From mateusz at loskot.net  Fri Oct 30 03:27:58 2015
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 30 Oct 2015 11:27:58 +0100
Subject: [geos-devel] Object Destruction
In-Reply-To: <D258F77D.79D8%thilo.fischer@ksti.de>
References: <D253FA57.79B3%thilo.fischer@ksti.de>
 <CABUeae95UTS0VP14+uYKaJFhNOd7OOcyevjpPgwO1hzb99DJKg@mail.gmail.com>
 <D258F77D.79D8%thilo.fischer@ksti.de>
Message-ID: <CABUeae-hdE5za5m6RcBSJiG2EYNJ8fvTZSc9am4dGDOsnWpVpQ@mail.gmail.com>

On 30 October 2015 at 10:47, thilo.fischer at ksti.de
<thilo.fischer at ksti.de> wrote:
> On 30 October 2015 at 10:10, <geos-devel-bounces at lists.osgeo.org on behalf
> of mateusz at loskot.net> wrote:
>>> http://trac.osgeo.org/geos/ticket/325
>>> [...]
>>> Is it that a destroy function for CoordinateSequence is missing in GEOS
>>> (is it a bug?),
>>
>>I'd say, Sandro's comment explains the reason:
>>
>>"In JTS GeometryFactory? is a class while CoordinateSequenceFactory?
>>is an interface. In JTS neither GeometryFactory? nor
>>CoordinateSequenceFactory? have a destroy function."
>
> I must confess: I don't fully understand this part of Sandro's comment. In
> JTS, we have Garbage Collection and thus no need for destruction
> functions, isn't it?

I understand it differently: JTS API does not provide such method(s),
so GEOS does not have it either - GEOS is a direct port of JTS without
any (or strictly limited) custom extension to the master API defined in JTS.

However, it would be best if Sandro chimed in and clarify that.

Best regards,
-- 
Mateusz  Loskot, http://mateusz.loskot.net

From strk at keybit.net  Fri Oct 30 03:55:59 2015
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 30 Oct 2015 11:55:59 +0100
Subject: [geos-devel] Object Destruction
In-Reply-To: <CABUeae-hdE5za5m6RcBSJiG2EYNJ8fvTZSc9am4dGDOsnWpVpQ@mail.gmail.com>
References: <D253FA57.79B3%thilo.fischer@ksti.de>
 <CABUeae95UTS0VP14+uYKaJFhNOd7OOcyevjpPgwO1hzb99DJKg@mail.gmail.com>
 <D258F77D.79D8%thilo.fischer@ksti.de>
 <CABUeae-hdE5za5m6RcBSJiG2EYNJ8fvTZSc9am4dGDOsnWpVpQ@mail.gmail.com>
Message-ID: <20151030105559.GA12896@localhost>

My comment just pointed out a de-facto situation:
JTS had no destructors.

In trunk we finally prevented GeometryFactory destruction via delete,
delegating it instead to its .destroy() method.

But I think you're asking about Geometry and CoordinateSequence ?

As mentioned 4 years ago, if you feel something is needed there,
please send a patch. The maintained API for GEOS is the C-API which
should have destruction methods for all objects.

--strk;

On Fri, Oct 30, 2015 at 11:27:58AM +0100, Mateusz Loskot wrote:
> On 30 October 2015 at 10:47, thilo.fischer at ksti.de
> <thilo.fischer at ksti.de> wrote:
> > On 30 October 2015 at 10:10, <geos-devel-bounces at lists.osgeo.org on behalf
> > of mateusz at loskot.net> wrote:
> >>> http://trac.osgeo.org/geos/ticket/325
> >>> [...]
> >>> Is it that a destroy function for CoordinateSequence is missing in GEOS
> >>> (is it a bug?),
> >>
> >>I'd say, Sandro's comment explains the reason:
> >>
> >>"In JTS GeometryFactory? is a class while CoordinateSequenceFactory?
> >>is an interface. In JTS neither GeometryFactory? nor
> >>CoordinateSequenceFactory? have a destroy function."
> >
> > I must confess: I don't fully understand this part of Sandro's comment. In
> > JTS, we have Garbage Collection and thus no need for destruction
> > functions, isn't it?
> 
> I understand it differently: JTS API does not provide such method(s),
> so GEOS does not have it either - GEOS is a direct port of JTS without
> any (or strictly limited) custom extension to the master API defined in JTS.
> 
> However, it would be best if Sandro chimed in and clarify that.
> 
> Best regards,
> -- 
> Mateusz  Loskot, http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From geos-trac at osgeo.org  Sat Oct 31 02:25:40 2015
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 31 Oct 2015 09:25:40 -0000
Subject: [geos-devel] [GEOS] #752: TopologyException while comparing
	collections
Message-ID: <047.61f0cbc6e0f08957a7b673764f346c50@osgeo.org>

#752: TopologyException while comparing collections
------------------------+--------------------------
 Reporter:  sirsigurd   |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.5.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 code to reproduce

 {{{
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>

 #include "geos_c.h"

 void
 log_and_exit(const char *fmt, ...) {
         va_list ap;

         fprintf( stdout, "ERROR: ");

         va_start (ap, fmt);
         vfprintf( stdout, fmt, ap);
         va_end(ap);
         fprintf( stdout, "\n" );
         exit(1);
 }

 void main() {
     initGEOS(NULL, log_and_exit);
     GEOSGeometry* pol1 = GEOSGeomFromWKT(
       "POLYGON ("
         "(0 0, 0 4, 4 4, 4 0, 0 0)"
       ")");
     GEOSGeometry* pol2 = GEOSGeomFromWKT(
       "POLYGON ("
         "(3 3, 3 4, 4 4, 4 3, 3 3)"
       ")");
     GEOSGeometry* polys[] = {pol1, pol2};
     GEOSGeometry* coll =
 GEOSGeom_createCollection(GEOS_GEOMETRYCOLLECTION, polys, 2);

     printf("polygon1 is valid: %d\n", GEOSisValid(pol1));
     printf("polygon2 is valid: %d\n", GEOSisValid(pol2));
     printf("collection is valid: %d\n", GEOSisValid(coll));
     printf("collection relate to itself: %d\n", GEOSEquals(coll, coll));
 }
 }}}

 output

 {{{
 polygon1 is valid: 1
 polygon2 is valid: 1
 collection is valid: 1
 ERROR: TopologyException: side location conflict at 3 4
 }}}

--
Ticket URL: <https://trac.osgeo.org/geos/ticket/752>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

