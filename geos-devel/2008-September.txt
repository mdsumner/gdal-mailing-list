From do_not_reply_to_this_address at t-online.de  Wed Sep  3 15:36:23 2008
From: do_not_reply_to_this_address at t-online.de (hunniger)
Date: Wed Sep  3 15:53:21 2008
Subject: [geos-devel] Looking for a geometry engine
Message-ID: <48BEE737.1020508@cip.physik.uni-bonn.de>

Hello,
my name is Dirk, I studied physics, and work for a mechanical 
engineering company.
In my free time I like to write software, and most of all I like Python.
We often model machines as two dimensional objects with nodes, some of 
which are free, some of which are (partially) fixed that are connected 
by lines. We model the movement of a machines by changing the length of 
a line, cause some free nodes to move. Currently I am getting paid for 
calculating these movements by hand. Since I don't like my work I would 
like write a software to do it instead of me and publish it open source. 
So is geos able to solve this kind of problems and would this be a good 
point for me to start with?
Yours Dirk

PS: I just want to give a short example of a problem I would like to solve.

Let there be a point A at (0,0) , and let there be an other point B 
(0,1) , there shall be a further point C, that has a distance of 1 from 
A as well as from B. What are the coordinates of C. (Well Ok there are 
two solutions). And what is the trajectory on which C moves if the 
distance between A and C increases from 1 to 2. And all other distances 
stay the same.


From sgillies at frii.com  Wed Sep  3 16:18:20 2008
From: sgillies at frii.com (Sean Gillies)
Date: Wed Sep  3 16:16:33 2008
Subject: [geos-devel] Looking for a geometry engine
In-Reply-To: <48BEE737.1020508@cip.physik.uni-bonn.de>
References: <48BEE737.1020508@cip.physik.uni-bonn.de>
Message-ID: <48BEF10C.8080902@frii.com>

hunniger wrote:
> Hello,
> my name is Dirk, I studied physics, and work for a mechanical
> engineering company.
> In my free time I like to write software, and most of all I like Python.
> We often model machines as two dimensional objects with nodes, some of
> which are free, some of which are (partially) fixed that are connected
> by lines. We model the movement of a machines by changing the length of
> a line, cause some free nodes to move. Currently I am getting paid for
> calculating these movements by hand. Since I don't like my work I would
> like write a software to do it instead of me and publish it open source.
> So is geos able to solve this kind of problems and would this be a good
> point for me to start with?
> Yours Dirk
> 
> PS: I just want to give a short example of a problem I would like to solve.
> 
> Let there be a point A at (0,0) , and let there be an other point B
> (0,1) , there shall be a further point C, that has a distance of 1 from
> A as well as from B. What are the coordinates of C. (Well Ok there are
> two solutions). And what is the trajectory on which C moves if the
> distance between A and C increases from 1 to 2. And all other distances
> stay the same.
> 

Sounds like what you need is matlab-ish software. GEOS is geared towards
answering questions like "do landscape patches A and B intersect, and if
so, what is their intersection patch(es)?" and isn't ideal for solving
algebra problems.

Cheers,
Sean

From mchapman at fortifieddatacom.com  Wed Sep  3 16:17:30 2008
From: mchapman at fortifieddatacom.com (Martin Chapman)
Date: Wed Sep  3 16:28:07 2008
Subject: [geos-devel] Looking for a geometry engine
In-Reply-To: <48BEE737.1020508@cip.physik.uni-bonn.de>
References: <48BEE737.1020508@cip.physik.uni-bonn.de>
Message-ID: <000b01c90e02$210f15d0$632d4170$@com>

Dirk,

For open source maybe CGAL at http://www.cgal.org/.  

There is a good book called "Geometric Tools for Computer Graphics" at
http://www.amazon.com/Geometric-Computer-Graphics-Morgan-Kaufmann/dp/1558605
940/ref=sr_1_26?ie=UTF8&s=books&qid=1220472802&sr=8-26 (among others) that
have a lot of vector based math algorithms.  The book contains a lot of
pseudo code implementations using java.

Martin
  

-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org
[mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of hunniger
Sent: Wednesday, September 03, 2008 1:36 PM
To: geos-devel@lists.osgeo.org
Subject: [geos-devel] Looking for a geometry engine

Hello,
my name is Dirk, I studied physics, and work for a mechanical 
engineering company.
In my free time I like to write software, and most of all I like Python.
We often model machines as two dimensional objects with nodes, some of 
which are free, some of which are (partially) fixed that are connected 
by lines. We model the movement of a machines by changing the length of 
a line, cause some free nodes to move. Currently I am getting paid for 
calculating these movements by hand. Since I don't like my work I would 
like write a software to do it instead of me and publish it open source. 
So is geos able to solve this kind of problems and would this be a good 
point for me to start with?
Yours Dirk

PS: I just want to give a short example of a problem I would like to solve.

Let there be a point A at (0,0) , and let there be an other point B 
(0,1) , there shall be a further point C, that has a distance of 1 from 
A as well as from B. What are the coordinates of C. (Well Ok there are 
two solutions). And what is the trajectory on which C moves if the 
distance between A and C increases from 1 to 2. And all other distances 
stay the same.


_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Thu Sep  4 08:16:57 2008
From: geos-trac at osgeo.org (GEOS)
Date: Thu Sep  4 08:16:58 2008
Subject: [geos-devel] [GEOS] #205: Build problem on Solaris
Message-ID: <045.aba6a487c4a4a5c6fa20e2f9f0685358@osgeo.org>

#205: Build problem on Solaris
------------------------+---------------------------------------------------
 Reporter:  magne       |       Owner:  geos-devel@lists.osgeo.org
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:                            
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 The current svn version does not build on Solaris.

 There are a couple of small issues (missing std:: , not including clocale,
 etc.)


 I've attached a patch that seems to do the trick (I've also tested on
 Linux)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/205>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From niki.spahiev at gmail.com  Fri Sep  5 05:36:37 2008
From: niki.spahiev at gmail.com (=?ISO-8859-5?B?vdja3tvQ2Q==?=)
Date: Fri Sep  5 05:36:39 2008
Subject: [geos-devel] Looking for a geometry engine
In-Reply-To: <48BEE737.1020508@cip.physik.uni-bonn.de>
References: <48BEE737.1020508@cip.physik.uni-bonn.de>
Message-ID: <67c229320809050236t74f2882cwab14ffd00f36c4a2@mail.gmail.com>

What are you looking for is constraint solver. Unfortunately it seems
from your description that linear constraints are not enough (distance
is quadratic) and most open source solvers are linear.

see http://www.gecode.org/ and
http://www.plm.automation.siemens.com/en_us/products/open/d-cubed/

HTH

Niki Spahiev
From charles.thibert at ingres.com  Thu Sep 11 10:23:21 2008
From: charles.thibert at ingres.com (Chuck Thibert)
Date: Thu Sep 11 10:23:25 2008
Subject: [geos-devel] Proposed fix for #197
In-Reply-To: <67c229320809050236t74f2882cwab14ffd00f36c4a2@mail.gmail.com>
References: <48BEE737.1020508@cip.physik.uni-bonn.de>
	<67c229320809050236t74f2882cwab14ffd00f36c4a2@mail.gmail.com>
Message-ID: <1221143001.3304.2.camel@localhost.localdomain>

Hi all,

As preparation for proposing a thread safe CAPI fix I thought I'd get my
feet wet and fix a simple bug currently in Trac.  I've attached a patch
to bug #197 that fixes the seg fault.

Thanks,
Chuck
From pramsey at cleverelephant.ca  Thu Sep 11 12:56:13 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu Sep 11 12:56:15 2008
Subject: [geos-devel] Proposed fix for #197
In-Reply-To: <1221143001.3304.2.camel@localhost.localdomain>
References: <48BEE737.1020508@cip.physik.uni-bonn.de>
	<67c229320809050236t74f2882cwab14ffd00f36c4a2@mail.gmail.com>
	<1221143001.3304.2.camel@localhost.localdomain>
Message-ID: <30fe546d0809110956hf6f1ff7hf9d558579e703f33@mail.gmail.com>

Looks good to me, but what the heck do I know? :) Mateusz?

On Thu, Sep 11, 2008 at 7:23 AM, Chuck Thibert
<charles.thibert@ingres.com> wrote:
> Hi all,
>
> As preparation for proposing a thread safe CAPI fix I thought I'd get my
> feet wet and fix a simple bug currently in Trac.  I've attached a patch
> to bug #197 that fixes the seg fault.
>
> Thanks,
> Chuck
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From swongu at gmail.com  Thu Sep 11 13:50:47 2008
From: swongu at gmail.com (Stephen Wong)
Date: Thu Sep 11 13:50:50 2008
Subject: [geos-devel] Crash when buffering a geometry
In-Reply-To: <30fe546d0808111553k38f5b23dkbb8fb433abc74b55@mail.gmail.com>
References: <633230220808081148k527bd31cjfc451501184953f5@mail.gmail.com>
	<30fe546d0808111142l1caa22n7519688724806334@mail.gmail.com>
	<633230220808111341h147be04en3e281f9b40615a8d@mail.gmail.com>
	<30fe546d0808111553k38f5b23dkbb8fb433abc74b55@mail.gmail.com>
Message-ID: <633230220809111050s26efc5ffp49bc7415f54a0161@mail.gmail.com>

Paul, Any update to this bug? It sounded like you were working on a patch...
Stephen


On Mon, Aug 11, 2008 at 3:53 PM, Paul Ramsey <pramsey@cleverelephant.ca>wrote:

> In retrospect, the problem was (surprise!) between my ears. The unit
> test harness runs in the context of a directory one lower than your
> test case directory. When I copied the test data down into the
> expected location, it ran, and failed.
>
> So, consider your test case confirmed on OS/X. It be broken. Now I'll
> try the patch.
>
> P.
>
> On Mon, Aug 11, 2008 at 1:41 PM, Stephen Wong <swongu@gmail.com> wrote:
> > Hi Paul,
> > Thanks for the quick response. I just ran the test again (Windows Vista,
> > 32-bit) and it doesn't get stuck on reading the WKB, so maybe it has to
> do
> > with cross-platform compatibility.  I took the WKB and converted it to
> hex,
> > so hopefully, it will work this time. I've attached it to the ticket
> > (http://trac.osgeo.org/geos/ticket/188). The file I/O operations in the
> .cpp
> > file now look like this:
> > std::ifstream fin ;
> > fin.open( "hex.ogc" ) ;
> > GeometryAPtr geom( reader_.readHEX( fin ) ) ;
> > Thanks,
> > Stephen
> >
> > On Mon, Aug 11, 2008 at 11:42 AM, Paul Ramsey <pramsey@cleverelephant.ca
> >
> > wrote:
> >>
> >> Stephen,
> >>
> >> When I integrate your code into my OS/X build and run the unit tests,
> >> I don't get as far as buffering...
> >>
> >> ---> group: geos::operation::BufferOp, test: test<1>
> >>     problem: unexpected exception
> >>     exception typeid: N4geos2io14ParseExceptionE
> >>     message: "ParseException: Unknown WKB type 0"
> >>
> >> Are you certain that WKB fragment is good?
> >>
> >> Paul
> >>
> >> On Fri, Aug 8, 2008 at 11:48 AM, Stephen Wong <swongu@gmail.com> wrote:
> >> > Hello,
> >> > I have found that when using BufferOp on a specific polygon, GEOS
> >> > crashes
> >> > with an assertion failure.  This failure appears to be within
> >> > RightmostEdgeFinder, and I have documented it on a ticket
> >> > (http://trac.osgeo.org/geos/ticket/188). On that ticket, I have also
> >> > provided a .zip file that reproduces the error. The surprising this is
> >> > that
> >> > the geometry is not complicated at all!
> >> > I have posted this problem in March
> >> > (see
> >> > http://lists.osgeo.org/pipermail/geos-devel/2008-March/003324.html),
> >> > but didn't get a response thus far; hopefully posting here will help.
> >> >  Thanks in advance.
> >> > Regards,
> >> > Stephen
> >> > _______________________________________________
> >> > geos-devel mailing list
> >> > geos-devel@lists.osgeo.org
> >> > http://lists.osgeo.org/mailman/listinfo/geos-devel
> >> >
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel@lists.osgeo.org
> >> http://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080911/30f65e14/attachment.html
From pramsey at cleverelephant.ca  Mon Sep 15 19:38:30 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Sep 15 19:38:33 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <48CECE99.2080200@loskot.net>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
Message-ID: <30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>

Ok, thanks. Anyone else in GEOS you know who will be there? We need
(should) report out to the AGM on our status / existence.

P.

On Mon, Sep 15, 2008 at 2:07 PM, Mateusz Loskot <mateusz@loskot.net> wrote:
> Paul,
>
> Unfortunately, I'm not. I hope to be in Australia in 2009.
>
> mateo
>
>
> Paul Ramsey wrote:
>> Mat, are you going to Cape Town?
>>
>> P
From robe.dnd at cityofboston.gov  Wed Sep 17 09:41:59 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 09:43:25 2008
Subject: [geos-devel] OverlayOp JTS port
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D204B725F5@ZDND.DND.boston.cob>

I accidentally sent to the old address.  Sorry about that.
-------------------------------------------------------
I'm looking at the operation.overlay.OverlayOp in geos trunk

In the header it says
Last port: operation/overlay/OverlayOp.java rev. 1.23

But I don't believe this to be right since when I compare the
computeOverlay methods
against 1.2 and 1.3 versions of JTS codebase, it has an additional
EdgeNodingValidator check which wasn't introduced until later versions
of JTS.

So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
comment above just plain wrong.

It also has a checkObviouslyWrongResult() check at the end of
computerOverlay which I haven't figured out which version that was
introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS specific
check that has no JTS equivalent?

Thanks,
Regina
-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.

From robe.dnd at cityofboston.gov  Wed Sep 17 09:26:57 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 11:30:51 2008
Subject: [geos-devel] OverlayOp JTS port
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>

I'm looking at the operation.overlay.OverlayOp in geos trunk

In the header it says
Last port: operation/overlay/OverlayOp.java rev. 1.23

But I don't believe this to be right since when I compare the
computeOverlay methods
against 1.2 and 1.3 versions of JTS codebase, it has an additional
EdgeNodingValidator check which wasn't introduced until later versions
of JTS.

So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
comment above just plain wrong.

It also has a checkObviouslyWrongResult() check at the end of
computerOverlay which I haven't figured out which version that was
introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS specific
check that has no JTS equivalent?

Thanks,
Regina
-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.

From mateusz at loskot.net  Wed Sep 17 08:03:15 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 17 11:30:55 2008
Subject: [geos-devel] Re: [postgis-devel] Geos Capi OverlayOp,
	overlayOp question
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>
Message-ID: <48D0F203.6070402@loskot.net>

Obe, Regina wrote:
> I'm still trying to understand the geos codebase and just  C and C++ in
> general, so forgive me if my questions seem naive.
> 
> In the geos_c.cpp (both trunk and 3.0) - starting at line 92
> 
> I see this
> using geos::operation::overlay::OverlayOp;
> using geos::operation::overlay::overlayOp;
> 
> I assume the one in use would be geos::operation::overlay::OverlayOp
> since when I navigate up the source tree, that's the one I see and the
> other is simply ignored?

Regina,

Yes, this is doubled use of using directive. The one in line 89 is
enough, the second one in line 90 should be removed as ignored by
compiler.

> I just want to know what the significance of this is? Seems to deviate
> from the rest of the convention of the code.

Are you asking about the redundant "using" directive or about use of
"using" directive in general?

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From robe.dnd at cityofboston.gov  Wed Sep 17 08:13:59 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 11:47:15 2008
Subject: [geos-devel] RE: [postgis-devel] Geos Capi OverlayOp,
	overlayOp question
In-Reply-To: <48D0F203.6070402@loskot.net>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>
	<48D0F203.6070402@loskot.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>

Mateusz,

> Are you asking about the redundant "using" directive or about use of
> "using" directive in general?

Mostly the redundant using.  I wasn't sure if there was some mysterious
class I was missing. I assume using in C++ plays the same role as it
does in C#.

Thanks,
Regina
-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.

From robe.dnd at cityofboston.gov  Wed Sep 17 07:09:55 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 12:03:54 2008
Subject: [geos-devel] Geos Capi OverlayOp, overlayOp question
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>

I'm still trying to understand the geos codebase and just  C and C++ in
general, so forgive me if my questions seem naive.

In the geos_c.cpp (both trunk and 3.0) - starting at line 92

I see this
using geos::operation::overlay::OverlayOp;
using geos::operation::overlay::overlayOp;

I assume the one in use would be geos::operation::overlay::OverlayOp
since when I navigate up the source tree, that's the one I see and the
other is simply ignored?

I just want to know what the significance of this is? Seems to deviate
from the rest of the convention of the code.

Thanks,
Regina
-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.

From mateusz at loskot.net  Wed Sep 17 08:35:00 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 17 12:03:54 2008
Subject: [geos-devel] Re: [postgis-devel] Geos Capi OverlayOp,
	overlayOp question
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>	<48D0F203.6070402@loskot.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>
Message-ID: <48D0F974.7000302@loskot.net>

Obe, Regina wrote:
> Mateusz,
> 
>> Are you asking about the redundant "using" directive or about use of
>> "using" directive in general?
> 
> Mostly the redundant using. I wasn't sure if there was some mysterious
> class I was missing.

OK

> I assume using in C++ plays the same role as it does in C#.

Yes, it's very similar.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mateusz at loskot.net  Wed Sep 17 12:19:43 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 17 12:19:49 2008
Subject: [geos-devel] RE: [postgis-devel] Geos Capi OverlayOp,	overlayOp
	question
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>	<48D0F203.6070402@loskot.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>
Message-ID: <48D12E1F.3000706@loskot.net>

Obe, Regina wrote:
> Mateusz,
> 
>> Are you asking about the redundant "using" directive or about use of
>> "using" directive in general?
> 
> Mostly the redundant using.

Regina,

I have to correct my response.
There is no redundant use of using directive in geos_c.cpp file.

The first using (line 89) "imports" OverlayOp class defined in line 57
of OverlayOp.h file.
The second using (line 90) does the same but for distinct
type - a functor named overlayOp and defined in OverlayOp.h line 326.

The former is starts with big "O" the latter with lower-case "o".

OverlayOp file:

http://trac.osgeo.org/geos/browser/trunk/source/headers/geos/operation/overlay/OverlayOp.h?rev=1820

So, both lines 89 and 90 are needed in file geos_c.cpp.

Sorry for confusions, I didn't notice the case of O letter at first.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mateusz at loskot.net  Wed Sep 17 12:19:43 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 17 12:20:57 2008
Subject: [geos-devel] RE: [postgis-devel] Geos Capi OverlayOp,	overlayOp
	question
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B7249F@ZDND.DND.boston.cob>	<48D0F203.6070402@loskot.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204B724AD@ZDND.DND.boston.cob>
Message-ID: <48D12E1F.3000706@loskot.net>

Obe, Regina wrote:
> Mateusz,
> 
>> Are you asking about the redundant "using" directive or about use of
>> "using" directive in general?
> 
> Mostly the redundant using.

Regina,

I have to correct my response.
There is no redundant use of using directive in geos_c.cpp file.

The first using (line 89) "imports" OverlayOp class defined in line 57
of OverlayOp.h file.
The second using (line 90) does the same but for distinct
type - a functor named overlayOp and defined in OverlayOp.h line 326.

The former is starts with big "O" the latter with lower-case "o".

OverlayOp file:

http://trac.osgeo.org/geos/browser/trunk/source/headers/geos/operation/overlay/OverlayOp.h?rev=1820

So, both lines 89 and 90 are needed in file geos_c.cpp.

Sorry for confusions, I didn't notice the case of O letter at first.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From robe.dnd at cityofboston.gov  Wed Sep 17 14:00:15 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 14:00:40 2008
Subject: [geos-devel] OverlayOp JTS port
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>

I apologize for the barrage of questions.  As far as I can tell the 
OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9 for this class)

except it has the additional calls of

checkObviouslyWrongResult() - which most of that code looks like it would never
be called because of the #ifdefs except for the  

assert(resultGeom); 
UNREFERENCED_PARAMETER(opCode); (have no clue what this does)

and also a 
elevationMatrix->elevate(resultGeom);

which looks like will get called since USE_ELEVATION_MATRIX 1.

Is the elevationMatrix designed to deal with 3d geometries?  Didn't realize 
Union actually works with those, but then I never tried it with 3d.

So I'm a little puzzled why these 2 extra function calls since I always thought
GEOS was at best on par with JTS?

Thanks,
Regina

-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
Sent: Wed 9/17/2008 9:26 AM
To: GEOS Development List
Subject: [geos-devel] OverlayOp JTS port
 
I'm looking at the operation.overlay.OverlayOp in geos trunk

In the header it says
Last port: operation/overlay/OverlayOp.java rev. 1.23

But I don't believe this to be right since when I compare the
computeOverlay methods
against 1.2 and 1.3 versions of JTS codebase, it has an additional
EdgeNodingValidator check which wasn't introduced until later versions
of JTS.

So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
comment above just plain wrong.

It also has a checkObviouslyWrongResult() check at the end of
computerOverlay which I haven't figured out which version that was
introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS specific
check that has no JTS equivalent?

Thanks,
Regina
-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.

_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080917/7c5d8116/attachment.html
From mateusz at loskot.net  Wed Sep 17 14:14:40 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 17 14:14:45 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
Message-ID: <48D14910.2050806@loskot.net>

Obe, Regina wrote:
> I apologize for the barrage of questions.  As far as I can tell the 
> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS
> 1.9 for this class)
> 
> except it has the additional calls of
> 
> checkObviouslyWrongResult() - which most of that code looks like it
> would never be called because of the #ifdefs

I'd not be that sure it is never called.
However, I'm not familiar with design of this part and I'm not sure in
what conditions ENABLE_OTHER_OVERLAY_RESULT_VALIDATORS is defined.

> except for the
> 
> assert(resultGeom);

Regina,

It's a simple pre-condition test.

> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)

Simple hack to prevent compiler from throwing warnings about unused
variables, etc.
It is only activated if ENABLE_OTHER_OVERLAY_RESULT_VALIDATORS is *not*
defined.

You can safely ignore these two lines.

> and also a elevationMatrix->elevate(resultGeom);
> 
> which looks like will get called since USE_ELEVATION_MATRIX 1.
> 
> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
> realize Union actually works with those, but then I never tried it
> with 3d.
> 
> So I'm a little puzzled why these 2 extra function calls since I
> always thought GEOS was at best on par with JTS?

Unfortunately, I'm unable to answer these questions.
Probably Sandro Santilli knows. Anybody else?

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Wed Sep 17 14:24:24 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep 17 14:19:14 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
Message-ID: <48D14B58.3080008@refractions.net>

The original plan for GEOS was that it would track JTS 100%.  This was 
to simplify porting new functionality as it is added to JTS.  However, 
at one point I think Sandro did some extra work on trying to improve 
GEOS robustness.  This is probably where the checkObviouslyWrongResult 
came from.  After this was done, JTS caught up - so this method may not 
be needed any more.



Obe, Regina wrote:
>
> I apologize for the barrage of questions.  As far as I can tell the
> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9 
> for this class)
>
> except it has the additional calls of
>
> checkObviouslyWrongResult() - which most of that code looks like it 
> would never
> be called because of the #ifdefs except for the 
>
> assert(resultGeom);
> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>
> and also a
> elevationMatrix->elevate(resultGeom);
>
> which looks like will get called since USE_ELEVATION_MATRIX 1.
>
> Is the elevationMatrix designed to deal with 3d geometries?  Didn't 
> realize
> Union actually works with those, but then I never tried it with 3d.
>
> So I'm a little puzzled why these 2 extra function calls since I 
> always thought
> GEOS was at best on par with JTS?
>
> Thanks,
> Regina
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
> Sent: Wed 9/17/2008 9:26 AM
> To: GEOS Development List
> Subject: [geos-devel] OverlayOp JTS port
>
> I'm looking at the operation.overlay.OverlayOp in geos trunk
>
> In the header it says
> Last port: operation/overlay/OverlayOp.java rev. 1.23
>
> But I don't believe this to be right since when I compare the
> computeOverlay methods
> against 1.2 and 1.3 versions of JTS codebase, it has an additional
> EdgeNodingValidator check which wasn't introduced until later versions
> of JTS.
>
> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
> comment above just plain wrong.
>
> It also has a checkObviouslyWrongResult() check at the end of
> computerOverlay which I haven't figured out which version that was
> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS specific
> check that has no JTS equivalent?
>
> Thanks,
> Regina
> -----------------------------------------
> The substance of this message, including any attachments, may be
> confidential, legally privileged and/or exempt from disclosure
> pursuant to Massachusetts law. It is intended
> solely for the addressee. If you received this in error, please
> contact the sender and delete the material from any computer.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Wed Sep 17 14:35:58 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 17 14:36:04 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <48D14B58.3080008@refractions.net>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
	<48D14B58.3080008@refractions.net>
Message-ID: <48D14E0E.9050608@loskot.net>

Martin Davis wrote:
> The original plan for GEOS was that it would track JTS 100%.  This was
> to simplify porting new functionality as it is added to JTS.  However,
> at one point I think Sandro did some extra work on trying to improve
> GEOS robustness.  This is probably where the checkObviouslyWrongResult
> came from.  

To complete the discussion, here is Sandro's submission of with function:

http://trac.osgeo.org/geos/changeset/1679

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From robe.dnd at cityofboston.gov  Wed Sep 17 14:39:39 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 14:40:03 2008
Subject: [geos-devel] OverlayOp JTS port
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob><53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
	<48D14B58.3080008@refractions.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A213@ZDND.DND.boston.cob>

The other thing I'm noticing is that the Geometry.union() methods are completely different between the Geos trunk and JTS (well 1.7 I'm looking at at the moment), but I haven't looked at older JTS code or 1.9 to
see if it matches with what it claims to be JTS 1.1 port.

The Geos Geometry.Union() has a lot of short-circuit code in it that JTS
Geometry.union doesn't (but then that could just be a result of code shuffling)

Am I safe in assuming that the whole Geometry.Union stuff is completely ignored
by Geos CAPI anyway so the point is moot as far as CAPI is concerned?  Unless of course this short-circuit stuff actually works, then we should probably use it somehow.  Based on my limited understanding of how C++ flows, I don't see how this would ever get called by CAPI.

Thanks,
Regina


-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
Sent: Wed 9/17/2008 2:24 PM
To: GEOS Development List
Subject: Re: [geos-devel] OverlayOp JTS port
 
The original plan for GEOS was that it would track JTS 100%.  This was 
to simplify porting new functionality as it is added to JTS.  However, 
at one point I think Sandro did some extra work on trying to improve 
GEOS robustness.  This is probably where the checkObviouslyWrongResult 
came from.  After this was done, JTS caught up - so this method may not 
be needed any more.



Obe, Regina wrote:
>
> I apologize for the barrage of questions.  As far as I can tell the
> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9 
> for this class)
>
> except it has the additional calls of
>
> checkObviouslyWrongResult() - which most of that code looks like it 
> would never
> be called because of the #ifdefs except for the 
>
> assert(resultGeom);
> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>
> and also a
> elevationMatrix->elevate(resultGeom);
>
> which looks like will get called since USE_ELEVATION_MATRIX 1.
>
> Is the elevationMatrix designed to deal with 3d geometries?  Didn't 
> realize
> Union actually works with those, but then I never tried it with 3d.
>
> So I'm a little puzzled why these 2 extra function calls since I 
> always thought
> GEOS was at best on par with JTS?
>
> Thanks,
> Regina
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
> Sent: Wed 9/17/2008 9:26 AM
> To: GEOS Development List
> Subject: [geos-devel] OverlayOp JTS port
>
> I'm looking at the operation.overlay.OverlayOp in geos trunk
>
> In the header it says
> Last port: operation/overlay/OverlayOp.java rev. 1.23
>
> But I don't believe this to be right since when I compare the
> computeOverlay methods
> against 1.2 and 1.3 versions of JTS codebase, it has an additional
> EdgeNodingValidator check which wasn't introduced until later versions
> of JTS.
>
> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
> comment above just plain wrong.
>
> It also has a checkObviouslyWrongResult() check at the end of
> computerOverlay which I haven't figured out which version that was
> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS specific
> check that has no JTS equivalent?
>
> Thanks,
> Regina
> -----------------------------------------
> The substance of this message, including any attachments, may be
> confidential, legally privileged and/or exempt from disclosure
> pursuant to Massachusetts law. It is intended
> solely for the addressee. If you received this in error, please
> contact the sender and delete the material from any computer.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080917/b002b2f0/attachment.html
From robe.dnd at cityofboston.gov  Wed Sep 17 17:13:23 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 17:13:40 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <48D14B58.3080008@refractions.net>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob><53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
	<48D14B58.3080008@refractions.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>

Okay I did a quick union run of a 3 d geometry in PostGIS and it
apparently does do something with the z index

SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
FROM generate_series(1,5) x
	CROSS JOIN generate_series(2,10) y
	CROSS JOIN generate_series(1,10) z;

yields
MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
9.001953125,5 10 9.001953125)

Running the same exercise in OpenJump and looking at the output of GML,
WKT, CL I don't get a Z-axis.

I can't tell if its just that the z is not supported in those formats or
if its just because in JTS the z axis is thrown out.  Looking at the JTS
code, I have no reason to believe its doing anything with z.

I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
for this.

The question I have is - isn't this hmm wrong - I suppose we can say its
fuzzily right.

Thanks,
Regina



-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org
[mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
Sent: Wednesday, September 17, 2008 2:24 PM
To: GEOS Development List
Subject: Re: [geos-devel] OverlayOp JTS port

The original plan for GEOS was that it would track JTS 100%.  This was 
to simplify porting new functionality as it is added to JTS.  However, 
at one point I think Sandro did some extra work on trying to improve 
GEOS robustness.  This is probably where the checkObviouslyWrongResult 
came from.  After this was done, JTS caught up - so this method may not 
be needed any more.



Obe, Regina wrote:
>
> I apologize for the barrage of questions.  As far as I can tell the
> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9

> for this class)
>
> except it has the additional calls of
>
> checkObviouslyWrongResult() - which most of that code looks like it 
> would never
> be called because of the #ifdefs except for the 
>
> assert(resultGeom);
> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>
> and also a
> elevationMatrix->elevate(resultGeom);
>
> which looks like will get called since USE_ELEVATION_MATRIX 1.
>
> Is the elevationMatrix designed to deal with 3d geometries?  Didn't 
> realize
> Union actually works with those, but then I never tried it with 3d.
>
> So I'm a little puzzled why these 2 extra function calls since I 
> always thought
> GEOS was at best on par with JTS?
>
> Thanks,
> Regina
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
> Sent: Wed 9/17/2008 9:26 AM
> To: GEOS Development List
> Subject: [geos-devel] OverlayOp JTS port
>
> I'm looking at the operation.overlay.OverlayOp in geos trunk
>
> In the header it says
> Last port: operation/overlay/OverlayOp.java rev. 1.23
>
> But I don't believe this to be right since when I compare the
> computeOverlay methods
> against 1.2 and 1.3 versions of JTS codebase, it has an additional
> EdgeNodingValidator check which wasn't introduced until later versions
> of JTS.
>
> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
> comment above just plain wrong.
>
> It also has a checkObviouslyWrongResult() check at the end of
> computerOverlay which I haven't figured out which version that was
> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
specific
> check that has no JTS equivalent?
>
> Thanks,
> Regina
> -----------------------------------------
> The substance of this message, including any attachments, may be
> confidential, legally privileged and/or exempt from disclosure
> pursuant to Massachusetts law. It is intended
> solely for the addressee. If you received this in error, please
> contact the sender and delete the material from any computer.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
>
>
------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel
From mbdavis at refractions.net  Wed Sep 17 17:33:55 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep 17 17:28:45 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob><53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>	<48D14B58.3080008@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>
Message-ID: <48D177C3.7070506@refractions.net>

I can confirm - if GEOS is doing something with computing new Z-values 
this is something which is NOT in JTS.  I vaguely recollect that this is 
something which Sandro added.

Obe, Regina wrote:
> Okay I did a quick union run of a 3 d geometry in PostGIS and it
> apparently does do something with the z index
>
> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
> FROM generate_series(1,5) x
> 	CROSS JOIN generate_series(2,10) y
> 	CROSS JOIN generate_series(1,10) z;
>
> yields
> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
> 9.001953125,5 10 9.001953125)
>
> Running the same exercise in OpenJump and looking at the output of GML,
> WKT, CL I don't get a Z-axis.
>
> I can't tell if its just that the z is not supported in those formats or
> if its just because in JTS the z axis is thrown out.  Looking at the JTS
> code, I have no reason to believe its doing anything with z.
>
> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
> for this.
>
> The question I have is - isn't this hmm wrong - I suppose we can say its
> fuzzily right.
>
> Thanks,
> Regina
>
>
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org
> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
> Sent: Wednesday, September 17, 2008 2:24 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] OverlayOp JTS port
>
> The original plan for GEOS was that it would track JTS 100%.  This was 
> to simplify porting new functionality as it is added to JTS.  However, 
> at one point I think Sandro did some extra work on trying to improve 
> GEOS robustness.  This is probably where the checkObviouslyWrongResult 
> came from.  After this was done, JTS caught up - so this method may not 
> be needed any more.
>
>
>
> Obe, Regina wrote:
>   
>> I apologize for the barrage of questions.  As far as I can tell the
>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>     
>
>   
>> for this class)
>>
>> except it has the additional calls of
>>
>> checkObviouslyWrongResult() - which most of that code looks like it 
>> would never
>> be called because of the #ifdefs except for the 
>>
>> assert(resultGeom);
>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>
>> and also a
>> elevationMatrix->elevate(resultGeom);
>>
>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>
>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't 
>> realize
>> Union actually works with those, but then I never tried it with 3d.
>>
>> So I'm a little puzzled why these 2 extra function calls since I 
>> always thought
>> GEOS was at best on par with JTS?
>>
>> Thanks,
>> Regina
>>
>> -----Original Message-----
>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>> Sent: Wed 9/17/2008 9:26 AM
>> To: GEOS Development List
>> Subject: [geos-devel] OverlayOp JTS port
>>
>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>
>> In the header it says
>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>
>> But I don't believe this to be right since when I compare the
>> computeOverlay methods
>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>> EdgeNodingValidator check which wasn't introduced until later versions
>> of JTS.
>>
>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>> comment above just plain wrong.
>>
>> It also has a checkObviouslyWrongResult() check at the end of
>> computerOverlay which I haven't figured out which version that was
>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>     
> specific
>   
>> check that has no JTS equivalent?
>>
>> Thanks,
>> Regina
>> -----------------------------------------
>> The substance of this message, including any attachments, may be
>> confidential, legally privileged and/or exempt from disclosure
>> pursuant to Massachusetts law. It is intended
>> solely for the addressee. If you received this in error, please
>> contact the sender and delete the material from any computer.
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>>
>>
>>     
> ------------------------------------------------------------------------
>   
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>     
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From pramsey at cleverelephant.ca  Wed Sep 17 18:36:18 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed Sep 17 18:36:21 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <48D177C3.7070506@refractions.net>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
	<48D14B58.3080008@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>
	<48D177C3.7070506@refractions.net>
Message-ID: <30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>

Z-processing was added under contract to the Metropolitan Airport
Commission, some years ago, so that intersections (in particular)
would retain interpolated Z-values that "made sense".  This was
GEOS-only.

Sandro also did a good deal of robustness work in GEOS only, which
dealt with failures showing up in 64-bit systems but not in 32-bit
systems. Mostly these were in the form of perturbation hacks, rounding
things up until they worked, and so on. Martin is (mostly) too pure to
result to these kinds of things :)

P.

On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net> wrote:
> I can confirm - if GEOS is doing something with computing new Z-values this
> is something which is NOT in JTS.  I vaguely recollect that this is
> something which Sandro added.
>
> Obe, Regina wrote:
>>
>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>> apparently does do something with the z index
>>
>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>> FROM generate_series(1,5) x
>>        CROSS JOIN generate_series(2,10) y
>>        CROSS JOIN generate_series(1,10) z;
>>
>> yields
>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>> 9.001953125,5 10 9.001953125)
>>
>> Running the same exercise in OpenJump and looking at the output of GML,
>> WKT, CL I don't get a Z-axis.
>>
>> I can't tell if its just that the z is not supported in those formats or
>> if its just because in JTS the z axis is thrown out.  Looking at the JTS
>> code, I have no reason to believe its doing anything with z.
>>
>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>> for this.
>>
>> The question I have is - isn't this hmm wrong - I suppose we can say its
>> fuzzily right.
>>
>> Thanks,
>> Regina
>>
>>
>>
>> -----Original Message-----
>> From: geos-devel-bounces@lists.osgeo.org
>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>> Sent: Wednesday, September 17, 2008 2:24 PM
>> To: GEOS Development List
>> Subject: Re: [geos-devel] OverlayOp JTS port
>>
>> The original plan for GEOS was that it would track JTS 100%.  This was to
>> simplify porting new functionality as it is added to JTS.  However, at one
>> point I think Sandro did some extra work on trying to improve GEOS
>> robustness.  This is probably where the checkObviouslyWrongResult came from.
>>  After this was done, JTS caught up - so this method may not be needed any
>> more.
>>
>>
>>
>> Obe, Regina wrote:
>>
>>>
>>> I apologize for the barrage of questions.  As far as I can tell the
>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>
>>
>>
>>>
>>> for this class)
>>>
>>> except it has the additional calls of
>>>
>>> checkObviouslyWrongResult() - which most of that code looks like it would
>>> never
>>> be called because of the #ifdefs except for the
>>> assert(resultGeom);
>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>
>>> and also a
>>> elevationMatrix->elevate(resultGeom);
>>>
>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>
>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>> realize
>>> Union actually works with those, but then I never tried it with 3d.
>>>
>>> So I'm a little puzzled why these 2 extra function calls since I always
>>> thought
>>> GEOS was at best on par with JTS?
>>>
>>> Thanks,
>>> Regina
>>>
>>> -----Original Message-----
>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>> Sent: Wed 9/17/2008 9:26 AM
>>> To: GEOS Development List
>>> Subject: [geos-devel] OverlayOp JTS port
>>>
>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>
>>> In the header it says
>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>
>>> But I don't believe this to be right since when I compare the
>>> computeOverlay methods
>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>> EdgeNodingValidator check which wasn't introduced until later versions
>>> of JTS.
>>>
>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>> comment above just plain wrong.
>>>
>>> It also has a checkObviouslyWrongResult() check at the end of
>>> computerOverlay which I haven't figured out which version that was
>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>
>>
>> specific
>>
>>>
>>> check that has no JTS equivalent?
>>>
>>> Thanks,
>>> Regina
>>> -----------------------------------------
>>> The substance of this message, including any attachments, may be
>>> confidential, legally privileged and/or exempt from disclosure
>>> pursuant to Massachusetts law. It is intended
>>> solely for the addressee. If you received this in error, please
>>> contact the sender and delete the material from any computer.
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>
>>>
>>>
>>>
>>
>> ------------------------------------------------------------------------
>>
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>
>>
>
> --
> Martin Davis
> Senior Technical Architect
> Refractions Research, Inc.
> (250) 383-3022
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From mbdavis at refractions.net  Wed Sep 17 19:09:11 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep 17 19:04:01 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>	<48D14B58.3080008@refractions.net>	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>	<48D177C3.7070506@refractions.net>
	<30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>
Message-ID: <48D18E17.5030902@refractions.net>

Not so much pure - I just like things that I can understand  8^)

Paul Ramsey wrote:
> Z-processing was added under contract to the Metropolitan Airport
> Commission, some years ago, so that intersections (in particular)
> would retain interpolated Z-values that "made sense".  This was
> GEOS-only.
>
> Sandro also did a good deal of robustness work in GEOS only, which
> dealt with failures showing up in 64-bit systems but not in 32-bit
> systems. Mostly these were in the form of perturbation hacks, rounding
> things up until they worked, and so on. Martin is (mostly) too pure to
> result to these kinds of things :)
>
> P.
>
> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net> wrote:
>   
>> I can confirm - if GEOS is doing something with computing new Z-values this
>> is something which is NOT in JTS.  I vaguely recollect that this is
>> something which Sandro added.
>>
>> Obe, Regina wrote:
>>     
>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>> apparently does do something with the z index
>>>
>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>> FROM generate_series(1,5) x
>>>        CROSS JOIN generate_series(2,10) y
>>>        CROSS JOIN generate_series(1,10) z;
>>>
>>> yields
>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>> 9.001953125,5 10 9.001953125)
>>>
>>> Running the same exercise in OpenJump and looking at the output of GML,
>>> WKT, CL I don't get a Z-axis.
>>>
>>> I can't tell if its just that the z is not supported in those formats or
>>> if its just because in JTS the z axis is thrown out.  Looking at the JTS
>>> code, I have no reason to believe its doing anything with z.
>>>
>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>> for this.
>>>
>>> The question I have is - isn't this hmm wrong - I suppose we can say its
>>> fuzzily right.
>>>
>>> Thanks,
>>> Regina
>>>
>>>
>>>
>>> -----Original Message-----
>>> From: geos-devel-bounces@lists.osgeo.org
>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>> To: GEOS Development List
>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>
>>> The original plan for GEOS was that it would track JTS 100%.  This was to
>>> simplify porting new functionality as it is added to JTS.  However, at one
>>> point I think Sandro did some extra work on trying to improve GEOS
>>> robustness.  This is probably where the checkObviouslyWrongResult came from.
>>>  After this was done, JTS caught up - so this method may not be needed any
>>> more.
>>>
>>>
>>>
>>> Obe, Regina wrote:
>>>
>>>       
>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>
>>>>         
>>>       
>>>> for this class)
>>>>
>>>> except it has the additional calls of
>>>>
>>>> checkObviouslyWrongResult() - which most of that code looks like it would
>>>> never
>>>> be called because of the #ifdefs except for the
>>>> assert(resultGeom);
>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>
>>>> and also a
>>>> elevationMatrix->elevate(resultGeom);
>>>>
>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>
>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>> realize
>>>> Union actually works with those, but then I never tried it with 3d.
>>>>
>>>> So I'm a little puzzled why these 2 extra function calls since I always
>>>> thought
>>>> GEOS was at best on par with JTS?
>>>>
>>>> Thanks,
>>>> Regina
>>>>
>>>> -----Original Message-----
>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>> Sent: Wed 9/17/2008 9:26 AM
>>>> To: GEOS Development List
>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>
>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>
>>>> In the header it says
>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>
>>>> But I don't believe this to be right since when I compare the
>>>> computeOverlay methods
>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>> of JTS.
>>>>
>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>> comment above just plain wrong.
>>>>
>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>> computerOverlay which I haven't figured out which version that was
>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>
>>>>         
>>> specific
>>>
>>>       
>>>> check that has no JTS equivalent?
>>>>
>>>> Thanks,
>>>> Regina
>>>> -----------------------------------------
>>>> The substance of this message, including any attachments, may be
>>>> confidential, legally privileged and/or exempt from disclosure
>>>> pursuant to Massachusetts law. It is intended
>>>> solely for the addressee. If you received this in error, please
>>>> contact the sender and delete the material from any computer.
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>         
>>> ------------------------------------------------------------------------
>>>
>>>       
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>         
>>>       
>> --
>> Martin Davis
>> Senior Technical Architect
>> Refractions Research, Inc.
>> (250) 383-3022
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>     
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From robe.dnd at cityofboston.gov  Wed Sep 17 20:58:17 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 21:03:23 2008
Subject: [geos-devel] OverlayOp JTS port
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>	<48D14B58.3080008@refractions.net>	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>	<48D177C3.7070506@refractions.net>
	<30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>
	<48D18E17.5030902@refractions.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob>

Okay so I guess we still need the elevation thing.  Can we get rid of the checkwrong thing or is that still needed for 64-bit systems?

On a slightly (I like things I can understand note :)), can we update the header about the Last Ported. Its driving me a bit crazy that the last ported note doesn't actually 
seem to match the vintage of the JTS code (i suspect there are toher classes where this is the case) and I'm having to verify that.  That seems like an important thing to have handy if we are going to be migrating new changes from JTS into GEOS.

Thanks,
Regina

-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
Sent: Wed 9/17/2008 7:09 PM
To: GEOS Development List
Subject: Re: [geos-devel] OverlayOp JTS port
 
Not so much pure - I just like things that I can understand  8^)

Paul Ramsey wrote:
> Z-processing was added under contract to the Metropolitan Airport
> Commission, some years ago, so that intersections (in particular)
> would retain interpolated Z-values that "made sense".  This was
> GEOS-only.
>
> Sandro also did a good deal of robustness work in GEOS only, which
> dealt with failures showing up in 64-bit systems but not in 32-bit
> systems. Mostly these were in the form of perturbation hacks, rounding
> things up until they worked, and so on. Martin is (mostly) too pure to
> result to these kinds of things :)
>
> P.
>
> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net> wrote:
>   
>> I can confirm - if GEOS is doing something with computing new Z-values this
>> is something which is NOT in JTS.  I vaguely recollect that this is
>> something which Sandro added.
>>
>> Obe, Regina wrote:
>>     
>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>> apparently does do something with the z index
>>>
>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>> FROM generate_series(1,5) x
>>>        CROSS JOIN generate_series(2,10) y
>>>        CROSS JOIN generate_series(1,10) z;
>>>
>>> yields
>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>> 9.001953125,5 10 9.001953125)
>>>
>>> Running the same exercise in OpenJump and looking at the output of GML,
>>> WKT, CL I don't get a Z-axis.
>>>
>>> I can't tell if its just that the z is not supported in those formats or
>>> if its just because in JTS the z axis is thrown out.  Looking at the JTS
>>> code, I have no reason to believe its doing anything with z.
>>>
>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>> for this.
>>>
>>> The question I have is - isn't this hmm wrong - I suppose we can say its
>>> fuzzily right.
>>>
>>> Thanks,
>>> Regina
>>>
>>>
>>>
>>> -----Original Message-----
>>> From: geos-devel-bounces@lists.osgeo.org
>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>> To: GEOS Development List
>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>
>>> The original plan for GEOS was that it would track JTS 100%.  This was to
>>> simplify porting new functionality as it is added to JTS.  However, at one
>>> point I think Sandro did some extra work on trying to improve GEOS
>>> robustness.  This is probably where the checkObviouslyWrongResult came from.
>>>  After this was done, JTS caught up - so this method may not be needed any
>>> more.
>>>
>>>
>>>
>>> Obe, Regina wrote:
>>>
>>>       
>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>
>>>>         
>>>       
>>>> for this class)
>>>>
>>>> except it has the additional calls of
>>>>
>>>> checkObviouslyWrongResult() - which most of that code looks like it would
>>>> never
>>>> be called because of the #ifdefs except for the
>>>> assert(resultGeom);
>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>
>>>> and also a
>>>> elevationMatrix->elevate(resultGeom);
>>>>
>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>
>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>> realize
>>>> Union actually works with those, but then I never tried it with 3d.
>>>>
>>>> So I'm a little puzzled why these 2 extra function calls since I always
>>>> thought
>>>> GEOS was at best on par with JTS?
>>>>
>>>> Thanks,
>>>> Regina
>>>>
>>>> -----Original Message-----
>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>> Sent: Wed 9/17/2008 9:26 AM
>>>> To: GEOS Development List
>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>
>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>
>>>> In the header it says
>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>
>>>> But I don't believe this to be right since when I compare the
>>>> computeOverlay methods
>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>> of JTS.
>>>>
>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>> comment above just plain wrong.
>>>>
>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>> computerOverlay which I haven't figured out which version that was
>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>
>>>>         
>>> specific
>>>
>>>       
>>>> check that has no JTS equivalent?
>>>>
>>>> Thanks,
>>>> Regina
>>>> -----------------------------------------
>>>> The substance of this message, including any attachments, may be
>>>> confidential, legally privileged and/or exempt from disclosure
>>>> pursuant to Massachusetts law. It is intended
>>>> solely for the addressee. If you received this in error, please
>>>> contact the sender and delete the material from any computer.
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>         
>>> ------------------------------------------------------------------------
>>>
>>>       
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>         
>>>       
>> --
>> Martin Davis
>> Senior Technical Architect
>> Refractions Research, Inc.
>> (250) 383-3022
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>     
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080917/e0d70152/attachment-0001.html
From pramsey at cleverelephant.ca  Wed Sep 17 21:46:52 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed Sep 17 21:46:54 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
	<48D14B58.3080008@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>
	<48D177C3.7070506@refractions.net>
	<30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>
	<48D18E17.5030902@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob>
Message-ID: <30fe546d0809171846h781c90f4j7b168cd3c5fb7ed4@mail.gmail.com>

No, I think you need to check more closely, as the value given there
might be the actual CVS version string, as opposed to the JTS release
version.

P.

On Wed, Sep 17, 2008 at 5:58 PM, Obe, Regina <robe.dnd@cityofboston.gov> wrote:
> Okay so I guess we still need the elevation thing.  Can we get rid of the
> checkwrong thing or is that still needed for 64-bit systems?
>
> On a slightly (I like things I can understand note :)), can we update the
> header about the Last Ported. Its driving me a bit crazy that the last
> ported note doesn't actually
> seem to match the vintage of the JTS code (i suspect there are toher classes
> where this is the case) and I'm having to verify that.  That seems like an
> important thing to have handy if we are going to be migrating new changes
> from JTS into GEOS.
>
> Thanks,
> Regina
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
> Sent: Wed 9/17/2008 7:09 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] OverlayOp JTS port
>
> Not so much pure - I just like things that I can understand  8^)
>
> Paul Ramsey wrote:
>> Z-processing was added under contract to the Metropolitan Airport
>> Commission, some years ago, so that intersections (in particular)
>> would retain interpolated Z-values that "made sense".  This was
>> GEOS-only.
>>
>> Sandro also did a good deal of robustness work in GEOS only, which
>> dealt with failures showing up in 64-bit systems but not in 32-bit
>> systems. Mostly these were in the form of perturbation hacks, rounding
>> things up until they worked, and so on. Martin is (mostly) too pure to
>> result to these kinds of things :)
>>
>> P.
>>
>> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net>
>> wrote:
>>
>>> I can confirm - if GEOS is doing something with computing new Z-values
>>> this
>>> is something which is NOT in JTS.  I vaguely recollect that this is
>>> something which Sandro added.
>>>
>>> Obe, Regina wrote:
>>>
>>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>>> apparently does do something with the z index
>>>>
>>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>>> FROM generate_series(1,5) x
>>>>        CROSS JOIN generate_series(2,10) y
>>>>        CROSS JOIN generate_series(1,10) z;
>>>>
>>>> yields
>>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>>> 9.001953125,5 10 9.001953125)
>>>>
>>>> Running the same exercise in OpenJump and looking at the output of GML,
>>>> WKT, CL I don't get a Z-axis.
>>>>
>>>> I can't tell if its just that the z is not supported in those formats or
>>>> if its just because in JTS the z axis is thrown out.  Looking at the JTS
>>>> code, I have no reason to believe its doing anything with z.
>>>>
>>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>>> for this.
>>>>
>>>> The question I have is - isn't this hmm wrong - I suppose we can say its
>>>> fuzzily right.
>>>>
>>>> Thanks,
>>>> Regina
>>>>
>>>>
>>>>
>>>> -----Original Message-----
>>>> From: geos-devel-bounces@lists.osgeo.org
>>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>>> To: GEOS Development List
>>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>>
>>>> The original plan for GEOS was that it would track JTS 100%.  This was
>>>> to
>>>> simplify porting new functionality as it is added to JTS.  However, at
>>>> one
>>>> point I think Sandro did some extra work on trying to improve GEOS
>>>> robustness.  This is probably where the checkObviouslyWrongResult came
>>>> from.
>>>>  After this was done, JTS caught up - so this method may not be needed
>>>> any
>>>> more.
>>>>
>>>>
>>>>
>>>> Obe, Regina wrote:
>>>>
>>>>
>>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>>
>>>>>
>>>>
>>>>> for this class)
>>>>>
>>>>> except it has the additional calls of
>>>>>
>>>>> checkObviouslyWrongResult() - which most of that code looks like it
>>>>> would
>>>>> never
>>>>> be called because of the #ifdefs except for the
>>>>> assert(resultGeom);
>>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>>
>>>>> and also a
>>>>> elevationMatrix->elevate(resultGeom);
>>>>>
>>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>>
>>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>>> realize
>>>>> Union actually works with those, but then I never tried it with 3d.
>>>>>
>>>>> So I'm a little puzzled why these 2 extra function calls since I always
>>>>> thought
>>>>> GEOS was at best on par with JTS?
>>>>>
>>>>> Thanks,
>>>>> Regina
>>>>>
>>>>> -----Original Message-----
>>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>>> Sent: Wed 9/17/2008 9:26 AM
>>>>> To: GEOS Development List
>>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>>
>>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>>
>>>>> In the header it says
>>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>>
>>>>> But I don't believe this to be right since when I compare the
>>>>> computeOverlay methods
>>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>>> of JTS.
>>>>>
>>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>>> comment above just plain wrong.
>>>>>
>>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>>> computerOverlay which I haven't figured out which version that was
>>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>>
>>>>>
>>>> specific
>>>>
>>>>
>>>>> check that has no JTS equivalent?
>>>>>
>>>>> Thanks,
>>>>> Regina
>>>>> -----------------------------------------
>>>>> The substance of this message, including any attachments, may be
>>>>> confidential, legally privileged and/or exempt from disclosure
>>>>> pursuant to Massachusetts law. It is intended
>>>>> solely for the addressee. If you received this in error, please
>>>>> contact the sender and delete the material from any computer.
>>>>>
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@lists.osgeo.org
>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>> ------------------------------------------------------------------------
>>>>
>>>>
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@lists.osgeo.org
>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>
>>>>>
>>>>
>>> --
>>> Martin Davis
>>> Senior Technical Architect
>>> Refractions Research, Inc.
>>> (250) 383-3022
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>
> --
> Martin Davis
> Senior Technical Architect
> Refractions Research, Inc.
> (250) 383-3022
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From robe.dnd at cityofboston.gov  Wed Sep 17 22:07:12 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 22:07:31 2008
Subject: [geos-devel] OverlayOp JTS port
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>	<48D14B58.3080008@refractions.net>	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>	<48D177C3.7070506@refractions.net>
	<30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>
	<48D18E17.5030902@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A217@ZDND.DND.boston.cob>

Hmm - Okay I guess I missed earlier on the version.h that gives the GEOS_JTS_PORT constant of 1.7.1

Is it safe to assume from this that all classes are ported/verified at the same time so I can assume all GEOS 3+ code is vintage JTS 1.7.1 unless the jtsport() method is overridden and I can ignore the Last Port comment that appears in each class file which seem to be grossly out of date?

Thanks,
Regina
-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
Sent: Wed 9/17/2008 8:58 PM
To: GEOS Development List
Subject: RE: [geos-devel] OverlayOp JTS port
 
Okay so I guess we still need the elevation thing.  Can we get rid of the checkwrong thing or is that still needed for 64-bit systems?

On a slightly (I like things I can understand note :)), can we update the header about the Last Ported. Its driving me a bit crazy that the last ported note doesn't actually 
seem to match the vintage of the JTS code (i suspect there are toher classes where this is the case) and I'm having to verify that.  That seems like an important thing to have handy if we are going to be migrating new changes from JTS into GEOS.

Thanks,
Regina

-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
Sent: Wed 9/17/2008 7:09 PM
To: GEOS Development List
Subject: Re: [geos-devel] OverlayOp JTS port
 
Not so much pure - I just like things that I can understand  8^)

Paul Ramsey wrote:
> Z-processing was added under contract to the Metropolitan Airport
> Commission, some years ago, so that intersections (in particular)
> would retain interpolated Z-values that "made sense".  This was
> GEOS-only.
>
> Sandro also did a good deal of robustness work in GEOS only, which
> dealt with failures showing up in 64-bit systems but not in 32-bit
> systems. Mostly these were in the form of perturbation hacks, rounding
> things up until they worked, and so on. Martin is (mostly) too pure to
> result to these kinds of things :)
>
> P.
>
> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net> wrote:
>   
>> I can confirm - if GEOS is doing something with computing new Z-values this
>> is something which is NOT in JTS.  I vaguely recollect that this is
>> something which Sandro added.
>>
>> Obe, Regina wrote:
>>     
>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>> apparently does do something with the z index
>>>
>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>> FROM generate_series(1,5) x
>>>        CROSS JOIN generate_series(2,10) y
>>>        CROSS JOIN generate_series(1,10) z;
>>>
>>> yields
>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>> 9.001953125,5 10 9.001953125)
>>>
>>> Running the same exercise in OpenJump and looking at the output of GML,
>>> WKT, CL I don't get a Z-axis.
>>>
>>> I can't tell if its just that the z is not supported in those formats or
>>> if its just because in JTS the z axis is thrown out.  Looking at the JTS
>>> code, I have no reason to believe its doing anything with z.
>>>
>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>> for this.
>>>
>>> The question I have is - isn't this hmm wrong - I suppose we can say its
>>> fuzzily right.
>>>
>>> Thanks,
>>> Regina
>>>
>>>
>>>
>>> -----Original Message-----
>>> From: geos-devel-bounces@lists.osgeo.org
>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>> To: GEOS Development List
>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>
>>> The original plan for GEOS was that it would track JTS 100%.  This was to
>>> simplify porting new functionality as it is added to JTS.  However, at one
>>> point I think Sandro did some extra work on trying to improve GEOS
>>> robustness.  This is probably where the checkObviouslyWrongResult came from.
>>>  After this was done, JTS caught up - so this method may not be needed any
>>> more.
>>>
>>>
>>>
>>> Obe, Regina wrote:
>>>
>>>       
>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>
>>>>         
>>>       
>>>> for this class)
>>>>
>>>> except it has the additional calls of
>>>>
>>>> checkObviouslyWrongResult() - which most of that code looks like it would
>>>> never
>>>> be called because of the #ifdefs except for the
>>>> assert(resultGeom);
>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>
>>>> and also a
>>>> elevationMatrix->elevate(resultGeom);
>>>>
>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>
>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>> realize
>>>> Union actually works with those, but then I never tried it with 3d.
>>>>
>>>> So I'm a little puzzled why these 2 extra function calls since I always
>>>> thought
>>>> GEOS was at best on par with JTS?
>>>>
>>>> Thanks,
>>>> Regina
>>>>
>>>> -----Original Message-----
>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>> Sent: Wed 9/17/2008 9:26 AM
>>>> To: GEOS Development List
>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>
>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>
>>>> In the header it says
>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>
>>>> But I don't believe this to be right since when I compare the
>>>> computeOverlay methods
>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>> of JTS.
>>>>
>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>> comment above just plain wrong.
>>>>
>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>> computerOverlay which I haven't figured out which version that was
>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>
>>>>         
>>> specific
>>>
>>>       
>>>> check that has no JTS equivalent?
>>>>
>>>> Thanks,
>>>> Regina
>>>> -----------------------------------------
>>>> The substance of this message, including any attachments, may be
>>>> confidential, legally privileged and/or exempt from disclosure
>>>> pursuant to Massachusetts law. It is intended
>>>> solely for the addressee. If you received this in error, please
>>>> contact the sender and delete the material from any computer.
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>         
>>> ------------------------------------------------------------------------
>>>
>>>       
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>         
>>>       
>> --
>> Martin Davis
>> Senior Technical Architect
>> Refractions Research, Inc.
>> (250) 383-3022
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>     
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel





-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080917/d04476b8/attachment-0001.html
From robe.dnd at cityofboston.gov  Wed Sep 17 22:10:01 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 22:13:32 2008
Subject: [geos-devel] OverlayOp JTS port
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob><53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob><48D14B58.3080008@refractions.net><53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob><48D177C3.7070506@refractions.net><30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com><48D18E17.5030902@refractions.net><53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob>
	<30fe546d0809171846h781c90f4j7b168cd3c5fb7ed4@mail.gmail.com>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A218@ZDND.DND.boston.cob>

Ah okay that explains a lot why all these numbers are in the 1.1 - 1.5 range.  So I take it I can't completely trust the 1.71 since they don't all have the same revision number, though it seems about right from the classes I've looked at minus the obvious diversions from the path.




-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Paul Ramsey
Sent: Wed 9/17/2008 9:46 PM
To: GEOS Development List
Subject: Re: [geos-devel] OverlayOp JTS port
 
No, I think you need to check more closely, as the value given there
might be the actual CVS version string, as opposed to the JTS release
version.

P.

On Wed, Sep 17, 2008 at 5:58 PM, Obe, Regina <robe.dnd@cityofboston.gov> wrote:
> Okay so I guess we still need the elevation thing.  Can we get rid of the
> checkwrong thing or is that still needed for 64-bit systems?
>
> On a slightly (I like things I can understand note :)), can we update the
> header about the Last Ported. Its driving me a bit crazy that the last
> ported note doesn't actually
> seem to match the vintage of the JTS code (i suspect there are toher classes
> where this is the case) and I'm having to verify that.  That seems like an
> important thing to have handy if we are going to be migrating new changes
> from JTS into GEOS.
>
> Thanks,
> Regina
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
> Sent: Wed 9/17/2008 7:09 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] OverlayOp JTS port
>
> Not so much pure - I just like things that I can understand  8^)
>
> Paul Ramsey wrote:
>> Z-processing was added under contract to the Metropolitan Airport
>> Commission, some years ago, so that intersections (in particular)
>> would retain interpolated Z-values that "made sense".  This was
>> GEOS-only.
>>
>> Sandro also did a good deal of robustness work in GEOS only, which
>> dealt with failures showing up in 64-bit systems but not in 32-bit
>> systems. Mostly these were in the form of perturbation hacks, rounding
>> things up until they worked, and so on. Martin is (mostly) too pure to
>> result to these kinds of things :)
>>
>> P.
>>
>> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net>
>> wrote:
>>
>>> I can confirm - if GEOS is doing something with computing new Z-values
>>> this
>>> is something which is NOT in JTS.  I vaguely recollect that this is
>>> something which Sandro added.
>>>
>>> Obe, Regina wrote:
>>>
>>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>>> apparently does do something with the z index
>>>>
>>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>>> FROM generate_series(1,5) x
>>>>        CROSS JOIN generate_series(2,10) y
>>>>        CROSS JOIN generate_series(1,10) z;
>>>>
>>>> yields
>>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>>> 9.001953125,5 10 9.001953125)
>>>>
>>>> Running the same exercise in OpenJump and looking at the output of GML,
>>>> WKT, CL I don't get a Z-axis.
>>>>
>>>> I can't tell if its just that the z is not supported in those formats or
>>>> if its just because in JTS the z axis is thrown out.  Looking at the JTS
>>>> code, I have no reason to believe its doing anything with z.
>>>>
>>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>>> for this.
>>>>
>>>> The question I have is - isn't this hmm wrong - I suppose we can say its
>>>> fuzzily right.
>>>>
>>>> Thanks,
>>>> Regina
>>>>
>>>>
>>>>
>>>> -----Original Message-----
>>>> From: geos-devel-bounces@lists.osgeo.org
>>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>>> To: GEOS Development List
>>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>>
>>>> The original plan for GEOS was that it would track JTS 100%.  This was
>>>> to
>>>> simplify porting new functionality as it is added to JTS.  However, at
>>>> one
>>>> point I think Sandro did some extra work on trying to improve GEOS
>>>> robustness.  This is probably where the checkObviouslyWrongResult came
>>>> from.
>>>>  After this was done, JTS caught up - so this method may not be needed
>>>> any
>>>> more.
>>>>
>>>>
>>>>
>>>> Obe, Regina wrote:
>>>>
>>>>
>>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>>
>>>>>
>>>>
>>>>> for this class)
>>>>>
>>>>> except it has the additional calls of
>>>>>
>>>>> checkObviouslyWrongResult() - which most of that code looks like it
>>>>> would
>>>>> never
>>>>> be called because of the #ifdefs except for the
>>>>> assert(resultGeom);
>>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>>
>>>>> and also a
>>>>> elevationMatrix->elevate(resultGeom);
>>>>>
>>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>>
>>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>>> realize
>>>>> Union actually works with those, but then I never tried it with 3d.
>>>>>
>>>>> So I'm a little puzzled why these 2 extra function calls since I always
>>>>> thought
>>>>> GEOS was at best on par with JTS?
>>>>>
>>>>> Thanks,
>>>>> Regina
>>>>>
>>>>> -----Original Message-----
>>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>>> Sent: Wed 9/17/2008 9:26 AM
>>>>> To: GEOS Development List
>>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>>
>>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>>
>>>>> In the header it says
>>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>>
>>>>> But I don't believe this to be right since when I compare the
>>>>> computeOverlay methods
>>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>>> of JTS.
>>>>>
>>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>>> comment above just plain wrong.
>>>>>
>>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>>> computerOverlay which I haven't figured out which version that was
>>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>>
>>>>>
>>>> specific
>>>>
>>>>
>>>>> check that has no JTS equivalent?
>>>>>
>>>>> Thanks,
>>>>> Regina
>>>>> -----------------------------------------
>>>>> The substance of this message, including any attachments, may be
>>>>> confidential, legally privileged and/or exempt from disclosure
>>>>> pursuant to Massachusetts law. It is intended
>>>>> solely for the addressee. If you received this in error, please
>>>>> contact the sender and delete the material from any computer.
>>>>>
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@lists.osgeo.org
>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>> ------------------------------------------------------------------------
>>>>
>>>>
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@lists.osgeo.org
>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>
>>>>>
>>>>
>>> --
>>> Martin Davis
>>> Senior Technical Architect
>>> Refractions Research, Inc.
>>> (250) 383-3022
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>
> --
> Martin Davis
> Senior Technical Architect
> Refractions Research, Inc.
> (250) 383-3022
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080917/4b1680ad/attachment.html
From pramsey at cleverelephant.ca  Wed Sep 17 23:00:32 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed Sep 17 23:00:35 2008
Subject: [geos-devel] OverlayOp JTS port
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A218@ZDND.DND.boston.cob>
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob>
	<48D14B58.3080008@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob>
	<48D177C3.7070506@refractions.net>
	<30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com>
	<48D18E17.5030902@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob>
	<30fe546d0809171846h781c90f4j7b168cd3c5fb7ed4@mail.gmail.com>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A218@ZDND.DND.boston.cob>
Message-ID: <30fe546d0809172000r22d91ceclb2a8ce9e20efe828@mail.gmail.com>

Unlike SVN, where the revision number refers to the whole repository
at once, the CVS revision numbers increment per-file.

P.

On Wed, Sep 17, 2008 at 7:10 PM, Obe, Regina <robe.dnd@cityofboston.gov> wrote:
> Ah okay that explains a lot why all these numbers are in the 1.1 - 1.5
> range.  So I take it I can't completely trust the 1.71 since they don't all
> have the same revision number, though it seems about right from the classes
> I've looked at minus the obvious diversions from the path.
>
>
>
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Paul Ramsey
> Sent: Wed 9/17/2008 9:46 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] OverlayOp JTS port
>
> No, I think you need to check more closely, as the value given there
> might be the actual CVS version string, as opposed to the JTS release
> version.
>
> P.
>
> On Wed, Sep 17, 2008 at 5:58 PM, Obe, Regina <robe.dnd@cityofboston.gov>
> wrote:
>> Okay so I guess we still need the elevation thing.  Can we get rid of the
>> checkwrong thing or is that still needed for 64-bit systems?
>>
>> On a slightly (I like things I can understand note :)), can we update the
>> header about the Last Ported. Its driving me a bit crazy that the last
>> ported note doesn't actually
>> seem to match the vintage of the JTS code (i suspect there are toher
>> classes
>> where this is the case) and I'm having to verify that.  That seems like an
>> important thing to have handy if we are going to be migrating new changes
>> from JTS into GEOS.
>>
>> Thanks,
>> Regina
>>
>> -----Original Message-----
>> From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
>> Sent: Wed 9/17/2008 7:09 PM
>> To: GEOS Development List
>> Subject: Re: [geos-devel] OverlayOp JTS port
>>
>> Not so much pure - I just like things that I can understand  8^)
>>
>> Paul Ramsey wrote:
>>> Z-processing was added under contract to the Metropolitan Airport
>>> Commission, some years ago, so that intersections (in particular)
>>> would retain interpolated Z-values that "made sense".  This was
>>> GEOS-only.
>>>
>>> Sandro also did a good deal of robustness work in GEOS only, which
>>> dealt with failures showing up in 64-bit systems but not in 32-bit
>>> systems. Mostly these were in the form of perturbation hacks, rounding
>>> things up until they worked, and so on. Martin is (mostly) too pure to
>>> result to these kinds of things :)
>>>
>>> P.
>>>
>>> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net>
>>> wrote:
>>>
>>>> I can confirm - if GEOS is doing something with computing new Z-values
>>>> this
>>>> is something which is NOT in JTS.  I vaguely recollect that this is
>>>> something which Sandro added.
>>>>
>>>> Obe, Regina wrote:
>>>>
>>>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>>>> apparently does do something with the z index
>>>>>
>>>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>>>> FROM generate_series(1,5) x
>>>>>        CROSS JOIN generate_series(2,10) y
>>>>>        CROSS JOIN generate_series(1,10) z;
>>>>>
>>>>> yields
>>>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>>>> 9.001953125,5 10 9.001953125)
>>>>>
>>>>> Running the same exercise in OpenJump and looking at the output of GML,
>>>>> WKT, CL I don't get a Z-axis.
>>>>>
>>>>> I can't tell if its just that the z is not supported in those formats
>>>>> or
>>>>> if its just because in JTS the z axis is thrown out.  Looking at the
>>>>> JTS
>>>>> code, I have no reason to believe its doing anything with z.
>>>>>
>>>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>>>> for this.
>>>>>
>>>>> The question I have is - isn't this hmm wrong - I suppose we can say
>>>>> its
>>>>> fuzzily right.
>>>>>
>>>>> Thanks,
>>>>> Regina
>>>>>
>>>>>
>>>>>
>>>>> -----Original Message-----
>>>>> From: geos-devel-bounces@lists.osgeo.org
>>>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>>>> To: GEOS Development List
>>>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>>>
>>>>> The original plan for GEOS was that it would track JTS 100%.  This was
>>>>> to
>>>>> simplify porting new functionality as it is added to JTS.  However, at
>>>>> one
>>>>> point I think Sandro did some extra work on trying to improve GEOS
>>>>> robustness.  This is probably where the checkObviouslyWrongResult came
>>>>> from.
>>>>>  After this was done, JTS caught up - so this method may not be needed
>>>>> any
>>>>> more.
>>>>>
>>>>>
>>>>>
>>>>> Obe, Regina wrote:
>>>>>
>>>>>
>>>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>>>
>>>>>>
>>>>>
>>>>>> for this class)
>>>>>>
>>>>>> except it has the additional calls of
>>>>>>
>>>>>> checkObviouslyWrongResult() - which most of that code looks like it
>>>>>> would
>>>>>> never
>>>>>> be called because of the #ifdefs except for the
>>>>>> assert(resultGeom);
>>>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>>>
>>>>>> and also a
>>>>>> elevationMatrix->elevate(resultGeom);
>>>>>>
>>>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>>>
>>>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>>>> realize
>>>>>> Union actually works with those, but then I never tried it with 3d.
>>>>>>
>>>>>> So I'm a little puzzled why these 2 extra function calls since I
>>>>>> always
>>>>>> thought
>>>>>> GEOS was at best on par with JTS?
>>>>>>
>>>>>> Thanks,
>>>>>> Regina
>>>>>>
>>>>>> -----Original Message-----
>>>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>>>> Sent: Wed 9/17/2008 9:26 AM
>>>>>> To: GEOS Development List
>>>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>>>
>>>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>>>
>>>>>> In the header it says
>>>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>>>
>>>>>> But I don't believe this to be right since when I compare the
>>>>>> computeOverlay methods
>>>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>>>> of JTS.
>>>>>>
>>>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>>>> comment above just plain wrong.
>>>>>>
>>>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>>>> computerOverlay which I haven't figured out which version that was
>>>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>>>
>>>>>>
>>>>> specific
>>>>>
>>>>>
>>>>>> check that has no JTS equivalent?
>>>>>>
>>>>>> Thanks,
>>>>>> Regina
>>>>>> -----------------------------------------
>>>>>> The substance of this message, including any attachments, may be
>>>>>> confidential, legally privileged and/or exempt from disclosure
>>>>>> pursuant to Massachusetts law. It is intended
>>>>>> solely for the addressee. If you received this in error, please
>>>>>> contact the sender and delete the material from any computer.
>>>>>>
>>>>>> _______________________________________________
>>>>>> geos-devel mailing list
>>>>>> geos-devel@lists.osgeo.org
>>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>
>>>>> ------------------------------------------------------------------------
>>>>>
>>>>>
>>>>>> _______________________________________________
>>>>>> geos-devel mailing list
>>>>>> geos-devel@lists.osgeo.org
>>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>>
>>>>>>
>>>>>
>>>> --
>>>> Martin Davis
>>>> Senior Technical Architect
>>>> Refractions Research, Inc.
>>>> (250) 383-3022
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>
>>
>> --
>> Martin Davis
>> Senior Technical Architect
>> Refractions Research, Inc.
>> (250) 383-3022
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From robe.dnd at cityofboston.gov  Wed Sep 17 23:29:47 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Wed Sep 17 23:30:00 2008
Subject: [geos-devel] OverlayOp JTS port
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob><53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob><48D14B58.3080008@refractions.net><53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob><48D177C3.7070506@refractions.net><30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com><48D18E17.5030902@refractions.net><53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob><30fe546d0809171846h781c90f4j7b168cd3c5fb7ed4@mail.gmail.com><53F9CF533E1AA14EA1F8C5C08ABC08D20197A218@ZDND.DND.boston.cob>
	<30fe546d0809172000r22d91ceclb2a8ce9e20efe828@mail.gmail.com>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A219@ZDND.DND.boston.cob>

Paul,

Okay - is this number CVS of Geos or CVS of JTS pull?  

I guess it doesn't really matter too much.  I'll assume JTS 1.71 when I'm looking at a file and compare against JTS 1.71 unless I notice its got mutant or upper stream code in it and then look up or down a version.  At least it gives me a starting point.

Most of this exercise was just to familiarize myself with how JTS code is translated to C++ since I have a much easier time understanding Java than C++.  I figured if I was looking at things that are supposed to be the same I would have an easier time understanding (e.g. when to use address or copy or whatever).  Then I accidentally stumbled across things that were obviously different like the short-circuit in GEOS Geometry.Union (and the fact its not even named the same e.g JTS is Geometry.union) and how if at all this even comes into play in CAPI (doesn't seem to). and if all that short-circuit stuff can be replaced with JTS 1.8+ SnapIfNeededOverlayOp.overlayOp(this, other, OverlayOp.UNION) (haven't figured out what that does).

Anyrate its been an educational and fun experience.  Its always exciting to look behind a black box and discover it doesn't quite work the way you assumed it did.

Thanks,
Regina





-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Paul Ramsey
Sent: Wed 9/17/2008 11:00 PM
To: GEOS Development List
Subject: Re: [geos-devel] OverlayOp JTS port
 
Unlike SVN, where the revision number refers to the whole repository
at once, the CVS revision numbers increment per-file.

P.

On Wed, Sep 17, 2008 at 7:10 PM, Obe, Regina <robe.dnd@cityofboston.gov> wrote:
> Ah okay that explains a lot why all these numbers are in the 1.1 - 1.5
> range.  So I take it I can't completely trust the 1.71 since they don't all
> have the same revision number, though it seems about right from the classes
> I've looked at minus the obvious diversions from the path.
>
>
>
>
> -----Original Message-----
> From: geos-devel-bounces@lists.osgeo.org on behalf of Paul Ramsey
> Sent: Wed 9/17/2008 9:46 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] OverlayOp JTS port
>
> No, I think you need to check more closely, as the value given there
> might be the actual CVS version string, as opposed to the JTS release
> version.
>
> P.
>
> On Wed, Sep 17, 2008 at 5:58 PM, Obe, Regina <robe.dnd@cityofboston.gov>
> wrote:
>> Okay so I guess we still need the elevation thing.  Can we get rid of the
>> checkwrong thing or is that still needed for 64-bit systems?
>>
>> On a slightly (I like things I can understand note :)), can we update the
>> header about the Last Ported. Its driving me a bit crazy that the last
>> ported note doesn't actually
>> seem to match the vintage of the JTS code (i suspect there are toher
>> classes
>> where this is the case) and I'm having to verify that.  That seems like an
>> important thing to have handy if we are going to be migrating new changes
>> from JTS into GEOS.
>>
>> Thanks,
>> Regina
>>
>> -----Original Message-----
>> From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
>> Sent: Wed 9/17/2008 7:09 PM
>> To: GEOS Development List
>> Subject: Re: [geos-devel] OverlayOp JTS port
>>
>> Not so much pure - I just like things that I can understand  8^)
>>
>> Paul Ramsey wrote:
>>> Z-processing was added under contract to the Metropolitan Airport
>>> Commission, some years ago, so that intersections (in particular)
>>> would retain interpolated Z-values that "made sense".  This was
>>> GEOS-only.
>>>
>>> Sandro also did a good deal of robustness work in GEOS only, which
>>> dealt with failures showing up in 64-bit systems but not in 32-bit
>>> systems. Mostly these were in the form of perturbation hacks, rounding
>>> things up until they worked, and so on. Martin is (mostly) too pure to
>>> result to these kinds of things :)
>>>
>>> P.
>>>
>>> On Wed, Sep 17, 2008 at 2:33 PM, Martin Davis <mbdavis@refractions.net>
>>> wrote:
>>>
>>>> I can confirm - if GEOS is doing something with computing new Z-values
>>>> this
>>>> is something which is NOT in JTS.  I vaguely recollect that this is
>>>> something which Sandro added.
>>>>
>>>> Obe, Regina wrote:
>>>>
>>>>> Okay I did a quick union run of a 3 d geometry in PostGIS and it
>>>>> apparently does do something with the z index
>>>>>
>>>>> SELECT ST_AsEWKT(ST_Union(ST_MakePoint(x,y,z)))
>>>>> FROM generate_series(1,5) x
>>>>>        CROSS JOIN generate_series(2,10) y
>>>>>        CROSS JOIN generate_series(1,10) z;
>>>>>
>>>>> yields
>>>>> MULTIPOINT(1 2 9.001953125,1 3 9.001953125,1 4 9.001953125,1 5
>>>>> 9.001953125,1 6 9.001953125,1 7 9.001953125,1 8 9.001953125,1 9
>>>>> 9.001953125,1 10 9.001953125,2 2 9.001953125,2 3 9.001953125,2 4
>>>>> 9.001953125,2 5 9.001953125,2 6 9.001953125,2 7 9.001953125,2 8
>>>>> 9.001953125,2 9 9.001953125,2 10 9.001953125,3 2 9.001953125,3 3
>>>>> 9.001953125,3 4 9.001953125,3 5 9.001953125,3 6 9.001953125,3 7
>>>>> 9.001953125,3 8 9.001953125,3 9 9.001953125,3 10 9.001953125,4 2
>>>>> 9.001953125,4 3 9.001953125,4 4 9.001953125,4 5 9.001953125,4 6
>>>>> 9.001953125,4 7 9.001953125,4 8 9.001953125,4 9 9.001953125,4 10
>>>>> 9.001953125,5 2 9.001953125,5 3 9.001953125,5 4 9.001953125,5 5
>>>>> 9.001953125,5 6 9.001953125,5 7 9.001953125,5 8 9.001953125,5 9
>>>>> 9.001953125,5 10 9.001953125)
>>>>>
>>>>> Running the same exercise in OpenJump and looking at the output of GML,
>>>>> WKT, CL I don't get a Z-axis.
>>>>>
>>>>> I can't tell if its just that the z is not supported in those formats
>>>>> or
>>>>> if its just because in JTS the z axis is thrown out.  Looking at the
>>>>> JTS
>>>>> code, I have no reason to believe its doing anything with z.
>>>>>
>>>>> I presume the GEOS elevationMatrix->elevate(resultGeom) is responsible
>>>>> for this.
>>>>>
>>>>> The question I have is - isn't this hmm wrong - I suppose we can say
>>>>> its
>>>>> fuzzily right.
>>>>>
>>>>> Thanks,
>>>>> Regina
>>>>>
>>>>>
>>>>>
>>>>> -----Original Message-----
>>>>> From: geos-devel-bounces@lists.osgeo.org
>>>>> [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Martin Davis
>>>>> Sent: Wednesday, September 17, 2008 2:24 PM
>>>>> To: GEOS Development List
>>>>> Subject: Re: [geos-devel] OverlayOp JTS port
>>>>>
>>>>> The original plan for GEOS was that it would track JTS 100%.  This was
>>>>> to
>>>>> simplify porting new functionality as it is added to JTS.  However, at
>>>>> one
>>>>> point I think Sandro did some extra work on trying to improve GEOS
>>>>> robustness.  This is probably where the checkObviouslyWrongResult came
>>>>> from.
>>>>>  After this was done, JTS caught up - so this method may not be needed
>>>>> any
>>>>> more.
>>>>>
>>>>>
>>>>>
>>>>> Obe, Regina wrote:
>>>>>
>>>>>
>>>>>> I apologize for the barrage of questions.  As far as I can tell the
>>>>>> OverlayOp.cpp is vintage JTS 1.7 (which I think is same as the JTS 1.9
>>>>>>
>>>>>>
>>>>>
>>>>>> for this class)
>>>>>>
>>>>>> except it has the additional calls of
>>>>>>
>>>>>> checkObviouslyWrongResult() - which most of that code looks like it
>>>>>> would
>>>>>> never
>>>>>> be called because of the #ifdefs except for the
>>>>>> assert(resultGeom);
>>>>>> UNREFERENCED_PARAMETER(opCode); (have no clue what this does)
>>>>>>
>>>>>> and also a
>>>>>> elevationMatrix->elevate(resultGeom);
>>>>>>
>>>>>> which looks like will get called since USE_ELEVATION_MATRIX 1.
>>>>>>
>>>>>> Is the elevationMatrix designed to deal with 3d geometries?  Didn't
>>>>>> realize
>>>>>> Union actually works with those, but then I never tried it with 3d.
>>>>>>
>>>>>> So I'm a little puzzled why these 2 extra function calls since I
>>>>>> always
>>>>>> thought
>>>>>> GEOS was at best on par with JTS?
>>>>>>
>>>>>> Thanks,
>>>>>> Regina
>>>>>>
>>>>>> -----Original Message-----
>>>>>> From: geos-devel-bounces@lists.osgeo.org on behalf of Obe, Regina
>>>>>> Sent: Wed 9/17/2008 9:26 AM
>>>>>> To: GEOS Development List
>>>>>> Subject: [geos-devel] OverlayOp JTS port
>>>>>>
>>>>>> I'm looking at the operation.overlay.OverlayOp in geos trunk
>>>>>>
>>>>>> In the header it says
>>>>>> Last port: operation/overlay/OverlayOp.java rev. 1.23
>>>>>>
>>>>>> But I don't believe this to be right since when I compare the
>>>>>> computeOverlay methods
>>>>>> against 1.2 and 1.3 versions of JTS codebase, it has an additional
>>>>>> EdgeNodingValidator check which wasn't introduced until later versions
>>>>>> of JTS.
>>>>>>
>>>>>> So I'm wondering is the OverlayOp.cpp a mix of JTS versions or is the
>>>>>> comment above just plain wrong.
>>>>>>
>>>>>> It also has a checkObviouslyWrongResult() check at the end of
>>>>>> computerOverlay which I haven't figured out which version that was
>>>>>> introduced in JTS (its not in 1.2,1.3, or 1.9).  Is this a GEOS
>>>>>>
>>>>>>
>>>>> specific
>>>>>
>>>>>
>>>>>> check that has no JTS equivalent?
>>>>>>
>>>>>> Thanks,
>>>>>> Regina
>>>>>> -----------------------------------------
>>>>>> The substance of this message, including any attachments, may be
>>>>>> confidential, legally privileged and/or exempt from disclosure
>>>>>> pursuant to Massachusetts law. It is intended
>>>>>> solely for the addressee. If you received this in error, please
>>>>>> contact the sender and delete the material from any computer.
>>>>>>
>>>>>> _______________________________________________
>>>>>> geos-devel mailing list
>>>>>> geos-devel@lists.osgeo.org
>>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>
>>>>> ------------------------------------------------------------------------
>>>>>
>>>>>
>>>>>> _______________________________________________
>>>>>> geos-devel mailing list
>>>>>> geos-devel@lists.osgeo.org
>>>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>>>
>>>>>>
>>>>>
>>>> --
>>>> Martin Davis
>>>> Senior Technical Architect
>>>> Refractions Research, Inc.
>>>> (250) 383-3022
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>>
>>
>> --
>> Martin Davis
>> Senior Technical Architect
>> Refractions Research, Inc.
>> (250) 383-3022
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080917/d1cd0416/attachment-0001.html
From reimer at rapideye.de  Thu Sep 18 04:41:51 2008
From: reimer at rapideye.de (Silke Reimer)
Date: Thu Sep 18 04:42:41 2008
Subject: [geos-devel] geos buffer bug, ticket:176
Message-ID: <200809181041.52060.reimer@rapideye.de>


Hello guys,

I would like to point you again on bug number 176 which I am working on now 
quite a while - not constantly but whenever I find time to do this. I 
documented all what I did in the ticket.

According to my understanding it is clearly a memory bug or more specifically 
a fencepost problem. thus a good fencepost detecting tool should probably do 
the job, but I can not get e.g. dmalloc to run. Now I am running out of ideas 
what I can do, so I would be really glad if some of you would have time to 
give the problem a look and propose what I could do next.

Greetings from Germany,

	Silke

-- 
phone: +49 3381 8904-318		 fax:   +49 3381 8904-101

RapidEye AG
Molkenmarkt 30
14776 Brandenburg an der Havel
Germany

Head Office/Sitz der Gesellschaft: Brandenburg an der Havel
Management Board/Vorstand: Wolfgang G. Biedermann
Chairman of Supervisory Board/Vorsitzender des Aufsichtsrates: Axel Schmalz
Commercial Register/Handelsregister Potsdam HRB 17 796
Tax Number/Steuernummer: 048/100/00053
VAT-Ident-Number/Ust.-ID: DE 199331235
DIN EN ISO 9001 certified

*************************************************************************
Diese E-Mail enthaelt vertrauliche und/oder rechtlich geschuetzte
Informationen. Wenn Sie nicht der richtige Adressat sind oder diese
E-Mail irrtuemlich erhalten haben, informieren Sie bitte sofort den
Absender und vernichten Sie diese E-Mail. Das unerlaubte Kopieren sowie
die unbefugte Weitergabe dieser E-Mail ist nicht gestattet.

The information in this e-mail is intended for the named recipients
only. It may contain privileged and confidential information. If you
have received this communication in error, any use, copying or
dissemination of its contents is strictly prohibited. Please erase all
copies of the message along with any included attachments and notify
RapidEye AG or the sender immediately by telephone at the number
indicated on this page.
From pramsey at cleverelephant.ca  Thu Sep 18 10:20:08 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu Sep 18 10:20:11 2008
Subject: [geos-devel] geos buffer bug, ticket:176
In-Reply-To: <200809181041.52060.reimer@rapideye.de>
References: <200809181041.52060.reimer@rapideye.de>
Message-ID: <30fe546d0809180720v48587c83i3ada2d441010072d@mail.gmail.com>

Heisenbug, eh? I don't know, I wonder of strk has any advice on those,
he did manage to track a couple down back in the day...

P.

On Thu, Sep 18, 2008 at 1:41 AM, Silke Reimer <reimer@rapideye.de> wrote:
>
> Hello guys,
>
> I would like to point you again on bug number 176 which I am working on now
> quite a while - not constantly but whenever I find time to do this. I
> documented all what I did in the ticket.
>
> According to my understanding it is clearly a memory bug or more specifically
> a fencepost problem. thus a good fencepost detecting tool should probably do
> the job, but I can not get e.g. dmalloc to run. Now I am running out of ideas
> what I can do, so I would be really glad if some of you would have time to
> give the problem a look and propose what I could do next.
>
> Greetings from Germany,
>
>        Silke
>
> --
> phone: +49 3381 8904-318                 fax:   +49 3381 8904-101
>
> RapidEye AG
> Molkenmarkt 30
> 14776 Brandenburg an der Havel
> Germany
>
> Head Office/Sitz der Gesellschaft: Brandenburg an der Havel
> Management Board/Vorstand: Wolfgang G. Biedermann
> Chairman of Supervisory Board/Vorsitzender des Aufsichtsrates: Axel Schmalz
> Commercial Register/Handelsregister Potsdam HRB 17 796
> Tax Number/Steuernummer: 048/100/00053
> VAT-Ident-Number/Ust.-ID: DE 199331235
> DIN EN ISO 9001 certified
>
> *************************************************************************
> Diese E-Mail enthaelt vertrauliche und/oder rechtlich geschuetzte
> Informationen. Wenn Sie nicht der richtige Adressat sind oder diese
> E-Mail irrtuemlich erhalten haben, informieren Sie bitte sofort den
> Absender und vernichten Sie diese E-Mail. Das unerlaubte Kopieren sowie
> die unbefugte Weitergabe dieser E-Mail ist nicht gestattet.
>
> The information in this e-mail is intended for the named recipients
> only. It may contain privileged and confidential information. If you
> have received this communication in error, any use, copying or
> dissemination of its contents is strictly prohibited. Please erase all
> copies of the message along with any included attachments and notify
> RapidEye AG or the sender immediately by telephone at the number
> indicated on this page.
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From robe.dnd at cityofboston.gov  Thu Sep 18 13:20:39 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Thu Sep 18 13:20:46 2008
Subject: [geos-devel] More nagging questions about GEOS Capi
References: <53F9CF533E1AA14EA1F8C5C08ABC08D204B72595@ZDND.DND.boston.cob><53F9CF533E1AA14EA1F8C5C08ABC08D20197A212@ZDND.DND.boston.cob><48D14B58.3080008@refractions.net><53F9CF533E1AA14EA1F8C5C08ABC08D204BA4391@ZDND.DND.boston.cob><48D177C3.7070506@refractions.net><30fe546d0809171536q17e89055pc4079d2749c2a1cd@mail.gmail.com><48D18E17.5030902@refractions.net><53F9CF533E1AA14EA1F8C5C08ABC08D20197A216@ZDND.DND.boston.cob><30fe546d0809171846h781c90f4j7b168cd3c5fb7ed4@mail.gmail.com><53F9CF533E1AA14EA1F8C5C08ABC08D20197A218@ZDND.DND.boston.cob><30fe546d0809172000r22d91ceclb2a8ce9e20efe828@mail.gmail.com>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A219@ZDND.DND.boston.cob>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A21C@ZDND.DND.boston.cob>

I apologize for being a bit long-winded here.

Recall I mentioned that Geometry.Union() does some short-circuit stuff
and then does the standard Overlay op stuff.

However GEOS Capi GeomUnion doesn't appear to use Geometry.Union() at all and 
goes straight for the Overlay operation.

On closer inspection of Capi, I see there must have been a time when Geometry.Union() was done instead and that piece of code is now remarked out
So now looks like this
		GeomAutoPtr g3 = BinaryOp(g1, g2, overlayOp(OverlayOp::opUNION));
		return g3.release();
		//Geometry *g3 = g1->Union(g2);
		//return g3;

Same deal with intersection, but the intersection one is not quite as big
of a concern since Geometry.intersection doesn't do much more than the BinaryOp call.

Is there a performance reason why this was done?  It seems to me slightly undesirable
to have CAPI do something differently than what one would be necessarily doing with the Core C++ api and I can only imagine most people using the GEOS C++ api would be hitting the Geometry.Union method (maybe not though).

Thanks,
Regina






-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080918/3ed50f4f/attachment.html
From geos-trac at osgeo.org  Mon Sep 22 19:04:22 2008
From: geos-trac at osgeo.org (GEOS)
Date: Mon Sep 22 19:04:22 2008
Subject: [geos-devel] [GEOS] #207: Remove memory leaks to make trunk
	production ready
Message-ID: <047.1d1a40fe87aedd2f255c9bf14400d66b@osgeo.org>

#207: Remove memory leaks to make trunk production ready
-------------------------+--------------------------------------------------
 Reporter:  mloskot      |       Owner:  geos-devel@lists.osgeo.org
     Type:  task         |      Status:  new                       
 Priority:  major        |   Milestone:                            
Component:  Core         |     Version:  svn-trunk                 
 Severity:  Significant  |    Keywords:  memory,leak,debugging     
-------------------------+--------------------------------------------------
 There has been number of memory leaks recently observed and reported by
 users and developers.

 This is a all-in-one task devoted to memory leaks cleanup in GEOS core, C
 API layer and tests:

  * Goal: make GEOS trunk production-ready
  * In particular, remove all memory leaks
  * Not just prepared geometry, also check other use cases exercised by
 PostGIS (standard intersection, union, intersects, contains, within, etc.)

 Everyone interested, please, report observed memory leaks as comments to
 this ticket. Don't forget to attach files with test geometries, test
 queries, test programs, all steps required to reproduce particular memory
 leak(s).

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/207>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From mateusz at loskot.net  Wed Sep 24 08:10:51 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 24 08:11:24 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
 Monotone Chain components
Message-ID: <51868.195.24.248.244.1222258251.squirrel@loskot.net>

Folks,

I've started memory leaks cleanup [1] in GEOS and found quite serious
design issue around MonotoneChain components.

Here is longer story [2] with suggested solution, however I'm not enough
knowledgeable about all internals especially about possible relations
between various collections allocated internally as well as flows and
ownership transfers.

I'd be thankful if original authors of these components (Ben?, Sandro?)
could share their minds.

[1] http://trac.osgeo.org/geos/ticket/207
[2] http://trac.osgeo.org/geos/ticket/207#comment:4

Best regards,
-- 
Mateusz Loskot
http://mateusz.loskot.net




From strk at keybit.net  Wed Sep 24 10:42:49 2008
From: strk at keybit.net (strk)
Date: Wed Sep 24 10:49:06 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
Message-ID: <20080924144249.GA39072@keybit.net>

On Wed, Sep 24, 2008 at 02:10:51PM +0200, Mateusz Loskot wrote:

> Here is longer story [2] with suggested solution, however I'm not enough
> knowledgeable about all internals especially about possible relations
> between various collections allocated internally as well as flows and
> ownership transfers.
> 
> I'd be thankful if original authors of these components (Ben?, Sandro?)
> could share their minds.

Truth is (and you know): GEOS needs a GC !
Can't keep being considered 1:1 mapping with JTS if doesn't have one...

--strk;
From mateusz at loskot.net  Wed Sep 24 10:56:29 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 24 10:57:01 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <20080924144249.GA39072@keybit.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
Message-ID: <53389.195.24.248.244.1222268189.squirrel@loskot.net>

strk wrote:
> On Wed, Sep 24, 2008 at 02:10:51PM +0200, Mateusz Loskot wrote:
>
>> Here is longer story [2] with suggested solution, however I'm not enough
>> knowledgeable about all internals especially about possible relations
>> between various collections allocated internally as well as flows and
>> ownership transfers.
>>
>> I'd be thankful if original authors of these components (Ben?, Sandro?)
>> could share their minds.
>
> Truth is (and you know): GEOS needs a GC !
> Can't keep being considered 1:1 mapping with JTS if doesn't have one...


Sandro,

Any particular GC technique you have in mind?

IMHO, one of possible and clean solution for this kind of issues in GEOS
is to apply GC in form of shared_ptr?- smart pointer that controls
lifetime of objects and frees developers from knowing *when* an object
is/should be deallocated.

However, I'm not really sure if GEOS is ready for another revolution ;-)

Ciao,
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at keybit.net  Wed Sep 24 11:06:41 2008
From: strk at keybit.net (strk)
Date: Wed Sep 24 11:06:43 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <53389.195.24.248.244.1222268189.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
Message-ID: <20080924150641.GB39072@keybit.net>

On Wed, Sep 24, 2008 at 04:56:29PM +0200, Mateusz Loskot wrote:
> strk wrote:
> > Truth is (and you know): GEOS needs a GC !
> > Can't keep being considered 1:1 mapping with JTS if doesn't have one...
> 
> Any particular GC technique you have in mind?
> 
> IMHO, one of possible and clean solution for this kind of issues in GEOS
> is to apply GC in form of shared_ptr?- smart pointer that controls
> lifetime of objects and frees developers from knowing *when* an object
> is/should be deallocated.

As long as you're sure no circular references exist, shared_ptr 
wuold be fine. But the point is if we GEOS needs to directly
map JTS algorithms, they are based on a conservativ
garbage collector.

GCJ uses the bohem one, and is very nice.
Ever tried to build JTS natively ?

--strk;
From mbdavis at refractions.net  Wed Sep 24 11:43:29 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep 24 11:37:48 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <20080924150641.GB39072@keybit.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>	<20080924144249.GA39072@keybit.net>	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
Message-ID: <48DA6021.4090806@refractions.net>

Good point, Sandro - I always thought that a limitation of the smart-ptr 
/ reference counting technique was that it couldn't handle circular 
references correctly.  The JTS internals are *full* of circular 
structures (e.g. all the graph structures)

We've experimented with GCJ, with mixed results.  The code compiles 
fine, but we were seeing mysterious crashes sporadically under use in 
PostGIS.  Seems like a great way to go if someone can figure it out, though.

strk wrote:
> On Wed, Sep 24, 2008 at 04:56:29PM +0200, Mateusz Loskot wrote:
>   
>> strk wrote:
>>     
>>> Truth is (and you know): GEOS needs a GC !
>>> Can't keep being considered 1:1 mapping with JTS if doesn't have one...
>>>       
>> Any particular GC technique you have in mind?
>>
>> IMHO, one of possible and clean solution for this kind of issues in GEOS
>> is to apply GC in form of shared_ptr - smart pointer that controls
>> lifetime of objects and frees developers from knowing *when* an object
>> is/should be deallocated.
>>     
>
> As long as you're sure no circular references exist, shared_ptr 
> wuold be fine. But the point is if we GEOS needs to directly
> map JTS algorithms, they are based on a conservativ
> garbage collector.
>
> GCJ uses the bohem one, and is very nice.
> Ever tried to build JTS natively ?
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Wed Sep 24 14:30:13 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 24 14:30:46 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <20080924150641.GB39072@keybit.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
Message-ID: <53640.195.24.248.244.1222281013.squirrel@loskot.net>

strk wrote:
> On Wed, Sep 24, 2008 at 04:56:29PM +0200, Mateusz Loskot wrote:
>> strk wrote:
>> > Truth is (and you know): GEOS needs a GC !
>> > Can't keep being considered 1:1 mapping with JTS if doesn't have
>> one...
>>
>> Any particular GC technique you have in mind?
>>
>> IMHO, one of possible and clean solution for this kind of issues in GEOS
>> is to apply GC in form of shared_ptr?- smart pointer that controls
>> lifetime of objects and frees developers from knowing *when* an object
>> is/should be deallocated.
>
> As long as you're sure no circular references exist, shared_ptr
> wuold be fine.

I should precise I mean shared_ptr + weak_ptr. These two together solve
circular references issue.

> But the point is if we GEOS needs to directly
> map JTS algorithms, they are based on a conservativ
> garbage collector.

I can't answer this. However, I suppose it would be better if GEOS
implements the same algorithms as JTS does but not follows JTS
implementation line-by-line.

> GCJ uses the bohem one, and is very nice.

Bohem can solve some/many problems, but it's not native C++ and
portable option, it's yet another dependencies (a big one), etc.
I don't think it would meet users' needs and expectations ;-)

Smart pointers would do solve this problem easier with
less complex solution. Although, I'm afraid it would require a lot of work.

> Ever tried to build JTS natively ?

I've never got interested in GCJ. I prefer "native" implementations :-)

Best regards,
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Wed Sep 24 14:34:58 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 24 14:35:32 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <48DA6021.4090806@refractions.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<48DA6021.4090806@refractions.net>
Message-ID: <53732.195.24.248.244.1222281298.squirrel@loskot.net>

Martin Davis wrote:
> Good point, Sandro - I always thought that a limitation of the smart-ptr
> / reference counting technique was that it couldn't handle circular
> references correctly.  The JTS internals are *full* of circular
> structures (e.g. all the graph structures)

shared_ptr + weak_ptr idioms should solve it right, in GEOS.

Best regards,
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at keybit.net  Wed Sep 24 16:15:23 2008
From: strk at keybit.net (strk)
Date: Wed Sep 24 16:15:25 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <53640.195.24.248.244.1222281013.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<53640.195.24.248.244.1222281013.squirrel@loskot.net>
Message-ID: <20080924201523.GB49138@keybit.net>

On Wed, Sep 24, 2008 at 08:30:13PM +0200, Mateusz Loskot wrote:
> strk wrote:

> > As long as you're sure no circular references exist, shared_ptr
> > wuold be fine.
> 
> I should precise I mean shared_ptr + weak_ptr. These two together solve
> circular references issue.
> 
> > But the point is if we GEOS needs to directly
> > map JTS algorithms, they are based on a conservativ
> > garbage collector.
> 
> I can't answer this. However, I suppose it would be better if GEOS
> implements the same algorithms as JTS does but not follows JTS
> implementation line-by-line.

Memory management is part of the algorithm, not an implementation
detail. For strong/weak pointers to work it takes a design decision.
If Martin never had to take it you'll be in trouble...

> > GCJ uses the bohem one, and is very nice.
> 
> Bohem can solve some/many problems, but it's not native C++ and
> portable option, it's yet another dependencies (a big one), etc.
> I don't think it would meet users' needs and expectations ;-)

'yet another' ? Isn't GEOS depencencies-free anymore ?
Where I left it it had no dependencies except a C++ compiler
and the standard template library.

> Smart pointers would do solve this problem easier with
> less complex solution. Although, I'm afraid it would require a lot of work.

Bohem will likely require lot of work too...
It's fun for me to talk about these issues *now* :)
You can tell why I tried manual management always so far.

The most effective way was usually kind of "pools".
Basically, you use containers of things to delete at the
end of the operations (every operation is a class anyway).
It usually did fine.

--strk;
From mateusz at loskot.net  Wed Sep 24 16:50:59 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 24 16:51:34 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <20080924201523.GB49138@keybit.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<53640.195.24.248.244.1222281013.squirrel@loskot.net>
	<20080924201523.GB49138@keybit.net>
Message-ID: <54109.195.24.248.244.1222289459.squirrel@loskot.net>

strk wrote:
> On Wed, Sep 24, 2008 at 08:30:13PM +0200, Mateusz Loskot wrote:
>> strk wrote:
>
>>> As long as you're sure no circular references exist, shared_ptr
>>> wuold be fine.
>>
>> I should precise I mean shared_ptr + weak_ptr. These two together solve
>> circular references issue.
>>
>>> But the point is if we GEOS needs to directly
>>> map JTS algorithms, they are based on a conservativ
>>> garbage collector.
>>
>> I can't answer this. However, I suppose it would be better if GEOS
>> implements the same algorithms as JTS does but not follows JTS
>> implementation line-by-line.
>
> Memory management is part of the algorithm, not an implementation
> detail.

It's a part of algorithm requirements and assertions, but algorithm should
not assert use of any low-level techniques to achieve them.
If an algorithm requires circular references, that's OK but it doesn't say
specifically what tools must be used with particular programming language.

AFAIU and AFAIS, GEOS does not use any tools to solve memory
management with circulars.

> For strong/weak pointers to work it takes a design decision.

You are perfectly right and that's the very reason I've started this
discussion (see my comment [1]: I think I've stuck :-)).

[1] http://trac.osgeo.org/geos/ticket/207#comment:4

> If Martin never had to take it you'll be in trouble...

Exactly! And this is seriously my concern too.
Simply, I can't see how to solve current state.

The only solution I can imagine is to take JTS algorithms, one by one,
re-analyse them and re-implement (sometimes re-design a little) having all
these issues in mind. So, final implementation fulfills requirements of
Martin's algorithms as well as fits well into conditions of C++.

AFAIR, we've talked about these kind of problems in GEOS a few times
but no one is brave enough to apply discussed ideas to the code.
Everybody is able to imagine it would require a lot of work.

>> > GCJ uses the bohem one, and is very nice.
>>
>> Bohem can solve some/many problems, but it's not native C++ and
>> portable option, it's yet another dependencies (a big one), etc.
>> I don't think it would meet users' needs and expectations ;-)
>
> 'yet another' ? Isn't GEOS depencencies-free anymore ?

C and C++ standard libraries?

You're right. I'm just still talking "Boost" to myself ;-)

> Where I left it it had no dependencies except a C++ compiler
> and the standard template library.

Nothing has changed, AFAIK.

>> Smart pointers would do solve this problem easier with
>> less complex solution. Although, I'm afraid it would require a lot of
>> work.
>
> Bohem will likely require lot of work too...
> It's fun for me to talk about these issues *now* :)

Lucky you ;-)

> You can tell why I tried manual management always so far.
>
> The most effective way was usually kind of "pools".
> Basically, you use containers of things to delete at the
> end of the operations (every operation is a class anyway).
> It usually did fine.

Generally, true but number of issues come to my mind:
Those pools are not documented.
There is no way to learn where are start and end points of operations and
algorithms, unless you read the code from start to the end.
Memory and time boundaries of operations are not documented.
So, tracking objects ownership and flows is very hard.
How do we know all users of given pool in given time (without reading the
whole codebase).
...

Best regards,
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at keybit.net  Wed Sep 24 17:10:30 2008
From: strk at keybit.net (strk)
Date: Wed Sep 24 17:10:33 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <54109.195.24.248.244.1222289459.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<53640.195.24.248.244.1222281013.squirrel@loskot.net>
	<20080924201523.GB49138@keybit.net>
	<54109.195.24.248.244.1222289459.squirrel@loskot.net>
Message-ID: <20080924211030.GC49138@keybit.net>

On Wed, Sep 24, 2008 at 10:50:59PM +0200, Mateusz Loskot wrote:
> strk wrote:

> > The most effective way was usually kind of "pools".
> > Basically, you use containers of things to delete at the
> > end of the operations (every operation is a class anyway).
> > It usually did fine.
> 
> Generally, true but number of issues come to my mind:
> Those pools are not documented.

Right. But you'll find a few around...

> There is no way to learn where are start and end points of operations and
> algorithms, unless you read the code from start to the end.

There kind of is, if you assume operations are driven by operation
classes...

> Memory and time boundaries of operations are not documented.

True, you may very well end out of memory before getting 
a chance to dispose all.

> So, tracking objects ownership and flows is very hard.
> How do we know all users of given pool in given time (without reading the
> whole codebase).

Which is another well known problem: there are too many interfaces
exposed. My solution was: warranty void if you don't use the C-API.

So you'd basically follow the flow from C-API on.
The wider your pools, the more issues with memory and time boundaries.
The closer-to-low-level-op you pool the better.

--strk;
From mateusz at loskot.net  Wed Sep 24 17:52:34 2008
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep 24 17:53:09 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <20080924211030.GC49138@keybit.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<53640.195.24.248.244.1222281013.squirrel@loskot.net>
	<20080924201523.GB49138@keybit.net>
	<54109.195.24.248.244.1222289459.squirrel@loskot.net>
	<20080924211030.GC49138@keybit.net>
Message-ID: <54273.195.24.248.244.1222293154.squirrel@loskot.net>

strk wrote:
> On Wed, Sep 24, 2008 at 10:50:59PM +0200, Mateusz Loskot wrote:
>>
>> So, tracking objects ownership and flows is very hard.
>> How do we know all users of given pool in given time (without
>> reading the whole codebase).
>
> Which is another well known problem: there are too many interfaces
> exposed. My solution was: warranty void if you don't use the C-API.

I don't have much comments on GEOS interfaces.

> So you'd basically follow the flow from C-API on.

Facing this particular problem, I am not how higher-level API
may help to solve low-level issues :-)

> The wider your pools, the more issues with memory and time boundaries.
> The closer-to-low-level-op you pool the better.

Probably right.

Anyway, I have to confess I feel powerless to solve it.

Best regards,
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mark.cave-ayland at ilande.co.uk  Thu Sep 25 02:44:40 2008
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Thu Sep 25 02:45:12 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <54109.195.24.248.244.1222289459.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<53640.195.24.248.244.1222281013.squirrel@loskot.net>
	<20080924201523.GB49138@keybit.net>
	<54109.195.24.248.244.1222289459.squirrel@loskot.net>
Message-ID: <1222325080.4658.0.camel@mca-desktop>

On Wed, 2008-09-24 at 22:50 +0200, Mateusz Loskot wrote:

> The only solution I can imagine is to take JTS algorithms, one by one,
> re-analyse them and re-implement (sometimes re-design a little) having
all
> these issues in mind. So, final implementation fulfills requirements
of
> Martin's algorithms as well as fits well into conditions of C++.
> 
> AFAIR, we've talked about these kind of problems in GEOS a few times
> but no one is brave enough to apply discussed ideas to the code.
> Everybody is able to imagine it would require a lot of work.

I think long term that this will be the only sensible way to go. There
are many different paradigms in programming which are incompatible with
each other, and translating an algorithm direct from a GC environment to
a non-GC environment is one of these IMHO.

GEOS is a great proof-of-concept piece of code and we are all grateful
to Sandro, Mateusz etc. for the work that they have put in. But the
warning bells start to ring when even the people who work on the code
are unable to understand or maintain it - a lot of the work in PostGIS
SVN at the moment is related to tidying up code / adding debug support
which is designed to simplify things for developers, and make us (me?)
less likely to break things in the future when adding new features.

If I had a choice then it would be to spend the time re-engineering
Martin's JTS concepts/ideas into an algorithmic form which is friendly
to the language it is being written in, rather than trying to hack in
pointer reference counting. Work with the language, not against it. 

Having GEOS shadow JTS would be great in a perfect world, but the
reality is that the reduced cost in implementing new features comes at
the massive increased price of ongoing maintenance. While we are there,
let's chuck in a hierarchical memory manager (like PostgreSQL's palloc()
- maybe Samba's talloc() ?) so we can reclaim memory on a per-context
basis and eliminate memory leaks at the same time.


ATB,

Mark.


From mark.cave-ayland at ilande.co.uk  Thu Sep 25 02:38:41 2008
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Thu Sep 25 02:50:18 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in 
	Monotone Chain components
In-Reply-To: <54109.195.24.248.244.1222289459.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<20080924144249.GA39072@keybit.net>
	<53389.195.24.248.244.1222268189.squirrel@loskot.net>
	<20080924150641.GB39072@keybit.net>
	<53640.195.24.248.244.1222281013.squirrel@loskot.net>
	<20080924201523.GB49138@keybit.net>
	<54109.195.24.248.244.1222289459.squirrel@loskot.net>
Message-ID: <1222324721.3342.29.camel@mca-desktop>


On Wed, 2008-09-24 at 22:50 +0200, Mateusz Loskot wrote:

> The only solution I can imagine is to take JTS algorithms, one by one,
> re-analyse them and re-implement (sometimes re-design a little) having all
> these issues in mind. So, final implementation fulfills requirements of
> Martin's algorithms as well as fits well into conditions of C++.
> 
> AFAIR, we've talked about these kind of problems in GEOS a few times
> but no one is brave enough to apply discussed ideas to the code.
> Everybody is able to imagine it would require a lot of work.

I think long term that this will be the only sensible way to go. There
are many different paradigms in programming which are incompatible with
each other, and translating an algorithm direct from a GC environment to
a non-GC environment is one of these IMHO.

GEOS is a great proof-of-concept piece of code and we are all grateful
to Sandro, Mateusz etc. for the work that they have put in. But the
warning bells start to ring when even the people who work on the code
are unable to understand or maintain it - a lot of the work in PostGIS
SVN at the moment is related to tidying up code / adding debug support
which is designed to simplify things for developers, and make us (me?)
less likely to break things in the future when adding new features.

If I had a choice then it would be to spend the time re-engineering
Martin's JTS concepts/ideas into an algorithmic form which is friendly
to the language it is being written in, rather than trying to hack in
pointer reference counting. Work with the language, not against it. 

Having GEOS shadow JTS would be great in a perfect world, but the
reality is that the reduced cost in implementing new features comes at
the massive increased price of ongoing maintenance. While we are there,
let's chuck in a hierarchical memory manager (like PostgreSQL's palloc()
- maybe Samba's talloc() ?) so we can reclaim memory on a per-context
basis and eliminate memory leaks at the same time.


ATB,

Mark.



From robe.dnd at cityofboston.gov  Thu Sep 25 07:10:48 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Thu Sep 25 07:11:18 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <1222325080.4658.0.camel@mca-desktop>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net><20080924144249.GA39072@keybit.net><53389.195.24.248.244.1222268189.squirrel@loskot.net><20080924150641.GB39072@keybit.net><53640.195.24.248.244.1222281013.squirrel@loskot.net><20080924201523.GB49138@keybit.net><54109.195.24.248.244.1222289459.squirrel@loskot.net>
	<1222325080.4658.0.camel@mca-desktop>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D204C67304@ZDND.DND.boston.cob>


 Mark,

> If I had a choice then it would be to spend the time re-engineering
> Martin's JTS concepts/ideas into an algorithmic form which is friendly
> to the language it is being written in, rather than trying to hack in
> pointer reference counting. Work with the language, not against it. 

Sounds almost like you are asking for a domain-language for spatial to
write a meta-program which would
write JTS and GEOS.  Does such a domain-language exist already? Sounds
intriguing.  I love code generators. 
I wonder if this is as difficult as it sounds on the surface. 
I would much more trust a computer to do bean counting than a human if
we could codify what constructs require bean counting and which don't.

I imagine such a language would look more like JTS, but with fewer
constructs to prevent 
people from swaying off the beaten path without enhancing the
domain-language.

Thanks,
Regina

-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.

From mbdavis at refractions.net  Thu Sep 25 11:43:29 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Thu Sep 25 11:37:41 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D204C67304@ZDND.DND.boston.cob>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net><20080924144249.GA39072@keybit.net><53389.195.24.248.244.1222268189.squirrel@loskot.net><20080924150641.GB39072@keybit.net><53640.195.24.248.244.1222281013.squirrel@loskot.net><20080924201523.GB49138@keybit.net><54109.195.24.248.244.1222289459.squirrel@loskot.net>	<1222325080.4658.0.camel@mca-desktop>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204C67304@ZDND.DND.boston.cob>
Message-ID: <48DBB1A1.4010305@refractions.net>

Why not just use GCJ?  It compiles Java to object code.  That gives the 
best of both worlds.

There may well be languages which allow expression of algorithms at a 
higher level than Java (Ruby or Haskell come to mind).  Developing such 
a language from scratch is a *huge* undertaking.  And don't forget, 
development is about more than just the language - it's about an entire 
ecosystem of IDEs, Profilers, external libs, linkers, runtime engines, 
etc.  It takes years to get a language to this level of maturity, and 
it's also not possible to do in isolation from the rest of the 
community, IMO - to get true maturing and refinement you need input from 
probably thousands of developers.



Obe, Regina wrote:
>  Mark,
>
>   
>> If I had a choice then it would be to spend the time re-engineering
>> Martin's JTS concepts/ideas into an algorithmic form which is friendly
>> to the language it is being written in, rather than trying to hack in
>> pointer reference counting. Work with the language, not against it. 
>>     
>
> Sounds almost like you are asking for a domain-language for spatial to
> write a meta-program which would
> write JTS and GEOS.  Does such a domain-language exist already? Sounds
> intriguing.  I love code generators. 
> I wonder if this is as difficult as it sounds on the surface. 
> I would much more trust a computer to do bean counting than a human if
> we could codify what constructs require bean counting and which don't.
>
> I imagine such a language would look more like JTS, but with fewer
> constructs to prevent 
> people from swaying off the beaten path without enhancing the
> domain-language.
>
> Thanks,
> Regina
>
> -----------------------------------------
> The substance of this message, including any attachments, may be
> confidential, legally privileged and/or exempt from disclosure
> pursuant to Massachusetts law. It is intended
> solely for the addressee. If you received this in error, please
> contact the sender and delete the material from any computer.
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mbdavis at refractions.net  Thu Sep 25 12:05:01 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Thu Sep 25 11:59:12 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
Message-ID: <48DBB6AD.7000105@refractions.net>

Mateusz,

IMO you're on the right track with the idea that 
MCIndexSegmentSetMutualIntersector owns the segChains that it 
allocates.  They can be deleted in it's destructor. 

I don't see the design problem.  What's wrong with having complex 
long-lived structures which allocate internal objects, and then free 
them when the structure is itself destroyed?

Mateusz Loskot wrote:
> Folks,
>
> I've started memory leaks cleanup [1] in GEOS and found quite serious
> design issue around MonotoneChain components.
>
> Here is longer story [2] with suggested solution, however I'm not enough
> knowledgeable about all internals especially about possible relations
> between various collections allocated internally as well as flows and
> ownership transfers.
>
> I'd be thankful if original authors of these components (Ben?, Sandro?)
> could share their minds.
>
> [1] http://trac.osgeo.org/geos/ticket/207
> [2] http://trac.osgeo.org/geos/ticket/207#comment:4
>
> Best regards,
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mbdavis at refractions.net  Thu Sep 25 12:24:11 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Thu Sep 25 12:18:23 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <1222324721.3342.29.camel@mca-desktop>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>	<20080924144249.GA39072@keybit.net>	<53389.195.24.248.244.1222268189.squirrel@loskot.net>	<20080924150641.GB39072@keybit.net>	<53640.195.24.248.244.1222281013.squirrel@loskot.net>	<20080924201523.GB49138@keybit.net>	<54109.195.24.248.244.1222289459.squirrel@loskot.net>
	<1222324721.3342.29.camel@mca-desktop>
Message-ID: <48DBBB2B.50500@refractions.net>

Would it be possible to use a hierarchical memory manager with GEOS?  
JTS algorithms tend to be fairly well-structured and hierarchical in 
their memory usage patterns.

It would take a bit of work to identify the patterns - but probably less 
work than understanding the algorithms enough to design a completely 
different codebase from the ground up.

Mark Cave-Ayland wrote:
> On Wed, 2008-09-24 at 22:50 +0200, Mateusz Loskot wrote:
>
>   
>> The only solution I can imagine is to take JTS algorithms, one by one,
>> re-analyse them and re-implement (sometimes re-design a little) having all
>> these issues in mind. So, final implementation fulfills requirements of
>> Martin's algorithms as well as fits well into conditions of C++.
>>
>> AFAIR, we've talked about these kind of problems in GEOS a few times
>> but no one is brave enough to apply discussed ideas to the code.
>> Everybody is able to imagine it would require a lot of work.
>>     
>
> I think long term that this will be the only sensible way to go. There
> are many different paradigms in programming which are incompatible with
> each other, and translating an algorithm direct from a GC environment to
> a non-GC environment is one of these IMHO.
>
> GEOS is a great proof-of-concept piece of code and we are all grateful
> to Sandro, Mateusz etc. for the work that they have put in. But the
> warning bells start to ring when even the people who work on the code
> are unable to understand or maintain it - a lot of the work in PostGIS
> SVN at the moment is related to tidying up code / adding debug support
> which is designed to simplify things for developers, and make us (me?)
> less likely to break things in the future when adding new features.
>
> If I had a choice then it would be to spend the time re-engineering
> Martin's JTS concepts/ideas into an algorithmic form which is friendly
> to the language it is being written in, rather than trying to hack in
> pointer reference counting. Work with the language, not against it. 
>
> Having GEOS shadow JTS would be great in a perfect world, but the
> reality is that the reduced cost in implementing new features comes at
> the massive increased price of ongoing maintenance. While we are there,
> let's chuck in a hierarchical memory manager (like PostgreSQL's palloc()
> - maybe Samba's talloc() ?) so we can reclaim memory on a per-context
> basis and eliminate memory leaks at the same time.
>
>
> ATB,
>
> Mark.
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From robe.dnd at cityofboston.gov  Thu Sep 25 12:31:54 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Thu Sep 25 12:32:12 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues
	inMonotone Chain components
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net><20080924144249.GA39072@keybit.net><53389.195.24.248.244.1222268189.squirrel@loskot.net><20080924150641.GB39072@keybit.net><53640.195.24.248.244.1222281013.squirrel@loskot.net><20080924201523.GB49138@keybit.net><54109.195.24.248.244.1222289459.squirrel@loskot.net>	<1222325080.4658.0.camel@mca-desktop>
	<53F9CF533E1AA14EA1F8C5C08ABC08D204C67304@ZDND.DND.boston.cob>
	<48DBB1A1.4010305@refractions.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A235@ZDND.DND.boston.cob>

> Why not just use GCJ?  It compiles Java to object code.  That gives the 
> best of both worlds.

Hmm I thought we tried that already and it didn't work nicely?  Wasn't that what all that embed java was about or am I mistaken?  If it hasn't been tried, then I guess that would be the path of least resistance except for those cases where 
we did something in GEOS that is not done in JTS - like that elevation thingy and checkifobviouslywrong or whatever the name of that was.


> There may well be languages which allow expression of algorithms at a 
> higher level than Java (Ruby or Haskell come to mind).  Developing such 
> a language from scratch is a *huge* undertaking.  And don't forget, 
> development is about more than just the language - it's about an entire 
> ecosystem of IDEs, Profilers, external libs, linkers, runtime engines, 
> etc.  It takes years to get a language to this level of maturity, and 
> it's also not possible to do in isolation from the rest of the 
> community, IMO - to get true maturing and refinement you need input from 
> probably thousands of developers.

Admittedly this was a very crazy thought.  I wasn't thinking about generating
a full blown language - just disregarding stuff in existing that is dangerous.
And sprinkling code with meta comments that get translated by a preprocessor to real code.

Starting off with clear translations of how one thing maps to another

For example - JTS ArrayList vs. GEOS Vector<*> (I admit this may be somewhat petty)
Small objects - copy
Large objects - pointer (really the whole * & loop de loop delete in GEOS stuff is a big eyesore to me)
Persistence - begin persist;  end persist; (perhaps this is what all those garbage collectors are for)

Then there is (I forget which version of JTS I think up to 1.9 in OverlapOp.computeOverlay
which declares List splitEdges = baseSplitEdges;
which never seems to get used.

Doesn't exist in GEOS code base because - hmm - it should never have been done in the first place.  There are also minor cases like this I have seen where a temp variable is used in JTS that really didn't need to be there - but is not in GEOS because hmm its more costly in C++ code to do things like that and why?

These things are left to the discretion of the C++ person to omit/accept - and why they didn't voice this back to the JTS community is beyond me (or maybe it just didn't seem relevant and with my clueless eye every difference seems relevant :)).

Thanks,
Regina




-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080925/d8a8ecc6/attachment.html
From mbdavis at refractions.net  Thu Sep 25 12:44:53 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Thu Sep 25 12:39:04 2008
Subject: [geos-devel] Unclear objects lifetime and ownership
	issues	inMonotone Chain components
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A235@ZDND.DND.boston.cob>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net><20080924144249.GA39072@keybit.net><53389.195.24.248.244.1222268189.squirrel@loskot.net><20080924150641.GB39072@keybit.net><53640.195.24.248.244.1222281013.squirrel@loskot.net><20080924201523.GB49138@keybit.net><54109.195.24.248.244.1222289459.squirrel@loskot.net>	<1222325080.4658.0.camel@mca-desktop>	<53F9CF533E1AA14EA1F8C5C08ABC08D204C67304@ZDND.DND.boston.cob>	<48DBB1A1.4010305@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A235@ZDND.DND.boston.cob>
Message-ID: <48DBC005.7080302@refractions.net>



Obe, Regina wrote:
>
> > Why not just use GCJ?  It compiles Java to object code.  That gives the
> > best of both worlds.
>
> Hmm I thought we tried that already and it didn't work nicely?  Wasn't 
> that what all that embed java was about or am I mistaken?  If it 
> hasn't been tried, then I guess that would be the path of least 
> resistance except for those cases where
> we did something in GEOS that is not done in JTS - like that elevation 
> thingy and checkifobviouslywrong or whatever the name of that was.
>
There were unclear issues with GCJ.  If it can be made to work, it would 
be a huge win I think.
>
>
>
> > There may well be languages which allow expression of algorithms at a
> > higher level than Java (Ruby or Haskell come to mind).  Developing such
> > a language from scratch is a *huge* undertaking.  And don't forget,
> > development is about more than just the language - it's about an entire
> > ecosystem of IDEs, Profilers, external libs, linkers, runtime engines,
> > etc.  It takes years to get a language to this level of maturity, and
> > it's also not possible to do in isolation from the rest of the
> > community, IMO - to get true maturing and refinement you need input from
> > probably thousands of developers.
>
> Admittedly this was a very crazy thought.  I wasn't thinking about 
> generating
> a full blown language - just disregarding stuff in existing that is 
> dangerous.
> And sprinkling code with meta comments that get translated by a 
> preprocessor to real code.
>
IMO, I don't see this as being viable for a codebase as complex as 
GEOS.  I think it would be very hard to debug the "high-level" preproc 
instructions, given that you'd have to debug them at the 
processed-source level. 

But I'd be happy to be disproved by an existence proof...  8^)

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mark.cave-ayland at ilande.co.uk  Thu Sep 25 13:46:54 2008
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Thu Sep 25 13:46:59 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <48DBB6AD.7000105@refractions.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<48DBB6AD.7000105@refractions.net>
Message-ID: <1222364814.3236.5.camel@mca-desktop>


On Thu, 2008-09-25 at 09:05 -0700, Martin Davis wrote:
> Mateusz,
> 
> IMO you're on the right track with the idea that 
> MCIndexSegmentSetMutualIntersector owns the segChains that it 
> allocates.  They can be deleted in it's destructor. 
> 
> I don't see the design problem.  What's wrong with having complex 
> long-lived structures which allocate internal objects, and then free 
> them when the structure is itself destroyed?

Right. I inferred from Mateusz's comments that there were problems with
circular references which couldn't be sorted out in a straightforward
manner by fixing the constructors/deconstuctors. That's why I was
suggesting that if this is the case then a different design should be
considered.

But if each object has a well defined set of internal objects which can
be freed upon destruction, then that is a different matter - in this
case either someone will need to fix them by hand - or preferably
implement hierarchical memory management.

Martin, would there ever be a case where a hidden internal object could
be shared between multiple parent objects?


ATB,

Mark.


From mbdavis at refractions.net  Thu Sep 25 20:23:43 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Thu Sep 25 20:17:52 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <1222364814.3236.5.camel@mca-desktop>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>	<48DBB6AD.7000105@refractions.net>
	<1222364814.3236.5.camel@mca-desktop>
Message-ID: <48DC2B8F.3030205@refractions.net>



Mark Cave-Ayland wrote:
>
> Martin, would there ever be a case where a hidden internal object could
> be shared between multiple parent objects?
>   
Um...  I'll say no, this is not a pattern which is intentionally used in 
JTS *at the level at which user functionality is concerned*.  Of course, 
in the internal graph structures there is lots of cross-pointing, but 
the lifetime of these structures is always well-defined. 

In general, if the goal is to expose the methods on Geometry which are 
used in PostGIS, then it should be possible to free all allocated memory 
when the method completes (apart from any returned geometry, of 
course).  The one new exception to this is the PreparedGeometry classes, 
which of course have to hold onto memory for their internal structures.  
But their lifetime is well-defined as well.

Hopefully that helps.  Is there a possibility of supplying a single pool 
to each new Geometry method, and freeing it at the end of the 
operation?  Although how would you allow returned Geometrys to be 
allocated outside of this pool...  But maybe that doesn't matter - you 
can just free the pool at the end of the PostGIS function. 

This seems like it might be building GEOS to be a bit too specific to 
its use in PostGIS, however.  I think there's lots of people who want to 
use it in other environments.

Is GEOS really that far from being memory-tight?
>
> ATB,
>
> Mark.
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From pramsey at cleverelephant.ca  Thu Sep 25 22:06:49 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu Sep 25 22:06:52 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues in
	Monotone Chain components
In-Reply-To: <48DC2B8F.3030205@refractions.net>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>
	<48DBB6AD.7000105@refractions.net>
	<1222364814.3236.5.camel@mca-desktop>
	<48DC2B8F.3030205@refractions.net>
Message-ID: <30fe546d0809251906k77073b61l29b6a109747f1913@mail.gmail.com>

Let's wait a couple days before declaring tighness one way or another,
as there are certainly gushing holes on the PostGIS side that I know
have enough info to go after.

P.

On Thu, Sep 25, 2008 at 5:23 PM, Martin Davis <mbdavis@refractions.net> wrote:
>
>
> Mark Cave-Ayland wrote:
>>
>> Martin, would there ever be a case where a hidden internal object could
>> be shared between multiple parent objects?
>>
>
> Um...  I'll say no, this is not a pattern which is intentionally used in JTS
> *at the level at which user functionality is concerned*.  Of course, in the
> internal graph structures there is lots of cross-pointing, but the lifetime
> of these structures is always well-defined.
> In general, if the goal is to expose the methods on Geometry which are used
> in PostGIS, then it should be possible to free all allocated memory when the
> method completes (apart from any returned geometry, of course).  The one new
> exception to this is the PreparedGeometry classes, which of course have to
> hold onto memory for their internal structures.  But their lifetime is
> well-defined as well.
>
> Hopefully that helps.  Is there a possibility of supplying a single pool to
> each new Geometry method, and freeing it at the end of the operation?
>  Although how would you allow returned Geometrys to be allocated outside of
> this pool...  But maybe that doesn't matter - you can just free the pool at
> the end of the PostGIS function.
> This seems like it might be building GEOS to be a bit too specific to its
> use in PostGIS, however.  I think there's lots of people who want to use it
> in other environments.
>
> Is GEOS really that far from being memory-tight?
>>
>> ATB,
>>
>> Mark.
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>>
>
> --
> Martin Davis
> Senior Technical Architect
> Refractions Research, Inc.
> (250) 383-3022
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From robe.dnd at cityofboston.gov  Fri Sep 26 01:20:47 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Fri Sep 26 01:21:05 2008
Subject: [geos-devel] Unclear objects lifetime and ownership issues
	inMonotone Chain components
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>	<48DBB6AD.7000105@refractions.net>
	<1222364814.3236.5.camel@mca-desktop>
	<48DC2B8F.3030205@refractions.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A238@ZDND.DND.boston.cob>

Martin,

> This seems like it might be building GEOS to be a bit too specific to 
> its use in PostGIS, however.  I think there's lots of people who want to 
> use it in other environments.

Slightly off-topic - but have you been looking at how those evil C# people have been interpreting JTS?
http://sourceforge.net/project/showfiles.php?group_id=144924&package_id=159419&release_id=443988

Although I think they have a much easier time porting JTS code - since well C# doesn't have to worry about all that pointer arithmetic minutia and its syntax is much closer to Java (e.g. they have ArrayList too) so is a closer one to one code compare with JTS.  In fact - its almost identical code except for some casing choices to conform to C# standard here and there and use of IEnumerator vs iterator.  Scary close.

I, feeling somewhat attached to the evil empire - can't help but point out these irrelevant similarities :)

I'm still working on the proof of existence theorem - although I am leaning toward the direction of a meta language
that no one actually programs in but that enforces a certain level of rigidness such that (ala Microsoft's IL where a VB.NET compilation to IL is almost as efficient as C# to IL or C--) 

Valid Transform(JTS, TSM) -> implies - Transform(TSM, GEOS) is efficient
Valid Transform(GEOS,TSM) -> implies - Transform(TSM,JTS) is efficient
Valid Transform(NTS, TSM) -> implies - Transform(TSM,JTS) , Transform(TSM,GEOS) is efficient

By the simple fact it chokes you know there is no way in gods hell of making it efficient without significant rewrite or tinkering with the transform function.  What exactly that magical function looks like (if it exists) I'm still stirring in my head (I suspect it involves cataloging the various patterns of programming in each).  

The problem I have with things like GCJ conversions (talking from the side of my mouth since I don't quite understand them) is 
they just guarantee at best the code will run but not that it will run efficiently in the new environment.  I also tend to think the task is much more simple if you limit the scope of possibilities whereas a bytecode full blown thingy has to consider everything.

Thanks,
Regina














-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080926/d781f892/attachment.html
From mbdavis at refractions.net  Fri Sep 26 11:47:52 2008
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Sep 26 11:41:57 2008
Subject: [geos-devel] Unclear objects lifetime and ownership
	issues	inMonotone Chain components
In-Reply-To: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A238@ZDND.DND.boston.cob>
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>	<48DBB6AD.7000105@refractions.net>	<1222364814.3236.5.camel@mca-desktop>	<48DC2B8F.3030205@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A238@ZDND.DND.boston.cob>
Message-ID: <48DD0428.8000507@refractions.net>

I've know about NTS since it's inception, Regina.  As you say, they had 
a *much* easier time of porting it.  And it's lucky for them that it 
tracks so closely - saves them having to think when bug fixes & new 
features are added to JTS...  8^)

Do you know how "inefficient" GCJ is?  Maybe it's not that bad at 
all...  As long as its garbage collector is efficient it could be 
similar performance to Java.  AFAIU garbage collectors can be as 
efficient if not more so than manual memory management.

Carry on with your language research...  There's a PhD there for you at 
least if you crack that one.

Obe, Regina wrote:
>
> Martin,
>
> > This seems like it might be building GEOS to be a bit too specific to
> > its use in PostGIS, however.  I think there's lots of people who want to
> > use it in other environments.
>
> Slightly off-topic - but have you been looking at how those evil C# 
> people have been interpreting JTS?
> http://sourceforge.net/project/showfiles.php?group_id=144924&package_id=159419&release_id=443988 
> <http://sourceforge.net/project/showfiles.php?group_id=144924&package_id=159419&release_id=443988>
>
> Although I think they have a much easier time porting JTS code - since 
> well C# doesn't have to worry about all that pointer arithmetic 
> minutia and its syntax is much closer to Java (e.g. they have 
> ArrayList too) so is a closer one to one code compare with JTS.  In 
> fact - its almost identical code except for some casing choices to 
> conform to C# standard here and there and use of IEnumerator vs 
> iterator.  Scary close.
>
> I, feeling somewhat attached to the evil empire - can't help but point 
> out these irrelevant similarities :)
>
> I'm still working on the proof of existence theorem - although I am 
> leaning toward the direction of a meta language
> that no one actually programs in but that enforces a certain level of 
> rigidness such that (ala Microsoft's IL where a VB.NET compilation to 
> IL is almost as efficient as C# to IL or C--)
>
> Valid Transform(JTS, TSM) -> implies - Transform(TSM, GEOS) is efficient
> Valid Transform(GEOS,TSM) -> implies - Transform(TSM,JTS) is efficient
> Valid Transform(NTS, TSM) -> implies - Transform(TSM,JTS) , 
> Transform(TSM,GEOS) is efficient
>
> By the simple fact it chokes you know there is no way in gods hell of 
> making it efficient without significant rewrite or tinkering with the 
> transform function.  What exactly that magical function looks like (if 
> it exists) I'm still stirring in my head (I suspect it involves 
> cataloging the various patterns of programming in each). 
>
> The problem I have with things like GCJ conversions (talking from the 
> side of my mouth since I don't quite understand them) is
> they just guarantee at best the code will run but not that it will run 
> efficiently in the new environment.  I also tend to think the task is 
> much more simple if you limit the scope of possibilities whereas a 
> bytecode full blown thingy has to consider everything.
>
> Thanks,
> Regina
>
>
>
>
>
>
>
>
>
>
>
>
> ------------------------------------------------------------------------
>
> *The substance of this message, including any attachments, may be 
> confidential, legally privileged and/or exempt from disclosure 
> pursuant to Massachusetts law. It is intended solely for the 
> addressee. If you received this in error, please contact the sender 
> and delete the material from any computer. *
>
> ------------------------------------------------------------------------
>
> * Help make the earth a greener place. If at all possible resist 
> printing this email and join us in saving paper. *
>
> * *
>
> * *
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From robe.dnd at cityofboston.gov  Fri Sep 26 12:24:56 2008
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Fri Sep 26 12:25:20 2008
Subject: [geos-devel] Unclear objects lifetime and
	ownershipissues	inMonotone Chain components
References: <51868.195.24.248.244.1222258251.squirrel@loskot.net>	<48DBB6AD.7000105@refractions.net>	<1222364814.3236.5.camel@mca-desktop>	<48DC2B8F.3030205@refractions.net>
	<53F9CF533E1AA14EA1F8C5C08ABC08D20197A238@ZDND.DND.boston.cob>
	<48DD0428.8000507@refractions.net>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D20197A23A@ZDND.DND.boston.cob>

-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Martin Davis
Sent: Fri 9/26/2008 11:47 AM
> Do you know how "inefficient" GCJ is?  Maybe it's not that bad at 
> all...  As long as its garbage collector is efficient it could be 
> similar performance to Java.  AFAIU garbage collectors can be as 
> efficient if not more so than manual memory management.

Haven't a clue how inefficient GCJ is - that was more just type casting just as I think SWIG is slower than any native solution :)  Haven't really tried it to be honest.
I was thinking more along the line that certain languages and styles of programming have different inate efficiencies in them and a general solution would rarely leverage 
that nor leverage your general programming style.  True the garbage collection may be better - but there is more to efficient programming than garbage collection.  

Take a procedural statement and translate it to SQL verbatim - it would be ugly and inefficient but its garbage collection would be excellent.  Who cares - it is still slow.

For example for my line of work - I have a clear idea of how my programming
concepts translate from .NET to PHP to whatever language I know efficiently and what exactly I do is repetitive.  If I rely on a generic code generator
to do that for me - it produces extremely ugly, inefficient, and unmaintainable code (except in the case of C# -> VB.NET (VB.NET -> C# is another story though since ironically VB.NET has a lot more syntactic sugar))

so I've written my own code generators that leverage my naming schemes, patterns, general flow etc
and my understanding of the target language and what portions of it I actually use and discard all other parts as (errors in design :)).  So basically its a well-fit code-glove - when "Regina does this in PHP she does it like this" - "if it were C# she'd do this", "If it were SQL she'd do this" and so on.

The very nice thing about JTS is that its fairly self-standing and the patterns seem very predictable.  Not too many dependencies to worry about that you wouldn't find in another environment.

It would be nice if we could harness all those related factions :).

Thanks,
Regina









-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080926/f2a4da75/attachment.html
From warmerdam at pobox.com  Sun Sep 28 22:12:47 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Sun Sep 28 22:12:50 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
	<30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
Message-ID: <931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>

Paul,

I could do this if needed.  I think I can speak to the OSGeo'ification of GEOS
fairly well.  But I wonder if you could provide a bit of background on
the technical
improvements happening since 3.0.0 release which I'm vague on.

Best regards,


On Tue, Sep 16, 2008 at 1:38 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> Ok, thanks. Anyone else in GEOS you know who will be there? We need
> (should) report out to the AGM on our status / existence.
>
> P.
>
> On Mon, Sep 15, 2008 at 2:07 PM, Mateusz Loskot <mateusz@loskot.net> wrote:
>> Paul,
>>
>> Unfortunately, I'm not. I hope to be in Australia in 2009.
>>
>> mateo
>>
>>
>> Paul Ramsey wrote:
>>> Mat, are you going to Cape Town?
>>>
>>> P
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>



-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent
From pramsey at cleverelephant.ca  Sun Sep 28 22:41:43 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Sun Sep 28 22:41:46 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
	<30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
	<931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>
Message-ID: <30fe546d0809281941s501428adi3e0625c6e91c2a76@mail.gmail.com>

Since 3.0.0 the main added feature has been the PreparedGeometry.
Everything else has been wee platform and mainenance issues.

p.

On Sun, Sep 28, 2008 at 7:12 PM, Frank Warmerdam <warmerdam@pobox.com> wrote:
> Paul,
>
> I could do this if needed.  I think I can speak to the OSGeo'ification of GEOS
> fairly well.  But I wonder if you could provide a bit of background on
> the technical
> improvements happening since 3.0.0 release which I'm vague on.
>
> Best regards,
>
>
> On Tue, Sep 16, 2008 at 1:38 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
>> Ok, thanks. Anyone else in GEOS you know who will be there? We need
>> (should) report out to the AGM on our status / existence.
>>
>> P.
>>
>> On Mon, Sep 15, 2008 at 2:07 PM, Mateusz Loskot <mateusz@loskot.net> wrote:
>>> Paul,
>>>
>>> Unfortunately, I'm not. I hope to be in Australia in 2009.
>>>
>>> mateo
>>>
>>>
>>> Paul Ramsey wrote:
>>>> Mat, are you going to Cape Town?
>>>>
>>>> P
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
>
>
> --
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Programmer for Rent
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From warmerdam at pobox.com  Sun Sep 28 22:47:16 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Sun Sep 28 22:47:18 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <30fe546d0809281941s501428adi3e0625c6e91c2a76@mail.gmail.com>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
	<30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
	<931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>
	<30fe546d0809281941s501428adi3e0625c6e91c2a76@mail.gmail.com>
Message-ID: <931f8ea90809281947p5b693eaai24be28c157716dbe@mail.gmail.com>

On Mon, Sep 29, 2008 at 4:41 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> Since 3.0.0 the main added feature has been the PreparedGeometry.
> Everything else has been wee platform and mainenance issues.

Paul,

It is a bit embarrassing to ask, but what is this "prepared geometry"
feature?  Perhaps there are others on the list like me that don't
really have any idea what this is about.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent
From pramsey at cleverelephant.ca  Mon Sep 29 00:11:52 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Sep 29 00:11:55 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <931f8ea90809281947p5b693eaai24be28c157716dbe@mail.gmail.com>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
	<30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
	<931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>
	<30fe546d0809281941s501428adi3e0625c6e91c2a76@mail.gmail.com>
	<931f8ea90809281947p5b693eaai24be28c157716dbe@mail.gmail.com>
Message-ID: <30fe546d0809282111t54cade90pdaa3098b7537091a@mail.gmail.com>

It's the solution to this problem:

http://blog.cleverelephant.ca/2007/06/performance-and-contains.html

thusly

http://lin-ear-th-inking.blogspot.com/2007/08/preparedgeometry-efficient-batch.html

P.

On Sun, Sep 28, 2008 at 7:47 PM, Frank Warmerdam <warmerdam@pobox.com> wrote:
> On Mon, Sep 29, 2008 at 4:41 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
>> Since 3.0.0 the main added feature has been the PreparedGeometry.
>> Everything else has been wee platform and mainenance issues.
>
> Paul,
>
> It is a bit embarrassing to ask, but what is this "prepared geometry"
> feature?  Perhaps there are others on the list like me that don't
> really have any idea what this is about.
>
> Best regards,
> --
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Programmer for Rent
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From warmerdam at pobox.com  Mon Sep 29 03:18:17 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Mon Sep 29 03:18:20 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <30fe546d0809282111t54cade90pdaa3098b7537091a@mail.gmail.com>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
	<30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
	<931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>
	<30fe546d0809281941s501428adi3e0625c6e91c2a76@mail.gmail.com>
	<931f8ea90809281947p5b693eaai24be28c157716dbe@mail.gmail.com>
	<30fe546d0809282111t54cade90pdaa3098b7537091a@mail.gmail.com>
Message-ID: <931f8ea90809290018q21857deapbb6dd9d35294d7d@mail.gmail.com>

On Mon, Sep 29, 2008 at 6:11 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> It's the solution to this problem:
>
> http://blog.cleverelephant.ca/2007/06/performance-and-contains.html
>
> thusly
>
> http://lin-ear-th-inking.blogspot.com/2007/08/preparedgeometry-efficient-batch.html
>
> P.
>
> On Sun, Sep 28, 2008 at 7:47 PM, Frank Warmerdam <warmerdam@pobox.com> wrote:
>> On Mon, Sep 29, 2008 at 4:41 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
>>> Since 3.0.0 the main added feature has been the PreparedGeometry.
>>> Everything else has been wee platform and mainenance issues.
>>
>> Paul,
>>
>> It is a bit embarrassing to ask, but what is this "prepared geometry"
>> feature?  Perhaps there are others on the list like me that don't
>> really have any idea what this is about.
>>
>> Best regards,
>> --
>> ---------------------------------------+--------------------------------------
>> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
>> light and sound - activate the windows | http://pobox.com/~warmerdam
>> and watch the world go round - Rush    | Geospatial Programmer for Rent
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>



-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent
From warmerdam at pobox.com  Mon Sep 29 03:19:54 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Mon Sep 29 03:19:57 2008
Subject: [geos-devel] Re: Fwd: Your Project/Chapter/Committee at FOSS4G!
In-Reply-To: <30fe546d0809282111t54cade90pdaa3098b7537091a@mail.gmail.com>
References: <BF5EA7E5-19FF-4A8F-9166-FD744B18CF0E@osgeo.org>
	<30fe546d0809151328w4242d3d8ydcf39d3bddb93679@mail.gmail.com>
	<48CECE99.2080200@loskot.net>
	<30fe546d0809151638p6523f669s6cd5db38a529f62b@mail.gmail.com>
	<931f8ea90809281912r469f824dl986ec8697b754a84@mail.gmail.com>
	<30fe546d0809281941s501428adi3e0625c6e91c2a76@mail.gmail.com>
	<931f8ea90809281947p5b693eaai24be28c157716dbe@mail.gmail.com>
	<30fe546d0809282111t54cade90pdaa3098b7537091a@mail.gmail.com>
Message-ID: <931f8ea90809290019n12713c9dhddafc6cbc492a146@mail.gmail.com>

On Mon, Sep 29, 2008 at 6:11 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> It's the solution to this problem:
>
> http://blog.cleverelephant.ca/2007/06/performance-and-contains.html
>
> thusly
>
> http://lin-ear-th-inking.blogspot.com/2007/08/preparedgeometry-efficient-batch.html

Paul,

Ah, that's exactly what I need in OGR!  And I see it is available
via the C interface too.  I'll have to try and integrate this (when
building against GEOS 3.1) in OGR before the 1.6 release.
Perhaps even this week at the conference.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent
From pramsey at cleverelephant.ca  Mon Sep 29 16:42:34 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon Sep 29 16:42:36 2008
Subject: [geos-devel] An Immodest Proposal
Message-ID: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>

All,

We are currently grappling with a pretty big issue in the PostGIS/GEOS
integration, namely that PgSQL allocates it's memory inside pools
(palloc/pfree), while GEOS allocates in general memory (malloc/free).
This (a) imposes a requirement of memory management perfection on
GEOS, otherwise the long-running postgres processes will leak and (b)
can lead to insoluble problems in certain implementation patterns.

We have recently found one such problem pattern. When using
preparedgeometry in postgis, we create a GEOS geometry and associated
prepared geometry, these are duly malloc'ed, but we store references
to them in a palloc'ed struct in a memory pool which lasts for the
life of a postgres query.  All is good (well, there are memory leaks
in the prepared stuff still, but those are theoretically fixable)
until the end of the query, when postgres cleans up the query memory
pool. All of a sudden the struct with the references to the geometry
and prepared geometry are gone -- but the objects have not been freed.

Basically, the prepared geometry system will leak one geometry and one
prepared geometry for every SQL statement run, and there's SFA we can
do about it.

My immodest proposal is to use geosInit as a location where users can
provide their own allocator/deallocators.  Right now, geosInit lets us
set custom error handlers, so this extends the idea further.

In GEOS we would override new/delete in GEOS to our own functions that
would check and see if the custom alloc/dealloc functions were set. If
not, they would fall back to malloc/free, otherwise use what was
provided.  For postgis, we would provide palloc/pfree in our geosInit
calls.

In this way, we could hook GEOS into the PgSQL pool system at runtime,
while still have it operate in the normal way when used with other
applications. And other applications with their own memory systems
could also more tightly integrate GEOS.

Thoughts?

P.
From woodbri at swoodbridge.com  Mon Sep 29 19:08:22 2008
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Mon Sep 29 18:07:10 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
Message-ID: <48E15FE6.6030804@swoodbridge.com>

Paul,

I think this is an outstanding proposal. While I don't know all the ins 
and outs of this issue, this method is sound and is similar to what 
SQLite uses to allow developers to use the default memory functions or 
to override them with their own.

Does this approach have any down side to it?
Are there cases where this might be bad? like someone has a pointer to 
the palloc'd struct in the memory pool that was just freed.

I assume potential cases were thought through, so in lieu someone 
pointing out such a case, I would offer a +1 (as a vote of confidence 
for a good idea, since I don't have a vote that counts here.)

-Steve

Paul Ramsey wrote:
> All,
> 
> We are currently grappling with a pretty big issue in the PostGIS/GEOS
> integration, namely that PgSQL allocates it's memory inside pools
> (palloc/pfree), while GEOS allocates in general memory (malloc/free).
> This (a) imposes a requirement of memory management perfection on
> GEOS, otherwise the long-running postgres processes will leak and (b)
> can lead to insoluble problems in certain implementation patterns.
> 
> We have recently found one such problem pattern. When using
> preparedgeometry in postgis, we create a GEOS geometry and associated
> prepared geometry, these are duly malloc'ed, but we store references
> to them in a palloc'ed struct in a memory pool which lasts for the
> life of a postgres query.  All is good (well, there are memory leaks
> in the prepared stuff still, but those are theoretically fixable)
> until the end of the query, when postgres cleans up the query memory
> pool. All of a sudden the struct with the references to the geometry
> and prepared geometry are gone -- but the objects have not been freed.
> 
> Basically, the prepared geometry system will leak one geometry and one
> prepared geometry for every SQL statement run, and there's SFA we can
> do about it.
> 
> My immodest proposal is to use geosInit as a location where users can
> provide their own allocator/deallocators.  Right now, geosInit lets us
> set custom error handlers, so this extends the idea further.
> 
> In GEOS we would override new/delete in GEOS to our own functions that
> would check and see if the custom alloc/dealloc functions were set. If
> not, they would fall back to malloc/free, otherwise use what was
> provided.  For postgis, we would provide palloc/pfree in our geosInit
> calls.
> 
> In this way, we could hook GEOS into the PgSQL pool system at runtime,
> while still have it operate in the normal way when used with other
> applications. And other applications with their own memory systems
> could also more tightly integrate GEOS.
> 
> Thoughts?
> 
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

From Gregory.Williamson at digitalglobe.com  Mon Sep 29 18:54:07 2008
From: Gregory.Williamson at digitalglobe.com (Gregory Williamson)
Date: Mon Sep 29 19:26:52 2008
Subject: [geos-devel] An Immodest Proposal
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
Message-ID: <8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>

This sounds like the most rational way forward on a gnarly problem.
+1

Greg W.
Senior DBA
DigitalGlobe 


-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org on behalf of Paul Ramsey
Sent: Mon 9/29/2008 1:42 PM
To: GEOS Development List
Subject: [geos-devel] An Immodest Proposal
 
All,

We are currently grappling with a pretty big issue in the PostGIS/GEOS
integration, namely that PgSQL allocates it's memory inside pools
(palloc/pfree), while GEOS allocates in general memory (malloc/free).
This (a) imposes a requirement of memory management perfection on
GEOS, otherwise the long-running postgres processes will leak and (b)
can lead to insoluble problems in certain implementation patterns.

We have recently found one such problem pattern. When using
preparedgeometry in postgis, we create a GEOS geometry and associated
prepared geometry, these are duly malloc'ed, but we store references
to them in a palloc'ed struct in a memory pool which lasts for the
life of a postgres query.  All is good (well, there are memory leaks
in the prepared stuff still, but those are theoretically fixable)
until the end of the query, when postgres cleans up the query memory
pool. All of a sudden the struct with the references to the geometry
and prepared geometry are gone -- but the objects have not been freed.

Basically, the prepared geometry system will leak one geometry and one
prepared geometry for every SQL statement run, and there's SFA we can
do about it.

My immodest proposal is to use geosInit as a location where users can
provide their own allocator/deallocators.  Right now, geosInit lets us
set custom error handlers, so this extends the idea further.

In GEOS we would override new/delete in GEOS to our own functions that
would check and see if the custom alloc/dealloc functions were set. If
not, they would fall back to malloc/free, otherwise use what was
provided.  For postgis, we would provide palloc/pfree in our geosInit
calls.

In this way, we could hook GEOS into the PgSQL pool system at runtime,
while still have it operate in the normal way when used with other
applications. And other applications with their own memory systems
could also more tightly integrate GEOS.

Thoughts?

P.
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20080929/b1285772/attachment.html
From geos-trac at osgeo.org  Tue Sep 30 00:01:56 2008
From: geos-trac at osgeo.org (GEOS)
Date: Tue Sep 30 00:01:57 2008
Subject: [geos-devel] [GEOS] #208: Provide alternate malloc/free at run time
Message-ID: <047.c88fe52778b574f126d52dfe32c2c9cb@osgeo.org>

#208: Provide alternate malloc/free at run time
-------------------------+--------------------------------------------------
 Reporter:  pramsey      |       Owner:  geos-devel@lists.osgeo.org
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.1                       
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
 We are currently grappling with a pretty big issue in the PostGIS/GEOS
 integration, namely that PgSQL allocates it's memory inside pools
 (palloc/pfree), while GEOS allocates in general memory (malloc/free).
 This (a) imposes a requirement of memory management perfection on
 GEOS, otherwise the long-running postgres processes will leak and (b)
 can lead to insoluble problems in certain implementation patterns.

 We have recently found one such problem pattern. When using
 preparedgeometry in postgis, we create a GEOS geometry and associated
 prepared geometry, these are duly malloc'ed, but we store references
 to them in a palloc'ed struct in a memory pool which lasts for the
 life of a postgres query.  All is good (well, there are memory leaks
 in the prepared stuff still, but those are theoretically fixable)
 until the end of the query, when postgres cleans up the query memory
 pool. All of a sudden the struct with the references to the geometry
 and prepared geometry are gone -- but the objects have not been freed.

 Basically, the prepared geometry system will leak one geometry and one
 prepared geometry for every SQL statement run, and there's SFA we can
 do about it.

 My immodest proposal is to use geosInit as a location where users can
 provide their own allocator/deallocators.  Right now, geosInit lets us
 set custom error handlers, so this extends the idea further.

 In GEOS we would override new/delete in GEOS to our own functions that
 would check and see if the custom alloc/dealloc functions were set. If
 not, they would fall back to malloc/free, otherwise use what was
 provided.  For postgis, we would provide palloc/pfree in our geosInit
 calls.

 In this way, we could hook GEOS into the PgSQL pool system at runtime,
 while still have it operate in the normal way when used with other
 applications. And other applications with their own memory systems
 could also more tightly integrate GEOS.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/208>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From pramsey at cleverelephant.ca  Tue Sep 30 00:05:33 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue Sep 30 00:05:36 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
Message-ID: <30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>

It turns out it is a quite small modification, and works pretty well:

http://trac.osgeo.org/geos/attachment/ticket/208/memdiff.patch

My patch adds the ability to override, and also has some printfs to
show what is happening. When the overridden allocator is called
without the runtime callback set, it prints "std alloc" and when it's
called with the callback set, it prints "geos alloc".

Here's a little program that exercises it:

#include <stdio.h>
#include "/usr/local/include/geos_c.h"
#include <stdlib.h>

int main() {
  printf("main\n");

  GEOSCoordSequence* cs;
  GEOSGeometry* g;
  int r;

  printf("initgeos\n");
  initGEOSMemory(malloc, free);
  printf("coordseqcreate\n");
  cs = GEOSCoordSeq_create(1, 2);
  printf("coordseqsetx\n");
  r = GEOSCoordSeq_setX(cs, 0, 1.0);
  printf("coordseqsety\n");
  r = GEOSCoordSeq_setY(cs, 0, 1.0);
  printf("createpoint\n");
  g = GEOSGeom_createPoint(cs);

  return 0;

}


And here is the output:

Heron:tmp pramsey$ ./a.out
std alloc!
std alloc!
main
initgeos
coordseqcreate
geos alloc!
geos alloc!
geos alloc!
coordseqsetx
coordseqsety
createpoint
geos alloc!

So, something in C++ is doing a couple allocations before we can slip
in and get our other function in place. But we can get all the big
stuff caught no problem.

P.
From cfis at savagexi.com  Tue Sep 30 00:30:53 2008
From: cfis at savagexi.com (Charlie Savage)
Date: Tue Sep 30 00:31:01 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
Message-ID: <48E1AB7D.2030905@savagexi.com>

Paul,

> It turns out it is a quite small modification, and works pretty well:
> 
> http://trac.osgeo.org/geos/attachment/ticket/208/memdiff.patch
> 
> My patch adds the ability to override, and also has some printfs to
> show what is happening. When the overridden allocator is called
> without the runtime callback set, it prints "std alloc" and when it's
> called with the callback set, it prints "geos alloc".

If you're going to run into any problems it will be on Windows, since 
its so fussy about memory being allocated/deallocated from the same 
runtime library's heap.  Looks like your solution does that.  But I 
wonder if there will be issues accessing the postgresql allocated memory 
from GEOS - like what happens if you call sizeof and such?  My guess it 
works, but would be good to run a debug build of geos/postgis - built 
with VC++2005 or 2008 since it adds various assertions to check these 
sorts of things.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20080929/d21aceeb/smime-0001.bin
From warmerdam at pobox.com  Tue Sep 30 01:26:03 2008
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Tue Sep 30 01:26:04 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
Message-ID: <931f8ea90809292226y110b1a8arf89cc15994a5c19c@mail.gmail.com>

On Tue, Sep 30, 2008 at 6:05 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> It turns out it is a quite small modification, and works pretty well:
...
>  printf("initgeos\n");
>  initGEOSMemory(malloc, free);
...
> So, something in C++ is doing a couple allocations before we can slip
> in and get our other function in place. But we can get all the big
> stuff caught no problem.

Paul,

Your approach looks fine to me.  In particular i'm pleased to see
the function to install the custom allocator is not part of the regular
init function and so does not change the old api or abi in an
incompatible way.

The initialization time allocations are a bit unfortunate.  In
fact for reasons like this and others I hate having objects
with dynamic components created during the program
startup (dll loading) process.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent
From gdt at ir.bbn.com  Tue Sep 30 08:35:02 2008
From: gdt at ir.bbn.com (Greg Troxel)
Date: Tue Sep 30 08:40:36 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
	(Paul Ramsey's message of "Mon, 29 Sep 2008 13:42:34 -0700")
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
Message-ID: <rmiskrhq0ax.fsf@fnord.ir.bbn.com>


  We have recently found one such problem pattern. When using
  preparedgeometry in postgis, we create a GEOS geometry and associated
  prepared geometry, these are duly malloc'ed, but we store references
  to them in a palloc'ed struct in a memory pool which lasts for the
  life of a postgres query.  All is good (well, there are memory leaks
  in the prepared stuff still, but those are theoretically fixable)
  until the end of the query, when postgres cleans up the query memory
  pool. All of a sudden the struct with the references to the geometry
  and prepared geometry are gone -- but the objects have not been freed.

Your proposal sounds sensible to me.  An alternative, much less
palatable, is to head down the path that guile takes with SMOBS, where
each object has a free routine, and to have the cleanup function for the
pool deallocate external pointers.  This assumes the pool is cleaned
instead of just being freed en masse like an exiting process, and even
if it worked it seems more complex and harder.

One concern would be if geos objects created in this way end up shared
in multiple pools, or are ever referred to by anything outside of such a
pool.  I can certainly believe that the usage patterns in postgis mean
that my concern is at the moment unfounded, but the palloc strategy
forces an invariant onto postgis that should be clearly documented lest
someone later not understand the implications.

I am woefully unclear on threading and geos.  Probably the rule for the
init function is that one has to call it before doing any other
operation (to avoid alloc-native/free-palloc), and then one may not
change the function again, at least not while any objects are allocated.

What happens when the two 'std alloc!' allocations get freed with the
new free function at process exit?  (Or if they don't now, when the bug
that leaks them is fixed?)



-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 193 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20080930/f0ba2736/attachment.bin
From chodgson at refractions.net  Tue Sep 30 12:55:28 2008
From: chodgson at refractions.net (Chris Hodgson)
Date: Tue Sep 30 12:54:49 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
Message-ID: <48E25A00.4060700@refractions.net>

Very nice Paul.

Those two std allocs are a bit scary... I had a feeling we might have 
some of those, and they seem worse than I had initially thought. The 
problem is that either they are attempted to be freed, using the 
provided free function - and who knows what error that could bring - or 
they are not, and we're leaking. If they are only created once at load 
of the DLL and never actually freed, but simply go away when the DLL is 
unloaded, then I guess we're ok. But it seems likely to me that the C++ 
runtime would be trying to free them using your own provided free 
function... can we do a test where we provide pfree and see what it does 
with that? ie. if you try to pfree() a regularly malloc()'d segment of 
memory, does it actually free it without raising any errors?

It would be really nice to know what those things that are getting 
created earlier are, too...
but I guess it all just comes down to, does it work in postgres and not 
leak?

Chris

Paul Ramsey wrote:
> It turns out it is a quite small modification, and works pretty well:
>
> http://trac.osgeo.org/geos/attachment/ticket/208/memdiff.patch
>
> My patch adds the ability to override, and also has some printfs to
> show what is happening. When the overridden allocator is called
> without the runtime callback set, it prints "std alloc" and when it's
> called with the callback set, it prints "geos alloc".
>
> Here's a little program that exercises it:
>
> #include <stdio.h>
> #include "/usr/local/include/geos_c.h"
> #include <stdlib.h>
>
> int main() {
>   printf("main\n");
>
>   GEOSCoordSequence* cs;
>   GEOSGeometry* g;
>   int r;
>
>   printf("initgeos\n");
>   initGEOSMemory(malloc, free);
>   printf("coordseqcreate\n");
>   cs = GEOSCoordSeq_create(1, 2);
>   printf("coordseqsetx\n");
>   r = GEOSCoordSeq_setX(cs, 0, 1.0);
>   printf("coordseqsety\n");
>   r = GEOSCoordSeq_setY(cs, 0, 1.0);
>   printf("createpoint\n");
>   g = GEOSGeom_createPoint(cs);
>
>   return 0;
>
> }
>
>
> And here is the output:
>
> Heron:tmp pramsey$ ./a.out
> std alloc!
> std alloc!
> main
> initgeos
> coordseqcreate
> geos alloc!
> geos alloc!
> geos alloc!
> coordseqsetx
> coordseqsety
> createpoint
> geos alloc!
>
> So, something in C++ is doing a couple allocations before we can slip
> in and get our other function in place. But we can get all the big
> stuff caught no problem.
>
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>   

From pramsey at cleverelephant.ca  Tue Sep 30 13:36:45 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue Sep 30 13:36:48 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <48E25A00.4060700@refractions.net>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
	<48E25A00.4060700@refractions.net>
Message-ID: <30fe546d0809301036n37501c32m6149a3c8bb984b39@mail.gmail.com>

Time to try this in "real life" with PostgreSQL and palloc/pfree.  I'm
going to create GEOS and PostGIS experimental branches, and commit my
work there, so that folks with other platforms can try it out.

On Tue, Sep 30, 2008 at 9:55 AM, Chris Hodgson <chodgson@refractions.net> wrote:
> Very nice Paul.
>
> Those two std allocs are a bit scary... I had a feeling we might have some
> of those, and they seem worse than I had initially thought. The problem is
> that either they are attempted to be freed, using the provided free function
> - and who knows what error that could bring - or they are not, and we're
> leaking. If they are only created once at load of the DLL and never actually
> freed, but simply go away when the DLL is unloaded, then I guess we're ok.
> But it seems likely to me that the C++ runtime would be trying to free them
> using your own provided free function... can we do a test where we provide
> pfree and see what it does with that? ie. if you try to pfree() a regularly
> malloc()'d segment of memory, does it actually free it without raising any
> errors?
>
> It would be really nice to know what those things that are getting created
> earlier are, too...
> but I guess it all just comes down to, does it work in postgres and not
> leak?
>
> Chris
>
> Paul Ramsey wrote:
>>
>> It turns out it is a quite small modification, and works pretty well:
>>
>> http://trac.osgeo.org/geos/attachment/ticket/208/memdiff.patch
>>
>> My patch adds the ability to override, and also has some printfs to
>> show what is happening. When the overridden allocator is called
>> without the runtime callback set, it prints "std alloc" and when it's
>> called with the callback set, it prints "geos alloc".
>>
>> Here's a little program that exercises it:
>>
>> #include <stdio.h>
>> #include "/usr/local/include/geos_c.h"
>> #include <stdlib.h>
>>
>> int main() {
>>  printf("main\n");
>>
>>  GEOSCoordSequence* cs;
>>  GEOSGeometry* g;
>>  int r;
>>
>>  printf("initgeos\n");
>>  initGEOSMemory(malloc, free);
>>  printf("coordseqcreate\n");
>>  cs = GEOSCoordSeq_create(1, 2);
>>  printf("coordseqsetx\n");
>>  r = GEOSCoordSeq_setX(cs, 0, 1.0);
>>  printf("coordseqsety\n");
>>  r = GEOSCoordSeq_setY(cs, 0, 1.0);
>>  printf("createpoint\n");
>>  g = GEOSGeom_createPoint(cs);
>>
>>  return 0;
>>
>> }
>>
>>
>> And here is the output:
>>
>> Heron:tmp pramsey$ ./a.out
>> std alloc!
>> std alloc!
>> main
>> initgeos
>> coordseqcreate
>> geos alloc!
>> geos alloc!
>> geos alloc!
>> coordseqsetx
>> coordseqsety
>> createpoint
>> geos alloc!
>>
>> So, something in C++ is doing a couple allocations before we can slip
>> in and get our other function in place. But we can get all the big
>> stuff caught no problem.
>>
>> P.
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
From pramsey at cleverelephant.ca  Tue Sep 30 19:47:26 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue Sep 30 19:47:29 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809301036n37501c32m6149a3c8bb984b39@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
	<48E25A00.4060700@refractions.net>
	<30fe546d0809301036n37501c32m6149a3c8bb984b39@mail.gmail.com>
Message-ID: <30fe546d0809301647s2bb454feh24cd0162cbb073f8@mail.gmail.com>

Help!

I've attached the modified geos_c.cpp and geos_c.h.in files for geos
for your perusal. The symptom is this:

- Modified containsPrepared to use initGEOSMemory
- Run an ST_Contains(g,g,i) prepared example
- Memory is both allocated and deallocated through the over-ridden
functions just fine
- UNTIL
- The code gets to the point where it has to deallocate a prepared
geometry and runs GEOSPreparedGeom_destroy()
- At that point, the deallocation does *not* enter the over-ridden
new/delete operators, it appears to use default operators, and
everything goes boom

So,

- the over-ride of new/delete seems to work fine inside the main geos
library, things get both allocated and freed using palloc and pfree
- but the delete inside the "extern C {}" block where
GEOSPreparedGeom_destroy does *not* appear to be over-ridden by our
cunning trick

Anyone have the secret sauce?

P.

On Tue, Sep 30, 2008 at 10:36 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> Time to try this in "real life" with PostgreSQL and palloc/pfree.  I'm
> going to create GEOS and PostGIS experimental branches, and commit my
> work there, so that folks with other platforms can try it out.
>
> On Tue, Sep 30, 2008 at 9:55 AM, Chris Hodgson <chodgson@refractions.net> wrote:
>> Very nice Paul.
>>
>> Those two std allocs are a bit scary... I had a feeling we might have some
>> of those, and they seem worse than I had initially thought. The problem is
>> that either they are attempted to be freed, using the provided free function
>> - and who knows what error that could bring - or they are not, and we're
>> leaking. If they are only created once at load of the DLL and never actually
>> freed, but simply go away when the DLL is unloaded, then I guess we're ok.
>> But it seems likely to me that the C++ runtime would be trying to free them
>> using your own provided free function... can we do a test where we provide
>> pfree and see what it does with that? ie. if you try to pfree() a regularly
>> malloc()'d segment of memory, does it actually free it without raising any
>> errors?
>>
>> It would be really nice to know what those things that are getting created
>> earlier are, too...
>> but I guess it all just comes down to, does it work in postgres and not
>> leak?
>>
>> Chris
>>
>> Paul Ramsey wrote:
>>>
>>> It turns out it is a quite small modification, and works pretty well:
>>>
>>> http://trac.osgeo.org/geos/attachment/ticket/208/memdiff.patch
>>>
>>> My patch adds the ability to override, and also has some printfs to
>>> show what is happening. When the overridden allocator is called
>>> without the runtime callback set, it prints "std alloc" and when it's
>>> called with the callback set, it prints "geos alloc".
>>>
>>> Here's a little program that exercises it:
>>>
>>> #include <stdio.h>
>>> #include "/usr/local/include/geos_c.h"
>>> #include <stdlib.h>
>>>
>>> int main() {
>>>  printf("main\n");
>>>
>>>  GEOSCoordSequence* cs;
>>>  GEOSGeometry* g;
>>>  int r;
>>>
>>>  printf("initgeos\n");
>>>  initGEOSMemory(malloc, free);
>>>  printf("coordseqcreate\n");
>>>  cs = GEOSCoordSeq_create(1, 2);
>>>  printf("coordseqsetx\n");
>>>  r = GEOSCoordSeq_setX(cs, 0, 1.0);
>>>  printf("coordseqsety\n");
>>>  r = GEOSCoordSeq_setY(cs, 0, 1.0);
>>>  printf("createpoint\n");
>>>  g = GEOSGeom_createPoint(cs);
>>>
>>>  return 0;
>>>
>>> }
>>>
>>>
>>> And here is the output:
>>>
>>> Heron:tmp pramsey$ ./a.out
>>> std alloc!
>>> std alloc!
>>> main
>>> initgeos
>>> coordseqcreate
>>> geos alloc!
>>> geos alloc!
>>> geos alloc!
>>> coordseqsetx
>>> coordseqsety
>>> createpoint
>>> geos alloc!
>>>
>>> So, something in C++ is doing a couple allocations before we can slip
>>> in and get our other function in place. But we can get all the big
>>> stuff caught no problem.
>>>
>>> P.
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
From pramsey at cleverelephant.ca  Tue Sep 30 19:47:56 2008
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue Sep 30 19:47:59 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809301647s2bb454feh24cd0162cbb073f8@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>
	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>
	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>
	<48E25A00.4060700@refractions.net>
	<30fe546d0809301036n37501c32m6149a3c8bb984b39@mail.gmail.com>
	<30fe546d0809301647s2bb454feh24cd0162cbb073f8@mail.gmail.com>
Message-ID: <30fe546d0809301647q6d95e42haca4b957d93c90bf@mail.gmail.com>

With attachments...

On Tue, Sep 30, 2008 at 4:47 PM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
> Help!
>
> I've attached the modified geos_c.cpp and geos_c.h.in files for geos
> for your perusal. The symptom is this:
>
> - Modified containsPrepared to use initGEOSMemory
> - Run an ST_Contains(g,g,i) prepared example
> - Memory is both allocated and deallocated through the over-ridden
> functions just fine
> - UNTIL
> - The code gets to the point where it has to deallocate a prepared
> geometry and runs GEOSPreparedGeom_destroy()
> - At that point, the deallocation does *not* enter the over-ridden
> new/delete operators, it appears to use default operators, and
> everything goes boom
>
> So,
>
> - the over-ride of new/delete seems to work fine inside the main geos
> library, things get both allocated and freed using palloc and pfree
> - but the delete inside the "extern C {}" block where
> GEOSPreparedGeom_destroy does *not* appear to be over-ridden by our
> cunning trick
>
> Anyone have the secret sauce?
>
> P.
>
> On Tue, Sep 30, 2008 at 10:36 AM, Paul Ramsey <pramsey@cleverelephant.ca> wrote:
>> Time to try this in "real life" with PostgreSQL and palloc/pfree.  I'm
>> going to create GEOS and PostGIS experimental branches, and commit my
>> work there, so that folks with other platforms can try it out.
>>
>> On Tue, Sep 30, 2008 at 9:55 AM, Chris Hodgson <chodgson@refractions.net> wrote:
>>> Very nice Paul.
>>>
>>> Those two std allocs are a bit scary... I had a feeling we might have some
>>> of those, and they seem worse than I had initially thought. The problem is
>>> that either they are attempted to be freed, using the provided free function
>>> - and who knows what error that could bring - or they are not, and we're
>>> leaking. If they are only created once at load of the DLL and never actually
>>> freed, but simply go away when the DLL is unloaded, then I guess we're ok.
>>> But it seems likely to me that the C++ runtime would be trying to free them
>>> using your own provided free function... can we do a test where we provide
>>> pfree and see what it does with that? ie. if you try to pfree() a regularly
>>> malloc()'d segment of memory, does it actually free it without raising any
>>> errors?
>>>
>>> It would be really nice to know what those things that are getting created
>>> earlier are, too...
>>> but I guess it all just comes down to, does it work in postgres and not
>>> leak?
>>>
>>> Chris
>>>
>>> Paul Ramsey wrote:
>>>>
>>>> It turns out it is a quite small modification, and works pretty well:
>>>>
>>>> http://trac.osgeo.org/geos/attachment/ticket/208/memdiff.patch
>>>>
>>>> My patch adds the ability to override, and also has some printfs to
>>>> show what is happening. When the overridden allocator is called
>>>> without the runtime callback set, it prints "std alloc" and when it's
>>>> called with the callback set, it prints "geos alloc".
>>>>
>>>> Here's a little program that exercises it:
>>>>
>>>> #include <stdio.h>
>>>> #include "/usr/local/include/geos_c.h"
>>>> #include <stdlib.h>
>>>>
>>>> int main() {
>>>>  printf("main\n");
>>>>
>>>>  GEOSCoordSequence* cs;
>>>>  GEOSGeometry* g;
>>>>  int r;
>>>>
>>>>  printf("initgeos\n");
>>>>  initGEOSMemory(malloc, free);
>>>>  printf("coordseqcreate\n");
>>>>  cs = GEOSCoordSeq_create(1, 2);
>>>>  printf("coordseqsetx\n");
>>>>  r = GEOSCoordSeq_setX(cs, 0, 1.0);
>>>>  printf("coordseqsety\n");
>>>>  r = GEOSCoordSeq_setY(cs, 0, 1.0);
>>>>  printf("createpoint\n");
>>>>  g = GEOSGeom_createPoint(cs);
>>>>
>>>>  return 0;
>>>>
>>>> }
>>>>
>>>>
>>>> And here is the output:
>>>>
>>>> Heron:tmp pramsey$ ./a.out
>>>> std alloc!
>>>> std alloc!
>>>> main
>>>> initgeos
>>>> coordseqcreate
>>>> geos alloc!
>>>> geos alloc!
>>>> geos alloc!
>>>> coordseqsetx
>>>> coordseqsety
>>>> createpoint
>>>> geos alloc!
>>>>
>>>> So, something in C++ is doing a couple allocations before we can slip
>>>> in and get our other function in place. But we can get all the big
>>>> stuff caught no problem.
>>>>
>>>> P.
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@lists.osgeo.org
>>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/geos-devel
>>>
>>
>
-------------- next part --------------
/************************************************************************
 *
 * $Id: geos_c.cpp 2195 2008-09-29 19:24:06Z pramsey $
 *
 * C-Wrapper for GEOS library
 *
 * Copyright (C) 2005-2006 Refractions Research Inc.
 *
 * This is free software; you can redistribute and/or modify it under
 * the terms of the GNU Lesser General Public Licence as published
 * by the Free Software Foundation. 
 * See the COPYING file for more information.
 *
 * Author: Sandro Santilli <strk@refractions.net>
 *
 ***********************************************************************/

#include <geos/geom/Geometry.h> 
#include <geos/geom/prep/PreparedGeometry.h> 
#include <geos/geom/prep/PreparedGeometryFactory.h> 
#include <geos/geom/GeometryCollection.h> 
#include <geos/geom/Polygon.h> 
#include <geos/geom/Point.h> 
#include <geos/geom/MultiPoint.h> 
#include <geos/geom/MultiLineString.h> 
#include <geos/geom/MultiPolygon.h> 
#include <geos/geom/LinearRing.h> 
#include <geos/geom/LineString.h> 
#include <geos/geom/PrecisionModel.h> 
#include <geos/geom/GeometryFactory.h> 
#include <geos/geom/CoordinateSequenceFactory.h> 
#include <geos/geom/IntersectionMatrix.h> 
#include <geos/io/WKTReader.h>
#include <geos/io/WKBReader.h>
#include <geos/io/WKTWriter.h>
#include <geos/io/WKBWriter.h>
#include <geos/io/CLocalizer.h>
#include <geos/simplify/DouglasPeuckerSimplifier.h>
#include <geos/simplify/TopologyPreservingSimplifier.h>
#include <geos/operation/valid/IsValidOp.h>
#include <geos/operation/polygonize/Polygonizer.h>
#include <geos/operation/linemerge/LineMerger.h>
#include <geos/operation/overlay/OverlayOp.h>
#include <geos/geom/BinaryOp.h>
#include <geos/version.h> 

// This should go away
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
//#include <memory>

// Some extra magic to make type declarations in geos_c.h work - for cross-checking of types in header.
#define GEOSGeometry geos::geom::Geometry
#define GEOSPreparedGeometry geos::geom::prep::PreparedGeometry
#define GEOSCoordSequence geos::geom::CoordinateSequence
#define GEOSWKTReader_t geos::io::WKTReader
#define GEOSWKTWriter_t geos::io::WKTWriter
#define GEOSWKBReader_t geos::io::WKBReader
#define GEOSWKBWriter_t geos::io::WKBWriter

#include "geos_c.h"

/// Define this if you want operations triggering Exceptions to
/// be printed (will use the NOTIFY channel - only implemented for GEOSUnion so far)
///
#undef VERBOSE_EXCEPTIONS

#if defined(_MSC_VER)
#  define GEOS_DLL     __declspec(dllexport)
#else
#  define GEOS_DLL
#endif

// import the most frequently used definitions globally
using geos::geom::Geometry;
using geos::geom::LineString;
using geos::geom::Polygon;
using geos::geom::CoordinateSequence;
using geos::geom::GeometryFactory;

using geos::io::WKTReader;
using geos::io::WKTWriter;
using geos::io::WKBReader;
using geos::io::WKBWriter;
using geos::io::CLocalizer;

using geos::operation::overlay::OverlayOp;
using geos::operation::overlay::overlayOp;

typedef std::auto_ptr<Geometry> GeomAutoPtr;

//## PROTOTYPES #############################################

extern "C" const char GEOS_DLL *GEOSjtsport();
extern "C" char GEOS_DLL *GEOSasText(Geometry *g1);

//## GLOBALS ################################################

// NOTE: SRID will have to be changed after geometry creation
static const GeometryFactory *geomFactory = 
	GeometryFactory::getDefaultInstance();

static GEOSMessageHandler NOTICE_MESSAGE;
static GEOSMessageHandler ERROR_MESSAGE;
static int WKBOutputDims = 2;
static int WKBByteOrder = getMachineByteOrder();

/**********************************************************************
**
**  Over-ride new/delete to allow library users to provide their
**  own memory management via callbacks in GEOS_MALLOC and
**  GEOS_FREE. Used primarily by PostGIS to bring GEOS memory
**  management into the PgSQL palloc/pfree memory pools. 
**
**********************************************************************/

#include <exception> // for std::bad_alloc
#include <new>

static GEOSMemoryAllocator GEOS_MALLOC;
static GEOSMemoryDeallocator GEOS_FREE;

void* operator new (size_t size) throw (std::bad_alloc)
{
  void *p;
  if(GEOS_MALLOC) {
    printf("geos alloc... ");
    p=GEOS_MALLOC(size);
    printf("done!\n");
  } 
  else {
    printf("std alloc... ");
    p=malloc(size); 
    printf("done!\n");
  }
  if (p==0) { // did malloc succeed?
    throw std::bad_alloc(); // ANSI/ISO compliant behavior
  }
  return p;
}

void operator delete (void *p) throw()
{
  if(GEOS_FREE) {
    printf("geos free... ");
    GEOS_FREE(p);
    printf("done!\n");
  } 
  else {
    printf("std free... ");
    free(p); 
    printf("done!\n");
  }
}

/*********************************************************************/


extern "C" {

void
initGEOS (GEOSMessageHandler nf, GEOSMessageHandler ef)
{
	NOTICE_MESSAGE = nf;
	ERROR_MESSAGE = ef;
}

void
initGEOSMemory (GEOSMemoryAllocator ma, GEOSMemoryDeallocator da)
{
	GEOS_FREE = da;
	GEOS_MALLOC = ma;
}

void
finishGEOS ()
{
	// Nothing to do
	//delete geomFactory;
}

//-----------------------------------------------------------
// relate()-related functions
//  return 0 = false, 1 = true, 2 = error occured
//-----------------------------------------------------------

char
GEOSDisjoint(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->disjoint(g2);
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSTouches(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result =  g1->touches(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSIntersects(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->intersects(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSCrosses(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->crosses(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSWithin(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->within(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

// call g1->contains(g2)
// returns 0 = false
//         1 = true
//         2 = error was trapped
char
GEOSContains(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->contains(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSOverlaps(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->overlaps(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}


//-------------------------------------------------------------------
// low-level relate functions
//------------------------------------------------------------------

char
GEOSRelatePattern(const Geometry *g1, const Geometry *g2, const char *pat)
{
	try {
		bool result;
		std::string s = pat;
		result = g1->relate(g2,s);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char *
GEOSRelate(const Geometry *g1, const Geometry *g2)
{
	using geos::geom::IntersectionMatrix;
	try {

		IntersectionMatrix *im = g1->relate(g2);
		if (im == NULL)
				return NULL;
		
        std::string s(im->toString());
		char *result = NULL;
		result = (char*) std::malloc( s.length() + 1);
		std::strcpy(result, s.c_str() );
		delete im;

		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    
    return NULL;
}



//-----------------------------------------------------------------
// isValid
//-----------------------------------------------------------------


char
GEOSisValid(const Geometry *g1)
{
	using geos::operation::valid::IsValidOp;
	using geos::operation::valid::TopologyValidationError;
	IsValidOp ivo(g1);
	bool result;
	try {
		result = ivo.isValid();
		if ( result == 0 )
		{
			TopologyValidationError *err = ivo.getValidationError();
			if ( err ) {
				std::string errmsg = err->toString();
				NOTICE_MESSAGE("%s", errmsg.c_str());
			}
		}
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}

}


//-----------------------------------------------------------------
// general purpose
//-----------------------------------------------------------------

char
GEOSEquals(const Geometry *g1, const Geometry *g2)
{
	try {
		bool result;
		result = g1->equals(g2);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSEqualsExact(const Geometry *g1, const Geometry *g2, double tolerance)
{
	try {
		bool result;
		result = g1->equalsExact(g2, tolerance);
		return result;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

int
GEOSDistance(const Geometry *g1, const Geometry *g2, double *dist)
{
	try {
		*dist = g1->distance(g2);
		return 1;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

int
GEOSArea(const Geometry *g, double *area)
{
	try {
		*area = g->getArea();
		return 1;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

int
GEOSLength(const Geometry *g, double *length)
{
	try {
		*length = g->getLength();
		return 1;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

Geometry *
GEOSGeomFromWKT(const char *wkt)
{
    CLocalizer clocale;
	try
	{
		WKTReader r(geomFactory);
		const std::string wktstring = std::string(wkt);
		Geometry *g = r.read(wktstring);
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

char *
GEOSGeomToWKT(const Geometry *g1)
{
    CLocalizer clocale;
	try
	{
		std::string s = g1->toString();
		char *result;
		result = (char*) std::malloc( s.length() + 1);
		std::strcpy(result, s.c_str() );
        return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

// Remember to free the result!
unsigned char *
GEOSGeomToWKB_buf(const Geometry *g, size_t *size)
{
	using geos::io::WKBWriter;
	try
	{
		int byteOrder = (int) WKBByteOrder;
		WKBWriter w(WKBOutputDims, byteOrder);
		std::ostringstream s(std::ios_base::binary);
		w.write(*g, s);
		std::string wkbstring = s.str();
		size_t len = wkbstring.length();

		unsigned char *result;
		result = (unsigned char*) std::malloc(len);
        std::memcpy(result, wkbstring.c_str(), len);
		*size = len;
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeomFromWKB_buf(const unsigned char *wkb, size_t size)
{
	using geos::io::WKBReader;
	try
	{
		std::string wkbstring = std::string((const char*)wkb, size); // make it binary !
		WKBReader r(*geomFactory);
		std::istringstream s(std::ios_base::binary);
		s.str(wkbstring);

		s.seekg(0, std::ios::beg); // rewind reader pointer
		Geometry *g = r.read(s);
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

/* Read/write wkb hex values.  Returned geometries are
   owned by the caller.*/
unsigned char *
GEOSGeomToHEX_buf(const Geometry *g, size_t *size)
{
	using geos::io::WKBWriter;
	try
	{
        int byteOrder = (int) WKBByteOrder;
		WKBWriter w(WKBOutputDims, byteOrder);
		std::ostringstream s(std::ios_base::binary);
		w.writeHEX(*g, s);
		std::string hexstring = s.str();
		size_t len = hexstring.length();

		char *result;
		result = (char*) std::malloc(len);
        std::memcpy(result, hexstring.c_str(), len);
		*size = len;
		return (unsigned char*) result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeomFromHEX_buf(const unsigned char *hex, size_t size)
{
	using geos::io::WKBReader;
	try
	{
		std::string hexstring = std::string((const char*)hex, size); 
		WKBReader r(*geomFactory);
		std::istringstream s(std::ios_base::binary);
		s.str(hexstring);

		s.seekg(0, std::ios::beg); // rewind reader pointer
		Geometry *g = r.readHEX(s);
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

char
GEOSisEmpty(const Geometry *g1)
{
	try
	{
		return g1->isEmpty();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSisSimple(const Geometry *g1)
{
	try
	{
		return g1->isSimple();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSisRing(const Geometry *g)
{
	try
	{
		const LineString *ls = dynamic_cast<const LineString *>(g);
		if ( ls ) {
			return (ls->isRing());
		} else {
			return 0;
		}
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}



//free the result of this
char *
GEOSGeomType(const Geometry *g1)
{
	try
	{
		std::string s = g1->getGeometryType();

		char *result;
		result = (char*) std::malloc( s.length() + 1);
		std::strcpy(result, s.c_str() );
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

// Return postgis geometry type index
int
GEOSGeomTypeId(const Geometry *g1)
{
	try
	{
		return g1->getGeometryTypeId();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return -1;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return -1;
	}
}




//-------------------------------------------------------------------
// GEOS functions that return geometries
//-------------------------------------------------------------------

Geometry *
GEOSEnvelope(const Geometry *g1)
{
	try
	{
		Geometry *g3 = g1->getEnvelope();
		return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSIntersection(const Geometry *g1, const Geometry *g2)
{
	try
	{
		GeomAutoPtr g3 = BinaryOp(g1, g2, overlayOp(OverlayOp::opINTERSECTION));
		return g3.release();
		//Geometry *g3 = g1->intersection(g2);
		//return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSBuffer(const Geometry *g1, double width, int quadrantsegments)
{
	try
	{
		Geometry *g3 = g1->buffer(width, quadrantsegments);
		return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSConvexHull(const Geometry *g1)
{
	try
	{
		Geometry *g3 = g1->convexHull();
		return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSDifference(const Geometry *g1, const Geometry *g2)
{
	try
	{
		GeomAutoPtr g3 = BinaryOp(g1, g2, overlayOp(OverlayOp::opDIFFERENCE));
		return g3.release();
		//Geometry *g3 = g1->difference(g2);
		//return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSBoundary(const Geometry *g1)
{
	try
	{
		Geometry *g3 = g1->getBoundary();
		return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSSymDifference(const Geometry *g1, const Geometry *g2)
{
	try
	{
		GeomAutoPtr g3 = BinaryOp(g1, g2, overlayOp(OverlayOp::opSYMDIFFERENCE));
		return g3.release();
		//Geometry *g3 = g1->symDifference(g2);
		//return g3;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSUnion(const Geometry *g1, const Geometry *g2)
{
	try
	{
		GeomAutoPtr g3 = BinaryOp(g1, g2, overlayOp(OverlayOp::opUNION));
		return g3.release();
		//Geometry *g3 = g1->Union(g2);
		//return g3;
	}
	catch (const std::exception &e)
	{
#if VERBOSE_EXCEPTIONS
		std::ostringstream s; 
		s << "Exception on GEOSUnion with following inputs:" << std::endl;
		s << "A: "<<g1->toString() << std::endl;
		s << "B: "<<g2->toString() << std::endl;
		NOTICE_MESSAGE("%s", s.str().c_str());
#endif // VERBOSE_EXCEPTIONS
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}


Geometry *
GEOSPointOnSurface(const Geometry *g1)
{
	try
	{
		Geometry *ret = g1->getInteriorPoint();
		if ( ! ret ) return geomFactory->createGeometryCollection();
		return ret;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}





//-------------------------------------------------------------------
// memory management functions
//------------------------------------------------------------------


void
GEOSGeom_destroy(Geometry *a)
{
	try{
		delete a;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}

void
GEOSSetSRID(Geometry *g, int SRID)
{
	g->setSRID(SRID);
}

/*
void
GEOSdeleteChar(char *a)
{
	try{
	   free(a);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}
*/


int
GEOSGetNumCoordinates(const Geometry *g1)
{
	try{
		return g1->getNumPoints();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return -1;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return -1;
	}
}

/*
 * Return -1 on exception, 0 otherwise. 
 * Converts Geometry to normal form (or canonical form).
 */
int
GEOSNormalize(Geometry *g1)
{
	try{
		g1->normalize();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return -1;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return -1;
	}
    return 0;
}

int
GEOSGetNumInteriorRings(const Geometry *g1)
{
	try{
		const Polygon *p = dynamic_cast<const Polygon *>(g1);
                if ( ! p )
                {
                        ERROR_MESSAGE("Argument is not a Polygon");
                        return -1;
                }
		return p->getNumInteriorRing();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return -1;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return -1;
	}
}


// returns -1 on error and 1 for non-multi geometries
int
GEOSGetNumGeometries(const Geometry *g1)
{
	try{
		return g1->getNumGeometries();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return -1;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return -1;
	}
}


/*
 * Call only on GEOMETRYCOLLECTION or MULTI*.
 * Return a pointer to the internal Geometry.
 */
const Geometry *
GEOSGetGeometryN(const Geometry *g1, int n)
{
	using geos::geom::GeometryCollection;
	try{
		const GeometryCollection *gc = dynamic_cast<const GeometryCollection *>(g1);
		if ( ! gc )
		{
			ERROR_MESSAGE("Argument is not a GeometryCollection");
			return NULL;
		}
		return gc->getGeometryN(n);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}


/*
 * Call only on polygon
 * Return a copy of the internal Geometry.
 */
const Geometry *
GEOSGetExteriorRing(const Geometry *g1)
{
	try{
		const Polygon *p = dynamic_cast<const Polygon *>(g1);
		if ( ! p ) 
		{
			ERROR_MESSAGE("Invalid argument (must be a Polygon)");
			return NULL;
		}
		return p->getExteriorRing();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

/*
 * Call only on polygon
 * Return a pointer to internal storage, do not destroy it.
 */
const Geometry *
GEOSGetInteriorRingN(const Geometry *g1, int n)
{
	try{
		const Polygon *p = dynamic_cast<const Polygon *>(g1);
		if ( ! p ) 
		{
			ERROR_MESSAGE("Invalid argument (must be a Polygon)");
			return NULL;
		}
		return p->getInteriorRingN(n);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGetCentroid(const Geometry *g)
{
	try{
		Geometry *ret = g->getCentroid();
		if ( ! ret ) return geomFactory->createGeometryCollection();
		return ret;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeom_createCollection(int type, Geometry **geoms, unsigned int ngeoms)
{
#ifdef GEOS_DEBUG
	char buf[256];
	sprintf(buf, "PostGIS2GEOS_collection: requested type %d, ngeoms: %d",
			type, ngeoms);
	NOTICE_MESSAGE("%s", buf);// TODO: Can NOTICE_MESSAGE format that directly? 
#endif

	try
	{
		Geometry *g;
		std::vector<Geometry *> *vgeoms = new std::vector<Geometry *>(geoms, geoms+ngeoms);

		switch (type)
		{
			case GEOS_GEOMETRYCOLLECTION:
				g = geomFactory->createGeometryCollection(vgeoms);
				break;
			case GEOS_MULTIPOINT:
				g = geomFactory->createMultiPoint(vgeoms);
				break;
			case GEOS_MULTILINESTRING:
				g = geomFactory->createMultiLineString(vgeoms);
				break;
			case GEOS_MULTIPOLYGON:
				g = geomFactory->createMultiPolygon(vgeoms);
				break;
			default:
				ERROR_MESSAGE("Unsupported type request for PostGIS2GEOS_collection");
				g = NULL;
				
		}
		if (g==NULL) return NULL;
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSPolygonize(const Geometry * const * g, unsigned int ngeoms)
{
	using geos::operation::polygonize::Polygonizer;
	unsigned int i;
	Geometry *out = NULL;

	try{
		// Polygonize
		Polygonizer plgnzr;
		for (i=0; i<ngeoms; i++) plgnzr.add(g[i]);
#if GEOS_DEBUG
	NOTICE_MESSAGE("geometry vector added to polygonizer");
#endif

		std::vector<Polygon *>*polys = plgnzr.getPolygons();

#if GEOS_DEBUG
	NOTICE_MESSAGE("output polygons got");
#endif

		// We need a vector of Geometry pointers, not
		// Polygon pointers.
		// STL vector doesn't allow transparent upcast of this
		// nature, so we explicitly convert.
		// (it's just a waste of processor and memory, btw)
                std::vector<Geometry*> *polyvec =
				new std::vector<Geometry *>(polys->size());
		for (i=0; i<polys->size(); i++) (*polyvec)[i] = (*polys)[i];
		delete polys;

		out = geomFactory->createGeometryCollection(polyvec);
		// the above method takes ownership of the passed
		// vector, so we must *not* delete it
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}

	return out;
}

Geometry *
GEOSPolygonizer_getCutEdges(const Geometry * const * g, unsigned int ngeoms)
{
	using geos::operation::polygonize::Polygonizer;
	unsigned int i;
	Geometry *out = NULL;

	try{
		// Polygonize
		Polygonizer plgnzr;
		for (i=0; i<ngeoms; i++) plgnzr.add(g[i]);
#if GEOS_DEBUG
	NOTICE_MESSAGE("geometry vector added to polygonizer");
#endif

		std::vector<const LineString *>*lines = plgnzr.getCutEdges();

#if GEOS_DEBUG
	NOTICE_MESSAGE("output polygons got");
#endif

		// We need a vector of Geometry pointers, not
		// Polygon pointers.
		// STL vector doesn't allow transparent upcast of this
		// nature, so we explicitly convert.
		// (it's just a waste of processor and memory, btw)
    std::vector<Geometry*> *linevec =
				new std::vector<Geometry *>(lines->size());
		for (i=0; i<lines->size(); i++) (*linevec)[i] = (*lines)[i]->clone();

		out = geomFactory->createGeometryCollection(linevec);
		// the above method takes ownership of the passed
		// vector, so we must *not* delete it
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}

	return out;
}

Geometry *
GEOSLineMerge(const Geometry *g)
{
		using geos::operation::linemerge::LineMerger;
        unsigned int i;
        Geometry *out = NULL;

        try{
                // LineMerge
                LineMerger lmrgr;

                lmrgr.add(g);

                std::vector<LineString *>*lines = lmrgr.getMergedLineStrings();

#if GEOS_DEBUG
        NOTICE_MESSAGE("output lines got");
#endif

                std::vector<Geometry *>*geoms = new std::vector<Geometry *>(lines->size());
                for (i=0; i<lines->size(); i++) (*geoms)[i] = (*lines)[i];
                delete lines;
                out = geomFactory->buildGeometry(geoms);
                //out = geomFactory->createGeometryCollection(geoms);
        }
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}

        return out;
}

int
GEOSGetSRID(const Geometry *g1)
{
	try{
		return g1->getSRID();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

const char *
GEOSversion()
{
	//static string version = GEOS_CAPI_VERSION;
	return GEOS_CAPI_VERSION;
}

const char *
GEOSjtsport()
{
	//string version = jtsport();
	//char *res = strdup(version.c_str());
	//return res;
	return GEOS_JTS_PORT;
}


char 
GEOSHasZ(const Geometry *g)
{
	if ( g->isEmpty() ) return false;
	double az = g->getCoordinate()->z;
	//ERROR_MESSAGE("ZCoord: %g", az);
	return FINITE(az);
}

int
GEOS_getWKBOutputDims()
{
    return WKBOutputDims;
}

int
GEOS_setWKBOutputDims(int newdims)
{
	if ( newdims < 2 || newdims > 3 )
		ERROR_MESSAGE("WKB output dimensions out of range 2..3");
	int olddims = WKBOutputDims;
	WKBOutputDims = newdims;
	return olddims;
}

int
GEOS_getWKBByteOrder()
{
	return WKBByteOrder;
}

int
GEOS_setWKBByteOrder(int byteOrder)
{
	int oldByteOrder = WKBByteOrder;
	WKBByteOrder = byteOrder;
	return oldByteOrder;
}


CoordinateSequence *
GEOSCoordSeq_create(unsigned int size, unsigned int dims)
{
	try {
		return geomFactory->getCoordinateSequenceFactory()->create(size, dims);
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

int
GEOSCoordSeq_setOrdinate(CoordinateSequence *s, unsigned int idx,
	unsigned int dim, double val)
{
	try {
		s->setOrdinate(static_cast<int>(idx),
			static_cast<int>(dim), val);
		return 1;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

int
GEOSCoordSeq_setX(CoordinateSequence *s, unsigned int idx, double val)
{
	return GEOSCoordSeq_setOrdinate(s, idx, 0, val);
}

int
GEOSCoordSeq_setY(CoordinateSequence *s, unsigned int idx, double val)
{
	return GEOSCoordSeq_setOrdinate(s, idx, 1, val);
}

int
GEOSCoordSeq_setZ(CoordinateSequence *s, unsigned int idx, double val)
{
	return GEOSCoordSeq_setOrdinate(s, idx, 2, val);
}

CoordinateSequence *
GEOSCoordSeq_clone(const CoordinateSequence *s)
{
	try { return s->clone(); }
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

int
GEOSCoordSeq_getOrdinate(const CoordinateSequence *s, unsigned int idx,
	unsigned int dim, double *val)
{
	try {
		double d = s->getOrdinate(static_cast<int>(idx),
			static_cast<int>(dim));
		*val = d;
		return 1;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

int
GEOSCoordSeq_getX(const CoordinateSequence *s, unsigned int idx, double *val)
{
	return GEOSCoordSeq_getOrdinate(s, idx, 0, val);
}

int
GEOSCoordSeq_getY(const CoordinateSequence *s, unsigned int idx, double *val)
{
	return GEOSCoordSeq_getOrdinate(s, idx, 1, val);
}

int
GEOSCoordSeq_getZ(const CoordinateSequence *s, unsigned int idx, double *val)
{
	return GEOSCoordSeq_getOrdinate(s, idx, 2, val);
}

int
GEOSCoordSeq_getSize(const CoordinateSequence *s, unsigned int *size)
{
	try {
		int sz = s->getSize();
		*size = static_cast<unsigned int>(sz);
		return 1;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

int
GEOSCoordSeq_getDimensions(const CoordinateSequence *s, unsigned int *dims)
{
	try {
		unsigned int dm = s->getDimension();
		*dims = dm;
		return 1;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

void
GEOSCoordSeq_destroy(CoordinateSequence *s)
{
	try{
		delete s;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}

const CoordinateSequence *
GEOSGeom_getCoordSeq(const Geometry *g)
{
        using geos::geom::Point;
	try
	{
		const LineString *ls = dynamic_cast<const LineString *>(g);
		if ( ls )
		{
			return ls->getCoordinatesRO();
		}
		const Point *p = dynamic_cast<const Point *>(g);
		if ( p ) 
		{
			return p->getCoordinatesRO();
		}
		ERROR_MESSAGE("Geometry must be a Point or LineString");
		return NULL;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeom_createPoint(CoordinateSequence *cs)
{
	try { return geomFactory->createPoint(cs); }
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeom_createLinearRing(CoordinateSequence *cs)
{
	try { return geomFactory->createLinearRing(cs); }
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeom_createLineString(CoordinateSequence *cs)
{
	try { return geomFactory->createLineString(cs); }
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeom_createPolygon(Geometry *shell, Geometry **holes, unsigned int nholes)
{
        using geos::geom::LinearRing;
	try
	{
		std::vector<Geometry *> *vholes = new std::vector<Geometry *>(holes, holes+nholes);
		LinearRing *nshell = dynamic_cast<LinearRing *>(shell);
		if ( ! nshell )
		{
			ERROR_MESSAGE("Shell is not a LinearRing");
			return NULL;
		}
		return geomFactory->createPolygon(nshell, vholes);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSGeom_clone(const Geometry *g)
{
	try { return g->clone(); }
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

int
GEOSGeom_getDimensions(const Geometry *g)
{
        using geos::geom::GeometryCollection;
        using geos::geom::Point;
	try {
		const LineString *ls = dynamic_cast<const LineString *>(g);
		if ( ls )
		{
			return ls->getCoordinatesRO()->getDimension();
		}

		const Point *p = dynamic_cast<const Point *>(g);
		if ( p )
		{
			return p->getCoordinatesRO()->getDimension();
		}

		const Polygon *poly = dynamic_cast<const Polygon *>(g);
		if ( poly )
		{
			return GEOSGeom_getDimensions(poly->getExteriorRing());
		}


		const GeometryCollection *coll =
			dynamic_cast<const GeometryCollection *>(g);
		if ( coll )
		{
			if ( coll->isEmpty() ) return 0;
			return GEOSGeom_getDimensions(coll->getGeometryN(0));
		}

		ERROR_MESSAGE("Unknown geometry type");
		return 0;
	}

	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 0;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 0;
	}
}

Geometry *
GEOSSimplify(const Geometry *g1, double tolerance)
{
	using namespace geos::simplify;

	try
	{
		Geometry::AutoPtr g(DouglasPeuckerSimplifier::simplify(
				g1, tolerance));
		return g.release();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

Geometry *
GEOSTopologyPreserveSimplify(const Geometry *g1, double tolerance)
{
	using namespace geos::simplify;

	try
	{
		Geometry::AutoPtr g(TopologyPreservingSimplifier::simplify(
				g1, tolerance));
		return g.release();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}


/* WKT Reader */
WKTReader *
GEOSWKTReader_create()
{
	using geos::io::WKTReader;
	try
	{
		return new WKTReader(geomFactory);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

void
GEOSWKTReader_destroy(WKTReader *reader)
{
	try
	{
		delete reader;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}


Geometry*
GEOSWKTReader_read(WKTReader *reader, const char *wkt)
{
    CLocalizer clocale;
	try
	{
		const std::string wktstring = std::string(wkt);
		Geometry *g = reader->read(wktstring);
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

/* WKT Writer */
WKTWriter *
GEOSWKTWriter_create()
{
	using geos::io::WKTWriter;
	try
	{
		return new WKTWriter();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return NULL;
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

void
GEOSWKTWriter_destroy(WKTWriter *Writer)
{
	try
	{
		delete Writer;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}


char*
GEOSWKTWriter_write(WKTWriter *writer, const Geometry *geom)
{
    CLocalizer clocale;
	try
	{
		std::string s = writer->write(geom);
		char *result = NULL;
		result = (char*) std::malloc( s.length() + 1);
		std::strcpy(result, s.c_str() );
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    
    return NULL;
}

/* WKB Reader */
WKBReader *
GEOSWKBReader_create()
{
	using geos::io::WKBReader;
	try
	{
		return new WKBReader(*geomFactory);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    
    return NULL;
}

void
GEOSWKBReader_destroy(WKBReader *reader)
{
	try
	{
		delete reader;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}


Geometry*
GEOSWKBReader_read(WKBReader *reader, const unsigned char *wkb, size_t size)
{
	try
	{
		std::string wkbstring = std::string((const char*)wkb, size); // make it binary !
		std::istringstream s(std::ios_base::binary);
		s.str(wkbstring);

		s.seekg(0, std::ios::beg); // rewind reader pointer
		Geometry *g = reader->read(s);
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    
    return NULL;
}

Geometry*
GEOSWKBReader_readHEX(WKBReader *reader, const unsigned char *hex, size_t size)
{
	try
	{
		std::string hexstring = std::string((const char*)hex, size); 
		std::istringstream s(std::ios_base::binary);
		s.str(hexstring);

		s.seekg(0, std::ios::beg); // rewind reader pointer
		Geometry *g = reader->readHEX(s);
		return g;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    
    return NULL;
}

/* WKB Writer */
WKBWriter *
GEOSWKBWriter_create()
{
	using geos::io::WKBWriter;
	try
	{
		return new WKBWriter();
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    
    return NULL;
}

void
GEOSWKBWriter_destroy(WKBWriter *Writer)
{
	try
	{
		delete Writer;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}


/* The owner owns the result */
unsigned char*
GEOSWKBWriter_write(WKBWriter *writer, const Geometry *geom, size_t *size)
{
	try
	{
		std::ostringstream s(std::ios_base::binary);
		writer->write(*geom, s);
		std::string wkbstring = s.str();
		size_t len = wkbstring.length();

		unsigned char *result = NULL;
		result = (unsigned char*) std::malloc(len);
        std::memcpy(result, wkbstring.c_str(), len);
		*size = len;
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    return NULL;
}

/* The owner owns the result */
unsigned char*
GEOSWKBWriter_writeHEX(WKBWriter *writer, const Geometry *geom, size_t *size)
{
	try
	{
		std::ostringstream s(std::ios_base::binary);
		writer->writeHEX(*geom, s);
		std::string wkbstring = s.str();
		const size_t len = wkbstring.length();

		unsigned char *result = NULL;
		result = (unsigned char*) std::malloc(len);
        std::memcpy(result, wkbstring.c_str(), len);
		*size = len;
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    return NULL;
}

int
GEOSWKBWriter_getOutputDimension(const GEOSWKBWriter* writer)
{
	try
	{
		return writer->getOutputDimension();
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    return 0;
}

void
GEOSWKBWriter_setOutputDimension(GEOSWKBWriter* writer, int newDimension)
{
	try
	{
		return writer->setOutputDimension(newDimension);
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}

int
GEOSWKBWriter_getByteOrder(const GEOSWKBWriter* writer)
{
	try
	{
		return writer->getByteOrder();
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
    return 0;
}

void
GEOSWKBWriter_setByteOrder(GEOSWKBWriter* writer, int newByteOrder)
{
	try
	{
		return writer->setByteOrder(newByteOrder);
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}

char
GEOSWKBWriter_getIncludeSRID(const GEOSWKBWriter* writer)
{
	try
	{
		return writer->getIncludeSRID();
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return NULL;
	}
}

void
GEOSWKBWriter_setIncludeSRID(GEOSWKBWriter* writer, const char newIncludeSRID)
{
	try
	{
		writer->setIncludeSRID(newIncludeSRID);
	}

	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}


//-----------------------------------------------------------------
// Prepared Geometry 
//-----------------------------------------------------------------

const geos::geom::prep::PreparedGeometry*
GEOSPrepare(const Geometry *g)
{
    const geos::geom::prep::PreparedGeometry* prep = NULL;
	
    try
	{
		prep = geos::geom::prep::PreparedGeometryFactory::prepare(g);
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
	
    return prep;
}

void
GEOSPreparedGeom_destroy(geos::geom::prep::PreparedGeometry *a)
{
	try
	{
		delete a;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
	}
}

char
GEOSPreparedContains(const geos::geom::prep::PreparedGeometry *pg1, const Geometry *g2)
{
	try 
	{
		bool result;
		result = pg1->contains(g2);
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSPreparedContainsProperly(const geos::geom::prep::PreparedGeometry *pg1, const Geometry *g2)
{
	try 
	{
		bool result;
		result = pg1->containsProperly(g2);
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSPreparedCovers(const geos::geom::prep::PreparedGeometry *pg1, const Geometry *g2)
{
	try 
	{
		bool result;
		result = pg1->covers(g2);
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

char
GEOSPreparedIntersects(const geos::geom::prep::PreparedGeometry *pg1, const Geometry *g2)
{
	try 
	{
		bool result;
		result = pg1->intersects(g2);
		return result;
	}
	catch (const std::exception &e)
	{
		ERROR_MESSAGE("%s", e.what());
		return 2;
	}
	catch (...)
	{
		ERROR_MESSAGE("Unknown exception thrown");
		return 2;
	}
}

} //extern "C"
-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos_c.h.in
Type: application/octet-stream
Size: 18214 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20080930/ece634c8/geos_c.h-0001.obj
From chodgson at refractions.net  Tue Sep 30 20:38:15 2008
From: chodgson at refractions.net (Chris Hodgson)
Date: Tue Sep 30 20:37:35 2008
Subject: [geos-devel] An Immodest Proposal
In-Reply-To: <30fe546d0809301647s2bb454feh24cd0162cbb073f8@mail.gmail.com>
References: <30fe546d0809291342o1d69add8m4ce9e2ef1d861234@mail.gmail.com>	<8B319E5A30FF4A48BE7EEAAF609DB233021F3444@COMAIL01.digitalglobe.com>	<30fe546d0809292105j11daf52x7f3ce4350f0b3aef@mail.gmail.com>	<48E25A00.4060700@refractions.net>	<30fe546d0809301036n37501c32m6149a3c8bb984b39@mail.gmail.com>
	<30fe546d0809301647s2bb454feh24cd0162cbb073f8@mail.gmail.com>
Message-ID: <48E2C677.3090907@refractions.net>

Do all of the "new std:vector<Geometry *>" calls use the overridden new?

If not, then I think the problem is that the code inside the extern C{} 
doesn't understand that we have overridden new and delete. It MIGHT be 
as easy (and clumsy) as adding two methods geosNew and geosDelete, 
outside of the extern C {} block (which in turn call the overridden new 
and delete), and calling those from within the extern C{} instead of 
calling the raw new/delete which we are overridden.

I would try this myself except I don't have the development environment 
setup yet...

Chris

Paul Ramsey wrote:
> Help!
>
> I've attached the modified geos_c.cpp and geos_c.h.in files for geos
> for your perusal. The symptom is this:
>
> - Modified containsPrepared to use initGEOSMemory
> - Run an ST_Contains(g,g,i) prepared example
> - Memory is both allocated and deallocated through the over-ridden
> functions just fine
> - UNTIL
> - The code gets to the point where it has to deallocate a prepared
> geometry and runs GEOSPreparedGeom_destroy()
> - At that point, the deallocation does *not* enter the over-ridden
> new/delete operators, it appears to use default operators, and
> everything goes boom
>
> So,
>
> - the over-ride of new/delete seems to work fine inside the main geos
> library, things get both allocated and freed using palloc and pfree
> - but the delete inside the "extern C {}" block where
> GEOSPreparedGeom_destroy does *not* appear to be over-ridden by our
> cunning trick
>
> Anyone have the secret sauce?
>
> P.
>
>   

