From geos-trac at osgeo.org  Mon Jun  9 07:54:15 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 09 Jun 2014 14:54:15 -0000
Subject: [geos-devel] [GEOS] #693: Buffer operation uses excessive amount of
	memory
Message-ID: <046.8e79d0cce1c19cd916cac1aacb9e615f@osgeo.org>

#693: Buffer operation uses excessive amount of memory
------------------------+---------------------------------------------------
 Reporter:  wonder      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 When doing a buffer operation on a more complex linestring, the memory
 consumption rises to many hundreds of megabytes, eventually exhausting RAM
 and locking up the system completely.

 SAGA builds the same buffer with very low memory usage.

 Please see the attached example code for a reproducible example.

 Originally reported in QGIS: http://hub.qgis.org/issues/10356

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/693>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jun  9 08:13:18 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 09 Jun 2014 15:13:18 -0000
Subject: [geos-devel] [GEOS] #693: Buffer operation uses excessive
	amount of memory
In-Reply-To: <046.8e79d0cce1c19cd916cac1aacb9e615f@osgeo.org>
References: <046.8e79d0cce1c19cd916cac1aacb9e615f@osgeo.org>
Message-ID: <055.8118c99d7fb0c6897643e53de3898a93@osgeo.org>

#693: Buffer operation uses excessive amount of memory
------------------------+---------------------------------------------------
 Reporter:  wonder      |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.4.3                     
Component:  Default     |      Version:  3.4.2                     
 Severity:  Unassigned  |   Resolution:  duplicate                 
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => duplicate


Comment:

 Duplicate of #344

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/693#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From even.rouault at mines-paris.org  Tue Jun 17 14:07:52 2014
From: even.rouault at mines-paris.org (Even Rouault)
Date: Tue, 17 Jun 2014 23:07:52 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different .h ?
Message-ID: <201406172307.52101.even.rouault@mines-paris.org>

Hi,

Currently it is difficult to ensure that ones code only uses the _r C API. I 
would propose to put the 2 kind of API into 2 separate files.

geos_c_r.h would contain the _r C API only, and the few requirements 
(typedefs, etc...) self sufficient so that libraries/applications using GEOS 
might just include geos_c_r.h.

geos_c.h would include geos_c_r.h, for backward compatibility.

If that sounds good, I'll propose a patch for that.

Even

-- 
Geospatial professional services
http://even.rouault.free.fr/services.html

From even.rouault at mines-paris.org  Wed Jun 18 03:24:48 2014
From: even.rouault at mines-paris.org (Even Rouault)
Date: Wed, 18 Jun 2014 12:24:48 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
	.h ?
In-Reply-To: <201406172307.52101.even.rouault@mines-paris.org>
References: <201406172307.52101.even.rouault@mines-paris.org>
Message-ID: <201406181224.48796.even.rouault@mines-paris.org>

Le mardi 17 juin 2014 23:07:52, Even Rouault a ?crit :
> Hi,
> 
> Currently it is difficult to ensure that ones code only uses the _r C API.
> I would propose to put the 2 kind of API into 2 separate files.
> 
> geos_c_r.h would contain the _r C API only, and the few requirements
> (typedefs, etc...) self sufficient so that libraries/applications using
> GEOS might just include geos_c_r.h.
> 
> geos_c.h would include geos_c_r.h, for backward compatibility.
> 
> If that sounds good, I'll propose a patch for that.

Thinking more about this, for the sake of simplicity of user code of GEOS, I'd 
rather suggest

geos.c.h:

#ifndef USE_ONLY_GEOS_R_API
Here go normal declarations (non XXXXX_r symbols)
#endif

Here go declarations of XXXXX_r  symbols

end of file

So user code would do

#define USE_ONLY_GEOS_R_API
#include <geos_c.h>

That way it would work with both newer GEOS versions and older ones without 
trying to figure out which GEOS version is included. Which requires including 
geos_c.h ....


> 
> Even

-- 
Geospatial professional services
http://even.rouault.free.fr/services.html

From strk at keybit.net  Wed Jun 18 03:52:08 2014
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 18 Jun 2014 12:52:08 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
 .h ?
In-Reply-To: <201406181224.48796.even.rouault@mines-paris.org>
References: <201406172307.52101.even.rouault@mines-paris.org>
	<201406181224.48796.even.rouault@mines-paris.org>
Message-ID: <20140618105208.GA8996@localhost>

On Wed, Jun 18, 2014 at 12:24:48PM +0200, Even Rouault wrote:

> Thinking more about this, for the sake of simplicity of user code of GEOS, I'd 
> rather suggest
> 
> geos.c.h:
> 
> #ifndef USE_ONLY_GEOS_R_API
> Here go normal declarations (non XXXXX_r symbols)
> #endif
> 
> Here go declarations of XXXXX_r  symbols
> 
> end of file
> 
> So user code would do
> 
> #define USE_ONLY_GEOS_R_API
> #include <geos_c.h>
> 
> That way it would work with both newer GEOS versions and older ones without 
> trying to figure out which GEOS version is included. Which requires including 
> geos_c.h ....

I prefer this one, less headers are better for me.
But maybe use a GEOS prefix for the define

As you work on this you might find some surprises (function with no _r suffix
that are indeed needed for the re-entrant api).

--strk;

From pramsey at cleverelephant.ca  Wed Jun 18 08:17:36 2014
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 18 Jun 2014 08:17:36 -0700
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
	.h ?
In-Reply-To: <201406181224.48796.even.rouault@mines-paris.org>
References: <201406172307.52101.even.rouault@mines-paris.org>
	<201406181224.48796.even.rouault@mines-paris.org>
Message-ID: <CACowWR2dVBT2tyy7TO7VmsC3_+dUjUinetguwpaBa1Bt8h3kcw@mail.gmail.com>

On Wed, Jun 18, 2014 at 3:24 AM, Even Rouault
<even.rouault at mines-paris.org> wrote:
> Thinking more about this, for the sake of simplicity of user code of GEOS, I'd
> rather suggest
>
> geos.c.h:
>
> #ifndef USE_ONLY_GEOS_R_API
> Here go normal declarations (non XXXXX_r symbols)
> #endif
>

I like this more. Backwards compatibility++.
Why is having them split out important for you, out of curiousity?
P.

From even.rouault at mines-paris.org  Wed Jun 18 09:32:25 2014
From: even.rouault at mines-paris.org (Even Rouault)
Date: Wed, 18 Jun 2014 18:32:25 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
	.h ?
In-Reply-To: <CACowWR2dVBT2tyy7TO7VmsC3_+dUjUinetguwpaBa1Bt8h3kcw@mail.gmail.com>
References: <201406172307.52101.even.rouault@mines-paris.org>
	<201406181224.48796.even.rouault@mines-paris.org>
	<CACowWR2dVBT2tyy7TO7VmsC3_+dUjUinetguwpaBa1Bt8h3kcw@mail.gmail.com>
Message-ID: <201406181832.25125.even.rouault@mines-paris.org>

Le mercredi 18 juin 2014 17:17:36, Paul Ramsey a ?crit :
> On Wed, Jun 18, 2014 at 3:24 AM, Even Rouault
> 
> <even.rouault at mines-paris.org> wrote:
> > Thinking more about this, for the sake of simplicity of user code of
> > GEOS, I'd rather suggest
> > 
> > geos.c.h:
> > 
> > #ifndef USE_ONLY_GEOS_R_API
> > Here go normal declarations (non XXXXX_r symbols)
> > #endif
> 
> I like this more. Backwards compatibility++.
> Why is having them split out important for you, out of curiousity?
> P.

Hi Paul,

I've hit an integration problem with QGIS using the non _r API and spatialite 
calling (accidently) finishGEOS() when closing a spatialite DB, causing later 
crashes in QGIS.
So I've converted all the QGIS calls to GEOS to the _r API, and to do that the 
easiest solution was to alter geos_c.h to remove the non _r symbols and fix all 
compilation problems. But to make that robust in the length, it would be good 
to be upstreamed.
GDAL and MapServer also now use the _r API for similar reasons. And it would 
also be good to be sure noone reintroduce calls to the non _r API.

Even


> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Geospatial professional services
http://even.rouault.free.fr/services.html

From strk at keybit.net  Wed Jun 18 09:52:58 2014
From: strk at keybit.net (Sandro Santilli)
Date: Wed, 18 Jun 2014 18:52:58 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
 .h ?
In-Reply-To: <201406181832.25125.even.rouault@mines-paris.org>
References: <201406172307.52101.even.rouault@mines-paris.org>
	<201406181224.48796.even.rouault@mines-paris.org>
	<CACowWR2dVBT2tyy7TO7VmsC3_+dUjUinetguwpaBa1Bt8h3kcw@mail.gmail.com>
	<201406181832.25125.even.rouault@mines-paris.org>
Message-ID: <20140618165258.GE26771@localhost>

On Wed, Jun 18, 2014 at 06:32:25PM +0200, Even Rouault wrote:

> I've hit an integration problem with QGIS using the non _r API and spatialite 
> calling (accidently) finishGEOS() when closing a spatialite DB, causing later 
> crashes in QGIS.
> So I've converted all the QGIS calls to GEOS to the _r API, and to do that the 
> easiest solution was to alter geos_c.h to remove the non _r symbols and fix all 
> compilation problems. But to make that robust in the length, it would be good 
> to be upstreamed.
> GDAL and MapServer also now use the _r API for similar reasons. And it would 
> also be good to be sure noone reintroduce calls to the non _r API.

I was actually thinking to deprecate the non _r API at some point,
but I've been too lazy to port PostGIS to the _r ones so far, so
I keep adding the non _r ones even for new signature :/

--strk;

From strk at keybit.net  Fri Jun 20 00:55:32 2014
From: strk at keybit.net (Sandro Santilli)
Date: Fri, 20 Jun 2014 09:55:32 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
 .h ?
In-Reply-To: <20140618165258.GE26771@localhost>
References: <201406172307.52101.even.rouault@mines-paris.org>
	<201406181224.48796.even.rouault@mines-paris.org>
	<CACowWR2dVBT2tyy7TO7VmsC3_+dUjUinetguwpaBa1Bt8h3kcw@mail.gmail.com>
	<201406181832.25125.even.rouault@mines-paris.org>
	<20140618165258.GE26771@localhost>
Message-ID: <20140620075532.GA20779@localhost>

Please also take a look at this pending pull request for
the re-entrant API: https://github.com/libgeos/libgeos/pull/26

It's blocked on naming, for the same reason you're doing this work
(avoiding confusion)

--strk;

On Wed, Jun 18, 2014 at 06:52:58PM +0200, Sandro Santilli wrote:
> On Wed, Jun 18, 2014 at 06:32:25PM +0200, Even Rouault wrote:
> 
> > I've hit an integration problem with QGIS using the non _r API and spatialite 
> > calling (accidently) finishGEOS() when closing a spatialite DB, causing later 
> > crashes in QGIS.
> > So I've converted all the QGIS calls to GEOS to the _r API, and to do that the 
> > easiest solution was to alter geos_c.h to remove the non _r symbols and fix all 
> > compilation problems. But to make that robust in the length, it would be good 
> > to be upstreamed.
> > GDAL and MapServer also now use the _r API for similar reasons. And it would 
> > also be good to be sure noone reintroduce calls to the non _r API.
> 
> I was actually thinking to deprecate the non _r API at some point,
> but I've been too lazy to port PostGIS to the _r ones so far, so
> I keep adding the non _r ones even for new signature :/
> 
> --strk;

From geos-trac at osgeo.org  Fri Jun 20 01:37:16 2014
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 20 Jun 2014 08:37:16 -0000
Subject: [geos-devel] [GEOS] #694: PreparedPoint::intersects gives different
 results from Point::intersects
Message-ID: <044.86a35f0be2bb7b206d3506e852df60fb@osgeo.org>

#694: PreparedPoint::intersects gives different results from Point::intersects
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  blocker     |   Milestone:  3.5.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 A bug in PreparedPoint::intersects signature prevented it from being
 really prepared. The bug was fixed by r3988, which triggered no failures
 in the GEOS testsuite but triggered a failure in the PostGIS testsuite:
 http://trac.osgeo.org/postgis/ticket/2768

 This makes me think that PreparedPoint::intersects behaves differentely
 from Point::intersects, which is the one we were hitting while the bug was
 present.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/694>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Jun 20 01:40:07 2014
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 20 Jun 2014 08:40:07 -0000
Subject: [geos-devel] [GEOS] #694: PreparedPoint::intersects gives
 different results from Point::intersects
In-Reply-To: <044.86a35f0be2bb7b206d3506e852df60fb@osgeo.org>
References: <044.86a35f0be2bb7b206d3506e852df60fb@osgeo.org>
Message-ID: <053.2dac984d876d2ae77ae0926acc6a2118@osgeo.org>

#694: PreparedPoint::intersects gives different results from Point::intersects
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  blocker     |   Milestone:  3.5.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 I've reverted the signature fix with r3989, but this issue should be fixed
 or it makes no sense to have an unused implementation for
 PreparedPoint::intersects.

 An automated testcase is needed in GEOS.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/694#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From thborges at gmail.com  Wed Jun 25 17:10:27 2014
From: thborges at gmail.com (Thiago Borges)
Date: Wed, 25 Jun 2014 21:10:27 -0300
Subject: [geos-devel] Parallel use of GEOSPreparedIntersects_r
Message-ID: <CAOvWUzUVe8QQJzFHJUT_Qt9TSegtzKqRpQEhcwKU_yi2ZBxELg@mail.gmail.com>

Hi!

Can the GEOSPreparedIntersects_r function be called in parallel? For
distinct Geometries in each call (reentrant)?

I'm trying to implement a parallel intersection check (spatial join), but
I'm receiving some EXC_BAD_ACCESS and ": pointer being freed was not
allocated". Partial stack below.

Those errors don't happen when I replace GEOSPreparedIntersects_r by
GEOSIntersects_r in the same parallel code.

Stack sample 1:
------------------------------------------------------------------------------------------------------
* thread #2: tid = 0x36079, 0x0000000105730a40, stop reason =
EXC_BAD_ACCESS (code=2, address=0x105730a40)
  * frame #0: 0x0000000105730a40
    frame #1: 0x00000001001e3c87
libgeos-3.4.2.dylib`geos::noding::MCIndexSegmentSetMutualIntersector::intersectChains()
+ 225
    frame #2: 0x00000001001e163e
libgeos-3.4.2.dylib`geos::noding::FastSegmentSetIntersectionFinder::intersects(std::__1::vector<geos::noding::SegmentString
const*, std::__1::allocator<geos::noding::SegmentString const*> >*) + 84
    frame #3: 0x00000001001ba1f1
libgeos-3.4.2.dylib`geos::geom::prep::PreparedPolygonIntersects::intersects(geos::geom::Geometry
const*) + 131
    frame #4: 0x00000001001b9f79
libgeos-3.4.2.dylib`geos::geom::prep::PreparedPolygon::intersects(geos::geom::Geometry
const*) const + 155
    frame #5: 0x0000000100313006 libgeos_c.1.dylib`GEOSPreparedIntersects_r
+ 48
    frame #6: 0x0000000100028208
geosystem`threaded_refine_rj(ctx=refine_context at 0x0000000106080a00) +
856 at rtree-pjoin-rj.cpp:171
...
------------------------------------------------------------------------------------------------------

Stack sample 2:
------------------------------------------------------------------------------------------------------
* thread #2: tid = 0x3b0ff, 0x00007fff9056cbc0
libsystem_malloc.dylib`malloc_error_break, stop reason = breakpoint 2.1
  * frame #0: 0x00007fff9056cbc0 libsystem_malloc.dylib`malloc_error_break
    frame #1: 0x00007fff9056e028 libsystem_malloc.dylib`free + 324
    frame #2: 0x00000001001d2c43
libgeos-3.4.2.dylib`geos::index::intervalrtree::SortedPackedIntervalRTree::buildTree()
+ 163
    frame #3: 0x00000001001d3004
libgeos-3.4.2.dylib`geos::index::intervalrtree::SortedPackedIntervalRTree::query(double,
double, geos::index::ItemVisitor*) + 44
    frame #4: 0x000000010019e6db
libgeos-3.4.2.dylib`geos::algorithm::locate::IndexedPointInAreaLocator::locate(geos::geom::Coordinate
const*) + 67
    frame #5: 0x00000001001ba48a
libgeos-3.4.2.dylib`geos::geom::prep::PreparedPolygonPredicate::isAnyTestComponentInTarget(geos::geom::Geometry
const*) const + 132
    frame #6: 0x00000001001ba18a
libgeos-3.4.2.dylib`geos::geom::prep::PreparedPolygonIntersects::intersects(geos::geom::Geometry
const*) + 28
    frame #7: 0x00000001001b9f79
libgeos-3.4.2.dylib`geos::geom::prep::PreparedPolygon::intersects(geos::geom::Geometry
const*) const + 155
    frame #8: 0x0000000100313006 libgeos_c.1.dylib`GEOSPreparedIntersects_r
+ 48
    frame #9: 0x0000000100028208
geosystem`threaded_refine_rj(ctx=refine_context at 0x0000000106103a00) +
856 at rtree-pjoin-rj.cpp:171
------------------------------------------------------------------------------------------------------


-- 
Thiago Borges
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20140625/508167a8/attachment.html>

From strk at keybit.net  Thu Jun 26 00:48:22 2014
From: strk at keybit.net (Sandro Santilli)
Date: Thu, 26 Jun 2014 09:48:22 +0200
Subject: [geos-devel] Parallel use of GEOSPreparedIntersects_r
In-Reply-To: <CAOvWUzUVe8QQJzFHJUT_Qt9TSegtzKqRpQEhcwKU_yi2ZBxELg@mail.gmail.com>
References: <CAOvWUzUVe8QQJzFHJUT_Qt9TSegtzKqRpQEhcwKU_yi2ZBxELg@mail.gmail.com>
Message-ID: <20140626074822.GF4785@localhost>

On Wed, Jun 25, 2014 at 09:10:27PM -0300, Thiago Borges wrote:
> Hi!
> 
> Can the GEOSPreparedIntersects_r function be called in parallel? For
> distinct Geometries in each call (reentrant)?
> 
> I'm trying to implement a parallel intersection check (spatial join), but
> I'm receiving some EXC_BAD_ACCESS and ": pointer being freed was not
> allocated". Partial stack below.
> 
> Those errors don't happen when I replace GEOSPreparedIntersects_r by
> GEOSIntersects_r in the same parallel code.

You're probably the one in the best position to debug this.
GEOS C++ library is known to have possibly non-reentrant portions,
patches fixing the specific path you're trying are welcome.

--strk;

From geos-trac at osgeo.org  Sat Jun 28 08:09:44 2014
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 28 Jun 2014 15:09:44 -0000
Subject: [geos-devel] [GEOS] #695: [PATCH] geos_c.h: Make it possible to not
 use global functions.
Message-ID: <047.8a05f0d3416d1a2702bf81fbb1c55610@osgeo.org>

#695: [PATCH] geos_c.h: Make it possible to not use global functions.
-------------------------+--------------------------------------------------
 Reporter:  rouault      |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:                            
Component:  Default      |     Version:                            
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
 As discussed in  http://lists.osgeo.org/pipermail/geos-
 devel/2014-June/006878.html,

 this patch moves the reentrant API at top of geos_c.h, and the
 (deprecated) global API at bottom by protecting it with #ifndef
 GEOS_USE_ONLY_R_API

 That way, applications can #define GEOS_USE_ONLY_R_API before including
 geos_c.h to avoid using the deprecated API

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/695>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From even.rouault at mines-paris.org  Sat Jun 28 08:17:23 2014
From: even.rouault at mines-paris.org (Even Rouault)
Date: Sat, 28 Jun 2014 17:17:23 +0200
Subject: [geos-devel] Splitting _r and non _r functions in 2 different
	.h ?
In-Reply-To: <20140620075532.GA20779@localhost>
References: <201406172307.52101.even.rouault@mines-paris.org>
	<20140618165258.GE26771@localhost>
	<20140620075532.GA20779@localhost>
Message-ID: <201406281717.23102.even.rouault@mines-paris.org>

Le vendredi 20 juin 2014 09:55:32, Sandro Santilli a ?crit :
> Please also take a look at this pending pull request for
> the re-entrant API: https://github.com/libgeos/libgeos/pull/26
> 
> It's blocked on naming, for the same reason you're doing this work
> (avoiding confusion)

Hum, I've had a look at the pull request but I'm highly confused by all the 
commits and comments, so I didn't pursue further.

For now, I've just reordered the symbols as discussed. See
http://trac.osgeo.org/geos/ticket/695 for the proposed patch.

I've tested it successfully when compiling GDAL and MapServer.

Even

> 
> --strk;
> 
> On Wed, Jun 18, 2014 at 06:52:58PM +0200, Sandro Santilli wrote:
> > On Wed, Jun 18, 2014 at 06:32:25PM +0200, Even Rouault wrote:
> > > I've hit an integration problem with QGIS using the non _r API and
> > > spatialite calling (accidently) finishGEOS() when closing a spatialite
> > > DB, causing later crashes in QGIS.
> > > So I've converted all the QGIS calls to GEOS to the _r API, and to do
> > > that the easiest solution was to alter geos_c.h to remove the non _r
> > > symbols and fix all compilation problems. But to make that robust in
> > > the length, it would be good to be upstreamed.
> > > GDAL and MapServer also now use the _r API for similar reasons. And it
> > > would also be good to be sure noone reintroduce calls to the non _r
> > > API.
> > 
> > I was actually thinking to deprecate the non _r API at some point,
> > but I've been too lazy to port PostGIS to the _r ones so far, so
> > I keep adding the non _r ones even for new signature :/
> > 
> > --strk;
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Geospatial professional services
http://even.rouault.free.fr/services.html

From geos-trac at osgeo.org  Mon Jun 30 07:11:50 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Jun 2014 14:11:50 -0000
Subject: [geos-devel] [GEOS] #695: [PATCH] geos_c.h: Make it possible to
 not use global functions.
In-Reply-To: <047.8a05f0d3416d1a2702bf81fbb1c55610@osgeo.org>
References: <047.8a05f0d3416d1a2702bf81fbb1c55610@osgeo.org>
Message-ID: <056.4e3e7676324d4a522b79445badb91b55@osgeo.org>

#695: [PATCH] geos_c.h: Make it possible to not use global functions.
-------------------------+--------------------------------------------------
 Reporter:  rouault      |        Owner:  geos-devel@?              
     Type:  enhancement  |       Status:  closed                    
 Priority:  major        |    Milestone:  3.5.0                     
Component:  C API        |      Version:                            
 Severity:  Unassigned   |   Resolution:  fixed                     
 Keywords:               |  
-------------------------+--------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => fixed
  * component:  Default => C API
  * milestone:  => 3.5.0


Comment:

 Committed as r3991, thanks

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/695#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jun 30 13:13:31 2014
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 30 Jun 2014 20:13:31 -0000
Subject: [geos-devel] [GEOS] #694: PreparedPoint::intersects gives
 different results from Point::intersects
In-Reply-To: <044.86a35f0be2bb7b206d3506e852df60fb@osgeo.org>
References: <044.86a35f0be2bb7b206d3506e852df60fb@osgeo.org>
Message-ID: <053.52a770551acdb08f3aa46b2bf5a3ef5b@osgeo.org>

#694: PreparedPoint::intersects gives different results from Point::intersects
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  blocker     |   Milestone:  3.4.3                     
Component:  Default     |     Version:  3.4.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
Changes (by strk):

  * version:  svn-trunk => 3.4.2
  * milestone:  3.5.0 => 3.4.3


Comment:

 Interesting enough, it looks like tests for prepared predicates are
 completely missing, see
 http://trac.osgeo.org/geos/browser/tags/3.4.2/tests/xmltester/tests/general/MISSING

 Sounds about time to port those tests!

 Assuming the bug is also in 3.4.3 (and would probably also be in 3.3.9)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/694#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

