From geos-trac at osgeo.org  Thu Jul  1 08:26:16 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Jul 2021 15:26:16 -0000
Subject: [geos-devel] [GEOS] #1120: commit mails are lacking change info
In-Reply-To: <042.9594f4cc8d137ce8bc0abbf18139f93b@osgeo.org>
References: <042.9594f4cc8d137ce8bc0abbf18139f93b@osgeo.org>
Message-ID: <057.a505a6180bc0cbadad9a4843f01588ae@osgeo.org>

#1120: commit mails are lacking change info
---------------------------+---------------------------
 Reporter:  strk           |       Owner:  geos-devel@?
     Type:  defect         |      Status:  closed
 Priority:  major          |   Milestone:
Component:  Documentation  |     Version:
 Severity:  Unassigned     |  Resolution:  fixed
 Keywords:                 |
---------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 It looks like the commit mail are back to normal, once I removed the
 "master" symbolic reference.
 Closing this ticket.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1120#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jul  1 11:12:29 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Jul 2021 18:12:29 -0000
Subject: [geos-devel] [GEOS] #1120: commit mails are lacking change info
In-Reply-To: <042.9594f4cc8d137ce8bc0abbf18139f93b@osgeo.org>
References: <042.9594f4cc8d137ce8bc0abbf18139f93b@osgeo.org>
Message-ID: <057.ce97851f028ea6dd2ca6685b94bc69fe@osgeo.org>

#1120: commit mails are lacking change info
---------------------------+---------------------------
 Reporter:  strk           |       Owner:  geos-devel@?
     Type:  defect         |      Status:  closed
 Priority:  major          |   Milestone:
Component:  Documentation  |     Version:
 Severity:  Unassigned     |  Resolution:  fixed
 Keywords:                 |
---------------------------+---------------------------

Comment (by strk):

 See also https://trac.osgeo.org/postgis/ticket/4937 -- it would be nice to
 fix this once for all

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1120#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jul  1 11:29:13 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 01 Jul 2021 18:29:13 -0000
Subject: [geos-devel] [GEOS] #1120: commit mails are lacking change info
In-Reply-To: <042.9594f4cc8d137ce8bc0abbf18139f93b@osgeo.org>
References: <042.9594f4cc8d137ce8bc0abbf18139f93b@osgeo.org>
Message-ID: <057.b52f3ea4593052bf623abaf714169d4e@osgeo.org>

#1120: commit mails are lacking change info
---------------------------+---------------------------
 Reporter:  strk           |       Owner:  geos-devel@?
     Type:  defect         |      Status:  closed
 Priority:  major          |   Milestone:
Component:  Documentation  |     Version:
 Severity:  Unassigned     |  Resolution:  fixed
 Keywords:                 |
---------------------------+---------------------------

Comment (by strk):

 For reference: the support for symbolic refs should be now fixed by the
 email sending script, in case we want to add the symref back:
 https://git.osgeo.org/gitea/sac/git-hookscripts/issues/1

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1120#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Jul  6 13:03:04 2021
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 06 Jul 2021 20:03:04 -0000
Subject: [geos-devel] [GEOS] #833: IsSimple=true for self-touching
 polygon
In-Reply-To: <047.b0f4c5c8f62bc49f3151c4603056c8ee@osgeo.org>
References: <047.b0f4c5c8f62bc49f3151c4603056c8ee@osgeo.org>
Message-ID: <062.45279f629ba163e6fae0541c71571205@osgeo.org>

#833: IsSimple=true for self-touching polygon
------------------------+---------------------------
 Reporter:  jratike80   |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.6.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 This will be fixed in 3.10
 https://github.com/libgeos/geos/commit/71369610d46d7962bdff096d1bb1346006d9b7cf

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/833#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From hndiaz at yahoo.com  Wed Jul 14 07:45:58 2021
From: hndiaz at yahoo.com (Hector Nunez)
Date: Wed, 14 Jul 2021 14:45:58 +0000 (UTC)
Subject: [geos-devel] lbgeos intersect skips first coordinates
References: <1025530300.3138923.1626273958485.ref@mail.yahoo.com>
Message-ID: <1025530300.3138923.1626273958485@mail.yahoo.com>

Hi,
I found that the I use intersects the result shows that the first coordinates is not used.Here is a sample that I did using two same geometries that shows the issue.I tested similar code in Java using JTS and I don't have this issue.

        // SIMPLE SIMULATION OF THE PROBLEM USING INTERSECTION using GEOS 3.9.1        geos::geom::GeometryFactory::Ptr Factory= geos::geom::GeometryFactory::create();        geos::geom::CoordinateSequence::Ptr coord_seq = Factory->getCoordinateSequenceFactory()->create((size_t)5, (size_t)0);
        coord_seq->setAt(geos::geom::Coordinate(-180, 85.0), 0);        coord_seq->setAt(geos::geom::Coordinate(180, 85.0), 1);        coord_seq->setAt(geos::geom::Coordinate(180, -85.0), 2);        coord_seq->setAt(geos::geom::Coordinate(-180, -85.0), 3);        coord_seq->setAt(geos::geom::Coordinate(-180, 85.0), 4);
        geos::geom::LinearRing * shell_test = Factory->createLinearRing(coord_seq.release());        geos::geom::Geometry::Ptr geom = std::unique_ptr<geos::geom::Geometry>(Factory->createPolygon(shell_test, NULL));
        const geos::geom::Geometry::Ptr other = geom->clone();
        for (size_t i = 0; i<geom->getNumPoints(); i++)          printf( "geom %d [x=%f,y=%f]\n", i+1, geom->getCoordinates()->getX(i), geom->getCoordinates()->getY(i));
        if (geom->intersects(other.get()))        {          std::cout << "GEOMETRIES INTERSECTS !!!!!"<< std::endl;
          const geos::geom::Geometry::Ptr geom_intersected = geom->intersection(other.get());
          for (size_t i = 0; i<geom_intersected->getNumPoints(); i++)            printf( "geom_intersected %d [x=%f,y=%f]\n", i+1, geom_intersected->getCoordinates()->getX(i), geom_intersected->getCoordinates()->getY(i));
          if (geom->compareTo(geom_intersected.get()))            std::cout << "GEOMETRIES AFTER INTERSECTION ARE NOT THE SAME !!!!!"<< std::endl;        }        /*        geom 1 [x=-150.000000,y=22.000000]        geom 2 [x=150.000000,y=22.000000]        geom 3 [x=150.000000,y=-22.000000]        geom 4 [x=-150.000000,y=-22.000000]        geom 5 [x=-150.000000,y=22.000000]        // it should start with -150        geom_intersected 1 [x=150.000000,y=22.000000]        geom_intersected 2 [x=150.000000,y=-22.000000]        geom_intersected 3 [x=-150.000000,y=-22.000000]        geom_intersected 4 [x=-150.000000,y=22.000000]        geom_intersected 5 [x=150.000000,y=22.000000]        */
Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210714/745fdbcc/attachment.html>

From mtnclimb at gmail.com  Wed Jul 14 08:55:13 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 14 Jul 2021 08:55:13 -0700
Subject: [geos-devel] lbgeos intersect skips first coordinates
In-Reply-To: <1025530300.3138923.1626273958485@mail.yahoo.com>
References: <1025530300.3138923.1626273958485.ref@mail.yahoo.com>
 <1025530300.3138923.1626273958485@mail.yahoo.com>
Message-ID: <CAK2ens0_Y4A3G9DDx11aTz6tdWBm6kB0u0ZveO=27Le9Wad-hA@mail.gmail.com>

The overlay operations do not necessarily preserve the exact sequence of
input vertices.  This is the case for both GEOS and JTS.  If you are seeing
a different, preferred order in JTS it's just by chance.

On Wed, Jul 14, 2021 at 7:46 AM Hector Nunez <hndiaz at yahoo.com> wrote:

> Hi,
>
> I found that the I use intersects the result shows that the first
> coordinates is not used.
> Here is a sample that I did using two same geometries that shows the issue.
> I tested similar code in Java using JTS and I don't have this issue.
>
>
>         // SIMPLE SIMULATION OF THE PROBLEM USING INTERSECTION using GEOS 3.9.1
>
>         geos::geom::GeometryFactory::Ptr Factory= geos::geom::GeometryFactory::create();
>
>         geos::geom::CoordinateSequence::Ptr coord_seq = Factory->getCoordinateSequenceFactory()->create((size_t)5, (size_t)0);
>
>
>         coord_seq->setAt(geos::geom::Coordinate(-180, 85.0), 0);
>
>         coord_seq->setAt(geos::geom::Coordinate(180, 85.0), 1);
>
>         coord_seq->setAt(geos::geom::Coordinate(180, -85.0), 2);
>
>         coord_seq->setAt(geos::geom::Coordinate(-180, -85.0), 3);
>
>         coord_seq->setAt(geos::geom::Coordinate(-180, 85.0), 4);
>
>
>         geos::geom::LinearRing * shell_test = Factory->createLinearRing(coord_seq.release());
>
>         geos::geom::Geometry::Ptr geom = std::unique_ptr<geos::geom::Geometry>(Factory->createPolygon(shell_test, NULL));
>
>
>         const geos::geom::Geometry::Ptr other = geom->clone();
>
>
>         for (size_t i = 0; i<geom->getNumPoints(); i++)
>
>           printf( "geom %d [x=%f,y=%f]\n", i+1, geom->getCoordinates()->getX(i), geom->getCoordinates()->getY(i));
>
>
>         if (geom->intersects(other.get()))
>
>         {
>
>           std::cout << "GEOMETRIES INTERSECTS !!!!!"<< std::endl;
>
>
>           const geos::geom::Geometry::Ptr geom_intersected = geom->intersection(other.get());
>
>
>           for (size_t i = 0; i<geom_intersected->getNumPoints(); i++)
>
>             printf( "geom_intersected %d [x=%f,y=%f]\n", i+1, geom_intersected->getCoordinates()->getX(i), geom_intersected->getCoordinates()->getY(i));
>
>
>           if (geom->compareTo(geom_intersected.get()))
>
>             std::cout << "GEOMETRIES AFTER INTERSECTION ARE NOT THE SAME !!!!!"<< std::endl;
>
>         }
>
>         /*
>
>         geom 1 [x=-150.000000,y=22.000000]
>
>         geom 2 [x=150.000000,y=22.000000]
>
>         geom 3 [x=150.000000,y=-22.000000]
>
>         geom 4 [x=-150.000000,y=-22.000000]
>
>         geom 5 [x=-150.000000,y=22.000000]
>
>         // it should start with -150
>
>         geom_intersected 1 [x=150.000000,y=22.000000]
>
>         geom_intersected 2 [x=150.000000,y=-22.000000]
>
>         geom_intersected 3 [x=-150.000000,y=-22.000000]
>
>         geom_intersected 4 [x=-150.000000,y=22.000000]
>
>         geom_intersected 5 [x=150.000000,y=22.000000]
>
>         */
>
>
> Thanks
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210714/0efa3401/attachment-0001.html>

From hndiaz at yahoo.com  Wed Jul 14 14:07:10 2021
From: hndiaz at yahoo.com (Hector Nunez)
Date: Wed, 14 Jul 2021 21:07:10 +0000 (UTC)
Subject: [geos-devel] lbgeos intersect skips first coordinates
In-Reply-To: <CAK2ens0_Y4A3G9DDx11aTz6tdWBm6kB0u0ZveO=27Le9Wad-hA@mail.gmail.com>
References: <1025530300.3138923.1626273958485.ref@mail.yahoo.com>
 <1025530300.3138923.1626273958485@mail.yahoo.com>
 <CAK2ens0_Y4A3G9DDx11aTz6tdWBm6kB0u0ZveO=27Le9Wad-hA@mail.gmail.com>
Message-ID: <1133989512.2651187.1626296830768@mail.yahoo.com>

 Hi,
it is consistent this different which causes different results.
Thanks
    On Wednesday, July 14, 2021, 11:55:28 a.m. EDT, Martin Davis <mtnclimb at gmail.com> wrote:  
 
 The overlay?operations do not necessarily preserve the exact sequence of input vertices.? This is the case for both GEOS and JTS.? If you are seeing a different, preferred order in JTS it's just by chance.
On Wed, Jul 14, 2021 at 7:46 AM Hector Nunez <hndiaz at yahoo.com> wrote:

Hi,
I found that the I use intersects the result shows that the first coordinates is not used.Here is a sample that I did using two same geometries that shows the issue.I tested similar code in Java using JTS and I don't have this issue.

        // SIMPLE SIMULATION OF THE PROBLEM USING INTERSECTION using GEOS 3.9.1        geos::geom::GeometryFactory::Ptr Factory= geos::geom::GeometryFactory::create();        geos::geom::CoordinateSequence::Ptr coord_seq = Factory->getCoordinateSequenceFactory()->create((size_t)5, (size_t)0);
        coord_seq->setAt(geos::geom::Coordinate(-180, 85.0), 0);        coord_seq->setAt(geos::geom::Coordinate(180, 85.0), 1);        coord_seq->setAt(geos::geom::Coordinate(180, -85.0), 2);        coord_seq->setAt(geos::geom::Coordinate(-180, -85.0), 3);        coord_seq->setAt(geos::geom::Coordinate(-180, 85.0), 4);
        geos::geom::LinearRing * shell_test = Factory->createLinearRing(coord_seq.release());        geos::geom::Geometry::Ptr geom = std::unique_ptr<geos::geom::Geometry>(Factory->createPolygon(shell_test, NULL));
        const geos::geom::Geometry::Ptr other = geom->clone();
        for (size_t i = 0; i<geom->getNumPoints(); i++)          printf( "geom %d [x=%f,y=%f]\n", i+1, geom->getCoordinates()->getX(i), geom->getCoordinates()->getY(i));
        if (geom->intersects(other.get()))        {          std::cout << "GEOMETRIES INTERSECTS !!!!!"<< std::endl;
          const geos::geom::Geometry::Ptr geom_intersected = geom->intersection(other.get());
          for (size_t i = 0; i<geom_intersected->getNumPoints(); i++)            printf( "geom_intersected %d [x=%f,y=%f]\n", i+1, geom_intersected->getCoordinates()->getX(i), geom_intersected->getCoordinates()->getY(i));
          if (geom->compareTo(geom_intersected.get()))            std::cout << "GEOMETRIES AFTER INTERSECTION ARE NOT THE SAME !!!!!"<< std::endl;        }        /*        geom 1 [x=-150.000000,y=22.000000]        geom 2 [x=150.000000,y=22.000000]        geom 3 [x=150.000000,y=-22.000000]        geom 4 [x=-150.000000,y=-22.000000]        geom 5 [x=-150.000000,y=22.000000]        // it should start with -150        geom_intersected 1 [x=150.000000,y=22.000000]        geom_intersected 2 [x=150.000000,y=-22.000000]        geom_intersected 3 [x=-150.000000,y=-22.000000]        geom_intersected 4 [x=-150.000000,y=22.000000]        geom_intersected 5 [x=150.000000,y=22.000000]        */
Thanks
_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel

_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/geos-devel
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210714/88c8ecec/attachment-0001.html>

From geos-trac at osgeo.org  Wed Jul 14 14:10:33 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 14 Jul 2021 21:10:33 -0000
Subject: [geos-devel] [GEOS] #755: Overlay ops accept
 GeometryCollections when headers indicate that they don't
In-Reply-To: <045.7f9cb8ae2e569d62a6a347243e4e0d4e@osgeo.org>
References: <045.7f9cb8ae2e569d62a6a347243e4e0d4e@osgeo.org>
Message-ID: <060.7c8e060fa02bc93ceda3422938314eff@osgeo.org>

#755: Overlay ops accept GeometryCollections when headers indicate that they
don't
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.5.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 mdavis is going to add geometry collection support into JTS OverylayNG,
 and then we can sync up and maybe clean out wrappers in downstream
 projects. The semantics seem not-impossible to suss out.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/755#comment:12>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Jul 14 14:51:43 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 14 Jul 2021 21:51:43 -0000
Subject: [geos-devel] [GEOS] #997: ST_Union performance degradation from
 GEOS 3.6.x -> 3.7.x
In-Reply-To: <046.7c21cdeaaf5ec3f6ca9d26b3ad3a6a57@osgeo.org>
References: <046.7c21cdeaaf5ec3f6ca9d26b3ad3a6a57@osgeo.org>
Message-ID: <061.12f6dec41a27beab6f80a19549691abf@osgeo.org>

#997: ST_Union performance degradation from GEOS 3.6.x -> 3.7.x
-------------------------+---------------------------
 Reporter:  greenlaw     |       Owner:  geos-devel@?
     Type:  defect       |      Status:  closed
 Priority:  major        |   Milestone:  3.10.0
Component:  Default      |     Version:  3.7.0
 Severity:  Significant  |  Resolution:  wontfix
 Keywords:  union        |
-------------------------+---------------------------
Changes (by pramsey):

 * status:  new => closed
 * resolution:   => wontfix


Comment:

 Given the wholesale re-write of overlay in 3.9, I'm closing this out, the
 path to a fix is via upgrade.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/997#comment:14>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Jul 14 15:46:54 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 14 Jul 2021 22:46:54 -0000
Subject: [geos-devel] [GEOS] #1000: behavior of GEOSCoordSeq_isCCW() is
 unclear when input is not a simple closed curve
In-Reply-To: <047.674778bdaea2b97295b2f70b17842650@osgeo.org>
References: <047.674778bdaea2b97295b2f70b17842650@osgeo.org>
Message-ID: <062.41adb1716c621571114569a1e9795bc8@osgeo.org>

#1000: behavior of GEOSCoordSeq_isCCW() is unclear when input is not a simple
closed curve
------------------------+---------------------------
 Reporter:  sirsigurd   |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 No, checking this back against JTS, apparently JTS always returns false on
 invalid input. So we could ape that, which would be a slight change.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1000#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Jul 14 15:52:49 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 14 Jul 2021 22:52:49 -0000
Subject: [geos-devel] [GEOS] #1000: behavior of GEOSCoordSeq_isCCW() is
 unclear when input is not a simple closed curve
In-Reply-To: <047.674778bdaea2b97295b2f70b17842650@osgeo.org>
References: <047.674778bdaea2b97295b2f70b17842650@osgeo.org>
Message-ID: <062.2fd1cf20655edda0173461f3a9217dbb@osgeo.org>

#1000: behavior of GEOSCoordSeq_isCCW() is unclear when input is not a simple
closed curve
------------------------+---------------------------
 Reporter:  sirsigurd   |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Paul Ramsey <pramsey@?>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"f4d05b230d75bb85624c147c0a51d4987f069218/git" f4d05b2/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="f4d05b230d75bb85624c147c0a51d4987f069218"
 Document fun behaviour of GEOSCoordSeq_isCCW, closes #1000
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1000#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Jul 14 16:11:59 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 14 Jul 2021 23:11:59 -0000
Subject: [geos-devel] [GEOS] #1114: CAPI STRtree functions swallow errors
In-Reply-To: <045.74891a1c16f3de5eb44d72c1a081198a@osgeo.org>
References: <045.74891a1c16f3de5eb44d72c1a081198a@osgeo.org>
Message-ID: <060.7bcc0e0e3a5d48066cca741877072f55@osgeo.org>

#1114: CAPI STRtree functions swallow errors
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  main
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by pramsey):

 All true. Any preferences for new function names?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1114#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Thu Jul 15 11:01:00 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 15 Jul 2021 11:01:00 -0700
Subject: [geos-devel] CAPI GEOSUnionCascaded
Message-ID: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>

Just stumbled over this old stub, 

https://github.com/libgeos/geos/blob/main/capi/geos_ts_c.cpp#L1425

In addition to GEOSUnaryUnion, which calls a cascaded union as required, we have this explicit hook into cascaded polygon union in the C API. It seems a little duplicative, which is not a high crime, but it also has a hidden feature: unlike UnaryUnion which calls the new NG routines in "safe sequence" (try full precision, fall back to gentle snapping, fall back to snap rounding), this CAPI GEOSUnionCascaded call uses the ClassicUnionStrategy, which is to say the *old* overlay functions and the HeuristicOverlay fallbacks (various forms of bit stripping and precision reduction). 

Question: 
- just remove this API end point entirely?
- flip it over to also use NG semantics?
- don't touch that you fool, it's important to have it as it is!

thanks,
P

From howard at hobu.co  Thu Jul 15 11:13:13 2021
From: howard at hobu.co (Howard Butler)
Date: Thu, 15 Jul 2021 13:13:13 -0500
Subject: [geos-devel] CAPI GEOSUnionCascaded
In-Reply-To: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>
References: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>
Message-ID: <4573F4E3-5EC5-4718-889D-6E4E4937131D@hobu.co>



> On Jul 15, 2021, at 1:01 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> Just stumbled over this old stub, 
> 
> https://github.com/libgeos/geos/blob/main/capi/geos_ts_c.cpp#L1425
> 
> In addition to GEOSUnaryUnion, which calls a cascaded union as required, we have this explicit hook into cascaded polygon union in the C API. It seems a little duplicative, which is not a high crime, but it also has a hidden feature: unlike UnaryUnion which calls the new NG routines in "safe sequence" (try full precision, fall back to gentle snapping, fall back to snap rounding), this CAPI GEOSUnionCascaded call uses the ClassicUnionStrategy, which is to say the *old* overlay functions and the HeuristicOverlay fallbacks (various forms of bit stripping and precision reduction). 
> 
> Question: 
> - just remove this API end point entirely?

I would prefer noop'ing it and setting an error than removing entirely 

> - flip it over to also use NG semantics?

This is what you actually want, right? I do.

> - don't touch that you fool, it's important to have it as it is!

Users can continue to run older versions of the code at their discretion. 

From mtnclimb at gmail.com  Thu Jul 15 11:24:55 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 15 Jul 2021 11:24:55 -0700
Subject: [geos-devel] CAPI GEOSUnionCascaded
In-Reply-To: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>
References: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>
Message-ID: <CAK2ens2g5qGekmEQ6NS809D34vNdB2vyUJg51TYJXrUp=YPswQ@mail.gmail.com>

+1 for flipping to OverylayNG

On Thu, Jul 15, 2021 at 11:01 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Just stumbled over this old stub,
>
> https://github.com/libgeos/geos/blob/main/capi/geos_ts_c.cpp#L1425
>
> In addition to GEOSUnaryUnion, which calls a cascaded union as required,
> we have this explicit hook into cascaded polygon union in the C API. It
> seems a little duplicative, which is not a high crime, but it also has a
> hidden feature: unlike UnaryUnion which calls the new NG routines in "safe
> sequence" (try full precision, fall back to gentle snapping, fall back to
> snap rounding), this CAPI GEOSUnionCascaded call uses the
> ClassicUnionStrategy, which is to say the *old* overlay functions and the
> HeuristicOverlay fallbacks (various forms of bit stripping and precision
> reduction).
>
> Question:
> - just remove this API end point entirely?
> - flip it over to also use NG semantics?
> - don't touch that you fool, it's important to have it as it is!
>
> thanks,
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210715/d99c743c/attachment.html>

From strk at kbt.io  Thu Jul 15 13:03:14 2021
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 15 Jul 2021 22:03:14 +0200
Subject: [geos-devel] CAPI GEOSUnionCascaded
In-Reply-To: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>
References: <48255731-3C23-4FC0-B9DE-8FAFE0D008B4@cleverelephant.ca>
Message-ID: <20210715200314.GA187094@c19>

On Thu, Jul 15, 2021 at 11:01:00AM -0700, Paul Ramsey wrote:
> Just stumbled over this old stub, 
> 
> https://github.com/libgeos/geos/blob/main/capi/geos_ts_c.cpp#L1425
> 
> In addition to GEOSUnaryUnion, which calls a cascaded union as required, we have this explicit hook into cascaded polygon union in the C API. It seems a little duplicative, which is not a high crime, but it also has a hidden feature: unlike UnaryUnion which calls the new NG routines in "safe sequence" (try full precision, fall back to gentle snapping, fall back to snap rounding), this CAPI GEOSUnionCascaded call uses the ClassicUnionStrategy, which is to say the *old* overlay functions and the HeuristicOverlay fallbacks (various forms of bit stripping and precision reduction). 
> 
> Question: 
> - just remove this API end point entirely?
> - flip it over to also use NG semantics?
> - don't touch that you fool, it's important to have it as it is!

We never removed any API. Flip it over, I'd say.

--strk;

From geos-trac at osgeo.org  Mon Jul 19 11:33:53 2021
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 19 Jul 2021 18:33:53 -0000
Subject: [geos-devel] [GEOS] #1089: Support for geometry with M value
In-Reply-To: <047.b72f7dcf6be0329a1d5b3b29b2af7d93@osgeo.org>
References: <047.b72f7dcf6be0329a1d5b3b29b2af7d93@osgeo.org>
Message-ID: <062.4fc1f39e430258bc59ac4a4db7151afa@osgeo.org>

#1089: Support for geometry with M value
-------------------------+---------------------------
 Reporter:  jfbourdon    |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  new
 Priority:  minor        |   Milestone:  3.10.0
Component:  Default      |     Version:  main
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------

Comment (by ondrejsv):

 The way the JTS implements the M values is not suitable?

 The Coordinate class declares just a dummy
 [https://github.com/locationtech/jts/blob/master/modules/core/src/main/java/org/locationtech/jts/geom/Coordinate.java#L206
 getM()] accessor without allocating any space and deferring the
 implementation to its descendants like
 [https://github.com/locationtech/jts/blob/master/modules/core/src/main/java/org/locationtech/jts/geom/CoordinateXYM.java
 CoordinateXYM] or
 [https://github.com/locationtech/jts/blob/master/modules/core/src/main/java/org/locationtech/jts/geom/CoordinateXYZM.java
 CoordinateXYZM].

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1089#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From nicolas.venter at thalesgroup.com  Mon Jul 26 09:12:55 2021
From: nicolas.venter at thalesgroup.com (VENTER Nicolas)
Date: Mon, 26 Jul 2021 16:12:55 +0000
Subject: [geos-devel] GEOS content
Message-ID: <abe5f454-570a-43b0-9ccb-40b9384a9076@THSDC2IRIMBX34P.iris.infra.thales>

Hello,

I would like to access to the Doxygen GEOS API but it is not working. A ticket has been opened : https://trac.osgeo.org/geos/ticket/1108.
Can it be fixed quickly please ? Or is there any generated documentation available elsewhere ?

Since the documentation is currently unavailable, I would like to be sure of the content of GEOS library.
Could you please tell me if the library contains these 3 geometric calculations :

-          Polygon union

-          Bounding circle

-          Polygon offset

Thanks

Best regards,

Nicolas VENTER

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210726/41b21252/attachment.html>

From pramsey at cleverelephant.ca  Tue Jul 27 13:18:29 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 27 Jul 2021 13:18:29 -0700
Subject: [geos-devel] OpenMP
Message-ID: <E11930AC-5CAA-4B86-9782-45287660B2F8@cleverelephant.ca>

Interested in knowing what people's general reaction to OpenMP work is. 

https://github.com/libgeos/geos/pull/468

Going from PoC to something committable will involve a reasonable amount of CMake twiddling to detect support on multiple platforms and get the right linking info and so on. It can be flipped off as necessary. The biggest implementation thing missing is some kind of run-time API to signal to OpenMP the maximum number of cores to commit, since we'll want to at least wave our hands at trying to avoid capping out server resources.

On the one hand it's kind of cool. On the other there's limited places to put it to work, and it adds complexity for certain.

P.

From me at komzpa.net  Tue Jul 27 13:53:26 2021
From: me at komzpa.net (=?UTF-8?B?0JTQvtGA0L7RhNC10Lkg0J/RgNC+0LvQtdGB0LrQvtCy0YHQutC40Lk=?=)
Date: Tue, 27 Jul 2021 23:53:26 +0300
Subject: [geos-devel] OpenMP
In-Reply-To: <E11930AC-5CAA-4B86-9782-45287660B2F8@cleverelephant.ca>
References: <E11930AC-5CAA-4B86-9782-45287660B2F8@cleverelephant.ca>
Message-ID: <CADaG3ZEhzwLbyss+sn+JMoVS3o+-a8t6rtd_Fpy2rqZOKnE4sQ@mail.gmail.com>

OpenMP is cool.

I'd say the "take all cores" compile time switch will be a good start for
pure analytical workloads like mine. Machine is oversaturated anyways, if
it can return back to shell some minutes faster that would be great already.

My previous experiments with instrumenting PostGIS for that exploded on the
fact that palloc is not openmp-safe.



??, 27 ???. 2021 ?. ? 23:18, Paul Ramsey <pramsey at cleverelephant.ca>:

> Interested in knowing what people's general reaction to OpenMP work is.
>
> https://github.com/libgeos/geos/pull/468
>
> Going from PoC to something committable will involve a reasonable amount
> of CMake twiddling to detect support on multiple platforms and get the
> right linking info and so on. It can be flipped off as necessary. The
> biggest implementation thing missing is some kind of run-time API to signal
> to OpenMP the maximum number of cores to commit, since we'll want to at
> least wave our hands at trying to avoid capping out server resources.
>
> On the one hand it's kind of cool. On the other there's limited places to
> put it to work, and it adds complexity for certain.
>
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210727/f99b57e1/attachment.html>

From dbaston at gmail.com  Wed Jul 28 04:37:01 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 28 Jul 2021 07:37:01 -0400
Subject: [geos-devel] OpenMP
In-Reply-To: <E11930AC-5CAA-4B86-9782-45287660B2F8@cleverelephant.ca>
References: <E11930AC-5CAA-4B86-9782-45287660B2F8@cleverelephant.ca>
Message-ID: <CA+K_q_pSeFs=YGFvh144JnDEHkReddnAvS9kRNDRC+RCXJ5FqQ@mail.gmail.com>

I've always been a bit uneasy with the "magic" aspect of sticking #pragma
statements in the code, relative to alternatives like TBB or the parallel
algorithms in the C++ standard. But if it works and can be controlled at
runtime, sure?

Dan

On Tue, Jul 27, 2021 at 4:18 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Interested in knowing what people's general reaction to OpenMP work is.
>
> https://github.com/libgeos/geos/pull/468
>
> Going from PoC to something committable will involve a reasonable amount
> of CMake twiddling to detect support on multiple platforms and get the
> right linking info and so on. It can be flipped off as necessary. The
> biggest implementation thing missing is some kind of run-time API to signal
> to OpenMP the maximum number of cores to commit, since we'll want to at
> least wave our hands at trying to avoid capping out server resources.
>
> On the one hand it's kind of cool. On the other there's limited places to
> put it to work, and it adds complexity for certain.
>
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210728/84a79d45/attachment.html>

From pramsey at cleverelephant.ca  Wed Jul 28 07:38:34 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 28 Jul 2021 07:38:34 -0700
Subject: [geos-devel] OpenMP
In-Reply-To: <CA+K_q_pSeFs=YGFvh144JnDEHkReddnAvS9kRNDRC+RCXJ5FqQ@mail.gmail.com>
References: <E11930AC-5CAA-4B86-9782-45287660B2F8@cleverelephant.ca>
 <CA+K_q_pSeFs=YGFvh144JnDEHkReddnAvS9kRNDRC+RCXJ5FqQ@mail.gmail.com>
Message-ID: <4EB321AB-68AC-4A18-A5C2-B82D33FCE5F9@cleverelephant.ca>

Yeah, maybe less magic and more standard threads is the right answer, it would certainly be more portable across platforms. I was disappointed to find that stock MacOS clang is built w/o openmp support, for example.

P

> On Jul 28, 2021, at 4:37 AM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> I've always been a bit uneasy with the "magic" aspect of sticking #pragma statements in the code, relative to alternatives like TBB or the parallel algorithms in the C++ standard. But if it works and can be controlled at runtime, sure?
> 
> Dan
> 
> On Tue, Jul 27, 2021 at 4:18 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> Interested in knowing what people's general reaction to OpenMP work is. 
> 
> https://github.com/libgeos/geos/pull/468
> 
> Going from PoC to something committable will involve a reasonable amount of CMake twiddling to detect support on multiple platforms and get the right linking info and so on. It can be flipped off as necessary. The biggest implementation thing missing is some kind of run-time API to signal to OpenMP the maximum number of cores to commit, since we'll want to at least wave our hands at trying to avoid capping out server resources.
> 
> On the one hand it's kind of cool. On the other there's limited places to put it to work, and it adds complexity for certain.
> 
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


