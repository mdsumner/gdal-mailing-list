From geos-trac at osgeo.org  Fri Jul  1 04:08:28 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Jul  1 04:40:36 2011
Subject: [geos-devel] [GEOS] #455: GEOSSingleSidedBuffer returns a short line
Message-ID: <044.966225f258d2916512a63a7b9377f50a@osgeo.org>

#455: GEOSSingleSidedBuffer returns a short line
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.2.3                     
Component:  Default     |     Version:  3.2.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 {{{
 Input: LINESTRING(0 0, 10 0, 10 10)
 Distance: 10
 Side: right
 Join: bevel
 Expected: LINESTRING(20 10,20 0,10 -10,0 -10)
 Obtained: LINESTRING(20 10,20 0,10 -10)
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/455>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Jul  1 05:44:36 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Jul  1 06:21:51 2011
Subject: [geos-devel] Re: [GEOS] #455: GEOSSingleSidedBuffer returns a short
	line
In-Reply-To: <044.966225f258d2916512a63a7b9377f50a@osgeo.org>
References: <044.966225f258d2916512a63a7b9377f50a@osgeo.org>
Message-ID: <053.d7a16ab0d54fe8551099ec1ae8a6e8df@osgeo.org>

#455: GEOSSingleSidedBuffer returns a short line
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.2.3                     
Component:  Default     |      Version:  3.2.2                     
 Severity:  Unassigned  |   Resolution:  wontfix                   
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => wontfix


Comment:

 It'll take a refactoring in order to fix.
 And I don't think it makes sense to refactor in the stable 3.2 branch.
 Since we're talking about a deprecated interface I'd avoid wasting time on
 it.
 ST_OffsetCurve in 3.3 works fine.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/455#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Tue Jul  5 07:00:33 2011
From: geos-trac at osgeo.org (GEOS)
Date: Tue Jul  5 08:25:38 2011
Subject: [geos-devel] Re: [GEOS] #298: Support GeometryCollections as input
 to boolean predicates
In-Reply-To: <047.8cf53c6ed0ef4e9c38a626e886698655@osgeo.org>
References: <047.8cf53c6ed0ef4e9c38a626e886698655@osgeo.org>
Message-ID: <056.45b3120d7f2d77ee2e5ab65e57e7d642@osgeo.org>

#298: Support GeometryCollections as input to boolean predicates
-------------------------+--------------------------------------------------
 Reporter:  pramsey      |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  GEOS Future               
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
Changes (by strk):

  * milestone:  => GEOS Future


-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/298#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Tue Jul  5 07:26:34 2011
From: geos-trac at osgeo.org (GEOS)
Date: Tue Jul  5 08:53:04 2011
Subject: [geos-devel] Re: [GEOS] #380: Buffer(Geometry,
 0) deletes part of the polygon [JTS affected too] (was:
 Buffer(Geometry, 0) deletes part of the polygon)
In-Reply-To: <050.a1157464fd11f98c44597e33386f6f10@osgeo.org>
References: <050.a1157464fd11f98c44597e33386f6f10@osgeo.org>
Message-ID: <059.4d0dec0118939a0cea7c00c02cc1717c@osgeo.org>

#380: Buffer(Geometry,0) deletes part of the polygon [JTS affected too]
-------------------------+--------------------------------------------------
 Reporter:  jaapdekker   |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  minor        |   Milestone:  GEOS Future               
Component:  Default      |     Version:  3.2.0                     
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
Changes (by strk):

  * type:  defect => enhancement
  * milestone:  => GEOS Future


-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/380#comment:6>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Tue Jul  5 07:32:19 2011
From: geos-trac at osgeo.org (GEOS)
Date: Tue Jul  5 08:59:07 2011
Subject: [geos-devel] Re: [GEOS] #325: there is no destroy function for
	CoordinateSequence
In-Reply-To: <046.b2be582d96d11e073c955dc57d37ee61@osgeo.org>
References: <046.b2be582d96d11e073c955dc57d37ee61@osgeo.org>
Message-ID: <055.e9d1569b9e233e033aaaee123072cba7@osgeo.org>

#325: there is no destroy function for CoordinateSequence
------------------------+---------------------------------------------------
 Reporter:  aharon      |        Owner:  geos-devel@?              
     Type:  task        |       Status:  closed                    
 Priority:  blocker     |    Milestone:                            
Component:  Default     |      Version:  svn-trunk                 
 Severity:  Unassigned  |   Resolution:  wontfix                   
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => wontfix


Comment:

 In JTS GeometryFactory is a class while CoordinateSequenceFactory is an
 interface.
 In JTS neither GeometryFactory nor CoordinateSequenceFactory have a
 destroy function.

 Anyway, if you feel like it'd be needed, you can provide a patch, but
 there's currently not much such functions would do beside simply using
 delete against the object, and unless you prevent directly using 'delete'
 I don't see much point in exposing an interface hiding that part.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/325#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Tue Jul  5 07:46:10 2011
From: geos-trac at osgeo.org (GEOS)
Date: Tue Jul  5 09:13:47 2011
Subject: [geos-devel] [GEOS] #457: Port ConvexHull robustness fix from
	JTS-1.13
Message-ID: <044.299a091467058ca039078a30e4a72a9d@osgeo.org>

#457: Port ConvexHull robustness fix from JTS-1.13
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 See http://jts-topo-suite.svn.sourceforge.net/viewvc/jts-topo-
 suite?view=revision&revision=407

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/457>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Tue Jul  5 08:06:43 2011
From: geos-trac at osgeo.org (GEOS)
Date: Tue Jul  5 09:35:26 2011
Subject: [geos-devel] Re: [GEOS] #362: Build fails on libtool/capi
In-Reply-To: <048.8e28cfc28e6c3f8d32261cf0ee095571@osgeo.org>
References: <048.8e28cfc28e6c3f8d32261cf0ee095571@osgeo.org>
Message-ID: <057.1664c5ef9ca8499c03d4a69808a062fa@osgeo.org>

#362: Build fails on libtool/capi
------------------------+---------------------------------------------------
 Reporter:  chodgson    |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:  3.2.0                     
 Severity:  Unassigned  |   Resolution:  invalid                   
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => invalid


Comment:

 sounds like there's nothing to do here...

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/362#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Thu Jul  7 16:14:35 2011
From: geos-trac at osgeo.org (GEOS)
Date: Thu Jul  7 20:47:19 2011
Subject: [geos-devel] Re: [GEOS] #224: Need to compile the libGeos using Sun
 Studio12 on Solaris10
In-Reply-To: <049.909aa59ac32d43fdfa8bd453ff6587cb@osgeo.org>
References: <049.909aa59ac32d43fdfa8bd453ff6587cb@osgeo.org>
Message-ID: <058.3895bd6cf6aa58216446b64cc6bbd6a4@osgeo.org>

#224: Need to compile the libGeos using Sun Studio12 on Solaris10
-------------------------------+--------------------------------------------
 Reporter:  satyajitt          |        Owner:  geos-devel@?              
     Type:  enhancement        |       Status:  closed                    
 Priority:  blocker            |    Milestone:  GEOS Future               
Component:  Core               |      Version:  svn-trunk                 
 Severity:  Significant        |   Resolution:  worksforme                
 Keywords:  sun,solaris,sparc  |  
-------------------------------+--------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => worksforme


Comment:

 Tai Meng from safe reports GEOS to build successfully on Solaris with Sun
 Studio Pro v12.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/224#comment:23>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From maxime at altribe.org  Fri Jul  8 04:48:56 2011
From: maxime at altribe.org (Maxime van Noppen)
Date: Fri Jul  8 10:00:14 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
Message-ID: <4E16C478.8050105@altribe.org>

Hi,

I upgraded to geos-3.3.0 and it broke all our code base. :( The 
offending change was the use of virtual inheritance which broke all our 
static_casts. The ? easy ? fix is to s/static_cast/dynamic_cast 
everywhere, but that increases the runtime cost...

I follow (I think) all the mailing lists related (geos-* and postgis-*) 
and don't recall this being discussed. Have I missed something ? And if 
not, what was the rationale behind this change ?

Thanks,

-- 
Maxime
From strk at keybit.net  Fri Jul  8 06:31:37 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul  8 11:51:19 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <4E16C478.8050105@altribe.org>
References: <4E16C478.8050105@altribe.org>
Message-ID: <20110708103137.GA10975@gnash>

On Fri, Jul 08, 2011 at 10:48:56AM +0200, Maxime van Noppen wrote:
> Hi,
> 
> I upgraded to geos-3.3.0 and it broke all our code base. :( The
> offending change was the use of virtual inheritance which broke all
> our static_casts. The ? easy ? fix is to s/static_cast/dynamic_cast
> everywhere, but that increases the runtime cost...
> 
> I follow (I think) all the mailing lists related (geos-* and
> postgis-*) and don't recall this being discussed. Have I missed
> something ? And if not, what was the rationale behind this change ?

The rationale was: follow JTS.
If you read the mailing lists you should be aware that using
the C++ API is not recommended.
Clients of the C-API are stable since GEOS-2.2.0

Note that using static_cast is generally a bad habit and
should be avoided.

Profiling informations comparing GEOS-3.2 and GEOS-3.3 are welcome.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From maxime at altribe.org  Fri Jul  8 07:23:05 2011
From: maxime at altribe.org (Maxime van Noppen)
Date: Fri Jul  8 12:42:36 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <20110708103137.GA10975@gnash>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
Message-ID: <4E16E899.90903@altribe.org>

On 07/08/2011 12:31 PM, Sandro Santilli wrote:
> The rationale was: follow JTS.

Which is a very good one indeed, though how does JTS handle the diamond 
inheritance? I thought Java didn't permit it (though I really never done 
much Java).

> If you read the mailing lists you should be aware that using
> the C++ API is not recommended.
> Clients of the C-API are stable since GEOS-2.2.0

Yes but it's so much better from a C++ point-of-view it's hard to go 
back to old C-style code.

> Note that using static_cast is generally a bad habit and
> should be avoided.

What?! Do you really understand what static_cast is? static_cast should 
always be preferred over dynamic_cast when applicable, precisely for 
performance (static_cast is computed at compilation as opposed to 
dynamic_cast which requires dynamic lookup).

Moreover sometimes you just can't use dynamic_cast and must use 
static_cast. For example you can't downcast a non-polymorphic class 
using dynamic_ast... static_cast is mandatory here.

It's like saying that the operator[] of std::vector is bad and 
std::vector::at should be preferred because it always performs a 
boundary check. If you want to be safe, sure, go for std::vector::at but 
when you explicitly know your index is good, there's no reason to prefer 
it over operator[].

This is an example of code which was broken:

    void point::reset(const geos::geom::Point* geom)
    {
      if (geom == 0)
        geom_.reset();
      else
        geom_.reset(static_cast<geos::geom::Point*>(geom->clone()));
    }

We have a point class which wraps a geos::geom::Point to add some of our 
specific code. In this case, it was perfectly valid (and recommended) to 
use a static_cast.

> Profiling informations comparing GEOS-3.2 and GEOS-3.3 are welcome.

We care a lot about performance. In specific intensive loops this might 
add 0.1 to 3% (wild guess based on previous profiling of the code) of 
overhead. I don't think I'll have the time to set up a proper benchmark 
though. Anyways this would be a bit pointless because I'm not asking at 
all for a change in geos code as following JTS seems to be the right 
thing. I'll probably have to rethink some parts of our code though to 
avoid casts, but that's another story. :)

A very-very-simple-and-naive test to have some feedback:

---------------------------------------------------------------
#include <iostream>
#include <list>

#include <geos/geom/GeometryFactory.h>
#include <geos/geom/Point.h>

int main()
{

   geos::geom::GeometryFactory gf;
   std::list<geos::geom::Point*> point_list;


   geos::geom::Coordinate c;
   c.x = 0;
   c.y = 0;
   geos::geom::Geometry* p = gf.createPoint(c);

   for (unsigned int i = 0; i < 100000; ++i)
     point_list.push_back(dynamic_cast<geos::geom::Point*>(p));

   std::cout << point_list.size() << std::endl;
}
---------------------------------------------------------------

Compiled with g++ -03, this yields these results:

  - main() : 100%
     - dynamic_cast    : 41%
     - operator new    : 31.6%
     - operator delete : 15.2%

This enlightens the cost of dynamic_cast which can really be a big hit 
on such specific and intensive loops.

Thanks for the answer.

-- 
Maxime
From giohappy at gmail.com  Fri Jul  8 07:33:58 2011
From: giohappy at gmail.com (G. Allegri)
Date: Fri Jul  8 12:56:51 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <4E16E899.90903@altribe.org>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org>
Message-ID: <CAB4g1=wYn+xJSq1fWBR69WLNmFXHDiwkEDL+_gJAV-F3SrmMNA@mail.gmail.com>

2011/7/8 Maxime van Noppen <maxime@altribe.org>

> On 07/08/2011 12:31 PM, Sandro Santilli wrote:
>
>> The rationale was: follow JTS.
>>
>
> Which is a very good one indeed, though how does JTS handle the diamond
> inheritance? I thought Java didn't permit it (though I really never done
> much Java).
>

Java permits multiple inheritance only on interfaces, so we don't have the
diamond problem since only one method implementation is admitted.

giovanni
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110708/20174fee/attachment.html
From maxime at altribe.org  Fri Jul  8 07:59:41 2011
From: maxime at altribe.org (Maxime van Noppen)
Date: Fri Jul  8 13:21:07 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <CAB4g1=wYn+xJSq1fWBR69WLNmFXHDiwkEDL+_gJAV-F3SrmMNA@mail.gmail.com>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org>
	<CAB4g1=wYn+xJSq1fWBR69WLNmFXHDiwkEDL+_gJAV-F3SrmMNA@mail.gmail.com>
Message-ID: <4E16F12D.4010208@altribe.org>

On 07/08/2011 01:33 PM, G. Allegri wrote:
> Java permits multiple inheritance only on interfaces, so we don't have
> the diamond problem since only one method implementation is admitted.

Yes I understand that. But after looking at your doc, AFAIKT the two 
hierarchies differ precisely on the diamond. In geos there's an 
inheritance link between Puntal and Geometry whereas in JTS Puntal is 
just an interface, and therefore there are no diamonds.

In geos there is:

Geometry
    |
    +------- Puntal
    |          |
    |          |
  Point--------+

In JTS:

Geometry
    |
    |        Puntal
    |          |
    |          |
  Point--------+


Please correct me if I'm missing something here.

-- 
Maxime
From giohappy at gmail.com  Fri Jul  8 09:19:40 2011
From: giohappy at gmail.com (G. Allegri)
Date: Fri Jul  8 14:48:13 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <4E16F12D.4010208@altribe.org>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org>
	<CAB4g1=wYn+xJSq1fWBR69WLNmFXHDiwkEDL+_gJAV-F3SrmMNA@mail.gmail.com>
	<4E16F12D.4010208@altribe.org>
Message-ID: <CAB4g1=w=UQJQR1OMVZwY0zCZr8V71nSp0om2uzc8h8yPH12wzg@mail.gmail.com>

I don't have looked at the GEOS hierarchy implementation, but it seems
you're right.

giovanni

2011/7/8 Maxime van Noppen <maxime@altribe.org>

> On 07/08/2011 01:33 PM, G. Allegri wrote:
>
>> Java permits multiple inheritance only on interfaces, so we don't have
>> the diamond problem since only one method implementation is admitted.
>>
>
> Yes I understand that. But after looking at your doc, AFAIKT the two
> hierarchies differ precisely on the diamond. In geos there's an inheritance
> link between Puntal and Geometry whereas in JTS Puntal is just an interface,
> and therefore there are no diamonds.
>
> In geos there is:
>
> Geometry
>   |
>   +------- Puntal
>   |          |
>   |          |
>  Point--------+
>
> In JTS:
>
> Geometry
>   |
>   |        Puntal
>   |          |
>   |          |
>  Point--------+
>
>
> Please correct me if I'm missing something here.
>
>
> --
> Maxime
> ______________________________**_________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/**mailman/listinfo/geos-devel<http://lists.osgeo.org/mailman/listinfo/geos-devel>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110708/600064b3/attachment.html
From strk at keybit.net  Fri Jul  8 11:39:43 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul  8 17:15:50 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <4E16F12D.4010208@altribe.org>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org>
	<CAB4g1=wYn+xJSq1fWBR69WLNmFXHDiwkEDL+_gJAV-F3SrmMNA@mail.gmail.com>
	<4E16F12D.4010208@altribe.org>
Message-ID: <20110708153943.GE10975@gnash>

On Fri, Jul 08, 2011 at 01:59:41PM +0200, Maxime van Noppen wrote:

> In geos there is:
> 
> Geometry
>    |
>    +------- Puntal
>    |          |
>    |          |
>  Point--------+
> 
> In JTS:
> 
> Geometry
>    |
>    |        Puntal
>    |          |
>    |          |
>  Point--------+
> 
> 
> Please correct me if I'm missing something here.

You're right, it's different.
GEOS implements all JTS interfaces using dynamic polymorphism.

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Fri Jul  8 11:44:48 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul  8 17:21:07 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <4E16E899.90903@altribe.org>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org>
Message-ID: <20110708154448.GF10975@gnash>

On Fri, Jul 08, 2011 at 01:23:05PM +0200, Maxime van Noppen wrote:

> We care a lot about performance. In specific intensive loops this
> might add 0.1 to 3% (wild guess based on previous profiling of the
> code) of overhead. 

[...]

> A very-very-simple-and-naive test to have some feedback:

[...]

> int main()
> {
> 
>   geos::geom::GeometryFactory gf;
>   std::list<geos::geom::Point*> point_list;
> 
>   geos::geom::Coordinate c;
>   c.x = 0;
>   c.y = 0;
>   geos::geom::Geometry* p = gf.createPoint(c);
> 
>   for (unsigned int i = 0; i < 100000; ++i)
>     point_list.push_back(dynamic_cast<geos::geom::Point*>(p));
> 
>   std::cout << point_list.size() << std::endl;
> }
> ---------------------------------------------------------------
> 
> Compiled with g++ -03, this yields these results:
> 
>  - main() : 100%
>     - dynamic_cast    : 41%
>     - operator new    : 31.6%
>     - operator delete : 15.2%
> 
> This enlightens the cost of dynamic_cast which can really be a big
> hit on such specific and intensive loops.

You're basically noticing here that about 17 calls to malloc + 17 
calls to free (34 calls of memory related functions) are taking up
41 + 15.2 = 56.2% of the time while 41% of it is spent doing 100000
dynamic_cast calls.

And this is assuming you sampled enough time to be meaningful...

I guess your average GEOS application does more than that ?

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From maxime at altribe.org  Fri Jul  8 11:57:49 2011
From: maxime at altribe.org (Maxime van Noppen)
Date: Fri Jul  8 17:31:52 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <20110708154448.GF10975@gnash>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org> <20110708154448.GF10975@gnash>
Message-ID: <4E1728FD.9020603@altribe.org>

On 07/08/2011 05:44 PM, Sandro Santilli wrote:
> You're basically noticing here that about 17 calls to malloc + 17
> calls to free (34 calls of memory related functions) are taking up
> 41 + 15.2 = 56.2% of the time while 41% of it is spent doing 100000
> dynamic_cast calls.

Why only 17 malloc/free? I attach the output of callgrind, which shows 
100000 calls to dynamic_cast, new and delete.

> I guess your average GEOS application does more than that ?

The application as whole, of course. But this kind of loop on that large 
datasets also exists. Loading data for example, where we have a loop 
akin to that one (except that we dynamic_cast the result of reading a 
WKB, thus reducing it's impact but it's still noticeable and enough for 
us to worry about). As I said, that only impacts very specific and 
intensive codes, but still the impact exists.

-- 
Maxime
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dynamic_cast.png
Type: image/png
Size: 75615 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20110708/1901bd18/dynamic_cast-0001.png
From strk at keybit.net  Fri Jul  8 12:15:42 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul  8 17:53:37 2011
Subject: [geos-devel] Upgrading to geos 3.3.0 broke all our codebase !
In-Reply-To: <4E1728FD.9020603@altribe.org>
References: <4E16C478.8050105@altribe.org> <20110708103137.GA10975@gnash>
	<4E16E899.90903@altribe.org> <20110708154448.GF10975@gnash>
	<4E1728FD.9020603@altribe.org>
Message-ID: <20110708161542.GG10975@gnash>

On Fri, Jul 08, 2011 at 05:57:49PM +0200, Maxime van Noppen wrote:
> On 07/08/2011 05:44 PM, Sandro Santilli wrote:
> >You're basically noticing here that about 17 calls to malloc + 17
> >calls to free (34 calls of memory related functions) are taking up
> >41 + 15.2 = 56.2% of the time while 41% of it is spent doing 100000
> >dynamic_cast calls.
> 
> Why only 17 malloc/free? I attach the output of callgrind, which
> shows 100000 calls to dynamic_cast, new and delete.

I said 17 expecting those malloc/free to be due std::vector push_back
which I tought would happen in multiple of two (2^17 > 100000)

> >I guess your average GEOS application does more than that ?
> 
> The application as whole, of course. But this kind of loop on that
> large datasets also exists. Loading data for example, where we have
> a loop akin to that one (except that we dynamic_cast the result of
> reading a WKB, thus reducing it's impact but it's still noticeable
> and enough for us to worry about).

I'd still be interested in those numbers.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Wed Jul 13 06:19:20 2011
From: strk at keybit.net (Sandro Santilli)
Date: Wed Jul 13 18:14:48 2011
Subject: [geos-devel] BoundaryNodeRule for geometry operations
In-Reply-To: <CANYAUeRPTO_EjHRBm6B9uuyKB82SeXEM__pX8-3P87wgg6cvhg@mail.gmail.com>
References: <ec5012962ea4f06f0a9fb74aeb7c5c57@mail.gmail.com>
	<20110707082738.GC2179@gnash>
	<CANYAUeRPTO_EjHRBm6B9uuyKB82SeXEM__pX8-3P87wgg6cvhg@mail.gmail.com>
Message-ID: <20110713101920.GJ13590@gnash>

[Turning discussion public]

On Thu, Jul 07, 2011 at 11:06:25AM -0700, Tai Meng wrote:
> Hi Martin,
> 
> Thank you for introducing boundary rules a few years back. We lost sight of
> it during the previous upgrade but have recently caught up.
> 
> In my opinion, boundary rules and spatial relation operators go hand in
> hand. Either they are both exposed in the Geometry interface, or neither
> should be made available. Boundary rules seem to affect the meaning of
> BOUNDARY, and by consequence INTERIOR, and by consequence all of the
> predefined spatial relation operators.
> 
> With respect to Geometry::getBoundary(), I think LineString::getBoundary()
> might be the only implementation that we need to modify.
> Geometry::isClosed() does not seem affected by boundary rules, but if it is
> or should be, LineString::isClosed() again might be the only implementation
> needing modification.
> 
> Having thought about the issue more, there appear to be several advantages
> to adding boundary rules to Geometry:
> 
> 1) Interface uniformity for boundary rules: if Geometry is the only chunk of
> GEOS/JTS that could be boundary rule aware, but which is not boundary rule
> aware, then we will have achieved complete interface uniformity for boundary
> rules.
> 
> 2) Correctness & completeness of spatial relation operations in Geometry: if
> a method can have multiple behaviors, but only one behavior is implemented,
> that method may be considered incorrect or incomplete. Adding boundary rules
> to Geometry corrects and completes the spatial relation methods.
> 
> 3) Preservation of existing interfaces: since we are only making interface
> additions, existing programs would build as they are, while developers
> interested in the new boundary rule support in Geometry can take advantage
> of it.
> 
> 4) Scalability of boundary rules: if we were to add boundary rules in the
> future, and not necessarily for linear features, we'd only need to make a
> minimal set of changes to have the appropriate concrete Geometry class(es)
> support them e.g. modify ConcreteGeometry::getBoundary().
> 
> Be happy to discuss further. Cheers,
> 
> Tai
> _______________________________________
> 
> Tai Meng | Software Developer | BIM Specialist
> 
> Safe Software Inc.
> T 604.501.9985 x 246
> tai.meng@safe.com  |  www.safe.com
> _______________________________________
> 
> 
> On Thu, Jul 7, 2011 at 1:27 AM, Sandro Santilli <strk@keybit.net> wrote:
> 
> > > *From:* Tai Meng [mailto:tai.meng@safe.com]
> > > *Sent:* Wednesday, July 06, 2011 2:27 PM
> > > *Subject:* GEOS patches
> > [...]
> > > We believe that GEOS geometries (Geometry and its children) should be
> > > boundary rule aware. Because all geometries support spatial relation
> > > operations such as "touches" and "overlaps", all geometries should also
> > > support boundary rules, which change the semantics of these spatial
> > relation
> > > operations.
> >
> > While I agree on the importance of supporting BoundaryNodeRule I also
> > think that passing the settin to the Geometry object itself is not
> > appropriate. Really "touches" "overlaps" etc. methods of Geometry are
> > a facility that is simplified from what's possible with the specific
> > Relate class.
> >
> > I've added support for boundary node rule support in
> > PostGIS (oldest and primary GEOS client) recently and found it effective
> > to just modify the RelateOp and provide a matcher API
> > (we're talking C-API here). The "touches" and "overlaps" and other are
> > all coming from a match against the 9 extended intersection matrix, so
> > once you compute that matrix with a specific BoundaryNodeRule you're fine
> > to check what you need.
> >
> > Again: "BoundaryNodeRule" is not a property of a Geometry but the
> > configuration of an operation. You can see how you have to deal with
> > checking that both geometries involved in an operation have the same
> > rule, otherwise.
> >
> > On the other hand, when you ask for the boundary of a geometry
> > (Geometry::getBoundary) or for it being closed (Geometry:isClosed)
> > I can see there's no way to specify a BoundaryNodeRule. Even with
> > your suggested patch. That's something that's currently not easily
> > computed and might be worth working on. Maybe adding overloaded
> > methods in the Geometry classes taking a BoundaryNodeRule.
> >
> > Anyway, GEOS follows JTS design so such changes would be appropriate
> > to discuss with Martin Davis too (added in Cc).
> >
> > --strk;
> >
> >  ()   Free GIS & Flash consultant/developer
> >  /\   http://strk.keybit.net/services.html
> >

-- 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From makzpj at gmail.com  Wed Jul 13 19:32:24 2011
From: makzpj at gmail.com (Maximo Pech Jaramillo)
Date: Thu Jul 14 08:11:34 2011
Subject: [geos-devel] =?utf-8?q?Invitaci=C3=B3n_a_conectarnos_en_LinkedIn?=
Message-ID: <1167231384.16922465.1310599944705.JavaMail.app@ela4-bed77.prod>

LinkedIn
------------

   
GEOS,

Me gustar?a a?adirte a mi red profesional en LinkedIn.
 
-Maximo

Maximo Pech Jaramillo
Ing. Sw. Sr. at BCM 
Toluca Area, Mexico

Confirm that you know Maximo Pech Jaramillo
https://www.linkedin.com/e/87phkr-gq2xd9fi-5i/isd/3531144040/P9u_40iU/


 
-- 
(c) 2011, LinkedIn Corporation
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110713/55ec8460/attachment.html
From makzpj at gmail.com  Wed Jul 13 19:32:25 2011
From: makzpj at gmail.com (Maximo Pech Jaramillo)
Date: Thu Jul 14 08:11:48 2011
Subject: [geos-devel] =?utf-8?q?Invitaci=C3=B3n_a_conectarnos_en_LinkedIn?=
Message-ID: <22038909.17002416.1310599945048.JavaMail.app@ela4-bed83.prod>

LinkedIn
------------

   
GEOS,

Me gustar?a a?adirte a mi red profesional en LinkedIn.
 
-Maximo

Maximo Pech Jaramillo
Ing. Sw. Sr. en BCM 
Toluca y alrededores, M?xico

Confirma que conoces a Maximo Pech Jaramillo
https://www.linkedin.com/e/87phkr-gq2xd9p1-2f/isd/3531144040/P9u_40iU/


 
-- 
(c) 2011, LinkedIn Corporation
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110713/8dc21142/attachment.html
From mtnclimb at telus.net  Thu Jul 14 00:57:59 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Thu Jul 14 14:34:51 2011
Subject: [geos-devel] BoundaryNodeRule for geometry operations
In-Reply-To: <20110713101920.GJ13590@gnash>
References: <ec5012962ea4f06f0a9fb74aeb7c5c57@mail.gmail.com>	<20110707082738.GC2179@gnash>	<CANYAUeRPTO_EjHRBm6B9uuyKB82SeXEM__pX8-3P87wgg6cvhg@mail.gmail.com>
	<20110713101920.GJ13590@gnash>
Message-ID: <4E1E7757.8090100@telus.net>

Tai, Sandro:

Glad to hear that the BoundaryNodeRule concept is useful for you.

In JTS the BoundaryOp currently does support BNRs.  I haven't seen any 
need to provide BNR support for the isClosed method.

I'm on the fence about how best to expose BNR's in the API.

I see your point that BNR's affect relate, boundary and some of the 
named spatial predicates (but not all - e.g  intersects is insensitive 
to BNR).  So simplicity would suggest adding BNR as another parameter to 
GeometryFactory  (and thus by extension to Geometrys).  As you say, this 
would avoid widening the Geometry interface, which is something I try 
hard to avoid doing.

But I'm also hesitant about adding more parameters to GeometryFactory, 
because I think the combinatorial complexity risks getting out of hand.  
Certainly I don't want to define rules about how different BNRs interact 
- which pretty much means checking them and throwing an exception if the 
GFs are different in any way.  (Although I guess the same applies to 
SRID.  PrecisionModel can be given a heterogeneous interpretation - but 
should it be the most or least precision?)

And unlike the existing parameters, BNRs have a much more limited scope 
- really just for some predicates and boundary operations, as far as I 
have found.

As Sandro points out, the named predicates can be thought of as 
convenience methods for various DE-9IM patterns, so they can be 
evaluated using different BNR's with a relatively simple syntax via relate.

Perhaps this complexity is one reason why the OGC chose to specify only 
a single BNR in the SFS!  But I have found alternate BNR's to be 
essential in some kinds of analysis (such as linear networking), so I 
think they're worth keeping.

I'd like to think about the implications of this issue a while longer 
before committing to any design changes.

Martin




On 7/13/2011 3:19 AM, Sandro Santilli wrote:
> [Turning discussion public]
>
> On Thu, Jul 07, 2011 at 11:06:25AM -0700, Tai Meng wrote:
>> Hi Martin,
>>
>> Thank you for introducing boundary rules a few years back. We lost sight of
>> it during the previous upgrade but have recently caught up.
>>
>> In my opinion, boundary rules and spatial relation operators go hand in
>> hand. Either they are both exposed in the Geometry interface, or neither
>> should be made available. Boundary rules seem to affect the meaning of
>> BOUNDARY, and by consequence INTERIOR, and by consequence all of the
>> predefined spatial relation operators.
>>
>> With respect to Geometry::getBoundary(), I think LineString::getBoundary()
>> might be the only implementation that we need to modify.
>> Geometry::isClosed() does not seem affected by boundary rules, but if it is
>> or should be, LineString::isClosed() again might be the only implementation
>> needing modification.
>>
>> Having thought about the issue more, there appear to be several advantages
>> to adding boundary rules to Geometry:
>>
>> 1) Interface uniformity for boundary rules: if Geometry is the only chunk of
>> GEOS/JTS that could be boundary rule aware, but which is not boundary rule
>> aware, then we will have achieved complete interface uniformity for boundary
>> rules.
>>
>> 2) Correctness&  completeness of spatial relation operations in Geometry: if
>> a method can have multiple behaviors, but only one behavior is implemented,
>> that method may be considered incorrect or incomplete. Adding boundary rules
>> to Geometry corrects and completes the spatial relation methods.
>>
>> 3) Preservation of existing interfaces: since we are only making interface
>> additions, existing programs would build as they are, while developers
>> interested in the new boundary rule support in Geometry can take advantage
>> of it.
>>
>> 4) Scalability of boundary rules: if we were to add boundary rules in the
>> future, and not necessarily for linear features, we'd only need to make a
>> minimal set of changes to have the appropriate concrete Geometry class(es)
>> support them e.g. modify ConcreteGeometry::getBoundary().
>>
>> Be happy to discuss further. Cheers,
>>
>> Tai
>> _______________________________________
>>
>> Tai Meng | Software Developer | BIM Specialist
>>
>> Safe Software Inc.
>> T 604.501.9985 x 246
>> tai.meng@safe.com  |  www.safe.com
>> _______________________________________
>>
>>
>> On Thu, Jul 7, 2011 at 1:27 AM, Sandro Santilli<strk@keybit.net>  wrote:
>>
>>>> *From:* Tai Meng [mailto:tai.meng@safe.com]
>>>> *Sent:* Wednesday, July 06, 2011 2:27 PM
>>>> *Subject:* GEOS patches
>>> [...]
>>>> We believe that GEOS geometries (Geometry and its children) should be
>>>> boundary rule aware. Because all geometries support spatial relation
>>>> operations such as "touches" and "overlaps", all geometries should also
>>>> support boundary rules, which change the semantics of these spatial
>>> relation
>>>> operations.
>>> While I agree on the importance of supporting BoundaryNodeRule I also
>>> think that passing the settin to the Geometry object itself is not
>>> appropriate. Really "touches" "overlaps" etc. methods of Geometry are
>>> a facility that is simplified from what's possible with the specific
>>> Relate class.
>>>
>>> I've added support for boundary node rule support in
>>> PostGIS (oldest and primary GEOS client) recently and found it effective
>>> to just modify the RelateOp and provide a matcher API
>>> (we're talking C-API here). The "touches" and "overlaps" and other are
>>> all coming from a match against the 9 extended intersection matrix, so
>>> once you compute that matrix with a specific BoundaryNodeRule you're fine
>>> to check what you need.
>>>
>>> Again: "BoundaryNodeRule" is not a property of a Geometry but the
>>> configuration of an operation. You can see how you have to deal with
>>> checking that both geometries involved in an operation have the same
>>> rule, otherwise.
>>>
>>> On the other hand, when you ask for the boundary of a geometry
>>> (Geometry::getBoundary) or for it being closed (Geometry:isClosed)
>>> I can see there's no way to specify a BoundaryNodeRule. Even with
>>> your suggested patch. That's something that's currently not easily
>>> computed and might be worth working on. Maybe adding overloaded
>>> methods in the Geometry classes taking a BoundaryNodeRule.
>>>
>>> Anyway, GEOS follows JTS design so such changes would be appropriate
>>> to discuss with Martin Davis too (added in Cc).
>>>
>>> --strk;
>>>
>>>   ()   Free GIS&  Flash consultant/developer
>>>   /\   http://strk.keybit.net/services.html
>>>
From geos-trac at osgeo.org  Thu Jul 14 07:30:58 2011
From: geos-trac at osgeo.org (GEOS)
Date: Thu Jul 14 20:48:45 2011
Subject: [geos-devel] [GEOS] #458: Polygonizer failure
Message-ID: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>

#458: Polygonizer failure
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 A simple multiline containing 3 linestrings of 2,5 and 6 vertices, all
 sharing the same endpoints (2 nodes in total in the topology)
 fail to be polygonized in floating precision, while successfully
 polygonize as 2 rings with a precision of 1e-11.

 See http://trac.osgeo.org/postgis/ticket/1115 for original report.

 In the geometry with 5 vertices, distance between first and second vertex
 and between forth and fifth vertex is 2.3283064365387e-10.

 The polygonizer returns _no_ rings.
 Dropping one of the close-by vertices (not on the topology node)
 makes the polygonizer return _1_ ring.
 Dropping both makes it succeed in returning _2_ rings as it should.

 Simplified MULTILINESTRING input follows:
 {{{
 010500000003000000010200000002000000555C8F42354A3A41A4703D6A1E445241CCCCCC0C474A3A415C8FC2851E445241010200000005000000555C8F42354A3A41A4703D6A1E445241545C8F42354A3A41A4703D6A1E445241409B06043D4A3A415860C1CC1C445241CDCCCC0C474A3A415C8FC2851E445241CCCCCC0C474A3A415C8FC2851E445241010200000006000000CCCCCC0C474A3A415C8FC2851E445241C4F5289C4B4A3A415C8FC2C52B445241B533D71C964A3A418EAD7CBD1A4452412085EB91284A3A417A14AE2719445241285C8F42354A3A41A4703D6A1E445241555C8F42354A3A41A4703D6A1E445241
 }}}
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/458>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Thu Jul 14 07:38:36 2011
From: geos-trac at osgeo.org (GEOS)
Date: Thu Jul 14 20:56:57 2011
Subject: [geos-devel] Re: [GEOS] #458: Polygonizer robustness failure (was:
 Polygonizer failure)
In-Reply-To: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>
References: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>
Message-ID: <053.d4f118be13530d666d92e0e9a6946917@osgeo.org>

#458: Polygonizer robustness failure
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/458#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Thu Jul 14 08:43:49 2011
From: geos-trac at osgeo.org (GEOS)
Date: Thu Jul 14 22:05:32 2011
Subject: [geos-devel] Re: [GEOS] #458: Polygonizer robustness failure
In-Reply-To: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>
References: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>
Message-ID: <053.33024137a34c5d94687c5abf296bf9b4@osgeo.org>

#458: Polygonizer robustness failure
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
Description changed by strk:

Old description:

> A simple multiline containing 3 linestrings of 2,5 and 6 vertices, all
> sharing the same endpoints (2 nodes in total in the topology)
> fail to be polygonized in floating precision, while successfully
> polygonize as 2 rings with a precision of 1e-11.
>
> See http://trac.osgeo.org/postgis/ticket/1115 for original report.
>
> In the geometry with 5 vertices, distance between first and second vertex
> and between forth and fifth vertex is 2.3283064365387e-10.
>
> The polygonizer returns _no_ rings.
> Dropping one of the close-by vertices (not on the topology node)
> makes the polygonizer return _1_ ring.
> Dropping both makes it succeed in returning _2_ rings as it should.
>
> Simplified MULTILINESTRING input follows:
> {{{
> 010500000003000000010200000002000000555C8F42354A3A41A4703D6A1E445241CCCCCC0C474A3A415C8FC2851E445241010200000005000000555C8F42354A3A41A4703D6A1E445241545C8F42354A3A41A4703D6A1E445241409B06043D4A3A415860C1CC1C445241CDCCCC0C474A3A415C8FC2851E445241CCCCCC0C474A3A415C8FC2851E445241010200000006000000CCCCCC0C474A3A415C8FC2851E445241C4F5289C4B4A3A415C8FC2C52B445241B533D71C964A3A418EAD7CBD1A4452412085EB91284A3A417A14AE2719445241285C8F42354A3A41A4703D6A1E445241555C8F42354A3A41A4703D6A1E445241
> }}}
> }}}

New description:

 A simple multiline containing 3 linestrings of 2,5 and 6 vertices, all
 sharing the same endpoints (2 nodes in total in the topology)
 fail to be polygonized in floating precision, while successfully
 polygonize as 2 rings with a precision of 1e-11.

 See http://trac.osgeo.org/postgis/ticket/1115 for original report.

 In the geometry with 5 vertices, distance between first and second vertex
 and between forth and fifth vertex is 2.3283064365387e-10.

 The polygonizer returns _no_ rings.
 Dropping one of the close-by vertices (not on the topology node)
 makes the polygonizer return _1_ ring.
 Dropping both makes it succeed in returning _2_ rings as it should.

 Simplified MULTILINESTRING input follows:
 {{{
 010500000003000000010200000002000000555C8F42354A3A41A4703D6A1E445241CCCCCC0C474A3A415C8FC2851E445241010200000005000000555C8F42354A3A41A4703D6A1E445241545C8F42354A3A41A4703D6A1E445241409B06043D4A3A415860C1CC1C445241CDCCCC0C474A3A415C8FC2851E445241CCCCCC0C474A3A415C8FC2851E445241010200000006000000CCCCCC0C474A3A415C8FC2851E445241C4F5289C4B4A3A415C8FC2C52B445241B533D71C964A3A418EAD7CBD1A4452412085EB91284A3A417A14AE2719445241285C8F42354A3A41A4703D6A1E445241555C8F42354A3A41A4703D6A1E445241
 }}}

--

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/458#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Thu Jul 14 12:01:50 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Jul 15 01:34:22 2011
Subject: [geos-devel] Re: [GEOS] #458: Polygonizer robustness failure
In-Reply-To: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>
References: <044.42d56df037e7953ba2d79c2c27b23cc3@osgeo.org>
Message-ID: <053.4abd6f6312f9d90caaffce3d7a589620@osgeo.org>

#458: Polygonizer robustness failure
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.3.1                     
Component:  Default     |      Version:  3.3.0                     
 Severity:  Unassigned  |   Resolution:  invalid                   
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => invalid


Comment:

 It seems that the input is still not properly noded.
 In particular there's a linear intersection between the line with 5
 vertices and the one with 6. Passing the geometry under unaryunion turn it
 to a 4 lines geometry, and that one successfully polygonizes.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/458#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From strk at keybit.net  Thu Jul 14 12:26:14 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul 15 02:00:12 2011
Subject: [geos-devel] Noding linework
Message-ID: <20110714162614.GB26078@gnash>

Martin, isn't Union operation supposed to fully node
input linework ? The bug I just filed (and then closed)
on JTS about Polygonize failure was produced with Union
but wasnt' fully noded...

Unioning again the return from Union made it noded !!

See http://trac.osgeo.org/postgis/ticket/1115
for further details.

Any ideas ?

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From mtnclimb at telus.net  Thu Jul 14 23:17:55 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Fri Jul 15 13:28:18 2011
Subject: [geos-devel] Noding linework
In-Reply-To: <20110714162614.GB26078@gnash>
References: <20110714162614.GB26078@gnash>
Message-ID: <4E1FB163.1010103@telus.net>

Yes, union() is supposed to fully node linework.

This case works fine in JTS 1.11 (and JTS 1.12) - i.e. running the 
equivalent of polygonize( union( boundary(A),  B).  The output from the 
union checks out as being fully noded, and the polygonize produces 2 
valid polygons.

So possibly this is one of those numerical issues which shows up in GEOS 
in native code, but not in JTS in Java?  This maybe one of those cases 
where GEOS and JTS need to be traced through in parallel (which seems 
really painful, but I think you've done this in the past, right?)

Martin

On 7/14/2011 9:26 AM, Sandro Santilli wrote:
> Martin, isn't Union operation supposed to fully node
> input linework ? The bug I just filed (and then closed)
> on JTS about Polygonize failure was produced with Union
> but wasnt' fully noded...
>
> Unioning again the return from Union made it noded !!
>
> See http://trac.osgeo.org/postgis/ticket/1115
> for further details.
>
> Any ideas ?
>
> --strk;
>
>    ()   Free GIS&  Flash consultant/developer
>    /\   http://strk.keybit.net/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> -----
> No virus found in this message.
> Checked by AVG - www.avg.com
> Version: 10.0.1390 / Virus Database: 1516/3764 - Release Date: 07/14/11
>
>
From strk at keybit.net  Fri Jul 15 06:06:07 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul 15 20:37:49 2011
Subject: [geos-devel] Noding linework
In-Reply-To: <4E1FB163.1010103@telus.net>
References: <20110714162614.GB26078@gnash>
 <4E1FB163.1010103@telus.net>
Message-ID: <20110715100607.GD11119@gnash>

On Thu, Jul 14, 2011 at 08:17:55PM -0700, Martin Davis wrote:
> Yes, union() is supposed to fully node linework.
> 
> This case works fine in JTS 1.11 (and JTS 1.12) - i.e. running the
> equivalent of polygonize( union( boundary(A),  B).  The output from
> the union checks out as being fully noded, and the polygonize
> produces 2 valid polygons.
> 
> So possibly this is one of those numerical issues which shows up in
> GEOS in native code, but not in JTS in Java?  This maybe one of
> those cases where GEOS and JTS need to be traced through in parallel
> (which seems really painful, but I think you've done this in the
> past, right?)

Right, and it was a scary place to be :/
I'm currently going after another similar issue, and looks like it's
still being about line intersection.

I took the chance to review the unit tests and found
that we had in GEOS a few test from
junit/algorithm/RobustLineIntersectionTest.java
commented out as they failed:

 - testDaveSkeaCase
 - testCmp5CaseWKT
 - testCmp5CaseRaw

They all still fail in GEOS !

Not sure they succeed in JTS though, as I seem to be unable to run
unit tests there. I tried:

 $ ant junit
 Buildfile: build.xml

 junit:
    [delete] Deleting directory /home/src/jts/jts/jts/${build.classes}
     [mkdir] Created dir: /home/src/jts/jts/jts/${build.classes}

 BUILD FAILED
 /home/src/jts/jts/jts/build.xml:189: srcdir "/home/src/jts/jts/jts/${base.src}" does not exist!
 
 Total time: 0 seconds

Ideas ?


--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From geos-trac at osgeo.org  Fri Jul 15 06:09:12 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Jul 15 20:40:58 2011
Subject: [geos-devel] [GEOS] #459: Union fails to fully node input linework
Message-ID: <044.a0edbb62f48168614e309db04bc20760@osgeo.org>

#459: Union fails to fully node input linework
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 Performing the union between the boundary of the polygon and the line
 reported in http://trac.osgeo.org/postgis/ticket/1115 results in not-
 fully-noded output.

 JTS was reported to work:
 http://lists.osgeo.org/pipermail/geos-devel/2011-July/005342.html

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/459>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From strk at keybit.net  Fri Jul 15 09:06:57 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Jul 15 23:48:57 2011
Subject: [geos-devel] Noding linework
In-Reply-To: <20110715100607.GD11119@gnash>
References: <20110714162614.GB26078@gnash> <4E1FB163.1010103@telus.net>
	<20110715100607.GD11119@gnash>
Message-ID: <20110715130657.GA6893@gnash>

On Fri, Jul 15, 2011 at 12:06:07PM +0200, Sandro Santilli wrote:

> I took the chance to review the unit tests and found
> that we had in GEOS a few test from
> junit/algorithm/RobustLineIntersectionTest.java
> commented out as they failed:
> 
>  - testDaveSkeaCase
>  - testCmp5CaseWKT
>  - testCmp5CaseRaw
> 
> They all still fail in GEOS !
> 
> Not sure they succeed in JTS though, as I seem to be unable to run
> unit tests there. 

After many attempts (did I mention I hate java and ants with a passion ?)
I finally succeeded in having JTS run its unit tests and _surprise_ (?)
it fails as well:

(1)
    [junit] Testcase: testDaveSkeaCase(test.jts.junit.algorithm.RobustLineIntersectionTest):    FAILED
    [junit] Number of intersections not as expected expected:<2> but was:<1>

(2)
    [junit] Testcase: testCmp5CaseWKT(test.jts.junit.algorithm.RobustLineIntersectionTest):     FAILED
    [junit] Int Pts not equal - POINT ( 4348437.0557510145 5552597.375203926 ) vs POINT ( 4348440.8493874 5552599.27202212 )

(3)
    [junit] Testcase: testCmp5CaseRaw(test.jts.junit.algorithm.RobustLineIntersectionTest):     FAILED
    [junit] Int Pts not equal - POINT ( 4348437.0557510145 5552597.375203926 ) vs POINT ( 4348440.8493874 5552599.27202212 )


If you're curious about how I handled to run the JTS unit tests:
https://sourceforge.net/tracker/index.php?func=detail&aid=3367858&group_id=128875&atid=713120#

--strk; 

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Fri Jul 15 09:55:43 2011
From: strk at keybit.net (Sandro Santilli)
Date: Sat Jul 16 00:40:26 2011
Subject: [geos-devel] Noding linework
In-Reply-To: <4E1FB163.1010103@telus.net>
References: <20110714162614.GB26078@gnash>
 <4E1FB163.1010103@telus.net>
Message-ID: <20110715135543.GB6893@gnash>

On Thu, Jul 14, 2011 at 08:17:55PM -0700, Martin Davis wrote:
> Yes, union() is supposed to fully node linework.
> 
> This case works fine in JTS 1.11 (and JTS 1.12) - i.e. running the
> equivalent of polygonize( union( boundary(A),  B).  The output from
> the union checks out as being fully noded, and the polygonize
> produces 2 valid polygons.
> 
> So possibly this is one of those numerical issues which shows up in
> GEOS in native code, but not in JTS in Java?  This maybe one of
> those cases where GEOS and JTS need to be traced through in parallel
> (which seems really painful, but I think you've done this in the
> past, right?)

Found.

Contrary to JTS, which engages SnapRounding on first robustness failure,
GEOS first tries with a pure CommonBitsRemover approach:

Trying with original input.
Original exception: TopologyException: found non-noded intersection between LINESTRING (1.72293e+06 4.78835e+06, 1.72293e+06 4.78835e+06) and LINESTRING (1.72293e+06 4.78835e+06, 1.72293e+06 4.78834e+06) at 1.72293e+06 4.78835e+06
Trying with Common Bits Remover (CBR)

I've seen in the past already that re-adding previously removed common
bits may introduce invalidities (we discussed this in another occasion).
That's because some of the lowermost bits fall off possibly moving the
vertices to fall on a given grid. Evidentily this was the case in GEOS,
where the output from Union against the shifted geometries was fully noded
but became non-noded when re-adding common bits.

Indeed going SnapRounding directly gives a fully noded output !
But it gives failures (found non-noded intersection) in a 
couple of testcase:

 bug360.xml (http://trac.osgeo.org/geos/ticket/360) [JTS works]
 bug392.xml (http://trac.osgeo.org/geos/ticket/392) [JTS throws an exception!]

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From mtnclimb at telus.net  Fri Jul 15 19:30:51 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Sat Jul 16 10:56:18 2011
Subject: [geos-devel] Noding linework
In-Reply-To: <20110715135543.GB6893@gnash>
References: <20110714162614.GB26078@gnash> <4E1FB163.1010103@telus.net>
	<20110715135543.GB6893@gnash>
Message-ID: <4E20CDAB.4060100@telus.net>

What can I say, except "Welcome to my world"?   It's not easy making 
things robust.  I don't have any more ideas at present a fix or new 
approach that would make more of the test cases work.

Martin


On 7/15/2011 6:55 AM, Sandro Santilli wrote:
> On Thu, Jul 14, 2011 at 08:17:55PM -0700, Martin Davis wrote:
>> Yes, union() is supposed to fully node linework.
>>
>> This case works fine in JTS 1.11 (and JTS 1.12) - i.e. running the
>> equivalent of polygonize( union( boundary(A),  B).  The output from
>> the union checks out as being fully noded, and the polygonize
>> produces 2 valid polygons.
>>
>> So possibly this is one of those numerical issues which shows up in
>> GEOS in native code, but not in JTS in Java?  This maybe one of
>> those cases where GEOS and JTS need to be traced through in parallel
>> (which seems really painful, but I think you've done this in the
>> past, right?)
> Found.
>
> Contrary to JTS, which engages SnapRounding on first robustness failure,
> GEOS first tries with a pure CommonBitsRemover approach:
>
> Trying with original input.
> Original exception: TopologyException: found non-noded intersection between LINESTRING (1.72293e+06 4.78835e+06, 1.72293e+06 4.78835e+06) and LINESTRING (1.72293e+06 4.78835e+06, 1.72293e+06 4.78834e+06) at 1.72293e+06 4.78835e+06
> Trying with Common Bits Remover (CBR)
>
> I've seen in the past already that re-adding previously removed common
> bits may introduce invalidities (we discussed this in another occasion).
> That's because some of the lowermost bits fall off possibly moving the
> vertices to fall on a given grid. Evidentily this was the case in GEOS,
> where the output from Union against the shifted geometries was fully noded
> but became non-noded when re-adding common bits.
>
> Indeed going SnapRounding directly gives a fully noded output !
> But it gives failures (found non-noded intersection) in a
> couple of testcase:
>
>   bug360.xml (http://trac.osgeo.org/geos/ticket/360) [JTS works]
>   bug392.xml (http://trac.osgeo.org/geos/ticket/392) [JTS throws an exception!]
>
> --strk;
>
>    ()   Free GIS&  Flash consultant/developer
>    /\   http://strk.keybit.net/services.html
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>
>
> -----
> No virus found in this message.
> Checked by AVG - www.avg.com
> Version: 10.0.1390 / Virus Database: 1516/3764 - Release Date: 07/14/11
>
>
From geos-trac at osgeo.org  Mon Jul 18 03:22:07 2011
From: geos-trac at osgeo.org (GEOS)
Date: Mon Jul 18 21:44:00 2011
Subject: [geos-devel] Re: [GEOS] #383: huge memory cost and crash in buffer
In-Reply-To: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
References: <046.617044d0ed8dc36f2f42036870494313@osgeo.org>
Message-ID: <055.d43d353f5e6eb588da2c8f9d1d7d1d83@osgeo.org>

#383: huge memory cost and crash in buffer
------------------------+---------------------------------------------------
 Reporter:  atubar      |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  GEOS Future               
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:  buffer                    
------------------------+---------------------------------------------------
Changes (by strk):

  * keywords:  => buffer
  * version:  3.2.0 => svn-trunk
  * milestone:  3.2.1 => GEOS Future


Comment:

 this is an issue with the buffer algorithm itself (from JTS). A possible
 solution could be splitting the line in smaller portions, buffer each one
 in turn and then finally union them togheter.

 It is still an issue with trunk and won't be changed in 3.2, so changing
 the milestone.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/383#comment:9>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Mon Jul 18 03:34:34 2011
From: geos-trac at osgeo.org (GEOS)
Date: Mon Jul 18 21:57:09 2011
Subject: [geos-devel] [GEOS] #460: Add 'M' EWKB support to WKBReader
Message-ID: <044.52b3cedee2fb09243c37de0f34190f70@osgeo.org>

#460: Add 'M' EWKB support to WKBReader
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 Current WKBReader misinterprets EWKB with M values (The PostGIS extension
 to WKB).
 Correctly handles SRID and Z in it though...

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/460>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 07:48:53 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 09:20:13 2011
Subject: [geos-devel] Re: [GEOS] #454: EMPTY return from GEOSOffsetCurve
	with distance 0
In-Reply-To: <044.81e7021b7eee95be42e24e457ac8da2d@osgeo.org>
References: <044.81e7021b7eee95be42e24e457ac8da2d@osgeo.org>
Message-ID: <053.056e3421d078a9338c7d5740e35a2600@osgeo.org>

#454: EMPTY return from GEOSOffsetCurve with distance 0
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.3.1                     
Component:  Default     |      Version:  3.3.0                     
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => fixed


Comment:

 Fixed in r3439 (trunk) and r3440 (3.3 branch)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/454#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 07:50:45 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 09:22:13 2011
Subject: [geos-devel] Re: [GEOS] #460: Add 'M' EWKB support to WKBReader
In-Reply-To: <044.52b3cedee2fb09243c37de0f34190f70@osgeo.org>
References: <044.52b3cedee2fb09243c37de0f34190f70@osgeo.org>
Message-ID: <053.04e012f0e2cadc702428ff2b9a4a10e3@osgeo.org>

#460: Add 'M' EWKB support to WKBReader
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  3.4.0                     
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
Changes (by strk):

  * version:  3.3.0 => svn-trunk
  * type:  defect => enhancement
  * milestone:  3.3.1 => 3.4.0


Comment:

 This is really an enhancement, not a bug..

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/460#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 07:53:10 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 09:24:45 2011
Subject: [geos-devel] Re: [GEOS] #355: CAPI: SRID in WKT Reader and Writer
In-Reply-To: <044.f51ef556750ac86e68a1a6805f1a9335@osgeo.org>
References: <044.f51ef556750ac86e68a1a6805f1a9335@osgeo.org>
Message-ID: <053.ebffa70fbc8284bec30109415bc589ae@osgeo.org>

#355: CAPI: SRID in WKT Reader and Writer
-------------------------+--------------------------------------------------
 Reporter:  strk         |       Owner:  geos-devel@?              
     Type:  enhancement  |      Status:  new                       
 Priority:  major        |   Milestone:  GEOS Future               
Component:  Default      |     Version:  svn-trunk                 
 Severity:  Unassigned   |    Keywords:                            
-------------------------+--------------------------------------------------
Changes (by strk):

  * version:  3.0.3 => svn-trunk
  * milestone:  => GEOS Future


-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/355#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 07:55:19 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 09:27:01 2011
Subject: [geos-devel] Re: [GEOS] #320: factory for std::vector
In-Reply-To: <048.bbea100f9686cdfd90a417fddd050dc1@osgeo.org>
References: <048.bbea100f9686cdfd90a417fddd050dc1@osgeo.org>
Message-ID: <057.fdc33782350494f3e98505982890b2a4@osgeo.org>

#320: factory for std::vector
------------------------+---------------------------------------------------
 Reporter:  12345678    |       Owner:  geos-devel@?              
     Type:  task        |      Status:  new                       
 Priority:  major       |   Milestone:  GEOS Future               
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
Changes (by strk):

  * milestone:  => GEOS Future


-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/320#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 07:56:38 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 09:28:26 2011
Subject: [geos-devel] Re: [GEOS] #389: BufferOp assertion on make check
In-Reply-To: <049.8222eeaa4499685fecba3f8c2f719af9@osgeo.org>
References: <049.8222eeaa4499685fecba3f8c2f719af9@osgeo.org>
Message-ID: <058.4e56395376b9974c944ad9400db82c80@osgeo.org>

#389: BufferOp assertion on make check
------------------------+---------------------------------------------------
 Reporter:  alopezcia   |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:                            
 Severity:  Unassigned  |   Resolution:  worksforme                
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => worksforme


Comment:

 closed due to lack of feedback

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/389#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 10:07:40 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 11:47:01 2011
Subject: [geos-devel] Re: [GEOS] #439: St9bad_alloc GEOS throws intersect
	error!
In-Reply-To: <050.968257fe0fb28231216c425dc91900a0@osgeo.org>
References: <050.968257fe0fb28231216c425dc91900a0@osgeo.org>
Message-ID: <059.aafbf3c82f35a1106a0d85c513c03cb2@osgeo.org>

#439: St9bad_alloc GEOS throws intersect error!
--------------------------+-------------------------------------------------
 Reporter:  marquis103    |        Owner:  geos-devel@?              
     Type:  defect        |       Status:  closed                    
 Priority:  major         |    Milestone:                            
Component:  Default       |      Version:  3.2.0                     
 Severity:  Unassigned    |   Resolution:  wontfix                   
 Keywords:  ST9bad_alloc  |  
--------------------------+-------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => wontfix


Comment:

 Lack of response...

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/439#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 11:15:53 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 12:58:43 2011
Subject: [geos-devel] Re: [GEOS] #457: Port ConvexHull robustness fix from
	JTS-1.13
In-Reply-To: <044.299a091467058ca039078a30e4a72a9d@osgeo.org>
References: <044.299a091467058ca039078a30e4a72a9d@osgeo.org>
Message-ID: <053.77a484db265aceedc970179bc43a68d1@osgeo.org>

#457: Port ConvexHull robustness fix from JTS-1.13
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 The test added in ConvexHullTest.xml doesn't trigger robustness issues in
 GEOS, I wonder if the modification in JTS were due to different
 CGAlgorithms results (orientation index...)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/457#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 11:41:21 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 13:25:28 2011
Subject: [geos-devel] Re: [GEOS] #457: Port ConvexHull robustness fix from
	JTS-1.13
In-Reply-To: <044.299a091467058ca039078a30e4a72a9d@osgeo.org>
References: <044.299a091467058ca039078a30e4a72a9d@osgeo.org>
Message-ID: <053.27cc13b65461ca4ccb58300023578ae1@osgeo.org>

#457: Port ConvexHull robustness fix from JTS-1.13
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:  3.4.0                     
Component:  Default     |      Version:  3.3.0                     
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => fixed
  * milestone:  3.3.1 => 3.4.0


Comment:

 In r3444 I've ported nonetheless the changes in ConvexHull, will not
 backport w/out a test being able to replicate the robustness issue.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/457#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 11:53:54 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 13:38:43 2011
Subject: [geos-devel] Re: [GEOS] #459: Union fails to fully node input
	linework
In-Reply-To: <044.a0edbb62f48168614e309db04bc20760@osgeo.org>
References: <044.a0edbb62f48168614e309db04bc20760@osgeo.org>
Message-ID: <053.65b8abd045d7f940364fa84ee43ba915@osgeo.org>

#459: Union fails to fully node input linework
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.1                     
Component:  Default     |     Version:  3.3.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 My latest finding is that the Union operation triggered a
 TopologyException thus entered the heuristics used to reduce precision. In
 GEOS this is first attempting to compute the union with a version of the
 input geometries having common bits removed and then re-adding the bits in
 the result.

 So my current assumption is that the noding is lost during re-introduction
 of the bits. I've already seen similar cases in the past, where re-adding
 bits resulted in the constitution of an invalid geometry. Indeed passing
 the result again trough an union makes it properly noded (evidently
 because on this second union operation there's no TopologyException being
 thrown).

 JTS does SnapRounding as first heuristic, which indeed gives a fully noded
 result at first try.
 If we did the same we'd fail on two other known cases: bug #360 and bug
 #392.

 My best bet here is to run a noding test at the end of common bits re-
 addition and continue trough the heuristics methods list if it fails...

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/459#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 16:55:12 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 18:56:21 2011
Subject: [geos-devel] Re: [GEOS] #450: RobustDeterminant is not robust
In-Reply-To: <044.d9632f4f274985a7dc23afb61bd26622@osgeo.org>
References: <044.d9632f4f274985a7dc23afb61bd26622@osgeo.org>
Message-ID: <053.2ca8eb91e799e5ac59ed1f3aa476f767@osgeo.org>

#450: RobustDeterminant is not robust
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  blocker     |   Milestone:  3.2.3                     
Component:  Default     |     Version:  3.2.2                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
Description changed by strk:

Old description:

> This is an already resolved issue in version 3.3.0 (bug 357).
> This ticket is to backport the fix to the 3.2 branch.

New description:

 This is an already resolved issue in version 3.3.0 (bug #357).
 This ticket is to backport the fix to the 3.2 branch.

--

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/450#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Jul 20 17:12:31 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Jul 20 19:14:36 2011
Subject: [geos-devel] Re: [GEOS] #450: RobustDeterminant is not robust
In-Reply-To: <044.d9632f4f274985a7dc23afb61bd26622@osgeo.org>
References: <044.d9632f4f274985a7dc23afb61bd26622@osgeo.org>
Message-ID: <053.381a0d9774f8c01aa82870df694983a0@osgeo.org>

#450: RobustDeterminant is not robust
------------------------+---------------------------------------------------
 Reporter:  strk        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  blocker     |    Milestone:  3.2.3                     
Component:  Default     |      Version:  3.2.2                     
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:  history     |  
------------------------+---------------------------------------------------
Changes (by strk):

  * keywords:  => history
  * status:  new => closed
  * resolution:  => fixed


Comment:

 Backported with r3446.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/450#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Mon Jul 25 06:38:39 2011
From: geos-trac at osgeo.org (GEOS)
Date: Mon Jul 25 08:48:18 2011
Subject: [geos-devel] [GEOS] #461: geos-3.3.0 build fails on Solaris 10
 Sparc - Sun Studio 12.2
Message-ID: <049.d63ea81896a834f328d66e7c71777d51@osgeo.org>

#461: geos-3.3.0 build fails on Solaris 10 Sparc - Sun Studio 12.2
-------------------------+--------------------------------------------------
 Reporter:  sandy2010    |       Owner:  geos-devel@?              
     Type:  defect       |      Status:  new                       
 Priority:  minor        |   Milestone:  3.3.1                     
Component:  Default      |     Version:  3.3.0                     
 Severity:  Significant  |    Keywords:  SunOS, Solaris 10,        
-------------------------+--------------------------------------------------
 I'm building geos-3.3.0 on Solaris 10 64bit Sparc zone and got the
 following error:

 make[4]: Entering directory `/opt/geos-3.3.0/src/algorithm/locate'
 source='IndexedPointInAreaLocator.cpp'
 object='IndexedPointInAreaLocator.lo' libtool=yes \
 DEPDIR=.deps depmode=none /bin/bash ../../../depcomp \
 /bin/bash ../../../libtool --tag=CXX   --mode=compile CC -m64 -KPIC
 -DHAVE_CONFIG_H -I. -I../../../include -I../../../include/geos
 -I../../../include    -pedantic  -library=stlport4 -library=Crun -c -o
 IndexedPointInAreaLocator.lo IndexedPointInAreaLocator.cpp
 libtool: compile:  CC -m64 -KPIC -DHAVE_CONFIG_H -I. -I../../../include
 -I../../../include/geos -I../../../include -pedantic -library=stlport4
 -library=Crun -c IndexedPointInAreaLocator.cpp  -KPIC -DPIC -o
 .libs/IndexedPointInAreaLocator.o
 CC: Warning: Option -pedantic passed to ld, if ld is invoked, ignored
 otherwise
 "../../../include/geos/platform.h", line 107: Error: #error "Can not
 compile without isnan function or macro".
 make[4]: *** [IndexedPointInAreaLocator.lo] Error 1
 make[4]: Leaving directory `/opt/geos-3.3.0/src/algorithm/locate'

 I'm using SunStudip 12.2 and my configure switches looks like this:
 ./configure --prefix=/opt/geos-3.3.0/inst --disable-inline
 CXXFLAGS="-library=stlport4 -library=Crun" LDFLAGS="-lm -m64"

 Is there a patch available to this?

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/461>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From candia234 at hotmail.com  Tue Jul 26 12:28:45 2011
From: candia234 at hotmail.com (Gloria Candia Cuno)
Date: Tue Jul 26 16:16:28 2011
Subject: [geos-devel] Ocher
Message-ID: <SNT139-W2355C61A9FAB764E9672CAFA320@phx.gbl>


Greystone color 

 
I found a site to sell electronic products with very competitive price. Laptop ,iPhone even Motorcycles are very popular . one week ago, today I've got it .  Amazing,beyond my imagination, it's genuine and as good as expected,but much cheaper. I'm pleased to share this good news  with you! 
if you like you can contact them : www.youdobuy.com 
Email?youdobuy@188.com
MSN?youdobuy@hotmail.com
 
 May the coming New Year bring you joy, love and peace.  		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110726/e4ca51ef/attachment.html
From geos-trac at osgeo.org  Sun Jul 31 13:23:34 2011
From: geos-trac at osgeo.org (GEOS)
Date: Sun Jul 31 23:50:03 2011
Subject: [geos-devel] Re: [GEOS] #299:
 geos::geom::CoordinateArraySequenceFactory unit test failing
In-Reply-To: <047.d99b68335c5950ad504ff227278ead4a@osgeo.org>
References: <047.d99b68335c5950ad504ff227278ead4a@osgeo.org>
Message-ID: <056.ba7093c6513ee77ce23b663584456b4e@osgeo.org>

#299: geos::geom::CoordinateArraySequenceFactory unit test failing
----------------------------+-----------------------------------------------
 Reporter:  pramsey         |        Owner:  geos-devel@?              
     Type:  defect          |       Status:  new                       
 Priority:  major           |    Milestone:  GEOS Future               
Component:  Unit Tests      |      Version:  svn-trunk                 
 Severity:  Unassigned      |   Resolution:                            
 Keywords:  mac,macosx,osx  |  
----------------------------+-----------------------------------------------

Comment(by kyngchaos):

 Well, gcc-4.0 seems to be working.  '''BUT.'''

 In OS X 10.7 Lion/Xcode 4.1 Apple dropped gcc-4.0!  Probably goes along
 with dropping the 10.5 SDK (10.5 used gcc 4.0).

 Maybe I'll have better luck with the now-default llvm, if I can get it to
 work.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/299#comment:24>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From woklist at kyngchaos.com  Sun Jul 31 13:23:39 2011
From: woklist at kyngchaos.com (William Kyngesburye)
Date: Sun Jul 31 23:50:10 2011
Subject: [geos-devel] OS X 10.7 Lion llvm problem
Message-ID: <46D8FB5C-0BCC-4894-80DB-DA60A5DF1EFE@kyngchaos.com>

Lion's Xcode now defaults to the llvm compiler (symlink gcc and g++ to the llvm).  I get an error:

Linking CXX shared library ../lib/GEOS.framework/Versions/3/GEOS
Undefined symbols for architecture x86_64:
  "__ZNSt8auto_ptrIN4geos4geom8EnvelopeEEcvSt12auto_ptr_refIT_EIS2_EEv", referenced from:
      virtual thunk to geos::geom::GeometryCollection::computeEnvelopeInternal() constin GeometryCollection.cpp.o
  "std::auto_ptr<geos::geom::Envelope>::auto_ptr(std::auto_ptr_ref<geos::geom::Envelope>)", referenced from:
      virtual thunk to geos::geom::GeometryCollection::computeEnvelopeInternal() constin GeometryCollection.cpp.o
ld: symbol(s) not found for architecture x86_64


Is this worth a bug report?  

standard gcc/g++ (configure with gcc-4.2/g++-4.2) compiles OK.  Though it brings back the test problem:

http://trac.osgeo.org/geos/ticket/299

-----
William Kyngesburye <kyngchaos*at*kyngchaos*dot*com>
http://www.kyngchaos.com/

"Mon Dieu! but they are all alike.  Cheating, murdering, lying, fighting, and all for things that the beasts of the jungle would not deign to possess - money to purchase the effeminate pleasures of weaklings.  And yet withal bound down by silly customs that make them slaves to their unhappy lot while firm in the belief that they be the lords of creation enjoying the only real pleasures of existence....

- the wisdom of Tarzan


From strk at keybit.net  Sun Jul 31 14:18:08 2011
From: strk at keybit.net (Sandro Santilli)
Date: Mon Aug  1 00:48:04 2011
Subject: [geos-devel] OS X 10.7 Lion llvm problem
In-Reply-To: <46D8FB5C-0BCC-4894-80DB-DA60A5DF1EFE@kyngchaos.com>
References: <46D8FB5C-0BCC-4894-80DB-DA60A5DF1EFE@kyngchaos.com>
Message-ID: <20110731181808.GA2207@gnash>

On Sun, Jul 31, 2011 at 12:23:39PM -0500, William Kyngesburye wrote:
> Lion's Xcode now defaults to the llvm compiler (symlink gcc and g++ to the llvm).  I get an error:
> 
> Linking CXX shared library ../lib/GEOS.framework/Versions/3/GEOS
> Undefined symbols for architecture x86_64:
>   "__ZNSt8auto_ptrIN4geos4geom8EnvelopeEEcvSt12auto_ptr_refIT_EIS2_EEv", referenced from:
>       virtual thunk to geos::geom::GeometryCollection::computeEnvelopeInternal() constin GeometryCollection.cpp.o
>   "std::auto_ptr<geos::geom::Envelope>::auto_ptr(std::auto_ptr_ref<geos::geom::Envelope>)", referenced from:
>       virtual thunk to geos::geom::GeometryCollection::computeEnvelopeInternal() constin GeometryCollection.cpp.o
> ld: symbol(s) not found for architecture x86_64
> 
> 
> Is this worth a bug report?  

Probably, on OS X tracker.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
