From pramsey at cleverelephant.ca  Fri Jul  1 10:11:24 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 1 Jul 2022 10:11:24 -0700
Subject: [geos-devel] GEOS 3.11.0 Released
Message-ID: <006C6F65-A22A-47AA-AFB3-2C17C958C856@cleverelephant.ca>

Happy Canada Day! ??

The 3.11.0 release of GEOS is now available to download at http://libgeos.org/usage/download/

This release includes new features for building "concave hulls" for both point and polygon input. For polygon input, the hull will be guaranteed to not cross into the interiors of the input polygons.

The line merger has been enhanced to support a mode that only merges lines which share orientation.

The offset curve algorithm has been updated to be more reliable for different kinds of semi-degenerate inputs, and may output different curves than the previous implementation, for those kinds of inputs. For "normal" inputs, the results should look very much like the old implementation.

As usual, numerous bugs have been fixed, and a few performance improvements discovered and implemented.

- New things:
  - OffsetCurve (GH-530, Paul Ramsey/Martin Davis)
  - ConcaveHull (GH-549, Paul Ramsey/Martin Davis)
  - PolygonHull (GH-603, Paul Ramsey/Martin Davis)
  - LineMerger directed option (GH-597, Sergei Sh)
  - CAPI: GEOSHilbertCode (GH-556, Brendan Ward)
  - CAPI: GEOSGeom_createRectangle (GH-558, Brendan Ward)
  - CAPI: GEOSGeom_transformXY (GH-563, Dan Baston/Brendan Ward)
  - CAPI: GEOSRemoveRepeatedPoints (GH-599, Paul Ramsey)
  - CAPI: GEOSLineMergeDirected (GH-597, Sergei Sh)
  - CAPI: setFixStructure for WKB/WKT readers to automatically repair
    structural errors in the input (GH-639, Paul Ramsey)

- Fixes/Improvements:
  - Fix unaryUnion to avoid segfault with empty polygon (GH-501, Mike Taves)
  - Fix SnapRoundingNoder to use tolerance in noding; also fixes GeometryPrecisionReducer (GH-504, Sergei)
  - Allow direct setting of grid size (GH-513, Martin Davis)
  - Allow GEOS to be used as a CMake subproject (GH-518, Robert Coup)
  - Remove .inl inline files in favour of header declaration (GH-543, Paul Ramsey)
  - Add SnappingNoder seeding (Martin Davis)
  - Add OverlayNG area check heuristic (JTS-812, Paul Ramsey)
  - Fix RelateOp (and intersects predicate) for lines with intersections very near boundary (GH-570, Martin Davis)
  - Fix IsValidOp to handle repeated node points (JTS-845, Martin Davis)
  - Fix IsSimpleOp to handle closed LineStrings with repeated endpoints (JTS-851, Martin Davis)
  - Fix LengthIndexedLine (via LengthLocationMap fix) (JTS-859, Martin Davis)
  - Fix PolygonHoleJoiner (JTS-862, Martin Davis)
  - Improve `test_geos_unit` application error checking and reporting
  - Fix MinimumDiameter getMinimumRectangle for flat input (JTS-875, Martin Davis)
  - Fix BufferOp inverted ring check (JTS-878, Martin Davis)
  - Fix OverlayNG geomunion to avoid lines in result (Martin Davis)




From pramsey at cleverelephant.ca  Mon Jul  4 11:43:37 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 4 Jul 2022 11:43:37 -0700
Subject: [geos-devel] Performance 3.10 -> 3.11
Message-ID: <CACowWR22CLU5w7Na9iYowBduZw1BATZ+bqxf2sHwDd+tC2JwCA@mail.gmail.com>

I thought I'd run the "standard" performance comparison set over the
latest release. We haven't really done any broad-based performance
work this cycle, so anything we picked up is incidental, and in
general the changes were quite small.

The only performance regression was in basic STRtree queries. (Which
should probably be renamed for clarity, since it's a query on the
default CAPI tree, which is now the TemplateRtree). The measurements
were all pretty stable, which was gratifying, so for the differences
of 4% or so I feel pretty confident of them. The < 1% differences
should probably be read as "samesame".

Not sure what/where a next best place to attach performance
systematically is. For overlay, I'd say the spare copy of the data we
make in the NodedSegmentString could be a target. Would require a
difference lifecycle contract for the Noder, however, but could yield
some widely effective gains, since it's such heavily used code.

P.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: screenshot_917.png
Type: image/png
Size: 110569 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220704/8493d146/attachment-0001.png>

From pramsey at cleverelephant.ca  Mon Jul  4 11:45:00 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 4 Jul 2022 11:45:00 -0700
Subject: [geos-devel] Performance 3.10 -> 3.11
In-Reply-To: <CACowWR22CLU5w7Na9iYowBduZw1BATZ+bqxf2sHwDd+tC2JwCA@mail.gmail.com>
References: <CACowWR22CLU5w7Na9iYowBduZw1BATZ+bqxf2sHwDd+tC2JwCA@mail.gmail.com>
Message-ID: <CACowWR1coMYUDXZU8fXC=quaue5fXpWQsqvs33hW5coofVHV8w@mail.gmail.com>

Forgot to note the source of the test framework, for those interesting
in running themselves:

https://github.com/pramsey/geos-performance

On Mon, Jul 4, 2022 at 11:43 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>
> I thought I'd run the "standard" performance comparison set over the
> latest release. We haven't really done any broad-based performance
> work this cycle, so anything we picked up is incidental, and in
> general the changes were quite small.
>
> The only performance regression was in basic STRtree queries. (Which
> should probably be renamed for clarity, since it's a query on the
> default CAPI tree, which is now the TemplateRtree). The measurements
> were all pretty stable, which was gratifying, so for the differences
> of 4% or so I feel pretty confident of them. The < 1% differences
> should probably be read as "samesame".
>
> Not sure what/where a next best place to attach performance
> systematically is. For overlay, I'd say the spare copy of the data we
> make in the NodedSegmentString could be a target. Would require a
> difference lifecycle contract for the Noder, however, but could yield
> some widely effective gains, since it's such heavily used code.
>
> P.

