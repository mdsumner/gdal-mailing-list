From Barend.Gehrels at geodan.nl  Tue Sep  1 19:21:53 2009
From: Barend.Gehrels at geodan.nl (Barend Gehrels)
Date: Tue Sep  1 19:23:01 2009
Subject: [geos-devel]
	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today	August 24, 2009]
In-Reply-To: <4a9c56d5.21d7720a.64a3.081d@mx.google.com>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>
	<4a9c56d5.21d7720a.64a3.081d@mx.google.com>
Message-ID: <4A9DAC91.90400@geodan.nl>


Hartmut Kaiser wrote:
>> Martin Davis wrote:
>>     
>>> Hmmm... GEOS comes off rather badly compared to GGL.  Is that because
>>>  of memory access issues?  Or perhaps the fact that less code is
>>> inlined?
>>>       
>> It's hard to judge, but I'm quite sure inlining is only a small and
>> minor optimisation available.
>> GEOS and GGL follow completely different programming paradigms.
>> GGL is strongly based on static polymorphism resolved and calculated in
>> compile-time. This increases changes that compilers will apply finest
>> possible optimisations.
>>     
>
> >From what I've seen in GEOS and GGL, GEOS is mostly relying on dynamic
> memory allocation, where GGL tries to avoid that. GEOS relies on runtime
> polymorphism, where GGL relies on compile time (static polymorphism). GEOS
> is built using Java-ish constructs, where GGL is build the C++ way...
>
> All of this influences the runtime behavior, but there might be more
> reasons. Please note, I didn't do any thorough analysis, all of this is just
> guessing.
>   
I do not know GEOS very well but I think that Hartmut is right here. GGL 
uses the std-library for storage of coordinates. If I'm right, GEOS 
calls a memory allocation for every point (of a polygon). And indeed GGL 
uses static polymorphism. The consequence of this is also that there is 
no polygon.area() function, but an area(polygon) function, taking any 
polygon which fulfills the polygon concept.

Regards, Barend


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20090902/525bb3a0/attachment.html
From Barend.Gehrels at geodan.nl  Tue Sep  1 19:31:57 2009
From: Barend.Gehrels at geodan.nl (Barend Gehrels)
Date: Tue Sep  1 19:33:01 2009
Subject: [geos-devel]
	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9C25E0.5040009@refractions.net>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>
	<4A9C25E0.5040009@refractions.net>
Message-ID: <4A9DAEED.4090004@geodan.nl>



Martin Davis wrote:
> Ok, I can see that.  So in other words, GEOS uses a dynamic coordinate 
> access paradigm, which gives flexibility to access different data 
> structures, but can't be optimized by the compiler?
It is not only the compiler. Dynamic memory allocations are relatively 
slow. Allocating 1000 times a point is slower than allocating once 1000 
points.
>
> Is this the reason for the performance difference for *all* the other 
> libraries which beat it in peformance?  Or maybe some of them *don't* 
> provide the dynamic data structure wrapper, and hence also can be 
> optimized by the compiler (but thus they are less adaptable for use 
> with external data structures).
I don't know this for sure but I think most allocate for the whole 
polygon or linestring at once. GPC is e.g. C, not C++.
>
> I presume it would be a big job to convert GEOS to a template-based 
> paradigm?  
Probably. What would be possible and feasable is adapting GEOS's 
datastructures (polygon) to GGL's concepts and then call e.g. GGL's 
intersection. It would at least be a nice experiment. You still have the 
dynamic memory then, but you can see which part is the algorithm and 
which part is the memory access

> It's somewhat annoying that the problem of efficient memory access and 
> compiler optimization is quite orthogonal to the actual geometric 
> algorithms, and yet it seems difficult to express the algorithms in a 
> sufficiently abstract way to allow optimizations to take place.
I don't see this. Using the std-library, both access to a vector and 
(temporary) storage using a vector or deque are usually quite fast.

Regards, Barend



From mbdavis at refractions.net  Tue Sep  1 19:57:29 2009
From: mbdavis at refractions.net (Martin Davis)
Date: Tue Sep  1 19:54:52 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9DAEED.4090004@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>
	<4A9DAEED.4090004@geodan.nl>
Message-ID: <4A9DB4E9.9080506@refractions.net>

One thing to make clear - GEOS does not alway require allocations to be 
done pointwise.  The CoordinateSequence interface and various subclasses 
provide the option of allocating all storage for a list of points in a 
single allocation.

I would certainly be curious to see how the algorithmic component of 
GEOS compares to GGL (or any other library).  The JTS/GEOS predicate and 
overlay algorithms were developed with the primary goal being first 
generality and then performance.  So no doubt there's better ways of 
doing things. 

In the GEOS algorithms at least I don't see any way of avoiding dynamic 
allocation, since there's no way to predict a priori how many line 
segment intersections will be found, or how what the structure of the 
output geometry is.  Does GGL avoid this problem in some way?

Barend Gehrels wrote:
>
>
> Martin Davis wrote:
>> Ok, I can see that.  So in other words, GEOS uses a dynamic 
>> coordinate access paradigm, which gives flexibility to access 
>> different data structures, but can't be optimized by the compiler?
> It is not only the compiler. Dynamic memory allocations are relatively 
> slow. Allocating 1000 times a point is slower than allocating once 
> 1000 points.
>>
>> Is this the reason for the performance difference for *all* the other 
>> libraries which beat it in peformance?  Or maybe some of them *don't* 
>> provide the dynamic data structure wrapper, and hence also can be 
>> optimized by the compiler (but thus they are less adaptable for use 
>> with external data structures).
> I don't know this for sure but I think most allocate for the whole 
> polygon or linestring at once. GPC is e.g. C, not C++.
>>
>> I presume it would be a big job to convert GEOS to a template-based 
>> paradigm?  
> Probably. What would be possible and feasable is adapting GEOS's 
> datastructures (polygon) to GGL's concepts and then call e.g. GGL's 
> intersection. It would at least be a nice experiment. You still have 
> the dynamic memory then, but you can see which part is the algorithm 
> and which part is the memory access
>
>> It's somewhat annoying that the problem of efficient memory access 
>> and compiler optimization is quite orthogonal to the actual geometric 
>> algorithms, and yet it seems difficult to express the algorithms in a 
>> sufficiently abstract way to allow optimizations to take place.
> I don't see this. Using the std-library, both access to a vector and 
> (temporary) storage using a vector or deque are usually quite fast.
>
> Regards, Barend
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel
>

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From Barend.Gehrels at geodan.nl  Wed Sep  2 05:39:32 2009
From: Barend.Gehrels at geodan.nl (Barend Gehrels)
Date: Wed Sep  2 05:43:05 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9DB4E9.9080506@refractions.net>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>
	<4A9DB4E9.9080506@refractions.net>
Message-ID: <4A9E3D54.7010201@geodan.nl>



Martin Davis wrote:
> One thing to make clear - GEOS does not alway require allocations to 
> be done pointwise.  The CoordinateSequence interface and various 
> subclasses provide the option of allocating all storage for a list of 
> points in a single allocation.
OK, sorry for my misunderstanding.

I just debugged the Geos area routine, what could then be the reason 
that it is relatively slow? It might be that it is accessed as a vector, 
indeed, but not as an iterator, so getting points using "return 
(*vect)[pos]" is not efficient as it could be using iterators. Besides 
that it is probably no problem to make the getAt function inline.


>
> I would certainly be curious to see how the algorithmic component of 
> GEOS compares to GGL (or any other library). 

The GGL overlay algorithm will be described in a paper. It is a modern 
variant of the classic Weiler-Atherton algorithm.

> The JTS/GEOS predicate and overlay algorithms were developed with the 
> primary goal being first generality and then performance.  So no doubt 
> there's better ways of doing things.
Actually the GGL algorithm is generic as well, in the sense that it is 
able to overlay polygons and polygon/rectangle (clipping) with the same 
algorithm. The only difference is getting the intersections, which is 
more efficient for the rectangle case. Also intersection/union are 
implemented in one algorithm.

> In the GEOS algorithms at least I don't see any way of avoiding 
> dynamic allocation, since there's no way to predict a priori how many 
> line segment intersections will be found, or how what the structure of 
> the output geometry is.  Does GGL avoid this problem in some way?
Yes. It will be described, but in short: we don't insert the found 
intersection points into the polygons (as done in many algorithms, but I 
don't know about GEOS) but register them separately. That saves a copy, 
plus many inserts (shifts). However, it requires somewhat more 
bookkeeping. So intersected polygons are assembled in the end, in 
between there are no large pieces of memory allocation.


By the way, everyone is of course invited to check the geos comparison 
source files, it might be that I've done something not in the most 
efficient way. It is the intention to have it as efficient as possible, 
of course. Sources are at boost SVN now: 
http://svn.boost.org/svn/boost/sandbox/ggl/other/comparisons/

Regards, Barend






From strk at keybit.net  Wed Sep  2 05:53:25 2009
From: strk at keybit.net (strk)
Date: Wed Sep  2 05:53:29 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9E3D54.7010201@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>
	<4A941988.4070701@refractions.net>
	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>
	<4A9C05D5.5070906@refractions.net> <4A9C1FFF.1090701@loskot.net>
	<4A9C25E0.5040009@refractions.net> <4A9DAEED.4090004@geodan.nl>
	<4A9DB4E9.9080506@refractions.net> <4A9E3D54.7010201@geodan.nl>
Message-ID: <20090902095325.GH40687@keybit.net>

On Wed, Sep 02, 2009 at 11:39:32AM +0200, Barend Gehrels wrote:

> I just debugged the Geos area routine, what could then be the reason 
> that it is relatively slow? It might be that it is accessed as a vector, 
> indeed, but not as an iterator, so getting points using "return 
> (*vect)[pos]" is not efficient as it could be using iterators. Besides 
> that it is probably no problem to make the getAt function inline.

getAt is a virtual function, can't be inlined.
Templates would make it a lot better, but far away 
from 1:1 mapping with Java.

Beside, how do you handle memory management in GGL ?


--strk;

 Free GIS & Flash consultant/developer      ()  ASCII Ribbon Campaign
 http://foo.keybit.net/~strk/services.html  /\  Keep it simple! 
From Barend.Gehrels at geodan.nl  Wed Sep  2 07:45:37 2009
From: Barend.Gehrels at geodan.nl (Barend Gehrels)
Date: Wed Sep  2 07:48:07 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <20090902095325.GH40687@keybit.net>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>
	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>
	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>
	<4A9E3D54.7010201@geodan.nl> <20090902095325.GH40687@keybit.net>
Message-ID: <4A9E5AE1.7050402@geodan.nl>


>> I just debugged the Geos area routine, what could then be the reason 
>> that it is relatively slow? It might be that it is accessed as a vector, 
>> indeed, but not as an iterator, so getting points using "return 
>> (*vect)[pos]" is not efficient as it could be using iterators. Besides 
>> that it is probably no problem to make the getAt function inline.
>>     
>
> getAt is a virtual function, can't be inlined.
>   
Right, I debugged in CoordinateArraySequence, where it is not denoted 
virtual (the overloaded version is...), but I now saw that its parent 
indeed is virtual.

A (probably) working way to have less virtual calls (for area) then 
would be changing this:
        double bx=ring->getAt(i).x;
        double by=ring->getAt(i).y;
        double cx=ring->getAt(i+1).x;
        double cy=ring->getAt(i+1).y;

to this: Coordinate const& c = ring->getAt(i + 1 );
double cx = c.x, cy = c.y;
and have a previous_coordinate (b) for the getAt(i). Would save 3 
virtual calls + 3 times non-iterator-based vector access... I didn't try it.

This just in search of what would be the bottle neck, because the area 
algorithm itself is extremely simple.



> Templates would make it a lot better, but far away 
> from 1:1 mapping with Java.
>   
Sure, though Java also have templates now

> Beside, how do you handle memory management in GGL ?
>   
1) Using the std:: library. Where it is an optional template parameter, 
so you can have polygon<point> but also polygon<point, std::deque> for 
if you decide that you want a deque instead of a vector
2) Using concepts, actually a polygon or linestring can be anything as 
long as it fullfiles the concept. So having an iterator (for linestring 
that is enough), having traits te denote exterior/interior ring 
handling. In this way our library does not even now what is below the 
surface, it just uses it.

Regards, Barend

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20090902/9aea8c19/attachment-0001.html
From mateusz at loskot.net  Wed Sep  2 11:07:58 2009
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep  2 11:08:04 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9E5AE1.7050402@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>	<4A9E3D54.7010201@geodan.nl>
	<20090902095325.GH40687@keybit.net> <4A9E5AE1.7050402@geodan.nl>
Message-ID: <4A9E8A4E.2020508@loskot.net>

Barend Gehrels wrote:
> 
>>> I just debugged the Geos area routine, what could then be the reason
>>> that it is relatively slow? It might be that it is accessed as a
>>> vector, indeed, but not as an iterator, so getting points using
>>> "return (*vect)[pos]" is not efficient as it could be using
>>> iterators. Besides that it is probably no problem to make the getAt
>>> function inline.
>>>     
>>
>> getAt is a virtual function, can't be inlined.
>>   
> Right, I debugged in CoordinateArraySequence, where it is not denoted
> virtual (the overloaded version is...), but I now saw that its parent
> indeed is virtual.
> 
> A (probably) working way to have less virtual calls (for area) then
> would be changing this:
>        double bx=ring->getAt(i).x;
>        double by=ring->getAt(i).y;
>        double cx=ring->getAt(i+1).x;
>        double cy=ring->getAt(i+1).y;

It would be not a bad idea to help compiler to optimise as much as
possible:

double const cx = ...

Most people think it's too trivial to influence generated code,
but it may really help.

> to this:
> Coordinate const& c = ring->getAt(i + 1 );
> double cx = c.x, cy = c.y;

Best option possible.

> and have a previous_coordinate (b) for the getAt(i). Would save 3
> virtual calls + 3 times non-iterator-based vector access... I didn't try
> it.

Anyway, all the small things that "seem" trivial, make a big difference
in fact.

>> Templates would make it a lot better, but far away from 1:1 mapping
>> with Java.
>>   
> Sure, though Java also have templates now
> 
>> Beside, how do you handle memory management in GGL ?
>>   
> 1) Using the std:: library. Where it is an optional template parameter,
> so you can have polygon<point> but also polygon<point, std::deque> for
> if you decide that you want a deque instead of a vector

Plus, you can use your own containers or you can use your own allocators
with standard containers. It's not uncommon situation when specialised
allocators are really a good idea.

> 2) Using concepts, actually a polygon or linestring can be anything as
> long as it fullfiles the concept. So having an iterator (for linestring
> that is enough), having traits te denote exterior/interior ring
> handling. In this way our library does not even now what is below the
> surface, it just uses it.

This is an important detail.

One of the major feature of GGL is that it's extensible and
applicable to user-defined types that conform to concepts and contracts
defined by GGL. It is realised with use of abstractions
like iterator, range, collection which are orthogonal to specific types.

This makes it possible to design set of geometry or geometry-like
types or managed with sophisticated allocators, memory pools, etc.
and use them with GGL.

For example, it would be possible to specialise ggl::polygon with
stxxl::vector [1] and apply GGL algorithms on such container capable to
store very large number of elements.

[1] http://stxxl.sourceforge.net/

There are much more powerful options available like use of
concept of views [2], iterator adaptors [3], etc.

[2] http://www.zib.de/weiser/vtl/
[3] http://www.boost.org/doc/libs/1_39_0/libs/iterator/doc/index.html

Imagine calculation of length or transformation of coordinate of N
linestrings, both of M points, in single-pass using zip_iterator :-)

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org

From mbdavis at refractions.net  Wed Sep  2 12:00:53 2009
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep  2 11:58:11 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9E3D54.7010201@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>
	<4A9E3D54.7010201@geodan.nl>
Message-ID: <4A9E96B5.8050302@refractions.net>


> The GGL overlay algorithm will be described in a paper. It is a modern 
> variant of the classic Weiler-Atherton algorithm.
Have you done anything to make the algorithm robust?  My impression of 
this algorithm is that it might be more complex to make robust (although 
perhaps you can handle that in the intersection determination).
>
>> The JTS/GEOS predicate and overlay algorithms were developed with the 
>> primary goal being first generality and then performance.  So no 
>> doubt there's better ways of doing things.
> Actually the GGL algorithm is generic as well, in the sense that it is 
> able to overlay polygons and polygon/rectangle (clipping) with the 
> same algorithm. The only difference is getting the intersections, 
> which is more efficient for the rectangle case. Also 
> intersection/union are implemented in one algorithm.
The JTS/GEOS generality extends to handling all combinations of 
polygons, lines and points. 

As you say, rectangles are special cases of polygons which allow faster 
intersection detection, and which don't have any self-intersections, so 
don't need an initial topology building step.  JTS/GEOS has some 
optimized code for rectangle handling, but there's still opportunity for 
further optimization.
>
>> In the GEOS algorithms at least I don't see any way of avoiding 
>> dynamic allocation, since there's no way to predict a priori how many 
>> line segment intersections will be found, or how what the structure 
>> of the output geometry is.  Does GGL avoid this problem in some way?
> Yes. It will be described, but in short: we don't insert the found 
> intersection points into the polygons (as done in many algorithms, but 
> I don't know about GEOS) but register them separately. That saves a 
> copy, plus many inserts (shifts). However, it requires somewhat more 
> bookkeeping. So intersected polygons are assembled in the end, in 
> between there are no large pieces of memory allocation.

JTS/GEOS uses the same approach. As you say, it's more efficient to 
collect the intersection points first and then create the split edges.


-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mbdavis at refractions.net  Wed Sep  2 12:11:25 2009
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep  2 12:08:42 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9E5AE1.7050402@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>	<4A9E3D54.7010201@geodan.nl>
	<20090902095325.GH40687@keybit.net> <4A9E5AE1.7050402@geodan.nl>
Message-ID: <4A9E992D.8090503@refractions.net>



Barend Gehrels wrote:
>  
>> Templates would make it a lot better, but far away 
>> from 1:1 mapping with Java.
>>   
> Sure, though Java also have templates now
I'm no expert in this, but my understanding is that Java templates are 
purely for type management, and don't really provide much in the way of 
compile-time optimization (since they don't change the underlying memory 
allocation model of Java).  So it's not clear to me that rewriting JTS 
to use templates would provide optimal code via a direct port to C++.  
It might get closer, I guess, but maybe there'd still be some semantic 
rewriting required for maximum optimization. But I'd be happy for 
someone to prove this conjecture wrong  8^)


-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From mateusz at loskot.net  Wed Sep  2 12:20:55 2009
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed Sep  2 12:21:01 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9E992D.8090503@refractions.net>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>	<4A9E3D54.7010201@geodan.nl>	<20090902095325.GH40687@keybit.net>
	<4A9E5AE1.7050402@geodan.nl> <4A9E992D.8090503@refractions.net>
Message-ID: <4A9E9B67.1090205@loskot.net>

Martin Davis wrote:
> 
> 
> Barend Gehrels wrote:
>>  
>>> Templates would make it a lot better, but far away from 1:1 mapping
>>> with Java.
>>>   
>> Sure, though Java also have templates now
>
> I'm no expert in this, but my understanding is that Java templates are
> purely for type management, and don't really provide much in the way of
> compile-time optimization (since they don't change the underlying memory
> allocation model of Java). 

Yes, Java generics work for type-safety only/mostly.

> So it's not clear to me that rewriting JTS
> to use templates would provide optimal code via a direct port to C++. 
> It might get closer, I guess, but maybe there'd still be some semantic
> rewriting required for maximum optimization. But I'd be happy for
> someone to prove this conjecture wrong  8^)

The results might be funny. I'm not sure how up-to-date this is, but
still interesting:

http://www.oreillynet.com/onjava/blog/2005/10/generics_performance_demystifi_1.html

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From mbdavis at refractions.net  Wed Sep  2 14:25:49 2009
From: mbdavis at refractions.net (Martin Davis)
Date: Wed Sep  2 14:23:07 2009
Subject: [geos-devel] Intersection determination for overlay in GGL?
In-Reply-To: <4A9E3D54.7010201@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>
	<4A9E3D54.7010201@geodan.nl>
Message-ID: <4A9EB8AD.8060803@refractions.net>

Barend Gehrels wrote:
>
> The GGL overlay algorithm will be described in a paper. It is a modern 
> variant of the classic Weiler-Atherton algorithm.
>
Barend, the references I've seen about Weiler-Atherton don't specify the 
approach taken to compute intersections.  In my experience this is the 
most time-consuming part of overlay computation. A simplistic 
implementation is O(n^2), but there are a variety of techniques which 
can be used to improve this.  Can you comment on the approach GGL uses 
for intersection determination?

Martin

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From Barend.Gehrels at geodan.nl  Wed Sep  2 17:29:42 2009
From: Barend.Gehrels at geodan.nl (Barend Gehrels)
Date: Wed Sep  2 17:33:08 2009
Subject: [geos-devel]	[Fwd:	[Boost-users]	[boost]	Formal	Review:	Boost.Polygon
	starts today August 24, 2009]
In-Reply-To: <4A9E96B5.8050302@refractions.net>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>	<4A9E3D54.7010201@geodan.nl>
	<4A9E96B5.8050302@refractions.net>
Message-ID: <4A9EE3C6.4000506@geodan.nl>

Hi Martin,


>> The GGL overlay algorithm will be described in a paper. It is a 
>> modern variant of the classic Weiler-Atherton algorithm.
> Have you done anything to make the algorithm robust?  My impression of 
> this algorithm is that it might be more complex to make robust 
> (although perhaps you can handle that in the intersection determination).

Sorry, I've to keep this short. We're busy with that robustness and 
there is indeed at least one issue. I'll come back to this (in a few weeks).

>
>> Yes. It will be described, but in short: we don't insert the found 
>> intersection points into the polygons (as done in many algorithms, 
>> but I don't know about GEOS) but register them separately. That saves 
>> a copy, plus many inserts (shifts). However, it requires somewhat 
>> more bookkeeping. So intersected polygons are assembled in the end, 
>> in between there are no large pieces of memory allocation.
>
> JTS/GEOS uses the same approach. As you say, it's more efficient to 
> collect the intersection points first and then create the split edges.
OK. thanks.

Regards, Barend



From geos-trac at osgeo.org  Fri Sep 11 14:55:58 2009
From: geos-trac at osgeo.org (GEOS)
Date: Fri Sep 11 14:56:00 2009
Subject: [geos-devel] Re: [GEOS] #286: Compile issues with HP-Ux 11i
In-Reply-To: <048.8c856ea732a31a3d3ff9b3f01303d969@osgeo.org>
References: <048.8c856ea732a31a3d3ff9b3f01303d969@osgeo.org>
Message-ID: <057.b080476b9f5ffb6701a3909036ce68ef@osgeo.org>

#286: Compile issues with HP-Ux 11i
------------------------+---------------------------------------------------
 Reporter:  MarkMapo    |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect      |       Status:  new                       
 Priority:  minor       |    Milestone:                            
Component:  Default     |      Version:  3.0.3                     
 Severity:  Unassigned  |   Resolution:                            
 Keywords:              |  
------------------------+---------------------------------------------------
Comment (by pramsey):

 Sorry to not apply this, but you're making it a lot of work. Here's how to
 get a patch I can apply and test easily.
 {{{
 # checkout svn next to your working directory of code
 svn checkout http://svn.osgeo.org/geos/branches/3.0 geos-3.0-svn
 # diff the two directories
 diff -u5 -r geos-yours geos-3.0-svn > geos-hpux.patch
 # apply the patch to the svn directory
 cd geos-3.0-svn
 patch -p0 < ../geos-hpux.patch
 # test the patch
 ./configure ; make ; make check
 # check that the modified files show up as flagged
 svn status
 # generate a new patch
 svn diff > ../geos-hpux.patch
 }}}
 If you did the same thing for 3.1 and trunk, that would be even better,
 and would ensure future versions can compile on HP-UX too.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/286#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Sep 11 14:59:19 2009
From: geos-trac at osgeo.org (GEOS)
Date: Fri Sep 11 14:59:20 2009
Subject: [geos-devel] Re: [GEOS] #287: Shouldn't GEOS 3.1 branch be bumped
	to 3.1.2
In-Reply-To: <044.f9261f7ac23ee8545825bf400eeb5957@osgeo.org>
References: <044.f9261f7ac23ee8545825bf400eeb5957@osgeo.org>
Message-ID: <053.92b2707694c821076f0a0d0a0166bc22@osgeo.org>

#287: Shouldn't GEOS 3.1 branch be bumped to 3.1.2
------------------------+---------------------------------------------------
 Reporter:  robe        |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect      |       Status:  new                       
 Priority:  trivial     |    Milestone:  3.1.2                     
Component:  Default     |      Version:  3.1.1                     
 Severity:  Unassigned  |   Resolution:                            
 Keywords:              |  
------------------------+---------------------------------------------------
Comment (by pramsey):

 We have not used this process in the past, as almost nobody uses svn
 versions in settings where they might become confused. Basically, version
 numbers are a deployment concern, not a development concern. The version
 number is not bumped up until the release process.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/287#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From pramsey at cleverelephant.ca  Fri Sep 11 15:03:17 2009
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri Sep 11 15:03:20 2009
Subject: [geos-devel] IMPORTANT: Losing Regression Tests
Message-ID: <30fe546d0909111203o7c4feae8u2df12a1f214d502f@mail.gmail.com>

Due to http://trac.osgeo.org/geos/ticket/281 we are about to lose our
regression test harness.

Consider this an impassioned plea for someone w/ enough C++ chops to
rescue the xmltester before I remove this code from the repo.

P.

On Fri, Jul 24, 2009 at 7:59 AM, GEOS <geos-trac@osgeo.org> wrote:
> #281: License issue
> ----------------------+-----------------------------------------------------
> ?Reporter: ?frankie ? | ? ? ? ?Owner: ?pramsey
> ? ? Type: ?defect ? ?| ? ? ? Status: ?new
> ?Priority: ?blocker ? | ? ?Milestone: ?3.1.2
> Component: ?Default ? | ? ? ?Version: ?3.1.1
> ?Severity: ?Critical ?| ? Resolution:
> ?Keywords: ? ? ? ? ? ?|
> ----------------------+-----------------------------------------------------
> Changes (by pramsey):
>
> ?* owner: ?geos-devel@lists.osgeo.org => pramsey
>
> Comment:
>
> ?This is a bona fide problem, the "Use in commercial applications requires
> ?written permission" clause is certainly not GPL compatible, so this code
> ?absolutely must go. As a side note, this also indicates the OSGeo
> ?incubation code review process is probably too trusting, one person can't
> ?catch everything, and I did not catch this one in my review -- having more
> ?than one person perform a review of the code seems a good idea.
>
> ?We can't release 3.2 until this is stripped, and I think to incentivize us
> ?I am going to remove these files and take XMLTester out of the build.
>
> --
> Ticket URL: <http://trac.osgeo.org/geos/ticket/281#comment:1>
> GEOS <http://geos.refractions.net/>
> GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Sep 11 22:20:20 2009
From: geos-trac at osgeo.org (GEOS)
Date: Fri Sep 11 22:20:22 2009
Subject: [geos-devel] Re: [GEOS] #287: Shouldn't GEOS 3.1 branch be bumped
	to 3.1.2
In-Reply-To: <044.f9261f7ac23ee8545825bf400eeb5957@osgeo.org>
References: <044.f9261f7ac23ee8545825bf400eeb5957@osgeo.org>
Message-ID: <053.941b4ee2acbf144571be8bf46bf1a3e6@osgeo.org>

#287: Shouldn't GEOS 3.1 branch be bumped to 3.1.2
------------------------+---------------------------------------------------
 Reporter:  robe        |        Owner:  geos-devel@lists.osgeo.org
     Type:  defect      |       Status:  new                       
 Priority:  trivial     |    Milestone:  3.1.2                     
Component:  Default     |      Version:  3.1.1                     
 Severity:  Unassigned  |   Resolution:                            
 Keywords:              |  
------------------------+---------------------------------------------------
Comment (by robe):

 So I guess I should not be releasing these as part of the PostGIS 1.4.1
 experimental releases.  That was how this became an issue for me.

 I guess to me - at least now, this is a testing concern which I would
 think would be a development concern.

 I was packaging GEOS 3.1 just fixes with 1.4.1 just fixes so that people
 who are having problems fixed by either -- can test out the changes
 without being forced to run a more unstable release.  They could take the
 new GEOS 3.1 (say if they are running 1.3 or 1.4.0 RTM), the new PostGIS
 1.4.1SVN or both. With PostGIS I can tell, with GEOS I can not.

 Now that I can't tell the difference between those running 3.1.1 RTM and
 3.1 stable  non-RTM, this will become a bit confusing from a testing
 standpoint.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/287#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From mateusz at loskot.net  Sat Sep 12 09:43:25 2009
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sat Sep 12 09:43:32 2009
Subject: [geos-devel] IMPORTANT: Losing Regression Tests
In-Reply-To: <30fe546d0909111203o7c4feae8u2df12a1f214d502f@mail.gmail.com>
References: <30fe546d0909111203o7c4feae8u2df12a1f214d502f@mail.gmail.com>
Message-ID: <4AABA57D.4030902@loskot.net>

Paul Ramsey wrote:
> Due to http://trac.osgeo.org/geos/ticket/281 we are about to lose our
> regression test harness.
> 
> Consider this an impassioned plea for someone w/ enough C++ chops to

I've made a quick scan through the test source code and I think it
should be possible to replace CMarkupSTL [1] class with TinyXML.
It is used by XMLTester class [1] only.

[1]
http://trac.osgeo.org/geos/browser/trunk/tests/xmltester/markup/MarkupSTL.h
[2] http://trac.osgeo.org/geos/browser/trunk/tests/xmltester/XMLTester.h#L57


Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
Charter Member of OSGeo, http://osgeo.org
From zhuliangxiong at hotmail.com  Thu Sep 17 04:53:31 2009
From: zhuliangxiong at hotmail.com (zhuliangxiong@hotmail.com)
Date: Thu Sep 17 04:54:39 2009
Subject: [geos-devel] howto build latest geos in MinGW?
Message-ID: <BAY108-DS42C985AD4AE561EF732D8B2E10@phx.gbl>

Hi there,
is there any solution to build GEOS in MinGW. i download GEOS as archived package. i get an error of  vswprintf doesn't be declared . i google this problem, and someone said that's because the gcc doesn't support unicode in MS Windows platform. My GCC in MinGW is GCC 3.4.5.  I do not know how to resolve this issue. 
could any one help me?

regards,
Liangxiong zhu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20090917/48e51bfe/attachment.html
From robe.dnd at cityofboston.gov  Thu Sep 17 06:41:51 2009
From: robe.dnd at cityofboston.gov (Obe, Regina)
Date: Thu Sep 17 06:41:58 2009
Subject: [geos-devel] howto build latest geos in MinGW?
In-Reply-To: <BAY108-DS42C985AD4AE561EF732D8B2E10@phx.gbl>
References: <BAY108-DS42C985AD4AE561EF732D8B2E10@phx.gbl>
Message-ID: <53F9CF533E1AA14EA1F8C5C08ABC08D2063630BF@ZDND.DND.boston.cob>

Yes -- read our instructions on PostGIS section 10.  You have to edit
some MingW stuff.
 
http://trac.osgeo.org/postgis/wiki/UsersWikiWinCompile
 
Hope that helps,
Regina
 

________________________________

From: geos-devel-bounces@lists.osgeo.org
[mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of
zhuliangxiong@hotmail.com
Sent: Thursday, September 17, 2009 4:54 AM
To: geos-devel@lists.osgeo.org
Subject: [geos-devel] howto build latest geos in MinGW?


Hi there,
is there any solution to build GEOS in MinGW. i download GEOS as
archived package. i get an error of  vswprintf doesn't be declared . i
google this problem, and someone said that's because the gcc doesn't
support unicode in MS Windows platform. My GCC in MinGW is GCC 3.4.5.  I
do not know how to resolve this issue. 
could any one help me?
 
regards,
Liangxiong zhu


-----------------------------------------
The substance of this message, including any attachments, may be
confidential, legally privileged and/or exempt from disclosure
pursuant to Massachusetts law. It is intended
solely for the addressee. If you received this in error, please
contact the sender and delete the material from any computer.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20090917/e98752cb/attachment.html
From szekerest at gmail.com  Sat Sep 19 18:19:38 2009
From: szekerest at gmail.com (Tamas Szekeres)
Date: Sat Sep 19 18:19:42 2009
Subject: [geos-devel] Polygon with empty ring causes a crash in WKBReader
Message-ID: <f3b73b7d0909191519g7443528ap6ff997125aab38c@mail.gmail.com>

Hi Devs,

FYI: Just added a ticket along with a patch for this problem which drove me
up the wall for a while ;-)

http://trac.osgeo.org/geos/ticket/290

Best regards,

Tamas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20090920/a9b2314d/attachment.html
From Barend.Gehrels at geodan.nl  Tue Sep 22 10:51:13 2009
From: Barend.Gehrels at geodan.nl (Barend Gehrels)
Date: Tue Sep 22 10:51:22 2009
Subject: [geos-devel] Intersection determination for overlay in GGL?
In-Reply-To: <4A9EB8AD.8060803@refractions.net>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>	<4A9E3D54.7010201@geodan.nl>
	<4A9EB8AD.8060803@refractions.net>
Message-ID: <4AB8E461.50909@geodan.nl>

Hi Martin,

I was on holiday, therefore my delay in answering your question.


Martin Davis wrote:
> Barend Gehrels wrote:
>>
>> The GGL overlay algorithm will be described in a paper. It is a 
>> modern variant of the classic Weiler-Atherton algorithm.
>>
> Barend, the references I've seen about Weiler-Atherton don't specify 
> the approach taken to compute intersections.  In my experience this is 
> the most time-consuming part of overlay computation. 
That is true. I made some measurements in July: in "normal" cases 84% of 
the time is spent on finding intersections (using GGL). In cases where 
there are much more intersections (the star-ellipse), still 54% is spent 
on intersections. So yes, the intersection detection is the most 
important phase for performance.

> A simplistic implementation is O(n^2), but there are a variety of 
> techniques which can be used to improve this.  Can you comment on the 
> approach GGL uses for intersection determination?
We currently use *monotonic sections* to speed this phase up. It is then 
not O(n^2). You've written about monotonic sections in your weblog. 
These monotonic sections are created on the fly. So the intersection 
finding could be faster by having prepared monotonic sections. However, 
determining the monotonic sections is not heavy, one loop per polygon.

Another option, which is investigated, would be to use a spatial index 
for this. We already have a spatial index, but currently it does not 
speed the process up, it is not yet optimal. However, a spatial index 
would reduce the segments-to-be-compared by a factor of about 6 (see 
below). So if the spatial index generation is (slightly) faster, it 
would be an alternative.

We've done another test to research this:
- brute force (O(n^2)):  11856331 comparisons (factor 339.95)
- monotonic sections: 213732  comparisons (factor 6.13)
- spatial index: 34877 comparisons (factor 1)
These data are for a specific case, but it gives an idea.

Regards, Barend

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20090922/248b37fc/attachment.html
From mbdavis at refractions.net  Tue Sep 22 12:26:42 2009
From: mbdavis at refractions.net (Martin Davis)
Date: Tue Sep 22 12:22:36 2009
Subject: [geos-devel] Intersection determination for overlay in GGL?
In-Reply-To: <4AB8E461.50909@geodan.nl>
References: <4A93E39A.1090302@swoodbridge.com>	<4A941988.4070701@refractions.net>	<4a945f0e.19bd720a.54dc.ffffa9c0@mx.google.com>	<4A9C05D5.5070906@refractions.net>	<4A9C1FFF.1090701@loskot.net>	<4A9C25E0.5040009@refractions.net>	<4A9DAEED.4090004@geodan.nl>	<4A9DB4E9.9080506@refractions.net>	<4A9E3D54.7010201@geodan.nl>	<4A9EB8AD.8060803@refractions.net>
	<4AB8E461.50909@geodan.nl>
Message-ID: <4AB8FAC2.7060107@refractions.net>

Sounds like you've got all the right ideas, Barend.  Good luck with the 
optimizations...

Martin

Barend Gehrels wrote:
> Hi Martin,
>
> I was on holiday, therefore my delay in answering your question.
>
>
> Martin Davis wrote:
>> Barend Gehrels wrote:
>>>
>>> The GGL overlay algorithm will be described in a paper. It is a 
>>> modern variant of the classic Weiler-Atherton algorithm.
>>>
>> Barend, the references I've seen about Weiler-Atherton don't specify 
>> the approach taken to compute intersections.  In my experience this 
>> is the most time-consuming part of overlay computation. 
> That is true. I made some measurements in July: in "normal" cases 84% 
> of the time is spent on finding intersections (using GGL). In cases 
> where there are much more intersections (the star-ellipse), still 54% 
> is spent on intersections. So yes, the intersection detection is the 
> most important phase for performance.
>
>> A simplistic implementation is O(n^2), but there are a variety of 
>> techniques which can be used to improve this.  Can you comment on the 
>> approach GGL uses for intersection determination?
> We currently use *monotonic sections* to speed this phase up. It is 
> then not O(n^2). You've written about monotonic sections in your 
> weblog. These monotonic sections are created on the fly. So the 
> intersection finding could be faster by having prepared monotonic 
> sections. However, determining the monotonic sections is not heavy, 
> one loop per polygon.
>
> Another option, which is investigated, would be to use a spatial index 
> for this. We already have a spatial index, but currently it does not 
> speed the process up, it is not yet optimal. However, a spatial index 
> would reduce the segments-to-be-compared by a factor of about 6 (see 
> below). So if the spatial index generation is (slightly) faster, it 
> would be an alternative.
>
> We've done another test to research this:
> - brute force (O(n^2)):  11856331 comparisons (factor 339.95)
> - monotonic sections: 213732  comparisons (factor 6.13)
> - spatial index: 34877 comparisons (factor 1)
> These data are for a specific case, but it gives an idea.
>
> Regards, Barend
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/geos-devel

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022

From strk at keybit.net  Mon Sep 28 06:38:07 2009
From: strk at keybit.net (strk)
Date: Mon Sep 28 06:38:10 2009
Subject: [geos-devel] IMPORTANT: Losing Regression Tests
In-Reply-To: <4AABA57D.4030902@loskot.net>
References: <30fe546d0909111203o7c4feae8u2df12a1f214d502f@mail.gmail.com>
	<4AABA57D.4030902@loskot.net>
Message-ID: <20090928103807.GB30514@keybit.net>

On Sat, Sep 12, 2009 at 02:43:25PM +0100, Mateusz Loskot wrote:
> Paul Ramsey wrote:
> > Due to http://trac.osgeo.org/geos/ticket/281 we are about to lose our
> > regression test harness.
> > 
> > Consider this an impassioned plea for someone w/ enough C++ chops to
> 
> I've made a quick scan through the test source code and I think it
> should be possible to replace CMarkupSTL [1] class with TinyXML.
> It is used by XMLTester class [1] only.

Committed in r2634. Thanks for the tip. 
God save the testsuite!

--strk; 

 Free GIS & Flash consultant/developer      ()  ASCII Ribbon Campaign
 http://foo.keybit.net/~strk/services.html  /\  Keep it simple! 
From mateusz at loskot.net  Mon Sep 28 06:50:37 2009
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon Sep 28 06:48:07 2009
Subject: [geos-devel] IMPORTANT: Losing Regression Tests
In-Reply-To: <20090928103807.GB30514@keybit.net>
References: <30fe546d0909111203o7c4feae8u2df12a1f214d502f@mail.gmail.com>	<4AABA57D.4030902@loskot.net>
	<20090928103807.GB30514@keybit.net>
Message-ID: <4AC094FD.20103@loskot.net>

strk wrote:
> On Sat, Sep 12, 2009 at 02:43:25PM +0100, Mateusz Loskot wrote:
>> Paul Ramsey wrote:
>>> Due to http://trac.osgeo.org/geos/ticket/281 we are about to lose our
>>> regression test harness.
>>>
>>> Consider this an impassioned plea for someone w/ enough C++ chops to
>> I've made a quick scan through the test source code and I think it
>> should be possible to replace CMarkupSTL [1] class with TinyXML.
>> It is used by XMLTester class [1] only.
> 
> Committed in r2634. Thanks for the tip. 

Sandro, thanks for that! I should apply DIY principle, I know.

> God save the testsuite!

and the Queen too!

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net
From christoph.dohmen at cae.de  Tue Sep 29 09:33:06 2009
From: christoph.dohmen at cae.de (Christoph Dohmen)
Date: Tue Sep 29 09:35:56 2009
Subject: [geos-devel] missing header
Message-ID: <3A5D37E61A34E44D8E0621E0B1009D4F04F7B13D@sdestex1.de.caecorp.cae.com>

Skipped content of type multipart/alternative-------------- next part --------------
This email was Anti Virus checked
From strk at keybit.net  Tue Sep 29 09:41:03 2009
From: strk at keybit.net (strk)
Date: Tue Sep 29 09:41:07 2009
Subject: [geos-devel] missing header
In-Reply-To: <3A5D37E61A34E44D8E0621E0B1009D4F04F7B13D@sdestex1.de.caecorp.cae.com>
References: <3A5D37E61A34E44D8E0621E0B1009D4F04F7B13D@sdestex1.de.caecorp.cae.com>
Message-ID: <20090929134103.GG30514@keybit.net>

On Tue, Sep 29, 2009 at 03:33:06PM +0200, Christoph Dohmen wrote:
> Hi all,
> 
> I'm quite new to geos, but I found a header missing in my installation :-(
> The DouglasPeuckerLineSimplifier is described in the online doc but the
> DouglasPeuckerLineSimplifier.h include file is listed under noinst_HEADERS
> in the Makefile.in.
> Is this an error? Or, if not, why is this header not installed?

It's a long story. In short the dev team was trying hard to keep
users away of the C++ interface. You should really use the C one...

Anyway in 3.2.0 (and current trunk) we won't care anymore and let users
free to hurt themselves.

--strk;

 Free GIS & Flash consultant/developer      ()  ASCII Ribbon Campaign
 http://foo.keybit.net/~strk/services.html  /\  Keep it simple! 
