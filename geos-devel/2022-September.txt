From geos-trac at osgeo.org  Fri Sep  2 18:47:31 2022
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 03 Sep 2022 01:47:31 -0000
Subject: [geos-devel] [GEOS] #676: WKT reader interprets M coordinate as
 Z
In-Reply-To: <045.421b02ae3581ddc4cfbb11583fb46f69@osgeo.org>
References: <045.421b02ae3581ddc4cfbb11583fb46f69@osgeo.org>
Message-ID: <060.5d856d3af0fba519dd5c480f04101992@osgeo.org>

#676: WKT reader interprets M coordinate as Z
------------------------+----------------------
 Reporter:  Mike Taves  |       Owner:  dbaston
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.11.0
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+----------------------
Changes (by dbaston):

 * owner:  geos-devel@? => dbaston
 * milestone:  GEOS Fund Me => 3.11.0

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/676#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep  6 08:04:43 2022
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 06 Sep 2022 15:04:43 -0000
Subject: [geos-devel] [GEOS] #522: Exception on overlay between valid
 linestrings [JTS fails too]
In-Reply-To: <042.fcd8c41037afec1ec2d77c5b85ee8898@osgeo.org>
References: <042.fcd8c41037afec1ec2d77c5b85ee8898@osgeo.org>
Message-ID: <057.377b9d0d0bcb3f8c54a6d0c380842bd7@osgeo.org>

#522: Exception on overlay between valid linestrings [JTS fails too]
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  Upstream
Component:  Default     |     Version:  3.3.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:  jtsfail     |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed

Comment:

 This looks to have been addressed with OverlayNG; a test case was
 committed at [changeset:4d3e571ed1b88697a3135c51ca14c73f4493f377/git]
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/522#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Sep  6 09:53:29 2022
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 06 Sep 2022 16:53:29 -0000
Subject: [geos-devel] [GEOS] #590: GEOSBufferWithStyle result isn't
 valid and GEOSIsValid() says it is
In-Reply-To: <047.b459f0297d65c6e275cd25ff823f640b@osgeo.org>
References: <047.b459f0297d65c6e275cd25ff823f640b@osgeo.org>
Message-ID: <062.5b9910e6fb7e8cf06b9a4ec6fee32142@osgeo.org>

#590: GEOSBufferWithStyle result isn't valid and GEOSIsValid() says it is
------------------------+---------------------------
 Reporter:  olivier80   |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  GEOS Fund Me
Component:  Default     |     Version:  3.3.5
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed

Comment:

 Both issues raised by this ticket (invalid polygon produced by buffering;
 polygon not recognized as invalid) have been fixed sometime in the last
 decade. Tests added to main branch at
 [changeset:c68119c728487ce63ca125cc452e6f9217eee195/git]
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/590#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Tue Sep  6 14:37:37 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 6 Sep 2022 14:37:37 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
Message-ID: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>

I've started to build out operations on Polygonal Coverages in JTS ([1],
[2]).  These will be ported to GEOS (started here with CoverageValidator
etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of
course other downstream projects).

Here's some examples of coverage operations and their geometric signatures:

- Validation: List of Polygons -> List of linear geometries for invalid
locations
- Cleaning: List of Polygons -> Coverage
- Union: Coverage -> Polygonal geometry
- Simplification: Coverage -> Coverage

A key question is how to expose these operations in the GEOS C API.  I see
two options:
1) Model a Polygonal Coverage as an array of simple Polygons (and possibly
MultiPolygons)
2) Provide a Polygonal Coverage datatype (which might contain internal
topology)

So far I've been favouring #1, both for the C API and for the underlying
C++ and JTS APIs.  Reasons are:

- Simplicity of use and implementation
- Some operations (such as validation and cleaning) have to operate on
non-coverage lists of polygons anyway
- A potential advantage of having a Coverage data model is that coverage
operations could be chained without needing to convert back to the simple
polygon representation - but it's not clear to me that this will be very
common (and this is not an option for PostGIS, and maybe other downstream
projects).
- It seems more in the spirit of the Simple Features philosophy (if that's
a thing)

Any thoughts or comments on this?

If Model #1 is used, what would the C API look like?  Accept a Geometry
array with a size parameter, and return a Geometry array?  It will likely
be good to have some support functions to free Geometry arrays too.

[1]
http://lin-ear-th-inking.blogspot.com/2022/07/polygonal-coverages-and-operations-in.html
[2]
http://lin-ear-th-inking.blogspot.com/2022/08/validating-polygonal-coverages-in-jts.html
[3]
https://github.com/libgeos/geos/commit/62c928c9f37957c62fab8db69e6c8efd26ce4085
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220906/da228cb2/attachment.htm>

From nyall.dawson at gmail.com  Tue Sep  6 15:51:07 2022
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 7 Sep 2022 08:51:07 +1000
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
Message-ID: <CAB28Asg9nGVwG17qgbsvdPCk_mCmC6Dx1pJPUpUKXADdkgToMw@mail.gmail.com>

On Wed, 7 Sept 2022 at 07:37, Martin Davis <mtnclimb at gmail.com> wrote:
>
> I've started to build out operations on Polygonal Coverages in JTS ([1], [2]).  These will be ported to GEOS (started here with CoverageValidator etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of course other downstream projects).
>
> Here's some examples of coverage operations and their geometric signatures:
>
> - Validation: List of Polygons -> List of linear geometries for invalid locations
> - Cleaning: List of Polygons -> Coverage
> - Union: Coverage -> Polygonal geometry
> - Simplification: Coverage -> Coverage

This is exciting, I'm very happy to see this on the horizon. Thank you!

>
> A key question is how to expose these operations in the GEOS C API.  I see two options:
> 1) Model a Polygonal Coverage as an array of simple Polygons (and possibly MultiPolygons)
> 2) Provide a Polygonal Coverage datatype (which might contain internal topology)
>
> Any thoughts or comments on this?

>From one downstream client perspective (QGIS) we could work with
either with a similar level of work, and would be happy to adapt to
whatever upstream decides is the best approach!

> If Model #1 is used, what would the C API look like?  Accept a Geometry array with a size parameter, and return a Geometry array?  It will likely be good to have some support functions to free Geometry arrays too.

This sounds fine to me! A must-have would be that the geometries are
always guaranteed to be returned in the same order as the input
geometries, so that we can easily link input->output geometries and
re-attach non spatial attributes.

One consideration for the  "Simplification: Coverage -> Coverage" use
case would be whether only a fixed set of simplification algorithms
are permitted (eg Visvalingam/Douglas-peucker only), or whether custom
simplification/modification operations would also be permitted (via
some callback function or similar). I'd love to see support for custom
operations, so eg I could write a coverage -> coverage operation which
applies both simplification and smoothing to the boundaries.

Nyall

From mtnclimb at gmail.com  Tue Sep  6 16:11:59 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 6 Sep 2022 16:11:59 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAB28Asg9nGVwG17qgbsvdPCk_mCmC6Dx1pJPUpUKXADdkgToMw@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <CAB28Asg9nGVwG17qgbsvdPCk_mCmC6Dx1pJPUpUKXADdkgToMw@mail.gmail.com>
Message-ID: <CAK2ens1df+cVVUOtZxpGUhFzqQ4+Dx6EuXfHsT21oLZdCQrTjQ@mail.gmail.com>

Thanks for the feedback, Nyall.  Comments inline below.

On Tue, Sep 6, 2022 at 3:51 PM Nyall Dawson <nyall.dawson at gmail.com> wrote:

> On Wed, 7 Sept 2022 at 07:37, Martin Davis <mtnclimb at gmail.com> wrote:
> >
> > I've started to build out operations on Polygonal Coverages in JTS ([1],
> [2]).  These will be ported to GEOS (started here with CoverageValidator
> etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of
> course other downstream projects).
> >
> > Here's some examples of coverage operations and their geometric
> signatures:
> >
> > - Validation: List of Polygons -> List of linear geometries for invalid
> locations
> > - Cleaning: List of Polygons -> Coverage
> > - Union: Coverage -> Polygonal geometry
> > - Simplification: Coverage -> Coverage
>
> This is exciting, I'm very happy to see this on the horizon. Thank you!
>

Great to hear this is going to be useful.

>
> > If Model #1 is used, what would the C API look like?  Accept a Geometry
> array with a size parameter, and return a Geometry array?  It will likely
> be good to have some support functions to free Geometry arrays too.
>
> This sounds fine to me! A must-have would be that the geometries are
> always guaranteed to be returned in the same order as the input
> geometries, so that we can easily link input->output geometries and
> re-attach non spatial attributes.
>

Yes, that's definitely part of the model - should have mentioned it.

>
> One consideration for the  "Simplification: Coverage -> Coverage" use
> case would be whether only a fixed set of simplification algorithms
> are permitted (eg Visvalingam/Douglas-peucker only), or whether custom
> simplification/modification operations would also be permitted (via
> some callback function or similar). I'd love to see support for custom
> operations, so eg I could write a coverage -> coverage operation which
> applies both simplification and smoothing to the boundaries.
>

At the moment I'm only working on VW simplification, because it reuses a
lot of code already in place.  Pluggable algorithms would be a bit of a
research project, because the requirement of preserving topology and being
performant requires quite a bit of indexing structure to be available.  And
it's not clear how much could be common between different algorithms.

The idea of smoothing is a good one - hadn't thought of that.  Of course,
that might require a different approach yet again to preserve topology...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220906/c0bcc646/attachment.htm>

From dbaston at gmail.com  Wed Sep  7 07:29:07 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 7 Sep 2022 10:29:07 -0400
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
Message-ID: <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>

Lots of useful stuff here!

I would prefer a specific coverage data type, because it more clearly
captures intent, allows
preservation of structural information (or other data we haven't yet
anticipated) between function calls, and
results in function signatures that are simpler those associated with
geometry arrays, e.g.

GEOSPolygonCoverage* GEOSCoverageSimplify(GEOSPolygonCoverage* in, double
tol);

vs

int GEOSCoverageSimplify(GEOSGeometry* in, size_t ngeom_in, GEOSGeometry**
out, size_t* ngeom_out, double tol);

For cleanup, it would also be cleaner to call

GEOSCoverageDestroy(coverage);

rather than

for (size_t i = 0; i < ngeoms; i++) {
     GEOSGeom_destroy(coverage[i]);
GEOSFree(coverage)

although we could write a utility function around the latter.

I think some chained operations may not be uncommon, e.g.;

create coverage -> validate coverage -> simplify coverage -> reduce
precision of coverage.

It may be useful to be able to define owning and non-owning variants of
coverages.

Another (probably unpopular) option is to define a polygon coverage as
another subtype of Geometry, and use
our existing API to manipulate it (GEOSisValid, GEOSSimplify, etc.)

Dan


On Tue, Sep 6, 2022 at 5:37 PM Martin Davis <mtnclimb at gmail.com> wrote:

> I've started to build out operations on Polygonal Coverages in JTS ([1],
> [2]).  These will be ported to GEOS (started here with CoverageValidator
> etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of
> course other downstream projects).
>
> Here's some examples of coverage operations and their geometric signatures:
>
> - Validation: List of Polygons -> List of linear geometries for invalid
> locations
> - Cleaning: List of Polygons -> Coverage
> - Union: Coverage -> Polygonal geometry
> - Simplification: Coverage -> Coverage
>
> A key question is how to expose these operations in the GEOS C API.  I see
> two options:
> 1) Model a Polygonal Coverage as an array of simple Polygons (and possibly
> MultiPolygons)
> 2) Provide a Polygonal Coverage datatype (which might contain internal
> topology)
>
> So far I've been favouring #1, both for the C API and for the underlying
> C++ and JTS APIs.  Reasons are:
>
> - Simplicity of use and implementation
> - Some operations (such as validation and cleaning) have to operate on
> non-coverage lists of polygons anyway
> - A potential advantage of having a Coverage data model is that coverage
> operations could be chained without needing to convert back to the simple
> polygon representation - but it's not clear to me that this will be very
> common (and this is not an option for PostGIS, and maybe other downstream
> projects).
> - It seems more in the spirit of the Simple Features philosophy (if that's
> a thing)
>
> Any thoughts or comments on this?
>
> If Model #1 is used, what would the C API look like?  Accept a Geometry
> array with a size parameter, and return a Geometry array?  It will likely
> be good to have some support functions to free Geometry arrays too.
>
> [1]
> http://lin-ear-th-inking.blogspot.com/2022/07/polygonal-coverages-and-operations-in.html
> [2]
> http://lin-ear-th-inking.blogspot.com/2022/08/validating-polygonal-coverages-in-jts.html
> [3]
> https://github.com/libgeos/geos/commit/62c928c9f37957c62fab8db69e6c8efd26ce4085
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/f4a8fc32/attachment-0001.htm>

From bcward at astutespruce.com  Wed Sep  7 09:12:00 2022
From: bcward at astutespruce.com (Brendan Ward)
Date: Wed, 7 Sep 2022 09:12:00 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>
Message-ID: <CAENuiqS26WrPUHOL-jYL67oXqAWTWeRCS3y2C5ChgzVSWWKCgA@mail.gmail.com>

Very excited about progress on this front!  Thanks for the update Martin.

I think the idea of a separate coverage type in the C API captures my
thoughts as well.

I anticipate wanting to run chained operations (esp. simplify, precision
reduction, smoothing) on coverages.  Having final outputs (e.g., coverage
=> polygons) relate 1:1 to the input polygons so we can re-attach
associated data will be essential; I think it will be OK for the
intermediate coverage to be its own collection type and not relatable back
1:1.  I.e., I don't anticipate wanting to simplify elements of the coverage
differently from each other.

Should the signature for Union instead be Coverage -> Coverage?  Then it
could also be used in a chain of operations affecting coverages.
Then a separate function for Coverage -> Polygonal geometry (since it could
be used for more than just union)

On Wed, Sep 7, 2022 at 7:29 AM Daniel Baston <dbaston at gmail.com> wrote:

> Lots of useful stuff here!
>
> I would prefer a specific coverage data type, because it more clearly
> captures intent, allows
> preservation of structural information (or other data we haven't yet
> anticipated) between function calls, and
> results in function signatures that are simpler those associated with
> geometry arrays, e.g.
>
> GEOSPolygonCoverage* GEOSCoverageSimplify(GEOSPolygonCoverage* in, double
> tol);
>
> vs
>
> int GEOSCoverageSimplify(GEOSGeometry* in, size_t ngeom_in, GEOSGeometry**
> out, size_t* ngeom_out, double tol);
>
> For cleanup, it would also be cleaner to call
>
> GEOSCoverageDestroy(coverage);
>
> rather than
>
> for (size_t i = 0; i < ngeoms; i++) {
>      GEOSGeom_destroy(coverage[i]);
> GEOSFree(coverage)
>
> although we could write a utility function around the latter.
>
> I think some chained operations may not be uncommon, e.g.;
>
> create coverage -> validate coverage -> simplify coverage -> reduce
> precision of coverage.
>
> It may be useful to be able to define owning and non-owning variants of
> coverages.
>
> Another (probably unpopular) option is to define a polygon coverage as
> another subtype of Geometry, and use
> our existing API to manipulate it (GEOSisValid, GEOSSimplify, etc.)
>
> Dan
>
>
> On Tue, Sep 6, 2022 at 5:37 PM Martin Davis <mtnclimb at gmail.com> wrote:
>
>> I've started to build out operations on Polygonal Coverages in JTS ([1],
>> [2]).  These will be ported to GEOS (started here with CoverageValidator
>> etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of
>> course other downstream projects).
>>
>> Here's some examples of coverage operations and their geometric
>> signatures:
>>
>> - Validation: List of Polygons -> List of linear geometries for invalid
>> locations
>> - Cleaning: List of Polygons -> Coverage
>> - Union: Coverage -> Polygonal geometry
>> - Simplification: Coverage -> Coverage
>>
>> A key question is how to expose these operations in the GEOS C API.  I
>> see two options:
>> 1) Model a Polygonal Coverage as an array of simple Polygons (and
>> possibly MultiPolygons)
>> 2) Provide a Polygonal Coverage datatype (which might contain internal
>> topology)
>>
>> So far I've been favouring #1, both for the C API and for the underlying
>> C++ and JTS APIs.  Reasons are:
>>
>> - Simplicity of use and implementation
>> - Some operations (such as validation and cleaning) have to operate on
>> non-coverage lists of polygons anyway
>> - A potential advantage of having a Coverage data model is that coverage
>> operations could be chained without needing to convert back to the simple
>> polygon representation - but it's not clear to me that this will be very
>> common (and this is not an option for PostGIS, and maybe other downstream
>> projects).
>> - It seems more in the spirit of the Simple Features philosophy (if
>> that's a thing)
>>
>> Any thoughts or comments on this?
>>
>> If Model #1 is used, what would the C API look like?  Accept a Geometry
>> array with a size parameter, and return a Geometry array?  It will likely
>> be good to have some support functions to free Geometry arrays too.
>>
>> [1]
>> http://lin-ear-th-inking.blogspot.com/2022/07/polygonal-coverages-and-operations-in.html
>> [2]
>> http://lin-ear-th-inking.blogspot.com/2022/08/validating-polygonal-coverages-in-jts.html
>> [3]
>> https://github.com/libgeos/geos/commit/62c928c9f37957c62fab8db69e6c8efd26ce4085
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>


-- 
Brendan C. Ward
Owner | Lead Software Engineer
Astute Spruce, LLC
astutespruce.com
541-250-9544
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/91e736ad/attachment.htm>

From pramsey at cleverelephant.ca  Wed Sep  7 09:15:36 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 7 Sep 2022 09:15:36 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAENuiqS26WrPUHOL-jYL67oXqAWTWeRCS3y2C5ChgzVSWWKCgA@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>
 <CAENuiqS26WrPUHOL-jYL67oXqAWTWeRCS3y2C5ChgzVSWWKCgA@mail.gmail.com>
Message-ID: <EE17C5AB-9D2D-44DE-975F-2DC663DA7D78@cleverelephant.ca>



> On Sep 7, 2022, at 9:12 AM, Brendan Ward <bcward at astutespruce.com> wrote:
> 
>  Having final outputs (e.g., coverage => polygons) relate 1:1 to the input polygons so we can re-attach associated data will be essential

I wonder if having the userData survive the trip from polygon->coverage->polygon would be sufficient?

P

From dbaston at gmail.com  Wed Sep  7 09:17:52 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 7 Sep 2022 12:17:52 -0400
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <EE17C5AB-9D2D-44DE-975F-2DC663DA7D78@cleverelephant.ca>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>
 <CAENuiqS26WrPUHOL-jYL67oXqAWTWeRCS3y2C5ChgzVSWWKCgA@mail.gmail.com>
 <EE17C5AB-9D2D-44DE-975F-2DC663DA7D78@cleverelephant.ca>
Message-ID: <CA+K_q_q5V14=aZ6-jDiFSXuk8_mUxJQDS5RL3NPfCyJSBwv8EQ@mail.gmail.com>

I think this is a good way to do it. In precision-reduction operation I can
imagine that some input polygons would disappear; maintaining a 1:1
correspondence would require including NULLs in the output, which seems
unwieldy.

Dan

On Wed, Sep 7, 2022 at 12:15 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Sep 7, 2022, at 9:12 AM, Brendan Ward <bcward at astutespruce.com>
> wrote:
> >
> >  Having final outputs (e.g., coverage => polygons) relate 1:1 to the
> input polygons so we can re-attach associated data will be essential
>
> I wonder if having the userData survive the trip from
> polygon->coverage->polygon would be sufficient?
>
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/dec6faa9/attachment.htm>

From bcward at astutespruce.com  Wed Sep  7 09:44:47 2022
From: bcward at astutespruce.com (Brendan Ward)
Date: Wed, 7 Sep 2022 09:44:47 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <EE17C5AB-9D2D-44DE-975F-2DC663DA7D78@cleverelephant.ca>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>
 <CAENuiqS26WrPUHOL-jYL67oXqAWTWeRCS3y2C5ChgzVSWWKCgA@mail.gmail.com>
 <EE17C5AB-9D2D-44DE-975F-2DC663DA7D78@cleverelephant.ca>
Message-ID: <CAENuiqRh9c+JRASFprBXPmhC4QgECaOtjW=q5Uawq9amDNNg+Q@mail.gmail.com>

In theory, it possibly could.  On the Python side (shapely / pygeos) we
don't currently use userdata attached to geometries (nor get/set SRID for
that matter).  But it should be easy to add those for specific cases like
this, and that doesn't mean we need to add them into our public API.

There hasn't previously been a case where we pass in an opaque collection
of geometries with attributes attached to individual geometries; instead
the geometry operations are either 1:1 or 1:many (in case of splitting a
collection into parts).

For cases where we need to track back to individual geometries (e.g.,
geometries added to STRtree) the item data we use when inserting to the
tree is an address of the geometries within an array that we manage (since
we had to store the array of geometries anyway), and we use pointer
addresses to derive indexes into the original array.  Originally we were
using a loop counter, but because that gets passed in as a void * and we
are supposed to persist the actual thing on our end, we were getting
segfaults sometimes.  Our API for STRtree heavily revolves around indexes
into the geometries added to the tree.

For opaque collections / geometry arrays, I could see setting and getting
userdata to the workflow:

array of polygons => set user data on each => make coverage (validate &
clean) => ... coverage operations... => array of polygons => get user data
and relate back to inputs

However, with userdata as a void*, that means we'd have to create something
that owns those values in an array on our end before passing pointers to
them (we'd likely store an array of indexes), which is a little bit of
overhead (though minor in the grand scheme of things).  The benefit of that
approach is that the polygons could be output from the coverage in any
order and we'd still be able to relate them back.

Likewise, internally within GEOS the elements of the coverage could store
an integer with their original index into the input array, and that could
be used to retrieve elements of the coverage to polygons like we do now
with getting geometries from a geometry collection.

So it would look something like:
array of polygons => make coverage => ... coverage operations... =>
getCoveragePolygon(coverage*, index) => polygon

or

array of polygons => make coverage => ... coverage operations... => sort on
original index (internal) => array of polygons

Presumably any polygons in the coverage that are simplified out during
processing would be emitted as empty polygons?  If so, the count of
polygons input and count of polygons output should be the same.  In either
case above, elements of the coverage could be reordered as needed
internally, and just sorted back to the original order before outputting
back to polygons.


In my limited worldview, index into the original array is all we'd need to
relate back to other things.  I don't see wanting to store other custom
data via user data (e.g., a struct or some other more complex value), but
perhaps there are other users of the C API that would need that complexity.


On Wed, Sep 7, 2022 at 9:15 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Sep 7, 2022, at 9:12 AM, Brendan Ward <bcward at astutespruce.com>
> wrote:
> >
> >  Having final outputs (e.g., coverage => polygons) relate 1:1 to the
> input polygons so we can re-attach associated data will be essential
>
> I wonder if having the userData survive the trip from
> polygon->coverage->polygon would be sufficient?
>
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>


-- 
Brendan C. Ward
Owner | Lead Software Engineer
Astute Spruce, LLC
astutespruce.com
541-250-9544
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/1a43d06d/attachment-0001.htm>

From mtnclimb at gmail.com  Wed Sep  7 10:55:21 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 7 Sep 2022 10:55:21 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CA+K_q_q5V14=aZ6-jDiFSXuk8_mUxJQDS5RL3NPfCyJSBwv8EQ@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <CA+K_q_r9f1YThuct3eW-2YS7Lt8Oi3SH3L+2+e1Mn0J9s1=7fQ@mail.gmail.com>
 <CAENuiqS26WrPUHOL-jYL67oXqAWTWeRCS3y2C5ChgzVSWWKCgA@mail.gmail.com>
 <EE17C5AB-9D2D-44DE-975F-2DC663DA7D78@cleverelephant.ca>
 <CA+K_q_q5V14=aZ6-jDiFSXuk8_mUxJQDS5RL3NPfCyJSBwv8EQ@mail.gmail.com>
Message-ID: <CAK2ens0gpYHTqmDnAXrFvj8fM8daB=+hBYCkZosBf_DV+2Y6Kg@mail.gmail.com>

Actually I have been developing using the pattern that the output list is
1:1 with the input list, with null representing outputs which are not
present for some reason.  Reasons for this are:

- works well with the "list of polygons" representation
- avoids any issues with creating/freeing userData objects
- makes it easy to associate results back to inputs

Not sure if this pattern will work if the Coverage datatype design is used
(especially through chained operations on coverages).  Perhaps Coverage
Faces will have to maintain the input polygon ID (index) through
operations, and then the 1:1 output array could be reconstituted as
required.

On Wed, Sep 7, 2022 at 9:18 AM Daniel Baston <dbaston at gmail.com> wrote:

> I think this is a good way to do it. In precision-reduction operation I
> can imagine that some input polygons would disappear; maintaining a 1:1
> correspondence would require including NULLs in the output, which seems
> unwieldy.
>
> Dan
>
> On Wed, Sep 7, 2022 at 12:15 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>>
>>
>> > On Sep 7, 2022, at 9:12 AM, Brendan Ward <bcward at astutespruce.com>
>> wrote:
>> >
>> >  Having final outputs (e.g., coverage => polygons) relate 1:1 to the
>> input polygons so we can re-attach associated data will be essential
>>
>> I wonder if having the userData survive the trip from
>> polygon->coverage->polygon would be sufficient?
>>
>> P
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/0465775a/attachment.htm>

From mtnclimb at gmail.com  Wed Sep  7 10:58:41 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 7 Sep 2022 10:58:41 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
Message-ID: <CAK2ens3u=DhAADhdZcG2VYwUX73bw-5aDddpA0V-j9dVgVVh5g@mail.gmail.com>

Another consideration is that some coverage operations are more efficient
without creating an explicit Coverage topology structure.  In particular,
Coverage Union does not require a full topological structure, since the
"internal" edges are not used and can be efficiently identified and
discarded without topology being built.

One option is to have two different signatures and implementations for the
Coverage Union operation, one on the suggested Coverage datatype, and a
fast one on a list of polygonal inputs.

On Tue, Sep 6, 2022 at 2:37 PM Martin Davis <mtnclimb at gmail.com> wrote:

> I've started to build out operations on Polygonal Coverages in JTS ([1],
> [2]).  These will be ported to GEOS (started here with CoverageValidator
> etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of
> course other downstream projects).
>
> Here's some examples of coverage operations and their geometric signatures:
>
> - Validation: List of Polygons -> List of linear geometries for invalid
> locations
> - Cleaning: List of Polygons -> Coverage
> - Union: Coverage -> Polygonal geometry
> - Simplification: Coverage -> Coverage
>
> A key question is how to expose these operations in the GEOS C API.  I see
> two options:
> 1) Model a Polygonal Coverage as an array of simple Polygons (and possibly
> MultiPolygons)
> 2) Provide a Polygonal Coverage datatype (which might contain internal
> topology)
>
> So far I've been favouring #1, both for the C API and for the underlying
> C++ and JTS APIs.  Reasons are:
>
> - Simplicity of use and implementation
> - Some operations (such as validation and cleaning) have to operate on
> non-coverage lists of polygons anyway
> - A potential advantage of having a Coverage data model is that coverage
> operations could be chained without needing to convert back to the simple
> polygon representation - but it's not clear to me that this will be very
> common (and this is not an option for PostGIS, and maybe other downstream
> projects).
> - It seems more in the spirit of the Simple Features philosophy (if that's
> a thing)
>
> Any thoughts or comments on this?
>
> If Model #1 is used, what would the C API look like?  Accept a Geometry
> array with a size parameter, and return a Geometry array?  It will likely
> be good to have some support functions to free Geometry arrays too.
>
> [1]
> http://lin-ear-th-inking.blogspot.com/2022/07/polygonal-coverages-and-operations-in.html
> [2]
> http://lin-ear-th-inking.blogspot.com/2022/08/validating-polygonal-coverages-in-jts.html
> [3]
> https://github.com/libgeos/geos/commit/62c928c9f37957c62fab8db69e6c8efd26ce4085
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/80142de4/attachment.htm>

From mtnclimb at gmail.com  Wed Sep  7 11:07:37 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 7 Sep 2022 11:07:37 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
Message-ID: <CAK2ens2HiFajuuAiZHmEGoaWAG9Px98hT9ghz1+9MK+M9FTZrw@mail.gmail.com>

I probably should have started this discussion as a GitHub issue (better
formatting, linking, tracking etc).  I will try and move this content there
soon.

On Tue, Sep 6, 2022 at 2:37 PM Martin Davis <mtnclimb at gmail.com> wrote:

> I've started to build out operations on Polygonal Coverages in JTS ([1],
> [2]).  These will be ported to GEOS (started here with CoverageValidator
> etc in C++ [3]). Hopefully these will be exposed in PostGIS as well (and of
> course other downstream projects).
>
> Here's some examples of coverage operations and their geometric signatures:
>
> - Validation: List of Polygons -> List of linear geometries for invalid
> locations
> - Cleaning: List of Polygons -> Coverage
> - Union: Coverage -> Polygonal geometry
> - Simplification: Coverage -> Coverage
>
> A key question is how to expose these operations in the GEOS C API.  I see
> two options:
> 1) Model a Polygonal Coverage as an array of simple Polygons (and possibly
> MultiPolygons)
> 2) Provide a Polygonal Coverage datatype (which might contain internal
> topology)
>
> So far I've been favouring #1, both for the C API and for the underlying
> C++ and JTS APIs.  Reasons are:
>
> - Simplicity of use and implementation
> - Some operations (such as validation and cleaning) have to operate on
> non-coverage lists of polygons anyway
> - A potential advantage of having a Coverage data model is that coverage
> operations could be chained without needing to convert back to the simple
> polygon representation - but it's not clear to me that this will be very
> common (and this is not an option for PostGIS, and maybe other downstream
> projects).
> - It seems more in the spirit of the Simple Features philosophy (if that's
> a thing)
>
> Any thoughts or comments on this?
>
> If Model #1 is used, what would the C API look like?  Accept a Geometry
> array with a size parameter, and return a Geometry array?  It will likely
> be good to have some support functions to free Geometry arrays too.
>
> [1]
> http://lin-ear-th-inking.blogspot.com/2022/07/polygonal-coverages-and-operations-in.html
> [2]
> http://lin-ear-th-inking.blogspot.com/2022/08/validating-polygonal-coverages-in-jts.html
> [3]
> https://github.com/libgeos/geos/commit/62c928c9f37957c62fab8db69e6c8efd26ce4085
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/a15195e6/attachment.htm>

From strk at kbt.io  Wed Sep  7 15:08:23 2022
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 8 Sep 2022 00:08:23 +0200
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
Message-ID: <YxkWV0gym7hqAesi@c19>

On Tue, Sep 06, 2022 at 02:37:37PM -0700, Martin Davis wrote:
> I've started to build out operations on Polygonal Coverages in JTS ([1],
> [2]).  

[...]

> A key question is how to expose these operations in the GEOS C API.  I see
> two options:
> 1) Model a Polygonal Coverage as an array of simple Polygons (and possibly
> MultiPolygons)
> 2) Provide a Polygonal Coverage datatype (which might contain internal
> topology)

Could a coverage datatype allow performing operations on PostGIS Topologies
w/out building the polygons for each face ? There's an ISO standard
representation of topologies, maybe such representation could be used
to transfer those topologies back and forth with GEOS ?

--strk;

From lr at pcorp.us  Wed Sep  7 15:30:15 2022
From: lr at pcorp.us (Regina Obe)
Date: Wed, 7 Sep 2022 18:30:15 -0400
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <YxkWV0gym7hqAesi@c19>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19>
Message-ID: <009001d8c309$67801980$36804c80$@pcorp.us>

> > A key question is how to expose these operations in the GEOS C API.  I
> > see two options:
> > 1) Model a Polygonal Coverage as an array of simple Polygons (and
> > possibly
> > MultiPolygons)
> > 2) Provide a Polygonal Coverage datatype (which might contain internal
> > topology)
> 
> Could a coverage datatype allow performing operations on PostGIS
> Topologies w/out building the polygons for each face ? There's an ISO
> standard representation of topologies, maybe such representation could be
> used to transfer those topologies back and forth with GEOS ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

You read my mind.  I'm fine with an additional type in PostGIS.

Along the lines with what Dan Baston said, the idea of having a special
coverage type that multiple operations can be applied to is very appealing
to me.

But not sure how much extra overhead or difficulty that would cause for
other projects consuming such a new type.
Maybe for some it can have a mutator to convert it to a polygon array or
something, for projects that can't handle consuming additional types.


From mtnclimb at gmail.com  Wed Sep  7 15:44:10 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 7 Sep 2022 15:44:10 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <YxkWV0gym7hqAesi@c19>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19>
Message-ID: <CAK2ens1jUT9Vfroxp-ge6+2JaSOMLYFcvSZhe3BMwkVKzP5NMg@mail.gmail.com>

On Wed, Sep 7, 2022 at 3:18 PM Sandro Santilli <strk at kbt.io> wrote:

> On Tue, Sep 06, 2022 at 02:37:37PM -0700, Martin Davis wrote:
> > I've started to build out operations on Polygonal Coverages in JTS ([1],
> > [2]).
>
> [...]
>
> > A key question is how to expose these operations in the GEOS C API.  I
> see
> > two options:
> > 1) Model a Polygonal Coverage as an array of simple Polygons (and
> possibly
> > MultiPolygons)
> > 2) Provide a Polygonal Coverage datatype (which might contain internal
> > topology)
>
> Could a coverage datatype allow performing operations on PostGIS Topologies
> w/out building the polygons for each face ?


The short answer is "yes, probably, if suitable builders are defined for
the coverage datatype".  But that starts getting complex (in particular, it
probably requires a concept of a Face, which might also have to be
exposed).  This is quite a bit more design than the current work requires.

The other question is: what operations?  Edge-based operations like
simplification (and maybe smoothing) don't really require a coverage at all
- they can simply operate on edge linework.  That would be even easier to
use from PostGIS Topology, I expect.  In fact, I'm considering factoring
out the "Topology-Preserving Line Simplification" part from the
CoverageSimplifier, so it can be used standalone.


> There's an ISO standard
> representation of topologies, maybe such representation could be used
> to transfer those topologies back and forth with GEOS ?
>

Not familiar with that representation.  How does it handle identity for
Faces of topologies?

What we need to define is a C-based API for Coverage.  It's not a huge
design space, so there would probably be similarities.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/c8e5a540/attachment.htm>

From mtnclimb at gmail.com  Wed Sep  7 15:50:31 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 7 Sep 2022 15:50:31 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <009001d8c309$67801980$36804c80$@pcorp.us>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19> <009001d8c309$67801980$36804c80$@pcorp.us>
Message-ID: <CAK2ens0ZARKhb0yiG1_7Q8sgzvcUHucOABUoyE3DzobBwzdOtA@mail.gmail.com>

>
> You read my mind.  I'm fine with an additional type in PostGIS.
>
> Along the lines with what Dan Baston said, the idea of having a special
> coverage type that multiple operations can be applied to is very appealing
> to me.
>
> But not sure how much extra overhead or difficulty that would cause for
> other projects consuming such a new type.
> Maybe for some it can have a mutator to convert it to a polygon array or
> something, for projects that can't handle consuming additional types.
>

I'm actually thinking the opposite!  My goal is to provide operations which
can be used to process sets of records in PostGIS with polygonal geometry,
which *implicity* form a coverage.  That fits in better with the relational
and SQL paradigm, I think.  In particular, coverage polygon attributes are
simply represented by the table rows.  By using window functions coverage
operations can run over sets of rows and produce new values for the
geometry in each row (for example:

- linework indicating coverage errors
- a coverage-clean version of the input
- a simplified version of the input
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/1adf4e09/attachment.htm>

From pramsey at cleverelephant.ca  Wed Sep  7 16:50:33 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 7 Sep 2022 16:50:33 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens0ZARKhb0yiG1_7Q8sgzvcUHucOABUoyE3DzobBwzdOtA@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19> <009001d8c309$67801980$36804c80$@pcorp.us>
 <CAK2ens0ZARKhb0yiG1_7Q8sgzvcUHucOABUoyE3DzobBwzdOtA@mail.gmail.com>
Message-ID: <80976766-0A79-4107-9247-950BA7B7710B@cleverelephant.ca>



> On Sep 7, 2022, at 3:50 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> You read my mind.  I'm fine with an additional type in PostGIS.
> 
> Along the lines with what Dan Baston said, the idea of having a special
> coverage type that multiple operations can be applied to is very appealing
> to me.
> 
> But not sure how much extra overhead or difficulty that would cause for
> other projects consuming such a new type.
> Maybe for some it can have a mutator to convert it to a polygon array or
> something, for projects that can't handle consuming additional types.
> 
> I'm actually thinking the opposite!  My goal is to provide operations which can be used to process sets of records in PostGIS with polygonal geometry, which *implicity* form a coverage.  That fits in better with the relational and SQL paradigm, I think.  In particular, coverage polygon attributes are simply represented by the table rows.  By using window functions coverage operations can run over sets of rows and produce new values for the geometry in each row (for example:
> 
> - linework indicating coverage errors
> - a coverage-clean version of the input
> - a simplified version of the input

There a half-way meeting point in here somewhere, in which some of the operations that are quite intense in the postgis_topology (add an edge to an existing topology within a tolerance, add a polygon to an existing topology) might be delegated to GEOS if the API was rich enough to round-trip the structures. The Oracle topology module has/had the idea of a "working area", so that a portion of the structure could be pulled out and edited (with topology rules) and then stuffed back in and re-integrated very cheaply (presumably because the edges of the "working area" were held invariant in the operations. The upside of such an approach would be the "holy grail" of larger-than-memory coverages that could still be operated on. The downside is complexity. I think we'll find that enough use cases fit inside a "polygon[] -> (opaque engine) -> polygon[]" that the limitations are generally worth putting up with.

P


> 
>   
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From dbaston at gmail.com  Wed Sep  7 17:30:29 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 7 Sep 2022 20:30:29 -0400
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <009001d8c309$67801980$36804c80$@pcorp.us>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19> <009001d8c309$67801980$36804c80$@pcorp.us>
Message-ID: <CA+K_q_oFQwSKXkRtGdzvc_hYGo138smj8oXJniYUimF643=m7g@mail.gmail.com>

>
> But not sure how much extra overhead or difficulty that would cause for
> other projects consuming such a new type.
>

It would be the same difficulty/overhead as creating a GeometryCollection
instead of passing around an array of geometries or creating an Envelope
instead of working with arrays of four doubles. In other words, negligible.
We're just saying "this isn't a random array of polygons, it's a set that
has some special properties."

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/a22d6b86/attachment-0001.htm>

From geos-trac at osgeo.org  Wed Sep  7 17:44:10 2022
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 08 Sep 2022 00:44:10 -0000
Subject: [geos-devel] [GEOS] #1114: CAPI STRtree functions swallow errors
In-Reply-To: <045.74891a1c16f3de5eb44d72c1a081198a@osgeo.org>
References: <045.74891a1c16f3de5eb44d72c1a081198a@osgeo.org>
Message-ID: <060.20013402ae96224c874456580150c2e2@osgeo.org>

#1114: CAPI STRtree functions swallow errors
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.11.0
Component:  Default     |     Version:  main
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Comment (by dbaston):

 Changing these to return int shouldn't break anything, should it? GDAL
 recently mad a similar change: https://github.com/OSGeo/gdal/pull/6303
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1114#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Wed Sep  7 18:20:33 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 7 Sep 2022 18:20:33 -0700
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CA+K_q_oFQwSKXkRtGdzvc_hYGo138smj8oXJniYUimF643=m7g@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19> <009001d8c309$67801980$36804c80$@pcorp.us>
 <CA+K_q_oFQwSKXkRtGdzvc_hYGo138smj8oXJniYUimF643=m7g@mail.gmail.com>
Message-ID: <CAK2ens0TsYfCEpvPp4+dOEFJwLEbcpwLjrOH+08HD-WQiN5tJg@mail.gmail.com>

On Wed, Sep 7, 2022 at 5:30 PM Daniel Baston <dbaston at gmail.com> wrote:

> But not sure how much extra overhead or difficulty that would cause for
>> other projects consuming such a new type.
>>
>
> It would be the same difficulty/overhead as creating a GeometryCollection
> instead of passing around an array of geometries or creating an Envelope
> instead of working with arrays of four doubles. In other words, negligible.
> We're just saying "this isn't a random array of polygons, it's a set that
> has some special properties."
>

If the Coverage type is just a list of polygons, then agreed, it has low
overhead.

If it is actually a full topological structure, then it has significant
overhead both in constructing the topology and allocating objects
representing the topology graph.  I think some of the ideas in this thread
might require this kind of structure to be efficient.  But it obviously has
significant extra complexity.  I'm not working in this direction (for now,
anyway).   I'm interested in seeing how many operations can be done
efficiently using the list-of-polygons representation.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220907/1e274f2b/attachment.htm>

From dbaston at gmail.com  Thu Sep  8 08:03:48 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Thu, 8 Sep 2022 11:03:48 -0400
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens0TsYfCEpvPp4+dOEFJwLEbcpwLjrOH+08HD-WQiN5tJg@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19> <009001d8c309$67801980$36804c80$@pcorp.us>
 <CA+K_q_oFQwSKXkRtGdzvc_hYGo138smj8oXJniYUimF643=m7g@mail.gmail.com>
 <CAK2ens0TsYfCEpvPp4+dOEFJwLEbcpwLjrOH+08HD-WQiN5tJg@mail.gmail.com>
Message-ID: <CA+K_q_r_kULr9h0gd6KcGZwoU4PuJGaDpKvAKFrCmj=j4-Y9OA@mail.gmail.com>

>
> If the Coverage type is just a list of polygons, then agreed, it has low
> overhead.
>
> If it is actually a full topological structure, then it has significant
> overhead both in constructing the topology and allocating objects
> representing the topology graph.  I think some of the ideas in this thread
> might require this kind of structure to be efficient.  But it obviously has
> significant extra complexity.  I'm not working in this direction (for now,
> anyway).   I'm interested in seeing how many operations can be done
> efficiently using the list-of-polygons representation.
>

This is really an implementation question, isn't it? I was responding only
to your request for feedback on the API. Maybe it makes sense to implement
everything based on arrays of polygons. But exposing it to an API client
that way doesn't seem especially clean, future-proof, or consistent with
the rest of the GEOS API. Is it that improbable that we would ever want to
store a coverage's extent? Remove a polygon from a coverage?

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220908/ac2a3d84/attachment.htm>

From strk at kbt.io  Thu Sep  8 08:53:09 2022
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 8 Sep 2022 17:53:09 +0200
Subject: [geos-devel] GEOS C API for Polygonal Coverage operations?
In-Reply-To: <CAK2ens1jUT9Vfroxp-ge6+2JaSOMLYFcvSZhe3BMwkVKzP5NMg@mail.gmail.com>
References: <CAK2ens1vqae_8kan_xn35KFQ3tmYN2yNKnojcyqpOfpSXw=jcw@mail.gmail.com>
 <YxkWV0gym7hqAesi@c19>
 <CAK2ens1jUT9Vfroxp-ge6+2JaSOMLYFcvSZhe3BMwkVKzP5NMg@mail.gmail.com>
Message-ID: <YxoP5dXXR1+jrds/@c19>

On Wed, Sep 07, 2022 at 03:44:10PM -0700, Martin Davis wrote:
> On Wed, Sep 7, 2022 at 3:18 PM Sandro Santilli <strk at kbt.io> wrote:
> 
> > On Tue, Sep 06, 2022 at 02:37:37PM -0700, Martin Davis wrote:
> > > I've started to build out operations on Polygonal Coverages in JTS ([1],
> > > [2]).
> >
> > [...]
> >
> > > A key question is how to expose these operations in the GEOS C API.  I
> > see
> > > two options:
> > > 1) Model a Polygonal Coverage as an array of simple Polygons (and
> > possibly
> > > MultiPolygons)
> > > 2) Provide a Polygonal Coverage datatype (which might contain internal
> > > topology)
> >
> > Could a coverage datatype allow performing operations on PostGIS Topologies
> > w/out building the polygons for each face ?
> 
> 
> The short answer is "yes, probably, if suitable builders are defined for
> the coverage datatype".  But that starts getting complex (in particular, it
> probably requires a concept of a Face, which might also have to be
> exposed).  This is quite a bit more design than the current work requires.

It really depends on what you mean by "Coverage" really.
All I'm hoping for is that when using TopoGeometry objects I don't
have to build Geometry objects from them for the SOLE PURPOSE of
feeding them to GEOS which on its side would re-compute noding and
labeling which was already known by the TopoGeometry objects itself.

> > There's an ISO standard
> > representation of topologies, maybe such representation could be used
> > to transfer those topologies back and forth with GEOS ?
> 
> Not familiar with that representation.  How does it handle identity for
> Faces of topologies?

Faces are identified by an integer value, referenced by edges
(attributes: left_face, right_face)

See http://strk.kbt.io/projects/postgis/topology-ER.pdf


--strk;

From Lars.Opsahl at nibio.no  Sun Sep 11 21:18:48 2022
From: Lars.Opsahl at nibio.no (Lars Aksel Opsahl)
Date: Mon, 12 Sep 2022 04:18:48 +0000
Subject: [geos-devel] geos-devel Digest, Vol 238, Issue 6, && operator
In-Reply-To: <mailman.32849.1662597045.32175.geos-devel@lists.osgeo.org>
References: <mailman.32849.1662597045.32175.geos-devel@lists.osgeo.org>
Message-ID: <VE1P189MB103754D76527C2A13FBDE62F9D409@VE1P189MB1037.EURP189.PROD.OUTLOOK.COM>

>Message: 1
>Date: Thu, 8 Sep 2022 00:08:23 +0200
>From: Sandro Santilli <strk at kbt.io>
>To: GEOS Development List <geos-devel at lists.osgeo.org>
>Subject: Re: [geos-devel] GEOS C API for Polygonal Coverage
>        operations?
>Message-ID: <YxkWV0gym7hqAesi at c19>
>Content-Type: text/plain; charset=us-ascii
>
>On Tue, Sep 06, 2022 at 02:37:37PM -0700, Martin Davis wrote:
>> I've started to build out operations on Polygonal Coverages in JTS ([1],
>> [2]).
>
>[...]
>
>> A key question is how to expose these operations in the GEOS C API.  I see
>> two options:
>> 1) Model a Polygonal Coverage as an array of simple Polygons (and possibly
>> MultiPolygons)
>> 2) Provide a Polygonal Coverage datatype (which might contain internal
>> topology)
>
>Could a coverage datatype allow performing operations on PostGIS Topologies
>w/out building the polygons for each face ? There's an ISO standard
>representation of topologies, maybe such representation could be used
>to transfer those topologies back and forth with GEOS ?
>
>--strk;
>
>
>------------------------------
>

Hi

To speed up now I sometimes use the faces directly like below so yes it would be very nice to avoid code like this:

SELECT distinct t.omrade, ((t.omrade).id)
FROM topo_rein.arstidsbeite_var_flate t, topology tt, topology.layer tl, topo_rein_sysdata_rvr.relation tr, topo_rein_sysdata_rvr.face tf
WHERE
((t.omrade).topology_id = tt.id AND (t.omrade).layer_id = tl.layer_id AND (t.omrade).type = tl.feature_type) AND
tr.topogeo_id = ((t.omrade).id) AND
((t.omrade).layer_id) = tr.layer_id AND ((t.omrade).id) = tr.topogeo_id AND tf.face_id = tr.element_id AND ((t.omrade).type) = tr.element_type AND
tf.mbr &&
'0103000020A21000000100000005000000EF94C2D58F783C4082E16983FE605140EF94C2D58F783C40AA4578DB36945140A4B7A470A6453D40AA4578DB36945140A4B7A470A6453D4082E16983FE605140EF94C2D58F783C4082E16983FE605140'
AND
ST_Intersects('0103000020A21000000100000005000000EF94C2D58F783C4082E16983FE605140EF94C2D58F783C40AA4578DB36945140A4B7A470A6453D40AA4578DB36945140A4B7A470A6453D4082E16983FE605140EF94C2D58F783C4082E16983FE605140', t.omrade)

So could it also be an option to let && operator to know about about Topology type is extension added as a start and then the && operator could include code like this ?

'((t.omrade).topology_id = tt.id AND (t.omrade).layer_id = tl.layer_id AND (t.omrade).type = tl.feature_type) AND
tr.topogeo_id = ((t.omrade).id) AND
((t.omrade).layer_id) = tr.layer_id AND ((t.omrade).id) = tr.topogeo_id AND tf.face_id = tr.element_id AND ((t.omrade).type) = tr.element_type AND'

The best off course is if this was solved in geos as you suggest, but it would help a lot if the code below used the face.mbr indexes also as a start.

SELECT distinct t.omrade, ((t.omrade).id)
FROM topo_rein.arstidsbeite_var_flate t
WHERE
t.omrade &&
'0103000020A21000000100000005000000EF94C2D58F783C4082E16983FE605140EF94C2D58F783C40AA4578DB36945140A4B7A470A6453D40AA4578DB36945140A4B7A470A6453D4082E16983FE605140EF94C2D58F783C4082E16983FE605140'
AND
ST_Intersects('0103000020A21000000100000005000000EF94C2D58F783C4082E16983FE605140EF94C2D58F783C40AA4578DB36945140A4B7A470A6453D40AA4578DB36945140A4B7A470A6453D4082E16983FE605140EF94C2D58F783C4082E16983FE605140', t.omrade)

Lars
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220912/cb13b639/attachment.htm>

From geos-trac at osgeo.org  Mon Sep 12 07:28:36 2022
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 12 Sep 2022 14:28:36 -0000
Subject: [geos-devel] [GEOS] #1095: WKTReader ignores extra characters
 after end of geometry
In-Reply-To: <045.06a1bfbbd5fc13e7b230cd99e2d5b6e0@osgeo.org>
References: <045.06a1bfbbd5fc13e7b230cd99e2d5b6e0@osgeo.org>
Message-ID: <060.6db9703f31bd9a3d43c75ff4948ed399@osgeo.org>

#1095: WKTReader ignores extra characters after end of geometry
------------------------+---------------------------
 Reporter:  dbaston     |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.9.3
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed

Comment:

 Fixed in `main` with
 [changeset:de17e6fb6ba645622d1edc798d5bc77fdfe4189a/git]
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1095#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From lr at pcorp.us  Mon Sep 12 08:12:53 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 12 Sep 2022 11:12:53 -0400
Subject: [geos-devel] End of Life Policy (EOL)
Message-ID: <001201d8c6ba$21e54580$65afd080$@pcorp.us>

I'd like to make an RFC proposing a standardish End of Like Policy

Does anyone have an issue with that?

I'm thinking of a policy along the lines of

We support a release generally at most X plus years after the first version
of it, but we have discretion to increase that if needed.

X = 3 - 5 feels about right.

How do people feel about that?

If so I can draft up an RFC about that and we can edit if we are comfortable
with that and start EOL'ing other releases besides the 3.5 I recently EOL'd.

Thanks,
Regina


From geos-trac at osgeo.org  Mon Sep 12 08:13:39 2022
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 12 Sep 2022 15:13:39 -0000
Subject: [geos-devel] [GEOS] #1110: Intersects crashes when there are
 EMPTY items inside MULTI- or GEOMETRYCOLLECTION objects
In-Reply-To: <042.26c20e421c22727f95faac85d74cf240@osgeo.org>
References: <042.26c20e421c22727f95faac85d74cf240@osgeo.org>
Message-ID: <057.0c6cc60808523358466c0f7774dbdc26@osgeo.org>

#1110: Intersects crashes when there are EMPTY items inside MULTI- or
GEOMETRYCOLLECTION objects
------------------------+---------------------------
 Reporter:  otan        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  minor       |   Milestone:  3.9.3
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed

Comment:

 Fixed in

 - `main` [changeset:e94b56fe4febd81f48cc25f5cdbee0a1e4456977/git]
 - 3.11 [changeset:9974c7b0992817f14d8dfb94ed1abc6db26b6066/git]
 - 3.10 [changeset:a863243cab17e4c80f294eff1a2a63c7b6720870/git]
 - 3.9 [changeset:b22ce7b58c88452a27d2db0d44e78097936c618d/git]
 - 3.8 [changeset:c3024e03b230222d640ef961061c41c5fece88e4/git]
 - 3.7 [changeset:8a624cb41c09ec71e934ad7bf3c9feb7ac0ff841/git]
 - 3.6 [changeset:a8233571142ef7f1c3234ac2cfb2c3df25b01f57/git]
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1110#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Mon Sep 12 08:20:17 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 12 Sep 2022 08:20:17 -0700
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
Message-ID: <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>



> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
> 
> I'd like to make an RFC proposing a standardish End of Like Policy
> 
> Does anyone have an issue with that?

Only insofar as there's this idea that we support any particular version at all. Honestly, there are some bugs I just cannot be bothered to try and fix (anything overlay pre 3.9, right? the fix there is to upgrade) but at the same time, I don't really mind pulling back trivial stuff pretty far. What does it mean to "support" this stuff anyways? Comes right down to it, if a paying customer on 3.4 has an issue and is unable to upgrade, we'll break our fingers to try and fix it. But that has to do with our corporate support, not some community commitment to support.

???

P


> 
> I'm thinking of a policy along the lines of
> 
> We support a release generally at most X plus years after the first version
> of it, but we have discretion to increase that if needed.
> 
> X = 3 - 5 feels about right.
> 
> How do people feel about that?
> 
> If so I can draft up an RFC about that and we can edit if we are comfortable
> with that and start EOL'ing other releases besides the 3.5 I recently EOL'd.
> 
> Thanks,
> Regina
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From dbaston at gmail.com  Mon Sep 12 08:28:35 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Mon, 12 Sep 2022 11:28:35 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
Message-ID: <CA+K_q_oPuTbxvZvQwW=rgmKJxmFCjDHN8iSswLFUA3Y7A9jN4g@mail.gmail.com>

> What does it mean to "support" this stuff anyways?


It's useful for maintainers to have a guideline to follow when backporting.
Do I backport only as far as I can apply the patch cleanly? Or is there a
list of "supported" releases I should try to cover?

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220912/5a76acd5/attachment.htm>

From pramsey at cleverelephant.ca  Mon Sep 12 08:30:46 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 12 Sep 2022 08:30:46 -0700
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <CA+K_q_oPuTbxvZvQwW=rgmKJxmFCjDHN8iSswLFUA3Y7A9jN4g@mail.gmail.com>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <CA+K_q_oPuTbxvZvQwW=rgmKJxmFCjDHN8iSswLFUA3Y7A9jN4g@mail.gmail.com>
Message-ID: <20FCF469-8856-4109-9C11-131D6F3721C5@cleverelephant.ca>



> On Sep 12, 2022, at 8:28 AM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> 
> What does it mean to "support" this stuff anyways?
> 
> It's useful for maintainers to have a guideline to follow when backporting. Do I backport only as far as I can apply the patch cleanly? Or is there a list of "supported" releases I should try to cover?

As a "loose guide to effort" makes sense. But frankly "support" is a loaded term, and a "support policy" just makes it seem less flimsy than it really is.

P.



> 
> Dan
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Mon Sep 12 08:34:01 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 12 Sep 2022 11:34:01 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
Message-ID: <000001d8c6bd$15a62c00$40f28400$@pcorp.us>

I'm thinking simple fixes and serious security bugs.

I think it's a given we won't break our backs to fix a particular bug if it
is deemed "De-stabilizing".
By De-stabilizing, I'm thinking enough code to risk causing a particular
bigger issue.  Pretty much the same policy we have in PostGIS no?

But by saying EOL we are saying we will absolutely NEVER push fixes to it.

If some corporate paying customer is running something as crazy as 3.4, you
should just fork that for them and patch it there and deal with their
upgrade issues some other day.

Thanks,
Regina




> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Paul Ramsey
> Sent: Monday, September 12, 2022 11:20 AM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] End of Life Policy (EOL)
> 
> 
> 
> > On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
> >
> > I'd like to make an RFC proposing a standardish End of Like Policy
> >
> > Does anyone have an issue with that?
> 
> Only insofar as there's this idea that we support any particular version
at all.
> Honestly, there are some bugs I just cannot be bothered to try and fix
> (anything overlay pre 3.9, right? the fix there is to upgrade) but at the
same
> time, I don't really mind pulling back trivial stuff pretty far. What does
it mean
> to "support" this stuff anyways? Comes right down to it, if a paying
customer
> on 3.4 has an issue and is unable to upgrade, we'll break our fingers to
try and
> fix it. But that has to do with our corporate support, not some community
> commitment to support.
> 
> ???
> 
> P
> 
> 
> >
> > I'm thinking of a policy along the lines of
> >
> > We support a release generally at most X plus years after the first
> > version of it, but we have discretion to increase that if needed.
> >
> > X = 3 - 5 feels about right.
> >
> > How do people feel about that?
> >
> > If so I can draft up an RFC about that and we can edit if we are
> > comfortable with that and start EOL'ing other releases besides the 3.5 I
> recently EOL'd.
> >
> > Thanks,
> > Regina
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Mon Sep 12 08:37:23 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 12 Sep 2022 08:37:23 -0700
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
Message-ID: <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>

As long as the word "support" does not appear in the text. Perhaps "will not have any further numbered releases" is more correct than "not supported". 

P

> On Sep 12, 2022, at 8:34 AM, Regina Obe <lr at pcorp.us> wrote:
> 
> I'm thinking simple fixes and serious security bugs.
> 
> I think it's a given we won't break our backs to fix a particular bug if it
> is deemed "De-stabilizing".
> By De-stabilizing, I'm thinking enough code to risk causing a particular
> bigger issue.  Pretty much the same policy we have in PostGIS no?
> 
> But by saying EOL we are saying we will absolutely NEVER push fixes to it.
> 
> If some corporate paying customer is running something as crazy as 3.4, you
> should just fork that for them and patch it there and deal with their
> upgrade issues some other day.
> 
> Thanks,
> Regina
> 
> 
> 
> 
>> -----Original Message-----
>> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
>> Paul Ramsey
>> Sent: Monday, September 12, 2022 11:20 AM
>> To: GEOS Development List <geos-devel at lists.osgeo.org>
>> Subject: Re: [geos-devel] End of Life Policy (EOL)
>> 
>> 
>> 
>>> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
>>> 
>>> I'd like to make an RFC proposing a standardish End of Like Policy
>>> 
>>> Does anyone have an issue with that?
>> 
>> Only insofar as there's this idea that we support any particular version
> at all.
>> Honestly, there are some bugs I just cannot be bothered to try and fix
>> (anything overlay pre 3.9, right? the fix there is to upgrade) but at the
> same
>> time, I don't really mind pulling back trivial stuff pretty far. What does
> it mean
>> to "support" this stuff anyways? Comes right down to it, if a paying
> customer
>> on 3.4 has an issue and is unable to upgrade, we'll break our fingers to
> try and
>> fix it. But that has to do with our corporate support, not some community
>> commitment to support.
>> 
>> ???
>> 
>> P
>> 
>> 
>>> 
>>> I'm thinking of a policy along the lines of
>>> 
>>> We support a release generally at most X plus years after the first
>>> version of it, but we have discretion to increase that if needed.
>>> 
>>> X = 3 - 5 feels about right.
>>> 
>>> How do people feel about that?
>>> 
>>> If so I can draft up an RFC about that and we can edit if we are
>>> comfortable with that and start EOL'ing other releases besides the 3.5 I
>> recently EOL'd.
>>> 
>>> Thanks,
>>> Regina
>>> 
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> 
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Mon Sep 12 09:19:49 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 12 Sep 2022 12:19:49 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
Message-ID: <000601d8c6c3$7b831460$72893d20$@pcorp.us>

That works for me :)

So I'll draft up an RFC to that effect.  So just to be clear, that leaves
space open to:

We may put an update on such a release like 3.4 to the 3.4 branch but we
will not bother tagging it.

I'm not going to say that of course, just saying we are okay with that.

Thanks,
Regina

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Paul Ramsey
> Sent: Monday, September 12, 2022 11:37 AM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] End of Life Policy (EOL)
> 
> As long as the word "support" does not appear in the text. Perhaps "will
not
> have any further numbered releases" is more correct than "not supported".
> 
> P
> 
> > On Sep 12, 2022, at 8:34 AM, Regina Obe <lr at pcorp.us> wrote:
> >
> > I'm thinking simple fixes and serious security bugs.
> >
> > I think it's a given we won't break our backs to fix a particular bug
> > if it is deemed "De-stabilizing".
> > By De-stabilizing, I'm thinking enough code to risk causing a
> > particular bigger issue.  Pretty much the same policy we have in PostGIS
> no?
> >
> > But by saying EOL we are saying we will absolutely NEVER push fixes to
it.
> >
> > If some corporate paying customer is running something as crazy as
> > 3.4, you should just fork that for them and patch it there and deal
> > with their upgrade issues some other day.
> >
> > Thanks,
> > Regina
> >
> >
> >
> >
> >> -----Original Message-----
> >> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On
> >> Behalf Of Paul Ramsey
> >> Sent: Monday, September 12, 2022 11:20 AM
> >> To: GEOS Development List <geos-devel at lists.osgeo.org>
> >> Subject: Re: [geos-devel] End of Life Policy (EOL)
> >>
> >>
> >>
> >>> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
> >>>
> >>> I'd like to make an RFC proposing a standardish End of Like Policy
> >>>
> >>> Does anyone have an issue with that?
> >>
> >> Only insofar as there's this idea that we support any particular
> >> version
> > at all.
> >> Honestly, there are some bugs I just cannot be bothered to try and
> >> fix (anything overlay pre 3.9, right? the fix there is to upgrade)
> >> but at the
> > same
> >> time, I don't really mind pulling back trivial stuff pretty far. What
> >> does
> > it mean
> >> to "support" this stuff anyways? Comes right down to it, if a paying
> > customer
> >> on 3.4 has an issue and is unable to upgrade, we'll break our fingers
> >> to
> > try and
> >> fix it. But that has to do with our corporate support, not some
> >> community commitment to support.
> >>
> >> ???
> >>
> >> P
> >>
> >>
> >>>
> >>> I'm thinking of a policy along the lines of
> >>>
> >>> We support a release generally at most X plus years after the first
> >>> version of it, but we have discretion to increase that if needed.
> >>>
> >>> X = 3 - 5 feels about right.
> >>>
> >>> How do people feel about that?
> >>>
> >>> If so I can draft up an RFC about that and we can edit if we are
> >>> comfortable with that and start EOL'ing other releases besides the
> >>> 3.5 I
> >> recently EOL'd.
> >>>
> >>> Thanks,
> >>> Regina
> >>>
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel at lists.osgeo.org
> >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From schwehr at gmail.com  Mon Sep 12 09:22:42 2022
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 12 Sep 2022 09:22:42 -0700
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <000601d8c6c3$7b831460$72893d20$@pcorp.us>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
Message-ID: <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>

Regina,

Thank you!  This will be a topic of discussion at the NumFocus funded
projects later this month where I will be representing GDAL.  I will be
keeping an eye on the RFC and this thread for aspects that should
be discussed at the meeting.

-kurt

On Mon, Sep 12, 2022 at 9:19 AM Regina Obe <lr at pcorp.us> wrote:

> That works for me :)
>
> So I'll draft up an RFC to that effect.  So just to be clear, that leaves
> space open to:
>
> We may put an update on such a release like 3.4 to the 3.4 branch but we
> will not bother tagging it.
>
> I'm not going to say that of course, just saying we are okay with that.
>
> Thanks,
> Regina
>
> > -----Original Message-----
> > From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
> Of
> > Paul Ramsey
> > Sent: Monday, September 12, 2022 11:37 AM
> > To: GEOS Development List <geos-devel at lists.osgeo.org>
> > Subject: Re: [geos-devel] End of Life Policy (EOL)
> >
> > As long as the word "support" does not appear in the text. Perhaps "will
> not
> > have any further numbered releases" is more correct than "not supported".
> >
> > P
> >
> > > On Sep 12, 2022, at 8:34 AM, Regina Obe <lr at pcorp.us> wrote:
> > >
> > > I'm thinking simple fixes and serious security bugs.
> > >
> > > I think it's a given we won't break our backs to fix a particular bug
> > > if it is deemed "De-stabilizing".
> > > By De-stabilizing, I'm thinking enough code to risk causing a
> > > particular bigger issue.  Pretty much the same policy we have in
> PostGIS
> > no?
> > >
> > > But by saying EOL we are saying we will absolutely NEVER push fixes to
> it.
> > >
> > > If some corporate paying customer is running something as crazy as
> > > 3.4, you should just fork that for them and patch it there and deal
> > > with their upgrade issues some other day.
> > >
> > > Thanks,
> > > Regina
> > >
> > >
> > >
> > >
> > >> -----Original Message-----
> > >> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On
> > >> Behalf Of Paul Ramsey
> > >> Sent: Monday, September 12, 2022 11:20 AM
> > >> To: GEOS Development List <geos-devel at lists.osgeo.org>
> > >> Subject: Re: [geos-devel] End of Life Policy (EOL)
> > >>
> > >>
> > >>
> > >>> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
> > >>>
> > >>> I'd like to make an RFC proposing a standardish End of Like Policy
> > >>>
> > >>> Does anyone have an issue with that?
> > >>
> > >> Only insofar as there's this idea that we support any particular
> > >> version
> > > at all.
> > >> Honestly, there are some bugs I just cannot be bothered to try and
> > >> fix (anything overlay pre 3.9, right? the fix there is to upgrade)
> > >> but at the
> > > same
> > >> time, I don't really mind pulling back trivial stuff pretty far. What
> > >> does
> > > it mean
> > >> to "support" this stuff anyways? Comes right down to it, if a paying
> > > customer
> > >> on 3.4 has an issue and is unable to upgrade, we'll break our fingers
> > >> to
> > > try and
> > >> fix it. But that has to do with our corporate support, not some
> > >> community commitment to support.
> > >>
> > >> ???
> > >>
> > >> P
> > >>
> > >>
> > >>>
> > >>> I'm thinking of a policy along the lines of
> > >>>
> > >>> We support a release generally at most X plus years after the first
> > >>> version of it, but we have discretion to increase that if needed.
> > >>>
> > >>> X = 3 - 5 feels about right.
> > >>>
> > >>> How do people feel about that?
> > >>>
> > >>> If so I can draft up an RFC about that and we can edit if we are
> > >>> comfortable with that and start EOL'ing other releases besides the
> > >>> 3.5 I
> > >> recently EOL'd.
> > >>>
> > >>> Thanks,
> > >>> Regina
> > >>>
> > >>> _______________________________________________
> > >>> geos-devel mailing list
> > >>> geos-devel at lists.osgeo.org
> > >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > >>
> > >> _______________________________________________
> > >> geos-devel mailing list
> > >> geos-devel at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220912/be910468/attachment-0001.htm>

From lr at pcorp.us  Mon Sep 12 10:55:48 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 12 Sep 2022 13:55:48 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
Message-ID: <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us>

Here is my first pass at a policy.

 

https://libgeos.org/development/rfcs/rfc11/

 

If people are agreeable with it, I can put a link to it on the download page -- https://libgeos.org/usage/download/

 

I was also thinking we should put the First Release date on this pages to make it easier to do the math of how old a minor release is.

I think having a Final Release column might be going too far, though other projects do that.

 

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Kurt Schwehr
Sent: Monday, September 12, 2022 12:23 PM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] End of Life Policy (EOL)

 

Regina,

 

Thank you!  This will be a topic of discussion at the NumFocus funded projects later this month where I will be representing GDAL.  I will be keeping an eye on the RFC and this thread for aspects that should be discussed at the meeting.

 

-kurt

 

On Mon, Sep 12, 2022 at 9:19 AM Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

That works for me :)

So I'll draft up an RFC to that effect.  So just to be clear, that leaves
space open to:

We may put an update on such a release like 3.4 to the 3.4 branch but we
will not bother tagging it.

I'm not going to say that of course, just saying we are okay with that.

Thanks,
Regina

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org <mailto:geos-devel-bounces at lists.osgeo.org> ] On Behalf Of
> Paul Ramsey
> Sent: Monday, September 12, 2022 11:37 AM
> To: GEOS Development List <geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> >
> Subject: Re: [geos-devel] End of Life Policy (EOL)
> 
> As long as the word "support" does not appear in the text. Perhaps "will
not
> have any further numbered releases" is more correct than "not supported".
> 
> P
> 
> > On Sep 12, 2022, at 8:34 AM, Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:
> >
> > I'm thinking simple fixes and serious security bugs.
> >
> > I think it's a given we won't break our backs to fix a particular bug
> > if it is deemed "De-stabilizing".
> > By De-stabilizing, I'm thinking enough code to risk causing a
> > particular bigger issue.  Pretty much the same policy we have in PostGIS
> no?
> >
> > But by saying EOL we are saying we will absolutely NEVER push fixes to
it.
> >
> > If some corporate paying customer is running something as crazy as
> > 3.4, you should just fork that for them and patch it there and deal
> > with their upgrade issues some other day.
> >
> > Thanks,
> > Regina
> >
> >
> >
> >
> >> -----Original Message-----
> >> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org <mailto:geos-devel-bounces at lists.osgeo.org> ] On
> >> Behalf Of Paul Ramsey
> >> Sent: Monday, September 12, 2022 11:20 AM
> >> To: GEOS Development List <geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> >
> >> Subject: Re: [geos-devel] End of Life Policy (EOL)
> >>
> >>
> >>
> >>> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:
> >>>
> >>> I'd like to make an RFC proposing a standardish End of Like Policy
> >>>
> >>> Does anyone have an issue with that?
> >>
> >> Only insofar as there's this idea that we support any particular
> >> version
> > at all.
> >> Honestly, there are some bugs I just cannot be bothered to try and
> >> fix (anything overlay pre 3.9, right? the fix there is to upgrade)
> >> but at the
> > same
> >> time, I don't really mind pulling back trivial stuff pretty far. What
> >> does
> > it mean
> >> to "support" this stuff anyways? Comes right down to it, if a paying
> > customer
> >> on 3.4 has an issue and is unable to upgrade, we'll break our fingers
> >> to
> > try and
> >> fix it. But that has to do with our corporate support, not some
> >> community commitment to support.
> >>
> >> ???
> >>
> >> P
> >>
> >>
> >>>
> >>> I'm thinking of a policy along the lines of
> >>>
> >>> We support a release generally at most X plus years after the first
> >>> version of it, but we have discretion to increase that if needed.
> >>>
> >>> X = 3 - 5 feels about right.
> >>>
> >>> How do people feel about that?
> >>>
> >>> If so I can draft up an RFC about that and we can edit if we are
> >>> comfortable with that and start EOL'ing other releases besides the
> >>> 3.5 I
> >> recently EOL'd.
> >>>
> >>> Thanks,
> >>> Regina
> >>>
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
> >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
> https://lists.osgeo.org/mailman/listinfo/geos-devel

_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220912/c6d9c458/attachment.htm>

From pramsey at cleverelephant.ca  Mon Sep 12 10:57:13 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 12 Sep 2022 10:57:13 -0700
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us>
Message-ID: <B1E09EEC-5944-44F1-B01D-0264467582A7@cleverelephant.ca>

Final release is pretty Boss. It kind of nicely makes the policy clear w/o having to wade through a bunch of text and then do mental math to answer the question "is this EOL" and "when will this EOL".



> On Sep 12, 2022, at 10:55 AM, Regina Obe <lr at pcorp.us> wrote:
> 
> Here is my first pass at a policy.
>  
> https://libgeos.org/development/rfcs/rfc11/
>  
> If people are agreeable with it, I can put a link to it on the download page -- https://libgeos.org/usage/download/
>  
> I was also thinking we should put the First Release date on this pages to make it easier to do the math of how old a minor release is.
> I think having a Final Release column might be going too far, though other projects do that.
>  
>  
>  
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Kurt Schwehr
> Sent: Monday, September 12, 2022 12:23 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] End of Life Policy (EOL)
>  
> Regina,
>  
> Thank you!  This will be a topic of discussion at the NumFocus funded projects later this month where I will be representing GDAL.  I will be keeping an eye on the RFC and this thread for aspects that should be discussed at the meeting.
>  
> -kurt
>  
> On Mon, Sep 12, 2022 at 9:19 AM Regina Obe <lr at pcorp.us> wrote:
>> That works for me :)
>> 
>> So I'll draft up an RFC to that effect.  So just to be clear, that leaves
>> space open to:
>> 
>> We may put an update on such a release like 3.4 to the 3.4 branch but we
>> will not bother tagging it.
>> 
>> I'm not going to say that of course, just saying we are okay with that.
>> 
>> Thanks,
>> Regina
>> 
>> > -----Original Message-----
>> > From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
>> > Paul Ramsey
>> > Sent: Monday, September 12, 2022 11:37 AM
>> > To: GEOS Development List <geos-devel at lists.osgeo.org>
>> > Subject: Re: [geos-devel] End of Life Policy (EOL)
>> > 
>> > As long as the word "support" does not appear in the text. Perhaps "will
>> not
>> > have any further numbered releases" is more correct than "not supported".
>> > 
>> > P
>> > 
>> > > On Sep 12, 2022, at 8:34 AM, Regina Obe <lr at pcorp.us> wrote:
>> > >
>> > > I'm thinking simple fixes and serious security bugs.
>> > >
>> > > I think it's a given we won't break our backs to fix a particular bug
>> > > if it is deemed "De-stabilizing".
>> > > By De-stabilizing, I'm thinking enough code to risk causing a
>> > > particular bigger issue.  Pretty much the same policy we have in PostGIS
>> > no?
>> > >
>> > > But by saying EOL we are saying we will absolutely NEVER push fixes to
>> it.
>> > >
>> > > If some corporate paying customer is running something as crazy as
>> > > 3.4, you should just fork that for them and patch it there and deal
>> > > with their upgrade issues some other day.
>> > >
>> > > Thanks,
>> > > Regina
>> > >
>> > >
>> > >
>> > >
>> > >> -----Original Message-----
>> > >> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On
>> > >> Behalf Of Paul Ramsey
>> > >> Sent: Monday, September 12, 2022 11:20 AM
>> > >> To: GEOS Development List <geos-devel at lists.osgeo.org>
>> > >> Subject: Re: [geos-devel] End of Life Policy (EOL)
>> > >>
>> > >>
>> > >>
>> > >>> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
>> > >>>
>> > >>> I'd like to make an RFC proposing a standardish End of Like Policy
>> > >>>
>> > >>> Does anyone have an issue with that?
>> > >>
>> > >> Only insofar as there's this idea that we support any particular
>> > >> version
>> > > at all.
>> > >> Honestly, there are some bugs I just cannot be bothered to try and
>> > >> fix (anything overlay pre 3.9, right? the fix there is to upgrade)
>> > >> but at the
>> > > same
>> > >> time, I don't really mind pulling back trivial stuff pretty far. What
>> > >> does
>> > > it mean
>> > >> to "support" this stuff anyways? Comes right down to it, if a paying
>> > > customer
>> > >> on 3.4 has an issue and is unable to upgrade, we'll break our fingers
>> > >> to
>> > > try and
>> > >> fix it. But that has to do with our corporate support, not some
>> > >> community commitment to support.
>> > >>
>> > >> ???
>> > >>
>> > >> P
>> > >>
>> > >>
>> > >>>
>> > >>> I'm thinking of a policy along the lines of
>> > >>>
>> > >>> We support a release generally at most X plus years after the first
>> > >>> version of it, but we have discretion to increase that if needed.
>> > >>>
>> > >>> X = 3 - 5 feels about right.
>> > >>>
>> > >>> How do people feel about that?
>> > >>>
>> > >>> If so I can draft up an RFC about that and we can edit if we are
>> > >>> comfortable with that and start EOL'ing other releases besides the
>> > >>> 3.5 I
>> > >> recently EOL'd.
>> > >>>
>> > >>> Thanks,
>> > >>> Regina
>> > >>>
>> > >>> _______________________________________________
>> > >>> geos-devel mailing list
>> > >>> geos-devel at lists.osgeo.org
>> > >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> > >>
>> > >> _______________________________________________
>> > >> geos-devel mailing list
>> > >> geos-devel at lists.osgeo.org
>> > >> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> > >
>> > > _______________________________________________
>> > > geos-devel mailing list
>> > > geos-devel at lists.osgeo.org
>> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
>> > 
>> > _______________________________________________
>> > geos-devel mailing list
>> > geos-devel at lists.osgeo.org
>> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>> 
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Mon Sep 12 11:18:08 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 12 Sep 2022 14:18:08 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <B1E09EEC-5944-44F1-B01D-0264467582A7@cleverelephant.ca>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us>
 <B1E09EEC-5944-44F1-B01D-0264467582A7@cleverelephant.ca>
Message-ID: <000201d8c6d4$03494710$09dbd530$@pcorp.us>

Sounds good to me.

Would you be okay if we put in an estimated EOL date for ones that haven't
released EOL?  
I assume so.  As a rule of thumb, I figure we can when we put up the first
micro, set that final to say 4 years in future or lower?

And then change it as needed once as we get closer to that date.

Thanks,
Regina

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Paul Ramsey
> Sent: Monday, September 12, 2022 1:57 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] End of Life Policy (EOL)
> 
> Final release is pretty Boss. It kind of nicely makes the policy clear w/o
having
> to wade through a bunch of text and then do mental math to answer the
> question "is this EOL" and "when will this EOL".
> 
> 
> 
> > On Sep 12, 2022, at 10:55 AM, Regina Obe <lr at pcorp.us> wrote:
> >
> > Here is my first pass at a policy.
> >
> > https://libgeos.org/development/rfcs/rfc11/
> >
> > If people are agreeable with it, I can put a link to it on the
> > download page -- https://libgeos.org/usage/download/
> >
> > I was also thinking we should put the First Release date on this pages
to
> make it easier to do the math of how old a minor release is.
> > I think having a Final Release column might be going too far, though
other
> projects do that.
> >
> >
> >
> > From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
> > Of Kurt Schwehr
> > Sent: Monday, September 12, 2022 12:23 PM
> > To: GEOS Development List <geos-devel at lists.osgeo.org>
> > Subject: Re: [geos-devel] End of Life Policy (EOL)
> >
> > Regina,
> >
> > Thank you!  This will be a topic of discussion at the NumFocus funded
> projects later this month where I will be representing GDAL.  I will be
keeping
> an eye on the RFC and this thread for aspects that should be discussed at
the
> meeting.
> >
> > -kurt
> >
> > On Mon, Sep 12, 2022 at 9:19 AM Regina Obe <lr at pcorp.us> wrote:
> >> That works for me :)
> >>
> >> So I'll draft up an RFC to that effect.  So just to be clear, that
> >> leaves space open to:
> >>
> >> We may put an update on such a release like 3.4 to the 3.4 branch but
> >> we will not bother tagging it.
> >>
> >> I'm not going to say that of course, just saying we are okay with that.
> >>
> >> Thanks,
> >> Regina
> >>
> >> > -----Original Message-----
> >> > From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On
> >> > Behalf Of Paul Ramsey
> >> > Sent: Monday, September 12, 2022 11:37 AM
> >> > To: GEOS Development List <geos-devel at lists.osgeo.org>
> >> > Subject: Re: [geos-devel] End of Life Policy (EOL)
> >> >
> >> > As long as the word "support" does not appear in the text. Perhaps
> >> > "will
> >> not
> >> > have any further numbered releases" is more correct than "not
> supported".
> >> >
> >> > P
> >> >
> >> > > On Sep 12, 2022, at 8:34 AM, Regina Obe <lr at pcorp.us> wrote:
> >> > >
> >> > > I'm thinking simple fixes and serious security bugs.
> >> > >
> >> > > I think it's a given we won't break our backs to fix a particular
> >> > > bug if it is deemed "De-stabilizing".
> >> > > By De-stabilizing, I'm thinking enough code to risk causing a
> >> > > particular bigger issue.  Pretty much the same policy we have in
> >> > > PostGIS
> >> > no?
> >> > >
> >> > > But by saying EOL we are saying we will absolutely NEVER push
> >> > > fixes to
> >> it.
> >> > >
> >> > > If some corporate paying customer is running something as crazy
> >> > > as 3.4, you should just fork that for them and patch it there and
> >> > > deal with their upgrade issues some other day.
> >> > >
> >> > > Thanks,
> >> > > Regina
> >> > >
> >> > >
> >> > >
> >> > >
> >> > >> -----Original Message-----
> >> > >> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On
> >> > >> Behalf Of Paul Ramsey
> >> > >> Sent: Monday, September 12, 2022 11:20 AM
> >> > >> To: GEOS Development List <geos-devel at lists.osgeo.org>
> >> > >> Subject: Re: [geos-devel] End of Life Policy (EOL)
> >> > >>
> >> > >>
> >> > >>
> >> > >>> On Sep 12, 2022, at 8:12 AM, Regina Obe <lr at pcorp.us> wrote:
> >> > >>>
> >> > >>> I'd like to make an RFC proposing a standardish End of Like
> >> > >>> Policy
> >> > >>>
> >> > >>> Does anyone have an issue with that?
> >> > >>
> >> > >> Only insofar as there's this idea that we support any particular
> >> > >> version
> >> > > at all.
> >> > >> Honestly, there are some bugs I just cannot be bothered to try
> >> > >> and fix (anything overlay pre 3.9, right? the fix there is to
> >> > >> upgrade) but at the
> >> > > same
> >> > >> time, I don't really mind pulling back trivial stuff pretty far.
> >> > >> What does
> >> > > it mean
> >> > >> to "support" this stuff anyways? Comes right down to it, if a
> >> > >> paying
> >> > > customer
> >> > >> on 3.4 has an issue and is unable to upgrade, we'll break our
> >> > >> fingers to
> >> > > try and
> >> > >> fix it. But that has to do with our corporate support, not some
> >> > >> community commitment to support.
> >> > >>
> >> > >> ???
> >> > >>
> >> > >> P
> >> > >>
> >> > >>
> >> > >>>
> >> > >>> I'm thinking of a policy along the lines of
> >> > >>>
> >> > >>> We support a release generally at most X plus years after the
> >> > >>> first version of it, but we have discretion to increase that if
needed.
> >> > >>>
> >> > >>> X = 3 - 5 feels about right.
> >> > >>>
> >> > >>> How do people feel about that?
> >> > >>>
> >> > >>> If so I can draft up an RFC about that and we can edit if we
> >> > >>> are comfortable with that and start EOL'ing other releases
> >> > >>> besides the
> >> > >>> 3.5 I
> >> > >> recently EOL'd.
> >> > >>>
> >> > >>> Thanks,
> >> > >>> Regina
> >> > >>>
> >> > >>> _______________________________________________
> >> > >>> geos-devel mailing list
> >> > >>> geos-devel at lists.osgeo.org
> >> > >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >> > >>
> >> > >> _______________________________________________
> >> > >> geos-devel mailing list
> >> > >> geos-devel at lists.osgeo.org
> >> > >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >> > >
> >> > > _______________________________________________
> >> > > geos-devel mailing list
> >> > > geos-devel at lists.osgeo.org
> >> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >> >
> >> > _______________________________________________
> >> > geos-devel mailing list
> >> > geos-devel at lists.osgeo.org
> >> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From lr at pcorp.us  Mon Sep 12 11:34:42 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 12 Sep 2022 14:34:42 -0400
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy
Message-ID: <000801d8c6d6$53b43690$fb1ca3b0$@pcorp.us>

Here is my formal request to vote on:

https://libgeos.org/development/rfcs/rfc11/

To accompany that change we will 

1) Put a link on https://libgeos.org/usage/download/  to that policy.
2) Put in a Final Release Date column on the download page (maybe
color-coded, though not sure how to color code in markdown so maybe we'll
skip that)
Red - past EOL
Yellow - EOL eminent
Not sure it's worth to color code newer

3) For releases not reached EOL yet, set the expected EOL to 3-4 years from
the .0 release.

Not sure what to do with 3.6 and 3.7, both are passed 4 years

3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this is
still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
just EOL it now.

3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
this on the potential chopping block given the above proposed policy.


Thanks,
Regina








From strk at kbt.io  Wed Sep 14 09:34:58 2022
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 14 Sep 2022 18:34:58 +0200
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us>
Message-ID: <YyICsoNveYYQ8dMG@c19>

On Mon, Sep 12, 2022 at 01:55:48PM -0400, Regina Obe wrote:
> Here is my first pass at a policy.
> 
> https://libgeos.org/development/rfcs/rfc11/

I agree with having an EOL policy.

I would not take on the committment of "releases a new minor
release every 1-2 years". It's really not a mandatory thing,
as nobody has fixed funding to implement new features while
it may be possible we raise funds for more than one feature
during a single year thus triggering 4 different minor
releases in that period (what prevents that?).

> If people are agreeable with it, I can put a link to it on the download page -- https://libgeos.org/usage/download/

+1 I saw you already used EOL in the 3.5 record.
I'd explain the acronym for the occasional reader too

--strk;

From mtnclimb at gmail.com  Wed Sep 14 09:48:18 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 14 Sep 2022 09:48:18 -0700
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <YyICsoNveYYQ8dMG@c19>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us> <YyICsoNveYYQ8dMG@c19>
Message-ID: <CAK2ens1jdbJPeyY9g0SVTwzKqSyuzLeL4k4kjJ3VvQWfXFwxSw@mail.gmail.com>

On Wed, Sep 14, 2022 at 9:35 AM Sandro Santilli <strk at kbt.io> wrote:

>  thus triggering 4 different minor
> releases in that period (what prevents that?).
>

Our development resource bandwidth, and also downstream pipeline size.

I think we should have a policy of one minor release per year (if needed)
And (try to) make them somewhat scheduled (which we already do informally,
to align with PostGIS).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220914/9b6b90f6/attachment.htm>

From gdt at lexort.com  Wed Sep 14 10:47:45 2022
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 14 Sep 2022 13:47:45 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <CAK2ens1jdbJPeyY9g0SVTwzKqSyuzLeL4k4kjJ3VvQWfXFwxSw@mail.gmail.com>
 (Martin Davis's message of "Wed, 14 Sep 2022 09:48:18 -0700")
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us> <YyICsoNveYYQ8dMG@c19>
 <CAK2ens1jdbJPeyY9g0SVTwzKqSyuzLeL4k4kjJ3VvQWfXFwxSw@mail.gmail.com>
Message-ID: <rmileqlalvi.fsf@s1.lexort.com>


Martin Davis <mtnclimb at gmail.com> writes:

> Our development resource bandwidth, and also downstream pipeline size.
>
> I think we should have a policy of one minor release per year (if needed)
> And (try to) make them somewhat scheduled (which we already do informally,
> to align with PostGIS).

There's a big difference between

  Our current plans are to do X.   We plan not to do Y.

and

  We have a policy of releasing if Z.


As a maintainer of various things, I have found people who use Free
Software to act remarkably entitled as if they had a several-$K/year
support contract.  Thus I very much avoid anything that sounds like
commitment to do something.

To me, this policy is about saying that after 4 years, it's basically
out of the question to have an updated version.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220914/1b8d7a46/attachment.sig>

From lr at pcorp.us  Wed Sep 14 12:16:22 2022
From: lr at pcorp.us (Regina Obe)
Date: Wed, 14 Sep 2022 15:16:22 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <rmileqlalvi.fsf@s1.lexort.com>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us> <YyICsoNveYYQ8dMG@c19>
 <CAK2ens1jdbJPeyY9g0SVTwzKqSyuzLeL4k4kjJ3VvQWfXFwxSw@mail.gmail.com>
 <rmileqlalvi.fsf@s1.lexort.com>
Message-ID: <00cc01d8c86e$7aa94120$6ffbc360$@pcorp.us>

> To me, this policy is about saying that after 4 years, it's basically out
of the
> question to have an updated version.

Yes that is my intent. 

So 

A) no one not willing to fork over money dares to ask us to backport a
change to what we consider "an ancient version"

B) As developers not have to think about which branches we have to backport
bug fixes.
Sure we have to think a little about "is this safe to backport to X", but if
we say as a general rule, things that have reached EOL, we never backport to
those and clearly spell out what we consider EOL.

C) Send a message to packagers that if you are packaging an end of life
version on a new distribution, you should think long and hard about that and
also what is the expected life of any version you deploy.  By packagers I'm
including DbaaS providers in this group.




From lr at pcorp.us  Wed Sep 14 12:24:55 2022
From: lr at pcorp.us (Regina Obe)
Date: Wed, 14 Sep 2022 15:24:55 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <rmileqlalvi.fsf@s1.lexort.com>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us> <YyICsoNveYYQ8dMG@c19>
 <CAK2ens1jdbJPeyY9g0SVTwzKqSyuzLeL4k4kjJ3VvQWfXFwxSw@mail.gmail.com>
 <rmileqlalvi.fsf@s1.lexort.com>
Message-ID: <00cf01d8c86f$ac834a00$0589de00$@pcorp.us>

> Martin Davis <mtnclimb at gmail.com> writes:
> 
> > Our development resource bandwidth, and also downstream pipeline size.
> >
> > I think we should have a policy of one minor release per year (if
> > needed) And (try to) make them somewhat scheduled (which we already
> do
> > informally, to align with PostGIS).
> 
In this case, I had specified 1-2 years  following our current behavior.

We could maybe soften that a bit by adding the word "generally" such as
below.

"The GEOS project generally releases a new minor release every 1-2 years.
Each minor release has a git repo dedicated branch for it named after the
minor version."

Our cadence is something I think is useful for users and packagers  of GEOS
to know, so they know when they can expect new features.
As  Greg stated, I would not want to say we absolutely follow this, though I
can't remember a time we haven't pushed out a new minor release for longer
than 2 years.




From lr at pcorp.us  Wed Sep 14 12:56:57 2022
From: lr at pcorp.us (Regina Obe)
Date: Wed, 14 Sep 2022 15:56:57 -0400
Subject: [geos-devel] End of Life Policy (EOL)
In-Reply-To: <YyICsoNveYYQ8dMG@c19>
References: <001201d8c6ba$21e54580$65afd080$@pcorp.us>
 <BF54A987-4AF2-4AA4-81F1-67221913E8CA@cleverelephant.ca>
 <000001d8c6bd$15a62c00$40f28400$@pcorp.us>
 <CD27FB7E-B985-49D3-9DD5-630D01891D4D@cleverelephant.ca>
 <000601d8c6c3$7b831460$72893d20$@pcorp.us>
 <CACmBxyvPrA3gUg6U7LNgLCVPHno13vZWvAcA7r3958iL-QH8sg@mail.gmail.com>
 <000301d8c6d0$e41d91f0$ac58b5d0$@pcorp.us> <YyICsoNveYYQ8dMG@c19>
Message-ID: <00e101d8c874$25ed4d60$71c7e820$@pcorp.us>

> I would not take on the committment of "releases a new minor release every
> 1-2 years". It's really not a mandatory thing, as nobody has fixed funding
to
> implement new features while it may be possible we raise funds for more
> than one feature during a single year thus triggering 4 different minor
> releases in that period (what prevents that?).
> 
I revised the sentence to:

"generally releases a new minor release every 1-2 years"

So we are not held up to a commitment to do so.

> > If people are agreeable with it, I can put a link to it on the
> > download page -- https://libgeos.org/usage/download/
> 
> +1 I saw you already used EOL in the 3.5 record.
> I'd explain the acronym for the occasional reader too
> 
> --strk;
I was going to link to the RFC with a (End-of-Life (EOL) and Version Policy)
text so it's self-explanatory




From lr at pcorp.us  Mon Sep 19 13:28:45 2022
From: lr at pcorp.us (Regina Obe)
Date: Mon, 19 Sep 2022 16:28:45 -0400
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy
In-Reply-To: <CAG29aDuqhK1ZGmt18xg7Zjb0AC+Gt3srNxtzipOsOGMma0jw=Q@mail.gmail.com>
References: <000801d8c6d6$53b43690$fb1ca3b0$@pcorp.us>
 <CAG29aDuqhK1ZGmt18xg7Zjb0AC+Gt3srNxtzipOsOGMma0jw=Q@mail.gmail.com>
Message-ID: <000a01d8cc66$6b362270$41a26750$@pcorp.us>

I am resending this again since no one bothered to vote.

+1 from me. 
Sandro already gave a  remark about "You made this voting business a second job. Why don't you just do things and eventually we rage and cut your head?"

I'll keep that in mind next time I want to push something I know Sandro will not agree with :)

Below is my request again.
If no one has an opinion against by EOD, I will mark the motion passed and make the adjustments accordingly.

Thanks,
Regina

-------


Here is my formal request to vote on:

https://libgeos.org/development/rfcs/rfc11/

To accompany that change we will 

1) Put a link on https://libgeos.org/usage/download/  to that policy.
2) Put in a Final Release Date column on the download page (maybe
color-coded, though not sure how to color code in markdown so maybe we'll
skip that)
Red - past EOL
Yellow - EOL eminent
Not sure it's worth to color code newer

3) For releases not reached EOL yet, set the expected EOL to 3-4 years from
the .0 release.

Not sure what to do with 3.6 and 3.7, both are passed 4 years

3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this is
still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
just EOL it now.

3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
this on the potential chopping block given the above proposed policy.


Thanks,
Regina








From pramsey at cleverelephant.ca  Mon Sep 19 13:48:23 2022
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 19 Sep 2022 13:48:23 -0700
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy
In-Reply-To: <000a01d8cc66$6b362270$41a26750$@pcorp.us>
References: <000801d8c6d6$53b43690$fb1ca3b0$@pcorp.us>
 <CAG29aDuqhK1ZGmt18xg7Zjb0AC+Gt3srNxtzipOsOGMma0jw=Q@mail.gmail.com>
 <000a01d8cc66$6b362270$41a26750$@pcorp.us>
Message-ID: <32C14B34-82AF-4169-B8BC-1CB56229BABF@cleverelephant.ca>

+1

> On Sep 19, 2022, at 1:28 PM, Regina Obe <lr at pcorp.us> wrote:
> 
> I am resending this again since no one bothered to vote.
> 
> +1 from me. 
> Sandro already gave a  remark about "You made this voting business a second job. Why don't you just do things and eventually we rage and cut your head?"
> 
> I'll keep that in mind next time I want to push something I know Sandro will not agree with :)
> 
> Below is my request again.
> If no one has an opinion against by EOD, I will mark the motion passed and make the adjustments accordingly.
> 
> Thanks,
> Regina
> 
> -------
> 
> 
> Here is my formal request to vote on:
> 
> https://libgeos.org/development/rfcs/rfc11/
> 
> To accompany that change we will 
> 
> 1) Put a link on https://libgeos.org/usage/download/  to that policy.
> 2) Put in a Final Release Date column on the download page (maybe
> color-coded, though not sure how to color code in markdown so maybe we'll
> skip that)
> Red - past EOL
> Yellow - EOL eminent
> Not sure it's worth to color code newer
> 
> 3) For releases not reached EOL yet, set the expected EOL to 3-4 years from
> the .0 release.
> 
> Not sure what to do with 3.6 and 3.7, both are passed 4 years
> 
> 3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this is
> still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
> just EOL it now.
> 
> 3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
> this on the potential chopping block given the above proposed policy.
> 
> 
> Thanks,
> Regina
> 
> 
> 
> 
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Mon Sep 19 13:59:40 2022
From: mtnclimb at gmail.com (Martin Davis)
Date: Mon, 19 Sep 2022 13:59:40 -0700
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy
In-Reply-To: <000801d8c6d6$53b43690$fb1ca3b0$@pcorp.us>
References: <000801d8c6d6$53b43690$fb1ca3b0$@pcorp.us>
Message-ID: <CAK2ens063H-vb7+0S_oPrsF=_OuQDafC6BTTf-wTkthRPAt_rQ@mail.gmail.com>

+1.

On Mon, Sep 12, 2022 at 11:34 AM Regina Obe <lr at pcorp.us> wrote:

> Here is my formal request to vote on:
>
> https://libgeos.org/development/rfcs/rfc11/
>
> To accompany that change we will
>
> 1) Put a link on https://libgeos.org/usage/download/  to that policy.
> 2) Put in a Final Release Date column on the download page (maybe
> color-coded, though not sure how to color code in markdown so maybe we'll
> skip that)
> Red - past EOL
> Yellow - EOL eminent
> Not sure it's worth to color code newer
>
> 3) For releases not reached EOL yet, set the expected EOL to 3-4 years from
> the .0 release.
>
> Not sure what to do with 3.6 and 3.7, both are passed 4 years
>
> 3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this
> is
> still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
> just EOL it now.
>
> 3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
> this on the potential chopping block given the above proposed policy.
>
>
> Thanks,
> Regina
>
>
>
>
>
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220919/2941ff9b/attachment.htm>

From geos-trac at osgeo.org  Mon Sep 19 17:44:27 2022
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 20 Sep 2022 00:44:27 -0000
Subject: [geos-devel] [GEOS] #401: LineMerger fails to extract linework
 from collection
In-Reply-To: <042.7a0220582be2367a15d30433bbd35941@osgeo.org>
References: <042.7a0220582be2367a15d30433bbd35941@osgeo.org>
Message-ID: <057.7f9435280c39e6fec2ea849fa04250c1@osgeo.org>

#401: LineMerger fails to extract linework from collection
-------------------------+---------------------------
 Reporter:  strk         |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  new
 Priority:  major        |   Milestone:  GEOS Fund Me
Component:  Default      |     Version:  main
 Severity:  Unassigned   |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Comment (by dbaston):

 PR at https://github.com/libgeos/geos/pull/683
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/401#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From dbaston at gmail.com  Tue Sep 20 07:17:36 2022
From: dbaston at gmail.com (Daniel Baston)
Date: Tue, 20 Sep 2022 10:17:36 -0400
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy
In-Reply-To: <CAK2ens063H-vb7+0S_oPrsF=_OuQDafC6BTTf-wTkthRPAt_rQ@mail.gmail.com>
References: <000801d8c6d6$53b43690$fb1ca3b0$@pcorp.us>
 <CAK2ens063H-vb7+0S_oPrsF=_OuQDafC6BTTf-wTkthRPAt_rQ@mail.gmail.com>
Message-ID: <CA+K_q_qH-9-kfvzO2L9Tcy_dVWSve04P+g_PB9b15Tv01CwfcQ@mail.gmail.com>

+1

On Mon, Sep 19, 2022 at 4:59 PM Martin Davis <mtnclimb at gmail.com> wrote:

> +1.
>
> On Mon, Sep 12, 2022 at 11:34 AM Regina Obe <lr at pcorp.us> wrote:
>
>> Here is my formal request to vote on:
>>
>> https://libgeos.org/development/rfcs/rfc11/
>>
>> To accompany that change we will
>>
>> 1) Put a link on https://libgeos.org/usage/download/  to that policy.
>> 2) Put in a Final Release Date column on the download page (maybe
>> color-coded, though not sure how to color code in markdown so maybe we'll
>> skip that)
>> Red - past EOL
>> Yellow - EOL eminent
>> Not sure it's worth to color code newer
>>
>> 3) For releases not reached EOL yet, set the expected EOL to 3-4 years
>> from
>> the .0 release.
>>
>> Not sure what to do with 3.6 and 3.7, both are passed 4 years
>>
>> 3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this
>> is
>> still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
>> just EOL it now.
>>
>> 3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
>> this on the potential chopping block given the above proposed policy.
>>
>>
>> Thanks,
>> Regina
>>
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220920/efef6256/attachment.htm>

From lr at pcorp.us  Tue Sep 20 07:31:15 2022
From: lr at pcorp.us (Regina Obe)
Date: Tue, 20 Sep 2022 10:31:15 -0400
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy -
 MOTION PASSED
Message-ID: <004c01d8ccfd$a43cf480$ecb6dd80$@pcorp.us>

Passed with:

 

Regina +1

Paul +1

Martin +1

Dan +1

Sandro ? don?t care

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Daniel Baston
Sent: Tuesday, September 20, 2022 10:18 AM
To: GEOS Development List <geos-devel at lists.osgeo.org>
Subject: Re: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy

 

+1

 

On Mon, Sep 19, 2022 at 4:59 PM Martin Davis <mtnclimb at gmail.com <mailto:mtnclimb at gmail.com> > wrote:

+1. 

 

On Mon, Sep 12, 2022 at 11:34 AM Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

Here is my formal request to vote on:

https://libgeos.org/development/rfcs/rfc11/

To accompany that change we will 

1) Put a link on https://libgeos.org/usage/download/  to that policy.
2) Put in a Final Release Date column on the download page (maybe
color-coded, though not sure how to color code in markdown so maybe we'll
skip that)
Red - past EOL
Yellow - EOL eminent
Not sure it's worth to color code newer

3) For releases not reached EOL yet, set the expected EOL to 3-4 years from
the .0 release.

Not sure what to do with 3.6 and 3.7, both are passed 4 years

3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this is
still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
just EOL it now.

3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
this on the potential chopping block given the above proposed policy.


Thanks,
Regina







_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220920/8ff07bdc/attachment-0001.htm>

From strk at kbt.io  Tue Sep 20 12:59:48 2022
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 20 Sep 2022 21:59:48 +0200
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy -
 MOTION PASSED
In-Reply-To: <004c01d8ccfd$a43cf480$ecb6dd80$@pcorp.us>
References: <004c01d8ccfd$a43cf480$ecb6dd80$@pcorp.us>
Message-ID: <YyobtPk4S7VaqxV7@c19>

On Tue, Sep 20, 2022 at 10:31:15AM -0400, Regina Obe wrote:
> Passed with:
> 
>  
> 
> Regina +1
> Paul +1
> Martin +1
> Dan +1
> Sandro ? don?t care

My late +1 here. Consider it as an head safety :P

--strk;

From lr at pcorp.us  Tue Sep 20 15:18:03 2022
From: lr at pcorp.us (Regina Obe)
Date: Tue, 20 Sep 2022 18:18:03 -0400
Subject: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy -
 MOTION PASSED
Message-ID: <001e01d8cd3e$da498f70$8edcae50$@pcorp.us>

I have put links, expected final dates, and emojis on the download page

 

https://libgeos.org/usage/download/

 

Feel free to change if you don?t like them.

 

Also not sure if it?s worthwhile to add an initial release date or if it would make the page too crowded, so I left that out.

 

Thanks,

Regina

 

From: Regina Obe [mailto:lr at pcorp.us] 
Sent: Tuesday, September 20, 2022 10:31 AM
To: 'GEOS Development List' <geos-devel at lists.osgeo.org>
Subject: RE: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy - MOTION PASSED

 

Passed with:

 

Regina +1

Paul +1

Martin +1

Dan +1

Sandro ? don?t care

 

 

From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of Daniel Baston
Sent: Tuesday, September 20, 2022 10:18 AM
To: GEOS Development List <geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> >
Subject: Re: [geos-devel] PSC Vote: RFC 11 Geos Versioning and EOL Policy

 

+1

 

On Mon, Sep 19, 2022 at 4:59 PM Martin Davis <mtnclimb at gmail.com <mailto:mtnclimb at gmail.com> > wrote:

+1. 

 

On Mon, Sep 12, 2022 at 11:34 AM Regina Obe <lr at pcorp.us <mailto:lr at pcorp.us> > wrote:

Here is my formal request to vote on:

https://libgeos.org/development/rfcs/rfc11/

To accompany that change we will 

1) Put a link on https://libgeos.org/usage/download/  to that policy.
2) Put in a Final Release Date column on the download page (maybe
color-coded, though not sure how to color code in markdown so maybe we'll
skip that)
Red - past EOL
Yellow - EOL eminent
Not sure it's worth to color code newer

3) For releases not reached EOL yet, set the expected EOL to 3-4 years from
the .0 release.

Not sure what to do with 3.6 and 3.7, both are passed 4 years

3.6.0 was released 2016-10-25 (more than 5 years ago) (Dan mentioned this is
still in Ubuntu LTS 18, which will be eol'd in April 2023), do we wait or
just EOL it now.

3.7.0 was released 2018-09-10  -- about 4 years ago, so I would consider
this on the potential chopping block given the above proposed policy.


Thanks,
Regina







_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

_______________________________________________
geos-devel mailing list
geos-devel at lists.osgeo.org <mailto:geos-devel at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220920/6105c131/attachment.htm>

From geos-trac at osgeo.org  Tue Sep 20 17:07:25 2022
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 21 Sep 2022 00:07:25 -0000
Subject: [geos-devel] [GEOS] #401: LineMerger fails to extract linework
 from collection
In-Reply-To: <042.7a0220582be2367a15d30433bbd35941@osgeo.org>
References: <042.7a0220582be2367a15d30433bbd35941@osgeo.org>
Message-ID: <057.bc166fdae9fd2532cccc725745b02b27@osgeo.org>

#401: LineMerger fails to extract linework from collection
-------------------------+---------------------------
 Reporter:  strk         |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  closed
 Priority:  major        |   Milestone:  GEOS Fund Me
Component:  Default      |     Version:  main
 Severity:  Unassigned   |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed

Comment:

 Fixed in `main` with
 [changeset:0c4e1f20be609e13b608cb6194d83581298675cb/git]
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/401#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 21 11:05:52 2022
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 21 Sep 2022 18:05:52 -0000
Subject: [geos-devel] [GEOS] #922: Delaunay triangulation creates
 overlapping triangles
In-Reply-To: <044.1032458b11f501598d688fcc87fcbb5d@osgeo.org>
References: <044.1032458b11f501598d688fcc87fcbb5d@osgeo.org>
Message-ID: <059.cd8cda397d5c59017161ed3c273eae05@osgeo.org>

#922: Delaunay triangulation creates overlapping triangles
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.11.0
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed

Comment:

 This was addressed with [changeset:67d6eaf/git] although it may be
 possible to find another case that still fails.
-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/922#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Sep 21 11:40:37 2022
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 21 Sep 2022 18:40:37 -0000
Subject: [geos-devel] [GEOS] #1133: GEOSDistance raises floating point
 exceptions for boundable geometries
In-Reply-To: <044.117cb751909ae1b0efdf948aae7f7ea5@osgeo.org>
References: <044.117cb751909ae1b0efdf948aae7f7ea5@osgeo.org>
Message-ID: <059.06cb2bd6a61586db701b0a238ccacdd7@osgeo.org>

#1133: GEOSDistance raises floating point exceptions for boundable geometries
--------------------------+---------------------------
 Reporter:  Brendan Ward  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  closed
 Priority:  major         |   Milestone:  3.11.0
Component:  Default       |     Version:  main
 Severity:  Unassigned    |  Resolution:  duplicate
 Keywords:                |
--------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => duplicate

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1133#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From maplabs at light42.com  Thu Sep 22 11:57:21 2022
From: maplabs at light42.com (Brian M Hamlin)
Date: Thu, 22 Sep 2022 11:57:21 -0700
Subject: [geos-devel] GEOS release page with md5/sha
Message-ID: <70b6d650-a14e-811c-5f74-3d9c0eaca97b@light42.com>

Hi GEOS PSC-

 ? some user-facing web pages are getting a redesign. Please consider 
adding an MD5/sha sum or similar hash for each official libGEOS release, 
in an easy-to-find way. This sort of basic convenience could eliminate 
many small "troubles" down the road.

 ? The right place for generating the hash itself is of course, within 
the official build-release chain.

 ? thanks for great GEOS and more to come

 ? best regards from Berkeley California?? --Brian M Hamlin? / MAPLABS? 
/? OSGeoLive PSC



From strk at kbt.io  Fri Sep 23 10:59:30 2022
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 23 Sep 2022 19:59:30 +0200
Subject: [geos-devel] Stepping down from PSC chair
Message-ID: <Yy30Am+a6JNgRhdk@c19>

As you may have noticed I seem to be unable to keep up with the
fast pace in which GEOS development and project organization is
moving lately, so I think it is fair to step down from the PSC
chair role to avoid becoming a bottleneck to decisions making.

I won't go anywhere but burocracy is not my thing.

Anyone up for the role ?

--strk;

  Libre GIS consultant/developer
  https://strk.kbt.io/services.html

From lr at pcorp.us  Fri Sep 23 11:29:12 2022
From: lr at pcorp.us (Regina Obe)
Date: Fri, 23 Sep 2022 14:29:12 -0400
Subject: [geos-devel] Stepping down from PSC chair
In-Reply-To: <Yy30Am+a6JNgRhdk@c19>
References: <Yy30Am+a6JNgRhdk@c19>
Message-ID: <000901d8cf7a$61939010$24bab030$@pcorp.us>

> As you may have noticed I seem to be unable to keep up with the fast pace
> in which GEOS development and project organization is moving lately, so I
> think it is fair to step down from the PSC chair role to avoid becoming a
> bottleneck to decisions making.
> 
> I won't go anywhere but burocracy is not my thing.
> 
> Anyone up for the role ?
> 
> --strk;
> 
>   Libre GIS consultant/developer
>   https://strk.kbt.io/services.html

strk,

I guess I've been pushing a lot of motions of late.  I'd hate to think I've
turned GEOS into a bureaucracy.  I hate bureaucracies too.

If it's the busy work of voting that bothers you,
I am happy to make changes to the website etc when I feel like it, and just
notify by email a little before or after  I've made a change for people to
look.

I just ask for votes when I feel whatever I am thinking of doing could be
opposed by many or I myself are not sure it's a good idea, before I waste my
time making the change.


Thanks,
Regina


From strk at kbt.io  Fri Sep 23 11:46:07 2022
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 23 Sep 2022 20:46:07 +0200
Subject: [geos-devel] Stepping down from PSC chair
In-Reply-To: <000901d8cf7a$61939010$24bab030$@pcorp.us>
References: <Yy30Am+a6JNgRhdk@c19> <000901d8cf7a$61939010$24bab030$@pcorp.us>
Message-ID: <Yy3+77/Oks+0MltI@c19>

On Fri, Sep 23, 2022 at 02:29:12PM -0400, Regina Obe wrote:
> 
> I just ask for votes when I feel whatever I am thinking of doing could be
> opposed by many or I myself are not sure it's a good idea, before I waste my
> time making the change.

Asking on the mailing list is a great way to know what others
think about a proposal. Can't express a thought with 2 bits
(which is what you get with voting).

-strk;

From jorisvandenbossche at gmail.com  Thu Sep 29 08:37:49 2022
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Thu, 29 Sep 2022 17:37:49 +0200
Subject: [geos-devel] CoordinateArraySequence == CoordinateSequence
In-Reply-To: <CA+K_q_q0O=+WP0F=Wa5i3Ghmzq0v_0X52QYnqhhGD62RS58CPA@mail.gmail.com>
References: <D8E82846-DDEA-4A1A-882F-65DB526A31A5@cleverelephant.ca>
 <CA+K_q_q0O=+WP0F=Wa5i3Ghmzq0v_0X52QYnqhhGD62RS58CPA@mail.gmail.com>
Message-ID: <CAO9vTOy1bWe7JZ8-pRsv3XUmEvt7u0UQ80W5iOs3UGiZDkwehA@mail.gmail.com>

We are currently having a discussion about interleaved (XYXY) vs separate
arrays (XX YY) in the GeoArrow context (
https://github.com/geopandas/geo-arrow-spec/pull/26), and I was wondering
if the GEOS developers have thoughts on that topic (whether it was ever
specifically discussed if the current approach of CoordinateArraySequence
to store all dimensions interleaved is the best option for GEOS or if
separate arrays could be considered as well). But so the above already
touches upon that topic, and I also noticed related discussion at
https://github.com/libgeos/geos/pull/674#issuecomment-1245741058

In general, from the Shapely/GeoPandas side, we are certainly interested in
being able to create CoordinateSequences zero-copy from arrays of
coordinates (the current GEOSCoordSeq_copyFromBuffer_r et al already helps
a lot though, although it would be nice if it could use a single memcpy for
2D as well (related to underlying memory storage above) or even avoid this
one memcpy).

Best,
Joris

On Wed, 24 Aug 2022 at 13:50, Daniel Baston <dbaston at gmail.com> wrote:

> This has come up a few times and despite some pushback from users [1] I
> agree that the benefits of the simplification probably outweigh the costs.
> Replacing CoordinateSequence with a concrete implementation is top on my
> list for the GDAL grant work [2] that I will be available to begin on
> September 1. My general plan was to
>
> 1. Replace CoordinateSequence with CoordinateArraySequence and check
> performance improvement. Even without algorithmic improvements like the
> ones you're talking about, I would expect that devirtualizating Coordinate
> access, and the consequent enabling of inlining, will provide a good
> benefit across the board.
> 2. Replace CoordinateArraySequence with a class backed by a buffer of
> doubles to support future generalization of Coordinate dimension. This may
> also allow us to offer zero-copy to clients that happen to use an XYXY
> representation internally (PostGIS)
> 3. Experiment with a union or std::variant to sneak in an optimized
> stack-only implementation for Points
>
> I do wonder if our embrace of XYXY is the best choice here and if XXYY
> would enable vectorization in some cases. That would be a pretty invasive
> experiment to perform across the whole library, but maybe we could look at
> something like OrientationIndex in isolation.
>
> Dan
>
> [1] https://github.com/libgeos/geos/issues/564
> [2] https://lists.osgeo.org/pipermail/geos-devel/2022-March/010672.html
>
> On Tue, Aug 23, 2022 at 3:22 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>> One of the things that tinkering with the SegmenString layer of overlay
>> brought out to me was the extent to which we construct CoordinateSequence
>> almost exclusively out of CoordinateArraySequence. Like, all the time. At
>> yet, because we handle those CoordinateArraySequence at the API level
>> almost exclusively as  CoordinateSequence we lose the ability to do some
>> handy optimizations.
>>
>> Like, if one were going to (as one does on every single
>> CoordinateSequence that enters the overlay code)
>> (1) test if there are repeated points and
>> (2a) remove any if there are
>> (2b) just return the untouched CoordinateSequence if there aren't
>> a useful pattern would be for ::hasRepeatedPoints() to return/populate a
>> list of indexes at which repeated points appear and for
>> ::removeRepeatedPoints() to do bulk copies of all the points in between
>> those indexes. This is foreclosed by the CoordinateSequence API, you can
>> play this trick nicely with a std::vector living underneath, but the API
>> doesn't let us see that (in fact) that's what we have 99.9% of the time.
>>
>> So, one obvious thing to do would be to remove the virtual methods in
>> CoordinateSequence and pull the implementation up to that level,
>> std::vector and all, and give up on the idea of an abstract interface that
>> we don't actually use. For a handful of use cases, where data access cost
>> is greater than computation cost (area, length, distance(?), some others
>> (?)) this might be "bad" in some theoretical way, but note that currently
>> we still don't actually have that abstract layer in place for a zero copy
>> computation. Removing the virtual methods and inheritance from
>> CoordinateSequence would foreclose an option that (a) we seem unlikely to
>> ever deliver on and (b) has narrow performance benefits even if we did
>> deliver on it.
>>
>> Meanwhile, the flip case seems to likely have a *lot* of performance
>> benefits just hanging around waiting to be harvested. Coordinate access
>> without going through the inheritance structure; access to some bulk
>> operations like the repeated points case.
>>
>> For the "zero copy" crew, I feel like a big chunk of gains for them could
>> be harvested by ensuring that point-based operations are available and
>> don't require construction of a full Point() object. So things like
>> PreparedGeometry->intersects(x, y). Sure, you still have to copy in your
>> polygon feature and prepare it, but much of the overhead in that would
>> still exist in a "zero copy" paradigm (all the internal index buildings).
>> Meanwhile you'd no longer need to create a full Point() to do a
>> point-in-poly test, and that would hopefully be a big win for most users.
>>
>> Random thoughs on a sunny day,
>> P
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20220929/2492c851/attachment.htm>

