From geos-trac at osgeo.org  Sat Jan  2 21:26:02 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 03 Jan 2021 05:26:02 -0000
Subject: [geos-devel] [GEOS] #560: Centroid of EMPTY is a COLLECTION
 rather than POINT
In-Reply-To: <042.136c93f5d05ae8deead9fe13d3104404@osgeo.org>
References: <042.136c93f5d05ae8deead9fe13d3104404@osgeo.org>
Message-ID: <057.c8df19ec8ea4179194142f2b34049ac3@osgeo.org>

#560: Centroid of EMPTY is a COLLECTION rather than POINT
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.3.5
Component:  Default     |     Version:  3.3.4
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 It looks to me like `centroid` of `POLYGON EMPTY` is null, not `POINT
 EMPTY`.  Same for `interiorPoint`.

 The fix on this ticket only applies to the C API.  The fix should be
 pushed down into the C++ code.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/560#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Jan  2 21:29:50 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 03 Jan 2021 05:29:50 -0000
Subject: [geos-devel] [GEOS] #1088: Centroid and InteriorPoint of EMPTY
 return null
Message-ID: <044.e1c7a53535146cac80c171c582a42bb0@osgeo.org>

#1088: Centroid and InteriorPoint of EMPTY return null
------------------------+--------------------------
 Reporter:  mdavis      |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.10.0
Component:  Default     |    Version:  3.9.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Centroid and InteriorPoint of `* EMPTY` return `null` in the C++ API.
 They should return `POINT EMPTY`.

 This is fixed in the C API, but the behaviour should be implemented at the
 C++ level.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1088>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Jan  2 21:32:21 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 03 Jan 2021 05:32:21 -0000
Subject: [geos-devel] [GEOS] #1088: Centroid and InteriorPoint of EMPTY
 return null
In-Reply-To: <044.e1c7a53535146cac80c171c582a42bb0@osgeo.org>
References: <044.e1c7a53535146cac80c171c582a42bb0@osgeo.org>
Message-ID: <059.24c53c3a1a573fb3b853162ee42199b6@osgeo.org>

#1088: Centroid and InteriorPoint of EMPTY return null
------------------------+---------------------------
 Reporter:  mdavis      |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 See also #560

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1088#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Jan  2 21:36:22 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 03 Jan 2021 05:36:22 -0000
Subject: [geos-devel] [GEOS] #1088: Centroid and InteriorPoint of EMPTY
 return null
In-Reply-To: <044.e1c7a53535146cac80c171c582a42bb0@osgeo.org>
References: <044.e1c7a53535146cac80c171c582a42bb0@osgeo.org>
Message-ID: <059.d98c444582675dd78769d470ebdff324@osgeo.org>

#1088: Centroid and InteriorPoint of EMPTY return null
------------------------+---------------------------
 Reporter:  mdavis      |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.10.0
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 There is an XML test for EMPTY, but the XMLTester has been patched to
 check for null and create an empty point!  So that needs fixing too.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1088#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Jan  5 08:10:48 2021
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 05 Jan 2021 16:10:48 -0000
Subject: [geos-devel] [GEOS] #1089: Support for geometry with M value
Message-ID: <047.b72f7dcf6be0329a1d5b3b29b2af7d93@osgeo.org>

#1089: Support for geometry with M value
-------------------------+--------------------------
 Reporter:  jfbourdon    |      Owner:  geos-devel@?
     Type:  enhancement  |     Status:  new
 Priority:  minor        |  Milestone:  3.8.2
Component:  Default      |    Version:  3.8.0
 Severity:  Unassigned   |   Keywords:
-------------------------+--------------------------
 I'm not sure if my feature request is still valid considering the
 resolution of #460 but if not, I would like to request the support of M
 value inside geometries. Currently (at least in 3.8.1), if a geometry
 containing M values is given, the resulting geometry will have lost those.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1089>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Tue Jan  5 15:41:40 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 5 Jan 2021 15:41:40 -0800
Subject: [geos-devel] WKT Precision
Message-ID: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>

This is a totally evergreen topic, and I'm not sure if it's been chewed over before. Right now the behaviour of setRoundingPrecision and setTrim in the WKTWriter is a little counterintuitive (or not!) and there's a ticket on that.

https://github.com/libgeos/geos/issues/375

Basically, when setTrim(true) the roundingPrecision() will set the number of sigfigs in the output, but when setTrim(false) then roundingPrecision() will set the number of digits after the decimal point. The reporter of this ticket seems to thing that roundingPrecision() should always control the number of digits after the decimal point, and that setTrim() will just lop off extraneous zeroes as necessary.

Meanwhile we have this extant feature request

https://trac.osgeo.org/geos/ticket/868

This is more grandiose, potentially we could bring in a whole fancy double output library (not sure if that's needed). 

Meanwhile, I've just done a very small change that makes the behaviour match up to what the first reporter seemed to expect. It broke a lot fewer tests than I expected, but it still broke a handful. And of course the downstream will have all kinds of stuff that is sensitive fo WKT output defaults. 

https://github.com/libgeos/geos/pull/378

What do people think is the best practice for outputing WKT precision?

(Also, what do these knobs (setTrim, setRoundingPrecision) mean in JTS world? I'm guessing our behaviour is *not* an exact analogue.

P.

From mtnclimb at gmail.com  Tue Jan  5 16:35:59 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 5 Jan 2021 16:35:59 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
Message-ID: <CAK2ens1b6=fC2q5kU1ZN92hteUR0Kzr5Lsdp2GeK--JGRNT6Zw@mail.gmail.com>

 setTrim and setRoundingPrecision are GEOS-specific (not in JTS).

What JTS has is WKTWriter.setPrecisionModel().  What that does is to set
the max number of decimal places according to the precision supplied (e.g.
scale = 10 produces 1 decimal, scale = 100 produces 2, etc)

I like the simplicity of having setRoundingPrecision always apply to the
decimal places.  I can't really envision a scenario where there is any
point in reducing the sig figs (i.e. lopping off digits to the L of the
decimal place) since they would have to be output as zeroes anyway, so
there is no savings.

And I would think having trim = true as the default would be most friendly,
since there doesn't seem to be any value in keeping trailing zeroes after
the decimal point.

On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> What do people think is the best practice for outputing WKT precision?


(Also, what do these knobs (setTrim, setRoundingPrecision) mean in JTS
> world? I'm guessing our behaviour is *not* an exact analogue.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210105/f9db62e8/attachment.html>

From mtnclimb at gmail.com  Tue Jan  5 16:39:03 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Tue, 5 Jan 2021 16:39:03 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAK2ens1b6=fC2q5kU1ZN92hteUR0Kzr5Lsdp2GeK--JGRNT6Zw@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1b6=fC2q5kU1ZN92hteUR0Kzr5Lsdp2GeK--JGRNT6Zw@mail.gmail.com>
Message-ID: <CAK2ens1ne5wAm06WVGrXRMwW6d8jZWWPfRUihUcB8CLzd6dp9w@mail.gmail.com>

And for the record, I am -10 on outputting scientific notation, except for
extremely large numbers (say > 10^20 - which should rarely occur in real
data).  It just makes the output hard to read.

On Tue, Jan 5, 2021 at 4:35 PM Martin Davis <mtnclimb at gmail.com> wrote:

>  setTrim and setRoundingPrecision are GEOS-specific (not in JTS).
>
> What JTS has is WKTWriter.setPrecisionModel().  What that does is to set
> the max number of decimal places according to the precision supplied (e.g.
> scale = 10 produces 1 decimal, scale = 100 produces 2, etc)
>
> I like the simplicity of having setRoundingPrecision always apply to the
> decimal places.  I can't really envision a scenario where there is any
> point in reducing the sig figs (i.e. lopping off digits to the L of the
> decimal place) since they would have to be output as zeroes anyway, so
> there is no savings.
>
> And I would think having trim = true as the default would be most
> friendly, since there doesn't seem to be any value in keeping trailing
> zeroes after the decimal point.
>
> On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>> What do people think is the best practice for outputing WKT precision?
>
>
> (Also, what do these knobs (setTrim, setRoundingPrecision) mean in JTS
>> world? I'm guessing our behaviour is *not* an exact analogue.
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210105/b62e2498/attachment.html>

From andrew.d.hershberger at gmail.com  Tue Jan  5 18:55:13 2021
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Tue, 5 Jan 2021 20:55:13 -0600
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAK2ens1ne5wAm06WVGrXRMwW6d8jZWWPfRUihUcB8CLzd6dp9w@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1b6=fC2q5kU1ZN92hteUR0Kzr5Lsdp2GeK--JGRNT6Zw@mail.gmail.com>
 <CAK2ens1ne5wAm06WVGrXRMwW6d8jZWWPfRUihUcB8CLzd6dp9w@mail.gmail.com>
Message-ID: <CACZW30MgFzQoWZGphCbJ45g_MGqkkAF5deOnM46VcLM+YD9nEQ@mail.gmail.com>

I exposed these features in GEOSwift earlier last year, and I do remember
finding the behavior a bit confusing. Here are some links to the community
request that led me to expose it and the resulting change:

https://github.com/GEOSwift/GEOSwift/issues/196
https://github.com/GEOSwift/GEOSwift/pull/197


On Tue, Jan 5, 2021 at 6:39 PM Martin Davis <mtnclimb at gmail.com> wrote:

> And for the record, I am -10 on outputting scientific notation, except for
> extremely large numbers (say > 10^20 - which should rarely occur in real
> data).  It just makes the output hard to read.
>
> On Tue, Jan 5, 2021 at 4:35 PM Martin Davis <mtnclimb at gmail.com> wrote:
>
>>  setTrim and setRoundingPrecision are GEOS-specific (not in JTS).
>>
>> What JTS has is WKTWriter.setPrecisionModel().  What that does is to set
>> the max number of decimal places according to the precision supplied (e.g.
>> scale = 10 produces 1 decimal, scale = 100 produces 2, etc)
>>
>> I like the simplicity of having setRoundingPrecision always apply to the
>> decimal places.  I can't really envision a scenario where there is any
>> point in reducing the sig figs (i.e. lopping off digits to the L of the
>> decimal place) since they would have to be output as zeroes anyway, so
>> there is no savings.
>>
>> And I would think having trim = true as the default would be most
>> friendly, since there doesn't seem to be any value in keeping trailing
>> zeroes after the decimal point.
>>
>> On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
>> wrote:
>>
>>> What do people think is the best practice for outputing WKT precision?
>>
>>
>> (Also, what do these knobs (setTrim, setRoundingPrecision) mean in JTS
>>> world? I'm guessing our behaviour is *not* an exact analogue.
>>>
>>
>> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210105/e7e5964c/attachment.html>

From mtnclimb at gmail.com  Wed Jan  6 07:24:56 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 6 Jan 2021 07:24:56 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
Message-ID: <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>

Is it possible the problem is the use of std:fixed ?  (Which is invoked if
the trim option = FALSE, which is the default).

Currently in WKTWriter.writeNumber there is this code (and the defaults
invoke fixed precision):

if(! trim) {
        ss << std::fixed;
    }
    ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;

This results in the following (as noted on the GeoSwift issue)

POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
46.3406447999999997)

This carries too much precision, obviously.  I think it might be exposing
the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky,
and I suspect it's better to let C++ just do the right thing.

Also, running reducePrecision causes problems, again I suspect due to to
imprecise FP representation:

bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
POINT (-0.4200000000000000 46.3400000000000034)

If the std::fixed setting is dropped, the output looks more reasonable:

POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)

Check that all input sig digits are shown:

POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)

Reduced precision displays as expected:
bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
POINT (-0.42 46.34)


Is the "trim" option needed at all?

On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
> What do people think is the best practice for outputing WKT precision?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/d10b6ea9/attachment-0001.html>

From andrew.bell.ia at gmail.com  Wed Jan  6 07:41:08 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 6 Jan 2021 10:41:08 -0500
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
Message-ID: <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>

1) This fight really can't be won without implementing all the various
things already provided for by a language like C and allowing users to make
these choices for themselves.  GDAL, for example, has its own strange logic
to do this kind of thing. It's ugly and it's not obvious to a user what's
going to happen as it's not well-defined by any documentation.  Some users
may want the full precision, and spending a bunch of time figuring out if
.999997 is significant or not isn't really the role of a library like GEOS,
IMO.  And for some values, scientific notation is what you need. This is
why %g exists for printf in C.

2) If you're using a text file for your output, you really don't care about
size, even if you say you do. Seems like time could be better spent
elsewhere unless someone is paying for this functionality.  Someone could
certainly reprocess any WKT file to remove digits if they so chose.

On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:

> Is it possible the problem is the use of std:fixed ?  (Which is invoked if
> the trim option = FALSE, which is the default).
>
> Currently in WKTWriter.writeNumber there is this code (and the defaults
> invoke fixed precision):
>
> if(! trim) {
>         ss << std::fixed;
>     }
>     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
>
> This results in the following (as noted on the GeoSwift issue)
>
> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
>
> This carries too much precision, obviously.  I think it might be exposing
> the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky,
> and I suspect it's better to let C++ just do the right thing.
>
> Also, running reducePrecision causes problems, again I suspect due to to
> imprecise FP representation:
>
> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> POINT (-0.4200000000000000 46.3400000000000034)
>
> If the std::fixed setting is dropped, the output looks more reasonable:
>
> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
>
> Check that all input sig digits are shown:
>
> POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
>
> Reduced precision displays as expected:
> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> POINT (-0.42 46.34)
>
>
> Is the "trim" option needed at all?
>
> On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>>
>> What do people think is the best practice for outputing WKT precision?
>>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/f1bb0e99/attachment.html>

From pramsey at cleverelephant.ca  Wed Jan  6 07:43:22 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 6 Jan 2021 07:43:22 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
Message-ID: <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>

For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.

Any objections?

P

> On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> 
> 
> 1) This fight really can't be won without implementing all the various things already provided for by a language like C and allowing users to make these choices for themselves.  GDAL, for example, has its own strange logic to do this kind of thing. It's ugly and it's not obvious to a user what's going to happen as it's not well-defined by any documentation.  Some users may want the full precision, and spending a bunch of time figuring out if .999997 is significant or not isn't really the role of a library like GEOS, IMO.  And for some values, scientific notation is what you need. This is why %g exists for printf in C.
> 
> 2) If you're using a text file for your output, you really don't care about size, even if you say you do. Seems like time could be better spent elsewhere unless someone is paying for this functionality.  Someone could certainly reprocess any WKT file to remove digits if they so chose.
> 
> On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:
> Is it possible the problem is the use of std:fixed ?  (Which is invoked if the trim option = FALSE, which is the default).
> 
> Currently in WKTWriter.writeNumber there is this code (and the defaults invoke fixed precision):
> 
> if(! trim) {
>         ss << std::fixed;
>     }
>     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
> 
> This results in the following (as noted on the GeoSwift issue)
> 
> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> 
> This carries too much precision, obviously.  I think it might be exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky, and I suspect it's better to let C++ just do the right thing.
> 
> Also, running reducePrecision causes problems, again I suspect due to to imprecise FP representation:
> 
> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> POINT (-0.4200000000000000 46.3400000000000034)
> 
> If the std::fixed setting is dropped, the output looks more reasonable:
> 
> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> 
> Check that all input sig digits are shown:
> 
> POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> 
> Reduced precision displays as expected:
> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> POINT (-0.42 46.34)
> 
> 
> Is the "trim" option needed at all?
> 
> On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> What do people think is the best practice for outputing WKT precision?
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> 
> -- 
> Andrew Bell
> andrew.bell.ia at gmail.com
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Jan  6 07:54:02 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 6 Jan 2021 07:54:02 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
Message-ID: <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>

Well, yes.  The current default behaviour seems really unpleasant:

POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
46.3406447999999997)

bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
POINT (-0.4200000000000000 46.3400000000000034)

I agree with Andrew Bell - there is no way GEOS should be trying to
outsmart the C++ language.  And add to that, that setting output precision
is a perilous hack, since rounding/truncating data pointwise can result in
invalid topology.

Not saying get rid of the setRoundingPrecision, since it's the user's
decision. But the default should be to just output "full" precision (as
decided by the standard floating-point output routines, which know about
weird things like IEEE-754 guard digits). And forget about trimming, since
the standard output seems to do that just fine.





On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> For all these reasons and the fact that the current behaviour has existed
> for a long time and is now baked into downstream (those tests in
> GeoSwift!!) I'm inclined to just do nothing.
>
> Any objections?
>
> P
>
> > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
> >
> >
> > 1) This fight really can't be won without implementing all the various
> things already provided for by a language like C and allowing users to make
> these choices for themselves.  GDAL, for example, has its own strange logic
> to do this kind of thing. It's ugly and it's not obvious to a user what's
> going to happen as it's not well-defined by any documentation.  Some users
> may want the full precision, and spending a bunch of time figuring out if
> .999997 is significant or not isn't really the role of a library like GEOS,
> IMO.  And for some values, scientific notation is what you need. This is
> why %g exists for printf in C.
> >
> > 2) If you're using a text file for your output, you really don't care
> about size, even if you say you do. Seems like time could be better spent
> elsewhere unless someone is paying for this functionality.  Someone could
> certainly reprocess any WKT file to remove digits if they so chose.
> >
> > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:
> > Is it possible the problem is the use of std:fixed ?  (Which is invoked
> if the trim option = FALSE, which is the default).
> >
> > Currently in WKTWriter.writeNumber there is this code (and the defaults
> invoke fixed precision):
> >
> > if(! trim) {
> >         ss << std::fixed;
> >     }
> >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
> >
> > This results in the following (as noted on the GeoSwift issue)
> >
> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> >
> > This carries too much precision, obviously.  I think it might be
> exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously
> tricky, and I suspect it's better to let C++ just do the right thing.
> >
> > Also, running reducePrecision causes problems, again I suspect due to to
> imprecise FP representation:
> >
> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > POINT (-0.4200000000000000 46.3400000000000034)
> >
> > If the std::fixed setting is dropped, the output looks more reasonable:
> >
> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> >
> > Check that all input sig digits are shown:
> >
> > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> >
> > Reduced precision displays as expected:
> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > POINT (-0.42 46.34)
> >
> >
> > Is the "trim" option needed at all?
> >
> > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> > What do people think is the best practice for outputing WKT precision?
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> >
> > --
> > Andrew Bell
> > andrew.bell.ia at gmail.com
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/3f8adc21/attachment-0001.html>

From mtnclimb at gmail.com  Wed Jan  6 09:00:34 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 6 Jan 2021 09:00:34 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
Message-ID: <CAK2ens0A0FPdRiB-+av5+TbjGQet+5RrPGF-37BRDsP=sx3btg@mail.gmail.com>

The improvement I'm suggesting can be obtained by setting
WKTWriter.setTrim(true) before use.  I think this should become the
default, but it lets downstream projects work around this issue now.

On Wed, Jan 6, 2021 at 7:54 AM Martin Davis <mtnclimb at gmail.com> wrote:

> Well, yes.  The current default behaviour seems really unpleasant:
>
> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
>
> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> POINT (-0.4200000000000000 46.3400000000000034)
>
> I agree with Andrew Bell - there is no way GEOS should be trying to
> outsmart the C++ language.  And add to that, that setting output precision
> is a perilous hack, since rounding/truncating data pointwise can result in
> invalid topology.
>
> Not saying get rid of the setRoundingPrecision, since it's the user's
> decision. But the default should be to just output "full" precision (as
> decided by the standard floating-point output routines, which know about
> weird things like IEEE-754 guard digits). And forget about trimming, since
> the standard output seems to do that just fine.
>
>
>
>
>
> On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>> For all these reasons and the fact that the current behaviour has existed
>> for a long time and is now baked into downstream (those tests in
>> GeoSwift!!) I'm inclined to just do nothing.
>>
>> Any objections?
>>
>> P
>>
>> > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>> >
>> >
>> > 1) This fight really can't be won without implementing all the various
>> things already provided for by a language like C and allowing users to make
>> these choices for themselves.  GDAL, for example, has its own strange logic
>> to do this kind of thing. It's ugly and it's not obvious to a user what's
>> going to happen as it's not well-defined by any documentation.  Some users
>> may want the full precision, and spending a bunch of time figuring out if
>> .999997 is significant or not isn't really the role of a library like GEOS,
>> IMO.  And for some values, scientific notation is what you need. This is
>> why %g exists for printf in C.
>> >
>> > 2) If you're using a text file for your output, you really don't care
>> about size, even if you say you do. Seems like time could be better spent
>> elsewhere unless someone is paying for this functionality.  Someone could
>> certainly reprocess any WKT file to remove digits if they so chose.
>> >
>> > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com>
>> wrote:
>> > Is it possible the problem is the use of std:fixed ?  (Which is invoked
>> if the trim option = FALSE, which is the default).
>> >
>> > Currently in WKTWriter.writeNumber there is this code (and the defaults
>> invoke fixed precision):
>> >
>> > if(! trim) {
>> >         ss << std::fixed;
>> >     }
>> >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) <<
>> d;
>> >
>> > This results in the following (as noted on the GeoSwift issue)
>> >
>> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
>> 46.3406447999999997)
>> >
>> > This carries too much precision, obviously.  I think it might be
>> exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously
>> tricky, and I suspect it's better to let C++ just do the right thing.
>> >
>> > Also, running reducePrecision causes problems, again I suspect due to
>> to imprecise FP representation:
>> >
>> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
>> > POINT (-0.4200000000000000 46.3400000000000034)
>> >
>> > If the std::fixed setting is dropped, the output looks more reasonable:
>> >
>> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
>> >
>> > Check that all input sig digits are shown:
>> >
>> > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
>> >
>> > Reduced precision displays as expected:
>> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
>> > POINT (-0.42 46.34)
>> >
>> >
>> > Is the "trim" option needed at all?
>> >
>> > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
>> wrote:
>> >
>> > What do people think is the best practice for outputing WKT precision?
>> > _______________________________________________
>> > geos-devel mailing list
>> > geos-devel at lists.osgeo.org
>> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>> >
>> >
>> > --
>> > Andrew Bell
>> > andrew.bell.ia at gmail.com
>> > _______________________________________________
>> > geos-devel mailing list
>> > geos-devel at lists.osgeo.org
>> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/d4e00284/attachment.html>

From pramsey at cleverelephant.ca  Wed Jan  6 09:01:03 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 6 Jan 2021 09:01:03 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
Message-ID: <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>

For interests sake here's a little program that shows the difference between std::fixed and the default aka std::defaultfloat. Note that defaultfloat (which sort of does "what we want" from a trailing zero point of view), also does sigfigs when restricted to a particular precision and scientific notation. 

I think if changes are to be made, I like the idea of doing
- default, take the C++ defaults, don't apply anything. this is a change to current behaviour, which applies a default precision
- if precision is specified, try to do a trimmed, fixed number of decimals output, which is kind of what my PR does
P.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.cc
Type: application/octet-stream
Size: 931 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/7a655562/attachment.obj>
-------------- next part --------------

> On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> Well, yes.  The current default behaviour seems really unpleasant:
> 
> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> 

> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> POINT (-0.4200000000000000 46.3400000000000034)
> 
> I agree with Andrew Bell - there is no way GEOS should be trying to outsmart the C++ language.  And add to that, that setting output precision is a perilous hack, since rounding/truncating data pointwise can result in invalid topology.  
> 
> Not saying get rid of the setRoundingPrecision, since it's the user's decision. But the default should be to just output "full" precision (as decided by the standard floating-point output routines, which know about weird things like IEEE-754 guard digits). And forget about trimming, since the standard output seems to do that just fine.
> 
> 
> 
> 
> 
> On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.
> 
> Any objections?
> 
> P
> 
> > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> > 
> > 
> > 1) This fight really can't be won without implementing all the various things already provided for by a language like C and allowing users to make these choices for themselves.  GDAL, for example, has its own strange logic to do this kind of thing. It's ugly and it's not obvious to a user what's going to happen as it's not well-defined by any documentation.  Some users may want the full precision, and spending a bunch of time figuring out if .999997 is significant or not isn't really the role of a library like GEOS, IMO.  And for some values, scientific notation is what you need. This is why %g exists for printf in C.
> > 
> > 2) If you're using a text file for your output, you really don't care about size, even if you say you do. Seems like time could be better spent elsewhere unless someone is paying for this functionality.  Someone could certainly reprocess any WKT file to remove digits if they so chose.
> > 
> > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:
> > Is it possible the problem is the use of std:fixed ?  (Which is invoked if the trim option = FALSE, which is the default).
> > 
> > Currently in WKTWriter.writeNumber there is this code (and the defaults invoke fixed precision):
> > 
> > if(! trim) {
> >         ss << std::fixed;
> >     }
> >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
> > 
> > This results in the following (as noted on the GeoSwift issue)
> > 
> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> > 
> > This carries too much precision, obviously.  I think it might be exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky, and I suspect it's better to let C++ just do the right thing.
> > 
> > Also, running reducePrecision causes problems, again I suspect due to to imprecise FP representation:
> > 
> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > POINT (-0.4200000000000000 46.3400000000000034)
> > 
> > If the std::fixed setting is dropped, the output looks more reasonable:
> > 
> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> > 
> > Check that all input sig digits are shown:
> > 
> > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> > 
> > Reduced precision displays as expected:
> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > POINT (-0.42 46.34)
> > 
> > 
> > Is the "trim" option needed at all?
> > 
> > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > 
> > What do people think is the best practice for outputing WKT precision?
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > 
> > 
> > -- 
> > Andrew Bell
> > andrew.bell.ia at gmail.com
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Jan  6 09:20:30 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 6 Jan 2021 09:20:30 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
Message-ID: <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>

Right, I have now seen that std::setprecision switches to scinot if the
precision is less than the magnitude of the number.  Very much not ideal
IMO.  So some way of using std::fixed might be needed to solve this. (Not a
problem if decimalPlaces is the default 16 though, I think - numbers >
10^16 will still be in scinot, but that should be rare).

So agreed, your PR seems like the right direction.  Does it work with
negative numbers and numbers << 1 ?

On Wed, Jan 6, 2021 at 9:01 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> For interests sake here's a little program that shows the difference
> between std::fixed and the default aka std::defaultfloat. Note that
> defaultfloat (which sort of does "what we want" from a trailing zero point
> of view), also does sigfigs when restricted to a particular precision and
> scientific notation.
>
> I think if changes are to be made, I like the idea of doing
> - default, take the C++ defaults, don't apply anything. this is a change
> to current behaviour, which applies a default precision
> - if precision is specified, try to do a trimmed, fixed number of decimals
> output, which is kind of what my PR does
> P.
>
>
>
> > On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> >
> > Well, yes.  The current default behaviour seems really unpleasant:
> >
> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> >
>
> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > POINT (-0.4200000000000000 46.3400000000000034)
> >
> > I agree with Andrew Bell - there is no way GEOS should be trying to
> outsmart the C++ language.  And add to that, that setting output precision
> is a perilous hack, since rounding/truncating data pointwise can result in
> invalid topology.
> >
> > Not saying get rid of the setRoundingPrecision, since it's the user's
> decision. But the default should be to just output "full" precision (as
> decided by the standard floating-point output routines, which know about
> weird things like IEEE-754 guard digits). And forget about trimming, since
> the standard output seems to do that just fine.
> >
> >
> >
> >
> >
> > On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > For all these reasons and the fact that the current behaviour has
> existed for a long time and is now baked into downstream (those tests in
> GeoSwift!!) I'm inclined to just do nothing.
> >
> > Any objections?
> >
> > P
> >
> > > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
> > >
> > >
> > > 1) This fight really can't be won without implementing all the various
> things already provided for by a language like C and allowing users to make
> these choices for themselves.  GDAL, for example, has its own strange logic
> to do this kind of thing. It's ugly and it's not obvious to a user what's
> going to happen as it's not well-defined by any documentation.  Some users
> may want the full precision, and spending a bunch of time figuring out if
> .999997 is significant or not isn't really the role of a library like GEOS,
> IMO.  And for some values, scientific notation is what you need. This is
> why %g exists for printf in C.
> > >
> > > 2) If you're using a text file for your output, you really don't care
> about size, even if you say you do. Seems like time could be better spent
> elsewhere unless someone is paying for this functionality.  Someone could
> certainly reprocess any WKT file to remove digits if they so chose.
> > >
> > > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com>
> wrote:
> > > Is it possible the problem is the use of std:fixed ?  (Which is
> invoked if the trim option = FALSE, which is the default).
> > >
> > > Currently in WKTWriter.writeNumber there is this code (and the
> defaults invoke fixed precision):
> > >
> > > if(! trim) {
> > >         ss << std::fixed;
> > >     }
> > >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) <<
> d;
> > >
> > > This results in the following (as noted on the GeoSwift issue)
> > >
> > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> > >
> > > This carries too much precision, obviously.  I think it might be
> exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously
> tricky, and I suspect it's better to let C++ just do the right thing.
> > >
> > > Also, running reducePrecision causes problems, again I suspect due to
> to imprecise FP representation:
> > >
> > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> > > POINT (-0.4200000000000000 46.3400000000000034)
> > >
> > > If the std::fixed setting is dropped, the output looks more reasonable:
> > >
> > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> > >
> > > Check that all input sig digits are shown:
> > >
> > > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> > >
> > > Reduced precision displays as expected:
> > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> > > POINT (-0.42 46.34)
> > >
> > >
> > > Is the "trim" option needed at all?
> > >
> > > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > >
> > > What do people think is the best practice for outputing WKT precision?
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > >
> > >
> > > --
> > > Andrew Bell
> > > andrew.bell.ia at gmail.com
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/08b8cce9/attachment-0001.html>

From pramsey at cleverelephant.ca  Wed Jan  6 09:23:14 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 6 Jan 2021 09:23:14 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
Message-ID: <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>



> On Jan 6, 2021, at 9:20 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> Right, I have now seen that std::setprecision switches to scinot if the precision is less than the magnitude of the number.  Very much not ideal IMO.  So some way of using std::fixed might be needed to solve this. (Not a problem if decimalPlaces is the default 16 though, I think - numbers > 10^16 will still be in scinot, but that should be rare).
> 
> So agreed, your PR seems like the right direction.  Does it work with negative numbers and numbers << 1 ?

No, on re-reading it's still bogus for small numbers. And negatives. I'm surprised there's not a standard c++ way to get something like std::fixed without the trailing zeroes.

P

> 
> On Wed, Jan 6, 2021 at 9:01 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> For interests sake here's a little program that shows the difference between std::fixed and the default aka std::defaultfloat. Note that defaultfloat (which sort of does "what we want" from a trailing zero point of view), also does sigfigs when restricted to a particular precision and scientific notation. 
> 
> I think if changes are to be made, I like the idea of doing
> - default, take the C++ defaults, don't apply anything. this is a change to current behaviour, which applies a default precision
> - if precision is specified, try to do a trimmed, fixed number of decimals output, which is kind of what my PR does
> P.
> 
> 
> 
> > On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> > 
> > Well, yes.  The current default behaviour seems really unpleasant:
> > 
> > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> > 
> 
> > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > POINT (-0.4200000000000000 46.3400000000000034)
> > 
> > I agree with Andrew Bell - there is no way GEOS should be trying to outsmart the C++ language.  And add to that, that setting output precision is a perilous hack, since rounding/truncating data pointwise can result in invalid topology.  
> > 
> > Not saying get rid of the setRoundingPrecision, since it's the user's decision. But the default should be to just output "full" precision (as decided by the standard floating-point output routines, which know about weird things like IEEE-754 guard digits). And forget about trimming, since the standard output seems to do that just fine.
> > 
> > 
> > 
> > 
> > 
> > On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.
> > 
> > Any objections?
> > 
> > P
> > 
> > > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> > > 
> > > 
> > > 1) This fight really can't be won without implementing all the various things already provided for by a language like C and allowing users to make these choices for themselves.  GDAL, for example, has its own strange logic to do this kind of thing. It's ugly and it's not obvious to a user what's going to happen as it's not well-defined by any documentation.  Some users may want the full precision, and spending a bunch of time figuring out if .999997 is significant or not isn't really the role of a library like GEOS, IMO.  And for some values, scientific notation is what you need. This is why %g exists for printf in C.
> > > 
> > > 2) If you're using a text file for your output, you really don't care about size, even if you say you do. Seems like time could be better spent elsewhere unless someone is paying for this functionality.  Someone could certainly reprocess any WKT file to remove digits if they so chose.
> > > 
> > > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:
> > > Is it possible the problem is the use of std:fixed ?  (Which is invoked if the trim option = FALSE, which is the default).
> > > 
> > > Currently in WKTWriter.writeNumber there is this code (and the defaults invoke fixed precision):
> > > 
> > > if(! trim) {
> > >         ss << std::fixed;
> > >     }
> > >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
> > > 
> > > This results in the following (as noted on the GeoSwift issue)
> > > 
> > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> > > 
> > > This carries too much precision, obviously.  I think it might be exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky, and I suspect it's better to let C++ just do the right thing.
> > > 
> > > Also, running reducePrecision causes problems, again I suspect due to to imprecise FP representation:
> > > 
> > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > > POINT (-0.4200000000000000 46.3400000000000034)
> > > 
> > > If the std::fixed setting is dropped, the output looks more reasonable:
> > > 
> > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> > > 
> > > Check that all input sig digits are shown:
> > > 
> > > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> > > 
> > > Reduced precision displays as expected:
> > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > > POINT (-0.42 46.34)
> > > 
> > > 
> > > Is the "trim" option needed at all?
> > > 
> > > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > > 
> > > What do people think is the best practice for outputing WKT precision?
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > 
> > > 
> > > -- 
> > > Andrew Bell
> > > andrew.bell.ia at gmail.com
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From andrew.d.hershberger at gmail.com  Wed Jan  6 12:24:30 2021
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Wed, 6 Jan 2021 14:24:30 -0600
Subject: [geos-devel] WKT Precision
In-Reply-To: <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
 <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
Message-ID: <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>

> For all these reasons and the fact that the current behaviour has existed
for a long time and is now baked into downstream (those tests in
GeoSwift!!) I'm inclined to just do nothing.

Please don't let our tests dissuade you ?. We'll be more than happy to
adapt to an improved API.

On Wed, Jan 6, 2021 at 11:23 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Jan 6, 2021, at 9:20 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> >
> > Right, I have now seen that std::setprecision switches to scinot if the
> precision is less than the magnitude of the number.  Very much not ideal
> IMO.  So some way of using std::fixed might be needed to solve this. (Not a
> problem if decimalPlaces is the default 16 though, I think - numbers >
> 10^16 will still be in scinot, but that should be rare).
> >
> > So agreed, your PR seems like the right direction.  Does it work with
> negative numbers and numbers << 1 ?
>
> No, on re-reading it's still bogus for small numbers. And negatives. I'm
> surprised there's not a standard c++ way to get something like std::fixed
> without the trailing zeroes.
>
> P
>
> >
> > On Wed, Jan 6, 2021 at 9:01 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > For interests sake here's a little program that shows the difference
> between std::fixed and the default aka std::defaultfloat. Note that
> defaultfloat (which sort of does "what we want" from a trailing zero point
> of view), also does sigfigs when restricted to a particular precision and
> scientific notation.
> >
> > I think if changes are to be made, I like the idea of doing
> > - default, take the C++ defaults, don't apply anything. this is a change
> to current behaviour, which applies a default precision
> > - if precision is specified, try to do a trimmed, fixed number of
> decimals output, which is kind of what my PR does
> > P.
> >
> >
> >
> > > On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> > >
> > > Well, yes.  The current default behaviour seems really unpleasant:
> > >
> > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> > >
> >
> > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> > > POINT (-0.4200000000000000 46.3400000000000034)
> > >
> > > I agree with Andrew Bell - there is no way GEOS should be trying to
> outsmart the C++ language.  And add to that, that setting output precision
> is a perilous hack, since rounding/truncating data pointwise can result in
> invalid topology.
> > >
> > > Not saying get rid of the setRoundingPrecision, since it's the user's
> decision. But the default should be to just output "full" precision (as
> decided by the standard floating-point output routines, which know about
> weird things like IEEE-754 guard digits). And forget about trimming, since
> the standard output seems to do that just fine.
> > >
> > >
> > >
> > >
> > >
> > > On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> > > For all these reasons and the fact that the current behaviour has
> existed for a long time and is now baked into downstream (those tests in
> GeoSwift!!) I'm inclined to just do nothing.
> > >
> > > Any objections?
> > >
> > > P
> > >
> > > > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
> > > >
> > > >
> > > > 1) This fight really can't be won without implementing all the
> various things already provided for by a language like C and allowing users
> to make these choices for themselves.  GDAL, for example, has its own
> strange logic to do this kind of thing. It's ugly and it's not obvious to a
> user what's going to happen as it's not well-defined by any documentation.
> Some users may want the full precision, and spending a bunch of time
> figuring out if .999997 is significant or not isn't really the role of a
> library like GEOS, IMO.  And for some values, scientific notation is what
> you need. This is why %g exists for printf in C.
> > > >
> > > > 2) If you're using a text file for your output, you really don't
> care about size, even if you say you do. Seems like time could be better
> spent elsewhere unless someone is paying for this functionality.  Someone
> could certainly reprocess any WKT file to remove digits if they so chose.
> > > >
> > > > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com>
> wrote:
> > > > Is it possible the problem is the use of std:fixed ?  (Which is
> invoked if the trim option = FALSE, which is the default).
> > > >
> > > > Currently in WKTWriter.writeNumber there is this code (and the
> defaults invoke fixed precision):
> > > >
> > > > if(! trim) {
> > > >         ss << std::fixed;
> > > >     }
> > > >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0)
> << d;
> > > >
> > > > This results in the following (as noted on the GeoSwift issue)
> > > >
> > > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> > > >
> > > > This carries too much precision, obviously.  I think it might be
> exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously
> tricky, and I suspect it's better to let C++ just do the right thing.
> > > >
> > > > Also, running reducePrecision causes problems, again I suspect due
> to to imprecise FP representation:
> > > >
> > > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> > > > POINT (-0.4200000000000000 46.3400000000000034)
> > > >
> > > > If the std::fixed setting is dropped, the output looks more
> reasonable:
> > > >
> > > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> > > >
> > > > Check that all input sig digits are shown:
> > > >
> > > > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> > > >
> > > > Reduced precision displays as expected:
> > > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> > > > POINT (-0.42 46.34)
> > > >
> > > >
> > > > Is the "trim" option needed at all?
> > > >
> > > > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <
> pramsey at cleverelephant.ca> wrote:
> > > >
> > > > What do people think is the best practice for outputing WKT
> precision?
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel at lists.osgeo.org
> > > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > >
> > > >
> > > > --
> > > > Andrew Bell
> > > > andrew.bell.ia at gmail.com
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel at lists.osgeo.org
> > > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > >
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/d715267a/attachment.html>

From pramsey at cleverelephant.ca  Wed Jan  6 15:07:15 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 6 Jan 2021 15:07:15 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
 <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
 <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>
Message-ID: <78DF1BBE-DE15-4857-B209-5CA6C522208A@cleverelephant.ca>

OK, so the PR <https://github.com/libgeos/geos/pull/378> now pretty directly addresses the ticket <https://github.com/libgeos/geos/issues/375> about the differences in behavior between setTrim(true) and setTrim(false) which previously switched between a positional and sigfigs oriented output, and in the PR retains a positional point-of-view throughout. 

That still leaves the possibility of using some fancy output library, like the ones mentioned in https://trac.osgeo.org/geos/ticket/868 or ryu, which has been vendored into postgis at 3.1. It would certainly be more elegant than the "strip zeroes" code in the PR.

P

> On Jan 6, 2021, at 12:24 PM, Andrew Hershberger <andrew.d.hershberger at gmail.com> wrote:
> 
> > For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.
> 
> Please don't let our tests dissuade you ?. We'll be more than happy to adapt to an improved API.
> 
> On Wed, Jan 6, 2021 at 11:23 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> 
> > On Jan 6, 2021, at 9:20 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> > 
> > Right, I have now seen that std::setprecision switches to scinot if the precision is less than the magnitude of the number.  Very much not ideal IMO.  So some way of using std::fixed might be needed to solve this. (Not a problem if decimalPlaces is the default 16 though, I think - numbers > 10^16 will still be in scinot, but that should be rare).
> > 
> > So agreed, your PR seems like the right direction.  Does it work with negative numbers and numbers << 1 ?
> 
> No, on re-reading it's still bogus for small numbers. And negatives. I'm surprised there's not a standard c++ way to get something like std::fixed without the trailing zeroes.
> 
> P
> 
> > 
> > On Wed, Jan 6, 2021 at 9:01 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > For interests sake here's a little program that shows the difference between std::fixed and the default aka std::defaultfloat. Note that defaultfloat (which sort of does "what we want" from a trailing zero point of view), also does sigfigs when restricted to a particular precision and scientific notation. 
> > 
> > I think if changes are to be made, I like the idea of doing
> > - default, take the C++ defaults, don't apply anything. this is a change to current behaviour, which applies a default precision
> > - if precision is specified, try to do a trimmed, fixed number of decimals output, which is kind of what my PR does
> > P.
> > 
> > 
> > 
> > > On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> > > 
> > > Well, yes.  The current default behaviour seems really unpleasant:
> > > 
> > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> > > 
> > 
> > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > > POINT (-0.4200000000000000 46.3400000000000034)
> > > 
> > > I agree with Andrew Bell - there is no way GEOS should be trying to outsmart the C++ language.  And add to that, that setting output precision is a perilous hack, since rounding/truncating data pointwise can result in invalid topology.  
> > > 
> > > Not saying get rid of the setRoundingPrecision, since it's the user's decision. But the default should be to just output "full" precision (as decided by the standard floating-point output routines, which know about weird things like IEEE-754 guard digits). And forget about trimming, since the standard output seems to do that just fine.
> > > 
> > > 
> > > 
> > > 
> > > 
> > > On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > > For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.
> > > 
> > > Any objections?
> > > 
> > > P
> > > 
> > > > On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> > > > 
> > > > 
> > > > 1) This fight really can't be won without implementing all the various things already provided for by a language like C and allowing users to make these choices for themselves.  GDAL, for example, has its own strange logic to do this kind of thing. It's ugly and it's not obvious to a user what's going to happen as it's not well-defined by any documentation.  Some users may want the full precision, and spending a bunch of time figuring out if .999997 is significant or not isn't really the role of a library like GEOS, IMO.  And for some values, scientific notation is what you need. This is why %g exists for printf in C.
> > > > 
> > > > 2) If you're using a text file for your output, you really don't care about size, even if you say you do. Seems like time could be better spent elsewhere unless someone is paying for this functionality.  Someone could certainly reprocess any WKT file to remove digits if they so chose.
> > > > 
> > > > On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:
> > > > Is it possible the problem is the use of std:fixed ?  (Which is invoked if the trim option = FALSE, which is the default).
> > > > 
> > > > Currently in WKTWriter.writeNumber there is this code (and the defaults invoke fixed precision):
> > > > 
> > > > if(! trim) {
> > > >         ss << std::fixed;
> > > >     }
> > > >     ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
> > > > 
> > > > This results in the following (as noted on the GeoSwift issue)
> > > > 
> > > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
> > > > 
> > > > This carries too much precision, obviously.  I think it might be exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky, and I suspect it's better to let C++ just do the right thing.
> > > > 
> > > > Also, running reducePrecision causes problems, again I suspect due to to imprecise FP representation:
> > > > 
> > > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > > > POINT (-0.4200000000000000 46.3400000000000034)
> > > > 
> > > > If the std::fixed setting is dropped, the output looks more reasonable:
> > > > 
> > > > POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> > > > 
> > > > Check that all input sig digits are shown:
> > > > 
> > > > POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> > > > 
> > > > Reduced precision displays as expected:
> > > > bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
> > > > POINT (-0.42 46.34)
> > > > 
> > > > 
> > > > Is the "trim" option needed at all?
> > > > 
> > > > On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> > > > 
> > > > What do people think is the best practice for outputing WKT precision?
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel at lists.osgeo.org
> > > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > > 
> > > > 
> > > > -- 
> > > > Andrew Bell
> > > > andrew.bell.ia at gmail.com
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel at lists.osgeo.org
> > > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Wed Jan  6 16:38:46 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 07 Jan 2021 00:38:46 -0000
Subject: [geos-devel] [GEOS] #1091: Trac: Can not select version 3.8.1
Message-ID: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>

#1091: Trac: Can not select version 3.8.1
-----------------------+--------------------------
 Reporter:  dallured   |      Owner:  geos-devel@?
     Type:  defect     |     Status:  new
 Priority:  minor      |  Milestone:  Management
Component:  Default    |    Version:  3.9.0
 Severity:  Annoyance  |   Keywords:
-----------------------+--------------------------
 When editing a trac ticket, version 3.8.1 is missing from the pick list
 for "Version".

 It would be nice to future-proof this picker, and also the same for
 "Milestone".  Perhaps allow arbitrary typing, with a background check on
 strange entries.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1091>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Wed Jan  6 17:17:45 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 6 Jan 2021 17:17:45 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <78DF1BBE-DE15-4857-B209-5CA6C522208A@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
 <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
 <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>
 <78DF1BBE-DE15-4857-B209-5CA6C522208A@cleverelephant.ca>
Message-ID: <0E7FE1DB-492E-4339-A6ED-E36D5DB143DA@cleverelephant.ca>

Because too many choices is the way to be, I pursued bringing the ryu library in for numeric output, the same library that PostgreSQL and PostGIS use, and here's a PR

https://github.com/libgeos/geos/pull/379

Upside is that it's an actual library for this stuff, it's fast, and it's not a string hack. So if we have any concerns about WKT writing performance, this is what we should do. However, it's a whole extra library in our tree, in case we care.

Thoughts?

P

> On Jan 6, 2021, at 3:07 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> OK, so the PR <https://github.com/libgeos/geos/pull/378> now pretty directly addresses the ticket <https://github.com/libgeos/geos/issues/375> about the differences in behavior between setTrim(true) and setTrim(false) which previously switched between a positional and sigfigs oriented output, and in the PR retains a positional point-of-view throughout. 
> 
> That still leaves the possibility of using some fancy output library, like the ones mentioned in https://trac.osgeo.org/geos/ticket/868 or ryu, which has been vendored into postgis at 3.1. It would certainly be more elegant than the "strip zeroes" code in the PR.
> 
> P
> 
>> On Jan 6, 2021, at 12:24 PM, Andrew Hershberger <andrew.d.hershberger at gmail.com> wrote:
>> 
>>> For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.
>> 
>> Please don't let our tests dissuade you ?. We'll be more than happy to adapt to an improved API.
>> 
>> On Wed, Jan 6, 2021 at 11:23 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> 
>> 
>>> On Jan 6, 2021, at 9:20 AM, Martin Davis <mtnclimb at gmail.com> wrote:
>>> 
>>> Right, I have now seen that std::setprecision switches to scinot if the precision is less than the magnitude of the number.  Very much not ideal IMO.  So some way of using std::fixed might be needed to solve this. (Not a problem if decimalPlaces is the default 16 though, I think - numbers > 10^16 will still be in scinot, but that should be rare).
>>> 
>>> So agreed, your PR seems like the right direction.  Does it work with negative numbers and numbers << 1 ?
>> 
>> No, on re-reading it's still bogus for small numbers. And negatives. I'm surprised there's not a standard c++ way to get something like std::fixed without the trailing zeroes.
>> 
>> P
>> 
>>> 
>>> On Wed, Jan 6, 2021 at 9:01 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>> For interests sake here's a little program that shows the difference between std::fixed and the default aka std::defaultfloat. Note that defaultfloat (which sort of does "what we want" from a trailing zero point of view), also does sigfigs when restricted to a particular precision and scientific notation. 
>>> 
>>> I think if changes are to be made, I like the idea of doing
>>> - default, take the C++ defaults, don't apply anything. this is a change to current behaviour, which applies a default precision
>>> - if precision is specified, try to do a trimmed, fixed number of decimals output, which is kind of what my PR does
>>> P.
>>> 
>>> 
>>> 
>>>> On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
>>>> 
>>>> Well, yes.  The current default behaviour seems really unpleasant:
>>>> 
>>>> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
>>>> 
>>> 
>>>> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
>>>> POINT (-0.4200000000000000 46.3400000000000034)
>>>> 
>>>> I agree with Andrew Bell - there is no way GEOS should be trying to outsmart the C++ language.  And add to that, that setting output precision is a perilous hack, since rounding/truncating data pointwise can result in invalid topology.  
>>>> 
>>>> Not saying get rid of the setRoundingPrecision, since it's the user's decision. But the default should be to just output "full" precision (as decided by the standard floating-point output routines, which know about weird things like IEEE-754 guard digits). And forget about trimming, since the standard output seems to do that just fine.
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>>> For all these reasons and the fact that the current behaviour has existed for a long time and is now baked into downstream (those tests in GeoSwift!!) I'm inclined to just do nothing.
>>>> 
>>>> Any objections?
>>>> 
>>>> P
>>>> 
>>>>> On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
>>>>> 
>>>>> 
>>>>> 1) This fight really can't be won without implementing all the various things already provided for by a language like C and allowing users to make these choices for themselves.  GDAL, for example, has its own strange logic to do this kind of thing. It's ugly and it's not obvious to a user what's going to happen as it's not well-defined by any documentation.  Some users may want the full precision, and spending a bunch of time figuring out if .999997 is significant or not isn't really the role of a library like GEOS, IMO.  And for some values, scientific notation is what you need. This is why %g exists for printf in C.
>>>>> 
>>>>> 2) If you're using a text file for your output, you really don't care about size, even if you say you do. Seems like time could be better spent elsewhere unless someone is paying for this functionality.  Someone could certainly reprocess any WKT file to remove digits if they so chose.
>>>>> 
>>>>> On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com> wrote:
>>>>> Is it possible the problem is the use of std:fixed ?  (Which is invoked if the trim option = FALSE, which is the default).
>>>>> 
>>>>> Currently in WKTWriter.writeNumber there is this code (and the defaults invoke fixed precision):
>>>>> 
>>>>> if(! trim) {
>>>>>        ss << std::fixed;
>>>>>    }
>>>>>    ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0) << d;
>>>>> 
>>>>> This results in the following (as noted on the GeoSwift issue)
>>>>> 
>>>>> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000 46.3406447999999997)
>>>>> 
>>>>> This carries too much precision, obviously.  I think it might be exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously tricky, and I suspect it's better to let C++ just do the right thing.
>>>>> 
>>>>> Also, running reducePrecision causes problems, again I suspect due to to imprecise FP representation:
>>>>> 
>>>>> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
>>>>> POINT (-0.4200000000000000 46.3400000000000034)
>>>>> 
>>>>> If the std::fixed setting is dropped, the output looks more reasonable:
>>>>> 
>>>>> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
>>>>> 
>>>>> Check that all input sig digits are shown:
>>>>> 
>>>>> POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
>>>>> 
>>>>> Reduced precision displays as expected:
>>>>> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision 100
>>>>> POINT (-0.42 46.34)
>>>>> 
>>>>> 
>>>>> Is the "trim" option needed at all?
>>>>> 
>>>>> On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>>>>> 
>>>>> What do people think is the best practice for outputing WKT precision?
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>>> 
>>>>> 
>>>>> -- 
>>>>> Andrew Bell
>>>>> andrew.bell.ia at gmail.com
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>> 
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>> 
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> 
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 


From andrew.d.hershberger at gmail.com  Wed Jan  6 17:31:41 2021
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Wed, 6 Jan 2021 19:31:41 -0600
Subject: [geos-devel] Intersection result ordering change between 3.7.1 and
 3.9.0
Message-ID: <CACZW30M6Cp2bZD0Dao0g9MKnFAHPhxq2Fv7JgTV7k-FW+mbZVg@mail.gmail.com>

A GEOSwift consumer noticed some differences in intersection behavior
between geos 3.7.1 and 3.9.0. I'm guessing this is related to OverlayNG?
https://github.com/GEOSwift/GEOSwift/issues/212

I'm looking for guidance on how to advise them w.r.t. their statement that
they're relying on "the order of the intersection points". Is that part of
the contract such that changes should be considered breaking?

Andrew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/3930a7e4/attachment.html>

From pramsey at cleverelephant.ca  Wed Jan  6 17:36:13 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 6 Jan 2021 17:36:13 -0800
Subject: [geos-devel] Intersection result ordering change between 3.7.1
 and 3.9.0
In-Reply-To: <CACZW30M6Cp2bZD0Dao0g9MKnFAHPhxq2Fv7JgTV7k-FW+mbZVg@mail.gmail.com>
References: <CACZW30M6Cp2bZD0Dao0g9MKnFAHPhxq2Fv7JgTV7k-FW+mbZVg@mail.gmail.com>
Message-ID: <4690AA5D-B3D5-49D6-9941-3C722441F3B0@cleverelephant.ca>



> On Jan 6, 2021, at 5:31 PM, Andrew Hershberger <andrew.d.hershberger at gmail.com> wrote:
> 
> A GEOSwift consumer noticed some differences in intersection behavior between geos 3.7.1 and 3.9.0. I'm guessing this is related to OverlayNG? https://github.com/GEOSwift/GEOSwift/issues/212

Yes, component ordering in collections, ring start/end points, interior ring ordering, it's all potentially changed in 3.9 with the NG overlay. You can retain tests that work across new/old versions by applying the GEOSNormalize() function to everything, to get a deterministic ordering of rings/components/start points etc.

> I'm looking for guidance on how to advise them w.r.t. their statement that they're relying on "the order of the intersection points". Is that part of the contract such that changes should be considered breaking?

Not sure what that means, maybe they are intersecting lines and getting points? Would need to know the precise use case to know if it's something we used to try and preserve.

P.



> 
> Andrew
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Jan  6 18:59:39 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 6 Jan 2021 18:59:39 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <0E7FE1DB-492E-4339-A6ED-E36D5DB143DA@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
 <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
 <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>
 <78DF1BBE-DE15-4857-B209-5CA6C522208A@cleverelephant.ca>
 <0E7FE1DB-492E-4339-A6ED-E36D5DB143DA@cleverelephant.ca>
Message-ID: <CAK2ens3f2ofVHNHsSNvmxfJ7zzKdqU6pTSpoZt5UQBacMWK7yg@mail.gmail.com>

+1 from me.  Faster is Good.  It's a relatively simple fallback if ryu
turns out to be unsupportable for some reason.  And better to use a
well-tested library (presumably?) than our own hacks.

Maybe C++31 will provide more flexible numeric formatting, but while we're
waiting for that...

On Wed, Jan 6, 2021 at 5:17 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Because too many choices is the way to be, I pursued bringing the ryu
> library in for numeric output, the same library that PostgreSQL and PostGIS
> use, and here's a PR
>
> https://github.com/libgeos/geos/pull/379
>
> Upside is that it's an actual library for this stuff, it's fast, and it's
> not a string hack. So if we have any concerns about WKT writing
> performance, this is what we should do. However, it's a whole extra library
> in our tree, in case we care.
>
> Thoughts?
>
> P
>
> > On Jan 6, 2021, at 3:07 PM, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> > OK, so the PR <https://github.com/libgeos/geos/pull/378> now pretty
> directly addresses the ticket <https://github.com/libgeos/geos/issues/375>
> about the differences in behavior between setTrim(true) and setTrim(false)
> which previously switched between a positional and sigfigs oriented output,
> and in the PR retains a positional point-of-view throughout.
> >
> > That still leaves the possibility of using some fancy output library,
> like the ones mentioned in https://trac.osgeo.org/geos/ticket/868 or ryu,
> which has been vendored into postgis at 3.1. It would certainly be more
> elegant than the "strip zeroes" code in the PR.
> >
> > P
> >
> >> On Jan 6, 2021, at 12:24 PM, Andrew Hershberger <
> andrew.d.hershberger at gmail.com> wrote:
> >>
> >>> For all these reasons and the fact that the current behaviour has
> existed for a long time and is now baked into downstream (those tests in
> GeoSwift!!) I'm inclined to just do nothing.
> >>
> >> Please don't let our tests dissuade you ?. We'll be more than happy to
> adapt to an improved API.
> >>
> >> On Wed, Jan 6, 2021 at 11:23 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>
> >>
> >>> On Jan 6, 2021, at 9:20 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> >>>
> >>> Right, I have now seen that std::setprecision switches to scinot if
> the precision is less than the magnitude of the number.  Very much not
> ideal IMO.  So some way of using std::fixed might be needed to solve this.
> (Not a problem if decimalPlaces is the default 16 though, I think - numbers
> > 10^16 will still be in scinot, but that should be rare).
> >>>
> >>> So agreed, your PR seems like the right direction.  Does it work with
> negative numbers and numbers << 1 ?
> >>
> >> No, on re-reading it's still bogus for small numbers. And negatives.
> I'm surprised there's not a standard c++ way to get something like
> std::fixed without the trailing zeroes.
> >>
> >> P
> >>
> >>>
> >>> On Wed, Jan 6, 2021 at 9:01 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>> For interests sake here's a little program that shows the difference
> between std::fixed and the default aka std::defaultfloat. Note that
> defaultfloat (which sort of does "what we want" from a trailing zero point
> of view), also does sigfigs when restricted to a particular precision and
> scientific notation.
> >>>
> >>> I think if changes are to be made, I like the idea of doing
> >>> - default, take the C++ defaults, don't apply anything. this is a
> change to current behaviour, which applies a default precision
> >>> - if precision is specified, try to do a trimmed, fixed number of
> decimals output, which is kind of what my PR does
> >>> P.
> >>>
> >>>
> >>>
> >>>> On Jan 6, 2021, at 7:54 AM, Martin Davis <mtnclimb at gmail.com> wrote:
> >>>>
> >>>> Well, yes.  The current default behaviour seems really unpleasant:
> >>>>
> >>>> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> >>>>
> >>>
> >>>> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> >>>> POINT (-0.4200000000000000 46.3400000000000034)
> >>>>
> >>>> I agree with Andrew Bell - there is no way GEOS should be trying to
> outsmart the C++ language.  And add to that, that setting output precision
> is a perilous hack, since rounding/truncating data pointwise can result in
> invalid topology.
> >>>>
> >>>> Not saying get rid of the setRoundingPrecision, since it's the user's
> decision. But the default should be to just output "full" precision (as
> decided by the standard floating-point output routines, which know about
> weird things like IEEE-754 guard digits). And forget about trimming, since
> the standard output seems to do that just fine.
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>> On Wed, Jan 6, 2021 at 7:43 AM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >>>> For all these reasons and the fact that the current behaviour has
> existed for a long time and is now baked into downstream (those tests in
> GeoSwift!!) I'm inclined to just do nothing.
> >>>>
> >>>> Any objections?
> >>>>
> >>>> P
> >>>>
> >>>>> On Jan 6, 2021, at 7:41 AM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
> >>>>>
> >>>>>
> >>>>> 1) This fight really can't be won without implementing all the
> various things already provided for by a language like C and allowing users
> to make these choices for themselves.  GDAL, for example, has its own
> strange logic to do this kind of thing. It's ugly and it's not obvious to a
> user what's going to happen as it's not well-defined by any documentation.
> Some users may want the full precision, and spending a bunch of time
> figuring out if .999997 is significant or not isn't really the role of a
> library like GEOS, IMO.  And for some values, scientific notation is what
> you need. This is why %g exists for printf in C.
> >>>>>
> >>>>> 2) If you're using a text file for your output, you really don't
> care about size, even if you say you do. Seems like time could be better
> spent elsewhere unless someone is paying for this functionality.  Someone
> could certainly reprocess any WKT file to remove digits if they so chose.
> >>>>>
> >>>>> On Wed, Jan 6, 2021 at 10:25 AM Martin Davis <mtnclimb at gmail.com>
> wrote:
> >>>>> Is it possible the problem is the use of std:fixed ?  (Which is
> invoked if the trim option = FALSE, which is the default).
> >>>>>
> >>>>> Currently in WKTWriter.writeNumber there is this code (and the
> defaults invoke fixed precision):
> >>>>>
> >>>>> if(! trim) {
> >>>>>        ss << std::fixed;
> >>>>>    }
> >>>>>    ss << std::setprecision(decimalPlaces >= 0 ? decimalPlaces : 0)
> << d;
> >>>>>
> >>>>> This results in the following (as noted on the GeoSwift issue)
> >>>>>
> >>>>> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977000000000
> 46.3406447999999997)
> >>>>>
> >>>>> This carries too much precision, obviously.  I think it might be
> exposing the IEEE-754 guard digits unnecessarily.  FP output is notoriously
> tricky, and I suspect it's better to let C++ just do the right thing.
> >>>>>
> >>>>> Also, running reducePrecision causes problems, again I suspect due
> to to imprecise FP representation:
> >>>>>
> >>>>> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> >>>>> POINT (-0.4200000000000000 46.3400000000000034)
> >>>>>
> >>>>> If the std::fixed setting is dropped, the output looks more
> reasonable:
> >>>>>
> >>>>> POINT (-0.4225977 46.3406448). ==>. POINT (-0.4225977234 46.3406448)
> >>>>>
> >>>>> Check that all input sig digits are shown:
> >>>>>
> >>>>> POINT (-0.4225977234 46.3406448) ==> POINT (-0.4225977234 46.3406448)
> >>>>>
> >>>>> Reduced precision displays as expected:
> >>>>> bin/geosop -a "Point (-0.4225977 46.3406448)" -f wkt reducePrecision
> 100
> >>>>> POINT (-0.42 46.34)
> >>>>>
> >>>>>
> >>>>> Is the "trim" option needed at all?
> >>>>>
> >>>>> On Tue, Jan 5, 2021 at 3:41 PM Paul Ramsey <
> pramsey at cleverelephant.ca> wrote:
> >>>>>
> >>>>> What do people think is the best practice for outputing WKT
> precision?
> >>>>> _______________________________________________
> >>>>> geos-devel mailing list
> >>>>> geos-devel at lists.osgeo.org
> >>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>>>
> >>>>>
> >>>>> --
> >>>>> Andrew Bell
> >>>>> andrew.bell.ia at gmail.com
> >>>>> _______________________________________________
> >>>>> geos-devel mailing list
> >>>>> geos-devel at lists.osgeo.org
> >>>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>>
> >>>> _______________________________________________
> >>>> geos-devel mailing list
> >>>> geos-devel at lists.osgeo.org
> >>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>> _______________________________________________
> >>>> geos-devel mailing list
> >>>> geos-devel at lists.osgeo.org
> >>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>>
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel at lists.osgeo.org
> >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>> _______________________________________________
> >>> geos-devel mailing list
> >>> geos-devel at lists.osgeo.org
> >>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/0af8ac0e/attachment-0001.html>

From andrew.d.hershberger at gmail.com  Wed Jan  6 20:40:19 2021
From: andrew.d.hershberger at gmail.com (Andrew Hershberger)
Date: Wed, 6 Jan 2021 22:40:19 -0600
Subject: [geos-devel] Intersection result ordering change between 3.7.1
 and 3.9.0
In-Reply-To: <4690AA5D-B3D5-49D6-9941-3C722441F3B0@cleverelephant.ca>
References: <CACZW30M6Cp2bZD0Dao0g9MKnFAHPhxq2Fv7JgTV7k-FW+mbZVg@mail.gmail.com>
 <4690AA5D-B3D5-49D6-9941-3C722441F3B0@cleverelephant.ca>
Message-ID: <CACZW30Pn1NgzX7ZUzCF2vn4ueRYq0-QQugQLD+m-4wMaXt=wKg@mail.gmail.com>

Thanks for the replies.

Re: the order of the intersection points. the only difference in the output
from the example they shared was that there were 3 multilinestrings, each
of which contained 2 linestrings which were ordered differently.

Let's see whether normalize solves this for them.

Andrew

On Wed, Jan 6, 2021 at 7:36 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
>
> > On Jan 6, 2021, at 5:31 PM, Andrew Hershberger <
> andrew.d.hershberger at gmail.com> wrote:
> >
> > A GEOSwift consumer noticed some differences in intersection behavior
> between geos 3.7.1 and 3.9.0. I'm guessing this is related to OverlayNG?
> https://github.com/GEOSwift/GEOSwift/issues/212
>
> Yes, component ordering in collections, ring start/end points, interior
> ring ordering, it's all potentially changed in 3.9 with the NG overlay. You
> can retain tests that work across new/old versions by applying the
> GEOSNormalize() function to everything, to get a deterministic ordering of
> rings/components/start points etc.
>
> > I'm looking for guidance on how to advise them w.r.t. their statement
> that they're relying on "the order of the intersection points". Is that
> part of the contract such that changes should be considered breaking?
>
> Not sure what that means, maybe they are intersecting lines and getting
> points? Would need to know the precise use case to know if it's something
> we used to try and preserve.
>
> P.
>
>
>
> >
> > Andrew
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210106/a17f99cb/attachment.html>

From geos-trac at osgeo.org  Thu Jan  7 05:49:20 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 07 Jan 2021 13:49:20 -0000
Subject: [geos-devel] [GEOS] #1091: Trac: Can not select version 3.8.1
In-Reply-To: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>
References: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>
Message-ID: <061.d8ee7be864f46679768889ff5a64c2e0@osgeo.org>

#1091: Trac: Can not select version 3.8.1
--------------------------+---------------------------
 Reporter:  Dave Allured  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  minor         |   Milestone:  Management
Component:  Default       |     Version:  3.9.0
 Severity:  Annoyance     |  Resolution:
 Keywords:                |
--------------------------+---------------------------

Comment (by Sandro Santilli <strk@?>):

 In [changeset:"dd4e2712718b6c810416c5f9397e7252d0327ca1/git" dd4e271/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="dd4e2712718b6c810416c5f9397e7252d0327ca1"
 Add trac version as part of release process

 References #1091
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1091#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan  7 05:50:21 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 07 Jan 2021 13:50:21 -0000
Subject: [geos-devel] [GEOS] #1091: Trac: Can not select version 3.8.1
In-Reply-To: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>
References: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>
Message-ID: <061.18150385b6fb7c02f799ee4e0c3394b3@osgeo.org>

#1091: Trac: Can not select version 3.8.1
--------------------------+---------------------------
 Reporter:  Dave Allured  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  closed
 Priority:  minor         |   Milestone:  Management
Component:  Default       |     Version:
 Severity:  Annoyance     |  Resolution:  fixed
 Keywords:                |
--------------------------+---------------------------
Changes (by strk):

 * status:  new => closed
 * version:  3.9.0 =>
 * resolution:   => fixed


Comment:

 Added missing versions 3.8.1, 3.7.1, 3.7.2, 3.7.3
 Added missing milestone: 3.7.3

 These are added manually as part of release process.
 I've reviewed the HOWTO_RELEASE document in master accordingly.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1091#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan  7 09:35:58 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 07 Jan 2021 17:35:58 -0000
Subject: [geos-devel] [GEOS] #1091: Trac: Can not select version 3.8.1
In-Reply-To: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>
References: <046.034263eec3ea643f60e311f8832b1f63@osgeo.org>
Message-ID: <061.480935cc2ce28e47d10db295e3736cfb@osgeo.org>

#1091: Trac: Can not select version 3.8.1
--------------------------+---------------------------
 Reporter:  Dave Allured  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  closed
 Priority:  minor         |   Milestone:  Management
Component:  Default       |     Version:
 Severity:  Annoyance     |  Resolution:  fixed
 Keywords:                |
--------------------------+---------------------------

Comment (by Dave Allured):

 Nice.  Thank you for your quick response.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1091#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Thu Jan  7 12:19:31 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 7 Jan 2021 12:19:31 -0800
Subject: [geos-devel] Proposal: Change WKTWriter.setTrim(true) to be default
Message-ID: <CAK2ens1VENZ9gEyXOrodwo_aJ6sTGGrfp-S4dS-qh0D+zmzgag@mail.gmail.com>

Paul's fine work on adding Ryu [1] finally makes WKTWriter numeric output
work as the API implies (i.e. precision means "decimal places" rather than
the C-style "significant digits").  This brings GEOS in line with JTS, and
more importantly makes it behave in a way that works better for geospatial
numeric values.

I suggest one further change: make this the default mode for WKTWriter
output.

Technically, this means that WKTWriter.setTrim(true) will be the default
mode (unlike now, where trim=false is the default).

The effect of this will be to change default output from looking like this:

bin/geosop -a "Point (1 2)" -f wkt
POINT (1.0000000000000000 2.0000000000000000)

to this (which is much better IMO)

POINT (1 2)

Making trim=true mode the default will mean that downstream clients will
get sensible behaviour as the default, which should prevent bug reports
like GH #375 [2].

This will have a potential impact on downstream testing, if they are
testing exact character output.  Hopefully this won't be too much effort to
correct, and is worthwhile, since it avoids baking in tests for undesirable
behaviour.  And in any case it seems likely that downstream will always set
trim=true anyway, to avoid the kind of issues mentioned in that ticket.

Furthermore, if this is done then it seems like there is no need for a
trim=false mode at all. So we can deprecate and no-op that API method.

Comments?

[1]
https://github.com/libgeos/geos/commit/2376cd6bf5d0743b02b588af17d2e9067c1874de
[2] https://github.com/libgeos/geos/issues/375
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210107/21e601a7/attachment.html>

From mwtoews at gmail.com  Thu Jan  7 16:54:31 2021
From: mwtoews at gmail.com (Mike Taves)
Date: Fri, 8 Jan 2021 13:54:31 +1300
Subject: [geos-devel] WKT Precision
In-Reply-To: <0E7FE1DB-492E-4339-A6ED-E36D5DB143DA@cleverelephant.ca>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
 <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
 <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>
 <78DF1BBE-DE15-4857-B209-5CA6C522208A@cleverelephant.ca>
 <0E7FE1DB-492E-4339-A6ED-E36D5DB143DA@cleverelephant.ca>
Message-ID: <CAM2FmMpaFTrL25+zSbND3iAFHZP_VX+X4CZdVDv_vnh7Y7d5VQ@mail.gmail.com>

On Thu, 7 Jan 2021 at 14:17, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>
> Because too many choices is the way to be, I pursued bringing the ryu library in for numeric output, the same library that PostgreSQL and PostGIS use, and here's a PR
>
> https://github.com/libgeos/geos/pull/379
>
> Upside is that it's an actual library for this stuff, it's fast, and it's not a string hack. So if we have any concerns about WKT writing performance, this is what we should do. However, it's a whole extra library in our tree, in case we care.
>
> Thoughts?

Fantastic. I was about to suggest ryu too, so thanks for pursuing this
approach. Amazing that float->string conversions is still a lively
comp.sci. development scene, given that ryu is rather new (June 2018).

From mtnclimb at gmail.com  Thu Jan  7 16:57:37 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 7 Jan 2021 16:57:37 -0800
Subject: [geos-devel] WKT Precision
In-Reply-To: <CAM2FmMpaFTrL25+zSbND3iAFHZP_VX+X4CZdVDv_vnh7Y7d5VQ@mail.gmail.com>
References: <AF9846A2-61A8-42F3-AE16-B5867437A3A7@cleverelephant.ca>
 <CAK2ens1imURfXauuzjcuKqGEAWpk0QNEqk-hN6j24gCzOufyoQ@mail.gmail.com>
 <CACJ51z1NWr27kCy9UtewmgmNfpat454SPxbLSHtHtXGatNspMQ@mail.gmail.com>
 <0557733A-BE1E-4010-ABB6-65AFC37DEC0E@cleverelephant.ca>
 <CAK2ens0_L8Zr+eCHRzYzZXapMoSeWjFHLqUnWyULZF5eQcedAw@mail.gmail.com>
 <29199A87-F9AC-4A53-B266-195FAF5F90BE@cleverelephant.ca>
 <CAK2ens383EUhe1JnMFvyf9uK8o2t1n9B0-QbxdUOqEZT07w9EQ@mail.gmail.com>
 <B7044947-ED59-466A-B055-89A5C927B399@cleverelephant.ca>
 <CACZW30N0iUSxOQqG7f2Z6Jqd+mzDRhgwOhE+bEgoc=mo8J79rQ@mail.gmail.com>
 <78DF1BBE-DE15-4857-B209-5CA6C522208A@cleverelephant.ca>
 <0E7FE1DB-492E-4339-A6ED-E36D5DB143DA@cleverelephant.ca>
 <CAM2FmMpaFTrL25+zSbND3iAFHZP_VX+X4CZdVDv_vnh7Y7d5VQ@mail.gmail.com>
Message-ID: <CAK2ens04X4Uvui19yf0_ym9nLre=VfE6hrCaHvkECwZ69wP4iQ@mail.gmail.com>

On Thu, Jan 7, 2021 at 4:55 PM Mike Taves <mwtoews at gmail.com> wrote:

> Fantastic. I was about to suggest ryu too, so thanks for pursuing this
> approach.


Good to know!


> Amazing that float->string conversions is still a lively
> comp.sci. development scene, given that ryu is rather new (June 2018).
>

Well, it is in the C/C++ world... other langs have had this more baked for
a while :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210107/b4559fb7/attachment.html>

From dbaston at gmail.com  Fri Jan  8 09:25:34 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 8 Jan 2021 12:25:34 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
Message-ID: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>

Hi,

I'd like to propose that we revisit RFC 7 [1], introduced in October 2018,
which proposes that we use CMake as the exclusive build system for GEOS.

The CMake configuration was added to GEOS 11 years ago and has been
officially supported since release 3.5, over five years ago. The CMake
configuration has built up strong community momentum and has attracted
contributions from 12 developers. Continuing to maintain the autotools
configuration increases the effort for developers to contribute to GEOS. I
frequently have to re-submit pull requests to address problems in the
autotools build, losing 30-60 minutes of productive time each occurrence.

For reference, the last discussion of this issue on geos-devel was in
October 2018 [2]. To my knowledge, the technical issues discussed in that
thread have long since been resolved. For example, the autotools-like
targets ("make distcheck") discussed in that thread were added by Paul in
2019. I think the remainder of the discussion boils down to build system
preference. There are plenty of good reasons for preferring one build
system or another, and I don't expect every member of the GEOS community to
prefer CMake. I think the question we need to resolve is whether, after 11
years of working with and 5 years of officially supporting two build
systems, we need to continue to spend developer effort maintaining both
systems in order to accommodate those preferences.

Thoughts?
Dan

[1] https://trac.osgeo.org/geos/wiki/RFC7
[2] https://lists.osgeo.org/pipermail/geos-devel/2018-October/008586.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/56b93cd4/attachment.html>

From pramsey at cleverelephant.ca  Fri Jan  8 09:29:38 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 09:29:38 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
Message-ID: <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>



> On Jan 8, 2021, at 9:25 AM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> I think the question we need to resolve is whether, after 11 years of working with and 5 years of officially supporting two build systems, we need to continue to spend developer effort maintaining both systems in order to accommodate those preferences.

I agree. I can think of only one further technical task, which is ensuring that the outputs of the cmake 'make dist' target are run through to 'make check' in CI. Being able to bundle a release via 'make dist' is a very handy thing and makes 'tag to release automatically' a potential CI target which would also be nice.

P.

From mtnclimb at gmail.com  Fri Jan  8 09:46:19 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Fri, 8 Jan 2021 09:46:19 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
Message-ID: <CAK2ens0Wt2GQ6qcXfd8_PbCiTtO40yWSh0=bPuqQj+QnGC2WQA@mail.gmail.com>

Sounds like a great idea to me.  As you say, supporting two build systems
is unproductive and buggy.

On Fri, Jan 8, 2021 at 9:25 AM Daniel Baston <dbaston at gmail.com> wrote:

> Hi,
>
> I'd like to propose that we revisit RFC 7 [1], introduced in October 2018,
> which proposes that we use CMake as the exclusive build system for GEOS.
>
> The CMake configuration was added to GEOS 11 years ago and has been
> officially supported since release 3.5, over five years ago. The CMake
> configuration has built up strong community momentum and has attracted
> contributions from 12 developers. Continuing to maintain the autotools
> configuration increases the effort for developers to contribute to GEOS. I
> frequently have to re-submit pull requests to address problems in the
> autotools build, losing 30-60 minutes of productive time each occurrence.
>
> For reference, the last discussion of this issue on geos-devel was in
> October 2018 [2]. To my knowledge, the technical issues discussed in that
> thread have long since been resolved. For example, the autotools-like
> targets ("make distcheck") discussed in that thread were added by Paul in
> 2019. I think the remainder of the discussion boils down to build system
> preference. There are plenty of good reasons for preferring one build
> system or another, and I don't expect every member of the GEOS community to
> prefer CMake. I think the question we need to resolve is whether, after 11
> years of working with and 5 years of officially supporting two build
> systems, we need to continue to spend developer effort maintaining both
> systems in order to accommodate those preferences.
>
> Thoughts?
> Dan
>
> [1] https://trac.osgeo.org/geos/wiki/RFC7
> [2] https://lists.osgeo.org/pipermail/geos-devel/2018-October/008586.html
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/135d6e6c/attachment-0001.html>

From lr at pcorp.us  Fri Jan  8 10:07:24 2021
From: lr at pcorp.us (Regina Obe)
Date: Fri, 8 Jan 2021 13:07:24 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
Message-ID: <005801d6e5e9$1e867fc0$5b937f40$@pcorp.us>

I'm fine with having only cmake if the issue Paul raised below is fixed.
That is what I currently use for building.

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf Of
> Paul Ramsey
> Sent: Friday, January 8, 2021 12:30 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] RFC7: Discontinue use of autotools
> 
> 
> 
> > On Jan 8, 2021, at 9:25 AM, Daniel Baston <dbaston at gmail.com> wrote:
> >
> > I think the question we need to resolve is whether, after 11 years of
> working with and 5 years of officially supporting two build systems, we
need
> to continue to spend developer effort maintaining both systems in order to
> accommodate those preferences.
> 
> I agree. I can think of only one further technical task, which is ensuring
that
> the outputs of the cmake 'make dist' target are run through to 'make
check'
> in CI. Being able to bundle a release via 'make dist' is a very handy
thing and
> makes 'tag to release automatically' a potential CI target which would
also be
> nice.
> 
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From gdt at lexort.com  Fri Jan  8 10:11:58 2021
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 08 Jan 2021 13:11:58 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca> (Paul
 Ramsey's message of "Fri, 8 Jan 2021 09:29:38 -0800")
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
Message-ID: <rmibldz70y9.fsf@s1.lexort.com>


Paul Ramsey <pramsey at cleverelephant.ca> writes:

>> On Jan 8, 2021, at 9:25 AM, Daniel Baston <dbaston at gmail.com> wrote:
>> 
>> I think the question we need to resolve is whether, after 11 years
>> of working with and 5 years of officially supporting two build
>> systems, we need to continue to spend developer effort maintaining
>> both systems in order to accommodate those preferences.
>
> I agree. I can think of only one further technical task, which is
> ensuring that the outputs of the cmake 'make dist' target are run
> through to 'make check' in CI. Being able to bundle a release via
> 'make dist' is a very handy thing and makes 'tag to release
> automatically' a potential CI target which would also be nice.

One thing autotools does that many cmake setups don't (but could) is
'make distcheck' which does

  make dist

  unpacks it

  does an objdir build

  runs make check in that

  does so in a way that the just-built libs are used and installed libs
  are ignored

If that already works in cmake, fine, and if not I think that needs
fixing before getting rid of autotools.

The other thing is cross builds, and I have no idea what the state of
that is in the geos cmake build.  Often I have found that build systems
proposed as a replacement for autotools don't do that.
   
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/b49a0799/attachment.sig>

From Roger.Bivand at nhh.no  Fri Jan  8 11:25:07 2021
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 8 Jan 2021 20:25:07 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
Message-ID: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>

In so far as geos-config and geos.pc are generated in forms that autotools 
can use (R packages use autotools to configure the use of external 
libraries), the main problem is simply that I don't use Cmake, and have 
never felt confident when obliged to use it. Unless forced, I really 
prefer not to have to, and as I retire soon, I think I shouldn't begin 
life as a pensioner by having to learn enough Cmake to be able to build 
GEOS (nothing else I build regularly uses Cmake).

Probably part of the problem is the ./autogen.sh step, which most other 
libraries do not impose, however, the RFC does not mention this.

My feeling is that my interest in tracking developments in GEOS (on behalf 
of the R spatial cluster of packages, about 950 at last count) before a 
release process is triggered will weaken sharply if I have to learn Cmake, 
used for nothing else.

The RFC mentions the preferences of commmitters; this is wrong-headed, 
because the actually useful feedback comes from those in R/Python/etc. who 
may be able to find regressions, but who will stop testing before release 
if building from the repo or from source in general gets harder. Then you 
risk making releases which cause havoc downstream, because you are making 
it harder for people like me to build from source.  What the committers 
prefer will decide this, but it isn't wise.

Roger


-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From pramsey at cleverelephant.ca  Fri Jan  8 11:29:58 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 11:29:58 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
Message-ID: <6503EB2F-D3EB-4347-AE89-4F6C9D3DC442@cleverelephant.ca>



> On Jan 8, 2021, at 11:25 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
> 
> In so far as geos-config and geos.pc are generated in forms that autotools can use (R packages use autotools to configure the use of external libraries), the main problem is simply that I don't use Cmake, and have never felt confident when obliged to use it. Unless forced, I really prefer not to have to, and as I retire soon, I think I shouldn't begin life as a pensioner by having to learn enough Cmake to be able to build GEOS (nothing else I build regularly uses Cmake).
> 
> Probably part of the problem is the ./autogen.sh step, which most other libraries do not impose, however, the RFC does not mention this.
> 
> My feeling is that my interest in tracking developments in GEOS (on behalf of the R spatial cluster of packages, about 950 at last count) before a release process is triggered will weaken sharply if I have to learn Cmake, used for nothing else.
> 
> The RFC mentions the preferences of commmitters; this is wrong-headed, because the actually useful feedback comes from those in R/Python/etc. who may be able to find regressions, but who will stop testing before release if building from the repo or from source in general gets harder. Then you risk making releases which cause havoc downstream, because you are making it harder for people like me to build from source.  What the committers prefer will decide this, but it isn't wise.

tar xvz geos-3.9.0.tar.bz2
cd geos-3.9.0
mkdir _build
cd _build
cmake ..
make
make check
make install

Or from git:

git clone git at github.com:libgeos/geos.git geos-git
mkdir geos-build
cd geos-build
cmake ../geos-git
make
make check
make install

I'm working right now on more comprehensive web docs that I hope will make it easier for people to get started and use GEOS.

P.

> 
> Roger
> 
> 
> -- 
> Roger Bivand
> Department of Economics, Norwegian School of Economics,
> Helleveien 30, N-5045 Bergen, Norway.
> voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
> https://orcid.org/0000-0003-2392-6140
> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From Roger.Bivand at nhh.no  Fri Jan  8 11:59:19 2021
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 8 Jan 2021 20:59:19 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <6503EB2F-D3EB-4347-AE89-4F6C9D3DC442@cleverelephant.ca>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <6503EB2F-D3EB-4347-AE89-4F6C9D3DC442@cleverelephant.ca>
Message-ID: <6e937859-e621-f2c2-f176-4ad62a23fa2c@reclus.nhh.no>

On Fri, 8 Jan 2021, Paul Ramsey wrote:

>
>
>> On Jan 8, 2021, at 11:25 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
>>
>> In so far as geos-config and geos.pc are generated in forms that 
>> autotools can use (R packages use autotools to configure the use of 
>> external libraries), the main problem is simply that I don't use Cmake, 
>> and have never felt confident when obliged to use it. Unless forced, I 
>> really prefer not to have to, and as I retire soon, I think I shouldn't 
>> begin life as a pensioner by having to learn enough Cmake to be able to 
>> build GEOS (nothing else I build regularly uses Cmake).
>>
>> Probably part of the problem is the ./autogen.sh step, which most other 
>> libraries do not impose, however, the RFC does not mention this.
>>
>> My feeling is that my interest in tracking developments in GEOS (on 
>> behalf of the R spatial cluster of packages, about 950 at last count) 
>> before a release process is triggered will weaken sharply if I have to 
>> learn Cmake, used for nothing else.
>>
>> The RFC mentions the preferences of commmitters; this is wrong-headed, 
>> because the actually useful feedback comes from those in R/Python/etc. 
>> who may be able to find regressions, but who will stop testing before 
>> release if building from the repo or from source in general gets 
>> harder. Then you risk making releases which cause havoc downstream, 
>> because you are making it harder for people like me to build from 
>> source.  What the committers prefer will decide this, but it isn't 
>> wise.
>

Thanks for responding, but:

> tar xvz geos-3.9.0.tar.bz2
> cd geos-3.9.0
> mkdir _build
> cd _build
> cmake ..
> make
> make check
> make install

I already have a clone of the gitea repo, and can if need be change 
branches (you may recall the non-announcement of needing 
--enable_overlayng in 
https://lists.osgeo.org/pipermail/geos-devel/2020-October/009754.html )

My beef with Cmake is the interactive verbosity to console (in this case 
not much, other software has been very verbose), and the fact that every 
time (for other software) I've tried to use it (on Fedora), it has failed 
often because it wanted something else installed that I didn't need, and 
that Cmake wanted just to be pretty. Progress percentages are something 
that I cannot stand (my choice). Running it now on the current state of 
the gitea repo, I cannot see the verbatim compiler flags - it tells me 
things that are no use to me, but does not tell me things (in the make 
step) that might be useful.

Is it claimed that make and make check run faster when using cmake - they 
seem to, but is the test suite the same?

Yes, of course I can use cmake if I have to.

I'll be really happy when the Solaris question gets addressed, though, 
because 3.7.0 and later do not build on the Solaris Intel platform 
(different compilers):

https://www.stats.ox.ac.uk/pub/bdr/Rconfig/r-patched-solaris-x86

It's not that anyone needs to use Solaris, but the code appears to have 
stopped liking the Solaris build train from 3.7.0, and maybe some 
assumption was made that was not explicit? The R community does this kind 
of thing, pointing out issues in upstream compilers and libraries, because 
the knowledge may be useful (our Sparc Solaris was very useful before it 
failed).

Roger

>
> Or from git:
>
> git clone git at github.com:libgeos/geos.git geos-git
> mkdir geos-build
> cd geos-build
> cmake ../geos-git
> make
> make check
> make install
>
> I'm working right now on more comprehensive web docs that I hope will make it easier for people to get started and use GEOS.
>
> P.
>
>>
>> Roger
>>
>>
>> --
>> Roger Bivand
>> Department of Economics, Norwegian School of Economics,
>> Helleveien 30, N-5045 Bergen, Norway.
>> voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
>> https://orcid.org/0000-0003-2392-6140
>> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From pramsey at cleverelephant.ca  Fri Jan  8 12:04:07 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 12:04:07 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <6e937859-e621-f2c2-f176-4ad62a23fa2c@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <6503EB2F-D3EB-4347-AE89-4F6C9D3DC442@cleverelephant.ca>
 <6e937859-e621-f2c2-f176-4ad62a23fa2c@reclus.nhh.no>
Message-ID: <89616D2F-B1EA-4984-91CC-AC205799D0BD@cleverelephant.ca>



> On Jan 8, 2021, at 11:59 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
> 
> On Fri, 8 Jan 2021, Paul Ramsey wrote:
> 
>> 
>> 
>>> On Jan 8, 2021, at 11:25 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
>>> 
>>> In so far as geos-config and geos.pc are generated in forms that autotools can use (R packages use autotools to configure the use of external libraries), the main problem is simply that I don't use Cmake, and have never felt confident when obliged to use it. Unless forced, I really prefer not to have to, and as I retire soon, I think I shouldn't begin life as a pensioner by having to learn enough Cmake to be able to build GEOS (nothing else I build regularly uses Cmake).
>>> 
>>> Probably part of the problem is the ./autogen.sh step, which most other libraries do not impose, however, the RFC does not mention this.
>>> 
>>> My feeling is that my interest in tracking developments in GEOS (on behalf of the R spatial cluster of packages, about 950 at last count) before a release process is triggered will weaken sharply if I have to learn Cmake, used for nothing else.
>>> 
>>> The RFC mentions the preferences of commmitters; this is wrong-headed, because the actually useful feedback comes from those in R/Python/etc. who may be able to find regressions, but who will stop testing before release if building from the repo or from source in general gets harder. Then you risk making releases which cause havoc downstream, because you are making it harder for people like me to build from source.  What the committers prefer will decide this, but it isn't wise.
>> 
> 
> Thanks for responding, but:
> 
>> tar xvz geos-3.9.0.tar.bz2
>> cd geos-3.9.0
>> mkdir _build
>> cd _build
>> cmake ..
>> make
>> make check
>> make install
> 
> I already have a clone of the gitea repo, and can if need be change branches (you may recall the non-announcement of needing --enable_overlayng in https://lists.osgeo.org/pipermail/geos-devel/2020-October/009754.html )
> 
> My beef with Cmake is the interactive verbosity to console (in this case not much, other software has been very verbose), and the fact that every time (for other software) I've tried to use it (on Fedora), it has failed often because it wanted something else installed that I didn't need, and that Cmake wanted just to be pretty. Progress percentages are something that I cannot stand (my choice). Running it now on the current state of the gitea repo, I cannot see the verbatim compiler flags - it tells me things that are no use to me, but does not tell me things (in the make step) that might be useful.

make VERBOSE=1

> Is it claimed that make and make check run faster when using cmake - they seem to, but is the test suite the same?

Yes, it is now the same (sometimes cmake is better, because it's easy to forget to add tests to autotools, and autotools is "opt-in" while cmake is "opt-out".

> Yes, of course I can use cmake if I have to.
> 
> I'll be really happy when the Solaris question gets addressed, though, because 3.7.0 and later do not build on the Solaris Intel platform (different compilers):
> 
> https://www.stats.ox.ac.uk/pub/bdr/Rconfig/r-patched-solaris-x86
> 
> It's not that anyone needs to use Solaris, but the code appears to have stopped liking the Solaris build train from 3.7.0, and maybe some assumption was made that was not explicit? The R community does this kind of thing, pointing out issues in upstream compilers and libraries, because the knowledge may be useful (our Sparc Solaris was very useful before it failed).

Sorry, is this a cmake build issue or a Solaris-geos issue? I can believe we've failed our Solaris friends recently, but frankly it's one of those "pay me" platforms because setting up a build env to work in is such a PITA, and extra more so since OpenSolaris went away. Also (and maybe this is less of a problem now) the fact that Solaris build chains can easily end up being mishmashes of GNU tools and proprietary Solaris ones makes for extra fun problems on that platform.

P.

> 
> Roger
> 
>> 
>> Or from git:
>> 
>> git clone git at github.com:libgeos/geos.git geos-git
>> mkdir geos-build
>> cd geos-build
>> cmake ../geos-git
>> make
>> make check
>> make install
>> 
>> I'm working right now on more comprehensive web docs that I hope will make it easier for people to get started and use GEOS.
>> 
>> P.
>> 
>>> 
>>> Roger
>>> 
>>> 
>>> --
>>> Roger Bivand
>>> Department of Economics, Norwegian School of Economics,
>>> Helleveien 30, N-5045 Bergen, Norway.
>>> voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
>>> https://orcid.org/0000-0003-2392-6140
>>> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> 
>> 
> 
> -- 
> Roger Bivand
> Department of Economics, Norwegian School of Economics,
> Helleveien 30, N-5045 Bergen, Norway.
> voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
> https://orcid.org/0000-0003-2392-6140
> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en


From strk at kbt.io  Fri Jan  8 13:07:50 2021
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 8 Jan 2021 22:07:50 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <rmibldz70y9.fsf@s1.lexort.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com>
Message-ID: <20210108210750.GB5755@cdb>

On Fri, Jan 08, 2021 at 01:11:58PM -0500, Greg Troxel wrote:

> One thing autotools does that many cmake setups don't (but could) is
> 'make distcheck' which does
> 
>   make dist
> 
>   unpacks it
> 
>   does an objdir build
> 
>   runs make check in that
> 
>   does so in a way that the just-built libs are used and installed libs
>   are ignored
> 
> If that already works in cmake, fine, and if not I think that needs
> fixing before getting rid of autotools.
> 
> The other thing is cross builds, and I have no idea what the state of
> that is in the geos cmake build.  Often I have found that build systems
> proposed as a replacement for autotools don't do that.

I suggest proponents do address the points above. We don't want to
loose functionality for being friendly to Windows (isn't this the main
reason why CMake was introduced?)

--strk;

From dbaston at gmail.com  Fri Jan  8 13:25:29 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 8 Jan 2021 16:25:29 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108210750.GB5755@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
Message-ID: <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>

>
> I suggest proponents do address the points above.


As I mentioned, Paul added a "make distcheck" in 2019.
I have no knowledge of cross-compiling other than that people do it. The
documentation [1] appears to provide some instructions.


> We don't want to loose functionality for being friendly to Windows (isn't
> this the main
> reason why CMake was introduced?)
>

I don't know what the motivation was for introducing CMake originally, but
I'm not sure it's relevant 11 years later. The reasons I propose using
CMake are described in the RFC [2].

Dan

[1] https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html
[2] https://trac.osgeo.org/geos/wiki/RFC7
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/cfee2eaf/attachment.html>

From dbaston at gmail.com  Fri Jan  8 13:40:37 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 8 Jan 2021 16:40:37 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <6e937859-e621-f2c2-f176-4ad62a23fa2c@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <6503EB2F-D3EB-4347-AE89-4F6C9D3DC442@cleverelephant.ca>
 <6e937859-e621-f2c2-f176-4ad62a23fa2c@reclus.nhh.no>
Message-ID: <CA+K_q_rfC44ix-y+z-W-L17mwgmc1aM7H5rY7D9K-A46S0uF_w@mail.gmail.com>

>
> I already have a clone of the gitea repo, and can if need be change
> branches (you may recall the non-announcement of needing
> --enable_overlayng in
> https://lists.osgeo.org/pipermail/geos-devel/2020-October/009754.html )
>

I think the root cause for that confusion was GEOS developers primarily
using one build system and downstream developers using another.

 Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/4e23b1e8/attachment.html>

From strk at kbt.io  Fri Jan  8 14:10:15 2021
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 8 Jan 2021 23:10:15 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
Message-ID: <20210108221015.GA25860@cdb>

On Fri, Jan 08, 2021 at 04:25:29PM -0500, Daniel Baston wrote:
> >
> > I suggest proponents do address the points above.
> 
> As I mentioned, Paul added a "make distcheck" in 2019.

I've just tried "make distcheck" from a build/ subdir.
It created a geos-3.10.0dev.tar.bz2 file of 150MB.

The "make dist" command under autotools generates a
geos-3.10.0dev.tar.gz of less than 6MB.

The "make dist-bzip2" command under autotools generates a
geos-3.10.0dev.tar.bz2 of less than 5MB.

Note autotools support all these target formats:

  dist-gzip
  dist-bzip2
  dist-lzip
  dist-xz
  dist-tarZ
  dist-shar
  dist-zip

> I don't know what the motivation was for introducing CMake originally, but
> I'm not sure it's relevant 11 years later.

It's relevant to the extent that _dropping_ cmake would also resolve
the "need to do double work" issue, if it wasn't for Windows.

As per RFC, the reasons you propose to only keep cmake are:

   1. It is used by the majority of active committers
   2. It is the only cross-platform (OS/compiler) build system 

This is it list of most recent commit authors (last 200) intersected
with committers with most commit in repository (top 20), in
alphabetical order:

  Daniel Baston
  Even Rouault
  Martin Davis
  Mike Taves
  Paul Ramsey
  Sandro Santilli

I'm pretty sure the majority of the above committers (also)
use autotools, so the first motivation is not enough.

As for cross-platform features, that I recall Windows is the only
platform that we've had reports of build problems (for MingW not
being evidently easy to setup - this Regina can say more about).

I think binary packagers would have the most informed opinion on the
matter as they are the ones that build on multiple-platforms, usually.
We poor developers mostly build for our single development machines,
so I'd listen carefully to what people like Greg Troxel say.

--strk;

From pramsey at cleverelephant.ca  Fri Jan  8 14:21:48 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 14:21:48 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <896A2210-2800-4B1C-AA1E-6D2601C1A053@cleverelephant.ca>



> On Jan 8, 2021, at 2:10 PM, Sandro Santilli <strk at kbt.io> wrote:
> 
> I've just tried "make distcheck" from a build/ subdir.
> It created a geos-3.10.0dev.tar.bz2 file of 150MB.
> 
> The "make dist" command under autotools generates a
> geos-3.10.0dev.tar.gz of less than 6MB.
> 
The source directory you are making dist against is probably full of old autotools build output, since I can build dist against my pristine source directory and get a geos-3.10.0dev.tar.bz2 of 7161398 bytes. 

From pramsey at cleverelephant.ca  Fri Jan  8 14:22:44 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 14:22:44 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <E790BD2E-59CE-43C4-A854-221A6F06D32A@cleverelephant.ca>



> On Jan 8, 2021, at 2:10 PM, Sandro Santilli <strk at kbt.io> wrote:
> 
> Note autotools support all these target formats:
> 
>  dist-gzip
>  dist-bzip2
>  dist-lzip
>  dist-xz
>  dist-tarZ
>  dist-shar
>  dist-zip

This seems of little relevance since we only distribute bz2

From pramsey at cleverelephant.ca  Fri Jan  8 14:25:03 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 14:25:03 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <5A76590D-DD35-4461-AB62-EF4D4E2715B3@cleverelephant.ca>



> On Jan 8, 2021, at 2:10 PM, Sandro Santilli <strk at kbt.io> wrote:
> 
> As for cross-platform features, that I recall Windows is the only
> platform that we've had reports of build problems (for MingW not
> being evidently easy to setup - this Regina can say more about).

Windows remains a very important target precisely because so many of the downstream projects (QGIS, Shapely, r.sf) have very large Windows user bases. As a PostGIS person I can sniff that nobody uses windows in production (except I'm wrong, and they do) but as a GEOS person, that huge tail of Windows use has to be kept in mind and is really important.

From pramsey at cleverelephant.ca  Fri Jan  8 14:25:41 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 14:25:41 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <70AAB425-DD4F-4D0B-9841-8E3887F513A6@cleverelephant.ca>



> On Jan 8, 2021, at 2:10 PM, Sandro Santilli <strk at kbt.io> wrote:
> 
> I think binary packagers would have the most informed opinion on the
> matter as they are the ones that build on multiple-platforms, usually.
> We poor developers mostly build for our single development machines,
> so I'd listen carefully to what people like Greg Troxel say.

Greg's amazing, but we have to look beyond the UNIX family to find the majority of our end users.

P.

From dbaston at gmail.com  Fri Jan  8 14:45:42 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 8 Jan 2021 17:45:42 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>

>
> It's relevant to the extent that _dropping_ cmake would also resolve
> the "need to do double work" issue, if it wasn't for Windows.
>

It doesn't resolve the issue, because we'd need to re-introduce NMake. If
you're suggesting that we drop Windows, please make that motion separately.

I'm pretty sure the majority of the above committers (also)
> use autotools, so the first motivation is not enough.
>

I am not using autotools with GEOS but can't speak for others.

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/36859776/attachment.html>

From pramsey at cleverelephant.ca  Fri Jan  8 14:49:07 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 14:49:07 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>
Message-ID: <A1E629E5-C14C-4AE7-A83F-E37AF1BED805@cleverelephant.ca>



> On Jan 8, 2021, at 2:45 PM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> It's relevant to the extent that _dropping_ cmake would also resolve
> the "need to do double work" issue, if it wasn't for Windows.
> 
> It doesn't resolve the issue, because we'd need to re-introduce NMake. If you're suggesting that we drop Windows, please make that motion separately.
> 
> I'm pretty sure the majority of the above committers (also)
> use autotools, so the first motivation is not enough.
> 
> I am not using autotools with GEOS but can't speak for others.

cmake exclusively except insofar as release/ci force me to use autotools



From mtnclimb at gmail.com  Fri Jan  8 14:51:54 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Fri, 8 Jan 2021 14:51:54 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>
Message-ID: <CAK2ens3yZLTGoCudpb1nKczBX_+L868ksZj6MenY+9NcwWAbkQ@mail.gmail.com>

On Fri, Jan 8, 2021 at 2:45 PM Daniel Baston <dbaston at gmail.com> wrote

>
> I am not using autotools with GEOS but can't speak for others.
>

CMake for me, unless forced to run autotools.

It's quite a bit faster in GH CI too (unless autotools builds are doing
something additional)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/34d1e6ab/attachment.html>

From pramsey at cleverelephant.ca  Fri Jan  8 14:52:58 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 8 Jan 2021 14:52:58 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CAK2ens3yZLTGoCudpb1nKczBX_+L868ksZj6MenY+9NcwWAbkQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>
 <CAK2ens3yZLTGoCudpb1nKczBX_+L868ksZj6MenY+9NcwWAbkQ@mail.gmail.com>
Message-ID: <B814E106-E27B-4F82-A261-24F1E93C01F0@cleverelephant.ca>



> On Jan 8, 2021, at 2:51 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> On Fri, Jan 8, 2021 at 2:45 PM Daniel Baston <dbaston at gmail.com> wrote
> 
> I am not using autotools with GEOS but can't speak for others.
> 
> CMake for me, unless forced to run autotools.  
> 
> It's quite a bit faster in GH CI too (unless autotools builds are doing something additional)

It is, it's running make and make distcheck, so effectively building twice.


From dbaston at gmail.com  Fri Jan  8 15:10:00 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 8 Jan 2021 18:10:00 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CAK2ens3yZLTGoCudpb1nKczBX_+L868ksZj6MenY+9NcwWAbkQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <CA+K_q_p+7dRSr0YPzTXkVENpZtjw1CejPpfvLyhi-z0LfeZFZQ@mail.gmail.com>
 <CAK2ens3yZLTGoCudpb1nKczBX_+L868ksZj6MenY+9NcwWAbkQ@mail.gmail.com>
Message-ID: <CA+K_q_pWQ5QV=4pnBsWroRCVTObofM=FvFG8kHxVfcPYMjb+pg@mail.gmail.com>

>
> It's quite a bit faster in GH CI too (unless autotools builds are doing
> something additional)
>

Not just in CI. CMake+ninja is about 2x faster for me locally. Not sure how
much of that is CMake and how much is ninja.

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210108/cf611c07/attachment-0001.html>

From even.rouault at spatialys.com  Fri Jan  8 15:41:45 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 09 Jan 2021 00:41:45 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <1899673.AQ2Ru1KJdK@even-i700>

> I'm pretty sure the majority of the above committers (also)
> use autotools, so the first motivation is not enough.

I'd be fine with a CMake-only build system.

https://travis-ci.org/github/uclouvain/openjpeg is an exemple of cmake used 
with cross-compilation targets (mingw compiler with Linux host)
I know people build openjpeg in a buildroot context, so with cross compilers.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sebastic at xs4all.nl  Fri Jan  8 22:46:55 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Sat, 9 Jan 2021 07:46:55 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>

On 1/8/21 11:10 PM, Sandro Santilli wrote:
> I think binary packagers would have the most informed opinion on the
> matter as they are the ones that build on multiple-platforms, usually.
> We poor developers mostly build for our single development machines,
> so I'd listen carefully to what people like Greg Troxel say.
Switching from autotools to cmake is generally a regression from a
packager point of view. Autotools is much better supported on Linux and
many architectures. And its features heavily used for hardening
buildflags, multiarch, etc. CMake requires more work to make such
features work, upstreams seldomly care about those where packagers do.

Ideally both remain supported, autotools for Linux and friends, and
CMake for Windows where autotools is too much of a pain to use.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From strk at kbt.io  Sat Jan  9 02:35:49 2021
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 9 Jan 2021 11:35:49 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <896A2210-2800-4B1C-AA1E-6D2601C1A053@cleverelephant.ca>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <896A2210-2800-4B1C-AA1E-6D2601C1A053@cleverelephant.ca>
Message-ID: <20210109103549.GA29294@cdb>

On Fri, Jan 08, 2021 at 02:21:48PM -0800, Paul Ramsey wrote:
> 
> 
> > On Jan 8, 2021, at 2:10 PM, Sandro Santilli <strk at kbt.io> wrote:
> > 
> > I've just tried "make distcheck" from a build/ subdir.
> > It created a geos-3.10.0dev.tar.bz2 file of 150MB.
> > 
> > The "make dist" command under autotools generates a
> > geos-3.10.0dev.tar.gz of less than 6MB.
> 
> The source directory you are making dist against is probably full of old autotools build output, since I can build dist against my pristine source directory and get a geos-3.10.0dev.tar.bz2 of 7161398 bytes. 

So this must be an effect of the "opt-out" paradigm of CMake rules.
Can CMake be made to be "opt-in" instead, to avoid this kind of
situations ? I think it happened in the past that we published a
release package with extraneous files in it.

--strk;

From jmckenna at gatewaygeomatics.com  Sat Jan  9 05:33:37 2021
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Sat, 9 Jan 2021 09:33:37 -0400
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210108221015.GA25860@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
Message-ID: <efd4b58d-973f-66f9-08c9-d7fbd7cb1c74@gatewaygeomatics.com>

On 2021-01-08 6:10 p.m., Sandro Santilli wrote:
> 
> As for cross-platform features, that I recall Windows is the only
> platform that we've had reports of build problems (for MingW not
> being evidently easy to setup - this Regina can say more about).
> 

For MS4W (a huge user-base) I've been using Cmake for GEOS for years in 
the builds for Windows users, without issues.

That said, I maintain Nmake files for many projects (as they moved to 
Cmake and suddenly Windows support breaks), so it's not always easy for 
a project to support Windows, even with Cmake (black-box) magic.

But the magic works for GEOS! ha.

-jeff



-- 
Jeff McKenna
GatewayGeo: MapServer Consulting and Training Services
co-founder of FOSS4G
http://gatewaygeo.com/

From dbaston at gmail.com  Sat Jan  9 06:01:55 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Sat, 9 Jan 2021 09:01:55 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb> <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
Message-ID: <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>

>
> buildflags, multiarch, etc. CMake requires more work to make such
> features work, upstreams seldomly care about those where packagers do.
>

Can you quantify "more work"? Is there anything that can be done by GEOS to
reduce it?

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210109/4fe2863a/attachment.html>

From dbaston at gmail.com  Sat Jan  9 06:05:03 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Sat, 9 Jan 2021 09:05:03 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210109103549.GA29294@cdb>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <896A2210-2800-4B1C-AA1E-6D2601C1A053@cleverelephant.ca>
 <20210109103549.GA29294@cdb>
Message-ID: <CA+K_q_pZVoaxzNjWi1vsRaoRvn2tDdd-zr1=B1xG7bjeagq+jA@mail.gmail.com>

>
> Can CMake be made to be "opt-in" instead, to avoid this kind of
> situations ?


I think packaging releases from a clean tree is a pretty reasonable
requirement. The "opt-in" aspect of autotools has caused tests to be
skipped for years. Nothing's perfect.

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210109/bcbf760c/attachment.html>

From sebastic at xs4all.nl  Sat Jan  9 06:30:59 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Sat, 9 Jan 2021 15:30:59 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb> <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
 <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>
Message-ID: <90a0480a-6c06-921a-4590-e48d99b8d408@xs4all.nl>

On 1/9/21 3:01 PM, Daniel Baston wrote:
>> buildflags, multiarch, etc. CMake requires more work to make such
>> features work, upstreams seldomly care about those where packagers do.
> 
> Can you quantify "more work"? Is there anything that can be done by GEOS to
> reduce it?

Two examples:


Make the CMake build adhere to CMAKE_INSTALL_LIBDIR so that multiarch
keeps working, see this recent example:

 https://github.com/openstreetmap/OSM-binary/issues/54

A quick look at the CMakeLists.txt for GEOS shows it using hardcoded
paths in its install() calls as well.


Have CMAKE_BUILD_TYPE=None define NDEBUG so that assert() is removed
from the code, thereby not storing the buildpath in the binaries helping
reproducible builds.


Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From sean.gillies at gmail.com  Sat Jan  9 16:26:41 2021
From: sean.gillies at gmail.com (Sean Gillies)
Date: Sat, 9 Jan 2021 17:26:41 -0700
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
Message-ID: <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>

Hi Roger and all,

On Fri, Jan 8, 2021 at 12:25 PM Roger Bivand <Roger.Bivand at nhh.no> wrote:

> In so far as geos-config and geos.pc are generated in forms that autotools
> can use (R packages use autotools to configure the use of external
> libraries), the main problem is simply that I don't use Cmake, and have
> never felt confident when obliged to use it. Unless forced, I really
> prefer not to have to, and as I retire soon, I think I shouldn't begin
> life as a pensioner by having to learn enough Cmake to be able to build
> GEOS (nothing else I build regularly uses Cmake).
>
> Probably part of the problem is the ./autogen.sh step, which most other
> libraries do not impose, however, the RFC does not mention this.
>
> My feeling is that my interest in tracking developments in GEOS (on behalf
> of the R spatial cluster of packages, about 950 at last count) before a
> release process is triggered will weaken sharply if I have to learn Cmake,
> used for nothing else.
>
> The RFC mentions the preferences of commmitters; this is wrong-headed,
> because the actually useful feedback comes from those in R/Python/etc. who
> may be able to find regressions, but who will stop testing before release
> if building from the repo or from source in general gets harder. Then you
> risk making releases which cause havoc downstream, because you are making
> it harder for people like me to build from source.  What the committers
> prefer will decide this, but it isn't wise.
>
> Roger
>

I can't speak for any other downstream projects or packagers, but the
Shapely project won't be terribly inconvenienced by a complete switch to
Cmake.

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210109/db93eede/attachment.html>

From dbaston at gmail.com  Sat Jan  9 17:44:15 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Sat, 9 Jan 2021 20:44:15 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <90a0480a-6c06-921a-4590-e48d99b8d408@xs4all.nl>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb> <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
 <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>
 <90a0480a-6c06-921a-4590-e48d99b8d408@xs4all.nl>
Message-ID: <CA+K_q_rUT-bO2pSPUwe0DL5Fj_PgEWC73BBJtOGXPi91v1g8gQ@mail.gmail.com>

>
> Make the CMake build adhere to CMAKE_INSTALL_LIBDIR so that multiarch
> keeps working,


I created a pull request for this at
https://github.com/libgeos/geos/pull/380

Have CMAKE_BUILD_TYPE=None define NDEBUG so that assert() is removed
> from the code, thereby not storing the buildpath in the binaries helping
> reproducible builds.
>

If you don't specify CMAKE_BUILD_TYPE it defaults to Release, and NDEBUG
will be defined. Do you mean that we should define a new build type called
"None" ?

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210109/8d2fe203/attachment.html>

From sebastic at xs4all.nl  Sat Jan  9 21:24:21 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Sun, 10 Jan 2021 06:24:21 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_rUT-bO2pSPUwe0DL5Fj_PgEWC73BBJtOGXPi91v1g8gQ@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb> <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
 <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>
 <90a0480a-6c06-921a-4590-e48d99b8d408@xs4all.nl>
 <CA+K_q_rUT-bO2pSPUwe0DL5Fj_PgEWC73BBJtOGXPi91v1g8gQ@mail.gmail.com>
Message-ID: <a2714a56-c544-ab61-15d6-05be2af5c755@xs4all.nl>

On 1/10/21 2:44 AM, Daniel Baston wrote:
>>
>> Make the CMake build adhere to CMAKE_INSTALL_LIBDIR so that multiarch
>> keeps working,
> 
> 
> I created a pull request for this at
> https://github.com/libgeos/geos/pull/380
> 
> Have CMAKE_BUILD_TYPE=None define NDEBUG so that assert() is removed
>> from the code, thereby not storing the buildpath in the binaries helping
>> reproducible builds.
>>
> 
> If you don't specify CMAKE_BUILD_TYPE it defaults to Release, and NDEBUG
> will be defined.

But then -g is not used and there will be no debug symbols.
RelWithDebInfo is more what we need.

> Do you mean that we should define a new build type called
> "None" ?

It is used to have the buildflags set in the environment determine
optimization etc.

CMake apparently uses the absolute path for __FILE__ whereas Autotools
uses the path relative to the Makefile. Hence we get
file-references-package-build-path issues after switching a package to
use the cmake buildsystem.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From gdt at lexort.com  Sun Jan 10 08:07:43 2021
From: gdt at lexort.com (Greg Troxel)
Date: Sun, 10 Jan 2021 11:07:43 -0500
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <a2714a56-c544-ab61-15d6-05be2af5c755@xs4all.nl> (Sebastiaan
 Couwenberg's message of "Sun, 10 Jan 2021 06:24:21 +0100")
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb>
 <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
 <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>
 <90a0480a-6c06-921a-4590-e48d99b8d408@xs4all.nl>
 <CA+K_q_rUT-bO2pSPUwe0DL5Fj_PgEWC73BBJtOGXPi91v1g8gQ@mail.gmail.com>
 <a2714a56-c544-ab61-15d6-05be2af5c755@xs4all.nl>
Message-ID: <rmituroydv4.fsf@s1.lexort.com>


Sebastiaan Couwenberg <sebastic at xs4all.nl> writes:

> On 1/10/21 2:44 AM, Daniel Baston wrote:
>>>
>>> Make the CMake build adhere to CMAKE_INSTALL_LIBDIR so that multiarch
>>> keeps working,
>> 
>> 
>> I created a pull request for this at
>> https://github.com/libgeos/geos/pull/380
>> 
>> Have CMAKE_BUILD_TYPE=None define NDEBUG so that assert() is removed
>>> from the code, thereby not storing the buildpath in the binaries helping
>>> reproducible builds.
>>>
>> 
>> If you don't specify CMAKE_BUILD_TYPE it defaults to Release, and NDEBUG
>> will be defined.
>
> But then -g is not used and there will be no debug symbols.
> RelWithDebInfo is more what we need.
>
>> Do you mean that we should define a new build type called
>> "None" ?
>
> It is used to have the buildflags set in the environment determine
> optimization etc.
>
> CMake apparently uses the absolute path for __FILE__ whereas Autotools
> uses the path relative to the Makefile. Hence we get
> file-references-package-build-path issues after switching a package to
> use the cmake buildsystem.

So it seems that 'drop autotools' is not ready for prime time, until
packaging systems can switch and report no residual issues/regressions.

FWIW, pkgsrc is also using autotools to build.   I can try to switch it
to cmake and see how that goes.   I'll be doing that on the most recent
release, of course, for starters.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210110/5a82557c/attachment.sig>

From sebastic at xs4all.nl  Sun Jan 10 20:38:34 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 11 Jan 2021 05:38:34 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CA+K_q_okwzJrvVrOYcHMr6b5KoUHF0pUoTB38k=LdBnN+17FJg@mail.gmail.com>
References: <CA+K_q_o2P6eL1eQYEcjW7-BRCci=qvfuD2L1wfitCCPXmb-zCQ@mail.gmail.com>
 <D0DCE041-2BCC-4C64-B996-535CDB73C3E3@cleverelephant.ca>
 <rmibldz70y9.fsf@s1.lexort.com> <20210108210750.GB5755@cdb>
 <CA+K_q_rFFZtyihDGEkQ0Rej24MWQ3pu7xyrB2eFBwvgsg+GADQ@mail.gmail.com>
 <20210108221015.GA25860@cdb> <729f113f-59ff-ebb9-64b9-45180855bd6c@xs4all.nl>
 <CA+K_q_pZrNG4wCVrG_swevDzxFPsToATPf1TBhnj6EYAxDmuPQ@mail.gmail.com>
 <90a0480a-6c06-921a-4590-e48d99b8d408@xs4all.nl>
 <CA+K_q_rUT-bO2pSPUwe0DL5Fj_PgEWC73BBJtOGXPi91v1g8gQ@mail.gmail.com>
 <a2714a56-c544-ab61-15d6-05be2af5c755@xs4all.nl>
 <CA+K_q_okwzJrvVrOYcHMr6b5KoUHF0pUoTB38k=LdBnN+17FJg@mail.gmail.com>
Message-ID: <e1cbb112-7ca6-0acd-09a2-fefe241099f4@xs4all.nl>

On 1/11/21 2:37 AM, Daniel Baston wrote:
>>
>>> Have CMAKE_BUILD_TYPE=None define NDEBUG so that assert() is removed
>>>> from the code, thereby not storing the buildpath in the binaries helping
>>>> reproducible builds.
>>>>
>>>
>>> If you don't specify CMAKE_BUILD_TYPE it defaults to Release, and NDEBUG
>>> will be defined.
>>
>> But then -g is not used and there will be no debug symbols.
>> RelWithDebInfo is more what we need.
>>
>>> Do you mean that we should define a new build type called
>>> "None" ?
>>
>> It is used to have the buildflags set in the environment determine
>> optimization etc.
>>
> 
> Just to make sure I'm clear: we would have an explicitly specified
> CMAKE_BUILD_TYPE=None define NDEBUG and set no compiler flags? This is
> distinct from not specifying CMAKE_BUILD_TYPE, which gives you a Release
> build with its associated flags for optimizations/warnings/etc.

I would probably set NDEBUG when CMAKE_BUILD_TYPE != Release.

But the file-references-package-build-path issue is inherent to the
difference between CMake and Autotools. The Autotools build doesn't
strip assert() (which uses __FILE__) with NDEBUG, it uses a relative
path which doesn't include the build directory.

Adding NDEBUG for the CMake build is a workaround for its use of the
absolute path for __FILE__.

>> CMake apparently uses the absolute path for __FILE__ whereas Autotools
>> uses the path relative to the Makefile. Hence we get
>> file-references-package-build-path issues after switching a package to
>> use the cmake buildsystem.
>>
> 
> I've just removed our only usage of __FILE__ in a non-debug build.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From Roger.Bivand at nhh.no  Mon Jan 11 01:09:58 2021
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Mon, 11 Jan 2021 10:09:58 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
Message-ID: <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>

On Sun, 10 Jan 2021, Sean Gillies wrote:

> Hi Roger and all,
>
> On Fri, Jan 8, 2021 at 12:25 PM Roger Bivand <Roger.Bivand at nhh.no> wrote:
>
...
>>
>> The RFC mentions the preferences of commmitters; this is wrong-headed,
>> because the actually useful feedback comes from those in R/Python/etc. who
>> may be able to find regressions, but who will stop testing before release
>> if building from the repo or from source in general gets harder. Then you
>> risk making releases which cause havoc downstream, because you are making
>> it harder for people like me to build from source.  What the committers
>> prefer will decide this, but it isn't wise.
>>
>> Roger
>>
>
> I can't speak for any other downstream projects or packagers, but the
> Shapely project won't be terribly inconvenienced by a complete switch to
> Cmake.
>

Sean: Thanks, this is useful.

Cmake proponents: apart from the reservations raised by packagers, why for 
me does rm -rf _build not lead to

mkdir _build && cd _build && cmake .. && make

taking the same time when repeated compare to the first time through? What 
else do I need to delete to distclean the previous build? Is what I am 
seeing from searching correct, that cmake squirrels stuff away and does 
not offer any distclean to zero the build completely?

How can one be sure that stale stuff is not hanging around when using 
cmake .. in an empty _build in the local git repo?

Roger

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From pramsey at cleverelephant.ca  Mon Jan 11 15:02:42 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 11 Jan 2021 15:02:42 -0800
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
 <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
Message-ID: <3559EDFB-21CB-4B20-BD77-57472438EA83@cleverelephant.ca>



> On Jan 11, 2021, at 1:09 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
> 
> Cmake proponents: apart from the reservations raised by packagers, why for me does rm -rf _build not lead to
> 
> mkdir _build && cd _build && cmake .. && make
> 
> taking the same time when repeated compare to the first time through? What else do I need to delete to distclean the previous build? Is what I am seeing from searching correct, that cmake squirrels stuff away and does not offer any distclean to zero the build completely?
> 
> How can one be sure that stale stuff is not hanging around when using cmake .. in an empty _build in the local git repo

All build changes/output are confined to the build directory. You can put it in _build in the source dir. Or you can be even more isolated (this is what I do) and put it literally to the side of the source dir. I have 

$CODE/geos-git
$CODE/geos-git-build

in my working area.

You can prove it to yourself:

wget http://download.osgeo.org/geos/geos-3.9.0.tar.bz2
tar xvfj geos-3.9.0.tar.bz2
du -sk > ../before_sz.txt
# 23368
find . > ../before.txt
mkdir _build
cmake ..
time make
# 674.13s
rm -rf _build
du -sk > ../after_sz.txt
# 23368
find . > ../after.txt
diff ../before ../after
cat ../before_sz.txt ../after_sz.txt

Nothing is added to the source dir. The file list is identical before and after.
If you're building out-of-tree, the equivalent of 'make distclean' is 'rm -rf $BUILDDIR`

P.



From even.rouault at spatialys.com  Mon Jan 11 16:06:59 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 12 Jan 2021 01:06:59 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
 <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
Message-ID: <6664413.zLSJ727kT3@even-i700>

On lundi 11 janvier 2021 10:09:58 CET Roger Bivand wrote:
> On Sun, 10 Jan 2021, Sean Gillies wrote:
> > Hi Roger and all,
> 
> > On Fri, Jan 8, 2021 at 12:25 PM Roger Bivand <Roger.Bivand at nhh.no> wrote:
> ...
> 
> >> The RFC mentions the preferences of commmitters; this is wrong-headed,
> >> because the actually useful feedback comes from those in R/Python/etc.
> >> who
> >> may be able to find regressions, but who will stop testing before release
> >> if building from the repo or from source in general gets harder. Then you
> >> risk making releases which cause havoc downstream, because you are making
> >> it harder for people like me to build from source.  What the committers
> >> prefer will decide this, but it isn't wise.
> >> 
> >> Roger
> > 
> > I can't speak for any other downstream projects or packagers, but the
> > Shapely project won't be terribly inconvenienced by a complete switch to
> > Cmake.
> 
> Sean: Thanks, this is useful.
> 
> Cmake proponents: apart from the reservations raised by packagers, why for
> me does rm -rf _build not lead to
> 
> mkdir _build && cd _build && cmake .. && make
> 
> taking the same time when repeated compare to the first time through?

Operating system level I/O caching maybe.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Roger.Bivand at nhh.no  Tue Jan 12 02:26:42 2021
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Tue, 12 Jan 2021 11:26:42 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <3559EDFB-21CB-4B20-BD77-57472438EA83@cleverelephant.ca>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
 <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
 <3559EDFB-21CB-4B20-BD77-57472438EA83@cleverelephant.ca>
Message-ID: <24544d20-cae-e3ad-9a4a-20efa7ae70f5@reclus.nhh.no>

On Tue, 12 Jan 2021, Paul Ramsey wrote:

>
>
>> On Jan 11, 2021, at 1:09 AM, Roger Bivand <Roger.Bivand at nhh.no> wrote:
>>
>> Cmake proponents: apart from the reservations raised by packagers, why for me does rm -rf _build not lead to
>>
>> mkdir _build && cd _build && cmake .. && make
>>
>> taking the same time when repeated compare to the first time through? What else do I need to delete to distclean the previous build? Is what I am seeing from searching correct, that cmake squirrels stuff away and does not offer any distclean to zero the build completely?
>>
>> How can one be sure that stale stuff is not hanging around when using cmake .. in an empty _build in the local git repo
>
> All build changes/output are confined to the build directory. You can put it in _build in the source dir. Or you can be even more isolated (this is what I do) and put it literally to the side of the source dir. I have
>
> $CODE/geos-git
> $CODE/geos-git-build
>
> in my working area.
>
> You can prove it to yourself:
>
> wget http://download.osgeo.org/geos/geos-3.9.0.tar.bz2
> tar xvfj geos-3.9.0.tar.bz2
> du -sk > ../before_sz.txt
> # 23368
> find . > ../before.txt
> mkdir _build
> cmake ..
> time make
> # 674.13s
> rm -rf _build
> du -sk > ../after_sz.txt
> # 23368
> find . > ../after.txt
> diff ../before ../after
> cat ../before_sz.txt ../after_sz.txt

wget http://download.osgeo.org/geos/geos-3.9.0.tar.bz2
tar xvfj geos-3.9.0.tar.bz2
du -sk > ../before_sz.txt
find . > ../before.txt
mkdir _build
cd _build
cmake ../geos-3.9.0
time make

# real	10m28.376s
# user	8m35.684s
# sys	0m51.954s

cd ..
rm -rf _build
du -sk > ../after_sz.txt
find . > ../after.txt
diff ../before.txt ../after.txt
cat ../before_sz.txt ../after_sz.txt
# 28640	.
# 28640	.

mkdir _build
cd _build
cmake ../geos-3.9.0
time make

# real	0m12.127s
# user	0m8.169s
# sys	0m3.701s

rm -rf _build

(log out and reboot system)

mkdir _build
cd _build
cmake ../geos-3.9.0
time make

# real	0m12.358s
# user	0m8.308s
# sys	0m3.393s

The ouput objects are being cached somewhere, and survive a reboot. They 
are not in the Gnome wastebasket either (rm doesn't put them there).

Roger

>
> Nothing is added to the source dir. The file list is identical before 
> and after. If you're building out-of-tree, the equivalent of 'make 
> distclean' is 'rm -rf $BUILDDIR`
>
> P.
>
>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From strk at kbt.io  Tue Jan 12 08:35:37 2021
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 12 Jan 2021 17:35:37 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <24544d20-cae-e3ad-9a4a-20efa7ae70f5@reclus.nhh.no>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
 <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
 <3559EDFB-21CB-4B20-BD77-57472438EA83@cleverelephant.ca>
 <24544d20-cae-e3ad-9a4a-20efa7ae70f5@reclus.nhh.no>
Message-ID: <20210112163537.GB32518@cdb>

On Tue, Jan 12, 2021 at 11:26:42AM +0100, Roger Bivand wrote:

> (log out and reboot system)
> 
> mkdir _build
> cd _build
> cmake ../geos-3.9.0
> time make
> 
> # real	0m12.358s
> # user	0m8.308s
> # sys	0m3.393s
> 
> The ouput objects are being cached somewhere, and survive a reboot. They are
> not in the Gnome wastebasket either (rm doesn't put them there).

Are you using ccache ?
Check out ~/.ccache 

--strk;

From Roger.Bivand at nhh.no  Tue Jan 12 12:16:40 2021
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Tue, 12 Jan 2021 21:16:40 +0100
Subject: [geos-devel] RFC7: Discontinue use of autotools
In-Reply-To: <20210112163537.GB32518@cdb>
References: <d13a4dc8-9d89-878b-88ea-53a999dbd084@reclus.nhh.no>
 <CAOodmJqqXKHMsKpENp+-tp4-qh1Nouc40bKrrcLdoKBudf7ikg@mail.gmail.com>
 <a7c9f1a1-3ebf-4b50-b99e-6534db6c708e@reclus.nhh.no>
 <3559EDFB-21CB-4B20-BD77-57472438EA83@cleverelephant.ca>
 <24544d20-cae-e3ad-9a4a-20efa7ae70f5@reclus.nhh.no>
 <20210112163537.GB32518@cdb>
Message-ID: <a85546b-92b4-72d0-ba7b-935ed7eb4b8@reclus.nhh.no>

On Tue, 12 Jan 2021, Sandro Santilli wrote:

> On Tue, Jan 12, 2021 at 11:26:42AM +0100, Roger Bivand wrote:
>
>> (log out and reboot system)
>>
>> mkdir _build
>> cd _build
>> cmake ../geos-3.9.0
>> time make
>>
>> # real	0m12.358s
>> # user	0m8.308s
>> # sys	0m3.393s
>>
>> The ouput objects are being cached somewhere, and survive a reboot. They are
>> not in the Gnome wastebasket either (rm doesn't put them there).
>
> Are you using ccache ?
> Check out ~/.ccache

Thanks! This is correct, but I didn't see it advertised:

tar xvfj geos-3.9.0.tar.bz2
mkdir _build
cd _build
rm -rf ~/.ccache
cmake ../geos-3.9.0
# -- Check for working C compiler: /usr/lib64/ccache/cc - skipped
# -- Check for working CXX compiler: /usr/lib64/ccache/c++ - skipped
du -sm ~/.ccache
# 1	/home/rsb/.ccache
CCACHE_DISABLE=1 time make
# 8:24.54
du -sm ~/.ccache
# 1     /home/rsb/.ccache
cd ..
rm -rf _build
mkdir _build
cd _build
cmake ../geos-3.9.0
CCACHE_DISABLE=1 time make
# 7:32.33
du -sm ~/.ccache
# 1     /home/rsb/.ccache

cmake itself is also ccaching, but

CCACHE_DISABLE=1 time cmake ../geos-3.9.0

stops it. I put CCACHE_DISABLE=1 in a start-up file to be on the safe 
side. Now, rm -rf _build does remove all traces of the build.

Roger


>
> --strk;
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From dbaston at gmail.com  Wed Jan 13 17:41:42 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 13 Jan 2021 20:41:42 -0500
Subject: [geos-devel] Motion: Adopt RFC-7 (Discontinue use of autotools)
Message-ID: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>

Hi,

I'd like to thank everyone who contributed to the recent discussion of
RFC-7 [1]. Considering the feedback received, and our early position in the
release cycle, I do not anticipate problems from removing autotools for our
next release.

+1

Dan

[1] https://lists.osgeo.org/pipermail/geos-devel/2021-January/010050.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210113/01d62b02/attachment.html>

From howard at hobu.co  Wed Jan 13 18:02:38 2021
From: howard at hobu.co (Howard Butler)
Date: Wed, 13 Jan 2021 20:02:38 -0600
Subject: [geos-devel] Motion: Adopt RFC-7 (Discontinue use of autotools)
In-Reply-To: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
References: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
Message-ID: <45CA27CB-AAC9-4CBD-A7EF-2C9F0CE8F4EB@hobu.co>



> On Jan 13, 2021, at 7:41 PM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> Hi,
> 
> I'd like to thank everyone who contributed to the recent discussion of RFC-7 [1]. Considering the feedback received, and our early position in the release cycle, I do not anticipate problems from removing autotools for our next release.
> 
> +1
> 
> Dan
> 
> [1] https://lists.osgeo.org/pipermail/geos-devel/2021-January/010050.html <https://lists.osgeo.org/pipermail/geos-devel/2021-January/010050.html>
+1

Howard

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210113/25c57a5a/attachment.html>

From mtnclimb at gmail.com  Wed Jan 13 18:29:52 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 13 Jan 2021 18:29:52 -0800
Subject: [geos-devel] Motion: Adopt RFC-7 (Discontinue use of autotools)
In-Reply-To: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
References: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
Message-ID: <CAK2ens2yWg-av6rZh-1gUyYtfb1OtaTpVOQEti+kfFGVGxPaMg@mail.gmail.com>

+1

On Wed., Jan. 13, 2021, 5:41 p.m. Daniel Baston, <dbaston at gmail.com> wrote:

> Hi,
>
> I'd like to thank everyone who contributed to the recent discussion of
> RFC-7 [1]. Considering the feedback received, and our early position in the
> release cycle, I do not anticipate problems from removing autotools for our
> next release.
>
> +1
>
> Dan
>
> [1] https://lists.osgeo.org/pipermail/geos-devel/2021-January/010050.html
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210113/ab8a30c0/attachment.html>

From geos-trac at osgeo.org  Thu Jan 14 09:11:56 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 14 Jan 2021 17:11:56 -0000
Subject: [geos-devel] [GEOS] #1092: Fixed-precision overlay methods fail if
 inputs are mixed dimensions
Message-ID: <044.5a20663a83ebe277aa95e9f8f0d48b08@osgeo.org>

#1092: Fixed-precision overlay methods fail if inputs are mixed dimensions
--------------------------+--------------------------
 Reporter:  Brendan Ward  |      Owner:  geos-devel@?
     Type:  defect        |     Status:  new
 Priority:  major         |  Milestone:  3.9.1
Component:  Default       |    Version:  master
 Severity:  Unassigned    |   Keywords:
--------------------------+--------------------------
 Using the fixed-precision overlay methods (GEOSIntersectionPrec,
 GEOSDifferencePrec, etc) via the C API results in an error:
 "IllegalArgumentException: Overlay input is mixed-dimension"

 Example WKT (just overlayed against itself):
 "GEOMETRYCOLLECTION (POINT (51 -1), LINESTRING (52 -1, 49 2))"



 This does not raise errors on the non fixed-precision overlay methods.

 Detected via tests in pygeos (https://github.com/pygeos/pygeos/pull/276).


 I think this was mentioned in a related issue on the mailing list: http
 ://osgeo-org.1560.x6.nabble.com/3-9-0beta1-GEOSwift-td5451132.html

 I think this is the related JTS issue:
 https://github.com/locationtech/jts/pull/648

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1092>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan 14 09:19:48 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 14 Jan 2021 17:19:48 -0000
Subject: [geos-devel] [GEOS] #1092: Fixed-precision overlay methods fail
 if inputs are mixed dimensions
In-Reply-To: <044.5a20663a83ebe277aa95e9f8f0d48b08@osgeo.org>
References: <044.5a20663a83ebe277aa95e9f8f0d48b08@osgeo.org>
Message-ID: <059.326d1877071c16e5dd83323637e71331@osgeo.org>

#1092: Fixed-precision overlay methods fail if inputs are mixed dimensions
--------------------------+---------------------------
 Reporter:  Brendan Ward  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  major         |   Milestone:  3.9.1
Component:  Default       |     Version:  master
 Severity:  Unassigned    |  Resolution:
 Keywords:                |
--------------------------+---------------------------

Comment (by mdavis):

 This is expected behaviour.  As the error states, overlay does not handle
 arguments of mixed dimension.  The input on this ticket obviously fails
 this criteria.

 This semantic is not new with OverlayNG - it has always been present in
 GEOS overlay.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1092#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jan 14 10:21:43 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 14 Jan 2021 18:21:43 -0000
Subject: [geos-devel] [GEOS] #1092: Fixed-precision overlay methods fail
 if inputs are mixed dimensions
In-Reply-To: <044.5a20663a83ebe277aa95e9f8f0d48b08@osgeo.org>
References: <044.5a20663a83ebe277aa95e9f8f0d48b08@osgeo.org>
Message-ID: <059.b5ae74389b8dff81600bfd39e68a8463@osgeo.org>

#1092: Fixed-precision overlay methods fail if inputs are mixed dimensions
--------------------------+---------------------------
 Reporter:  Brendan Ward  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  major         |   Milestone:  3.9.1
Component:  Default       |     Version:  master
 Severity:  Unassigned    |  Resolution:
 Keywords:                |
--------------------------+---------------------------

Comment (by Brendan Ward):

 Perhaps there is additional validation in the fixed-precision methods?

 GEOSIntersection returns the input geometry when that is intersected with
 itself, without raising an error.



 I see that the OverlayNG methods specifically check for this case:
 https://github.com/libgeos/geos/blob/3.9/src/operation/overlayng/EdgeNodingBuilder.cpp#L194-L196

 I wasn't able to easily find the counterpart for geometry collections in
 the original overlay implementation.


 Not arguing that this should work for mixed dimensions, only that the
 behavior is different between the fixed and original operations, in case
 it identifies a potential bug.  In this case, it seems like OverlayNG is a
 bit more strict, which is probably a good thing.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1092#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Thu Jan 14 14:05:44 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 14 Jan 2021 14:05:44 -0800
Subject: [geos-devel] Motion: Adopt RFC-7 (Discontinue use of autotools)
In-Reply-To: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
References: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
Message-ID: <6A7853FA-7EAC-4AA1-BE93-3B338819A869@cleverelephant.ca>

+1

We should remember to drop an early alpha1 so any nits in packaging can be ironed out early.

P

> On Jan 13, 2021, at 5:41 PM, Daniel Baston <dbaston at gmail.com> wrote:
> 
> Hi,
> 
> I'd like to thank everyone who contributed to the recent discussion of RFC-7 [1]. Considering the feedback received, and our early position in the release cycle, I do not anticipate problems from removing autotools for our next release.
> 
> +1
> 
> Dan
> 
> [1] https://lists.osgeo.org/pipermail/geos-devel/2021-January/010050.html
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From strk at kbt.io  Fri Jan 15 10:32:48 2021
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 15 Jan 2021 19:32:48 +0100
Subject: [geos-devel] Motion: Adopt RFC-7 (Discontinue use of autotools)
In-Reply-To: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
References: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
Message-ID: <20210115183248.GA30531@cdb>

On Wed, Jan 13, 2021 at 08:41:42PM -0500, Daniel Baston wrote:
> Hi,
> 
> I'd like to thank everyone who contributed to the recent discussion of
> RFC-7 [1]. Considering the feedback received, and our early position in the
> release cycle, I do not anticipate problems from removing autotools for our
> next release.
> 
> +1

-0

--strk;

From dbaston at gmail.com  Fri Jan 15 19:58:20 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 15 Jan 2021 22:58:20 -0500
Subject: [geos-devel] Motion: Adopt RFC-7 (Discontinue use of autotools)
In-Reply-To: <20210115183248.GA30531@cdb>
References: <CA+K_q_rCrnw6ZNx73m0KXue4mv=BzZ20w2tRXgxecvO+WC751Q@mail.gmail.com>
 <20210115183248.GA30531@cdb>
Message-ID: <CA+K_q_pgSBYb805SRHWnnQ6R1+_NVNd9frvHhawfEwK+sKvxpA@mail.gmail.com>

Looks like the motion has passed. I will proceed with removing the
autotools configuration. It is a single commit so it can be easily brought
back if needed.

Dan

On Fri, Jan 15, 2021 at 1:32 PM Sandro Santilli <strk at kbt.io> wrote:

> On Wed, Jan 13, 2021 at 08:41:42PM -0500, Daniel Baston wrote:
> > Hi,
> >
> > I'd like to thank everyone who contributed to the recent discussion of
> > RFC-7 [1]. Considering the feedback received, and our early position in
> the
> > release cycle, I do not anticipate problems from removing autotools for
> our
> > next release.
> >
> > +1
>
> -0
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210115/2d3be20e/attachment.html>

From strk at kbt.io  Sat Jan 16 13:23:53 2021
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 16 Jan 2021 22:23:53 +0100
Subject: [geos-devel] [geos-commits] [SCM] GEOS branch master updated.
 dae18d6c6555b4b129ec053af3a50f7045fd5413
In-Reply-To: <20210116035910.5F76214CD03@trac.osgeo.org>
References: <20210116035910.5F76214CD03@trac.osgeo.org>
Message-ID: <20210116212353.GB17136@cdb>

On Fri, Jan 15, 2021 at 07:59:09PM -0800, git at osgeo.org wrote:

> commit dae18d6c6555b4b129ec053af3a50f7045fd5413
> Author: Daniel Baston <dbaston at gmail.com>
> Date:   Fri Jan 15 21:09:03 2021 -0500
> 
>     [CMake] Disable issue-geos-837 test on 32-bit builds
> 
> diff --git a/tests/xmltester/CMakeLists.txt b/tests/xmltester/CMakeLists.txt

Could we do this in a build-script agnostic way ?
Maybe just using a "disabled/" directory, or a file prefix ?

--strk;

From dbaston at gmail.com  Sat Jan 16 16:12:54 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Sat, 16 Jan 2021 19:12:54 -0500
Subject: [geos-devel] [geos-commits] [SCM] GEOS branch master updated.
 dae18d6c6555b4b129ec053af3a50f7045fd5413
In-Reply-To: <20210116212353.GB17136@cdb>
References: <20210116035910.5F76214CD03@trac.osgeo.org>
 <20210116212353.GB17136@cdb>
Message-ID: <CA+K_q_qNq-_=WHVEtHsgRQRBph-2x+3w-wh5TrRnXC5OBd+0mg@mail.gmail.com>

> Could we do this in a build-script agnostic way ?
> Maybe just using a "disabled/" directory, or a file prefix ?
>

That seemed more confusing, especially since we DO want the test to run on
64-bit architectures.

A nice thing about handling it this way is that the test output clearly
shows that a test was skipped:

https://github.com/libgeos/geos/runs/1712540628?check_suite_focus=true#step:4:3589

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210116/98a25186/attachment.html>

From geos-trac at osgeo.org  Sun Jan 17 08:47:44 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 17 Jan 2021 16:47:44 -0000
Subject: [geos-devel] [GEOS] #1033: Add berrie64 to jenkins bot chain
In-Reply-To: <042.4a0abd209a712c82e1bb06dcb8e06e0c@osgeo.org>
References: <042.4a0abd209a712c82e1bb06dcb8e06e0c@osgeo.org>
Message-ID: <057.dae6d4ef0b280543ae38a387975de28a@osgeo.org>

#1033: Add berrie64 to jenkins bot chain
-------------------------+---------------------------
 Reporter:  robe         |       Owner:  geos-devel@?
     Type:  enhancement  |      Status:  closed
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.6.2
 Severity:  Unassigned   |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by robe):

 * status:  new => closed
 * resolution:   => fixed
 * milestone:  3.8.2 => 3.9.0


Comment:

 I'm going to close this one out as I don't think it's worthwhile to add to
 3.8 chain.  It is in 3.9 and master branch.

 Also have berrie (32-bit raspberry pi) on those branches which is
 currently having issues

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1033#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Jan 17 08:50:46 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 17 Jan 2021 16:50:46 -0000
Subject: [geos-devel] [GEOS] #1094: CMake issue with berrie32 (raspberry pi)
Message-ID: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>

#1094: CMake issue with berrie32 (raspberry pi)
------------------------+--------------------------
 Reporter:  robe        |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  minor       |  Milestone:  3.9.1
Component:  Default     |    Version:  3.9.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 I recently switched from autotools to cmake build on the berrie bots. I
 don't think this is a new issue as it was failing in autotools as well as
 I recall.

 The 64-bit chain is running fine under cmake (was broken in autotools),
 but 32-bit chain is having issues.

 32-bit chain error is below:

 Since there are way fewer 32-bit os now than in past, I consider this a
 minor issue.


 {{{
 23:11:24 [ 57%] Building CXX object
 CMakeFiles/geos.dir/src/triangulate/quadedge/QuadEdgeSubdivision.cpp.o
 23:11:27 In file included from /usr/include/c++/8/vector:69,
 23:11:27                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/include/geos/triangulate/quadedge/QuadEdgeSubdivision.h:27,
 23:11:27                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/triangulate/quadedge/QuadEdgeSubdivision.cpp:19:
 23:11:27 /usr/include/c++/8/bits/vector.tcc: In member function ?void
 std::vector<_Tp, _Alloc>::_M_realloc_insert(std::vector<_Tp,
 _Alloc>::iterator, _Args&& ...) [with _Args = {const
 geos::geom::Coordinate&}; _Tp = geos::geom::Coordinate; _Alloc =
 std::allocator<geos::geom::Coordinate>]?:
 23:11:27 /usr/include/c++/8/bits/vector.tcc:413:7: note: parameter passing
 for argument of type ?std::vector<geos::geom::Coordinate>::iterator? {aka
 ?__gnu_cxx::__normal_iterator<geos::geom::Coordinate*,
 std::vector<geos::geom::Coordinate> >?} changed in GCC 7.1
 23:11:27        vector<_Tp, _Alloc>::
 23:11:27        ^~~~~~~~~~~~~~~~~~~
 23:11:27 In file included from /usr/include/c++/8/vector:64,
 23:11:27                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/include/geos/triangulate/quadedge/QuadEdgeSubdivision.h:27,
 23:11:27                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/triangulate/quadedge/QuadEdgeSubdivision.cpp:19:
 23:11:27 /usr/include/c++/8/bits/stl_vector.h: In member function
 ?std::unique_ptr<geos::geom::Geometry>
 geos::triangulate::quadedge::QuadEdgeSubdivision::getVoronoiCellEdge(const
 geos::triangulate::quadedge::QuadEdge*, const
 geos::geom::GeometryFactory&)?:
 23:11:27 /usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter
 passing for argument of type
 ?__gnu_cxx::__normal_iterator<geos::geom::Coordinate*,
 std::vector<geos::geom::Coordinate> >? changed in GCC 7.1
 23:11:27     _M_realloc_insert(end(), __x);
 23:11:27     ^~~~~~~~~~~~~~~~~
 23:11:27 /usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter
 passing for argument of type
 ?__gnu_cxx::__normal_iterator<geos::geom::Coordinate*,
 std::vector<geos::geom::Coordinate> >? changed in GCC 7.1
 23:11:27     _M_realloc_insert(end(), __x);
 23:11:27     ^~~~~~~~~~~~~~~~~
 23:11:28 /usr/include/c++/8/bits/stl_vector.h: In member function
 ?std::unique_ptr<geos::geom::Geometry>
 geos::triangulate::quadedge::QuadEdgeSubdivision::getVoronoiCellPolygon(const
 geos::triangulate::quadedge::QuadEdge*, const
 geos::geom::GeometryFactory&)?:
 23:11:28 /usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter
 passing for argument of type
 ?__gnu_cxx::__normal_iterator<geos::geom::Coordinate*,
 std::vector<geos::geom::Coordinate> >? changed in GCC 7.1
 23:11:28     _M_realloc_insert(end(), __x);
 23:11:28     ^~~~~~~~~~~~~~~~~
 23:11:28 /usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter
 passing for argument of type
 ?__gnu_cxx::__normal_iterator<geos::geom::Coordinate*,
 std::vector<geos::geom::Coordinate> >? changed in GCC 7.1
 23:11:28     _M_realloc_insert(end(), __x);
 23:11:28     ^~~~~~~~~~~~~~~~~
 23:11:28 /usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter
 passing for argument of type
 ?__gnu_cxx::__normal_iterator<geos::geom::Coordinate*,
 std::vector<geos::geom::Coordinate> >? changed in GCC 7.1
 23:11:28     _M_realloc_insert(end(), __x);
 23:11:28     ^~~~~~~~~~~~~~~~~
 23:11:29 [ 57%] Building CXX object
 CMakeFiles/geos.dir/src/triangulate/quadedge/TrianglePredicate.cpp.o
 23:11:29 [ 57%] Building CXX object
 CMakeFiles/geos.dir/src/triangulate/quadedge/Vertex.cpp.o
 23:11:31 [ 57%] Building CXX object
 CMakeFiles/geos.dir/src/util/Assert.cpp.o
 23:11:32 [ 57%] Building CXX object
 CMakeFiles/geos.dir/src/util/GeometricShapeFactory.cpp.o
 23:11:35 [ 58%] Building CXX object
 CMakeFiles/geos.dir/src/util/Interrupt.cpp.o
 23:11:35 [ 58%] Building CXX object
 CMakeFiles/geos.dir/src/util/Profiler.cpp.o
 23:11:37 In file included from /usr/include/c++/8/vector:69,
 23:11:37                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/include/geos/profiler.h:25,
 23:11:37                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/util/Profiler.cpp:15:
 23:11:37 /usr/include/c++/8/bits/vector.tcc: In member function ?void
 std::vector<_Tp, _Alloc>::_M_realloc_insert(std::vector<_Tp,
 _Alloc>::iterator, _Args&& ...) [with _Args = {const
 std::chrono::duration<long long int, std::ratio<1, 1000000> >&}; _Tp =
 std::chrono::duration<long long int, std::ratio<1, 1000000> >; _Alloc =
 std::allocator<std::chrono::duration<long long int, std::ratio<1, 1000000>
 > >]?:
 23:11:37 /usr/include/c++/8/bits/vector.tcc:413:7: note: parameter passing
 for argument of type ?std::vector<std::chrono::duration<long long int,
 std::ratio<1, 1000000> > >::iterator? {aka
 ?__gnu_cxx::__normal_iterator<std::chrono::duration<long long int,
 std::ratio<1, 1000000> >*, std::vector<std::chrono::duration<long long
 int, std::ratio<1, 1000000> > > >?} changed in GCC 7.1
 23:11:37        vector<_Tp, _Alloc>::
 23:11:37        ^~~~~~~~~~~~~~~~~~~
 23:11:37 In file included from /usr/include/c++/8/vector:64,
 23:11:37                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/include/geos/profiler.h:25,
 23:11:37                  from
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/util/Profiler.cpp:15:
 23:11:37 /usr/include/c++/8/bits/stl_vector.h: In member function ?void
 geos::util::Profiler::stop(std::__cxx11::string)?:
 23:11:37 /usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter
 passing for argument of type
 ?__gnu_cxx::__normal_iterator<std::chrono::duration<long long int,
 std::ratio<1, 1000000> >*, std::vector<std::chrono::duration<long long
 int, std::ratio<1, 1000000> > > >? changed in GCC 7.1
 23:11:37     _M_realloc_insert(end(), __x);
 23:11:37     ^~~~~~~~~~~~~~~~~
 23:11:37 [ 58%] Building CXX object
 CMakeFiles/geos.dir/src/util/math.cpp.o
 23:11:38 [ 58%] Building C object CMakeFiles/geos.dir/src/deps/ryu/d2s.c.o
 23:11:38 cc1: warning: command line option ?-fno-implicit-inline-
 templates? is valid for C++/ObjC++ but not for C
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:
 In function ?to_chars_uint64?:
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:534:9:
 warning: conversion to ?int? from ?uint32_t? {aka ?unsigned int?} may
 change the sign of the result [-Wsign-conversion]
 23:11:38   return i;
 23:11:38          ^
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:
 In function ?to_chars_fixed?:
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:553:28:
 warning: conversion to ?uint32_t? {aka ?unsigned int?} from ?int32_t? {aka
 ?int?} may change the sign of the result [-Wsign-conversion]
 23:11:38    trailing_integer_zeros = exp;
 23:11:38                             ^~~
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:561:34:
 warning: conversion to ?uint32_t? {aka ?unsigned int?} from ?int32_t? {aka
 ?int?} may change the sign of the result [-Wsign-conversion]
 23:11:38     int32_t digits_to_trim = -exp - precision;
 23:11:38                                   ^
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:561:29:
 warning: conversion to ?int32_t? {aka ?int?} from ?uint32_t? {aka
 ?unsigned int?} may change the sign of the result [-Wsign-conversion]
 23:11:38     int32_t digits_to_trim = -exp - precision;
 23:11:38                              ^
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:584:14:
 warning: conversion to ?uint32_t? {aka ?unsigned int?} from ?int32_t? {aka
 ?int?} may change the sign of the result [-Wsign-conversion]
 23:11:38       olength -= digits_to_trim;
 23:11:38               ^~
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:601:29:
 warning: conversion to ?uint32_t? {aka ?unsigned int?} from ?int32_t? {aka
 ?int?} may change the sign of the result [-Wsign-conversion]
 23:11:38     trailing_integer_zeros = exp;
 23:11:38                              ^~~
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:609:34:
 warning: conversion to ?uint32_t? {aka ?unsigned int?} from ?int32_t? {aka
 ?int?} may change the sign of the result [-Wsign-conversion]
 23:11:38     integer_part_length = olength - nexp;
 23:11:38                                   ^
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:611:50:
 warning: conversion to ?int32_t? {aka ?const int?} from ?uint32_t? {aka
 ?unsigned int?} may change the sign of the result [-Wsign-conversion]
 23:11:38     if (decimal_part < pow_10(decimal_part_length - 1))
 23:11:38                               ~~~~~~~~~~~~~~~~~~~~^~~
 23:11:38
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/src/deps/ryu/d2s.c:623:33:
 warning: conversion to ?uint32_t? {aka ?unsigned int?} from ?int32_t? {aka
 ?int?} may change the sign of the result [-Wsign-conversion]
 23:11:38     leading_decimal_zeros = nexp - olength;
 23:11:38                                  ^
 23:11:40 [ 58%] Linking CXX shared library lib/libgeos.so
 23:11:41 /usr/bin/ld:
 CMakeFiles/geos.dir/src/noding/BasicSegmentString.cpp.o:(.rodata+0x0):
 multiple definition of `typeinfo name for
 geos::noding::BasicSegmentString';
 CMakeFiles/geos.dir/src/inlines.cpp.o:(.rodata+0x50): first defined here
 23:11:41 /usr/bin/ld:
 CMakeFiles/geos.dir/src/noding/BasicSegmentString.cpp.o:(.data.rel.ro+0x0):
 multiple definition of `typeinfo for geos::noding::BasicSegmentString';
 CMakeFiles/geos.dir/src/inlines.cpp.o:(.data.rel.ro+0x18): first defined
 here
 23:11:41 /usr/bin/ld:
 CMakeFiles/geos.dir/src/noding/BasicSegmentString.cpp.o:(.data.rel.ro+0xc):
 multiple definition of `vtable for geos::noding::BasicSegmentString';
 CMakeFiles/geos.dir/src/inlines.cpp.o:(.data.rel.ro+0xa0): first defined
 here
 23:11:41 /usr/bin/ld:
 CMakeFiles/geos.dir/src/noding/MCIndexNoder.cpp.o:(.data.rel.ro+0x30):
 multiple definition of `vtable for geos::noding::MCIndexNoder';
 CMakeFiles/geos.dir/src/inlines.cpp.o:(.data.rel.ro+0xc4): first defined
 here
 23:11:41 /usr/bin/ld:
 CMakeFiles/geos.dir/src/noding/MCIndexNoder.cpp.o:(.rodata+0x34): multiple
 definition of `typeinfo name for geos::noding::MCIndexNoder';
 CMakeFiles/geos.dir/src/inlines.cpp.o:(.rodata+0x74): first defined here
 23:11:41 /usr/bin/ld:
 CMakeFiles/geos.dir/src/noding/MCIndexNoder.cpp.o:(.data.rel.ro+0xc):
 multiple definition of `typeinfo for geos::noding::MCIndexNoder';
 CMakeFiles/geos.dir/src/inlines.cpp.o:(.data.rel.ro+0x24): first defined
 here
 23:11:41 collect2: error: ld returned 1 exit status
 23:11:41 make[2]: *** [CMakeFiles/geos.dir/build.make:5379:
 lib/libgeos.so.3.10.0dev] Error 1
 23:11:41 make[1]: *** [CMakeFiles/Makefile2:585: CMakeFiles/geos.dir/all]
 Error 2
 23:11:41 make: *** [Makefile:163: all] Error 2
 23:11:41 Test project
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/build
 23:11:41         Start   1: unit-algorithm-Angle
 23:11:41 Could not find executable
 /home/jenkins/workspace/GEOS_Worker_Run/label/berrie/dae18d6c6555b4b129ec053af3a50f7045fd5413/build/bin/test_geos_unit
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1094>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Jan 17 08:52:30 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 17 Jan 2021 16:52:30 -0000
Subject: [geos-devel] [GEOS] #1094: CMake issue with berrie32 (raspberry
 pi)
In-Reply-To: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
References: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
Message-ID: <057.557f6a5e3dec61fc93a3ffc42d85519e@osgeo.org>

#1094: CMake issue with berrie32 (raspberry pi)
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.1
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by robe):

 oops forgot to put the link

 https://debbie.postgis.net/job/GEOS_Worker_Run/

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1094#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jan 18 17:32:49 2021
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 19 Jan 2021 01:32:49 -0000
Subject: [geos-devel] [GEOS] #1095: WKTReader ignores extra characters after
 end of geometry
Message-ID: <045.06a1bfbbd5fc13e7b230cd99e2d5b6e0@osgeo.org>

#1095: WKTReader ignores extra characters after end of geometry
------------------------+--------------------------
 Reporter:  dbaston     |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.9.1
Component:  Default     |    Version:  3.9.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 This allows a typo like

 GEOMETRYCOLLECTION(POINT (0 1)), POINT (1 1)

 To be read without error as

 GEOMETRYCOLLECTION(POINT (0 1))

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1095>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Jan 19 17:33:12 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 20 Jan 2021 01:33:12 -0000
Subject: [geos-devel] [GEOS] #1094: CMake issue with berrie (32-bit
 raspberry pi) (was: CMake issue with berrie32 (raspberry pi))
In-Reply-To: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
References: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
Message-ID: <057.9393628fba11a3d050b347a2a7f5b78c@osgeo.org>

#1094: CMake issue with berrie (32-bit raspberry pi)
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.1
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1094#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Jan 19 17:43:59 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 20 Jan 2021 01:43:59 -0000
Subject: [geos-devel] [GEOS] #1094: CMake issue with berrie (32-bit
 raspberry pi)
In-Reply-To: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
References: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
Message-ID: <057.8231afab9e12539fc46f273003c8dd10@osgeo.org>

#1094: CMake issue with berrie (32-bit raspberry pi)
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.1
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 Looks like the same problem we have on every platform where inlines.cpp
 isn't #ifdef'd-out. If nobody knows why we have that file, maybe we can
 remove it?

 See
 https://github.com/libgeos/geos/issues/288
 https://github.com/libgeos/geos/issues/353
 and possibly others

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1094#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Jan 23 13:39:40 2021
From: geos-trac at osgeo.org (GEOS)
Date: Sat, 23 Jan 2021 21:39:40 -0000
Subject: [geos-devel] [GEOS] #1094: CMake issue with berrie (32-bit
 raspberry pi)
In-Reply-To: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
References: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
Message-ID: <057.42bacae2bed6124c6648ad622b082776@osgeo.org>

#1094: CMake issue with berrie (32-bit raspberry pi)
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.1
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by bowguy):

 Fyi
 Using make instead of CMake gives the same error

 /usr/bin/ld: noding/.libs/libnoding.a(BasicSegmentString.o):(.rodata+0x0):
 multiple definition of `typeinfo name for
 geos::noding::BasicSegmentString'; .libs/inlines.o:(.rodata+0x6f0): first
 defined here
 /usr/bin/ld:
 noding/.libs/libnoding.a(BasicSegmentString.o):(.data.rel.ro+0x0):
 multiple definition of `typeinfo for geos::noding::BasicSegmentString';
 .libs/inlines.o:(.data.rel.ro+0x18): first defined here
 /usr/bin/ld:
 noding/.libs/libnoding.a(BasicSegmentString.o):(.data.rel.ro+0xc):
 multiple definition of `vtable for geos::noding::BasicSegmentString';
 .libs/inlines.o:(.data.rel.ro+0x94): first defined here

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1094#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jan 25 19:26:59 2021
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 26 Jan 2021 03:26:59 -0000
Subject: [geos-devel] [GEOS] #1097: Dropped holes when buffer(0) -ing a
 valid geometry
Message-ID: <050.1e39fd5fe0c7ad473cef493b071d3d01@osgeo.org>

#1097: Dropped holes when buffer(0) -ing a valid geometry
--------------------------+--------------------------
 Reporter:  astronomiser  |      Owner:  geos-devel@?
     Type:  defect        |     Status:  new
 Priority:  minor         |  Milestone:
Component:  Default       |    Version:  3.8.1
 Severity:  Unassigned    |   Keywords:  buffer
--------------------------+--------------------------
 Passing along this bug report from
 [https://github.com/Toblerity/Shapely/issues/1069 the Shapely github].

 [https://github.com/Toblerity/Shapely/files/5845907/shape.txt The WKT in a
 text file]

 Running buffer(0) leaves the geometry mostly unchanged but there is a
 group of holes which are removed in the lower right of the geometry.

 I was able to replicate this behavior in PostGIS (w/ GEOS 3.5). The user
 is using Shapely with GEOS 3.8.1. Buffering the geometry in JTS did not
 produce the same effect.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1097>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Jan 25 20:20:47 2021
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 26 Jan 2021 04:20:47 -0000
Subject: [geos-devel] [GEOS] #1097: Dropped holes when buffer(0) -ing a
 valid geometry
In-Reply-To: <050.1e39fd5fe0c7ad473cef493b071d3d01@osgeo.org>
References: <050.1e39fd5fe0c7ad473cef493b071d3d01@osgeo.org>
Message-ID: <065.1cfeb0b1ed65c9b72fa1616facfc3e8c@osgeo.org>

#1097: Dropped holes when buffer(0) -ing a valid geometry
--------------------------+---------------------------
 Reporter:  astronomiser  |       Owner:  geos-devel@?
     Type:  defect        |      Status:  new
 Priority:  minor         |   Milestone:
Component:  Default       |     Version:  3.8.1
 Severity:  Unassigned    |  Resolution:
 Keywords:  buffer        |
--------------------------+---------------------------

Comment (by mdavis):

 Confirmed that this still happens in the GEOS main branch (3.10dev).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1097#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Wed Jan 27 12:25:02 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 27 Jan 2021 12:25:02 -0800
Subject: [geos-devel] Fwd: [GEOSwift/GEOSwift] Invalid Intersection result
 after upgrading to GeoSwift 7.0.0+ (#212)
References: <GEOSwift/GEOSwift/issues/212/768552287@github.com>
Message-ID: <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>

How do we feel about porting this back into 3.9?

https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b <https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b>

It's not *tiny* but it's also not huge.

P.

> Begin forwarded message:
> 
> From: Martin Davis <notifications at github.com>
> Subject: Re: [GEOSwift/GEOSwift] Invalid Intersection result after upgrading to GeoSwift 7.0.0+ (#212)
> Date: January 27, 2021 at 12:21:39 PM PST
> To: GEOSwift/GEOSwift <GEOSwift at noreply.github.com>
> Cc: Paul Ramsey <pramsey at cleverelephant.ca>, Comment <comment at noreply.github.com>
> Reply-To: GEOSwift/GEOSwift <reply+AAA3ZW7WENDZHBS2KY3DI5V6DWWFHEVBNHHC45GY3U at reply.github.com>
> 
> 
> No timeline for next GEOS release at the moment.
> 
> ?
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub <https://github.com/GEOSwift/GEOSwift/issues/212#issuecomment-768552287>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAA3ZWY2H57NID3Y43SEJYLS4BYVHANCNFSM4VV5O7DQ>.
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210127/0b32a2d7/attachment.html>

From mtnclimb at gmail.com  Wed Jan 27 12:46:19 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 27 Jan 2021 12:46:19 -0800
Subject: [geos-devel] Fwd: [GEOSwift/GEOSwift] Invalid Intersection
 result after upgrading to GeoSwift 7.0.0+ (#212)
In-Reply-To: <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
References: <GEOSwift/GEOSwift/issues/212/768552287@github.com>
 <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
Message-ID: <CAK2ens0fRYDtEcP3wW_Sv3RUNvD7xK_VWtx74PFLOgzYB8TWiQ@mail.gmail.com>

I see no problem with back-porting to 3.9.

On Wed, Jan 27, 2021 at 12:25 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> How do we feel about porting this back into 3.9?
>
>
> https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b
>
> It's not *tiny* but it's also not huge.
>
> P.
>
> Begin forwarded message:
>
> *From: *Martin Davis <notifications at github.com>
> *Subject: **Re: [GEOSwift/GEOSwift] Invalid Intersection result after
> upgrading to GeoSwift 7.0.0+ (#212)*
> *Date: *January 27, 2021 at 12:21:39 PM PST
> *To: *GEOSwift/GEOSwift <GEOSwift at noreply.github.com>
> *Cc: *Paul Ramsey <pramsey at cleverelephant.ca>, Comment <
> comment at noreply.github.com>
> *Reply-To: *GEOSwift/GEOSwift <
> reply+AAA3ZW7WENDZHBS2KY3DI5V6DWWFHEVBNHHC45GY3U at reply.github.com>
>
>
> No timeline for next GEOS release at the moment.
>
> ?
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/GEOSwift/GEOSwift/issues/212#issuecomment-768552287>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAA3ZWY2H57NID3Y43SEJYLS4BYVHANCNFSM4VV5O7DQ>
> .
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210127/0c103fd9/attachment.html>

From mtnclimb at gmail.com  Wed Jan 27 12:47:28 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 27 Jan 2021 12:47:28 -0800
Subject: [geos-devel] Fwd: [GEOSwift/GEOSwift] Invalid Intersection
 result after upgrading to GeoSwift 7.0.0+ (#212)
In-Reply-To: <CAK2ens0fRYDtEcP3wW_Sv3RUNvD7xK_VWtx74PFLOgzYB8TWiQ@mail.gmail.com>
References: <GEOSwift/GEOSwift/issues/212/768552287@github.com>
 <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
 <CAK2ens0fRYDtEcP3wW_Sv3RUNvD7xK_VWtx74PFLOgzYB8TWiQ@mail.gmail.com>
Message-ID: <CAK2ens1dM=Y_FsxhJpm9rnjLtsCv+Zt_K_-Q9JRY72BAbXBTVA@mail.gmail.com>

The actual code change is quite small.  Most of the code is fixing up the
test suite to accommodate it!

On Wed, Jan 27, 2021 at 12:46 PM Martin Davis <mtnclimb at gmail.com> wrote:

> I see no problem with back-porting to 3.9.
>
> On Wed, Jan 27, 2021 at 12:25 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>> How do we feel about porting this back into 3.9?
>>
>>
>> https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b
>>
>> It's not *tiny* but it's also not huge.
>>
>> P.
>>
>> Begin forwarded message:
>>
>> *From: *Martin Davis <notifications at github.com>
>> *Subject: **Re: [GEOSwift/GEOSwift] Invalid Intersection result after
>> upgrading to GeoSwift 7.0.0+ (#212)*
>> *Date: *January 27, 2021 at 12:21:39 PM PST
>> *To: *GEOSwift/GEOSwift <GEOSwift at noreply.github.com>
>> *Cc: *Paul Ramsey <pramsey at cleverelephant.ca>, Comment <
>> comment at noreply.github.com>
>> *Reply-To: *GEOSwift/GEOSwift <
>> reply+AAA3ZW7WENDZHBS2KY3DI5V6DWWFHEVBNHHC45GY3U at reply.github.com>
>>
>>
>> No timeline for next GEOS release at the moment.
>>
>> ?
>> You are receiving this because you commented.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/GEOSwift/GEOSwift/issues/212#issuecomment-768552287>,
>> or unsubscribe
>> <https://github.com/notifications/unsubscribe-auth/AAA3ZWY2H57NID3Y43SEJYLS4BYVHANCNFSM4VV5O7DQ>
>> .
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210127/88553192/attachment.html>

From pramsey at cleverelephant.ca  Wed Jan 27 12:46:58 2021
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 27 Jan 2021 12:46:58 -0800
Subject: [geos-devel] [GEOSwift/GEOSwift] Invalid Intersection result
 after upgrading to GeoSwift 7.0.0+ (#212)
In-Reply-To: <CAK2ens1dM=Y_FsxhJpm9rnjLtsCv+Zt_K_-Q9JRY72BAbXBTVA@mail.gmail.com>
References: <GEOSwift/GEOSwift/issues/212/768552287@github.com>
 <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
 <CAK2ens0fRYDtEcP3wW_Sv3RUNvD7xK_VWtx74PFLOgzYB8TWiQ@mail.gmail.com>
 <CAK2ens1dM=Y_FsxhJpm9rnjLtsCv+Zt_K_-Q9JRY72BAbXBTVA@mail.gmail.com>
Message-ID: <FBE8F602-0BA4-47B8-9A19-44BD3D718768@cleverelephant.ca>

It cherry-picks cleanly, so an easy back-port.
P

> On Jan 27, 2021, at 12:47 PM, Martin Davis <mtnclimb at gmail.com> wrote:
> 
> The actual code change is quite small.  Most of the code is fixing up the test suite to accommodate it!
> 
> On Wed, Jan 27, 2021 at 12:46 PM Martin Davis <mtnclimb at gmail.com> wrote:
> I see no problem with back-porting to 3.9.
> 
> On Wed, Jan 27, 2021 at 12:25 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> How do we feel about porting this back into 3.9?
> 
> https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b
> 
> It's not *tiny* but it's also not huge.
> 
> P.
> 
>> Begin forwarded message:
>> 
>> From: Martin Davis <notifications at github.com>
>> Subject: Re: [GEOSwift/GEOSwift] Invalid Intersection result after upgrading to GeoSwift 7.0.0+ (#212)
>> Date: January 27, 2021 at 12:21:39 PM PST
>> To: GEOSwift/GEOSwift <GEOSwift at noreply.github.com>
>> Cc: Paul Ramsey <pramsey at cleverelephant.ca>, Comment <comment at noreply.github.com>
>> Reply-To: GEOSwift/GEOSwift <reply+AAA3ZW7WENDZHBS2KY3DI5V6DWWFHEVBNHHC45GY3U at reply.github.com>
>> 
>> 
>> No timeline for next GEOS release at the moment.
>> 
>> ?
>> You are receiving this because you commented.
>> Reply to this email directly, view it on GitHub, or unsubscribe.
>> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From geos-trac at osgeo.org  Wed Jan 27 14:54:07 2021
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 27 Jan 2021 22:54:07 -0000
Subject: [geos-devel] [GEOS] #1094: CMake issue with berrie (32-bit
 raspberry pi)
In-Reply-To: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
References: <042.330e7a43aced8e318eccfb4131087967@osgeo.org>
Message-ID: <057.08ad7a392b2fe118c82956131d3cdb3c@osgeo.org>

#1094: CMake issue with berrie (32-bit raspberry pi)
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@?
     Type:  defect      |      Status:  new
 Priority:  minor       |   Milestone:  3.9.1
Component:  Default     |     Version:  3.9.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by Dave Allured):

 It looks like **arm64** has the same issue.  Linker gets the same
 duplicate symbols for **BasicSegmentString**.  See Trac #1090.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1094#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From dbaston at gmail.com  Wed Jan 27 16:03:38 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Wed, 27 Jan 2021 19:03:38 -0500
Subject: [geos-devel] Fwd: [GEOSwift/GEOSwift] Invalid Intersection
 result after upgrading to GeoSwift 7.0.0+ (#212)
In-Reply-To: <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
References: <GEOSwift/GEOSwift/issues/212/768552287@github.com>
 <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
Message-ID: <CA+K_q_o0ZDUmnkVhbdajW64VX8FuVhQ9P+1yT+6UA6R_zoxD_Q@mail.gmail.com>

Seems reasonable to me.

On Wed, Jan 27, 2021 at 3:25 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> How do we feel about porting this back into 3.9?
>
>
> https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b
>
> It's not *tiny* but it's also not huge.
>
> P.
>
> Begin forwarded message:
>
> *From: *Martin Davis <notifications at github.com>
> *Subject: **Re: [GEOSwift/GEOSwift] Invalid Intersection result after
> upgrading to GeoSwift 7.0.0+ (#212)*
> *Date: *January 27, 2021 at 12:21:39 PM PST
> *To: *GEOSwift/GEOSwift <GEOSwift at noreply.github.com>
> *Cc: *Paul Ramsey <pramsey at cleverelephant.ca>, Comment <
> comment at noreply.github.com>
> *Reply-To: *GEOSwift/GEOSwift <
> reply+AAA3ZW7WENDZHBS2KY3DI5V6DWWFHEVBNHHC45GY3U at reply.github.com>
>
>
> No timeline for next GEOS release at the moment.
>
> ?
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/GEOSwift/GEOSwift/issues/212#issuecomment-768552287>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAA3ZWY2H57NID3Y43SEJYLS4BYVHANCNFSM4VV5O7DQ>
> .
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210127/a6d6dad6/attachment.html>

From mtnclimb at gmail.com  Wed Jan 27 16:11:05 2021
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 27 Jan 2021 16:11:05 -0800
Subject: [geos-devel] Fwd: [GEOSwift/GEOSwift] Invalid Intersection
 result after upgrading to GeoSwift 7.0.0+ (#212)
In-Reply-To: <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
References: <GEOSwift/GEOSwift/issues/212/768552287@github.com>
 <56452F4A-2FE8-4D05-9A51-0313A3812CEA@cleverelephant.ca>
Message-ID: <CAK2ens2NsFwiNnEuMH8z478k3P2vk3iQxHyQmmjNfPf5LSAYSQ@mail.gmail.com>

Done.

https://git.osgeo.org/gitea/geos/geos/commit/7c2f400cb870e33f01a84da5308546dd965749bb

On Wed, Jan 27, 2021 at 12:25 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> How do we feel about porting this back into 3.9?
>
>
> https://github.com/libgeos/geos/commit/701e4900c432127c0b2f5a0b2462a51d92fbef8b
>
> It's not *tiny* but it's also not huge.
>
> P.
>
> Begin forwarded message:
>
> *From: *Martin Davis <notifications at github.com>
> *Subject: **Re: [GEOSwift/GEOSwift] Invalid Intersection result after
> upgrading to GeoSwift 7.0.0+ (#212)*
> *Date: *January 27, 2021 at 12:21:39 PM PST
> *To: *GEOSwift/GEOSwift <GEOSwift at noreply.github.com>
> *Cc: *Paul Ramsey <pramsey at cleverelephant.ca>, Comment <
> comment at noreply.github.com>
> *Reply-To: *GEOSwift/GEOSwift <
> reply+AAA3ZW7WENDZHBS2KY3DI5V6DWWFHEVBNHHC45GY3U at reply.github.com>
>
>
> No timeline for next GEOS release at the moment.
>
> ?
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/GEOSwift/GEOSwift/issues/212#issuecomment-768552287>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAA3ZWY2H57NID3Y43SEJYLS4BYVHANCNFSM4VV5O7DQ>
> .
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210127/328e131c/attachment.html>

From geos-trac at osgeo.org  Wed Jan 27 16:29:02 2021
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 28 Jan 2021 00:29:02 -0000
Subject: [geos-devel] [GEOS] #1098: Clear geosop compiler warnings
Message-ID: <045.49758c8c8792f71b3f596dddf374034e@osgeo.org>

#1098: Clear geosop compiler warnings
------------------------+--------------------------
 Reporter:  dbaston     |      Owner:  geos-devel@?
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:  3.10.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Compiling geosop produces numerous warnings about shadowed variables and
 unused arguments.

 https://github.com/libgeos/geos/runs/1766176560?check_suite_focus=true#step:4:534

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1098>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From gdt at lexort.com  Fri Jan 29 12:31:39 2021
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 29 Jan 2021 15:31:39 -0500
Subject: [geos-devel] GEOS 3.9.0 Released
In-Reply-To: <CA+K_q_q7DxaR+qrvt7rT6q1q=uJ0sUwhfckwWneypVDixPdqtA@mail.gmail.com>
 (Daniel Baston's message of "Mon, 14 Dec 2020 16:40:52 -0500")
References: <0DEFF15F-F9D8-44BC-90F8-32467B0B9D08@cleverelephant.ca>
 <rmio8iwxjqt.fsf@s1.lexort.com>
 <113DC9DC-D275-4718-83CD-83BE2F5E2715@cleverelephant.ca>
 <20201214202126.GC14323@cdb>
 <CA+K_q_q7DxaR+qrvt7rT6q1q=uJ0sUwhfckwWneypVDixPdqtA@mail.gmail.com>
Message-ID: <rmieei3v61g.fsf@s1.lexort.com>


Daniel Baston <dbaston at gmail.com> writes:

>>
>> Some headers I see were installed as a facility for C++ library users.
>> Nowadays we discourage those users so I don't see any big problem with
>> them being removed (like opBuffer.h and io.h)
>>
>
> I think this comment is about https://trac.osgeo.org/geos/ticket/999. That
> probably should have been in the NEWS if it was not.
>
> Because listserv chatter sometimes becomes a source of documentation for
> users, I think it's important to point out that the GEOS project ("we") has
> no policy of discouraging use by C++ library users.

That seems to be a policy change that I missed.  We had this discussion
quite a while ago and the README said the C++ interface shouldn't be
used after that discussion.  I then updated the comment in the geos
pkgsrc package to note that it was a bug for other packages to use the
C++ interface, and thus there was no need to consider the geos package
to have had an ABI change because of actual ABI changes or the usual C++
"C++ is so complicated we have no way to know if the ABI changed, so
change the shlib version, and then we know it did!" always-on ABI change.

Now the README just says that the C++ interface is unstable, to the
point where changes in it are not worthy of being mentioned in NEWS, let
along having some API compat and transition strategy.  That is just
about equivalent to a recommendation not to use it.

I should point out that I don't really have an agenda about whether the
C++ interface should be recommended for use.  But as I see it, there
are only two reasonable options:

  1) recommend that the C++ interface not be used

  2) say that use is ok, and have an API stability plan where code
  written to each release's API is expected to continue working for some
  significant period of time (perhaps 2 years) in future releases after
  an API element is deprecated (Note that to me ABI stability is not
  that big a deal.)

  Perhaps, say it's ok to use the C++ API as long as you don't release
  your code :-)

In all seriousness, packaging systems are put into a bind when a program
B depends on interface A, A turns out to be unstable and B doesn't get
instantly updated.  Any plan for what's usable and API stability has to
take that into account, for packages that actually are used by other
packages.  This is basically a summary of the view that prevailed in the
last discussion, as I remember it, which is fuzzily.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210129/f7aa3728/attachment.sig>

From dbaston at gmail.com  Fri Jan 29 13:01:36 2021
From: dbaston at gmail.com (Daniel Baston)
Date: Fri, 29 Jan 2021 16:01:36 -0500
Subject: [geos-devel] GEOS 3.9.0 Released
In-Reply-To: <rmieei3v61g.fsf@s1.lexort.com>
References: <0DEFF15F-F9D8-44BC-90F8-32467B0B9D08@cleverelephant.ca>
 <rmio8iwxjqt.fsf@s1.lexort.com>
 <113DC9DC-D275-4718-83CD-83BE2F5E2715@cleverelephant.ca>
 <20201214202126.GC14323@cdb>
 <CA+K_q_q7DxaR+qrvt7rT6q1q=uJ0sUwhfckwWneypVDixPdqtA@mail.gmail.com>
 <rmieei3v61g.fsf@s1.lexort.com>
Message-ID: <CA+K_q_o3ZPRYsMA99rEOxG57K6H-sfJONzo4i5PKj-S1mSNbxw@mail.gmail.com>

I think the role of GEOS is limited to documenting the stability of its
interfaces. We are clear that the C++ interface can change between releases
whereas changes to the C API are additive only. Projects that use GEOS
should choose the interface that best meets their needs. If you are using
only the most common functionality of GEOS, want to distribute binaries in
a Linux/BSD distribution, and don't want to have to update your code to
accommodate API changes? Probably you should use the C API. Are you using
more obscure functionality, vendoring GEOS, statically linking, or happy to
update your code to accommodate API changes? Maybe use the C++ API.

Dan

On Fri, Jan 29, 2021 at 3:31 PM Greg Troxel <gdt at lexort.com> wrote:

>
> Daniel Baston <dbaston at gmail.com> writes:
>
> >>
> >> Some headers I see were installed as a facility for C++ library users.
> >> Nowadays we discourage those users so I don't see any big problem with
> >> them being removed (like opBuffer.h and io.h)
> >>
> >
> > I think this comment is about https://trac.osgeo.org/geos/ticket/999.
> That
> > probably should have been in the NEWS if it was not.
> >
> > Because listserv chatter sometimes becomes a source of documentation for
> > users, I think it's important to point out that the GEOS project ("we")
> has
> > no policy of discouraging use by C++ library users.
>
> That seems to be a policy change that I missed.  We had this discussion
> quite a while ago and the README said the C++ interface shouldn't be
> used after that discussion.  I then updated the comment in the geos
> pkgsrc package to note that it was a bug for other packages to use the
> C++ interface, and thus there was no need to consider the geos package
> to have had an ABI change because of actual ABI changes or the usual C++
> "C++ is so complicated we have no way to know if the ABI changed, so
> change the shlib version, and then we know it did!" always-on ABI change.
>
> Now the README just says that the C++ interface is unstable, to the
> point where changes in it are not worthy of being mentioned in NEWS, let
> along having some API compat and transition strategy.  That is just
> about equivalent to a recommendation not to use it.
>
> I should point out that I don't really have an agenda about whether the
> C++ interface should be recommended for use.  But as I see it, there
> are only two reasonable options:
>
>   1) recommend that the C++ interface not be used
>
>   2) say that use is ok, and have an API stability plan where code
>   written to each release's API is expected to continue working for some
>   significant period of time (perhaps 2 years) in future releases after
>   an API element is deprecated (Note that to me ABI stability is not
>   that big a deal.)
>
>   Perhaps, say it's ok to use the C++ API as long as you don't release
>   your code :-)
>
> In all seriousness, packaging systems are put into a bind when a program
> B depends on interface A, A turns out to be unstable and B doesn't get
> instantly updated.  Any plan for what's usable and API stability has to
> take that into account, for packages that actually are used by other
> packages.  This is basically a summary of the view that prevailed in the
> last discussion, as I remember it, which is fuzzily.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20210129/684d6e0a/attachment.html>

