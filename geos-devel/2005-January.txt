From warmerdam at pobox.com  Fri Jan 28 00:07:22 2005
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
Message-ID: <41F9C88A.70302@pobox.com>

Folks,

I get the following error building geos 2.1.1 with gcc 2.95.4:

/bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers -I../../source/headers/geos 
-I../../source/headers -DGEOS_VERSION=""2.1.1""    -g -O2 -c -o QuadTreeNodeBase.lo `test -f 
'../index/quadtree/QuadTreeNodeBase.cpp' || echo './'`../index/quadtree/QuadTreeNodeBase.cpp
  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers -I../../source/headers/geos -I../../source/headers 
-DGEOS_VERSION=2.1.1 -g -O2 -c ../index/quadtree/QuadTreeNodeBase.cpp -Wp,-MD,.deps/QuadTreeNodeBase.TPlo  -fPIC -DPIC 
-o .libs/QuadTreeNodeBase.o
../index/quadtree/QuadTreeNodeBase.cpp: In method `class string geos::QuadTreeNodeBase::toString() const':
../index/quadtree/QuadTreeNodeBase.cpp:149: implicit declaration of function `int geos::sprintf(...)'

I can work around it by include <stdio.h> at the top of the file.  Are there
any objections to my committing such a change?  I'm not sure if there is any
bad karma in doing so, or if we ought to just replace sprintf() with something
more modern.

Actually, there are a couple other files I ran into with the same problem.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent


From strk at refractions.net  Fri Jan 28 02:39:05 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <41F9C88A.70302@pobox.com>
References: <41F9C88A.70302@pobox.com>
Message-ID: <20050128073905.GA50981@freek.keybit.net>

On Fri, Jan 28, 2005 at 12:07:22AM -0500, Frank Warmerdam wrote:
> Folks,
> 
> I get the following error building geos 2.1.1 with gcc 2.95.4:
> 
> /bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I. 
> -I../../source/headers -I../../source/headers/geos -I../../source/headers 
> -DGEOS_VERSION=""2.1.1""    -g -O2 -c -o QuadTreeNodeBase.lo `test -f 
> '../index/quadtree/QuadTreeNodeBase.cpp' || echo 
> './'`../index/quadtree/QuadTreeNodeBase.cpp
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
>  -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.1.1 -g 
> -O2 -c ../index/quadtree/QuadTreeNodeBase.cpp 
> -Wp,-MD,.deps/QuadTreeNodeBase.TPlo  -fPIC -DPIC -o .libs/QuadTreeNodeBase.o
> ../index/quadtree/QuadTreeNodeBase.cpp: In method `class string 
> geos::QuadTreeNodeBase::toString() const':
> ../index/quadtree/QuadTreeNodeBase.cpp:149: implicit declaration of 
> function `int geos::sprintf(...)'
> 
> I can work around it by include <stdio.h> at the top of the file.  Are there
> any objections to my committing such a change?  I'm not sure if there is any
> bad karma in doing so, or if we ought to just replace sprintf() with 
> something
> more modern.
> 
> Actually, there are a couple other files I ran into with the same problem.
> 
> Best regards,

Frank, there are 22 files using sprintf.
I think they should be replaced with something more modern.

--strk;

> -- 
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, 
> warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Programmer for Rent
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at refractions.net  Fri Jan 28 04:56:35 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <20050128073905.GA50981@freek.keybit.net>
References: <41F9C88A.70302@pobox.com>
	<20050128073905.GA50981@freek.keybit.net>
Message-ID: <20050128095635.GC51733@freek.keybit.net>

I've substituted most sprintf calls with use of ostringstream.
WKTWriter and (external) MarkupSTL are the only one left.

Could you check if CVS version works fine for you ?
TIA

--strk;

On Fri, Jan 28, 2005 at 08:39:05AM +0100, strk@refractions.net wrote:
> On Fri, Jan 28, 2005 at 12:07:22AM -0500, Frank Warmerdam wrote:
> > Folks,
> > 
> > I get the following error building geos 2.1.1 with gcc 2.95.4:
> > 
> > /bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I. 
> > -I../../source/headers -I../../source/headers/geos -I../../source/headers 
> > -DGEOS_VERSION=""2.1.1""    -g -O2 -c -o QuadTreeNodeBase.lo `test -f 
> > '../index/quadtree/QuadTreeNodeBase.cpp' || echo 
> > './'`../index/quadtree/QuadTreeNodeBase.cpp
> >  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
> >  -I../../source/headers/geos -I../../source/headers -DGEOS_VERSION=2.1.1 -g 
> > -O2 -c ../index/quadtree/QuadTreeNodeBase.cpp 
> > -Wp,-MD,.deps/QuadTreeNodeBase.TPlo  -fPIC -DPIC -o .libs/QuadTreeNodeBase.o
> > ../index/quadtree/QuadTreeNodeBase.cpp: In method `class string 
> > geos::QuadTreeNodeBase::toString() const':
> > ../index/quadtree/QuadTreeNodeBase.cpp:149: implicit declaration of 
> > function `int geos::sprintf(...)'
> > 
> > I can work around it by include <stdio.h> at the top of the file.  Are there
> > any objections to my committing such a change?  I'm not sure if there is any
> > bad karma in doing so, or if we ought to just replace sprintf() with 
> > something
> > more modern.
> > 
> > Actually, there are a couple other files I ran into with the same problem.
> > 
> > Best regards,
> 
> Frank, there are 22 files using sprintf.
> I think they should be replaced with something more modern.
> 
> --strk;
> 
> > -- 
> > ---------------------------------------+--------------------------------------
> > I set the clouds in motion - turn up   | Frank Warmerdam, 
> > warmerdam@pobox.com
> > light and sound - activate the windows | http://pobox.com/~warmerdam
> > and watch the world go round - Rush    | Geospatial Programmer for Rent
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at refractions.net  Fri Jan 28 07:19:55 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <20050128121955.GA52503@freek.keybit.net>

Some time ago I've been researching about GEOS performance
problems as related to JTS. Attached is a shapefile and an .xml
test you can use to compare the two.

JTS does not support buffers tests, so you'll need to use another
method for that. I used JUMP, which reports computation time.

Well. The operation is a buffer(polygon, 2000).

 JTS:  18 seconds
GEOS: 574 seconds (9 minutes, 34 secs)

GEOS computation keeps the CPU pretty busy (98.2-99.8%)
and takes up to about 170 MB of ram

JTS seems to use 3 threads, the bigger using at most 80% 
of CPU, but most of the time far below that point.
JUMP reports 104MB committed, but I'm not sure about the meaning.

For GEOS, valgrind reports (with buffer 500):
 malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes allocated.

How much do you think this wild allocation negatively influence the
poor performance of GEOS ?

--strk;

From strk at refractions.net  Fri Jan 28 07:52:32 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
In-Reply-To: <20050128121955.GA52503@freek.keybit.net>
References: <20050128121955.GA52503@freek.keybit.net>
Message-ID: <20050128125232.GA53426@freek.keybit.net>

The missing attachment (sorry).

--strk;

On Fri, Jan 28, 2005 at 01:19:55PM +0100, strk@refractions.net wrote:
> Some time ago I've been researching about GEOS performance
> problems as related to JTS. Attached is a shapefile and an .xml
> test you can use to compare the two.
> 
> JTS does not support buffers tests, so you'll need to use another
> method for that. I used JUMP, which reports computation time.
> 
> Well. The operation is a buffer(polygon, 2000).
> 
>  JTS:  18 seconds
> GEOS: 574 seconds (9 minutes, 34 secs)
> 
> GEOS computation keeps the CPU pretty busy (98.2-99.8%)
> and takes up to about 170 MB of ram
> 
> JTS seems to use 3 threads, the bigger using at most 80% 
> of CPU, but most of the time far below that point.
> JUMP reports 104MB committed, but I'm not sure about the meaning.
> 
> For GEOS, valgrind reports (with buffer 500):
>  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes allocated.
> 
> How much do you think this wild allocation negatively influence the
> poor performance of GEOS ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: bigpoly_buffering.tgz
Type: application/x-tar-gz
Size: 51974 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20050128/8d796d8e/bigpoly_buffering.bin
From fwarmerdam at gmail.com  Fri Jan 28 09:24:54 2005
From: fwarmerdam at gmail.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <20050128095635.GC51733@freek.keybit.net>
References: <41F9C88A.70302@pobox.com>
	<20050128073905.GA50981@freek.keybit.net>
	<20050128095635.GC51733@freek.keybit.net>
Message-ID: <931f8ea90501280624144a71d5@mail.gmail.com>

On Fri, 28 Jan 2005 10:56:35 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> I've substituted most sprintf calls with use of ostringstream.
> WKTWriter and (external) MarkupSTL are the only one left.
> 
> Could you check if CVS version works fine for you ?
> TIA

Strk,

Sorry, I can't build from CVS.  When I try to run automake I get the 
following.  Frankly, while I know it is considered "best practice" to 
not include the derived automake and configure files in CVS, I find
it makes use of CVS very challenging.  I never seem to have the
latest automake, autoconf and supporting stuff needed to build 
cutting edge projects.  I am running automake 1.8.3 and autoconf
2.59. 

warmerda@gdal2200[13]% automake 
configure.in: no proper invocation of AM_INIT_AUTOMAKE was found.
configure.in: You should verify that configure.in invokes AM_INIT_AUTOMAKE,
configure.in: that aclocal.m4 is present in the top-level directory,
configure.in: and that aclocal.m4 was recently regenerated (using aclocal).
configure.in: required file `./install-sh' not found
configure.in: required file `./missing' not found
configure.in:6: required file `./config.guess' not found
configure.in:6: required file `./config.sub' not found
doc/Makefile.am: required file `./depcomp' not found
/usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
in AM_CONDITIONAL
/usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
/usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
in AM_CONDITIONAL
/usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
source/geom/Makefile.am:6: Libtool library used but `LIBTOOL' is undefined
source/geom/Makefile.am:6: 
source/geom/Makefile.am:6: The usual way to define `LIBTOOL' is to add
`AC_PROG_LIBTOOL'
source/geom/Makefile.am:6: to `configure.in' and run `aclocal' and
`autoconf' again.
/usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
in AM_CONDITIONAL
/usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
configure.in:24: required file `source/headers/config.h.in' not found
/usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
in AM_CONDITIONAL
/usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From strk at refractions.net  Fri Jan 28 09:35:25 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <931f8ea90501280624144a71d5@mail.gmail.com>
References: <41F9C88A.70302@pobox.com>
	<20050128073905.GA50981@freek.keybit.net>
	<20050128095635.GC51733@freek.keybit.net>
	<931f8ea90501280624144a71d5@mail.gmail.com>
Message-ID: <20050128143525.GB53999@freek.keybit.net>

On Fri, Jan 28, 2005 at 09:24:54AM -0500, Frank Warmerdam wrote:
> On Fri, 28 Jan 2005 10:56:35 +0100, strk@refractions.net
> <strk@refractions.net> wrote:
> > I've substituted most sprintf calls with use of ostringstream.
> > WKTWriter and (external) MarkupSTL are the only one left.
> > 
> > Could you check if CVS version works fine for you ?
> > TIA
> 
> Strk,
> 
> Sorry, I can't build from CVS.  When I try to run automake I get the 
> following.  Frankly, while I know it is considered "best practice" to 
> not include the derived automake and configure files in CVS, I find
> it makes use of CVS very challenging.  I never seem to have the
> latest automake, autoconf and supporting stuff needed to build 
> cutting edge projects.  I am running automake 1.8.3 and autoconf
> 2.59. 

You should run ./autogen.sh which would take care of calling the
autostuff in the correct order.

... It works here with automake-1.7.7 and autoconf-2.57 ...

BTW, do the hourly snapshots have the generated files ?

--strk;


> 
> warmerda@gdal2200[13]% automake 
> configure.in: no proper invocation of AM_INIT_AUTOMAKE was found.
> configure.in: You should verify that configure.in invokes AM_INIT_AUTOMAKE,
> configure.in: that aclocal.m4 is present in the top-level directory,
> configure.in: and that aclocal.m4 was recently regenerated (using aclocal).
> configure.in: required file `./install-sh' not found
> configure.in: required file `./missing' not found
> configure.in:6: required file `./config.guess' not found
> configure.in:6: required file `./config.sub' not found
> doc/Makefile.am: required file `./depcomp' not found
> /usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
> in AM_CONDITIONAL
> /usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
> /usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
> in AM_CONDITIONAL
> /usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
> source/geom/Makefile.am:6: Libtool library used but `LIBTOOL' is undefined
> source/geom/Makefile.am:6: 
> source/geom/Makefile.am:6: The usual way to define `LIBTOOL' is to add
> `AC_PROG_LIBTOOL'
> source/geom/Makefile.am:6: to `configure.in' and run `aclocal' and
> `autoconf' again.
> /usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
> in AM_CONDITIONAL
> /usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
> configure.in:24: required file `source/headers/config.h.in' not found
> /usr/share/automake-1.8/am/depend2.am: am__fastdepCXX does not appear
> in AM_CONDITIONAL
> /usr/share/automake-1.8/am/depend2.am: AMDEP does not appear in AM_CONDITIONAL
> 
> Best regards,
> -- 
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Programmer for Rent
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From fwarmerdam at gmail.com  Fri Jan 28 09:39:31 2005
From: fwarmerdam at gmail.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <20050128143525.GB53999@freek.keybit.net>
References: <41F9C88A.70302@pobox.com>
	<20050128073905.GA50981@freek.keybit.net>
	<20050128095635.GC51733@freek.keybit.net>
	<931f8ea90501280624144a71d5@mail.gmail.com>
	<20050128143525.GB53999@freek.keybit.net>
Message-ID: <931f8ea905012806391cddd946@mail.gmail.com>

On Fri, 28 Jan 2005 15:35:25 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> You should run ./autogen.sh which would take care of calling the
> autostuff in the correct order.
> 
> ... It works here with automake-1.7.7 and autoconf-2.57 ...

Strk / Steve, 

Doh!  Any day I learn something is a day not wasted.   That
works fine.  I'll proceed with a build on my old system (it is a bit
slow). 

> BTW, do the hourly snapshots have the generated files ?

Yes they do.  In fact, I went ahead and configured that successfully
but got distracted.  

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From mbdavis at VividSolutions.com  Fri Jan 28 12:12:24 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027225873@venus.VividSolutions.com>

Poor alloc performance would be my first guess for the performance
difference.  I would think Java is pretty optimized for memory
allocation, since it relies on it so heavily.  

I think one standard approach to handling slow malloc is to build a
sub-allocation layer.  This would be made a bit easier in GEOS, since
almost the allocation done inside geometry methods is released at the
end of the method.  You could probably even dispense with the free calls
as long as you were operating in the memory pool.  (One messiness that
would need to be thought out is how to support exposing the various
components such as tree indexes and noding while still allowing a custom
allocator to be supplied.  Or you could just forget about this and just
support access through geometry methods.  This is getting pretty far
from the philosophy of JTS though...).

I'm not enough of a C expert to know if this is the best route to pursue
- anyone have any other ideas?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: strk@refractions.net [mailto:strk@refractions.net] 
> Sent: January 28, 2005 4:20 AM
> To: geos-devel@geos.refractions.net
> Subject: [geos-devel] JTS/GEOS performance
> 
> 
> Some time ago I've been researching about GEOS performance 
> problems as related to JTS. Attached is a shapefile and an 
> .xml test you can use to compare the two.
> 
> JTS does not support buffers tests, so you'll need to use 
> another method for that. I used JUMP, which reports computation time.
> 
> Well. The operation is a buffer(polygon, 2000).
> 
>  JTS:  18 seconds
> GEOS: 574 seconds (9 minutes, 34 secs)
> 
> GEOS computation keeps the CPU pretty busy (98.2-99.8%)
> and takes up to about 170 MB of ram
> 
> JTS seems to use 3 threads, the bigger using at most 80% 
> of CPU, but most of the time far below that point.
> JUMP reports 104MB committed, but I'm not sure about the meaning.
> 
> For GEOS, valgrind reports (with buffer 500):
>  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes 
> allocated.
> 
> How much do you think this wild allocation negatively 
> influence the poor performance of GEOS ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From MChapman at sanz.com  Fri Jan 28 12:46:42 2005
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <ED3A48B9840E594890A2BC172D119465E63C52@mailman>

I studied the GEOS code and here is my opinion:

1.  GEOS makes multiple copies of the coordinates during many operations
rather than storing the points once and then passing pointers. 

2.  GEOS has a complicated object model that makes objects for
everything.  To calculate most spatial operations and relationships
requires the construction and destruction of many many objects.

3.  The DE9IM implementation makes mistakes like intersects = !disjoint.
That requires a full scan of all points in a poly, whereas a straight
intersect algorithm will return faster most of the time because it can
exit after it finds the first intersecting point.  In general, I think
there should be optimized algorithms for each spatial
operation/relationship rather than trying to calculate the full de9-im
matrix.  You can keep the matrix, just change the way it gets populated
behind the scenes.

4.  When doing operations on point arrays, make functions that takes
pointers to arrays and just pass the pointers in from the geometry
classes.  Currently, when you call a function like intersects GEOS makes
copies of points and a slew of objects for each geometry operation.  

For a comparison, we tried to use geos with postgresql and used the
POSTGIS intersect method.  We found it very slow so we wrote our own
user-defined intersect function.  Ours is 109 times faster on a million
plus geometries.  That means a one second query for us takes GEOS 109
seconds.

Martin



-----Original Message-----
From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
Sent: Friday, January 28, 2005 10:12 AM
To: GEOS Development List
Subject: RE: [geos-devel] JTS/GEOS performance


Poor alloc performance would be my first guess for the performance
difference.  I would think Java is pretty optimized for memory
allocation, since it relies on it so heavily.  

I think one standard approach to handling slow malloc is to build a
sub-allocation layer.  This would be made a bit easier in GEOS, since
almost the allocation done inside geometry methods is released at the
end of the method.  You could probably even dispense with the free calls
as long as you were operating in the memory pool.  (One messiness that
would need to be thought out is how to support exposing the various
components such as tree indexes and noding while still allowing a custom
allocator to be supplied.  Or you could just forget about this and just
support access through geometry methods.  This is getting pretty far
from the philosophy of JTS though...).

I'm not enough of a C expert to know if this is the best route to pursue
- anyone have any other ideas?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: strk@refractions.net [mailto:strk@refractions.net]
> Sent: January 28, 2005 4:20 AM
> To: geos-devel@geos.refractions.net
> Subject: [geos-devel] JTS/GEOS performance
> 
> 
> Some time ago I've been researching about GEOS performance
> problems as related to JTS. Attached is a shapefile and an 
> .xml test you can use to compare the two.
> 
> JTS does not support buffers tests, so you'll need to use
> another method for that. I used JUMP, which reports computation time.
> 
> Well. The operation is a buffer(polygon, 2000).
> 
>  JTS:  18 seconds
> GEOS: 574 seconds (9 minutes, 34 secs)
> 
> GEOS computation keeps the CPU pretty busy (98.2-99.8%)
> and takes up to about 170 MB of ram
> 
> JTS seems to use 3 threads, the bigger using at most 80%
> of CPU, but most of the time far below that point.
> JUMP reports 104MB committed, but I'm not sure about the meaning.
> 
> For GEOS, valgrind reports (with buffer 500):
>  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes
> allocated.
> 
> How much do you think this wild allocation negatively
> influence the poor performance of GEOS ?
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at refractions.net  Fri Jan 28 12:55:58 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
In-Reply-To: <ED3A48B9840E594890A2BC172D119465E63C52@mailman>
References: <ED3A48B9840E594890A2BC172D119465E63C52@mailman>
Message-ID: <20050128175558.GA56204@freek.keybit.net>

On Fri, Jan 28, 2005 at 10:46:42AM -0700, Chapman, Martin wrote:

(cuts)

> For a comparison, we tried to use geos with postgresql and used the
> POSTGIS intersect method.  We found it very slow so we wrote our own
> user-defined intersect function.  Ours is 109 times faster on a million
> plus geometries.  That means a one second query for us takes GEOS 109
> seconds.
> 
> Martin

That's interesting, what algorithm did you use ?
Did you compare it to distance(geom, geom) ?

--strk;

From mbdavis at VividSolutions.com  Fri Jan 28 13:12:07 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027225874@venus.VividSolutions.com>

Thanks for the detailed reply, Martin.

Your comments about how objects are handled probably reflects a
too-close adherence to the Java origins of the code.  Or, they could
just be plain failure to take advantage of efficiencies possible with C.
In either case, it seems like a substantial revision of the code base
will be required.

Regarding your comment about the inefficiency of computing intersects as
! Disjoint, I'm aware of this issue and am starting to take steps to
address it in JTS.  I agree that for intersects at least a faster
general implementation is possible.  I'd be interested in hearing some
details of your implementation - for instance, how do you make the
intersection detection efficient?

As for the other named spatial predicates, I'm not sure I see as much
opportunity for optimization.  This is due to the fact that most of the
others require precise knowledge about how the boundary of one geometry
interacts with the exterior or interior of another geometry.  This in
turn requires knowledge of *all* intersections, not just whether an
intersection exists.  This might be optimizable for particular cases of
geometry types, but you then have the situation of needing to specify
numerous different algorithms for different pairs of geometry types.
This is why the initial JTS work focussed on coming up with a general
algorithm for computing all predicates in the same way.  

But it would be great if you see any opportunities for faster
implementations in particular cases, and if you could post details so
all can benefit.


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Chapman, Martin [mailto:MChapman@sanz.com] 
> Sent: January 28, 2005 9:47 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> I studied the GEOS code and here is my opinion:
> 
> 1.  GEOS makes multiple copies of the coordinates during many 
> operations rather than storing the points once and then 
> passing pointers. 
> 
> 2.  GEOS has a complicated object model that makes objects 
> for everything.  To calculate most spatial operations and 
> relationships requires the construction and destruction of 
> many many objects.
> 
> 3.  The DE9IM implementation makes mistakes like intersects = 
> !disjoint. That requires a full scan of all points in a poly, 
> whereas a straight intersect algorithm will return faster 
> most of the time because it can exit after it finds the first 
> intersecting point.  In general, I think there should be 
> optimized algorithms for each spatial operation/relationship 
> rather than trying to calculate the full de9-im matrix.  You 
> can keep the matrix, just change the way it gets populated 
> behind the scenes.
> 
> 4.  When doing operations on point arrays, make functions 
> that takes pointers to arrays and just pass the pointers in 
> from the geometry classes.  Currently, when you call a 
> function like intersects GEOS makes copies of points and a 
> slew of objects for each geometry operation.  
> 
> For a comparison, we tried to use geos with postgresql and 
> used the POSTGIS intersect method.  We found it very slow so 
> we wrote our own user-defined intersect function.  Ours is 
> 109 times faster on a million plus geometries.  That means a 
> one second query for us takes GEOS 109 seconds.
> 
> Martin
> 
> 
> 
> -----Original Message-----
> From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
> Sent: Friday, January 28, 2005 10:12 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Poor alloc performance would be my first guess for the 
> performance difference.  I would think Java is pretty 
> optimized for memory allocation, since it relies on it so heavily.  
> 
> I think one standard approach to handling slow malloc is to 
> build a sub-allocation layer.  This would be made a bit 
> easier in GEOS, since almost the allocation done inside 
> geometry methods is released at the end of the method.  You 
> could probably even dispense with the free calls as long as 
> you were operating in the memory pool.  (One messiness that 
> would need to be thought out is how to support exposing the 
> various components such as tree indexes and noding while 
> still allowing a custom allocator to be supplied.  Or you 
> could just forget about this and just support access through 
> geometry methods.  This is getting pretty far from the 
> philosophy of JTS though...).
> 
> I'm not enough of a C expert to know if this is the best 
> route to pursue
> - anyone have any other ideas?
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: strk@refractions.net [mailto:strk@refractions.net]
> > Sent: January 28, 2005 4:20 AM
> > To: geos-devel@geos.refractions.net
> > Subject: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Some time ago I've been researching about GEOS performance 
> problems as 
> > related to JTS. Attached is a shapefile and an .xml test 
> you can use 
> > to compare the two.
> > 
> > JTS does not support buffers tests, so you'll need to use another 
> > method for that. I used JUMP, which reports computation time.
> > 
> > Well. The operation is a buffer(polygon, 2000).
> > 
> >  JTS:  18 seconds
> > GEOS: 574 seconds (9 minutes, 34 secs)
> > 
> > GEOS computation keeps the CPU pretty busy (98.2-99.8%)
> > and takes up to about 170 MB of ram
> > 
> > JTS seems to use 3 threads, the bigger using at most 80%
> > of CPU, but most of the time far below that point.
> > JUMP reports 104MB committed, but I'm not sure about the meaning.
> > 
> > For GEOS, valgrind reports (with buffer 500):
> >  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes 
> > allocated.
> > 
> > How much do you think this wild allocation negatively influence the 
> > poor performance of GEOS ?
> > 
> > --strk;
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From fwarmerdam at gmail.com  Fri Jan 28 13:47:29 2005
From: fwarmerdam at gmail.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <20050128095635.GC51733@freek.keybit.net>
References: <41F9C88A.70302@pobox.com>
	<20050128073905.GA50981@freek.keybit.net>
	<20050128095635.GC51733@freek.keybit.net>
Message-ID: <931f8ea90501281047719f600d@mail.gmail.com>

On Fri, 28 Jan 2005 10:56:35 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> I've substituted most sprintf calls with use of ostringstream.
> WKTWriter and (external) MarkupSTL are the only one left.
> 
> Could you check if CVS version works fine for you ?
> TIA

Strk,

OK, I don't get the sprintf() problems anymore, though I do 
falldown with this message:


/bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I.
-I../../source/headers -I../../source/headers/geos
-I../../source/headers -DGEOS_VERSION=""2.1.1""    -g -O2 -c -o
Polygonizer.lo `test -f '../operation/polygonize/Polygonizer.cpp' ||
echo './'`../operation/polygonize/Polygonizer.cpp
 g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
-I../../source/headers/geos -I../../source/headers
-DGEOS_VERSION=2.1.1 -g -O2 -c ../operation/polygonize/Polygonizer.cpp
-Wp,-MD,.deps/Polygonizer.TPlo  -fPIC -DPIC -o .libs/Polygonizer.o
../operation/polygonize/Polygonizer.cpp: In method `void
geos::Polygonizer::LineStringAdder::filter_rw(geos::Geometry *)':
../../source/headers/geos/opPolygonize.h:408: `void
geos::Polygonizer::add(geos::LineString *)' is private
../operation/polygonize/Polygonizer.cpp:29: within this context
make[2]: *** [Polygonizer.lo] Error 1
make[2]: Leaving directory `/usr3/pkg4/OpenEV_FW_Tree/geos-050128/source/geom'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/usr3/pkg4/OpenEV_FW_Tree/geos-050128/source'
make: *** [all-recursive] Error 1

This turns out to be a class defined within the namespace of
the Polygonizer class not having access to the Polygonizer
private data.  Since it works with modern GCCs and not with
the ancient gcc, I would conclude that the problem is really
a bug in the old GCC, so I don't think it makes sense to 
bastardize geos to be compatible.  

Of course, in the dark conservative recesses of my own twisted
mind, the voice that says "don't use advanced C++ features ... 
they will give you a headache eventually" says "ha!  I told you
so.". 

For now I'll level GEOS out of my FWTools builds, but eventually
I'll just have to upgrade to a modern GCC. 

Best regards, 
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From MChapman at sanz.com  Fri Jan 28 13:50:47 2005
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <ED3A48B9840E594890A2BC172D119465E63C54@mailman>

Martin,

First I want to say that you guys are showing a lot of professionalism
by how gracefully you guys accept constructive criticism from your
users.  Not many developers can take such comments with open minds.  

Secondly, I agree with your comments below.  Porting from one language
to the other can be tricky when it comes to memory management, and in
some cases it will be tough to optimize just because of the nature of
the operation.  

That said, from my observations I don't think optimizing GEOS would be
as tough as it may appear from the surface.  From what I've seen it's
the nicest implementation of the OGC SFS I've seen yet, and the object
model is very logical and complete.  I think the optimization strategy
should be an incremental one, and a few small changes may solve 80% of
the issues for performance and memory usage.  I have a bunch of ideas,
but need some time to sit down and get back into the code before I offer
any concrete suggestions.  I will take some time this weekend to see if
I can come up with some easy changes.

As a quick background, I write user interfaces for remote sensing
archive systems using MFC for windows desktops and Java/C++ for web
based applications on Linux/Windows.  We manage/provision massive
vector/raster datasets for many government agencies and the
intelligence/military community.  Therefore, my team and I are
constantly seeking out the fastest and most efficient technology for
managing geo-spatial datasets.  We have really enjoyed using PostGIS,
and GDAL/OGR/GEOS.  

Keep up the great work and I'll send my suggestions to you this weekend.

Martin

-----Original Message-----
From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
Sent: Friday, January 28, 2005 11:12 AM
To: GEOS Development List
Subject: RE: [geos-devel] JTS/GEOS performance


Thanks for the detailed reply, Martin.

Your comments about how objects are handled probably reflects a
too-close adherence to the Java origins of the code.  Or, they could
just be plain failure to take advantage of efficiencies possible with C.
In either case, it seems like a substantial revision of the code base
will be required.

Regarding your comment about the inefficiency of computing intersects as
! Disjoint, I'm aware of this issue and am starting to take steps to
address it in JTS.  I agree that for intersects at least a faster
general implementation is possible.  I'd be interested in hearing some
details of your implementation - for instance, how do you make the
intersection detection efficient?

As for the other named spatial predicates, I'm not sure I see as much
opportunity for optimization.  This is due to the fact that most of the
others require precise knowledge about how the boundary of one geometry
interacts with the exterior or interior of another geometry.  This in
turn requires knowledge of *all* intersections, not just whether an
intersection exists.  This might be optimizable for particular cases of
geometry types, but you then have the situation of needing to specify
numerous different algorithms for different pairs of geometry types.
This is why the initial JTS work focussed on coming up with a general
algorithm for computing all predicates in the same way.  

But it would be great if you see any opportunities for faster
implementations in particular cases, and if you could post details so
all can benefit.


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Chapman, Martin [mailto:MChapman@sanz.com]
> Sent: January 28, 2005 9:47 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> I studied the GEOS code and here is my opinion:
> 
> 1.  GEOS makes multiple copies of the coordinates during many
> operations rather than storing the points once and then 
> passing pointers. 
> 
> 2.  GEOS has a complicated object model that makes objects
> for everything.  To calculate most spatial operations and 
> relationships requires the construction and destruction of 
> many many objects.
> 
> 3.  The DE9IM implementation makes mistakes like intersects =
> !disjoint. That requires a full scan of all points in a poly, 
> whereas a straight intersect algorithm will return faster 
> most of the time because it can exit after it finds the first 
> intersecting point.  In general, I think there should be 
> optimized algorithms for each spatial operation/relationship 
> rather than trying to calculate the full de9-im matrix.  You 
> can keep the matrix, just change the way it gets populated 
> behind the scenes.
> 
> 4.  When doing operations on point arrays, make functions
> that takes pointers to arrays and just pass the pointers in 
> from the geometry classes.  Currently, when you call a 
> function like intersects GEOS makes copies of points and a 
> slew of objects for each geometry operation.  
> 
> For a comparison, we tried to use geos with postgresql and
> used the POSTGIS intersect method.  We found it very slow so 
> we wrote our own user-defined intersect function.  Ours is 
> 109 times faster on a million plus geometries.  That means a 
> one second query for us takes GEOS 109 seconds.
> 
> Martin
> 
> 
> 
> -----Original Message-----
> From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> Sent: Friday, January 28, 2005 10:12 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Poor alloc performance would be my first guess for the
> performance difference.  I would think Java is pretty 
> optimized for memory allocation, since it relies on it so heavily.  
> 
> I think one standard approach to handling slow malloc is to
> build a sub-allocation layer.  This would be made a bit 
> easier in GEOS, since almost the allocation done inside 
> geometry methods is released at the end of the method.  You 
> could probably even dispense with the free calls as long as 
> you were operating in the memory pool.  (One messiness that 
> would need to be thought out is how to support exposing the 
> various components such as tree indexes and noding while 
> still allowing a custom allocator to be supplied.  Or you 
> could just forget about this and just support access through 
> geometry methods.  This is getting pretty far from the 
> philosophy of JTS though...).
> 
> I'm not enough of a C expert to know if this is the best
> route to pursue
> - anyone have any other ideas?
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: strk@refractions.net [mailto:strk@refractions.net]
> > Sent: January 28, 2005 4:20 AM
> > To: geos-devel@geos.refractions.net
> > Subject: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Some time ago I've been researching about GEOS performance
> problems as
> > related to JTS. Attached is a shapefile and an .xml test
> you can use
> > to compare the two.
> > 
> > JTS does not support buffers tests, so you'll need to use another
> > method for that. I used JUMP, which reports computation time.
> > 
> > Well. The operation is a buffer(polygon, 2000).
> > 
> >  JTS:  18 seconds
> > GEOS: 574 seconds (9 minutes, 34 secs)
> > 
> > GEOS computation keeps the CPU pretty busy (98.2-99.8%)
> > and takes up to about 170 MB of ram
> > 
> > JTS seems to use 3 threads, the bigger using at most 80%
> > of CPU, but most of the time far below that point.
> > JUMP reports 104MB committed, but I'm not sure about the meaning.
> > 
> > For GEOS, valgrind reports (with buffer 500):
> >  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes
> > allocated.
> > 
> > How much do you think this wild allocation negatively influence the
> > poor performance of GEOS ?
> > 
> > --strk;
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at refractions.net  Sun Jan 30 05:13:41 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] GEOS 2.1.1 sprintf Compile Error
In-Reply-To: <931f8ea90501281047719f600d@mail.gmail.com>
References: <41F9C88A.70302@pobox.com>
	<20050128073905.GA50981@freek.keybit.net>
	<20050128095635.GC51733@freek.keybit.net>
	<931f8ea90501281047719f600d@mail.gmail.com>
Message-ID: <20050130101341.GA72951@freek.keybit.net>

On Fri, Jan 28, 2005 at 01:47:29PM -0500, Frank Warmerdam wrote:
> On Fri, 28 Jan 2005 10:56:35 +0100, strk@refractions.net
> <strk@refractions.net> wrote:
> > I've substituted most sprintf calls with use of ostringstream.
> > WKTWriter and (external) MarkupSTL are the only one left.
> > 
> > Could you check if CVS version works fine for you ?
> > TIA
> 
> Strk,
> 
> OK, I don't get the sprintf() problems anymore, though I do 
> falldown with this message:
> 
> 
> /bin/sh ../../libtool --mode=compile g++ -DHAVE_CONFIG_H -I. -I.
> -I../../source/headers -I../../source/headers/geos
> -I../../source/headers -DGEOS_VERSION=""2.1.1""    -g -O2 -c -o
> Polygonizer.lo `test -f '../operation/polygonize/Polygonizer.cpp' ||
> echo './'`../operation/polygonize/Polygonizer.cpp
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers
> -I../../source/headers/geos -I../../source/headers
> -DGEOS_VERSION=2.1.1 -g -O2 -c ../operation/polygonize/Polygonizer.cpp
> -Wp,-MD,.deps/Polygonizer.TPlo  -fPIC -DPIC -o .libs/Polygonizer.o
> ../operation/polygonize/Polygonizer.cpp: In method `void
> geos::Polygonizer::LineStringAdder::filter_rw(geos::Geometry *)':
> ../../source/headers/geos/opPolygonize.h:408: `void
> geos::Polygonizer::add(geos::LineString *)' is private
> ../operation/polygonize/Polygonizer.cpp:29: within this context
> make[2]: *** [Polygonizer.lo] Error 1
> make[2]: Leaving directory `/usr3/pkg4/OpenEV_FW_Tree/geos-050128/source/geom'
> make[1]: *** [all-recursive] Error 1
> make[1]: Leaving directory `/usr3/pkg4/OpenEV_FW_Tree/geos-050128/source'
> make: *** [all-recursive] Error 1
> 
> This turns out to be a class defined within the namespace of
> the Polygonizer class not having access to the Polygonizer
> private data.  Since it works with modern GCCs and not with
> the ancient gcc, I would conclude that the problem is really
> a bug in the old GCC, so I don't think it makes sense to 
> bastardize geos to be compatible.  
> 
> Of course, in the dark conservative recesses of my own twisted
> mind, the voice that says "don't use advanced C++ features ... 
> they will give you a headache eventually" says "ha!  I told you
> so.". 

In source/headers/geos/opPolygonize.h, line 490 you find:

// This seems to be needed by    GCC 2.95.4
//friend class Polygonizer::LineStringAdder;

Could you see if commenting out that line fixes the problem ?

(it's the Polygonzer class).

--strk;


> 
> For now I'll level GEOS out of my FWTools builds, but eventually
> I'll just have to upgrade to a modern GCC. 
> 
> Best regards, 
> -- 
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Programmer for Rent
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at refractions.net  Mon Jan 31 05:42:37 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
In-Reply-To: <ED3A48B9840E594890A2BC172D119465E63C54@mailman>
References: <ED3A48B9840E594890A2BC172D119465E63C54@mailman>
Message-ID: <20050131104237.GA81506@freek.keybit.net>

On Fri, Jan 28, 2005 at 11:50:47AM -0700, Chapman, Martin wrote:
> Martin,
> 
> First I want to say that you guys are showing a lot of professionalism
> by how gracefully you guys accept constructive criticism from your
> users.  Not many developers can take such comments with open minds.  

I think developers with non-open/free-minds will hardly be
comfortable with open/free-software developments models.

> Secondly, I agree with your comments below.  Porting from one language
> to the other can be tricky when it comes to memory management, and in
> some cases it will be tough to optimize just because of the nature of
> the operation.  
> 
> That said, from my observations I don't think optimizing GEOS would be
> as tough as it may appear from the surface.  From what I've seen it's
> the nicest implementation of the OGC SFS I've seen yet, and the object
> model is very logical and complete.  I think the optimization strategy
> should be an incremental one, and a few small changes may solve 80% of
> the issues for performance and memory usage.  I have a bunch of ideas,
> but need some time to sit down and get back into the code before I offer
> any concrete suggestions.  I will take some time this weekend to see if
> I can come up with some easy changes.

What I've been thinking as a possible (harmless) step is reducing
memory fragmentation by reducing heap-allocated object elements.

As for the Coordinate copies I've made some tests.
The following table shows number of created Coordinate and
CoordinateSequence objects in relation to the number of output
and input points to the Buffer function. Input geom is the
one contained in the .xml file attached in my previous post.

         Input points : 3629

              buffer | out    | cted    | cted      |
              units  | points | points  | coord seq |
            ---------+--------+---------+-----------+
                 100 |   5640 |   14720 |      2787 |
                 200 |   5035 |   32206 |     12058 |
                 500 |   3941 |  120217 |     61498 |
                1000 |   3060 |  317219 |    169320 |

It would be useful to try out a CoordinateSequence implementation
using a linked list of Coordinate pointers. It has to be inspected
wheter this would cleanly work with current code (ie, wheter
implementing the class and make it the DefaultCoordinateSequence
will suffice to force it's use in all inner code).

All the Coordinates in that case would need to be immutable and
probably a Coordinate pool should be maintained to take care of
their mantagement (when to delete them? ref count? never? on demand?).
To reflect the Java way Coordinates (as all objects actually)
should be reference counted pointers. Maybe we can do it defining
a smart pointer as inherithing from Coordinate.

Do you C++ guru see these as possible ways ?

--strk;

> 
> As a quick background, I write user interfaces for remote sensing
> archive systems using MFC for windows desktops and Java/C++ for web
> based applications on Linux/Windows.  We manage/provision massive
> vector/raster datasets for many government agencies and the
> intelligence/military community.  Therefore, my team and I are
> constantly seeking out the fastest and most efficient technology for
> managing geo-spatial datasets.  We have really enjoyed using PostGIS,
> and GDAL/OGR/GEOS.  
> 
> Keep up the great work and I'll send my suggestions to you this weekend.
> 
> Martin
> 
> -----Original Message-----
> From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
> Sent: Friday, January 28, 2005 11:12 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Thanks for the detailed reply, Martin.
> 
> Your comments about how objects are handled probably reflects a
> too-close adherence to the Java origins of the code.  Or, they could
> just be plain failure to take advantage of efficiencies possible with C.
> In either case, it seems like a substantial revision of the code base
> will be required.
> 
> Regarding your comment about the inefficiency of computing intersects as
> ! Disjoint, I'm aware of this issue and am starting to take steps to
> address it in JTS.  I agree that for intersects at least a faster
> general implementation is possible.  I'd be interested in hearing some
> details of your implementation - for instance, how do you make the
> intersection detection efficient?
> 
> As for the other named spatial predicates, I'm not sure I see as much
> opportunity for optimization.  This is due to the fact that most of the
> others require precise knowledge about how the boundary of one geometry
> interacts with the exterior or interior of another geometry.  This in
> turn requires knowledge of *all* intersections, not just whether an
> intersection exists.  This might be optimizable for particular cases of
> geometry types, but you then have the situation of needing to specify
> numerous different algorithms for different pairs of geometry types.
> This is why the initial JTS work focussed on coming up with a general
> algorithm for computing all predicates in the same way.  
> 
> But it would be great if you see any opportunities for faster
> implementations in particular cases, and if you could post details so
> all can benefit.
> 
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: Chapman, Martin [mailto:MChapman@sanz.com]
> > Sent: January 28, 2005 9:47 AM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > I studied the GEOS code and here is my opinion:
> > 
> > 1.  GEOS makes multiple copies of the coordinates during many
> > operations rather than storing the points once and then 
> > passing pointers. 
> > 
> > 2.  GEOS has a complicated object model that makes objects
> > for everything.  To calculate most spatial operations and 
> > relationships requires the construction and destruction of 
> > many many objects.
> > 
> > 3.  The DE9IM implementation makes mistakes like intersects =
> > !disjoint. That requires a full scan of all points in a poly, 
> > whereas a straight intersect algorithm will return faster 
> > most of the time because it can exit after it finds the first 
> > intersecting point.  In general, I think there should be 
> > optimized algorithms for each spatial operation/relationship 
> > rather than trying to calculate the full de9-im matrix.  You 
> > can keep the matrix, just change the way it gets populated 
> > behind the scenes.
> > 
> > 4.  When doing operations on point arrays, make functions
> > that takes pointers to arrays and just pass the pointers in 
> > from the geometry classes.  Currently, when you call a 
> > function like intersects GEOS makes copies of points and a 
> > slew of objects for each geometry operation.  
> > 
> > For a comparison, we tried to use geos with postgresql and
> > used the POSTGIS intersect method.  We found it very slow so 
> > we wrote our own user-defined intersect function.  Ours is 
> > 109 times faster on a million plus geometries.  That means a 
> > one second query for us takes GEOS 109 seconds.
> > 
> > Martin
> > 
> > 
> > 
> > -----Original Message-----
> > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > Sent: Friday, January 28, 2005 10:12 AM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Poor alloc performance would be my first guess for the
> > performance difference.  I would think Java is pretty 
> > optimized for memory allocation, since it relies on it so heavily.  
> > 
> > I think one standard approach to handling slow malloc is to
> > build a sub-allocation layer.  This would be made a bit 
> > easier in GEOS, since almost the allocation done inside 
> > geometry methods is released at the end of the method.  You 
> > could probably even dispense with the free calls as long as 
> > you were operating in the memory pool.  (One messiness that 
> > would need to be thought out is how to support exposing the 
> > various components such as tree indexes and noding while 
> > still allowing a custom allocator to be supplied.  Or you 
> > could just forget about this and just support access through 
> > geometry methods.  This is getting pretty far from the 
> > philosophy of JTS though...).
> > 
> > I'm not enough of a C expert to know if this is the best
> > route to pursue
> > - anyone have any other ideas?
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > 
> > 
> > > -----Original Message-----
> > > From: strk@refractions.net [mailto:strk@refractions.net]
> > > Sent: January 28, 2005 4:20 AM
> > > To: geos-devel@geos.refractions.net
> > > Subject: [geos-devel] JTS/GEOS performance
> > > 
> > > 
> > > Some time ago I've been researching about GEOS performance
> > problems as
> > > related to JTS. Attached is a shapefile and an .xml test
> > you can use
> > > to compare the two.
> > > 
> > > JTS does not support buffers tests, so you'll need to use another
> > > method for that. I used JUMP, which reports computation time.
> > > 
> > > Well. The operation is a buffer(polygon, 2000).
> > > 
> > >  JTS:  18 seconds
> > > GEOS: 574 seconds (9 minutes, 34 secs)
> > > 
> > > GEOS computation keeps the CPU pretty busy (98.2-99.8%)
> > > and takes up to about 170 MB of ram
> > > 
> > > JTS seems to use 3 threads, the bigger using at most 80%
> > > of CPU, but most of the time far below that point.
> > > JUMP reports 104MB committed, but I'm not sure about the meaning.
> > > 
> > > For GEOS, valgrind reports (with buffer 500):
> > >  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes
> > > allocated.
> > > 
> > > How much do you think this wild allocation negatively influence the
> > > poor performance of GEOS ?
> > > 
> > > --strk;
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From mbdavis at VividSolutions.com  Mon Jan 31 14:22:15 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F5C54@venus.VividSolutions.com>

> The following table shows number of created Coordinate and 
> CoordinateSequence objects in relation to the number of 

Something seems wrong here - are there really that many created
CoordinateSequences?  It's *possible* - there's a lot of noding that
goes on during buffering.  But this should really be looked at, and
possibly compared to JTS.

> It would be useful to try out a CoordinateSequence 
> implementation using a linked list of Coordinate pointers. It 

Hmmm.  This seems fundamentally the wrong approach.  JTS does not need
the flexibility of linked lists inside CoordinateSequences.  It sounds
like you are trying to build a garbage-collected memory management
layer.  This may be the only reasonable solution.  However, rather than
hacking this into the existing code in an obtrusive kind of way, it
would be nicer to look for a clean, layered solution.  Are there any
open source GC packages for C++?


Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: strk@refractions.net [mailto:strk@refractions.net] 
> Sent: January 31, 2005 2:43 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] JTS/GEOS performance
> 
> 
> On Fri, Jan 28, 2005 at 11:50:47AM -0700, Chapman, Martin wrote:
> > Martin,
> > 
> > First I want to say that you guys are showing a lot of 
> professionalism 
> > by how gracefully you guys accept constructive criticism from your 
> > users.  Not many developers can take such comments with open minds.
> 
> I think developers with non-open/free-minds will hardly be 
> comfortable with open/free-software developments models.
> 
> > Secondly, I agree with your comments below.  Porting from 
> one language 
> > to the other can be tricky when it comes to memory 
> management, and in 
> > some cases it will be tough to optimize just because of the 
> nature of 
> > the operation.
> > 
> > That said, from my observations I don't think optimizing 
> GEOS would be 
> > as tough as it may appear from the surface.  From what I've 
> seen it's 
> > the nicest implementation of the OGC SFS I've seen yet, and 
> the object 
> > model is very logical and complete.  I think the 
> optimization strategy 
> > should be an incremental one, and a few small changes may 
> solve 80% of 
> > the issues for performance and memory usage.  I have a 
> bunch of ideas, 
> > but need some time to sit down and get back into the code before I 
> > offer any concrete suggestions.  I will take some time this 
> weekend to 
> > see if I can come up with some easy changes.
> 
> What I've been thinking as a possible (harmless) step is 
> reducing memory fragmentation by reducing heap-allocated 
> object elements.
> 
> As for the Coordinate copies I've made some tests.
> The following table shows number of created Coordinate and 
> CoordinateSequence objects in relation to the number of 
> output and input points to the Buffer function. Input geom is 
> the one contained in the .xml file attached in my previous post.
> 
>          Input points : 3629
> 
>               buffer | out    | cted    | cted      |
>               units  | points | points  | coord seq |
>             ---------+--------+---------+-----------+
>                  100 |   5640 |   14720 |      2787 |
>                  200 |   5035 |   32206 |     12058 |
>                  500 |   3941 |  120217 |     61498 |
>                 1000 |   3060 |  317219 |    169320 |
> 
> It would be useful to try out a CoordinateSequence 
> implementation using a linked list of Coordinate pointers. It 
> has to be inspected wheter this would cleanly work with 
> current code (ie, wheter implementing the class and make it 
> the DefaultCoordinateSequence will suffice to force it's use 
> in all inner code).
> 
> All the Coordinates in that case would need to be immutable 
> and probably a Coordinate pool should be maintained to take 
> care of their mantagement (when to delete them? ref count? 
> never? on demand?). To reflect the Java way Coordinates (as 
> all objects actually) should be reference counted pointers. 
> Maybe we can do it defining a smart pointer as inherithing 
> from Coordinate.
> 
> Do you C++ guru see these as possible ways ?
> 
> --strk;
> 
> > 
> > As a quick background, I write user interfaces for remote sensing 
> > archive systems using MFC for windows desktops and Java/C++ for web 
> > based applications on Linux/Windows.  We manage/provision massive 
> > vector/raster datasets for many government agencies and the 
> > intelligence/military community.  Therefore, my team and I are 
> > constantly seeking out the fastest and most efficient 
> technology for 
> > managing geo-spatial datasets.  We have really enjoyed 
> using PostGIS, 
> > and GDAL/OGR/GEOS.
> > 
> > Keep up the great work and I'll send my suggestions to you this 
> > weekend.
> > 
> > Martin
> > 
> > -----Original Message-----
> > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > Sent: Friday, January 28, 2005 11:12 AM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Thanks for the detailed reply, Martin.
> > 
> > Your comments about how objects are handled probably reflects a 
> > too-close adherence to the Java origins of the code.  Or, 
> they could 
> > just be plain failure to take advantage of efficiencies 
> possible with 
> > C. In either case, it seems like a substantial revision of the code 
> > base will be required.
> > 
> > Regarding your comment about the inefficiency of computing 
> intersects 
> > as ! Disjoint, I'm aware of this issue and am starting to 
> take steps 
> > to address it in JTS.  I agree that for intersects at least 
> a faster 
> > general implementation is possible.  I'd be interested in 
> hearing some 
> > details of your implementation - for instance, how do you make the 
> > intersection detection efficient?
> > 
> > As for the other named spatial predicates, I'm not sure I 
> see as much 
> > opportunity for optimization.  This is due to the fact that most of 
> > the others require precise knowledge about how the boundary of one 
> > geometry interacts with the exterior or interior of another 
> geometry.  
> > This in turn requires knowledge of *all* intersections, not just 
> > whether an intersection exists.  This might be optimizable for 
> > particular cases of geometry types, but you then have the 
> situation of 
> > needing to specify numerous different algorithms for 
> different pairs 
> > of geometry types. This is why the initial JTS work 
> focussed on coming 
> > up with a general algorithm for computing all predicates in 
> the same way.
> > 
> > But it would be great if you see any opportunities for faster 
> > implementations in particular cases, and if you could post 
> details so 
> > all can benefit.
> > 
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > 
> > 
> > > -----Original Message-----
> > > From: Chapman, Martin [mailto:MChapman@sanz.com]
> > > Sent: January 28, 2005 9:47 AM
> > > To: GEOS Development List
> > > Subject: RE: [geos-devel] JTS/GEOS performance
> > > 
> > > 
> > > I studied the GEOS code and here is my opinion:
> > > 
> > > 1.  GEOS makes multiple copies of the coordinates during many 
> > > operations rather than storing the points once and then passing 
> > > pointers.
> > > 
> > > 2.  GEOS has a complicated object model that makes objects for 
> > > everything.  To calculate most spatial operations and 
> relationships 
> > > requires the construction and destruction of many many objects.
> > > 
> > > 3.  The DE9IM implementation makes mistakes like intersects = 
> > > !disjoint. That requires a full scan of all points in a poly, 
> > > whereas a straight intersect algorithm will return faster most of 
> > > the time because it can exit after it finds the first 
> intersecting 
> > > point.  In general, I think there should be optimized 
> algorithms for 
> > > each spatial operation/relationship rather than trying to 
> calculate 
> > > the full de9-im matrix.  You can keep the matrix, just change the 
> > > way it gets populated behind the scenes.
> > > 
> > > 4.  When doing operations on point arrays, make functions 
> that takes 
> > > pointers to arrays and just pass the pointers in from the 
> geometry 
> > > classes.  Currently, when you call a function like 
> intersects GEOS 
> > > makes copies of points and a slew of objects for each geometry 
> > > operation.
> > > 
> > > For a comparison, we tried to use geos with postgresql 
> and used the 
> > > POSTGIS intersect method.  We found it very slow so we 
> wrote our own 
> > > user-defined intersect function.  Ours is 109 times faster on a 
> > > million plus geometries.  That means a one second query 
> for us takes 
> > > GEOS 109 seconds.
> > > 
> > > Martin
> > > 
> > > 
> > > 
> > > -----Original Message-----
> > > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > > Sent: Friday, January 28, 2005 10:12 AM
> > > To: GEOS Development List
> > > Subject: RE: [geos-devel] JTS/GEOS performance
> > > 
> > > 
> > > Poor alloc performance would be my first guess for the 
> performance 
> > > difference.  I would think Java is pretty optimized for memory 
> > > allocation, since it relies on it so heavily.
> > > 
> > > I think one standard approach to handling slow malloc is 
> to build a 
> > > sub-allocation layer.  This would be made a bit easier in GEOS, 
> > > since almost the allocation done inside geometry methods 
> is released 
> > > at the end of the method.  You could probably even 
> dispense with the 
> > > free calls as long as you were operating in the memory 
> pool.  (One 
> > > messiness that would need to be thought out is how to support 
> > > exposing the various components such as tree indexes and noding 
> > > while still allowing a custom allocator to be supplied.  Or you
> > > could just forget about this and just support access through 
> > > geometry methods.  This is getting pretty far from the 
> > > philosophy of JTS though...).
> > > 
> > > I'm not enough of a C expert to know if this is the best route to 
> > > pursue
> > > - anyone have any other ideas?
> > > 
> > > Martin Davis, Senior Technical Architect
> > > Vivid Solutions Inc.      www.vividsolutions.com
> > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > 
> > > 
> > > > -----Original Message-----
> > > > From: strk@refractions.net [mailto:strk@refractions.net]
> > > > Sent: January 28, 2005 4:20 AM
> > > > To: geos-devel@geos.refractions.net
> > > > Subject: [geos-devel] JTS/GEOS performance
> > > > 
> > > > 
> > > > Some time ago I've been researching about GEOS performance
> > > problems as
> > > > related to JTS. Attached is a shapefile and an .xml test
> > > you can use
> > > > to compare the two.
> > > > 
> > > > JTS does not support buffers tests, so you'll need to 
> use another 
> > > > method for that. I used JUMP, which reports computation time.
> > > > 
> > > > Well. The operation is a buffer(polygon, 2000).
> > > > 
> > > >  JTS:  18 seconds
> > > > GEOS: 574 seconds (9 minutes, 34 secs)
> > > > 
> > > > GEOS computation keeps the CPU pretty busy (98.2-99.8%) 
> and takes 
> > > > up to about 170 MB of ram
> > > > 
> > > > JTS seems to use 3 threads, the bigger using at most 
> 80% of CPU, 
> > > > but most of the time far below that point. JUMP reports 104MB 
> > > > committed, but I'm not sure about the meaning.
> > > > 
> > > > For GEOS, valgrind reports (with buffer 500):
> > > >  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes 
> > > > allocated.
> > > > 
> > > > How much do you think this wild allocation negatively influence 
> > > > the poor performance of GEOS ?
> > > > 
> > > > --strk;
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net 
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net 
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From nhv at cape.com  Mon Jan 31 14:30:39 2005
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F5C54@venus.VividSolutions.com>
Message-ID: <EKEJIKAILPONGGENMBGAAENGKEAA.nhv@cape.com>

Martin Davis writes:
> 
> Hmmm.  This seems fundamentally the wrong approach.  JTS does not need
> the flexibility of linked lists inside CoordinateSequences.  It sounds
> like you are trying to build a garbage-collected memory management
> layer.  This may be the only reasonable solution.  However, rather than
> hacking this into the existing code in an obtrusive kind of way, it
> would be nicer to look for a clean, layered solution.  Are there any
> open source GC packages for C++?

There are several quality OpenSource C++ Memory Managers but ...
This is *exactly* the kind of thing that smart_pointers have made
sort of obsolete  :-)

http://boost.org/libs/smart_ptr/smart_ptr.htm

Norman

From mbdavis at VividSolutions.com  Mon Jan 31 17:49:50 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F5C59@venus.VividSolutions.com>

I can see how smart pointers can help with program correctness.  Do they
help with performance?  

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Norman Vine [mailto:nhv@cape.com] 
> Sent: January 31, 2005 11:31 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Martin Davis writes:
> > 
> > Hmmm.  This seems fundamentally the wrong approach.  JTS 
> does not need 
> > the flexibility of linked lists inside CoordinateSequences. 
>  It sounds 
> > like you are trying to build a garbage-collected memory management 
> > layer.  This may be the only reasonable solution.  However, rather 
> > than hacking this into the existing code in an obtrusive 
> kind of way, 
> > it would be nicer to look for a clean, layered solution.  Are there 
> > any open source GC packages for C++?
> 
> There are several quality OpenSource C++ Memory Managers but 
> ... This is *exactly* the kind of thing that smart_pointers 
> have made sort of obsolete  :-)
> 
http://boost.org/libs/smart_ptr/smart_ptr.htm

Norman
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From MChapman at sanz.com  Mon Jan 31 19:17:30 2005
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <ED3A48B9840E594890A2BC172D119465E63C58@mailman>

Martin,

Smart pointers are one thing and ref-counting (garbage collection) are
two different but related things.

Smart pointers help prevent memory leaks.  A smart pointer is always
created on the stack, when the function ends they always go out of scope
and their destructors delete their encapsulated pointer...therefore, if
all heap data is wrapped by a smart pointer, if the function crashes you
are guaranteed that the heap memory will be de-allocated because the
smart pointer will always be destroyed and will call it's destructor.
This actually means more vars on the stack, but less chance for
mem-leaks. 

Ref-counting allows multiple objects to share pointers to the same
object without the fear of some other object deleting that object before
you are done using it, and allows you to safely pass heap data across
function boundaries.  This can save huge amounts of memory and
debugging.  For example...if you have a million geoms that all have a
pointer to the same spatial reference class then you only need one SRS
class versus a million of them.  The SRS class refcount will be a
million and is guaranteed to be around until the last geom decrements
the ref count to zero.  Also, this way you can easily and quickly change
a prop on the SRS class that is immediately available to all million
geoms.  You can also, easily re-assign the SRS of an individual geom
without disrupting the other 999,999 geoms.  

So the short answer is, an enterprise api should have both smart
pointers and ref-counting available as an option.  

The email I just sent before this one has code examples of a
smart-pointer template class that does both.  It's based after MS COM's
CComPtr<> class, but is ansi and will run cross platform.  It's small,
light-weight, polymorphic and works great.  Geos definitely needs this,
but it's not going to make your app faster, just more memory
efficient...and you won't have to be calling "delete" all over the place
anymore.

Increasing speed is all about looping and allocating/de-allocating in
your app.  The more times you loop through coords and alloc/dealloc you
are consuming lots of clock cycles.  Think about what it takes to alloc
20 classes for each loop in a million features...if you look at the
disassembler you would be amazed.

Martin


-----Original Message-----
From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
Sent: Monday, January 31, 2005 3:50 PM
To: GEOS Development List
Subject: RE: [geos-devel] JTS/GEOS performance


I can see how smart pointers can help with program correctness.  Do they
help with performance?  

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Norman Vine [mailto:nhv@cape.com]
> Sent: January 31, 2005 11:31 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Martin Davis writes:
> > 
> > Hmmm.  This seems fundamentally the wrong approach.  JTS
> does not need
> > the flexibility of linked lists inside CoordinateSequences.
>  It sounds
> > like you are trying to build a garbage-collected memory management
> > layer.  This may be the only reasonable solution.  However, rather 
> > than hacking this into the existing code in an obtrusive 
> kind of way,
> > it would be nicer to look for a clean, layered solution.  Are there
> > any open source GC packages for C++?
> 
> There are several quality OpenSource C++ Memory Managers but
> ... This is *exactly* the kind of thing that smart_pointers 
> have made sort of obsolete  :-)
> 
http://boost.org/libs/smart_ptr/smart_ptr.htm

Norman
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From mbdavis at VividSolutions.com  Mon Jan 31 19:33:35 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027225878@venus.VividSolutions.com>

Thanks for the detailed comments, Martin.  It's certainly useful having
someone review the code at this level, and even more useful for them to
actually provide alternative implementations.

A few comments in response:

1.  The new JTS offers this scheme as well.  In fact, GEOS also provides
the ability to do this.  However, the key to making use of the
efficiency possible with an alternate storage format is to avoid having
to extract large numbers of points into other kinds of data structures
for geometric calculations.  This is fairly straightforward to do for
simple geometric algorithms, but much harder to do for complex
algorithms such as optimized intersection tests.  The new JTS tries to
strike a better balance between these conflicting requirements by
providing some optimized predicate tests (intersects and contains) for
simple cases (rectangles).  This could be extended to handle arbitrary
geometries for intersects, with some work.   With quite a bit more work
the internal intersection subsystem could be optimized as well, I think.

How are you intersection tests in a performant way?  All approached that
I've seen are *much* more complex to implement than the brute force
technique, and require construction of numerous objects to build
internal data structures.

> etc...) I have a generic algorithms class that has basic math 
> functions for doing the operations that take array pointers 
> for X and Y and the algorithms simply operate on the arrays 
> and know nothing about my SFS objects.  This is based off of 

JTS has numerous algorithms base on coordinate lists - it's just that in
the initial implementation they operated on Coordinate[] objects.  Many
of them could be rewritten to use CoordinateSequences.  This exacts a
bit of a time penalty in the Java world, since it requires more function
calls.  C++ compilers could probably optimize this away.

After looking at your LineString implementation, I'm not clear how your
"generic algorithms class" handles the full complexity of the SFS
DE-9IM.   Even the "straightforward" predicates have some complexities
which to my analysis require knowledge of the topology of the containing
geometries.  Does your code implement the SFS predicate semantics?

> I store the data.  In addition to this, each of my SFS 
> geometry implmentations (point, linestring, polygon) uses the 
> algorithms differently in order to optimize the processing 
> for each geomoetry type.  Also, this type of strategy allows 

How do you deal with double-dispatch?  E.g. how does
Point.intersect(Geometry) handle different kinds of geometry arguments?
Do you have some way of dealing with the combinatorial explosion of
[type] x [type] ?



Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Chapman, Martin [mailto:MChapman@sanz.com] 
> Sent: January 31, 2005 3:40 PM
> To: Martin Davis; strk@refractions.net; pramsey@refractions.net
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Strk, Martin, Paul,
> 
> Well, I spent some time looking at the code and here are some 
> initial comments.
> 
> 1.  The CoordinateSequence object and it's sub class(s) may 
> be causing issues reguarding processing speed and memory 
> consumption.  In my model I use two vectors to store the x 
> and y points (on the heap), thus I avoid the overhead of of a 
> class instantiation for each coordinate pair. When dealing 
> with millions of points, that can add up.  Also, I provide a 
> way to set and get the vectors by passing pointers to the the 
> arrays that requires no copying of the points.  I saw several 
> places in geos where the coordinate points are copied.  
> Depending on how those functions are used could result in a 
> lot of copies of the points.
> 
> 2.  When I pass points for processing (like intersect, 
> contains, within,
> etc...) I have a generic algorithms class that has basic math 
> functions for doing the operations that take array pointers 
> for X and Y and the algorithms simply operate on the arrays 
> and know nothing about my SFS objects.  This is based off of 
> the same type of design pattern that STL uses...data 
> containers and algorithms.  That way I can easily write new 
> algorithms, or optimized algorithms without changing the way 
> I store the data.  In addition to this, each of my SFS 
> geometry implmentations (point, linestring, polygon) uses the 
> algorithms differently in order to optimize the processing 
> for each geomoetry type.  Also, this type of strategy allows 
> me to avoid the overhead that geos has when doing an 
> intersection for example, because I don't allocate a bunch of 
> class objects for each intersection test.  I noticed in geos 
> that to do an intersect/contains/within/touches/etc... That 
> you are creating and destroying many objects for each geometry. 
> 
> Comments below...
> 1.  Your comment about the linked lists.  Lists versus arrays 
> is really a matter of how you use your data.  For instance, a 
> list is fast when inserting and removing elements in your 
> container because all that is needed is to reassign some 
> pointers, but is extremely slow for random access because you 
> need to traverse the list for each random access. The random 
> search time for a list will be linear as the size of your 
> list grows.  Vectors (arrays) on the other hand are great for 
> random access because they have the [] function that takes an 
> array index, and the array bytes are stored sequentially.  
> Inserting and deleting in an array on the  hand are very 
> slow, because the array needs to be resized frequently which 
> results in a copy of the data.  So, changing you 
> CoordinateSequence object to use a list will only be helpful 
> if you are inserting/removing frequently...which is probably 
> not the case which vector data...so I would stick with 
> vectors if I was you.  Plus I can use memcpy with vectors and 
> pass them easily into OGR without copying points.
> 
> 2.  Smart pointers.  I agree that you guys need a smart 
> pointer class that will work on all of your classes (not for 
> speed though, just mem management).  That's what I have in my 
> model.  I wrote a smart pointer template class (CVPPtr< 
> ISomeInterface>) for my api that works with all my objects, 
> and all my objects are referenced counted and destroy 
> themselves intellegently when the ref count drops to zero.  
> You can use auto_ptr for non-reference counted objects, but 
> that results in a lot more copies of objects than a 
> ref-counted system.  They also intelligently addref whenever 
> you assign the class to another pointer. This pays off big 
> when I have millions of geomoetries that all have a pointer 
> to the same spatial reference class, but can easily be 
> re-assigned individually or in mass to another SRS. 
> 
> I am still looking at the code to see what else I can come up 
> with, just haven't had a lot of time.  The smart pointer code 
> is attached along with a base class template class IVPUnknown 
> and IVPUnknownImpl (which is essentially a cross-platform COM 
> model and one implementation class CVPEnvelope so you could 
> see an example of my smart pointer/ ref counting 
> functionality.  Here is an example of what would happen when 
> using my smart pointer class:
> 
> // in some function
> CVPPtr< IVPEnvelope> spEnvelope = new 
> CVPEnvelope(envelope.MinX, envelope.MinY, envelope.MaxX, 
> envelope.MaxY);  // refcount == 1 CVPPtr< IVPEnvelope> 
> spEnvelope2 = spEnvelope;  // refcount == 2 
> spEnvelope2.Release();  // refcount == 1 
> spEnvelope2.Attach(spEnvelope); // refcount == 1 
> spEnvelope2.Detach(); // refcount == 1
> IVPEnvelope* pEnvelope = spEnvelope; // refcount == 1
> pEnvelope->AddRef(); // refcount == 2;
> spEnvelope2 = pEnvelope; // refcount == 3
> pEnvelope->Release(); // refcount == 2;
> return spEnvelope.Detach(); // refcount == 2
> } // end of funtion - spEnvelope2 goes out of scope and 
> decrements the refcount to 1 again, but the calling function 
> has an object with only one ref count and can destroy it 
> whenever it goes out of scope.  
> 
> Therefore, if the function crashes, all smart pointers are 
> unwound from the stack and the destructor descrement until 
> the refcount == 0 and then the object automatically deletes 
> itself (thus...no mem leaks).  For this to work, all 
> interfaces that need ref counting need to derive from the 
> IVPUnknown interface and all objects need to derive from 
> IVPUnknownImpl...I use multiple inheritance to do this as you 
> will see in CVPEnvelope that I attached.  This code works on 
> windows and any machine that supports pthreads.  I also 
> attached my LineString class for another example.  
> 
> Hope this is of some value to you guys... 
> 
> Martin
> 
> -----Original Message-----
> From: strk@refractions.net [mailto:strk@refractions.net] 
> Sent: Monday, January 31, 2005 3:43 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] JTS/GEOS performance
> 
> 
> On Fri, Jan 28, 2005 at 11:50:47AM -0700, Chapman, Martin wrote:
> > Martin,
> > 
> > First I want to say that you guys are showing a lot of 
> professionalism
> 
> > by how gracefully you guys accept constructive criticism from your
> > users.  Not many developers can take such comments with open minds.
> 
> I think developers with non-open/free-minds will hardly be 
> comfortable with open/free-software developments models.
> 
> > Secondly, I agree with your comments below.  Porting from 
> one language
> 
> > to the other can be tricky when it comes to memory 
> management, and in
> > some cases it will be tough to optimize just because of the 
> nature of 
> > the operation.
> > 
> > That said, from my observations I don't think optimizing 
> GEOS would be
> 
> > as tough as it may appear from the surface.  From what I've 
> seen it's
> > the nicest implementation of the OGC SFS I've seen yet, and 
> the object
> 
> > model is very logical and complete.  I think the 
> optimization strategy
> 
> > should be an incremental one, and a few small changes may 
> solve 80% of
> 
> > the issues for performance and memory usage.  I have a 
> bunch of ideas,
> 
> > but need some time to sit down and get back into the code before I
> > offer any concrete suggestions.  I will take some time this 
> weekend to
> 
> > see if I can come up with some easy changes.
> 
> What I've been thinking as a possible (harmless) step is 
> reducing memory fragmentation by reducing heap-allocated 
> object elements.
> 
> As for the Coordinate copies I've made some tests.
> The following table shows number of created Coordinate and 
> CoordinateSequence objects in relation to the number of 
> output and input points to the Buffer function. Input geom is 
> the one contained in the .xml file attached in my previous post.
> 
>          Input points : 3629
> 
>               buffer | out    | cted    | cted      |
>               units  | points | points  | coord seq |
>             ---------+--------+---------+-----------+
>                  100 |   5640 |   14720 |      2787 |
>                  200 |   5035 |   32206 |     12058 |
>                  500 |   3941 |  120217 |     61498 |
>                 1000 |   3060 |  317219 |    169320 |
> 
> It would be useful to try out a CoordinateSequence 
> implementation using a linked list of Coordinate pointers. It 
> has to be inspected wheter this would cleanly work with 
> current code (ie, wheter implementing the class and make it 
> the DefaultCoordinateSequence will suffice to force it's use 
> in all inner code).
> 
> All the Coordinates in that case would need to be immutable 
> and probably a Coordinate pool should be maintained to take 
> care of their mantagement (when to delete them? ref count? 
> never? on demand?). To reflect the Java way Coordinates (as 
> all objects actually) should be reference counted pointers. 
> Maybe we can do it defining a smart pointer as inherithing 
> from Coordinate.
> 
> Do you C++ guru see these as possible ways ?
> 
> --strk;
> 
> > 
> > As a quick background, I write user interfaces for remote sensing
> > archive systems using MFC for windows desktops and Java/C++ for web 
> > based applications on Linux/Windows.  We manage/provision massive 
> > vector/raster datasets for many government agencies and the 
> > intelligence/military community.  Therefore, my team and I are 
> > constantly seeking out the fastest and most efficient 
> technology for 
> > managing geo-spatial datasets.  We have really enjoyed 
> using PostGIS, 
> > and GDAL/OGR/GEOS.
> > 
> > Keep up the great work and I'll send my suggestions to you this
> > weekend.
> > 
> > Martin
> > 
> > -----Original Message-----
> > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > Sent: Friday, January 28, 2005 11:12 AM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Thanks for the detailed reply, Martin.
> > 
> > Your comments about how objects are handled probably reflects a
> > too-close adherence to the Java origins of the code.  Or, 
> they could 
> > just be plain failure to take advantage of efficiencies 
> possible with 
> > C. In either case, it seems like a substantial revision of the code 
> > base will be required.
> > 
> > Regarding your comment about the inefficiency of computing 
> intersects
> > as ! Disjoint, I'm aware of this issue and am starting to 
> take steps 
> > to address it in JTS.  I agree that for intersects at least 
> a faster 
> > general implementation is possible.  I'd be interested in 
> hearing some
> 
> > details of your implementation - for instance, how do you make the
> > intersection detection efficient?
> > 
> > As for the other named spatial predicates, I'm not sure I 
> see as much
> > opportunity for optimization.  This is due to the fact that most of 
> > the others require precise knowledge about how the boundary of one 
> > geometry interacts with the exterior or interior of another 
> geometry.
> 
> > This in turn requires knowledge of *all* intersections, not just
> > whether an intersection exists.  This might be optimizable for 
> > particular cases of geometry types, but you then have the 
> situation of
> 
> > needing to specify numerous different algorithms for different pairs
> > of geometry types. This is why the initial JTS work 
> focussed on coming
> 
> > up with a general algorithm for computing all predicates in the same
> way.
> > 
> > But it would be great if you see any opportunities for faster
> > implementations in particular cases, and if you could post 
> details so 
> > all can benefit.
> > 
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > 
> > 
> > > -----Original Message-----
> > > From: Chapman, Martin [mailto:MChapman@sanz.com]
> > > Sent: January 28, 2005 9:47 AM
> > > To: GEOS Development List
> > > Subject: RE: [geos-devel] JTS/GEOS performance
> > > 
> > > 
> > > I studied the GEOS code and here is my opinion:
> > > 
> > > 1.  GEOS makes multiple copies of the coordinates during many
> > > operations rather than storing the points once and then passing 
> > > pointers.
> > > 
> > > 2.  GEOS has a complicated object model that makes objects for
> > > everything.  To calculate most spatial operations and 
> relationships 
> > > requires the construction and destruction of many many objects.
> > > 
> > > 3.  The DE9IM implementation makes mistakes like intersects =
> > > !disjoint. That requires a full scan of all points in a poly, 
> > > whereas a straight intersect algorithm will return faster most of 
> > > the time because it can exit after it finds the first 
> intersecting 
> > > point.  In general, I think there should be optimized 
> algorithms for
> 
> > > each spatial operation/relationship rather than trying to 
> calculate
> > > the full de9-im matrix.  You can keep the matrix, just change the 
> > > way it gets populated behind the scenes.
> > > 
> > > 4.  When doing operations on point arrays, make functions 
> that takes
> 
> > > pointers to arrays and just pass the pointers in from the geometry
> > > classes.  Currently, when you call a function like 
> intersects GEOS 
> > > makes copies of points and a slew of objects for each geometry 
> > > operation.
> > > 
> > > For a comparison, we tried to use geos with postgresql 
> and used the
> > > POSTGIS intersect method.  We found it very slow so we 
> wrote our own
> 
> > > user-defined intersect function.  Ours is 109 times faster on a
> > > million plus geometries.  That means a one second query 
> for us takes
> 
> > > GEOS 109 seconds.
> > > 
> > > Martin
> > > 
> > > 
> > > 
> > > -----Original Message-----
> > > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > > Sent: Friday, January 28, 2005 10:12 AM
> > > To: GEOS Development List
> > > Subject: RE: [geos-devel] JTS/GEOS performance
> > > 
> > > 
> > > Poor alloc performance would be my first guess for the performance
> > > difference.  I would think Java is pretty optimized for memory 
> > > allocation, since it relies on it so heavily.
> > > 
> > > I think one standard approach to handling slow malloc is 
> to build a
> > > sub-allocation layer.  This would be made a bit easier in GEOS, 
> > > since almost the allocation done inside geometry methods 
> is released
> 
> > > at the end of the method.  You could probably even 
> dispense with the
> 
> > > free calls as long as you were operating in the memory pool.  (One
> > > messiness that would need to be thought out is how to support 
> > > exposing the various components such as tree indexes and noding 
> > > while still allowing a custom allocator to be supplied.  Or you
> > > could just forget about this and just support access through 
> > > geometry methods.  This is getting pretty far from the 
> > > philosophy of JTS though...).
> > > 
> > > I'm not enough of a C expert to know if this is the best route to
> > > pursue
> > > - anyone have any other ideas?
> > > 
> > > Martin Davis, Senior Technical Architect
> > > Vivid Solutions Inc.      www.vividsolutions.com
> > > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > > 
> > > 
> > > > -----Original Message-----
> > > > From: strk@refractions.net [mailto:strk@refractions.net]
> > > > Sent: January 28, 2005 4:20 AM
> > > > To: geos-devel@geos.refractions.net
> > > > Subject: [geos-devel] JTS/GEOS performance
> > > > 
> > > > 
> > > > Some time ago I've been researching about GEOS performance
> > > problems as
> > > > related to JTS. Attached is a shapefile and an .xml test
> > > you can use
> > > > to compare the two.
> > > > 
> > > > JTS does not support buffers tests, so you'll need to 
> use another
> > > > method for that. I used JUMP, which reports computation time.
> > > > 
> > > > Well. The operation is a buffer(polygon, 2000).
> > > > 
> > > >  JTS:  18 seconds
> > > > GEOS: 574 seconds (9 minutes, 34 secs)
> > > > 
> > > > GEOS computation keeps the CPU pretty busy (98.2-99.8%) 
> and takes
> > > > up to about 170 MB of ram
> > > > 
> > > > JTS seems to use 3 threads, the bigger using at most 80% of CPU,
> > > > but most of the time far below that point. JUMP reports 104MB 
> > > > committed, but I'm not sure about the meaning.
> > > > 
> > > > For GEOS, valgrind reports (with buffer 500):
> > > >  malloc/free: 2982697 allocs, 2982697 frees, 924407212 bytes
> > > > allocated.
> > > > 
> > > > How much do you think this wild allocation negatively influence
> > > > the poor performance of GEOS ?
> > > > 
> > > > --strk;
> > > > _______________________________________________
> > > > geos-devel mailing list
> > > > geos-devel@geos.refractions.net
> > > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net 
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Mon Jan 31 19:35:28 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F5C5D@venus.VividSolutions.com>

That was pretty much my point - smart pointers alone don't produce
memory efficiency, they just make the code safer (and hopefully easier).

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Chapman, Martin [mailto:MChapman@sanz.com] 
> Sent: January 31, 2005 4:18 PM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> Martin,
> 
> Smart pointers are one thing and ref-counting (garbage 
> collection) are two different but related things.
> 
> Smart pointers help prevent memory leaks.  A smart pointer is 
> always created on the stack, when the function ends they 
> always go out of scope and their destructors delete their 
> encapsulated pointer...therefore, if all heap data is wrapped 
> by a smart pointer, if the function crashes you are 
> guaranteed that the heap memory will be de-allocated because 
> the smart pointer will always be destroyed and will call it's 
> destructor. This actually means more vars on the stack, but 
> less chance for mem-leaks. 
> 
> Ref-counting allows multiple objects to share pointers to the 
> same object without the fear of some other object deleting 
> that object before you are done using it, and allows you to 
> safely pass heap data across function boundaries.  This can 
> save huge amounts of memory and debugging.  For example...if 
> you have a million geoms that all have a pointer to the same 
> spatial reference class then you only need one SRS class 
> versus a million of them.  The SRS class refcount will be a 
> million and is guaranteed to be around until the last geom 
> decrements the ref count to zero.  Also, this way you can 
> easily and quickly change a prop on the SRS class that is 
> immediately available to all million geoms.  You can also, 
> easily re-assign the SRS of an individual geom without 
> disrupting the other 999,999 geoms.  
> 
> So the short answer is, an enterprise api should have both 
> smart pointers and ref-counting available as an option.  
> 
> The email I just sent before this one has code examples of a 
> smart-pointer template class that does both.  It's based 
> after MS COM's CComPtr<> class, but is ansi and will run 
> cross platform.  It's small, light-weight, polymorphic and 
> works great.  Geos definitely needs this, but it's not going 
> to make your app faster, just more memory efficient...and you 
> won't have to be calling "delete" all over the place anymore.
> 
> Increasing speed is all about looping and 
> allocating/de-allocating in your app.  The more times you 
> loop through coords and alloc/dealloc you are consuming lots 
> of clock cycles.  Think about what it takes to alloc 20 
> classes for each loop in a million features...if you look at 
> the disassembler you would be amazed.
> 
> Martin
> 
> 
> -----Original Message-----
> From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
> Sent: Monday, January 31, 2005 3:50 PM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance
> 
> 
> I can see how smart pointers can help with program 
> correctness.  Do they help with performance?  
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: Norman Vine [mailto:nhv@cape.com]
> > Sent: January 31, 2005 11:31 AM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Martin Davis writes:
> > > 
> > > Hmmm.  This seems fundamentally the wrong approach.  JTS
> > does not need
> > > the flexibility of linked lists inside CoordinateSequences.
> >  It sounds
> > > like you are trying to build a garbage-collected memory 
> management 
> > > layer.  This may be the only reasonable solution.  
> However, rather 
> > > than hacking this into the existing code in an obtrusive
> > kind of way,
> > > it would be nicer to look for a clean, layered solution.  
> Are there 
> > > any open source GC packages for C++?
> > 
> > There are several quality OpenSource C++ Memory Managers 
> but ... This 
> > is *exactly* the kind of thing that smart_pointers have 
> made sort of 
> > obsolete  :-)
> > 
> http://boost.org/libs/smart_ptr/smart_ptr.htm
> 
> Norman
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From cgn at globexplorer.com  Mon Jan 31 19:42:44 2005
From: cgn at globexplorer.com (Chris G. Nicholas)
Date: Fri Nov  2 20:52:39 2007
Subject: [geos-devel] JTS/GEOS performance
Message-ID: <71E37EF6B7DCC1499CEA0316A256832801C98488@loki.wc.globexplorer.net>

>  an enterprise api should have both smart pointers and ref-counting available as an option.  

Martin is certainly correct that smart pointers, reference counting and garbage collection are all related.  But one has to decide if a geometry API and in-memory features are fundamentally multithreaded animals, what their persistence mechanisms are, and what happens when one thread does wierd things while others are interested in a particular feature.  One can quickly open the whole "long transaction" can of worms and semantic questions like "when does an oil slick become more than one feature" ;-) .

I would argue that reasonable assumptions, i.e. simple thread safety and *s*p*e*e*d*, are much more preferrable than exotic special cases. Straightforward readers/writer locks should suffice; (not sure what the pthread equivalent is, but on Solaris it is rwlock(3thr) ) . 


Chris

From mbdavis at VividSolutions.com  Mon Jan 31 19:45:27 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F5C5E@venus.VividSolutions.com>

It's just occurred to me that a classic issue with ref-counting is being
able to handle self-referential data structures.  Some of the data
structures in JTS/GEOS are inherently self-referential (e.g. topology
graphs).  Is there a standard pattern for coping with this kind of
problem?

Failing this, might it be better to look at a garbage-collected
approach?

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Martin Davis 
> Sent: January 31, 2005 4:35 PM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs 
> ref counting
> 
> 
> That was pretty much my point - smart pointers alone don't 
> produce memory efficiency, they just make the code safer (and 
> hopefully easier).
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: Chapman, Martin [mailto:MChapman@sanz.com]
> > Sent: January 31, 2005 4:18 PM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > Martin,
> > 
> > Smart pointers are one thing and ref-counting (garbage
> > collection) are two different but related things.
> > 
> > Smart pointers help prevent memory leaks.  A smart pointer is
> > always created on the stack, when the function ends they 
> > always go out of scope and their destructors delete their 
> > encapsulated pointer...therefore, if all heap data is wrapped 
> > by a smart pointer, if the function crashes you are 
> > guaranteed that the heap memory will be de-allocated because 
> > the smart pointer will always be destroyed and will call it's 
> > destructor. This actually means more vars on the stack, but 
> > less chance for mem-leaks. 
> > 
> > Ref-counting allows multiple objects to share pointers to the
> > same object without the fear of some other object deleting 
> > that object before you are done using it, and allows you to 
> > safely pass heap data across function boundaries.  This can 
> > save huge amounts of memory and debugging.  For example...if 
> > you have a million geoms that all have a pointer to the same 
> > spatial reference class then you only need one SRS class 
> > versus a million of them.  The SRS class refcount will be a 
> > million and is guaranteed to be around until the last geom 
> > decrements the ref count to zero.  Also, this way you can 
> > easily and quickly change a prop on the SRS class that is 
> > immediately available to all million geoms.  You can also, 
> > easily re-assign the SRS of an individual geom without 
> > disrupting the other 999,999 geoms.  
> > 
> > So the short answer is, an enterprise api should have both
> > smart pointers and ref-counting available as an option.  
> > 
> > The email I just sent before this one has code examples of a
> > smart-pointer template class that does both.  It's based 
> > after MS COM's CComPtr<> class, but is ansi and will run 
> > cross platform.  It's small, light-weight, polymorphic and 
> > works great.  Geos definitely needs this, but it's not going 
> > to make your app faster, just more memory efficient...and you 
> > won't have to be calling "delete" all over the place anymore.
> > 
> > Increasing speed is all about looping and
> > allocating/de-allocating in your app.  The more times you 
> > loop through coords and alloc/dealloc you are consuming lots 
> > of clock cycles.  Think about what it takes to alloc 20 
> > classes for each loop in a million features...if you look at 
> > the disassembler you would be amazed.
> > 
> > Martin
> > 
> > 
> > -----Original Message-----
> > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > Sent: Monday, January 31, 2005 3:50 PM
> > To: GEOS Development List
> > Subject: RE: [geos-devel] JTS/GEOS performance
> > 
> > 
> > I can see how smart pointers can help with program
> > correctness.  Do they help with performance?  
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > 
> > 
> > > -----Original Message-----
> > > From: Norman Vine [mailto:nhv@cape.com]
> > > Sent: January 31, 2005 11:31 AM
> > > To: GEOS Development List
> > > Subject: RE: [geos-devel] JTS/GEOS performance
> > > 
> > > 
> > > Martin Davis writes:
> > > > 
> > > > Hmmm.  This seems fundamentally the wrong approach.  JTS
> > > does not need
> > > > the flexibility of linked lists inside CoordinateSequences.
> > >  It sounds
> > > > like you are trying to build a garbage-collected memory
> > management
> > > > layer.  This may be the only reasonable solution.
> > However, rather
> > > > than hacking this into the existing code in an obtrusive
> > > kind of way,
> > > > it would be nicer to look for a clean, layered solution.
> > Are there
> > > > any open source GC packages for C++?
> > > 
> > > There are several quality OpenSource C++ Memory Managers
> > but ... This
> > > is *exactly* the kind of thing that smart_pointers have
> > made sort of
> > > obsolete  :-)
> > > 
> > http://boost.org/libs/smart_ptr/smart_ptr.htm
> > 
> > Norman
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From nhv at cape.com  Mon Jan 31 19:51:57 2005
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F5C5D@venus.VividSolutions.com>
Message-ID: <EKEJIKAILPONGGENMBGAKEOEKEAA.nhv@cape.com>

Martin Davis writes:
> 
> 
> That was pretty much my point - smart pointers alone don't produce
> memory efficiency, they just make the code safer (and hopefully easier).

Well they are a little faster then any garbage collection routine could ever
be but you are right 'speed issues' aren't why they are used.

Has anyone profiled the code recently,  without profiling statistics
optimization discussions are really just guesswork.

Norman 

From nhv at cape.com  Mon Jan 31 19:54:46 2005
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0274F5C5E@venus.VividSolutions.com>
Message-ID: <EKEJIKAILPONGGENMBGAOEOEKEAA.nhv@cape.com>

Martin Davis writes:
>
> It's just occurred to me that a classic issue with ref-counting is being
> able to handle self-referential data structures.  Some of the data
> structures in JTS/GEOS are inherently self-referential (e.g. topology
> graphs).  Is there a standard pattern for coping with this kind of
> problem?

The standard method of using ref/smartpointers works just fine :-)

Norman


From mbdavis at VividSolutions.com  Mon Jan 31 20:01:23 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027225879@venus.VividSolutions.com>

Something to note here is that the original profiling numbers given by
strk were based on the buffer algorithm.  Buffer is by far the most
complex algorithm in JTS, and inherently has to create lots of new
coordinate sequences (amongst other things).  There may be no way to
remove this requirement, in which case the only way to improve the speed
is to increase the speed of memory allocation.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Norman Vine [mailto:nhv@cape.com] 
> Sent: January 31, 2005 4:52 PM
> To: GEOS Development List
> Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs 
> ref counting
> 
> 
> Martin Davis writes:
> > 
> > 
> > That was pretty much my point - smart pointers alone don't produce 
> > memory efficiency, they just make the code safer (and hopefully 
> > easier).
> 
> Well they are a little faster then any garbage collection 
> routine could ever be but you are right 'speed issues' aren't 
> why they are used.
> 
> Has anyone profiled the code recently,  without profiling 
> statistics optimization discussions are really just guesswork.
> 
> Norman 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From MChapman at sanz.com  Mon Jan 31 20:08:30 2005
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <ED3A48B9840E594890A2BC172D11946501CFFF5D@mailman>

-- Has anyone profiled the code recently,  without profiling statistics
optimization discussions are really just guesswork.
I certainly agree with that statement.

Martin

-----Original Message-----
From: Norman Vine [mailto:nhv@cape.com] 
Sent: Monday, January 31, 2005 5:52 PM
To: GEOS Development List
Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs ref
counting


Martin Davis writes:
> 
> 
> That was pretty much my point - smart pointers alone don't produce 
> memory efficiency, they just make the code safer (and hopefully 
> easier).

Well they are a little faster then any garbage collection routine could
ever be but you are right 'speed issues' aren't why they are used.

Has anyone profiled the code recently,  without profiling statistics
optimization discussions are really just guesswork.

Norman 
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From nhv at cape.com  Mon Jan 31 20:14:27 2005
From: nhv at cape.com (Norman Vine)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA027225879@venus.VividSolutions.com>
Message-ID: <EKEJIKAILPONGGENMBGAGEOGKEAA.nhv@cape.com>

Martin Davis writes:
>
> Norman Vine
> > 
> > Martin Davis writes:
> > > 
> > > 
> > > That was pretty much my point - smart pointers alone don't produce 
> > > memory efficiency, they just make the code safer (and hopefully 
> > > easier).
> > 
> > Well they are a little faster then any garbage collection 
> > routine could ever be but you are right 'speed issues' aren't 
> > why they are used.
> > 
> > Has anyone profiled the code recently,  without profiling 
> > statistics optimization discussions are really just guesswork.
> 
> Something to note here is that the original profiling numbers given by
> strk were based on the buffer algorithm.  Buffer is by far the most
> complex algorithm in JTS, and inherently has to create lots of new
> coordinate sequences (amongst other things).  There may be no way to
> remove this requirement, in which case the only way to improve the speed
> is to increase the speed of memory allocation.

One thing that would probably speed things a bit is to inline the
trivial constructors and destructors :-)

It might be worth looking into special memory managers but AFAICT 
most of the 'coordinates' are actually stored in STL vectors and these 
are generally about as efficient as you can get at minimizing allocation
costs.

Norman



From mbdavis at VividSolutions.com  Mon Jan 31 20:48:39 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:40 2007
Subject: FW: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F5C62@venus.VividSolutions.com>

> It might be worth looking into special memory managers but AFAICT
> most of the 'coordinates' are actually stored in STL vectors 
> and these 
> are generally about as efficient as you can get at minimizing 
> allocation costs.

That's good to hear. 

How would you interpret the significance of strks allocation counts he
posted earlier in this thread?  There's a lot of objects being allocated
there.  Might that not imply that memory allocation is a hotspot?

And there is still the undeniable fact that JTS is faster than GEOS - in
spite of it having to rely on the hopelessly inefficient garbage
collection strategy of that environment.  8^)

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046

 

From mbdavis at VividSolutions.com  Mon Jan 31 20:50:34 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0274F5C63@venus.VividSolutions.com>

Hmmm...    I don't fully understand this scheme, but there seems to be
some warning on this page about using circular references:

"If circular referencing is possible, it is necessary to carefully use
simple pointers when it is known that the the object will be referenced
by another ref_ptr in the current scope. "

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Norman Vine [mailto:nhv@cape.com] 
> Sent: January 31, 2005 5:49 PM
> To: Martin Davis
> Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs 
> ref counting
> 
> 
> This is a reasonable summary 
> http://dburns.dhs.org/OSG/Articles/RefPointers/RefPointers.html
> 
> > -----Original Message-----
> > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
> > Sent: Monday, January 31, 2005 8:37 PM
> > To: nhv@cape.com
> > Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs ref 
> > counting
> > 
> > 
> > Do you have a reference that explains this, Norman?  I 
> always thought 
> > that self-referential structures were the classic case that 
> > ref-counting couldn't handle.  (And when I google 
> "reference counting 
> > self referential" I find an awful lot of web pages that say the same
> > thing...)
> > 
> > Martin Davis, Senior Technical Architect
> > Vivid Solutions Inc.      www.vividsolutions.com
> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> > 
> > 
> > > -----Original Message-----
> > > From: Norman Vine [mailto:nhv@cape.com]
> > > Sent: January 31, 2005 4:55 PM
> > > To: GEOS Development List
> > > Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs 
> > > ref counting
> > > 
> > > 
> > > Martin Davis writes:
> > > >
> > > > It's just occurred to me that a classic issue with 
> ref-counting is
> > > > being able to handle self-referential data structures.  
> Some of the 
> > > > data structures in JTS/GEOS are inherently 
> self-referential (e.g. 
> > > > topology graphs).  Is there a standard pattern for 
> coping with this 
> > > > kind of problem?
> > > 
> > > The standard method of using ref/smartpointers works just fine :-)
> > > 
> > > Norman
> > > 
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > 
> > 
> 

From MChapman at sanz.com  Mon Jan 31 22:42:41 2005
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <ED3A48B9840E594890A2BC172D119465E63C59@mailman>

Martin,
 
If you look at the smart pointer code I sent you earlier you will see two methods Attach() and Detach() that solve the problems listed in that url by dburns.
 
Martin

	-----Original Message----- 
	From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
	Sent: Mon 1/31/2005 6:50 PM 
	To: GEOS Development List 
	Cc: 
	Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
	
	

	Hmmm...    I don't fully understand this scheme, but there seems to be
	some warning on this page about using circular references:
	
	"If circular referencing is possible, it is necessary to carefully use
	simple pointers when it is known that the the object will be referenced
	by another ref_ptr in the current scope. "
	
	Martin Davis, Senior Technical Architect
	Vivid Solutions Inc.      www.vividsolutions.com
	Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
	Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
	
	
	> -----Original Message-----
	> From: Norman Vine [mailto:nhv@cape.com]
	> Sent: January 31, 2005 5:49 PM
	> To: Martin Davis
	> Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs
	> ref counting
	>
	>
	> This is a reasonable summary
	> http://dburns.dhs.org/OSG/Articles/RefPointers/RefPointers.html
	>
	> > -----Original Message-----
	> > From: Martin Davis [mailto:mbdavis@VividSolutions.com]
	> > Sent: Monday, January 31, 2005 8:37 PM
	> > To: nhv@cape.com
	> > Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs ref
	> > counting
	> >
	> >
	> > Do you have a reference that explains this, Norman?  I
	> always thought
	> > that self-referential structures were the classic case that
	> > ref-counting couldn't handle.  (And when I google
	> "reference counting
	> > self referential" I find an awful lot of web pages that say the same
	> > thing...)
	> >
	> > Martin Davis, Senior Technical Architect
	> > Vivid Solutions Inc.      www.vividsolutions.com
	> > Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
	> > Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
	> >
	> >
	> > > -----Original Message-----
	> > > From: Norman Vine [mailto:nhv@cape.com]
	> > > Sent: January 31, 2005 4:55 PM
	> > > To: GEOS Development List
	> > > Subject: RE: [geos-devel] JTS/GEOS performance - smart-ptr vs
	> > > ref counting
	> > >
	> > >
	> > > Martin Davis writes:
	> > > >
	> > > > It's just occurred to me that a classic issue with
	> ref-counting is
	> > > > being able to handle self-referential data structures. 
	> Some of the
	> > > > data structures in JTS/GEOS are inherently
	> self-referential (e.g.
	> > > > topology graphs).  Is there a standard pattern for
	> coping with this
	> > > > kind of problem?
	> > >
	> > > The standard method of using ref/smartpointers works just fine :-)
	> > >
	> > > Norman
	> > >
	> > > _______________________________________________
	> > > geos-devel mailing list
	> > > geos-devel@geos.refractions.net
	> > > http://geos.refractions.net/mailman/listinfo/geos-devel
	> > >
	> >
	>
	_______________________________________________
	geos-devel mailing list
	geos-devel@geos.refractions.net
	http://geos.refractions.net/mailman/listinfo/geos-devel
	

From MChapman at sanz.com  Mon Jan 31 23:05:32 2005
From: MChapman at sanz.com (Chapman, Martin)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
Message-ID: <ED3A48B9840E594890A2BC172D119465E63C5A@mailman>

Martin,
 
I don't think storing points in an stl vector is the problem.  I think the problem is definitely the copying of the point arrays many times, and allocating/deallocating lots of objects in every loop.  As an example, I use to process points by having a controlling loop that called different functions to process different geometry types (point, linestring, polygon, etc...).  When I moved the code from the functions all into the same function as my loop I saved tons of memory and gained a lot of speed.  The efficiency came from not allocating and deallocating a new stack frame for every geom I think.  Also, I removed all objects that were created inside of the loop and initialized them at the top of my function.  Then each loop I just re-assign the pointer.  This makes a noticable diff when processing tens of millions of coordinates.  Your slowness isn't initializing your points from what I understand.  It's when you do processing on the points that's slow...correct?  If that's the case then I would guess it's in your looping.
 
I think the bottom line is what someone said earlier though.  It will be a good guess at best and a lot of trial and error until you use an optimizer that can pin down what is taking the most time and resources.  We use an optimizer at work for Java and it is the bomb.  It makes us all look stupid (which by the way is not very hard).
 
Also, you guys should take a look at Frank Warmerdam's OGR code.  That code is pretty fast, although he doesn't have any notable spatial algorithms outside of geos.  His object structures are good though.  
 
P.S.  I always thought that geos should be merged into ogr and not the other way around.  Then you could read data really fast and just do spatial operations on the ogr points without having to re-copy them to geos geometry structures...just a thought.
 
Martin

	-----Original Message----- 
	From: Martin Davis [mailto:mbdavis@VividSolutions.com] 
	Sent: Mon 1/31/2005 6:48 PM 
	To: GEOS Development List 
	Cc: 
	Subject: FW: [geos-devel] JTS/GEOS performance - smart-ptr vs ref counting
	
	

	> It might be worth looking into special memory managers but AFAICT
	> most of the 'coordinates' are actually stored in STL vectors
	> and these
	> are generally about as efficient as you can get at minimizing
	> allocation costs.
	
	That's good to hear.
	
	How would you interpret the significance of strks allocation counts he
	posted earlier in this thread?  There's a lot of objects being allocated
	there.  Might that not imply that memory allocation is a hotspot?
	
	And there is still the undeniable fact that JTS is faster than GEOS - in
	spite of it having to rely on the hopelessly inefficient garbage
	collection strategy of that environment.  8^)
	
	Martin Davis, Senior Technical Architect
	Vivid Solutions Inc.      www.vividsolutions.com
	Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
	Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
	
	
	_______________________________________________
	geos-devel mailing list
	geos-devel@geos.refractions.net
	http://geos.refractions.net/mailman/listinfo/geos-devel
	

