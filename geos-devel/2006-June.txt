From strk at refractions.net  Thu Jun  1 07:54:26 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] Re: [postgis-devel] Re: GEOS-3?
In-Reply-To: <8649A9D7-65A5-4405-9B10-5F31CE1CFFDB@refractions.net>
References: <200605250901.k4P91Wd08141@webbased16.localdomain>
	<9ACFBB27-14D1-46C9-8F25-A135CBA219D5@refractions.net>
	<20060525150215.GB9589@keybit.net> <44798458.2020902@logix-tt.com>
	<8649A9D7-65A5-4405-9B10-5F31CE1CFFDB@refractions.net>
Message-ID: <20060601115426.GA5923@keybit.net>

Ok, I'm going on with installed headers reduction then.
Let me know when it's time to break.
--strk;

On Sun, May 28, 2006 at 10:52:19PM -0700, Paul Ramsey wrote:
> I'm out of town conferencing next week, so the changeover won't be  
> for at least a week.  I am contemplating taking our SVN  
> infrastructure up to 1.3.1, which would be another thing to do first.
> 
> P

From strk at refractions.net  Thu Jun  1 08:04:34 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] Headers reduction
Message-ID: <20060601120434.GB5923@keybit.net>

I'm doing one of the last steps before release 
of a first candidate of GEOS 3.0.0.

The idea is basically reducing the number of installed
headers to practically reduce the API set to be maintained.

Ideally I would only keep the headers required to do what's
exposed by the C-API, but before proceeding in that direction
I'd like to hear from current users.

In particular, the geomgraph, noding, planargraph, operation,
precision and who knows what else could theoretically be removed
from the installation.

Note that you could still access the definitions with access
to the source code, but could only use a subset of the 'geom',
'io' and 'utils' namespaces from a packaged -dev install.

Would this constitute a problem for existing users ?

--strk; 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From pablogrigoletti at yahoo.com.br  Fri Jun  2 04:17:41 2006
From: pablogrigoletti at yahoo.com.br (Pablo Souza Grigoletti)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
Message-ID: <20060602081741.C6E972C170A@netnation.refractions.net>

Hello people,

My name is Pablo, I'm Brazilian.
I'm trying to compile a Python version of GEOS.

To do this I'm using:

- geos-2.2.2
- swig-1.3.29
- Debian GNU/Linux

I did ./configure, make, make install... no problems in this part.
So, geos was installed OK.

So, I had tu use the swig (it's already installed) to do the Python
version. But when I used it, I need the file python.i.

I want to know why the file ruby.i exists and the python.i doesn't?

The following lines on geos.i include this file (python.i):

#ifdef SWIGPYTHON
%include ../python/python.i
#endif

What can I do?
Thanks,
Sorry by my terrible English.

Pablo

		
_______________________________________________________ 
Abra sua conta no Yahoo! Mail: 1GB de espaço, alertas de e-mail no celular e anti-spam realmente eficaz. 
http://mail.yahoo.com.br/

From hobu at iastate.edu  Sun Jun  4 23:50:45 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] OverlayOp::DIFFERENCE
In-Reply-To: <20060602081741.C6E972C170A@netnation.refractions.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
Message-ID: <p06230913c0a958a6e4fd@[192.168.11.4]>

Mateusz and strk,

I was working on building some makefiles for windows of xmltester, 
and I ran into an issue that is confusing.  MSVC 2003 doesn't seem to 
like line 563 of XMLTester.cpp, complaining about not finding a 
constructor:

         cl -I../../source/headers /MD /GR /O2 /D "NDEBUG" /nologo  /D 
"NOMINMAX"
  /D "WIN32_LEAN_AND_MEAN" /D "NOGDI"  /GX /c XMLTester.cpp /FoXMLTester.obj
XMLTester.cpp
XMLTester.cpp(563) : error C2589: 'constant' : illegal token on right 
side of ':
:'
XMLTester.cpp(563) : error C2143: syntax error : missing ')' before '::'
XMLTester.cpp(563) : error C2512: 
'geos::operation::overlay::overlayOp::overlayO
p' : no appropriate default constructor available
XMLTester.cpp(563) : error C2059: syntax error : ')'
NMAKE : fatal error U1077: 'cl' : return code '0x2'
Stop.

If I change the OverlayOp::DIFFERENCE enum to be 
OverlayOp::DIFFERENCE2 in both the call and the header file, things 
compile fine. What's curious is that the C API also calls difference 
this way and doesn't fail to compile.  I'm not sure if it is some 
sort of weird namespace issue.  Any ideas?

Also, http://geos.builds.hobu.net is building clean for all three 
architectures.

Howard

From strk at refractions.net  Mon Jun  5 11:09:15 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] OverlayOp::DIFFERENCE
In-Reply-To: <p06230913c0a958a6e4fd@[192.168.11.4]>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<p06230913c0a958a6e4fd@[192.168.11.4]>
Message-ID: <20060605150915.GA62099@keybit.net>

I'd rename all values by prefixing the lower-case 'op' to them.
We did it for other enums as well to reduce likelihood of
clashes with #defines.

Also, I'd give the enum a name (OpCode) and update function
signatures to enforce typechecking for them.

--strk;

On Sun, Jun 04, 2006 at 10:50:45PM -0500, Howard Butler wrote:
> Mateusz and strk,
> 
> I was working on building some makefiles for windows of xmltester, 
> and I ran into an issue that is confusing.  MSVC 2003 doesn't seem to 
> like line 563 of XMLTester.cpp, complaining about not finding a 
> constructor:
> 
>         cl -I../../source/headers /MD /GR /O2 /D "NDEBUG" /nologo  /D 
> "NOMINMAX"
>  /D "WIN32_LEAN_AND_MEAN" /D "NOGDI"  /GX /c XMLTester.cpp /FoXMLTester.obj
> XMLTester.cpp
> XMLTester.cpp(563) : error C2589: 'constant' : illegal token on right 
> side of ':
> :'
> XMLTester.cpp(563) : error C2143: syntax error : missing ')' before '::'
> XMLTester.cpp(563) : error C2512: 
> 'geos::operation::overlay::overlayOp::overlayO
> p' : no appropriate default constructor available
> XMLTester.cpp(563) : error C2059: syntax error : ')'
> NMAKE : fatal error U1077: 'cl' : return code '0x2'
> Stop.
> 
> If I change the OverlayOp::DIFFERENCE enum to be 
> OverlayOp::DIFFERENCE2 in both the call and the header file, things 
> compile fine. What's curious is that the C API also calls difference 
> this way and doesn't fail to compile.  I'm not sure if it is some 
> sort of weird namespace issue.  Any ideas?
> 
> Also, http://geos.builds.hobu.net is building clean for all three 
> architectures.
> 
> Howard
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Mon Jun  5 11:39:08 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] OverlayOp::DIFFERENCE
In-Reply-To: <20060605150915.GA62099@keybit.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<p06230913c0a958a6e4fd@[192.168.11.4]>
	<20060605150915.GA62099@keybit.net>
Message-ID: <20060605153908.GA62743@keybit.net>

I've committed the change. Tests welcome.
--strk;

On Mon, Jun 05, 2006 at 05:09:15PM +0200, strk@refractions.net wrote:
> I'd rename all values by prefixing the lower-case 'op' to them.
> We did it for other enums as well to reduce likelihood of
> clashes with #defines.
> 
> Also, I'd give the enum a name (OpCode) and update function
> signatures to enforce typechecking for them.
> 
> --strk;
> 
> On Sun, Jun 04, 2006 at 10:50:45PM -0500, Howard Butler wrote:
> > Mateusz and strk,
> > 
> > I was working on building some makefiles for windows of xmltester, 
> > and I ran into an issue that is confusing.  MSVC 2003 doesn't seem to 
> > like line 563 of XMLTester.cpp, complaining about not finding a 
> > constructor:
> > 
> >         cl -I../../source/headers /MD /GR /O2 /D "NDEBUG" /nologo  /D 
> > "NOMINMAX"
> >  /D "WIN32_LEAN_AND_MEAN" /D "NOGDI"  /GX /c XMLTester.cpp /FoXMLTester.obj
> > XMLTester.cpp
> > XMLTester.cpp(563) : error C2589: 'constant' : illegal token on right 
> > side of ':
> > :'
> > XMLTester.cpp(563) : error C2143: syntax error : missing ')' before '::'
> > XMLTester.cpp(563) : error C2512: 
> > 'geos::operation::overlay::overlayOp::overlayO
> > p' : no appropriate default constructor available
> > XMLTester.cpp(563) : error C2059: syntax error : ')'
> > NMAKE : fatal error U1077: 'cl' : return code '0x2'
> > Stop.
> > 
> > If I change the OverlayOp::DIFFERENCE enum to be 
> > OverlayOp::DIFFERENCE2 in both the call and the header file, things 
> > compile fine. What's curious is that the C API also calls difference 
> > this way and doesn't fail to compile.  I'm not sure if it is some 
> > sort of weird namespace issue.  Any ideas?
> > 
> > Also, http://geos.builds.hobu.net is building clean for all three 
> > architectures.
> > 
> > Howard

From cgnicholas at alamedanet.net  Mon Jun  5 11:39:35 2006
From: cgnicholas at alamedanet.net (Chris Nicholas)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
Message-ID: <44845037.6060109@alamedanet.net>

Hi - probably right in front of me, but...

just trying to get started on a simple C program directly against the 
geos lib.

I did the typical geos "configure; make; make install" I usually do for 
the (most exellent) PostGIS package;  but don't find geos_c.h, or a 
libgeos_c.so anywhere.  Didn't see anything in "configure --help" either...

Where should I be looking?

thanks in advance!
Chris



From strk at refractions.net  Mon Jun  5 15:26:24 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
In-Reply-To: <44845037.6060109@alamedanet.net>
References: <44845037.6060109@alamedanet.net>
Message-ID: <20060605192624.GC63375@keybit.net>

On Mon, Jun 05, 2006 at 11:39:35AM -0400, Chris Nicholas wrote:
> Hi - probably right in front of me, but...
> 
> just trying to get started on a simple C program directly against the 
> geos lib.
> 
> I did the typical geos "configure; make; make install" I usually do for 
> the (most exellent) PostGIS package;  but don't find geos_c.h, or a 
> libgeos_c.so anywhere.  Didn't see anything in "configure --help" either...
> 
> Where should I be looking?

Any GEOS-2.x package should install it.
--strk;

From pramsey at refractions.net  Mon Jun  5 15:43:04 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
In-Reply-To: <44845037.6060109@alamedanet.net>
References: <44845037.6060109@alamedanet.net>
Message-ID: <91AC0509-294E-41FD-9FCD-B0FBDB0C35F9@refractions.net>

Somewhere in /usr/local/include by default...

find /usr/local/include -name "*geos*"

On Jun 5, 2006, at 8:39 AM, Chris Nicholas wrote:

> Hi - probably right in front of me, but...
>
> just trying to get started on a simple C program directly against  
> the geos lib.
>
> I did the typical geos "configure; make; make install" I usually do  
> for the (most exellent) PostGIS package;  but don't find geos_c.h,  
> or a libgeos_c.so anywhere.  Didn't see anything in "configure -- 
> help" either...
>
> Where should I be looking?
>
> thanks in advance!
> Chris
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From cgnicholas at alamedanet.net  Mon Jun  5 14:30:54 2006
From: cgnicholas at alamedanet.net (Chris Nicholas)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
In-Reply-To: <91AC0509-294E-41FD-9FCD-B0FBDB0C35F9@refractions.net>
References: <44845037.6060109@alamedanet.net>
	<91AC0509-294E-41FD-9FCD-B0FBDB0C35F9@refractions.net>
Message-ID: <4484785E.20001@alamedanet.net>

[cgn@localhost local]$ find . -name \*geos\* -print
./bin/geos-config
./include/geos
./include/geos/geosAlgorithm.h
./include/geos.h
./lib/libgeos.so.2.1.4
./lib/libgeos.so.2
./lib/libgeos.so
./lib/libgeos.la
./lib/libgeos.a
[cgn@localhost local]$

Chris

Paul Ramsey wrote:

> Somewhere in /usr/local/include by default...
>
> find /usr/local/include -name "*geos*"
>
> On Jun 5, 2006, at 8:39 AM, Chris Nicholas wrote:
>
>> Hi - probably right in front of me, but...
>>
>> just trying to get started on a simple C program directly against  
>> the geos lib.
>>
>> I did the typical geos "configure; make; make install" I usually do  
>> for the (most exellent) PostGIS package;  but don't find geos_c.h,  
>> or a libgeos_c.so anywhere.  Didn't see anything in "configure -- 
>> help" either...
>>
>> Where should I be looking?
>>
>> thanks in advance!
>> Chris
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> .
>


From cgnicholas at alamedanet.net  Mon Jun  5 14:32:15 2006
From: cgnicholas at alamedanet.net (Chris Nicholas)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
In-Reply-To: <4484785E.20001@alamedanet.net>
References: <44845037.6060109@alamedanet.net>	<91AC0509-294E-41FD-9FCD-B0FBDB0C35F9@refractions.net>
	<4484785E.20001@alamedanet.net>
Message-ID: <448478AF.5030706@alamedanet.net>

[cgn@localhost local]$ pwd
/usr/local


Chris Nicholas wrote:

> [cgn@localhost local]$ find . -name \*geos\* -print
> ./bin/geos-config
> ./include/geos
> ./include/geos/geosAlgorithm.h
> ./include/geos.h
> ./lib/libgeos.so.2.1.4
> ./lib/libgeos.so.2
> ./lib/libgeos.so
> ./lib/libgeos.la
> ./lib/libgeos.a
> [cgn@localhost local]$
>
> Chris
>
> Paul Ramsey wrote:
>
>> Somewhere in /usr/local/include by default...
>>
>> find /usr/local/include -name "*geos*"
>>
>> On Jun 5, 2006, at 8:39 AM, Chris Nicholas wrote:
>>
>>> Hi - probably right in front of me, but...
>>>
>>> just trying to get started on a simple C program directly against  
>>> the geos lib.
>>>
>>> I did the typical geos "configure; make; make install" I usually do  
>>> for the (most exellent) PostGIS package;  but don't find geos_c.h,  
>>> or a libgeos_c.so anywhere.  Didn't see anything in "configure -- 
>>> help" either...
>>>
>>> Where should I be looking?
>>>
>>> thanks in advance!
>>> Chris
>>>
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>> .
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> .
>


From pablogrigoletti at yahoo.com.br  Mon Jun  5 21:37:22 2006
From: pablogrigoletti at yahoo.com.br (Pablo Souza Grigoletti)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <20060602081741.C6E972C170A@netnation.refractions.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
Message-ID: <20060606013722.84D1C2C19B2@netnation.refractions.net>

Hi people,

As nobody answers my question... I want to know if:

- Nobody knows the answer?
- Nobody wants to answer?
- Or nobody undestands me?

Best regards
Pablo

> Hello people,
> 
> My name is Pablo, I'm Brazilian.
> I'm trying to compile a Python version of GEOS.
> 
> To do this I'm using:
> 
> - geos-2.2.2
> - swig-1.3.29
> - Debian GNU/Linux
> 
> I did ./configure, make, make install... no problems in this part.
> So, geos was installed OK.
> 
> So, I had tu use the swig (it's already installed) to do the Python
> version. But when I used it, I need the file python.i.
> 
> I want to know why the file ruby.i exists and the python.i doesn't?
> 
> The following lines on geos.i include this file (python.i):
> 
> #ifdef SWIGPYTHON
> %include ../python/python.i
> #endif
> 
> What can I do?
> Thanks,
> Sorry by my terrible English.
> 
> Pablo

		
_______________________________________________________ 
Navegue com o Yahoo! Acesso Grátis, assista aos jogos do Brasil na Copa e ganhe prêmios de hora em hora! 
http://br.yahoo.com/artilheirodacopa/

From woodbri at swoodbridge.com  Mon Jun  5 22:11:46 2006
From: woodbri at swoodbridge.com (Stephen Woodbridge)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <20060606013722.84D1C2C19B2@netnation.refractions.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
Message-ID: <4484E462.6030402@swoodbridge.com>

Pablo Souza Grigoletti wrote:
> Hi people,
> 
> As nobody answers my question... I want to know if:
> 
> - Nobody knows the answer?

Sorry, I don't know the answer. In fact, I'm not sure who supports the 
python swig wrapper. If it is/was Sean Gilles, I believe he has a new 
job and is not actively supporting this at the moment.

> - Nobody wants to answer?

Can imagine why that would be?

> - Or nobody undestands me?

I understand you and your posts are getting through.

-Steve W

> 
> Best regards
> Pablo
> 
>> Hello people,
>>
>> My name is Pablo, I'm Brazilian.
>> I'm trying to compile a Python version of GEOS.
>>
>> To do this I'm using:
>>
>> - geos-2.2.2
>> - swig-1.3.29
>> - Debian GNU/Linux
>>
>> I did ./configure, make, make install... no problems in this part.
>> So, geos was installed OK.
>>
>> So, I had tu use the swig (it's already installed) to do the Python
>> version. But when I used it, I need the file python.i.
>>
>> I want to know why the file ruby.i exists and the python.i doesn't?
>>
>> The following lines on geos.i include this file (python.i):
>>
>> #ifdef SWIGPYTHON
>> %include ../python/python.i
>> #endif
>>
>> What can I do?
>> Thanks,
>> Sorry by my terrible English.
>>
>> Pablo
> 
> 		
> _______________________________________________________ 
> Navegue com o Yahoo! Acesso Gr?tis, assista aos jogos do Brasil na Copa e ganhe pr?mios de hora em hora! 
> http://br.yahoo.com/artilheirodacopa/
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 


From sgillies at frii.com  Mon Jun  5 22:33:02 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <4484E462.6030402@swoodbridge.com>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
	<4484E462.6030402@swoodbridge.com>
Message-ID: <0605FDF2-C406-4EB0-9193-86E0E9370DDC@frii.com>

It's true, I am no longer very interested in SWIG. I was thrown from  
the SWIG bandwagon at version 1.3.28. Howard Butler and I are working  
on a new Python module based on the GEOS C API. I wrote a bit about  
it at

   http://zcologia.com/news/150

The code is at

   http://trac.gispython.org/projects/PCL/browser/PCL/trunk/PCL-Spatial

I strongly recommend this package for Python users.

cheers,
Sean

On Jun 5, 2006, at 8:11 PM, Stephen Woodbridge wrote:

> Pablo Souza Grigoletti wrote:
>> Hi people,
>> As nobody answers my question... I want to know if:
>> - Nobody knows the answer?
>
> Sorry, I don't know the answer. In fact, I'm not sure who supports  
> the python swig wrapper. If it is/was Sean Gilles, I believe he has  
> a new job and is not actively supporting this at the moment.
>
>> - Nobody wants to answer?
>
> Can imagine why that would be?
>
>> - Or nobody undestands me?
>
> I understand you and your posts are getting through.
>
> -Steve W
>
>> Best regards
>> Pablo
>>> Hello people,
>>>
>>> My name is Pablo, I'm Brazilian.
>>> I'm trying to compile a Python version of GEOS.
>>>
>>> To do this I'm using:
>>>
>>> - geos-2.2.2
>>> - swig-1.3.29
>>> - Debian GNU/Linux
>>>
>>> I did ./configure, make, make install... no problems in this part.
>>> So, geos was installed OK.
>>>
>>> So, I had tu use the swig (it's already installed) to do the Python
>>> version. But when I used it, I need the file python.i.
>>>
>>> I want to know why the file ruby.i exists and the python.i doesn't?
>>>
>>> The following lines on geos.i include this file (python.i):
>>>
>>> #ifdef SWIGPYTHON
>>> %include ../python/python.i
>>> #endif
>>>
>>> What can I do?
>>> Thanks,
>>> Sorry by my terrible English.
>>>
>>> Pablo
>> 		
>> _______________________________________________________ Navegue  
>> com o Yahoo! Acesso Gr?tis, assista aos jogos do Brasil na Copa e  
>> ganhe pr?mios de hora em hora! http://br.yahoo.com/artilheirodacopa/

---
Sean Gillies
http://zcologia.com




From cfis at savagexi.com  Mon Jun  5 23:21:17 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <20060606013722.84D1C2C19B2@netnation.refractions.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
Message-ID: <4484F4AD.5090201@savagexi.com>

Hi Pablo,

Sorry not to respond sooner - I just got back from vacation.

What python.i is used for is to generate geos_wrap.cxx using SWIG.  If 
you look, you'll see that file exists.  So theory you could get by 
without python.i and just run the part of the build script that 
builds/installs the extensions.

However, there unfortunately there is a problem with that because the 
geos_wrap.cxx file includes pointers to a method called readHex which 
does not actually exist in geos 2.2.2 (well, it does in my version but 
no release version).

So I'd recommend:

Create python.i in your swig/python directory.  Then put this code into it:

%template(vector_GeometryP) std::vector<geos::Geometry *>;
%template(vector_LineStringP) std::vector<geos::LineString *>;
%template(vector_PolygonP) std::vector<geos::Polygon *>;

Then make sure you have swig 1.3.29 installed.  Then try the build 
script again.  You may also want to delete geos_wrap.cxx before you start.

Hope this helps,

Charlie



Pablo Souza Grigoletti wrote:
> Hi people,
> 
> As nobody answers my question... I want to know if:
> 
> - Nobody knows the answer?
> - Nobody wants to answer?
> - Or nobody undestands me?
> 
> Best regards
> Pablo
> 
>> Hello people,
>>
>> My name is Pablo, I'm Brazilian.
>> I'm trying to compile a Python version of GEOS.
>>
>> To do this I'm using:
>>
>> - geos-2.2.2
>> - swig-1.3.29
>> - Debian GNU/Linux
>>
>> I did ./configure, make, make install... no problems in this part.
>> So, geos was installed OK.
>>
>> So, I had tu use the swig (it's already installed) to do the Python
>> version. But when I used it, I need the file python.i.
>>
>> I want to know why the file ruby.i exists and the python.i doesn't?
>>
>> The following lines on geos.i include this file (python.i):
>>
>> #ifdef SWIGPYTHON
>> %include ../python/python.i
>> #endif
>>
>> What can I do?
>> Thanks,
>> Sorry by my terrible English.
>>
>> Pablo
> 
> 		
> _______________________________________________________ 
> Navegue com o Yahoo! Acesso Gr?tis, assista aos jogos do Brasil na Copa e ganhe pr?mios de hora em hora! 
> http://br.yahoo.com/artilheirodacopa/
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060605/dcdef7ee/smime.bin
From cfis at savagexi.com  Mon Jun  5 23:24:13 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <4484F4AD.5090201@savagexi.com>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
	<4484F4AD.5090201@savagexi.com>
Message-ID: <4484F55D.6040300@savagexi.com>

For a bit more info, but with a Ruby bent, I put this online:

http://cfis.savagexi.com/articles/2006/04/12/ruby-bindings-for-geos.

If I get a chance, I'll put some info together for the Python module also.

Charlie

Charlie Savage wrote:
> Hi Pablo,
> 
> Sorry not to respond sooner - I just got back from vacation.
> 
> What python.i is used for is to generate geos_wrap.cxx using SWIG.  If 
> you look, you'll see that file exists.  So theory you could get by 
> without python.i and just run the part of the build script that 
> builds/installs the extensions.
> 
> However, there unfortunately there is a problem with that because the 
> geos_wrap.cxx file includes pointers to a method called readHex which 
> does not actually exist in geos 2.2.2 (well, it does in my version but 
> no release version).
> 
> So I'd recommend:
> 
> Create python.i in your swig/python directory.  Then put this code into it:
> 
> %template(vector_GeometryP) std::vector<geos::Geometry *>;
> %template(vector_LineStringP) std::vector<geos::LineString *>;
> %template(vector_PolygonP) std::vector<geos::Polygon *>;
> 
> Then make sure you have swig 1.3.29 installed.  Then try the build 
> script again.  You may also want to delete geos_wrap.cxx before you start.
> 
> Hope this helps,
> 
> Charlie
> 
> 
> 
> Pablo Souza Grigoletti wrote:
>> Hi people,
>>
>> As nobody answers my question... I want to know if:
>>
>> - Nobody knows the answer?
>> - Nobody wants to answer?
>> - Or nobody undestands me?
>>
>> Best regards
>> Pablo
>>
>>> Hello people,
>>>
>>> My name is Pablo, I'm Brazilian.
>>> I'm trying to compile a Python version of GEOS.
>>>
>>> To do this I'm using:
>>>
>>> - geos-2.2.2
>>> - swig-1.3.29
>>> - Debian GNU/Linux
>>>
>>> I did ./configure, make, make install... no problems in this part.
>>> So, geos was installed OK.
>>>
>>> So, I had tu use the swig (it's already installed) to do the Python
>>> version. But when I used it, I need the file python.i.
>>>
>>> I want to know why the file ruby.i exists and the python.i doesn't?
>>>
>>> The following lines on geos.i include this file (python.i):
>>>
>>> #ifdef SWIGPYTHON
>>> %include ../python/python.i
>>> #endif
>>>
>>> What can I do?
>>> Thanks,
>>> Sorry by my terrible English.
>>>
>>> Pablo
>>
>>        
>> _______________________________________________________ Navegue com o 
>> Yahoo! Acesso Gr?tis, assista aos jogos do Brasil na Copa e ganhe 
>> pr?mios de hora em hora! http://br.yahoo.com/artilheirodacopa/
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060605/478ccb1b/smime.bin
From pramsey at refractions.net  Mon Jun  5 23:41:01 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
In-Reply-To: <448478AF.5030706@alamedanet.net>
References: <44845037.6060109@alamedanet.net>
	<91AC0509-294E-41FD-9FCD-B0FBDB0C35F9@refractions.net>
	<4484785E.20001@alamedanet.net> <448478AF.5030706@alamedanet.net>
Message-ID: <88FC54F7-6C8F-46AF-8D5F-A168E9899148@refractions.net>

See strk's original suggestion: you need a GEOS 2.2 or greater...  
here's my listing (it's ugly because I have installed a lot of  
versions...)

./include/geos
./include/geos/geosAlgorithm.h
./include/geos.h
./include/geos_c.h
./lib/libgeos.2.1.0.dylib
./lib/libgeos.2.1.1.dylib
./lib/libgeos.2.1.2.dylib
./lib/libgeos.2.1.3.dylib
./lib/libgeos.2.1.4.dylib
./lib/libgeos.2.2.1.dylib
./lib/libgeos.2.2.2.dylib
./lib/libgeos.2.dylib
./lib/libgeos.a
./lib/libgeos.dylib
./lib/libgeos.la
./lib/libgeos_c.1.0.1.dylib
./lib/libgeos_c.1.1.0.dylib
./lib/libgeos_c.1.dylib
./lib/libgeos_c.a
./lib/libgeos_c.dylib
./lib/libgeos_c.la



On 5-Jun-06, at 11:32 AM, Chris Nicholas wrote:

> [cgn@localhost local]$ pwd
> /usr/local
>
>
> Chris Nicholas wrote:
>
>> [cgn@localhost local]$ find . -name \*geos\* -print
>> ./bin/geos-config
>> ./include/geos
>> ./include/geos/geosAlgorithm.h
>> ./include/geos.h
>> ./lib/libgeos.so.2.1.4
>> ./lib/libgeos.so.2
>> ./lib/libgeos.so
>> ./lib/libgeos.la
>> ./lib/libgeos.a
>> [cgn@localhost local]$
>>
>> Chris
>>
>> Paul Ramsey wrote:
>>
>>> Somewhere in /usr/local/include by default...
>>>
>>> find /usr/local/include -name "*geos*"
>>>
>>> On Jun 5, 2006, at 8:39 AM, Chris Nicholas wrote:
>>>
>>>> Hi - probably right in front of me, but...
>>>>
>>>> just trying to get started on a simple C program directly  
>>>> against  the geos lib.
>>>>
>>>> I did the typical geos "configure; make; make install" I usually  
>>>> do  for the (most exellent) PostGIS package;  but don't find  
>>>> geos_c.h,  or a libgeos_c.so anywhere.  Didn't see anything in  
>>>> "configure -- help" either...
>>>>
>>>> Where should I be looking?
>>>>
>>>> thanks in advance!
>>>> Chris
>>>>
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@geos.refractions.net
>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>>
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>> .
>>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>> .
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From pablogrigoletti at yahoo.com.br  Tue Jun  6 00:43:24 2006
From: pablogrigoletti at yahoo.com.br (Pablo Souza Grigoletti)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <4484F4AD.5090201@savagexi.com>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
	<4484F4AD.5090201@savagexi.com>
Message-ID: <20060606044324.26F5C2C19FD@netnation.refractions.net>

Hi Charlie,

I did what you said:

- mv geos_wrap.cxx geos_wrap.cxx.old
- I created python.i with the code that you gave me. 
- swig -c++ -python -modern -o geos_wrap.cxx ../geos.i


../../source/headers/geos/geom.h:671: Warning(509): Overloaded
geos::CoordinateS equence::hasRepeatedPoints(geos::CoordinateSequence
const *) is shadowed by hasR epeatedPoints() const at
../../source/headers/geos/geom.h:658.
../../source/headers/geos/geom.h:684: Warning(509): Overloaded
geos::CoordinateS equence::minCoordinate(geos::CoordinateSequence *) is
shadowed by minCoordinate( ) const at
../../source/headers/geos/geom.h:661.


- python setup.py build


...
geos_wrap.cxx: In function 'geos::Geometry*
geos_Geometry_fromHEX(std::string)': geos_wrap.cxx:4417: error: 'class
geos::WKBReader' has no member named 'readHEX' geos_wrap.cxx: In
function 'PyObject* _wrap_Geometry_srid_set(PyObject*, PyObjec t*)':
geos_wrap.cxx:24176: warning: passing 'double' for argument 1 to
'virtual void g eos::Geometry::setSRID(int)' error: command 'gcc' failed
with exit status 1


As you said me, a problem with readHEX happened.
do you have any suggestion?

Ahh, I have the SWIG right version:


# swig -version
SWIG Version 1.3.29


Best regards.
Pablo


On Mon, 05 Jun 2006 21:21:17 -0600
Charlie Savage <cfis@savagexi.com> wrote:

> Hi Pablo,
> 
> Sorry not to respond sooner - I just got back from vacation.
> 
> What python.i is used for is to generate geos_wrap.cxx using SWIG.  If
> 
> you look, you'll see that file exists.  So theory you could get by 
> without python.i and just run the part of the build script that 
> builds/installs the extensions.
> 
> However, there unfortunately there is a problem with that because the 
> geos_wrap.cxx file includes pointers to a method called readHex which 
> does not actually exist in geos 2.2.2 (well, it does in my version but
> 
> no release version).
> 
> So I'd recommend:
> 
> Create python.i in your swig/python directory.  Then put this code
> into it:
> 
> %template(vector_GeometryP) std::vector<geos::Geometry *>;
> %template(vector_LineStringP) std::vector<geos::LineString *>;
> %template(vector_PolygonP) std::vector<geos::Polygon *>;
> 
> Then make sure you have swig 1.3.29 installed.  Then try the build 
> script again.  You may also want to delete geos_wrap.cxx before you
> start.
> 
> Hope this helps,
> 
> Charlie

		
_______________________________________________________ 
Abra sua conta no Yahoo! Mail: 1GB de espaço, alertas de e-mail no celular e anti-spam realmente eficaz. 
http://mail.yahoo.com.br/

From cgnicholas at alamedanet.net  Mon Jun  5 23:20:13 2006
From: cgnicholas at alamedanet.net (Chris Nicholas)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] C API question...
In-Reply-To: <88FC54F7-6C8F-46AF-8D5F-A168E9899148@refractions.net>
References: <44845037.6060109@alamedanet.net>	<91AC0509-294E-41FD-9FCD-B0FBDB0C35F9@refractions.net>	<4484785E.20001@alamedanet.net>
	<448478AF.5030706@alamedanet.net>
	<88FC54F7-6C8F-46AF-8D5F-A168E9899148@refractions.net>
Message-ID: <4484F46D.1080705@alamedanet.net>

indeed; installation of latest/greatest finds all these goodies.  the 
moral of the story being: "when in doubt; upgrade!"

Chris

Paul Ramsey wrote:

> See strk's original suggestion: you need a GEOS 2.2 or greater...  
> here's my listing (it's ugly because I have installed a lot of  
> versions...)
>
> ./include/geos
> ./include/geos/geosAlgorithm.h
> ./include/geos.h
> ./include/geos_c.h
> ./lib/libgeos.2.1.0.dylib
> ./lib/libgeos.2.1.1.dylib
> ./lib/libgeos.2.1.2.dylib
> ./lib/libgeos.2.1.3.dylib
> ./lib/libgeos.2.1.4.dylib
> ./lib/libgeos.2.2.1.dylib
> ./lib/libgeos.2.2.2.dylib
> ./lib/libgeos.2.dylib
> ./lib/libgeos.a
> ./lib/libgeos.dylib
> ./lib/libgeos.la
> ./lib/libgeos_c.1.0.1.dylib
> ./lib/libgeos_c.1.1.0.dylib
> ./lib/libgeos_c.1.dylib
> ./lib/libgeos_c.a
> ./lib/libgeos_c.dylib
> ./lib/libgeos_c.la
>
>
>
> On 5-Jun-06, at 11:32 AM, Chris Nicholas wrote:
>
>> [cgn@localhost local]$ pwd
>> /usr/local
>>
>>
>> Chris Nicholas wrote:
>>
>>> [cgn@localhost local]$ find . -name \*geos\* -print
>>> ./bin/geos-config
>>> ./include/geos
>>> ./include/geos/geosAlgorithm.h
>>> ./include/geos.h
>>> ./lib/libgeos.so.2.1.4
>>> ./lib/libgeos.so.2
>>> ./lib/libgeos.so
>>> ./lib/libgeos.la
>>> ./lib/libgeos.a
>>> [cgn@localhost local]$
>>>
>>> Chris
>>>
>>> Paul Ramsey wrote:
>>>
>>>> Somewhere in /usr/local/include by default...
>>>>
>>>> find /usr/local/include -name "*geos*"
>>>>
>>>> On Jun 5, 2006, at 8:39 AM, Chris Nicholas wrote:
>>>>
>>>>> Hi - probably right in front of me, but...
>>>>>
>>>>> just trying to get started on a simple C program directly  
>>>>> against  the geos lib.
>>>>>
>>>>> I did the typical geos "configure; make; make install" I usually  
>>>>> do  for the (most exellent) PostGIS package;  but don't find  
>>>>> geos_c.h,  or a libgeos_c.so anywhere.  Didn't see anything in  
>>>>> "configure -- help" either...
>>>>>
>>>>> Where should I be looking?
>>>>>
>>>>> thanks in advance!
>>>>> Chris
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@geos.refractions.net
>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>>
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@geos.refractions.net
>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>> .
>>>>
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>> .
>>>
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> .
>


From cfis at savagexi.com  Tue Jun  6 01:58:25 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <20060606044324.26F5C2C19FD@netnation.refractions.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>	<20060606013722.84D1C2C19B2@netnation.refractions.net>	<4484F4AD.5090201@savagexi.com>
	<20060606044324.26F5C2C19FD@netnation.refractions.net>
Message-ID: <44851981.8000106@savagexi.com>

Hi Pablo,

Ok - that's because the swig files assume there is a readHex method. 
This will be fixed for 3.0, sorry about the problems in 2.2.0.

Anyway, to manually fix open geos.i in the swig directory:

1. Comment out line 166 which is:

%newobject WKBReader::readHEX;

2.  Comment out line 186-190:

%factory(geos::Geometry * geos::WKBReader::readHEX, geos::Point,
				 geos::LinearRing, geos::LineString,
				 geos::Polygon,
				 geos::MultiPoint,  	
                                  geos::MultiLineString,
				 geos::MultiPolygon,
                                  geos::GeometryCollection);

3. Comment out lines 297 to the end of the file:

%extend geos::Geometry {
	static geos::GeometryFactory& factory()
	{
		static geos::GeometryFactory factory;
		return factory;
	}

	static geos::WKBReader& reader()
	{
		#if GEOS_VERSION_MAJOR == 2
		static geos::WKBReader reader(geos_Geometry_factory());
		#else
		static geos::io::WKBReader reader(geos_Geometry_factory());
		#endif
		return reader;
	}

	static Geometry* fromWKT(std::string wkt)
	{
		std::stringstream in(wkt);
		return geos_Geometry_reader().read(in);
	}
	
	static Geometry* fromHEX(std::string hex)
	{
		std::stringstream in(hex);
		return geos_Geometry_reader().readHEX(in);
	}
};

Thanks,

Charlie


Pablo Souza Grigoletti wrote:
> Hi Charlie,
> 
> I did what you said:
> 
> - mv geos_wrap.cxx geos_wrap.cxx.old
> - I created python.i with the code that you gave me. 
> - swig -c++ -python -modern -o geos_wrap.cxx ../geos.i
> 
> 
> ../../source/headers/geos/geom.h:671: Warning(509): Overloaded
> geos::CoordinateS equence::hasRepeatedPoints(geos::CoordinateSequence
> const *) is shadowed by hasR epeatedPoints() const at
> ../../source/headers/geos/geom.h:658.
> ../../source/headers/geos/geom.h:684: Warning(509): Overloaded
> geos::CoordinateS equence::minCoordinate(geos::CoordinateSequence *) is
> shadowed by minCoordinate( ) const at
> ../../source/headers/geos/geom.h:661.
> 
> 
> - python setup.py build
> 
> 
> ...
> geos_wrap.cxx: In function 'geos::Geometry*
> geos_Geometry_fromHEX(std::string)': geos_wrap.cxx:4417: error: 'class
> geos::WKBReader' has no member named 'readHEX' geos_wrap.cxx: In
> function 'PyObject* _wrap_Geometry_srid_set(PyObject*, PyObjec t*)':
> geos_wrap.cxx:24176: warning: passing 'double' for argument 1 to
> 'virtual void g eos::Geometry::setSRID(int)' error: command 'gcc' failed
> with exit status 1
> 
> 
> As you said me, a problem with readHEX happened.
> do you have any suggestion?
> 
> Ahh, I have the SWIG right version:
> 
> 
> # swig -version
> SWIG Version 1.3.29
> 
> 
> Best regards.
> Pablo
> 
> 
> On Mon, 05 Jun 2006 21:21:17 -0600
> Charlie Savage <cfis@savagexi.com> wrote:
> 
>> Hi Pablo,
>>
>> Sorry not to respond sooner - I just got back from vacation.
>>
>> What python.i is used for is to generate geos_wrap.cxx using SWIG.  If
>>
>> you look, you'll see that file exists.  So theory you could get by 
>> without python.i and just run the part of the build script that 
>> builds/installs the extensions.
>>
>> However, there unfortunately there is a problem with that because the 
>> geos_wrap.cxx file includes pointers to a method called readHex which 
>> does not actually exist in geos 2.2.2 (well, it does in my version but
>>
>> no release version).
>>
>> So I'd recommend:
>>
>> Create python.i in your swig/python directory.  Then put this code
>> into it:
>>
>> %template(vector_GeometryP) std::vector<geos::Geometry *>;
>> %template(vector_LineStringP) std::vector<geos::LineString *>;
>> %template(vector_PolygonP) std::vector<geos::Polygon *>;
>>
>> Then make sure you have swig 1.3.29 installed.  Then try the build 
>> script again.  You may also want to delete geos_wrap.cxx before you
>> start.
>>
>> Hope this helps,
>>
>> Charlie
> 
> 		
> _______________________________________________________ 
> Abra sua conta no Yahoo! Mail: 1GB de espa?o, alertas de e-mail no celular e anti-spam realmente eficaz. 
> http://mail.yahoo.com.br/
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060605/91fdcf08/smime.bin
From strk at refractions.net  Tue Jun  6 17:33:00 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <44851981.8000106@savagexi.com>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
	<4484F4AD.5090201@savagexi.com>
	<20060606044324.26F5C2C19FD@netnation.refractions.net>
	<44851981.8000106@savagexi.com>
Message-ID: <20060606213300.GA65773@keybit.net>

Since we're talking about this, I'm in the process of closing
up the 3.0.0 release. Charlie, could you give the swig/ bit
a check ? If things get complicated we can rollback to the 2.x
way of only distributing files with no attempt to automatically
build.

--strk;

On Mon, Jun 05, 2006 at 11:58:25PM -0600, Charlie Savage wrote:
> Hi Pablo,
> 
> Ok - that's because the swig files assume there is a readHex method. 
> This will be fixed for 3.0, sorry about the problems in 2.2.0.
> 
> Anyway, to manually fix open geos.i in the swig directory:
> 
> 1. Comment out line 166 which is:
> 
> %newobject WKBReader::readHEX;
> 
> 2.  Comment out line 186-190:
> 
> %factory(geos::Geometry * geos::WKBReader::readHEX, geos::Point,
> 				 geos::LinearRing, geos::LineString,
> 				 geos::Polygon,
> 				 geos::MultiPoint,  	
>                                  geos::MultiLineString,
> 				 geos::MultiPolygon,
>                                  geos::GeometryCollection);
> 
> 3. Comment out lines 297 to the end of the file:
> 
> %extend geos::Geometry {
> 	static geos::GeometryFactory& factory()
> 	{
> 		static geos::GeometryFactory factory;
> 		return factory;
> 	}
> 
> 	static geos::WKBReader& reader()
> 	{
> 		#if GEOS_VERSION_MAJOR == 2
> 		static geos::WKBReader reader(geos_Geometry_factory());
> 		#else
> 		static geos::io::WKBReader reader(geos_Geometry_factory());
> 		#endif
> 		return reader;
> 	}
> 
> 	static Geometry* fromWKT(std::string wkt)
> 	{
> 		std::stringstream in(wkt);
> 		return geos_Geometry_reader().read(in);
> 	}
> 	
> 	static Geometry* fromHEX(std::string hex)
> 	{
> 		std::stringstream in(hex);
> 		return geos_Geometry_reader().readHEX(in);
> 	}
> };
> 
> Thanks,
> 
> Charlie
> 
> 
> Pablo Souza Grigoletti wrote:
> >Hi Charlie,
> >
> >I did what you said:
> >
> >- mv geos_wrap.cxx geos_wrap.cxx.old
> >- I created python.i with the code that you gave me. 
> >- swig -c++ -python -modern -o geos_wrap.cxx ../geos.i
> >
> >
> >../../source/headers/geos/geom.h:671: Warning(509): Overloaded
> >geos::CoordinateS equence::hasRepeatedPoints(geos::CoordinateSequence
> >const *) is shadowed by hasR epeatedPoints() const at
> >../../source/headers/geos/geom.h:658.
> >../../source/headers/geos/geom.h:684: Warning(509): Overloaded
> >geos::CoordinateS equence::minCoordinate(geos::CoordinateSequence *) is
> >shadowed by minCoordinate( ) const at
> >../../source/headers/geos/geom.h:661.
> >
> >
> >- python setup.py build
> >
> >
> >...
> >geos_wrap.cxx: In function 'geos::Geometry*
> >geos_Geometry_fromHEX(std::string)': geos_wrap.cxx:4417: error: 'class
> >geos::WKBReader' has no member named 'readHEX' geos_wrap.cxx: In
> >function 'PyObject* _wrap_Geometry_srid_set(PyObject*, PyObjec t*)':
> >geos_wrap.cxx:24176: warning: passing 'double' for argument 1 to
> >'virtual void g eos::Geometry::setSRID(int)' error: command 'gcc' failed
> >with exit status 1
> >
> >
> >As you said me, a problem with readHEX happened.
> >do you have any suggestion?
> >
> >Ahh, I have the SWIG right version:
> >
> >
> ># swig -version
> >SWIG Version 1.3.29
> >
> >
> >Best regards.
> >Pablo
> >
> >
> >On Mon, 05 Jun 2006 21:21:17 -0600
> >Charlie Savage <cfis@savagexi.com> wrote:
> >
> >>Hi Pablo,
> >>
> >>Sorry not to respond sooner - I just got back from vacation.
> >>
> >>What python.i is used for is to generate geos_wrap.cxx using SWIG.  If
> >>
> >>you look, you'll see that file exists.  So theory you could get by 
> >>without python.i and just run the part of the build script that 
> >>builds/installs the extensions.
> >>
> >>However, there unfortunately there is a problem with that because the 
> >>geos_wrap.cxx file includes pointers to a method called readHex which 
> >>does not actually exist in geos 2.2.2 (well, it does in my version but
> >>
> >>no release version).
> >>
> >>So I'd recommend:
> >>
> >>Create python.i in your swig/python directory.  Then put this code
> >>into it:
> >>
> >>%template(vector_GeometryP) std::vector<geos::Geometry *>;
> >>%template(vector_LineStringP) std::vector<geos::LineString *>;
> >>%template(vector_PolygonP) std::vector<geos::Polygon *>;
> >>
> >>Then make sure you have swig 1.3.29 installed.  Then try the build 
> >>script again.  You may also want to delete geos_wrap.cxx before you
> >>start.
> >>
> >>Hope this helps,
> >>
> >>Charlie
> >
> >		
> >_______________________________________________________ 
> >Abra sua conta no Yahoo! Mail: 1GB de espa??o, alertas de e-mail no 
> >celular e anti-spam realmente eficaz. http://mail.yahoo.com.br/
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel



> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From cfis at savagexi.com  Tue Jun  6 18:16:22 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] python.i doesn't exist... why?
In-Reply-To: <20060606213300.GA65773@keybit.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>	<20060606013722.84D1C2C19B2@netnation.refractions.net>	<4484F4AD.5090201@savagexi.com>	<20060606044324.26F5C2C19FD@netnation.refractions.net>	<44851981.8000106@savagexi.com>
	<20060606213300.GA65773@keybit.net>
Message-ID: <4485FEB6.703@savagexi.com>

Yeah, was planning on doing that.  What's the timeframe you're looking at?

I did a pretty big update for GEOS 3.0 about 2 months ago, but I imagine 
things have changed a lot since then.  So it might take a bit of time to 
get right.  Having the new unit tests around helps for sure though (can 
copy them to Ruby/Python as needed).


Charlie

strk@refractions.net wrote:
> Since we're talking about this, I'm in the process of closing
> up the 3.0.0 release. Charlie, could you give the swig/ bit
> a check ? If things get complicated we can rollback to the 2.x
> way of only distributing files with no attempt to automatically
> build.
> 
> --strk;
> 
> On Mon, Jun 05, 2006 at 11:58:25PM -0600, Charlie Savage wrote:
>> Hi Pablo,
>>
>> Ok - that's because the swig files assume there is a readHex method. 
>> This will be fixed for 3.0, sorry about the problems in 2.2.0.
>>
>> Anyway, to manually fix open geos.i in the swig directory:
>>
>> 1. Comment out line 166 which is:
>>
>> %newobject WKBReader::readHEX;
>>
>> 2.  Comment out line 186-190:
>>
>> %factory(geos::Geometry * geos::WKBReader::readHEX, geos::Point,
>> 				 geos::LinearRing, geos::LineString,
>> 				 geos::Polygon,
>> 				 geos::MultiPoint,  	
>>                                  geos::MultiLineString,
>> 				 geos::MultiPolygon,
>>                                  geos::GeometryCollection);
>>
>> 3. Comment out lines 297 to the end of the file:
>>
>> %extend geos::Geometry {
>> 	static geos::GeometryFactory& factory()
>> 	{
>> 		static geos::GeometryFactory factory;
>> 		return factory;
>> 	}
>>
>> 	static geos::WKBReader& reader()
>> 	{
>> 		#if GEOS_VERSION_MAJOR == 2
>> 		static geos::WKBReader reader(geos_Geometry_factory());
>> 		#else
>> 		static geos::io::WKBReader reader(geos_Geometry_factory());
>> 		#endif
>> 		return reader;
>> 	}
>>
>> 	static Geometry* fromWKT(std::string wkt)
>> 	{
>> 		std::stringstream in(wkt);
>> 		return geos_Geometry_reader().read(in);
>> 	}
>> 	
>> 	static Geometry* fromHEX(std::string hex)
>> 	{
>> 		std::stringstream in(hex);
>> 		return geos_Geometry_reader().readHEX(in);
>> 	}
>> };
>>
>> Thanks,
>>
>> Charlie
>>
>>
>> Pablo Souza Grigoletti wrote:
>>> Hi Charlie,
>>>
>>> I did what you said:
>>>
>>> - mv geos_wrap.cxx geos_wrap.cxx.old
>>> - I created python.i with the code that you gave me. 
>>> - swig -c++ -python -modern -o geos_wrap.cxx ../geos.i
>>>
>>>
>>> ../../source/headers/geos/geom.h:671: Warning(509): Overloaded
>>> geos::CoordinateS equence::hasRepeatedPoints(geos::CoordinateSequence
>>> const *) is shadowed by hasR epeatedPoints() const at
>>> ../../source/headers/geos/geom.h:658.
>>> ../../source/headers/geos/geom.h:684: Warning(509): Overloaded
>>> geos::CoordinateS equence::minCoordinate(geos::CoordinateSequence *) is
>>> shadowed by minCoordinate( ) const at
>>> ../../source/headers/geos/geom.h:661.
>>>
>>>
>>> - python setup.py build
>>>
>>>
>>> ...
>>> geos_wrap.cxx: In function 'geos::Geometry*
>>> geos_Geometry_fromHEX(std::string)': geos_wrap.cxx:4417: error: 'class
>>> geos::WKBReader' has no member named 'readHEX' geos_wrap.cxx: In
>>> function 'PyObject* _wrap_Geometry_srid_set(PyObject*, PyObjec t*)':
>>> geos_wrap.cxx:24176: warning: passing 'double' for argument 1 to
>>> 'virtual void g eos::Geometry::setSRID(int)' error: command 'gcc' failed
>>> with exit status 1
>>>
>>>
>>> As you said me, a problem with readHEX happened.
>>> do you have any suggestion?
>>>
>>> Ahh, I have the SWIG right version:
>>>
>>>
>>> # swig -version
>>> SWIG Version 1.3.29
>>>
>>>
>>> Best regards.
>>> Pablo
>>>
>>>
>>> On Mon, 05 Jun 2006 21:21:17 -0600
>>> Charlie Savage <cfis@savagexi.com> wrote:
>>>
>>>> Hi Pablo,
>>>>
>>>> Sorry not to respond sooner - I just got back from vacation.
>>>>
>>>> What python.i is used for is to generate geos_wrap.cxx using SWIG.  If
>>>>
>>>> you look, you'll see that file exists.  So theory you could get by 
>>>> without python.i and just run the part of the build script that 
>>>> builds/installs the extensions.
>>>>
>>>> However, there unfortunately there is a problem with that because the 
>>>> geos_wrap.cxx file includes pointers to a method called readHex which 
>>>> does not actually exist in geos 2.2.2 (well, it does in my version but
>>>>
>>>> no release version).
>>>>
>>>> So I'd recommend:
>>>>
>>>> Create python.i in your swig/python directory.  Then put this code
>>>> into it:
>>>>
>>>> %template(vector_GeometryP) std::vector<geos::Geometry *>;
>>>> %template(vector_LineStringP) std::vector<geos::LineString *>;
>>>> %template(vector_PolygonP) std::vector<geos::Polygon *>;
>>>>
>>>> Then make sure you have swig 1.3.29 installed.  Then try the build 
>>>> script again.  You may also want to delete geos_wrap.cxx before you
>>>> start.
>>>>
>>>> Hope this helps,
>>>>
>>>> Charlie
>>> 		
>>> _______________________________________________________ 
>>> Abra sua conta no Yahoo! Mail: 1GB de espa??o, alertas de e-mail no 
>>> celular e anti-spam realmente eficaz. http://mail.yahoo.com.br/
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
> 
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060606/a8c2a49b/smime.bin
From strk at refractions.net  Tue Jun  6 18:26:13 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] Toward GEOS-3.0.0RC (was: python.i doesn't exist...
	why?)
In-Reply-To: <4485FEB6.703@savagexi.com>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
	<4484F4AD.5090201@savagexi.com>
	<20060606044324.26F5C2C19FD@netnation.refractions.net>
	<44851981.8000106@savagexi.com>
	<20060606213300.GA65773@keybit.net> <4485FEB6.703@savagexi.com>
Message-ID: <20060606222613.GA79862@keybit.net>

On Tue, Jun 06, 2006 at 04:16:22PM -0600, Charlie Savage wrote:
> Yeah, was planning on doing that.  What's the timeframe you're looking at?

In 1/2 weeks I'd like to release an RC pack, if I handle to make it
acceptable as a version number for automake's taste.

--strk;

> I did a pretty big update for GEOS 3.0 about 2 months ago, but I imagine 
> things have changed a lot since then.  So it might take a bit of time to 
> get right.  Having the new unit tests around helps for sure though (can 
> copy them to Ruby/Python as needed).
> 
> 
> Charlie
> 
> strk@refractions.net wrote:
> >Since we're talking about this, I'm in the process of closing
> >up the 3.0.0 release. Charlie, could you give the swig/ bit
> >a check ? If things get complicated we can rollback to the 2.x
> >way of only distributing files with no attempt to automatically
> >build.
> >

From cfis at savagexi.com  Tue Jun  6 18:27:20 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] Toward GEOS-3.0.0RC
In-Reply-To: <20060606222613.GA79862@keybit.net>
References: <20060602081741.C6E972C170A@netnation.refractions.net>	<20060606013722.84D1C2C19B2@netnation.refractions.net>	<4484F4AD.5090201@savagexi.com>	<20060606044324.26F5C2C19FD@netnation.refractions.net>	<44851981.8000106@savagexi.com>	<20060606213300.GA65773@keybit.net>
	<4485FEB6.703@savagexi.com> <20060606222613.GA79862@keybit.net>
Message-ID: <44860148.7030508@savagexi.com>

Is that 1 to 2 weeks or half a week?

Out of curiosity, any changes in performance (either good or bad)?

Charlie

strk@refractions.net wrote:
> On Tue, Jun 06, 2006 at 04:16:22PM -0600, Charlie Savage wrote:
>> Yeah, was planning on doing that.  What's the timeframe you're looking at?
> 
> In 1/2 weeks I'd like to release an RC pack, if I handle to make it
> acceptable as a version number for automake's taste.
> 
> --strk;
> 
>> I did a pretty big update for GEOS 3.0 about 2 months ago, but I imagine 
>> things have changed a lot since then.  So it might take a bit of time to 
>> get right.  Having the new unit tests around helps for sure though (can 
>> copy them to Ruby/Python as needed).
>>
>>
>> Charlie
>>
>> strk@refractions.net wrote:
>>> Since we're talking about this, I'm in the process of closing
>>> up the 3.0.0 release. Charlie, could you give the swig/ bit
>>> a check ? If things get complicated we can rollback to the 2.x
>>> way of only distributing files with no attempt to automatically
>>> build.
>>>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060606/9149c1cd/smime.bin
From strk at refractions.net  Tue Jun  6 18:42:07 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] Toward GEOS-3.0.0RC
In-Reply-To: <44860148.7030508@savagexi.com>
References: <20060602081741.C6E972C170A@netnation.refractions.net>
	<20060606013722.84D1C2C19B2@netnation.refractions.net>
	<4484F4AD.5090201@savagexi.com>
	<20060606044324.26F5C2C19FD@netnation.refractions.net>
	<44851981.8000106@savagexi.com>
	<20060606213300.GA65773@keybit.net> <4485FEB6.703@savagexi.com>
	<20060606222613.GA79862@keybit.net> <44860148.7030508@savagexi.com>
Message-ID: <20060606224207.GB79862@keybit.net>

On Tue, Jun 06, 2006 at 04:27:20PM -0600, Charlie Savage wrote:
> Is that 1 to 2 weeks or half a week?

1 to 2 weeks

> Out of curiosity, any changes in performance (either good or bad)?

The focus is more about long-term stability and robustness then
performance, basically it's about allowing performance improvements
to be introduced w/out breaking exposed interfaces.

And, of course, we got in sync with JTS-1.7, which introduced some
performance improvements by design.
Actual results are closer to "good" then "bad", see
the NEWS file for details.

--strk;

From hobu at iastate.edu  Mon Jun 12 16:43:36 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] CVS GEOS union results
Message-ID: <6.2.3.4.2.20060612153614.029e5118@hobu.mail.iastate.edu>

According to the JTS Test builder the results of this union should be 
as follows:

A
--------------------------
POLYGON ((601289.2369585614651442 4621930.3517169132828712, 
601296.6117308996617794 4621943.1251973006874323, 
601331.2527470423374325 4621943.1251973006874323, 
601348.5732551137916744 4621913.1251973006874323, 
601331.2527470423374325 4621883.1251973006874323, 
601296.6117308996617794 4621883.1251973006874323, 
601284.4943894973257557 4621904.1130482675507665, 
601277.1196171591291204 4621891.3395678801462054, 
601242.4786010164534673 4621891.3395678801462054, 
601225.1580929449992254 4621921.3395678801462054, 
601242.4786010164534673 4621951.3395678801462054, 
601244.3377801323076710 4621951.3395678801462054, 
601235.3788347869412974 4621966.8569164043292403, 
601252.6993428583955392 4621996.8569164043292403, 
601287.3403590010711923 4621996.8569164043292403, 
601304.6608670725254342 4621966.8569164043292403, 
601287.3403590010711923 4621936.8569164043292403, 
601285.4811798851005733 4621936.8569164043292403, 
601289.2369585614651442 4621930.3517169132828712))

B
--------------------------
POLYGON ((601289.3684807127574459 4621895.6708746394142509, 
601279.5020359900081530 4621895.4660383407026529, 
601284.4943894973257557 4621904.1130482675507665, 
601289.3684807127574459 4621895.6708746394142509))

Result
--------------------------
POLYGON ((601289.2369585615 4621930.351716913, 601296.6117308997 
4621943.125197301, 601331.2527470423 4621943.125197301, 
601348.5732551138 4621913.1251973, 601331.2527470423 
4621883.125197301, 601296.6117308997 4621883.125197301, 
601289.3684807126 4621895.67087464, 601279.5020359906 
4621895.466038343, 601277.1196171591 4621891.33956788, 
601242.4786010165 4621891.33956788, 601225.158092945 
4621921.33956788, 601242.4786010165 4621951.339567881, 
601244.3377801323 4621951.339567881, 601235.3788347867 
4621966.856916403, 601252.6993428584 4621996.856916403, 
601287.3403590011 4621996.856916403, 601304.6608670725 
4621966.856916403, 601287.3403590011 4621936.856916404, 
601285.4811798851 4621936.856916404, 601289.2369585615 4621930.351716913))

GEOS CVS HEAD is currently giving this as a result (using C++ API and 
the default precision for the geometry factory... double, right?)

MULTIPOLYGON (((601289.2369585614651442 4621930.3517169132828712, 
601296.6117308996617794 4621943.1251973006874323, 
601331.2527470423374325 4621943.1251973006874323, 
601348.5732551137916744 4621913.1251973006874323, 
601331.2527470423374325 4621883.1251973006874323, 
601296.6117308996617794 4621883.1251973006874323, 
601284.4943894973257557 4621904.1130482675507665, 
601277.1196171591291204 4621891.3395678801462054, 
601242.4786010164534673 4621891.3395678801462054, 
601225.1580929449992254 4621921.3395678801462054, 
601242.4786010164534673 4621951.3395678801462054, 
601244.3377801323076710 4621951.3395678801462054, 
601235.3788347869412974 4621966.8569164043292403, 
601252.6993428583955392 4621996.8569164043292403, 
601287.3403590010711923 4621996.8569164043292403, 
601304.6608670725254342 4621966.8569164043292403, 
601287.3403590010711923 4621936.8569164043292403, 
601285.4811798851005733 4621936.8569164043292403, 
601289.2369585614651442 4621930.3517169132828712)), 
((601289.3684807127574459 4621895.6708746394142509, 
601279.5020359900081530 4621895.4660383407026529, 
601284.4943894973257557 4621904.1130482675507665, 
601289.3684807127574459 4621895.6708746394142509)))

Any ideas what might be going on?

Howard


From strk at refractions.net  Mon Jun 12 17:52:17 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] CVS GEOS union results
In-Reply-To: <6.2.3.4.2.20060612153614.029e5118@hobu.mail.iastate.edu>
References: <6.2.3.4.2.20060612153614.029e5118@hobu.mail.iastate.edu>
Message-ID: <20060612215217.GB65857@keybit.net>

>From which file from JTS did you extract the test ?
I haven't seen the geometries visually, did you ?
The default precision model is FLOATING (double), right,
but for XML tests the precision model can be specified
with the <precisionModel> tag.

--strk;

On Mon, Jun 12, 2006 at 03:43:36PM -0500, Howard Butler wrote:
> According to the JTS Test builder the results of this union should be 
> as follows:
> 
> A
> --------------------------
> POLYGON ((601289.2369585614651442 4621930.3517169132828712, 
> 601296.6117308996617794 4621943.1251973006874323, 
> 601331.2527470423374325 4621943.1251973006874323, 
> 601348.5732551137916744 4621913.1251973006874323, 
> 601331.2527470423374325 4621883.1251973006874323, 
> 601296.6117308996617794 4621883.1251973006874323, 
> 601284.4943894973257557 4621904.1130482675507665, 
> 601277.1196171591291204 4621891.3395678801462054, 
> 601242.4786010164534673 4621891.3395678801462054, 
> 601225.1580929449992254 4621921.3395678801462054, 
> 601242.4786010164534673 4621951.3395678801462054, 
> 601244.3377801323076710 4621951.3395678801462054, 
> 601235.3788347869412974 4621966.8569164043292403, 
> 601252.6993428583955392 4621996.8569164043292403, 
> 601287.3403590010711923 4621996.8569164043292403, 
> 601304.6608670725254342 4621966.8569164043292403, 
> 601287.3403590010711923 4621936.8569164043292403, 
> 601285.4811798851005733 4621936.8569164043292403, 
> 601289.2369585614651442 4621930.3517169132828712))
> 
> B
> --------------------------
> POLYGON ((601289.3684807127574459 4621895.6708746394142509, 
> 601279.5020359900081530 4621895.4660383407026529, 
> 601284.4943894973257557 4621904.1130482675507665, 
> 601289.3684807127574459 4621895.6708746394142509))
> 
> Result
> --------------------------
> POLYGON ((601289.2369585615 4621930.351716913, 601296.6117308997 
> 4621943.125197301, 601331.2527470423 4621943.125197301, 
> 601348.5732551138 4621913.1251973, 601331.2527470423 
> 4621883.125197301, 601296.6117308997 4621883.125197301, 
> 601289.3684807126 4621895.67087464, 601279.5020359906 
> 4621895.466038343, 601277.1196171591 4621891.33956788, 
> 601242.4786010165 4621891.33956788, 601225.158092945 
> 4621921.33956788, 601242.4786010165 4621951.339567881, 
> 601244.3377801323 4621951.339567881, 601235.3788347867 
> 4621966.856916403, 601252.6993428584 4621996.856916403, 
> 601287.3403590011 4621996.856916403, 601304.6608670725 
> 4621966.856916403, 601287.3403590011 4621936.856916404, 
> 601285.4811798851 4621936.856916404, 601289.2369585615 4621930.351716913))
> 
> GEOS CVS HEAD is currently giving this as a result (using C++ API and 
> the default precision for the geometry factory... double, right?)
> 
> MULTIPOLYGON (((601289.2369585614651442 4621930.3517169132828712, 
> 601296.6117308996617794 4621943.1251973006874323, 
> 601331.2527470423374325 4621943.1251973006874323, 
> 601348.5732551137916744 4621913.1251973006874323, 
> 601331.2527470423374325 4621883.1251973006874323, 
> 601296.6117308996617794 4621883.1251973006874323, 
> 601284.4943894973257557 4621904.1130482675507665, 
> 601277.1196171591291204 4621891.3395678801462054, 
> 601242.4786010164534673 4621891.3395678801462054, 
> 601225.1580929449992254 4621921.3395678801462054, 
> 601242.4786010164534673 4621951.3395678801462054, 
> 601244.3377801323076710 4621951.3395678801462054, 
> 601235.3788347869412974 4621966.8569164043292403, 
> 601252.6993428583955392 4621996.8569164043292403, 
> 601287.3403590010711923 4621996.8569164043292403, 
> 601304.6608670725254342 4621966.8569164043292403, 
> 601287.3403590010711923 4621936.8569164043292403, 
> 601285.4811798851005733 4621936.8569164043292403, 
> 601289.2369585614651442 4621930.3517169132828712)), 
> ((601289.3684807127574459 4621895.6708746394142509, 
> 601279.5020359900081530 4621895.4660383407026529, 
> 601284.4943894973257557 4621904.1130482675507665, 
> 601289.3684807127574459 4621895.6708746394142509)))
> 
> Any ideas what might be going on?
> 
> Howard

From pramsey at refractions.net  Mon Jun 12 18:11:01 2006
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>

In a conversation with Dale Lutz at GeoAlberta, he mentioned they had  
experimented with using the QD library (<http://crd.lbl.gov/~dhbailey/ 
mpdist/>) in some of their topology processing and found that it was  
exceptionally good at bypassing problems caused by reduced  
precision.  Presumably this is because all the input data is at  
double precision, at most, so relative to the processing precision  
(quad) it is quite well behaved.  The approach was so good that in a  
race between the old algorithms (double precision but with lots of  
tests and bobbing and weaving to catch special cases) and the new  
(quad precision, with no special cases at all, just naive algorithms)  
the qd won hands down.  So the overhead of the math library on all  
cases was not higher than the overhead of finding and handling the  
special cases.

Something to look at!

P

From mbdavis at VividSolutions.com  Mon Jun 12 19:46:08 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA77@venus.VividSolutions.com>

This would probably be a good approach for the local problem of
computing an accurate intersection point.  It might also help solve the
problem of computing a topologically correct arrangement of noded lines,
but this might require some experimentation to see how far into the
algorithm the quad precision would have to be carried.

Any idea if there is a Java version?  8^)

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Paul Ramsey
> Sent: June 12, 2006 3:11 PM
> To: GEOS Development List
> Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
> 
> 
> In a conversation with Dale Lutz at GeoAlberta, he mentioned 
> they had  
> experimented with using the QD library 
> (<http://crd.lbl.gov/~dhbailey/ 
> mpdist/>) in some of their 
> topology processing and found that it was  
> exceptionally good at bypassing problems caused by reduced  
> precision.  Presumably this is because all the input data is at  
> double precision, at most, so relative to the processing precision  
> (quad) it is quite well behaved.  The approach was so good that in a  
> race between the old algorithms (double precision but with lots of  
> tests and bobbing and weaving to catch special cases) and the new  
> (quad precision, with no special cases at all, just naive 
> algorithms)  
> the qd won hands down.  So the overhead of the math library on all  
> cases was not higher than the overhead of finding and handling the  
> special cases.
> 
> Something to look at!
> 
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From hobu at iastate.edu  Tue Jun 13 10:33:59 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] CVS GEOS union results
In-Reply-To: <20060612215217.GB65857@keybit.net>
References: <6.2.3.4.2.20060612153614.029e5118@hobu.mail.iastate.edu>
	<20060612215217.GB65857@keybit.net>
Message-ID: <6.2.3.4.2.20060613093038.01e57368@hobu.mail.iastate.edu>

The geometry is my own, and it is not from the JTS test suite.  Using 
Python Cartographic Library with a GEOS 2.2.2 produces a result that 
is more in line with the expected one (a single polygon rather than a 
concatenated multipolygon).



At 04:52 PM 6/12/2006, strk@refractions.net wrote:
> >From which file from JTS did you extract the test ?
>I haven't seen the geometries visually, did you ?
>The default precision model is FLOATING (double), right,
>but for XML tests the precision model can be specified
>with the <precisionModel> tag.
>
>--strk;


From hobu at iastate.edu  Tue Jun 13 11:36:16 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] CVS GEOS union results
In-Reply-To: <6.2.3.4.2.20060613093038.01e57368@hobu.mail.iastate.edu>
References: <6.2.3.4.2.20060612153614.029e5118@hobu.mail.iastate.edu>
	<20060612215217.GB65857@keybit.net>
	<6.2.3.4.2.20060613093038.01e57368@hobu.mail.iastate.edu>
Message-ID: <6.2.3.4.2.20060613102934.02690c48@hobu.mail.iastate.edu>

I am incorrect.  PCL/GEOS 2.2.2 also produces a 
GEOMETRYCOLLECTION/MULTIPOLYGON.


Geometry A is a number of hexagons that were unioned 
together.  Geometry B is a wedge that was created by differencing 
geometry A with another (border) polygon in an attempt to "fill" to 
the border.  All of these operations were done with GEOS cvs head.




At 09:33 AM 6/13/2006, Howard Butler wrote:
>The geometry is my own, and it is not from the JTS test 
>suite.  Using Python Cartographic Library with a GEOS 2.2.2 produces 
>a result that is more in line with the expected one (a single 
>polygon rather than a concatenated multipolygon).
>
>
>
>At 04:52 PM 6/12/2006, strk@refractions.net wrote:
>> >From which file from JTS did you extract the test ?
>>I haven't seen the geometries visually, did you ?
>>The default precision model is FLOATING (double), right,
>>but for XML tests the precision model can be specified
>>with the <precisionModel> tag.
>>
>>--strk;


From strk at refractions.net  Tue Jun 13 16:21:57 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] CVS GEOS union results
In-Reply-To: <6.2.3.4.2.20060613093038.01e57368@hobu.mail.iastate.edu>
References: <6.2.3.4.2.20060612153614.029e5118@hobu.mail.iastate.edu>
	<20060612215217.GB65857@keybit.net>
	<6.2.3.4.2.20060613093038.01e57368@hobu.mail.iastate.edu>
Message-ID: <20060613202157.GC77111@keybit.net>

Could you try to compute the steps again but with a GEOS version
*not* inlined ?

I'm working right now on yet another case where inlined/outlined
GEOS versions give different results (the outlined one is correct
for my case).

We really need a way to stop this FP madness...

--strk;

On Tue, Jun 13, 2006 at 09:33:59AM -0500, Howard Butler wrote:
> The geometry is my own, and it is not from the JTS test suite.  Using 
> Python Cartographic Library with a GEOS 2.2.2 produces a result that 
> is more in line with the expected one (a single polygon rather than a 
> concatenated multipolygon).
> 
> 
> 
> At 04:52 PM 6/12/2006, strk@refractions.net wrote:
> >>From which file from JTS did you extract the test ?
> >I haven't seen the geometries visually, did you ?
> >The default precision model is FLOATING (double), right,
> >but for XML tests the precision model can be specified
> >with the <precisionModel> tag.
> >
> >--strk;

From strk at refractions.net  Wed Jun 14 13:44:59 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:22 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>
References: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>
Message-ID: <20060614174459.GA92309@keybit.net>

Sounds interesting, I might make some experimentations with it.

Anyway, I dunno if this could fix the FP problems I reported
here:
http://geos.refractions.net/pipermail/geos-devel/2006-April/002185.html

I've been the whole day tracking a problem that turned out
to be a consequence of that madness. The attached XML testcase
fails with the "inlined" GEOS version but succeeds with 
the "outlined" version (./configure --disable-inline).
I found out that either always outlining Coordinate copy
ctor and assignment operator OR letting the compiler syntetize
them makes both versions succeed.
Logs showed subtle differences in Coordinate double values.
These differences triggered a different result from EdgeEnd::compareTo
that in turn triggered a different order in the EdgeEndStar components
(theoretically to be ordered CCW around the x axis).

The moral of the story is that we really need a way to make
fp operations predictable, or each run will depend on voodoo
parameters.

The QD library provides 'fpu_fix_start' and 'fpu_fix_end'
functions that seems to address this specific problem.
I will give them a try and let you know.
If you have suggestions to model generic library startup
code in C++ I'd appreciate it (a static Init class?)

--strk;


On Mon, Jun 12, 2006 at 03:11:01PM -0700, Paul Ramsey wrote:
> In a conversation with Dale Lutz at GeoAlberta, he mentioned they had  
> experimented with using the QD library (<http://crd.lbl.gov/~dhbailey/ 
> mpdist/>) in some of their topology processing and found that it was  
> exceptionally good at bypassing problems caused by reduced  
> precision.  Presumably this is because all the input data is at  
> double precision, at most, so relative to the processing precision  
> (quad) it is quite well behaved.  The approach was so good that in a  
> race between the old algorithms (double precision but with lots of  
> tests and bobbing and weaving to catch special cases) and the new  
> (quad precision, with no special cases at all, just naive algorithms)  
> the qd won hands down.  So the overhead of the math library on all  
> cases was not higher than the overhead of finding and handling the  
> special cases.
> 
> Something to look at!
> 
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Wed Jun 14 13:45:52 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <20060614174459.GA92309@keybit.net>
References: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>
	<20060614174459.GA92309@keybit.net>
Message-ID: <20060614174552.GB92309@keybit.net>

Forgot the attachment --strk;

On Wed, Jun 14, 2006 at 07:44:59PM +0200, strk@refractions.net wrote:
...
> The attached XML testcase
> fails with the "inlined" GEOS version but succeeds with 
> the "outlined" version (./configure --disable-inline).
-------------- next part --------------
 <run><precisionModel type=/>

 <case>
<desc>
"inlined" and "outlined" versions of GEOS differ;
"inlined" version is completely wrong.
</desc>
<a>

</a>

<b>
0106000000010000000103000000010000000D000000295C8F02BA5D5041AE47E1FAD41B55411F85EB91BA5D50410AD7A350D41B5541D7A370FDBC5D50411F85EB41D11B55418FC2F508BD5D504114AE4731D11B55419A999979BC5D5041D7A370CDD01B55410AD7A390BB5D5041A4703DFACF1B55417B14AEB7B95D5041E17A144ECE1B5541AE47E1BAB75D50411F85EB81CC1B5541EC51B87EB05D504114AE4771C61B55411F85EBB1AF5D5041666666A6C51B5541666666F6AB5D50417B14AEE7C91B55413D0AD783AB5D5041F6285C6FCA1B5541295C8F02BA5D5041AE47E1FAD41B5541
</b>
<test><op name="intersection">0103000000010000000A000000DD502C5EB95D504128314A83D41B5541295C8F02BA5D5041AE47E1FAD41B55411F85EB91BA5D50410AD7A350D41B5541D7A370FDBC5D50411F85EB41D11B55418FC2F508BD5D504114AE4731D11B55419A999979BC5D5041D7A370CDD01B5541FD8B4C65BC5D50419E0609BBD01B5541F98B4C65BC5D50419B0609BBD01B55419953D853BC5D5041B52A36ABD01B5541DD502C5EB95D504128314A83D41B5541</op></test>
</case>


 </run>

From mateusz at loskot.net  Wed Jun 14 14:01:53 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <20060614174459.GA92309@keybit.net>
References: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>
	<20060614174459.GA92309@keybit.net>
Message-ID: <44904F11.6080603@loskot.net>

strk@refractions.net wrote:
> Sounds interesting, I might make some experimentations with it.
> 
> Anyway, I dunno if this could fix the FP problems I reported here: 
> http://geos.refractions.net/pipermail/geos-devel/2006-April/002185.html
> 
> 
> 
> I've been the whole day tracking a problem that turned out to be a 
> consequence of that madness. The attached XML testcase fails with the
>  "inlined" GEOS version but succeeds with the "outlined" version 
> (./configure --disable-inline). I found out that either always 
> outlining Coordinate copy ctor and assignment operator OR letting the
>  compiler syntetize them makes both versions succeed. Logs showed 
> subtle differences in Coordinate double values. These differences 
> triggered a different result from EdgeEnd::compareTo that in turn 
> triggered a different order in the EdgeEndStar components 
> (theoretically to be ordered CCW around the x axis).
> 
> The moral of the story is that we really need a way to make fp 
> operations predictable, or each run will depend on voodoo parameters.
> 
Sandro,

Your test case is incorrect.
You can't compare float numbers as you are doing it in the assert:

assert(tot_check==tot);

especially if you're working with multiplatform library as GEOS.
You can only test how close are both numbers.

There are many problems. float arithmetic on Intel CPUs deos not follow
IEEE 754, different representation of float numbers on varios
architectures: FPU calculations are made on 80 bits numbers (ext.
double) but SSE2 instructions on 64 bits.


There are also other problems regarding optimization. Without any
optimization, intermediate results of calculations can be stored in temp
variables, as a real double, but with optimization they can be stored on
the stack as extended double or in registers

Also, see this:
http://en.wikipedia.org/wiki/Floating_point#Problems_with_floating-point

I'd say all this effor you took is like fightings windmills.
You can't be sure all flags those flags you have used will give you same
 results with comparing doubles using '=='.

In example, here are flags recommended by one of my friend:

g++ -pipe -Os -z combreloc -march=i686 -mfpmath=sse -msse2 unstable.cpp

+ striping code is recommended too:

strip -R .comment -R .note -R .note.ABI-tag -s a.out -o unstable

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Wed Jun 14 14:11:04 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <44904F11.6080603@loskot.net>
References: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>
	<20060614174459.GA92309@keybit.net> <44904F11.6080603@loskot.net>
Message-ID: <20060614181104.GC92309@keybit.net>

On Wed, Jun 14, 2006 at 08:01:53PM +0200, Mateusz Loskot wrote:

> Sandro,
> 
> Your test case is incorrect.
> You can't compare float numbers as you are doing it in the assert:
> 
> assert(tot_check==tot);
> 
> especially if you're working with multiplatform library as GEOS.
> You can only test how close are both numbers.
> 
> There are many problems. float arithmetic on Intel CPUs deos not follow
> IEEE 754, different representation of float numbers on varios
> architectures: FPU calculations are made on 80 bits numbers (ext.
> double) but SSE2 instructions on 64 bits.

Ok, but equality is actually used in JTS too.
Does Java have an automatic approximate equality ?

Beside this, the XML testcase I have attached should
then represent a valid testcase and should be made
to work with the current "sloppy" fp condition.
Problem is that I suppose JTS won't raise the same
problem (having different fp threatment).

--strk;

From mbdavis at VividSolutions.com  Wed Jun 14 14:16:09 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA85@venus.VividSolutions.com>

> Ok, but equality is actually used in JTS too.
> Does Java have an automatic approximate equality ?

I've been working under the assumption that Java uses a single FP model,
so that it's safe to compare FP numbers.

In any case, I'm not sure that JTS uses FP equals for anything other
than checking whether two points are *exactly* the same.  So this should
be portable, I assume.  Portability would depend on the implementation
not changing the bit-pattern of a FP number wherever it is stored -
surely this is reliable?  Otherwise it seems a bit insane, if the FP num
bytes change as it moves between different kinds of memory.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> strk@refractions.net
> Sent: June 14, 2006 11:11 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] QD (Quad-Double) Approach to Robustness
> 
> 
> On Wed, Jun 14, 2006 at 08:01:53PM +0200, Mateusz Loskot wrote:
> 
> > Sandro,
> > 
> > Your test case is incorrect.
> > You can't compare float numbers as you are doing it in the assert:
> > 
> > assert(tot_check==tot);
> > 
> > especially if you're working with multiplatform library as 
> GEOS. You 
> > can only test how close are both numbers.
> > 
> > There are many problems. float arithmetic on Intel CPUs deos not 
> > follow IEEE 754, different representation of float numbers on varios
> > architectures: FPU calculations are made on 80 bits numbers (ext.
> > double) but SSE2 instructions on 64 bits.
> 
> Ok, but equality is actually used in JTS too.
> Does Java have an automatic approximate equality ?
> 
> Beside this, the XML testcase I have attached should
> then represent a valid testcase and should be made
> to work with the current "sloppy" fp condition.
> Problem is that I suppose JTS won't raise the same
> problem (having different fp threatment).
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From strk at refractions.net  Wed Jun 14 14:36:26 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA027EBAA85@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA027EBAA85@venus.VividSolutions.com>
Message-ID: <20060614183626.GE92309@keybit.net>

On Wed, Jun 14, 2006 at 11:16:09AM -0700, Martin Davis wrote:
> > Ok, but equality is actually used in JTS too.
> > Does Java have an automatic approximate equality ?
> 
> I've been working under the assumption that Java uses a single FP model,
> so that it's safe to compare FP numbers.
> 
> In any case, I'm not sure that JTS uses FP equals for anything other
> than checking whether two points are *exactly* the same.  So this should
> be portable, I assume. 

As far as you mean memory address comparison that would be portable
(pointers are integer values). Unfortunately we don't have garbage
collection for free in the C++ world, so in some places your identity
checks might have become value comparisons. 

BTW, a quick grep on JTS sources for equals2D shows this is not true:

  ./algorithm/CGAlgorithms.java:197:    } while (ring[iPrev].equals2D(hiPt) && iPrev != hiIndex);
  ./algorithm/CGAlgorithms.java:203:    } while (ring[iNext].equals2D(hiPt) && iNext != hiIndex);
  ./algorithm/CGAlgorithms.java:214:    if (prev.equals2D(hiPt) || next.equals2D(hiPt) || prev.equals2D(next))
  ./algorithm/LineIntersector.java:284:      if (intPt[i].equals2D(pt)) {
  ./algorithm/LineIntersector.java:311:      if (! (   intPt[i].equals2D(inputLines[inputLineIndex][0])
  ./algorithm/LineIntersector.java:312:             || intPt[i].equals2D(inputLines[inputLineIndex][1]) )) {
  ./geom/Coordinate.java:134:  public boolean equals2D(Coordinate other) {
  ./geom/Coordinate.java:159:    return equals2D((Coordinate) other);
  ./geom/CoordinateList.java:141:        if (last.equals2D(coord)) return;
  ./geom/LineString.java:146:    return getCoordinateN(0).equals2D(getCoordinateN(getNumPoints() - 1));
  ./geomgraph/Edge.java:193:        if (intPt.equals2D(nextPt)) {
  ./geomgraph/Edge.java:234:      if (! pts[i].equals2D(e.pts[i])) {
  ./geomgraph/Edge.java:237:      if (! pts[i].equals2D(e.pts[--iRev])) {
  ./geomgraph/Edge.java:253:      if (! pts[i].equals2D(e.pts[i])) {
  ./geomgraph/EdgeIntersectionList.java:145:    boolean useIntPt1 = ei1.dist > 0.0 || ! ei1.coord.equals2D(lastSegStartPt);
  ./noding/SegmentNode.java:57:    isInterior = ! coord.equals2D(segString.getCoordinate(segmentIndex));
  ./noding/SegmentNode.java:81:    if (coord.equals2D(other.coord)) return 0;
  ./noding/SegmentNodeList.java:69:      Assert.isTrue(ei.coord.equals2D(intPt), "Found equal nodes with different coordinates");
  ./noding/SegmentNodeList.java:70://      if (! ei.coord.equals2D(intPt))
  ./noding/SegmentNodeList.java:126:      if (p0.equals2D(p2)) {
  ./noding/SegmentNodeList.java:159:    if (! ei0.coord.equals2D(ei1.coord)) return false;
  ./noding/SegmentNodeList.java:212:    if (! pt0.equals2D(edgePts[0]))
  ./noding/SegmentNodeList.java:218:    if (! ptn.equals2D(edgePts[edgePts.length - 1]))
  ./noding/SegmentNodeList.java:238:    boolean useIntPt1 = ei1.isInterior() || ! ei1.coord.equals2D(lastSegStartPt);
  ./noding/SegmentString.java:157:        if (intPt.equals2D(nextPt)) {
  ./noding/SegmentPointComparator.java:30:    if (p0.equals2D(p1)) return 0;

--strk;

From mateusz at loskot.net  Wed Jun 14 14:37:16 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <20060614181104.GC92309@keybit.net>
References: <8A22D847-748B-461B-8B79-4EC46BED9A3D@refractions.net>	<20060614174459.GA92309@keybit.net>
	<44904F11.6080603@loskot.net> <20060614181104.GC92309@keybit.net>
Message-ID: <4490575C.3060607@loskot.net>

strk@refractions.net wrote:
> On Wed, Jun 14, 2006 at 08:01:53PM +0200, Mateusz Loskot wrote:
> 
>> Sandro,
>> 
>> Your test case is incorrect. You can't compare float numbers as you
>> are doing it in the assert:
>> 
>> assert(tot_check==tot);
>> 
>> especially if you're working with multiplatform library as GEOS. 
>> You can only test how close are both numbers.
>> 
>> There are many problems. float arithmetic on Intel CPUs deos not
>> follow IEEE 754, different representation of float numbers on
>> varios architectures: FPU calculations are made on 80 bits numbers
>> (ext. double) but SSE2 instructions on 64 bits.
> 
> Ok, but equality is actually used in JTS too. Does Java have an
> automatic approximate equality ?


AFAIK, Java supports something like rational number calculations.
For C++, you have Boost Rational Library:
http://www.boost.org/libs/rational/rational.html

> Beside this, the XML testcase I have attached should then represent a
> valid testcase and should be made to work with the current "sloppy"
> fp condition. Problem is that I suppose JTS won't raise the same 
> problem (having different fp threatment).


AFAIK Java follows IEEE 754 regarding float point numbers.

BTW, I'm not sure about those two statements, as I'm not a Java
programmer at all.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Wed Jun 14 14:40:00 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA86@venus.VividSolutions.com>

> > In any case, I'm not sure that JTS uses FP equals for 
> anything other 
> > than checking whether two points are *exactly* the same.  So this 
> > should be portable, I assume.

I think you're misreading what I said.  I meant that JTS uses == (via
equals2D) to test whether the *value* of two coordinates is exactly the
same.  Pointers don't enter into it.

You absolutely should NOT try to replace those equality tests with
"approximately equals".  Approx equals may have a place in some of the
algorithms, but this needs to be carefully evaluated on a case-by-case
basis.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> strk@refractions.net
> Sent: June 14, 2006 11:36 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] QD (Quad-Double) Approach to Robustness
> 
> 
> On Wed, Jun 14, 2006 at 11:16:09AM -0700, Martin Davis wrote:
> > > Ok, but equality is actually used in JTS too.
> > > Does Java have an automatic approximate equality ?
> > 
> > I've been working under the assumption that Java uses a single FP 
> > model, so that it's safe to compare FP numbers.
> > 
> > In any case, I'm not sure that JTS uses FP equals for 
> anything other 
> > than checking whether two points are *exactly* the same.  So this 
> > should be portable, I assume.
> 
> As far as you mean memory address comparison that would be 
> portable (pointers are integer values). Unfortunately we 
> don't have garbage collection for free in the C++ world, so 
> in some places your identity checks might have become value 
> comparisons. 
> 
> BTW, a quick grep on JTS sources for equals2D shows this is not true:
> 
>   ./algorithm/CGAlgorithms.java:197:    } while 
> (ring[iPrev].equals2D(hiPt) && iPrev != hiIndex);
>   ./algorithm/CGAlgorithms.java:203:    } while 
> (ring[iNext].equals2D(hiPt) && iNext != hiIndex);
>   ./algorithm/CGAlgorithms.java:214:    if 
> (prev.equals2D(hiPt) || next.equals2D(hiPt) || prev.equals2D(next))
>   ./algorithm/LineIntersector.java:284:      if 
> (intPt[i].equals2D(pt)) {
>   ./algorithm/LineIntersector.java:311:      if (! (   
> intPt[i].equals2D(inputLines[inputLineIndex][0])
>   ./algorithm/LineIntersector.java:312:             || 
> intPt[i].equals2D(inputLines[inputLineIndex][1]) )) {
>   ./geom/Coordinate.java:134:  public boolean 
> equals2D(Coordinate other) {
>   ./geom/Coordinate.java:159:    return equals2D((Coordinate) other);
>   ./geom/CoordinateList.java:141:        if 
> (last.equals2D(coord)) return;
>   ./geom/LineString.java:146:    return 
> getCoordinateN(0).equals2D(getCoordinateN(getNumPoints() - 1));
>   ./geomgraph/Edge.java:193:        if (intPt.equals2D(nextPt)) {
>   ./geomgraph/Edge.java:234:      if (! pts[i].equals2D(e.pts[i])) {
>   ./geomgraph/Edge.java:237:      if (! 
> pts[i].equals2D(e.pts[--iRev])) {
>   ./geomgraph/Edge.java:253:      if (! pts[i].equals2D(e.pts[i])) {
>   ./geomgraph/EdgeIntersectionList.java:145:    boolean 
> useIntPt1 = ei1.dist > 0.0 || ! ei1.coord.equals2D(lastSegStartPt);
>   ./noding/SegmentNode.java:57:    isInterior = ! 
> coord.equals2D(segString.getCoordinate(segmentIndex));
>   ./noding/SegmentNode.java:81:    if 
> (coord.equals2D(other.coord)) return 0;
>   ./noding/SegmentNodeList.java:69:      
> Assert.isTrue(ei.coord.equals2D(intPt), "Found equal nodes 
> with different coordinates");
>   ./noding/SegmentNodeList.java:70://      if (! 
> ei.coord.equals2D(intPt))
>   ./noding/SegmentNodeList.java:126:      if (p0.equals2D(p2)) {
>   ./noding/SegmentNodeList.java:159:    if (! 
> ei0.coord.equals2D(ei1.coord)) return false;
>   ./noding/SegmentNodeList.java:212:    if (! 
> pt0.equals2D(edgePts[0]))
>   ./noding/SegmentNodeList.java:218:    if (! 
> ptn.equals2D(edgePts[edgePts.length - 1]))
>   ./noding/SegmentNodeList.java:238:    boolean useIntPt1 = 
> ei1.isInterior() || ! ei1.coord.equals2D(lastSegStartPt);
>   ./noding/SegmentString.java:157:        if 
> (intPt.equals2D(nextPt)) {
>   ./noding/SegmentPointComparator.java:30:    if 
> (p0.equals2D(p1)) return 0;
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mateusz at loskot.net  Wed Jun 14 14:42:15 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <20060614183626.GE92309@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA027EBAA85@venus.VividSolutions.com>
	<20060614183626.GE92309@keybit.net>
Message-ID: <44905887.4070106@loskot.net>

strk@refractions.net wrote:
> On Wed, Jun 14, 2006 at 11:16:09AM -0700, Martin Davis wrote:
>>> Ok, but equality is actually used in JTS too. Does Java have an 
>>> automatic approximate equality ?
>> I've been working under the assumption that Java uses a single FP 
>> model, so that it's safe to compare FP numbers.
>> 
>> In any case, I'm not sure that JTS uses FP equals for anything 
>> other than checking whether two points are *exactly* the same.  So
>>  this should be portable, I assume.
> 
> As far as you mean memory address comparison that would be portable 
> (pointers are integer values). Unfortunately we don't have garbage 
> collection for free in the C++ world, so in some places your identity
>  checks might have become value comparisons.


Hmm, there are pretty number of GCs for C++, e.g.:
http://www.hpl.hp.com/personal/Hans_Boehm/gc/

But Dear Friends, it would be humorous if GEOS should use real GC :-)
Then GEOS existence has completely no reason, because JTS is there.

p.s. Please note, that I'm quite suspicious about direct Java to C++
ports so my judgements in this subject are quite radical.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Wed Jun 14 14:55:36 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA027EBAA86@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA027EBAA86@venus.VividSolutions.com>
Message-ID: <20060614185536.GF92309@keybit.net>

On Wed, Jun 14, 2006 at 11:40:00AM -0700, Martin Davis wrote:
> > > In any case, I'm not sure that JTS uses FP equals for 
> > anything other 
> > > than checking whether two points are *exactly* the same.  So this 
> > > should be portable, I assume.
> 
> I think you're misreading what I said.  I meant that JTS uses == (via
> equals2D) to test whether the *value* of two coordinates is exactly the
> same.  Pointers don't enter into it.
> 
> You absolutely should NOT try to replace those equality tests with
> "approximately equals".  Approx equals may have a place in some of the
> algorithms, but this needs to be carefully evaluated on a case-by-case
> basis.

Ok, so back to original problem: do you obtain a successful result
with JTS against the XML test I attached ?
GEOS is successfull or not depending on wheter or not Coordinate
copy constructor and/or assignment operator is inlined.

--strk;

From mbdavis at VividSolutions.com  Wed Jun 14 14:59:36 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA8A@venus.VividSolutions.com>

> But Dear Friends, it would be humorous if GEOS should use real GC :-)
> Then GEOS existence has completely no reason, because JTS is there.

Not at all. A system like PostGIS does not want to incorporate a JVM.
Also, calling Java code from C/C++ is painful, to say the least.

Now what you could say is "Why not just use GCJ?".  Apart from the
limited platform support, this seems like the best way to go to me. 

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


From mbdavis at VividSolutions.com  Wed Jun 14 15:03:34 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA8B@venus.VividSolutions.com>

Here's the Java spec on use of FP numbers:

http://java.sun.com/docs/books/jls/second_edition/html/typesValues.doc.h
tml#9249

It always uses IEEE754 format.  But as I understand it, IEEE754 has some
subtle complexities involving rounding modes and hidden bits on some
platforms (e.g. Intel), so even this pretty detailed spec may not mean
that evey Java implementation computes in exactly the same way.  

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Martin Davis
> Sent: June 14, 2006 11:16 AM
> To: GEOS Development List
> Subject: RE: [geos-devel] QD (Quad-Double) Approach to Robustness
> 
> 
> > Ok, but equality is actually used in JTS too.
> > Does Java have an automatic approximate equality ?
> 
> I've been working under the assumption that Java uses a 
> single FP model, so that it's safe to compare FP numbers.
> 
> In any case, I'm not sure that JTS uses FP equals for 
> anything other than checking whether two points are *exactly* 
> the same.  So this should be portable, I assume.  Portability 
> would depend on the implementation not changing the 
> bit-pattern of a FP number wherever it is stored - surely 
> this is reliable?  Otherwise it seems a bit insane, if the FP 
> num bytes change as it moves between different kinds of memory.
> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> > strk@refractions.net
> > Sent: June 14, 2006 11:11 AM
> > To: GEOS Development List
> > Subject: Re: [geos-devel] QD (Quad-Double) Approach to Robustness
> > 
> > 
> > On Wed, Jun 14, 2006 at 08:01:53PM +0200, Mateusz Loskot wrote:
> > 
> > > Sandro,
> > > 
> > > Your test case is incorrect.
> > > You can't compare float numbers as you are doing it in the assert:
> > > 
> > > assert(tot_check==tot);
> > > 
> > > especially if you're working with multiplatform library as
> > GEOS. You
> > > can only test how close are both numbers.
> > > 
> > > There are many problems. float arithmetic on Intel CPUs deos not
> > > follow IEEE 754, different representation of float 
> numbers on varios
> > > architectures: FPU calculations are made on 80 bits numbers (ext.
> > > double) but SSE2 instructions on 64 bits.
> > 
> > Ok, but equality is actually used in JTS too.
> > Does Java have an automatic approximate equality ?
> > 
> > Beside this, the XML testcase I have attached should
> > then represent a valid testcase and should be made
> > to work with the current "sloppy" fp condition.
> > Problem is that I suppose JTS won't raise the same
> > problem (having different fp threatment).
> > 
> > --strk;
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Wed Jun 14 15:03:56 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA8C@venus.VividSolutions.com>

Not sure - I'll try it soon.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> strk@refractions.net
> Sent: June 14, 2006 11:56 AM
> To: GEOS Development List
> Subject: Re: [geos-devel] QD (Quad-Double) Approach to Robustness
> 
> 
> On Wed, Jun 14, 2006 at 11:40:00AM -0700, Martin Davis wrote:
> > > > In any case, I'm not sure that JTS uses FP equals for
> > > anything other
> > > > than checking whether two points are *exactly* the 
> same.  So this
> > > > should be portable, I assume.
> > 
> > I think you're misreading what I said.  I meant that JTS 
> uses == (via
> > equals2D) to test whether the *value* of two coordinates is exactly 
> > the same.  Pointers don't enter into it.
> > 
> > You absolutely should NOT try to replace those equality tests with 
> > "approximately equals".  Approx equals may have a place in 
> some of the 
> > algorithms, but this needs to be carefully evaluated on a 
> case-by-case 
> > basis.
> 
> Ok, so back to original problem: do you obtain a successful 
> result with JTS against the XML test I attached ? GEOS is 
> successfull or not depending on wheter or not Coordinate copy 
> constructor and/or assignment operator is inlined.
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From mbdavis at VividSolutions.com  Wed Jun 14 15:42:19 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA8F@venus.VividSolutions.com>

> Ok, so back to original problem: do you obtain a successful 
> result with JTS against the XML test I attached ? GEOS is 
> successfull or not depending on wheter or not Coordinate copy 
> constructor and/or assignment operator is inlined.

Ok, I've run this case.  JTS produces an incorrect result for this test
case (using "intersection").  However, it throws an exception when using
"difference".

My theory (and hope) is that for cases which produce a wrong answer for
a particular overlay op, one of the other overlay ops will actually
throw an exception.  (This is because the underlying GeometryGraph is
topologically incorrect, it just doesn't cause a failure for some of the
overlay ops).  In this case maybe there's a way of checking the sanity
of the GeometryGraph, to produce an exception in ALL cases.

By the way, using my prototype snapping code this test case succeeds for
all overlay ops...

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


From mbdavis at VividSolutions.com  Wed Jun 14 15:55:51 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Thoughts on in/outlining and robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0279C3F96@venus.VividSolutions.com>

strk, while I commend your valiant efforts to reconcile the behaviour of
inlined VS outlined functions and their effect on GEOS robustness, I'm
wondering whether this effort can ever pay off.
 
As I understand the problem, you're worried that inlined VS outlined
code sometimes produces incorrect results rather than throws exceptions,
or perhaps even produces correct results.  It makes sense that this is
due to subtle differences in the way the FP computations are done.  But
even if you managed to get the two implementations to behave
identically, there would still be a whole set of test cases which would
still either get the wrong answer or throw an exception.  JTS has the
same problem right now.  
 
I think the best place to direct effort is in solving the overall
problem of robustness in the fundamental algorithms.  Hopefully this
will be solid enough that it will be immune to the inline/outline FP
differences.  
 
My impression is that it would be a lot of incredibly finicky work to
"solve" the inline/outline difference, without improving robustness all
that much.  Or am I missing something?
 
Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060614/9d2c618f/attachment.html
From strk at refractions.net  Wed Jun 14 16:48:02 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Thoughts on in/outlining and robustness
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F96@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F96@venus.VividSolutions.com>
Message-ID: <20060614204802.GI92309@keybit.net>

Yes, I think you're completely right, much better to work
on the robustness limits. My real concern is facing bogus
results that are not reproducible with JTS.
Luckly this was not the case, but as long as
inlines/optimizations/architectures/compiler_switches
influence the results the problem will always be pending.

Good to know your new approach fixes all the tests we have,
will be interesting to see if GEOS will be as good there.

--strk;

On Wed, Jun 14, 2006 at 12:55:51PM -0700, Martin Davis wrote:
> strk, while I commend your valiant efforts to reconcile the behaviour of
> inlined VS outlined functions and their effect on GEOS robustness, I'm
> wondering whether this effort can ever pay off.
>  
> As I understand the problem, you're worried that inlined VS outlined
> code sometimes produces incorrect results rather than throws exceptions,
> or perhaps even produces correct results.  It makes sense that this is
> due to subtle differences in the way the FP computations are done.  But
> even if you managed to get the two implementations to behave
> identically, there would still be a whole set of test cases which would
> still either get the wrong answer or throw an exception.  JTS has the
> same problem right now.  
>  
> I think the best place to direct effort is in solving the overall
> problem of robustness in the fundamental algorithms.  Hopefully this
> will be solid enough that it will be immune to the inline/outline FP
> differences.  
>  
> My impression is that it would be a lot of incredibly finicky work to
> "solve" the inline/outline difference, without improving robustness all
> that much.  Or am I missing something?
>  
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
>  

> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From mateusz at loskot.net  Wed Jun 14 17:38:10 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA027EBAA8A@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA027EBAA8A@venus.VividSolutions.com>
Message-ID: <449081C2.8080805@loskot.net>

Martin Davis wrote:
>> But Dear Friends, it would be humorous if GEOS should use real GC :-)
>> Then GEOS existence has completely no reason, because JTS is there.
> 
> Not at all. A system like PostGIS does not want to incorporate a JVM.
> Also, calling Java code from C/C++ is painful, to say the least.
> 
> Now what you could say is "Why not just use GCJ?".  Apart from the
> limited platform support, this seems like the best way to go to me. 

Yes, GCJ is what I had in mind saying "JTS is there".

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Wed Jun 14 17:50:30 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA027EBAA8B@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA027EBAA8B@venus.VividSolutions.com>
Message-ID: <449084A6.1080102@loskot.net>

Martin Davis wrote:
> Here's the Java spec on use of FP numbers:
> 
> http://java.sun.com/docs/books/jls/second_edition/html/typesValues.doc.h
> tml#9249
> 
> It always uses IEEE754 format.  But as I understand it, IEEE754 has some
> subtle complexities involving rounding modes and hidden bits on some
> platforms (e.g. Intel), so even this pretty detailed spec may not mean
> that evey Java implementation computes in exactly the same way.  

Float point arithmetic in IA-32 CPUs is not compatible with IEEE 754.
Here is what I was told by one of my friend that knows this issue well:

CPU always uses extended double irrespective of settings of accuracy.
The float value is converted only when the data is going to be saved
from FPU stack to the memory.


Note also to Sandro:
And here, in case of inlining, can force usage of thread stack to pass
arguments instead of FPU registers.
That can be the inlining/not inlining issues that Sandro has revealed.


Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Wed Jun 14 17:53:27 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
In-Reply-To: <20060614185536.GF92309@keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA027EBAA86@venus.VividSolutions.com>
	<20060614185536.GF92309@keybit.net>
Message-ID: <44908557.4070204@loskot.net>

strk@refractions.net wrote:
> Ok, so back to original problem: do you obtain a successful result
> with JTS against the XML test I attached ?
> GEOS is successfull or not depending on wheter or not Coordinate
> copy constructor and/or assignment operator is inlined.

Just to not to miss it, I'm repeating what I said about
inlined/non-inlined compilation:

And here, in case of inlining, can force usage of thread stack to pass
float point type arguments instead of FPU registers.
That can be the inlining/not inlining issues that Sandro has revealed.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Wed Jun 14 18:07:11 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Thoughts on in/outlining and robustness
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0279C3F96@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0279C3F96@venus.VividSolutions.com>
Message-ID: <4490888F.7010101@loskot.net>

Martin Davis wrote:
> strk, while I commend your valiant efforts to reconcile the behaviour
>  of inlined VS outlined functions and their effect on GEOS 
> robustness, I'm wondering whether this effort can ever pay off.


IMO considering inline/non-inline stuff at this point is a premature
optimization, and it will cause more problems than it can help at the
moment.
Especially, that optimization made by inlining can help in 5% ? roughly
estimating, because GOES core is full of virtual polymorphism, and in
most cases it can't be inlined even if requested.
But calls that can be inlined, won't introduce remarkable increase of
performance.
That's what I'm almost sure from my intuition.


> I think the best place to direct effort is in solving the overall 
> problem of robustness in the fundamental algorithms.  Hopefully this 
> will be solid enough that it will be immune to the inline/outline FP 
> differences.


Definitely agreed.
Less virtual polimorphism, more usage of compile-time checks and strong
type-safety + less classes but clean API.
That's what I'd focus on regarding GEOS future.

I'm still really affraid of threads like:
http://geos.refractions.net/pipermail/geos-devel/2005-January/001197.html


> My impression is that it would be a lot of incredibly finicky work to
>  "solve" the inline/outline difference, without improving robustness
>  all that much.  Or am I missing something?


Martin, I agree with you.


Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mbdavis at VividSolutions.com  Wed Jun 14 19:32:10 2006
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] QD (Quad-Double) Approach to Robustness
Message-ID: <5A94289A9268514C8D6C0F1FF44BA027EBAA91@venus.VividSolutions.com>

> Float point arithmetic in IA-32 CPUs is not compatible with 
> IEEE 754. Here is what I was told by one of my friend that 
> knows this issue well:
> 
> CPU always uses extended double irrespective of settings of 
> accuracy. The float value is converted only when the data is 
> going to be saved from FPU stack to the memory.

Thank you and your colleague for the clarification, Mateusz.  There's
some more info on this problem with reference to robustness of geometric
algorithms from J Shewchuk here:
http://www.cs.cmu.edu/afs/cs/project/quake/public/www/robust.pc.html
(And of course QD has some code to address this issue too - it was based
on Shewchuk's work.

Unfortunately, AFAIK it's not possible to work around this in Java.   So
I'm going to have to think of some other way to deal with the need for
extended precision.  Some ideas are in the works, but nothing that
deliverable yet.

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net 
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> Mateusz Loskot
> Sent: June 14, 2006 2:51 PM
> To: GEOS Development List
> Subject: Re: [geos-devel] QD (Quad-Double) Approach to Robustness
> 
> 
> Martin Davis wrote:
> > Here's the Java spec on use of FP numbers:
> > 
> > 
> http://java.sun.com/docs/books/jls/second_edition/html/types>
Values.doc
> > .h
> > tml#9249
> > 
> > It always uses IEEE754 format.  But as I understand it, IEEE754 has 
> > some subtle complexities involving rounding modes and 
> hidden bits on 
> > some platforms (e.g. Intel), so even this pretty detailed 
> spec may not 
> > mean that evey Java implementation computes in exactly the same way.
> 

> 
> 
> Note also to Sandro:
> And here, in case of inlining, can force usage of thread 
> stack to pass arguments instead of FPU registers. That can be 
> the inlining/not inlining issues that Sandro has revealed.
> 
> 
> Cheers
> -- 
> Mateusz Loskot
> http://mateusz.loskot.net 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net 
> http://geos.refractions.net/mailman/listinfo/geos-devel
> 

From cfis at savagexi.com  Sat Jun 24 18:03:41 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
Message-ID: <449DB6BD.6010507@savagexi.com>

Hi everyone,

I'm in the process of updating the swig bindings for the 3.0 release and 
have a few questions.

What I've done so far:

* Reabled swig, ruby and python options in configure
* Went back to the automake files I put together previously.
* If you enable ruby/python bindings and have ruby or python installed 
the bindings should build ok.  Still need to do a bit more testing on this.

Now a couple of questions:

* Strk - there was something else you wanted done in the build process 
but I can't remember what it was - I think it had to do with tarring up 
  a release and including the swig files.  Do you remember?

* Who owns the geometries returned from methods such as Intersection, 
Difference, etc?  The C API doesn't give any indication and it wasn't 
obvious to me looking through the C++ code.

Thanks,

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060624/8fc64245/smime.bin
From strk at refractions.net  Sat Jun 24 18:21:34 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <449DB6BD.6010507@savagexi.com>
References: <449DB6BD.6010507@savagexi.com>
Message-ID: <20060624222134.GB30937@keybit.net>

On Sat, Jun 24, 2006 at 04:03:41PM -0600, Charlie Savage wrote:
> Hi everyone,
> 
> I'm in the process of updating the swig bindings for the 3.0 release and 
> have a few questions.
> 
> What I've done so far:
> 
> * Reabled swig, ruby and python options in configure
> * Went back to the automake files I put together previously.
> * If you enable ruby/python bindings and have ruby or python installed 
> the bindings should build ok.  Still need to do a bit more testing on this.
> 
> Now a couple of questions:
> 
> * Strk - there was something else you wanted done in the build process 
> but I can't remember what it was - I think it had to do with tarring up 
>  a release and including the swig files.  Do you remember?

We surely want them distributed. We also want to distribute the generated
wrapper (for those not having unstable swig installed).
Would be nice if make maintainer-clean would get rid of the latter
and next make would recreate it.
(haven't tested your new makefiles yet)

> * Who owns the geometries returned from methods such as Intersection, 
> Difference, etc?  The C API doesn't give any indication and it wasn't 
> obvious to me looking through the C++ code.

A rule of thumb for the C API is:
Every Geometry caller should take care of is returned
as a non-const object.
For these specific case the caller must delete them.

--strk;

From cfis at savagexi.com  Sat Jun 24 20:02:02 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <20060624222134.GB30937@keybit.net>
References: <449DB6BD.6010507@savagexi.com> <20060624222134.GB30937@keybit.net>
Message-ID: <449DD27A.5060709@savagexi.com>

> We surely want them distributed. We also want to distribute the generated
> wrapper (for those not having unstable swig installed).
> Would be nice if make maintainer-clean would get rid of the latter
> and next make would recreate it.
> (haven't tested your new makefiles yet)

Okay, so I need to add in a hook for make maintainer-clean then and to 
have make check to see if the generated wrapper exists or not and create 
if needed (I think the makefiles already do that actually).

Anything I need to do for getting the files into the distribution?

Haven't checked in my changes yet, I want to first test them some more.

> 
>> * Who owns the geometries returned from methods such as Intersection, 
>> Difference, etc?  The C API doesn't give any indication and it wasn't 
>> obvious to me looking through the C++ code.
> 
> A rule of thumb for the C API is:
> Every Geometry caller should take care of is returned
> as a non-const object.
> For these specific case the caller must delete them.

Okay, so the caller needs to delete the results of methods like 
Intersection.  Assumedly the same goes for using the C++ api - i.e, 
geom->intersects(someOtherGeom)?


While on the subject, I've taken a look at what would be involved with 
having the SWIG wrappers use the C api.  Its doable - basically I would 
have SWIG create "fake classes" which look like classes to Ruby/Python 
but underneath use the C API.  This is how the GDAL swig bindings are 
implemented, so its ok.  It is a bit silly (duplicate definitions), but 
it works.

But the thing that holds me back is that in the c-api all the geometry 
types get merged into just Geometry (no points, linestrings, etc.). 
That might be ok for C, but me would seem very strange in Ruby or 
Python.  I've thought its too high too high a price to pay and thus

But I wonder if there is a way around this by using a variation of the 
PIMPL idiom (http://www.gotw.ca/publications/mill05.htm)?

Something like forward declare all the Geos geometry classes, but of 
course don't call any methods on them.  Then for any C-API method that 
returns a geometry do a dynamic_cast to see what it is and then return 
an appropriate SWIG wrapper classes.

Sean or Hobu - didn't one of you write your own bindings for Python not 
using SWIG?  How did you handle this?  Are you happy with just having a 
Geometry object and you have to make sure to use it correctly (if its a 
point don't call NumRings)?  Or did you do something more clever?

In the end though I wonder if there is any real benefit to using the C 
api for the swig bindings. The c-api is supposed to insulate a program 
from changes to the underlying C++ api.  But the bindings libraries 
already do that.  Python/Ruby will dynamically load the bindings and 
install the appropriate classes/methods.

That means can install a new version of GEOS, swap out the bindings 
library, restart your program, and all should be well as long as you 
haven't removed any methods (it doesn't matter if methods or classes or 
changed namespaces or changed hearder files or whatever).  Now if you 
swapped out the version of GEOS and not the bindings, then you'd run 
into problems (but you would also with the C-API).

There is also the point that everything is statically linked on Windows 
  (since geos doesn't export any functions), so it doesn't matter at all 
if the version of geos is changed on the machine.  You could do the same 
on Linux/Unix I suppose.

Well, after all that rambling I've talked myself back into the idea that 
the SWIG bindings should stick with the C++ api because the C api 
provides no forward compatibility benefit (it does provide benefit, or 
disadvantage depending on your viewpoint, of a much smaller API).  But 
I'm more than happy to listen to counter arguments and do the work to 
switch over to the C api if its demonstrably better.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060624/ce485bbb/smime.bin
From strk at refractions.net  Sat Jun 24 20:17:19 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <449DD27A.5060709@savagexi.com>
References: <449DB6BD.6010507@savagexi.com> <20060624222134.GB30937@keybit.net>
	<449DD27A.5060709@savagexi.com>
Message-ID: <20060625001719.GC30937@keybit.net>

On Sat, Jun 24, 2006 at 06:02:02PM -0600, Charlie Savage wrote:
> >We surely want them distributed. We also want to distribute the generated
> >wrapper (for those not having unstable swig installed).
> >Would be nice if make maintainer-clean would get rid of the latter
> >and next make would recreate it.
> >(haven't tested your new makefiles yet)
> 
> Okay, so I need to add in a hook for make maintainer-clean then and to 
> have make check to see if the generated wrapper exists or not and create 
> if needed (I think the makefiles already do that actually).
> 
> Anything I need to do for getting the files into the distribution?

Any file you list in an Automake variable should be
distributed by default. Others can be forced in distribution
adding to the EXTRA_DIST variable.
Run 'make dist', extract resuting package and see yourself.
Also, try building the produced package.

> >A rule of thumb for the C API is:
> >Every Geometry caller should take care of is returned
> >as a non-const object.
> >For these specific case the caller must delete them.
> 
> Okay, so the caller needs to delete the results of methods like 
> Intersection.  Assumedly the same goes for using the C++ api - i.e, 
> geom->intersects(someOtherGeom)?

Yes. The C++ API is likely to change in the future to return
by std::auto_ptr in these cases.

> While on the subject, I've taken a look at what would be involved with 
> having the SWIG wrappers use the C api.  Its doable - basically I would 
> have SWIG create "fake classes" which look like classes to Ruby/Python 
> but underneath use the C API.  This is how the GDAL swig bindings are 
> implemented, so its ok.  It is a bit silly (duplicate definitions), but 
> it works.

It's not silly if it makes the SWIG bindings easier to maintain.

--strk;


From cfis at savagexi.com  Sat Jun 24 20:30:59 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <20060625001719.GC30937@keybit.net>
References: <449DB6BD.6010507@savagexi.com>
	<20060624222134.GB30937@keybit.net>	<449DD27A.5060709@savagexi.com>
	<20060625001719.GC30937@keybit.net>
Message-ID: <449DD943.40303@savagexi.com>

> 
> It's not silly if it makes the SWIG bindings easier to maintain.

Agreed.  Except the gdal bindings are harder to maintain in some ways 
due to the duplication of code.

Anyway, the difference in this case is that the GDAL object model is not 
as rich as in GEOS.  GDAL just exposes "geometry" as opposed to point, 
line, etc.

I think this boils down to three major decisions about the SWIG bindings 
that need to be agreed on:

1. What geometry model do clients work with? Just geometry or geometry, 
point, line, etc.

2.  What compatibility benefits does the C api provide beyond the 
benefits of the generated swig bindings?

3.  How much of GEOS's api gets exposed to clients?

For what its worth, my opinion is:

1. Clients have to know about point, line, etc. even in the C-API 
because some methods are not valid for some geometries.  So just show it 
to the clients, don't hide it.  Plus, in object oriented languages like 
Python/Ruby it makes more sense.

2.  I don't see any.

3.  This is an important one because you don't want clients using APIs 
that we know will change in the future.  SWIG provides mechanisms to 
exclude classes and methods, but then you're somewhat duplicating the 
work the C API has already done to provide a limited API.


Charlie


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060624/c78a1213/smime.bin
From sgillies at frii.com  Sat Jun 24 20:40:42 2006
From: sgillies at frii.com (Sean Gillies)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <449DD27A.5060709@savagexi.com>
References: <449DB6BD.6010507@savagexi.com> <20060624222134.GB30937@keybit.net>
	<449DD27A.5060709@savagexi.com>
Message-ID: <36872BCA-1571-4009-9366-5B1D51C6D5EE@frii.com>


On Jun 24, 2006, at 6:02 PM, Charlie Savage wrote:

>> We surely want them distributed. We also want to distribute the  
>> generated
>> wrapper (for those not having unstable swig installed).
>> Would be nice if make maintainer-clean would get rid of the latter
>> and next make would recreate it.
>> (haven't tested your new makefiles yet)
>
> Okay, so I need to add in a hook for make maintainer-clean then and  
> to have make check to see if the generated wrapper exists or not  
> and create if needed (I think the makefiles already do that actually).
>
> Anything I need to do for getting the files into the distribution?
>
> Haven't checked in my changes yet, I want to first test them some  
> more.
>
>>> * Who owns the geometries returned from methods such as  
>>> Intersection, Difference, etc?  The C API doesn't give any  
>>> indication and it wasn't obvious to me looking through the C++ code.
>> A rule of thumb for the C API is:
>> Every Geometry caller should take care of is returned
>> as a non-const object.
>> For these specific case the caller must delete them.
>
> Okay, so the caller needs to delete the results of methods like  
> Intersection.  Assumedly the same goes for using the C++ api - i.e,  
> geom->intersects(someOtherGeom)?
>
>
> While on the subject, I've taken a look at what would be involved  
> with having the SWIG wrappers use the C api.  Its doable -  
> basically I would have SWIG create "fake classes" which look like  
> classes to Ruby/Python but underneath use the C API.  This is how  
> the GDAL swig bindings are implemented, so its ok.  It is a bit  
> silly (duplicate definitions), but it works.
>
> But the thing that holds me back is that in the c-api all the  
> geometry types get merged into just Geometry (no points,  
> linestrings, etc.). That might be ok for C, but me would seem very  
> strange in Ruby or Python.  I've thought its too high too high a  
> price to pay and thus
>
> But I wonder if there is a way around this by using a variation of  
> the PIMPL idiom (http://www.gotw.ca/publications/mill05.htm)?
>
> Something like forward declare all the Geos geometry classes, but  
> of course don't call any methods on them.  Then for any C-API  
> method that returns a geometry do a dynamic_cast to see what it is  
> and then return an appropriate SWIG wrapper classes.
>
> Sean or Hobu - didn't one of you write your own bindings for Python  
> not using SWIG?  How did you handle this?  Are you happy with just  
> having a Geometry object and you have to make sure to use it  
> correctly (if its a point don't call NumRings)?  Or did you do  
> something more clever?
>

Charlie,

I'm doing something similar to your idea above. When a generic  
geometry is returned from a method, I check the GEOS type and then  
change the class of the result object to Point, LineString, etc.


> In the end though I wonder if there is any real benefit to using  
> the C api for the swig bindings. The c-api is supposed to insulate  
> a program from changes to the underlying C++ api.  But the bindings  
> libraries already do that.  Python/Ruby will dynamically load the  
> bindings and install the appropriate classes/methods.
>
> That means can install a new version of GEOS, swap out the bindings  
> library, restart your program, and all should be well as long as  
> you haven't removed any methods (it doesn't matter if methods or  
> classes or changed namespaces or changed hearder files or  
> whatever).  Now if you swapped out the version of GEOS and not the  
> bindings, then you'd run into problems (but you would also with the  
> C-API).
>
> There is also the point that everything is statically linked on  
> Windows  (since geos doesn't export any functions), so it doesn't  
> matter at all if the version of geos is changed on the machine.   
> You could do the same on Linux/Unix I suppose.
>
> Well, after all that rambling I've talked myself back into the idea  
> that the SWIG bindings should stick with the C++ api because the C  
> api provides no forward compatibility benefit (it does provide  
> benefit, or disadvantage depending on your viewpoint, of a much  
> smaller API).  But I'm more than happy to listen to counter  
> arguments and do the work to switch over to the C api if its  
> demonstrably better.
>
> Charlie
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

---
Sean Gillies
http://zcologia.com




From strk at refractions.net  Sat Jun 24 20:43:03 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <449DD943.40303@savagexi.com>
References: <449DB6BD.6010507@savagexi.com> <20060624222134.GB30937@keybit.net>
	<449DD27A.5060709@savagexi.com> <20060625001719.GC30937@keybit.net>
	<449DD943.40303@savagexi.com>
Message-ID: <20060625004303.GD30937@keybit.net>

On Sat, Jun 24, 2006 at 06:30:59PM -0600, Charlie Savage wrote:
> >
> >It's not silly if it makes the SWIG bindings easier to maintain.
> 
> Agreed.  Except the gdal bindings are harder to maintain in some ways 
> due to the duplication of code.
> 
> Anyway, the difference in this case is that the GDAL object model is not 
> as rich as in GEOS.  GDAL just exposes "geometry" as opposed to point, 
> line, etc.

This is what GEOS wants to do as well.

> I think this boils down to three major decisions about the SWIG bindings 
> that need to be agreed on:
> 
> 1. What geometry model do clients work with? Just geometry or geometry, 
> point, line, etc.

Clients should only work with the C api, unless willing
to follow API revolutions for a couple of years.

> 2.  What compatibility benefits does the C api provide beyond the 
> benefits of the generated swig bindings?

The C interface will be careful maintained binary compatible
between versions.

> 3.  How much of GEOS's api gets exposed to clients?

The smallest possible. Ideally none :)
The GEOS API *is* the C-API, previous releases were insane
in exposing that wide C++ interface.

--strk;

From cfis at savagexi.com  Sat Jun 24 20:58:23 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <20060625004303.GD30937@keybit.net>
References: <449DB6BD.6010507@savagexi.com>
	<20060624222134.GB30937@keybit.net>	<449DD27A.5060709@savagexi.com>
	<20060625001719.GC30937@keybit.net>	<449DD943.40303@savagexi.com>
	<20060625004303.GD30937@keybit.net>
Message-ID: <449DDFAF.5090706@savagexi.com>

Strk - Thanks for the feedback.  Some more thoughts below.

>> I think this boils down to three major decisions about the SWIG bindings 
>> that need to be agreed on:
>>
>> 1. What geometry model do clients work with? Just geometry or geometry, 
>> point, line, etc.
> 
> Clients should only work with the C api, unless willing
> to follow API revolutions for a couple of years.
> 
>> 2.  What compatibility benefits does the C api provide beyond the 
>> benefits of the generated swig bindings?
> 
> The C interface will be careful maintained binary compatible
> between versions.

Yes, but I don't think that matters for the bindings.  Binary 
compatibility is not needed because Python/Ruby dynamically load the 
bindings library and then have APIS that install the right Python/Ruby 
classes/methods (things like define_class("foo"), add_method("foo", 
"bar").  So Ruby and Python do not rely on the method layout and 
signatures of the shared library to remain the same in contrast to a C 
or C++ program would.

As an example - the change from GEOS 2.2 to GEOS 3.0 from a client 
perspective would not be noticed except for the fact that the default 
coordsequence class changed if I remember correctly (having a whole 
class removed does matter of course).  Even the exceptions - whose 
inheritance hierarchy is of course different, look exactly the same to 
the client.  The bindings do a pretty good job of insulating clients.

> 
>> 3.  How much of GEOS's api gets exposed to clients?
> 
> The smallest possible. Ideally none :)

:)  You could have been done with GEOS years ago!

> The GEOS API *is* the C-API, previous releases were insane
> in exposing that wide C++ interface.

Makes sense.  The SWIG bindings expose a bit more because they are 
exposing all the public methods of classes exposed by the c api (so all 
public methods on Line, Point, etc.)

Which leads to another question.  Should I remove the PrecisionModel and 
GeometryFactory classes from the SWIG api like the c-api has done and 
just use a shared global factory?  That would also lead the to the 
removal of the WKBWriter/WKBReader classes which would be replaced by 
global methods like in the C api.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060624/64e70ef1/smime.bin
From cfis at savagexi.com  Sat Jun 24 22:10:23 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <36872BCA-1571-4009-9366-5B1D51C6D5EE@frii.com>
References: <449DB6BD.6010507@savagexi.com>
	<20060624222134.GB30937@keybit.net>	<449DD27A.5060709@savagexi.com>
	<36872BCA-1571-4009-9366-5B1D51C6D5EE@frii.com>
Message-ID: <449DF08F.1060607@savagexi.com>

Thanks for the info Sean.

If the swig bindings used the C api and did the same check for the geom 
type, would there be any difference between them and the Python 
bindings?  Are they any specific python features you added to them to 
make them easier to use from Python?  Anything that couldn't be done in 
SWIG?  Just wondering if we can combine efforts here.

Charlie

Sean Gillies wrote:
> 
> On Jun 24, 2006, at 6:02 PM, Charlie Savage wrote:
> 
>>> We surely want them distributed. We also want to distribute the 
>>> generated
>>> wrapper (for those not having unstable swig installed).
>>> Would be nice if make maintainer-clean would get rid of the latter
>>> and next make would recreate it.
>>> (haven't tested your new makefiles yet)
>>
>> Okay, so I need to add in a hook for make maintainer-clean then and to 
>> have make check to see if the generated wrapper exists or not and 
>> create if needed (I think the makefiles already do that actually).
>>
>> Anything I need to do for getting the files into the distribution?
>>
>> Haven't checked in my changes yet, I want to first test them some more.
>>
>>>> * Who owns the geometries returned from methods such as 
>>>> Intersection, Difference, etc?  The C API doesn't give any 
>>>> indication and it wasn't obvious to me looking through the C++ code.
>>> A rule of thumb for the C API is:
>>> Every Geometry caller should take care of is returned
>>> as a non-const object.
>>> For these specific case the caller must delete them.
>>
>> Okay, so the caller needs to delete the results of methods like 
>> Intersection.  Assumedly the same goes for using the C++ api - i.e, 
>> geom->intersects(someOtherGeom)?
>>
>>
>> While on the subject, I've taken a look at what would be involved with 
>> having the SWIG wrappers use the C api.  Its doable - basically I 
>> would have SWIG create "fake classes" which look like classes to 
>> Ruby/Python but underneath use the C API.  This is how the GDAL swig 
>> bindings are implemented, so its ok.  It is a bit silly (duplicate 
>> definitions), but it works.
>>
>> But the thing that holds me back is that in the c-api all the geometry 
>> types get merged into just Geometry (no points, linestrings, etc.). 
>> That might be ok for C, but me would seem very strange in Ruby or 
>> Python.  I've thought its too high too high a price to pay and thus
>>
>> But I wonder if there is a way around this by using a variation of the 
>> PIMPL idiom (http://www.gotw.ca/publications/mill05.htm)?
>>
>> Something like forward declare all the Geos geometry classes, but of 
>> course don't call any methods on them.  Then for any C-API method that 
>> returns a geometry do a dynamic_cast to see what it is and then return 
>> an appropriate SWIG wrapper classes.
>>
>> Sean or Hobu - didn't one of you write your own bindings for Python 
>> not using SWIG?  How did you handle this?  Are you happy with just 
>> having a Geometry object and you have to make sure to use it correctly 
>> (if its a point don't call NumRings)?  Or did you do something more 
>> clever?
>>
> 
> Charlie,
> 
> I'm doing something similar to your idea above. When a generic geometry 
> is returned from a method, I check the GEOS type and then change the 
> class of the result object to Point, LineString, etc.
> 
> 
>> In the end though I wonder if there is any real benefit to using the C 
>> api for the swig bindings. The c-api is supposed to insulate a program 
>> from changes to the underlying C++ api.  But the bindings libraries 
>> already do that.  Python/Ruby will dynamically load the bindings and 
>> install the appropriate classes/methods.
>>
>> That means can install a new version of GEOS, swap out the bindings 
>> library, restart your program, and all should be well as long as you 
>> haven't removed any methods (it doesn't matter if methods or classes 
>> or changed namespaces or changed hearder files or whatever).  Now if 
>> you swapped out the version of GEOS and not the bindings, then you'd 
>> run into problems (but you would also with the C-API).
>>
>> There is also the point that everything is statically linked on 
>> Windows  (since geos doesn't export any functions), so it doesn't 
>> matter at all if the version of geos is changed on the machine.  You 
>> could do the same on Linux/Unix I suppose.
>>
>> Well, after all that rambling I've talked myself back into the idea 
>> that the SWIG bindings should stick with the C++ api because the C api 
>> provides no forward compatibility benefit (it does provide benefit, or 
>> disadvantage depending on your viewpoint, of a much smaller API).  But 
>> I'm more than happy to listen to counter arguments and do the work to 
>> switch over to the C api if its demonstrably better.
>>
>> Charlie
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> ---
> Sean Gillies
> http://zcologia.com
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060624/bae627a7/smime.bin
From cfis at savagexi.com  Sun Jun 25 00:21:03 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Some C API Issues
Message-ID: <449E0F2F.1010007@savagexi.com>

Some issues with the c api.


1. It looks like GEOSCoordSeq_getOrdinate is missing a coordinate 
sequence as its first parameter.


===================================================================
RCS file: /home/cvs/postgis/geos/capi/geos_c.cpp,v
retrieving revision 1.24
diff -u -r1.24 geos_c.cpp
--- capi/geos_c.cpp	5 Jun 2006 15:36:34 -0000	1.24
+++ capi/geos_c.cpp	25 Jun 2006 02:59:02 -0000

-extern "C" int GEOS_DLL GEOSCoordSeq_getOrdinate(unsigned int, unsigned 
int, double *);
+extern "C" int GEOS_DLL GEOSCoordSeq_getOrdinate(CoordinateSequence *, 
unsigned int, unsigned int, double *);


2.  There is an enum GEOSGeomTypeId in geos_c.h but also a method with 
the same name.  This makes VC++ 2005 unhappy.  Can the enum be renamed 
to something like GEOSGeomTypes?


3.  You can get an Envelope from a Geometry, but its returned to you as 
a GEOSGeom.  But an Envelope is not a geometry.  If you get one, and 
then use it some of the methods like Intersects, won't things blow up? 
Also, in my existing code I make use of a fair bit of the Envelope api 
(width, height, etc.).  Any chance this can be exposed in the C api?

Thanks,

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060624/c3956d44/smime.bin
From cfis at savagexi.com  Sun Jun 25 19:37:28 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
Message-ID: <449F1E38.1060306@savagexi.com>

CoordinateArraySequence has a number of assertions that check to see if 
the requested index is out of bounds of the array.  If it is, then the 
assertion is thrown - at least in Debug mode.

I'd guess assertions are off in Release builds (haven't checked), so a 
segmentation fault would occur.

Could this be changed to exceptions?  When playing around at the command 
line with Ruby or Python, its not very nice to have your application 
terminate because you specify an invalid index.

The reason I can see for not doing this is the extra overhead in 
checking the bounds - is that the case?  If so, are there profiling 
results showing that it really is a big deal?

Thanks,

Charlie

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060625/4e469262/smime.bin
From cfis at savagexi.com  Sun Jun 25 19:43:46 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Geos - multithreading and error handling
Message-ID: <449F1FB2.3020700@savagexi.com>

Is geos safe for multi-threading?

What is the approach when using the C-API for error handling?  I see 
that you can install an error handler and a notice handler.  However, 
those functions are global.  So in a multi-threaded app its easy to see 
how different threads could trigger these functions in an unexpected 
order causing the wrong error message to be returned to each thread.

How have people dealt with this?  Using thread-local storage?  Or 
serializing there calls into GEOS?  Or some other mechanism?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060625/477bd90d/smime.bin
From strk at refractions.net  Sun Jun 25 21:10:38 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <449DF08F.1060607@savagexi.com>
References: <449DB6BD.6010507@savagexi.com> <20060624222134.GB30937@keybit.net>
	<449DD27A.5060709@savagexi.com>
	<36872BCA-1571-4009-9366-5B1D51C6D5EE@frii.com>
	<449DF08F.1060607@savagexi.com>
Message-ID: <20060626011038.GF48067@keybit.net>

On Sat, Jun 24, 2006 at 08:10:23PM -0600, Charlie Savage wrote:
> Thanks for the info Sean.
> 
> If the swig bindings used the C api and did the same check for the geom 
> type, would there be any difference between them and the Python 
> bindings?  Are they any specific python features you added to them to 
> make them easier to use from Python?  Anything that couldn't be done in 
> SWIG?  Just wondering if we can combine efforts here.

I'd highly appreciate a combined effort on the binding.
I think the best would be SWIG/CAPI, bearing with SWIG version
found on debian stable.

--strk;

> 
> Charlie
> 
> Sean Gillies wrote:
> >
> >On Jun 24, 2006, at 6:02 PM, Charlie Savage wrote:
> >
> >>>We surely want them distributed. We also want to distribute the 
> >>>generated
> >>>wrapper (for those not having unstable swig installed).
> >>>Would be nice if make maintainer-clean would get rid of the latter
> >>>and next make would recreate it.
> >>>(haven't tested your new makefiles yet)
> >>
> >>Okay, so I need to add in a hook for make maintainer-clean then and to 
> >>have make check to see if the generated wrapper exists or not and 
> >>create if needed (I think the makefiles already do that actually).
> >>
> >>Anything I need to do for getting the files into the distribution?
> >>
> >>Haven't checked in my changes yet, I want to first test them some more.
> >>
> >>>>* Who owns the geometries returned from methods such as 
> >>>>Intersection, Difference, etc?  The C API doesn't give any 
> >>>>indication and it wasn't obvious to me looking through the C++ code.
> >>>A rule of thumb for the C API is:
> >>>Every Geometry caller should take care of is returned
> >>>as a non-const object.
> >>>For these specific case the caller must delete them.
> >>
> >>Okay, so the caller needs to delete the results of methods like 
> >>Intersection.  Assumedly the same goes for using the C++ api - i.e, 
> >>geom->intersects(someOtherGeom)?
> >>
> >>
> >>While on the subject, I've taken a look at what would be involved with 
> >>having the SWIG wrappers use the C api.  Its doable - basically I 
> >>would have SWIG create "fake classes" which look like classes to 
> >>Ruby/Python but underneath use the C API.  This is how the GDAL swig 
> >>bindings are implemented, so its ok.  It is a bit silly (duplicate 
> >>definitions), but it works.
> >>
> >>But the thing that holds me back is that in the c-api all the geometry 
> >>types get merged into just Geometry (no points, linestrings, etc.). 
> >>That might be ok for C, but me would seem very strange in Ruby or 
> >>Python.  I've thought its too high too high a price to pay and thus
> >>
> >>But I wonder if there is a way around this by using a variation of the 
> >>PIMPL idiom (http://www.gotw.ca/publications/mill05.htm)?
> >>
> >>Something like forward declare all the Geos geometry classes, but of 
> >>course don't call any methods on them.  Then for any C-API method that 
> >>returns a geometry do a dynamic_cast to see what it is and then return 
> >>an appropriate SWIG wrapper classes.
> >>
> >>Sean or Hobu - didn't one of you write your own bindings for Python 
> >>not using SWIG?  How did you handle this?  Are you happy with just 
> >>having a Geometry object and you have to make sure to use it correctly 
> >>(if its a point don't call NumRings)?  Or did you do something more 
> >>clever?
> >>
> >
> >Charlie,
> >
> >I'm doing something similar to your idea above. When a generic geometry 
> >is returned from a method, I check the GEOS type and then change the 
> >class of the result object to Point, LineString, etc.
> >
> >
> >>In the end though I wonder if there is any real benefit to using the C 
> >>api for the swig bindings. The c-api is supposed to insulate a program 
> >>from changes to the underlying C++ api.  But the bindings libraries 
> >>already do that.  Python/Ruby will dynamically load the bindings and 
> >>install the appropriate classes/methods.
> >>
> >>That means can install a new version of GEOS, swap out the bindings 
> >>library, restart your program, and all should be well as long as you 
> >>haven't removed any methods (it doesn't matter if methods or classes 
> >>or changed namespaces or changed hearder files or whatever).  Now if 
> >>you swapped out the version of GEOS and not the bindings, then you'd 
> >>run into problems (but you would also with the C-API).
> >>
> >>There is also the point that everything is statically linked on 
> >>Windows  (since geos doesn't export any functions), so it doesn't 
> >>matter at all if the version of geos is changed on the machine.  You 
> >>could do the same on Linux/Unix I suppose.
> >>
> >>Well, after all that rambling I've talked myself back into the idea 
> >>that the SWIG bindings should stick with the C++ api because the C api 
> >>provides no forward compatibility benefit (it does provide benefit, or 
> >>disadvantage depending on your viewpoint, of a much smaller API).  But 
> >>I'm more than happy to listen to counter arguments and do the work to 
> >>switch over to the C api if its demonstrably better.
> >>
> >>Charlie
> >>_______________________________________________
> >>geos-devel mailing list
> >>geos-devel@geos.refractions.net
> >>http://geos.refractions.net/mailman/listinfo/geos-devel
> >
> >---
> >Sean Gillies
> >http://zcologia.com
> >
> >
> >
> >_______________________________________________
> >geos-devel mailing list
> >geos-devel@geos.refractions.net
> >http://geos.refractions.net/mailman/listinfo/geos-devel



> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From sheng.liang at ericsson.com  Sun Jun 25 22:12:59 2006
From: sheng.liang at ericsson.com (Sheng Liang (SH/CBC))
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
Message-ID: <6D2638F1A4681D49B2798FD89AABD830E3F1A9@ecnshmw511.eapac.ericsson.se>

Hi:
  I encountered an error of "Segmentation Fault" with GEOS 2.2.2. What I
am doing is to
get intersection of two polygons. The error happens to the specific
polygong:
POLYGON ((125.331 0,3.35823e-06 125.331,-125.331
6.71646e-06,-1.00747e-05 -125.331,125.331 0))
and 
POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 120))
There is no error to others polygons.
So I think it must be an error of GEOS 2.2.2 code.

My code is :
        GEOSGeom aPolygon1,aPolygon2;
        string aString1("POLYGON ((125.331 0,3.35823e-06
125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))");

        string aString2("POLYGON ((245.331 120,120 245.331,-5.331
120,120 -5.331,245.331 120))");
       
        aPolygon1 = GEOSGeomFromWKT(aString1.data());
        aPolygon2 = GEOSGeomFromWKT(aString2.data());
        
        GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);

My environment:
#Uname -a
SunOS xxxx 5.8 Generic_108528-29 sun4u sparc SUNW,Sun-Blade-1500

  Could anybody of the development team have a look of it?

  Regards

  Liang Sheng
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20060626/66d94324/attachment.html
From cfis at savagexi.com  Sun Jun 25 22:40:33 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Swig Update and questions
In-Reply-To: <20060626011038.GF48067@keybit.net>
References: <449DB6BD.6010507@savagexi.com>
	<20060624222134.GB30937@keybit.net>	<449DD27A.5060709@savagexi.com>	<36872BCA-1571-4009-9366-5B1D51C6D5EE@frii.com>	<449DF08F.1060607@savagexi.com>
	<20060626011038.GF48067@keybit.net>
Message-ID: <449F4921.4020706@savagexi.com>

Okay,

 > I'd highly appreciate a combined effort on the binding.
 > I think the best would be SWIG/CAPI, bearing with SWIG version
 > found on debian stable.

I've got the SWIG bindings working with the C API.  I did it by 
"faking" classes like in GDAL.  I also implemented a simple geometry 
hierarchy of point, line, etc. based on the geometry type id.  Its seems 
to work well.

As far as the SWIG version, my guess (and based on a quick google 
search) is that Debian stable is using an ancient version.  We really 
want to stick with the latest SWIG (1.3.29) version because of two big 
reasons:

*  it means the majority of the SWIG interface files can be used for 
Python and Ruby.  It also means if someone like Ari wanted to add in a 
Perl binding it wouldn't be too hard.

* older versions of Ruby SWIG could not handle giving up ownership of 
objects (like when passing a coordinate sequence to a geometry 
constructor) which is a must have for GEOS.

Note that GDAL is also using SWIG 1.3.29.

Sean / Hobu - If you send me the API exposed by your custom bindings I 
can align the SWIG bindings with them as much as possible.

Strk - Guidance would be appreciated on my emails about threading and 
error messages and the various fixes/proposed changes to the C API.

What needs to be done:

*  A couple more hours of implementation

*  A few days of tests - I see the new test suite for the C++ api, I 
just plan on porting it to Ruby (great work Mateusz)

* Probably a day more of messing around with the build scripts

I plan on doing this stuff during the course of this week.

Thanks,

Charlie

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060625/d73cd109/smime.bin
From mateusz at loskot.net  Sun Jun 25 23:36:07 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Geos - multithreading and error handling
In-Reply-To: <449F1FB2.3020700@savagexi.com>
References: <449F1FB2.3020700@savagexi.com>
Message-ID: <449F5627.3080102@loskot.net>

Charlie Savage wrote:
> Is geos safe for multi-threading?

IMHO it isn't.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sun Jun 25 23:44:01 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <449F1E38.1060306@savagexi.com>
References: <449F1E38.1060306@savagexi.com>
Message-ID: <449F5801.3080009@loskot.net>

Charlie Savage wrote:
> CoordinateArraySequence has a number of assertions that check to see 
> if the requested index is out of bounds of the array.  If it is, then
> the assertion is thrown - at least in Debug mode.
> 
> I'd guess assertions are off in Release builds (haven't checked), so 
> a segmentation fault would occur.
> 
> Could this be changed to exceptions?  When playing around at the 
> command line with Ruby or Python, its not very nice to have your 
> application terminate because you specify an invalid index.

This is a bad idea!
Using exceptions and checking if passed index is in range by default
will decrease performance pretty much.
Better idea is to provide two accessors: safe and unsafe, just as at()
and operator[] member functions in std::vector.

> The reason I can see for not doing this is the extra overhead in 
> checking the bounds - is that the case?

Yes.

> If so, are there profiling results showing that it really is a big 
> deal?

IMO, no profiling is needed because this is well-known issue.
Consider, why C++ Standard Committee introduced std::vector members I
named above. Single if clause when called hundreds or thousands times
will introduce significant overhead for sure.
Exceptions are even worst, because RTTI comes to the game.

IMHO, the most reasonable solution is to follow C++ STL design and take
the same decisions to provide optimal performance with guaranteed degree
of safety. So, all GEOS collections should provide similar API, doubled,
save and unsafe at the same time like at() and operator[] in std::vector.

This is only my opinion

-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Sun Jun 25 23:49:02 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1A9@ecnshmw511.eapac.ericsson.se>
References: <6D2638F1A4681D49B2798FD89AABD830E3F1A9@ecnshmw511.eapac.ericsson.se>
Message-ID: <449F592E.50504@loskot.net>

Sheng Liang (SH/CBC) wrote:
> Hi: I encountered an error of "Segmentation Fault" with GEOS 2.2.2.
> What I am doing is to get intersection of two polygons. The error
> happens to the specific polygong: POLYGON ((125.331 0,3.35823e-06
> 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) and 
> POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 120))
>  There is no error to others polygons. So I think it must be an error
> of GEOS 2.2.2 code.
> 
> My code is : GEOSGeom aPolygon1,aPolygon2; string aString1("POLYGON
> ((125.331 0,3.35823e-06 125.331,-125.331 6.71646e-06,-1.00747e-05
> -125.331,125.331 0))");
> 
> string aString2("POLYGON ((245.331 120,120 245.331,-5.331 120,120
> -5.331,245.331 120))");
> 
> aPolygon1 = GEOSGeomFromWKT(aString1.data());
> aPolygon2 = GEOSGeomFromWKT(aString2.data());

I'm suer in 99% that the problem is in your code above.
You should not access internal buffer of std::string with data() member
function. It should be used in very rare cases because it breaks OOP
rule of encapsulation! It's available only for C compatibility.

GEOSGeomFromWKT expects to get const char* :
Geometry *GEOSGeomFromWKT(const char *wkt);

so, you should call it as follows:

aPolygon1 = GEOSGeomFromWKT(aString1.c_str());

std::string::c_str() returns const char*.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From cfis at savagexi.com  Sun Jun 25 23:57:12 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <449F5801.3080009@loskot.net>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
Message-ID: <449F5B18.3070706@savagexi.com>


> Better idea is to provide two accessors: safe and unsafe, just as at()
> and operator[] member functions in std::vector.

Yes, this would be ok.

> IMO, no profiling is needed because this is well-known issue.
> Consider, why C++ Standard Committee introduced std::vector members I
> named above. Single if clause when called hundreds or thousands times
> will introduce significant overhead for sure.
> Exceptions are even worst, because RTTI comes to the game.

Um, well, it would be nice to see proof of this.  I have a hard time 
imagining an if statement is going to make such a big difference. 
Exceptions would of course be raised very rarely so that should have no 
impact on performance.

> IMHO, the most reasonable solution is to follow C++ STL design and take
> the same decisions to provide optimal performance with guaranteed degree
> of safety. So, all GEOS collections should provide similar API, doubled,
> save and unsafe at the same time like at() and operator[] in std::vector.

Yes, I'd be happy with that.  I think a scripting language should use 
the "safe" version because its much more forgiving and if performance is 
  really such a big deal then you wouldn't be using Ruby or Python - 
instead you'd write a C/C++ client against GEOS.

Strk - what do you think of adding a "safe" version of these calls to 
the C API?

Also, it seems natural that from Ruby or Python you'd create a 
vector/array/list of points and send them off the GEOS.  I can do the 
translation in the wrapper code from array like structures to 
GEOSCoordSeq_setX, GEOSCoordSeq_setY.  However, should the the C API 
have an array getter/setter method also?  The client passes in an array 
and its size, and the C API munges it into the coordinate sequence.

Charlie





Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060625/5dde4b9a/smime.bin
From sheng.liang at ericsson.com  Mon Jun 26 00:07:48 2006
From: sheng.liang at ericsson.com (Sheng Liang (SH/CBC))
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <449F592E.50504@loskot.net>
Message-ID: <6D2638F1A4681D49B2798FD89AABD830E3F1AA@ecnshmw511.eapac.ericsson.se>

HI:
  I have tried aString1.c_str(), but I still get the same
error. And I even use such code:
   GEOSGeom aPolygon1,aPolygon2;
   const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";

   const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331
120,120 -5.331,245.331 120))";

        
   aPolygon1 = GEOSGeomFromWKT(aString1);
   aPolygon2 = GEOSGeomFromWKT(aString2);
        
   GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);  

And the error is the same.
  Regards

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Mateusz
Loskot
Sent: Monday, June 26, 2006 11:49
To: GEOS Development List
Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2

Sheng Liang (SH/CBC) wrote:
> Hi: I encountered an error of "Segmentation Fault" with GEOS 2.2.2.
> What I am doing is to get intersection of two polygons. The error 
> happens to the specific polygong: POLYGON ((125.331 0,3.35823e-06
> 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) and 
> POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 120))

> There is no error to others polygons. So I think it must be an error 
> of GEOS 2.2.2 code.
> 
> My code is : GEOSGeom aPolygon1,aPolygon2; string aString1("POLYGON
> ((125.331 0,3.35823e-06 125.331,-125.331 6.71646e-06,-1.00747e-05
> -125.331,125.331 0))");
> 
> string aString2("POLYGON ((245.331 120,120 245.331,-5.331 120,120
> -5.331,245.331 120))");
> 
> aPolygon1 = GEOSGeomFromWKT(aString1.data());
> aPolygon2 = GEOSGeomFromWKT(aString2.data());

I'm suer in 99% that the problem is in your code above.
You should not access internal buffer of std::string with data() member
function. It should be used in very rare cases because it breaks OOP
rule of encapsulation! It's available only for C compatibility.

GEOSGeomFromWKT expects to get const char* :
Geometry *GEOSGeomFromWKT(const char *wkt);

so, you should call it as follows:

aPolygon1 = GEOSGeomFromWKT(aString1.c_str());

std::string::c_str() returns const char*.

Cheers
--
Mateusz Loskot
http://mateusz.loskot.net
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From sdlime at comcast.net  Mon Jun 26 00:33:28 2006
From: sdlime at comcast.net (Stephen Lime)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] C API, GEOSGeom_getCoordSeq, quick question...
Message-ID: <1452b35ac0dd3ece9b7b448dcf4876d7@comcast.net>

Hi all: Is the coord seq returned by that function a pointer to owned 
coordinates or a new copy that
needs to be cleaned up?

Steve


From cfis at savagexi.com  Mon Jun 26 00:39:24 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] C API, GEOSGeom_getCoordSeq, quick question...
In-Reply-To: <1452b35ac0dd3ece9b7b448dcf4876d7@comcast.net>
References: <1452b35ac0dd3ece9b7b448dcf4876d7@comcast.net>
Message-ID: <449F64FC.3070100@savagexi.com>

GEOSCoordSeq_create returns a pointer you need to clean up using 
GEOSCoordSeq_destroy.

However, if you use the returned coordinate sequence as a parameter to 
createPoint, createLineString, etc then the new geometry takes over 
ownership (so you have to clean up the geometry instead).

Charlie

Stephen Lime wrote:
> Hi all: Is the coord seq returned by that function a pointer to owned 
> coordinates or a new copy that
> needs to be cleaned up?
> 
> Steve
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060625/2ceba7c3/smime.bin
From sdlime at comcast.net  Mon Jun 26 00:42:46 2006
From: sdlime at comcast.net (Stephen Lime)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] C API, GEOSGeom_getCoordSeq, quick question...
In-Reply-To: <449F64FC.3070100@savagexi.com>
References: <1452b35ac0dd3ece9b7b448dcf4876d7@comcast.net>
	<449F64FC.3070100@savagexi.com>
Message-ID: <55af106466231b102491c8fd130965b1@comcast.net>

Cool, thanks for the confirmation.

Steve

On Jun 25, 2006, at 11:39 PM, Charlie Savage wrote:

> GEOSCoordSeq_create returns a pointer you need to clean up using 
> GEOSCoordSeq_destroy.
>
> However, if you use the returned coordinate sequence as a parameter to 
> createPoint, createLineString, etc then the new geometry takes over 
> ownership (so you have to clean up the geometry instead).
>
> Charlie
>
> Stephen Lime wrote:
>> Hi all: Is the coord seq returned by that function a pointer to owned 
>> coordinates or a new copy that
>> needs to be cleaned up?
>> Steve
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From cfis at savagexi.com  Mon Jun 26 05:21:57 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] MingW compilation errors and patches
Message-ID: <449FA735.7080205@savagexi.com>

Three MingW compiling issues (this is gcc 3.4.5 on Windows).  First one 
I'm not sure what to do about, the other two I've attached patches.  Let 
me know if I should check them in .

1.  The destructors in the .inl files seem to confuse ld.  In the 
linking stage there are about 10 errors like these:

libs/libgeos.lax/libalgorithm.a/MCPointInRing.o: In function 
`ZN4geos9algorithm13MCPointInRing10MCSelecterD1Ev':C:/Development/msys/src/geos/source/algorithm/../../source/headers/geos/algorithm/PointInRing.h:(.text$_ZN4geos4geom11LineSegmentD1Ev[__ZN4geos4geom11LineSegmentD1Ev]+0x0): 
multiple definition of `geos::geom::LineSegment::~LineSegment()'
.libs/inlines.o:C:/Development/msys/src/geos/source/../source/headers/geos/geom/LineSegment.inl:51: 
first defined here

Any suggestions?


2.  The finite function

  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos -I../../source/headers -g -O2 -DGEOS_INLINE 
-Wall -ansi -pedantic -Wno-long-long -MT HCoordinate.lo -MD -MP -MF 
.deps/HCoordinate.Tpo -c HCoordinate.cpp  -DDLL_EXPORT -DPIC -o 
.libs/HCoordinate.o
HCoordinate.cpp: In member function `long double 
geos::algorithm::HCoordinate::getX() const':
HCoordinate.cpp:188: error: `finite' was not declared in this scope
HCoordinate.cpp:188: warning: unused variable 'finite'


Patch:

Index: source/headers/geos/platform.h.in
===================================================================
RCS file: /home/cvs/postgis/geos/source/headers/geos/platform.h.in,v
retrieving revision 1.10
diff -u -r1.10 platform.h.in
--- source/headers/geos/platform.h.in	12 Jun 2006 13:57:54 -0000	1.10
+++ source/headers/geos/platform.h.in	26 Jun 2006 08:03:12 -0000
@@ -37,6 +37,10 @@
  #define FINITE(x) ( (x) != DoubleNotANumber && (x) != DoubleInfinity 
&& (x) != DoubleNegInfinity )
  #define ISNAN(x) ( (x) == DoubleNotANumber )

+#if defined(__GNUC__) && defined(_WIN32)
+#define finite(x) FINITE(x)

+#endif
+
  #ifdef HAVE_INT64_T_64
    typedef int64_t int64;
  #else



3.  gettimeofday


  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
-I../../source/headers/geos -I../../source/headers -g -O2 -DGEOS_INLINE 
-Wall -ansi -pedantic -Wno-long-long -MT CoordinateSequence.lo -MD -MP 
-MF .deps/CoordinateSequence.Tpo -c CoordinateSequence.cpp  -DDLL_EXPORT 
-DPIC -o .libs/CoordinateSequence.o
In file included from ../../source/headers/geos/profiler.h:22,
                  from CoordinateSequence.cpp:17:
../../source/headers/geos/timeval.h: In function `int 
gettimeofday(timeval*, timezone*)':
../../source/headers/geos/timeval.h:60: error: `tzset' was not declared 
in this scope
../../source/headers/geos/timeval.h:60: warning: unused variable 'tzset'
../../source/headers/geos/timeval.h:63: error: `_timezone' was not 
declared in this scope
../../source/headers/geos/timeval.h:64: error: `_daylight' was not 
declared in this scope
../../source/headers/geos/timeval.h:63: warning: unused variable '_timezone'
../../source/headers/geos/timeval.h:64: warning: unused variable '_daylight'


Patch:


Index: source/headers/geos/timeval.h
===================================================================
RCS file: /home/cvs/postgis/geos/source/headers/geos/timeval.h,v
retrieving revision 1.3
diff -u -r1.3 timeval.h
--- source/headers/geos/timeval.h	20 Mar 2006 10:14:01 -0000	1.3
+++ source/headers/geos/timeval.h	26 Jun 2006 08:48:58 -0000
@@ -32,6 +32,16 @@

  #endif /* _WIN32 */

+/* For MingW the appropriate definitions are included in
+ time.h but they are protected by the __STRICT_ANSI__
+ definition.  Since GEOS is compiled with -ansi and
+ -pedantic, they don't get included. */
+#if defined(_WIN32) && defined(__GNUC__)
+extern _CRTIMP void __cdecl	_tzset (void);
+__MINGW_IMPORT int	_daylight;
+__MINGW_IMPORT long	_timezone;
+#endif
+
  #if defined(_WIN32) && !defined(_WIN32_WCE)

  __inline int gettimeofday(struct timeval *tv, struct timezone *tz)



Thanks,

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060626/033d2c5f/smime.bin
From mateusz at loskot.net  Mon Jun 26 06:34:26 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <449F5B18.3070706@savagexi.com>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
	<449F5B18.3070706@savagexi.com>
Message-ID: <449FB832.7000106@loskot.net>

Charlie Savage wrote:
> 
>> Better idea is to provide two accessors: safe and unsafe, just as 
>> at() and operator[] member functions in std::vector.
> 
> Yes, this would be ok.
> 
>> IMO, no profiling is needed because this is well-known issue. 
>> Consider, why C++ Standard Committee introduced std::vector members
>>  I named above. Single if clause when called hundreds or thousands 
>> times will introduce significant overhead for sure. Exceptions are 
>> even worst, because RTTI comes to the game.
> 
> Um, well, it would be nice to see proof of this.  I have a hard time
>  imagining an if statement is going to make such a big difference.


Please, see exactly what I've written: hundreds/thousands and milions
of iterations.
Certainly, this cost may be not very observable in our case, but
there are situations it can make it bigger.

> Exceptions would of course be raised very rarely so that should have 
> no impact on performance.

Exceptions overhead does not only occur when exceptions are thrown.
The overhead lies in both execution speed and program size.
Exceptions introduce overhead also in many places:

- if there is a return instruction from the middle of try-catch block
then the system must throw a kind of silent exception to clean up the
stack what's very expansive.

- each try-catch blok forces compiler to push exception frame on the stack

- when exception is thrown, overhead can be caused by careless
programmer, e.g. if exception causes copy of heavy objects, calling
non-trivial constructor/destructor, this causes overhead too.

- RTTI support required by exceptions, also introduces some overhead.
Exceptions require some run-time information about structure of
functions, to determine if an exception was thrown from the try-catch
block or not.

>> IMHO, the most reasonable solution is to follow C++ STL design and 
>> take the same decisions to provide optimal performance with 
>> guaranteed degree of safety. So, all GEOS collections should 
>> provide similar API, doubled, save and unsafe at the same time like
>>  at() and operator[] in std::vector.
> 
> Yes, I'd be happy with that.  I think a scripting language should use
>  the "safe" version because its much more forgiving and if 
> performance is really such a big deal then you wouldn't be using Ruby
>  or Python - instead you'd write a C/C++ client against GEOS.

exceptions-enabled version (at()) is almost 2 times slower than unsafe
version - operator[].
Here is my small benchmark measured with callgrind:
http://mateusz.loskot.net/tmp/perf.png

Here you have much more professional benchmarks that proof the same:
http://groups.google.pl/group/misc.test/browse_frm/thread/19f69cead14a07e2/

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Mon Jun 26 06:50:18 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] MingW compilation errors and patches
In-Reply-To: <449FA735.7080205@savagexi.com>
References: <449FA735.7080205@savagexi.com>
Message-ID: <20060626105018.GB53660@keybit.net>

On Mon, Jun 26, 2006 at 03:21:57AM -0600, Charlie Savage wrote:
> Three MingW compiling issues (this is gcc 3.4.5 on Windows).  First one 
> I'm not sure what to do about, the other two I've attached patches.  Let 
> me know if I should check them in .
> 
> 1.  The destructors in the .inl files seem to confuse ld.  In the 
> linking stage there are about 10 errors like these:
> 
> libs/libgeos.lax/libalgorithm.a/MCPointInRing.o: In function 
> `ZN4geos9algorithm13MCPointInRing10MCSelecterD1Ev':C:/Development/msys/src/geos/source/algorithm/../../source/headers/geos/algorithm/PointInRing.h:(.text$_ZN4geos4geom11LineSegmentD1Ev[__ZN4geos4geom11LineSegmentD1Ev]+0x0): 
> multiple definition of `geos::geom::LineSegment::~LineSegment()'
> .libs/inlines.o:C:/Development/msys/src/geos/source/../source/headers/geos/geom/LineSegment.inl:51: 
> first defined here
> 
> Any suggestions?

Is it a clean checkout ?
I guess the above can happen if you change GEOS_INLINES define
between different builds (deps problems).

> 2.  The finite function
> 
>  g++ -DHAVE_CONFIG_H -I. -I. -I../../source/headers 
> -I../../source/headers/geos -I../../source/headers -g -O2 -DGEOS_INLINE 
> -Wall -ansi -pedantic -Wno-long-long -MT HCoordinate.lo -MD -MP -MF 
> .deps/HCoordinate.Tpo -c HCoordinate.cpp  -DDLL_EXPORT -DPIC -o 
> .libs/HCoordinate.o
> HCoordinate.cpp: In member function `long double 
> geos::algorithm::HCoordinate::getX() const':
> HCoordinate.cpp:188: error: `finite' was not declared in this scope
> HCoordinate.cpp:188: warning: unused variable 'finite'

FINITE() and finite() are really different functions, you should
make sure the math.h header is included whenever finite() is used.
Actually, the manual page states that _BSD_SOURCE must be defined.
If anyone knows of a standard C++ equivalent that'd be nice.

--strk;

From cfis at savagexi.com  Mon Jun 26 14:25:06 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <449FB832.7000106@loskot.net>
References: <449F1E38.1060306@savagexi.com>
	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>
	<449FB832.7000106@loskot.net>
Message-ID: <44A02682.8030803@savagexi.com>

> Please, see exactly what I've written: hundreds/thousands and milions
> of iterations.

Mateusz - I read exactly what you wrote.  Please don't question my 
ability to read, I don't think its conductive to a good discussion.

> Here is my small benchmark measured with callgrind:
> http://mateusz.loskot.net/tmp/perf.png
> Here you have much more professional benchmarks that proof the same:
> http://groups.google.pl/group/misc.test/browse_frm/thread/19f69cead14a07e2/

Excellent, thanks for the pointers, these certainly prove the point and 
answer  my question.

Anyway, as we discussed yesterday, I'm happy with "safe" versions of 
these methods. Strk, what do you think?

Charlie

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060626/5114a281/smime.bin
From strk at refractions.net  Mon Jun 26 14:31:10 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <44A02682.8030803@savagexi.com>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
	<449F5B18.3070706@savagexi.com> <449FB832.7000106@loskot.net>
	<44A02682.8030803@savagexi.com>
Message-ID: <20060626183110.GI61140@keybit.net>

On Mon, Jun 26, 2006 at 12:25:06PM -0600, Charlie Savage wrote:
> >Please, see exactly what I've written: hundreds/thousands and milions
> >of iterations.
> 
> Mateusz - I read exactly what you wrote.  Please don't question my 
> ability to read, I don't think its conductive to a good discussion.
> 
> >Here is my small benchmark measured with callgrind:
> >http://mateusz.loskot.net/tmp/perf.png
> >Here you have much more professional benchmarks that proof the same:
> >http://groups.google.pl/group/misc.test/browse_frm/thread/19f69cead14a07e2/
> 
> Excellent, thanks for the pointers, these certainly prove the point and 
> answer  my question.
> 
> Anyway, as we discussed yesterday, I'm happy with "safe" versions of 
> these methods. Strk, what do you think?

I think programmers should not be scared by segmentation faults.

--strk;

From mateusz at loskot.net  Mon Jun 26 14:38:57 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <44A02682.8030803@savagexi.com>
References: <449F1E38.1060306@savagexi.com>	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>	<449FB832.7000106@loskot.net>
	<44A02682.8030803@savagexi.com>
Message-ID: <44A029C1.3050009@loskot.net>

Charlie Savage wrote:
>> Please, see exactly what I've written: hundreds/thousands and 
>> milions of iterations.
> 
> Mateusz - I read exactly what you wrote.  Please don't question my 
> ability to read, I don't think its conductive to a good discussion.

Charlie,

Forgive me my impoliteness, I didn't want you to understand it that way.
It wasn't my goal to question your ability to read.
Simply, I had an impression that your reply considers single if, as
"imagining an if statement". That's why I decided to underline the sense
of my post.

>> Here is my small benchmark measured with callgrind: 
>> http://mateusz.loskot.net/tmp/perf.png Here you have much more 
>> professional benchmarks that proof the same: 
>> http://groups.google.pl/group/misc.test/browse_frm/thread/19f69cead14a07e2/
>> 
>> 
>> 
>> 
> 
> Excellent, thanks for the pointers, these certainly prove the point 
> and answer  my question.


I'm happy to hear it.


> Anyway, as we discussed yesterday, I'm happy with "safe" versions of 
> these methods. Strk, what do you think?

Yeah, strk what do you think?

This would start implementing my secret plan to follow STL interface
design, heh :-)))

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From cfis at savagexi.com  Mon Jun 26 14:40:37 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <20060626183110.GI61140@keybit.net>
References: <449F1E38.1060306@savagexi.com>
	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>
	<449FB832.7000106@loskot.net>	<44A02682.8030803@savagexi.com>
	<20060626183110.GI61140@keybit.net>
Message-ID: <44A02A25.4060309@savagexi.com>

> 
> I think programmers should not be scared by segmentation faults.

Sure.

But this is a different use case then a C/C++ client.

It is programmers working with GEOS from Ruby/Python. In both languages 
array/vetor/list indices are checked and exceptions are raised if they 
are out of bounds.  If we want geos to fit in well in these 
environments, then it would make sense for GEOS to behave the same way.

Also, I don't think there is anything in either language that you can do 
(not including bugs of course or a call to abort) that would cause your 
session to abort.

Anyway - don't know why this did not dawnd on me before - but let's do 
this.  I'll add in the checks in the wrapper since CoordinateSequence 
provides a size method.  That way the api can stay the same but we can 
get bounds checkings for Ruby/Python.

Charlie

> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060626/354f7cee/smime.bin
From strk at refractions.net  Mon Jun 26 14:41:49 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <44A029C1.3050009@loskot.net>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
	<449F5B18.3070706@savagexi.com> <449FB832.7000106@loskot.net>
	<44A02682.8030803@savagexi.com> <44A029C1.3050009@loskot.net>
Message-ID: <20060626184149.GJ61140@keybit.net>

On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
> Charlie Savage wrote:

> > Anyway, as we discussed yesterday, I'm happy with "safe" versions of 
> > these methods. Strk, what do you think?
> 
> Yeah, strk what do you think?
> 
> This would start implementing my secret plan to follow STL interface
> design, heh :-)))

It's completely fine with me following STL interface design,
as long as it's Mateusz doing it :D

--strk;

From cfis at savagexi.com  Mon Jun 26 14:59:08 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <20060626184149.GJ61140@keybit.net>
References: <449F1E38.1060306@savagexi.com>
	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>
	<449FB832.7000106@loskot.net>	<44A02682.8030803@savagexi.com>
	<44A029C1.3050009@loskot.net> <20060626184149.GJ61140@keybit.net>
Message-ID: <44A02E7C.2080202@savagexi.com>

I'll let you guys decide.  If there are safe methods the bindings will 
use them.  If they are not, then I'll add the checks into the bindings code.

Charlie

strk@refractions.net wrote:
> On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
>> Charlie Savage wrote:
> 
>>> Anyway, as we discussed yesterday, I'm happy with "safe" versions of 
>>> these methods. Strk, what do you think?
>> Yeah, strk what do you think?
>>
>> This would start implementing my secret plan to follow STL interface
>> design, heh :-)))
> 
> It's completely fine with me following STL interface design,
> as long as it's Mateusz doing it :D
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060626/b92fe416/smime.bin
From cfis at savagexi.com  Mon Jun 26 16:18:58 2006
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] MingW compilation errors and patches
In-Reply-To: <20060626105018.GB53660@keybit.net>
References: <449FA735.7080205@savagexi.com> <20060626105018.GB53660@keybit.net>
Message-ID: <44A04132.8050306@savagexi.com>

>> Any suggestions?
> 
> Is it a clean checkout ?
> I guess the above can happen if you change GEOS_INLINES define
> between different builds (deps problems).

Just to be sure, I deleted my copy of GEOS, and rechecked out.  Ran 
./autogen.sh, then ./configure.  Same issue.  Its actually not just 
constructors, for example:

.libs/libgeos.lax/libnoding.a/MCIndexSnapRounder.o: In function 
`ZN4geos6noding9snapround18MCIndexSnapRounderD1Ev':C:/Development/msys/src/geos/source/noding/snapround/MCIndexSnapRounder.cpp:(.text$_ZNK4geos6noding9snapround18MCIndexSnapRounder18getNodedSubstringsEv[__ZNK4geos6noding9snapround18MCIndexSnapRounder18getNodedSubstringsEv]+0x0): 
multiple definition of 
`geos::noding::snapround::MCIndexSnapRounder::getNodedSubstrings() const'

Haven't touched the GEOS_INLINES define.

> 
>> 2.  The finite function
> 
> FINITE() and finite() are really different functions, you should
> make sure the math.h header is included whenever finite() is used.
> Actually, the manual page states that _BSD_SOURCE must be defined.
> If anyone knows of a standard C++ equivalent that'd be nice.

Ok, looked at this more.  This is the same issue as the time stuff. 
MingW has the correct defines, but they are protected by the 
__STRICT_ANSI__ define.  Right now, MingW compiles with -ansi so they 
are not picked up.  I assume we want to keep it this way, so I've just 
copied the appropriate definitions from the header like this:

#if defined(__GNUC__) && defined(_WIN32)
int __cdecl _finite (double);
#define finite(x) _finite(x)
#endif

So this now matches what VC++ does - hopefully thats better.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20060626/718d2005/smime.bin
From strk at refractions.net  Mon Jun 26 19:11:58 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <44A02A25.4060309@savagexi.com>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
	<449F5B18.3070706@savagexi.com> <449FB832.7000106@loskot.net>
	<44A02682.8030803@savagexi.com> <20060626183110.GI61140@keybit.net>
	<44A02A25.4060309@savagexi.com>
Message-ID: <20060626231158.GM61140@keybit.net>

On Mon, Jun 26, 2006 at 12:40:37PM -0600, Charlie Savage wrote:

> Anyway - don't know why this did not dawnd on me before - but let's do 
> this.  I'll add in the checks in the wrapper since CoordinateSequence 
> provides a size method.  That way the api can stay the same but we can 
> get bounds checkings for Ruby/Python.

Yes, that's the way to go!

--strk;


From sheng.liang at ericsson.com  Mon Jun 26 22:07:07 2006
From: sheng.liang at ericsson.com (Sheng Liang (SH/CBC))
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Geos - multithreading and error handling
In-Reply-To: <449F5627.3080102@loskot.net>
Message-ID: <6D2638F1A4681D49B2798FD89AABD830E3F1AC@ecnshmw511.eapac.ericsson.se>

Hi:
  Why did you say that geos is not safe for multi-threading? Do you have
any experience to support your point? Or the multi-thread safe is not
a goal of geos development? 
  I am interested in this point also.

  Regards
  Liang Sheng

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Mateusz
Loskot
Sent: Monday, June 26, 2006 11:36
To: GEOS Development List
Subject: Re: [geos-devel] Geos - multithreading and error handling

Charlie Savage wrote:
> Is geos safe for multi-threading?

IMHO it isn't.

Cheers
--
Mateusz Loskot
http://mateusz.loskot.net
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From mateusz at loskot.net  Tue Jun 27 02:42:28 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <20060626184149.GJ61140@keybit.net>
References: <449F1E38.1060306@savagexi.com>
	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>
	<449FB832.7000106@loskot.net>	<44A02682.8030803@savagexi.com>
	<44A029C1.3050009@loskot.net> <20060626184149.GJ61140@keybit.net>
Message-ID: <44A0D354.3020907@loskot.net>

strk@refractions.net wrote:
> On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
>> Charlie Savage wrote:
> 
>>> Anyway, as we discussed yesterday, I'm happy with "safe" versions
>>> of these methods. Strk, what do you think?
>> Yeah, strk what do you think?
>> 
>> This would start implementing my secret plan to follow STL
>> interface design, heh :-)))
> 
> It's completely fine with me following STL interface design, as long
> as it's Mateusz doing it :D

Hmm, are you sure you want me to do it?
It could break current design and JTS compatibility - same classes layout.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Tue Jun 27 10:40:02 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <44A0D354.3020907@loskot.net>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
	<449F5B18.3070706@savagexi.com> <449FB832.7000106@loskot.net>
	<44A02682.8030803@savagexi.com> <44A029C1.3050009@loskot.net>
	<20060626184149.GJ61140@keybit.net> <44A0D354.3020907@loskot.net>
Message-ID: <20060627144002.GR61140@keybit.net>

On Tue, Jun 27, 2006 at 08:42:28AM +0200, Mateusz Loskot wrote:
> strk@refractions.net wrote:
> > On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
> >> Charlie Savage wrote:
> > 
> >>> Anyway, as we discussed yesterday, I'm happy with "safe" versions
> >>> of these methods. Strk, what do you think?
> >> Yeah, strk what do you think?
> >> 
> >> This would start implementing my secret plan to follow STL
> >> interface design, heh :-)))
> > 
> > It's completely fine with me following STL interface design, as long
> > as it's Mateusz doing it :D
> 
> Hmm, are you sure you want me to do it?
> It could break current design and JTS compatibility - same classes layout.

No no! Was just talking about exception-throwing duplicates of elements
access functions. No much fun.

--strk;

From strk at refractions.net  Tue Jun 27 11:34:55 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Some C API Issues
In-Reply-To: <449E0F2F.1010007@savagexi.com>
References: <449E0F2F.1010007@savagexi.com>
Message-ID: <20060627153455.GT61140@keybit.net>

(1) and (2) committed.

For (3) the returned object is really a Geometry (a Polygon) so nothing
should blow up.
About exposing the Envelope class, what would you use it for exactly ?
(next you'd want indexes...)

We should really provide unit tests for the C api at this stage.

--strk;

On Sat, Jun 24, 2006 at 10:21:03PM -0600, Charlie Savage wrote:
> Some issues with the c api.
> 
> 
> 1. It looks like GEOSCoordSeq_getOrdinate is missing a coordinate 
> sequence as its first parameter.
> 
> 
> ===================================================================
> RCS file: /home/cvs/postgis/geos/capi/geos_c.cpp,v
> retrieving revision 1.24
> diff -u -r1.24 geos_c.cpp
> --- capi/geos_c.cpp	5 Jun 2006 15:36:34 -0000	1.24
> +++ capi/geos_c.cpp	25 Jun 2006 02:59:02 -0000
> 
> -extern "C" int GEOS_DLL GEOSCoordSeq_getOrdinate(unsigned int, unsigned 
> int, double *);
> +extern "C" int GEOS_DLL GEOSCoordSeq_getOrdinate(CoordinateSequence *, 
> unsigned int, unsigned int, double *);
> 
> 
> 2.  There is an enum GEOSGeomTypeId in geos_c.h but also a method with 
> the same name.  This makes VC++ 2005 unhappy.  Can the enum be renamed 
> to something like GEOSGeomTypes?
> 
> 
> 3.  You can get an Envelope from a Geometry, but its returned to you as 
> a GEOSGeom.  But an Envelope is not a geometry.  If you get one, and 
> then use it some of the methods like Intersects, won't things blow up? 
> Also, in my existing code I make use of a fair bit of the Envelope api 
> (width, height, etc.).  Any chance this can be exposed in the C api?
> 
> Thanks,
> 
> Charlie

From strk at refractions.net  Tue Jun 27 11:38:20 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Geos - multithreading and error handling
In-Reply-To: <449F1FB2.3020700@savagexi.com>
References: <449F1FB2.3020700@savagexi.com>
Message-ID: <20060627153820.GU61140@keybit.net>

On Sun, Jun 25, 2006 at 05:43:46PM -0600, Charlie Savage wrote:
> Is geos safe for multi-threading?
> 
> What is the approach when using the C-API for error handling?  I see 
> that you can install an error handler and a notice handler.  However, 
> those functions are global.  So in a multi-threaded app its easy to see 
> how different threads could trigger these functions in an unexpected 
> order causing the wrong error message to be returned to each thread.

I've no experience with threaded runs, anyway I don't get the unexpected
order problem.. errors should be raised in the order they occur.

--strk;

From strk at refractions.net  Tue Jun 27 11:44:38 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1AA@ecnshmw511.eapac.ericsson.se>
References: <449F592E.50504@loskot.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1AA@ecnshmw511.eapac.ericsson.se>
Message-ID: <20060627154438.GV61140@keybit.net>

Did you call initGEOS() ?
That's currently *required* (might change in the future)

--strk;

On Mon, Jun 26, 2006 at 12:07:48PM +0800, Sheng Liang (SH/CBC) wrote:
> HI:
>   I have tried aString1.c_str(), but I still get the same
> error. And I even use such code:
>    GEOSGeom aPolygon1,aPolygon2;
>    const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
> 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";
> 
>    const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331
> 120,120 -5.331,245.331 120))";
> 
>         
>    aPolygon1 = GEOSGeomFromWKT(aString1);
>    aPolygon2 = GEOSGeomFromWKT(aString2);
>         
>    GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);  
> 
> And the error is the same.
>   Regards
> 
> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Mateusz
> Loskot
> Sent: Monday, June 26, 2006 11:49
> To: GEOS Development List
> Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
> 
> Sheng Liang (SH/CBC) wrote:
> > Hi: I encountered an error of "Segmentation Fault" with GEOS 2.2.2.
> > What I am doing is to get intersection of two polygons. The error 
> > happens to the specific polygong: POLYGON ((125.331 0,3.35823e-06
> > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) and 
> > POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 120))
> 
> > There is no error to others polygons. So I think it must be an error 
> > of GEOS 2.2.2 code.
> > 
> > My code is : GEOSGeom aPolygon1,aPolygon2; string aString1("POLYGON
> > ((125.331 0,3.35823e-06 125.331,-125.331 6.71646e-06,-1.00747e-05
> > -125.331,125.331 0))");
> > 
> > string aString2("POLYGON ((245.331 120,120 245.331,-5.331 120,120
> > -5.331,245.331 120))");
> > 
> > aPolygon1 = GEOSGeomFromWKT(aString1.data());
> > aPolygon2 = GEOSGeomFromWKT(aString2.data());
> 
> I'm suer in 99% that the problem is in your code above.
> You should not access internal buffer of std::string with data() member
> function. It should be used in very rare cases because it breaks OOP
> rule of encapsulation! It's available only for C compatibility.
> 
> GEOSGeomFromWKT expects to get const char* :
> Geometry *GEOSGeomFromWKT(const char *wkt);
> 
> so, you should call it as follows:
> 
> aPolygon1 = GEOSGeomFromWKT(aString1.c_str());
> 
> std::string::c_str() returns const char*.
> 
> Cheers
> --
> Mateusz Loskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Tue Jun 27 12:07:15 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] MingW compilation errors and patches
In-Reply-To: <44A04132.8050306@savagexi.com>
References: <449FA735.7080205@savagexi.com> <20060626105018.GB53660@keybit.net>
	<44A04132.8050306@savagexi.com>
Message-ID: <20060627160715.GW61140@keybit.net>

On Mon, Jun 26, 2006 at 02:18:58PM -0600, Charlie Savage wrote:
> >>Any suggestions?
> >
> >Is it a clean checkout ?
> >I guess the above can happen if you change GEOS_INLINES define
> >between different builds (deps problems).
> 
> Just to be sure, I deleted my copy of GEOS, and rechecked out.  Ran 
> ./autogen.sh, then ./configure.  Same issue.  Its actually not just 
> constructors, for example:
> 
> .libs/libgeos.lax/libnoding.a/MCIndexSnapRounder.o: In function 
> `ZN4geos6noding9snapround18MCIndexSnapRounderD1Ev':C:/Development/msys/src/geos/source/noding/snapround/MCIndexSnapRounder.cpp:(.text$_ZNK4geos6noding9snapround18MCIndexSnapRounder18getNodedSubstringsEv[__ZNK4geos6noding9snapround18MCIndexSnapRounder18getNodedSubstringsEv]+0x0): 
> multiple definition of 
> `geos::noding::snapround::MCIndexSnapRounder::getNodedSubstrings() const'
> 
> Haven't touched the GEOS_INLINES define.

mmm... I suppose it will work if you exclude source/inlines.cpp
from the build. Can you confirm ?
Next step would be checking preprocessor output for it.

> >>2.  The finite function

Applied your patch in HCoordinate.cpp

--strk;

From sheng.liang at ericsson.com  Tue Jun 27 21:15:25 2006
From: sheng.liang at ericsson.com (Sheng Liang (SH/CBC))
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <20060627154438.GV61140@keybit.net>
Message-ID: <6D2638F1A4681D49B2798FD89AABD830E3F1B0@ecnshmw511.eapac.ericsson.se>

Hi:
  Yes. I have called initGEOS() before I create those GEOSGeom.
As I said, if I provide some other polygons, there is no fault.
The fault just happened to these two specific polygons.

  Regards 

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
strk@refractions.net
Sent: Tuesday, June 27, 2006 23:45
To: GEOS Development List
Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2

Did you call initGEOS() ?
That's currently *required* (might change in the future)

--strk;

On Mon, Jun 26, 2006 at 12:07:48PM +0800, Sheng Liang (SH/CBC) wrote:
> HI:
>   I have tried aString1.c_str(), but I still get the same error. And I

> even use such code:
>    GEOSGeom aPolygon1,aPolygon2;
>    const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
> 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";
> 
>    const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331 
> 120,120 -5.331,245.331 120))";
> 
>         
>    aPolygon1 = GEOSGeomFromWKT(aString1);
>    aPolygon2 = GEOSGeomFromWKT(aString2);
>         
>    GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);
> 
> And the error is the same.
>   Regards
> 
> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Mateusz 
> Loskot
> Sent: Monday, June 26, 2006 11:49
> To: GEOS Development List
> Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
> 
> Sheng Liang (SH/CBC) wrote:
> > Hi: I encountered an error of "Segmentation Fault" with GEOS 2.2.2.
> > What I am doing is to get intersection of two polygons. The error 
> > happens to the specific polygong: POLYGON ((125.331 0,3.35823e-06
> > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) and 
> > POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 
> > 120))
> 
> > There is no error to others polygons. So I think it must be an error

> > of GEOS 2.2.2 code.
> > 
> > My code is : GEOSGeom aPolygon1,aPolygon2; string aString1("POLYGON
> > ((125.331 0,3.35823e-06 125.331,-125.331 6.71646e-06,-1.00747e-05
> > -125.331,125.331 0))");
> > 
> > string aString2("POLYGON ((245.331 120,120 245.331,-5.331 120,120
> > -5.331,245.331 120))");
> > 
> > aPolygon1 = GEOSGeomFromWKT(aString1.data());
> > aPolygon2 = GEOSGeomFromWKT(aString2.data());
> 
> I'm suer in 99% that the problem is in your code above.
> You should not access internal buffer of std::string with data() 
> member function. It should be used in very rare cases because it 
> breaks OOP rule of encapsulation! It's available only for C
compatibility.
> 
> GEOSGeomFromWKT expects to get const char* :
> Geometry *GEOSGeomFromWKT(const char *wkt);
> 
> so, you should call it as follows:
> 
> aPolygon1 = GEOSGeomFromWKT(aString1.c_str());
> 
> std::string::c_str() returns const char*.
> 
> Cheers
> --
> Mateusz Loskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From strk at refractions.net  Wed Jun 28 07:51:59 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1B0@ecnshmw511.eapac.ericsson.se>
References: <20060627154438.GV61140@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B0@ecnshmw511.eapac.ericsson.se>
Message-ID: <20060628115159.GG82268@keybit.net>

Oh, ok, I now remember to have fixed this in HEAD.
Can you confirm ?

--strk;

On Wed, Jun 28, 2006 at 09:15:25AM +0800, Sheng Liang (SH/CBC) wrote:
> Hi:
>   Yes. I have called initGEOS() before I create those GEOSGeom.
> As I said, if I provide some other polygons, there is no fault.
> The fault just happened to these two specific polygons.
> 
>   Regards 
> 
> -----Original Message-----
> From: geos-devel-bounces@geos.refractions.net
> [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
> strk@refractions.net
> Sent: Tuesday, June 27, 2006 23:45
> To: GEOS Development List
> Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
> 
> Did you call initGEOS() ?
> That's currently *required* (might change in the future)
> 
> --strk;
> 
> On Mon, Jun 26, 2006 at 12:07:48PM +0800, Sheng Liang (SH/CBC) wrote:
> > HI:
> >   I have tried aString1.c_str(), but I still get the same error. And I
> 
> > even use such code:
> >    GEOSGeom aPolygon1,aPolygon2;
> >    const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
> > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";
> > 
> >    const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331 
> > 120,120 -5.331,245.331 120))";
> > 
> >         
> >    aPolygon1 = GEOSGeomFromWKT(aString1);
> >    aPolygon2 = GEOSGeomFromWKT(aString2);
> >         
> >    GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);
> > 
> > And the error is the same.
> >   Regards
> > 
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Mateusz 
> > Loskot
> > Sent: Monday, June 26, 2006 11:49
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
> > 
> > Sheng Liang (SH/CBC) wrote:
> > > Hi: I encountered an error of "Segmentation Fault" with GEOS 2.2.2.
> > > What I am doing is to get intersection of two polygons. The error 
> > > happens to the specific polygong: POLYGON ((125.331 0,3.35823e-06
> > > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) and 
> > > POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 
> > > 120))
> > 
> > > There is no error to others polygons. So I think it must be an error
> 
> > > of GEOS 2.2.2 code.
> > > 
> > > My code is : GEOSGeom aPolygon1,aPolygon2; string aString1("POLYGON
> > > ((125.331 0,3.35823e-06 125.331,-125.331 6.71646e-06,-1.00747e-05
> > > -125.331,125.331 0))");
> > > 
> > > string aString2("POLYGON ((245.331 120,120 245.331,-5.331 120,120
> > > -5.331,245.331 120))");
> > > 
> > > aPolygon1 = GEOSGeomFromWKT(aString1.data());
> > > aPolygon2 = GEOSGeomFromWKT(aString2.data());
> > 
> > I'm suer in 99% that the problem is in your code above.
> > You should not access internal buffer of std::string with data() 
> > member function. It should be used in very rare cases because it 
> > breaks OOP rule of encapsulation! It's available only for C
> compatibility.
> > 
> > GEOSGeomFromWKT expects to get const char* :
> > Geometry *GEOSGeomFromWKT(const char *wkt);
> > 
> > so, you should call it as follows:
> > 
> > aPolygon1 = GEOSGeomFromWKT(aString1.c_str());
> > 
> > std::string::c_str() returns const char*.
> > 
> > Cheers
> > --
> > Mateusz Loskot
> > http://mateusz.loskot.net
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> -- 
> 
>  /"\    ASCII Ribbon Campaign
>  \ /    Respect for low technology.
>   X     Keep e-mail messages readable by any computer system.
>  / \    Keep it ASCII. 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From strk at refractions.net  Wed Jun 28 09:12:35 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <20060628115159.GG82268@keybit.net>
References: <20060627154438.GV61140@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B0@ecnshmw511.eapac.ericsson.se>
	<20060628115159.GG82268@keybit.net>
Message-ID: <20060628131235.GH82268@keybit.net>

Ops, sorry, I fell in the initGEOS missing call myself.
Actually I can *not* reproduce the error against the 2.2 branch.

Here is my testcase, if you confirm it fails please
send a backtrace, or valgrind output.

----------------------------------------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <geos_c.h>


int main()
{
        initGEOS(printf, printf);

   GEOSGeom aPolygon1,aPolygon2;

   const char *aString1 = "POLYGON ((125.331 0,3.35823e-06 125.331,-125.331 6.71
646e-06,-1.00747e-05 -125.331,125.331 0))";

   const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.3
31,245.331 120))";


   aPolygon1 = GEOSGeomFromWKT(aString1);
   aPolygon2 = GEOSGeomFromWKT(aString2);

   GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);

}

----------------------------------------------------------------------

--strk;


On Wed, Jun 28, 2006 at 01:51:59PM +0200, strk@refractions.net wrote:
> Oh, ok, I now remember to have fixed this in HEAD.
> Can you confirm ?
> 
> --strk;
> 
> On Wed, Jun 28, 2006 at 09:15:25AM +0800, Sheng Liang (SH/CBC) wrote:
> > Hi:
> >   Yes. I have called initGEOS() before I create those GEOSGeom.
> > As I said, if I provide some other polygons, there is no fault.
> > The fault just happened to these two specific polygons.
> > 
> >   Regards 
> > 
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
> > strk@refractions.net
> > Sent: Tuesday, June 27, 2006 23:45
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
> > 
> > Did you call initGEOS() ?
> > That's currently *required* (might change in the future)
> > 
> > --strk;
> > 
> > On Mon, Jun 26, 2006 at 12:07:48PM +0800, Sheng Liang (SH/CBC) wrote:
> > > HI:
> > >   I have tried aString1.c_str(), but I still get the same error. And I
> > 
> > > even use such code:
> > >    GEOSGeom aPolygon1,aPolygon2;
> > >    const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
> > > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";
> > > 
> > >    const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331 
> > > 120,120 -5.331,245.331 120))";
> > > 
> > >         
> > >    aPolygon1 = GEOSGeomFromWKT(aString1);
> > >    aPolygon2 = GEOSGeomFromWKT(aString2);
> > >         
> > >    GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);
> > > 
> > > And the error is the same.
> > >   Regards
> > > 
> > > -----Original Message-----
> > > From: geos-devel-bounces@geos.refractions.net
> > > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of Mateusz 
> > > Loskot
> > > Sent: Monday, June 26, 2006 11:49
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
> > > 
> > > Sheng Liang (SH/CBC) wrote:
> > > > Hi: I encountered an error of "Segmentation Fault" with GEOS 2.2.2.
> > > > What I am doing is to get intersection of two polygons. The error 
> > > > happens to the specific polygong: POLYGON ((125.331 0,3.35823e-06
> > > > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) and 
> > > > POLYGON ((245.331 120,120 245.331,-5.331 120,120 -5.331,245.331 
> > > > 120))
> > > 
> > > > There is no error to others polygons. So I think it must be an error
> > 
> > > > of GEOS 2.2.2 code.
> > > > 
> > > > My code is : GEOSGeom aPolygon1,aPolygon2; string aString1("POLYGON
> > > > ((125.331 0,3.35823e-06 125.331,-125.331 6.71646e-06,-1.00747e-05
> > > > -125.331,125.331 0))");
> > > > 
> > > > string aString2("POLYGON ((245.331 120,120 245.331,-5.331 120,120
> > > > -5.331,245.331 120))");
> > > > 
> > > > aPolygon1 = GEOSGeomFromWKT(aString1.data());
> > > > aPolygon2 = GEOSGeomFromWKT(aString2.data());
> > > 
> > > I'm suer in 99% that the problem is in your code above.
> > > You should not access internal buffer of std::string with data() 
> > > member function. It should be used in very rare cases because it 
> > > breaks OOP rule of encapsulation! It's available only for C
> > compatibility.
> > > 
> > > GEOSGeomFromWKT expects to get const char* :
> > > Geometry *GEOSGeomFromWKT(const char *wkt);
> > > 
> > > so, you should call it as follows:
> > > 
> > > aPolygon1 = GEOSGeomFromWKT(aString1.c_str());
> > > 
> > > std::string::c_str() returns const char*.
> > > 
> > > Cheers
> > > --
> > > Mateusz Loskot
> > > http://mateusz.loskot.net
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> > -- 
> > 
> >  /"\    ASCII Ribbon Campaign
> >  \ /    Respect for low technology.
> >   X     Keep e-mail messages readable by any computer system.
> >  / \    Keep it ASCII. 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> -- 
> 
>  /"\    ASCII Ribbon Campaign
>  \ /    Respect for low technology.
>   X     Keep e-mail messages readable by any computer system.
>  / \    Keep it ASCII. 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 


From sheng.liang at ericsson.com  Thu Jun 29 02:23:45 2006
From: sheng.liang at ericsson.com (Sheng Liang (SH/CBC))
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <20060628131235.GH82268@keybit.net>
Message-ID: <6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>

  Thank you.

  I compared your code with mine. It is my fault. I didn't
Pass a valid notice_function and an error_function when I call 
initGEOS().
  Now there is no segmenation fault. But an error still happen.
The error message is :
TopologyException: no outgoing dirEdge found (125.331,0)

  I can't dig into the source code of GEOS, for I don't know much about
it.
Did you encounter this error?

  Regards

-----Original Message-----
From: geos-devel-bounces@geos.refractions.net
[mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of
strk@refractions.net
Sent: Wednesday, June 28, 2006 21:13
To: GEOS Development List
Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2

Ops, sorry, I fell in the initGEOS missing call myself.
Actually I can *not* reproduce the error against the 2.2 branch.

Here is my testcase, if you confirm it fails please send a backtrace, or
valgrind output.

----------------------------------------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <geos_c.h>


int main()
{
        initGEOS(printf, printf);

   GEOSGeom aPolygon1,aPolygon2;

   const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
125.331,-125.331 6.71
646e-06,-1.00747e-05 -125.331,125.331 0))";

   const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331
120,120 -5.3
31,245.331 120))";


   aPolygon1 = GEOSGeomFromWKT(aString1);
   aPolygon2 = GEOSGeomFromWKT(aString2);

   GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);

}

----------------------------------------------------------------------

--strk;


On Wed, Jun 28, 2006 at 01:51:59PM +0200, strk@refractions.net wrote:
> Oh, ok, I now remember to have fixed this in HEAD.
> Can you confirm ?
> 
> --strk;
> 
> On Wed, Jun 28, 2006 at 09:15:25AM +0800, Sheng Liang (SH/CBC) wrote:
> > Hi:
> >   Yes. I have called initGEOS() before I create those GEOSGeom.
> > As I said, if I provide some other polygons, there is no fault.
> > The fault just happened to these two specific polygons.
> > 
> >   Regards
> > 
> > -----Original Message-----
> > From: geos-devel-bounces@geos.refractions.net
> > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> > strk@refractions.net
> > Sent: Tuesday, June 27, 2006 23:45
> > To: GEOS Development List
> > Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 
> > 2.2.2
> > 
> > Did you call initGEOS() ?
> > That's currently *required* (might change in the future)
> > 
> > --strk;
> > 
> > On Mon, Jun 26, 2006 at 12:07:48PM +0800, Sheng Liang (SH/CBC)
wrote:
> > > HI:
> > >   I have tried aString1.c_str(), but I still get the same error. 
> > > And I
> > 
> > > even use such code:
> > >    GEOSGeom aPolygon1,aPolygon2;
> > >    const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
> > > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";
> > > 
> > >    const char *aString2 = "POLYGON ((245.331 120,120 
> > > 245.331,-5.331 120,120 -5.331,245.331 120))";
> > > 
> > >         
> > >    aPolygon1 = GEOSGeomFromWKT(aString1);
> > >    aPolygon2 = GEOSGeomFromWKT(aString2);
> > >         
> > >    GEOSGeom anIntersection = 
> > > GEOSIntersection(aPolygon1,aPolygon2);
> > > 
> > > And the error is the same.
> > >   Regards
> > > 
> > > -----Original Message-----
> > > From: geos-devel-bounces@geos.refractions.net
> > > [mailto:geos-devel-bounces@geos.refractions.net] On Behalf Of 
> > > Mateusz Loskot
> > > Sent: Monday, June 26, 2006 11:49
> > > To: GEOS Development List
> > > Subject: Re: [geos-devel] Encounter Segmentation Fault with GEOS 
> > > 2.2.2
> > > 
> > > Sheng Liang (SH/CBC) wrote:
> > > > Hi: I encountered an error of "Segmentation Fault" with GEOS
2.2.2.
> > > > What I am doing is to get intersection of two polygons. The 
> > > > error happens to the specific polygong: POLYGON ((125.331 
> > > > 0,3.35823e-06
> > > > 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0)) 
> > > > and POLYGON ((245.331 120,120 245.331,-5.331 120,120 
> > > > -5.331,245.331
> > > > 120))
> > > 
> > > > There is no error to others polygons. So I think it must be an 
> > > > error
> > 
> > > > of GEOS 2.2.2 code.
> > > > 
> > > > My code is : GEOSGeom aPolygon1,aPolygon2; string 
> > > > aString1("POLYGON
> > > > ((125.331 0,3.35823e-06 125.331,-125.331 
> > > > 6.71646e-06,-1.00747e-05
> > > > -125.331,125.331 0))");
> > > > 
> > > > string aString2("POLYGON ((245.331 120,120 245.331,-5.331 
> > > > 120,120
> > > > -5.331,245.331 120))");
> > > > 
> > > > aPolygon1 = GEOSGeomFromWKT(aString1.data());
> > > > aPolygon2 = GEOSGeomFromWKT(aString2.data());
> > > 
> > > I'm suer in 99% that the problem is in your code above.
> > > You should not access internal buffer of std::string with data() 
> > > member function. It should be used in very rare cases because it 
> > > breaks OOP rule of encapsulation! It's available only for C
> > compatibility.
> > > 
> > > GEOSGeomFromWKT expects to get const char* :
> > > Geometry *GEOSGeomFromWKT(const char *wkt);
> > > 
> > > so, you should call it as follows:
> > > 
> > > aPolygon1 = GEOSGeomFromWKT(aString1.c_str());
> > > 
> > > std::string::c_str() returns const char*.
> > > 
> > > Cheers
> > > --
> > > Mateusz Loskot
> > > http://mateusz.loskot.net
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > > _______________________________________________
> > > geos-devel mailing list
> > > geos-devel@geos.refractions.net
> > > http://geos.refractions.net/mailman/listinfo/geos-devel
> > 
> > --
> > 
> >  /"\    ASCII Ribbon Campaign
> >  \ /    Respect for low technology.
> >   X     Keep e-mail messages readable by any computer system.
> >  / \    Keep it ASCII. 
> > 
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel@geos.refractions.net
> > http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> --
> 
>  /"\    ASCII Ribbon Campaign
>  \ /    Respect for low technology.
>   X     Keep e-mail messages readable by any computer system.
>  / \    Keep it ASCII. 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

-- 

 /"\    ASCII Ribbon Campaign
 \ /    Respect for low technology.
  X     Keep e-mail messages readable by any computer system.
 / \    Keep it ASCII. 

_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

From mateusz at loskot.net  Fri Jun 30 05:21:51 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1AA@ecnshmw511.eapac.ericsson.se>
References: <6D2638F1A4681D49B2798FD89AABD830E3F1AA@ecnshmw511.eapac.ericsson.se>
Message-ID: <44A4ED2F.1010106@loskot.net>

Sheng Liang (SH/CBC) wrote:
> HI:
>   I have tried aString1.c_str(), but I still get the same
> error. And I even use such code:
>    GEOSGeom aPolygon1,aPolygon2;
>    const char *aString1 = "POLYGON ((125.331 0,3.35823e-06
> 125.331,-125.331 6.71646e-06,-1.00747e-05 -125.331,125.331 0))";
> 
>    const char *aString2 = "POLYGON ((245.331 120,120 245.331,-5.331
> 120,120 -5.331,245.331 120))";
> 
>         
>    aPolygon1 = GEOSGeomFromWKT(aString1);
>    aPolygon2 = GEOSGeomFromWKT(aString2);
>         
>    GEOSGeom anIntersection = GEOSIntersection(aPolygon1,aPolygon2);  
> 
> And the error is the same.

I see, so  I am not a C API user, so may be I'm missing something.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From hobu at iastate.edu  Fri Jun 30 10:31:31 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.er
	icsson.se>
References: <20060628131235.GH82268@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
Message-ID: <6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>

Recently, Steve Lime reconfigured MapServer to use the GEOS C API 
instead of the C++ one.  Python Cartographic Library, which builds on 
MapServer and GEOS, among other things, *also* uses the GEOS C 
API.  Each subsystem doesn't know when the other is calling 
initGEOS/finishGEOS, and on teardown, this is causing a segfault 
because the geomFactory has already been destroyed.

After some discussion on #gdal with Frank, Norman, and Mateusz, we 
suggest that initGEOS/finishGEOS do some reference counting to ensure 
that geomFactory isn't prematurely destroyed.

Does this seem reasonable?

Howard


From mateusz at loskot.net  Fri Jun 30 05:28:26 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Geos - multithreading and error handling
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1AC@ecnshmw511.eapac.ericsson.se>
References: <6D2638F1A4681D49B2798FD89AABD830E3F1AC@ecnshmw511.eapac.ericsson.se>
Message-ID: <44A4EEBA.7030401@loskot.net>

Sheng Liang (SH/CBC) wrote:
> Hi: Why did you say that geos is not safe for multi-threading? Do you
>  have any experience to support your point? Or the multi-thread safe 
> is not a goal of geos development? I am interested in this point 
> also.

I'm saying that from my experience in working with GEOS code, C++ API only.
I don't see any multi-threading/thread-safety techniques provided in
GEOS code.
There is no mutual exclusion, no indirection in raw pointer usage,
no guarantee of atomic operations in access to global/static data,
no usage of thread synchronization techniques, etc.

This tells me there is no thread-safety in GEOS.
Certainly, I may be wrong and there may be something I've not learned,
so I'm interested in deeper discussion too.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Fri Jun 30 05:20:39 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Some C API Issues
In-Reply-To: <20060627153455.GT61140@keybit.net>
References: <449E0F2F.1010007@savagexi.com> <20060627153455.GT61140@keybit.net>
Message-ID: <44A4ECE7.4060608@loskot.net>

strk@refractions.net wrote:
> 
> We should really provide unit tests for the C api at this stage.

I don't use C API, so I can't help here.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Fri Jun 30 05:23:26 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <20060627144002.GR61140@keybit.net>
References: <449F1E38.1060306@savagexi.com>
	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>
	<449FB832.7000106@loskot.net>	<44A02682.8030803@savagexi.com>
	<44A029C1.3050009@loskot.net>	<20060626184149.GJ61140@keybit.net>
	<44A0D354.3020907@loskot.net> <20060627144002.GR61140@keybit.net>
Message-ID: <44A4ED8E.3020207@loskot.net>

strk@refractions.net wrote:
> On Tue, Jun 27, 2006 at 08:42:28AM +0200, Mateusz Loskot wrote:
>> strk@refractions.net wrote:
>>> On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
>>>> Charlie Savage wrote:
>>>>> Anyway, as we discussed yesterday, I'm happy with "safe" versions
>>>>> of these methods. Strk, what do you think?
>>>> Yeah, strk what do you think?
>>>>
>>>> This would start implementing my secret plan to follow STL
>>>> interface design, heh :-)))
>>> It's completely fine with me following STL interface design, as long
>>> as it's Mateusz doing it :D
>> Hmm, are you sure you want me to do it?
>> It could break current design and JTS compatibility - same classes layout.
> 
> No no! Was just talking about exception-throwing duplicates of elements
> access functions. No much fun.


OK, do you want me to do it, to add those checked calls?


Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Thu Jun 29 07:46:36 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Encounter Segmentation Fault with GEOS 2.2.2
In-Reply-To: <6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
References: <20060628131235.GH82268@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
Message-ID: <20060629114636.GA11169@keybit.net>

On Thu, Jun 29, 2006 at 02:23:45PM +0800, Sheng Liang (SH/CBC) wrote:
>   Thank you.
> 
>   I compared your code with mine. It is my fault. I didn't
> Pass a valid notice_function and an error_function when I call 
> initGEOS().

I get warnings passing printf as well, but signature really matches...

>   Now there is no segmenation fault. But an error still happen.
> The error message is :
> TopologyException: no outgoing dirEdge found (125.331,0)
> 
>   I can't dig into the source code of GEOS, for I don't know much about
> it.
> Did you encounter this error?

That's a robustness problem. With the CVS version of GEOS
(which should be pluggable w/out code rebuild) the exception
would be handled. Give it a try.

--strk;

From hobu at iastate.edu  Fri Jun 30 16:01:52 2006
From: hobu at iastate.edu (Howard Butler)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
Message-ID: <6.2.3.4.2.20060630150151.02ec0c18@hobu.mail.iastate.edu>

Recently, Steve Lime reconfigured MapServer to use the GEOS C API 
instead of the C++ one.  Python Cartographic Library, which builds on 
MapServer and GEOS, among other things, *also* uses the GEOS C 
API.  Each subsystem doesn't know when the other is calling 
initGEOS/finishGEOS, and on teardown, this is causing a segfault 
because the geomFactory has already been destroyed.

After some discussion on #gdal with Frank, Norman, and Mateusz, we 
suggest that initGEOS/finishGEOS do some reference counting to ensure 
that geomFactory isn't prematurely destroyed.

Does this seem reasonable?

Howard


From strk at refractions.net  Fri Jun 30 16:09:05 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
References: <20060628131235.GH82268@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
Message-ID: <20060630200905.GY11169@keybit.net>

With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete
a GeometryFactory anymore. Rather the default GeometryFactory
is used. This should fix the problem.

--strk;

On Fri, Jun 30, 2006 at 09:31:31AM -0500, Howard Butler wrote:
> Recently, Steve Lime reconfigured MapServer to use the GEOS C API 
> instead of the C++ one.  Python Cartographic Library, which builds on 
> MapServer and GEOS, among other things, *also* uses the GEOS C 
> API.  Each subsystem doesn't know when the other is calling 
> initGEOS/finishGEOS, and on teardown, this is causing a segfault 
> because the geomFactory has already been destroyed.
> 
> After some discussion on #gdal with Frank, Norman, and Mateusz, we 
> suggest that initGEOS/finishGEOS do some reference counting to ensure 
> that geomFactory isn't prematurely destroyed.
> 
> Does this seem reasonable?

From mateusz at loskot.net  Fri Jun 30 16:20:19 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
References: <20060628131235.GH82268@keybit.net>	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
Message-ID: <44A58783.4030005@loskot.net>

Howard Butler wrote:
> Recently, Steve Lime reconfigured MapServer to use the GEOS C API
> instead of the C++ one.  Python Cartographic Library, which builds on
> MapServer and GEOS, among other things, *also* uses the GEOS C API. 
> Each subsystem doesn't know when the other is calling
> initGEOS/finishGEOS, and on teardown, this is causing a segfault because
> the geomFactory has already been destroyed.
> 
> After some discussion on #gdal with Frank, Norman, and Mateusz, we
> suggest that initGEOS/finishGEOS do some reference counting to ensure
> that geomFactory isn't prematurely destroyed.

As I promised on the #gdal-dev, I can re-write it that way.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Fri Jun 30 16:30:21 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <20060630200905.GY11169@keybit.net>
References: <20060628131235.GH82268@keybit.net>	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
	<20060630200905.GY11169@keybit.net>
Message-ID: <44A589DD.4010500@loskot.net>

strk@refractions.net wrote:
> With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete
> a GeometryFactory anymore. Rather the default GeometryFactory
> is used. This should fix the problem.

What about backport to 2.2.x with ref-counted proposal?
Such changes could would not affect existing code.

I'd like to repeat that in general, global factory should be replaced
with shared object (e.g. managed by shared_ptr from Boost or our own
home-made shared smart pointer).
static factory can cause problems too:
http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Fri Jun 30 16:37:59 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <44A589DD.4010500@loskot.net>
References: <20060628131235.GH82268@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
	<20060630200905.GY11169@keybit.net> <44A589DD.4010500@loskot.net>
Message-ID: <20060630203759.GZ11169@keybit.net>

On Fri, Jun 30, 2006 at 10:30:21PM +0200, Mateusz Loskot wrote:
> strk@refractions.net wrote:
> > With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete
> > a GeometryFactory anymore. Rather the default GeometryFactory
> > is used. This should fix the problem.
> 
> What about backport to 2.2.x with ref-counted proposal?
> Such changes could would not affect existing code.

Ok with me.

> I'd like to repeat that in general, global factory should be replaced
> with shared object (e.g. managed by shared_ptr from Boost or our own
> home-made shared smart pointer).
> static factory can cause problems too:
> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12

We're using "construct on first use" idiom if I'm not wrong
(see faq 10.13). 

--strk;


From warmerdam at pobox.com  Fri Jun 30 17:05:02 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <44A589DD.4010500@loskot.net>
References: <20060628131235.GH82268@keybit.net>	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>	<20060630200905.GY11169@keybit.net>
	<44A589DD.4010500@loskot.net>
Message-ID: <44A591FE.8030701@pobox.com>

Mateusz Loskot wrote:
> strk@refractions.net wrote:
>> With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete
>> a GeometryFactory anymore. Rather the default GeometryFactory
>> is used. This should fix the problem.
> 
> What about backport to 2.2.x with ref-counted proposal?
> Such changes could would not affect existing code.
> 
> I'd like to repeat that in general, global factory should be replaced
> with shared object (e.g. managed by shared_ptr from Boost or our own
> home-made shared smart pointer).
> static factory can cause problems too:
> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12

Mateusz,

I personally hate static objects of any complexity because I don't
like a lot of randomly ordered stuff happening before main() even
starts.  I would much prefer the referenced counted implementation in
2.2.x and in head.  I'm not sure how smart pointers would help since
the functions don't return a handle for the caller to hold.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGF, http://osgeo.org


From mateusz at loskot.net  Fri Jun 30 17:17:20 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <20060630203759.GZ11169@keybit.net>
References: <20060628131235.GH82268@keybit.net>	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>	<20060630200905.GY11169@keybit.net>
	<44A589DD.4010500@loskot.net> <20060630203759.GZ11169@keybit.net>
Message-ID: <44A594E0.50506@loskot.net>

strk@refractions.net wrote:
> On Fri, Jun 30, 2006 at 10:30:21PM +0200, Mateusz Loskot wrote:
>> strk@refractions.net wrote:
>>> With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete a 
>>> GeometryFactory anymore. Rather the default GeometryFactory is 
>>> used. This should fix the problem.
>> What about backport to 2.2.x with ref-counted proposal? Such 
>> changes could would not affect existing code.
> 
> Ok with me.
> 
>> I'd like to repeat that in general, global factory should be 
>> replaced with shared object (e.g. managed by shared_ptr from Boost 
>> or our own home-made shared smart pointer). static factory can 
>> cause problems too: 
>> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12
> 
> We're using "construct on first use" idiom if I'm not wrong (see faq 
> 10.13).

Yes, we are.
But we still need to be careful:
http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mateusz at loskot.net  Fri Jun 30 17:21:52 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <44A591FE.8030701@pobox.com>
References: <20060628131235.GH82268@keybit.net>	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>	<20060630200905.GY11169@keybit.net>	<44A589DD.4010500@loskot.net>
	<44A591FE.8030701@pobox.com>
Message-ID: <44A595F0.9070002@loskot.net>

Frank Warmerdam wrote:
> Mateusz Loskot wrote:
>> strk@refractions.net wrote:
>>> With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete a
>>> GeometryFactory anymore. Rather the default GeometryFactory is
>>> used. This should fix the problem.
>> 
>> What about backport to 2.2.x with ref-counted proposal? Such
>> changes could would not affect existing code.
>> 
>> I'd like to repeat that in general, global factory should be
>> replaced with shared object (e.g. managed by shared_ptr from Boost
>> or our own home-made shared smart pointer). static factory can
>> cause problems too: 
>> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12
> 
> Mateusz,
> 
> I personally hate static objects of any complexity because I don't 
> like a lot of randomly ordered stuff happening before main() even 
> starts.

Frank,

yes, that's the problem.

> I would much prefer the referenced counted implementation in 2.2.x
> and in head.  I'm not sure how smart pointers would help since the
> functions don't return a handle for the caller to hold.

Yes, you mean initGEOS does not return any pointer/handle.
but I had in mind global static factory, recently replaced with lazy
initialized one:

const GeometryFactory*
GeometryFactory::getDefaultInstance()
{
	static GeometryFactory defInstance;
	return &defInstance;
}



BTW, boost::smart_ptr is implemented as ref-counted:
http://www.boost.org/libs/smart_ptr/shared_ptr.htm

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Fri Jun 30 17:23:10 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <44A4ED8E.3020207@loskot.net>
References: <449F1E38.1060306@savagexi.com> <449F5801.3080009@loskot.net>
	<449F5B18.3070706@savagexi.com> <449FB832.7000106@loskot.net>
	<44A02682.8030803@savagexi.com> <44A029C1.3050009@loskot.net>
	<20060626184149.GJ61140@keybit.net> <44A0D354.3020907@loskot.net>
	<20060627144002.GR61140@keybit.net> <44A4ED8E.3020207@loskot.net>
Message-ID: <20060630212310.GA11169@keybit.net>

On Fri, Jun 30, 2006 at 11:23:26AM +0200, Mateusz Loskot wrote:
> strk@refractions.net wrote:
> > On Tue, Jun 27, 2006 at 08:42:28AM +0200, Mateusz Loskot wrote:
> >> strk@refractions.net wrote:
> >>> On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
> >>>> Charlie Savage wrote:
> >>>>> Anyway, as we discussed yesterday, I'm happy with "safe" versions
> >>>>> of these methods. Strk, what do you think?
> >>>> Yeah, strk what do you think?
> >>>>
> >>>> This would start implementing my secret plan to follow STL
> >>>> interface design, heh :-)))
> >>> It's completely fine with me following STL interface design, as long
> >>> as it's Mateusz doing it :D
> >> Hmm, are you sure you want me to do it?
> >> It could break current design and JTS compatibility - same classes layout.
> > 
> > No no! Was just talking about exception-throwing duplicates of elements
> > access functions. No much fun.
> 
> 
> OK, do you want me to do it, to add those checked calls?

If you think anyone would be using them, feel free to
add the new methods. I wouldn't change any existing call
though.

--strk;

From mateusz at loskot.net  Fri Jun 30 17:24:18 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] Assertions in CoordinateArraySequence
In-Reply-To: <20060630212310.GA11169@keybit.net>
References: <449F1E38.1060306@savagexi.com>
	<449F5801.3080009@loskot.net>	<449F5B18.3070706@savagexi.com>
	<449FB832.7000106@loskot.net>	<44A02682.8030803@savagexi.com>
	<44A029C1.3050009@loskot.net>	<20060626184149.GJ61140@keybit.net>
	<44A0D354.3020907@loskot.net>	<20060627144002.GR61140@keybit.net>
	<44A4ED8E.3020207@loskot.net> <20060630212310.GA11169@keybit.net>
Message-ID: <44A59682.1050004@loskot.net>

strk@refractions.net wrote:
> On Fri, Jun 30, 2006 at 11:23:26AM +0200, Mateusz Loskot wrote:
>> strk@refractions.net wrote:
>>> On Tue, Jun 27, 2006 at 08:42:28AM +0200, Mateusz Loskot wrote:
>>>> strk@refractions.net wrote:
>>>>> On Mon, Jun 26, 2006 at 08:38:57PM +0200, Mateusz Loskot wrote:
>>>>>> Charlie Savage wrote:
>>>>>>> Anyway, as we discussed yesterday, I'm happy with "safe" versions
>>>>>>> of these methods. Strk, what do you think?
>>>>>> Yeah, strk what do you think?
>>>>>>
>>>>>> This would start implementing my secret plan to follow STL
>>>>>> interface design, heh :-)))
>>>>> It's completely fine with me following STL interface design, as long
>>>>> as it's Mateusz doing it :D
>>>> Hmm, are you sure you want me to do it?
>>>> It could break current design and JTS compatibility - same classes layout.
>>> No no! Was just talking about exception-throwing duplicates of elements
>>> access functions. No much fun.
>>
>> OK, do you want me to do it, to add those checked calls?
> 
> If you think anyone would be using them, feel free to
> add the new methods. I wouldn't change any existing call
> though.


OK

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From strk at refractions.net  Fri Jun 30 17:24:42 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <44A594E0.50506@loskot.net>
References: <20060628131235.GH82268@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
	<20060630200905.GY11169@keybit.net> <44A589DD.4010500@loskot.net>
	<20060630203759.GZ11169@keybit.net> <44A594E0.50506@loskot.net>
Message-ID: <20060630212441.GB11169@keybit.net>

On Fri, Jun 30, 2006 at 11:17:20PM +0200, Mateusz Loskot wrote:
> strk@refractions.net wrote:
> > On Fri, Jun 30, 2006 at 10:30:21PM +0200, Mateusz Loskot wrote:
> >> strk@refractions.net wrote:
> >>> With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete a 
> >>> GeometryFactory anymore. Rather the default GeometryFactory is 
> >>> used. This should fix the problem.
> >> What about backport to 2.2.x with ref-counted proposal? Such 
> >> changes could would not affect existing code.
> > 
> > Ok with me.
> > 
> >> I'd like to repeat that in general, global factory should be 
> >> replaced with shared object (e.g. managed by shared_ptr from Boost 
> >> or our own home-made shared smart pointer). static factory can 
> >> cause problems too: 
> >> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12
> > 
> > We're using "construct on first use" idiom if I'm not wrong (see faq 
> > 10.13).
> 
> Yes, we are.
> But we still need to be careful:
> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14

I was waiting for this answer :)
I don't think anyone's destructor is relying on GeometryFactory use.

--strk;

From strk at refractions.net  Fri Jun 30 17:26:35 2006
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <44A591FE.8030701@pobox.com>
References: <20060628131235.GH82268@keybit.net>
	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>
	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>
	<20060630200905.GY11169@keybit.net>
	<44A589DD.4010500@loskot.net> <44A591FE.8030701@pobox.com>
Message-ID: <20060630212635.GC11169@keybit.net>

On Fri, Jun 30, 2006 at 05:05:02PM -0400, Frank Warmerdam wrote:
> Mateusz Loskot wrote:
> >strk@refractions.net wrote:
> >>With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete
> >>a GeometryFactory anymore. Rather the default GeometryFactory
> >>is used. This should fix the problem.
> >
> >What about backport to 2.2.x with ref-counted proposal?
> >Such changes could would not affect existing code.
> >
> >I'd like to repeat that in general, global factory should be replaced
> >with shared object (e.g. managed by shared_ptr from Boost or our own
> >home-made shared smart pointer).
> >static factory can cause problems too:
> >http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12
> 
> Mateusz,
> 
> I personally hate static objects of any complexity because I don't
> like a lot of randomly ordered stuff happening before main() even
> starts.  I would much prefer the referenced counted implementation in
> 2.2.x and in head.  I'm not sure how smart pointers would help since
> the functions don't return a handle for the caller to hold.

If we had to add ref-counting I'd like to do it in a widely usable
manner. Something like boost's shared_ptr<> but w/out the external
requirement. Beside GeometryFactories there might be much more uses
for it.

--strk;

From mateusz at loskot.net  Fri Jun 30 17:28:39 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] initGEOS/finishGEOS and multiple subsystems
In-Reply-To: <20060630212441.GB11169@keybit.net>
References: <20060628131235.GH82268@keybit.net>	<6D2638F1A4681D49B2798FD89AABD830E3F1B5@ecnshmw511.eapac.ericsson.se>	<6.2.3.4.2.20060630092228.03088008@hobu.mail.iastate.edu>	<20060630200905.GY11169@keybit.net>
	<44A589DD.4010500@loskot.net>	<20060630203759.GZ11169@keybit.net>
	<44A594E0.50506@loskot.net> <20060630212441.GB11169@keybit.net>
Message-ID: <44A59787.4070202@loskot.net>

strk@refractions.net wrote:
> On Fri, Jun 30, 2006 at 11:17:20PM +0200, Mateusz Loskot wrote:
>> strk@refractions.net wrote:
>>> On Fri, Jun 30, 2006 at 10:30:21PM +0200, Mateusz Loskot wrote:
>>>> strk@refractions.net wrote:
>>>>> With GEOS-3.0.0 initGEOS/finishGEOS do not instantiate/delete a 
>>>>> GeometryFactory anymore. Rather the default GeometryFactory is 
>>>>> used. This should fix the problem.
>>>> What about backport to 2.2.x with ref-counted proposal? Such 
>>>> changes could would not affect existing code.
>>> Ok with me.
>>>
>>>> I'd like to repeat that in general, global factory should be 
>>>> replaced with shared object (e.g. managed by shared_ptr from Boost 
>>>> or our own home-made shared smart pointer). static factory can 
>>>> cause problems too: 
>>>> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12
>>> We're using "construct on first use" idiom if I'm not wrong (see faq 
>>> 10.13).
>> Yes, we are.
>> But we still need to be careful:
>> http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14
> 
> I was waiting for this answer :)
> I don't think anyone's destructor is relying on GeometryFactory use.

Heh, you know, just in case... Evil is Watching ;-)

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From proclus at gnu-darwin.org  Fri Jun 30 21:23:15 2006
From: proclus at gnu-darwin.org (proclus@gnu-darwin.org)
Date: Fri Nov  2 20:53:23 2007
Subject: [geos-devel] FOSS, Science, and Public activism
Message-ID: <20060701012315.873946B0FDB@gnu-darwin.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

(Sorry if you get more than one copy of this message, but I felt
that it was urgent to get this important info out.)

The values of freedom and openness are crucial to understanding 
itself, so that civilization and public welfare now depend on 
them, as I argue below.  These values may find their best 
expression in the free and open source software (FOSS) movement, 
and the foresightful example of FOSS developers should now be
beneficially applied to many other disciplines in the context of a
global and public Internet.

It is crucial that we occasionally take time to discuss the
reasons _why_ we release our source code, and this is one of 
those occasions.  There are good reasons for the freedom and
openness which are characteristics of FOSS development, reasons
which should receive wider attention now that they can be readily
communicated to other arenas.  The consequences of doing otherwise
are often catastrophic.

For example, it incomprehensible that Genentech could consider
withdrawing a cheap cure for blindness (ARMD) from the market.

http://lists.essential.org/pipermail/random-bits/2006-june/001374.html

The mechanism of this drug is public knowledge.

http://sourceforge.net/mailarchive/forum.php?thread_id=14183567&forum_id=6042

This abhorrent situation is a great example of the kind of thing
that will happen if people don't get behind the values of freedom
and openness that we are espousing.  Please let Genentech know
that you find what they are doing offensive.  Publicize the mechanism
so that new compounds can be obtained as replacements.  For the 
future, continued vociferous public activism is required to prevent
such outrages from occurring in the future.

It becomes clear that the compounds which come from common roots,
fruits, and vegetables are a shared human heritage and the free and
open source of the future.  Tannins are another interesting case in
point, because as molecules, and as anti-oxidents, they are similar to
resveratrol (resV), and that molecular mechanism has been anchored to
the public domain via a prior art declaration.  It is a so-called
CR-memetic, which may increase healthy human longevity by many
decades.  Here are some links about it.

Resveratrol mechanism posts from GNU-Darwin list
http://proclus.gnu-darwin.org/gdposts.html

CR protocol for human bodies
http://proclus.gnu-darwin.org/bootstrap.html

Here is some important recent news about it.

http://www.imminst.org/forum/index.php?s=&act=print&client=printer&f=237&t=10749

It is exciting to suppose that people can get off the pharmaceuticals
that they are taking with calorie restriction or CR-memetics.  I
personally am trying to get off the cholesterol drug Pravachol, a
statin compound, starting a few of weeks ago.  Write me, and I'll let
you know how it turns out.  From the article...

"Fontana says ...  evidence of "younger" hearts in people on calorie
restriction, suggest that humans on CR have the same adaptive
responses as did animals whose rates of aging were slowed by CR."

I think that it is time to look at the tannins in tobacco leaves.  
There may be other treasures lurking there too.  As you may be
aware there is ample public research into any possible beneficial
compounds that may be obtained from tobacco leaves.  The mechanisms
are there waiting to be discovered.  If you want to post them, just
reply to me and I'd be delighted to host them.

The public establishment of prior art is a time-honed method of
entering inventions into the public domain.  We now have other
methods at our disposal as well.   If you are planning to establish
prior art against future CR-memetic related patents, you might want
to have a look at www.creativecommons.org.  Perhaps it goes without
saying at this point that you should please choose a license that
provides for free and broad public access to your memetic.

In that way you will assure that the public health is served by 
anchoring them to the public common, where they cannot be exploited
by those who would withhold them for their own profit.  The DRM 
situation is precisely analogous to this.  Can you imagine doing
science in a world where your ability to read and write your data is
filtered through secret protocols that are hidden from you? I
recommend the Defective By Design campaign to fight the outrage of
DRM, which is incompatible with the scientific pursuit.

http://www.defectivebydesign.org/

It is clear that scientific tools must be demonstrably and
penetratingly understood, or else our claims will likely be skewed
and called into question.  Free and open source software is
a great example of how to make your science verifiable to the
public.  Establishing prior art against future patents is 
another good one, which is precisely analogous in method, 
making the result explicit to the public, free and open to all.
Thank goodness for the free and open software movement, which
gave us such a great example of how to serve the public in this
manner.

I am willing to grant that there are particular exceptions to
these rules of freedom and openness, and such exceptions may be
relatively harmless; however, let us posit the opposite, that
freedom and openness are _not_ crucial to understanding.  Think of
the implications.  When people are compelled to learn, they do not
receive the intended message.  It is not understood correctly
or completely.   When crucial facts are withheld from the people
you are trying to teach they become paranoid, possibly unteachable. 
Freedom and openness are obviously the best approach to understanding.

This is not a metaphor for the pursuit of science, but a fact. 
We are learning from nature, and it is ultimately required that
our tools be demonstrably and penetratingly understood, or else
we will receive incorrect lessons from nature.  Clearly this
requires public access to the source code and more.  This 
is why many of us are pressing for public access to scientific
publications.

Moreover FOSS tools are becoming ever more important to the
pursuit of the scientific endeavor itself.  In our biophysics
department we are obsolescing proprietary hardware and software
in favor of open standards and free software, which is a
widespread phenomenon in the science sector, and sure to continue.
We build most of the workstations ourselves with commodity hardware,
but we also have some clusters running Debian and FedoraCore.

Some of you will know that I am the lead developer for the
GNU-Darwin distribution.  GNU-Darwin has a FOSS operating system,
which is getting alot of press these days.  Here is an example

How Apple and Microsoft are advancing desktop Linux
http://www.desktopLinux.com/news/ns7294331817.html

I see the article as counter-productive against building a FOSS
coalition that includes democracy, freedom, and public access 
activists, Apple, GNU-Darwin, GNU, and GNU/Linux all linked
together in spectrum.

It is important to alert the whole FOSS community that Darwin
cannot be classified as a free or open source operation system
as of the Darwin-8 revision, because AppleACPIplatform-39 which
is required to boot the system is proprietary.  It is notable that
only the current version of Darwin from Apple is a non-free OS.
GNU-Darwin has a free version, an earlier revision that includes
the source code.  It is FOSS, and we call upon Apple to maintain
Darwin as such, as it has been in the past.  We hope that the
current situation with the kernel and ACPI driver will soon be
remedied so that Darwin will continue as a FOSS OS.

We are asking for free software developers to please write to the
*nix core of Darwin, which is the core OS for both Mac OS X and
GNU-Darwin OS.  Darwin OS, which underlies both systems, comprises
parts from GNU, the BSD's, mach, plus Apple's substantial
contributions to the free software community.  Be consistent with your
philosophy and avoid linkage to proprietary binaries, such as OpenGL
and CoreAudio, except when it is imperatively required in order to
lead users to the values of software freedom.  Under that principle,
another reason to maintain compatibility with the *nix core, is so
that your code will be readily portable to new platforms and usable
by free-software-only aficionados too.  

GNU-Darwin OS is not an obsolete implementation of Darwin OS, or to be
superseded by Mac OS X.  We are trying to lead users to freedom, not
away from it.  By maintaining Darwin core compatibility your code will
remain valuable as the marketplace and industry continues to evolve
(trust me here), particularly as DRM-related problems continue to come
forward. Of course, that means releasing your source code under a FOSS
license, such as APSL.  Darwin OS is a free and open source operating
system that is not going away, so try to focus your coding towards
supporting that standard instead of proprietary software.

Here is the essence of the current problem with Darwin OS.  Apple
replaced working boot code with the following proprietary drivers, 
which are required for the system to boot.

Darwin-7:
AppleAPIC.kext/
Applei386genericplatform.kext/

Darwin-8:
AppleACPIplatform

In addition the kernel (xnu) has been taken proprietary in the
recent revisions.  We are not asking for Apple to give away such
things, but rather to continue maintaining Darwin OS as FOSS, which
it already was. 

After repeated attempts by many FOSS developers to get this
situation remedied, nothing has happened.  It is now time for us to
better use the measures at our disposal in order to assure that
Darwin OS remains free and open.  If you are unhappy that xnu and 
the boot drivers have not been released, I would encourage you to
spread your dissatisfaction to other forums, so that Apple will take
notice and commit to a workable free and open Darwin OS from now on.  

Moving on to coalition strategy now, some of you may not know that
GNU/Linux system administration is one of my day jobs.  I manage a
wide range of systems.  Here is a screen-shot of my work desktop, so
that you can see I use the same tools at work that I use at home at
night on GNU-Darwin.  (weekends too, so please read I am your friend)

http://proclus.gnu-darwin.org/debian.html

The only time that I ever use proprietary software is when I am trying
to help other users learn free and open source free software.  I'm a 
long time Apple and GNU/Linux user, and here is the old proof doc ;-}.

http://proclus.tripod.com/indulge.html

Now, it is embarrassing but, I want you to have a look at my cv.

http://biophysics.med.jhmi.edu/love/thesis/cv6.html

In all my years I have never used Microsoft Windows.  There are only
two exceptions to this statement, where I was helping Windows users to
access our servers at Hopkins.  Clearly, you can get a few things done
without it ;-}.

One of the primary reasons for founding GNU-Darwin was to help people
to put Microsoft behind them,  and it is definitely possible to do it
now.  You have many resources at your disposal to help you leave
Microsoft behind.  Look at the link below to see what you can do
with free software.  Apple, GNU-Darwin, GNU.org, and GNU/Linux will
all help, and we are largely all helping together, because we have a
shared foundation of free software.

http://www.gnu-darwin.org/gdc/

Microsoft is only one example.  That is why we are so insistent that
Apple keep true to free and open source software principles.  We
should ultimately try to leave all proprietary software behind us, so
that we can participate fully in the freedom and openness of the
internet culture and public domain.  What more do we need, when we
have such a rich store of information and so many capable people at
our sides?

Finally, as a scientist, it is obvious to me that this situation is
relevant current and ongoing discussion in the scientific community,
and as such, it is also clear that many members of the various lists
would be interested in the current state of Darwin with respect to
FOSS and with respect to science.  

Here is the crucial point.

The principles of FOSS and scientific inquiry converge.  In
practical terms, how else can you know is what happening in your
experiments?  Free and open source software, open standards, best
promote the scientific endeavor by mirroring its method, but also
they assure that the work is accessible to the public.

Freedom and openness are crucial to understanding, and foundational
to the scientific endeavor, and they should not be compromised. 
There are a few examples of exceptions, but clearly, this matter
will find further debate in the appropriate forums.  We should not
quell debate because a few people are offended or complaining.  
- From a scientific perspective that would be incorrect.

On that last point, I would suggest that Apple get on the right side
of the debate, and they will make tremendous headway.  Now is the
time.

Some people will find this message annoying and divisive, and the
delete button is ready at hand for them, but other people will find 
it interesting and engaging.  All as you like.  Let us not quell
discussion because a few people are annoyed.

Some will call this a troll, but I hope that folks will see through
such name-calling.  Trolls are mythological creatures, so don't
believe in them.  Everyone has a right to have their opinion
heard, even if those opinions are divisive or unpopular.  It is
clear that the idea of trolls is being used to attack freedom of
expression.  In fact, freedom of expression demands that we
listen to the so-called-trolls sometimes, and if you are civil, it
helps, so don't resort to name-calling. 

On cross-posting; when there are matters of urgent importance that
affect a broad range of subscriber lists, courtesy must sometimes
take a back seat, and cross-posting is an example of that. 
Cross-posting is to be encouraged when the subject of the post is on
topic.  Each of the various lists will respond in the way that seems
appropriate to the people in that forum, and the threads on the
various lists will diverge accordingly.  As the threads diverge, the
cross-posting addresses should be removed as needed.  Relevance to
all people is an unattainable goal, but messages of the broadest
applicability should have the broadest reach, and discussion should
not be stymied because some find it irrelevant.  I have given this
method due consideration; it is not trolling, not spam, not off-topic,
and cross-posting is an example of something that is sometimes
required according to the felt importance and relevance of a given
subject matter.  

In summary, Freedom and openness are now the bedrock of our
civilization and public welfare depends on these values, so that we 
should actively engage ourselves in preserving and making them happen.
In keeping with these principles it is crucial to note that there are
exceptions to etiquette, otherwise free expression will be overly
channeled, damped, and ultimately suppressed in our forums.  This
notion of courtesy will certainly receive additional consideration,
but meanwhile, let us together get to work on the activism now.  

Duly, I am amenable to valid criticism and able to respond, but please
reply with kindness.  Obviously, feel free to write back, copy, or
send these comments along to anyone else as you see fit.

Regards,
Michael L. Love Ph.D
Department of Biophysics and Biophysical Chemistry
School of Medicine
Johns Hopkins University
725 N. Wolfe Street
Room 608B WBSB
Baltimore MD 21205-2185

Interoffice Mail: 608B WBSB, SoM

office: 410-614-2267
lab:    410-614-3179
fax:    410-502-6910
cell:   443-824-3451
http://www.gnu-darwin.org/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (Darwin)

iD8DBQFEpIl6u0oI3iz5oZcRAtpQAJ9X7D6kq1vmWKXkG/3LBvx3gGrK1QCZAbgI
8Ww6QABLiZtmFmS9Ekea5nI=
=a0Oy
-----END PGP SIGNATURE-----

