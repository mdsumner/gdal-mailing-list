From mark.cave-ayland at ilande.co.uk  Sat Sep  1 06:31:31 2007
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <1188609329.20053.5.camel@mca-desktop>
References: <46D70478.3040507@savagexi.com>
	<1188504428.5754.10.camel@mca-desktop> <46D725A4.6020801@savagexi.com>
	<1188543202.5711.3.camel@mca-desktop> <46D8752B.2080305@savagexi.com>
	<1188609329.20053.5.camel@mca-desktop>
Message-ID: <1188642691.5618.4.camel@mca-desktop>

On Sat, 2007-09-01 at 02:15 +0100, Mark Cave-Ayland wrote:

> Well I don't have GEOS commit privileges, but since it works for you
> then I'll test on my older MingW tomorrow. If this works then I'd say go
> ahead and commit.
> 
> 
> ATB,
> 
> Mark.

Okay I tested this on my MingW-cross environment and I had to add some
extra definitions to profiler.h since the relevant exports in time.h are
marked as STRICT_ANSI. The attached seems to work for me on MingW
cross/Linux gcc - does it work for your version of MingW and Visual C?


ATB,

Mark.

-- 
ILande - Open Source Consultancy
http://www.ilande.co.uk

-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos-gettimeofday.patch
Type: text/x-patch
Size: 1570 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070901/2f1f657d/geos-gettimeofday.bin
From cfis at savagexi.com  Sat Sep  1 17:19:44 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <1188609329.20053.5.camel@mca-desktop>
References: <46D70478.3040507@savagexi.com>	<1188504428.5754.10.camel@mca-desktop>
	<46D725A4.6020801@savagexi.com>	<1188543202.5711.3.camel@mca-desktop>
	<46D8752B.2080305@savagexi.com>
	<1188609329.20053.5.camel@mca-desktop>
Message-ID: <46D9D770.8010103@savagexi.com>

> Well I don't have GEOS commit privileges, but since it works for you
> then I'll test on my older MingW tomorrow. If this works then I'd say go
> ahead and commit.

Ok - sounds good.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070901/72c3ad92/smime.bin
From ari.jolma at tkk.fi  Sun Sep  2 05:47:09 2007
From: ari.jolma at tkk.fi (Ari Jolma)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Problem with the Buffer method
Message-ID: <46DA869D.1050609@tkk.fi>

Hello,

I've got some tracks (computed from wind data) for which I want to 
create buffers. The tracks are often self-intersecting and basically a 
mess geometrically but sometimes I can compute useful buffers for them, 
often only after simplifying them. The problem is that when the Buffer 
method fails, it seems to fail by getting into an eternal loop. Does 
anybody have ideas how to avoid this or how the code could detect these 
situations (so that I could skip tracks that cause problems automatically)?

I'm using 2.2.3 through GDAL.

Regards,

Ari

-- 
Prof. Ari Jolma
Geoinformaatio- ja paikannustekniikka / Geoinformation and positioning
Teknillinen Korkeakoulu / Helsinki University of Technology
tel: +358 9 451 3886 address: POBox 1200, 02015 TKK, Finland
Email: ari.jolma at tkk.fi URL: http://www.tkk.fi/~jolma



From cfis at savagexi.com  Tue Sep  4 11:01:43 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <1188609329.20053.5.camel@mca-desktop>
References: <46D70478.3040507@savagexi.com>	<1188504428.5754.10.camel@mca-desktop>
	<46D725A4.6020801@savagexi.com>	<1188543202.5711.3.camel@mca-desktop>
	<46D8752B.2080305@savagexi.com>
	<1188609329.20053.5.camel@mca-desktop>
Message-ID: <46DD7357.5000200@savagexi.com>

> 
> Well I don't have GEOS commit privileges, but since it works for you
> then I'll test on my older MingW tomorrow. If this works then I'd say go
> ahead and commit.

Did you have a chance to look at this yet Mark?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070904/94e74bd3/smime.bin
From mark.cave-ayland at ilande.co.uk  Tue Sep  4 11:18:38 2007
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <46DD7357.5000200@savagexi.com>
References: <46D70478.3040507@savagexi.com>
	<1188504428.5754.10.camel@mca-desktop> <46D725A4.6020801@savagexi.com>
	<1188543202.5711.3.camel@mca-desktop> <46D8752B.2080305@savagexi.com>
	<1188609329.20053.5.camel@mca-desktop>
	<46DD7357.5000200@savagexi.com>
Message-ID: <44098.82.153.216.20.1188919118.squirrel@www.ilande.co.uk>

>>
>> Well I don't have GEOS commit privileges, but since it works for you
>> then I'll test on my older MingW tomorrow. If this works then I'd say go
>> ahead and commit.
>
> Did you have a chance to look at this yet Mark?
>
> Charlie


Hi Charlie,

Yes I did, and posted a slightly modified version to the list - see
http://geos.refractions.net/pipermail/geos-devel/2007-September/002976.html
for the details.


ATB,

Mark.



From cfis at savagexi.com  Tue Sep  4 12:22:07 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <44098.82.153.216.20.1188919118.squirrel@www.ilande.co.uk>
References: <46D70478.3040507@savagexi.com>	<1188504428.5754.10.camel@mca-desktop>
	<46D725A4.6020801@savagexi.com>	<1188543202.5711.3.camel@mca-desktop>
	<46D8752B.2080305@savagexi.com>	<1188609329.20053.5.camel@mca-desktop>	<46DD7357.5000200@savagexi.com>
	<44098.82.153.216.20.1188919118.squirrel@www.ilande.co.uk>
Message-ID: <46DD862F.7030206@savagexi.com>

> Hi Charlie,
> 
> Yes I did, and posted a slightly modified version to the list - see
> http://geos.refractions.net/pipermail/geos-devel/2007-September/002976.html
> for the details.

Ah - totally missed that.  Will take a look.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070904/daf969a1/smime.bin
From sy at perkins.net  Wed Sep  5 13:59:51 2007
From: sy at perkins.net (Simon Perkins)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
Message-ID: <46DEEE97.3040604@perkins.net>

Hi,

What's the current recommended way to build GEOS on windows using Visual 
Studio 2005? I'm having problems using either the makefile.vc and 
project file approaches, in both the stable rc4 3.0.0 release, and the 
latest SVN version. Before I beat my head against a wall for too much 
longer I figured I'd ask which version / approach is currently the best 
supported.

Cheers!

Simon


From sungaoyong at gmail.com  Wed Sep  5 21:28:28 2007
From: sungaoyong at gmail.com (=?GB2312?B?y++439PC?=)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DEEE97.3040604@perkins.net>
References: <46DEEE97.3040604@perkins.net>
Message-ID: <82355fc90709051828t7f4ea24es9a89169b8f463378@mail.gmail.com>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos-3cmake.zip
Type: application/zip
Size: 7254 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070906/8bd8e61f/geos-3cmake.zip
From mateusz at loskot.net  Wed Sep  5 21:31:43 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DEEE97.3040604@perkins.net>
References: <46DEEE97.3040604@perkins.net>
Message-ID: <46DF587F.9050505@loskot.net>

Simon Perkins wrote:
> What's the current recommended way to build GEOS on windows using Visual
> Studio 2005? I'm having problems using either the makefile.vc and
> project file approaches, in both the stable rc4 3.0.0 release, and the
> latest SVN version. Before I beat my head against a wall for too much
> longer I figured I'd ask which version / approach is currently the best
> supported.

Simon, all 3 versions should work well: geos/build/msvc80,
makefiles and (experimental) geos/build/bjam.

What's the problem?

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From sy at perkins.net  Wed Sep  5 21:46:06 2007
From: sy at perkins.net (Simon Perkins)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DF587F.9050505@loskot.net>
References: <46DEEE97.3040604@perkins.net> <46DF587F.9050505@loskot.net>
Message-ID: <46DF5BDE.6090705@perkins.net>

Mateusz Loskot wrote:
> Simon Perkins wrote:
>   
>> What's the current recommended way to build GEOS on windows using Visual
>> Studio 2005? I'm having problems using either the makefile.vc and
>> project file approaches, in both the stable rc4 3.0.0 release, and the
>> latest SVN version. Before I beat my head against a wall for too much
>> longer I figured I'd ask which version / approach is currently the best
>> supported.
>>     
>
> Simon, all 3 versions should work well: geos/build/msvc80,
> makefiles and (experimental) geos/build/bjam.
>
> What's the problem?
>
> Cheers
>   

Actually it's one of my colleagues who's working on this, but I think 
most of the problems were caused by trying to use the "stable" release 
3.0.0 rc4 which seems to have various things missing for windows. Then 
we ran into the problem that the SVN download didn't seem to include the 
various configure generated files, such as version.h, etc which the 
makefiles were looking for. We switched to using project files, but then 
there were errors building the python and ruby bindings (which we don't 
need). But I think, by switching those projects off and using the 
solution files in SVN, we managed to get a build that we can use. I'll 
let you know if we have any other problems!

Thanks,

Simon

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070905/ec5a9514/attachment.html
From mateusz at loskot.net  Wed Sep  5 22:25:34 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DF5BDE.6090705@perkins.net>
References: <46DEEE97.3040604@perkins.net> <46DF587F.9050505@loskot.net>
	<46DF5BDE.6090705@perkins.net>
Message-ID: <46DF651E.4020400@loskot.net>

Simon Perkins wrote:
> Mateusz Loskot wrote:
>> Simon Perkins wrote:
>> 
>>> What's the current recommended way to build GEOS on windows using
>>> Visual Studio 2005? I'm having problems using either the
>>> makefile.vc and project file approaches, in both the stable rc4
>>> 3.0.0 release, and the latest SVN version. Before I beat my head
>>> against a wall for too much longer I figured I'd ask which
>>> version / approach is currently the best supported.
>>> 
>> 
>> Simon, all 3 versions should work well: geos/build/msvc80, 
>> makefiles and (experimental) geos/build/bjam.
>> 
>> What's the problem?
> 
> Actually it's one of my colleagues who's working on this, but I think
>  most of the problems were caused by trying to use the "stable"
> release 3.0.0 rc4 which seems to have various things missing for
> windows.

Yes, this is true.
There were some release script broken, AFAIR.

> Then we ran into the problem that the SVN download didn't seem to
> include the various configure generated files, such as version.h, etc
> which the makefiles were looking for.

There are two steps involved and required to be done manually on Windows:

copy headers/geos/platform.h.vc headers/geos/platform.h
copy headers/geos/version.h.vc headers/geos/version.h

AFAIR, makefile.vc does it for you, at least for platform.h.

> We switched to using project files, but then there were errors
> building the python and ruby bindings (which we don't need).

These projects for scripting langs have been added quite recently,
by Charlie Savage. Perhaps something is not completed or not working
well yet, but you can just remove these projects from the solution.

> But I think, by switching those projects off and using the solution
> files in SVN, we managed to get a build that we can use. I'll let you
> know if we have any other problems!

OK

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From cfis at savagexi.com  Wed Sep  5 22:35:54 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DF651E.4020400@loskot.net>
References: <46DEEE97.3040604@perkins.net>
	<46DF587F.9050505@loskot.net>	<46DF5BDE.6090705@perkins.net>
	<46DF651E.4020400@loskot.net>
Message-ID: <46DF678A.4050703@savagexi.com>

> copy headers/geos/platform.h.vc headers/geos/platform.h
> copy headers/geos/version.h.vc headers/geos/version.h
> 
> AFAIR, makefile.vc does it for you, at least for platform.h.

The VC++ project files already do this as a pre-build step.  So this 
shouldn't be an issue.

Note I did the same thing for the capi file recently.

>> We switched to using project files, but then there were errors
>> building the python and ruby bindings (which we don't need).
> 
> These projects for scripting langs have been added quite recently,
> by Charlie Savage. Perhaps something is not completed or not working
> well yet, but you can just remove these projects from the solution.

Yes, just don't build them.  The problem with those project files is 
that they assume where ruby/python are located.  I suppose I could setup 
the project files to call out to a script and try to figure it out, but 
that didn't seem worth the bother.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070905/8bc9e3c7/smime.bin
From mateusz at loskot.net  Wed Sep  5 23:21:55 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DF678A.4050703@savagexi.com>
References: <46DEEE97.3040604@perkins.net>	<46DF587F.9050505@loskot.net>	<46DF5BDE.6090705@perkins.net>	<46DF651E.4020400@loskot.net>
	<46DF678A.4050703@savagexi.com>
Message-ID: <46DF7253.1050705@loskot.net>

Charlie Savage wrote:
>> copy headers/geos/platform.h.vc headers/geos/platform.h
>> copy headers/geos/version.h.vc headers/geos/version.h
>>
>> AFAIR, makefile.vc does it for you, at least for platform.h.
> 
> The VC++ project files already do this as a pre-build step.  So this
> shouldn't be an issue.
> 
> Note I did the same thing for the capi file recently.

Charlie,

Understood, great!

>>> We switched to using project files, but then there were errors
>>> building the python and ruby bindings (which we don't need).
>>
>> These projects for scripting langs have been added quite recently,
>> by Charlie Savage. Perhaps something is not completed or not working
>> well yet, but you can just remove these projects from the solution.
> 
> Yes, just don't build them.  The problem with those project files is
> that they assume where ruby/python are located.  I suppose I could setup
> the project files to call out to a script and try to figure it out, but
> that didn't seem worth the bother.

Perhaps macros in VC++ Property Sheets will work for this.
It's possible to define macros like RUBY_DIR in a common Property Sheet
file (.vcprops) and then share this file among all projects.

Here is example of .vcprops:

http://svn.osgeo.org/gdal/trunk/gdal/wince/msvc80/

The sheet is editable from View -> Property Manager in the IDE.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From cfis at savagexi.com  Wed Sep  5 23:32:51 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DF7253.1050705@loskot.net>
References: <46DEEE97.3040604@perkins.net>	<46DF587F.9050505@loskot.net>	<46DF5BDE.6090705@perkins.net>	<46DF651E.4020400@loskot.net>	<46DF678A.4050703@savagexi.com>
	<46DF7253.1050705@loskot.net>
Message-ID: <46DF74E3.4030805@savagexi.com>

> Perhaps macros in VC++ Property Sheets will work for this.
> It's possible to define macros like RUBY_DIR in a common Property Sheet
> file (.vcprops) and then share this file among all projects.
> 
> Here is example of .vcprops:
> 
> http://svn.osgeo.org/gdal/trunk/gdal/wince/msvc80/
> 
> The sheet is editable from View -> Property Manager in the IDE.

That's very interesting.  Is a user supposed to change the settings as 
needed then?

I was thinking it would be clever to just try to run Ruby/Python 
directly and ask the interpreters themselves where they are.  That does 
assume they are on the execution path though.  And it assumes you can 
recover from errors if they aren't.  Can you work such magic in a batch 
file?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070905/5f4a731b/smime.bin
From mateusz at loskot.net  Thu Sep  6 05:56:02 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DF74E3.4030805@savagexi.com>
References: <46DEEE97.3040604@perkins.net>	<46DF587F.9050505@loskot.net>	<46DF5BDE.6090705@perkins.net>	<46DF651E.4020400@loskot.net>	<46DF678A.4050703@savagexi.com>	<46DF7253.1050705@loskot.net>
	<46DF74E3.4030805@savagexi.com>
Message-ID: <46DFCEB2.4080201@loskot.net>

Charlie Savage wrote:
>> Perhaps macros in VC++ Property Sheets will work for this.
>> It's possible to define macros like RUBY_DIR in a common Property Sheet
>> file (.vcprops) and then share this file among all projects.
>>
>> Here is example of .vcprops:
>>
>> http://svn.osgeo.org/gdal/trunk/gdal/wince/msvc80/
>>
>> The sheet is editable from View -> Property Manager in the IDE.
>
> That's very interesting.  Is a user supposed to change the settings as
> needed then?

Yes, I use .vsprops for that purpose, so users can edit a macro value
ie. specifying their own path to some dependency.

Here is more complex example.
In soci.vsprops I many *_DIR macros and values of these macros are
supposed to be edited according user's environment:

http://soci.cvs.sourceforge.net/soci/build/msvc80/

> I was thinking it would be clever to just try to run Ruby/Python
> directly and ask the interpreters themselves where they are.  That does
> assume they are on the execution path though.  And it assumes you can
> recover from errors if they aren't.  Can you work such magic in a batch
> file?

I think it should be possible to run it in prebuild actions,
defined in .vcproj projects. I've not tried, but I suppose it's
possible to assign values to new macro during prebuild.

I can't check it ATM, but if you have problems, I'll play with it tonight.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From cfis at savagexi.com  Thu Sep  6 19:24:28 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <1188642691.5618.4.camel@mca-desktop>
References: <46D70478.3040507@savagexi.com>	<1188504428.5754.10.camel@mca-desktop>
	<46D725A4.6020801@savagexi.com>	<1188543202.5711.3.camel@mca-desktop>
	<46D8752B.2080305@savagexi.com>	<1188609329.20053.5.camel@mca-desktop>
	<1188642691.5618.4.camel@mca-desktop>
Message-ID: <46E08C2C.8050106@savagexi.com>

Mark,

This builds fine for me with VC++.  The inclusion of <sys/time.h> twice 
is a big ugly, but I went ahead and applied this.

Thanks,

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070906/a15d29f8/smime.bin
From cfis at savagexi.com  Thu Sep  6 20:21:44 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Windows Build
In-Reply-To: <46DFCEB2.4080201@loskot.net>
References: <46DEEE97.3040604@perkins.net>	<46DF587F.9050505@loskot.net>	<46DF5BDE.6090705@perkins.net>	<46DF651E.4020400@loskot.net>	<46DF678A.4050703@savagexi.com>	<46DF7253.1050705@loskot.net>	<46DF74E3.4030805@savagexi.com>
	<46DFCEB2.4080201@loskot.net>
Message-ID: <46E09998.6010105@savagexi.com>

Hi Mateusz,

>> I was thinking it would be clever to just try to run Ruby/Python
>> directly and ask the interpreters themselves where they are.  That does
>> assume they are on the execution path though.  And it assumes you can
>> recover from errors if they aren't.  Can you work such magic in a batch
>> file?
> 
> I think it should be possible to run it in prebuild actions,
> defined in .vcproj projects. I've not tried, but I suppose it's
> possible to assign values to new macro during prebuild.
> 
> I can't check it ATM, but if you have problems, I'll play with it tonight.

I'd love to hand this over to you if that's ok - too much to do at the 
moment (although I'm sure you have the same problem!).

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070906/f1908be1/smime.bin
From cfis at savagexi.com  Fri Sep  7 01:28:57 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] GeomUnion Bug?
In-Reply-To: <9245.1189132424@sss.pgh.pa.us>
References: <46E09936.5030008@savagexi.com> <9245.1189132424@sss.pgh.pa.us>
Message-ID: <46E0E199.40302@savagexi.com>

This makes sense to me:

SELECT astext(GeomUnion(GeomFromText('POINT(-104 40)'),
  	                GeomFromText('POINT(-105 40)')))

"MULTIPOINT(-105 40,-104 40)"



But this not so much:

SELECT astext(GeomUnion(GeomFromText('POLYGON((-104 40,-104 40,-104 

                                                  40,-104 40,-104 40))'),
                         GeomFromText('POLYGON((-105 40,-105 40,-105
                                                  40,-105 40,-105 0))')))

"GEOMETRYCOLLECTION EMPTY"

Is this a bug?  Or is it supposed work this way?  It used to be 
different with Geos 2.2.1 (I assume this is a geos issue so I included 
that mailing list).

Charlie



-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070906/66d8700e/smime.bin
From mbdavis at refractions.net  Fri Sep  7 11:32:39 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] GeomUnion Bug?
In-Reply-To: <46E0E199.40302@savagexi.com>
References: <46E09936.5030008@savagexi.com> <9245.1189132424@sss.pgh.pa.us>
	<46E0E199.40302@savagexi.com>
Message-ID: <46E16F17.3080700@refractions.net>

Both polygons are invalid.  The first is degenerate (a point, which 
obviously self-intersects.  The second has a non-closed ring.

That's why the result is incorrect - JTS/GEOS methods usually are only 
guaranteed to work for valid inputs.

Charlie Savage wrote:
> This makes sense to me:
>
> SELECT astext(GeomUnion(GeomFromText('POINT(-104 40)'),
>                      GeomFromText('POINT(-105 40)')))
>
> "MULTIPOINT(-105 40,-104 40)"
>
>
>
> But this not so much:
>
> SELECT astext(GeomUnion(GeomFromText('POLYGON((-104 40,-104 40,-104
>                                                  40,-104 40,-104 40))'),
>                         GeomFromText('POLYGON((-105 40,-105 40,-105
>                                                  40,-105 40,-105 0))')))
>
> "GEOMETRYCOLLECTION EMPTY"
>
> Is this a bug?  Or is it supposed work this way?  It used to be 
> different with Geos 2.2.1 (I assume this is a geos issue so I included 
> that mailing list).
>
> Charlie
>
>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From cfis at savagexi.com  Fri Sep  7 11:57:59 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] GeomUnion Bug?
In-Reply-To: <46E16F17.3080700@refractions.net>
References: <46E09936.5030008@savagexi.com>
	<9245.1189132424@sss.pgh.pa.us>	<46E0E199.40302@savagexi.com>
	<46E16F17.3080700@refractions.net>
Message-ID: <46E17507.5080200@savagexi.com>

Hi Martin,

> Both polygons are invalid.  The first is degenerate (a point, which 
> obviously self-intersects.  The second has a non-closed ring.

Yeah, Carl pointed that out a bit earlier.  I get those issues because 
I'm doing something like this:

select astext(geomunion(envelope(GeomFromText('POINT(-104 40)')),
                         envelope(GeomFromText('POINT(-105 40)'))))

Should envelope be returning me an invalid geometry?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070907/c4858841/smime.bin
From mbdavis at refractions.net  Fri Sep  7 12:52:12 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] GeomUnion Bug?
In-Reply-To: <46E17507.5080200@savagexi.com>
References: <46E09936.5030008@savagexi.com>	<9245.1189132424@sss.pgh.pa.us>	<46E0E199.40302@savagexi.com>	<46E16F17.3080700@refractions.net>
	<46E17507.5080200@savagexi.com>
Message-ID: <46E181BC.2040106@refractions.net>

Charlie,

see my reply on the PostGIS list.

Charlie Savage wrote:
> Hi Martin,
>
>> Both polygons are invalid.  The first is degenerate (a point, which 
>> obviously self-intersects.  The second has a non-closed ring.
>
> Yeah, Carl pointed that out a bit earlier.  I get those issues because 
> I'm doing something like this:
>
> select astext(geomunion(envelope(GeomFromText('POINT(-104 40)')),
>                         envelope(GeomFromText('POINT(-105 40)'))))
>
> Should envelope be returning me an invalid geometry?
>
> Charlie
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From mark.cave-ayland at ilande.co.uk  Fri Sep  7 13:23:34 2007
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] timeval.h simplification
In-Reply-To: <46E08C2C.8050106@savagexi.com>
References: <46D70478.3040507@savagexi.com>
	<1188504428.5754.10.camel@mca-desktop> <46D725A4.6020801@savagexi.com>
	<1188543202.5711.3.camel@mca-desktop> <46D8752B.2080305@savagexi.com>
	<1188609329.20053.5.camel@mca-desktop>
	<1188642691.5618.4.camel@mca-desktop> <46E08C2C.8050106@savagexi.com>
Message-ID: <1189185814.5684.0.camel@mca-desktop>

On Thu, 2007-09-06 at 17:24 -0600, Charlie Savage wrote:
> Mark,
> 
> This builds fine for me with VC++.  The inclusion of <sys/time.h> twice 
> is a big ugly, but I went ahead and applied this.
> 
> Thanks,
> 
> Charlie

Yeah. Unfortunately it's needed to import the CRT import definitions for
MingW :(


ATB,

Mark.

-- 
ILande - Open Source Consultancy
http://www.ilande.co.uk



From mark.cave-ayland at ilande.co.uk  Fri Sep  7 13:28:34 2007
From: mark.cave-ayland at ilande.co.uk (Mark Cave-Ayland)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Python/Swig/Configure Bug
In-Reply-To: <1188609230.20053.3.camel@mca-desktop>
References: <46D65604.30109@savagexi.com>
	<1188456411.5615.18.camel@mca-desktop> <46D669F8.7080206@savagexi.com>
	<1188458515.5615.26.camel@mca-desktop> <46D67DC3.1010101@savagexi.com>
	<1188493862.5754.7.camel@mca-desktop> <46D6FD2F.6040109@savagexi.com>
	<1188509503.5754.19.camel@mca-desktop> <46D87D54.4010602@savagexi.com>
	<1188609230.20053.3.camel@mca-desktop>
Message-ID: <1189186114.5684.5.camel@mca-desktop>

On Sat, 2007-09-01 at 02:13 +0100, Mark Cave-Ayland wrote:

> > I think the issue is the test against $SWIG.  I changed it to this:
> > 
> > 	if test -n x"$SWIG"x; then
> > 		use_swig=true
> > 	fi


Hi Charlie,

Having looked at this commit, I now realise it's wrong :(  According to
the man page, -n tests for return string length and according to the
macro, SWIG is set to an empty string. However, the resulting string
would then become 'xx' which would still evaluate as true since it has a
length greater than zero.

The attached patch fixes this, and does a little bit of tidying up at
the same time.


ATB,

Mark.

-- 
ILande - Open Source Consultancy
http://www.ilande.co.uk

-------------- next part --------------
A non-text attachment was scrubbed...
Name: geos-autoconf.patch
Type: text/x-patch
Size: 833 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070907/c9d36b8d/geos-autoconf.bin
From cfis at savagexi.com  Fri Sep  7 13:33:22 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Python/Swig/Configure Bug
In-Reply-To: <1189186114.5684.5.camel@mca-desktop>
References: <46D65604.30109@savagexi.com>	<1188456411.5615.18.camel@mca-desktop>
	<46D669F8.7080206@savagexi.com>	<1188458515.5615.26.camel@mca-desktop>
	<46D67DC3.1010101@savagexi.com>	<1188493862.5754.7.camel@mca-desktop>
	<46D6FD2F.6040109@savagexi.com>	<1188509503.5754.19.camel@mca-desktop>
	<46D87D54.4010602@savagexi.com>	<1188609230.20053.3.camel@mca-desktop>
	<1189186114.5684.5.camel@mca-desktop>
Message-ID: <46E18B62.8090808@savagexi.com>

> Hi Charlie,
> 
> Having looked at this commit, I now realise it's wrong :(  According to
> the man page, -n tests for return string length and according to the
> macro, SWIG is set to an empty string. However, the resulting string
> would then become 'xx' which would still evaluate as true since it has a
> length greater than zero.

Oh - I misunderstood what X means.

Thanks and applied.

Charlie

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070907/1e5674cf/smime.bin
From cfis at savagexi.com  Fri Sep  7 13:42:44 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] C API Union Looks Wrong - Ignores Geometry::Union
	Shortcuts
Message-ID: <46E18D94.90408@savagexi.com>

I think the CAPI is incorrectly performing the union operation.

Here is Geometry::Union:

Geometry*
Geometry::Union(const Geometry *other) const
	//throw(TopologyException *, IllegalArgumentException *)
{
	checkNotGeometryCollection(this);
	checkNotGeometryCollection(other);

	Geometry *out = NULL;

         <bunch of shortcircuit stuff>

	return OverlayOp::overlayOp(this, other, OverlayOp::opUNION);
}

And here is the CAPI call:

GEOSUnion(const Geometry *g1, const Geometry *g2)
{
   GeomAutoPtr g3 = BinaryOp(g1, g2, overlayOp(OverlayOp::opUNION));
   ...
}

Notice the CAPI entirely skips Geometry::Union and therefore doesn't use 
any of the shortcuts.  Why is this?  Shouldn't just be:

g1.union(g2)

Note that all the same issue occurs in various other CAPI exposed calls.

Thanks,

Charlie



-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070907/c4c766ce/smime.bin
From sy at perkins.net  Mon Sep 10 20:22:08 2007
From: sy at perkins.net (Simon Perkins)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
Message-ID: <46E5DFB0.2030502@perkins.net>

GEOS doesn't currently build on windows (at least, using project files). 
A recent change to profiler.h now includes config.h, which doesn't exist 
on windows builds.

Incidentally, I tried to submit a bug using the link on the web page, 
but wasn't sure how to get a login.

Cheers,

Simon





From cfis at savagexi.com  Mon Sep 10 22:06:19 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E5DFB0.2030502@perkins.net>
References: <46E5DFB0.2030502@perkins.net>
Message-ID: <46E5F81B.4000701@savagexi.com>

Hi Simon,

> GEOS doesn't currently build on windows (at least, using project files). 
> A recent change to profiler.h now includes config.h, which doesn't exist 
> on windows builds.

Sorry, that's Mark's and my fault - as we tried to fix the MingW build.

Resync with SVN and try again, should be fixed now.

> Incidentally, I tried to submit a bug using the link on the web page, 
> but wasn't sure how to get a login.

Yeah - I have no idea how to either (I want to change my email address 
but can't and I don't know how to create a new login).

Paul - anyway we can switch to something more user friendly like Trac?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070910/74ed8064/smime.bin
From mateusz at loskot.net  Tue Sep 11 00:42:30 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E5F81B.4000701@savagexi.com>
References: <46E5DFB0.2030502@perkins.net> <46E5F81B.4000701@savagexi.com>
Message-ID: <46E61CB6.6030806@loskot.net>

Charlie Savage wrote:
> Paul - anyway we can switch to something more user friendly like Trac?

+1 :)

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From pramsey at refractions.net  Tue Sep 11 01:21:06 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E61CB6.6030806@loskot.net>
References: <46E5DFB0.2030502@perkins.net> <46E5F81B.4000701@savagexi.com>
	<46E61CB6.6030806@loskot.net>
Message-ID: <49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>

Try me again in October :)

On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:

> Charlie Savage wrote:
>> Paul - anyway we can switch to something more user friendly like  
>> Trac?
>
> +1 :)
>
> Cheers
> -- 
> Mateusz Loskot
> http://mateusz.loskot.net
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From hobu.inc at gmail.com  Tue Sep 11 12:26:21 2007
From: hobu.inc at gmail.com (Howard Butler)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>
References: <46E5DFB0.2030502@perkins.net> <46E5F81B.4000701@savagexi.com>
	<46E61CB6.6030806@loskot.net>
	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>
Message-ID: <0945AF09-A220-4727-A504-25BC86555498@gmail.com>

*cough* OSGeo *cough*

On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:

> Try me again in October :)
>
> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>
>> Charlie Savage wrote:
>>> Paul - anyway we can switch to something more user friendly like  
>>> Trac?
>>
>> +1 :)
>>
>> Cheers
>> -- 
>> Mateusz Loskot
>> http://mateusz.loskot.net
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From pramsey at refractions.net  Tue Sep 11 12:58:57 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <0945AF09-A220-4727-A504-25BC86555498@gmail.com>
References: <46E5DFB0.2030502@perkins.net>
	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>
	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>
Message-ID: <46E6C951.9070500@refractions.net>

Is that the sound of a volunteer coughing?

Howard Butler wrote:
> *cough* OSGeo *cough*
> 
> On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:
> 
>> Try me again in October :)
>>
>> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>>
>>> Charlie Savage wrote:
>>>> Paul - anyway we can switch to something more user friendly like Trac?
>>>
>>> +1 :)
>>>
>>> Cheers
>>> -- 
>>> Mateusz Loskot
>>> http://mateusz.loskot.net
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From mateusz at loskot.net  Tue Sep 11 13:31:16 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E6C951.9070500@refractions.net>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>
	<46E6C951.9070500@refractions.net>
Message-ID: <46E6D0E4.2090104@loskot.net>

What's the subject of volunteering here?

-- Mat

Paul Ramsey wrote:
> Is that the sound of a volunteer coughing?
> 
> Howard Butler wrote:
>> *cough* OSGeo *cough*
>>
>> On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:
>>
>>> Try me again in October :)
>>>
>>> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>>>
>>>> Charlie Savage wrote:
>>>>> Paul - anyway we can switch to something more user friendly like Trac?
>>>>
>>>> +1 :)
>>>>
>>>> Cheers
>>>> -- 
>>>> Mateusz Loskot
>>>> http://mateusz.loskot.net
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@geos.refractions.net
>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
> 
> 


-- 
Mateusz Loskot
http://mateusz.loskot.net

From pramsey at refractions.net  Tue Sep 11 13:54:41 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E6D0E4.2090104@loskot.net>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>	<46E6C951.9070500@refractions.net>
	<46E6D0E4.2090104@loskot.net>
Message-ID: <46E6D661.4070107@refractions.net>

To do the sysadmin around moving GEOS to Trac / OSGeo.

P

Mateusz Loskot wrote:
> What's the subject of volunteering here?
> 
> -- Mat
> 
> Paul Ramsey wrote:
>> Is that the sound of a volunteer coughing?
>>
>> Howard Butler wrote:
>>> *cough* OSGeo *cough*
>>>
>>> On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:
>>>
>>>> Try me again in October :)
>>>>
>>>> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>>>>
>>>>> Charlie Savage wrote:
>>>>>> Paul - anyway we can switch to something more user friendly like Trac?
>>>>> +1 :)
>>>>>
>>>>> Cheers
>>>>> -- 
>>>>> Mateusz Loskot
>>>>> http://mateusz.loskot.net
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@geos.refractions.net
>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@geos.refractions.net
>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
> 
> 


-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From hobu.inc at gmail.com  Tue Sep 11 14:18:28 2007
From: hobu.inc at gmail.com (Howard Butler)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E6D661.4070107@refractions.net>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>	<46E6C951.9070500@refractions.net>
	<46E6D0E4.2090104@loskot.net> <46E6D661.4070107@refractions.net>
Message-ID: <D4FD44EE-8594-4B88-8F05-617E04D868B4@gmail.com>

Would that consequently imply that GEOS wishes to be part of OSGeo?   
I would take care of the sysadmin'ing to make the Trac/SVN happen if  
it were.

hobu

On Sep 11, 2007, at 12:54 PM, Paul Ramsey wrote:

> To do the sysadmin around moving GEOS to Trac / OSGeo.
>
> P
>
> Mateusz Loskot wrote:
>> What's the subject of volunteering here?
>> -- Mat
>> Paul Ramsey wrote:
>>> Is that the sound of a volunteer coughing?
>>>
>>> Howard Butler wrote:
>>>> *cough* OSGeo *cough*
>>>>
>>>> On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:
>>>>
>>>>> Try me again in October :)
>>>>>
>>>>> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>>>>>
>>>>>> Charlie Savage wrote:
>>>>>>> Paul - anyway we can switch to something more user friendly  
>>>>>>> like Trac?
>>>>>> +1 :)
>>>>>>
>>>>>> Cheers
>>>>>> -- 
>>>>>> Mateusz Loskot
>>>>>> http://mateusz.loskot.net
>>>>>> _______________________________________________
>>>>>> geos-devel mailing list
>>>>>> geos-devel@geos.refractions.net
>>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@geos.refractions.net
>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@geos.refractions.net
>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>
>
> -- 
>
>   Paul Ramsey
>   Refractions Research
>   http://www.refractions.net
>   pramsey@refractions.net
>   Phone: 250-383-3022
>   Cell: 250-885-0632
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From mateusz at loskot.net  Tue Sep 11 14:34:55 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E6D661.4070107@refractions.net>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>	<46E6C951.9070500@refractions.net>	<46E6D0E4.2090104@loskot.net>
	<46E6D661.4070107@refractions.net>
Message-ID: <46E6DFCF.90608@loskot.net>

Understood.
OK, so let's not to distract you about it before FOSS4G
and we will get back to this subject later.

-- Mat

Paul Ramsey wrote:
> To do the sysadmin around moving GEOS to Trac / OSGeo.
> 
> P
> 
> Mateusz Loskot wrote:
>> What's the subject of volunteering here?
>>
>> -- Mat
>>
>> Paul Ramsey wrote:
>>> Is that the sound of a volunteer coughing?
>>>
>>> Howard Butler wrote:
>>>> *cough* OSGeo *cough*
>>>>
>>>> On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:
>>>>
>>>>> Try me again in October :)
>>>>>
>>>>> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>>>>>
>>>>>> Charlie Savage wrote:
>>>>>>> Paul - anyway we can switch to something more user friendly like
>>>>>>> Trac?
>>>>>> +1 :)
>>>>>>
>>>>>> Cheers
>>>>>> -- 
>>>>>> Mateusz Loskot
>>>>>> http://mateusz.loskot.net
>>>>>> _______________________________________________
>>>>>> geos-devel mailing list
>>>>>> geos-devel@geos.refractions.net
>>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>>> _______________________________________________
>>>>> geos-devel mailing list
>>>>> geos-devel@geos.refractions.net
>>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>> _______________________________________________
>>>> geos-devel mailing list
>>>> geos-devel@geos.refractions.net
>>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>
>>
> 
> 


-- 
Mateusz Loskot
http://mateusz.loskot.net

From warmerdam at pobox.com  Tue Sep 11 14:44:59 2007
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <D4FD44EE-8594-4B88-8F05-617E04D868B4@gmail.com>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>
	<46E61CB6.6030806@loskot.net>
	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>
	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>
	<46E6C951.9070500@refractions.net> <46E6D0E4.2090104@loskot.net>
	<46E6D661.4070107@refractions.net>
	<D4FD44EE-8594-4B88-8F05-617E04D868B4@gmail.com>
Message-ID: <46E6E22B.6020004@pobox.com>

Howard Butler wrote:
> Would that consequently imply that GEOS wishes to be part of OSGeo?  I 
> would take care of the sysadmin'ing to make the Trac/SVN happen if it were.
> 
> hobu
> 
> On Sep 11, 2007, at 12:54 PM, Paul Ramsey wrote:
> 
>> To do the sysadmin around moving GEOS to Trac / OSGeo.

Folks,

Note that Trac is by far more effective when installed alongside the
subversion server.  I'm reasonably confident that OSGeo would be willing
to provide subversion and Trac services for GEOS whether it is formally
an OSGeo project or just a "closely related" project as it is now.  But
from a technical synergy point of view, if we are going to trac lets
not lose the link to subversion stuff.

I'd even be willing to do the Trac install at Refractions if it could
be done during FOSS4G when it is a low latency effort.

Of course, I'd prefer it at OSGeo...

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org


From pramsey at refractions.net  Tue Sep 11 14:27:15 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <D4FD44EE-8594-4B88-8F05-617E04D868B4@gmail.com>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>	<46E6C951.9070500@refractions.net>	<46E6D0E4.2090104@loskot.net>
	<46E6D661.4070107@refractions.net>
	<D4FD44EE-8594-4B88-8F05-617E04D868B4@gmail.com>
Message-ID: <46E6DE03.3070406@refractions.net>

I dunno, do we?

Howard Butler wrote:
> Would that consequently imply that GEOS wishes to be part of OSGeo?  I 
> would take care of the sysadmin'ing to make the Trac/SVN happen if it were.
> 
> On Sep 11, 2007, at 12:54 PM, Paul Ramsey wrote:
> 
>> To do the sysadmin around moving GEOS to Trac / OSGeo.
>>
>> Mateusz Loskot wrote:
>>> What's the subject of volunteering here?
>>> -- Mat
>>> Paul Ramsey wrote:
>>>> Is that the sound of a volunteer coughing?
>>>>
>>>> Howard Butler wrote:
>>>>> *cough* OSGeo *cough*
>>>>>
>>>>> On Sep 11, 2007, at 12:21 AM, Paul Ramsey wrote:
>>>>>
>>>>>> Try me again in October :)
>>>>>>
>>>>>> On 10-Sep-07, at 9:42 PM, Mateusz Loskot wrote:
>>>>>>
>>>>>>> Charlie Savage wrote:
>>>>>>>> Paul - anyway we can switch to something more user friendly like 
>>>>>>>> Trac?
>>>>>>> +1 :)


-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From pramsey at refractions.net  Tue Sep 11 15:00:03 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] Bug: No config.h on windows
In-Reply-To: <46E6E22B.6020004@pobox.com>
References: <46E5DFB0.2030502@perkins.net>	<46E5F81B.4000701@savagexi.com>	<46E61CB6.6030806@loskot.net>	<49F54090-71BA-4746-B59E-B775F402DD36@refractions.net>	<0945AF09-A220-4727-A504-25BC86555498@gmail.com>	<46E6C951.9070500@refractions.net>
	<46E6D0E4.2090104@loskot.net>	<46E6D661.4070107@refractions.net>	<D4FD44EE-8594-4B88-8F05-617E04D868B4@gmail.com>
	<46E6E22B.6020004@pobox.com>
Message-ID: <46E6E5B3.6070700@refractions.net>

If it's purely a technical consideration (we want trac), then just wait 
until I have time to pursue it.

P

Frank Warmerdam wrote:
> Howard Butler wrote:
>> Would that consequently imply that GEOS wishes to be part of OSGeo?  I 
>> would take care of the sysadmin'ing to make the Trac/SVN happen if it 
>> were.
>>
>> hobu
>>
>> On Sep 11, 2007, at 12:54 PM, Paul Ramsey wrote:
>>
>>> To do the sysadmin around moving GEOS to Trac / OSGeo.
> 
> Folks,
> 
> Note that Trac is by far more effective when installed alongside the
> subversion server.  I'm reasonably confident that OSGeo would be willing
> to provide subversion and Trac services for GEOS whether it is formally
> an OSGeo project or just a "closely related" project as it is now.  But
> from a technical synergy point of view, if we are going to trac lets
> not lose the link to subversion stuff.
> 
> I'd even be willing to do the Trac install at Refractions if it could
> be done during FOSS4G when it is a low latency effort.
> 
> Of course, I'd prefer it at OSGeo...
> 
> Best regards,


-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From sy at perkins.net  Tue Sep 11 17:30:36 2007
From: sy at perkins.net (Simon Perkins)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] C# Bindings?
Message-ID: <46E708FC.5090906@perkins.net>

Hi,

Are there any C# bindings for GEOS out there?

We've been using the OGR interface to GEOS (which are exposed by the OGR 
C# bindings), but are running into some strange topology exceptions 
(side location conflicts and non-nodal intersections) and I'd like to 
use the GEOS isValid() method which is not exposed by OGR, AFAIK. Might 
using the GEOS library directly be more efficient than going through OGR 
as well?

In general, is there an easy way to "clean up" a geometry so it won't 
raise these kinds of exceptions? The geometries in question are all 
generated by the union of (many) simple polygons.

Anyway, I could go off and roll PInvoke stubs for the GEOS functions I 
need in not much time, but I figured I'd see what other people have 
already before I do that. Any interest in adding such bindings to geos? 
I could also take a look at SWIG, but it always scares me for some reason...

Cheers,

Sy


From cfis at savagexi.com  Tue Sep 11 17:36:19 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E708FC.5090906@perkins.net>
References: <46E708FC.5090906@perkins.net>
Message-ID: <46E70A53.4030802@savagexi.com>


Simon Perkins wrote:
> Hi,
> 
> Are there any C# bindings for GEOS out there?

Not that I know of - at least not as part of GEOS.

> We've been using the OGR interface to GEOS (which are exposed by the OGR 
> C# bindings), but are running into some strange topology exceptions 
> (side location conflicts and non-nodal intersections) and I'd like to 
> use the GEOS isValid() method which is not exposed by OGR, AFAIK. Might 
> using the GEOS library directly be more efficient than going through OGR 
> as well?

Hmm, probably not a big difference.

> Anyway, I could go off and roll PInvoke stubs for the GEOS functions I 
> need in not much time, but I figured I'd see what other people have 
> already before I do that. Any interest in adding such bindings to geos? 
> I could also take a look at SWIG, but it always scares me for some 
> reason...

More recent versions of SWIG have a standard typemaps that apply for the 
scripting languages - so Perl, Ruby, Python.  Thus it would be very easy 
to reuse the current bindings for one of those language.

However, SWIG's static languages (C#, Java, etc.) use a different 
system.  So you would have to take the current geos.i file and 
significantly change it to work with C#.  The OGR C# bindings could 
probably provide some guidance.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070911/9f1fd0fc/smime.bin
From mateusz at loskot.net  Tue Sep 11 17:51:18 2007
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri Nov  2 20:53:43 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E70A53.4030802@savagexi.com>
References: <46E708FC.5090906@perkins.net> <46E70A53.4030802@savagexi.com>
Message-ID: <46E70DD6.5010109@loskot.net>

Charlie Savage wrote:
> Simon Perkins wrote: 
>> We've been using the OGR interface to GEOS (which are exposed by the
>> OGR C# bindings), but are running into some strange topology
>> exceptions (side location conflicts and non-nodal intersections) and
>> I'd like to use the GEOS isValid() method which is not exposed by OGR,
>> AFAIK. Might using the GEOS library directly be more efficient than
>> going through OGR as well?
> 
> Hmm, probably not a big difference.

It depends on what geometry types are used, GEOS or OGR only or mixed,
because there is always some performance overhead related to conversion
between GEOS and OGR geometries.
If OGR is used *only* as a proxy to GEOS operation then I'm inclined to
say it's very efficient because OGR needs to call
OGRGeometry::exportToGEOS() on each geometry you pass.

If GEOS geometries only are concerned, then better solution
is to call GEOS directly and feed it with its native geometries.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net

From mbdavis at refractions.net  Tue Sep 11 18:04:02 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E708FC.5090906@perkins.net>
References: <46E708FC.5090906@perkins.net>
Message-ID: <46E710D2.6060707@refractions.net>

A couple of things:

You might also try looking at the Net Topology Suite, which is a port of 
JTS to C# (just like GEOS is a port to C++).  HOWEVER, this is a fork of 
JTS, and I don't know how current or active it is.  (It might be nice 
thing for JTS to offer an official .NET compatible version....)

You can also try compiling JTS under J#.  It mostly all works - there 
might be a few simple utility classes you have to supply.

As for your topology problems, this might be cause by invalid input 
data, or it might be caused by robustness errors in the computation 
itself.  The most recent version of GEOS has some substantial 
improvements in robustness for overlay ops, so you should try it and see 
if it fixes your problem.  (At a very high level this is doing something 
similar to your concept of "cleaning up" the geometries to avoid the 
problems - but it's probably not something you want to try at home  8^)

Another note - if you are unioning many polygons together, JTS is just 
adding an optimized function to do this efficiently, and hopefully this 
will make it in GEOS in due course.

Simon Perkins wrote:
> Hi,
>
> Are there any C# bindings for GEOS out there?
>
> We've been using the OGR interface to GEOS (which are exposed by the 
> OGR C# bindings), but are running into some strange topology 
> exceptions (side location conflicts and non-nodal intersections) and 
> I'd like to use the GEOS isValid() method which is not exposed by OGR, 
> AFAIK. Might using the GEOS library directly be more efficient than 
> going through OGR as well?
>
> In general, is there an easy way to "clean up" a geometry so it won't 
> raise these kinds of exceptions? The geometries in question are all 
> generated by the union of (many) simple polygons.
>
> Anyway, I could go off and roll PInvoke stubs for the GEOS functions I 
> need in not much time, but I figured I'd see what other people have 
> already before I do that. Any interest in adding such bindings to 
> geos? I could also take a look at SWIG, but it always scares me for 
> some reason...
>
> Cheers,
>
> Sy
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From sy at perkins.net  Tue Sep 11 18:31:56 2007
From: sy at perkins.net (Simon Perkins)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E710D2.6060707@refractions.net>
References: <46E708FC.5090906@perkins.net> <46E710D2.6060707@refractions.net>
Message-ID: <46E7175C.2030908@perkins.net>

Thanks for the thoughts. A quick look at the NTS sourceforge page seems 
to suggest that it hasn't really been worked on in about a year, but 
maybe it includes the things I need... Anybody know how it compares 
performance wise with GEOS?

Another option would be to add the isValid() member to the OGR bindings 
- I might try that and see whether the OGR people want it in there. Of 
course the question then is what do I actually do if the geometry turns 
out to be "invalid" when I know that the methods I used to create it 
should have produced a correct geometry...

BTW, does anyone know what a "side location conflict" actually is? I 
looked at the code but it wasn't obvious to me...

Cheers,

Sy


Martin Davis wrote:
> A couple of things:
>
> You might also try looking at the Net Topology Suite, which is a port 
> of JTS to C# (just like GEOS is a port to C++).  HOWEVER, this is a 
> fork of JTS, and I don't know how current or active it is.  (It might 
> be nice thing for JTS to offer an official .NET compatible version....)
>
> You can also try compiling JTS under J#.  It mostly all works - there 
> might be a few simple utility classes you have to supply.
>
> As for your topology problems, this might be cause by invalid input 
> data, or it might be caused by robustness errors in the computation 
> itself.  The most recent version of GEOS has some substantial 
> improvements in robustness for overlay ops, so you should try it and 
> see if it fixes your problem.  (At a very high level this is doing 
> something similar to your concept of "cleaning up" the geometries to 
> avoid the problems - but it's probably not something you want to try 
> at home  8^)
>
> Another note - if you are unioning many polygons together, JTS is just 
> adding an optimized function to do this efficiently, and hopefully 
> this will make it in GEOS in due course.
>
> Simon Perkins wrote:
>> Hi,
>>
>> Are there any C# bindings for GEOS out there?
>>
>> We've been using the OGR interface to GEOS (which are exposed by the 
>> OGR C# bindings), but are running into some strange topology 
>> exceptions (side location conflicts and non-nodal intersections) and 
>> I'd like to use the GEOS isValid() method which is not exposed by 
>> OGR, AFAIK. Might using the GEOS library directly be more efficient 
>> than going through OGR as well?
>>
>> In general, is there an easy way to "clean up" a geometry so it won't 
>> raise these kinds of exceptions? The geometries in question are all 
>> generated by the union of (many) simple polygons.
>>
>> Anyway, I could go off and roll PInvoke stubs for the GEOS functions 
>> I need in not much time, but I figured I'd see what other people have 
>> already before I do that. Any interest in adding such bindings to 
>> geos? I could also take a look at SWIG, but it always scares me for 
>> some reason...
>>
>> Cheers,
>>
>> Sy
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>
>


From cfis at savagexi.com  Tue Sep 11 19:04:45 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E7175C.2030908@perkins.net>
References: <46E708FC.5090906@perkins.net> <46E710D2.6060707@refractions.net>
	<46E7175C.2030908@perkins.net>
Message-ID: <46E71F0D.7030107@savagexi.com>

> Another option would be to add the isValid() member to the OGR bindings 
> - I might try that and see whether the OGR people want it in there.

That should be easy enough to do.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070911/6958c4b2/smime.bin
From mbdavis at refractions.net  Tue Sep 11 19:00:00 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E7175C.2030908@perkins.net>
References: <46E708FC.5090906@perkins.net> <46E710D2.6060707@refractions.net>
	<46E7175C.2030908@perkins.net>
Message-ID: <46E71DF0.7010007@refractions.net>



Simon Perkins wrote:
> Thanks for the thoughts. A quick look at the NTS sourceforge page 
> seems to suggest that it hasn't really been worked on in about a year, 
> but maybe it includes the things I need... Anybody know how it 
> compares performance wise with GEOS?
No idea.  It might well be faster - GEOS suffers from C's slow memory 
allocation, I think. 
>
> Another option would be to add the isValid() member to the OGR 
> bindings - I might try that and see whether the OGR people want it in 
> there. Of course the question then is what do I actually do if the 
> geometry turns out to be "invalid" when I know that the methods I used 
> to create it should have produced a correct geometry...
Well, if your *input* data is invalid according to isValid, you *have* 
to fix your process that is producing the input data.  GEOS has to have 
correct data (according to its model) to work.
>
> BTW, does anyone know what a "side location conflict" actually is? I 
> looked at the code but it wasn't obvious to me...
It means that during the GEOS processing something caused the 
topological data structures that are used to become internally 
inconsistent.  This could be due to invalid input, or often it's due to 
the noding process used internally not quite computing a fully correct 
noding (which is surprisingly difficult to guarantee...)

In any case, it doesn't matter to you - it doesn't really give you any 
information which can help you. 

One thing that does cause this sometimes is input data with too much 
precision.  If your input numbers look like this:  1234.2345678934 
rather than this: 1234.67 then you are probably carrying far more 
precision than the accuracy of your data.  If you can round off your 
inputs to a reasonable level of precision (eg. 8 digits rather than 16) 
you may get better results.  Unfortunately, tis is not always easy to 
do, since rounding often introduces topology collapses, which cause the 
rounded geometry to be invalid.  (This is why JTS/GEOS provide the 
option of specifying a precision model for computation, to avoid 
creating too many digits of precision every time two lines are intersected).

HTH - Martin
>
> Cheers,
>
> Sy
>
>
> Martin Davis wrote:
>> A couple of things:
>>
>> You might also try looking at the Net Topology Suite, which is a port 
>> of JTS to C# (just like GEOS is a port to C++).  HOWEVER, this is a 
>> fork of JTS, and I don't know how current or active it is.  (It might 
>> be nice thing for JTS to offer an official .NET compatible version....)
>>
>> You can also try compiling JTS under J#.  It mostly all works - there 
>> might be a few simple utility classes you have to supply.
>>
>> As for your topology problems, this might be cause by invalid input 
>> data, or it might be caused by robustness errors in the computation 
>> itself.  The most recent version of GEOS has some substantial 
>> improvements in robustness for overlay ops, so you should try it and 
>> see if it fixes your problem.  (At a very high level this is doing 
>> something similar to your concept of "cleaning up" the geometries to 
>> avoid the problems - but it's probably not something you want to try 
>> at home  8^)
>>
>> Another note - if you are unioning many polygons together, JTS is 
>> just adding an optimized function to do this efficiently, and 
>> hopefully this will make it in GEOS in due course.
>>
>> Simon Perkins wrote:
>>> Hi,
>>>
>>> Are there any C# bindings for GEOS out there?
>>>
>>> We've been using the OGR interface to GEOS (which are exposed by the 
>>> OGR C# bindings), but are running into some strange topology 
>>> exceptions (side location conflicts and non-nodal intersections) and 
>>> I'd like to use the GEOS isValid() method which is not exposed by 
>>> OGR, AFAIK. Might using the GEOS library directly be more efficient 
>>> than going through OGR as well?
>>>
>>> In general, is there an easy way to "clean up" a geometry so it 
>>> won't raise these kinds of exceptions? The geometries in question 
>>> are all generated by the union of (many) simple polygons.
>>>
>>> Anyway, I could go off and roll PInvoke stubs for the GEOS functions 
>>> I need in not much time, but I figured I'd see what other people 
>>> have already before I do that. Any interest in adding such bindings 
>>> to geos? I could also take a look at SWIG, but it always scares me 
>>> for some reason...
>>>
>>> Cheers,
>>>
>>> Sy
>>>
>>> _______________________________________________
>>> geos-devel mailing list
>>> geos-devel@geos.refractions.net
>>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>>
>>
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From abhay.menon at gmail.com  Tue Sep 11 23:44:10 2007
From: abhay.menon at gmail.com (abhay menon)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] C# Bindings?
In-Reply-To: <46E7175C.2030908@perkins.net>
References: <46E708FC.5090906@perkins.net> <46E710D2.6060707@refractions.net>
	<46E7175C.2030908@perkins.net>
Message-ID: <7a30cd70709112044y409a4166lede81991edf892dc@mail.gmail.com>

Hi Sy,


On 9/12/07, Simon Perkins <sy@perkins.net> wrote:
>
> Thanks for the thoughts. A quick look at the NTS sourceforge page seems
> to suggest that it hasn't really been worked on in about a year, but
> maybe it includes the things I need... Anybody know how it compares
> performance wise with GEOS?
>
FYI
The newer version of the NTS is available at
http://code.google.com/p/nettopologysuite/ (eventhough the development on
this has been at a low end for past one year). I use the same in C#, as to
GEOS in C/C++. Have not made any comparision about performance part of it
yet, but it works well for me.

Regards
Abhay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070912/0651f903/attachment.html
From cfis at savagexi.com  Wed Sep 12 19:39:01 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Assertion Failure with VC++ and STRtree:yComparator
In-Reply-To: <46D3C1C7.7060606@savagexi.com>
References: <46D3C1C7.7060606@savagexi.com>
Message-ID: <46E87895.2090005@savagexi.com>

Following up on my email from a couple weeks ago.

Any opinions?  What is now checked in is broken in debug builds for VC++ 
which I think is unacceptable (makes it a lot hard to run GEOS under the 
VC++ or WinDebug debuggers).

I want to revert to strk's original version ... but his comments worry me.

Charlie

Charlie Savage wrote:
> There appears to be a fairly serious issue with the trunk version of 
> GEOS with STRtree:yComparator(Boundable *a, Boundable *b).
> 
> There are various comments from mloskot and strk about how the 
> comparison should work.  Choices seem to be:
> 
>     return STRtree::centreY(aEnv) < STRtree::centreY(bEnv);
> 
> Or
> 
> return std::fabs( STRtree::centreY(aEnv) - STRtree::centreY(bEnv) ) < 1e-30
> 
> 
> Currently, the second option is used.  But on Windows, using a debug 
> VC++ build, that is almost guaranteed to cause an assertion failure. 
> VC++ has code in xutility that checks the comparison in both directions:
> 
> template<class _Pr, class _Ty1, class _Ty2> inline
>     bool __CLRCALL_OR_CDECL _Debug_lt_pred(_Pr _Pred, _Ty1& _Left, _Ty2& 
> _Right,
>         const wchar_t *_Where, unsigned int _Line)
>     {    // test if _Pred(_Left, _Right) and _Pred is strict weak ordering
>     if (!_Pred(_Left, _Right))
>         return (false);
>     else if (_Pred(_Right, _Left))
>         _DEBUG_ERROR2("invalid operator<", _Where, _Line);
>     return (true);
>     }
> 
> Assume the centers of the two envelopes are equivalent - that will 
> trigger the 2nd part of the if statement causing an assertion failure.
> 
> Can this be fixed so that the comparison works as expected?  The first 
> version does the trick, but strk wrote some scary comments that it 
> corrupts memory in some cases (although with a quick glance I don't see 
> how).
> 
> Thanks,
> 
> Charlie
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070912/07e397a5/smime.bin
From cfis at savagexi.com  Thu Sep 13 00:21:14 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
Message-ID: <46E8BABA.7080208@savagexi.com>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070912/7d114908/smime.bin
From warmerdam at pobox.com  Thu Sep 13 09:48:05 2007
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <46E8BABA.7080208@savagexi.com>
References: <46E8BABA.7080208@savagexi.com>
Message-ID: <46E93F95.9060403@pobox.com>

Charlie Savage wrote:
> The second issue is more important.  This would change the wkb output 
> format to match PostGis - will this cause problems?  GEOS already uses 
> an extended WKB format by including dimension information, so its hard 
> to argue its any less OGC compliant.  Also, this would only be different 
> for geometries that actually do have SRID values.

Charlie,

I do not believe the WKB writer should write SRIDs into the WKB stream
by default.  It will certainly break GDAL's use of GEOS!  And it just
isn't part of the specification.

> If this is a big issue, then a writeSRID flag could be added to the 
> WKBWriter.  But then you'd have to expose the flag via the CAPI - maybe 
> something like this:
> 
> extern char GEOS_DLL GEOS_getWriteSRID();
> extern char GEOS_DLL GEOS_setWriteSRID(char value);

Why char?  Why not an integer boolean?

I must say I hate the way the GEOS C API uses static state in the library
for stuff like byte order and output dimensions and I hate to perpetuate
this.  This is a threading risk especially in situations where different
parts of an application are using GEOS can cannot easily cooperate with
locks.  This is the sort of problem my clients are running into more and
more with libraries like GEOS, PROJ.4, etc.

I'd like to see an extension to the C API adding:

GEOSGeomToHEX_bufWithOpts( const GEOSGeometry *g, size_t *size,
                            int byteOrder, int includeSRID,
                            int outpuDimension );

or perhaps, merge the options into a bitfield so we can easily
add new bitfield values in the future without changing the C
API which needs to be quite static.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org


From cfis at savagexi.com  Thu Sep 13 12:38:55 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <46E93F95.9060403@pobox.com>
References: <46E8BABA.7080208@savagexi.com> <46E93F95.9060403@pobox.com>
Message-ID: <46E9679F.9090901@savagexi.com>

> 
>> If this is a big issue, then a writeSRID flag could be added to the 
>> WKBWriter.  But then you'd have to expose the flag via the CAPI - 
>> maybe something like this:
>>
>> extern char GEOS_DLL GEOS_getWriteSRID();
>> extern char GEOS_DLL GEOS_setWriteSRID(char value);
> 
> Why char?  Why not an integer boolean?

Just following the standard already set in the C API (see isValid, 
isSimple, isRing, etc.).
> 
> I must say I hate the way the GEOS C API uses static state in the library
> for stuff like byte order and output dimensions and I hate to perpetuate
> this.  This is a threading risk especially in situations where different
> parts of an application are using GEOS can cannot easily cooperate with
> locks.  This is the sort of problem my clients are running into more and
> more with libraries like GEOS, PROJ.4, etc.

I agree - but that's separate thing, no?  The right solution is expose 
the reader/writers to the capi so you can create one and then use it.

> I'd like to see an extension to the C API adding:
> 
> GEOSGeomToHEX_bufWithOpts( const GEOSGeometry *g, size_t *size,
>                            int byteOrder, int includeSRID,
>                            int outpuDimension );

Yes, that would be better than the current api.  But really all the 
writer methods (toWkt, toWkb, toHex) should work like that (with 
different options for toWkt, just srid I think).

If we could start from scratch, you'd change those 3 methods and get rid 
of these 4:

extern int GEOS_DLL GEOS_getWKBOutputDims();
extern int GEOS_DLL GEOS_setWKBOutputDims(int newDims);

extern int GEOS_DLL GEOS_getWKBByteOrder();
extern int GEOS_DLL GEOS_setWKBByteOrder(int byteOrder);

Which would make for a more compact, and bettter, api.


> or perhaps, merge the options into a bitfield so we can easily
> add new bitfield values in the future without changing the C
> API which needs to be quite static.

Are there going to be other options besides those 3 (byte order, include 
srid, output dimension)?

So your conclusion is add in 3 new methods (toWktWithOpts, 
toWkbWithOpts, toHexWithOpts) and deprecate the original 3 methods and 
the 4 above)?

Is the geos 3.0 capi still backwards compatible with the 2.x apis?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070913/9341c2c8/smime.bin
From cfis at savagexi.com  Thu Sep 13 12:46:08 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <46E9679F.9090901@savagexi.com>
References: <46E8BABA.7080208@savagexi.com> <46E93F95.9060403@pobox.com>
	<46E9679F.9090901@savagexi.com>
Message-ID: <46E96950.4090908@savagexi.com>

> I agree - but that's separate thing, no?  The right solution is expose 
> the reader/writers to the capi so you can create one and then use it.
> 
>> I'd like to see an extension to the C API adding:
>>
>> GEOSGeomToHEX_bufWithOpts( const GEOSGeometry *g, size_t *size,
>>                            int byteOrder, int includeSRID,
>>                            int outpuDimension );

Thinking about this more, maybe the better way to do this is give the 
caller more control:

GEOSWkbWriter GEOSWkbWriter_create(int byteOrder, int includeSRID,  int 
outpuDimension);

void GEOSWkbWriter GEOSWkbWriter_destroy(GEOSWkbWriter writer);

extern unsigned char GEOSWkbWriter_write(const GEOSGeometry *g, size_t 
*size);

extern unsigned char GEOSWkbWriter_writeHex(const GEOSGeometry *g, 
size_t *size);

And similar for the WktWriter.  And really the same for WkbReader/WktReader.

The advantage of this is a client can create and cache their own 
reader/writers without having to create a new one every time.  Thus this 
avoids the static issue you mentioned, but doesn't force creation of new 
readers and writers every time you want to use one (which for my app, is 
  *alot*).

Thus, this is the approach that I prefer.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070913/3d6ccae5/smime.bin
From warmerdam at pobox.com  Thu Sep 13 13:47:31 2007
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <46E9679F.9090901@savagexi.com>
References: <46E8BABA.7080208@savagexi.com> <46E93F95.9060403@pobox.com>
	<46E9679F.9090901@savagexi.com>
Message-ID: <46E977B3.8090307@pobox.com>

Charlie Savage wrote:
>> Why char?  Why not an integer boolean?
> 
> Just following the standard already set in the C API (see isValid, 
> isSimple, isRing, etc.).

Charlie,

Ah, I hadn't noticed that. An odd choice in the first place IMHO.

>> I must say I hate the way the GEOS C API uses static state in the library
>> for stuff like byte order and output dimensions and I hate to perpetuate
>> this.  This is a threading risk especially in situations where different
>> parts of an application are using GEOS can cannot easily cooperate with
>> locks.  This is the sort of problem my clients are running into more and
>> more with libraries like GEOS, PROJ.4, etc.
> 
> I agree - but that's separate thing, no?  The right solution is expose 
> the reader/writers to the capi so you can create one and then use it.

It is seperate from srid issue to be sure. I had not actually realized
about the statefulness of the towkb function before looking at your
suggestions.

>> I'd like to see an extension to the C API adding:
>>
>> GEOSGeomToHEX_bufWithOpts( const GEOSGeometry *g, size_t *size,
>>                            int byteOrder, int includeSRID,
>>                            int outpuDimension );
> 
> Yes, that would be better than the current api.  But really all the 
> writer methods (toWkt, toWkb, toHex) should work like that (with 
> different options for toWkt, just srid I think).

Agreed.

> If we could start from scratch, you'd change those 3 methods and get rid 
> of these 4:
> 
> extern int GEOS_DLL GEOS_getWKBOutputDims();
> extern int GEOS_DLL GEOS_setWKBOutputDims(int newDims);
> 
> extern int GEOS_DLL GEOS_getWKBByteOrder();
> extern int GEOS_DLL GEOS_setWKBByteOrder(int byteOrder);
> 
> Which would make for a more compact, and bettter, api.
> 
>> or perhaps, merge the options into a bitfield so we can easily
>> add new bitfield values in the future without changing the C
>> API which needs to be quite static.
> 
> Are there going to be other options besides those 3 (byte order, include 
> srid, output dimension)?
> 
> So your conclusion is add in 3 new methods (toWktWithOpts, 
> toWkbWithOpts, toHexWithOpts) and deprecate the original 3 methods and 
> the 4 above)?

This would be my suggestion.  I'd add that a primary goal of the C API
is stability so even if we deprecate the old API we should keep it
around (perhaps undocumented) for a long long time.

> Is the geos 3.0 capi still backwards compatible with the 2.x apis?

I'm not aware of any changes in the 3.0 api that break 2.0 applications.
At least not the ones I use. :-)

So, how do we decide how to proceed lacking a PSC and RFC process?  Perhaps
Paul (or do we have a current chief developer?) can bless the proposal?

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org


From cfis at savagexi.com  Thu Sep 13 13:45:45 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <46E977B3.8090307@pobox.com>
References: <46E8BABA.7080208@savagexi.com>
	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>
	<46E977B3.8090307@pobox.com>
Message-ID: <46E97749.1020206@savagexi.com>

> So, how do we decide how to proceed lacking a PSC and RFC process?  Perhaps
> Paul (or do we have a current chief developer?) can bless the proposal?

Good question.  I have a couple of other things also in the queue that 
need official blessing (or rejection) - the sort bug and my suggestion 
to add coordinates to the c api.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070913/beb702af/smime.bin
From pramsey at refractions.net  Thu Sep 13 11:28:18 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <46E8BABA.7080208@savagexi.com>
References: <46E8BABA.7080208@savagexi.com>
Message-ID: <AC44F7F4-5307-4D8F-ABF9-E8B98F9FE72C@refractions.net>


On 12-Sep-07, at 9:21 PM, Charlie Savage wrote:

> The first is fairly minor - how do we know when an SRID is set?  By  
> default a GEOS geometry has an SRID value of 0.  But the WKBReader  
> sets it to -1 if the WKB string does not have an SRID.  I checked  
> the spatial_ref_sys table in PostGIS and the first SRID has a value  
> of 2000.  Thus, I think 0 is reasonable default and WKBReader  
> should change to use zero also instead of -1.

PostGIS uses -1 as the default "unknown" SRID. Unfortunately, ISO  
uses 0.  So we remain tempted to flip to 0. It is the one of the  
major "breaking" changes we would have to do to get to SQL/MM  
conformance (the others are changing the type numbers for ZM geometry  
variants in AsBinary).

> The second issue is more important.  This would change the wkb  
> output format to match PostGis - will this cause problems?  GEOS  
> already uses an extended WKB format by including dimension  
> information, so its hard to argue its any less OGC compliant.   
> Also, this would only be different for geometries that actually do  
> have SRID values.

Are we suffering a terminology breakdown here? You're talking about  
SRID in WKB, but the WKB spec doesn't include SRID.  Only the EWKB  
implementation, which is our own concoction, does that.  As long as  
the changes don't end up breaking the standards compliant WKB output,  
things should be OK... I wonder what others think?

P



From cfis at savagexi.com  Thu Sep 13 23:39:42 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <AC44F7F4-5307-4D8F-ABF9-E8B98F9FE72C@refractions.net>
References: <46E8BABA.7080208@savagexi.com>
	<AC44F7F4-5307-4D8F-ABF9-E8B98F9FE72C@refractions.net>
Message-ID: <46EA027E.2070205@savagexi.com>

> PostGIS uses -1 as the default "unknown" SRID. Unfortunately, ISO uses 
> 0.  So we remain tempted to flip to 0. It is the one of the major 
> "breaking" changes we would have to do to get to SQL/MM conformance (the 
> others are changing the type numbers for ZM geometry variants in AsBinary).

Since GEOS generally seems to use 0, how about we stick to that?

> Are we suffering a terminology breakdown here? You're talking about SRID 
> in WKB, but the WKB spec doesn't include SRID.  Only the EWKB 
> implementation, which is our own concoction, does that.  As long as the 
> changes don't end up breaking the standards compliant WKB output, things 
> should be OK... I wonder what others think?

Yes, understood.  Except GEOS's wkb output also includes dimension 
information.  That's not part of the original WKB spec, but I see hints 
that it was later added (although I've never actually seen the document).

I think what Frank and I were thinking about is the way to go - keep WKB 
the same by default but let clients change settings if necessary.  Since 
GEOS is used extensively with PostGIS, it sure would be helpful for it 
to also support EWKB fully.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070913/be3e2391/smime.bin
From cfis at savagexi.com  Fri Sep 14 11:56:59 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <46E977B3.8090307@pobox.com>
References: <46E8BABA.7080208@savagexi.com>
	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>
	<46E977B3.8090307@pobox.com>
Message-ID: <46EAAF4B.4000305@savagexi.com>

Skipped content of type multipart/mixed-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070914/91b89dad/smime.bin
From cfis at savagexi.com  Fri Sep 14 11:58:20 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS and Writing SRID values
In-Reply-To: <AC44F7F4-5307-4D8F-ABF9-E8B98F9FE72C@refractions.net>
References: <46E8BABA.7080208@savagexi.com>
	<AC44F7F4-5307-4D8F-ABF9-E8B98F9FE72C@refractions.net>
Message-ID: <46EAAF9C.1000307@savagexi.com>

> 
> PostGIS uses -1 as the default "unknown" SRID. Unfortunately, ISO uses 
> 0.  So we remain tempted to flip to 0. It is the one of the major 
> "breaking" changes we would have to do to get to SQL/MM conformance (the 
> others are changing the type numbers for ZM geometry variants in AsBinary).

Ok, I updated WkbReader to set the SRID to 0 (instead of -1) when it is 
not included in the EWKB/HEX value.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070914/76664319/smime.bin
From ari.jolma at tkk.fi  Sat Sep 15 07:09:43 2007
From: ari.jolma at tkk.fi (Ari Jolma)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] --disable-swig does not work in geos-3.0.0rc4
Message-ID: <46EBBD77.9060802@tkk.fi>

Hello,

Despite of issuing --disable-swig and --disable-python the configure 
ended in a complaint that I don't have python.

I ripped the python tests out of configure and then built GEOS, which 
seems to work fine.

Also the timeval.h bugs in MSYS but that's probably fixed in repository 
(as per an earlier message to this list)

A question: In a message in postgis-user I saw warnings like:

NOTICE: Self-intersection at or near point 1.01727e+06 886743

I'm using GEOS through GDAL, which sets its own warning function and the 
warnings come out without the "near point ...", which would be useful. 
Anybody have an idea how to make it so?

Regards,

Ari

-- 
Prof. Ari Jolma
Geoinformaatio- ja paikannustekniikka / Geoinformation and positioning
Teknillinen Korkeakoulu / Helsinki University of Technology
tel: +358 9 451 3886 address: POBox 1200, 02015 TKK, Finland
Email: ari.jolma at tkk.fi URL: http://www.tkk.fi/~jolma



From cfis at savagexi.com  Sun Sep 16 13:42:54 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] --disable-swig does not work in geos-3.0.0rc4
In-Reply-To: <46EBBD77.9060802@tkk.fi>
References: <46EBBD77.9060802@tkk.fi>
Message-ID: <46ED6B1E.9090509@savagexi.com>

Hi Ari,

> Despite of issuing --disable-swig and --disable-python the configure 
> ended in a complaint that I don't have python.

Did you try the latest trunk version?  Mark and I did some work on this 
a couple weeks ago.

> Also the timeval.h bugs in MSYS but that's probably fixed in repository 
> (as per an earlier message to this list)

Yes - we also tried fixing this.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070916/8c56257d/smime.bin
From ari.jolma at tkk.fi  Mon Sep 17 11:09:34 2007
From: ari.jolma at tkk.fi (Ari Jolma)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] --disable-swig does not work in geos-3.0.0rc4
In-Reply-To: <46ED6B1E.9090509@savagexi.com>
References: <46EBBD77.9060802@tkk.fi> <46ED6B1E.9090509@savagexi.com>
Message-ID: <46EE98AE.3030404@tkk.fi>

Charlie Savage kirjoitti:
> Hi Ari,
>
>> Despite of issuing --disable-swig and --disable-python the configure 
>> ended in a complaint that I don't have python.
>
> Did you try the latest trunk version?  Mark and I did some work on 
> this a couple weeks ago.
>

no I used the latest tarball from the web, good to hear it's already fixed

Ari

-- 
Prof. Ari Jolma
Geoinformaatio- ja paikannustekniikka / Geoinformation and positioning
Teknillinen Korkeakoulu / Helsinki University of Technology
tel: +358 9 451 3886 address: POBox 1200, 02015 TKK, Finland
Email: ari.jolma at tkk.fi URL: http://www.tkk.fi/~jolma



From rblatt at warmlyyours.com  Tue Sep 18 18:35:43 2007
From: rblatt at warmlyyours.com (Ramie Blatt)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] swig/ruby: how do you access functionality like
	transform in geos::geom::util::GeometryTransformer?
Message-ID: <IBEOLPFKPGKOCMNLFKAFIEGEEBAA.rblatt@warmlyyours.com>

Hi there,

First, thanks to Charlie Savage, and the other GEOS developers, for the
great work, especially in making GEOS available through ruby. It's pretty
much the only robust geometry solution for ruby that I've found.

I'm using GEOS with the ruby SWIG bindings and have been happily working
with the GEOS code without a problem until recently when I needed to
translate and transform the coordinates of  polygons.

How do you access functionality like transform in
geos::geom::util::GeometryTransformer? This may be a bit of a newbie
question, but I've spent a long time digging through the swig stuff and the
docs and I just can't find it.

The development environment I'm using is an ubuntu 6.06 LTS linux vmware
virtual machine (i486-linux-gnu), ruby 1.8.4, rails 1.1.6, and built from
source using the geos-3.0.0rc2.tar.bz2 release compiling with gcc 4.0.3. The
tests in swig/ruby/test/ seem to work fine.

Thanks,
Ramie Blatt


From ssides at usgs.gov  Tue Sep 18 22:37:47 2007
From: ssides at usgs.gov (Stuart C Sides)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] no outgoing dirEdge found error
Message-ID: <OF309F7020.7FBA9B75-ON0725735B.00072AF0-0725735B.000E7287@usgs.gov>

Hi GEOS devels,

We are writing a C++ application which is looking for areas of overlap 
between 1000's  of polygons. The app is being
developed on Linux with g++ 4.1.0.

We first tried the stable release of GEOS 2.2.3 and received this error 
after processing several polygons:

    TopologyException: found non-noded intersection between 87.9595 
-40.3145, 87.9484 -40.2598 and 87.9857 -40.3126, 87.9575 -40.3146 87.9595 
-40.3145

While reviewing the list archives we found references to major code 
changes that might fix some of these errors, so we
upgraded to RC3 and eventually to an SVN version from 2007-09-18. We got 
through a lot more polygons without errors,
but finally received this error:

    TopologyException: no outgoing dirEdge found 87.957 -40.1615

Note: this coordinate is from the first segment of the second polygon of 
the first multi-polygon below.

In the original code, before I converted the multipolygons to strings to 
create the example, we received this error:

    TopologyException: no outgoing dirEdge found 87.7184 -40.3315

Note: this coordinate is from the first segment of the second 
multi-polygon below:

I've boiled the error down to just a few lines of code, and would 
appreciate any suggestions.  The error is thrown at the 
difference.

Thanks
Stuart



#include <string>
#include <iostream>

#include <geos/geom/PrecisionModel.h>
#include <geos/geom/GeometryFactory.h>
#include <geos/geom/Geometry.h>
#include <geos/geom/MultiPolygon.h>
#include <geos/io/WKTReader.h>

int main (int argc, char *argv[])
{
  std::string mp1s = "MULTIPOLYGON (((88.0541300495810049 
-40.3914336120775417,"
    " 88.0013586636740683 -40.3952580652168507,"
    " 87.9856522556763849 -40.3125682141688557,"
    " 88.0410955427405639 -40.3084853410231361,"
    " 88.0447770149226727 -40.3320733430391556,"
    " 88.0541300495810049 -40.3914336120775417)),"
    " ((87.9569549228361041 -40.1614847724049824,"
    " 87.9856522556763849 -40.3125682141688557,"
    " 87.9594803530699494 -40.3144955269957563,"
    " 87.9484023890450430 -40.2597855714132962,"
    " 87.9236385364479673 -40.1638760511710515,"
    " 87.9569549228361041 -40.1614847724049824)))";

  std::string mp2s = "MULTIPOLYGON (((87.7184147523609425 
-40.3314878875577705,"
    " 87.7106409229361930 -40.2916861830969211,"
    " 87.6363928113999862 -39.9074815079801084,"
    " 87.8588765594887349 -39.8933226300382628,"
    " 88.3245648150878964 -39.8616404104367064,"
    " 88.3252910982550503 -39.8653834273614933,"
    " 88.4058355104796334 -40.2774282017416283,"
    " 88.4066631207306273 -40.2815647501607259,"
    " 87.9574816223991007 -40.3146427145853394,"
    " 87.7184147523609425 -40.3314878875577705)))";

  try {
    geos::geom::PrecisionModel *model = 
        new 
geos::geom::PrecisionModel(geos::geom::PrecisionModel::FLOATING);
    geos::geom::GeometryFactory *factory = new 
geos::geom::GeometryFactory(model);

    geos::io::WKTReader *wkt = new geos::io::WKTReader();
    geos::geom::MultiPolygon *mp1 = (geos::geom::MultiPolygon 
*)wkt->read(mp1s);
    geos::geom::MultiPolygon *mp2 = (geos::geom::MultiPolygon 
*)wkt->read(mp2s);

    std::cout << "Is valid of one = " << mp1->isValid() << std::endl;
    std::cout << "Is valid of two = " << mp2->isValid() << std::endl;

    geos::geom::Geometry *diff = mp1->difference(mp2); 

    std::cout << mp1->toString() << std::endl;
    std::cout << mp2->toString() << std::endl;
    std::cout << diff->toString() << std::endl;

  }
  catch (std::exception const &se) {
    std::cout << "ERROR - " << se.what() << std::endl;
  }
  catch (...) {
    std::cout << "General error" << std::endl;
  }

}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070918/b11031a5/attachment.html
From cfis at savagexi.com  Tue Sep 18 23:50:54 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] swig/ruby: how do you access functionality like
	transform in geos::geom::util::GeometryTransformer?
In-Reply-To: <IBEOLPFKPGKOCMNLFKAFIEGEEBAA.rblatt@warmlyyours.com>
References: <IBEOLPFKPGKOCMNLFKAFIEGEEBAA.rblatt@warmlyyours.com>
Message-ID: <46F09C9E.8070402@savagexi.com>

Hi Ramie,

> How do you access functionality like transform in
> geos::geom::util::GeometryTransformer?

I don't think this functionality is exposed through the C API, and thus 
isn't exposed in the SWIG bindings anymore.

Not sure if not having it in the C API is intentional or an oversight.


Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070918/b933f38d/smime.bin
From cfis at savagexi.com  Tue Sep 18 23:51:35 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <46EAAF4B.4000305@savagexi.com>
References: <46E8BABA.7080208@savagexi.com>
	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>
	<46E977B3.8090307@pobox.com> <46EAAF4B.4000305@savagexi.com>
Message-ID: <46F09CC7.6050606@savagexi.com>

So - any comments on this.  Will people get upset if I commit it (which 
I would like to do)?

Charlie

Charlie Savage wrote:
> I've attached a patch that implements what we discussed yesterday.
> 
> More specifically:
> 
> * It updates WkbWriter to support outputting SRID values in EWKB/HEX 
> format.  This is off by default so is backwards compatible.
> 
> * Adds getter/setter methods for byte order, dimensions and include SRID 
> to WkbWriter - these are needed for the C API changes below.
> 
> * Adds new C API interfaces for WktReader, WktWriter, WkbReader, 
> WkbWriter.  These were added to the end of the *.h file and I did not 
> change any existing C apis - so this should be backwards compatible.
> 
> Here is what the new WkbWriter interface, which is the most complicated 
> one, looks like:
> 
> extern GEOSWKBWriter GEOS_DLL *GEOSWKBWriter_create();
> extern void GEOS_DLL GEOSWKBWriter_destroy(GEOSWKBWriter* writer);
> 
> extern unsigned char GEOS_DLL *GEOSWKBWriter_write(GEOSWKBWriter* 
> writer, const GEOSGeometry* g, size_t *size);
> extern unsigned char GEOS_DLL *GEOSWKBWriter_writeHEX(GEOSWKBWriter* 
> writer, const GEOSGeometry* g, size_t *size);
> 
> extern int GEOS_DLL GEOSWKBWriter_getOutputDimension(const 
> GEOSWKBWriter* writer);
> extern void GEOS_DLL GEOSWKBWriter_setOutputDimension(GEOSWKBWriter* 
> writer, int newDimension);
> 
> extern int GEOS_DLL GEOSWKBWriter_getByteOrder(const GEOSWKBWriter* 
> writer);
> extern void GEOS_DLL GEOSWKBWriter_setByteOrder(GEOSWKBWriter* writer, 
> int byteOrder);
> 
> extern char GEOS_DLL GEOSWKBWriter_getIncludeSRID(const GEOSWKBWriter* 
> writer);
> extern void GEOS_DLL GEOSWKBWriter_setIncludeSRID(GEOSWKBWriter* writer, 
> const char writeSRID);
> 
> Here is some example ruby code that uses the new api via SWIG:
> 
> writer = Geos::WktWriter.new
> writer.includes_srid = true
> writer.output_dimension = 3
> wkb = writer.write(geom)
> hex = writer.write_hex(geom)
> 
> The other readers/writers work similarly.
> 
> I think this is a better approach then the current API because:
> 
> 1.  It eliminates the need for the hacky static variables for byte order 
> and output dimensions
> 
> 2.  It gives the client more control - you can create a reader/writer 
> and reuse it instead of having a new one created every time you 
> read/write a geometry
> 
> 3.  Its more extensible.  For example, at some point we may wish that 
> the WktReader supports the EWKT format.  That would require doing this:
> 
> extern char GEOS_DLL GEOSWKTWriter_getIncludeSRID(const GEOSWKTWriter* 
> writer);
> extern void GEOS_DLL GEOSWKTWriter_setIncludeSRID(GEOSWKTWriter* writer, 
> const char writeSRID);
> 
> 
> So I think this patch meets my objectives (more client control, supports 
> outputting SRID values), Frank's objectives (get rid of static fields) 
> and Paul's (backwards compatible).
> 
> I also tested it by exposing the new API via SWIG and updating the 
> various Ruby tests I have.  So at least every new method has been 
> called/verified via a simple set of tests.
> 
> Comments?  If this looks ok, can I apply it?
> 
> Charlie
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070918/f8c0b2b4/smime.bin
From hobu.inc at gmail.com  Wed Sep 19 00:05:34 2007
From: hobu.inc at gmail.com (Howard Butler)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <46F09CC7.6050606@savagexi.com>
References: <46E8BABA.7080208@savagexi.com>
	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>
	<46E977B3.8090307@pobox.com> <46EAAF4B.4000305@savagexi.com>
	<46F09CC7.6050606@savagexi.com>
Message-ID: <3E57A71D-7C7E-45C9-B2E8-1C5C93B0057F@gmail.com>

Do we need to increment the API with these additions?  What policy  
did Sandro have going?

Howard

On Sep 18, 2007, at 10:51 PM, Charlie Savage wrote:

> So - any comments on this.  Will people get upset if I commit it  
> (which I would like to do)?
>
> Charlie
>
> Charlie Savage wrote:
>> I've attached a patch that implements what we discussed yesterday.
>> More specifically:
>> * It updates WkbWriter to support outputting SRID values in EWKB/ 
>> HEX format.  This is off by default so is backwards compatible.
>> * Adds getter/setter methods for byte order, dimensions and  
>> include SRID to WkbWriter - these are needed for the C API changes  
>> below.
>> * Adds new C API interfaces for WktReader, WktWriter, WkbReader,  
>> WkbWriter.  These were added to the end of the *.h file and I did  
>> not change any existing C apis - so this should be backwards  
>> compatible.
>> Here is what the new WkbWriter interface, which is the most  
>> complicated one, looks like:
>> extern GEOSWKBWriter GEOS_DLL *GEOSWKBWriter_create();
>> extern void GEOS_DLL GEOSWKBWriter_destroy(GEOSWKBWriter* writer);
>> extern unsigned char GEOS_DLL *GEOSWKBWriter_write(GEOSWKBWriter*  
>> writer, const GEOSGeometry* g, size_t *size);
>> extern unsigned char GEOS_DLL *GEOSWKBWriter_writeHEX 
>> (GEOSWKBWriter* writer, const GEOSGeometry* g, size_t *size);
>> extern int GEOS_DLL GEOSWKBWriter_getOutputDimension(const  
>> GEOSWKBWriter* writer);
>> extern void GEOS_DLL GEOSWKBWriter_setOutputDimension 
>> (GEOSWKBWriter* writer, int newDimension);
>> extern int GEOS_DLL GEOSWKBWriter_getByteOrder(const  
>> GEOSWKBWriter* writer);
>> extern void GEOS_DLL GEOSWKBWriter_setByteOrder(GEOSWKBWriter*  
>> writer, int byteOrder);
>> extern char GEOS_DLL GEOSWKBWriter_getIncludeSRID(const  
>> GEOSWKBWriter* writer);
>> extern void GEOS_DLL GEOSWKBWriter_setIncludeSRID(GEOSWKBWriter*  
>> writer, const char writeSRID);
>> Here is some example ruby code that uses the new api via SWIG:
>> writer = Geos::WktWriter.new
>> writer.includes_srid = true
>> writer.output_dimension = 3
>> wkb = writer.write(geom)
>> hex = writer.write_hex(geom)
>> The other readers/writers work similarly.
>> I think this is a better approach then the current API because:
>> 1.  It eliminates the need for the hacky static variables for byte  
>> order and output dimensions
>> 2.  It gives the client more control - you can create a reader/ 
>> writer and reuse it instead of having a new one created every time  
>> you read/write a geometry
>> 3.  Its more extensible.  For example, at some point we may wish  
>> that the WktReader supports the EWKT format.  That would require  
>> doing this:
>> extern char GEOS_DLL GEOSWKTWriter_getIncludeSRID(const  
>> GEOSWKTWriter* writer);
>> extern void GEOS_DLL GEOSWKTWriter_setIncludeSRID(GEOSWKTWriter*  
>> writer, const char writeSRID);
>> So I think this patch meets my objectives (more client control,  
>> supports outputting SRID values), Frank's objectives (get rid of  
>> static fields) and Paul's (backwards compatible).
>> I also tested it by exposing the new API via SWIG and updating the  
>> various Ruby tests I have.  So at least every new method has been  
>> called/verified via a simple set of tests.
>> Comments?  If this looks ok, can I apply it?
>> Charlie
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From pramsey at refractions.net  Wed Sep 19 00:54:33 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <3E57A71D-7C7E-45C9-B2E8-1C5C93B0057F@gmail.com>
References: <46E8BABA.7080208@savagexi.com>
	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>
	<46E977B3.8090307@pobox.com> <46EAAF4B.4000305@savagexi.com>
	<46F09CC7.6050606@savagexi.com>
	<3E57A71D-7C7E-45C9-B2E8-1C5C93B0057F@gmail.com>
Message-ID: <95A3027E-867E-48CE-A2DE-B2D85AA71893@refractions.net>

The readme on releasing spells out the policy if I recall correctly.
P

On 18-Sep-07, at 9:05 PM, Howard Butler wrote:

> Do we need to increment the API with these additions?  What policy  
> did Sandro have going?
>
> Howard
>
> On Sep 18, 2007, at 10:51 PM, Charlie Savage wrote:
>
>> So - any comments on this.  Will people get upset if I commit it  
>> (which I would like to do)?
>>
>> Charlie
>>
>> Charlie Savage wrote:
>>> I've attached a patch that implements what we discussed yesterday.
>>> More specifically:
>>> * It updates WkbWriter to support outputting SRID values in EWKB/ 
>>> HEX format.  This is off by default so is backwards compatible.
>>> * Adds getter/setter methods for byte order, dimensions and  
>>> include SRID to WkbWriter - these are needed for the C API  
>>> changes below.
>>> * Adds new C API interfaces for WktReader, WktWriter, WkbReader,  
>>> WkbWriter.  These were added to the end of the *.h file and I did  
>>> not change any existing C apis - so this should be backwards  
>>> compatible.
>>> Here is what the new WkbWriter interface, which is the most  
>>> complicated one, looks like:
>>> extern GEOSWKBWriter GEOS_DLL *GEOSWKBWriter_create();
>>> extern void GEOS_DLL GEOSWKBWriter_destroy(GEOSWKBWriter* writer);
>>> extern unsigned char GEOS_DLL *GEOSWKBWriter_write(GEOSWKBWriter*  
>>> writer, const GEOSGeometry* g, size_t *size);
>>> extern unsigned char GEOS_DLL *GEOSWKBWriter_writeHEX 
>>> (GEOSWKBWriter* writer, const GEOSGeometry* g, size_t *size);
>>> extern int GEOS_DLL GEOSWKBWriter_getOutputDimension(const  
>>> GEOSWKBWriter* writer);
>>> extern void GEOS_DLL GEOSWKBWriter_setOutputDimension 
>>> (GEOSWKBWriter* writer, int newDimension);
>>> extern int GEOS_DLL GEOSWKBWriter_getByteOrder(const  
>>> GEOSWKBWriter* writer);
>>> extern void GEOS_DLL GEOSWKBWriter_setByteOrder(GEOSWKBWriter*  
>>> writer, int byteOrder);
>>> extern char GEOS_DLL GEOSWKBWriter_getIncludeSRID(const  
>>> GEOSWKBWriter* writer);
>>> extern void GEOS_DLL GEOSWKBWriter_setIncludeSRID(GEOSWKBWriter*  
>>> writer, const char writeSRID);
>>> Here is some example ruby code that uses the new api via SWIG:
>>> writer = Geos::WktWriter.new
>>> writer.includes_srid = true
>>> writer.output_dimension = 3
>>> wkb = writer.write(geom)
>>> hex = writer.write_hex(geom)
>>> The other readers/writers work similarly.
>>> I think this is a better approach then the current API because:
>>> 1.  It eliminates the need for the hacky static variables for  
>>> byte order and output dimensions
>>> 2.  It gives the client more control - you can create a reader/ 
>>> writer and reuse it instead of having a new one created every  
>>> time you read/write a geometry
>>> 3.  Its more extensible.  For example, at some point we may wish  
>>> that the WktReader supports the EWKT format.  That would require  
>>> doing this:
>>> extern char GEOS_DLL GEOSWKTWriter_getIncludeSRID(const  
>>> GEOSWKTWriter* writer);
>>> extern void GEOS_DLL GEOSWKTWriter_setIncludeSRID(GEOSWKTWriter*  
>>> writer, const char writeSRID);
>>> So I think this patch meets my objectives (more client control,  
>>> supports outputting SRID values), Frank's objectives (get rid of  
>>> static fields) and Paul's (backwards compatible).
>>> I also tested it by exposing the new API via SWIG and updating  
>>> the various Ruby tests I have.  So at least every new method has  
>>> been called/verified via a simple set of tests.
>>> Comments?  If this looks ok, can I apply it?
>>> Charlie
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From marco.hugentobler at karto.baug.ethz.ch  Wed Sep 19 03:54:23 2007
From: marco.hugentobler at karto.baug.ethz.ch (Marco Hugentobler)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] editing of geos geometries
Message-ID: <200709190954.23079.marco.hugentobler@karto.baug.ethz.ch>

Dear geos devels,

I' m looking into implementing geometry edits with geos classes, e.g. moving, 
adding, deleting vertices from geometries. I noticed that there is no 
possibility to directly change individual vertices in geos::geom::Geometry 
interface. Is this correct or did I overlook something?
So I wonder what the best way is to implement such edits. Is it to 

-replace the whole geometry in case of a single vertex change?

-implement subclasses and change the vertex coordinates of the geos class from 
subclass?

-or is it possible to use/create filter classes for that purpose?

Thanks for your advice,
Marco

-- 
Dr. Marco Hugentobler
Institute of Cartography
ETH Zurich
marco.hugentobler@karto.baug.ethz.ch

From mbdavis at refractions.net  Wed Sep 19 11:57:59 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] editing of geos geometries
In-Reply-To: <200709190954.23079.marco.hugentobler@karto.baug.ethz.ch>
References: <200709190954.23079.marco.hugentobler@karto.baug.ethz.ch>
Message-ID: <46F14707.10600@refractions.net>

Generally geometries are intended to be value objects.  This is 
*especially important* in C/C++, because memory aliasing can kill you 
with bad pointer errors.

The approach in JTS is to use some helper classes such as GeometryEditor 
and GeometryTransformer to perform "vertex surgery".  Essentially they 
drill down thru a geometry, add or delete points or components, and then 
build a new geometry back up.  I'm not sure if these have been ported to 
GEOS.

It would probably also be nice to have some utility classes built on 
these to do things like change vertices, add vertices, and delete 
vertices.  I may look at adding these to JTS, and they'd be easy to port 
to GEOS.

IMO filters and subclasses should NOT be used to change geometries, 
since they can lead to aliasing problems.  The exception would be for 
things like afffine or projection transforms, where every coordinate in 
a geometry is changed.  In this case the developer can choose to modify 
a geometry in-place if he knows that it is not referred to elsewhere.

Marco Hugentobler wrote:
> Dear geos devels,
>
> I' m looking into implementing geometry edits with geos classes, e.g. moving, 
> adding, deleting vertices from geometries. I noticed that there is no 
> possibility to directly change individual vertices in geos::geom::Geometry 
> interface. Is this correct or did I overlook something?
> So I wonder what the best way is to implement such edits. Is it to 
>
> -replace the whole geometry in case of a single vertex change?
>
> -implement subclasses and change the vertex coordinates of the geos class from 
> subclass?
>
> -or is it possible to use/create filter classes for that purpose?
>
> Thanks for your advice,
> Marco
>
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From mbdavis at refractions.net  Wed Sep 19 14:55:25 2007
From: mbdavis at refractions.net (Martin Davis)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] no outgoing dirEdge found error
In-Reply-To: <OF309F7020.7FBA9B75-ON0725735B.00072AF0-0725735B.000E7287@usgs.gov>
References: <OF309F7020.7FBA9B75-ON0725735B.00072AF0-0725735B.000E7287@usgs.gov>
Message-ID: <46F1709D.7010201@refractions.net>

This computation works fine in the current version of JTS.  This may 
indicate a porting bug in GEOS, or a slightly different choice of 
tolerances.

This is a classic case which causes robustness problems - overlaying two 
geometries with linework which is almost coincident.

The only suggestion I can make is to reduce the precision of your data 
slightly in cases which fail.  Presumably your source data isn't 
actually accurate to 16 decimal places?   It could be a while before we 
can look at the GEOS code for this.

Stuart C Sides wrote:
>
> Hi GEOS devels,
>
> We are writing a C++ application which is looking for areas of overlap 
> between 1000's  of polygons. The app is being
> developed on Linux with g++ 4.1.0.
>
> We first tried the stable release of GEOS 2.2.3 and received this 
> error after processing several polygons:
>
>     TopologyException: found non-noded intersection between 87.9595 
> -40.3145, 87.9484 -40.2598 and 87.9857 -40.3126, 87.9575 -40.3146 
> 87.9595 -40.3145
>
> While reviewing the list archives we found references to major code 
> changes that might fix some of these errors, so we
> upgraded to RC3 and eventually to an SVN version from 2007-09-18. We 
> got through a lot more polygons without errors,
> but finally received this error:
>
>     TopologyException: no outgoing dirEdge found 87.957 -40.1615
>
> Note: this coordinate is from the first segment of the second polygon 
> of the first multi-polygon below.
>
> In the original code, before I converted the multipolygons to strings 
> to create the example, we received this error:
>
>     TopologyException: no outgoing dirEdge found 87.7184 -40.3315
>
> Note: this coordinate is from the first segment of the second 
> multi-polygon below:
>
> I've boiled the error down to just a few lines of code, and would 
> appreciate any suggestions.  The error is thrown at the
> difference.
>
> Thanks
> Stuart
>
>
>
> #include <string>
> #include <iostream>
>
> #include <geos/geom/PrecisionModel.h>
> #include <geos/geom/GeometryFactory.h>
> #include <geos/geom/Geometry.h>
> #include <geos/geom/MultiPolygon.h>
> #include <geos/io/WKTReader.h>
>
> int main (int argc, char *argv[])
> {
>   std::string mp1s = "MULTIPOLYGON (((88.0541300495810049 
> -40.3914336120775417,"
>     " 88.0013586636740683 -40.3952580652168507,"
>     " 87.9856522556763849 -40.3125682141688557,"
>     " 88.0410955427405639 -40.3084853410231361,"
>     " 88.0447770149226727 -40.3320733430391556,"
>     " 88.0541300495810049 -40.3914336120775417)),"
>     " ((87.9569549228361041 -40.1614847724049824,"
>     " 87.9856522556763849 -40.3125682141688557,"
>     " 87.9594803530699494 -40.3144955269957563,"
>     " 87.9484023890450430 -40.2597855714132962,"
>     " 87.9236385364479673 -40.1638760511710515,"
>     " 87.9569549228361041 -40.1614847724049824)))";
>
>   std::string mp2s = "MULTIPOLYGON (((87.7184147523609425 
> -40.3314878875577705,"
>     " 87.7106409229361930 -40.2916861830969211,"
>     " 87.6363928113999862 -39.9074815079801084,"
>     " 87.8588765594887349 -39.8933226300382628,"
>     " 88.3245648150878964 -39.8616404104367064,"
>     " 88.3252910982550503 -39.8653834273614933,"
>     " 88.4058355104796334 -40.2774282017416283,"
>     " 88.4066631207306273 -40.2815647501607259,"
>     " 87.9574816223991007 -40.3146427145853394,"
>     " 87.7184147523609425 -40.3314878875577705)))";
>
>   try {
>     geos::geom::PrecisionModel *model =
>         new 
> geos::geom::PrecisionModel(geos::geom::PrecisionModel::FLOATING);
>     geos::geom::GeometryFactory *factory = new 
> geos::geom::GeometryFactory(model);
>
>     geos::io::WKTReader *wkt = new geos::io::WKTReader();
>     geos::geom::MultiPolygon *mp1 = (geos::geom::MultiPolygon 
> *)wkt->read(mp1s);
>     geos::geom::MultiPolygon *mp2 = (geos::geom::MultiPolygon 
> *)wkt->read(mp2s);
>
>     std::cout << "Is valid of one = " << mp1->isValid() << std::endl;
>     std::cout << "Is valid of two = " << mp2->isValid() << std::endl;
>
>     geos::geom::Geometry *diff = mp1->difference(mp2);
>
>     std::cout << mp1->toString() << std::endl;
>     std::cout << mp2->toString() << std::endl;
>     std::cout << diff->toString() << std::endl;
>
>   }
>   catch (std::exception const &se) {
>     std::cout << "ERROR - " << se.what() << std::endl;
>   }
>   catch (...) {
>     std::cout << "General error" << std::endl;
>   }
>
> }
> ------------------------------------------------------------------------
>
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel
>   

-- 
Martin Davis
Senior Technical Architect
Refractions Research, Inc.
(250) 383-3022


From benjubb at refractions.net  Wed Sep 19 16:54:12 2007
From: benjubb at refractions.net (Ben Jubb)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] no outgoing dirEdge found error
In-Reply-To: <46F1709D.7010201@refractions.net>
References: <OF309F7020.7FBA9B75-ON0725735B.00072AF0-0725735B.000E7287@usgs.gov>
	<46F1709D.7010201@refractions.net>
Message-ID: <46F18C74.1060804@refractions.net>

There is a way to make this particular operation succeed in GEOS, which 
is to use the BinaryOp method instead of difference().  For example, the 
following code works (in MSVC8):


#include <string>
#include <iostream>

#include <geos/geom/PrecisionModel.h>
#include <geos/geom/GeometryFactory.h>
#include <geos/geom/Geometry.h>
#include <geos/geom/MultiPolygon.h>
#include <geos/io/WKTReader.h>

#include <geos/geom/BinaryOp.h>
#include <geos/operation/overlay/OverlayOp.h>

using namespace geos;

int main (int argc, char *argv[])
{
    using namespace operation::overlay;
  typedef std::auto_ptr< geom::Geometry > GeomAutoPtr;

  std::string mp1s = "MULTIPOLYGON (((88.0541300495810049 
-40.3914336120775417,"
    " 88.0013586636740683 -40.3952580652168507,"
    " 87.9856522556763849 -40.3125682141688557,"
    " 88.0410955427405639 -40.3084853410231361,"
    " 88.0447770149226727 -40.3320733430391556,"
    " 88.0541300495810049 -40.3914336120775417)),"
    " ((87.9569549228361041 -40.1614847724049824,"
    " 87.9856522556763849 -40.3125682141688557,"
    " 87.9594803530699494 -40.3144955269957563,"
    " 87.9484023890450430 -40.2597855714132962,"
    " 87.9236385364479673 -40.1638760511710515,"
    " 87.9569549228361041 -40.1614847724049824)))";

  std::string mp2s = "MULTIPOLYGON (((87.7184147523609425 
-40.3314878875577705,"
    " 87.7106409229361930 -40.2916861830969211,"
    " 87.6363928113999862 -39.9074815079801084,"
    " 87.8588765594887349 -39.8933226300382628,"
    " 88.3245648150878964 -39.8616404104367064,"
    " 88.3252910982550503 -39.8653834273614933,"
    " 88.4058355104796334 -40.2774282017416283,"
    " 88.4066631207306273 -40.2815647501607259,"
    " 87.9574816223991007 -40.3146427145853394,"
    " 87.7184147523609425 -40.3314878875577705)))";

  try {
    geos::geom::PrecisionModel *model =
        new 
geos::geom::PrecisionModel(geos::geom::PrecisionModel::FLOATING);
    geos::geom::GeometryFactory *factory = new 
geos::geom::GeometryFactory(model);

    geos::io::WKTReader *wkt = new geos::io::WKTReader();
    geos::geom::MultiPolygon *mp1 = (geos::geom::MultiPolygon 
*)wkt->read(mp1s);
    geos::geom::MultiPolygon *mp2 = (geos::geom::MultiPolygon 
*)wkt->read(mp2s);

    std::cout << "Is valid of one = " << mp1->isValid() << std::endl;
    std::cout << "Is valid of two = " << mp2->isValid() << std::endl;

    //geos::geom::Geometry *diff = mp1->difference(mp2);

    GeomAutoPtr gRealRes = BinaryOp(mp1, mp2, 
overlayOp(OverlayOp::opDIFFERENCE));

    std::cout << mp1->toString() << std::endl;
    std::cout << mp2->toString() << std::endl;
    //std::cout << diff->toString() << std::endl;
    std::cout << gRealRes.get()->toString() << std::endl;

  }
  catch (std::exception const &se) {
    std::cout << "ERROR - " << se.what() << std::endl;
  }
  catch (...) {
    std::cout << "General error" << std::endl;
  }

}


BInaryOp does the same difference op, but when that fails it tries again 
after shifting the geometry close to the origin.  Presumably this gains 
a few bits of precision in the intermediate results, that allows the 
operation to succeed.  This method is perhaps not as robust tho.

b


Martin Davis wrote:
> This computation works fine in the current version of JTS.  This may 
> indicate a porting bug in GEOS, or a slightly different choice of 
> tolerances.
>
> This is a classic case which causes robustness problems - overlaying 
> two geometries with linework which is almost coincident.
>
> The only suggestion I can make is to reduce the precision of your data 
> slightly in cases which fail.  Presumably your source data isn't 
> actually accurate to 16 decimal places?   It could be a while before 
> we can look at the GEOS code for this.
>
> Stuart C Sides wrote:
>>
>> Hi GEOS devels,
>>
>> We are writing a C++ application which is looking for areas of 
>> overlap between 1000's  of polygons. The app is being
>> developed on Linux with g++ 4.1.0.
>>
>> We first tried the stable release of GEOS 2.2.3 and received this 
>> error after processing several polygons:
>>
>>     TopologyException: found non-noded intersection between 87.9595 
>> -40.3145, 87.9484 -40.2598 and 87.9857 -40.3126, 87.9575 -40.3146 
>> 87.9595 -40.3145
>>
>> While reviewing the list archives we found references to major code 
>> changes that might fix some of these errors, so we
>> upgraded to RC3 and eventually to an SVN version from 2007-09-18. We 
>> got through a lot more polygons without errors,
>> but finally received this error:
>>
>>     TopologyException: no outgoing dirEdge found 87.957 -40.1615
>>
>> Note: this coordinate is from the first segment of the second polygon 
>> of the first multi-polygon below.
>>
>> In the original code, before I converted the multipolygons to strings 
>> to create the example, we received this error:
>>
>>     TopologyException: no outgoing dirEdge found 87.7184 -40.3315
>>
>> Note: this coordinate is from the first segment of the second 
>> multi-polygon below:
>>
>> I've boiled the error down to just a few lines of code, and would 
>> appreciate any suggestions.  The error is thrown at the
>> difference.
>>
>> Thanks
>> Stuart
>>
>>
>>
>> #include <string>
>> #include <iostream>
>>
>> #include <geos/geom/PrecisionModel.h>
>> #include <geos/geom/GeometryFactory.h>
>> #include <geos/geom/Geometry.h>
>> #include <geos/geom/MultiPolygon.h>
>> #include <geos/io/WKTReader.h>
>>
>> int main (int argc, char *argv[])
>> {
>>   std::string mp1s = "MULTIPOLYGON (((88.0541300495810049 
>> -40.3914336120775417,"
>>     " 88.0013586636740683 -40.3952580652168507,"
>>     " 87.9856522556763849 -40.3125682141688557,"
>>     " 88.0410955427405639 -40.3084853410231361,"
>>     " 88.0447770149226727 -40.3320733430391556,"
>>     " 88.0541300495810049 -40.3914336120775417)),"
>>     " ((87.9569549228361041 -40.1614847724049824,"
>>     " 87.9856522556763849 -40.3125682141688557,"
>>     " 87.9594803530699494 -40.3144955269957563,"
>>     " 87.9484023890450430 -40.2597855714132962,"
>>     " 87.9236385364479673 -40.1638760511710515,"
>>     " 87.9569549228361041 -40.1614847724049824)))";
>>
>>   std::string mp2s = "MULTIPOLYGON (((87.7184147523609425 
>> -40.3314878875577705,"
>>     " 87.7106409229361930 -40.2916861830969211,"
>>     " 87.6363928113999862 -39.9074815079801084,"
>>     " 87.8588765594887349 -39.8933226300382628,"
>>     " 88.3245648150878964 -39.8616404104367064,"
>>     " 88.3252910982550503 -39.8653834273614933,"
>>     " 88.4058355104796334 -40.2774282017416283,"
>>     " 88.4066631207306273 -40.2815647501607259,"
>>     " 87.9574816223991007 -40.3146427145853394,"
>>     " 87.7184147523609425 -40.3314878875577705)))";
>>
>>   try {
>>     geos::geom::PrecisionModel *model =
>>         new 
>> geos::geom::PrecisionModel(geos::geom::PrecisionModel::FLOATING);
>>     geos::geom::GeometryFactory *factory = new 
>> geos::geom::GeometryFactory(model);
>>
>>     geos::io::WKTReader *wkt = new geos::io::WKTReader();
>>     geos::geom::MultiPolygon *mp1 = (geos::geom::MultiPolygon 
>> *)wkt->read(mp1s);
>>     geos::geom::MultiPolygon *mp2 = (geos::geom::MultiPolygon 
>> *)wkt->read(mp2s);
>>
>>     std::cout << "Is valid of one = " << mp1->isValid() << std::endl;
>>     std::cout << "Is valid of two = " << mp2->isValid() << std::endl;
>>
>>     geos::geom::Geometry *diff = mp1->difference(mp2);
>>
>>     std::cout << mp1->toString() << std::endl;
>>     std::cout << mp2->toString() << std::endl;
>>     std::cout << diff->toString() << std::endl;
>>
>>   }
>>   catch (std::exception const &se) {
>>     std::cout << "ERROR - " << se.what() << std::endl;
>>   }
>>   catch (...) {
>>     std::cout << "General error" << std::endl;
>>   }
>>
>> }
>> ------------------------------------------------------------------------
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>>   
>

From pramsey at refractions.net  Wed Sep 19 17:55:08 2007
From: pramsey at refractions.net (Paul Ramsey)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] no outgoing dirEdge found error
In-Reply-To: <46F18C74.1060804@refractions.net>
References: <OF309F7020.7FBA9B75-ON0725735B.00072AF0-0725735B.000E7287@usgs.gov>	<46F1709D.7010201@refractions.net>
	<46F18C74.1060804@refractions.net>
Message-ID: <46F19ABC.4030908@refractions.net>

Ye gods. This reminds me of Dale Lutz's sage advice to try doing 
everything using quad-doubles.

Ben Jubb wrote:

> BInaryOp does the same difference op, but when that fails it tries again 
> after shifting the geometry close to the origin.  Presumably this gains 
> a few bits of precision in the intermediate results, that allows the 
> operation to succeed.  This method is perhaps not as robust tho.

-- 

   Paul Ramsey
   Refractions Research
   http://www.refractions.net
   pramsey@refractions.net
   Phone: 250-383-3022
   Cell: 250-885-0632

From marco.hugentobler at karto.baug.ethz.ch  Thu Sep 20 09:15:27 2007
From: marco.hugentobler at karto.baug.ethz.ch (Marco Hugentobler)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] editing of geos geometries
In-Reply-To: <46F14707.10600@refractions.net>
References: <200709190954.23079.marco.hugentobler@karto.baug.ethz.ch>
	<46F14707.10600@refractions.net>
Message-ID: <200709201515.28044.marco.hugentobler@karto.baug.ethz.ch>

On Wednesday 19 September 2007 17:57:59 Martin Davis wrote:
> Generally geometries are intended to be value objects.  This is
> *especially important* in C/C++, because memory aliasing can kill you
> with bad pointer errors.
>
> The approach in JTS is to use some helper classes such as GeometryEditor
> and GeometryTransformer to perform "vertex surgery".  Essentially they
> drill down thru a geometry, add or delete points or components, and then
> build a new geometry back up.  I'm not sure if these have been ported to
> GEOS.

Ah yes, thanks for the hint. GeometryEditor is present in geos too, so it will 
be a good solution for me to subclass it.  

> It would probably also be nice to have some utility classes built on
> these to do things like change vertices, add vertices, and delete
> vertices.  I may look at adding these to JTS, and they'd be easy to port
> to GEOS.

That would be great. 
I'm planning to port some other editing operations that I implemented on WKB 
arrays to geos in the middle term.

Thanks,
Marco




-- 
Dr. Marco Hugentobler
Institute of Cartography
ETH Zurich
marco.hugentobler@karto.baug.ethz.ch

From cfis at savagexi.com  Fri Sep 21 13:29:39 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <95A3027E-867E-48CE-A2DE-B2D85AA71893@refractions.net>
References: <46E8BABA.7080208@savagexi.com>	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>	<46E977B3.8090307@pobox.com>
	<46EAAF4B.4000305@savagexi.com>	<46F09CC7.6050606@savagexi.com>	<3E57A71D-7C7E-45C9-B2E8-1C5C93B0057F@gmail.com>
	<95A3027E-867E-48CE-A2DE-B2D85AA71893@refractions.net>
Message-ID: <46F3FF83.8030303@savagexi.com>

> The readme on releasing spells out the policy if I recall correctly.

Yes, there is. But I do find section #2 confusing:


1: Increment CAPI_INTERFACE_X in configure.in
    - For a release with no interface changes just bump REVISION.
      [ Even if *nothing* changed in CAPI ]
    - Adding interfaces, bump CURRENT/AGE, set REVISION to 0.
    - Deleting interfaces / compatibility issues - bump CURRENT, others 
to zero
      [ THIS MUST BE CAREFULLY AVOIDED ]

2: Increment release version:
    - VERSION_PATCH for bugfixes/improvements (even breaking C++ API)
    - VERSION_MINOR for NEW interfaces in the C lib
    - VERSION_MAJOR for SUBSTANTIAL additions or C lib ABI break
      [ THIS MUST BE CAREFULLY AVOIDED ]


For section #2, does C lib mean the C++ lib or CAPI?  Note that the 
comments in configure.in talk about the C++ lib.

So my take is I should update the CAPI to:

CAPI_INTERFACE_CURRENT=5 (currently 4)
CAPI_INTERFACE_REVISION=0 (currently 3)
CAPI_INTERFACE_AGE=4 (currently 3)

Although I'm not sure what CAPI_INTERFACE_AGE is supposed to mean.

For the C++ lib, I'm doing:

VERSION_MAJOR=3
VERSION_MINOR=0
VERSION_PATCH=0rc5


Seem reasonable?  I will now apply my patch...

Thanks,

Charlie

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070921/ebc0634d/smime.bin
From cfis at savagexi.com  Fri Sep 21 13:38:43 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Assertion Failure with VC++ and STRtree:yComparator
In-Reply-To: <46E87895.2090005@savagexi.com>
References: <46D3C1C7.7060606@savagexi.com> <46E87895.2090005@savagexi.com>
Message-ID: <46F401A3.9070606@savagexi.com>

> Following up on my email from a couple weeks ago.
> 
> Any opinions?  What is now checked in is broken in debug builds for VC++ 
> which I think is unacceptable (makes it a lot hard to run GEOS under the 
> VC++ or WinDebug debuggers).
> 
> I want to revert to strk's original version ... but his comments worry me.

Ok - I committed this change since assertion failures in VC++ seem 
unacceptable to me.  However, I am worried by strk's comments so want to 
make sure everyone knows that I've changed it back in case people run 
into problems.

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070921/e924a852/smime.bin
From strk at keybit.net  Sat Sep 22 03:15:38 2007
From: strk at keybit.net (strk)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <46F3FF83.8030303@savagexi.com>
References: <46E8BABA.7080208@savagexi.com> <46E93F95.9060403@pobox.com>
	<46E9679F.9090901@savagexi.com> <46E977B3.8090307@pobox.com>
	<46EAAF4B.4000305@savagexi.com> <46F09CC7.6050606@savagexi.com>
	<3E57A71D-7C7E-45C9-B2E8-1C5C93B0057F@gmail.com>
	<95A3027E-867E-48CE-A2DE-B2D85AA71893@refractions.net>
	<46F3FF83.8030303@savagexi.com>
Message-ID: <20070922071538.GD23894@keybit.net>

On Fri, Sep 21, 2007 at 11:29:39AM -0600, Charlie Savage wrote:

> 2: Increment release version:
>    - VERSION_PATCH for bugfixes/improvements (even breaking C++ API)
>    - VERSION_MINOR for NEW interfaces in the C lib
>    - VERSION_MAJOR for SUBSTANTIAL additions or C lib ABI break
>      [ THIS MUST BE CAREFULLY AVOIDED ]
> 
> 
> For section #2, does C lib mean the C++ lib or CAPI?  Note that the 
> comments in configure.in talk about the C++ lib.

C lib means CAPI.

> So my take is I should update the CAPI to:
> 
> CAPI_INTERFACE_CURRENT=5 (currently 4)
> CAPI_INTERFACE_REVISION=0 (currently 3)
> CAPI_INTERFACE_AGE=4 (currently 3)
> 
> Although I'm not sure what CAPI_INTERFACE_AGE is supposed to mean.

AGE is the number of previous interfaces still supported.
So, if current is 5 and you support 4 previous interfaces, a code
which was compiled against interface 1 should still run w/out problems.

Under Linux, your suggested versioning translates to a SO versioned
as 1.4.0 (oldest interface supported, additional new interfaces, revision)
while previous 4:3:3 should translate to 1.3.3.

> For the C++ lib, I'm doing:
> 
> VERSION_MAJOR=3
> VERSION_MINOR=0
> VERSION_PATCH=0rc5

The C++ lib will actually have a release-bound version, no new library will
be automatically used by code built against older libs (see -release in libtool
manuals).
So what your setting with VERSION_* is the *release* version, which will also
be the C++ lib version.

Hope it helps.

--strk;

From mathieu.leserre at camptocamp.com  Mon Sep 24 13:13:59 2007
From: mathieu.leserre at camptocamp.com (Mathieu Le Serre)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] patch : TIN & POLYHEDRALSURFACE
Message-ID: <46F7F057.7080408@camptocamp.com>

Hi,

A few month ago, we already discussed here about 3D storage and PostGIS,
(cf
<http://postgis.refractions.net/pipermail/postgis-users/2007-April/015166.html>)
 
We made a patch to add such new geometries to PostGIS.

It implements TIN and POLYHEDRALSURFACE as described in
OGC SFS1.2 standard.
These geometries are specific MULTIPOLYGON that
describe 3D surfaces and 3D volumes.

Currently, we got the following functions to work for 3D geometries:
- asEwkb
- asEwkt
- asGml
- asSvg (2D output only)
- asX3d.

This last function enables exporting 3D geometries to the X3D format.

I also provide a patch for GEOS to implement the isValid function
for TIN and POLYHEDRALSURFACE. It checks if feature faces
are well connected and well oriented.

A presentation around this work will be done in FOSS4G
<http://www.foss4g2007.org/presentations/view.php?abstract_id=224>

PostGIS implementation consideration:
There were already 15 geometries types and I needed to add two. But geometry
types were coded on 4 bits only...
In order to implement these geometries,  I decided to drop three unused
geometry types (POINTTYPEI, LINETYPEI, and POLYGONTYPEI).
They were not present in the postgis parser, and were described as
"Invalid types" in the file liblwgeom.c.


Any comments and/or reactions would be greatly appreciated.
  

Best regards,

 
-------------- next part --------------
--- postgis-svn/lwgeom/liblwgeom.h	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/liblwgeom.h	2007-09-18 15:50:59.000000000 +0200
@@ -293,6 +293,26 @@
 	LWPOLY **geoms;
 } LWMPOLY; 
 
+/* TINTYPE */
+typedef struct
+{
+        uchar type;
+        BOX2DFLOAT4 *bbox;
+        uint32 SRID;
+        int  ngeoms;
+        LWPOLY **geoms;
+} LWTIN;
+
+/* POLYHEDRALSURFACETYPE */
+typedef struct
+{
+        uchar type;
+        BOX2DFLOAT4 *bbox;
+        uint32 SRID;
+        int  ngeoms;
+        LWPOLY **geoms;
+} LWPOLYHEDRALSURFACE;
+
 /* COLLECTIONTYPE */
 typedef struct
 {   
@@ -305,6 +325,8 @@
 
 /* Casts LWGEOM->LW* (return NULL if cast is illegal) */
 extern LWMPOLY *lwgeom_as_lwmpoly(LWGEOM *lwgeom);
+extern LWTIN *lwgeom_as_lwtin(LWGEOM *lwgeom);
+extern LWPOLYHEDRALSURFACE *lwgeom_as_lwpolyhedralsurface(LWGEOM *lwgeom);
 extern LWMLINE *lwgeom_as_lwmline(LWGEOM *lwgeom);
 extern LWMPOINT *lwgeom_as_lwmpoint(LWGEOM *lwgeom);
 extern LWCOLLECTION *lwgeom_as_lwcollection(LWGEOM *lwgeom);
@@ -314,6 +336,8 @@
 
 /* Casts LW*->LWGEOM (always cast) */
 extern LWGEOM *lwmpoly_as_lwgeom(LWMPOLY *obj);
+extern LWGEOM *lwtin_as_lwgeom(LWTIN *obj);
+extern LWGEOM *lwpolyhedralsurface_as_lwgeom(LWPOLYHEDRALSURFACE *obj);
 extern LWGEOM *lwmline_as_lwgeom(LWMLINE *obj);
 extern LWGEOM *lwmpoint_as_lwgeom(LWMPOINT *obj);
 extern LWGEOM *lwcollection_as_lwgeom(LWCOLLECTION *obj);
@@ -446,6 +470,8 @@
 #define	MULTILINETYPE	5
 #define	MULTIPOLYGONTYPE	6
 #define	COLLECTIONTYPE	7
+#define TINTYPE		10
+#define POLYHEDRALSURFACETYPE	11
 
 #define WKBZOFFSET 0x80000000
 #define WKBMOFFSET 0x40000000
@@ -688,6 +714,8 @@
 LWMPOINT *lwmpoint_deserialize(uchar *serializedform);
 LWMLINE *lwmline_deserialize(uchar *serializedform);
 LWMPOLY *lwmpoly_deserialize(uchar *serializedform);
+LWTIN *lwtin_deserialize(uchar *serializedform);
+LWPOLYHEDRALSURFACE *lwpolyhedralsurface_deserialize(uchar *serializedform);
 LWCOLLECTION *lwcollection_deserialize(uchar *serializedform);
 LWGEOM *lwcollection_getsubgeom(LWCOLLECTION *, int);
 
@@ -992,6 +1020,8 @@
 LWGEOM *lwline_add(const LWLINE *to, uint32 where, const LWGEOM *what);
 LWGEOM *lwpoly_add(const LWPOLY *to, uint32 where, const LWGEOM *what);
 LWGEOM *lwmpoly_add(const LWMPOLY *to, uint32 where, const LWGEOM *what);
+LWGEOM *lwtin_add(const LWTIN *to, uint32 where, const LWGEOM *what);
+LWGEOM *lwpolyhedralsurface_add(const LWPOLYHEDRALSURFACE *to, uint32 where, const LWGEOM *what);
 LWGEOM *lwmline_add(const LWMLINE *to, uint32 where, const LWGEOM *what);
 LWGEOM *lwmpoint_add(const LWMPOINT *to, uint32 where, const LWGEOM *what);
 LWGEOM *lwcollection_add(const LWCOLLECTION *to, uint32 where, const LWGEOM *what);
--- postgis-svn/lwgeom/lwgeom.c	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/lwgeom.c	2007-09-18 15:13:41.000000000 +0200
@@ -46,6 +46,10 @@
 			return (LWGEOM *)lwmline_deserialize(srl);
 		case MULTIPOLYGONTYPE:
 			return (LWGEOM *)lwmpoly_deserialize(srl);
+		case TINTYPE:
+			return (LWGEOM *)lwtin_deserialize(srl);
+		case POLYHEDRALSURFACETYPE:
+			return (LWGEOM *)lwpolyhedralsurface_deserialize(srl);
 		case COLLECTIONTYPE:
 			return (LWGEOM *)lwcollection_deserialize(srl);
                 case COMPOUNDTYPE:
@@ -92,6 +96,8 @@
 		case MULTILINETYPE:
                 case MULTICURVETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
                 case MULTISURFACETYPE:
 		case COLLECTIONTYPE:
 			return lwcollection_serialize_size((LWCOLLECTION *)lwgeom);
@@ -134,6 +140,8 @@
 		case MULTILINETYPE:
                 case MULTICURVETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
                 case MULTISURFACETYPE:
 		case COLLECTIONTYPE:
 			lwcollection_serialize_buf((LWCOLLECTION *)lwgeom, buf,
@@ -184,6 +192,8 @@
 			return;
 
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			coll = (LWCOLLECTION *)lwgeom;
 			for (i=0; i<coll->ngeoms; i++)
@@ -209,6 +219,8 @@
 			return;
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			col = (LWCOLLECTION *)lwgeom;
 			for (i=0; i<col->ngeoms; i++)
@@ -239,6 +251,8 @@
 		case MULTILINETYPE:
                 case MULTICURVETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
                 case MULTISURFACETYPE:
 		case COLLECTIONTYPE:
 			return lwcollection_compute_box2d_p((LWCOLLECTION *)lwgeom, buf);
@@ -325,7 +339,26 @@
 	else return NULL;
 }
 
+LWTIN *
+lwgeom_as_lwtin(LWGEOM *lwgeom)
+{
+        if ( TYPE_GETTYPE(lwgeom->type) == TINTYPE )
+                return (LWTIN *)lwgeom;
+        else return NULL;
+}
+
+LWPOLYHEDRALSURFACE *
+lwgeom_as_lwpolyhedralsurface(LWGEOM *lwgeom)
+{
+        if ( TYPE_GETTYPE(lwgeom->type) == POLYHEDRALSURFACETYPE )
+                return (LWPOLYHEDRALSURFACE *)lwgeom;
+        else return NULL;
+}
+
+
 LWGEOM *lwmpoly_as_lwgeom(LWMPOLY *obj) { return (LWGEOM *)obj; }
+LWGEOM *lwtin_as_lwgeom(LWTIN *obj) { return (LWGEOM *)obj; }
+LWGEOM *lwpolyhedralsurface_as_lwgeom(LWPOLYHEDRALSURFACE *obj) { return (LWGEOM *)obj; }
 LWGEOM *lwmline_as_lwgeom(LWMLINE *obj) { return (LWGEOM *)obj; }
 LWGEOM *lwmpoint_as_lwgeom(LWMPOINT *obj) { return (LWGEOM *)obj; }
 LWGEOM *lwcollection_as_lwgeom(LWCOLLECTION *obj) { return (LWGEOM *)obj; }
@@ -395,6 +428,8 @@
 		case MULTILINETYPE:
                 case MULTICURVETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
                 case MULTISURFACETYPE:
 		case COLLECTIONTYPE:
 			return (LWGEOM *)lwcollection_clone((LWCOLLECTION *)lwgeom);
@@ -462,6 +497,14 @@
 			return (LWGEOM *)lwmpoly_add((const LWMPOLY *)to,
 				where, what);
 
+		 case TINTYPE:
+                        return (LWGEOM *)lwtin_add((const LWTIN *)to,
+                                where, what);
+
+		 case POLYHEDRALSURFACETYPE:
+                        return (LWGEOM *)lwpolyhedralsurface_add((const LWPOLYHEDRALSURFACE *)to,
+                                where, what);
+
                 case MULTISURFACETYPE:
                         return (LWGEOM *)lwmsurface_add((const LWMSURFACE *)to,
                                 where, what);
@@ -618,6 +661,8 @@
 		case MULTIPOINTTYPE:
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			return lwcollection_same((LWCOLLECTION *)lwgeom1,
 				(LWCOLLECTION *)lwgeom2);
@@ -678,6 +723,8 @@
 				dist);
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			return (LWGEOM *)lwcollection_segmentize2d(
 				(LWCOLLECTION *)lwgeom, dist);
@@ -713,6 +760,8 @@
 			return;
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			coll = (LWCOLLECTION *)lwgeom;
 			for (i=0; i<coll->ngeoms; i++)
--- postgis-svn/lwgeom/lwgparse.c	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/lwgparse.c	2007-09-20 16:22:27.000000000 +0200
@@ -140,6 +140,8 @@
 void alloc_multilinestring(void);
 void alloc_multicurve(void);
 void alloc_multipolygon(void);
+void alloc_tin(void);
+void alloc_polyhedralsurface(void);
 void alloc_multisurface(void);
 void alloc_geomertycollection(void);
 void alloc_counter(void);
@@ -562,10 +564,7 @@
         lwnotice("alloc_point");
 #endif
 
-	if( the_geom.lwgi)
-		alloc_stack_tuple(POINTTYPEI,write_type,1);
-	else
-		alloc_stack_tuple(POINTTYPE,write_type,1);
+	alloc_stack_tuple(POINTTYPE,write_type,1);
 
 	minpoints=1;
 	checkclosed=0;
@@ -580,10 +579,7 @@
         lwnotice("alloc_linestring");
 #endif
 
-	if( the_geom.lwgi)
-		alloc_stack_tuple(LINETYPEI,write_type,1);
-	else
-		alloc_stack_tuple(LINETYPE,write_type,1);
+	alloc_stack_tuple(LINETYPE,write_type,1);
 
 	minpoints=2;
 	checkclosed=0;
@@ -634,15 +630,11 @@
         lwnotice("alloc_polygon");
 #endif
 
-	if( the_geom.lwgi)
-		alloc_stack_tuple(POLYGONTYPEI, write_type,1);
-	else
-		alloc_stack_tuple(POLYGONTYPE, write_type,1);
+	alloc_stack_tuple(POLYGONTYPE, write_type,1);
 
 	minpoints=3;
 	checkclosed=1;
         isodd=-1;
-
 }
 
 void
@@ -715,6 +707,29 @@
 }
 
 void
+alloc_tin(void)
+{
+
+#ifdef PGIS_DEBUG_CALLS
+        lwnotice("alloc_tin");
+#endif
+
+        alloc_stack_tuple(TINTYPE,write_type,1);
+}
+
+void
+alloc_polyhedralsurface(void)
+{
+
+#ifdef PGIS_DEBUG_CALLS
+        lwnotice("alloc_polyhedralsurface");
+#endif
+
+        alloc_stack_tuple(POLYHEDRALSURFACETYPE,write_type,1);
+}
+
+
+void
 alloc_multisurface(void)
 {
 
@@ -1021,22 +1036,8 @@
 
 	type &=0x0f;
 
-	if ( the_geom.lwgi  ){
-
-		if ( type<= POLYGONTYPE )
-			alloc_stack_tuple(type +9,write_type,1);
-		else
-			alloc_stack_tuple(type,write_type,1);
-	}
-	else{
-		/* If we are writing lwg and are reading wbki */
-		int4 towrite=type;
-		if (towrite >= POINTTYPEI && towrite <= POLYGONTYPEI){
-			towrite-=9;
-		}
-		alloc_stack_tuple(towrite,write_type,1);
-	}
-
+	alloc_stack_tuple(type,write_type,1);
+	
 	switch(type ){
 		case	POINTTYPE:
 			read_wkb_point(b);
@@ -1066,26 +1067,13 @@
 		case	MULTILINETYPE:
                 case    MULTICURVETYPE:
 		case	MULTIPOLYGONTYPE:
+		case    TINTYPE:
+                case    POLYHEDRALSURFACETYPE:
                 case    MULTISURFACETYPE:
 		case	COLLECTIONTYPE:
 			read_collection(b,parse_wkb);
 			break;
 
-		case	POINTTYPEI:
-			the_geom.from_lwgi=1;
-			read_wkb_point(b);
-			break;
-
-		case	LINETYPEI:
-			the_geom.from_lwgi=1;
-			read_collection(b,read_wkb_point);
-			break;
-
-		case	POLYGONTYPEI:
-			the_geom.from_lwgi=1;
-			read_collection(b,read_collection2);
-			break;
-
 		default:
 			error("Invalid type in wbk");
 	}
--- postgis-svn/lwgeom/lwgeom_geos_c.c	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/lwgeom_geos_c.c	2007-09-18 15:13:41.000000000 +0200
@@ -2935,6 +2935,8 @@
 		case GEOS_MULTIPOINT:
 		case GEOS_MULTILINESTRING:
 		case GEOS_MULTIPOLYGON:
+		case GEOS_TIN:
+		case GEOS_POLYHEDRALSURFACE:
 		case GEOS_GEOMETRYCOLLECTION:
 #ifdef PGIS_DEBUG_GEOS2POSTGIS
 	lwnotice("lwgeom_from_geometry: it's a Collection or Multi");
@@ -3144,6 +3146,8 @@
 		case MULTIPOINTTYPE:
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+                case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			if ( type == MULTIPOINTTYPE )
 				geostype = GEOS_MULTIPOINT;
@@ -3151,6 +3155,10 @@
 				geostype = GEOS_MULTILINESTRING;
 			else if ( type == MULTIPOLYGONTYPE )
 				geostype = GEOS_MULTIPOLYGON;
+			else if ( type == TINTYPE )
+				geostype = GEOS_TIN;
+			else if ( type == POLYHEDRALSURFACETYPE )
+                                geostype = GEOS_POLYHEDRALSURFACE;
 			else
 				geostype = GEOS_GEOMETRYCOLLECTION;
 
--- postgis-svn/lwgeom/lwgeom_jts_wrapper.cpp	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/lwgeom_jts_wrapper.cpp	2007-09-18 15:13:41.000000000 +0200
@@ -86,6 +86,8 @@
 #define	MULTILINETYPE	5
 #define	MULTIPOLYGONTYPE	6
 #define	COLLECTIONTYPE	7
+#define TINTYPE  10
+#define POLYHEDRALSURFACETYPE  11
 
 //###########################################################
 
@@ -924,6 +926,8 @@
 	if ( ! strcmp(type, "MultiLineString") ) return MULTILINETYPE;
 	if ( ! strcmp(type, "MultiPoint") ) return MULTIPOINTTYPE;
 	if ( ! strcmp(type, "MultiPolygon") ) return MULTIPOLYGONTYPE;
+	if ( ! strcmp(type, "Tin") ) return TINTYPE;
+        if ( ! strcmp(type, "PolyhedralSurface") ) return POLYHEDRALSURFACETYPE;
 	if ( ! strcmp(type, "GeometryCollection") ) return COLLECTIONTYPE;
 	else
 	{
@@ -1192,6 +1196,12 @@
 			case MULTIPOLYGONTYPE:
 				g = jtsGeomFactory->createMultiPolygon((JArray<Polygon *>*)subGeoms);
 				break;
+			case TINTYPE:
+                                g = jtsGeomFactory->createTin((JArray<Polygon *>*)subGeoms);
+                                break;
+                        case POLYHEDRALSURFACETYPE:
+                                g = jtsGeomFactory->createPolyhedralSurface((JArray<Polygon *>*)subGeoms);
+                                break;
 			default:
 				NOTICE_MESSAGE("Unsupported type request for PostGIS2JTS_collection");
 				g = NULL;
--- postgis-svn/lwgeom/wktparse.h	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/wktparse.h	2007-09-18 15:35:43.000000000 +0200
@@ -39,14 +39,10 @@
 #define	MULTILINETYPE	5
 #define	MULTIPOLYGONTYPE	6
 #define	COLLECTIONTYPE	7
-
-/* Extended lwgeom integer types */
-#define POINTTYPEI    10
-#define LINETYPEI     11
-#define POLYGONTYPEI  12
-
 #define CURVETYPE       8
 #define COMPOUNDTYPE    9
+#define TINTYPE                 10
+#define POLYHEDRALSURFACETYPE   11
 #define CURVEPOLYTYPE   13
 #define MULTICURVETYPE          14
 #define MULTISURFACETYPE        15
@@ -80,6 +76,8 @@
 void alloc_multilinestring(void);
 void alloc_multicurve(void);
 void alloc_multipolygon(void);
+void alloc_tin(void);
+void alloc_polyhedralsurface(void);
 void alloc_multisurface(void);
 void alloc_geomertycollection(void);
 void alloc_empty();
--- postgis-svn/lwgeom/wktparse.y	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/wktparse.y	2007-09-19 09:32:15.000000000 +0200
@@ -22,8 +22,8 @@
 	const char* wkb;
 }
 
-%token POINT LINESTRING POLYGON MULTIPOINT MULTILINESTRING MULTIPOLYGON GEOMETRYCOLLECTION CIRCULARSTRING COMPOUNDCURVE CURVEPOLYGON MULTICURVE MULTISURFACE
-%token POINTM LINESTRINGM POLYGONM MULTIPOINTM MULTILINESTRINGM MULTIPOLYGONM GEOMETRYCOLLECTIONM CIRCULARSTRINGM COMPOUNDCURVEM CURVEPOLYGONM  MULTICURVEM MULTISURFACEM
+%token POINT LINESTRING POLYGON MULTIPOINT MULTILINESTRING MULTIPOLYGON GEOMETRYCOLLECTION CIRCULARSTRING COMPOUNDCURVE CURVEPOLYGON MULTICURVE MULTISURFACE TIN POLYHEDRALSURFACE
+%token POINTM LINESTRINGM POLYGONM MULTIPOINTM MULTILINESTRINGM MULTIPOLYGONM GEOMETRYCOLLECTIONM CIRCULARSTRINGM COMPOUNDCURVEM CURVEPOLYGONM  MULTICURVEM MULTISURFACEM TINM POLYHEDRALSURFACEM
 %token SRID      
 %token EMPTY
 %token <value> VALUE
@@ -60,6 +60,10 @@
 	|
 	geom_multipolygon
 	|
+	geom_tin
+	|
+	geom_polyhedralsurface
+	|
         geom_multisurface
         |
 	geom_geometrycollection
@@ -145,6 +149,11 @@
 	|
 	linestring_int COMMA a_point;
 
+linestring_t :
+	{alloc_counter();}
+	LPAREN a_point COMMA a_point COMMA a_point COMMA a_point RPAREN 
+	{popc();}
+
 /* CIRCULARSTRING */
 
 geom_circularstring :
@@ -273,6 +282,17 @@
 	|
 	polygon_int COMMA linestring_1
 
+/* TRIANGLE */
+
+nonempty_triangle :
+        { alloc_polygon(); } triangle_1  { pop(); }
+
+triangle_1 :
+        { alloc_counter(); } LPAREN triangle_int RPAREN { pop();}
+
+triangle_int :
+        linestring_t
+        
 /* CURVEPOLYGON */
 
 geom_curvepolygon :
@@ -313,6 +333,48 @@
 	|
 	multipolygon_int COMMA nonempty_polygon
 
+/* TIN */
+
+geom_tin :
+        TIN { alloc_tin(); } tin { pop(); }
+        |
+        TINM { set_zm(0, 1); alloc_tin(); }
+        tin { pop();}
+
+tin :
+        empty
+        |
+        { alloc_counter(); } LPAREN tin_int RPAREN { pop(); }
+
+tin_int :
+        nonempty_triangle
+        |
+        tin_int COMMA nonempty_triangle
+
+/* POLYHEDRALSURFACE */
+
+geom_polyhedralsurface :
+        POLYHEDRALSURFACE { alloc_polyhedralsurface(); } polyhedralsurface { pop(); }
+        |
+        POLYHEDRALSURFACEM { set_zm(0, 1); alloc_polyhedralsurface(); }
+                polyhedralsurface { pop();}
+
+polyhedralsurface :
+        empty
+        |
+        { alloc_counter(); } LPAREN polyhedralsurface_int RPAREN { pop(); }
+
+polyhedralsurface_int :
+        non_empty_polygon_one_ring
+        |
+        polyhedralsurface_int COMMA non_empty_polygon_one_ring
+
+non_empty_polygon_one_ring :
+        { alloc_polygon(); } polygon_one_ring_1  { pop(); }
+
+polygon_one_ring_1 :
+        { alloc_counter(); } LPAREN linestring_1 RPAREN { pop();}
+
 /* MULTISURFACE */
 
 geom_multisurface :
--- postgis-svn/lwgeom/wktparse.lex	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/wktparse.lex	2007-09-18 15:54:52.000000000 +0200
@@ -52,6 +52,10 @@
 <*>MULTICURVEM { return MULTICURVEM; }
 <*>MULTIPOLYGON { return MULTIPOLYGON; }
 <*>MULTIPOLYGONM { return MULTIPOLYGONM; }
+<*>TIN { return TIN; }
+<*>TINM { return TINM; }
+<*>POLYHEDRALSURFACE { return POLYHEDRALSURFACE; }
+<*>POLYHEDRALSURFACEM { return POLYHEDRALSURFACEM; }
 <*>MULTISURFACE { return MULTISURFACE; }
 <*>MULTISURFACEM { return MULTISURFACEM; }
 <*>GEOMETRYCOLLECTION { return GEOMETRYCOLLECTION; }
--- postgis-svn/lwgeom/lwtin.c	1970-01-01 01:00:00.000000000 +0100
+++ postgis-patch/lwgeom/lwtin.c	2007-09-19 14:15:14.000000000 +0200
@@ -0,0 +1,122 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * PostGIS - Spatial Types for PostgreSQL
+ * http://postgis.refractions.net
+ * Copyright 2001-2006 Refractions Research Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of the GNU General Public Licence. See the COPYING file.
+ * 
+ **********************************************************************/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include "liblwgeom.h"
+
+/*#define PGIS_DEBUG_CALLS 1 */
+
+LWTIN *
+lwtin_deserialize(uchar *srl)
+{
+	LWTIN *result;
+	LWGEOM_INSPECTED *insp;
+	int type = lwgeom_getType(srl[0]);
+	int i;
+
+#ifdef PGIS_DEBUG_CALLS
+	lwnotice("lwtin_deserialize called");
+#endif
+
+	if ( type != TINTYPE ) 
+	{
+		lwerror("lwtin_deserialize called on NON tin: %d",
+			type);
+		return NULL;
+	}
+
+	insp = lwgeom_inspect(srl);
+
+	result = lwalloc(sizeof(LWTIN));
+	result->type = insp->type;
+	result->SRID = insp->SRID;
+	result->ngeoms = insp->ngeometries;
+	result->geoms = lwalloc(sizeof(LWPOLY *)*insp->ngeometries);
+
+	if (lwgeom_hasBBOX(srl[0]))
+	{
+		result->bbox = lwalloc(sizeof(BOX2DFLOAT4));
+		memcpy(result->bbox, srl+1, sizeof(BOX2DFLOAT4));
+	}
+	else result->bbox = NULL;
+
+	for (i=0; i<insp->ngeometries; i++)
+	{
+		result->geoms[i] = lwpoly_deserialize(insp->sub_geoms[i]);
+		if ( TYPE_NDIMS(result->geoms[i]->type) != TYPE_NDIMS(result->type) )
+		{
+			lwerror("Mixed dimensions (multipoly:%d, poly%d:%d)",
+				TYPE_NDIMS(result->type), i,
+				TYPE_NDIMS(result->geoms[i]->type)
+			);
+			return NULL;
+		}
+	}
+
+	return result;
+}
+
+/*
+ * Add 'what' at position 'where'.
+ * where=0 == prepend
+ * where=-1 == append
+ * Returns a MULTIPOLY or a COLLECTION
+ */
+LWGEOM *
+lwtin_add(const LWTIN *to, uint32 where, const LWGEOM *what)
+{
+	LWCOLLECTION *col;
+	LWGEOM **geoms;
+	int newtype;
+	uint32 i;
+
+	if ( where == -1 ) where = to->ngeoms;
+	else if ( where < -1 || where > to->ngeoms )
+	{
+		lwerror("lwtin_add: add position out of range %d..%d",
+			-1, to->ngeoms);
+		return NULL;
+	}
+
+	/* dimensions compatibility are checked by caller */
+
+	/* Construct geoms array */
+	geoms = lwalloc(sizeof(LWGEOM *)*(to->ngeoms+1));
+	for (i=0; i<where; i++)
+	{
+		geoms[i] = lwgeom_clone((LWGEOM *)to->geoms[i]);
+	}
+	geoms[where] = lwgeom_clone(what);
+	for (i=where; i<to->ngeoms; i++)
+	{
+		geoms[i+1] = lwgeom_clone((LWGEOM *)to->geoms[i]);
+	}
+
+	
+	if ( TYPE_GETTYPE(what->type)==POLYGONTYPE){
+		if( lwgeom_as_lwpoly(what)->nrings==1 && 
+		lwgeom_as_lwpoly(what)->rings[0]->npoints==4) newtype = TINTYPE;
+	}
+	else if ( TYPE_GETTYPE(what->type) == POLYGONTYPE) newtype = MULTIPOLYGONTYPE;
+	else newtype = COLLECTIONTYPE;
+	
+	/*newtype = TINTYPE;	*/
+
+	col = lwcollection_construct(newtype,
+		to->SRID, NULL,
+		to->ngeoms+1, geoms);
+	
+	return (LWGEOM *)col;
+
+}
--- postgis-svn/lwgeom/lwpolyhedralsurf.c	1970-01-01 01:00:00.000000000 +0100
+++ postgis-patch/lwgeom/lwpolyhedralsurf.c	2007-09-19 14:15:07.000000000 +0200
@@ -0,0 +1,121 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * PostGIS - Spatial Types for PostgreSQL
+ * http://postgis.refractions.net
+ * Copyright 2001-2006 Refractions Research Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of the GNU General Public Licence. See the COPYING file.
+ * 
+ **********************************************************************/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include "liblwgeom.h"
+
+/*#define PGIS_DEBUG_CALLS 1 */
+
+LWPOLYHEDRALSURFACE *
+lwpolyhedralsurface_deserialize(uchar *srl)
+{
+	LWPOLYHEDRALSURFACE *result;
+	LWGEOM_INSPECTED *insp;
+	int type = lwgeom_getType(srl[0]);
+	int i;
+
+#ifdef PGIS_DEBUG_CALLS
+	lwnotice("lwpolyhedralsurface_deserialize called");
+#endif
+
+	if ( type != POLYHEDRALSURFACETYPE ) 
+	{
+		lwerror("lwpolyhedralsurface_deserialize called on NON tin: %d",
+			type);
+		return NULL;
+	}
+
+	insp = lwgeom_inspect(srl);
+
+	result = lwalloc(sizeof(LWPOLYHEDRALSURFACE));
+	result->type = insp->type;
+	result->SRID = insp->SRID;
+	result->ngeoms = insp->ngeometries;
+	result->geoms = lwalloc(sizeof(LWPOLY *)*insp->ngeometries);
+
+	if (lwgeom_hasBBOX(srl[0]))
+	{
+		result->bbox = lwalloc(sizeof(BOX2DFLOAT4));
+		memcpy(result->bbox, srl+1, sizeof(BOX2DFLOAT4));
+	}
+	else result->bbox = NULL;
+
+	for (i=0; i<insp->ngeometries; i++)
+	{
+		result->geoms[i] = lwpoly_deserialize(insp->sub_geoms[i]);
+		if ( TYPE_NDIMS(result->geoms[i]->type) != TYPE_NDIMS(result->type) )
+		{
+			lwerror("Mixed dimensions (multipoly:%d, poly%d:%d)",
+				TYPE_NDIMS(result->type), i,
+				TYPE_NDIMS(result->geoms[i]->type)
+			);
+			return NULL;
+		}
+	}
+
+	return result;
+}
+
+/*
+ * Add 'what' at position 'where'.
+ * where=0 == prepend
+ * where=-1 == append
+ * Returns a MULTIPOLY or a COLLECTION
+ */
+LWGEOM *
+lwpolyhedralsurface_add(const LWPOLYHEDRALSURFACE *to, uint32 where, const LWGEOM *what)
+{
+	LWCOLLECTION *col;
+	LWGEOM **geoms;
+	int newtype;
+	uint32 i;
+
+	if ( where == -1 ) where = to->ngeoms;
+	else if ( where < -1 || where > to->ngeoms )
+	{
+		lwerror("lwmline_add: add position out of range %d..%d",
+			-1, to->ngeoms);
+		return NULL;
+	}
+
+	/* dimensions compatibility are checked by caller */
+
+	/* Construct geoms array */
+	geoms = lwalloc(sizeof(LWGEOM *)*(to->ngeoms+1));
+	for (i=0; i<where; i++)
+	{
+		geoms[i] = lwgeom_clone((LWGEOM *)to->geoms[i]);
+	}
+	geoms[where] = lwgeom_clone(what);
+	for (i=where; i<to->ngeoms; i++)
+	{
+		geoms[i+1] = lwgeom_clone((LWGEOM *)to->geoms[i]);
+	}
+
+	
+	if ( TYPE_GETTYPE(what->type)==POLYGONTYPE){
+                if( lwgeom_as_lwpoly(what)->nrings==1) newtype = POLYHEDRALSURFACETYPE;
+	}
+	else if ( TYPE_GETTYPE(what->type) == POLYGONTYPE ) newtype = MULTIPOLYGONTYPE;
+	else newtype = COLLECTIONTYPE;
+	
+	newtype = POLYHEDRALSURFACETYPE;	
+
+	col = lwcollection_construct(newtype,
+		to->SRID, NULL,
+		to->ngeoms+1, geoms);
+	
+	return (LWGEOM *)col;
+
+}
--- postgis-svn/lwgeom/lwgeom_x3d.c	1970-01-01 01:00:00.000000000 +0100
+++ postgis-patch/lwgeom/lwgeom_x3d.c	2007-09-20 16:09:25.000000000 +0200
@@ -0,0 +1,537 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * PostGIS - Spatial Types for PostgreSQL
+ * http://postgis.refractions.net
+ * Copyright 2001-2003 Refractions Research Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of hte GNU General Public Licence. See the COPYING file.
+ *
+ **********************************************************************
+ *
+ * X3D output routines.
+ *
+ **********************************************************************/
+
+
+#include "postgres.h"
+#include "executor/spi.h"
+
+#include "lwgeom_pg.h"
+#include "liblwgeom.h"
+
+Datum LWGEOM_asX3D(PG_FUNCTION_ARGS);
+char *geometry_to_x3d(uchar *srl, char *srs);
+
+static size_t asx3d_point_size(LWPOINT *point);
+static char *asx3d_point(LWPOINT *point);
+static size_t asx3d_line_size(LWLINE *line);
+static char *asx3d_line(LWLINE *line);
+static size_t asx3d_poly_size(LWPOLY *poly);
+static char *asx3d_poly(LWPOLY *poly);
+static size_t asx3d_inspected_size(LWGEOM_INSPECTED *geom);
+
+static char *asx3d_inspected(LWGEOM_INSPECTED *geom);
+static size_t pointArray_X3Dsize(POINTARRAY *pa);
+static size_t pointArray_toX3D(POINTARRAY *pa, char *buf);
+static size_t pointArrayPoly_toX3D(POINTARRAY *pa, char *buf);
+
+
+
+#define DEF_PRECISION 15
+/* Add dot, sign, exponent sign, 'e', exponent digits */
+#define SHOW_DIGS (precision + 10)
+
+/* Globals */
+int precision;
+
+
+/**
+ * Encode feature in X3D 
+ */
+PG_FUNCTION_INFO_V1(LWGEOM_asX3D);
+Datum LWGEOM_asX3D(PG_FUNCTION_ARGS)
+{
+	PG_LWGEOM *geom;
+	char *x3d;
+	text *result;
+	int len;
+		
+	precision = DEF_PRECISION;
+
+	if ( PG_ARGISNULL(0) ) PG_RETURN_NULL();
+
+	geom = (PG_LWGEOM *)PG_DETOAST_DATUM(PG_GETARG_DATUM(0));
+
+	/* Get precision (if provided)  */
+	if ( PG_NARGS() > 1 && ! PG_ARGISNULL(1) )
+			precision = PG_GETARG_INT32(1);
+	
+	if ( precision < 1 || precision > 15 )
+	{
+		elog(ERROR, "Precision out of range 1..15");
+		PG_RETURN_NULL();
+	}
+
+	x3d = geometry_to_x3d(SERIALIZED_FORM(geom), NULL);
+	PG_FREE_IF_COPY(geom, 0);
+
+	len = strlen(x3d) + VARHDRSZ;
+
+	result = palloc(len);
+	SET_VARSIZE(result, len);
+
+	memcpy(VARDATA(result), x3d, len-VARHDRSZ);
+
+	pfree(x3d);
+
+	PG_RETURN_POINTER(result);
+}
+
+/* takes a GEOMETRY and returns a X3D representation */
+char *
+geometry_to_x3d(uchar *geom, char *srs)
+{
+	int type;
+	LWPOINT *point;
+	LWLINE *line;
+	LWPOLY *poly;
+	LWGEOM_INSPECTED *inspected;
+	
+	type = lwgeom_getType(geom[0]);
+	if(!lwgeom_hasZ(geom[0])){
+		elog(ERROR, "asX3D: 'the geometry is not in 3 dimensions !'");
+	}
+
+
+
+	switch (type)
+	{
+
+		case POINTTYPE:
+			point = lwpoint_deserialize(geom);
+			return asx3d_point(point);
+
+		case LINETYPE:
+			line = lwline_deserialize(geom);
+			return asx3d_line(line);
+
+		case POLYGONTYPE:
+			poly = lwpoly_deserialize(geom);
+			return asx3d_poly(poly);
+
+		default:
+			inspected = lwgeom_inspect(geom);
+			return asx3d_inspected(inspected);
+	}
+}
+
+static size_t
+asx3d_point_size(LWPOINT *point)
+{
+	int size;
+	size = pointArray_X3Dsize(point->point);
+	size += sizeof("<Coordinate point''/");
+	return size;
+}
+
+static size_t
+asx3d_point_buf(LWPOINT *point, char *output)
+{
+	char *ptr = output;
+	ptr += sprintf(ptr, "<Coordinate point=\"");
+	ptr += pointArray_toX3D(point->point, ptr);
+	ptr += sprintf(ptr, "\"/>\n");
+
+	return (ptr-output);
+}
+
+static char *
+asx3d_point(LWPOINT *point)
+{
+	char *output;
+	int size;
+	
+	size = asx3d_point_size(point);
+	output = palloc(size);
+	asx3d_point_buf(point, output);
+	return output;
+}
+
+static size_t
+asx3d_line_size(LWLINE *line )
+{
+	int size;
+	size = pointArray_X3Dsize(line->points);
+	size += sizeof("<LineSet vertexCount=''><Coordinate point=''/></LineSet>");
+	return size;
+}
+
+static size_t
+asx3d_line_buf(LWLINE *line, char *output)
+{
+	char *ptr=output;
+	int vcount = (line->points)->npoints;
+	ptr += sprintf(ptr, "<LineSet vertexCount=\"%d\">\n",vcount);
+	ptr += sprintf(ptr, "<Coordinate point=\"");
+	ptr += pointArray_toX3D(line->points, ptr);
+	ptr += sprintf(ptr,"\"/>\n");
+	ptr += sprintf(ptr, "</LineSet>\n");
+
+	return (ptr-output);
+}
+
+static char *
+asx3d_line(LWLINE *line)
+{
+	char *output;
+	int size;
+
+	size = asx3d_line_size(line);
+	output = palloc(size);
+	asx3d_line_buf(line, output);
+	return output;
+}
+
+static size_t
+asx3d_poly_size(LWPOLY *poly)
+{
+	size_t size;
+	int i;
+	if(poly->nrings>1){
+                        elog(ERROR, "asX3D: in X3D, polygons must have just one ring.");
+        }
+	size += sizeof("<IndexedFaceSet coordIndex=''");
+	size += 10*poly->rings[0]->npoints + poly->rings[0]->npoints -1;
+	size += sizeof("<Coordinate point=''/></IndexedFaceSet");
+	size += pointArray_X3Dsize(poly->rings[0]);
+
+	return size;
+}
+
+static size_t
+asx3d_poly_buf(LWPOLY *poly, char *output)
+{
+	int i;
+	char *ptr=output;
+	
+	ptr += sprintf(ptr, "<IndexedFaceSet coordIndex=\"");
+	for(i = 0;i<poly->rings[0]->npoints - 1 ;i++){
+		if(i)ptr += sprintf(ptr,",");
+		ptr += sprintf(ptr,"%d", i);
+	}
+	ptr += sprintf(ptr,"\">\n");
+	ptr += sprintf(ptr,"<Coordinate point=\"");
+	ptr += pointArrayPoly_toX3D(poly->rings[0], ptr);
+	ptr += sprintf(ptr,"\"/>\n");
+	ptr += sprintf(ptr,"</IndexedFaceSet>\n");
+
+	return (ptr-output);
+}
+
+static char *
+asx3d_poly(LWPOLY *poly)
+{
+	if(poly->nrings>1){
+		elog(ERROR, "asX3D: in X3D, polygons must have just one ring ");
+	}
+	char *output;
+	int size;
+
+	size = asx3d_poly_size(poly);
+	output = palloc(size);
+	asx3d_poly_buf(poly, output);
+	return output;
+}
+
+/*
+ * Compute max size required for X3D version of this 
+ * inspected geometry. Will recurse when needed.
+ * Don't call this with single-geoms inspected.
+ */
+static size_t
+asx3d_inspected_size(LWGEOM_INSPECTED *insp)
+{
+	int i;
+	int j;
+	size_t size;
+
+	size = sizeof("");
+
+	for (i=0; i<insp->ngeometries; i++)
+	{
+		LWPOINT *point;
+		LWLINE *line;
+		LWPOLY *poly;
+		LWGEOM_INSPECTED *subinsp;
+		uchar *subgeom;
+
+		if (lwgeom_getType(insp->type)==MULTIPOINTTYPE){
+			size += sizeof("<Coordinate point''/");
+			return size;
+		}
+		if (lwgeom_getType(insp->type)==MULTILINETYPE){
+			size += sizeof("<LineSet vertexCount=''><Coordinate point=\"\"/></LineSet>");
+			return size;
+		}
+		if (lwgeom_getType(insp->type)==MULTIPOLYGONTYPE || 
+		lwgeom_getType(insp->type)==POLYHEDRALSURFACETYPE ||
+                lwgeom_getType(insp->type)==TINTYPE){
+			int nbpts=0;
+			for(j=0; j<insp->ngeometries; j++)
+			{
+				if (lwgeom_getpoly_inspected(insp, i)->nrings>1){
+				elog(ERROR, "asX3D: in X3D, polygons must have just one ring.");
+				}
+				else
+				{
+				nbpts +=lwgeom_getpoly_inspected(insp, j)->rings[0]->npoints;
+				size += pointArray_X3Dsize(lwgeom_getpoly_inspected(insp, j)->rings[0]);
+				}
+			}
+			size += sizeof("<IndexedFaceSet coordIndex=''");
+		        size += (nbpts - insp->ngeometries)*10 +
+					2*(insp->ngeometries - 1) +nbpts -2;
+                        
+		        size += sizeof("<Coordinate point=\"\"/></IndexedFaceSet");
+			
+			return size;
+		}
+		if ((point=lwgeom_getpoint_inspected(insp, i)))
+		{
+			size += pointArray_X3Dsize(point->point);
+			pfree_point(point);
+			return size;
+		}
+		else if ((line=lwgeom_getline_inspected(insp, i)))
+		{
+			size +=pointArray_X3Dsize(line->points);
+			pfree_line(line);
+			return size;
+		}
+		else if ((poly=lwgeom_getpoly_inspected(insp, i)))
+		{
+			for (i=0; i<poly->nrings; i++)
+                	size += pointArray_X3Dsize(poly->rings[i]);
+			pfree_polygon(poly);
+			return size;
+		}
+		else if (lwgeom_getType(insp->type)==COLLECTIONTYPE)
+		{
+			subgeom = lwgeom_getsubgeometry_inspected(insp, i);
+			subinsp = lwgeom_inspect(subgeom);
+			size += asx3d_inspected_size(subinsp);
+			pfree_inspected(subinsp);
+			return size;
+		}
+		else
+		{
+			elog(ERROR, 
+			"asX3D: this type of geometry is not supported by the function asX3D.");
+		}
+	}
+
+	return size;
+}
+
+/*
+ * Don't call this with single-geoms inspected!
+ */
+static size_t
+asx3d_inspected_buf(LWGEOM_INSPECTED *insp, char *output)
+{
+	int i;
+	int j;
+	char *ptr;
+	ptr = output;
+
+	if(lwgeom_getType(insp->type)==MULTIPOINTTYPE)
+	{
+		ptr += sprintf(ptr, "<Coordinate point=\"");
+		for (i=0; i<insp->ngeometries; i++)
+		{
+			if(i)
+			{
+				ptr+=sprintf(ptr, ",");
+			}
+			ptr += pointArray_toX3D(lwgeom_getpoint_inspected(insp,i)->point, ptr);
+		}
+		ptr += sprintf(ptr, "\"/>\n");
+		return (ptr-output);
+	}
+	if (lwgeom_getType(insp->type)==MULTILINETYPE)
+	{
+		ptr += sprintf(ptr, "<LineSet vertexCount=\"");
+		for (i=0; i<insp->ngeometries; i++)
+		{
+			if (i)
+			{
+				ptr += sprintf(ptr," ");
+			}
+			int n = lwgeom_getline_inspected(insp,i)->points->npoints;
+			ptr += sprintf(ptr, "%d",n);
+		}
+		ptr += sprintf(ptr, "\">\n");
+		ptr += sprintf(ptr, "<Coordinate point=\"");
+		for (i=0; i<insp->ngeometries; i++)
+		{
+	       	        if(i)
+			{
+				ptr+=sprintf(ptr, ",");
+			}
+	                ptr += pointArray_toX3D(lwgeom_getline_inspected(insp,i)->points, ptr);
+       	        }
+        	ptr += sprintf(ptr, "\"/>\n");
+		ptr += sprintf(ptr, "</LineSet>\n");
+		return (ptr-output);
+	}
+
+	if (lwgeom_getType(insp->type)==MULTIPOLYGONTYPE ||
+	lwgeom_getType(insp->type)==POLYHEDRALSURFACETYPE ||
+        lwgeom_getType(insp->type)==TINTYPE){
+		ptr += sprintf(ptr, "<IndexedFaceSet coordIndex=\"");
+		int ind=0;
+		for (i=0; i<insp->ngeometries; i++)
+		{
+			if (i)
+			{
+				ptr += sprintf(ptr, ",-1");
+			}
+			for(j=0; j<lwgeom_getpoly_inspected(insp,i)->rings[0]->npoints-1; j++)
+			{
+				if(ind)
+				{
+					ptr += sprintf(ptr, ",");
+				}
+				ptr += sprintf(ptr, "%d",ind);
+				ind++;
+			}
+		}
+		ptr += sprintf(ptr, "\">\n");
+		ptr += sprintf(ptr, "<Coordinate point=\"");
+		for (i=0; i<insp->ngeometries; i++)
+	        {
+			if(i){ptr+=sprintf(ptr, ",");}
+			ptr += pointArrayPoly_toX3D(lwgeom_getpoly_inspected(insp,i)->rings[0],
+			ptr);
+		}
+		ptr += sprintf(ptr, "\"/>\n");
+	        ptr += sprintf(ptr, "</IndexedFaceSet>\n");
+		return (ptr-output);
+	}
+	else
+	{	
+		/*type = GEOMETRYCOLLECTION */
+		/* It is decomposed in several geometries*/
+		for (i=0; i<insp->ngeometries; i++)
+		{
+			LWPOINT *point;
+			LWLINE *line;
+			LWPOLY *poly;
+			LWGEOM_INSPECTED *subinsp;
+			uchar *subgeom;
+				
+			if ((point=lwgeom_getpoint_inspected(insp, i)))
+			{
+				ptr += asx3d_point_buf(point, ptr);
+				pfree_point(point);
+			}
+			else if ((line=lwgeom_getline_inspected(insp, i)))
+			{
+				ptr += asx3d_line_buf(line, ptr);
+				pfree_line(line);
+			}
+			else if ((poly=lwgeom_getpoly_inspected(insp, i)))
+			{
+				ptr += asx3d_poly_buf(poly, ptr);
+				pfree_polygon(poly);
+			}
+			else
+			{
+				subgeom = lwgeom_getsubgeometry_inspected(insp, i);
+				subinsp = lwgeom_inspect(subgeom);
+				ptr += asx3d_inspected_buf(subinsp, ptr);
+				pfree_inspected(subinsp);
+			}
+		}
+	}
+	return (ptr-output);
+}
+
+/*
+ * Don't call this with single-geoms inspected!
+ */
+static char *
+asx3d_inspected(LWGEOM_INSPECTED *insp)
+{
+	char *x3d;
+	size_t size;
+	size = asx3d_inspected_size(insp);
+	x3d = palloc(size);
+	asx3d_inspected_buf(insp, x3d);
+	return x3d;
+}
+
+
+/*
+ * Returns maximum size of rendered pointarray in bytes.
+ */
+static size_t
+pointArray_X3Dsize(POINTARRAY *pa)
+{
+	return TYPE_NDIMS(pa->dims) * pa->npoints * (SHOW_DIGS+(TYPE_NDIMS(pa->dims)-1));
+}
+
+static size_t
+pointArray_toX3D(POINTARRAY *pa, char *output)
+{
+	int i;
+	char *ptr;
+
+	ptr = output;
+	{
+		for (i=0; i<pa->npoints; i++)
+		{
+			POINT4D pt;
+			getPoint4d_p(pa, i, &pt);
+			if ( i ) ptr += sprintf(ptr, ",");
+			ptr += sprintf(ptr, "%.*g %.*g %.*g",
+				precision, pt.x,
+				precision, pt.y,
+				precision, pt.z);
+			
+		}
+	}
+
+	return ptr-output;
+}
+
+/*
+ * Same function but called when type is POLYGON
+ */
+
+static size_t
+pointArrayPoly_toX3D(POINTARRAY *pa, char *output)
+{
+        int i;
+        char *ptr;
+
+        ptr = output;
+        {
+                for (i=0; i<pa->npoints-1; i++)
+                {
+                        POINT4D pt;
+                        getPoint4d_p(pa, i, &pt);
+                        if ( i ) ptr += sprintf(ptr, ",");
+                        ptr += sprintf(ptr, "%.*g %.*g %.*g",
+                                precision, pt.x,
+                                precision, pt.y,
+                                precision, pt.z);
+
+                }
+        }
+
+        return ptr-output;
+}
+
--- postgis-svn/lwgeom/wktunparse.c	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/wktunparse.c	2007-09-18 15:33:40.000000000 +0200
@@ -227,13 +227,7 @@
 	
 	if ( type  == POINTTYPE )
 		return output_point(++geom,suppress);
-	else if ( type == POINTTYPEI ){
-		lwgi++;
-		geom=output_point(++geom,0);
-		lwgi--;
-		return geom;
-	}
-	
+		
 	return output_wkt(geom,suppress);
 }
 
@@ -391,7 +385,23 @@
 			}
 			geom = output_collection(geom,output_wkt,2);
 			break;
-                case MULTISURFACETYPE:
+                case TINTYPE:
+                        if ( supress < 2 )
+                        {
+                                if (writeM) write_str("TINM");
+                                else write_str("TIN");
+                        }
+                        geom = output_collection(geom,output_wkt,2);
+                        break;
+		case POLYHEDRALSURFACETYPE:
+                        if ( supress < 2 )
+                        {
+                                if (writeM) write_str("POLYHEDRALSURFACEM");
+                                else write_str("POLYHEDRALSURFACE");
+                        }
+                        geom = output_collection(geom,output_wkt,2);
+                        break;
+		case MULTISURFACETYPE:
                         if ( supress < 2)
                         {
                                 if (writeM) write_str("MULTISURFACEM");
@@ -408,36 +418,6 @@
 			geom = output_collection(geom,output_wkt,1);
 			break;
 
-		case POINTTYPEI:
-			if ( supress < 2 )
-			{
-				if (writeM) write_str("POINTM");
-				else write_str("POINT");
-			}
-			lwgi++;
-			geom=output_single(geom,0);
-			lwgi--;
-			break;
-		case LINETYPEI:
-			if ( supress < 2 )
-			{
-				if (writeM) write_str("LINESTRINGM");
-				else write_str("LINESTRING");
-			}
-			lwgi++;
-			geom = output_collection(geom,output_point,0);
-			lwgi--;
-			break;
-		case POLYGONTYPEI:
-			if ( supress < 2 )
-			{
-				if (writeM) write_str("POLYGONM");
-				else write_str("POLYGON");
-			}
-			lwgi++;
-			geom =output_collection(geom,output_collection_2,0);
-			lwgi--;
-			break;
 	}
 	return geom;
 }
@@ -635,29 +615,6 @@
 			geom = output_wkb_collection(geom,output_wkb);
 			break;
 
-		/*
-			These don't output standard wkb at the moment
-			the output and integer version.
-
-			however you could run it through the wkt parser
-			for a lwg and then output that.  There should
-			also be a force_to_real_(lwgi)
-		*/
-		case POINTTYPEI:
-			lwgi++;
-			geom=output_wkb_point(geom);
-			lwgi--;
-			break;
-		case LINETYPEI:
-			lwgi++;
-			geom = output_wkb_collection(geom,output_wkb_point);
-			lwgi--;
-			break;
-		case POLYGONTYPEI:
-			lwgi++;
-			geom = output_wkb_collection(geom,output_wkb_collection_2);
-			lwgi--;
-			break;
 	}
 	return geom;
 }
--- postgis-svn/lwgeom/lwpostgis.sql.in	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/lwpostgis.sql.in	2007-09-18 15:13:41.000000000 +0200
@@ -4720,6 +4720,48 @@
 	LANGUAGE 'SQL' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
 
 -----------------------------------------------------------------------
+-- X3D OUTPUT
+-----------------------------------------------------------------------
+-- AsX3D(geom, precision, version)
+-- Deprecation in 1.2.3
+CREATEFUNCTION AsX3D(geometry, int4, int4)
+        RETURNS TEXT
+        AS '@MODULE_FILENAME@','LWGEOM_asX3D'
+        LANGUAGE 'C' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
+
+-- Availability: 1.2.2
+CREATEFUNCTION ST_AsX3D(geometry, int4, int4)
+        RETURNS TEXT
+        AS '@MODULE_FILENAME@','LWGEOM_asX3D'
+        LANGUAGE 'C' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
+
+-- AsX3D(geom, precision) / version=2
+-- Deprecation in 1.2.3
+CREATEFUNCTION AsX3D(geometry, int4)
+        RETURNS TEXT
+        AS '@MODULE_FILENAME@','LWGEOM_asX3D'
+        LANGUAGE 'C' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
+
+-- Availability: 1.2.2
+CREATEFUNCTION ST_AsX3D(geometry, int4)
+        RETURNS TEXT
+        AS '@MODULE_FILENAME@','LWGEOM_asX3D'
+        LANGUAGE 'C' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
+
+-- AsX3D(geom) / precision=15 version=2
+-- Deprecation in 1.2.3
+CREATEFUNCTION AsX3D(geometry)
+        RETURNS TEXT
+        AS '@MODULE_FILENAME@','LWGEOM_asX3D'
+        LANGUAGE 'C' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
+
+-- Availabiltiy: 1.2.2
+CREATEFUNCTION ST_AsX3D(geometry)
+        RETURNS TEXT
+        AS '@MODULE_FILENAME@','LWGEOM_asX3D'
+        LANGUAGE 'C' _IMMUTABLE_STRICT; -- WITH (isstrict,iscachable);
+
+-----------------------------------------------------------------------
 -- KML OUTPUT
 -----------------------------------------------------------------------
 -- AsUKML(geom, precision, version)
--- postgis-svn/lwgeom/lwgeom_debug.c	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/lwgeom_debug.c	2007-09-19 14:07:30.000000000 +0200
@@ -28,6 +28,8 @@
 		case MULTIPOINTTYPE:
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
+		case TINTYPE:
+		case POLYHEDRALSURFACETYPE:
 		case COLLECTIONTYPE:
 			return lwcollection_summary((LWCOLLECTION *)lwgeom, offset);
 		default:
--- postgis-svn/lwgeom/Makefile	2007-09-20 16:22:47.000000000 +0200
+++ postgis-patch/lwgeom/Makefile	2007-09-18 15:13:41.000000000 +0200
@@ -74,9 +74,9 @@
 override CFLAGS += $(CSTAR_FLAGS)
 override CXXFLAGS += $(CSTAR_FLAGS)
 
-SA_OBJS=measures.o box2d.o ptarray.o lwgeom_api.o lwgeom.o lwpoint.o lwline.o lwpoly.o lwmpoint.o lwmline.o lwmpoly.o lwcollection.o $(GEOS_WRAPPER) $(JTS_WRAPPER) wktunparse.o lwgparse.o wktparse.tab.o lex.yy.o vsprintf.o
+SA_OBJS=measures.o box2d.o ptarray.o lwgeom_api.o lwgeom.o lwpoint.o lwline.o lwpoly.o lwmpoint.o lwmline.o lwmpoly.o lwpolyhedralsurf.o lwtin.o lwcollection.o $(GEOS_WRAPPER) $(JTS_WRAPPER) wktunparse.o lwgparse.o wktparse.tab.o lex.yy.o vsprintf.o
 
-OBJS=$(SA_OBJS) liblwgeom.o lwgeom_pg.o lwgeom_debug.o lwgeom_spheroid.o lwgeom_ogc.o lwgeom_functions_analytic.o $(JTS_OBJ) lwgeom_inout.o lwgeom_estimate.o lwgeom_functions_basic.o lwgeom_gist.o lwgeom_btree.o lwgeom_transform.o stringBuffer.o lwgeom_box.o lwgeom_box3d.o lwgeom_box2dfloat4.o lwgeom_chip.o lwgeom_svg.o lwgeom_gml.o lwgeom_kml.o lwgeom_triggers.o lwgeom_dump.o lwgeom_functions_lrs.o long_xact.o lwcurve.o lwcompound.o lwcurvepoly.o lwmcurve.o lwmsurface.o lwgeom_sqlmm.o lwgeom_rtree.o
+OBJS=$(SA_OBJS) liblwgeom.o lwgeom_pg.o lwgeom_debug.o lwgeom_spheroid.o lwgeom_ogc.o lwgeom_functions_analytic.o $(JTS_OBJ) lwgeom_inout.o lwgeom_estimate.o lwgeom_functions_basic.o lwgeom_gist.o lwgeom_btree.o lwgeom_transform.o stringBuffer.o lwgeom_box.o lwgeom_box3d.o lwgeom_box2dfloat4.o lwgeom_chip.o lwgeom_svg.o lwgeom_gml.o lwgeom_kml.o lwgeom_x3d.o lwgeom_triggers.o lwgeom_dump.o lwgeom_functions_lrs.o long_xact.o lwcurve.o lwcompound.o lwcurvepoly.o lwmcurve.o lwmsurface.o lwgeom_sqlmm.o lwgeom_rtree.o
 
 #OTHERS=y.output lex.yy.c wktparse.tab.c wktparse.tab.h lwpostgis.sql
 OTHERS=y.output postgis_geos_version.h
-------------- next part --------------
--- geos-svn/swig/geos.i.in	2007-09-24 16:30:27.000000000 +0200
+++ geos-patch/trunk/swig/geos.i.in	2007-09-24 16:50:49.000000000 +0200
@@ -49,6 +49,8 @@
     GEOS_MULTIPOINT,
     GEOS_MULTILINESTRING,
     GEOS_MULTIPOLYGON,
+    GEOS_TIN,
+    GEOS_POLYHEDRALSURFACE,
     GEOS_GEOMETRYCOLLECTION
 };
 
@@ -265,6 +267,8 @@
 %rename(MultiLineString) GeosMultiLineString;
 %rename(MultiLinearRing) GeosMultiLinearRing;
 %rename(MultiPolygon) GeosMultiPolygon;
+%rename(Tin) GeosTin;
+%rename(PolyhedralSurface) GeosPolyhedralSurface;
 %rename(WktReader) GeosWktReader;
 %rename(WktWriter) GeosWktWriter;
 %rename(WkbReader) GeosWkbReader;
@@ -284,6 +288,8 @@
 typedef void GeosMultiLineString;
 typedef void GeosMultiLinearRing;
 typedef void GeosMultiPolygon;
+typedef void GeosTin;
+typedef void GeosPolyhedralSurface;
 
 typedef void GeosWktReader;
 typedef void GeosWktWriter;
@@ -339,6 +345,12 @@
 	case GEOS_MULTIPOLYGON:
         $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), $descriptor(GeosMultiPolygon*), 0 | $owner);
         break;
+	case GEOS_TIN:
+        $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), $descriptor(GeosTin*), 0 | $owner);
+        break;
+	case GEOS_POLYHEDRALSURFACE:
+        $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), $descriptor(GeosPolyhedralSurface*), 0 | $owner);
+        break;
 	case GEOS_GEOMETRYCOLLECTION:
         $result = SWIG_NewPointerObj(SWIG_as_voidptr(result), $descriptor(GeosGeometryCollection*), 0 | $owner);
         break;
@@ -875,6 +887,32 @@
 }
 };
 
+class GeosTin: public GeosGeometryCollection
+{
+public:
+%extend
+{
+    ~GeosTin()
+    {
+        GEOSGeom geom = (GEOSGeom) self;
+        GEOSGeom_destroy(geom);
+    }
+}
+};
+
+class GeosPolyhedralSurface: public GeosGeometryCollection
+{
+public:
+%extend
+{
+    ~GeosPolyhedralSurface()
+    {
+        GEOSGeom geom = (GEOSGeom) self;
+        GEOSGeom_destroy(geom);
+    }
+}
+};
+
 
 // ==== Geometry Constructors ===========
 %newobject createPoint;
--- geos-svn/source/geom/PolyhedralSurface.cpp	1970-01-01 01:00:00.000000000 +0100
+++ geos-patch/trunk/source/geom/PolyhedralSurface.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -0,0 +1,107 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * GEOS - Geometry Engine Open Source
+ * http://geos.refractions.net
+ *
+ * Copyright (C) 2001-2002 Vivid Solutions Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of the GNU Lesser General Public Licence as published
+ * by the Free Software Foundation. 
+ * See the COPYING file for more information.
+ *
+ **********************************************************************/
+
+#include <geos/geom/Geometry.h>
+#include <geos/geom/LineString.h>
+#include <geos/geom/Polygon.h>
+#include <geos/geom/PolyhedralSurface.h>
+#include <geos/geom/MultiLineString.h>
+#include <geos/geom/GeometryFactory.h>
+#include <geos/geom/Dimension.h>
+
+#include <cassert>
+#include <string>
+#include <vector>
+
+#ifndef GEOS_INLINE
+# include "geos/geom/PolyhedralSurface.inl"
+#endif
+
+using namespace std;
+
+namespace geos {
+namespace geom { // geos::geom
+
+/*protected*/
+PolyhedralSurface::PolyhedralSurface(vector<Geometry *> *newPolys, const GeometryFactory *factory)
+	: GeometryCollection(newPolys,factory)
+{}
+
+PolyhedralSurface::~PolyhedralSurface(){}
+
+Dimension::DimensionType
+PolyhedralSurface::getDimension() const {
+	return Dimension::A; // area
+}
+
+int PolyhedralSurface::getBoundaryDimension() const {
+	return 1;
+}
+
+string PolyhedralSurface::getGeometryType() const {
+	return "PolyhedralSurface";
+}
+
+bool PolyhedralSurface::isSimple() const {
+	return true;
+}
+
+Geometry* PolyhedralSurface::getBoundary() const {
+	if (isEmpty()) {
+		return getFactory()->createGeometryCollection(NULL);
+	}
+	vector<Geometry *>* allRings=new vector<Geometry *>();
+	for (size_t i = 0; i < geometries->size(); i++) {
+		Polygon *pg=dynamic_cast<Polygon *>((*geometries)[i]);
+		assert(pg);
+		Geometry *g=pg->getBoundary();
+		LineString *ls=dynamic_cast<LineString *>(g);
+		if ( ls )
+		{
+			allRings->push_back(ls);
+		}
+		else
+		{
+			GeometryCollection* rings=(GeometryCollection*)g;
+			for (size_t j=0, jn=rings->getNumGeometries();
+					j<jn; ++j)
+			{
+				allRings->push_back(rings->getGeometryN(j)->clone());
+			}
+			delete g;
+		}
+	}
+
+	Geometry *ret=getFactory()->createMultiLineString(allRings);
+	return ret;
+}
+
+bool
+PolyhedralSurface::equalsExact(const Geometry *other, double tolerance) const
+{
+    if (!isEquivalentClass(other)) {
+      return false;
+    }
+	return GeometryCollection::equalsExact(other, tolerance);
+}
+GeometryTypeId
+PolyhedralSurface::getGeometryTypeId() const {
+	return GEOS_POLYHEDRALSURFACE;
+}
+
+} // namespace geos::geom
+} // namespace geos
+
+
--- geos-svn/source/geom/Tin.cpp	1970-01-01 01:00:00.000000000 +0100
+++ geos-patch/trunk/source/geom/Tin.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -0,0 +1,107 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * GEOS - Geometry Engine Open Source
+ * http://geos.refractions.net
+ *
+ * Copyright (C) 2001-2002 Vivid Solutions Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of the GNU Lesser General Public Licence as published
+ * by the Free Software Foundation. 
+ * See the COPYING file for more information.
+ *
+ **********************************************************************/
+
+#include <geos/geom/Geometry.h>
+#include <geos/geom/LineString.h>
+#include <geos/geom/Polygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/MultiLineString.h>
+#include <geos/geom/GeometryFactory.h>
+#include <geos/geom/Dimension.h>
+
+#include <cassert>
+#include <string>
+#include <vector>
+
+#ifndef GEOS_INLINE
+# include "geos/geom/Tin.inl"
+#endif
+
+using namespace std;
+
+namespace geos {
+namespace geom { // geos::geom
+
+/*protected*/
+Tin::Tin(vector<Geometry *> *newPolys, const GeometryFactory *factory)
+	: GeometryCollection(newPolys,factory)
+{} 
+
+Tin::~Tin(){}
+
+Dimension::DimensionType
+Tin::getDimension() const {
+	return Dimension::A; // area
+}
+
+int Tin::getBoundaryDimension() const {
+	return 1;
+}
+
+string Tin::getGeometryType() const {
+	return "Tin";
+}
+
+bool Tin::isSimple() const {
+	return true;
+}
+
+Geometry* Tin::getBoundary() const {
+	if (isEmpty()) {
+		return getFactory()->createGeometryCollection(NULL);
+	}
+	vector<Geometry *>* allRings=new vector<Geometry *>();
+	for (size_t i = 0; i < geometries->size(); i++) {
+		Polygon *pg=dynamic_cast<Polygon *>((*geometries)[i]);
+		assert(pg);
+		Geometry *g=pg->getBoundary();
+		LineString *ls=dynamic_cast<LineString *>(g);
+		if ( ls )
+		{
+			allRings->push_back(ls);
+		}
+		else
+		{
+			GeometryCollection* rings=(GeometryCollection*)g;
+			for (size_t j=0, jn=rings->getNumGeometries();
+					j<jn; ++j)
+			{
+				allRings->push_back(rings->getGeometryN(j)->clone());
+			}
+			delete g;
+		}
+	}
+
+	Geometry *ret=getFactory()->createMultiLineString(allRings);
+	return ret;
+}
+
+bool
+Tin::equalsExact(const Geometry *other, double tolerance) const
+{
+    if (!isEquivalentClass(other)) {
+      return false;
+    }
+	return GeometryCollection::equalsExact(other, tolerance);
+}
+GeometryTypeId
+Tin::getGeometryTypeId() const {
+	return GEOS_TIN;
+}
+
+} // namespace geos::geom
+} // namespace geos
+
+
--- geos-svn/source/geom/util/GeometryEditor.cpp	2007-09-24 16:30:19.000000000 +0200
+++ geos-patch/trunk/source/geom/util/GeometryEditor.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -18,6 +18,8 @@
 #include <geos/geom/Geometry.h>
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/CoordinateSequence.h>
 #include <geos/geom/Polygon.h>
@@ -74,6 +76,8 @@
 	if ((typeid(*geometry)==typeid(GeometryCollection)) ||
 				(typeid(*geometry)==typeid(MultiPoint)) ||
 				(typeid(*geometry)==typeid(MultiPolygon)) ||
+				(typeid(*geometry)==typeid(Tin)) ||
+				(typeid(*geometry)==typeid(PolyhedralSurface)) ||
 				(typeid(*geometry)==typeid(MultiLineString))) {
 		return editGeometryCollection((const GeometryCollection*) geometry, operation);
 	}
@@ -158,6 +162,14 @@
 		delete newCollection;
 		return factory->createMultiPolygon(geometries);
 	}
+	else if (typeid(*newCollection)==typeid(Tin)) {
+                delete newCollection;
+                return factory->createTin(geometries);
+        }
+	else if (typeid(*newCollection)==typeid(PolyhedralSurface)) {
+                delete newCollection;
+                return factory->createPolyhedralSurface(geometries);
+        }
 	else {
 		delete newCollection;
 		return factory->createGeometryCollection(geometries);
--- geos-svn/source/geom/Makefile.am	2007-09-24 16:30:19.000000000 +0200
+++ geos-patch/trunk/source/geom/Makefile.am	2007-09-24 16:50:49.000000000 +0200
@@ -29,6 +29,8 @@
 	MultiLineString.cpp \
 	MultiPoint.cpp \
 	MultiPolygon.cpp \
+	Tin.cpp	\
+	PolyhedralSurface.cpp	\
 	Point.cpp \
 	Polygon.cpp \
 	PrecisionModel.cpp \
--- geos-svn/source/geom/GeometryFactory.cpp	2007-09-24 16:30:19.000000000 +0200
+++ geos-patch/trunk/source/geom/GeometryFactory.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -29,6 +29,8 @@
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/GeometryCollection.h>
 #include <geos/geom/PrecisionModel.h>
 #include <geos/geom/Envelope.h>
@@ -384,6 +386,78 @@
 }
 
 /*public*/
+Tin*
+GeometryFactory::createTin() const
+{
+	return new Tin(NULL,this);
+}
+
+/*public*/
+Tin*
+GeometryFactory::createTin(vector<Geometry *> *newPolys) const
+{
+	return new Tin(newPolys,this);
+}
+
+/*public*/
+Tin*
+GeometryFactory::createTin(const vector<Geometry *> &fromPolys) const
+{
+	vector<Geometry *>*newGeoms = new vector<Geometry *>(fromPolys.size());
+	for (size_t i=0; i<fromPolys.size(); i++)
+	{
+		(*newGeoms)[i] = fromPolys[i]->clone();
+	}
+	Tin *g = NULL;
+	try {
+		g = new Tin(newGeoms,this);
+	} catch (...) {
+		for (size_t i=0; i<newGeoms->size(); i++) {
+			delete (*newGeoms)[i];
+		}
+		delete newGeoms;
+		throw;
+	}
+	return g;
+}
+
+/*public*/
+PolyhedralSurface*
+GeometryFactory::createPolyhedralSurface() const
+{
+	return new PolyhedralSurface(NULL,this);
+}
+
+/*public*/
+PolyhedralSurface*
+GeometryFactory::createPolyhedralSurface(vector<Geometry *> *newPolys) const
+{
+	return new PolyhedralSurface(newPolys,this);
+}
+
+/*public*/
+PolyhedralSurface*
+GeometryFactory::createPolyhedralSurface(const vector<Geometry *> &fromPolys) const
+{
+	vector<Geometry *>*newGeoms = new vector<Geometry *>(fromPolys.size());
+	for (size_t i=0; i<fromPolys.size(); i++)
+	{
+		(*newGeoms)[i] = fromPolys[i]->clone();
+	}
+	PolyhedralSurface *g = NULL;
+	try {
+		g = new PolyhedralSurface(newGeoms,this);
+	} catch (...) {
+		for (size_t i=0; i<newGeoms->size(); i++) {
+			delete (*newGeoms)[i];
+		}
+		delete newGeoms;
+		throw;
+	}
+	return g;
+}
+
+/*public*/
 LinearRing*
 GeometryFactory::createLinearRing() const
 {
--- geos-svn/source/operation/valid/IsValidOp.cpp	2007-09-24 16:30:19.000000000 +0200
+++ geos-patch/trunk/source/operation/valid/IsValidOp.cpp	2007-09-24 17:44:15.000000000 +0200
@@ -35,6 +35,8 @@
 #include <geos/geom/Point.h>
 #include <geos/geom/Polygon.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/GeometryCollection.h>
 
 #include <typeinfo>
@@ -123,6 +125,8 @@
 	else if (typeid(*g)==typeid(LineString)) checkValid((LineString*)g);
 	else if (typeid(*g)==typeid(Polygon)) checkValid((Polygon*)g);
 	else if (typeid(*g)==typeid(MultiPolygon)) checkValid((MultiPolygon*)g);
+	else if (typeid(*g)==typeid(Tin)) checkValid((Tin*)g);
+	else if (typeid(*g)==typeid(PolyhedralSurface)) checkValid((PolyhedralSurface*)g);
 	else if ((gc=dynamic_cast<const GeometryCollection *>(g)))
 		checkValid(gc);
 	else throw util::UnsupportedOperationException();
@@ -259,6 +263,81 @@
 }
 
 void
+IsValidOp::checkValid(const Tin *g)
+{
+
+	unsigned int ngeoms = g->getNumGeometries();
+	vector<const Polygon *>polys(ngeoms);	
+
+	for (unsigned int i=0; i<ngeoms; ++i)
+	{
+		const Polygon *p = (const Polygon *)g->getGeometryN(i);
+
+		if (!p->isSimple())
+                {
+                validErr = new TopologyValidationError(
+                        TopologyValidationError::eNotOneRing);
+		}
+		checkInvalidCoordinates(p);
+		if (validErr != NULL) return;
+
+		checkClosedRings(p);
+		if (validErr != NULL) return;
+
+		polys[i]=p;
+	}
+
+	GeometryGraph graph(0,g);
+
+	checkConsistentArea3DSurf(&graph);
+	if (validErr!=NULL) return;
+
+	checkWellConnected(g);
+        if (validErr!=NULL) return;
+
+	checkWellOriented(g);
+        if (validErr != NULL) return;
+}
+
+void
+IsValidOp::checkValid(const PolyhedralSurface *g)
+{
+	unsigned int ngeoms = g->getNumGeometries();
+	vector<const Polygon *>polys(ngeoms);
+
+	for (unsigned int i=0; i<ngeoms; ++i)
+	{
+		const Polygon *p = (const Polygon *)g->getGeometryN(i);
+
+		if (!p->isSimple())
+        	{	
+                validErr = new TopologyValidationError(
+                        TopologyValidationError::eNotOneRing);
+        	}
+		if (validErr != NULL) return;
+
+		checkInvalidCoordinates(p);
+		if (validErr != NULL) return;
+
+		checkClosedRings(p);
+		if (validErr != NULL) return;
+
+		polys[i]=p;
+	}
+
+	GeometryGraph graph(0,g);
+
+	checkConsistentArea3DSurf(&graph);
+	if (validErr!=NULL) return;
+
+	checkWellConnected(g);
+        if (validErr != NULL) return;
+	
+	checkWellOriented(g);
+        if (validErr != NULL) return;
+}
+
+void
 IsValidOp::checkValid(const GeometryCollection *gc)
 {
 	for(unsigned int i=0, ngeoms=gc->getNumGeometries(); i<ngeoms; ++i)
@@ -310,6 +389,21 @@
 	}
 }
 
+void
+IsValidOp::checkConsistentArea3DSurf(GeometryGraph *graph)
+{
+        ConsistentAreaTester cat(graph);
+        bool isValidArea=cat.isNodeConsistentArea3DSurf();
+
+        if (!isValidArea)
+        {
+                validErr=new TopologyValidationError(
+                        TopologyValidationError::eSelfIntersection,
+                        cat.getInvalidPoint());
+                return;
+        }
+}
+
 
 /*private*/
 void
@@ -569,6 +663,70 @@
 }
 
 /*private*/
+/*call this function only with multigeometries(Tin & PolyhedralSurface in fact)*/
+void
+IsValidOp::checkWellConnected(const Geometry *geom)
+{
+
+	for(int i=0; i<geom->getNumGeometries(); i++)
+	{
+		const Polygon *p = (const Polygon *)geom->getGeometryN(i);
+		const int LENGTH = p->getCoordinates()->getSize()-1;
+		int connected = 0;
+		for(int j=0; j<geom->getNumGeometries(); j++)
+		{
+			if(i!=j)
+			{
+			const Polygon *ptmp = (const Polygon *)geom->getGeometryN(j);
+	
+			if (checkAdjacent(p, ptmp)) connected++;
+			}
+		}
+
+		if(!connected)
+		/*The triangle hasn't any neighbour*/
+		{
+		validErr = new TopologyValidationError(
+	                         TopologyValidationError::eSingleFace,
+				p->getCoordinates()->getAt(0));
+	        return;
+		}
+	}
+	return;	
+}
+
+/*call this function only with multigeometries(Tin & PolyhedralSurface in fact)*/	
+void
+IsValidOp::checkWellOriented(const Geometry *g)
+{
+	int *faces = (int*) malloc(g->getNumGeometries() * sizeof(int));
+	if(faces==NULL){
+		return;
+	}
+	for(int i=0; i<g->getNumGeometries(); i++){
+                *(faces + i) = 0;
+        }
+	for(int i=0; i<g->getNumGeometries(); i++){
+	if(!(*(faces + i))){	
+
+	const Polygon *p = (const Polygon *)g->getGeometryN(i);
+		
+		for (int j=0; j<g->getNumGeometries(); j++)
+		{
+	
+		if(i!=j){
+			const Polygon *ptmp = (const Polygon *)g->getGeometryN(j);
+
+			checkNeighbourSameOrientation(p, ptmp, faces, j);
+			if (validErr!=NULL) return;
+		}
+		}
+	}
+	}
+	free(faces);
+}
+
+/*private*/
 void
 IsValidOp::checkInvalidCoordinates(const Polygon *poly)
 {
@@ -614,6 +772,59 @@
 	}
 }
 
+bool
+IsValidOp::checkAdjacent(const Polygon *p, const Polygon *ptmp)
+{
+	for(int i=0; i< p->getCoordinates()->getSize()-1; i++)
+	{	
+	Coordinate pt0 = p->getCoordinates()->getAt(i);
+        Coordinate pt1 = p->getCoordinates()->getAt(i+1);
+
+		for(int j=0; j<ptmp->getCoordinates()->getSize()-1; j++)
+		{
+		Coordinate ptmp0 = ptmp->getCoordinates()->getAt(j);
+	        Coordinate ptmp1 = ptmp->getCoordinates()->getAt(j+1);
+	
+		/*checking the edge*/
+		if(pt0.equals3D(ptmp0) && pt1.equals3D(ptmp1) ||
+		pt0.equals3D(ptmp1) && pt1.equals3D(ptmp0)){
+                return true;
+       	        } 
+
+   		}
+	}
+	return false;
+}	
+
+void
+IsValidOp::checkNeighbourSameOrientation(const Polygon *p, const Polygon *ptmp, int *faces, int index)
+{
+	for(int i=0; i< p->getCoordinates()->getSize()-1; i++)
+        {
+        Coordinate pt0 = p->getCoordinates()->getAt(i);
+        Coordinate pt1 = p->getCoordinates()->getAt(i+1);
+
+		for(int j=0; j<ptmp->getCoordinates()->getSize()-1; j++)
+                {
+	                Coordinate ptmp0 = ptmp->getCoordinates()->getAt(j);
+	       	        Coordinate ptmp1 = ptmp->getCoordinates()->getAt(j+1);
+
+	                if(pt0.equals3D(ptmp0) && pt1.equals3D(ptmp1)){
+				validErr = new TopologyValidationError(
+	                        TopologyValidationError::eNotWellOriented,
+					p->getCoordinates()->getAt(i));
+			return;
+			}
+		
+	                if(pt0.equals3D(ptmp1) && pt1.equals3D(ptmp0)){
+			(*(faces + index))=true;
+			return;
+			}
+		}
+	}
+}
+	
+
 } // namespace geos.operation.valid
 } // namespace geos.operation
 } // namespace geos
--- geos-svn/source/io/WKBReader.cpp	2007-09-24 16:30:20.000000000 +0200
+++ geos-patch/trunk/source/io/WKBReader.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -26,6 +26,8 @@
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/CoordinateSequenceFactory.h>
 #include <geos/geom/CoordinateSequence.h>
 #include <geos/geom/PrecisionModel.h>
@@ -286,6 +288,12 @@
 		case WKBConstants::wkbMultiPolygon :
 			result = readMultiPolygon();
 			break;
+		case WKBConstants::wkbTin :
+			result = readTin();
+                        break;
+		case WKBConstants::wkbPolyhedralSurface :
+			result = readPolyhedralSurface();
+                        break;
 		case WKBConstants::wkbGeometryCollection :
 			result = readGeometryCollection();
 			break;
@@ -440,6 +448,60 @@
 	return factory.createMultiPolygon(geoms);
 }
 
+Tin *
+WKBReader::readTin()
+{
+        int numGeoms = dis.readInt();
+        vector<Geometry *> *geoms = new vector<Geometry *>(numGeoms);
+
+        try {
+                for (int i=0; i<numGeoms; i++)
+                {
+                        Geometry *g = readGeometry();
+                        if (!dynamic_cast<Polygon *>(g))
+                        {
+                                stringstream err;
+                                err << BAD_GEOM_TYPE_MSG << " Polygon";
+                                throw  ParseException(err.str());
+                        }
+                        (*geoms)[i] = g;
+                }
+        } catch (...) {
+                for (unsigned int i=0; i<geoms->size(); i++)
+                        delete (*geoms)[i];
+                delete geoms;
+                throw;
+        }
+        return factory.createTin(geoms);
+}
+
+PolyhedralSurface *
+WKBReader::readPolyhedralSurface()
+{
+        int numGeoms = dis.readInt();
+        vector<Geometry *> *geoms = new vector<Geometry *>(numGeoms);
+
+        try {
+                for (int i=0; i<numGeoms; i++)
+                {
+                        Geometry *g = readGeometry();
+                        if (!dynamic_cast<Polygon *>(g))
+                        {
+                                stringstream err;
+                                err << BAD_GEOM_TYPE_MSG << " Polygon";
+                                throw  ParseException(err.str());
+                        }
+                        (*geoms)[i] = g;
+                }
+        } catch (...) {
+                for (unsigned int i=0; i<geoms->size(); i++)
+                        delete (*geoms)[i];
+                delete geoms;
+                throw;
+        }
+        return factory.createPolyhedralSurface(geoms);
+}
+
 GeometryCollection *
 WKBReader::readGeometryCollection()
 {
--- geos-svn/source/io/WKBWriter.cpp	2007-09-24 16:30:20.000000000 +0200
+++ geos-patch/trunk/source/io/WKBWriter.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -26,6 +26,8 @@
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/CoordinateSequence.h>
 #include <geos/geom/PrecisionModel.h>
 
@@ -86,6 +88,14 @@
 			return writeGeometryCollection(
 				(GeometryCollection &)g,
 				WKBConstants::wkbMultiPolygon);
+		case GEOS_TIN:
+                        return writeGeometryCollection(
+                                (GeometryCollection &)g,
+                                WKBConstants::wkbTin);
+		case GEOS_POLYHEDRALSURFACE:
+                        return writeGeometryCollection(
+                                (GeometryCollection &)g,
+                                WKBConstants::wkbPolyhedralSurface);
 		case GEOS_GEOMETRYCOLLECTION:
 			return writeGeometryCollection(
 				(GeometryCollection &)g,
--- geos-svn/source/io/WKTReader.cpp	2007-09-24 16:30:20.000000000 +0200
+++ geos-patch/trunk/source/io/WKTReader.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -26,6 +26,8 @@
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/CoordinateSequenceFactory.h>
 #include <geos/geom/CoordinateSequence.h>
 #include <geos/geom/PrecisionModel.h>
@@ -206,6 +208,10 @@
 		return readMultiLineStringText(tokenizer);
 	} else if (type=="MULTIPOLYGON") {
 		return readMultiPolygonText(tokenizer);
+	} else if (type=="TIN") {
+                return readTinText(tokenizer);
+	} else if (type=="POLYHEDRALSURFACE") {
+                return readPolyhedralSurfaceText(tokenizer);
 	} else if (type=="GEOMETRYCOLLECTION") {
 		return readGeometryCollectionText(tokenizer);
 	}
@@ -400,6 +406,42 @@
 	return ret;
 }
 
+Tin* WKTReader::readTinText(StringTokenizer *tokenizer) {
+        string nextToken=getNextEmptyOrOpener(tokenizer);
+        if (nextToken=="EMPTY") {
+                return geometryFactory->createTin(NULL);
+        }
+        vector<Geometry *> *polygons=new vector<Geometry *>();
+        Polygon *polygon=readPolygonText(tokenizer);
+        polygons->push_back(polygon);
+        nextToken=getNextCloserOrComma(tokenizer);
+        while(nextToken==",") {
+                Polygon *polygon=readPolygonText(tokenizer);
+                polygons->push_back(polygon);
+                nextToken=getNextCloserOrComma(tokenizer);
+        }
+        Tin *ret = geometryFactory->createTin(polygons);
+        return ret;
+}
+
+PolyhedralSurface* WKTReader::readPolyhedralSurfaceText(StringTokenizer *tokenizer) {
+        string nextToken=getNextEmptyOrOpener(tokenizer);
+        if (nextToken=="EMPTY") {
+                return geometryFactory->createPolyhedralSurface(NULL);
+        }
+        vector<Geometry *> *polygons=new vector<Geometry *>();
+        Polygon *polygon=readPolygonText(tokenizer);
+        polygons->push_back(polygon);
+        nextToken=getNextCloserOrComma(tokenizer);
+        while(nextToken==",") {
+                Polygon *polygon=readPolygonText(tokenizer);
+                polygons->push_back(polygon);
+                nextToken=getNextCloserOrComma(tokenizer);
+        }
+        PolyhedralSurface *ret = geometryFactory->createPolyhedralSurface(polygons);
+        return ret;
+}
+
 GeometryCollection* WKTReader::readGeometryCollectionText(StringTokenizer *tokenizer) {
 	string nextToken=getNextEmptyOrOpener(tokenizer);
 	if (nextToken=="EMPTY") {
--- geos-svn/source/io/WKTWriter.cpp	2007-09-24 16:30:20.000000000 +0200
+++ geos-patch/trunk/source/io/WKTWriter.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -24,6 +24,8 @@
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/CoordinateSequence.h>
 #include <geos/geom/PrecisionModel.h>
 
@@ -179,6 +181,10 @@
 		appendMultiLineStringTaggedText((MultiLineString*)geometry, level, writer);
 	} else if (typeid(*geometry)==typeid(MultiPolygon)) {
 		appendMultiPolygonTaggedText((MultiPolygon*)geometry, level, writer);
+	} else if (typeid(*geometry)==typeid(Tin)) {
+                appendTinTaggedText((Tin*)geometry, level, writer);
+	} else if (typeid(*geometry)==typeid(PolyhedralSurface)) {
+                appendPolyhedralSurfaceTaggedText((PolyhedralSurface*)geometry, level, writer);
 	} else if (typeid(*geometry)==typeid(GeometryCollection)) {
 		appendGeometryCollectionTaggedText((GeometryCollection*)geometry, level, writer);
 	} else {
@@ -235,6 +241,16 @@
 	appendMultiPolygonText(multiPolygon, level, writer);
 }
 
+void WKTWriter::appendTinTaggedText(const Tin *tin, int level, Writer *writer) {
+        writer->write("TIN ");
+        appendTinText(tin, level, writer);
+}
+
+void WKTWriter::appendPolyhedralSurfaceTaggedText(const PolyhedralSurface *polyhedralSurface, int level, Writer *writer) {
+        writer->write("POLYHEDRALSURFACE ");
+        appendPolyhedralSurfaceText(polyhedralSurface, level, writer);
+}
+
 void WKTWriter::appendGeometryCollectionTaggedText(const GeometryCollection *geometryCollection, int level,Writer *writer) {
 	writer->write("GEOMETRYCOLLECTION ");
 	appendGeometryCollectionText(geometryCollection, level, writer);
@@ -384,6 +400,48 @@
 	}
 }
 
+void WKTWriter::appendTinText(const Tin *tin, int level, Writer *writer) {
+        if (tin->isEmpty()) {
+                writer->write("EMPTY");
+        } else {
+                int level2=level;
+                bool doIndent=false;
+                writer->write("(");
+                for (unsigned int i=0, n=tin->getNumGeometries();
+                                i < n; i++)
+                {
+                        if (i>0) {
+                                writer->write(", ");
+                                level2=level+1;
+                                doIndent=true;
+                        }
+                        appendPolygonText((Polygon *) tin->getGeometryN(i), level2, doIndent, writer);
+                }
+                writer->write(")");
+        }
+}
+
+void WKTWriter::appendPolyhedralSurfaceText(const PolyhedralSurface *polyhedralSurface, int level, Writer *writer) {
+        if (polyhedralSurface->isEmpty()) {
+                writer->write("EMPTY");
+        } else {
+                int level2=level;
+                bool doIndent=false;
+                writer->write("(");
+                for (unsigned int i=0, n=polyhedralSurface->getNumGeometries();
+                                i < n; i++)
+                {
+                        if (i>0) {
+                                writer->write(", ");
+                                level2=level+1;
+                                doIndent=true;
+                        }
+                        appendPolygonText((Polygon *) polyhedralSurface->getGeometryN(i), level2, doIndent, writer);
+                }
+                writer->write(")");
+        }
+}
+
 void
 WKTWriter::appendGeometryCollectionText(
 		const GeometryCollection *geometryCollection,
--- geos-svn/source/headers/geos/geom/PolyhedralSurface.h	1970-01-01 01:00:00.000000000 +0100
+++ geos-patch/trunk/source/headers/geos/geom/PolyhedralSurface.h	2007-09-24 16:50:49.000000000 +0200
@@ -0,0 +1,112 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * GEOS - Geometry Engine Open Source
+ * http://geos.refractions.net
+ *
+ * Copyright (C) 2001-2002 Vivid Solutions Inc.
+ * Copyright (C) 2005 2006 Refractions Research Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of the GNU Lesser General Public Licence as published
+ * by the Free Software Foundation. 
+ * See the COPYING file for more information.
+ *
+ **********************************************************************/
+
+#ifndef GEOS_GEOS_POLYHEDRALSURFACE_H
+#define GEOS_GEOS_POLYHEDRALSURFACE_H
+
+#include <string>
+#include <vector>
+#include <geos/platform.h>
+#include <geos/geom/GeometryCollection.h>
+#include <geos/geom/Dimension.h> // for Dimension::DimensionType
+
+#include <geos/inline.h>
+
+// Forward declarations
+namespace geos {
+	namespace geom { // geos::geom
+		class Coordinate;
+		class CoordinateArraySequence;
+		class MultiPoint;
+	}
+}
+
+
+namespace geos {
+namespace geom { // geos::geom
+
+/// Basic implementation of <code>MultiPolygon</code>.
+class PolyhedralSurface: public GeometryCollection {
+
+public:
+
+	friend class GeometryFactory;
+
+	virtual ~PolyhedralSurface();
+
+	/// Returns surface dimension (2)
+	Dimension::DimensionType getDimension() const;
+
+	/// Returns 1 (POLYHEDRALSURFACE boundary is MultiLineString)
+	int getBoundaryDimension() const;
+
+	/**
+	 * \brief
+	 * Returns a MultiLineString composed of one LineString for
+	 * each of the composing Polygon's shells 
+	 */
+	Geometry* getBoundary() const;
+
+	std::string getGeometryType() const;
+
+	virtual GeometryTypeId getGeometryTypeId() const;
+
+	bool isSimple() const;
+
+	bool equalsExact(const Geometry *other, double tolerance=0) const;
+
+	Geometry *clone() const;
+
+protected:
+
+	/**
+	 * \brief Construct a POLYHEDRALSURFACE
+	 *
+	 * @param newPolys
+	 *	the <code>Polygon</code>s for this <code>POLYHEDRALSURFACE</code>,
+	 *	or <code>null</code> or an empty array to create the empty
+	 *	geometry. Elements may be empty <code>Polygon</code>s, but
+	 *	not <code>null</code>s.
+	 *	The polygons must conform to the assertions specified in the
+	 *	<A HREF="http://www.opengis.org/techno/specs.htm">
+	 *	OpenGIS Simple Features Specification for SQL
+	 *	</A>.
+	 *
+	 *	Constructed object will take ownership of
+	 *	the vector and its elements.
+	 *
+	 * @param newFactory
+	 * 	The GeometryFactory used to create this geometry
+	 *	Caller must keep the factory alive for the life-time
+	 *	of the constructed POLYHEDRALSURFACE.
+	 */
+	PolyhedralSurface(std::vector<Geometry *> *newPolys, const GeometryFactory *newFactory);
+
+	PolyhedralSurface(const PolyhedralSurface &mp);
+
+
+};
+
+
+} // namespace geos::geom
+} // namespace geos
+
+#ifdef GEOS_INLINE
+# include "geos/geom/PolyhedralSurface.inl"
+#endif
+
+#endif // ndef GEOS_GEOS_POLYHEDRALSURFACE_H
+
--- geos-svn/source/headers/geos/geom/PolyhedralSurface.inl	1970-01-01 01:00:00.000000000 +0100
+++ geos-patch/trunk/source/headers/geos/geom/PolyhedralSurface.inl	2007-09-24 16:50:49.000000000 +0200
@@ -0,0 +1,42 @@
+/***********************************************************************
+ ** $id:$
+ **
+ ** GEOS - Geometry Engine Open Source
+ ** http://geos.refractions.net
+ **
+ **Copyright (C) 2005-2006 Refractions Research Inc.
+ **
+ **This is free software; you can redistribute and/or modify it under
+ ** the terms of the GNU Lesser General Public Licence as published
+ ** by the Free Software Foundation.
+ ** See the COPYING file for more information.
+ **
+ ***********************************************************************/
+
+#ifndef GEOS_GEOM_POLYHEDRALSURFACE_INL
+#define GEOS_GEOM_POLYHEDRALSURFACE_INL
+
+#include <geos/geom/PolyhedralSurface.h>
+#include <geos/geom/GeometryCollection.h>
+
+namespace geos {
+namespace geom { // geos::geom
+
+INLINE
+PolyhedralSurface::PolyhedralSurface(const PolyhedralSurface &mp)
+        :
+        GeometryCollection(mp)
+{
+}
+
+INLINE Geometry*
+PolyhedralSurface::clone() const
+{
+        return new PolyhedralSurface(*this);
+}
+
+} // namespace geos::geom
+} // namespace geos
+
+#endif // GEOS_GEOM_POLYHEDRALSURFACE_INL
+
--- geos-svn/source/headers/geos/geom/Tin.inl	1970-01-01 01:00:00.000000000 +0100
+++ geos-patch/trunk/source/headers/geos/geom/Tin.inl	2007-09-24 16:50:49.000000000 +0200
@@ -0,0 +1,42 @@
+/***********************************************************************
+ ** $id:$
+ **
+ ** GEOS - Geometry Engine Open Source
+ ** http://geos.refractions.net
+ **
+ **Copyright (C) 2005-2006 Refractions Research Inc.
+ **
+ **This is free software; you can redistribute and/or modify it under
+ ** the terms of the GNU Lesser General Public Licence as published
+ ** by the Free Software Foundation.
+ ** See the COPYING file for more information.
+ **
+ ***********************************************************************/
+
+#ifndef GEOS_GEOM_TIN_INL
+#define GEOS_GEOM_TIN_INL
+
+#include <geos/geom/Tin.h>
+#include <geos/geom/GeometryCollection.h>
+
+namespace geos {
+namespace geom { // geos::geom
+
+INLINE
+Tin::Tin(const Tin &mp)
+        :
+        GeometryCollection(mp)
+{
+}
+
+INLINE Geometry*
+Tin::clone() const
+{
+        return new Tin(*this);
+}
+
+} // namespace geos::geom
+} // namespace geos
+
+#endif // GEOS_GEOM_TIN_INL
+
--- geos-svn/source/headers/geos/geom/Tin.h	1970-01-01 01:00:00.000000000 +0100
+++ geos-patch/trunk/source/headers/geos/geom/Tin.h	2007-09-24 16:50:49.000000000 +0200
@@ -0,0 +1,112 @@
+/**********************************************************************
+ * $Id:$
+ *
+ * GEOS - Geometry Engine Open Source
+ * http://geos.refractions.net
+ *
+ * Copyright (C) 2001-2002 Vivid Solutions Inc.
+ * Copyright (C) 2005 2006 Refractions Research Inc.
+ *
+ * This is free software; you can redistribute and/or modify it under
+ * the terms of the GNU Lesser General Public Licence as published
+ * by the Free Software Foundation. 
+ * See the COPYING file for more information.
+ *
+ **********************************************************************/
+
+#ifndef GEOS_GEOS_TIN_H
+#define GEOS_GEOS_TIN_H
+
+#include <string>
+#include <vector>
+#include <geos/platform.h>
+#include <geos/geom/GeometryCollection.h>
+#include <geos/geom/Dimension.h> // for Dimension::DimensionType
+
+#include <geos/inline.h>
+
+// Forward declarations
+namespace geos {
+	namespace geom { // geos::geom
+		class Coordinate;
+		class CoordinateArraySequence;
+		class MultiPoint;
+	}
+}
+
+
+namespace geos {
+namespace geom { // geos::geom
+
+/// Basic implementation of <code>MultiPolygon</code>.
+class Tin: public GeometryCollection {
+
+public:
+
+	friend class GeometryFactory;
+
+	virtual ~Tin();
+
+	/// Returns surface dimension (2)
+	Dimension::DimensionType getDimension() const;
+
+	/// Returns 1 (Tin boundary is MultiLineString)
+	int getBoundaryDimension() const;
+
+	/**
+	 * \brief
+	 * Returns a MultiLineString composed of one LineString for
+	 * each of the composing Polygon's shells 
+	 */
+	Geometry* getBoundary() const;
+
+	std::string getGeometryType() const;
+
+	virtual GeometryTypeId getGeometryTypeId() const;
+
+	bool isSimple() const;
+
+	bool equalsExact(const Geometry *other, double tolerance=0) const;
+
+	Geometry *clone() const;
+
+protected:
+
+	/**
+	 * \brief Construct a Tin
+	 *
+	 * @param newPolys
+	 *	the <code>Polygon</code>s for this <code>Tin</code>,
+	 *	or <code>null</code> or an empty array to create the empty
+	 *	geometry. Elements may be empty <code>Polygon</code>s, but
+	 *	not <code>null</code>s.
+	 *	The polygons must conform to the assertions specified in the
+	 *	<A HREF="http://www.opengis.org/techno/specs.htm">
+	 *	OpenGIS Simple Features Specification for SQL
+	 *	</A>.
+	 *
+	 *	Constructed object will take ownership of
+	 *	the vector and its elements.
+	 *
+	 * @param newFactory
+	 * 	The GeometryFactory used to create this geometry
+	 *	Caller must keep the factory alive for the life-time
+	 *	of the constructed Tin.
+	 */
+	Tin(std::vector<Geometry *> *newPolys, const GeometryFactory *newFactory);
+
+	Tin(const Tin &mp);
+
+
+};
+
+
+} // namespace geos::geom
+} // namespace geos
+
+#ifdef GEOS_INLINE
+# include "geos/geom/Tin.inl"
+#endif
+
+#endif // ndef GEOS_GEOS_TIN_H
+
--- geos-svn/source/headers/geos/geom/Makefile.am	2007-09-24 16:30:22.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/geom/Makefile.am	2007-09-24 16:50:49.000000000 +0200
@@ -43,6 +43,10 @@
 	MultiPoint.h				\
 	MultiPolygon.h				\
 	MultiPolygon.inl			\
+	Tin.h					\
+	Tin.inl					\
+	PolyhedralSurface.h			\
+	PolyhedralSurface.inl			\
 	Point.h					\
 	Polygon.h				\
 	PrecisionModel.h			\
--- geos-svn/source/headers/geos/geom/GeometryFactory.h	2007-09-24 16:30:22.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/geom/GeometryFactory.h	2007-09-24 16:50:49.000000000 +0200
@@ -40,6 +40,8 @@
 		class MultiLineString;
 		class MultiPoint;
 		class MultiPolygon;
+		class Tin;
+		class PolyhedralSurface;
 		class Point;
 		class Polygon;
 		class PrecisionModel;
@@ -194,6 +196,26 @@
 	MultiPolygon* createMultiPolygon(
 			const std::vector<Geometry *> &fromPolys) const;
 
+	/// Construct an EMPTY Tin 
+	Tin* createTin() const;
+
+	/// Construct a Tin taking ownership of given arguments
+	Tin* createTin(std::vector<Geometry *> *newPolys) const;
+
+	/// Construct a Tin with a deep-copy of given arguments
+	Tin* createTin(
+			const std::vector<Geometry *> &fromPolys) const;
+
+	/// Construct an EMPTY PolyhedralSurface 
+	PolyhedralSurface* createPolyhedralSurface() const;
+
+	/// Construct a PolyhedralSurface taking ownership of given arguments
+	PolyhedralSurface* createPolyhedralSurface(std::vector<Geometry *> *newPolys) const;
+
+	/// Construct a PolyhedralSurface with a deep-copy of given arguments
+	PolyhedralSurface* createPolyhedralSurface(
+			const std::vector<Geometry *> &fromPolys) const;
+
 	/// Construct an EMPTY LinearRing 
 	LinearRing* createLinearRing() const;
 
--- geos-svn/source/headers/geos/operation/valid/IsValidOp.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/operation/valid/IsValidOp.h	2007-09-24 17:44:44.000000000 +0200
@@ -34,6 +34,8 @@
 		class Polygon;
 		class GeometryCollection;
 		class MultiPolygon;
+		class Tin;
+		class PolyhedralSurface;
 		class MultiLineString;
 	}
 	namespace geomgraph {
@@ -65,8 +67,11 @@
 	void checkValid(const geom::LineString *g);
 	void checkValid(const geom::Polygon *g);
 	void checkValid(const geom::MultiPolygon *g);
+	void checkValid(const geom::Tin *g);
+	void checkValid(const geom::PolyhedralSurface *g);
 	void checkValid(const geom::GeometryCollection *gc);
 	void checkConsistentArea(geomgraph::GeometryGraph *graph);
+	void checkConsistentArea3DSurf(geomgraph::GeometryGraph *graph);
 
 
 	/**
@@ -170,6 +175,12 @@
 
 	void checkInvalidCoordinates(const geom::CoordinateSequence *cs);
 
+	void checkWellConnected(const geom::Geometry *geom);
+
+	void checkWellOriented(const geom::Geometry *geom);
+
+	void checkPositiveOrientation(const geom::Polygon *poly);
+
 	void checkInvalidCoordinates(const geom::Polygon *poly);
 
 	void checkClosedRings(const geom::Polygon *poly);
@@ -247,6 +258,9 @@
 		isSelfTouchingRingFormingHoleValid = isValid;
 	}
 
+	bool checkAdjacent(const geom::Polygon *p, const geom::Polygon *ptmp);
+
+	void checkNeighbourSameOrientation(const geom::Polygon *p, const geom::Polygon *ptmp, int *faces, int index);
 };
 
 } // namespace geos.operation.valid
--- geos-svn/source/headers/geos/io/WKBReader.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/io/WKBReader.h	2007-09-24 16:50:49.000000000 +0200
@@ -38,6 +38,8 @@
 		class MultiPoint;
 		class MultiLineString;
 		class MultiPolygon;
+		class Tin;
+		class PolyhedralSurface;
 		class PrecisionModel;
 
 	} // namespace geom
@@ -138,6 +140,12 @@
 
 	geom::MultiPolygon *readMultiPolygon();
 		// throws IOException, ParseException
+		
+	geom::Tin *readTin();
+                // throws IOException, ParseException
+
+	geom::PolyhedralSurface *readPolyhedralSurface();
+                // throws IOException, ParseException
 
 	geom::GeometryCollection *readGeometryCollection();
 		// throws IOException, ParseException
--- geos-svn/source/headers/geos/io/WKBWriter.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/io/WKBWriter.h	2007-09-24 16:50:49.000000000 +0200
@@ -34,6 +34,8 @@
 		class MultiPoint;
 		class MultiLineString;
 		class MultiPolygon;
+		class Tin;
+		class PolyhedralSurface;
 		class PrecisionModel;
 
 	} // namespace geom
--- geos-svn/source/headers/geos/io/WKTReader.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/io/WKTReader.h	2007-09-24 16:50:49.000000000 +0200
@@ -37,6 +37,8 @@
 		class Polygon;
 		class MultiPoint;
 		class MultiLineString;
+		class Tin;
+		class PolyhedralSurface;
 		class MultiPolygon;
 		class PrecisionModel;
 	} 
@@ -92,6 +94,8 @@
 	geom::Polygon* readPolygonText(io::StringTokenizer *tokenizer);
 	geom::MultiLineString* readMultiLineStringText(io::StringTokenizer *tokenizer);
 	geom::MultiPolygon* readMultiPolygonText(io::StringTokenizer *tokenizer);
+	geom::Tin* readTinText(io::StringTokenizer *tokenizer);
+	geom::PolyhedralSurface* readPolyhedralSurfaceText(io::StringTokenizer *tokenizer);
 	geom::GeometryCollection* readGeometryCollectionText(io::StringTokenizer *tokenizer);
 private:
 	const geom::GeometryFactory *geometryFactory;
--- geos-svn/source/headers/geos/io/WKTWriter.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/io/WKTWriter.h	2007-09-24 16:50:49.000000000 +0200
@@ -33,6 +33,8 @@
 		class MultiPoint;
 		class MultiLineString;
 		class MultiPolygon;
+		class Tin;
+		class PolyhedralSurface;
 		class PrecisionModel;
 	} 
 	namespace io {
@@ -146,6 +148,14 @@
 			const geom::MultiPolygon *multiPolygon,
 			int level, Writer *writer);
 
+	void appendTinTaggedText(
+                        const geom::Tin *tin,
+                        int level, Writer *writer);
+
+	void appendPolyhedralSurfaceTaggedText(
+                        const geom::PolyhedralSurface *polyhedralSurface,
+                        int level, Writer *writer);
+
 	void appendGeometryCollectionTaggedText(
 			const geom::GeometryCollection *geometryCollection,
 			int level,Writer *writer);
@@ -178,6 +188,14 @@
 			const geom::MultiPolygon *multiPolygon,
 			int level, Writer *writer);
 
+	void appendTinText(
+                        const geom::Tin *tin,
+                        int level, Writer *writer);
+
+	void appendPolyhedralSurfaceText(
+                        const geom::PolyhedralSurface *polyhedralSurface,
+                        int level, Writer *writer);
+
 	void appendGeometryCollectionText(
 			const geom::GeometryCollection *geometryCollection,
 			int level,Writer *writer);
--- geos-svn/source/headers/geos/io/WKBConstants.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/io/WKBConstants.h	2007-09-24 16:50:49.000000000 +0200
@@ -35,7 +35,9 @@
 	const int wkbMultiPoint = 4;
 	const int wkbMultiLineString = 5;
 	const int wkbMultiPolygon = 6;
-	const int wkbGeometryCollection = 7;
+	const int wkbTin = 7;
+        const int wkbPolyhedralSurface = 8;
+	const int wkbGeometryCollection = 9;
 }
 
 } // namespace geos::io
--- geos-svn/source/headers/geos/geom/Geometry.h	2007-09-24 16:30:22.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/geom/Geometry.h	2007-09-24 16:50:49.000000000 +0200
@@ -69,6 +69,10 @@
 	GEOS_MULTILINESTRING,
 	/// a collection of polygons
 	GEOS_MULTIPOLYGON,
+	///A triangular irregular network
+	GEOS_TIN,
+	/// a polyhedralsurface
+	GEOS_POLYHEDRALSURFACE,
 	/// a collection of heterogeneus geometries
 	GEOS_GEOMETRYCOLLECTION
 };
--- geos-svn/source/headers/geos/operation/valid/TopologyValidationError.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/operation/valid/TopologyValidationError.h	2007-09-24 17:37:58.000000000 +0200
@@ -48,7 +48,11 @@
 		eDuplicatedRings,
 		eTooFewPoints,
 		eInvalidCoordinate,
-		eRingNotClosed
+		eRingNotClosed,
+		eNotOneRing,
+		eNotATriangle,
+		eSingleFace,
+		eNotWellOriented
 	};
 
 	TopologyValidationError(int newErrorType, const geom::Coordinate& newPt);
--- geos-svn/source/operation/valid/TopologyValidationError.cpp	2007-09-24 16:30:19.000000000 +0200
+++ geos-patch/trunk/source/operation/valid/TopologyValidationError.cpp	2007-09-24 17:38:02.000000000 +0200
@@ -42,7 +42,11 @@
 	"Duplicate Rings",
 	"Too few points in geometry component",
 	"Invalid Coordinate",
-	"Ring is not closed"
+	"Ring is not closed",
+	"More than one ring",
+	"Not a triangle",
+	"Isolated face",
+	"Two neighbour faces are not in the same orientation"
 };
 
 TopologyValidationError::TopologyValidationError(int newErrorType,
--- geos-svn/source/headers/geos/operation/valid/ConsistentAreaTester.h	2007-09-24 16:30:23.000000000 +0200
+++ geos-patch/trunk/source/headers/geos/operation/valid/ConsistentAreaTester.h	2007-09-24 16:50:49.000000000 +0200
@@ -86,6 +86,7 @@
 	geom::Coordinate& getInvalidPoint();
 
 	bool isNodeConsistentArea();
+	bool isNodeConsistentArea3DSurf();
 
 	/**
 	 * Checks for two duplicate rings in an area.
--- geos-svn/source/operation/valid/ConsistentAreaTester.cpp	2007-09-24 16:30:19.000000000 +0200
+++ geos-patch/trunk/source/operation/valid/ConsistentAreaTester.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -75,6 +75,24 @@
 	return isNodeEdgeAreaLabelsConsistent();
 }
 
+bool
+ConsistentAreaTester::isNodeConsistentArea3DSurf()
+{
+        using geomgraph::index::SegmentIntersector;
+
+        /**
+        * To fully check validity, it is necessary to
+        * compute ALL intersections, including self-intersections within a single edge.
+        */
+        auto_ptr<SegmentIntersector> intersector(geomGraph->computeSelfNodes(&li, true));
+        if (intersector->hasProperIntersection()) {
+                invalidPoint=intersector->getProperIntersectionPoint();
+                return false;
+        }
+	return true;
+}
+
+
 /*private*/
 bool
 ConsistentAreaTester::isNodeEdgeAreaLabelsConsistent()
--- geos-svn/source/geomgraph/GeometryGraph.cpp	2007-09-24 16:30:21.000000000 +0200
+++ geos-patch/trunk/source/geomgraph/GeometryGraph.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -38,6 +38,8 @@
 #include <geos/geom/MultiPoint.h>
 #include <geos/geom/MultiLineString.h>
 #include <geos/geom/MultiPolygon.h>
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/GeometryCollection.h>
 
 #include <geos/inline.h>
@@ -187,6 +189,10 @@
 		addCollection((MultiLineString*) g);
 	else if (typeid(*g)==typeid(MultiPolygon))
 		addCollection((MultiPolygon*) g);
+	else if (typeid(*g)==typeid(Tin))
+                addCollection((Tin*) g);
+	else if (typeid(*g)==typeid(PolyhedralSurface))
+                addCollection((PolyhedralSurface*) g);
 	else if (typeid(*g)==typeid(GeometryCollection))
 		addCollection((GeometryCollection*) g);
 	else {
--- geos-svn/capi/geos_c.cpp	2007-09-24 16:30:27.000000000 +0200
+++ geos-patch/trunk/capi/geos_c.cpp	2007-09-24 16:50:49.000000000 +0200
@@ -22,6 +22,8 @@
 #include <geos/geom/MultiPoint.h> 
 #include <geos/geom/MultiLineString.h> 
 #include <geos/geom/MultiPolygon.h> 
+#include <geos/geom/Tin.h>
+#include <geos/geom/PolyhedralSurface.h>
 #include <geos/geom/LinearRing.h> 
 #include <geos/geom/LineString.h> 
 #include <geos/geom/PrecisionModel.h> 
@@ -1278,6 +1280,12 @@
 			case GEOS_MULTIPOLYGON:
 				g = geomFactory->createMultiPolygon(vgeoms);
 				break;
+			case GEOS_TIN:
+                                g = geomFactory->createTin(vgeoms);
+                                break;
+			case GEOS_POLYHEDRALSURFACE:
+                                g = geomFactory->createPolyhedralSurface(vgeoms);
+                                break;
 			default:
 				ERROR_MESSAGE("Unsupported type request for PostGIS2GEOS_collection");
 				g = NULL;
--- geos-svn/capi/geos_c.h.in	2007-09-24 16:30:27.000000000 +0200
+++ geos-patch/trunk/capi/geos_c.h.in	2007-09-24 16:50:49.000000000 +0200
@@ -108,6 +108,8 @@
 	GEOS_MULTIPOINT,
 	GEOS_MULTILINESTRING,
 	GEOS_MULTIPOLYGON,
+	GEOS_TIN,
+	GEOS_POLYHEDRALSURFACE,
 	GEOS_GEOMETRYCOLLECTION
 };
 
From jc_quirin at hotmail.com  Fri Sep 28 15:47:13 2007
From: jc_quirin at hotmail.com (JC Quirin)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Error during Make
Message-ID: <BAY124-W33EDC68DDE599EA7F895C581B20@phx.gbl>

Hi all...

I'm wondering if anybody can point me towards a solution to this problem.  I'm trying to install Geos (prior to doing PostGIS), but keep getting the same error during the make process.  I'm doing this on a Redhat Enterprise VPS setup where I don't have true root access.  The only parameter I'm changing is the location (by way of "./configure --prefix=/usr/local/geos").

When I run make (or "make check", which is what I just did), it runs for a while but ends with this:
../io/WKBReader.cpp: In function `ostream &geos::WKBReader::printHEX 
(istream &, ostream &)':
../io/WKBReader.cpp:27: `ios_base' undeclared (first use this function)
../io/WKBReader.cpp:27: (Each undeclared identifier is reported only 
once for each function it appears in.)
../io/WKBReader.cpp:27: parse error before `::'
../io/WKBReader.cpp:46: `fl' undeclared (first use this function)
make[2]: *** [WKBReader.lo] Error 1
make[2]: Leaving directory `/usr/home/al-franken/geos-2.2.2/source/geom'
make[1]: *** [check-recursive] Error 1
make[1]: Leaving directory `/usr/home/al-franken/geos-2.2.2/source'
make: *** [check-recursive] Error 1

This particular one was using geos 2.2.2 (obviously), but it's the same error no matter which version I've tried (3.0rc4, 2.2.3, 2.2.2, 2.2.1).  Anybody have any ideas?  It's entirely possible I'm missing something very simple.

Thanks in advance...

-J.C.

_________________________________________________________________
News, entertainment and everything you care about at Live.com. Get it now!
http://www.live.com/getstarted.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070928/3f9df2c7/attachment.html
From cfis at savagexi.com  Fri Sep 28 15:50:51 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Error during Make
In-Reply-To: <BAY124-W33EDC68DDE599EA7F895C581B20@phx.gbl>
References: <BAY124-W33EDC68DDE599EA7F895C581B20@phx.gbl>
Message-ID: <46FD5B1B.8070701@savagexi.com>

Strange - I just built GEOS (head) without any issue on Fedora Core 6, 
CentOS and MingW/msys.

What compiler and version?

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070928/e9634657/smime.bin
From jc_quirin at hotmail.com  Fri Sep 28 15:55:39 2007
From: jc_quirin at hotmail.com (JC Quirin)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Error during Make
In-Reply-To: <46FD5B1B.8070701@savagexi.com>
References: <BAY124-W33EDC68DDE599EA7F895C581B20@phx.gbl>
	<46FD5B1B.8070701@savagexi.com>
Message-ID: <BAY124-W20EE06953C685E63D1AF1481B20@phx.gbl>

gcc 2.96



> Date: Fri, 28 Sep 2007 13:50:51 -0600
> From: cfis@savagexi.com
> To: geos-devel@geos.refractions.net
> Subject: Re: [geos-devel] Error during Make
> 
> Strange - I just built GEOS (head) without any issue on Fedora Core 6, 
> CentOS and MingW/msys.
> 
> What compiler and version?
> 
> Charlie

_________________________________________________________________
Connect to the next generation of MSN Messenger?
http://imagine-msn.com/messenger/launch80/default.aspx?locale=en-us&source=wlmailtagline
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070928/ade971d7/attachment.html
From cfis at savagexi.com  Fri Sep 28 16:16:43 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Error during Make
In-Reply-To: <BAY124-W20EE06953C685E63D1AF1481B20@phx.gbl>
References: <BAY124-W33EDC68DDE599EA7F895C581B20@phx.gbl>	<46FD5B1B.8070701@savagexi.com>
	<BAY124-W20EE06953C685E63D1AF1481B20@phx.gbl>
Message-ID: <46FD612B.4010804@savagexi.com>

JC Quirin wrote:
> gcc 2.96

Maybe try a newer version - that is very, very old.  And its not even an 
official release, see:

http://gcc.gnu.org/gcc-2.96.html

Charlie
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070928/495b5711/smime.bin
From cfis at savagexi.com  Fri Sep 28 18:13:26 2007
From: cfis at savagexi.com (Charlie Savage)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] GEOS SRID Patch
In-Reply-To: <20070922071538.GD23894@keybit.net>
References: <46E8BABA.7080208@savagexi.com>
	<46E93F95.9060403@pobox.com>	<46E9679F.9090901@savagexi.com>
	<46E977B3.8090307@pobox.com>	<46EAAF4B.4000305@savagexi.com>
	<46F09CC7.6050606@savagexi.com>	<3E57A71D-7C7E-45C9-B2E8-1C5C93B0057F@gmail.com>	<95A3027E-867E-48CE-A2DE-B2D85AA71893@refractions.net>	<46F3FF83.8030303@savagexi.com>
	<20070922071538.GD23894@keybit.net>
Message-ID: <46FD7C86.4010708@savagexi.com>

Hi Strk,

Thanks for the help.

> AGE is the number of previous interfaces still supported.
> So, if current is 5 and you support 4 previous interfaces, a code
> which was compiled against interface 1 should still run w/out problems.

I see - and that should be the case.

> 
> Under Linux, your suggested versioning translates to a SO versioned
> as 1.4.0 (oldest interface supported, additional new interfaces, revision)
> while previous 4:3:3 should translate to 1.3.3.

Hmm - that sounds reasonable to me assuming that adding methods to the 
CAPI warrants the jump in current interface version (seems to me that it 
does).

> 
>> For the C++ lib, I'm doing:
>>
>> VERSION_MAJOR=3
>> VERSION_MINOR=0
>> VERSION_PATCH=0rc5
> 
> The C++ lib will actually have a release-bound version, no new library will
> be automatically used by code built against older libs (see -release in libtool
> manuals).

Ok, from libtool manual:

`-release release'
     Specify that the library was generated by release release of your 
package, so that users can easily tell which versions are newer than 
others. Be warned that no two releases of your package will be binary 
compatible if you use this flag.

So any release of the C++ library is not compatible with the previous one.

> So what your setting with VERSION_* is the *release* version, which will also
> be the C++ lib version.

Hmm, ok.  So I think my changes were correct then.

Thanks again for the help!  I never would have figured this out 
otherwise.  Seems this should be documented in the readme (maybe it is 
and I missed it)?

Charlie

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3237 bytes
Desc: S/MIME Cryptographic Signature
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20070928/2dd1db85/smime.bin
From ssides at usgs.gov  Sun Sep 30 01:04:21 2007
From: ssides at usgs.gov (Stuart C Sides)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] no outgoing dirEdge found error
In-Reply-To: <46F18C74.1060804@refractions.net>
Message-ID: <OFC8F2396C.314FC427-ON07257366.001045FD-07257366.001BDC48@usgs.gov>

Unfortunately, coincident geometries are the norm in our case. The two in 
the example I gave are the results of previous differences with a third 
overlapping polygon(s).

I tried Ben's suggestion first and got a compile error about a missing 
include file (this is all on a x86_64 Linux install using a very recent 
svn version). Thought you might want to know.

        geos/include/geos/geom/BinaryOp.h:54:44: error: 
geos/precision/GeometrySnapper.h: No such file or directory

GeometrySnapper.h is listed in
  noinst_HEADERS
of
  source/headers/geos/precision/Makefile

Just to see what would happen I copied the file to
  include/geos/precision
and it compiled, linked, and ran successfully.

Stuart





Ben Jubb <benjubb@refractions.net> 
Sent by: geos-devel-bounces@geos.refractions.net
09/19/2007 01:54 PM
Please respond to
GEOS Development List <geos-devel@geos.refractions.net>


To
GEOS Development List <geos-devel@geos.refractions.net>
cc

Subject
Re: [geos-devel] no outgoing dirEdge found error






There is a way to make this particular operation succeed in GEOS, which 
is to use the BinaryOp method instead of difference().  For example, the 
following code works (in MSVC8):


#include <string>
#include <iostream>

#include <geos/geom/PrecisionModel.h>
#include <geos/geom/GeometryFactory.h>
#include <geos/geom/Geometry.h>
#include <geos/geom/MultiPolygon.h>
#include <geos/io/WKTReader.h>

#include <geos/geom/BinaryOp.h>
#include <geos/operation/overlay/OverlayOp.h>

using namespace geos;

int main (int argc, char *argv[])
{
    using namespace operation::overlay;
  typedef std::auto_ptr< geom::Geometry > GeomAutoPtr;

  std::string mp1s = "MULTIPOLYGON (((88.0541300495810049 
-40.3914336120775417,"
    " 88.0013586636740683 -40.3952580652168507,"
    " 87.9856522556763849 -40.3125682141688557,"
    " 88.0410955427405639 -40.3084853410231361,"
    " 88.0447770149226727 -40.3320733430391556,"
    " 88.0541300495810049 -40.3914336120775417)),"
    " ((87.9569549228361041 -40.1614847724049824,"
    " 87.9856522556763849 -40.3125682141688557,"
    " 87.9594803530699494 -40.3144955269957563,"
    " 87.9484023890450430 -40.2597855714132962,"
    " 87.9236385364479673 -40.1638760511710515,"
    " 87.9569549228361041 -40.1614847724049824)))";

  std::string mp2s = "MULTIPOLYGON (((87.7184147523609425 
-40.3314878875577705,"
    " 87.7106409229361930 -40.2916861830969211,"
    " 87.6363928113999862 -39.9074815079801084,"
    " 87.8588765594887349 -39.8933226300382628,"
    " 88.3245648150878964 -39.8616404104367064,"
    " 88.3252910982550503 -39.8653834273614933,"
    " 88.4058355104796334 -40.2774282017416283,"
    " 88.4066631207306273 -40.2815647501607259,"
    " 87.9574816223991007 -40.3146427145853394,"
    " 87.7184147523609425 -40.3314878875577705)))";

  try {
    geos::geom::PrecisionModel *model =
        new 
geos::geom::PrecisionModel(geos::geom::PrecisionModel::FLOATING);
    geos::geom::GeometryFactory *factory = new 
geos::geom::GeometryFactory(model);

    geos::io::WKTReader *wkt = new geos::io::WKTReader();
    geos::geom::MultiPolygon *mp1 = (geos::geom::MultiPolygon 
*)wkt->read(mp1s);
    geos::geom::MultiPolygon *mp2 = (geos::geom::MultiPolygon 
*)wkt->read(mp2s);

    std::cout << "Is valid of one = " << mp1->isValid() << std::endl;
    std::cout << "Is valid of two = " << mp2->isValid() << std::endl;

    //geos::geom::Geometry *diff = mp1->difference(mp2);

    GeomAutoPtr gRealRes = BinaryOp(mp1, mp2, 
overlayOp(OverlayOp::opDIFFERENCE));

    std::cout << mp1->toString() << std::endl;
    std::cout << mp2->toString() << std::endl;
    //std::cout << diff->toString() << std::endl;
    std::cout << gRealRes.get()->toString() << std::endl;

  }
  catch (std::exception const &se) {
    std::cout << "ERROR - " << se.what() << std::endl;
  }
  catch (...) {
    std::cout << "General error" << std::endl;
  }

}


BInaryOp does the same difference op, but when that fails it tries again 
after shifting the geometry close to the origin.  Presumably this gains 
a few bits of precision in the intermediate results, that allows the 
operation to succeed.  This method is perhaps not as robust tho.

b


Martin Davis wrote:
> This computation works fine in the current version of JTS.  This may 
> indicate a porting bug in GEOS, or a slightly different choice of 
> tolerances.
>
> This is a classic case which causes robustness problems - overlaying 
> two geometries with linework which is almost coincident.
>
> The only suggestion I can make is to reduce the precision of your data 
> slightly in cases which fail.  Presumably your source data isn't 
> actually accurate to 16 decimal places?   It could be a while before 
> we can look at the GEOS code for this.
>
> Stuart C Sides wrote:
>>
>> Hi GEOS devels,
>>
>> We are writing a C++ application which is looking for areas of 
>> overlap between 1000's  of polygons. The app is being
>> developed on Linux with g++ 4.1.0.
>>
>> We first tried the stable release of GEOS 2.2.3 and received this 
>> error after processing several polygons:
>>
>>     TopologyException: found non-noded intersection between 87.9595 
>> -40.3145, 87.9484 -40.2598 and 87.9857 -40.3126, 87.9575 -40.3146 
>> 87.9595 -40.3145
>>
>> While reviewing the list archives we found references to major code 
>> changes that might fix some of these errors, so we
>> upgraded to RC3 and eventually to an SVN version from 2007-09-18. We 
>> got through a lot more polygons without errors,
>> but finally received this error:
>>
>>     TopologyException: no outgoing dirEdge found 87.957 -40.1615
>>
>> Note: this coordinate is from the first segment of the second polygon 
>> of the first multi-polygon below.
>>
>> In the original code, before I converted the multipolygons to strings 
>> to create the example, we received this error:
>>
>>     TopologyException: no outgoing dirEdge found 87.7184 -40.3315
>>
>> Note: this coordinate is from the first segment of the second 
>> multi-polygon below:
>>
>> I've boiled the error down to just a few lines of code, and would 
>> appreciate any suggestions.  The error is thrown at the
>> difference.
>>
>> Thanks
>> Stuart
>>
>>
>>
>> #include <string>
>> #include <iostream>
>>
>> #include <geos/geom/PrecisionModel.h>
>> #include <geos/geom/GeometryFactory.h>
>> #include <geos/geom/Geometry.h>
>> #include <geos/geom/MultiPolygon.h>
>> #include <geos/io/WKTReader.h>
>>
>> int main (int argc, char *argv[])
>> {
>>   std::string mp1s = "MULTIPOLYGON (((88.0541300495810049 
>> -40.3914336120775417,"
>>     " 88.0013586636740683 -40.3952580652168507,"
>>     " 87.9856522556763849 -40.3125682141688557,"
>>     " 88.0410955427405639 -40.3084853410231361,"
>>     " 88.0447770149226727 -40.3320733430391556,"
>>     " 88.0541300495810049 -40.3914336120775417)),"
>>     " ((87.9569549228361041 -40.1614847724049824,"
>>     " 87.9856522556763849 -40.3125682141688557,"
>>     " 87.9594803530699494 -40.3144955269957563,"
>>     " 87.9484023890450430 -40.2597855714132962,"
>>     " 87.9236385364479673 -40.1638760511710515,"
>>     " 87.9569549228361041 -40.1614847724049824)))";
>>
>>   std::string mp2s = "MULTIPOLYGON (((87.7184147523609425 
>> -40.3314878875577705,"
>>     " 87.7106409229361930 -40.2916861830969211,"
>>     " 87.6363928113999862 -39.9074815079801084,"
>>     " 87.8588765594887349 -39.8933226300382628,"
>>     " 88.3245648150878964 -39.8616404104367064,"
>>     " 88.3252910982550503 -39.8653834273614933,"
>>     " 88.4058355104796334 -40.2774282017416283,"
>>     " 88.4066631207306273 -40.2815647501607259,"
>>     " 87.9574816223991007 -40.3146427145853394,"
>>     " 87.7184147523609425 -40.3314878875577705)))";
>>
>>   try {
>>     geos::geom::PrecisionModel *model =
>>         new 
>> geos::geom::PrecisionModel(geos::geom::PrecisionModel::FLOATING);
>>     geos::geom::GeometryFactory *factory = new 
>> geos::geom::GeometryFactory(model);
>>
>>     geos::io::WKTReader *wkt = new geos::io::WKTReader();
>>     geos::geom::MultiPolygon *mp1 = (geos::geom::MultiPolygon 
>> *)wkt->read(mp1s);
>>     geos::geom::MultiPolygon *mp2 = (geos::geom::MultiPolygon 
>> *)wkt->read(mp2s);
>>
>>     std::cout << "Is valid of one = " << mp1->isValid() << std::endl;
>>     std::cout << "Is valid of two = " << mp2->isValid() << std::endl;
>>
>>     geos::geom::Geometry *diff = mp1->difference(mp2);
>>
>>     std::cout << mp1->toString() << std::endl;
>>     std::cout << mp2->toString() << std::endl;
>>     std::cout << diff->toString() << std::endl;
>>
>>   }
>>   catch (std::exception const &se) {
>>     std::cout << "ERROR - " << se.what() << std::endl;
>>   }
>>   catch (...) {
>>     std::cout << "General error" << std::endl;
>>   }
>>
>> }
>> 
------------------------------------------------------------------------
>>
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel@geos.refractions.net
>> http://geos.refractions.net/mailman/listinfo/geos-devel
>> 
>
_______________________________________________
geos-devel mailing list
geos-devel@geos.refractions.net
http://geos.refractions.net/mailman/listinfo/geos-devel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070929/3d2ae055/attachment.html
From ssides at usgs.gov  Sun Sep 30 23:45:49 2007
From: ssides at usgs.gov (Stuart C Sides)
Date: Fri Nov  2 20:53:44 2007
Subject: [geos-devel] Where did distancePointLine go?
Message-ID: <OF2034DEBA.4ED606AE-ON07257367.0012CFD3-07257367.0014ABD8@usgs.gov>

GEOS devels,

In code we wrote for 2.2.3, we used CGAlgorithms::distancePointLine. I 
can't seem to find it or a replacement for it in version 3.0.0*. Was this 
a bad thing, am I missing something...? Any help would be appreciated.

Thanks
Stuart
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20070930/7fe4eb35/attachment.html
