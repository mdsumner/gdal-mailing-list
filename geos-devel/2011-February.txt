From jbcarrillo at rcflood.org  Wed Feb  2 12:55:22 2011
From: jbcarrillo at rcflood.org (jbcarr)
Date: Wed Feb  2 12:55:23 2011
Subject: [geos-devel] ZoomToView Issue
Message-ID: <1296669322952-5985801.post@n2.nabble.com>


Hello All,

               I?m new to Mapguide. I am trying to get the ZoomToView to run
but am having issues. I can get it to work if I place my .aspx page in the
Task Pane of the map. But when I try to use it from an .aspx page from
outside of the task pane it doesn?t work. The map loads fine and my query
works fine, I get results but I can?t seem to get any javascript to run on
the map. I hard coded the coordinates for the ZoomToView in the code below.
The same code works fine when run from the Task Pane but again I?d like to
run it from outside the Task Pane. Thanks




<%
  
    'from the previous page
    Dim sessionId As [String] = Request.Form.[Get]("SESSION")
    Dim encroachPermit As [String] = Request.Form.[Get]("iAPN")
    Dim webLayout As [String] = "Library://JC_Test/WebLayer/C.WebLayout"

    'path to web config
    Dim realPath As String = Request.ServerVariables("APPL_PHYSICAL_PATH")
    Dim configPath As [String] = realPath & "webconfig.ini"
    MapGuideApi.MgInitializeWebTier("C:\Program
Files\AutoDesk\MapGuideEnterprise2011\WebServerExtensions\www\webconfig.ini")
    

    Dim userInfo As New MgUserInformation(sessionId)
    Dim siteConnection As New MgSiteConnection()
    siteConnection.Open(userInfo)

    Dim resService As MgResourceService =
DirectCast(siteConnection.CreateService(MgServiceType.ResourceService),
MgResourceService)
    Dim featureService As MgFeatureService =
DirectCast(siteConnection.CreateService(MgServiceType.FeatureService),
MgFeatureService)

    'Map from Map Guide
    Dim map As New MgMap()
    map.Open(resService, "C")

    
    'Query for the second condition
    Dim nameQuery As New MgFeatureQueryOptions()
    nameQuery.SetFilter("APN = '" & encroachPermit & "'")
  
    'second feature sources to compare first to
    Dim encroachId As New MgResourceIdentifier("Library://Oracle Feature
Source/FCT1TEST_Assessor feature source.FeatureSource")
    Dim featureReader As MgFeatureReader =
featureService.SelectFeatures(encroachId, "PARCELPTS", nameQuery)

    
    Dim list As New ArrayList()
    Dim x_coordinate As New ArrayList()
    Dim y_coordinate As New ArrayList()
    
    While featureReader.ReadNext()
        list.Add(featureReader.GetString("APN"))
    End While

        
    'Highlight the query result on the map
    Dim selection As New MgSelection(map)
    Dim layer As MgLayer = map.GetLayers().GetItem("C_Parcels")
    featureReader = featureService.SelectFeatures(encroachId, "PARCELPTS",
nameQuery)
    selection.AddFeatures(layer, featureReader, 0)
    Dim selectionXML As [String] = selection.ToXml()
    Dim selectionXML2 As [String] = selection.ToXml()
    
   
      
  
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Make Query</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="content-script-type" content="text/javascript" />
    <meta http-equiv="content-style-type" content="text/css" />
   

    <script type="text/javascript">
        function onPageLoad() {
            
            parent.parent.ZoomToView(6249630.51, 2281462.61, 5000, true);


        }
   
    </script>

</head>
<body id="body1" class="AppFrame" onload="onPageLoad()">
    <strong>The following are the query results: </strong>
    <ul>
        <%
            For i As Integer = 0 To list.Count - 1
                Dim address As [String] = list(i).ToString()
                If address <> "" Then
                    Response.Write("<li>" & list(i).ToString() & "</li>" &
vbLf)
                End If
            Next

        %>
    </ul>

    <iframe id="imap"
src="/mapguide2011/mapviewernet/ajaxviewer.aspx?SESSION=<%=
sessionId %>&WEBLAYOUT=<%= webLayout %>" name="ViewerFrame" height="700" 
        width="1200" scrolling="yes" />

</body>
</html>


Thanks,
JC

-- 
View this message in context: http://osgeo-org.1803224.n2.nabble.com/ZoomToView-Issue-tp5985801p5985801.html
Sent from the GEOS Developers mailing list archive at Nabble.com.
From James.Sewell at lisasoft.com  Wed Feb  2 18:55:08 2011
From: James.Sewell at lisasoft.com (James.Sewell@lisasoft.com)
Date: Wed Feb  2 18:55:16 2011
Subject: [geos-devel] RE: [Jts-topo-suite-user] JTS Topology error
In-Reply-To: <4D497DFC.30809@telus.net>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827CB@optimus.ms.a2end.com>
	<AANLkTikOKf5-V+6x9n3JM-PV0Rz5610PTHygsT9J=s08@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D1@optimus.ms.a2end.com>
	<AANLkTimxWMo97m6qfWQJsUDEsWjjJN7K==3DAgQkMH51@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>
	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>
	<4D48DED1.4090705@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
Message-ID: <CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>

(Crossposting to GEOS list)

I see. So the difference between the GeometryNoder with a PrecisionModel and using ST_Snaptogrid from PostGIS on the input geometries is that the GeometryNoder snaps all nodes which are created by the noding process as it works?

This seems like an elegant solution to deal with the roundoff issues.

I gather GEOS doesn't expose noding functionality in this way? Is this something that could possibly be added? From PostGIS would a command like ST_Node(geometry, 10E-10) make sense / be plausible? Or would a better solution be to define the precision for each geometry column?

It is possible I will be able to commit some time to this problem, so I am keen to hear what the GEOS list people think.

Cheers,
James Sewell
Developer
LISAsoft
________________________________
Ph: +61 3 8680 3250 Fax: +61 3 8680 3299
Level 9, 601 Bourke St, Melbourne Vic 3000
________________________________

LISAsoft is part of the A2end Group of Companies
http://www.ardec.com.au<http://www.ardec.com.au/>
http://www.lisasoft.com<http://www.lisasoft.com/>
http://www.terrapages.com<http://www.terrapages.com/>

From: Martin Davis [mailto:mtnclimb@telus.net]
Sent: Thursday, 3 February 2011 2:54 AM
Cc: jts-topo-suite-user@lists.sourceforge.net
Subject: Re: [Jts-topo-suite-user] JTS Topology error

The key aspect of the code I provided is the use of GeometryNoder.  This performs a snap-rounded noding using the supplied PrecisionModel.  This is what allows the noding to be performed correctly, and result in a set of line segments which polygonize correctly.  Are you using this in GEOS too?  If not, I would expect to see noding failures occur.

I'll be interested to hear your speed comparisons.  GeometryNoder is not all that optimized, and it's doing a lot of extra work to implement the snap-rounding, so it may well be slower.  That's the price for robustness.  I do have a much faster implementation in the lab, but it's not quite ready for prime time yet.

And yes, using an AffineTransformation to move the data closer to the origin has the effect of reducing the number of significant digits, which provides more numeric "room" for the line segment intersection algorithm to operate correctly.  This isn't a panacea, though - it's possible for the data to be too wide or have too many digits of precision and thus still fail.

Martin


On 2/1/2011 11:55 PM, James.Sewell@lisasoft.com<mailto:James.Sewell@lisasoft.com> wrote:
I thought as much.
The code you provide is identical to the code I am using in PostGIS land (without the pointonsuface intersection to map gids through from the left and the right), I'll test yours when I get a chance for speed.  In PostGIS it performs really well so long as I use Union(Collect(geom), EMPTYLINESTRING).
As a sidenote the AffineTransformation worked in PostGIS / GEOS to fix my problem, as does using it in JTS (tranlate, union, polygonize, translate).
I'm not quite sure I understand what this is achiving though? Is it just a matter of more significant digits to use?
Cheers,
James Sewell
Developer
LISAsoft
________________________________
Ph: +61 3 8680 3250 Fax: +61 3 8680 3299
Level 9, 601 Bourke St, Melbourne Vic 3000
________________________________

LISAsoft is part of the A2end Group of Companies
http://www.ardec.com.au<http://www.ardec.com.au/>
http://www.lisasoft.com<http://www.lisasoft.com/>
http://www.terrapages.com<http://www.terrapages.com/>

From: Martin Davis [mailto:mtnclimb@telus.net]
Sent: Wednesday, 2 February 2011 3:34 PM
To: jts-topo-suite-user@lists.sourceforge.net<mailto:jts-topo-suite-user@lists.sourceforge.net>
Subject: Re: [Jts-topo-suite-user] JTS Topology error

The reason you're seeing incorrect results from the Polygonize operation is due to numerical roundoff issues in the noding code.  These result in linework which isn't quite correctly noded, and thus which don't polygonize correctly.

The best way to handle this issue is to use snap-rounding with a precision model, to limit the precision of the noding process and provide correct output.  This will also help to reduce the number of slivers in the output.

I have prototyped some code to do just this.  It's in com.vividsolutions.jtstest.function.PolygonOverlayFunctions in SVN.  You can try it directly in the TestBuilder, or just port it to your environment. I'm not sure how well it will scale, but I'd be interested to hear if it works for you.

Here's the code inline:

  public static Geometry overlaySnapRounded(Geometry g1, Geometry g2, double precisionTol)
  {
    PrecisionModel pm = new PrecisionModel(precisionTol);
    GeometryFactory geomFact = g1.getFactory();

    List lines = LinearComponentExtracter.getLines(g1);
    // add second input's linework, if any
    if (g2 != null)
      LinearComponentExtracter.getLines(g2, lines);
    List nodedLinework = new GeometryNoder(pm).node(lines);
    // union the noded linework to remove duplicates
    Geometry nodedDedupedLinework = geomFact.buildGeometry(nodedLinework).union();

    // polygonize the result
    Polygonizer polygonizer = new Polygonizer();
    polygonizer.add(nodedDedupedLinework);
    Collection polys = polygonizer.getPolygons();

    // convert to collection for return
    Polygon[] polyArray = GeometryFactory.toPolygonArray(polys);
    return geomFact.createGeometryCollection(polyArray);
  }


Note that you need to use the right precisionTolerance.  This is the reciprocal of the desired grid size. For your data I used 1000000, which rounds to a grid of size10^-6.  I also tried 10^8, which worked as well.

On 2/1/2011 7:14 PM, James.Sewell@lisasoft.com<mailto:James.Sewell@lisasoft.com> wrote:
I have used AffineTransformation to move closer to the origin which seems to have worked brilliantly, thanks for that! I will test this in GEOS with our problem geoms in GEOS (seem bug report on the GEOS list) and see if this approach translates well.

However now when I polygonize my unioned linework like this:

Polygonizer p = new Polygonizer();
p.add(uniongeom);
Collection polys = p.getPolygons();

I run into the same problem I was hoping to fix by porting from GEOS. Perhaps the bug is in Polygonize? Or perhaps my understanding of how it is meant to work is flawed.

I would have thought the Polgonize of the unioned linework would produce an upper and lower polygon (as well as  many smaller polygons along the inner edge where the lines cut each other). Is there a reason this is not the output?

Once again thanks so much for the help.


________________________________

No virus found in this message.
Checked by AVG - www.avg.com<http://www.avg.com>
Version: 10.0.1202 / Virus Database: 1435/3417 - Release Date: 02/01/11
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110203/354505c0/attachment-0001.html
From mtnclimb at telus.net  Wed Feb  2 20:58:23 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Wed Feb  2 21:00:45 2011
Subject: [geos-devel] Re: [Jts-topo-suite-user] JTS Topology error
In-Reply-To: <CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827CB@optimus.ms.a2end.com>	<AANLkTikOKf5-V+6x9n3JM-PV0Rz5610PTHygsT9J=s08@mail.gmail.com>	<CB506E813C77E9498F043F1F951BB2768E3B9827D1@optimus.ms.a2end.com>	<AANLkTimxWMo97m6qfWQJsUDEsWjjJN7K==3DAgQkMH51@mail.gmail.com>	<CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>	<4D48DED1.4090705@telus.net>	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
Message-ID: <4D4A0BBF.7030803@telus.net>

Yes, GeometryNoder uses true snap-rounding, whereas ST_Snaptogrid just 
does vertex rounding.  Snap-rounding is more complex and slower, but is 
much more powerful in terms of increasing robustness.  (In fact, as far 
as I am aware, it's the only real solution to provide fully robust 
noding using finite-precision arithmetic).

Your suggestion of ST_Node makes reasonable sense to me.  The only 
caveat is that it would have to execute entirely in memory, so would not 
scale to really big datasets.   And it might be more precise to call it 
ST_SnapRound.

Martin

On 2/2/2011 3:55 PM, James.Sewell@lisasoft.com wrote:
>
> (Crossposting to GEOS list)
>
> I see. So the difference between the GeometryNoder with a 
> PrecisionModel and using ST_Snaptogrid from PostGIS on the input 
> geometries is that the GeometryNoder snaps all nodes which are created 
> by the noding process as it works?
>
> This seems like an elegant solution to deal with the roundoff issues.
>
> I gather GEOS doesn't expose noding functionality in this way? Is this 
> something that could possibly be added? From PostGIS would a command 
> like ST_Node(geometry, 10E-10) make sense / be plausible? Or would a 
> better solution be to define the precision for each geometry column?
>
> It is possible I will be able to commit some time to this problem, so 
> I am keen to hear what the GEOS list people think.
>
> Cheers,
>
> James Sewell
> Developer
> LISAsoft
>
> ------------------------------------------------------------------------
>
> *Ph: *+61 3 8680 3250 *Fax: *+61 3 8680 3299
> Level 9, 601 Bourke St, Melbourne Vic 3000
>
> ------------------------------------------------------------------------
>
>
> LISAsoft is part of the A2end Group of Companies
> http://www.ardec.com.au <http://www.ardec.com.au/>
> http://www.lisasoft.com <http://www.lisasoft.com/>
> http://www.terrapages..com <http://www.terrapages.com/>
>
> *From:*Martin Davis [mailto:mtnclimb@telus.net]
> *Sent:* Thursday, 3 February 2011 2:54 AM
> *Cc:* jts-topo-suite-user@lists.sourceforge.net
> *Subject:* Re: [Jts-topo-suite-user] JTS Topology error
>
> The key aspect of the code I provided is the use of GeometryNoder.  
> This performs a snap-rounded noding using the supplied 
> PrecisionModel.  This is what allows the noding to be performed 
> correctly, and result in a set of line segments which polygonize 
> correctly.  Are you using this in GEOS too?  If not, I would expect to 
> see noding failures occur.
>
> I'll be interested to hear your speed comparisons.  GeometryNoder is 
> not all that optimized, and it's doing a lot of extra work to 
> implement the snap-rounding, so it may well be slower.  That's the 
> price for robustness..  I do have a much faster implementation in the 
> lab, but it's not quite ready for prime time yet.
>
> And yes, using an AffineTransformation to move the data closer to the 
> origin has the effect of reducing the number of significant digits, 
> which provides more numeric "room" for the line segment intersection 
> algorithm to operate correctly.  This isn't a panacea, though - it's 
> possible for the data to be too wide or have too many digits of 
> precision and thus still fail.
>
> Martin
>
>
> On 2/1/2011 11:55 PM, James.Sewell@lisasoft.com 
> <mailto:James.Sewell@lisasoft.com> wrote:
>
> I thought as much.
>
> The code you provide is identical to the code I am using in PostGIS 
> land (without the pointonsuface intersection to map gids through from 
> the left and the right), I'll test yours when I get a chance for 
> speed.  In PostGIS it performs really well so long as I use 
> Union(Collect(geom), EMPTYLINESTRING).
>
> As a sidenote the AffineTransformation worked in PostGIS / GEOS to fix 
> my problem, as does using it in JTS (tranlate, union, polygonize, 
> translate).
>
> I'm not quite sure I understand what this is achiving though? Is it 
> just a matter of more significant digits to use?
>
> Cheers,
>
> James Sewell
> Developer
> LISAsoft
>
> ------------------------------------------------------------------------
>
> *Ph: *+61 3 8680 3250 *Fax: *+61 3 8680 3299
> Level 9, 601 Bourke St, Melbourne Vic 3000
>
> ------------------------------------------------------------------------
>
>
> LISAsoft is part of the A2end Group of Companies
> http://www.ardec.com.au <http://www.ardec.com.au/>
> http://www.lisasoft.com <http://www.lisasoft.com/>
> http://www.terrapages.com <http://www.terrapages.com/>
>
> *From:*Martin Davis [mailto:mtnclimb@telus.net]
> *Sent:* Wednesday, 2 February 2011 3:34 PM
> *To:* jts-topo-suite-user@lists.sourceforge.net 
> <mailto:jts-topo-suite-user@lists.sourceforge.net>
> *Subject:* Re: [Jts-topo-suite-user] JTS Topology error
>
> The reason you're seeing incorrect results from the Polygonize 
> operation is due to numerical roundoff issues in the noding code.  
> These result in linework which isn't quite correctly noded, and thus 
> which don't polygonize correctly.
>
> The best way to handle this issue is to use snap-rounding with a 
> precision model, to limit the precision of the noding process and 
> provide correct output.  This will also help to reduce the number of 
> slivers in the output.
>
> I have prototyped some code to do just this.  It's in 
> com.vividsolutions.jtstest.function.PolygonOverlayFunctions in SVN.  
> You can try it directly in the TestBuilder, or just port it to your 
> environment. I'm not sure how well it will scale, but I'd be 
> interested to hear if it works for you.
>
> Here's the code inline:
>
>   public static Geometry overlaySnapRounded(Geometry g1, Geometry g2, 
> double precisionTol)
>   {
>     PrecisionModel pm = new PrecisionModel(precisionTol);
>     GeometryFactory geomFact = g1.getFactory();
>
>     List lines = LinearComponentExtracter.getLines(g1);
>     // add second input's linework, if any
>     if (g2 != null)
>       LinearComponentExtracter.getLines(g2, lines);
>     List nodedLinework = new GeometryNoder(pm).node(lines);
>     // union the noded linework to remove duplicates
>     Geometry nodedDedupedLinework = 
> geomFact.buildGeometry(nodedLinework).union();
>
>     // polygonize the result
>     Polygonizer polygonizer = new Polygonizer();
>     polygonizer.add(nodedDedupedLinework);
>     Collection polys = polygonizer.getPolygons();
>
>     // convert to collection for return
>     Polygon[] polyArray = GeometryFactory.toPolygonArray(polys);
>     return geomFact.createGeometryCollection(polyArray);
>   }
>
>
> Note that you need to use the right precisionTolerance.  This is the 
> reciprocal of the desired grid size. For your data I used 1000000, 
> which rounds to a grid of size10^-6.  I also tried 10^8, which worked 
> as well.
>
> On 2/1/2011 7:14 PM, James.Sewell@lisasoft.com 
> <mailto:James.Sewell@lisasoft.com> wrote:
>
> I have used AffineTransformation to move closer to the origin which 
> seems to have worked brilliantly, thanks for that! I will test this in 
> GEOS with our problem geoms in GEOS (seem bug report on the GEOS list) 
> and see if this approach translates well.
>
> However now when I polygonize my unioned linework like this:
>
> Polygonizer p = new Polygonizer();
>
> p.add(uniongeom);
>
> Collection polys = p..getPolygons();
>
> I run into the same problem I was hoping to fix by porting from GEOS. 
> Perhaps the bug is in Polygonize? Or perhaps my understanding of how 
> it is meant to work is flawed.
>
> I would have thought the Polgonize of the unioned linework would 
> produce an upper and lower polygon (as well as  many smaller polygons 
> along the inner edge where the lines cut each other). Is there a 
> reason this is not the output?
>
> Once again thanks so much for the help.
>
> ------------------------------------------------------------------------
>
> No virus found in this message.
> Checked by AVG - www.avg.com <http://www.avg.com>
> Version: 10.0.1202 / Virus Database: 1435/3417 - Release Date: 02/01/11
>
> ------------------------------------------------------------------------
>
> No virus found in this message.
> Checked by AVG - www.avg.com <http://www.avg.com>
> Version: 10.0.1202 / Virus Database: 1435/3418 - Release Date: 02/02/11
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20110202/dae3595f/attachment-0001.html
From kyle at pbx.org  Wed Feb  2 21:52:21 2011
From: kyle at pbx.org (kyle cronan)
Date: Wed Feb  2 21:59:54 2011
Subject: [geos-devel] Re: PolygonBuilder::findShell assertion 'shellcount <=
	1' failed
In-Reply-To: <AANLkTi=_nHd7nihwpqNrzr6hkwSxgHkk4Ac0J3_+G22r@mail.gmail.com>
References: <AANLkTi=_nHd7nihwpqNrzr6hkwSxgHkk4Ac0J3_+G22r@mail.gmail.com>
Message-ID: <AANLkTinE7RvSRLgGaM5GKSNr0JxCrYDa7jt9Mmq3mMi0@mail.gmail.com>

Hi,

I posted the message below back in august, but have only recently had
a chance to look into this further.  Here is a minimal test case that
triggers the assertion failure using Shapely.  Below that I have
included details on the debugging I did and a patch that fixes the
issue for me (no idea if it's correct though).

from shapely.wkt import loads

p1 = loads('MULTIPOLYGON (((60.0000000000000000 6.5105151320986412,
44.0044859469790026 11.6931320480208569, 0.0000000000000000
25.9507790663861222, 0.0000000000000000 26.8608278557796467,
0.0000000000000000 29.8387923019253307, 60.0000000000000000
10.3985283676378408, 60.0000000000000000 7.8021345594223774,
60.0000000000000000 6.6570998796460161, 60.0000000000000000
6.5105151320986412)), ((43.3161197496508308 0.0000000000000000,
0.0000000000000000 0.0000000000000000, 0.0000000000000000
14.0346133423735822, 0.0000000000000000 17.9226661292310787,
0.0000000000000000 21.5874865260243638, 34.0258524396557860
6.8981402622972743, 55.3161197496508308 0.0000000000000000,
50.0044466166182886 0.0000000000000000, 43.3161197496508308
0.0000000000000000)), ((13.4455725323347899 36.0000000000000000,
60.0000000000000000 36.0000000000000000, 60.0000000000000000
16.7944518298098018, 60.0000000000000000 16.3644011555093201,
60.0000000000000000 14.0439960304547569, 2.9187843276549756
36.0000000000000000, 11.8945390820010992 36.0000000000000000,
13.4455725323347899 36.0000000000000000)))')
p2 = loads('POLYGON ((50.0044466166182886 0.0000000000000000,
0.0000000000000000 21.5874865260243638, 0.0000000000000000
35.7392139719321804, 60.0000000000000000 13.1838946818537934,
60.0000000000000000 0.0000000000000000, 50.0044466166182886
0.0000000000000000))')

p1.union(p2)

Debug details: I've got a python program that uses GEOS via Shapely.
I'm getting an assertion failure within
geos::operation::overlay::PolygonBuilder::findShell, where it checks
that the number of shells is <= 1.  I changed the assert to just
return NULL, so that my program will continue past this occasional
error (that's why you see a breakpoint set on "return NULL" instead of
abort(), below).  Here is the backtrace:

Breakpoint 1, geos::operation::overlay::PolygonBuilder::findShell (
    this=0x7fffffffb830, minEdgeRings=0x209d540) at PolygonBuilder.cpp:263
263                 return NULL;

(gdb) bt
#0  geos::operation::overlay::PolygonBuilder::findShell (this=0x7fffffffb830,
    minEdgeRings=0x209d540) at PolygonBuilder.cpp:263
#1  0x00007ffff3135f0d in geos::operation::overlay::PolygonBuilder::buildMinimal
EdgeRings (this=0x7fffffffb830, maxEdgeRings=0x20b6c50,
    newShellList=0x7fffffffb838, freeHoleList=0x7fffffffb690)
    at PolygonBuilder.cpp:213
#2  0x00007ffff3135b30 in geos::operation::overlay::PolygonBuilder::add (
    this=0x7fffffffb830, dirEdges=0x7fffffffb740, nodes=0x7fffffffb720)
    at PolygonBuilder.cpp:127
#3  0x00007ffff3135985 in geos::operation::overlay::PolygonBuilder::add (
    this=0x7fffffffb830, graph=0x7fffffffb9e8) at PolygonBuilder.cpp:100
#4  0x00007ffff3130d65 in geos::operation::overlay::OverlayOp::computeOverlay (
    this=0x7fffffffb930, opCode=geos::operation::overlay::OverlayOp::opUNION)
    at OverlayOp.cpp:756
#5  0x00007ffff312f508 in
geos::operation::overlay::OverlayOp::getResultGeometry
(this=0x7fffffffb930,
funcCode=geos::operation::overlay::OverlayOp::opUNION)
    at OverlayOp.cpp:188
#6  0x00007ffff312e845 in geos::operation::overlay::OverlayOp::overlayOp (
    geom0=0x2094490, geom1=0x207ee90,
    opCode=geos::operation::overlay::OverlayOp::opUNION) at OverlayOp.cpp:94
#7  0x00007ffff341a28f in geos::operation::overlay::overlayOp::operator() (
    this=0x7fffffffbb00, g0=0x2094490, g1=0x207ee90)
    at ../source/headers/geos/operation/overlay/OverlayOp.h:344
#8  0x00007ffff341ac59 in
geos::geom::BinaryOp<geos::operation::overlay::overlayOp>
(g0=0x2094490, g1=0x207ee90, _Op=...)
    at ../source/headers/geos/geom/BinaryOp.h:215
#9  0x00007ffff34133a5 in GEOSUnion_r (extHandle=0xa13fa0, g1=0x2094490,
    g2=0x207ee90) at geos_ts_c.cpp:1675
#10 0x00007ffff363ce4c in ffi_call_unix64 ()
   from /usr/lib/python2.6/lib-dynload/_ctypes.so
#11 0x00007ffff363cbd4 in ffi_call ()
   from /usr/lib/python2.6/lib-dynload/_ctypes.so
#12 0x00007ffff3637664 in _CallProc ()
   from /usr/lib/python2.6/lib-dynload/_ctypes.so
#13 0x00007ffff362ef33 in ?? () from /usr/lib/python2.6/lib-dynload/_ctypes.so
#14 0x000000000041c9d7 in PyObject_Call ()
...

I figured I could create a minimal test case by getting the WKT for
these geometries and then going back and trying to execute just this
one union operation:

(gdb) frame 9
#9  0x00007ffff34133a5 in GEOSUnion_r (extHandle=0xa13fa0, g1=0x2094490,
    g2=0x207ee90) at geos_ts_c.cpp:1675
1675            GeomAutoPtr g3 = BinaryOp(g1, g2,
overlayOp(OverlayOp::opUNION));

(gdb) printf "%s", GEOSGeomToWKT_r(extHandle, g1)
MULTIPOLYGON (((60.0000 ... [see test case]

(gdb) printf "%s", GEOSGeomToWKT_r(extHandle, g2)
POLYGON ((50.0044 ... [see test case]

I looked at these in a visualizer.  g1 is made up of three distinct
polygons, each of which is simple.  g2 is a polygon that intersects
with two of these.  So the union should be a multipolygon with 2
components.

I tried doing this union with Shapely, and with my modified GEOS where
it returns NULL instead of calling abort(), I got the correct result.
But I don't know how this code works, so maybe that's not a proper
fix.

Here is a patch that applies against the latest nightly snapshot.  I'm
running with this modification now, so I'd be very interested to hear
if this might cause incorrect results in other circumstances.

--- geos-20110201/src/operation/overlay/PolygonBuilder.cpp
2011-02-02 04:20:04.000000000 +0000
+++ geos-20110201.new/src/operation/overlay/PolygonBuilder.cpp
2011-02-03 02:47:10.796078297 +0000
@@ -258,7 +258,7 @@
 #endif
                }
        }
-       assert(shellCount <= 1); // found two shells in MinimalEdgeRing list
+       if (shellCount > 1) return NULL; // found two shells in
MinimalEdgeRing list
        return shell;
 }

Thanks,
Kyle Cronan

On Mon, Aug 23, 2010 at 3:52 PM, kyle cronan <kyle@pbx.org> wrote:
> Hi everyone,
>
> I ran into this assertion failure while developing a python script
> that uses Shapely 1.2.3 with GEOS 3.2.2. ?My program makes it most of
> the way through a large dataset and then gives this message:
>
> python: PolygonBuilder.cpp:261: geos::geomgraph::EdgeRing*
> geos::operation::overlay::PolygonBuilder::findShell(std::vector<geos::operation::overlay::MinimalEdgeRing*,
> std::allocator<geos::operation::overlay::MinimalEdgeRing*> >*):
> Assertion `shellCount <= 1' failed.
>
> I figured I'd try to isolate some code that can recreate the problem,
> and see if I can get the same behavior with some test code in C, but
> first I just wanted to ask what this failure is all about. ?And what
> is a minimal edge ring? ?Any pointers that could help me understand
> how to debug the problem would be appreciated.
>
> Thanks,
> Kyle Cronan
> <kyle@pbx.org>
>
From strk at keybit.net  Thu Feb  3 03:14:14 2011
From: strk at keybit.net (strk)
Date: Thu Feb  3 03:14:19 2011
Subject: [geos-devel] RE: [Jts-topo-suite-user] JTS Topology error
In-Reply-To: <CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827D1@optimus.ms.a2end.com>
	<AANLkTimxWMo97m6qfWQJsUDEsWjjJN7K==3DAgQkMH51@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>
	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>
	<4D48DED1.4090705@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
Message-ID: <20110203081414.GK69558@keybit.net>

On Thu, Feb 03, 2011 at 10:25:08AM +1030, James.Sewell@lisasoft.com wrote:
> (Crossposting to GEOS list)
> 
> I see. So the difference between the GeometryNoder with a PrecisionModel and using ST_Snaptogrid from PostGIS on the input geometries is that the GeometryNoder snaps all nodes which are created by the noding process as it works?
> 
> This seems like an elegant solution to deal with the roundoff issues.
> 
> I gather GEOS doesn't expose noding functionality in this way? Is this something that could possibly be added? From PostGIS would a command like ST_Node(geometry, 10E-10) make sense / be plausible? Or would a better solution be to define the precision for each geometry column?

Check the new ST_Snap() function in PostGIS and GEOS svn repository.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From strk at keybit.net  Fri Feb  4 07:59:53 2011
From: strk at keybit.net (strk)
Date: Fri Feb  4 07:59:57 2011
Subject: [geos-devel] Virtual inheritance: call for test
Message-ID: <20110204125953.GB98601@keybit.net>

You may have noticed recent commits focused on removing static casts.
Under the hood this was propedeutic work to introduction of virtual
inheritance, allowing us to map the concept of Puntal, Lineal and
Polygonal JTS interfaces into GEOS.

Once such change is introduced, you'll be able to upcast Puntal, Lineal
and Polygonal to Geometry.
And you may upcast Point and MultiPoint to Puntal,
LineString or MultiLineString to Lineal, Polygon and MultiPolygon to
Polygonal.

A side-effect is that you cannot downcast from Geometry to Point
or LineString or Polygon w/out using dynamic_cast anymore.
You'll get a compiler error if you try (which drove the changes).

You may notice that casting up and down between Geometry and one
of the basic types you'll really get different pointers, which is
the reason why static_cast is forbidden.
GCC kindly complains both with static_cast _and_ with C-like casts,
so the real danger is only when you use reinterpret_cast<> or you
step on a void pointer. In both cases you'll get no warning at compile
time but memory errors at runtime. r3184 is an example of such bad
hiding bug that took a while to find (due to the unfortunate interface
of STR tree making use of void pointers).

I do belive the change is healthy, if not else, for forcing cleanup up
of dangling unsafe casts and pointing out other unsafe interfaces.

Before committing this to SVN trunk I'd like to have some feedback
by anyone having C++ client code [1] to build and test againts it.
Both the GEOS and the PostGIS testsuites run fine with the patch applied.

The patch is in mailbox format, can apply using git-am or patch -p1 from
top-level source dir.

[1] Consider also adding the project on the wiki, if not
    already listed: http://trac.osgeo.org/geos/wiki/Applications

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
-------------- next part --------------
>From 52ee164ca58cf3811e66bf300e6e65587428f4f5 Mon Sep 17 00:00:00 2001
From: Sandro Santilli <strk@keybit.net>
Date: Fri, 4 Feb 2011 13:36:17 +0100
Subject: [PATCH] Turn Puntal, Lineal and Polygonal into Geometry derivates. This commit introduces virtual inheritance and 3 diamonds.

---
 NEWS                                   |    2 ++
 include/geos/geom/GeometryCollection.h |    2 +-
 include/geos/geom/LineString.h         |    6 +-----
 include/geos/geom/Lineal.h             |    6 +++++-
 include/geos/geom/MultiLineString.inl  |    1 +
 include/geos/geom/MultiPoint.h         |    2 +-
 include/geos/geom/MultiPolygon.inl     |    1 +
 include/geos/geom/Point.h              |    2 +-
 include/geos/geom/Polygon.h            |    2 +-
 include/geos/geom/Polygonal.h          |    6 +++++-
 include/geos/geom/Puntal.h             |    6 +++++-
 src/geom/LinearRing.cpp                |    4 +++-
 src/geom/MultiLineString.cpp           |   10 ++++++----
 src/geom/MultiPoint.cpp                |    1 +
 src/geom/MultiPolygon.cpp              |    3 ++-
 15 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/NEWS b/NEWS
index abad81a..76110b1 100644
--- a/NEWS
+++ b/NEWS
@@ -16,6 +16,8 @@ Changes in 3.3.0
   - CAPI: GEOSRelatePatternMatch 
   -  PHP: new PHP5 bindings based on CAPI
 - C++ API changes:
+  - Geometry inheritance chain changed to introduce Puntal, Lineal
+    and Polygonal classes (virtual inheritance introduced)
   - Geometry::isWithinDistance method is now const
   - Polygonizer::getCutEdges returns by const ref
   - Polygonizer::getDangles returns by const ref
diff --git a/include/geos/geom/GeometryCollection.h b/include/geos/geom/GeometryCollection.h
index 9e2a8cc..b16b094 100644
--- a/include/geos/geom/GeometryCollection.h
+++ b/include/geos/geom/GeometryCollection.h
@@ -54,7 +54,7 @@ namespace geom { // geos::geom
  * represented by GeometryCollection subclasses MultiPoint,
  * MultiLineString, MultiPolygon.
  */
-class GEOS_DLL GeometryCollection : public Geometry {
+class GEOS_DLL GeometryCollection : public virtual Geometry {
 
 public:
 	friend class GeometryFactory;
diff --git a/include/geos/geom/LineString.h b/include/geos/geom/LineString.h
index 95f6a78..074c0ac 100644
--- a/include/geos/geom/LineString.h
+++ b/include/geos/geom/LineString.h
@@ -68,7 +68,7 @@ namespace geom { // geos::geom
  *  If these conditions are not met, the constructors throw
  *  an {@link IllegalArgumentException}
  */
-class GEOS_DLL LineString: public Geometry, public Lineal {
+class GEOS_DLL LineString: public virtual Geometry, public Lineal {
 
 public:
 
@@ -223,10 +223,6 @@ LineString::clone() const {
 } // namespace geos::geom
 } // namespace geos
 
-//#ifdef GEOS_INLINE
-//# include "geos/geom/LineString.inl"
-//#endif
-
 #ifdef _MSC_VER
 #pragma warning(pop)
 #endif
diff --git a/include/geos/geom/Lineal.h b/include/geos/geom/Lineal.h
index 5a63cbc..d639dc0 100644
--- a/include/geos/geom/Lineal.h
+++ b/include/geos/geom/Lineal.h
@@ -27,7 +27,11 @@ namespace geom { // geos::geom
  * Identifies {@link Geometry} subclasses which
  * are 1-dimensional and with components which are {@link LineString}s.
  */
-class Lineal {};
+class Lineal : public virtual Geometry
+{
+protected:
+  Lineal(): Geometry(0) {}
+};
 
 } // namespace geos::geom
 } // namespace geos
diff --git a/include/geos/geom/MultiLineString.inl b/include/geos/geom/MultiLineString.inl
index 884c49c..e3f72cc 100644
--- a/include/geos/geom/MultiLineString.inl
+++ b/include/geos/geom/MultiLineString.inl
@@ -32,6 +32,7 @@ namespace geom { // geos::geom
 INLINE 
 MultiLineString::MultiLineString(const MultiLineString &mp)
 	:
+	Geometry(mp),
 	GeometryCollection(mp)
 {
 }
diff --git a/include/geos/geom/MultiPoint.h b/include/geos/geom/MultiPoint.h
index f6f7fcd..d22110a 100644
--- a/include/geos/geom/MultiPoint.h
+++ b/include/geos/geom/MultiPoint.h
@@ -104,7 +104,7 @@ protected:
 	 */
 	MultiPoint(std::vector<Geometry *> *newPoints, const GeometryFactory *newFactory);
 
-	MultiPoint(const MultiPoint &mp): GeometryCollection(mp) {}
+	MultiPoint(const MultiPoint &mp): Geometry(mp), GeometryCollection(mp) {}
 
 	const Coordinate* getCoordinateN(int n) const;
 };
diff --git a/include/geos/geom/MultiPolygon.inl b/include/geos/geom/MultiPolygon.inl
index 23574d4..e7bdf36 100644
--- a/include/geos/geom/MultiPolygon.inl
+++ b/include/geos/geom/MultiPolygon.inl
@@ -29,6 +29,7 @@ namespace geom { // geos::geom
 INLINE 
 MultiPolygon::MultiPolygon(const MultiPolygon &mp)
 	:
+	Geometry(mp),
 	GeometryCollection(mp)
 {
 }
diff --git a/include/geos/geom/Point.h b/include/geos/geom/Point.h
index 8169b4a..4829f72 100644
--- a/include/geos/geom/Point.h
+++ b/include/geos/geom/Point.h
@@ -65,7 +65,7 @@ namespace geom { // geos::geom
  *   (i.e does not have an NaN X or Y ordinate)
  *
  */
-class GEOS_DLL Point : public Geometry, public Puntal 
+class GEOS_DLL Point : public virtual Geometry, public Puntal 
 {
 
 public:
diff --git a/include/geos/geom/Polygon.h b/include/geos/geom/Polygon.h
index 5466f0a..5367932 100644
--- a/include/geos/geom/Polygon.h
+++ b/include/geos/geom/Polygon.h
@@ -64,7 +64,7 @@ namespace geom { // geos::geom
  *  Specification for SQL</A> .
  *
  */
-class GEOS_DLL Polygon: public Geometry, public Polygonal
+class GEOS_DLL Polygon: public virtual Geometry, public Polygonal
 {
 
 public:
diff --git a/include/geos/geom/Polygonal.h b/include/geos/geom/Polygonal.h
index 1af44fc..b2afe2b 100644
--- a/include/geos/geom/Polygonal.h
+++ b/include/geos/geom/Polygonal.h
@@ -27,7 +27,11 @@ namespace geom { // geos::geom
  * Identifies {@link Geometry} subclasses which
  * are 2-dimensional and with components which are {@link Polygon}s.
  */
-class Polygonal {};
+class Polygonal : public virtual Geometry
+{
+protected:
+  Polygonal(): Geometry(0) {}
+};
 
 } // namespace geos::geom
 } // namespace geos
diff --git a/include/geos/geom/Puntal.h b/include/geos/geom/Puntal.h
index 6298fee..0b47a96 100644
--- a/include/geos/geom/Puntal.h
+++ b/include/geos/geom/Puntal.h
@@ -27,7 +27,11 @@ namespace geom { // geos::geom
  * Identifies {@link Geometry} subclasses which
  * are 0-dimensional and with components which are {@link Point}s.
  */
-class Puntal {};
+class Puntal : public virtual Geometry
+{
+protected:
+  Puntal(): Geometry(0) {}
+};
 
 } // namespace geos::geom
 } // namespace geos
diff --git a/src/geom/LinearRing.cpp b/src/geom/LinearRing.cpp
index 1807b34..2baaca0 100644
--- a/src/geom/LinearRing.cpp
+++ b/src/geom/LinearRing.cpp
@@ -35,12 +35,13 @@ namespace geos {
 namespace geom { // geos::geom
 
 /*public*/
-LinearRing::LinearRing(const LinearRing &lr): LineString(lr) {}
+LinearRing::LinearRing(const LinearRing &lr): Geometry(lr), LineString(lr) {}
 
 /*public*/
 LinearRing::LinearRing(CoordinateSequence* newCoords,
 		const GeometryFactory *newFactory)
 	:
+	Geometry(newFactory),
 	LineString(newCoords, newFactory)
 {
 	validateConstruction();	
@@ -50,6 +51,7 @@ LinearRing::LinearRing(CoordinateSequence* newCoords,
 LinearRing::LinearRing(CoordinateSequence::AutoPtr newCoords,
 		const GeometryFactory *newFactory)
 	:
+	Geometry(newFactory),
 	LineString(newCoords, newFactory)
 {
 	validateConstruction();	
diff --git a/src/geom/MultiLineString.cpp b/src/geom/MultiLineString.cpp
index bdc3306..ceace2a 100644
--- a/src/geom/MultiLineString.cpp
+++ b/src/geom/MultiLineString.cpp
@@ -45,6 +45,7 @@ namespace geom { // geos::geom
 MultiLineString::MultiLineString(vector<Geometry *> *newLines,
 		const GeometryFactory *factory)
 	:
+	Geometry(factory),
 	GeometryCollection(newLines,factory)
 {
 }
@@ -71,8 +72,9 @@ bool MultiLineString::isClosed() const {
 	if (isEmpty()) {
 		return false;
 	}
-	for (size_t i = 0; i < geometries->size(); i++) {
-		if (!((LineString *)(*geometries)[i])->isClosed()) {
+	for (size_t i = 0, n = geometries->size(); i < n; ++i) {
+		LineString *ls = dynamic_cast<LineString*>((*geometries)[i]);
+		if ( ! ls->isClosed() ) {
 			return false;
 		}
 	}
@@ -112,8 +114,8 @@ MultiLineString::reverse() const
 	Geometry::NonConstVect *revLines = new Geometry::NonConstVect(nLines);
 	for (size_t i=0; i<nLines; ++i)
 	{
-		assert(dynamic_cast<LineString*>((*geometries)[i]));
-		LineString *iLS = static_cast<LineString*>((*geometries)[i]);
+		LineString *iLS = dynamic_cast<LineString*>((*geometries)[i]);
+		assert(iLS);
 		(*revLines)[nLines-1-i] = iLS->reverse();
 	}
 	return getFactory()->createMultiLineString(revLines);
diff --git a/src/geom/MultiPoint.cpp b/src/geom/MultiPoint.cpp
index 36a17b6..6b6b0be 100644
--- a/src/geom/MultiPoint.cpp
+++ b/src/geom/MultiPoint.cpp
@@ -35,6 +35,7 @@ namespace geom { // geos::geom
 /*protected*/
 MultiPoint::MultiPoint(vector<Geometry *> *newPoints, const GeometryFactory *factory)
 	:
+	Geometry(factory),
 	GeometryCollection(newPoints,factory)
 {
 }
diff --git a/src/geom/MultiPolygon.cpp b/src/geom/MultiPolygon.cpp
index 0c2e40f..0f0515f 100644
--- a/src/geom/MultiPolygon.cpp
+++ b/src/geom/MultiPolygon.cpp
@@ -41,7 +41,8 @@ namespace geom { // geos::geom
 
 /*protected*/
 MultiPolygon::MultiPolygon(vector<Geometry *> *newPolys, const GeometryFactory *factory)
-	: GeometryCollection(newPolys,factory)
+	: Geometry(factory),
+	  GeometryCollection(newPolys,factory)
 {}
 
 MultiPolygon::~MultiPolygon(){}
-- 
1.7.0.4

From jay at zoocasa.com  Thu Feb 17 17:46:49 2011
From: jay at zoocasa.com (J Smith)
Date: Thu Feb 17 17:54:20 2011
Subject: [geos-devel] GEOS extensions for Ruby released
Message-ID: <AANLkTimJiL0EJuzjz5Y4rbxPd8SpWiOrju-BOSADK3eM@mail.gmail.com>

G'day list!

A couple of months ago I had posted[1] about some extensions to the
Ruby GEOS bindings that we at Zoocasa were interested in releasing as
free software. Well, I finally got a bit of time to finish up a
release, and the code and the gems have all been pushed to github and
rubygems.

Without further ado, here's the code and the gems:

https://github.com/zoocasa/geos-extensions

https://rubygems.org/gems/geos-extensions

The extensions themselves include...

- a bunch of utility methods and helpers to make working with
geometries a little easier. The Geos.read method for instance
recognizes WKT, WKB and a number of Google Maps-based input formats
and makes conversions on the fly as necessary, and methods like
Geos::Geometry#to_wkt, to_wkb, to_g_lat_lng, etc. allow for quick
conversions for output.

- ActiveRecord scopes for DE-9DIM and the like, allowing you to make
calls like MyModel.st_contains('POINT(20 20)').st_disjoint('POINT(10
10)').

- ActiveRecord accessors that automatically make conversions for you
via the above input and output methods.

- some 70+ helper methods in all.

The extensions work with both the native GEOS bindings as well as the
FFI-based bindings I've been working on[2], as well as both Rails 2.3
and 3. The ActiveRecord integration really only works with PostgreSQL
and PostGIS at the moment, although other databases could be added
with a bit of re-jiggering.

We've been using these extensions on zoocasa.com for quite a while
now, so the library has been pretty well tested in a production
application running on Rails 2.3, and we hope that these extensions
prove useful to the GEOS and Ruby communities.

Cheers.

J

[1] http://lists.osgeo.org/pipermail/geos-devel/2010-December/thread.html
[2] https://github.com/dark-panda/ffi-geos
From James.Sewell at lisasoft.com  Thu Feb 17 22:22:47 2011
From: James.Sewell at lisasoft.com (James.Sewell@lisasoft.com)
Date: Thu Feb 17 22:22:52 2011
Subject: [geos-devel] Nightly build performance
In-Reply-To: <20110203081414.GK69558@keybit.net>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827D1@optimus.ms.a2end.com>
	<AANLkTimxWMo97m6qfWQJsUDEsWjjJN7K==3DAgQkMH51@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>
	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>
	<4D48DED1.4090705@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
	<20110203081414.GK69558@keybit.net>
Message-ID: <CB506E813C77E9498F043F1F951BB2768E3B98295D@optimus.ms.a2end.com>

Greetings GEOS Devs,

I have been trying the GEOS and POSTGIS from a nightly build to test ST_Snap. I am still trying it out but have come across another issue.

I am currently running the following:

	POSTGIS="2.0.0SVN" GEOS="3.3.0-CAPI-1.7.0" PROJ="Rel. 4.7.1, 23 September 2009" LIBXML="2.6.26" USE_STATS

And comparing performance to:

	POSTGIS="1.5.2" GEOS="3.3.0-CAPI-1.7.0" PROJ="Rel. 4.7.1, 23 September 2009" LIBXML="2.6.26" USE_STATS

(The first GEOS is actually nightly while the second isn't - yet they report the same version)

The issue I have noticed is that the newer version is noticeably (more than 5x) slower on some large queries of the form:

	SELECT a.geom FROM left AS a, right AS b    
		WHERE st_intersects(a.the_geom, b.the_geom);


Have there been changes in this area of the code? Is this expected for nightly builds? Is there anything I can do to help troubleshooting of the issue? All my tables are imported and indexed by the same tool in both instances.

Cheers,
James Sewell?
Developer?
LISAsoft?

Ph:?+61 3 8680 3250?Fax:?+61 3 8680 3299?
Level 9, 601 Bourke St, Melbourne Vic 3000


LISAsoft is part of the A2end Group of Companies
http://www.ardec.com.au
http://www.lisasoft.com
http://www.terrapages.com


-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of strk
Sent: Thursday, 3 February 2011 7:14 PM
To: GEOS Development List
Cc: jts-topo-suite-user@lists.sourceforge.net
Subject: Re: [geos-devel] RE: [Jts-topo-suite-user] JTS Topology error

On Thu, Feb 03, 2011 at 10:25:08AM +1030, James.Sewell@lisasoft.com wrote:
> (Crossposting to GEOS list)
> 
> I see. So the difference between the GeometryNoder with a PrecisionModel and using ST_Snaptogrid from PostGIS on the input geometries is that the GeometryNoder snaps all nodes which are created by the noding process as it works?
> 
> This seems like an elegant solution to deal with the roundoff issues.
> 
> I gather GEOS doesn't expose noding functionality in this way? Is this something that could possibly be added? From PostGIS would a command like ST_Node(geometry, 10E-10) make sense / be plausible? Or would a better solution be to define the precision for each geometry column?

Check the new ST_Snap() function in PostGIS and GEOS svn repository.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel
From James.Sewell at lisasoft.com  Thu Feb 17 22:55:49 2011
From: James.Sewell at lisasoft.com (James.Sewell@lisasoft.com)
Date: Thu Feb 17 22:55:54 2011
Subject: [geos-devel] RE: Nightly build performance
In-Reply-To: <CB506E813C77E9498F043F1F951BB2768E3B98295D@optimus.ms.a2end.com>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827D1@optimus.ms.a2end.com>
	<AANLkTimxWMo97m6qfWQJsUDEsWjjJN7K==3DAgQkMH51@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>
	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>
	<4D48DED1.4090705@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
	<20110203081414.GK69558@keybit.net>
	<CB506E813C77E9498F043F1F951BB2768E3B98295D@optimus.ms.a2end.com>
Message-ID: <CB506E813C77E9498F043F1F951BB2768E3B98295E@optimus.ms.a2end.com>

In retrospect this should actually (obviously) have been a question for the PostGIS list.

Please ignore the line about incorrectly reporting the GEOS version, that was user error I think!

Cheers,
James Sewell?
Developer?
LISAsoft?

Ph:?+61 3 8680 3250?Fax:?+61 3 8680 3299?
Level 9, 601 Bourke St, Melbourne Vic 3000


LISAsoft is part of the A2end Group of Companies
http://www.ardec.com.au
http://www.lisasoft.com
http://www.terrapages.com


-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of James.Sewell@lisasoft.com
Sent: Friday, 18 February 2011 2:23 PM
To: GEOS Development List
Subject: [geos-devel] Nightly build performance

Greetings GEOS Devs,

I have been trying the GEOS and POSTGIS from a nightly build to test ST_Snap. I am still trying it out but have come across another issue.

I am currently running the following:

	POSTGIS="2.0.0SVN" GEOS="3.3.0-CAPI-1.7.0" PROJ="Rel. 4.7.1, 23 September 2009" LIBXML="2.6.26" USE_STATS

And comparing performance to:

	POSTGIS="1.5.2" GEOS="3.3.0-CAPI-1.7.0" PROJ="Rel. 4.7.1, 23 September 2009" LIBXML="2.6.26" USE_STATS

(The first GEOS is actually nightly while the second isn't - yet they report the same version)

The issue I have noticed is that the newer version is noticeably (more than 5x) slower on some large queries of the form:

	SELECT a.geom FROM left AS a, right AS b    
		WHERE st_intersects(a.the_geom, b.the_geom);


Have there been changes in this area of the code? Is this expected for nightly builds? Is there anything I can do to help troubleshooting of the issue? All my tables are imported and indexed by the same tool in both instances.

Cheers,
James Sewell?
Developer?
LISAsoft?

Ph:?+61 3 8680 3250?Fax:?+61 3 8680 3299?
Level 9, 601 Bourke St, Melbourne Vic 3000


LISAsoft is part of the A2end Group of Companies
http://www.ardec.com.au
http://www.lisasoft.com
http://www.terrapages.com


-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of strk
Sent: Thursday, 3 February 2011 7:14 PM
To: GEOS Development List
Cc: jts-topo-suite-user@lists.sourceforge.net
Subject: Re: [geos-devel] RE: [Jts-topo-suite-user] JTS Topology error

On Thu, Feb 03, 2011 at 10:25:08AM +1030, James.Sewell@lisasoft.com wrote:
> (Crossposting to GEOS list)
> 
> I see. So the difference between the GeometryNoder with a PrecisionModel and using ST_Snaptogrid from PostGIS on the input geometries is that the GeometryNoder snaps all nodes which are created by the noding process as it works?
> 
> This seems like an elegant solution to deal with the roundoff issues.
> 
> I gather GEOS doesn't expose noding functionality in this way? Is this something that could possibly be added? From PostGIS would a command like ST_Node(geometry, 10E-10) make sense / be plausible? Or would a better solution be to define the precision for each geometry column?

Check the new ST_Snap() function in PostGIS and GEOS svn repository.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel
From strk at keybit.net  Fri Feb 18 02:23:19 2011
From: strk at keybit.net (Sandro Santilli)
Date: Fri Feb 18 02:23:25 2011
Subject: [geos-devel] Nightly build performance
In-Reply-To: <CB506E813C77E9498F043F1F951BB2768E3B98295D@optimus.ms.a2end.com>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>
	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>
	<4D48DED1.4090705@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
	<20110203081414.GK69558@keybit.net>
	<CB506E813C77E9498F043F1F951BB2768E3B98295D@optimus.ms.a2end.com>
Message-ID: <20110218072319.GK16939@keybit.net>

On Fri, Feb 18, 2011 at 01:52:47PM +1030, James.Sewell@lisasoft.com wrote:

> The issue I have noticed is that the newer version is noticeably (more than 5x) slower on some large queries of the form:
> 
> 	SELECT a.geom FROM left AS a, right AS b    
> 		WHERE st_intersects(a.the_geom, b.the_geom);
> 
> 
> Have there been changes in this area of the code? Is this expected for nightly builds? Is there anything I can do to help troubleshooting of the issue? All my tables are imported and indexed by the same tool in both instances.

If you can, compare again, using _st_intersects (skips the index).
And keep track of GEOS svn id of the source if they are different.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From James.Sewell at lisasoft.com  Sun Feb 20 20:02:31 2011
From: James.Sewell at lisasoft.com (James.Sewell@lisasoft.com)
Date: Sun Feb 20 20:02:35 2011
Subject: [geos-devel] Nightly build performance
In-Reply-To: <20110218072319.GK16939@keybit.net>
References: <CB506E813C77E9498F043F1F951BB2768E3B9827D3@optimus.ms.a2end.com>
	<AANLkTi=-3OztYC7zO4Ht74_RXkCDd8_kyJ6V2C79cRYq@mail.gmail.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827D5@optimus.ms.a2end.com>
	<CB506E813C77E9498F043F1F951BB2768E3B9827DD@optimus.ms.a2end.com>
	<4D48DED1.4090705@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827E4@optimus.ms.a2end.com>
	<4D497DFC.30809@telus.net>
	<CB506E813C77E9498F043F1F951BB2768E3B9827EE@optimus.ms.a2end.com>
	<20110203081414.GK69558@keybit.net>
	<CB506E813C77E9498F043F1F951BB2768E3B98295D@optimus.ms.a2end.com>
	<20110218072319.GK16939@keybit.net>
Message-ID: <CB506E813C77E9498F043F1F951BB2768E3B982981@optimus.ms.a2end.com>

Hey,

6774 was the 2.0 SVN id.

I will test again with no indexes later when my machine is idle.

Cheers,
James Sewell?
Developer?
LISAsoft?

Ph:?+61 3 8680 3250?Fax:?+61 3 8680 3299?
Level 9, 601 Bourke St, Melbourne Vic 3000


LISAsoft is part of the A2end Group of Companies
http://www.ardec.com.au
http://www.lisasoft.com
http://www.terrapages.com


-----Original Message-----
From: geos-devel-bounces@lists.osgeo.org [mailto:geos-devel-bounces@lists.osgeo.org] On Behalf Of Sandro Santilli
Sent: Friday, 18 February 2011 6:23 PM
To: GEOS Development List
Subject: Re: [geos-devel] Nightly build performance

On Fri, Feb 18, 2011 at 01:52:47PM +1030, James.Sewell@lisasoft.com wrote:

> The issue I have noticed is that the newer version is noticeably (more than 5x) slower on some large queries of the form:
> 
> 	SELECT a.geom FROM left AS a, right AS b    
> 		WHERE st_intersects(a.the_geom, b.the_geom);
> 
> 
> Have there been changes in this area of the code? Is this expected for nightly builds? Is there anything I can do to help troubleshooting of the issue? All my tables are imported and indexed by the same tool in both instances.

If you can, compare again, using _st_intersects (skips the index).
And keep track of GEOS svn id of the source if they are different.

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
_______________________________________________
geos-devel mailing list
geos-devel@lists.osgeo.org
http://lists.osgeo.org/mailman/listinfo/geos-devel
From geos-trac at osgeo.org  Wed Feb 23 05:50:37 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Feb 23 05:50:39 2011
Subject: [geos-devel] Re: [GEOS] #368: TopologyException on Union of valid
	geometries.
In-Reply-To: <044.40ee36457c7104eeb6d3721224b8ad19@osgeo.org>
References: <044.40ee36457c7104eeb6d3721224b8ad19@osgeo.org>
Message-ID: <053.56b1ccea0a28465247965d3756263a95@osgeo.org>

#368: TopologyException on Union of valid geometries.
------------------------+---------------------------------------------------
 Reporter:  yabo        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 Also fails with JTS:
 https://sourceforge.net/tracker/?func=detail&aid=3190026&group_id=128875&atid=713120

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/368#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Feb 23 05:55:53 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Feb 23 05:55:55 2011
Subject: [geos-devel] Re: [GEOS] #366: TopologyException on buffer on a
 valid geometry (depth error)
In-Reply-To: <044.929da7ee92bdfe306c47549592ad72f4@osgeo.org>
References: <044.929da7ee92bdfe306c47549592ad72f4@osgeo.org>
Message-ID: <053.997d8200c68da2b033f583a82781726a@osgeo.org>

#366: TopologyException on buffer on a valid geometry (depth error)
------------------------+---------------------------------------------------
 Reporter:  yabo        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:  3.2.0                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 In current development version the exception is cought internally
 triggering a new attempt at buffering with precision reduction, which
 succeeds.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/366#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Feb 23 06:05:24 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Feb 23 06:05:26 2011
Subject: [geos-devel] Re: [GEOS] #366: TopologyException on buffer on a
 valid geometry (depth error)
In-Reply-To: <044.929da7ee92bdfe306c47549592ad72f4@osgeo.org>
References: <044.929da7ee92bdfe306c47549592ad72f4@osgeo.org>
Message-ID: <053.be51cd00b2a98e25944d265b6b592aa0@osgeo.org>

#366: TopologyException on buffer on a valid geometry (depth error)
------------------------+---------------------------------------------------
 Reporter:  yabo        |        Owner:  geos-devel@?              
     Type:  defect      |       Status:  closed                    
 Priority:  major       |    Milestone:                            
Component:  Default     |      Version:  3.2.0                     
 Severity:  Unassigned  |   Resolution:  fixed                     
 Keywords:              |  
------------------------+---------------------------------------------------
Changes (by strk):

  * status:  new => closed
  * resolution:  => fixed


Comment:

 3.3.0 will work.

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/366#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Wed Feb 23 06:14:51 2011
From: geos-trac at osgeo.org (GEOS)
Date: Wed Feb 23 06:14:53 2011
Subject: [geos-devel] Re: [GEOS] #389: BufferOp assertion on make check
In-Reply-To: <049.8222eeaa4499685fecba3f8c2f719af9@osgeo.org>
References: <049.8222eeaa4499685fecba3f8c2f719af9@osgeo.org>
Message-ID: <058.cd8fc5d18b18e45d74d8f04be7a9c9a0@osgeo.org>

#389: BufferOp assertion on make check
------------------------+---------------------------------------------------
 Reporter:  alopezcia   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:                            
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 That testcase isn't very useful in that it doesn't say much.
 Anyway a comment says that the tests are also available as buffer.xml in
 the xmltester test suite.
 Do you get failures in there too ? (make check under tests/xmltester)

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/389#comment:1>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From mtnclimb at telus.net  Thu Feb 24 00:01:08 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Thu Feb 24 00:01:26 2011
Subject: [geos-devel] Re: [GEOS] #368: TopologyException on Union of valid
	geometries.
In-Reply-To: <053.56b1ccea0a28465247965d3756263a95@osgeo.org>
References: <044.40ee36457c7104eeb6d3721224b8ad19@osgeo.org>
	<053.56b1ccea0a28465247965d3756263a95@osgeo.org>
Message-ID: <4D65E614.2030706@telus.net>

I took a quick look at this. It's a pretty typical robustness problem, 
which I guess the various heuristics currently in JTS don't handle well 
enough. Some more work on the snapping code might help to solve this. 
Failing that, a new approach is required.

Martin

On 2/23/2011 2:50 AM, GEOS wrote:
> #368: TopologyException on Union of valid geometries.
> ------------------------+---------------------------------------------------
>   Reporter:  yabo        |       Owner:  geos-devel@?
>       Type:  defect      |      Status:  new
>   Priority:  major       |   Milestone:
> Component:  Default     |     Version:  svn-trunk
>   Severity:  Unassigned  |    Keywords:
> ------------------------+---------------------------------------------------
>
> Comment(by strk):
>
>   Also fails with JTS:
>   https://sourceforge.net/tracker/?func=detail&aid=3190026&group_id=128875&atid=713120
>
From geos-trac at osgeo.org  Fri Feb 25 05:12:21 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Feb 25 05:12:24 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
Message-ID: <058.607b6f9bde411ad7adc4ed56ab77a920@osgeo.org>

#356: multilinestring buffer artifacts
------------------------+---------------------------------------------------
 Reporter:  aperi2007   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 Confirmed on linux (both 32 and 64 bit), with GEOS trunk

 The resulting polygon is invalid:
  Holes are nested[1676339.44153305 4847442.8242508]

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/356#comment:2>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Feb 25 05:16:44 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Feb 25 05:16:46 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
Message-ID: <058.8960035448660d29579859f5c59dfb33@osgeo.org>

#356: multilinestring buffer artifacts
------------------------+---------------------------------------------------
 Reporter:  aperi2007   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 JTS trunk works fine with this one, giving:

 {{{
 POLYGON ((1676334.370908338 4847442.47738721, 1676334.381771572
 4847442.672985536, 1676334.430559768 4847442.86271278, 1676334.515400594
 4847443.039287834, 1676336.265400594 4847445.919287834, 1676336.383019845
 4847446.075914382, 1676336.528914198 4847446.206608688, 1676336.697486246
 4847446.306356514, 1676336.882268526 4847446.371330916, 1676337.07617165
 4847446.399039078, 1676337.2717563 4847446.388417942, 1676337.461518643
 4847446.339875002, 1676337.638178226 4847446.255272662, 1676340.477889498
 4847444.534796128, 1676340.477889507 4847444.534796122, 1676340.708178227
 4847444.395272662, 1676340.865054944 4847444.277767458, 1676340.995997551
 4847444.13191887, 1676341.095975523 4847443.963330074, 1676341.16114793
 4847443.778477878, 1676341.189010992 4847443.584463894, 1676341.178494273
 4847443.388741704, 1676341.130001801 4847443.19883052, 1676341.04539655
 4847443.022026312, 1676339.29539655 4847440.132026312, 1676339.177687757
 4847439.974857962, 1676339.031535752 4847439.843721232, 1676338.862575756
 4847439.743672394, 1676338.6773224 4847439.678569058, 1676338.482918545
 4847439.650921426, 1676338.286859869 4847439.661795518, 1676338.096705855
 4847439.710772058, 1676337.91978832 4847439.795962644, 1676334.84978832
 4847441.665962642, 1676334.693269131 4847441.783769514, 1676334.56272065
 4847441.92983049, 1676334.463152898 4847442.098540236, 1676334.398386959
 4847442.283424222, 1676334.370908338 4847442.47738721),
 (1676338.816753609 4847443.202781668, 1676337.455985112 4847444.027221212,
 1676336.743325995 4847442.854387922, 1676338.10393518 4847442.025612946,
 1676338.816753609 4847443.202781668))
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/356#comment:3>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Feb 25 05:23:58 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Feb 25 05:24:00 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
Message-ID: <058.e6df7f3439305d91c8f121cd430d6b04@osgeo.org>

#356: multilinestring buffer artifacts
------------------------+---------------------------------------------------
 Reporter:  aperi2007   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 I've committed an XML test for this case in r3247
 (thanks Andrea for the small dataset!)

 http://trac.osgeo.org/geos/browser/trunk/tests/xmltester/tests/bug356.xml

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/356#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Feb 25 10:45:09 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Feb 25 10:45:10 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
Message-ID: <058.4f162949637aa5f5c9c7603df15b51b5@osgeo.org>

#356: multilinestring buffer artifacts
------------------------+---------------------------------------------------
 Reporter:  aperi2007   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 Interesting enough, like GEOS also JTS fails buffering this input with the
 original precision.
 Odd, as the input is a very simple rectangle with a side of 3.5 units (a
 linestring) being buffered with a distance of 1 unit.
 Full coordinates are in the order of 1E6 units.

 The exception thrown (by both GEOS and JTS) when attempting the operation
 on the orginal input is:

 {{{
 TopologyException: assigned depths do not match [ (1676339.4415330526,
 4847442.824250799, NaN) ]
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/356#comment:5>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Fri Feb 25 10:51:29 2011
From: geos-trac at osgeo.org (GEOS)
Date: Fri Feb 25 10:51:31 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
Message-ID: <058.d292de9b285bfd36f9891f4209835f9d@osgeo.org>

#356: multilinestring buffer artifacts
------------------------+---------------------------------------------------
 Reporter:  aperi2007   |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:  3.3.0                     
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------

Comment(by strk):

 Also, like with GEOS, JTS has to make 3 precision reduction attempts
 before getting a valid answer:
 {{{
 recomputing with precision scale factor = 1.0E11
 recomputing with precision scale factor = 1.0E10
 recomputing with precision scale factor = 1.0E9
 }}}

 This is with GEOS:
 {{{
 recomputing with precision scale factor = 1e+11
 recomputing with precision scale factor = 1e+10
 recomputing with precision scale factor = 1e+09
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/356#comment:6>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From mtnclimb at telus.net  Sun Feb 27 16:40:41 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Sun Feb 27 16:42:39 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <058.d292de9b285bfd36f9891f4209835f9d@osgeo.org>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
	<058.d292de9b285bfd36f9891f4209835f9d@osgeo.org>
Message-ID: <4D6AC4D9.8000802@telus.net>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: TestBufferFailure.xml
Type: text/xml
Size: 4949 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20110227/4bdda0c7/TestBufferFailure.xml
From strk at keybit.net  Mon Feb 28 04:06:29 2011
From: strk at keybit.net (Sandro Santilli)
Date: Mon Feb 28 04:06:39 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <4D6AC4D9.8000802@telus.net>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
	<058.d292de9b285bfd36f9891f4209835f9d@osgeo.org>
	<4D6AC4D9.8000802@telus.net>
Message-ID: <20110228090629.GO81469@keybit.net>

On Sun, Feb 27, 2011 at 01:40:41PM -0800, Martin Davis wrote:
> The reason that precision reduction is invoked is probably because the 
> generated buffer curve has some very close vertices - which tends to 
> result in noding failures.  So this is operating according to current 
> design (although it might be nice to find a way to reduce the number of 
> very close vertices, e.g. by snapping).

Yeah. Only problem is that the final output in GEOS is just incorrect.
Rather than a polygon with an hole, it's a multipolygon of two 
polygons (one within the other). No, the inner polygon doesn't match
the expected hole either (unfortunately).

> While investigating this issue, I came across another one, which is more 
> severe.  If the output from this buffer operation is itself buffered by 
> 1, the result is incorrect - it contains a hole which should not be 
> present.  I"ve attached a test case. At the moment I don't have any 
> ideas about how to fix this.

Your test succeeds in GEOS (no hole):
 Polygon[ZM] with 1 rings
    ring 0 has 74 points

Maybe is some recent refactoring fixing mine and breaking yours ?

--strk;

  ()   Free GIS & Flash consultant/developer
  /\   http://strk.keybit.net/services.html
From geos-trac at osgeo.org  Mon Feb 28 09:54:57 2011
From: geos-trac at osgeo.org (GEOS)
Date: Mon Feb 28 09:55:00 2011
Subject: [geos-devel] Re: [GEOS] #368: TopologyException on Union of valid
 geometries [JTS fails too] (was: TopologyException on Union of valid
 geometries.)
In-Reply-To: <044.40ee36457c7104eeb6d3721224b8ad19@osgeo.org>
References: <044.40ee36457c7104eeb6d3721224b8ad19@osgeo.org>
Message-ID: <053.16d66100e8512f1b33f60ea132e0db79@osgeo.org>

#368: TopologyException on Union of valid geometries [JTS fails too]
------------------------+---------------------------------------------------
 Reporter:  yabo        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:  svn-trunk                 
 Severity:  Unassigned  |    Keywords:  jtsbug                    
------------------------+---------------------------------------------------
Changes (by strk):

  * keywords:  => jtsbug


-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/368#comment:4>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From geos-trac at osgeo.org  Mon Feb 28 11:05:47 2011
From: geos-trac at osgeo.org (GEOS)
Date: Mon Feb 28 11:05:49 2011
Subject: [geos-devel] [GEOS] #397: Conditional jump or move depends on
 uninitialised value(s)
Message-ID: <044.d7c6bbf951f682d8419ef17b79d282d3@osgeo.org>

#397: Conditional jump or move depends on uninitialised value(s)
------------------------+---------------------------------------------------
 Reporter:  strk        |       Owner:  geos-devel@?              
     Type:  defect      |      Status:  new                       
 Priority:  major       |   Milestone:                            
Component:  Default     |     Version:  3.0.3                     
 Severity:  Unassigned  |    Keywords:                            
------------------------+---------------------------------------------------
 A single test from tests/buffer.xml (case 18) triggers 228 conditional
 jumps based on uninitialized value errors:

 {{{
 ==21472== Conditional jump or move depends on uninitialised value(s)
 ==21472==    at 0x509C078:
 geos::geom::Coordinate::equals2D(geos::geom::Coordinate const&) const
 (Coordinate.inl:86)
 ==21472==    by 0x509C474: geos::geom::operator==(geos::geom::Coordinate
 const&, geos::geom::Coordinate const&) (Coordinate.inl:166)
 ==21472==    by 0x50B6CD0:
 geos::algorithm::LineIntersector::computeEdgeDistance(geos::geom::Coordinate
 const&, geos::geom::Coordinate const&, geos::geom::Coordinate const&)
 (LineIntersector.cpp:64)
 ==21472==    by 0x50B76B7:
 geos::algorithm::LineIntersector::getEdgeDistance(int, int) const
 (LineIntersector.cpp:187)
 ==21472==    by 0x510CC5C:
 geos::geomgraph::Edge::addIntersection(geos::algorithm::LineIntersector*,
 int, int, int) (Edge.cpp:165)
 ==21472==    by 0x510CBE6:
 geos::geomgraph::Edge::addIntersections(geos::algorithm::LineIntersector*,
 int, int) (Edge.cpp:149)
 ==21472==    by 0x5138A18:
 geos::geomgraph::index::SegmentIntersector::addIntersections(geos::geomgraph::Edge*,
 int, geos::geomgraph::Edge*, int) (SegmentIntersector.cpp:175)
 ==21472==    by 0x5137E73:
 geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain(int,
 int, geos::geomgraph::index::MonotoneChainEdge const&, int, int,
 geos::geomgraph::index::SegmentIntersector&) (MonotoneChainEdge.cpp:129)
 ==21472==    by 0x5138022:
 geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain(int,
 int, geos::geomgraph::index::MonotoneChainEdge const&, int, int,
 geos::geomgraph::index::SegmentIntersector&) (MonotoneChainEdge.cpp:157)
 ==21472==    by 0x5138022:
 geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain(int,
 int, geos::geomgraph::index::MonotoneChainEdge const&, int, int,
 geos::geomgraph::index::SegmentIntersector&) (MonotoneChainEdge.cpp:157)
 ==21472==    by 0x5137E01:
 geos::geomgraph::index::MonotoneChainEdge::computeIntersectsForChain(int,
 geos::geomgraph::index::MonotoneChainEdge const&, int,
 geos::geomgraph::index::SegmentIntersector&) (MonotoneChainEdge.cpp:119)
 ==21472==    by 0x513A345:
 geos::geomgraph::index::MonotoneChain::computeIntersections(geos::geomgraph::index::MonotoneChain*,
 geos::geomgraph::index::SegmentIntersector*) (MonotoneChain.h:58)
 }}}

-- 
Ticket URL: <http://trac.osgeo.org/geos/ticket/397>
GEOS <http://geos.refractions.net/>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).
From mtnclimb at telus.net  Mon Feb 28 22:46:31 2011
From: mtnclimb at telus.net (Martin Davis)
Date: Mon Feb 28 22:48:34 2011
Subject: [geos-devel] Re: [GEOS] #356: multilinestring buffer artifacts
In-Reply-To: <20110228090629.GO81469@keybit.net>
References: <049.df4e06055480a5bb59caf458d37a4314@osgeo.org>
	<058.d292de9b285bfd36f9891f4209835f9d@osgeo.org>
	<4D6AC4D9.8000802@telus.net> <20110228090629.GO81469@keybit.net>
Message-ID: <4D6C6C17.9000906@telus.net>

Good idea about testing previous versions of JTS.  Unfortunately, this 
fails in both 1.10 and 1.8, so the problem seems to be a long-standing 
one.  Very strange that it works in GEOS, though - but good news for you!

When I have some time I'll work on tracking this down...


On 2/28/2011 1:06 AM, Sandro Santilli wrote:
>
>> While investigating this issue, I came across another one, which is more
>> severe.  If the output from this buffer operation is itself buffered by
>> 1, the result is incorrect - it contains a hole which should not be
>> present.  I"ve attached a test case. At the moment I don't have any
>> ideas about how to fix this.
> Your test succeeds in GEOS (no hole):
>   Polygon[ZM] with 1 rings
>      ring 0 has 74 points
>
> Maybe is some recent refactoring fixing mine and breaking yours ?
>
>
>
>
