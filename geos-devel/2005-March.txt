From mbdavis at VividSolutions.com  Wed Mar  9 13:53:34 2005
From: mbdavis at VividSolutions.com (Martin Davis)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] RE: [jts-devel] The future of JTS and GEOS
Message-ID: <5A94289A9268514C8D6C0F1FF44BA0272258B8@venus.VividSolutions.com>

> The point I want to make, is that I think GEOS is worthwhile 
> because of it it's relative ease of porting using a variety 
> of compilers.  

I agree...  While GCJ is great where it fits, there's still a clear use
for a cross-platform standalone C++ library.  

Martin Davis, Senior Technical Architect
Vivid Solutions Inc.      www.vividsolutions.com
Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046


> -----Original Message-----
> From: Frank Warmerdam [mailto:fwarmerdam@gmail.com] 
> Sent: March 9, 2005 9:20 AM
> To: JTS Topology Suite Development
> Subject: Re: [jts-devel] The future of JTS and GEOS
> 
> 
> On Wed, 9 Mar 2005 09:07:20 -0800, Martin Davis 
> <mbdavis@vividsolutions.com> wrote:
> > As Dave B points out, JTS is continuing to evolve and GEOS 
> I suspect 
> > is falling behind.  It's going to take some dedicated 
> effort to keep 
> > them both in synch.  Obviously GEOS is viable on its own at this 
> > point; whether it continues to track JTS will really be decided by 
> > whoever has funding and/or time to contribute.
> 
> Martin, 
> 
> As someone not contributing in any meaningful way, I hesitate 
> to dump in my opinion, but I am personally planning to keep using 
> GEOS rather than a .obj version of JTS, for the forseeable 
> future. Mostly this is because I am generally afraid of the 
> extra build and runtime complexity of the gcj solution (even 
> more afraid when I 
> read yesterday that the very latest point rev of gcj is required!). 
> 
> The point I want to make, is that I think GEOS is worthwhile 
> because of it it's relative ease of porting using a variety 
> of compilers.  I can live with GEOS falling behind JTS in 
> terms of features, as long as 
> the core operations and predicates work dependably and with at
> least reasonable speed.   
> 
> How did this discussion end up being on the JTS list instead 
> of the GEOS list? 
> 
> > Or perhaps we should all put our effort into encouraging 
> the GCJ folks 
> > to support more platforms... 8^)
> 
> Perhaps, but it seems unlikely we will be in a position to 
> help them do this and no one likes folks just piping up 
> demands stuff when they can help.  (Hey ... I resemble that remark!)
> 
> Best regards,
> -- 
> ---------------------------------------+----------------------
----------
> ---------------------------------------+------
> I set the clouds in motion - turn up   | Frank Warmerdam, 
> warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial 
> Programmer for Rent
> _______________________________________________
> jts-devel mailing list
> jts-devel@lists.jump-project.org 
> http://lists.refractions.net/mailman/listinfo/jts-devel
> 

From mcoletti at gmail.com  Wed Mar  9 21:41:23 2005
From: mcoletti at gmail.com (Mark Coletti)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] Making exceptions inherit from std::exception
Message-ID: <120095080503091841792448d5@mail.gmail.com>

It's a good idea to have all exceptions inherit from std::exception. 
std::exception classes provide a consistent exception handling
interface.  For example, I generally have the following in my code:

try
{
   foo();
}
catch( std::exception & e )
{
   const char * msg = e.what(); // debugger probe point
   throw e;  // rethrow so hopefully better handled upstream
}


That way I can generally quickly figure out what has happened in the
debugger.  Otherwise I'm left with this:

catch(...)
{
  // um?
}


So then it's back to unwinding the stack from the debugger.  Not hard,
just tedious.

I've made the changes to my local GEOS CVS; I've attached the diffs to
possibly be patched into the main branch.

Cheers,

Mark
-- 
I'm taking reality in small doses to build immunity.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: diffs
Type: application/octet-stream
Size: 4902 bytes
Desc: not available
Url : http://lists.osgeo.org/pipermail/geos-devel/attachments/20050309/75aeee60/diffs.obj
From strk at refractions.net  Thu Mar 10 03:50:59 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] Making exceptions inherit from std::exception
In-Reply-To: <120095080503091841792448d5@mail.gmail.com>
References: <120095080503091841792448d5@mail.gmail.com>
Message-ID: <20050310085059.GB63477@freek.keybit.net>

Mark, thanks for the contribution. I've been thinking about this
since the beginning, but changing it would mean another big break
of the API :(.

We are probably going to break it anyway before next release so 
I'd apply it nonetheless. Note though, that the patch lacks modification
of actual throws, as all GEOSexceptions (the Base class) are thrown by
pointer, not by reference, as the std::exception are.

--strk;

On Wed, Mar 09, 2005 at 09:41:23PM -0500, Mark Coletti wrote:
> It's a good idea to have all exceptions inherit from std::exception. 
> std::exception classes provide a consistent exception handling
> interface.  For example, I generally have the following in my code:
> 
> try
> {
>    foo();
> }
> catch( std::exception & e )
> {
>    const char * msg = e.what(); // debugger probe point
>    throw e;  // rethrow so hopefully better handled upstream
> }
> 
> 
> That way I can generally quickly figure out what has happened in the
> debugger.  Otherwise I'm left with this:
> 
> catch(...)
> {
>   // um?
> }
> 
> 
> So then it's back to unwinding the stack from the debugger.  Not hard,
> just tedious.
> 
> I've made the changes to my local GEOS CVS; I've attached the diffs to
> possibly be patched into the main branch.
> 
> Cheers,
> 
> Mark
> -- 
> I'm taking reality in small doses to build immunity.


> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel


From strk at refractions.net  Thu Mar 10 03:57:33 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] RE: [jts-devel] The future of JTS and GEOS
In-Reply-To: <5A94289A9268514C8D6C0F1FF44BA0272258B8@venus.VividSolutions.com>
References: <5A94289A9268514C8D6C0F1FF44BA0272258B8@venus.VividSolutions.com>
Message-ID: <20050310085733.GC63477@freek.keybit.net>

On Wed, Mar 09, 2005 at 10:53:34AM -0800, Martin Davis wrote:
> > The point I want to make, is that I think GEOS is worthwhile 
> > because of it it's relative ease of porting using a variety 
> > of compilers.  
> 
> I agree...  While GCJ is great where it fits, there's still a clear use
> for a cross-platform standalone C++ library.  

Good, then let's bring GEOS to next level.
Since GEOS API is so unstable I suggest we make a wrapper which can be
used by both C++ and C code, using objects handles, simplified memory
management and no exceptions (somthing similar to current geos_wrapper from
postgis).  The wrapper should survive big internal changes allowing
a painless transition to high performance code.

The facilities offered by the C++ language would then be used by inner
code alone, or by whoever decide to include "inner" headers giving up
stability of interface.

What do people think about this ?

--strk;

> 
> Martin Davis, Senior Technical Architect
> Vivid Solutions Inc.      www.vividsolutions.com
> Suite #1A-2328 Government Street Victoria, B.C. V8T 5G5
> Phone: (250) 385 6040 - Local 308 Fax: (250) 385 6046
> 
> 
> > -----Original Message-----
> > From: Frank Warmerdam [mailto:fwarmerdam@gmail.com] 
> > Sent: March 9, 2005 9:20 AM
> > To: JTS Topology Suite Development
> > Subject: Re: [jts-devel] The future of JTS and GEOS
> > 
> > 
> > On Wed, 9 Mar 2005 09:07:20 -0800, Martin Davis 
> > <mbdavis@vividsolutions.com> wrote:
> > > As Dave B points out, JTS is continuing to evolve and GEOS 
> > I suspect 
> > > is falling behind.  It's going to take some dedicated 
> > effort to keep 
> > > them both in synch.  Obviously GEOS is viable on its own at this 
> > > point; whether it continues to track JTS will really be decided by 
> > > whoever has funding and/or time to contribute.
> > 
> > Martin, 
> > 
> > As someone not contributing in any meaningful way, I hesitate 
> > to dump in my opinion, but I am personally planning to keep using 
> > GEOS rather than a .obj version of JTS, for the forseeable 
> > future. Mostly this is because I am generally afraid of the 
> > extra build and runtime complexity of the gcj solution (even 
> > more afraid when I 
> > read yesterday that the very latest point rev of gcj is required!). 
> > 
> > The point I want to make, is that I think GEOS is worthwhile 
> > because of it it's relative ease of porting using a variety 
> > of compilers.  I can live with GEOS falling behind JTS in 
> > terms of features, as long as 
> > the core operations and predicates work dependably and with at
> > least reasonable speed.   
> > 
> > How did this discussion end up being on the JTS list instead 
> > of the GEOS list? 
> > 
> > > Or perhaps we should all put our effort into encouraging 
> > the GCJ folks 
> > > to support more platforms... 8^)
> > 
> > Perhaps, but it seems unlikely we will be in a position to 
> > help them do this and no one likes folks just piping up 
> > demands stuff when they can help.  (Hey ... I resemble that remark!)
> > 
> > Best regards,
> > -- 
> > ---------------------------------------+----------------------
> ----------
> > ---------------------------------------+------
> > I set the clouds in motion - turn up   | Frank Warmerdam, 
> > warmerdam@pobox.com
> > light and sound - activate the windows | http://pobox.com/~warmerdam
> > and watch the world go round - Rush    | Geospatial 
> > Programmer for Rent
> > _______________________________________________
> > jts-devel mailing list
> > jts-devel@lists.jump-project.org 
> > http://lists.refractions.net/mailman/listinfo/jts-devel
> > 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From fwarmerdam at gmail.com  Thu Mar 10 09:55:01 2005
From: fwarmerdam at gmail.com (Frank Warmerdam)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] RE: [jts-devel] The future of JTS and GEOS
In-Reply-To: <20050310085733.GC63477@freek.keybit.net>
References: <5A94289A9268514C8D6C0F1FF44BA0272258B8@venus.VividSolutions.com>
	<20050310085733.GC63477@freek.keybit.net>
Message-ID: <931f8ea905031006553c901026@mail.gmail.com>

On Thu, 10 Mar 2005 09:57:33 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> The facilities offered by the C++ language would then be used by inner
> code alone, or by whoever decide to include "inner" headers giving up
> stability of interface.

Strk,

I think an opaque and simplified C interface would be helpful,
potentially allowing a variety of back end implementations.  
However, I am not sure that this is strictly required nor am I 
convinced it should be used as permission to alter the C++
interfaces willy-nilly.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Programmer for Rent

From strk at refractions.net  Thu Mar 10 12:00:49 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] RE: [jts-devel] The future of JTS and GEOS
In-Reply-To: <931f8ea905031006553c901026@mail.gmail.com>
References: <5A94289A9268514C8D6C0F1FF44BA0272258B8@venus.VividSolutions.com>
	<20050310085733.GC63477@freek.keybit.net>
	<931f8ea905031006553c901026@mail.gmail.com>
Message-ID: <20050310170049.GD64873@freek.keybit.net>

On Thu, Mar 10, 2005 at 09:55:01AM -0500, Frank Warmerdam wrote:
> On Thu, 10 Mar 2005 09:57:33 +0100, strk@refractions.net
> <strk@refractions.net> wrote:
> > The facilities offered by the C++ language would then be used by inner
> > code alone, or by whoever decide to include "inner" headers giving up
> > stability of interface.
> 
> Strk,
> 
> I think an opaque and simplified C interface would be helpful,
> potentially allowing a variety of back end implementations.  
> However, I am not sure that this is strictly required nor am I 
> convinced it should be used as permission to alter the C++
> interfaces willy-nilly.
> 
> Best regards,

Of course that was not an attempt to deliberately mess with
the C++ interfaces. But it seems pretty hard to me keeping them
as they are if we want to speed things up (see the concrete
CoordinateSequence proposal on jts-devel).

--strk;


> -- 
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam@pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Programmer for Rent
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From mcoletti at gmail.com  Thu Mar 10 16:22:34 2005
From: mcoletti at gmail.com (Mark Coletti)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] Making exceptions inherit from std::exception
In-Reply-To: <20050310085059.GB63477@freek.keybit.net>
References: <120095080503091841792448d5@mail.gmail.com>
	<20050310085059.GB63477@freek.keybit.net>
Message-ID: <12009508050310132213f93dc1@mail.gmail.com>

On Thu, 10 Mar 2005 09:50:59 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> Mark, thanks for the contribution. I've been thinking about this
> since the beginning, but changing it would mean another big break
> of the API :(.

Not really.  I only had to add the throw() qualifiers throughout the
Exception hierarchy; I already did that work for you.  You can use a
patch utility to apply my changes.

> We are probably going to break it anyway before next release so
> I'd apply it nonetheless. Note though, that the patch lacks modification
> of actual throws, as all GEOSexceptions (the Base class) are thrown by
> pointer, not by reference, as the std::exception are.

Is there a reason to throw exceptions in this way?  Didn't Scott
Meyers have something to say about that in _Effective C++_?  (Sorry,
don't have my copy handy here at work.)

Cheers!

Mark
-- 
I'm taking reality in small doses to build immunity.

From strk at refractions.net  Fri Mar 11 02:04:16 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] Making exceptions inherit from std::exception
In-Reply-To: <12009508050310132213f93dc1@mail.gmail.com>
References: <120095080503091841792448d5@mail.gmail.com>
	<20050310085059.GB63477@freek.keybit.net>
	<12009508050310132213f93dc1@mail.gmail.com>
Message-ID: <20050311070416.GC68678@freek.keybit.net>

On Thu, Mar 10, 2005 at 04:22:34PM -0500, Mark Coletti wrote:
> On Thu, 10 Mar 2005 09:50:59 +0100, strk@refractions.net
> <strk@refractions.net> wrote:
> > Mark, thanks for the contribution. I've been thinking about this
> > since the beginning, but changing it would mean another big break
> > of the API :(.
> 
> Not really.  I only had to add the throw() qualifiers throughout the
> Exception hierarchy; I already did that work for you.  You can use a
> patch utility to apply my changes.

Sorry, I only read your mail, not your patch. Now I see...

> > We are probably going to break it anyway before next release so
> > I'd apply it nonetheless. Note though, that the patch lacks modification
> > of actual throws, as all GEOSexceptions (the Base class) are thrown by
> > pointer, not by reference, as the std::exception are.
> 
> Is there a reason to throw exceptions in this way?  Didn't Scott
> Meyers have something to say about that in _Effective C++_?  (Sorry,
> don't have my copy handy here at work.)

I don't know who Scott Meyers is, anyway I understand myself that 
throwing by pointer has been a *wrong* decision. I didn't take it,
and taking it now would be problematic for current users.

--strk;

> 
> Cheers!
> 
> Mark
> -- 
> I'm taking reality in small doses to build immunity.
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From mcoletti at gmail.com  Fri Mar 11 13:25:14 2005
From: mcoletti at gmail.com (Mark Coletti)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] Making exceptions inherit from std::exception
In-Reply-To: <20050311070416.GC68678@freek.keybit.net>
References: <120095080503091841792448d5@mail.gmail.com>
	<20050310085059.GB63477@freek.keybit.net>
	<12009508050310132213f93dc1@mail.gmail.com>
	<20050311070416.GC68678@freek.keybit.net>
Message-ID: <1200950805031110253580cbb8@mail.gmail.com>

On Fri, 11 Mar 2005 08:04:16 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> On Thu, Mar 10, 2005 at 04:22:34PM -0500, Mark Coletti wrote:
[...]
> Sorry, I only read your mail, not your patch. Now I see...

No worries.  Doing what I can to make things easier!  :)
 
> > > [...] all GEOSexceptions (the Base class) are thrown by
> > > pointer, not by reference, as the std::exception are.

> > Is there a reason to throw exceptions in this way?  Didn't Scott
> > Meyers have something to say about that in _Effective C++_?  (Sorry,
> > don't have my copy handy here at work.)
 
> I don't know who Scott Meyers is, anyway I understand myself that
> throwing by pointer has been a *wrong* decision. I didn't take it,
> and taking it now would be problematic for current users.

OOo, Scott Meyers' "Effective" works are a must read for all C++
programmers.  Here's a link to his site that lists his books:

http://www.aristeia.com/books_frames.html

Actually, it looks like he's consolidated _Effective C++_ and _More
Effective C++_ into a single CD, and included some additional
material.  (_Effective STL_ isn't included; it's a good book, too, so
I recommend it as well.)  Link here:

http://www.awprofessional.com/title/0201310155

Essentially these books are good enough to warrant regular re-reading
-- in fact, I'm long overdue for skimming back over these books.  (I'm
going to order the CD version now so that I can more efficiently
review these books.)

Here's a hint: when reading these books be sure to skim the index for
some humorous surprises Scott embedded there.

Cheers!

Mark
-- 
I'm taking reality in small doses to build immunity.

From artem at pavlenko.uklinux.net  Fri Mar 11 14:48:06 2005
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] re:GEOS
Message-ID: <4231F5F6.4060800@pavlenko.uklinux.net>

Dear List,

Firstly, thanks for all your efforts to provide an opensource 
implementation of spatial algorithms.
I am the developer of  http://mapnik.berlios.de  project and am at the 
moment thinking about having a go at implementing OGCs Filter/SLD (or 
subset of it) in C++ . So I'm very into GEOS becoming more robust, 
standard and easier to integrate ... (I guess that is the point of the 
project).

I hope you don't mind me butting in; I'm just a potential user and I 
don't claim any great authority in C++. My aim is simply to start using 
GEOS ASAP. On this basis, I have a couple of comments/ suggestions.

I've noticed that there are some changes in CVS and I'm glad to see the 
following:

LineIntersector::LineIntersector()
{
    precisionModel=NULL;
    Coordinate *c=new Coordinate();
    intPt[0].setCoordinate(*c);
    delete c;
    c=new Coordinate();
    intPt[1].setCoordinate(*c);
    delete c;
    // alias the intersection points for ease of reference
    pa.setCoordinate(intPt[0]);
    pb.setCoordinate(intPt[1]);
    result=0;
}

becoming :
 
LineIntersector::LineIntersector(): pa(intPt[0]), pb(intPt[1])
{
    precisionModel=NULL;
    // alias the intersection points for ease of reference
    //pa=intPt[0];
    //pb=intPt[1];
    result=0;
}
   
But to me, this is still a wrong use of C++. From what I can see, this 
is one example of many, maybe as a result of translating Java into C++? 
I would be honoured to suggest some changes/ideas, if anybody agrees 
with me:)

I also have some questions about future directions. As I see it, there 
can be lots to gain from introducing templates, because:
1. you're using them already as part of STL
2. they might lead to better performance
3. you'll able to abstract things like memory allocation and precision 
models, allowing clients to configure the library the way they like and 
concentrate on actual algorithms
4. templates are part C++ ISO!

And also there is boost.org and you will be dealing with smart pointers 
at some point, so why not now?
I'm also working with couple datastructures that might be beneficial to 
GEOS.

Anyway, all this is meant to be constructive, and I'm happy to discuss 
anything or for anybody to put me right if I'm missing something!

Cheers!
Artem







From mcoletti at gmail.com  Fri Mar 11 15:34:15 2005
From: mcoletti at gmail.com (Mark Coletti)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] re:GEOS
In-Reply-To: <4231F5F6.4060800@pavlenko.uklinux.net>
References: <4231F5F6.4060800@pavlenko.uklinux.net>
Message-ID: <12009508050311123473f0bd06@mail.gmail.com>

On Fri, 11 Mar 2005 19:48:06 +0000, Artem Pavlenko
<artem@pavlenko.uklinux.net> wrote:
> I've noticed that there are some changes in CVS and I'm glad to see the
> following:
> 
> LineIntersector::LineIntersector()
> {
>     precisionModel=NULL;
>     Coordinate *c=new Coordinate();
>     intPt[0].setCoordinate(*c);
>     delete c;
>     c=new Coordinate();
>     intPt[1].setCoordinate(*c);
>     delete c;
>     // alias the intersection points for ease of reference
>     pa.setCoordinate(intPt[0]);
>     pb.setCoordinate(intPt[1]);
>     result=0;
> }
> 
> becoming :
> 
> LineIntersector::LineIntersector(): pa(intPt[0]), pb(intPt[1])
> {
>     precisionModel=NULL;
>     // alias the intersection points for ease of reference
>     //pa=intPt[0];
>     //pb=intPt[1];
>     result=0;
> }
 
> But to me, this is still a wrong use of C++. From what I can see, this
> is one example of many, maybe as a result of translating Java into C++?

I'm not that familiar with Java, so I'm curious to know of the
Java-isms you see.

And, yes, the changes that occurred in CVS are an improvement.  Let me
guess what you suggest should happen:


LineIntersector::LineIntersector()
 : precisionModel(0),
   result(0),
   pa(intPt[0]), pb(intPt[1]),
{
	// alias the intersection points for ease of reference
	//pa=intPt[0];
	//pb=intPt[1];
}

That is, as Meyers suggests in _Effective C++_, "Prefer initialization
to assignment in constructors."  He also counsels against using C's
NEW macro. (For that matter, he strongly urges use of consts over
macros in C++.)

I'm concerned about the members pa and pb since they appear to be for
syntactic sugar.  Are they really necessary?  And what's up with the
data members in the protected section?  Doesn't that break
encapsulation?

Also, it's generally good practice to have one class per header
instead of consolidating them into the same lexical space.  Doing so
will likely trigger unnecessary extra recompiling.  "geosAlgorithm.h"
has 26 class declarations -- changing the interface for one will cause
recompilation for ALL external classes dependent on ANY of the classes
found in that header file.

> I also have some questions about future directions. As I see it, there
> can be lots to gain from introducing templates, because:

> 1. you're using them already as part of STL

Yes!

> 2. they might lead to better performance

Yes!

> 3. you'll able to abstract things like memory allocation and precision
> models, allowing clients to configure the library the way they like and
> concentrate on actual algorithms

Yes!

> 4. templates are part C++ ISO!

Yes!  Have been since, what, _1999_?

> And also there is boost.org and you will be dealing with smart pointers
> at some point, so why not now?

Yesyesyesyes!

Boost also has a LOT of other goodies besides smart pointers, though
those are the most useful classes.  I've noticed that a lot of linux
distros now include Boost. (E.g., been with SuSE 9+.)

Check out the list at http://www.boost.org/libs/libraries.htm and drool.

Note, too, that some of the Boost developers are (were?) on the ISO
C++ committee.

Cheers!

Mark
-- 
I'm taking reality in small doses to build immunity.

From strk at refractions.net  Fri Mar 11 15:37:15 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] re:GEOS
In-Reply-To: <4231F5F6.4060800@pavlenko.uklinux.net>
References: <4231F5F6.4060800@pavlenko.uklinux.net>
Message-ID: <20050311203715.GA78817@freek.keybit.net>

Dear Artem,
Thank you for your interest, GEOS needs some storming at the moment. 
About boost, I'd prefer to keep things simple and requirements low.
Proposal for template application are welcome. I've been thinking
about them as well, but I'm not sure how, when and if we can keep
outlining the JTS counterpart with them.

--strk;

On Fri, Mar 11, 2005 at 07:48:06PM +0000, Artem Pavlenko wrote:
> Dear List,
> 
> Firstly, thanks for all your efforts to provide an opensource 
> implementation of spatial algorithms.
> I am the developer of  http://mapnik.berlios.de  project and am at the 
> moment thinking about having a go at implementing OGCs Filter/SLD (or 
> subset of it) in C++ . So I'm very into GEOS becoming more robust, 
> standard and easier to integrate ... (I guess that is the point of the 
> project).
> 
> I hope you don't mind me butting in; I'm just a potential user and I 
> don't claim any great authority in C++. My aim is simply to start using 
> GEOS ASAP. On this basis, I have a couple of comments/ suggestions.
> 
> I've noticed that there are some changes in CVS and I'm glad to see the 
> following:
> 
> LineIntersector::LineIntersector()
> {
>    precisionModel=NULL;
>    Coordinate *c=new Coordinate();
>    intPt[0].setCoordinate(*c);
>    delete c;
>    c=new Coordinate();
>    intPt[1].setCoordinate(*c);
>    delete c;
>    // alias the intersection points for ease of reference
>    pa.setCoordinate(intPt[0]);
>    pb.setCoordinate(intPt[1]);
>    result=0;
> }
> 
> becoming :
> 
> LineIntersector::LineIntersector(): pa(intPt[0]), pb(intPt[1])
> {
>    precisionModel=NULL;
>    // alias the intersection points for ease of reference
>    //pa=intPt[0];
>    //pb=intPt[1];
>    result=0;
> }
>   
> But to me, this is still a wrong use of C++. From what I can see, this 
> is one example of many, maybe as a result of translating Java into C++? 
> I would be honoured to suggest some changes/ideas, if anybody agrees 
> with me:)
> 
> I also have some questions about future directions. As I see it, there 
> can be lots to gain from introducing templates, because:
> 1. you're using them already as part of STL
> 2. they might lead to better performance
> 3. you'll able to abstract things like memory allocation and precision 
> models, allowing clients to configure the library the way they like and 
> concentrate on actual algorithms
> 4. templates are part C++ ISO!
> 
> And also there is boost.org and you will be dealing with smart pointers 
> at some point, so why not now?
> I'm also working with couple datastructures that might be beneficial to 
> GEOS.
> 
> Anyway, all this is meant to be constructive, and I'm happy to discuss 
> anything or for anybody to put me right if I'm missing something!
> 
> Cheers!
> Artem
> 
> 
> 
> 
> 
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From niki.spahiev at gmail.com  Sat Mar 12 05:24:27 2005
From: niki.spahiev at gmail.com (Niki Spahiev)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] Making exceptions inherit from std::exception
In-Reply-To: <20050311070416.GC68678@freek.keybit.net>
References: <120095080503091841792448d5@mail.gmail.com>
	<20050310085059.GB63477@freek.keybit.net>
	<12009508050310132213f93dc1@mail.gmail.com>
	<20050311070416.GC68678@freek.keybit.net>
Message-ID: <67c22932050312022466edb14f@mail.gmail.com>

On Fri, 11 Mar 2005 08:04:16 +0100, strk@refractions.net
<strk@refractions.net> wrote:
> > Is there a reason to throw exceptions in this way?  Didn't Scott
> > Meyers have something to say about that in _Effective C++_?  (Sorry,
> > don't have my copy handy here at work.)
> 
> I don't know who Scott Meyers is, anyway I understand myself that
> throwing by pointer has been a *wrong* decision. I didn't take it,
> and taking it now would be problematic for current users.

But not fixing it will be bad for all current and future users.
Please don't leave fixes for later.

Niki Spahiev

From artem at pavlenko.uklinux.net  Sat Mar 12 09:39:55 2005
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] re:GEOS
In-Reply-To: <20050311203715.GA78817@freek.keybit.net>
References: <4231F5F6.4060800@pavlenko.uklinux.net>
	<20050311203715.GA78817@freek.keybit.net>
Message-ID: <4232FF3B.3060308@pavlenko.uklinux.net>

Hi strk,

Thanks for your reply.

>Thank you for your interest, GEOS needs some storming at the moment. 
>About boost, I'd prefer to keep things simple and requirements low.
>  
>
OK, here is some storming:-)
I suggest the following:

1. DONT do any optimization before datastructures, memory allocation etc 
are sorted!!!
It might just obfuscate the algorithms and not lead to any performance 
gains.

But instead:
2. Go through all the source and make sure that copying semantics are 
implemented as they should be,
e.g something in Java:

Geometry(type1 a,type2 b) {
    a_=a;
    b_=b;  
}

doesn't translates into:

Geometry(const type1& a,const type2& b) {
    a_=a;
    b_=b;  
}

In C++ it is wrong and inefficient.

3. Where is operator=(const Object&) ?
Well, the compiler would generate one for you, but it's not a good idea 
to rely on it.

4. Don't implement copy constructor in terms of assigment operator 
(especially using a compiler generated one) e.g:
 
Object (const Object& other)
{
    a_=other.a_;  
    b_=other.b_;
}  

is wrong.
I bet most of the performance bottleneck will be solved by just applying 
the above.

Re:boost
If you don't want GEOS to have extra dependencies, that's fine.
Why don't you use 
http://svn.berlios.de/viewcvs/mapnik/trunk/src/ptr.hh?rev=17&view=markup 
for your smart pointer needs? I does work for me. Or find something 
else, there's plenty of other stuff around.
 

>Proposal for template application are welcome. 
>
Well, one obvious thing would be to have PrecisionModel as a template 
parameter:

template<typename PrecisionModel>
struct geometry
{
///  
};
typedef geometry<MyPrecisionModel> MyGeometry;

I can come up with something more concrete if you like, but I need to 
have a look at the implementation details.
Do you agree with the above?

Cheers!
Artem






From artem at pavlenko.uklinux.net  Sat Mar 12 10:05:39 2005
From: artem at pavlenko.uklinux.net (Artem Pavlenko)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] re:GEOS
In-Reply-To: <12009508050311123473f0bd06@mail.gmail.com>
References: <4231F5F6.4060800@pavlenko.uklinux.net>
	<12009508050311123473f0bd06@mail.gmail.com>
Message-ID: <42330543.60405@pavlenko.uklinux.net>

Hi Mark

>
>I'm not that familiar with Java, so I'm curious to know of the
>Java-isms you see.
>  
>
It is "Prefer initialization to assignment in constructors":-).

>And, yes, the changes that occurred in CVS are an improvement.  Let me
>guess what you suggest should happen:
>
>
>LineIntersector::LineIntersector()
> : precisionModel(0),
>   result(0),
>   pa(intPt[0]), pb(intPt[1]),
>{
>	// alias the intersection points for ease of reference
>	//pa=intPt[0];
>	//pb=intPt[1];
>}
>  
>
It is better, but I didn't see intPt being initialized :-(. And I'm very 
uneasy about pa and pb being a non-const reference.

>That is, as Meyers suggests in _Effective C++_, 
>
Those are very good books if a little outdated.  Try "C++ In-Depth 
series" and "C++ Templates".

>"Prefer initialization
>to assignment in constructors."  He also counsels against using C's
>NEW macro. (For that matter, he strongly urges use of consts over
>macros in C++.)
>
>  
>
Yes!

>I'm concerned about the members pa and pb since they appear to be for
>syntactic sugar.  Are they really necessary?  And what's up with the
>data members in the protected section?  Doesn't that break
>encapsulation?
>  
>
Yes!

>Also, it's generally good practice to have one class per header
>instead of consolidating them into the same lexical space.  Doing so
>will likely trigger unnecessary extra recompiling.  "geosAlgorithm.h"
>has 26 class declarations -- changing the interface for one will cause
>recompilation for ALL external classes dependent on ANY of the classes
>found in that header file.
>
>  
>
Yes! Yes! Yes!


Cheers!
Artem



From bh at intevation.de  Mon Mar 14 14:17:09 2005
From: bh at intevation.de (Bernhard Herzog)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] patch to make geos compile with gcc 2.95
Message-ID: <s9zoedm3umi.fsf@salmakis.intevation.de>



I've briefly tested geos a bit with postgis.  I needed to make two
changes to geos-2.1.1.tar.bz2 to get it to compile on my system which
uses gcc 2.95.4.  One was the stdio include for sprintf which has
already been reported.  

The other is that at least one of LineStringAdder's methods tries to
access a private member of Polygonizer.  LineStringAdder is a nested
class inside of Polygonizer but that doesn't automatically give it
access to Polygonizer's private members.  The patch below makes
LineStringAdder a friend of Polygonizer to fix this.  Newer versions of
gcc apparently allow this kind of access, but gcc 2.95 is correct in
rejecting it, AFAIK.  Stroustrup 3rd ed. says:

   C.11.3  Access to Member Class

   The members of a member class have no special access to members of an
   enclosing class.



*** source/headers/geos/opPolygonize.h.~1~	Tue Dec 14 11:35:44 2004
--- source/headers/geos/opPolygonize.h	Fri Mar 11 14:56:41 2005
***************
*** 397,402 ****
--- 397,407 ----
  		void filter_ro(const Geometry *g){};
  	};
  
+ 	// Make LineStringAdder a fried of Polygonizer so that
+ 	// LineStringAdder's methods can access Polygonizer's private
+ 	// parts.
+ 	friend LineStringAdder;
+ 
  	// default factory
  	LineStringAdder *lineStringAdder;
  



 Bernhard

-- 
Intevation GmbH                                 http://intevation.de/
Skencil                                           http://skencil.org/
Thuban                                  http://thuban.intevation.org/

From strk at refractions.net  Mon Mar 14 15:10:01 2005
From: strk at refractions.net (strk@refractions.net)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] patch to make geos compile with gcc 2.95
In-Reply-To: <s9zoedm3umi.fsf@salmakis.intevation.de>
References: <s9zoedm3umi.fsf@salmakis.intevation.de>
Message-ID: <20050314201001.GI5843@freek.keybit.net>

Thanks Bernhard, the code is already present in current CVS, but
commented out..

// This seems to be needed by    GCC 2.95.4
//friend class Polygonizer::LineStringAdder;

I wasn't sure about adding it, if noone sees any problem I'll uncomment.

--strk;


On Mon, Mar 14, 2005 at 08:17:09PM +0100, Bernhard Herzog wrote:
> 
> 
> I've briefly tested geos a bit with postgis.  I needed to make two
> changes to geos-2.1.1.tar.bz2 to get it to compile on my system which
> uses gcc 2.95.4.  One was the stdio include for sprintf which has
> already been reported.  
> 
> The other is that at least one of LineStringAdder's methods tries to
> access a private member of Polygonizer.  LineStringAdder is a nested
> class inside of Polygonizer but that doesn't automatically give it
> access to Polygonizer's private members.  The patch below makes
> LineStringAdder a friend of Polygonizer to fix this.  Newer versions of
> gcc apparently allow this kind of access, but gcc 2.95 is correct in
> rejecting it, AFAIK.  Stroustrup 3rd ed. says:
> 
>    C.11.3  Access to Member Class
> 
>    The members of a member class have no special access to members of an
>    enclosing class.
> 
> 
> 
> *** source/headers/geos/opPolygonize.h.~1~	Tue Dec 14 11:35:44 2004
> --- source/headers/geos/opPolygonize.h	Fri Mar 11 14:56:41 2005
> ***************
> *** 397,402 ****
> --- 397,407 ----
>   		void filter_ro(const Geometry *g){};
>   	};
>   
> + 	// Make LineStringAdder a fried of Polygonizer so that
> + 	// LineStringAdder's methods can access Polygonizer's private
> + 	// parts.
> + 	friend LineStringAdder;
> + 
>   	// default factory
>   	LineStringAdder *lineStringAdder;
>   
> 
> 
> 
>  Bernhard
> 
> -- 
> Intevation GmbH                                 http://intevation.de/
> Skencil                                           http://skencil.org/
> Thuban                                  http://thuban.intevation.org/
> _______________________________________________
> geos-devel mailing list
> geos-devel@geos.refractions.net
> http://geos.refractions.net/mailman/listinfo/geos-devel

From tmacy at mapshots.com  Wed Mar 23 07:58:23 2005
From: tmacy at mapshots.com (Ted Macy)
Date: Fri Nov  2 20:52:40 2007
Subject: [geos-devel] COM Implementation
Message-ID: <200503230754606.SM03756@mobiledog>

I tried to search the archives, but did not find an answer to my question.
Has anyone compiled GEOS into a COM object that implements the Open GIS
Simple Features COM interfaces?   I have an application based upon such an
object which requires a per-copy royalty.  I want to provide the application
to other agricultural companies as a free tool, so I need to switch to an
OGC compliant royalty-free object.

 

I am new to this list.  Please let me know if there is some other way that I
should have handled this, or if I need to do anything different with e-mail
signatures, etc, etc.

 

Thanks!

 

_____________________________

Ted Macy

MapShots, Inc. 

Phone:  (678) 513-6093
E-mail:   <mailto:tmacy@mapshots.com> tmacy@mapshots.com

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.osgeo.org/pipermail/geos-devel/attachments/20050323/05007b07/attachment.html
