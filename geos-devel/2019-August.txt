From geos-trac at osgeo.org  Fri Aug  2 12:35:45 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 02 Aug 2019 19:35:45 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
Message-ID: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+--------------------------
 Reporter:  tsw         |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.7.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 A concave hull query with the attached data set under Postgresql 9.4 /
 PostGIS 2.2 / Geos 3.5.0 runs in under a second.

 The same query using the same data on Postgresql 9.6 / PostGIS 2.5.2 /
 GEOS 3.7.1 is still running after 30 minutes.

 I've also attached a perf top screen shot which to me implies this is a
 GEOS problem.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Aug  2 12:35:54 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 02 Aug 2019 19:35:54 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.1c46a360d6c860f6804bc0d895fe330c@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by tsw):

 * Attachment "Screenshot from 2019-08-02 11-25-34.png" added.

 screenshot of perf top while query is running

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Aug  2 12:36:07 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 02 Aug 2019 19:36:07 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.0539891fc8be99b94c888987574a435d@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by tsw):

 * Attachment "brokenlines.zip" added.

 Data set used to generate error

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Aug  2 12:55:53 2019
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 02 Aug 2019 19:55:53 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.02efda47f88f1e0608419d8b480f01a5@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by robe):

 This might be related to #867

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 12 04:52:52 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 12 Aug 2019 11:52:52 -0000
Subject: [geos-devel] [GEOS] #983: Problem with 3.7 branch and shapely
Message-ID: <041.637bd02fe0c83df7ac026dea7922bd4e@osgeo.org>

#983: Problem with 3.7 branch and shapely
------------------------+--------------------------
 Reporter:  aom         |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  major       |  Milestone:
Component:  Default     |    Version:  3.7.0
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 Hi,

 == problem

 Using the git 3.7 branch (which I guess provides the current 3.7.x
 distribution), the GEOSversion function returns:

 ``3.7.3-CAPI-1.11.3 3.7.2-6-ge1399c2``

 Which makes the shapely installation fails, as it expect a "%d.%d.%d blah
 %d.%d.%d" format and assert otherwise:
 {{{
 # pip install shapely --no-binary shapely
 Collecting shapely
   Using cached
 https://files.pythonhosted.org/packages/a2/fb/7a7af9ef7a35d16fa23b127abee272cfc483ca89029b73e92e93cdf36e6b/Shapely-1.6.4.post2.tar.gz
     Complete output from command python setup.py egg_info:
     Traceback (most recent call last):
       File "<string>", line 1, in <module>
       File "/tmp/pip-install-2spcnx3e/shapely/setup.py", line 80, in
 <module>
         from shapely._buildcfg import geos_version_string, geos_version, \
       File "/tmp/pip-install-2spcnx3e/shapely/shapely/_buildcfg.py", line
 248, in <module>
         geos_version_string, geos_version, geos_capi_version =
 _geos_version()
       File "/tmp/pip-install-2spcnx3e/shapely/shapely/_buildcfg.py", line
 242, in _geos_version
         assert len(res) == 2, res
     AssertionError: [('3', '7', '3'), ('1', '11', '3'), ('3', '7', '2')]
 }}}

 As a result, it is impossible to use that branch through the python
 biding.

 Although it could be considered an issue with the python bidings.

 == To reproduce

 {{{
 (moonflash) 170135 13:26:30 [root at gemini ~]# more src/geosversion.c
 #include <stdio.h>

 extern char const *GEOSversion();

 int main() {
   printf("Got %s\n", GEOSversion());
   return 0;
 }
 (moonflash) 170135 13:26:34 [root at gemini ~]# icc ./src/geosversion.c
 /trinity/shared/OCA/softs/geos-3.7-intel19/lib/libgeos_c.so.1.11.3
 /trinity/shared/OCA/softs/geos-3.7-intel19/lib/libgeos.so
 (moonflash) 170135 13:26:38 [root at gemini ~]# ./a.out
 Got 3.7.3-CAPI-1.11.3 3.7.2-6-ge1399c2
 (moonflash) 170135 13:26:40 [root at gemini ~]#
 }}}

 == Possible cause

 In that branch, the current definition of GEOSversion
 {{{
 const char* GEOSversion()
 {
   static char version[256];
   sprintf(version, "%s " GEOS_REVISION, GEOS_CAPI_VERSION);
   return version;
 }
 }}}

 And GEOS_REVISION contains more than the git revision:

 {{{
 [alainm at gemini build]$ more geos_revision.h
 #define GEOS_REVISION "3.7.2-6-ge1399c2"
 [alainm at gemini build]$ more geos_revision.h.in
 #define GEOS_REVISION "@GEOS_REVISION@"
 [alainm at gemini build]$ more geos_revision.h.in
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/983>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From i.baydakov at crazypanda.ru  Wed Aug 14 02:32:12 2019
From: i.baydakov at crazypanda.ru (Ivan Baidakou)
Date: Wed, 14 Aug 2019 12:32:12 +0300
Subject: [geos-devel] perl bindings for geos (Geo::Geos)
Message-ID: <20190814123212.3a89f9fc@crazypanda.ru>

Hello, 

We (i.e. crazy-panda.ru) are glad to announce perl bindings for geos [1]. The bindings are done 
for C++ geos interface, and mostly maches 1 to 1, when it is possible to keep API "perlish",
i.e. not to crash due to dangling reference.

The bindings where successfully tested for Linux and FreeBSD. At the moment for Windows bindings
are not available.


PS. There were a few compilation issues on NetBSD, reported by cpantesters (i.e. [2]). I wasn't 
able to figure out what's wrong here:

/home/cpan/pit/bare/conf/perl-5.14.1/.cpanplus/5.14.1/build/f497Xw7PTu/CPP-geos-3.7.0.3_8/geos-3.7.2/include/geos/geom/Coordinate.inl: In member function 'bool geos::geom::Coordinate::isNull() const':
/home/cpan/pit/bare/conf/perl-5.14.1/.cpanplus/5.14.1/build/f497Xw7PTu/CPP-geos-3.7.0.3_8/geos-3.7.2/build/include/geos/platform.h:73:29: error: 'isnan' was not declared in this scope
 #    define ISNAN(x) isnan(x)
                             ^
/home/cpan/pit/bare/conf/perl-5.14.1/.cpanplus/5.14.1/build/f497Xw7PTu/CPP-geos-3.7.0.3_8/geos-3.7.2/include/geos/geom/Coordinate.inl:38:10: note: in expansion of macro 'ISNAN'
  return (ISNAN(x) && ISNAN(y) && ISNAN(z));
          ^
/home/cpan/pit/bare/conf/perl-5.14.1/.cpanplus/5.14.1/build/f497Xw7PTu/CPP-geos-3.7.0.3_8/geos-3.7.2/build/include/geos/platform.h:73:29: note: suggested alternative:
 #    define ISNAN(x) isnan(x)
                             ^
/home/cpan/pit/bare/conf/perl-5.14.1/.cpanplus/5.14.1/build/f497Xw7PTu/CPP-geos-3.7.0.3_8/geos-3.7.2/include/geos/geom/Coordinate.inl:38:10: note: in expansion of macro 'ISNAN'
  return (ISNAN(x) && ISNAN(y) && ISNAN(z));
          ^
In file included from /home/cpan/pit/bare/conf/perl-5.14.1/.cpanplus/5.14.1/build/f497Xw7PTu/CPP-geos-3.7.0.3_8/geos-3.7.2/src/algorithm/Angle.cpp:19:0:
/usr/include/g++/cmath:648:5: note:   'std::isnan'
     isnan(_Tp __x)
     ^

however, disabling the following line

check_include_files(ieeefp.h HAVE_IEEEFP_H)

in CMakeLists.txt fixed the situation with compilation on NetBSD [3].


[1] https://metacpan.org/pod/release/DMOL/Geo-Geos-1.0.1/lib/Geo/Geos.pm
[2] http://www.cpantesters.org/cpan/report/5385b464-bd38-11e9-9447-c8c4cdff8d62
[3] http://matrix.cpantesters.org/?dist=CPP-geos%203.7.2.0


WBR,
Ivan Baidakou

From sebastic at xs4all.nl  Wed Aug 14 02:39:32 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 14 Aug 2019 11:39:32 +0200
Subject: [geos-devel] perl bindings for geos (Geo::Geos)
In-Reply-To: <20190814123212.3a89f9fc@crazypanda.ru>
References: <20190814123212.3a89f9fc@crazypanda.ru>
Message-ID: <c293eaf6-c9d1-5285-199a-beb13d610acd@xs4all.nl>

On 8/14/19 11:32 AM, Ivan Baidakou wrote:
> The bindings are done 
> for C++ geos interface, and mostly maches 1 to 1, when it is possible to keep API "perlish",
> i.e. not to crash due to dangling reference.

Why not the stable C API?

The bindings are likely to break every time GEOS is updated. They will
at least need to be rebuilt when GEOS is updated to link to the new library.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From i.baydakov at crazypanda.ru  Wed Aug 14 03:00:07 2019
From: i.baydakov at crazypanda.ru (Ivan Baidakou)
Date: Wed, 14 Aug 2019 13:00:07 +0300
Subject: [geos-devel] perl bindings for geos (Geo::Geos)
In-Reply-To: <c293eaf6-c9d1-5285-199a-beb13d610acd@xs4all.nl>
References: <20190814123212.3a89f9fc@crazypanda.ru>
 <c293eaf6-c9d1-5285-199a-beb13d610acd@xs4all.nl>
Message-ID: <20190814130007.4d2cced1@crazypanda.ru>

On Wed, 14 Aug 2019 11:39:32 +0200
Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:

> > The bindings are done 
> > for C++ geos interface, and mostly maches 1 to 1, when it is possible to keep API "perlish",
> > i.e. not to crash due to dangling reference.  
> .
> Why not the stable C API?
> 
> The bindings are likely to break every time GEOS is updated. They will
> at least need to be rebuilt when GEOS is updated to link to the new library.
> 

It was internal decision to use C++ API instead of C. Among the reasons:

- library distribution model: it was decided to let the libgeos be shipped 
via cpan.org rather then rely on system library & their maintainers [1]. 
That's way it is a little bit controlled from our side and we less dependent
on system maintainers (e.g. see report matrix availablity [2])

- It is trivial to write Perl(XS) adapters for C++ interface, rather than
for C, as we are using XS::Framework [3]. For example, for perl code

my $exterior_ring = $polygon->getExteriorRing()

the binding will be 3-line code (XS)

LinearRing* geos::geom::Polygon::getExteriorRing() {
    RETVAL = dyn_cast<LinearRing*>(THIS->getExteriorRing()->clone());
}

(See full samples at [4])

- We don't wanted to loose performance having additional stability layer.

So, yes, with new Geos version we have to bump new bindings release. When 
we used the library internally, and the new 3.7.0 was released, the
transition 3.6.2 => 3.7.0 was almost trivial (less then one hour). 


[1] https://metacpan.org/pod/CPP::geos 
[2] http://matrix.cpantesters.org/?dist=CPP-geos+3.7.2.0
[3] https://metacpan.org/pod/XS::Framework
[4] https://metacpan.org/source/DMOL/Geo-Geos-1.0.1/xsi


WBR, Ivan Baidakou

From strk at kbt.io  Wed Aug 14 03:25:44 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 14 Aug 2019 12:25:44 +0200
Subject: [geos-devel] perl bindings for geos (Geo::Geos)
In-Reply-To: <20190814130007.4d2cced1@crazypanda.ru>
References: <20190814123212.3a89f9fc@crazypanda.ru>
 <c293eaf6-c9d1-5285-199a-beb13d610acd@xs4all.nl>
 <20190814130007.4d2cced1@crazypanda.ru>
Message-ID: <20190814102544.GD8271@liz>

On Wed, Aug 14, 2019 at 01:00:07PM +0300, Ivan Baidakou wrote:
> - It is trivial to write Perl(XS) adapters for C++ interface, rather than
> for C, as we are using XS::Framework [3]. For example, for perl code

I've been thinking for some time to ship a simplified C++ interface
to wrap the C-API. This would be another use case :)

--strk;

From communitysprint at osgeo.org  Sun Aug 18 23:25:36 2019
From: communitysprint at osgeo.org (communitysprint at osgeo.org)
Date: Mon, 19 Aug 2019 08:25:36 +0200
Subject: [geos-devel] Join us at the FOSS4G 2019 Community Sprint
 Saturday 31 August 2019 Bucharest
In-Reply-To: <79efcc2cfde2928899d7fbcfbe448d28@posteo.de>
References: <79efcc2cfde2928899d7fbcfbe448d28@posteo.de>
Message-ID: <ff7cdbf5e91a8a263a210a1403191395@posteo.de>

Hello,

we want to remind you that on Saturday, August 31 in conjunction with
the FOSS4G 2019 there will be the FOSS4G Community Sprint

If you are interested in participating please register on the
dedicated wiki page [0].

This is really important for a better planning (specially for drink and 
food!!)

The FOSS4G 2019 Community Sprint Team

[0] https://wiki.osgeo.org/wiki/FOSS4G_2019_Community_Sprint

---
****************************************************
See you in Bucharest at the FOSS4G Community Sprint 2019
Saturday 31 August 2019

https://wiki.osgeo.org/wiki/FOSS4G_2019_Community_Sprint
*****************************************************

Am 22.05.2019 07:27 schrieb communitysprint at osgeo.org:
> Hello,
> 
> the FOSS4G 2019 Community Sprint [1] will be right after the global 
> FOSS4G
> conference [2] and will be your chance to share ideas with the teams, 
> and
> to discuss and improve different OSGeo projects. We follow this
> tradition since 2009.
> 
> The Sprint will take place Saturday 31 August 2019
> in the University of Bucharest at Faculty of Geography [3] from 9AM
> - 18PM.
> 
> It offers a great opportunity to meet OSGeo members and get involved in
> the projects! The Community Sprint is an opportunity for developers and
> non developers to meet with the core team of the projects and get a
> deeper insight into the software
> 
> The OSGeo Community Sprint is open to all who wish to participate in 
> one
> or more projects. There is always plenty to do – it’s not all about
> programming. Translation, documentation, feedback, discussions, testing
> – all this is also important for projects so everyone is cordially
> invited to attend the Community sprint!
> 
> The Organizing Team is looking forward to your coming!
> 
> Please register soon [1] (important for better planning). If you need 
> an
> accomodation take also a look to the accomodation page [4]
> 
> See you at FOSS4G 2019!
> 
> The FOSS4G 2019 Community Sprint Team
> 
> 
> [1] https://wiki.osgeo.org/wiki/FOSS4G_2019_Community_Sprint
> [2] http://2019.foss4g.org/
> [3] 
> https://en.unibuc.ro/academic-programmes/faculties/faculty-of-geography/
> [4] https://2019.foss4g.org/attending/accomodation/

From geos-trac at osgeo.org  Wed Aug 21 10:35:59 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 21 Aug 2019 17:35:59 -0000
Subject: [geos-devel] [GEOS] #983: Problem with 3.7 branch and shapely
In-Reply-To: <041.637bd02fe0c83df7ac026dea7922bd4e@osgeo.org>
References: <041.637bd02fe0c83df7ac026dea7922bd4e@osgeo.org>
Message-ID: <056.eba1bdba738c64dfeaeadb81541adfc3@osgeo.org>

#983: Problem with 3.7 branch and shapely
------------------------+---------------------------
 Reporter:  aom         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.7.3
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by pramsey):

 * milestone:   => 3.7.3


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/983#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sat Aug 24 18:44:38 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 01:44:38 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.faa7563820831df06fa8ea6ce8835f9e@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:  invalid
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => invalid


Comment:

 I'm more inclined to think this is a PostGIS issue: note the addition of a
 ST_Union call at
 https://github.com/postgis/postgis/commit/ef537b71ca46bfab44f481877b98bd59020f6acb

 Feel free to reopen if I'm mistaken.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 01:21:24 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 08:21:24 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.c933d4a9225d3893ec442257b2908ea5@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Changes (by komzpa):

 * status:  closed => reopened
 * resolution:  invalid =>


Comment:

 PostGIS ticket: https://trac.osgeo.org/postgis/ticket/4469

 Here author says he reverted this change and it made no difference for
 him:
 https://www.mail-archive.com/postgis-users at lists.osgeo.org/msg07593.html

 {{{
 I tried commenting out the line in the ST_ConcaveHull function you
 suggested but that doesn't make a difference. I suspect there is some
 underlying library that has changed.
 }}}

 @dbaston would be cool if there's a way to express your intention without
 closing tickets as "invalid", as this one is a valid one.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 04:55:37 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 11:55:37 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.bccc0b84f3bd9112e3d1e9f4717017b9@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 @Komzpa, would be cool if you could help out by running this query on a
 single version of PostGIS with two different versions of GEOS to confirm
 the performance difference.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 05:22:35 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 12:22:35 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.d9a466fcd95e9f5ce8092660cc4a0f82@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 FWIW, if I run ST_ConcaveHull(geom, 0.99) using GEOS master against
 PostGIS trunk, the query takes forever. If I run it using GEOS master
 against the ST_ConcaveHull implementation from PostGIS 2.3.10 it completes
 instantly.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 07:52:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 14:52:27 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.f9f3481e4c266e0c14788994b09952b9@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by tsw):

 I've further tested this today and calls to public.ST_UnaryUnion in
 ST_Concave hull don't make any difference as they are only applied to
 polygon geometries, and in this case, lines are the problem.

 HOWEVER, the ST_UnaryUnion call made at the end of _st_concavehull added
 in response to issue 3638 is the source of this problem. If this is
 commented out the query runs instantly. Not sure if there is another way
 to address 3638, but this change causes the slowdown I document here.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 07:58:34 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 14:58:34 -0000
Subject: [geos-devel] [GEOS] #953: Merge request fixing
 -Werror=suggest-override warnings, and a unused function
In-Reply-To: <045.1d1dab3233a88e2049803186570dc37f@osgeo.org>
References: <045.1d1dab3233a88e2049803186570dc37f@osgeo.org>
Message-ID: <060.37a75dba80d5f04c55f56dcb83a1658c@osgeo.org>

#953: Merge request fixing -Werror=suggest-override warnings, and a unused
function
------------------------+---------------------------
 Reporter:  rouault     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Merged by pramsey

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/953#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 08:14:35 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 15:14:35 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.aae628e03ffc87436d7f7fd1c3035a5b@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by komzpa):

 So, slow part is ST_Union / GEOSUnaryUnion, unioning the attached lines
 and their hull posted below (almost-hull, but that's PostGIS side issue).
 Brokenlines may seem to require insane amount of noding, but in the actual
 call almost all of it can be skipped if some kind of shortcut like "drop
 the line if it's fully covered by polygon" is implemented.

 {{{

 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 08:16:38 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 15:16:38 -0000
Subject: [geos-devel] [GEOS] #858: LineIntersector sanitizer failure
In-Reply-To: <045.b5770e9464c01d6d0de67195e3d583a5@osgeo.org>
References: <045.b5770e9464c01d6d0de67195e3d583a5@osgeo.org>
Message-ID: <060.6818d52aaf99294d982aa7d2fc5fb0f3@osgeo.org>

#858: LineIntersector sanitizer failure
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 Confirmed invalid read in master using Valgrind. Converted example to GEOS
 test here:
 https://github.com/dbaston/libgeos/commit/c487768ede97ea3d4ab78e16f67bb37f9dd3c09d

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/858#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 08:22:49 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 15:22:49 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.4d681af2a10cc92295e15eba68df50a6@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 So I am again inclined to close this as a PostGIS issue.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 08:59:45 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 15:59:45 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.0ae269c22251bf5b6c4767c40a76d9a8@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by komzpa):

 @dbaston PostGIS is calling GEOSUnion in natural way as part of higher
 level algorithm.

 Single GEOSUnaryUnion call is working unexpectedly slow. This manifests as
 slow PostGIS. That manifestation is problem of PostGIS. The slowness of
 GEOSUnaryUnion is GEOS problem, will be there whether ST_ConcaveHull is
 rewritten or not, and this ticket has everything to reproduce it.

 If GEOS is not concerned of performance of overlay ops then this ticket
 can be closed together with #867. I hope this is not the case.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 09:02:27 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 16:02:27 -0000
Subject: [geos-devel] [GEOS] #845: Head Use-After-Free
 geos::geomgraph::index::SweepLineEvent::isDelete()
In-Reply-To: <045.f3a4e4a45b09ccde692fccadab9bcd0b@osgeo.org>
References: <045.f3a4e4a45b09ccde692fccadab9bcd0b@osgeo.org>
Message-ID: <060.9d2b12e5873944ebf9cd65b67ade8d77@osgeo.org>

#845: Head Use-After-Free geos::geomgraph::index::SweepLineEvent::isDelete()
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 I think this is probably the same issue as
 https://trac.osgeo.org/geos/ticket/858

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/845#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 09:06:48 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 16:06:48 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.0d8dae653db09c63487c2b0875215888@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 @Komzpa This ticket description claims that there is a performance
 regression in GEOS. Is there a performance regression, or something unique
 about these inputs, or are you just saying that GEOS is generally not as
 fast as you'd like it to be?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:10>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 09:14:35 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 16:14:35 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.07b0b82ad06fe29bee4fc9d3c94b120c@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 In other words, should the ticket be reframed as "please optimize the case
 of unary union of lines with many intersections" ?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:11>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 09:40:02 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 16:40:02 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.f4c58e66ef34c479c4094a506e58c193@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by komzpa):

 @dbaston this ticket does not claim there's performance regression in
 GEOS. It claims there's a performance issue in current PostGIS profiling
 of which ends up in GEOS.

 Best way of handling such issues it to link (or block) them to possible
 fix implementation tickets and recheck whether the issue still stands
 after each of those. This one can be blocked on overlays-ng implementation
 if that's ticketed, and on in-GEOS concave hull if that might become a
 thing. This way original conversation is not lost, and complexity of
 solution space is captured.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:12>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 09:49:03 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 16:49:03 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.5786e90d04c7c1d821d27262149f1211@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 But this has nothing to do with concave hull, in the end? The issue is
 that you'd like the unary union of many lines to be faster, no? Would that
 not be better captured in a ticket that leaves PostGIS, concave hull, and
 all other noise out of it?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:13>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 11:07:08 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 18:07:08 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.da98f99b75fb47fd743cd177170513a6@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by tsw):

 It may be the concave hull with this data set identified an underlying
 issue.

 As I don't understand the underlying algorithm however I'll point out a
 few things. If you run the test ST_Concavehull query as it currently
 stands in PostGIS and GEOS and buffer the lines by 10 meters, it is still
 never completes. I'm not sure that indicates a GEOS problem or not.

 Manipulating the _st_concavehull code to remove UnaryUnion fixes the
 performance but then not everything is encapsulated by the hull.

 I'll leave it to you folks to determine the cause and the fix, but wanted
 to provide as much information as possible to help diagnose the cause.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:14>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Sun Aug 25 13:49:36 2019
From: geos-trac at osgeo.org (GEOS)
Date: Sun, 25 Aug 2019 20:49:36 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.174717f06d76097d6546b74286c6d948@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 Thanks for the report, @tsw, and sorry for leaving you caught in the
 crossfire.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:15>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 07:02:39 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 14:02:39 -0000
Subject: [geos-devel] [GEOS] #904: warning C4189 (appVeyor)
In-Reply-To: <047.50dd8e2a3293b59bd559954d3e8fce72@osgeo.org>
References: <047.50dd8e2a3293b59bd559954d3e8fce72@osgeo.org>
Message-ID: <062.ac91001aefc430334e271352cf2c1f79@osgeo.org>

#904: warning C4189 (appVeyor)
------------------------+---------------------------
 Reporter:  cvvergara   |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  minor       |   Milestone:  3.8.0
Component:  Unit Tests  |     Version:  3.6.2
 Severity:  Annoyance   |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"2cd5f5be1685ee46f444308fa63b41becf967b16/git" 2cd5f5b/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="2cd5f5be1685ee46f444308fa63b41becf967b16"
 Attempt to quiet TUT warnings in both MSVC, gcc

 Fixes #904
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/904#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 07:13:47 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 14:13:47 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.7214da7dcf48b8358eebe1d0139f8bd2@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 A counterexample is the test data in #982, which on my machine takes 4
 minutes with ST_Node, or 3.5 hours with ST_UnaryUnion.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 11:46:10 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 18:46:10 -0000
Subject: [geos-devel] [GEOS] #858: LineIntersector sanitizer failure
In-Reply-To: <045.b5770e9464c01d6d0de67195e3d583a5@osgeo.org>
References: <045.b5770e9464c01d6d0de67195e3d583a5@osgeo.org>
Message-ID: <060.9cd5199255fac4794b2ca8b42bb59772@osgeo.org>

#858: LineIntersector sanitizer failure
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"0bf5167794c90984a056d7b5b6a7f5cb4ecaedc9/git" 0bf5167/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="0bf5167794c90984a056d7b5b6a7f5cb4ecaedc9"
 Fix invalid read on exception in IsValidOp

 Fixes #858
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/858#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 16:09:20 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 23:09:20 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.c6afd2819093a60a201f18196f2db1a6@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Here's what I think is going on.  `GEOSNode` uses the GEOS
 [https://github.com/libgeos/geos/blob/master/src/noding/GeometryNoder.cpp
 GeometryNoder], which in turn uses
 [https://github.com/libgeos/geos/blob/master/src/noding/IteratedNoder.cpp
 IteratedNoder].  `IteratedNoder` uses `MCIndexNoder`, which is actually
 O(NlogN)-ish.  But the function of `IteratedNoder` is to attempt to fully
 node lines by repeatedly re-noding until no new nodes are created.  There
 are situations involving almost-parallel lines where repeated noding keeps
 adding nodes, but also perturbing the resultant line segments so that they
 still cross.  So this will obviously be very slow.

 OTOH the GEOS `UnaryUnion` uses the overlay snapping heuristic if it
 detects noding failure.  That's probably succeeding here, and so the
 computation is faster.

 However, in the case DB mentions the UnaryUnion is perhaps hitting the
 recent correctness heuristic that was introduced to prevent some other
 failures.  It seems to be quite slow in some cases.  Probably the dataset
 does not cause too much (perhaps none) repeated noding in GEOSNode, so
 that is faster.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 16:12:56 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 23:12:56 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.1d43b1fafd1c4f59e94d32b413d02f61@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 It is the case that JTS provides the
 [https://github.com/locationtech/jts/blob/master/modules/core/src/main/java/org/locationtech/jts/noding/snapround/GeometryNoder.java
 GeometryNoder] which uses snap-rounding.  That would probably be
 reasonably fast and should not have the noding failures (at the price of
 having to round all coordinates slightly).  The upcoming OverlayNG should
 also have this same behaviour and performance.  So that will be a medium-
 term fix for this.  It will be a task to revisit the GEOS noding and make
 it utilize the new code.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 16:21:53 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 23:21:53 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.1ee1637016a569004edf804776a67631@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 One further note is that it looks like GEOS is using a original
 [https://github.com/libgeos/geos/blob/master/src/operation/union/CascadedUnion.cpp
 Cascaded Union] approach for UnaryUnion for both polygons and lines.  In
 fact in theory using a Cascaded approach on lines doesn't provide much
 performance benefit, because unlike polygons unioning lines doesn't
 discard many if any vertices.

 JTS doesn't do this in its UnaryUnion- it just does a
 [https://github.com/locationtech/jts/blob/master/modules/core/src/main/java/org/locationtech/jts/operation/union/UnaryUnionOp.java#L209
 full union] of the line with an empty geometry, which effectively forces
 the noding of the lines (but may throw a TopologyException if the noding
 can't be computed correctly due to robustness issues - this is
 demonstrated in #392).

 I guess the GEOS approach handles noding issues better, due to the
 snapping heuristic in the mix.  But this is something else that could be
 revisited when the new overlay hits the codebase.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 16:38:41 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 23:38:41 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.5e00e86db40db7a4ebd4ff19a559a2b9@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Wading in here...  to my mind the use of ST_Union to cover up deficiencies
 in the Concave Hull algorithm seems very fishy.  That should not be needed
 if the Concave Hull algorithm was correct.

 So while this is hitting the GEOS issue with slow UnaryUnion (probably
 #867), it's not a direct example of that problem.

 Since the Concave Hull algorithm is in PostGIS this should be ticketed
 there as a request for an improved algorithm.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:16>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 16:39:39 2019
From: geos-trac at osgeo.org (GEOS)
Date: Mon, 26 Aug 2019 23:39:39 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.4d2e6182203aca513914336df1a83fcb@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 Yes, the cascaded union for lines is very expensive in some cases. I put
 together a performance benchmark that's like the #982 case (many short
 lines), and removing the cascaded union improves performance by about 85%.
 So it might make sense to use the cascaded approach only if the standard
 approach throws an exception.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 17:33:00 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 00:33:00 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.5420ec7818d1aa2da65c58240b548954@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 The data in #982 is absolutely a worst-case scenario for CascadedUnion,
 since it has very little spatial coherence, and the number of nodes is on
 the order of O(n^2).  So it's not surprising it's very slow.

 Invoking CascadedUnion only on union exception would be a quick fix for
 this case.  But I have my doubts about using Cascaded Union at all for
 sets of lines.  I think it should be possible to determine how the
 Cascaded Union code is improving robustness (likely due to snapping) and
 simply invoke that directly.  Although, the snapping heuristic is possibly
 low-performance itself, and so it might not produce much advantage.

 Ultimately, better noding is going to be the solution.  Either snap-
 rounding, or perhaps with further research an approach that preserves more
 precision where possible.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:6>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 17:38:58 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 00:38:58 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.4508e04ee568bb0f5d2ecc1f61c5a5a0@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Now that I've looked at the data in this test case, I can see that this
 dataset is absolutely a worst-case scenario for union.  The reason is that
 there are so many intersections between the lines, it is going to produce
 on the order of O(n^2) node points.  This means the noding process has to
 run in slow O(n^2) time.  Also, memory usage is going to be very large.

 So this is an example of where using Union within the Concave Hull
 algorithm is not a good idea.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:17>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 17:40:02 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 00:40:02 -0000
Subject: [geos-devel] [GEOS] #962: GEOSNode is much slower that
	GEOSUnaryUnion
In-Reply-To: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
References: <044.63b336a33bd2fa2e1a463714948f5c5f@osgeo.org>
Message-ID: <059.d75da495e53d3f47e6a08a0f2dcede49@osgeo.org>

#962: GEOSNode is much slower that GEOSUnaryUnion
------------------------+---------------------------
 Reporter:  komzpa      |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 I think the tickets referred to in the UnaryUnion comments suggest that
 the cascaded union helps robustness by unioning nearby lines together
 (which supposedly helps because of common bit removal.) I think it's
 becoming off-topic for this ticket but we can discuss at
 https://github.com/libgeos/geos/pull/213

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/962#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 17:44:45 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 00:44:45 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.c8cc6a21a76b69a91b4c755ecb457cd1@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 (If I recall, it was something like 2.3 million intersections)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:18>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Mon Aug 26 17:49:31 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 00:49:31 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.adcc0472f9d1262e4f85f1259dee4ce0@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 From input containing about 3000 line segments.  So yep, O(n^2).

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:19>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From nyall.dawson at gmail.com  Mon Aug 26 19:50:00 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 27 Aug 2019 12:50:00 +1000
Subject: [geos-devel] Any sneaky tricks for speeding up operations with
	complex geometries?
Message-ID: <CAB28AshYVTDA1_zjpfg9Qg3X83DM3kCPoyBLu=BgtPNVKqd5NQ@mail.gmail.com>

Hey GEOS community!

I'm wondering if anyone has any sneaky/brilliant approaches on
speeding up GEOS operations with complex input geometries. Right now
I'm looking for a way to speed up a unary union operation with the
order of 100 input polygons, each of which is quite complex. I'm
currently throwing these all into GEOSUnaryUnion and relying on GEOS
to internally do things the best way, but I suspect there IS some
optimisations I could do to pre-process the geometries in order to
speed up the actual union operation.

Has anyone any tips here?

The other operation I'd like to optimise somehow is detecting whether
gaps exist between a set of features. Currently the code is unioning
all the input goemetries, then differencing it against the area of
interest and checking if the result is empty. I suspect there's a much
smarter way of doing this which would avoid the expense of the
differencing operation, so I'd love to hear if anyone has any
optimised approaches for handling this...

Nyall

From mtnclimb at gmail.com  Mon Aug 26 20:54:18 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Mon, 26 Aug 2019 20:54:18 -0700
Subject: [geos-devel] Any sneaky tricks for speeding up operations with
 complex geometries?
In-Reply-To: <CAB28AshYVTDA1_zjpfg9Qg3X83DM3kCPoyBLu=BgtPNVKqd5NQ@mail.gmail.com>
References: <CAB28AshYVTDA1_zjpfg9Qg3X83DM3kCPoyBLu=BgtPNVKqd5NQ@mail.gmail.com>
Message-ID: <CAK2ens1Yuv_Z9aJP1pJeknPFQO2C+6aVoAhyLNaZFwLkY7gP4g@mail.gmail.com>

Hey Nyall!

About the union question, probably no good news there, unless your data has
some very unlikely characteristics.  The GEOS Cascaded Union approach is
remarkably efficient at unioning sets of overlapping polygons - which it
sounds like you have.  The other alternative hack is to run buffer(0), but
it is unlikely to be faster.

IF the data was a true polygonal coverage (i.e. strictly non-overlapping)
then there is a faster approach in GEOSCoverageUniion.  [1].  But if you
are trying to find gaps then it's likely your data is not a true coverage.

As for actually finding gaps, the good news is that there likely is a more
efficient and effective approach. But it's not implemented directly in
GEOS, so will take some work to accomplish.  The algorithm is to reduce the
input to a large set of line segments, and then discard all segments which
occur more than once (irrespective of direction/vertex order).  What is
left will be the outer boundaries and any internal gaps which occur.  You
can then refine this by looking for segments which are nearly, but not
exactly parallel.  It would probably be nice to provide this as GEOS
functionality at some point...


[1] https://github.com/libgeos/geos/pull/158

On Mon, Aug 26, 2019 at 7:50 PM Nyall Dawson <nyall.dawson at gmail.com> wrote:

> Hey GEOS community!
>
> I'm wondering if anyone has any sneaky/brilliant approaches on
> speeding up GEOS operations with complex input geometries. Right now
> I'm looking for a way to speed up a unary union operation with the
> order of 100 input polygons, each of which is quite complex. I'm
> currently throwing these all into GEOSUnaryUnion and relying on GEOS
> to internally do things the best way, but I suspect there IS some
> optimisations I could do to pre-process the geometries in order to
> speed up the actual union operation.
>
> Has anyone any tips here?
>
> The other operation I'd like to optimise somehow is detecting whether
> gaps exist between a set of features. Currently the code is unioning
> all the input goemetries, then differencing it against the area of
> interest and checking if the result is empty. I suspect there's a much
> smarter way of doing this which would avoid the expense of the
> differencing operation, so I'd love to hear if anyone has any
> optimised approaches for handling this...
>
> Nyall
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190826/99a498e8/attachment.html>

From geos-trac at osgeo.org  Mon Aug 26 21:11:37 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 04:11:37 -0000
Subject: [geos-devel] [GEOS] #982: Postgis ST_ConcaveHull Runtime GEOS
	Problem?
In-Reply-To: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
References: <041.60ed810e2931beafb670c1172e9c2f90@osgeo.org>
Message-ID: <056.ba0f59487259157d4d97413eb5b95d5d@osgeo.org>

#982: Postgis ST_ConcaveHull Runtime GEOS Problem?
------------------------+---------------------------
 Reporter:  tsw         |       Owner:  geos-devel@…
     Type:  defect      |      Status:  reopened
 Priority:  major       |   Milestone:
Component:  Default     |     Version:  3.7.0
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by mdavis):

 Here's the stats from JTS:

 A : GEOMETRYCOLLECTION - 1007 elements, 3485 pts
     Len: 1.0414378207800608E10

 Result : MULTILINESTRING - 1370751 elements, 2742973 pts
     Len: 1.041437820780099E10

 Because there are a lot of >= 3 point linestrings, the result component
 count is more than the square of the input component count.
 It's good to see the close correlation of the length of the input and
 output datasets.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/982#comment:20>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 07:56:02 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 14:56:02 -0000
Subject: [geos-devel] [GEOS] #584: Port robust distance fixes from JTS
In-Reply-To: <042.5e5e8093286a799addf20a1b16130bdf@osgeo.org>
References: <042.5e5e8093286a799addf20a1b16130bdf@osgeo.org>
Message-ID: <057.df0c1370008e011bb2c30a6ce696c091@osgeo.org>

#584: Port robust distance fixes from JTS
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Done in [changeset:git/81451a44c31eb5045b6026942051312130886bfe]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/584#comment:9>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 08:06:13 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 15:06:13 -0000
Subject: [geos-devel] [GEOS] #969: errors in docs for unary union
In-Reply-To: <045.93e3616718097e59680653068c6f62da@osgeo.org>
References: <045.93e3616718097e59680653068c6f62da@osgeo.org>
Message-ID: <060.39d94c1576d36a8834ec390c3dce3e16@osgeo.org>

#969: errors in docs for unary union
---------------------------+---------------------------
 Reporter:  kthujvu        |       Owner:  geos-devel@…
     Type:  defect         |      Status:  closed
 Priority:  trivial        |   Milestone:
Component:  Documentation  |     Version:  3.6.2
 Severity:  Unassigned     |  Resolution:  fixed
 Keywords:  documentation  |
---------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"fa0ff9bb09549a4aa3975b371975edf46855fb4a/git" fa0ff9b/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="fa0ff9bb09549a4aa3975b371975edf46855fb4a"
 Fix doc typos

 Fixes #969
 [ci skip]
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/969#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 08:11:16 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 15:11:16 -0000
Subject: [geos-devel] [GEOS] #702: OverlayOp takes mover 20 minutes when
 a polygon with over a million holes is involved
In-Reply-To: <042.005d37bf349823c268b56042f26e035e@osgeo.org>
References: <042.005d37bf349823c268b56042f26e035e@osgeo.org>
Message-ID: <057.9640a5720fb6976f8edf26bfd3577ab3@osgeo.org>

#702: OverlayOp takes mover 20 minutes when a polygon with over a million holes
is involved
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.4.2
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by dbaston):

 strk, do you still have these inputs after 5 years, and do you want to see
 if there is an improvement following this:
 https://github.com/libgeos/geos/pull/141 ?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/702#comment:7>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 08:12:01 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 15:12:01 -0000
Subject: [geos-devel] [GEOS] #254: Geometry cleaning routine for Invalid
	Geometries
In-Reply-To: <045.746d6246900e6d647012f51d005e87b9@osgeo.org>
References: <045.746d6246900e6d647012f51d005e87b9@osgeo.org>
Message-ID: <060.2c83c7986cbb7f4957c13368a4ae1976@osgeo.org>

#254: Geometry cleaning routine for Invalid Geometries
-------------------------+---------------------------
 Reporter:  pramsey      |       Owner:  geos-devel@…
     Type:  enhancement  |      Status:  closed
 Priority:  major        |   Milestone:  GEOS Fund Me
Component:  Default      |     Version:  master
 Severity:  Unassigned   |  Resolution:  fixed
 Keywords:               |
-------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/254#comment:5>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 08:37:45 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 15:37:45 -0000
Subject: [geos-devel] [GEOS] #892: SQLITE Touches() in
 spatialite-enabled supershape returns FALSE when it shouldn't
In-Reply-To: <042.dfe69e89f0011ec6ad0b899623f82216@osgeo.org>
References: <042.dfe69e89f0011ec6ad0b899623f82216@osgeo.org>
Message-ID: <057.f5e308bfa63f45bf5401481c75444124@osgeo.org>

#892: SQLITE Touches() in spatialite-enabled supershape returns FALSE when it
shouldn't
-------------------------------------------+---------------------------
 Reporter:  dido                           |       Owner:  geos-devel@…
     Type:  defect                         |      Status:  new
 Priority:  major                          |   Milestone:  3.6.4
Component:  Default                        |     Version:  3.5.0
 Severity:  Significant                    |  Resolution:
 Keywords:  Touches false ring linestring  |
-------------------------------------------+---------------------------

Comment (by dbaston):

 Is input data available for this? The Spatialite ticket seems to suggest
 the input is a  CircularString, which would have to be transformed by
 Spatialite before reaching GEOS.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/892#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 08:38:20 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 15:38:20 -0000
Subject: [geos-devel] [GEOS] #899: https://geos.osgeo.org/doxygen/ is
 down and shows certificate error
In-Reply-To: <044.2c898d7ca1f4b1d592de51130ce2b535@osgeo.org>
References: <044.2c898d7ca1f4b1d592de51130ce2b535@osgeo.org>
Message-ID: <059.e7910ffa6abd261037d4e961e27a0908@osgeo.org>

#899: https://geos.osgeo.org/doxygen/ is down and shows certificate error
---------------------------+---------------------------
 Reporter:  komzpa         |       Owner:  geos-devel@…
     Type:  defect         |      Status:  closed
 Priority:  major          |   Milestone:  Management
Component:  Documentation  |     Version:  3.6.2
 Severity:  Unassigned     |  Resolution:  worksforme
 Keywords:                 |
---------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => worksforme


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/899#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 09:14:48 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 16:14:48 -0000
Subject: [geos-devel] [GEOS] #828: Change debbie to use gitea webhook
 instead of polling
In-Reply-To: <042.0086b7cc4ccf0577ce9b976064561c08@osgeo.org>
References: <042.0086b7cc4ccf0577ce9b976064561c08@osgeo.org>
Message-ID: <057.af16b8f52a748dd90be52293c8b0a9e9@osgeo.org>

#828: Change debbie to use gitea webhook instead of polling
------------------------+-------------------------
 Reporter:  robe        |       Owner:  robe
     Type:  defect      |      Status:  new
 Priority:  major       |   Milestone:  Management
Component:  Buildbots   |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+-------------------------
Changes (by dbaston):

 * owner:  geos-devel@… => robe
 * component:  Default => Buildbots


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/828#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 09:19:54 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 16:19:54 -0000
Subject: [geos-devel] [GEOS] #860: Prefer empty to size of zero
In-Reply-To: <045.6fa25a248e0bd47052567127a6be9539@osgeo.org>
References: <045.6fa25a248e0bd47052567127a6be9539@osgeo.org>
Message-ID: <060.427861789ce6970acdf6d290ee67f4e0@osgeo.org>

#860: Prefer empty to size of zero
------------------------+---------------------------
 Reporter:  goatbar     |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.6.4
Component:  Default     |     Version:  3.6.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by Daniel Baston <dbaston@…>):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 In [changeset:"c4bfa4585e74bd63f1df1000a115ff3aa2ddd327/git" c4bfa45/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="c4bfa4585e74bd63f1df1000a115ff3aa2ddd327"
 Use empty() instead of size() where possible

 Fixes #860
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/860#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 09:22:09 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 16:22:09 -0000
Subject: [geos-devel] [GEOS] #850: Segfault in
 geos::algorithm::ConvexHull::preSort with extreme outlier
In-Reply-To: <046.c1ce43c98a39655c523014d2e576713f@osgeo.org>
References: <046.c1ce43c98a39655c523014d2e576713f@osgeo.org>
Message-ID: <061.60bd8991ca47f6e924af78d0df611a24@osgeo.org>

#850: Segfault in geos::algorithm::ConvexHull::preSort with extreme outlier
------------------------+---------------------------
 Reporter:  sgillies    |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.5.1
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed
 * milestone:  3.6.4 => 3.8.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/850#comment:4>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 11:17:31 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 18:17:31 -0000
Subject: [geos-devel] [GEOS] #588: [JTS fixed] valid polygon when cw,
 not valid when ccw
In-Reply-To: <047.28fd0b50f1b48e233e16a5365db5951d@osgeo.org>
References: <047.28fd0b50f1b48e233e16a5365db5951d@osgeo.org>
Message-ID: <062.b2ba8ac4f2f458089a9b10409a73319e@osgeo.org>

#588: [JTS fixed] valid polygon when cw, not valid when ccw
------------------------+---------------------------
 Reporter:  olivier80   |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.3.5
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:  jtsfail     |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Apparently fixed with robust determinant fixes in 3.8.x. Added regression
 test in [changeset:4c8e68a1cf16637be0ef3826c18fc3df628039c8/git]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/588#comment:13>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 11:26:33 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 18:26:33 -0000
Subject: [geos-devel] [GEOS] #588: [JTS fixed] valid polygon when cw,
 not valid when ccw
In-Reply-To: <047.28fd0b50f1b48e233e16a5365db5951d@osgeo.org>
References: <047.28fd0b50f1b48e233e16a5365db5951d@osgeo.org>
Message-ID: <062.1dd9f3be13df86a63308ab1b76f3b90a@osgeo.org>

#588: [JTS fixed] valid polygon when cw, not valid when ccw
------------------------+---------------------------
 Reporter:  olivier80   |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.3.5
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:  jtsfail     |
------------------------+---------------------------

Comment (by mdavis):

 Thanks, DB.

 It might be nice to add a comment to the test with this issue number, so
 we can understand history?

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/588#comment:14>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 11:34:32 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 18:34:32 -0000
Subject: [geos-devel] [GEOS] #523: SymDifference between two valid
 geometries return an _invalid_ geometry [JTS fails too]
In-Reply-To: <042.d90275df74f75eb46f2131b0d019e212@osgeo.org>
References: <042.d90275df74f75eb46f2131b0d019e212@osgeo.org>
Message-ID: <057.30cdd26f9d9f7889b7110290b55010c1@osgeo.org>

#523: SymDifference between two valid geometries return an _invalid_ geometry
[JTS fails too]
------------------------+---------------------------
 Reporter:  strk        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  GEOS Fund Me
Component:  Default     |     Version:  3.3.2
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:  jtsfail     |
------------------------+---------------------------
Changes (by dbaston):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Added test confirming fix in
 [changeset:cd3af0d40a9ab78fddf16abf29bd4d7bce099868/git]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/523#comment:8>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Aug 27 11:35:42 2019
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 27 Aug 2019 18:35:42 -0000
Subject: [geos-devel] [GEOS] #588: [JTS fixed] valid polygon when cw,
 not valid when ccw
In-Reply-To: <047.28fd0b50f1b48e233e16a5365db5951d@osgeo.org>
References: <047.28fd0b50f1b48e233e16a5365db5951d@osgeo.org>
Message-ID: <062.70e260088180f3159a5caf9385d6c9c7@osgeo.org>

#588: [JTS fixed] valid polygon when cw, not valid when ccw
------------------------+---------------------------
 Reporter:  olivier80   |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  major       |   Milestone:  3.8.0
Component:  Default     |     Version:  3.3.5
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:  jtsfail     |
------------------------+---------------------------

Comment (by dbaston):

 Yes, thanks for catching that.
 Added in [changeset:c2bbf31c03ec7a87256caff00917c44b69c4d806/git]

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/588#comment:15>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From nyall.dawson at gmail.com  Tue Aug 27 14:48:39 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 28 Aug 2019 07:48:39 +1000
Subject: [geos-devel] Any sneaky tricks for speeding up operations with
 complex geometries?
In-Reply-To: <CAK2ens1Yuv_Z9aJP1pJeknPFQO2C+6aVoAhyLNaZFwLkY7gP4g@mail.gmail.com>
References: <CAB28AshYVTDA1_zjpfg9Qg3X83DM3kCPoyBLu=BgtPNVKqd5NQ@mail.gmail.com>
 <CAK2ens1Yuv_Z9aJP1pJeknPFQO2C+6aVoAhyLNaZFwLkY7gP4g@mail.gmail.com>
Message-ID: <CAB28AsgCwE+RMP2GjO6BfEm_3uSbn85a6yVWuJDi4sWGa8_dNA@mail.gmail.com>

On Tue, 27 Aug 2019 at 13:51, Martin Davis <mtnclimb at gmail.com> wrote:
>

Thanks for the quick reply Martin!

> About the union question, probably no good news there, unless your data has some very unlikely characteristics.  The GEOS Cascaded Union approach is remarkably efficient at unioning sets of overlapping polygons - which it sounds like you have.  The other alternative hack is to run buffer(0), but it is unlikely to be faster.

Ok, thanks for the confirmation. Is there any benefit in "batching"
sets of geometries to cascaded union (e.g. unioning 100 geometries in
sets of 10, and then doing a final union of the result)? Or best to
throw EVERYTHING at GEOS and let it sort it out?

> IF the data was a true polygonal coverage (i.e. strictly non-overlapping) then there is a faster approach in GEOSCoverageUniion.  [1].  But if you are trying to find gaps then it's likely your data is not a true coverage.

Interesting. I have one application which would definitely benefit
from this. GEOS 3.8 looks to be a very exciting release..! One thing I
couldn't determine from the coverage PR and the docs of the new
operation is what happens when the data **isn't** a non-overlapping
coverage. Is the result total garbage in this case or is an exception
raised? Are holes/non-contiguous parts allowed?

> As for actually finding gaps, the good news is that there likely is a more efficient and effective approach. But it's not implemented directly in GEOS, so will take some work to accomplish.  The algorithm is to reduce the input to a large set of line segments, and then discard all segments which occur more than once (irrespective of direction/vertex order).  What is left will be the outer boundaries and any internal gaps which occur.  You can then refine this by looking for segments which are nearly, but not exactly parallel.  It would probably be nice to provide this as GEOS functionality at some point...

Thanks -- let me mull on that one!

Nyall

>
>
> [1] https://github.com/libgeos/geos/pull/158
>
> On Mon, Aug 26, 2019 at 7:50 PM Nyall Dawson <nyall.dawson at gmail.com> wrote:
>>
>> Hey GEOS community!
>>
>> I'm wondering if anyone has any sneaky/brilliant approaches on
>> speeding up GEOS operations with complex input geometries. Right now
>> I'm looking for a way to speed up a unary union operation with the
>> order of 100 input polygons, each of which is quite complex. I'm
>> currently throwing these all into GEOSUnaryUnion and relying on GEOS
>> to internally do things the best way, but I suspect there IS some
>> optimisations I could do to pre-process the geometries in order to
>> speed up the actual union operation.
>>
>> Has anyone any tips here?
>>
>> The other operation I'd like to optimise somehow is detecting whether
>> gaps exist between a set of features. Currently the code is unioning
>> all the input goemetries, then differencing it against the area of
>> interest and checking if the result is empty. I suspect there's a much
>> smarter way of doing this which would avoid the expense of the
>> differencing operation, so I'd love to hear if anyone has any
>> optimised approaches for handling this...
>>
>> Nyall
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

From geos-trac at osgeo.org  Wed Aug 28 00:51:44 2019
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 28 Aug 2019 07:51:44 -0000
Subject: [geos-devel] [GEOS] #892: SQLITE Touches() in
 spatialite-enabled supershape returns FALSE when it shouldn't
In-Reply-To: <042.dfe69e89f0011ec6ad0b899623f82216@osgeo.org>
References: <042.dfe69e89f0011ec6ad0b899623f82216@osgeo.org>
Message-ID: <057.e7c4ef40311c82492c5801889d78c2c0@osgeo.org>

#892: SQLITE Touches() in spatialite-enabled supershape returns FALSE when it
shouldn't
-------------------------------------------+---------------------------
 Reporter:  dido                           |       Owner:  geos-devel@…
     Type:  defect                         |      Status:  new
 Priority:  major                          |   Milestone:  3.6.4
Component:  Default                        |     Version:  3.5.0
 Severity:  Significant                    |  Resolution:
 Keywords:  Touches false ring linestring  |
-------------------------------------------+---------------------------

Comment (by dido):

 Hello,

 I will try to provide a test sample ASAP.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/892#comment:3>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From strk at kbt.io  Wed Aug 28 08:36:33 2019
From: strk at kbt.io (Sandro Santilli)
Date: Wed, 28 Aug 2019 17:36:33 +0200
Subject: [geos-devel] self-contained commit logs
Message-ID: <20190828153633.GA30176@liz>

To all committers,
may I ask to keep commit logs as much as possible self-contained ?
Commit logs like this:

    Add test for #588

don't tell anything about the commit w/out fetching a web page,
which defeats the purpose of a distributed version control system
like git...

Adding external references is fine but please don't omit the main
object of the change. For example this is a good one:

    Add envelope test to Distance::segmentToSegment

    JTS commit r652
    Fixes Trac #584

Thanks!

--strk;

From mtnclimb at gmail.com  Wed Aug 28 10:41:47 2019
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 28 Aug 2019 10:41:47 -0700
Subject: [geos-devel] Any sneaky tricks for speeding up operations with
 complex geometries?
In-Reply-To: <CAB28AsgCwE+RMP2GjO6BfEm_3uSbn85a6yVWuJDi4sWGa8_dNA@mail.gmail.com>
References: <CAB28AshYVTDA1_zjpfg9Qg3X83DM3kCPoyBLu=BgtPNVKqd5NQ@mail.gmail.com>
 <CAK2ens1Yuv_Z9aJP1pJeknPFQO2C+6aVoAhyLNaZFwLkY7gP4g@mail.gmail.com>
 <CAB28AsgCwE+RMP2GjO6BfEm_3uSbn85a6yVWuJDi4sWGa8_dNA@mail.gmail.com>
Message-ID: <CAK2ens3HwWRLjB+in+iheySiLL+Y0YD+0w10UyebD4pc5bwkaQ@mail.gmail.com>

>
>
>
> > About the union question, probably no good news there, unless your data
> has some very unlikely characteristics.  The GEOS Cascaded Union approach
> is remarkably efficient at unioning sets of overlapping polygons - which it
> sounds like you have.  The other alternative hack is to run buffer(0), but
> it is unlikely to be faster.
>
> Ok, thanks for the confirmation. Is there any benefit in "batching"
> sets of geometries to cascaded union (e.g. unioning 100 geometries in
> sets of 10, and then doing a final union of the result)? Or best to
> throw EVERYTHING at GEOS and let it sort it out?
>

Best to let GEOS handle it.  It uses a spatial index to choose sets of
polygons to union. It's unlikely you could do this better (unless there is
some characteristic of the data you can take advantage of)

>
> > IF the data was a true polygonal coverage (i.e. strictly
> non-overlapping) then there is a faster approach in GEOSCoverageUniion.
> [1].  But if you are trying to find gaps then it's likely your data is not
> a true coverage.
>
> Interesting. I have one application which would definitely benefit
> from this. GEOS 3.8 looks to be a very exciting release..! One thing I
> couldn't determine from the coverage PR and the docs of the new
> operation is what happens when the data **isn't** a non-overlapping
> coverage. Is the result total garbage in this case or is an exception
> raised? Are holes/non-contiguous parts allowed?
>
> It looks like GEOSCoverageUnion is able to detect non-fully-noded inputs
[1] and overlaps [2], and throws an exception in this case.

I would think holes and non-contiguous parts are fine as input.

[1]
https://github.com/libgeos/geos/pull/158/files#diff-7cd9f5f9244e77677b80591da3d99207R94
[2]
https://github.com/libgeos/geos/pull/158/files#diff-7cd9f5f9244e77677b80591da3d99207R123
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20190828/4a34fa5b/attachment.html>

From nyall.dawson at gmail.com  Wed Aug 28 15:32:20 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 29 Aug 2019 08:32:20 +1000
Subject: [geos-devel] Any sneaky tricks for speeding up operations with
 complex geometries?
In-Reply-To: <CAK2ens3HwWRLjB+in+iheySiLL+Y0YD+0w10UyebD4pc5bwkaQ@mail.gmail.com>
References: <CAB28AshYVTDA1_zjpfg9Qg3X83DM3kCPoyBLu=BgtPNVKqd5NQ@mail.gmail.com>
 <CAK2ens1Yuv_Z9aJP1pJeknPFQO2C+6aVoAhyLNaZFwLkY7gP4g@mail.gmail.com>
 <CAB28AsgCwE+RMP2GjO6BfEm_3uSbn85a6yVWuJDi4sWGa8_dNA@mail.gmail.com>
 <CAK2ens3HwWRLjB+in+iheySiLL+Y0YD+0w10UyebD4pc5bwkaQ@mail.gmail.com>
Message-ID: <CAB28AsiaWnBJ9XuTnyNeVrwC_vKVqSFJsEPaovOm2XqUVv2vgw@mail.gmail.com>

On Thu, 29 Aug 2019 at 03:42, Martin Davis <mtnclimb at gmail.com> wrote:
>>
>>
>>
>> > About the union question, probably no good news there, unless your data has some very unlikely characteristics.  The GEOS Cascaded Union approach is remarkably efficient at unioning sets of overlapping polygons - which it sounds like you have.  The other alternative hack is to run buffer(0), but it is unlikely to be faster.
>>
>> Ok, thanks for the confirmation. Is there any benefit in "batching"
>> sets of geometries to cascaded union (e.g. unioning 100 geometries in
>> sets of 10, and then doing a final union of the result)? Or best to
>> throw EVERYTHING at GEOS and let it sort it out?
>
>
> Best to let GEOS handle it.  It uses a spatial index to choose sets of polygons to union. It's unlikely you could do this better (unless there is some characteristic of the data you can take advantage of)

Perfect, thanks Martin!

> It looks like GEOSCoverageUnion is able to detect non-fully-noded inputs [1] and overlaps [2], and throws an exception in this case.

And this is ideal too, great.

Nyall


>
> I would think holes and non-contiguous parts are fine as input.
>
> [1] https://github.com/libgeos/geos/pull/158/files#diff-7cd9f5f9244e77677b80591da3d99207R94
> [2] https://github.com/libgeos/geos/pull/158/files#diff-7cd9f5f9244e77677b80591da3d99207R123
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

