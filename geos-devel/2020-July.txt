From mtnclimb at gmail.com  Wed Jul  1 08:11:39 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 1 Jul 2020 08:11:39 -0700
Subject: [geos-devel] millions of lines intersection against single
	polygon
In-Reply-To: <CAB28AshZ0KqvXER6YmmQy+SjWkE2gT0hOcHxSMDYDnajX7aD6g@mail.gmail.com>
References: <CAB28Ash9wdddL2m9JGRChvspkcSDsXy-h58E34FYS_yY_XceGA@mail.gmail.com>
 <CAK2ens1ip=UPe9M2Nt5bMpGF7LYbv6_zeGWuOFFvNHEgSoWA6g@mail.gmail.com>
 <CAB28Asi9ACM-fgDOosF+M4v=iRh8DGRHCD4rxEx+XLD2OBdW5A@mail.gmail.com>
 <CACJ51z36uB=VxFmxd2TkpCzH-9KX7gSYqyJWgiy8k+yWBfOpug@mail.gmail.com>
 <CAK2ens3gn_4cFoKzzeQ3NQ2Lyd5+NqBjK9BhycBtFn=M+x-W-g@mail.gmail.com>
 <CAB28AshSW_sOuKp4k1RpQwGgskDA6H6ps95d+JVexMb734JNyg@mail.gmail.com>
 <CACJ51z23UOKz0KJs1o4RY3r3GoR4Rt7c_5nsSqAH6Go2CUHyLw@mail.gmail.com>
 <CAB28AshZ0KqvXER6YmmQy+SjWkE2gT0hOcHxSMDYDnajX7aD6g@mail.gmail.com>
Message-ID: <CAK2ens1kCJCZj0G-ePiQ9y1MizAzVgonvRrcXikNZUJb4W5_SA@mail.gmail.com>

On Tue, Jun 30, 2020 at 10:42 PM Nyall Dawson <nyall.dawson at gmail.com>
wrote:

> It's inspired by this question:
>
> https://gis.stackexchange.com/questions/365901/finding-longest-straight-line-within-polygon-in-qgis
> The routine is used for calculations like "what's the optimal
> placement for a airplane runway" in this polygon.
>

 Well that's pretty cool!  The diagrams from QGIS are very nice.  They
don't seem to mention performance - I assume it's not very fast using their
approach.

I'm continuing to think about the best way to optimize intersecting a line
with an arbitrary polygon (fully general, so can contain holes).  Am
zeroing in on a solution, but don't have it running yet.  It will be
interesting to see how much faster it is.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200701/35550ea7/attachment.html>

From geos-trac at osgeo.org  Wed Jul  1 09:35:55 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Jul 2020 16:35:55 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
Message-ID: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+--------------------------
 Reporter:  dannytoone   |      Owner:  geos-devel@…
     Type:  defect       |     Status:  new
 Priority:  major        |  Milestone:
Component:  Default      |    Version:  3.8.0
 Severity:  Significant  |   Keywords:
-------------------------+--------------------------
 This is a cross-posted bug from the PostGIS project, which is calling GEOS
 for the union function. Certain complex geometries can cause topology
 exceptions, triggering routines to try to simplify the geometries. This
 process cascades until all decimal precision is lost.

 https://trac.osgeo.org/postgis/ticket/4711

 Inside the ticket you'll find a synthetic data generation process (in
 PostGIS) which produces geometries which will reproduce the error.
 According to ''mdavis'':


     To follow on from what Paul has said, I tried the union using the new
 Overlay algorithm in JTS, and it works perfectly (and is pretty fast too).

     The new Overlay uses a more effective snapping approach to improve
 robustness. It doesn't require the aggressive precision reduction that
 PostGIS/GEOS is using now. So we're very hopeful this will solve most or
 all of these kinds of issues.

     As a side note, your synthetic data generation process seems like a
 great way to produce stress-testing datasets for overlay. This is actually
 tricky to do with synthetic data, so well done!

 I'm crossposting here so this synthetic dataset can be used for testing on
 the port of the Overlay algorith from JTS.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Wed Jul  1 10:28:18 2020
From: geos-trac at osgeo.org (GEOS)
Date: Wed, 01 Jul 2020 17:28:18 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
In-Reply-To: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
References: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
Message-ID: <063.e50f0480eb653d6436242fb04780686f@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+---------------------------
 Reporter:  dannytoone   |       Owner:  geos-devel@…
     Type:  defect       |      Status:  new
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.8.0
 Severity:  Significant  |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by robe):

 * milestone:   => 3.9.0


-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From nyall.dawson at gmail.com  Wed Jul  1 15:14:28 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 2 Jul 2020 08:14:28 +1000
Subject: [geos-devel] millions of lines intersection against single
	polygon
In-Reply-To: <CAK2ens1kCJCZj0G-ePiQ9y1MizAzVgonvRrcXikNZUJb4W5_SA@mail.gmail.com>
References: <CAB28Ash9wdddL2m9JGRChvspkcSDsXy-h58E34FYS_yY_XceGA@mail.gmail.com>
 <CAK2ens1ip=UPe9M2Nt5bMpGF7LYbv6_zeGWuOFFvNHEgSoWA6g@mail.gmail.com>
 <CAB28Asi9ACM-fgDOosF+M4v=iRh8DGRHCD4rxEx+XLD2OBdW5A@mail.gmail.com>
 <CACJ51z36uB=VxFmxd2TkpCzH-9KX7gSYqyJWgiy8k+yWBfOpug@mail.gmail.com>
 <CAK2ens3gn_4cFoKzzeQ3NQ2Lyd5+NqBjK9BhycBtFn=M+x-W-g@mail.gmail.com>
 <CAB28AshSW_sOuKp4k1RpQwGgskDA6H6ps95d+JVexMb734JNyg@mail.gmail.com>
 <CACJ51z23UOKz0KJs1o4RY3r3GoR4Rt7c_5nsSqAH6Go2CUHyLw@mail.gmail.com>
 <CAB28AshZ0KqvXER6YmmQy+SjWkE2gT0hOcHxSMDYDnajX7aD6g@mail.gmail.com>
 <CAK2ens1kCJCZj0G-ePiQ9y1MizAzVgonvRrcXikNZUJb4W5_SA@mail.gmail.com>
Message-ID: <CAB28AsiqW7pwvwC+bpg4UMACzu9b9o1m_d3Mat8YKH-ZiBLkuQ@mail.gmail.com>

On Thu, 2 Jul 2020 at 01:12, Martin Davis <mtnclimb at gmail.com> wrote:
>
> On Tue, Jun 30, 2020 at 10:42 PM Nyall Dawson <nyall.dawson at gmail.com> wrote:
>>
>> It's inspired by this question:
>> https://gis.stackexchange.com/questions/365901/finding-longest-straight-line-within-polygon-in-qgis
>> The routine is used for calculations like "what's the optimal
>> placement for a airplane runway" in this polygon.
>
>
>  Well that's pretty cool!  The diagrams from QGIS are very nice.  They don't seem to mention performance - I assume it's not very fast using their approach.

Yeah, it's definitely not going to be fast! The approach used in the
answer isn't actually correct either -- you can see in the
illustrations that there's longer possible lines. That's due to the
use of the "densified" vertices approach, where it's better (and
faster) to use the original polygon + ring vertices only instead. But
the general approach is fundamentally similar.

> I'm continuing to think about the best way to optimize intersecting a line with an arbitrary polygon (fully general, so can contain holes).  Am zeroing in on a solution, but don't have it running yet.  It will be interesting to see how much faster it is.

Do you think this algorithm is a candidate for inclusion in JTS/GEOS itself?

Nyall

> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

From mtnclimb at gmail.com  Thu Jul  2 09:23:34 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 2 Jul 2020 09:23:34 -0700
Subject: [geos-devel] millions of lines intersection against single
	polygon
In-Reply-To: <CAB28AsiqW7pwvwC+bpg4UMACzu9b9o1m_d3Mat8YKH-ZiBLkuQ@mail.gmail.com>
References: <CAB28Ash9wdddL2m9JGRChvspkcSDsXy-h58E34FYS_yY_XceGA@mail.gmail.com>
 <CAK2ens1ip=UPe9M2Nt5bMpGF7LYbv6_zeGWuOFFvNHEgSoWA6g@mail.gmail.com>
 <CAB28Asi9ACM-fgDOosF+M4v=iRh8DGRHCD4rxEx+XLD2OBdW5A@mail.gmail.com>
 <CACJ51z36uB=VxFmxd2TkpCzH-9KX7gSYqyJWgiy8k+yWBfOpug@mail.gmail.com>
 <CAK2ens3gn_4cFoKzzeQ3NQ2Lyd5+NqBjK9BhycBtFn=M+x-W-g@mail.gmail.com>
 <CAB28AshSW_sOuKp4k1RpQwGgskDA6H6ps95d+JVexMb734JNyg@mail.gmail.com>
 <CACJ51z23UOKz0KJs1o4RY3r3GoR4Rt7c_5nsSqAH6Go2CUHyLw@mail.gmail.com>
 <CAB28AshZ0KqvXER6YmmQy+SjWkE2gT0hOcHxSMDYDnajX7aD6g@mail.gmail.com>
 <CAK2ens1kCJCZj0G-ePiQ9y1MizAzVgonvRrcXikNZUJb4W5_SA@mail.gmail.com>
 <CAB28AsiqW7pwvwC+bpg4UMACzu9b9o1m_d3Mat8YKH-ZiBLkuQ@mail.gmail.com>
Message-ID: <CAK2ens1bTPMs_ZDzoQ1Qu=omFnx-8_4yMs=0AVcHYw8d-yuNEQ@mail.gmail.com>

On Wed, Jul 1, 2020 at 3:14 PM Nyall Dawson <nyall.dawson at gmail.com> wrote:

>
> > I'm continuing to think about the best way to optimize intersecting a
> line with an arbitrary polygon (fully general, so can contain holes).  Am
> zeroing in on a solution, but don't have it running yet.  It will be
> interesting to see how much faster it is.
>
> Do you think this algorithm is a candidate for inclusion in JTS/GEOS
> itself?
>

Yes, that's my plan, assuming there is a significant improvement in
performance over the more general OverlayNG algorithm (which I fully expect
to be the case).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200702/147571f9/attachment.html>

From geos-trac at osgeo.org  Thu Jul  2 22:11:41 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 03 Jul 2020 05:11:41 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
In-Reply-To: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
References: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
Message-ID: <063.580abc1e034f6ab0033897c05be9abc3@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+---------------------------
 Reporter:  dannytoone   |       Owner:  geos-devel@…
     Type:  defect       |      Status:  new
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.8.0
 Severity:  Significant  |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by mdavis):

 * Attachment "union-fail-small.wkb" added.

 Extract of lines from synthetic data which causes a failure during unary
 union (in JTS)

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jul  2 22:17:45 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 03 Jul 2020 05:17:45 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
In-Reply-To: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
References: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
Message-ID: <063.e0e8e3a589fcfd58dc7a7ea4363e74f0@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+---------------------------
 Reporter:  dannytoone   |       Owner:  geos-devel@…
     Type:  defect       |      Status:  new
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.8.0
 Severity:  Significant  |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by mdavis):

 * Attachment "union-fail-small-2.wkb" added.

 A synthetic data extract of lines which causes union to fail

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jul  2 22:18:18 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 03 Jul 2020 05:18:18 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
In-Reply-To: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
References: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
Message-ID: <063.8659603833617b84a9e6f1db70f80e7f@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+---------------------------
 Reporter:  dannytoone   |       Owner:  geos-devel@…
     Type:  defect       |      Status:  new
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.8.0
 Severity:  Significant  |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by mdavis):

 * Attachment "union-fail-small-3.wkb" added.

 A synthetic data extract of lines which causes union to fail - #3

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Thu Jul  2 22:20:25 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 03 Jul 2020 05:20:25 -0000
Subject: [geos-devel] [GEOS] #1034: Union topology exceptions lead to
 complete loss of floating point precision
In-Reply-To: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
References: <048.09792d1927f25cb0a8009c28ba2a9894@osgeo.org>
Message-ID: <063.2d42ff4d930d9f44acbc0b668731e7b2@osgeo.org>

#1034: Union topology exceptions lead to complete loss of floating point precision
-------------------------+---------------------------
 Reporter:  dannytoone   |       Owner:  geos-devel@…
     Type:  defect       |      Status:  new
 Priority:  major        |   Milestone:  3.9.0
Component:  Default      |     Version:  3.8.0
 Severity:  Significant  |  Resolution:
 Keywords:               |
-------------------------+---------------------------
Changes (by mdavis):

 * Attachment "union-fail-small-4.wkb" added.

 A synthetic data extract of lines which causes union to fail - #4

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1034>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Thu Jul 16 12:37:15 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 16 Jul 2020 12:37:15 -0700
Subject: [geos-devel] OverlayNG Port
In-Reply-To: <CACowWR2VFjgQy1O_g=gCxszBM-r+Vr0sT7rbO7zAVasZM58WUw@mail.gmail.com>
References: <CACowWR2VFjgQy1O_g=gCxszBM-r+Vr0sT7rbO7zAVasZM58WUw@mail.gmail.com>
Message-ID: <CACowWR0oOazFQrPy98oCBw+xnKPe52MruDtd9QTHZq=H9eCXXQ@mail.gmail.com>

Hey all,
I wanted to update you, as things have progressed.
98% of the port is complete, I have a few more classes to do, and should be
ready to merge.

https://docs.google.com/spreadsheets/d/15Jk5cNuYdxPPA9fXIxCreRJNlkQZjc2KdYaX-odW8So/edit#gid=0

The merge will add all the new classes and associated test cases, but will
not change user-facing functionality yet, as neither the CAPI nor the
default methods on Geometry have been hooked up to the new overlay.
The changes to hook up and expose the new behaviour will then proceed on a
new branch.
The new behaviour will be added behind a compile-time switch. It will
initially default to old but my goal will be to get enough testing that new
can be the default setting before the next release.
ATB,
P



On Thu, May 21, 2020 at 11:45 AM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Hey all,
> I've started on porting OverlayNG from JTS. I'm not very good at this,
> so I anticipate it will take quite some time :)
>
> If you would like to help, the working branch is here,
>
> https://github.com/libgeos/geos/tree/overlay-sr
>
> And I have set up a sheet to track work here,
>
>
> https://docs.google.com/spreadsheets/d/15Jk5cNuYdxPPA9fXIxCreRJNlkQZjc2KdYaX-odW8So/edit#gid=0
>
> And the global JTS diff against master is here,
>
> https://github.com/locationtech/jts/compare/master...dr-jts:overlay-sr
>
> May the force be with us,
> P
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200716/94487fe9/attachment.html>

From geos-trac at osgeo.org  Tue Jul 21 05:50:38 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 21 Jul 2020 12:50:38 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines hangs indefinitely on
	multipoint
Message-ID: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>

#1035: VoronoiLines hangs indefinitely on multipoint
------------------------+--------------------------
 Reporter:  robe        |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  blocker     |  Milestone:  3.9.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 I tested on 3.8.0 (still have to test on 3.8.1) but definitely an issue on
 GEOS head.


 {{{
 SELECT ST_VoronoiLines('MULTIPOINT(-10 40,5 40,20 40,35 40,50 40,-10 55,5
 55,20 55,35 55,50 55,-10 70,5 70,20 70,35 70,50 70)'::geometry, 20.1,
 'POINT(-11.1111111 40)'::geometry)
 }}}


 See related PostGIS ticket

 https://trac.osgeo.org/postgis/ticket/4726

 Raul's trace


 {{{
 #0  0x00007fc3eacf126c in geos::triangulate::quadedge::Vertex::isCCW
 (this=<optimized out>, b=..., c=...) at
 ../../../include/geos/triangulate/quadedge/Vertex.h:226
 #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9720,
 e=...) at Vertex.cpp:83
 #2  0x00007fc3eace807c in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSite
 (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
 #3  0x00007fc3eace7e4b in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSites
 (this=0x7ffe3cf96408, vertices=...) at
 IncrementalDelaunayTriangulator.cpp:40
 #4  0x00007fc3eace9f5d in geos::triangulate::VoronoiDiagramBuilder::create
 (this=0x7ffe3cf964b8) at VoronoiDiagramBuilder.cpp:93
 #5  0x00007fc3eacea45b in
 geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
 (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
 #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
 (this=<optimized out>) at geos_ts_c.cpp:3261
 #7  execute<GEOSVoronoiDiagram_r::$_188,
 (decltype(nullptr))0>(GEOSContextHandle_HS*,
 GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
 geos_ts_c.cpp:379
 #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
 env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
 geos_ts_c.cpp:3253
 #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
 env=0x7ffe3cf965c0, tolerance=20.100000000000001,
 output_edges=-1534355264) at lwgeom_geos.c:1926
 #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
 lwgeom_geos.c:3465
 #11 0x000055bba3c126e1 in ExecInterpExpr (state=<optimized out>,
 econtext=<optimized out>, isnull=0x7ffe3cf9675f) at execExprInterp.c:625
 #12 0x000055bba3c45874 in ExecEvalExprSwitchContext (state=0x55bba48fba48,
 econtext=0x55bba48fb770, isNull=0x7ffe3cf9675f) at
 ../../../src/include/executor/executor.h:307
 [...]

 (gdb) c
 Continuing.
 ^C
 Program received signal SIGINT, Interrupt.
 geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>, b=...,
 c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
 227                    > (b.p.y - p.y) * (c.p.x - p.x);
 (gdb) bt
 #0  geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>,
 b=..., c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
 #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9ee0,
 e=...) at Vertex.cpp:83
 #2  0x00007fc3eace807c in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSite
 (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
 #3  0x00007fc3eace7e4b in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSites
 (this=0x7ffe3cf96408, vertices=...) at
 IncrementalDelaunayTriangulator.cpp:40
 #4  0x00007fc3eace9f5d in geos::triangulate::VoronoiDiagramBuilder::create
 (this=0x7ffe3cf964b8) at VoronoiDiagramBuilder.cpp:93
 #5  0x00007fc3eacea45b in
 geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
 (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
 #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
 (this=<optimized out>) at geos_ts_c.cpp:3261
 #7  execute<GEOSVoronoiDiagram_r::$_188,
 (decltype(nullptr))0>(GEOSContextHandle_HS*,
 GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
 geos_ts_c.cpp:379
 #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
 env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
 geos_ts_c.cpp:3253
 #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
 env=0x7ffe3cf965c0, tolerance=20.100000000000001,
 output_edges=-1534355264) at lwgeom_geos.c:1926
 #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
 lwgeom_geos.c:3465
 [...]
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Jul 21 05:51:37 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 21 Jul 2020 12:51:37 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines hangs indefinitely on
	multipoint
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.f86811367794577a3033d957eb597206@osgeo.org>

#1035: VoronoiLines hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Description changed by robe:

Old description:

> I tested on 3.8.0 (still have to test on 3.8.1) but definitely an issue
> on GEOS head.
>

> {{{
> SELECT ST_VoronoiLines('MULTIPOINT(-10 40,5 40,20 40,35 40,50 40,-10 55,5
> 55,20 55,35 55,50 55,-10 70,5 70,20 70,35 70,50 70)'::geometry, 20.1,
> 'POINT(-11.1111111 40)'::geometry)
> }}}
>

> See related PostGIS ticket
>
> https://trac.osgeo.org/postgis/ticket/4726
>
> Raul's trace
>

> {{{
> #0  0x00007fc3eacf126c in geos::triangulate::quadedge::Vertex::isCCW
> (this=<optimized out>, b=..., c=...) at
> ../../../include/geos/triangulate/quadedge/Vertex.h:226
> #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9720,
> e=...) at Vertex.cpp:83
> #2  0x00007fc3eace807c in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSite
> (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
> #3  0x00007fc3eace7e4b in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSites
> (this=0x7ffe3cf96408, vertices=...) at
> IncrementalDelaunayTriangulator.cpp:40
> #4  0x00007fc3eace9f5d in
> geos::triangulate::VoronoiDiagramBuilder::create (this=0x7ffe3cf964b8) at
> VoronoiDiagramBuilder.cpp:93
> #5  0x00007fc3eacea45b in
> geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
> (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
> #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
> (this=<optimized out>) at geos_ts_c.cpp:3261
> #7  execute<GEOSVoronoiDiagram_r::$_188,
> (decltype(nullptr))0>(GEOSContextHandle_HS*,
> GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
> geos_ts_c.cpp:379
> #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
> env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
> geos_ts_c.cpp:3253
> #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
> env=0x7ffe3cf965c0, tolerance=20.100000000000001,
> output_edges=-1534355264) at lwgeom_geos.c:1926
> #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
> lwgeom_geos.c:3465
> #11 0x000055bba3c126e1 in ExecInterpExpr (state=<optimized out>,
> econtext=<optimized out>, isnull=0x7ffe3cf9675f) at execExprInterp.c:625
> #12 0x000055bba3c45874 in ExecEvalExprSwitchContext
> (state=0x55bba48fba48, econtext=0x55bba48fb770, isNull=0x7ffe3cf9675f) at
> ../../../src/include/executor/executor.h:307
> [...]
>
> (gdb) c
> Continuing.
> ^C
> Program received signal SIGINT, Interrupt.
> geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>, b=...,
> c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
> 227                    > (b.p.y - p.y) * (c.p.x - p.x);
> (gdb) bt
> #0  geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>,
> b=..., c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
> #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9ee0,
> e=...) at Vertex.cpp:83
> #2  0x00007fc3eace807c in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSite
> (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
> #3  0x00007fc3eace7e4b in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSites
> (this=0x7ffe3cf96408, vertices=...) at
> IncrementalDelaunayTriangulator.cpp:40
> #4  0x00007fc3eace9f5d in
> geos::triangulate::VoronoiDiagramBuilder::create (this=0x7ffe3cf964b8) at
> VoronoiDiagramBuilder.cpp:93
> #5  0x00007fc3eacea45b in
> geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
> (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
> #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
> (this=<optimized out>) at geos_ts_c.cpp:3261
> #7  execute<GEOSVoronoiDiagram_r::$_188,
> (decltype(nullptr))0>(GEOSContextHandle_HS*,
> GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
> geos_ts_c.cpp:379
> #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
> env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
> geos_ts_c.cpp:3253
> #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
> env=0x7ffe3cf965c0, tolerance=20.100000000000001,
> output_edges=-1534355264) at lwgeom_geos.c:1926
> #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
> lwgeom_geos.c:3465
> [...]
> }}}

New description:

 I tested on 3.8.0 and works fine there (still have to test on 3.8.1) but
 definitely an issue on GEOS head.


 {{{
 SELECT ST_VoronoiLines('MULTIPOINT(-10 40,5 40,20 40,35 40,50 40,-10 55,5
 55,20 55,35 55,50 55,-10 70,5 70,20 70,35 70,50 70)'::geometry, 20.1,
 'POINT(-11.1111111 40)'::geometry)
 }}}


 See related PostGIS ticket

 https://trac.osgeo.org/postgis/ticket/4726

 Raul's trace


 {{{
 #0  0x00007fc3eacf126c in geos::triangulate::quadedge::Vertex::isCCW
 (this=<optimized out>, b=..., c=...) at
 ../../../include/geos/triangulate/quadedge/Vertex.h:226
 #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9720,
 e=...) at Vertex.cpp:83
 #2  0x00007fc3eace807c in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSite
 (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
 #3  0x00007fc3eace7e4b in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSites
 (this=0x7ffe3cf96408, vertices=...) at
 IncrementalDelaunayTriangulator.cpp:40
 #4  0x00007fc3eace9f5d in geos::triangulate::VoronoiDiagramBuilder::create
 (this=0x7ffe3cf964b8) at VoronoiDiagramBuilder.cpp:93
 #5  0x00007fc3eacea45b in
 geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
 (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
 #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
 (this=<optimized out>) at geos_ts_c.cpp:3261
 #7  execute<GEOSVoronoiDiagram_r::$_188,
 (decltype(nullptr))0>(GEOSContextHandle_HS*,
 GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
 geos_ts_c.cpp:379
 #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
 env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
 geos_ts_c.cpp:3253
 #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
 env=0x7ffe3cf965c0, tolerance=20.100000000000001,
 output_edges=-1534355264) at lwgeom_geos.c:1926
 #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
 lwgeom_geos.c:3465
 #11 0x000055bba3c126e1 in ExecInterpExpr (state=<optimized out>,
 econtext=<optimized out>, isnull=0x7ffe3cf9675f) at execExprInterp.c:625
 #12 0x000055bba3c45874 in ExecEvalExprSwitchContext (state=0x55bba48fba48,
 econtext=0x55bba48fb770, isNull=0x7ffe3cf9675f) at
 ../../../src/include/executor/executor.h:307
 [...]

 (gdb) c
 Continuing.
 ^C
 Program received signal SIGINT, Interrupt.
 geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>, b=...,
 c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
 227                    > (b.p.y - p.y) * (c.p.x - p.x);
 (gdb) bt
 #0  geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>,
 b=..., c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
 #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9ee0,
 e=...) at Vertex.cpp:83
 #2  0x00007fc3eace807c in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSite
 (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
 #3  0x00007fc3eace7e4b in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSites
 (this=0x7ffe3cf96408, vertices=...) at
 IncrementalDelaunayTriangulator.cpp:40
 #4  0x00007fc3eace9f5d in geos::triangulate::VoronoiDiagramBuilder::create
 (this=0x7ffe3cf964b8) at VoronoiDiagramBuilder.cpp:93
 #5  0x00007fc3eacea45b in
 geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
 (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
 #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
 (this=<optimized out>) at geos_ts_c.cpp:3261
 #7  execute<GEOSVoronoiDiagram_r::$_188,
 (decltype(nullptr))0>(GEOSContextHandle_HS*,
 GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
 geos_ts_c.cpp:379
 #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
 env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
 geos_ts_c.cpp:3253
 #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
 env=0x7ffe3cf965c0, tolerance=20.100000000000001,
 output_edges=-1534355264) at lwgeom_geos.c:1926
 #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
 lwgeom_geos.c:3465
 [...]
 }}}

--

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Tue Jul 21 06:58:27 2020
From: geos-trac at osgeo.org (GEOS)
Date: Tue, 21 Jul 2020 13:58:27 -0000
Subject: [geos-devel] [GEOS] #1035: VoronoiLines and VoronoiPolygons
 hangs indefinitely on multipoint (was: VoronoiLines hangs indefinitely on
 multipoint)
In-Reply-To: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
References: <042.b44dd6231ab929e07a7dd7f0117df6d9@osgeo.org>
Message-ID: <057.febffee59b6da6ca97a8c6f8f9bff444@osgeo.org>

#1035: VoronoiLines and VoronoiPolygons hangs indefinitely on multipoint
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Description changed by robe:

Old description:

> I tested on 3.8.0 and works fine there (still have to test on 3.8.1) but
> definitely an issue on GEOS head.
>

> {{{
> SELECT ST_VoronoiLines('MULTIPOINT(-10 40,5 40,20 40,35 40,50 40,-10 55,5
> 55,20 55,35 55,50 55,-10 70,5 70,20 70,35 70,50 70)'::geometry, 20.1,
> 'POINT(-11.1111111 40)'::geometry)
> }}}
>

> See related PostGIS ticket
>
> https://trac.osgeo.org/postgis/ticket/4726
>
> Raul's trace
>

> {{{
> #0  0x00007fc3eacf126c in geos::triangulate::quadedge::Vertex::isCCW
> (this=<optimized out>, b=..., c=...) at
> ../../../include/geos/triangulate/quadedge/Vertex.h:226
> #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9720,
> e=...) at Vertex.cpp:83
> #2  0x00007fc3eace807c in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSite
> (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
> #3  0x00007fc3eace7e4b in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSites
> (this=0x7ffe3cf96408, vertices=...) at
> IncrementalDelaunayTriangulator.cpp:40
> #4  0x00007fc3eace9f5d in
> geos::triangulate::VoronoiDiagramBuilder::create (this=0x7ffe3cf964b8) at
> VoronoiDiagramBuilder.cpp:93
> #5  0x00007fc3eacea45b in
> geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
> (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
> #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
> (this=<optimized out>) at geos_ts_c.cpp:3261
> #7  execute<GEOSVoronoiDiagram_r::$_188,
> (decltype(nullptr))0>(GEOSContextHandle_HS*,
> GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
> geos_ts_c.cpp:379
> #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
> env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
> geos_ts_c.cpp:3253
> #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
> env=0x7ffe3cf965c0, tolerance=20.100000000000001,
> output_edges=-1534355264) at lwgeom_geos.c:1926
> #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
> lwgeom_geos.c:3465
> #11 0x000055bba3c126e1 in ExecInterpExpr (state=<optimized out>,
> econtext=<optimized out>, isnull=0x7ffe3cf9675f) at execExprInterp.c:625
> #12 0x000055bba3c45874 in ExecEvalExprSwitchContext
> (state=0x55bba48fba48, econtext=0x55bba48fb770, isNull=0x7ffe3cf9675f) at
> ../../../src/include/executor/executor.h:307
> [...]
>
> (gdb) c
> Continuing.
> ^C
> Program received signal SIGINT, Interrupt.
> geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>, b=...,
> c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
> 227                    > (b.p.y - p.y) * (c.p.x - p.x);
> (gdb) bt
> #0  geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>,
> b=..., c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
> #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9ee0,
> e=...) at Vertex.cpp:83
> #2  0x00007fc3eace807c in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSite
> (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
> #3  0x00007fc3eace7e4b in
> geos::triangulate::IncrementalDelaunayTriangulator::insertSites
> (this=0x7ffe3cf96408, vertices=...) at
> IncrementalDelaunayTriangulator.cpp:40
> #4  0x00007fc3eace9f5d in
> geos::triangulate::VoronoiDiagramBuilder::create (this=0x7ffe3cf964b8) at
> VoronoiDiagramBuilder.cpp:93
> #5  0x00007fc3eacea45b in
> geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
> (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
> #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
> (this=<optimized out>) at geos_ts_c.cpp:3261
> #7  execute<GEOSVoronoiDiagram_r::$_188,
> (decltype(nullptr))0>(GEOSContextHandle_HS*,
> GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
> geos_ts_c.cpp:379
> #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
> env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
> geos_ts_c.cpp:3253
> #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
> env=0x7ffe3cf965c0, tolerance=20.100000000000001,
> output_edges=-1534355264) at lwgeom_geos.c:1926
> #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
> lwgeom_geos.c:3465
> [...]
> }}}

New description:

 I tested on 3.8.0 and works fine there (still have to test on 3.8.1) but
 definitely an issue on GEOS head.


 {{{
 SELECT ST_VoronoiLines('MULTIPOINT(-10 40,5 40,20 40,35 40,50 40,-10 55,5
 55,20 55,35 55,50 55,-10 70,5 70,20 70,35 70,50 70)'::geometry, 20.1,
 'POINT(-11.1111111 40)'::geometry)
 }}}


 See related PostGIS ticket

 https://trac.osgeo.org/postgis/ticket/4726

 Raul's trace


 {{{
 #0  0x00007fc3eacf126c in geos::triangulate::quadedge::Vertex::isCCW
 (this=<optimized out>, b=..., c=...) at
 ../../../include/geos/triangulate/quadedge/Vertex.h:226
 #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9720,
 e=...) at Vertex.cpp:83
 #2  0x00007fc3eace807c in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSite
 (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
 #3  0x00007fc3eace7e4b in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSites
 (this=0x7ffe3cf96408, vertices=...) at
 IncrementalDelaunayTriangulator.cpp:40
 #4  0x00007fc3eace9f5d in geos::triangulate::VoronoiDiagramBuilder::create
 (this=0x7ffe3cf964b8) at VoronoiDiagramBuilder.cpp:93
 #5  0x00007fc3eacea45b in
 geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
 (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
 #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
 (this=<optimized out>) at geos_ts_c.cpp:3261
 #7  execute<GEOSVoronoiDiagram_r::$_188,
 (decltype(nullptr))0>(GEOSContextHandle_HS*,
 GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
 geos_ts_c.cpp:379
 #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
 env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
 geos_ts_c.cpp:3253
 #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
 env=0x7ffe3cf965c0, tolerance=20.100000000000001,
 output_edges=-1534355264) at lwgeom_geos.c:1926
 #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
 lwgeom_geos.c:3465
 #11 0x000055bba3c126e1 in ExecInterpExpr (state=<optimized out>,
 econtext=<optimized out>, isnull=0x7ffe3cf9675f) at execExprInterp.c:625
 #12 0x000055bba3c45874 in ExecEvalExprSwitchContext (state=0x55bba48fba48,
 econtext=0x55bba48fb770, isNull=0x7ffe3cf9675f) at
 ../../../src/include/executor/executor.h:307
 [...]

 (gdb) c
 Continuing.
 ^C
 Program received signal SIGINT, Interrupt.
 geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>, b=...,
 c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
 227                    > (b.p.y - p.y) * (c.p.x - p.x);
 (gdb) bt
 #0  geos::triangulate::quadedge::Vertex::isCCW (this=<optimized out>,
 b=..., c=...) at ../../../include/geos/triangulate/quadedge/Vertex.h:227
 #1  geos::triangulate::quadedge::Vertex::rightOf (this=0x55bba48b9ee0,
 e=...) at Vertex.cpp:83
 #2  0x00007fc3eace807c in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSite
 (this=<optimized out>, v=...) at IncrementalDelaunayTriangulator.cpp:90
 #3  0x00007fc3eace7e4b in
 geos::triangulate::IncrementalDelaunayTriangulator::insertSites
 (this=0x7ffe3cf96408, vertices=...) at
 IncrementalDelaunayTriangulator.cpp:40
 #4  0x00007fc3eace9f5d in geos::triangulate::VoronoiDiagramBuilder::create
 (this=0x7ffe3cf964b8) at VoronoiDiagramBuilder.cpp:93
 #5  0x00007fc3eacea45b in
 geos::triangulate::VoronoiDiagramBuilder::getDiagramEdges
 (this=0x7ffe3cf964b8, geomFact=...) at VoronoiDiagramBuilder.cpp:122
 #6  0x00007fc3eba9c83e in GEOSVoronoiDiagram_r::$_188::operator()
 (this=<optimized out>) at geos_ts_c.cpp:3261
 #7  execute<GEOSVoronoiDiagram_r::$_188,
 (decltype(nullptr))0>(GEOSContextHandle_HS*,
 GEOSVoronoiDiagram_r::$_188&&) (extHandle=0x55bba48b88b0, f=...) at
 geos_ts_c.cpp:379
 #8  GEOSVoronoiDiagram_r (extHandle=0x55bba48b88b0, g1=0x55bba48b6840,
 env=0x55bba48e6f40, tolerance=20.100000000000001, onlyEdges=1) at
 geos_ts_c.cpp:3253
 #9  0x00007fc3ebc02ecb in lwgeom_voronoi_diagram (g=<optimized out>,
 env=0x7ffe3cf965c0, tolerance=20.100000000000001,
 output_edges=-1534355264) at lwgeom_geos.c:1926
 #10 0x00007fc3ebb3267e in ST_Voronoi (fcinfo=0x55bba48fbb20) at
 lwgeom_geos.c:3465
 [...]
 }}}

 Same with VoronoiPolygons


 {{{
 SELECT ST_VoronoiPolygons('MULTIPOINT(-10 40,5 40,20 40,35 40,50 40,-10
 55,5 55,20 55,35 55,50 55,-10 70,5 70,20 70,35 70,50 70)'::geometry, 20.1,
 'POINT(-11.1111111 40)'::geometry)
 }}}

--

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1035#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Thu Jul 23 20:22:44 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 23 Jul 2020 20:22:44 -0700
Subject: [geos-devel] Request for Eyeballs
Message-ID: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>

I'm trying to clean up memory use in the new overlayng code, on the overlay-sr branch, and have come to an impasse. 

The valgrind report is here: https://gist.github.com/pramsey/d4be398473ea49ff4e241f5e7d4b855b

As I see it, there's one big set of NodedSegmenentString that are created by EdgeNodingBuilder and represent the un-noded input edges and stored in the member variable "inputEdges":

https://github.com/libgeos/geos/blob/overlay-sr/src/operation/overlayng/EdgeNodingBuilder.cpp#L78-L79

And those are cleaned up here:

https://github.com/libgeos/geos/blob/overlay-sr/include/geos/operation/overlayng/EdgeNodingBuilder.h#L203-L208

There's a second transient set of NodedSegmentString that are generated by the Noder, and come into existence here:

https://github.com/libgeos/geos/blob/overlay-sr/src/operation/overlayng/EdgeNodingBuilder.cpp#L98

And then disappear almost immediately afterwards here:

https://github.com/libgeos/geos/blob/overlay-sr/src/operation/overlayng/EdgeNodingBuilder.cpp#L103-L105

The valgrind report seems to implicate this second lifecycle in a huge leak and yet, it seems really self-contained. The MCIndexNoder generates some new NodedSegmentString, the ValidatingNoder just holds onto the list for a while, then passes it on to the EdgeNodingBuilder that uses them to generate some Edges, then deletes them.

The latest iteration of the branch is here. https://github.com/libgeos/geos/tree/overlay-sr/

Any and all feedbackk most appreciated,

P

From strk at kbt.io  Fri Jul 24 03:07:44 2020
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 24 Jul 2020 12:07:44 +0200
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
Message-ID: <20200724100744.GB3895@lif>

On Thu, Jul 23, 2020 at 08:22:44PM -0700, Paul Ramsey wrote:
> I'm trying to clean up memory use in the new overlayng code, on the overlay-sr branch, and have come to an impasse. 
> 
> The valgrind report is here: https://gist.github.com/pramsey/d4be398473ea49ff4e241f5e7d4b855b

That report contains multiple leaks, which are reported from smaller
to bigger, so I'd start at the end of it:

==6519== 59,784,992 (40,104 direct, 59,744,888 indirect) bytes in 1,671 blocks are definitely lost in loss record 8,846 of 8,847
==6519==    at 0x4C29203: operator new(unsigned long) (vg_replace_malloc.c:334)
==6519==    by 0x528EBAA: geos::noding::NodedSegmentString::getNodedSubstrings(std::vector<geos::noding::SegmentString*, std::allocator<geos::noding::SegmentString*> > const&) (NodedSegmentString.cpp:148)

The ownership of those SegmentStrings is not documented in
NodedSegmentString.h, which would help. My impression is that
those segment strings should be shared pointers, to overcome this
long standing issue (it was a problem before snaprounding as well).

I think the caller should take ownership of those objects.
In this case, the caller is ValidatingNoder, which is storing
those into its 'nodedSS' member, which is an heap-allocated
vector. That vector is returned by
ValidatingNoder::getNodedSubstrings() which is also undocumented
but is probably expected to pass ownership back to its own caller.

I suggest you destroy the vector and its contents IFF
getNodedSubstring is never called, which may be the case here.

Or (bigger change) use shared pointers.

PS: I like the DEVELOPER-NOTES.md file

--strk;

From strk at kbt.io  Fri Jul 24 06:35:49 2020
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 24 Jul 2020 15:35:49 +0200
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200724100744.GB3895@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif>
Message-ID: <20200724133549.GG3895@lif>

Paul, FYI: I've pushed some fixes to that branch. Keep this in mind
before you change your local copy too much. It's just some override
keywords and a fix to autotools scripts at time of writing.

The code, in its current form, passes `make check` (not sure how much
of the new code `make check` actually tests, but I saw some unit test).

--strk;

On Fri, Jul 24, 2020 at 12:07:44PM +0200, Sandro Santilli wrote:
> On Thu, Jul 23, 2020 at 08:22:44PM -0700, Paul Ramsey wrote:
> > I'm trying to clean up memory use in the new overlayng code, on the overlay-sr branch, and have come to an impasse. 
> > 
> > The valgrind report is here: https://gist.github.com/pramsey/d4be398473ea49ff4e241f5e7d4b855b
> 
> That report contains multiple leaks, which are reported from smaller
> to bigger, so I'd start at the end of it:
> 
> ==6519== 59,784,992 (40,104 direct, 59,744,888 indirect) bytes in 1,671 blocks are definitely lost in loss record 8,846 of 8,847
> ==6519==    at 0x4C29203: operator new(unsigned long) (vg_replace_malloc.c:334)
> ==6519==    by 0x528EBAA: geos::noding::NodedSegmentString::getNodedSubstrings(std::vector<geos::noding::SegmentString*, std::allocator<geos::noding::SegmentString*> > const&) (NodedSegmentString.cpp:148)
> 
> The ownership of those SegmentStrings is not documented in
> NodedSegmentString.h, which would help. My impression is that
> those segment strings should be shared pointers, to overcome this
> long standing issue (it was a problem before snaprounding as well).
> 
> I think the caller should take ownership of those objects.
> In this case, the caller is ValidatingNoder, which is storing
> those into its 'nodedSS' member, which is an heap-allocated
> vector. That vector is returned by
> ValidatingNoder::getNodedSubstrings() which is also undocumented
> but is probably expected to pass ownership back to its own caller.
> 
> I suggest you destroy the vector and its contents IFF
> getNodedSubstring is never called, which may be the case here.
> 
> Or (bigger change) use shared pointers.
> 
> PS: I like the DEVELOPER-NOTES.md file
> 
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel

From strk at kbt.io  Fri Jul 24 07:50:54 2020
From: strk at kbt.io (Sandro Santilli)
Date: Fri, 24 Jul 2020 16:50:54 +0200
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200724100744.GB3895@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif>
Message-ID: <20200724145054.GA121521@lif>

On Fri, Jul 24, 2020 at 12:07:44PM +0200, Sandro Santilli wrote:
> 
> The ownership of those SegmentStrings is not documented in
> NodedSegmentString.h, which would help. My impression is that
> those segment strings should be shared pointers, to overcome this
> long standing issue (it was a problem before snaprounding as well).

More information. I think the primary problem with this API is that
the ownership of SegmentString in Noder.h is not properly documented.

Comments are even clearly expressing the confusion:

     * Some Noders may add all these nodes to the input SegmentStrings;
     * others may only add some or none at all.

The methods defined for a Noder are:

  virtual void computeNodes(std::vector<SegmentString*>* segStrings) = 0;
  virtual std::vector<SegmentString*>* getNodedSubstrings() const = 0;

What isn't clear is:

  - Who owns the SegmentString passed to computeNodes ?
  - Who owns the SegmentString returned by getNodedSubstrings ?
  - Can the same SegmentString be present in both input and output
    containers ?

I think these questions should be answered with proper documentation
in that class, and then we need to make sure all subclass implement
the documented semantic properly.

Using shared pointers of those SegmentStrings may help simplifying
the implementations, with the downside of some more overhead. But
other implementations could be made to work, as long as it is clear
who is responsible for what...

--strk;

From mtnclimb at gmail.com  Sat Jul 25 07:12:08 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Sat, 25 Jul 2020 07:12:08 -0700
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200724145054.GA121521@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724145054.GA121521@lif>
Message-ID: <CAK2ens0aiyiEW2sfoS1DaJVXouyfm5umzcaprSjaFw0CRJo+-w@mail.gmail.com>

Good observations, Sandro.  My thoughts are below.

On Fri, Jul 24, 2020 at 8:01 AM Sandro Santilli <strk at kbt.io> wrote:

>
> The methods defined for a Noder are:
>
>   virtual void computeNodes(std::vector<SegmentString*>* segStrings) = 0;
>   virtual std::vector<SegmentString*>* getNodedSubstrings() const = 0;
>
> What isn't clear is:
>
>   - Who owns the SegmentString passed to computeNodes ?
>   - Who owns the SegmentString returned by getNodedSubstrings ?
>   - Can the same SegmentString be present in both input and output
>     containers ?
>

- Noders are a process, not a container.  As such, they should not own
anything.
-- The caller owns the NodedSegmentStrings passed in to the Noder.
-- The caller owns the SegmentStrings returned by getNodedSubstrings

- getNodedSubstrings should always return new SegmentStrings, even if they
are just a copy of an input SegmentString (i.e. no nodes were found and
added to the original NodedSegmentString (This will make it easier to
handle the lifecycle of the inputs and outputs I think?)

I'm not sure if JTS/GEOS obeys these semantics. In JTS it doesn't matter
much, but GEOS should be fixed to have this contract.

Furthermore:

The fact that getNodedSubstrings returns NodedSegmentStrings is an mistake
caused by an unfortunate shortcut in JTS a long time ago.  In fact, almost
all usage of getNodedSubstrings only requires a BasicSegmentString to be
returned (which is a much simpler/smaller object).  Paul & I have discussed
fixing this in JTS and GEOS, and will likely do so during or after the
delivery of OverlayNG.  Also, the name of the method is then confusing, and
will be changed as well (perhaps to getSubstrings or splitSubstrings or
some such)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200725/ddcf91cf/attachment.html>

From strk at kbt.io  Sat Jul 25 09:40:53 2020
From: strk at kbt.io (Sandro Santilli)
Date: Sat, 25 Jul 2020 18:40:53 +0200
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <CAK2ens0aiyiEW2sfoS1DaJVXouyfm5umzcaprSjaFw0CRJo+-w@mail.gmail.com>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724145054.GA121521@lif>
 <CAK2ens0aiyiEW2sfoS1DaJVXouyfm5umzcaprSjaFw0CRJo+-w@mail.gmail.com>
Message-ID: <20200725164053.GA13853@lif>

On Sat, Jul 25, 2020 at 07:12:08AM -0700, Martin Davis wrote:
> Good observations, Sandro.  My thoughts are below.
> 
> On Fri, Jul 24, 2020 at 8:01 AM Sandro Santilli <strk at kbt.io> wrote:
> 
> >
> > The methods defined for a Noder are:
> >
> >   virtual void computeNodes(std::vector<SegmentString*>* segStrings) = 0;
> >   virtual std::vector<SegmentString*>* getNodedSubstrings() const = 0;
> >
> > What isn't clear is:
> >
> >   - Who owns the SegmentString passed to computeNodes ?
> >   - Who owns the SegmentString returned by getNodedSubstrings ?
> >   - Can the same SegmentString be present in both input and output
> >     containers ?
> >
> 
> - Noders are a process, not a container.  As such, they should not own
> anything.
> -- The caller owns the NodedSegmentStrings passed in to the Noder.
> -- The caller owns the SegmentStrings returned by getNodedSubstrings
> 
> - getNodedSubstrings should always return new SegmentStrings, even if they
> are just a copy of an input SegmentString (i.e. no nodes were found and
> added to the original NodedSegmentString (This will make it easier to
> handle the lifecycle of the inputs and outputs I think?)
> 
> I'm not sure if JTS/GEOS obeys these semantics. In JTS it doesn't matter
> much, but GEOS should be fixed to have this contract.

For sure it should be fixed to DOCUMENT this contract.
I think current (the ones reachable from C-API) do respect it,
which means that some of them have to DESTROY SegmentString objects
that only exist temporary (think recursive noder) because those
objects would never be returned back to caller, thus woule be left
leaking.

--strk;

From mtnclimb at gmail.com  Sat Jul 25 16:51:56 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Sat, 25 Jul 2020 16:51:56 -0700
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200725164053.GA13853@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724145054.GA121521@lif>
 <CAK2ens0aiyiEW2sfoS1DaJVXouyfm5umzcaprSjaFw0CRJo+-w@mail.gmail.com>
 <20200725164053.GA13853@lif>
Message-ID: <CAK2ens3i9aZSk-5NsV-hZvZZCVK15xHGe-2WLhY_oAR4FfuN_A@mail.gmail.com>

On Sat, Jul 25, 2020 at 9:41 AM Sandro Santilli <strk at kbt.io> wrote:

> On Sat, Jul 25, 2020 at 07:12:08AM -0700, Martin Davis wrote:
> > Good observations, Sandro.  My thoughts are below.
> >
> > On Fri, Jul 24, 2020 at 8:01 AM Sandro Santilli <strk at kbt.io> wrote:
> >
> > >
> > > The methods defined for a Noder are:
> > >
> > >   virtual void computeNodes(std::vector<SegmentString*>* segStrings) =
> 0;
> > >   virtual std::vector<SegmentString*>* getNodedSubstrings() const = 0;
> > >
> > > What isn't clear is:
> > >
> > >   - Who owns the SegmentString passed to computeNodes ?
> > >   - Who owns the SegmentString returned by getNodedSubstrings ?
> > >   - Can the same SegmentString be present in both input and output
> > >     containers ?
> > >
> >
> > - Noders are a process, not a container.  As such, they should not own
> > anything.
> > -- The caller owns the NodedSegmentStrings passed in to the Noder.
> > -- The caller owns the SegmentStrings returned by getNodedSubstrings
> >
> > - getNodedSubstrings should always return new SegmentStrings, even if
> they
> > are just a copy of an input SegmentString (i.e. no nodes were found and
> > added to the original NodedSegmentString (This will make it easier to
> > handle the lifecycle of the inputs and outputs I think?)
> >
> > I'm not sure if JTS/GEOS obeys these semantics. In JTS it doesn't matter
> > much, but GEOS should be fixed to have this contract.
>
> For sure it should be fixed to DOCUMENT this contract.
>

Definitely. Using C++ language constructs, if possible.

I think current (the ones reachable from C-API) do respect it,
> which means that some of them have to DESTROY SegmentString objects
> that only exist temporary (think recursive noder) because those
> objects would never be returned back to caller, thus woule be left
> leaking.
>

Well, yes.  The new noders (SnapRouningNoder and SnappingNoder) are not
recursive, so don't have this problem.  The goal I think is to eliminate
other kinds of noding, since they should be superseded.  But I realize that
might have to be a long-term goal.

Anyway, if there are noders with that behaviour, don't they already handle
their own memory?  Or are there leaks in old code?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200725/a335e7cb/attachment.html>

From pramsey at cleverelephant.ca  Mon Jul 27 12:46:55 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 27 Jul 2020 12:46:55 -0700
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200724133549.GG3895@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724133549.GG3895@lif>
Message-ID: <10212FEA-3582-4AE3-92C6-CEDFE851B179@cleverelephant.ca>



> On Jul 24, 2020, at 6:35 AM, Sandro Santilli <strk at kbt.io> wrote:
> 
> Paul, FYI: I've pushed some fixes to that branch. Keep this in mind
> before you change your local copy too much. It's just some override
> keywords and a fix to autotools scripts at time of writing.

Pushed to github or osgeo? I'm working on github. I don't see any changes.

> The code, in its current form, passes `make check` (not sure how much
> of the new code `make check` actually tests, but I saw some unit test).

Autotools make check might be missing some of the new XML files, as they have to be manually added still. All unit tests should run in both builds. 

P

> 
> --strk;
> 
> On Fri, Jul 24, 2020 at 12:07:44PM +0200, Sandro Santilli wrote:
>> On Thu, Jul 23, 2020 at 08:22:44PM -0700, Paul Ramsey wrote:
>>> I'm trying to clean up memory use in the new overlayng code, on the overlay-sr branch, and have come to an impasse. 
>>> 
>>> The valgrind report is here: https://gist.github.com/pramsey/d4be398473ea49ff4e241f5e7d4b855b
>> 
>> That report contains multiple leaks, which are reported from smaller
>> to bigger, so I'd start at the end of it:
>> 
>> ==6519== 59,784,992 (40,104 direct, 59,744,888 indirect) bytes in 1,671 blocks are definitely lost in loss record 8,846 of 8,847
>> ==6519==    at 0x4C29203: operator new(unsigned long) (vg_replace_malloc.c:334)
>> ==6519==    by 0x528EBAA: geos::noding::NodedSegmentString::getNodedSubstrings(std::vector<geos::noding::SegmentString*, std::allocator<geos::noding::SegmentString*> > const&) (NodedSegmentString.cpp:148)
>> 
>> The ownership of those SegmentStrings is not documented in
>> NodedSegmentString.h, which would help. My impression is that
>> those segment strings should be shared pointers, to overcome this
>> long standing issue (it was a problem before snaprounding as well).
>> 
>> I think the caller should take ownership of those objects.
>> In this case, the caller is ValidatingNoder, which is storing
>> those into its 'nodedSS' member, which is an heap-allocated
>> vector. That vector is returned by
>> ValidatingNoder::getNodedSubstrings() which is also undocumented
>> but is probably expected to pass ownership back to its own caller.
>> 
>> I suggest you destroy the vector and its contents IFF
>> getNodedSubstring is never called, which may be the case here.
>> 
>> Or (bigger change) use shared pointers.
>> 
>> PS: I like the DEVELOPER-NOTES.md file
>> 
>> --strk;
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Mon Jul 27 14:49:24 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Mon, 27 Jul 2020 14:49:24 -0700
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200724145054.GA121521@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724145054.GA121521@lif>
Message-ID: <CACowWR0mg+x7+5BFhpLOVj3M+TK0DXqN0heQh+kmX1fq7hveDw@mail.gmail.com>

I'm not sure moving the std::vector<SegmentString*> to shared pointers will
be necessary, simply using std::vector<unique_ptr<SegmentString>> is
probably sufficient. The "real problem" as you note is just that the
contract isn't explicit anywhere. I think that the move the unique_ptr
across other parts of the API avoided this chunk of code because it was and
remains pretty gnarly. I did not want to refactor it because I'm dealing
with enough mess just bringing in the new code.
A refactor is on my list now though, including some work to reduce some of
the huge amount of copying that goes on under the covers, some of it
unnecessary

In other news, I have identified and removed the memory leaks, everything I
run through valgrind is now clean. So, onwards towards merging the branch
to master, once I get CI green.

P.

On Fri, Jul 24, 2020 at 8:00 AM Sandro Santilli <strk at kbt.io> wrote:

> On Fri, Jul 24, 2020 at 12:07:44PM +0200, Sandro Santilli wrote:
> >
> > The ownership of those SegmentStrings is not documented in
> > NodedSegmentString.h, which would help. My impression is that
> > those segment strings should be shared pointers, to overcome this
> > long standing issue (it was a problem before snaprounding as well).
>
> More information. I think the primary problem with this API is that
> the ownership of SegmentString in Noder.h is not properly documented.
>
> Comments are even clearly expressing the confusion:
>
>      * Some Noders may add all these nodes to the input SegmentStrings;
>      * others may only add some or none at all.
>
> The methods defined for a Noder are:
>
>   virtual void computeNodes(std::vector<SegmentString*>* segStrings) = 0;
>   virtual std::vector<SegmentString*>* getNodedSubstrings() const = 0;
>
> What isn't clear is:
>
>   - Who owns the SegmentString passed to computeNodes ?
>   - Who owns the SegmentString returned by getNodedSubstrings ?
>   - Can the same SegmentString be present in both input and output
>     containers ?
>
> I think these questions should be answered with proper documentation
> in that class, and then we need to make sure all subclass implement
> the documented semantic properly.
>
> Using shared pointers of those SegmentStrings may help simplifying
> the implementations, with the downside of some more overhead. But
> other implementations could be made to work, as long as it is clear
> who is responsible for what...
>
> --strk;
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200727/38781bd4/attachment.html>

From strk at kbt.io  Tue Jul 28 14:08:13 2020
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 28 Jul 2020 23:08:13 +0200
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <10212FEA-3582-4AE3-92C6-CEDFE851B179@cleverelephant.ca>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724133549.GG3895@lif>
 <10212FEA-3582-4AE3-92C6-CEDFE851B179@cleverelephant.ca>
Message-ID: <20200728210813.GA4980@lif>

On Mon, Jul 27, 2020 at 12:46:55PM -0700, Paul Ramsey wrote:
> 
> 
> > On Jul 24, 2020, at 6:35 AM, Sandro Santilli <strk at kbt.io> wrote:
> > 
> > Paul, FYI: I've pushed some fixes to that branch. Keep this in mind
> > before you change your local copy too much. It's just some override
> > keywords and a fix to autotools scripts at time of writing.
> 
> Pushed to github or osgeo? I'm working on github. I don't see any changes.

To github/overlay-sr
You should see changes when you `git pull`
(I suggest adding a `--rebase` switch to reduce noise)

--strk;

From strk at kbt.io  Tue Jul 28 14:22:54 2020
From: strk at kbt.io (Sandro Santilli)
Date: Tue, 28 Jul 2020 23:22:54 +0200
Subject: [geos-devel] Request for Eyeballs
In-Reply-To: <20200728210813.GA4980@lif>
References: <1C664FC8-C100-4638-804C-E35E6D84FFD0@cleverelephant.ca>
 <20200724100744.GB3895@lif> <20200724133549.GG3895@lif>
 <10212FEA-3582-4AE3-92C6-CEDFE851B179@cleverelephant.ca>
 <20200728210813.GA4980@lif>
Message-ID: <20200728212254.GB4980@lif>

On Tue, Jul 28, 2020 at 11:08:13PM +0200, Sandro Santilli wrote:
> On Mon, Jul 27, 2020 at 12:46:55PM -0700, Paul Ramsey wrote:
> > 
> > 
> > > On Jul 24, 2020, at 6:35 AM, Sandro Santilli <strk at kbt.io> wrote:
> > > 
> > > Paul, FYI: I've pushed some fixes to that branch. Keep this in mind
> > > before you change your local copy too much. It's just some override
> > > keywords and a fix to autotools scripts at time of writing.
> > 
> > Pushed to github or osgeo? I'm working on github. I don't see any changes.
> 
> To github/overlay-sr
> You should see changes when you `git pull`
> (I suggest adding a `--rebase` switch to reduce noise)

I just realized I did not really push the changes yet.
Now I did (thanks `git reflog` for helping me find those
changes after many branch switching).

--strk;

From pramsey at cleverelephant.ca  Tue Jul 28 15:52:33 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 28 Jul 2020 15:52:33 -0700
Subject: [geos-devel] overlay-sr merged to master
Message-ID: <30A6EBB1-63D2-43A8-8733-EA819EB9465B@cleverelephant.ca>

FYI all, it's all green on CI and merged to master.
What does this mean?
Nothing, it's there and has tests and works, but no production code paths run through the new overlay code yet.
Next step will be adding some compile-time options to substitute the old overlay code with the new, so we can test underneath things like PostGIS etc.
Folks interested in rolling their own can look at the "areaDelta" method in XMLTester for a call point that uses all the new magic (standard overlay, followed by snapped overlay in case of failure, followed by snap-rounded overlay in case of yet more failure).
If you are interested in snaprounded overlay, look at the "intersectionng" op in XMLTester.
More to come!
P.

From lr at pcorp.us  Tue Jul 28 17:05:24 2020
From: lr at pcorp.us (Regina Obe)
Date: Tue, 28 Jul 2020 20:05:24 -0400
Subject: [geos-devel] overlay-sr merged to master
In-Reply-To: <30A6EBB1-63D2-43A8-8733-EA819EB9465B@cleverelephant.ca>
References: <30A6EBB1-63D2-43A8-8733-EA819EB9465B@cleverelephant.ca>
Message-ID: <005501d6653b$f5d8cbb0$e18a6310$@pcorp.us>

Enough yapping.  Put in the compile-time options so we can start crashing stuff.

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
> Of Paul Ramsey
> Sent: Tuesday, July 28, 2020 6:53 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: [geos-devel] overlay-sr merged to master
> 
> FYI all, it's all green on CI and merged to master.
> What does this mean?
> Nothing, it's there and has tests and works, but no production code paths run
> through the new overlay code yet.
> Next step will be adding some compile-time options to substitute the old
> overlay code with the new, so we can test underneath things like PostGIS
> etc.
> Folks interested in rolling their own can look at the "areaDelta" method in
> XMLTester for a call point that uses all the new magic (standard overlay,
> followed by snapped overlay in case of failure, followed by snap-rounded
> overlay in case of yet more failure).
> If you are interested in snaprounded overlay, look at the "intersectionng" op
> in XMLTester.
> More to come!
> P.
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From rmrodriguez at carto.com  Wed Jul 29 01:05:19 2020
From: rmrodriguez at carto.com (rmrodriguez at carto.com)
Date: Wed, 29 Jul 2020 10:05:19 +0200
Subject: [geos-devel] overlay-sr merged to master
In-Reply-To: <005501d6653b$f5d8cbb0$e18a6310$@pcorp.us>
References: <30A6EBB1-63D2-43A8-8733-EA819EB9465B@cleverelephant.ca>
 <005501d6653b$f5d8cbb0$e18a6310$@pcorp.us>
Message-ID: <CAM6_UM7f6egzCGrkkd92bGWJhhdhQ_Xm1ph7pmjdDi=OjXx0=Q@mail.gmail.com>

Great job. Thanks a lot, Paul and Martin.

I expect to have some spare time these following weeks, so with the
compile time switch I could start crashing Postgis and reporting
issues (or even PRs if I can).

On Wed, Jul 29, 2020 at 2:05 AM Regina Obe <lr at pcorp.us> wrote:
>
> Enough yapping.  Put in the compile-time options so we can start crashing stuff.
>
> > -----Original Message-----
> > From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
> > Of Paul Ramsey
> > Sent: Tuesday, July 28, 2020 6:53 PM
> > To: GEOS Development List <geos-devel at lists.osgeo.org>
> > Subject: [geos-devel] overlay-sr merged to master
> >
> > FYI all, it's all green on CI and merged to master.
> > What does this mean?
> > Nothing, it's there and has tests and works, but no production code paths run
> > through the new overlay code yet.
> > Next step will be adding some compile-time options to substitute the old
> > overlay code with the new, so we can test underneath things like PostGIS
> > etc.
> > Folks interested in rolling their own can look at the "areaDelta" method in
> > XMLTester for a call point that uses all the new magic (standard overlay,
> > followed by snapped overlay in case of failure, followed by snap-rounded
> > overlay in case of yet more failure).
> > If you are interested in snaprounded overlay, look at the "intersectionng" op
> > in XMLTester.
> > More to come!
> > P.
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



--
Raúl Marín Rodríguez
carto.com

From mtnclimb at gmail.com  Wed Jul 29 09:06:28 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 29 Jul 2020 09:06:28 -0700
Subject: [geos-devel] overlay-sr merged to master
In-Reply-To: <CAM6_UM7f6egzCGrkkd92bGWJhhdhQ_Xm1ph7pmjdDi=OjXx0=Q@mail.gmail.com>
References: <30A6EBB1-63D2-43A8-8733-EA819EB9465B@cleverelephant.ca>
 <005501d6653b$f5d8cbb0$e18a6310$@pcorp.us>
 <CAM6_UM7f6egzCGrkkd92bGWJhhdhQ_Xm1ph7pmjdDi=OjXx0=Q@mail.gmail.com>
Message-ID: <CAK2ens2ASTnNsGzTDWZ7M0Y10jhGrry1Eh7C-AKUbwtNk-Qc3w@mail.gmail.com>

On Wed, Jul 29, 2020 at 1:05 AM <rmrodriguez at carto.com> wrote:

>
> I expect to have some spare time these following weeks, so with the
> compile time switch I could start crashing Postgis and reporting
> issues (or even PRs if I can).
>

 Great...

In particular, I'm keen to see if the clipping optimization for
intersection, along with snap-rounding, make OverlayNG a viable (or
hopefully faster) path for MVT tile generation.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200729/97184828/attachment.html>

From pramsey at cleverelephant.ca  Wed Jul 29 12:53:36 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 29 Jul 2020 12:53:36 -0700
Subject: [geos-devel] OverlayNG for Testing
Message-ID: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>

OK, as requested it is now possible to test OverlayNG using C clients.

https://github.com/libgeos/geos/commit/c6774a6a48b2

For autotools, use

  --enable-overlayng

For cmake, add

  -DDISABLE_OVERLAYNG=OFF

No guarantees, this is completely untested, except insofar as it all still compiles in the default state (which is overlayng off).

The goal, of course, is to get to a point before release where the default state can be overlayng on.

Some things we already know don't work:

- 3D! GEOS uniquely has supported adding in Z coordinates to introduced coordinates, and that code hasn't been added to JTS (and thus overlayng). How this will affect existing expectations for 3D output is unknown, but it's sure to be broken in some way.
- Union on linestrings! OverlayNG extracts maximal length linestrings from the unioned graph. Old overlay extracted minimal length linestrings. This change is probably "for the best" but it's a change which might impact existing logic.

ATB,

P

From lr at pcorp.us  Wed Jul 29 13:42:45 2020
From: lr at pcorp.us (Regina Obe)
Date: Wed, 29 Jul 2020 16:42:45 -0400
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
Message-ID: <003b01d665e8$d1830110$74890330$@pcorp.us>

Are these expected to fail?

344: Files: 1
344: Tests: 143
344: Failed: 0
344: Succeeded: 143
344/344 Test #344: validate-TestRelatePP ....................................   Passed    0.01 sec

92% tests passed, 28 tests failed out of 344

Total Test time (real) =  12.45 sec

The following tests FAILED:
         46 - unit-capi-GEOSGeom_setPrecision (Failed)
         52 - unit-capi-GEOSIntersection (Failed)
         57 - unit-capi-GEOSMakeValid (Failed)
         79 - unit-capi-GEOSUnaryUnion (Failed)
        148 - unit-operation-geounion-CascadedPolygonUnion (Failed)
        152 - unit-operation-linemerge-LineMerger (Failed)
        154 - unit-operation-overlay-OverlayOpUnion (Failed)
        200 - general-TestFunctionAA (Failed)
        201 - general-TestFunctionAAPrec (Failed)
        202 - general-TestFunctionLA (Failed)
        203 - general-TestFunctionLAPrec (Failed)
        204 - general-TestFunctionLL (Failed)
        205 - general-TestFunctionLLPrec (Failed)
        207 - general-TestFunctionPL (Failed)
        234 - general-TestUnaryUnion (Failed)
        246 - issue-issue-geos-350 (Failed)
        248 - issue-issue-geos-358 (Failed)
        249 - issue-issue-geos-360 (Failed)
        254 - issue-issue-geos-459 (Failed)
        255 - issue-issue-geos-488 (Failed)
        256 - issue-issue-geos-527 (Failed)
        259 - issue-issue-geos-586 (Failed)
        260 - issue-issue-geos-599 (Failed)
        262 - issue-issue-geos-615 (Failed)
        264 - issue-issue-geos-837 (Failed)
        265 - issue-issue-geos-838 (Failed)
        288 - misc-split (Failed)
        292 - robust-TestRobustOverlayFixed (Failed)
Errors while running CTest

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
> Of Paul Ramsey
> Sent: Wednesday, July 29, 2020 3:54 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: [geos-devel] OverlayNG for Testing
> 
> OK, as requested it is now possible to test OverlayNG using C clients.
> 
> https://github.com/libgeos/geos/commit/c6774a6a48b2
> 
> For autotools, use
> 
>   --enable-overlayng
> 
> For cmake, add
> 
>   -DDISABLE_OVERLAYNG=OFF
> 
> No guarantees, this is completely untested, except insofar as it all still
> compiles in the default state (which is overlayng off).
> 
> The goal, of course, is to get to a point before release where the default
> state can be overlayng on.
> 
> Some things we already know don't work:
> 
> - 3D! GEOS uniquely has supported adding in Z coordinates to introduced
> coordinates, and that code hasn't been added to JTS (and thus overlayng).
> How this will affect existing expectations for 3D output is unknown, but it's
> sure to be broken in some way.
> - Union on linestrings! OverlayNG extracts maximal length linestrings from
> the unioned graph. Old overlay extracted minimal length linestrings. This
> change is probably "for the best" but it's a change which might impact
> existing logic.
> 
> ATB,
> 
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Wed Jul 29 13:51:05 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 29 Jul 2020 13:51:05 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <003b01d665e8$d1830110$74890330$@pcorp.us>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <003b01d665e8$d1830110$74890330$@pcorp.us>
Message-ID: <BB8BD990-ACA2-4120-8761-EEF3BE3916BC@cleverelephant.ca>

Yes, I expect lots of internal failures, in addition to failures in external programs.
I'm looking at the unit test failures right now.
Some of them are representational, because the units tests don't bother to normalize before comparing geometries (since the overlay code consistently gave the same results). 
Some of them are true behaviour changes. Hopefully many will be easily fixable.
Some of them will end up being deep conundrums.
If all you're going to do us run regression tests and tell me they fail... I'm doing that anyways. Be more creative.

P

> On Jul 29, 2020, at 1:42 PM, Regina Obe <lr at pcorp.us> wrote:
> 
> Are these expected to fail?
> 
> 344: Files: 1
> 344: Tests: 143
> 344: Failed: 0
> 344: Succeeded: 143
> 344/344 Test #344: validate-TestRelatePP ....................................   Passed    0.01 sec
> 
> 92% tests passed, 28 tests failed out of 344
> 
> Total Test time (real) =  12.45 sec
> 
> The following tests FAILED:
>         46 - unit-capi-GEOSGeom_setPrecision (Failed)
>         52 - unit-capi-GEOSIntersection (Failed)
>         57 - unit-capi-GEOSMakeValid (Failed)
>         79 - unit-capi-GEOSUnaryUnion (Failed)
>        148 - unit-operation-geounion-CascadedPolygonUnion (Failed)
>        152 - unit-operation-linemerge-LineMerger (Failed)
>        154 - unit-operation-overlay-OverlayOpUnion (Failed)
>        200 - general-TestFunctionAA (Failed)
>        201 - general-TestFunctionAAPrec (Failed)
>        202 - general-TestFunctionLA (Failed)
>        203 - general-TestFunctionLAPrec (Failed)
>        204 - general-TestFunctionLL (Failed)
>        205 - general-TestFunctionLLPrec (Failed)
>        207 - general-TestFunctionPL (Failed)
>        234 - general-TestUnaryUnion (Failed)
>        246 - issue-issue-geos-350 (Failed)
>        248 - issue-issue-geos-358 (Failed)
>        249 - issue-issue-geos-360 (Failed)
>        254 - issue-issue-geos-459 (Failed)
>        255 - issue-issue-geos-488 (Failed)
>        256 - issue-issue-geos-527 (Failed)
>        259 - issue-issue-geos-586 (Failed)
>        260 - issue-issue-geos-599 (Failed)
>        262 - issue-issue-geos-615 (Failed)
>        264 - issue-issue-geos-837 (Failed)
>        265 - issue-issue-geos-838 (Failed)
>        288 - misc-split (Failed)
>        292 - robust-TestRobustOverlayFixed (Failed)
> Errors while running CTest
> 
>> -----Original Message-----
>> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
>> Of Paul Ramsey
>> Sent: Wednesday, July 29, 2020 3:54 PM
>> To: GEOS Development List <geos-devel at lists.osgeo.org>
>> Subject: [geos-devel] OverlayNG for Testing
>> 
>> OK, as requested it is now possible to test OverlayNG using C clients.
>> 
>> https://github.com/libgeos/geos/commit/c6774a6a48b2
>> 
>> For autotools, use
>> 
>>  --enable-overlayng
>> 
>> For cmake, add
>> 
>>  -DDISABLE_OVERLAYNG=OFF
>> 
>> No guarantees, this is completely untested, except insofar as it all still
>> compiles in the default state (which is overlayng off).
>> 
>> The goal, of course, is to get to a point before release where the default
>> state can be overlayng on.
>> 
>> Some things we already know don't work:
>> 
>> - 3D! GEOS uniquely has supported adding in Z coordinates to introduced
>> coordinates, and that code hasn't been added to JTS (and thus overlayng).
>> How this will affect existing expectations for 3D output is unknown, but it's
>> sure to be broken in some way.
>> - Union on linestrings! OverlayNG extracts maximal length linestrings from
>> the unioned graph. Old overlay extracted minimal length linestrings. This
>> change is probably "for the best" but it's a change which might impact
>> existing logic.
>> 
>> ATB,
>> 
>> P
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Wed Jul 29 14:08:59 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Wed, 29 Jul 2020 14:08:59 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
Message-ID: <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>

On Wed, Jul 29, 2020 at 12:53 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

>
> - 3D! GEOS uniquely has supported adding in Z coordinates to introduced
> coordinates, and that code hasn't been added to JTS (and thus overlayng).
> How this will affect existing expectations for 3D output is unknown, but
> it's sure to be broken in some way.
> - Union on linestrings! OverlayNG extracts maximal length linestrings from
> the unioned graph. Old overlay extracted minimal length linestrings. This
> change is probably "for the best" but it's a change which might impact
> existing logic.
>

Another behavioural change is that now overlay operations do not return
mixed-dimension results.  Instead, a homogeneous geometry containing only
the highest dimension resultants is returned.

So for example, if two polygons intersect in an area and along an edge, the
new overlay will only return the area resultant.  The old overlay returned
a GEOMETRYCOLLECTION containing both a polygon and a line.

Or, if two polygons intersect along an edge and at a point, the new result
is a LineString for the shared edge.  The old overlay returns a GC
ccntaining a line and a point.

The old behaviour seemed like a pain, since most (all?) uses were only
interested in the highest dimension resultants.  And since
GeometryCollections cannot be processed by overlay ops or spatial
predicates, it made chaining together operations painful.

What are people's thoughts on this?  It is probably possible to build in
the old behaviour (with a bit of coding effort), and make it the default
path.  But I think the new behaviour is preferable and more sensible.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200729/ba73cc72/attachment.html>

From lr at pcorp.us  Wed Jul 29 14:35:07 2020
From: lr at pcorp.us (Regina Obe)
Date: Wed, 29 Jul 2020 17:35:07 -0400
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <BB8BD990-ACA2-4120-8761-EEF3BE3916BC@cleverelephant.ca>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <003b01d665e8$d1830110$74890330$@pcorp.us>
 <BB8BD990-ACA2-4120-8761-EEF3BE3916BC@cleverelephant.ca>
Message-ID: <004901d665f0$225f5dc0$671e1940$@pcorp.us>

That was just to make sure I'm on the same page.  Don't worry I'll be very creative.

> -----Original Message-----
> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On Behalf
> Of Paul Ramsey
> Sent: Wednesday, July 29, 2020 4:51 PM
> To: GEOS Development List <geos-devel at lists.osgeo.org>
> Subject: Re: [geos-devel] OverlayNG for Testing
> 
> Yes, I expect lots of internal failures, in addition to failures in external
> programs.
> I'm looking at the unit test failures right now.
> Some of them are representational, because the units tests don't bother to
> normalize before comparing geometries (since the overlay code consistently
> gave the same results).
> Some of them are true behaviour changes. Hopefully many will be easily
> fixable.
> Some of them will end up being deep conundrums.
> If all you're going to do us run regression tests and tell me they fail... I'm
> doing that anyways. Be more creative.
> 
> P
> 
> > On Jul 29, 2020, at 1:42 PM, Regina Obe <lr at pcorp.us> wrote:
> >
> > Are these expected to fail?
> >
> > 344: Files: 1
> > 344: Tests: 143
> > 344: Failed: 0
> > 344: Succeeded: 143
> > 344/344 Test #344: validate-TestRelatePP ....................................
> Passed    0.01 sec
> >
> > 92% tests passed, 28 tests failed out of 344
> >
> > Total Test time (real) =  12.45 sec
> >
> > The following tests FAILED:
> >         46 - unit-capi-GEOSGeom_setPrecision (Failed)
> >         52 - unit-capi-GEOSIntersection (Failed)
> >         57 - unit-capi-GEOSMakeValid (Failed)
> >         79 - unit-capi-GEOSUnaryUnion (Failed)
> >        148 - unit-operation-geounion-CascadedPolygonUnion (Failed)
> >        152 - unit-operation-linemerge-LineMerger (Failed)
> >        154 - unit-operation-overlay-OverlayOpUnion (Failed)
> >        200 - general-TestFunctionAA (Failed)
> >        201 - general-TestFunctionAAPrec (Failed)
> >        202 - general-TestFunctionLA (Failed)
> >        203 - general-TestFunctionLAPrec (Failed)
> >        204 - general-TestFunctionLL (Failed)
> >        205 - general-TestFunctionLLPrec (Failed)
> >        207 - general-TestFunctionPL (Failed)
> >        234 - general-TestUnaryUnion (Failed)
> >        246 - issue-issue-geos-350 (Failed)
> >        248 - issue-issue-geos-358 (Failed)
> >        249 - issue-issue-geos-360 (Failed)
> >        254 - issue-issue-geos-459 (Failed)
> >        255 - issue-issue-geos-488 (Failed)
> >        256 - issue-issue-geos-527 (Failed)
> >        259 - issue-issue-geos-586 (Failed)
> >        260 - issue-issue-geos-599 (Failed)
> >        262 - issue-issue-geos-615 (Failed)
> >        264 - issue-issue-geos-837 (Failed)
> >        265 - issue-issue-geos-838 (Failed)
> >        288 - misc-split (Failed)
> >        292 - robust-TestRobustOverlayFixed (Failed) Errors while
> > running CTest
> >
> >> -----Original Message-----
> >> From: geos-devel [mailto:geos-devel-bounces at lists.osgeo.org] On
> >> Behalf Of Paul Ramsey
> >> Sent: Wednesday, July 29, 2020 3:54 PM
> >> To: GEOS Development List <geos-devel at lists.osgeo.org>
> >> Subject: [geos-devel] OverlayNG for Testing
> >>
> >> OK, as requested it is now possible to test OverlayNG using C clients.
> >>
> >> https://github.com/libgeos/geos/commit/c6774a6a48b2
> >>
> >> For autotools, use
> >>
> >>  --enable-overlayng
> >>
> >> For cmake, add
> >>
> >>  -DDISABLE_OVERLAYNG=OFF
> >>
> >> No guarantees, this is completely untested, except insofar as it all
> >> still compiles in the default state (which is overlayng off).
> >>
> >> The goal, of course, is to get to a point before release where the
> >> default state can be overlayng on.
> >>
> >> Some things we already know don't work:
> >>
> >> - 3D! GEOS uniquely has supported adding in Z coordinates to
> >> introduced coordinates, and that code hasn't been added to JTS (and thus
> overlayng).
> >> How this will affect existing expectations for 3D output is unknown,
> >> but it's sure to be broken in some way.
> >> - Union on linestrings! OverlayNG extracts maximal length linestrings
> >> from the unioned graph. Old overlay extracted minimal length
> >> linestrings. This change is probably "for the best" but it's a change
> >> which might impact existing logic.
> >>
> >> ATB,
> >>
> >> P
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
> > _______________________________________________
> > geos-devel mailing list
> > geos-devel at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Thu Jul 30 08:52:53 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 30 Jul 2020 08:52:53 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
Message-ID: <042ECC48-1055-40C3-ADF7-CCFCB9DA9BD2@cleverelephant.ca>



> Some things we already know don't work:
> 
> - 3D! GEOS uniquely has supported adding in Z coordinates to introduced coordinates, and that code hasn't been added to JTS (and thus overlayng). How this will affect existing expectations for 3D output is unknown, but it's sure to be broken in some way.
> - Union on linestrings! OverlayNG extracts maximal length linestrings from the unioned graph. Old overlay extracted minimal length linestrings. This change is probably "for the best" but it's a change which might impact existing logic.

In general linestring output. 

select st_astext(st_difference('LINESTRING(-11.1111111 70,70 -11.1111111)'::geometry, 'LINESTRING (20.1 90, 20.1 -90)'::geometry));

                         st_astext                         
-----------------------------------------------------------
 LINESTRING(-11.1111111 70,20.1 38.7888889,70 -11.1111111)

The old overlay would output a MULTILINESTRING. This has broken PostGIS old split hack, which depends on the output of a collection to carry out splitting.



From strk at kbt.io  Thu Jul 30 09:02:42 2020
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 30 Jul 2020 18:02:42 +0200
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
Message-ID: <20200730160242.GB4761@lif>

On Wed, Jul 29, 2020 at 02:08:59PM -0700, Martin Davis wrote:

> Another behavioural change is that now overlay operations do not return
> mixed-dimension results.  Instead, a homogeneous geometry containing only
> the highest dimension resultants is returned.

ST_MakeValid in PostGIS expects the old behavior, as the funders of it
insisted in "not loosing any vertex" (so not throwing away anything).

--strk;

From geos-trac at osgeo.org  Thu Jul 30 09:50:19 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 30 Jul 2020 16:50:19 -0000
Subject: [geos-devel] [GEOS] #1036: GeomDifference with Overlay turned on
 goes into infinite look in PostGIS ST_WrapX
Message-ID: <042.45ca84b56bd5c596ea368b4b982408d7@osgeo.org>

#1036: GeomDifference with Overlay turned on goes into infinite look in PostGIS
ST_WrapX
------------------------+--------------------------
 Reporter:  robe        |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  blocker     |  Milestone:  3.9.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 This is related to https://trac.osgeo.org/postgis/ticket/4731.
 Which after much input has been determined to be an issue with the new
 GEOS 3.9 overlay logic.

 The crashing example in PostGIS


 {{{
 SELECT ST_WrapX('LINESTRING(-11.1111111 70,70 -11.1111111)'::geometry,
 20.1,20.1);
 }}}

 Related IRC discussion


 {{{
 15:30:30        Algunenano:     ReginaObe[m]: WrapX uses split by line,
 which uses GEOSUnion
 15:30:39        Algunenano:     Maybe it's that?
 15:30:57        ReginaObe[m]:   ah Algunenano so I guess we got to update
 the docs too to reflect it uses GEOS
 15:31:14        ReginaObe[m]:   who would have thunk it :)
 15:31:37        PaulRamsey[m]:  you have a winner, it crashed for me too
 15:31:42        ReginaObe[m]:   Paul Ramsey: well that's a crasher
 15:33:19        PaulRamsey[m]:  It does eventually call GEOSDifference
 15:33:28        PaulRamsey[m]:  after 25000 frames of recursion?
 15:33:41        PaulRamsey[m]:  I mean, something non-geos broken in
 there?
 15:33:48        PaulRamsey[m]:  weird
 15:36:20        PaulRamsey[m]:  probably in ` split =
 lwgeom_split(geom_in, blade);`
 15:36:34        Algunenano:     It looks like an infinite loop. Has the
 geometry type changed? Maybe line -> multiline?
 15:38:35        Algunenano:     It seems that, for some reason,
 lwgeom_split_wrapx calls lwcollection_wrapx over the result, so it it
 returns a multiline (with a single line) it might be going to infinity and
 beyond
 15:39:34        PaulRamsey[m]:  yeah, not sure why it tries to wrap the
 components of the split...
 15:39:50        PaulRamsey[m]:  but if the components were slightly
 shifted, like enough to hit the blade again
 15:39:57        PaulRamsey[m]:  it would split over and over and over
 15:45:54        ReginaObe[m]:   Hmm ST_Split also doesn't note dependency
 on GEOS
 15:46:09        ReginaObe[m]:   which version of GEOS are required for
 these
 15:46:35        PaulRamsey[m]:  it uses difference, so pretty much all of
 them
 15:47:06        PaulRamsey[m]:  once martin implements a splitter over the
 new overlay all the splitting code can get simpler and more reliable..
 right now it's a hack on difference
 15:49:35        PaulRamsey[m]:  found it, @algunano
 }}}


 {{{
 15:49:35        PaulRamsey[m]:  found it, @algunano

 select st_astext(st_difference('LINESTRING(-11.1111111 70,70
 -11.1111111)'::geometry, 'LINESTRING (20.1 90, 20.1 -90)'::geometry));
                          st_astext
 -----------------------------------------------------------
  LINESTRING(-11.1111111 70,20.1 38.7888889,70 -11.1111111)
 (1 row)
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1036>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Thu Jul 30 09:51:05 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 30 Jul 2020 09:51:05 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <20200730160242.GB4761@lif>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
 <20200730160242.GB4761@lif>
Message-ID: <CAK2ens3G+or19zZbHctcnz=dZAFXYOH0R85FCORXKYgyaB+RCg@mail.gmail.com>

On Thu, Jul 30, 2020 at 9:08 AM Sandro Santilli <strk at kbt.io> wrote:

> On Wed, Jul 29, 2020 at 02:08:59PM -0700, Martin Davis wrote:
>
> > Another behavioural change is that now overlay operations do not return
> > mixed-dimension results.  Instead, a homogeneous geometry containing only
> > the highest dimension resultants is returned.
>
> ST_MakeValid in PostGIS expects the old behavior, as the funders of it
> insisted in "not loosing any vertex" (so not throwing away anything).
>

How does ST_MakeValid use the overlay operations?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200730/8a0b75a1/attachment.html>

From geos-trac at osgeo.org  Thu Jul 30 09:52:10 2020
From: geos-trac at osgeo.org (GEOS)
Date: Thu, 30 Jul 2020 16:52:10 -0000
Subject: [geos-devel] [GEOS] #1036: GeomDifference with Overlay turned
 on goes into infinite look in PostGIS ST_WrapX
In-Reply-To: <042.45ca84b56bd5c596ea368b4b982408d7@osgeo.org>
References: <042.45ca84b56bd5c596ea368b4b982408d7@osgeo.org>
Message-ID: <057.16b0055146b24951a507140624e60196@osgeo.org>

#1036: GeomDifference with Overlay turned on goes into infinite look in PostGIS
ST_WrapX
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------
Description changed by robe:

Old description:

> This is related to https://trac.osgeo.org/postgis/ticket/4731.
> Which after much input has been determined to be an issue with the new
> GEOS 3.9 overlay logic.
>
> The crashing example in PostGIS
>

> {{{
> SELECT ST_WrapX('LINESTRING(-11.1111111 70,70 -11.1111111)'::geometry,
> 20.1,20.1);
> }}}
>
> Related IRC discussion
>

> {{{
> 15:30:30        Algunenano:     ReginaObe[m]: WrapX uses split by line,
> which uses GEOSUnion
> 15:30:39        Algunenano:     Maybe it's that?
> 15:30:57        ReginaObe[m]:   ah Algunenano so I guess we got to update
> the docs too to reflect it uses GEOS
> 15:31:14        ReginaObe[m]:   who would have thunk it :)
> 15:31:37        PaulRamsey[m]:  you have a winner, it crashed for me too
> 15:31:42        ReginaObe[m]:   Paul Ramsey: well that's a crasher
> 15:33:19        PaulRamsey[m]:  It does eventually call GEOSDifference
> 15:33:28        PaulRamsey[m]:  after 25000 frames of recursion?
> 15:33:41        PaulRamsey[m]:  I mean, something non-geos broken in
> there?
> 15:33:48        PaulRamsey[m]:  weird
> 15:36:20        PaulRamsey[m]:  probably in ` split =
> lwgeom_split(geom_in, blade);`
> 15:36:34        Algunenano:     It looks like an infinite loop. Has the
> geometry type changed? Maybe line -> multiline?
> 15:38:35        Algunenano:     It seems that, for some reason,
> lwgeom_split_wrapx calls lwcollection_wrapx over the result, so it it
> returns a multiline (with a single line) it might be going to infinity
> and beyond
> 15:39:34        PaulRamsey[m]:  yeah, not sure why it tries to wrap the
> components of the split...
> 15:39:50        PaulRamsey[m]:  but if the components were slightly
> shifted, like enough to hit the blade again
> 15:39:57        PaulRamsey[m]:  it would split over and over and over
> 15:45:54        ReginaObe[m]:   Hmm ST_Split also doesn't note dependency
> on GEOS
> 15:46:09        ReginaObe[m]:   which version of GEOS are required for
> these
> 15:46:35        PaulRamsey[m]:  it uses difference, so pretty much all of
> them
> 15:47:06        PaulRamsey[m]:  once martin implements a splitter over
> the new overlay all the splitting code can get simpler and more
> reliable.. right now it's a hack on difference
> 15:49:35        PaulRamsey[m]:  found it, @algunano
> }}}
>

> {{{
> 15:49:35        PaulRamsey[m]:  found it, @algunano
>
> select st_astext(st_difference('LINESTRING(-11.1111111 70,70
> -11.1111111)'::geometry, 'LINESTRING (20.1 90, 20.1 -90)'::geometry));
>                          st_astext
> -----------------------------------------------------------
>  LINESTRING(-11.1111111 70,20.1 38.7888889,70 -11.1111111)
> (1 row)
> }}}

New description:

 This is related to https://trac.osgeo.org/postgis/ticket/4731.
 Which after much input has been determined to be an issue with the new
 GEOS 3.9 overlay logic.

 The crashing example in PostGIS


 {{{
 SELECT ST_WrapX('LINESTRING(-11.1111111 70,70 -11.1111111)'::geometry,
 20.1,20.1);
 }}}

 Related IRC discussion


 {{{
 15:30:30        Algunenano:     ReginaObe[m]: WrapX uses split by line,
 which uses GEOSUnion
 15:30:39        Algunenano:     Maybe it's that?
 15:30:57        ReginaObe[m]:   ah Algunenano so I guess we got to update
 the docs too to reflect it uses GEOS
 15:31:14        ReginaObe[m]:   who would have thunk it :)
 15:31:37        PaulRamsey[m]:  you have a winner, it crashed for me too
 15:31:42        ReginaObe[m]:   Paul Ramsey: well that's a crasher
 15:33:19        PaulRamsey[m]:  It does eventually call GEOSDifference
 15:33:28        PaulRamsey[m]:  after 25000 frames of recursion?
 15:33:41        PaulRamsey[m]:  I mean, something non-geos broken in
 there?
 15:33:48        PaulRamsey[m]:  weird
 15:36:20        PaulRamsey[m]:  probably in ` split =
 lwgeom_split(geom_in, blade);`
 15:36:34        Algunenano:     It looks like an infinite loop. Has the
 geometry type changed? Maybe line -> multiline?
 15:38:35        Algunenano:     It seems that, for some reason,
 lwgeom_split_wrapx calls lwcollection_wrapx over the result, so it it
 returns a multiline (with a single line) it might be going to infinity and
 beyond
 15:39:34        PaulRamsey[m]:  yeah, not sure why it tries to wrap the
 components of the split...
 15:39:50        PaulRamsey[m]:  but if the components were slightly
 shifted, like enough to hit the blade again
 15:39:57        PaulRamsey[m]:  it would split over and over and over
 15:45:54        ReginaObe[m]:   Hmm ST_Split also doesn't note dependency
 on GEOS
 15:46:09        ReginaObe[m]:   which version of GEOS are required for
 these
 15:46:35        PaulRamsey[m]:  it uses difference, so pretty much all of
 them
 15:47:06        PaulRamsey[m]:  once martin implements a splitter over the
 new overlay all the splitting code can get simpler and more reliable..
 right now it's a hack on difference
 15:49:35        PaulRamsey[m]:  found it, @algunano
 }}}


 {{{
 15:49:35        PaulRamsey[m]:  found it, @algunano

 select st_astext(st_difference('LINESTRING(-11.1111111 70,70
 -11.1111111)'::geometry, 'LINESTRING (20.1 90, 20.1 -90)'::geometry));
                          st_astext
 -----------------------------------------------------------
  LINESTRING(-11.1111111 70,20.1 38.7888889,70 -11.1111111)
 (1 row)
 }}}

 From related PostGIS ticket

 ----

 The lwgeom_split_wrapx function expects a split (which under the covers is
 a difference of a line away from an input) to return a collection, which
 it then iterates on. Instead we hand it a unitary object... which it then
 goes and tries to split again. Hence the infinite recursion. We need
 probably the old behaviour back, so that a GEOS 3.9 install doesn't break
 older software.

--

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1036#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From mtnclimb at gmail.com  Thu Jul 30 10:02:03 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 30 Jul 2020 10:02:03 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
Message-ID: <CAK2ens1d3RbV0r5EnOiyqZFRy7F-tkts3BYe6GqJ76qbXM7vbw@mail.gmail.com>

A clarification on the semantics of output from OverlayNG.  Some operations
CAN return heterogeneous (mixed-dimension) outputs in some situations.

The exact semantics are:


   - Results are always valid geometries. In particular, result MultiPolygons
   are valid.
   - Repeated vertices are removed.
   - Linear results are merged node-to-node (e.g. are of maximal length).
   - Polygon edges which collapse completely due to rounding are not output.
   - The intersection operation produces a homogeneous result. The result
   contains the components of highest dimension in the intersection. (For
   instance, the intersection of a Polygon and a LineStringmight produce a
   Point result.)
   - The difference operation produces a homogeneous result. The result
   dimension is that of the left-hand operand.
   - The union and symmetric difference operations may produce a
   heterogeneous result if the inputs are of mixed dimension
   - Homogeneous results are output as Multi geometries.
   - Heterogeneous results are in the form of a GeometryCollection containing
   a set of atomic geometries. This provides backwards compatibility with the
   original JTS overlay implementation. (However, this loses the information
   that the polygonal results have valid MultiPolygon topology.)
   - Empty results are atomic EMPTY geometries of dimension appropriate to
   the operation.



On Wed, Jul 29, 2020 at 2:08 PM Martin Davis <mtnclimb at gmail.com> wrote:

> On Wed, Jul 29, 2020 at 12:53 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
>
>>
>> - 3D! GEOS uniquely has supported adding in Z coordinates to introduced
>> coordinates, and that code hasn't been added to JTS (and thus overlayng).
>> How this will affect existing expectations for 3D output is unknown, but
>> it's sure to be broken in some way.
>> - Union on linestrings! OverlayNG extracts maximal length linestrings
>> from the unioned graph. Old overlay extracted minimal length linestrings.
>> This change is probably "for the best" but it's a change which might impact
>> existing logic.
>>
>
> Another behavioural change is that now overlay operations do not return
> mixed-dimension results.  Instead, a homogeneous geometry containing only
> the highest dimension resultants is returned.
>
> So for example, if two polygons intersect in an area and along an edge,
> the new overlay will only return the area resultant.  The old overlay
> returned a GEOMETRYCOLLECTION containing both a polygon and a line.
>
> Or, if two polygons intersect along an edge and at a point, the new result
> is a LineString for the shared edge.  The old overlay returns a GC
> ccntaining a line and a point.
>
> The old behaviour seemed like a pain, since most (all?) uses were only
> interested in the highest dimension resultants.  And since
> GeometryCollections cannot be processed by overlay ops or spatial
> predicates, it made chaining together operations painful.
>
> What are people's thoughts on this?  It is probably possible to build in
> the old behaviour (with a bit of coding effort), and make it the default
> path.  But I think the new behaviour is preferable and more sensible.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200730/8ba9b407/attachment-0001.html>

From strk at kbt.io  Thu Jul 30 11:29:36 2020
From: strk at kbt.io (Sandro Santilli)
Date: Thu, 30 Jul 2020 20:29:36 +0200
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CAK2ens3G+or19zZbHctcnz=dZAFXYOH0R85FCORXKYgyaB+RCg@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
 <20200730160242.GB4761@lif>
 <CAK2ens3G+or19zZbHctcnz=dZAFXYOH0R85FCORXKYgyaB+RCg@mail.gmail.com>
Message-ID: <20200730182936.GD4761@lif>

On Thu, Jul 30, 2020 at 09:51:05AM -0700, Martin Davis wrote:
> On Thu, Jul 30, 2020 at 9:08 AM Sandro Santilli <strk at kbt.io> wrote:
> 
> > On Wed, Jul 29, 2020 at 02:08:59PM -0700, Martin Davis wrote:
> >
> > > Another behavioural change is that now overlay operations do not return
> > > mixed-dimension results.  Instead, a homogeneous geometry containing only
> > > the highest dimension resultants is returned.
> >
> > ST_MakeValid in PostGIS expects the old behavior, as the funders of it
> > insisted in "not loosing any vertex" (so not throwing away anything).
> 
> How does ST_MakeValid use the overlay operations?

In many ways, but a quick look at the code seems to suggest it should
not suffer from the behavioural change in that the "cut edges" seem to
be extracted on the side (to be double-checked).

--strk;

From pramsey at cleverelephant.ca  Thu Jul 30 11:33:27 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 30 Jul 2020 11:33:27 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <20200730182936.GD4761@lif>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
 <20200730160242.GB4761@lif>
 <CAK2ens3G+or19zZbHctcnz=dZAFXYOH0R85FCORXKYgyaB+RCg@mail.gmail.com>
 <20200730182936.GD4761@lif>
Message-ID: <0BFBD8A8-C8F5-4CC2-8A83-DCD783F266F5@cleverelephant.ca>



> On Jul 30, 2020, at 11:29 AM, Sandro Santilli <strk at kbt.io> wrote:
> 
> On Thu, Jul 30, 2020 at 09:51:05AM -0700, Martin Davis wrote:
>> On Thu, Jul 30, 2020 at 9:08 AM Sandro Santilli <strk at kbt.io> wrote:
>> 
>>> On Wed, Jul 29, 2020 at 02:08:59PM -0700, Martin Davis wrote:
>>> 
>>>> Another behavioural change is that now overlay operations do not return
>>>> mixed-dimension results.  Instead, a homogeneous geometry containing only
>>>> the highest dimension resultants is returned.
>>> 
>>> ST_MakeValid in PostGIS expects the old behavior, as the funders of it
>>> insisted in "not loosing any vertex" (so not throwing away anything).
>> 
>> How does ST_MakeValid use the overlay operations?
> 
> In many ways, but a quick look at the code seems to suggest it should
> not suffer from the behavioural change in that the "cut edges" seem to
> be extracted on the side (to be double-checked).

Just to be sure, I've pointed all the overlay ops in MakeValid at the old overlay code. Eventually MakeValid will be superceded by something that works off the overlay graph directly. Until then we'll just ensure it works as before.

P


From dbaston at gmail.com  Thu Jul 30 17:30:40 2020
From: dbaston at gmail.com (Daniel Baston)
Date: Thu, 30 Jul 2020 20:30:40 -0400
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
Message-ID: <CA+K_q_qDO28C00mWV+9taKbxhhKYPaz+7PSSb9Yz3uD_H9OOiw@mail.gmail.com>

>
> What are people's thoughts on this?  It is probably possible to build in
> the old behaviour (with a bit of coding effort), and make it the default
> path.  But I think the new behaviour is preferable and more sensible.
>

This behavior seems confusing to me, and I'm struggling to tell if it's
just because I'm used to the old behavior. But it did occur to me that this
introduces an inconsistency between the predicates and overlay functions
wherein A and B may intersect at a point outside the intersection of A and
B.

It's also easy enough for a user to remove the unwanted components of the
result but quite difficult to generate lower-dimension components that were
not included in the result.

Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200730/f39a5a83/attachment.html>

From nyall.dawson at gmail.com  Thu Jul 30 17:55:42 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Fri, 31 Jul 2020 10:55:42 +1000
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CA+K_q_qDO28C00mWV+9taKbxhhKYPaz+7PSSb9Yz3uD_H9OOiw@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
 <CA+K_q_qDO28C00mWV+9taKbxhhKYPaz+7PSSb9Yz3uD_H9OOiw@mail.gmail.com>
Message-ID: <CAB28Asg=LkMCcC89bbENNLwHV3nJdXV6D8ATEhnSaqVv6uVRBQ@mail.gmail.com>

On Fri, 31 Jul 2020 at 10:30, Daniel Baston <dbaston at gmail.com> wrote:
>>
>> What are people's thoughts on this?  It is probably possible to build in the old behaviour (with a bit of coding effort), and make it the default path.  But I think the new behaviour is preferable and more sensible.
>
>
> This behavior seems confusing to me, and I'm struggling to tell if it's just because I'm used to the old behavior. But it did occur to me that this introduces an inconsistency between the predicates and overlay functions wherein A and B may intersect at a point outside the intersection of A and B.

+1 This potentially opens the door for many hidden issues.

> It's also easy enough for a user to remove the unwanted components of the result

... and every downstream project/user already had handling for this in place.

(and then just because this email sounds too negative -- this is
seriously exciting stuff, and I'm really happy to see all this hard
work land! Big kudos on all your efforts here)

Nyall

From pramsey at cleverelephant.ca  Thu Jul 30 18:04:11 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Thu, 30 Jul 2020 18:04:11 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CAB28Asg=LkMCcC89bbENNLwHV3nJdXV6D8ATEhnSaqVv6uVRBQ@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
 <CA+K_q_qDO28C00mWV+9taKbxhhKYPaz+7PSSb9Yz3uD_H9OOiw@mail.gmail.com>
 <CAB28Asg=LkMCcC89bbENNLwHV3nJdXV6D8ATEhnSaqVv6uVRBQ@mail.gmail.com>
Message-ID: <53809BA2-C9A2-454B-AB77-22DABBD19E23@cleverelephant.ca>



> On Jul 30, 2020, at 5:55 PM, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> 
> On Fri, 31 Jul 2020 at 10:30, Daniel Baston <dbaston at gmail.com> wrote:
>>> 
>>> What are people's thoughts on this?  It is probably possible to build in the old behaviour (with a bit of coding effort), and make it the default path.  But I think the new behaviour is preferable and more sensible.
>> 
>> 
>> This behavior seems confusing to me, and I'm struggling to tell if it's just because I'm used to the old behavior. But it did occur to me that this introduces an inconsistency between the predicates and overlay functions wherein A and B may intersect at a point outside the intersection of A and B.
> 
> +1 This potentially opens the door for many hidden issues.
> 
>> It's also easy enough for a user to remove the unwanted components of the result
> 
> ... and every downstream project/user already had handling for this in place.
> 
> (and then just because this email sounds too negative -- this is
> seriously exciting stuff, and I'm really happy to see all this hard
> work land! Big kudos on all your efforts here)

No, this is great, and thank you Dan for articulating a more compelling reason to keep the old behaviour than "it's always been that way". I had not thought of consistency with the predicates and, yeah, that's really a good thing to have.

I just thought while at the gym that ST_CollectionExtract() could be made a smidge smarter to also have a one-argument variant that figures out the highest dimensionality component and return that, so getting the "nicer" behaviour would be just one extra function call, and involve no magic numbers.

On a similar note, Martin has recovered the old behaviour for linstrings in overlays so we should be able to be back-compatible there too. As with the collections, there's an existing mechanism to get "nicer" behaviour already, the ST_Linemerge function. 

My hope is that, if we do these pieces to get old semantics, we will just be left with adding in the Z handling and be very very close to original semantics, enough so that we can stamp it 3.9 instead of 4.0. I love backwards compatibility on principle.

P

> 
> Nyall
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From mtnclimb at gmail.com  Thu Jul 30 21:12:02 2020
From: mtnclimb at gmail.com (Martin Davis)
Date: Thu, 30 Jul 2020 21:12:02 -0700
Subject: [geos-devel] OverlayNG for Testing
In-Reply-To: <CA+K_q_qDO28C00mWV+9taKbxhhKYPaz+7PSSb9Yz3uD_H9OOiw@mail.gmail.com>
References: <5422276B-2D6C-406F-9879-3A14AD9B2F6E@cleverelephant.ca>
 <CAK2ens2c84RwF5EgbipEja1UFN9oJzU-RG3k+XLdA8xgak5VLw@mail.gmail.com>
 <CA+K_q_qDO28C00mWV+9taKbxhhKYPaz+7PSSb9Yz3uD_H9OOiw@mail.gmail.com>
Message-ID: <CAK2ens2qTf8utSf_uOYLNFTNXsgNWHbjY-6_mHA66yybcwVkgw@mail.gmail.com>

On Thu, Jul 30, 2020 at 5:30 PM Daniel Baston <dbaston at gmail.com> wrote:

> What are people's thoughts on this?  It is probably possible to build in
>> the old behaviour (with a bit of coding effort), and make it the default
>> path.  But I think the new behaviour is preferable and more sensible.
>>
>
> This behavior seems confusing to me, and I'm struggling to tell if it's
> just because I'm used to the old behavior.
>

FWIW, It seems like simpler behaviour to me.  And I think that's evidenced
by clients needing to introduce special code to strip out the unwanted
components.


> But it did occur to me that this introduces an inconsistency between the
> predicates and overlay functions wherein A and B may intersect at a point
> outside the intersection of A and B.
>

There isn't absolute consistency between the predicates and overlay
functions anyway, due to the snapping heuristics in overlay, and the lack
of a tolerance in the predicates.  But agreed, this would move "further"
from consistency.  Although I'm not sure that really matters - if
consistency cannot be guaranteed (which it can't), then clients should not
rely on it being true.  (I am hoping to implement a new approach to
computing predicates, which supports a tolerance.  But this still won't
provide full consistency, and I'm not sure that can ever be provided given
heuristics, finite precision, and robustness issues)

>
> It's also easy enough for a user to remove the unwanted components of the
> result but quite difficult to generate lower-dimension components that were
> not included in the result.
>

That's a good point.  And that is often the motivation for design decisions
in JTS - do the hard things, if it's easy to derive simpler things.

Actually there are two aspects to this semantic.  There are of course
situations where geometries "natively" intersect in multiple dimension
components.  And then there are situations where topology collapse occurs
during noding (e.g. where a narrow area is turned into a line), and that
"line" intersects the other geometry.  The old behaviour was to return
collapses as lines (or points), if they intersected.  That is more
consistent with the predicates as noted above.

Unfortunately I'm not sure how easy these behaviours are to implement with
the new OverlayNG codebase.  Something to investigate, I guess.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200730/2de12802/attachment.html>

From geos-trac at osgeo.org  Fri Jul 31 03:08:07 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 31 Jul 2020 10:08:07 -0000
Subject: [geos-devel] [GEOS] #1037: GeosMakeValid returning NULL -- regular
 GEOS Master 3.9
Message-ID: <042.f565145ce71a983da748d08bc07b15c7@osgeo.org>

#1037: GeosMakeValid returning NULL -- regular GEOS Master 3.9
------------------------+--------------------------
 Reporter:  robe        |      Owner:  geos-devel@…
     Type:  defect      |     Status:  new
 Priority:  blocker     |  Milestone:  3.9.0
Component:  Default     |    Version:  master
 Severity:  Unassigned  |   Keywords:
------------------------+--------------------------
 I believe since this commit -
 https://git.osgeo.org/gitea/geos/geos/commit/4ef6f82756cfc3d6bf6a85c698b0bb01b2176fff

 PostGIS is spitting up blood.

 This is not with the overlay turned on.  This is without the overlay.
 I haven't tested with the overlay.

 Debbie started coughing up blood and Raul confirmed he has the same issue.

 Related PostGIS ticket - https://trac.osgeo.org/postgis/ticket/4733

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1037>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From geos-trac at osgeo.org  Fri Jul 31 08:37:21 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 31 Jul 2020 15:37:21 -0000
Subject: [geos-devel] [GEOS] #1037: GeosMakeValid returning NULL --
 regular GEOS Master 3.9
In-Reply-To: <042.f565145ce71a983da748d08bc07b15c7@osgeo.org>
References: <042.f565145ce71a983da748d08bc07b15c7@osgeo.org>
Message-ID: <057.531d17600b4bc589b25ca67c65d9fdee@osgeo.org>

#1037: GeosMakeValid returning NULL -- regular GEOS Master 3.9
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  new
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:
 Keywords:              |
------------------------+---------------------------

Comment (by Paul Ramsey <pramsey@…>):

 In [changeset:"0d7d79361ce96e18b51c4ed49de6830f12574cea/git" 0d7d793/git]:
 {{{
 #!CommitTicketReference repository="git"
 revision="0d7d79361ce96e18b51c4ed49de6830f12574cea"
 Use BinaryOp instead of OverlayOp in order to access old fall-back
 behaviour in overlay. References #1037
 }}}

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1037#comment:1>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

From pramsey at cleverelephant.ca  Fri Jul 31 09:26:10 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 31 Jul 2020 09:26:10 -0700
Subject: [geos-devel] VS Studio Help?
Message-ID: <C1726F2C-765B-4701-B239-25B301B5811A@cleverelephant.ca>

We've got a CI failure in MSVC and it's totally opaque. Anyone have a MSVC build environment and ability to look at what's up?

https://dev.azure.com/libgeos/geos/_build/results?buildId=585&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96

Thanks!

P

From andrew.bell.ia at gmail.com  Fri Jul 31 10:51:22 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 31 Jul 2020 13:51:22 -0400
Subject: [geos-devel] VS Studio Help?
In-Reply-To: <C1726F2C-765B-4701-B239-25B301B5811A@cleverelephant.ca>
References: <C1726F2C-765B-4701-B239-25B301B5811A@cleverelephant.ca>
Message-ID: <CACJ51z1GdzZP-ZwNPj49zydV2=Vk_eDWv1ZyRyykrZmaVQ-9og@mail.gmail.com>

https://stackoverflow.com/questions/34627874/c11-container-of-unique-ptr-of-forward-declared-class

On Fri, Jul 31, 2020 at 12:26 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> We've got a CI failure in MSVC and it's totally opaque. Anyone have a MSVC
> build environment and ability to look at what's up?
>
>
> https://dev.azure.com/libgeos/geos/_build/results?buildId=585&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96
>
> Thanks!
>
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200731/f54f99ca/attachment.html>

From pramsey at cleverelephant.ca  Fri Jul 31 12:27:51 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 31 Jul 2020 12:27:51 -0700
Subject: [geos-devel] VS Studio Help?
In-Reply-To: <CACJ51z1GdzZP-ZwNPj49zydV2=Vk_eDWv1ZyRyykrZmaVQ-9og@mail.gmail.com>
References: <C1726F2C-765B-4701-B239-25B301B5811A@cleverelephant.ca>
 <CACJ51z1GdzZP-ZwNPj49zydV2=Vk_eDWv1ZyRyykrZmaVQ-9og@mail.gmail.com>
Message-ID: <706623DD-C680-4617-BFA5-B66B342E52FF@cleverelephant.ca>

That maybe was a lot of them? I put actual headers into place where a std::vector<std::unique_ptr<>> was being declared, but I'm still left with 

https://dev.azure.com/libgeos/geos/_build/results?buildId=591&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96&l=156

and a handful of others. The error seems the same, but I've already brought in the class defn, not sure what else to do...

P

> On Jul 31, 2020, at 10:51 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> 
> https://stackoverflow.com/questions/34627874/c11-container-of-unique-ptr-of-forward-declared-class
> 
> On Fri, Jul 31, 2020 at 12:26 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> We've got a CI failure in MSVC and it's totally opaque. Anyone have a MSVC build environment and ability to look at what's up?
> 
> https://dev.azure.com/libgeos/geos/_build/results?buildId=585&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96
> 
> Thanks!
> 
> P
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 
> 
> -- 
> Andrew Bell
> andrew.bell.ia at gmail.com
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel


From pramsey at cleverelephant.ca  Fri Jul 31 12:34:16 2020
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Fri, 31 Jul 2020 12:34:16 -0700
Subject: [geos-devel] VS Studio Help?
In-Reply-To: <706623DD-C680-4617-BFA5-B66B342E52FF@cleverelephant.ca>
References: <C1726F2C-765B-4701-B239-25B301B5811A@cleverelephant.ca>
 <CACJ51z1GdzZP-ZwNPj49zydV2=Vk_eDWv1ZyRyykrZmaVQ-9og@mail.gmail.com>
 <706623DD-C680-4617-BFA5-B66B342E52FF@cleverelephant.ca>
Message-ID: <71E30459-8299-465C-9C49-CFAA76DC7B8D@cleverelephant.ca>

Er, here's the line it's complaining about.

https://github.com/libgeos/geos/blob/master/include/geos/operation/overlayng/OverlayGraph.h#L65

> On Jul 31, 2020, at 12:27 PM, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> That maybe was a lot of them? I put actual headers into place where a std::vector<std::unique_ptr<>> was being declared, but I'm still left with 
> 
> https://dev.azure.com/libgeos/geos/_build/results?buildId=591&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96&l=156
> 
> and a handful of others. The error seems the same, but I've already brought in the class defn, not sure what else to do...
> 
> P
> 
>> On Jul 31, 2020, at 10:51 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
>> 
>> https://stackoverflow.com/questions/34627874/c11-container-of-unique-ptr-of-forward-declared-class
>> 
>> On Fri, Jul 31, 2020 at 12:26 PM Paul Ramsey <pramsey at cleverelephant.ca> wrote:
>> We've got a CI failure in MSVC and it's totally opaque. Anyone have a MSVC build environment and ability to look at what's up?
>> 
>> https://dev.azure.com/libgeos/geos/_build/results?buildId=585&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96
>> 
>> Thanks!
>> 
>> P
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
>> 
>> 
>> -- 
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>> _______________________________________________
>> geos-devel mailing list
>> geos-devel at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/geos-devel
> 


From andrew.bell.ia at gmail.com  Fri Jul 31 14:03:22 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 31 Jul 2020 17:03:22 -0400
Subject: [geos-devel] VS Studio Help?
In-Reply-To: <71E30459-8299-465C-9C49-CFAA76DC7B8D@cleverelephant.ca>
References: <C1726F2C-765B-4701-B239-25B301B5811A@cleverelephant.ca>
 <CACJ51z1GdzZP-ZwNPj49zydV2=Vk_eDWv1ZyRyykrZmaVQ-9og@mail.gmail.com>
 <706623DD-C680-4617-BFA5-B66B342E52FF@cleverelephant.ca>
 <71E30459-8299-465C-9C49-CFAA76DC7B8D@cleverelephant.ca>
Message-ID: <CACJ51z31UM8XPx3bkWfcdEOyS9oYtTH7LhstXuMOfU_c=eH8Qg@mail.gmail.com>

The CoordinateSequence there doesn't appear to be in the correct namespace.
Seems like you would need geom::CoordinateSequence.

On Fri, Jul 31, 2020 at 3:34 PM Paul Ramsey <pramsey at cleverelephant.ca>
wrote:

> Er, here's the line it's complaining about.
>
>
> https://github.com/libgeos/geos/blob/master/include/geos/operation/overlayng/OverlayGraph.h#L65
>
> > On Jul 31, 2020, at 12:27 PM, Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >
> > That maybe was a lot of them? I put actual headers into place where a
> std::vector<std::unique_ptr<>> was being declared, but I'm still left with
> >
> >
> https://dev.azure.com/libgeos/geos/_build/results?buildId=591&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96&l=156
> >
> > and a handful of others. The error seems the same, but I've already
> brought in the class defn, not sure what else to do...
> >
> > P
> >
> >> On Jul 31, 2020, at 10:51 AM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
> >>
> >>
> https://stackoverflow.com/questions/34627874/c11-container-of-unique-ptr-of-forward-declared-class
> >>
> >> On Fri, Jul 31, 2020 at 12:26 PM Paul Ramsey <pramsey at cleverelephant.ca>
> wrote:
> >> We've got a CI failure in MSVC and it's totally opaque. Anyone have a
> MSVC build environment and ability to look at what's up?
> >>
> >>
> https://dev.azure.com/libgeos/geos/_build/results?buildId=585&view=logs&j=305851a9-a7bb-55db-0042-7e2b6f48aa1c&t=7382dcd6-bc22-5ed4-59fb-7b403df8dc96
> >>
> >> Thanks!
> >>
> >> P
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >>
> >>
> >> --
> >> Andrew Bell
> >> andrew.bell.ia at gmail.com
> >> _______________________________________________
> >> geos-devel mailing list
> >> geos-devel at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/geos-devel
> >
>
> _______________________________________________
> geos-devel mailing list
> geos-devel at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/geos-devel



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/geos-devel/attachments/20200731/500c4f03/attachment.html>

From geos-trac at osgeo.org  Fri Jul 31 16:01:02 2020
From: geos-trac at osgeo.org (GEOS)
Date: Fri, 31 Jul 2020 23:01:02 -0000
Subject: [geos-devel] [GEOS] #1037: GeosMakeValid returning NULL --
 regular GEOS Master 3.9
In-Reply-To: <042.f565145ce71a983da748d08bc07b15c7@osgeo.org>
References: <042.f565145ce71a983da748d08bc07b15c7@osgeo.org>
Message-ID: <057.5a5be44764e8861b2bdd4749672e3144@osgeo.org>

#1037: GeosMakeValid returning NULL -- regular GEOS Master 3.9
------------------------+---------------------------
 Reporter:  robe        |       Owner:  geos-devel@…
     Type:  defect      |      Status:  closed
 Priority:  blocker     |   Milestone:  3.9.0
Component:  Default     |     Version:  master
 Severity:  Unassigned  |  Resolution:  fixed
 Keywords:              |
------------------------+---------------------------
Changes (by robe):

 * status:  new => closed
 * resolution:   => fixed


Comment:

 Okay cunit is passing again and as mentioned on IRC, switched debbie to
 retest PostGIS master after CI of GEOS Master so we catch these issues
 early.

-- 
Ticket URL: <https://trac.osgeo.org/geos/ticket/1037#comment:2>
GEOS <http://trac.osgeo.org/geos>
GEOS (Geometry Engine - Open Source) is a C++ port of the Java Topology Suite (JTS).

