From mpg at flaxen.com  Tue Mar  1 11:28:18 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Re: exposing capabilities, hiding classes
In-Reply-To: <C8E5D068-6D8F-4B3B-BD0B-1A44C9E88AEF@gmail.com>
References: <017101cbd546$5300f5f0$f902e1d0$@flaxen.com>	<D7B106B6-37AD-4EFF-A0E4-A0D284837C01@gmail.com>	<001c01cbd760$0d23e6c0$276bb440$@flaxen.com>	<A1C157C9-B5DE-44A7-9D7E-D0F1C8DE91EC@gmail.com>	<002001cbd761$53e817b0$fbb84710$@flaxen.com>
	<C8E5D068-6D8F-4B3B-BD0B-1A44C9E88AEF@gmail.com>
Message-ID: <003101cbd82d$ade38c50$09aaa4f0$@flaxen.com>

Howard, can you get the sprinters subscribed to this list, and then we can
get them to at least get their environments set up in advance (I'm thinking
mostly of the LT folk).  Also, is there a libPC trac instance?

-mpg


> -----Original Message-----
> From: libpc-bounces@lists.osgeo.org [mailto:libpc-bounces@lists.osgeo.org]
> On Behalf Of Howard Butler
> Sent: Monday, February 28, 2011 11:54 AM
> To: libpc@lists.osgeo.org
> Cc: Michael Smith
> Subject: [libpc] Re: exposing capabilities, hiding classes
> 
> * Discussion/design/evaluation of driver/Stage model.  Bring in Frank to
> discuss what he's learned from GDAL and OGR and what he might do
> different too.
> * Decide on a documentation setup.  I'm leaning toward using Sphinx
(Sphinx
> can do C++ docs with its domain stuff) and hand-crafted docs instead of
> Doxygen
> * Polish up three drivers (Native LAS, libLAS-based LAS, Oracle Point
Cloud)
> * Entice Rosen et. al. to start playing around with MG4
> * TXT driver?
> 
> 
> On Feb 28, 2011, at 10:05 AM, Michael P. Gerlek wrote:
> 
> > Do we have a list of goals for the sprint?   (/me loves lists)
> >
> > * Intro to the new libPC framework (mpg)
> >
> > * new/sample driver/filter development (all)
> >  - MrSID/MG4-lidar
> >  - http://libe57.org/
> >  - ...?
> >
> > * ...?
> >
> > -mpg
> >
> >
> >
> >> -----Original Message-----
> >> From: Howard Butler [mailto:hobu.inc@gmail.com]
> >> Sent: Monday, February 28, 2011 7:57 AM
> >> To: mpg@flaxen.com
> >> Cc: 'Michael Smith'; libpc@lists.osgeo.org
> >> Subject: Re: exposing capabilities, hiding classes
> >>
> >>
> >> On Feb 28, 2011, at 9:56 AM, Michael P. Gerlek wrote:
> >>
> >>> (CC'ing the list)
> >>>
> >>> OK, I'll look at that today.  [I assume this is "traits" like char
> >>> traits in strings?  I've seen them mentioned, but have never learned
> >>> anything about them since I live in an 8-bit, old-fashioned, EN-us
> >>> only world...]
> >>>
> >>> In any case, I think this should be discussion #1 for the sprint
> >>> (two weeks away, yikes) -- I think we can proceed as-is without any
> >>> undue damage / excess pain to the future actual model?
> >>
> >> yep.  We still need drivers cooked up for examples for the sprint
> >> regardless....
> >>
> >>>
> >>> -mpg
> >>>
> >>>> -----Original Message-----
> >>>> From: Howard Butler [mailto:hobu.inc@gmail.com]
> >>>> Sent: Monday, February 28, 2011 7:37 AM
> >>>> To: mpg@flaxen.com
> >>>> Cc: Michael Smith
> >>>> Subject: Re: exposing capabilities, hiding classes
> >>>>
> >>>> What about traits-style as an alternative to the A and B you've set
> >>>> up in
> >>> the
> >>>> email below?
> >>>>
> >>>>
> >>
> http://www.boost.org/doc/libs/1_46_0/libs/type_traits/doc/html/boost_
> >>>> ty
> >>>> petraits/background.html
> >>>>
> >>>>
> >>>> On Feb 25, 2011, at 5:47 PM, Michael P. Gerlek wrote:
> >>>>
> >>>>> The idea under discussion is to find a way to not have to expose a
> >>>>> zillion different classes to the user -- such as a LAS reader, a
> >>>>> decimation filter, an Oracle writer, etc.  The reason for this
> >>>>> idea is
> >>> because
> >>>> (1) it "feels"
> >>>>> like exposing too many headers to the user and giving him too much
> >>>>> to think about, and (2) every header we "expose" is one more area
> >>>>> that we need to worry about keeping clean between releases.
> >>>>>
> >>>>> To implement this idea, then, we want to expose "capabilities" or
> >>>> "features"
> >>>>> instead.  (I think of this as letting the user see an "abstract"
> >>>>> feature set instead of an actual "implementation".)
> >>>>>
> >>>>> Consider a workflow where we want to build a pipeline that reads a
> >>>>> LAS file, crops it, and writes it out as LAZ using point format 7.
> >>>>> In the current model this would look like:
> >>>>>
> >>>>>  LasReader reader("foo.las")
> >>>>>
> >>>>>  Bounds bounds(0,0,0,100,100,100)
> >>>>>  Cropper filter(reader, bounds)
> >>>>>
> >>>>>  LazWriter writer("bar.laz", filter)
> >>>>>
> >>>>>  writer.write()
> >>>>>
> >>>>> In the proposed model, this would look something like this:
> >>>>>
> >>>>>  Stage reader = createStage(READER_LAS)
> >>>>>  reader.setInputFile("foo.las")
> >>>>>
> >>>>>  Stage filter = createStage(FILTER_CROP)
> >>>>>  filter.setPrevStage(reader)
> >>>>>  Bounds bounds(0,0,0,100,100,100)
> >>>>>  filter.setBounds(bounds)
> >>>>>
> >>>>>  Stage writer = createStage(WRITER_LAZ)
> >>>>>  writer.setOutputFile("bar.laz")
> >>>>>  writer.setPointType(X)
> >>>>>  writer.setPrevStage(writer)
> >>>>>
> >>>>>  writer.write()
> >>>>>
> >>>>> In this world, the Stage base class always has these member
> >>>>> functions, although setInputFile(), setOutputFile(), setBounds(),
> >>>>> and
> >>> setPrevStage().
> >>>>> They are unimplemented, however, unless
> >>>>> Stage.getCapabilities(FEATURE_NAME)==true.  ((In the above
> >>>>> example,
> >>>> we
> >>>>> "know" the feature setInputFile() is available because we
> >>>>> specifically asked
> >>>>> createStage() for a kind of reader, but in general we would not
> >>>>> "know".))
> >>>>>
> >>>>> (Am I right so far?)
> >>>>>
> >>>>> In the limit, then, this idea would mean that every new feature we
> >>>>> come up with -- be it a writer, reader, or filter -- will have to
> >>>>> be supported by the enum we pass to createStage() and possibly
> >>>>> also have a corresponding member function in Stage.  This seems to
> >>>>> mean that every time we want to add some new kind of operation,
> we
> >>>>> need to modify (extend) a core component for that one new driver
> >>>>> feature
> >>>>> -- such as "setPointType", which only ever makes sense for a LAS
> > writer.
> >>>>>
> >>>>> Also, consider a libPC user who wants to add his own driver --
> >>>>> say, a particular filter that throws out some points based on his
> >>>>> own
> > criteria.
> >>>>> Does he have to modify the createStage() and add members to Stage
> >>>>> to do this?
> >>>>>
> >>>>> I *think* I'm therefore against this idea, because we want a
> >>>>> library that is very extensible, and we'd constantly be adding new
> >>>>> stuff to the base class, which seems to me just as bad as the
> >>>>> problem of exposing a zillion Stage-derived classes to the user.
> >>>>>
> >>>>> So, is there a middle ground, I wonder?
> >>>>>
> >>>>> -mpg
> >>>>>
> >>>>>
> >>>
> >
> 
> _______________________________________________
> libpc mailing list
> libpc@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/libpc


From mpg at flaxen.com  Tue Mar  1 12:30:43 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Re: exposing capabilities, hiding classes
In-Reply-To: <C8E5D068-6D8F-4B3B-BD0B-1A44C9E88AEF@gmail.com>
References: <017101cbd546$5300f5f0$f902e1d0$@flaxen.com>	<D7B106B6-37AD-4EFF-A0E4-A0D284837C01@gmail.com>	<001c01cbd760$0d23e6c0$276bb440$@flaxen.com>	<A1C157C9-B5DE-44A7-9D7E-D0F1C8DE91EC@gmail.com>	<002001cbd761$53e817b0$fbb84710$@flaxen.com>
	<C8E5D068-6D8F-4B3B-BD0B-1A44C9E88AEF@gmail.com>
Message-ID: <003801cbd836$65c78800$31569800$@flaxen.com>

> >>>> What about traits-style as an alternative 

I read the page on Boost's type-traits support last night, and am
interested.  I don't see how type-traits applies to us exactly yet, but it
may be that aggressive templatization might do a lot for us.  But templates
are something I know very little about, so I'm going to try and read a book
on generic/meta programming before the sprint and see if I get inspired.

-mpg



From mpg at flaxen.com  Tue Mar  1 18:28:41 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] quick perf look
Message-ID: <006801cbd868$6781cf70$36856e50$@flaxen.com>

I ran "pc2pc -i MtStHelens.las -o x.las" against "las2las -i MtStHelens.las
-o x.las" this afternoon.  I was getting about 3.0 secs for pc2pc and 2.5
secs for las2las.  [The writer still isn't bit for bit right in the headers,
but it's close enough for this exercise.]

[Yes, this is using the "LiblasReader/Writer" path, so we're really just
looking at overhead here.  If we used the native LasReader/Writer, I expect
us to be in much better shape.]

3.0-vs-2.5 isn't as good as I'd like, but it's not unreasonable.  Looking at
the profiles for pc2pc, functions in the libpc:: namespace seem to account
for ~15-20% of the runtime, but I'm not real confident of the amount of
sampling for such a short run.

A big part of that, however, does seem to be the code that moves the
individual fields between the liblas::Point and the libpc::PointData -- on
both the read and write sides, the code to move the fields is a long,
branchless sequence of calls to Point.SetFoo() and Point.GetFoo().  If I
could use Point's direct SetData/GetData calls to map into the PointData
buffer, a lot of that might go away.

So anyway, I'm not too worried at this point.

-mpg



From mpg at flaxen.com  Tue Mar  1 18:59:36 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] RE: quick perf look
Message-ID: <006c01cbd86c$b9402f10$2bc08d30$@flaxen.com>

I couldn't let that one rest, so I quickly hacked on the "native"
LasReader/Writer classes just enough to get MtStHelens to seem to work:
pc2pc clocked in at 1.8 secs, against las2las at 2.5 secs.

*SWISH*!


[This is not a validated result, as the native Las classes are half-baked,
but they do basically seem to be functional enough to get a ballpark point
format 0 result.  Don't try this at home.]

-mpg



> -----Original Message-----
> From: Michael P. Gerlek [mailto:mpg@flaxen.com]
> Sent: Tuesday, March 01, 2011 3:29 PM
> To: libpc@lists.osgeo.org
> Subject: quick perf look
> 
> I ran "pc2pc -i MtStHelens.las -o x.las" against "las2las -i
MtStHelens.las -o
> x.las" this afternoon.  I was getting about 3.0 secs for pc2pc and 2.5
secs for
> las2las.  [The writer still isn't bit for bit right in the headers, but
it's close
> enough for this exercise.]
> 
> [Yes, this is using the "LiblasReader/Writer" path, so we're really just
looking
> at overhead here.  If we used the native LasReader/Writer, I expect us to
be
> in much better shape.]
> 
> 3.0-vs-2.5 isn't as good as I'd like, but it's not unreasonable.  Looking
at the
> profiles for pc2pc, functions in the libpc:: namespace seem to account for
> ~15-20% of the runtime, but I'm not real confident of the amount of
sampling
> for such a short run.
> 
> A big part of that, however, does seem to be the code that moves the
> individual fields between the liblas::Point and the libpc::PointData -- on
both
> the read and write sides, the code to move the fields is a long,
branchless
> sequence of calls to Point.SetFoo() and Point.GetFoo().  If I could use
Point's
> direct SetData/GetData calls to map into the PointData buffer, a lot of
that
> might go away.
> 
> So anyway, I'm not too worried at this point.
> 
> -mpg



From hobu.inc at gmail.com  Wed Mar  2 11:24:17 2011
From: hobu.inc at gmail.com (Howard Butler)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] RE: quick perf look
In-Reply-To: <006c01cbd86c$b9402f10$2bc08d30$@flaxen.com>
References: <006c01cbd86c$b9402f10$2bc08d30$@flaxen.com>
Message-ID: <23F87283-F136-481B-AB90-670DE8824382@gmail.com>

Not surprised.  I assume you were doing this tests in release mode as well?  If not, pc2pc would probably win by more.


On Mar 1, 2011, at 5:59 PM, Michael P. Gerlek wrote:

> I couldn't let that one rest, so I quickly hacked on the "native"
> LasReader/Writer classes just enough to get MtStHelens to seem to work:
> pc2pc clocked in at 1.8 secs, against las2las at 2.5 secs.
> 
> *SWISH*!
> 
> 
> [This is not a validated result, as the native Las classes are half-baked,
> but they do basically seem to be functional enough to get a ballpark point
> format 0 result.  Don't try this at home.]
> 
> -mpg
> 
> 
> 
>> -----Original Message-----
>> From: Michael P. Gerlek [mailto:mpg@flaxen.com]
>> Sent: Tuesday, March 01, 2011 3:29 PM
>> To: libpc@lists.osgeo.org
>> Subject: quick perf look
>> 
>> I ran "pc2pc -i MtStHelens.las -o x.las" against "las2las -i
> MtStHelens.las -o
>> x.las" this afternoon.  I was getting about 3.0 secs for pc2pc and 2.5
> secs for
>> las2las.  [The writer still isn't bit for bit right in the headers, but
> it's close
>> enough for this exercise.]
>> 
>> [Yes, this is using the "LiblasReader/Writer" path, so we're really just
> looking
>> at overhead here.  If we used the native LasReader/Writer, I expect us to
> be
>> in much better shape.]
>> 
>> 3.0-vs-2.5 isn't as good as I'd like, but it's not unreasonable.  Looking
> at the
>> profiles for pc2pc, functions in the libpc:: namespace seem to account for
>> ~15-20% of the runtime, but I'm not real confident of the amount of
> sampling
>> for such a short run.
>> 
>> A big part of that, however, does seem to be the code that moves the
>> individual fields between the liblas::Point and the libpc::PointData -- on
> both
>> the read and write sides, the code to move the fields is a long,
> branchless
>> sequence of calls to Point.SetFoo() and Point.GetFoo().  If I could use
> Point's
>> direct SetData/GetData calls to map into the PointData buffer, a lot of
> that
>> might go away.
>> 
>> So anyway, I'm not too worried at this point.
>> 
>> -mpg
> 
> 
> _______________________________________________
> libpc mailing list
> libpc@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/libpc


From mpg at flaxen.com  Wed Mar  2 11:28:16 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] RE: quick perf look
In-Reply-To: <23F87283-F136-481B-AB90-670DE8824382@gmail.com>
References: <006c01cbd86c$b9402f10$2bc08d30$@flaxen.com>
	<23F87283-F136-481B-AB90-670DE8824382@gmail.com>
Message-ID: <00b301cbd8f6$d7326670$85973350$@flaxen.com>

Yes, release mode (actually RelWithDebugInfo, under Win64).

-mpg


> -----Original Message-----
> From: libpc-bounces@lists.osgeo.org [mailto:libpc-bounces@lists.osgeo.org]
> On Behalf Of Howard Butler
> Sent: Wednesday, March 02, 2011 8:24 AM
> To: libpc@lists.osgeo.org
> Subject: Re: [libpc] RE: quick perf look
> 
> Not surprised.  I assume you were doing this tests in release mode as
well?  If
> not, pc2pc would probably win by more.
> 
> 
> On Mar 1, 2011, at 5:59 PM, Michael P. Gerlek wrote:
> 
> > I couldn't let that one rest, so I quickly hacked on the "native"
> > LasReader/Writer classes just enough to get MtStHelens to seem to work:
> > pc2pc clocked in at 1.8 secs, against las2las at 2.5 secs.
> >
> > *SWISH*!
> >
> >
> > [This is not a validated result, as the native Las classes are
> > half-baked, but they do basically seem to be functional enough to get
> > a ballpark point format 0 result.  Don't try this at home.]
> >
> > -mpg
> >
> >
> >
> >> -----Original Message-----
> >> From: Michael P. Gerlek [mailto:mpg@flaxen.com]
> >> Sent: Tuesday, March 01, 2011 3:29 PM
> >> To: libpc@lists.osgeo.org
> >> Subject: quick perf look
> >>
> >> I ran "pc2pc -i MtStHelens.las -o x.las" against "las2las -i
> > MtStHelens.las -o
> >> x.las" this afternoon.  I was getting about 3.0 secs for pc2pc and
> >> 2.5
> > secs for
> >> las2las.  [The writer still isn't bit for bit right in the headers,
> >> but
> > it's close
> >> enough for this exercise.]
> >>
> >> [Yes, this is using the "LiblasReader/Writer" path, so we're really
> >> just
> > looking
> >> at overhead here.  If we used the native LasReader/Writer, I expect
> >> us to
> > be
> >> in much better shape.]
> >>
> >> 3.0-vs-2.5 isn't as good as I'd like, but it's not unreasonable.
> >> Looking
> > at the
> >> profiles for pc2pc, functions in the libpc:: namespace seem to
> >> account for ~15-20% of the runtime, but I'm not real confident of the
> >> amount of
> > sampling
> >> for such a short run.
> >>
> >> A big part of that, however, does seem to be the code that moves the
> >> individual fields between the liblas::Point and the libpc::PointData
> >> -- on
> > both
> >> the read and write sides, the code to move the fields is a long,
> > branchless
> >> sequence of calls to Point.SetFoo() and Point.GetFoo().  If I could
> >> use
> > Point's
> >> direct SetData/GetData calls to map into the PointData buffer, a lot
> >> of
> > that
> >> might go away.
> >>
> >> So anyway, I'm not too worried at this point.
> >>
> >> -mpg
> >
> >
> > _______________________________________________
> > libpc mailing list
> > libpc@lists.osgeo.org
> > http://lists.osgeo.org/mailman/listinfo/libpc
> 
> _______________________________________________
> libpc mailing list
> libpc@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/libpc


From hobu.inc at gmail.com  Fri Mar  4 09:53:51 2011
From: hobu.inc at gmail.com (Howard Butler)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Agenda items for Montreal Sprint
Message-ID: <DD7675C4-F801-46E7-970B-C89BCDEA610D@gmail.com>

All,

I have added a few items to the agenda for the Montreal Sprint.  Please add more as needed.

<http://wiki.osgeo.org/wiki/Montreal_Code_Sprint_2011_Agenda#libLAS>

Thanks,

Howard
From hobu.inc at gmail.com  Sat Mar  5 14:20:10 2011
From: hobu.inc at gmail.com (Howard Butler)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Producer/Consumer vs Reader/Writer
Message-ID: <86939A6A-C203-48F2-9545-966D28BCDCE7@gmail.com>

Michael,

I am working on creating a writer for OCI and running into some dissonance which I'm sure is my feeble brain's fault.  Here's what has to happen...

Read data from a Reader (LAS, text, etc) -> reorganize data via Chipper into "blocks" -> write blocks into Oracle by reading reorganized data.

Given the current model, and what I've done so far for the chipper, what are the big picture relationships that need to happen?  Is there stuff that's not going to fit so well?

A couple of questions:

- Does Producer == Reader and Consumer == Writer more accurately describe the relationship and intent of these objects?
- How can the writer reasonably perform random reads into the data?  Should the Chipper hook up a cache stage somehow to reorganize the data into the blocks and memory cache it?

Howard
From mpg at flaxen.com  Sat Mar  5 14:39:39 2011
From: mpg at flaxen.com (Michael Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Producer/Consumer vs Reader/Writer
In-Reply-To: <86939A6A-C203-48F2-9545-966D28BCDCE7@gmail.com>
References: <86939A6A-C203-48F2-9545-966D28BCDCE7@gmail.com>
Message-ID: <-2072782120420278182@unknownmsgid>

Ah yes, Feeble Brain Syndrome -- I know it well.

A Reader is a Producer, a Writer is a Consumer, and a Filter is both a
P and a C.  This makes me think about renaming the classes, since P
and C are more suggestive. (I did think about Source and Sink, too.)
Would it be worth it to take on multiple inheritance to make a filter
be a class that sports both a P and a C interface?

Your mental model is correct, and random access for the 2nd phase of
the chipping process is indeed going to be painful (as it presumably
is in liblas too?). A relatively simple caching filter would go a long
way here, I think, and I could write you something simple on Monday...

But really the chipper wants a data source that has already been
indexed.  I almost think the 1st phase of the chipper, where it does
all the sequential point reading, should include an index-creating
stage almost as a side-effect?

[I'm in bed today again with my heading pad, but am reading a book on
C++ template programming. Powerful stuff.  Will it help with the
PointData model, a la PCL?  Dunno yet...]

.mpg

On Mar 5, 2011, at 11:20 AM, Howard Butler <hobu.inc@gmail.com> wrote:

> Michael,
>
> I am working on creating a writer for OCI and running into some dissonance which I'm sure is my feeble brain's fault.  Here's what has to happen...
>
> Read data from a Reader (LAS, text, etc) -> reorganize data via Chipper into "blocks" -> write blocks into Oracle by reading reorganized data.
>
> Given the current model, and what I've done so far for the chipper, what are the big picture relationships that need to happen?  Is there stuff that's not going to fit so well?
>
> A couple of questions:
>
> - Does Producer == Reader and Consumer == Writer more accurately describe the relationship and intent of these objects?
> - How can the writer reasonably perform random reads into the data?  Should the Chipper hook up a cache stage somehow to reorganize the data into the blocks and memory cache it?
>
> Howard_______________________________________________
> libpc mailing list
> libpc@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/libpc

From mpg at flaxen.com  Mon Mar  7 19:28:16 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Producer/Consumer
Message-ID: <02b801cbdd27$b8ff4030$2afdc090$@flaxen.com>

The more I think about it, the more I'm thinking the hierarchy we have is
still not quite right.  The PointData abstraction is okay, but how you talk
to a data source is still open for debate.

First, I think we need to remove read() from the base Stage class -- it
should just have the header (list of dimensions, total number of points,
spatial bounds) and declare not any point reading functions.

Producer derives from Stage, and adds the ability to read points.  But
should we really be accessing points sequentially only?  With the model
right now, an OCI reader would (I think) not really have the concept of
reading a sequential list of points, since OCI really wants you to request
points by a given region, right?

So maybe the basic read() operation should be more like

    N = readBegin(<region>)    # returns num points in region
    readBuffer(N points)     # maybe this is done in chunks
    readEnd()

This model would work for sequential readers (like a LAS file) if you assume
the <region> is the degenerate case of the whole file's bounding box.

Or maybe we really should have two readers models -- SequentialProducer and
SpatialProducer -- the former being what we have now, and the latter being
defined as request-by-spatial-region.

-mpg



From mpg at flaxen.com  Wed Mar  9 10:31:34 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Sprint prep reminder
Message-ID: <000e01cbde6f$13935570$3aba0050$@flaxen.com>

Gentle Reminder:

If you haven't already, pls make sure your laptop is set up for builds
before you arrive.  The requirements for building libPC are the same as for
libLAS, with the exception that you should pull down all of the boost libs,
not just the few that libLAS uses.

-mpg & the libPC bootstrapping committee



From hobu.inc at gmail.com  Sat Mar 12 21:34:00 2011
From: hobu.inc at gmail.com (Howard Butler)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Producer/Consumer vs Reader/Writer
In-Reply-To: <-2072782120420278182@unknownmsgid>
References: <86939A6A-C203-48F2-9545-966D28BCDCE7@gmail.com>
	<-2072782120420278182@unknownmsgid>
Message-ID: <EC89C9CA-77A0-47CA-A806-A03730887C51@gmail.com>

Just a followup.

I was able to get an OCI writer working this morning.  The biggest hiccup was needing to seek back to 0 after different stages to reset the reader(s).

After that, it was quite straightforward.

See you in Montreal!

Howard

On Mar 5, 2011, at 1:39 PM, Michael Gerlek wrote:

> Ah yes, Feeble Brain Syndrome -- I know it well.
> 
> A Reader is a Producer, a Writer is a Consumer, and a Filter is both a
> P and a C.  This makes me think about renaming the classes, since P
> and C are more suggestive. (I did think about Source and Sink, too.)
> Would it be worth it to take on multiple inheritance to make a filter
> be a class that sports both a P and a C interface?
> 
> Your mental model is correct, and random access for the 2nd phase of
> the chipping process is indeed going to be painful (as it presumably
> is in liblas too?). A relatively simple caching filter would go a long
> way here, I think, and I could write you something simple on Monday...
> 
> But really the chipper wants a data source that has already been
> indexed.  I almost think the 1st phase of the chipper, where it does
> all the sequential point reading, should include an index-creating
> stage almost as a side-effect?
> 
> [I'm in bed today again with my heading pad, but am reading a book on
> C++ template programming. Powerful stuff.  Will it help with the
> PointData model, a la PCL?  Dunno yet...]
> 
> .mpg
> 
> On Mar 5, 2011, at 11:20 AM, Howard Butler <hobu.inc@gmail.com> wrote:
> 
>> Michael,
>> 
>> I am working on creating a writer for OCI and running into some dissonance which I'm sure is my feeble brain's fault.  Here's what has to happen...
>> 
>> Read data from a Reader (LAS, text, etc) -> reorganize data via Chipper into "blocks" -> write blocks into Oracle by reading reorganized data.
>> 
>> Given the current model, and what I've done so far for the chipper, what are the big picture relationships that need to happen?  Is there stuff that's not going to fit so well?
>> 
>> A couple of questions:
>> 
>> - Does Producer == Reader and Consumer == Writer more accurately describe the relationship and intent of these objects?
>> - How can the writer reasonably perform random reads into the data?  Should the Chipper hook up a cache stage somehow to reorganize the data into the blocks and memory cache it?
>> 
>> Howard_______________________________________________
>> libpc mailing list
>> libpc@lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/libpc


From hobu.inc at gmail.com  Wed Mar 23 09:40:37 2011
From: hobu.inc at gmail.com (Howard Butler)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] putenv
Message-ID: <C3A111D0-7CA4-4F03-AF5C-C9CFF4606002@gmail.com>

putenv is not "const char*" on unix.

What should we do?  Casting it to non-const is probably bad in this case because the user needs to keep it alive.

Howard
From mpg at flaxen.com  Wed Mar 23 10:33:49 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] putenv
In-Reply-To: <C3A111D0-7CA4-4F03-AF5C-C9CFF4606002@gmail.com>
References: <C3A111D0-7CA4-4F03-AF5C-C9CFF4606002@gmail.com>
Message-ID: <004901cbe967$54cf82e0$fe6e88a0$@flaxen.com>

Oh, *that* was what the weird code was about... I shoulda left it alone.

I like pushing weirdo or OS-dependent stuff like this to one place, like
Utils.

Maybe you could do a static class in Utils.cpp to hold the strings?

-mpg


> -----Original Message-----
> From: libpc-bounces@lists.osgeo.org [mailto:libpc-bounces@lists.osgeo.org]
> On Behalf Of Howard Butler
> Sent: Wednesday, March 23, 2011 6:41 AM
> To: libpc@lists.osgeo.org
> Subject: [libpc] putenv
> 
> putenv is not "const char*" on unix.
> 
> What should we do?  Casting it to non-const is probably bad in this case
> because the user needs to keep it alive.
> 
> Howard_______________________________________________
> libpc mailing list
> libpc@lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/libpc


From mpg at flaxen.com  Wed Mar 23 12:52:43 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Itermania
Message-ID: <007301cbe97a$bbd56f00$33804d00$@flaxen.com>

I have landed the new Iterator system.  The intent is that the following
"semantics" shall apply to Stages and their Iterators...


Stages:

* A Stage should be a const object which holds info about the
file/stage/whatever.

* Each Stage knows how to create an Iterator for its own type.

* Multiple iterators on a stage should be perfectly safe.

* (some of the stage implementations are not complete yet for
thread-safety/const-correctness; am fixing today)

* A stage has a getNumPoints() function.  This returns 0 or nonzero.  If
nonzero, that is how many points are available from the stage.  If zero,
check getPointCountType() -- if it returns the Unknown enum, then that stage
has no idear how many points it has.  Example: for a crop filter attached to
LAS reader for a 1000-point file, the reader stage will say 1000 but the
filter will say "unknown".  Example: a drone streaming down las data will
say "unknown" because the number of points is effectively
unknowable/infinite.


Iterators:

* An Iter has three "impl" functions you need to provide (pure virtuals).

* readImpl(data) will fill up the data buffer, setting at most
data.getCapacity() points -- data.getNumPoints() is how many points were
actually set, and this value is also returned from the function

* skipImpl(count) will advance the stage by up to that many points, and
return the number of points it actually advanced (these two values may be
different if you try to skip past the end of the file or beyond the number
of points possible)

* atEndImpl() will return true iff there are no more points to be read from
that stage

* The above three Impl functions are protected; their public counterparts
are read(), skip(), and atEnd().  The public versions wrap the protected
versions, so as to be able to provide the bookkeeping for keeping track of
the "current point index" of the iterator.

* The "current point index" is defined as a value which starts at 0 and
increments by N every time you read (or skip) N points.  This "ordering" of
points is an artificial construct maintained by the iterator -- it might
have no meaning in the "real" world, e.g. a database doesn't have a (simple)
notion of the "7th" point.

* For example, consider a DecimationFilter F with the step size set to 10
attached to a LasReader R with a file of 1000 points:

       PointData buffer(capacity=4)

       numRead = F.read(buffer)
       assert(numRead == 1)
       assert(R.getIndex() == 4)
       assert(F.getIndex()==1)

       numRead = F.read(buffer)
       assert(numRead == 0)
       assert(R.getIndex() == 8)
       assert(F.getIndex()==1)

       numRead = F.read(buffer)
       assert(numRead == 1)
       assert(R.getIndex() == 12)
       assert(F.getIndex()==2)



-mpg



From mpg at flaxen.com  Wed Mar 23 18:47:35 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] RE: Itermania
In-Reply-To: <007301cbe97a$bbd56f00$33804d00$@flaxen.com>
References: <007301cbe97a$bbd56f00$33804d00$@flaxen.com>
Message-ID: <009301cbe9ac$4eb65510$ec22ff30$@flaxen.com>

The below actually refers to the "SequentialIterator" class.  There is also
now a "RandomIterator" which sports these pure virtual methods:

   - readImpl(data)
   - seek(N)

The read() is the same as the sequential case, and the seek takes an
absolute position index (as opposed to the sequential's forward-only
relative delta).

Stages now have methods "bool supportsSequentialIterator()" and "bool
supportsRandomIterator()".  Today, only three guys support randomness:
CacheFilter, FauxReader, and LiblasReader.

-mpg


> -----Original Message-----
> From: Michael P. Gerlek [mailto:mpg@flaxen.com]
> Sent: Wednesday, March 23, 2011 9:53 AM
> To: libpc@lists.osgeo.org
> Subject: Itermania
> 
> I have landed the new Iterator system.  The intent is that the following
> "semantics" shall apply to Stages and their Iterators...
> 
> 
> Stages:
> 
> * A Stage should be a const object which holds info about the
> file/stage/whatever.
> 
> * Each Stage knows how to create an Iterator for its own type.
> 
> * Multiple iterators on a stage should be perfectly safe.
> 
> * (some of the stage implementations are not complete yet for thread-
> safety/const-correctness; am fixing today)
> 
> * A stage has a getNumPoints() function.  This returns 0 or nonzero.  If
> nonzero, that is how many points are available from the stage.  If zero,
check
> getPointCountType() -- if it returns the Unknown enum, then that stage has
> no idear how many points it has.  Example: for a crop filter attached to
LAS
> reader for a 1000-point file, the reader stage will say 1000 but the
filter will
> say "unknown".  Example: a drone streaming down las data will say
> "unknown" because the number of points is effectively unknowable/infinite.
> 
> 
> Iterators:
> 
> * An Iter has three "impl" functions you need to provide (pure virtuals).
> 
> * readImpl(data) will fill up the data buffer, setting at most
> data.getCapacity() points -- data.getNumPoints() is how many points were
> actually set, and this value is also returned from the function
> 
> * skipImpl(count) will advance the stage by up to that many points, and
> return the number of points it actually advanced (these two values may be
> different if you try to skip past the end of the file or beyond the number
of
> points possible)
> 
> * atEndImpl() will return true iff there are no more points to be read
from
> that stage
> 
> * The above three Impl functions are protected; their public counterparts
are
> read(), skip(), and atEnd().  The public versions wrap the protected
versions,
> so as to be able to provide the bookkeeping for keeping track of the
"current
> point index" of the iterator.
> 
> * The "current point index" is defined as a value which starts at 0 and
> increments by N every time you read (or skip) N points.  This "ordering"
of
> points is an artificial construct maintained by the iterator -- it might
have no
> meaning in the "real" world, e.g. a database doesn't have a (simple)
notion of
> the "7th" point.
> 
> * For example, consider a DecimationFilter F with the step size set to 10
> attached to a LasReader R with a file of 1000 points:
> 
>        PointData buffer(capacity=4)
> 
>        numRead = F.read(buffer)
>        assert(numRead == 1)
>        assert(R.getIndex() == 4)
>        assert(F.getIndex()==1)
> 
>        numRead = F.read(buffer)
>        assert(numRead == 0)
>        assert(R.getIndex() == 8)
>        assert(F.getIndex()==1)
> 
>        numRead = F.read(buffer)
>        assert(numRead == 1)
>        assert(R.getIndex() == 12)
>        assert(F.getIndex()==2)
> 
> 
> 
> -mpg



From mpg at flaxen.com  Wed Mar 23 19:14:59 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] Chipper notes
Message-ID: <009d01cbe9b0$22a9cb60$67fd6220$@flaxen.com>

[from pastebin, here for posterity]


Step 1:
  - chipper stage is connected to LAS reader stage
  - for each point P, read in order by an iterator, do
     . point P is recorded in chipper's memory as the tuple {point index
number, X, Y, Z} 

Step 2:
  - chipper groups all the tuples into blocks of tuples [no libPC/stage
action here?]

Step 3:
  - for each chipper block B, do
    . open a new Oracle blob
    . for each tuple item T in block B do
       - get point P from T.index
       - write P to the blob
    . close the blob


SequentialIterator      # what we have now
  - skip(count)           # count is a positive, relative value
  - bool atEnd()
  - read(buffer)          # reads N points [curIndex .. curIndex+N)

RandomIterator          # what Mr Chips wants
  - seek(pos)             # pos is a positive, absolute value
  - read(buffer)          # reads N points  [curIndex .. curIndex+N)


virtual bool Stage::supportsSequentialIterators() = 0
virtual SequentialIterator* Stage::createSequentialIterator() = 0

virtual bool Stage::supportsRandomIterators() = 0
virtual RandomIterator* Stage::createRandomIterator() = 0


SeqentialIterators only read "forwards", but RandomIterators can jump
around.  But both iterators will respond with a contiguous block of points
from a read() call, which implies that even with a RandomIterator you have
some notion of sequencing.

It makes sense to keep these two kinds of iterators separate (as opposed to
adding a seek() method to the current, sequential iterator) because some
file formats (like LAZ) and some stages (like crop) have no reasonably way
to move their cursor to a given index position.



From mpg at flaxen.com  Fri Mar 25 00:07:03 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] property tree / options
Message-ID: <011901cbeaa2$1a512c40$4ef384c0$@flaxen.com>

At the sprint, we came up with a plan for using property trees to pass
options to Stages -- or something like that.  I can't make heads or tails of
my notes.  Can someone pls summarize the plan we made?

-mpg



From hobu.inc at gmail.com  Fri Mar 25 09:14:16 2011
From: hobu.inc at gmail.com (Howard Butler)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] property tree / options
In-Reply-To: <011901cbeaa2$1a512c40$4ef384c0$@flaxen.com>
References: <011901cbeaa2$1a512c40$4ef384c0$@flaxen.com>
Message-ID: <66DB845F-159B-4935-B3C2-C2CC042E94DA@gmail.com>


On Mar 24, 2011, at 11:07 PM, Michael P. Gerlek wrote:

> At the sprint, we came up with a plan for using property trees to pass
> options to Stages -- or something like that.  I can't make heads or tails of
> my notes.  Can someone pls summarize the plan we made?

I believe the plan was something like:

* Give each stage a public Initialize(boost::property_tree::ptree& tree) method that each stage's constructor can choose to call or not in its ctors
* Give each stage a public ValidateOptions() method that throws libpc::validation_errors if something isn't right.
* Give each stage a public boost::property_tree::ptree GetDefaultOptions() that fills out a default tree that the user can then tweak values of and set on Initialize

I'm not sure this is the way to go even though I lean this way...

Howard
From mpg at flaxen.com  Fri Mar 25 12:11:36 2011
From: mpg at flaxen.com (Michael P. Gerlek)
Date: Tue Jun 14 16:45:30 2011
Subject: [libpc] property tree / options
In-Reply-To: <66DB845F-159B-4935-B3C2-C2CC042E94DA@gmail.com>
References: <011901cbeaa2$1a512c40$4ef384c0$@flaxen.com>
	<66DB845F-159B-4935-B3C2-C2CC042E94DA@gmail.com>
Message-ID: <013401cbeb07$5216de80$f6449b80$@flaxen.com>

Sorry, I don't quite understand... Here's a start, can you flesh it out a
bit for me?


class libpc::Stage
{
public:

  Stage()      // default ctor doesn't take a ptree
  { ... }

  Stage(ptree& tree)  // alternate ctor, which uses the ptree system
  { 
    Initialize(tree)
    ...
  }
  
protected:
  virtual Initialize(ptree& tree) {}    // user can implement
};
  
class MyStage : Stage
{
public:
  MyStage(ptree& tree) :
     Stage(tree)
  {...}

private:
  Initialize(ptree& tree)
  {
     // do something with the options
    }
};



> -----Original Message-----
> From: Howard Butler [mailto:hobu.inc@gmail.com]
> Sent: Friday, March 25, 2011 6:14 AM
> To: mpg@flaxen.com
> Cc: libpc@lists.osgeo.org
> Subject: Re: [libpc] property tree / options
> 
> 
> On Mar 24, 2011, at 11:07 PM, Michael P. Gerlek wrote:
> 
> > At the sprint, we came up with a plan for using property trees to pass
> > options to Stages -- or something like that.  I can't make heads or
> > tails of my notes.  Can someone pls summarize the plan we made?
> 
> I believe the plan was something like:
> 
> * Give each stage a public Initialize(boost::property_tree::ptree& tree)
> method that each stage's constructor can choose to call or not in its
ctors
> * Give each stage a public ValidateOptions() method that throws
> libpc::validation_errors if something isn't right.
> * Give each stage a public boost::property_tree::ptree GetDefaultOptions()
> that fills out a default tree that the user can then tweak values of and
set on
> Initialize
> 
> I'm not sure this is the way to go even though I lean this way...
> 
> Howard=


