From howard at hobu.co  Sun Oct  3 12:31:52 2021
From: howard at hobu.co (Howard Butler)
Date: Sun, 3 Oct 2021 14:31:52 -0500
Subject: [pdal] lazperf requirement for PDAL 2.4+
Message-ID: <6598B2D1-4D51-48A8-A1FF-813D55A09C8E@hobu.co>

All,

We are planning at the upcoming PDAL 2.4 release to move forward with supporting LAZ in PDAL using the ONLY the lazperf library [1]. We have made significant engineering effort with lazperf to improve the software quality vs LASzip, provide actual data integrity tests, and add enhancements to support the variable chunking that is needed for COPC [2]. 

LAZ usage like COPC, EPT, or LAZ read and write support will not be available if lazperf is not available when compiling PDAL at the upcoming 2.4.0 version. Supporting two libraries with different functionality and capabilities is difficult and costly. With Martin's recent death, the LASzip library is likely to go into pure maintenance mode, and we are not planning to pick up maintenance of that library given we that have moved forward with lazperf. 

If this has a significant impact on your upcoming workflow or distribution, please step forward with resources or time to change this trajectory.

Howard

[1] https://github.com/hobu/laz-perf
[2] https://copc.io

From sebastic at xs4all.nl  Sun Oct  3 20:31:47 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 4 Oct 2021 05:31:47 +0200
Subject: [pdal] lazperf requirement for PDAL 2.4+
In-Reply-To: <6598B2D1-4D51-48A8-A1FF-813D55A09C8E@hobu.co>
References: <6598B2D1-4D51-48A8-A1FF-813D55A09C8E@hobu.co>
Message-ID: <25d1cf4c-018c-93a4-068e-0d41f174de38@xs4all.nl>

On 10/3/21 9:31 PM, Howard Butler wrote:
> If this has a significant impact on your upcoming workflow or distribution, please step forward with resources or time to change this trajectory.

lazperf is not packaged for Debian, help to get it packaged and
continued maintenance is highly appreciated.

As I don't use PDAL myself, I'm more inclined to remove pdal from Debian
than having to maintain another piece of software I don't actually use.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From klassen.js at gmail.com  Mon Oct  4 05:29:27 2021
From: klassen.js at gmail.com (James Klassen)
Date: Mon, 4 Oct 2021 08:29:27 -0400
Subject: [pdal] lazperf requirement for PDAL 2.4+
In-Reply-To: <25d1cf4c-018c-93a4-068e-0d41f174de38@xs4all.nl>
References: <25d1cf4c-018c-93a4-068e-0d41f174de38@xs4all.nl>
Message-ID: <21A55D8B-60C4-4FEB-9F0A-AB9473EAEF47@gmail.com>

I?m torn here?

It seems important for the other GIS packages to have pdal packaged (especially with the upcoming QGIS point cloud work). It also seems like it is important to have it packaged for OSGeo Live. 

However, while I mostly run Debian stable, I build/install multiple versions of pdal, lazperf, gdal, QGIS, CloudCompare, et al. from source because the packaged versions usually aren?t up to date with what I need (and I like building from source because it helps when I need to debug/modify code).

I haven?t packaged anything for Debian before.  I have built some of my own DEBs, but I just did the bare minimum to get something that would install. I haven?t gone through any of the community process, nor cared if the packages pass lint.  Lazperf itself seems like a pretty easy place to start (few dependencies, well behaved cmake, etc).  How much ongoing effort would be required to maintain a package such as lazperf?  


> On Oct 3, 2021, at 23:39, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> ?On 10/3/21 9:31 PM, Howard Butler wrote:
>> If this has a significant impact on your upcoming workflow or distribution, please step forward with resources or time to change this trajectory.
> 
> lazperf is not packaged for Debian, help to get it packaged and
> continued maintenance is highly appreciated.
> 
> As I don't use PDAL myself, I'm more inclined to remove pdal from Debian
> than having to maintain another piece of software I don't actually use.
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal

From sebastic at xs4all.nl  Mon Oct  4 06:17:09 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 4 Oct 2021 15:17:09 +0200
Subject: [pdal] lazperf requirement for PDAL 2.4+
In-Reply-To: <21A55D8B-60C4-4FEB-9F0A-AB9473EAEF47@gmail.com>
References: <25d1cf4c-018c-93a4-068e-0d41f174de38@xs4all.nl>
 <21A55D8B-60C4-4FEB-9F0A-AB9473EAEF47@gmail.com>
Message-ID: <5a586df6-fca6-5c54-d88c-4e139c2a39b5@xs4all.nl>

On 10/4/21 2:29 PM, James Klassen wrote:
> It seems important for the other GIS packages to have pdal packaged (especially with the upcoming QGIS point cloud work). It also seems like it is important to have it packaged for OSGeo Live. 

Very true.

I initially packaged pdal because grass needed an alternative for
liblas, I was more willing to maintain packages I don't actually use
back then.

Much more time was spent to get laszip into Debian, which will now only
be used in the bullseye stable release. It was definitely not worth that
much effort.

> However, while I mostly run Debian stable, I build/install multiple versions of pdal, lazperf, gdal, QGIS, CloudCompare, et al. from source because the packaged versions usually aren?t up to date with what I need (and I like building from source because it helps when I need to debug/modify code).

Libraries with rdepds like pdal, and specifically ones with many like
gdal, are not very suited for backports. So if you need something newer
than what's in Debian stable, you either need to maintain backport for
bunch of packages or build them all from source.

> I haven?t packaged anything for Debian before.  I have built some of my own DEBs, but I just did the bare minimum to get something that would install. I haven?t gone through any of the community process, nor cared if the packages pass lint.  Lazperf itself seems like a pretty easy place to start (few dependencies, well behaved cmake, etc).  How much ongoing effort would be required to maintain a package such as lazperf?  

Packaging for Debian differs from packaging for personal repos mostly in
that the copyright file needs to be properly maintained, tooling like
licensecheck helps greatly with that.

How much effort will be required to maintain lazperf is impossible to
predict. If the SONAME changes often, you'll need to coordinate
transitions often. If it doesn't, you'll mostly need to keep up with
bugreports and new upstream releases.

As someone who actually uses lazperf you're much better suited to help
maintain the package than someone like me who doesn't. I encourage you
to package laszip and maintain it with in the Debian GIS Team. Refer to
the team policy for the workflow documentation:

 https://debian-gis-team.pages.debian.net/policy/

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From howard at hobu.co  Mon Oct  4 06:28:55 2021
From: howard at hobu.co (Howard Butler)
Date: Mon, 4 Oct 2021 08:28:55 -0500
Subject: [pdal] lazperf requirement for PDAL 2.4+
In-Reply-To: <5a586df6-fca6-5c54-d88c-4e139c2a39b5@xs4all.nl>
References: <25d1cf4c-018c-93a4-068e-0d41f174de38@xs4all.nl>
 <21A55D8B-60C4-4FEB-9F0A-AB9473EAEF47@gmail.com>
 <5a586df6-fca6-5c54-d88c-4e139c2a39b5@xs4all.nl>
Message-ID: <D2BA2C66-6DC6-47EE-80D7-8E0C6A1072FF@hobu.co>



> On Oct 4, 2021, at 8:17 AM, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> Much more time was spent to get laszip into Debian, which will now only
> be used in the bullseye stable release. It was definitely not worth that
> much effort.

At least the licensing story of lazperf is exactly the same as laszip, so it won't have to run over that particular hurdle again.

> How much effort will be required to maintain lazperf is impossible to
> predict. If the SONAME changes often, you'll need to coordinate
> transitions often. If it doesn't, you'll mostly need to keep up with
> bugreports and new upstream releases.

I would predict one or two bug fix releases per year going forward after we release lazperf 2.2.0. 

> As someone who actually uses lazperf you're much better suited to help
> maintain the package than someone like me who doesn't. I encourage you
> to package laszip and maintain it with in the Debian GIS Team. Refer to
> the team policy for the workflow documentation:
> 
> https://debian-gis-team.pages.debian.net/policy/

We're not purposefully trying to be difficult. With Martin Isenburg's recent death, his profound expertise with the LASzip library goes with it. We haven't had a LASzip release in almost two years, and there have not really been any new features in the LASzip library in 5+ years after the LAZ 1.4 encoder/decoder was released. The LASzip code is hard to follow, contains significant sections of duplication, and has a funky API. 

laz-perf adds tests, the ability to reuse the library in web assembly scenarios, and a cleaner programming API. The encoder/decoder is binary compatible with LASzip and laz-rs (great care has been taken by us and Thomas Montaigu of laz-rs to preserve this due to there being no LAZ specification beyond the LASzip code). The refactoring of the EPT and LAZ codebase to add support for COPC in PDAL provides the opportunity to move forward without dual LAZ library support.

Howard

From andrew.bell.ia at gmail.com  Mon Oct  4 06:31:28 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 4 Oct 2021 09:31:28 -0400
Subject: [pdal] lazperf requirement for PDAL 2.4+
In-Reply-To: <5a586df6-fca6-5c54-d88c-4e139c2a39b5@xs4all.nl>
References: <25d1cf4c-018c-93a4-068e-0d41f174de38@xs4all.nl>
 <21A55D8B-60C4-4FEB-9F0A-AB9473EAEF47@gmail.com>
 <5a586df6-fca6-5c54-d88c-4e139c2a39b5@xs4all.nl>
Message-ID: <CACJ51z0KMXcYsFfk1MT5BGMM98ayHf7BnypU-vK6Yk91P7Mi=g@mail.gmail.com>

Perhaps unfortunately, lazperf has slipped from being a tool to compress
data according to the LAZ algorithm into something that can read and write
complete LAS/LAZ files. This additional functionality originally existed
only for testing purposes. I think that if the encoding/decoding bits were
separate, it would be totally stable. I don't know if this matters to
people, but I thought I would mention it.

On Mon, Oct 4, 2021 at 9:17 AM Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:

> On 10/4/21 2:29 PM, James Klassen wrote:
> > It seems important for the other GIS packages to have pdal packaged
> (especially with the upcoming QGIS point cloud work). It also seems like it
> is important to have it packaged for OSGeo Live.
>
> Very true.
>
> I initially packaged pdal because grass needed an alternative for
> liblas, I was more willing to maintain packages I don't actually use
> back then.
>
> Much more time was spent to get laszip into Debian, which will now only
> be used in the bullseye stable release. It was definitely not worth that
> much effort.
>
> > However, while I mostly run Debian stable, I build/install multiple
> versions of pdal, lazperf, gdal, QGIS, CloudCompare, et al. from source
> because the packaged versions usually aren?t up to date with what I need
> (and I like building from source because it helps when I need to
> debug/modify code).
>
> Libraries with rdepds like pdal, and specifically ones with many like
> gdal, are not very suited for backports. So if you need something newer
> than what's in Debian stable, you either need to maintain backport for
> bunch of packages or build them all from source.
>
> > I haven?t packaged anything for Debian before.  I have built some of my
> own DEBs, but I just did the bare minimum to get something that would
> install. I haven?t gone through any of the community process, nor cared if
> the packages pass lint.  Lazperf itself seems like a pretty easy place to
> start (few dependencies, well behaved cmake, etc).  How much ongoing effort
> would be required to maintain a package such as lazperf?
>
> Packaging for Debian differs from packaging for personal repos mostly in
> that the copyright file needs to be properly maintained, tooling like
> licensecheck helps greatly with that.
>
> How much effort will be required to maintain lazperf is impossible to
> predict. If the SONAME changes often, you'll need to coordinate
> transitions often. If it doesn't, you'll mostly need to keep up with
> bugreports and new upstream releases.
>
> As someone who actually uses lazperf you're much better suited to help
> maintain the package than someone like me who doesn't. I encourage you
> to package laszip and maintain it with in the Debian GIS Team. Refer to
> the team policy for the workflow documentation:
>
>  https://debian-gis-team.pages.debian.net/policy/
>
> Kind Regards,
>
> Bas
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211004/66405a9a/attachment-0001.html>

From kirk.waters at noaa.gov  Fri Oct  8 08:22:16 2021
From: kirk.waters at noaa.gov (Kirk Waters - NOAA Federal)
Date: Fri, 8 Oct 2021 11:22:16 -0400
Subject: [pdal] operating on a mesh using python
Message-ID: <CADm=QrQvzA0=LVKtbFzXyLrgEk+q1xrz9BOBmavWs1ZZj33XxA@mail.gmail.com>

Hi,
I'm trying to figure out how I can take the mesh created by
filters.delaunay and modify it before converting to a raster. Perhaps the
cleanest thing is modifying the C++ code, but I thought I could mock it up
in Python first to make sure it's worthwhile. What I want to add is a way
to remove triangles that have a long leg. Like the ones I'll get over a bay
or harbor, basically to keep it from extrapolating too much.

Where I'm having a problem is trying to get the mesh back into a pdal
pipeline after I modify it. I feel like I'm missing the obvious. The
approach I have right now looks like this:
    pipe = [
        args.input,
        {"type": "filters.delaunay"}
    ]

    pl = pdal.Pipeline(json.dumps(pipe))
    pl.execute()

    m = pl.get_meshio(0)
That gets me a mesh to work with. After modifying it, I write out the mesh
as a PLY file, then read it back in again, but that doesn't really read in
as a mesh. I think it comes in as a bunch of points, so filters.faceraster
doesn't see the mesh it's expecting when I try to make the raster.

Is there another way to get that modified mesh to faceraster? Thanks for
any pointers.

Kirk Waters, PhD                     | NOAA Office for Coastal Management
Applied Sciences Program      | 2234 South Hobson Ave
843-740-1227 (empty office)   | Charleston, SC 29405
coast.noaa.gov/digitalcoast
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211008/f33a5531/attachment.html>

From p.wilkes at ucl.ac.uk  Wed Oct 20 05:35:16 2021
From: p.wilkes at ucl.ac.uk (Phil Wilkes)
Date: Wed, 20 Oct 2021 13:35:16 +0100
Subject: [pdal] Installing PDAL on OSX with rivlib
Message-ID: <CAAbCj1C0q3kM+V-E1OBL6tKX8iiNc++T=Ne3fbVCgZewcaiEYw@mail.gmail.com>

Hi there

I would like to install PDAL on a MacBook Pro (version 10.14.3) with the
RIEGL rivlib libraries. I have successfully done this on for linux OS in
the past.

When compiling I get this error

FAILED: lib/libpdal_plugin_reader_rxp.13.0.0.dylib
: &&
/Users/phil/opt/miniconda3/envs/pdal-install/bin/x86_64-apple-darwin13.4.0-clang++
-march=core2 -mtune=haswell -mssse3 -ftree-vectorize -fPIC -fPIE
-fstack-protector-strong -O2 -pipe -stdlib=libc++
-fvisibility-inlines-hidden -std=c++14 -fmessage-length=0 -isystem
/Users/phil/opt/miniconda3/envs/pdal-install/include -isysroot
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk
-dynamiclib -Wl,-headerpad_max_install_names -Wl,-pie
-Wl,-headerpad_max_install_names -Wl,-dead_strip_dylibs
-Wl,-rpath,/Users/phil/opt/miniconda3/envs/pdal-install/lib
-L/Users/phil/opt/miniconda3/envs/pdal-install/lib -compatibility_version
13.0.0 -current_version 13.0.0 -o
lib/libpdal_plugin_reader_rxp.13.0.0.dylib -install_name
@rpath/libpdal_plugin_reader_rxp.13.dylib
plugins/rxp/CMakeFiles/pdal_plugin_reader_rxp.dir/io/RxpPointcloud.cpp.o
plugins/rxp/CMakeFiles/pdal_plugin_reader_rxp.dir/io/RxpReader.cpp.o
-Wl,-rpath,/Users/phil/opt/PDAL-2.3.0-src/build/lib
lib/libpdalcpp.13.0.0.dylib lib/libpdal_util.13.0.0.dylib
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libscanlib-mt.a
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_system-mt.a
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_thread-mt.a
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_date_time-mt.a
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_regex-mt.a
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_filesystem-mt.a
-lpthread -L/Users/phil/opt/PDAL-2.3.0-src/build/lib && :
ld: warning: -pie being ignored. It is only used when linking a main
executable
ld: warning: ignoring file
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_system-mt.a,
building for macOS-x86_64 but attempting to link with file built for
unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
ld: warning: ignoring file
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_date_time-mt.a,
building for macOS-x86_64 but attempting to link with file built for
unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
ld: warning: ignoring file
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_regex-mt.a,
building for macOS-x86_64 but attempting to link with file built for
unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
ld: warning: ignoring file
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_thread-mt.a,
building for macOS-x86_64 but attempting to link with file built for
unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
ld: warning: ignoring file
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libscanlib-mt.a,
building for macOS-x86_64 but attempting to link with file built for
unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
ld: warning: ignoring file
/Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_filesystem-mt.a,
building for macOS-x86_64 but attempting to link with file built for
unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
Undefined symbols for architecture x86_64:

Then many lines similar to

"scanlib::pointcloud::on_dyntrig(scanlib::dyntrig<unsigned int const*>
const&)", referenced from:
vtable for pdal::RxpPointcloud in RxpPointcloud.cpp.o

Then finally

ld: symbol(s) not found for architecture x86_64
clang-11: error: linker command failed with exit code 1 (use -v to see
invocation)
[378/501] Building CXX object test/unit/CMakeFiles/pdal_eigen_test.dir//
/pdal/private/MathUtils.cpp.o
ninja: build stopped: subcommand failed.

I am using the *RiVLib 2.5.10 x86 64bit Linux gcc9 *and am installing in a
conda environment.


Any help gratefully received.


Phil



Dr. Phil Wilkes

UCL Geography, Gower Street, London WC1E 6BT

& NERC National Centre for Earth Observation
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211020/4e36cf4b/attachment.html>

From dbrookes at micromine.com  Thu Oct 21 23:00:51 2021
From: dbrookes at micromine.com (Daniel Brookes)
Date: Fri, 22 Oct 2021 06:00:51 +0000
Subject: [pdal] PlyReader inspect QuickInfo
Message-ID: <DBAPR07MB669394C83F893B41D9F73FC2C9809@DBAPR07MB6693.eurprd07.prod.outlook.com>

Hello point cloud people!

One part of the PDAL C++ API we utilise in our application is the QuickInfo inspection to relatively quickly determine info about a point cloud file. We use this for some UI components. This works great for LAS and E57 but we recently had a request for this to work for PLY files as well.

I'm happy to submit a PR to extend PlyReader for this but a problem I realised is that the PLY header does not specify bounds (or SRS) which would leave the QuickInfo incomplete (without reading the entire file to determine bounds, which defeats the purpose).

What's the feeling around that? Is it reasonable for the QuickInfo bounds to be empty and we fill out the parts we can - which for PLY would be the point count and dimensions.

Regards,

Daniel Brookes | Micromine Developer
MICROMINE Pty Ltd
e: dbrookes at micromine.com<mailto:dbrookes at micromine.com>

[cid:image001.jpg at 01D7C74D.33A24240]<https://www.micromine.com/>

[Micromine PL]<http://www.micromine.com>

Micromine PL
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211022/fc66b176/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 61851 bytes
Desc: image001.jpg
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211022/fc66b176/attachment-0001.jpg>

From andrew.bell.ia at gmail.com  Fri Oct 22 05:29:55 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 22 Oct 2021 08:29:55 -0400
Subject: [pdal] PlyReader inspect QuickInfo
In-Reply-To: <DBAPR07MB669394C83F893B41D9F73FC2C9809@DBAPR07MB6693.eurprd07.prod.outlook.com>
References: <DBAPR07MB669394C83F893B41D9F73FC2C9809@DBAPR07MB6693.eurprd07.prod.outlook.com>
Message-ID: <CACJ51z2XUWLjj+ogOW0FLD5jJMLJHE5ks-1gyetXA2vE8F5+WQ@mail.gmail.com>

I think that as long as you're providing some reasonable information, this
would be fine. The PCD reader, which is also a text format without much
that you can glean quickly, does the same thing.

On Fri, Oct 22, 2021 at 2:07 AM Daniel Brookes <dbrookes at micromine.com>
wrote:

> Hello point cloud people!
>
>
>
> One part of the PDAL C++ API we utilise in our application is the
> QuickInfo inspection to relatively quickly determine info about a point
> cloud file. We use this for some UI components. This works great for LAS
> and E57 but we recently had a request for this to work for PLY files as
> well.
>
>
>
> I?m happy to submit a PR to extend PlyReader for this but a problem I
> realised is that the PLY header does not specify bounds (or SRS) which
> would leave the QuickInfo incomplete (without reading the entire file to
> determine bounds, which defeats the purpose).
>
>
>
> What?s the feeling around that? Is it reasonable for the QuickInfo bounds
> to be empty and we fill out the parts we can - which for PLY would be the
> point count and dimensions.
>
>
>
> Regards,
>
>
>
> *Daniel Brookes | **Micromine Developer*
>
> *MICROMINE Pty Ltd*
>
> *e*: dbrookes at micromine.com
>
>
>
> <https://www.micromine.com/>
>
>
> [image: Micromine PL] <http://www.micromine.com>
>
> Micromine PL
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211022/0ed58327/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 61851 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211022/0ed58327/attachment-0001.jpg>

From pete.gadomski at gmail.com  Fri Oct 22 05:53:21 2021
From: pete.gadomski at gmail.com (Pete Gadomski)
Date: Fri, 22 Oct 2021 06:53:21 -0600
Subject: [pdal] Installing PDAL on OSX with rivlib
In-Reply-To: <CAAbCj1C0q3kM+V-E1OBL6tKX8iiNc++T=Ne3fbVCgZewcaiEYw@mail.gmail.com>
References: <CAAbCj1C0q3kM+V-E1OBL6tKX8iiNc++T=Ne3fbVCgZewcaiEYw@mail.gmail.com>
Message-ID: <CAOY6Aa3zjnvq=VwFfCJ6J8uHpM=XWZxWZGm4PC5LL0Kh=_tHuA@mail.gmail.com>

The rivlib library you're using is built for a linux machine, not the MacOS
you're building on. I'd try working inside a linux docker container --
that's how I've done work w/ rivlib in the past on MacOS.

Cheers,
Pete

On Wed, Oct 20, 2021 at 6:35 AM Phil Wilkes <p.wilkes at ucl.ac.uk> wrote:

> Hi there
>
> I would like to install PDAL on a MacBook Pro (version 10.14.3) with the
> RIEGL rivlib libraries. I have successfully done this on for linux OS in
> the past.
>
> When compiling I get this error
>
> FAILED: lib/libpdal_plugin_reader_rxp.13.0.0.dylib
> : &&
> /Users/phil/opt/miniconda3/envs/pdal-install/bin/x86_64-apple-darwin13.4.0-clang++
> -march=core2 -mtune=haswell -mssse3 -ftree-vectorize -fPIC -fPIE
> -fstack-protector-strong -O2 -pipe -stdlib=libc++
> -fvisibility-inlines-hidden -std=c++14 -fmessage-length=0 -isystem
> /Users/phil/opt/miniconda3/envs/pdal-install/include -isysroot
> /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk
> -dynamiclib -Wl,-headerpad_max_install_names -Wl,-pie
> -Wl,-headerpad_max_install_names -Wl,-dead_strip_dylibs
> -Wl,-rpath,/Users/phil/opt/miniconda3/envs/pdal-install/lib
> -L/Users/phil/opt/miniconda3/envs/pdal-install/lib -compatibility_version
> 13.0.0 -current_version 13.0.0 -o
> lib/libpdal_plugin_reader_rxp.13.0.0.dylib -install_name
> @rpath/libpdal_plugin_reader_rxp.13.dylib
> plugins/rxp/CMakeFiles/pdal_plugin_reader_rxp.dir/io/RxpPointcloud.cpp.o
> plugins/rxp/CMakeFiles/pdal_plugin_reader_rxp.dir/io/RxpReader.cpp.o
> -Wl,-rpath,/Users/phil/opt/PDAL-2.3.0-src/build/lib
> lib/libpdalcpp.13.0.0.dylib lib/libpdal_util.13.0.0.dylib
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libscanlib-mt.a
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_system-mt.a
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_thread-mt.a
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_date_time-mt.a
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_regex-mt.a
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_filesystem-mt.a
> -lpthread -L/Users/phil/opt/PDAL-2.3.0-src/build/lib && :
> ld: warning: -pie being ignored. It is only used when linking a main
> executable
> ld: warning: ignoring file
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_system-mt.a,
> building for macOS-x86_64 but attempting to link with file built for
> unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
> 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
> ld: warning: ignoring file
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_date_time-mt.a,
> building for macOS-x86_64 but attempting to link with file built for
> unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
> 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
> ld: warning: ignoring file
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_regex-mt.a,
> building for macOS-x86_64 but attempting to link with file built for
> unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
> 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
> ld: warning: ignoring file
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_thread-mt.a,
> building for macOS-x86_64 but attempting to link with file built for
> unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
> 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
> ld: warning: ignoring file
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libscanlib-mt.a,
> building for macOS-x86_64 but attempting to link with file built for
> unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
> 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
> ld: warning: ignoring file
> /Users/phil/opt/rivlib-2_5_10-x86_64-linux-gcc9/lib/libriboost_filesystem-mt.a,
> building for macOS-x86_64 but attempting to link with file built for
> unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A
> 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )
> Undefined symbols for architecture x86_64:
>
> Then many lines similar to
>
> "scanlib::pointcloud::on_dyntrig(scanlib::dyntrig<unsigned int const*>
> const&)", referenced from:
> vtable for pdal::RxpPointcloud in RxpPointcloud.cpp.o
>
> Then finally
>
> ld: symbol(s) not found for architecture x86_64
> clang-11: error: linker command failed with exit code 1 (use -v to see
> invocation)
> [378/501] Building CXX object test/unit/CMakeFiles/pdal_eigen_test.dir//
> /pdal/private/MathUtils.cpp.o
> ninja: build stopped: subcommand failed.
>
> I am using the *RiVLib 2.5.10 x86 64bit Linux gcc9 *and am installing in
> a conda environment.
>
>
> Any help gratefully received.
>
>
> Phil
>
>
>
> Dr. Phil Wilkes
>
> UCL Geography, Gower Street, London WC1E 6BT
>
> & NERC National Centre for Earth Observation
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20211022/478f96fe/attachment.html>

From lucadeluge at gmail.com  Fri Oct 22 08:39:22 2021
From: lucadeluge at gmail.com (Luca Delucchi)
Date: Fri, 22 Oct 2021 17:39:22 +0200
Subject: [pdal] recognize tree/vineyard row
Message-ID: <CAK4m-3w5Dk5nripzVZo8v68jaTRLCyOiODTLxNnd09Qt8=n5Uw@mail.gmail.com>

Hi all,

I would like to know if it is possible and what route to take to
correctly extract rows of trees or vines from a point cloud created
with OpenDroneMap.
I was thinking of calculating the CHM using DTM and DSM but the DTM I
get is not precise enough (especially in pergola vineyards), I tried
with SMRF filter changing the parameters but I have not found the
right combination yet. so I was thinking of working directly on the
point cloud.

Do you have any advice?

-- 
ciao
Luca

www.lucadelu.org

