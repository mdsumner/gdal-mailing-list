From kirk.waters at noaa.gov  Wed Mar  3 06:30:03 2021
From: kirk.waters at noaa.gov (Kirk Waters - NOAA Federal)
Date: Wed, 3 Mar 2021 09:30:03 -0500
Subject: [pdal] entwine segmentation fault
Message-ID: <CADm=QrR-ya6T6cuYXuNJ9cx64VFF74Uuvwf_Htunv7GJwsJ+qQ@mail.gmail.com>

I've been able to run entwine build on about 500 data sets, but I have a
few that are failing and I can't see why. I think it's only a few files
within the data sets that are causing the failure, but they look okay to
me. The only odd thing I see on the failing file I'm linking is that the
minimum GPS time is 0. Any ideas what I should be looking for? Running it
in gdb wasn't as helpful as I'd hoped. It dies here:
#9  0x00007ffff7fc6fab in entwine::Executor::run(pdal::StreamPointTable&,
nlohmann::basic_json<std::map, std::vector,
std::__cxx11::basic_string<char, std::char_traits<char>,
std::allocator<char> >, bool, long, unsigned long, double, std::allocator,
nlohmann::adl_serializer>) ()
   from /san1/tcm-i/anaconda3_x86_64/envs/pdal/bin/../lib/libentwine.so.2
#10 0x00007ffff7f72bd2 in entwine::Builder::insertPath(unsigned long,
entwine::FileInfo&) ()
   from /san1/tcm-i/anaconda3_x86_64/envs/pdal/bin/../lib/libentwine.so.2
#11 0x00007ffff7f731ac in std::_Function_handler<void (),
entwine::Builder::doRun(unsigned
long)::{lambda()#1}>::_M_invoke(std::_Any_data const&) ()

I'm running the conda install of version 2.1.0, so I'm lacking debugging
info. Here's a link to an example file that fails:
https://coast.noaa.gov/htdata/lidar4_z/geoid18/data/1064/
2010_NCMP_FL_12_Line285.laz

Thanks,

Kirk Waters, PhD, BJCP          | NOAA Office for Coastal Management
Applied Sciences Program      | 2234 South Hobson Ave
843-740-1227 (empty office)   | Charleston, SC 29405
843-324-2203 (cell during COVID)
coast.noaa.gov/digitalcoast
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210303/8ef0e1dd/attachment.html>

From dbrookes at micromine.com  Thu Mar 11 16:13:08 2021
From: dbrookes at micromine.com (Daniel Brookes)
Date: Fri, 12 Mar 2021 00:13:08 +0000
Subject: [pdal] filters.colorization keep points outside image when streaming
Message-ID: <DB6PR0701MB26297D10BD788E02B9DA0B9FC96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>

Hey,

filters.colorization will actually skip away points that do not correspond to a position from the input the raster file. This then causes loss of points in the output if the input raster isn't georeferenced correctly to the point cloud. I thought it would make sense to add a "keep_outside" option and was playing around with that when I noticed that this only happens when running in streaming mode. When running in normal mode all points are kept. Is this difference in output between streaming mode and normal mode expected behaviour?

Regards,
Daniel.

[Micromine PL]<http://www.micromine.com>

Micromine PL
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210312/3657d53a/attachment.html>

From andrew.bell.ia at gmail.com  Thu Mar 11 17:19:18 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 11 Mar 2021 20:19:18 -0500
Subject: [pdal] filters.colorization keep points outside image when
 streaming
In-Reply-To: <DB6PR0701MB26297D10BD788E02B9DA0B9FC96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>
References: <DB6PR0701MB26297D10BD788E02B9DA0B9FC96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>
Message-ID: <CACJ51z1gbm42rMohj4oToBa=JB21brsb22mPiWJP3zoLw1vt9Q@mail.gmail.com>

Hi,

It looks like the filter will keep all the points if you run in standard
mode. Maybe that will help.

If your points are properly georeferenced, running filters.colorization
doesn't make much sense.

On Thu, Mar 11, 2021 at 7:14 PM Daniel Brookes <dbrookes at micromine.com>
wrote:

> Hey,
>
>
>
> filters.colorization will actually skip away points that do not correspond
> to a position from the input the raster file. This then causes loss of
> points in the output if the input raster isn?t georeferenced correctly to
> the point cloud. I thought it would make sense to add a ?keep_outside?
> option and was playing around with that when I noticed that this only
> happens when running in streaming mode. When running in normal mode all
> points are kept. Is this difference in output between streaming mode and
> normal mode expected behaviour?
>
>
>
> Regards,
>
> Daniel.
>
>
> [image: Micromine PL] <http://www.micromine.com>
>
> Micromine PL
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210311/fa177102/attachment.html>

From dbrookes at micromine.com  Thu Mar 11 19:50:38 2021
From: dbrookes at micromine.com (Daniel Brookes)
Date: Fri, 12 Mar 2021 03:50:38 +0000
Subject: [pdal] filters.colorization keep points outside image when
 streaming
In-Reply-To: <CACJ51z1gbm42rMohj4oToBa=JB21brsb22mPiWJP3zoLw1vt9Q@mail.gmail.com>
References: <DB6PR0701MB26297D10BD788E02B9DA0B9FC96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>
 <CACJ51z1gbm42rMohj4oToBa=JB21brsb22mPiWJP3zoLw1vt9Q@mail.gmail.com>
Message-ID: <DB6PR0701MB26292BDD8C79967DEF246C88C96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>

Hi Andrew.

Yeah we can run in normal mode for now to keep outside points, that?s fine.

A more general question would be? is it common or considered okay for a pdal filter to give different output like this when in normal versus streaming mode?
Should this be considered as a minor bug that needs that should be logged?

Regards,
Daniel.

From: Andrew Bell <andrew.bell.ia at gmail.com>
Sent: Friday, 12 March 2021 9:19 AM
To: Daniel Brookes <dbrookes at micromine.com>
Cc: pdal at lists.osgeo.org
Subject: Re: [pdal] filters.colorization keep points outside image when streaming


[EXTERNAL EMAIL] DO NOT CLICK links or attachments unless you recognize the sender and know the content is safe.
Hi,

It looks like the filter will keep all the points if you run in standard mode. Maybe that will help.

If your points are properly georeferenced, running filters.colorization doesn't make much sense.

On Thu, Mar 11, 2021 at 7:14 PM Daniel Brookes <dbrookes at micromine.com<mailto:dbrookes at micromine.com>> wrote:
Hey,

filters.colorization will actually skip away points that do not correspond to a position from the input the raster file. This then causes loss of points in the output if the input raster isn?t georeferenced correctly to the point cloud. I thought it would make sense to add a ?keep_outside? option and was playing around with that when I noticed that this only happens when running in streaming mode. When running in normal mode all points are kept. Is this difference in output between streaming mode and normal mode expected behaviour?

Regards,
Daniel.

<http://www.micromine.com>[Micromine PL]<http://www.micromine.com><http://www.micromine.com>

Micromine PL
_______________________________________________
pdal mailing list
pdal at lists.osgeo.org<mailto:pdal at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/pdal<https://lists.osgeo.org/mailman/listinfo/pdal>


--
Andrew Bell
andrew.bell.ia at gmail.com<mailto:andrew.bell.ia at gmail.com>
[Micromine PL]<http://www.micromine.com>

Micromine PL
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210312/3923d09d/attachment-0001.html>

From andrew.bell.ia at gmail.com  Fri Mar 12 04:47:50 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 12 Mar 2021 07:47:50 -0500
Subject: [pdal] filters.colorization keep points outside image when
 streaming
In-Reply-To: <DB6PR0701MB26292BDD8C79967DEF246C88C96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>
References: <DB6PR0701MB26297D10BD788E02B9DA0B9FC96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>
 <CACJ51z1gbm42rMohj4oToBa=JB21brsb22mPiWJP3zoLw1vt9Q@mail.gmail.com>
 <DB6PR0701MB26292BDD8C79967DEF246C88C96F9@DB6PR0701MB2629.eurprd07.prod.outlook.com>
Message-ID: <CACJ51z0ht08=FKOjgrvoGT4oZtAzqdGHcVg590jUEa0ZT0jMyQ@mail.gmail.com>

On Thu, Mar 11, 2021 at 10:50 PM Daniel Brookes <dbrookes at micromine.com>
wrote:

> Hi Andrew.
>
>
>
> Yeah we can run in normal mode for now to keep outside points, that?s
> fine.
>

>
> A more general question would be? is it common or considered okay for a
> pdal filter to give different output like this when in normal versus
> streaming mode?
>

No. I think this is a bug that should be fixed.  I just happened to notice
the difference in the behavior and thought it might be useful for you.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210312/4448af4e/attachment.html>

From leonaswift80 at gmail.com  Mon Mar 15 15:32:37 2021
From: leonaswift80 at gmail.com (Leona Swift)
Date: Mon, 15 Mar 2021 15:32:37 -0700
Subject: [pdal] Reading only specific fields from LAS files to improve
 performance.
Message-ID: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>

When using PDAL as part of a C++ codebase to read a large LAS/LAZ file from
which we are only interested in the XYZ position of each point, import with
PDAL is very slow. It looks like all of the other attributes in the PDAL
file are being parsed. Additionally that parsing is very slow due to many
type conversions, although the documentation is clear that PDAL is more
concerned with genericity than efficiency.

Is there any example in C++ of how to say "Only read the XYZ data from this
file" to make things quicker?

I assume that it is possible to do something (prepare the table
differently) prior to calling execute() (which is where the time is spent.)
However, there don't seem to be any code examples of doing this.

las_reader.setOptions(las_opts);
las_reader.prepare(table);
pdal::PointViewSet point_view_set = las_reader.execute(table);

(Actually, I haven't found any C++ examples at all other than
https://pdal.io/api/transition/index.html).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210315/6955ca31/attachment.html>

From andrew.bell.ia at gmail.com  Mon Mar 15 16:00:39 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 15 Mar 2021 19:00:39 -0400
Subject: [pdal] Reading only specific fields from LAS files to improve
 performance.
In-Reply-To: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>
References: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>
Message-ID: <CACJ51z0aRXJ57TgSBAtjrfVDxTXpzGQ-15dtLt9xs6L48iaKmw@mail.gmail.com>

Hi,

You should look at

this:
https://github.com/PDAL/PDAL/pull/3311/commits/db2d4a2539ad4551b62fee9711c51f0e0cbb939b

This change allows a user to limit what gets loaded when using `pdal
translate` or `pdal pipeline`, but the code that's there can serve as an
example for your own.

Note that this doesn't change what gets read from a file, just what gets
stored. We don't currently support the selective reading of data, though
this probably only much matters for LAZ with point formats 6-10.

On Mon, Mar 15, 2021 at 6:32 PM Leona Swift <leonaswift80 at gmail.com> wrote:

> When using PDAL as part of a C++ codebase to read a large LAS/LAZ file
> from which we are only interested in the XYZ position of each point, import
> with PDAL is very slow. It looks like all of the other attributes in the
> PDAL file are being parsed. Additionally that parsing is very slow due to
> many type conversions, although the documentation is clear that PDAL is
> more concerned with genericity than efficiency.
>
> Is there any example in C++ of how to say "Only read the XYZ data from
> this file" to make things quicker?
>
> I assume that it is possible to do something (prepare the table
> differently) prior to calling execute() (which is where the time is spent.)
> However, there don't seem to be any code examples of doing this.
>
> las_reader.setOptions(las_opts);
> las_reader.prepare(table);
> pdal::PointViewSet point_view_set = las_reader.execute(table);
>
> (Actually, I haven't found any C++ examples at all other than
> https://pdal.io/api/transition/index.html).
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210315/2b5b16a6/attachment.html>

From andrew.bell.ia at gmail.com  Mon Mar 15 16:03:50 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 15 Mar 2021 19:03:50 -0400
Subject: [pdal] Reading only specific fields from LAS files to improve
 performance.
In-Reply-To: <CACJ51z0aRXJ57TgSBAtjrfVDxTXpzGQ-15dtLt9xs6L48iaKmw@mail.gmail.com>
References: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>
 <CACJ51z0aRXJ57TgSBAtjrfVDxTXpzGQ-15dtLt9xs6L48iaKmw@mail.gmail.com>
Message-ID: <CACJ51z06xpmz-O7pXyKbPK+PoHX_vyw4HOR4+7Ebyt6M=sB+qg@mail.gmail.com>

I should add that if all you want is XYZ from a LAS (rather than LAZ), you
really don't need PDAL at all, as the code is trivial. I'd need to know
more about your use case to make better suggestions.

On Mon, Mar 15, 2021 at 7:00 PM Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> Hi,
>
> You should look at
>
> this:
> https://github.com/PDAL/PDAL/pull/3311/commits/db2d4a2539ad4551b62fee9711c51f0e0cbb939b
>
> This change allows a user to limit what gets loaded when using `pdal
> translate` or `pdal pipeline`, but the code that's there can serve as an
> example for your own.
>
> Note that this doesn't change what gets read from a file, just what gets
> stored. We don't currently support the selective reading of data, though
> this probably only much matters for LAZ with point formats 6-10.
>
> On Mon, Mar 15, 2021 at 6:32 PM Leona Swift <leonaswift80 at gmail.com>
> wrote:
>
>> When using PDAL as part of a C++ codebase to read a large LAS/LAZ file
>> from which we are only interested in the XYZ position of each point, import
>> with PDAL is very slow. It looks like all of the other attributes in the
>> PDAL file are being parsed. Additionally that parsing is very slow due to
>> many type conversions, although the documentation is clear that PDAL is
>> more concerned with genericity than efficiency.
>>
>> Is there any example in C++ of how to say "Only read the XYZ data from
>> this file" to make things quicker?
>>
>> I assume that it is possible to do something (prepare the table
>> differently) prior to calling execute() (which is where the time is spent.)
>> However, there don't seem to be any code examples of doing this.
>>
>> las_reader.setOptions(las_opts);
>> las_reader.prepare(table);
>> pdal::PointViewSet point_view_set = las_reader.execute(table);
>>
>> (Actually, I haven't found any C++ examples at all other than
>> https://pdal.io/api/transition/index.html).
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210315/30505ccb/attachment.html>

From runette at gmail.com  Thu Mar 18 12:11:16 2021
From: runette at gmail.com (Paul Harwood)
Date: Thu, 18 Mar 2021 19:11:16 +0000
Subject: [pdal] Greedy Projection FIlter
Message-ID: <CAE8nN5OREpEHsCr632_67o+0X443X-06g1DdG5nEvPUE7QXhXw@mail.gmail.com>

Looking for some help:

I need to create a surface and I have been looking at the Mesh filters in
PDAL.

Filters.delaunay I have used extensively in the past and I know it well but
I was experimenting with the others.

I got filters.poisson working for all of its limitations but I cannot get
filters.greedyprojection to produce anything.

Am I doing something wrong or is it just not working?

When I run it using the same pipeline structure and the same input
file that works for the other two filters -- I get nothing. I don't get an
error (even with --developer-debug), I don't get an empty file, The
pipeline completes successfully and no file has been written. I have tried
playing around with the parameters that the docs suggest and in line with
the PCL original suggestions - but just a stubborn "non!" from the filter :(

I am using this pipeline :

{
  "pipeline":
  [
    {
      "type": "readers.las",
      "filename": "object3.las"
    },
    {
      "type": "filters.greedyprojection",
      "multiplier" : 2,
      "radius": 10,
      "num_neighbors" : 100
    },
    {
      "faces": "true",
      "filename": "object4.ply",
      "type": "writers.ply"
    }
  ]
}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210318/2aec7762/attachment.html>

From andrew.bell.ia at gmail.com  Thu Mar 18 12:28:49 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 18 Mar 2021 15:28:49 -0400
Subject: [pdal] Greedy Projection FIlter
In-Reply-To: <CAE8nN5OREpEHsCr632_67o+0X443X-06g1DdG5nEvPUE7QXhXw@mail.gmail.com>
References: <CAE8nN5OREpEHsCr632_67o+0X443X-06g1DdG5nEvPUE7QXhXw@mail.gmail.com>
Message-ID: <CACJ51z2QRUxxSpfp4iO7RmZta_gwkGfnixF4UVLTwpt0pgpDHg@mail.gmail.com>

Paul,

I think you're one of the few who has tried to use that filter recently.
I'm not sure what might be wrong and would have to debug it, but I don't
have time right now. Unfortunately, the filter has no tests, so does not
get regularly exercised. If someone manages to get it working, it would be
great if they could contribute some tests.

Sorry,


On Thu, Mar 18, 2021 at 3:11 PM Paul Harwood <runette at gmail.com> wrote:

> Looking for some help:
>
> I need to create a surface and I have been looking at the Mesh filters in
> PDAL.
>
> Filters.delaunay I have used extensively in the past and I know it well
> but I was experimenting with the others.
>
> I got filters.poisson working for all of its limitations but I cannot get
> filters.greedyprojection to produce anything.
>
> Am I doing something wrong or is it just not working?
>
> When I run it using the same pipeline structure and the same input
> file that works for the other two filters -- I get nothing. I don't get an
> error (even with --developer-debug), I don't get an empty file, The
> pipeline completes successfully and no file has been written. I have tried
> playing around with the parameters that the docs suggest and in line with
> the PCL original suggestions - but just a stubborn "non!" from the filter :(
>
> I am using this pipeline :
>
> {
>   "pipeline":
>   [
>     {
>       "type": "readers.las",
>       "filename": "object3.las"
>     },
>     {
>       "type": "filters.greedyprojection",
>       "multiplier" : 2,
>       "radius": 10,
>       "num_neighbors" : 100
>     },
>     {
>       "faces": "true",
>       "filename": "object4.ply",
>       "type": "writers.ply"
>     }
>   ]
> }
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210318/d7ea01f6/attachment.html>

From runette at gmail.com  Thu Mar 18 13:46:51 2021
From: runette at gmail.com (Paul Harwood)
Date: Thu, 18 Mar 2021 20:46:51 +0000
Subject: [pdal] Greedy Projection FIlter
In-Reply-To: <CACJ51z2QRUxxSpfp4iO7RmZta_gwkGfnixF4UVLTwpt0pgpDHg@mail.gmail.com>
References: <CAE8nN5OREpEHsCr632_67o+0X443X-06g1DdG5nEvPUE7QXhXw@mail.gmail.com>
 <CACJ51z2QRUxxSpfp4iO7RmZta_gwkGfnixF4UVLTwpt0pgpDHg@mail.gmail.com>
Message-ID: <CAE8nN5OGJLF9PDiyJSQ4WAuUcrjoja8oa0jotUrbZtttjnjw2Q@mail.gmail.com>

Thanks Andrew,

I have never tried it before so I cannot claim to be a regular user.

I also cannot do any debugging - I don't have a PDAL dev environment and
cannot afford the time to crate one at the moment.

I will consider it "Not working" for the time being and create a bug.

Paul

On Thu, 18 Mar 2021 at 19:29, Andrew Bell <andrew.bell.ia at gmail.com> wrote:

> Paul,
>
> I think you're one of the few who has tried to use that filter recently.
> I'm not sure what might be wrong and would have to debug it, but I don't
> have time right now. Unfortunately, the filter has no tests, so does not
> get regularly exercised. If someone manages to get it working, it would be
> great if they could contribute some tests.
>
> Sorry,
>
>
> On Thu, Mar 18, 2021 at 3:11 PM Paul Harwood <runette at gmail.com> wrote:
>
>> Looking for some help:
>>
>> I need to create a surface and I have been looking at the Mesh filters in
>> PDAL.
>>
>> Filters.delaunay I have used extensively in the past and I know it well
>> but I was experimenting with the others.
>>
>> I got filters.poisson working for all of its limitations but I cannot get
>> filters.greedyprojection to produce anything.
>>
>> Am I doing something wrong or is it just not working?
>>
>> When I run it using the same pipeline structure and the same input
>> file that works for the other two filters -- I get nothing. I don't get an
>> error (even with --developer-debug), I don't get an empty file, The
>> pipeline completes successfully and no file has been written. I have tried
>> playing around with the parameters that the docs suggest and in line with
>> the PCL original suggestions - but just a stubborn "non!" from the filter :(
>>
>> I am using this pipeline :
>>
>> {
>>   "pipeline":
>>   [
>>     {
>>       "type": "readers.las",
>>       "filename": "object3.las"
>>     },
>>     {
>>       "type": "filters.greedyprojection",
>>       "multiplier" : 2,
>>       "radius": 10,
>>       "num_neighbors" : 100
>>     },
>>     {
>>       "faces": "true",
>>       "filename": "object4.ply",
>>       "type": "writers.ply"
>>     }
>>   ]
>> }
>>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210318/d86a3085/attachment.html>

From leonaswift80 at gmail.com  Mon Mar 22 06:22:25 2021
From: leonaswift80 at gmail.com (Leona Swift)
Date: Mon, 22 Mar 2021 06:22:25 -0700
Subject: [pdal] Reading only specific fields from LAS files to improve
 performance.
In-Reply-To: <CACJ51z06xpmz-O7pXyKbPK+PoHX_vyw4HOR4+7Ebyt6M=sB+qg@mail.gmail.com>
References: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>
 <CACJ51z0aRXJ57TgSBAtjrfVDxTXpzGQ-15dtLt9xs6L48iaKmw@mail.gmail.com>
 <CACJ51z06xpmz-O7pXyKbPK+PoHX_vyw4HOR4+7Ebyt6M=sB+qg@mail.gmail.com>
Message-ID: <CADpX-LYtHjM4uotYikgB7K-op8XW9jKHVnvqmHL8LYqdBoQPrQ@mail.gmail.com>

Thanks,

Is it true to say that the code is still trivial when supporting up to,
e.g. LAS/LAZ 1.4 with all the compression variants commonly seen? I see
many examples of simple LAS 1.2, uncompressed file reading (and have one
here which works fine, and as you say the code is trivial.) I'm worried
about the number of variants of LAZ a production system will encounter in
practical use when consuming data from many vendors, which is the current
reason for using PDAL.

I agree that theoretically, code to rapidly pull XYZ points out of a binary
file sounds trivial, but am a little scared about going that route in case
it ends up taking 3 months to test all the variants of file encoding, and
it's tricky when looking at a general binary file spec to know how rigidly
all data will adhere to that spec in practice. Is there a good example of
such code somewhere else on the internet that we can look at?

On Mon, Mar 15, 2021 at 4:04 PM Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

>
> I should add that if all you want is XYZ from a LAS (rather than LAZ), you
> really don't need PDAL at all, as the code is trivial. I'd need to know
> more about your use case to make better suggestions.
>
> On Mon, Mar 15, 2021 at 7:00 PM Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> Hi,
>>
>> You should look at
>>
>> this:
>> https://github.com/PDAL/PDAL/pull/3311/commits/db2d4a2539ad4551b62fee9711c51f0e0cbb939b
>>
>> This change allows a user to limit what gets loaded when using `pdal
>> translate` or `pdal pipeline`, but the code that's there can serve as an
>> example for your own.
>>
>> Note that this doesn't change what gets read from a file, just what gets
>> stored. We don't currently support the selective reading of data, though
>> this probably only much matters for LAZ with point formats 6-10.
>>
>> On Mon, Mar 15, 2021 at 6:32 PM Leona Swift <leonaswift80 at gmail.com>
>> wrote:
>>
>>> When using PDAL as part of a C++ codebase to read a large LAS/LAZ file
>>> from which we are only interested in the XYZ position of each point, import
>>> with PDAL is very slow. It looks like all of the other attributes in the
>>> PDAL file are being parsed. Additionally that parsing is very slow due to
>>> many type conversions, although the documentation is clear that PDAL is
>>> more concerned with genericity than efficiency.
>>>
>>> Is there any example in C++ of how to say "Only read the XYZ data from
>>> this file" to make things quicker?
>>>
>>> I assume that it is possible to do something (prepare the table
>>> differently) prior to calling execute() (which is where the time is spent.)
>>> However, there don't seem to be any code examples of doing this.
>>>
>>> las_reader.setOptions(las_opts);
>>> las_reader.prepare(table);
>>> pdal::PointViewSet point_view_set = las_reader.execute(table);
>>>
>>> (Actually, I haven't found any C++ examples at all other than
>>> https://pdal.io/api/transition/index.html).
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210322/e4ca6293/attachment.html>

From andrew.bell.ia at gmail.com  Mon Mar 22 06:46:37 2021
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 22 Mar 2021 09:46:37 -0400
Subject: [pdal] Reading only specific fields from LAS files to improve
 performance.
In-Reply-To: <CADpX-LYtHjM4uotYikgB7K-op8XW9jKHVnvqmHL8LYqdBoQPrQ@mail.gmail.com>
References: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>
 <CACJ51z0aRXJ57TgSBAtjrfVDxTXpzGQ-15dtLt9xs6L48iaKmw@mail.gmail.com>
 <CACJ51z06xpmz-O7pXyKbPK+PoHX_vyw4HOR4+7Ebyt6M=sB+qg@mail.gmail.com>
 <CADpX-LYtHjM4uotYikgB7K-op8XW9jKHVnvqmHL8LYqdBoQPrQ@mail.gmail.com>
Message-ID: <CACJ51z3D-yin2kjVOw54TNczkhA_pYV_OUaNTTz_0Sq8F4qTWw@mail.gmail.com>

On Mon, Mar 22, 2021 at 9:22 AM Leona Swift <leonaswift80 at gmail.com> wrote:

> Thanks,
>
> Is it true to say that the code is still trivial when supporting up to,
> e.g. LAS/LAZ 1.4 with all the compression variants commonly seen? I see
> many examples of simple LAS 1.2, uncompressed file reading (and have one
> here which works fine, and as you say the code is trivial.) I'm worried
> about the number of variants of LAZ a production system will encounter in
> practical use when consuming data from many vendors, which is the current
> reason for using PDAL.
>

My comment about the triviality of reading XYZ from a LAS file applies only
to LAS, not LAZ.


> I agree that theoretically, code to rapidly pull XYZ points out of a
> binary file sounds trivial, but am a little scared about going that route
> in case it ends up taking 3 months to test all the variants of file
> encoding, and it's tricky when looking at a general binary file spec to
> know how rigidly all data will adhere to that spec in practice. Is there a
> good example of such code somewhere else on the internet that we can look
> at?
>

To read XYZ from a LAS file, you need to know only the offset to the first
point and the point data size. It really is trivial. If data doesn't
conform, it's unreadable.

If you need to read LAZ, and don't want to use PDAL, you can use lastools
or lazperf directly.  Lazperf will soon be released with support for point
types 6-8. lastools supports the ability to decode only XYZ for point
formats 6-10. lazperf should support the same before long.

If you're having performance issues with PDAL, I'd be interested to know
what you're trying to do. Most of the time incurred when reading LAS data
with PDAL is copying the data into memory. With LAZ, the decompression is
quite expensive, as well and there's no getting around that.

Best,

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20210322/28823b64/attachment.html>

From klassen.js at gmail.com  Mon Mar 22 09:02:04 2021
From: klassen.js at gmail.com (Jim Klassen)
Date: Mon, 22 Mar 2021 11:02:04 -0500
Subject: [pdal] Reading only specific fields from LAS files to improve
 performance.
In-Reply-To: <CACJ51z3D-yin2kjVOw54TNczkhA_pYV_OUaNTTz_0Sq8F4qTWw@mail.gmail.com>
References: <CADpX-LYyNDaRf7cNCg4f2LUs33e_f=4Oiecwx3+EjVqUhYCMbQ@mail.gmail.com>
 <CACJ51z0aRXJ57TgSBAtjrfVDxTXpzGQ-15dtLt9xs6L48iaKmw@mail.gmail.com>
 <CACJ51z06xpmz-O7pXyKbPK+PoHX_vyw4HOR4+7Ebyt6M=sB+qg@mail.gmail.com>
 <CADpX-LYtHjM4uotYikgB7K-op8XW9jKHVnvqmHL8LYqdBoQPrQ@mail.gmail.com>
 <CACJ51z3D-yin2kjVOw54TNczkhA_pYV_OUaNTTz_0Sq8F4qTWw@mail.gmail.com>
Message-ID: <4af98766-f895-8070-faa4-14bc3a24b516@gmail.com>

On 3/22/21 8:46 AM, Andrew Bell wrote:
> If you're having performance issues with PDAL, I'd be interested to know what you're trying to do. Most of the time incurred when reading LAS data with PDAL is copying the data into memory. With LAZ, the decompression is quite expensive, as well and there's no getting around that.
>
While LAZ decompression is expensive, I have found that at least in some situations the extra CPU time needed for LAZ (de)compression is quicker overall than the extra I/O cost of LAS.


