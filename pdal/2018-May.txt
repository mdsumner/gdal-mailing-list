From Odd-Ragnar.Lydersen at powel.no  Wed May  2 23:00:52 2018
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Thu, 3 May 2018 06:00:52 +0000
Subject: [pdal] Compiler error when including cropfilter.hpp
Message-ID: <6e9d121c3249480cb7f05f5c6f3bb95c@ITTRHEX001.powelasa.powel.com>

When I'm trying to use a CropFilter, I have to include CropFilter.hpp.
And when I do that I get an error:
1>e:\src\o\pdal_1.7\install\release\include\pdal\filters\cropfilter.hpp(43): fatal error C1083: Cannot open include file: 'private/Point.hpp': No such file or directory

I can see that the included file "private/point.hpp" is not part of the included files in the install folder, which I generated by the INSTALL script for PDAL.

When I search the PDAL source for [ #include "private* ], I get 11 different results, which are possible problems.
Of the 11 includes, I can see that the folders referred to are not located within the same root folder.

I'm able to solve the issue if I copy the private folder of filters, into my "include/pdal/filters" folder.
Should this be handled by the INSTALL script?

>Odd-Ragnar<
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/9fb16091/attachment.html>

From andrew.bell.ia at gmail.com  Thu May  3 03:20:50 2018
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 03 May 2018 10:20:50 +0000
Subject: [pdal] Compiler error when including cropfilter.hpp
In-Reply-To: <6e9d121c3249480cb7f05f5c6f3bb95c@ITTRHEX001.powelasa.powel.com>
References: <6e9d121c3249480cb7f05f5c6f3bb95c@ITTRHEX001.powelasa.powel.com>
Message-ID: <CACJ51z3VGUSVmGaDuzGBBgbWZFOgg-C0D+B6EWwueZRjsFM8cw@mail.gmail.com>

Yes, this is a bug. It will be fixed in the maintenance release that will
come shortly. Thanks for reporting.

On Thu, May 3, 2018, 2:01 AM Odd Ragnar Lydersen <
Odd-Ragnar.Lydersen at powel.no> wrote:

> When I’m trying to use a CropFilter, I have to include CropFilter.hpp.
>
> And when I do that I get an error:
>
> 1>e:\src\o\pdal_1.7\install\release\include\pdal\filters\cropfilter.hpp(43):
> fatal error C1083: Cannot open include file: 'private/Point.hpp': No such
> file or directory
>
>
>
> I can see that the included file “private/point.hpp” is not part of the
> included files in the install folder, which I generated by the INSTALL
> script for PDAL.
>
>
>
> When I search the PDAL source for [ #include “private* ], I get 11
> different results, which are possible problems.
>
> Of the 11 includes, I can see that the folders referred to are not located
> within the same root folder.
>
>
>
> I’m able to solve the issue if I copy the private folder of filters, into
> my “include/pdal/filters” folder.
>
> Should this be handled by the INSTALL script?
>
>
>
> >Odd-Ragnar<
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/383335f5/attachment.html>

From erobeck at gmail.com  Thu May  3 08:05:51 2018
From: erobeck at gmail.com (Eric Robeck)
Date: Thu, 03 May 2018 15:05:51 +0000
Subject: [pdal] Merging buffered tiles
In-Reply-To: <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
Message-ID: <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>

Howard / Mike,

Thanks for your feedback. Based on your recommendation, I built a pipeline
that reads all 24 input tiles, crops each to non-overlapping bounding
boxes, merges, and reprojects the results prior to writing the composite
LAZ file.

The pipeline works and the output file looks great. I can't find any
obvious errors or omissions. However, PDAL returns the following error
message when writing the file, repeated 24 times (one per input file):

*(pdal pipeline Error) writers.las: Attempting to write
'C:/data/forest_park/mcc/mcc_merge_UTM (s-1_5, t-0_3).laz' with multiple
point spatial references.*

Should I be worried about this error? Is there any way to structure my JSON
pipeline to prevent it from occurring? The full pipeline is copied below.

Thanks,
Eric

{
  "pipeline":
  [
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_1 (s-1_5,
t-0_3).las",
        "tag":"tile_1"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_2 (s-1_5,
t-0_3).las",
        "tag":"tile_2"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_3 (s-1_5,
t-0_3).las",
        "tag":"tile_3"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_4 (s-1_5,
t-0_3).las",
        "tag":"tile_4"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_5 (s-1_5,
t-0_3).las",
        "tag":"tile_5"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_6 (s-1_5,
t-0_3).las",
        "tag":"tile_6"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_7 (s-1_5,
t-0_3).las",
        "tag":"tile_7"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_8 (s-1_5,
t-0_3).las",
        "tag":"tile_8"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_9 (s-1_5,
t-0_3).las",
        "tag":"tile_9"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_10 (s-1_5,
t-0_3).las",
        "tag":"tile_10"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_11 (s-1_5,
t-0_3).las",
        "tag":"tile_11"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_12 (s-1_5,
t-0_3).las",
        "tag":"tile_12"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_13 (s-1_5,
t-0_3).las",
        "tag":"tile_13"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_14 (s-1_5,
t-0_3).las",
        "tag":"tile_14"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_15 (s-1_5,
t-0_3).las",
        "tag":"tile_15"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_16 (s-1_5,
t-0_3).las",
        "tag":"tile_16"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_17 (s-1_5,
t-0_3).las",
        "tag":"tile_17"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_18 (s-1_5,
t-0_3).las",
        "tag":"tile_18"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_19 (s-1_5,
t-0_3).las",
        "tag":"tile_19"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_20 (s-1_5,
t-0_3).las",
        "tag":"tile_20"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_21 (s-1_5,
t-0_3).las",
        "tag":"tile_21"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_22 (s-1_5,
t-0_3).las",
        "tag":"tile_22"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_23 (s-1_5,
t-0_3).las",
        "tag":"tile_23"
    },
    {
        "type":"readers.las",
        "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_24 (s-1_5,
t-0_3).las",
        "tag":"tile_24"
    },
    {
        "inputs":"tile_1",
      "type":"filters.crop",
      "bounds":"([737943,738600],[4280246,4281046])",
      "tag":"crop_1"
    },
    {
        "inputs":"tile_2",
      "type":"filters.crop",
      "bounds":"([737143,737943],[4280246,4281046])",
      "tag":"crop_2"
    },
    {
        "inputs":"tile_3",
      "type":"filters.crop",
      "bounds":"([737943,738600],[4279446,4280246])",
      "tag":"crop_3"
    },
    {
        "inputs":"tile_4",
      "type":"filters.crop",
      "bounds":"([737143,737943],[4279446,4280246])",
      "tag":"crop_4"
    },
    {
        "inputs":"tile_5",
      "type":"filters.crop",
      "bounds":"([737943,738600],[4279000,4279446])",
      "tag":"crop_5"
    },
    {
        "inputs":"tile_6",
      "type":"filters.crop",
      "bounds":"([737143,737943],[4279000,4279446])",
      "tag":"crop_6"
    },
    {
        "inputs":"tile_7",
      "type":"filters.crop",
      "bounds":"([737943,738600],[4281046,4281300])",
      "tag":"crop_7"
    },
    {
        "inputs":"tile_8",
      "type":"filters.crop",
      "bounds":"([737143,737943],[4281046,4281300])",
      "tag":"crop_8"
    },
    {
        "inputs":"tile_9",
      "type":"filters.crop",
      "bounds":"([734385,734743],[4279446,4280246])",
      "tag":"crop_9"
    },
    {
        "inputs":"tile_10",
      "type":"filters.crop",
      "bounds":"([734385,734743],[4280246,4281046])",
      "tag":"crop_10"
    },
    {
        "inputs":"tile_11",
      "type":"filters.crop",
      "bounds":"([734743,735543],[4279446,4280246])",
      "tag":"crop_11"
    },
    {
        "inputs":"tile_12",
      "type":"filters.crop",
      "bounds":"([734743,735543],[4280246,4281046])",
      "tag":"crop_12"
    },
    {
        "inputs":"tile_13",
      "type":"filters.crop",
      "bounds":"([735543,736343],[4279446,4280246])",
      "tag":"crop_13"
    },
    {
        "inputs":"tile_14",
      "type":"filters.crop",
      "bounds":"([735543,736343],[4280246,4281046])",
      "tag":"crop_14"
    },
    {
        "inputs":"tile_15",
      "type":"filters.crop",
      "bounds":"([734385,734743],[4279000,4279446])",
      "tag":"crop_15"
    },
    {
        "inputs":"tile_16",
      "type":"filters.crop",
      "bounds":"([734743,735543],[4279000,4279446])",
      "tag":"crop_16"
    },
    {
        "inputs":"tile_17",
      "type":"filters.crop",
      "bounds":"([735543,736343],[4279000,4279446])",
      "tag":"crop_17"
    },
    {
        "inputs":"tile_18",
      "type":"filters.crop",
      "bounds":"([734385,734743],[4281046,4281300])",
      "tag":"crop_18"
    },
    {
        "inputs":"tile_19",
      "type":"filters.crop",
      "bounds":"([734743,735543],[4281046,4281300])",
      "tag":"crop_19"
    },
    {
        "inputs":"tile_20",
      "type":"filters.crop",
      "bounds":"([735543,736343],[4281046,4281300])",
      "tag":"crop_20"
    },
    {
        "inputs":"tile_21",
      "type":"filters.crop",
      "bounds":"([736343,737143],[4279446,4280246])",
      "tag":"crop_21"
    },
    {
        "inputs":"tile_22",
      "type":"filters.crop",
      "bounds":"([736343,737143],[4280246,4281046])",
      "tag":"crop_22"
    },
    {
        "inputs":"tile_23",
      "type":"filters.crop",
      "bounds":"([736343,737143],[4279000,4279446])",
      "tag":"crop_23"
    },
    {
        "inputs":"tile_24",
      "type":"filters.crop",
      "bounds":"([736343,737143],[4281046,4281300])",
      "tag":"crop_24"
    },
    {

"inputs":["crop_1","crop_2","crop_3","crop_4","crop_5","crop_6","crop_7","crop_8","crop_9","crop_10","crop_11","crop_12","crop_13","crop_14","crop_15","crop_16","crop_17","crop_18","crop_19","crop_20","crop_21","crop_22","crop_23","crop_24"],
      "type":"filters.merge",
      "tag":"merge_tiles"
    },
    {
        "inputs":"merge_tiles",
      "type":"filters.reprojection",
      "tag":"reproject_tiles",
      "in_srs":"EPSG:26915",
      "out_srs":"EPSG:32615"
    },
    {
        "inputs":"reproject_tiles",
      "type":"writers.las",
      "filename":"C:/data/forest_park/mcc/mcc_merge_UTM (s-1_5, t-0_3).laz"
    }
  ]
}



On Sun, Apr 29, 2018 at 10:19 AM Howard Butler <howard at hobu.co> wrote:

>
>
> On 4/28/18 5:03 PM, Eric Robeck wrote:
> > Is there a way within PDAL to merged buffered tiles with a constant
> buffer
> > width, while filtering out only the buffers from each tile?
> >
> > For context, I am using an external software to modify a large point
> cloud.
> > Due to memory constraints, I first tiled the data using the "splitters"
> > filter, but included a 10 m buffer to minimize edge effects. Now that the
> > data are processed, I want to merge them back into a single file.
>
> You could use filters.assign to set a "buffer" value for the points that
> are in your buffer ring (or the ones that aren't), and then use
> filters.range to cull out points that have the "!buffer" classification
> before you go back to merge them altogether. It would be laborious, but
> you could get the job done.
>
> Additionally, Connor Manning of Hobu demonstrated a workflow at FOSS4G
> 2017 [1] that is very similar to what you're doing except it is based on
> Greyhound and Entwine for the data management (and PDAL for the
> processing). The goal is to be able to put back information into an
> Entwine tree and not be constrained by a fixed tiling scheme while
> processing. It's all very much a prototype at the moment, but dynamic
> workflows based on adaptive tiling schemes is something we are actively
> working on.
>
> Howard
>
>
> [1] https://vimeo.com/245073446
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/f36e3194/attachment-0001.html>

From howard at hobu.co  Thu May  3 08:26:12 2018
From: howard at hobu.co (Howard Butler)
Date: Thu, 3 May 2018 10:26:12 -0500
Subject: [pdal] Merging buffered tiles
In-Reply-To: <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
Message-ID: <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>

Eric,


This is such an awesome pipeline (except for parenthesis in your
filenames -- ewww :).

The SRS complaint is something we should investigate. I suppose it is
because something isn't transiting through GDAL as "equal" due to the
way it works.

Howard


On 5/3/18 10:05 AM, Eric Robeck wrote:
> Howard / Mike,
>
> Thanks for your feedback. Based on your recommendation, I built a pipeline
> that reads all 24 input tiles, crops each to non-overlapping bounding
> boxes, merges, and reprojects the results prior to writing the composite
> LAZ file.
>
> The pipeline works and the output file looks great. I can't find any
> obvious errors or omissions. However, PDAL returns the following error
> message when writing the file, repeated 24 times (one per input file):
>
> *(pdal pipeline Error) writers.las: Attempting to write
> 'C:/data/forest_park/mcc/mcc_merge_UTM (s-1_5, t-0_3).laz' with multiple
> point spatial references.*
>
> Should I be worried about this error? Is there any way to structure my JSON
> pipeline to prevent it from occurring? The full pipeline is copied below.
>
> Thanks,
> Eric
>
> {
>   "pipeline":
>   [
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_1 (s-1_5,
> t-0_3).las",
>         "tag":"tile_1"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_2 (s-1_5,
> t-0_3).las",
>         "tag":"tile_2"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_3 (s-1_5,
> t-0_3).las",
>         "tag":"tile_3"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_4 (s-1_5,
> t-0_3).las",
>         "tag":"tile_4"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_5 (s-1_5,
> t-0_3).las",
>         "tag":"tile_5"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_6 (s-1_5,
> t-0_3).las",
>         "tag":"tile_6"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_7 (s-1_5,
> t-0_3).las",
>         "tag":"tile_7"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_8 (s-1_5,
> t-0_3).las",
>         "tag":"tile_8"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_9 (s-1_5,
> t-0_3).las",
>         "tag":"tile_9"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_10 (s-1_5,
> t-0_3).las",
>         "tag":"tile_10"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_11 (s-1_5,
> t-0_3).las",
>         "tag":"tile_11"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_12 (s-1_5,
> t-0_3).las",
>         "tag":"tile_12"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_13 (s-1_5,
> t-0_3).las",
>         "tag":"tile_13"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_14 (s-1_5,
> t-0_3).las",
>         "tag":"tile_14"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_15 (s-1_5,
> t-0_3).las",
>         "tag":"tile_15"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_16 (s-1_5,
> t-0_3).las",
>         "tag":"tile_16"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_17 (s-1_5,
> t-0_3).las",
>         "tag":"tile_17"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_18 (s-1_5,
> t-0_3).las",
>         "tag":"tile_18"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_19 (s-1_5,
> t-0_3).las",
>         "tag":"tile_19"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_20 (s-1_5,
> t-0_3).las",
>         "tag":"tile_20"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_21 (s-1_5,
> t-0_3).las",
>         "tag":"tile_21"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_22 (s-1_5,
> t-0_3).las",
>         "tag":"tile_22"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_23 (s-1_5,
> t-0_3).las",
>         "tag":"tile_23"
>     },
>     {
>         "type":"readers.las",
>         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_24 (s-1_5,
> t-0_3).las",
>         "tag":"tile_24"
>     },
>     {
>         "inputs":"tile_1",
>       "type":"filters.crop",
>       "bounds":"([737943,738600],[4280246,4281046])",
>       "tag":"crop_1"
>     },
>     {
>         "inputs":"tile_2",
>       "type":"filters.crop",
>       "bounds":"([737143,737943],[4280246,4281046])",
>       "tag":"crop_2"
>     },
>     {
>         "inputs":"tile_3",
>       "type":"filters.crop",
>       "bounds":"([737943,738600],[4279446,4280246])",
>       "tag":"crop_3"
>     },
>     {
>         "inputs":"tile_4",
>       "type":"filters.crop",
>       "bounds":"([737143,737943],[4279446,4280246])",
>       "tag":"crop_4"
>     },
>     {
>         "inputs":"tile_5",
>       "type":"filters.crop",
>       "bounds":"([737943,738600],[4279000,4279446])",
>       "tag":"crop_5"
>     },
>     {
>         "inputs":"tile_6",
>       "type":"filters.crop",
>       "bounds":"([737143,737943],[4279000,4279446])",
>       "tag":"crop_6"
>     },
>     {
>         "inputs":"tile_7",
>       "type":"filters.crop",
>       "bounds":"([737943,738600],[4281046,4281300])",
>       "tag":"crop_7"
>     },
>     {
>         "inputs":"tile_8",
>       "type":"filters.crop",
>       "bounds":"([737143,737943],[4281046,4281300])",
>       "tag":"crop_8"
>     },
>     {
>         "inputs":"tile_9",
>       "type":"filters.crop",
>       "bounds":"([734385,734743],[4279446,4280246])",
>       "tag":"crop_9"
>     },
>     {
>         "inputs":"tile_10",
>       "type":"filters.crop",
>       "bounds":"([734385,734743],[4280246,4281046])",
>       "tag":"crop_10"
>     },
>     {
>         "inputs":"tile_11",
>       "type":"filters.crop",
>       "bounds":"([734743,735543],[4279446,4280246])",
>       "tag":"crop_11"
>     },
>     {
>         "inputs":"tile_12",
>       "type":"filters.crop",
>       "bounds":"([734743,735543],[4280246,4281046])",
>       "tag":"crop_12"
>     },
>     {
>         "inputs":"tile_13",
>       "type":"filters.crop",
>       "bounds":"([735543,736343],[4279446,4280246])",
>       "tag":"crop_13"
>     },
>     {
>         "inputs":"tile_14",
>       "type":"filters.crop",
>       "bounds":"([735543,736343],[4280246,4281046])",
>       "tag":"crop_14"
>     },
>     {
>         "inputs":"tile_15",
>       "type":"filters.crop",
>       "bounds":"([734385,734743],[4279000,4279446])",
>       "tag":"crop_15"
>     },
>     {
>         "inputs":"tile_16",
>       "type":"filters.crop",
>       "bounds":"([734743,735543],[4279000,4279446])",
>       "tag":"crop_16"
>     },
>     {
>         "inputs":"tile_17",
>       "type":"filters.crop",
>       "bounds":"([735543,736343],[4279000,4279446])",
>       "tag":"crop_17"
>     },
>     {
>         "inputs":"tile_18",
>       "type":"filters.crop",
>       "bounds":"([734385,734743],[4281046,4281300])",
>       "tag":"crop_18"
>     },
>     {
>         "inputs":"tile_19",
>       "type":"filters.crop",
>       "bounds":"([734743,735543],[4281046,4281300])",
>       "tag":"crop_19"
>     },
>     {
>         "inputs":"tile_20",
>       "type":"filters.crop",
>       "bounds":"([735543,736343],[4281046,4281300])",
>       "tag":"crop_20"
>     },
>     {
>         "inputs":"tile_21",
>       "type":"filters.crop",
>       "bounds":"([736343,737143],[4279446,4280246])",
>       "tag":"crop_21"
>     },
>     {
>         "inputs":"tile_22",
>       "type":"filters.crop",
>       "bounds":"([736343,737143],[4280246,4281046])",
>       "tag":"crop_22"
>     },
>     {
>         "inputs":"tile_23",
>       "type":"filters.crop",
>       "bounds":"([736343,737143],[4279000,4279446])",
>       "tag":"crop_23"
>     },
>     {
>         "inputs":"tile_24",
>       "type":"filters.crop",
>       "bounds":"([736343,737143],[4281046,4281300])",
>       "tag":"crop_24"
>     },
>     {
>
> "inputs":["crop_1","crop_2","crop_3","crop_4","crop_5","crop_6","crop_7","crop_8","crop_9","crop_10","crop_11","crop_12","crop_13","crop_14","crop_15","crop_16","crop_17","crop_18","crop_19","crop_20","crop_21","crop_22","crop_23","crop_24"],
>       "type":"filters.merge",
>       "tag":"merge_tiles"
>     },
>     {
>         "inputs":"merge_tiles",
>       "type":"filters.reprojection",
>       "tag":"reproject_tiles",
>       "in_srs":"EPSG:26915",
>       "out_srs":"EPSG:32615"
>     },
>     {
>         "inputs":"reproject_tiles",
>       "type":"writers.las",
>       "filename":"C:/data/forest_park/mcc/mcc_merge_UTM (s-1_5, t-0_3).laz"
>     }
>   ]
> }
>
>
>
> On Sun, Apr 29, 2018 at 10:19 AM Howard Butler <howard at hobu.co> wrote:
>
>>
>> On 4/28/18 5:03 PM, Eric Robeck wrote:
>>> Is there a way within PDAL to merged buffered tiles with a constant
>> buffer
>>> width, while filtering out only the buffers from each tile?
>>>
>>> For context, I am using an external software to modify a large point
>> cloud.
>>> Due to memory constraints, I first tiled the data using the "splitters"
>>> filter, but included a 10 m buffer to minimize edge effects. Now that the
>>> data are processed, I want to merge them back into a single file.
>> You could use filters.assign to set a "buffer" value for the points that
>> are in your buffer ring (or the ones that aren't), and then use
>> filters.range to cull out points that have the "!buffer" classification
>> before you go back to merge them altogether. It would be laborious, but
>> you could get the job done.
>>
>> Additionally, Connor Manning of Hobu demonstrated a workflow at FOSS4G
>> 2017 [1] that is very similar to what you're doing except it is based on
>> Greyhound and Entwine for the data management (and PDAL for the
>> processing). The goal is to be able to put back information into an
>> Entwine tree and not be constrained by a fixed tiling scheme while
>> processing. It's all very much a prototype at the moment, but dynamic
>> workflows based on adaptive tiling schemes is something we are actively
>> working on.
>>
>> Howard
>>
>>
>> [1] https://vimeo.com/245073446
>>
>>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/d22a5205/attachment.sig>

From erobeck at gmail.com  Thu May  3 08:49:10 2018
From: erobeck at gmail.com (Eric Robeck)
Date: Thu, 03 May 2018 15:49:10 +0000
Subject: [pdal] Merging buffered tiles
In-Reply-To: <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
 <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
Message-ID: <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>

Howard,

Yes, the parentheses crept in early while I tried to keep track of the
various parameter combinations used for my bare earth simulations, but they
caused headaches later on...

As an update, I ran a slightly modified version of the same pipeline
(sample tile geometries, different source files) and got no errors. This
time the input files were in LAZ format and they were not reprojected.
Another factor could be that the first set were generated by the old(ish)
MCC-LIDAR application, and the latter by Isenburg's lasground.exe.

Regards,
Eric


On Thu, May 3, 2018 at 10:26 AM Howard Butler <howard at hobu.co> wrote:

> Eric,
>
>
> This is such an awesome pipeline (except for parenthesis in your
> filenames -- ewww :).
>
> The SRS complaint is something we should investigate. I suppose it is
> because something isn't transiting through GDAL as "equal" due to the
> way it works.
>
> Howard
>
>
> On 5/3/18 10:05 AM, Eric Robeck wrote:
> > Howard / Mike,
> >
> > Thanks for your feedback. Based on your recommendation, I built a
> pipeline
> > that reads all 24 input tiles, crops each to non-overlapping bounding
> > boxes, merges, and reprojects the results prior to writing the composite
> > LAZ file.
> >
> > The pipeline works and the output file looks great. I can't find any
> > obvious errors or omissions. However, PDAL returns the following error
> > message when writing the file, repeated 24 times (one per input file):
> >
> > *(pdal pipeline Error) writers.las: Attempting to write
> > 'C:/data/forest_park/mcc/mcc_merge_UTM (s-1_5, t-0_3).laz' with multiple
> > point spatial references.*
> >
> > Should I be worried about this error? Is there any way to structure my
> JSON
> > pipeline to prevent it from occurring? The full pipeline is copied below.
> >
> > Thanks,
> > Eric
> >
> > {
> >   "pipeline":
> >   [
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_1 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_1"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_2 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_2"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_3 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_3"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_4 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_4"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_5 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_5"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_6 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_6"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_7 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_7"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_8 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_8"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_9 (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_9"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_10
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_10"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_11
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_11"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_12
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_12"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_13
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_13"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_14
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_14"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_15
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_15"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_16
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_16"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_17
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_17"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_18
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_18"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_19
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_19"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_20
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_20"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_21
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_21"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_22
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_22"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_23
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_23"
> >     },
> >     {
> >         "type":"readers.las",
> >         "filename":"C:/data/forest_park/mcc/forest_park_sp_tile_24
> (s-1_5,
> > t-0_3).las",
> >         "tag":"tile_24"
> >     },
> >     {
> >         "inputs":"tile_1",
> >       "type":"filters.crop",
> >       "bounds":"([737943,738600],[4280246,4281046])",
> >       "tag":"crop_1"
> >     },
> >     {
> >         "inputs":"tile_2",
> >       "type":"filters.crop",
> >       "bounds":"([737143,737943],[4280246,4281046])",
> >       "tag":"crop_2"
> >     },
> >     {
> >         "inputs":"tile_3",
> >       "type":"filters.crop",
> >       "bounds":"([737943,738600],[4279446,4280246])",
> >       "tag":"crop_3"
> >     },
> >     {
> >         "inputs":"tile_4",
> >       "type":"filters.crop",
> >       "bounds":"([737143,737943],[4279446,4280246])",
> >       "tag":"crop_4"
> >     },
> >     {
> >         "inputs":"tile_5",
> >       "type":"filters.crop",
> >       "bounds":"([737943,738600],[4279000,4279446])",
> >       "tag":"crop_5"
> >     },
> >     {
> >         "inputs":"tile_6",
> >       "type":"filters.crop",
> >       "bounds":"([737143,737943],[4279000,4279446])",
> >       "tag":"crop_6"
> >     },
> >     {
> >         "inputs":"tile_7",
> >       "type":"filters.crop",
> >       "bounds":"([737943,738600],[4281046,4281300])",
> >       "tag":"crop_7"
> >     },
> >     {
> >         "inputs":"tile_8",
> >       "type":"filters.crop",
> >       "bounds":"([737143,737943],[4281046,4281300])",
> >       "tag":"crop_8"
> >     },
> >     {
> >         "inputs":"tile_9",
> >       "type":"filters.crop",
> >       "bounds":"([734385,734743],[4279446,4280246])",
> >       "tag":"crop_9"
> >     },
> >     {
> >         "inputs":"tile_10",
> >       "type":"filters.crop",
> >       "bounds":"([734385,734743],[4280246,4281046])",
> >       "tag":"crop_10"
> >     },
> >     {
> >         "inputs":"tile_11",
> >       "type":"filters.crop",
> >       "bounds":"([734743,735543],[4279446,4280246])",
> >       "tag":"crop_11"
> >     },
> >     {
> >         "inputs":"tile_12",
> >       "type":"filters.crop",
> >       "bounds":"([734743,735543],[4280246,4281046])",
> >       "tag":"crop_12"
> >     },
> >     {
> >         "inputs":"tile_13",
> >       "type":"filters.crop",
> >       "bounds":"([735543,736343],[4279446,4280246])",
> >       "tag":"crop_13"
> >     },
> >     {
> >         "inputs":"tile_14",
> >       "type":"filters.crop",
> >       "bounds":"([735543,736343],[4280246,4281046])",
> >       "tag":"crop_14"
> >     },
> >     {
> >         "inputs":"tile_15",
> >       "type":"filters.crop",
> >       "bounds":"([734385,734743],[4279000,4279446])",
> >       "tag":"crop_15"
> >     },
> >     {
> >         "inputs":"tile_16",
> >       "type":"filters.crop",
> >       "bounds":"([734743,735543],[4279000,4279446])",
> >       "tag":"crop_16"
> >     },
> >     {
> >         "inputs":"tile_17",
> >       "type":"filters.crop",
> >       "bounds":"([735543,736343],[4279000,4279446])",
> >       "tag":"crop_17"
> >     },
> >     {
> >         "inputs":"tile_18",
> >       "type":"filters.crop",
> >       "bounds":"([734385,734743],[4281046,4281300])",
> >       "tag":"crop_18"
> >     },
> >     {
> >         "inputs":"tile_19",
> >       "type":"filters.crop",
> >       "bounds":"([734743,735543],[4281046,4281300])",
> >       "tag":"crop_19"
> >     },
> >     {
> >         "inputs":"tile_20",
> >       "type":"filters.crop",
> >       "bounds":"([735543,736343],[4281046,4281300])",
> >       "tag":"crop_20"
> >     },
> >     {
> >         "inputs":"tile_21",
> >       "type":"filters.crop",
> >       "bounds":"([736343,737143],[4279446,4280246])",
> >       "tag":"crop_21"
> >     },
> >     {
> >         "inputs":"tile_22",
> >       "type":"filters.crop",
> >       "bounds":"([736343,737143],[4280246,4281046])",
> >       "tag":"crop_22"
> >     },
> >     {
> >         "inputs":"tile_23",
> >       "type":"filters.crop",
> >       "bounds":"([736343,737143],[4279000,4279446])",
> >       "tag":"crop_23"
> >     },
> >     {
> >         "inputs":"tile_24",
> >       "type":"filters.crop",
> >       "bounds":"([736343,737143],[4281046,4281300])",
> >       "tag":"crop_24"
> >     },
> >     {
> >
> >
> "inputs":["crop_1","crop_2","crop_3","crop_4","crop_5","crop_6","crop_7","crop_8","crop_9","crop_10","crop_11","crop_12","crop_13","crop_14","crop_15","crop_16","crop_17","crop_18","crop_19","crop_20","crop_21","crop_22","crop_23","crop_24"],
> >       "type":"filters.merge",
> >       "tag":"merge_tiles"
> >     },
> >     {
> >         "inputs":"merge_tiles",
> >       "type":"filters.reprojection",
> >       "tag":"reproject_tiles",
> >       "in_srs":"EPSG:26915",
> >       "out_srs":"EPSG:32615"
> >     },
> >     {
> >         "inputs":"reproject_tiles",
> >       "type":"writers.las",
> >       "filename":"C:/data/forest_park/mcc/mcc_merge_UTM (s-1_5,
> t-0_3).laz"
> >     }
> >   ]
> > }
> >
> >
> >
> > On Sun, Apr 29, 2018 at 10:19 AM Howard Butler <howard at hobu.co> wrote:
> >
> >>
> >> On 4/28/18 5:03 PM, Eric Robeck wrote:
> >>> Is there a way within PDAL to merged buffered tiles with a constant
> >> buffer
> >>> width, while filtering out only the buffers from each tile?
> >>>
> >>> For context, I am using an external software to modify a large point
> >> cloud.
> >>> Due to memory constraints, I first tiled the data using the "splitters"
> >>> filter, but included a 10 m buffer to minimize edge effects. Now that
> the
> >>> data are processed, I want to merge them back into a single file.
> >> You could use filters.assign to set a "buffer" value for the points that
> >> are in your buffer ring (or the ones that aren't), and then use
> >> filters.range to cull out points that have the "!buffer" classification
> >> before you go back to merge them altogether. It would be laborious, but
> >> you could get the job done.
> >>
> >> Additionally, Connor Manning of Hobu demonstrated a workflow at FOSS4G
> >> 2017 [1] that is very similar to what you're doing except it is based on
> >> Greyhound and Entwine for the data management (and PDAL for the
> >> processing). The goal is to be able to put back information into an
> >> Entwine tree and not be constrained by a fixed tiling scheme while
> >> processing. It's all very much a prototype at the moment, but dynamic
> >> workflows based on adaptive tiling schemes is something we are actively
> >> working on.
> >>
> >> Howard
> >>
> >>
> >> [1] https://vimeo.com/245073446
> >>
> >>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/76b37eb0/attachment-0001.html>

From howard at hobu.co  Thu May  3 09:02:38 2018
From: howard at hobu.co (Howard Butler)
Date: Thu, 3 May 2018 11:02:38 -0500
Subject: [pdal] Merging buffered tiles
In-Reply-To: <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
 <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
 <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>
Message-ID: <01513846-920C-48F8-ABE5-4A83EB1E876E@hobu.co>


> On May 3, 2018, at 10:49 AM, Eric Robeck <erobeck at gmail.com> wrote:
> 
> Howard,
> 
> Yes, the parentheses crept in early while I tried to keep track of the various parameter combinations used for my bare earth simulations, but they caused headaches later on...
> 
> As an update, I ran a slightly modified version of the same pipeline (sample tile geometries, different source files) and got no errors. This time the input files were in LAZ format and they were not reprojected. Another factor could be that the first set were generated by the old(ish) MCC-LIDAR application, and the latter by Isenburg's lasground.exe.

That fact pattern would seem to confirm my hunch. This srs stuff is definitely a topic we could improve.

Howard

From andrew.bell.ia at gmail.com  Thu May  3 11:26:59 2018
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 3 May 2018 14:26:59 -0400
Subject: [pdal] Merging buffered tiles
In-Reply-To: <01513846-920C-48F8-ABE5-4A83EB1E876E@hobu.co>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
 <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
 <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>
 <01513846-920C-48F8-ABE5-4A83EB1E876E@hobu.co>
Message-ID: <CACJ51z0cNUUimQMU0=MT4yYA5M5DG41mnM75upEEZgQ5ax+N5A@mail.gmail.com>

I'm confused by the error you get.  I'll run a test to see if I can figure
out what might be going on.

On Thu, May 3, 2018 at 12:02 PM, Howard Butler <howard at hobu.co> wrote:

>
> > On May 3, 2018, at 10:49 AM, Eric Robeck <erobeck at gmail.com> wrote:
> >
> > Howard,
> >
> > Yes, the parentheses crept in early while I tried to keep track of the
> various parameter combinations used for my bare earth simulations, but they
> caused headaches later on...
> >
> > As an update, I ran a slightly modified version of the same pipeline
> (sample tile geometries, different source files) and got no errors. This
> time the input files were in LAZ format and they were not reprojected.
> Another factor could be that the first set were generated by the old(ish)
> MCC-LIDAR application, and the latter by Isenburg's lasground.exe.
>
> That fact pattern would seem to confirm my hunch. This srs stuff is
> definitely a topic we could improve.
>
> Howard
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal




-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/3a2b4676/attachment.html>

From andrew.bell.ia at gmail.com  Thu May  3 11:33:47 2018
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 3 May 2018 14:33:47 -0400
Subject: [pdal] Merging buffered tiles
In-Reply-To: <CACJ51z0cNUUimQMU0=MT4yYA5M5DG41mnM75upEEZgQ5ax+N5A@mail.gmail.com>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
 <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
 <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>
 <01513846-920C-48F8-ABE5-4A83EB1E876E@hobu.co>
 <CACJ51z0cNUUimQMU0=MT4yYA5M5DG41mnM75upEEZgQ5ax+N5A@mail.gmail.com>
Message-ID: <CACJ51z0uT+bnbgbqauouaMXyr7=28BdJoKNEJx3UN99exeUfKg@mail.gmail.com>

Any chance you could share a couple of your input files?

On Thu, May 3, 2018 at 2:26 PM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> I'm confused by the error you get.  I'll run a test to see if I can figure
> out what might be going on.
>
> On Thu, May 3, 2018 at 12:02 PM, Howard Butler <howard at hobu.co> wrote:
>
>>
>> > On May 3, 2018, at 10:49 AM, Eric Robeck <erobeck at gmail.com> wrote:
>> >
>> > Howard,
>> >
>> > Yes, the parentheses crept in early while I tried to keep track of the
>> various parameter combinations used for my bare earth simulations, but they
>> caused headaches later on...
>> >
>> > As an update, I ran a slightly modified version of the same pipeline
>> (sample tile geometries, different source files) and got no errors. This
>> time the input files were in LAZ format and they were not reprojected.
>> Another factor could be that the first set were generated by the old(ish)
>> MCC-LIDAR application, and the latter by Isenburg's lasground.exe.
>>
>> That fact pattern would seem to confirm my hunch. This srs stuff is
>> definitely a topic we could improve.
>>
>> Howard
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/e3fe87a9/attachment.html>

From erobeck at gmail.com  Thu May  3 13:30:50 2018
From: erobeck at gmail.com (Eric Robeck)
Date: Thu, 03 May 2018 20:30:50 +0000
Subject: [pdal] Merging buffered tiles
In-Reply-To: <CAKa5cDLcVG0pkDxtsTzPLXqxyg6x0W3t2h+hDnM8Ai92MeikaA@mail.gmail.com>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
 <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
 <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>
 <01513846-920C-48F8-ABE5-4A83EB1E876E@hobu.co>
 <CACJ51z0cNUUimQMU0=MT4yYA5M5DG41mnM75upEEZgQ5ax+N5A@mail.gmail.com>
 <CACJ51z0uT+bnbgbqauouaMXyr7=28BdJoKNEJx3UN99exeUfKg@mail.gmail.com>
 <CAKa5cDLcVG0pkDxtsTzPLXqxyg6x0W3t2h+hDnM8Ai92MeikaA@mail.gmail.com>
Message-ID: <CAKa5cDLdjqLRvDvGu48JMoj5ohwBykvqOnTZ=Mj13Kr00s+O5w@mail.gmail.com>

Andrew,

Sure, no problem. I sent you and Howard copies of the files in a separate
email. They are as follows:

1.  "clean_tile_18.las": the original file I created using PDAL to tile and
convert from LAZ 1.4 to LAS 1.2)
2.    "mcc_tile_18.las": the tile created by MCC-LIDAR after ground
classification
3.    "lasground_tile_18.laz": the tile created by LASTools lasground.exe
from the LAS file, but recompressed by lasground

I also think I identified the problem. I thought the input 'mcc' tiles were
in Missouri East State Plane coordinates, because I had projected some MCC
inputs before, so I told PDAL to convert them from EPSG 26915 (Missouri
East State Plane) to EPSG 32615 (UTM 15N):

      "inputs":"merge_tiles",
      "type":"filters.reprojection",
      "tag":"reproject_tiles",
      "in_srs":"EPSG:26915",
      "out_srs":"EPSG:32615"

Apparently PDAL was smarter than me, because it recognized the inherent
coordinate system and did NOT reproject the data. When I took out the
reprojection stage and ran the pipeline again, it finished without errors.
PDAL protected me from my own mistake, so maybe that was its way of
detecting the discrepancy.

I hope that helps.

Regards,
Eric

On Thu, May 3, 2018 at 2:54 PM Eric Robeck <erobeck at gmail.com> wrote:

> Sure, no problem. I've attached copies of my smallest tile here. They are
> as follows:
>
>    - "clean_tile_18.las": the original file I created using PDAL to tile
>    and convert from LAZ 1.4 to LAS 1.2)
>    - "mcc_tile_18.las": the tile created by MCC-LIDAR after ground
>    classification
>    - "lasground_tile_18.laz": the tile created by LASTools lasground.exe
>    from the LAS file, but recompressed by lasground
>
> I also think I identified the problem. I thought the input 'mcc' tiles
> were in Missouri East State Plane coordinates, because I had projected some
> MCC inputs before, so I told PDAL to convert them from EPSG 26915 (Missouri
> East State Plane) to EPSG 32615 (UTM 15N):
>
>       "inputs":"merge_tiles",
>       "type":"filters.reprojection",
>       "tag":"reproject_tiles",
>       "in_srs":"EPSG:26915",
>       "out_srs":"EPSG:32615"
>
> Apparently PDAL was smarter than me, because it recognized the inherent
> coordinate system and did NOT reproject the data. When I took out the
> reprojection stage and ran the pipeline again, it finished without errors.
> PDAL protected me from my own mistake, so maybe that was its way of
> detecting the discrepancy.
>
> I hope that helps.
>
> Regards,
> Eric
>
>
> On Thu, May 3, 2018 at 1:33 PM Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> Any chance you could share a couple of your input files?
>>
>> On Thu, May 3, 2018 at 2:26 PM, Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>
>>> I'm confused by the error you get.  I'll run a test to see if I can
>>> figure out what might be going on.
>>>
>>> On Thu, May 3, 2018 at 12:02 PM, Howard Butler <howard at hobu.co> wrote:
>>>
>>>>
>>>> > On May 3, 2018, at 10:49 AM, Eric Robeck <erobeck at gmail.com> wrote:
>>>> >
>>>> > Howard,
>>>> >
>>>> > Yes, the parentheses crept in early while I tried to keep track of
>>>> the various parameter combinations used for my bare earth simulations, but
>>>> they caused headaches later on...
>>>> >
>>>> > As an update, I ran a slightly modified version of the same pipeline
>>>> (sample tile geometries, different source files) and got no errors. This
>>>> time the input files were in LAZ format and they were not reprojected.
>>>> Another factor could be that the first set were generated by the old(ish)
>>>> MCC-LIDAR application, and the latter by Isenburg's lasground.exe.
>>>>
>>>> That fact pattern would seem to confirm my hunch. This srs stuff is
>>>> definitely a topic we could improve.
>>>>
>>>> Howard
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>>
>>>
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>>
>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180503/bb9723b6/attachment.html>

From mateusz at loskot.net  Mon May  7 13:34:09 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 7 May 2018 22:34:09 +0200
Subject: [pdal] vcpkg or conan (was: PDAL Windows debug configuration)
In-Reply-To: <a44e8f13-e658-abad-1f8e-a5ccf9c2e607@hobu.co>
References: <CABUeae9n4zx2rPTfiF9PZfF6cSEcNRJYy0nosxb8GHuFdmMbCQ@mail.gmail.com>
 <a44e8f13-e658-abad-1f8e-a5ccf9c2e607@hobu.co>
Message-ID: <CABUeae_KKO007URDXMVgUDrV4G7xOjkRTNEYjRWZVf9-jv2B9w@mail.gmail.com>

On 26 April 2018 at 22:16, Howard Butler <howard at hobu.co> wrote:
> Mat,
>
> Thanks for the detailed feedback. It looks like vcpkg has the edge in
> relation to PDAL's sphere at the moment.

Howard,

I've submitted first version of PDAL package to vcpkg

https://github.com/Microsoft/vcpkg/pull/3452

Although it is a minimal setup, a proof of concept, it is pretty much usable.
Next step is to wait and address any review comments.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From howard at hobu.co  Sun May 13 08:13:56 2018
From: howard at hobu.co (Howard Butler)
Date: Sun, 13 May 2018 10:13:56 -0500
Subject: [pdal] PDAL 1.7.2 Released
Message-ID: <D32B2CC3-3811-4ECD-AB7E-9C66843A6074@hobu.co>

All,

PDAL 1.7.2 maintenance release is now available. See https://github.com/PDAL/PDAL/releases/tag/1.7.2 <https://github.com/PDAL/PDAL/releases/tag/1.7.2>  for bug details and https://pdal.io/download.html <https://pdal.io/download.html>  for download.

The OSGeo4W package has not yet been updated due to issues with OSGeo's download server. Once they have been resolved, I will refresh the release on that platform.

Howard

• Don't write LAS GeoTIFF VLRs if they contain no data (#1914)
• Centroid computation should use doubles instead of floats (#1919)
• Fixup -Werror-related warnings (#1915)
• Fix linking to libdl for dlopen (#1902)
• BPF doesn't build with ZLIB (#1929)
• Packaging improvements (#1942, #1976, #1980, #1943)
• Explicitly allow underscores and capital letters in stage names (implicit pre-1.7, hardened to disallow in 1.7.1) (#1923)
• Warn about auto scaling writers.las in stream mode (#1940)
• Handle cr/lf endings in Windows for readers.text (#1939 )
• Make pdal-config owner writeable for Conda packaging (#1964)
• Allow replacement of artifacts (#1994)
• Fixed problem with UTM calculation for southern zones (#1989)
• Fixed issue with kernel plugins failing to load (#1971)
• Fixed problem where filters.ferry would create dimensions with bad types (#1930)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180513/8817d63f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: Message signed with OpenPGP
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180513/8817d63f/attachment.sig>

From andrew.bell.ia at gmail.com  Mon May 14 08:05:17 2018
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 14 May 2018 11:05:17 -0400
Subject: [pdal] Merging buffered tiles
In-Reply-To: <CAKa5cDLdjqLRvDvGu48JMoj5ohwBykvqOnTZ=Mj13Kr00s+O5w@mail.gmail.com>
References: <CAKa5cD+P89fRXb3yex1YWSvkJQ_a+y7P9oS1n0wDnHLkMcEDMQ@mail.gmail.com>
 <e68a23de-d612-2700-9307-24a3872d6a29@hobu.co>
 <CAKa5cDJiG-3B6toC+06fbHj9DS-Bb+5mtxFF2617qLwCD+MjZg@mail.gmail.com>
 <55877e2b-be4c-b33c-70e5-bed4725423e0@hobu.co>
 <CAKa5cDJsL4Q5GAMz=3OWt_OA5wG0mgREyXweCBK-=TzgYe74TA@mail.gmail.com>
 <01513846-920C-48F8-ABE5-4A83EB1E876E@hobu.co>
 <CACJ51z0cNUUimQMU0=MT4yYA5M5DG41mnM75upEEZgQ5ax+N5A@mail.gmail.com>
 <CACJ51z0uT+bnbgbqauouaMXyr7=28BdJoKNEJx3UN99exeUfKg@mail.gmail.com>
 <CAKa5cDLcVG0pkDxtsTzPLXqxyg6x0W3t2h+hDnM8Ai92MeikaA@mail.gmail.com>
 <CAKa5cDLdjqLRvDvGu48JMoj5ohwBykvqOnTZ=Mj13Kr00s+O5w@mail.gmail.com>
Message-ID: <CACJ51z1R-dgmhcyFrzmEVjA5L18FEXDNodm-iEp0qUAAi=k1Yg@mail.gmail.com>

I opened this ticket to address this issue:

https://github.com/PDAL/PDAL/issues/2009

On Thu, May 3, 2018 at 4:30 PM, Eric Robeck <erobeck at gmail.com> wrote:

> Andrew,
>
> Sure, no problem. I sent you and Howard copies of the files in a separate
> email. They are as follows:
>
> 1.  "clean_tile_18.las": the original file I created using PDAL to tile
> and convert from LAZ 1.4 to LAS 1.2)
> 2.    "mcc_tile_18.las": the tile created by MCC-LIDAR after ground
> classification
> 3.    "lasground_tile_18.laz": the tile created by LASTools lasground.exe
> from the LAS file, but recompressed by lasground
>
> I also think I identified the problem. I thought the input 'mcc' tiles
> were in Missouri East State Plane coordinates, because I had projected some
> MCC inputs before, so I told PDAL to convert them from EPSG 26915 (Missouri
> East State Plane) to EPSG 32615 (UTM 15N):
>
>       "inputs":"merge_tiles",
>       "type":"filters.reprojection",
>       "tag":"reproject_tiles",
>       "in_srs":"EPSG:26915",
>       "out_srs":"EPSG:32615"
>
> Apparently PDAL was smarter than me, because it recognized the inherent
> coordinate system and did NOT reproject the data. When I took out the
> reprojection stage and ran the pipeline again, it finished without errors.
> PDAL protected me from my own mistake, so maybe that was its way of
> detecting the discrepancy.
>
> I hope that helps.
>
> Regards,
> Eric
>
> On Thu, May 3, 2018 at 2:54 PM Eric Robeck <erobeck at gmail.com> wrote:
>
>> Sure, no problem. I've attached copies of my smallest tile here. They are
>> as follows:
>>
>>    - "clean_tile_18.las": the original file I created using PDAL to tile
>>    and convert from LAZ 1.4 to LAS 1.2)
>>    - "mcc_tile_18.las": the tile created by MCC-LIDAR after ground
>>    classification
>>    - "lasground_tile_18.laz": the tile created by LASTools lasground.exe
>>    from the LAS file, but recompressed by lasground
>>
>> I also think I identified the problem. I thought the input 'mcc' tiles
>> were in Missouri East State Plane coordinates, because I had projected some
>> MCC inputs before, so I told PDAL to convert them from EPSG 26915 (Missouri
>> East State Plane) to EPSG 32615 (UTM 15N):
>>
>>       "inputs":"merge_tiles",
>>       "type":"filters.reprojection",
>>       "tag":"reproject_tiles",
>>       "in_srs":"EPSG:26915",
>>       "out_srs":"EPSG:32615"
>>
>> Apparently PDAL was smarter than me, because it recognized the inherent
>> coordinate system and did NOT reproject the data. When I took out the
>> reprojection stage and ran the pipeline again, it finished without errors.
>> PDAL protected me from my own mistake, so maybe that was its way of
>> detecting the discrepancy.
>>
>> I hope that helps.
>>
>> Regards,
>> Eric
>>
>>
>> On Thu, May 3, 2018 at 1:33 PM Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>
>>> Any chance you could share a couple of your input files?
>>>
>>> On Thu, May 3, 2018 at 2:26 PM, Andrew Bell <andrew.bell.ia at gmail.com>
>>> wrote:
>>>
>>>> I'm confused by the error you get.  I'll run a test to see if I can
>>>> figure out what might be going on.
>>>>
>>>> On Thu, May 3, 2018 at 12:02 PM, Howard Butler <howard at hobu.co> wrote:
>>>>
>>>>>
>>>>> > On May 3, 2018, at 10:49 AM, Eric Robeck <erobeck at gmail.com> wrote:
>>>>> >
>>>>> > Howard,
>>>>> >
>>>>> > Yes, the parentheses crept in early while I tried to keep track of
>>>>> the various parameter combinations used for my bare earth simulations, but
>>>>> they caused headaches later on...
>>>>> >
>>>>> > As an update, I ran a slightly modified version of the same pipeline
>>>>> (sample tile geometries, different source files) and got no errors. This
>>>>> time the input files were in LAZ format and they were not reprojected.
>>>>> Another factor could be that the first set were generated by the old(ish)
>>>>> MCC-LIDAR application, and the latter by Isenburg's lasground.exe.
>>>>>
>>>>> That fact pattern would seem to confirm my hunch. This srs stuff is
>>>>> definitely a topic we could improve.
>>>>>
>>>>> Howard
>>>>> _______________________________________________
>>>>> pdal mailing list
>>>>> pdal at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>
>>>>
>>>>
>>>>
>>>> --
>>>> Andrew Bell
>>>> andrew.bell.ia at gmail.com
>>>>
>>>
>>>
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>>
>>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180514/d9291d59/attachment.html>

From Odd-Ragnar.Lydersen at powel.no  Wed May 16 06:06:14 2018
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Wed, 16 May 2018 13:06:14 +0000
Subject: [pdal] How to add filters (with C++ API)
Message-ID: <55f83c689f374dc49b0583ef1fc654ed@ITTRHEX001.powelasa.powel.com>

I'm writing code to add filters when reading las files.
All examples are in json format, and I'm wondering what is the best way to do this in C++.

I've been looking at the tests from the source code, to get examples, but I can't find any that combine different kinds of filters.

Code example (Semi Pseudo):

if (useFilters)
  {
    bool filterInputIsSet = false;

    LasReader filterReader;
    prepareLasReader(filterReader, fileName);

   if (useCropFilter)
    {
      cropOptions.add("bounds", someBounds);

      if (!filterInputIsSet)
      {
        crpFilter.setInput(filterReader);
        filterInputIsSet = true;
      }
      cropFilter.addOptions(cropOptions);
    }

    if (useClassFilter)
    {
      std::string classFilterString;
      for (int i=0; i <= ClassificationType::eOverlapPoints; i++)
      {
        addClassToString(classFilterString);
      }
      rangeOptions.add("limits", classFilterString);

      if (!filterInputIsSet) // Only rangeFilter is used
      {
        rangeFilter.setInput(filterReader);
        filterInputIsSet = true;
      }
      else // Both filters are used
      {
        rngFilter.setInput(cropFilter);
      }

      rangeFilter.setOptions(rangeOptions);
      rangeFilter.prepare(table);
      point_view_set = rangeFilter.execute(table);
      point_view = *point_view_set.begin();
    }
    else // Only cropFilter is used
    {
      cropFilter.prepare(table);
      point_view_set = cropFilter.execute(table);
      point_view = *point_view_set.begin();
    }
 }
  else // No filters are used
  {
    LasReader.prepare(table);
    point_view_set = LasReader.execute(table);
    point_view = *point_view_set.begin();
  }

Is there a better, and more elegant way to do this?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180516/f75f130e/attachment-0001.html>

From andrew.bell.ia at gmail.com  Wed May 16 07:56:30 2018
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 16 May 2018 10:56:30 -0400
Subject: [pdal] How to add filters (with C++ API)
In-Reply-To: <55f83c689f374dc49b0583ef1fc654ed@ITTRHEX001.powelasa.powel.com>
References: <55f83c689f374dc49b0583ef1fc654ed@ITTRHEX001.powelasa.powel.com>
Message-ID: <CACJ51z17qkxXmtEBLv3rNWa8Yhizz=LLbR2buaRMKtOLvsGSow@mail.gmail.com>

I'm not exactly sure what your goal is.  If you're trying to write some
kind of a UI that builds a pipeline based on some options (or some such),
then what you're doing is pretty much it.  You might want to look at the
source code for some of the kernels.  The info kernel is a bit of a mess,
but does this kind of thing.  You might also have a look at
PipelineManager, which is what we use internally to build pipelines from a
specification.

That said, no matter what you're doing, the general procedure is to build a
pipeline, then prepare and execute it.

Hope that helps,

On Wed, May 16, 2018 at 9:06 AM, Odd Ragnar Lydersen <
Odd-Ragnar.Lydersen at powel.no> wrote:

> I’m writing code to add filters when reading las files.
>
> All examples are in json format, and I’m wondering what is the best way to
> do this in C++.
>
>
>
> I’ve been looking at the tests from the source code, to get examples, but
> I can’t find any that combine different kinds of filters.
>
>
>
> Code example (Semi Pseudo):
>
>
>
> if (useFilters)
>
>   {
>
>     bool filterInputIsSet = false;
>
>
>
>     *LasReader* filterReader;
>
>     prepareLasReader(filterReader, fileName);
>
>
>
>    if (useCropFilter)
>
>     {
>
>       cropOptions.add("bounds", someBounds);
>
>
>
>       if (!filterInputIsSet)
>
>       {
>
>         crpFilter.*setInput*(filterReader);
>
>         filterInputIsSet = true;
>
>       }
>
>       cropFilter.*addOptions*(cropOptions);
>
>     }
>
>
>
>     if (useClassFilter)
>
>     {
>
>       std::*string* classFilterString;
>
>       for (int i=0; i <= ClassificationType::eOverlapPoints; i++)
>
>       {
>
>         addClassToString(classFilterString);
>
>       }
>
>       rangeOptions.add("limits", classFilterString);
>
>
>
>       if (!filterInputIsSet) // Only rangeFilter is used
>
>       {
>
>         rangeFilter.*setInput*(filterReader);
>
>         filterInputIsSet = true;
>
>       }
>
>       else // Both filters are used
>
>       {
>
>         rngFilter.*setInput*(cropFilter);
>
>       }
>
>
>
>       rangeFilter.*setOptions*(rangeOptions);
>
>       rangeFilter.prepare(table);
>
>       point_view_set = rangeFilter.execute(table);
>
>       point_view = *point_view_set.*begin*();
>
>     }
>
>     else // Only cropFilter is used
>
>     {
>
>       cropFilter.prepare(table);
>
>       point_view_set = cropFilter.execute(table);
>
>       point_view = *point_view_set.*begin*();
>
>     }
>
>  }
>
>   else // No filters are used
>
>   {
>
>     *LasReader*.prepare(table);
>
>     point_view_set = *LasReader*.execute(table);
>
>     point_view = *point_view_set.*begin*();
>
>   }
>
>
>
> Is there a better, and more elegant way to do this?
>
>
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180516/de4a889f/attachment-0001.html>

From mateusz at loskot.net  Fri May 18 01:42:32 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 18 May 2018 10:42:32 +0200
Subject: [pdal] vcpkg or conan (was: PDAL Windows debug configuration)
In-Reply-To: <CABUeae_KKO007URDXMVgUDrV4G7xOjkRTNEYjRWZVf9-jv2B9w@mail.gmail.com>
References: <CABUeae9n4zx2rPTfiF9PZfF6cSEcNRJYy0nosxb8GHuFdmMbCQ@mail.gmail.com>
 <a44e8f13-e658-abad-1f8e-a5ccf9c2e607@hobu.co>
 <CABUeae_KKO007URDXMVgUDrV4G7xOjkRTNEYjRWZVf9-jv2B9w@mail.gmail.com>
Message-ID: <CABUeae9ROR6VpjWidKUbvF4b8Bi3r-nhp9J4sB+OHV2ZF+2bXg@mail.gmail.com>

On 7 May 2018 at 22:34, Mateusz Loskot <mateusz at loskot.net> wrote:
> On 26 April 2018 at 22:16, Howard Butler <howard at hobu.co> wrote:
>> Mat,
>>
>> Thanks for the detailed feedback. It looks like vcpkg has the edge in
>> relation to PDAL's sphere at the moment.
>
> Howard,
>
> I've submitted first version of PDAL package to vcpkg
>
> https://github.com/Microsoft/vcpkg/pull/3452
>
> Although it is a minimal setup, a proof of concept, it is pretty much usable.
> Next step is to wait and address any review comments.

FYI, PDAL 1.7.1 package has been accepted.

Anyone interested, please have a go, try it out and report any problems
(eg. as issue at https://github.com/Microsoft/vcpkg).
I will try to address them to polish the package.

Next, I am going to update to the port to PDAL 1.7.2 as well as
add missing dependencies to enable as many I/O formats as possible.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From Odd-Ragnar.Lydersen at powel.no  Wed May 23 01:06:44 2018
From: Odd-Ragnar.Lydersen at powel.no (Odd Ragnar Lydersen)
Date: Wed, 23 May 2018 08:06:44 +0000
Subject: [pdal] How to add filters (with C++ API)
In-Reply-To: <CACJ51z17qkxXmtEBLv3rNWa8Yhizz=LLbR2buaRMKtOLvsGSow@mail.gmail.com>
References: <55f83c689f374dc49b0583ef1fc654ed@ITTRHEX001.powelasa.powel.com>
 <CACJ51z17qkxXmtEBLv3rNWa8Yhizz=LLbR2buaRMKtOLvsGSow@mail.gmail.com>
Message-ID: <e434dd0bae7e48038eb9aa433829604d@ITTRHEX001.powelasa.powel.com>

You’re quite right, I’m trying to write some UI, where filters are applied to the input file.
It’s just that it’s so easy to set up in Json format, where you set the input file first, then apply filters, then writes to output.
Like this sample: https://pdal.io/tutorial/las.html#header-fields-example

I would like to do it in a similar way in C++.
The way I have done it feels wrong, since I cannot specify the input file right away, and then move on to the next stage in the pipeline.

I’ve had a look at the classes which you referred to.
Studying the code it seems like what I should really do, is to build a pipeline in C++.
It should probably be similar to the Json sample I refer to above in this message.

The guide “https://pdal.io/api/transition/index.html “ which I based my initial code upon didn’t mention the pipeline.

I’ll try to use the PipelineManager and see how it goes.

>Odd-Ragnar<
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180523/8ca69e03/attachment.html>

From howard at hobu.co  Thu May 24 18:37:44 2018
From: howard at hobu.co (Howard Butler)
Date: Thu, 24 May 2018 20:37:44 -0500
Subject: [pdal] How to add filters (with C++ API)
In-Reply-To: <e434dd0bae7e48038eb9aa433829604d@ITTRHEX001.powelasa.powel.com>
References: <55f83c689f374dc49b0583ef1fc654ed@ITTRHEX001.powelasa.powel.com>
 <CACJ51z17qkxXmtEBLv3rNWa8Yhizz=LLbR2buaRMKtOLvsGSow@mail.gmail.com>
 <e434dd0bae7e48038eb9aa433829604d@ITTRHEX001.powelasa.powel.com>
Message-ID: <a7533581-2817-e155-ac1d-edf0298ef28c@hobu.co>



On 5/23/18 3:06 AM, Odd Ragnar Lydersen wrote:
> I’ll try to use the PipelineManager and see how it goes.
Both the Python and Java extensions exclusively use the PipelineManager
rather than directly interacting with Stages. It is much easier to
manipulate PDAL pipeline in JSON than directly touching the objects.
Additionally, we are unlikely to break the Pipeline JSON syntax going
forward, but the C++ API might change a little bit which would cause you
to adapt.

If you workflow is to simply get at data and drive PDAL's stages, using
pipelines as JSON with PipelineManager is going to be the easiest and
most convenient way to program things.

Howard


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20180524/33317450/attachment.sig>

