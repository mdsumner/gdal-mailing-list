From alisoncramer at nevada.unr.edu  Mon Nov  2 10:22:17 2020
From: alisoncramer at nevada.unr.edu (alison.cramer3)
Date: Mon, 2 Nov 2020 11:22:17 -0700 (MST)
Subject: [pdal] PCL
Message-ID: <1604341337779-0.post@n6.nabble.com>

Hi all.  So I am having trouble getting PDAL to find my PCL plugin.  The
filters are listed and showing in the bin folder in my PDAL environment.  I
have tried to set driver path to the bin folder, but PDAL drivers still does
not show the pcl voxelgrid, which is what I am looking to use.  I don't
understand why this is so hard?!

Here's my code:

PDAL translate ./Desktop/anaconda3/envs/PDAL/lib/N18_merged.laz
./Desktop/anaconda3/envs/PDAL/N18mergedvgrid.laz
./Desktop/anaconda3/envs/PDAL/bin/pcl_voxel_grid
filters.voxelgrid.leaf_x=0.1 —filters.voxelgrid.leaf_y=0.1
--filters.voxelgrid.leaf_z=0.1

PDAL: Couldn't create filter stage of type
'filters../Desktop/anaconda3/envs/PDAL/bin/pcl_voxel_grid'.
You probably have a version of PDAL that didn't come with a plugin
you're trying to load.  Please see the FAQ at https://pdal.io/faq


I have also tried: 

PDAL translate ./Desktop/anaconda3/envs/PDAL/lib/N18_merged.laz
./Desktop/anaconda3/envs/PDAL/N18mergedvgrid.laz volexgrid /
filters.voxelgrid.leaf_x=0.1 —filters.voxelgrid.leaf_y=0.1
--filters.voxelgrid.leaf_z=0.1

PDAL: Couldn't create filter stage of type 'filters.volexgrid'.
You probably have a version of PDAL that didn't come with a plugin
you're trying to load.  Please see the FAQ at https://pdal.io/faq

Here's my file location: 

/Users/alisoncramer/Desktop/anaconda3/envs/PDAL/bin/pcl_voxel_grid

Thanks in advance if you can help me fix this problem!  



--
Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html

From brad.chambers at gmail.com  Mon Nov  2 10:31:02 2020
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Mon, 2 Nov 2020 12:31:02 -0600
Subject: [pdal] PCL
In-Reply-To: <1604341337779-0.post@n6.nabble.com>
References: <1604341337779-0.post@n6.nabble.com>
Message-ID: <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>

Alison,

Sorry to hear you are having trouble. PDAL hasn't built the PCL VoxelGrid
filter for some time now. It would be helpful to know which version of PDAL
you are using and also how it is you have built the VoxelGrid filter (e.g.,
did you download from https://github.com/PDAL/unsuppported-plugins?).

You'll notice that the referenced repository is marked as unsupported, and
none of the filters are guaranteed to work with PDAL's most recent
releases. PDAL has added quite a few VoxelGrid alternatives, which you'll
find in the documentation. Hopefully one of these suits your needs.

Brad

On Mon, Nov 2, 2020 at 12:22 PM alison.cramer3 <alisoncramer at nevada.unr.edu>
wrote:

> Hi all.  So I am having trouble getting PDAL to find my PCL plugin.  The
> filters are listed and showing in the bin folder in my PDAL environment.  I
> have tried to set driver path to the bin folder, but PDAL drivers still
> does
> not show the pcl voxelgrid, which is what I am looking to use.  I don't
> understand why this is so hard?!
>
> Here's my code:
>
> PDAL translate ./Desktop/anaconda3/envs/PDAL/lib/N18_merged.laz
> ./Desktop/anaconda3/envs/PDAL/N18mergedvgrid.laz
> ./Desktop/anaconda3/envs/PDAL/bin/pcl_voxel_grid
> filters.voxelgrid.leaf_x=0.1 —filters.voxelgrid.leaf_y=0.1
> --filters.voxelgrid.leaf_z=0.1
>
> PDAL: Couldn't create filter stage of type
> 'filters../Desktop/anaconda3/envs/PDAL/bin/pcl_voxel_grid'.
> You probably have a version of PDAL that didn't come with a plugin
> you're trying to load.  Please see the FAQ at https://pdal.io/faq
>
>
> I have also tried:
>
> PDAL translate ./Desktop/anaconda3/envs/PDAL/lib/N18_merged.laz
> ./Desktop/anaconda3/envs/PDAL/N18mergedvgrid.laz volexgrid /
> filters.voxelgrid.leaf_x=0.1 —filters.voxelgrid.leaf_y=0.1
> --filters.voxelgrid.leaf_z=0.1
>
> PDAL: Couldn't create filter stage of type 'filters.volexgrid'.
> You probably have a version of PDAL that didn't come with a plugin
> you're trying to load.  Please see the FAQ at https://pdal.io/faq
>
> Here's my file location:
>
> /Users/alisoncramer/Desktop/anaconda3/envs/PDAL/bin/pcl_voxel_grid
>
> Thanks in advance if you can help me fix this problem!
>
>
>
> --
> Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201102/c25615bf/attachment.html>

From alisoncramer at nevada.unr.edu  Mon Nov  2 11:26:07 2020
From: alisoncramer at nevada.unr.edu (alison.cramer3)
Date: Mon, 2 Nov 2020 12:26:07 -0700 (MST)
Subject: [pdal] PCL
In-Reply-To: <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>
References: <1604341337779-0.post@n6.nabble.com>
 <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>
Message-ID: <1604345167654-0.post@n6.nabble.com>

Hi Brad,

I have version 2.1.0.  I didn't install the plugin, I just forged pcl into
my pdal environment.  I thought that if I did that, then pdal would be
linked to pcl and I could run the filter based on this example.

https://pdal.io/tutorial/sampling/index.html

Is this not correct?

Alison




--
Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html

From brad.chambers at gmail.com  Mon Nov  2 11:38:50 2020
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Mon, 2 Nov 2020 13:38:50 -0600
Subject: [pdal] PCL
In-Reply-To: <1604345167654-0.post@n6.nabble.com>
References: <1604341337779-0.post@n6.nabble.com>
 <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>
 <1604345167654-0.post@n6.nabble.com>
Message-ID: <CAJyqqPzexPbJnr7x8Mxfh9==AcPewO_5+MszgLEs4u9+74h2Vg@mail.gmail.com>

No, this is not correct. Older versions of PDAL could be built in such a
way that you could use some PCL features like VoxelGrid. PCL itself was
never PDAL-aware, and no such magic exists. If you really need this
feature, there are some painful ways you could rebuild an older release of
PDAL or find an old installer that supported it. Otherwise, I'd look to use
one of the filters that comes installed with PDAL 2.1.0.

On Mon, Nov 2, 2020 at 1:26 PM alison.cramer3 <alisoncramer at nevada.unr.edu>
wrote:

> Hi Brad,
>
> I have version 2.1.0.  I didn't install the plugin, I just forged pcl into
> my pdal environment.  I thought that if I did that, then pdal would be
> linked to pcl and I could run the filter based on this example.
>
> https://pdal.io/tutorial/sampling/index.html
>
> Is this not correct?
>
> Alison
>
>
>
>
> --
> Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201102/07ad4dc6/attachment.html>

From alisoncramer at nevada.unr.edu  Mon Nov  2 12:02:25 2020
From: alisoncramer at nevada.unr.edu (alison.cramer3)
Date: Mon, 2 Nov 2020 13:02:25 -0700 (MST)
Subject: [pdal] PCL
In-Reply-To: <CAJyqqPzexPbJnr7x8Mxfh9==AcPewO_5+MszgLEs4u9+74h2Vg@mail.gmail.com>
References: <1604341337779-0.post@n6.nabble.com>
 <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>
 <1604345167654-0.post@n6.nabble.com>
 <CAJyqqPzexPbJnr7x8Mxfh9==AcPewO_5+MszgLEs4u9+74h2Vg@mail.gmail.com>
Message-ID: <1604347345098-0.post@n6.nabble.com>

Okay well that is good to know.  Is there an option in the PDAL voxeldownsize
to choose average?  Kind of like creating a raster, but gridding my point
cloud to take to average height value?  similar to the raster function in
cloudcompare, but I don't want a raster, I want a gridded point cloud.  I
used filters.sample, but this is random sampling, is it not?



--
Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html

From brad.chambers at gmail.com  Mon Nov  2 12:15:28 2020
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Mon, 2 Nov 2020 14:15:28 -0600
Subject: [pdal] PCL
In-Reply-To: <1604347345098-0.post@n6.nabble.com>
References: <1604341337779-0.post@n6.nabble.com>
 <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>
 <1604345167654-0.post@n6.nabble.com>
 <CAJyqqPzexPbJnr7x8Mxfh9==AcPewO_5+MszgLEs4u9+74h2Vg@mail.gmail.com>
 <1604347345098-0.post@n6.nabble.com>
Message-ID: <CAJyqqPwWU+Yyi4-=392Tv9KjGYMVcar8U_HkumhKgmW0n6W90w@mail.gmail.com>

VoxelDownsize will return either the center coordinate of each occupied
voxel or the actual coordinate of the first detected point to occupy a
voxel.

The Sample filter downsamples points, such that no two points can be closer
than a given radius. It does not grid or compute any statistics.

VoxelCentroidNearestNeighbor returns the point that is nearest the centroid
of all points within a given voxel. (VoxelCenterNearestNeighbor does the
same, but for the point closest to the voxel center.)

We do not have a filter that grids the data and computes summary
statistics. We do have some that do similar things as intermediate steps.
It would be pretty trivial to develop though.

In the meantime, maybe you would have luck writing with the GDAL writer,
saving just the mean elevation band, and then reading that raster with the
GDAL reader to interpret it as a point cloud? The only caveat I can think
of here is that the mean elevation computation will consider points that
extend beyond the current raster cell (root 2 times the cell size by
default).

On Mon, Nov 2, 2020 at 2:02 PM alison.cramer3 <alisoncramer at nevada.unr.edu>
wrote:

> Okay well that is good to know.  Is there an option in the PDAL
> voxeldownsize
> to choose average?  Kind of like creating a raster, but gridding my point
> cloud to take to average height value?  similar to the raster function in
> cloudcompare, but I don't want a raster, I want a gridded point cloud.  I
> used filters.sample, but this is random sampling, is it not?
>
>
>
> --
> Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201102/fa3b2601/attachment.html>

From andrew.bell.ia at gmail.com  Mon Nov  2 12:23:10 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 2 Nov 2020 15:23:10 -0500
Subject: [pdal] PCL
In-Reply-To: <1604347345098-0.post@n6.nabble.com>
References: <1604341337779-0.post@n6.nabble.com>
 <CAJyqqPyEieb_9680HGEfcK6_kCimxWSfk0Y7RTdz_J79KRWU0A@mail.gmail.com>
 <1604345167654-0.post@n6.nabble.com>
 <CAJyqqPzexPbJnr7x8Mxfh9==AcPewO_5+MszgLEs4u9+74h2Vg@mail.gmail.com>
 <1604347345098-0.post@n6.nabble.com>
Message-ID: <CACJ51z0K3JWQnOXxto5WCrqjquq-eKLWiWdnB=95zCPGJOWFZA@mail.gmail.com>

On Mon, Nov 2, 2020 at 3:02 PM alison.cramer3 <alisoncramer at nevada.unr.edu>
wrote:

> Okay well that is good to know.  Is there an option in the PDAL
> voxeldownsize
> to choose average?  Kind of like creating a raster, but gridding my point
> cloud to take to average height value?


You want ALL points in a voxel to have the same Z value, but retain their
original X/Y values?

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201102/d97fdbca/attachment.html>

From csl170000 at utdallas.edu  Sun Nov  8 09:41:12 2020
From: csl170000 at utdallas.edu (chris.lee)
Date: Sun, 8 Nov 2020 10:41:12 -0700 (MST)
Subject: [pdal] LAS Class Flags
Message-ID: <1604857272638-0.post@n6.nabble.com>

Hi,

I'm looking to filter out all points marked in my las files as Synthetic, is
there a way to do that using PDAL or python-pdal? Looking through the code I
can't find the class flag being saved anywhere.

Thanks!
Chris Lee



--
Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html

From andrew.bell.ia at gmail.com  Sun Nov  8 11:40:10 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Sun, 8 Nov 2020 14:40:10 -0500
Subject: [pdal] LAS Class Flags
In-Reply-To: <1604857272638-0.post@n6.nabble.com>
References: <1604857272638-0.post@n6.nabble.com>
Message-ID: <CACJ51z27HGE+YODJj7mgQDarKDkba3j3oaVYen-qra0RLE-aTA@mail.gmail.com>

What version is your LAS file?

On Sun, Nov 8, 2020, 12:41 PM chris.lee <csl170000 at utdallas.edu> wrote:

> Hi,
>
> I'm looking to filter out all points marked in my las files as Synthetic,
> is
> there a way to do that using PDAL or python-pdal? Looking through the code
> I
> can't find the class flag being saved anywhere.
>
> Thanks!
> Chris Lee
>
>
>
> --
> Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201108/46bd759b/attachment.html>

From csl170000 at utdallas.edu  Sun Nov  8 12:20:02 2020
From: csl170000 at utdallas.edu (chris.lee)
Date: Sun, 8 Nov 2020 13:20:02 -0700 (MST)
Subject: [pdal] LAS Class Flags
In-Reply-To: <CACJ51z27HGE+YODJj7mgQDarKDkba3j3oaVYen-qra0RLE-aTA@mail.gmail.com>
References: <1604857272638-0.post@n6.nabble.com>
 <CACJ51z27HGE+YODJj7mgQDarKDkba3j3oaVYen-qra0RLE-aTA@mail.gmail.com>
Message-ID: <1604866802241-0.post@n6.nabble.com>

Most are version 1.2. 



--
Sent from: http://osgeo-org.1560.x6.nabble.com/PDAL-f4600080.html

From andrew.bell.ia at gmail.com  Sun Nov  8 14:48:40 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Sun, 8 Nov 2020 17:48:40 -0500
Subject: [pdal] LAS Class Flags
In-Reply-To: <1604857272638-0.post@n6.nabble.com>
References: <1604857272638-0.post@n6.nabble.com>
Message-ID: <CACJ51z1pm_iEDPRO+QA9H2bA7+ci0wYi-zBHdVSCiAS8vDyYkw@mail.gmail.com>

On Sun, Nov 8, 2020 at 12:41 PM chris.lee <csl170000 at utdallas.edu> wrote:

> Hi,
>
> I'm looking to filter out all points marked in my las files as Synthetic,
> is
> there a way to do that using PDAL or python-pdal? Looking through the code
> I
> can't find the class flag being saved anywhere.
>

There isn't any way to do this directly, but you might be able to make it
work if you don't use/care about the "keypoint" and "withheld" flags. Since
the bit value of "synthetic"bit  is 32, you can exclude values greater than
or equal to 32 and eliminate synthetic points, but you'll also lose any
points marked "keypoint" or "withheld".

{
  "type": "filters.range",
  "limits": "Classification[:31]"
}

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201108/16b7d4a9/attachment.html>

From Peder.Axensten at slu.se  Tue Nov 10 02:50:15 2020
From: Peder.Axensten at slu.se (Peder Axensten)
Date: Tue, 10 Nov 2020 10:50:15 +0000
Subject: [pdal] Correct destination file guarantee?
Message-ID: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>

Hi!

If pdal is interrupted while saving to the destination file, it might result in a corrupt file. This is not unreasonable, but could be avoided.

We use a make script to process large amounts of files and sometimes we have to interrupt processing for different reasons. We then risk to have corrupt files that make will consider final when rerunning the script, so the files are left in a corrupt state.

Would it be a good idea to make pdal by default save the contents to a temporary file and then move the temporary file to the destination file? This way either a correct file is produced or nothing. I'm implementing this in the make script – it is somewhat cumbersome but will work ok, I guess.

Isn’t it a very attractive and useful guarantee: if the destination file is produced, then it is correct?

Best regards,

Peder Axensten
Research engineer

Remote Sensing
Department of Forest Resource Management
Swedish University of Agricultural Sciences
SE-901 83 Umeå
Visiting address: Skogsmarksgränd
Phone: +46 90 786 85 00
peder.axensten at slu.se, www.slu.se/srh

The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.

---
När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>

From andrew.bell.ia at gmail.com  Tue Nov 10 04:22:24 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 10 Nov 2020 07:22:24 -0500
Subject: [pdal] Correct destination file guarantee?
In-Reply-To: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
References: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
Message-ID: <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>

My take on this is that it's expensive to write to a temporary file and
then copy it. Some output files very are large. Since you, the user, are
the one interrupting the process, it seems that it's up to you to clean up.
This behavior is also consistent with most other programs.

On Tue, Nov 10, 2020 at 5:50 AM Peder Axensten <Peder.Axensten at slu.se>
wrote:

> Hi!
>
> If pdal is interrupted while saving to the destination file, it might
> result in a corrupt file. This is not unreasonable, but could be avoided.
>
> We use a make script to process large amounts of files and sometimes we
> have to interrupt processing for different reasons. We then risk to have
> corrupt files that make will consider final when rerunning the script, so
> the files are left in a corrupt state.
>
> Would it be a good idea to make pdal by default save the contents to a
> temporary file and then move the temporary file to the destination file?
> This way either a correct file is produced or nothing. I'm implementing
> this in the make script – it is somewhat cumbersome but will work ok, I
> guess.
>
> Isn’t it a very attractive and useful guarantee: if the destination file
> is produced, then it is correct?
>
> Best regards,
>
> Peder Axensten
> Research engineer
>
> Remote Sensing
> Department of Forest Resource Management
> Swedish University of Agricultural Sciences
> SE-901 83 Umeå
> Visiting address: Skogsmarksgränd
> Phone: +46 90 786 85 00
> peder.axensten at slu.se, www.slu.se/srh
>
> The Department of Forest Resource Management is environmentally certified
> in accordance with ISO 14001.
>
> ---
> När du skickar e-post till SLU så innebär detta att SLU behandlar dina
> personuppgifter. För att läsa mer om hur detta går till, klicka här <
> https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
> E-mailing SLU will result in SLU processing your personal data. For more
> information on how this is done, click here <
> https://www.slu.se/en/about-slu/contact-slu/personal-data/>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201110/2fad0b09/attachment.html>

From kirk.waters at noaa.gov  Tue Nov 10 04:32:11 2020
From: kirk.waters at noaa.gov (Kirk Waters - NOAA Federal)
Date: Tue, 10 Nov 2020 07:32:11 -0500
Subject: [pdal] Correct destination file guarantee?
In-Reply-To: <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
References: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
 <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
Message-ID: <CADm=QrQGm9y_YAZyASvyjfsQdOnBP855c111FLFQbEw8R9oRhg@mail.gmail.com>

This may be too much on the Unix side of thought, but could pdal catch a
signal and clean up the output file. That puts it on the user to interrupt
using the right signal to the process and wouldn't require a copy.

Kirk Waters, PhD, BJCP          | NOAA Office for Coastal Management
Applied Sciences Program      | 2234 South Hobson Ave
843-740-1227 (empty office)   | Charleston, SC 29405
843-324-2203 (cell during COVID)
coast.noaa.gov/digitalcoast



On Tue, Nov 10, 2020 at 7:22 AM Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

>
> My take on this is that it's expensive to write to a temporary file and
> then copy it. Some output files very are large. Since you, the user, are
> the one interrupting the process, it seems that it's up to you to clean up.
> This behavior is also consistent with most other programs.
>
> On Tue, Nov 10, 2020 at 5:50 AM Peder Axensten <Peder.Axensten at slu.se>
> wrote:
>
>> Hi!
>>
>> If pdal is interrupted while saving to the destination file, it might
>> result in a corrupt file. This is not unreasonable, but could be avoided.
>>
>> We use a make script to process large amounts of files and sometimes we
>> have to interrupt processing for different reasons. We then risk to have
>> corrupt files that make will consider final when rerunning the script, so
>> the files are left in a corrupt state.
>>
>> Would it be a good idea to make pdal by default save the contents to a
>> temporary file and then move the temporary file to the destination file?
>> This way either a correct file is produced or nothing. I'm implementing
>> this in the make script – it is somewhat cumbersome but will work ok, I
>> guess.
>>
>> Isn’t it a very attractive and useful guarantee: if the destination file
>> is produced, then it is correct?
>>
>> Best regards,
>>
>> Peder Axensten
>> Research engineer
>>
>> Remote Sensing
>> Department of Forest Resource Management
>> Swedish University of Agricultural Sciences
>> SE-901 83 Umeå
>> Visiting address: Skogsmarksgränd
>> Phone: +46 90 786 85 00
>> peder.axensten at slu.se, www.slu.se/srh
>>
>> The Department of Forest Resource Management is environmentally certified
>> in accordance with ISO 14001.
>>
>> ---
>> När du skickar e-post till SLU så innebär detta att SLU behandlar dina
>> personuppgifter. För att läsa mer om hur detta går till, klicka här <
>> https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
>> E-mailing SLU will result in SLU processing your personal data. For more
>> information on how this is done, click here <
>> https://www.slu.se/en/about-slu/contact-slu/personal-data/>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201110/f1351a61/attachment.html>

From Peder.Axensten at slu.se  Tue Nov 10 05:16:10 2020
From: Peder.Axensten at slu.se (Peder Axensten)
Date: Tue, 10 Nov 2020 13:16:10 +0000
Subject: [pdal] Correct destination file guarantee?
In-Reply-To: <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
References: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
 <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
Message-ID: <C9ECCD20-3667-4B54-93B3-89670A7F8987@slu.se>

I absolutely agree that a copy is to costly. The temporary file must be on the same device as the destination, so that it may be moved. The easiest way to do that is to add a randomised suffix to the destination path that is removed when all is done. If the process crashes the temporary file remains, but has a suffix that clearly indicates it as temporary. If the process is interrupted, temporary files are removed. A more elegant solution would be to use a system-supplied temporary directory on the specified device, but I have not found any system support for this.

I implemented a C++ class that I use in my own tools whenever I save stuff to a file. The destructor removes the temporary file, if there is one.
Very schematic (there might be typos):

class Temppath {
public:

// Save the final path and create and save a path with a randomised suffix.
Temppath( path final );

Temppath() = delete;
Temppath( const Temppath & ) = delete;
Temppath( Temppath && ) = default;
Temppath & operator=( const Temppath & )  = delete;
Temppath & operator=( Temppath && ) = default;

// Return the temporary file name.
path temporary() const noexcept;

// Return the final file name.
path final() const noexcept;

// Move the file temporary() to final(), if there is a temporary() file..
void done() const noexcept {
// Will not throw as it uses std::error_code.
std::error_code ec;
std::filesystem::rename( temporary(), final(), ec );
}

~ Temppath() {
// Will not throw as it uses std::error_code.
std::error_code ec;
std::filesystem::remove( temporary(), ec );
}

};

This way temporary files are removed if the process is interrupted (but not if it crashes).
Use it like this.

const Temppath file{ final_path };
{
auto fptr = std::open( file.temporary(), … );
// Do the stuff.
}
file.done();

Best regards,

Peder Axensten
Research engineer

Remote Sensing
Department of Forest Resource Management
Swedish University of Agricultural Sciences
SE-901 83 Umeå
Visiting address: Skogsmarksgränd
Phone: +46 90 786 85 00
peder.axensten at slu.se, www.slu.se/srh

The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.

> On 10 Nov 2020, at 13:22, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
>
>
> My take on this is that it's expensive to write to a temporary file and then copy it. Some output files very are large. Since you, the user, are the one interrupting the process, it seems that it's up to you to clean up. This behavior is also consistent with most other programs.
>
> On Tue, Nov 10, 2020 at 5:50 AM Peder Axensten <Peder.Axensten at slu.se> wrote:
> Hi!
>
> If pdal is interrupted while saving to the destination file, it might result in a corrupt file. This is not unreasonable, but could be avoided.
>
> We use a make script to process large amounts of files and sometimes we have to interrupt processing for different reasons. We then risk to have corrupt files that make will consider final when rerunning the script, so the files are left in a corrupt state.
>
> Would it be a good idea to make pdal by default save the contents to a temporary file and then move the temporary file to the destination file? This way either a correct file is produced or nothing. I'm implementing this in the make script – it is somewhat cumbersome but will work ok, I guess.
>
> Isn’t it a very attractive and useful guarantee: if the destination file is produced, then it is correct?
>
> Best regards,
>
> Peder Axensten
> Research engineer
>
> Remote Sensing
> Department of Forest Resource Management
> Swedish University of Agricultural Sciences
> SE-901 83 Umeå
> Visiting address: Skogsmarksgränd
> Phone: +46 90 786 85 00
> peder.axensten at slu.se, www.slu.se/srh
>
> The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.
>
> ---
> När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
> E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com

---
När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>

From charles at karney.com  Tue Nov 10 05:53:42 2020
From: charles at karney.com (Charles Karney)
Date: Tue, 10 Nov 2020 13:53:42 +0000
Subject: [pdal] Correct destination file guarantee?
In-Reply-To: <C9ECCD20-3667-4B54-93B3-89670A7F8987@slu.se>
References: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
 <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
 <C9ECCD20-3667-4B54-93B3-89670A7F8987@slu.se>
Message-ID: <BL0PR1701MB25625E07B221C43A78F92EC3A9E90@BL0PR1701MB2562.namprd17.prod.outlook.com>

Back in the day (maybe with the old MIT ITS operating system), "file close + rename" was some sort of system call.  But it doesn't look like C++ supports this in any systematic way.  So in the meantime, I think the most elegant solution is Andrew's.  You, the end user, specify a temporary file name in the same directory as your desired output file.  On successful completion of pdal, you rename the file.  (This avoids then the problem of a disk-full failure and a truncated file if you *copy* the temporary file from a temporary directory.)

  --Charles

﻿On 11/10/20, 8:17 AM, "pdal on behalf of Peder Axensten" <pdal-bounces at lists.osgeo.org on behalf of Peder.Axensten at slu.se> wrote:

    I absolutely agree that a copy is to costly. The temporary file must be on the same device as the destination, so that it may be moved. The easiest way to do that is to add a randomised suffix to the destination path that is removed when all is done. If the process crashes the temporary file remains, but has a suffix that clearly indicates it as temporary. If the process is interrupted, temporary files are removed. A more elegant solution would be to use a system-supplied temporary directory on the specified device, but I have not found any system support for this.

    I implemented a C++ class that I use in my own tools whenever I save stuff to a file. The destructor removes the temporary file, if there is one.
    Very schematic (there might be typos):

    class Temppath {
    public:

    // Save the final path and create and save a path with a randomised suffix.
    Temppath( path final );

    Temppath() = delete;
    Temppath( const Temppath & ) = delete;
    Temppath( Temppath && ) = default;
    Temppath & operator=( const Temppath & )  = delete;
    Temppath & operator=( Temppath && ) = default;

    // Return the temporary file name.
    path temporary() const noexcept;

    // Return the final file name.
    path final() const noexcept;

    // Move the file temporary() to final(), if there is a temporary() file..
    void done() const noexcept {
    // Will not throw as it uses std::error_code.
    std::error_code ec;
    std::filesystem::rename( temporary(), final(), ec );
    }

    ~ Temppath() {
    // Will not throw as it uses std::error_code.
    std::error_code ec;
    std::filesystem::remove( temporary(), ec );
    }

    };

    This way temporary files are removed if the process is interrupted (but not if it crashes).
    Use it like this.

    const Temppath file{ final_path };
    {
    auto fptr = std::open( file.temporary(), … );
    // Do the stuff.
    }
    file.done();

    Best regards,

    Peder Axensten
    Research engineer

    Remote Sensing
    Department of Forest Resource Management
    Swedish University of Agricultural Sciences
    SE-901 83 Umeå
    Visiting address: Skogsmarksgränd
    Phone: +46 90 786 85 00
    peder.axensten at slu.se, www.slu.se/srh

    The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.

    > On 10 Nov 2020, at 13:22, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
    >
    >
    > My take on this is that it's expensive to write to a temporary file and then copy it. Some output files very are large. Since you, the user, are the one interrupting the process, it seems that it's up to you to clean up. This behavior is also consistent with most other programs.
    >
    > On Tue, Nov 10, 2020 at 5:50 AM Peder Axensten <Peder.Axensten at slu.se> wrote:
    > Hi!
    >
    > If pdal is interrupted while saving to the destination file, it might result in a corrupt file. This is not unreasonable, but could be avoided.
    >
    > We use a make script to process large amounts of files and sometimes we have to interrupt processing for different reasons. We then risk to have corrupt files that make will consider final when rerunning the script, so the files are left in a corrupt state.
    >
    > Would it be a good idea to make pdal by default save the contents to a temporary file and then move the temporary file to the destination file? This way either a correct file is produced or nothing. I'm implementing this in the make script – it is somewhat cumbersome but will work ok, I guess.
    >
    > Isn’t it a very attractive and useful guarantee: if the destination file is produced, then it is correct?
    >
    > Best regards,
    >
    > Peder Axensten
    > Research engineer
    >
    > Remote Sensing
    > Department of Forest Resource Management
    > Swedish University of Agricultural Sciences
    > SE-901 83 Umeå
    > Visiting address: Skogsmarksgränd
    > Phone: +46 90 786 85 00
    > peder.axensten at slu.se, www.slu.se/srh
    >
    > The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.
    >
    > ---
    > När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
    > E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>
    > _______________________________________________
    > pdal mailing list
    > pdal at lists.osgeo.org
    > https://lists.osgeo.org/mailman/listinfo/pdal
    >
    >
    > --
    > Andrew Bell
    > andrew.bell.ia at gmail.com

    ---
    När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
    E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>
    _______________________________________________
    pdal mailing list
    pdal at lists.osgeo.org
    https://lists.osgeo.org/mailman/listinfo/pdal

From Peder.Axensten at slu.se  Tue Nov 10 06:25:08 2020
From: Peder.Axensten at slu.se (Peder Axensten)
Date: Tue, 10 Nov 2020 14:25:08 +0000
Subject: [pdal] Correct destination file guarantee?
In-Reply-To: <BL0PR1701MB25625E07B221C43A78F92EC3A9E90@BL0PR1701MB2562.namprd17.prod.outlook.com>
References: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
 <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
 <C9ECCD20-3667-4B54-93B3-89670A7F8987@slu.se>
 <BL0PR1701MB25625E07B221C43A78F92EC3A9E90@BL0PR1701MB2562.namprd17.prod.outlook.com>
Message-ID: <6AAA6D65-F515-4D3C-B78B-F5A7E08E06A6@slu.se>

That is in principle what the Temppath class does. :-)

I use a specified [temporary] directory on the same drive and then move the file. It is a bit more cumbersome, but I can’t use the destination directory. If I do, pdal does not know what writer to use if I use a strange suffix. If I use a known suffix, e.g. .laz, then my script will try and process temporary/corrupt files further. So I use a specific temporary directory.

In processing large amount of files, there are many advantages if the used tools have the correctness guarantee. That is the motive for my suggestion.

Best regards,

Peder Axensten
Research engineer

Remote Sensing
Department of Forest Resource Management
Swedish University of Agricultural Sciences
SE-901 83 Umeå
Visiting address: Skogsmarksgränd
Phone: +46 90 786 85 00
peder.axensten at slu.se, www.slu.se/srh

The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.

> On 10 Nov 2020, at 14:53, Charles Karney <charles at karney.com> wrote:
>
> Back in the day (maybe with the old MIT ITS operating system), "file close + rename" was some sort of system call.  But it doesn't look like C++ supports this in any systematic way.  So in the meantime, I think the most elegant solution is Andrew's.  You, the end user, specify a temporary file name in the same directory as your desired output file.  On successful completion of pdal, you rename the file.  (This avoids then the problem of a disk-full failure and a truncated file if you *copy* the temporary file from a temporary directory.)
>
>  --Charles
>
> ﻿On 11/10/20, 8:17 AM, "pdal on behalf of Peder Axensten" <pdal-bounces at lists.osgeo.org on behalf of Peder.Axensten at slu.se> wrote:
>
>    I absolutely agree that a copy is to costly. The temporary file must be on the same device as the destination, so that it may be moved. The easiest way to do that is to add a randomised suffix to the destination path that is removed when all is done. If the process crashes the temporary file remains, but has a suffix that clearly indicates it as temporary. If the process is interrupted, temporary files are removed. A more elegant solution would be to use a system-supplied temporary directory on the specified device, but I have not found any system support for this.
>
>    I implemented a C++ class that I use in my own tools whenever I save stuff to a file. The destructor removes the temporary file, if there is one.
>    Very schematic (there might be typos):
>
>    class Temppath {
>    public:
>
>    // Save the final path and create and save a path with a randomised suffix.
>    Temppath( path final );
>
>    Temppath() = delete;
>    Temppath( const Temppath & ) = delete;
>    Temppath( Temppath && ) = default;
>    Temppath & operator=( const Temppath & )  = delete;
>    Temppath & operator=( Temppath && ) = default;
>
>    // Return the temporary file name.
>    path temporary() const noexcept;
>
>    // Return the final file name.
>    path final() const noexcept;
>
>    // Move the file temporary() to final(), if there is a temporary() file..
>    void done() const noexcept {
>    // Will not throw as it uses std::error_code.
>    std::error_code ec;
>    std::filesystem::rename( temporary(), final(), ec );
>    }
>
>    ~ Temppath() {
>    // Will not throw as it uses std::error_code.
>    std::error_code ec;
>    std::filesystem::remove( temporary(), ec );
>    }
>
>    };
>
>    This way temporary files are removed if the process is interrupted (but not if it crashes).
>    Use it like this.
>
>    const Temppath file{ final_path };
>    {
>    auto fptr = std::open( file.temporary(), … );
>    // Do the stuff.
>    }
>    file.done();
>
>    Best regards,
>
>    Peder Axensten
>    Research engineer
>
>    Remote Sensing
>    Department of Forest Resource Management
>    Swedish University of Agricultural Sciences
>    SE-901 83 Umeå
>    Visiting address: Skogsmarksgränd
>    Phone: +46 90 786 85 00
>    peder.axensten at slu.se, www.slu.se/srh
>
>    The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.
>
>> On 10 Nov 2020, at 13:22, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
>>
>>
>> My take on this is that it's expensive to write to a temporary file and then copy it. Some output files very are large. Since you, the user, are the one interrupting the process, it seems that it's up to you to clean up. This behavior is also consistent with most other programs.
>>
>> On Tue, Nov 10, 2020 at 5:50 AM Peder Axensten <Peder.Axensten at slu.se> wrote:
>> Hi!
>>
>> If pdal is interrupted while saving to the destination file, it might result in a corrupt file. This is not unreasonable, but could be avoided.
>>
>> We use a make script to process large amounts of files and sometimes we have to interrupt processing for different reasons. We then risk to have corrupt files that make will consider final when rerunning the script, so the files are left in a corrupt state.
>>
>> Would it be a good idea to make pdal by default save the contents to a temporary file and then move the temporary file to the destination file? This way either a correct file is produced or nothing. I'm implementing this in the make script – it is somewhat cumbersome but will work ok, I guess.
>>
>> Isn’t it a very attractive and useful guarantee: if the destination file is produced, then it is correct?
>>
>> Best regards,
>>
>> Peder Axensten
>> Research engineer
>>
>> Remote Sensing
>> Department of Forest Resource Management
>> Swedish University of Agricultural Sciences
>> SE-901 83 Umeå
>> Visiting address: Skogsmarksgränd
>> Phone: +46 90 786 85 00
>> peder.axensten at slu.se, www.slu.se/srh
>>
>> The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.
>>
>> ---
>> När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
>> E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>
>    ---
>    När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
>    E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>
>    _______________________________________________
>    pdal mailing list
>    pdal at lists.osgeo.org
>    https://lists.osgeo.org/mailman/listinfo/pdal

---
När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>

From klassen.js at gmail.com  Tue Nov 10 12:29:39 2020
From: klassen.js at gmail.com (Jim Klassen)
Date: Tue, 10 Nov 2020 14:29:39 -0600
Subject: [pdal] Correct destination file guarantee?
In-Reply-To: <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
References: <6C9A8461-373F-4764-B514-7875B8E9A2D6@slu.se>
 <CACJ51z3dZC4X7BXcArdtxa716zgjbf8Esj=wkh9qyoaqubL1rQ@mail.gmail.com>
Message-ID: <a2f5a167-1229-d7db-bbfc-881dd75c74c3@gmail.com>

I use the following general structure in many of my scripts:

#!/bin/bash
set -euo pipefail  # exit the script if a command doesn't return success
pdal .... --writers.las.filename=$out.tmp.laz
mv $out.tmp.laz $out.laz


This has an advantage that I can place the temporary file either next to where the final result should be, or I can put it in a faster scratch space (usually a local SSD or ramdisk instead of network storage) which can help because it is usually most efficient to write to the network in large contiguous blocks instead of piecemeal.  Which way is optimal depends on the system and processing task at hand.  To me this is much less surprising behavior than pdal writing to some other file behind my back.


Alternatively, I have also used GNU make to drive the processing as it can automatically remove the output file if the command that was supposed to generate it fails.  For this to work the output file has to be called for by a make rule and having set ".DELETE_ON_ERROR".

On 11/10/20 6:22 AM, Andrew Bell wrote:
>
> My take on this is that it's expensive to write to a temporary file and then copy it. Some output files very are large. Since you, the user, are the one interrupting the process, it seems that it's up to you to clean up. This behavior is also consistent with most other programs.
>
> On Tue, Nov 10, 2020 at 5:50 AM Peder Axensten <Peder.Axensten at slu.se <mailto:Peder.Axensten at slu.se>> wrote:
>
>     Hi!
>
>     If pdal is interrupted while saving to the destination file, it might result in a corrupt file. This is not unreasonable, but could be avoided.
>
>     We use a make script to process large amounts of files and sometimes we have to interrupt processing for different reasons. We then risk to have corrupt files that make will consider final when rerunning the script, so the files are left in a corrupt state.
>
>     Would it be a good idea to make pdal by default save the contents to a temporary file and then move the temporary file to the destination file? This way either a correct file is produced or nothing. I'm implementing this in the make script – it is somewhat cumbersome but will work ok, I guess.
>
>     Isn’t it a very attractive and useful guarantee: if the destination file is produced, then it is correct?
>
>     Best regards,
>
>     Peder Axensten
>     Research engineer
>
>     Remote Sensing
>     Department of Forest Resource Management
>     Swedish University of Agricultural Sciences
>     SE-901 83 Umeå
>     Visiting address: Skogsmarksgränd
>     Phone: +46 90 786 85 00
>     peder.axensten at slu.se <mailto:peder.axensten at slu.se>, www.slu.se/srh <http://www.slu.se/srh>
>
>     The Department of Forest Resource Management is environmentally certified in accordance with ISO 14001.
>
>     ---
>     När du skickar e-post till SLU så innebär detta att SLU behandlar dina personuppgifter. För att läsa mer om hur detta går till, klicka här <https://www.slu.se/om-slu/kontakta-slu/personuppgifter/>
>     E-mailing SLU will result in SLU processing your personal data. For more information on how this is done, click here <https://www.slu.se/en/about-slu/contact-slu/personal-data/>
>     _______________________________________________
>     pdal mailing list
>     pdal at lists.osgeo.org <mailto:pdal at lists.osgeo.org>
>     https://lists.osgeo.org/mailman/listinfo/pdal
>
>
>
> -- 
> Andrew Bell
> andrew.bell.ia at gmail.com <mailto:andrew.bell.ia at gmail.com>
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201110/73baf29a/attachment.html>

From iamriskyrob at gmail.com  Fri Nov 20 07:26:47 2020
From: iamriskyrob at gmail.com (Robert Plant)
Date: Fri, 20 Nov 2020 15:26:47 +0000
Subject: [pdal] Filters.Crop "where" parameter issue
Message-ID: <CAPL3KvzFCUQRb=L7ugAKD8knHQVssRivu0sC=-VPsjtbt-g-=g@mail.gmail.com>

Hi Guys,

I wasn't sure if this was a bug or me just using the where parameter in
Filters.Crop incorrectly so I thought this might be the best place to post
my problem.

I am using PDAL version 2.1.0 taken from Conda

I'm trying to use Filters.Crop to crop an extruded polygon in 3D space, I
thought I could use the polygon parameter to define a 2D polygon in XY
space and use the where parameter to ignore points that are outside my
defined Z values.

My problem is that I get this error message: PDAL: filters.crop: Unexpected
argument 'where'.

I am using a pipeline which I'll paste below, any thoughts on what is going
wrong?

Kind Regards,
Rob

{
  "pipeline": [
    {
      "filename": "C:/Users/robert.plant/Documents/Testing/Scan5.csv",
      "header": "X,Y,Z",
      "type": "readers.text"
    },
    {
      "polygon": "POLYGON((-19.7748222351074
15.8164501190186,48.7325973510742 15.8164501190186,48.7325973510742
54.9158058166504,-19.7748222351074 54.9158058166504,-19.7748222351074
15.8164501190186))",
      "outside": false,
      "type": "filters.crop",
 "where": "(Z > -33 || Z < -60)"
    },
    {
      "type": "writers.las",
      "filename":
"C:\\Users\\robert.plant\\Documents\\Testing\\CroppedScan5.las",
      "compression": "none"
    }
  ]
}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201120/fd541e8c/attachment.html>

From brad.chambers at gmail.com  Fri Nov 20 07:52:40 2020
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Fri, 20 Nov 2020 09:52:40 -0600
Subject: [pdal] Filters.Crop "where" parameter issue
In-Reply-To: <CAPL3KvzFCUQRb=L7ugAKD8knHQVssRivu0sC=-VPsjtbt-g-=g@mail.gmail.com>
References: <CAPL3KvzFCUQRb=L7ugAKD8knHQVssRivu0sC=-VPsjtbt-g-=g@mail.gmail.com>
Message-ID: <CAJyqqPwDkjcwtAPoheXJWp9JPzMFz0=5NPbdfMEizS+0Hae2NQ@mail.gmail.com>

Where was introduced in v2.2.

On Fri, Nov 20, 2020 at 09:27 Robert Plant <iamriskyrob at gmail.com> wrote:

> Hi Guys,
>
> I wasn't sure if this was a bug or me just using the where parameter in
> Filters.Crop incorrectly so I thought this might be the best place to post
> my problem.
>
> I am using PDAL version 2.1.0 taken from Conda
>
> I'm trying to use Filters.Crop to crop an extruded polygon in 3D space, I
> thought I could use the polygon parameter to define a 2D polygon in XY
> space and use the where parameter to ignore points that are outside my
> defined Z values.
>
> My problem is that I get this error message: PDAL: filters.crop:
> Unexpected argument 'where'.
>
> I am using a pipeline which I'll paste below, any thoughts on what is
> going wrong?
>
> Kind Regards,
> Rob
>
> {
>   "pipeline": [
>     {
>       "filename": "C:/Users/robert.plant/Documents/Testing/Scan5.csv",
>       "header": "X,Y,Z",
>       "type": "readers.text"
>     },
>     {
>       "polygon": "POLYGON((-19.7748222351074
> 15.8164501190186,48.7325973510742 15.8164501190186,48.7325973510742
> 54.9158058166504,-19.7748222351074 54.9158058166504,-19.7748222351074
> 15.8164501190186))",
>       "outside": false,
>       "type": "filters.crop",
>  "where": "(Z > -33 || Z < -60)"
>     },
>     {
>       "type": "writers.las",
>       "filename":
> "C:\\Users\\robert.plant\\Documents\\Testing\\CroppedScan5.las",
>       "compression": "none"
>     }
>   ]
> }
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201120/bea0c362/attachment.html>

From stephenknox73 at gmail.com  Wed Nov 25 07:09:41 2020
From: stephenknox73 at gmail.com (Stephen Knox)
Date: Wed, 25 Nov 2020 15:09:41 +0000
Subject: [pdal] PDAL equivalent of lassplit
Message-ID: <CAFkojsZz-AF+ERj3jZ8QCjjMw=buTXKnhynx4kkYuczZWcqUJQ@mail.gmail.com>

Hi there list,

This is my first post, so as traditional I will ask a question!

Is there an equivalent to lassplit in the PDAL toolbox?

Have been looking at discussions
http://osgeo-org.1560.x6.nabble.com/pdal-How-to-handle-las-files-that-don-t-fit-in-memory-td5241680.html
(actually I am using the same data, and am also having problems with memory
consumption).

and also https://www.laserscanningforum.com/forum/viewtopic.php?t=6174

I guess it's possible to compile Liblas and the lastools on my (Linux)
system, and use lasmerge as specified above but just checking there is no
alternative in PDAL first, as this seems quite long-winded.

Would love to try pgpointcloud but this is proving a bit of a hurdle!

Thanks

Stephen Knox
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201125/f92c2dde/attachment.html>

From andrew.bell.ia at gmail.com  Wed Nov 25 07:19:02 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 25 Nov 2020 10:19:02 -0500
Subject: [pdal] PDAL equivalent of lassplit
In-Reply-To: <CAFkojsZz-AF+ERj3jZ8QCjjMw=buTXKnhynx4kkYuczZWcqUJQ@mail.gmail.com>
References: <CAFkojsZz-AF+ERj3jZ8QCjjMw=buTXKnhynx4kkYuczZWcqUJQ@mail.gmail.com>
Message-ID: <CACJ51z1DJqLtS2c27pe7wr=Pyrk1B2U7TVu_6Kd_7mqL9wx8tA@mail.gmail.com>

On Wed, Nov 25, 2020 at 10:09 AM Stephen Knox <stephenknox73 at gmail.com>
wrote:

> Hi there list,
>
> This is my first post, so as traditional I will ask a question!
>
> Is there an equivalent to lassplit in the PDAL toolbox?
>

No.


> Have been looking at discussions
> http://osgeo-org.1560.x6.nabble.com/pdal-How-to-handle-las-files-that-don-t-fit-in-memory-td5241680.html
> (actually I am using the same data, and am also having problems with memory
> consumption).
>
> and also https://www.laserscanningforum.com/forum/viewtopic.php?t=6174
>
> I guess it's possible to compile Liblas and the lastools on my (Linux)
> system, and use lasmerge as specified above but just checking there is no
> alternative in PDAL first, as this seems quite long-winded.
>

You can use 'pdal tile', but there aren't ways to break up input using some
random criteria using streaming.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201125/055fe641/attachment.html>

From stephenknox73 at gmail.com  Mon Nov 30 11:26:08 2020
From: stephenknox73 at gmail.com (Stephen Knox)
Date: Mon, 30 Nov 2020 19:26:08 +0000
Subject: [pdal] Overlaying uint64 ids into las file
Message-ID: <CAFkojsaWyayADiuuSnME7cDz4mai9kVcgiz_KZXJDPfS0=Wz6g@mail.gmail.com>

I have another question.

I am reading a LAS 1.2 file (laz compressed), trying to overlay it with a
geopackage with 64bit integer ids, and then save it out to a LAZ again.

Full pipeline is:

[
    "/data/input.LAZ",
    {
      "type":"filters.range",
      "limits":"Classification[6:6]"
    },
    {
      "type":"filters.ferry",
      "dimensions":"=> BldId"
     },
    {
      "type":"filters.overlay",
      "dimension":"BldId",
      "datasource":"/data/all_tiles_extract.gpkg",
      "column":"bld_id", (gdal reads as Integer64)
      "layer":"layer_name"
    },
    {
      "type":"filters.range",
      "limits":"BldId[1:18446744073709551615]"
    },
     {
        "type":"writers.las",
        "filename":"/data/blds_filter_then_overlaylaz",
        "extra_dims":"all",
        "minor_version":4
    }
]

My resulting BldId dimension has a max value of 2147483647,, which is the
signed 32 bit integer max. The schema is:

      {
        "name": "BldId",
        "size": 8,
        "type": "double" (or unsigned)
      }

Things I have tried:
- Converting the 1.2 LAZ to 1.4 before making the conversion
- Changing the code so that default double is an unsigned int (as above)
- Using the name of an "known" uint64 field, e.g. ShotNumber
- reading the file with --readers.las.extra_dims=BldId=uint64
- writing as a 1.2 LAS and using the --readers.las.use_eb_vlr=true
- copying an existing field e.g.
"type":"filters.ferry",
"dimensions":"Z=> BldId"

None of these seem to work

Can anyone help me to map 64 bit integer ids into a LAS file?

Thanks

Stephen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201130/96c62794/attachment.html>

From howard at hobu.co  Mon Nov 30 11:43:26 2020
From: howard at hobu.co (Howard Butler)
Date: Mon, 30 Nov 2020 13:43:26 -0600
Subject: [pdal] Overlaying uint64 ids into las file
In-Reply-To: <CAFkojsaWyayADiuuSnME7cDz4mai9kVcgiz_KZXJDPfS0=Wz6g@mail.gmail.com>
References: <CAFkojsaWyayADiuuSnME7cDz4mai9kVcgiz_KZXJDPfS0=Wz6g@mail.gmail.com>
Message-ID: <659F7FC6-91AB-40F6-94F5-56EA833C1959@hobu.co>



> On Nov 30, 2020, at 1:26 PM, Stephen Knox <stephenknox73 at gmail.com> wrote:
> 
> I have another question.
> 
> I am reading a LAS 1.2 file (laz compressed), trying to overlay it with a geopackage with 64bit integer ids, and then save it out to a LAZ again.
> 
> Full pipeline is:
> 
> [
>     "/data/input.LAZ",
>     {
>       "type":"filters.range",
>       "limits":"Classification[6:6]"
>     },
>     {
>       "type":"filters.ferry",
>       "dimensions":"=> BldId"
>      },
>     {
>       "type":"filters.overlay",
>       "dimension":"BldId",
>       "datasource":"/data/all_tiles_extract.gpkg",
>       "column":"bld_id", (gdal reads as Integer64)
>       "layer":"layer_name" 
>     },
>     {
>       "type":"filters.range",
>       "limits":"BldId[1:18446744073709551615]"
>     },
>      {
>         "type":"writers.las",
>         "filename":"/data/blds_filter_then_overlaylaz",
>         "extra_dims":"all",
>         "minor_version":4
>     }
> ]
> 
> My resulting BldId dimension has a max value of 2147483647,, which is the signed 32 bit integer max. The schema is:
> 
>       {
>         "name": "BldId",
>         "size": 8,
>         "type": "double" (or unsigned)
>       }
> 
> Things I have tried:
> - Converting the 1.2 LAZ to 1.4 before making the conversion
> - Changing the code so that default double is an unsigned int (as above)
> - Using the name of an "known" uint64 field, e.g. ShotNumber
> - reading the file with --readers.las.extra_dims=BldId=uint64
> - writing as a 1.2 LAS and using the --readers.las.use_eb_vlr=true
> - copying an existing field e.g.       
> "type":"filters.ferry",
> "dimensions":"Z=> BldId"
> 
> None of these seem to work
> 
> Can anyone help me to map 64 bit integer ids into a LAS file?

Stephen,

Looking at the code, it seems we are clamping to an int32_t when we call OGR_F_GetFieldAsInteger in the OverlayFilter code. I also 

https://github.com/PDAL/PDAL/blob/master/filters/OverlayFilter.cpp#L122 <https://github.com/PDAL/PDAL/blob/master/filters/OverlayFilter.cpp#L122>

This likely would need to be updated to use the OGR_F_GetFieldAsInteger64 method when/if it is available. Please file a ticket on this, and feel free to provide a pull request that implements such a thing.

The RangeFilter is also using a double for its comparison 

https://github.com/PDAL/PDAL/blob/master/filters/private/DimRange.cpp#L152 <https://github.com/PDAL/PDAL/blob/master/filters/private/DimRange.cpp#L152>

so I'm not sure your filters.range limits statement would always work.

Are the BldId actually in the range > 32 bits? If not, you could probably use some OGR sql to downcast them into a new column. Otherwise, some patches to PDAL are going to be needed.

Howard

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201130/be06aa5e/attachment.html>

From peter.lim at gpslands.com  Mon Nov 30 18:45:06 2020
From: peter.lim at gpslands.com (Peter Lim)
Date: Tue, 1 Dec 2020 10:45:06 +0800
Subject: [pdal] Several Overlapping Patches When Writing to pgpointcloud
 through filters.chipper
Message-ID: <000c01d6c78c$00bb6bc0$02324340$@lim@gpslands.com>

Hi,

 

I'm reading some las files, using filters.chipper and write to PostgreSQ
database using the following pipeline:

 

[

    {

"type":"readers.las",

                "filename":"X:/tem/*.las"

   },

  {

                "type":"filters.reprojection",

                "in_srs":"EPSG:32648",

                "out_srs":"EPSG:3414"

    },

    {

                 "type":"filters.chipper",

                "capacity":600

    },    

    {

"type":"writers.pgpointcloud",

"connection":"host='localhost' dbname='lidar' user='anyuser'  ",

"table":"example",

"schema":"pc",

                "overwrite":"true",         

"compression":"dimensional",

"srid":"3414",

"scale_x":"0.001",

                "scale_y":"0.001",

                "scale_z":"0.001",

                "offset_x":"2000",

                "offset_y":"20000",


                "output_dims":"Intensity, X, Y, Z"


    }                          

]

 

However, the table has many overlapping patches as shown below:



 

I had tried using filters.mortonorder but still the same results. 

 

May I know is there anyway to avoid or reduce overlapping patches.

 

Please advise.

 

Thank you.

 

Best Regards,

 

Peter Lim

 



-- 
This email has been checked for viruses by Avast antivirus software.
https://www.avast.com/antivirus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201201/fa09e949/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image003.jpg
Type: image/jpeg
Size: 15284 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20201201/fa09e949/attachment-0001.jpg>

