From wenzeslaus at gmail.com  Sun Jul  2 15:04:52 2017
From: wenzeslaus at gmail.com (Vaclav Petras)
Date: Sun, 2 Jul 2017 18:04:52 -0400
Subject: [pdal] [GRASS-dev] [SoC] Week 05: Integration Of PDAL into
	GRASS GIS
In-Reply-To: <CAPRzK5ZtDOD-dMKRokROBAGUT9YtDgwsCt55Kw5DAdL_o7ZXQw@mail.gmail.com>
References: <CAPRzK5ZtDOD-dMKRokROBAGUT9YtDgwsCt55Kw5DAdL_o7ZXQw@mail.gmail.com>
Message-ID: <CABo5uVscEsYrhaH0xehu059aizHGsenEMDpBNrnTJwR-B6hVTQ@mail.gmail.com>

Hi Paul,

On Fri, Jun 30, 2017 at 4:42 PM, Paul Schrum <paul.schrum at gmail.com> wrote:

>
>
>
> 3. Are you blocked on anything?
>
>
>
> I have added a new .cpp file and .hpp file for generating pipelines from
> GRASS inputs.  They compile, but I can’t get them to link.  I think I
> will need help figuring this out.
>

it compiles for me. Try using the Makefile and adding it to the repository.


>
>
> Repo: https://github.ncsu.edu/ptschrum/v_in_pdal
>

...but before that, move the repository (see the open issue there).

Vaclav
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170702/b67e3b17/attachment.html>

From paul.schrum at gmail.com  Mon Jul  3 09:19:58 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Mon, 3 Jul 2017 12:19:58 -0400
Subject: [pdal] Fwd: [SoC] Week 04: Integration of PDAL into GRASS GIS
In-Reply-To: <CA+aohyxL8jKDEaCRSe-QEAPBpQtz46YG0hEEj=_qaNpOBswEYg@mail.gmail.com>
References: <CA+aohyxL8jKDEaCRSe-QEAPBpQtz46YG0hEEj=_qaNpOBswEYg@mail.gmail.com>
Message-ID: <CAPRzK5Z5B4aN3NXRpT38TamZx_i7D0Mb0vT1Bt_XvQvu0Co-=g@mail.gmail.com>

As follow up to this.  I have moved the repository.  (It was not possible
to make it public at its previous location.)

You may now find it at
https://github.com/PaulSchrum/v_in_pdal

- Paul
---------- Forwarded message ----------
From: Paul Schrum <ptschrum at ncsu.edu>
Date: Tue, Jun 27, 2017 at 9:28 AM
Subject: [SoC] Week 04: Integration of PDAL into GRASS GIS
To: soc at lists.osgeo.org


Weekly Report for Paul Schrum for Week 4 (the week ending 6/23/2017)
Project: Integration Of PDAL into GRASS GIS

1. What did you get done this week?

Nothing.  I was on vacation all week as scheduled in my proposal.

2. What do you plan on doing next week?

Getting basic functionality working and one or more tests to confirm
everything works correctly.

3. Are you blocked on anything?

No.  My progress has been slower than expected, though, and if I still
haven’t proceeded to the first of basic working code, then I will call it a
block.


_______________________________________________
SoC mailing list
SoC at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/soc
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170703/0e263717/attachment.html>

From michael.rosen at gmail.com  Mon Jul  3 15:49:44 2017
From: michael.rosen at gmail.com (Michael Rosen)
Date: Mon, 3 Jul 2017 15:49:44 -0700
Subject: [pdal] How to take classifications from one file and put them into
	another.
Message-ID: <CAAhorQko=1mR16veNorrZ=V9WFw1hqpng5zuP-n=9Vn6aW=iHA@mail.gmail.com>

I'm doing work on automated classification.  While my input data is all
LAS, several of the techniques I'm considering currently work only on txt
files and more significantly some produce labels (classification code) for
only a subset of the points.  I need to take the labels from classifier and
put them into the source datasets.  How best to do that?

I think a natural way to implement this is to iterate the points in the
source dataset and for each point, pick the label from the closest point in
the labelled dataset.  The PDAL's Hausdorf filter does something like this
and I'm confident I can write a tool that would do this using the KDIndex
and the Assignment filter.  However, I wonder if there is some way to do
this as a pipeline using existing filters.

msr
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170703/4ae5a1cb/attachment.html>

From vladimir.sandoval at yandex.com  Fri Jul  7 10:18:58 2017
From: vladimir.sandoval at yandex.com (Vladimir Sandoval)
Date: Fri, 07 Jul 2017 20:18:58 +0300
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
Message-ID: <1018041499447938@web29g.yandex.ru>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170707/8402b510/attachment.html>

From Adam.Steer at anu.edu.au  Fri Jul  7 19:17:40 2017
From: Adam.Steer at anu.edu.au (Adam Steer)
Date: Sat, 8 Jul 2017 02:17:40 +0000
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
In-Reply-To: <1018041499447938@web29g.yandex.ru>
References: <1018041499447938@web29g.yandex.ru>
Message-ID: <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>

HI Vladimir - can you check whether a PNG with just one ‘band’ (ie ‘max’ OR ‘idw’ but not both) works?

That’s all I can think of… I actually need to test this as well :) Next week…

Cheers

Adam


> On 8 Jul 2017, at 3:18 am, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
> 
> Trying to make a PNG from a .laz file to display in Firefox.
>  
> {
>   "pipeline":[
>     "somefile.laz",
>     {
>      "type":"writers.gdal",
>       "resolution": 1,
>       "output_type":"idw",
>       "output_type":"max",
>        "gdalopts":"of=PNG,outsize=128 128",
>        "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>       "filename":"outputfile.png"
>     }
>   ]
> }
>  
> The pipeline runs and produces a PNG. I cannot view the PNG with Firefox, MS Paint, or Windows Photo Viewer, HOWEVER, I can open it and view it in Opticks (https://sourceforge.net/projects/opticks/).
>  
> Opticks shows a single band grey scale image, probably representative of the original .laz.
>  
> Anything I'm doing wrong here producing the "corrupted" PNG?
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal


From paul.schrum at gmail.com  Sat Jul  8 12:13:48 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Sat, 8 Jul 2017 15:13:48 -0400
Subject: [pdal] [SoC] Week 06: Integration Of PDAL into GRASS GIS
Message-ID: <CAPRzK5bB9g+FRgm36G6E0iWymsPDoSeSMDXXWNHmqnBep+YrGw@mail.gmail.com>

*1. What did you get done this week?*
a. With my mentor's help, resolved the problem with the .o files not
linking.  Accomplishing this included adding the Makefile to the git repo.
(It was not added originally because I inadvertently had Makefile listed in
.gitignore, so I also removed that.  Link to Commit
<https://github.com/PaulSchrum/v_in_pdal/commit/ac59163c3fcbac6fb714621b68e7c8300b869ba9>
)

b. Refactored function basicReaderWriter from dwelling in main.cpp to being
found as a static function in the pipelinejson class.  Commit
<https://github.com/PaulSchrum/v_in_pdal/commit/8f2c4cf5de378964750d7e52e2f9c4e8b2bc3df3>

c. In consultation with my mentor (Vashek) determined to proceed by
creating a new class, PdalVectorMapWriter, which will inherit from PDAL's
Writer class.  This will allow the GRASS Vector Map writer to be included
as an end point in a json pipeline when invoked from GRASS.  Implementing
this has been started but not completed.  This follows on to last weeks
item 2a: "get a basic, no-frills conversion from .las to GRASS to work like
basic .las to .txt is now working."  Commit to add hpp and cpp files
<https://github.com/PaulSchrum/v_in_pdal/commit/2b61beb46b71b956f925ef5cbe3606d74091aa9f>
Commit refactoring existing files
<https://github.com/PaulSchrum/v_in_pdal/commit/939b753c404cc13a56fd2be23ca9f7b85b708557>


*2. What do you plan on doing next week?*
a. Complete last week's item 2a, get a basic, no-frills conversion from
.las to GRASS Vector Map to work.

b. Begin work on a basic conversion from .las to GRASS Raster. (r.in.pdal)

c. Complete last week's item 2c, Create unit tests for item 2a.

d. Begin work adding features to v.in.pdal.

*3. Are you blocked on anything?*
No.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170708/a5e42bc9/attachment.html>

From howard at hobu.co  Sat Jul  8 13:09:05 2017
From: howard at hobu.co (Howard Butler)
Date: Sat, 8 Jul 2017 15:09:05 -0500
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
In-Reply-To: <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>
References: <1018041499447938@web29g.yandex.ru>
 <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>
Message-ID: <3F9E35ED-37F5-4300-9DE9-B82DA899CE4F@hobu.co>

Vladimir,

You need to be specific about what you mean by "cannot view the PNG with Firefox...".

The output of writers.gdal with the configuration you've provided is a 2-band PNG. That's probably not what you are expecting. Presumably you will want a colorized PNG or something? In that case, write out only the idw band as a PNG, and then use a GDAL VRT plus a color interpretation to convert that to a PNG that would be viewable in a way you'd expect in Firefox.

Hope this helps,

Howard

> On Jul 7, 2017, at 9:17 PM, Adam Steer <Adam.Steer at anu.edu.au> wrote:
> 
> HI Vladimir - can you check whether a PNG with just one ‘band’ (ie ‘max’ OR ‘idw’ but not both) works?
> 
> That’s all I can think of… I actually need to test this as well :) Next week…
> 
> Cheers
> 
> Adam
> 
> 
>> On 8 Jul 2017, at 3:18 am, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
>> 
>> Trying to make a PNG from a .laz file to display in Firefox.
>> 
>> {
>>  "pipeline":[
>>    "somefile.laz",
>>    {
>>     "type":"writers.gdal",
>>      "resolution": 1,
>>      "output_type":"idw",
>>      "output_type":"max",
>>       "gdalopts":"of=PNG,outsize=128 128",
>>       "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>>      "filename":"outputfile.png"
>>    }
>>  ]
>> }
>> 
>> The pipeline runs and produces a PNG. I cannot view the PNG with Firefox, MS Paint, or Windows Photo Viewer, HOWEVER, I can open it and view it in Opticks (https://sourceforge.net/projects/opticks/).
>> 
>> Opticks shows a single band grey scale image, probably representative of the original .laz.
>> 
>> Anything I'm doing wrong here producing the "corrupted" PNG?
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
> 
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal


From brad.chambers at gmail.com  Sat Jul  8 21:35:24 2017
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Sun, 09 Jul 2017 04:35:24 +0000
Subject: [pdal] How to take classifications from one file and put them
 into another.
In-Reply-To: <CAAhorQko=1mR16veNorrZ=V9WFw1hqpng5zuP-n=9Vn6aW=iHA@mail.gmail.com>
References: <CAAhorQko=1mR16veNorrZ=V9WFw1hqpng5zuP-n=9Vn6aW=iHA@mail.gmail.com>
Message-ID: <CAJyqqPzeUE1W7K_UFXwOcSosKhnznY+_0YQXrYmmHF+fEsG3ig@mail.gmail.com>

On Mon, Jul 3, 2017 at 5:50 PM Michael Rosen <michael.rosen at gmail.com>
wrote:

I'm doing work on automated classification.  While my input data is all
> LAS, several of the techniques I'm considering currently work only on txt
> files and more significantly some produce labels (classification code) for
> only a subset of the points.  I need to take the labels from classifier and
> put them into the source datasets.  How best to do that?
>

Do I understand correctly that you have one point cloud with
classifications and one without? And that you'd like to apply the
classifications from the first to the second?


> I think a natural way to implement this is to iterate the points in the
> source dataset and for each point, pick the label from the closest point in
> the labelled dataset.  The PDAL's Hausdorf filter does something like this
> and I'm confident I can write a tool that would do this using the KDIndex
> and the Assignment filter.  However, I wonder if there is some way to do
> this as a pipeline using existing filters.
>

I think you can code this up pretty easily using the 3D KDIndex. Hausdorff
would be one example, but there are many others throughout the codebase.
There is no solution that uses existing filters in a pipeline that comes to
mind.

Brad
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170709/70f4ff92/attachment.html>

From vladimir.sandoval at yandex.com  Mon Jul 10 05:21:20 2017
From: vladimir.sandoval at yandex.com (Vladimir Sandoval)
Date: Mon, 10 Jul 2017 15:21:20 +0300
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
In-Reply-To: <3F9E35ED-37F5-4300-9DE9-B82DA899CE4F@hobu.co>
References: <1018041499447938@web29g.yandex.ru>
 <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>
 <3F9E35ED-37F5-4300-9DE9-B82DA899CE4F@hobu.co>
Message-ID: <391551499689280@web23o.yandex.ru>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170710/f12f04ac/attachment.html>

From paul.schrum at gmail.com  Mon Jul 10 14:11:36 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Mon, 10 Jul 2017 17:11:36 -0400
Subject: [pdal] How to invoke my custom writer?
Message-ID: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>

I am developing a custom PDAL writer for my GSoC project. (Link
<https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.  The
module compiles, but it is an intermediate state since I am in the process
of developing it.

I have the custom writer, PdalVectorMapWriter,  inheriting from writer and
it compiles okay.  Currently all functions just print out their own name
and return.

In main.cpp I create the pipeline json string and create a PipelineExecutor
with it.  I then call pipeline-> validate.  This throws an exception
stating

terminate called after throwing an instance of 'pdal::pdal_error'
  what():  Couldn't create writer stage of type
'writers.PdalVectorMapWriter'.

So I am thinking that I need somehow to inform Pdal about an instance of
the class.  But as I go over the Pdal documentation, I do not see how to do
that.  Can someone help me understand what I need to do?

- Paul

Here is a key code snippet:
81    std::string pipeline_json =
82            pipelineJson::basicVectorMapReaderWriter(inFile,outFile);
83
84    cout << pipeline_json << endl;  //diagnostic only
85    cout << endl;
86    G_important_message(_("Running the pipeline ..."));
87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
88
87    cout << "is valid?  " << pipeline->validate() << endl;

Line 87 throws the exception.


Here is the json string being passed to the PipelineExecutor constructor:

{ "pipeline":[

"/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/vector/v.in.pdal/testFiles/100-points.las",
{
   "type":"writers.PdalVectorMapWriter",
   "filename":"100-points"
}
 ]
}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170710/905042e6/attachment.html>

From andrew.bell.ia at gmail.com  Mon Jul 10 16:56:09 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 10 Jul 2017 19:56:09 -0400
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
Message-ID: <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>

You need to build your writer as a shared plugin and make sure that the
dll/so that you create is in a folder where the plugin manager will look
for it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing
plugins in the "plutgins" subdirectory of pdal.  Let me know if you need
more help.

On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com> wrote:

> I am developing a custom PDAL writer for my GSoC project. (Link
> <https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
> Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.  The
> module compiles, but it is an intermediate state since I am in the process
> of developing it.
>
> I have the custom writer, PdalVectorMapWriter,  inheriting from writer and
> it compiles okay.  Currently all functions just print out their own name
> and return.
>
> In main.cpp I create the pipeline json string and create a
> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
> exception stating
>
> terminate called after throwing an instance of 'pdal::pdal_error'
>   what():  Couldn't create writer stage of type
> 'writers.PdalVectorMapWriter'.
>
> So I am thinking that I need somehow to inform Pdal about an instance of
> the class.  But as I go over the Pdal documentation, I do not see how to do
> that.  Can someone help me understand what I need to do?
>
> - Paul
>
> Here is a key code snippet:
> 81    std::string pipeline_json =
> 82            pipelineJson::basicVectorMapReaderWriter(inFile,outFile);
> 83
> 84    cout << pipeline_json << endl;  //diagnostic only
> 85    cout << endl;
> 86    G_important_message(_("Running the pipeline ..."));
> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
> 88
> 87    cout << "is valid?  " << pipeline->validate() << endl;
>
> Line 87 throws the exception.
>
>
> Here is the json string being passed to the PipelineExecutor constructor:
>
> { "pipeline":[
>    "/home/user/Desktop/ALL/SourceModules/cpp/grass7_
> trunk/vector/v.in.pdal/testFiles/100-points.las",
> {
>    "type":"writers.PdalVectorMapWriter",
>    "filename":"100-points"
> }
>  ]
> }
>
>
>
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170710/07a2e16a/attachment.html>

From paul.schrum at gmail.com  Tue Jul 11 07:59:49 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Tue, 11 Jul 2017 10:59:49 -0400
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
Message-ID: <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>

Thank you Andrew.

In the cpp file containing the class, I have the following lines:

  static PluginInfo const s_info = PluginInfo(
    "writers.PdalVectorMapWriter",
    "Custom Writer to write a GRASS Vector Map",
    "http://no/documentation/yet" );

  CREATE_SHARED_PLUGIN(1, 0, PdalVectorMapWriter, Writer, s_info);

So would the only other thing I need to do be to tell pdal where to find
the class?  I don't have to instantiate the class and pass it the instance?

The class lives in my GRASS executable, v.in.pdal.  How do I tell pdal to
append PDAL_DRIVER_PATH with v.in.pdal's path, and is that sufficient?

I see in https://github.com/PDAL/PDAL/tree/master/plugins that these are
built using CMake.  But GRASS uses make, so I don't know how to make these
work together.  Is it not possible for me simply to pass an instance of my
class to some kind of pdal->registerPlugIn() function or something similar
which happens at runtime?

- Paul


On Mon, Jul 10, 2017 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> You need to build your writer as a shared plugin and make sure that the
> dll/so that you create is in a folder where the plugin manager will look
> for it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing
> plugins in the "plutgins" subdirectory of pdal.  Let me know if you need
> more help.
>
> On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com>
> wrote:
>
>> I am developing a custom PDAL writer for my GSoC project. (Link
>> <https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
>> Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.  The
>> module compiles, but it is an intermediate state since I am in the process
>> of developing it.
>>
>> I have the custom writer, PdalVectorMapWriter,  inheriting from writer
>> and it compiles okay.  Currently all functions just print out their own
>> name and return.
>>
>> In main.cpp I create the pipeline json string and create a
>> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
>> exception stating
>>
>> terminate called after throwing an instance of 'pdal::pdal_error'
>>   what():  Couldn't create writer stage of type
>> 'writers.PdalVectorMapWriter'.
>>
>> So I am thinking that I need somehow to inform Pdal about an instance of
>> the class.  But as I go over the Pdal documentation, I do not see how to do
>> that.  Can someone help me understand what I need to do?
>>
>> - Paul
>>
>> Here is a key code snippet:
>> 81    std::string pipeline_json =
>> 82            pipelineJson::basicVectorMapReaderWriter(inFile,outFile);
>> 83
>> 84    cout << pipeline_json << endl;  //diagnostic only
>> 85    cout << endl;
>> 86    G_important_message(_("Running the pipeline ..."));
>> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
>> 88
>> 87    cout << "is valid?  " << pipeline->validate() << endl;
>>
>> Line 87 throws the exception.
>>
>>
>> Here is the json string being passed to the PipelineExecutor constructor:
>>
>> { "pipeline":[
>>    "/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/
>> vector/v.in.pdal/testFiles/100-points.las",
>> {
>>    "type":"writers.PdalVectorMapWriter",
>>    "filename":"100-points"
>> }
>>  ]
>> }
>>
>>
>>
>>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170711/aba8cfa6/attachment.html>

From mateusz at loskot.net  Tue Jul 11 08:13:59 2017
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 11 Jul 2017 17:13:59 +0200
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
 <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
Message-ID: <CABUeae-JcPtbhzDVUh8vc5UL9HO__nEOdcZ+3jG_-oku2CQ+4Q@mail.gmail.com>

On 11 July 2017 at 16:59, Paul Schrum <paul.schrum at gmail.com> wrote:
>
> I see in https://github.com/PDAL/PDAL/tree/master/plugins that these are
> built using CMake.  But GRASS uses make, so I don't know how to make these
> work together.  Is it not possible for me simply to pass an instance of my
> class to some kind of pdal->registerPlugIn() function or something similar
> which happens at runtime?

You may find the code of the PluginManagerTest.cpp handy
https://github.com/PDAL/PDAL/commit/e045882a31dba31cfec4ef92a6aba8663348eddb

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net

From andrew.bell.ia at gmail.com  Tue Jul 11 08:16:32 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 11 Jul 2017 11:16:32 -0400
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
 <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
Message-ID: <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>

You need to build your writer (a plugin) into a shared object that can be
loaded by the plugin manager.  It needs to be called
libpdal_plugin_writer_PdalVectorMapWriter.<your shared library extension>.
The shared library needs to be located somewhere that the plugin manager
can find it.  By default, PDAL will look in the following directories for
plugins:

".", "./lib", "../lib", "./bin", "../bin"

If you're using cmake, you can use the PDAL build to generate the shared
library for you.  Here's an example plugin:

https://github.com/gadomski/cpd.git

Note that you don't have to do ANY of this if you're not using the
pipeline/plugin manager to run your writer from a JSON pipeline.  If you're
executing code programmatically, you can simply add your writer to the end
of a pipeline and call prepare() and execute() on the pipeline that you've
created in code.


On Tue, Jul 11, 2017 at 10:59 AM, Paul Schrum <paul.schrum at gmail.com> wrote:

> Thank you Andrew.
>
> In the cpp file containing the class, I have the following lines:
>
>   static PluginInfo const s_info = PluginInfo(
>     "writers.PdalVectorMapWriter",
>     "Custom Writer to write a GRASS Vector Map",
>     "http://no/documentation/yet" );
>
>   CREATE_SHARED_PLUGIN(1, 0, PdalVectorMapWriter, Writer, s_info);
>
> So would the only other thing I need to do be to tell pdal where to find
> the class?  I don't have to instantiate the class and pass it the instance?
>
> The class lives in my GRASS executable, v.in.pdal.  How do I tell pdal to
> append PDAL_DRIVER_PATH with v.in.pdal's path, and is that sufficient?
>
> I see in https://github.com/PDAL/PDAL/tree/master/plugins that these are
> built using CMake.  But GRASS uses make, so I don't know how to make these
> work together.  Is it not possible for me simply to pass an instance of my
> class to some kind of pdal->registerPlugIn() function or something similar
> which happens at runtime?
>
> - Paul
>
>
> On Mon, Jul 10, 2017 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> You need to build your writer as a shared plugin and make sure that the
>> dll/so that you create is in a folder where the plugin manager will look
>> for it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing
>> plugins in the "plutgins" subdirectory of pdal.  Let me know if you need
>> more help.
>>
>> On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com>
>> wrote:
>>
>>> I am developing a custom PDAL writer for my GSoC project. (Link
>>> <https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
>>> Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.
>>> The module compiles, but it is an intermediate state since I am in the
>>> process of developing it.
>>>
>>> I have the custom writer, PdalVectorMapWriter,  inheriting from writer
>>> and it compiles okay.  Currently all functions just print out their own
>>> name and return.
>>>
>>> In main.cpp I create the pipeline json string and create a
>>> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
>>> exception stating
>>>
>>> terminate called after throwing an instance of 'pdal::pdal_error'
>>>   what():  Couldn't create writer stage of type
>>> 'writers.PdalVectorMapWriter'.
>>>
>>> So I am thinking that I need somehow to inform Pdal about an instance of
>>> the class.  But as I go over the Pdal documentation, I do not see how to do
>>> that.  Can someone help me understand what I need to do?
>>>
>>> - Paul
>>>
>>> Here is a key code snippet:
>>> 81    std::string pipeline_json =
>>> 82            pipelineJson::basicVectorMapReaderWriter(inFile,outFile);
>>> 83
>>> 84    cout << pipeline_json << endl;  //diagnostic only
>>> 85    cout << endl;
>>> 86    G_important_message(_("Running the pipeline ..."));
>>> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
>>> 88
>>> 87    cout << "is valid?  " << pipeline->validate() << endl;
>>>
>>> Line 87 throws the exception.
>>>
>>>
>>> Here is the json string being passed to the PipelineExecutor constructor:
>>>
>>> { "pipeline":[
>>>    "/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/vecto
>>> r/v.in.pdal/testFiles/100-points.las",
>>> {
>>>    "type":"writers.PdalVectorMapWriter",
>>>    "filename":"100-points"
>>> }
>>>  ]
>>> }
>>>
>>>
>>>
>>>
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170711/b884f960/attachment.html>

From pete.gadomski at gmail.com  Tue Jul 11 08:22:17 2017
From: pete.gadomski at gmail.com (Pete Gadomski)
Date: Tue, 11 Jul 2017 09:22:17 -0600
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
 <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
 <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>
Message-ID: <CAOY6Aa32AS3Z0xcNqsqJTaOuC6yEMQ8RPqk13OfJxmGNjJC38g@mail.gmail.com>

> If you're using cmake, you can use the PDAL build to generate the shared library for you.  Here's an example plugin:

Sorry, I'll correct that link:
https://github.com/PDAL/PDAL/tree/master/plugins/cpd

Andrew's original link was the CPD project itself, not the PDAL plugin.

Cheers,
Pete

On Tue, Jul 11, 2017 at 9:16 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> You need to build your writer (a plugin) into a shared object that can be
> loaded by the plugin manager.  It needs to be called
> libpdal_plugin_writer_PdalVectorMapWriter.<your shared library extension>.
> The shared library needs to be located somewhere that the plugin manager can
> find it.  By default, PDAL will look in the following directories for
> plugins:
>
> ".", "./lib", "../lib", "./bin", "../bin"
>
> If you're using cmake, you can use the PDAL build to generate the shared
> library for you.  Here's an example plugin:
>
> https://github.com/gadomski/cpd.git
>
> Note that you don't have to do ANY of this if you're not using the
> pipeline/plugin manager to run your writer from a JSON pipeline.  If you're
> executing code programmatically, you can simply add your writer to the end
> of a pipeline and call prepare() and execute() on the pipeline that you've
> created in code.
>
>
> On Tue, Jul 11, 2017 at 10:59 AM, Paul Schrum <paul.schrum at gmail.com> wrote:
>>
>> Thank you Andrew.
>>
>> In the cpp file containing the class, I have the following lines:
>>
>>   static PluginInfo const s_info = PluginInfo(
>>     "writers.PdalVectorMapWriter",
>>     "Custom Writer to write a GRASS Vector Map",
>>     "http://no/documentation/yet" );
>>
>>   CREATE_SHARED_PLUGIN(1, 0, PdalVectorMapWriter, Writer, s_info);
>>
>> So would the only other thing I need to do be to tell pdal where to find
>> the class?  I don't have to instantiate the class and pass it the instance?
>>
>> The class lives in my GRASS executable, v.in.pdal.  How do I tell pdal to
>> append PDAL_DRIVER_PATH with v.in.pdal's path, and is that sufficient?
>>
>> I see in https://github.com/PDAL/PDAL/tree/master/plugins that these are
>> built using CMake.  But GRASS uses make, so I don't know how to make these
>> work together.  Is it not possible for me simply to pass an instance of my
>> class to some kind of pdal->registerPlugIn() function or something similar
>> which happens at runtime?
>>
>> - Paul
>>
>>
>> On Mon, Jul 10, 2017 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>>
>>> You need to build your writer as a shared plugin and make sure that the
>>> dll/so that you create is in a folder where the plugin manager will look for
>>> it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing plugins in
>>> the "plutgins" subdirectory of pdal.  Let me know if you need more help.
>>>
>>> On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com>
>>> wrote:
>>>>
>>>> I am developing a custom PDAL writer for my GSoC project. (Link)  Source
>>>> Code is on github.  The module compiles, but it is an intermediate state
>>>> since I am in the process of developing it.
>>>>
>>>> I have the custom writer, PdalVectorMapWriter,  inheriting from writer
>>>> and it compiles okay.  Currently all functions just print out their own name
>>>> and return.
>>>>
>>>> In main.cpp I create the pipeline json string and create a
>>>> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
>>>> exception stating
>>>>
>>>> terminate called after throwing an instance of 'pdal::pdal_error'
>>>>   what():  Couldn't create writer stage of type
>>>> 'writers.PdalVectorMapWriter'.
>>>>
>>>> So I am thinking that I need somehow to inform Pdal about an instance of
>>>> the class.  But as I go over the Pdal documentation, I do not see how to do
>>>> that.  Can someone help me understand what I need to do?
>>>>
>>>> - Paul
>>>>
>>>> Here is a key code snippet:
>>>> 81    std::string pipeline_json =
>>>> 82            pipelineJson::basicVectorMapReaderWriter(inFile,outFile);
>>>> 83
>>>> 84    cout << pipeline_json << endl;  //diagnostic only
>>>> 85    cout << endl;
>>>> 86    G_important_message(_("Running the pipeline ..."));
>>>> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
>>>> 88
>>>> 87    cout << "is valid?  " << pipeline->validate() << endl;
>>>>
>>>> Line 87 throws the exception.
>>>>
>>>>
>>>> Here is the json string being passed to the PipelineExecutor
>>>> constructor:
>>>>
>>>> { "pipeline":[
>>>>
>>>> "/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/vector/v.in.pdal/testFiles/100-points.las",
>>>> {
>>>>    "type":"writers.PdalVectorMapWriter",
>>>>    "filename":"100-points"
>>>> }
>>>>  ]
>>>> }
>>>>
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>>
>>>
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>
>>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal

From paul.schrum at gmail.com  Tue Jul 11 11:37:32 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Tue, 11 Jul 2017 14:37:32 -0400
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
 <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
 <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>
Message-ID: <CAPRzK5bS6owZbqNcZHGG-US=9xn1mBmuQXtz4FHW_uDKc2A-Eg@mail.gmail.com>

Andrew,

We have become interested in that second option you mention, "executing
code programmatically, you can simply add your writer to the end of a
pipeline and call prepare() and execute()".  Are there examples of how to
do this?

We looked at PipelineManager and see
PointTableRef pointTable() const

Is that what we would consume?  If so, how do I get to the point where that
has data in it and is ready for me to iterate over

- Paul


On Tue, Jul 11, 2017 at 11:16 AM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> You need to build your writer (a plugin) into a shared object that can be
> loaded by the plugin manager.  It needs to be called libpdal_plugin_writer_PdalVectorMapWriter.<your
> shared library extension>.  The shared library needs to be located
> somewhere that the plugin manager can find it.  By default, PDAL will look
> in the following directories for plugins:
>
> ".", "./lib", "../lib", "./bin", "../bin"
>
> If you're using cmake, you can use the PDAL build to generate the shared
> library for you.  Here's an example plugin:
>
> https://github.com/gadomski/cpd.git
>
> Note that you don't have to do ANY of this if you're not using the
> pipeline/plugin manager to run your writer from a JSON pipeline.  If you're
> executing code programmatically, you can simply add your writer to the end
> of a pipeline and call prepare() and execute() on the pipeline that you've
> created in code.
>
>
> On Tue, Jul 11, 2017 at 10:59 AM, Paul Schrum <paul.schrum at gmail.com>
> wrote:
>
>> Thank you Andrew.
>>
>> In the cpp file containing the class, I have the following lines:
>>
>>   static PluginInfo const s_info = PluginInfo(
>>     "writers.PdalVectorMapWriter",
>>     "Custom Writer to write a GRASS Vector Map",
>>     "http://no/documentation/yet" );
>>
>>   CREATE_SHARED_PLUGIN(1, 0, PdalVectorMapWriter, Writer, s_info);
>>
>> So would the only other thing I need to do be to tell pdal where to find
>> the class?  I don't have to instantiate the class and pass it the instance?
>>
>> The class lives in my GRASS executable, v.in.pdal.  How do I tell pdal to
>> append PDAL_DRIVER_PATH with v.in.pdal's path, and is that sufficient?
>>
>> I see in https://github.com/PDAL/PDAL/tree/master/plugins that these are
>> built using CMake.  But GRASS uses make, so I don't know how to make these
>> work together.  Is it not possible for me simply to pass an instance of my
>> class to some kind of pdal->registerPlugIn() function or something similar
>> which happens at runtime?
>>
>> - Paul
>>
>>
>> On Mon, Jul 10, 2017 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>
>>> You need to build your writer as a shared plugin and make sure that the
>>> dll/so that you create is in a folder where the plugin manager will look
>>> for it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing
>>> plugins in the "plutgins" subdirectory of pdal.  Let me know if you need
>>> more help.
>>>
>>> On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com>
>>> wrote:
>>>
>>>> I am developing a custom PDAL writer for my GSoC project. (Link
>>>> <https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
>>>> Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.
>>>> The module compiles, but it is an intermediate state since I am in the
>>>> process of developing it.
>>>>
>>>> I have the custom writer, PdalVectorMapWriter,  inheriting from writer
>>>> and it compiles okay.  Currently all functions just print out their own
>>>> name and return.
>>>>
>>>> In main.cpp I create the pipeline json string and create a
>>>> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
>>>> exception stating
>>>>
>>>> terminate called after throwing an instance of 'pdal::pdal_error'
>>>>   what():  Couldn't create writer stage of type
>>>> 'writers.PdalVectorMapWriter'.
>>>>
>>>> So I am thinking that I need somehow to inform Pdal about an instance
>>>> of the class.  But as I go over the Pdal documentation, I do not see how to
>>>> do that.  Can someone help me understand what I need to do?
>>>>
>>>> - Paul
>>>>
>>>> Here is a key code snippet:
>>>> 81    std::string pipeline_json =
>>>> 82            pipelineJson::basicVectorMapReaderWriter(inFile,outFile);
>>>> 83
>>>> 84    cout << pipeline_json << endl;  //diagnostic only
>>>> 85    cout << endl;
>>>> 86    G_important_message(_("Running the pipeline ..."));
>>>> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
>>>> 88
>>>> 87    cout << "is valid?  " << pipeline->validate() << endl;
>>>>
>>>> Line 87 throws the exception.
>>>>
>>>>
>>>> Here is the json string being passed to the PipelineExecutor
>>>> constructor:
>>>>
>>>> { "pipeline":[
>>>>    "/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/vecto
>>>> r/v.in.pdal/testFiles/100-points.las",
>>>> {
>>>>    "type":"writers.PdalVectorMapWriter",
>>>>    "filename":"100-points"
>>>> }
>>>>  ]
>>>> }
>>>>
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>
>>>
>>>
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>>
>>
>>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170711/319fad35/attachment-0001.html>

From andrew.bell.ia at gmail.com  Tue Jul 11 12:17:05 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 11 Jul 2017 15:17:05 -0400
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CAPRzK5bS6owZbqNcZHGG-US=9xn1mBmuQXtz4FHW_uDKc2A-Eg@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
 <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
 <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>
 <CAPRzK5bS6owZbqNcZHGG-US=9xn1mBmuQXtz4FHW_uDKc2A-Eg@mail.gmail.com>
Message-ID: <CACJ51z2WdkDUU526WdYxgSyJK5_fBo=xzy9gLS-qt27MhTgSow@mail.gmail.com>

This might be helpful:

https://www.pdal.io/development/overview.html

More concise are the tests.  Here is an example from the LAS writer:

TEST(LasWriterTest, srs)
> {
>     Options readerOps;
>     readerOps.add("filename", Support::datapath("las/utm15.las"));
>     LasReader reader;
>     reader.setOptions(readerOps);
>     Options writerOps;
>     writerOps.add("filename", Support::temppath("out.las"));
>     LasWriter writer;
>     writer.setInput(reader);
>     writer.setOptions(writerOps);
>     PointTable table;
>     writer.prepare(table);
>     writer.execute(table);
>     LasTester tester;
>     SpatialReference srs = tester.srs(writer);
>     EXPECT_EQ(srs, SpatialReference("EPSG:26915"));
> }


This code reads data from the input file "utm15.las" and writes it to
"out.las".  Since you've written a writer, PdalVectorMapWriter, your
similar code might look like:

int main()
{

    Options readerOps;
    readerOps.add("filename", Support::datapath("las/utm15.las"));
    LasReader reader;
    reader.setOptions(readerOps);

    Options writerOps;
    writerOps.add("filename", Support::temppath("out.las"));
    PdalVectorMapWriter writer;
    writer.setInput(reader);  // This essentially creates a pipeline from
reader -> writer.
    writer.setOptions(writerOps);

    PointTable table;
    writer.prepare(table);
    writer.execute(table);  // Executing the terminal stage runs the
pipeline.

    return 0;
}

When you compile, link and run this program, points will be read from
utm15.las and made available to your writer, calling either the run() or
write() function that you've implemented.

There are lots of more complicated things you can do, but this is about the
most simple example.


On Tue, Jul 11, 2017 at 2:37 PM, Paul Schrum <paul.schrum at gmail.com> wrote:

> Andrew,
>
> We have become interested in that second option you mention, "executing
> code programmatically, you can simply add your writer to the end of a
> pipeline and call prepare() and execute()".  Are there examples of how to
> do this?
>
> We looked at PipelineManager and see
> PointTableRef pointTable() const
>
> Is that what we would consume?  If so, how do I get to the point where
> that has data in it and is ready for me to iterate over
>
> - Paul
>
>
> On Tue, Jul 11, 2017 at 11:16 AM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> You need to build your writer (a plugin) into a shared object that can be
>> loaded by the plugin manager.  It needs to be called
>> libpdal_plugin_writer_PdalVectorMapWriter.<your shared library
>> extension>.  The shared library needs to be located somewhere that the
>> plugin manager can find it.  By default, PDAL will look in the following
>> directories for plugins:
>>
>> ".", "./lib", "../lib", "./bin", "../bin"
>>
>> If you're using cmake, you can use the PDAL build to generate the shared
>> library for you.  Here's an example plugin:
>>
>> https://github.com/gadomski/cpd.git
>>
>> Note that you don't have to do ANY of this if you're not using the
>> pipeline/plugin manager to run your writer from a JSON pipeline.  If you're
>> executing code programmatically, you can simply add your writer to the end
>> of a pipeline and call prepare() and execute() on the pipeline that you've
>> created in code.
>>
>>
>> On Tue, Jul 11, 2017 at 10:59 AM, Paul Schrum <paul.schrum at gmail.com>
>> wrote:
>>
>>> Thank you Andrew.
>>>
>>> In the cpp file containing the class, I have the following lines:
>>>
>>>   static PluginInfo const s_info = PluginInfo(
>>>     "writers.PdalVectorMapWriter",
>>>     "Custom Writer to write a GRASS Vector Map",
>>>     "http://no/documentation/yet" );
>>>
>>>   CREATE_SHARED_PLUGIN(1, 0, PdalVectorMapWriter, Writer, s_info);
>>>
>>> So would the only other thing I need to do be to tell pdal where to find
>>> the class?  I don't have to instantiate the class and pass it the instance?
>>>
>>> The class lives in my GRASS executable, v.in.pdal.  How do I tell pdal
>>> to append PDAL_DRIVER_PATH with v.in.pdal's path, and is that sufficient?
>>>
>>> I see in https://github.com/PDAL/PDAL/tree/master/plugins that these
>>> are built using CMake.  But GRASS uses make, so I don't know how to make
>>> these work together.  Is it not possible for me simply to pass an instance
>>> of my class to some kind of pdal->registerPlugIn() function or something
>>> similar which happens at runtime?
>>>
>>> - Paul
>>>
>>>
>>> On Mon, Jul 10, 2017 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
>>> wrote:
>>>
>>>> You need to build your writer as a shared plugin and make sure that the
>>>> dll/so that you create is in a folder where the plugin manager will look
>>>> for it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing
>>>> plugins in the "plutgins" subdirectory of pdal.  Let me know if you need
>>>> more help.
>>>>
>>>> On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com>
>>>> wrote:
>>>>
>>>>> I am developing a custom PDAL writer for my GSoC project. (Link
>>>>> <https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
>>>>> Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.
>>>>> The module compiles, but it is an intermediate state since I am in the
>>>>> process of developing it.
>>>>>
>>>>> I have the custom writer, PdalVectorMapWriter,  inheriting from writer
>>>>> and it compiles okay.  Currently all functions just print out their own
>>>>> name and return.
>>>>>
>>>>> In main.cpp I create the pipeline json string and create a
>>>>> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
>>>>> exception stating
>>>>>
>>>>> terminate called after throwing an instance of 'pdal::pdal_error'
>>>>>   what():  Couldn't create writer stage of type
>>>>> 'writers.PdalVectorMapWriter'.
>>>>>
>>>>> So I am thinking that I need somehow to inform Pdal about an instance
>>>>> of the class.  But as I go over the Pdal documentation, I do not see how to
>>>>> do that.  Can someone help me understand what I need to do?
>>>>>
>>>>> - Paul
>>>>>
>>>>> Here is a key code snippet:
>>>>> 81    std::string pipeline_json =
>>>>> 82            pipelineJson::basicVectorMapRe
>>>>> aderWriter(inFile,outFile);
>>>>> 83
>>>>> 84    cout << pipeline_json << endl;  //diagnostic only
>>>>> 85    cout << endl;
>>>>> 86    G_important_message(_("Running the pipeline ..."));
>>>>> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
>>>>> 88
>>>>> 87    cout << "is valid?  " << pipeline->validate() << endl;
>>>>>
>>>>> Line 87 throws the exception.
>>>>>
>>>>>
>>>>> Here is the json string being passed to the PipelineExecutor
>>>>> constructor:
>>>>>
>>>>> { "pipeline":[
>>>>>    "/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/vecto
>>>>> r/v.in.pdal/testFiles/100-points.las",
>>>>> {
>>>>>    "type":"writers.PdalVectorMapWriter",
>>>>>    "filename":"100-points"
>>>>> }
>>>>>  ]
>>>>> }
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> pdal mailing list
>>>>> pdal at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>>
>>>>
>>>>
>>>>
>>>> --
>>>> Andrew Bell
>>>> andrew.bell.ia at gmail.com
>>>>
>>>
>>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170711/99a85995/attachment.html>

From paul.schrum at gmail.com  Tue Jul 11 16:38:23 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Tue, 11 Jul 2017 19:38:23 -0400
Subject: [pdal] How to invoke my custom writer?
In-Reply-To: <CACJ51z2WdkDUU526WdYxgSyJK5_fBo=xzy9gLS-qt27MhTgSow@mail.gmail.com>
References: <CAPRzK5bqxhzXU9beyu7ju-tG3pSGLJHW1k=Jg2FNwwamDccMLQ@mail.gmail.com>
 <CACJ51z0k_jOtgnCsV0CrS1OziSgYXFdGyQ8rYQvTKNQ+FUrUAw@mail.gmail.com>
 <CAPRzK5ZrZxge1oJ4VVafSWj-ep2EyRSxXOCmjCUik4frBZrdSw@mail.gmail.com>
 <CACJ51z3LmkEvyN=BJ1tsEzKdm8KpC+=emZ8n5v6xzvpAPu3WYA@mail.gmail.com>
 <CAPRzK5bS6owZbqNcZHGG-US=9xn1mBmuQXtz4FHW_uDKc2A-Eg@mail.gmail.com>
 <CACJ51z2WdkDUU526WdYxgSyJK5_fBo=xzy9gLS-qt27MhTgSow@mail.gmail.com>
Message-ID: <CAPRzK5aGWBaFsuRmFWi10uAkHQRyxqmBaG_LkaFTMobSY3B5Gg@mail.gmail.com>

Thank you so much Andrew for your help.

In discussion with my mentor (Vashek), we decided to try to read the Point
View after executing a pipeline with no Writer stage.  This succeeds, so we
are proceeding with this direction.  However, your code is still very
valuable in that it helps me understand how things work behind the scenes a
little better.

- Paul




On Tue, Jul 11, 2017 at 3:17 PM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> This might be helpful:
>
> https://www.pdal.io/development/overview.html
>
> More concise are the tests.  Here is an example from the LAS writer:
>
> TEST(LasWriterTest, srs)
>> {
>>     Options readerOps;
>>     readerOps.add("filename", Support::datapath("las/utm15.las"));
>>     LasReader reader;
>>     reader.setOptions(readerOps);
>>     Options writerOps;
>>     writerOps.add("filename", Support::temppath("out.las"));
>>     LasWriter writer;
>>     writer.setInput(reader);
>>     writer.setOptions(writerOps);
>>     PointTable table;
>>     writer.prepare(table);
>>     writer.execute(table);
>>     LasTester tester;
>>     SpatialReference srs = tester.srs(writer);
>>     EXPECT_EQ(srs, SpatialReference("EPSG:26915"));
>> }
>
>
> This code reads data from the input file "utm15.las" and writes it to
> "out.las".  Since you've written a writer, PdalVectorMapWriter, your
> similar code might look like:
>
> int main()
> {
>
>     Options readerOps;
>     readerOps.add("filename", Support::datapath("las/utm15.las"));
>     LasReader reader;
>     reader.setOptions(readerOps);
>
>     Options writerOps;
>     writerOps.add("filename", Support::temppath("out.las"));
>     PdalVectorMapWriter writer;
>     writer.setInput(reader);  // This essentially creates a pipeline from
> reader -> writer.
>     writer.setOptions(writerOps);
>
>     PointTable table;
>     writer.prepare(table);
>     writer.execute(table);  // Executing the terminal stage runs the
> pipeline.
>
>     return 0;
> }
>
> When you compile, link and run this program, points will be read from
> utm15.las and made available to your writer, calling either the run() or
> write() function that you've implemented.
>
> There are lots of more complicated things you can do, but this is about
> the most simple example.
>
>
> On Tue, Jul 11, 2017 at 2:37 PM, Paul Schrum <paul.schrum at gmail.com>
> wrote:
>
>> Andrew,
>>
>> We have become interested in that second option you mention, "executing
>> code programmatically, you can simply add your writer to the end of a
>> pipeline and call prepare() and execute()".  Are there examples of how to
>> do this?
>>
>> We looked at PipelineManager and see
>> PointTableRef pointTable() const
>>
>> Is that what we would consume?  If so, how do I get to the point where
>> that has data in it and is ready for me to iterate over
>>
>> - Paul
>>
>>
>> On Tue, Jul 11, 2017 at 11:16 AM, Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>
>>> You need to build your writer (a plugin) into a shared object that can
>>> be loaded by the plugin manager.  It needs to be called
>>> libpdal_plugin_writer_PdalVectorMapWriter.<your shared library
>>> extension>.  The shared library needs to be located somewhere that the
>>> plugin manager can find it.  By default, PDAL will look in the following
>>> directories for plugins:
>>>
>>> ".", "./lib", "../lib", "./bin", "../bin"
>>>
>>> If you're using cmake, you can use the PDAL build to generate the shared
>>> library for you.  Here's an example plugin:
>>>
>>> https://github.com/gadomski/cpd.git
>>>
>>> Note that you don't have to do ANY of this if you're not using the
>>> pipeline/plugin manager to run your writer from a JSON pipeline.  If you're
>>> executing code programmatically, you can simply add your writer to the end
>>> of a pipeline and call prepare() and execute() on the pipeline that you've
>>> created in code.
>>>
>>>
>>> On Tue, Jul 11, 2017 at 10:59 AM, Paul Schrum <paul.schrum at gmail.com>
>>> wrote:
>>>
>>>> Thank you Andrew.
>>>>
>>>> In the cpp file containing the class, I have the following lines:
>>>>
>>>>   static PluginInfo const s_info = PluginInfo(
>>>>     "writers.PdalVectorMapWriter",
>>>>     "Custom Writer to write a GRASS Vector Map",
>>>>     "http://no/documentation/yet" );
>>>>
>>>>   CREATE_SHARED_PLUGIN(1, 0, PdalVectorMapWriter, Writer, s_info);
>>>>
>>>> So would the only other thing I need to do be to tell pdal where to
>>>> find the class?  I don't have to instantiate the class and pass it the
>>>> instance?
>>>>
>>>> The class lives in my GRASS executable, v.in.pdal.  How do I tell pdal
>>>> to append PDAL_DRIVER_PATH with v.in.pdal's path, and is that sufficient?
>>>>
>>>> I see in https://github.com/PDAL/PDAL/tree/master/plugins that these
>>>> are built using CMake.  But GRASS uses make, so I don't know how to make
>>>> these work together.  Is it not possible for me simply to pass an instance
>>>> of my class to some kind of pdal->registerPlugIn() function or something
>>>> similar which happens at runtime?
>>>>
>>>> - Paul
>>>>
>>>>
>>>> On Mon, Jul 10, 2017 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
>>>> wrote:
>>>>
>>>>> You need to build your writer as a shared plugin and make sure that
>>>>> the dll/so that you create is in a folder where the plugin manager will
>>>>> look for it (or set PDAL_DRIVER_PATH).  Take a look at one of the existing
>>>>> plugins in the "plutgins" subdirectory of pdal.  Let me know if you need
>>>>> more help.
>>>>>
>>>>> On Mon, Jul 10, 2017 at 5:11 PM, Paul Schrum <paul.schrum at gmail.com>
>>>>> wrote:
>>>>>
>>>>>> I am developing a custom PDAL writer for my GSoC project. (Link
>>>>>> <https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>)
>>>>>> Source Code is on github <https://github.com/PaulSchrum/v_in_pdal>.
>>>>>> The module compiles, but it is an intermediate state since I am in the
>>>>>> process of developing it.
>>>>>>
>>>>>> I have the custom writer, PdalVectorMapWriter,  inheriting from
>>>>>> writer and it compiles okay.  Currently all functions just print out their
>>>>>> own name and return.
>>>>>>
>>>>>> In main.cpp I create the pipeline json string and create a
>>>>>> PipelineExecutor with it.  I then call pipeline-> validate.  This throws an
>>>>>> exception stating
>>>>>>
>>>>>> terminate called after throwing an instance of 'pdal::pdal_error'
>>>>>>   what():  Couldn't create writer stage of type
>>>>>> 'writers.PdalVectorMapWriter'.
>>>>>>
>>>>>> So I am thinking that I need somehow to inform Pdal about an instance
>>>>>> of the class.  But as I go over the Pdal documentation, I do not see how to
>>>>>> do that.  Can someone help me understand what I need to do?
>>>>>>
>>>>>> - Paul
>>>>>>
>>>>>> Here is a key code snippet:
>>>>>> 81    std::string pipeline_json =
>>>>>> 82            pipelineJson::basicVectorMapRe
>>>>>> aderWriter(inFile,outFile);
>>>>>> 83
>>>>>> 84    cout << pipeline_json << endl;  //diagnostic only
>>>>>> 85    cout << endl;
>>>>>> 86    G_important_message(_("Running the pipeline ..."));
>>>>>> 87    auto pipeline = new pdal::PipelineExecutor(pipeline_json);
>>>>>> 88
>>>>>> 87    cout << "is valid?  " << pipeline->validate() << endl;
>>>>>>
>>>>>> Line 87 throws the exception.
>>>>>>
>>>>>>
>>>>>> Here is the json string being passed to the PipelineExecutor
>>>>>> constructor:
>>>>>>
>>>>>> { "pipeline":[
>>>>>>    "/home/user/Desktop/ALL/SourceModules/cpp/grass7_trunk/vecto
>>>>>> r/v.in.pdal/testFiles/100-points.las",
>>>>>> {
>>>>>>    "type":"writers.PdalVectorMapWriter",
>>>>>>    "filename":"100-points"
>>>>>> }
>>>>>>  ]
>>>>>> }
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> _______________________________________________
>>>>>> pdal mailing list
>>>>>> pdal at lists.osgeo.org
>>>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>>>
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Andrew Bell
>>>>> andrew.bell.ia at gmail.com
>>>>>
>>>>
>>>>
>>>
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>>
>>
>>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170711/159a1eab/attachment-0001.html>

From paul.schrum at gmail.com  Sat Jul 15 12:47:17 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Sat, 15 Jul 2017 15:47:17 -0400
Subject: [pdal] [SoC] Week 07: Integration Of PDAL into GRASS GIS
Message-ID: <CAPRzK5Y_DFVyNyDhWVwvHwHOAC-1GXkBXQgL8wqP3ebFhov5vg@mail.gmail.com>

*1. What did you get done this week?*
a. Got v.in.pdal to work in its most basic task: Creating a GRASS VectorMap
from a .las file using a pdal filter (which is created in code).  Fulfills
Week 6 Item 2a.  Commit
<https://github.com/PaulSchrum/v.in.pdal/commit/1baefcd51f2e9a0f6e80d9eb0e63caa238e4a398>

d. Renamed the module on github from v_in_pdal to v.in.pdal and followed
through on updating links at the 2017 Accepted Page
<https://wiki.osgeo.org/wiki/Google_Summer_of_Code_2017_Accepted> and
the Project
Wiki
<https://trac.osgeo.org/grass/wiki/GSoC/2017/IntegrationOfPDALintoGRASSGIS>.

c. Started working on r.in.pdal.  Fulfills Week 6 Item 2b (No commit ready
for this.)


*2. What do you plan on doing next week?*
a. Complete the basic functionality of r.in.pdal as a refactor from the
existing r.in.lidar source.

b. Set up and pass unit tests for v.in.pdal and r.in.pdal.  Carried over
from Week 6.

c. Begin work on r3.in.pdal.

*3. Are you blocked on anything?*
Yes.  After setting up r.in.pdal and adding the #include files for Pdal,
make can't find them.  I have a request in with my mentor to help me
troubleshoot this as soon as possible.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170715/f31eb0f6/attachment.html>

From wenzeslaus at gmail.com  Sun Jul 16 14:31:07 2017
From: wenzeslaus at gmail.com (Vaclav Petras)
Date: Sun, 16 Jul 2017 17:31:07 -0400
Subject: [pdal] [SoC] Week 07: Integration Of PDAL into GRASS GIS
In-Reply-To: <CAPRzK5Y_DFVyNyDhWVwvHwHOAC-1GXkBXQgL8wqP3ebFhov5vg@mail.gmail.com>
References: <CAPRzK5Y_DFVyNyDhWVwvHwHOAC-1GXkBXQgL8wqP3ebFhov5vg@mail.gmail.com>
Message-ID: <CABo5uVsJJhFmwiS4HxPC3ZbYmhPsAtgL0imOdNo8ruGZg_a7SA@mail.gmail.com>

On Sat, Jul 15, 2017 at 3:47 PM, Paul Schrum <paul.schrum at gmail.com> wrote:

>
> *3. Are you blocked on anything?*
> Yes.  After setting up r.in.pdal and adding the #include files for Pdal,
> make can't find them.  I have a request in with my mentor to help me
> troubleshoot this as soon as possible.
>
>
Hi Paul, a link to a repository with code would help.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170716/9428c74d/attachment.html>

From paul.schrum at gmail.com  Mon Jul 17 08:57:57 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Mon, 17 Jul 2017 11:57:57 -0400
Subject: [pdal] [SoC] Week 07: Integration Of PDAL into GRASS GIS
In-Reply-To: <CABo5uVsJJhFmwiS4HxPC3ZbYmhPsAtgL0imOdNo8ruGZg_a7SA@mail.gmail.com>
References: <CAPRzK5Y_DFVyNyDhWVwvHwHOAC-1GXkBXQgL8wqP3ebFhov5vg@mail.gmail.com>
 <CABo5uVsJJhFmwiS4HxPC3ZbYmhPsAtgL0imOdNo8ruGZg_a7SA@mail.gmail.com>
Message-ID: <CAPRzK5aWMOdgbqcXZGw8qNK3dC2J4vL9h2H_sJ_FQn9VxFuRPg@mail.gmail.com>

I have set up the repository now on github:

https://github.com/PaulSchrum/r.in.pdal

- Paul


On Sun, Jul 16, 2017 at 5:31 PM, Vaclav Petras <wenzeslaus at gmail.com> wrote:

>
>
> On Sat, Jul 15, 2017 at 3:47 PM, Paul Schrum <paul.schrum at gmail.com>
> wrote:
>
>>
>> *3. Are you blocked on anything?*
>> Yes.  After setting up r.in.pdal and adding the #include files for Pdal,
>> make can't find them.  I have a request in with my mentor to help me
>> troubleshoot this as soon as possible.
>>
>>
> Hi Paul, a link to a repository with code would help.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170717/fb5e2580/attachment.html>

From wenzeslaus at gmail.com  Mon Jul 17 09:25:43 2017
From: wenzeslaus at gmail.com (Vaclav Petras)
Date: Mon, 17 Jul 2017 12:25:43 -0400
Subject: [pdal] [SoC] Week 07: Integration Of PDAL into GRASS GIS
In-Reply-To: <CAPRzK5aWMOdgbqcXZGw8qNK3dC2J4vL9h2H_sJ_FQn9VxFuRPg@mail.gmail.com>
References: <CAPRzK5Y_DFVyNyDhWVwvHwHOAC-1GXkBXQgL8wqP3ebFhov5vg@mail.gmail.com>
 <CABo5uVsJJhFmwiS4HxPC3ZbYmhPsAtgL0imOdNo8ruGZg_a7SA@mail.gmail.com>
 <CAPRzK5aWMOdgbqcXZGw8qNK3dC2J4vL9h2H_sJ_FQn9VxFuRPg@mail.gmail.com>
Message-ID: <CABo5uVv=-w-yDD=E+9RyKZ6SZX+hoRTXJ3PAZ0cjNH=5_sKZ-Q@mail.gmail.com>

On Mon, Jul 17, 2017 at 11:57 AM, Paul Schrum <paul.schrum at gmail.com> wrote:

> I have set up the repository now on github:
>
> https://github.com/PaulSchrum/r.in.pdal
>

The error is:

cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but
not for C
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but
not for C
In file included from .../pdal/StageFactory.hpp:38:0,
                 from main.c:34:
.../pdal/Stage.hpp:37:16: fatal error: list: No such file or directory

You are trying to compile C++ code (specifically the Stage.cpp headers) as
C which results in header `list` not being found (line 37 -> #include
<list> -> list: No such file or directory).

Rename main.c to main.cpp.


>
> - Paul
>
>
> On Sun, Jul 16, 2017 at 5:31 PM, Vaclav Petras <wenzeslaus at gmail.com>
> wrote:
>
>>
>>
>> On Sat, Jul 15, 2017 at 3:47 PM, Paul Schrum <paul.schrum at gmail.com>
>> wrote:
>>
>>>
>>> *3. Are you blocked on anything?*
>>> Yes.  After setting up r.in.pdal and adding the #include files for Pdal,
>>> make can't find them.  I have a request in with my mentor to help me
>>> troubleshoot this as soon as possible.
>>>
>>>
>> Hi Paul, a link to a repository with code would help.
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170717/3c244788/attachment.html>

From paul.schrum at gmail.com  Mon Jul 17 10:03:24 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Mon, 17 Jul 2017 13:03:24 -0400
Subject: [pdal] [SoC] Week 07: Integration Of PDAL into GRASS GIS
In-Reply-To: <CABo5uVv=-w-yDD=E+9RyKZ6SZX+hoRTXJ3PAZ0cjNH=5_sKZ-Q@mail.gmail.com>
References: <CAPRzK5Y_DFVyNyDhWVwvHwHOAC-1GXkBXQgL8wqP3ebFhov5vg@mail.gmail.com>
 <CABo5uVsJJhFmwiS4HxPC3ZbYmhPsAtgL0imOdNo8ruGZg_a7SA@mail.gmail.com>
 <CAPRzK5aWMOdgbqcXZGw8qNK3dC2J4vL9h2H_sJ_FQn9VxFuRPg@mail.gmail.com>
 <CABo5uVv=-w-yDD=E+9RyKZ6SZX+hoRTXJ3PAZ0cjNH=5_sKZ-Q@mail.gmail.com>
Message-ID: <CAPRzK5adM0gyw9HrxeCDNEv1nqb-2pDtK4ZowrM38ZHqzdt+Zg@mail.gmail.com>

Thank you Vashek.  This fixed it.

On Mon, Jul 17, 2017 at 12:25 PM, Vaclav Petras <wenzeslaus at gmail.com>
wrote:

>
>
> On Mon, Jul 17, 2017 at 11:57 AM, Paul Schrum <paul.schrum at gmail.com>
> wrote:
>
>> I have set up the repository now on github:
>>
>> https://github.com/PaulSchrum/r.in.pdal
>>
>
> The error is:
>
> cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but
> not for C
> cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but
> not for C
> In file included from .../pdal/StageFactory.hpp:38:0,
>                  from main.c:34:
> .../pdal/Stage.hpp:37:16: fatal error: list: No such file or directory
>
> You are trying to compile C++ code (specifically the Stage.cpp headers) as
> C which results in header `list` not being found (line 37 -> #include
> <list> -> list: No such file or directory).
>
> Rename main.c to main.cpp.
>
>
>>
>> - Paul
>>
>>
>> On Sun, Jul 16, 2017 at 5:31 PM, Vaclav Petras <wenzeslaus at gmail.com>
>> wrote:
>>
>>>
>>>
>>> On Sat, Jul 15, 2017 at 3:47 PM, Paul Schrum <paul.schrum at gmail.com>
>>> wrote:
>>>
>>>>
>>>> *3. Are you blocked on anything?*
>>>> Yes.  After setting up r.in.pdal and adding the #include files for
>>>> Pdal, make can't find them.  I have a request in with my mentor to help me
>>>> troubleshoot this as soon as possible.
>>>>
>>>>
>>> Hi Paul, a link to a repository with code would help.
>>>
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170717/455016b3/attachment.html>

From jasonbeverage at gmail.com  Mon Jul 17 19:29:40 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Tue, 18 Jul 2017 02:29:40 +0000
Subject: [pdal] Reading and Writing outside of a stage
Message-ID: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>

Hi all,

I'm new to PDAL and I'm currently porting an existing point cloud tookit we
have at Pelican Mapping to use PDAL instead of LASTools and I had a couple
of questions.

Our toolkit is similar to Entwine in that it takes a large number of input
points from LAS/LAZ files and chops them up into tiled LAZ files with the
goal of displaying them in OpenSceneGraph and osgEarth based applications.

Since we're dealing with a huge number of points, I'm making heavy use of
streaming so I can avoid keeping the entire dataset in memory.

For reading, I found the StreamCallbackFilter so I can intercept the points
coming from a stage and process them one by one as I was doing before, so I
think that will work for my case.

For writing however, I'm running into a bit of snag probably due to my lack
of understanding of the streaming API.

We basically have an algorithm that does something like this:

for each point in all the input points:
    // Figure out which output file to write the point to based on it's
location.
    Writer* writer = getWriter(point);
    writer->writePoint(writer);

So we create a bunch of output writers (using LASTools) based on an octree
split, and for each point we determine which writer to write to and write
the incoming point to the appropriate output file.

Is there a simple way to write points interactively to a Writer?  It seems
like if the write functions of Writer were public that it would be fairly
easy to implement something like that.

Thanks!

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/67f76529/attachment.html>

From andrew.bell.ia at gmail.com  Tue Jul 18 07:18:06 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 18 Jul 2017 10:18:06 -0400
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
Message-ID: <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>

On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Hi all,
>
> I'm new to PDAL and I'm currently porting an existing point cloud tookit
> we have at Pelican Mapping to use PDAL instead of LASTools and I had a
> couple of questions.
>
> Our toolkit is similar to Entwine in that it takes a large number of input
> points from LAS/LAZ files and chops them up into tiled LAZ files with the
> goal of displaying them in OpenSceneGraph and osgEarth based applications.
>
> Since we're dealing with a huge number of points, I'm making heavy use of
> streaming so I can avoid keeping the entire dataset in memory.
>
> For reading, I found the StreamCallbackFilter so I can intercept the
> points coming from a stage and process them one by one as I was doing
> before, so I think that will work for my case.
>
> For writing however, I'm running into a bit of snag probably due to my
> lack of understanding of the streaming API.
>
> We basically have an algorithm that does something like this:
>
> for each point in all the input points:
>     // Figure out which output file to write the point to based on it's
> location.
>     Writer* writer = getWriter(point);
>     writer->writePoint(writer);
>
> So we create a bunch of output writers (using LASTools) based on an octree
> split, and for each point we determine which writer to write to and write
> the incoming point to the appropriate output file.
>
> Is there a simple way to write points interactively to a Writer?  It seems
> like if the write functions of Writer were public that it would be fairly
> easy to implement something like that.
>

I'm not sure I understand exactly.  You can create your own stage that
implements processOne() and do anything you like in it.  There is nothing
particularly special about a writer.  It's just a stage.  There's no reason
you can't chain a bunch of StreamCallbackFilters together if that's helpful
-- the first one could do whatever you're doing now, the second one could
do the writing you want to do.  Or they could be combined.

Is part of what you are wanting is to use PDAL's LAS writer instead of
LAStools?

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/33fa5d98/attachment.html>

From jasonbeverage at gmail.com  Tue Jul 18 07:40:45 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Tue, 18 Jul 2017 14:40:45 +0000
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
 <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
Message-ID: <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>

Hey Andrew!

Thanks for getting back to me.  I think part of the issue is that I don't
quite understand how to convert my current cursor based LASTools code to a
streaming Stage based system.

I've attached an image of what I'm trying to do.

Basically I want to have a reader that can stream a bunch of points in,
then a splitter stage that determines which of 9 potential writers to add
the point to based on the location of the point and some other criteria,
but I want to do it all without storing all of the points in memory.

The existing ChipperFilter is similar to what I want to do, but it doesn't
appear to support streaming.  It looks like it does the partitioning in
memory and then returns a PointViewSet with all of the outputs.

Jason



On Tue, Jul 18, 2017 at 10:18 AM Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <jasonbeverage at gmail.com>
> wrote:
>
>> Hi all,
>>
>> I'm new to PDAL and I'm currently porting an existing point cloud tookit
>> we have at Pelican Mapping to use PDAL instead of LASTools and I had a
>> couple of questions.
>>
>> Our toolkit is similar to Entwine in that it takes a large number of
>> input points from LAS/LAZ files and chops them up into tiled LAZ files with
>> the goal of displaying them in OpenSceneGraph and osgEarth based
>> applications.
>>
>> Since we're dealing with a huge number of points, I'm making heavy use of
>> streaming so I can avoid keeping the entire dataset in memory.
>>
>> For reading, I found the StreamCallbackFilter so I can intercept the
>> points coming from a stage and process them one by one as I was doing
>> before, so I think that will work for my case.
>>
>> For writing however, I'm running into a bit of snag probably due to my
>> lack of understanding of the streaming API.
>>
>> We basically have an algorithm that does something like this:
>>
>> for each point in all the input points:
>>     // Figure out which output file to write the point to based on it's
>> location.
>>     Writer* writer = getWriter(point);
>>     writer->writePoint(writer);
>>
>> So we create a bunch of output writers (using LASTools) based on an
>> octree split, and for each point we determine which writer to write to and
>> write the incoming point to the appropriate output file.
>>
>> Is there a simple way to write points interactively to a Writer?  It
>> seems like if the write functions of Writer were public that it would be
>> fairly easy to implement something like that.
>>
>
> I'm not sure I understand exactly.  You can create your own stage that
> implements processOne() and do anything you like in it.  There is nothing
> particularly special about a writer.  It's just a stage.  There's no reason
> you can't chain a bunch of StreamCallbackFilters together if that's helpful
> -- the first one could do whatever you're doing now, the second one could
> do the writing you want to do.  Or they could be combined.
>
> Is part of what you are wanting is to use PDAL's LAS writer instead of
> LAStools?
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/8422bb09/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: splitter.jpg
Type: image/jpeg
Size: 40626 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/8422bb09/attachment-0001.jpg>

From andrew.bell.ia at gmail.com  Tue Jul 18 08:37:34 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 18 Jul 2017 11:37:34 -0400
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
 <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
 <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
Message-ID: <CACJ51z1iMCzxU4VL=JM=OUifZh+CgzandkFYLuuK6n0WsNRCAQ@mail.gmail.com>

Perhaps it would help if you posted some code.

I think I understand what you're generally trying to achieve.

The chipper filter can't use streaming mode because it requires sorting of
the points in order to determine cells.  The splitter filter is a more
traditional tiling filter, and it could, theoretically, use streaming mode
(since points are binned by nothing than their location).  The issue is
that there is no "routing" in the pipeline when in streaming mode.  There
is no way to say "send this point on to stage X".  Or any generic way to
have a downstream stage X realize that the point needs to be processed in
such and such a way.  Perhaps we could think about doing something like
this, but it's not generally doable right now.

I'm not sure what your splitter is doing, but if it were to tag the points
with some sort of cell ID, you could make a single writer stage accepts
points from your splitter that essentially multiplexes the points based on
that cell ID.  Or you could have your splitter simply do the writing based
on the cell for each point.


On Tue, Jul 18, 2017 at 10:40 AM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Hey Andrew!
>
> Thanks for getting back to me.  I think part of the issue is that I don't
> quite understand how to convert my current cursor based LASTools code to a
> streaming Stage based system.
>
> I've attached an image of what I'm trying to do.
>
> Basically I want to have a reader that can stream a bunch of points in,
> then a splitter stage that determines which of 9 potential writers to add
> the point to based on the location of the point and some other criteria,
> but I want to do it all without storing all of the points in memory.
>
> The existing ChipperFilter is similar to what I want to do, but it doesn't
> appear to support streaming.  It looks like it does the partitioning in
> memory and then returns a PointViewSet with all of the outputs.
>
> Jason
>
>
>
> On Tue, Jul 18, 2017 at 10:18 AM Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <jasonbeverage at gmail.com
>> > wrote:
>>
>>> Hi all,
>>>
>>> I'm new to PDAL and I'm currently porting an existing point cloud tookit
>>> we have at Pelican Mapping to use PDAL instead of LASTools and I had a
>>> couple of questions.
>>>
>>> Our toolkit is similar to Entwine in that it takes a large number of
>>> input points from LAS/LAZ files and chops them up into tiled LAZ files with
>>> the goal of displaying them in OpenSceneGraph and osgEarth based
>>> applications.
>>>
>>> Since we're dealing with a huge number of points, I'm making heavy use
>>> of streaming so I can avoid keeping the entire dataset in memory.
>>>
>>> For reading, I found the StreamCallbackFilter so I can intercept the
>>> points coming from a stage and process them one by one as I was doing
>>> before, so I think that will work for my case.
>>>
>>> For writing however, I'm running into a bit of snag probably due to my
>>> lack of understanding of the streaming API.
>>>
>>> We basically have an algorithm that does something like this:
>>>
>>> for each point in all the input points:
>>>     // Figure out which output file to write the point to based on it's
>>> location.
>>>     Writer* writer = getWriter(point);
>>>     writer->writePoint(writer);
>>>
>>> So we create a bunch of output writers (using LASTools) based on an
>>> octree split, and for each point we determine which writer to write to and
>>> write the incoming point to the appropriate output file.
>>>
>>> Is there a simple way to write points interactively to a Writer?  It
>>> seems like if the write functions of Writer were public that it would be
>>> fairly easy to implement something like that.
>>>
>>
>> I'm not sure I understand exactly.  You can create your own stage that
>> implements processOne() and do anything you like in it.  There is nothing
>> particularly special about a writer.  It's just a stage.  There's no reason
>> you can't chain a bunch of StreamCallbackFilters together if that's helpful
>> -- the first one could do whatever you're doing now, the second one could
>> do the writing you want to do.  Or they could be combined.
>>
>> Is part of what you are wanting is to use PDAL's LAS writer instead of
>> LAStools?
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/3f6725dc/attachment.html>

From jasonbeverage at gmail.com  Tue Jul 18 08:46:28 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Tue, 18 Jul 2017 15:46:28 +0000
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
 <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
 <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
Message-ID: <CAMcxSMv12Zqhf5g+uP4ZMTh-B=iwOa3B1JyUNSAN2gdxoLzVZA@mail.gmail.com>

Hey Andrew,

That's exactly what I want to do, and I think it could work, but some of
the methods I want to get to are private in PDAL so I can't get to them.
Basically something this is what I'm after:

class SplitWriter : public Writer
{
public:
SplitWriter()
{
}

private:

Writer* getWriter(PointRef& point)
{
// Return the correct writer for the point based on location.
}

virtual bool processOne(PointRef& point)
{
// Get the appropriate writer.
Writer* writer = getWriter(point);
writer->processOne(point);
return true;
}
};

My process one function is called, but I can't forward the point to an
internal writer b/c processOne is private.

Your idea about either tagging the points or having the splitter do the
writing itself is fine, but I don't see a way to use a class like the
LASWriter directly since almost every method is private.

Just making those protected or public would actually probably solve the
issue.

Jason


On Tue, Jul 18, 2017 at 10:40 AM Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Hey Andrew!
>
> Thanks for getting back to me.  I think part of the issue is that I don't
> quite understand how to convert my current cursor based LASTools code to a
> streaming Stage based system.
>
> I've attached an image of what I'm trying to do.
>
> Basically I want to have a reader that can stream a bunch of points in,
> then a splitter stage that determines which of 9 potential writers to add
> the point to based on the location of the point and some other criteria,
> but I want to do it all without storing all of the points in memory.
>
> The existing ChipperFilter is similar to what I want to do, but it doesn't
> appear to support streaming.  It looks like it does the partitioning in
> memory and then returns a PointViewSet with all of the outputs.
>
> Jason
>
>
>
> On Tue, Jul 18, 2017 at 10:18 AM Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <jasonbeverage at gmail.com
>> > wrote:
>>
>>> Hi all,
>>>
>>> I'm new to PDAL and I'm currently porting an existing point cloud tookit
>>> we have at Pelican Mapping to use PDAL instead of LASTools and I had a
>>> couple of questions.
>>>
>>> Our toolkit is similar to Entwine in that it takes a large number of
>>> input points from LAS/LAZ files and chops them up into tiled LAZ files with
>>> the goal of displaying them in OpenSceneGraph and osgEarth based
>>> applications.
>>>
>>> Since we're dealing with a huge number of points, I'm making heavy use
>>> of streaming so I can avoid keeping the entire dataset in memory.
>>>
>>> For reading, I found the StreamCallbackFilter so I can intercept the
>>> points coming from a stage and process them one by one as I was doing
>>> before, so I think that will work for my case.
>>>
>>> For writing however, I'm running into a bit of snag probably due to my
>>> lack of understanding of the streaming API.
>>>
>>> We basically have an algorithm that does something like this:
>>>
>>> for each point in all the input points:
>>>     // Figure out which output file to write the point to based on it's
>>> location.
>>>     Writer* writer = getWriter(point);
>>>     writer->writePoint(writer);
>>>
>>> So we create a bunch of output writers (using LASTools) based on an
>>> octree split, and for each point we determine which writer to write to and
>>> write the incoming point to the appropriate output file.
>>>
>>> Is there a simple way to write points interactively to a Writer?  It
>>> seems like if the write functions of Writer were public that it would be
>>> fairly easy to implement something like that.
>>>
>>
>> I'm not sure I understand exactly.  You can create your own stage that
>> implements processOne() and do anything you like in it.  There is nothing
>> particularly special about a writer.  It's just a stage.  There's no reason
>> you can't chain a bunch of StreamCallbackFilters together if that's helpful
>> -- the first one could do whatever you're doing now, the second one could
>> do the writing you want to do.  Or they could be combined.
>>
>> Is part of what you are wanting is to use PDAL's LAS writer instead of
>> LAStools?
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/4cd2a5bf/attachment.html>

From andrew.bell.ia at gmail.com  Tue Jul 18 09:54:15 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 18 Jul 2017 12:54:15 -0400
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CAMcxSMv12Zqhf5g+uP4ZMTh-B=iwOa3B1JyUNSAN2gdxoLzVZA@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
 <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
 <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
 <CAMcxSMv12Zqhf5g+uP4ZMTh-B=iwOa3B1JyUNSAN2gdxoLzVZA@mail.gmail.com>
Message-ID: <CACJ51z1dAiVw=HwiXddB1mo+WRGyAwwZZbZ57bbWPuXaYOpO4Q@mail.gmail.com>

If you're using LAStools to write, then it doesn't seem like it really
makes any difference.  Your code can contain/invoke any function you want.
You're also welcome to modify the PDAL code to support your needs, but I'm
not sure that we'd integrate it into the distribution without some
discussion.

The functions are private because the calls necessary to ensure proper
functioning can be complicated and disallowing direct access eliminates
problems.  You need to invoke a bunch of private virtuals in order to make
things work, not just processOne().  It's also all that's necessary to
support the standard workflow.  Private virtuals provide a clear
implementation interface that would be broken if changed.

I suppose we could have a #define for the private virtual functions for
people who want to do what you're asking for.  I'm not sure I love it, but
perhaps I don't hate it, either.  I'm thinking about it.

This has come up before, and I think the model that was desired was the
same as yours.  I'd like to find a generic way to deal with it, but I don't
think that means making all functions public.  Writers can already be kind
of complicated, and I'm not sure how best to deal with it.  It's hard to
come up with a solution until you understand the problem.  Here are a
couple of things to think about:

- The current LAS writer can create multiple output files.  Do we want to
feed points to a single (complicated) writer and have it multiplex points
or do we want to attach multiple writers to an input stage?

- If you're creating multiple downstream stages, at what point do they get
created?  Are they created dynamically?  When?

- How do you decide how to route points to downstream stages?  Is there
code already in place for non-streaming mode that might simplify this?

Anyway, your question is a good one, but I'm not sure that I have an answer
that I love right now.  If you want to get going, just modify the PDAL code
to make the functions you need public.  Or better yet, make your own class
a friend of LasWriter (or even Stage) and then invoke whatever private
functions you please from the class you create.  That's only a single line
change to the existing PDAL code.

Hope that helps for now,


On Tue, Jul 18, 2017 at 11:46 AM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Hey Andrew,
>
> That's exactly what I want to do, and I think it could work, but some of
> the methods I want to get to are private in PDAL so I can't get to them.
> Basically something this is what I'm after:
>
> class SplitWriter : public Writer
> {
> public:
> SplitWriter()
> {
> }
>
> private:
>
> Writer* getWriter(PointRef& point)
> {
> // Return the correct writer for the point based on location.
> }
>
> virtual bool processOne(PointRef& point)
> {
> // Get the appropriate writer.
> Writer* writer = getWriter(point);
> writer->processOne(point);
> return true;
> }
> };
>
> My process one function is called, but I can't forward the point to an
> internal writer b/c processOne is private.
>
> Your idea about either tagging the points or having the splitter do the
> writing itself is fine, but I don't see a way to use a class like the
> LASWriter directly since almost every method is private.
>
> Just making those protected or public would actually probably solve the
> issue.
>
> Jason
>
>
> On Tue, Jul 18, 2017 at 10:40 AM Jason Beverage <jasonbeverage at gmail.com>
> wrote:
>
>> Hey Andrew!
>>
>> Thanks for getting back to me.  I think part of the issue is that I don't
>> quite understand how to convert my current cursor based LASTools code to a
>> streaming Stage based system.
>>
>> I've attached an image of what I'm trying to do.
>>
>> Basically I want to have a reader that can stream a bunch of points in,
>> then a splitter stage that determines which of 9 potential writers to add
>> the point to based on the location of the point and some other criteria,
>> but I want to do it all without storing all of the points in memory.
>>
>> The existing ChipperFilter is similar to what I want to do, but it
>> doesn't appear to support streaming.  It looks like it does the
>> partitioning in memory and then returns a PointViewSet with all of the
>> outputs.
>>
>> Jason
>>
>>
>>
>> On Tue, Jul 18, 2017 at 10:18 AM Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>
>>> On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <
>>> jasonbeverage at gmail.com> wrote:
>>>
>>>> Hi all,
>>>>
>>>> I'm new to PDAL and I'm currently porting an existing point cloud
>>>> tookit we have at Pelican Mapping to use PDAL instead of LASTools and I had
>>>> a couple of questions.
>>>>
>>>> Our toolkit is similar to Entwine in that it takes a large number of
>>>> input points from LAS/LAZ files and chops them up into tiled LAZ files with
>>>> the goal of displaying them in OpenSceneGraph and osgEarth based
>>>> applications.
>>>>
>>>> Since we're dealing with a huge number of points, I'm making heavy use
>>>> of streaming so I can avoid keeping the entire dataset in memory.
>>>>
>>>> For reading, I found the StreamCallbackFilter so I can intercept the
>>>> points coming from a stage and process them one by one as I was doing
>>>> before, so I think that will work for my case.
>>>>
>>>> For writing however, I'm running into a bit of snag probably due to my
>>>> lack of understanding of the streaming API.
>>>>
>>>> We basically have an algorithm that does something like this:
>>>>
>>>> for each point in all the input points:
>>>>     // Figure out which output file to write the point to based on it's
>>>> location.
>>>>     Writer* writer = getWriter(point);
>>>>     writer->writePoint(writer);
>>>>
>>>> So we create a bunch of output writers (using LASTools) based on an
>>>> octree split, and for each point we determine which writer to write to and
>>>> write the incoming point to the appropriate output file.
>>>>
>>>> Is there a simple way to write points interactively to a Writer?  It
>>>> seems like if the write functions of Writer were public that it would be
>>>> fairly easy to implement something like that.
>>>>
>>>
>>> I'm not sure I understand exactly.  You can create your own stage that
>>> implements processOne() and do anything you like in it.  There is nothing
>>> particularly special about a writer.  It's just a stage.  There's no reason
>>> you can't chain a bunch of StreamCallbackFilters together if that's helpful
>>> -- the first one could do whatever you're doing now, the second one could
>>> do the writing you want to do.  Or they could be combined.
>>>
>>> Is part of what you are wanting is to use PDAL's LAS writer instead of
>>> LAStools?
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>>
>>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/30a687fc/attachment-0001.html>

From jasonbeverage at gmail.com  Tue Jul 18 09:59:55 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Tue, 18 Jul 2017 16:59:55 +0000
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CACJ51z1dAiVw=HwiXddB1mo+WRGyAwwZZbZ57bbWPuXaYOpO4Q@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
 <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
 <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
 <CAMcxSMv12Zqhf5g+uP4ZMTh-B=iwOa3B1JyUNSAN2gdxoLzVZA@mail.gmail.com>
 <CACJ51z1dAiVw=HwiXddB1mo+WRGyAwwZZbZ57bbWPuXaYOpO4Q@mail.gmail.com>
Message-ID: <CAMcxSMve_t+sRexqw=5wRgy4iHZQ+X78SDri=gY0rZ=Fu_b0dw@mail.gmail.com>

Hey Andrew,

Thanks for the feedback.  I'm not sure I have a great answer to the
question either :)  My hope was just to completely replace my usage of
LASTools with PDAL, but I'll have to do something different to support
streamed writing.

I also looked through the Entwine code a little bit to see if I could get
some insight into how you're handing processing large datasets there, but I
didn't dig deep enough yet :)

Thanks again for the help, I'll figure out something.

Jason

On Tue, Jul 18, 2017 at 12:54 PM Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> If you're using LAStools to write, then it doesn't seem like it really
> makes any difference.  Your code can contain/invoke any function you want.
> You're also welcome to modify the PDAL code to support your needs, but I'm
> not sure that we'd integrate it into the distribution without some
> discussion.
>
> The functions are private because the calls necessary to ensure proper
> functioning can be complicated and disallowing direct access eliminates
> problems.  You need to invoke a bunch of private virtuals in order to make
> things work, not just processOne().  It's also all that's necessary to
> support the standard workflow.  Private virtuals provide a clear
> implementation interface that would be broken if changed.
>
> I suppose we could have a #define for the private virtual functions for
> people who want to do what you're asking for.  I'm not sure I love it, but
> perhaps I don't hate it, either.  I'm thinking about it.
>
> This has come up before, and I think the model that was desired was the
> same as yours.  I'd like to find a generic way to deal with it, but I don't
> think that means making all functions public.  Writers can already be kind
> of complicated, and I'm not sure how best to deal with it.  It's hard to
> come up with a solution until you understand the problem.  Here are a
> couple of things to think about:
>
> - The current LAS writer can create multiple output files.  Do we want to
> feed points to a single (complicated) writer and have it multiplex points
> or do we want to attach multiple writers to an input stage?
>
> - If you're creating multiple downstream stages, at what point do they get
> created?  Are they created dynamically?  When?
>
> - How do you decide how to route points to downstream stages?  Is there
> code already in place for non-streaming mode that might simplify this?
>
> Anyway, your question is a good one, but I'm not sure that I have an
> answer that I love right now.  If you want to get going, just modify the
> PDAL code to make the functions you need public.  Or better yet, make your
> own class a friend of LasWriter (or even Stage) and then invoke whatever
> private functions you please from the class you create.  That's only a
> single line change to the existing PDAL code.
>
> Hope that helps for now,
>
>
> On Tue, Jul 18, 2017 at 11:46 AM, Jason Beverage <jasonbeverage at gmail.com>
> wrote:
>
>> Hey Andrew,
>>
>> That's exactly what I want to do, and I think it could work, but some of
>> the methods I want to get to are private in PDAL so I can't get to them.
>> Basically something this is what I'm after:
>>
>> class SplitWriter : public Writer
>> {
>> public:
>> SplitWriter()
>> {
>> }
>>
>> private:
>>
>> Writer* getWriter(PointRef& point)
>> {
>> // Return the correct writer for the point based on location.
>> }
>>
>> virtual bool processOne(PointRef& point)
>> {
>> // Get the appropriate writer.
>> Writer* writer = getWriter(point);
>> writer->processOne(point);
>> return true;
>> }
>> };
>>
>> My process one function is called, but I can't forward the point to an
>> internal writer b/c processOne is private.
>>
>> Your idea about either tagging the points or having the splitter do the
>> writing itself is fine, but I don't see a way to use a class like the
>> LASWriter directly since almost every method is private.
>>
>> Just making those protected or public would actually probably solve the
>> issue.
>>
>> Jason
>>
>>
>> On Tue, Jul 18, 2017 at 10:40 AM Jason Beverage <jasonbeverage at gmail.com>
>> wrote:
>>
>>> Hey Andrew!
>>>
>>> Thanks for getting back to me.  I think part of the issue is that I
>>> don't quite understand how to convert my current cursor based LASTools code
>>> to a streaming Stage based system.
>>>
>>> I've attached an image of what I'm trying to do.
>>>
>>> Basically I want to have a reader that can stream a bunch of points in,
>>> then a splitter stage that determines which of 9 potential writers to add
>>> the point to based on the location of the point and some other criteria,
>>> but I want to do it all without storing all of the points in memory.
>>>
>>> The existing ChipperFilter is similar to what I want to do, but it
>>> doesn't appear to support streaming.  It looks like it does the
>>> partitioning in memory and then returns a PointViewSet with all of the
>>> outputs.
>>>
>>> Jason
>>>
>>>
>>>
>>> On Tue, Jul 18, 2017 at 10:18 AM Andrew Bell <andrew.bell.ia at gmail.com>
>>> wrote:
>>>
>>>> On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <
>>>> jasonbeverage at gmail.com> wrote:
>>>>
>>>>> Hi all,
>>>>>
>>>>> I'm new to PDAL and I'm currently porting an existing point cloud
>>>>> tookit we have at Pelican Mapping to use PDAL instead of LASTools and I had
>>>>> a couple of questions.
>>>>>
>>>>> Our toolkit is similar to Entwine in that it takes a large number of
>>>>> input points from LAS/LAZ files and chops them up into tiled LAZ files with
>>>>> the goal of displaying them in OpenSceneGraph and osgEarth based
>>>>> applications.
>>>>>
>>>>> Since we're dealing with a huge number of points, I'm making heavy use
>>>>> of streaming so I can avoid keeping the entire dataset in memory.
>>>>>
>>>>> For reading, I found the StreamCallbackFilter so I can intercept the
>>>>> points coming from a stage and process them one by one as I was doing
>>>>> before, so I think that will work for my case.
>>>>>
>>>>> For writing however, I'm running into a bit of snag probably due to my
>>>>> lack of understanding of the streaming API.
>>>>>
>>>>> We basically have an algorithm that does something like this:
>>>>>
>>>>> for each point in all the input points:
>>>>>     // Figure out which output file to write the point to based on
>>>>> it's location.
>>>>>     Writer* writer = getWriter(point);
>>>>>     writer->writePoint(writer);
>>>>>
>>>>> So we create a bunch of output writers (using LASTools) based on an
>>>>> octree split, and for each point we determine which writer to write to and
>>>>> write the incoming point to the appropriate output file.
>>>>>
>>>>> Is there a simple way to write points interactively to a Writer?  It
>>>>> seems like if the write functions of Writer were public that it would be
>>>>> fairly easy to implement something like that.
>>>>>
>>>>
>>>> I'm not sure I understand exactly.  You can create your own stage that
>>>> implements processOne() and do anything you like in it.  There is nothing
>>>> particularly special about a writer.  It's just a stage.  There's no reason
>>>> you can't chain a bunch of StreamCallbackFilters together if that's helpful
>>>> -- the first one could do whatever you're doing now, the second one could
>>>> do the writing you want to do.  Or they could be combined.
>>>>
>>>> Is part of what you are wanting is to use PDAL's LAS writer instead of
>>>> LAStools?
>>>>
>>>> --
>>>> Andrew Bell
>>>> andrew.bell.ia at gmail.com
>>>>
>>>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/8ea4fee8/attachment.html>

From andrew.bell.ia at gmail.com  Tue Jul 18 10:40:38 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 18 Jul 2017 13:40:38 -0400
Subject: [pdal] Reading and Writing outside of a stage
In-Reply-To: <CAMcxSMve_t+sRexqw=5wRgy4iHZQ+X78SDri=gY0rZ=Fu_b0dw@mail.gmail.com>
References: <CAMcxSMv_7ppoqxVRJqSi0E8MJozDs70=bQpm4yFXhnMJGjcvNA@mail.gmail.com>
 <CACJ51z1wgTaHELLy9h71C2yJHHYzBzw6LRs99uVRfPux+-KQzA@mail.gmail.com>
 <CAMcxSMu7Kgu=i8w2AcrcvU994X4w0ba5CAA85brhMeC6EZsuiw@mail.gmail.com>
 <CAMcxSMv12Zqhf5g+uP4ZMTh-B=iwOa3B1JyUNSAN2gdxoLzVZA@mail.gmail.com>
 <CACJ51z1dAiVw=HwiXddB1mo+WRGyAwwZZbZ57bbWPuXaYOpO4Q@mail.gmail.com>
 <CAMcxSMve_t+sRexqw=5wRgy4iHZQ+X78SDri=gY0rZ=Fu_b0dw@mail.gmail.com>
Message-ID: <CACJ51z2gt5-fouP-fL21D2+x=b+OuGTCzG=rY+r4Czw5iyN=JA@mail.gmail.com>

I've opened a ticket for this issue:
https://github.com/PDAL/PDAL/issues/1621

On Tue, Jul 18, 2017 at 12:59 PM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Hey Andrew,
>
> Thanks for the feedback.  I'm not sure I have a great answer to the
> question either :)  My hope was just to completely replace my usage of
> LASTools with PDAL, but I'll have to do something different to support
> streamed writing.
>
> I also looked through the Entwine code a little bit to see if I could get
> some insight into how you're handing processing large datasets there, but I
> didn't dig deep enough yet :)
>
> Thanks again for the help, I'll figure out something.
>
> Jason
>
> On Tue, Jul 18, 2017 at 12:54 PM Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> If you're using LAStools to write, then it doesn't seem like it really
>> makes any difference.  Your code can contain/invoke any function you want.
>> You're also welcome to modify the PDAL code to support your needs, but I'm
>> not sure that we'd integrate it into the distribution without some
>> discussion.
>>
>> The functions are private because the calls necessary to ensure proper
>> functioning can be complicated and disallowing direct access eliminates
>> problems.  You need to invoke a bunch of private virtuals in order to make
>> things work, not just processOne().  It's also all that's necessary to
>> support the standard workflow.  Private virtuals provide a clear
>> implementation interface that would be broken if changed.
>>
>> I suppose we could have a #define for the private virtual functions for
>> people who want to do what you're asking for.  I'm not sure I love it, but
>> perhaps I don't hate it, either.  I'm thinking about it.
>>
>> This has come up before, and I think the model that was desired was the
>> same as yours.  I'd like to find a generic way to deal with it, but I don't
>> think that means making all functions public.  Writers can already be kind
>> of complicated, and I'm not sure how best to deal with it.  It's hard to
>> come up with a solution until you understand the problem.  Here are a
>> couple of things to think about:
>>
>> - The current LAS writer can create multiple output files.  Do we want to
>> feed points to a single (complicated) writer and have it multiplex points
>> or do we want to attach multiple writers to an input stage?
>>
>> - If you're creating multiple downstream stages, at what point do they
>> get created?  Are they created dynamically?  When?
>>
>> - How do you decide how to route points to downstream stages?  Is there
>> code already in place for non-streaming mode that might simplify this?
>>
>> Anyway, your question is a good one, but I'm not sure that I have an
>> answer that I love right now.  If you want to get going, just modify the
>> PDAL code to make the functions you need public.  Or better yet, make your
>> own class a friend of LasWriter (or even Stage) and then invoke whatever
>> private functions you please from the class you create.  That's only a
>> single line change to the existing PDAL code.
>>
>> Hope that helps for now,
>>
>>
>> On Tue, Jul 18, 2017 at 11:46 AM, Jason Beverage <jasonbeverage at gmail.com
>> > wrote:
>>
>>> Hey Andrew,
>>>
>>> That's exactly what I want to do, and I think it could work, but some of
>>> the methods I want to get to are private in PDAL so I can't get to them.
>>> Basically something this is what I'm after:
>>>
>>> class SplitWriter : public Writer
>>> {
>>> public:
>>> SplitWriter()
>>> {
>>> }
>>>
>>> private:
>>>
>>> Writer* getWriter(PointRef& point)
>>> {
>>> // Return the correct writer for the point based on location.
>>> }
>>>
>>> virtual bool processOne(PointRef& point)
>>> {
>>> // Get the appropriate writer.
>>> Writer* writer = getWriter(point);
>>> writer->processOne(point);
>>> return true;
>>> }
>>> };
>>>
>>> My process one function is called, but I can't forward the point to an
>>> internal writer b/c processOne is private.
>>>
>>> Your idea about either tagging the points or having the splitter do the
>>> writing itself is fine, but I don't see a way to use a class like the
>>> LASWriter directly since almost every method is private.
>>>
>>> Just making those protected or public would actually probably solve the
>>> issue.
>>>
>>> Jason
>>>
>>>
>>> On Tue, Jul 18, 2017 at 10:40 AM Jason Beverage <jasonbeverage at gmail.com>
>>> wrote:
>>>
>>>> Hey Andrew!
>>>>
>>>> Thanks for getting back to me.  I think part of the issue is that I
>>>> don't quite understand how to convert my current cursor based LASTools code
>>>> to a streaming Stage based system.
>>>>
>>>> I've attached an image of what I'm trying to do.
>>>>
>>>> Basically I want to have a reader that can stream a bunch of points in,
>>>> then a splitter stage that determines which of 9 potential writers to add
>>>> the point to based on the location of the point and some other criteria,
>>>> but I want to do it all without storing all of the points in memory.
>>>>
>>>> The existing ChipperFilter is similar to what I want to do, but it
>>>> doesn't appear to support streaming.  It looks like it does the
>>>> partitioning in memory and then returns a PointViewSet with all of the
>>>> outputs.
>>>>
>>>> Jason
>>>>
>>>>
>>>>
>>>> On Tue, Jul 18, 2017 at 10:18 AM Andrew Bell <andrew.bell.ia at gmail.com>
>>>> wrote:
>>>>
>>>>> On Mon, Jul 17, 2017 at 10:29 PM, Jason Beverage <
>>>>> jasonbeverage at gmail.com> wrote:
>>>>>
>>>>>> Hi all,
>>>>>>
>>>>>> I'm new to PDAL and I'm currently porting an existing point cloud
>>>>>> tookit we have at Pelican Mapping to use PDAL instead of LASTools and I had
>>>>>> a couple of questions.
>>>>>>
>>>>>> Our toolkit is similar to Entwine in that it takes a large number of
>>>>>> input points from LAS/LAZ files and chops them up into tiled LAZ files with
>>>>>> the goal of displaying them in OpenSceneGraph and osgEarth based
>>>>>> applications.
>>>>>>
>>>>>> Since we're dealing with a huge number of points, I'm making heavy
>>>>>> use of streaming so I can avoid keeping the entire dataset in memory.
>>>>>>
>>>>>> For reading, I found the StreamCallbackFilter so I can intercept the
>>>>>> points coming from a stage and process them one by one as I was doing
>>>>>> before, so I think that will work for my case.
>>>>>>
>>>>>> For writing however, I'm running into a bit of snag probably due to
>>>>>> my lack of understanding of the streaming API.
>>>>>>
>>>>>> We basically have an algorithm that does something like this:
>>>>>>
>>>>>> for each point in all the input points:
>>>>>>     // Figure out which output file to write the point to based on
>>>>>> it's location.
>>>>>>     Writer* writer = getWriter(point);
>>>>>>     writer->writePoint(writer);
>>>>>>
>>>>>> So we create a bunch of output writers (using LASTools) based on an
>>>>>> octree split, and for each point we determine which writer to write to and
>>>>>> write the incoming point to the appropriate output file.
>>>>>>
>>>>>> Is there a simple way to write points interactively to a Writer?  It
>>>>>> seems like if the write functions of Writer were public that it would be
>>>>>> fairly easy to implement something like that.
>>>>>>
>>>>>
>>>>> I'm not sure I understand exactly.  You can create your own stage that
>>>>> implements processOne() and do anything you like in it.  There is nothing
>>>>> particularly special about a writer.  It's just a stage.  There's no reason
>>>>> you can't chain a bunch of StreamCallbackFilters together if that's helpful
>>>>> -- the first one could do whatever you're doing now, the second one could
>>>>> do the writing you want to do.  Or they could be combined.
>>>>>
>>>>> Is part of what you are wanting is to use PDAL's LAS writer instead of
>>>>> LAStools?
>>>>>
>>>>> --
>>>>> Andrew Bell
>>>>> andrew.bell.ia at gmail.com
>>>>>
>>>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170718/eb6a416d/attachment-0001.html>

From spartaco at sgsoftware.it  Thu Jul 20 02:59:02 2017
From: spartaco at sgsoftware.it (Spartaco Giubbolini)
Date: Thu, 20 Jul 2017 11:59:02 +0200
Subject: [pdal] http support?
Message-ID: <03a380c6-6a06-59f1-16bd-bf8344c77846@sgsoftware.it>

Hi all,

I would like to use PDAL to read/download source files from an http 
server instead of a local path or network share, is it possible ?

thanks


---
Questa e-mail è stata controllata per individuare virus con Avast antivirus.
https://www.avast.com/antivirus



From jasonbeverage at gmail.com  Thu Jul 20 07:06:15 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Thu, 20 Jul 2017 14:06:15 +0000
Subject: [pdal] Threading and PDAL
Message-ID: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>

I'm running into some threading issues with PDAL that I could use some help
with.  I'm running into some random crashing using PDAL in a multithreaded
manner.  I understand that PDAL isn't entirely threadsafe, but do you have
some info on what is and isn't threadsafe?

Basically what I'm trying to do is multiple threads are creating Stages
using a shared StageFactory and each thread is running it's own independent
pipeline.  The only thing that is shared is the StageFactory which is
static for the application.  I've got access to the StageFactory protected
by my own mutex since I was getting crashes accessing it from multiple
threads.  I tried creating a StageFactory per thread but that caused other
issues like stages randomly not being able to be able to be created and it
not loading my plugins all the time.

Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of it's
dependencies and building my application against that.  It looks like the
pdal version is 1.5.0 which is the latest release.

Thanks!

Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/fa83ad38/attachment.html>

From andrew.bell.ia at gmail.com  Thu Jul 20 07:17:50 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 20 Jul 2017 10:17:50 -0400
Subject: [pdal] Threading and PDAL
In-Reply-To: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
References: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
Message-ID: <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>

The stage creation code through the PluginManager and StageManager is
believed to be threadsafe.  Nothing else is guaranteed.  We rely on many
libraries which may or may not be threadsafe.  If you need thread safety,
you need to implement your own locking.

If you're getting thread-related crashes in PluginManager or StageManager,
please open a ticket.

That said, there is probably a lot you can get away with -- we don't rely
much on constructs that are inherently non-threadsafe.  I'm willing to look
at issues up to a point, but we're not going to work hard to make things
threadsafe.  I'd need to know more about specific problems to be helpful.


On Thu, Jul 20, 2017 at 10:06 AM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> I'm running into some threading issues with PDAL that I could use some
> help with.  I'm running into some random crashing using PDAL in a
> multithreaded manner.  I understand that PDAL isn't entirely threadsafe,
> but do you have some info on what is and isn't threadsafe?
>
> Basically what I'm trying to do is multiple threads are creating Stages
> using a shared StageFactory and each thread is running it's own independent
> pipeline.  The only thing that is shared is the StageFactory which is
> static for the application.  I've got access to the StageFactory protected
> by my own mutex since I was getting crashes accessing it from multiple
> threads.  I tried creating a StageFactory per thread but that caused other
> issues like stages randomly not being able to be able to be created and it
> not loading my plugins all the time.
>
> Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of it's
> dependencies and building my application against that.  It looks like the
> pdal version is 1.5.0 which is the latest release.
>
> Thanks!
>
> Jason
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/68cf4abc/attachment.html>

From jasonbeverage at gmail.com  Thu Jul 20 12:02:40 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Thu, 20 Jul 2017 19:02:40 +0000
Subject: [pdal] Threading and PDAL
In-Reply-To: <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>
References: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
 <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>
Message-ID: <CAMcxSMujXEunzsrCXZN9ahvfNbOWmS7i5=u+XyKVbeuHpq5TWw@mail.gmail.com>

Hi Andrew,

Basically I have a bunch of jobs that read from input files using PDAL, do
something on them, and then write some resulting points out to an LAZ
file.  I've got all Stage creation wrapped in a mutex and I was hoping that
the stage pipelines for each job could run independently without a lock.
I'm getting random access violations in PDAL.  I'm going to try to build
pdal in debug and see if I can figure out what is going on.  If I globally
mutex any access at all to PDAL things run just fine (although not in
parallel :) ).

Does Entwine use threading or is it a strictly multiprocess setup?

Jason

On Thu, Jul 20, 2017 at 10:17 AM Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> The stage creation code through the PluginManager and StageManager is
> believed to be threadsafe.  Nothing else is guaranteed.  We rely on many
> libraries which may or may not be threadsafe.  If you need thread safety,
> you need to implement your own locking.
>
> If you're getting thread-related crashes in PluginManager or StageManager,
> please open a ticket.
>
> That said, there is probably a lot you can get away with -- we don't rely
> much on constructs that are inherently non-threadsafe.  I'm willing to look
> at issues up to a point, but we're not going to work hard to make things
> threadsafe.  I'd need to know more about specific problems to be helpful.
>
>
> On Thu, Jul 20, 2017 at 10:06 AM, Jason Beverage <jasonbeverage at gmail.com>
> wrote:
>
>> I'm running into some threading issues with PDAL that I could use some
>> help with.  I'm running into some random crashing using PDAL in a
>> multithreaded manner.  I understand that PDAL isn't entirely threadsafe,
>> but do you have some info on what is and isn't threadsafe?
>>
>> Basically what I'm trying to do is multiple threads are creating Stages
>> using a shared StageFactory and each thread is running it's own independent
>> pipeline.  The only thing that is shared is the StageFactory which is
>> static for the application.  I've got access to the StageFactory protected
>> by my own mutex since I was getting crashes accessing it from multiple
>> threads.  I tried creating a StageFactory per thread but that caused other
>> issues like stages randomly not being able to be able to be created and it
>> not loading my plugins all the time.
>>
>> Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of
>> it's dependencies and building my application against that.  It looks like
>> the pdal version is 1.5.0 which is the latest release.
>>
>> Thanks!
>>
>> Jason
>>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/3fa1e98b/attachment.html>

From connor at hobu.co  Thu Jul 20 12:08:28 2017
From: connor at hobu.co (Connor Manning)
Date: Thu, 20 Jul 2017 14:08:28 -0500
Subject: [pdal] Threading and PDAL
In-Reply-To: <CAMcxSMujXEunzsrCXZN9ahvfNbOWmS7i5=u+XyKVbeuHpq5TWw@mail.gmail.com>
References: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
 <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>
 <CAMcxSMujXEunzsrCXZN9ahvfNbOWmS7i5=u+XyKVbeuHpq5TWw@mail.gmail.com>
Message-ID: <CAO=FyjL5Cm2OZhjjmGP_xTUz1aJL9y1_R-zK1UEisC5O-B3X+Q@mail.gmail.com>

Entwine is multi-threaded.  Most of the PDAL-locking in Entwine happens in
`entwine/util/executor.cpp` and `hpp`.

On Thu, Jul 20, 2017 at 2:02 PM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Hi Andrew,
>
> Basically I have a bunch of jobs that read from input files using PDAL, do
> something on them, and then write some resulting points out to an LAZ
> file.  I've got all Stage creation wrapped in a mutex and I was hoping that
> the stage pipelines for each job could run independently without a lock.
> I'm getting random access violations in PDAL.  I'm going to try to build
> pdal in debug and see if I can figure out what is going on.  If I globally
> mutex any access at all to PDAL things run just fine (although not in
> parallel :) ).
>
> Does Entwine use threading or is it a strictly multiprocess setup?
>
> Jason
>
>
> On Thu, Jul 20, 2017 at 10:17 AM Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> The stage creation code through the PluginManager and StageManager is
>> believed to be threadsafe.  Nothing else is guaranteed.  We rely on many
>> libraries which may or may not be threadsafe.  If you need thread safety,
>> you need to implement your own locking.
>>
>> If you're getting thread-related crashes in PluginManager or
>> StageManager, please open a ticket.
>>
>> That said, there is probably a lot you can get away with -- we don't rely
>> much on constructs that are inherently non-threadsafe.  I'm willing to look
>> at issues up to a point, but we're not going to work hard to make things
>> threadsafe.  I'd need to know more about specific problems to be helpful.
>>
>>
>> On Thu, Jul 20, 2017 at 10:06 AM, Jason Beverage <jasonbeverage at gmail.com
>> > wrote:
>>
>>> I'm running into some threading issues with PDAL that I could use some
>>> help with.  I'm running into some random crashing using PDAL in a
>>> multithreaded manner.  I understand that PDAL isn't entirely threadsafe,
>>> but do you have some info on what is and isn't threadsafe?
>>>
>>> Basically what I'm trying to do is multiple threads are creating Stages
>>> using a shared StageFactory and each thread is running it's own independent
>>> pipeline.  The only thing that is shared is the StageFactory which is
>>> static for the application.  I've got access to the StageFactory protected
>>> by my own mutex since I was getting crashes accessing it from multiple
>>> threads.  I tried creating a StageFactory per thread but that caused other
>>> issues like stages randomly not being able to be able to be created and it
>>> not loading my plugins all the time.
>>>
>>> Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of
>>> it's dependencies and building my application against that.  It looks like
>>> the pdal version is 1.5.0 which is the latest release.
>>>
>>> Thanks!
>>>
>>> Jason
>>>
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/0368dc31/attachment.html>

From jasonbeverage at gmail.com  Thu Jul 20 12:21:22 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Thu, 20 Jul 2017 19:21:22 +0000
Subject: [pdal] Threading and PDAL
In-Reply-To: <CAO=FyjL5Cm2OZhjjmGP_xTUz1aJL9y1_R-zK1UEisC5O-B3X+Q@mail.gmail.com>
References: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
 <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>
 <CAMcxSMujXEunzsrCXZN9ahvfNbOWmS7i5=u+XyKVbeuHpq5TWw@mail.gmail.com>
 <CAO=FyjL5Cm2OZhjjmGP_xTUz1aJL9y1_R-zK1UEisC5O-B3X+Q@mail.gmail.com>
Message-ID: <CAMcxSMuEr7CnQ9WyGOhivoifrSQ+78TOoHzsRu6Evzd-VQFdRg@mail.gmail.com>

Thanks Connor, I just took a look at the executor.cpp.

I see locking around stage creation which I already have.  I also see
explicit locking around the prepare call and the preview, which I'm not
doing so I will try adding that.

Is there anything else that you can think of I might be missing?

Jason

On Thu, Jul 20, 2017 at 3:08 PM Connor Manning <connor at hobu.co> wrote:

> Entwine is multi-threaded.  Most of the PDAL-locking in Entwine happens in
> `entwine/util/executor.cpp` and `hpp`.
>
> On Thu, Jul 20, 2017 at 2:02 PM, Jason Beverage <jasonbeverage at gmail.com>
> wrote:
>
>> Hi Andrew,
>>
>> Basically I have a bunch of jobs that read from input files using PDAL,
>> do something on them, and then write some resulting points out to an LAZ
>> file.  I've got all Stage creation wrapped in a mutex and I was hoping that
>> the stage pipelines for each job could run independently without a lock.
>> I'm getting random access violations in PDAL.  I'm going to try to build
>> pdal in debug and see if I can figure out what is going on.  If I globally
>> mutex any access at all to PDAL things run just fine (although not in
>> parallel :) ).
>>
>> Does Entwine use threading or is it a strictly multiprocess setup?
>>
>> Jason
>>
>>
>> On Thu, Jul 20, 2017 at 10:17 AM Andrew Bell <andrew.bell.ia at gmail.com>
>> wrote:
>>
>>> The stage creation code through the PluginManager and StageManager is
>>> believed to be threadsafe.  Nothing else is guaranteed.  We rely on many
>>> libraries which may or may not be threadsafe.  If you need thread safety,
>>> you need to implement your own locking.
>>>
>>> If you're getting thread-related crashes in PluginManager or
>>> StageManager, please open a ticket.
>>>
>>> That said, there is probably a lot you can get away with -- we don't
>>> rely much on constructs that are inherently non-threadsafe.  I'm willing to
>>> look at issues up to a point, but we're not going to work hard to make
>>> things threadsafe.  I'd need to know more about specific problems to be
>>> helpful.
>>>
>>>
>>> On Thu, Jul 20, 2017 at 10:06 AM, Jason Beverage <
>>> jasonbeverage at gmail.com> wrote:
>>>
>>>> I'm running into some threading issues with PDAL that I could use some
>>>> help with.  I'm running into some random crashing using PDAL in a
>>>> multithreaded manner.  I understand that PDAL isn't entirely threadsafe,
>>>> but do you have some info on what is and isn't threadsafe?
>>>>
>>>> Basically what I'm trying to do is multiple threads are creating Stages
>>>> using a shared StageFactory and each thread is running it's own independent
>>>> pipeline.  The only thing that is shared is the StageFactory which is
>>>> static for the application.  I've got access to the StageFactory protected
>>>> by my own mutex since I was getting crashes accessing it from multiple
>>>> threads.  I tried creating a StageFactory per thread but that caused other
>>>> issues like stages randomly not being able to be able to be created and it
>>>> not loading my plugins all the time.
>>>>
>>>> Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of
>>>> it's dependencies and building my application against that.  It looks like
>>>> the pdal version is 1.5.0 which is the latest release.
>>>>
>>>> Thanks!
>>>>
>>>> Jason
>>>>
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>
>>>
>>>
>>>
>>> --
>>> Andrew Bell
>>> andrew.bell.ia at gmail.com
>>>
>>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/pdal
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/c569ecb7/attachment-0001.html>

From connor at hobu.co  Thu Jul 20 12:36:52 2017
From: connor at hobu.co (Connor Manning)
Date: Thu, 20 Jul 2017 14:36:52 -0500
Subject: [pdal] Threading and PDAL
In-Reply-To: <CAMcxSMuEr7CnQ9WyGOhivoifrSQ+78TOoHzsRu6Evzd-VQFdRg@mail.gmail.com>
References: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
 <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>
 <CAMcxSMujXEunzsrCXZN9ahvfNbOWmS7i5=u+XyKVbeuHpq5TWw@mail.gmail.com>
 <CAO=FyjL5Cm2OZhjjmGP_xTUz1aJL9y1_R-zK1UEisC5O-B3X+Q@mail.gmail.com>
 <CAMcxSMuEr7CnQ9WyGOhivoifrSQ+78TOoHzsRu6Evzd-VQFdRg@mail.gmail.com>
Message-ID: <CAO=Fyj+yDNcZ7wEWPcNvBSOBABrmaPv_LanENr0e-PDFGgyzog@mail.gmail.com>

You'll need a lock around anywhere a `pdal::SpatialReference` is created.
For Entwine, prepare and preview are the main places that happens, but
you'll also need to lock if you're explicitly going to create one.

On Thu, Jul 20, 2017 at 2:21 PM, Jason Beverage <jasonbeverage at gmail.com>
wrote:

> Thanks Connor, I just took a look at the executor.cpp.
>
> I see locking around stage creation which I already have.  I also see
> explicit locking around the prepare call and the preview, which I'm not
> doing so I will try adding that.
>
> Is there anything else that you can think of I might be missing?
>
> Jason
>
> On Thu, Jul 20, 2017 at 3:08 PM Connor Manning <connor at hobu.co> wrote:
>
>> Entwine is multi-threaded.  Most of the PDAL-locking in Entwine happens
>> in `entwine/util/executor.cpp` and `hpp`.
>>
>> On Thu, Jul 20, 2017 at 2:02 PM, Jason Beverage <jasonbeverage at gmail.com>
>> wrote:
>>
>>> Hi Andrew,
>>>
>>> Basically I have a bunch of jobs that read from input files using PDAL,
>>> do something on them, and then write some resulting points out to an LAZ
>>> file.  I've got all Stage creation wrapped in a mutex and I was hoping that
>>> the stage pipelines for each job could run independently without a lock.
>>> I'm getting random access violations in PDAL.  I'm going to try to build
>>> pdal in debug and see if I can figure out what is going on.  If I globally
>>> mutex any access at all to PDAL things run just fine (although not in
>>> parallel :) ).
>>>
>>> Does Entwine use threading or is it a strictly multiprocess setup?
>>>
>>> Jason
>>>
>>>
>>> On Thu, Jul 20, 2017 at 10:17 AM Andrew Bell <andrew.bell.ia at gmail.com>
>>> wrote:
>>>
>>>> The stage creation code through the PluginManager and StageManager is
>>>> believed to be threadsafe.  Nothing else is guaranteed.  We rely on many
>>>> libraries which may or may not be threadsafe.  If you need thread safety,
>>>> you need to implement your own locking.
>>>>
>>>> If you're getting thread-related crashes in PluginManager or
>>>> StageManager, please open a ticket.
>>>>
>>>> That said, there is probably a lot you can get away with -- we don't
>>>> rely much on constructs that are inherently non-threadsafe.  I'm willing to
>>>> look at issues up to a point, but we're not going to work hard to make
>>>> things threadsafe.  I'd need to know more about specific problems to be
>>>> helpful.
>>>>
>>>>
>>>> On Thu, Jul 20, 2017 at 10:06 AM, Jason Beverage <
>>>> jasonbeverage at gmail.com> wrote:
>>>>
>>>>> I'm running into some threading issues with PDAL that I could use some
>>>>> help with.  I'm running into some random crashing using PDAL in a
>>>>> multithreaded manner.  I understand that PDAL isn't entirely threadsafe,
>>>>> but do you have some info on what is and isn't threadsafe?
>>>>>
>>>>> Basically what I'm trying to do is multiple threads are creating
>>>>> Stages using a shared StageFactory and each thread is running it's own
>>>>> independent pipeline.  The only thing that is shared is the StageFactory
>>>>> which is static for the application.  I've got access to the StageFactory
>>>>> protected by my own mutex since I was getting crashes accessing it from
>>>>> multiple threads.  I tried creating a StageFactory per thread but that
>>>>> caused other issues like stages randomly not being able to be able to be
>>>>> created and it not loading my plugins all the time.
>>>>>
>>>>> Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of
>>>>> it's dependencies and building my application against that.  It looks like
>>>>> the pdal version is 1.5.0 which is the latest release.
>>>>>
>>>>> Thanks!
>>>>>
>>>>> Jason
>>>>>
>>>>> _______________________________________________
>>>>> pdal mailing list
>>>>> pdal at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>>
>>>>
>>>>
>>>>
>>>> --
>>>> Andrew Bell
>>>> andrew.bell.ia at gmail.com
>>>>
>>>
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/155dbaf8/attachment.html>

From jasonbeverage at gmail.com  Thu Jul 20 13:03:08 2017
From: jasonbeverage at gmail.com (Jason Beverage)
Date: Thu, 20 Jul 2017 20:03:08 +0000
Subject: [pdal] Threading and PDAL
In-Reply-To: <CAO=Fyj+yDNcZ7wEWPcNvBSOBABrmaPv_LanENr0e-PDFGgyzog@mail.gmail.com>
References: <CAMcxSMu3FdeWAgrkzeryWDH=trwzfrrns1QF+RNGBmacpDHtsw@mail.gmail.com>
 <CACJ51z30nJk6OCB8pewkocVjbP1bkmg1FOhwDTO26j-sMe_QVQ@mail.gmail.com>
 <CAMcxSMujXEunzsrCXZN9ahvfNbOWmS7i5=u+XyKVbeuHpq5TWw@mail.gmail.com>
 <CAO=FyjL5Cm2OZhjjmGP_xTUz1aJL9y1_R-zK1UEisC5O-B3X+Q@mail.gmail.com>
 <CAMcxSMuEr7CnQ9WyGOhivoifrSQ+78TOoHzsRu6Evzd-VQFdRg@mail.gmail.com>
 <CAO=Fyj+yDNcZ7wEWPcNvBSOBABrmaPv_LanENr0e-PDFGgyzog@mail.gmail.com>
Message-ID: <CAMcxSMvu-=HRTa5dv=1Ot2mki_7+yu+DKmp5uvp1OU_xktSFVw@mail.gmail.com>

You're awesome!  Locking around prepare and preview appear to work.  I'm
going to see if I can take some of the other locks out as well.

I'm assuming that the SpatialReference locks are due to GDAL's lack of
thread safety.  Would it be possible to just have an internal lock in PDAL
around the SpatialReference class?

We have to do the same thing in our osgEarth project with respect to GDAL.

Jason


On Thu, Jul 20, 2017 at 3:36 PM Connor Manning <connor at hobu.co> wrote:

> You'll need a lock around anywhere a `pdal::SpatialReference` is created.
> For Entwine, prepare and preview are the main places that happens, but
> you'll also need to lock if you're explicitly going to create one.
>
> On Thu, Jul 20, 2017 at 2:21 PM, Jason Beverage <jasonbeverage at gmail.com>
> wrote:
>
>> Thanks Connor, I just took a look at the executor.cpp.
>>
>> I see locking around stage creation which I already have.  I also see
>> explicit locking around the prepare call and the preview, which I'm not
>> doing so I will try adding that.
>>
>> Is there anything else that you can think of I might be missing?
>>
>> Jason
>>
>> On Thu, Jul 20, 2017 at 3:08 PM Connor Manning <connor at hobu.co> wrote:
>>
>>> Entwine is multi-threaded.  Most of the PDAL-locking in Entwine happens
>>> in `entwine/util/executor.cpp` and `hpp`.
>>>
>>> On Thu, Jul 20, 2017 at 2:02 PM, Jason Beverage <jasonbeverage at gmail.com
>>> > wrote:
>>>
>>>> Hi Andrew,
>>>>
>>>> Basically I have a bunch of jobs that read from input files using PDAL,
>>>> do something on them, and then write some resulting points out to an LAZ
>>>> file.  I've got all Stage creation wrapped in a mutex and I was hoping that
>>>> the stage pipelines for each job could run independently without a lock.
>>>> I'm getting random access violations in PDAL.  I'm going to try to build
>>>> pdal in debug and see if I can figure out what is going on.  If I globally
>>>> mutex any access at all to PDAL things run just fine (although not in
>>>> parallel :) ).
>>>>
>>>> Does Entwine use threading or is it a strictly multiprocess setup?
>>>>
>>>> Jason
>>>>
>>>>
>>>> On Thu, Jul 20, 2017 at 10:17 AM Andrew Bell <andrew.bell.ia at gmail.com>
>>>> wrote:
>>>>
>>>>> The stage creation code through the PluginManager and StageManager is
>>>>> believed to be threadsafe.  Nothing else is guaranteed.  We rely on many
>>>>> libraries which may or may not be threadsafe.  If you need thread safety,
>>>>> you need to implement your own locking.
>>>>>
>>>>> If you're getting thread-related crashes in PluginManager or
>>>>> StageManager, please open a ticket.
>>>>>
>>>>> That said, there is probably a lot you can get away with -- we don't
>>>>> rely much on constructs that are inherently non-threadsafe.  I'm willing to
>>>>> look at issues up to a point, but we're not going to work hard to make
>>>>> things threadsafe.  I'd need to know more about specific problems to be
>>>>> helpful.
>>>>>
>>>>>
>>>>> On Thu, Jul 20, 2017 at 10:06 AM, Jason Beverage <
>>>>> jasonbeverage at gmail.com> wrote:
>>>>>
>>>>>> I'm running into some threading issues with PDAL that I could use
>>>>>> some help with.  I'm running into some random crashing using PDAL in a
>>>>>> multithreaded manner.  I understand that PDAL isn't entirely threadsafe,
>>>>>> but do you have some info on what is and isn't threadsafe?
>>>>>>
>>>>>> Basically what I'm trying to do is multiple threads are creating
>>>>>> Stages using a shared StageFactory and each thread is running it's own
>>>>>> independent pipeline.  The only thing that is shared is the StageFactory
>>>>>> which is static for the application.  I've got access to the StageFactory
>>>>>> protected by my own mutex since I was getting crashes accessing it from
>>>>>> multiple threads.  I tried creating a StageFactory per thread but that
>>>>>> caused other issues like stages randomly not being able to be able to be
>>>>>> created and it not loading my plugins all the time.
>>>>>>
>>>>>> Right now I'm using the OSGEO4W 64 bit package to get PDAL and all of
>>>>>> it's dependencies and building my application against that.  It looks like
>>>>>> the pdal version is 1.5.0 which is the latest release.
>>>>>>
>>>>>> Thanks!
>>>>>>
>>>>>> Jason
>>>>>>
>>>>>> _______________________________________________
>>>>>> pdal mailing list
>>>>>> pdal at lists.osgeo.org
>>>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>>>
>>>>>
>>>>>
>>>>>
>>>>> --
>>>>> Andrew Bell
>>>>> andrew.bell.ia at gmail.com
>>>>>
>>>>
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>>
>>>
>>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170720/b7e605c8/attachment-0001.html>

From paul.schrum at gmail.com  Sun Jul 23 16:24:08 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Sun, 23 Jul 2017 19:24:08 -0400
Subject: [pdal] Week 08: Integration Of PDAL into GRASS GIS
Message-ID: <CAPRzK5Zc1KixXshxB211wDvBoMPcHfRXunkZ0Bw3NLWRReFxyw@mail.gmail.com>

1. What did you get done this week?
a. Completed the basic functionality of r.in.pdal. (Link to commit
<https://github.com/PaulSchrum/r.in.pdal/commit/e5d00c093de0ac4b807aecf471298f7d5f47837f>
)

2. What do you plan on doing next week?
a. In r.in.pdal, remove all remaining references to liblas while retaining
all functionailty already part of r.in.lidar.

b. Set up and pass unit tests for v.in.pdal and r.in.pdal.  (Carried over
from Week 6.)

c. Develop a class to build a pdal pipeline from GRASS options and inputs
of v.in.pdal and r.in.pdal.

3. Are you blocked on anything?
No.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170723/84ff7128/attachment.html>

From sebastien.guimmara.external at airbus.com  Mon Jul 24 07:15:03 2017
From: sebastien.guimmara.external at airbus.com (=?utf-8?B?R1VJTU1BUkEsIFPDqWJhc3RpZW4gKEV4dGVybmFsKQ==?=)
Date: Mon, 24 Jul 2017 14:15:03 +0000
Subject: [pdal] [PDAL] Behaviour of filters.crop with and without SRS
Message-ID: <A1DABC8AB3291742B3D4C714F72B2F8E47268598@tlswinmbx02.toulouse.spotimage.int>

Hello,

I stumbled upon a strange behaviour using the crop filter. The results are very different when I specify a spatial reference in the LAS reader, and when I omit one.

When I specify a spatial reference (EPSG 2286, units in feet), the crop consumes all points, leaving an empty dataset, even if the cropping bounds are equal to the actual dataset bounds (given by pdal info). However, when I omit the spatial reference, the crop filter behaves as expected.

I use a cropping rectangle via the bounds parameter, and the values are expressed in the file SRS (EPSG 2286).

Is this a normal behaviour ?

Thanks,
Sébastien



[cid:image4a8256.JPG at e5a02ae0.46a1aa48] Please consider the environment before printing this email message.

________________________________

Ce courriel (incluant ses éventuelles pièces jointes) peut contenir des informations confidentielles et/ou protégées ou dont la diffusion est restreinte. Si vous avez reçu ce courriel par erreur, vous ne devez ni le copier, ni l'utiliser, ni en divulguer le contenu à quiconque. Merci d'en avertir immédiatement l'expéditeur et d'effacer ce courriel de votre système. Airbus DS Geo décline toute responsabilité en cas de corruption par virus, d'altération ou de falsification de ce courriel lors de sa transmission par voie électronique.

This email (including any attachments) may contain confidential and/or privileged information or information otherwise protected from disclosure. If you are not the intended recipient, please notify the sender immediately, do not copy this message or any attachments and do not use it for any purpose or disclose its content to any person, but delete this message and any attachments from your system. Airbus DS Geo disclaims any and all liability if this email transmission was virus corrupted, altered or falsified.

________________________________

Airbus DS Geo SA (325 089 589 RCS Toulouse) - Siege social: 5, rue des Satellites, 31400 Toulouse, France.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170724/18cc41f6/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image4a8256.JPG
Type: image/jpeg
Size: 625 bytes
Desc: image4a8256.JPG
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170724/18cc41f6/attachment.jpe>

From andrew.bell.ia at gmail.com  Mon Jul 24 08:46:02 2017
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 24 Jul 2017 11:46:02 -0400
Subject: [pdal] [PDAL] Behaviour of filters.crop with and without SRS
In-Reply-To: <A1DABC8AB3291742B3D4C714F72B2F8E47268598@tlswinmbx02.toulouse.spotimage.int>
References: <A1DABC8AB3291742B3D4C714F72B2F8E47268598@tlswinmbx02.toulouse.spotimage.int>
Message-ID: <CACJ51z3Ax8WcHSzKodu6An5524k9i4_hrhn=TnN48meCfPtfrg@mail.gmail.com>

On Mon, Jul 24, 2017 at 10:15 AM, GUIMMARA, Sébastien (External) <
sebastien.guimmara.external at airbus.com> wrote:

> Hello,
>
>
>
> I stumbled upon a strange behaviour using the crop filter. The results are
> very different when I specify a spatial reference in the LAS reader, and
> when I omit one.
>
>
>
> When I specify a spatial reference (EPSG 2286, units in feet), the crop
> consumes all points, leaving an empty dataset, even if the cropping bounds
> are equal to the actual dataset bounds (given by pdal info). However, when
> I omit the spatial reference, the crop filter behaves as expected.
>
>
>
> I use a cropping rectangle via the bounds parameter, and the values are
> expressed in the file SRS (EPSG 2286).
>

I'd need to investigate to understand the behavior.  If you have a source
file with a few points and a sample pipeline/command line, I can check.
You can open a ticket.

I'll note that there is an option, a_srs, for the crop filter that
specifies the SRS for the cropping geometry (it's missing in the
documentation).  However, if you don't provide this option, the code
assumes that it's in the SRS of the input data, so it shouldn't be an issue
in this case if I understand.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170724/a1b389ac/attachment-0001.html>

From sebastien.guimmara.external at airbus.com  Tue Jul 25 00:23:16 2017
From: sebastien.guimmara.external at airbus.com (=?utf-8?B?R1VJTU1BUkEsIFPDqWJhc3RpZW4gKEV4dGVybmFsKQ==?=)
Date: Tue, 25 Jul 2017 07:23:16 +0000
Subject: [pdal] [PDAL] Behaviour of filters.crop with and without SRS
In-Reply-To: <29401_1500911164_5976163C_29401_719_4_CACJ51z3Ax8WcHSzKodu6An5524k9i4_hrhn=TnN48meCfPtfrg@mail.gmail.com>
References: <A1DABC8AB3291742B3D4C714F72B2F8E47268598@tlswinmbx02.toulouse.spotimage.int>
 <29401_1500911164_5976163C_29401_719_4_CACJ51z3Ax8WcHSzKodu6An5524k9i4_hrhn=TnN48meCfPtfrg@mail.gmail.com>
Message-ID: <A1DABC8AB3291742B3D4C714F72B2F8E472685BC@tlswinmbx02.toulouse.spotimage.int>

Andrew,

Here is the ticket https://github.com/PDAL/PDAL/issues/1626

Thanks,
Sébastien

De : Andrew Bell [mailto:andrew.bell.ia at gmail.com]
Envoyé : lundi 24 juillet 2017 17:46
À : GUIMMARA, Sébastien (External)
Cc : pdal at lists.osgeo.org
Objet : Re: [pdal] [PDAL] Behaviour of filters.crop with and without SRS

On Mon, Jul 24, 2017 at 10:15 AM, GUIMMARA, Sébastien (External) <sebastien.guimmara.external at airbus.com<mailto:sebastien.guimmara.external at airbus.com>> wrote:
Hello,

I stumbled upon a strange behaviour using the crop filter. The results are very different when I specify a spatial reference in the LAS reader, and when I omit one.

When I specify a spatial reference (EPSG 2286, units in feet), the crop consumes all points, leaving an empty dataset, even if the cropping bounds are equal to the actual dataset bounds (given by pdal info). However, when I omit the spatial reference, the crop filter behaves as expected.

I use a cropping rectangle via the bounds parameter, and the values are expressed in the file SRS (EPSG 2286).

I'd need to investigate to understand the behavior.  If you have a source file with a few points and a sample pipeline/command line, I can check.  You can open a ticket.

I'll note that there is an option, a_srs, for the crop filter that specifies the SRS for the cropping geometry (it's missing in the documentation).  However, if you don't provide this option, the code assumes that it's in the SRS of the input data, so it shouldn't be an issue in this case if I understand.

--
Andrew Bell
andrew.bell.ia at gmail.com<mailto:andrew.bell.ia at gmail.com>



[cid:image947abf.JPG at 08b578e7.43ab2ba1] Please consider the environment before printing this email message.

________________________________

Ce courriel (incluant ses éventuelles pièces jointes) peut contenir des informations confidentielles et/ou protégées ou dont la diffusion est restreinte. Si vous avez reçu ce courriel par erreur, vous ne devez ni le copier, ni l'utiliser, ni en divulguer le contenu à quiconque. Merci d'en avertir immédiatement l'expéditeur et d'effacer ce courriel de votre système. Airbus DS Geo décline toute responsabilité en cas de corruption par virus, d'altération ou de falsification de ce courriel lors de sa transmission par voie électronique.

This email (including any attachments) may contain confidential and/or privileged information or information otherwise protected from disclosure. If you are not the intended recipient, please notify the sender immediately, do not copy this message or any attachments and do not use it for any purpose or disclose its content to any person, but delete this message and any attachments from your system. Airbus DS Geo disclaims any and all liability if this email transmission was virus corrupted, altered or falsified.

________________________________

Airbus DS Geo SA (325 089 589 RCS Toulouse) - Siege social: 5, rue des Satellites, 31400 Toulouse, France.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170725/8cc77f41/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image947abf.JPG
Type: image/jpeg
Size: 625 bytes
Desc: image947abf.JPG
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170725/8cc77f41/attachment.jpe>

From paul.schrum at gmail.com  Tue Jul 25 14:14:33 2017
From: paul.schrum at gmail.com (Paul Schrum)
Date: Tue, 25 Jul 2017 17:14:33 -0400
Subject: [pdal] Requesting help reading data from Pipeline Executor Metadata
Message-ID: <CAPRzK5Z3j8s=Fsne+F4G2Z_0F--YPsj9mNfnWVqdJ3yJYZdJRQ@mail.gmail.com>

I need to read metadata from a successfully run PipelineExecutor instance.
I think I am doing this correctly, but I haven't been able to find any
example code which does what I need to do.

Can someone advise me on this?

Here is my code.  The line I believe is not behaving the way I expect is
665, which I confirm by printing its validty at line 670, which prints 0,
which means Not Valid.

649    std::string pipeline_
650            pipelineJson::basicVectorMapReaderWriter(infile,outmap);

            // I can confirm the executor is valid and runs correctly
653    auto plExecutor = new pdal::PipelineExecutor(pipeline_json);

660    uint64_t pointCount = plExecutor->execute();

663    pdal::MetadataNode root = plExecutor->getMetadata();
664    //auto root = plExecutor->getMetadata();
665    auto srsNode = root.findChild("srs");
666
667
668    auto val = srsNode.valid();
669
670    cout << val << endl;
671    cout << "test" << endl;

Another note which may be helpful: when I change 668 to be
668    auto val = root.valid();

the validity prints 1, which indicates that it is valid.

- Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170725/01a7243f/attachment.html>

From howard at hobu.co  Wed Jul 26 14:14:30 2017
From: howard at hobu.co (Howard Butler)
Date: Wed, 26 Jul 2017 16:14:30 -0500
Subject: [pdal] Requesting help reading data from Pipeline Executor
 Metadata
In-Reply-To: <CAPRzK5Z3j8s=Fsne+F4G2Z_0F--YPsj9mNfnWVqdJ3yJYZdJRQ@mail.gmail.com>
References: <CAPRzK5Z3j8s=Fsne+F4G2Z_0F--YPsj9mNfnWVqdJ3yJYZdJRQ@mail.gmail.com>
Message-ID: <89DCF0C7-0EB6-4BD7-870E-71D8AC81E95B@hobu.co>


> On Jul 25, 2017, at 4:14 PM, Paul Schrum <paul.schrum at gmail.com> wrote:
> 
> I need to read metadata from a successfully run PipelineExecutor instance.  I think I am doing this correctly, but I haven't been able to find any example code which does what I need to do.
> 
> Can someone advise me on this?
> 
> Here is my code.  The line I believe is not behaving the way I expect is 665, which I confirm by printing its validty at line 670, which prints 0, which means Not Valid.
> 
> 649    std::string pipeline_
> 650            pipelineJson::basicVectorMapReaderWriter(infile,outmap);
> 
>             // I can confirm the executor is valid and runs correctly
> 653    auto plExecutor = new pdal::PipelineExecutor(pipeline_json);
> 
> 660    uint64_t pointCount = plExecutor->execute();
> 
> 663    pdal::MetadataNode root = plExecutor->getMetadata();
> 664    //auto root = plExecutor->getMetadata();
> 665    auto srsNode = root.findChild("srs");
> 666    
> 667    
> 668    auto val = srsNode.valid();
> 669    
> 670    cout << val << endl;
> 671    cout << "test" << endl;
> 
> Another note which may be helpful: when I change 668 to be
> 668    auto val = root.valid();
> 
> the validity prints 1, which indicates that it is valid.

print your node and see if there's anything there

std::cout << root << std::endl;

It's quite possible the srs node is empty.

Howard

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170726/c010d979/attachment.html>

From howard at hobu.co  Wed Jul 26 14:33:25 2017
From: howard at hobu.co (Howard Butler)
Date: Wed, 26 Jul 2017 16:33:25 -0500
Subject: [pdal] PDAL-question install for Python
In-Reply-To: <D645DF86BBEF48419F24B8F8942BCD4A@BrugerPC>
References: <D645DF86BBEF48419F24B8F8942BCD4A@BrugerPC>
Message-ID: <C8C0FE93-1085-436B-A880-201705789890@hobu.co>


> On Jul 24, 2017, at 3:18 PM, Niels Bach-Sørensen <nbs at dxt-dk.dk> wrote:
> 
> Hi PDAL-Team
>  
> My name is Niels Bach-Sørensen and I have been using PDAL for importing point cloud data into a PostgreSQL database for a university project. I have now gotten a numerous amount of laz files I need to import into the database, which I would like to automize with your Python PDAL library.
>  
> When I try to install it through pip I'm told that my computer can't find the config file, "pdal-config.bat". So I tried to install it with "python setup.py install" with a config file in the same folder as the setup.py file. But this time I get errors when the setup file tries to access "pdal/plang/Array.hpp".
>  
> Do you know a solution around those issues I have?

The PDAL Python bindings require that PDAL is installed. The PDAL Python bindings is not the mechanism to load data into pgpointcloud, however. There are many on the PDAL mailing list who can help with the details of that task. 

Please attempt to get PDAL going and use the writers.pgpointcloud PDAL stage to write data into pgpointcloud as the docs in that project describe. Please ask any follow up questions by joining the PDAL mailing list https://www.pdal.io/community.html <https://www.pdal.io/community.html>

Howard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170726/25372e87/attachment.html>

From pt at masseranolabs.com  Fri Jul 28 20:37:45 2017
From: pt at masseranolabs.com (Piero Toffanin)
Date: Fri, 28 Jul 2017 23:37:45 -0400
Subject: [pdal] Classify Buildings and Vegetation in PDAL?
Message-ID: <5afd6e94-9b22-6e66-1bc4-1d3ed5c08309@masseranolabs.com>

Hello!

I was wondering if somebody could point me in the right direction; I'm 
trying to classify (roughly) a set of non-ground points into buildings 
and vegetation for the purpose of filtering out vegetation and retaining 
only the buildings. I was thinking of using an approach similar to 
lasclassify (check for planarity or roughness) 
https://rapidlasso.com/lastools/lasclassify/, but I'm not sure which 
would be the best way to approach this.

Suggestions?

Thank you!

-Piero


From brad.chambers at gmail.com  Sat Jul 29 04:48:02 2017
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Sat, 29 Jul 2017 11:48:02 +0000
Subject: [pdal] Classify Buildings and Vegetation in PDAL?
In-Reply-To: <5afd6e94-9b22-6e66-1bc4-1d3ed5c08309@masseranolabs.com>
References: <5afd6e94-9b22-6e66-1bc4-1d3ed5c08309@masseranolabs.com>
Message-ID: <CAJyqqPzuwwyaZh8+b8gJsNL6XXnBw503WGGeJWmukdXKXhjwFQ@mail.gmail.com>

Piero,

This isn't going to be any kind of silver bullet, but you could start
playing around with a pipeline similar to:

{
  "pipeline": [
    {
      "type": "filters.assign",
      "assignment": "Classification[:]=0"
    },
    {
      "type": "filters.smrf"
    },
    {
      "type": "filters.hag"
    },
    {
      "type": "filters.range",
      "limits": "HeightAboveGround[2:)"
    },
    {
      "type": "filters.approximatecoplanar",
      "knn": 10
    },
    {
      "type": "filters.range",
      "limits": "Coplanar[1:1]"
    }
  ]
}

If you already have ground returns labeled, you could skip the first two
steps altogether. You could also plugin PMF in place of SMRF in you prefer.

The first range filter is used to cut out not only ground, but also near
ground points using the height above ground value computed in the previous
HAG step.

The ApproximateCoplanar filter is borrowed from [1] and compares
eigenvalues computed from 10 nearest neighbors to estimate planarity.

The final range filter cuts out the non-planar points, returning only the
(roughly) planar ones. If you are writing to a format that accommodates the
Coplanar dimension then you don't need to use the range filter, just write
out the Coplanar dimension and analyze the results using your tool of
choice.

It's been a while since I ran this pipeline, but IIRC the truly planar
objects tended to be marked planar pretty reliably, whereas the non-planar
objects tended to have some noise mixed in. That is, it wasn't uncommon to
find points within the vegetation whose ten neighbors just happened to look
approximately planar. Anyway, it may be a starting point. There is clearly
more work that could be done in this area!

Brad

[1] F. A. Limberger and M. M. Oliveira, “Real-time detection of planar
regions in unorganized point clouds,” Pattern Recognit., vol. 48, no. 6,
pp. 2043–2053, 2015.

On Fri, Jul 28, 2017 at 11:46 PM Piero Toffanin <pt at masseranolabs.com>
wrote:

> Hello!
>
> I was wondering if somebody could point me in the right direction; I'm
> trying to classify (roughly) a set of non-ground points into buildings
> and vegetation for the purpose of filtering out vegetation and retaining
> only the buildings. I was thinking of using an approach similar to
> lasclassify (check for planarity or roughness)
> https://rapidlasso.com/lastools/lasclassify/, but I'm not sure which
> would be the best way to approach this.
>
> Suggestions?
>
> Thank you!
>
> -Piero
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/pdal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170729/a6b8f8d8/attachment.html>

From Adam.Steer at anu.edu.au  Sun Jul 30 21:28:03 2017
From: Adam.Steer at anu.edu.au (Adam Steer)
Date: Mon, 31 Jul 2017 04:28:03 +0000
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
In-Reply-To: <391551499689280@web23o.yandex.ru>
References: <1018041499447938@web29g.yandex.ru>
 <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>
 <3F9E35ED-37F5-4300-9DE9-B82DA899CE4F@hobu.co>
 <391551499689280@web23o.yandex.ru>
Message-ID: <549032B6-AC4A-443D-B03A-9D0A96230B8E@anu.edu.au>

Hi all

finally got to some testing with this.

Input: a LAS tile
Expected outputs: PNG files showing grayscale images of point attributes, gridded according to some input parameters about cell sizing

I think what happens here is that PNG expects 3 bands, and I’m trying to make greyscale images. After a lot of trying GDAL options, I ended up just writing out a GeoTIFF and then using gdal_translate to carve out my PNGs, eg:

{
 "pipeline": [
  “/path/to/tile.las",
 {
   "type": "filters.range",
   "limits": "Classification[2:2]"
 },
 {
   "type": "writers.gdal",
   "resolution": 2.0,
   "radius": 2.5,
   "gdaldriver":"GTiff",
   "filename": “tile.tif",
   "output_type": "mean,idw,count"
   }
   ]
 }

…and then:
gdal_translate ./tile.tif mean_tile.png -b 1 -ot Byte -of png -scale
gdal_translate ./tile.tif idw_tile.png -b 2 -ot Byte -of png -scale
gdal_translate ./tile.tif count_tile.png -b 3 -ot Byte -of png -scale

…which produced valid pngs which worked as expected - greyscale rasterised point data that a web browser could view.

The nearest pipeline I could think of to generate a single writers.gdal ‘band’ as a PNG was:

{
 "pipeline": [
  “/path/to/tile.las",
 {
   "type": "filters.range",
   "limits": "Classification[2:2]"
 },
 {
   "type": "writers.gdal",
   "resolution": 2.0,
   "radius": 2.5,
   "gdalopts":"ot=PNG",
   "gdalopts":"co=scale",
   "gdalopts":"ot=Byte",
   "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
   "gdalopts":"co=b=1",
   "filename": “tile.png",
   "output_type": "idw"
   }
   ]
 }

…but this made a really big PNG (2mb, as opposed to single band pngs using an intermediate geotiff at < 150k) which was not readable by anything on my MacOS machine.

I’d happily take pipelne corrections! Lots of guessing there, and also lots of not knowing all the GDAL tricks!

Anyway, at a pinch, going gtiff -> png is possible, maybe slower than the required purpose?

HTH

Adam



> On 10 Jul 2017, at 10:21 pm, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
> 
> Gents:
> I've run it with "all" bands and get a nice, huge PNG (grayscale and it's not doing the resize), that I can open and view in Opticks but nothing else.
>  
> On windoze, you can drag an image into Firefox, and it will display it. Firefox says it cannot display the image "because it contains errors".
>  
>  
>  
> 08.07.2017, 23:09, "Howard Butler" <howard at hobu.co>:
>> Vladimir,
>> 
>> You need to be specific about what you mean by "cannot view the PNG with Firefox...".
>> 
>> The output of writers.gdal with the configuration you've provided is a 2-band PNG. That's probably not what you are expecting. Presumably you will want a colorized PNG or something? In that case, write out only the idw band as a PNG, and then use a GDAL VRT plus a color interpretation to convert that to a PNG that would be viewable in a way you'd expect in Firefox.
>> 
>> Hope this helps,
>> 
>> Howard
>>  
>> 
>>  On Jul 7, 2017, at 9:17 PM, Adam Steer <Adam.Steer at anu.edu.au> wrote:
>> 
>>  HI Vladimir - can you check whether a PNG with just one ‘band’ (ie ‘max’ OR ‘idw’ but not both) works?
>> 
>>  That’s all I can think of… I actually need to test this as well :) Next week…
>> 
>>  Cheers
>> 
>>  Adam
>> 
>>  
>>  On 8 Jul 2017, at 3:18 am, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
>> 
>>  Trying to make a PNG from a .laz file to display in Firefox.
>> 
>>  {
>>   "pipeline":[
>>     "somefile.laz",
>>     {
>>      "type":"writers.gdal",
>>       "resolution": 1,
>>       "output_type":"idw",
>>       "output_type":"max",
>>        "gdalopts":"of=PNG,outsize=128 128",
>>        "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>>       "filename":"outputfile.png"
>>     }
>>   ]
>>  }
>> 
>>  The pipeline runs and produces a PNG. I cannot view the PNG with Firefox, MS Paint, or Windows Photo Viewer, HOWEVER, I can open it and view it in Opticks (https://sourceforge.net/projects/opticks/).
>> 
>>  Opticks shows a single band grey scale image, probably representative of the original .laz.
>> 
>>  Anything I'm doing wrong here producing the "corrupted" PNG?
>>  _______________________________________________
>>  pdal mailing list
>>  pdal at lists.osgeo.org
>>  https://lists.osgeo.org/mailman/listinfo/pdal
>> 
>>  _______________________________________________
>>  pdal mailing list
>>  pdal at lists.osgeo.org
>>  https://lists.osgeo.org/mailman/listinfo/pdal
>>  


From howard at hobu.co  Mon Jul 31 10:24:40 2017
From: howard at hobu.co (Howard Butler)
Date: Mon, 31 Jul 2017 12:24:40 -0500
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
In-Reply-To: <549032B6-AC4A-443D-B03A-9D0A96230B8E@anu.edu.au>
References: <1018041499447938@web29g.yandex.ru>
 <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>
 <3F9E35ED-37F5-4300-9DE9-B82DA899CE4F@hobu.co>
 <391551499689280@web23o.yandex.ru>
 <549032B6-AC4A-443D-B03A-9D0A96230B8E@anu.edu.au>
Message-ID: <60AB1BA0-AE55-44EE-AEBD-18E3F34F1FD0@hobu.co>

There's a ticket to improve PDAL's writers.gdal to support more options and output data types. That will make things work better, but the development hasn't happened quite yet.

Stick with outputting GeoTIFF for now and then do gdal_translate/gdalwarp as you need as Adam's describing.

https://github.com/PDAL/PDAL/issues/1497 <https://github.com/PDAL/PDAL/issues/1497>

Howard

> On Jul 30, 2017, at 11:28 PM, Adam Steer <Adam.Steer at anu.edu.au> wrote:
> 
> Hi all
> 
> finally got to some testing with this.
> 
> Input: a LAS tile
> Expected outputs: PNG files showing grayscale images of point attributes, gridded according to some input parameters about cell sizing
> 
> I think what happens here is that PNG expects 3 bands, and I’m trying to make greyscale images. After a lot of trying GDAL options, I ended up just writing out a GeoTIFF and then using gdal_translate to carve out my PNGs, eg:
> 
> {
> "pipeline": [
>  “/path/to/tile.las",
> {
>   "type": "filters.range",
>   "limits": "Classification[2:2]"
> },
> {
>   "type": "writers.gdal",
>   "resolution": 2.0,
>   "radius": 2.5,
>   "gdaldriver":"GTiff",
>   "filename": “tile.tif",
>   "output_type": "mean,idw,count"
>   }
>   ]
> }
> 
> …and then:
> gdal_translate ./tile.tif mean_tile.png -b 1 -ot Byte -of png -scale
> gdal_translate ./tile.tif idw_tile.png -b 2 -ot Byte -of png -scale
> gdal_translate ./tile.tif count_tile.png -b 3 -ot Byte -of png -scale
> 
> …which produced valid pngs which worked as expected - greyscale rasterised point data that a web browser could view.
> 
> The nearest pipeline I could think of to generate a single writers.gdal ‘band’ as a PNG was:
> 
> {
> "pipeline": [
>  “/path/to/tile.las",
> {
>   "type": "filters.range",
>   "limits": "Classification[2:2]"
> },
> {
>   "type": "writers.gdal",
>   "resolution": 2.0,
>   "radius": 2.5,
>   "gdalopts":"ot=PNG",
>   "gdalopts":"co=scale",
>   "gdalopts":"ot=Byte",
>   "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>   "gdalopts":"co=b=1",
>   "filename": “tile.png",
>   "output_type": "idw"
>   }
>   ]
> }
> 
> …but this made a really big PNG (2mb, as opposed to single band pngs using an intermediate geotiff at < 150k) which was not readable by anything on my MacOS machine.
> 
> I’d happily take pipelne corrections! Lots of guessing there, and also lots of not knowing all the GDAL tricks!
> 
> Anyway, at a pinch, going gtiff -> png is possible, maybe slower than the required purpose?
> 
> HTH
> 
> Adam
> 
> 
> 
>> On 10 Jul 2017, at 10:21 pm, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
>> 
>> Gents:
>> I've run it with "all" bands and get a nice, huge PNG (grayscale and it's not doing the resize), that I can open and view in Opticks but nothing else.
>> 
>> On windoze, you can drag an image into Firefox, and it will display it. Firefox says it cannot display the image "because it contains errors".
>> 
>> 
>> 
>> 08.07.2017, 23:09, "Howard Butler" <howard at hobu.co>:
>>> Vladimir,
>>> 
>>> You need to be specific about what you mean by "cannot view the PNG with Firefox...".
>>> 
>>> The output of writers.gdal with the configuration you've provided is a 2-band PNG. That's probably not what you are expecting. Presumably you will want a colorized PNG or something? In that case, write out only the idw band as a PNG, and then use a GDAL VRT plus a color interpretation to convert that to a PNG that would be viewable in a way you'd expect in Firefox.
>>> 
>>> Hope this helps,
>>> 
>>> Howard
>>> 
>>> 
>>> On Jul 7, 2017, at 9:17 PM, Adam Steer <Adam.Steer at anu.edu.au> wrote:
>>> 
>>> HI Vladimir - can you check whether a PNG with just one ‘band’ (ie ‘max’ OR ‘idw’ but not both) works?
>>> 
>>> That’s all I can think of… I actually need to test this as well :) Next week…
>>> 
>>> Cheers
>>> 
>>> Adam
>>> 
>>> 
>>> On 8 Jul 2017, at 3:18 am, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
>>> 
>>> Trying to make a PNG from a .laz file to display in Firefox.
>>> 
>>> {
>>>  "pipeline":[
>>>    "somefile.laz",
>>>    {
>>>     "type":"writers.gdal",
>>>      "resolution": 1,
>>>      "output_type":"idw",
>>>      "output_type":"max",
>>>       "gdalopts":"of=PNG,outsize=128 128",
>>>       "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>>>      "filename":"outputfile.png"
>>>    }
>>>  ]
>>> }
>>> 
>>> The pipeline runs and produces a PNG. I cannot view the PNG with Firefox, MS Paint, or Windows Photo Viewer, HOWEVER, I can open it and view it in Opticks (https://sourceforge.net/projects/opticks/).
>>> 
>>> Opticks shows a single band grey scale image, probably representative of the original .laz.
>>> 
>>> Anything I'm doing wrong here producing the "corrupted" PNG?
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>> 
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20170731/df57c99c/attachment.html>

From Adam.Steer at anu.edu.au  Mon Jul 31 15:23:01 2017
From: Adam.Steer at anu.edu.au (Adam Steer)
Date: Mon, 31 Jul 2017 22:23:01 +0000
Subject: [pdal] writers.gdal produces "corrupt" PNGs?
In-Reply-To: <60AB1BA0-AE55-44EE-AEBD-18E3F34F1FD0@hobu.co>
References: <1018041499447938@web29g.yandex.ru>
 <BB70E94B-F4C8-427B-8228-931833C580EC@anu.edu.au>
 <3F9E35ED-37F5-4300-9DE9-B82DA899CE4F@hobu.co>
 <391551499689280@web23o.yandex.ru>
 <549032B6-AC4A-443D-B03A-9D0A96230B8E@anu.edu.au>
 <60AB1BA0-AE55-44EE-AEBD-18E3F34F1FD0@hobu.co>
Message-ID: <775D3627-2E58-4DB2-AF08-D502021DB9AC@anu.edu.au>

One thing we’re looking at is using GDAL’s MEM driver, I’ll try it and see - unfortunately my c++ experience is limited to changing the names of includes…  :/ but i can test things!

Cheers

Adam



> On 1 Aug 2017, at 3:24 am, Howard Butler <howard at hobu.co> wrote:
> 
> There's a ticket to improve PDAL's writers.gdal to support more options and output data types. That will make things work better, but the development hasn't happened quite yet.
> 
> Stick with outputting GeoTIFF for now and then do gdal_translate/gdalwarp as you need as Adam's describing.
> 
> https://github.com/PDAL/PDAL/issues/1497
> 
> Howard
> 
>> On Jul 30, 2017, at 11:28 PM, Adam Steer <Adam.Steer at anu.edu.au> wrote:
>> 
>> Hi all
>> 
>> finally got to some testing with this.
>> 
>> Input: a LAS tile
>> Expected outputs: PNG files showing grayscale images of point attributes, gridded according to some input parameters about cell sizing
>> 
>> I think what happens here is that PNG expects 3 bands, and I’m trying to make greyscale images. After a lot of trying GDAL options, I ended up just writing out a GeoTIFF and then using gdal_translate to carve out my PNGs, eg:
>> 
>> {
>> "pipeline": [
>>  “/path/to/tile.las",
>> {
>>   "type": "filters.range",
>>   "limits": "Classification[2:2]"
>> },
>> {
>>   "type": "writers.gdal",
>>   "resolution": 2.0,
>>   "radius": 2.5,
>>   "gdaldriver":"GTiff",
>>   "filename": “tile.tif",
>>   "output_type": "mean,idw,count"
>>   }
>>   ]
>> }
>> 
>> …and then:
>> gdal_translate ./tile.tif mean_tile.png -b 1 -ot Byte -of png -scale
>> gdal_translate ./tile.tif idw_tile.png -b 2 -ot Byte -of png -scale
>> gdal_translate ./tile.tif count_tile.png -b 3 -ot Byte -of png -scale
>> 
>> …which produced valid pngs which worked as expected - greyscale rasterised point data that a web browser could view.
>> 
>> The nearest pipeline I could think of to generate a single writers.gdal ‘band’ as a PNG was:
>> 
>> {
>> "pipeline": [
>>  “/path/to/tile.las",
>> {
>>   "type": "filters.range",
>>   "limits": "Classification[2:2]"
>> },
>> {
>>   "type": "writers.gdal",
>>   "resolution": 2.0,
>>   "radius": 2.5,
>>   "gdalopts":"ot=PNG",
>>   "gdalopts":"co=scale",
>>   "gdalopts":"ot=Byte",
>>   "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>>   "gdalopts":"co=b=1",
>>   "filename": “tile.png",
>>   "output_type": "idw"
>>   }
>>   ]
>> }
>> 
>> …but this made a really big PNG (2mb, as opposed to single band pngs using an intermediate geotiff at < 150k) which was not readable by anything on my MacOS machine.
>> 
>> I’d happily take pipelne corrections! Lots of guessing there, and also lots of not knowing all the GDAL tricks!
>> 
>> Anyway, at a pinch, going gtiff -> png is possible, maybe slower than the required purpose?
>> 
>> HTH
>> 
>> Adam
>> 
>> 
>> 
>>> On 10 Jul 2017, at 10:21 pm, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
>>> 
>>> Gents:
>>> I've run it with "all" bands and get a nice, huge PNG (grayscale and it's not doing the resize), that I can open and view in Opticks but nothing else.
>>> 
>>> On windoze, you can drag an image into Firefox, and it will display it. Firefox says it cannot display the image "because it contains errors".
>>> 
>>> 
>>> 
>>> 08.07.2017, 23:09, "Howard Butler" <howard at hobu.co>:
>>>> Vladimir,
>>>> 
>>>> You need to be specific about what you mean by "cannot view the PNG with Firefox...".
>>>> 
>>>> The output of writers.gdal with the configuration you've provided is a 2-band PNG. That's probably not what you are expecting. Presumably you will want a colorized PNG or something? In that case, write out only the idw band as a PNG, and then use a GDAL VRT plus a color interpretation to convert that to a PNG that would be viewable in a way you'd expect in Firefox.
>>>> 
>>>> Hope this helps,
>>>> 
>>>> Howard
>>>> 
>>>> 
>>>> On Jul 7, 2017, at 9:17 PM, Adam Steer <Adam.Steer at anu.edu.au> wrote:
>>>> 
>>>> HI Vladimir - can you check whether a PNG with just one ‘band’ (ie ‘max’ OR ‘idw’ but not both) works?
>>>> 
>>>> That’s all I can think of… I actually need to test this as well :) Next week…
>>>> 
>>>> Cheers
>>>> 
>>>> Adam
>>>> 
>>>> 
>>>> On 8 Jul 2017, at 3:18 am, Vladimir Sandoval <vladimir.sandoval at yandex.com> wrote:
>>>> 
>>>> Trying to make a PNG from a .laz file to display in Firefox.
>>>> 
>>>> {
>>>>  "pipeline":[
>>>>    "somefile.laz",
>>>>    {
>>>>     "type":"writers.gdal",
>>>>      "resolution": 1,
>>>>      "output_type":"idw",
>>>>      "output_type":"max",
>>>>       "gdalopts":"of=PNG,outsize=128 128",
>>>>       "gdalopts":"co=WRITE_METADATA_AS_TEXT=NO",
>>>>      "filename":"outputfile.png"
>>>>    }
>>>>  ]
>>>> }
>>>> 
>>>> The pipeline runs and produces a PNG. I cannot view the PNG with Firefox, MS Paint, or Windows Photo Viewer, HOWEVER, I can open it and view it in Opticks (https://sourceforge.net/projects/opticks/).
>>>> 
>>>> Opticks shows a single band grey scale image, probably representative of the original .laz.
>>>> 
>>>> Anything I'm doing wrong here producing the "corrupted" PNG?
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>> 
>>>> _______________________________________________
>>>> pdal mailing list
>>>> pdal at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/pdal
>>>> 
>> 
> 


