From flatearth at gmx.net  Tue Mar  1 11:06:21 2016
From: flatearth at gmx.net (FE)
Date: Tue, 1 Mar 2016 20:06:21 +0100
Subject: [pdal] pdal ground options '--max_window_size' and '--approximate'
Message-ID: <trinity-69eeb10d-302b-4f6b-9160-cee618327fc1-1456859181516@3capp-gmx-bs52>

Sorry for the late reply.

I've thoroughly tested everything again. When setting '--max_window_size' smaller than 1.0, then all points in the resulting las-file are class 2 (ground). Indeed, the command runs to completion but the results are as said. Further, with --max_window_size smaller than 1.0 a verbose level like '-v4' does not show any information such as iterations or anything else. When setting --max_window_size="1.0" everything works well.

The command I use is e.g.:
pdal ground -i in.las  -o out.las --classify --cell_size="0.01" --max_window_size="0.33" --slope="0.18" -v4


I've tested this both with my own pdal built on OS X as well as on Windows with the OSGEO4W installer. On both systems I use stable pdal version 1.1.0 and pcl 1.7.2. The behaviour is the same.




Concerning the '--approximate' option pdal ground seems to ignore at least --cell_size and --max_window_size. This means when running the following command with --approximate:

pdal ground -i in.las  -o out.las --classify --cell_size="0.01" --max_window_size="1.0" --slope="0.18" --approximate -v4

then there is only a single iteration with a much too large window size of 3.0. The window size remains the same independent fro the options I set. The result only has very few ground points located in one small corner of the dataset:

Iteration 0 (height threshold = 0.150000, window size = 3.000000, half size = 1)...ground now has 510 points


The same command without '--approximate' correctly uses much smaller window sizes in multiple iterations:

Iteration 0 (height threshold = 0.150000, window size = 0.030000)...ground now has 3537994 points
Iteration 1 (height threshold = 0.150140, window size = 0.050000)...ground now has 3127295 points
Iteration 2 (height threshold = 0.150280, window size = 0.090000)...ground now has 2747546 points
Iteration 3 (height threshold = 0.150560, window size = 0.170000)...ground now has 2409347 points
Iteration 4 (height threshold = 0.151120, window size = 0.330000)...ground now has 2136748 points
Iteration 5 (height threshold = 0.152240, window size = 0.650000)...ground now has 1972242 points
Iteration 6 (height threshold = 0.154480, window size = 1.290000)...ground now has 1829280 points    



Besides, I am a bit confused concerning the correct syntax of the command options. Sometimes the options are written without '=' and quotes, sometimes only with '=' and sometimes with both:

--max_window_size 0.33
--max_window_size=0.33
--max_window_size="0.33"

Which is the correct writing? Or are they all valid?


Thanks a lot for your help!


From andrew.bell.ia at gmail.com  Tue Mar  1 11:30:33 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 1 Mar 2016 13:30:33 -0600
Subject: [pdal] pdal ground options '--max_window_size' and
	'--approximate'
In-Reply-To: <trinity-69eeb10d-302b-4f6b-9160-cee618327fc1-1456859181516@3capp-gmx-bs52>
References: <trinity-69eeb10d-302b-4f6b-9160-cee618327fc1-1456859181516@3capp-gmx-bs52>
Message-ID: <CACJ51z3Ek7d7SmoSU=TpPkdYvLGW4hXCyg2hRDGAVDB2as=vPw@mail.gmail.com>

On Tue, Mar 1, 2016 at 1:06 PM, FE <flatearth at gmx.net> wrote:

> Sorry for the late reply.
>
>
> Besides, I am a bit confused concerning the correct syntax of the command
> options. Sometimes the options are written without '=' and quotes,
> sometimes only with '=' and sometimes with both:
>
> --max_window_size 0.33
> --max_window_size=0.33
> --max_window_size="0.33"
>
> Which is the correct writing? Or are they all valid?
>

They should all be valid.  In the next release, PDAL should tell you if the
syntax is incorrect.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160301/bac4af65/attachment.html>

From brad.chambers at gmail.com  Thu Mar 10 08:47:38 2016
From: brad.chambers at gmail.com (Bradley Chambers)
Date: Thu, 10 Mar 2016 16:47:38 +0000
Subject: [pdal] JSON pipelines
Message-ID: <CAJyqqPxekSLy_DgYsz9xVxtFfpGOxuh1_RH_Yz+Le3-d+QcRrw@mail.gmail.com>

Interested in specifying your PDAL pipeline as a JSON [1] rather than XML?

If you are building from PDAL master [2] or running the latest PDAL docker
image [3], you now can!

For many pipelines, the JSON representation is much easier on the eyes. For
example, a simple conversion from LAS to LAZ in XML is:

<?xml version="1.0" encoding="utf-8"?>
<Pipeline version="1.0">
    <Writer type="writers.las">
        <Option name="filename">
            output.laz
        </Option>
        <Reader type="readers.las">
            <Option name="filename">
                input.las
            </Option>
        </Reader>
    </Writer>
</Pipeline>

In JSON, this is simplified to:

{
    "pipeline":[
        "input.las",
        "output.laz"
    ]
}

Of course, you can still set options on the stages.

{
    "pipeline":[
        "input.bpf",
        {
            "filename":"output.las",
            "scale_x":0.01,
            "scale_y":0.01,
            "scale_z":0.01,
        }
    ]
}

And insert filtering operations.

{
    "pipeline":[
        {
            "filename":"input.las",
            "spatialreference":"EPSG:2027"
        },
        {
            "type":"filters.reprojection",
            "out_srs":"EPSG:2028"
        },
        "output.laz"
    ]
}

Unless otherwise specified, pipelines are processed top-down, with each
stage serving as input to the subsequently specified stage. But...

Using tags, you can now also wire up pipelines in a way that would not have
been possible given the XML syntax. For example, the following pipeline
specifies multiple readers that are merged together, but only after one has
been passed through a decimation filter.

{
    "pipeline":[
        {
            "filename":"input1.las",
            "tag":"reader1"
        },
        {
            "filename":"input2.las",
            "tag":"reader2"
        },
        {
            "type":"filters.decimation",
            "step":2,
            "inputs":[
                "reader1"
            ],
            "tag":"sampled"
        },
        {
            "type":"filters.merge",
            "inputs":[
                "sampled",
                "reader2"
            ]
        },
        "output.las"
    ]
}

The full JSON pipeline specification can be found here [4].

Of course, if you'd rather not make the switch, the PDAL pipeline command,
for now, will continue to accept XML pipelines.

Happy processing!

Brad

[1] http://www.json.org/
[2] https://github.com/PDAL/PDAL/tree/master
[3] https://hub.docker.com/r/pdal/pdal/
[4]
https://github.com/PDAL/PDAL/blob/master/doc/json_pipeline_specification.rst
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160310/2727484d/attachment.html>

From howard at hobu.co  Thu Mar 10 09:09:12 2016
From: howard at hobu.co (Howard Butler)
Date: Thu, 10 Mar 2016 11:09:12 -0600
Subject: [pdal] JSON pipelines
In-Reply-To: <CAJyqqPxekSLy_DgYsz9xVxtFfpGOxuh1_RH_Yz+Le3-d+QcRrw@mail.gmail.com>
References: <CAJyqqPxekSLy_DgYsz9xVxtFfpGOxuh1_RH_Yz+Le3-d+QcRrw@mail.gmail.com>
Message-ID: <49D2DFF1-CD6C-4F61-A784-742BCCBE89ED@hobu.co>


> On Mar 10, 2016, at 10:47 AM, Bradley Chambers <brad.chambers at gmail.com> wrote:
> 
> For many pipelines, the JSON representation is much easier on the eyes. For example, a simple conversion from LAS to LAZ in XML is:
> 
> <?xml version="1.0" encoding="utf-8"?>
> <Pipeline version="1.0">
>     <Writer type="writers.las">
>         <Option name="filename">
>             output.laz
>         </Option>
>         <Reader type="readers.las">
>             <Option name="filename">
>                 input.las
>             </Option>
>         </Reader>
>     </Writer>
> </Pipeline>
> 
> In JSON, this is simplified to:
> 
> {
>     "pipeline":[
>         "input.las",
>         "output.laz"
>     ]
> }
> 

...

Brad,

Thanks so much for providing so much effort on this. I hope it simplifies the somewhat confusing inside-out XML stuff for people, and it makes it much easier to integrate PDAL in other processing chains.


> Of course, if you'd rather not make the switch, the PDAL pipeline command, for now, will continue to accept XML pipelines.

The writing is on the wall, however. We will commit to support XML pipelines for three or so releases, and then as-needed going forward from that. If you are building new functionality, please build it with JSON.

Howard


From postmaster at helimap.ch  Tue Mar 15 09:40:14 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Tue, 15 Mar 2016 17:40:14 +0100
Subject: [pdal] Fwd: Change the pdal container
In-Reply-To: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
Message-ID: <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>

Hello all,

This is a follow-up on a discussion started on liblas-devel mailing list
with subject 'How to use a cached reader (c++)'.

The question it has come to is, how can I change the pdal cloud container?
The cloud container, not the point container, that is, the container that
stores all the points.

I've seen that pdal uses a std::set as a container
<https://github.com/PDAL/PDAL/blob/master/include/pdal/PointView.hpp#L66>
for the cloud, but std::set doesn't play with the parallel access of an
openmp 2.0 for loop, which can only handle std::vector or std::queue.

Is it possible to re-implement PointView class to use a
std::vector<PointViewPtr>? Is it possible for me to access this vector?

The first simple scenario is that I read the full pointcloud and store it
into a std::vector<PointViewPtr>, then I process each point in parallel in
an openmp for loop, and finally I save the modified std::vector to a new
las file. The process is roughly adding color to each las point.

Cheers!

Pol
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160315/fb1e988e/attachment.html>

From andrew.bell.ia at gmail.com  Tue Mar 15 15:05:30 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Tue, 15 Mar 2016 17:05:30 -0500
Subject: [pdal] Fwd: Change the pdal container
In-Reply-To: <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
Message-ID: <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>

On Tue, Mar 15, 2016 at 11:40 AM, Helimap Postmaster <postmaster at helimap.ch>
wrote:

>
> Hello all,
>
> This is a follow-up on a discussion started on liblas-devel mailing list
> with subject 'How to use a cached reader (c++)'.
>
> The question it has come to is, how can I change the pdal cloud container?
> The cloud container, not the point container, that is, the container that
> stores all the points.
>
> I've seen that pdal uses a std::set as a container
> <https://github.com/PDAL/PDAL/blob/master/include/pdal/PointView.hpp#L66>
> for the cloud, but std::set doesn't play with the parallel access of an
> openmp 2.0 for loop, which can only handle std::vector or std::queue.
>

Well, not exactly.  By default PDAL has a set of buffers that contain the
points.  You're welcome to implement a class derived from BasePointTable
and arrange the data as you like.

Is it possible to re-implement PointView class to use a
> std::vector<PointViewPtr>? Is it possible for me to access this vector?
>

If what you're wanting to do is simply loop through points that you read,
you'd only have a single view into a single table.  The access is direct
from the view to the table. The table, by default, stores data in a vector
of blocks, the blocks being memory containing points.

The first simple scenario is that I read the full pointcloud and store it
> into a std::vector<PointViewPtr>, then I process each point in parallel in
> an openmp for loop, and finally I save the modified std::vector to a new
> las file. The process is roughly adding color to each las point.
>

I'm not sure why you need openmp, but I won't question.  If your colorizing
algorithm is slow, then perhaps some threading system will be helpful.  But
I'm not sure that you're worrying anything that is necessarily a problem
given what you've said so far.  I certainly can't see any reason for a
vector of point views.  If you're reading a single file, one PointView
should suffice and be all that is normally created.  All points should be
accessible through the one PointView.

The normal way to attack these problems is to first come up with a
single-threaded solution and then optimize through threading as necessary.
Writing the base code will clarify issues and allow others to help you
better than we can at this time.

Best,

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160315/bee85950/attachment.html>

From postmaster at helimap.ch  Wed Mar 16 05:16:31 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 16 Mar 2016 13:16:31 +0100
Subject: [pdal] Fwd: Change the pdal container
In-Reply-To: <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
 <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
Message-ID: <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>

Hello Andrew,

Thanks for digging in the issue! Unfortunately, I am not familiar yet with
the 'views' and 'tables' terminology... What I need after the read of the
las is a std::vector<float3> with the x,y,z coordinates of the las' points.
I think there has been a little confusion with that. My las file is
millions of points that I need to colorize (in parallel). At the moment I
have it working for ascii xyzc to xyzrgb. I want to add las support, and
therefore I have to read the las cloud, colorize each pixel and save it.

There is indeed only one cloud, one single file.

My raw issue regards how can I get a std::vector<float3> (float3 is a
struct with 3 doubles, but could be whatever pdal needs so long as it
stores the raw x,y,z coordinates).

Maybe I've pinpoint the wrong place, I thought the std::set was the
underlying container storing the points, but apparently I am wrong? If so,
where is the container, how to retrieve it and is it a std::vector?

cheers,

Pol

On Tue, Mar 15, 2016 at 11:05 PM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> On Tue, Mar 15, 2016 at 11:40 AM, Helimap Postmaster <
> postmaster at helimap.ch> wrote:
>
>>
>> Hello all,
>>
>> This is a follow-up on a discussion started on liblas-devel mailing list
>> with subject 'How to use a cached reader (c++)'.
>>
>> The question it has come to is, how can I change the pdal cloud
>> container? The cloud container, not the point container, that is, the
>> container that stores all the points.
>>
>> I've seen that pdal uses a std::set as a container
>> <https://github.com/PDAL/PDAL/blob/master/include/pdal/PointView.hpp#L66>
>> for the cloud, but std::set doesn't play with the parallel access of an
>> openmp 2.0 for loop, which can only handle std::vector or std::queue.
>>
>
> Well, not exactly.  By default PDAL has a set of buffers that contain the
> points.  You're welcome to implement a class derived from BasePointTable
> and arrange the data as you like.
>
> Is it possible to re-implement PointView class to use a
>> std::vector<PointViewPtr>? Is it possible for me to access this vector?
>>
>
> If what you're wanting to do is simply loop through points that you read,
> you'd only have a single view into a single table.  The access is direct
> from the view to the table. The table, by default, stores data in a vector
> of blocks, the blocks being memory containing points.
>
> The first simple scenario is that I read the full pointcloud and store it
>> into a std::vector<PointViewPtr>, then I process each point in parallel in
>> an openmp for loop, and finally I save the modified std::vector to a new
>> las file. The process is roughly adding color to each las point.
>>
>
> I'm not sure why you need openmp, but I won't question.  If your
> colorizing algorithm is slow, then perhaps some threading system will be
> helpful.  But I'm not sure that you're worrying anything that is
> necessarily a problem given what you've said so far.  I certainly can't see
> any reason for a vector of point views.  If you're reading a single file,
> one PointView should suffice and be all that is normally created.  All
> points should be accessible through the one PointView.
>
> The normal way to attack these problems is to first come up with a
> single-threaded solution and then optimize through threading as necessary.
> Writing the base code will clarify issues and allow others to help you
> better than we can at this time.
>
> Best,
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160316/b74e3d70/attachment.html>

From howard at hobu.co  Wed Mar 16 07:14:48 2016
From: howard at hobu.co (Howard Butler)
Date: Wed, 16 Mar 2016 09:14:48 -0500
Subject: [pdal] Change the pdal container
In-Reply-To: <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
 <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
 <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>
Message-ID: <5D84D4D8-EC9A-41A2-8BC9-2AFD9B5B9A77@hobu.co>


> On Mar 16, 2016, at 7:16 AM, Helimap Postmaster <postmaster at helimap.ch> wrote:
> 
> Hello Andrew,
> 
> Thanks for digging in the issue! Unfortunately, I am not familiar yet with the 'views' and 'tables' terminology... What I need after the read of the las is a std::vector<float3> with the x,y,z coordinates of the las' points.

It's not very clear what you are actually asking for. Do you just want all of the XYZ data of an LAS file to be in a std::vector<float> after reading? If so, just read the data up and then copy it from the PointView using getFieldAs<float> and be on your way.

> I think there has been a little confusion with that. My las file is millions of points that I need to colorize (in parallel). At the moment I have it working for ascii xyzc to xyzrgb. I want to add las support, and therefore I have to read the las cloud, colorize each pixel and save it.

filters.colorization does exactly this. See http://www.pdal.io/stages/filters.colorization.html Running it over 20 million points should only be seconds. It is actually most sensitive to GDAL's raster cache settings more than anything.

I would also note that I think your approach to parallelization is The Hard Way. LiDAR and point cloud workflows often start with chopping things up into tiles, virtual or real, and then processing those pieces individually. The data are frequently at rest ready to go for this scenario. While not always ideal for every processing task (how do you interpolate over edges?), it's a tried-and-true approach. PDAL right now expects that you are doing your fan-out at the process level (run over a bunch of tiles) rather than the intra-process one (run parallel over a single tile). 

That's not to say it's impossible to do the latter, but it's just not the expected operating mode. As Andrew mentioned, you can implement your own storage to do things in whatever fashion you wish. 

Howard



From postmaster at helimap.ch  Wed Mar 16 08:12:47 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 16 Mar 2016 16:12:47 +0100
Subject: [pdal] Change the pdal container
In-Reply-To: <5D84D4D8-EC9A-41A2-8BC9-2AFD9B5B9A77@hobu.co>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
 <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
 <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>
 <5D84D4D8-EC9A-41A2-8BC9-2AFD9B5B9A77@hobu.co>
Message-ID: <CALAZn4gO8djUX+wTrtBEnRQAp4O763KgMBznVzgi9MA7G=AcsA@mail.gmail.com>

Comments inline:

On Wed, Mar 16, 2016 at 3:14 PM, Howard Butler <howard at hobu.co> wrote:

>
> > On Mar 16, 2016, at 7:16 AM, Helimap Postmaster <postmaster at helimap.ch>
> wrote:
> >
> > Hello Andrew,
> >
> > Thanks for digging in the issue! Unfortunately, I am not familiar yet
> with the 'views' and 'tables' terminology... What I need after the read of
> the las is a std::vector<float3> with the x,y,z coordinates of the las'
> points.
>
> It's not very clear what you are actually asking for. Do you just want all
> of the XYZ data of an LAS file to be in a std::vector<float> after reading?
> If so, just read the data up and then copy it from the PointView using
> getFieldAs<float> and be on your way.
>

I want to have a huge std::vector<float3> with the xyz information of the
las or a huge std::vector<*SomeLasPointThing*>. three floats, one per
component. Re-copying the millions of points once read seems expensive; I'd
rather store them correctly directly or at least std::move them.


>
> > I think there has been a little confusion with that. My las file is
> millions of points that I need to colorize (in parallel). At the moment I
> have it working for ascii xyzc to xyzrgb. I want to add las support, and
> therefore I have to read the las cloud, colorize each pixel and save it.
>
> filters.colorization does exactly this. See
> http://www.pdal.io/stages/filters.colorization.html Running it over 20
> million points should only be seconds. It is actually most sensitive to
> GDAL's raster cache settings more than anything.
>

It's not a 1to1 colorization. I didn't go into detail: I am projecting the
images using the intrinsic and extrinsic coordinates of the images, which
are geolocalised. Thus, there is some computation involved. My educated
guess is the filter does not do that, given that the camera parameters are
not part of the input.


> I would also note that I think your approach to parallelization is The
> Hard Way. LiDAR and point cloud workflows often start with chopping things
> up into tiles, virtual or real, and then processing those pieces
> individually. The data are frequently at rest ready to go for this
> scenario. While not always ideal for every processing task (how do you
> interpolate over edges?), it's a tried-and-true approach. PDAL right now
> expects that you are doing your fan-out at the process level (run over a
> bunch of tiles) rather than the intra-process one (run parallel over a
> single tile).
>

Is the tiling really that rellevant here? Since I am colorizing a point
cloud and each point is independent, 'tiling' could also mean grabbing N
points per iteration. There is no blending necessary. Take one point, find
the appropiate image, reproject to the image, get pixel color, save
point+color. I'd like buffered reading for the I/O efficiency.

I haven't brought the tiling to the mix, I didn't deem it rellevant at the
time. But that's not really important because the las clouds usually fit in
memory, the only possible problem being the contiguous memory allocation.

I can comment that on another application we have we do tile. Good to know
that the usual way is paralellize per tile rather than per pixel. My guess
to doing it The Hard Way was related to the amount of points and images
loaded into memory. First, there are less cloud points loaded at once (at
least the rgb cloud can be kept at tile-size), and second if I process
per-pixel, less images will be concurrently loaded, since threads can share
images while coloring. With 15 gb of ram, no more than 30 images should be
loaded.

In this second application's context, loading and unloading images takes as
much time as coloring the clouds[1], that's why I was a little biased so
that the processed points would be close to each other. But taking into
consideration your comment, it might work just as well paralelizing per
chunk... I would have to think about it, but we might be drifting to
another discussion?

Cheers,

Pol


[1] At the moment we aren't being smart on what we load from the image, we
load all of it, there might be some improvement there.


>
> That's not to say it's impossible to do the latter, but it's just not the
> expected operating mode. As Andrew mentioned, you can implement your own
> storage to do things in whatever fashion you wish.
>
> Howard
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160316/82268c1f/attachment-0001.html>

From howard at hobu.co  Wed Mar 16 08:37:23 2016
From: howard at hobu.co (Howard Butler)
Date: Wed, 16 Mar 2016 10:37:23 -0500
Subject: [pdal] Change the pdal container
In-Reply-To: <CALAZn4gO8djUX+wTrtBEnRQAp4O763KgMBznVzgi9MA7G=AcsA@mail.gmail.com>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
 <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
 <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>
 <5D84D4D8-EC9A-41A2-8BC9-2AFD9B5B9A77@hobu.co>
 <CALAZn4gO8djUX+wTrtBEnRQAp4O763KgMBznVzgi9MA7G=AcsA@mail.gmail.com>
Message-ID: <2B4880A6-3DE6-418D-B238-E8F45B07F6BC@hobu.co>


> On Mar 16, 2016, at 10:12 AM, Helimap Postmaster <postmaster at helimap.ch> wrote:
> 
> It's not a 1to1 colorization. I didn't go into detail: I am projecting the images using the intrinsic and extrinsic coordinates of the images, which are geolocalised. Thus, there is some computation involved. My educated guess is the filter does not do that, given that the camera parameters are not part of the input.

Indeed it does not. It's just a top-down projection.

> Is the tiling really that rellevant here? Since I am colorizing a point cloud and each point is independent, 'tiling' could also mean grabbing N points per iteration. There is no blending necessary. Take one point, find the appropiate image, reproject to the image, get pixel color, save point+color. I'd like buffered reading for the I/O efficiency.
> 
> I haven't brought the tiling to the mix, I didn't deem it rellevant at the time. But that's not really important because the las clouds usually fit in memory, the only possible problem being the contiguous memory allocation.

The default pdal::PointTable storage implementation doesn't contiguously allocate. 

Note that my calling things The Hard Way was not meant to imply it was The Wrong Way :)

> I can comment that on another application we have we do tile. Good to know that the usual way is paralellize per tile rather than per pixel. My guess to doing it The Hard Way was related to the amount of points and images loaded into memory. First, there are less cloud points loaded at once (at least the rgb cloud can be kept at tile-size), and second if I process per-pixel, less images will be concurrently loaded, since threads can share images while coloring. With 15 gb of ram, no more than 30 images should be loaded.
> 
> In this second application's context, loading and unloading images takes as much time as coloring the clouds[1], that's why I was a little biased so that the processed points would be close to each other. But taking into consideration your comment, it might work just as well paralelizing per chunk... I would have to think about it, but we might be drifting to another discussion? 

It seems to me you want fine(er) control over how PDAL stores its data without having the copying overhead. To do that, you need to implement your own PointTable/PointView. There are examples of folks doing that.

Howard

From postmaster at helimap.ch  Wed Mar 16 08:39:05 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 16 Mar 2016 16:39:05 +0100
Subject: [pdal] Change the pdal container
In-Reply-To: <2B4880A6-3DE6-418D-B238-E8F45B07F6BC@hobu.co>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
 <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
 <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>
 <5D84D4D8-EC9A-41A2-8BC9-2AFD9B5B9A77@hobu.co>
 <CALAZn4gO8djUX+wTrtBEnRQAp4O763KgMBznVzgi9MA7G=AcsA@mail.gmail.com>
 <2B4880A6-3DE6-418D-B238-E8F45B07F6BC@hobu.co>
Message-ID: <CALAZn4i0c0XfMdXPOARjf63AT6Uq2o09pzPLijHDrbVw7Fen5A@mail.gmail.com>

Will do! I am very grateful for your support.

All the Best,

Pol

On Wed, Mar 16, 2016 at 4:37 PM, Howard Butler <howard at hobu.co> wrote:

>
> > On Mar 16, 2016, at 10:12 AM, Helimap Postmaster <postmaster at helimap.ch>
> wrote:
> >
> > It's not a 1to1 colorization. I didn't go into detail: I am projecting
> the images using the intrinsic and extrinsic coordinates of the images,
> which are geolocalised. Thus, there is some computation involved. My
> educated guess is the filter does not do that, given that the camera
> parameters are not part of the input.
>
> Indeed it does not. It's just a top-down projection.
>
> > Is the tiling really that rellevant here? Since I am colorizing a point
> cloud and each point is independent, 'tiling' could also mean grabbing N
> points per iteration. There is no blending necessary. Take one point, find
> the appropiate image, reproject to the image, get pixel color, save
> point+color. I'd like buffered reading for the I/O efficiency.
> >
> > I haven't brought the tiling to the mix, I didn't deem it rellevant at
> the time. But that's not really important because the las clouds usually
> fit in memory, the only possible problem being the contiguous memory
> allocation.
>
> The default pdal::PointTable storage implementation doesn't contiguously
> allocate.
>
> Note that my calling things The Hard Way was not meant to imply it was The
> Wrong Way :)
>
> > I can comment that on another application we have we do tile. Good to
> know that the usual way is paralellize per tile rather than per pixel. My
> guess to doing it The Hard Way was related to the amount of points and
> images loaded into memory. First, there are less cloud points loaded at
> once (at least the rgb cloud can be kept at tile-size), and second if I
> process per-pixel, less images will be concurrently loaded, since threads
> can share images while coloring. With 15 gb of ram, no more than 30 images
> should be loaded.
> >
> > In this second application's context, loading and unloading images takes
> as much time as coloring the clouds[1], that's why I was a little biased so
> that the processed points would be close to each other. But taking into
> consideration your comment, it might work just as well paralelizing per
> chunk... I would have to think about it, but we might be drifting to
> another discussion?
>
> It seems to me you want fine(er) control over how PDAL stores its data
> without having the copying overhead. To do that, you need to implement your
> own PointTable/PointView. There are examples of folks doing that.
>
> Howard
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160316/03250c7b/attachment.html>

From metazool at fastmail.net  Thu Mar 17 10:00:16 2016
From: metazool at fastmail.net (Jo Walsh)
Date: Thu, 17 Mar 2016 17:00:16 +0000
Subject: [pdal] UK point cloud data trickles out
Message-ID: <e1f85a63-7ab2-403e-805c-58426bac55d4@email.android.com>

Howard, you were asking about DEFRA's release of UK point cloud data; there are now samples, with the rest still due June 2016: https://defradigital.blog.gov.uk/2016/03/17/exploring-the-laser-cloud/

cheers,


Jo

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160317/b96077d6/attachment.html>

From andrew.bell.ia at gmail.com  Thu Mar 17 15:15:24 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Thu, 17 Mar 2016 17:15:24 -0500
Subject: [pdal] Fwd: Change the pdal container
In-Reply-To: <CALAZn4gPPTVJa0j78K60oehbKdP04mBGGqTGV_bsmqBMsj1Gxg@mail.gmail.com>
References: <CALAZn4jYgj0RG4FgxS9B_GFkAD=bAZ2nrmTXqhECkf=ByTQXMA@mail.gmail.com>
 <CALAZn4jo8tmCQ5+3nuZsU9nsGwEgwSoJMSJM4VX71YFHpqqSzQ@mail.gmail.com>
 <CACJ51z3jZbqHfWPCDeBSu54MJ2F02AbhQiYTKbzALgwOOodHrw@mail.gmail.com>
 <CALAZn4iDBF6qTtK+S8QCQaNU4Uf=sS7M1U6KcACX7cp_edvd2A@mail.gmail.com>
 <CACJ51z2H2gRLtp21d2g25Bmwhu7D15BRcE4kfE-2m5z8D9FG1w@mail.gmail.com>
 <CALAZn4gPPTVJa0j78K60oehbKdP04mBGGqTGV_bsmqBMsj1Gxg@mail.gmail.com>
Message-ID: <CACJ51z34YPnK8eqGO8eQ6LpQhZUD-TUo4mbXzJzVNBRBEwY49A@mail.gmail.com>

On Wed, Mar 16, 2016 at 7:38 AM, Helimap Postmaster <postmaster at helimap.ch>
wrote:

> Ok perfect!
>
> That's all I needed to know, I will derive BasePointTable and see how it
> goes.
>
> Could you send me a link about how the 'default' way works? Does it load
> chunk by chunk or point by point? Because the former could be interesting
> as well for me since I could process chunk by chunk and provide
> intermediate results.
>

You can do various things.  Normally LAS points get read in blocks to
improve performance, but all points are loaded before the buffer is handed
off to the next processing step (your colorization).  You can subclass
SimplePointTable to use the standard (non-streaming) interface.  As an
alternative, you can subclass StreamPointTable and then use the streaming
interface, loading as many points into the buffer as you like to process at
once.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160317/f46dad34/attachment.html>

From howard at hobu.co  Sun Mar 20 10:50:39 2016
From: howard at hobu.co (Howard Butler)
Date: Sun, 20 Mar 2016 12:50:39 -0500
Subject: [pdal] UK point cloud data trickles out
In-Reply-To: <e1f85a63-7ab2-403e-805c-58426bac55d4@email.android.com>
References: <e1f85a63-7ab2-403e-805c-58426bac55d4@email.android.com>
Message-ID: <998DADCE-0D6E-4B50-9BDA-01BD8E47A416@hobu.co>


> On Mar 17, 2016, at 12:00 PM, Jo Walsh <metazool at fastmail.net> wrote:
> 
> Howard, you were asking about DEFRA's release of UK point cloud data; there are now samples, with the rest still due June 2016: https://defradigital.blog.gov.uk/2016/03/17/exploring-the-laser-cloud/

Is there a simple bulk download page anywhere to be found? 

From howard at hobu.co  Sun Mar 20 10:56:35 2016
From: howard at hobu.co (Howard Butler)
Date: Sun, 20 Mar 2016 12:56:35 -0500
Subject: [pdal] 1.2 Release Plan for this week
Message-ID: <7A353614-DECB-458F-862B-806E11AA2244@hobu.co>

All,

We've done a big slug of work in preparation for the PDAL 1.2 release[1]. I would like to wrap it up by the end of the week. The only release blocker I see is the challenging Python issue [2]. 

Thanks to Bas for the numerous packaging pull requests in the past few days. If there are any more outstanding packaging patches that need to be upstreamed, please push them across at us this week.

If you have any pressing blocker, please speak up. The 1.3 release is scheduled to be late summer (August or September). We will do our best this week to knock down outstanding issues and plan to issue the release on Thursday.

Thanks,

Howard

[1] https://github.com/PDAL/PDAL/issues?q=milestone%3A1.2+is%3Aclosed
[2] https://github.com/PDAL/PDAL/issues/1174


From scott.lewis at nsidc.org  Mon Mar 28 11:51:05 2016
From: scott.lewis at nsidc.org (Scott Lewis)
Date: Mon, 28 Mar 2016 12:51:05 -0600
Subject: [pdal] Compile issue
Message-ID: <56F97D19.8010304@nsidc.org>

I'm having an issue compiling the latest pull of PDAL.  I'm using a Mac, 
but am following the Unix instructions (as I was able to compile just 
fine a few months ago).  I am using a clean clone.

I run cmake and then make, and it chugs along happily until this point:

[ 19%] Linking CXX shared library ../lib/libpdalcpp.dylib
ld: file not found: 
/Users/glewis/git/pdal-local/makefiles/lib/libpdal_util.2.dylib
clang: error: linker command failed with exit code 1 (use -v to see 
invocation)
make[2]: *** [lib/libpdalcpp.3.0.0.dylib] Error 1
make[1]: *** [src/CMakeFiles/pdalcpp.dir/all] Error 2
make: *** [all] Error 2

(in this case, I had run make previously, and the 19% was 27% in that 
case, but it was the same error).


In the folder specified there doesn't seem to be any libpdal_util files. 
  I tried it on a clone I had from before, and in that case there was a 
libpdal_util file, but it was not the file it expected (either 
libpdal_util.1.dylib or libpdal_util.2.0.0.dylib).

I've tried to look through the docs to see if there's something I'm 
missing, but if there is, I'm not seeing it.

Thanks!

Scott Lewis
NSIDC

From andrew.bell.ia at gmail.com  Mon Mar 28 12:08:55 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 28 Mar 2016 14:08:55 -0500
Subject: [pdal] Compile issue
In-Reply-To: <56F97D19.8010304@nsidc.org>
References: <56F97D19.8010304@nsidc.org>
Message-ID: <CACJ51z071Fghn8nDQkR4ibvSvaet3M+U0xMshMaJ7VZAO8Vwww@mail.gmail.com>

The util lib should build before the base lib, as it is a dependency.  Is
there any reference to building libpdal_util in your make output?

On Mon, Mar 28, 2016 at 1:51 PM, Scott Lewis <scott.lewis at nsidc.org> wrote:

> I'm having an issue compiling the latest pull of PDAL.  I'm using a Mac,
> but am following the Unix instructions (as I was able to compile just fine
> a few months ago).  I am using a clean clone.
>
> I run cmake and then make, and it chugs along happily until this point:
>
> [ 19%] Linking CXX shared library ../lib/libpdalcpp.dylib
> ld: file not found:
> /Users/glewis/git/pdal-local/makefiles/lib/libpdal_util.2.dylib
> clang: error: linker command failed with exit code 1 (use -v to see
> invocation)
> make[2]: *** [lib/libpdalcpp.3.0.0.dylib] Error 1
> make[1]: *** [src/CMakeFiles/pdalcpp.dir/all] Error 2
> make: *** [all] Error 2
>
> (in this case, I had run make previously, and the 19% was 27% in that
> case, but it was the same error).
>
>
> In the folder specified there doesn't seem to be any libpdal_util files.
> I tried it on a clone I had from before, and in that case there was a
> libpdal_util file, but it was not the file it expected (either
> libpdal_util.1.dylib or libpdal_util.2.0.0.dylib).
>
> I've tried to look through the docs to see if there's something I'm
> missing, but if there is, I'm not seeing it.
>
> Thanks!
>
> Scott Lewis
> NSIDC
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/pdal




-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160328/72a62f64/attachment.html>

From scott.lewis at nsidc.org  Mon Mar 28 12:20:32 2016
From: scott.lewis at nsidc.org (Scott Lewis)
Date: Mon, 28 Mar 2016 13:20:32 -0600
Subject: [pdal] Compile issue
In-Reply-To: <CACJ51z071Fghn8nDQkR4ibvSvaet3M+U0xMshMaJ7VZAO8Vwww@mail.gmail.com>
References: <56F97D19.8010304@nsidc.org>
 <CACJ51z071Fghn8nDQkR4ibvSvaet3M+U0xMshMaJ7VZAO8Vwww@mail.gmail.com>
Message-ID: <56F98400.8060309@nsidc.org>

In the non-clean list, no, it doesn't show anything.  I ran it again 
after a make clean, and did see a line for

[ 21%] Building CXX object src/CMakeFiles/pdalcpp.dir/PDALUtils.cpp.o

but at least in the output make is showing, nothing indicating that it's 
building the libpdal_util library itself.

I can try building the util lib first, but am not sure what the make 
target for it is (I tried "make util", "make pdal_util", and "make 
libpdal_util" to no avail).

Scott

On 3/28/16 1:08 PM, Andrew Bell wrote:
> The util lib should build before the base lib, as it is a dependency.
> Is there any reference to building libpdal_util in your make output?
>
> On Mon, Mar 28, 2016 at 1:51 PM, Scott Lewis <scott.lewis at nsidc.org
> <mailto:scott.lewis at nsidc.org>> wrote:
>
>     I'm having an issue compiling the latest pull of PDAL.  I'm using a
>     Mac, but am following the Unix instructions (as I was able to
>     compile just fine a few months ago).  I am using a clean clone.
>
>     I run cmake and then make, and it chugs along happily until this point:
>
>     [ 19%] Linking CXX shared library ../lib/libpdalcpp.dylib
>     ld: file not found:
>     /Users/glewis/git/pdal-local/makefiles/lib/libpdal_util.2.dylib
>     clang: error: linker command failed with exit code 1 (use -v to see
>     invocation)
>     make[2]: *** [lib/libpdalcpp.3.0.0.dylib] Error 1
>     make[1]: *** [src/CMakeFiles/pdalcpp.dir/all] Error 2
>     make: *** [all] Error 2
>
>     (in this case, I had run make previously, and the 19% was 27% in
>     that case, but it was the same error).
>
>
>     In the folder specified there doesn't seem to be any libpdal_util
>     files.  I tried it on a clone I had from before, and in that case
>     there was a libpdal_util file, but it was not the file it expected
>     (either libpdal_util.1.dylib or libpdal_util.2.0.0.dylib).
>
>     I've tried to look through the docs to see if there's something I'm
>     missing, but if there is, I'm not seeing it.
>
>     Thanks!
>
>     Scott Lewis
>     NSIDC
>     _______________________________________________
>     pdal mailing list
>     pdal at lists.osgeo.org <mailto:pdal at lists.osgeo.org>
>     http://lists.osgeo.org/mailman/listinfo/pdal
>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com <mailto:andrew.bell.ia at gmail.com>

From andrew.bell.ia at gmail.com  Mon Mar 28 14:10:27 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Mon, 28 Mar 2016 16:10:27 -0500
Subject: [pdal] Compile issue
In-Reply-To: <56F98400.8060309@nsidc.org>
References: <56F97D19.8010304@nsidc.org>
 <CACJ51z071Fghn8nDQkR4ibvSvaet3M+U0xMshMaJ7VZAO8Vwww@mail.gmail.com>
 <56F98400.8060309@nsidc.org>
Message-ID: <CACJ51z1sA_H-NxbEMMCOxDDoQ1tntNqrA_7_r6xngQhUqAv0vg@mail.gmail.com>

On Mon, Mar 28, 2016 at 2:20 PM, Scott Lewis <scott.lewis at nsidc.org> wrote:

> In the non-clean list, no, it doesn't show anything.  I ran it again after
> a make clean, and did see a line for
>
> [ 21%] Building CXX object src/CMakeFiles/pdalcpp.dir/PDALUtils.cpp.o
>
> but at least in the output make is showing, nothing indicating that it's
> building the libpdal_util library itself.
>
> I can try building the util lib first, but am not sure what the make
> target for it is (I tried "make util", "make pdal_util", and "make
> libpdal_util" to no avail).


I've recreated the problem.  I'll let you know when I've found a solution.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160328/61052413/attachment.html>

From scott.lewis at nsidc.org  Mon Mar 28 14:18:13 2016
From: scott.lewis at nsidc.org (Scott Lewis)
Date: Mon, 28 Mar 2016 15:18:13 -0600
Subject: [pdal] Compile issue
In-Reply-To: <CACJ51z1sA_H-NxbEMMCOxDDoQ1tntNqrA_7_r6xngQhUqAv0vg@mail.gmail.com>
References: <56F97D19.8010304@nsidc.org>
 <CACJ51z071Fghn8nDQkR4ibvSvaet3M+U0xMshMaJ7VZAO8Vwww@mail.gmail.com>
 <56F98400.8060309@nsidc.org>
 <CACJ51z1sA_H-NxbEMMCOxDDoQ1tntNqrA_7_r6xngQhUqAv0vg@mail.gmail.com>
Message-ID: <56F99F95.4030003@nsidc.org>

Excellent, thanks!  Incidentally, I *did* get it to work by using a 
Ninja build, but it would still be nice to find out why the make build 
is failing.  I'll look through the stuff myself and see if anything 
sticks out to me as well.

Scott

On 3/28/16 3:10 PM, Andrew Bell wrote:
> On Mon, Mar 28, 2016 at 2:20 PM, Scott Lewis <scott.lewis at nsidc.org
> <mailto:scott.lewis at nsidc.org>> wrote:
>
>     In the non-clean list, no, it doesn't show anything.  I ran it again
>     after a make clean, and did see a line for
>
>     [ 21%] Building CXX object src/CMakeFiles/pdalcpp.dir/PDALUtils.cpp.o
>
>     but at least in the output make is showing, nothing indicating that
>     it's building the libpdal_util library itself.
>
>     I can try building the util lib first, but am not sure what the make
>     target for it is (I tried "make util", "make pdal_util", and "make
>     libpdal_util" to no avail).
>
>
> I've recreated the problem.  I'll let you know when I've found a solution.
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com <mailto:andrew.bell.ia at gmail.com>

From postmaster at helimap.ch  Wed Mar 30 07:24:02 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 30 Mar 2016 16:24:02 +0200
Subject: [pdal] Problem reading LAZ file
Message-ID: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>

The error message:
PDAL: Can't read compressed file without LASzip or LAZperf decompression
library.

I've, however, activated the option WITH_LASZIP. I've also cloned the
LASZIP repository and installed it. Indeed, pdal ccmake has changed the
library field:

LASZIP_INCLUDE_DIR
LASZIP_INCLUDE_DIR-NOTFOUND

LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so

Any ideas?

I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis ,
but that one led to compilation errors. (Dumper.cpp: undefined reference to
`LASunzipper::LASunzipper()' )

Cheers,

Pol
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/6dcbf355/attachment.html>

From postmaster at helimap.ch  Wed Mar 30 07:48:22 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 30 Mar 2016 16:48:22 +0200
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
Message-ID: <CALAZn4g+NFz2=7JHqu6eq1n99wUAefYt3sNwNof-Uzi1cyh7QA@mail.gmail.com>

Btw,

the laszip_include_dir is not set because the FindLasZip pdal has looks for
laszip/laszip.hpp but lasZIP installed laszip_api.h

On Wed, Mar 30, 2016 at 4:24 PM, Helimap Postmaster <postmaster at helimap.ch>
wrote:

> The error message:
> PDAL: Can't read compressed file without LASzip or LAZperf decompression
> library.
>
> I've, however, activated the option WITH_LASZIP. I've also cloned the
> LASZIP repository and installed it. Indeed, pdal ccmake has changed the
> library field:
>
> LASZIP_INCLUDE_DIR
> LASZIP_INCLUDE_DIR-NOTFOUND
>
> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
>
> Any ideas?
>
> I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis
> , but that one led to compilation errors. (Dumper.cpp: undefined reference
> to `LASunzipper::LASunzipper()' )
>
> Cheers,
>
> Pol
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/dc510fcd/attachment.html>

From postmaster at helimap.ch  Wed Mar 30 07:49:46 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 30 Mar 2016 16:49:46 +0200
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
 <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
Message-ID: <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>

Thanks Todd,

I saw your answer while writing thecomment, will try with e7065cb.

On Wed, Mar 30, 2016 at 4:45 PM, Murphy, Todd <ROBERT.T.MURPHY at leidos.com>
wrote:

> 1. Unsure why it did not pickup up include directory. Have you tried
> setting it manually? On my Fedora install I cloned the laszip repo from
> Howards GitHub site (https://github.com/LASzip/LASzip). It installed
> under /usr/include and /usr/lib.
>
>
>
> 2.I had an issue with the latest laszip which threw the similar errors you
> identified with LASzipper and LASunzipper. Recommend using earlier commit
> (e7065cb) of Laszip. My email discussion with Howard on this follows:
>
>
>
> > 2. I just created a new development environment (Fedora 22) using the
> latest laszip from that repo. I saw you had you had the commit to remove
> LASzipper and LASunzipper. It appears some of the tests still reference
> these as well as the lasdump apps in PDAL. I haven’t had time to look into,
> but did a work around for now. Just wanted you to be aware.
>
>
>
> LASzip needs to be pinned to a release version for now. Martin wanted to
> remove LASzipper/LASunzipper and use his "DLL" interface. We're starting on
> LAZ 1.4, and I want to get things in place for PDAL to support all of it
> once that's ready. I started doing interface stuff based on his new DLL
> thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is
> pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be
> perfectly good going forward until PDAL catches up to LASzip.
>
>
>
> Todd
>
>
>
> *From:* pdal [mailto:pdal-bounces at lists.osgeo.org] *On Behalf Of *Helimap
> Postmaster
> *Sent:* Wednesday, March 30, 2016 10:24 AM
> *To:* pdal
> *Subject:* [pdal] Problem reading LAZ file
>
>
>
> The error message:
> PDAL: Can't read compressed file without LASzip or LAZperf decompression
> library.
>
> I've, however, activated the option WITH_LASZIP. I've also cloned the
> LASZIP repository and installed it. Indeed, pdal ccmake has changed the
> library field:
>
> LASZIP_INCLUDE_DIR
> LASZIP_INCLUDE_DIR-NOTFOUND
>
> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
>
> Any ideas?
>
> I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis
> , but that one led to compilation errors. (Dumper.cpp: undefined reference
> to `LASunzipper::LASunzipper()' )
>
> Cheers,
>
> Pol
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/ad51ebdc/attachment.html>

From ROBERT.T.MURPHY at leidos.com  Wed Mar 30 07:45:44 2016
From: ROBERT.T.MURPHY at leidos.com (Murphy, Todd)
Date: Wed, 30 Mar 2016 14:45:44 +0000
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
Message-ID: <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>

1. Unsure why it did not pickup up include directory. Have you tried setting it manually? On my Fedora install I cloned the laszip repo from Howards GitHub site (https://github.com/LASzip/LASzip). It installed under /usr/include and /usr/lib.

2.I had an issue with the latest laszip which threw the similar errors you identified with LASzipper and LASunzipper. Recommend using earlier commit (e7065cb) of Laszip. My email discussion with Howard on this follows:


> 2. I just created a new development environment (Fedora 22) using the latest laszip from that repo. I saw you had you had the commit to remove LASzipper and LASunzipper. It appears some of the tests still reference these as well as the lasdump apps in PDAL. I haven’t had time to look into, but did a work around for now. Just wanted you to be aware.



LASzip needs to be pinned to a release version for now. Martin wanted to remove LASzipper/LASunzipper and use his "DLL" interface. We're starting on LAZ 1.4, and I want to get things in place for PDAL to support all of it once that's ready. I started doing interface stuff based on his new DLL thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be perfectly good going forward until PDAL catches up to LASzip.


Todd

From: pdal [mailto:pdal-bounces at lists.osgeo.org] On Behalf Of Helimap Postmaster
Sent: Wednesday, March 30, 2016 10:24 AM
To: pdal
Subject: [pdal] Problem reading LAZ file

The error message:
PDAL: Can't read compressed file without LASzip or LAZperf decompression library.
I've, however, activated the option WITH_LASZIP. I've also cloned the LASZIP repository and installed it. Indeed, pdal ccmake has changed the library field:

LASZIP_INCLUDE_DIR               LASZIP_INCLUDE_DIR-NOTFOUND
LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
Any ideas?
I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis , but that one led to compilation errors. (Dumper.cpp: undefined reference to `LASunzipper::LASunzipper()' )
Cheers,
Pol

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/33338c91/attachment-0001.html>

From postmaster at helimap.ch  Wed Mar 30 07:59:23 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 30 Mar 2016 16:59:23 +0200
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
 <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
 <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>
Message-ID: <CALAZn4gAhObXZzVJn=Thyah3f1e3_N5oPAy8QRLUyEn9NfLHcw@mail.gmail.com>

That works, thanks!

On Wed, Mar 30, 2016 at 4:49 PM, Helimap Postmaster <postmaster at helimap.ch>
wrote:

> Thanks Todd,
>
> I saw your answer while writing thecomment, will try with e7065cb.
>
> On Wed, Mar 30, 2016 at 4:45 PM, Murphy, Todd <ROBERT.T.MURPHY at leidos.com>
> wrote:
>
>> 1. Unsure why it did not pickup up include directory. Have you tried
>> setting it manually? On my Fedora install I cloned the laszip repo from
>> Howards GitHub site (https://github.com/LASzip/LASzip). It installed
>> under /usr/include and /usr/lib.
>>
>>
>>
>> 2.I had an issue with the latest laszip which threw the similar errors
>> you identified with LASzipper and LASunzipper. Recommend using earlier
>> commit (e7065cb) of Laszip. My email discussion with Howard on this follows:
>>
>>
>>
>> > 2. I just created a new development environment (Fedora 22) using the
>> latest laszip from that repo. I saw you had you had the commit to remove
>> LASzipper and LASunzipper. It appears some of the tests still reference
>> these as well as the lasdump apps in PDAL. I haven’t had time to look into,
>> but did a work around for now. Just wanted you to be aware.
>>
>>
>>
>> LASzip needs to be pinned to a release version for now. Martin wanted to
>> remove LASzipper/LASunzipper and use his "DLL" interface. We're starting on
>> LAZ 1.4, and I want to get things in place for PDAL to support all of it
>> once that's ready. I started doing interface stuff based on his new DLL
>> thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is
>> pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be
>> perfectly good going forward until PDAL catches up to LASzip.
>>
>>
>>
>> Todd
>>
>>
>>
>> *From:* pdal [mailto:pdal-bounces at lists.osgeo.org] *On Behalf Of *Helimap
>> Postmaster
>> *Sent:* Wednesday, March 30, 2016 10:24 AM
>> *To:* pdal
>> *Subject:* [pdal] Problem reading LAZ file
>>
>>
>>
>> The error message:
>> PDAL: Can't read compressed file without LASzip or LAZperf decompression
>> library.
>>
>> I've, however, activated the option WITH_LASZIP. I've also cloned the
>> LASZIP repository and installed it. Indeed, pdal ccmake has changed the
>> library field:
>>
>> LASZIP_INCLUDE_DIR
>> LASZIP_INCLUDE_DIR-NOTFOUND
>>
>> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
>>
>> Any ideas?
>>
>> I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis
>> , but that one led to compilation errors. (Dumper.cpp: undefined reference
>> to `LASunzipper::LASunzipper()' )
>>
>> Cheers,
>>
>> Pol
>>
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/351c83f1/attachment.html>

From andrew.bell.ia at gmail.com  Wed Mar 30 10:27:35 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 30 Mar 2016 12:27:35 -0500
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CALAZn4gAhObXZzVJn=Thyah3f1e3_N5oPAy8QRLUyEn9NfLHcw@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
 <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
 <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>
 <CALAZn4gAhObXZzVJn=Thyah3f1e3_N5oPAy8QRLUyEn9NfLHcw@mail.gmail.com>
Message-ID: <CACJ51z1yfskQen8UR4xR_wMUmJ4b2QtF5+yHMQem2boLXMWCCg@mail.gmail.com>

Can anyone explain the relationship between the Github repo and Martin's
distribution?

Is there some reason that a breaking change was made to LASzip?  Seems that
one could have had the zipper/unzipper point at laszip_api.h

On Wed, Mar 30, 2016 at 9:59 AM, Helimap Postmaster <postmaster at helimap.ch>
wrote:

> That works, thanks!
>
> On Wed, Mar 30, 2016 at 4:49 PM, Helimap Postmaster <postmaster at helimap.ch
> > wrote:
>
>> Thanks Todd,
>>
>> I saw your answer while writing thecomment, will try with e7065cb.
>>
>> On Wed, Mar 30, 2016 at 4:45 PM, Murphy, Todd <ROBERT.T.MURPHY at leidos.com
>> > wrote:
>>
>>> 1. Unsure why it did not pickup up include directory. Have you tried
>>> setting it manually? On my Fedora install I cloned the laszip repo from
>>> Howards GitHub site (https://github.com/LASzip/LASzip). It installed
>>> under /usr/include and /usr/lib.
>>>
>>>
>>>
>>> 2.I had an issue with the latest laszip which threw the similar errors
>>> you identified with LASzipper and LASunzipper. Recommend using earlier
>>> commit (e7065cb) of Laszip. My email discussion with Howard on this follows:
>>>
>>>
>>>
>>> > 2. I just created a new development environment (Fedora 22) using the
>>> latest laszip from that repo. I saw you had you had the commit to remove
>>> LASzipper and LASunzipper. It appears some of the tests still reference
>>> these as well as the lasdump apps in PDAL. I haven’t had time to look into,
>>> but did a work around for now. Just wanted you to be aware.
>>>
>>>
>>>
>>> LASzip needs to be pinned to a release version for now. Martin wanted to
>>> remove LASzipper/LASunzipper and use his "DLL" interface. We're starting on
>>> LAZ 1.4, and I want to get things in place for PDAL to support all of it
>>> once that's ready. I started doing interface stuff based on his new DLL
>>> thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is
>>> pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be
>>> perfectly good going forward until PDAL catches up to LASzip.
>>>
>>>
>>>
>>> Todd
>>>
>>>
>>>
>>> *From:* pdal [mailto:pdal-bounces at lists.osgeo.org] *On Behalf Of *Helimap
>>> Postmaster
>>> *Sent:* Wednesday, March 30, 2016 10:24 AM
>>> *To:* pdal
>>> *Subject:* [pdal] Problem reading LAZ file
>>>
>>>
>>>
>>> The error message:
>>> PDAL: Can't read compressed file without LASzip or LAZperf decompression
>>> library.
>>>
>>> I've, however, activated the option WITH_LASZIP. I've also cloned the
>>> LASZIP repository and installed it. Indeed, pdal ccmake has changed the
>>> library field:
>>>
>>> LASZIP_INCLUDE_DIR
>>> LASZIP_INCLUDE_DIR-NOTFOUND
>>>
>>> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
>>>
>>> Any ideas?
>>>
>>> I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis
>>> , but that one led to compilation errors. (Dumper.cpp: undefined reference
>>> to `LASunzipper::LASunzipper()' )
>>>
>>> Cheers,
>>>
>>> Pol
>>>
>>>
>>>
>>
>>
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/pdal
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/be59b77b/attachment.html>

From andrew.bell.ia at gmail.com  Wed Mar 30 10:56:40 2016
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 30 Mar 2016 12:56:40 -0500
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CACJ51z1yfskQen8UR4xR_wMUmJ4b2QtF5+yHMQem2boLXMWCCg@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
 <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
 <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>
 <CALAZn4gAhObXZzVJn=Thyah3f1e3_N5oPAy8QRLUyEn9NfLHcw@mail.gmail.com>
 <CACJ51z1yfskQen8UR4xR_wMUmJ4b2QtF5+yHMQem2boLXMWCCg@mail.gmail.com>
Message-ID: <CACJ51z2EiVnQzFxorOzEOSzca6AXLDeEp3eKdLti3YqN0TOsfA@mail.gmail.com>

Trying to figure out if this is something to fix in PDAL or LASzip and if
the latter, how to get it done.

On Wed, Mar 30, 2016 at 12:27 PM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> Can anyone explain the relationship between the Github repo and Martin's
> distribution?
>
> Is there some reason that a breaking change was made to LASzip?  Seems
> that one could have had the zipper/unzipper point at laszip_api.h
>
> On Wed, Mar 30, 2016 at 9:59 AM, Helimap Postmaster <postmaster at helimap.ch
> > wrote:
>
>> That works, thanks!
>>
>> On Wed, Mar 30, 2016 at 4:49 PM, Helimap Postmaster <
>> postmaster at helimap.ch> wrote:
>>
>>> Thanks Todd,
>>>
>>> I saw your answer while writing thecomment, will try with e7065cb.
>>>
>>> On Wed, Mar 30, 2016 at 4:45 PM, Murphy, Todd <
>>> ROBERT.T.MURPHY at leidos.com> wrote:
>>>
>>>> 1. Unsure why it did not pickup up include directory. Have you tried
>>>> setting it manually? On my Fedora install I cloned the laszip repo from
>>>> Howards GitHub site (https://github.com/LASzip/LASzip). It installed
>>>> under /usr/include and /usr/lib.
>>>>
>>>>
>>>>
>>>> 2.I had an issue with the latest laszip which threw the similar errors
>>>> you identified with LASzipper and LASunzipper. Recommend using earlier
>>>> commit (e7065cb) of Laszip. My email discussion with Howard on this follows:
>>>>
>>>>
>>>>
>>>> > 2. I just created a new development environment (Fedora 22) using the
>>>> latest laszip from that repo. I saw you had you had the commit to remove
>>>> LASzipper and LASunzipper. It appears some of the tests still reference
>>>> these as well as the lasdump apps in PDAL. I haven’t had time to look into,
>>>> but did a work around for now. Just wanted you to be aware.
>>>>
>>>>
>>>>
>>>> LASzip needs to be pinned to a release version for now. Martin wanted
>>>> to remove LASzipper/LASunzipper and use his "DLL" interface. We're starting
>>>> on LAZ 1.4, and I want to get things in place for PDAL to support all of it
>>>> once that's ready. I started doing interface stuff based on his new DLL
>>>> thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is
>>>> pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be
>>>> perfectly good going forward until PDAL catches up to LASzip.
>>>>
>>>>
>>>>
>>>> Todd
>>>>
>>>>
>>>>
>>>> *From:* pdal [mailto:pdal-bounces at lists.osgeo.org] *On Behalf Of *Helimap
>>>> Postmaster
>>>> *Sent:* Wednesday, March 30, 2016 10:24 AM
>>>> *To:* pdal
>>>> *Subject:* [pdal] Problem reading LAZ file
>>>>
>>>>
>>>>
>>>> The error message:
>>>> PDAL: Can't read compressed file without LASzip or LAZperf
>>>> decompression library.
>>>>
>>>> I've, however, activated the option WITH_LASZIP. I've also cloned the
>>>> LASZIP repository and installed it. Indeed, pdal ccmake has changed the
>>>> library field:
>>>>
>>>> LASZIP_INCLUDE_DIR
>>>> LASZIP_INCLUDE_DIR-NOTFOUND
>>>>
>>>> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
>>>>
>>>> Any ideas?
>>>>
>>>> I've also tried using
>>>> https://launchpad.net/~pdal/+archive/ubuntu/travis , but that one led
>>>> to compilation errors. (Dumper.cpp: undefined reference to
>>>> `LASunzipper::LASunzipper()' )
>>>>
>>>> Cheers,
>>>>
>>>> Pol
>>>>
>>>>
>>>>
>>>
>>>
>>
>> _______________________________________________
>> pdal mailing list
>> pdal at lists.osgeo.org
>> http://lists.osgeo.org/mailman/listinfo/pdal
>>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/14aabfea/attachment-0001.html>

From postmaster at helimap.ch  Wed Mar 30 14:27:18 2016
From: postmaster at helimap.ch (Helimap Postmaster)
Date: Wed, 30 Mar 2016 23:27:18 +0200
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CACJ51z2EiVnQzFxorOzEOSzca6AXLDeEp3eKdLti3YqN0TOsfA@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
 <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
 <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>
 <CALAZn4gAhObXZzVJn=Thyah3f1e3_N5oPAy8QRLUyEn9NfLHcw@mail.gmail.com>
 <CACJ51z1yfskQen8UR4xR_wMUmJ4b2QtF5+yHMQem2boLXMWCCg@mail.gmail.com>
 <CACJ51z2EiVnQzFxorOzEOSzca6AXLDeEp3eKdLti3YqN0TOsfA@mail.gmail.com>
Message-ID: <CALAZn4ibQtK5mnofEXOUeupdQzDqUKWsO3a+MJPpy0DV_iLbQg@mail.gmail.com>

I'm confused on what's going on on the libLAZ repository.

Laszip.hpp is still there and one of the examples [1] relies on it. Weird
that it isn't installed... Looks like the repository is transitioning to
something else, as you pointed out.

Todd, you said Martin wanted to remove the c++ objects. Maybe you can shed
some light on the issue, or else.

I'm at the moment re-considering wether to use pdal or not, given that I'm
only interested in a nice I/O for laz (and las). The LASzipper/LASunzipper
seemed appropriate, but if they are dead... Maybe you all have some
insights about this?

[1] https://github.com/LASzip/LASzip/blob/master/example/laszippertest.cpp

On Wed, Mar 30, 2016 at 7:56 PM, Andrew Bell <andrew.bell.ia at gmail.com>
wrote:

> Trying to figure out if this is something to fix in PDAL or LASzip and if
> the latter, how to get it done.
>
> On Wed, Mar 30, 2016 at 12:27 PM, Andrew Bell <andrew.bell.ia at gmail.com>
> wrote:
>
>> Can anyone explain the relationship between the Github repo and Martin's
>> distribution?
>>
>> Is there some reason that a breaking change was made to LASzip?  Seems
>> that one could have had the zipper/unzipper point at laszip_api.h
>>
>> On Wed, Mar 30, 2016 at 9:59 AM, Helimap Postmaster <
>> postmaster at helimap.ch> wrote:
>>
>>> That works, thanks!
>>>
>>> On Wed, Mar 30, 2016 at 4:49 PM, Helimap Postmaster <
>>> postmaster at helimap.ch> wrote:
>>>
>>>> Thanks Todd,
>>>>
>>>> I saw your answer while writing thecomment, will try with e7065cb.
>>>>
>>>> On Wed, Mar 30, 2016 at 4:45 PM, Murphy, Todd <
>>>> ROBERT.T.MURPHY at leidos.com> wrote:
>>>>
>>>>> 1. Unsure why it did not pickup up include directory. Have you tried
>>>>> setting it manually? On my Fedora install I cloned the laszip repo from
>>>>> Howards GitHub site (https://github.com/LASzip/LASzip). It installed
>>>>> under /usr/include and /usr/lib.
>>>>>
>>>>>
>>>>>
>>>>> 2.I had an issue with the latest laszip which threw the similar errors
>>>>> you identified with LASzipper and LASunzipper. Recommend using earlier
>>>>> commit (e7065cb) of Laszip. My email discussion with Howard on this follows:
>>>>>
>>>>>
>>>>>
>>>>> > 2. I just created a new development environment (Fedora 22) using
>>>>> the latest laszip from that repo. I saw you had you had the commit to
>>>>> remove LASzipper and LASunzipper. It appears some of the tests still
>>>>> reference these as well as the lasdump apps in PDAL. I haven’t had time to
>>>>> look into, but did a work around for now. Just wanted you to be aware.
>>>>>
>>>>>
>>>>>
>>>>> LASzip needs to be pinned to a release version for now. Martin wanted
>>>>> to remove LASzipper/LASunzipper and use his "DLL" interface. We're starting
>>>>> on LAZ 1.4, and I want to get things in place for PDAL to support all of it
>>>>> once that's ready. I started doing interface stuff based on his new DLL
>>>>> thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is
>>>>> pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be
>>>>> perfectly good going forward until PDAL catches up to LASzip.
>>>>>
>>>>>
>>>>>
>>>>> Todd
>>>>>
>>>>>
>>>>>
>>>>> *From:* pdal [mailto:pdal-bounces at lists.osgeo.org] *On Behalf Of *Helimap
>>>>> Postmaster
>>>>> *Sent:* Wednesday, March 30, 2016 10:24 AM
>>>>> *To:* pdal
>>>>> *Subject:* [pdal] Problem reading LAZ file
>>>>>
>>>>>
>>>>>
>>>>> The error message:
>>>>> PDAL: Can't read compressed file without LASzip or LAZperf
>>>>> decompression library.
>>>>>
>>>>> I've, however, activated the option WITH_LASZIP. I've also cloned the
>>>>> LASZIP repository and installed it. Indeed, pdal ccmake has changed the
>>>>> library field:
>>>>>
>>>>> LASZIP_INCLUDE_DIR
>>>>> LASZIP_INCLUDE_DIR-NOTFOUND
>>>>>
>>>>> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
>>>>>
>>>>> Any ideas?
>>>>>
>>>>> I've also tried using
>>>>> https://launchpad.net/~pdal/+archive/ubuntu/travis , but that one led
>>>>> to compilation errors. (Dumper.cpp: undefined reference to
>>>>> `LASunzipper::LASunzipper()' )
>>>>>
>>>>> Cheers,
>>>>>
>>>>> Pol
>>>>>
>>>>>
>>>>>
>>>>
>>>>
>>>
>>> _______________________________________________
>>> pdal mailing list
>>> pdal at lists.osgeo.org
>>> http://lists.osgeo.org/mailman/listinfo/pdal
>>>
>>
>>
>>
>> --
>> Andrew Bell
>> andrew.bell.ia at gmail.com
>>
>
>
>
> --
> Andrew Bell
> andrew.bell.ia at gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160330/0786f683/attachment.html>

From howard at hobu.co  Thu Mar 31 07:59:52 2016
From: howard at hobu.co (Howard Butler)
Date: Thu, 31 Mar 2016 08:59:52 -0600
Subject: [pdal] Problem reading LAZ file
In-Reply-To: <CACJ51z2EiVnQzFxorOzEOSzca6AXLDeEp3eKdLti3YqN0TOsfA@mail.gmail.com>
References: <CALAZn4gX36-gc-8Ms+0a8Bmock90y-FuyE7neLr2v2QD-S-eaQ@mail.gmail.com>
 <1EF4F9A771E6F347BFD789126375B0905B24DDDA@EMP-EXMR102.corp.leidos.com>
 <CALAZn4h+iW6Pkw074OyGSzb+s_8TX6neoXA9b3cocMz_ArckYw@mail.gmail.com>
 <CALAZn4gAhObXZzVJn=Thyah3f1e3_N5oPAy8QRLUyEn9NfLHcw@mail.gmail.com>
 <CACJ51z1yfskQen8UR4xR_wMUmJ4b2QtF5+yHMQem2boLXMWCCg@mail.gmail.com>
 <CACJ51z2EiVnQzFxorOzEOSzca6AXLDeEp3eKdLti3YqN0TOsfA@mail.gmail.com>
Message-ID: <A092164C-3805-4B40-AC69-A52B26127C6A@hobu.co>

This is actually my fault. 

PDAL and libLAS currently use the LASzipper/LASunzipper interface, but everyone else who integrates LASzip uses the "DLL" interface. Going forward there will be no more maintenance or improvement of the zipper/unzipper interface. PDAL and libLAS need to change to use this new interface, especially to catch upcoming LAZ 1.4 support. It hasn't been done yet.

I updated the LASzip master tree to build and link the "DLL" interface on *nix, and in the process I removed the zipper/unzipper interface. This means that PDAL/libLAS need to stick to released LASzip. There have been no functional updates to the LASzip codebase since the last release of it.

The LASzip distribution at http://github.com/LASzip/LASzip is the LAZ software that Martin throws over the wall into a single library for others to implement LAZ support in their software. It lags LAStools' capability a little bit, but there have been no wire format changes in a very long time.

Howard

> On Mar 30, 2016, at 11:56 AM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> 
> Trying to figure out if this is something to fix in PDAL or LASzip and if the latter, how to get it done.
> 
> On Wed, Mar 30, 2016 at 12:27 PM, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> Can anyone explain the relationship between the Github repo and Martin's distribution?
> 
> Is there some reason that a breaking change was made to LASzip?  Seems that one could have had the zipper/unzipper point at laszip_api.h
> 
> On Wed, Mar 30, 2016 at 9:59 AM, Helimap Postmaster <postmaster at helimap.ch> wrote:
> That works, thanks!
> 
> On Wed, Mar 30, 2016 at 4:49 PM, Helimap Postmaster <postmaster at helimap.ch> wrote:
> Thanks Todd,
> 
> I saw your answer while writing thecomment, will try with e7065cb.
> 
> On Wed, Mar 30, 2016 at 4:45 PM, Murphy, Todd <ROBERT.T.MURPHY at leidos.com>wrote:
> 1. Unsure why it did not pickup up include directory. Have you tried setting it manually? On my Fedora install I cloned the laszip repo from Howards GitHub site (https://github.com/LASzip/LASzip). It installed under /usr/include and /usr/lib.
> 
>  
> 
> 2.I had an issue with the latest laszip which threw the similar errors you identified with LASzipper and LASunzipper. Recommend using earlier commit (e7065cb) of Laszip. My email discussion with Howard on this follows:
> 
>  
> 
> > 2. I just created a new development environment (Fedora 22) using the latest laszip from that repo. I saw you had you had the commit to remove LASzipper and LASunzipper. It appears some of the tests still reference these as well as the lasdump apps in PDAL. I haven’t had time to look into, but did a work around for now. Just wanted you to be aware.
> 
>  
> 
> LASzip needs to be pinned to a release version for now. Martin wanted to remove LASzipper/LASunzipper and use his "DLL" interface. We're starting on LAZ 1.4, and I want to get things in place for PDAL to support all of it once that's ready. I started doing interface stuff based on his new DLL thingy, but PDAL/libLAS aren't yet caught up to it. PDAL's docker image is pinned to e7065cbc5bdbbe0c6e50c9d93d1cd346e9be6778 which should be perfectly good going forward until PDAL catches up to LASzip.
> 
>  
> 
> Todd
> 
>  
> 
> From: pdal [mailto:pdal-bounces at lists.osgeo.org] On Behalf Of Helimap Postmaster
> Sent: Wednesday, March 30, 2016 10:24 AM
> To: pdal
> Subject: [pdal] Problem reading LAZ file
> 
>  
> 
> The error message:
> PDAL: Can't read compressed file without LASzip or LAZperf decompression library.
> 
> I've, however, activated the option WITH_LASZIP. I've also cloned the LASZIP repository and installed it. Indeed, pdal ccmake has changed the library field:
> 
> LASZIP_INCLUDE_DIR               LASZIP_INCLUDE_DIR-NOTFOUND                                                       
> LASZIP_LIBRARY                   /usr/local/lib/liblaszip.so
> 
> Any ideas?
> 
> I've also tried using https://launchpad.net/~pdal/+archive/ubuntu/travis , but that one led to compilation errors. (Dumper.cpp: undefined reference to `LASunzipper::LASunzipper()' )
> 
> Cheers,
> 
> Pol
> 
>  
> 
> 
> 
> 
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/pdal
> 
> 
> 
> -- 
> Andrew Bell
> andrew.bell.ia at gmail.com
> 
> 
> 
> -- 
> Andrew Bell
> andrew.bell.ia at gmail.com
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/pdal


From howard at hobu.co  Thu Mar 31 21:14:53 2016
From: howard at hobu.co (Howard Butler)
Date: Thu, 31 Mar 2016 22:14:53 -0600
Subject: [pdal] PDAL 1.2 Released
Message-ID: <BE0CA7A9-7C60-454C-BB56-A79C0FED0675@hobu.co>

All,

http://www.pdal.io/download.html 

It is my pleasure to announce the release of PDAL 1.2.0.  A maintenance branch, 1.2-maintenance, is now available to track bug fixes on the release. Ongoing development will continue on the master branch. 

Thank you for your bug reports, pull requests, testing, and code contributions.

Howard

Changes of Note:

- The GEOS library is now required to build PDAL.  In earlier versions it was
  an optional component.
- Boost is no longer a required component.  Unless you are building plugins
  that require boost (notably PCL and Geowave), you no longer will need
  boost installed on your system to build or run PDAL.
- PDAL now builds on Microsoft Visual Studio 2015.
- The PipelineReader class has been removed and its functionality has been
  merged into PipelineManager.
- Plugin libraries now support Linux versioning.
- Naming changes have been made to allow packaging with the Debian release.
- filters.height now uses the dimension 'HeightAboveGround' instead of a
  dimension named 'Height' to be compatible with the filters.heightaboveground.
- Option names no longer contain lowercase characters.
- PDAL now works with GDAL version 1.9 and later.
- Stages created with the StageFactory are now owned by the factory.
- filters.dartthrowing has been renamed filters.dartsample
- 'pipeline-serialization' now produces JSON output instead of XML.

Enhancements:

- Pipelines may now be specified using a JSON syntax.  XML syntax is still
  supported but users should switch to JSON when possible as the XML support
  will be removed in a future version.
- PDAL now can be built into a Docker container.
- Many stages now support "streaming," which allows control of the number
  of points stored in memory during processing.  See
  Stage::execute(StreamPointTable&) for more information.
- A basic text reader has been added.
- Added support for the dimension 'ClassFlags' in readers.las.
- The derivative writer can now produce output for multiple primitive types
  with a single execution.
- 'pdal info' now provides bounding box output instead of a more refined
  boundary when the hexbin plugin isn't found.
- Added 'pdal density' to provide a command-line interface to the
  filters.hexbin density calcuations.
- The icebridge reader can now load an associated metadata file.  The reader
  also now marks the associated coordinate system as WGS84.
- The stats filter now emits bounding box information in native and WGS84
  projections.
- PDAL command-line programs now (generally) check their argument lists for
  correctness and report syntax errors.
- 'pdal info' now provides spatial reference attributes in addition to
  the actual well-known text.
- Geometry can now be specified as GeoJSON as well as well-known-text in
  most contexts.  Geometry optionally provides Z-dimension output.
- Stage and plugin creation is now thread-safe (NOTE: Most of PDAL is
  NOT thread-safe, so tread carefully).
- Many, many documentation enhancements.

Fixes:

- A bug in generating PCIDs when with multiple simultaneous PDAL executions
  to the same Postgres database has been fixed.
- Fixed a bug in generated SQL delete statements when certain table names
  were used in the writers.postgres driver.
- Properly escape quotes when generating JSON output.
- Fix an off-by-one error when writing data with the derivative writer that
  could lead to a crash.
- Fixed a depedency error during builds that could lead to a failure to
  properly load Python extensions on Linux.
- Fixed a bug where passing certain options to 'pdal info' could be handled
  in ambiguous ways.
- Fixed bugs in the reading of raster data using readers.gdal.
- Fixed population of the AIMIDB and ACFTB attributes in writers.nitf.
- Corrected the parsing of some dimension names in filters.colorization.
- Fixed a potential truncation in the GlobalEncoding dimension of readers.las.

See more in GitHub https://github.com/PDAL/PDAL/issues?q=milestone%3A1.2+is%3Aclosed


From aashish.chaudhary at kitware.com  Thu Mar 31 21:59:35 2016
From: aashish.chaudhary at kitware.com (Aashish Chaudhary)
Date: Fri, 1 Apr 2016 00:59:35 -0400
Subject: [pdal] PDAL 1.2 Released
In-Reply-To: <BE0CA7A9-7C60-454C-BB56-A79C0FED0675@hobu.co>
References: <BE0CA7A9-7C60-454C-BB56-A79C0FED0675@hobu.co>
Message-ID: <CAEw35Z8yusec=Qzh=Cn1oE+PDtEpuMAFCSoyR641ZgsE0jVCwA@mail.gmail.com>

This is great Howard! Congratulations to the PDAL team.

- Aashish

On Fri, Apr 1, 2016 at 12:14 AM, Howard Butler <howard at hobu.co> wrote:

> All,
>
> http://www.pdal.io/download.html
>
> It is my pleasure to announce the release of PDAL 1.2.0.  A maintenance
> branch, 1.2-maintenance, is now available to track bug fixes on the
> release. Ongoing development will continue on the master branch.
>
> Thank you for your bug reports, pull requests, testing, and code
> contributions.
>
> Howard
>
> Changes of Note:
>
> - The GEOS library is now required to build PDAL.  In earlier versions it
> was
>   an optional component.
> - Boost is no longer a required component.  Unless you are building plugins
>   that require boost (notably PCL and Geowave), you no longer will need
>   boost installed on your system to build or run PDAL.
> - PDAL now builds on Microsoft Visual Studio 2015.
> - The PipelineReader class has been removed and its functionality has been
>   merged into PipelineManager.
> - Plugin libraries now support Linux versioning.
> - Naming changes have been made to allow packaging with the Debian release.
> - filters.height now uses the dimension 'HeightAboveGround' instead of a
>   dimension named 'Height' to be compatible with the
> filters.heightaboveground.
> - Option names no longer contain lowercase characters.
> - PDAL now works with GDAL version 1.9 and later.
> - Stages created with the StageFactory are now owned by the factory.
> - filters.dartthrowing has been renamed filters.dartsample
> - 'pipeline-serialization' now produces JSON output instead of XML.
>
> Enhancements:
>
> - Pipelines may now be specified using a JSON syntax.  XML syntax is still
>   supported but users should switch to JSON when possible as the XML
> support
>   will be removed in a future version.
> - PDAL now can be built into a Docker container.
> - Many stages now support "streaming," which allows control of the number
>   of points stored in memory during processing.  See
>   Stage::execute(StreamPointTable&) for more information.
> - A basic text reader has been added.
> - Added support for the dimension 'ClassFlags' in readers.las.
> - The derivative writer can now produce output for multiple primitive types
>   with a single execution.
> - 'pdal info' now provides bounding box output instead of a more refined
>   boundary when the hexbin plugin isn't found.
> - Added 'pdal density' to provide a command-line interface to the
>   filters.hexbin density calcuations.
> - The icebridge reader can now load an associated metadata file.  The
> reader
>   also now marks the associated coordinate system as WGS84.
> - The stats filter now emits bounding box information in native and WGS84
>   projections.
> - PDAL command-line programs now (generally) check their argument lists for
>   correctness and report syntax errors.
> - 'pdal info' now provides spatial reference attributes in addition to
>   the actual well-known text.
> - Geometry can now be specified as GeoJSON as well as well-known-text in
>   most contexts.  Geometry optionally provides Z-dimension output.
> - Stage and plugin creation is now thread-safe (NOTE: Most of PDAL is
>   NOT thread-safe, so tread carefully).
> - Many, many documentation enhancements.
>
> Fixes:
>
> - A bug in generating PCIDs when with multiple simultaneous PDAL executions
>   to the same Postgres database has been fixed.
> - Fixed a bug in generated SQL delete statements when certain table names
>   were used in the writers.postgres driver.
> - Properly escape quotes when generating JSON output.
> - Fix an off-by-one error when writing data with the derivative writer that
>   could lead to a crash.
> - Fixed a depedency error during builds that could lead to a failure to
>   properly load Python extensions on Linux.
> - Fixed a bug where passing certain options to 'pdal info' could be handled
>   in ambiguous ways.
> - Fixed bugs in the reading of raster data using readers.gdal.
> - Fixed population of the AIMIDB and ACFTB attributes in writers.nitf.
> - Corrected the parsing of some dimension names in filters.colorization.
> - Fixed a potential truncation in the GlobalEncoding dimension of
> readers.las.
>
> See more in GitHub
> https://github.com/PDAL/PDAL/issues?q=milestone%3A1.2+is%3Aclosed
>
> _______________________________________________
> pdal mailing list
> pdal at lists.osgeo.org
> http://lists.osgeo.org/mailman/listinfo/pdal




-- 



*| Aashish Chaudhary | Technical Leader         | Kitware Inc.            *
*| http://www.kitware.com/company/team/chaudhary.html
<http://www.kitware.com/company/team/chaudhary.html>*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/pdal/attachments/20160401/32a959ad/attachment.html>

