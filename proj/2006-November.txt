From baijianhua at gmail.com  Wed Nov  1 06:34:31 2006
From: baijianhua at gmail.com (baijianhua)
Date: Wed, 1 Nov 2006 14:34:31 +0000 (UTC)
Subject: [Proj] Can I said the unit of Mercator Porjection? I'm trying to
	overlay shp file to google map.
Message-ID: <loom.20061101T151946-883@post.gmane.org>

I'm trying to overlay shape files(world map) to google map, I found that google 
map is using this PROJCS.

54004,PROJCS["World_Mercator",GEOGCS["GCS_WGS_1984",DATUM["WGS_1984",SPHEROID
["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]

,UNIT["Meter",1]

,AUTHORITY["EPSG","54004"]]


I can get the same shape of google map(in world range, the top most level of 
google map), but one mismatch is the unit, the unit google map used is Decimal 
Degree, while Mercator Projection using is Meter, when I change this to 

54005,PROJCS["World_MercatorDD",GEOGCS["GCS_WGS_1984",DATUM["WGS_1984",SPHEROID
["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]

,UNIT["Degree",0.0174532925199433]

,AUTHORITY["EPSG","54005"]]

Still I can not get the same coordinate value as google map, can anybody help? 
can I using the same unit with google map in Mercator projection result



From warmerdam at pobox.com  Wed Nov  1 07:28:44 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 01 Nov 2006 10:28:44 -0500
Subject: [Proj] Can I said the unit of Mercator Porjection? I'm trying
	to	overlay shp file to google map.
In-Reply-To: <loom.20061101T151946-883@post.gmane.org>
References: <loom.20061101T151946-883@post.gmane.org>
Message-ID: <4548BD2C.8020206@pobox.com>

baijianhua wrote:
 > I'm trying to overlay shape files(world map) to google map, I found that 
google
> map is using this PROJCS.
> 
> 54004,PROJCS["World_Mercator",GEOGCS["GCS_WGS_1984",DATUM["WGS_1984",SPHEROID
> ["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
> ["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
> ["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
> ["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]
> 
> ,UNIT["Meter",1]
> 
> ,AUTHORITY["EPSG","54004"]]
> 
> 
> I can get the same shape of google map(in world range, the top most level of 
> google map), but one mismatch is the unit, the unit google map used is Decimal 
> Degree, while Mercator Projection using is Meter, when I change this to 
> 
> 54005,PROJCS["World_MercatorDD",GEOGCS["GCS_WGS_1984",DATUM["WGS_1984",SPHEROID
> ["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
> ["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
> ["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
> ["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]
> 
> ,UNIT["Degree",0.0174532925199433]
> 
> ,AUTHORITY["EPSG","54005"]]
> 
> Still I can not get the same coordinate value as google map, can anybody help? 
> can I using the same unit with google map in Mercator projection result

Baijianhua,

It is not generally meaningful to use degrees as a linear unit for a
projected coordinate system in PROJ, OGR or simple features well known text
coordinate system descriptions.

Perhaps it is a property of mercator that a degree is linear in the
latitude direction (and equal number of mercator meters at any latitude),
and that it is the same distance in the longitude direction at any
latitude.   If so, feel free to put in a UNIT["degree",111111.0] or whatever 
the correct number of mercator meters for this pseudo-linear
unit is.

PS. I know I should know more about the properties of Mercator.  So shoot
me!

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From warmerdam at pobox.com  Wed Nov  1 07:39:46 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 01 Nov 2006 10:39:46 -0500
Subject: [Proj] Re: possible bug in proj.4 lib
In-Reply-To: <4548909F.5000406@fgi.fi>
References: <4548909F.5000406@fgi.fi>
Message-ID: <4548BFC2.4020304@pobox.com>

Jaakko Kahkonen wrote:
> Hello from Finland!
> 
> After upgrading proj.4 lib from 4.4.9 to 4.5.0 I got stange results with
> MapServer, when using epsg 2393.
> 
> I noticed that EPSG values 2391-2394 in epsg file differs between versions:

Jaakko,

I see the +towgs84 parameters are now missing.

There are two likely reasons for this:

  1) EPSG now publishes more than one possible value for this, which will
     cause my towgs84 selector to give up and include none.

  2) The previous values were locally or centrally hacked into the the
     previous version as were lost on regeneration.

I *could* track through the process to try and verify, but I imagine this
is case (1).  If the old towgs84 parameters are still considered quite
appropriate, you can submit a bug report against PROJ, with the old entries,
and I will add an override to apply those values in the generation process.

In the meantime, you can just past the old entries into your epsg file
in place of the new entries.

I have taken the liberty of cc:ing the proj list since this is of potentially
wider interest.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From ch.panel at free.fr  Thu Nov  2 01:03:09 2006
From: ch.panel at free.fr (cp)
Date: Thu, 2 Nov 2006 10:03:09 +0100
Subject: [Proj] rtodms
Message-ID: <eicc8g$t6r$1@sea.gmane.org>

Something is wrong in proj.lib :
I work with vers 4.4.6 but there's the same code in 4.5.0 :

When I try to translate a radian value into a DMS format with function 
"rtodms" I obtain this :
0,785398163397448501 which is exactly PI/4 => rtodms => 44d

but

0.07155849933176752775 => 4d06'00.00000"E good value
0.787143492649442833 => 45d06'00.00000"E good value

and

0.06981317007977319578 => 3d00'00.00000"E instead of 4d

bug ??? or there's something i had not kept ? 





From oon at informatika.org  Thu Nov  2 01:22:44 2006
From: oon at informatika.org (oon at informatika.org)
Date: Thu, 02 Nov 2006 16:22:44 +0700
Subject: [Proj] conversion latlong to UTM (& vice versa)
Message-ID: <20061102162244.juccopguwckw4s4k@webmail.informatika.org>


Dear All Proj user,

I want to convert coordinate with datum WGS84, from latlong projection 
to UTM projection
(and vice versa).

If I convert from latlong projection to UTM projection,
I can get the UTM zone from UTM definition, so I can calculate the zone 
from it's longitude.

If I'm doing vehicle tracking with UTM projection,
and the vehicle moving between UTM zones,
How should I do to get UTM zone of current position of vehicle?
(so I can convert UTM to latlong again).

Is it any statement or definition of UTM that declare
how to get UTM Zone from UTM coordinate?

Is it any Proj utilities (function/procedure) that support my problem?

thanks,

-- 
regards,
Oon Arfiandwi M.



From ch.panel at free.fr  Thu Nov  2 04:34:36 2006
From: ch.panel at free.fr (cp)
Date: Thu, 2 Nov 2006 13:34:36 +0100
Subject: [Proj] Proj4 Bug  (rtodms)
Message-ID: <eicoku$7es$1@sea.gmane.org>

due to floating point precision, there is a bug in source code of rtodms.c

the portion of code

  r = floor(r * CONV + .5);
  sec = fmod(r / RES, 60.);
  r = floor(r / RES60);
  min = fmod(r, 60.);
  deg = r / 60.;

must be replaced by

  r = floor(r * CONV + .5);
  sec = fmod(r / RES, 60.);
  r = floor(r / RES60);
  min = fmod(r, 60.);
  r = floor(r / 60.);
  deg = r;

the conversion of 0.06981317007977319578 (4 degree in radian)  is 3d with 
the first code (wrong) and  4d with the second (true).





From baijianhua at gmail.com  Thu Nov  2 05:27:13 2006
From: baijianhua at gmail.com (baijianhua)
Date: Thu, 2 Nov 2006 13:27:13 +0000 (UTC)
Subject: [Proj] Re: Can I set the unit of Mercator Porjection? I'm trying	to
	overlay shp file to google map.
References: <loom.20061101T151946-883@post.gmane.org>
	<4548BD2C.8020206@pobox.com>
Message-ID: <loom.20061102T141509-844@post.gmane.org>

Frank Warmerdam <warmerdam <at> pobox.com> writes:

> 
> baijianhua wrote:
>  > I'm trying to overlay shape files(world map) to google map, I found that 
> google
> > map is using this PROJCS.
> > 
> > 54004,PROJCS["World_Mercator",GEOGCS["GCS_WGS_1984",DATUM
["WGS_1984",SPHEROID
> > ["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
> > ["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
> > ["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
> > ["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]
> > 
> > ,UNIT["Meter",1]
> > 
> > ,AUTHORITY["EPSG","54004"]]
> > 
> > 
> > I can get the same shape of google map(in world range, the top most level 
of 
> > google map), but one mismatch is the unit, the unit google map used is 
Decimal 
> > Degree, while Mercator Projection using is Meter, when I change this to 
> > 
> > 54005,PROJCS["World_MercatorDD",GEOGCS["GCS_WGS_1984",DATUM
["WGS_1984",SPHEROID
> > ["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
> > ["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
> > ["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
> > ["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]
> > 
> > ,UNIT["Degree",0.0174532925199433]
> > 
> > ,AUTHORITY["EPSG","54005"]]
> > 
> > Still I can not get the same coordinate value as google map, can anybody 
help? 
> > can I using the same unit with google map in Mercator projection result
> 
> Baijianhua,
> 
> It is not generally meaningful to use degrees as a linear unit for a
> projected coordinate system in PROJ, OGR or simple features well known text
> coordinate system descriptions.
> 
> Perhaps it is a property of mercator that a degree is linear in the
> latitude direction (and equal number of mercator meters at any latitude),
> and that it is the same distance in the longitude direction at any
> latitude.   If so, feel free to put in a UNIT["degree",111111.0] or whatever 
> the correct number of mercator meters for this pseudo-linear
> unit is.
> 
> PS. I know I should know more about the properties of Mercator.  So shoot
> me!
> 
> Best regards,



Thanks for response. I think you are right that it doesn't make sense to use 
degrees as a linear unit for a projected coordinate system in PROJ, but I'm 
wondering why google map can use Decimal Degree as the coordinate for markers, 
do you think they are doing some kind of internal coordinate system 
transformation? And, I think it's also very common that we render 2 dimension 
map using decimal degree as unit. So I'm a little confusing what we are 
actually doing when we talking about decimal degree in 2 dimension map. Forgive 
me that maybe I'm asking stupid questions, I'm not very famirliar in this field.






From baijianhua at gmail.com  Thu Nov  2 05:28:44 2006
From: baijianhua at gmail.com (baijianhua)
Date: Thu, 2 Nov 2006 13:28:44 +0000 (UTC)
Subject: [Proj] Re: Can I set the unit of Mercator Porjection? I'm
	trying	to	overlay shp file to google map.
References: <loom.20061101T151946-883@post.gmane.org>
	<4548BD2C.8020206@pobox.com>
Message-ID: <loom.20061102T142815-959@post.gmane.org>

Frank Warmerdam <warmerdam <at> pobox.com> writes:

> 
> baijianhua wrote:
>  > I'm trying to overlay shape files(world map) to google map, I found that 
> google
> > map is using this PROJCS.
> > 
> > 54004,PROJCS["World_Mercator",GEOGCS["GCS_WGS_1984",DATUM
["WGS_1984",SPHEROID
> > ["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
> > ["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
> > ["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
> > ["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]
> > 
> > ,UNIT["Meter",1]
> > 
> > ,AUTHORITY["EPSG","54004"]]
> > 
> > 
> > I can get the same shape of google map(in world range, the top most level 
of 
> > google map), but one mismatch is the unit, the unit google map used is 
Decimal 
> > Degree, while Mercator Projection using is Meter, when I change this to 
> > 
> > 54005,PROJCS["World_MercatorDD",GEOGCS["GCS_WGS_1984",DATUM
["WGS_1984",SPHEROID
> > ["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT
> > ["Degree",0.017453292519943295]],PROJECTION["Mercator_1SP"],PARAMETER
> > ["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER
> > ["Central_Meridian",0],PARAMETER["Standard_Parallel_1",0]
> > 
> > ,UNIT["Degree",0.0174532925199433]
> > 
> > ,AUTHORITY["EPSG","54005"]]
> > 
> > Still I can not get the same coordinate value as google map, can anybody 
help? 
> > can I using the same unit with google map in Mercator projection result
> 
> Baijianhua,
> 
> It is not generally meaningful to use degrees as a linear unit for a
> projected coordinate system in PROJ, OGR or simple features well known text
> coordinate system descriptions.
> 
> Perhaps it is a property of mercator that a degree is linear in the
> latitude direction (and equal number of mercator meters at any latitude),
> and that it is the same distance in the longitude direction at any
> latitude.   If so, feel free to put in a UNIT["degree",111111.0] or whatever 
> the correct number of mercator meters for this pseudo-linear
> unit is.
> 
> PS. I know I should know more about the properties of Mercator.  So shoot
> me!
> 
> Best regards,


Thanks for response. I think you are right that it doesn't make sense to use 
degrees as a linear unit for a projected coordinate system in PROJ, but I'm 
wondering why google map can use Decimal Degree as the coordinate for markers, 
do you think they are doing some kind of internal coordinate system 
transformation? And, I think it's also very common that we render 2 dimension 
map using decimal degree as unit. So I'm a little confusing what we are 
actually doing when we talking about decimal degree in 2 dimension map. Forgive 
me that maybe I'm asking stupid questions, I'm not very famirliar in this field.





From roger at opq.se  Thu Nov  2 06:27:59 2006
From: roger at opq.se (Roger Oberholtzer)
Date: Thu, 02 Nov 2006 15:27:59 +0100
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <C1669010.859A%ovv@hetnet.nl>
References: <C1669010.859A%ovv@hetnet.nl>
Message-ID: <1162477679.31250.17.camel@acme>

On Thu, 2006-10-26 at 16:17 +0200, Oscar van Vlijmen wrote:

> I suppose the "confirmed" transformation:
> 
> <quote>
> a more accurate definition for the Dutch system is:
> +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889
> +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel  +units=m
> +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
> 03473836068,4.0812 
> +no_defs +to +proj=latlong +datum=WGS84
> </quote>

OK. Given these values, how would one do this using the C API, and the
pj_transform() function. Starting with WGS84 lat/long values as provided
by a GPS receiver set to provide WGS84 values?

I know that I am asking numerous similar C-API question on this list,
but I do not really feel I have it sorted out in my mind. 

Would it be:

fromProj = pj_init_plus(+proj=latlong +ellps=bessel)

toProj   = pj_init_plus(
		"+proj=sterea +lat_0=52.15616055555555 
		"+lon_0=5.38763888888889 
		"+k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
		"+towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
		+units=m +no_defs)

pj_transform(fromProj, toProj, 1, 0, &lng, &lat, &alt)

where lat, lng and alt are the values in radians from the GPS.

-- 
Roger Oberholtzer

OPQ Systems AB
Ramböll Sverige AB
Kapellgränd 7
P.O. Box 4205
SE-102 65 Stockholm, Sweden

Tel: Int +46 8-615 60 20
Fax: Int +46 8-31 42 23



From warmerdam at pobox.com  Thu Nov  2 07:01:56 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu, 02 Nov 2006 10:01:56 -0500
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <1162477679.31250.17.camel@acme>
References: <C1669010.859A%ovv@hetnet.nl> <1162477679.31250.17.camel@acme>
Message-ID: <454A0864.40809@pobox.com>

Roger Oberholtzer wrote:
> On Thu, 2006-10-26 at 16:17 +0200, Oscar van Vlijmen wrote:
> 
>> I suppose the "confirmed" transformation:
>>
>> <quote>
>> a more accurate definition for the Dutch system is:
>> +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889
>> +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel  +units=m
>> +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
>> 03473836068,4.0812 
>> +no_defs +to +proj=latlong +datum=WGS84
>> </quote>
> 
> OK. Given these values, how would one do this using the C API, and the
> pj_transform() function. Starting with WGS84 lat/long values as provided
> by a GPS receiver set to provide WGS84 values?
> 
> I know that I am asking numerous similar C-API question on this list,
> but I do not really feel I have it sorted out in my mind. 
> 
> Would it be:
> 
> fromProj = pj_init_plus(+proj=latlong +ellps=bessel)
> 
> toProj   = pj_init_plus(
> 		"+proj=sterea +lat_0=52.15616055555555 
> 		"+lon_0=5.38763888888889 
> 		"+k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
> 		"+towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
> 		+units=m +no_defs)
> 
> pj_transform(fromProj, toProj, 1, 0, &lng, &lat, &alt)

Roger,

There are several missing double quotes in the above example.

I think the fromProj should also be "+proj=latlong +datum=WGS84".
As you have expressed it now, pj_transform() will see no need for a
datum or ellipsoid conversion since the source and destination are
both on the bessel ellipsoid and no datum info was provided for the
source.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From warmerdam at pobox.com  Thu Nov  2 07:10:24 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu, 02 Nov 2006 10:10:24 -0500
Subject: [Proj] Re: Can I set the unit of Mercator Porjection? I'm	trying
	to	overlay shp file to google map.
In-Reply-To: <loom.20061102T142815-959@post.gmane.org>
References: <loom.20061101T151946-883@post.gmane.org>	<4548BD2C.8020206@pobox.com>
	<loom.20061102T142815-959@post.gmane.org>
Message-ID: <454A0A60.4090901@pobox.com>

baijianhua wrote:
> Thanks for response. I think you are right that it doesn't make sense to use 
> degrees as a linear unit for a projected coordinate system in PROJ, but I'm 
> wondering why google map can use Decimal Degree as the coordinate for markers, 
> do you think they are doing some kind of internal coordinate system 
> transformation?

Baijianhu,

Yes, I think this is what they are doing.

 > And, I think it's also very common that we render 2 dimension
> map using decimal degree as unit. So I'm a little confusing what we are 
> actually doing when we talking about decimal degree in 2 dimension map. Forgive 
> me that maybe I'm asking stupid questions, I'm not very famirliar in this field.

Any time you know the projected coordinate and the coordinate system you can
turn the location back into decimal degrees.  This is often done for display
purposes since projected coordinates are often confusing to the layman.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From warmerdam at pobox.com  Thu Nov  2 07:16:12 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu, 02 Nov 2006 10:16:12 -0500
Subject: [Proj] Proj4 Bug  (rtodms)
In-Reply-To: <eicoku$7es$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org>
Message-ID: <454A0BBC.8020406@pobox.com>

cp wrote:
> due to floating point precision, there is a bug in source code of rtodms.c
> 
> the portion of code
> 
>   r = floor(r * CONV + .5);
>   sec = fmod(r / RES, 60.);
>   r = floor(r / RES60);
>   min = fmod(r, 60.);
>   deg = r / 60.;
> 
> must be replaced by
> 
>   r = floor(r * CONV + .5);
>   sec = fmod(r / RES, 60.);
>   r = floor(r / RES60);
>   min = fmod(r, 60.);
>   r = floor(r / 60.);
>   deg = r;
> 
> the conversion of 0.06981317007977319578 (4 degree in radian)  is 3d with 
> the first code (wrong) and  4d with the second (true).

"cp",

I have applied your patch in CVS.

Thanks,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From roger at opq.se  Thu Nov  2 11:54:27 2006
From: roger at opq.se (Roger Oberholtzer)
Date: Thu, 02 Nov 2006 20:54:27 +0100
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <454A0864.40809@pobox.com>
References: <C1669010.859A%ovv@hetnet.nl> <1162477679.31250.17.camel@acme>
	<454A0864.40809@pobox.com>
Message-ID: <1162497268.7137.10.camel@shark.pacific>

On Thu, 2006-11-02 at 10:01 -0500, Frank Warmerdam wrote:
> Roger Oberholtzer wrote:
> > On Thu, 2006-10-26 at 16:17 +0200, Oscar van Vlijmen wrote:
> > 
> >> I suppose the "confirmed" transformation:
> >>
> >> <quote>
> >> a more accurate definition for the Dutch system is:
> >> +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889
> >> +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel  +units=m
> >> +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
> >> 03473836068,4.0812 
> >> +no_defs +to +proj=latlong +datum=WGS84
> >> </quote>
> > 
> > OK. Given these values, how would one do this using the C API, and the
> > pj_transform() function. Starting with WGS84 lat/long values as provided
> > by a GPS receiver set to provide WGS84 values?
> > 
> > I know that I am asking numerous similar C-API question on this list,
> > but I do not really feel I have it sorted out in my mind. 
> > 
> > Would it be:
> > 
> > fromProj = pj_init_plus(+proj=latlong +ellps=bessel)
> > 
> > toProj   = pj_init_plus(
> > 		"+proj=sterea +lat_0=52.15616055555555 
> > 		"+lon_0=5.38763888888889 
> > 		"+k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
> > 		"+towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
> > 		+units=m +no_defs)
> > 
> > pj_transform(fromProj, toProj, 1, 0, &lng, &lat, &alt)
> 
> Roger,
> 
> There are several missing double quotes in the above example.

I know. I wanted to make it easier to read. Maybe I did not succeed.

> I think the fromProj should also be "+proj=latlong +datum=WGS84".
> As you have expressed it now, pj_transform() will see no need for a
> datum or ellipsoid conversion since the source and destination are
> both on the bessel ellipsoid and no datum info was provided for the
> source.

If I use a 'from' of "+proj=latlong +ellps=WGS84", I get incorrect
values. This was my original settings, but my users are complaining that
the derived values are off by 65 meters from what was expected. The
expected values are being provided by the Dutch road authority.

The 'from' string is describing my source data, right? If so, I think
the problem then is the 'to' specification.

There has been a discussion on this list about RD. I am not convinced
that the conclusions were fully correct. Or at least not universal in
the Netherlands.

I really feel I am going in circles here. I am looking for the most
efficient way to convert WGS 84 lat/longs into RD (Dutch) eastings and
northings. I think part of the problem is that proj is so flexible.
Determining the best way, as opposed to just one that will work, eludes
me.

> 
> Best regards,
> 



From gdt at ir.bbn.com  Thu Nov  2 12:55:23 2006
From: gdt at ir.bbn.com (Greg Troxel)
Date: Thu, 02 Nov 2006 15:55:23 -0500
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <1162497268.7137.10.camel@shark.pacific> (Roger Oberholtzer's
	message of "Thu\, 02 Nov 2006 20\:54\:27 +0100")
References: <C1669010.859A%ovv@hetnet.nl> <1162477679.31250.17.camel@acme>
	<454A0864.40809@pobox.com> <1162497268.7137.10.camel@shark.pacific>
Message-ID: <rmislh1zhz8.fsf@fnord.ir.bbn.com>

  > fromProj = pj_init_plus(+proj=latlong +ellps=bessel)
  > 
  > toProj   = pj_init_plus(
  > 		"+proj=sterea +lat_0=52.15616055555555 
  > 		"+lon_0=5.38763888888889 
  > 		"+k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
  > 		"+towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.87
  > 		+units=m +no_defs)
  > 
  > pj_transform(fromProj, toProj, 1, 0, &lng, &lat, &alt)

This really seems wrong, since your input is actually WGS84, and thus
is not using the bessel ellipsoid.

I think you want proj to do several things in order

  convert from WGS84 geodetic (on the standard WGS84/GRS80 ellipsoid) to
  ECEF

  apply a datum shift from WGS84 to your local datum

  convert to geodetic in the bessel ellipsoid

  transform to the RD projection


You might try setting up this chain explicitly and cross-checking with
published coordinates of control points in the various
representations and datums.

-- 

    Greg Troxel <gdt at ir.bbn.com>


From Byeong_Kim at dnr.state.ga.us  Thu Nov  2 12:56:18 2006
From: Byeong_Kim at dnr.state.ga.us (Byeong Kim)
Date: Thu, 02 Nov 2006 15:56:18 -0500
Subject: [Proj] Need help to verify if cs2cs results are correct.
Message-ID: <s54a1545.095@dnr-gwia1.DNR.State.Ga.US>

Hi all,
 
I am trying to figure out the possible displacement by using a Lon/Lat
pair mistakenly. Suppose we have a coordinate based on Clarke1866 (in
ESRI's term it is GCS_Assumed_Geographic_1). This ellipsoid can be found
in many US Census data. If someone uses this pair as if it is based on a
Perfect Sphere (likely R=6370997.0m), what's the possible error in (X,Y)
by Lambert Conformal Projection? That's what I am trying to figure out.
So, I wrote a BAT file (I am using a PROJ.4 utilities on XP by compiling
it with MinGW and datum shift tables) to compute it. Steps are
following: I assume that the given value is based on Clarke1866. So I
transformed it into a Lat/Lon on a Perfect Sphere. Then I performed LCC
projection for both pairs.
 
----------------------------------------------------------------------
@cs2cs +proj=longlat +ellps=clrk66 +datum=NAD27
+towgs84=-3,142,183,0,0,0,0 +to +proj=latlong +ellps=sphere +R=6370997
+towgs84=0,0,0 +no_def -f "%%f2" -w9 MonLonLat >
MonLonLat.Clarke1866ToSphere
@cs2cs +proj=longlat +ellps=clrk66 +datum=NAD27
+towgs84=-3,142,183,0,0,0,0 +to +proj=latlong +ellps=sphere +R=6370997
+towgs84=0,0,0 +no_def -f "%%f2" -w9 MonLonLat 
@proj +proj=lcc +lat_1=60.0 +lat_2=30.0 +lat_0=40.0 +lon_0=-100.0
+x_0=0 +y_0=0 +ellps=sphere +R=6370997 -f "%%f2" -w9  MonLonLat
@proj +proj=lcc +lat_1=60.0 +lat_2=30.0 +lat_0=40.0 +lon_0=-100.0
+x_0=0 +y_0=0 +ellps=sphere +R=6370997 -f "%%f2" -w9 
MonLonLat.Clarke1866ToSphere
----------------------------------------------------------------------
I added a duplicate cs2cs line just because to print out the result of
first line on screen as well as to store in a file.
 
The file "MonLonLat" has this value
-84 33. 0
 
Then I got these outputs. 
-84.0000002     32.8244522 834.0192882  ==> it is also stored in
MonLonLat.Clarke1866ToSphere
1464716.5725192 -614514.0442942 0
1468546.7535622 -633426.1117132 834.0192882 ==> by using
MonLonLat.Clarke1866ToSphere
 
The first line indicating that no serious shift in Lon value as we can
expect. But the lat value comes out significantly different then the
original value and it ended up about 20 km difference!
 
Is anyone willing to confirm that PROJ4 gives the correct answer to my
question? Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061102/03f4669e/attachment.html>

From ovv at hetnet.nl  Thu Nov  2 15:41:34 2006
From: ovv at hetnet.nl (Oscar van Vlijmen)
Date: Fri, 03 Nov 2006 00:41:34 +0100
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <1162497268.7137.10.camel@shark.pacific>
Message-ID: <C17040BE.8706%ovv@hetnet.nl>

> From: Roger Oberholtzer
> Date: Thu, 02 Nov 2006 20:54:27 +0100
> Subject: Re: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
> Belgium)

.....

> If I use a 'from' of "+proj=latlong +ellps=WGS84", I get incorrect
> values. This was my original settings, but my users are complaining that
> the derived values are off by 65 meters from what was expected. The
> expected values are being provided by the Dutch road authority.

If you could provide a clear numerical example with enough significant
digits of what is expected, then there is some hope someone will be able to
give some clues.

See also the good advise from:
> From: Greg Troxel
> Date: Thu, 02 Nov 2006 15:55:23 -0500
> Subject: Re: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
> Belgium)

...

> There has been a discussion on this list about RD. I am not convinced
> that the conclusions were fully correct. Or at least not universal in
> the Netherlands.

The RDNAPTRANS (Windoze) program from the Dutch Cadastre seems to be the one
and only 'universal' NL solution.
Note that this program does a grid interpolation, which complicates the
matter if you are trying to resolve datum transformation and projection
issues.

Note that there is also an 'independent' polynomial solution for the direct
conversion from wgs84 lat,lon to RD x,y, with a stated accuracy of about 25
cm. I forgot with respect to what (mathematical double stereographic
projection or the grid interpolated projection).
Ref:
"Benaderingsformules voor de transformatie tussen RD- en
WGS84-kaartcoördinaten".
http://www.dekoepel.nl/pdf/Transformatieformules.pdf






From ovv at hetnet.nl  Thu Nov  2 15:41:52 2006
From: ovv at hetnet.nl (Oscar van Vlijmen)
Date: Fri, 03 Nov 2006 00:41:52 +0100
Subject: [Proj] conversion latlong to UTM (& vice versa)
In-Reply-To: <20061102162244.juccopguwckw4s4k@webmail.informatika.org>
Message-ID: <C17040CF.8706%ovv@hetnet.nl>

> From: oon-informatika.org
> Date: Thu, 02 Nov 2006 16:22:44 +0700
> Subject: [Proj] conversion latlong to UTM (& vice versa)

...
 
> If I convert from latlong projection to UTM projection,
> I can get the UTM zone from UTM definition, so I can calculate the zone
> from it's longitude.
> 
> If I'm doing vehicle tracking with UTM projection,
> and the vehicle moving between UTM zones,
> How should I do to get UTM zone of current position of vehicle?
> (so I can convert UTM to latlong again).
> 
> Is it any statement or definition of UTM that declare
> how to get UTM Zone from UTM coordinate?
> 
...

I believe it is not possible to derive from the UTM coordinates the zone
number.

For instance,
lat=35, lon=113, zone=49 (central meridian = 111)
gives UTM coordinates (x,y):
682516, 3874871
Exactly the same UTM coordinates are produced for:
lat=35, lon=119, zone=50 (central meridian = 117)

So, there is only one option: convert back from UTM with known zone number
to lat,lon and reconvert in the other zone to UTM.
Or, set the tracking system to lat,lon production!




From gdt at ir.bbn.com  Thu Nov  2 20:32:33 2006
From: gdt at ir.bbn.com (Greg Troxel)
Date: Thu, 02 Nov 2006 23:32:33 -0500
Subject: [Proj] conversion latlong to UTM (& vice versa)
In-Reply-To: <C17040CF.8706%ovv@hetnet.nl> (Oscar van Vlijmen's message of
	"Fri\, 03 Nov 2006 00\:41\:52 +0100")
References: <C17040CF.8706%ovv@hetnet.nl>
Message-ID: <rmid585xi8u.fsf@fnord.ir.bbn.com>

  I believe it is not possible to derive from the UTM coordinates the
  zone number.

I concur, and I'd go further:

It's reasonable to say "x E y N (UTM zone 19)", and "x E y N zone 19
(UTM)", but "x E y N (UTM)" makes about as much sense as saying that
the coordinates of a point are "42 north WGS84".  So really if you
convert to UTM and drop the zone, you are losing information and you
have to infer to go back.

That said, my typical values take me to low eastings in zone 19 nd
high in zone 18, so given a history, a start zone, a measurement rate,
and a speed limit one very likely can infer the zone.  But really it
would be better to pass a 3-tuple rather than pair.


From roger at opq.se  Fri Nov  3 02:34:01 2006
From: roger at opq.se (Roger Oberholtzer)
Date: Fri, 03 Nov 2006 11:34:01 +0100
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <C17040BE.8706%ovv@hetnet.nl>
References: <C17040BE.8706%ovv@hetnet.nl>
Message-ID: <1162550041.11865.47.camel@acme>

On Fri, 2006-11-03 at 00:41 +0100, Oscar van Vlijmen wrote:
> > From: Roger Oberholtzer
> > Date: Thu, 02 Nov 2006 20:54:27 +0100
> > Subject: Re: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
> > Belgium)
> 
> .....
> 
> > If I use a 'from' of "+proj=latlong +ellps=WGS84", I get incorrect
> > values. This was my original settings, but my users are complaining that
> > the derived values are off by 65 meters from what was expected. The
> > expected values are being provided by the Dutch road authority.
> 
> If you could provide a clear numerical example with enough significant
> digits of what is expected, then there is some hope someone will be able to
> give some clues.

Hello Oscar,

My problem is that my user is keeping me guessing here. If I had
bulletproof test values, I could make better progress. I confess I do
not trust the test points I have been given.

You seem like they type of guy who may have a few WGS84 lat/longs in
degrees and the corresponding RD northings and eastings that should
result. Or perhaps you have a pointer to a site that has such items? I
can then fiddle with this to get what I need, leaving the list in peace
for a bit.

-- 
Roger Oberholtzer

OPQ Systems AB
Ramböll Sverige AB
Kapellgränd 7
P.O. Box 4205
SE-102 65 Stockholm, Sweden

Tel: Int +46 8-615 60 20
Fax: Int +46 8-31 42 23



From roger at opq.se  Fri Nov  3 05:40:26 2006
From: roger at opq.se (Roger Oberholtzer)
Date: Fri, 03 Nov 2006 14:40:26 +0100
Subject: [Proj] conversion latlong to UTM (& vice versa)
In-Reply-To: <20061102162244.juccopguwckw4s4k@webmail.informatika.org>
References: <20061102162244.juccopguwckw4s4k@webmail.informatika.org>
Message-ID: <1162561227.25604.4.camel@acme>

On Thu, 2006-11-02 at 16:22 +0700, oon at informatika.org wrote:
> Dear All Proj user,
> 
> I want to convert coordinate with datum WGS84, from latlong projection 
> to UTM projection
> (and vice versa).
> 
> If I convert from latlong projection to UTM projection,
> I can get the UTM zone from UTM definition, so I can calculate the zone 
> from it's longitude.
> 
> If I'm doing vehicle tracking with UTM projection,
> and the vehicle moving between UTM zones,
> How should I do to get UTM zone of current position of vehicle?
> (so I can convert UTM to latlong again).
> 
> Is it any statement or definition of UTM that declare
> how to get UTM Zone from UTM coordinate?
> 
> Is it any Proj utilities (function/procedure) that support my problem?

Not exactly an answer here, but we provide locations from moving
vehicles as well. In the countries that are UTM and span more than one
zone, it is quite often the case that one zone is chosen as the one used
in all calcs in the country. In Spain, for example, it is the zone where
Madrid is. In Finland it is Helsinki. In Saudi Arabia it is Riyadh. So,
maybe that is an approach. This is mostly useful for GIS-type apps more
than those wanting to find absolute locations. Of course, all your data
must agree with this.

-- 
Roger Oberholtzer

OPQ Systems AB
Ramböll Sverige AB
Kapellgränd 7
P.O. Box 4205
SE-102 65 Stockholm, Sweden

Tel: Int +46 8-615 60 20
Fax: Int +46 8-31 42 23



From baijianhua at gmail.com  Fri Nov  3 06:23:06 2006
From: baijianhua at gmail.com (baijianhua)
Date: Fri, 3 Nov 2006 14:23:06 +0000 (UTC)
Subject: [Proj] Re: Can I set the unit of Mercator Porjection?
	I'm	trying	to	overlay shp file to google map.
References: <loom.20061101T151946-883@post.gmane.org>	<4548BD2C.8020206@pobox.com>
	<loom.20061102T142815-959@post.gmane.org>
	<454A0A60.4090901@pobox.com>
Message-ID: <loom.20061103T152049-720@post.gmane.org>

Thanks, Frank, Thanks for you response and thanks for you enthusiasm to this 
community.





From ovv at hetnet.nl  Fri Nov  3 07:41:00 2006
From: ovv at hetnet.nl (Oscar van Vlijmen)
Date: Fri, 03 Nov 2006 16:41:00 +0100
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <1162550041.11865.47.camel@acme>
Message-ID: <C171219C.8729%ovv@hetnet.nl>

> From: Roger Oberholtzer
> Date: Fri, 03 Nov 2006 11:34:01 +0100
> Subject: Re: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
> Belgium)

>> If you could provide a clear numerical example with enough significant
>> digits of what is expected, then there is some hope someone will be able to
>> give some clues.

....

> You seem like they type of guy who may have a few WGS84 lat/longs in
> degrees and the corresponding RD northings and eastings that should
> result. Or perhaps you have a pointer to a site that has such items? I
> can then fiddle with this to get what I need, leaving the list in peace
> for a bit.

To start with, see the archive:
<http://lists.maptools.org/pipermail/proj/>
and my (Oscar) posting dated 2006-01-12
"Re: [Proj] proj and Dutch RD"
with lots of references and examples.
Note that there are no published official test points I know of with the
2004+ transformation parameters, as discussed recently on this list.



From cjmce at lsu.edu  Fri Nov  3 08:31:54 2006
From: cjmce at lsu.edu (Clifford J Mugnier)
Date: Fri, 3 Nov 2006 10:31:54 -0600
Subject: [Proj] conversion latlong to UTM (& vice versa)
Message-ID: <OFCFEE3E60.409F4993-ON8625721B.005ACFCE-8625721B.005ACFEB@lsu.edu>





The Military Grid Reference System is based on the UTM Grid.  The
alphanumeric system will allow identification of the specific UTM Zone and
therefore an avenue to compute the inverse to Latitude and Longitude, since
the MGRS is designed as to NOT repeat the same alphanumeric coordinates in
adjacent zones.  (Prevents "friendly fire" from indirect artillery
support.)  Without MGRS for a clue, there is no possible way to figure out
a particular zone unless you have some vague idea where the coordinates are
and can make an intelligent guess regarding the magnitude of the Eastings
(greater than 500K or less than 500K) in an area bounded by ONLY two zones.

Same rationale would work for areas near the equator.

My two cents ...

Clifford J. Mugnier, C.P., C.M.S.
National Director (2006-2008),
Photogrammetric Applications Division
American Society for Photogrammetry and Remote Sensing
and
Chief of Geodesy,
CENTER FOR GEOINFORMATICS
Department of Civil Engineering
CEBA 3223A
LOUISIANA STATE UNIVERSITY
Baton Rouge, LA  70803
Voice and Facsimile:  (225) 578-8536 [Academic]
Voice and Facsimile:  (225) 578-4474 [Research]
Honorary Life Member of the
Louisiana Society of Professional Surveyors
======================================================
http://www.asprs.org/resources/GRIDS/
http://appl003.lsu.edu/eng/ceeweb.nsf/$Content/Mugnier
======================================================


On Thu, 2006-11-02 at 16:22 +0700, oon at informatika.org wrote:
> Dear All Proj user,
>
> I want to convert coordinate with datum WGS84, from latlong projection
> to UTM projection
> (and vice versa).
>
> If I convert from latlong projection to UTM projection,
> I can get the UTM zone from UTM definition, so I can calculate the zone
> from it's longitude.
>
> If I'm doing vehicle tracking with UTM projection,
> and the vehicle moving between UTM zones,
> How should I do to get UTM zone of current position of vehicle?
> (so I can convert UTM to latlong again).
>
> Is it any statement or definition of UTM that declare
> how to get UTM Zone from UTM coordinate?
>
> Is it any Proj utilities (function/procedure) that support my problem?

Not exactly an answer here, but we provide locations from moving
vehicles as well. In the countries that are UTM and span more than one
zone, it is quite often the case that one zone is chosen as the one used
in all calcs in the country. In Spain, for example, it is the zone where
Madrid is. In Finland it is Helsinki. In Saudi Arabia it is Riyadh. So,
maybe that is an approach. This is mostly useful for GIS-type apps more
than those wanting to find absolute locations. Of course, all your data
must agree with this.

--
Roger Oberholtzer

OPQ Systems AB
Ramböll Sverige AB
Kapellgränd 7
P.O. Box 4205
SE-102 65 Stockholm, Sweden

Tel: Int +46 8-615 60 20
Fax: Int +46 8-31 42 23

_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj




From warmerdam at pobox.com  Fri Nov  3 09:32:19 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri, 03 Nov 2006 12:32:19 -0500
Subject: [Proj] Datum shifts in PROJ's EPSG table (The Netherlands and
	Belgium)
In-Reply-To: <1162497268.7137.10.camel@shark.pacific>
References: <C1669010.859A%ovv@hetnet.nl>
	<1162477679.31250.17.camel@acme>	<454A0864.40809@pobox.com>
	<1162497268.7137.10.camel@shark.pacific>
Message-ID: <454B7D23.8040000@pobox.com>

Roger Oberholtzer wrote:
> If I use a 'from' of "+proj=latlong +ellps=WGS84", I get incorrect
> values. This was my original settings, but my users are complaining that
> the derived values are off by 65 meters from what was expected. The
> expected values are being provided by the Dutch road authority.

Roger,

Please use +datum=WGS84.  This internally expands to:
    +ellps=WGS84 +towgs84=0,0,0

I'm not sure if it makes a difference, but doing it your way is making
my skin crawl!

> The 'from' string is describing my source data, right? If so, I think
> the problem then is the 'to' specification.
> 
> There has been a discussion on this list about RD. I am not convinced
> that the conclusions were fully correct. Or at least not universal in
> the Netherlands.
> 
> I really feel I am going in circles here. I am looking for the most
> efficient way to convert WGS 84 lat/longs into RD (Dutch) eastings and
> northings. I think part of the problem is that proj is so flexible.
> Determining the best way, as opposed to just one that will work, eludes
> me.

I can't vouch for the +towgs84 parameters.  I feel your pain, but I'm
not sure I can help.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From ovv at hetnet.nl  Fri Nov  3 11:29:09 2006
From: ovv at hetnet.nl (Oscar van Vlijmen)
Date: Fri, 03 Nov 2006 20:29:09 +0100
Subject: [Proj] conversion latlong to UTM (& vice versa)
In-Reply-To: <1162561227.25604.4.camel@acme>
Message-ID: <C1715715.8731%ovv@hetnet.nl>

> From: Roger Oberholtzer
> Date: Fri, 03 Nov 2006 14:40:26 +0100
> Subject: Re: [Proj] conversion latlong to UTM (& vice versa)

> Not exactly an answer here, but we provide locations from moving
> vehicles as well. In the countries that are UTM and span more than one
> zone, it is quite often the case that one zone is chosen as the one used
> in all calcs in the country. In Spain, for example, it is the zone where
> Madrid is. In Finland it is Helsinki. In Saudi Arabia it is Riyadh. So,
> maybe that is an approach. This is mostly useful for GIS-type apps more
> than those wanting to find absolute locations. Of course, all your data
> must agree with this.

Actually, this doesn't sound too idiotic.
I did a calculation for Saudi Arabia.
Suppose everything is UTM based, with the zone Ar-Riyad is in. Riyad is at
24:38N, 46:43E, hence in UTM zone 38, central meridian 45 deg.
I'll travel from a location near Egypt at 28N, 36E to somewhere near the
Oman border at 22N, 55E (try this with a car, but that's another story!).
Many 'transportation people' use UTM coordinates to get an idea of the
distance by taking the vectorial distance between the x,y coordinates of
source and target (i.e. sqrt(dx^2+dy^2)).

The source location is in UTM zone 37 and the target is in zone 40. Let's
calculate everything as if it were in zone 38 on a wgs84 ellipsoid.
Using an ultra-wide transverse mercator projection function (like libproj's
ftmerc; ask mr. Evenden by email), we get for the source an x,y =
-386952.39, 3130081.43 m
and for the target:
1536016.65, 2466933.90
Vectorial distance =
2034102.89 m.
The 'true' geodesic distance, calculated with 'Vincenty' (not in PROJ)
gives:
2027075.25 m
That's about 7 kilometers off, but only 1/3 percent.
Since one usually doesn't drive or even fly along a geodesic line, this
distance estimation is quite reasonable.
It isn't even necessary to use an ultra-wide tmerc, the regular tmerc in
(lib)proj produces in this case x,y values that differ only a couple of
millimeters from the exact TM values.



From gerald.evenden at verizon.mail  Sun Nov  5 11:48:16 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Sun, 05 Nov 2006 14:48:16 -0500
Subject: [Proj] Proj4 Bug  (rtodms)
In-Reply-To: <eicoku$7es$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org>
Message-ID: <200611051448.17043.gerald.evenden@verizon.mail>

On Thursday 02 November 2006 7:34 am, cp wrote:
> due to floating point precision, there is a bug in source code of rtodms.c
>
> the portion of code
>
>   r = floor(r * CONV + .5);
>   sec = fmod(r / RES, 60.);
>   r = floor(r / RES60);
>   min = fmod(r, 60.);
>   deg = r / 60.;
>
> must be replaced by
>
>   r = floor(r * CONV + .5);
>   sec = fmod(r / RES, 60.);
>   r = floor(r / RES60);
>   min = fmod(r, 60.);
>   r = floor(r / 60.);
>   deg = r;
>
> the conversion of 0.06981317007977319578 (4 degree in radian)  is 3d with
> the first code (wrong) and  4d with the second (true).

So far, I have not found any way to reproduce your problem and consequently 
find no reason to change code.  However, I do have a couple of questions:

1. on what hardware (chip) was this problem created,

2. what compiler/library was employed and

3, level of optimization specified.

Interestingly, r before being divided by 60 does not have a fractional 
component (exactly equal to 240.).  The implication is that the floating 
point processor produces a "ragged" result where the mantissa is not 
rational.  That is, something like 3.9999... is produced.  The floor 
operation should still have produced 3 as the unchanged code did with simple 
conversion to integer with the memory assignment of the division operation.
I suspect something is gummed up with the handling of the extra bits that are 
part of the mantissa in the floating point hardware.

Lastly, the problem line has been handle by:
     deg = (int)(r / 60.);
for some time in the libproj4 library.  The cast was necessary to keep the 
compiler from complaining during -Wall runs.

Lastly, rtodms is deprecated and will be replaced with rad2dms which allows 
for greater format flexibility and is (unlike rtodms) thread proof.
-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist


From Byeong_Kim at dnr.state.ga.us  Mon Nov  6 04:51:15 2006
From: Byeong_Kim at dnr.state.ga.us (Byeong Kim)
Date: Mon, 06 Nov 2006 07:51:15 -0500
Subject: [Proj] Verification of cs2cs results for geographical coordinate
	system transformation
Message-ID: <s54ee989.027@dnr-gwia1.DNR.State.Ga.US>

Hi all,
 
This is a rephrased posting of what I posted on Nov 2. I am not sure how to remove the old posting. Sorry for my duplication.
*---------------------------------------------------------------------------------------------------------------------------------------------
 
I am trying to figure out the location difference by using a Lon/Lat value mistakenly. 
Suppose you have a collaborator who does not know anything about datum or geocoordinate transformation.  You asked him a lat/lon pair for one of you study subject without specifying the ellipsoid and somehow s/he did not ask you back about it either.
The number s/he gave you is 
-84 33. 0 (Lon Lat Height)
It turned out s/he assumed that this number is based on a perfect sphere (likely R=6370997.0m).
Later, however, you found out that it is based on Clarke1866. In ESRI's term it can be GCS_Assumed_Geographic_1 and this ellipsoid is frequently used for many US Census data. 
Since you use the lat/lon value to do Lambert Conformal Projection, now you will be curious about what the possible error in (X,Y) will be.
This what I am trying to figure out.
 
To answer the question, I wrote a BAT file (I am using a PROJ.4 utilities on XP after compiling it with MinGW and datum shift tables) to compute it. 
 
Steps are following: 
 
0. I created a text file containing a pair of lat/lon value. The name of file is MonLonLat that contains
-84 33. 0
 
1. I transformed the given lat/lon into a Lat/Lon on a Perfect Sphere with cs2cs
cs2cs +proj=longlat +ellps=clrk66 +datum=NAD27 +towgs84=-3,142,183,0,0,0,0 +to +proj=latlong +ellps=sphere +R=6370997 +towgs84=0,0,0 +no_def -f "%%f2" -w9 MonLonLat > MonLonLat.Clarke1866ToSphere
With this line, I got a file MonLonLat.Clarke1866ToSphere what contains
-84.0000002     32.8244522 834.0192882
 
2. Then I performed LCCprojection for both pairs with proj.
 
2a. Using a lat/lon from Clarke1866 ellipsoid
proj +proj=lcc +lat_1=60.0 +lat_2=30.0 +lat_0=40.0 +lon_0=-100.0 +x_0=0 +y_0=0 +ellps=sphere +R=6370997 -f "%%f2" -w9  MonLonLat
This gives me
1464716.5725192 -614514.0442942 0
 
2b. Using a lat/lon from a Perfect Sphere
proj +proj=lcc +lat_1=60.0 +lat_2=30.0 +lat_0=40.0 +lon_0=-100.0 +x_0=0 +y_0=0 +ellps=sphere +R=6370997 -f "%%f2" -w9 MonLonLat.Clarke1866ToSphere
This gives me
1468546.7535622 -633426.1117132 834.0192882
 
2a case represents the event that you use a lat/lon value based on Clarke1866 to do Lambert Conformal Projection as if the number is based on a Perfect Sphere. That is, this is the wrong case.
2b case represents the event that you correct a lat/lon value based on Clarke1866 to be a lat/lon on a Perfect Sphere before doing a projection. That is, it is the correct way I believe.
 
What surprised me is that the error (or difference) is very large for my application.  As you see, the displacement is about 4km in east-west and about 20 km in north-south.
 
I am wondering if any of my calculation is wrong or is there any chance proj4 may have a bug in cs2cs utility.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061106/899938a0/attachment.html>

From gdt at ir.bbn.com  Mon Nov  6 06:56:00 2006
From: gdt at ir.bbn.com (Greg Troxel)
Date: Mon, 06 Nov 2006 09:56:00 -0500
Subject: [Proj] Verification of cs2cs results for geographical coordinate
	system transformation
In-Reply-To: <s54ee989.027@dnr-gwia1.DNR.State.Ga.US> (Byeong Kim's message of
	"Mon\, 06 Nov 2006 07\:51\:15 -0500")
References: <s54ee989.027@dnr-gwia1.DNR.State.Ga.US>
Message-ID: <rmiy7qomxof.fsf@fnord.ir.bbn.com>


"Byeong Kim" <Byeong_Kim at dnr.state.ga.us> writes:

> I am trying to figure out the location difference by using a Lon/Lat
> value mistakenly.  Suppose you have a collaborator who does not know
> anything about datum or geocoordinate transformation.  You asked him
> a lat/lon pair for one of you study subject without specifying the
> ellipsoid and somehow s/he did not ask you back about it either.
> The number s/he gave you is -84 33. 0 (Lon Lat Height) It turned out
> s/he assumed that this number is based on a perfect sphere (likely
> R=6370997.0m).  Later, however, you found out that it is based on
> Clarke1866. In ESRI's term it can be GCS_Assumed_Geographic_1 and
> this ellipsoid is frequently used for many US Census data.  Since
> you use the lat/lon value to do Lambert Conformal Projection, now
> you will be curious about what the possible error in (X,Y) will be.
> This what I am trying to figure out.

>From your email address and -84 33, I'm going to assume that you are
talking about locations in or near the state of Georgia in the US.

It seems highly unlikely that anyone near Georgia (who is not
well-versed in datums and ellipsoids) would be able to come up with
numbers based on a perfect sphere for locations near Georgia.  For you
to do it, you had to use proj!  People that don't understand the
issues almost always either read numbers off a GPS receiver or look at
maps.  USGS topo maps are typically in NAD27 (with the Clarke 1866
ellipsoid).  Around Massachusetts the displacements from NAD83 are
typically a bit under 50m.  People without datum clue usually have not
changed receivers from WGS84, and if so it's probably NAD27 to match
paper maps.  At least in the age of GPS when you get lat/lon without a
datum it's usually in WGS84.

> [lots of description of transforms omitted]

I think I understand what you are trying to do, but I think you are
going about it wrong.  I'm also not perfectly clear on what happened.

There are basically two issues, datum and ellipsoid.  Datum includes
ellipsoid, of course, but you could have two datums that use the same
ellipsoid but have different coordinates for a given point because the
origin is different.

Then, when you transform from geodetic (lat/long) to projected, you
are not changing the datum, but just projecting into a new coordinate
system.  While the math is hairy, from a geodesy point of view this is
far simpler than datum shifts.

If you take a given coordinate pair, and project using different
ellipsoids, you will get very different values.  This is because the
length along the ellipsoid from the equator to your latitude is very
different.  However, if you look at the lat/long values for the same
oint in say NAD27 and NAD83/WGS84 (which are essentially the same if
you're not worrying about the last ~1m), and compute the different
between them *assuming they are in the same datum*, you'll send up
with ~50m.  This is because the datums are not aligned.  But if you
then transform the NAD27 values and the NAD83 values into UTM, where
each UTM conversion uses the datum's ellipsoids (which is what is
normally done), you'll get values that are much farther off, because
of the ellipsoid.


So basically you should be taking your lat/lon values, converting them
all to the same datum, and *only then* projecting them all using the
*same ellipsoid*.  I would expect you to be using your state plane
coordinate system, but that's transverse mercator in two zones for
both nad27 and nad83 according to the files that come with proj.

If you have in the past taken values and projected them using
different ellipsoids, and then tried to relate them to each other,
that's just plain broken and you really should reprocess your original
data.

If you've merely taken values in NAD27 and NAD83 without worrying
about which was which, and projected them into LCC with the Clarke
1866 ellipsoid (or any other *single* ellipsoid, and you want to know
how much error there is, you should

1) decide on the "right" datum in which you will compute errors.  Call
   this D_R.

2) Make a list of 'wrong" datums for which your input might be in.
   Call one D_W, and repeat for all.

2) take a lot of input points, and for each

  a) project to LCC with the D_R's ellipsoid.
  b) assume the point is in D_W, and convert to lat/lon in D_R.  Then
  project to LCC with D_R's ellipsoid.

Then, compute cartesian distance from a-b output, and look at those
over the input space.  You should see a fairly smooth change in error.

As to what you did

> 1. I transformed the given lat/lon into a Lat/Lon on a Perfect Sphere
> with cs2cs
> cs2cs +proj=longlat +ellps=clrk66 +datum=NAD27
> +towgs84=-3,142,183,0,0,0,0 +to +proj=latlong +ellps=sphere +R=6370997
> +towgs84=0,0,0 +no_def -f "%%f2" -w9 MonLonLat >
> MonLonLat.Clarke1866ToSphere
> With this line, I got a file MonLonLat.Clarke1866ToSphere what
> contains
> -84.0000002     32.8244522 834.0192882

So this is hugely different, about 0.8 degreees of latitude which is
~50 miles.  It surprises me that the differences are so large, but no
one uses a spherical earth model -- because it is such a poor
approximation to reality.

In doing that step, you've conflated two issues.  One is the ellipsoid
used for the geodetic projection (from XYZ in ECEF), and the other is
datum shifts.  But the datum shift values are small, and they are even
smaller in North America.

> 2. Then I performed LCCprojection for both pairs with proj.
> What surprised me is that the error (or difference) is very large for
> my application.  As you see, the displacement is about 4km in
> east-west and about 20 km in north-south.

I would expect more like 89 km in northing given 0.8 degrees, but I
suspect the datum/ellipsoid shift errors and the project erors from
using differnet ellipsoids may largely cancel, but this is
sufficiently far off from what one ought to be doing that there may be
something else going on.

> I am wondering if any of my calculation is wrong or is there any
> chance proj4 may have a bug in cs2cs utility.

None of this is evidence of problems with proj4.  


From roger at opq.se  Tue Nov  7 02:35:55 2006
From: roger at opq.se (Roger Oberholtzer)
Date: Tue, 07 Nov 2006 11:35:55 +0100
Subject: [Proj] ostn02: northings and eastings to lats and longs
Message-ID: <1162895755.8925.18.camel@acme>


I am happily using proj to convert WGS84 lats and longs into OSTN02
eastings and northings. My C API code (seen in these parts before...)
is:


fromProj = pj_init_plus(
                "+proj=latlong "
                "+ellps=WGS84 "
                "+towgs84=0,0,0 "
                "+nodefs")

toProj   = pj_init_plus(
                "+proj=tmerc "
                "+lat_0=49 "
                "+lon_0=-2 "
                "+k=0.9996012717 "
                "+x_0=400000 "
                "+y_0=-100000 "
                "+ellps=airy "

"+towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 "
                "+nadgrids=gb.gsb "
                "+units=m "
                "+no_defs")

Now, how would I specify these items if I wanted to go in the opposite
direction - from OSTN02 northings and eastings to WGS84 lats and longs?
Surely it is not just to turn around the fromProj and the toProj. Note
also that I am doing a grid shift via the  "+nadgrids=gb.gsb " option.

I have a number of such conversions that I want to do, but one example
will get me on my way.


-- 
Roger Oberholtzer

OPQ Systems AB
Ramböll Sverige AB
Kapellgränd 7
P.O. Box 4205
SE-102 65 Stockholm, Sweden

Tel: Int +46 8-615 60 20
Fax: Int +46 8-31 42 23



From warmerdam at pobox.com  Tue Nov  7 07:56:35 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Tue, 07 Nov 2006 10:56:35 -0500
Subject: [Proj] ostn02: northings and eastings to lats and longs
In-Reply-To: <1162895755.8925.18.camel@acme>
References: <1162895755.8925.18.camel@acme>
Message-ID: <4550ACB3.3000405@pobox.com>

Roger Oberholtzer wrote:
> I am happily using proj to convert WGS84 lats and longs into OSTN02
> eastings and northings. My C API code (seen in these parts before...)
> is:
> 
> 
> fromProj = pj_init_plus(
>                 "+proj=latlong "
>                 "+ellps=WGS84 "
>                 "+towgs84=0,0,0 "
>                 "+nodefs")
> 
> toProj   = pj_init_plus(
>                 "+proj=tmerc "
>                 "+lat_0=49 "
>                 "+lon_0=-2 "
>                 "+k=0.9996012717 "
>                 "+x_0=400000 "
>                 "+y_0=-100000 "
>                 "+ellps=airy "
> 
> "+towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 "
>                 "+nadgrids=gb.gsb "
>                 "+units=m "
>                 "+no_defs")
> 
> Now, how would I specify these items if I wanted to go in the opposite
> direction - from OSTN02 northings and eastings to WGS84 lats and longs?
> Surely it is not just to turn around the fromProj and the toProj. Note
> also that I am doing a grid shift via the  "+nadgrids=gb.gsb " option.

Roger,

I hate to once again state the obvious, but yes, you should just
reverse them.

The pj_transform() function understands how to apply the gridshift
in a forward or backward direction.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From ch.panel at free.fr  Wed Nov  8 01:29:25 2006
From: ch.panel at free.fr (cp)
Date: Wed, 8 Nov 2006 10:29:25 +0100
Subject: [Proj] Re: Proj4 Bug  (rtodms)
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
Message-ID: <eis81q$mgn$1@sea.gmane.org>

first, excuse me for my poor english.

"Gerald I. Evenden" <gerald.evenden at verizon.mail> a �crit dans le message de 
news: 200611051448.17043.gerald.evenden at verizon.mail...
>
> So far, I have not found any way to reproduce your problem and 
> consequently
> find no reason to change code.  However, I do have a couple of questions:

this simple program produce a "NOT OK" output :

    #include <math.h>
    #include <stdio.h>
    static int res1,res2;
    int main()
    {
      double r=240.0;
      res1 = r / 60.;
      res2 = floor(r / 60.);
      printf("%s",(res1==res2) ? "OK!" : "NOT OK!");
      getch();
    }

I think that because floor corrects values that were epsilon under the 
absolute value, if epsilon is smaller than the floating point precision.

my compiler is Borland C++ compiler and I work on Windows XP, but I don't 
think that C runtime libraries at this point are differents ??? (I believe 
not because of portability with Kylix) ???

>
> 1. on what hardware (chip) was this problem created,

Intel Pentium

>
> 2. what compiler/library was employed and

Borland C  (CW3230mt.dll)

>
> 3, level of optimization specified.

none

>
> Interestingly, r before being divided by 60 does not have a fractional
> component (exactly equal to 240.).  The implication is that the floating
> point processor produces a "ragged" result where the mantissa is not
> rational.  That is, something like 3.9999... is produced.  The floor
> operation should still have produced 3 as the unchanged code did with 
> simple
> conversion to integer with the memory assignment of the division 
> operation.
> I suspect something is gummed up with the handling of the extra bits that 
> are
> part of the mantissa in the floating point hardware.

I don't, but the hardware in the FPU works with 10 bytes instead of 8 
because of precision and exact numbers doesn't exist in FPU

>
> Lastly, the problem line has been handle by:
>     deg = (int)(r / 60.);

the problem cannot be resolved by this

> for some time in the libproj4 library.  The cast was necessary to keep the
> compiler from complaining during -Wall runs.
>
> Lastly, rtodms is deprecated and will be replaced with rad2dms which 
> allows
> for greater format flexibility and is (unlike rtodms) thread proof.
> -- 
> The whole religious complexion of the modern world is due
> to the absence from Jerusalem of a lunatic asylum.
> -- Havelock Ellis (1859-1939)  British psychologist
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 





From glynn at gclements.plus.com  Wed Nov  8 04:15:52 2006
From: glynn at gclements.plus.com (Glynn Clements)
Date: Wed, 8 Nov 2006 12:15:52 +0000
Subject: [Proj] Re: Proj4 Bug  (rtodms)
In-Reply-To: <eis81q$mgn$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org>
Message-ID: <17745.51832.766874.456479@cerise.gclements.plus.com>


cp wrote:

> > So far, I have not found any way to reproduce your problem and 
> > consequently
> > find no reason to change code.  However, I do have a couple of questions:
> 
> this simple program produce a "NOT OK" output :
> 
>     #include <math.h>
>     #include <stdio.h>
>     static int res1,res2;
>     int main()
>     {
>       double r=240.0;
>       res1 = r / 60.;
>       res2 = floor(r / 60.);
>       printf("%s",(res1==res2) ? "OK!" : "NOT OK!");
>       getch();
>     }

Then there is a bug in either your compiler or your CPU. The values
240.0, 60.0 and 4.0, and the calculation 240.0/60.0, are all exactly
representable in all common floating-point representations (including
all of the formats supported by the i386 family).

> I think that because floor corrects values that were epsilon under the 
> absolute value, if epsilon is smaller than the floating point precision.

The value passed to floor() should be exactly 4.0; if it isn't,
there's a bug in either the compiler or the CPU.

> my compiler is Borland C++ compiler and I work on Windows XP, but I don't 
> think that C runtime libraries at this point are differents ??? (I believe 
> not because of portability with Kylix) ???
> 
> >
> > 1. on what hardware (chip) was this problem created,
> 
> Intel Pentium

The early Pentium chips had a bug in FP division, but I don't think it
applied to cases where the result is exactly representable.

> >
> > 2. what compiler/library was employed and
> 
> Borland C  (CW3230mt.dll)
> 
> >
> > 3, level of optimization specified.
> 
> none

Do you mean that you explicitly disabled optimisations or that you are
using the default settings. I wouldn't rely upon the default settings
not performing optimisations.

> > Interestingly, r before being divided by 60 does not have a fractional
> > component (exactly equal to 240.).  The implication is that the floating
> > point processor produces a "ragged" result where the mantissa is not
> > rational.  That is, something like 3.9999... is produced.  The floor
> > operation should still have produced 3 as the unchanged code did with 
> > simple
> > conversion to integer with the memory assignment of the division 
> > operation.
> > I suspect something is gummed up with the handling of the extra bits that 
> > are
> > part of the mantissa in the floating point hardware.
> 
> I don't, but the hardware in the FPU works with 10 bytes instead of 8 
> because of precision and exact numbers doesn't exist in FPU

Exact numbers most certainly do exist in an FPU. In fact, all of the
numbers which it handles are exact. In some cases, the result of an
operation may not exactly match the correct answer, but that's a
different matter.

In particular, 240.0, 60.0 and 4.0 can all be exactly represented, and
there is no reason why 240.0/60.0 shouldn't produce exactly 4.0
(regardless of whether you use 32-bit, 64-bit or 80-bit precision).

OTOH, if the compiler decides to "optimise" the evaluation of r/60.0
to r * (1/60.0), you can expect to get some rounding error, as 1/60.0
isn't exactly representable. But the compiler shouldn't be doing that
if you have disabled *all* optimisations.

-- 
Glynn Clements <glynn at gclements.plus.com>


From gdt at ir.bbn.com  Wed Nov  8 04:39:26 2006
From: gdt at ir.bbn.com (Greg Troxel)
Date: Wed, 08 Nov 2006 07:39:26 -0500
Subject: [Proj] Re: Proj4 Bug  (rtodms)
In-Reply-To: <eis81q$mgn$1@sea.gmane.org> (ch.panel@free.fr's message of "Wed\,
	8 Nov 2006 10\:29\:25 +0100")
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org>
Message-ID: <rmir6wep0xt.fsf@fnord.ir.bbn.com>

Your system looks buggy.  I ran this on NetBSD/i386 4.99.3 with 

> cc -v 
Using built-in specs.
Target: i386--netbsdelf
Configured with: /usr/src/tools/gcc/../../gnu/dist/gcc4/configure
--enable-long-long --disable-multilib --enable-threads
--disable-symvers --build=i386-unknown-netbsdelf3.99.21
--host=i386--netbsdelf --target=i386--netbsdelf
Thread model: posix
gcc version 4.1.2 20060628 prerelease (NetBSD nb2 20060711)

and a Core Duo and got OK!.

(But, I had to delete getch() - that doesn't appear to be part of C99,
but curses.)


From miked at jamagination.com  Wed Nov  8 05:27:42 2006
From: miked at jamagination.com (Mike D'Ambrogia)
Date: Wed, 8 Nov 2006 05:27:42 -0800
Subject: [Proj] cs2cs - epsg codes DD.mm.ss to  DD.mm.ssss
In-Reply-To: <4550ACB3.3000405@pobox.com>
Message-ID: <004701c70339$bee0c810$0501a8c0@toshiba>

Need to use cs2cs to convert degrees.minutes.seconds to
degrees.minutes.milliseconds, dug thru the epsg file but nothing jumps
out at me. Can someone point me to the epsg codes for these formats?

Thx

MikeD



From gdt at ir.bbn.com  Wed Nov  8 05:34:56 2006
From: gdt at ir.bbn.com (Greg Troxel)
Date: Wed, 08 Nov 2006 08:34:56 -0500
Subject: [Proj] Re: Proj4 Bug  (rtodms)
In-Reply-To: <eis81q$mgn$1@sea.gmane.org> (ch.panel@free.fr's message of "Wed\,
	8 Nov 2006 10\:29\:25 +0100")
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org>
Message-ID: <rmifycuoydb.fsf@fnord.ir.bbn.com>

  From: "cp" <ch.panel at free.fr>

  my compiler is Borland C++ compiler and I work on Windows XP, but I don't 
  think that C runtime libraries at this point are differents ??? (I believe 
  not because of portability with Kylix) ???

I suggest getting and running "paranoia.c" from 

  http://www.netlib.org/paranoia/

Running on my system (cpu, compiler, OS), I get

  No failures, defects nor flaws have been discovered.
  Rounding appears to conform to the proposed IEEE standard P754,
  except for possibly Double Rounding during Gradual Underflow.
  The arithmetic diagnosed appears to be Excellent!
  END OF TEST.

I have in the past seen problems.  It seems highly likely that cp's
system has issues, and I'd like to see the output of paranoia.



From warmerdam at pobox.com  Wed Nov  8 07:36:52 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 08 Nov 2006 10:36:52 -0500
Subject: [Proj] cs2cs - epsg codes DD.mm.ss to  DD.mm.ssss
In-Reply-To: <004701c70339$bee0c810$0501a8c0@toshiba>
References: <004701c70339$bee0c810$0501a8c0@toshiba>
Message-ID: <4551F994.9030608@pobox.com>

Mike D'Ambrogia wrote:
> Need to use cs2cs to convert degrees.minutes.seconds to
> degrees.minutes.milliseconds, dug thru the epsg file but nothing jumps
> out at me. Can someone point me to the epsg codes for these formats?

MikeD,

First, PROJ.4 definately does not support a deg.min.millisecond form.

I scanned the EPSG angular units of measures codes (91xx) and didn't
see anything that looked like what you want.

I have attached the EPSG units of measure table as an EPSG if you want
to dig through it in yourself.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org

-------------- next part --------------
A non-text attachment was scrubbed...
Name: unit_of_measure.csv
Type: text/x-comma-separated-values
Size: 18366 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061108/4b91be5e/attachment.bin>

From ch.panel at free.fr  Wed Nov  8 09:10:09 2006
From: ch.panel at free.fr (cp)
Date: Wed, 8 Nov 2006 18:10:09 +0100
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
References: <eicoku$7es$1@sea.gmane.org><200611051448.17043.gerald.evenden@verizon.mail><eis81q$mgn$1@sea.gmane.org>
	<rmifycuoydb.fsf@fnord.ir.bbn.com>
Message-ID: <eit388$1i8$1@sea.gmane.org>

After these rights observations, I look at more seriously this portion of 
code.

The numbers have effectively right and exact representations in ten-bytes 
format, but the compiler instead of making r/60 makes r * 1/60 so it changes 
a little thing. I precise that this is done without any optimization (force 
no optimization) and with option "don't correct FDIV flaw" (for old 
processors) and "no quick floating points". I have seen some quircks in 
MS-Compiler, now I am seeing in Borland compiler.

It is not possible to go through and to force the compiler (I don't know how 
?) to generate fdiv instead of fmul instruction.

here is the code generated

   ;
   ;   res1 = (int)(r / 60.);
   ;
 ?debug L 11
 fld       tbyte ptr [@2]                                     <= 1/60 with 8 
bytes precision and not 10 bytes precision
 fmul      qword ptr [ebp-8]
 call      __ftol
 mov       dword ptr [_res1],eax
   ;
   ;   res2 = floor(r / 60.);
   ;
 ?debug L 12
 fld       tbyte ptr [@2]
 fmul      qword ptr [ebp-8]
 add       esp,-8
 fstp      qword ptr [esp]
 call      _floor
 add       esp,8
 call      __ftol
 mov       dword ptr [_res2],eax
   ;
   ;   printf("%s",(res1==res2) ? "OK!" : "NOT OK!");


A different code is generated by MS-Compiler which is right in this case.

A same Code is generated with the free command line compiler BCC32.exe : 
Borland C++ 5.5.1 (Borland Builder, disabling too all optimizations)

So the problem is staying for all people who are working with Borland 
environment or with code optimization and  r / 60. give a false result.


In Last, thanks for all constructors of proj4 and BRAVO for the work 
accomplished.

C.PANEL






From gerald.evenden at verizon.mail  Wed Nov  8 09:46:22 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Wed, 08 Nov 2006 12:46:22 -0500
Subject: [Proj] Re: Proj4 Bug  (rtodms)
In-Reply-To: <eis81q$mgn$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org>
Message-ID: <200611081246.22512.gerald.evenden@verizon.mail>

On Wednesday 08 November 2006 4:29 am, cp wrote:
> first, excuse me for my poor english.

I have no trouble understanding you so your English is OK by me.

> "Gerald I. Evenden" <gerald.evenden at verizon.mail> a �crit dans le message
> de news: 200611051448.17043.gerald.evenden at verizon.mail...
>
> > So far, I have not found any way to reproduce your problem and
> > consequently
> > find no reason to change code.  However, I do have a couple of questions:
>
> this simple program produce a "NOT OK" output :
>
>     #include <math.h>
>     #include <stdio.h>
>     static int res1,res2;
>     int main()
>     {
>       double r=240.0;
>       res1 = r / 60.;
>       res2 = floor(r / 60.);
>       printf("%s",(res1==res2) ? "OK!" : "NOT OK!");
>       getch();
>     }
>
Minor note: what is the "getch" for?

To replicate your example I copied your code into 'sample.c':

cat sample.c
#include <math.h>
#include <stdio.h>
static int res1,res2;
int main()
{
        double r=240.0;
        res1 = r / 60.;
        res2 = floor(r / 60.);
        printf("%s",(res1==res2) ? "OK!" : "NOT OK!");
//      getch();
}

I then did:

gie at charon:~/tmp$ gcc sample.c -lm
gie at charon:~/tmp$ ./a.out
OK!

which gives in an "OK" answer.

As for other details:

gcc --version
gcc (GCC) 4.0.3 (Ubuntu 4.0.3-1ubuntu5)
Copyright (C) 2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Libc and libm are standard Gnu libraries.

Dual 64 bit processor chip: intel(R) Pentium(R) 4 CPU 3.00GHz

Check the floating point rounding modes (described in Harbison & Steele, 5th 
edition, p.481.  On my system, gdb (Gnu debugger) displays "info float" as:

Control Word:        0x037f   IM DM ZM OM UM PM
                       PC: Extended Precision (64-bits)
                       RC: Round to nearest

which seems most appropriate for most applications.  Obviously, I do not have 
information on controlling these details on your Borland system.

It would be interesting if others with different systems would run the above 
test and let us know their results.

> I think that because floor corrects values that were epsilon under the
> absolute value, if epsilon is smaller than the floating point precision.
>
> my compiler is Borland C++ compiler and I work on Windows XP, but I don't
> think that C runtime libraries at this point are differents ??? (I believe
> not because of portability with Kylix) ???
>
> > 1. on what hardware (chip) was this problem created,
>
> Intel Pentium
>
> > 2. what compiler/library was employed and
>
> Borland C  (CW3230mt.dll)
>
> > 3, level of optimization specified.
>
> none
>
> > Interestingly, r before being divided by 60 does not have a fractional
> > component (exactly equal to 240.).  The implication is that the floating
> > point processor produces a "ragged" result where the mantissa is not
> > rational.  That is, something like 3.9999... is produced.  The floor
> > operation should still have produced 3 as the unchanged code did with
> > simple
> > conversion to integer with the memory assignment of the division
> > operation.
> > I suspect something is gummed up with the handling of the extra bits that
> > are
> > part of the mantissa in the floating point hardware.
>
> I don't, but the hardware in the FPU works with 10 bytes instead of 8
> because of precision and exact numbers doesn't exist in FPU
>
> > Lastly, the problem line has been handle by:
> >     deg = (int)(r / 60.);
>
> the problem cannot be resolved by this
>
> > for some time in the libproj4 library.  The cast was necessary to keep
> > the compiler from complaining during -Wall runs.
> >
> > Lastly, rtodms is deprecated and will be replaced with rad2dms which
> > allows
> > for greater format flexibility and is (unlike rtodms) thread proof.

...
-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist



From warmerdam at pobox.com  Wed Nov  8 10:20:09 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 08 Nov 2006 13:20:09 -0500
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <eit388$1i8$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org><200611051448.17043.gerald.evenden@verizon.mail><eis81q$mgn$1@sea.gmane.org>	<rmifycuoydb.fsf@fnord.ir.bbn.com>
	<eit388$1i8$1@sea.gmane.org>
Message-ID: <45521FD9.7040406@pobox.com>

cp wrote:
> After these rights observations, I look at more seriously this portion of 
> code.
...
> So the problem is staying for all people who are working with Borland 
> environment or with code optimization and  r / 60. give a false result.
> 
> In Last, thanks for all constructors of proj4 and BRAVO for the work 
> accomplished.

Folks,

I haven't heard any statement that the proposed change was harmful, did
I miss anything?

If not, then I think the change is worth applying on the basis that it
makes the results right even if some compilers are applying questionable
optimizations.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From Chris.Barker at noaa.gov  Wed Nov  8 10:34:18 2006
From: Chris.Barker at noaa.gov (Christopher Barker)
Date: Wed, 08 Nov 2006 10:34:18 -0800
Subject: [Proj] Re: Proj4 Bug  (rtodms)
In-Reply-To: <200611081246.22512.gerald.evenden@verizon.mail>
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org>
	<200611081246.22512.gerald.evenden@verizon.mail>
Message-ID: <4552232A.8060605@noaa.gov>

Gerald I. Evenden wrote:

> It would be interesting if others with different systems would run the above 
> test and let us know their results.

I get OK too:

OS-X 10.4, 64 bit dual PPC

gcc --version
powerpc-apple-darwin8-gcc-4.0.1 (GCC) 4.0.1 (Apple Computer, Inc. build 
5247)


-Chris



-- 
Christopher Barker, Ph.D.
Oceanographer
                                     		
NOAA/OR&R/HAZMAT         (206) 526-6959   voice
7600 Sand Point Way NE   (206) 526-6329   fax
Seattle, WA  98115       (206) 526-6317   main reception

Chris.Barker at noaa.gov


From glynn at gclements.plus.com  Wed Nov  8 22:40:04 2006
From: glynn at gclements.plus.com (Glynn Clements)
Date: Thu, 9 Nov 2006 06:40:04 +0000
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <eit388$1i8$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org> <rmifycuoydb.fsf@fnord.ir.bbn.com>
	<eit388$1i8$1@sea.gmane.org>
Message-ID: <17746.52548.650207.757582@cerise.gclements.plus.com>


cp wrote:

> The numbers have effectively right and exact representations in ten-bytes 
> format, but the compiler instead of making r/60 makes r * 1/60 so it changes 
> a little thing. I precise that this is done without any optimization (force 
> no optimization) and with option "don't correct FDIV flaw" (for old 
> processors) and "no quick floating points".

In that case, the Borland compiler is entirely useless for any code
which makes non-trivial use of floating-point arithmetic.

Even if this particular issue can be worked around, you are likely to
encounter similar issues time and time again.

Any compiler written by someone who doesn't understand that x/y and
x*(1/y) aren't equivalent simply isn't worth the disk space it
occupies.

-- 
Glynn Clements <glynn at gclements.plus.com>


From gerald.evenden at verizon.mail  Wed Nov  8 15:01:59 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Wed, 08 Nov 2006 18:01:59 -0500
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <45521FD9.7040406@pobox.com>
References: <eicoku$7es$1@sea.gmane.org> <eit388$1i8$1@sea.gmane.org>
	<45521FD9.7040406@pobox.com>
Message-ID: <200611081801.59556.gerald.evenden@verizon.mail>

On Wednesday 08 November 2006 1:20 pm, Frank Warmerdam wrote:
> cp wrote:
> > After these rights observations, I look at more seriously this portion of
> > code.
>
> ...
>
> > So the problem is staying for all people who are working with Borland
> > environment or with code optimization and  r / 60. give a false result.
> >
> > In Last, thanks for all constructors of proj4 and BRAVO for the work
> > accomplished.
>
> Folks,
>
> I haven't heard any statement that the proposed change was harmful, did
> I miss anything?
>
> If not, then I think the change is worth applying on the basis that it
> makes the results right even if some compilers are applying questionable
> optimizations.
>
> Best regards,

My only comment here is that we may be catering to a compiler error and 
perhaps it may be more important to suggest to Borland that *they* should 
look into the problem.

What bothers me is that the original code seems to be working fine on most 
other systems and only one failure has occurred. ---so far.

If there is a rounding modema problem there should be some expectation of 
a "normal" setting.

-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist


From gerald.evenden at verizon.mail  Thu Nov  9 10:47:07 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Thu, 09 Nov 2006 13:47:07 -0500
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <17746.52548.650207.757582@cerise.gclements.plus.com>
References: <eicoku$7es$1@sea.gmane.org> <eit388$1i8$1@sea.gmane.org>
	<17746.52548.650207.757582@cerise.gclements.plus.com>
Message-ID: <200611091347.07706.gerald.evenden@verizon.mail>

On Thursday 09 November 2006 1:40 am, Glynn Clements wrote:
> cp wrote:
> > The numbers have effectively right and exact representations in ten-bytes
> > format, but the compiler instead of making r/60 makes r * 1/60 so it
> > changes a little thing. I precise that this is done without any
> > optimization (force no optimization) and with option "don't correct FDIV
> > flaw" (for old processors) and "no quick floating points".
>
> In that case, the Borland compiler is entirely useless for any code
> which makes non-trivial use of floating-point arithmetic.
>
> Even if this particular issue can be worked around, you are likely to
> encounter similar issues time and time again.
>
> Any compiler written by someone who doesn't understand that x/y and
> x*(1/y) aren't equivalent simply isn't worth the disk space it
> occupies.

That argument does not hold too well.  I altered the origin problem as 
follows;

#include <math.h>
#include <stdio.h>
static int res1,res2;
int main()
{
        double r=240.0;
//      double tmp = 1./60.;
        double tmp = 0.016666666666666666666666666666666666666;
//      res1 = r / 60.;
        res1 = r * tmp;
        res2 = floor(r / 60.);
        printf("%s\n",(res1==res2) ? "OK!" : "NOT OK!");
        printf("res1: %d   res2: %d\n", res1, res2);
//      getch();
}

Both cases (1/60., 0.01666--) run as:

./a.out
OK!
res1: 4   res2: 4

using a temporary value for "1/60." a la Borland and in both cases the 
procedure ran "OK."

I am still suspicious of the setting of the FPU's rounding flag.

This does raise in my mind: what should the default state of the rounding flag 
be?

-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist


From glynn at gclements.plus.com  Thu Nov  9 13:44:54 2006
From: glynn at gclements.plus.com (Glynn Clements)
Date: Thu, 9 Nov 2006 21:44:54 +0000
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <200611091347.07706.gerald.evenden@verizon.mail>
References: <eicoku$7es$1@sea.gmane.org> <eit388$1i8$1@sea.gmane.org>
	<17746.52548.650207.757582@cerise.gclements.plus.com>
	<200611091347.07706.gerald.evenden@verizon.mail>
Message-ID: <17747.41302.953775.156969@cerise.gclements.plus.com>


Gerald I. Evenden wrote:

> > > The numbers have effectively right and exact representations in ten-bytes
> > > format, but the compiler instead of making r/60 makes r * 1/60 so it
> > > changes a little thing. I precise that this is done without any
> > > optimization (force no optimization) and with option "don't correct FDIV
> > > flaw" (for old processors) and "no quick floating points".
> >
> > In that case, the Borland compiler is entirely useless for any code
> > which makes non-trivial use of floating-point arithmetic.
> >
> > Even if this particular issue can be worked around, you are likely to
> > encounter similar issues time and time again.
> >
> > Any compiler written by someone who doesn't understand that x/y and
> > x*(1/y) aren't equivalent simply isn't worth the disk space it
> > occupies.
> 
> That argument does not hold too well.

No? Why?

> I altered the origin problem as 
> follows;
> 
> #include <math.h>
> #include <stdio.h>
> static int res1,res2;
> int main()
> {
>         double r=240.0;
> //      double tmp = 1./60.;
>         double tmp = 0.016666666666666666666666666666666666666;
> //      res1 = r / 60.;
>         res1 = r * tmp;
>         res2 = floor(r / 60.);
>         printf("%s\n",(res1==res2) ? "OK!" : "NOT OK!");
>         printf("res1: %d   res2: %d\n", res1, res2);
> //      getch();
> }
> 
> Both cases (1/60., 0.01666--) run as:
> 
> ./a.out
> OK!
> res1: 4   res2: 4
> 
> using a temporary value for "1/60." a la Borland and in both cases the 
> procedure ran "OK."

The issue isn't that x/y and x*(1/y) definitely won't be equal, it's
that they aren't *necessarily* equal in all cases (there are cases
where they *are* guaranteed to be equal, i.e. if 1/y is exactly
representable).

> I am still suspicious of the setting of the FPU's rounding flag.
> 
> This does raise in my mind: what should the default state of the rounding flag 
> be?

Appendix F of the C99 standard requires round-to-nearest during
translation (F.7.2) and at program startup (F.7.3). However, the
standard doesn't require an implementation to conform to appendix F
unless it indicates conformance by defining the macro
__STDC_IEC_559__.

In any case, 240.0/60.0 should be exactly equal to 4.0 regardless of
the rounding mode; anything else is a bug. The rounding mode is only
relevant if a result cannot be represented exactly.

Contrary to widespread belief, the FPU doesn't get the least
significant bits of a result from /dev/random ;)

-- 
Glynn Clements <glynn at gclements.plus.com>


From gerald.evenden at verizon.mail  Thu Nov  9 14:58:12 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Thu, 09 Nov 2006 17:58:12 -0500
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <17747.41302.953775.156969@cerise.gclements.plus.com>
References: <eicoku$7es$1@sea.gmane.org>
	<200611091347.07706.gerald.evenden@verizon.mail>
	<17747.41302.953775.156969@cerise.gclements.plus.com>
Message-ID: <200611091758.12716.gerald.evenden@verizon.mail>

On Thursday 09 November 2006 4:44 pm, Glynn Clements wrote:
	...
> > I am still suspicious of the setting of the FPU's rounding flag.
> >
> > This does raise in my mind: what should the default state of the rounding
> > flag be?
>
> Appendix F of the C99 standard requires round-to-nearest during
> translation (F.7.2) and at program startup (F.7.3). However, the
> standard doesn't require an implementation to conform to appendix F
> unless it indicates conformance by defining the macro
> __STDC_IEC_559__.

I gave up getting the standards years ago as they were getting to damn 
expensive so I rely on Harbison & Steele, v.5.  But I am glad to see that 
there is a (tentative) default setting.

> In any case, 240.0/60.0 should be exactly equal to 4.0 regardless of
> the rounding mode; anything else is a bug. The rounding mode is only
> relevant if a result cannot be represented exactly.

All this would be irrelevant if we all got 64 bit machines and could do this 
in integer arithmetic.
 
> Contrary to widespread belief, the FPU doesn't get the least
> significant bits of a result from /dev/random ;)

Oh?  Damn!  I learn something every day.  :-)

I really did learn something: I didn't know there was a /dev/random
-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist


From EMiller at dfg.ca.gov  Thu Nov  9 17:00:15 2006
From: EMiller at dfg.ca.gov (Eric Miller)
Date: Thu, 09 Nov 2006 17:00:15 -0800
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <200611091758.12716.gerald.evenden@verizon.mail>
References: <eicoku$7es$1@sea.gmane.org>
	<200611091347.07706.gerald.evenden@verizon.mail>
	<17747.41302.953775.156969@cerise.gclements.plus.com>
	<200611091758.12716.gerald.evenden@verizon.mail>
Message-ID: <45535EC8.95FD.00E4.0@dfg.ca.gov>

>>> On 11/9/2006 at 2:58 PM "Gerald I. Evenden"  wrote:
> On Thursday 09 November 2006 4:44 pm, Glynn Clements wrote:
> 	...
>> > I am still suspicious of the setting of the FPU's rounding flag.
>> >
>> > This does raise in my mind: what should the default state of the
rounding
>> > flag be?
>>
>> Appendix F of the C99 standard requires round-to-nearest during
>> translation (F.7.2) and at program startup (F.7.3). However, the
>> standard doesn't require an implementation to conform to appendix F
>> unless it indicates conformance by defining the macro
>> __STDC_IEC_559__.
> 
> I gave up getting the standards years ago as they were getting to
damn 
> expensive so I rely on Harbison & Steele, v.5.  But I am glad to see
that 
> there is a (tentative) default setting.

Copies of the last drafts of C99 are available at
http://www.open-std.org/jtc1/sc22/wg14/www/standards.  ANSI only
wants $289 for ISO/IEC 9899:1999.  What a bargain!  But, hey, the
Technical Corrigendums are free!

In any case, Microsoft, for one, has no intention of implementing C99. 
Apparently their "customers" aren't asking for it.  At least, that's the
company line.  They don't encourage people to use C anymore anyway.  I
guess if you want to use C99 features you'll just have to use a
different compiler and C runtime library.

-- 

Eric G. Miller
Staff Programmer
Department of Fish and Game


From jbinpg at shaw.ca  Thu Nov  9 22:31:42 2006
From: jbinpg at shaw.ca (Jack Bowling)
Date: Thu, 09 Nov 2006 22:31:42 -0800
Subject: [Proj] Re: Proj4 Bug  (rtodms)
In-Reply-To: <4552232A.8060605@noaa.gov>
References: <eicoku$7es$1@sea.gmane.org>
	<200611051448.17043.gerald.evenden@verizon.mail>
	<eis81q$mgn$1@sea.gmane.org>
	<200611081246.22512.gerald.evenden@verizon.mail>
	<4552232A.8060605@noaa.gov>
Message-ID: <20061110063142.GA3160@shaw.ca>

On Wed, Nov 08, 2006 at 10:34:18AM -0800, Christopher Barker wrote:
> Gerald I. Evenden wrote:
> 
> >It would be interesting if others with different systems would run the 
> >above test and let us know their results.
> 
> I get OK too:
> 
> OS-X 10.4, 64 bit dual PPC
> 
> gcc --version
> powerpc-apple-darwin8-gcc-4.0.1 (GCC) 4.0.1 (Apple Computer, Inc. build 
> 5247)

Another success story here:

Ubuntu 6.10 (Edgy), 32 bit Pentium III Coppermine
$ gcc --version
gcc (GCC) 4.1.2 20060928 (prerelease) (Ubuntu 4.1.1-13ubuntu5)


Jack Bowling
Prince George, BC


From gerald.evenden at verizon.mail  Fri Nov 10 08:50:07 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Fri, 10 Nov 2006 11:50:07 -0500
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <45535EC8.95FD.00E4.0@dfg.ca.gov>
References: <eicoku$7es$1@sea.gmane.org>
	<200611091758.12716.gerald.evenden@verizon.mail>
	<45535EC8.95FD.00E4.0@dfg.ca.gov>
Message-ID: <200611101150.07261.gerald.evenden@verizon.mail>

My conclusion, based upon all the material this thread has generated, is that 
either Borland has messed with the rounding mode of the FPU or the machine 
used on the original error has a flawed chip.  Even when the problem is 
rewritten to emulate the Borland optimization, the "OK" solution is the 
result.

I would suggest that the originator of this problem submit a bug report to 
Borland in an effort to extract their take on the problem.  Please add a 
summary of the results of this email thread.

I do not think there is sufficient evidence to justify modifying the original 
source code.  Perhaps a distribution note could be made to warn users of the 
Borland compiler of the problem.

Or perhaps a compile flag testing for Borland compiler which issues a 
self-destruct message.

-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist


From glynn at gclements.plus.com  Fri Nov 10 11:05:13 2006
From: glynn at gclements.plus.com (Glynn Clements)
Date: Fri, 10 Nov 2006 19:05:13 +0000
Subject: [Proj] Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <200611091347.07706.gerald.evenden@verizon.mail>
References: <eicoku$7es$1@sea.gmane.org> <eit388$1i8$1@sea.gmane.org>
	<17746.52548.650207.757582@cerise.gclements.plus.com>
	<200611091347.07706.gerald.evenden@verizon.mail>
Message-ID: <17748.52585.67187.399184@cerise.gclements.plus.com>


Gerald I. Evenden wrote:

> > > The numbers have effectively right and exact representations in ten-bytes
> > > format, but the compiler instead of making r/60 makes r * 1/60 so it
> > > changes a little thing. I precise that this is done without any
> > > optimization (force no optimization) and with option "don't correct FDIV
> > > flaw" (for old processors) and "no quick floating points".
> >
> > In that case, the Borland compiler is entirely useless for any code
> > which makes non-trivial use of floating-point arithmetic.
> >
> > Even if this particular issue can be worked around, you are likely to
> > encounter similar issues time and time again.
> >
> > Any compiler written by someone who doesn't understand that x/y and
> > x*(1/y) aren't equivalent simply isn't worth the disk space it
> > occupies.
> 
> That argument does not hold too well.  I altered the origin problem as 
> follows;
> 
> #include <math.h>
> #include <stdio.h>
> static int res1,res2;
> int main()
> {
>         double r=240.0;
> //      double tmp = 1./60.;
>         double tmp = 0.016666666666666666666666666666666666666;
> //      res1 = r / 60.;
>         res1 = r * tmp;
>         res2 = floor(r / 60.);
>         printf("%s\n",(res1==res2) ? "OK!" : "NOT OK!");
>         printf("res1: %d   res2: %d\n", res1, res2);
> //      getch();
> }
> 
> Both cases (1/60., 0.01666--) run as:
> 
> ./a.out
> OK!
> res1: 4   res2: 4
> 
> using a temporary value for "1/60." a la Borland and in both cases the 
> procedure ran "OK."

FWIW, when I try this with:

	gcc (GCC) 3.3.6 (Gentoo 3.3.6, ssp-3.3.6-1.0, pie-8.7.8)

on a Pentium 4, I get "OK" if I compile with optimisation (-O1 or
higher), and "NOT OK" if I compile either without optimisation, or
with both optimisation and -ffloat-store. I get the same result
regardless of whether tmp is initialised with 1./60. or 0.01666...

Also, if I use "long double" throughout (including adding a trailing L
to the FP literals), I get "OK" regardless of the optimisation
settings.

None of which is surprising when you consider the value of 1/60 at
various precisions:

	precision	bits	value

	single		32	0.0166666675359010696411133
	double		64	0.0166666666666666664353702
	extended	80	0.0166666666666666666674572

At double precision (64 bits), the rounded value is less than 1/60,
while at extended precision (80 bits) it's greater than 1/60. The
result of r*tmp would be similarly be less than or greater than 4.0. 

As both the integer cast and floor round positive numbers downwards,
using double precision would result in a value slightly less than 4.0
being rounded down to 3, while extended precision would result in a
value slightly greater than 4.0 being rounded down to 4.

The x86 FPU has 80-bit registers, but "double" values will be reduced
to 64 bits when stored in memory. Optimisation makes it more likely
that intermediate results will be kept in registers (and thus not
truncated), while -ffloat-store causes all FP values to be stored into
memory then read from there, forcibly discarding any excess precision
which the FPU may provide:

`-ffloat-store'
     Do not store floating point variables in registers, and inhibit
     other options that might change whether a floating point value is
     taken from a register or memory.

     This option prevents undesirable excess precision on machines such
     as the 68000 where the floating registers (of the 68881) keep more
     precision than a `double' is supposed to have.  Similarly for the
     x86 architecture.  For most programs, the excess precision does
     only good, but a few programs rely on the precise definition of
     IEEE floating point.  Use `-ffloat-store' for such programs, after
     modifying them to store all pertinent intermediate computations
     into variables.

Of course, none of this is relevant to computing 240.0/60.0, which
isn't affected by optimisations[1] or rounding modes.

[1] Except for -funsafe-math-optimizations (also used by -ffast-math),
which specifically enables this kind of approximation. It is never
turned on by any -O setting:

`-funsafe-math-optimizations'
     Allow optimizations for floating-point arithmetic that (a) assume
     that arguments and results are valid and (b) may violate IEEE or
     ANSI standards.  When used at link-time, it may include libraries
     or startup files that change the default FPU control word or other
     similar optimizations.

     This option should never be turned on by any `-O' option since it
     can result in incorrect output for programs which depend on an
     exact implementation of IEEE or ISO rules/specifications for math
     functions.

     The default is `-fno-unsafe-math-optimizations'.

`-ffast-math'
     Sets `-fno-math-errno', `-funsafe-math-optimizations',
     `-fno-trapping-math', `-ffinite-math-only' and
     `-fno-signaling-nans'.

     This option causes the preprocessor macro `__FAST_MATH__' to be
     defined.

     This option should never be turned on by any `-O' option since it
     can result in incorrect output for programs which depend on an
     exact implementation of IEEE or ISO rules/specifications for math
     functions.

-- 
Glynn Clements <glynn at gclements.plus.com>


From ch.panel at free.fr  Fri Nov 10 12:51:00 2006
From: ch.panel at free.fr (cp)
Date: Fri, 10 Nov 2006 21:51:00 +0100
Subject: [Proj] Re: Re: Re: Proj4 Bug  (rtodms)
References: <eicoku$7es$1@sea.gmane.org><200611091758.12716.gerald.evenden@verizon.mail><45535EC8.95FD.00E4.0@dfg.ca.gov>
	<200611101150.07261.gerald.evenden@verizon.mail>
Message-ID: <ej2opt$u38$1@sea.gmane.org>


"Gerald I. Evenden" <gerald.evenden at verizon.mail> a �crit dans le message de 
news: 200611101150.07261.gerald.evenden at verizon.mail...
> My conclusion, based upon all the material this thread has generated, is 
> that
> either Borland has messed with the rounding mode of the FPU or the machine
> used on the original error has a flawed chip.  Even when the problem is
> rewritten to emulate the Borland optimization, the "OK" solution is the
> result.

No !  it's a bug on the compiler when the second operand is a number and so 
when optmization is made by this compiler (optimization that noone has tell 
to do).
the lines
res1 =  r/60.0
res1 =  r/60
res1 = r/60.0L
are generated the same code and a DOUBLE precision number is loaded which 
represent 1/60. I said DOUBLE and not LONG DOUBLE though a fld tbyte ptr is 
generated.
in the following lines

  static long double t1 = 1.0L;
  static long double t2=60.0L;
  static long double t3;
  static long double t4;
  double r=240.0;
  t3 = autre / autre2;
  t4 = autre / 60.0L;

this gives t3 different from t4 because in line t4, /60.0L is optimized and 
then replaced by 1/60 in double precisiion and loaded as long double 
precision.
so LSB -> MSB
t3= 89 88 88 88 88 88 88 88 F9 3F
t4= 00 88 88 88 88 88 88 88 F9 3F

this is how works borland compiler. strange!  isn't it ?

>
> I would suggest that the originator of this problem submit a bug report to
> Borland in an effort to extract their take on the problem.  Please add a
> summary of the results of this email thread.

no! thank you ! :o)

>
> I do not think there is sufficient evidence to justify modifying the 
> original
> source code.  Perhaps a distribution note could be made to warn users of 
> the
> Borland compiler of the problem.

of course not ! don't change anything !  I think only it should be kind that 
borland compiler's users are worned about this !

>
> Or perhaps a compile flag testing for Borland compiler which issues a
> self-destruct message.
>
> -- 
> The whole religious complexion of the modern world is due
> to the absence from Jerusalem of a lunatic asylum.
> -- Havelock Ellis (1859-1939)  British psychologist
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 





From ch.panel at free.fr  Fri Nov 10 13:01:42 2006
From: ch.panel at free.fr (cp)
Date: Fri, 10 Nov 2006 22:01:42 +0100
Subject: [Proj] Re: Re: Re: Proj4 Bug (rtodms) excuse me mistake in message
	corrected
References: <eicoku$7es$1@sea.gmane.org><200611091758.12716.gerald.evenden@verizon.mail><45535EC8.95FD.00E4.0@dfg.ca.gov>
	<200611101150.07261.gerald.evenden@verizon.mail>
Message-ID: <ej2pbq$a4$1@sea.gmane.org>

"Gerald I. Evenden" <gerald.evenden at verizon.mail> a �crit dans le message de
news: 200611101150.07261.gerald.evenden at verizon.mail...
> My conclusion, based upon all the material this thread has generated, is
> that
> either Borland has messed with the rounding mode of the FPU or the machine
> used on the original error has a flawed chip.  Even when the problem is
> rewritten to emulate the Borland optimization, the "OK" solution is the
> result.

No !  it's a bug on the compiler when the second operand is a number and so
when optmization is made by this compiler (optimization that noone has tell
to do).
the lines
res1 =  r/60.0
res1 =  r/60
res1 = r/60.0L
are generated the same code and a DOUBLE precision number is loaded which
represent 1/60. I said DOUBLE and not LONG DOUBLE though a fld tbyte ptr is
generated.
in the following lines

  static long double t1 = 1.0L;
  static long double t2=60.0L;
  static long double t3;
  static long double t4;
  double r=240.0;
  t3 = t1 / t2;
  t4 = t1 / 60.0L;

this gives t3 different from t4 because in line t4, /60.0L is optimized and
then replaced by 1/60 in double precisiion and loaded as long double
precision.
so LSB -> MSB
t3= 89 88 88 88 88 88 88 88 F9 3F
t4= 00 88 88 88 88 88 88 88 F9 3F

this is how works borland compiler. strange!  isn't it ?

>
> I would suggest that the originator of this problem submit a bug report to
> Borland in an effort to extract their take on the problem.  Please add a
> summary of the results of this email thread.

no! thank you ! :o)

>
> I do not think there is sufficient evidence to justify modifying the
> original
> source code.  Perhaps a distribution note could be made to warn users of
> the
> Borland compiler of the problem.

of course not ! don't change anything !  I think only it should be kind that
borland compiler's users are worned about this !

>
> Or perhaps a compile flag testing for Borland compiler which issues a
> self-destruct message.
>
> -- 
> The whole religious complexion of the modern world is due
> to the absence from Jerusalem of a lunatic asylum.
> -- Havelock Ellis (1859-1939)  British psychologist
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj





From ch.panel at free.fr  Fri Nov 10 13:50:35 2006
From: ch.panel at free.fr (cp)
Date: Fri, 10 Nov 2006 22:50:35 +0100
Subject: [Proj] Re: Re: Re: Proj4 Bug  (rtodms)
References: <eicoku$7es$1@sea.gmane.org>
	<eit388$1i8$1@sea.gmane.org><17746.52548.650207.757582@cerise.gclements.plus.com><200611091347.07706.gerald.evenden@verizon.mail>
	<17748.52585.67187.399184@cerise.gclements.plus.com>
Message-ID: <ej2s7f$9ev$1@sea.gmane.org>


"Glynn Clements" <glynn at gclements.plus.com> a �crit dans le message de news: 
17748.52585.67187.399184 at cerise.gclements.plus.com...
>
>
> FWIW, when I try this with:
>
> gcc (GCC) 3.3.6 (Gentoo 3.3.6, ssp-3.3.6-1.0, pie-8.7.8)
>
> on a Pentium 4, I get "OK" if I compile with optimisation (-O1 or
> higher), and "NOT OK" if I compile either without optimisation, or
> with both optimisation and -ffloat-store. I get the same result
> regardless of whether tmp is initialised with 1./60. or 0.01666...
>
> Also, if I use "long double" throughout (including adding a trailing L
> to the FP literals), I get "OK" regardless of the optimisation
> settings.
>
> None of which is surprising when you consider the value of 1/60 at
> various precisions:
>
> precision bits value
>
> single 32 0.0166666675359010696411133
> double 64 0.0166666666666666664353702
> extended 80 0.0166666666666666666674572
>
> At double precision (64 bits), the rounded value is less than 1/60,
> while at extended precision (80 bits) it's greater than 1/60. The
> result of r*tmp would be similarly be less than or greater than 4.0.
>
> As both the integer cast and floor round positive numbers downwards,
> using double precision would result in a value slightly less than 4.0
> being rounded down to 3, while extended precision would result in a
> value slightly greater than 4.0 being rounded down to 4.

Not exactly !  for the C runtime library, even if the result is less than 
4.0, the floor gives 4.0 if the difference is less than the smaller number 
in the precision, here if the difference is less than the double precision.
(I have look at asm code of floor)

>
> The x86 FPU has 80-bit registers, but "double" values will be reduced
> to 64 bits when stored in memory. Optimisation makes it more likely

they can be stored as long double (=> fst tbyte ptr...), so it's not an 
excuse for borland.

> that intermediate results will be kept in registers (and thus not
> truncated), while -ffloat-store causes all FP values to be stored into
> memory then read from there, forcibly discarding any excess precision
> which the FPU may provide:
>

This has give me an idea : I have tried to see the behaviour forcing fast 
floating point (perhaps the compiler gives a different value 1/60 in a stack 
register). Unfortunately not ! It doesn't use FPU stack register in this 
case, Borland compiler gives the same wrong value.

> `-ffloat-store'
>     Do not store floating point variables in registers, and inhibit
>     other options that might change whether a floating point value is
>     taken from a register or memory.
>
>     This option prevents undesirable excess precision on machines such
>     as the 68000 where the floating registers (of the 68881) keep more
>     precision than a `double' is supposed to have.  Similarly for the
>     x86 architecture.  For most programs, the excess precision does
>     only good, but a few programs rely on the precise definition of
>     IEEE floating point.  Use `-ffloat-store' for such programs, after
>     modifying them to store all pertinent intermediate computations
>     into variables.
>
> Of course, none of this is relevant to computing 240.0/60.0, which
> isn't affected by optimisations[1] or rounding modes.
>
> [1] Except for -funsafe-math-optimizations (also used by -ffast-math),
> which specifically enables this kind of approximation. It is never
> turned on by any -O setting:
>
> `-funsafe-math-optimizations'
>     Allow optimizations for floating-point arithmetic that (a) assume
>     that arguments and results are valid and (b) may violate IEEE or
>     ANSI standards.  When used at link-time, it may include libraries
>     or startup files that change the default FPU control word or other
>     similar optimizations.
>
>     This option should never be turned on by any `-O' option since it
>     can result in incorrect output for programs which depend on an
>     exact implementation of IEEE or ISO rules/specifications for math
>     functions.
>
>     The default is `-fno-unsafe-math-optimizations'.
>
> `-ffast-math'
>     Sets `-fno-math-errno', `-funsafe-math-optimizations',
>     `-fno-trapping-math', `-ffinite-math-only' and
>     `-fno-signaling-nans'.
>
>     This option causes the preprocessor macro `__FAST_MATH__' to be
>     defined.
>
>     This option should never be turned on by any `-O' option since it
>     can result in incorrect output for programs which depend on an
>     exact implementation of IEEE or ISO rules/specifications for math
>     functions.
>
> -- 
> Glynn Clements <glynn at gclements.plus.com>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 





From gerald.evenden at verizon.mail  Fri Nov 10 17:18:09 2006
From: gerald.evenden at verizon.mail (Gerald I. Evenden)
Date: Fri, 10 Nov 2006 20:18:09 -0500
Subject: [Proj] Re: Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <ej2s7f$9ev$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org>
	<17748.52585.67187.399184@cerise.gclements.plus.com>
	<ej2s7f$9ev$1@sea.gmane.org>
Message-ID: <200611102018.10009.gerald.evenden@verizon.mail>

I threw caution to the winds and did:

gcc -funsafe-math-optimizations -O3 sample2.c -lm

gcc -ffast-math -O3 sample2.c -lm

and I still cannot fail the test.  My compiler practices safe sex, er safe 
floating point regardless of what I tell it.  It must have a permanently 
attached condom.

-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist


From glynn at gclements.plus.com  Sat Nov 11 01:36:51 2006
From: glynn at gclements.plus.com (Glynn Clements)
Date: Sat, 11 Nov 2006 09:36:51 +0000
Subject: [Proj] Re: Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <ej2s7f$9ev$1@sea.gmane.org>
References: <eicoku$7es$1@sea.gmane.org> <eit388$1i8$1@sea.gmane.org>
	<17746.52548.650207.757582@cerise.gclements.plus.com>
	<200611091347.07706.gerald.evenden@verizon.mail>
	<17748.52585.67187.399184@cerise.gclements.plus.com>
	<ej2s7f$9ev$1@sea.gmane.org>
Message-ID: <17749.39347.765584.801451@cerise.gclements.plus.com>


cp wrote:

> > As both the integer cast and floor round positive numbers downwards,
> > using double precision would result in a value slightly less than 4.0
> > being rounded down to 3, while extended precision would result in a
> > value slightly greater than 4.0 being rounded down to 4.
> 
> Not exactly !  for the C runtime library, even if the result is less than 
> 4.0, the floor gives 4.0 if the difference is less than the smaller number 
> in the precision, here if the difference is less than the double precision.
> (I have look at asm code of floor)

floor() takes a "double" argument, so an extended-precision (80-bit)
value would first be converted to a double by the FPU, which will
normally be done using round-to-nearest. floor() itself will then
round the value downwards.

This step might be skipped if the system's calling convention passes
FP arguments in registers, or if floor() is an intrinsic or inline
function. However, for a normal function call with arguments passed on
the stack (the actual stack, not the FPU register stack), the value
stored on the stack will only be 64 bits wide, so it has to be
converted first.

-- 
Glynn Clements <glynn at gclements.plus.com>


From glynn at gclements.plus.com  Sat Nov 11 01:52:09 2006
From: glynn at gclements.plus.com (Glynn Clements)
Date: Sat, 11 Nov 2006 09:52:09 +0000
Subject: [Proj] Re: Re: Re: Proj4 Bug  (rtodms)
In-Reply-To: <200611102018.10009.gerald.evenden@verizon.mail>
References: <eicoku$7es$1@sea.gmane.org>
	<17748.52585.67187.399184@cerise.gclements.plus.com>
	<ej2s7f$9ev$1@sea.gmane.org>
	<200611102018.10009.gerald.evenden@verizon.mail>
Message-ID: <17749.40265.942692.475972@cerise.gclements.plus.com>


Gerald I. Evenden wrote:

> I threw caution to the winds and did:
> 
> gcc -funsafe-math-optimizations -O3 sample2.c -lm
> 
> gcc -ffast-math -O3 sample2.c -lm
> 
> and I still cannot fail the test.  My compiler practices safe sex, er safe 
> floating point regardless of what I tell it.  It must have a permanently 
> attached condom.

On the contrary, it's practicing *unsafe* floating point.

According to the IEEE FP and ANSI C standards, the test *should* fail,
as 240.0*(1.0/60.0) is less than 4.0 at double precision, and thus
rounding to an integer towards either negative infinity (for floor())
or zero (for an integer type cast) should give 3.

It is greater than 4.0 at extended precision, but you haven't asked
for that. The variables are all declared as "double" and FP literals
are interpreted as double unless declared otherwise (with a trailing
"f" for single precision or a trailing "L" for extended precision).

Also, -funsafe-math-optimizations probably won't have any effect here,
as the test program makes the unsafe optimisation itself. However, it
may cause (240.0/60.0) to also suffer from rounding error by
"optimising" (i.e. approximating) it to 240.0*(1.0/60.0).

While discussion of precision and rounding is all very interesting,
let's not forget that the real problem here is that the compiler is
converting division to multiplication by the reciprocal (an unsafe
optimisation) in the first place, not how the "optimised" form is
handled.

-- 
Glynn Clements <glynn at gclements.plus.com>


From epk.lists at gmail.com  Sat Nov 11 17:29:49 2006
From: epk.lists at gmail.com (Eduardo Patto Kanegae)
Date: Sat, 11 Nov 2006 23:29:49 -0200
Subject: [Proj] foss-GIS rpm's for Fedora 5
Message-ID: <2d1782780611111729y5e763fe4k70ba08147cb3bc7c@mail.gmail.com>

Hi folks,

At my downloads
sections<http://www.webmapit.com.br/index.php?option=com_content&task=blogsection&id=19&Itemid=108&lang=en>I
have published some RPM's for ShapeLib, PROJ, GEOS, PostGIS, GDAL,
GRASS
and MapServer.

Currently I only tested these pack under two different machines but both
running FC5.

Let me know if is there any license restrictions within any package.

-- 
Eduardo Patto Kanegae
http://www.webmapit.com.br
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061111/4381ec0c/attachment.html>

From paul-grass at stjohnspoint.co.uk  Mon Nov 13 04:04:03 2006
From: paul-grass at stjohnspoint.co.uk (Paul Kelly)
Date: Mon, 13 Nov 2006 13:04:03 +0100 (MEZ)
Subject: [Proj] OSTN02 in NTv2 format for OSGB36<-->ETRS89 datum conversions
Message-ID: <Pine.LNX.4.62.0611131241060.24964@agrippa.ukshells.co.uk>

Hello all
There was some interest in having the Ordnance Survey of Great Britain's 
"OSTN02" gridshift-based transformation from the OSGB36 to ETRS89 datums 
more widely available in a form that could be used with PROJ.4 (and thus 
also GRASS, GDAL etc).

I've managed to convert it using a combination of PROJ.4, GRASS, and Unix 
text processing tools. The process was so involved that I'm thinking of 
writing a short paper on it, but in the meantime I'll make the 
not-fully-tested or verified NTv2 files available for anyone who might 
want to use them. You can put either or both the files in your PROJ data 
directory, and use them in a co-ordinate system string like: 
+nadgrids=england-wales.gsb or +nadgrids=scotland.gsb,england-wales.gsb 
making sure there are no other +datum or +towgs84 parameters in the 
co-ordinate system specification. The +nadgrids line should be specified 
in the OSGB36 co-ordinate system, while the other one should have 
+towgs84=0,0,0.

Both the files have a resolution of 1 arc-minute of latitude and 40 
arc-seconds of longitude and are about 4 megabytes in size. This 
corresponds roughly to the 1 kilometre grid used in OSTN02, but I have a 
feeling it may be over the top and I'd like to do some tests to see if I 
can get a similar accuracy without the need for such a dense grid.

england-wales.gsb
Download from http://www.stjohnspoint.co.uk/gis/england-wales.gsb

Coverage:
N 56N
S 49d55'N
E 2E
W 6W

scotland.gsb
Download from http://www.stjohnspoint.co.uk/gis/scotland.gsb

Coverage:
N 61N
S 54d30'N
E  0d30'W
W  8W

All the latitiude/longitude values are referenced to the Airy ellipsoid.
http://www.stjohnspoint.co.uk/gis/total-coverage.png shows graphically the 
approximate coverage and overlap between the two files. The coastline data 
is from a very old dataset that used to be distributed with GRASS. I have 
no idea of the significance of the sharp change in latitude shift (i.e. the 
raster data plotted) beyond the coast. I expect the data beyond there is 
meaningless.

I can't give any guarantees as to the accuracy and usefulness of the 
files. In future, when I have it properly documented you can decide for 
yourself.

Best regards

Paul



From paul-grass at stjohnspoint.co.uk  Mon Nov 13 04:55:20 2006
From: paul-grass at stjohnspoint.co.uk (Paul Kelly)
Date: Mon, 13 Nov 2006 13:55:20 +0100 (MEZ)
Subject: [Proj] OSTN02 in NTv2 format for OSGB36<-->ETRS89 datum
	conversions
In-Reply-To: <Pine.LNX.4.62.0611131241060.24964@agrippa.ukshells.co.uk>
References: <Pine.LNX.4.62.0611131241060.24964@agrippa.ukshells.co.uk>
Message-ID: <Pine.LNX.4.62.0611131350290.24964@agrippa.ukshells.co.uk>

On Mon, 13 Nov 2006, Paul Kelly wrote:

> Both the files have a resolution of 1 arc-minute of latitude and 40 
> arc-seconds of longitude and are about 4 megabytes in size. This corresponds 
> roughly to the 1 kilometre grid used in OSTN02, but I have a feeling it may

Oops - that should have been 40 seconds of latitude and 60 seconds of 
longitude. Have put updated versions of the two files in place now. I 
don't expect it to make a huge difference though, perhaps some fractions 
of a centimetre depending on the exact location of the test point.


From mateusz at loskot.net  Fri Nov 17 07:37:16 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 17 Nov 2006 16:37:16 +0100
Subject: [Proj] New version of PROJ.4 for Windows CE
Message-ID: <455DD72C.1060608@loskot.net>

Hi,

After latest comments to my PROJ.4 port for Windows CE platform
I cleaned it and here it is in new shape:

1. Changed files:

src/emess.c
src/gen_cheb.c
src/nad_cvt.c
src/nad_init.c
src/pj_apply_gridshift.c
src/pj_factors.c
src/pj_fwd.c
src/pj_gridinfo.c
src/pj_gridlist.c
src/pj_init.c
src/pj_inv.c
src/pj_malloc.c
src/pj_open_lib.c
src/pj_strerrno.c
src/pj_transform.c
src/projects.h

Here is patch all with changes:
http://mateusz.loskot.net/tmp/proj-wince-mloskot-20061116.patch

2. External dependencies

There is only one external dependency for Windows CE port.
Unfortunately, on Windows CE platform there are many C library and POSIX
functions missing, so all ports of libraries like GDAL, libtiff,
libgeotiff, and other libs I'm porting, need to use my WCELIBCEX
library - an extension to C library for Windows CE platform.

http://sourceforge.net/projects/wcelibcex/

Certainly, the WCELIBCEX is not needed to be included in PROJ.4 sources
tree, because users can download its sources and Static Library project
file from the website.

5. Visual C++ 2005 project files

Unfortunately, since VC++ 2005, building software with nmake for
Windows CE is a big problem, so it seems to be required to provide users
with project files.
If PROJ.4 project would accept Windows CE port to the CVS repository,
I'd also like to include 2 project files: projce_dll and
projce_lib to build DLL and static library.
These project files could be put into a dedicated directory,
for instance:

proj/wince/msvc80
proj/wince/msvc80/projce_dll
proj/wince/msvc80/projce_lib


I'm looking forward your comments.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net


From neteler at itc.it  Fri Nov 17 08:32:11 2006
From: neteler at itc.it (Markus Neteler)
Date: Fri, 17 Nov 2006 17:32:11 +0100
Subject: [Proj] State-wide projection for Italy?
Message-ID: <20061117163210.GA575@bartok.itc.it>

Hi,

in Italy the Gauss-Boaga system is commonly used besides UTM.
Both systems aren't appropriate for state-wide mapping of
Italy since both of them are splitting the country into
two zones.
Seeking around, I could not identify a recommended projection
to be used for all-Italy maps.

I would be grateful to receive suggestion(s).

Kind regards
Markus Neteler


From warmerdam at pobox.com  Fri Nov 17 12:46:22 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri, 17 Nov 2006 15:46:22 -0500
Subject: [Proj] New version of PROJ.4 for Windows CE
In-Reply-To: <455DD72C.1060608@loskot.net>
References: <455DD72C.1060608@loskot.net>
Message-ID: <455E1F9E.6020708@pobox.com>

Mateusz Loskot wrote:
> Hi,
> 
> After latest comments to my PROJ.4 port for Windows CE platform
> I cleaned it and here it is in new shape:
> 
> 1. Changed files:
...
> Here is patch all with changes:
> http://mateusz.loskot.net/tmp/proj-wince-mloskot-20061116.patch

Mateusz,

I would prefer to move #include <errno.h> (or the WCE alternative) into
projects.h to avoid having to have this issue in so many places.  Likewise
the assert.h stuff.

What does "fprintf(stderr,...)" do on windows CE?  If this compiles but
does nothing useful, perhaps we could just "#define getenv(x) NULL"
in projects.h for wince to reduce the number of places we have ifdefs.

Otherwise your plans look fine to me.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From cjmce at lsu.edu  Fri Nov 17 09:03:29 2006
From: cjmce at lsu.edu (Clifford J Mugnier)
Date: Fri, 17 Nov 2006 11:03:29 -0600
Subject: [Proj] State-wide projection for Italy?
Message-ID: <OF40199813.7C709DA7-ON86257229.005DB3F6-86257229.005DB412@lsu.edu>





Markus,

I suggest you consider an oblique Mercator, preferably the Hotine Rectified
Skew Orthomorphic (RSO).

Cliff Mugnier
LSU

----------------------------

Hi,

in Italy the Gauss-Boaga system is commonly used besides UTM.
Both systems aren't appropriate for state-wide mapping of
Italy since both of them are splitting the country into
two zones.
Seeking around, I could not identify a recommended projection
to be used for all-Italy maps.

I would be grateful to receive suggestion(s).

Kind regards
Markus Neteler
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj



From mateusz at loskot.net  Fri Nov 17 13:42:27 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 17 Nov 2006 22:42:27 +0100
Subject: [Proj] New version of PROJ.4 for Windows CE
In-Reply-To: <455E1F9E.6020708@pobox.com>
References: <455DD72C.1060608@loskot.net> <455E1F9E.6020708@pobox.com>
Message-ID: <455E2CC3.30501@loskot.net>

Frank Warmerdam wrote:
> Mateusz Loskot wrote:
>> Hi,
>>
>> After latest comments to my PROJ.4 port for Windows CE platform
>> I cleaned it and here it is in new shape:
>>
>> 1. Changed files:
> ...
>> Here is patch all with changes:
>> http://mateusz.loskot.net/tmp/proj-wince-mloskot-20061116.patch
> 
> Mateusz,
> 
> I would prefer to move #include <errno.h> (or the WCE alternative) into
> projects.h to avoid having to have this issue in so many places. 

Frank,

You're right.
I created proxy-file called errno.h which directly includes my extension
wce_errno.h. So, now, there is no need to use any #ifdef's and the code
is cleaner.

> Likewise the assert.h stuff.

Unfortunately, it's not possible to do it in a clean way.
assert.h is present in Windows CE SDK and it pulls whole Windows API.
Next, Windows API defines symbol called LP which also is used by PROJ.4.
So if WinCE's assert.h is included, names conflict occurs.
That's why I added dummy assert() macro that compiles regardless
_DEBUG/NDEBUG macros definition.

> What does "fprintf(stderr,...)" do on windows CE?  If this compiles but
> does nothing useful, perhaps we could just "#define getenv(x) NULL"
> in projects.h for wince to reduce the number of places we have ifdefs.

fprintf(stderr, ...) compiles for Windows CE, so there is no
need to hack it.
Regarding getenv, on Windows CE, there is no such a term like
environment variable, so there is no API to get/set env variables -
nothing to wrap or port.
For clean workaround, I added dummy version of getenv() called
wceex_getenv() which always returns NULL.
Next, projects.h header maps wceex_getenv() to getenv name.
This way, I've managed to remove all #ifdef's around fprintf/getenv
functions.


Finally, after this cleaning explained above the changeset for
Windows CE port is much smaller than the initial one :-)

Only following files are changed:

src/nad_init.c
src/pj_gridinfo.c
src/pj_gridlist.c
src/pj_open_lib.c
src/projects.h

and here is the patch - also pretty smals:

http://mateusz.loskot.net/tmp/proj-wince-mloskot-20061117.patch

As we've discussed on the IRC, I'll commit the Windows CE port based
on the new and cleaner changeset. Thanks!

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net


From Kristian.Thy at atkinsglobal.com  Fri Nov 17 16:17:16 2006
From: Kristian.Thy at atkinsglobal.com (Thy, Kristian)
Date: Sat, 18 Nov 2006 01:17:16 +0100
Subject: [Proj] Custom projection wildly inaccurate
Message-ID: <CE2BE61DABB9384A934BD4E648DFDA3792D280@EXCVS1.rdg.bane.dk>

Hi list,
 
(Apologies for sending HTML email - I'm stuck on OWA ...)
 
I'm trying to reproject data in an obsolete Danish orthogonal projection called System34 in MapServer. To this end, I've found a .prj file for ArcMap distributed by the Danish National Survey & Cadastre, which defines the following parameters:
 
PROJCS["Approximation of non-projective System 34 Sjælland",
   GEOGCS["GCS_WGS_1984",
      DATUM["D_WGS_1984", SPHEROID["WGS_1984",6378137.0,298.257223563]],
      PRIMEM["Greenwich",0.0],
      UNIT["Degree",0.0174532925199433]
   ],
   PROJECTION["Orthographic"],
   PARAMETER["False_Easting",-100000.0],
   PARAMETER["False_Northing",100000.0],
   PARAMETER["Longitude_Of_Center",12.105661],
   PARAMETER["Latitude_Of_Center",55.29235],
   UNIT["Meter",1.0]
]
 
To get MapServer to reproject my data, I added the following code to ms4w\proj\nad\epsg:
 
<34005> +proj=ortho +lat_0=55.29235 +lon_0=12.105661 +x_0=-100000.0 +y_0=100000.0
 
Problem is that this transposes the data many kilometres north and slightly west (and perhaps also distorts it slightly, I'm not sure). The effect can be seen in these three maps:
 
http://quovadis.dk/img/proj/ 
 
All three maps are drawn in EPSG:32632. The green line data is natively EPSG:32632. The blue points are fetched from a WMS service in EPSG:4326, EPSG:32632 and my custom transformation respectively. The difference between lat/lon and UTM is noticeable but acceptable, but my own projection is way off. I have confirmed the distortion with different data sources in System 34 - this WMS and an orthophoto from another source - so I'm certain the error is on my end. Can anybody tell me which rookie mistake I've commited? ;-)
 
 
 
best regards,
Kristian Thy


This email and any attached files are confidential and copyright protected. If you are not the addressee, any dissemination of this communication is strictly prohibited. Unless otherwise expressly agreed in writing, nothing stated in this communication shall be legally binding.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061118/f2ab1ba0/attachment.html>

From ovv at hetnet.nl  Sat Nov 18 08:18:07 2006
From: ovv at hetnet.nl (Oscar van Vlijmen)
Date: Sat, 18 Nov 2006 17:18:07 +0100
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <CE2BE61DABB9384A934BD4E648DFDA3792D280@EXCVS1.rdg.bane.dk>
Message-ID: <C184F0CE.8B0D%ovv@hetnet.nl>

> From: "Thy, Kristian"
> Date: Sat, 18 Nov 2006 01:17:16 +0100
> Subject: [Proj] Custom projection wildly inaccurate

 > I'm trying to reproject data in an obsolete Danish orthogonal projection
> called System34 in MapServer. To this end, I've found a .prj file for ArcMap
> distributed by the Danish National Survey & Cadastre, which defines the
> following parameters:
....
 
> Problem is that this transposes the data many kilometres north and slightly
> west (and perhaps also distorts it slightly, I'm not sure). The effect can be
> seen in these three maps:
...

Another problem is that System 34 is not coupled to any projection. I have
heard of a transverse mercator approximation, but an orthographic?
The Danish use a 11th (13th?) degree polynomial to convert System 34
coordinates to UTM. I haven't seen this polynomial roaming on the internet,
so I cannot comment on the accuracy of approximations.
There are 3 zones in System 34 and the coordinate system is west-oriented.

Kort & Matrikelstyrelsen - Mere om System 34
<http://www.kms.dk/Referencenetogopmaaling/Referencesystemer/System_34/mere_
om_system34.htm>
On-line transformations:
<http://valdemar.kms.dk/trf/>



From ch.panel at free.fr  Sat Nov 18 08:40:40 2006
From: ch.panel at free.fr (cp)
Date: Sat, 18 Nov 2006 17:40:40 +0100
Subject: [Proj] grid tool
Message-ID: <ejnd2c$bcr$1@sea.gmane.org>

Does it exists a tool that makes a conversion from a binary NTv1, NTv2 or 
CTABLE format to an ascii format ?
If not, does it exists some documentation about these formats ?

thanks! 





From paul-grass at stjohnspoint.co.uk  Sat Nov 18 08:55:49 2006
From: paul-grass at stjohnspoint.co.uk (Paul Kelly)
Date: Sat, 18 Nov 2006 16:55:49 +0000 (GMT)
Subject: [Proj] grid tool
In-Reply-To: <ejnd2c$bcr$1@sea.gmane.org>
References: <ejnd2c$bcr$1@sea.gmane.org>
Message-ID: <Pine.LNX.4.62.0611181653570.8067@agrippa.ukshells.co.uk>

On Sat, 18 Nov 2006, cp wrote:

> Does it exists a tool that makes a conversion from a binary NTv1, NTv2 or
> CTABLE format to an ascii format ?

I have used GDAit for this (NTv2 <--> ASCII) successfully several times:
http://www.sli.unimelb.edu.au/gda94/

> If not, does it exists some documentation about these formats ?

See appendices to the GDAit Users Manual at the above site, also some of 
my notes on getting it working with PROJ.4 here:
http://www.stjohnspoint.co.uk/gis/france.htm

Good luck,

Paul


From ch.panel at free.fr  Sun Nov 19 02:21:19 2006
From: ch.panel at free.fr (cp)
Date: Sun, 19 Nov 2006 11:21:19 +0100
Subject: [Proj] Re: grid tool
References: <ejnd2c$bcr$1@sea.gmane.org>
Message-ID: <ejpb7b$os9$1@sea.gmane.org>

I found nowhere the NTv2 documentation, all links to canadian site seem to 
be broken, and only the NTv2 software can be loaded on www.geod.nrcan.gc.ca. 
Another solution ? 





From ch.panel at free.fr  Sun Nov 19 02:40:13 2006
From: ch.panel at free.fr (cp)
Date: Sun, 19 Nov 2006 11:40:13 +0100
Subject: [Proj] Re: grid tool
References: <ejnd2c$bcr$1@sea.gmane.org>
Message-ID: <ejpcai$rjv$1@sea.gmane.org>

new sources of proj4 don't translate any format (NTv1, NTv2...), and all 
grids that I saw are in NTv2 formats (gsb).
"old" sources of proj4 (4.4.6) that I use seems to be able to translate NTv1 
format but not NTv2.
Is there something I had not kept ? 





From Kristian.Thy at atkinsglobal.com  Mon Nov 20 01:13:00 2006
From: Kristian.Thy at atkinsglobal.com (Thy, Kristian)
Date: Mon, 20 Nov 2006 10:13:00 +0100
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <C184F0CE.8B0D%ovv@hetnet.nl>
Message-ID: <CE2BE61DABB9384A934BD4E648DFDA37AD4339@EXCVS1.rdg.bane.dk>

From: Oscar van Vlijmen
> Another problem is that System 34 is not coupled to any 
> projection. I have heard of a transverse mercator approximation,
> but an orthographic?

Now that you mention it, this seems extremely strange. But I just went
with what was in the official .prj files. You wouldn't happen to have
any information about the transverse mercator approximation?

> The Danish use a 11th (13th?) degree polynomial to convert System 34
> coordinates to UTM. I haven't seen this polynomial roaming on 
> the internet, so I cannot comment on the accuracy of approximations.

I had them in my notes from a geodesy course in uni, but they have 
unfortunately been mislaid. At any rate, I am not sure of the copyright
implications of publishing these polynomials from the tech note I got
them in.

However, using the coordinate transformer thingy on valdemar.kms.dk,
I get the following results for the top left corner of a TIFF orthophoto
I have:

System 34 Sjælland (Zealand): (-86714.42, 162554.98)
Transformed to lon/lat (WGS84): (12d20'42.97906"E, 55d52'40.50251"N)

(The negative X is due to the system being west-oriented, but for ease
of use a "normal" east-oriented X-axis is used with all X coords then
being negative. These coordinates are confirmed using KMS's KMSTrans
program, a desktop application for conversion of coordinates.)

Using cs2cs with the orthographic projection inferred from the .prj file:

C:\>cs2cs -E +proj=ortho +lat_0=55.29235 +lon_0=12.105661 +x_0=-100000.0 +y_0=100000.0 +to +proj=latlong +datum=WGS84 cs.txt
-86714.420 162554.980   12d19'5.829"E   56d1'56.147"N 14670.382

Clearly, that projection doesn't fit the bill. But when I pull the same
TIFF into ArcMap and examine the spatial reference for it, this is what
I see:

http://quovadis.dk/img/proj/srs.jpg

The orthophoto at bottom right is the original in System 34, and also the
one for which the SRS is shown in the dialog. At top right you see the
same orthophoto reprojected using GDAL with what I thought were the
parameters shown in the .prj file.

Any help in unravelling this mystery is much appreciated. I suspect that
the problem lies in my interpretation of the ArcMap .prj file.

best regards,
Kristian Thy


This email and any attached files are confidential and copyright protected. If you are not the addressee, any dissemination of this communication is strictly prohibited. Unless otherwise expressly agreed in writing, nothing stated in this communication shall be legally binding.



From Kristian.Thy at atkinsglobal.com  Mon Nov 20 02:09:02 2006
From: Kristian.Thy at atkinsglobal.com (Thy, Kristian)
Date: Mon, 20 Nov 2006 11:09:02 +0100
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <CE2BE61DABB9384A934BD4E648DFDA37AD4339@EXCVS1.rdg.bane.dk>
Message-ID: <CE2BE61DABB9384A934BD4E648DFDA37AD4357@EXCVS1.rdg.bane.dk>

From: Thy, Kristian
> You wouldn't happen to have any information about the transverse mercator approximation?

I think I just stumbled upon something useful:

http://www.gfy.ku.dk/~cct/4geo_k24.htm - at the bottom:

"Det Danske koordinatsystem System 34 er ikke baseret på nogen
 kortprojektion i matematisk forstand. Basis er en tilnærmet
 transversal konform cylinderprojektion (samt 1 for Bornholm).
 Jorden er regnet kugleformet, baseret på middelkrumningsradius
 for Hayford-ellipsoiden (a = 6378388 m, 1/f = 297) i bredden
 56o 08' for Jylland og 55o 20' for Sjælland. Det trigonometriske
 punkt Agri Baunehøj har fået koordinaterne (Y, X) = ( 200 km,
 200 km), så alle danske koordinater er positive. X - aksen peger
 mod Nord og Y - aksen peger mod vest. Afbildningen er iøvrigt
 fastlagt så retningen fra Agri til Lysnet er 24o31'14".17. "

Transl.:

"The Danish coordinate system System 34 is not based on a
 map projection in the mathematical sense. It's basis is an
 approximate transverse conformal cylindrical projection
 (plus another for Bornholm). Earth is defined as spherical,
 based on the average curvature radius for the Hayford
 ellipsoid (a = 6378388 m, 1/f = 297) at latitude 56d08' for
 Jutland and 55d20' for Zealand. The trigonometric point Agri
 Baunehøj is given coordinates (Y, X) = (200km, 200km) such
 that all Danish coordinates are positive. The X axis points
 North and the Y axis points west. The projection is defined
 such that the bearing from Agri to Lysnet is 24d31'14.17". "

For practical purposes, what is officially the X and Y axis in
this projection is switched to conform with other coordinate
systems, and the X axis is then counted as negative from its
origin East of Denmark, meaning that Agri has coordinates
(-200000, 200000) in my data.

The last sentence implies that the Y axis in this projection is
not parallel to geographical North (great). I can't find a value
for this deviance, but I'm willing to forgo that for now, if
someone can help me make up parameters for this projection.

I've tried

C:\>cs2cs -E +proj=tmerc +lat_0=55.29235 +lon_0=12.105661 +x_0=-100000.0 +y_0=100000.0 +to +proj=latlong +datum=WGS84 cs.txt

which gives me

-86714.420 162554.980   12d19'4.069"E   55d51'14.525"N 0.000

but I'm still a bit away from the correct result of
12d20'42.97906" 55d52'40.50251" - I can see I'm missing the
scale factor from the parameters (+k), but I can't find a
stated value for this anywhere.

Kristian


This email and any attached files are confidential and copyright protected. If you are not the addressee, any dissemination of this communication is strictly prohibited. Unless otherwise expressly agreed in writing, nothing stated in this communication shall be legally binding.



From ovv at hetnet.nl  Mon Nov 20 04:23:11 2006
From: ovv at hetnet.nl (Oscar van Vlijmen)
Date: Mon, 20 Nov 2006 13:23:11 +0100
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <CE2BE61DABB9384A934BD4E648DFDA37AD4339@EXCVS1.rdg.bane.dk>
Message-ID: <C1875CBF.8B93%ovv@hetnet.nl>

> From: "Thy, Kristian"
> Date: Mon, 20 Nov 2006 10:13:00 +0100
> Subject: RE: [Proj] Custom projection wildly inaccurate
 
> From: Oscar van Vlijmen
>> Another problem is that System 34 is not coupled to any
>> projection. I have heard of a transverse mercator approximation,
>> but an orthographic?
> Now that you mention it, this seems extremely strange. But I just went
> with what was in the official .prj files. You wouldn't happen to have
> any information about the transverse mercator approximation?

There seem to be several approximations. Most straight (read: what you can
do per proj/cs2cs command line alone) projective approximations are bad.
There is really only one way to do it correctly: use the official polynomial
solution.

An interesting approximation, using transverse mercator with some pre- &
postprocessing, can be read in:
Kp2000 - en nødvendighed eller ikke?
Dansk Vejtidsskrift, (6/7) 2001, p. 18-19
Leif Kahl Kristensen, Institut for fysik og astronomi
<http://asp.vejtid.dk/Artikler/2001/06-07%5C2930.pdf>

He gives an approximation for two System34 zones: Sjælland and Jylland/Fynn.
Using his approximation I got for the coordinates you mentioned:
lon =12d 20m 42.97906s; lat = 55d 52m 40.50251s; wgs84 datum.
-> x = 86714.465; y = 162554.937 m
The values you mentioned were:
-86714.42, 162554.98
Kristensen states that his procedure results in an average difference in X
of 5 cm, in Y of 9 cm, with a maximum difference of 18 cm.
For his Jylland/Fynn approximation the differences are larger.

>> The Danish use a 11th (13th?) degree polynomial to convert System 34
>> coordinates to UTM. I haven't seen this polynomial roaming on
>> the internet, so I cannot comment on the accuracy of approximations.
> I had them in my notes from a geodesy course in uni, but they have
> unfortunately been mislaid. At any rate, I am not sure of the copyright
> implications of publishing these polynomials from the tech note I got
> them in.
Algorithms and formulae are usually not copyrightable, but they are
patentable. So, still publishable, more or less, but if patented, commercial
exploitation and sometimes other forms of exploitation are prohibited, at
least in the countries where the patent is valid.
Note: I'm no lawyer, so this is no legal advise!


> I think I just stumbled upon something useful:
> http://www.gfy.ku.dk/~cct/4geo_k24.htm - at the bottom:
I've read this too, but I didn't give it a try.







From Kristian.Thy at atkinsglobal.com  Mon Nov 20 05:07:57 2006
From: Kristian.Thy at atkinsglobal.com (Thy, Kristian)
Date: Mon, 20 Nov 2006 14:07:57 +0100
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <C1875CBF.8B93%ovv@hetnet.nl>
Message-ID: <CE2BE61DABB9384A934BD4E648DFDA37AD43CE@EXCVS1.rdg.bane.dk>

From: Oscar van Vlijmen
> There seem to be several approximations. Most straight (read: 
> what you can do per proj/cs2cs command line alone) projective 
> approximations are bad.
> There is really only one way to do it correctly: use the 
> official polynomial solution.

Yes, but that's not easily translatable for use in Proj-based
applications like GDAL and MapServer (as far I know, at least).
We will most likely have to convert the data manually, but in
the meantime it would be nice to have a bad-and-fast projection
for demonstration and testing purposes.

> An interesting approximation, using transverse mercator with 
> some pre- & postprocessing, can be read in:
> Kp2000 - en nødvendighed eller ikke?
> Dansk Vejtidsskrift, (6/7) 2001, p. 18-19
> Leif Kahl Kristensen, Institut for fysik og astronomi
> <http://asp.vejtid.dk/Artikler/2001/06-07%5C2930.pdf>
> 
> He gives an approximation for two System34 zones: Sjælland 
> and Jylland/Fynn.
> Using his approximation I got for the coordinates you mentioned:
> lon =12d 20m 42.97906s; lat = 55d 52m 40.50251s; wgs84 datum.
> -> x = 86714.465; y = 162554.937 m
> The values you mentioned were:
> -86714.42, 162554.98
> Kristensen states that his procedure results in an average 
> difference in X of 5 cm, in Y of 9 cm, with a maximum difference
> of 18 cm.
> For his Jylland/Fynn approximation the differences are larger.

Interesting. For our application, that error would be acceptable.
My next question would then be if I can then somehow use the
formulae presented to warp an orthophoto using gdalwarp, but I
guess that's a question for another list :-)

> Algorithms and formulae are usually not copyrightable, but they are
> patentable. So, still publishable, more or less, but if 
> patented, commercial exploitation and sometimes other forms
> of exploitation are prohibited, at least in the countries
> where the patent is valid.
> Note: I'm no lawyer, so this is no legal advise!

Makes sense. But them again, IANAL (either) :-)

best regards,
Kristian


This email and any attached files are confidential and copyright protected. If you are not the addressee, any dissemination of this communication is strictly prohibited. Unless otherwise expressly agreed in writing, nothing stated in this communication shall be legally binding.



From gdt at ir.bbn.com  Mon Nov 20 05:36:24 2006
From: gdt at ir.bbn.com (Greg Troxel)
Date: Mon, 20 Nov 2006 08:36:24 -0500
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <CE2BE61DABB9384A934BD4E648DFDA37AD43CE@EXCVS1.rdg.bane.dk>
	(Kristian Thy's message of "Mon\, 20 Nov 2006 14\:07\:57 +0100")
References: <CE2BE61DABB9384A934BD4E648DFDA37AD43CE@EXCVS1.rdg.bane.dk>
Message-ID: <rmik61qxmsn.fsf@fnord.ir.bbn.com>


  > There seem to be several approximations. Most straight (read: 
  > what you can do per proj/cs2cs command line alone) projective 
  > approximations are bad.
  > There is really only one way to do it correctly: use the 
  > official polynomial solution.

  Yes, but that's not easily translatable for use in Proj-based
  applications like GDAL and MapServer (as far I know, at least).
  We will most likely have to convert the data manually, but in
  the meantime it would be nice to have a bad-and-fast projection
  for demonstration and testing purposes.

One thing that would work, but perhaps set a bad precedent, is to
define a new projection in the proj source, that knows the
polynomials.  This would be a particular transform, rather than a
generic projection with parameters.  Alternatively, there could be a
polynomial transform with vast numbers of parameters.


-- 
    Greg Troxel <gdt at ir.bbn.com>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 185 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061120/c4afc919/attachment.sig>

From mateusz at loskot.net  Mon Nov 20 09:05:02 2006
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 20 Nov 2006 18:05:02 +0100
Subject: [Proj] New version of PROJ.4 for Windows CE
In-Reply-To: <455E2CC3.30501@loskot.net>
References: <455DD72C.1060608@loskot.net> <455E1F9E.6020708@pobox.com>
	<455E2CC3.30501@loskot.net>
Message-ID: <4561E03E.6030303@loskot.net>

Mateusz Loskot wrote:
> As we've discussed on the IRC, I'll commit the Windows CE port based 
> on the new and cleaner changeset. Thanks!

Everyone interested, I'd like to announce that the PROJ.4 port for
Windows CE is available in the CVS.

Cheers
-- 
Mateusz Loskot
http://mateusz.loskot.net


From martin.vermeer at hut.fi  Mon Nov 20 23:13:48 2006
From: martin.vermeer at hut.fi (Martin Vermeer)
Date: Tue, 21 Nov 2006 09:13:48 +0200
Subject: [Proj] Custom projection wildly inaccurate
In-Reply-To: <rmik61qxmsn.fsf@fnord.ir.bbn.com>
References: <CE2BE61DABB9384A934BD4E648DFDA37AD43CE@EXCVS1.rdg.bane.dk>
	<rmik61qxmsn.fsf@fnord.ir.bbn.com>
Message-ID: <1164093229.23567.1.camel@geo9.hut.fi>

On Mon, 2006-11-20 at 08:36 -0500, Greg Troxel wrote:
>   > There seem to be several approximations. Most straight (read: 
>   > what you can do per proj/cs2cs command line alone) projective 
>   > approximations are bad.
>   > There is really only one way to do it correctly: use the 
>   > official polynomial solution.
> 
>   Yes, but that's not easily translatable for use in Proj-based
>   applications like GDAL and MapServer (as far I know, at least).
>   We will most likely have to convert the data manually, but in
>   the meantime it would be nice to have a bad-and-fast projection
>   for demonstration and testing purposes.
> 
> One thing that would work, but perhaps set a bad precedent, is to
> define a new projection in the proj source, that knows the
> polynomials.  This would be a particular transform, rather than a
> generic projection with parameters.  Alternatively, there could be a
> polynomial transform with vast numbers of parameters.

Alternatively, generate a shift grid containing the shifts produced by
the polynomial. This is the approach I am considering for the Finnish
kkj, which is officially represented by a multi-triangle (Delaunay)
affine transformation.

- Martin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20061121/47145760/attachment.sig>

From jlvandenhoek at wisc.edu  Wed Nov 22 09:32:08 2006
From: jlvandenhoek at wisc.edu (Jamon Van Den Hoek)
Date: Wed, 22 Nov 2006 11:32:08 -0600
Subject: [Proj] SP1 question
Message-ID: <e40ee2d4942e.45643538@wiscmail.wisc.edu>

hi all,

i'm having trouble achieving a transformation from a point's lat/long coords into a user-defined projection with one standard parallel.

i'm using PROJ.4's 1SP LCC function (at http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1sp.html) with the following projection parameters:

1. Origin Longitude (λo): 90°00’00.000000”
2. Origin Latitude (Φo): 43°22’00.000000”
3. False Easting (Eo): 147218.6942 meters (482999.999 U.S. survey feet)
4. False Northing (No): 0.0037 meters (0.012 U.S. survey feet)
5. Scale Factor on Central Meridian (ko): 1.0000365285

and the following code:

C:\>proj.exe -I +proj=lcc +lat_1=43d22'0"N +lon_0=90d00'0"W +k_0=1.0000365285 +x_0=147218.6942 +y_0=0.0037 +ellps=GRS80
44d10'00"N 89d48'00"W                                       (lat/long of point i want to transform)
131d4'1.401"E   89d59'59.907"S'00"N 89d48'00"W     (not sure how to interpret this output line)

1d48'57.388"W   43d21'8.09"N                              (if "enter" is pressed again, this it outputted)

i'm not sure where the error is coming into play that's producing this garbage. i want answers in meters, but i'm still getting dms.
     - the example PROJ.4 commands from the readme.txt work fine and i replicate the answers, so i know that PROJ.4 is installed correctly. 
     - i changed the format of the lat_0 and lon_0 parameters in terms of using "-" instead of W, etc., and changed the order of input for the lat and long coords for the county point. 
     - i also tried to replicate the example parameters at http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1sp.html but couldn't replicate the results.

any suggestions as to how to fix this problem? is my syntax incorrect or is something missing from the command?

thanks,
jamon



From EMiller at dfg.ca.gov  Wed Nov 22 10:47:32 2006
From: EMiller at dfg.ca.gov (Eric Miller)
Date: Wed, 22 Nov 2006 10:47:32 -0800
Subject: [Proj] SP1 question
In-Reply-To: <e40ee2d4942e.45643538@wiscmail.wisc.edu>
References: <e40ee2d4942e.45643538@wiscmail.wisc.edu>
Message-ID: <45642ABD.95FD.00E4.0@dfg.ca.gov>

Get rid of the -I (inverse) flag.  That tells proj you want to go from lcc coords to lat/long.

Doh!

>>> On 11/22/2006 at 9:32 AM, Jamon Van Den Hoek <jlvandenhoek at wisc.edu> wrote:
> hi all,
> 
> i'm having trouble achieving a transformation from a point's lat/long coords 
> into a user-defined projection with one standard parallel.
> 
> i'm using PROJ.4's 1SP LCC function (at 
> http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1sp.ht 
> ml) with the following projection parameters:
> 
> 1. Origin Longitude (*o): 90°0000.000000
> 2. Origin Latitude (*o): 43°2200.000000
> 3. False Easting (Eo): 147218.6942 meters (482999.999 U.S. survey feet)
> 4. False Northing (No): 0.0037 meters (0.012 U.S. survey feet)
> 5. Scale Factor on Central Meridian (ko): 1.0000365285
> 
> and the following code:
> 
> C:\>proj.exe -I +proj=lcc +lat_1=43d22'0"N +lon_0=90d00'0"W +k_0=1.0000365285 
> +x_0=147218.6942 +y_0=0.0037 +ellps=GRS80
> 44d10'00"N 89d48'00"W                                       (lat/long of 
> point i want to transform)
> 131d4'1.401"E   89d59'59.907"S'00"N 89d48'00"W     (not sure how to 
> interpret this output line)
> 
> 1d48'57.388"W   43d21'8.09"N                              (if "enter" is 
> pressed again, this it outputted)
> 
> i'm not sure where the error is coming into play that's producing this 
> garbage. i want answers in meters, but i'm still getting dms.
>      - the example PROJ.4 commands from the readme.txt work fine and i 
> replicate the answers, so i know that PROJ.4 is installed correctly. 
>      - i changed the format of the lat_0 and lon_0 parameters in terms of 
> using "-" instead of W, etc., and changed the order of input for the lat and 
> long coords for the county point. 
>      - i also tried to replicate the example parameters at 
> http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1sp.ht 
> ml but couldn't replicate the results.
> 
> any suggestions as to how to fix this problem? is my syntax incorrect or is 
> something missing from the command?
> 
> thanks,
> jamon
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org 
> http://lists.maptools.org/mailman/listinfo/proj




From geraldi.evenden at gmail.com  Wed Nov 22 10:34:53 2006
From: geraldi.evenden at gmail.com (Gerald I. Evenden)
Date: Wed, 22 Nov 2006 13:34:53 -0500
Subject: [Proj] SP1 question
In-Reply-To: <e40ee2d4942e.45643538@wiscmail.wisc.edu>
References: <e40ee2d4942e.45643538@wiscmail.wisc.edu>
Message-ID: <200611221334.53207.geraldi.evenden@gmail.com>

On Wednesday 22 November 2006 12:32 pm, Jamon Van Den Hoek wrote:
> hi all,
>
> i'm having trouble achieving a transformation from a point's lat/long
> coords into a user-defined projection with one standard parallel.
>
> i'm using PROJ.4's 1SP LCC function (at
> http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1sp.
>html) with the following projection parameters:
>
> 1. Origin Longitude (λo): 90°00’00.000000”
> 2. Origin Latitude (Φo): 43°22’00.000000”
> 3. False Easting (Eo): 147218.6942 meters (482999.999 U.S. survey feet)
> 4. False Northing (No): 0.0037 meters (0.012 U.S. survey feet)
> 5. Scale Factor on Central Meridian (ko): 1.0000365285
>
> and the following code:
>
> C:\>proj.exe -I +proj=lcc +lat_1=43d22'0"N +lon_0=90d00'0"W
> +k_0=1.0000365285 +x_0=147218.6942 +y_0=0.0037 +ellps=GRS80 44d10'00"N
> 89d48'00"W                                       (lat/long of point i want
> to transform) 131d4'1.401"E   89d59'59.907"S'00"N 89d48'00"W     (not sure
> how to interpret this output line)
>
> 1d48'57.388"W   43d21'8.09"N                              (if "enter" is
> pressed again, this it outputted)

The main thing wrong is that you seem to want a forward projection yet set 
the -I option to compute the inverse projection.  This explains why you get 
geographic coordinates as output.

I constructed the following script:

lproj +proj=lcc +lat_1=43d22n +lon_0=90dw +k_0=1.0000365285 \
  +x_0=147218.6942 +y_0=0.0037 +ellps=GRS80 <<EOF
89d48'00"W 44d10'00"N
EOF

and got the following answer:

163217.09       88911.46

Also note that longitude precedes the latitude on input.

Another note: it is unusual to use a k_0 factor greater than 1.  A more 
typical value would be 0.999 and the value depends of the latitude range of 
your projected area.

> i'm not sure where the error is coming into play that's producing this
> garbage. i want answers in meters, but i'm still getting dms. - the example
> PROJ.4 commands from the readme.txt work fine and i replicate the answers,
> so i know that PROJ.4 is installed correctly. - i changed the format of the
> lat_0 and lon_0 parameters in terms of using "-" instead of W, etc., and
> changed the order of input for the lat and long coords for the county
> point. - i also tried to replicate the example parameters at
> http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1sp.
>html but couldn't replicate the results.
>
> any suggestions as to how to fix this problem? is my syntax incorrect or is
> something missing from the command?
>
> thanks,
> jamon

-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist



From geraldi.evenden at gmail.com  Wed Nov 22 12:59:43 2006
From: geraldi.evenden at gmail.com (Gerald I. Evenden)
Date: Wed, 22 Nov 2006 15:59:43 -0500
Subject: [Proj] SP1 question
In-Reply-To: <200611221334.53207.geraldi.evenden@gmail.com>
References: <e40ee2d4942e.45643538@wiscmail.wisc.edu>
	<200611221334.53207.geraldi.evenden@gmail.com>
Message-ID: <200611221559.43113.geraldi.evenden@gmail.com>

I am resending this because the proj list failed as I had not updated by email 
address on the list.  Also, I wanted to add a point about the scaling at the 
end of the note.

On Wednesday 22 November 2006 1:34 pm, Gerald I. Evenden wrote:
> On Wednesday 22 November 2006 12:32 pm, Jamon Van Den Hoek wrote:
> > hi all,
> >
> > i'm having trouble achieving a transformation from a point's lat/long
> > coords into a user-defined projection with one standard parallel.
> >
> > i'm using PROJ.4's 1SP LCC function (at
> > http://www.remotesensing.org/geotiff/proj_list/lambert_conic_conformal_1s
> >p. html) with the following projection parameters:
> >
> > 1. Origin Longitude (λo): 90°00’00.000000”
> > 2. Origin Latitude (Φo): 43°22’00.000000”
> > 3. False Easting (Eo): 147218.6942 meters (482999.999 U.S. survey feet)
> > 4. False Northing (No): 0.0037 meters (0.012 U.S. survey feet)
> > 5. Scale Factor on Central Meridian (ko): 1.0000365285
> >
> > and the following code:
> >
> > C:\>proj.exe -I +proj=lcc +lat_1=43d22'0"N +lon_0=90d00'0"W
> > +k_0=1.0000365285 +x_0=147218.6942 +y_0=0.0037 +ellps=GRS80 44d10'00"N
> > 89d48'00"W                                       (lat/long of point i
> > want to transform) 131d4'1.401"E   89d59'59.907"S'00"N 89d48'00"W    
> > (not sure how to interpret this output line)
> >
> > 1d48'57.388"W   43d21'8.09"N                              (if "enter" is
> > pressed again, this it outputted)
>
> The main thing wrong is that you seem to want a forward projection yet set
> the -I option to compute the inverse projection.  This explains why you get
> geographic coordinates as output.
>
> I constructed the following script:
>
> lproj +proj=lcc +lat_1=43d22n +lon_0=90dw +k_0=1.0000365285 \
>   +x_0=147218.6942 +y_0=0.0037 +ellps=GRS80 <<EOF
> 89d48'00"W 44d10'00"N
> EOF
>
> and got the following answer:
>
> 163217.09       88911.46
>
> Also note that longitude precedes the latitude on input.
>
> Another note: it is unusual to use a k_0 factor greater than 1.  A more
> typical value would be 0.999 and the value depends of the latitude range of
> your projected area.

The above is my added point.

-- 
The whole religious complexion of the modern world is due
to the absence from Jerusalem of a lunatic asylum.
-- Havelock Ellis (1859-1939)  British psychologist



From erich.sadlowski at gmx.de  Tue Nov 28 03:02:13 2006
From: erich.sadlowski at gmx.de (Erich Sadlowski)
Date: Tue, 28 Nov 2006 11:02:13 +0000 (UTC)
Subject: [Proj] Difference between Proj4 datums and EPSG database
Message-ID: <loom.20061128T112922-163@post.gmane.org>

Hello all,

using the same epsg number one can get different results for proj4 (e.g. cs2cs) 
and other programms.
For example: When I use 31466 (DHDN, Gauss-Kruger zone 2) a datum "potsdam" ist 
used. This points to "Potsdatum Rauenberg 1950 DHDN". But in the EPSG database 
Potsdam 1995 ist used. Inspecting the "towgs84" parameters you can find great 
differences.

My question is: Why is a different and obsolete definition used in proj4? Why 
aren't the lines in the epsg file corrected to the "offical" EPSG towgs84 
parameters - although in the release notes I can find the statement "Upgraded 
to EPSG 6.11.1 database". 

Many greetings
Erich



From warmerdam at pobox.com  Tue Nov 28 09:34:08 2006
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Tue, 28 Nov 2006 12:34:08 -0500
Subject: [Proj] Difference between Proj4 datums and EPSG database
In-Reply-To: <loom.20061128T112922-163@post.gmane.org>
References: <loom.20061128T112922-163@post.gmane.org>
Message-ID: <456C7310.2070308@pobox.com>

Erich Sadlowski wrote:
> Hello all,
> 
> using the same epsg number one can get different results for proj4 (e.g. cs2cs) 
> and other programms.
> For example: When I use 31466 (DHDN, Gauss-Kruger zone 2) a datum "potsdam" ist 
> used. This points to "Potsdatum Rauenberg 1950 DHDN". But in the EPSG database 
> Potsdam 1995 ist used. Inspecting the "towgs84" parameters you can find great 
> differences.
> 
> My question is: Why is a different and obsolete definition used in proj4? Why 
> aren't the lines in the epsg file corrected to the "offical" EPSG towgs84 
> parameters - although in the release notes I can find the statement "Upgraded 
> to EPSG 6.11.1 database". 

Erich,

I believe a PROJ.4 user submitted a request that the towgs84 parameter
606,23,413 be used for the "Potsdam Rauenberg 1950 DHDN" datum and indicated
that this was equivelent to EPSG datum 6314 (or GCS 4314).  This relationship
is now hardcoded into the code that converts from EPSG to PROJ.4 format.

An expansion of EPSG:31466 into WKT shows:

PROJCS["DHDN / Gauss-Kruger zone 2",
     GEOGCS["DHDN",
         DATUM["Deutsches_Hauptdreiecksnetz",
             SPHEROID["Bessel 1841",6377397.155,299.1528128,
                 AUTHORITY["EPSG","7004"]],
             AUTHORITY["EPSG","6314"]],
         PRIMEM["Greenwich",0,
             AUTHORITY["EPSG","8901"]],
         UNIT["degree",0.01745329251994328,
             AUTHORITY["EPSG","9122"]],
         AUTHORITY["EPSG","4314"]],
     PROJECTION["Transverse_Mercator"],
     PARAMETER["latitude_of_origin",0],
     PARAMETER["central_meridian",6],
     PARAMETER["scale_factor",1],
     PARAMETER["false_easting",2500000],
     PARAMETER["false_northing",0],
     UNIT["metre",1,
         AUTHORITY["EPSG","9001"]],
     AUTHORITY["EPSG","31466"]]

This does not have any TOWGS84 parameters associated with the datum
Deutsches_Hauptdreiecksnetz, presumably because EPSG publishes more than
one possible solution though I'd have to do some digging to verify that.

If you believe that DHDN / Deutsches_Hauptdreiecksnetz is clearly different
than "Potsdam Rauenberg 1950 DHDN" then please let me know though a review
of the GCS list shows only this one entry with the name DHDN.

Things to keep in mind:
  o when translating EPSG datums to PROJ (or WKT) I ignore towgs84 values
    if the epsg database includes more than one possibility for the datum.
  o a variety of overrides are in place based on user provided input for
    datum towgs84 values - I have no way to evaluate their correctness so
    I just take folks on faith.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | President OSGeo, http://osgeo.org



From neteler at itc.it  Wed Nov 29 09:10:10 2006
From: neteler at itc.it (Markus Neteler)
Date: Wed, 29 Nov 2006 18:10:10 +0100
Subject: [Proj] Difference between Proj4 datums and EPSG database
In-Reply-To: <456C7310.2070308@pobox.com>
References: <loom.20061128T112922-163@post.gmane.org>
	<456C7310.2070308@pobox.com>
Message-ID: <20061129171009.GQ14587@bartok.itc.it>

On Tue, Nov 28, 2006 at 12:34:08PM -0500, Frank Warmerdam wrote:
...
> This does not have any TOWGS84 parameters associated with the datum
> Deutsches_Hauptdreiecksnetz, presumably because EPSG publishes more than
> one possible solution though I'd have to do some digging to verify that.

Frank,

if this help: In GRASS we have a list of 'potsdam' datums,
with 3 and 7 parameters:

cd lib/gis/
datum.table:
# Potsdam Rauenberg 1950 DHDN
potsdam "Deutsches_Hauptdreiecksnetz"         bessel        dx=606.0    dy=23.0     dz=413.0

datumtransform.table:
# http://crs.ifag.de/
potsdam "towgs84=612.4,77.0,440.2,-0.054,0.057,-2.797,2.55" "Germany (Sachsen)" "Accuracy <1m"
potsdam "towgs84=599.4,72.4,419.2,-0.063,-0.022,-2.723,6.46" "Germany (Thüringen)""Accuracy <1m"
potsdam "towgs84=590.5,69.5,411.6,-0.796,-0.052,-3.601,8.30" "Germany (West - North - 52d20'N to 55d00'N)" "Accuracy <1m"
potsdam "towgs84=584.8,67.0,400.3,0.105,0.013,-2.378,10.29" "Germany (West - Middle - 50d20'N to 52d20'N)" "Accuracy <1m"
potsdam "towgs84=597.1,71.4,412.1,0.894,0.068,-1.563,7.58" "Germany (West - South - 47d00N to 50d20'N)" "Accuracy <1m"
potsdam "towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.70" "Germany (Whole Country)" "Accuracy 3m"

GRASS shows the list to the user to select from.

Best regards,
Markus


