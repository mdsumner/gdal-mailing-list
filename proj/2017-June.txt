From moquet.julien at gmail.com  Thu Jun  1 10:52:45 2017
From: moquet.julien at gmail.com (Julien Moquet)
Date: Thu, 1 Jun 2017 19:52:45 +0200
Subject: [Proj] [Live-demo]  Fwd: [OSGeo-Live] Proj4 documentation
In-Reply-To: <4416803.loihJjt2tq@even-i700>
References: <1685950.APV4nt2vST@even-i700> <1669176.QG6ZeJU9dx@even-i700>
	<d880e47a-7e18-10b9-29dc-1b6d28828388@gmail.com>
	<4416803.loihJjt2tq@even-i700>
Message-ID: <CANigTqXxME9R4OK1WnSwd7xq+vQH34hW7aDiHsiusFS2io5=eg@mail.gmail.com>

Hi,

>> It would be ok to say "Proj4 has been translated into other languages,
including proj4js, ..."
> Agreed that metacrs is probably a bit too ..

I am fully agree too.




And as OsGeoLive aims to be multilanguages, I can help on the proj4 French
Translation pages.

Regards,


2017-05-31 22:15 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:

> On jeudi 1 juin 2017 05:57:38 CEST Cameron Shorter wrote:
>
> > Hi Evan,
>
> >
>
> > Yes, MetaCRS was a project gathering all the Proj4 projects together.
>
> > However, it appears that proj4 is the only project in that grouping
>
> > which is active?
>
> >
>
> > Hence my thoughts are that "MetaCRS" should be dropped from OSGeo-Live
>
> > as a concept and "Proj4" be used instead. It would be ok to say "Proj4
>
> > has been translated into other languages, including proj4js, ..."
>
> >
>
> > Your thoughts are welcome.
>
>
>
> Regarding what is listed currently in metacrs :
>
> - proj4js: no opinion
>
> - cs-map: no-opinion
>
> - geotiff/libgeotiff: heavily used underneath by GDAL in particular,
> mostly in maintaince mode, but can be treated as a technical dependency
> that doesn't require to be visible from users.
>
> - proj4j: no opinion
>
> - spatialreference.org: not maintained in years. http://epsg.io/ would be
> a possible replacement
>
>
>
> Agreed that metacrs is probably a bit too ... meta for folks exploring
> OSGeo-Live content, so it could make sense exposing proj.4 as a standalone
> project.
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170601/7e3b5761/attachment.html>

From even.rouault at spatialys.com  Thu Jun  1 14:08:28 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 01 Jun 2017 23:08:28 +0200
Subject: [Proj] [Live-demo]  Fwd: [OSGeo-Live] Proj4 documentation
In-Reply-To: <084f4547-e9a6-d763-1406-2fb22a751e3d@gmail.com>
References: <1685950.APV4nt2vST@even-i700> <4416803.loihJjt2tq@even-i700>
	<084f4547-e9a6-d763-1406-2fb22a751e3d@gmail.com>
Message-ID: <9473629.xU6dMoqT69@even-i700>

On vendredi 2 juin 2017 06:36:33 CEST Cameron Shorter wrote:
> Hi Even,
> 
> I agree with you assessment. So the question now is would you like to:
> 
> Write a project overview and quickstart from proj4?

I let other volunteers step in :-)

> 
> How to write it is described here:
> 
> https://wiki.osgeo.org/wiki/Live_GIS_Add_Project#Documentation
> 
> (The wiki text is a bit old, it references svn instead of git. Feel free
> to correct)
> 
> Do ask questions if you have any.
> 
> Warm regards, Cameron
> 
> On 1/6/17 5:45 am, Even Rouault wrote:
> > On jeudi 1 juin 2017 05:57:38 CEST Cameron Shorter wrote:
> > > Hi Evan,
> > > 
> > > 
> > > 
> > > Yes, MetaCRS was a project gathering all the Proj4 projects together.
> > > 
> > > However, it appears that proj4 is the only project in that grouping
> > > 
> > > which is active?
> > > 
> > > 
> > > 
> > > Hence my thoughts are that "MetaCRS" should be dropped from OSGeo-Live
> > > 
> > > as a concept and "Proj4" be used instead. It would be ok to say "Proj4
> > > 
> > > has been translated into other languages, including proj4js, ..."
> > > 
> > > 
> > > 
> > > Your thoughts are welcome.
> > 
> > Regarding what is listed currently in metacrs :
> > 
> > - proj4js: no opinion
> > 
> > - cs-map: no-opinion
> > 
> > - geotiff/libgeotiff: heavily used underneath by GDAL in particular,
> > mostly in maintaince mode, but can be treated as a technical
> > dependency that doesn't require to be visible from users.
> > 
> > - proj4j: no opinion
> > 
> > - spatialreference.org: not maintained in years. http://epsg.io/ would
> > be a possible replacement
> > 
> > Agreed that metacrs is probably a bit too ... meta for folks exploring
> > OSGeo-Live content, so it could make sense exposing proj.4 as a
> > standalone project.
> > 
> > 
> > Spatialys - Geospatial professional services
> > 
> > http://www.spatialys.com


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170601/b69ba43f/attachment.html>

From jochem.lesparre at kadaster.nl  Tue Jun 20 05:59:50 2017
From: jochem.lesparre at kadaster.nl (Jochem)
Date: Tue, 20 Jun 2017 05:59:50 -0700 (MST)
Subject: [Proj] Create new NTv2 grid in seconds or degrees?
Message-ID: <1497963590003-5324860.post@n6.nabble.com>

I am going to create a new NTv2 grid (.gsb file). The current version of the
NTv2 grid has all values in arcseconds. I was thinking of making the new
grid in degrees. However, it seems to me that Proj.4 ignores the units in
line 4 of the header (see below) and always assumes the values to be in
arcseconds. Is that correct?Regards, Jochem---NUM_OREC 11NUM_SREC 11NUM_FILE 
2GS_TYPE SECONDS VERSION NTv2.0  SYSTEM_FBSSL1841SYSTEM_TETRS89  MAJOR_F 
6377397.155MINOR_F  6356078.963MAJOR_T  6378137.000MINOR_T 
6356752.314SUB_NAMENL_ALL  PARENT  NONE    CREATED 08-02-13UPDATED        
S_LAT     181800.000000N_LAT     201000.000000E_LONG    -27600.000000W_LONG    
-9000.000000LAT_INC      300.000000LONG_INC     300.000000GS_COUNT  4095
-2.860042  2.752380  0.001000  0.001000 -2.860456  2.709846  0.001000 
0.001000...



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Create-new-NTv2-grid-in-seconds-or-degrees-tp5324860.html
Sent from the PROJ.4 mailing list archive at Nabble.com.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170620/366d6e04/attachment.html>

From kreve at sdfe.dk  Thu Jun 22 08:13:09 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 22 Jun 2017 15:13:09 +0000
Subject: [Proj] Coming releases of PROJ.4
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>

All,

Lately I have been thinking about the future of PROJ.4. FOSS4G is coming up soon,
and for the last couple of years a new version of PROJ.4 has been released at the same time. I
think we should follow that tradition this year, but also mix it up a bit after that. Below is a rough
plan of how I would like to see PROJ.4 evolve over the next 2-3 years.

The executive summary is:

  1. Release three times a year
  2. Introducing major breaking changes after the next release that
      a. Only has one public API
      b. Only has one build system
  3. ... while keeping a maintenance version alive for two years
  4. Restructure version numbering (4.9.x -> 10.0.0)

And now the gory details.

At the moment PROJ.4 has three different public API's: projects.h, proj_api.h and proj.h. The
main driver for adding new API's has been to add a new dimension. With proj_api.h came the
vertical component and with proj.h time has been introduced to PROJ.4 as well. So in a sense
they mark the changing of eras of the needs of the geospatial community with regards to
coordinate transformation. Albeit most have yet to realize the importance of the time component,
it is clear that it will play an important role in the not so far future.

I propose that we narrow that down to just one API and one build system over the coming
years. The projects.h interface has a long history and exposes most of the inner workings
of PROJ.4. Originally it was simple but during the years it has become quite complicated. I don't
think it is particularly suitable as the public interface for this library. That is also why the
proj_api.h interface exists. It was created in an effort of simplifying things and making a
more modern API. That was now roughly 15 years ago, and it is perhaps not so modern
anymore. On top of that it has some unfortunate design choices, for instance the
context-system which is rather hard to work with and comprehend. Unfortunately it is also
completely undocumented and the original ideas behind it seem to be lost.

PROJ.4 also has three different build-systems: Autotools, nmake and CMake. Autotools is the
authoritative build-system which the other two try to mimic as best as possible. Nmake was
introduced in order to build PROJ.4 on Windows and lately CMake has also been introduced
as there was a demand for it.

Due to the above I suggest that we focus our efforts entirely on the proj.h API and CMake
from the next release and onwards. For that to be a proper success we will have to abandon
the older API's and build systems. Of course that is not something that can be done from one
day to the next. Hence I think we should  phase them out over a long period of time.

My idea is to start working on simplifying PROJ.4 immediately after the next release, with the
aim of being able to release a fully working and simplified library in august 2018. In parallel
we should maintain a backwards compatible version for two years, to give developers amble
time to adjust to the many changes that will be introduced. I envision that new projections
and possibly other changes are applied to the maintenance version for the first years, and
after that only critical bug fixes will be applied. This should ensure that people can use the
library without problems until they make the transition to the new simplified version.

This is also a good time to restructure the version numbers. Today we have a system where
The major release number is fixed (or at least would be quite controversial to change), leaving
just to numbers to change at release. Ideally we should follow the structure of Semantic
Versioning [0]. I propose that the next release that breaks the API is called "PROJ.4 10.0.0".
This way we get around the awkward situation we have today, signal to the world that
something substantial has happened and we have a better version numbering system going
forward.

Below is a detailed plan of how my proposed release schedule for the next three years:


Version      Time of release        Action
-------      ---------------        ----------------------------------------------------------
4.9.4        August 2017            - "Standard" release of current master branch.
                                    - Announce that this will be the final version where
                                      projects.h is publicly accessible.
                                    - Introduce proj.h as the "API of the future".
                                      tag as experimental.
                                    - Create branch 4.9-Maintenance.

4.9.5        December 2017          - Backport new projections.
                                    - Bug Fixes.

4.9.6        April 2018             - Backport new projections.
                                    - Bug Fixes.

4.9.8        August 2018            - Backport new projections.
                                    - Bug Fixes.
                                    - Last version of 4.9.x that introduces new features.
                                      In maintenance mode from now on.
10.0.0       August 2018            - First version without projects.h and proj_api.h
                                    - Only use CMake as build-system.
                                    - proj.h no longer experimental.
                                    - Create branch Release-10.0

4.9.10       December 2018          - Maintenance release. Only bug fixes.
10.x.y       December 2018          - Regular release. New features. Bug fixes.

4.9.11       April 2019             - Maintenance release. Only bug fixes.
10.x.y       April 2019             - Regular release. New features. Bug fixes.

4.9.12       August 2019            - Final release. Only bug fixes.
                                    - The 4.9-branch will be discontinued.
10.x.y       August 2019            - Regular release. New features. Bug fixes.

10.x.y       December 2019          - Regular release. New features. Bug fixes.

10.x.y       April 2020             - Regular release. New features. Bug fixes.

10.x.y       August 2020            - Regular release. New features. Bug fixes.



This is a lot at once, but I think it is necessary to make the library easier to maintain in
the future. Please let me know what you think about this. If the description isn't detailed
enough I am happy to elaborate my thoughts.

/Kristian


[0] http://semver.org/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/8f8516df/attachment.html>

From even.rouault at spatialys.com  Thu Jun 22 09:47:58 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 22 Jun 2017 18:47:58 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
Message-ID: <4700620.RiEcWKq6VW@even-i700>

Kristian,

> The projects.h interface has a long history and exposes
> most of the inner workings of PROJ.4. 

As far as I know in the FOSS ecosystem, projects.h use is very marginal, or accidental. The 
only occurence I've in mind is in the OGDI project that uses nad_init() in one place. But I 
wouldn't mind too much about OGDI...

> That is also why the
> proj_api.h interface exists. It was created in an effort of simplifying
> things and making a more modern API. That was now roughly 15 years ago, and
> On top of that it has some unfortunate
> design choices, for instance the context-system which is rather hard to
> work with and comprehend. Unfortunately it is also completely undocumented
> and the original ideas behind it seem to be lost.

I'm not completely sure but I think the main driver for the context system was to remove / 
deprecate use of pj_errno as a global error variable. errno is now attached to the context.

While just reviewing proj.h, I had a few questions/observations :
https://github.com/OSGeo/proj.4/issues/529  (I see you've began to answer to some 
questions while I was still editing it ;-))
We should probably make sure it is in a clean enough way before releasing it to the world

> 
> PROJ.4 also has three different build-systems: Autotools, nmake and CMake.
> Autotools is the authoritative build-system which the other two try to
> mimic as best as possible. Nmake was introduced in order to build PROJ.4 on
> Windows and lately CMake has also been introduced as there was a demand for
> it.
> 
> Due to the above I suggest that we focus our efforts entirely on the proj.h
> API and CMake from the next release and onwards.

Adoption of the new API and deprecation of proj_api.h will show greater resistance than 
dropping autoconf/nmake.

I'm wondering: is there a reason for having a new proj.h ? (we perhaps discussed that, but I 
already forgot) Imagine that I want to write code that is compatible of old and new proj 
versions (I'm pretty sure that a number of proj users will have to do that at some point). It 
could be convenient to still include proj_api.h and depending on the value of PJ_VERSION 
decide which API are available. Whereas if you have a new header, that make you also change 
your autoconf/cmake logic detection of proj4.

In the transition period, proj_api.h could have two sections : a section with the new API and 
with the ancient API clearly separated. At some point ancient API would be removed.

On the other hand, having the new header and removing the old one will be an obvious way 
of signaling "eh, breaking changes have occured !" :-) 

Actually one of the point of having a dedicatd proj.h would be to make sure that people don't 
accidentally use old API that will be removed. But I see that proj.h includes proj_api.h, so this 
risk still exists.  Why proj.h couldn't avoid the proj_api.h depedency ?

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/41f592e2/attachment.html>

From kreve at sdfe.dk  Thu Jun 22 10:57:20 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 22 Jun 2017 17:57:20 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <4700620.RiEcWKq6VW@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>

Even,

> As far as I know in the FOSS ecosystem, projects.h use is very marginal, or accidental. The only occurence I've in mind is in the OGDI project that uses nad_init() in one place. But I wouldn't mind too much about OGDI...

Good, that makes it a bit easier. There might be users outside of FOSS and I think it is fair to give them some time to bring their things in order if/when we break stuff.


> I'm not completely sure but I think the main driver for the context system was to remove / deprecate use of pj_errno as a global error variable. errno is now attached to the context.

Yeah, I believe the idea was to make it thread-safe. Why regular errno is not used I can understand though.

> We should probably make sure it is in a clean enough way before releasing it to the world


I agree. I think we have time to get it in a reasonable state before august.

> I'm wondering: is there a reason for having a new proj.h ?


The idea was to produce a new clean API with more sensible types, better namespace, etc. It has been discussed earlier both here and on GitHub (for instance here https://github.com/OSGeo/proj.4/pull/388)


 > On the other hand, having the new header and removing the old one will be an obvious way of signaling "eh, breaking changes have occured !" :-)



That was exactly what I had in mind! Along with a giant leap forward in version number it should raise all the flags of people using PROJ.4.

It was also why I suggested to keep a maintenance version based on 4.9.4 for a few years. So developers have time to absorb the changes in their own time.



> Actually one of the point of having a dedicatd proj.h would be to make sure that people don't accidentally use old API that will be removed. But I see that proj.h includes proj_api.h, so this risk still exists. Why proj.h couldn't avoid the proj_api.h depedency ?

I think it should be possible to remove the dependency of proj_api.h in proj.h. Perhaps by putting the parts that are dependant on proj_api.h in a proj_internal.h as suggested in your GitHub issue?

Kristian

Fra: Even Rouault [mailto:even.rouault at spatialys.com]
Sendt: 22. juni 2017 18:48
Til: proj at lists.maptools.org
Cc: Kristian Evers
Emne: Re: [Proj] Coming releases of PROJ.4


Kristian,



> The projects.h interface has a long history and exposes

> most of the inner workings of PROJ.4.



As far as I know in the FOSS ecosystem, projects.h use is very marginal, or accidental. The only occurence I've in mind is in the OGDI project that uses nad_init() in one place. But I wouldn't mind too much about OGDI...



> That is also why the

> proj_api.h interface exists. It was created in an effort of simplifying

> things and making a more modern API. That was now roughly 15 years ago, and

> On top of that it has some unfortunate

> design choices, for instance the context-system which is rather hard to

> work with and comprehend. Unfortunately it is also completely undocumented

> and the original ideas behind it seem to be lost.



I'm not completely sure but I think the main driver for the context system was to remove / deprecate use of pj_errno as a global error variable. errno is now attached to the context.



While just reviewing proj.h, I had a few questions/observations :

https://github.com/OSGeo/proj.4/issues/529 (I see you've began to answer to some questions while I was still editing it ;-))

We should probably make sure it is in a clean enough way before releasing it to the world



>

> PROJ.4 also has three different build-systems: Autotools, nmake and CMake.

> Autotools is the authoritative build-system which the other two try to

> mimic as best as possible. Nmake was introduced in order to build PROJ.4 on

> Windows and lately CMake has also been introduced as there was a demand for

> it.

>

> Due to the above I suggest that we focus our efforts entirely on the proj.h

> API and CMake from the next release and onwards.



Adoption of the new API and deprecation of proj_api.h will show greater resistance than dropping autoconf/nmake.



I'm wondering: is there a reason for having a new proj.h ? (we perhaps discussed that, but I already forgot) Imagine that I want to write code that is compatible of old and new proj versions (I'm pretty sure that a number of proj users will have to do that at some point). It could be convenient to still include proj_api.h and depending on the value of PJ_VERSION decide which API are available. Whereas if you have a new header, that make you also change your autoconf/cmake logic detection of proj4.



In the transition period, proj_api.h could have two sections : a section with the new API and with the ancient API clearly separated. At some point ancient API would be removed.



On the other hand, having the new header and removing the old one will be an obvious way of signaling "eh, breaking changes have occured !" :-)



Actually one of the point of having a dedicatd proj.h would be to make sure that people don't accidentally use old API that will be removed. But I see that proj.h includes proj_api.h, so this risk still exists. Why proj.h couldn't avoid the proj_api.h depedency ?



Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/42a00a9e/attachment.html>

From even.rouault at spatialys.com  Thu Jun 22 11:23:13 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 22 Jun 2017 20:23:13 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
Message-ID: <1550309.BqztdtIPCp@even-i700>

> It was also why I suggested to keep a maintenance version based on 4.9.4 for
> a few years. So developers have time to absorb the changes in their own
> time.

I think that it is important to have at some point a release that has both functional proj_api.h 
and proj.h so that it can serve as a migration basis. If a project doesn't want to be compatible 
of both API and migrate directly to the new API, it must be able to rely on the new API in a 
release. So maintainance versions of 4.9 will have to fix potential issues in proj.h and related 
implementation. I'm also thinking to Linux distributions that will be able to ship only a single 
proj version and will perhaps have packages that still use the old API while others have 
already migrated.

I'm thinking as a potential test for the new API to use the code sprint at FOSS4G-Europe to 
try to make GDAL use the new API.

> I think it should be possible to remove the dependency of proj_api.h in
> proj.h. Perhaps by putting the parts that are dependant on proj_api.h in a
> proj_internal.h as suggested in your GitHub issue?

Yes, proj.h should be as clean as possible. And I wouldn't mind if there are duplicated 
declarations in proj.h and proj_api.h. Actually I think both should be mutually exclusive and 
self-contained. It makes little sense to include both in the same compilation unit. Of course 
that will require some care of not putting conflicting declarations for the same function...

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/b82ff8eb/attachment.html>

From kreve at sdfe.dk  Thu Jun 22 11:49:45 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 22 Jun 2017 18:49:45 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <1550309.BqztdtIPCp@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>

> I think that it is important to have at some point a release that has both functional proj_api.h and proj.h so that it can serve as a migration basis

I might not have expressed myself clear enough in the initial write-up. The next release, 4.9.4, will include both proj_api.h and proj.h. We should put in the effort to bring proj.h in a state where it can replace proj_api.h. I am able to spend a fair amount of time on this during the next month or so.

> I'm also thinking to Linux distributions that will be able to ship only a single proj version and will perhaps have packages that still use the old API while others have already migrated.

Good point.


> I'm thinking as a potential test for the new API to use the code sprint at FOSS4G-Europe to try to make GDAL use the new API.

That would be awesome!


>  Yes, proj.h should be as clean as possible. And I wouldn't mind if there are duplicated declarations in proj.h and proj_api.h. Actually I think both should be mutually exclusive and self-contained. It makes little sense to include both in the same compilation unit. Of course that will require some care of not putting conflicting declarations for the same function...


I agree. I think today, from the users perspective, proj.h and proj_api.h are mutually exclusive already. But yeah, the cut should be cleaner.

So to sum up, for the next release we will keep projects.h, proj_api.h and proj.h as public interfaces to PROJ.4. We will make sure that proj.h is a proper alternative to proj_api.h, and keep both in a maintenance version for a longer period, e.g. two years. After the 4.9.4 release we will start working on getting rid of (publicly available) projects.h, proj_api.h, autotools and nmake in version 10.0.0 and backport bug fixes and new proj.h functionality to 4.9-maintenance. Agreed?

Kristian

Fra: Even Rouault [mailto:even.rouault at spatialys.com]
Sendt: 22. juni 2017 20:23
Til: Kristian Evers
Cc: proj at lists.maptools.org
Emne: Re: SV: [Proj] Coming releases of PROJ.4




> It was also why I suggested to keep a maintenance version based on 4.9.4 for

> a few years. So developers have time to absorb the changes in their own

> time.



I think that it is important to have at some point a release that has both functional proj_api.h and proj.h so that it can serve as a migration basis. If a project doesn't want to be compatible of both API and migrate directly to the new API, it must be able to rely on the new API in a release. So maintainance versions of 4.9 will have to fix potential issues in proj.h and related implementation. I'm also thinking to Linux distributions that will be able to ship only a single proj version and will perhaps have packages that still use the old API while others have already migrated.



I'm thinking as a potential test for the new API to use the code sprint at FOSS4G-Europe to try to make GDAL use the new API.



> I think it should be possible to remove the dependency of proj_api.h in

> proj.h. Perhaps by putting the parts that are dependant on proj_api.h in a

> proj_internal.h as suggested in your GitHub issue?



Yes, proj.h should be as clean as possible. And I wouldn't mind if there are duplicated declarations in proj.h and proj_api.h. Actually I think both should be mutually exclusive and self-contained. It makes little sense to include both in the same compilation unit. Of course that will require some care of not putting conflicting declarations for the same function...





--

Spatialys - Geospatial professional services

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/f48ab7d8/attachment.html>

From sebastic at xs4all.nl  Thu Jun 22 12:15:27 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 22 Jun 2017 21:15:27 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
Message-ID: <d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>

On 06/22/2017 08:49 PM, Kristian Evers wrote:
>> I'm also thinking to Linux distributions that will be able to ship only a single proj version and will perhaps have packages that still use the old API while others have already migrated.
> 
> Good point.
To be more specific, there will be projects that will never move to the
new API due to lack of development manpower, etc.

Ideally the old API remains available, and gets put into an indefinite
maintenance mode.

The alternative is removing those projects from the distributions when
the old API is no longer available (i.e. after 4.9.12).

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From even.rouault at spatialys.com  Thu Jun 22 12:48:46 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 22 Jun 2017 21:48:46 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
Message-ID: <19979704.100nT1eDzF@even-i700>

On jeudi 22 juin 2017 21:15:27 CEST Sebastiaan Couwenberg wrote:
> On 06/22/2017 08:49 PM, Kristian Evers wrote:
> >> I'm also thinking to Linux distributions that will be able to ship only a
> >> single proj version and will perhaps have packages that still use the
> >> old API while others have already migrated.> 
> > Good point.
> 
> To be more specific, there will be projects that will never move to the
> new API due to lack of development manpower, etc.
> 
> Ideally the old API remains available, and gets put into an indefinite
> maintenance mode.

On my ubuntu 16.04, I see

$ apt-cache rdepends libproj9
libproj9
Reverse Depends:
  libproj-dev
  libmapserver2
  zygrib
  xastir
  thuban
  therion
  survex-aven
  survex
  sumo
  spatialite-gui
  sosi2osm
  shapelib
  saga
  qmapshack
  qlandkartegt
  qgis
  python3-pyproj
  python-pyproj
  proj-bin
  postgresql-9.5-postgis-2.2
  pdl
  osm2pgsql
  ogdi-bin
  ncl-ncarg
  merkaartor
  libvtk6.2
  libsqlite3-mod-spatialite
  libspatialite7
  libqgis-core2.8.6
  libproj-java
  liblwgeom-2.2-5
  libogdi3.2
  libmapserver2
  libmapnik3.0
  libmagplus3v5
  cdo
  libgeotiff2
  libgeo-proj4-perl
  libgdal1i
  grass-core
  gpx2shp

I didn't think the list was so long. Indeed the cumulative amount of effort for migrating all 
those projects is very likely much higher than supporting the old API.

As far as I'm concerned, I'm afraid I'm somehow the fallback maintainer of libgeotiff and 
shapelib, but I've never touched at their proj.4 dependant part (I'm in fact almost discovering 
that they depend on proj.4 !) I wouldn't be so enthousiastic in spending time touching that 
part.

Kristian, do you think that would be feasible to keep the proj_api API, while possibly making 
it internally use the new API if that simplifies design / maintainance ? A kind of compatibility 
layer.

I could potentially collect the API calls of projects I'm familiar with (GDAL, shapelib, libgeotiff, 
mapserver and QGIS), so we have a better picture of what is actually used in the wild. At the 
very least, it will give us an idea of what the capabilities the new API should cover...

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/3175e61e/attachment.html>

From howard at hobu.co  Thu Jun 22 12:55:40 2017
From: howard at hobu.co (Howard Butler)
Date: Thu, 22 Jun 2017 14:55:40 -0500
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
Message-ID: <35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>


> On Jun 22, 2017, at 1:49 PM, Kristian Evers <kreve at sdfe.dk> wrote:
>  
> So to sum up, for the next release we will keep projects.h, proj_api.h and proj.h as public interfaces to PROJ.4. We will make sure that proj.h is a proper alternative to proj_api.h, and keep both in a maintenance version for a longer period, e.g. two years. After the 4.9.4 release we will start working on getting rid of (publicly available) projects.h, proj_api.h, autotools and nmake in version 10.0.0 and backport bug fixes and new proj.h functionality to 4.9-maintenance. Agreed? 

Ditching manually-constructed and out-of-date nmake for cmake seems fine to me (ooh, CMake gives me project files now!), but ditching autotools that has worked for people for decades does not. That change would ripple into packagers and the distros for little or no appreciable benefit. 

I'm generally enthusiastic in spirit about the rest of your proposal, but I must say I'm very skeptical that we can actually *remove* anything -- especially headers with ambiguous public vs. private behavior that people now depend upon. We can add a new one, and we can make make a much cleaner and less ambiguous API, but I don't think we can take the old ones back. There's just too much momentum and calcification that is going to make it near impossible to go back and update external code to work with a new arrangement of such a foundational library such as Proj.4. I think we are stuck with the (API) sins of our forefathers, but I'd like to hear from more people who think we are not. 

We need to be delicate about changing things for a library such as Proj.4 only for the sake of being "better". This is an unfortunate consequence of maintaining a library that everything ultimately uses (and started using 20+ years ago). 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/8fae788f/attachment.html>

From kreve at sdfe.dk  Thu Jun 22 13:57:58 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 22 Jun 2017 20:57:58 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <19979704.100nT1eDzF@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71C89F7@S000014.PROD.SITAD.DK>

Even,



> Kristian, do you think that would be feasible to keep the proj_api API, while possibly making it internally use the new API if that simplifies design / maintainance ? A kind of compatibility layer.

On top of my head, yes. It might be a challenge to sort out contexts and the ProjFileAPI, but I think it is doable. I'll have to have a closer look though.

> I could potentially collect the API calls of projects I'm familiar with (GDAL, shapelib, libgeotiff, mapserver and QGIS), so we have a better picture of what is actually used in the wild. At the very least, it will give us an idea of what the capabilities the new API should cover...

That would be very helpful. I am especially interested to see if anyone has ever used the ProjFileAPI functions...



Howard,

> Ditching manually-constructed and out-of-date nmake for cmake seems fine to me (ooh, CMake gives me project files now!), but ditching autotools that has worked for people for decades does not. That change would ripple into packagers and the distros for little or no appreciable benefit.

I won't claim to be an expert  in CMake, quite the opposite really, but I was under the impression that it  would be possible to set up CMake in a way so that it mimics the autotools behavior exactly when UNIX makefiles are generated. I am completely wrong here?
The benefit would be to limit the amount of code we have to maintain. It would only benefit us, true, but it would also free time that can be spend improving the overall project instead of maintaining status quo. I don't feel too strongly about this, I just wanted to throw it out there while I was at it.

> but I must say I'm very skeptical that we can actually *remove* anything -- especially headers with ambiguous public vs. private behavior that people now depend upon


I get that. On the other hand I fear that we will be locked in place forever if we don't allow breaking stuff once in a while. If at least we can get away with not exposing projects.h I think there will be much more room to play in the future. I hope that Even's assessment about it not being used much is true.

> We need to be delicate about changing things for a library such as Proj.4 only for the sake of being "better". This is an unfortunate consequence of maintaining a library that everything ultimately uses (and started using 20+ years ago).

Perhaps the ambition should be to BE MUCH BETTER than previous versions on PROJ.4. So much better that other projects will benefit hugely from using the new API and update their codebase voluntarily. Eventually the problem will solve itself. I already think we are on the right track.

/Kristian

Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Even Rouault
Sendt: 22. juni 2017 21:49
Til: proj at lists.maptools.org
Cc: Sebastiaan Couwenberg
Emne: Re: [Proj] Coming releases of PROJ.4


On jeudi 22 juin 2017 21:15:27 CEST Sebastiaan Couwenberg wrote:

> On 06/22/2017 08:49 PM, Kristian Evers wrote:

> >> I'm also thinking to Linux distributions that will be able to ship only a

> >> single proj version and will perhaps have packages that still use the

> >> old API while others have already migrated.>

> > Good point.

>

> To be more specific, there will be projects that will never move to the

> new API due to lack of development manpower, etc.

>

> Ideally the old API remains available, and gets put into an indefinite

> maintenance mode.



On my ubuntu 16.04, I see



$ apt-cache rdepends libproj9

libproj9

Reverse Depends:

libproj-dev

libmapserver2

zygrib

xastir

thuban

therion

survex-aven

survex

sumo

spatialite-gui

sosi2osm

shapelib

saga

qmapshack

qlandkartegt

qgis

python3-pyproj

python-pyproj

proj-bin

postgresql-9.5-postgis-2.2

pdl

osm2pgsql

ogdi-bin

ncl-ncarg

merkaartor

libvtk6.2

libsqlite3-mod-spatialite

libspatialite7

libqgis-core2.8.6

libproj-java

liblwgeom-2.2-5

libogdi3.2

libmapserver2

libmapnik3.0

libmagplus3v5

cdo

libgeotiff2

libgeo-proj4-perl

libgdal1i

grass-core

gpx2shp



I didn't think the list was so long. Indeed the cumulative amount of effort for migrating all those projects is very likely much higher than supporting the old API.



As far as I'm concerned, I'm afraid I'm somehow the fallback maintainer of libgeotiff and shapelib, but I've never touched at their proj.4 dependant part (I'm in fact almost discovering that they depend on proj.4 !) I wouldn't be so enthousiastic in spending time touching that part.



Kristian, do you think that would be feasible to keep the proj_api API, while possibly making it internally use the new API if that simplifies design / maintainance ? A kind of compatibility layer.



I could potentially collect the API calls of projects I'm familiar with (GDAL, shapelib, libgeotiff, mapserver and QGIS), so we have a better picture of what is actually used in the wild. At the very least, it will give us an idea of what the capabilities the new API should cover...



Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/cb501cf9/attachment.html>

From even.rouault at spatialys.com  Thu Jun 22 14:45:52 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 22 Jun 2017 23:45:52 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <19979704.100nT1eDzF@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700>
Message-ID: <3018647.KZKNXMYioT@even-i700>

> I could potentially collect the API calls of projects I'm familiar with
> (GDAL, shapelib, libgeotiff, mapserver and QGIS), so we have a better
> picture of what is actually used in the wild. At the very least, it will
> give us an idea of what the capabilities the new API should cover...
> 

Here's the result of my exploration of proj API use in those packages :

GDAL:
    pj_ctx_alloc
    pj_ctx_fclose (1)
    pj_ctx_free
    pj_ctx_get_errno
    pj_ctx_set_app_data (1)
    pj_ctx_set_debug (1)
    pj_ctx_set_logger (1)
    pj_dalloc
    pj_find_file (2)
    pj_free
    pj_get_def
    pj_get_errno_ref
    pj_init --> not really used in fact
    pj_init_plus
    pj_init_plus_ctx
    pj_open_lib (1)
    pj_strerrno
    pj_transform

    Regarding (1) and (2), only apply to recent GDAL 2.2
    (1) dirty use of the API available in currently released proj versions for a very particular use 
case of finding the full filename of a grid used by proj
    (2) cleaner approch of (1) with the pj_open_lib() function I added recently in proj master 
version

mapserver:
    pj_clear_initcache
    pj_ctx_alloc
    pj_ctx_free
    pj_dalloc
    pj_deallocate_grids
    pj_free
    pj_fwd
    pj_get_def
    pj_get_errno_ref
    pj_init
    pj_init_ctx
    pj_inv
    pj_is_latlong
    pj_set_finder
    pj_strerrno
    pj_transform

libgeotiff:
    pj_free
    pj_fwd
    pj_init
    pj_inv

shapelib (not the lib itself, but by a few of the associated utilities):
    pj_free
    pj_init
    pj_is_latlong
    pj_transform

QGIS (libqgiscore. I don't think other QGIS libs depend directly on proj)
    pj_ctx_alloc
    pj_ctx_free
    pj_dalloc
    pj_free
    pj_get_def
    pj_init_plus_ctx
    pj_is_latlong
    pj_strerrno
    pj_transform


All of them use only proj_api.h (quite logical since Frank Warmerdam was involved in all those 
projects at the time proj_api.h was introduced)

So the projFileAPI isn't used (except pj_open_lib / pj_ctx_close as a legacy way)


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/1033e9a3/attachment.html>

From howard at hobu.co  Thu Jun 22 15:32:05 2017
From: howard at hobu.co (Howard Butler)
Date: Thu, 22 Jun 2017 17:32:05 -0500
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71C89F7@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C89F7@S000014.PROD.SITAD.DK>
Message-ID: <1B02853B-C4D2-4A4C-A0A0-FE0A2248ADEF@hobu.co>


> On Jun 22, 2017, at 3:57 PM, Kristian Evers <kreve at sdfe.dk> wrote:
>  
> > Ditching manually-constructed and out-of-date nmake for cmake seems fine to me (ooh, CMake gives me project files now!), but ditching autotools that has worked for people for decades does not. That change would ripple into packagers and the distros for little or no appreciable benefit. 
>  
> I won’t claim to be an expert  in CMake, quite the opposite really, but I was under the impression that it  would be possible to set up CMake in a way so that it mimics the autotools behavior exactly when UNIX makefiles are generated. I am completely wrong here?
> The benefit would be to limit the amount of code we have to maintain. It would only benefit us, true, but it would also free time that can be spend improving the overall project instead of maintaining status quo. I don’t feel too strongly about this, I just wanted to throw it out there while I was at it.

CMake can produce a somewhat passable facsimile to autotools behavior, but there are many nuances and autotools features that CMake doesn't support or support in the same way. These things matter to the distribution packagers and maintainers, and I've found it's often more trouble to make CMake behave the way they need than it is to just provide an autotools layout implementation. That situation in 2017 is better than it was in 2008 when I started using CMake, but it is still a friction point.

> > but I must say I'm very skeptical that we can actually *remove* anything -- especially headers with ambiguous public vs. private behavior that people now depend upon
>  
> I get that. On the other hand I fear that we will be locked in place forever if we don’t allow breaking stuff once in a while. If at least we can get away with not exposing projects.h I think there will be much more room to play in the future. I hope that Even’s assessment about it not being used much is true.

Successfully burying projects.h would be enough to declare victory, if we can do so without upsetting too much. Even's analysis shows that might be possible. 

> > We need to be delicate about changing things for a library such as Proj.4 only for the sake of being "better". This is an unfortunate consequence of maintaining a library that everything ultimately uses (and started using 20+ years ago). 
>  
> Perhaps the ambition should be to BE MUCH BETTER than previous versions on PROJ.4. So much better that other projects will benefit hugely from using the new API and update their codebase voluntarily. Eventually the problem will solve itself. I already think we are on the right track.

#1: "It's ugly, but it works, it will stay working, and it requires no more software development"
#2: "It works more smoothly, but you have to write/update software to use it, and it does the same thing as #1"

There must be new features that incentivize the work required to do #2. For the sake of itself is not enough. Maybe access to transformation pipelines are enough for that, I don't know. It's a frustrating reality of a very old and well-established software project with lots of implementations. The success of Proj.4 has indeed locked itself in place.






-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170622/50c86a5f/attachment.html>

From mwtoews at gmail.com  Thu Jun 22 16:41:29 2017
From: mwtoews at gmail.com (Mike Toews)
Date: Fri, 23 Jun 2017 11:41:29 +1200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
Message-ID: <CAM2FmMrb+mRTd+pXqiVZAiGE=y_HfHWEKyRxWpiTwwnr3WdfhA@mail.gmail.com>

On 23 June 2017 at 03:13, Kristian Evers <kreve at sdfe.dk> wrote:
>   4. Restructure version numbering (4.9.x -> 10.0.0)

Silly question: will the software have ".4" baked into the name (i.e.
PROJ.4 version 10.x), or will it be incremented (i.e. PROJ.10, a
terrible idea), or dropped entirely (i.e. PROJ)? Ideally, I'd advise
future-proofing the name by simply reverting to the original name,
PROJ. Of course, renaming has lots of implications for 3rd party
software that have objects like "proj4text" or "proj4string".

To keep the name permanently as PROJ.4 for any future version, the
meaning of ".4" needs to change to something like 4-dimension
projection capabilities (x, y, z, t).

On a historical note, there never was PROJ.1 from 1980 or PROJ.2 from
1985, or even a PROJ.3 (as documented at the time) from 1990. The name
PROJ.4 first appeared for release 4 around 1994, possibly to help
distinguish from the previous releases.


From sebastic at xs4all.nl  Fri Jun 23 00:18:53 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 23 Jun 2017 09:18:53 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <3018647.KZKNXMYioT@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700> <3018647.KZKNXMYioT@even-i700>
Message-ID: <9f46c185-390d-49a4-6afc-c7b0a9923ddd@xs4all.nl>

On 06/22/2017 11:45 PM, Even Rouault wrote:
>> I could potentially collect the API calls of projects I'm familiar with
>> (GDAL, shapelib, libgeotiff, mapserver and QGIS), so we have a better
>> picture of what is actually used in the wild. At the very least, it will
>> give us an idea of what the capabilities the new API should cover...
>>
> 
> Here's the result of my exploration of proj API use in those packages :
> 
> [...]
> 
> All of them use only proj_api.h (quite logical since Frank Warmerdam was involved in all those 
> projects at the time proj_api.h was introduced)
> 
> So the projFileAPI isn't used (except pj_open_lib / pj_ctx_close as a legacy way)
The language bindings are likely to use projects.h, at least Geo::Proj4
(libgeo-proj4-perl) does. pyproj (python-pyproj) uses proj_api.h.

Using codesearch.debian.net shows that many of the PROJ.4 reverse
dependencies include projects.h, so getting rid of that requires
patching those projects.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From Roger.Bivand at nhh.no  Fri Jun 23 01:02:19 2017
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 23 Jun 2017 01:02:19 -0700 (MST)
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <3018647.KZKNXMYioT@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700> <3018647.KZKNXMYioT@even-i700>
Message-ID: <1498204939686-5325292.post@n6.nabble.com>

The listing for the R rgdal package is:

#include <projects.h> 

Was used until access to share/proj files was provided, 
needed for rgdal (and sf below) to check for proj metadata files 
on package install.

Is still used in the essential function by Barry Rowlingson:

#include <projects.h>

int inversetest(PJ *P){
  return (P->inv ? 1: 0);

}

test for the existence of an inverse, see also examples in:

https://r-forge.r-project.org/scm/viewvc.php/pkg/man/project.Rd?view=markup&root=rgdal

getPROJ4VersionInfo()
projs <- as.character(projInfo()$name)
res <- logical(length(projs))
names(res) <- projs
msgs <- character(length(projs))
names(msgs) <- projs
owarn <- options("warn")$warn
options(warn=2L)
for (i in seq(along=res)) {
  iprs <- paste("+proj=", projs[i], sep="")
  xy <- try(project(cbind(0, 0), iprs, legacy=TRUE), silent=TRUE)
  if (class(xy) == "try-error") {
    res[i] <- NA
    msgs[i] <- paste("fwd:", strsplit(xy, "\n")[[1]][2])
  } else {
    out <- try(project(xy, iprs, inv=TRUE, legacy=TRUE), silent=TRUE)
    if (class(out) == "try-error") {
      res[i] <- NA
      msgs[i] <- paste("inv:", strsplit(out, "\n")[[1]][2])
    } else res[i] <- isTRUE(all.equal(cbind(0,0), out))
  }
}
options(warn=owarn)

The problem is that pj_inv() hard fails when an inverse is attempted and
none exists, so we need protection to avoid crashing the R session:

  if ( inversetest(pj) == 0) {
    pj_free(pj);
    error("No inverse for this projection");
  };


The effective usage is:

#include <proj_api.h>

pj_ctx_fclose
pj_ctx_fgets
pj_free
pj_fwd
pj_get_datums_ref
pj_get_def
pj_get_default_ctx
pj_get_ellps_ref
pj_get_errno_ref
pj_get_list_ref
pj_get_release
pj_get_units_ref
pj_init_plus
pj_inv
pj_is_latlong
pj_open_lib
pj_strerrno
pj_transform

for R package proj4:

#include <proj_api.h>

pj_free
pj_fwd
pj_get_errno_ref
pj_init_plus
pj_inv
pj_strerrno
pj_transform

and for R package sf:

#include <proj_api.h>

pj_ctx_fclose
pj_free
pj_get_datums_ref
pj_get_def
pj_get_default_ctx
pj_get_ellps_ref
pj_get_errno_ref
pj_get_list_ref
pj_get_units_ref
pj_init_plus
pj_init_plus
pj_open_lib
pj_open_lib
pj_strerrno

here with CPL_transform() used for projection through the GDAL -> Proj4
dependence.

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
View this message in context: http://osgeo-org.1560.x6.nabble.com/Coming-releases-of-PROJ-4-tp5325216p5325292.html
Sent from the PROJ.4 mailing list archive at Nabble.com.


From kreve at sdfe.dk  Fri Jun 23 02:04:20 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 23 Jun 2017 09:04:20 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <1498204939686-5325292.post@n6.nabble.com>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700> <3018647.KZKNXMYioT@even-i700>
	<1498204939686-5325292.post@n6.nabble.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>

Roger,

> Is still used in the essential function by Barry Rowlingson:
> 
> #include <projects.h>
> 
> int inversetest(PJ *P){
>   return (P->inv ? 1: 0);
> 
> }

We could add an pj_has_inverse() function to proj_api.h. Would that work for you? Alternatively a similar check can be made with  the proj.h API, but that of course requires rewriting more code.



Sebastian,

> Using codesearch.debian.net shows that many of the PROJ.4 reverse
> dependencies include projects.h, so getting rid of that requires
> patching those projects.


I did the following search: https://codesearch.debian.net/search?q=%23include+%3Cprojects.h%3E&perpkg=1 

It returns 7 relevant projects. Basemap, Mapserver, Python-pyproj, Thuban, Therion, Paraview and SAGA. 

Basemap, Therion and Paraview seem to include a complete copy of the PROJ.4 code base. Presumably they won't be bothered by a change. That leaves 4 projects, of which we have good access to most and will be able to help absorb the changes. I don't think it is completely outrageous to introduce a breaking change if it doesn't affect more projects than that. Of course it is likely that my search is not catching everything. Have I missed something?

 Mike,

> Silly question: will the software have ".4" baked into the name (i.e. PROJ.4 version 10.x),

My suggestion is to keep the projects name as PROJ.4 (all caps), and eventually change the versioning to 10.y.z,
so that you use version 10.y.z of PROJ.4. It's a weird bump in version number from 4 to 10, but hey, if Microsoft 
can do that kind of thing, so can we :-) The idea behind the big jump would be to have full use of major, minor 
and patch numbers, as well as signal to the world that a larger change has happened. Makes sense? 



Howard,

> Successfully burying projects.h would be enough to declare victory, if we can do so without upsetting too much. Even's analysis shows that might be possible.

Agreed. I totally acknowledge that my viewpoint is too progressive, and others might lean a bit to the conservative side.
Settling on getting rid of projects.h is a good compromise I think.

> #1: "It's ugly, but it works, it will stay working, and it requires no more software development"
> #2: "It works more smoothly, but you have to write/update software to use it, and it does the same thing as #1"
> 
> There must be new features that incentivize the work required to do #2. For the sake of itself is not enough. Maybe access to transformation pipelines are enough for that, I don't know. It's a  frustrating reality of a very old and well-established software project with lots of implementations. The success of Proj.4 has indeed locked itself in place.

Personally I believe transformation pipelines is enough of a game-changer but I am not sure that it is apparent to most users at the moment.
But there are plenty of room for other game-changing features as well, which eventually makes it a no brainer to use the new API. 



/Kristian





From even.rouault at spatialys.com  Fri Jun 23 02:05:39 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 23 Jun 2017 11:05:39 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <1498204939686-5325292.post@n6.nabble.com>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<3018647.KZKNXMYioT@even-i700>
	<1498204939686-5325292.post@n6.nabble.com>
Message-ID: <2674828.WxAMmukWMj@even-i700>

> The problem is that pj_inv() hard fails when an inverse is attempted and
> none exists, so we need protection to avoid crashing the R session:

For the record, this issue has been fixed in proj 4.9.3 per :
https://github.com/OSGeo/proj.4/commit/757a2c8f946faccf9d094d76cb79e6ebe0006564#diff-f0c3df1eafd91a86f6cd9cf68cc306ddR23

pj_inv will now return (HUGE_VAL,HUGE_VAL) if the inverse doesn't exist.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170623/884fdc37/attachment.html>

From Roger.Bivand at nhh.no  Fri Jun 23 02:13:46 2017
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 23 Jun 2017 11:13:46 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2674828.WxAMmukWMj@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<3018647.KZKNXMYioT@even-i700>
	<1498204939686-5325292.post@n6.nabble.com>
	<2674828.WxAMmukWMj@even-i700>
Message-ID: <alpine.LFD.2.20.1706231112170.17736@reclus.nhh.no>

On Fri, 23 Jun 2017, Even Rouault wrote:

>> The problem is that pj_inv() hard fails when an inverse is attempted and
>> none exists, so we need protection to avoid crashing the R session:
>
> For the record, this issue has been fixed in proj 4.9.3 per :
> https://github.com/OSGeo/proj.4/commit/757a2c8f946faccf9d094d76cb79e6ebe0006564#diff-f0c3df1eafd91a86f6cd9cf68cc306ddR23
>
> pj_inv will now return (HUGE_VAL,HUGE_VAL) if the inverse doesn't exist.
>

Thanks for the heads-up - I'll add a test conditioning on the PROJ4 
version (plenty are still at 4.8 or earlier, I believe).

Roger

>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
Editor-in-Chief of The R Journal, https://journal.r-project.org/index.html
http://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en


From even.rouault at spatialys.com  Fri Jun 23 02:37:16 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 23 Jun 2017 11:37:16 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
Message-ID: <1657879.l7P0xZgSto@even-i700>

> I did the following search:
> https://codesearch.debian.net/search?q=%23include+%3Cprojects.h%3E&perpkg=1

Looking also for #include "projects.h" brings more projects to your below list:
ogdi-dfsg, libgeo-proj4-perl, gpx2shp, pdl, python-pyproj

( I removed qtcreator, postbooks which have unrelated projects.h header. And 
gnudatalanguage for which the include is actually commented in favor of proj_api )

> 
> It returns 7 relevant projects. Basemap, Mapserver, Python-pyproj, Thuban,
> Therion, Paraview and SAGA.

Consider mapserver out of this list. The only user is mapscript/php/php_proj.c and this file 
isn't is any CMakeList.txt. When adding it, compilation fails on many things, not related to 
projects.h itself

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170623/7cadf112/attachment.html>

From kreve at sdfe.dk  Fri Jun 23 02:53:14 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 23 Jun 2017 09:53:14 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <1657879.l7P0xZgSto@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>

So still a rather short list I would say. Short enough that it is feasible to individually reach out to the affected projects.

I just had a look at pyproj. It includes a copy of the PROJ.4 source code as well, so we should not consider that project either.

The list at the moment is:

- ogdi-dfsg
- libgeo-proj4-perl
- gpx2shp
- pdl
- basemap
- thuban
- therion
- paraview
- SAGA

/Kristian

Fra: Even Rouault [mailto:even.rouault at spatialys.com]
Sendt: 23. juni 2017 11:37
Til: proj at lists.maptools.org
Cc: Kristian Evers
Emne: Re: [Proj] Coming releases of PROJ.4


> I did the following search:

> https://codesearch.debian.net/search?q=%23include+%3Cprojects.h%3E&perpkg=1



Looking also for #include "projects.h" brings more projects to your below list:

ogdi-dfsg, libgeo-proj4-perl, gpx2shp, pdl, python-pyproj



( I removed qtcreator, postbooks which have unrelated projects.h header. And gnudatalanguage for which the include is actually commented in favor of proj_api )



>

> It returns 7 relevant projects. Basemap, Mapserver, Python-pyproj, Thuban,

> Therion, Paraview and SAGA.



Consider mapserver out of this list. The only user is mapscript/php/php_proj.c and this file isn't is any CMakeList.txt. When adding it, compilation fails on many things, not related to projects.h itself



--

Spatialys - Geospatial professional services

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170623/328966fa/attachment.html>

From sebastic at xs4all.nl  Fri Jun 23 03:55:23 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 23 Jun 2017 12:55:23 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
Message-ID: <fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>

On 06/23/2017 11:53 AM, Kristian Evers wrote:
> So still a rather short list I would say. Short enough that it is feasible to individually reach out to the affected projects.
> 
> I just had a look at pyproj. It includes a copy of the PROJ.4 source code as well, so we should not consider that project either.

In Debian embedded copy copies are not used, the packaged dependencies
are used in stead.

The complete list (source) packages in Debian unstable that (build)
depend on proj is:

 * josm (proj-data only)

 * gpx2shp
 * libgeo-proj4-perl
 * libgeotiff-dfsg
 * ogdi-dfsg
 * openorienteering-mapper
 * pdl
 * proj-rdnap (proj-bin & proj-data only)
 * python-cartopy
 * python-pyproj
 * shapelib
 * sosi2osm
 * spatialite
 * survex
 * zygrib

 * gdal
 * magics++
 * pyspatialite
 * spatialite-gui
 * spatialite-tools

 * cdo
 * dans-gdal-scripts
 * grass
 * libosmium
 * mapcache
 * mapnik
 * mapproxy
 * mapserver
 * merkaartor
 * metview
 * ncl
 * otb
 * pdal
 * postgis
 * qlandkartegt
 * qmapshack
 * saga
 * sumo
 * thuban
 * vtk6
 * xastir

 * ifrit
 * libgdal-grass
 * osm2pgsql
 * python-mapnik
 * qgis
 * therion

See: http://linuxminded.nl/tmp/pkg-grass-transitions/html/proj.html
(check the "good" checkbox)

> The list at the moment is:
> 
> - ogdi-dfsg
> - libgeo-proj4-perl
> - gpx2shp
> - pdl
> - basemap
> - thuban
> - therion
> - paraview
> - SAGA

Searching for '#include [<"]projects.h[>"]' results in:

 * qtcreator
 * gnudatalanguage
 * mapserver
 * libgeo-proj4-perl
 * ogdi-dfsg
 * thuban
 * saga
 * postbooks
 * therion
 * python-pyproj
 * gpx2shp
 * paraview
 * basemap
 * proj
 * pdl

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From kreve at sdfe.dk  Fri Jun 23 04:32:45 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 23 Jun 2017 11:32:45 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>

> In Debian embedded copy copies are not used, the packaged dependencies
> are used in stead.

Okay. Out of curiosity, how do you make sure that it works? Potentially packages can embed conflicting versions,  I guess. Which might be the entire reason they embedded it in the first place. 

> Searching for '#include [<"]projects.h[>"]' results in:

Still a list of around 10 projects. Not a huge impact in my mind. Does the Debian search tools have a way of determing the use of those packages? Download numbers or something like that?

/Kristian




From sebastic at xs4all.nl  Fri Jun 23 05:25:14 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 23 Jun 2017 14:25:14 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
Message-ID: <354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>

On 06/23/2017 01:32 PM, Kristian Evers wrote:
>> In Debian embedded copy copies are not used, the packaged dependencies
>> are used in stead.
> 
> Okay. Out of curiosity, how do you make sure that it works? Potentially packages can embed conflicting versions,  I guess. Which might be the entire reason they embedded it in the first place. 

Test suites or manual testing mostly.

Because we don't want to patch all copies of a library for (security)
bugs, using embedded copies should not be done in Debian. Stripping the
embedded copy from the source is optional, so the presence of the code
does not imply that its used for the build.

Other reasons to embed code copies is to ease their build and deployment
on Windows, or to not need to a separate action to download the dependency.

As the maintainer of the proj package in Debian I say that anyone using
an embedded copy of PROJ.4 instead of building with the proj package
should be taken behind the barn and shot.

>> Searching for '#include [<"]projects.h[>"]' results in:
> 
> Still a list of around 10 projects. Not a huge impact in my mind. Does the Debian search tools have a way of determing the use of those packages? Download numbers or something like that?

There is popcon.debian.org to show how many systems (with popcon
reporting explicitly enabled) have the package installed and actually
user it (vote).

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From gdt at lexort.com  Fri Jun 23 15:02:39 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 23 Jun 2017 18:02:39 -0400
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <4700620.RiEcWKq6VW@even-i700> (Even Rouault's message of "Thu,
	22 Jun 2017 18:47:58 +0200")
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
Message-ID: <smud19u4b28.fsf@linuxpal.mit.edu>


Even Rouault <even.rouault at spatialys.com> writes:

> I'm wondering: is there a reason for having a new proj.h ? (we perhaps discussed that, but I 
> already forgot) Imagine that I want to write code that is compatible of old and new proj 
> versions (I'm pretty sure that a number of proj users will have to do that at some point). It 
> could be convenient to still include proj_api.h and depending on the value of PJ_VERSION 
> decide which API are available. Whereas if you have a new header, that make you also change 
> your autoconf/cmake logic detection of proj4.

Really, all proj-using programs have to be able to cope with both old
and new.   Whatever packaging system exists will have either old or new,
and then some other program will either work smoothly in both cases or
be a source of trouble for the packagers and maybe get dropped.

If that doesn't work, then the only other sane alternative is to have a
completely new namespace so that proj4 and say proj5 can be installed in
parallel and have no conflicting names.  But from the packging POV, I
see that as very much non-preferred, and an approach for when normal
compatibility doesn't work.

All that said, a new header for a new API does not sound bad, if
programs are expected to detect whcih and have ifdef, at least for now.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170623/58ecea0d/attachment.sig>

From gdt at lexort.com  Fri Jun 23 15:06:13 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 23 Jun 2017 18:06:13 -0400
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co> (Howard Butler's
	message of "Thu, 22 Jun 2017 14:55:40 -0500")
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
Message-ID: <smu8tki4awa.fsf@linuxpal.mit.edu>


Howard Butler <howard at hobu.co> writes:

> Ditching manually-constructed and out-of-date nmake for cmake seems
> fine to me (ooh, CMake gives me project files now!), but ditching
> autotools that has worked for people for decades does not. That change
> would ripple into packagers and the distros for little or no
> appreciable benefit.

Agreed and well said.

> I'm generally enthusiastic in spirit about the rest of your proposal,
> but I must say I'm very skeptical that we can actually *remove*
> anything -- especially headers with ambiguous public vs. private
> behavior that people now depend upon. We can add a new one, and we can
> make make a much cleaner and less ambiguous API, but I don't think we
> can take the old ones back. There's just too much momentum and
> calcification that is going to make it near impossible to go back and
> update external code to work with a new arrangement of such a
> foundational library such as Proj.4. I think we are stuck with the
> (API) sins of our forefathers, but I'd like to hear from more people
> who think we are not.

Also agreed.

Note that stuck comes in multiple flavors.  If the new API is clean and
sufficient, then any program using the old ones can be urged to upgrade.
Eventually, the old one can go away, but people should be thinking in
terms of multiple years for all depending projects to adjust and have
releases and have those be packaged in every packaging system.

Part of the point of deprecating the old API is getting to remove the
code, but from an abstraction violation POV, a lot of the benefit comes
as each dependency stops using it.


Finally, if there is a big new API, that calls for a version number that
makes this obvious.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170623/bd641136/attachment.sig>

From caress at mbari.org  Sat Jun 24 01:46:05 2017
From: caress at mbari.org (caress)
Date: Sat, 24 Jun 2017 01:46:05 -0700
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
Message-ID: <6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170624/53dcb4c9/attachment.html>

From knudsen.thomas at gmail.com  Sat Jun 24 01:57:11 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sat, 24 Jun 2017 10:57:11 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
	<6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
Message-ID: <CAH0YoEPBxu3ta-TqeExQ6qg2SRuM0XnZCKCkfqENK-LqibeGmg@mail.gmail.com>

Dave,

We are NOT changing the API of a core dependency of yours. We are adding a
new, more coherent one, in anticipation of a growing need of fully dynamic
datum transformations.

The new API in proj.h is orthogonal to the classic API in proj_api.h

I do, however, expect that you will need the functionality exposed in the
new API - if not now, then in a few years time.

/Thomas

2017-06-24 10:46 GMT+02:00 caress <caress at mbari.org>:

>
> As the architect of a package, I have similar feelings about anyone that
> changes the API of a core dependency.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170624/71e6dc37/attachment.html>

From sebastic at xs4all.nl  Sat Jun 24 02:25:21 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Sat, 24 Jun 2017 11:25:21 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
	<6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
Message-ID: <8cd8c122-f47e-747b-e43a-5be4cd6e1f68@xs4all.nl>

On 06/24/2017 10:46 AM, caress wrote:
>> On Jun 23, 2017, at 5:25 AM, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>
>> As the maintainer of the proj package in Debian I say that anyone using
>> an embedded copy of PROJ.4 instead of building with the proj package
>> should be taken behind the barn and shot.
> 
> That would be me that you are talking about shooting, with respect to MB-System:
> http://www.mbari.org/data/mbsystem

No, I was speaking about Debian package maintainers who need to use the
packaged dependencies. Upstream developers have more leeway because they
need to support other distributions and operating systems too. Using
embedded copies of packaged libraries can rarely be justified in Debian.

mbsystem is not included in Debian, although the Debian package is
included in OSGeo-Live, and hence could be considered for inclusion in
Debian GIS. There hasn't been much demand for the package, and no one
volunteered to maintain the package in Debian, so it's only in
OSGeo-Live for the time being.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From charles.karney at sri.com  Sun Jun 25 07:22:53 2017
From: charles.karney at sri.com (Charles Karney)
Date: Sun, 25 Jun 2017 10:22:53 -0400
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
Message-ID: <3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>

On 06/22/2017 03:55 PM, Howard Butler wrote:
> but ditching autotools that has worked for people for decades does not. 
> That change would ripple into packagers and the distros for little or no 
> appreciable benefit.
> 

I certainly appreciate the point that functionality (in this case,
autotools configuration) shouldn't be needlessly withdrawn.  However,
maintaining both cmake and autotools configurations entails ongoing
maintenance costs and I, for one, wish that autotools could be slowly
replaced by cmake.

The big benefit of cmake is that it's cross-platform.  Even though it
has its warts, it handles package dependencies in a (more or less)
uniform way, it's actively maintained, etc.

autotools is Unix only, depends on the m4 language that hardly anyone
knows, and the whole mess seems to be duct-taped together.  Its big
advantage is that it's been around for longer.

So my question is: aside for simple inertia (which I understand!), what
is stopping the Unix/Linux world adopting cmake?  Is there really
something about autotools that's superior to cmake for maintaining
packages on Linux distributions?

   --Charles


From kreve at sdfe.dk  Mon Jun 26 05:07:25 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 26 Jun 2017 12:07:25 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
	<3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA71CF03C@S000014.PROD.SITAD.DK>

Thanks everyone for joining in on the discussion after my initial test balloon of changing things with the next few releases of PROJ.4. I'll try to sum up the discussion so far as best as I can and adjust my proposal accordingly.

My initial proposal was to eradicate both projects.h and proj_api.h, in favor or the new proj.h API. On top of that I proposed that nmake and autotools will be removed over the next couple of years. The reason being that we are maintaining duplicate functionality  today and that some of the previous architectural choices are limiting development going forward. I get the overall feeling that everyone agrees that it would be nice to be able to change things, but there is also a substantial concern that removing functionality that potentially many users are relying upon will disrupt the geospatial software community too much. It is clear that most are in favor of keeping the proj_api.h API. The situation is less clear regarding projects.h, though concerns from package maintainers has been raised. The initial investigation reveals that in the Debian ecosphere there are around 10 projects that rely on projects.h, and around 50 that rely on proj_api.h.
Regarding the build systems, agreement seem to be reached about removing the nmake system. Autotools still seem to be preferred by most, although some have voiced their opinion that times are changing and CMake is the future.
I also suggested changing the versioning of PROJ.4, the idea being that we make a significant bump in major version number to 10.0.0. There has been few remarks on this, which I take as silent acceptance (or maybe this part was just overshadowed by the rest of the discussion).

Based on the above I have adjusted my initial proposal to the following:

- The next release will be PROJ.4 v. 10.0.0. Released in the middle of august.
- The new API in proj.h is introduced. Functions in proj.h will have their own new namespace: proj_*
- Nothing is removed in this version.
- In the release notes it is made clear that 
    + this will be the final version where projects.h is public.
    + proj_api.h will be freezed and no longer actively developed. It will be maintained for a few years still, 
       but new applications should use the new API and old applications should consider migrating their 
       software to the new API as well.
    + nmake will not be supported in the next release.

I then suggest that the next release will be in august 2018 and will have the following characteristics:

- A suitable bump in version number, either 11.0.0 or 10.1.0, whichever fits the changes at the time.
- projects.h is removed
- nmake support is removed
- Reiterate that proj_api.h is deprecated.
- Otherwise release what has developed during the previous year.

I think it is a fair compromise of staying backwards compatible and still being able to move forward. I am aware that some users will be affected by not having projects.h available. As the investigation of the Debian package system revealed the impact is likely not that big, and in my mind it brings more overall value that we can change thing behind the scenes compared to being locked in place as today. The new API should offer functionality that covers the use-cases where projects.h has been necessary to include up until now. 

How is the feeling about this model going forwards?

Thanks,
Kristian


From thy at 42.dk  Mon Jun 26 05:28:24 2017
From: thy at 42.dk (Kristian Thy)
Date: Mon, 26 Jun 2017 14:28:24 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA71CF03C@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
	<3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
	<2E885BB293AF0448A0181138489E9A0EA71CF03C@S000014.PROD.SITAD.DK>
Message-ID: <20170626122824.GA1648@42.dk>

On Mon, Jun 26, Kristian Evers wrote:
>     + proj_api.h will be freezed

Frozen. :)

> I then suggest that the next release will be in august 2018 and will
> have the following characteristics:
> 
> - A suitable bump in version number, either 11.0.0 or 10.1.0,
> whichever fits the changes at the time.

If you're serious about semver, it needs to be 11.0.0. Removing an old
API definitely breaks backwards compatibility.

/Kristian


From howard at hobu.co  Mon Jun 26 06:23:10 2017
From: howard at hobu.co (Howard Butler)
Date: Mon, 26 Jun 2017 08:23:10 -0500
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
	<3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
Message-ID: <AE7F65A3-3907-4BA0-9B69-5F0F5DD1B6B4@hobu.co>


> On Jun 25, 2017, at 9:22 AM, Charles Karney <charles.karney at sri.com> wrote:
> 
> On 06/22/2017 03:55 PM, Howard Butler wrote:
>> but ditching autotools that has worked for people for decades does not. That change would ripple into packagers and the distros for little or no appreciable benefit.
> 
> I certainly appreciate the point that functionality (in this case,
> autotools configuration) shouldn't be needlessly withdrawn.  However,
> maintaining both cmake and autotools configurations entails ongoing
> maintenance costs and I, for one, wish that autotools could be slowly
> replaced by cmake.

I don't like CMake's configuration language anymore than m4 to be honest, but I agree that CMake is a best-of-the-worst configuration tool, especially for cross-platform operations.

> 
> The big benefit of cmake is that it's cross-platform.  Even though it
> has its warts, it handles package dependencies in a (more or less)
> uniform way, it's actively maintained, etc.
> 
> autotools is Unix only, depends on the m4 language that hardly anyone
> knows, and the whole mess seems to be duct-taped together.  Its big
> advantage is that it's been around for longer.
> 
> So my question is: aside for simple inertia (which I understand!), what
> is stopping the Unix/Linux world adopting cmake?  Is there really
> something about autotools that's superior to cmake for maintaining
> packages on Linux distributions?

Superior is maybe an imprecise term. I think the situation is the distribution packagers have adapted all of their build configurations to dovetail with autoconf/automake's quirks, and CMake has to mimic these things to be a drop-in replacement. Cross-compilation targets, special configuration variables, and and output install locations are all areas where CMake doesn't always behave or can't be made to behave exactly in the same way as autotools. 

A library that already has autotools support, especially one as foundational as Proj.4 now is, has a ring of configuration logic implemented by all of the packaging system for the myriad of distros. Many have built that with our autotools configuration, and if we were to yank that away now, we are likely to disrupt them. If we had started with CMake from the beginning, this wouldn't have been a problem, of course.

Feedback from the distro packagers if this sentiment is contrary to reality would be appreciated. Maybe Proj.4 dropping autotools wouldn't be a big issue, but it would certainly ripple changes across a lot of distributions.

Howard





From schwehr at gmail.com  Mon Jun 26 07:45:21 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 26 Jun 2017 07:45:21 -0700
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <AE7F65A3-3907-4BA0-9B69-5F0F5DD1B6B4@hobu.co>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
	<3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
	<AE7F65A3-3907-4BA0-9B69-5F0F5DD1B6B4@hobu.co>
Message-ID: <CACmBxyv8HEy3UkrWYrGVpWHD2fQ2+2q3WpjwvKih+DTkrG6Q=g@mail.gmail.com>

IMHO,

+1 to hobu's comments.  autoconf mostly just works for fink packagers.
cmake works well less often. scons and others just hurt.

But, I spend most of my time in bazel where I have to do everything myself
and it's often easier that way.

On Mon, Jun 26, 2017 at 6:23 AM, Howard Butler <howard at hobu.co> wrote:

>
> > On Jun 25, 2017, at 9:22 AM, Charles Karney <charles.karney at sri.com>
> wrote:
> >
> > On 06/22/2017 03:55 PM, Howard Butler wrote:
> >> but ditching autotools that has worked for people for decades does not.
> That change would ripple into packagers and the distros for little or no
> appreciable benefit.
> >
> > I certainly appreciate the point that functionality (in this case,
> > autotools configuration) shouldn't be needlessly withdrawn.  However,
> > maintaining both cmake and autotools configurations entails ongoing
> > maintenance costs and I, for one, wish that autotools could be slowly
> > replaced by cmake.
>
> I don't like CMake's configuration language anymore than m4 to be honest,
> but I agree that CMake is a best-of-the-worst configuration tool,
> especially for cross-platform operations.
>
> >
> > The big benefit of cmake is that it's cross-platform.  Even though it
> > has its warts, it handles package dependencies in a (more or less)
> > uniform way, it's actively maintained, etc.
> >
> > autotools is Unix only, depends on the m4 language that hardly anyone
> > knows, and the whole mess seems to be duct-taped together.  Its big
> > advantage is that it's been around for longer.
> >
> > So my question is: aside for simple inertia (which I understand!), what
> > is stopping the Unix/Linux world adopting cmake?  Is there really
> > something about autotools that's superior to cmake for maintaining
> > packages on Linux distributions?
>
> Superior is maybe an imprecise term. I think the situation is the
> distribution packagers have adapted all of their build configurations to
> dovetail with autoconf/automake's quirks, and CMake has to mimic these
> things to be a drop-in replacement. Cross-compilation targets, special
> configuration variables, and and output install locations are all areas
> where CMake doesn't always behave or can't be made to behave exactly in the
> same way as autotools.
>
> A library that already has autotools support, especially one as
> foundational as Proj.4 now is, has a ring of configuration logic
> implemented by all of the packaging system for the myriad of distros. Many
> have built that with our autotools configuration, and if we were to yank
> that away now, we are likely to disrupt them. If we had started with CMake
> from the beginning, this wouldn't have been a problem, of course.
>
> Feedback from the distro packagers if this sentiment is contrary to
> reality would be appreciated. Maybe Proj.4 dropping autotools wouldn't be a
> big issue, but it would certainly ripple changes across a lot of
> distributions.
>
> Howard
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170626/0c0bd791/attachment.html>

From gdt at lexort.com  Mon Jun 26 17:55:32 2017
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 26 Jun 2017 20:55:32 -0400
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <AE7F65A3-3907-4BA0-9B69-5F0F5DD1B6B4@hobu.co> (Howard Butler's
	message of "Mon, 26 Jun 2017 08:23:10 -0500")
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<4700620.RiEcWKq6VW@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C85C3@S000014.PROD.SITAD.DK>
	<1550309.BqztdtIPCp@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<35D18BBC-C545-4A13-AFAD-692EF2246D5B@hobu.co>
	<3eb0ee26-0303-c69f-7d5c-54effad84c5b@sri.com>
	<AE7F65A3-3907-4BA0-9B69-5F0F5DD1B6B4@hobu.co>
Message-ID: <smupodqz1tn.fsf@linuxpal.mit.edu>


Howard Butler <howard at hobu.co> writes:

> A library that already has autotools support, especially one as
> foundational as Proj.4 now is, has a ring of configuration logic
> implemented by all of the packaging system for the myriad of
> distros. Many have built that with our autotools configuration, and if
> we were to yank that away now, we are likely to disrupt them. If we
> had started with CMake from the beginning, this wouldn't have been a
> problem, of course.
>
> Feedback from the distro packagers if this sentiment is contrary to
> reality would be appreciated. Maybe Proj.4 dropping autotools wouldn't
> be a big issue, but it would certainly ripple changes across a lot of
> distributions.

I look after proj in pkgsrc.  Agreed that working autoconf would be nice
to let be.

It's becoming less important because so many other things use cmake, but
cmake is enormous and can take a long time to build on a slowish
machine.  The difference with autoconf is that you need it on the
machihne building the package, not just the development publishing
machine.   So while I agree cmake is the least bad of the "this is
better than autotools" crowd, I see it as a regression.  But I have the
luxury of doing this for fun and not caring if anything works on
windows.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170626/ccf7c152/attachment.sig>

From caress at mbari.org  Mon Jun 26 06:06:53 2017
From: caress at mbari.org (caress)
Date: Mon, 26 Jun 2017 13:06:53 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <8cd8c122-f47e-747b-e43a-5be4cd6e1f68@xs4all.nl>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
	<6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
	<8cd8c122-f47e-747b-e43a-5be4cd6e1f68@xs4all.nl>
Message-ID: <F5EEC7D7-EAA7-4AA7-A392-77FD23F6B63C@mbari.org>

Bas,

Thanks. As I indicated, I think the utility of embedding Proj in MB-System is past, and I’ll be removing it.

Cheers,
Dave

> On Jun 24, 2017, at 9:25 AM, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> On 06/24/2017 10:46 AM, caress wrote:
>>> On Jun 23, 2017, at 5:25 AM, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>> 
>>> As the maintainer of the proj package in Debian I say that anyone using
>>> an embedded copy of PROJ.4 instead of building with the proj package
>>> should be taken behind the barn and shot.
>> 
>> That would be me that you are talking about shooting, with respect to MB-System:
>> http://www.mbari.org/data/mbsystem
> 
> No, I was speaking about Debian package maintainers who need to use the
> packaged dependencies. Upstream developers have more leeway because they
> need to support other distributions and operating systems too. Using
> embedded copies of packaged libraries can rarely be justified in Debian.
> 
> mbsystem is not included in Debian, although the Debian package is
> included in OSGeo-Live, and hence could be considered for inclusion in
> Debian GIS. There hasn't been much demand for the package, and no one
> volunteered to maintain the package in Debian, so it's only in
> OSGeo-Live for the time being.
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 

----------------------------------------------------
David W. Caress
Software Engineer

Monterey Bay Aquarium Research Institute
7700 Sandholdt Road
Moss Landing, CA 95039

caress at mbari.org
http://www.mbari.org/~caress/

Phone: 831-775-1775




From caress at mbari.org  Mon Jun 26 06:17:41 2017
From: caress at mbari.org (caress)
Date: Mon, 26 Jun 2017 13:17:41 +0000
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <CAH0YoEPBxu3ta-TqeExQ6qg2SRuM0XnZCKCkfqENK-LqibeGmg@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
	<6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
	<CAH0YoEPBxu3ta-TqeExQ6qg2SRuM0XnZCKCkfqENK-LqibeGmg@mail.gmail.com>
Message-ID: <5EB010C2-3E5F-47B7-9F07-53E0819FA786@mbari.org>

Thomas,

Thanks. Looking again at the discussion thread it should have been clear to me that the functions used by MB-System are not changing.

With respect to time dependence, we certainly are doing repeated seafloor surveys that resolve both lateral and vertical deformation. For instance, on Axial seamount our repeated 1-m-scale bathymetry surveys show ~10-m wide fissures that opened coincident with the 2011 and 2015 eruptions, and annual repeat surveys are measuring the several tens of cm of uplift each year associated with the inflation of the subsurface magma reservoir. However, I’m not sure how having time dependence in Proj can tie into our representing or modeling this deformation. Any advice would be welcome.

Cheers,
Dave



 
> On Jun 24, 2017, at 8:57 AM, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
> 
> Dave,
> 
> We are NOT changing the API of a core dependency of yours. We are adding a new, more coherent one, in anticipation of a growing need of fully dynamic datum transformations.
> 
> The new API in proj.h is orthogonal to the classic API in proj_api.h
> 
> I do, however, expect that you will need the functionality exposed in the new API - if not now, then in a few years time.
> 
> /Thomas
> 
> 2017-06-24 10:46 GMT+02:00 caress <caress at mbari.org>:
> 
> As the architect of a package, I have similar feelings about anyone that changes the API of a core dependency.
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

----------------------------------------------------
David W. Caress
Software Engineer

Monterey Bay Aquarium Research Institute
7700 Sandholdt Road
Moss Landing, CA 95039

caress at mbari.org
http://www.mbari.org/~caress/

Phone: 831-775-1775




From knudsen.thomas at gmail.com  Tue Jun 27 06:36:30 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 27 Jun 2017 15:36:30 +0200
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <5EB010C2-3E5F-47B7-9F07-53E0819FA786@mbari.org>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
	<6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
	<CAH0YoEPBxu3ta-TqeExQ6qg2SRuM0XnZCKCkfqENK-LqibeGmg@mail.gmail.com>
	<5EB010C2-3E5F-47B7-9F07-53E0819FA786@mbari.org>
Message-ID: <CAH0YoEPomx==9=UBfzXo6R-dH6hNK4+L7j_X4+mCzX-5zn8rhQ@mail.gmail.com>

Dave,

You need time tagging of observations in order to transform from a global
reference frame (WGS84, ITRF) to a plate fixed (NAD83, ETRS89).

For a next generation of dynamic datums, this will be even more of an
issue, although in ways that are not totally clear as yet.

Cheers,
Thomas

2017-06-26 15:17 GMT+02:00 caress <caress at mbari.org>:

> Thomas,
>
> Thanks. Looking again at the discussion thread it should have been clear
> to me that the functions used by MB-System are not changing.
>
> With respect to time dependence, we certainly are doing repeated seafloor
> surveys that resolve both lateral and vertical deformation. For instance,
> on Axial seamount our repeated 1-m-scale bathymetry surveys show ~10-m wide
> fissures that opened coincident with the 2011 and 2015 eruptions, and
> annual repeat surveys are measuring the several tens of cm of uplift each
> year associated with the inflation of the subsurface magma reservoir.
> However, I’m not sure how having time dependence in Proj can tie into our
> representing or modeling this deformation. Any advice would be welcome.
>
> Cheers,
> Dave
>
>
>
>
> > On Jun 24, 2017, at 8:57 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
> >
> > Dave,
> >
> > We are NOT changing the API of a core dependency of yours. We are adding
> a new, more coherent one, in anticipation of a growing need of fully
> dynamic datum transformations.
> >
> > The new API in proj.h is orthogonal to the classic API in proj_api.h
> >
> > I do, however, expect that you will need the functionality exposed in
> the new API - if not now, then in a few years time.
> >
> > /Thomas
> >
> > 2017-06-24 10:46 GMT+02:00 caress <caress at mbari.org>:
> >
> > As the architect of a package, I have similar feelings about anyone that
> changes the API of a core dependency.
> >
> > _______________________________________________
> > Proj mailing list
> > Proj at lists.maptools.org
> > http://lists.maptools.org/mailman/listinfo/proj
>
> ----------------------------------------------------
> David W. Caress
> Software Engineer
>
> Monterey Bay Aquarium Research Institute
> 7700 Sandholdt Road
> Moss Landing, CA 95039
>
> caress at mbari.org
> http://www.mbari.org/~caress/
>
> Phone: 831-775-1775
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170627/36f763c9/attachment.html>

From richard.greenwood at gmail.com  Wed Jun 28 18:03:04 2017
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Wed, 28 Jun 2017 19:03:04 -0600
Subject: [Proj] Coming releases of PROJ.4
In-Reply-To: <CAH0YoEPomx==9=UBfzXo6R-dH6hNK4+L7j_X4+mCzX-5zn8rhQ@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<1498204939686-5325292.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EA71CA583@S000014.PROD.SITAD.DK>
	<1657879.l7P0xZgSto@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71CA6E3@S000014.PROD.SITAD.DK>
	<fe519b4a-6141-0865-a559-c23dbef0835d@xs4all.nl>
	<2E885BB293AF0448A0181138489E9A0EA71CA9A1@S000014.PROD.SITAD.DK>
	<354058b1-0af9-8f67-d1a0-488e98784feb@xs4all.nl>
	<6B700B0C-8A0B-4518-A3E1-961A887FD4D6@mbari.org>
	<CAH0YoEPBxu3ta-TqeExQ6qg2SRuM0XnZCKCkfqENK-LqibeGmg@mail.gmail.com>
	<5EB010C2-3E5F-47B7-9F07-53E0819FA786@mbari.org>
	<CAH0YoEPomx==9=UBfzXo6R-dH6hNK4+L7j_X4+mCzX-5zn8rhQ@mail.gmail.com>
Message-ID: <CAHBySPZ=q3zzj8=sZ35NupWSCeGOsN02rDQ4v-YRgvx0Xf4hPA@mail.gmail.com>

I'm really excited to see these proposals and totally unqualified to
comment on the technical aspects. I'll only half seriously throw out my
thought on naming/numbering. Rather than "Proj.4 10.0" I think something
like "cs2cs version 2.0" would be better. Projections are just that and
that's all Proj.4 did under Gerald Evenden. Correctly if I'm wrong, but I
don't think Proj.4 had any sense of datums until Frank Wamerdam took on
maintenance of the project. Aside from Charles Karney's work on etmerc I
haven't seen much happening with projections, but datums are increasingly
important and will become even more so over at least the next decade.

Like I said, this is only a half serious suggestion, but maybe a more
creative mind than mine could come up with a name more accurately conveys
what Proj.4 currently is without completely divorcing itself from its
Proj.4's heritage.

When I started what is now called "proj4js" I named is "CSCS" as a play on
cs2cs as well as Client Side Coordinate Systems (client being browser
javascript) and that didn't get anywhere so the name recognition of "Proj"
name be more important than trying to convey its larger role.

Rich


On Tue, Jun 27, 2017 at 7:36 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> Dave,
>
> You need time tagging of observations in order to transform from a global
> reference frame (WGS84, ITRF) to a plate fixed (NAD83, ETRS89).
>
> For a next generation of dynamic datums, this will be even more of an
> issue, although in ways that are not totally clear as yet.
>
> Cheers,
> Thomas
>
> 2017-06-26 15:17 GMT+02:00 caress <caress at mbari.org>:
>
>> Thomas,
>>
>> Thanks. Looking again at the discussion thread it should have been clear
>> to me that the functions used by MB-System are not changing.
>>
>> With respect to time dependence, we certainly are doing repeated seafloor
>> surveys that resolve both lateral and vertical deformation. For instance,
>> on Axial seamount our repeated 1-m-scale bathymetry surveys show ~10-m wide
>> fissures that opened coincident with the 2011 and 2015 eruptions, and
>> annual repeat surveys are measuring the several tens of cm of uplift each
>> year associated with the inflation of the subsurface magma reservoir.
>> However, I’m not sure how having time dependence in Proj can tie into our
>> representing or modeling this deformation. Any advice would be welcome.
>>
>> Cheers,
>> Dave
>>
>>
>>
>>
>> > On Jun 24, 2017, at 8:57 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
>> wrote:
>> >
>> > Dave,
>> >
>> > We are NOT changing the API of a core dependency of yours. We are
>> adding a new, more coherent one, in anticipation of a growing need of fully
>> dynamic datum transformations.
>> >
>> > The new API in proj.h is orthogonal to the classic API in proj_api.h
>> >
>> > I do, however, expect that you will need the functionality exposed in
>> the new API - if not now, then in a few years time.
>> >
>> > /Thomas
>> >
>> > 2017-06-24 10:46 GMT+02:00 caress <caress at mbari.org>:
>> >
>> > As the architect of a package, I have similar feelings about anyone
>> that changes the API of a core dependency.
>> >
>> > _______________________________________________
>> > Proj mailing list
>> > Proj at lists.maptools.org
>> > http://lists.maptools.org/mailman/listinfo/proj
>>
>> ----------------------------------------------------
>> David W. Caress
>> Software Engineer
>>
>> Monterey Bay Aquarium Research Institute
>> 7700 Sandholdt Road
>> Moss Landing, CA 95039
>>
>> caress at mbari.org
>> http://www.mbari.org/~caress/
>>
>> Phone: 831-775-1775
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
Richard W. Greenwood, PLS
www.greenwoodmap.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170628/9fdfe623/attachment.html>

From howard at hobu.co  Thu Jun 29 13:28:27 2017
From: howard at hobu.co (Howard Butler)
Date: Thu, 29 Jun 2017 15:28:27 -0500
Subject: [Proj] Proj4.org PDFs now being generated
Message-ID: <85AC8F08-DCD0-4475-A026-95A98533B766@hobu.co>

All,

I have updated the documentation build configuration to build a LaTeX-generated PDF in addition to the website every time it refreshes. This can be found at https://raw.githubusercontent.com/OSGeo/proj.4/gh-pages/proj4.pdf <https://raw.githubusercontent.com/OSGeo/proj.4/gh-pages/proj4.pdf> and it is linked on the front page of the HTML website. It would be useful to steal LaTeX builder configuration from the MapServer or PDAL projects, which both have quite nice PDFs being generated from Sphinx in a similar approach. 

The Sphinx+LaTeX combo can be a little bit finicky. First, SVG isn't supported, so we need to be feeding PNGs or JPEGs to it. If we switch to SVG for the example renderings, we will have to workflow the conversion to PNG as part of the documentation build process for the LaTeX builder. Second, unicode, math expressions, and heading levels can all cause it to blow up in unexpected ways. The documentation builder should error with a marginally helpful error message that you might have to try/catch for a while to figure out how to make happy. You can build the PDF using Docker yourself. See the build_docs.sh script in the ./travis directory for instructions.

Howard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170629/83498947/attachment.html>

From aashish24 at gmail.com  Thu Jun 29 15:27:03 2017
From: aashish24 at gmail.com (Aashish Chaudhary)
Date: Thu, 29 Jun 2017 22:27:03 +0000
Subject: [Proj] Coming releases of PR
In-Reply-To: <1B02853B-C4D2-4A4C-A0A0-FE0A2248ADEF@hobu.co>
References: <2E885BB293AF0448A0181138489E9A0EA71C81E1@S000014.PROD.SITAD.DK>
	<2E885BB293AF0448A0181138489E9A0EA71C8738@S000014.PROD.SITAD.DK>
	<d72e858f-7f71-e67d-689a-90bff121affd@xs4all.nl>
	<19979704.100nT1eDzF@even-i700>
	<2E885BB293AF0448A0181138489E9A0EA71C89F7@S000014.PROD.SITAD.DK>
	<1B02853B-C4D2-4A4C-A0A0-FE0A2248ADEF@hobu.co>
Message-ID: <CAEJcn9OSw_=BzMHfHLO_5m9J1p92N8Zo+K6eOX5J5kLoqsHC_w@mail.gmail.com>

This is a very interesting discussion. If I can chime in, I agree with
general sentiment that maintaining only one build system is less
maintenance and easier to document. I as one of the users of CMake and also
one of the developers of CMake, have used CMake in some very complicated
ways. If there are any roadblocks  that exists then I am more happy to
discuss them and see if we can push changes to CMake and make then work for
 Proj4.

- Aashish

On Thu, Jun 22, 2017 at 6:34 PM Howard Butler <howard at hobu.co> wrote:

>
> On Jun 22, 2017, at 3:57 PM, Kristian Evers <kreve at sdfe.dk> wrote:
>
> > Ditching manually-constructed and out-of-date nmake for cmake seems
> fine to me (ooh, CMake gives me project files now!), but ditching autotools
> that has worked for people for decades does not. That change would ripple
> into packagers and the distros for little or no appreciable benefit.
>
> I won’t claim to be an expert  in CMake, quite the opposite really, but I
> was under the impression that it  would be possible to set up CMake in a
> way so that it mimics the autotools behavior exactly when UNIX makefiles
> are generated. I am completely wrong here?
> The benefit would be to limit the amount of code we have to maintain. It
> would only benefit us, true, but it would also free time that can be spend
> improving the overall project instead of maintaining status quo. I don’t
> feel too strongly about this, I just wanted to throw it out there while I
> was at it.
>
>
> CMake can produce a somewhat passable facsimile to autotools behavior, but
> there are many nuances and autotools features that CMake doesn't support or
> support in the same way. These things matter to the distribution packagers
> and maintainers, and I've found it's often more trouble to make CMake
> behave the way they need than it is to just provide an autotools layout
> implementation. That situation in 2017 is better than it was in 2008 when I
> started using CMake, but it is still a friction point.
>
> > but I must say I'm very skeptical that we can actually *remove*
> anything -- especially headers with ambiguous public vs. private behavior
> that people now depend upon
>
> I get that. On the other hand I fear that we will be locked in place
> forever if we don’t allow breaking stuff once in a while. If at least we
> can get away with not exposing projects.h I think there will be much more
> room to play in the future. I hope that Even’s assessment about it not
> being used much is true.
>
>
> Successfully burying projects.h would be enough to declare victory, if we
> can do so without upsetting too much. Even's analysis shows that might be
> possible.
>
> > We need to be delicate about changing things for a library such as
> Proj.4 only for the sake of being "better". This is an unfortunate
> consequence of maintaining a library that everything ultimately uses (and
> started using 20+ years ago).
>
> Perhaps the ambition should be to BE MUCH BETTER than previous versions on
> PROJ.4. So much better that other projects will benefit hugely from using
> the new API and update their codebase voluntarily. Eventually the problem
> will solve itself. I already think we are on the right track.
>
>
> #1: "It's ugly, but it works, it will stay working, and it requires no
> more software development"
> #2: "It works more smoothly, but you have to write/update software to use
> it, and it does the same thing as #1"
>
> There must be new features that incentivize the work required to do #2.
> For the sake of itself is not enough. Maybe access to transformation
> pipelines are enough for that, I don't know. It's a frustrating reality of
> a very old and well-established software project with lots of
> implementations. The success of Proj.4 has indeed locked itself in place.
>
>
>
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170629/416a41be/attachment.html>

