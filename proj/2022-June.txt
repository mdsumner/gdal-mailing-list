From roger.oberholtzer at gmail.com  Wed Jun  1 02:49:21 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Wed, 1 Jun 2022 11:49:21 +0200
Subject: [PROJ] Calculating meridian convergence
Message-ID: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>

I am trying to determine the meridian convergence for a point. The
projection is defined as:

PJ *proj = proj_normalize_for_visualization(0,
           proj_create_crs_to_crs(0, "EPSG:4326", "EPSG:3006", 0));

The source lat/longs are wgs84 from a GPS receiver. The projection is
Sweref99. That is working just fine. In my case, the LONG/LAT are in
degrees.

       PJ_COORD ivals, vals;
       vals.xyz.x = LONG;
       vals.xyz.y = LAT;
       vals.xyz.z = HEIGHT;
       ivals = proj_trans(tinfo->Proj, PJ_FWD, vals);

So far, so good.

I need to do some rotations of the projected points. Towards that end,
I would like to determine the meridian convergence. I am expecting to
use this as a correction to a yaw value that my GPS receiver also
provides via an integrated IMU.

       PJ_FACTORS factors;

       vals.lp.lam = proj_torad(LONG);
       vals.lp.phi = proj_torad(LAT);

       factors = proj_factors(tinfo->Proj, vals);

I must be doing something incorrectly, as I get similar results for
data from different locations. Or I am missing a step. Or I am just
doing something totally wrong.

Data from west of the Sweref99 central meridian (convergence should be
-1.56713? according to the Swedish authority):

LAT 55.600783
LONG 13.100962
ALT 13.463000
E 380351.081178
N 6163285.609844
angular_distortion 0.567652
meridian_parallel_angle 1.570796
meridian_convergence -0.004468

Data from east of the Sweref99 central meridian (convergence should be
0.40007? according to the Swedish authority):

LAT 58.618118
LONG 15.468616
ALT 79.686000
E 527220.410693
N 6497625.569591
angular_distortion 0.645715
meridian_parallel_angle 1.570796
meridian_convergence -0.004696

angular_distortion, meridian_parallel_angle, and meridian_convergence
are the values returned by proj_factors().

This is with proj 8.2.1 on Linux. It is generally working fine. It's just this.

Any pointers would be greatly appreciated.

-- 
Roger Oberholtzer

From torill.kjosnes at gmail.com  Wed Jun  1 04:03:01 2022
From: torill.kjosnes at gmail.com (=?UTF-8?Q?Torill_Kj=C3=B8snes_Gabrielsen?=)
Date: Wed, 1 Jun 2022 13:03:01 +0200
Subject: [PROJ] Affine transformation for engineering crs
Message-ID: <CAE49LKyiPEfTG6RYJ-eCXaM3MGCocS3N61V7W8=CToJu3Y6w0Q@mail.gmail.com>

Hi,



I have an engineering crs that I would like to transform with an affine
transformation.



The transformation for the crs is defined in 9624:

https://epsg.org/coord-operation-method_9624/Affine-parametric-transformation.html



The coordinate transformation parameter values are:

A0 = 82357.457 metres

A1 = 0.304794369

A2 = 0.000015417425

B0 = 28091.324 metres

B1 = -0.000015417425

B2 = 0.304794369



Is there anyone who can help me address which parameters correspond to those
defined in PROJ affine?



A0 = +xoff?

A1 = +s11?

A2 = ?

B0 = +yoff?

B1 = +s22?

B2 = ?



Regards,

Torill Gabrielsen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220601/b1993d3b/attachment.htm>

From knudsen.thomas at gmail.com  Wed Jun  1 04:09:44 2022
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 1 Jun 2022 13:09:44 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
Message-ID: <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>

Hello Roger,

If you use the "proj" command line application, you get the expected value:

$ echo 13.100962  55.600783 | proj -V +proj=tmerc +lon_0=15 +k_0=0.9996
+x_0=500000
#Transverse Mercator
#       Cyl, Sph&Ell
#       approx
# +proj=tmerc +lon_0=15 +k_0=0.9996 +x_0=500000 +break_cs2cs_recursion
# +ellps=GRS80
#Final Earth figure: ellipsoid
#  Major axis (a): 6378137.000
#  1/flattening: 298.257222
#  squared eccentricity: 0.006694380023

Longitude: 13d6'3.463"E [ 13.100962 ]
Latitude:  55d36'2.819"N [ 55.600783 ]
Easting (x):   380351.08
Northing (y):  6163285.60
Meridian scale (h) : 0.99977560  ( -0.02244 % error )
Parallel scale (k) : 0.99977560  ( -0.02244 % error )
Areal scale (s):     0.99955126  ( -0.04487 % error )
Angular distortion (w): 0.000
Meridian/Parallel angle: 90.00000
Convergence : -1d34'1.635" [ -1.56712087 ]
Max-min (Tissot axis a-b) scale error: 0.99978 0.99978

The differing results from your code may be a matter of your PR
instantiation leading to taking the code branch in
https://github.com/OSGeo/PROJ/blob/ced8793aa170dd4792f331633e62726808a2e75d/src/4D_api.cpp#L2469

Could you try to instantiate a plain, classic PROJ PJ using
    proj_create("proj=tmerc lon_0=15 k_0=0.9996 x_0=500000 ellps=GRS80"),
then calling proj_factors with that as input. It should send you through
the code branch at
https://github.com/OSGeo/PROJ/blob/ced8793aa170dd4792f331633e62726808a2e75d/src/4D_api.cpp#L2499
which may (or may not) give you the result you expect.

If it doesn't, please file a ticket over at
https://github.com/OSGeo/PROJ/issues

/Thomas

Den ons. 1. jun. 2022 kl. 11.49 skrev Roger Oberholtzer <
roger.oberholtzer at gmail.com>:

> I am trying to determine the meridian convergence for a point. The
> projection is defined as:
>
> PJ *proj = proj_normalize_for_visualization(0,
>            proj_create_crs_to_crs(0, "EPSG:4326", "EPSG:3006", 0));
>
> The source lat/longs are wgs84 from a GPS receiver. The projection is
> Sweref99. That is working just fine. In my case, the LONG/LAT are in
> degrees.
>
>        PJ_COORD ivals, vals;
>        vals.xyz.x = LONG;
>        vals.xyz.y = LAT;
>        vals.xyz.z = HEIGHT;
>        ivals = proj_trans(tinfo->Proj, PJ_FWD, vals);
>
> So far, so good.
>
> I need to do some rotations of the projected points. Towards that end,
> I would like to determine the meridian convergence. I am expecting to
> use this as a correction to a yaw value that my GPS receiver also
> provides via an integrated IMU.
>
>        PJ_FACTORS factors;
>
>        vals.lp.lam = proj_torad(LONG);
>        vals.lp.phi = proj_torad(LAT);
>
>        factors = proj_factors(tinfo->Proj, vals);
>
> I must be doing something incorrectly, as I get similar results for
> data from different locations. Or I am missing a step. Or I am just
> doing something totally wrong.
>
> Data from west of the Sweref99 central meridian (convergence should be
> -1.56713? according to the Swedish authority):
>
> LAT 55.600783
> LONG 13.100962
> ALT 13.463000
> E 380351.081178
> N 6163285.609844
> angular_distortion 0.567652
> meridian_parallel_angle 1.570796
> meridian_convergence -0.004468
>
> Data from east of the Sweref99 central meridian (convergence should be
> 0.40007? according to the Swedish authority):
>
> LAT 58.618118
> LONG 15.468616
> ALT 79.686000
> E 527220.410693
> N 6497625.569591
> angular_distortion 0.645715
> meridian_parallel_angle 1.570796
> meridian_convergence -0.004696
>
> angular_distortion, meridian_parallel_angle, and meridian_convergence
> are the values returned by proj_factors().
>
> This is with proj 8.2.1 on Linux. It is generally working fine. It's just
> this.
>
> Any pointers would be greatly appreciated.
>
> --
> Roger Oberholtzer
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220601/ded7165a/attachment.htm>

From even.rouault at spatialys.com  Wed Jun  1 04:27:21 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 1 Jun 2022 13:27:21 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
Message-ID: <831fd70c-d4a8-330b-cbfb-ef51329102a1@spatialys.com>

Roger,

I believe the issue here is that you use a transformation pipeline that 
expects input coordinates to be in degrees.

You should just use your code with

PJ* proj = proj_create(0, "EPSG:3006");

Even

Le 01/06/2022 ? 11:49, Roger Oberholtzer a ?crit?:
> I am trying to determine the meridian convergence for a point. The
> projection is defined as:
>
> PJ *proj = proj_normalize_for_visualization(0,
>             proj_create_crs_to_crs(0, "EPSG:4326", "EPSG:3006", 0));
>
> The source lat/longs are wgs84 from a GPS receiver. The projection is
> Sweref99. That is working just fine. In my case, the LONG/LAT are in
> degrees.
>
>         PJ_COORD ivals, vals;
>         vals.xyz.x = LONG;
>         vals.xyz.y = LAT;
>         vals.xyz.z = HEIGHT;
>         ivals = proj_trans(tinfo->Proj, PJ_FWD, vals);
>
> So far, so good.
>
> I need to do some rotations of the projected points. Towards that end,
> I would like to determine the meridian convergence. I am expecting to
> use this as a correction to a yaw value that my GPS receiver also
> provides via an integrated IMU.
>
>         PJ_FACTORS factors;
>
>         vals.lp.lam = proj_torad(LONG);
>         vals.lp.phi = proj_torad(LAT);
>
>         factors = proj_factors(tinfo->Proj, vals);
>
> I must be doing something incorrectly, as I get similar results for
> data from different locations. Or I am missing a step. Or I am just
> doing something totally wrong.
>
> Data from west of the Sweref99 central meridian (convergence should be
> -1.56713? according to the Swedish authority):
>
> LAT 55.600783
> LONG 13.100962
> ALT 13.463000
> E 380351.081178
> N 6163285.609844
> angular_distortion 0.567652
> meridian_parallel_angle 1.570796
> meridian_convergence -0.004468
>
> Data from east of the Sweref99 central meridian (convergence should be
> 0.40007? according to the Swedish authority):
>
> LAT 58.618118
> LONG 15.468616
> ALT 79.686000
> E 527220.410693
> N 6497625.569591
> angular_distortion 0.645715
> meridian_parallel_angle 1.570796
> meridian_convergence -0.004696
>
> angular_distortion, meridian_parallel_angle, and meridian_convergence
> are the values returned by proj_factors().
>
> This is with proj 8.2.1 on Linux. It is generally working fine. It's just this.
>
> Any pointers would be greatly appreciated.
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.


From roger.oberholtzer at gmail.com  Wed Jun  1 06:02:02 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Wed, 1 Jun 2022 15:02:02 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <831fd70c-d4a8-330b-cbfb-ef51329102a1@spatialys.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <831fd70c-d4a8-330b-cbfb-ef51329102a1@spatialys.com>
Message-ID: <CANkOqwMwkJk48rWaW5eoCx9b4yG0-UhHSF-SeTZtrKb_L=YEFQ@mail.gmail.com>

On Wed, Jun 1, 2022 at 1:27 PM Even Rouault <even.rouault at spatialys.com> wrote:
>
> Roger,
>
> I believe the issue here is that you use a transformation pipeline that
> expects input coordinates to be in degrees.
>
> You should just use your code with
>
> PJ* proj = proj_create(0, "EPSG:3006");

I tried that, and it did not help:

proj_create(0, "EPSG:3006");

LAT 55.600783
LONG 13.100962
angular_distortion 3.141593
meridian_parallel_angle -89.999999
meridian_convergence -1.543445

LAT 58.618118
LONG 15.468616
angular_distortion 3.141593
meridian_parallel_angle -89.999999
meridian_convergence -1.577779

I also tried a suggestion in a different answer here, and it did not help:

proj_create(0, "proj=tmerc lon_0=15 k_0=0.9996 x_0=500000 ellps=GRS80");

LAT 55.600783
LONG 13.100962
angular_distortion 0.000000
meridian_parallel_angle 89.999999
meridian_convergence -0.027351

LAT 58.618118
LONG 15.468616
angular_distortion 0.000000
meridian_parallel_angle 90.000000
meridian_convergence 0.006982

Both methods gave different results.

I think the calculation should be

? = arctan [tan (? - ?0) ? sin ?]

where

? is the longitude
?0 is the central meridian of the projection
? is the latitude

So, an alternative question is: is there a way to find the central
meridian in a PJ CRS? Or wherever I would look for it in proj?

>
> Even
>
> Le 01/06/2022 ? 11:49, Roger Oberholtzer a ?crit :
> > I am trying to determine the meridian convergence for a point. The
> > projection is defined as:
> >
> > PJ *proj = proj_normalize_for_visualization(0,
> >             proj_create_crs_to_crs(0, "EPSG:4326", "EPSG:3006", 0));
> >
> > The source lat/longs are wgs84 from a GPS receiver. The projection is
> > Sweref99. That is working just fine. In my case, the LONG/LAT are in
> > degrees.
> >
> >         PJ_COORD ivals, vals;
> >         vals.xyz.x = LONG;
> >         vals.xyz.y = LAT;
> >         vals.xyz.z = HEIGHT;
> >         ivals = proj_trans(tinfo->Proj, PJ_FWD, vals);
> >
> > So far, so good.
> >
> > I need to do some rotations of the projected points. Towards that end,
> > I would like to determine the meridian convergence. I am expecting to
> > use this as a correction to a yaw value that my GPS receiver also
> > provides via an integrated IMU.
> >
> >         PJ_FACTORS factors;
> >
> >         vals.lp.lam = proj_torad(LONG);
> >         vals.lp.phi = proj_torad(LAT);
> >
> >         factors = proj_factors(tinfo->Proj, vals);
> >
> > I must be doing something incorrectly, as I get similar results for
> > data from different locations. Or I am missing a step. Or I am just
> > doing something totally wrong.
> >
> > Data from west of the Sweref99 central meridian (convergence should be
> > -1.56713? according to the Swedish authority):
> >
> > LAT 55.600783
> > LONG 13.100962
> > ALT 13.463000
> > E 380351.081178
> > N 6163285.609844
> > angular_distortion 0.567652
> > meridian_parallel_angle 1.570796
> > meridian_convergence -0.004468
> >
> > Data from east of the Sweref99 central meridian (convergence should be
> > 0.40007? according to the Swedish authority):
> >
> > LAT 58.618118
> > LONG 15.468616
> > ALT 79.686000
> > E 527220.410693
> > N 6497625.569591
> > angular_distortion 0.645715
> > meridian_parallel_angle 1.570796
> > meridian_convergence -0.004696
> >
> > angular_distortion, meridian_parallel_angle, and meridian_convergence
> > are the values returned by proj_factors().
> >
> > This is with proj 8.2.1 on Linux. It is generally working fine. It's just this.
> >
> > Any pointers would be greatly appreciated.
> >
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>


-- 
Roger Oberholtzer

From roger.oberholtzer at gmail.com  Wed Jun  1 08:17:36 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Wed, 1 Jun 2022 17:17:36 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CANkOqwMwkJk48rWaW5eoCx9b4yG0-UhHSF-SeTZtrKb_L=YEFQ@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <831fd70c-d4a8-330b-cbfb-ef51329102a1@spatialys.com>
 <CANkOqwMwkJk48rWaW5eoCx9b4yG0-UhHSF-SeTZtrKb_L=YEFQ@mail.gmail.com>
Message-ID: <CANkOqwOcnzkezd6dC5TMGKcZZU0MNQG_GoOQAdDXdp38MKxnBQ@mail.gmail.com>

It seems I made a mistake in my checking of the calculation.

It is the case that this works:

     proj_create(0, "proj=tmerc lon_0=15 k_0=0.9996 x_0=500000 ellps=GRS80");

and this does not work:

     proj_create(0, "EPSG:3006");

I don't know how I made that mistake. Sorry.

The thing is, we have been moving to using the EPSG codes in our
software. For various reasons. Mainly it is more general, and users
understand these codes.


Is this (using EPSG codes) something that is expected to work in this
context, but is just currently incorrect? Or is this something that
will probably never work?




On Wed, Jun 1, 2022 at 3:02 PM Roger Oberholtzer
<roger.oberholtzer at gmail.com> wrote:
>
> On Wed, Jun 1, 2022 at 1:27 PM Even Rouault <even.rouault at spatialys.com> wrote:
> >
> > Roger,
> >
> > I believe the issue here is that you use a transformation pipeline that
> > expects input coordinates to be in degrees.
> >
> > You should just use your code with
> >
> > PJ* proj = proj_create(0, "EPSG:3006");
>
> I tried that, and it did not help:
>
> proj_create(0, "EPSG:3006");
>
> LAT 55.600783
> LONG 13.100962
> angular_distortion 3.141593
> meridian_parallel_angle -89.999999
> meridian_convergence -1.543445
>
> LAT 58.618118
> LONG 15.468616
> angular_distortion 3.141593
> meridian_parallel_angle -89.999999
> meridian_convergence -1.577779
>
> I also tried a suggestion in a different answer here, and it did not help:
>
> proj_create(0, "proj=tmerc lon_0=15 k_0=0.9996 x_0=500000 ellps=GRS80");
>
> LAT 55.600783
> LONG 13.100962
> angular_distortion 0.000000
> meridian_parallel_angle 89.999999
> meridian_convergence -0.027351
>
> LAT 58.618118
> LONG 15.468616
> angular_distortion 0.000000
> meridian_parallel_angle 90.000000
> meridian_convergence 0.006982
>
> Both methods gave different results.
>
> I think the calculation should be
>
> ? = arctan [tan (? - ?0) ? sin ?]
>
> where
>
> ? is the longitude
> ?0 is the central meridian of the projection
> ? is the latitude
>
> So, an alternative question is: is there a way to find the central
> meridian in a PJ CRS? Or wherever I would look for it in proj?
>
> >
> > Even
> >
> > Le 01/06/2022 ? 11:49, Roger Oberholtzer a ?crit :
> > > I am trying to determine the meridian convergence for a point. The
> > > projection is defined as:
> > >
> > > PJ *proj = proj_normalize_for_visualization(0,
> > >             proj_create_crs_to_crs(0, "EPSG:4326", "EPSG:3006", 0));
> > >
> > > The source lat/longs are wgs84 from a GPS receiver. The projection is
> > > Sweref99. That is working just fine. In my case, the LONG/LAT are in
> > > degrees.
> > >
> > >         PJ_COORD ivals, vals;
> > >         vals.xyz.x = LONG;
> > >         vals.xyz.y = LAT;
> > >         vals.xyz.z = HEIGHT;
> > >         ivals = proj_trans(tinfo->Proj, PJ_FWD, vals);
> > >
> > > So far, so good.
> > >
> > > I need to do some rotations of the projected points. Towards that end,
> > > I would like to determine the meridian convergence. I am expecting to
> > > use this as a correction to a yaw value that my GPS receiver also
> > > provides via an integrated IMU.
> > >
> > >         PJ_FACTORS factors;
> > >
> > >         vals.lp.lam = proj_torad(LONG);
> > >         vals.lp.phi = proj_torad(LAT);
> > >
> > >         factors = proj_factors(tinfo->Proj, vals);
> > >
> > > I must be doing something incorrectly, as I get similar results for
> > > data from different locations. Or I am missing a step. Or I am just
> > > doing something totally wrong.
> > >
> > > Data from west of the Sweref99 central meridian (convergence should be
> > > -1.56713? according to the Swedish authority):
> > >
> > > LAT 55.600783
> > > LONG 13.100962
> > > ALT 13.463000
> > > E 380351.081178
> > > N 6163285.609844
> > > angular_distortion 0.567652
> > > meridian_parallel_angle 1.570796
> > > meridian_convergence -0.004468
> > >
> > > Data from east of the Sweref99 central meridian (convergence should be
> > > 0.40007? according to the Swedish authority):
> > >
> > > LAT 58.618118
> > > LONG 15.468616
> > > ALT 79.686000
> > > E 527220.410693
> > > N 6497625.569591
> > > angular_distortion 0.645715
> > > meridian_parallel_angle 1.570796
> > > meridian_convergence -0.004696
> > >
> > > angular_distortion, meridian_parallel_angle, and meridian_convergence
> > > are the values returned by proj_factors().
> > >
> > > This is with proj 8.2.1 on Linux. It is generally working fine. It's just this.
> > >
> > > Any pointers would be greatly appreciated.
> > >
> > --
> > http://www.spatialys.com
> > My software is free, but my time generally not.
> >
>
>
> --
> Roger Oberholtzer



-- 
Roger Oberholtzer

From oreilly at mbari.org  Wed Jun  1 11:29:21 2022
From: oreilly at mbari.org (Tom O'Reilly)
Date: Wed, 1 Jun 2022 11:29:21 -0700 (PDT)
Subject: [PROJ] cmake find_package() fails to find PROJ6 installed with
 MacPorts
Message-ID: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>

I'm running cmake 3.22.4 on MacOS 11.6. 
I installed proj6 with " sudo port proj6" which looks to be [ https://proj.org/install.html | the?proj-recommended way to install with MacPorts ] . I see the proj6 include/ and lib/ subdirectories in /opt/local/lib/proj6, and set PROJ6_ROOT to /opt/local/lib/proj6 accordingly in my applications's CMakeLists.txt. 

But CmakeLists.txt is unable to find proj on the system. Th e [ https://proj.org/development/cmake.html | proj page also says ] : 





The recommended way to use the PROJ library in a CMake project is to link to the imported library target PROJ::proj provide by the CMake configuration which comes with the library. Typical usage is: 




find_package(PROJ CONFIG REQUIRED) 




However find_package() cannot find PROJ or PROJ6 on my system - find_package() exits with this message: 

CMake Error at CMakeLists.txt:95 (find_package): 

Could not find a package configuration file provided by "PROJ6" with any of 

the following names: 



PROJ6Config.cmake 

proj6-config.cmake 




Moreover I do not see any files named "proj*.cmake" in /opt/local - somehow installing proj6 with MacPorts did not include this package information? What am I doing wrong? 

Any help much appreciated! 




Thanks 

Tom 


-------------------------------------------------- 
Thomas C. O'Reilly 
Monterey Bay Aquarium Research Institute 
7700 Sandholdt Road 
Moss Landing, California 95039-9644 
831-775-1766 (voice) 
831-775-1620 (FAX) 
oreilly at mbari.org (email) 
http://www.mbari.org (World-wide Web) 

"The machine does not isolate us from the great mysteries 
of nature, but plunges us more deeply into them." 

- ANTOINE DE SAINT-EXUPERY 
"Wind, Sand, and Stars" (1939) 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220601/70c40c72/attachment-0001.htm>

From even.rouault at spatialys.com  Wed Jun  1 11:39:55 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 1 Jun 2022 20:39:55 +0200
Subject: [PROJ] cmake find_package() fails to find PROJ6 installed with
 MacPorts
In-Reply-To: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
References: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
Message-ID: <69c4c636-1ca7-b9be-6b2b-46a8ff6107d3@spatialys.com>

Tom,

You should try to use a more recent version than PROJ 6.x (not sure what 
"proj6" corresponds to in MacPorts). I believe PROJ Config support was 
only added in PROJ > 6, or can only be relied upon in those later versions

Even

Le 01/06/2022 ? 20:29, Tom O'Reilly a ?crit?:
> I'm running cmake 3.22.4 on MacOS 11.6.
> I installed proj6 with "sudo port proj6" which looks to bethe 
> proj-recommended way to install with MacPorts 
> <https://proj.org/install.html>. I see the proj6 include/ and lib/ 
> subdirectories in /opt/local/lib/proj6, and set PROJ6_ROOT to 
> /opt/local/lib/proj6 accordingly in my applications's CMakeLists.txt.
>
> But CmakeLists.txt is unable to find proj on the system. The proj page 
> also says <https://proj.org/development/cmake.html>:
>
>
> The recommended way to use the PROJ library in a CMake project is to 
> link to the imported library target PROJ::projprovide by the CMake 
> configuration which comes with the library. Typical usage is:
>
>
> find_package(PROJ CONFIG REQUIRED)
>
>
> However find_package() cannot find PROJ or PROJ6 on my system - 
> find_package() exits with this message:
>
> CMake Error at CMakeLists.txt:95 (find_package):
>
> ? Could not find a package configuration file provided by "PROJ6" with 
> any of
>
> ? the following names:
>
> ? ? PROJ6Config.cmake
>
> ? ? proj6-config.cmake
>
>
> Moreover I do not see any files named "proj*.cmake" in /opt/local - 
> somehow installing proj6 with MacPorts did not include this package 
> information? What am I doing wrong?
>
> Any help much appreciated!
>
>
> Thanks
>
> Tom
>
>
> --------------------------------------------------
> Thomas C. O'Reilly
> Monterey Bay Aquarium Research Institute
> 7700 Sandholdt Road
> Moss Landing, California 95039-9644
> 831-775-1766 (voice)
> 831-775-1620 (FAX)
> oreilly at mbari.org (email)
> http://www.mbari.org (World-wide Web)
>
> "The machine does not isolate us from the great mysteries
> ?of nature, but plunges us more deeply into them."
>
> ?? - ANTOINE DE SAINT-EXUPERY
> ?? ? "Wind, Sand, and Stars" (1939)
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220601/adeb081a/attachment.htm>

From sebastic at xs4all.nl  Wed Jun  1 11:45:36 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 1 Jun 2022 20:45:36 +0200
Subject: [PROJ] cmake find_package() fails to find PROJ6 installed with
 MacPorts
In-Reply-To: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
References: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
Message-ID: <1fdf8bcb-4944-36c0-162a-41f15e910a7f@xs4all.nl>

On 6/1/22 20:29, Tom O'Reilly wrote:
> Moreover I do not see any files named "proj*.cmake" in /opt/local - somehow installing proj6 with MacPorts did not include this package information?

The proj6 port is built using autotools, which doesn't include the 
installation of the CMake bits:

  https://github.com/macports/macports-ports/blob/master/gis/proj6/Portfile

The proj9 port uses CMake which should install the proj CMake files:

  https://github.com/macports/macports-ports/blob/master/gis/proj9/Portfile

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From oreilly at mbari.org  Wed Jun  1 12:55:31 2022
From: oreilly at mbari.org (Tom O'Reilly)
Date: Wed, 1 Jun 2022 12:55:31 -0700 (PDT)
Subject: [PROJ] cmake find_package() fails to find PROJ6 installed with
 MacPorts
In-Reply-To: <69c4c636-1ca7-b9be-6b2b-46a8ff6107d3@spatialys.com>
References: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
 <69c4c636-1ca7-b9be-6b2b-46a8ff6107d3@spatialys.com>
Message-ID: <716385892.104671710.1654113331443.JavaMail.zimbra@mbari.org>

Thanks Even. 
My project needs proj6, but as a test of cmake I installed proj9 with MacPorts - and find_package(Proj9 CONFIG REQUIRED) fails just as before. 
Question - if the installed proj9 provides CONFIG support, I presume there is a proj9-config.cmake or Proj9Config.cmake file somewhere. Where would I look for this file? I see /opt/local/lib/proj9 - but the file is not in there. Would this file be in there if proj9 supports CONFIG mode or is there some other place to look? 

Thanks 
Tom 

-------------------------------------------------- 
Thomas C. O'Reilly 
Monterey Bay Aquarium Research Institute 
7700 Sandholdt Road 
Moss Landing, California 95039-9644 
831-775-1766 (voice) 
831-775-1620 (FAX) 
oreilly at mbari.org (email) 
http://www.mbari.org (World-wide Web) 

"The machine does not isolate us from the great mysteries 
of nature, but plunges us more deeply into them." 

- ANTOINE DE SAINT-EXUPERY 
"Wind, Sand, and Stars" (1939) 


From: "Even Rouault" <even.rouault at spatialys.com> 
To: "Tom O'Reilly" <oreilly at mbari.org>, "proj" <proj at lists.osgeo.org> 
Sent: Wednesday, June 1, 2022 11:39:55 AM 
Subject: Re: [PROJ] cmake find_package() fails to find PROJ6 installed with MacPorts 



Tom, 

You should try to use a more recent version than PROJ 6.x (not sure what "proj6" corresponds to in MacPorts). I believe PROJ Config support was only added in PROJ > 6, or can only be relied upon in those later versions 

Even 
Le 01/06/2022 ? 20:29, Tom O'Reilly a ?crit : 



I'm running cmake 3.22.4 on MacOS 11.6. 
I installed proj6 with "sudo port proj6" which looks to be [ https://proj.org/install.html | the?proj-recommended way to
                        install with MacPorts ] . I see the proj6 include/ and lib/ subdirectories in /opt/local/lib/proj6, and set PROJ6_ROOT to /opt/local/lib/proj6 accordingly in my applications's CMakeLists.txt. 

But CmakeLists.txt is unable to find proj on the system. The [ https://proj.org/development/cmake.html | proj page
                          also says ] : 





The recommended way to use the PROJ library in a CMake project is to link to the imported library target PROJ::proj provide by the CMake configuration which comes with the library. Typical usage is: 




find_package(PROJ CONFIG REQUIRED) 




However find_package() cannot find PROJ or PROJ6 on my system - find_package() exits with this message: 

CMake Error at CMakeLists.txt:95 (find_package): 

Could not find a package configuration file provided by "PROJ6" with any of 

the following names: 



PROJ6Config.cmake 

proj6-config.cmake 




Moreover I do not see any files named "proj*.cmake" in /opt/local - somehow installing proj6 with MacPorts did not include this package information? What am I doing wrong? 

Any help much appreciated! 




Thanks 

Tom 


-------------------------------------------------- 
Thomas C. O'Reilly 
Monterey Bay Aquarium Research Institute 
7700 Sandholdt Road 
Moss Landing, California 95039-9644 
831-775-1766 (voice) 
831-775-1620 (FAX) 
[ mailto:oreilly at mbari.org | oreilly at mbari.org ] (email) 
[ http://www.mbari.org/ | http://www.mbari.org ] (World-wide Web) 

"The machine does not isolate us from the great mysteries 
of nature, but plunges us more deeply into them." 

- ANTOINE DE SAINT-EXUPERY 
"Wind, Sand, and Stars" (1939) 

_______________________________________________
PROJ mailing list [ mailto:PROJ at lists.osgeo.org | PROJ at lists.osgeo.org ] [ https://lists.osgeo.org/mailman/listinfo/proj | https://lists.osgeo.org/mailman/listinfo/proj ] 



-- [ http://www.spatialys.com/ | http://www.spatialys.com ] My software is free, but my time generally not. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220601/64eb2323/attachment.htm>

From mwtoews at gmail.com  Wed Jun  1 14:34:41 2022
From: mwtoews at gmail.com (Mike Taves)
Date: Thu, 2 Jun 2022 09:34:41 +1200
Subject: [PROJ] cmake find_package() fails to find PROJ6 installed with
 MacPorts
In-Reply-To: <716385892.104671710.1654113331443.JavaMail.zimbra@mbari.org>
References: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
 <69c4c636-1ca7-b9be-6b2b-46a8ff6107d3@spatialys.com>
 <716385892.104671710.1654113331443.JavaMail.zimbra@mbari.org>
Message-ID: <CAM2FmMqQC3x0i7xTKZaNUqVryHQ_XPs+=4cFyinp5Mx006aXNw@mail.gmail.com>

On Thu, 2 Jun 2022 at 07:55, Tom O'Reilly <oreilly at mbari.org> wrote:
>
> My project needs proj6, but as a test of cmake I installed proj9 with MacPorts - and find_package(Proj9 CONFIG REQUIRED) fails just as before.
> Question - if the installed proj9 provides CONFIG support, I presume there is a proj9-config.cmake or Proj9Config.cmake file somewhere. Where would I look for this file? I see /opt/local/lib/proj9 - but the file is not in there. Would this file be in there if proj9 supports CONFIG mode or is there some other place to look?

Use the following:

find_package(PROJ CONFIG REQUIRED)

target_link_libraries(MyApp PRIVATE PROJ::proj)

See https://proj.org/development/cmake.html for more.

From oreilly at mbari.org  Wed Jun  1 16:02:39 2022
From: oreilly at mbari.org (Tom O'Reilly)
Date: Wed, 1 Jun 2022 16:02:39 -0700 (PDT)
Subject: [PROJ] cmake find_package() fails to find PROJ6 installed with
 MacPorts
In-Reply-To: <CAM2FmMqQC3x0i7xTKZaNUqVryHQ_XPs+=4cFyinp5Mx006aXNw@mail.gmail.com>
References: <331447711.104617541.1654108161508.JavaMail.zimbra@mbari.org>
 <69c4c636-1ca7-b9be-6b2b-46a8ff6107d3@spatialys.com>
 <716385892.104671710.1654113331443.JavaMail.zimbra@mbari.org>
 <CAM2FmMqQC3x0i7xTKZaNUqVryHQ_XPs+=4cFyinp5Mx006aXNw@mail.gmail.com>
Message-ID: <67181529.104993619.1654124559649.JavaMail.zimbra@mbari.org>

Hi Mike et al,

I've installed proj6, proj8, and proj9 with MacPorts, into directories /opt/local/lib/proj6, /opt/local/lib/proj8, and /opt/local/lib/proj9. 

I wrote a minimal CMakeLists.txt file to test find_package(PROJ), and verify that;
find_package(PROJ CONFIG) works for proj9, but not for proj8 or proj6. 
So this is more-or-less consistent with what you guys say - thank you!

Here's the CMakeLists.txt:

#[[
Test capability of find_package(PROJ) to find various 
MacPort-installed proj versions
]]

cmake_minimum_required(VERSION 3.18)
project(cmake-test)

if (APPLE)
  # Assume MacPorts default install location in /opt/local
  set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} /opt/local/include)
  set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /opt/local/lib)

  # Must set PROJ_ROOT to point at directory containing proj-versionX
  # so that find_package() works
  # MacPorts puts projX files in /opt/local/lib/projX
  set(PROJ_ROOT /opt/local/lib)

endif(APPLE)

message("find_package(PROJ)")
find_package(PROJ CONFIG REQUIRED)
message("done with find_package(PROJ)")
message("PROJ_LIBRARIES: ${PROJ_LIBRARIES}, PROJ_VERSION: ${PROJ_VERSION}")
message("DONE")


The proj*config.cmake file needed to support find_package(PROJ CONFIG) are only found under proj9:

find /opt/local/lib -iname 'proj*config.cmake'
/opt/local/lib/proj9/lib/cmake/proj4/proj4-config.cmake
/opt/local/lib/proj9/lib/cmake/proj/proj-config.cmake

Thanks!
Tom

--------------------------------------------------
Thomas C. O'Reilly
Monterey Bay Aquarium Research Institute
7700 Sandholdt Road
Moss Landing, California 95039-9644
831-775-1766 (voice)
831-775-1620 (FAX)
oreilly at mbari.org (email)
http://www.mbari.org (World-wide Web)
 
"The machine does not isolate us from the great mysteries
 of nature, but plunges us more deeply into them."
 
   - ANTOINE DE SAINT-EXUPERY
     "Wind, Sand, and Stars" (1939)

----- Original Message -----
From: "Mike Taves" <mwtoews at gmail.com>
To: "Tom O'Reilly" <oreilly at mbari.org>
Cc: "Even Rouault" <even.rouault at spatialys.com>, "proj" <proj at lists.osgeo.org>
Sent: Wednesday, June 1, 2022 2:34:41 PM
Subject: Re: [PROJ] cmake find_package() fails to find PROJ6 installed with MacPorts

On Thu, 2 Jun 2022 at 07:55, Tom O'Reilly <oreilly at mbari.org> wrote:
>
> My project needs proj6, but as a test of cmake I installed proj9 with MacPorts - and find_package(Proj9 CONFIG REQUIRED) fails just as before.
> Question - if the installed proj9 provides CONFIG support, I presume there is a proj9-config.cmake or Proj9Config.cmake file somewhere. Where would I look for this file? I see /opt/local/lib/proj9 - but the file is not in there. Would this file be in there if proj9 supports CONFIG mode or is there some other place to look?

Use the following:

find_package(PROJ CONFIG REQUIRED)

target_link_libraries(MyApp PRIVATE PROJ::proj)

See https://proj.org/development/cmake.html for more


From pablogabrieldeluca at gmail.com  Wed Jun  1 17:26:51 2022
From: pablogabrieldeluca at gmail.com (Gabriel De Luca)
Date: Wed, 1 Jun 2022 21:26:51 -0300
Subject: [PROJ] Affine transformation for engineering crs
In-Reply-To: <CAE49LKyiPEfTG6RYJ-eCXaM3MGCocS3N61V7W8=CToJu3Y6w0Q@mail.gmail.com>
References: <CAE49LKyiPEfTG6RYJ-eCXaM3MGCocS3N61V7W8=CToJu3Y6w0Q@mail.gmail.com>
Message-ID: <CAB-dfs0p--oBpb2pn2HAeFJiBEiOPUMPC=0fPwN97mV7VGebmQ@mail.gmail.com>

Hi,

 The EPSG:9624 method is a 2D transformation, so the translation vector has
only two elements and the rotation matrix has only two rows and two columns.
  In the description of the EPSG method, the algebraic expression is found
but in the documentation of the affine transformation in PROJ it is
expressed in its matrix form.
  The equivalences are as follows:

A0 = +xoff
A1 = +s11
A2 = +s12
B0 = +yoff
B1 = +s21
B2 = +s22


Regards,
Gabriel

El mi?, 1 jun 2022 a la(s) 08:03, Torill Kj?snes Gabrielsen (
torill.kjosnes at gmail.com) escribi?:

> Hi,
>
>
>
> I have an engineering crs that I would like to transform with an affine
> transformation.
>
>
>
> The transformation for the crs is defined in 9624:
>
>
> https://epsg.org/coord-operation-method_9624/Affine-parametric-transformation.html
>
>
>
> The coordinate transformation parameter values are:
>
> A0 = 82357.457 metres
>
> A1 = 0.304794369
>
> A2 = 0.000015417425
>
> B0 = 28091.324 metres
>
> B1 = -0.000015417425
>
> B2 = 0.304794369
>
>
>
> Is there anyone who can help me address which parameters correspond to
> those defined in PROJ affine?
>
>
>
> A0 = +xoff?
>
> A1 = +s11?
>
> A2 = ?
>
> B0 = +yoff?
>
> B1 = +s22?
>
> B2 = ?
>
>
>
> Regards,
>
> Torill Gabrielsen
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220601/b06c8517/attachment-0001.htm>

From roger.oberholtzer at gmail.com  Thu Jun  2 00:52:28 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Thu, 2 Jun 2022 09:52:28 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>
Message-ID: <CANkOqwM-4rbj5PWOoSdEmsc+kxR22Erf6L_enjc+-KLZzviOQg@mail.gmail.com>

On Wed, Jun 1, 2022 at 1:09 PM Thomas Knudsen <knudsen.thomas at gmail.com> wrote:

> The differing results from your code may be a matter of your PR instantiation leading to taking the code branch in https://github.com/OSGeo/PROJ/blob/ced8793aa170dd4792f331633e62726808a2e75d/src/4D_api.cpp#L2469
>
> Could you try to instantiate a plain, classic PROJ PJ using
>     proj_create("proj=tmerc lon_0=15 k_0=0.9996 x_0=500000 ellps=GRS80"),
> then calling proj_factors with that as input. It should send you through the code branch at https://github.com/OSGeo/PROJ/blob/ced8793aa170dd4792f331633e62726808a2e75d/src/4D_api.cpp#L2499 which may (or may not) give you the result you expect.
>
> If it doesn't, please file a ticket over at https://github.com/OSGeo/PROJ/issues

If I use the proj definition instead of the EPSG code, the calculation
works,. So I guess there is no bug to report for that.

The question is, should I be able to use the EPSG code here? Is this
an unintended thing that I cannot use it?



-- 
Roger Oberholtzer

From knudsen.thomas at gmail.com  Thu Jun  2 03:39:57 2022
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 2 Jun 2022 12:39:57 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CANkOqwM-4rbj5PWOoSdEmsc+kxR22Erf6L_enjc+-KLZzviOQg@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>
 <CANkOqwM-4rbj5PWOoSdEmsc+kxR22Erf6L_enjc+-KLZzviOQg@mail.gmail.com>
Message-ID: <CAH0YoEMk_MQfxv4b7gAfFrmTBDez7Qf2meUyeowpXwwOzA-_ZQ@mail.gmail.com>

Roger,

The blunt answer to your question is NO, but let me try to qualify that a
bit:

The conceptual problem here is the dubious historical ISO19100/OGC notion
that a CRS has some kind of internal state, which makes it possible to
derive its relation to other CRS.

In geodesy, on the other hand, what amounts to a CRS in ISO/OGC
terminology, really is just a label (i.e. a name for the system), and the
relation between the system with that name and another system with another
name is given by a transformation, which can be described in mathematical
terms.

The meridian convergence (and any other relevant characteristic) is a
property of the transformation (i.e. the mathematical prescription), not of
the CRS per se, because *there is no such thing as a CRS per se*: It is
just a label, and you cannot perform any kind of mathematical analysis on a
label.

So you can infer the meridian convergence by looking at the transformation
taking:

- geographical coordinates labelled EPSG:4619 (SWEREF99 geographic 2D, i.e.
the Swedish realization of EPSG:4258, ETRS89 geographic 2D),

to

- projected coordinates labelled EPSG:3006 (SWEREF99 TM)

i.e. you can infer the meridian convergence *from the transformation, not
from the system*: The meridian convergence is a quality in the space
between two systems, which tells a part of the story about how the first
system is being warped to arrive at the second.

The practically available implementations of the ISO/OGC standards for
"referencing by coordinates" has an unfortunate focus on systems, rather
than transformations.

This leads to needless complications, because the transformations must be
derived from an imaginary internal state of the CRS labels, rather than
just referred to by their own label.

*As an example: *

To go from the *system* labelled *EPSG:4619* to the *system* labelled
*EPSG:3006*, you need to apply the *transformation* (in this case formally
called a conversion) labelled *EPSG:17333*.

Geodetically speaking, the transformation is what matters - the systems are
just labels. And in the case at hand the transformation is purely
mathematical, so it will always go well, it can be derived flawlessly from
the (imaginary) internal state.

In cases including empirically derived parameters (i.e. datum shifts),
there may be a multitude of relevant transformations (e.g. the EPSG
registry has 19 different cases of transforming between the Australian
datums AGD66 and GDA94), and picking the right requires additional
contextual information.

If the user is OK with meter level accuracy, picking any of these is
probably OK, and we can get away with having the user specify just the two
system labels (as in EPSG:4619 and EPSG:3006).

If better accuracy is required, however, we should let the user ask
specifically for a given transformation implementation (as in EPSG:17333).
In that case, the two system labels are redundant information, and can be
used to check that the transformation asked for actually transforms between
the two systems specified.

I talk more about this in my comment in a related issue over at
https://github.com/OSGeo/PROJ/issues/2854#issuecomment-920993274

So in essence, the answer to your question is NO: You might be able to
infer the proper meridian convergence from the transformation EPSG:17333,
but not from the CRS EPSG:3006, and we should get out of the habit of
assigning CRS a more prominent role than they deserve. They are just
labels, after all: The geodetic realities are in the transformations, not
in the labels.

I'm building Rust Geodesy, a platform for experiments with geodetic
software and abstractions, that tries to focus more on transformations than
on CRS, over at https://github.com/busstoptaktik/geodesy - you're welcome
to have a look.

/Thomas

Den tor. 2. jun. 2022 kl. 09.52 skrev Roger Oberholtzer <
roger.oberholtzer at gmail.com>:

> If I use the proj definition instead of the EPSG code, the calculation
> works,. So I guess there is no bug to report for that.
>
> The question is, should I be able to use the EPSG code here? Is this
> an unintended thing that I cannot use it?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220602/3f911d2a/attachment.htm>

From martin.desruisseaux at geomatys.com  Thu Jun  2 04:21:59 2022
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Thu, 2 Jun 2022 13:21:59 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CAH0YoEMk_MQfxv4b7gAfFrmTBDez7Qf2meUyeowpXwwOzA-_ZQ@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>
 <CANkOqwM-4rbj5PWOoSdEmsc+kxR22Erf6L_enjc+-KLZzviOQg@mail.gmail.com>
 <CAH0YoEMk_MQfxv4b7gAfFrmTBDez7Qf2meUyeowpXwwOzA-_ZQ@mail.gmail.com>
Message-ID: <0554fc7d-91eb-0d93-a48a-0d527ba6b07e@geomatys.com>

Hello all

Below is just adding a little bit more historical context to what Thomas 
said.


Le 02/06/2022 ? 12:39, Thomas Knudsen a ?crit?:

> The conceptual problem here is the dubious historical ISO19100/OGC 
> notion that a CRS has some kind of internal state, which makes it 
> possible to derive its relation to other CRS.
>
This notion came from OGC 01-009, which was prior to ISO 19111. The (now 
superseded) OGC 01-009 standard had a notion of CRS state in the form of 
"TOWGS84" information, and this design has been used by PROJ4 as well. 
But ISO 19111 never had this notion as far as I know. The "bound CRS" 
notion introduced in WKT 2 is somewhat similar, but the specification 
said that this is a compromise for existing practices, not something 
that they recommend. The EPSG documentation discusses the problem of 
"statefull CRS" in their discussion about "early binding" (stateful CRS) 
versus "late binding" (stateless CRS) implementations of map projection 
libraries. PROJ 4 was an "early binding" implementation, PROJ 6 and 
later are now "late binding" implementations (but it seems to me that 
habits inherited from PROJ 4 are still well entrenched).


> The meridian convergence (and any other relevant characteristic) is a 
> property of the transformation (i.e. the mathematical prescription), 
> not of the CRS per se, because *there is no such thing as a CRS per 
> se*: It is just a label, and you cannot perform any kind of 
> mathematical analysis on a label.
>
OGC 01-009 specified a way to not only transform coordinates, but also 
to obtain the Jacobian matrix at a given point for a given 
transformation. That was (I think) a very good feature from OGC 01-009 
which has not been kept by ISO 19111. Maybe because considered too 
complex, I do not know.


> The practically available implementations of the ISO/OGC standards for 
> "referencing by coordinates" has an unfortunate focus on systems, 
> rather than transformations.
>
It may be a matter of popularity. The Java world has some 
implementations of ISO/OGC standards done in the "right" way 
(late-binding implementation + support of Jacobian matrices) for 10~20 
years. But they are not well-known like PROJ, which may give the 
impression that they do not exist.

 ??? Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220602/15fd147d/attachment.htm>

From knudsen.thomas at gmail.com  Thu Jun  2 07:02:43 2022
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 2 Jun 2022 16:02:43 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <0554fc7d-91eb-0d93-a48a-0d527ba6b07e@geomatys.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>
 <CANkOqwM-4rbj5PWOoSdEmsc+kxR22Erf6L_enjc+-KLZzviOQg@mail.gmail.com>
 <CAH0YoEMk_MQfxv4b7gAfFrmTBDez7Qf2meUyeowpXwwOzA-_ZQ@mail.gmail.com>
 <0554fc7d-91eb-0d93-a48a-0d527ba6b07e@geomatys.com>
Message-ID: <CAH0YoEMCdYDYB+6hakXpPVc9X5ouY5dte-QyENjkEaOOtzKLdQ@mail.gmail.com>

Martin,

Thanks - it is hard to keep both the narrative on the track, and all
details accounted for at once, so your clarifications are much appreciated
:-)

Also, I am obviously aware of your Java based work, and have even enjoyed
reading some of the code. I have, however, never had any opportunity to
actually use it.

Regarding "internal state" and ISO19111, there is still a number of places
that the notion that a that a CRS should be "defined" pops up, cf. e.g.
ISO19111 clause C.5.1: "The associated map projection effectively
**defines** the projected CRS from the geodetic CRS. The claim is probably
related to the notion that (clause C.5.7): "Coordinate transformation
services should be able to automatically derive coordinate operations that
are not stored explicitly in any permanent data store", and the precaution
(C.5.2) that: "To facilitate recognition and validation it is recommended
that the coordinate operation method formulae be included or referenced in
the relevant object, if possible wih a worked example".

But the real deluge of internal state first becomes clear when turning to
ISO19162/OGC18-010, "WKT representation of CRS", which, I believe, you are
one of the primary authors of. While the standard itself is not necessarily
the cause of the deluge, its practical use certainly is. Take for example
the representation of Roger's case of EPSG:3006. If we look that up in the
EPSG registry, or using projinfo EPSG:3006, we get this load of internal
state:

PROJCRS["SWEREF99 TM",
    BASEGEOGCRS["SWEREF99",
        DATUM["SWEREF99",
            ELLIPSOID["GRS 1980",6378137,298.257222101,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4619]],
    CONVERSION["SWEREF99 TM",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",0,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",15,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",0.9996,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",500000,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["northing (N)",north,
            ORDER[1],
            LENGTHUNIT["metre",1]],
        AXIS["easting (E)",east,
            ORDER[2],
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["Topographic mapping (medium and small scale)."],
        AREA["Sweden - onshore and offshore."],
        BBOX[54.96,10.03,69.07,24.17]],
    ID["EPSG",3006]]


Which in my book could be reduced to:

PROJCRS["SWEREF99 TM",
    USAGE[
        SCOPE["Topographic mapping (medium and small scale)."],
        AREA["Sweden - onshore and offshore."],
        BBOX[54.96,10.03,69.07,24.17]]

or even just

PROJCRS["SWEREF99 TM"]

i.e: "There exists a projected coordinate system called SWEREF99 TM". We
also know that it's known as EPSG:3006, since that is the key we used to
look it up.

To have any use of it, we need it supplemented by an entry in the
transformation table telling the "CONVERSION" part of the story.

And everything is not done with that: We would also need a transformation
entry taking EPSG:3006 to screen coordinates. So there will still be a need
for the transformation system to identify and string together partial
transformations as needed, but we are more honest about the CRS being a
stateless label, and the transformations associated with that label are the
"real stuff".

In its role as an abstract model, ISO19111 is in a sense an empty shell,
and I cannot relieve myself of the feeling that by focusing so deeply on
the CRS, rather than the transformations, we have lost an opportunity to
standardize and codify the stuff that actually matters: We have spent an
inordinate amount of effort specifying stateless labels, while we could
have been spending our focus on specifying the behavior of the partial
operations that can be used for building the transformations between CRS.

Today these are codified excellently in e.g. the IOGP Geomatics Guidance
Note number 7, part 2, which is a wonderfully clear and useful resource -
but it is not a standard, and I do not necessarily see any obvious opening
for that to happen.

/Thomas

Den tor. 2. jun. 2022 kl. 13.22 skrev Martin Desruisseaux <
martin.desruisseaux at geomatys.com>:

> Hello all
>
> Below is just adding a little bit more historical context to what Thomas
> said.
>
>
> Le 02/06/2022 ? 12:39, Thomas Knudsen a ?crit :
>
> The conceptual problem here is the dubious historical ISO19100/OGC notion
> that a CRS has some kind of internal state, which makes it possible to
> derive its relation to other CRS.
>
> This notion came from OGC 01-009, which was prior to ISO 19111. The (now
> superseded) OGC 01-009 standard had a notion of CRS state in the form of "
> TOWGS84" information, and this design has been used by PROJ4 as well. But
> ISO 19111 never had this notion as far as I know. The "bound CRS" notion
> introduced in WKT 2 is somewhat similar, but the specification said that
> this is a compromise for existing practices, not something that they
> recommend. The EPSG documentation discusses the problem of "statefull CRS"
> in their discussion about "early binding" (stateful CRS) versus "late
> binding" (stateless CRS) implementations of map projection libraries. PROJ
> 4 was an "early binding" implementation, PROJ 6 and later are now "late
> binding" implementations (but it seems to me that habits inherited from
> PROJ 4 are still well entrenched).
>
>
> The meridian convergence (and any other relevant characteristic) is a
> property of the transformation (i.e. the mathematical prescription), not of
> the CRS per se, because *there is no such thing as a CRS per se*: It is
> just a label, and you cannot perform any kind of mathematical analysis on a
> label.
>
> OGC 01-009 specified a way to not only transform coordinates, but also to
> obtain the Jacobian matrix at a given point for a given transformation.
> That was (I think) a very good feature from OGC 01-009 which has not been
> kept by ISO 19111. Maybe because considered too complex, I do not know.
>
>
> The practically available implementations of the ISO/OGC standards for
> "referencing by coordinates" has an unfortunate focus on systems, rather
> than transformations.
>
> It may be a matter of popularity. The Java world has some implementations
> of ISO/OGC standards done in the "right" way (late-binding implementation +
> support of Jacobian matrices) for 10~20 years. But they are not well-known
> like PROJ, which may give the impression that they do not exist.
>
>     Martin
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220602/870caa7c/attachment-0001.htm>

From martin.desruisseaux at geomatys.com  Thu Jun  2 07:52:15 2022
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Thu, 2 Jun 2022 16:52:15 +0200
Subject: [PROJ] Calculating meridian convergence
In-Reply-To: <CAH0YoEMCdYDYB+6hakXpPVc9X5ouY5dte-QyENjkEaOOtzKLdQ@mail.gmail.com>
References: <CANkOqwOqyyK9CrDW5ueNnKJXXmPUYoBY+s4o7zmSQ_gMuHgy6w@mail.gmail.com>
 <CAH0YoEMknpXB3D+yNK-nt5SXV2mcCKX-s6kWyFFQqwAw4QsofA@mail.gmail.com>
 <CANkOqwM-4rbj5PWOoSdEmsc+kxR22Erf6L_enjc+-KLZzviOQg@mail.gmail.com>
 <CAH0YoEMk_MQfxv4b7gAfFrmTBDez7Qf2meUyeowpXwwOzA-_ZQ@mail.gmail.com>
 <0554fc7d-91eb-0d93-a48a-0d527ba6b07e@geomatys.com>
 <CAH0YoEMCdYDYB+6hakXpPVc9X5ouY5dte-QyENjkEaOOtzKLdQ@mail.gmail.com>
Message-ID: <ce664ef3-c00c-fd17-3345-c01deadfbd3f@geomatys.com>

Hello Thomas

Thanks for your email (and no worry if my email was "dry" - I just tried 
to focus on some points without making the mail too long). Just a few 
notes about my understanding of ISO 19111 subtleties:

Le 02/06/2022 ? 16:02, Thomas Knudsen a ?crit?:

> Regarding "internal state" and ISO19111, there is still a number of 
> places that the notion that a that a CRS should be "defined" pops up, 
> cf. e.g. ISO19111 clause C.5.1: "The associated map projection 
> effectively **defines** the projected CRS from the geodetic CRS.
>
ISO 19111 makes a distinction between "conversion" and "transformation". 
In ISO 19111 terminology, a conversion is always between two CRS using 
the same datum. So conversions are not impacted by changes in the figure 
of the Earth (plate motions, etc), is defined by pure mathematical 
formulas and has theoretically an infinite precision (ignoring floating 
point rounding errors and approximations by series expansions). By 
contrast, a transformation is between two CRS using different datum. 
Transformation are determined empirically, have unavoidable stochastic 
errors (not caused by software limitation), change with time and 
location, etc.

Map projections fall in the "conversion" category while datum shifts 
fall in the "transformation" category. In ISO 19111 model, a projected 
CRS is a special case of derived CRS, i.e. a CRS related to another CRS 
by a conversion. The model restricts this relationship to conversions; 
it is not possible in ISO 19111 model to define a derived CRS using a 
transformation. So the ISO model forces the use of a database such as 
EPSG for all empirically-defined relationship between CRS. Only the 
mathematically-defined relationship can be associated to the CRS. I 
presume this is because the latter are considered stable.


> But the real deluge of internal state first becomes clear when turning 
> to ISO19162/OGC18-010, "WKT representation of CRS", which, I believe, 
> you are one of the primary authors of.
>
The merit goes to Roger Lott; I only provided some comments. Even also 
contributed well.


> (?snip?) Which in my book could be reduced to (?) just
>
> PROJCRS["SWEREF99 TM"]
>
> i.e: "There exists a projected coordinate system called SWEREF99 TM". 
> We also know that it's known as EPSG:3006, since that is the key we 
> used to look it up. To have any use of it, we need it supplemented by 
> an entry in the transformation table telling the "CONVERSION" part of 
> the story.

Yes we agree :-) With a nuance: the labels are not applied on the CRS, 
but on the datum. And indeed any transformation between different datum 
requires the use of a database (ignoring "bound CRS"). So the model is 
already the way you describe, if we keep in mind that as soon as there 
is a change of datum, the relationship between two CRS is no longer a 
conversion (it become something with at least one transformation) and 
consequently can not be used anymore in the definition of a derived or 
projected CRS. The "CONVERSION" element in "PROJCRS" definition is 
restricted by the model to a narrower case bounded by mathematics. By 
contrast, the problem about the "TOWGS84" element was that is was 
associated to the datum, not the CRS. So it was defining a 
transformation (as opposed to conversion), which we agree should not 
appear in a WKT.

 ??? Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220602/b3d87743/attachment.htm>

From kristianevers at gmail.com  Tue Jun  7 12:28:01 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 7 Jun 2022 21:28:01 +0200
Subject: [PROJ] 9.0.1RC1 delayed
Message-ID: <54973524-4659-42F2-9665-086870177E02@gmail.com>

All,

I was planning on publishing a release candidate for 9.0.1 today but I
seem to be locked out from the OSGeo servers so it will have to wait
until I have fixed that problem. 

Sorry for the delay. Stay tuned.

/Kristian

From sebastic at xs4all.nl  Wed Jun  8 09:33:27 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 8 Jun 2022 18:33:27 +0200
Subject: [PROJ] 9.0.1RC1 delayed
In-Reply-To: <54973524-4659-42F2-9665-086870177E02@gmail.com>
References: <54973524-4659-42F2-9665-086870177E02@gmail.com>
Message-ID: <7ca38076-a2dc-774d-f05f-0a57ce8566fd@xs4all.nl>

Why was the SOVERSION bumped in a patch release?

-proj_version(MAJOR 9 MINOR 0 PATCH 0)
-set(PROJ_SOVERSION 25)
+proj_version(MAJOR 9 MINOR 0 PATCH 1)
+set(PROJ_SOVERSION 26)

If that was done intentionally, the ABI breaking change should be 
reverted and postponed to 9.1.0.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From kristianevers at gmail.com  Wed Jun  8 09:49:23 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 8 Jun 2022 18:49:23 +0200
Subject: [PROJ] 9.0.1RC1 delayed
In-Reply-To: <7ca38076-a2dc-774d-f05f-0a57ce8566fd@xs4all.nl>
References: <54973524-4659-42F2-9665-086870177E02@gmail.com>
 <7ca38076-a2dc-774d-f05f-0a57ce8566fd@xs4all.nl>
Message-ID: <9AD2978C-B75F-4533-A41A-806B430ADDFC@gmail.com>

There?s a new release process that I still haven?t mastered. That?s the reason.

Since I haven?t announced this yet I?ll fix the problem and overwrite the current
RC1 files that I managed to upload after a bit of guidance from the SAC team.

/Kristian



> On 8 Jun 2022, at 18.33, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> Why was the SOVERSION bumped in a patch release?
> 
> -proj_version(MAJOR 9 MINOR 0 PATCH 0)
> -set(PROJ_SOVERSION 25)
> +proj_version(MAJOR 9 MINOR 0 PATCH 1)
> +set(PROJ_SOVERSION 26)
> 
> If that was done intentionally, the ABI breaking change should be reverted and postponed to 9.1.0.
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From sebastic at xs4all.nl  Wed Jun  8 09:57:00 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 8 Jun 2022 18:57:00 +0200
Subject: [PROJ] 9.0.1RC1 delayed
In-Reply-To: <9AD2978C-B75F-4533-A41A-806B430ADDFC@gmail.com>
References: <54973524-4659-42F2-9665-086870177E02@gmail.com>
 <7ca38076-a2dc-774d-f05f-0a57ce8566fd@xs4all.nl>
 <9AD2978C-B75F-4533-A41A-806B430ADDFC@gmail.com>
Message-ID: <1e32de9a-f160-cfe4-dbdc-4e400871d032@xs4all.nl>

On 6/8/22 18:49, Kristian Evers wrote:
> There?s a new release process that I still haven?t mastered. That?s the reason.

https://github.com/OSGeo/PROJ/pull/3225 reverts the SOVERSION.

> Since I haven?t announced this yet I?ll fix the problem and overwrite the current
> RC1 files that I managed to upload after a bit of guidance from the SAC team.

Don't do that. The tarballs have already been published and has already 
used to update the Debian package. Don't change their content retroactively.

Merge #3225 and publish RC2.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From jmckenna at gatewaygeomatics.com  Wed Jun  8 09:57:40 2022
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Wed, 8 Jun 2022 13:57:40 -0300
Subject: [PROJ] 9.0.1RC1 delayed
In-Reply-To: <54973524-4659-42F2-9665-086870177E02@gmail.com>
References: <54973524-4659-42F2-9665-086870177E02@gmail.com>
Message-ID: <54342297-f7f4-d965-0e5a-e9106c53f9bb@gatewaygeomatics.com>

Hi Kristian,

If you pop onto the #proj channel on IRC (connect in browser at 
https://web.libera.chat/#proj ) and ping me I can describe how I do this 
for MapServer releases (I'm not sure if it is documented anywhere yet).

-jeff



On 2022-06-07 4:28 p.m., Kristian Evers wrote:
> All,
> 
> I was planning on publishing a release candidate for 9.0.1 today but I
> seem to be locked out from the OSGeo servers so it will have to wait
> until I have fixed that problem.
> 
> Sorry for the delay. Stay tuned.
> 
> /Kristian
> _______________________________________________



'

From kristianevers at gmail.com  Wed Jun  8 10:12:08 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 8 Jun 2022 19:12:08 +0200
Subject: [PROJ] 9.0.1RC1 delayed
In-Reply-To: <1e32de9a-f160-cfe4-dbdc-4e400871d032@xs4all.nl>
References: <54973524-4659-42F2-9665-086870177E02@gmail.com>
 <7ca38076-a2dc-774d-f05f-0a57ce8566fd@xs4all.nl>
 <9AD2978C-B75F-4533-A41A-806B430ADDFC@gmail.com>
 <1e32de9a-f160-cfe4-dbdc-4e400871d032@xs4all.nl>
Message-ID: <9A7C8E81-1561-424F-AD94-A9A669B93BC7@gmail.com>


> On 6/8/22 18:49, Kristian Evers wrote:
>> There?s a new release process that I still haven?t mastered. That?s the reason.
> 
> https://github.com/OSGeo/PROJ/pull/3225 reverts the SOVERSION.

Thanks.

> 
>> Since I haven?t announced this yet I?ll fix the problem and overwrite the current
>> RC1 files that I managed to upload after a bit of guidance from the SAC team.
> 
> Don't do that. The tarballs have already been published and has already used to update the Debian package. Don't change their content retroactively.

Well then I guess we to call it RC3 since I started out by uploading 60 byte empty archives?
It would be nice to have a bit of room for error.

> 
> Merge #3225 and publish RC2.

I will.

On a related note. There?s an open position as release manager should anyone want it.
I haven?t really got the time to do this anymore and I am clearly incapable of producing
useful releases when I?m in a rushed state of mind. And when I?m not doing things in a hurry
I am still incapable of figuring out those soversion numbers as demonstrated many times
over the years.

/Kristian

From kristianevers at gmail.com  Wed Jun  8 10:50:03 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 8 Jun 2022 19:50:03 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
Message-ID: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>

All,

I have prepared release candidates for PROJ 9.0.1 and PROJ-data 1.10. Due to a slight
hiccup with PROJ 9.0.0RC1 before it was announced we are going more or less straight
to RC2 as to not disturb those who managed to download it right away. The PROJ release
notes can be found at the bottom of this email.

The PROJ-data package includes a metadata correction for some Dutch grids and adds
a Norwegian transformation grid as an extension to the NKG transformations.

Download the release candidates here:

https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz
https://download.osgeo.org/proj/proj-9.0.1RC2.zip

https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz
https://download.osgeo.org/proj/proj-data-1.10RC1.zip

As always, please report any issues you find in the release candidates either here or
on GitHub.

/Kristian

------------------------------------------------------------------------------------------------

9.0.1 Release Notes
-------------------

 Database updates
 -------

 o Update to EPSG 10.064 (#3208)

 o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)

 Bug fixes
 ---------

 o Use CMAKE_INSTALL_MANDIR to override default (#3081)

 o Increase MAX_ITER so Mollweide forward projection works near the poles (#3082)

 o Fix wrong results with SQLite 3.38.0 (#3091)

 o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwhich
  prime meridian, created from WKT (#3098)

 o Fix issues with WKT of concatenated operations (#3105)

 o CMake: fix installation of proj.pc on Windows (#3109)

 o createOperations(): fix issue in transformation northing, easting
   projected CRS -> +proj=longlat +lon_wrap (#3110)

 o unitconvert: round to nearest date when converting to yyyymmdd (#3111)

 o Fix comparison of GeodeticRefrenceFrame vs DynamicGeodeticReferenceFrame (#3120)

 o createOperations(): fix transformation involving CompoundCRS, ToWGS84
   and PROJ4_GRIDS (#3124)

 o Fix datum names when importing from PROJ4 crs strings (affects some
   transformations using geoidgrids) (#3129)

 o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)

 o createOperations(): fix CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
   to Geog3DCrs (#3151)

 o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)

 o createBoundCRSToWGS84IfPossible(): improve selection logic to generate +towgs84=
   taking into account extent (#3160)

 o createOperations(): fix some complex cases involving TOWGS84 and CompoundCRS (#3163)

 o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)

 o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL / WKT1:ESRI (#3189)

 o createOperations(): fix/improve result of 'BD72 + Ostend height ' to 'WGS84+EGM96 height' (#3199)

 o Identifier::isEquivalentName(): fix when ending by ' + ' which could indirectly cause
   an infinite stack call in master (#3202)

 o WKT import: correctly deal with absence of Latitude_Of_Origin parameter in
   WKT1 ESRI with Stereographic projection (#3212)

 o PROJJSON parser: do not error out if a datum ensemble member is unknown in the database (#3223)


From even.rouault at spatialys.com  Wed Jun  8 14:49:47 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 8 Jun 2022 23:49:47 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
Message-ID: <a773f947-17fc-e3f8-e96b-0b9e09925ab4@spatialys.com>

Kristian,

The release candidates looks good to me

Even

Le 08/06/2022 ? 19:50, Kristian Evers a ?crit?:
> All,
>
> I have prepared release candidates for PROJ 9.0.1 and PROJ-data 1.10. Due to a slight
> hiccup with PROJ 9.0.0RC1 before it was announced we are going more or less straight
> to RC2 as to not disturb those who managed to download it right away. The PROJ release
> notes can be found at the bottom of this email.
>
> The PROJ-data package includes a metadata correction for some Dutch grids and adds
> a Norwegian transformation grid as an extension to the NKG transformations.
>
> Download the release candidates here:
>
> https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz
> https://download.osgeo.org/proj/proj-9.0.1RC2.zip
>
> https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz
> https://download.osgeo.org/proj/proj-data-1.10RC1.zip
>
> As always, please report any issues you find in the release candidates either here or
> on GitHub.
>
> /Kristian
>
> ------------------------------------------------------------------------------------------------
>
> 9.0.1 Release Notes
> -------------------
>
>   Database updates
>   -------
>
>   o Update to EPSG 10.064 (#3208)
>
>   o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)
>
>   Bug fixes
>   ---------
>
>   o Use CMAKE_INSTALL_MANDIR to override default (#3081)
>
>   o Increase MAX_ITER so Mollweide forward projection works near the poles (#3082)
>
>   o Fix wrong results with SQLite 3.38.0 (#3091)
>
>   o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwhich
>    prime meridian, created from WKT (#3098)
>
>   o Fix issues with WKT of concatenated operations (#3105)
>
>   o CMake: fix installation of proj.pc on Windows (#3109)
>
>   o createOperations(): fix issue in transformation northing, easting
>     projected CRS -> +proj=longlat +lon_wrap (#3110)
>
>   o unitconvert: round to nearest date when converting to yyyymmdd (#3111)
>
>   o Fix comparison of GeodeticRefrenceFrame vs DynamicGeodeticReferenceFrame (#3120)
>
>   o createOperations(): fix transformation involving CompoundCRS, ToWGS84
>     and PROJ4_GRIDS (#3124)
>
>   o Fix datum names when importing from PROJ4 crs strings (affects some
>     transformations using geoidgrids) (#3129)
>
>   o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)
>
>   o createOperations(): fix CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
>     to Geog3DCrs (#3151)
>
>   o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)
>
>   o createBoundCRSToWGS84IfPossible(): improve selection logic to generate +towgs84=
>     taking into account extent (#3160)
>
>   o createOperations(): fix some complex cases involving TOWGS84 and CompoundCRS (#3163)
>
>   o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)
>
>   o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL / WKT1:ESRI (#3189)
>
>   o createOperations(): fix/improve result of 'BD72 + Ostend height ' to 'WGS84+EGM96 height' (#3199)
>
>   o Identifier::isEquivalentName(): fix when ending by ' + ' which could indirectly cause
>     an infinite stack call in master (#3202)
>
>   o WKT import: correctly deal with absence of Latitude_Of_Origin parameter in
>     WKT1 ESRI with Stereographic projection (#3212)
>
>   o PROJJSON parser: do not error out if a datum ensemble member is unknown in the database (#3223)
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From mwtoews at gmail.com  Wed Jun  8 21:26:16 2022
From: mwtoews at gmail.com (Mike Taves)
Date: Thu, 9 Jun 2022 16:26:16 +1200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
Message-ID: <CAM2FmMqQJydJXDrZL7OAoMS9onkrGC45gRbz-hURGKNPf0ERag@mail.gmail.com>

Looks good, just one minor typo:

>  o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwhich
>   prime meridian, created from WKT (#3098)

This has been fixed to "non-Greenwich" in the repo branches.

From sebastic at xs4all.nl  Wed Jun  8 21:46:24 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 9 Jun 2022 06:46:24 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
Message-ID: <1c354e03-7d3f-7dd3-35da-0f492de1d784@xs4all.nl>

On 6/8/22 19:50, Kristian Evers wrote:
> As always, please report any issues you find in the release candidates either here or
> on GitHub.
Changes in 9.0.1 cause test failures in cartopy:

  https://github.com/SciTools/cartopy/issues/2051

Other than that it looks good, libgeotiff, pdl, pyproj, and postgis test 
suites all succeed. I haven't rebuilt everything that depends on proj in 
Debian, only these which tend to have test failures whenever PROJ changes.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From Roger.Bivand at nhh.no  Thu Jun  9 01:43:54 2022
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Thu, 9 Jun 2022 10:43:54 +0200 (CEST)
Subject: [PROJ] 9.0.1RC2
Message-ID: <1f17736-5cf2-80fd-1624-2599f68fa15b@reclus2.nhh.no>

Hi,

Thanks for keeping things progressing!

I see that the RC2 tarball still contains an INSTALL file that is now 
obsolete, because it describes generic auto* instructions, rather than 
pointing to https://proj.org/install.html#build-steps. Maybe time to 
delete it?

Best wishes,

Roger

-- 
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From kristianevers at gmail.com  Mon Jun 13 15:24:34 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 14 Jun 2022 00:24:34 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
Message-ID: <FF9C38E5-DC68-47A3-A428-FFE6730A4E51@gmail.com>

No issues of big concern has been raised with the release candidates,
so I hereby motion they be promoted to final releases.

I?ll start with my +1.

/Kristian

> On 8 Jun 2022, at 19.50, Kristian Evers <kristianevers at gmail.com> wrote:
> 
> All,
> 
> I have prepared release candidates for PROJ 9.0.1 and PROJ-data 1.10. Due to a slight
> hiccup with PROJ 9.0.0RC1 before it was announced we are going more or less straight
> to RC2 as to not disturb those who managed to download it right away. The PROJ release
> notes can be found at the bottom of this email.
> 
> The PROJ-data package includes a metadata correction for some Dutch grids and adds
> a Norwegian transformation grid as an extension to the NKG transformations.
> 
> Download the release candidates here:
> 
> https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz
> https://download.osgeo.org/proj/proj-9.0.1RC2.zip
> 
> https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz
> https://download.osgeo.org/proj/proj-data-1.10RC1.zip
> 
> As always, please report any issues you find in the release candidates either here or
> on GitHub.
> 
> /Kristian
> 
> ------------------------------------------------------------------------------------------------
> 
> 9.0.1 Release Notes
> -------------------
> 
> Database updates
> -------
> 
> o Update to EPSG 10.064 (#3208)
> 
> o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)
> 
> Bug fixes
> ---------
> 
> o Use CMAKE_INSTALL_MANDIR to override default (#3081)
> 
> o Increase MAX_ITER so Mollweide forward projection works near the poles (#3082)
> 
> o Fix wrong results with SQLite 3.38.0 (#3091)
> 
> o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwhich
>  prime meridian, created from WKT (#3098)
> 
> o Fix issues with WKT of concatenated operations (#3105)
> 
> o CMake: fix installation of proj.pc on Windows (#3109)
> 
> o createOperations(): fix issue in transformation northing, easting
>   projected CRS -> +proj=longlat +lon_wrap (#3110)
> 
> o unitconvert: round to nearest date when converting to yyyymmdd (#3111)
> 
> o Fix comparison of GeodeticRefrenceFrame vs DynamicGeodeticReferenceFrame (#3120)
> 
> o createOperations(): fix transformation involving CompoundCRS, ToWGS84
>   and PROJ4_GRIDS (#3124)
> 
> o Fix datum names when importing from PROJ4 crs strings (affects some
>   transformations using geoidgrids) (#3129)
> 
> o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)
> 
> o createOperations(): fix CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
>   to Geog3DCrs (#3151)
> 
> o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)
> 
> o createBoundCRSToWGS84IfPossible(): improve selection logic to generate +towgs84=
>   taking into account extent (#3160)
> 
> o createOperations(): fix some complex cases involving TOWGS84 and CompoundCRS (#3163)
> 
> o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)
> 
> o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL / WKT1:ESRI (#3189)
> 
> o createOperations(): fix/improve result of 'BD72 + Ostend height ' to 'WGS84+EGM96 height' (#3199)
> 
> o Identifier::isEquivalentName(): fix when ending by ' + ' which could indirectly cause
>   an infinite stack call in master (#3202)
> 
> o WKT import: correctly deal with absence of Latitude_Of_Origin parameter in
>   WKT1 ESRI with Stereographic projection (#3212)
> 
> o PROJJSON parser: do not error out if a datum ensemble member is unknown in the database (#3223)
> 


From even.rouault at spatialys.com  Mon Jun 13 15:27:05 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 14 Jun 2022 00:27:05 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <FF9C38E5-DC68-47A3-A428-FFE6730A4E51@gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
 <FF9C38E5-DC68-47A3-A428-FFE6730A4E51@gmail.com>
Message-ID: <bb6e1b47-6c19-4d0d-f236-f72f8abe552b@spatialys.com>

+1 Even

Le 14/06/2022 ? 00:24, Kristian Evers a ?crit?:
> No issues of big concern has been raised with the release candidates,
> so I hereby motion they be promoted to final releases.
>
> I?ll start with my +1.
>
> /Kristian
>
>> On 8 Jun 2022, at 19.50, Kristian Evers <kristianevers at gmail.com> wrote:
>>
>> All,
>>
>> I have prepared release candidates for PROJ 9.0.1 and PROJ-data 1.10. Due to a slight
>> hiccup with PROJ 9.0.0RC1 before it was announced we are going more or less straight
>> to RC2 as to not disturb those who managed to download it right away. The PROJ release
>> notes can be found at the bottom of this email.
>>
>> The PROJ-data package includes a metadata correction for some Dutch grids and adds
>> a Norwegian transformation grid as an extension to the NKG transformations.
>>
>> Download the release candidates here:
>>
>> https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz
>> https://download.osgeo.org/proj/proj-9.0.1RC2.zip
>>
>> https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz
>> https://download.osgeo.org/proj/proj-data-1.10RC1.zip
>>
>> As always, please report any issues you find in the release candidates either here or
>> on GitHub.
>>
>> /Kristian
>>
>> ------------------------------------------------------------------------------------------------
>>
>> 9.0.1 Release Notes
>> -------------------
>>
>> Database updates
>> -------
>>
>> o Update to EPSG 10.064 (#3208)
>>
>> o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)
>>
>> Bug fixes
>> ---------
>>
>> o Use CMAKE_INSTALL_MANDIR to override default (#3081)
>>
>> o Increase MAX_ITER so Mollweide forward projection works near the poles (#3082)
>>
>> o Fix wrong results with SQLite 3.38.0 (#3091)
>>
>> o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwhich
>>   prime meridian, created from WKT (#3098)
>>
>> o Fix issues with WKT of concatenated operations (#3105)
>>
>> o CMake: fix installation of proj.pc on Windows (#3109)
>>
>> o createOperations(): fix issue in transformation northing, easting
>>    projected CRS -> +proj=longlat +lon_wrap (#3110)
>>
>> o unitconvert: round to nearest date when converting to yyyymmdd (#3111)
>>
>> o Fix comparison of GeodeticRefrenceFrame vs DynamicGeodeticReferenceFrame (#3120)
>>
>> o createOperations(): fix transformation involving CompoundCRS, ToWGS84
>>    and PROJ4_GRIDS (#3124)
>>
>> o Fix datum names when importing from PROJ4 crs strings (affects some
>>    transformations using geoidgrids) (#3129)
>>
>> o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)
>>
>> o createOperations(): fix CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
>>    to Geog3DCrs (#3151)
>>
>> o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)
>>
>> o createBoundCRSToWGS84IfPossible(): improve selection logic to generate +towgs84=
>>    taking into account extent (#3160)
>>
>> o createOperations(): fix some complex cases involving TOWGS84 and CompoundCRS (#3163)
>>
>> o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)
>>
>> o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL / WKT1:ESRI (#3189)
>>
>> o createOperations(): fix/improve result of 'BD72 + Ostend height ' to 'WGS84+EGM96 height' (#3199)
>>
>> o Identifier::isEquivalentName(): fix when ending by ' + ' which could indirectly cause
>>    an infinite stack call in master (#3202)
>>
>> o WKT import: correctly deal with absence of Latitude_Of_Origin parameter in
>>    WKT1 ESRI with Stereographic projection (#3212)
>>
>> o PROJJSON parser: do not error out if a datum ensemble member is unknown in the database (#3223)
>>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From knudsen.thomas at gmail.com  Tue Jun 14 02:50:15 2022
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 14 Jun 2022 11:50:15 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <FF9C38E5-DC68-47A3-A428-FFE6730A4E51@gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
 <FF9C38E5-DC68-47A3-A428-FFE6730A4E51@gmail.com>
Message-ID: <CAH0YoEOQ-bCMOG8rjZ7F47WOLJcnKiSC0Ay80TjSJwb0GyXfZg@mail.gmail.com>

+1 Thomas

Den tir. 14. jun. 2022 kl. 00.24 skrev Kristian Evers <
kristianevers at gmail.com>:

> No issues of big concern has been raised with the release candidates,
> so I hereby motion they be promoted to final releases.
>
> I?ll start with my +1.
>
> /Kristian
>
> > On 8 Jun 2022, at 19.50, Kristian Evers <kristianevers at gmail.com> wrote:
> >
> > All,
> >
> > I have prepared release candidates for PROJ 9.0.1 and PROJ-data 1.10.
> Due to a slight
> > hiccup with PROJ 9.0.0RC1 before it was announced we are going more or
> less straight
> > to RC2 as to not disturb those who managed to download it right away.
> The PROJ release
> > notes can be found at the bottom of this email.
> >
> > The PROJ-data package includes a metadata correction for some Dutch
> grids and adds
> > a Norwegian transformation grid as an extension to the NKG
> transformations.
> >
> > Download the release candidates here:
> >
> > https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz
> > https://download.osgeo.org/proj/proj-9.0.1RC2.zip
> >
> > https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz
> > https://download.osgeo.org/proj/proj-data-1.10RC1.zip
> >
> > As always, please report any issues you find in the release candidates
> either here or
> > on GitHub.
> >
> > /Kristian
> >
> >
> ------------------------------------------------------------------------------------------------
> >
> > 9.0.1 Release Notes
> > -------------------
> >
> > Database updates
> > -------
> >
> > o Update to EPSG 10.064 (#3208)
> >
> > o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)
> >
> > Bug fixes
> > ---------
> >
> > o Use CMAKE_INSTALL_MANDIR to override default (#3081)
> >
> > o Increase MAX_ITER so Mollweide forward projection works near the poles
> (#3082)
> >
> > o Fix wrong results with SQLite 3.38.0 (#3091)
> >
> > o Fix issue when transforming from/to BoundCRS of 3D CRS with
> non-Greenwhich
> >  prime meridian, created from WKT (#3098)
> >
> > o Fix issues with WKT of concatenated operations (#3105)
> >
> > o CMake: fix installation of proj.pc on Windows (#3109)
> >
> > o createOperations(): fix issue in transformation northing, easting
> >   projected CRS -> +proj=longlat +lon_wrap (#3110)
> >
> > o unitconvert: round to nearest date when converting to yyyymmdd (#3111)
> >
> > o Fix comparison of GeodeticRefrenceFrame vs
> DynamicGeodeticReferenceFrame (#3120)
> >
> > o createOperations(): fix transformation involving CompoundCRS, ToWGS84
> >   and PROJ4_GRIDS (#3124)
> >
> > o Fix datum names when importing from PROJ4 crs strings (affects some
> >   transformations using geoidgrids) (#3129)
> >
> > o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)
> >
> > o createOperations(): fix
> CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
> >   to Geog3DCrs (#3151)
> >
> > o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)
> >
> > o createBoundCRSToWGS84IfPossible(): improve selection logic to generate
> +towgs84=
> >   taking into account extent (#3160)
> >
> > o createOperations(): fix some complex cases involving TOWGS84 and
> CompoundCRS (#3163)
> >
> > o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)
> >
> > o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL /
> WKT1:ESRI (#3189)
> >
> > o createOperations(): fix/improve result of 'BD72 + Ostend height ' to
> 'WGS84+EGM96 height' (#3199)
> >
> > o Identifier::isEquivalentName(): fix when ending by ' + ' which could
> indirectly cause
> >   an infinite stack call in master (#3202)
> >
> > o WKT import: correctly deal with absence of Latitude_Of_Origin
> parameter in
> >   WKT1 ESRI with Stereographic projection (#3212)
> >
> > o PROJJSON parser: do not error out if a datum ensemble member is
> unknown in the database (#3223)
> >
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220614/6a017056/attachment.htm>

From kristianevers at gmail.com  Wed Jun 15 07:07:18 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 15 Jun 2022 16:07:18 +0200
Subject: [PROJ] PROJ 9.0.1RC2 & PROJ-data 1.10RC1
In-Reply-To: <CAH0YoEOQ-bCMOG8rjZ7F47WOLJcnKiSC0Ay80TjSJwb0GyXfZg@mail.gmail.com>
References: <7E35CC7A-7C23-4E59-97C1-EF43C39F78D3@gmail.com>
 <FF9C38E5-DC68-47A3-A428-FFE6730A4E51@gmail.com>
 <CAH0YoEOQ-bCMOG8rjZ7F47WOLJcnKiSC0Ay80TjSJwb0GyXfZg@mail.gmail.com>
Message-ID: <E8C759B5-5435-4A1E-978F-897783D67D8C@gmail.com>

With +1?s from myself, Even and Thomas I declare the motion passed.

Expect a release announcement soon.

/Kristian

> On 14 Jun 2022, at 11.50, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
> 
> +1 Thomas
> 
> Den tir. 14. jun. 2022 kl. 00.24 skrev Kristian Evers <kristianevers at gmail.com <mailto:kristianevers at gmail.com>>:
> No issues of big concern has been raised with the release candidates,
> so I hereby motion they be promoted to final releases.
> 
> I?ll start with my +1.
> 
> /Kristian
> 
> > On 8 Jun 2022, at 19.50, Kristian Evers <kristianevers at gmail.com <mailto:kristianevers at gmail.com>> wrote:
> > 
> > All,
> > 
> > I have prepared release candidates for PROJ 9.0.1 and PROJ-data 1.10. Due to a slight
> > hiccup with PROJ 9.0.0RC1 before it was announced we are going more or less straight
> > to RC2 as to not disturb those who managed to download it right away. The PROJ release
> > notes can be found at the bottom of this email.
> > 
> > The PROJ-data package includes a metadata correction for some Dutch grids and adds
> > a Norwegian transformation grid as an extension to the NKG transformations.
> > 
> > Download the release candidates here:
> > 
> > https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz <https://download.osgeo.org/proj/proj-9.0.1RC2.tar.gz>
> > https://download.osgeo.org/proj/proj-9.0.1RC2.zip <https://download.osgeo.org/proj/proj-9.0.1RC2.zip>
> > 
> > https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz <https://download.osgeo.org/proj/proj-data-1.10RC1.tar.gz>
> > https://download.osgeo.org/proj/proj-data-1.10RC1.zip <https://download.osgeo.org/proj/proj-data-1.10RC1.zip>
> > 
> > As always, please report any issues you find in the release candidates either here or
> > on GitHub.
> > 
> > /Kristian
> > 
> > ------------------------------------------------------------------------------------------------
> > 
> > 9.0.1 Release Notes
> > -------------------
> > 
> > Database updates
> > -------
> > 
> > o Update to EPSG 10.064 (#3208)
> > 
> > o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)
> > 
> > Bug fixes
> > ---------
> > 
> > o Use CMAKE_INSTALL_MANDIR to override default (#3081)
> > 
> > o Increase MAX_ITER so Mollweide forward projection works near the poles (#3082)
> > 
> > o Fix wrong results with SQLite 3.38.0 (#3091)
> > 
> > o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwhich
> >  prime meridian, created from WKT (#3098)
> > 
> > o Fix issues with WKT of concatenated operations (#3105)
> > 
> > o CMake: fix installation of proj.pc on Windows (#3109)
> > 
> > o createOperations(): fix issue in transformation northing, easting
> >   projected CRS -> +proj=longlat +lon_wrap (#3110)
> > 
> > o unitconvert: round to nearest date when converting to yyyymmdd (#3111)
> > 
> > o Fix comparison of GeodeticRefrenceFrame vs DynamicGeodeticReferenceFrame (#3120)
> > 
> > o createOperations(): fix transformation involving CompoundCRS, ToWGS84
> >   and PROJ4_GRIDS (#3124)
> > 
> > o Fix datum names when importing from PROJ4 crs strings (affects some
> >   transformations using geoidgrids) (#3129)
> > 
> > o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)
> > 
> > o createOperations(): fix CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
> >   to Geog3DCrs (#3151)
> > 
> > o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)
> > 
> > o createBoundCRSToWGS84IfPossible(): improve selection logic to generate +towgs84=
> >   taking into account extent (#3160)
> > 
> > o createOperations(): fix some complex cases involving TOWGS84 and CompoundCRS (#3163)
> > 
> > o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)
> > 
> > o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL / WKT1:ESRI (#3189)
> > 
> > o createOperations(): fix/improve result of 'BD72 + Ostend height ' to 'WGS84+EGM96 height' (#3199)
> > 
> > o Identifier::isEquivalentName(): fix when ending by ' + ' which could indirectly cause
> >   an infinite stack call in master (#3202)
> > 
> > o WKT import: correctly deal with absence of Latitude_Of_Origin parameter in
> >   WKT1 ESRI with Stereographic projection (#3212)
> > 
> > o PROJJSON parser: do not error out if a datum ensemble member is unknown in the database (#3223)
> > 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org>
> https://lists.osgeo.org/mailman/listinfo/proj <https://lists.osgeo.org/mailman/listinfo/proj>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220615/0d1ca5a2/attachment.htm>

From kristianevers at gmail.com  Wed Jun 15 07:47:05 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 15 Jun 2022 16:47:05 +0200
Subject: [PROJ] PROJ 9.0.1 & PROJ-data 1.10
Message-ID: <D35EC8B6-09EF-49A5-BD6C-308917D54F6C@gmail.com>

On behalf of the PROJ development team I am happy to announce the
release of PROJ 9.0.1 and PROJ-data 1.10.

The PROJ release includes a number of bug fixes and a few updates to
the database. See the release notes below for details.


The PROJ-data package includes a metadata correction for some Dutch grids and adds
a Norwegian transformation grid as an extension to the NKG transformations.

Download the new packages here:

https://download.osgeo.org/proj/proj-9.0.1.tar.gz
https://download.osgeo.org/proj/proj-9.0.1.zip

https://download.osgeo.org/proj/proj-data-1.10.tar.gz
https://download.osgeo.org/proj/proj-data-1.10.zip

/Kristian

?????????????????????????????????????

9.0.1 Release Notes
-------------------

 Database updates
 -------

 o Update to EPSG 10.064 (#3208)

 o Add OGC:CRS84h (WGS 84 longitude-latitude-height) (#3155)

 Bug fixes
 ---------

 o Use CMAKE_INSTALL_MANDIR to override default (#3081)

 o Increase MAX_ITER so Mollweide forward projection works near the poles (#3082)

 o Fix wrong results with SQLite 3.38.0 (#3091)

 o Fix issue when transforming from/to BoundCRS of 3D CRS with non-Greenwich
  prime meridian, created from WKT (#3098)

 o Fix issues with WKT of concatenated operations (#3105)

 o CMake: fix installation of proj.pc on Windows (#3109)

 o createOperations(): fix issue in transformation northing, easting
   projected CRS -> +proj=longlat +lon_wrap (#3110)

 o unitconvert: round to nearest date when converting to yyyymmdd (#3111)

 o Fix comparison of GeodeticRefrenceFrame vs DynamicGeodeticReferenceFrame (#3120)

 o createOperations(): fix transformation involving CompoundCRS, ToWGS84
   and PROJ4_GRIDS (#3124)

 o Fix datum names when importing from PROJ4 crs strings (affects some
   transformations using geoidgrids) (#3129)

 o Deal with PARAMETER["EPSG code for Interpolation CRS",crs_code] (#3149)

 o createOperations(): fix CompoundCRS[BoundCRS[ProjectedCRS],BoundCRS[VerticalCRS]]
   to Geog3DCrs (#3151)

 o ITRF2014: fix ITRF2014:ITRF88,ITRF94 and ITRF96 definitions (#3159)

 o createBoundCRSToWGS84IfPossible(): improve selection logic to generate +towgs84=
   taking into account extent (#3160)

 o createOperations(): fix some complex cases involving TOWGS84 and CompoundCRS (#3163)

 o Fix cmake CURL dependency, update appveyor - vcpkg interaction (#3185)

 o WKT import: deal with Projected CRS that is a mix of WKT1:GDAL / WKT1:ESRI (#3189)

 o createOperations(): fix/improve result of 'BD72 + Ostend height ' to 'WGS84+EGM96 height' (#3199)

 o Identifier::isEquivalentName(): fix when ending by ' + ' which could indirectly cause
   an infinite stack call in master (#3202)

 o WKT import: correctly deal with absence of Latitude_Of_Origin parameter in
   WKT1 ESRI with Stereographic projection (#3212)

 o PROJJSON parser: do not error out if a datum ensemble member is unknown in the database (#3223)


From knudsen.thomas at gmail.com  Thu Jun 16 14:39:45 2022
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 16 Jun 2022 23:39:45 +0200
Subject: [PROJ] Migrating from PROJ 7 to 8
In-Reply-To: <DB7PR06MB56725EAB307BCA202A69A68EBECB9@DB7PR06MB5672.eurprd06.prod.outlook.com>
References: <DB7PR06MB56725EAB307BCA202A69A68EBECB9@DB7PR06MB5672.eurprd06.prod.outlook.com>
Message-ID: <CAH0YoEM=g=gOCiePFh5Y2HL=FG_kGvy8T5nR5EpfGwoYQoCqbA@mail.gmail.com>

Torsten,

I believe you will find the answer over at
https://proj.org/development/quickstart.html

Where you a.o. will find this example:

    b = proj_trans(P, PJ_FWD, a);

/Thomas

Den tor. 12. maj 2022 kl. 12.07 skrev Torsten Martinsen via PROJ <
proj at lists.osgeo.org>:

> Hi,
>
> I have some code (written by a previous coworker) that uses the functions
> pj_ctx_alloc(), pj_init_plus_ctx(), and pj_fwd(). These have been
> deprecated for some time and were removed in PROJ 8.
>
> I have searched the documentation etc., and while it is quite simple to
> figure out the current equivalents for the two first functions, I cannot
> figure out the replacement for pj_fwd().
>
> For reference, the code in question is in essence:
>
> void projection::forward(double& x, double&y) const
> {
>    projUV p;
>    p.u = x * geo::deg_to_rad;
>    p.v = y * geo::deg_to_rad;
>    p = pj_fwd(p, proj_);
>    x = p.u * geo::rad_to_deg;
>    y = p.v * geo::rad_to_deg;
> }
>
> where 'proj_' is returned from pj_init_plus_ctx().
>
> Regards,
> Torsten Martinsen
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220616/be932545/attachment.htm>

From pierrechapo at gmail.com  Wed Jun 29 12:58:46 2022
From: pierrechapo at gmail.com (Pierre Chaponniere)
Date: Wed, 29 Jun 2022 21:58:46 +0200
Subject: [PROJ] grid shift with GDA2020
In-Reply-To: <CAAKeCHZaC3D=DyT27Pq=jsgijCQcS+G0Y4CzR=08mvOuA7b9pA@mail.gmail.com>
References: <CAAKeCHZaC3D=DyT27Pq=jsgijCQcS+G0Y4CzR=08mvOuA7b9pA@mail.gmail.com>
Message-ID: <CAAKeCHb3xbej65LyBOg1owXCmgAqOjG5CzCVQGaiJ5cF_UDrKQ@mail.gmail.com>

Dear Proj community,

i am looking at transforming data into GDA2020 MGA zone 54 :

+proj=utm +zone=54 +south +ellps=GRS80 +units=m +no_defs +type=crs


But it seems this projection is associated with a transformation grid

https://www.icsm.gov.au/datum/gda-transformation-products-and-tools/transformation-grids


I have therefore dowloaded the corresponding .gsb transformation files

https://github.com/icsm-au/transformation_grids

However when I apply the transformation, it appears the process does not
use the transformation files and generate data with planimetric and
vertical offsets.

How can I make sure the transformation grid are applied and what file makes
the link between proj code and transformation files - is this stored in
proj.db ?

Thanks for your help !
Best regards,

Pierre C
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220629/90f10428/attachment.htm>

From gdt at lexort.com  Wed Jun 29 13:24:24 2022
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 29 Jun 2022 16:24:24 -0400
Subject: [PROJ] grid shift with GDA2020
In-Reply-To: <CAAKeCHb3xbej65LyBOg1owXCmgAqOjG5CzCVQGaiJ5cF_UDrKQ@mail.gmail.com>
 (Pierre Chaponniere's message of "Wed, 29 Jun 2022 21:58:46 +0200")
References: <CAAKeCHZaC3D=DyT27Pq=jsgijCQcS+G0Y4CzR=08mvOuA7b9pA@mail.gmail.com>
 <CAAKeCHb3xbej65LyBOg1owXCmgAqOjG5CzCVQGaiJ5cF_UDrKQ@mail.gmail.com>
Message-ID: <rmi4k03p69z.fsf@s1.lexort.com>


Pierre Chaponniere <pierrechapo at gmail.com> writes:

> i am looking at transforming data into GDA2020 MGA zone 54 :

I am far from a GDA expert but it does not make sense to talk about
transforming data into a CRS without specifying the CRS the data is
already in.

> +proj=utm +zone=54 +south +ellps=GRS80 +units=m +no_defs +type=crs

This is a bare projection, and GDA2020 zone 54 is a projection based on
a datum. One is a way to take lat/lon into x/y, and the other is
something you can use to transform to/from other datums.

> But it seems this projection is associated with a transformation grid
>
> https://www.icsm.gov.au/datum/gda-transformation-products-and-tools/transformation-grids

The projection is not, but GDA94 to GDA2020 transformations are, as I
read that page.  (That makes senes to me; we have a similar situation
in the US among former/current/future national datums.)

> I have therefore dowloaded the corresponding .gsb transformation files
>
> https://github.com/icsm-au/transformation_grids
>
> However when I apply the transformation, it appears the process does not
> use the transformation files and generate data with planimetric and
> vertical offsets.

You didn't explain offset from what and why you think the result is
wrong.

> How can I make sure the transformation grid are applied and what file makes
> the link between proj code and transformation files - is this stored in
> proj.db ?

Almost certainly, label the input data as being in the CRS it is
actually in, and find a CRS for the GDA2020 zone that labels it as being
not just in UTM, but UTM GDA2020.  At least then you'll be asking proj
to do the right thing.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220629/a3a0d9be/attachment.sig>

From pierrechapo at gmail.com  Thu Jun 30 00:19:43 2022
From: pierrechapo at gmail.com (Pierre Chaponniere)
Date: Thu, 30 Jun 2022 09:19:43 +0200
Subject: [PROJ] grid shift with GDA2020
In-Reply-To: <rmi4k03p69z.fsf@s1.lexort.com>
References: <CAAKeCHZaC3D=DyT27Pq=jsgijCQcS+G0Y4CzR=08mvOuA7b9pA@mail.gmail.com>
 <CAAKeCHb3xbej65LyBOg1owXCmgAqOjG5CzCVQGaiJ5cF_UDrKQ@mail.gmail.com>
 <rmi4k03p69z.fsf@s1.lexort.com>
Message-ID: <CAAKeCHaz3he_woR0jFtG0at3i-Q_kiQKZGG0AOgjdVMKFs+V_Q@mail.gmail.com>

Thanks for the reply Greg, I'll elaborate a little on where I start from.

Initially, data is in WGS84 (EPSG 4326), we use PROJ API to transform
coordinates from WGS84 to a user selected transformation, in my case EPSG
7854
My problem is that GDA2020 is expressed from GDA94 using the above
mentioned transformation files.
I'll therefore need to 'jump' from WGS84 to GDA94 and from GDA94 to GDA2020
in one step, most probably using a pipeline - not sure how though...and if
possible...a sort of two-transform in one go.

And in more general terms I was questioning how PROJ is doing the link
between CRS codes and grid shift transformation files - where can I find
this information ?

Offsets that I observe from the data comparing ground truth points (in EPSG
7854) and my data (supposedly in EPSG 7854 but I doubt as I don't think it
is considering the transformation grid) are in the order of 80m to the NNE
from where it is supposed to be.

Thanks for your help !
Best regards,
Pierre C




Le mer. 29 juin 2022 ? 22:24, Greg Troxel <gdt at lexort.com> a ?crit :

>
> Pierre Chaponniere <pierrechapo at gmail.com> writes:
>
> > i am looking at transforming data into GDA2020 MGA zone 54 :
>
> I am far from a GDA expert but it does not make sense to talk about
> transforming data into a CRS without specifying the CRS the data is
> already in.
>
> > +proj=utm +zone=54 +south +ellps=GRS80 +units=m +no_defs +type=crs
>
> This is a bare projection, and GDA2020 zone 54 is a projection based on
> a datum. One is a way to take lat/lon into x/y, and the other is
> something you can use to transform to/from other datums.
>
> > But it seems this projection is associated with a transformation grid
> >
> >
> https://www.icsm.gov.au/datum/gda-transformation-products-and-tools/transformation-grids
>
> The projection is not, but GDA94 to GDA2020 transformations are, as I
> read that page.  (That makes senes to me; we have a similar situation
> in the US among former/current/future national datums.)
>
> > I have therefore dowloaded the corresponding .gsb transformation files
> >
> > https://github.com/icsm-au/transformation_grids
> >
> > However when I apply the transformation, it appears the process does not
> > use the transformation files and generate data with planimetric and
> > vertical offsets.
>
> You didn't explain offset from what and why you think the result is
> wrong.
>
> > How can I make sure the transformation grid are applied and what file
> makes
> > the link between proj code and transformation files - is this stored in
> > proj.db ?
>
> Almost certainly, label the input data as being in the CRS it is
> actually in, and find a CRS for the GDA2020 zone that labels it as being
> not just in UTM, but UTM GDA2020.  At least then you'll be asking proj
> to do the right thing.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220630/caad92ae/attachment.htm>

From roger.oberholtzer at gmail.com  Thu Jun 30 03:04:33 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Thu, 30 Jun 2022 12:04:33 +0200
Subject: [PROJ] Proj for Windows
Message-ID: <CANkOqwNumbXsDtR=455CaknWNUiRb2-TPJMTw1t7MSWLTgHF2g@mail.gmail.com>

Hi all,

I usually use proj on Linux. Specifically, openSUSE. All is working great.

openSUSE have a build service where I had been building proj for
Widows. Nice service. Interestingly, it makes an RPM of the Windows
package. Which actually works fine for me as I ma only after the
files. But I digress.

Anyway, the last one I built that way was 4.9. It's obviously time for
an update!

The installable components of 4.9 were rather small. So we could
include the needed components in our installer. Newer proj releases
potentially have more that can be installed.

So I'm guessing that a separate proj installer would be a better
choice. Before re-inventing the wheel, I thought I would see if there
already is a Windows installer. Which took me here:

https://trac.osgeo.org/osgeo4w/wiki/pkg-proj

Seems that the link to any install files no longer exists. Is that a
stale link? Or is it no longer something that will be available?

If it's not going to be available, I will update the following to make
RPMs with the needed files. And then make installers from that. But a
general release seems like a good idea.

If you are curious:

My Windows port (old!):

https://build.opensuse.org/package/show/home:rogeroberholtzer:mingw64/mingw64-proj

OpenSUSE's proj build:

https://build.opensuse.org/package/show/openSUSE%3AFactory/proj

The great thing about this service is that if any dependencies change,
the package is automatically rebuilt. And all packages are available
in signed repositories. Many Linux distros are supported. Not just
openSUSE.

I don't work at SUSE. I'm just passing on info about a potentially
interesting place to build proj for many platforms.

Still curious about the missing link mentioned above.

-- 
Roger Oberholtzer

From even.rouault at spatialys.com  Thu Jun 30 03:26:27 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Jun 2022 12:26:27 +0200
Subject: [PROJ] grid shift with GDA2020
In-Reply-To: <CAAKeCHaz3he_woR0jFtG0at3i-Q_kiQKZGG0AOgjdVMKFs+V_Q@mail.gmail.com>
References: <CAAKeCHZaC3D=DyT27Pq=jsgijCQcS+G0Y4CzR=08mvOuA7b9pA@mail.gmail.com>
 <CAAKeCHb3xbej65LyBOg1owXCmgAqOjG5CzCVQGaiJ5cF_UDrKQ@mail.gmail.com>
 <rmi4k03p69z.fsf@s1.lexort.com>
 <CAAKeCHaz3he_woR0jFtG0at3i-Q_kiQKZGG0AOgjdVMKFs+V_Q@mail.gmail.com>
Message-ID: <f194f228-5e6b-3637-4dad-9cf5cd243f2e@spatialys.com>

Pierre,

This is a complicated "equation" due to WGS 84 being a 
dynamic/non-plate-fixed datum and GDA94 & GDA2020 being static/plate-fixed

- WGS 84 ~= GDA94 at epoch 1994.0, that is the transformation between 
both is the identity

- WGS 84 ~= GDA2020 at epoch 2020.0, that is the transformation between 
both is the identity

- but GDA94 and GDA2020 have a ~= 1.8 shift, that is modeled either as a 
Helmert transformation or with one of the 2 available GDA94-GDA2020 
shift grids, all of them available in PROJ 
(https://github.com/OSGeo/PROJ-data/tree/master/au_icsm)

You can play with "projinfo -s GDA94 -t GDA2020 --spatial-test 
intersects" to see the different transformation pipelines

A 80 m error indicates that you have a more fundamental issue somewhere.

 > I'll therefore need to 'jump' from WGS84 to GDA94 and from GDA94 to 
GDA2020 in one step, most probably using a pipeline - not sure how 
though...and if possible...a sort of two-transform in one go.

If you do "projinfo -s "WGS 84" -t GDA2020 --spatial-test intersects", 
you'll see 2 different options: one that assumes that WGS 84 ~= GDA94 
and then uses one of the GDA94->GDA2020 shift method, or the other one 
that assumes that WGS 84 ~= GDA2020 and does a null transformation. It 
really depends on what "kind of WGS84" data you have.

 > And in more general terms I was questioning how PROJ is doing the 
link between CRS codes and grid shift transformation files - where can I 
find this information ?

See 
https://github.com/OSGeo/PROJ/blob/master/data/sql/grid_transformation.sql 
for all grids known of EPSG and 
https://github.com/OSGeo/PROJ/blob/master/data/sql/grid_alternatives.sql 
for the mapping between a subset of those to PROJ's handled grids. 
Helmert transformations are in 
https://github.com/OSGeo/PROJ/blob/master/data/sql/helmert_transformation.sql 
. But using projinfo is a convenient way of querying the database + 
benefiting from extra magic done by PROJ to chain up to 2 
transformations when there's no direct one.

Even

Le 30/06/2022 ? 09:19, Pierre Chaponniere a ?crit?:
> Thanks for the reply Greg, I'll elaborate a little on where I start from.
>
> Initially, data is in WGS84 (EPSG 4326), we use PROJ API to transform 
> coordinates from WGS84 to a user selected transformation, in my case 
> EPSG 7854
> My problem is that GDA2020 is expressed from GDA94 using the above 
> mentioned?transformation files.
> I'll therefore need to 'jump' from WGS84 to GDA94 and from GDA94 to 
> GDA2020 in one step, most probably using a pipeline - not sure how 
> though...and if possible...a sort of two-transform in one go.
>
> And in more general terms I was questioning how PROJ is doing the link 
> between CRS codes and grid shift transformation files - where can I 
> find this information ?
>
> Offsets that I observe from the data comparing ground truth points (in 
> EPSG 7854) and my data (supposedly in EPSG 7854 but I doubt as?I don't 
> think it is considering the transformation grid) are in the order of 
> 80m to the NNE from where it is supposed to be.
>
> Thanks for your help !
> Best regards,
> Pierre C
>
>
>
>
> Le?mer. 29 juin 2022 ??22:24, Greg Troxel <gdt at lexort.com> a ?crit?:
>
>
>     Pierre Chaponniere <pierrechapo at gmail.com> writes:
>
>     > i am looking at transforming data into GDA2020 MGA zone 54 :
>
>     I am far from a GDA expert but it does not make sense to talk about
>     transforming data into a CRS without specifying the CRS the data is
>     already in.
>
>     > +proj=utm +zone=54 +south +ellps=GRS80 +units=m +no_defs +type=crs
>
>     This is a bare projection, and GDA2020 zone 54 is a projection
>     based on
>     a datum. One is a way to take lat/lon into x/y, and the other is
>     something you can use to transform to/from other datums.
>
>     > But it seems this projection is associated with a transformation
>     grid
>     >
>     >
>     https://www.icsm.gov.au/datum/gda-transformation-products-and-tools/transformation-grids
>
>     The projection is not, but GDA94 to GDA2020 transformations are, as I
>     read that page.? (That makes senes to me; we have a similar situation
>     in the US among former/current/future national datums.)
>
>     > I have therefore dowloaded the corresponding .gsb transformation
>     files
>     >
>     > https://github.com/icsm-au/transformation_grids
>     >
>     > However when I apply the transformation, it appears the process
>     does not
>     > use the transformation files and generate data with planimetric and
>     > vertical offsets.
>
>     You didn't explain offset from what and why you think the result is
>     wrong.
>
>     > How can I make sure the transformation grid are applied and what
>     file makes
>     > the link between proj code and transformation files - is this
>     stored in
>     > proj.db ?
>
>     Almost certainly, label the input data as being in the CRS it is
>     actually in, and find a CRS for the GDA2020 zone that labels it as
>     being
>     not just in UTM, but UTM GDA2020.? At least then you'll be asking proj
>     to do the right thing.
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220630/f553dcdc/attachment-0001.htm>

From even.rouault at spatialys.com  Thu Jun 30 03:31:21 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Jun 2022 12:31:21 +0200
Subject: [PROJ] Proj for Windows
In-Reply-To: <CANkOqwNumbXsDtR=455CaknWNUiRb2-TPJMTw1t7MSWLTgHF2g@mail.gmail.com>
References: <CANkOqwNumbXsDtR=455CaknWNUiRb2-TPJMTw1t7MSWLTgHF2g@mail.gmail.com>
Message-ID: <07a4d3ff-41a4-df5e-ebde-4321be195415@spatialys.com>

Not standalone installers, but you can easily get recent PROJ binaries 
for Windows from Conda or vcpkg for example: https://proj.org/install.html

the Trac wiki link you mention is outdated. OSGeo4W PROJ binaries are at 
http://download.osgeo.org/osgeo4w/v2/x86_64/release/proj/ (that you'll 
download using the OSGeo4W installer 
(https://trac.osgeo.org/osgeo4w/#QuickStartforOSGeo4WUsers) and their 
build recipee at 
https://github.com/jef-n/OSGeo4W/tree/master/src/proj/osgeo4w

Le 30/06/2022 ? 12:04, Roger Oberholtzer a ?crit?:
> Hi all,
>
> I usually use proj on Linux. Specifically, openSUSE. All is working great.
>
> openSUSE have a build service where I had been building proj for
> Widows. Nice service. Interestingly, it makes an RPM of the Windows
> package. Which actually works fine for me as I ma only after the
> files. But I digress.
>
> Anyway, the last one I built that way was 4.9. It's obviously time for
> an update!
>
> The installable components of 4.9 were rather small. So we could
> include the needed components in our installer. Newer proj releases
> potentially have more that can be installed.
>
> So I'm guessing that a separate proj installer would be a better
> choice. Before re-inventing the wheel, I thought I would see if there
> already is a Windows installer. Which took me here:
>
> https://trac.osgeo.org/osgeo4w/wiki/pkg-proj
>
> Seems that the link to any install files no longer exists. Is that a
> stale link? Or is it no longer something that will be available?
>
> If it's not going to be available, I will update the following to make
> RPMs with the needed files. And then make installers from that. But a
> general release seems like a good idea.
>
> If you are curious:
>
> My Windows port (old!):
>
> https://build.opensuse.org/package/show/home:rogeroberholtzer:mingw64/mingw64-proj
>
> OpenSUSE's proj build:
>
> https://build.opensuse.org/package/show/openSUSE%3AFactory/proj
>
> The great thing about this service is that if any dependencies change,
> the package is automatically rebuilt. And all packages are available
> in signed repositories. Many Linux distros are supported. Not just
> openSUSE.
>
> I don't work at SUSE. I'm just passing on info about a potentially
> interesting place to build proj for many platforms.
>
> Still curious about the missing link mentioned above.
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.


From gdt at lexort.com  Thu Jun 30 04:44:50 2022
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 30 Jun 2022 07:44:50 -0400
Subject: [PROJ] grid shift with GDA2020
In-Reply-To: <CAAKeCHaz3he_woR0jFtG0at3i-Q_kiQKZGG0AOgjdVMKFs+V_Q@mail.gmail.com>
 (Pierre Chaponniere's message of "Thu, 30 Jun 2022 09:19:43 +0200")
References: <CAAKeCHZaC3D=DyT27Pq=jsgijCQcS+G0Y4CzR=08mvOuA7b9pA@mail.gmail.com>
 <CAAKeCHb3xbej65LyBOg1owXCmgAqOjG5CzCVQGaiJ5cF_UDrKQ@mail.gmail.com>
 <rmi4k03p69z.fsf@s1.lexort.com>
 <CAAKeCHaz3he_woR0jFtG0at3i-Q_kiQKZGG0AOgjdVMKFs+V_Q@mail.gmail.com>
Message-ID: <rmipmiql6j1.fsf@s1.lexort.com>


Pierre Chaponniere <pierrechapo at gmail.com> writes:

> Initially, data is in WGS84 (EPSG 4326), we use PROJ API to transform
> coordinates from WGS84 to a user selected transformation, in my case EPSG
> 7854
> My problem is that GDA2020 is expressed from GDA94 using the above
> mentioned transformation files.
> I'll therefore need to 'jump' from WGS84 to GDA94 and from GDA94 to GDA2020
> in one step, most probably using a pipeline - not sure how though...and if
> possible...a sort of two-transform in one go.

In addition to what Even said, note that WGS84 is an ensemble with a
large number of members.  In particular it contains WGS84(TRANSIT), the
original, and modern members such as WGS84(G2159).  There is a
significant, 2m very ish, shift, between the original member and the
modern members.  Labeling data with an ensemble means that the data is
in some frame that is an ensemble member but you don't know which one.
This is almost certainly not actually the case.  So you may want to look
into the data and understand what frame it actually is in.  Being
natively in WGS84 means it is is from non-differential GPS, and the date
of acquisition will lead you to the correct frame.  If it was natively
in something else and transformed, you might seek to back out that
transform and start from the native frame.

Assuming modern-ish WGS84, it seems that the transform to GDA2020 is
best approached via ITRF2014.  7854 contains:
  Approximation at the 3m level assuming WGS 84 is equivalent to
  ITRF2014 within the accuracy of the transformation. See GDA2020 to WGS
  84 (G1762) (1) (code 8448) for a better approximation and ITRF2014 to
  GDA2020 (1) (code 8049) for actual relationship.

However, none of that explains 80m.

Also, if you begin to care about a meter, you will need to process your
data with epoch labels.  Around me, people that care about things at the
meter level make and store measurements in the national crust-~fixed
frame.  But, if your data is truly WGS84, you have no hope of a meter,
unless you've done PPP with the broadcast orbits or something like that,
which would be highly unusual.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220630/dbef17d3/attachment.sig>

