From icetiger at nate.com  Mon Aug  7 01:53:23 2017
From: icetiger at nate.com (=?ks_c_5601-1987?B?v/i/tcH4?=)
Date: Mon, 7 Aug 2017 17:53:23 +0900
Subject: [Proj] Special(User Defined?) Coordinate?
Message-ID: <!&!AAAAAAAAAAAYAAAAAAAAAHbLl7YXb2VBlw4ugGQJI+8CgQAAEAAAAKAyDQ5h4tdLjAYhYM30sbgBAAAAAA==@nate.com>

 

Hello

I am novice in Proj4 and English

 

in My TIF Data File

Coordinate is 0~3600 (West-East), and 0~1800 (South-North)

 

I want to use EPSG 4326 (WGS84)

 

but I can not assign source Projection

So, I can not use GDALWarp.exe Command Line Tool

 

Now I move every Cells one by one method

 

Can I Make Proj4 String?

 

Best Regards

ICE

 

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170807/b694c2b7/attachment.html>

From jagoncal at gmail.com  Mon Aug  7 14:54:12 2017
From: jagoncal at gmail.com (=?UTF-8?Q?Jose_Gon=C3=A7alves?=)
Date: Mon, 7 Aug 2017 22:54:12 +0100
Subject: [Proj] Special(User Defined?) Coordinate?
In-Reply-To: <!&!AAAAAAAAAAAYAAAAAAAAAHbLl7YXb2VBlw4ugGQJI+8CgQAAEAAAAKAyDQ5h4tdLjAYhYM30sbgBAAAAAA==@nate.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAAHbLl7YXb2VBlw4ugGQJI+8CgQAAEAAAAKAyDQ5h4tdLjAYhYM30sbgBAAAAAA==@nate.com>
Message-ID: <CALHLaOSNouCNDDM2dJYnN63ngFeZ5-nPGgypB_XBvxu2-YhR4g@mail.gmail.com>

Hi
You can use command gdal_translate with option -a_ullr to replace the upper
left and lower right coordinates. See the usage in
http://www.gdal.org/gdal_translate.html

Regards

Jose' Gonçalves


2017-08-07 9:53 GMT+01:00 원영진 <icetiger at nate.com>:

>
>
> Hello
>
> I am novice in Proj4 and English
>
>
>
> in My TIF Data File
>
> Coordinate is 0~3600 (West-East), and 0~1800 (South-North)
>
>
>
> I want to use EPSG 4326 (WGS84)
>
>
>
> but I can not assign source Projection
>
> So, I can not use GDALWarp.exe Command Line Tool
>
>
>
> Now I move every Cells one by one method
>
>
>
> Can I Make Proj4 String?
>
>
>
> Best Regards
>
> ICE
>
>
>
>
>
>
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170807/0251cea5/attachment.html>

From stevejking at talktalk.net  Tue Aug  8 14:21:59 2017
From: stevejking at talktalk.net (stevejking)
Date: Tue, 8 Aug 2017 14:21:59 -0700 (MST)
Subject: [Proj] WG: VB Net wrapper Proj.4
In-Reply-To: <b32490d873c641c8adb78e6e6654d806@ITR-EX01.itr.ch>
References: <6d59164bfa7441ad8bd1e7afc169003b@ITR-EX01.itr.ch>
	<65f271dd-3001-c30c-af65-a64f8802e0b9@xs4all.nl>
	<b32490d873c641c8adb78e6e6654d806@ITR-EX01.itr.ch>
Message-ID: <1502227319802-5330866.post@n6.nabble.com>

Rüesch Thomas wrote
> Hi Bas
> Thank you for the fast answer.
> I got the file, which uses proj 4.4.6. with 32Bit
> Is the a newer Version of the wrapper dll or one with 64 bit support?
> 
> Best regards
> Thomas

After a bit of Googling, I've updated and compiled Eric's VB api wrapper
against the current Proj 4.9.3. But strange the dll no longer seems to need
Proj.dll, so maybe I did something wrong? The files are here: 
https://1drv.ms/f/s!AvBQ7Pt73oO6ghpCVRs1YmTNyVd_

64 and 32 bit. I've only tested the 32bit dll.

Regards
Steve



--
View this message in context: http://osgeo-org.1560.x6.nabble.com/WG-VB-Net-wrapper-Proj-4-tp5320211p5330866.html
Sent from the PROJ.4 mailing list archive at Nabble.com.


From support at mnspoint.com  Tue Aug  8 21:57:16 2017
From: support at mnspoint.com (support at mnspoint.com)
Date: Wed, 09 Aug 2017 07:57:16 +0300
Subject: [Proj] Gerald I Evenden OBIT
In-Reply-To: <20170710223434.YXAMY.16912.root@pamxwww07-z01>
References: <20170710223434.YXAMY.16912.root@pamxwww07-z01>
Message-ID: <72fef2c01483233c028b0d4b180f9e96@mnspoint.com>

Hi,

Thank you for the information! We all would like to send our deepest 
condolences to his closest ones. We remember him as the creator of the 
Proj library. May he rest in peace.

I reprint your link here so that it will be recorded in the list 
archives. And so it was already a year ago so the information is more 
history now. Thank you for the message again, we had our doubts but we 
did not know for sure.

"Gerald I. Evenden (1935 - 2016)

Gerald Ian Evenden passed away quietly on April 7, 2016 at home in North 
Falmouth after a long illness.

Born in Lewiston, Idaho on July 17, 1935, he was a 1957 graduate of San 
Jose State in California and attended the Colorado School of Mines in 
Colorado.  He was a lifelong employee of the United States Geological 
Survey.  Gerald was the author of the UNIX program PROJ, which allows a 
computer user to convert latitude/longitude coordinates into any number 
of map projection coordinates.  He first published the program in 1983, 
along with a follow up user’s manual and program updates in 1990.  The 
PROJ program is still extensively in use today by private and public 
mapping organizations, and provides the cartographic framework for many 
commercial mapping applications.  He retired from the U.S.G.S.  Woods 
Hole Coastal and Marine Service Center in January of 1993.

He served on the first Falmouth Town Committee to relocate the Falmouth 
Firehouse Headquarters.  With a special interest in Basset Hounds, he 
was a volunteer for New England Basset Hound Rescue, fostering Bassets 
until they were adopted as well as doing home visits to people who 
wanted to adopt a hound.

He leaves his wife of 51 years, Phyllis Wells Evenden and his sons Keith 
Evenden and his wife Jean of Corvallis, Oregon and Muir Evenden and his 
wife Asia of Malbork, Poland.

Visiting Hours will be on Sunday, April 17, from 2 pm to 4 pm at Chapman 
Cole and Gleason Funeral Home, 475 Main Street, Falmouth, MA.  Funeral 
arrangements are private.

In lieu of flowers, memorial donations may be made to New England Basset 
Hound Rescue:  NEBHR, P.O. Box 321, Rutland, MA 01543."

Janne.

pbander at cavtel.net kirjoitti 2017-07-11 05:34:
> - Hi Everyone,
> I do not know if everyone on this list knew Gerald I Evenden, but if
> you were wondering about his absence on the list, it is because he
> passed away last year. Here is a link for you:
> https://www.ccgfuneralhome.com/obit/gerald-i.-evenden
> 
> Take Care,
> Paul B. Anderson
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From support at mnspoint.com  Tue Aug  8 22:19:04 2017
From: support at mnspoint.com (support at mnspoint.com)
Date: Wed, 09 Aug 2017 08:19:04 +0300
Subject: [Proj] WG: VB Net wrapper Proj.4
In-Reply-To: <1502227319802-5330866.post@n6.nabble.com>
References: <6d59164bfa7441ad8bd1e7afc169003b@ITR-EX01.itr.ch>
	<65f271dd-3001-c30c-af65-a64f8802e0b9@xs4all.nl>
	<b32490d873c641c8adb78e6e6654d806@ITR-EX01.itr.ch>
	<1502227319802-5330866.post@n6.nabble.com>
Message-ID: <d16d3e52565f86138dfc3eb5f0138a34@mnspoint.com>

Hello,

ok .. this looks like a general library problem. The most common reason 
for library problems with MSVC is that you are mixing different kind of 
libraries and the compiler or linker gets confused. Out of my head .. 
make sure ALL parts of the package use same kind of settings ... meaning 
that for example ALL libraries are either debug or release .. and that 
all links are either static or dll .. and also make sure that all parts 
have similar compiler settings etc. etc -- there is much information 
about this problem somewhere in MS help files .. just use some good 
keywords and searches -- what ever the MSVC compiler / linker settings 
are so confusing that it generates that error. This is rather usual 
error when compiling with Visual Studio and there are several libraries 
that are built with different switches..

Janne.

------------------------------

stevejking kirjoitti 2017-08-09 00:21:
> Rüesch Thomas wrote
>> Hi Bas
>> Thank you for the fast answer.
>> I got the file, which uses proj 4.4.6. with 32Bit
>> Is the a newer Version of the wrapper dll or one with 64 bit support?
>> 
>> Best regards
>> Thomas
> 
> After a bit of Googling, I've updated and compiled Eric's VB api 
> wrapper
> against the current Proj 4.9.3. But strange the dll no longer seems to 
> need
> Proj.dll, so maybe I did something wrong? The files are here:
> https://1drv.ms/f/s!AvBQ7Pt73oO6ghpCVRs1YmTNyVd_
> 
> 64 and 32 bit. I've only tested the 32bit dll.
> 
> Regards
> Steve
> 
> 
> 
> --
> View this message in context:
> http://osgeo-org.1560.x6.nabble.com/WG-VB-Net-wrapper-Proj-4-tp5320211p5330866.html
> Sent from the PROJ.4 mailing list archive at Nabble.com.
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From support at mnspoint.com  Tue Aug  8 22:30:27 2017
From: support at mnspoint.com (support at mnspoint.com)
Date: Wed, 09 Aug 2017 08:30:27 +0300
Subject: [Proj] Gerald I Evenden OBIT
In-Reply-To: <20170710223434.YXAMY.16912.root@pamxwww07-z01>
References: <20170710223434.YXAMY.16912.root@pamxwww07-z01>
Message-ID: <946df78079abf49255d43fb077b40f8d@mnspoint.com>

BTW:

..do you know where Frank is or what he is doing?

Janne.

pbander at cavtel.net kirjoitti 2017-07-11 05:34:
> - Hi Everyone,
> I do not know if everyone on this list knew Gerald I Evenden, but if
> you were wondering about his absence on the list, it is because he
> passed away last year. Here is a link for you:
> https://www.ccgfuneralhome.com/obit/gerald-i.-evenden
> 
> Take Care,
> Paul B. Anderson
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From support at mnspoint.com  Tue Aug  8 23:26:20 2017
From: support at mnspoint.com (support at mnspoint.com)
Date: Wed, 09 Aug 2017 09:26:20 +0300
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA72031B5@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EA72031B5@S000014.PROD.SITAD.DK>
Message-ID: <793e41cb8b71b184ebc9ef233891e2eb@mnspoint.com>

Hello, 

The Proj.4 library is more a standard nowadays! You don't start to
rewrite it - it is already written! -- You just add new projections and
fix possible old bugs etc. 

Take for example GNU gcc .. they have lot of material which is coming
from the 1970's - string libraries for example! They NEVER touch those!!
NEVER .. I repeat. 

Or how about OpenGL libraries .. they also NEVER change anything old ..
they just keep adding new features (if anything). And that is called
stability of the library. A good library is very stable and does NOT
change 3 times a year .. unless something new is added. And since good
projections are not very often discovered anymore .. the Proj.4 stays as
it is. Nobody wants to see some random madness there when he is trusting
for example his life somewhere navigating using that projection on his
navigation display or maps. 

Or maybe some picture file libraries .. like JPG standard or PNG
standard. All those libraries are VERY old and nobody moves a finger!
Since those all are now standard 

Or let's see how zlib is nowadays .. it is exactly the same as it was 20
years ago. Nobody makes changes there since it works very well and
modern compilers can very well handle all that "old" or "new" stuff all
together. 

So why all want to keep libraries stable? Because then they can trust
that it does its work as it used to do. Nobody wants to have new
versions unless that really adds something useful, like a new (useful)
projection. 

(So go to hell .. and stay there!) 

Janne. 

--------------------------------------------------------- 

Kristian Evers kirjoitti 2017-07-10 12:09:

> All, 
> 
> I've set up a project on GitHub in an effort to organize the work that needs to be done before the next release. A GitHub project is nothing fancy, it's just a Kanban-board of already existing tickets from the issue tracker. Find it at: 
> 
> https://github.com/OSGeo/proj.4/projects/1 
> 
> If you would like to contribute this is a good place to start. If there is something you would like to see fixed, added or changed in the next version now is the time to say so. Please use the GitHub issue tracker for that, either by adding new tickets or leaving a comment in existing ones you would like to get prioritized. I'll make sure to add them to the relevant list in the GitHub project. 
> 
> /Kristian 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

-- 
MNS Support
NNS Master Navigator Software
Copyright (c) Sapper Oy
www.mnspoint.com [1]
support at mnspoint.com 

Links:
------
[1] http://www.mnspoint.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/0bb57a31/attachment.html>

From pbander at cavtel.net  Tue Aug  8 23:26:33 2017
From: pbander at cavtel.net (pbander at cavtel.net)
Date: Wed, 9 Aug 2017 1:26:33 -0500
Subject: [Proj] Gerald I Evenden OBIT
In-Reply-To: <946df78079abf49255d43fb077b40f8d@mnspoint.com>
Message-ID: <20170809022633.0OX5B.26989.root@pamxwww03-z01>

Hi Janne,

The last thing I have heard about Frank Warmerdam was that he was working here:
https://www.planet.com/

Other than that I have no further information.

Take Care,
Paul B. Anderson FCCS (USN, Retired)
GIS Teaching Assistant
Political Science and Geography Department
Old Dominion University
My website:
http://www.csiss.org/map-projections/

---- support at mnspoint.com wrote: 
> BTW:
> 
> ..do you know where Frank is or what he is doing?
> 
> Janne.
> 
> pbander at cavtel.net kirjoitti 2017-07-11 05:34:
> > - Hi Everyone,
> > I do not know if everyone on this list knew Gerald I Evenden, but if
> > you were wondering about his absence on the list, it is because he
> > passed away last year. Here is a link for you:
> > https://www.ccgfuneralhome.com/obit/gerald-i.-evenden
> > 
> > Take Care,
> > Paul B. Anderson
> > _______________________________________________
> > Proj mailing list
> > Proj at lists.maptools.org
> > http://lists.maptools.org/mailman/listinfo/proj
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



From thy at 42.dk  Wed Aug  9 00:58:05 2017
From: thy at 42.dk (Kristian Thy)
Date: Wed, 9 Aug 2017 09:58:05 +0200
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <793e41cb8b71b184ebc9ef233891e2eb@mnspoint.com>
References: <2E885BB293AF0448A0181138489E9A0EA72031B5@S000014.PROD.SITAD.DK>
	<793e41cb8b71b184ebc9ef233891e2eb@mnspoint.com>
Message-ID: <20170809075805.GH7442@42.dk>

Is it possible to vote someone off the list? It's getting tiresome to
read Janne's inane diatribes, and I think this crosses the line from
generally unhelpful into personal attacks.

(Janne: if progress really bothers you that much, nobody's forcing you
to use the new, improved proj library. Your website has auto-playing
audio, so you seem to be pretty comfortable living in the 1990s.)

Cheers,
Kristian

On Wed, Aug 09, support at mnspoint.com wrote:
> Hello, 
> 
> The Proj.4 library is more a standard nowadays! You don't start to
> rewrite it - it is already written! -- You just add new projections and
> fix possible old bugs etc. 
> 
> Take for example GNU gcc .. they have lot of material which is coming
> from the 1970's - string libraries for example! They NEVER touch those!!
> NEVER .. I repeat. 
> 
> Or how about OpenGL libraries .. they also NEVER change anything old ..
> they just keep adding new features (if anything). And that is called
> stability of the library. A good library is very stable and does NOT
> change 3 times a year .. unless something new is added. And since good
> projections are not very often discovered anymore .. the Proj.4 stays as
> it is. Nobody wants to see some random madness there when he is trusting
> for example his life somewhere navigating using that projection on his
> navigation display or maps. 
> 
> Or maybe some picture file libraries .. like JPG standard or PNG
> standard. All those libraries are VERY old and nobody moves a finger!
> Since those all are now standard 
> 
> Or let's see how zlib is nowadays .. it is exactly the same as it was 20
> years ago. Nobody makes changes there since it works very well and
> modern compilers can very well handle all that "old" or "new" stuff all
> together. 
> 
> So why all want to keep libraries stable? Because then they can trust
> that it does its work as it used to do. Nobody wants to have new
> versions unless that really adds something useful, like a new (useful)
> projection. 
> 
> (So go to hell .. and stay there!) 
> 
> Janne. 
> 
> --------------------------------------------------------- 
> 
> Kristian Evers kirjoitti 2017-07-10 12:09:
> 
> > All, 
> > 
> > I've set up a project on GitHub in an effort to organize the work that needs to be done before the next release. A GitHub project is nothing fancy, it's just a Kanban-board of already existing tickets from the issue tracker. Find it at: 
> > 
> > https://github.com/OSGeo/proj.4/projects/1 
> > 
> > If you would like to contribute this is a good place to start. If there is something you would like to see fixed, added or changed in the next version now is the time to say so. Please use the GitHub issue tracker for that, either by adding new tickets or leaving a comment in existing ones you would like to get prioritized. I'll make sure to add them to the relevant list in the GitHub project. 
> > 
> > /Kristian 
> > _______________________________________________
> > Proj mailing list
> > Proj at lists.maptools.org
> > http://lists.maptools.org/mailman/listinfo/proj
> 
> -- 
> MNS Support
> NNS Master Navigator Software
> Copyright (c) Sapper Oy
> www.mnspoint.com [1]
> support at mnspoint.com 


From dagnew at ucsd.edu  Wed Aug  9 06:23:29 2017
From: dagnew at ucsd.edu (Duncan Agnew)
Date: Wed, 9 Aug 2017 06:23:29 -0700
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <20170809075805.GH7442@42.dk>
References: <2E885BB293AF0448A0181138489E9A0EA72031B5@S000014.PROD.SITAD.DK>
	<793e41cb8b71b184ebc9ef233891e2eb@mnspoint.com>
	<20170809075805.GH7442@42.dk>
Message-ID: <CAG6Em0B1jrc+i2ChN8oigUcVNJexyNnXjdQnv6M9Ujz0u2zLWQ@mail.gmail.com>

All:

    I do not see any personal comments in Jenne's latest, the closing
aside, though those planning the new activities no doubt feel otherwise. But
let me say, as a long-time user, that whatever new features are added are
fine
by me, PROVIDED that the final product is fully backwards-compatible, even
if
that means retaining something that would now be done differently.

    I can give two examples in which this rule has not been followed,
and as a result of which I have had to rewrite scripts that no longer
worked. One, which seems to apply in general, is the need to specify
an ellipsoid rather than being able to omit it and just have it
default to WGS84. The other is that at some point someone rewrote the
Oblique Mercator option in a way that required the command-line parameters
to be different. (I asked about this, on this list, when I first encountered
this problem, and got a response that indicated that it wasn't completely
clear what had happened--and yes, I realize that this is an argument for
the kind of systematic procedures for modification that are being proposed).
I'm sure that whoever made these changes thought they were fixing something
that should have been done differently from the beginning; but barring
actual errors, I'd say, please don't.

    Going forward, I can accept the rationales (as the package has
evolved into a datum-conversion tool) to include heights and time-dependent
coordinates, though the latter will raise a whole new level of complications
just to keep up as models for these evolve. But if this is going to mean
that (say) heights need to be included for all conversions, then this should
be something done using a different function, not proj or cs2cs. I (and
probably many others) value proj as a simple and accurate way to go between
lat/long and x/y, *without* needing to know the mathematics of (e.g.) how
some
projection is done on the ellipsoid--and likewise for going to (say) SPCS
and back using cs2cs.

    So change all you want, but make sure that existing features,
inelegant or not, remain.

Thanks
Duncan Agnew


On Wed, Aug 9, 2017 at 12:58 AM, Kristian Thy <thy at 42.dk> wrote:

> Is it possible to vote someone off the list? It's getting tiresome to
> read Janne's inane diatribes, and I think this crosses the line from
> generally unhelpful into personal attacks.
>
> (Janne: if progress really bothers you that much, nobody's forcing you
> to use the new, improved proj library. Your website has auto-playing
> audio, so you seem to be pretty comfortable living in the 1990s.)
>
> Cheers,
> Kristian
>
> On Wed, Aug 09, support at mnspoint.com wrote:
> > Hello,
> >
> > The Proj.4 library is more a standard nowadays! You don't start to
> > rewrite it - it is already written! -- You just add new projections and
> > fix possible old bugs etc.
> >
> > Take for example GNU gcc .. they have lot of material which is coming
> > from the 1970's - string libraries for example! They NEVER touch those!!
> > NEVER .. I repeat.
> >
> > Or how about OpenGL libraries .. they also NEVER change anything old ..
> > they just keep adding new features (if anything). And that is called
> > stability of the library. A good library is very stable and does NOT
> > change 3 times a year .. unless something new is added. And since good
> > projections are not very often discovered anymore .. the Proj.4 stays as
> > it is. Nobody wants to see some random madness there when he is trusting
> > for example his life somewhere navigating using that projection on his
> > navigation display or maps.
> >
> > Or maybe some picture file libraries .. like JPG standard or PNG
> > standard. All those libraries are VERY old and nobody moves a finger!
> > Since those all are now standard
> >
> > Or let's see how zlib is nowadays .. it is exactly the same as it was 20
> > years ago. Nobody makes changes there since it works very well and
> > modern compilers can very well handle all that "old" or "new" stuff all
> > together.
> >
> > So why all want to keep libraries stable? Because then they can trust
> > that it does its work as it used to do. Nobody wants to have new
> > versions unless that really adds something useful, like a new (useful)
> > projection.
> >
> > (So go to hell .. and stay there!)
> >
> > Janne.
> >
> > ---------------------------------------------------------
> >
> > Kristian Evers kirjoitti 2017-07-10 12:09:
> >
> > > All,
> > >
> > > I've set up a project on GitHub in an effort to organize the work that
> needs to be done before the next release. A GitHub project is nothing
> fancy, it's just a Kanban-board of already existing tickets from the issue
> tracker. Find it at:
> > >
> > > https://github.com/OSGeo/proj.4/projects/1
> > >
> > > If you would like to contribute this is a good place to start. If
> there is something you would like to see fixed, added or changed in the
> next version now is the time to say so. Please use the GitHub issue tracker
> for that, either by adding new tickets or leaving a comment in existing
> ones you would like to get prioritized. I'll make sure to add them to the
> relevant list in the GitHub project.
> > >
> > > /Kristian
> > > _______________________________________________
> > > Proj mailing list
> > > Proj at lists.maptools.org
> > > http://lists.maptools.org/mailman/listinfo/proj
> >
> > --
> > MNS Support
> > NNS Master Navigator Software
> > Copyright (c) Sapper Oy
> > www.mnspoint.com [1]
> > support at mnspoint.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/b000f5a7/attachment.html>

From knudsen.thomas at gmail.com  Wed Aug  9 07:50:55 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 9 Aug 2017 16:50:55 +0200
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAG6Em0B1jrc+i2ChN8oigUcVNJexyNnXjdQnv6M9Ujz0u2zLWQ@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EA72031B5@S000014.PROD.SITAD.DK>
	<793e41cb8b71b184ebc9ef233891e2eb@mnspoint.com>
	<20170809075805.GH7442@42.dk>
	<CAG6Em0B1jrc+i2ChN8oigUcVNJexyNnXjdQnv6M9Ujz0u2zLWQ@mail.gmail.com>
Message-ID: <CAH0YoENWckfkBkaGpnE9AHZd0nk4UiKYY-=0KFJ7OMq+Dx73PA@mail.gmail.com>

Duncan,

1: You may not see any personal comments in Janne’s latest rant, but
however much I would prefer to be able to agree with you, I cannot. Janne’s
closing remark is a direct, personal threat directed towards proj
developers in general and, probably, myself and Kristian Evers in
particular.

2: proj and cs2cs functionality does not change as a consequence of
introducing an additional API in the underlying library.

3: You WILL definitely see accidental, but also deliberate, functionality
changes in the future. A lot of effort has been put into making libproj
more maintainable, through refactoring, general cleanup, and documentation.
This is necessary to keep things maintainable. A large number of regression
tests keep the accidental functionality changes minimal, but you can help
by submitting additional tests.

4: You indicate that you “value proj as a simple and accurate way to go
between lat/long and x/y, *without* needing to know the mathematics of
(e.g.) how some projection is done”. While this statement definitely makes
sense in cases where you can afford to ignore your reference frame, the
“simple and accurate” statement reduces to “simple” in cases where you can
not. The Earth is dynamic, and you need kinematic reference frames to
obtain even decimetric accuracy over time spans of even just a few years.
This is one of the reasons for our current work on another API for libproj.

/Thomas

2017-08-09 15:23 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:

> All:
>
>     I do not see any personal comments in Jenne's latest, the closing
> aside, though those planning the new activities no doubt feel otherwise.
> But
> let me say, as a long-time user, that whatever new features are added are
> fine
> by me, PROVIDED that the final product is fully backwards-compatible, even
> if
> that means retaining something that would now be done differently.
>
>     I can give two examples in which this rule has not been followed,
> and as a result of which I have had to rewrite scripts that no longer
> worked. One, which seems to apply in general, is the need to specify
> an ellipsoid rather than being able to omit it and just have it
> default to WGS84. The other is that at some point someone rewrote the
> Oblique Mercator option in a way that required the command-line parameters
> to be different. (I asked about this, on this list, when I first
> encountered
> this problem, and got a response that indicated that it wasn't completely
> clear what had happened--and yes, I realize that this is an argument for
> the kind of systematic procedures for modification that are being
> proposed).
> I'm sure that whoever made these changes thought they were fixing something
> that should have been done differently from the beginning; but barring
> actual errors, I'd say, please don't.
>
>     Going forward, I can accept the rationales (as the package has
> evolved into a datum-conversion tool) to include heights and time-dependent
> coordinates, though the latter will raise a whole new level of
> complications
> just to keep up as models for these evolve. But if this is going to mean
> that (say) heights need to be included for all conversions, then this
> should
> be something done using a different function, not proj or cs2cs. I (and
> probably many others) value proj as a simple and accurate way to go between
> lat/long and x/y, *without* needing to know the mathematics of (e.g.) how
> some
> projection is done on the ellipsoid--and likewise for going to (say) SPCS
> and back using cs2cs.
>
>     So change all you want, but make sure that existing features,
> inelegant or not, remain.
>
> Thanks
> Duncan Agnew
>
>
> On Wed, Aug 9, 2017 at 12:58 AM, Kristian Thy <thy at 42.dk> wrote:
>
>> Is it possible to vote someone off the list? It's getting tiresome to
>> read Janne's inane diatribes, and I think this crosses the line from
>> generally unhelpful into personal attacks.
>>
>> (Janne: if progress really bothers you that much, nobody's forcing you
>> to use the new, improved proj library. Your website has auto-playing
>> audio, so you seem to be pretty comfortable living in the 1990s.)
>>
>> Cheers,
>> Kristian
>>
>> On Wed, Aug 09, support at mnspoint.com wrote:
>> > Hello,
>> >
>> > The Proj.4 library is more a standard nowadays! You don't start to
>> > rewrite it - it is already written! -- You just add new projections and
>> > fix possible old bugs etc.
>> >
>> > Take for example GNU gcc .. they have lot of material which is coming
>> > from the 1970's - string libraries for example! They NEVER touch those!!
>> > NEVER .. I repeat.
>> >
>> > Or how about OpenGL libraries .. they also NEVER change anything old ..
>> > they just keep adding new features (if anything). And that is called
>> > stability of the library. A good library is very stable and does NOT
>> > change 3 times a year .. unless something new is added. And since good
>> > projections are not very often discovered anymore .. the Proj.4 stays as
>> > it is. Nobody wants to see some random madness there when he is trusting
>> > for example his life somewhere navigating using that projection on his
>> > navigation display or maps.
>> >
>> > Or maybe some picture file libraries .. like JPG standard or PNG
>> > standard. All those libraries are VERY old and nobody moves a finger!
>> > Since those all are now standard
>> >
>> > Or let's see how zlib is nowadays .. it is exactly the same as it was 20
>> > years ago. Nobody makes changes there since it works very well and
>> > modern compilers can very well handle all that "old" or "new" stuff all
>> > together.
>> >
>> > So why all want to keep libraries stable? Because then they can trust
>> > that it does its work as it used to do. Nobody wants to have new
>> > versions unless that really adds something useful, like a new (useful)
>> > projection.
>> >
>> > (So go to hell .. and stay there!)
>> >
>> > Janne.
>> >
>> > ---------------------------------------------------------
>> >
>> > Kristian Evers kirjoitti 2017-07-10 12:09:
>> >
>> > > All,
>> > >
>> > > I've set up a project on GitHub in an effort to organize the work
>> that needs to be done before the next release. A GitHub project is nothing
>> fancy, it's just a Kanban-board of already existing tickets from the issue
>> tracker. Find it at:
>> > >
>> > > https://github.com/OSGeo/proj.4/projects/1
>> > >
>> > > If you would like to contribute this is a good place to start. If
>> there is something you would like to see fixed, added or changed in the
>> next version now is the time to say so. Please use the GitHub issue tracker
>> for that, either by adding new tickets or leaving a comment in existing
>> ones you would like to get prioritized. I'll make sure to add them to the
>> relevant list in the GitHub project.
>> > >
>> > > /Kristian
>> > > _______________________________________________
>> > > Proj mailing list
>> > > Proj at lists.maptools.org
>> > > http://lists.maptools.org/mailman/listinfo/proj
>> >
>> > --
>> > MNS Support
>> > NNS Master Navigator Software
>> > Copyright (c) Sapper Oy
>> > www.mnspoint.com [1]
>> > support at mnspoint.com
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/39c3d105/attachment.html>

From warmerdam at pobox.com  Wed Aug  9 08:35:34 2017
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 9 Aug 2017 08:35:34 -0700
Subject: [Proj] Gerald I Evenden OBIT
In-Reply-To: <20170809022633.0OX5B.26989.root@pamxwww03-z01>
References: <946df78079abf49255d43fb077b40f8d@mnspoint.com>
	<20170809022633.0OX5B.26989.root@pamxwww03-z01>
Message-ID: <CA+YzLBdGofEQUhMFfDRKLAU87M6+-gFxUt+E=ykH4kbBEB1F=A@mail.gmail.com>

Folks,

I am indeed working at Planet.  The job is rather all consuming, so
I'm very pleased that Howard and others have picked up where I left
off.  We are of course using many of the usual open source libraries
and tools as the basis of our data pipeline.

Best regards,
Frank


On Tue, Aug 8, 2017 at 11:26 PM,  <pbander at cavtel.net> wrote:
> Hi Janne,
>
> The last thing I have heard about Frank Warmerdam was that he was working here:
> https://www.planet.com/
>
> Other than that I have no further information.
>
> Take Care,
> Paul B. Anderson FCCS (USN, Retired)
> GIS Teaching Assistant
> Political Science and Geography Department
> Old Dominion University
> My website:
> http://www.csiss.org/map-projections/
>
> ---- support at mnspoint.com wrote:
>> BTW:
>>
>> ..do you know where Frank is or what he is doing?
>>
>> Janne.
>>
>> pbander at cavtel.net kirjoitti 2017-07-11 05:34:
>> > - Hi Everyone,
>> > I do not know if everyone on this list knew Gerald I Evenden, but if
>> > you were wondering about his absence on the list, it is because he
>> > passed away last year. Here is a link for you:
>> > https://www.ccgfuneralhome.com/obit/gerald-i.-evenden
>> >
>> > Take Care,
>> > Paul B. Anderson
>> > _______________________________________________
>> > Proj mailing list
>> > Proj at lists.maptools.org
>> > http://lists.maptools.org/mailman/listinfo/proj
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows |
and watch the world go round - Rush    | Geospatial Software Developer


From richard.greenwood at gmail.com  Wed Aug  9 17:32:16 2017
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Wed, 9 Aug 2017 18:32:16 -0600
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAH0YoENWckfkBkaGpnE9AHZd0nk4UiKYY-=0KFJ7OMq+Dx73PA@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EA72031B5@S000014.PROD.SITAD.DK>
	<793e41cb8b71b184ebc9ef233891e2eb@mnspoint.com>
	<20170809075805.GH7442@42.dk>
	<CAG6Em0B1jrc+i2ChN8oigUcVNJexyNnXjdQnv6M9Ujz0u2zLWQ@mail.gmail.com>
	<CAH0YoENWckfkBkaGpnE9AHZd0nk4UiKYY-=0KFJ7OMq+Dx73PA@mail.gmail.com>
Message-ID: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>

Remarks like Janne's lower the level of the whole list and do not belong
here.

Proj4 needs to move forward. Proj4 users, and users of software that depend
on Proj4, need to get transformation results that are accurate and match
other software. That requires better support of temporal datums which
Kristian and Thomas are laying the ground work for. In the United States,
Proj4 is still producing results that are 1 -2 meters off for coordinate
systems based on datums newer than ~1996, so from my perspective, Proj4 is
20 years behind. I am very happy to see the recent efforts to make Proj4
more accurate and keep it relevant.

I don't understand why folks like Janne can't just hang on to what ever
version of Proj4 they like and why they feel the need to discourage
progress and make personal attacks.

Rich


On Wed, Aug 9, 2017 at 8:50 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> Duncan,
>
> 1: You may not see any personal comments in Janne’s latest rant, but
> however much I would prefer to be able to agree with you, I cannot. Janne’s
> closing remark is a direct, personal threat directed towards proj
> developers in general and, probably, myself and Kristian Evers in
> particular.
>
> 2: proj and cs2cs functionality does not change as a consequence of
> introducing an additional API in the underlying library.
>
> 3: You WILL definitely see accidental, but also deliberate, functionality
> changes in the future. A lot of effort has been put into making libproj
> more maintainable, through refactoring, general cleanup, and documentation.
> This is necessary to keep things maintainable. A large number of regression
> tests keep the accidental functionality changes minimal, but you can help
> by submitting additional tests.
>
> 4: You indicate that you “value proj as a simple and accurate way to go
> between lat/long and x/y, *without* needing to know the mathematics of
> (e.g.) how some projection is done”. While this statement definitely makes
> sense in cases where you can afford to ignore your reference frame, the
> “simple and accurate” statement reduces to “simple” in cases where you can
> not. The Earth is dynamic, and you need kinematic reference frames to
> obtain even decimetric accuracy over time spans of even just a few years.
> This is one of the reasons for our current work on another API for libproj.
>
> /Thomas
>
> 2017-08-09 15:23 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:
>
>> All:
>>
>>     I do not see any personal comments in Jenne's latest, the closing
>> aside, though those planning the new activities no doubt feel otherwise.
>> But
>> let me say, as a long-time user, that whatever new features are added are
>> fine
>> by me, PROVIDED that the final product is fully backwards-compatible,
>> even if
>> that means retaining something that would now be done differently.
>>
>>     I can give two examples in which this rule has not been followed,
>> and as a result of which I have had to rewrite scripts that no longer
>> worked. One, which seems to apply in general, is the need to specify
>> an ellipsoid rather than being able to omit it and just have it
>> default to WGS84. The other is that at some point someone rewrote the
>> Oblique Mercator option in a way that required the command-line
>> parameters
>> to be different. (I asked about this, on this list, when I first
>> encountered
>> this problem, and got a response that indicated that it wasn't completely
>> clear what had happened--and yes, I realize that this is an argument for
>> the kind of systematic procedures for modification that are being
>> proposed).
>> I'm sure that whoever made these changes thought they were fixing
>> something
>> that should have been done differently from the beginning; but barring
>> actual errors, I'd say, please don't.
>>
>>     Going forward, I can accept the rationales (as the package has
>> evolved into a datum-conversion tool) to include heights and
>> time-dependent
>> coordinates, though the latter will raise a whole new level of
>> complications
>> just to keep up as models for these evolve. But if this is going to mean
>> that (say) heights need to be included for all conversions, then this
>> should
>> be something done using a different function, not proj or cs2cs. I (and
>> probably many others) value proj as a simple and accurate way to go
>> between
>> lat/long and x/y, *without* needing to know the mathematics of (e.g.) how
>> some
>> projection is done on the ellipsoid--and likewise for going to (say) SPCS
>> and back using cs2cs.
>>
>>     So change all you want, but make sure that existing features,
>> inelegant or not, remain.
>>
>> Thanks
>> Duncan Agnew
>>
>>
>> On Wed, Aug 9, 2017 at 12:58 AM, Kristian Thy <thy at 42.dk> wrote:
>>
>>> Is it possible to vote someone off the list? It's getting tiresome to
>>> read Janne's inane diatribes, and I think this crosses the line from
>>> generally unhelpful into personal attacks.
>>>
>>> (Janne: if progress really bothers you that much, nobody's forcing you
>>> to use the new, improved proj library. Your website has auto-playing
>>> audio, so you seem to be pretty comfortable living in the 1990s.)
>>>
>>> Cheers,
>>> Kristian
>>>
>>> On Wed, Aug 09, support at mnspoint.com wrote:
>>> > Hello,
>>> >
>>> > The Proj.4 library is more a standard nowadays! You don't start to
>>> > rewrite it - it is already written! -- You just add new projections and
>>> > fix possible old bugs etc.
>>> >
>>> > Take for example GNU gcc .. they have lot of material which is coming
>>> > from the 1970's - string libraries for example! They NEVER touch
>>> those!!
>>> > NEVER .. I repeat.
>>> >
>>> > Or how about OpenGL libraries .. they also NEVER change anything old ..
>>> > they just keep adding new features (if anything). And that is called
>>> > stability of the library. A good library is very stable and does NOT
>>> > change 3 times a year .. unless something new is added. And since good
>>> > projections are not very often discovered anymore .. the Proj.4 stays
>>> as
>>> > it is. Nobody wants to see some random madness there when he is
>>> trusting
>>> > for example his life somewhere navigating using that projection on his
>>> > navigation display or maps.
>>> >
>>> > Or maybe some picture file libraries .. like JPG standard or PNG
>>> > standard. All those libraries are VERY old and nobody moves a finger!
>>> > Since those all are now standard
>>> >
>>> > Or let's see how zlib is nowadays .. it is exactly the same as it was
>>> 20
>>> > years ago. Nobody makes changes there since it works very well and
>>> > modern compilers can very well handle all that "old" or "new" stuff all
>>> > together.
>>> >
>>> > So why all want to keep libraries stable? Because then they can trust
>>> > that it does its work as it used to do. Nobody wants to have new
>>> > versions unless that really adds something useful, like a new (useful)
>>> > projection.
>>> >
>>> > (So go to hell .. and stay there!)
>>> >
>>> > Janne.
>>> >
>>> > ---------------------------------------------------------
>>> >
>>> > Kristian Evers kirjoitti 2017-07-10 12:09:
>>> >
>>> > > All,
>>> > >
>>> > > I've set up a project on GitHub in an effort to organize the work
>>> that needs to be done before the next release. A GitHub project is nothing
>>> fancy, it's just a Kanban-board of already existing tickets from the issue
>>> tracker. Find it at:
>>> > >
>>> > > https://github.com/OSGeo/proj.4/projects/1
>>> > >
>>> > > If you would like to contribute this is a good place to start. If
>>> there is something you would like to see fixed, added or changed in the
>>> next version now is the time to say so. Please use the GitHub issue tracker
>>> for that, either by adding new tickets or leaving a comment in existing
>>> ones you would like to get prioritized. I'll make sure to add them to the
>>> relevant list in the GitHub project.
>>> > >
>>> > > /Kristian
>>> > > _______________________________________________
>>> > > Proj mailing list
>>> > > Proj at lists.maptools.org
>>> > > http://lists.maptools.org/mailman/listinfo/proj
>>> >
>>> > --
>>> > MNS Support
>>> > NNS Master Navigator Software
>>> > Copyright (c) Sapper Oy
>>> > www.mnspoint.com [1]
>>> > support at mnspoint.com
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
Richard W. Greenwood, PLS
www.greenwoodmap.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/fee92c60/attachment.html>

From strebe at aol.com  Wed Aug  9 19:16:45 2017
From: strebe at aol.com (strebe at aol.com)
Date: Wed, 9 Aug 2017 22:16:45 -0400
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
Message-ID: <15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>

I don’t support Janne’s presentation. He does have a point, though. Actually, I think it’s Gerald Evenden’s point: Datum transformation is completely separable from map projections. Both functions could exist independently but interoperate smoothly with only light coordination. There is little benefit in conflating them and much benefit to keeping them separate.

Why can’t Janne, Duncan and others just stick with old versions? Because then they don’t get bug fixes, security fixes, new projections, performance enhancements, or other maintenance. Why don’t they just fork out the parts they need and go their separate ways? Because then the code bases diverge such that effort relevant to both is duplicated or ignored.

It’s probably too late to shove that toothpaste back into the tube, although, if the proj4 community were motivated to make it happen, it seems like it could.

Best,
— daan Strebe

 

 

 

-----Original Message-----
From: Richard Greenwood <richard.greenwood at gmail.com>
To: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Sent: Wed, Aug 9, 2017 5:36 pm
Subject: Re: [Proj] GitHub "project" for the next release



Remarks like Janne's lower the level of the whole list and do not belong here. 


Proj4 needs to move forward. Proj4 users, and users of software that depend on Proj4, need to get transformation results that are accurate and match other software. That requires better support of temporal datums which Kristian and Thomas are laying the ground work for. In the United States, Proj4 is still producing results that are 1 -2 meters off for coordinate systems based on datums newer than ~1996, so from my perspective, Proj4 is 20 years behind. I am very happy to see the recent efforts to make Proj4 more accurate and keep it relevant.


I don't understand why folks like Janne can't just hang on to what ever version of Proj4 they like and why they feel the need to discourage progress and make personal attacks.


Rich
 



On Wed, Aug 9, 2017 at 8:50 AM, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:


Duncan,


1: You may not see any personal comments in Janne’s latest rant, but however much I would prefer to be able to agree with you, I cannot. Janne’s closing remark is a direct, personal threat directed towards proj developers in general and, probably, myself and Kristian Evers in particular.


2: proj and cs2cs functionality does not change as a consequence of introducing an additional API in the underlying library.


3: You WILL definitely see accidental, but also deliberate, functionality changes in the future. A lot of effort has been put into making libproj more maintainable, through refactoring, general cleanup, and documentation. This is necessary to keep things maintainable. A large number of regression tests keep the accidental functionality changes minimal, but you can help by submitting additional tests.


4: You indicate that you “value proj as a simple and accurate way to go between lat/long and x/y, *without* needing to know the mathematics of (e.g.) how some projection is done”. While this statement definitely makes sense in cases where you can afford to ignore your reference frame, the “simple and accurate” statement reduces to “simple” in cases where you can not. The Earth is dynamic, and you need kinematic reference frames to obtain even decimetric accuracy over time spans of even just a few years. This is one of the reasons for our current work on another API for libproj.


/Thomas




2017-08-09 15:23 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:

All:

    I do not see any personal comments in Jenne's latest, the closing
aside, though those planning the new activities no doubt feel otherwise. But
let me say, as a long-time user, that whatever new features are added are fine
by me, PROVIDED that the final product is fully backwards-compatible, even if
that means retaining something that would now be done differently.

    I can give two examples in which this rule has not been followed,
and as a result of which I have had to rewrite scripts that no longer
worked. One, which seems to apply in general, is the need to specify
an ellipsoid rather than being able to omit it and just have it
default to WGS84. The other is that at some point someone rewrote the
Oblique Mercator option in a way that required the command-line parameters 
to be different. (I asked about this, on this list, when I first encountered
this problem, and got a response that indicated that it wasn't completely
clear what had happened--and yes, I realize that this is an argument for
the kind of systematic procedures for modification that are being proposed).
I'm sure that whoever made these changes thought they were fixing something
that should have been done differently from the beginning; but barring
actual errors, I'd say, please don't.

    Going forward, I can accept the rationales (as the package has
evolved into a datum-conversion tool) to include heights and time-dependent
coordinates, though the latter will raise a whole new level of complications
just to keep up as models for these evolve. But if this is going to mean
that (say) heights need to be included for all conversions, then this should
be something done using a different function, not proj or cs2cs. I (and
probably many others) value proj as a simple and accurate way to go between
lat/long and x/y, *without* needing to know the mathematics of (e.g.) how some
projection is done on the ellipsoid--and likewise for going to (say) SPCS
and back using cs2cs.

    So change all you want, but make sure that existing features,
inelegant or not, remain.

Thanks
Duncan Agnew





On Wed, Aug 9, 2017 at 12:58 AM, Kristian Thy <thy at 42.dk> wrote:

Is it possible to vote someone off the list? It's getting tiresome to
read Janne's inane diatribes, and I think this crosses the line from
generally unhelpful into personal attacks.

(Janne: if progress really bothers you that much, nobody's forcing you
to use the new, improved proj library. Your website has auto-playing
audio, so you seem to be pretty comfortable living in the 1990s.)

Cheers,
Kristian

On Wed, Aug 09, support at mnspoint.com wrote:
> Hello,
>
> The Proj.4 library is more a standard nowadays! You don't start to
> rewrite it - it is already written! -- You just add new projections and
> fix possible old bugs etc.
>
> Take for example GNU gcc .. they have lot of material which is coming
> from the 1970's - string libraries for example! They NEVER touch those!!
> NEVER .. I repeat.
>
> Or how about OpenGL libraries .. they also NEVER change anything old ..
> they just keep adding new features (if anything). And that is called
> stability of the library. A good library is very stable and does NOT
> change 3 times a year .. unless something new is added. And since good
> projections are not very often discovered anymore .. the Proj.4 stays as
> it is. Nobody wants to see some random madness there when he is trusting
> for example his life somewhere navigating using that projection on his
> navigation display or maps.
>
> Or maybe some picture file libraries .. like JPG standard or PNG
> standard. All those libraries are VERY old and nobody moves a finger!
> Since those all are now standard
>
> Or let's see how zlib is nowadays .. it is exactly the same as it was 20
> years ago. Nobody makes changes there since it works very well and
> modern compilers can very well handle all that "old" or "new" stuff all
> together.
>
> So why all want to keep libraries stable? Because then they can trust
> that it does its work as it used to do. Nobody wants to have new
> versions unless that really adds something useful, like a new (useful)
> projection.
>
> (So go to hell .. and stay there!)
>
> Janne.
>
> ---------------------------------------------------------
>
> Kristian Evers kirjoitti 2017-07-10 12:09:
>
> > All,
> >
> > I've set up a project on GitHub in an effort to organize the work that needs to be done before the next release. A GitHub project is nothing fancy, it's just a Kanban-board of already existing tickets from the issue tracker. Find it at:
> >
> > https://github.com/OSGeo/proj.4/projects/1
> >
> > If you would like to contribute this is a good place to start. If there is something you would like to see fixed, added or changed in the next version now is the time to say so. Please use the GitHub issue tracker for that, either by adding new tickets or leaving a comment in existing ones you would like to get prioritized. I'll make sure to add them to the relevant list in the GitHub project.
> >
> > /Kristian
> > _______________________________________________
> > Proj mailing list
> > Proj at lists.maptools.org
> > http://lists.maptools.org/mailman/listinfo/proj
>
> --
> MNS Support
> NNS Master Navigator Software
> Copyright (c) Sapper Oy
> www.mnspoint.com [1]
> support at mnspoint.com
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj





_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj





_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj






-- 

Richard W. Greenwood, PLS
www.greenwoodmap.com


_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/4eae7a66/attachment.html>

From tobler at geog.ucsb.edu  Wed Aug  9 20:39:41 2017
From: tobler at geog.ucsb.edu (Waldo Tobler)
Date: Wed, 9 Aug 2017 20:39:41 -0700
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
References: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
	<15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
Message-ID: <CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>

Contrary to expectations there is a new projection worth adding:
The Tobler-Mercator
http://dx.doi.org/10.1080/15230406.2017.1308837
Waldo

On Wed, Aug 9, 2017 at 7:16 PM, <strebe at aol.com> wrote:

> I don’t support Janne’s presentation. He does have a point, though.
> Actually, I think it’s Gerald Evenden’s point: Datum transformation is
> completely separable from map projections. Both functions could exist
> independently but interoperate smoothly with only light coordination. There
> is little benefit in conflating them and much benefit to keeping them
> separate.
>
> Why can’t Janne, Duncan and others just stick with old versions? Because
> then they don’t get bug fixes, security fixes, new projections, performance
> enhancements, or other maintenance. Why don’t they just fork out the parts
> they need and go their separate ways? Because then the code bases diverge
> such that effort relevant to both is duplicated or ignored.
>
> It’s probably too late to shove that toothpaste back into the tube,
> although, if the proj4 community were motivated to make it happen, it seems
> like it could.
>
> Best,
> — daan Strebe
>
>
>
> -----Original Message-----
> From: Richard Greenwood <richard.greenwood at gmail.com>
> To: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
> Sent: Wed, Aug 9, 2017 5:36 pm
> Subject: Re: [Proj] GitHub "project" for the next release
>
> Remarks like Janne's lower the level of the whole list and do not belong
> here.
>
> Proj4 needs to move forward. Proj4 users, and users of software that
> depend on Proj4, need to get transformation results that are accurate and
> match other software. That requires better support of temporal datums which
> Kristian and Thomas are laying the ground work for. In the United States,
> Proj4 is still producing results that are 1 -2 meters off for coordinate
> systems based on datums newer than ~1996, so from my perspective, Proj4 is
> 20 years behind. I am very happy to see the recent efforts to make Proj4
> more accurate and keep it relevant.
>
> I don't understand why folks like Janne can't just hang on to what ever
> version of Proj4 they like and why they feel the need to discourage
> progress and make personal attacks.
>
> Rich
>
>
> On Wed, Aug 9, 2017 at 8:50 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
>
> Duncan,
>
> 1: You may not see any personal comments in Janne’s latest rant, but
> however much I would prefer to be able to agree with you, I cannot. Janne’s
> closing remark is a direct, personal threat directed towards proj
> developers in general and, probably, myself and Kristian Evers in
> particular.
>
> 2: proj and cs2cs functionality does not change as a consequence of
> introducing an additional API in the underlying library.
>
> 3: You WILL definitely see accidental, but also deliberate, functionality
> changes in the future. A lot of effort has been put into making libproj
> more maintainable, through refactoring, general cleanup, and documentation.
> This is necessary to keep things maintainable. A large number of regression
> tests keep the accidental functionality changes minimal, but you can help
> by submitting additional tests.
>
> 4: You indicate that you “value proj as a simple and accurate way to go
> between lat/long and x/y, *without* needing to know the mathematics of
> (e.g.) how some projection is done”. While this statement definitely makes
> sense in cases where you can afford to ignore your reference frame, the
> “simple and accurate” statement reduces to “simple” in cases where you can
> not. The Earth is dynamic, and you need kinematic reference frames to
> obtain even decimetric accuracy over time spans of even just a few years.
> This is one of the reasons for our current work on another API for libproj.
>
> /Thomas
>
> 2017-08-09 15:23 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:
>
> All:
>
>     I do not see any personal comments in Jenne's latest, the closing
> aside, though those planning the new activities no doubt feel otherwise.
> But
> let me say, as a long-time user, that whatever new features are added are
> fine
> by me, PROVIDED that the final product is fully backwards-compatible, even
> if
> that means retaining something that would now be done differently.
>
>     I can give two examples in which this rule has not been followed,
> and as a result of which I have had to rewrite scripts that no longer
> worked. One, which seems to apply in general, is the need to specify
> an ellipsoid rather than being able to omit it and just have it
> default to WGS84. The other is that at some point someone rewrote the
> Oblique Mercator option in a way that required the command-line parameters
> to be different. (I asked about this, on this list, when I first
> encountered
> this problem, and got a response that indicated that it wasn't completely
> clear what had happened--and yes, I realize that this is an argument for
> the kind of systematic procedures for modification that are being
> proposed).
> I'm sure that whoever made these changes thought they were fixing something
> that should have been done differently from the beginning; but barring
> actual errors, I'd say, please don't.
>
>     Going forward, I can accept the rationales (as the package has
> evolved into a datum-conversion tool) to include heights and time-dependent
> coordinates, though the latter will raise a whole new level of
> complications
> just to keep up as models for these evolve. But if this is going to mean
> that (say) heights need to be included for all conversions, then this
> should
> be something done using a different function, not proj or cs2cs. I (and
> probably many others) value proj as a simple and accurate way to go between
> lat/long and x/y, *without* needing to know the mathematics of (e.g.) how
> some
> projection is done on the ellipsoid--and likewise for going to (say) SPCS
> and back using cs2cs.
>
>     So change all you want, but make sure that existing features,
> inelegant or not, remain.
>
> Thanks
> Duncan Agnew
>
>
> On Wed, Aug 9, 2017 at 12:58 AM, Kristian Thy <thy at 42.dk> wrote:
>
> Is it possible to vote someone off the list? It's getting tiresome to
> read Janne's inane diatribes, and I think this crosses the line from
> generally unhelpful into personal attacks.
>
> (Janne: if progress really bothers you that much, nobody's forcing you
> to use the new, improved proj library. Your website has auto-playing
> audio, so you seem to be pretty comfortable living in the 1990s.)
>
> Cheers,
> Kristian
>
> On Wed, Aug 09, support at mnspoint.com wrote:
> > Hello,
> >
> > The Proj.4 library is more a standard nowadays! You don't start to
> > rewrite it - it is already written! -- You just add new projections and
> > fix possible old bugs etc.
> >
> > Take for example GNU gcc .. they have lot of material which is coming
> > from the 1970's - string libraries for example! They NEVER touch those!!
> > NEVER .. I repeat.
> >
> > Or how about OpenGL libraries .. they also NEVER change anything old ..
> > they just keep adding new features (if anything). And that is called
> > stability of the library. A good library is very stable and does NOT
> > change 3 times a year .. unless something new is added. And since good
> > projections are not very often discovered anymore .. the Proj.4 stays as
> > it is. Nobody wants to see some random madness there when he is trusting
> > for example his life somewhere navigating using that projection on his
> > navigation display or maps.
> >
> > Or maybe some picture file libraries .. like JPG standard or PNG
> > standard. All those libraries are VERY old and nobody moves a finger!
> > Since those all are now standard
> >
> > Or let's see how zlib is nowadays .. it is exactly the same as it was 20
> > years ago. Nobody makes changes there since it works very well and
> > modern compilers can very well handle all that "old" or "new" stuff all
> > together.
> >
> > So why all want to keep libraries stable? Because then they can trust
> > that it does its work as it used to do. Nobody wants to have new
> > versions unless that really adds something useful, like a new (useful)
> > projection.
> >
> > (So go to hell .. and stay there!)
> >
> > Janne.
> >
> > ---------------------------------------------------------
> >
> > Kristian Evers kirjoitti 2017-07-10 12:09:
> >
> > > All,
> > >
> > > I've set up a project on GitHub in an effort to organize the work that
> needs to be done before the next release. A GitHub project is nothing
> fancy, it's just a Kanban-board of already existing tickets from the issue
> tracker. Find it at:
> > >
> > > https://github.com/OSGeo/proj.4/projects/1
> > >
> > > If you would like to contribute this is a good place to start. If
> there is something you would like to see fixed, added or changed in the
> next version now is the time to say so. Please use the GitHub issue tracker
> for that, either by adding new tickets or leaving a comment in existing
> ones you would like to get prioritized. I'll make sure to add them to the
> relevant list in the GitHub project.
> > >
> > > /Kristian
> > > _______________________________________________
> > > Proj mailing list
> > > Proj at lists.maptools.org
> > > http://lists.maptools.org/mailman/listinfo/proj
> >
> > --
> > MNS Support
> > NNS Master Navigator Software
> > Copyright (c) Sapper Oy
> > www.mnspoint.com [1]
> > support at mnspoint.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
>
> --
> Richard W. Greenwood, PLS
> www.greenwoodmap.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/73c37c32/attachment.html>

From dagnew at ucsd.edu  Wed Aug  9 21:56:26 2017
From: dagnew at ucsd.edu (Duncan Agnew)
Date: Wed, 9 Aug 2017 21:56:26 -0700
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>
References: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
	<15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
	<CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>
Message-ID: <CAG6Em0C0=uciGv2mGY-ct1LAnrxgFHYB-szBBNvXe7P3DEbBhA@mail.gmail.com>

All:

I pretty much agree with Dan. For clarity (lacking in my previous entry),
there are two things, easily conflated, to talk about:

    A. proj the program that people use (often on the command line)
to go between lat-long and projection coordinates. Most of these users
don't care about which lat/long they are using: certainly not important
if making a map, and probably not if using it to set up a grid system
for your own use (I've used it for both).

    B. PROJ the package, which includes not just projections
but all the additional machinery to handle different datums--and
in the future heights and temporal changes.

    I completely agree that PROJ needs to keep evolving; but at the
same time I (and probably many other users) would like to have proj
stay the same. This ought to be relatively easy since it is almost all
mathematics, the only parameters being the size and shape of the
ellipsoid--and I don't imagine there will be new values of this being
produced. But it depends on allowing the functionality of proj (not
PROJ) to not require the user who just wants a projection to have to
master the additional features needed to do datum transformations.

    Of course grids are just projections, so it was easy for Gerald
to add things like SPCS, blurring the line a bit; but, with Daan (and
Gerald) I'd argue that it would be helpful to many users to have things
somewhat distinct.

    And, I'd like to raise a question (I'm genuinely curious) about how
time-dependent motion will be added. Having been professionally engaged in
measuring and modeling crustal motion for the last 30+ years, I can say
that it
is going to be a lot more complicated to keep track of. proj (as above)
needs
only the -le parameters (a fixed set); once you add the rigid-body motions
for
datum transformations there are a lot more parameters, many conventional
(and
so unchanging), which EPSG fortunately collects; adding grids for distortion
(HARN) needs more information yet. But once you get into temporal changes,
things are even worse: models will keep changing either because of better
data
or earthquakes (cf HTDP). This seems like a progression from a package
dominated by algebra to a small algebraic component attached to a large
and ever-growing database of parameters. I'm not arguing against it, at
all, just saying that it is going to be quite a challenge beyond modifying
the programs. (I completely lack the expertise to contribute to the code,
but if anyone has any geophysics questions I'm happy to try to answer them).

Thanks
Duncan Agnew

On Wed, Aug 9, 2017 at 8:39 PM, Waldo Tobler <tobler at geog.ucsb.edu> wrote:

> Contrary to expectations there is a new projection worth adding:
> The Tobler-Mercator
> http://dx.doi.org/10.1080/15230406.2017.1308837
> Waldo
>
> On Wed, Aug 9, 2017 at 7:16 PM, <strebe at aol.com> wrote:
>
>> I don’t support Janne’s presentation. He does have a point, though.
>> Actually, I think it’s Gerald Evenden’s point: Datum transformation is
>> completely separable from map projections. Both functions could exist
>> independently but interoperate smoothly with only light coordination. There
>> is little benefit in conflating them and much benefit to keeping them
>> separate.
>>
>> Why can’t Janne, Duncan and others just stick with old versions? Because
>> then they don’t get bug fixes, security fixes, new projections, performance
>> enhancements, or other maintenance. Why don’t they just fork out the parts
>> they need and go their separate ways? Because then the code bases diverge
>> such that effort relevant to both is duplicated or ignored.
>>
>> It’s probably too late to shove that toothpaste back into the tube,
>> although, if the proj4 community were motivated to make it happen, it seems
>> like it could.
>>
>> Best,
>> — daan Strebe
>>
>>
>>
>> -----Original Message-----
>> From: Richard Greenwood <richard.greenwood at gmail.com>
>> To: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
>> Sent: Wed, Aug 9, 2017 5:36 pm
>> Subject: Re: [Proj] GitHub "project" for the next release
>>
>> Remarks like Janne's lower the level of the whole list and do not belong
>> here.
>>
>> Proj4 needs to move forward. Proj4 users, and users of software that
>> depend on Proj4, need to get transformation results that are accurate and
>> match other software. That requires better support of temporal datums which
>> Kristian and Thomas are laying the ground work for. In the United States,
>> Proj4 is still producing results that are 1 -2 meters off for coordinate
>> systems based on datums newer than ~1996, so from my perspective, Proj4 is
>> 20 years behind. I am very happy to see the recent efforts to make Proj4
>> more accurate and keep it relevant.
>>
>> I don't understand why folks like Janne can't just hang on to what ever
>> version of Proj4 they like and why they feel the need to discourage
>> progress and make personal attacks.
>>
>> Rich
>>
>>
>> On Wed, Aug 9, 2017 at 8:50 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
>> wrote:
>>
>> Duncan,
>>
>> 1: You may not see any personal comments in Janne’s latest rant, but
>> however much I would prefer to be able to agree with you, I cannot. Janne’s
>> closing remark is a direct, personal threat directed towards proj
>> developers in general and, probably, myself and Kristian Evers in
>> particular.
>>
>> 2: proj and cs2cs functionality does not change as a consequence of
>> introducing an additional API in the underlying library.
>>
>> 3: You WILL definitely see accidental, but also deliberate, functionality
>> changes in the future. A lot of effort has been put into making libproj
>> more maintainable, through refactoring, general cleanup, and documentation.
>> This is necessary to keep things maintainable. A large number of regression
>> tests keep the accidental functionality changes minimal, but you can help
>> by submitting additional tests.
>>
>> 4: You indicate that you “value proj as a simple and accurate way to go
>> between lat/long and x/y, *without* needing to know the mathematics of
>> (e.g.) how some projection is done”. While this statement definitely makes
>> sense in cases where you can afford to ignore your reference frame, the
>> “simple and accurate” statement reduces to “simple” in cases where you can
>> not. The Earth is dynamic, and you need kinematic reference frames to
>> obtain even decimetric accuracy over time spans of even just a few years.
>> This is one of the reasons for our current work on another API for libproj.
>>
>> /Thomas
>>
>> 2017-08-09 15:23 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:
>>
>> All:
>>
>>     I do not see any personal comments in Jenne's latest, the closing
>> aside, though those planning the new activities no doubt feel otherwise.
>> But
>> let me say, as a long-time user, that whatever new features are added are
>> fine
>> by me, PROVIDED that the final product is fully backwards-compatible,
>> even if
>> that means retaining something that would now be done differently.
>>
>>     I can give two examples in which this rule has not been followed,
>> and as a result of which I have had to rewrite scripts that no longer
>> worked. One, which seems to apply in general, is the need to specify
>> an ellipsoid rather than being able to omit it and just have it
>> default to WGS84. The other is that at some point someone rewrote the
>> Oblique Mercator option in a way that required the command-line
>> parameters
>> to be different. (I asked about this, on this list, when I first
>> encountered
>> this problem, and got a response that indicated that it wasn't completely
>> clear what had happened--and yes, I realize that this is an argument for
>> the kind of systematic procedures for modification that are being
>> proposed).
>> I'm sure that whoever made these changes thought they were fixing
>> something
>> that should have been done differently from the beginning; but barring
>> actual errors, I'd say, please don't.
>>
>>     Going forward, I can accept the rationales (as the package has
>> evolved into a datum-conversion tool) to include heights and
>> time-dependent
>> coordinates, though the latter will raise a whole new level of
>> complications
>> just to keep up as models for these evolve. But if this is going to mean
>> that (say) heights need to be included for all conversions, then this
>> should
>> be something done using a different function, not proj or cs2cs. I (and
>> probably many others) value proj as a simple and accurate way to go
>> between
>> lat/long and x/y, *without* needing to know the mathematics of (e.g.) how
>> some
>> projection is done on the ellipsoid--and likewise for going to (say) SPCS
>> and back using cs2cs.
>>
>>     So change all you want, but make sure that existing features,
>> inelegant or not, remain.
>>
>> Thanks
>> Duncan Agnew
>>
>>
>> On Wed, Aug 9, 2017 at 12:58 AM, Kristian Thy <thy at 42.dk> wrote:
>>
>> Is it possible to vote someone off the list? It's getting tiresome to
>> read Janne's inane diatribes, and I think this crosses the line from
>> generally unhelpful into personal attacks.
>>
>> (Janne: if progress really bothers you that much, nobody's forcing you
>> to use the new, improved proj library. Your website has auto-playing
>> audio, so you seem to be pretty comfortable living in the 1990s.)
>>
>> Cheers,
>> Kristian
>>
>> On Wed, Aug 09, support at mnspoint.com wrote:
>> > Hello,
>> >
>> > The Proj.4 library is more a standard nowadays! You don't start to
>> > rewrite it - it is already written! -- You just add new projections and
>> > fix possible old bugs etc.
>> >
>> > Take for example GNU gcc .. they have lot of material which is coming
>> > from the 1970's - string libraries for example! They NEVER touch those!!
>> > NEVER .. I repeat.
>> >
>> > Or how about OpenGL libraries .. they also NEVER change anything old ..
>> > they just keep adding new features (if anything). And that is called
>> > stability of the library. A good library is very stable and does NOT
>> > change 3 times a year .. unless something new is added. And since good
>> > projections are not very often discovered anymore .. the Proj.4 stays as
>> > it is. Nobody wants to see some random madness there when he is trusting
>> > for example his life somewhere navigating using that projection on his
>> > navigation display or maps.
>> >
>> > Or maybe some picture file libraries .. like JPG standard or PNG
>> > standard. All those libraries are VERY old and nobody moves a finger!
>> > Since those all are now standard
>> >
>> > Or let's see how zlib is nowadays .. it is exactly the same as it was 20
>> > years ago. Nobody makes changes there since it works very well and
>> > modern compilers can very well handle all that "old" or "new" stuff all
>> > together.
>> >
>> > So why all want to keep libraries stable? Because then they can trust
>> > that it does its work as it used to do. Nobody wants to have new
>> > versions unless that really adds something useful, like a new (useful)
>> > projection.
>> >
>> > (So go to hell .. and stay there!)
>> >
>> > Janne.
>> >
>> > ---------------------------------------------------------
>> >
>> > Kristian Evers kirjoitti 2017-07-10 12:09:
>> >
>> > > All,
>> > >
>> > > I've set up a project on GitHub in an effort to organize the work
>> that needs to be done before the next release. A GitHub project is nothing
>> fancy, it's just a Kanban-board of already existing tickets from the issue
>> tracker. Find it at:
>> > >
>> > > https://github.com/OSGeo/proj.4/projects/1
>> > >
>> > > If you would like to contribute this is a good place to start. If
>> there is something you would like to see fixed, added or changed in the
>> next version now is the time to say so. Please use the GitHub issue tracker
>> for that, either by adding new tickets or leaving a comment in existing
>> ones you would like to get prioritized. I'll make sure to add them to the
>> relevant list in the GitHub project.
>> > >
>> > > /Kristian
>> > > _______________________________________________
>> > > Proj mailing list
>> > > Proj at lists.maptools.org
>> > > http://lists.maptools.org/mailman/listinfo/proj
>> >
>> > --
>> > MNS Support
>> > NNS Master Navigator Software
>> > Copyright (c) Sapper Oy
>> > www.mnspoint.com [1]
>> > support at mnspoint.com
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>>
>>
>> --
>> Richard W. Greenwood, PLS
>> www.greenwoodmap.com
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170809/f5927ea8/attachment.html>

From knudsen.thomas at gmail.com  Thu Aug 10 04:44:40 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 10 Aug 2017 13:44:40 +0200
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAG6Em0C0=uciGv2mGY-ct1LAnrxgFHYB-szBBNvXe7P3DEbBhA@mail.gmail.com>
References: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
	<15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
	<CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>
	<CAG6Em0C0=uciGv2mGY-ct1LAnrxgFHYB-szBBNvXe7P3DEbBhA@mail.gmail.com>
Message-ID: <CAH0YoENdUE=a-5FJ+g1JJ=84L_2Ef1pGU5ZsYY1PP1KbCEvY9w@mail.gmail.com>

Duncan (and daan),

Yes, map projections are mathematical functions, while reference frame
shifts are geophysical/geodetical transformations.

The latter are, however, also *in practice* represented by sequential
application of parameterized mathematical functions, drawn from a rather
limited gamut - basically consisting of Helmert, Horner, Molodensky, Grid
interpolation and ellipsoidal/cartesian transformation.

All of these fundamental operations are architecturally similar to the map
projection functions of the original libproj, and are implemented in a
similar way.

Hence, what Kristian Evers and I have done over the last 18 months is
technically to add 5 (or so) new projections to the original libproj.

To string the stuff together, we designed the pipeline metaphor, which is
also materialized as just another projection.

So we have added what amounts to a few more projections to the library.
These can be used or ignored, in the same way you may ignore the Transverse
Mercator implementation if you are only interested in the Lambert Conformal
Conic (You can probably even compile a version of the library leaving most
of the “pseudoprojections” out).

All parameters for implementing actual reference frame transformations *are
stored in parameter files, not in the library per se*.

If you are *not interested* in reference frame shifts, the code supporting
reference frame shifts will *not affect you*. And the parameter files will
only affect you through the (limited) disk space required. But you are not
forced to install them anyway.

So if you are *not interested* in reference frame shifts, please *ignore
the matter* and stop arguing against stuff that will *not affect you*. This
stuff is certainly useful for a range of other people.

Should we want to follow daan’s recipe of splitting the reference frame
handling entirely from the projection library, we would have to duplicate
most of the well tested libproj infrastructural architecture into another
library, which would, in most cases, be used in applications also depending
on libproj.

Simply leveraging the existing infrastructure and adding a handful of
pseudoprojections was definitely the way to go. Especially since the
libproj architecture makes it possible to do so in a neat and non-intrusive
way.

Regarding the new API:

The new API emerged as a by-product of attempts to make the libproj
internals more maintainable, by improving namespacing and introducing new
internal data types in order to reduce type-punning. This makes it more
clear exactly what kind of coordinate is expected at each spot in the code.

The new API exposes these data types, simplifies a wide field of
operations, and provides a unified interface to 2D, 3D and 4D
transformations.

The new API does not replace the old API, but obviously the designers hope
that it will become the preferred one for new applications. The old API may
some day gain a “deprecated” status, but will only rot entirely away if no
one is interested in maintaining it. So if anyone needs it badly enough to
sponsor its maintenance, it will live on forever.

In a limited number of cases, software pre-dating the original API,
described in proj-api.h, may experience breakage, since the original
projects.h file does not describe an actual interface (API), but rather
exposes every single function and data structure in the library.

So there is only one way to ensure that each-and-every program, using
projects.h to do calls to libproj internals, would keep working with new
versions of libproj: That would be to freeze both development and
maintenance of the PROJ system. And anyone wishing for that may get theirs
by just sticking with proj 4.3.0.

I personally believe, though, that we should make efforts not to hamper
more well disciplined programs using projects.h just to do calls to the
“obvious API” of projects.h (pj_init, pj_fwd, pj_inv, pj_free, and probably
a few more).

The proj and cs2cs filters will live on as long as anyone wants to maintain
them. But they definitely need some tlc, so test cases involving some of
your more esoteric use cases of proj and cs2cs would be very welcome, and
would greatly reduce the risk of regressions during maintenance.

/thomas

2017-08-10 6:56 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:

> All:
>
> I pretty much agree with Dan. For clarity (lacking in my previous entry),
> there are two things, easily conflated, to talk about:
>
>     A. proj the program that people use (often on the command line)
> to go between lat-long and projection coordinates. Most of these users
> don't care about which lat/long they are using: certainly not important
> if making a map, and probably not if using it to set up a grid system
> for your own use (I've used it for both).
>
>     B. PROJ the package, which includes not just projections
> but all the additional machinery to handle different datums--and
> in the future heights and temporal changes.
>
>     I completely agree that PROJ needs to keep evolving; but at the
> same time I (and probably many other users) would like to have proj
> stay the same. This ought to be relatively easy since it is almost all
> mathematics, the only parameters being the size and shape of the
> ellipsoid--and I don't imagine there will be new values of this being
> produced. But it depends on allowing the functionality of proj (not
> PROJ) to not require the user who just wants a projection to have to
> master the additional features needed to do datum transformations.
>
>     Of course grids are just projections, so it was easy for Gerald
> to add things like SPCS, blurring the line a bit; but, with Daan (and
> Gerald) I'd argue that it would be helpful to many users to have things
> somewhat distinct.
>
>     And, I'd like to raise a question (I'm genuinely curious) about how
> time-dependent motion will be added. Having been professionally engaged in
> measuring and modeling crustal motion for the last 30+ years, I can say
> that it
> is going to be a lot more complicated to keep track of. proj (as above)
> needs
> only the -le parameters (a fixed set); once you add the rigid-body motions
> for
> datum transformations there are a lot more parameters, many conventional
> (and
> so unchanging), which EPSG fortunately collects; adding grids for
> distortion
> (HARN) needs more information yet. But once you get into temporal changes,
> things are even worse: models will keep changing either because of better
> data
> or earthquakes (cf HTDP). This seems like a progression from a package
> dominated by algebra to a small algebraic component attached to a large
> and ever-growing database of parameters. I'm not arguing against it, at
> all, just saying that it is going to be quite a challenge beyond modifying
> the programs. (I completely lack the expertise to contribute to the code,
> but if anyone has any geophysics questions I'm happy to try to answer
> them).
>
> Thanks
> Duncan Agnew
>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170810/c5390705/attachment.html>

From richard.greenwood at gmail.com  Thu Aug 10 06:31:46 2017
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Thu, 10 Aug 2017 07:31:46 -0600
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAH0YoENdUE=a-5FJ+g1JJ=84L_2Ef1pGU5ZsYY1PP1KbCEvY9w@mail.gmail.com>
References: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
	<15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
	<CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>
	<CAG6Em0C0=uciGv2mGY-ct1LAnrxgFHYB-szBBNvXe7P3DEbBhA@mail.gmail.com>
	<CAH0YoENdUE=a-5FJ+g1JJ=84L_2Ef1pGU5ZsYY1PP1KbCEvY9w@mail.gmail.com>
Message-ID: <CAHBySPYdmoQ8pOk3QouyZdLcwLjhr6C-K9gWJcnQZbUXzrKtGw@mail.gmail.com>

Computationally datum transformations are completely separable from map
projections, but from the end users perspective they are inextricably
combined in the modern era. A user should reasonably expect to get the same
results in QGIS and ArcMap given the same ESPG codes, but in many cases
they do not because of datum differences. I know Gerald disagreed with me
on this in the past and obviously others still disagree with me. I do not
believe that moving Proj into the 21st century threatens users who do not
care about datum transformations. But ignoring datum transformations will
make Proj irrelevant in the future.

Rich


On Thu, Aug 10, 2017 at 5:44 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> Duncan (and daan),
>
> Yes, map projections are mathematical functions, while reference frame
> shifts are geophysical/geodetical transformations.
>
> The latter are, however, also *in practice* represented by sequential
> application of parameterized mathematical functions, drawn from a rather
> limited gamut - basically consisting of Helmert, Horner, Molodensky, Grid
> interpolation and ellipsoidal/cartesian transformation.
>
> All of these fundamental operations are architecturally similar to the map
> projection functions of the original libproj, and are implemented in a
> similar way.
>
> Hence, what Kristian Evers and I have done over the last 18 months is
> technically to add 5 (or so) new projections to the original libproj.
>
> To string the stuff together, we designed the pipeline metaphor, which is
> also materialized as just another projection.
>
> So we have added what amounts to a few more projections to the library.
> These can be used or ignored, in the same way you may ignore the Transverse
> Mercator implementation if you are only interested in the Lambert Conformal
> Conic (You can probably even compile a version of the library leaving most
> of the “pseudoprojections” out).
>
> All parameters for implementing actual reference frame transformations
> *are stored in parameter files, not in the library per se*.
>
> If you are *not interested* in reference frame shifts, the code supporting
> reference frame shifts will *not affect you*. And the parameter files will
> only affect you through the (limited) disk space required. But you are not
> forced to install them anyway.
>
> So if you are *not interested* in reference frame shifts, please *ignore
> the matter* and stop arguing against stuff that will *not affect you*. This
> stuff is certainly useful for a range of other people.
>
> Should we want to follow daan’s recipe of splitting the reference frame
> handling entirely from the projection library, we would have to duplicate
> most of the well tested libproj infrastructural architecture into another
> library, which would, in most cases, be used in applications also depending
> on libproj.
>
> Simply leveraging the existing infrastructure and adding a handful of
> pseudoprojections was definitely the way to go. Especially since the
> libproj architecture makes it possible to do so in a neat and non-intrusive
> way.
>
> Regarding the new API:
>
> The new API emerged as a by-product of attempts to make the libproj
> internals more maintainable, by improving namespacing and introducing new
> internal data types in order to reduce type-punning. This makes it more
> clear exactly what kind of coordinate is expected at each spot in the code.
>
> The new API exposes these data types, simplifies a wide field of
> operations, and provides a unified interface to 2D, 3D and 4D
> transformations.
>
> The new API does not replace the old API, but obviously the designers hope
> that it will become the preferred one for new applications. The old API may
> some day gain a “deprecated” status, but will only rot entirely away if no
> one is interested in maintaining it. So if anyone needs it badly enough to
> sponsor its maintenance, it will live on forever.
>
> In a limited number of cases, software pre-dating the original API,
> described in proj-api.h, may experience breakage, since the original
> projects.h file does not describe an actual interface (API), but rather
> exposes every single function and data structure in the library.
>
> So there is only one way to ensure that each-and-every program, using
> projects.h to do calls to libproj internals, would keep working with new
> versions of libproj: That would be to freeze both development and
> maintenance of the PROJ system. And anyone wishing for that may get theirs
> by just sticking with proj 4.3.0.
>
> I personally believe, though, that we should make efforts not to hamper
> more well disciplined programs using projects.h just to do calls to the
> “obvious API” of projects.h (pj_init, pj_fwd, pj_inv, pj_free, and probably
> a few more).
>
> The proj and cs2cs filters will live on as long as anyone wants to
> maintain them. But they definitely need some tlc, so test cases involving
> some of your more esoteric use cases of proj and cs2cs would be very
> welcome, and would greatly reduce the risk of regressions during
> maintenance.
>
> /thomas
>
> 2017-08-10 6:56 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:
>
>> All:
>>
>> I pretty much agree with Dan. For clarity (lacking in my previous entry),
>> there are two things, easily conflated, to talk about:
>>
>>     A. proj the program that people use (often on the command line)
>> to go between lat-long and projection coordinates. Most of these users
>> don't care about which lat/long they are using: certainly not important
>> if making a map, and probably not if using it to set up a grid system
>> for your own use (I've used it for both).
>>
>>     B. PROJ the package, which includes not just projections
>> but all the additional machinery to handle different datums--and
>> in the future heights and temporal changes.
>>
>>     I completely agree that PROJ needs to keep evolving; but at the
>> same time I (and probably many other users) would like to have proj
>> stay the same. This ought to be relatively easy since it is almost all
>> mathematics, the only parameters being the size and shape of the
>> ellipsoid--and I don't imagine there will be new values of this being
>> produced. But it depends on allowing the functionality of proj (not
>> PROJ) to not require the user who just wants a projection to have to
>> master the additional features needed to do datum transformations.
>>
>>     Of course grids are just projections, so it was easy for Gerald
>> to add things like SPCS, blurring the line a bit; but, with Daan (and
>> Gerald) I'd argue that it would be helpful to many users to have things
>> somewhat distinct.
>>
>>     And, I'd like to raise a question (I'm genuinely curious) about how
>> time-dependent motion will be added. Having been professionally engaged in
>> measuring and modeling crustal motion for the last 30+ years, I can say
>> that it
>> is going to be a lot more complicated to keep track of. proj (as above)
>> needs
>> only the -le parameters (a fixed set); once you add the rigid-body
>> motions for
>> datum transformations there are a lot more parameters, many conventional
>> (and
>> so unchanging), which EPSG fortunately collects; adding grids for
>> distortion
>> (HARN) needs more information yet. But once you get into temporal changes,
>> things are even worse: models will keep changing either because of better
>> data
>> or earthquakes (cf HTDP). This seems like a progression from a package
>> dominated by algebra to a small algebraic component attached to a large
>> and ever-growing database of parameters. I'm not arguing against it, at
>> all, just saying that it is going to be quite a challenge beyond modifying
>> the programs. (I completely lack the expertise to contribute to the code,
>> but if anyone has any geophysics questions I'm happy to try to answer
>> them).
>>
>> Thanks
>> Duncan Agnew
>>
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
Richard W. Greenwood, PLS
www.greenwoodmap.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170810/e5e66901/attachment.html>

From smpel at yahoo.com  Thu Aug 10 12:12:05 2017
From: smpel at yahoo.com (Stefanos Beligiannis)
Date: Thu, 10 Aug 2017 19:12:05 +0000 (UTC)
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <CAH0YoENdUE=a-5FJ+g1JJ=84L_2Ef1pGU5ZsYY1PP1KbCEvY9w@mail.gmail.com>
References: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
	<15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
	<CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>
	<CAG6Em0C0=uciGv2mGY-ct1LAnrxgFHYB-szBBNvXe7P3DEbBhA@mail.gmail.com>
	<CAH0YoENdUE=a-5FJ+g1JJ=84L_2Ef1pGU5ZsYY1PP1KbCEvY9w@mail.gmail.com>
Message-ID: <1809046522.1628820.1502392325745@mail.yahoo.com>

Dear gentlemen,
I read with great interest your discussions. Most of your proposals are very constructive while other even are innovative, they lack of strategy and  this is the point I want to focus on, as a survey and geodetic engineer with more than 40 years experience. First let's make a distinguish between some different issues :- Geoid is our target object (the earth MSL) with an arbitrary shape which unfortunatelly is not either static or completely defined.- Geodetic Transformations like 7 params Helmert or 9 params Molodensky Badekas, that are applied on different ellipsoids to translate and rotate the ellipsoid in use in order to best fit on a certain area the Geoid.- Spheroid is a mathematic sphere fiting the ellipsoid on an area with center a certain point.- Projection is the spreads of the spheroid surface we mathematically do with origin  a certain line or a point- Transformations like similarity, affine, 2D Helmert etc are planar and are applied only on projections ie planar datums or image rectifications. - The procedure to make a transformation is:Projection A -> Datum A -> Datum B (applying geodetic transformation with certain params) -> Projection BThis procedure is not error free. Usually bulk errors even 10 m are experienced and here the problem starts!1. To my opinion NGA standards must be respected and never allow for the shake of our program's completeness not professionals to change these parameters or evaluate their owns and establish them for the shake of better local accuracy achievent.I experienced such a case in Riyadh where there are two AinAlAbd systems because a GIS "expert" decided to change for Riyadh the Helmert 7 parameter values NGA gives with an accuracy of 10m for whole Saudi Arabia with other calculated with LSM inverse Helmert to achieve 2 m accuracy. Result? Chaos!! So are you going to make a product devoted to these standards or something open?2. I hear about calculations accuracy improvement. What do you really mean and what would be the interest of this? I see you use 10bytes double precision instead ieee 8. Do you plan to go further with special math libraries that use "unlimited" significant decimal digits against the calculation speed etc.3. Do you plan to re-design the UI?4. Do you plan to make any tools that will permit inexperienced users to deal with the core?I really look forward to learn more about these isues
Best Regards

Stefanos BeligiannisRural & Survey Engineer MSc


On Thursday, August 10, 2017, 3:01:11 PM GMT+3, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:

Duncan (and daan),
Yes, map projections are mathematical functions, while reference frame shifts are geophysical/geodetical transformations.
The latter are, however, also *in practice* represented by sequential application of parameterized mathematical functions, drawn from a rather limited gamut - basically consisting of Helmert, Horner, Molodensky, Grid interpolation and ellipsoidal/cartesian transformation.
All of these fundamental operations are architecturally similar to the map projection functions of the original libproj, and are implemented in a similar way.
Hence, what Kristian Evers and I have done over the last 18 months is technically to add 5 (or so) new projections to the original libproj.
To string the stuff together, we designed the pipeline metaphor, which is also materialized as just another projection.
So we have added what amounts to a few more projections to the library. These can be used or ignored, in the same way you may ignore the Transverse Mercator implementation if you are only interested in the Lambert Conformal Conic (You can probably even compile a version of the library leaving most of the “pseudoprojections” out).
All parameters for implementing actual reference frame transformations *are stored in parameter files, not in the library per se*.
If you are *not interested* in reference frame shifts, the code supporting reference frame shifts will *not affect you*. And the parameter files will only affect you through the (limited) disk space required. But you are not forced to install them anyway.
So if you are *not interested* in reference frame shifts, please *ignore the matter* and stop arguing against stuff that will *not affect you*. This stuff is certainly useful for a range of other people.
Should we want to follow daan’s recipe of splitting the reference frame handling entirely from the projection library, we would have to duplicate most of the well tested libproj infrastructural architecture into another library, which would, in most cases, be used in applications also depending on libproj.
Simply leveraging the existing infrastructure and adding a handful of pseudoprojections was definitely the way to go. Especially since the libproj architecture makes it possible to do so in a neat and non-intrusive way.
Regarding the new API:
The new API emerged as a by-product of attempts to make the libproj internals more maintainable, by improving namespacing and introducing new internal data types in order to reduce type-punning. This makes it more clear exactly what kind of coordinate is expected at each spot in the code.
The new API exposes these data types, simplifies a wide field of operations, and provides a unified interface to 2D, 3D and 4D transformations.
The new API does not replace the old API, but obviously the designers hope that it will become the preferred one for new applications. The old API may some day gain a “deprecated” status, but will only rot entirely away if no one is interested in maintaining it. So if anyone needs it badly enough to sponsor its maintenance, it will live on forever.
In a limited number of cases, software pre-dating the original API, described in proj-api.h, may experience breakage, since the original projects.h file does not describe an actual interface (API), but rather exposes every single function and data structure in the library.
So there is only one way to ensure that each-and-every program, using projects.h to do calls to libproj internals, would keep working with new versions of libproj: That would be to freeze both development and maintenance of the PROJ system. And anyone wishing for that may get theirs by just sticking with proj 4.3.0.
I personally believe, though, that we should make efforts not to hamper more well disciplined programs using projects.h just to do calls to the “obvious API” of projects.h (pj_init, pj_fwd, pj_inv, pj_free, and probably a few more).
The proj and cs2cs filters will live on as long as anyone wants to maintain them. But they definitely need some tlc, so test cases involving some of your more esoteric use cases of proj and cs2cs would be very welcome, and would greatly reduce the risk of regressions during maintenance.
/thomas
2017-08-10 6:56 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:

All:

I pretty much agree with Dan. For clarity (lacking in my previous entry),
there are two things, easily conflated, to talk about:

    A. proj the program that people use (often on the command line)
to go between lat-long and projection coordinates. Most of these users
don't care about which lat/long they are using: certainly not important
if making a map, and probably not if using it to set up a grid system
for your own use (I've used it for both).

    B. PROJ the package, which includes not just projections
but all the additional machinery to handle different datums--and
in the future heights and temporal changes.

    I completely agree that PROJ needs to keep evolving; but at the
same time I (and probably many other users) would like to have proj
stay the same. This ought to be relatively easy since it is almost all
mathematics, the only parameters being the size and shape of the
ellipsoid--and I don't imagine there will be new values of this being
produced. But it depends on allowing the functionality of proj (not
PROJ) to not require the user who just wants a projection to have to
master the additional features needed to do datum transformations.

    Of course grids are just projections, so it was easy for Gerald
to add things like SPCS, blurring the line a bit; but, with Daan (and
Gerald) I'd argue that it would be helpful to many users to have things
somewhat distinct.

    And, I'd like to raise a question (I'm genuinely curious) about how
time-dependent motion will be added. Having been professionally engaged in
measuring and modeling crustal motion for the last 30+ years, I can say that it
is going to be a lot more complicated to keep track of. proj (as above) needs
only the -le parameters (a fixed set); once you add the rigid-body motions for
datum transformations there are a lot more parameters, many conventional (and
so unchanging), which EPSG fortunately collects; adding grids for distortion
(HARN) needs more information yet. But once you get into temporal changes,
things are even worse: models will keep changing either because of better data
or earthquakes (cf HTDP). This seems like a progression from a package
dominated by algebra to a small algebraic component attached to a large
and ever-growing database of parameters. I'm not arguing against it, at
all, just saying that it is going to be quite a challenge beyond modifying
the programs. (I completely lack the expertise to contribute to the code,
but if anyone has any geophysics questions I'm happy to try to answer them).

Thanks
Duncan Agnew



______________________________ _________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mail man/listinfo/proj



______________________________ _________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/ mailman/listinfo/proj


_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170810/b9225e86/attachment.html>

From mjt464 at gmail.com  Thu Aug 10 14:24:05 2017
From: mjt464 at gmail.com (mike thomas)
Date: Fri, 11 Aug 2017 07:24:05 +1000
Subject: [Proj] GitHub "project" for the next release
In-Reply-To: <1809046522.1628820.1502392325745@mail.yahoo.com>
References: <CAHBySPYWzHQ6dE2DTX4SPssRs_THhLcB86U=1NBhLSa=5qcoYQ@mail.gmail.com>
	<15dc9ee029a-5908-cba6@webprd-a48.mail.aol.com>
	<CAM_SWQmuuob=owve-z3BThNFvxFjM66EE2-0mEnXiJOmU40XDA@mail.gmail.com>
	<CAG6Em0C0=uciGv2mGY-ct1LAnrxgFHYB-szBBNvXe7P3DEbBhA@mail.gmail.com>
	<CAH0YoENdUE=a-5FJ+g1JJ=84L_2Ef1pGU5ZsYY1PP1KbCEvY9w@mail.gmail.com>
	<1809046522.1628820.1502392325745@mail.yahoo.com>
Message-ID: <CAFh3CN0roHEqgbotvaD_K=XQyisH2dSWVKVngL0jh+M3=VeHOw@mail.gmail.com>

Hi all.

It sounds to me as a long term watcher and user of the library, that it's
time for proj5, from both technological and system architecture
perspectives.

Cheers,

Mike Thomas

On 11 Aug 2017 5:18 am, "Stefanos Beligiannis" <smpel at yahoo.com> wrote:

> Dear gentlemen,
>
> I read with great interest your discussions. Most of your proposals are
> very constructive while other even are innovative, they lack of strategy
> and  this is the point I want to focus on, as a survey and geodetic
> engineer with more than 40 years experience.
> First let's make a distinguish between some different issues :
> - Geoid is our target object (the earth MSL) with an arbitrary shape which
> unfortunatelly is not either static or completely defined.
> - Geodetic Transformations like 7 params Helmert or 9 params Molodensky
> Badekas, that are applied on different ellipsoids to translate and rotate
> the ellipsoid in use in order to best fit on a certain area the Geoid.
> - Spheroid is a mathematic sphere fiting the ellipsoid on an area with
> center a certain point.
> - Projection is the spreads of the spheroid surface we mathematically do
> with origin  a certain line or a point
> - Transformations like similarity, affine, 2D Helmert etc are planar and
> are applied only on projections ie planar datums or image rectifications.
> - The procedure to make a transformation is:
> Projection A -> Datum A -> Datum B (applying geodetic transformation with
> certain params) -> Projection B
> This procedure is not error free. Usually bulk errors even 10 m are
> experienced and here the problem starts!
> 1. To my opinion NGA standards must be respected and never allow for the
> shake of our program's completeness not professionals to change these
> parameters or evaluate their owns and establish them for the shake of
> better local accuracy achievent.
> I experienced such a case in Riyadh where there are two AinAlAbd systems
> because a GIS "expert" decided to change for Riyadh the Helmert 7 parameter
> values NGA gives with an accuracy of 10m for whole Saudi Arabia with other
> calculated with LSM inverse Helmert to achieve 2 m accuracy. Result?
> Chaos!! So are you going to make a product devoted to these standards or
> something open?
> 2. I hear about calculations accuracy improvement. What do you really mean
> and what would be the interest of this? I see you use 10bytes double
> precision instead ieee 8. Do you plan to go further with special math
> libraries that use "unlimited" significant decimal digits against the
> calculation speed etc.
> 3. Do you plan to re-design the UI?
> 4. Do you plan to make any tools that will permit inexperienced users to
> deal with the core?
> I really look forward to learn more about these isues
>
> Best Regards
>
> Stefanos Beligiannis
> Rural & Survey Engineer MSc
>
>
> ------------------------------
> On Thursday, August 10, 2017, 3:01:11 PM GMT+3, Thomas Knudsen <
> knudsen.thomas at gmail.com> wrote:
>
>
> Duncan (and daan),
>
> Yes, map projections are mathematical functions, while reference frame
> shifts are geophysical/geodetical transformations.
>
> The latter are, however, also *in practice* represented by sequential
> application of parameterized mathematical functions, drawn from a rather
> limited gamut - basically consisting of Helmert, Horner, Molodensky, Grid
> interpolation and ellipsoidal/cartesian transformation.
>
> All of these fundamental operations are architecturally similar to the map
> projection functions of the original libproj, and are implemented in a
> similar way.
>
> Hence, what Kristian Evers and I have done over the last 18 months is
> technically to add 5 (or so) new projections to the original libproj.
>
> To string the stuff together, we designed the pipeline metaphor, which is
> also materialized as just another projection.
>
> So we have added what amounts to a few more projections to the library.
> These can be used or ignored, in the same way you may ignore the Transverse
> Mercator implementation if you are only interested in the Lambert Conformal
> Conic (You can probably even compile a version of the library leaving most
> of the “pseudoprojections” out).
>
> All parameters for implementing actual reference frame transformations
> *are stored in parameter files, not in the library per se*.
>
> If you are *not interested* in reference frame shifts, the code supporting
> reference frame shifts will *not affect you*. And the parameter files will
> only affect you through the (limited) disk space required. But you are not
> forced to install them anyway.
>
> So if you are *not interested* in reference frame shifts, please *ignore
> the matter* and stop arguing against stuff that will *not affect you*. This
> stuff is certainly useful for a range of other people.
>
> Should we want to follow daan’s recipe of splitting the reference frame
> handling entirely from the projection library, we would have to duplicate
> most of the well tested libproj infrastructural architecture into another
> library, which would, in most cases, be used in applications also depending
> on libproj.
>
> Simply leveraging the existing infrastructure and adding a handful of
> pseudoprojections was definitely the way to go. Especially since the
> libproj architecture makes it possible to do so in a neat and non-intrusive
> way.
>
> Regarding the new API:
>
> The new API emerged as a by-product of attempts to make the libproj
> internals more maintainable, by improving namespacing and introducing new
> internal data types in order to reduce type-punning. This makes it more
> clear exactly what kind of coordinate is expected at each spot in the code.
>
> The new API exposes these data types, simplifies a wide field of
> operations, and provides a unified interface to 2D, 3D and 4D
> transformations.
>
> The new API does not replace the old API, but obviously the designers hope
> that it will become the preferred one for new applications. The old API may
> some day gain a “deprecated” status, but will only rot entirely away if no
> one is interested in maintaining it. So if anyone needs it badly enough to
> sponsor its maintenance, it will live on forever.
>
> In a limited number of cases, software pre-dating the original API,
> described in proj-api.h, may experience breakage, since the original
> projects.h file does not describe an actual interface (API), but rather
> exposes every single function and data structure in the library.
>
> So there is only one way to ensure that each-and-every program, using
> projects.h to do calls to libproj internals, would keep working with new
> versions of libproj: That would be to freeze both development and
> maintenance of the PROJ system. And anyone wishing for that may get theirs
> by just sticking with proj 4.3.0.
>
> I personally believe, though, that we should make efforts not to hamper
> more well disciplined programs using projects.h just to do calls to the
> “obvious API” of projects.h (pj_init, pj_fwd, pj_inv, pj_free, and probably
> a few more).
>
> The proj and cs2cs filters will live on as long as anyone wants to
> maintain them. But they definitely need some tlc, so test cases involving
> some of your more esoteric use cases of proj and cs2cs would be very
> welcome, and would greatly reduce the risk of regressions during
> maintenance.
>
> /thomas
>
> 2017-08-10 6:56 GMT+02:00 Duncan Agnew <dagnew at ucsd.edu>:
>
> All:
>
> I pretty much agree with Dan. For clarity (lacking in my previous entry),
> there are two things, easily conflated, to talk about:
>
>     A. proj the program that people use (often on the command line)
> to go between lat-long and projection coordinates. Most of these users
> don't care about which lat/long they are using: certainly not important
> if making a map, and probably not if using it to set up a grid system
> for your own use (I've used it for both).
>
>     B. PROJ the package, which includes not just projections
> but all the additional machinery to handle different datums--and
> in the future heights and temporal changes.
>
>     I completely agree that PROJ needs to keep evolving; but at the
> same time I (and probably many other users) would like to have proj
> stay the same. This ought to be relatively easy since it is almost all
> mathematics, the only parameters being the size and shape of the
> ellipsoid--and I don't imagine there will be new values of this being
> produced. But it depends on allowing the functionality of proj (not
> PROJ) to not require the user who just wants a projection to have to
> master the additional features needed to do datum transformations.
>
>     Of course grids are just projections, so it was easy for Gerald
> to add things like SPCS, blurring the line a bit; but, with Daan (and
> Gerald) I'd argue that it would be helpful to many users to have things
> somewhat distinct.
>
>     And, I'd like to raise a question (I'm genuinely curious) about how
> time-dependent motion will be added. Having been professionally engaged in
> measuring and modeling crustal motion for the last 30+ years, I can say
> that it
> is going to be a lot more complicated to keep track of. proj (as above)
> needs
> only the -le parameters (a fixed set); once you add the rigid-body motions
> for
> datum transformations there are a lot more parameters, many conventional
> (and
> so unchanging), which EPSG fortunately collects; adding grids for
> distortion
> (HARN) needs more information yet. But once you get into temporal changes,
> things are even worse: models will keep changing either because of better
> data
> or earthquakes (cf HTDP). This seems like a progression from a package
> dominated by algebra to a small algebraic component attached to a large
> and ever-growing database of parameters. I'm not arguing against it, at
> all, just saying that it is going to be quite a challenge beyond modifying
> the programs. (I completely lack the expertise to contribute to the code,
> but if anyone has any geophysics questions I'm happy to try to answer
> them).
>
> Thanks
> Duncan Agnew
>
>
>
> ______________________________ _________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mail man/listinfo/proj
>
>
>
> ______________________________ _________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/ mailman/listinfo/proj
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170811/1d8e5183/attachment.html>

From moquet.julien at gmail.com  Mon Aug 21 15:05:06 2017
From: moquet.julien at gmail.com (Julien Moquet)
Date: Tue, 22 Aug 2017 00:05:06 +0200
Subject: [Proj] [OSGeo-Discuss] final call friday - for software
	projects on beta website
In-Reply-To: <CAOhbgA=p5=jT983b9E75rcBCyiZHzXSYKdp2Z95_GGDYGAGbKA@mail.gmail.com>
References: <CAOhbgAkTza2A=+y2iEZqm31VTQa67g3G4yyHg_C-6ZOWXibnTQ@mail.gmail.com>
	<CANigTqWTMKLtuLAgEP6BN_YvV91-D9LnT0wTW7c63k_+T4V+kg@mail.gmail.com>
	<CAOhbgA=p5=jT983b9E75rcBCyiZHzXSYKdp2Z95_GGDYGAGbKA@mail.gmail.com>
Message-ID: <CANigTqVLVXimY4E3q5TYnn82THDdSoqus=-fOUyj5Bkx7=qBQw@mail.gmail.com>

Hi,

I made the requested changes there :
http://osgeo.getinteractive.nl/projects/proj4/?preview=true

It's nearby the OsGeoLive docs.

Regards,
Julien.



2017-08-17 3:03 GMT+02:00 Jody Garnett <jody.garnett at gmail.com>:

> Not too late it is only a beta, can you contact Jeffrey Johnson to get set
> up?
>
> On Wed, Aug 16, 2017 at 6:57 PM Julien Moquet <moquet.julien at gmail.com>
> wrote:
>
>> Hi Jody,
>>
>> I don't know if it is too late, but as we drop the Méta CRS project on
>> the OsgeoLive 11, may be can replace it by proj4 on the web site too.
>> I can help to do it (Kristian what do you think of ?).
>>
>> Regards,
>> Julien.
>>
>> Le 9 août 2017 19:27, "Jody Garnett" <jody.garnett at gmail.com> a écrit :
>>
>>> Final call for projects to fill in information for the beta website,
>>> please have content in by Friday August 9th for inclusion in the beta
>>> website as shown at foss4g next week.
>>>
>>> The data collection forms are here:
>>>
>>>    - Software Projects <https://goo.gl/forms/rBTxobMSBNGiEXnB3>
>>>    - Service Providers <https://goo.gl/forms/FHrIeJjBtfI8e2g53>
>>>    - Resources <https://goo.gl/forms/bzuUrsFAYEXRDVtq2>
>>>
>>> If you have already provided your content - thank you. Please review the
>>> result online osgeo.getinteractive.nl/projects. We can make any
>>> corrections needed if you stop by the OSGeo booth.
>>>
>>> A reminder that this website is open to *all* open source spatial
>>> projects, so if your project is spatial please fill in the form to be
>>> listed.
>>> --
>>> Jody Garnett
>>>
>>> _______________________________________________
>>> Discuss mailing list
>>> Discuss at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/discuss
>>>
>> --
> --
> Jody Garnett
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170822/c33848f2/attachment.html>

From jmfluis at gmail.com  Mon Aug 28 09:46:23 2017
From: jmfluis at gmail.com (Joaquim Luis)
Date: Mon, 28 Aug 2017 17:46:23 +0100
Subject: [Proj] Differences across v4.8 and v4.9
Message-ID: <op.y5owvl0zq5usb8@macmarilu>


Hi,

I have found these differences between proj.4 versions that I don't find  
any documentation referring them. There is one FAQ  
http://proj4.org/faq.html#why-do-i-get-different-results-with-4-5-0-and-4-6-0  
entry but is about differences between 4.5.0 and 4.6.0, whilst this is  
between 4.8 and 4.9.

The first one (between A1 and B1) is specially more troublesome because is  
the example provide in the cs2cs doc page  
(http://proj4.org/apps/cs2cs.html) that agrees with 4.8.0 and not with  
4.9.2

Joaquim

proj
Rel. 4.8.0, 6 March 2012

A1
echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to  
+proj=utm +zone=10  +datum=NAD27 -r
1402285.99      5076292.42 -0.00

A2
echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
384923.72       5809986.50

A3
echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
394576.51       5571243.64

-------------------------------------------------------------------------------
proj
Rel. 4.9.3, dd Month yyyy

B1
echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to  
+proj=utm +zone=10  +datum=NAD27 -r
1402292.27      5076292.65 -0.00

B2
echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
384537.46       5809944.81

B3
echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
394576.53       5570940.84


From even.rouault at spatialys.com  Mon Aug 28 10:12:50 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 28 Aug 2017 19:12:50 +0200
Subject: [Proj] Differences across v4.8 and v4.9
In-Reply-To: <op.y5owvl0zq5usb8@macmarilu>
References: <op.y5owvl0zq5usb8@macmarilu>
Message-ID: <6217635.IBLQ88GkrC@even-i700>

On lundi 28 août 2017 17:46:23 CEST Joaquim Luis wrote:
> Hi,
> 
> I have found these differences between proj.4 versions that I don't find
> any documentation referring them. There is one FAQ
> http://proj4.org/faq.html#why-do-i-get-different-results-with-4-5-0-and-4-6-
> 0 entry but is about differences between 4.5.0 and 4.6.0, whilst this is
> between 4.8 and 4.9.
> 
> The first one (between A1 and B1) is specially more troublesome because is
> the example provide in the cs2cs doc page
> (http://proj4.org/apps/cs2cs.html) that agrees with 4.8.0 and not with
> 4.9.2
> 
> Joaquim
> 
> proj
> Rel. 4.8.0, 6 March 2012
> 
> A1
> echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to
> +proj=utm +zone=10  +datum=NAD27 -r
> 1402285.99      5076292.42 -0.00

I do get this result with proj 4.9.3 too (actually I get 1402285.98	5076292.42 -0.00,
so a slight difference rounding), so I suspect your below 4.9.3 build has been made
without unzipping first the grids at
http://download.osgeo.org/proj/proj-datumgrid-1.6.zip
into the nad/ directory

You can check if grids are used with

echo 45.25919444444 -111.5 | PROJ_DEBUG=ON cs2cs  +proj=latlong +datum=NAD83 +to  +proj=utm +zone=10  +datum=NAD27 -r

You should see towards the end something like

NTv1 393x177: LL=(-142,40) UR=(-44,84)
pj_open_lib(conus): call fopen([...]/share/proj/conus) - succeeded

pj_apply_gridshift(): used Conterminous United States


> 
> A2
> echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
> 384923.72       5809986.50

Not completely sure about that one when looking at history of
https://github.com/OSGeo/proj.4/commits/master/src/PJ_aeqd.c

Perhaps
https://github.com/OSGeo/proj.4/commit/2d0acd7d61374a167f532cd2851f46f63d5e09a4
or
https://github.com/OSGeo/proj.4/commit/de8d6779aaabe0c46c06b9047bc6a6a978cc0758

> 
> A3
> echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
> 394576.51       5571243.64
> 

I suspect the difference comes from
https://github.com/OSGeo/proj.4/commit/d856016ca1a178cc81c4474c0a6bbe78d106d012

I agree the https://github.com/OSGeo/proj.4/blob/master/NEWS don't mention this case nor A2.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170828/567f40ca/attachment.html>

From kreve at sdfe.dk  Mon Aug 28 10:27:32 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 28 Aug 2017 17:27:32 +0000
Subject: [Proj] Differences across v4.8 and v4.9
In-Reply-To: <op.y5owvl0zq5usb8@macmarilu>
References: <op.y5owvl0zq5usb8@macmarilu>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA72DB203@S000014.PROD.SITAD.DK>

Hi Joaquin,

For specifics about changes between versions you should consult the NEWS file in the source distribution [0],
or even better, the git commit log [1].

I tried recreating your findings with the following script:

-----------------------------------------------------------------------------------------------------------------------------------------------
#!/bin/sh

proj

echo A1
echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to +proj=utm +zone=10  +datum=NAD27 -r
echo "1402285.99      5076292.42 -0.00"
echo
echo A2
echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
echo "384923.72       5809986.50"
echo
echo A3
echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
echo "394576.51       5571243.64"
-----------------------------------------------------------------------------------------------------------------------------------------------

And got the following output:

-----------------------------------------------------------------------------------------------------------------------------------------------
$ ./test_proj4.9.3.sh
Rel. 4.9.3, 15 August 2016
usage: proj [ -bCeEfiIlormsStTvVwW [args] ] [ +opts[=arg] ] [ files ]
A1
1402285.98	5076292.42 -0.00
1402285.99      5076292.42 -0.00

A2
384537.46	5809944.81
384923.72       5809986.50

A3
394576.53	5570940.84
394576.51       5571243.64
-----------------------------------------------------------------------------------------------------------------------------------------------

So, I am not able to reproduce the output you get in B1, although I do get an answer very similar to A1.
This discrepancy can most likely be explained by the fact that the default UTM implementation was changed
to etmerc with version 4.9.3.

For the second example I get the same difference as you. I believe this can be explained by the improved
geodesic code that was introduced 4.9.0. The aeqd code was updated when GeographicLib [2].

Your third example I can also recreate. I believe it might be caused by a change in coefficients in the
source code [3].

For all of the three examples you've found, I would say that the reason for them is that the algorithms
have been improved (although documented poorly). The examples in the doc pages should obviously be
updated to reflect the current behaviour of PROJ.4. 

/Kristian

[0] https://github.com/OSGeo/proj.4/blob/master/NEWS
[1] https://github.com/OSGeo/proj.4/commits/master
[2] https://github.com/OSGeo/proj.4/commit/de8d6779aaabe0c46c06b9047bc6a6a978cc0758
[3] https://github.com/OSGeo/proj.4/commit/d856016ca1a178cc81c4474c0a6bbe78d106d012

________________________________________
Fra: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] p&#229; vegne af Joaquim Luis [jmfluis at gmail.com]
Sendt: 28. august 2017 18:46
Til: PROJ.4 and general Projections Discussions
Emne: [Proj] Differences across v4.8 and v4.9

Hi,

I have found these differences between proj.4 versions that I don't find
any documentation referring them. There is one FAQ
http://proj4.org/faq.html#why-do-i-get-different-results-with-4-5-0-and-4-6-0
entry but is about differences between 4.5.0 and 4.6.0, whilst this is
between 4.8 and 4.9.

The first one (between A1 and B1) is specially more troublesome because is
the example provide in the cs2cs doc page
(http://proj4.org/apps/cs2cs.html) that agrees with 4.8.0 and not with
4.9.2

Joaquim

proj
Rel. 4.8.0, 6 March 2012

A1
echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to
+proj=utm +zone=10  +datum=NAD27 -r
1402285.99      5076292.42 -0.00

A2
echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
384923.72       5809986.50

A3
echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
394576.51       5571243.64

-------------------------------------------------------------------------------
proj
Rel. 4.9.3, dd Month yyyy

B1
echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to
+proj=utm +zone=10  +datum=NAD27 -r
1402292.27      5076292.65 -0.00

B2
echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
384537.46       5809944.81

B3
echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
394576.53       5570940.84
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From jmfluis at gmail.com  Mon Aug 28 10:28:21 2017
From: jmfluis at gmail.com (Joaquim Luis)
Date: Mon, 28 Aug 2017 18:28:21 +0100
Subject: [Proj] Differences across v4.8 and v4.9
In-Reply-To: <6217635.IBLQ88GkrC@even-i700>
References: <op.y5owvl0zq5usb8@macmarilu> <6217635.IBLQ88GkrC@even-i700>
Message-ID: <op.y5oytji9q5usb8@macmarilu>


>
>
>> The first one (between A1 and B1) is specially more troublesome because  
>> is
>
>
>
>> the example provide in the cs2cs doc page
>
>
>
>> (http://proj4.org/apps/cs2cs.html) that agrees with 4.8.0 and not with
>
>
>
>> 4.9.2
>
>
>
>>
>
>
>
>> Joaquim
>
>
>
>>
>
>
>
>> proj
>
>
>
>> Rel. 4.8.0, 6 March 2012
>
>
>
>>
>
>
>
>> A1
>
>
>
>> echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to
>
>
>
>> +proj=utm +zone=10  +datum=NAD27 -r
>
>
>
>> 1402285.99      5076292.42 -0.00
>
>
>
>
>
>
> I do get this result with proj 4.9.3 too (actually I get  
> 1402285.98	5076292.42 -0.00,
>
>
>
> so a slight difference rounding), so I suspect your below 4.9.3 build  
> has been made
>
>
>
> without unzipping first the grids at
>
>
>
> http://download.osgeo.org/proj/proj-datumgrid-1.6.zip
>
>
>
> into the nad/ directory
>


No I hadn't. I didn't know about those files. I build proj.4 from the  
Github repo and thought it had all necessary files.

Now I also get

pj_apply_gridshift(): used Conterminous United States
1402285.98      5076292.42 -0.00

but it still complains of not finding

pj_open_lib(ntv2_0.gsb): call  
fopen(C:\programs\compa_libs\proj4_GIT\nad\ntv2_0.gsb) - failed

which is not in the proj-datumgrid-1.6.zip file


>
>
>
>
>
> You can check if grids are used with
>
>
>
>
>
>
> echo 45.25919444444 -111.5 | PROJ_DEBUG=ON cs2cs  +proj=latlong  
> +datum=NAD83 +to  +proj=utm >+zone=10  +datum=NAD27 -r
>
>
>
>
>
>
> You should see towards the end something like
>
>
>
>
>
>
> NTv1 393x177: LL=(-142,40) UR=(-44,84)
>
>
>
> pj_open_lib(conus): call fopen([...]/share/proj/conus) - succeeded
>
>
>
>
>
>
> pj_apply_gridshift(): used Conterminous United States
>
>
>
>
>
>
>
>
>
>>
>
>
>
>> A2
>
>
>
>> echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
>
>
>
>> 384923.72       5809986.50
>
>
>
>
>
>
> Not completely sure about that one when looking at history of
>
>
>
> https://github.com/OSGeo/proj.4/commits/master/src/PJ_aeqd.c
>
>
>
>
>
>
> Perhaps
>
>
>
> https://github.com/OSGeo/proj.4/commit/2d0acd7d61374a167f532cd2851f46f63d5e09a4
>
>
>
> or
>
>
>
> https://github.com/OSGeo/proj.4/commit/de8d6779aaabe0c46c06b9047bc6a6a978cc0758
>
>
>
>
>
>
>>
>
>
>
>> A3
>
>
>
>> echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
>
>
>
>> 394576.51       5571243.64
>
>
>
>>
>
>
>
>
>
>
> I suspect the difference comes from
>
>
>
> https://github.com/OSGeo/proj.4/commit/d856016ca1a178cc81c4474c0a6bbe78d106d012
>
>
>
>
>
>
> I agree the https://github.com/OSGeo/proj.4/blob/master/NEWS don't  
> mention this case nor A2.
>
>
>
>
>
>
> --
>
>
> Spatialys - Geospatial professional services
>
>
>
> http://www.spatialys.com


From jmfluis at gmail.com  Mon Aug 28 10:40:58 2017
From: jmfluis at gmail.com (Joaquim Luis)
Date: Mon, 28 Aug 2017 18:40:58 +0100
Subject: [Proj] Differences across v4.8 and v4.9
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EA72DB203@S000014.PROD.SITAD.DK>
References: <op.y5owvl0zq5usb8@macmarilu>
	<2E885BB293AF0448A0181138489E9A0EA72DB203@S000014.PROD.SITAD.DK>
Message-ID: <op.y5ozekavq5usb8@macmarilu>

Thanks Kristian,

The differences in A1/B1 are, like Even found, due to missing grids in the  
nad directory.

Regarding this and the others, I'm implementing proj.4 in GMT and so want  
to be sure that the discrepancies that I find meanwhile are not due to  
errors of mine.

Joaquim


> Hi Joaquin,
>
> For specifics about changes between versions you should consult the NEWS  
> file in the source distribution [0],
> or even better, the git commit log [1].
>
> I tried recreating your findings with the following script:
>
> -----------------------------------------------------------------------------------------------------------------------------------------------
> #!/bin/sh
>
> proj
>
> echo A1
> echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to  
> +proj=utm +zone=10  +datum=NAD27 -r
> echo "1402285.99      5076292.42 -0.00"
> echo
> echo A2
> echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
> echo "384923.72       5809986.50"
> echo
> echo A3
> echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
> echo "394576.51       5571243.64"
> -----------------------------------------------------------------------------------------------------------------------------------------------
>
> And got the following output:
>
> -----------------------------------------------------------------------------------------------------------------------------------------------
> $ ./test_proj4.9.3.sh
> Rel. 4.9.3, 15 August 2016
> usage: proj [ -bCeEfiIlormsStTvVwW [args] ] [ +opts[=arg] ] [ files ]
> A1
> 1402285.98	5076292.42 -0.00
> 1402285.99      5076292.42 -0.00
>
> A2
> 384537.46	5809944.81
> 384923.72       5809986.50
>
> A3
> 394576.53	5570940.84
> 394576.51       5571243.64
> -----------------------------------------------------------------------------------------------------------------------------------------------
>
> So, I am not able to reproduce the output you get in B1, although I do  
> get an answer very similar to A1.
> This discrepancy can most likely be explained by the fact that the  
> default UTM implementation was changed
> to etmerc with version 4.9.3.
>
> For the second example I get the same difference as you. I believe this  
> can be explained by the improved
> geodesic code that was introduced 4.9.0. The aeqd code was updated when  
> GeographicLib [2].
>
> Your third example I can also recreate. I believe it might be caused by  
> a change in coefficients in the
> source code [3].
>
> For all of the three examples you've found, I would say that the reason  
> for them is that the algorithms
> have been improved (although documented poorly). The examples in the doc  
> pages should obviously be
> updated to reflect the current behaviour of PROJ.4.
>
> /Kristian
>
> [0] https://github.com/OSGeo/proj.4/blob/master/NEWS
> [1] https://github.com/OSGeo/proj.4/commits/master
> [2]  
> https://github.com/OSGeo/proj.4/commit/de8d6779aaabe0c46c06b9047bc6a6a978cc0758
> [3]  
> https://github.com/OSGeo/proj.4/commit/d856016ca1a178cc81c4474c0a6bbe78d106d012
>
> ________________________________________
> Fra: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org]  
> p&#229; vegne af Joaquim Luis [jmfluis at gmail.com]
> Sendt: 28. august 2017 18:46
> Til: PROJ.4 and general Projections Discussions
> Emne: [Proj] Differences across v4.8 and v4.9
>
> Hi,
>
> I have found these differences between proj.4 versions that I don't find
> any documentation referring them. There is one FAQ
> http://proj4.org/faq.html#why-do-i-get-different-results-with-4-5-0-and-4-6-0
> entry but is about differences between 4.5.0 and 4.6.0, whilst this is
> between 4.8 and 4.9.
>
> The first one (between A1 and B1) is specially more troublesome because  
> is
> the example provide in the cs2cs doc page
> (http://proj4.org/apps/cs2cs.html) that agrees with 4.8.0 and not with
> 4.9.2
>
> Joaquim
>
> proj
> Rel. 4.8.0, 6 March 2012
>
> A1
> echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to
> +proj=utm +zone=10  +datum=NAD27 -r
> 1402285.99      5076292.42 -0.00
>
> A2
> echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
> 384923.72       5809986.50
>
> A3
> echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
> 394576.51       5571243.64
>
> -------------------------------------------------------------------------------
> proj
> Rel. 4.9.3, dd Month yyyy
>
> B1
> echo 45.25919444444 -111.5 | cs2cs +proj=latlong +datum=NAD83 +to
> +proj=utm +zone=10  +datum=NAD27 -r
> 1402292.27      5076292.65 -0.00
>
> B2
> echo 4.897 52.371 | proj +proj=aeqd +ellps=WGS84 +units=m
> 384537.46       5809944.81
>
> B3
> echo 4.897 52.371 | proj +proj=robin +ellps=WGS84 +units=m
> 394576.53       5570940.84
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From kreve at sdfe.dk  Mon Aug 28 10:58:57 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 28 Aug 2017 17:58:57 +0000
Subject: [Proj] Remove wiki from GitHub page
Message-ID: <2E885BB293AF0448A0181138489E9A0EA72DC2E3@S000014.PROD.SITAD.DK>

For my previous email to the list I did a google search for the ntv2_0.gsb grid and was directed to the github wiki:

https://github.com/OSGeo/proj.4/wiki/NonFreeGrids

Since all the information from wiki has been transferred to the proj4.org website I think the wiki should be disabled
to make sure users read the up to date documentation.

Howard, or perhaps Even, can you disable the wiki on the GitHub page?

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20170828/096b7291/attachment.html>

From kreve at sdfe.dk  Mon Aug 28 11:45:23 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 28 Aug 2017 18:45:23 +0000
Subject: [Proj] Differences across v4.8 and v4.9
In-Reply-To: <op.y5o0a4maq5usb8@macmarilu>
References: <op.y5owvl0zq5usb8@macmarilu>
	<2E885BB293AF0448A0181138489E9A0EA72DB203@S000014.PROD.SITAD.DK>
	<op.y5ozekavq5usb8@macmarilu>
	<2E885BB293AF0448A0181138489E9A0EA72DC28B@S000014.PROD.SITAD.DK>
	<op.y5o0a4maq5usb8@macmarilu>
Message-ID: <2E885BB293AF0448A0181138489E9A0EA72DC39E@S000014.PROD.SITAD.DK>

> Regarding the new API, ... I'm counting on Even because we are accessing  
proj.4 via GDAL.

In that case, never mind. I just wanted to put it on your radar in case you were unaware and interacting directly with PROJ.4. I am sure the features we are working on will show up in GDAL as well at some point in the future.

/Kristian

-----Oprindelig meddelelse-----
Fra: Joaquim Luis [mailto:jmfluis at gmail.com] 
Sendt: 28. august 2017 20:01
Til: Kristian Evers <kreve at sdfe.dk>
Emne: Re: SV: [Proj] Differences across v4.8 and v4.9


> In that case, are you aware that we are introducing a new API to PROJ.4  
> with the next version (that will be released soon)?
> I would suggest you use the new API if you are if you haven't used  
> PROJ.4 in your application previously.

Yes, I've been following the discussions and curious how it's going to be  
implemented (I'm a Geophysicist who works in plate kinematics from time to  
time, though on the scales of Ma for which Euler poles do not always  
exactly agree with GPS ones).

Regarding the new API, ... I'm counting on Even because we are accessing  
proj.4 via GDAL.


