From evgen_sobolev at mail.ru  Tue Oct  1 04:06:18 2019
From: evgen_sobolev at mail.ru (=?UTF-8?B?0JXQstCz0LXQvdC40Lkg0KHQvtCx0L7Qu9C10LI=?=)
Date: Tue, 01 Oct 2019 14:06:18 +0300
Subject: [PROJ] =?utf-8?q?How_use_proj=5Fcreate=28=29_from_EPSG_code=3F?=
Message-ID: <1569927978.4818253@f414.i.mail.ru>



Hi!

I use PROJ 6.1.1

Help me! How build PJ* from EPSG code?

My code: PJ* P = proj_create(PJ_DEFAULT_CTX, "EPSG::32636");


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191001/bde753db/attachment.html>

From kristianevers at gmail.com  Tue Oct  1 12:01:56 2019
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 1 Oct 2019 21:01:56 +0200
Subject: [PROJ] The new PROJ logo
References: <EB8620D3-C952-45FE-B936-C9F20B8DFE2D@sdfe.dk>
Message-ID: <02BC333B-2673-4681-A027-E70A2222AA7D@gmail.com>

All,

The PSC has discussed all the various logo proposals submitted by Nicolas and Sylvain. While we found that many of the suggested logos were very good one stood out from the crowd. The 12B proposal from Sylvain. We have decided to adopt that as the new logo for PROJ since it is clear, uncluttered and, hence, is recognizable and readable at any scale - and even provides an excellent favicon. So, here it is, the new PROJ logo:



Many thanks to both Nicolas and Sylvain for their great logo suggestions. And thank you to those of you who helped them along by collaborative brain storming here on the mailing list.

/Kristian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191001/a162ecc2/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: F245EC93-E3C8-45CF-8243-659081AB8F50.png
Type: image/png
Size: 9971 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191001/a162ecc2/attachment.png>

From idan at miara.com  Thu Oct  3 02:21:24 2019
From: idan at miara.com (Idan Miara)
Date: Thu, 3 Oct 2019 12:21:24 +0300
Subject: [PROJ] 6.2 vs 4.9.3: 4326 <-> 32633 (UTM) performance?
Message-ID: <CAEDrt3-Kap6Ze=1D18hOeYYc_ASr-yUhR-iOCXqFsxHGnsqpeA@mail.gmail.com>

Hi,

I'm considering updating my program to use Proj 6.2 (currently I use 4.9.3)
The performance of transforming lots of single coordinates between
EPSG:4326 and EPSG:32633 (forward and backwards) is important thus I want
to know what to expect.
Any quick insights on that matter?

Kind regards,
Idan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191003/a49fd46c/attachment.html>

From even.rouault at spatialys.com  Thu Oct  3 02:30:47 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 03 Oct 2019 11:30:47 +0200
Subject: [PROJ] 6.2 vs 4.9.3: 4326 <-> 32633 (UTM) performance?
In-Reply-To: <CAEDrt3-Kap6Ze=1D18hOeYYc_ASr-yUhR-iOCXqFsxHGnsqpeA@mail.gmail.com>
References: <CAEDrt3-Kap6Ze=1D18hOeYYc_ASr-yUhR-iOCXqFsxHGnsqpeA@mail.gmail.com>
Message-ID: <2620950.nVxKZY7VDh@even-i700>

On jeudi 3 octobre 2019 12:21:24 CEST Idan Miara wrote:
> Hi,
> 
> I'm considering updating my program to use Proj 6.2 (currently I use 4.9.3)
> The performance of transforming lots of single coordinates between
> EPSG:4326 and EPSG:32633 (forward and backwards) is important thus I want
> to know what to expect.
> Any quick insights on that matter?

See
https://github.com/OSGeo/PROJ/issues/1384
https://github.com/OSGeo/PROJ/issues/1367

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From idan at miara.com  Thu Oct  3 05:47:27 2019
From: idan at miara.com (Idan Miara)
Date: Thu, 3 Oct 2019 15:47:27 +0300
Subject: [PROJ] 6.2 vs 4.9.3: 4326 <-> 32633 (UTM) performance?
In-Reply-To: <2620950.nVxKZY7VDh@even-i700>
References: <CAEDrt3-Kap6Ze=1D18hOeYYc_ASr-yUhR-iOCXqFsxHGnsqpeA@mail.gmail.com>
 <2620950.nVxKZY7VDh@even-i700>
Message-ID: <CAEDrt39mWdBXmdvcnpnM9mN=7J9P6uRyUf4h9Y_F2BOaGRPv6w@mail.gmail.com>

Got it, thanks!

On Thu, 3 Oct 2019 at 12:30, Even Rouault <even.rouault at spatialys.com>
wrote:

> On jeudi 3 octobre 2019 12:21:24 CEST Idan Miara wrote:
> > Hi,
> >
> > I'm considering updating my program to use Proj 6.2 (currently I use
> 4.9.3)
> > The performance of transforming lots of single coordinates between
> > EPSG:4326 and EPSG:32633 (forward and backwards) is important thus I want
> > to know what to expect.
> > Any quick insights on that matter?
>
> See
> https://github.com/OSGeo/PROJ/issues/1384
> https://github.com/OSGeo/PROJ/issues/1367
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191003/af963c6f/attachment.html>

From martin.desruisseaux at geomatys.com  Wed Oct  9 06:47:26 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Wed, 9 Oct 2019 15:47:26 +0200
Subject: [PROJ] Way to transform coordinates given an
 osgeo::proj::operation::CoordinateOperation?
Message-ID: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>

Hello

I'm trying to find the best way to transform coordinate tupples given an 
osgeo::proj::operation::CoordinateOperation instance. My current 
understanding is that I need to get a PJ object as below. Is that correct?

    CoordinateOperationNNPtr operation = ...
    PJ_CONTEXT *ctx = ...
    PJ *pj = (ctx, operation);
    // Then use PJ as documented in "getting started" guide.

If above is the right approach, looking at the source code of 
pj_obj_create, there is two things I would like to do differently:

  * Use an existing osgeo::proj::io::DatabaseContext instance.
  * Do not fallback on pj_new() if the main block could not create the PJ.

So would the following block be okay (I know if use an internal method 
call, but I didn't saw a way to avoid it yet):

    DatabaseContext dbContext = ...;
    auto formatter = PROJStringFormatter::create(PROJStringFormatter::Convention::PROJ_5, dbContext);
    auto projString = coordop->exportToPROJString(formatter.get());
    PJ *pj = pj_create_internal(ctx, projString.c_str());
    // Done; do not touch to pj->iso_obj or pj->cpp_context.

Or is there a better way to "execute" a CoordinateOperation with C++ API?

     Thanks,

         Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191009/47d619eb/attachment.html>

From even.rouault at spatialys.com  Wed Oct  9 07:19:56 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 09 Oct 2019 16:19:56 +0200
Subject: [PROJ] Way to transform coordinates given an
	osgeo::proj::operation::CoordinateOperation?
In-Reply-To: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>
References: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>
Message-ID: <2068318.WCFyvjCoof@even-i700>

On mercredi 9 octobre 2019 15:47:26 CEST Martin Desruisseaux wrote:
> Hello
> 
> I'm trying to find the best way to transform coordinate tupples given an
> osgeo::proj::operation::CoordinateOperation instance. My current
> understanding is that I need to get a PJ object as below. Is that correct?
> 
>     CoordinateOperationNNPtr operation = ...
>     PJ_CONTEXT *ctx = ...
>     PJ *pj = (ctx, operation);
>     // Then use PJ as documented in "getting started" guide.
> 
> If above is the right approach, looking at the source code of
> pj_obj_create, there is two things I would like to do differently:
> 
>   * Use an existing osgeo::proj::io::DatabaseContext instance.
>   * Do not fallback on pj_new() if the main block could not create the PJ.
> 
> So would the following block be okay (I know if use an internal method
> call, but I didn't saw a way to avoid it yet):
> 
>     DatabaseContext dbContext = ...;
>     auto formatter =
> PROJStringFormatter::create(PROJStringFormatter::Convention::PROJ_5,
> dbContext); auto projString = coordop->exportToPROJString(formatter.get());
> PJ *pj = pj_create_internal(ctx, projString.c_str());
>     // Done; do not touch to pj->iso_obj or pj->cpp_context.
> 
> Or is there a better way to "execute" a CoordinateOperation with C++ API?

You have indeed to go to the C API, but use proj_create() instead of 
pj_create_internal()

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From martin.desruisseaux at geomatys.com  Wed Oct  9 07:36:10 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Wed, 9 Oct 2019 16:36:10 +0200
Subject: [PROJ] Way to transform coordinates given an
 osgeo::proj::operation::CoordinateOperation?
In-Reply-To: <2068318.WCFyvjCoof@even-i700>
References: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>
 <2068318.WCFyvjCoof@even-i700>
Message-ID: <fc97fea4-3104-609c-9466-e232d857e2cd@geomatys.com>

Le 09/10/2019 à 16:19, Even Rouault a écrit :
> You have indeed to go to the C API, but use proj_create() instead of 
> pj_create_internal() 

Thanks. But looking at proj_create() source code, it seems to fetch its 
own DatabaseContext (or maybe not, depending on PROJ string content). 
Can I assume that the PROJ string will be such as proj_create() will not 
need to fetch a DatabaseContext? Or alternatively is there a public API 
for associating a DatabaseContext to a PJ_CONTEXT (if this is not a 
wrong thing to do)?

If understand that a PJ object can be used by only one thread at a time. 
But does PJ retains a reference to PJ_CONTEXT or DatabaseContext after 
construction? In the later case, the requirement would be a little bit 
stronger since I must ensure that no PJ constructed with the same 
PJ_CONTEXT are used in same time, right?

     Martin



From even.rouault at spatialys.com  Wed Oct  9 07:56:32 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 09 Oct 2019 16:56:32 +0200
Subject: [PROJ] Way to transform coordinates given an
	osgeo::proj::operation::CoordinateOperation?
In-Reply-To: <fc97fea4-3104-609c-9466-e232d857e2cd@geomatys.com>
References: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>
 <2068318.WCFyvjCoof@even-i700>
 <fc97fea4-3104-609c-9466-e232d857e2cd@geomatys.com>
Message-ID: <3615065.kftH1gWE4p@even-i700>

On mercredi 9 octobre 2019 16:36:10 CEST Martin Desruisseaux wrote:
> Le 09/10/2019 à 16:19, Even Rouault a écrit :
> > You have indeed to go to the C API, but use proj_create() instead of
> > pj_create_internal()
> 
> Thanks. But looking at proj_create() source code, it seems to fetch its
> own DatabaseContext (or maybe not, depending on PROJ string content).

It should normally use the one of the PJ_CONTEXT.

> Can I assume that the PROJ string will be such as proj_create() will not
> need to fetch a DatabaseContext?

Yes, a PROJ pipeline string shouldn't open the database.

> 
> If understand that a PJ object can be used by only one thread at a time.
> But does PJ retains a reference to PJ_CONTEXT or DatabaseContext after
> construction?

Yes

> In the later case, the requirement would be a little bit
> stronger since I must ensure that no PJ constructed with the same
> PJ_CONTEXT are used in same time, right?

Yes

Or use
void PROJ_DLL proj_assign_context(PJ* pj, PJ_CONTEXT* ctx);

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From martin.desruisseaux at geomatys.com  Wed Oct  9 08:07:52 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Wed, 9 Oct 2019 17:07:52 +0200
Subject: [PROJ] Way to transform coordinates given an
 osgeo::proj::operation::CoordinateOperation?
In-Reply-To: <3615065.kftH1gWE4p@even-i700>
References: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>
 <2068318.WCFyvjCoof@even-i700>
 <fc97fea4-3104-609c-9466-e232d857e2cd@geomatys.com>
 <3615065.kftH1gWE4p@even-i700>
Message-ID: <56a785ec-025b-0cbd-6274-38712d47b66d@geomatys.com>

Le 09/10/2019 à 16:56, Even Rouault a écrit :
> Or use
> void PROJ_DLL proj_assign_context(PJ* pj, PJ_CONTEXT* ctx);

Thanks! I didn't saw that one. It should do the trick for the 
multi-threading issue.

     Martin



From even.rouault at spatialys.com  Wed Oct  9 08:28:44 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 09 Oct 2019 17:28:44 +0200
Subject: [PROJ] Way to transform coordinates given an
	osgeo::proj::operation::CoordinateOperation?
In-Reply-To: <56a785ec-025b-0cbd-6274-38712d47b66d@geomatys.com>
References: <74110a59-0eb7-66fd-f7a9-24964142dee6@geomatys.com>
 <3615065.kftH1gWE4p@even-i700>
 <56a785ec-025b-0cbd-6274-38712d47b66d@geomatys.com>
Message-ID: <1841414.HQPEJd2WSU@even-i700>

On mercredi 9 octobre 2019 17:07:52 CEST Martin Desruisseaux wrote:
> Le 09/10/2019 à 16:56, Even Rouault a écrit :
> > Or use
> > void PROJ_DLL proj_assign_context(PJ* pj, PJ_CONTEXT* ctx);
> 

> Thanks! I didn't saw that one. It should do the trick for the
> multi-threading issue.

Was recently moved from proj_experimental.h to proj.h


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From martin.desruisseaux at geomatys.com  Sat Oct 12 06:37:47 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Sat, 12 Oct 2019 15:37:47 +0200
Subject: [PROJ] Documentation typo (minor)
Message-ID: <174e4c94-eb92-549b-8f63-0a2410f9d2a4@geomatys.com>

C++ API documentation for SingleCRS.coordinateSystem() [1] contains 
/"This might be null, in which case datumEnsemble() return will not be 
null"/. I think this is an accidental copy-and-paste from the 
SingleCRS.datum() documentation and that this sentence (together with 
/"that might be null"/ in the return description) should be removed in 
the coordinateSystem() case.

[1] https://proj.org/development/reference/cpp/crs.html#_CPPv4N5osgeo4proj3crs9SingleCRS16coordinateSystemEv

     Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191012/9edd8b14/attachment.html>

From even.rouault at spatialys.com  Sat Oct 12 06:56:07 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 12 Oct 2019 15:56:07 +0200
Subject: [PROJ] Documentation typo (minor)
In-Reply-To: <174e4c94-eb92-549b-8f63-0a2410f9d2a4@geomatys.com>
References: <174e4c94-eb92-549b-8f63-0a2410f9d2a4@geomatys.com>
Message-ID: <2649008.Aqm4lC1YJK@even-i700>

Martin,

Can you just use pull requests to optimize overall efficiency :-) ?

Even

On samedi 12 octobre 2019 15:37:47 CEST Martin Desruisseaux wrote:
> C++ API documentation for SingleCRS.coordinateSystem() [1] contains
> /"This might be null, in which case datumEnsemble() return will not be
> null"/. I think this is an accidental copy-and-paste from the
> SingleCRS.datum() documentation and that this sentence (together with
> /"that might be null"/ in the return description) should be removed in
> the coordinateSystem() case.
> 
> [1]
> https://proj.org/development/reference/cpp/crs.html#_CPPv4N5osgeo4proj3crs9
> SingleCRS16coordinateSystemEv
> 
>      Martin


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kristianevers at gmail.com  Thu Oct 17 12:24:02 2019
From: kristianevers at gmail.com (Kristian Evers)
Date: Thu, 17 Oct 2019 21:24:02 +0200
Subject: [PROJ] Code of conduct
Message-ID: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>

PROJ is very close to graduating as an OSGeo project. On the Incubation
mailing list [0] Jody has asked that the project adopt a code of conduct.
This is a new requirement for OSGeo projects that has not yet been added
to the incubation checklist. OSGeo more or less enforces the use of the
Contributor Covenant code of conduct[1][2].

The wording in the Contributor Covenant has been carefully chosen and
reviewed by a large audience. Personally I think it contains solid principles
for a community like ours to follow.

I have prepared a pull request [3] with the necessary changes to adopt the
code of conduct. I will not merge it before we’ve had a discussion about the
code of conduct and it’s use in the PROJ community. I believe adopting a
CoC is substantial enough decision for the project that it warrants a PSC vote.

Please share your thoughts on adopting a code of conduct.

/Kristian

[0] https://lists.osgeo.org/pipermail/incubator/2019-October/004006.html <https://lists.osgeo.org/pipermail/incubator/2019-October/004006.html> 
[1] https://www.osgeo.org/code_of_conduct/ <https://www.osgeo.org/code_of_conduct/>
[2] https://www.contributor-covenant.org/ <https://www.contributor-covenant.org/>
[3] https://github.com/OSGeo/PROJ/pull/1681 <https://github.com/OSGeo/PROJ/pull/1681>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191017/98431c52/attachment.html>

From even.rouault at spatialys.com  Thu Oct 17 12:36:52 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 17 Oct 2019 21:36:52 +0200
Subject: [PROJ] Code of conduct
In-Reply-To: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
Message-ID: <2554747.2MQOBd52sR@even-i700>

On jeudi 17 octobre 2019 21:24:02 CEST Kristian Evers wrote:
> PROJ is very close to graduating as an OSGeo project. On the Incubation
> mailing list [0] Jody has asked that the project adopt a code of conduct.
> This is a new requirement for OSGeo projects that has not yet been added
> to the incubation checklist. OSGeo more or less enforces the use of the
> Contributor Covenant code of conduct[1][2].
> 
> The wording in the Contributor Covenant has been carefully chosen and
> reviewed by a large audience. Personally I think it contains solid
> principles for a community like ours to follow.
> 
> I have prepared a pull request [3] with the necessary changes to adopt the
> code of conduct. I will not merge it before we’ve had a discussion about the
> code of conduct and it’s use in the PROJ community. I believe adopting a
> CoC is substantial enough decision for the project that it warrants a PSC
> vote.
> 
> Please share your thoughts on adopting a code of conduct.

+1 for Contributor Covenant

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From howard at hobu.co  Thu Oct 17 12:54:19 2019
From: howard at hobu.co (Howard Butler)
Date: Thu, 17 Oct 2019 14:54:19 -0500
Subject: [PROJ] Code of conduct
In-Reply-To: <2554747.2MQOBd52sR@even-i700>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
 <2554747.2MQOBd52sR@even-i700>
Message-ID: <CAKyBbG4e-eryNz+E0xM+3=TVMvtdt0qqChvuKcEc=7bNepEAXQ@mail.gmail.com>

On Thu, Oct 17, 2019 at 2:36 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> On jeudi 17 octobre 2019 21:24:02 CEST Kristian Evers wrote:
> > PROJ is very close to graduating as an OSGeo project. On the Incubation
> > mailing list [0] Jody has asked that the project adopt a code of conduct.
> > This is a new requirement for OSGeo projects that has not yet been added
> > to the incubation checklist. OSGeo more or less enforces the use of the
> > Contributor Covenant code of conduct[1][2].
> >
> > The wording in the Contributor Covenant has been carefully chosen and
> > reviewed by a large audience. Personally I think it contains solid
> > principles for a community like ours to follow.
> >
> > I have prepared a pull request [3] with the necessary changes to adopt
> the
> > code of conduct. I will not merge it before we’ve had a discussion about
> the
> > code of conduct and it’s use in the PROJ community. I believe adopting a
> > CoC is substantial enough decision for the project that it warrants a PSC
> > vote.
> >
> > Please share your thoughts on adopting a code of conduct.
>
> +1 for Contributor Covenant
>
>
+1 for adoption, contingent on updating relevant email addresses to forward
to proper locations.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191017/24d036cb/attachment.html>

From schwehr at gmail.com  Thu Oct 17 13:10:18 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Thu, 17 Oct 2019 13:10:18 -0700
Subject: [PROJ] Code of conduct
In-Reply-To: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
Message-ID: <CACmBxytcEQHC-n40fnNxGxOp72STXoxEGt39pq3dRHFSWij23g@mail.gmail.com>

+1 Kurt

Maybe hold off on submitting the pull request until it's had some time
(maybe a week?) for people to speak up?

On Thu, Oct 17, 2019 at 12:24 PM Kristian Evers <kristianevers at gmail.com>
wrote:

> PROJ is very close to graduating as an OSGeo project. On the Incubation
> mailing list [0] Jody has asked that the project adopt a code of conduct.
> This is a new requirement for OSGeo projects that has not yet been added
> to the incubation checklist. OSGeo more or less enforces the use of the
> Contributor Covenant code of conduct[1][2].
>
> The wording in the Contributor Covenant has been carefully chosen and
> reviewed by a large audience. Personally I think it contains solid
> principles
> for a community like ours to follow.
>
> I have prepared a pull request [3] with the necessary changes to adopt the
> code of conduct. I will not merge it before we’ve had a discussion about
> the
> code of conduct and it’s use in the PROJ community. I believe adopting a
> CoC is substantial enough decision for the project that it warrants a PSC
> vote.
>
> Please share your thoughts on adopting a code of conduct.
>
> /Kristian
>
> [0] https://lists.osgeo.org/pipermail/incubator/2019-October/004006.html
> [1] https://www.osgeo.org/code_of_conduct/
> [2] https://www.contributor-covenant.org/
> [3] https://github.com/OSGeo/PROJ/pull/1681
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191017/db30a2e0/attachment.html>

From martin.desruisseaux at geomatys.com  Thu Oct 17 14:20:09 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Thu, 17 Oct 2019 23:20:09 +0200
Subject: [PROJ] Code of conduct
In-Reply-To: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
Message-ID: <e0bc0540-d96b-0e1a-00d9-e279c90d7cb4@geomatys.com>

Le 17/10/2019 à 21:24, Kristian Evers a écrit :

> PROJ is very close to graduating as an OSGeo project
>
3 weeks ago, Roger told me that they have an outstanding action to 
respond to PROJ's request for a statement from IOGP, and that they are 
trying to make some changes to their current terms of use to clarify 
their expectations. Do we want to wait for their outcome?

In previous discussion it has been said that PROJ complies with EPSG 
terms of use, which is a very good thing. But it gives a right to 
redistribute, not to relicense.

     Regards,

         Martin



From martin.desruisseaux at geomatys.com  Fri Oct 18 03:21:56 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Fri, 18 Oct 2019 12:21:56 +0200
Subject: [PROJ] PROJ-JNI (binding to Java) preview
Message-ID: <125dca91-53df-de76-08e8-61fcdf61c613@geomatys.com>

Hello all

A working version of JNI bindings for Java is available at [1]. Those 
bindings are not yet complete; missing parts are recorded as GitHub 
issues [2]. But current functionalities cover geographic, geocentric, 
projected, vertical, temporal and compound CRS, operations between those 
CRS with the control provided by PROJ API (e.g. how to make decision 
based on geographic extents), exports as WKT 2, WKT 1, PROJ or JSON 
strings, instantiation from strings or authority codes (EPSG or IAU).

The main work was to manage interaction between C++ shared pointers and 
Java garbage collector, and to support multi-threading automatically. 
After those two tasks were done, mapping the C++ API was quite 
straightforward. Mapping the C API would have been much more difficult 
however, and would have required significant work in PROJ itself since a 
lot of information are currently available only through C++ API.

Javadoc is available at [3]. The "kortforsyningen" name is temporary; a 
final name will be selected later on project completion. The Javadoc is 
relatively small because it contains only PROJ-JNI specific API; after 
user got a factory, a CRS or coordinate operation, from that point the 
remaining API is defined by GeoAPI interfaces.

Comments are welcome!

     Martin

[1] https://github.com/Kortforsyningen/PROJ-JNI
[2] https://github.com/Kortforsyningen/PROJ-JNI/issues
[3] https://kortforsyningen.github.io/PROJ-JNI/org/kortforsyningen/proj/package-summary.html

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191018/daa26b24/attachment-0001.html>

From howard at hobu.co  Fri Oct 18 06:00:56 2019
From: howard at hobu.co (Howard Butler)
Date: Fri, 18 Oct 2019 08:00:56 -0500
Subject: [PROJ] Code of conduct
In-Reply-To: <e0bc0540-d96b-0e1a-00d9-e279c90d7cb4@geomatys.com>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
 <e0bc0540-d96b-0e1a-00d9-e279c90d7cb4@geomatys.com>
Message-ID: <CAKyBbG7Uyjt2X4d=CM5g0dME6beMVgq9_o0xkVYcKLZrzAWs-Q@mail.gmail.com>

On Thu, Oct 17, 2019 at 4:20 PM Martin Desruisseaux <
martin.desruisseaux at geomatys.com> wrote:

> 3 weeks ago, Roger told me that they have an outstanding action to
> respond to PROJ's request for a statement from IOGP, and that they are
> trying to make some changes to their current terms of use to clarify
> their expectations. Do we want to wait for their outcome?
>

Any activity from IOGP isn't going to change PROJ's project situation in
regard to OSGeo incubation. While this is an issue to monitor, it isn't one
to hold things up.

Howard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191018/e4c9f636/attachment.html>

From martin.desruisseaux at geomatys.com  Fri Oct 18 10:39:38 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Fri, 18 Oct 2019 19:39:38 +0200
Subject: [PROJ] EPSG (was: Code of conduct)
In-Reply-To: <CAKyBbG7Uyjt2X4d=CM5g0dME6beMVgq9_o0xkVYcKLZrzAWs-Q@mail.gmail.com>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
 <e0bc0540-d96b-0e1a-00d9-e279c90d7cb4@geomatys.com>
 <CAKyBbG7Uyjt2X4d=CM5g0dME6beMVgq9_o0xkVYcKLZrzAWs-Q@mail.gmail.com>
Message-ID: <96207e01-7fe3-dd37-db69-95b6d5087851@geomatys.com>

Note: my concern is only about EPSG dataset. Everything else in PROJ 
look all clean for every parts I'm familiar with.

Le 18/10/2019 à 15:00, Howard Butler a écrit :

> Any activity from IOGP isn't going to change PROJ's project situation 
> in regard to OSGeo incubation. While this is an issue to monitor, it 
> isn't one to hold things up.
>
It depends if a graduation goal is to assert that PROJ is legally clean. 
If yes, then I see this choice:

  * PROJ can redistribute EPSG dataset under EPSG Terms of Use.
  * If PROJ wants to relicense EPSG dataset (i.e. suppress EPSG Terms of
    Use and put MIT license in place, which is my understanding of
    ticket #2268 [1]), then we need IOGP explicit authorization. Most
    OpenSource licenses do not allow relicensing neither (except by the
    author); even the MIT license does not allow that (note: MIT allows
    sub-licensing, but this is different than re-licensing).

If resolving legal issues is not a graduation goal, then indeed my 
remark is not relevant to the graduation process.

     Martin

[1] https://trac.osgeo.org/osgeo/ticket/2268

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191018/3562af8d/attachment.html>

From gary at cesium.com  Fri Oct 18 11:12:36 2019
From: gary at cesium.com (Gary Li)
Date: Fri, 18 Oct 2019 14:12:36 -0400
Subject: [PROJ] Proj applying unit conversions twice for altitudes in some
 compound coordinate systems?
Message-ID: <CADX8uDaBfB8_S-JE89EKY0BwAFXNDYwr5fMJ1dYu6Jc5Gm4T_g@mail.gmail.com>

I noticed that Proj 6.2.0 seems to apply unit conversion from feet to
meters twice when transforming from the following coordinate system to
EPSG:4326:

  COMPD_CS["unknown",PROJCS["unknown",GEOGCS["unnamed
ellipse",DATUM["unknown",SPHEROID["unnamed",6378137,298.257222932961],TOWGS84[0,0,0,0,0,0,0]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",42.5017284],PARAMETER["central_meridian",-87.94173071],PARAMETER["scale_factor",1.00002879],PARAMETER["false_easting",2555070.71005833],PARAMETER["false_northing",189709.351551667],UNIT["US
survey
foot",0.304800609601219,AUTHORITY["EPSG","9003"]],AXIS["Easting",EAST],AXIS["Northing",NORTH]],VERT_CS["unknown",VERT_DATUM["unknown",2005],UNIT["US
survey foot",0.304800609601219,AUTHORITY["EPSG","9003"]],AXIS["Up",UP]]]

Note that this coordinate system is compound and has both a horizontal
component and a vertical component in feet. Running cs2cs 6.2.0, I get
something like:

  $cs2cs 'COMPD_CS["unknown",PROJCS["unknown",GEOGCS["unnamed
ellipse",DATUM["unknown",SPHEROID["unnamed",6378137,298.257222932961],TOWGS84[0,0,0,0,0,0,0]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",42.5017284],PARAMETER["central_meridian",-87.94173071],PARAMETER["scale_factor",1.00002879],PARAMETER["false_easting",2555070.71005833],PARAMETER["false_northing",189709.351551667],UNIT["US
survey
foot",0.304800609601219,AUTHORITY["EPSG","9003"]],AXIS["Easting",EAST],AXIS["Northing",NORTH]],VERT_CS["unknown",VERT_DATUM["unknown",2005],UNIT["US
survey foot",0.304800609601219,AUTHORITY["EPSG","9003"]],AXIS["Up",UP]]]'
+to +init=epsg:4326 <<EOF
0.0 0.0 682.1900
EOF

  97d16'41.701"W 41d36'0.332"N 63.378

Note that 63.378 ~= 682.1900 * 0.304800609601219 * 0.304800609601219. For
our use case we're expecting something like 207.932 ~= 682.1900 *
0.304800609601219 instead.

Is the current PRoj 6.2.0 behavior expected?

Thanks!
Gary
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191018/08efb6b7/attachment.html>

From cameron.shorter at gmail.com  Fri Oct 18 11:20:03 2019
From: cameron.shorter at gmail.com (Cameron Shorter)
Date: Sat, 19 Oct 2019 05:20:03 +1100
Subject: [PROJ] EPSG
In-Reply-To: <96207e01-7fe3-dd37-db69-95b6d5087851@geomatys.com>
References: <8E7F8B4A-6CFF-4788-872A-F2C2AA101344@gmail.com>
 <e0bc0540-d96b-0e1a-00d9-e279c90d7cb4@geomatys.com>
 <CAKyBbG7Uyjt2X4d=CM5g0dME6beMVgq9_o0xkVYcKLZrzAWs-Q@mail.gmail.com>
 <96207e01-7fe3-dd37-db69-95b6d5087851@geomatys.com>
Message-ID: <1e65746c-03f5-b474-b5d4-0489dac5129b@gmail.com>

I haven't formed an opinion on this thread yet, but I think it is worthy 
of highlighting to the incubation committee, and is possibly a reason to 
delay PROJ graduation.

On 19/10/19 4:39 am, Martin Desruisseaux wrote:
>
> Note: my concern is only about EPSG dataset. Everything else in PROJ 
> look all clean for every parts I'm familiar with.
>
> Le 18/10/2019 à 15:00, Howard Butler a écrit :
>
>> Any activity from IOGP isn't going to change PROJ's project situation 
>> in regard to OSGeo incubation. While this is an issue to monitor, it 
>> isn't one to hold things up.
>>
> It depends if a graduation goal is to assert that PROJ is legally 
> clean. If yes, then I see this choice:
>
>   * PROJ can redistribute EPSG dataset under EPSG Terms of Use.
>   * If PROJ wants to relicense EPSG dataset (i.e. suppress EPSG Terms
>     of Use and put MIT license in place, which is my understanding of
>     ticket #2268 [1]), then we need IOGP explicit authorization. Most
>     OpenSource licenses do not allow relicensing neither (except by
>     the author); even the MIT license does not allow that (note: MIT
>     allows sub-licensing, but this is different than re-licensing).
>
> If resolving legal issues is not a graduation goal, then indeed my 
> remark is not relevant to the graduation process.
>
>     Martin
>
> [1]https://trac.osgeo.org/osgeo/ticket/2268
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
Cameron Shorter
Technology Demystifier
Open Technologies and Geospatial Consultant

M +61 (0) 419 142 254

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191019/4827b77d/attachment.html>

From even.rouault at spatialys.com  Fri Oct 18 11:37:44 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 18 Oct 2019 20:37:44 +0200
Subject: [PROJ] Proj applying unit conversions twice for altitudes in
	some compound coordinate systems?
In-Reply-To: <CADX8uDaBfB8_S-JE89EKY0BwAFXNDYwr5fMJ1dYu6Jc5Gm4T_g@mail.gmail.com>
References: <CADX8uDaBfB8_S-JE89EKY0BwAFXNDYwr5fMJ1dYu6Jc5Gm4T_g@mail.gmail.com>
Message-ID: <4780233.4NcrAARj4X@even-i700>

> Is the current PRoj 6.2.0 behavior expected?

No, please create a GitHub issue about that.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Oct 18 12:57:33 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 18 Oct 2019 21:57:33 +0200
Subject: [PROJ] Proj applying unit conversions twice for altitudes in
	some compound coordinate systems?
In-Reply-To: <4780233.4NcrAARj4X@even-i700>
References: <CADX8uDaBfB8_S-JE89EKY0BwAFXNDYwr5fMJ1dYu6Jc5Gm4T_g@mail.gmail.com>
 <4780233.4NcrAARj4X@even-i700>
Message-ID: <2325033.3zCKdkuJGz@even-i700>

On vendredi 18 octobre 2019 20:37:44 CEST Even Rouault wrote:
> > Is the current PRoj 6.2.0 behavior expected?
> 
> No, please create a GitHub issue about that.
> 

No longer needed, since I've just adressed it per
https://github.com/OSGeo/PROJ/pull/1683

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gary at cesium.com  Sat Oct 19 18:44:43 2019
From: gary at cesium.com (Gary Li)
Date: Sat, 19 Oct 2019 21:44:43 -0400
Subject: [PROJ] Proj applying unit conversions twice for altitudes in
 some compound coordinate systems?
In-Reply-To: <2325033.3zCKdkuJGz@even-i700>
References: <CADX8uDaBfB8_S-JE89EKY0BwAFXNDYwr5fMJ1dYu6Jc5Gm4T_g@mail.gmail.com>
 <4780233.4NcrAARj4X@even-i700> <2325033.3zCKdkuJGz@even-i700>
Message-ID: <CADX8uDa531bJ-Gud7nK7Q1qjdXMCP9AverBg5a35W7=MeHDM8w@mail.gmail.com>

Wonderful! Thanks Even!

On Fri, Oct 18, 2019 at 4:03 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> On vendredi 18 octobre 2019 20:37:44 CEST Even Rouault wrote:
> > > Is the current PRoj 6.2.0 behavior expected?
> >
> > No, please create a GitHub issue about that.
> >
>
> No longer needed, since I've just adressed it per
> https://github.com/OSGeo/PROJ/pull/1683
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191019/70ee674e/attachment.html>

From APacker at biosonicsinc.com  Tue Oct 22 11:51:34 2019
From: APacker at biosonicsinc.com (Asa Packer)
Date: Tue, 22 Oct 2019 18:51:34 +0000
Subject: [PROJ] Test failure when building on Windows
Message-ID: <MN2PR17MB401333C14B726D3B7D475313D1680@MN2PR17MB4013.namprd17.prod.outlook.com>

Hello,

I am working with proj 6.2.0 on Windows, have gotten it to build using Visual Studio 2017, and all tests pass except one when I run ctest.  It is the "factory.attachExtraDatabases_auxiliary" test in proj_test_cpp_api.  The error message printed is:

unknown file: error: C++ exception with description "geodeticCRS not found" thrown in the test body.

I am building proj with the sqlite code from sqlite-amalgamation-3300100.zip, which is the latest version of sqlite as of today.

The only way I have managed to get the test to pass is if I change line 2471 of proj-6.2.0/test/unit/test_factory.cpp to remove the "mode=memory" setting.

I'm at a loss how to troubleshoot this.  Is this a proj issue, a sqlite issue, or perhaps most likely, an issue with my build?  Any advice/suggestions would be much appreciated.

Thanks!

Asa
Asa Packer  | Lead Systems Engineer

BioSonics, Inc.
2356 W Commodore Way, Unit 110
Seattle WA 98199-1258 USA
tel 206.782.2211 |  biosonicsinc.com<http://www.biosonicsinc.com/>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191022/5a80dbf4/attachment.html>

From even.rouault at spatialys.com  Tue Oct 22 13:29:18 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 22 Oct 2019 22:29:18 +0200
Subject: [PROJ] Test failure when building on Windows
In-Reply-To: <MN2PR17MB401333C14B726D3B7D475313D1680@MN2PR17MB4013.namprd17.prod.outlook.com>
References: <MN2PR17MB401333C14B726D3B7D475313D1680@MN2PR17MB4013.namprd17.prod.outlook.com>
Message-ID: <1873771.neiskspxUW@even-i700>

Hi,

yes not sure what's wrong on your end, but PROJ AppVeyor continuous 
integration builds use sqlite 3.30.1 from vcpkg and the tests pass fine.

Even

> Hello,
> 
> I am working with proj 6.2.0 on Windows, have gotten it to build using
> Visual Studio 2017, and all tests pass except one when I run ctest.  It is
> the "factory.attachExtraDatabases_auxiliary" test in proj_test_cpp_api. 
> The error message printed is:
> 
> unknown file: error: C++ exception with description "geodeticCRS not found"
> thrown in the test body.
> 
> I am building proj with the sqlite code from
> sqlite-amalgamation-3300100.zip, which is the latest version of sqlite as
> of today.
> 
> The only way I have managed to get the test to pass is if I change line 2471
> of proj-6.2.0/test/unit/test_factory.cpp to remove the "mode=memory"
> setting.
> 
> I'm at a loss how to troubleshoot this.  Is this a proj issue, a sqlite
> issue, or perhaps most likely, an issue with my build?  Any
> advice/suggestions would be much appreciated.
> 
> Thanks!
> 
> Asa
> Asa Packer  | Lead Systems Engineer
> 
> BioSonics, Inc.
> 2356 W Commodore Way, Unit 110
> Seattle WA 98199-1258 USA
> tel 206.782.2211 |  biosonicsinc.com<http://www.biosonicsinc.com/>


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From APacker at biosonicsinc.com  Tue Oct 22 17:27:17 2019
From: APacker at biosonicsinc.com (Asa Packer)
Date: Wed, 23 Oct 2019 00:27:17 +0000
Subject: [PROJ] Test failure when building on Windows
In-Reply-To: <1873771.neiskspxUW@even-i700>
References: <MN2PR17MB401333C14B726D3B7D475313D1680@MN2PR17MB4013.namprd17.prod.outlook.com>
 <1873771.neiskspxUW@even-i700>
Message-ID: <MN2PR17MB40138102CE95DBA7048BF492D16B0@MN2PR17MB4013.namprd17.prod.outlook.com>

Hi Even,

Thanks for your quick response - it was very helpful to see what options the vcpkg sqlite is built with.  For the record, I'm now pretty sure that my issue is related to static linking to sqlite.  I was building a shared lib of proj but linking it to a static sqlite3.lib that I had compiled without marking the sqlite functions as exported.  Since the proj_test_cpp_api exe was also statically linking to sqlite3.lib, I think I had two separate instances of sqlite3 in my process.  So the in-memory db created in the exe was not attaching properly to the in-memory db being used inside proj.

I can get the test to pass by compiling my static sqlite3.lib with "-DSQLITE_API=__declspec(dllexport)", so the sqlite functions end up showing as exports from the proj dll.  In this case, proj_test_cpp_api.exe should probably not be linking to the sqlite3.lib also, but it still seems to work, perhaps because the proj lib is listed before the sqlite lib in the linker input.  The other way I can get the test to pass is by just building sqlite3 as a dll.

Asa

Asa Packer  | Lead Systems Engineer

BioSonics, Inc. 
2356 W Commodore Way, Unit 110
Seattle WA 98199-1258 USA
tel 206.782.2211 |  biosonicsinc.com

-----Original Message-----
From: Even Rouault <even.rouault at spatialys.com> 
Sent: Tuesday, October 22, 2019 1:29 PM
To: proj at lists.osgeo.org
Cc: Asa Packer <APacker at biosonicsinc.com>
Subject: Re: [PROJ] Test failure when building on Windows

Hi,

yes not sure what's wrong on your end, but PROJ AppVeyor continuous integration builds use sqlite 3.30.1 from vcpkg and the tests pass fine.

Even

> Hello,
> 
> I am working with proj 6.2.0 on Windows, have gotten it to build using 
> Visual Studio 2017, and all tests pass except one when I run ctest.  
> It is the "factory.attachExtraDatabases_auxiliary" test in proj_test_cpp_api.
> The error message printed is:
> 
> unknown file: error: C++ exception with description "geodeticCRS not found"
> thrown in the test body.
> 
> I am building proj with the sqlite code from 
> sqlite-amalgamation-3300100.zip, which is the latest version of sqlite 
> as of today.
> 
> The only way I have managed to get the test to pass is if I change 
> line 2471 of proj-6.2.0/test/unit/test_factory.cpp to remove the "mode=memory"
> setting.
> 
> I'm at a loss how to troubleshoot this.  Is this a proj issue, a 
> sqlite issue, or perhaps most likely, an issue with my build?  Any 
> advice/suggestions would be much appreciated.
> 
> Thanks!
> 
> Asa
> Asa Packer  | Lead Systems Engineer
> 
> BioSonics, Inc.
> 2356 W Commodore Way, Unit 110
> Seattle WA 98199-1258 USA
> tel 206.782.2211 |  biosonicsinc.com<http://www.biosonicsinc.com/>


--
Spatialys - Geospatial professional services http://www.spatialys.com

From kristianevers at gmail.com  Mon Oct 28 11:01:26 2019
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 28 Oct 2019 19:01:26 +0100
Subject: [PROJ] PROJ 6.2.1RC1
Message-ID: <AA692F30-3B2A-490B-BCC7-65F13CEF3885@gmail.com>

All,

With a scheduled release of PROJ 6.2.1. on November 1st it is time to put out a 
release candidate. This release is a bug fix release which contain more than
twenty bugs fixes.

Download the archives here:

http://download.osgeo.org/proj/proj-6.2.1RC1.tar.gz (http://download.osgeo.org/proj/proj-6.2.1RC1.tar.gz.md5)
http://download.osgeo.org/proj/proj-6.2.1RC1.zip    (http://download.osgeo.org/proj/proj-6.2.1RC1.zip.md5)


See the release notes below.

Please test the release candidates and report back any problems you
may encounter.

Providing that no problems with the release candidate is found, I will call for a PSC vote
Wednesday morning with a plan to release Friday November 1st.

/Kristian

————————————————————————————————————————————————————————————————————————————

 Updates
 -------

 o Update the EPSG database to version 9.8.2

 Bug fixes
 -------

 o Fixed erroneous spelling of "Potsdam" (#1573)

 o Calculate y-coordinate correctly in bertin1953 in all cases (#1579)

 o proj_create_crs_to_crs_from_pj(): make the PJ* arguments const PJ* (#1583)

 o PROJStringParser::createFromPROJString(): avoid potential infinite
   recursion (#1574)

 o Avoid core dump when setting ctx==NULL in functions
   proj_coordoperation_is_instantiable and
   proj_coordoperation_has_ballpark_transformation (#1590)

 o createOperations(): fix conversion from/to PROJ.4 CRS strings with
   non-ISO-kosher options and +towgs84/+nadgrids (#1602)

 o proj_trans_generic(): properly set coordinate time to HUGE_VAL when no
   value is passed to the function (#1604)

 o Fix support for +proj=ob_tran +o_proj=lonlat/latlong/latlon instead of only
   only allowing +o_proj=longlat (#1601)

 o Improve backwards compatibility of vertical transforms (#1613)

 o Improve emulation of deprecated +init style initialization (#1614)

 o cs2cs: autopromote CRS to 3D when there's a mix of 2D and 3D (#1563)

 o Avoid divisions by zero in odd situations (#1620)

 o Avoid compile error on Solaris (#1639)

 o proj_create_crs_to_crs(): fix when there are only transformations with
   ballpark steps (#1643)

 o PROJ string CRS ingester: recognize more unit-less parameters, and general
   handling of +key=string_value parameters (#1645)

 o Only call pkg-config in configure when necessary (#1652)

 o aeqd: for spherical forward path, go to higher precision ellipsoidal
   case when the point coordinates are super close to the origin (#1654)

 o proj_create_crs_to_crs(): remove elimination of Ballpark operations
   that caused transformation failures in some cases (#1665)

 o createOperations(): allow transforming from a compoundCRS of a bound
   verticalCRS to a 2D CRS (#1667)

 o Avoid segfaults in case of out-of-memory situations (#1679)

 o createOperations(): fix double vertical unit conversion from CompoundCRS
   to other CRS when the horizontal part of the projected CRS uses non-metre
   unit (#1683)

 o importFromWkt(): fix axis orientation for non-standard ESRI WKT (#1690)




From even.rouault at spatialys.com  Tue Oct 29 14:57:31 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 29 Oct 2019 22:57:31 +0100
Subject: [PROJ] Future maintainance releases
Message-ID: <13568718.XafZnbjQPh@even-i700>

Hi,

I'm doing currently fixes/enhancements in the vertical transformation sector. 
Backporting them to 6.2 branch would mostly mean just merging master into 
it..., so I think that for future maintainance releases post 6.2.1 we should 
probably abandon any further activity in 6.2 (apart from website/doc related 
fixes since we generate it from them, or a urgent hotfix if some horrible 
regression was identified), and create a branch from master when we're about 
to release, and call it 6.3. API & behaviour wise, master is currently 
compatible with 6.2. There are a few database structure changes, but I'm not 
aware of users who are dependent on it.

But if any of the 2 following pieces of work happens before, then we'll have 
to consider if we want to create this 6.3 branch before they are merged, 
depending on how close they happen from the next planned release:
- EPSG v10 related work (no funding source identified for now): anticipated 
non trivial implications on the database structure and code
- Ondemand network loading of grids (aka "PROJ grid files CDN" topic [1], 50% 
of funding target reached)

The question PROJ 7 or not (if by PROJ 7 we mean removing proj_api.h) will 
also need to be considered. There are still important dependencies like 
Spatialite who haven't yet released a version without proj_api.h dependency 
(as far as I can see from [2], the 'master' contains the changes to use proj.h 
though)

Even

[1] https://lists.osgeo.org/pipermail/proj/2019-September/008858.html
[2] https://www.gaia-gis.it/fossil/libspatialite/info/b72ce4b2a5c7eb77

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sebastic at xs4all.nl  Tue Oct 29 21:00:57 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 30 Oct 2019 05:00:57 +0100
Subject: [PROJ] Future maintainance releases
In-Reply-To: <13568718.XafZnbjQPh@even-i700>
References: <13568718.XafZnbjQPh@even-i700>
Message-ID: <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>

On 10/29/19 10:57 PM, Even Rouault wrote:
> The question PROJ 7 or not (if by PROJ 7 we mean removing proj_api.h) will 
> also need to be considered. There are still important dependencies like 
> Spatialite who haven't yet released a version without proj_api.h dependency 
> (as far as I can see from [2], the 'master' contains the changes to use proj.h 
> though)

If you don't remove proj_api.h, downstream projects are not motivated
enough to switch to proj.h. Many project have just defined
ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to fix their builds with PROJ 6.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From kreve at sdfe.dk  Wed Oct 30 00:20:04 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 30 Oct 2019 07:20:04 +0000
Subject: [PROJ] Motion: Promote PROJ 6.2.1RC1 to final release
Message-ID: <819d4bf9ebec4733bdf794990545c2e0@sdfe.dk>

PSC Members,

No problems with PROJ 6.2.1RC1 has been reported, so I hereby
motion that the release candidate be promoted to final release.

I'll start with my +1

/Kristian


From kreve at sdfe.dk  Wed Oct 30 00:47:00 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 30 Oct 2019 07:47:00 +0000
Subject: [PROJ] Future maintainance releases
In-Reply-To: <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
Message-ID: <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk>

I agree with Bas. proj_api.h is a band-aid that needs to be ripped off and if we do it later
rather than sooner we risk losing the momentum that has already been built up.

PROJ 7 is not only a matter of removing proj_api.h, although it is the biggest issue
at hand. There are other API changes that would be beneficial to get out of the way,
for instance the proj_list_ functions which has been superseded by more elaborate
functions that query the database rather than hard-coded lists. On my wish-list is
also a simplification regarding build systems (i.e. two is one too many) but that is
a talk for another day.

The next scheduled release [0] that includes new features is PROJ 7. The date is
set to March 1st 2020. In the meantime two more maintenance releases are
planned. The last maintenance release of the 6.2 branch is scheduled to coincide
with 7.0.0. If the improvements regarding vertical transformations make it so that
it will be difficult to backport changes so be it. I reckon that some changes will
still be possible to backport but of course as master gets farther and farther
apart from the 6.2 branch backports will get progressively more difficult to keep
up. Such is life. We can skip the January 1st release of 6.2.2 if there is not a
substantial number of bug fixes to the branch. 

The downstream projects that are still stuck on proj_api.h will get a final release
of the 6.2 branch in March which I believe should keep those projects afloat for
at least another year. Hopefully that buys everyone enough time to transition
to the new API.

Even, what other important dependencies are still lagging behind? I agree that
Spatialite is important but since the project seemingly has adopted the new API
(btw their report [1] on PROJ 6 is worth a read). At the top of my head I can't
think or other big players that are still on the old API.

/Kristian


[0] https://github.com/OSGeo/PROJ/milestones?direction=asc&sort=due_date 
[1] https://www.gaia-gis.it/fossil/libspatialite/wiki?name=PROJ.6


-----Original Message-----
From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Sebastiaan Couwenberg
Sent: 30. oktober 2019 05:01
To: proj at lists.osgeo.org
Subject: Re: [PROJ] Future maintainance releases

On 10/29/19 10:57 PM, Even Rouault wrote:
> The question PROJ 7 or not (if by PROJ 7 we mean removing proj_api.h) will 
> also need to be considered. There are still important dependencies like 
> Spatialite who haven't yet released a version without proj_api.h dependency 
> (as far as I can see from [2], the 'master' contains the changes to use proj.h 
> though)

If you don't remove proj_api.h, downstream projects are not motivated
enough to switch to proj.h. Many project have just defined
ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to fix their builds with PROJ 6.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Wed Oct 30 01:30:47 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 30 Oct 2019 09:30:47 +0100
Subject: [PROJ] Future maintainance releases
In-Reply-To: <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk>
Message-ID: <2058429.pZbsZHp53L@even-i700>

> The next scheduled release [0] that includes new features is PROJ 7. The
> date is set to March 1st 2020. In the meantime two more maintenance
> releases are planned. The last maintenance release of the 6.2 branch is
> scheduled to coincide with 7.0.0. If the improvements regarding vertical
> transformations make it so that it will be difficult to backport changes so
> be it. I reckon that some changes will still be possible to backport but of
> course as master gets farther and farther apart from the 6.2 branch
> backports will get progressively more difficult to keep up. Such is life.

Basically I tried to tell that the createOperations() logic is so involved 
that subtle changes have often unpredicted consequences, so backporting just a 
"fix" even if that applies cleanly (and that won't anymore since I just 
refactored it in master) can lead to different results, if some previous 
"enhancement" commits haven't been applied too. Mastering the logic in one 
branch is already very challenging. Mastering it in 2 branches is not doable. 
This is my statement that I'm unable in practice to maintain 6.2 anymore 
regarding createOperations() (and most of the backporting activity is related 
to that as far as I can tell)

> We can skip the January 1st release of 6.2.2 if there is not a substantial
> number of bug fixes to the branch.

And what about my proposal to branch master as 6.3 while it still qualifies 
for being a 6.something ? Is there some contractual obligation somewhere to 
follow exactly the initial plan with a 6.2.2 rather than a 6.3 :-) ?

> Even, what other important dependencies are still lagging behind?

No idea, but Bas previous message makes me believe that seing PROJ 7 (without 
proj_api.h) deployed would take even more time than PROJ 6...

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Wed Oct 30 01:35:56 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 30 Oct 2019 09:35:56 +0100
Subject: [PROJ] Motion: Promote PROJ 6.2.1RC1 to final release
In-Reply-To: <819d4bf9ebec4733bdf794990545c2e0@sdfe.dk>
References: <819d4bf9ebec4733bdf794990545c2e0@sdfe.dk>
Message-ID: <4345413.QIzuDGggrG@even-i700>

On mercredi 30 octobre 2019 07:20:04 CET Kristian Evers wrote:
> PSC Members,
> 
> No problems with PROJ 6.2.1RC1 has been reported, so I hereby
> motion that the release candidate be promoted to final release.
> 
> I'll start with my +1

+1

> 
> /Kristian
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sebastic at xs4all.nl  Wed Oct 30 01:56:10 2019
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Wed, 30 Oct 2019 09:56:10 +0100
Subject: [PROJ] Future maintainance releases
In-Reply-To: <2058429.pZbsZHp53L@even-i700>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk> <2058429.pZbsZHp53L@even-i700>
Message-ID: <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl>

On 2019-10-30 09:30, Even Rouault wrote:
>> Even, what other important dependencies are still lagging behind?
> 
> No idea, but Bas previous message makes me believe that seing PROJ 7 
> (without
> proj_api.h) deployed would take even more time than PROJ 6...

In Debian we're still in the middle of migrating to PROJ 6, we've passed 
the first step and have PROJ 6.2.0 in unstable and several packages have 
been updated which include support for proj.h, others have been updated 
to define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H.

GDAL 3 is the next big step, which is currently blocked by the removal 
of the Python 2 support from the package.

The proj.h-adoption-status wiki has been updated as much as possible and 
provides a reasonably good overview where projects stand.

Projects that don't have a release with support for proj.h yet include 
(but are not limited to):

  * Cartopy
  * libosmium
  * libspatialite
  * Mapnik
  * MapServer (should gain that support soon)
  * QMapShack

In Debian there are many reverse dependencies of libspatialite and (old 
versions of) VTK which will delay the adoption of PROJ 7 or will have to 
be removed from testing to unblock the transition.

The next Debian stable release, bullseye, (in Q3/Q4 2021 probably) will 
almost certainly ship with PROJ 6.x due to the above.

During the development cycle for the subsequent release, bookworm, we'll 
focus on migrating to PROJ 7 and remove everthing that blocks it. Having 
to remove support for SpatiaLite if that still won't have a release by 
that time (which unfortunately seems likely) won't be good for users, 
but it's a necessary evil to unblock progress. Just like breaking some 
packages which still require python-gdal is.

Kind Regards,

Bas

From kreve at sdfe.dk  Wed Oct 30 03:48:20 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 30 Oct 2019 10:48:20 +0000
Subject: [PROJ] Future maintainance releases
In-Reply-To: <2058429.pZbsZHp53L@even-i700>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk> <2058429.pZbsZHp53L@even-i700>
Message-ID: <c8ba4d4c08574895a3e714f71e6bb726@sdfe.dk>

> And what about my proposal to branch master as 6.3 while it still qualifies 
> for being a 6.something ? Is there some contractual obligation somewhere to 
> follow exactly the initial plan with a 6.2.2 rather than a 6.3 :-) ?

No, not at all. My concern is, or was, that a 6.3 version would be rather
short-lived with a release of 7.0 only a few months later. But if the changes
you are proposing really are so disrupting I agree that it will be beneficial
with a new minor-version release. I have one question though. Would it
be a benefit to your work on vertical transforms if you were not restricted
by the old API? The grid code is somewhat entangled as far as I remember
and wouldn't be surprised if some of olde API functions is in the way of the
smartest way to do things. If that is the case then I think we should just go
straight to 7.0. If you can accomplish your work without working around
the existing API a 6.3 release is fine with me.

/Kristian

-----Original Message-----
From: Even Rouault <even.rouault at spatialys.com> 
Sent: 30. oktober 2019 09:31
To: proj at lists.osgeo.org
Cc: Kristian Evers <kreve at sdfe.dk>; Sebastiaan Couwenberg <sebastic at xs4all.nl>
Subject: Re: [PROJ] Future maintainance releases

> The next scheduled release [0] that includes new features is PROJ 7. The
> date is set to March 1st 2020. In the meantime two more maintenance
> releases are planned. The last maintenance release of the 6.2 branch is
> scheduled to coincide with 7.0.0. If the improvements regarding vertical
> transformations make it so that it will be difficult to backport changes so
> be it. I reckon that some changes will still be possible to backport but of
> course as master gets farther and farther apart from the 6.2 branch
> backports will get progressively more difficult to keep up. Such is life.

Basically I tried to tell that the createOperations() logic is so involved 
that subtle changes have often unpredicted consequences, so backporting just a 
"fix" even if that applies cleanly (and that won't anymore since I just 
refactored it in master) can lead to different results, if some previous 
"enhancement" commits haven't been applied too. Mastering the logic in one 
branch is already very challenging. Mastering it in 2 branches is not doable. 
This is my statement that I'm unable in practice to maintain 6.2 anymore 
regarding createOperations() (and most of the backporting activity is related 
to that as far as I can tell)

> We can skip the January 1st release of 6.2.2 if there is not a substantial
> number of bug fixes to the branch.

And what about my proposal to branch master as 6.3 while it still qualifies 
for being a 6.something ? Is there some contractual obligation somewhere to 
follow exactly the initial plan with a 6.2.2 rather than a 6.3 :-) ?

> Even, what other important dependencies are still lagging behind?

No idea, but Bas previous message makes me believe that seing PROJ 7 (without 
proj_api.h) deployed would take even more time than PROJ 6...

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Wed Oct 30 04:12:49 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 30 Oct 2019 12:12:49 +0100
Subject: [PROJ] Future maintainance releases
In-Reply-To: <c8ba4d4c08574895a3e714f71e6bb726@sdfe.dk>
References: <13568718.XafZnbjQPh@even-i700> <2058429.pZbsZHp53L@even-i700>
 <c8ba4d4c08574895a3e714f71e6bb726@sdfe.dk>
Message-ID: <7465958.6eN7QILkAW@even-i700>

> No, not at all. My concern is, or was, that a 6.3 version would be rather
> short-lived with a release of 7.0 only a few months later.

Depending on how much time it might take for 7.0 to be deployed to users using 
binary distribution channels, we might have to maintain a 6.x for some time.

> But if the
> changes you are proposing really are so disrupting I agree that it will be
> beneficial with a new minor-version release. I have one question though.
> Would it be a benefit to your work on vertical transforms if you were not
> restricted by the old API? The grid code is somewhat entangled as far as I
> remember and wouldn't be surprised if some of olde API functions is in the
> way of the smartest way to do things. If that is the case then I think we
> should just go straight to 7.0. If you can accomplish your work without
> working around the existing API a 6.3 release is fine with me.

For now, I'm most dealing with metadata related work, nothing in the grid 
handling itself. If the CDN related work happens to be done, yes it will be 
internally disruptive, but looking quickly at proj_api.h, I'm not even sure 
the old API would be a problem for that. The only thing that is grid related 
is pj_apply_gridshift(), but I don't think that would be an issue, and looking 
in Debian archive for
https://codesearch.debian.net/search?q=pj_apply_gridshift 
I can only find mentions of it in PROJ itself or its embedded copies by other 
projects, so basically no one in the open world is using it.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From howard at hobu.co  Wed Oct 30 05:14:47 2019
From: howard at hobu.co (Howard Butler)
Date: Wed, 30 Oct 2019 07:14:47 -0500
Subject: [PROJ] Motion: Promote PROJ 6.2.1RC1 to final release
In-Reply-To: <4345413.QIzuDGggrG@even-i700>
References: <4345413.QIzuDGggrG@even-i700>
Message-ID: <B944B545-D052-4F08-9500-28C24B3E0775@hobu.co>



> On Oct 30, 2019, at 3:36 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> ﻿On mercredi 30 octobre 2019 07:20:04 CET Kristian Evers wrote:
>> PSC Members,
>> 
>> No problems with PROJ 6.2.1RC1 has been reported, so I hereby
>> motion that the release candidate be promoted to final release.
>> 
>> I'll start with my +1
> 
> +1

+1


Howard

From gdt at lexort.com  Wed Oct 30 06:45:57 2019
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 30 Oct 2019 09:45:57 -0400
Subject: [PROJ] Future maintainance releases
In-Reply-To: <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl> (Bas Couwenberg's
 message of "Wed, 30 Oct 2019 09:56:10 +0100")
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk>
 <2058429.pZbsZHp53L@even-i700>
 <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl>
Message-ID: <rmisgnauz1m.fsf@s1.lexort.com>

Bas Couwenberg <sebastic at xs4all.nl> writes:

> [info about proj6 migration status]

>From my perspective on packaging many things, proj's trajectory of
deprecations is already feeling very rapid compared to how many things
depend on it.   Realize that people are still in the process of getting
off qt4.

pkgsrc is in a similar position to Debian, although less well baked,
with proj6 in wip (sort of like Debian unstable, but not really), and
having to define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to keep some things
building.

I don't want to have multiple proj versions in pkgsrc,a nd I don't want
to prclude libosmium, libspatialite, mapnik.

I feel that the "rip the bandaid off" notion is counterproductive, as it
really means "break things for users so that packagers have to decide
between old proj and dropping dependencies".

The real question is whether removing it would be a real gain, or just a
club to get people to update.  Certainly it's going to happen, but I
think it would be good to let the dust settle on proj6 first.  It feels
like we as a larger osgeo community are making progress on that and in 6
months or so I'd expect the situation is much better.

From kreve at sdfe.dk  Wed Oct 30 12:24:38 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 30 Oct 2019 19:24:38 +0000
Subject: [PROJ] Future maintainance releases
In-Reply-To: <7465958.6eN7QILkAW@even-i700>
References: <13568718.XafZnbjQPh@even-i700> <2058429.pZbsZHp53L@even-i700>
 <c8ba4d4c08574895a3e714f71e6bb726@sdfe.dk> <7465958.6eN7QILkAW@even-i700>
Message-ID: <EC579CEC-9DD4-4F12-A205-8D5456F8C86E@sdfe.dk>



> On 30 Oct 2019, at 12:12, Even Rouault <even.rouault at spatialys.com> wrote:
> 
>> No, not at all. My concern is, or was, that a 6.3 version would be rather
>> short-lived with a release of 7.0 only a few months later.
> 
> Depending on how much time it might take for 7.0 to be deployed to users using 
> binary distribution channels, we might have to maintain a 6.x for some time.

That is certainly a possibility. But it is inevitable that the 6.x branch is going to
go out of date no matter what. I don’t expect that we will be able to keep the
EPSG database up to date for very long in 6.x for instance.

> 
>> But if the
>> changes you are proposing really are so disrupting I agree that it will be
>> beneficial with a new minor-version release. I have one question though.
>> Would it be a benefit to your work on vertical transforms if you were not
>> restricted by the old API? The grid code is somewhat entangled as far as I
>> remember and wouldn't be surprised if some of olde API functions is in the
>> way of the smartest way to do things. If that is the case then I think we
>> should just go straight to 7.0. If you can accomplish your work without
>> working around the existing API a 6.3 release is fine with me.
> 
> For now, I'm most dealing with metadata related work, nothing in the grid 
> handling itself. If the CDN related work happens to be done, yes it will be 
> internally disruptive, but looking quickly at proj_api.h, I'm not even sure 
> the old API would be a problem for that. The only thing that is grid related 
> is pj_apply_gridshift(), but I don't think that would be an issue, and looking 
> in Debian archive for
> https://codesearch.debian.net/search?q=pj_apply_gridshift 
> I can only find mentions of it in PROJ itself or its embedded copies by other 
> projects, so basically no one in the open world is using it.
> 

Right, in that case I think your proposal of introducing 6.3 in the next release
cycle is the best thing to do. I will update the release schedule as follows:

6.3.0		January 1st 2020
7.0.0 + 6.3.1	March 1st 2020

From 7.0 and onwards I think I would like to move to issuing releases every
three months as opposed to the bi-monthly cycle I’ve been keeping the last
two years. It’s less of a burden on me preparing the releases and I expect the
speed of development to slow down a bit now that the most significant chunks
of database work is finalised.

/Kristian


> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com


From kreve at sdfe.dk  Wed Oct 30 12:29:39 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 30 Oct 2019 19:29:39 +0000
Subject: [PROJ] Future maintainance releases
In-Reply-To: <rmisgnauz1m.fsf@s1.lexort.com>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk> <2058429.pZbsZHp53L@even-i700>
 <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl> <rmisgnauz1m.fsf@s1.lexort.com>
Message-ID: <4625A259-37DB-47F0-BA1B-B7D417884DBC@sdfe.dk>



> On 30 Oct 2019, at 14:45, Greg Troxel <gdt at lexort.com> wrote:
> 
> Bas Couwenberg <sebastic at xs4all.nl> writes:
> 
>> [info about proj6 migration status]
> 
> From my perspective on packaging many things, proj's trajectory of
> deprecations is already feeling very rapid compared to how many things
> depend on it.   Realize that people are still in the process of getting
> off qt4.
> 
> pkgsrc is in a similar position to Debian, although less well baked,
> with proj6 in wip (sort of like Debian unstable, but not really), and
> having to define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to keep some things
> building.
> 
> I don't want to have multiple proj versions in pkgsrc,a nd I don't want
> to prclude libosmium, libspatialite, mapnik.
> 
> I feel that the "rip the bandaid off" notion is counterproductive, as it
> really means "break things for users so that packagers have to decide
> between old proj and dropping dependencies”.

I don’t think that is a fair way to lay it out. From the beginning we've had
a “double-feature” in the release schedule for the 7.0.0 release with an
accompanying 6.x-release. This is still the plan and if it turns out to be
necessary we can put out more releases of the 6.x branch later on. Users
of proj_api.h should be taken care of for at least a year or two more with
the 6.3.1 release. But at some point support for 6.x has to stop. I don’t
want to see us move into Python2 territory!

/Kristian

> 
> The real question is whether removing it would be a real gain, or just a
> club to get people to update.  Certainly it's going to happen, but I
> think it would be good to let the dust settle on proj6 first.  It feels
> like we as a larger osgeo community are making progress on that and in 6
> months or so I'd expect the situation is much better.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From even.rouault at spatialys.com  Wed Oct 30 12:39:20 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 30 Oct 2019 20:39:20 +0100
Subject: [PROJ] Future maintainance releases
In-Reply-To: <EC579CEC-9DD4-4F12-A205-8D5456F8C86E@sdfe.dk>
References: <13568718.XafZnbjQPh@even-i700> <7465958.6eN7QILkAW@even-i700>
 <EC579CEC-9DD4-4F12-A205-8D5456F8C86E@sdfe.dk>
Message-ID: <1611697.CRphbh9pbb@even-i700>

> That is certainly a possibility. But it is inevitable that the 6.x branch is
> going to go out of date no matter what. 

Sure

> I don’t expect that we will be
> able to keep the EPSG database up to date for very long in 6.x for
> instance.

Once EPSG v10 is released, yes it won't be practical to update PROJ branches, 
that haven't received the needed upgrades, with new EPSG databases (or that 
would require to update the import script to do the necessary magic to deal 
with the impedance mismatches)

> Right, in that case I think your proposal of introducing 6.3 in the next
> release cycle is the best thing to do. I will update the release schedule
> as follows: 
> 6.3.0		January 1st 2020
> 7.0.0 + 6.3.1	March 1st 2020

Sounds good to me.

> 
> From 7.0 and onwards I think I would like to move to issuing releases every
> three months as opposed to the bi-monthly cycle I’ve been keeping the last
> two years. It’s less of a burden on me preparing the releases and I expect
> the speed of development to slow down a bit now that the most significant
> chunks of database work is finalised.

Ah ah, do you think so ? Reminds me of this famous quote "I'm doing a (free) 
operating system (just a hobby, won't be big and professional like gnu) for 
386(486) AT clones"

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Wed Oct 30 13:22:38 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 30 Oct 2019 20:22:38 +0000
Subject: [PROJ] Future maintainance releases
In-Reply-To: <1611697.CRphbh9pbb@even-i700>
References: <13568718.XafZnbjQPh@even-i700> <7465958.6eN7QILkAW@even-i700>
 <EC579CEC-9DD4-4F12-A205-8D5456F8C86E@sdfe.dk> <1611697.CRphbh9pbb@even-i700>
Message-ID: <B430AC0E-E762-424F-BC3C-CA5591042501@sdfe.dk>



> On 30 Oct 2019, at 20:39, Even Rouault <even.rouault at spatialys.com> wrote:
> 
>> That is certainly a possibility. But it is inevitable that the 6.x branch is
>> going to go out of date no matter what. 
> 
> Sure
> 
>> I don’t expect that we will be
>> able to keep the EPSG database up to date for very long in 6.x for
>> instance.
> 
> Once EPSG v10 is released, yes it won't be practical to update PROJ branches, 
> that haven't received the needed upgrades, with new EPSG databases (or that 
> would require to update the import script to do the necessary magic to deal 
> with the impedance mismatches)
> 
>> Right, in that case I think your proposal of introducing 6.3 in the next
>> release cycle is the best thing to do. I will update the release schedule
>> as follows: 
>> 6.3.0		January 1st 2020
>> 7.0.0 + 6.3.1	March 1st 2020
> 
> Sounds good to me.
> 
>> 
>> From 7.0 and onwards I think I would like to move to issuing releases every
>> three months as opposed to the bi-monthly cycle I’ve been keeping the last
>> two years. It’s less of a burden on me preparing the releases and I expect
>> the speed of development to slow down a bit now that the most significant
>> chunks of database work is finalised.
> 
> Ah ah, do you think so ? Reminds me of this famous quote "I'm doing a (free) 
> operating system (just a hobby, won't be big and professional like gnu) for 
> 386(486) AT clones”
> 

Fair point :-) Honestly though, I think development has slowed down already.
And I don’t expect anyone to produce the crazy amounts of code that you did
for GDALbarn in the foreseeable future. But we’ll see, I don’t mind being wrong
about this.

/Kristian


> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com


From gdt at lexort.com  Wed Oct 30 17:58:14 2019
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 30 Oct 2019 20:58:14 -0400
Subject: [PROJ] Future maintainance releases
In-Reply-To: <4625A259-37DB-47F0-BA1B-B7D417884DBC@sdfe.dk> (Kristian Evers's
 message of "Wed, 30 Oct 2019 19:29:39 +0000")
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk>
 <2058429.pZbsZHp53L@even-i700>
 <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl>
 <rmisgnauz1m.fsf@s1.lexort.com>
 <4625A259-37DB-47F0-BA1B-B7D417884DBC@sdfe.dk>
Message-ID: <rmi36f9spcp.fsf@s1.lexort.com>

Kristian Evers <kreve at sdfe.dk> writes:

>> On 30 Oct 2019, at 14:45, Greg Troxel <gdt at lexort.com> wrote:
>> 
>> Bas Couwenberg <sebastic at xs4all.nl> writes:
>> 
>>> [info about proj6 migration status]
>> 
>> From my perspective on packaging many things, proj's trajectory of
>> deprecations is already feeling very rapid compared to how many things
>> depend on it.   Realize that people are still in the process of getting
>> off qt4.
>> 
>> pkgsrc is in a similar position to Debian, although less well baked,
>> with proj6 in wip (sort of like Debian unstable, but not really), and
>> having to define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to keep some things
>> building.
>> 
>> I don't want to have multiple proj versions in pkgsrc, and I don't want
>> to preclude libosmium, libspatialite, mapnik.
>> 
>> I feel that the "rip the bandaid off" notion is counterproductive, as it
>> really means "break things for users so that packagers have to decide
>> between old proj and dropping dependencies”.
>
> I don’t think that is a fair way to lay it out. From the beginning we've had
> a “double-feature” in the release schedule for the 7.0.0 release with an
> accompanying 6.x-release. This is still the plan and if it turns out to be
> necessary we can put out more releases of the 6.x branch later on. Users
> of proj_api.h should be taken care of for at least a year or two more with
> the 6.3.1 release. But at some point support for 6.x has to stop. I don’t
> want to see us move into Python2 territory!

I think we have some fundamentally different assumptions about things,
both reasonable in their own right, but I'll try to lay out how I think
you see it and then how I do.


I think you are seeing that there are people that are wanting to compile
a single program that depends on proj, and that might or might not use
proj_api.h (meaning that they need proj 6, and 7 will not do).  Then
these people would choose either 6.x (if the program uses proj_api.h) or
7 (if it doesn't), build proj, and then build the program they want to
use.

As I see it, nearly 100% of the uses of any popular program are via some
packaging system.  So users type "pkg_add qgis" (if they are the unusual
ones that use pkgsrc :-), "apt install qgis" (ish), or something that
amounts to the same thing.  This gets them -- as an automatic dependency
--the proj version chosen by the people curating the packaging system --
which is people like Bas and me.  Most users don't know how to build
things; they rely on binary packages prepared by packaging systems.

Packagers have a big first choice: does the packaging system use a
single version of proj, or does it have some scheme to have multiple
versions and somehow namespace them to permit simultaneous use.

If a single, then do we choose 6.x, and leave out features, or do we
choose 7.x and *entirely drop* packages that still use proj_api in their
*latest formal release* from the packaging system?

If we go down the multiple path, then how do we organize things where
(making things up) qgis depends on proj and can use 7, but qgis depends
on libspatialite which needs proj_api and thus 6.  But any one program
can only link one proj.  Plus, multiple parallel-installable versions is
hard, and in pkgsrc we use that mostly for things like python.

Right now, pkgsrc is not even updating to proj 6, but has it in a
staging area.  Probably it's about time to really update.  Debian is in
process -- I just read that it's in unstable but not yet in a formal
release.  This delay in moving both pkgsrc and Debian from 5 to 6 is
already gated by compatibility issues; if every program that compiled
with 5 built with 6, it would have just been updated quickly, with no
wailing and gnashing of teeth.

That's a long way of saying that "users can just use 6 if they need to"
doesn't fit with the my notion of how users rely on a collection of
binary packages.  Hence that releasing 7 with an API break leaves
packagers with the choice of "don't give 7 to users" vs "drop things
that don't build with 7"


All of this leads to the issue of "but things have been deprecated for a
wicked long time (as we say in Boston)".  Unquestionably true.  But I
have seen over the years that when a package is foundational and very
widely used, that API withdrawals take a very long time to completely
ripple through the ecosystem.  In pkgsrc we are just dealing with
removing qt4 (and Debian is only a few steps ahead of us, struggling
with exactly the same issues).  Programs from high-functioning upstreams
with regular release like GNU Radio have made releases as recent as
April 2019 which use qt4, even though the last release of qt4 was in
April of 2015, and it went EOL at the end of 2015.


I'm not trying to say specifically what you should do.  Just that when
there is a new release with an API withdrawal, then packagers have to
choose between not updating and dropping things that don't build or
can't easily be patched to build.   If the notion is that 7 will be
released but you don't expect packaging systems to adopt it, that's
perhaps an interesting situation that I haven't really pondered.

(speaking only for me, of course)

Greg



From pramsey at cleverelephant.ca  Wed Oct 30 18:11:31 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Wed, 30 Oct 2019 18:11:31 -0700
Subject: [PROJ] Future maintainance releases
In-Reply-To: <rmi36f9spcp.fsf@s1.lexort.com>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk> <2058429.pZbsZHp53L@even-i700>
 <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl> <rmisgnauz1m.fsf@s1.lexort.com>
 <4625A259-37DB-47F0-BA1B-B7D417884DBC@sdfe.dk>
 <rmi36f9spcp.fsf@s1.lexort.com>
Message-ID: <5C951202-F58F-4001-B4B4-905E8EA829B2@cleverelephant.ca>

Just have to put the oar in 😁

... and then there is the fun of being a dependent program and realistically having to support both versions for N years. Proj didn’t want to shim between the old and new APIs any more... which meant the shim just migrated out one level. So now we have one. I’m sure others will too 😂

P

> On Oct 30, 2019, at 5:58 PM, Greg Troxel <gdt at lexort.com> wrote:
> 
> Kristian Evers <kreve at sdfe.dk> writes:
> 
>>> On 30 Oct 2019, at 14:45, Greg Troxel <gdt at lexort.com> wrote:
>>> 
>>> Bas Couwenberg <sebastic at xs4all.nl> writes:
>>> 
>>>> [info about proj6 migration status]
>>> 
>>> From my perspective on packaging many things, proj's trajectory of
>>> deprecations is already feeling very rapid compared to how many things
>>> depend on it.   Realize that people are still in the process of getting
>>> off qt4.
>>> 
>>> pkgsrc is in a similar position to Debian, although less well baked,
>>> with proj6 in wip (sort of like Debian unstable, but not really), and
>>> having to define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to keep some things
>>> building.
>>> 
>>> I don't want to have multiple proj versions in pkgsrc, and I don't want
>>> to preclude libosmium, libspatialite, mapnik.
>>> 
>>> I feel that the "rip the bandaid off" notion is counterproductive, as it
>>> really means "break things for users so that packagers have to decide
>>> between old proj and dropping dependencies”.
>> 
>> I don’t think that is a fair way to lay it out. From the beginning we've had
>> a “double-feature” in the release schedule for the 7.0.0 release with an
>> accompanying 6.x-release. This is still the plan and if it turns out to be
>> necessary we can put out more releases of the 6.x branch later on. Users
>> of proj_api.h should be taken care of for at least a year or two more with
>> the 6.3.1 release. But at some point support for 6.x has to stop. I don’t
>> want to see us move into Python2 territory!
> 
> I think we have some fundamentally different assumptions about things,
> both reasonable in their own right, but I'll try to lay out how I think
> you see it and then how I do.
> 
> 
> I think you are seeing that there are people that are wanting to compile
> a single program that depends on proj, and that might or might not use
> proj_api.h (meaning that they need proj 6, and 7 will not do).  Then
> these people would choose either 6.x (if the program uses proj_api.h) or
> 7 (if it doesn't), build proj, and then build the program they want to
> use.
> 
> As I see it, nearly 100% of the uses of any popular program are via some
> packaging system.  So users type "pkg_add qgis" (if they are the unusual
> ones that use pkgsrc :-), "apt install qgis" (ish), or something that
> amounts to the same thing.  This gets them -- as an automatic dependency
> --the proj version chosen by the people curating the packaging system --
> which is people like Bas and me.  Most users don't know how to build
> things; they rely on binary packages prepared by packaging systems.
> 
> Packagers have a big first choice: does the packaging system use a
> single version of proj, or does it have some scheme to have multiple
> versions and somehow namespace them to permit simultaneous use.
> 
> If a single, then do we choose 6.x, and leave out features, or do we
> choose 7.x and *entirely drop* packages that still use proj_api in their
> *latest formal release* from the packaging system?
> 
> If we go down the multiple path, then how do we organize things where
> (making things up) qgis depends on proj and can use 7, but qgis depends
> on libspatialite which needs proj_api and thus 6.  But any one program
> can only link one proj.  Plus, multiple parallel-installable versions is
> hard, and in pkgsrc we use that mostly for things like python.
> 
> Right now, pkgsrc is not even updating to proj 6, but has it in a
> staging area.  Probably it's about time to really update.  Debian is in
> process -- I just read that it's in unstable but not yet in a formal
> release.  This delay in moving both pkgsrc and Debian from 5 to 6 is
> already gated by compatibility issues; if every program that compiled
> with 5 built with 6, it would have just been updated quickly, with no
> wailing and gnashing of teeth.
> 
> That's a long way of saying that "users can just use 6 if they need to"
> doesn't fit with the my notion of how users rely on a collection of
> binary packages.  Hence that releasing 7 with an API break leaves
> packagers with the choice of "don't give 7 to users" vs "drop things
> that don't build with 7"
> 
> 
> All of this leads to the issue of "but things have been deprecated for a
> wicked long time (as we say in Boston)".  Unquestionably true.  But I
> have seen over the years that when a package is foundational and very
> widely used, that API withdrawals take a very long time to completely
> ripple through the ecosystem.  In pkgsrc we are just dealing with
> removing qt4 (and Debian is only a few steps ahead of us, struggling
> with exactly the same issues).  Programs from high-functioning upstreams
> with regular release like GNU Radio have made releases as recent as
> April 2019 which use qt4, even though the last release of qt4 was in
> April of 2015, and it went EOL at the end of 2015.
> 
> 
> I'm not trying to say specifically what you should do.  Just that when
> there is a new release with an API withdrawal, then packagers have to
> choose between not updating and dropping things that don't build or
> can't easily be patched to build.   If the notion is that 7 will be
> released but you don't expect packaging systems to adopt it, that's
> perhaps an interesting situation that I haven't really pondered.
> 
> (speaking only for me, of course)
> 
> Greg
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From alansnow21 at gmail.com  Wed Oct 30 20:26:18 2019
From: alansnow21 at gmail.com (Alan Snow)
Date: Wed, 30 Oct 2019 22:26:18 -0500
Subject: [PROJ] PROJ 6.2.1RC1
In-Reply-To: <AA692F30-3B2A-490B-BCC7-65F13CEF3885@gmail.com>
References: <AA692F30-3B2A-490B-BCC7-65F13CEF3885@gmail.com>
Message-ID: <CAGybdFRayx8bfuuRGC05dXUAfbhcudY53Rkfsok_o_=vhsga=Q@mail.gmail.com>

All builds pass as expected with pyproj. Thanks!

On Mon, Oct 28, 2019 at 1:01 PM Kristian Evers <kristianevers at gmail.com>
wrote:

> All,
>
> With a scheduled release of PROJ 6.2.1. on November 1st it is time to put
> out a
> release candidate. This release is a bug fix release which contain more
> than
> twenty bugs fixes.
>
> Download the archives here:
>
> http://download.osgeo.org/proj/proj-6.2.1RC1.tar.gz (
> http://download.osgeo.org/proj/proj-6.2.1RC1.tar.gz.md5)
> http://download.osgeo.org/proj/proj-6.2.1RC1.zip    (
> http://download.osgeo.org/proj/proj-6.2.1RC1.zip.md5)
>
>
> See the release notes below.
>
> Please test the release candidates and report back any problems you
> may encounter.
>
> Providing that no problems with the release candidate is found, I will
> call for a PSC vote
> Wednesday morning with a plan to release Friday November 1st.
>
> /Kristian
>
>
> ————————————————————————————————————————————————————————————————————————————
>
>  Updates
>  -------
>
>  o Update the EPSG database to version 9.8.2
>
>  Bug fixes
>  -------
>
>  o Fixed erroneous spelling of "Potsdam" (#1573)
>
>  o Calculate y-coordinate correctly in bertin1953 in all cases (#1579)
>
>  o proj_create_crs_to_crs_from_pj(): make the PJ* arguments const PJ*
> (#1583)
>
>  o PROJStringParser::createFromPROJString(): avoid potential infinite
>    recursion (#1574)
>
>  o Avoid core dump when setting ctx==NULL in functions
>    proj_coordoperation_is_instantiable and
>    proj_coordoperation_has_ballpark_transformation (#1590)
>
>  o createOperations(): fix conversion from/to PROJ.4 CRS strings with
>    non-ISO-kosher options and +towgs84/+nadgrids (#1602)
>
>  o proj_trans_generic(): properly set coordinate time to HUGE_VAL when no
>    value is passed to the function (#1604)
>
>  o Fix support for +proj=ob_tran +o_proj=lonlat/latlong/latlon instead of
> only
>    only allowing +o_proj=longlat (#1601)
>
>  o Improve backwards compatibility of vertical transforms (#1613)
>
>  o Improve emulation of deprecated +init style initialization (#1614)
>
>  o cs2cs: autopromote CRS to 3D when there's a mix of 2D and 3D (#1563)
>
>  o Avoid divisions by zero in odd situations (#1620)
>
>  o Avoid compile error on Solaris (#1639)
>
>  o proj_create_crs_to_crs(): fix when there are only transformations with
>    ballpark steps (#1643)
>
>  o PROJ string CRS ingester: recognize more unit-less parameters, and
> general
>    handling of +key=string_value parameters (#1645)
>
>  o Only call pkg-config in configure when necessary (#1652)
>
>  o aeqd: for spherical forward path, go to higher precision ellipsoidal
>    case when the point coordinates are super close to the origin (#1654)
>
>  o proj_create_crs_to_crs(): remove elimination of Ballpark operations
>    that caused transformation failures in some cases (#1665)
>
>  o createOperations(): allow transforming from a compoundCRS of a bound
>    verticalCRS to a 2D CRS (#1667)
>
>  o Avoid segfaults in case of out-of-memory situations (#1679)
>
>  o createOperations(): fix double vertical unit conversion from CompoundCRS
>    to other CRS when the horizontal part of the projected CRS uses
> non-metre
>    unit (#1683)
>
>  o importFromWkt(): fix axis orientation for non-standard ESRI WKT (#1690)
>
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
Alan Snow
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20191030/f48c0f50/attachment.html>

From kreve at sdfe.dk  Thu Oct 31 00:20:58 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 31 Oct 2019 07:20:58 +0000
Subject: [PROJ] Future maintainance releases
In-Reply-To: <5C951202-F58F-4001-B4B4-905E8EA829B2@cleverelephant.ca>
References: <13568718.XafZnbjQPh@even-i700>
 <3787220d-fdaf-69b3-4cc5-b38ee371206e@xs4all.nl>
 <4f3c66f428d74fa8915451f062cb0a04@sdfe.dk> <2058429.pZbsZHp53L@even-i700>
 <c4921a928b1c2d1b3f38c6dda663e224@xs4all.nl> <rmisgnauz1m.fsf@s1.lexort.com>
 <4625A259-37DB-47F0-BA1B-B7D417884DBC@sdfe.dk>
 <rmi36f9spcp.fsf@s1.lexort.com>
 <5C951202-F58F-4001-B4B4-905E8EA829B2@cleverelephant.ca>
Message-ID: <94846156-EAEE-4082-B2E0-321791630C8A@sdfe.dk>

>> I think we have some fundamentally different assumptions about things,
>> both reasonable in their own right, but I'll try to lay out how I think
>> you see it and then how I do.

Greg, I am well aware of the intricacies of packaging systems. It is not simple
and you and Bas have difficult task of making it all fit together. Please don’t
think that I don’t understand or respect the job you do.

I am also aware that PROJ has made a lot of changes over a somewhat short
time. I would love to live in a world where that wasn’t necessary but unfortunately
PROJ was in an less than ideal state for far too long. It is no ones fault, it is just
the way things turned out. Now we are catching up and that means moving quickly
for a bit. I think most agrees that this is the right thing to do. I also know that it is
a difficult task to migrate from one API to the other. I believe the benefits of the
new features in PROJ is worth it. I also think that PROJ 6 is a good bridge between
the new and the old. I fully expect PROJ 6 to be around in packaging systems
for quite some time still. But I also fear that most projects will be stuck using the
old API forever if we keep hanging on to proj_api.h. Were that to happen I would
be extremely discouraged from working on PROJ - my motivation is to bring
better use of geodesy to the masses. We can’t do that properly through the old
API.

I think what we have now is a good compromise: Those that can use PROJ 
 when it comes out and get the benefit of regular updates to the EPSG database
etc. And those who can’t use PROJ 7 just yet can still use the 6.x branch which
is already rather good. Should it prove necessary we will release maintenance
releases of the 6.x branch, at least for the first year of it being superseded by
PROJ 7.

> Proj didn’t want to shim between the old and new APIs any more... which meant the shim just migrated out one level. So now we have one. I’m sure others will too 😂


Yes, this is unfortunate but I really can’t see any way around that. Except from
freezing time at PROJ 4.9.3… 

/Kristian


> On 31 Oct 2019, at 02:11, Paul Ramsey <pramsey at cleverelephant.ca> wrote:
> 
> Just have to put the oar in 😁
> 
> ... and then there is the fun of being a dependent program and realistically having to support both versions for N years. Proj didn’t want to shim between the old and new APIs any more... which meant the shim just migrated out one level. So now we have one. I’m sure others will too 😂
> 
> P
> 
>> On Oct 30, 2019, at 5:58 PM, Greg Troxel <gdt at lexort.com> wrote:
>> 
>> Kristian Evers <kreve at sdfe.dk> writes:
>> 
>>>> On 30 Oct 2019, at 14:45, Greg Troxel <gdt at lexort.com> wrote:
>>>> 
>>>> Bas Couwenberg <sebastic at xs4all.nl> writes:
>>>> 
>>>>> [info about proj6 migration status]
>>>> 
>>>> From my perspective on packaging many things, proj's trajectory of
>>>> deprecations is already feeling very rapid compared to how many things
>>>> depend on it.   Realize that people are still in the process of getting
>>>> off qt4.
>>>> 
>>>> pkgsrc is in a similar position to Debian, although less well baked,
>>>> with proj6 in wip (sort of like Debian unstable, but not really), and
>>>> having to define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H to keep some things
>>>> building.
>>>> 
>>>> I don't want to have multiple proj versions in pkgsrc, and I don't want
>>>> to preclude libosmium, libspatialite, mapnik.
>>>> 
>>>> I feel that the "rip the bandaid off" notion is counterproductive, as it
>>>> really means "break things for users so that packagers have to decide
>>>> between old proj and dropping dependencies”.
>>> 
>>> I don’t think that is a fair way to lay it out. From the beginning we've had
>>> a “double-feature” in the release schedule for the 7.0.0 release with an
>>> accompanying 6.x-release. This is still the plan and if it turns out to be
>>> necessary we can put out more releases of the 6.x branch later on. Users
>>> of proj_api.h should be taken care of for at least a year or two more with
>>> the 6.3.1 release. But at some point support for 6.x has to stop. I don’t
>>> want to see us move into Python2 territory!
>> 
>> I think we have some fundamentally different assumptions about things,
>> both reasonable in their own right, but I'll try to lay out how I think
>> you see it and then how I do.
>> 
>> 
>> I think you are seeing that there are people that are wanting to compile
>> a single program that depends on proj, and that might or might not use
>> proj_api.h (meaning that they need proj 6, and 7 will not do).  Then
>> these people would choose either 6.x (if the program uses proj_api.h) or
>> 7 (if it doesn't), build proj, and then build the program they want to
>> use.
>> 
>> As I see it, nearly 100% of the uses of any popular program are via some
>> packaging system.  So users type "pkg_add qgis" (if they are the unusual
>> ones that use pkgsrc :-), "apt install qgis" (ish), or something that
>> amounts to the same thing.  This gets them -- as an automatic dependency
>> --the proj version chosen by the people curating the packaging system --
>> which is people like Bas and me.  Most users don't know how to build
>> things; they rely on binary packages prepared by packaging systems.
>> 
>> Packagers have a big first choice: does the packaging system use a
>> single version of proj, or does it have some scheme to have multiple
>> versions and somehow namespace them to permit simultaneous use.
>> 
>> If a single, then do we choose 6.x, and leave out features, or do we
>> choose 7.x and *entirely drop* packages that still use proj_api in their
>> *latest formal release* from the packaging system?
>> 
>> If we go down the multiple path, then how do we organize things where
>> (making things up) qgis depends on proj and can use 7, but qgis depends
>> on libspatialite which needs proj_api and thus 6.  But any one program
>> can only link one proj.  Plus, multiple parallel-installable versions is
>> hard, and in pkgsrc we use that mostly for things like python.
>> 
>> Right now, pkgsrc is not even updating to proj 6, but has it in a
>> staging area.  Probably it's about time to really update.  Debian is in
>> process -- I just read that it's in unstable but not yet in a formal
>> release.  This delay in moving both pkgsrc and Debian from 5 to 6 is
>> already gated by compatibility issues; if every program that compiled
>> with 5 built with 6, it would have just been updated quickly, with no
>> wailing and gnashing of teeth.
>> 
>> That's a long way of saying that "users can just use 6 if they need to"
>> doesn't fit with the my notion of how users rely on a collection of
>> binary packages.  Hence that releasing 7 with an API break leaves
>> packagers with the choice of "don't give 7 to users" vs "drop things
>> that don't build with 7"
>> 
>> 
>> All of this leads to the issue of "but things have been deprecated for a
>> wicked long time (as we say in Boston)".  Unquestionably true.  But I
>> have seen over the years that when a package is foundational and very
>> widely used, that API withdrawals take a very long time to completely
>> ripple through the ecosystem.  In pkgsrc we are just dealing with
>> removing qt4 (and Debian is only a few steps ahead of us, struggling
>> with exactly the same issues).  Programs from high-functioning upstreams
>> with regular release like GNU Radio have made releases as recent as
>> April 2019 which use qt4, even though the last release of qt4 was in
>> April of 2015, and it went EOL at the end of 2015.
>> 
>> 
>> I'm not trying to say specifically what you should do.  Just that when
>> there is a new release with an API withdrawal, then packagers have to
>> choose between not updating and dropping things that don't build or
>> can't easily be patched to build.   If the notion is that 7 will be
>> released but you don't expect packaging systems to adopt it, that's
>> perhaps an interesting situation that I haven't really pondered.
>> 
>> (speaking only for me, of course)
>> 
>> Greg
>> 
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj


