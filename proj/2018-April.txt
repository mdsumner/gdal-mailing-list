From kristianevers at gmail.com  Sun Apr  1 04:39:45 2018
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 1 Apr 2018 13:39:45 +0200
Subject: [Proj] PROJ 5.0.1
Message-ID: <AF823B31-9B0F-4D1A-BA29-564B16996FE9@gmail.com>

We are pleased to announce the release of PROJ 5.0.1. This is purely a bug fixing release,
that fixes a range of problems in the initial PROJ 5 release. See the complete release
notes below.

Download it here:

	http://download.osgeo.org/proj/proj-5.0.1.tar.gz <http://download.osgeo.org/proj/proj-5.0.1.tar.gz> (http://download.osgeo.org/proj/proj-5.0.1.tar.gz.md5 <http://download.osgeo.org/proj/proj-5.0.1.tar.gz.md5>)
	http://download.osgeo.org/proj/proj-5.0.1.zip <http://download.osgeo.org/proj/proj-5.0.1.zip> (http://download.osgeo.org/proj/proj-5.0.1.zip.md5 <http://download.osgeo.org/proj/proj-5.0.1.zip.md5>)


The PROJ development team

—————————————————————————————————————————————————

5.0.1 Release Notes
-------------------

BUG FIXES
------------

All bug fix numbers refer to issues or pull requests indexed at
https://github.com/OSGeo/proj.4/ <https://github.com/OSGeo/proj.4/>

o Handle ellipsoid change correctly in pipelines when
  +towgs84=0,0,0 is set #881

o Handle the case where nad_ctable2_init returns NULL #883

o Avoid shadowed declaration errors with old gcc #880

o Expand +datum properly +datum in pipelines #872

o Fail gracefully when incorrect headers are encountered in grid
  files #875

o Improve roundtrip stability in pipelines using +towgs84 #871

o Fixed typo in gie error codes #861

o Numerical stability fixes to the geodesic package #826 #843

o Make sure that transient errors are returned correctly #857

o Make sure that locally installed header files are not used when
  building PROJ #849

o Fix inconsistent parameter names in proj.h/proj_4D_api.c #842

o Make sure +vunits is applied #833

o Fix incorrect Web Mercator transformations #834

THANKS TO
------------

Version 5.0.1 is made possible by the following contributors:

  Mike Toews
  Kurt Schwehr
  Even Rouault
  Charles Karney
  Thomas Knudsen
  Kristian Evers
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180401/5028ae89/attachment.html>

From markus.metz.giswork at gmail.com  Sun Apr  8 13:13:36 2018
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Sun, 8 Apr 2018 22:13:36 +0200
Subject: [Proj] [gdal-dev] [GRASS-dev] PROJ 5 support in trunk
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAECB26D9@S000014.PROD.SITAD.DK>
References: <CAG+h=FEG+7KMi8nkR1bBWw8WzEcqukmPEsYyXArDiQJg+gbGsw@mail.gmail.com>
	<CAG+h=FErXb-PUwiw6zWPd9tFKJ6CAQYh8H+u3Y64MnrW0uygNA@mail.gmail.com>
	<CAG+h=FEGUE4f+9mJcLT6DaRBFegj-x9nF1D7wzSfBb9f+LN1cA@mail.gmail.com>
	<1522010844481-0.post@n6.nabble.com>
	<CAG+h=FGPKmC=rN7atP_OaNQaivV9aTxH5+u+qSVSb5XTU4neSA@mail.gmail.com>
	<CB205686-4E9C-442F-A5C4-97566FB9D5F5@sdfe.dk>
	<CAG+h=FHVrMOdck=1zA__dQVpA0rz8dnK0KxrzqoR-0AvE=CDUw@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAECB26D9@S000014.PROD.SITAD.DK>
Message-ID: <CAG+h=FF+eG+OEjCWzRGcSAtKbDTKT7YBUnrXRhD5LJxk1zSRFg@mail.gmail.com>

On Tue, Apr 3, 2018 at 1:57 PM, Kristian Evers <kreve at sdfe.dk> wrote:
>
> Markus,
>
>
>
> Sorry for the late reply – you mail got caught by the corporate spam
filter.
>
>
>
> > The challenge is that users of other software using the new PROJ API
like GDAL and GRASS expect that reprojecting a dataset from one CRS to
another CRS "just works".  Input and output CRS can be anything custom
defined. Either PROJ or other software using PROJ must have some mechanism
to decide if the requested reprojection can be done or not.
>
>
>
> And with my proposal to change proj_create_crs_to_crs() to allow input
other than strings on the form “+init=file:key” you will get exactly what
you have always had with the old API. You can definitely argue that this
has never “just worked”, since using the WGS84 hub datum is rarely doing
the correct thing, but for most users it is good enough.

For most datasets, WGS84 as pivot datum should be good enough, considering
the limited spatial accuracy of many real-world datasets.

> This will not be the case forever though. It is my hope that eventually
we will have a system the really “just works”, even for users requiring
high accuracy, but for now we only have the basic scaffolding that
eventually will make this possible. Patience will be required :-)

FWIW, I added support for user-defined pipelines in GRASS in r.proj
(r72598) and v.proj (r72599) with a new pipeline option.

Markus M

>
> > Looking forward to this function! But what if a dataset comes with a
CRS definition without EPSG code? Can we expect that PROJ handles this or
should applications using the PROJ API handle this?
>
> Without having thought this through all the way to the end yet, I think
this situation will be possible to handle. The idea being that if you
specify an EPSG CRS on one side and a string like “+proj=merc” or whatever,
we could default to a transformation with hub datum like we do today.
Either by going from EPSG:xxxx to WGS84 (or something else that makes sense
in the situation) and then transform from the hub datum to the custom CRS.
It will be a best guess as to how to that transformation but better than
nothing, and probably correct in most cases.
>
> I might have overlooked something, so no promises on the final
implementation yet!
>
>
>
> /Kristian
>
>
>
> Fra: Markus Metz [mailto:markus.metz.giswork at gmail.com]
> Sendt: 27. marts 2018 21:50
> Til: Kristian Evers <kreve at sdfe.dk>
> Cc: GRASS developers list <grass-dev at lists.osgeo.org>; gdal-dev <
gdal-dev at lists.osgeo.org>
> Emne: Re: [gdal-dev] [GRASS-dev] PROJ 5 support in trunk
>
>
>
>
>
>
>
> On Mon, Mar 26, 2018 at 10:51 PM, Kristian Evers <kreve at sdfe.dk> wrote:
>
>
>
>
>
> On 26 Mar 2018, at 21:21, Markus Metz <markus.metz.giswork at gmail.com>
wrote:
>
>
>
> There is an important difference between the PROJ4 and the PROJ5+
API/syntax:
>
> The old PROJ4 API uses latlong WGS84 as pivot datum for coordinate
transformations like
>
> projection1 -> latlong WGS84 -> projection2
>
> or in '+to' syntax
> projection1 +to projection2
>
>
>
> The new PROJ5+ API no longer uses a pivot datum. The advantage is that
you can directly convert from one datum to another, without going through
WGS84. The disadvantage is that the user/software using the new API has to
make sure that either a common pivot datum is used or coordinates are
correctly transformed from one datum to another, e.g. with a Helmert
Transform.
>
> Both GDAL and GRASS have implemented the new API as a simple 2-step
pipeline like
>
>
> 1. projection1 -> some latlong
> 2. some latlong -> projection2
>
>
> or in pipeline syntax
>
>
>
> +proj=pipeline
>
> +step +inv projection1
>
> +step projection2
>
>
>
>
>
> This is actually exactly what the proj_crs_to_crs() function does. When I
originally wrote it I had an idea that this should only be used with
init-files,
>
> but seeing how people need a simple way to do what they’ve always done I
think it might be better to relax that requirement and allow input similar
>
> to what goes into cs2cs and pj_transform().
>
>
>
> The challenge is that users of other software using the new PROJ API like
GDAL and GRASS expect that reprojecting a dataset from one CRS to another
CRS "just works".  Input and output CRS can be anything custom defined.
Either PROJ or other software using PROJ must have some mechanism to decide
if the requested reprojection can be done or not.
>
>
>
> My plan for this function is that it eventually will be able to construct
a transformation between CRS’s without the WGS84 pivot. This will be guided
>
> by the EPSG database. I have still to work out exactly how. For now
though, it works fine with already existing init files and WGS84 as a pivot
datum.
>
> My hope is that this will land in version 6 but I won’t promise that just
yet.
>
>
>
> Looking forward to this function! But what if a dataset comes with a CRS
definition without EPSG code? Can we expect that PROJ handles this or
should applications using the PROJ API handle this?
>
> Markus M
>
>
>
>
>
> Even Rouault has done some tests and found sometimes subtle differences
in the results between the old and new API/syntax. Further on, there is no
mechanism (yet) in place to validate the pipeline, most importantly that
the output of step 1 conforms to the required input for step 2.
>
>
>
> I believe we have sorted those problems out in the coming version 5.0.1.
>
>
>
> Regarding validation of input/output from pipeline steps. We can probably
do some basic checks, but in the end you will always be required to know
>
> what you are doing. Mind you, we are not expecting everyday users to
construct their own pipelines all the time. It is a powertool for the
accomplished
>
> user that knows what he is doing. Most users should have their needs met
by predefined transformations in init-files such as the epsg file. And
eventually
>
> in a more clever way using the EPSG database directly as mentioned above.
>
>
>
>
>
> IMHO, the implementation of the new PROJ5+ API/syntax in GDAL and GRASS
should be regarded as experimental and testing by as many people as
possible would be a huge benefit to PROJ/GDAL/GRASS and to all applications
using these projects.
>
> Markus M
>
>
> On Sun, Mar 25, 2018 at 10:47 PM, Helmut Kudrnovsky <hellik at web.de> wrote:
> >
> > >Now (last related commit is trunk r72522) it's finished. I have
>introduced
> > a new GRASS API that handles both PROJ 4 and PROJ >5, consisting of
> >
> > Thanks for this Update!
> >
> > Fyi See
> > https://lists.osgeo.org/pipermail/osgeo4w-dev/2018-March/003557.html
> >
> > -------
> > [...]
> > The API from PROJ 4 lives on in PROJ 5, so GRASS 7.4 should be able to
use
> > PROJ 5 as well. We’ve been carefull not to breaking anything with this
> > release.
> > That comes with PROJ 6 and 7. Of course there might be implementation
> > details
> > in GRASS that I am unaware of that makes using PROJ 5 impossible.
> > --------
> >
> >
> >
> > -----
> > best regards
> > Helmut
> > --
> > Sent from: http://osgeo-org.1560.x6.nabble.com/Grass-Dev-f3991897.html
> > _______________________________________________
> > grass-dev mailing list
> > grass-dev at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/grass-dev
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180408/90b4179b/attachment.html>

From markus.metz.giswork at gmail.com  Sun Apr 15 10:09:06 2018
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Sun, 15 Apr 2018 19:09:06 +0200
Subject: [Proj] gdalinfo error and subsequent segfault with proj-5.0.x
Message-ID: <CAG+h=FHm=N==8vmrw7DoZtfLyiqOMtsHx_sjVgg=dTvCx0uH0w@mail.gmail.com>

I observed a segfault in gdalinfo (2.2.3, 2.2.4, 2.3.0dev-71e2ada881) when
compiled against proj-5.0.0/proj-5.0.1

The dataset is a GeoTIFF with EPSG:25832, and I get

Corner Coordinates:
ERROR 1: illegal axis orientation combination
Upper Left  (  375000.000, 5631000.000)
ERROR 1: illegal axis orientation combination
Lower Left  (  375000.000, 5628000.000)
ERROR 1: illegal axis orientation combination
Upper Right (  379000.000, 5631000.000)
ERROR 1: illegal axis orientation combination
Lower Right (  379000.000, 5628000.000)
ERROR 1: illegal axis orientation combination
Center      (  377000.000, 5629500.000)
Segmentation fault (core dumped)

The error message is printed by GDAL and comes from PROJ. I think the
segfault is a symptom of the error, therefore I would like to find out the
reason of the error.

Using gdal-2.2+ with proj-4.9.3, all is fine.

Testing proj-5.0.1 with

cs2cs +proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m
+no_defs +to +proj=latlong +ellps=GRS80

proj -I +proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m
+no_defs

cct +proj=pipeline +step +inv +proj=utm +zone=32 +ellps=GRS80
+towgs84=0,0,0,0,0,0,0 +units=m +no_defs

all is fine, too.

Is this a bug in (the old API still available with) proj-5.0.x or a bug in
gdal-2.2+?
Any hints where and how to dig deeper?

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180415/144b051b/attachment.html>

From even.rouault at spatialys.com  Sun Apr 15 11:17:52 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 15 Apr 2018 20:17:52 +0200
Subject: [Proj] [gdal-dev] gdalinfo error and subsequent segfault with
	proj-5.0.x
In-Reply-To: <CAG+h=FHm=N==8vmrw7DoZtfLyiqOMtsHx_sjVgg=dTvCx0uH0w@mail.gmail.com>
References: <CAG+h=FHm=N==8vmrw7DoZtfLyiqOMtsHx_sjVgg=dTvCx0uH0w@mail.gmail.com>
Message-ID: <3114463.HBNhDuhaVP@even-i700>

Markus,

>From a quick test generating a GeoTIFF in EPSG:25832, I can't reproduce.

I suspect you may link at runtime against different proj versions. How did you 
build GDAL ? I'd strongly recommend you use --with-static-proj4 (whose name is 
a bit misleading since it can actually link against a libproj.so), and then 
check with "ldd libgdal.so" that you link against a single libproj.

Even

> I observed a segfault in gdalinfo (2.2.3, 2.2.4, 2.3.0dev-71e2ada881) when
> compiled against proj-5.0.0/proj-5.0.1
> 
> The dataset is a GeoTIFF with EPSG:25832, and I get
> 
> Corner Coordinates:
> ERROR 1: illegal axis orientation combination
> Upper Left  (  375000.000, 5631000.000)
> ERROR 1: illegal axis orientation combination
> Lower Left  (  375000.000, 5628000.000)
> ERROR 1: illegal axis orientation combination
> Upper Right (  379000.000, 5631000.000)
> ERROR 1: illegal axis orientation combination
> Lower Right (  379000.000, 5628000.000)
> ERROR 1: illegal axis orientation combination
> Center      (  377000.000, 5629500.000)
> Segmentation fault (core dumped)
> 
> The error message is printed by GDAL and comes from PROJ. I think the
> segfault is a symptom of the error, therefore I would like to find out the
> reason of the error.
> 
> Using gdal-2.2+ with proj-4.9.3, all is fine.
> 
> Testing proj-5.0.1 with
> 
> cs2cs +proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m
> +no_defs +to +proj=latlong +ellps=GRS80
> 
> proj -I +proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m
> +no_defs
> 
> cct +proj=pipeline +step +inv +proj=utm +zone=32 +ellps=GRS80
> +towgs84=0,0,0,0,0,0,0 +units=m +no_defs
> 
> all is fine, too.
> 
> Is this a bug in (the old API still available with) proj-5.0.x or a bug in
> gdal-2.2+?
> Any hints where and how to dig deeper?
> 
> Markus M


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From markus.metz.giswork at gmail.com  Sun Apr 15 13:01:24 2018
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Sun, 15 Apr 2018 22:01:24 +0200
Subject: [Proj] [gdal-dev] gdalinfo error and subsequent segfault with
	proj-5.0.x
In-Reply-To: <3114463.HBNhDuhaVP@even-i700>
References: <CAG+h=FHm=N==8vmrw7DoZtfLyiqOMtsHx_sjVgg=dTvCx0uH0w@mail.gmail.com>
	<3114463.HBNhDuhaVP@even-i700>
Message-ID: <CAG+h=FEh6xOwBRxZecwHjyNj-BcYjQX_+mH=Q9S3Ebr9K8KaaQ@mail.gmail.com>

Even,

On Sun, Apr 15, 2018 at 8:17 PM, Even Rouault <even.rouault at spatialys.com>
wrote:
>
> Markus,
>
> From a quick test generating a GeoTIFF in EPSG:25832, I can't reproduce.
>
> I suspect you may link at runtime against different proj versions.

You are right. I compiled GDAL with

libproj.so -> libproj.so.13.0.1
there is no other libproj.so on my system

but gdal links against libproj.so.12

> How did you
> build GDAL ? I'd strongly recommend you use --with-static-proj4 (whose
name is
> a bit misleading since it can actually link against a libproj.so), and
then
> check with "ldd libgdal.so" that you link against a single libproj.

OK, I recompiled gdal-2.2.4 --with-static-proj4 and got

ldd libgdal.so | grep proj
    libproj.so.13 => /usr/local/lib64/libproj.so.13 (0x00007fe2ff181000)
    libproj.so.12 => /lib64/libproj.so.12 (0x00007fe2f31c7000)
???

gdalinfo now runs fine and produces expected results.

I'm still concerned about the output of ldd libgdal.so

Markus M
>
> Even
>
> > I observed a segfault in gdalinfo (2.2.3, 2.2.4, 2.3.0dev-71e2ada881)
when
> > compiled against proj-5.0.0/proj-5.0.1
> >
> > The dataset is a GeoTIFF with EPSG:25832, and I get
> >
> > Corner Coordinates:
> > ERROR 1: illegal axis orientation combination
> > Upper Left  (  375000.000, 5631000.000)
> > ERROR 1: illegal axis orientation combination
> > Lower Left  (  375000.000, 5628000.000)
> > ERROR 1: illegal axis orientation combination
> > Upper Right (  379000.000, 5631000.000)
> > ERROR 1: illegal axis orientation combination
> > Lower Right (  379000.000, 5628000.000)
> > ERROR 1: illegal axis orientation combination
> > Center      (  377000.000, 5629500.000)
> > Segmentation fault (core dumped)
> >
> > The error message is printed by GDAL and comes from PROJ. I think the
> > segfault is a symptom of the error, therefore I would like to find out
the
> > reason of the error.
> >
> > Using gdal-2.2+ with proj-4.9.3, all is fine.
> >
> > Testing proj-5.0.1 with
> >
> > cs2cs +proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m
> > +no_defs +to +proj=latlong +ellps=GRS80
> >
> > proj -I +proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m
> > +no_defs
> >
> > cct +proj=pipeline +step +inv +proj=utm +zone=32 +ellps=GRS80
> > +towgs84=0,0,0,0,0,0,0 +units=m +no_defs
> >
> > all is fine, too.
> >
> > Is this a bug in (the old API still available with) proj-5.0.x or a bug
in
> > gdal-2.2+?
> > Any hints where and how to dig deeper?
> >
> > Markus M
>
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180415/af6d8df0/attachment.html>

From even.rouault at spatialys.com  Sun Apr 15 13:07:43 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 15 Apr 2018 22:07:43 +0200
Subject: [Proj] [gdal-dev] gdalinfo error and subsequent segfault with
	proj-5.0.x
In-Reply-To: <CAG+h=FEh6xOwBRxZecwHjyNj-BcYjQX_+mH=Q9S3Ebr9K8KaaQ@mail.gmail.com>
References: <CAG+h=FHm=N==8vmrw7DoZtfLyiqOMtsHx_sjVgg=dTvCx0uH0w@mail.gmail.com>
	<3114463.HBNhDuhaVP@even-i700>
	<CAG+h=FEh6xOwBRxZecwHjyNj-BcYjQX_+mH=Q9S3Ebr9K8KaaQ@mail.gmail.com>
Message-ID: <19077600.GVIadS52ua@even-i700>

> OK, I recompiled gdal-2.2.4 --with-static-proj4 and got
> 
> ldd libgdal.so | grep proj
>     libproj.so.13 => /usr/local/lib64/libproj.so.13 (0x00007fe2ff181000)
>     libproj.so.12 => /lib64/libproj.so.12 (0x00007fe2f31c7000)
> ???
> 
> gdalinfo now runs fine and produces expected results.
> 
> I'm still concerned about the output of ldd libgdal.so

Yes that's not sane. That means that GDAL links to a library that links to the 
system libproj (/lib64/libproj.so.12), whereas GDAL directly links to your 
custom libproj 5 build ( /usr/local/lib64/libproj.so.13) . That may crash as 
well.
As proj 5.0.1 is (I believe) ABI compatible with previous releases, one 
potential hack is to make
sudo ln -s /usr/local/lib64/libproj.so.13 /usr/local/lib64/libproj.so.12
and define LD_LIBRARY_PATH to point to /usr/local/lib64/
A cleaner solution would be to identify the GDAL dependenci(es) that link to  
/lib64/libproj.so.12 and rebuild them against the one in  /usr/local/lib64/
libproj.so.13

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From markus.metz.giswork at gmail.com  Sun Apr 15 14:05:42 2018
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Sun, 15 Apr 2018 23:05:42 +0200
Subject: [Proj] [gdal-dev] gdalinfo error and subsequent segfault with
	proj-5.0.x
In-Reply-To: <19077600.GVIadS52ua@even-i700>
References: <CAG+h=FHm=N==8vmrw7DoZtfLyiqOMtsHx_sjVgg=dTvCx0uH0w@mail.gmail.com>
	<3114463.HBNhDuhaVP@even-i700>
	<CAG+h=FEh6xOwBRxZecwHjyNj-BcYjQX_+mH=Q9S3Ebr9K8KaaQ@mail.gmail.com>
	<19077600.GVIadS52ua@even-i700>
Message-ID: <CAG+h=FEQ29a5aZtRnu_2N_g87X_QULsD8GnjaaxuWepwUpMngg@mail.gmail.com>

On Sun, Apr 15, 2018 at 10:07 PM, Even Rouault <even.rouault at spatialys.com>
wrote:
>
> > OK, I recompiled gdal-2.2.4 --with-static-proj4 and got
> >
> > ldd libgdal.so | grep proj
> >     libproj.so.13 => /usr/local/lib64/libproj.so.13 (0x00007fe2ff181000)
> >     libproj.so.12 => /lib64/libproj.so.12 (0x00007fe2f31c7000)
> > ???
> >
> > gdalinfo now runs fine and produces expected results.
> >
> > I'm still concerned about the output of ldd libgdal.so
>
> Yes that's not sane. That means that GDAL links to a library that links
to the
> system libproj (/lib64/libproj.so.12), whereas GDAL directly links to your
> custom libproj 5 build ( /usr/local/lib64/libproj.so.13) . That may crash
as
> well.
>
> As proj 5.0.1 is (I believe) ABI compatible with previous releases, one
> potential hack is to make
> sudo ln -s /usr/local/lib64/libproj.so.13 /usr/local/lib64/libproj.so.12
> and define LD_LIBRARY_PATH to point to /usr/local/lib64/
> A cleaner solution would be to identify the GDAL dependenci(es) that link
to
> /lib64/libproj.so.12 and rebuild them against the one in
 /usr/local/lib64/
> libproj.so.13

Not too many on my test system. So far, GDAL is working for me now with
PROJ-5.0.x. If I encounter any problems later on, I will heed your advice.

Thanks a lot for your help!

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180415/09a81f1a/attachment.html>

From support at mnspoint.com  Thu Apr 19 00:57:36 2018
From: support at mnspoint.com (support at mnspoint.com)
Date: Thu, 19 Apr 2018 10:57:36 +0300
Subject: [Proj] Proj4 Datum Grids
In-Reply-To: <fc7ea30c-e4c8-4356-9cce-738b3ee82bcf@lincolnagritech.co.nz>
References: <fc7ea30c-e4c8-4356-9cce-738b3ee82bcf@lincolnagritech.co.nz>
Message-ID: <aa33169278dc34d4a6bcc73c179a3ca3@mnspoint.com>

Hello, 

yes, that is exactly the idea in Proj .. if the datum is not Proj
predefined then you should use the towgs84 statement. You can either use
the "towgs84=.." statement or "datum=..." and the conversion mechanism
is the same, assuming that you use the same parameters in your towgs84
statement as in the library definition. You should also use the correct
ellipse always ... and preferably always define it. 

Here are the usual library predefinitions: 

Datum ID - Ellipse - Definition/comments 

WGS84 - WGS84 - towgs84=0,0,0
GGRS87 - GRS80 - towgs84=-199.87,74.79,246.62 / Greek Geodetic Ref Sys
1987
NAD83 - GRS80 - towgs84=0,0,0 / North American Datum 1983
NAD27 - clrk66 - nadgrids=@conus, at alaska, at ntv2_0.gsb, at ntv1_can.dat / NAD
1927
potsdam - bessel - towgs84=606.0,23.0,413.0 / Potsdam Rauenberg 1950
DHDN
carthage - clark80 - towgs84=-263.0,6.0,431.0 / Carthage 1934 Tunisia
hermannskogel - bessel - towgs84=653.0,-212.0,449.0 / Hermannskogel
ire65 - mod_airy -
towgs84=482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15 / Ireland
1965 

see also: 

https://en.wikipedia.org/wiki/Helmert_transformation 

regards: Janne. 

Dan Crosby kirjoitti 2018-03-20 00:15:

> Hi all, 
> 
> ....  
> 
> Am I correct in thinking that, provided the relevant ellipse is defined in Proj, I can perform any datum shift with the appropriate +towgs84 entry? 
> 
> Dan 
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180419/857aa978/attachment.html>

From martin.desruisseaux at geomatys.com  Thu Apr 19 01:15:15 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Thu, 19 Apr 2018 10:15:15 +0200
Subject: [Proj] Proj4 Datum Grids
In-Reply-To: <aa33169278dc34d4a6bcc73c179a3ca3@mnspoint.com>
References: <fc7ea30c-e4c8-4356-9cce-738b3ee82bcf@lincolnagritech.co.nz>
	<aa33169278dc34d4a6bcc73c179a3ca3@mnspoint.com>
Message-ID: <b181148f-88a4-7379-a1de-7caffdad9501@geomatys.com>

Hello

Le 19/04/2018 à 09:57, support at mnspoint.com a écrit :

> yes, that is exactly the idea in Proj .. if the datum is not Proj
> predefined then you should use the towgs84 statement.
>
Indeed, but just to nuance, the Helmert transformation (as done by the
+towgs84 parameters) is still an approximation not equivalent to using
datum shift grids. Furthermore the question was if one "can perform any
datum shift with the appropriate +towgs84 entry", which is not always
true. In some cases (e.g. from Martinique 1938 to RGAF09), the
transformation needs to be expressed relative to another datum than WGS
84. This is the reason why TOWGS84 has been removed in WKT 2 [1] (a.k.a
ISO 19162) and replaced by a new construct - BOUNDCRS [2] - which allows
to specify the datum in addition of resolving other ambiguities (e.g.
the sign of rotation parameters).

    Martin

[1] http://docs.opengeospatial.org/is/12-063r5/12-063r5.html#144
[2] http://docs.opengeospatial.org/is/12-063r5/12-063r5.html#125



From schwehr at gmail.com  Sat Apr 21 15:46:22 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sat, 21 Apr 2018 15:46:22 -0700
Subject: [Proj] Code style in Proj
Message-ID: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>

Hi all,

I've been thinking about what is possible with the Proj code base with an
assumption that the code must be C89/C90 compatible.  I played around for a
few in godbolt with PJ_august.c (because it's small) and ended up with
this.  I tried to be aggressive as I could.  I think my modified version is
likely to be more static analyzer friendly.  What do you all think?   For
each of the change, is it better or worse for Proj as a whole?  My brain is
set to C++14/17, so I have a hard time evaluating this in context of what's
best for Proj in the long run.

Original: https://godbolt.org/g/ci5Wfo
Modified: https://godbolt.org/g/mz6NjD

Things I did:
- Combine definition and declaration
- Add const
- For double literals, have at least one digit before and after decimal
point.  e.g. .1 -> 0.1 and 3. -> 3.0
- Don't have assignments hidden inside expressions
- Convert #defines to typed const values
- IWYU - Include what you use... here math.h

Cheers,
-kurt

#include <math.h>

typedef struct { double x, y; }        XY;
typedef struct { double lam, phi; }    LP;
typedef struct PJconsts PJ;
XY s_forward (LP lp, PJ *P) {           /* Spheroidal, forward */
(void) P;
const double t = tan(0.5 * lp.phi);
const double c1 = sqrt(1.0 - t * t);
const double c = 1.0 + c1 * cos(lp.lam *= .5);
const double x1 = sin(lp.lam) *  c1 / c;
const double y1 =  t / c;
        const double x12 = x1 * x1;
        const double y12 = y1 *  y1;
        const double M = 1.333333333333333;
        const XY xy = {
            M * x1 * (3.0 + x12 - 3.0 * y12),
            M * y1 * (3.0 + 3.0 * x12 - y12)};
return xy;
}

Screenshot: https://www.flickr.com/photos/schwehr/39802222790
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180421/e697f619/attachment.html>

From even.rouault at spatialys.com  Sun Apr 22 05:26:51 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 22 Apr 2018 14:26:51 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
Message-ID: <11405934.B23bO5Xg3P@even-i700>

On samedi 21 avril 2018 15:46:22 CEST Kurt Schwehr wrote:
> Hi all,
> 
> I've been thinking about what is possible with the Proj code base with an
> assumption that the code must be C89/C90 compatible.  I played around for a
> few in godbolt with PJ_august.c (because it's small) and ended up with
> this.  I tried to be aggressive as I could.  I think my modified version is
> likely to be more static analyzer friendly. 

I hope they are intelligent enough to make sense of the original code ;-)

> - Don't have assignments hidden inside expressions

Definitely +1 on this ! 

To avoid the modification of lp.lam in the cos(), 

> const double c = 1.0 + c1 * cos(lp.lam *= .5);
> const double x1 = sin(lp.lam) *  c1 / c;

this part could also be re-written, as

const double half_lam = 0.5 * lp.lam;
const double c = 1.0 + c1 * cos(half_lam);
const double x1 = sin(half_lam) *  c1 / c;



-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180422/5dc21a6c/attachment.html>

From schwehr at gmail.com  Sun Apr 22 06:08:43 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 22 Apr 2018 06:08:43 -0700
Subject: [Proj] Code style in Proj
In-Reply-To: <11405934.B23bO5Xg3P@even-i700>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
Message-ID: <CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>

Totally missed that lp.lam assignment!  Next iteration... also tried to add
a const to the lp arg.

https://godbolt.org/g/b4FUf7

And as for the static analize, try to imagine that this is being done on a
much more complicated function, because, yes, if a static analyzer didn't
get this function, it's pretty much useless.

On Sun, Apr 22, 2018 at 5:26 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> On samedi 21 avril 2018 15:46:22 CEST Kurt Schwehr wrote:
>
> > Hi all,
>
> >
>
> > I've been thinking about what is possible with the Proj code base with an
>
> > assumption that the code must be C89/C90 compatible. I played around for
> a
>
> > few in godbolt with PJ_august.c (because it's small) and ended up with
>
> > this. I tried to be aggressive as I could. I think my modified version is
>
> > likely to be more static analyzer friendly.
>
>
>
> I hope they are intelligent enough to make sense of the original code ;-)
>
>
>
> > - Don't have assignments hidden inside expressions
>
>
>
> Definitely +1 on this !
>
>
>
> To avoid the modification of lp.lam in the cos(),
>
>
>
> > const double c = 1.0 + c1 * cos(lp.lam *= .5);
>
> > const double x1 = sin(lp.lam) * c1 / c;
>
>
>
> this part could also be re-written, as
>
>
>
> const double half_lam = 0.5 * lp.lam;
>
> const double c = 1.0 + c1 * cos(half_lam);
>
> const double x1 = sin(half_lam) * c1 / c;
>
>
>
>
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180422/bd7843bb/attachment.html>

From kreve at sdfe.dk  Sun Apr 22 08:10:23 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 22 Apr 2018 15:10:23 +0000
Subject: [Proj] Code style in Proj
In-Reply-To: <CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
Message-ID: <91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>

Hi Kurt,

You are brave to start a code style discussion :-) A few comments on your “rules”:

- Combine definition and declaration

It works in this example but I don’t think it can be enforced in more complicated code.
Variable declarations have to be made at the start of a block and that is not always possible.

- Add const

I don’t have a strong opinion on this one, although in this example I mostly think the “const double”
is cluttering up the code. What is gained by adding const here?

- For double literals, have at least one digit before and after decimal point.  e.g. .1 -> 0.1 and 3. -> 3.0

+1.

- Don't have assignments hidden inside expressions

Big +1!

- Convert #defines to typed const values

Would this be better as “static const …”?

- IWYU - Include what you use... here math.h

Another +1 here.


Finally, I get an error when compiling your code:

/Users/kevers/dev/proj4/src/PJ_august.c:25:16: error: initializer for aggregate is not a compile-time
      constant [-Werror,-Wc99-extensions]
        M * x1 * (3.0 + x12 - 3.0 * y12),
        ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.

So for that you would have to assign xy.x and xy.y individually. Or possible make use of the proj_coord()
PJ_COORD initialiser function.

It would be interesting to see a more complicated function get the same treatment. 

/Kristian


> On 22 Apr 2018, at 15:08, Kurt Schwehr <schwehr at gmail.com> wrote:
> 
> Totally missed that lp.lam assignment!  Next iteration... also tried to add a const to the lp arg.
> 
> https://godbolt.org/g/b4FUf7
> 
> And as for the static analize, try to imagine that this is being done on a much more complicated function, because, yes, if a static analyzer didn't get this function, it's pretty much useless.
> 
> On Sun, Apr 22, 2018 at 5:26 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> On samedi 21 avril 2018 15:46:22 CEST Kurt Schwehr wrote:
> > Hi all,
> >
> > I've been thinking about what is possible with the Proj code base with an
> > assumption that the code must be C89/C90 compatible. I played around for a
> > few in godbolt with PJ_august.c (because it's small) and ended up with
> > this. I tried to be aggressive as I could. I think my modified version is
> > likely to be more static analyzer friendly.
>  
> I hope they are intelligent enough to make sense of the original code ;-)
>  
> > - Don't have assignments hidden inside expressions
>  
> Definitely +1 on this !
>  
> To avoid the modification of lp.lam in the cos(),
>  
> > const double c = 1.0 + c1 * cos(lp.lam *= .5);
> > const double x1 = sin(lp.lam) * c1 / c;
>  
> this part could also be re-written, as
>  
> const double half_lam = 0.5 * lp.lam;
> const double c = 1.0 + c1 * cos(half_lam);
> const double x1 = sin(half_lam) * c1 / c;
>  
>  
>  
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> 
> 
> 
> -- 
> --
> http://schwehr.org
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From schwehr at gmail.com  Sun Apr 22 11:07:17 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 22 Apr 2018 11:07:17 -0700
Subject: [Proj] Code style in Proj
In-Reply-To: <91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
Message-ID: <CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>

Kristian,

Things to do when you are about to have a kid and want a distraction :)

I wonder what would be a good/interesting larger case to play with?
Preferably one with good test coverage...

ls -lSr PJ*.c | tail -15
-rw-r--r--  1 schwehr  eng   7654 Mar 20 10:49 PJ_omerc.c
-rw-r--r--  1 schwehr  eng   7659 Mar 21 07:51 PJ_cart.c
-rw-r--r--  1 schwehr  eng   7801 Mar 20 10:49 PJ_sch.c
-rw-r--r--  1 schwehr  eng   8444 Mar 20 10:49 PJ_stere.c
-rw-r--r--  1 schwehr  eng   8598 Mar 20 10:49 PJ_molodensky.c
-rw-r--r--  1 schwehr  eng   8685 Mar 29 12:41 PJ_axisswap.c
-rw-r--r--  1 schwehr  eng   9420 Mar 20 10:49 PJ_aeqd.c
-rw-r--r--  1 schwehr  eng   9907 Mar 20 10:49 PJ_deformation.c
-rw-r--r--  1 schwehr  eng  13068 Mar  6 12:50 PJ_qsc.c
-rw-r--r--  1 schwehr  eng  17186 Mar 20 10:49 PJ_unitconvert.c
-rw-r--r--  1 schwehr  eng  17405 Mar 29 12:41 PJ_pipeline.c
-rw-r--r--  1 schwehr  eng  17561 Mar 29 12:41 PJ_horner.c
-rw-r--r--  1 schwehr  eng  20639 Feb  6 08:46 PJ_helmert.c
-rw-r--r--  1 schwehr  eng  21130 Mar 20 10:49 PJ_healpix.c
-rw-r--r--  1 schwehr  eng  27407 Mar 20 10:49 PJ_isea.c

Would love to see what others come up with.

On Sun, Apr 22, 2018 at 8:10 AM, Kristian Evers <kreve at sdfe.dk> wrote:

> Hi Kurt,
>
> You are brave to start a code style discussion :-) A few comments on your
> “rules”:
>

Hah!  Far from rules.  I'm trying figure out what is even legal / works.


>
> - Combine definition and declaration
>
> It works in this example but I don’t think it can be enforced in more
> complicated code.
> Variable declarations have to be made at the start of a block and that is
> not always possible.
>
>
Agreed.  Not always possible or always a good thing.  And a style question
is do you allow variables to be defined in sub scopes?  In C++, the answer
is usually to keep things as tight/narrow as possible.  In Proj, Idonno.



> - Add const
>
> I don’t have a strong opinion on this one, although in this example I
> mostly think the “const double”
> is cluttering up the code. What is gained by adding const here?
>

Here there isn't much value, but if you come into this function cold, you
know immediately that there aren't sneaky things going on.


>
> - For double literals, have at least one digit before and after decimal
> point.  e.g. .1 -> 0.1 and 3. -> 3.0
>
> +1.
>
> - Don't have assignments hidden inside expressions
>
> Big +1!
>
> - Convert #defines to typed const values
>
> Would this be better as “static const …”?
>

In C++, I would just use constexpr.  In C, I'm guessing that for -O2 and
higher, it won't change anything.  Leaving off the static might let the
compiler be more aggressive.  But this is why using godbolt is pretty
awesome.  You can try it and see if there is any difference and, if so,
which way is more efficient.  A micro benchmark might be useful too.


>
> - IWYU - Include what you use... here math.h
>
> Another +1 here.
>
>
> Finally, I get an error when compiling your code:
>
> /Users/kevers/dev/proj4/src/PJ_august.c:25:16: error: initializer for
> aggregate is not a compile-time
>       constant [-Werror,-Wc99-extensions]
>         M * x1 * (3.0 + x12 - 3.0 * y12),
>         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
> 1 error generated.
>
>
Can you reproduce that failure in godbolt, or as least, what
compiler/version/settings are you talking about?


> So for that you would have to assign xy.x and xy.y individually. Or
> possible make use of the proj_coord()
> PJ_COORD initialiser function.
>
> It would be interesting to see a more complicated function get the same
> treatment.
>
> /Kristian
>
>
> > On 22 Apr 2018, at 15:08, Kurt Schwehr <schwehr at gmail.com> wrote:
> >
> > Totally missed that lp.lam assignment!  Next iteration... also tried to
> add a const to the lp arg.
> >
> > https://godbolt.org/g/b4FUf7
> >
> > And as for the static analize, try to imagine that this is being done on
> a much more complicated function, because, yes, if a static analyzer didn't
> get this function, it's pretty much useless.
> >
> > On Sun, Apr 22, 2018 at 5:26 AM, Even Rouault <
> even.rouault at spatialys.com> wrote:
> > On samedi 21 avril 2018 15:46:22 CEST Kurt Schwehr wrote:
> > > Hi all,
> > >
> > > I've been thinking about what is possible with the Proj code base with
> an
> > > assumption that the code must be C89/C90 compatible. I played around
> for a
> > > few in godbolt with PJ_august.c (because it's small) and ended up with
> > > this. I tried to be aggressive as I could. I think my modified version
> is
> > > likely to be more static analyzer friendly.
> >
> > I hope they are intelligent enough to make sense of the original code ;-)
> >
> > > - Don't have assignments hidden inside expressions
> >
> > Definitely +1 on this !
> >
> > To avoid the modification of lp.lam in the cos(),
> >
> > > const double c = 1.0 + c1 * cos(lp.lam *= .5);
> > > const double x1 = sin(lp.lam) * c1 / c;
> >
> > this part could also be re-written, as
> >
> > const double half_lam = 0.5 * lp.lam;
> > const double c = 1.0 + c1 * cos(half_lam);
> > const double x1 = sin(half_lam) * c1 / c;
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180422/ee2c8aa0/attachment.html>

From kristianevers at gmail.com  Sun Apr 22 11:42:26 2018
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 22 Apr 2018 20:42:26 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
Message-ID: <660B2706-D685-48C2-AAD7-E499445A1B69@gmail.com>



> On 22 Apr 2018, at 20:07, Kurt Schwehr <schwehr at gmail.com> wrote:
> 
> Kristian,
> 
> Things to do when you are about to have a kid and want a distraction :)

Congratulations!

> I wonder what would be a good/interesting larger case to play with?  Preferably one with good test coverage…

PJ_aeqd.c! There’s a bit more going on and It’s got 97.67% test coverage: 

https://coveralls.io/builds/16617275/source?filename=src%2FPJ_aeqd.c <https://coveralls.io/builds/16617275/source?filename=src/PJ_aeqd.c>
> 
> ls -lSr PJ*.c | tail -15
> -rw-r--r--  1 schwehr  eng   7654 Mar 20 10:49 PJ_omerc.c
> -rw-r--r--  1 schwehr  eng   7659 Mar 21 07:51 PJ_cart.c
> -rw-r--r--  1 schwehr  eng   7801 Mar 20 10:49 PJ_sch.c
> -rw-r--r--  1 schwehr  eng   8444 Mar 20 10:49 PJ_stere.c
> -rw-r--r--  1 schwehr  eng   8598 Mar 20 10:49 PJ_molodensky.c
> -rw-r--r--  1 schwehr  eng   8685 Mar 29 12:41 PJ_axisswap.c
> -rw-r--r--  1 schwehr  eng   9420 Mar 20 10:49 PJ_aeqd.c
> -rw-r--r--  1 schwehr  eng   9907 Mar 20 10:49 PJ_deformation.c
> -rw-r--r--  1 schwehr  eng  13068 Mar  6 12:50 PJ_qsc.c
> -rw-r--r--  1 schwehr  eng  17186 Mar 20 10:49 PJ_unitconvert.c
> -rw-r--r--  1 schwehr  eng  17405 Mar 29 12:41 PJ_pipeline.c
> -rw-r--r--  1 schwehr  eng  17561 Mar 29 12:41 PJ_horner.c
> -rw-r--r--  1 schwehr  eng  20639 Feb  6 08:46 PJ_helmert.c
> -rw-r--r--  1 schwehr  eng  21130 Mar 20 10:49 PJ_healpix.c
> -rw-r--r--  1 schwehr  eng  27407 Mar 20 10:49 PJ_isea.c
> 
> Would love to see what others come up with.
> 
> On Sun, Apr 22, 2018 at 8:10 AM, Kristian Evers <kreve at sdfe.dk <mailto:kreve at sdfe.dk>> wrote:
> Hi Kurt,
> 
> You are brave to start a code style discussion :-) A few comments on your “rules”:
> 
> Hah!  Far from rules.  I'm trying figure out what is even legal / works.
>  
> 
> - Combine definition and declaration
> 
> It works in this example but I don’t think it can be enforced in more complicated code.
> Variable declarations have to be made at the start of a block and that is not always possible.
> 
> 
> Agreed.  Not always possible or always a good thing.  And a style question is do you allow variables to be defined in sub scopes?  In C++, the answer is usually to keep things as tight/narrow as possible.  In Proj, Idonno.
> 

At least it is done throughout the code base but definitely not consistently. I think it is fine to do so.

>  
> - Add const
> 
> I don’t have a strong opinion on this one, although in this example I mostly think the “const double”
> is cluttering up the code. What is gained by adding const here?
> 
> Here there isn't much value, but if you come into this function cold, you know immediately that there aren't sneaky things going on.
>  
> 
> - For double literals, have at least one digit before and after decimal point.  e.g. .1 -> 0.1 and 3. -> 3.0
> 
> +1.
> 
> - Don't have assignments hidden inside expressions
> 
> Big +1!
> 
> - Convert #defines to typed const values
> 
> Would this be better as “static const …”?
> 
> In C++, I would just use constexpr.  In C, I'm guessing that for -O2 and higher, it won't change anything.  Leaving off the static might let the compiler be more aggressive.  But this is why using godbolt is pretty awesome.  You can try it and see if there is any difference and, if so, which way is more efficient.  A micro benchmark might be useful too.
>  

I can’t see a difference between using static and not. The assembler code is mostly gibberish to me though so I might have missed something.
Using the static keyword is probably not necessary then.

> 
> - IWYU - Include what you use... here math.h
> 
> Another +1 here.
> 
> 
> Finally, I get an error when compiling your code:
> 
> /Users/kevers/dev/proj4/src/PJ_august.c:25:16: error: initializer for aggregate is not a compile-time
>       constant [-Werror,-Wc99-extensions]
>         M * x1 * (3.0 + x12 - 3.0 * y12),
>         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
> 1 error generated.
> 
> 
> Can you reproduce that failure in godbolt, or as least, what compiler/version/settings are you talking about?
>  

This is how I set up my builds:

$ CFLAGS="-std=c89 -g -Wall -Wextra -Werror -Wunused-parameter -Wmissing-prototypes -Wmissing-declarations -Wformat -Werror=format-security -Wshadow -Wfloat-conversion -O2" cmake ../../proj4/
-- The C compiler identification is AppleClang 9.1.0.9020039
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
…

Basically the same as what is done in the OSX Travis setup. 

> So for that you would have to assign xy.x and xy.y individually. Or possible make use of the proj_coord()
> PJ_COORD initialiser function.
> 
> It would be interesting to see a more complicated function get the same treatment. 
> 
> /Kristian
> 
> 
> > On 22 Apr 2018, at 15:08, Kurt Schwehr <schwehr at gmail.com <mailto:schwehr at gmail.com>> wrote:
> > 
> > Totally missed that lp.lam assignment!  Next iteration... also tried to add a const to the lp arg.
> > 
> > https://godbolt.org/g/b4FUf7 <https://godbolt.org/g/b4FUf7>
> > 
> > And as for the static analize, try to imagine that this is being done on a much more complicated function, because, yes, if a static analyzer didn't get this function, it's pretty much useless.
> > 
> > On Sun, Apr 22, 2018 at 5:26 AM, Even Rouault <even.rouault at spatialys.com <mailto:even.rouault at spatialys.com>> wrote:
> > On samedi 21 avril 2018 15:46:22 CEST Kurt Schwehr wrote:
> > > Hi all,
> > >
> > > I've been thinking about what is possible with the Proj code base with an
> > > assumption that the code must be C89/C90 compatible. I played around for a
> > > few in godbolt with PJ_august.c (because it's small) and ended up with
> > > this. I tried to be aggressive as I could. I think my modified version is
> > > likely to be more static analyzer friendly.
> >  
> > I hope they are intelligent enough to make sense of the original code ;-)
> >  
> > > - Don't have assignments hidden inside expressions
> >  
> > Definitely +1 on this !
> >  
> > To avoid the modification of lp.lam in the cos(),
> >  
> > > const double c = 1.0 + c1 * cos(lp.lam *= .5);
> > > const double x1 = sin(lp.lam) * c1 / c;
> >  
> > this part could also be re-written, as
> >  
> > const double half_lam = 0.5 * lp.lam;
> > const double c = 1.0 + c1 * cos(half_lam);
> > const double x1 = sin(half_lam) * c1 / c;
> >  
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180422/b8cc4c1a/attachment.html>

From mateusz at loskot.net  Sun Apr 22 15:17:00 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 23 Apr 2018 00:17:00 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
Message-ID: <CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>

On 22 April 2018 at 20:07, Kurt Schwehr <schwehr at gmail.com> wrote:
> Kristian,
>
> Things to do when you are about to have a kid and want a distraction :)

Congratulations! I still remember that distraction pursuit myself ;-)

> On Sun, Apr 22, 2018 at 8:10 AM, Kristian Evers <kreve at sdfe.dk> wrote:
>>
>> - Combine definition and declaration
>>
>> It works in this example but I don’t think it can be enforced in more
>> complicated code.
>> Variable declarations have to be made at the start of a block and that is
>> not always possible.
>>
>
> Agreed.  Not always possible or always a good thing.  And a style question
> is do you allow variables to be defined in sub scopes?  In C++, the answer
> is usually to keep things as tight/narrow as possible.

In C too, but since C99.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From winash12 at gmail.com  Mon Apr 23 02:37:02 2018
From: winash12 at gmail.com (ashwin .D)
Date: Mon, 23 Apr 2018 15:07:02 +0530
Subject: [Proj] PyProj API question
Message-ID: <CAH0LXy50fck2bhWtM82sTQShuPhfA=e758U3hN1afaBydK_FuQ@mail.gmail.com>

Hello,
             I am not sure whether this is the right mailing list for this
question and please let me know if this question if off topic. I am using
PyProj and I am trying to find the equivalent of the MATLAB API call reckon
- https://in.mathworks.com/help/map/ref/reckon.html. I have this API Geod -
https://jswhit.github.io/pyproj/pyproj.Geod-class.html and I can get the
forward and backward azimuth using inv() but I also have to supply a range
which is the arc length to get the point at specified azimuth given a
initial point. Unless I am missing something obvious can somebody give me a
clue on this one ?

In fwd() is the distance the arc length ?

Best regards,
Ashwin.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180423/cebf7fff/attachment.html>

From charles at karney.com  Mon Apr 23 03:27:57 2018
From: charles at karney.com (Charles Karney)
Date: Mon, 23 Apr 2018 06:27:57 -0400
Subject: [Proj] PyProj API question
In-Reply-To: <CAH0LXy50fck2bhWtM82sTQShuPhfA=e758U3hN1afaBydK_FuQ@mail.gmail.com>
References: <CAH0LXy50fck2bhWtM82sTQShuPhfA=e758U3hN1afaBydK_FuQ@mail.gmail.com>
Message-ID: <3b0429f6-e113-d754-0c1f-79cf8a1019a2@karney.com>

The documentation says that the distance is in meters.  If you
initialize the Geod object with

   g = Geod(a = 180/math.pi, f = 0)

then you'll be treating a sphere with circumference 360, so you
can then think of the distance as being arc length (in degrees).

On 04/23/2018 05:37 AM, ashwin .D wrote:
> Hello,
>               I am not sure whether this is the right mailing list for 
> this question and please let me know if this question if off topic. I am 
> using PyProj and I am trying to find the equivalent of the MATLAB API 
> call reckon - https://in.mathworks.com/help/map/ref/reckon.html. I have 
> this API Geod - https://jswhit.github.io/pyproj/pyproj.Geod-class.html 
> and I can get the forward and backward azimuth using inv() but I also 
> have to supply a range which is the arc length to get the point at 
> specified azimuth given a initial point. Unless I am missing something 
> obvious can somebody give me a clue on this one ?
> 
> In fwd() is the distance the arc length ?
> 
> Best regards,
> Ashwin.
> 
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From winash12 at gmail.com  Mon Apr 23 06:13:41 2018
From: winash12 at gmail.com (ashwin .D)
Date: Mon, 23 Apr 2018 18:43:41 +0530
Subject: [Proj] PyProj API question
In-Reply-To: <3b0429f6-e113-d754-0c1f-79cf8a1019a2@karney.com>
References: <CAH0LXy50fck2bhWtM82sTQShuPhfA=e758U3hN1afaBydK_FuQ@mail.gmail.com>
	<3b0429f6-e113-d754-0c1f-79cf8a1019a2@karney.com>
Message-ID: <CAH0LXy7qOV2ahi-8sW9LR9JZDvpNGVks-vVNHKp8zHvdcsAcng@mail.gmail.com>

Thanks.I presume I can use the same for ellipsoid ?



On Mon, Apr 23, 2018 at 3:57 PM, Charles Karney <charles at karney.com> wrote:

> The documentation says that the distance is in meters.  If you
> initialize the Geod object with
>
>   g = Geod(a = 180/math.pi, f = 0)
>
> then you'll be treating a sphere with circumference 360, so you
> can then think of the distance as being arc length (in degrees).
>
>
> On 04/23/2018 05:37 AM, ashwin .D wrote:
>
>> Hello,
>>               I am not sure whether this is the right mailing list for
>> this question and please let me know if this question if off topic. I am
>> using PyProj and I am trying to find the equivalent of the MATLAB API call
>> reckon - https://in.mathworks.com/help/map/ref/reckon.html. I have this
>> API Geod - https://jswhit.github.io/pyproj/pyproj.Geod-class.html and I
>> can get the forward and backward azimuth using inv() but I also have to
>> supply a range which is the arc length to get the point at specified
>> azimuth given a initial point. Unless I am missing something obvious can
>> somebody give me a clue on this one ?
>>
>> In fwd() is the distance the arc length ?
>>
>> Best regards,
>> Ashwin.
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180423/cf0893a7/attachment.html>

From even.rouault at spatialys.com  Mon Apr 23 13:52:17 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 23 Apr 2018 22:52:17 +0200
Subject: [Proj] Arbitrary precision floating point library
Message-ID: <23850389.ZWF7qsliYW@even-i700>

Hi,

In case we'd need angström accuracy someday, I just came accross
https://bellard.org/libbf/  
" LibBF is a small library to handle arbitrary precision floating point numbers. Its 
compiled size is about 60 KB of x86 code and has no dependency on other 
libraries. [...] Easy to embed (a few C files need to be copied). [...] MIT license."

I didn't try it, but the credibility of its author, Fabrice Bellard, is enormous : 
https://en.wikipedia.org/wiki/Fabrice_Bellard

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180423/d8689afe/attachment.html>

From charles.karney at sri.com  Mon Apr 23 14:08:53 2018
From: charles.karney at sri.com (Charles Karney)
Date: Mon, 23 Apr 2018 17:08:53 -0400
Subject: [Proj] Arbitrary precision floating point library
In-Reply-To: <23850389.ZWF7qsliYW@even-i700>
References: <23850389.ZWF7qsliYW@even-i700>
Message-ID: <b8bafe91-9463-8400-daed-53b6b5aab153@sri.com>

On Linux computers you can get angstrom accuracy with long doubles (with
a 64-bit fraction).  Programming carefully, you can get 20 nanometer
accuracy with doubles.

The big challenge is tracking down all those places where unacceptable
round-off errors have crept in.  Here having access to a high precision
library is invaluable.  In the C++ world, this is made easy because all
the mathematical operators and functions can be overloaded to invoke the
high precision routines, so minimal changes to your source code are
necessary.  I use boost's quadmath and MFPR when testing GeographicLib.
See

   https://geographiclib.sourceforge.io/html/highprec.html

On 04/23/18 16:52, Even Rouault wrote:
> Hi,
> 
> In case we'd need angström accuracy someday, I just came accross
> 
> https://bellard.org/libbf/
> 
> " LibBF is a small library to handle arbitrary precision floating point 
> numbers. Its compiled size is about 60 KB of x86 code and has no 
> dependency on other libraries. [...] Easy to embed (a few C files need 
> to be copied). [...] MIT license."
> 
> I didn't try it, but the credibility of its author, Fabrice Bellard, is 
> enormous : https://en.wikipedia.org/wiki/Fabrice_Bellard
> 
> Even
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

-- 
Charles Karney <charles at karney.com>
702 Prospect Ave, Princeton, NJ 08540-4037

Tel: +1 609 497 4662 (H)
      +1 609 734 2312 (W)


From knudsen.thomas at gmail.com  Tue Apr 24 02:45:33 2018
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 24 Apr 2018 11:45:33 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
Message-ID: <CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>

> In C too, but since C99.

AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.

while (...) {
    int i = 123, j = 345;
    k = i + j;
}

has been correct (and imho, preferable) syntax since K&R C

/Thomas


2018-04-23 0:17 GMT+02:00 Mateusz Loskot <mateusz at loskot.net>:

> On 22 April 2018 at 20:07, Kurt Schwehr <schwehr at gmail.com> wrote:
> > Kristian,
> >
> > Things to do when you are about to have a kid and want a distraction :)
>
> Congratulations! I still remember that distraction pursuit myself ;-)
>
> > On Sun, Apr 22, 2018 at 8:10 AM, Kristian Evers <kreve at sdfe.dk> wrote:
> >>
> >> - Combine definition and declaration
> >>
> >> It works in this example but I don’t think it can be enforced in more
> >> complicated code.
> >> Variable declarations have to be made at the start of a block and that
> is
> >> not always possible.
> >>
> >
> > Agreed.  Not always possible or always a good thing.  And a style
> question
> > is do you allow variables to be defined in sub scopes?  In C++, the
> answer
> > is usually to keep things as tight/narrow as possible.
>
> In C too, but since C99.
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180424/f3d1de75/attachment.html>

From mateusz at loskot.net  Tue Apr 24 03:05:53 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 24 Apr 2018 12:05:53 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
Message-ID: <CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>

On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
>> In C too, but since C99.
>
> AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.
>
> while (...) {
>     int i = 123, j = 345;
>     k = i + j;
> }
>
> has been correct (and imho, preferable) syntax since K&R C

AFAIK, it's about compound statement.
C89 requires declaration at the top of blocks, while C99 lifts that:

$ cat test.c
int main()
{
    int i = 0;
    while (i < 10)
    {
        int j = 345;
        i = i + j;
    }

    {
        int z = 0;
        z = 1;
    }
    int x = 1;
}

$ gcc -std=c89 -pedantic test.c
test.c: In function ‘main’:
test.c:14:5: warning: ISO C90 forbids mixed declarations and code
[-Wdeclaration-after-statement]
     int x = 1;
     ^~~

$ gcc -std=c99 -pedantic test.c
$


Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From knudsen.thomas at gmail.com  Tue Apr 24 04:37:44 2018
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 24 Apr 2018 13:37:44 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
Message-ID: <CAH0YoEPbWJVkTuZVYxMYZenHgQZqnieqboFzDONyNEJqGV=_iA@mail.gmail.com>

Yes, exactly... declarations must be at top of scope in C, while C++ (seen
from a C perspective) inserts an implied do { ... } while (0); around the
actual scope of stray declarations. Thanks for clarifying that: My brain is
so C style hardwired that I didn't consider the case of declaring things
anywhere else than at top of scope.


2018-04-24 12:05 GMT+02:00 Mateusz Loskot <mateusz at loskot.net>:

> On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
> >> In C too, but since C99.
> >
> > AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.
> >
> > while (...) {
> >     int i = 123, j = 345;
> >     k = i + j;
> > }
> >
> > has been correct (and imho, preferable) syntax since K&R C
>
> AFAIK, it's about compound statement.
> C89 requires declaration at the top of blocks, while C99 lifts that:
>
> $ cat test.c
> int main()
> {
>     int i = 0;
>     while (i < 10)
>     {
>         int j = 345;
>         i = i + j;
>     }
>
>     {
>         int z = 0;
>         z = 1;
>     }
>     int x = 1;
> }
>
> $ gcc -std=c89 -pedantic test.c
> test.c: In function ‘main’:
> test.c:14:5: warning: ISO C90 forbids mixed declarations and code
> [-Wdeclaration-after-statement]
>      int x = 1;
>      ^~~
>
> $ gcc -std=c99 -pedantic test.c
> $
>
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180424/91030e6b/attachment.html>

From schwehr at gmail.com  Mon Apr 30 02:51:32 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 30 Apr 2018 02:51:32 -0700
Subject: [Proj] Code style in Proj
In-Reply-To: <660B2706-D685-48C2-AAD7-E499445A1B69@gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<660B2706-D685-48C2-AAD7-E499445A1B69@gmail.com>
Message-ID: <CACmBxytG6pR4yiFMQXUHCs7KGLfxOESX+PjOu8S3S5u=j0bTOQ@mail.gmail.com>

Here is an incomplete take on PJ_aeqd.c:

https://gist.github.com/schwehr/2a1389d8d5b711ff9796530887247d2d

On Sun, Apr 22, 2018 at 11:42 AM, Kristian Evers <kristianevers at gmail.com>
wrote:

>
>
> On 22 Apr 2018, at 20:07, Kurt Schwehr <schwehr at gmail.com> wrote:
>
> Kristian,
>
> Things to do when you are about to have a kid and want a distraction :)
>
>
> Congratulations!
>
> I wonder what would be a good/interesting larger case to play with?
> Preferably one with good test coverage…
>
>
> PJ_aeqd.c! There’s a bit more going on and It’s got 97.67% test coverage:
>
> https://coveralls.io/builds/16617275/source?filename=src%2FPJ_aeqd.c
> <https://coveralls.io/builds/16617275/source?filename=src/PJ_aeqd.c>
>
>
> ls -lSr PJ*.c | tail -15
> -rw-r--r--  1 schwehr  eng   7654 Mar 20 10:49 PJ_omerc.c
> -rw-r--r--  1 schwehr  eng   7659 Mar 21 07:51 PJ_cart.c
> -rw-r--r--  1 schwehr  eng   7801 Mar 20 10:49 PJ_sch.c
> -rw-r--r--  1 schwehr  eng   8444 Mar 20 10:49 PJ_stere.c
> -rw-r--r--  1 schwehr  eng   8598 Mar 20 10:49 PJ_molodensky.c
> -rw-r--r--  1 schwehr  eng   8685 Mar 29 12:41 PJ_axisswap.c
> -rw-r--r--  1 schwehr  eng   9420 Mar 20 10:49 PJ_aeqd.c
> -rw-r--r--  1 schwehr  eng   9907 Mar 20 10:49 PJ_deformation.c
> -rw-r--r--  1 schwehr  eng  13068 Mar  6 12:50 PJ_qsc.c
> -rw-r--r--  1 schwehr  eng  17186 Mar 20 10:49 PJ_unitconvert.c
> -rw-r--r--  1 schwehr  eng  17405 Mar 29 12:41 PJ_pipeline.c
> -rw-r--r--  1 schwehr  eng  17561 Mar 29 12:41 PJ_horner.c
> -rw-r--r--  1 schwehr  eng  20639 Feb  6 08:46 PJ_helmert.c
> -rw-r--r--  1 schwehr  eng  21130 Mar 20 10:49 PJ_healpix.c
> -rw-r--r--  1 schwehr  eng  27407 Mar 20 10:49 PJ_isea.c
>
> Would love to see what others come up with.
>
> On Sun, Apr 22, 2018 at 8:10 AM, Kristian Evers <kreve at sdfe.dk> wrote:
>
>> Hi Kurt,
>>
>> You are brave to start a code style discussion :-) A few comments on your
>> “rules”:
>>
>
> Hah!  Far from rules.  I'm trying figure out what is even legal / works.
>
>
>>
>> - Combine definition and declaration
>>
>> It works in this example but I don’t think it can be enforced in more
>> complicated code.
>> Variable declarations have to be made at the start of a block and that is
>> not always possible.
>>
>>
> Agreed.  Not always possible or always a good thing.  And a style question
> is do you allow variables to be defined in sub scopes?  In C++, the answer
> is usually to keep things as tight/narrow as possible.  In Proj, Idonno.
>
>
> At least it is done throughout the code base but definitely not
> consistently. I think it is fine to do so.
>
>
>
>> - Add const
>>
>> I don’t have a strong opinion on this one, although in this example I
>> mostly think the “const double”
>> is cluttering up the code. What is gained by adding const here?
>>
>
> Here there isn't much value, but if you come into this function cold, you
> know immediately that there aren't sneaky things going on.
>
>
>>
>> - For double literals, have at least one digit before and after decimal
>> point.  e.g. .1 -> 0.1 and 3. -> 3.0
>>
>> +1.
>>
>> - Don't have assignments hidden inside expressions
>>
>> Big +1!
>>
>> - Convert #defines to typed const values
>>
>> Would this be better as “static const …”?
>>
>
> In C++, I would just use constexpr.  In C, I'm guessing that for -O2 and
> higher, it won't change anything.  Leaving off the static might let the
> compiler be more aggressive.  But this is why using godbolt is pretty
> awesome.  You can try it and see if there is any difference and, if so,
> which way is more efficient.  A micro benchmark might be useful too.
>
>
>
> I can’t see a difference between using static and not. The assembler code
> is mostly gibberish to me though so I might have missed something.
> Using the static keyword is probably not necessary then.
>
>
>> - IWYU - Include what you use... here math.h
>>
>> Another +1 here.
>>
>>
>> Finally, I get an error when compiling your code:
>>
>> /Users/kevers/dev/proj4/src/PJ_august.c:25:16: error: initializer for
>> aggregate is not a compile-time
>>       constant [-Werror,-Wc99-extensions]
>>         M * x1 * (3.0 + x12 - 3.0 * y12),
>>         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
>> 1 error generated.
>>
>>
> Can you reproduce that failure in godbolt, or as least, what
> compiler/version/settings are you talking about?
>
>
>
> This is how I set up my builds:
>
> $ CFLAGS="-std=c89 -g -Wall -Wextra -Werror -Wunused-parameter
> -Wmissing-prototypes -Wmissing-declarations -Wformat
> -Werror=format-security -Wshadow -Wfloat-conversion -O2" cmake ../../proj4/
> -- The C compiler identification is AppleClang 9.1.0.9020039
> -- Check for working C compiler: /Applications/Xcode.app/
> Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
> -- Check for working C compiler: /Applications/Xcode.app/
> Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works
> -- Detecting C compiler ABI info
> -- Detecting C compiler ABI info - done
> -- Detecting C compile features
> -- Detecting C compile features - done
> …
>
> Basically the same as what is done in the OSX Travis setup.
>
> So for that you would have to assign xy.x and xy.y individually. Or
>> possible make use of the proj_coord()
>> PJ_COORD initialiser function.
>>
>> It would be interesting to see a more complicated function get the same
>> treatment.
>>
>> /Kristian
>>
>>
>> > On 22 Apr 2018, at 15:08, Kurt Schwehr <schwehr at gmail.com> wrote:
>> >
>> > Totally missed that lp.lam assignment!  Next iteration... also tried to
>> add a const to the lp arg.
>> >
>> > https://godbolt.org/g/b4FUf7
>> >
>> > And as for the static analize, try to imagine that this is being done
>> on a much more complicated function, because, yes, if a static analyzer
>> didn't get this function, it's pretty much useless.
>> >
>> > On Sun, Apr 22, 2018 at 5:26 AM, Even Rouault <
>> even.rouault at spatialys.com> wrote:
>> > On samedi 21 avril 2018 15:46:22 CEST Kurt Schwehr wrote:
>> > > Hi all,
>> > >
>> > > I've been thinking about what is possible with the Proj code base
>> with an
>> > > assumption that the code must be C89/C90 compatible. I played around
>> for a
>> > > few in godbolt with PJ_august.c (because it's small) and ended up with
>> > > this. I tried to be aggressive as I could. I think my modified
>> version is
>> > > likely to be more static analyzer friendly.
>> >
>> > I hope they are intelligent enough to make sense of the original code
>> ;-)
>> >
>> > > - Don't have assignments hidden inside expressions
>> >
>> > Definitely +1 on this !
>> >
>> > To avoid the modification of lp.lam in the cos(),
>> >
>> > > const double c = 1.0 + c1 * cos(lp.lam *= .5);
>> > > const double x1 = sin(lp.lam) * c1 / c;
>> >
>> > this part could also be re-written, as
>> >
>> > const double half_lam = 0.5 * lp.lam;
>> > const double c = 1.0 + c1 * cos(half_lam);
>> > const double x1 = sin(half_lam) * c1 / c;
>> >
>>
>> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/0f70a6a5/attachment.html>

From kreve at sdfe.dk  Mon Apr 30 06:00:01 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 30 Apr 2018 13:00:01 +0000
Subject: [Proj] Code style in Proj
In-Reply-To: <CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
Message-ID: <E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>

Kurt,

I think it looks good. I tried compiling the code and again I had the problem with declarations like

XY xy = {0.0, 0.0};

I’ve fixed those in a fork of your gist. See revision 2 in [0] for a proposed solution that I think
is in line with your ideas

I like how you’ve separated includes from the standard library on the PROJ internal includes. On
a related note (for those who don’t already know) I have recently introduced the proj_math.h
header which is intended as a PROJ replacement of math.h. proj_math.h’s purpose in life is to
make sure that we can use C99 math functions on systems where they are not available.
proj_math.h includes math.h and defines functions such as isnan() and hypot(). This way they
can be used as you would on a C99-compatible system as long as proj_math.h is included.
See revision 3 in [0].

Would you be willing to write up a simple style guide for PROJ based on the ideas you have presented in
this thread?

/Kristian

[0] https://gist.github.com/kbevers/17ec703942646e401b28a0975b28771d/revisions

On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:
In C too, but since C99.

AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.

while (...) {
   int i = 123, j = 345;
   k = i + j;
}

has been correct (and imho, preferable) syntax since K&R C

AFAIK, it's about compound statement.
C89 requires declaration at the top of blocks, while C99 lifts that:

$ cat test.c
int main()
{
   int i = 0;
   while (i < 10)
   {
       int j = 345;
       i = i + j;
   }

   {
       int z = 0;
       z = 1;
   }
   int x = 1;
}

$ gcc -std=c89 -pedantic test.c
test.c: In function ‘main’:
test.c:14:5: warning: ISO C90 forbids mixed declarations and code
[-Wdeclaration-after-statement]
    int x = 1;
    ^~~

$ gcc -std=c99 -pedantic test.c
$


Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/028fab85/attachment.html>

From knudsen.thomas at gmail.com  Mon Apr 30 06:44:25 2018
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Mon, 30 Apr 2018 15:44:25 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
Message-ID: <CAH0YoEMRE_jnvDhzGq06csiy01oftcojEkoqxH=zAiA_oim0Tw@mail.gmail.com>

I think line 116 in Kristian's revised version misses an "else": Gnu C, and
probably many other compilers, accepts "naked" compound statements, but I
do not think it is in accordance with the C89 standard

2018-04-30 15:00 GMT+02:00 Kristian Evers <kreve at sdfe.dk>:

> Kurt,
>
> I think it looks good. I tried compiling the code and again I had the
> problem with declarations like
>
> XY xy = {0.0, 0.0};
>
> I’ve fixed those in a fork of your gist. See revision 2 in [0] for a
> proposed solution that I think
> is in line with your ideas
>
> I like how you’ve separated includes from the standard library on the PROJ
> internal includes. On
> a related note (for those who don’t already know) I have recently
> introduced the proj_math.h
> header which is intended as a PROJ replacement of math.h. proj_math.h’s
> purpose in life is to
> make sure that we can use C99 math functions on systems where they are not
> available.
> proj_math.h includes math.h and defines functions such as isnan() and
> hypot(). This way they
> can be used as you would on a C99-compatible system as long as proj_math.h
> is included.
> See revision 3 in [0].
>
> Would you be willing to write up a simple style guide for PROJ based on
> the ideas you have presented in
> this thread?
>
> /Kristian
>
> [0] https://gist.github.com/kbevers/17ec703942646e401b28a0975b2877
> 1d/revisions
>
> On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net> wrote:
>
> On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
>
> In C too, but since C99.
>
>
> AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.
>
> while (...) {
>    int i = 123, j = 345;
>    k = i + j;
> }
>
> has been correct (and imho, preferable) syntax since K&R C
>
>
> AFAIK, it's about compound statement.
> C89 requires declaration at the top of blocks, while C99 lifts that:
>
> $ cat test.c
> int main()
> {
>    int i = 0;
>    while (i < 10)
>    {
>        int j = 345;
>        i = i + j;
>    }
>
>    {
>        int z = 0;
>        z = 1;
>    }
>    int x = 1;
> }
>
> $ gcc -std=c89 -pedantic test.c
> test.c: In function ‘main’:
> test.c:14:5: warning: ISO C90 forbids mixed declarations and code
> [-Wdeclaration-after-statement]
>     int x = 1;
>     ^~~
>
> $ gcc -std=c99 -pedantic test.c
> $
>
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/9a438ee4/attachment.html>

From kreve at sdfe.dk  Mon Apr 30 06:57:05 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 30 Apr 2018 13:57:05 +0000
Subject: [Proj] Code style in Proj
In-Reply-To: <CAH0YoEMRE_jnvDhzGq06csiy01oftcojEkoqxH=zAiA_oim0Tw@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
	<CAH0YoEMRE_jnvDhzGq06csiy01oftcojEkoqxH=zAiA_oim0Tw@mail.gmail.com>
Message-ID: <741457A0-E77D-40AA-A1C5-C9F6A0916E45@sdfe.dk>

Thomas,

Actually this was part of Kurts original proposal. The else is not missing here as you can see from the original code [0].
The code passed my compiler just fine with all the C89 specific flags turned on (as mentioned in an earlier email in
this thread). So here it is just a block introduced to create a scope where declarations can be made more local to
where they are used. If that is prohibited according to the standard I don’t know. I don’t have other ways to test
standard compliance than to compile the code with C89 flags turned on. For a more thorough test we can create a
pull request with the proposed changes and see how the various compilers on Travis and AppVeyor fares.

/Kristian

[0] https://github.com/OSGeo/proj.4/blob/d0fefa4104d9b655d59e400cda616f0b4d407071/src/PJ_aeqd.c#L110-L126


On 30 Apr 2018, at 15:44, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:

I think line 116 in Kristian's revised version misses an "else": Gnu C, and probably many other compilers, accepts "naked" compound statements, but I do not think it is in accordance with the C89 standard

2018-04-30 15:00 GMT+02:00 Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>>:
Kurt,

I think it looks good. I tried compiling the code and again I had the problem with declarations like

XY xy = {0.0, 0.0};

I’ve fixed those in a fork of your gist. See revision 2 in [0] for a proposed solution that I think
is in line with your ideas

I like how you’ve separated includes from the standard library on the PROJ internal includes. On
a related note (for those who don’t already know) I have recently introduced the proj_math.h
header which is intended as a PROJ replacement of math.h. proj_math.h’s purpose in life is to
make sure that we can use C99 math functions on systems where they are not available.
proj_math.h includes math.h and defines functions such as isnan() and hypot(). This way they
can be used as you would on a C99-compatible system as long as proj_math.h is included.
See revision 3 in [0].

Would you be willing to write up a simple style guide for PROJ based on the ideas you have presented in
this thread?

/Kristian

[0] https://gist.github.com/kbevers/17ec703942646e401b28a0975b28771d/revisions

On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:
In C too, but since C99.

AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.

while (...) {
   int i = 123, j = 345;
   k = i + j;
}

has been correct (and imho, preferable) syntax since K&R C

AFAIK, it's about compound statement.
C89 requires declaration at the top of blocks, while C99 lifts that:

$ cat test.c
int main()
{
   int i = 0;
   while (i < 10)
   {
       int j = 345;
       i = i + j;
   }

   {
       int z = 0;
       z = 1;
   }
   int x = 1;
}

$ gcc -std=c89 -pedantic test.c
test.c: In function ‘main’:
test.c:14:5: warning: ISO C90 forbids mixed declarations and code
[-Wdeclaration-after-statement]
    int x = 1;
    ^~~

$ gcc -std=c99 -pedantic test.c
$


Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net<http://mateusz.loskot.net/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj


_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/4b4b7ea1/attachment.html>

From knudsen.thomas at gmail.com  Mon Apr 30 07:22:15 2018
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Mon, 30 Apr 2018 16:22:15 +0200
Subject: [Proj] Code style in Proj
In-Reply-To: <741457A0-E77D-40AA-A1C5-C9F6A0916E45@sdfe.dk>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
	<CAH0YoEMRE_jnvDhzGq06csiy01oftcojEkoqxH=zAiA_oim0Tw@mail.gmail.com>
	<741457A0-E77D-40AA-A1C5-C9F6A0916E45@sdfe.dk>
Message-ID: <CAH0YoEMQ8r+vt-0O-Yrus2xkDBT24NDF1TXYBJLVuxMTTbBvTQ@mail.gmail.com>

Yes, I understand the intention, and have used the same kind of constructs
myself earlier. I stopped using it roughly 20 years ago, since my
interpretation of the standard text led me to conclude that the construct
was not complying.

Since your tests indicate that my interpretation was wrong, I have googled
around a bit to see what other people think, and it actually appears that I
was wrong. The alternative exegesis of the gospel is given by a number of
commentators on [0], so I suppose I was wrong - and will unfortunately now
have to reread the standard to be sure :-)

/Thomas

[0]
https://stackoverflow.com/questions/7859424/why-was-mixing-declarations-and-code-forbidden-up-until-c99


2018-04-30 15:57 GMT+02:00 Kristian Evers <kreve at sdfe.dk>:

> Thomas,
>
> Actually this was part of Kurts original proposal. The else is not missing
> here as you can see from the original code [0].
> The code passed my compiler just fine with all the C89 specific flags
> turned on (as mentioned in an earlier email in
> this thread). So here it is just a block introduced to create a scope
> where declarations can be made more local to
> where they are used. If that is prohibited according to the standard I
> don’t know. I don’t have other ways to test
> standard compliance than to compile the code with C89 flags turned on. For
> a more thorough test we can create a
> pull request with the proposed changes and see how the various compilers
> on Travis and AppVeyor fares.
>
> /Kristian
>
> [0] https://github.com/OSGeo/proj.4/blob/d0fefa4104d9b655d59e400cda616f
> 0b4d407071/src/PJ_aeqd.c#L110-L126
>
>
> On 30 Apr 2018, at 15:44, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
>
> I think line 116 in Kristian's revised version misses an "else": Gnu C,
> and probably many other compilers, accepts "naked" compound statements, but
> I do not think it is in accordance with the C89 standard
>
> 2018-04-30 15:00 GMT+02:00 Kristian Evers <kreve at sdfe.dk>:
>
>> Kurt,
>>
>> I think it looks good. I tried compiling the code and again I had the
>> problem with declarations like
>>
>> XY xy = {0.0, 0.0};
>>
>> I’ve fixed those in a fork of your gist. See revision 2 in [0] for a
>> proposed solution that I think
>> is in line with your ideas
>>
>> I like how you’ve separated includes from the standard library on the
>> PROJ internal includes. On
>> a related note (for those who don’t already know) I have recently
>> introduced the proj_math.h
>> header which is intended as a PROJ replacement of math.h. proj_math.h’s
>> purpose in life is to
>> make sure that we can use C99 math functions on systems where they are
>> not available.
>> proj_math.h includes math.h and defines functions such as isnan() and
>> hypot(). This way they
>> can be used as you would on a C99-compatible system as long as
>> proj_math.h is included.
>> See revision 3 in [0].
>>
>> Would you be willing to write up a simple style guide for PROJ based on
>> the ideas you have presented in
>> this thread?
>>
>> /Kristian
>>
>> [0] https://gist.github.com/kbevers/17ec703942646e401b28a097
>> 5b28771d/revisions
>>
>> On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net> wrote:
>>
>> On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com>
>> wrote:
>>
>> In C too, but since C99.
>>
>>
>> AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.
>>
>> while (...) {
>>    int i = 123, j = 345;
>>    k = i + j;
>> }
>>
>> has been correct (and imho, preferable) syntax since K&R C
>>
>>
>> AFAIK, it's about compound statement.
>> C89 requires declaration at the top of blocks, while C99 lifts that:
>>
>> $ cat test.c
>> int main()
>> {
>>    int i = 0;
>>    while (i < 10)
>>    {
>>        int j = 345;
>>        i = i + j;
>>    }
>>
>>    {
>>        int z = 0;
>>        z = 1;
>>    }
>>    int x = 1;
>> }
>>
>> $ gcc -std=c89 -pedantic test.c
>> test.c: In function ‘main’:
>> test.c:14:5: warning: ISO C90 forbids mixed declarations and code
>> [-Wdeclaration-after-statement]
>>     int x = 1;
>>     ^~~
>>
>> $ gcc -std=c99 -pedantic test.c
>> $
>>
>>
>> Best regards,
>> --
>> Mateusz Loskot, http://mateusz.loskot.net
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/29b1b3c2/attachment.html>

From kreve at sdfe.dk  Mon Apr 30 10:44:45 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 30 Apr 2018 17:44:45 +0000
Subject: [Proj] Code style in Proj
In-Reply-To: <CAH0YoEMQ8r+vt-0O-Yrus2xkDBT24NDF1TXYBJLVuxMTTbBvTQ@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
	<CAH0YoEMRE_jnvDhzGq06csiy01oftcojEkoqxH=zAiA_oim0Tw@mail.gmail.com>
	<741457A0-E77D-40AA-A1C5-C9F6A0916E45@sdfe.dk>
	<CAH0YoEMQ8r+vt-0O-Yrus2xkDBT24NDF1TXYBJLVuxMTTbBvTQ@mail.gmail.com>
Message-ID: <49889996-9050-45DD-82BA-F812A98735E5@sdfe.dk>

I briefly searched the C89 draft for occurrences of “compound statement” and “block” and couldn’t find a anywhere
where it says that stand-alone blocks are not allowed. I think [0] is the most relevant section for this discussion.

/Kristian

[0] https://port70.net/~nsz/c/c89/c89-draft.html#3.6.2

On 30 Apr 2018, at 16:22, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:

Yes, I understand the intention, and have used the same kind of constructs myself earlier. I stopped using it roughly 20 years ago, since my interpretation of the standard text led me to conclude that the construct was not complying.

Since your tests indicate that my interpretation was wrong, I have googled around a bit to see what other people think, and it actually appears that I was wrong. The alternative exegesis of the gospel is given by a number of commentators on [0], so I suppose I was wrong - and will unfortunately now have to reread the standard to be sure :-)

/Thomas

[0] https://stackoverflow.com/questions/7859424/why-was-mixing-declarations-and-code-forbidden-up-until-c99


2018-04-30 15:57 GMT+02:00 Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>>:
Thomas,

Actually this was part of Kurts original proposal. The else is not missing here as you can see from the original code [0].
The code passed my compiler just fine with all the C89 specific flags turned on (as mentioned in an earlier email in
this thread). So here it is just a block introduced to create a scope where declarations can be made more local to
where they are used. If that is prohibited according to the standard I don’t know. I don’t have other ways to test
standard compliance than to compile the code with C89 flags turned on. For a more thorough test we can create a
pull request with the proposed changes and see how the various compilers on Travis and AppVeyor fares.

/Kristian

[0] https://github.com/OSGeo/proj.4/blob/d0fefa4104d9b655d59e400cda616f0b4d407071/src/PJ_aeqd.c#L110-L126


On 30 Apr 2018, at 15:44, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:

I think line 116 in Kristian's revised version misses an "else": Gnu C, and probably many other compilers, accepts "naked" compound statements, but I do not think it is in accordance with the C89 standard

2018-04-30 15:00 GMT+02:00 Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>>:
Kurt,

I think it looks good. I tried compiling the code and again I had the problem with declarations like

XY xy = {0.0, 0.0};

I’ve fixed those in a fork of your gist. See revision 2 in [0] for a proposed solution that I think
is in line with your ideas

I like how you’ve separated includes from the standard library on the PROJ internal includes. On
a related note (for those who don’t already know) I have recently introduced the proj_math.h
header which is intended as a PROJ replacement of math.h. proj_math.h’s purpose in life is to
make sure that we can use C99 math functions on systems where they are not available.
proj_math.h includes math.h and defines functions such as isnan() and hypot(). This way they
can be used as you would on a C99-compatible system as long as proj_math.h is included.
See revision 3 in [0].

Would you be willing to write up a simple style guide for PROJ based on the ideas you have presented in
this thread?

/Kristian

[0] https://gist.github.com/kbevers/17ec703942646e401b28a0975b28771d/revisions

On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:
In C too, but since C99.

AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.

while (...) {
   int i = 123, j = 345;
   k = i + j;
}

has been correct (and imho, preferable) syntax since K&R C

AFAIK, it's about compound statement.
C89 requires declaration at the top of blocks, while C99 lifts that:

$ cat test.c
int main()
{
   int i = 0;
   while (i < 10)
   {
       int j = 345;
       i = i + j;
   }

   {
       int z = 0;
       z = 1;
   }
   int x = 1;
}

$ gcc -std=c89 -pedantic test.c
test.c: In function ‘main’:
test.c:14:5: warning: ISO C90 forbids mixed declarations and code
[-Wdeclaration-after-statement]
    int x = 1;
    ^~~

$ gcc -std=c99 -pedantic test.c
$


Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net<http://mateusz.loskot.net/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj


_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj


_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/c8380ca9/attachment.html>

From schwehr at gmail.com  Mon Apr 30 12:45:23 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 30 Apr 2018 12:45:23 -0700
Subject: [Proj] Code style in Proj
In-Reply-To: <E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
Message-ID: <CACmBxysuo7wzcL44XShvtsxWiJ+LZXCg-j+5wS_7c9zUzUWv_w@mail.gmail.com>

Thanks for the proj_coord().  I meant to look that up, but got interrupted
by a poopy diaper.

I would be happy to create a draft document for people to comment on.  It
will be slow going as I only get little bits of time here and there for the
next week.

I do have to say that I don't like removing the math.h from the main file.
 The cost is small and it frees you to refactor other headers without wide
ranging changes each time.


On Mon, Apr 30, 2018 at 6:00 AM, Kristian Evers <kreve at sdfe.dk> wrote:

> Kurt,
>
> I think it looks good. I tried compiling the code and again I had the
> problem with declarations like
>
> XY xy = {0.0, 0.0};
>
> I’ve fixed those in a fork of your gist. See revision 2 in [0] for a
> proposed solution that I think
> is in line with your ideas
>
> I like how you’ve separated includes from the standard library on the PROJ
> internal includes. On
> a related note (for those who don’t already know) I have recently
> introduced the proj_math.h
> header which is intended as a PROJ replacement of math.h. proj_math.h’s
> purpose in life is to
> make sure that we can use C99 math functions on systems where they are not
> available.
> proj_math.h includes math.h and defines functions such as isnan() and
> hypot(). This way they
> can be used as you would on a C99-compatible system as long as proj_math.h
> is included.
> See revision 3 in [0].
>
> Would you be willing to write up a simple style guide for PROJ based on
> the ideas you have presented in
> this thread?
>
> /Kristian
>
> [0] https://gist.github.com/kbevers/17ec703942646e401b28a0975b2877
> 1d/revisions
>
> On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net> wrote:
>
> On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
>
> In C too, but since C99.
>
>
> AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.
>
> while (...) {
>    int i = 123, j = 345;
>    k = i + j;
> }
>
> has been correct (and imho, preferable) syntax since K&R C
>
>
> AFAIK, it's about compound statement.
> C89 requires declaration at the top of blocks, while C99 lifts that:
>
> $ cat test.c
> int main()
> {
>    int i = 0;
>    while (i < 10)
>    {
>        int j = 345;
>        i = i + j;
>    }
>
>    {
>        int z = 0;
>        z = 1;
>    }
>    int x = 1;
> }
>
> $ gcc -std=c89 -pedantic test.c
> test.c: In function ‘main’:
> test.c:14:5: warning: ISO C90 forbids mixed declarations and code
> [-Wdeclaration-after-statement]
>     int x = 1;
>     ^~~
>
> $ gcc -std=c99 -pedantic test.c
> $
>
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/5c009dcf/attachment.html>

From kreve at sdfe.dk  Mon Apr 30 14:20:02 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 30 Apr 2018 21:20:02 +0000
Subject: [Proj] Code style in Proj
In-Reply-To: <CACmBxysuo7wzcL44XShvtsxWiJ+LZXCg-j+5wS_7c9zUzUWv_w@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
	<CACmBxysuo7wzcL44XShvtsxWiJ+LZXCg-j+5wS_7c9zUzUWv_w@mail.gmail.com>
Message-ID: <88638BD0-18B0-4B99-B352-76CAF03CBE5F@sdfe.dk>



On 30 Apr 2018, at 21:45, Kurt Schwehr <schwehr at gmail.com<mailto:schwehr at gmail.com>> wrote:

Thanks for the proj_coord().  I meant to look that up, but got interrupted by a poopy diaper.

I would be happy to create a draft document for people to comment on.  It will be slow going as I only get little bits of time here and there for the next week.


Thanks. Please take your time - we are in no rush.

I do have to say that I don't like removing the math.h from the main file.   The cost is small and it frees you to refactor other headers without wide ranging changes each time.


So you like it better if both math.h and proj_math.h are included? math.h is not included that many places today already as it is included in projects.h.
I figured it would be better to just include proj_math.h as.a rule of thumb when needing math functions since it would ensure that the C99 math functions
are handled correctly. Apart from this special case I absolutely agree that it is a good idea to include headers for the functions you need. At the moment
most of the common standard library headers are included in projects.h and not in the files where they are needed. That should be changed when projects.h
is removed from the public API.


On Mon, Apr 30, 2018 at 6:00 AM, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Kurt,

I think it looks good. I tried compiling the code and again I had the problem with declarations like

XY xy = {0.0, 0.0};

I’ve fixed those in a fork of your gist. See revision 2 in [0] for a proposed solution that I think
is in line with your ideas

I like how you’ve separated includes from the standard library on the PROJ internal includes. On
a related note (for those who don’t already know) I have recently introduced the proj_math.h
header which is intended as a PROJ replacement of math.h. proj_math.h’s purpose in life is to
make sure that we can use C99 math functions on systems where they are not available.
proj_math.h includes math.h and defines functions such as isnan() and hypot(). This way they
can be used as you would on a C99-compatible system as long as proj_math.h is included.
See revision 3 in [0].

Would you be willing to write up a simple style guide for PROJ based on the ideas you have presented in
this thread?

/Kristian

[0] https://gist.github.com/kbevers/17ec703942646e401b28a0975b28771d/revisions

On 24 Apr 2018, at 12:05, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

On 24 April 2018 at 11:45, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:
In C too, but since C99.

AFAIK this only applies to the "for (int i = 0;  i < n; i++)" syntax.

while (...) {
   int i = 123, j = 345;
   k = i + j;
}

has been correct (and imho, preferable) syntax since K&R C

AFAIK, it's about compound statement.
C89 requires declaration at the top of blocks, while C99 lifts that:

$ cat test.c
int main()
{
   int i = 0;
   while (i < 10)
   {
       int j = 345;
       i = i + j;
   }

   {
       int z = 0;
       z = 1;
   }
   int x = 1;
}

$ gcc -std=c89 -pedantic test.c
test.c: In function ‘main’:
test.c:14:5: warning: ISO C90 forbids mixed declarations and code
[-Wdeclaration-after-statement]
    int x = 1;
    ^~~

$ gcc -std=c99 -pedantic test.c
$


Best regards,
--
Mateusz Loskot, http://mateusz.loskot.net<http://mateusz.loskot.net/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj


_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj



--
--
http://schwehr.org<http://schwehr.org/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180430/e3e9e3e5/attachment.html>

From dan.crosby at lincolnagritech.co.nz  Mon Apr 30 14:24:25 2018
From: dan.crosby at lincolnagritech.co.nz (Dan Crosby)
Date: Tue, 1 May 2018 09:24:25 +1200
Subject: [Proj] Code style in Proj
In-Reply-To: <CACmBxysuo7wzcL44XShvtsxWiJ+LZXCg-j+5wS_7c9zUzUWv_w@mail.gmail.com>
References: <CACmBxys=U10UW8pQNUcj=Zmk8ye3GnvHG9n7jCwxPQ1akF=xXA@mail.gmail.com>
	<11405934.B23bO5Xg3P@even-i700>
	<CACmBxyun0_srubNTAX2XufMkmR+TUz04FG1Q8GqqpE2G2ovq-w@mail.gmail.com>
	<91603812-137E-45B7-B459-BA886F304C56@sdfe.dk>
	<CACmBxyvjhuwHX6L3hGAYzwxqy_aaYRXKD-M1qH805CtMhDaQ3w@mail.gmail.com>
	<CABUeae-ddXjXui_aND6fQmMVyP3QrFq70P=dg0WjV=RTfd8u-Q@mail.gmail.com>
	<CAH0YoEMa01t=9du3NW+_p12-883YUvCHW9QTUgqvwooQaxy23g@mail.gmail.com>
	<CABUeae-Gecj6xfQGtJ-htuk=k8w23d0Wmu9_Z+SLJ6E3SX_Bog@mail.gmail.com>
	<E7510589-F654-4CFC-8C69-16A65C9ED905@sdfe.dk>
	<CACmBxysuo7wzcL44XShvtsxWiJ+LZXCg-j+5wS_7c9zUzUWv_w@mail.gmail.com>
Message-ID: <ecd06d87-6706-4644-bcc8-c4d59715d3ec@lincolnagritech.co.nz>

Hi Kurt,
 
If you want a few nit-picks (based on my personal preferences admittedly, and with no reference to any standards but my own):
·         I hate the dangling brackets – it makes the code asymmetrical, how can you stand to look at it? (Ok, I prepared to concede, this might just be me!)
·         I like to avoid single line if statements (i.e., with no brackets). Apart from it being inconsistent with other if statements, it can be easy to misread the code if it isn’t properly spaced and indented.
·         I find that method of switch indenting hard to parse. I would do this, and always bracket the whole case expression for consistency (which is variable in your example):
 
switch (thing)
{
    case C1:
    {
        // Code part
    } break;
 
    case C2:
    {
        // More code
    } // fallthrough
 
    default:
    {
        // Code
    }
}
 
·         There are some minor inconsistencies in the  use of spaces around commas and operators (again, my preference being for more space!):
if (0==P)                   vs            if (0 == P)
XY xy = {0.0,0.0};          vs            XY xy = {0.0, 0.0};
(lp.lam+P->lam0)            vs            (lp.lam + P->lam0)
 
·         Unless tools demand it, why the horizontal restrictions (or is this an artefact of github) ?
This is easier to read:
            lp.phi = aasin(P->ctx,cosc * Q->sinph0 + xy.y * sinc * Q->cosph0 / c_rh);
 
 
I just hope list reformatting doesn’t ruin my points J
 
Dan
 
 
From: proj-bounces at lists.maptools.org <proj-bounces at lists.maptools.org> On Behalf Of Kurt Schwehr
Sent: Tuesday, 1 May 2018 07:45
To: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Subject: Re: [Proj] Code style in Proj
 
Thanks for the proj_coord().  I meant to look that up, but got interrupted by a poopy diaper.
 
I would be happy to create a draft document for people to comment on.  It will be slow going as I only get little bits of time here and there for the next week.
 
I do have to say that I don't like removing the math.h from the main file.   The cost is small and it frees you to refactor other headers without wide ranging changes each time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180501/17c36893/attachment.html>

