From rbejar at unizar.es  Tue Oct  9 01:16:36 2018
From: rbejar at unizar.es (=?UTF-8?B?UnViw6luIELDqWphcg==?=)
Date: Tue, 9 Oct 2018 10:16:36 +0200
Subject: [Proj] A rHealPix bug or I am misunderstanding something
Message-ID: <d308075c-47a1-2490-66ab-f5aa2f3c1ba7@unizar.es>

Hi people,

I am having some problems with the rHealPix projection and maybe you can 
help me.

In (0,0)-rHealPix (i.e. north_square = south_square = 0), I understand 
that the top left corner is (-PI, 3*PI/4).

However trying to project that point to lon-lat WGS84 fails.

I am running proj 5.2.0 (September 15th, 2018) in a terminal in Ubuntu 
18.04 (I have compiled it from sources, I am not using the older version 
from the repositories).

I assumed that it could be due to some tolerances/epsilon issues. 
However it does not seem to be so. I have tried with this command:

proj +proj=rhealpix -f '%.4f' -I +lon_0=0 +a=1 +ellps=WGS84 
+north_square=0 +south_square=0 -E

and some of the results I get are these:

-3.14 2.35
-3.14 2.35      *       *
-3.13 2.34
-3.13 2.34      90.3176 42.4654
-3.138 2.348
-3.138 2.348    90.3144 41.9431
-3.139 2.349
-3.139 2.349    *       *


So even after "pushing" the top left corner to the right (from -PI to 
-3.14, big difference) and down (from 3*PI/4 to 2.35, again big 
difference) I still don't get a conversion. The closest to the "real" 
point that seems to work is around (-3.138, 2.349) which is far from 
that corner (much further than a tolerance).

This corner is a simple, easily reproducible case. I am having similar 
problems close to the edges of the N square (and possibly close to some 
of the edges of other squares too).

Am I doing something wrong, or is this a problem with rHeallPix in Proj.4?

Thanks in advance!

   Rubén


-- 

Dr. Rubén Béjar
*Universidad* Zaragoza <https://www.unizar.es>
Advanced Information Systems Laboratory <https://www.iaaa.es/>
Aragon Institute of Engineering Research <http://i3a.unizar.es/>

rbejar at unizar.es <mailto:rbejar at unizar.es> (@rubejar in Twitter) 
<https://twitter.com/rubejar>
*rubenbejar*.com <https://www.rubenbejar.com>
----

Departamento de Informática e Ingeniería de Sistemas

María de Luna 1 / 50018 / Zaragoza (Spain)
Tlf: +34 876 555534 / Fax: +34 976 761914

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181009/c74a8d3d/attachment.html>

From knudsen.thomas at gmail.com  Tue Oct  9 02:21:58 2018
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 9 Oct 2018 11:21:58 +0200
Subject: [Proj] A rHealPix bug or I am misunderstanding something
In-Reply-To: <d308075c-47a1-2490-66ab-f5aa2f3c1ba7@unizar.es>
References: <d308075c-47a1-2490-66ab-f5aa2f3c1ba7@unizar.es>
Message-ID: <CAH0YoENkTNHEnncMe=8gHfZMdKs7prGNGm6aS4D3MGRR8k8YqA@mail.gmail.com>

Rubén,

first, I recommend not mixing "minus style" general options with "plus
style" projection definitions. It works for proj and cs2cs, but will not
for the next generation tool, cct, so I suggest saying:

proj -EIf '%.4f' +proj=rhealpix +lon_0=0 +a=1 +ellps=WGS84 +north_square=0
+south_square=0

second: I can replicate your results, but...

third: I have no idea what it means, and cannot help - any rHealpix users
here? Please speak up!

/thomas

Den tir. 9. okt. 2018 kl. 10.19 skrev Rubén Béjar <rbejar at unizar.es>:

> Hi people,
>
> I am having some problems with the rHealPix projection and maybe you can
> help me.
>
> In (0,0)-rHealPix (i.e. north_square = south_square = 0), I understand
> that the top left corner is (-PI, 3*PI/4).
>
> However trying to project that point to lon-lat WGS84 fails.
>
> I am running proj 5.2.0 (September 15th, 2018) in a terminal in Ubuntu
> 18.04 (I have compiled it from sources, I am not using the older version
> from the repositories).
>
> I assumed that it could be due to some tolerances/epsilon issues. However
> it does not seem to be so. I have tried with this command:
>
> proj +proj=rhealpix -f '%.4f' -I +lon_0=0 +a=1 +ellps=WGS84
> +north_square=0 +south_square=0 -E
>
> and some of the results I get are these:
>
> -3.14 2.35
> -3.14 2.35      *       *
> -3.13 2.34
> -3.13 2.34      90.3176 42.4654
> -3.138 2.348
> -3.138 2.348    90.3144 41.9431
> -3.139 2.349
> -3.139 2.349    *       *
>
>
> So even after "pushing" the top left corner to the right (from -PI to
> -3.14, big difference) and down (from 3*PI/4 to 2.35, again big difference)
> I still don't get a conversion. The closest to the "real" point that seems
> to work is around (-3.138, 2.349) which is far from that corner (much
> further than a tolerance).
>
> This corner is a simple, easily reproducible case. I am having similar
> problems close to the edges of the N square (and possibly close to some of
> the edges of other squares too).
>
> Am I doing something wrong, or is this a problem with rHeallPix in Proj.4?
>
> Thanks in advance!
>
>   Rubén
>
>
> --
>
> Dr. Rubén Béjar
> *Universidad* Zaragoza <https://www.unizar.es>
> Advanced Information Systems Laboratory <https://www.iaaa.es/>
> Aragon Institute of Engineering Research <http://i3a.unizar.es/>
>
> rbejar at unizar.es  (@rubejar in Twitter) <https://twitter.com/rubejar>
> *rubenbejar*.com <https://www.rubenbejar.com>
> ----
>
> Departamento de Informática e Ingeniería de Sistemas
>
> María de Luna 1 / 50018 / Zaragoza (Spain)
> Tlf: +34 876 555534 / Fax: +34 976 761914
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181009/f125fafd/attachment.html>

From luis.de.sousa at protonmail.ch  Thu Oct 11 00:42:41 2018
From: luis.de.sousa at protonmail.ch (=?UTF-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Thu, 11 Oct 2018 07:42:41 +0000
Subject: [Proj] Projection initialisation failure with Homolosine
Message-ID: <3GbnQ5JJWYP0wkrKk9Ho5bY18KPw6MKnJWznwJXgMppYsDy_uUs30aYhB7tQxYXC6I6rMwjL9nfoECyZqtzV5g==@protonmail.ch>

Dear all,

I am trying to convert geodesic coordinates to the Homolosine projection. Using the cs2cs tool I get the following error:

$ cs2cs +init=epsg:4326 +to '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs' lon_lat.txt
Using to definition: proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs
Rel. 4.9.3, 15 August 2016
<cs2cs>:
projection initialization failure
cause: unknown projection id
program abnormally terminated

However, both systems are known to proj:

$ proj -lp | grep igh
igh : Interrupted Goode Homolosine
sch : Spherical Cross-track Height

$ cat /usr/share/proj/epsg | grep 4326
<4326> +proj=longlat +datum=WGS84 +no_defs  <>

This is happening on Ubuntu 18.04 with proj 4.4:

$ man proj | grep Rel.
       mentation for Release 4.
                                                       2000/03/21 Rel. 4.4                                                PROJ(1)

Any hints on what may be wrong?

Thank you.

--
Luís Moreira de Sousa
Email: luis.de.sousa at protonmail.ch
RingID: ring:7ca91d83f4f9dec82fec9f1144b8e5c1ef2a110c
URL: https://ldesousa.github.io

Sent with ProtonMail Secure Email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181011/e0be281e/attachment.html>

From even.rouault at spatialys.com  Thu Oct 11 03:18:06 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 11 Oct 2018 12:18:06 +0200
Subject: [Proj] Projection initialisation failure with Homolosine
In-Reply-To: <3GbnQ5JJWYP0wkrKk9Ho5bY18KPw6MKnJWznwJXgMppYsDy_uUs30aYhB7tQxYXC6I6rMwjL9nfoECyZqtzV5g==@protonmail.ch>
References: <3GbnQ5JJWYP0wkrKk9Ho5bY18KPw6MKnJWznwJXgMppYsDy_uUs30aYhB7tQxYXC6I6rMwjL9nfoECyZqtzV5g==@protonmail.ch>
Message-ID: <3509832.Wtx3RHrNyS@even-i700>

On jeudi 11 octobre 2018 07:42:41 CEST Luí­s Moreira de Sousa wrote:
> Dear all,
> 
> I am trying to convert geodesic coordinates to the Homolosine projection.
> Using the cs2cs tool I get the following error:
> 
> $ cs2cs +init=epsg:4326 +to '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84
> +units=m +no_defs' lon_lat.txt

Remove the single quotes around +proj=igh ... +no_defs.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Thu Oct 11 03:22:13 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 11 Oct 2018 12:22:13 +0200
Subject: [Proj] RFC2: Initial integration of "GDAL SRS barn" work
Message-ID: <2902343.L0dlGtjXj1@even-i700>

Hi,

I've submitted RFC2: Initial integration of "GDAL SRS barn" work
for consideration in https://github.com/OSGeo/proj.4/pull/1149

A HTML build of the RFC be found at
http://even.rouault.free.fr/proj_cpp_api/rfc-2.html for easier reading

I suggest to use GH commenting features in this ticket.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From roger.oberholtzer at gmail.com  Tue Oct 16 03:17:23 2018
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Tue, 16 Oct 2018 12:17:23 +0200
Subject: [Proj] finding proj descriptions
Message-ID: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>

I used to use http://epsg.io/ to find the proj strings for projections
of interest. I see that the site now only provides an OGP XML
description.

Did I miss something?

-- 
Roger Oberholtzer


From kreve at sdfe.dk  Tue Oct 16 03:33:48 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 16 Oct 2018 10:33:48 +0000
Subject: [Proj] finding proj descriptions
In-Reply-To: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEEE49A1@S000014.PROD.SITAD.DK>

Roger,

Take a look at this http://epsg.io/4094 code for instance. Scroll down to
the "Export" section and click on "PROJ.4". This should give you a
PROJ string. I seem to vaguely remember that sometimes it is missing,
which usually corresponds with a system that can't be expressed with a
(legacy) PROJ string.

/Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org <proj-bounces at lists.maptools.org> På vegne af Roger Oberholtzer
Sendt: 16. oktober 2018 12:17
Til: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: [Proj] finding proj descriptions

I used to use http://epsg.io/ to find the proj strings for projections
of interest. I see that the site now only provides an OGP XML
description.

Did I miss something?

-- 
Roger Oberholtzer
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From martin.desruisseaux at geomatys.com  Tue Oct 16 04:09:40 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 16 Oct 2018 13:09:40 +0200
Subject: [Proj] finding proj descriptions
In-Reply-To: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
Message-ID: <88f21c31-ce70-0298-b311-a160d803d90a@geomatys.com>

Le 16/10/2018 à 12:17, Roger Oberholtzer a écrit :

> I used to use http://epsg.io/ to find the proj strings for projections
> of interest. I see that the site now only provides an OGP XML
> description.
>
That site should be taken carefully anyway. Despite its name, epsg.io is
unrelated to EPSG. The only official and authoritative online source of
EPSG definitions is http://epsg-registry.org/ (or http://www.epsg.org/
for downloading the database). Some Well Known Texts provided by epsg.io
are in departure with authoritative EPSG definitions: for example most
geographic CRS which are defined with different axis orders, or the
Google projection (http://epsg.io/3857) which is defined with a wrong
projection method (it causes an error of about 30 km at the latitude of
U.K.).

I have heard that if EPSG was not a non-profit committee, they may have
taken legal action for asking epsg.io to change their name (disclaimer:
I'm of course not speaking in the name of anyone at IOGP). That web site
is of course free to provide the CRS definitions they want. It is the
illusion that those definitions show EPSG authoritative definitions
which is problematic.

    Martin




From macqueen1 at llnl.gov  Wed Oct 17 08:12:48 2018
From: macqueen1 at llnl.gov (MacQueen, Don)
Date: Wed, 17 Oct 2018 15:12:48 +0000
Subject: [Proj] finding proj descriptions
In-Reply-To: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
Message-ID: <CA34EDDF-AAC3-42D2-BBE5-66BAAF99CAD3@llnl.gov>

I tend to look at
   http://spatialreference.org

--
Don MacQueen
Lawrence Livermore National Laboratory
7000 East Ave., L-627
Livermore, CA 94550
925-423-1062
Lab cell 925-724-7509
 
 

﻿On 10/16/18, 3:17 AM, "proj-bounces at lists.maptools.org on behalf of Roger Oberholtzer" <proj-bounces at lists.maptools.org on behalf of roger.oberholtzer at gmail.com> wrote:

    I used to use http://epsg.io/ to find the proj strings for projections
    of interest. I see that the site now only provides an OGP XML
    description.
    
    Did I miss something?
    
    -- 
    Roger Oberholtzer
    _______________________________________________
    Proj mailing list
    Proj at lists.maptools.org
    http://lists.maptools.org/mailman/listinfo/proj
    


From andre+joost at nurfuerspam.de  Wed Oct 17 09:14:48 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Wed, 17 Oct 2018 18:14:48 +0200
Subject: [Proj] finding proj descriptions
In-Reply-To: <88f21c31-ce70-0298-b311-a160d803d90a@geomatys.com>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
	<88f21c31-ce70-0298-b311-a160d803d90a@geomatys.com>
Message-ID: <pqa1dl$1gd$2@blaine.gmane.org>

Am 16.10.18 um 13:09 schrieb Martin Desruisseaux:
> Le 16/10/2018 à 12:17, Roger Oberholtzer a écrit :
>
>> I used to use http://epsg.io/ to find the proj strings for projections
>> of interest. I see that the site now only provides an OGP XML
>> description.
>>
> That site should be taken carefully anyway. Despite its name, epsg.io is
> unrelated to EPSG. The only official and authoritative online source of
> EPSG definitions is http://epsg-registry.org/ (or http://www.epsg.org/
> for downloading the database). Some Well Known Texts provided by epsg.io
> are in departure with authoritative EPSG definitions: for example most
> geographic CRS which are defined with different axis orders, or the
> Google projection (http://epsg.io/3857) which is defined with a wrong
> projection method (it causes an error of about 30 km at the latitude of
> U.K.).
>
> I have heard that if EPSG was not a non-profit committee, they may have
> taken legal action for asking epsg.io to change their name (disclaimer:
> I'm of course not speaking in the name of anyone at IOGP). That web site
> is of course free to provide the CRS definitions they want. It is the
> illusion that those definitions show EPSG authoritative definitions
> which is problematic.
>

Basically you may be right, but epsg-registry.org does not provide the 
"proj" definitions that were asked for.

Greetings,
Andre Joost




From andre+joost at nurfuerspam.de  Wed Oct 17 09:17:07 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Wed, 17 Oct 2018 18:17:07 +0200
Subject: [Proj] finding proj descriptions
In-Reply-To: <CA34EDDF-AAC3-42D2-BBE5-66BAAF99CAD3@llnl.gov>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
	<CA34EDDF-AAC3-42D2-BBE5-66BAAF99CAD3@llnl.gov>
Message-ID: <pqa1dl$1gd$1@blaine.gmane.org>

Am 17.10.18 um 17:12 schrieb MacQueen, Don:
> I tend to look at
>     http://spatialreference.org
>

... which has to be taken even with more care than epsg.io.

Most changes in the EPSG database have not been ported to 
spatialreference.org for some time now.

Note the "Last update: 2013" remark on the entry page.

Greetings,
Andre Joost




From howard at hobu.co  Fri Oct 19 11:47:33 2018
From: howard at hobu.co (Howard Butler)
Date: Fri, 19 Oct 2018 13:47:33 -0500
Subject: [Proj] finding proj descriptions
In-Reply-To: <pqa1dl$1gd$1@blaine.gmane.org>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
	<CA34EDDF-AAC3-42D2-BBE5-66BAAF99CAD3@llnl.gov>
	<pqa1dl$1gd$1@blaine.gmane.org>
Message-ID: <c3adb34c-41e8-a026-ea66-f9295e178441@hobu.co>



On 10/17/18 11:17 AM, Andre Joost wrote:
> Am 17.10.18 um 17:12 schrieb MacQueen, Don:
>> I tend to look at
>>     http://spatialreference.org
>>
> ... which has to be taken even with more care than epsg.io.
>
> Most changes in the EPSG database have not been ported to 
> spatialreference.org for some time now.
>
> Note the "Last update: 2013" remark on the entry page.
>
Andrew is 100% correct. If anyone wishes to have the keys to
spatialreference.org to catch it up to the modern world, please contact
me and we will do so. I have a large list of issues to clean up to go
along with it.

Unfortunately spatialreference.org is an excellent community resource
that never attracts community contribution. It needs a champion like
Kristian and Thomas have done for PROJ.

Howard

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181019/beaff33f/attachment.sig>

From luis.de.sousa at protonmail.ch  Sat Oct 20 07:40:57 2018
From: luis.de.sousa at protonmail.ch (=?UTF-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Sat, 20 Oct 2018 14:40:57 +0000
Subject: [Proj] finding proj descriptions
In-Reply-To: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
Message-ID: <ZNdjGYLpOprreGw5N0nUx-MjkFj6UBzY-QEcSErVzBl_1inQRKNtZW0ZKvdEqq8xR6lPSgpwZdibh6MnN3gdnQ==@protonmail.ch>

Dear Roger,

presently, the best resource to identify PROJ strings is the documentation itself. This is where I go to in case of doubt:
https://proj4.org/operations/projections/index.html

Cheers.


--
Luís Moreira de Sousa
Email: luis.de.sousa at protonmail.ch
RingID: ring:7ca91d83f4f9dec82fec9f1144b8e5c1ef2a110c
URL: https://ldesousa.github.io

Sent with ProtonMail Secure Email.

‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐
On Tuesday, October 16, 2018 12:17 PM, Roger Oberholtzer <roger.oberholtzer at gmail.com> wrote:

> I used to use http://epsg.io/ to find the proj strings for projections
> of interest. I see that the site now only provides an OGP XML
> description.
>
> Did I miss something?
>
> -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>
> Roger Oberholtzer
>
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj




From roger.oberholtzer at gmail.com  Sun Oct 21 23:09:05 2018
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Mon, 22 Oct 2018 08:09:05 +0200
Subject: [Proj] finding proj descriptions
In-Reply-To: <ZNdjGYLpOprreGw5N0nUx-MjkFj6UBzY-QEcSErVzBl_1inQRKNtZW0ZKvdEqq8xR6lPSgpwZdibh6MnN3gdnQ==@protonmail.ch>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
	<ZNdjGYLpOprreGw5N0nUx-MjkFj6UBzY-QEcSErVzBl_1inQRKNtZW0ZKvdEqq8xR6lPSgpwZdibh6MnN3gdnQ==@protonmail.ch>
Message-ID: <CANkOqwOFk4e0qZmm_fBYUx=Q7Z6NibspaOZjxtEckLMFZ=ojkA@mail.gmail.com>

On Sat, Oct 20, 2018 at 4:43 PM Luí­s Moreira de Sousa
<luis.de.sousa at protonmail.ch> wrote:
>
> Dear Roger,
>
> presently, the best resource to identify PROJ strings is the documentation itself. This is where I go to in case of doubt:
> https://proj4.org/operations/projections/index.html

Ultimately, what I am trying to do is find a way to obtain either
geotiff or WKT that describe the proj conversion. I am trying to
implement something that generates LAS file (a point cloud data file).
These files prefer geotiff, but do support WTK to describe the
projection of the data points in the file.



-- 
Roger Oberholtzer


From kreve at sdfe.dk  Mon Oct 22 00:01:19 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 22 Oct 2018 07:01:19 +0000
Subject: [Proj] finding proj descriptions
In-Reply-To: <CANkOqwOFk4e0qZmm_fBYUx=Q7Z6NibspaOZjxtEckLMFZ=ojkA@mail.gmail.com>
References: <CANkOqwOUkNMH_WjDrJpZAg82+JiysTBqAaYJbf8YvQvCb+x5jA@mail.gmail.com>
	<ZNdjGYLpOprreGw5N0nUx-MjkFj6UBzY-QEcSErVzBl_1inQRKNtZW0ZKvdEqq8xR6lPSgpwZdibh6MnN3gdnQ==@protonmail.ch>
	<CANkOqwOFk4e0qZmm_fBYUx=Q7Z6NibspaOZjxtEckLMFZ=ojkA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEEFE901@S000014.PROD.SITAD.DK>

Roger,

You should take a look at Evens WKT work then. Even describes the details in RFC2[0]. 
There's still some ways to go but the new projinfo application offers some of the
functionality you are looking for. I believe there's API functions that expose the same
features as well. You can grab the source code from the iso19111_dev branch.
I am sure Even would appreciate some third-party testing of his work.

/Kristian

[0] https://github.com/OSGeo/proj.4/pull/1149

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org <proj-bounces at lists.maptools.org> På vegne af Roger Oberholtzer
Sendt: 22. oktober 2018 08:09
Til: luis.de.sousa at protonmail.ch; PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: Re: [Proj] finding proj descriptions

On Sat, Oct 20, 2018 at 4:43 PM Luí­s Moreira de Sousa
<luis.de.sousa at protonmail.ch> wrote:
>
> Dear Roger,
>
> presently, the best resource to identify PROJ strings is the documentation itself. This is where I go to in case of doubt:
> https://proj4.org/operations/projections/index.html

Ultimately, what I am trying to do is find a way to obtain either
geotiff or WKT that describe the proj conversion. I am trying to
implement something that generates LAS file (a point cloud data file).
These files prefer geotiff, but do support WTK to describe the
projection of the data points in the file.



-- 
Roger Oberholtzer
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj

From rbejar at unizar.es  Tue Oct 23 06:46:09 2018
From: rbejar at unizar.es (=?UTF-8?B?UnViw6luIELDqWphcg==?=)
Date: Tue, 23 Oct 2018 15:46:09 +0200
Subject: [Proj] A rHealPix bug or I am misunderstanding something
In-Reply-To: <CAH0YoENkTNHEnncMe=8gHfZMdKs7prGNGm6aS4D3MGRR8k8YqA@mail.gmail.com>
References: <d308075c-47a1-2490-66ab-f5aa2f3c1ba7@unizar.es>
	<CAH0YoENkTNHEnncMe=8gHfZMdKs7prGNGm6aS4D3MGRR8k8YqA@mail.gmail.com>
Message-ID: <38b819cf-167e-8739-3d13-b797cac2817d@unizar.es>

Hi all,

After some additional tests and readings I think I finally have this 
figured out. For the record:

- The values of the coordinates of rHealPix are not radians. They are 
projected and in units of the authalic radius. By using all the time 
+a=1 in my tests they looked similar and that got me confused.

- The authalic sphere of the WGS84 ellipsoid with semi-major axis == 1 
does not have a radius of 1 but slightly smaller. This would be the 
reason why some values on the "edges" were not converted. If I use 
+a=1.00336409 with +ellps=WGS84 (ratio between its semi-major and 
semi-minor axes) the authalic sphere has a radius just barely larger 
than 1 and I can convert those points on the "edges".

Best regards,

   Rubén

El 9/10/18 a las 11:21, Thomas Knudsen escribió:
> Rubén,
>
> first, I recommend not mixing "minus style" general options with "plus 
> style" projection definitions. It works for proj and cs2cs, but will 
> not for the next generation tool, cct, so I suggest saying:
>
> proj -EIf '%.4f' +proj=rhealpix +lon_0=0 +a=1 +ellps=WGS84 
> +north_square=0 +south_square=0
>
> second: I can replicate your results, but...
>
> third: I have no idea what it means, and cannot help - any rHealpix 
> users here? Please speak up!
>
> /thomas
>
> Den tir. 9. okt. 2018 kl. 10.19 skrev Rubén Béjar <rbejar at unizar.es 
> <mailto:rbejar at unizar.es>>:
>
>     Hi people,
>
>     I am having some problems with the rHealPix projection and maybe
>     you can help me.
>
>     In (0,0)-rHealPix (i.e. north_square = south_square = 0), I
>     understand that the top left corner is (-PI, 3*PI/4).
>
>     However trying to project that point to lon-lat WGS84 fails.
>
>     I am running proj 5.2.0 (September 15th, 2018) in a terminal in
>     Ubuntu 18.04 (I have compiled it from sources, I am not using the
>     older version from the repositories).
>
>     I assumed that it could be due to some tolerances/epsilon issues.
>     However it does not seem to be so. I have tried with this command:
>
>     proj +proj=rhealpix -f '%.4f' -I +lon_0=0 +a=1 +ellps=WGS84
>     +north_square=0 +south_square=0 -E
>
>     and some of the results I get are these:
>
>     -3.14 2.35
>     -3.14 2.35      *       *
>     -3.13 2.34
>     -3.13 2.34      90.3176 42.4654
>     -3.138 2.348
>     -3.138 2.348    90.3144 41.9431
>     -3.139 2.349
>     -3.139 2.349    *       *
>
>
>     So even after "pushing" the top left corner to the right (from -PI
>     to -3.14, big difference) and down (from 3*PI/4 to 2.35, again big
>     difference) I still don't get a conversion. The closest to the
>     "real" point that seems to work is around (-3.138, 2.349) which is
>     far from that corner (much further than a tolerance).
>
>     This corner is a simple, easily reproducible case. I am having
>     similar problems close to the edges of the N square (and possibly
>     close to some of the edges of other squares too).
>
>     Am I doing something wrong, or is this a problem with rHeallPix in
>     Proj.4?
>
>     Thanks in advance!
>
>     Rubén
>
>
>
-- 

Dr. Rubén Béjar
*Universidad* Zaragoza <https://www.unizar.es>
Advanced Information Systems Laboratory <https://www.iaaa.es/>
Aragon Institute of Engineering Research <http://i3a.unizar.es/>

rbejar at unizar.es <mailto:rbejar at unizar.es> (@rubejar in Twitter) 
<https://twitter.com/rubejar>
*rubenbejar*.com <https://www.rubenbejar.com>
----

Departamento de Informática e Ingeniería de Sistemas

María de Luna 1 / 50018 / Zaragoza (Spain)
Tlf: +34 876 555534 / Fax: +34 976 761914

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181023/6e9e8566/attachment.html>

From andre+joost at nurfuerspam.de  Fri Oct 26 06:43:03 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Fri, 26 Oct 2018 15:43:03 +0200
Subject: [Proj] Understanding 2D Helmert
Message-ID: <pqv5jm$mi0$1@blaine.gmane.org>

Dear list,

since PROJ 5.2 now has made its way into the OSGEO4W binaries, I try to 
understand the new features.

I started up with the 2D helmert transformation with this command line:

echo 1000 0 | proj +proj=helmert +convention=coordinate_frame +x=0 +y=0 
+s=1. +theta=-5

This should rotate a point with X=1000 Y=0 meters by theta=-5 around the 
origin.

But the result of "17.45 0" does not really make sense to me.
X=2000 results to a new X=34.91.

Can anybody shed a light on this?



From tobias.wendorff at tu-dortmund.de  Fri Oct 26 06:52:22 2018
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Fri, 26 Oct 2018 15:52:22 +0200
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <pqv5jm$mi0$1@blaine.gmane.org>
References: <pqv5jm$mi0$1@blaine.gmane.org>
Message-ID: <32f9573c995587e28d4d3a6530ad9c5d.squirrel@webmail.tu-dortmund.de>

Am Fr, 26.10.2018, 15:43 schrieb Andre Joost:
>
> But the result of "17.45 0" does not really make sense to me.
> X=2000 results to a new X=34.91.
>
> Can anybody shed a light on this?

Seems to be in radians: 17.45 to degrees* = 999.8113525
*to degrees: 360/(2*PI()) * 17.45




From kreve at sdfe.dk  Fri Oct 26 07:40:17 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 26 Oct 2018 14:40:17 +0000
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <32f9573c995587e28d4d3a6530ad9c5d.squirrel@webmail.tu-dortmund.de>
References: <pqv5jm$mi0$1@blaine.gmane.org>
	<32f9573c995587e28d4d3a6530ad9c5d.squirrel@webmail.tu-dortmund.de>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEF08F82@S000014.PROD.SITAD.DK>

If that is the case it should just be a matter of changing the
type of the output units internally in the operation. If you
submit a new ticket on the github page with a short description
I'll take a look at it within the next couple of days.

Thanks for reporting this.

/Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org <proj-bounces at lists.maptools.org> På vegne af Tobias Wendorff
Sendt: 26. oktober 2018 15:52
Til: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: Re: [Proj] Understanding 2D Helmert

Am Fr, 26.10.2018, 15:43 schrieb Andre Joost:
>
> But the result of "17.45 0" does not really make sense to me.
> X=2000 results to a new X=34.91.
>
> Can anybody shed a light on this?

Seems to be in radians: 17.45 to degrees* = 999.8113525
*to degrees: 360/(2*PI()) * 17.45


_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From even.rouault at spatialys.com  Fri Oct 26 08:37:32 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 26 Oct 2018 17:37:32 +0200
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEF08F82@S000014.PROD.SITAD.DK>
References: <pqv5jm$mi0$1@blaine.gmane.org>
	<32f9573c995587e28d4d3a6530ad9c5d.squirrel@webmail.tu-dortmund.de>
	<2E885BB293AF0448A0181138489E9A0EAEF08F82@S000014.PROD.SITAD.DK>
Message-ID: <1769996.5TMRvF8muD@even-i700>

On vendredi 26 octobre 2018 14:40:17 CEST Kristian Evers wrote:
> If that is the case it should just be a matter of changing the
> type of the output units internally in the operation. If you
> submit a new ticket on the github page with a short description
> I'll take a look at it within the next couple of days.

Things are fine. This is just that using 'proj' for such operation is 
inapproprate. You should use the new 'cct' binary.

'proj' is just for plain-old projection methods that take long, lat as input, 
whereas here input coordinates are in the projected space

echo 1000 0 0 | cct +proj=helmert +convention=coordinate_frame +theta=-162000

outputs
     707.1068       707.1068        0.0000           inf

(162000 arc-second = 45 deg)

(due to a current oddity of cct, you need to specify 3D coordinates, or add "-
z 0" in the parameters )

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From kreve at sdfe.dk  Fri Oct 26 10:47:03 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 26 Oct 2018 17:47:03 +0000
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <1769996.5TMRvF8muD@even-i700>
References: <pqv5jm$mi0$1@blaine.gmane.org>
	<32f9573c995587e28d4d3a6530ad9c5d.squirrel@webmail.tu-dortmund.de>
	<2E885BB293AF0448A0181138489E9A0EAEF08F82@S000014.PROD.SITAD.DK>
	<1769996.5TMRvF8muD@even-i700>
Message-ID: <12105A19-5CEF-4E43-9011-7331806D9301@sdfe.dk>

Ah yes, I missed that proj was used in the example.
The problem is the same, just located in proj.c instead.

I have pushed a fix here: https://github.com/OSGeo/proj.4/pull/1162

While proj is mainly meant to be used to project geodetic
coordinates it doesn’t hurt to treat other input correctly
when it is possible. It is a bit closer to doing that now. I
am sure there are some exceptions still that I haven’t
found (the code in proj.c structured quite poorly)

/Kristian

On 26 Oct 2018, at 17:37, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

On vendredi 26 octobre 2018 14:40:17 CEST Kristian Evers wrote:
If that is the case it should just be a matter of changing the
type of the output units internally in the operation. If you
submit a new ticket on the github page with a short description
I'll take a look at it within the next couple of days.

Things are fine. This is just that using 'proj' for such operation is
inapproprate. You should use the new 'cct' binary.

'proj' is just for plain-old projection methods that take long, lat as input,
whereas here input coordinates are in the projected space

echo 1000 0 0 | cct +proj=helmert +convention=coordinate_frame +theta=-162000

outputs
    707.1068       707.1068        0.0000           inf

(162000 arc-second = 45 deg)

(due to a current oddity of cct, you need to specify 3D coordinates, or add "-
z 0" in the parameters )

--
Spatialys - Geospatial professional services
http://www.spatialys.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181026/1ad8b657/attachment.html>

From andre+joost at nurfuerspam.de  Fri Oct 26 10:54:22 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Fri, 26 Oct 2018 19:54:22 +0200
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <1769996.5TMRvF8muD@even-i700>
References: <pqv5jm$mi0$1@blaine.gmane.org>	<32f9573c995587e28d4d3a6530ad9c5d.squirrel@webmail.tu-dortmund.de>	<2E885BB293AF0448A0181138489E9A0EAEF08F82@S000014.PROD.SITAD.DK>
	<1769996.5TMRvF8muD@even-i700>
Message-ID: <pqvkat$q8l$1@blaine.gmane.org>

Am 26.10.18 um 17:37 schrieb Even Rouault:
> On vendredi 26 octobre 2018 14:40:17 CEST Kristian Evers wrote:
>> If that is the case it should just be a matter of changing the
>> type of the output units internally in the operation. If you
>> submit a new ticket on the github page with a short description
>> I'll take a look at it within the next couple of days.
>
> Things are fine. This is just that using 'proj' for such operation is
> inapproprate. You should use the new 'cct' binary.
>

Thanks, that worked for me in this way:

cct -z 0 +proj=helmert +convention=coordinate_frame +x=239228.435 
+y=6693404.951 +s=1.0003267 +theta=18795.4443 <HelmertIn.txt 
 >>HelmertOut.txt

Maybe this example should be added to the Helmert and/or cct man pages.

Greetings,
Andre Joost




From even.rouault at spatialys.com  Fri Oct 26 11:11:03 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 26 Oct 2018 20:11:03 +0200
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <pqvkat$q8l$1@blaine.gmane.org>
References: <pqv5jm$mi0$1@blaine.gmane.org> <1769996.5TMRvF8muD@even-i700>
	<pqvkat$q8l$1@blaine.gmane.org>
Message-ID: <4318633.1ktRAMv5k8@even-i700>

On vendredi 26 octobre 2018 19:54:22 CEST Andre Joost wrote:
> Am 26.10.18 um 17:37 schrieb Even Rouault:
> > On vendredi 26 octobre 2018 14:40:17 CEST Kristian Evers wrote:
> >> If that is the case it should just be a matter of changing the
> >> type of the output units internally in the operation. If you
> >> submit a new ticket on the github page with a short description
> >> I'll take a look at it within the next couple of days.
> > 
> > Things are fine. This is just that using 'proj' for such operation is
> > inapproprate. You should use the new 'cct' binary.
> 
> Thanks, that worked for me in this way:
> 
> cct -z 0 +proj=helmert +convention=coordinate_frame +x=239228.435
> +y=6693404.951 +s=1.0003267 +theta=18795.4443 <HelmertIn.txt
> 
>  >>HelmertOut.txt
> 

> Maybe this example should be added to the Helmert and/or cct man pages.
> 

Where do those figures come from ? Is it some official transformation 
registered somewhere ?

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Fri Oct 26 11:13:38 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 26 Oct 2018 20:13:38 +0200
Subject: [Proj] [MOTION] Call for vote on RFC2: Initial integration of "GDAL
	SRS barn" work
Message-ID: <1609731.7Ix53AWsWX@even-i700>

Hi,

Given the feedback I received, I think we can move on a formal vote on the 
adoption of this RFC, which will open the floor to be able to merging it into 
master (I might defer a bit into actually doing it)

As a remainder, the RFC is in https://github.com/OSGeo/proj.4/pull/1149 (I've 
just updated it with the last 2 weeks achievements), and a HTML build of the 
RFC can be found at http://even.rouault.free.fr/proj_cpp_api/rfc-2.html for 
easier reading

~~~~~~~~

Starting with my +1

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Fri Oct 26 13:13:17 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Fri, 26 Oct 2018 13:13:17 -0700
Subject: [Proj] [MOTION] Call for vote on RFC2: Initial integration of
 "GDAL SRS barn" work
In-Reply-To: <1609731.7Ix53AWsWX@even-i700>
References: <1609731.7Ix53AWsWX@even-i700>
Message-ID: <CACmBxytfHBVFOPfCNkkrbZQjZicLHjBr9gyWvgDxztqLroevfg@mail.gmail.com>

I would like to see a revised version before voting strong support.

The work is awesome!  Thanks Even for the hard work.  I just sent some
feedback on the PR.  Most of it is minor grammar stuff..  Apologies for not
reading and commenting on this RFC sooner.  And I see Even is already
powering through the comments.

On Fri, Oct 26, 2018 at 11:16 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi,
>
> Given the feedback I received, I think we can move on a formal vote on the
> adoption of this RFC, which will open the floor to be able to merging it
> into
> master (I might defer a bit into actually doing it)
>
> As a remainder, the RFC is in https://github.com/OSGeo/proj.4/pull/1149
> (I've
> just updated it with the last 2 weeks achievements), and a HTML build of
> the
> RFC can be found at http://even.rouault.free.fr/proj_cpp_api/rfc-2.html
> for
> easier reading
>
> ~~~~~~~~
>
> Starting with my +1
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>


-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181026/1e3ccebf/attachment.html>

From andre+joost at nurfuerspam.de  Sat Oct 27 01:00:17 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Sat, 27 Oct 2018 10:00:17 +0200
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <4318633.1ktRAMv5k8@even-i700>
References: <pqv5jm$mi0$1@blaine.gmane.org>
	<1769996.5TMRvF8muD@even-i700>	<pqvkat$q8l$1@blaine.gmane.org>
	<4318633.1ktRAMv5k8@even-i700>
Message-ID: <pr16ib$pe$1@blaine.gmane.org>

Am 26.10.18 um 20:11 schrieb Even Rouault:
> On vendredi 26 octobre 2018 19:54:22 CEST Andre Joost wrote:

>> Thanks, that worked for me in this way:
>>
>> cct -z 0 +proj=helmert +convention=coordinate_frame +x=239228.435
>> +y=6693404.951 +s=1.0003267 +theta=18795.4443 <HelmertIn.txt
>>
>>   >>HelmertOut.txt
>>
>
>> Maybe this example should be added to the Helmert and/or cct man pages.
>>
>
> Where do those figures come from ? Is it some official transformation
> registered somewhere ?
>

See 
https://gis.stackexchange.com/questions/300219/helmert-transformation 
and 
http://www.maanmittauslaitos.fi/sites/default/files/Finnish_Coordinate_Systems.pdf, 
chapter 6.2

Seems they have 2D helmert transformations defined between KKJ and 
ETRS-TM35 within every triangulation triangle. The link given in the 
document is not valid anymore, but now available on
 http://coordtrans.fgi.fi/kkj_EUREF-FIN.jsp after login.

One other thing that strikes me:
I have 8 lines within my input file, but only the first 7 get 
transformed. The last input line does not end with CR LF.

No difference if I use
cct -z 0 -o cctout.txt +proj=helmert +convention=coordinate_frame 
+x=239228.435 +y=6693404.951 +s=1.0003267 +theta=18795.4443 Helmertin.txt

cs2cs behaves correctly in this respect, all 8 lines transformed.
So I have to end my file with a blank line to get all points with both 
apps. Tested only on Windows 7.

Greetings,
Andre Joost



From even.rouault at spatialys.com  Sat Oct 27 15:03:57 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 28 Oct 2018 00:03:57 +0200
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <pr16ib$pe$1@blaine.gmane.org>
References: <pqv5jm$mi0$1@blaine.gmane.org> <4318633.1ktRAMv5k8@even-i700>
	<pr16ib$pe$1@blaine.gmane.org>
Message-ID: <5585456.JVkAR60jUs@even-i700>

On samedi 27 octobre 2018 10:00:17 CEST Andre Joost wrote:
> Am 26.10.18 um 20:11 schrieb Even Rouault:
> > On vendredi 26 octobre 2018 19:54:22 CEST Andre Joost wrote:
> >> Thanks, that worked for me in this way:
> >> 
> >> cct -z 0 +proj=helmert +convention=coordinate_frame +x=239228.435
> >> +y=6693404.951 +s=1.0003267 +theta=18795.4443 <HelmertIn.txt
> >> 
> >>   >>HelmertOut.txt
> >> 
> >> Maybe this example should be added to the Helmert and/or cct man pages.
> > 
> > Where do those figures come from ? Is it some official transformation
> > registered somewhere ?
> 
> See
> https://gis.stackexchange.com/questions/300219/helmert-transformation
> and
> http://www.maanmittauslaitos.fi/sites/default/files/Finnish_Coordinate_Syste
> ms.pdf, chapter 6.2
> 
> Seems they have 2D helmert transformations defined between KKJ and
> ETRS-TM35 within every triangulation triangle. The link given in the
> document is not valid anymore, but now available on
>  http://coordtrans.fgi.fi/kkj_EUREF-FIN.jsp after login.
>

Thanks for the context. I see the EPSG dataset has a transform from KKJ 
Geographic to ETRS89 using the parameters given in "6.1 The 3D transformation"

As far as the 2D helmert per triangle, this would be impractical to 
incorporate that in the to-be PROJ database. But I guess someone could create 
a grid that approximates the result of such transformation. Depending on the 
step chosen, you could probably achieve very similar results to the "exact" 
method.

One thing that strikes me in the description of the method is that you might 
have some discontinuities when considering points on each side of an edge of 
the triangulation. But perhaps the method is a bit more subtle than this 
explanation and you don't just take the delta_x, delta_y, a1, a2, b1, b2 
parameter of the triangle, but rather consider values of those parameters at 
the 3 points of the triangle, and do a barycentric interpolation with the 
coordinates of the point to be transformed. That way you would have 
continuity.

> One other thing that strikes me:
> I have 8 lines within my input file, but only the first 7 get
> transformed. The last input line does not end with CR LF.

Would be worth opening a ticket about that.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From kreve at sdfe.dk  Sun Oct 28 08:02:05 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 28 Oct 2018 15:02:05 +0000
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <5585456.JVkAR60jUs@even-i700>
References: <pqv5jm$mi0$1@blaine.gmane.org> <4318633.1ktRAMv5k8@even-i700>
	<pr16ib$pe$1@blaine.gmane.org> <5585456.JVkAR60jUs@even-i700>
Message-ID: <28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>



On 28 Oct 2018, at 00:03, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

On samedi 27 octobre 2018 10:00:17 CEST Andre Joost wrote:
Am 26.10.18 um 20:11 schrieb Even Rouault:
On vendredi 26 octobre 2018 19:54:22 CEST Andre Joost wrote:
Thanks, that worked for me in this way:

cct -z 0 +proj=helmert +convention=coordinate_frame +x=239228.435
+y=6693404.951 +s=1.0003267 +theta=18795.4443 <HelmertIn.txt

HelmertOut.txt

Maybe this example should be added to the Helmert and/or cct man pages.

Where do those figures come from ? Is it some official transformation
registered somewhere ?

See
https://gis.stackexchange.com/questions/300219/helmert-transformation
and
http://www.maanmittauslaitos.fi/sites/default/files/Finnish_Coordinate_Syste
ms.pdf, chapter 6.2

Seems they have 2D helmert transformations defined between KKJ and
ETRS-TM35 within every triangulation triangle. The link given in the
document is not valid anymore, but now available on
http://coordtrans.fgi.fi/kkj_EUREF-FIN.jsp after login.


Thanks for the context. I see the EPSG dataset has a transform from KKJ
Geographic to ETRS89 using the parameters given in "6.1 The 3D transformation"

As far as the 2D helmert per triangle, this would be impractical to
incorporate that in the to-be PROJ database. But I guess someone could create
a grid that approximates the result of such transformation. Depending on the
step chosen, you could probably achieve very similar results to the "exact"
method.


Why is that? To me it seems somewhat similar to polynomial mappings (Horner),
in the way that many coefficients are likely to be stored for a given transformation.
Given a clever way of defining the triangles and their corresponding Helmet
parameters I think it should be possible to make these transformations work. At
least as PROJ strings.

One thing that strikes me in the description of the method is that you might
have some discontinuities when considering points on each side of an edge of
the triangulation. But perhaps the method is a bit more subtle than this
explanation and you don't just take the delta_x, delta_y, a1, a2, b1, b2
parameter of the triangle, but rather consider values of those parameters at
the 3 points of the triangle, and do a barycentric interpolation with the
coordinates of the point to be transformed. That way you would have
continuity.

I believe that is the case, yes. Last year we had a workshop within the
Nordic Geodetic Commision on the prospects of implementing the various
transformations used in the Nordic countries. This transformation was
brought up by both the Norwegians and the Fins and as far as I remember
it works exactly like you just described.
I know that both the Fins and the Norwegians are interested in seeing this
operations added in PROJ. I am sure they will be able to provide us with both
knowledge and test material should we want to implement this.

/Kristian


One other thing that strikes me:
I have 8 lines within my input file, but only the first 7 get
transformed. The last input line does not end with CR LF.

Would be worth opening a ticket about that.

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com<http://www.spatialys.com/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181028/b2c6f1fb/attachment.html>

From kreve at sdfe.dk  Sun Oct 28 08:10:55 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 28 Oct 2018 15:10:55 +0000
Subject: [Proj] [MOTION] Call for vote on RFC2: Initial integration of
 "GDAL SRS barn" work
In-Reply-To: <CACmBxytfHBVFOPfCNkkrbZQjZicLHjBr9gyWvgDxztqLroevfg@mail.gmail.com>
References: <1609731.7Ix53AWsWX@even-i700>
	<CACmBxytfHBVFOPfCNkkrbZQjZicLHjBr9gyWvgDxztqLroevfg@mail.gmail.com>
Message-ID: <1443A67E-6FC0-4EF7-9059-B2410E8B0BA6@sdfe.dk>

With the revisions following Kurts request I think this RFC is good to go.

+1 from me.

/Kristian

On 26 Oct 2018, at 22:13, Kurt Schwehr <schwehr at gmail.com<mailto:schwehr at gmail.com>> wrote:

I would like to see a revised version before voting strong support.

The work is awesome!  Thanks Even for the hard work.  I just sent some feedback on the PR.  Most of it is minor grammar stuff..  Apologies for not reading and commenting on this RFC sooner.  And I see Even is already powering through the comments.

On Fri, Oct 26, 2018 at 11:16 AM Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:
Hi,

Given the feedback I received, I think we can move on a formal vote on the
adoption of this RFC, which will open the floor to be able to merging it into
master (I might defer a bit into actually doing it)

As a remainder, the RFC is in https://github.com/OSGeo/proj.4/pull/1149 (I've
just updated it with the last 2 weeks achievements), and a HTML build of the
RFC can be found at http://even.rouault.free.fr/proj_cpp_api/rfc-2.html for
easier reading

~~~~~~~~

Starting with my +1

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com<http://www.spatialys.com/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj


--
--
http://schwehr.org<http://schwehr.org/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181028/48d22984/attachment.html>

From schwehr at gmail.com  Sun Oct 28 08:38:46 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 28 Oct 2018 08:38:46 -0700
Subject: [Proj] [MOTION] Call for vote on RFC2: Initial integration of
 "GDAL SRS barn" work
In-Reply-To: <1443A67E-6FC0-4EF7-9059-B2410E8B0BA6@sdfe.dk>
References: <1609731.7Ix53AWsWX@even-i700>
	<CACmBxytfHBVFOPfCNkkrbZQjZicLHjBr9gyWvgDxztqLroevfg@mail.gmail.com>
	<1443A67E-6FC0-4EF7-9059-B2410E8B0BA6@sdfe.dk>
Message-ID: <CACmBxytY89xdt6n3dAwA+cG=72kQh=7HYYg3N2zdMjQk8QiBiA@mail.gmail.com>

+1 from Kurt

On Sun, Oct 28, 2018, 8:14 AM Kristian Evers <kreve at sdfe.dk> wrote:

> With the revisions following Kurts request I think this RFC is good to go.
>
> +1 from me.
>
> /Kristian
>
> On 26 Oct 2018, at 22:13, Kurt Schwehr <schwehr at gmail.com> wrote:
>
> I would like to see a revised version before voting strong support.
>
> The work is awesome!  Thanks Even for the hard work.  I just sent some
> feedback on the PR.  Most of it is minor grammar stuff..  Apologies for not
> reading and commenting on this RFC sooner.  And I see Even is already
> powering through the comments.
>
> On Fri, Oct 26, 2018 at 11:16 AM Even Rouault <even.rouault at spatialys.com>
> wrote:
>
>> Hi,
>>
>> Given the feedback I received, I think we can move on a formal vote on
>> the
>> adoption of this RFC, which will open the floor to be able to merging it
>> into
>> master (I might defer a bit into actually doing it)
>>
>> As a remainder, the RFC is in https://github.com/OSGeo/proj.4/pull/1149
>> (I've
>> just updated it with the last 2 weeks achievements), and a HTML build of
>> the
>> RFC can be found at http://even.rouault.free.fr/proj_cpp_api/rfc-2.html
>> for
>> easier reading
>>
>> ~~~~~~~~
>>
>> Starting with my +1
>>
>> Even
>>
>> --
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> --
> --
> http://schwehr.org
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181028/b53eed72/attachment.html>

From even.rouault at spatialys.com  Sun Oct 28 09:46:22 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 28 Oct 2018 17:46:22 +0100
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>
References: <pqv5jm$mi0$1@blaine.gmane.org> <5585456.JVkAR60jUs@even-i700>
	<28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>
Message-ID: <17714442.9JeVoJhnCL@even-i700>

On dimanche 28 octobre 2018 15:02:05 CET Kristian Evers wrote:
> Why is that? To me it seems somewhat similar to polynomial mappings
> (Horner), in the way that many coefficients are likely to be stored for a
> given transformation. Given a clever way of defining the triangles and
> their corresponding Helmet parameters I think it should be possible to make
> these transformations work. At least as PROJ strings.

You would need to store hundreds of triangles and their parameters, and have 
PROJ figure out in which triangle a point it. Certainly doable, but not 
directly in the scope of my current work.  And avoid the database to grow too 
big with very particular transforms. That said, 600 triangles with 6 double 
parameters each + the x,y coordinates is just 38.4 KB if you store that as a 
compact binary blob. Some balance to know if it is something acceptable in-db 
(EPSG style transformations have at most 18 parameters each) or out-db 
(grids). The suggestion for the grid approach was to make it more immediatly 
usable.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From andre+joost at nurfuerspam.de  Sun Oct 28 10:46:01 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Sun, 28 Oct 2018 18:46:01 +0100
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <5585456.JVkAR60jUs@even-i700>
References: <pqv5jm$mi0$1@blaine.gmane.org>
	<4318633.1ktRAMv5k8@even-i700>	<pr16ib$pe$1@blaine.gmane.org>
	<5585456.JVkAR60jUs@even-i700>
Message-ID: <pr4sk2$nqb$1@blaine.gmane.org>

Am 28.10.18 um 00:03 schrieb Even Rouault:
> On samedi 27 octobre 2018 10:00:17 CEST Andre Joost wrote:

>> One other thing that strikes me:
>> I have 8 lines within my input file, but only the first 7 get
>> transformed. The last input line does not end with CR LF.
>
> Would be worth opening a ticket about that.
>

Done: https://github.com/OSGeo/proj.4/issues/1166

Can you test it on Linux?

Greetings,
Andre Joost




From luke.bergmann at gmail.com  Sun Oct 28 11:54:44 2018
From: luke.bergmann at gmail.com (Luke Bergmann)
Date: Sun, 28 Oct 2018 11:54:44 -0700
Subject: [Proj] Data-driven projections Re:  Understanding 2D Helmert
In-Reply-To: <C8AE34BC-916D-4B87-AA23-200760B1C055@gmail.com>
References: <pqv5jm$mi0$1@blaine.gmane.org> <5585456.JVkAR60jUs@even-i700>
	<28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>
	<17714442.9JeVoJhnCL@even-i700>
	<C8AE34BC-916D-4B87-AA23-200760B1C055@gmail.com>
Message-ID: <C2BD8CAB-2BF6-4106-9DD8-10721A854D63@gmail.com>

Dear all,

As a fan of the proj[.4] project, as a lurker on these lists, and as hopefully a future contributor to proj, I thought I should jump in here with my first post. Please forgive me my mistakes in protocol and my ignorance! This thread's discussion has come close to functionality that a colleague of mine (David O’Sullivan) and I have long thought would really transform the capabilities of proj and projects downstream (e.g., QGIS), making them much more useful to geography, to ‘analytical cartography’, and to the digital humanities, among other pursuits. 

In particular, we would like to suggest (and we are willing to contribute work to see that) proj implement transformations that are data-driven, or as Waldo Tobler called them, ‘empirical projections’. The easiest example would be the transformation associated with a cartogram. Of course, the math/heuristic to calculate a cartogram is clearly beyond the scope of a library like proj. However, each existing cartogram embodies a transformation, and having the ability to represent that transformation in an approximate/empirical/data-driven form within a proj string would enable your average GIS to suddenly work with a vastly expanded world of coordinate systems. Similarly, there is an explosion of creative transformations out there these days (think about all the heuristics unfolding the globe these days) that may themselves be data-driven and/or may not have been implementable in proj for various reasons—this would enable everyday GIS users to use them. 

We recognize there is already a ‘grid’ functionality for datum transformations within proj, but having a proj projection that interprets and implements arbitrary projections encoded within proj strings is both closer to the spirit of understanding these transformations as projections (as Tobler and others have advocated) and would seem to be  important from a practical perspective, as there are already ways in GIS such as QGIS to input proj strings and then call proj. As academics, we want this functionality to be usable by students in the introductory GIS course. There are other benefits to knowledge as well. The humanities, which see space as more complex, often imagined, would benefit from these transformations. And they would be key to proj enabling the ‘analytical' use of cartography that Waldo Tobler advocated with his ‘analytical cartography’.

How might this work? We gave a paper at SIGSPATIAL in 2017 that started to sketch out one idea. I’ve linked the paper below—I can email you a copy but the proj list doesn’t accept big attachments and I haven’t been able to set up the open sharing function with ACM yet, sorry! Note that the paper goes beyond what I’m able to describe here. Just as this list has been discussing transformations with hundreds of triangles, so too were we. To start, we thought that a proj string could encode how a set of points in one space map into coordinates within another space. Here would be a generic notional proj.4 CRS string:

+proj=ptobler +interpolation=interptype +mapping=mapstring 

where:

- ptobler is a string literal that represents a possible shorthand name for the class of generic projections (‘Ptobler’ is a somewhat droll honorary offered to Waldo Tobler’s cartographic ideas which also references the cartographic achievements of Ptolemy. It first emerged out of conversations around the early Michigan Inter-University Community of Mathematical Geographers (MICMOG))

- interptype is a string representing the name of an interpolation method, e.g., polynomial, bicubic, thin plate spline, TIN. The interpolation method is used to estimate how arbitrary points in (φ,λ) coordinates map into (x,y) space.

- mapstring is a string serialization of the list of known, specified mappings between points in an absolute space such as latitude and longitude (φ, λ) and the projected space (x,y). A naive serialization replacing mapstring in an actual proj string might proceed as follows: ′(φ1,λ1),(x1,y1);(φ2,λ2),(x2,y2);...(φN,λN),(xN,yN);′ All φi, λi, xi, and yi are likewise to be replaced by the appropriate real numbers.

To determine how an arbitrary point would be transformed, as suggested above, different interpolation methods could be defined. One such interpolation would involve having first computed the Delaunay triangulation of the known source points. The arbitrary point would be located within one of those triangles and the associated known transformation of that triangle into the output coordinate system would be used to transform the arbitrary point.

We know that proj strings can’t be infinite in practice, for a variety of reasons, but those limitations still enable a tremendous amount of functionality. We were thinking that one could fit the needed code within a single classical .c file used to implement a projection in proj if needed, though if there were other places for useful code, such as for triangulation or spatial indexes or queries, that would be at least as helpful. 

All this being said, we are new to proj as contributors, and indeed, are academics not professional software developers, so we wanted to come to the community first before going further. Your thoughts are most appreciated. Further, we want to acknowledge and thank you for all your varied efforts to create, maintain, and extend this key node in the open source geo world!

Best wishes,
Luke


Happy to send you a copy of:

Luke R. Bergmann and David O’Sullivan. 2017. Computing with many spaces: Generalizing projections for the digital geohumanities and GIScience. In Proceedings of GeoHumanities’17: 1st ACM SIGSPATIAL Workshop on Geospatial Humanities, Los Angeles Area, CA, USA, November 7–10, 2017 (GeoHumanities’17), 8 pages.
https://doi.org/10.1145/3149858.3149866

https://dl.acm.org/citation.cfm?id=3149866




> On Oct 28, 2018, at 9:46 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> On dimanche 28 octobre 2018 15:02:05 CET Kristian Evers wrote:
>> Why is that? To me it seems somewhat similar to polynomial mappings
>> (Horner), in the way that many coefficients are likely to be stored for a
>> given transformation. Given a clever way of defining the triangles and
>> their corresponding Helmet parameters I think it should be possible to make
>> these transformations work. At least as PROJ strings.
> 
> You would need to store hundreds of triangles and their parameters, and have 
> PROJ figure out in which triangle a point it. Certainly doable, but not 
> directly in the scope of my current work.  And avoid the database to grow too 
> big with very particular transforms. That said, 600 triangles with 6 double 
> parameters each + the x,y coordinates is just 38.4 KB if you store that as a 
> compact binary blob. Some balance to know if it is something acceptable in-db 
> (EPSG style transformations have at most 18 parameters each) or out-db 
> (grids). The suggestion for the grid approach was to make it more immediatly 
> usable.
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj




From howard at hobu.co  Sun Oct 28 15:01:13 2018
From: howard at hobu.co (Howard Butler)
Date: Sun, 28 Oct 2018 17:01:13 -0500
Subject: [Proj] [MOTION] Call for vote on RFC2: Initial integration of
 "GDAL SRS barn" work
In-Reply-To: <CACmBxytY89xdt6n3dAwA+cG=72kQh=7HYYg3N2zdMjQk8QiBiA@mail.gmail.com>
References: <1609731.7Ix53AWsWX@even-i700>
	<CACmBxytfHBVFOPfCNkkrbZQjZicLHjBr9gyWvgDxztqLroevfg@mail.gmail.com>
	<1443A67E-6FC0-4EF7-9059-B2410E8B0BA6@sdfe.dk>
	<CACmBxytY89xdt6n3dAwA+cG=72kQh=7HYYg3N2zdMjQk8QiBiA@mail.gmail.com>
Message-ID: <718b9615-af5d-57fe-8b01-1e2ce4c2ae8b@hobu.co>

+1 from Howard


On 10/28/18 10:38 AM, Kurt Schwehr wrote:
> +1 from Kurt
>
> On Sun, Oct 28, 2018, 8:14 AM Kristian Evers <kreve at sdfe.dk> wrote:
>
>> With the revisions following Kurts request I think this RFC is good to go.
>>
>> +1 from me.
>>
>> /Kristian
>>
>> On 26 Oct 2018, at 22:13, Kurt Schwehr <schwehr at gmail.com> wrote:
>>
>> I would like to see a revised version before voting strong support.
>>
>> The work is awesome!  Thanks Even for the hard work.  I just sent some
>> feedback on the PR.  Most of it is minor grammar stuff..  Apologies for not
>> reading and commenting on this RFC sooner.  And I see Even is already
>> powering through the comments.
>>
>> On Fri, Oct 26, 2018 at 11:16 AM Even Rouault <even.rouault at spatialys.com>
>> wrote:
>>
>>> Hi,
>>>
>>> Given the feedback I received, I think we can move on a formal vote on
>>> the
>>> adoption of this RFC, which will open the floor to be able to merging it
>>> into
>>> master (I might defer a bit into actually doing it)
>>>
>>> As a remainder, the RFC is in https://github.com/OSGeo/proj.4/pull/1149
>>> (I've
>>> just updated it with the last 2 weeks achievements), and a HTML build of
>>> the
>>> RFC can be found at http://even.rouault.free.fr/proj_cpp_api/rfc-2.html
>>> for
>>> easier reading
>>>
>>> ~~~~~~~~
>>>
>>> Starting with my +1
>>>
>>> Even
>>>
>>> --
>>> Spatialys - Geospatial professional services
>>> http://www.spatialys.com
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>> --
>> --
>> http://schwehr.org
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181028/adb37057/attachment.sig>

From kreve at sdfe.dk  Mon Oct 29 00:36:18 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 07:36:18 +0000
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <17714442.9JeVoJhnCL@even-i700>
References: <pqv5jm$mi0$1@blaine.gmane.org> <5585456.JVkAR60jUs@even-i700>
	<28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>
	<17714442.9JeVoJhnCL@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEF0FA35@S000014.PROD.SITAD.DK>

Even, 

I wasn't suggesting that this was something you should take on. Your
comment just peaked my interest as I have been pondering this problem
before.

A gridded solution would definitely be the easiest to implement, but not
necessarily the most satisfactory. I for one would always prefer a solution
as close to the original transformation definition as possible. 

It would probably also be possible to invent a simple text based file format
for storing the triangles and their related parameters. This would be sort
of equivalent to a grid file that can be linked to in the database. Is the
current setup geared for something like that, or is it strictly reserved for
grid files?

/Kristian

-----Oprindelig meddelelse-----
Fra: Even Rouault <even.rouault at spatialys.com> 
Sendt: 28. oktober 2018 17:46
Til: proj at lists.maptools.org
Cc: Kristian Evers <kreve at sdfe.dk>; Andre Joost <andre+joost at nurfuerspam.de>
Emne: Re: [Proj] Understanding 2D Helmert

On dimanche 28 octobre 2018 15:02:05 CET Kristian Evers wrote:
> Why is that? To me it seems somewhat similar to polynomial mappings
> (Horner), in the way that many coefficients are likely to be stored for a
> given transformation. Given a clever way of defining the triangles and
> their corresponding Helmet parameters I think it should be possible to make
> these transformations work. At least as PROJ strings.

You would need to store hundreds of triangles and their parameters, and have 
PROJ figure out in which triangle a point it. Certainly doable, but not 
directly in the scope of my current work.  And avoid the database to grow too 
big with very particular transforms. That said, 600 triangles with 6 double 
parameters each + the x,y coordinates is just 38.4 KB if you store that as a 
compact binary blob. Some balance to know if it is something acceptable in-db 
(EPSG style transformations have at most 18 parameters each) or out-db 
(grids). The suggestion for the grid approach was to make it more immediatly 
usable.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From andre+joost at nurfuerspam.de  Mon Oct 29 01:44:10 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Mon, 29 Oct 2018 09:44:10 +0100
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEF0FA35@S000014.PROD.SITAD.DK>
References: <pqv5jm$mi0$1@blaine.gmane.org>
	<5585456.JVkAR60jUs@even-i700>	<28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>	<17714442.9JeVoJhnCL@even-i700>
	<2E885BB293AF0448A0181138489E9A0EAEF0FA35@S000014.PROD.SITAD.DK>
Message-ID: <pr6h78$m2p$1@blaine.gmane.org>

Kristian,

if you register to the website I mentioned earlier, you get those plain 
text files, 385 kB uncompressed for both directions. For use in PROJ you 
would need an official grant to redistribute them. Looking into the 
files, it looks like a 6-parms affine transformation instead of simple 
Helmert 2D with 4 parameters.

The main difference to current ntv2-like horizontal grids is that this 
method transforms from projected coordinates to projected coordinates, 
instead of reprojecting to degrees, transforming, and reprojecting to a 
new projected CRS. So you have to code something new anyhow.

Would be a nice idea for GSOC, if someone is interested to dive into it.

Greetings,
Andre Joost

Am 29.10.18 um 08:36 schrieb Kristian Evers:
> Even,
>
> I wasn't suggesting that this was something you should take on. Your
> comment just peaked my interest as I have been pondering this problem
> before.
>
> A gridded solution would definitely be the easiest to implement, but not
> necessarily the most satisfactory. I for one would always prefer a solution
> as close to the original transformation definition as possible.
>
> It would probably also be possible to invent a simple text based file format
> for storing the triangles and their related parameters. This would be sort
> of equivalent to a grid file that can be linked to in the database. Is the
> current setup geared for something like that, or is it strictly reserved for
> grid files?
>
> /Kristian
>
> -----Oprindelig meddelelse-----
> Fra: Even Rouault <even.rouault at spatialys.com>
> Sendt: 28. oktober 2018 17:46
> Til: proj at lists.maptools.org
> Cc: Kristian Evers <kreve at sdfe.dk>; Andre Joost <andre+joost at nurfuerspam.de>
> Emne: Re: [Proj] Understanding 2D Helmert
>
> On dimanche 28 octobre 2018 15:02:05 CET Kristian Evers wrote:
>> Why is that? To me it seems somewhat similar to polynomial mappings
>> (Horner), in the way that many coefficients are likely to be stored for a
>> given transformation. Given a clever way of defining the triangles and
>> their corresponding Helmet parameters I think it should be possible to make
>> these transformations work. At least as PROJ strings.
>
> You would need to store hundreds of triangles and their parameters, and have
> PROJ figure out in which triangle a point it. Certainly doable, but not
> directly in the scope of my current work.  And avoid the database to grow too
> big with very particular transforms. That said, 600 triangles with 6 double
> parameters each + the x,y coordinates is just 38.4 KB if you store that as a
> compact binary blob. Some balance to know if it is something acceptable in-db
> (EPSG style transformations have at most 18 parameters each) or out-db
> (grids). The suggestion for the grid approach was to make it more immediatly
> usable.
>




From even.rouault at spatialys.com  Mon Oct 29 02:58:14 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 29 Oct 2018 10:58:14 +0100
Subject: [Proj] Understanding 2D Helmert
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEF0FA35@S000014.PROD.SITAD.DK>
References: <pqv5jm$mi0$1@blaine.gmane.org> <17714442.9JeVoJhnCL@even-i700>
	<2E885BB293AF0448A0181138489E9A0EAEF0FA35@S000014.PROD.SITAD.DK>
Message-ID: <11677509.eBPirhy3eg@even-i700>

> It would probably also be possible to invent a simple text based file format
> for storing the triangles and their related parameters. This would be sort
> of equivalent to a grid file that can be linked to in the database. Is the
> current setup geared for something like that, or is it strictly reserved
> for grid files?

There are 2 possibilities I can see with the current state of the code. Either 
use the table that is dedicated to grid transform and invent a method name for 
that method, and add the code that translates this into a PROJ string. This 
has the advantage that the method that the CoordinateOperation::gridsNeeded() 
can be used and users can know that the transform depends on a external 
resource they must possibly grab from somewhere. Or just use the capability of 
putting an arbitrary PROJ string to describe a transformation between 2 CRSs 
codes (blackbox approach).

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From rmain.mws at gmail.com  Mon Oct 29 09:30:15 2018
From: rmain.mws at gmail.com (Robb Main)
Date: Mon, 29 Oct 2018 12:30:15 -0400
Subject: [Proj] cs2cs - specifying UTM zone on command line
Message-ID: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>

When converting many lat,long coordinates to UTM, is there some way to
setup cs2cs to calculate the UTM zone based on the longitude of the source
cordinate system, rather than having to specify the zone on the command
line?

What I'm looking for is something like: instead of this:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27
./input.data
you could instead specify:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27
./input.data
where 'zone=auto' might tell the algorithm to figure the zone out based on
longitude of the input coordinate. This would ensure the output data would
be correct, even if the input data file contains coordinates that span
multiple UTM zones.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/87ebad74/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 10:05:50 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 17:05:50 +0000
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
Message-ID: <3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>

Robb,

/Kristian

On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

When converting many lat,long coordinates to UTM, is there some way to setup cs2cs to calculate the UTM zone based on the longitude of the source cordinate system, rather than having to specify the zone on the command line?

No. You can probably do something clever in a shell script if you want, but it is not possible with any PROJ tool. See [0] for an overview of how to determine the nearest UTM zone of a coordinate.


What I'm looking for is something like: instead of this:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27 ./input.data
you could instead specify:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27 ./input.data
where 'zone=auto' might tell the algorithm to figure the zone out based on longitude of the input coordinate. This would ensure the output data would be correct, even if the input data file contains coordinates that span multiple UTM zones.

What you call correct, I regard as potentially incompatible coordinates. What you are proposing here is fundamentally breaking the promise that you are given by the cs2cs application: cs2cs transform coordinates from one coordinate reference system to another. With your proposed auto-zoned UTM the output crs would not be properly defined and your output coordinates would be incompatible in the case that they span several UTM zones. You are much better of just sticking to one zone - cs2cs will deliver numerically stable coordinates several thousands of kilometers outside the chosen zone.

/Kristian

[0] https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/cb4a0c37/attachment.html>

From rmain.mws at gmail.com  Mon Oct 29 10:34:50 2018
From: rmain.mws at gmail.com (Robb Main)
Date: Mon, 29 Oct 2018 13:34:50 -0400
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
Message-ID: <CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>

Thanks for the link, Kristian.

It seemed to me that the source code (specifically proj_etmerc.c:338 - 354)
looked like it would calculate the zone if one wasn't supplied (although it
also doesn't handle the 'exception' cases mentioned in your link), though I
was surprised when I could not find a way to request conversion without
specifying a zone.

As I understand your statement though, there is no way to do this with the
current implementation of PROJ tools.
On the subject of 'correctness', doesn't using a 'clever shell script' like
you suggest amount to doing what I was requesting, just doing it outside
the PROJ framework?

Regards,
Robb.

On Mon, Oct 29, 2018 at 1:07 PM Kristian Evers <kreve at sdfe.dk> wrote:

> Robb,
>
> /Kristian
>
> On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com> wrote:
>
> When converting many lat,long coordinates to UTM, is there some way to
> setup cs2cs to calculate the UTM zone based on the longitude of the source
> cordinate system, rather than having to specify the zone on the command
> line?
>
>
> No. You can probably do something clever in a shell script if you want,
> but it is not possible with any PROJ tool. See [0] for an overview of how
> to determine the nearest UTM zone of a coordinate.
>
>
> What I'm looking for is something like: instead of this:
>   cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27
> ./input.data
> you could instead specify:
>   cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27
> ./input.data
> where 'zone=auto' might tell the algorithm to figure the zone out based on
> longitude of the input coordinate. This would ensure the output data would
> be correct, even if the input data file contains coordinates that span
> multiple UTM zones.
>
>
> What you call correct, I regard as potentially incompatible coordinates.
> What you are proposing here is fundamentally breaking the promise that you
> are given by the cs2cs application: cs2cs transform coordinates from one
> coordinate reference system to another. With your proposed auto-zoned UTM
> the output crs would not be properly defined and your output coordinates
> would be incompatible in the case that they span several UTM zones. You are
> much better of just sticking to one zone - cs2cs will deliver numerically
> stable coordinates several thousands of kilometers outside the chosen zone.
>
> /Kristian
>
> [0]
> https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/a7d6e17e/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 10:49:09 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 17:49:09 +0000
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
Message-ID: <2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>

Robb,

On 29 Oct 2018, at 18:34, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

Thanks for the link, Kristian.

It seemed to me that the source code (specifically proj_etmerc.c:338 - 354) looked like it would calculate the zone if one wasn't supplied (although it also doesn't handle the 'exception' cases mentioned in your link), though I was surprised when I could not find a way to request conversion without specifying a zone.


In that part of the code it tries to determine the zone from the central meridian set with +lon_0. If neither +zone or +lon_0 is set PROJ defaults to zone 30 (based on the default value of +lon_0 which is 0 when not specified).

As I understand your statement though, there is no way to do this with the current implementation of PROJ tools.

Correct.

On the subject of 'correctness', doesn't using a 'clever shell script' like you suggest amount to doing what I was requesting, just doing it outside the PROJ framework?

Yes. I am not saying that it is a smart thing to do, but if you really want to, there’s a way to do it.

/Kristian

Regards,
Robb.

On Mon, Oct 29, 2018 at 1:07 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Robb,

/Kristian

On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

When converting many lat,long coordinates to UTM, is there some way to setup cs2cs to calculate the UTM zone based on the longitude of the source cordinate system, rather than having to specify the zone on the command line?

No. You can probably do something clever in a shell script if you want, but it is not possible with any PROJ tool. See [0] for an overview of how to determine the nearest UTM zone of a coordinate.


What I'm looking for is something like: instead of this:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27 ./input.data
you could instead specify:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27 ./input.data
where 'zone=auto' might tell the algorithm to figure the zone out based on longitude of the input coordinate. This would ensure the output data would be correct, even if the input data file contains coordinates that span multiple UTM zones.

What you call correct, I regard as potentially incompatible coordinates. What you are proposing here is fundamentally breaking the promise that you are given by the cs2cs application: cs2cs transform coordinates from one coordinate reference system to another. With your proposed auto-zoned UTM the output crs would not be properly defined and your output coordinates would be incompatible in the case that they span several UTM zones. You are much better of just sticking to one zone - cs2cs will deliver numerically stable coordinates several thousands of kilometers outside the chosen zone.

/Kristian

[0] https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/b4f4e194/attachment.html>

From rmain.mws at gmail.com  Mon Oct 29 11:11:41 2018
From: rmain.mws at gmail.com (Robb Main)
Date: Mon, 29 Oct 2018 14:11:41 -0400
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
Message-ID: <CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>

One final question, and I'll stop beating this to death:
>From my naive viewpoint, I want to supply a lat & long coordinate, and
receive a UTM coordinate (i.e, zone, easting, northing).
Obviously, determining a zone is the first step required in the process,
but it would seem to be something that cs2cs could (/should?) handle.
The zone IS determined from the longitude (even if it is supplied on the
command line).

Is there some philosophical reason PROJ tools don't currently do this?
Would there be any point in me coding up a patch to support this &
submitting a pull request?
(I guess that's really two questions...).
Thanks again,
Robb.


On Mon, Oct 29, 2018 at 1:55 PM Kristian Evers <kreve at sdfe.dk> wrote:

> Robb,
>
> On 29 Oct 2018, at 18:34, Robb Main <rmain.mws at gmail.com> wrote:
>
> Thanks for the link, Kristian.
>
> It seemed to me that the source code (specifically proj_etmerc.c:338 -
> 354) looked like it would calculate the zone if one wasn't supplied
> (although it also doesn't handle the 'exception' cases mentioned in your
> link), though I was surprised when I could not find a way to request
> conversion without specifying a zone.
>
>
> In that part of the code it tries to determine the zone from the central
> meridian set with +lon_0. If neither +zone or +lon_0 is set PROJ defaults
> to zone 30 (based on the default value of +lon_0 which is 0 when not
> specified).
>
> As I understand your statement though, there is no way to do this with the
> current implementation of PROJ tools.
>
>
> Correct.
>
> On the subject of 'correctness', doesn't using a 'clever shell script'
> like you suggest amount to doing what I was requesting, just doing it
> outside the PROJ framework?
>
>
> Yes. I am not saying that it is a smart thing to do, but if you really
> want to, there’s a way to do it.
>
> /Kristian
>
> Regards,
> Robb.
>
> On Mon, Oct 29, 2018 at 1:07 PM Kristian Evers <kreve at sdfe.dk> wrote:
>
>> Robb,
>>
>> /Kristian
>>
>> On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com> wrote:
>>
>> When converting many lat,long coordinates to UTM, is there some way to
>> setup cs2cs to calculate the UTM zone based on the longitude of the source
>> cordinate system, rather than having to specify the zone on the command
>> line?
>>
>>
>> No. You can probably do something clever in a shell script if you want,
>> but it is not possible with any PROJ tool. See [0] for an overview of how
>> to determine the nearest UTM zone of a coordinate.
>>
>>
>> What I'm looking for is something like: instead of this:
>>   cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27
>> ./input.data
>> you could instead specify:
>>   cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27
>> ./input.data
>> where 'zone=auto' might tell the algorithm to figure the zone out based
>> on longitude of the input coordinate. This would ensure the output data
>> would be correct, even if the input data file contains coordinates that
>> span multiple UTM zones.
>>
>>
>> What you call correct, I regard as potentially incompatible coordinates.
>> What you are proposing here is fundamentally breaking the promise that you
>> are given by the cs2cs application: cs2cs transform coordinates from one
>> coordinate reference system to another. With your proposed auto-zoned UTM
>> the output crs would not be properly defined and your output coordinates
>> would be incompatible in the case that they span several UTM zones. You are
>> much better of just sticking to one zone - cs2cs will deliver numerically
>> stable coordinates several thousands of kilometers outside the chosen zone.
>>
>> /Kristian
>>
>> [0]
>> https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/692093a3/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 11:42:48 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 18:42:48 +0000
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
Message-ID: <C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>



On 29 Oct 2018, at 19:11, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

One final question, and I'll stop beating this to death:
From my naive viewpoint, I want to supply a lat & long coordinate, and receive a UTM coordinate (i.e, zone, easting, northing).
Obviously, determining a zone is the first step required in the process, but it would seem to be something that cs2cs could (/should?) handle.
The zone IS determined from the longitude (even if it is supplied on the command line).

Is there some philosophical reason PROJ tools don't currently do this?


Theoretically PROJ could do that, but I don’t think that it should. The zone is set up before any coordinates are passed to the projection, so given the current architecture PROJ wouldn’t know what to base the zone choice on. This could of course be changed so that for every coordinate passed to the projection an “optimal zone” could be determined from the input and the projection parameters adjusted accordingly. Let’s have a look at what that would mean in a real world implementation. Say you have two coordinates with the same latitude and the longitude spaced exactly six degrees. For instance somewhere in Germany, 51N 6E and 51N 12E. Using a dynamically assigned UTM zone the first coordinate would end up in zone 31 and the second in zone 32. Let’s look at the UTM coordinates for both points:

$ echo 6 51 | proj +proj=utm +zone=31
710488.86       5654109.18

$ echo 12 51 | proj +proj=utm +zone=32
710488.86       5654109.18

They are exactly the same. Now image converting a dataset of the German borders with a UTM projection that dynamically assigns the zone. That is going to be a very big mess when plotted in a map. Additionally, you have eliminated the possibility to convert the data back to geodetic coordinates - which one of the 60 possible ways do you choose?

Would there be any point in me coding up a patch to support this & submitting a pull request?

No.

(I guess that's really two questions...).
Thanks again,
Robb.


On Mon, Oct 29, 2018 at 1:55 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Robb,

On 29 Oct 2018, at 18:34, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

Thanks for the link, Kristian.

It seemed to me that the source code (specifically proj_etmerc.c:338 - 354) looked like it would calculate the zone if one wasn't supplied (although it also doesn't handle the 'exception' cases mentioned in your link), though I was surprised when I could not find a way to request conversion without specifying a zone.


In that part of the code it tries to determine the zone from the central meridian set with +lon_0. If neither +zone or +lon_0 is set PROJ defaults to zone 30 (based on the default value of +lon_0 which is 0 when not specified).

As I understand your statement though, there is no way to do this with the current implementation of PROJ tools.

Correct.

On the subject of 'correctness', doesn't using a 'clever shell script' like you suggest amount to doing what I was requesting, just doing it outside the PROJ framework?

Yes. I am not saying that it is a smart thing to do, but if you really want to, there’s a way to do it.

/Kristian

Regards,
Robb.

On Mon, Oct 29, 2018 at 1:07 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Robb,

/Kristian

On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

When converting many lat,long coordinates to UTM, is there some way to setup cs2cs to calculate the UTM zone based on the longitude of the source cordinate system, rather than having to specify the zone on the command line?

No. You can probably do something clever in a shell script if you want, but it is not possible with any PROJ tool. See [0] for an overview of how to determine the nearest UTM zone of a coordinate.


What I'm looking for is something like: instead of this:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27 ./input.data
you could instead specify:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27 ./input.data
where 'zone=auto' might tell the algorithm to figure the zone out based on longitude of the input coordinate. This would ensure the output data would be correct, even if the input data file contains coordinates that span multiple UTM zones.

What you call correct, I regard as potentially incompatible coordinates. What you are proposing here is fundamentally breaking the promise that you are given by the cs2cs application: cs2cs transform coordinates from one coordinate reference system to another. With your proposed auto-zoned UTM the output crs would not be properly defined and your output coordinates would be incompatible in the case that they span several UTM zones. You are much better of just sticking to one zone - cs2cs will deliver numerically stable coordinates several thousands of kilometers outside the chosen zone.

/Kristian

[0] https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/98971e96/attachment.html>

From rmain.mws at gmail.com  Mon Oct 29 12:20:36 2018
From: rmain.mws at gmail.com (Robb Main)
Date: Mon, 29 Oct 2018 15:20:36 -0400
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
Message-ID: <CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>

I understand your concern.
Where my thoughts deviate (and I have no background in this - only dealing
with it due to immediate necessity), is that I'd consider the UTM zone a
part of the OUTPUT, whereas you seem to consider it part of the required
input (lat, long & UTM zone).

So in my case:
 in: lat & long
out: UTM zone, easting & northing.

so the process would look more like:
$ echo 6 51 | proj +proj=utm +zone=auto
31    710488.86       5654109.18

$ echo 12 51 | proj +proj=utm +zone=auto
32    710488.86       5654109.18

note that if you DID specify the zone on the command line (as your example
'+zone=32' instead of '+zone=auto') , there would be no change to the
current output (printing the zone as output would be redundant).
Regards,
Robb.






On Mon, Oct 29, 2018 at 2:53 PM Kristian Evers <kreve at sdfe.dk> wrote:

>
>
> On 29 Oct 2018, at 19:11, Robb Main <rmain.mws at gmail.com> wrote:
>
> One final question, and I'll stop beating this to death:
> From my naive viewpoint, I want to supply a lat & long coordinate, and
> receive a UTM coordinate (i.e, zone, easting, northing).
> Obviously, determining a zone is the first step required in the process,
> but it would seem to be something that cs2cs could (/should?) handle.
>
> The zone IS determined from the longitude (even if it is supplied on the
> command line).
>
>
> Is there some philosophical reason PROJ tools don't currently do this?
>
>
>
> Theoretically PROJ could do that, but I don’t think that it should. The
> zone is set up before any coordinates are passed to the projection, so
> given the current architecture PROJ wouldn’t know what to base the zone
> choice on. This could of course be changed so that for every coordinate
> passed to the projection an “optimal zone” could be determined from the
> input and the projection parameters adjusted accordingly. Let’s have a look
> at what that would mean in a real world implementation. Say you have two
> coordinates with the same latitude and the longitude spaced exactly six
> degrees. For instance somewhere in Germany, 51N 6E and 51N 12E. Using a
> dynamically assigned UTM zone the first coordinate would end up in zone 31
> and the second in zone 32. Let’s look at the UTM coordinates for both
> points:
>
> $ echo 6 51 | proj +proj=utm +zone=31
> 710488.86       5654109.18
>
> $ echo 12 51 | proj +proj=utm +zone=32
> 710488.86       5654109.18
>
> They are exactly the same. Now image converting a dataset of the German
> borders with a UTM projection that dynamically assigns the zone. That is
> going to be a very big mess when plotted in a map. Additionally, you have
> eliminated the possibility to convert the data back to geodetic coordinates
> - which one of the 60 possible ways do you choose?
>
> Would there be any point in me coding up a patch to support this &
> submitting a pull request?
>
>
> No.
>
> (I guess that's really two questions...).
> Thanks again,
> Robb.
>
>
> On Mon, Oct 29, 2018 at 1:55 PM Kristian Evers <kreve at sdfe.dk> wrote:
>
>> Robb,
>>
>> On 29 Oct 2018, at 18:34, Robb Main <rmain.mws at gmail.com> wrote:
>>
>> Thanks for the link, Kristian.
>>
>> It seemed to me that the source code (specifically proj_etmerc.c:338 -
>> 354) looked like it would calculate the zone if one wasn't supplied
>> (although it also doesn't handle the 'exception' cases mentioned in your
>> link), though I was surprised when I could not find a way to request
>> conversion without specifying a zone.
>>
>>
>> In that part of the code it tries to determine the zone from the central
>> meridian set with +lon_0. If neither +zone or +lon_0 is set PROJ defaults
>> to zone 30 (based on the default value of +lon_0 which is 0 when not
>> specified).
>>
>> As I understand your statement though, there is no way to do this with
>> the current implementation of PROJ tools.
>>
>>
>> Correct.
>>
>> On the subject of 'correctness', doesn't using a 'clever shell script'
>> like you suggest amount to doing what I was requesting, just doing it
>> outside the PROJ framework?
>>
>>
>> Yes. I am not saying that it is a smart thing to do, but if you really
>> want to, there’s a way to do it.
>>
>> /Kristian
>>
>> Regards,
>> Robb.
>>
>> On Mon, Oct 29, 2018 at 1:07 PM Kristian Evers <kreve at sdfe.dk> wrote:
>>
>>> Robb,
>>>
>>> /Kristian
>>>
>>> On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com> wrote:
>>>
>>> When converting many lat,long coordinates to UTM, is there some way to
>>> setup cs2cs to calculate the UTM zone based on the longitude of the source
>>> cordinate system, rather than having to specify the zone on the command
>>> line?
>>>
>>>
>>> No. You can probably do something clever in a shell script if you want,
>>> but it is not possible with any PROJ tool. See [0] for an overview of how
>>> to determine the nearest UTM zone of a coordinate.
>>>
>>>
>>> What I'm looking for is something like: instead of this:
>>>   cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27
>>> ./input.data
>>> you could instead specify:
>>>   cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27
>>> ./input.data
>>> where 'zone=auto' might tell the algorithm to figure the zone out based
>>> on longitude of the input coordinate. This would ensure the output data
>>> would be correct, even if the input data file contains coordinates that
>>> span multiple UTM zones.
>>>
>>>
>>> What you call correct, I regard as potentially incompatible coordinates.
>>> What you are proposing here is fundamentally breaking the promise that you
>>> are given by the cs2cs application: cs2cs transform coordinates from one
>>> coordinate reference system to another. With your proposed auto-zoned UTM
>>> the output crs would not be properly defined and your output coordinates
>>> would be incompatible in the case that they span several UTM zones. You are
>>> much better of just sticking to one zone - cs2cs will deliver numerically
>>> stable coordinates several thousands of kilometers outside the chosen zone.
>>>
>>> /Kristian
>>>
>>> [0]
>>> https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/67d09e45/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 12:25:11 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 19:25:11 +0000
Subject: [Proj] Data-driven projections Re:  Understanding 2D Helmert
In-Reply-To: <C2BD8CAB-2BF6-4106-9DD8-10721A854D63@gmail.com>
References: <pqv5jm$mi0$1@blaine.gmane.org> <5585456.JVkAR60jUs@even-i700>
	<28EC5B43-49FD-40B0-A626-9BC3F77BC863@sdfe.dk>
	<17714442.9JeVoJhnCL@even-i700>
	<C8AE34BC-916D-4B87-AA23-200760B1C055@gmail.com>
	<C2BD8CAB-2BF6-4106-9DD8-10721A854D63@gmail.com>
Message-ID: <3AB13205-DC1D-4A7D-9ED2-164D078EE273@sdfe.dk>

Luke,

It is an interesting idea you and your colleague are bringing to the table here. I can certainly see why it is intriguing to have data-driven projections readily available in GIS applications. I am not entirely convinced that PROJ is the right tool for the job though. I can easily see PROJ implement various generic mappings consisting of an arbitrary set of parameters [0], where it would be up to the user of PROJ to submit the needed parameters. Similarly to how various projection parameters are in the hands of the user already.

The paper doesn’t go into much details with the math behind the mappings, nor how the mapping between geodetic coordinates and projected coordinates stated in the mapstring should be determined (it seems like there is a chicken and egg type of problem here). For me to really be able make a judgement if this is suitable for PROJ I need some elaboration on those points.

/Kristian

[0] PROJ’s Horner transformation is an example of one such mapping (https://proj4.org/operations/transformations/horner.html?highlight=horner)

On 28 Oct 2018, at 19:54, Luke Bergmann <luke.bergmann at gmail.com<mailto:luke.bergmann at gmail.com>> wrote:



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/7a1acaab/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 12:38:38 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 19:38:38 +0000
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
Message-ID: <39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>

Well… it is an interesting thought experiment, but what you are proposing goes against the grain of the architecture of PROJ and the cs2cs application. Encoding coordinate system metadata in the output coordinate is simply out of the scope of this application. So is the dynamical projection setup on a per-coordinate basis.

With that being said, it is totally doable if you bend the internal architectural rules a bit. It shouldn’t be that difficult to implement what you are proposing and if you really want to try this I’ll encourage you to do so in a fork of the code. I won’t merge it into the PROJ source tree but you are welcome to maintain your own fork including your custom UTM projection that handles the zone assignment just the way you like it - that’s the beauty of open source software :-)

/Kristian

On 29 Oct 2018, at 20:20, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

I understand your concern.
Where my thoughts deviate (and I have no background in this - only dealing with it due to immediate necessity), is that I'd consider the UTM zone a part of the OUTPUT, whereas you seem to consider it part of the required input (lat, long & UTM zone).

So in my case:
 in: lat & long
out: UTM zone, easting & northing.

so the process would look more like:
$ echo 6 51 | proj +proj=utm +zone=auto
31    710488.86       5654109.18

$ echo 12 51 | proj +proj=utm +zone=auto
32    710488.86       5654109.18

note that if you DID specify the zone on the command line (as your example '+zone=32' instead of '+zone=auto') , there would be no change to the current output (printing the zone as output would be redundant).
Regards,
Robb.






On Mon, Oct 29, 2018 at 2:53 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:


On 29 Oct 2018, at 19:11, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

One final question, and I'll stop beating this to death:
From my naive viewpoint, I want to supply a lat & long coordinate, and receive a UTM coordinate (i.e, zone, easting, northing).
Obviously, determining a zone is the first step required in the process, but it would seem to be something that cs2cs could (/should?) handle.
The zone IS determined from the longitude (even if it is supplied on the command line).

Is there some philosophical reason PROJ tools don't currently do this?


Theoretically PROJ could do that, but I don’t think that it should. The zone is set up before any coordinates are passed to the projection, so given the current architecture PROJ wouldn’t know what to base the zone choice on. This could of course be changed so that for every coordinate passed to the projection an “optimal zone” could be determined from the input and the projection parameters adjusted accordingly. Let’s have a look at what that would mean in a real world implementation. Say you have two coordinates with the same latitude and the longitude spaced exactly six degrees. For instance somewhere in Germany, 51N 6E and 51N 12E. Using a dynamically assigned UTM zone the first coordinate would end up in zone 31 and the second in zone 32. Let’s look at the UTM coordinates for both points:

$ echo 6 51 | proj +proj=utm +zone=31
710488.86       5654109.18

$ echo 12 51 | proj +proj=utm +zone=32
710488.86       5654109.18

They are exactly the same. Now image converting a dataset of the German borders with a UTM projection that dynamically assigns the zone. That is going to be a very big mess when plotted in a map. Additionally, you have eliminated the possibility to convert the data back to geodetic coordinates - which one of the 60 possible ways do you choose?

Would there be any point in me coding up a patch to support this & submitting a pull request?

No.

(I guess that's really two questions...).
Thanks again,
Robb.


On Mon, Oct 29, 2018 at 1:55 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Robb,

On 29 Oct 2018, at 18:34, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

Thanks for the link, Kristian.

It seemed to me that the source code (specifically proj_etmerc.c:338 - 354) looked like it would calculate the zone if one wasn't supplied (although it also doesn't handle the 'exception' cases mentioned in your link), though I was surprised when I could not find a way to request conversion without specifying a zone.


In that part of the code it tries to determine the zone from the central meridian set with +lon_0. If neither +zone or +lon_0 is set PROJ defaults to zone 30 (based on the default value of +lon_0 which is 0 when not specified).

As I understand your statement though, there is no way to do this with the current implementation of PROJ tools.

Correct.

On the subject of 'correctness', doesn't using a 'clever shell script' like you suggest amount to doing what I was requesting, just doing it outside the PROJ framework?

Yes. I am not saying that it is a smart thing to do, but if you really want to, there’s a way to do it.

/Kristian

Regards,
Robb.

On Mon, Oct 29, 2018 at 1:07 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Robb,

/Kristian

On 29 Oct 2018, at 17:30, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

When converting many lat,long coordinates to UTM, is there some way to setup cs2cs to calculate the UTM zone based on the longitude of the source cordinate system, rather than having to specify the zone on the command line?

No. You can probably do something clever in a shell script if you want, but it is not possible with any PROJ tool. See [0] for an overview of how to determine the nearest UTM zone of a coordinate.


What I'm looking for is something like: instead of this:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=10 +datum=NAD27 ./input.data
you could instead specify:
  cs2cs +proj=latlong +data=NAD83 +to +proj=utm +zone=auto +datum=NAD27 ./input.data
where 'zone=auto' might tell the algorithm to figure the zone out based on longitude of the input coordinate. This would ensure the output data would be correct, even if the input data file contains coordinates that span multiple UTM zones.

What you call correct, I regard as potentially incompatible coordinates. What you are proposing here is fundamentally breaking the promise that you are given by the cs2cs application: cs2cs transform coordinates from one coordinate reference system to another. With your proposed auto-zoned UTM the output crs would not be properly defined and your output coordinates would be incompatible in the case that they span several UTM zones. You are much better of just sticking to one zone - cs2cs will deliver numerically stable coordinates several thousands of kilometers outside the chosen zone.

/Kristian

[0] https://stackoverflow.com/questions/9186496/determining-utm-zone-to-convert-from-longitude-latitude

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/2db999b4/attachment.html>

From martin.desruisseaux at geomatys.com  Mon Oct 29 13:03:27 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 29 Oct 2018 21:03:27 +0100
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
	<39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>
Message-ID: <4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>


>> On 29 Oct 2018, at 20:20, Robb Main <rmain.mws at gmail.com
>> <mailto:rmain.mws at gmail.com>> wrote:
>>
>> (…snip…) I'd consider the UTM zone a part of the OUTPUT, whereas you
>> seem to consider it part of the required input (lat, long & UTM zone).
>>
>> So in my case:
>>  in: lat & long
>> out: UTM zone, easting & northing.
>>
>> so the process would look more like:
>> $ echo 6 51 | proj +proj=utm +zone=auto
>> 31    710488.86       5654109.18


Actually such operation already exists in EPSG database (not sure if it
exists in Proj4 however). This is the Operation Method EPSG::9824 -
Transverse Mercator Zoned Grid System. The output is basically:

    E = Z*10^6 + (result of projection for zone Z)

This is not widely used however.

    Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/9e41117f/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 13:14:46 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 20:14:46 +0000
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
	<39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>
	<4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
Message-ID: <D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>

Okay, so basically encoding the zone in the easting? Better, but I still think it is weird. At least it produces somewhat sane output.

Is that operation used by any CRS in the EPSG database?

/Kristian

On 29 Oct 2018, at 21:03, Martin Desruisseaux <martin.desruisseaux at geomatys.com<mailto:martin.desruisseaux at geomatys.com>> wrote:


On 29 Oct 2018, at 20:20, Robb Main <rmain.mws at gmail.com<mailto:rmain.mws at gmail.com>> wrote:

(…snip…) I'd consider the UTM zone a part of the OUTPUT, whereas you seem to consider it part of the required input (lat, long & UTM zone).

So in my case:
 in: lat & long
out: UTM zone, easting & northing.

so the process would look more like:
$ echo 6 51 | proj +proj=utm +zone=auto
31    710488.86       5654109.18


Actually such operation already exists in EPSG database (not sure if it exists in Proj4 however). This is the Operation Method EPSG::9824 - Transverse Mercator Zoned Grid System. The output is basically:

E = Z*10^6 + (result of projection for zone Z)

This is not widely used however.

    Martin


_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/d9ca68ed/attachment.html>

From charles at karney.com  Mon Oct 29 13:37:45 2018
From: charles at karney.com (Charles Karney)
Date: Mon, 29 Oct 2018 16:37:45 -0400
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
	<39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>
	<4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
Message-ID: <1632070a-be11-819e-76d3-610663ebfba2@karney.com>

Is there a provision for encoding the hemisphere (north/south) to
distinguish between
  40N       3E -> 31n 500000 4427757
  50.30230S 3E -> 31s 500000 4427757

On 10/29/18 4:03 PM, Martin Desruisseaux wrote:
> 
>>> On 29 Oct 2018, at 20:20, Robb Main <rmain.mws at gmail.com 
>>> <mailto:rmain.mws at gmail.com>> wrote:
>>>
>>> (…snip…) I'd consider the UTM zone a part of the OUTPUT, whereas you 
>>> seem to consider it part of the required input (lat, long & UTM zone).
>>>
>>> So in my case:
>>>  in: lat & long
>>> out: UTM zone, easting & northing.
>>>
>>> so the process would look more like:
>>> $ echo 6 51 | proj +proj=utm +zone=auto
>>> 31    710488.86       5654109.18
> 
> 
> Actually such operation already exists in EPSG database (not sure if it 
> exists in Proj4 however). This is the Operation Method EPSG::9824 - 
> Transverse Mercator Zoned Grid System. The output is basically:
> 
>     E = Z*10^6 + (result of projection for zone Z)
> 
> This is not widely used however.
> 
>      Martin
> 
> 
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 


From even.rouault at spatialys.com  Mon Oct 29 13:51:24 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 29 Oct 2018 21:51:24 +0100
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
	<D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
Message-ID: <2321790.UGWVySgUbV@even-i700>

On lundi 29 octobre 2018 20:14:46 CET Kristian Evers wrote:
> Okay, so basically encoding the zone in the easting? Better, but I still
> think it is weird. At least it produces somewhat sane output.
 
> Is that operation used by any CRS in the EPSG database?

Yes, CRS EPSG:32600 "WGS 84 / UTM grid system (northern hemisphere)" and its 
southern-hemisphere companion EPSG:32700

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From andre+joost at nurfuerspam.de  Mon Oct 29 13:51:12 2018
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Mon, 29 Oct 2018 21:51:12 +0100
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>	<39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>	<4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
	<D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
Message-ID: <pr7rsf$j74$1@blaine.gmane.org>

Am 29.10.18 um 21:14 schrieb Kristian Evers:
> Okay, so basically encoding the zone in the easting? Better, but I
> still think it is weird. At least it produces somewhat sane output.
>
> Is that operation used by any CRS in the EPSG database?
>

surely:

EPSG:5649 up to 5653 have it, and 4647, 3873 to 3885.

Some countries prefer these, to avoid missing zone number problems.

Greetings,
Andre Joost



From martin.desruisseaux at geomatys.com  Mon Oct 29 14:04:41 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 29 Oct 2018 22:04:41 +0100
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
	<39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>
	<4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
	<D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
Message-ID: <ea28e67f-076f-8502-b925-6812b8c03aca@geomatys.com>

Le 29/10/2018 à 21:14, Kristian Evers a écrit :

> Okay, so basically encoding the zone in the easting? Better, but I
> still think it is weird. At least it produces somewhat sane output. Is
> that operation used by any CRS in the EPSG database?
>
I found two:

  * EPSG::32600 - WGS 84 / UTM grid system (northern hemisphere)
  * EPSG::32700 - WGS 84 / UTM grid system (southern hemisphere)


Le 29/10/2018 à 21:37, Charles Karney a écrit :

> Is there a provision for encoding the hemisphere (north/south) to
> distinguish between
Not as far as I can see; EPSG uses two different CRS for the two
hemispheres. However if we use the CRS for North hemisphere with
negative Northing (y) values in the South hemisphere, I would expect the
calculation to work (but did not verified).

Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181029/007ac7b9/attachment.html>

From kreve at sdfe.dk  Mon Oct 29 14:11:58 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 29 Oct 2018 21:11:58 +0000
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <pr7rsf$j74$1@blaine.gmane.org>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<3FD15ADC-EF14-411A-9A67-14BA24856D07@sdfe.dk>
	<CA+Pyowyh01PX+kZ4DRwAYANvfB2ha_DS8uOhDiMPmirm1ESuSQ@mail.gmail.com>
	<2D9DF68B-0CD2-424E-A37C-C568F393401F@sdfe.dk>
	<CA+PyowxGd-hn9yRHj_kospeA1zsiCU9HN_tMt11p2vMYH5xw8A@mail.gmail.com>
	<C01D2250-B730-4B9C-8E1B-E39F9019B86D@sdfe.dk>
	<CA+PyowxJXtmY1viS8A3J-LFKc8QC1BzqVnkXd0n7B3h116Cfpg@mail.gmail.com>
	<39094D58-3326-4339-84AA-26A5745F6F87@sdfe.dk>
	<4ff932ff-01c9-7b3b-4d98-5e12d8d7c7b0@geomatys.com>
	<D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
	<pr7rsf$j74$1@blaine.gmane.org>
Message-ID: <D459AB7E-938D-4028-875F-BE65275B65F0@sdfe.dk>

Thanks for putting me straight, everyone. I guess there’s a case for such a projection afterall!

How would this best be described in PROJ?

 +proj=zutm ? +proj=utm +zone=auto, as Robb suggested? Something else?

/Kristian

> On 29 Oct 2018, at 21:51, Andre Joost <andre+joost at nurfuerspam.de> wrote:
> 
> Am 29.10.18 um 21:14 schrieb Kristian Evers:
>> Okay, so basically encoding the zone in the easting? Better, but I
>> still think it is weird. At least it produces somewhat sane output.
>> 
>> Is that operation used by any CRS in the EPSG database?
>> 
> 
> surely:
> 
> EPSG:5649 up to 5653 have it, and 4647, 3873 to 3885.
> 
> Some countries prefer these, to avoid missing zone number problems.
> 
> Greetings,
> Andre Joost
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From even.rouault at spatialys.com  Mon Oct 29 14:23:18 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 29 Oct 2018 22:23:18 +0100
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <pr7rsf$j74$1@blaine.gmane.org>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<D61A18C0-F222-4DAD-8E53-06EB01A31BD9@sdfe.dk>
	<pr7rsf$j74$1@blaine.gmane.org>
Message-ID: <7632689.Dn90Bg3I22@even-i700>

On lundi 29 octobre 2018 21:51:12 CET Andre Joost wrote:
> Am 29.10.18 um 21:14 schrieb Kristian Evers:
> > Okay, so basically encoding the zone in the easting? Better, but I
> > still think it is weird. At least it produces somewhat sane output.
> > 
> > Is that operation used by any CRS in the EPSG database?
> 
> surely:
> 
> EPSG:5649 up to 5653 have it, and 4647, 3873 to 3885.
> 

Pedantically, no, at least the way they are described by the EPSG dataset is 
that they are using regular Transverse Mercator, with a false easting value 
that would be the one given by the "Transverse Mercator Zoned Grid System" for 
that zone, but they are still designed for a fixed zone.

EPSG:32600 and EPSG:32700 are the only ones to strictly use TMZGS.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Mon Oct 29 14:58:30 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 29 Oct 2018 22:58:30 +0100
Subject: [Proj] cs2cs - specifying UTM zone on command line
In-Reply-To: <D459AB7E-938D-4028-875F-BE65275B65F0@sdfe.dk>
References: <CA+PyowxNnbP41K-cWyTT2hA5OnDs6Xd0Ui7VUbG7ZjTpd8Y11Q@mail.gmail.com>
	<pr7rsf$j74$1@blaine.gmane.org>
	<D459AB7E-938D-4028-875F-BE65275B65F0@sdfe.dk>
Message-ID: <6646324.4Ii0SH67pZ@even-i700>

On lundi 29 octobre 2018 21:11:58 CET Kristian Evers wrote:
> Thanks for putting me straight, everyone. I guess there’s a case for such a
> projection afterall!
 
> How would this best be described in PROJ?
> 
>  +proj=zutm ? +proj=utm +zone=auto, as Robb suggested? Something else?

One possibility for complete generality could be to align on how it is 
described by EPSG:
https://www.epsg-registry.org/export.htm?gml=urn:ogc:def:method:EPSG::9824

(or more readable in "1.3.5.2 Transverse Mercator Zoned Grid System" in 
guidance 7.2)

And a more understandable example:
https://www.epsg-registry.org/export.htm?wkt=urn:ogc:def:crs:EPSG::32600

So that could be 
+proj=tmerc +lon_0=-180 +lat_0=0 +w=6 +k_0=0.9996 +x_0=500000 +y=0

The presence of the parameter w= could be the one that triggers the automated 
zone mechanism.

But yes as the only practical use is UTM, "+proj=utm +zone=auto [+south]" 
could be used as a shortcut.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Wed Oct 31 02:55:56 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 31 Oct 2018 10:55:56 +0100
Subject: [Proj] [MOTION] Call for vote on RFC2: Initial integration of
	"GDAL SRS barn" work
In-Reply-To: <1609731.7Ix53AWsWX@even-i700>
References: <1609731.7Ix53AWsWX@even-i700>
Message-ID: <308200679.zdzILcEzl9@even-i700>

On vendredi 26 octobre 2018 20:13:38 CET Even Rouault wrote:
> Hi,
> 
> Given the feedback I received, I think we can move on a formal vote on the
> adoption of this RFC, which will open the floor to be able to merging it
> into master (I might defer a bit into actually doing it)
> 
> As a remainder, the RFC is in https://github.com/OSGeo/proj.4/pull/1149
> (I've just updated it with the last 2 weeks achievements), and a HTML build
> of the RFC can be found at
> http://even.rouault.free.fr/proj_cpp_api/rfc-2.html for easier reading
> 
> ~~~~~~~~
> 
> Starting with my +1

The motion has passed with support from PSC members Kurt Schwehr, 	Kristian 
Evers, Howard Butler and myself.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Wed Oct 31 07:42:39 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 31 Oct 2018 15:42:39 +0100
Subject: [Proj] SRS barn update
In-Reply-To: <5521766.pxO7EhThGs@even-i700>
References: <5521766.pxO7EhThGs@even-i700>
Message-ID: <9696532.15VyGDmvaP@even-i700>

Hi,

A new monthly status report is available at
https://erouault.blogspot.com/2018/10/srs-barn-raising-5th-report.html

Even

> Hi,
> 
> I've written a new progress report on my https://gdalbarn.com/ activities on
> https://erouault.blogspot.com/
> An important milestone has been reached now with the SQLite-based CRS and
> coordinate operation database being in place and usable.
> 
> Altough not finished yet, I think that it could be interesting for this work
> [1] to be merged into master for broader testing. I'll prepare soon a RFC
> for that purpose.
> 
> Even
> 
> [1] Currently lives in
> https://github.com/OSGeo/proj.4/pull/1040
> https://github.com/rouault/proj.4/tree/iso19111


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


