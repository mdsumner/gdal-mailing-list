From OPena at isagri.fr  Wed Aug 18 04:38:29 2021
From: OPena at isagri.fr (Olivier PENA)
Date: Wed, 18 Aug 2021 11:38:29 +0000
Subject: [PROJ] BoundCRS with BBox
Message-ID: <VI1PR0302MB3471995DD8FCDB4CE9CE3BEAB2FF9@VI1PR0302MB3471.eurprd03.prod.outlook.com>

Hi
I'm looking for a way to set area of use for a BoundCRS I define with WKT like this one :

BOUNDCRS[
    SOURCECRS[
        PROJCRS["Monte Mario / Italy zone 2",
            BASEGEOGCRS["Monte Mario",
                DATUM["Monte Mario",
                    ELLIPSOID["International 1924",6378388,297,
                        LENGTHUNIT["metre",1]]],
                PRIMEM["Greenwich",0,
                    ANGLEUNIT["degree",0.0174532925199433]],
                ID["EPSG",4265]],
            CONVERSION["unnamed",
                METHOD["Transverse Mercator",
                    ID["EPSG",9807]],
                PARAMETER["Latitude of natural origin",0,
                    ANGLEUNIT["degree",0.0174532925199433],
                    ID["EPSG",8801]],
                PARAMETER["Longitude of natural origin",15,
                    ANGLEUNIT["degree",0.0174532925199433],
                    ID["EPSG",8802]],
                PARAMETER["Scale factor at natural origin",0.9996,
                    SCALEUNIT["unity",1],
                    ID["EPSG",8805]],
                PARAMETER["False easting",2520000,
                    LENGTHUNIT["metre",1],
                    ID["EPSG",8806]],
                PARAMETER["False northing",0,
                    LENGTHUNIT["metre",1],
                    ID["EPSG",8807]]],
            CS[Cartesian,2],
                AXIS["x",east,
                    ORDER[1],
                    LENGTHUNIT["metre",1]],
                AXIS["y",north,
                    ORDER[2],
                    LENGTHUNIT["metre",1]],
            ID["EPSG",3004]]],
    TARGETCRS[
        GEOGCRS["WGS 84",
            DATUM["World Geodetic System 1984",
                ELLIPSOID["WGS 84",6378137,298.257223563,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]],
            CS[ellipsoidal,2],
                AXIS["latitude",north,
                    ORDER[1],
                    ANGLEUNIT["degree",0.0174532925199433]],
                AXIS["longitude",east,
                    ORDER[2],
                    ANGLEUNIT["degree",0.0174532925199433]],
            ID["EPSG",4326]]],
    ABRIDGEDTRANSFORMATION["Transformation from Monte Mario to WGS84",
        METHOD["Position Vector transformation (geog2D domain)",
            ID["EPSG",9606]],
        PARAMETER["X-axis translation",-50.2,
            ID["EPSG",8605]],
        PARAMETER["Y-axis translation",-50.4,
            ID["EPSG",8606]],
        PARAMETER["Z-axis translation",84.8,
            ID["EPSG",8607]],
        PARAMETER["X-axis rotation",-0.69,
            ID["EPSG",8608]],
        PARAMETER["Y-axis rotation",-2.012,
            ID["EPSG",8609]],
        PARAMETER["Z-axis rotation",0.459,
            ID["EPSG",8610]],
        PARAMETER["Scale difference",0.99997192,
            ID["EPSG",8611]]],
    USAGE[
        SCOPE["unknown"],
        AREA["Italy - Sicily onshore"],
        BBOX[36.59,12.36,38.35,15.71]]
]

I would be happy if proj_get_area_of_use() on the crs return the Sicily BBox.

I ran a debug session and it seems that USAGE node is not taken account in buildBoundCRS() in io.cpp. Same behavior in the json parser.

Is this normal behavior ?
Thanks

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210818/21ec6c78/attachment.html>

From even.rouault at spatialys.com  Wed Aug 18 04:59:52 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 18 Aug 2021 13:59:52 +0200
Subject: [PROJ] BoundCRS with BBox
In-Reply-To: <VI1PR0302MB3471995DD8FCDB4CE9CE3BEAB2FF9@VI1PR0302MB3471.eurprd03.prod.outlook.com>
References: <VI1PR0302MB3471995DD8FCDB4CE9CE3BEAB2FF9@VI1PR0302MB3471.eurprd03.prod.outlook.com>
Message-ID: <a8051bbb-4a96-5840-e85e-2c28c07f1af7@spatialys.com>

Olivier,

hum, good finding. This is actually an oversight of the implementation. 
The WKT2 grammar 
(http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#149) does 
indeed allow usage/scope/extent/id/remark for a bound CRS but our C++ 
classes do not allow for that now. Could you file a ticket in 
https://github.com/OSGeo/PROJ/issues/new about that ?

Even

Le 18/08/2021 ? 13:38, Olivier PENA a ?crit?:
>
> Hi
>
> I?m looking for a way to set area of use for a BoundCRS I define with 
> WKT like this one :
>
> BOUNDCRS[
>
> ??? SOURCECRS[
>
> ??????? PROJCRS["Monte Mario / Italy zone 2",
>
> BASEGEOGCRS["Monte Mario",
>
> DATUM["Monte Mario",
>
> ELLIPSOID["International 1924",6378388,297,
>
> ??????????????LENGTHUNIT["metre",1]]],
>
> PRIMEM["Greenwich",0,
>
> ANGLEUNIT["degree",0.0174532925199433]],
>
> ID["EPSG",4265]],
>
> CONVERSION["unnamed",
>
> METHOD["Transverse Mercator",
>
> ID["EPSG",9807]],
>
> PARAMETER["Latitude of natural origin",0,
>
> ANGLEUNIT["degree",0.0174532925199433],
>
> ID["EPSG",8801]],
>
> PARAMETER["Longitude of natural origin",15,
>
> ??????????????????ANGLEUNIT["degree",0.0174532925199433],
>
> ID["EPSG",8802]],
>
> PARAMETER["Scale factor at natural origin",0.9996,
>
> SCALEUNIT["unity",1],
>
> ID["EPSG",8805]],
>
> ???PARAMETER["False easting",2520000,
>
> LENGTHUNIT["metre",1],
>
> ID["EPSG",8806]],
>
> PARAMETER["False northing",0,
>
> LENGTHUNIT["metre",1],
>
> ID["EPSG",8807]]],
>
> ???CS[Cartesian,2],
>
> AXIS["x",east,
>
> ORDER[1],
>
> LENGTHUNIT["metre",1]],
>
> AXIS["y",north,
>
> ORDER[2],
>
> LENGTHUNIT["metre",1]],
>
> ID["EPSG",3004]]],
>
> ??? TARGETCRS[
>
> ??????? GEOGCRS["WGS 84",
>
> ??????????? DATUM["World Geodetic System 1984",
>
> ELLIPSOID["WGS 84",6378137,298.257223563,
>
> LENGTHUNIT["metre",1]]],
>
> PRIMEM["Greenwich",0,
>
> ANGLEUNIT["degree",0.0174532925199433]],
>
> CS[ellipsoidal,2],
>
> AXIS["latitude",north,
>
> ORDER[1],
>
> ANGLEUNIT["degree",0.0174532925199433]],
>
> AXIS["longitude",east,
>
> ORDER[2],
>
> ANGLEUNIT["degree",0.0174532925199433]],
>
> ID["EPSG",4326]]],
>
> ABRIDGEDTRANSFORMATION["Transformation from Monte Mario to WGS84",
>
> ??????? METHOD["Position Vector transformation (geog2D domain)",
>
> ID["EPSG",9606]],
>
> PARAMETER["X-axis translation",-50.2,
>
> ID["EPSG",8605]],
>
> PARAMETER["Y-axis translation",-50.4,
>
> ID["EPSG",8606]],
>
> PARAMETER["Z-axis translation",84.8,
>
> ID["EPSG",8607]],
>
> PARAMETER["X-axis rotation",-0.69,
>
> ID["EPSG",8608]],
>
> PARAMETER["Y-axis rotation",-2.012,
>
> ID["EPSG",8609]],
>
> PARAMETER["Z-axis rotation",0.459,
>
> ID["EPSG",8610]],
>
> ??????? PARAMETER["Scale difference",0.99997192,
>
> ID["EPSG",8611]]],
>
> ??? USAGE[
>
> SCOPE["unknown"],
>
> ??????? AREA["Italy - Sicily onshore"],
>
> BBOX[36.59,12.36,38.35,15.71]]
>
> ]
>
> I would be happy if proj_get_area_of_use() on the crs return the 
> Sicily BBox.
>
> I ran a debug session and it seems that USAGE node is not taken 
> account in buildBoundCRS() in io.cpp. Same behavior in the json parser.
>
> Is this normal behavior ?
>
> Thanks
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210818/3fccbdb1/attachment-0001.html>

From OPena at isagri.fr  Wed Aug 18 10:09:20 2021
From: OPena at isagri.fr (Olivier PENA)
Date: Wed, 18 Aug 2021 17:09:20 +0000
Subject: [PROJ] BoundCRS with BBox
In-Reply-To: <a8051bbb-4a96-5840-e85e-2c28c07f1af7@spatialys.com>
References: <VI1PR0302MB3471995DD8FCDB4CE9CE3BEAB2FF9@VI1PR0302MB3471.eurprd03.prod.outlook.com>
 <a8051bbb-4a96-5840-e85e-2c28c07f1af7@spatialys.com>
Message-ID: <VI1PR0302MB3471399A4D023C4BFDF858ECB2FF9@VI1PR0302MB3471.eurprd03.prod.outlook.com>

Done : https://github.com/OSGeo/PROJ/issues/2813

Thanks


________________________________
De : Even Rouault <even.rouault at spatialys.com>
Envoy? : mercredi 18 ao?t 2021 13:59
? : Olivier PENA <OPena at isagri.fr>; proj at lists.osgeo.org <proj at lists.osgeo.org>
Objet : Re: [PROJ] BoundCRS with BBox


Olivier,

hum, good finding. This is actually an oversight of the implementation. The WKT2 grammar (http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#149) does indeed allow usage/scope/extent/id/remark for a bound CRS but our C++ classes do not allow for that now. Could you file a ticket in https://github.com/OSGeo/PROJ/issues/new about that ?

Even

Le 18/08/2021 ? 13:38, Olivier PENA a ?crit :

Hi

I?m looking for a way to set area of use for a BoundCRS I define with WKT like this one :



BOUNDCRS[

    SOURCECRS[

        PROJCRS["Monte Mario / Italy zone 2",

            BASEGEOGCRS["Monte Mario",

                DATUM["Monte Mario",

                    ELLIPSOID["International 1924",6378388,297,

                        LENGTHUNIT["metre",1]]],

                PRIMEM["Greenwich",0,

                    ANGLEUNIT["degree",0.0174532925199433]],

                ID["EPSG",4265]],

            CONVERSION["unnamed",

                METHOD["Transverse Mercator",

                    ID["EPSG",9807]],

                PARAMETER["Latitude of natural origin",0,

                    ANGLEUNIT["degree",0.0174532925199433],

                    ID["EPSG",8801]],

                PARAMETER["Longitude of natural origin",15,

                    ANGLEUNIT["degree",0.0174532925199433],

                    ID["EPSG",8802]],

                PARAMETER["Scale factor at natural origin",0.9996,

                    SCALEUNIT["unity",1],

                    ID["EPSG",8805]],

                PARAMETER["False easting",2520000,

                    LENGTHUNIT["metre",1],

                    ID["EPSG",8806]],

                PARAMETER["False northing",0,

                    LENGTHUNIT["metre",1],

                    ID["EPSG",8807]]],

            CS[Cartesian,2],

                AXIS["x",east,

                    ORDER[1],

                    LENGTHUNIT["metre",1]],

                AXIS["y",north,

                    ORDER[2],

                    LENGTHUNIT["metre",1]],

            ID["EPSG",3004]]],

    TARGETCRS[

        GEOGCRS["WGS 84",

            DATUM["World Geodetic System 1984",

                ELLIPSOID["WGS 84",6378137,298.257223563,

                    LENGTHUNIT["metre",1]]],

            PRIMEM["Greenwich",0,

                ANGLEUNIT["degree",0.0174532925199433]],

            CS[ellipsoidal,2],

                AXIS["latitude",north,

                    ORDER[1],

                    ANGLEUNIT["degree",0.0174532925199433]],

                AXIS["longitude",east,

                    ORDER[2],

                    ANGLEUNIT["degree",0.0174532925199433]],

            ID["EPSG",4326]]],

    ABRIDGEDTRANSFORMATION["Transformation from Monte Mario to WGS84",

        METHOD["Position Vector transformation (geog2D domain)",

            ID["EPSG",9606]],

        PARAMETER["X-axis translation",-50.2,

            ID["EPSG",8605]],

        PARAMETER["Y-axis translation",-50.4,

            ID["EPSG",8606]],

        PARAMETER["Z-axis translation",84.8,

            ID["EPSG",8607]],

        PARAMETER["X-axis rotation",-0.69,

            ID["EPSG",8608]],

        PARAMETER["Y-axis rotation",-2.012,

            ID["EPSG",8609]],

        PARAMETER["Z-axis rotation",0.459,

            ID["EPSG",8610]],

        PARAMETER["Scale difference",0.99997192,

            ID["EPSG",8611]]],

    USAGE[

        SCOPE["unknown"],

        AREA["Italy - Sicily onshore"],

        BBOX[36.59,12.36,38.35,15.71]]

]



I would be happy if proj_get_area_of_use() on the crs return the Sicily BBox.



I ran a debug session and it seems that USAGE node is not taken account in buildBoundCRS() in io.cpp. Same behavior in the json parser.



Is this normal behavior ?

Thanks





_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj


--
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210818/49ddeda0/attachment.html>

From urschrei at gmail.com  Wed Aug 18 10:33:59 2021
From: urschrei at gmail.com (=?utf-8?Q?Stephan_H=C3=BCgel?=)
Date: Wed, 18 Aug 2021 18:33:59 +0100
Subject: [PROJ] Changes in area of use bounds for EPSG 3035 between major
 versions
Message-ID: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>

We?ve recently updated the PROJ version in use by rust-proj from 7.2.1 to 8.1.0, which caused a test failure:

One of our tests interrogates the area of use for EPSG:3035 using get_area_of_use. In 7.2.1, that was:

west, -35.58
south, 24.6
east, 44.83
north, 84.17

But north has changed to 84.73 in v8.1.0

I?m not claiming this is wrong, but it?s a large change so I thought I?d ask if anyone can shed some light on it?


-- 
s




From urschrei at gmail.com  Wed Aug 18 10:53:50 2021
From: urschrei at gmail.com (=?utf-8?Q?Stephan_H=C3=BCgel?=)
Date: Wed, 18 Aug 2021 18:53:50 +0100
Subject: [PROJ] Changes in area of use bounds for EPSG 3035 between
 major versions
In-Reply-To: <CADRrdKuMM8wp+Pp8Mw=mBtuiTv__p2yDKJ1v5D0djM54agxLHA@mail.gmail.com>
References: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
 <CADRrdKuMM8wp+Pp8Mw=mBtuiTv__p2yDKJ1v5D0djM54agxLHA@mail.gmail.com>
Message-ID: <6490BFE2-864D-4705-8365-4F3AB67EFD8E@gmail.com>

Thanks both!

-- 
s



> On 18 Aug 2021, at 18:50, Javier Jimenez Shaw <j1 at jimenezshaw.com> wrote:
> 
> It seems a change in EPSG.
> This is the CRS: https://epsg.org/crs_3035/ETRS89-extended-LAEA-Europe.html
> This is the Extent: https://epsg.org/extent_2881/Europe-LCC-LAEA.html
> that was modified in January 2021: https://epsg.org/closed-change-request/browse/id/2020.127
> 
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> Entre dos pensamientos racionales 
> hay infinitos pensamientos irracionales.
> 
> 
> 
> On Wed, 18 Aug 2021 at 19:34, Stephan H?gel <urschrei at gmail.com> wrote:
> We?ve recently updated the PROJ version in use by rust-proj from 7.2.1 to 8.1.0, which caused a test failure:
> 
> One of our tests interrogates the area of use for EPSG:3035 using get_area_of_use. In 7.2.1, that was:
> 
> west, -35.58
> south, 24.6
> east, 44.83
> north, 84.17
> 
> But north has changed to 84.73 in v8.1.0
> 
> I?m not claiming this is wrong, but it?s a large change so I thought I?d ask if anyone can shed some light on it?
> 
> 
> -- 
> s
> 
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From j1 at jimenezshaw.com  Wed Aug 18 10:50:23 2021
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 18 Aug 2021 19:50:23 +0200
Subject: [PROJ] Changes in area of use bounds for EPSG 3035 between
 major versions
In-Reply-To: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
References: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
Message-ID: <CADRrdKuMM8wp+Pp8Mw=mBtuiTv__p2yDKJ1v5D0djM54agxLHA@mail.gmail.com>

It seems a change in EPSG.
This is the CRS: https://epsg.org/crs_3035/ETRS89-extended-LAEA-Europe.html
This is the Extent: https://epsg.org/extent_2881/Europe-LCC-LAEA.html
that was modified in January 2021:
https://epsg.org/closed-change-request/browse/id/2020.127

.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Wed, 18 Aug 2021 at 19:34, Stephan H?gel <urschrei at gmail.com> wrote:

> We?ve recently updated the PROJ version in use by rust-proj from 7.2.1 to
> 8.1.0, which caused a test failure:
>
> One of our tests interrogates the area of use for EPSG:3035 using
> get_area_of_use. In 7.2.1, that was:
>
> west, -35.58
> south, 24.6
> east, 44.83
> north, 84.17
>
> But north has changed to 84.73 in v8.1.0
>
> I?m not claiming this is wrong, but it?s a large change so I thought I?d
> ask if anyone can shed some light on it?
>
>
> --
> s
>
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210818/6ae724e5/attachment.html>

From even.rouault at spatialys.com  Wed Aug 18 10:56:04 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 18 Aug 2021 19:56:04 +0200
Subject: [PROJ] Changes in area of use bounds for EPSG 3035 between
 major versions
In-Reply-To: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
References: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
Message-ID: <d2446511-7e47-2540-87e6-8713bbc800d4@spatialys.com>

Stephan,

this just reflects a change in the EPSG database. git blame points to 
commit 752696eb8ac0ecb9ff96432ec5849625ed452f74 "Database: update to 
EPSG v10.022"

Linked to this change request: 
https://epsg.org/closed-change-request/browse/id/2020.127

Even

Le 18/08/2021 ? 19:33, Stephan H?gel a ?crit?:
> We?ve recently updated the PROJ version in use by rust-proj from 7.2.1 to 8.1.0, which caused a test failure:
>
> One of our tests interrogates the area of use for EPSG:3035 using get_area_of_use. In 7.2.1, that was:
>
> west, -35.58
> south, 24.6
> east, 44.83
> north, 84.17
>
> But north has changed to 84.73 in v8.1.0
>
> I?m not claiming this is wrong, but it?s a large change so I thought I?d ask if anyone can shed some light on it?
>
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.


From tobias.wendorff at tu-dortmund.de  Wed Aug 18 10:47:05 2021
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Wed, 18 Aug 2021 19:47:05 +0200
Subject: [PROJ] Changes in area of use bounds for EPSG 3035 between
 major versions
In-Reply-To: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
References: <0D17269F-3945-47C2-838C-7458E31506A8@gmail.com>
Message-ID: <fe5990cc-77e3-885d-9a7a-7deb66b12070@tu-dortmund.de>

Am 18.08.2021 um 19:33 schrieb Stephan H?gel:
> One of our tests interrogates the area of use for EPSG:3035 using get_area_of_use. In 7.2.1, that was:
> 
> west, -35.58
> south, 24.6
> east, 44.83
> north, 84.17
> 
> But north has changed to 84.73 in v8.1.0
> 
> I?m not claiming this is wrong, but it?s a large change so I thought I?d ask if anyone can shed some light on it?

OGP's Geomatics committee EPSG Dataset v10.031 says:

https://epsg.org/crs_3035/ETRS89-extended-LAEA-Europe.html
Last change 2020-03-20

Uses the extent of
https://epsg.org/extent_2881/Europe-LCC-LAEA.html
Last change 2021-01-13

west: -35.58
south: 24.6
east: 44.83
north: 84.73

From even.rouault at spatialys.com  Fri Aug 20 02:03:53 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 20 Aug 2021 11:03:53 +0200
Subject: [PROJ] Fwd: [OSGeo-Discuss] OSGeo Community program welcomes the
 PROJ-JNI project
In-Reply-To: <ac46203a592d6fc855e59bb86d01c981@posteo.de>
References: <ac46203a592d6fc855e59bb86d01c981@posteo.de>
Message-ID: <b3ba1d0a-3a24-8c28-5314-439cee3a7c69@spatialys.com>

FYI

-------- Message transf?r? --------
Sujet?: 	[OSGeo-Discuss] OSGeo Community program welcomes the PROJ-JNI 
project
Date?: 	Fri, 20 Aug 2021 08:05:50 +0000
De?: 	Astrid Emde (OSGeo) via Discuss <discuss at lists.osgeo.org>
R?pondre ??: 	astrid_emde at osgeo.org
Pour?: 	Discuss <discuss at lists.osgeo.org>, Announce 
<announce at lists.osgeo.org>



2021-08-20
News item: 
https://www.osgeo.org/foundation-news/osgeo-community-program-welcomes-the-proj-jni-project/

The PROJ-JNI project has been accepted into the OSGeo Community program.

The Open Source Geospatial Foundation is pleased to welcome PROJ-JNI [1] 
to our Community program. PROJ-JNI is a project that exposes Java Native 
Interface bindings to the PROJ [2] C/C++ library.

The OSGeo Community program recognizes applications and tools that are 
geospatial, freely available with an open source license, and are setup 
to collaborate fairly. This program helps OSGeo promote innovation and 
the hard work of teams and organizations worldwide.

About PROJ-JNI
----------------------
PROJ-JNI is a project that exposes Java Native Interface bindings to the 
PROJ C/C++ library, the well-known and widely-used coordinate 
transformation library that underpins most open-source geospatial 
coordinate transformations. This project allows JVM ecosystem developers 
to build directly upon recent and future improvements to PROJ via native 
bindings, rather than requiring that libraries separately re-implement 
all projection and transformation functionality in JVM languages.
PROJ-JNI currently works with system-installed versions of PROJ, and is 
currently looking into the feasibility of simplifying the end-user 
experience via pre-compiled native libraries for different platforms.

Source code is hosted on GitHub [3], which also contains documentation, 
installation, and information about contributing.

About the Open Source Geospatial Foundation
---------------------------------------------------------------
The Open Source Geospatial Foundation [4] is a not-for-profit 501(c)(4) 
organization to empower everyone with open source geospatial. The 
software foundation directly supports projects serving as an outreach 
and advocacy organization providing financial, organizational and legal 
support for the open source geospatial community.

OSGeo works with GeoCat, OPENGIS.ch, Gaia3D and other sponsors, along 
with our partners to foster an open approach to software, standards, 
data and education.

[1] https://www.osgeo.org/projects/proj-jni/
[2] https://proj.org/
[3] https://github.com/Kortforsyningen/PROJ-JNI
[4] https://www.osgeo.org/about/
_______________________________________________
Discuss mailing list
Discuss at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/discuss
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210820/43642ac0/attachment.html>

From oskari.timperi at novatron.fi  Fri Aug 20 04:00:32 2021
From: oskari.timperi at novatron.fi (Oskari Timperi)
Date: Fri, 20 Aug 2021 11:00:32 +0000
Subject: [PROJ] Always using tinshift when dealing with KKJ
Message-ID: <AM7PR05MB70129C213C4E7469347271AA97C19@AM7PR05MB7012.eurprd05.prod.outlook.com>

Hi,

I was testing out the tinshift for transforming KKJ (EPSG:2393 etc) to ETRS89 / TM35FIN(E,N) (EPSG:3067). This seems to work great!

But, now if I want to transform from let's say EPSG:2393 to EPSG:4326, proj doesn't use the tinshift. Here's output from projinfo:

~> projinfo -s EPSG:2393 -t EPSG:4326 -o proj
Candidate operations found: 1
-------------------------------------
Operation No. 1:

unknown id, Inverse of Finland Uniform Coordinate System + KKJ to WGS 84 (2), 1 m, Finland - onshore.

PROJ string:
+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +inv +proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=3500000 +y_0=0 +ellps=intl
  +step +proj=push +v_3
  +step +proj=cart +ellps=intl
  +step +proj=helmert +x=-96.062 +y=-82.428 +z=-121.753 +rx=-4.801 +ry=-0.345
        +rz=1.376 +s=1.496 +convention=coordinate_frame
  +step +inv +proj=cart +ellps=WGS84
  +step +proj=pop +v_3
  +step +proj=unitconvert +xy_in=rad +xy_out=deg
  +step +proj=axisswap +order=2,1

Is it possible to make proj use the tinshift for this particular transformation? How about using the tinshift generally when dealing with KKJ, basically always pivoting through EPSG:3067 regardless of what the other system was?

I read the projinfo documentation and noticed information about auxiliary databases, would this be what I'm after?

Is there any documentation (or tutorials) of what kind of changes I could possibly do with auxiliary databases?

If I'm understanding correctly and the auxiliary database is what I need, do you have any tips how I would solve this issue?

I'm currently using PROJ 7.2.1, but I tested also with 8.1.0 (the output above is from the newer version).

Thanks,

- Oskari


From even.rouault at spatialys.com  Fri Aug 20 06:27:46 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 20 Aug 2021 15:27:46 +0200
Subject: [PROJ] Always using tinshift when dealing with KKJ
In-Reply-To: <AM7PR05MB70129C213C4E7469347271AA97C19@AM7PR05MB7012.eurprd05.prod.outlook.com>
References: <AM7PR05MB70129C213C4E7469347271AA97C19@AM7PR05MB7012.eurprd05.prod.outlook.com>
Message-ID: <211040cf-b590-aff5-41b8-6985ae9a63ac@spatialys.com>

Oskari,

I assume that you want to use the same exact transformation between KKJ 
and WGS84 than between KKJ and ETRS89, that is you assume that WGS84 = 
ETRS89 for your purpose. In EPSG, transformation EPSG:1149 does that 
with an advertized accuracy of 1m (the issue here is that WGS 84 is a 
time dependent datum and ETRS 89 is fixed to the plate, hence things are 
drifting over time...)

Anyway if you're happy with that assumption,

you can see in 
https://github.com/OSGeo/PROJ/blob/master/data/sql/other_transformation_custom.sql#L29 
that the transformation between EPSG:4123 (KKJ) and EPSG:4258 (ETRS89) 
is defined as a concatenated operation:

INSERT INTO "concatenated_operation" VALUES('PROJ','KKJ_TO_ETRS89','KKJ 
to ETRS89 (using PROJ:YKJ_TO_ETRS35FIN)','Transformation based on a 
triangulated irregular network','EPSG','4123','EPSG','4258',NULL,NULL,0);
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_ETRS89',1,'EPSG','18193');
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_ETRS89',2,'PROJ','YKJ_TO_ETRS35FIN');
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_ETRS89',3,'EPSG','16065');
INSERT INTO "usage" VALUES(
 ??? 'PROJ',
 ??? 'KKJ_TO_ETRS89_USAGE',
 ??? 'concatenated_operation',
 ??? 'PROJ',
 ??? 'KKJ_TO_ETRS89',
 ??? 'EPSG','3333', -- extent
 ??? 'EPSG','1024'? -- unknown
);

For KKJ to WGS84, we can restart from that and add a final 4th step for 
the ETRS89 to WGS84 transformation:

So with the sqlite3 commandline utility:

sqlite3 proj.db

and then type

INSERT INTO "concatenated_operation" VALUES('PROJ','KKJ_TO_WGS84','KKJ 
to WGS84 (using PROJ:YKJ_TO_ETRS35FIN and EPSG:1149)','Transformation 
based on a triangulated irregular network for KKJ to ETRS89, and then 
assuming ETRS89 ~= WGS84','EPSG','4123','EPSG','4326',NULL,NULL,0);
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_WGS84',1,'EPSG','18193');
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_WGS84',2,'PROJ','YKJ_TO_ETRS35FIN');
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_WGS84',3,'EPSG','16065');
INSERT INTO "concatenated_operation_step" 
VALUES('PROJ','KKJ_TO_WGS84',4,'EPSG','1149');
INSERT INTO "usage" VALUES(
 ??? 'PROJ',
 ??? 'KKJ_TO_WGS84_USAGE',
 ??? 'concatenated_operation',
 ??? 'PROJ',
 ??? 'KKJ_TO_WGS84',
 ??? 'EPSG','3333', -- extent
 ??? 'EPSG','1024'? -- unknown
);

you'll aso need to degrade the accuracy of the registered transformation 
between KKJ and WGS84 from 1m to 1.5m, as the above transformation will 
have an accuracy of 1.1m (0.1 m for KKJ to ETRS89 and 1m for ETRS89 to 
WGS84), so that our new transformation is picked up by default:

UPDATE helmert_transformation_table set accuracy=1.5 where 
auth_name='EPSG' and code = 10099;


With that in place:

$ PROJ_LIB=.:../../PROJ-data/fi_nls src/projinfo -s EPSG:2393 -t 
EPSG:4326 -o proj
Candidate operations found: 2
-------------------------------------
Operation No. 1:

unknown id, KKJ / Finland Uniform Coordinate System to ETRS35FIN + 
TM35FIN + ETRS89 to WGS 84 (1), 1.1 m, Finland - onshore.

PROJ string:
+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +proj=tinshift +file=fi_nls_ykj_etrs35fin.json
 ? +step +proj=utm +zone=35 +ellps=GRS80

-------------------------------------
Operation No. 2:

unknown id, Inverse of Finland Uniform Coordinate System + KKJ to WGS 84 
(2), 1.5 m, Finland - onshore.

PROJ string:
+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +inv +proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=3500000 +y_0=0 
+ellps=intl
 ? +step +proj=push +v_3
 ? +step +proj=cart +ellps=intl
 ? +step +proj=helmert +x=-96.062 +y=-82.428 +z=-121.753 +rx=-4.801 
+ry=-0.345
 ??????? +rz=1.376 +s=1.496 +convention=coordinate_frame
 ? +step +inv +proj=cart +ellps=WGS84
 ? +step +proj=pop +v_3
 ? +step +proj=unitconvert +xy_in=rad +xy_out=deg
 ? +step +proj=axisswap +order=2,1

And ... dang ... this is wrong... The pipeline of operation no 1 is 
incorrect. It does the UTM conversion in the right direction. It should 
rather be (as output by projinfo -s EPSG:2393 -t EPSG:4258)

+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +proj=tinshift +file=fi_nls_ykj_etrs35fin.json
 ? +step +inv +proj=utm +zone=35 +ellps=GRS80
 ? +step +proj=unitconvert +xy_in=rad +xy_out=deg
 ? +step +proj=axisswap +order=2,1

I've filed this issue as https://github.com/OSGeo/PROJ/issues/2817.? The 
issue here is that in the concatenated_operation_step table we only 
indicate the operation, but not its direction, and it is quite hard for 
PROJ to figure out in some cases if it must be followed in the forward 
or reverse direction...

So let's, start again from the fresh proj.db and add the 2 following 
records using a PROJ string based transformation:

INSERT INTO other_transformation VALUES(
 ??? 'PROJ','KKJ_TO_WGS84',
 ??? 'KKJ to WGS84 (using PROJ:YKJ_TO_ETRS35FIN and EPSG:1149)',
 ??? 'Transformation based on a triangulated irregular network for KKJ 
to ETRS89, and then assuming ETRS89 ~= WGS84',
 ??? 'PROJ','PROJString',
 ??? '+proj=pipeline ' ||
 ? ? ? '+step +proj=axisswap +order=2,1 ' ||
 ???? ' +step +proj=unitconvert +xy_in=deg +xy_out=rad ' ||
 ????? '+step +proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=3500000 +y_0=0 
+ellps=intl ' ||
 ?? ?? '+step +proj=tinshift +file=fi_nls_ykj_etrs35fin.json ' ||
 ????? '+step +inv +proj=utm +zone=35 +ellps=GRS80 ' ||
 ? ??? '+step +proj=unitconvert +xy_in=rad +xy_out=deg ' ||
 ? ??? '+step +proj=axisswap +order=2,1',
 ??? 'EPSG','4123',
 ??? 'EPSG','4326',
 ??? 0.99,
 ?NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0);

INSERT INTO "usage" 
VALUES('PROJ','KKJ_TO_WGS84_USAGE','other_transformation','PROJ','KKJ_TO_WGS84','EPSG','3333','EPSG','1031');

(no need to tweak EPSG:10099 accuracy, as we can directly provide the 
one for our transformation)

Now, we get the expected result:

$ PROJ_LIB=.:../../PROJ-data/fi_nls src/projinfo -s EPSG:2393 -t 
EPSG:4326 -o proj
Candidate operations found: 2
-------------------------------------
Operation No. 1:

unknown id, Inverse of Finland Uniform Coordinate System + KKJ to WGS84 
(using PROJ:YKJ_TO_ETRS35FIN and EPSG:1149), 0.99 m, Finland - onshore.

PROJ string:
+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +proj=tinshift +file=fi_nls_ykj_etrs35fin.json
 ? +step +inv +proj=utm +zone=35 +ellps=GRS80
 ? +step +proj=unitconvert +xy_in=rad +xy_out=deg
 ? +step +proj=axisswap +order=2,1

-------------------------------------
Operation No. 2:

unknown id, Inverse of Finland Uniform Coordinate System + KKJ to WGS 84 
(2), 1 m, Finland - onshore.

~~~

Instead of hacking proj.db itself, you can indeed create an auxiliary 
database

- Initiate it with : projinfo --dump-db-structure | sqlite3 aux.db

- then remove a trigger that does a check that would fail (the trigger 
would check that EPSG:4123 exists, but it exists only in proj.db, not in 
aux.db) : sqlite3 aux.db "DROP TRIGGER other_transformation_insert_trigger;"

- and then redo the 2 above INSERT INTO other_transformation and INSERT 
INTO "usage" in aux.db itself

And then set the PROJ_AUX_DB environment variable to point to aux.db

$ PROJ_AUX_DB=aux.db PROJ_LIB=data:../../PROJ-data/fi_nls src/projinfo 
-s EPSG:2393 -t EPSG:4326 -o proj
Candidate operations found: 2
-------------------------------------
Operation No. 1:

unknown id, Inverse of Finland Uniform Coordinate System + KKJ to WGS84 
(using PROJ:YKJ_TO_ETRS35FIN and EPSG:1149), 0.99 m, Finland - onshore.

PROJ string:
+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +proj=tinshift +file=fi_nls_ykj_etrs35fin.json
 ? +step +inv +proj=utm +zone=35 +ellps=GRS80
 ? +step +proj=unitconvert +xy_in=rad +xy_out=deg
 ? +step +proj=axisswap +order=2,1

-------------------------------------
Operation No. 2:

unknown id, Inverse of Finland Uniform Coordinate System + KKJ to WGS 84 
(2), 1 m, Finland - onshore.

Best regards,

Even


Le 20/08/2021 ? 13:00, Oskari Timperi a ?crit?:
> projinfo -s EPSG:2393 -t EPSG:4326 -o proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From kristianevers at gmail.com  Wed Aug 25 20:54:48 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Thu, 26 Aug 2021 05:54:48 +0200
Subject: [PROJ] PROJ 8.1.1RC1
Message-ID: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>

All,

I have prepared a release candidate for the upcoming version 8.1.1 of PROJ.

Archives are available here
    
http://download.osgeo.org/proj/proj-8.1.1RC1.tar.gz
http://download.osgeo.org/proj/proj-8.1.1RC1.zip

The PROJ release includes a number of bug fixes and updates to the
transformation database (see details below). 

Please test the release candidates and report your findings back 
to the mailing list.

/Kristian 

?????????

8.1.1 Release Notes
-------------------

 Updates
 -------

 o EPSG Database updated to version 10.028 (#2773)

 Bug Fixes
 ---------

 o Include algorithm header file to avoid build errors on Alpine Linux (#2769)

 o CMake: fix installation of executables on iOS (#2766)

 o Associate extents to transformations of CRS's that include GEOIDMODEL (#2769)

 o Logging: avoid some overhead when logging is not enabled (#2775)

 o ortho: remove useless and invalid log trace (#2777)

 o CMake: remove external nlohmann_json from INTERFACE_LINK_LIBRARIES target (#2781)
 o reateOperations(): fix SourceTargetCRSExtentUse::NONE mode (#2783)

 o GeoTIFF grid reading: perf improvements (#2788)

 o Conversion::createUTM(): avoid integer overflow (#2796)

 o Inverse laea ellipsoidal: return PROJ_ERR_COORD_TRANSFM_OUTSIDE_PROJECTION_DOMAIN
   when appropriates (#2801)

 o Make sure that proj_crs_promote_to_3D returns a derived CRS (#2806)

 o createOperations(): fix missing deg<-->rad conversion when transforming with a
   CRS that has a fallback-to-PROJ4-string behaviour and is a BoundCRS of a
   GeographicCRS (#2808)

 o WKT2 import/export: preserve PROJ.4 CRS extension string in REMARKS[] (#2812)

 o BoundCRS: accept importing/exporting in WKT2 and PROJJSON the
   scope/area/extent/id attributes (#2815)

 o ConcatenatedOperation::fixStepsDirection(): fix bad chaining of steps when
   inverse map projection is involved in non-final step (#2819)



From a.furieri at lqt.it  Wed Aug 25 23:17:17 2021
From: a.furieri at lqt.it (a.furieri at lqt.it)
Date: Thu, 26 Aug 2021 08:17:17 +0200
Subject: [PROJ] PROJ 8.1.1RC1
In-Reply-To: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>
References: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>
Message-ID: <e583c8cfd9ae1e0e6aac6b86f852a3e6@lqt.it>

On Thu, 26 Aug 2021 05:54:48 +0200, Kristian Evers wrote:
> Please test the release candidates and report your findings back
> to the mailing list.
>

Hi Kristian,

all good as far as SpatiaLite is concerned

bye Sandro

From even.rouault at spatialys.com  Thu Aug 26 05:37:27 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 26 Aug 2021 14:37:27 +0200
Subject: [PROJ] PROJ 8.1.1RC1
In-Reply-To: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>
References: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>
Message-ID: <d5179e28-aca3-5393-867a-debfa3d08df5@spatialys.com>

Kristian,

there's a discrepancy in .so.x.y.z numbers on Linux depending if you use 
autoconf or cmake

$ ll ~/proj/install-proj-8.1.1-ac/lib/*.so*

libproj.so -> libproj.so.22.1.1*
libproj.so.22 -> libproj.so.22.1.1*
libproj.so.22.1.1*

$ ll ~/proj/install-proj-8.1.1-cmake/lib/*.so*

libproj.so -> libproj.so.22
libproj.so.22 -> libproj.so.23.1.1
libproj.so.23.1.1

CMakeLists.txt should probably be changed to have

set(PROJ_BUILD_VERSION "22.1.1")

The libtool version info current:revision:age (23:1:1) doesn't result in 
.so.current.revision.age but something with a bit more maths that only 
double PhD owners can figure out (apologies if you're one of those :-) :-))

Even

Le 26/08/2021 ? 05:54, Kristian Evers a ?crit?:
> All,
>
> I have prepared a release candidate for the upcoming version 8.1.1 of PROJ.
>
> Archives are available here
>      
> http://download.osgeo.org/proj/proj-8.1.1RC1.tar.gz
> http://download.osgeo.org/proj/proj-8.1.1RC1.zip
>
> The PROJ release includes a number of bug fixes and updates to the
> transformation database (see details below).
>
> Please test the release candidates and report your findings back
> to the mailing list.
>
> /Kristian
>
> ?????????
>
> 8.1.1 Release Notes
> -------------------
>
>   Updates
>   -------
>
>   o EPSG Database updated to version 10.028 (#2773)
>
>   Bug Fixes
>   ---------
>
>   o Include algorithm header file to avoid build errors on Alpine Linux (#2769)
>
>   o CMake: fix installation of executables on iOS (#2766)
>
>   o Associate extents to transformations of CRS's that include GEOIDMODEL (#2769)
>
>   o Logging: avoid some overhead when logging is not enabled (#2775)
>
>   o ortho: remove useless and invalid log trace (#2777)
>
>   o CMake: remove external nlohmann_json from INTERFACE_LINK_LIBRARIES target (#2781)
>   o reateOperations(): fix SourceTargetCRSExtentUse::NONE mode (#2783)
>
>   o GeoTIFF grid reading: perf improvements (#2788)
>
>   o Conversion::createUTM(): avoid integer overflow (#2796)
>
>   o Inverse laea ellipsoidal: return PROJ_ERR_COORD_TRANSFM_OUTSIDE_PROJECTION_DOMAIN
>     when appropriates (#2801)
>
>   o Make sure that proj_crs_promote_to_3D returns a derived CRS (#2806)
>
>   o createOperations(): fix missing deg<-->rad conversion when transforming with a
>     CRS that has a fallback-to-PROJ4-string behaviour and is a BoundCRS of a
>     GeographicCRS (#2808)
>
>   o WKT2 import/export: preserve PROJ.4 CRS extension string in REMARKS[] (#2812)
>
>   o BoundCRS: accept importing/exporting in WKT2 and PROJJSON the
>     scope/area/extent/id attributes (#2815)
>
>   o ConcatenatedOperation::fixStepsDirection(): fix bad chaining of steps when
>     inverse map projection is involved in non-final step (#2819)
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From kreve at sdfe.dk  Thu Aug 26 05:49:05 2021
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 26 Aug 2021 12:49:05 +0000
Subject: [PROJ] PROJ 8.1.1RC1
In-Reply-To: <d5179e28-aca3-5393-867a-debfa3d08df5@spatialys.com>
References: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>
 <d5179e28-aca3-5393-867a-debfa3d08df5@spatialys.com>
Message-ID: <18284248cfa4462580e247eb438e7b01@sdfe.dk>

Thanks Even. I am definitely not one of those smart maths people so I'll just fix it! 
I think this is (at least) the second time this has happened. I wonder if there's a good
way to avoid it. Clearly what's in HOWTORELEASE is not enough.

I'll wait until tomorrow in case something else pops up.

/Kristian

> -----Original Message-----
> From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Even Rouault
> Sent: 26. august 2021 14:37
> To: Kristian Evers <kristianevers at gmail.com>; PROJ <proj at lists.osgeo.org>
> Subject: Re: [PROJ] PROJ 8.1.1RC1
> 
> Kristian,
> 
> there's a discrepancy in .so.x.y.z numbers on Linux depending if you use
> autoconf or cmake
> 
> $ ll ~/proj/install-proj-8.1.1-ac/lib/*.so*
> 
> libproj.so -> libproj.so.22.1.1*
> libproj.so.22 -> libproj.so.22.1.1*
> libproj.so.22.1.1*
> 
> $ ll ~/proj/install-proj-8.1.1-cmake/lib/*.so*
> 
> libproj.so -> libproj.so.22
> libproj.so.22 -> libproj.so.23.1.1
> libproj.so.23.1.1
> 
> CMakeLists.txt should probably be changed to have
> 
> set(PROJ_BUILD_VERSION "22.1.1")
> 
> The libtool version info current:revision:age (23:1:1) doesn't result in
> .so.current.revision.age but something with a bit more maths that only
> double PhD owners can figure out (apologies if you're one of those :-) :-))
> 
> Even
> 
> Le 26/08/2021 ? 05:54, Kristian Evers a ?crit?:
> > All,
> >
> > I have prepared a release candidate for the upcoming version 8.1.1 of PROJ.
> >
> > Archives are available here
> >
> > http://download.osgeo.org/proj/proj-8.1.1RC1.tar.gz
> > http://download.osgeo.org/proj/proj-8.1.1RC1.zip
> >
> > The PROJ release includes a number of bug fixes and updates to the
> > transformation database (see details below).
> >
> > Please test the release candidates and report your findings back
> > to the mailing list.
> >
> > /Kristian
> >
> > ?????????
> >
> > 8.1.1 Release Notes
> > -------------------
> >
> >   Updates
> >   -------
> >
> >   o EPSG Database updated to version 10.028 (#2773)
> >
> >   Bug Fixes
> >   ---------
> >
> >   o Include algorithm header file to avoid build errors on Alpine Linux (#2769)
> >
> >   o CMake: fix installation of executables on iOS (#2766)
> >
> >   o Associate extents to transformations of CRS's that include GEOIDMODEL
> (#2769)
> >
> >   o Logging: avoid some overhead when logging is not enabled (#2775)
> >
> >   o ortho: remove useless and invalid log trace (#2777)
> >
> >   o CMake: remove external nlohmann_json from INTERFACE_LINK_LIBRARIES
> target (#2781)
> >   o reateOperations(): fix SourceTargetCRSExtentUse::NONE mode (#2783)
> >
> >   o GeoTIFF grid reading: perf improvements (#2788)
> >
> >   o Conversion::createUTM(): avoid integer overflow (#2796)
> >
> >   o Inverse laea ellipsoidal: return
> PROJ_ERR_COORD_TRANSFM_OUTSIDE_PROJECTION_DOMAIN
> >     when appropriates (#2801)
> >
> >   o Make sure that proj_crs_promote_to_3D returns a derived CRS (#2806)
> >
> >   o createOperations(): fix missing deg<-->rad conversion when transforming
> with a
> >     CRS that has a fallback-to-PROJ4-string behaviour and is a BoundCRS of a
> >     GeographicCRS (#2808)
> >
> >   o WKT2 import/export: preserve PROJ.4 CRS extension string in REMARKS[]
> (#2812)
> >
> >   o BoundCRS: accept importing/exporting in WKT2 and PROJJSON the
> >     scope/area/extent/id attributes (#2815)
> >
> >   o ConcatenatedOperation::fixStepsDirection(): fix bad chaining of steps when
> >     inverse map projection is involved in non-final step (#2819)
> >
> >
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
> 
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Thu Aug 26 05:57:00 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 26 Aug 2021 14:57:00 +0200
Subject: [PROJ] PROJ 8.1.1RC1
In-Reply-To: <18284248cfa4462580e247eb438e7b01@sdfe.dk>
References: <5629F4B8-386C-417F-84A9-CC05C10A8C54@gmail.com>
 <d5179e28-aca3-5393-867a-debfa3d08df5@spatialys.com>
 <18284248cfa4462580e247eb438e7b01@sdfe.dk>
Message-ID: <c0fa0e1e-cf44-846a-fa8a-5286a97e858f@spatialys.com>


Le 26/08/2021 ? 14:49, Kristian Evers a ?crit?:
> Thanks Even. I am definitely not one of those smart maths people so I'll just fix it!
> I think this is (at least) the second time this has happened. I wonder if there's a good
> way to avoid it. Clearly what's in HOWTORELEASE is not enough.

I see that PROJ_BUILD_VERSION is passed to the VERSION property of the 
"proj" target.

But https://cmake.org/cmake/help/latest/prop_tgt/VERSION.html isn't 
super explicit of what kind of version number is expected. On Linux at 
least it seems to be the .so.x.y.z numbers rather than the libtool 
version_info scheme (so a way of not getting it wrong would be to do an 
autoconf build and look at the result, but that won't work very well 
once we've dropped autoconf...)

-- 

http://www.spatialys.com
My software is free, but my time generally not.


From kristianevers at gmail.com  Sun Aug 29 07:34:01 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 29 Aug 2021 16:34:01 +0200
Subject: [PROJ] PROJ 8.1.1RC2
Message-ID: <F4B26FB1-CB7C-4178-9297-CE0953214F14@gmail.com>

All,

A minor issue with the CMake setup was found in RC1 so here?s RC2:

http://download.osgeo.org/proj/proj-8.1.1RC2.tar.gz
http://download.osgeo.org/proj/proj-8.1.1RC2.zip

/Kristian 

