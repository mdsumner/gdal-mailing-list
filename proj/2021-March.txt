From kristianevers at gmail.com  Mon Mar  1 02:32:09 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 1 Mar 2021 11:32:09 +0100
Subject: [PROJ] Motion: Promote PROJ 8.0.0RC2 and PROJ-data 1.5RC1 to
 final
In-Reply-To: <6563312E-B721-45C2-8133-AB4788554C58@hobu.co>
References: <2207192.ZOBBFu19Gx@even-i700>
 <6563312E-B721-45C2-8133-AB4788554C58@hobu.co>
Message-ID: <92FCAB80-3B58-47F7-A971-3D0A6B9ED775@gmail.com>

With +1?s from

Kristian
Charles
Thomas
Even
Howard

the motion is declared passed. Release announcement will follow within the next couple of hours.

/Kristian

> On 28 Feb 2021, at 19:17, Howard Butler <howard at hobu.co> wrote:
> 
> 
> 
>> On Feb 28, 2021, at 11:29 AM, Even Rouault <even.rouault at spatialys.com> wrote:
>> 
>> ?On dimanche 28 f?vrier 2021 11:44:12 CET Kristian Evers wrote:
>>> PSC members,
>>> 
>>> With the issues found in the first PROJ release candidate fixed and no known
>>> issues in the PROJ-data release candidate, I hereby motion that they be
>>> promoted to final.
>>> 
>>> I?ll start with my +1.
>> 
>> +1 Even
> 
> 
> +1 Howard
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From kristianevers at gmail.com  Mon Mar  1 04:18:46 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 1 Mar 2021 13:18:46 +0100
Subject: [PROJ] PROJ 8.0.0 and PROJ-data 1.5
Message-ID: <5E75A83C-08E1-4B28-9F54-803E2A1B8BFC@gmail.com>

On behalf of the PROJ development team I am happy to announce the
release of PROJ 8.0.0 and PROJ-data 1.5. 

The PROJ release includes a number of updates and bug fixes as well
the removal of the proj_api.h header file. See the detailed release
notes below. 

The PROJ-data package adds two new grid files (NN1954 and NN2000)
that are referenced in the database updates. NODATA values has been
clarified in a few Danish and Norwegian grids.

Get the packages here:

http://download.osgeo.org/proj/proj-8.0.0.tar.gz
http://download.osgeo.org/proj/proj-8.0.0.zip


http://download.osgeo.org/proj/proj-data-1.5.tar.gz
http://download.osgeo.org/proj/proj-data-1.5.zip



/Kristian



???????????????????

8.0.0 Release Notes
-------------------

With the release of PROJ 8 the proj_api.h API is finally removed. See
https://proj.org/development/migration.html for more info on how to migrate
from the old to the proj.h API.

With the removal of proj_api.h it has been possible to simplify error codes
and messages given by the software. The error codes are exposed in the API.

Several improvements has been made to the command line utilities as well as
tweaks in the underlying API.

 Updates
 -------

 o Public header file proj_api.h removed (#837)

 o Improved accuracy of the Mercator projection (#2397)

 o Copyright statement wording updated (#2417)

 o Allow cct to instantiate operations via object codes or names (#2419)

 o Allow @filename syntax in cct (#2420)

 o Added geocentric->topocentric conversion (+proj=topocentric) (#2444)

 o Update GeographicLib to version 1.51 (#2445)

 o Added option to allow export of Geographic/Projected 3D CRS
   in WKT1_GDAL (#2450)

 o Added --area and --bbox options in cs2cs to restrict candidate
   coordinate operations (#2466)

 o Added build time option to make PROJ_LIB env var tested last (#2476)

 o Added --authority switch in cs2cs to control where coordinate operations
   are looked for. C API function proj_create_crs_to_crs_from_pj() updated
   accordingly (#2477)

 o Error codes revised and exposed in the public API (#2487)

 o Added --accuracy options to projinfo. C API function
   proj_create_crs_to_crs_from_pj() updated accordingly (#2488)

 o Added proj_crs_is_derived() function to C API (#2496)

 o Enabled linking against static cURL on Windows (#2514)

 o Updated ESRI CRS database to 12.7 (10.8.1/2.6) (#2519)

 o Allow a WKT BoundCRS to use a PROJ string transformation (#2521)

 o Update to EPSG v10.015 (#2539)

 o Default log level set to PJ_LOG_ERROR (#2542)

 o CMake installs a pkg-config file proj.pc, where supported (#2547)

 Bug fixes
 ---------

 o Do not restrict longitude to [-90;90] range in spherical transver Mercator
   forward projection (#2471)

 o createOperations(): fix Compound to Geog3D/Projected3D CRS with non-metre ellipsoidal height (#2500)

 o Avoid error messages to be emitted log level is set to PJ_LOG_NONE (#2527)

 o Close database connection when autoclose set to True (#2532)

From j1 at jimenezshaw.com  Mon Mar  1 10:11:20 2021
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Mon, 1 Mar 2021 19:11:20 +0100
Subject: [PROJ] Swiss geoid file (now free)
Message-ID: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>

Hi all

Since March 1st 2021, Swisstopo makes all their products "free of charge
and for open access use":
https://www.swisstopo.admin.ch/en/swisstopo/free-geodata.html (for French,
German or Italian native speakers, select your preferred official version).

That includes the Geoid file for CHGeo2004.

I was considering to include it in PROJ-data via PR. Before doing that I
have some questions:

-- License --
I do not know if their definition of the free access is enough for PROJ
requirements. In that page, in 'Frequently Asked Questions (FAQ)', in
question 'Under what licence is the geodata supplied by swisstopo?' they
say:

*swisstopo geodata is supplied with conditions of use which comply with the
legal basis. The conditions of use enable free use for all purposes and
oblige the user to indicate the source as ?Source: Federal Office of
Topography swisstopo? or ?? swisstopo?.*

In https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/ogd.html
the say as well:

*The free geodata and geoservices of swisstopo may be used, distributed and
made accessible. Furthermore, they may be enriched and processed and also
used commercially.*

Should I move forward? Is that enough for PROJ?

-- Source CRS --
The geoid file is provided in
https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/geoid.html
in 4 different "flavors": LV95/LHN95, LV95/LN02, ETRS89/LHN95, ETRS89/LN02
(I will now concentrate on LHN95, as LN02 is older).

LV95 (short version of "CH1903+ / LV95") is a projected CRS (EPSG:2056).
The geographic system "under" it is CH1903+ (EPSG:4150)
I was expecting a version like "CH1903+/LHN95" (the Swiss geographic CRS
with the Swiss vertical CRS), but there is not AFAIK.

What should we include in PROJ-data?
a) ETRS89/LHN95
b) LV95/LHN95
c) CH1903+/LHN95 computed from LV95/LHN95
d) something else
e) multiple of the above

Note that there are already two Swiss horizontal grids in PROJ-data:
"CH1903 (EPSG:4149) to CH1903+ (EPSG:4150)" and "CH1903 (EPSG:4149) to
ETRS89 (EPSG:4258)"

-- Transformation --
There is no such a transformation in EPSG like "ETRS89 to LHN95 height" or
"LV95 to LHN95 height" or "CH1903+ to LHN95 height". I was considering
asking Swisstopo to "create" them (via a proper EPSG request), but, which
one(s)? (this is probably related to the previous question, I guess).

In case they do not consider including themselves the transformation in
EPSG, should we create one as PROJ auth_name? Which one(s)?

Thank you.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210301/90edf321/attachment.html>

From sebastic at xs4all.nl  Mon Mar  1 10:32:16 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 1 Mar 2021 19:32:16 +0100
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
Message-ID: <6f7ce243-9a73-9d3d-d266-063571e4818e@xs4all.nl>

On 3/1/21 7:11 PM, Javier Jimenez Shaw wrote:
> -- License --
> I do not know if their definition of the free access is enough for PROJ
> requirements. In that page, in 'Frequently Asked Questions (FAQ)', in
> question 'Under what licence is the geodata supplied by swisstopo?' they
> say:
> 
> *swisstopo geodata is supplied with conditions of use which comply with the
> legal basis. The conditions of use enable free use for all purposes and
> oblige the user to indicate the source as ?Source: Federal Office of
> Topography swisstopo? or ?? swisstopo?.*
> 
> In https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/ogd.html
> the say as well:
> 
> *The free geodata and geoservices of swisstopo may be used, distributed and
> made accessible. Furthermore, they may be enriched and processed and also
> used commercially.*
> 
> Should I move forward? Is that enough for PROJ?

Non-standard licenses are bad. For their CHENYX06 grids [0] they used
CC0, why don't they use that for CHGeo2004 too?

Unclear terms lead to messes like the German BeTA2007 grid.

[0]
https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/reference-frames/transformations-position.html#coordinates-transformation-lv95-lv03

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From even.rouault at spatialys.com  Mon Mar  1 11:03:02 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 01 Mar 2021 20:03:02 +0100
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
Message-ID: <1873334.iX3AoF5Hsv@even-i700>

Hi,

> -- License --

Agreed with Bas that they should really consider using a known license. From 
the rights and requirements they indicate, it would seem to me that CC-BY 4.0 
would be a good fit.

> -- Source CRS --
> The geoid file is provided in
> https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/geoid.ht
> ml in 4 different "flavors": LV95/LHN95, LV95/LN02, ETRS89/LHN95,
> ETRS89/LN02 (I will now concentrate on LHN95, as LN02 is older).
> 
> LV95 (short version of "CH1903+ / LV95") is a projected CRS (EPSG:2056).
> The geographic system "under" it is CH1903+ (EPSG:4150)
> I was expecting a version like "CH1903+/LHN95" (the Swiss geographic CRS
> with the Swiss vertical CRS), but there is not AFAIK.
> 
> What should we include in PROJ-data?
> a) ETRS89/LHN95
> b) LV95/LHN95
> c) CH1903+/LHN95 computed from LV95/LHN95
> d) something else
> e) multiple of the above

No special opinion regarding this. Yes currently we'd have to derive a grid in 
geographic coordinates. We should ultimately provide a way of dealing with 
grids in projected coordinates (UK uses that too). Not necessarily a huge deal 
of work, but has to be done...

> -- Transformation --
> There is no such a transformation in EPSG like "ETRS89 to LHN95 height" or
> "LV95 to LHN95 height" or "CH1903+ to LHN95 height". I was considering
> asking Swisstopo to "create" them (via a proper EPSG request), but, which
> one(s)? (this is probably related to the previous question, I guess).

That's a bit their call, but yes it would be good to ask them to register the 
transformations with EPSG to make them more easily usable. I'm not sure if 
EPSG includes geoid-like grid transformations where the interpolation CRS is a 
projected one currently, so they might be only able to register the ETRS89 to 
LHN95 height currently.

Even

-- 
http://www.spatialys.com

From Elmar.Brockmann at swisstopo.ch  Mon Mar  1 23:53:33 2021
From: Elmar.Brockmann at swisstopo.ch (Elmar.Brockmann at swisstopo.ch)
Date: Tue, 2 Mar 2021 07:53:33 +0000
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <1873334.iX3AoF5Hsv@even-i700>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
 <1873334.iX3AoF5Hsv@even-i700>
Message-ID: <b9f6de643a834442b5afeace1ff91dc2@swisstopo.ch>

Dear colleagues

Indeed, the CHENYX06 grids we provide use CC0: " A NTV2 grid data set for transforming to ETRS or to LV95 is distributed in our Shop under open data licence Creative Commons CC0." (https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/reference-frames/transformations-position.html ) 

Yesterday, March 1, swisstopo announces officially a wide data set as Open Government Data (OGD). Now, also all areal images, digital maps are open and can freely be used for private and commercial applications. The Geoid CHGeo2004 is also included. Further details: https://www.swisstopo.admin.ch/en/swisstopo/free-geodata.html 

The FAQs state under licence conditions:  The use of Creative Commons licences, as they are commonly and widely used today, is not compatible with the legal basis (GeoIG, GeoIV). swisstopo geodata is supplied with conditions of use which comply with the legal basis. The conditions of use allow free use for all purposes and oblige the user to indicate the source as "Source: Federal Office of Topography swisstopo" or "? swisstopo".

If it helps, we can assign a CC0 licence to the geoid grids.
Best regards

Elmar Brockmann



-----Urspr?ngliche Nachricht-----
Von: PROJ <proj-bounces at lists.osgeo.org> Im Auftrag von Even Rouault
Gesendet: Montag, 1. M?rz 2021 20:03
An: proj at lists.osgeo.org
Cc: proj <PROJ at lists.osgeo.org>
Betreff: Re: [PROJ] Swiss geoid file (now free)

Hi,

> -- License --

Agreed with Bas that they should really consider using a known license. From the rights and requirements they indicate, it would seem to me that CC-BY 4.0 would be a good fit.

> -- Source CRS --
> The geoid file is provided in
> https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/ge
> oid.ht ml in 4 different "flavors": LV95/LHN95, LV95/LN02, 
> ETRS89/LHN95,
> ETRS89/LN02 (I will now concentrate on LHN95, as LN02 is older).
> 
> LV95 (short version of "CH1903+ / LV95") is a projected CRS (EPSG:2056).
> The geographic system "under" it is CH1903+ (EPSG:4150) I was 
> expecting a version like "CH1903+/LHN95" (the Swiss geographic CRS 
> with the Swiss vertical CRS), but there is not AFAIK.
> 
> What should we include in PROJ-data?
> a) ETRS89/LHN95
> b) LV95/LHN95
> c) CH1903+/LHN95 computed from LV95/LHN95
> d) something else
> e) multiple of the above

No special opinion regarding this. Yes currently we'd have to derive a grid in geographic coordinates. We should ultimately provide a way of dealing with grids in projected coordinates (UK uses that too). Not necessarily a huge deal of work, but has to be done...

> -- Transformation --
> There is no such a transformation in EPSG like "ETRS89 to LHN95 
> height" or
> "LV95 to LHN95 height" or "CH1903+ to LHN95 height". I was considering 
> asking Swisstopo to "create" them (via a proper EPSG request), but, 
> which one(s)? (this is probably related to the previous question, I guess).

That's a bit their call, but yes it would be good to ask them to register the transformations with EPSG to make them more easily usable. I'm not sure if EPSG includes geoid-like grid transformations where the interpolation CRS is a projected one currently, so they might be only able to register the ETRS89 to
LHN95 height currently.

Even

--
http://www.spatialys.com
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Wed Mar  3 06:07:55 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 3 Mar 2021 15:07:55 +0100
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <CADRrdKsjkF=P0Zwo6acC1UZnSsQoSB+fXZLm8KxB3Li58jPzAw@mail.gmail.com>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
 <1873334.iX3AoF5Hsv@even-i700>
 <b9f6de643a834442b5afeace1ff91dc2@swisstopo.ch>
 <CADRrdKsjkF=P0Zwo6acC1UZnSsQoSB+fXZLm8KxB3Li58jPzAw@mail.gmail.com>
Message-ID: <0f01b749-8e9d-5251-277c-0f1c489579c0@spatialys.com>

If it helps, we can assign a CC0 licence to the geoid grids.
>
> IMHO, makes sense that both horizontal and vertical grids use the same 
> license, CC0 in this case.
> Even, (or anybody else), is that ok? (if yes, please Elmar, make it 
> clear in swisstopo. Thanks!)

CC0 would be fine of course for us.

Even

-- 
http://www.spatialys.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210303/7511598c/attachment.html>

From j1 at jimenezshaw.com  Wed Mar  3 06:02:09 2021
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 3 Mar 2021 15:02:09 +0100
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <b9f6de643a834442b5afeace1ff91dc2@swisstopo.ch>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
 <1873334.iX3AoF5Hsv@even-i700> <b9f6de643a834442b5afeace1ff91dc2@swisstopo.ch>
Message-ID: <CADRrdKsjkF=P0Zwo6acC1UZnSsQoSB+fXZLm8KxB3Li58jPzAw@mail.gmail.com>

On Tue, 2 Mar 2021 at 09:00, Elmar Brockmann via PROJ <proj at lists.osgeo.org>
wrote:

> Dear colleagues
>
> Indeed, the CHENYX06 grids we provide use CC0: " A NTV2 grid data set for
> transforming to ETRS or to LV95 is distributed in our Shop under open data
> licence Creative Commons CC0." (
> https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/reference-frames/transformations-position.html
> )
>
> Yesterday, March 1, swisstopo announces officially a wide data set as Open
> Government Data (OGD). Now, also all areal images, digital maps are open
> and can freely be used for private and commercial applications. The Geoid
> CHGeo2004 is also included. Further details:
> https://www.swisstopo.admin.ch/en/swisstopo/free-geodata.html
>
> The FAQs state under licence conditions:  The use of Creative Commons
> licences, as they are commonly and widely used today, is not compatible
> with the legal basis (GeoIG, GeoIV). swisstopo geodata is supplied with
> conditions of use which comply with the legal basis. The conditions of use
> allow free use for all purposes and oblige the user to indicate the source
> as "Source: Federal Office of Topography swisstopo" or "? swisstopo".
>
> If it helps, we can assign a CC0 licence to the geoid grids.
>

IMHO, makes sense that both horizontal and vertical grids use the same
license, CC0 in this case.
Even, (or anybody else), is that ok? (if yes, please Elmar, make it clear
in swisstopo. Thanks!)


> Best regards
>
> Elmar Brockmann
>
>
>
> -----Urspr?ngliche Nachricht-----
> Von: PROJ <proj-bounces at lists.osgeo.org> Im Auftrag von Even Rouault
> Gesendet: Montag, 1. M?rz 2021 20:03
> An: proj at lists.osgeo.org
> Cc: proj <PROJ at lists.osgeo.org>
> Betreff: Re: [PROJ] Swiss geoid file (now free)
>
> Hi,
>
> > -- License --
>
> Agreed with Bas that they should really consider using a known license.
> From the rights and requirements they indicate, it would seem to me that
> CC-BY 4.0 would be a good fit.
>
> > -- Source CRS --
> > The geoid file is provided in
> > https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/ge
> > oid.ht ml in 4 different "flavors": LV95/LHN95, LV95/LN02,
> > ETRS89/LHN95,
> > ETRS89/LN02 (I will now concentrate on LHN95, as LN02 is older).
> >
> > LV95 (short version of "CH1903+ / LV95") is a projected CRS (EPSG:2056).
> > The geographic system "under" it is CH1903+ (EPSG:4150) I was
> > expecting a version like "CH1903+/LHN95" (the Swiss geographic CRS
> > with the Swiss vertical CRS), but there is not AFAIK.
> >
> > What should we include in PROJ-data?
> > a) ETRS89/LHN95
> > b) LV95/LHN95
> > c) CH1903+/LHN95 computed from LV95/LHN95
> > d) something else
> > e) multiple of the above
>
> No special opinion regarding this. Yes currently we'd have to derive a
> grid in geographic coordinates. We should ultimately provide a way of
> dealing with grids in projected coordinates (UK uses that too). Not
> necessarily a huge deal of work, but has to be done...
>
> > -- Transformation --
> > There is no such a transformation in EPSG like "ETRS89 to LHN95
> > height" or
> > "LV95 to LHN95 height" or "CH1903+ to LHN95 height". I was considering
> > asking Swisstopo to "create" them (via a proper EPSG request), but,
> > which one(s)? (this is probably related to the previous question, I
> guess).
>
> That's a bit their call, but yes it would be good to ask them to register
> the transformations with EPSG to make them more easily usable. I'm not sure
> if EPSG includes geoid-like grid transformations where the interpolation
> CRS is a projected one currently, so they might be only able to register
> the ETRS89 to
> LHN95 height currently.
>
> Even
>
> --
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210303/aa704d9d/attachment.html>

From Elmar.Brockmann at swisstopo.ch  Wed Mar  3 06:20:53 2021
From: Elmar.Brockmann at swisstopo.ch (Elmar.Brockmann at swisstopo.ch)
Date: Wed, 3 Mar 2021 14:20:53 +0000
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <0f01b749-8e9d-5251-277c-0f1c489579c0@spatialys.com>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
 <1873334.iX3AoF5Hsv@even-i700>
 <b9f6de643a834442b5afeace1ff91dc2@swisstopo.ch>
 <CADRrdKsjkF=P0Zwo6acC1UZnSsQoSB+fXZLm8KxB3Li58jPzAw@mail.gmail.com>
 <0f01b749-8e9d-5251-277c-0f1c489579c0@spatialys.com>
Message-ID: <1701e82bd141426a9e2eff7aa91f8d59@swisstopo.ch>


The data download link is already there: https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/geoid.html
I will add as soon as possible the licence CC0 on the web page

Elmar

Von: Even Rouault <even.rouault at spatialys.com>
Gesendet: Mittwoch, 3. M?rz 2021 15:08
An: Javier Jimenez Shaw <j1 at jimenezshaw.com>; Brockmann Elmar swisstopo <Elmar.Brockmann at swisstopo.ch>
Cc: proj <proj at lists.osgeo.org>
Betreff: Re: [PROJ] Swiss geoid file (now free)

If it helps, we can assign a CC0 licence to the geoid grids.


IMHO, makes sense that both horizontal and vertical grids use the same license, CC0 in this case.
Even, (or anybody else), is that ok? (if yes, please Elmar, make it clear in swisstopo. Thanks!)

CC0 would be fine of course for us.

Even

--

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210303/7e8948b1/attachment.html>

From Elmar.Brockmann at swisstopo.ch  Wed Mar  3 07:41:48 2021
From: Elmar.Brockmann at swisstopo.ch (Elmar.Brockmann at swisstopo.ch)
Date: Wed, 3 Mar 2021 15:41:48 +0000
Subject: [PROJ] Swiss geoid file (now free)
In-Reply-To: <6f7ce243-9a73-9d3d-d266-063571e4818e@xs4all.nl>
References: <CADRrdKv+2R7qPXfSKy7Z-NHoJ4oQYAUPYyhqv3VR_-bZO9MOVw@mail.gmail.com>
 <6f7ce243-9a73-9d3d-d266-063571e4818e@xs4all.nl>
Message-ID: <1498e308ffcb44fb8ca78c1d694a7537@swisstopo.ch>

Done. Swiss geoid can be downloaded in 4 different flavours (and 4 different languages ;-) under CC0 from https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/geoid.html 
Elmar

-----Urspr?ngliche Nachricht-----
Von: PROJ <proj-bounces at lists.osgeo.org> Im Auftrag von Sebastiaan Couwenberg
Gesendet: Montag, 1. M?rz 2021 19:32
An: proj <PROJ at lists.osgeo.org>
Betreff: Re: [PROJ] Swiss geoid file (now free)

On 3/1/21 7:11 PM, Javier Jimenez Shaw wrote:
> -- License --
> I do not know if their definition of the free access is enough for 
> PROJ requirements. In that page, in 'Frequently Asked Questions 
> (FAQ)', in question 'Under what licence is the geodata supplied by 
> swisstopo?' they
> say:
> 
> *swisstopo geodata is supplied with conditions of use which comply 
> with the legal basis. The conditions of use enable free use for all 
> purposes and oblige the user to indicate the source as ?Source: 
> Federal Office of Topography swisstopo? or ?? swisstopo?.*
> 
> In 
> https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/ogd.htm
> l
> the say as well:
> 
> *The free geodata and geoservices of swisstopo may be used, 
> distributed and made accessible. Furthermore, they may be enriched and 
> processed and also used commercially.*
> 
> Should I move forward? Is that enough for PROJ?

Non-standard licenses are bad. For their CHENYX06 grids [0] they used CC0, why don't they use that for CHGeo2004 too?

Unclear terms lead to messes like the German BeTA2007 grid.

[0]
https://www.swisstopo.admin.ch/en/knowledge-facts/surveying-geodesy/reference-frames/transformations-position.html#coordinates-transformation-lv95-lv03

Kind Regards,

Bas

--
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1 _______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From sgh at sgh.dk  Fri Mar  5 02:39:20 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Fri, 05 Mar 2021 11:39:20 +0100
Subject: [PROJ] PROJ resources version stability
Message-ID: <403737092.kDVSq05HrL@koontz>

Hi

Are the resources distributed with PROJ stable to be used across PROJ 
versions? Can resources from 6.x be used with 8.x?

How a breaking changes handled ?

-- 
S?ren Holm



From even.rouault at spatialys.com  Fri Mar  5 03:07:10 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 5 Mar 2021 12:07:10 +0100
Subject: [PROJ] PROJ resources version stability
In-Reply-To: <403737092.kDVSq05HrL@koontz>
References: <403737092.kDVSq05HrL@koontz>
Message-ID: <5ab36f5f-8ffe-5c46-e3d6-1daa01dc23db@spatialys.com>

S?ren,

Le 05/03/2021 ? 11:39, S?ren Holm a ?crit?:
> Are the resources distributed with PROJ stable to be used across PROJ
> versions? Can resources from 6.x be used with 8.x?

Yes, you can still use the proj-datumgrid-XXXX packages that use grids 
in the formats NTv2, GTX, etc. with PROJ 8, although for optimal results 
you should now use the proj-data package that contain a more 
comprehensive set of grids in GeoTIFF format.

Even

-- 

http://www.spatialys.com


From sgh at sgh.dk  Fri Mar  5 03:09:33 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Fri, 05 Mar 2021 12:09:33 +0100
Subject: [PROJ] PROJ resources version stability
In-Reply-To: <5ab36f5f-8ffe-5c46-e3d6-1daa01dc23db@spatialys.com>
References: <403737092.kDVSq05HrL@koontz>
 <5ab36f5f-8ffe-5c46-e3d6-1daa01dc23db@spatialys.com>
Message-ID: <2217186.zG6ssZTnZd@koontz>

Ok. How about proj.db and the vast majority of files usually located in /share/
proj/  ?

fredag den 5. marts 2021 12.07.10 CET skrev Even Rouault:
> S?ren,
> 
> Le 05/03/2021 ? 11:39, S?ren Holm a ?crit :
> > Are the resources distributed with PROJ stable to be used across PROJ
> > versions? Can resources from 6.x be used with 8.x?
> 
> Yes, you can still use the proj-datumgrid-XXXX packages that use grids
> in the formats NTv2, GTX, etc. with PROJ 8, although for optimal results
> you should now use the proj-data package that contain a more
> comprehensive set of grids in GeoTIFF format.
> 
> Even


-- 
S?ren Holm



From even.rouault at spatialys.com  Fri Mar  5 03:14:44 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 5 Mar 2021 12:14:44 +0100
Subject: [PROJ] PROJ resources version stability
In-Reply-To: <2217186.zG6ssZTnZd@koontz>
References: <403737092.kDVSq05HrL@koontz>
 <5ab36f5f-8ffe-5c46-e3d6-1daa01dc23db@spatialys.com>
 <2217186.zG6ssZTnZd@koontz>
Message-ID: <e9bd9be5-91be-aeca-801f-feb3144c84f0@spatialys.com>

There have been a few database structure changes in proj.db since PROJ 
6, so in general you should only use a given proj.db with the PROJ 
library for which it was built, otherwise things will badly break. And 
even if the structure is the same, there might be some subtle changes, 
like new EPSG operation method codes, that one version may support and 
another one not.

Le 05/03/2021 ? 12:09, S?ren Holm a ?crit?:
> Ok. How about proj.db and the vast majority of files usually located in /share/
> proj/  ?
>
> fredag den 5. marts 2021 12.07.10 CET skrev Even Rouault:
>> S?ren,
>>
>> Le 05/03/2021 ? 11:39, S?ren Holm a ?crit :
>>> Are the resources distributed with PROJ stable to be used across PROJ
>>> versions? Can resources from 6.x be used with 8.x?
>> Yes, you can still use the proj-datumgrid-XXXX packages that use grids
>> in the formats NTv2, GTX, etc. with PROJ 8, although for optimal results
>> you should now use the proj-data package that contain a more
>> comprehensive set of grids in GeoTIFF format.
>>
>> Even
>
-- 
http://www.spatialys.com


From mwoehlke.floss at gmail.com  Tue Mar  9 09:59:52 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Tue, 9 Mar 2021 12:59:52 -0500
Subject: [PROJ] Creating projection *not* from full init string?
Message-ID: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>

I'm trying (again) to port some geodetic conversion code from the PROJ 4 
API.

Our system uses EPSG identifiers to specify coordinate systems. (Yes, 
yes, I'm ? vaguely ? aware we should also be using epochs, but frankly 
it's a struggle to get our users to even be *aware* that there are 
different coordinate systems, and more often than not we have to assume 
4326 because we don't know *anything*. Getting anything more is simply 
not practical.)

This was manageable in PROJ 4. With 6.3.2, however, I can't seem to 
create a *usable* projection except by specifying a complete init 
string. Calling `proj_create(0, "EPSG:4326")` gives back a non-null 
pointer, but any calls to proj_trans fail, proj_info gives back an empty 
definition, and proj_angular_{in,out}put all return 0.

How do I create a usable projection from an EPSG code? (Or *anything* 
other than a full init string? I get the same results with e.g. "WGS 84".)

-- 
Matthew

From even.rouault at spatialys.com  Tue Mar  9 10:04:14 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 9 Mar 2021 19:04:14 +0100
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
Message-ID: <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>


Le 09/03/2021 ? 18:59, Matthew Woehlke a ?crit?:
> I'm trying (again) to port some geodetic conversion code from the PROJ 
> 4 API.
>
> Our system uses EPSG identifiers to specify coordinate systems. (Yes, 
> yes, I'm ? vaguely ? aware we should also be using epochs, but frankly 
> it's a struggle to get our users to even be *aware* that there are 
> different coordinate systems, and more often than not we have to 
> assume 4326 because we don't know *anything*. Getting anything more is 
> simply not practical.)
>
> This was manageable in PROJ 4. With 6.3.2, however, I can't seem to 
> create a *usable* projection except by specifying a complete init 
> string. Calling `proj_create(0, "EPSG:4326")` gives back a non-null 
> pointer, but any calls to proj_trans fail, proj_info gives back an 
> empty definition, and proj_angular_{in,out}put all return 0.

Yes, `proj_create(0, "EPSG:4326")` creates a CRS object, not a 
coordinate operation one. proj_trans() requires a coordinate operation 
and will not work on a CRS. You need to use proj_create_crs_to_crs() to 
gt an object usabled with proj_trans()

Even

-- 
http://www.spatialys.com


From mwoehlke.floss at gmail.com  Tue Mar  9 10:18:33 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Tue, 9 Mar 2021 13:18:33 -0500
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
Message-ID: <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>

On 09/03/2021 13.04, Even Rouault wrote:
> Le 09/03/2021 ? 18:59, Matthew Woehlke a ?crit?:
>> I'm trying (again) to port some geodetic conversion code from the PROJ 
>> 4 API.
>>
>> Our system uses EPSG identifiers to specify coordinate systems. (Yes, 
>> yes, I'm ? vaguely ? aware we should also be using epochs, but frankly 
>> it's a struggle to get our users to even be *aware* that there are 
>> different coordinate systems, and more often than not we have to 
>> assume 4326 because we don't know *anything*. Getting anything more is 
>> simply not practical.)
>>
>> This was manageable in PROJ 4. With 6.3.2, however, I can't seem to 
>> create a *usable* projection except by specifying a complete init 
>> string. Calling `proj_create(0, "EPSG:4326")` gives back a non-null 
>> pointer, but any calls to proj_trans fail, proj_info gives back an 
>> empty definition, and proj_angular_{in,out}put all return 0.
> 
> Yes, `proj_create(0, "EPSG:4326")` creates a CRS object, not a 
> coordinate operation one. proj_trans() requires a coordinate operation 
> and will not work on a CRS. You need to use proj_create_crs_to_crs() to 
> gt an object usabled with proj_trans()

Okay, I don't understand that at all.

In PROJ 4, 4326 is "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84". 
If I use that with proj_create, I get something usable. What's the 
difference?

p.s. How do I get that definition in PROJ 5? In PROJ 4, I could use 
pj_get_def. (See also https://stackoverflow.com/questions/66533885.)

-- 
Matthew

From even.rouault at spatialys.com  Tue Mar  9 10:33:58 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 9 Mar 2021 19:33:58 +0100
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
Message-ID: <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>


Le 09/03/2021 ? 19:18, Matthew Woehlke a ?crit?:
> On 09/03/2021 13.04, Even Rouault wrote:
>> Le 09/03/2021 ? 18:59, Matthew Woehlke a ?crit?:
>>> I'm trying (again) to port some geodetic conversion code from the 
>>> PROJ 4 API.
>>>
>>> Our system uses EPSG identifiers to specify coordinate systems. 
>>> (Yes, yes, I'm ? vaguely ? aware we should also be using epochs, but 
>>> frankly it's a struggle to get our users to even be *aware* that 
>>> there are different coordinate systems, and more often than not we 
>>> have to assume 4326 because we don't know *anything*. Getting 
>>> anything more is simply not practical.)
>>>
>>> This was manageable in PROJ 4. With 6.3.2, however, I can't seem to 
>>> create a *usable* projection except by specifying a complete init 
>>> string. Calling `proj_create(0, "EPSG:4326")` gives back a non-null 
>>> pointer, but any calls to proj_trans fail, proj_info gives back an 
>>> empty definition, and proj_angular_{in,out}put all return 0.
>>
>> Yes, `proj_create(0, "EPSG:4326")` creates a CRS object, not a 
>> coordinate operation one. proj_trans() requires a coordinate 
>> operation and will not work on a CRS. You need to use 
>> proj_create_crs_to_crs() to gt an object usabled with proj_trans()
>
> Okay, I don't understand that at all. 

>
> In PROJ 4, 4326 is "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84". 
> If I use that with proj_create, I get something usable. What's the 
> difference?

PROJ >= 6 now makes a difference between a CRS and a coordinate 
operation. A PROJ string without +type=crs is assumed to be a coordinate 
operation, and with +type=crs to be a CRS.

The old PROJ.4 definitions without +type=crs depending on the context 
could be used as a CRS definition or a coordinate operation. PROJ >= 6 
now requires to be explicit to avoid that confusion. You can't use a CRS 
like "EPSG:4326" with proj_trans(). That doesn't make sense. A CRS 
doesn't define a coordinate operation by itself. If you want to project 
coordinates to EPSG:32631 for example, you can use the coordinate 
operation returned by proj_create_crs_to_crs(ctx, "EPSG:4326", 
"EPSG:32631", NULL) as an argument of proj_trans()

>
> p.s. How do I get that definition in PROJ 5? In PROJ 4, I could use 
> pj_get_def. (See also https://stackoverflow.com/questions/66533885.)
Use proj_as_proj_string(). That can work on both CRS and coordinate 
operation (when there's a single coordinate operation actually contained 
in proj_create_crs_to_crs() )

-- 
http://www.spatialys.com


From sgh at sgh.dk  Tue Mar  9 10:35:19 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Tue, 09 Mar 2021 19:35:19 +0100
Subject: [PROJ] PROJ without proj.db
Message-ID: <11297790.rVrccBIA4e@koontz>

Hi

I use proj wihout proj.db. What is the best way to avoid PROJ constantly 
complaining about proj.db being missing ?

-- 
S?ren Holm



From kristianevers at gmail.com  Tue Mar  9 10:42:49 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 9 Mar 2021 19:42:49 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <11297790.rVrccBIA4e@koontz>
References: <11297790.rVrccBIA4e@koontz>
Message-ID: <AE1A3D25-18FD-4CD9-BDC3-D248403EC559@gmail.com>


> What is the best way to avoid PROJ constantly 
> complaining about proj.db being missing ?

By putting proj.db in $PROJ_LIB.

/Kristian

From sgh at sgh.dk  Tue Mar  9 10:59:27 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Tue, 09 Mar 2021 19:59:27 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <AE1A3D25-18FD-4CD9-BDC3-D248403EC559@gmail.com>
References: <11297790.rVrccBIA4e@koontz>
 <AE1A3D25-18FD-4CD9-BDC3-D248403EC559@gmail.com>
Message-ID: <2094260.lDluGGlFK4@koontz>

Sure

To elaborate a bit.

My application in running on Android. That implies a couple of things.

1. It is difficult to distribute static files - they are always placed in a 
compressed file and regular linux file io functions (that sqlite uses) does not 
work on those.

2. Given that I do not need the database, increasing my apk-size by 8MB is 
unnecessary.

So - I just need a way to have PROJ stop complaining about a database that - 
for my usecase - is not needed to resolved the initstring.

In all of this my assumption is that proj.db *MUST* be the file generated for a 
specific PROJ-version. Please correct me if I'm wrong about that :)

tirsdag den 9. marts 2021 19.42.49 CET skrev Kristian Evers:
> > What is the best way to avoid PROJ constantly
> > complaining about proj.db being missing ?
> 
> By putting proj.db in $PROJ_LIB.
> 
> /Kristian


-- 
S?ren Holm



From mwoehlke.floss at gmail.com  Tue Mar  9 11:43:47 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Tue, 9 Mar 2021 14:43:47 -0500
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
Message-ID: <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>

On 09/03/2021 13.33, Even Rouault wrote:
> Le 09/03/2021 ? 19:18, Matthew Woehlke a ?crit?:
>> In PROJ 4, 4326 is "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84". 
>> If I use that with proj_create, I get something usable. What's the 
>> difference?
> 
> PROJ >= 6 now makes a difference between a CRS and a coordinate 
> operation. A PROJ string without +type=crs is assumed to be a coordinate 
> operation, and with +type=crs to be a CRS.
> 
> The old PROJ.4 definitions without +type=crs depending on the context 
> could be used as a CRS definition or a coordinate operation. PROJ >= 6 
> now requires to be explicit to avoid that confusion. You can't use a CRS 
> like "EPSG:4326" with proj_trans(). That doesn't make sense. A CRS 
> doesn't define a coordinate operation by itself.

I sort-of get that, but I don't think you actually answered the 
question. What does "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84" 
mean than I *can* use it with proj_trans?

>> p.s. How do I get that definition in PROJ 5? In PROJ 4, I could use 
>> pj_get_def. (See also https://stackoverflow.com/questions/66533885.)
>
> Use proj_as_proj_string(). That can work on both CRS and coordinate 
> operation (when there's a single coordinate operation actually contained 
> in proj_create_crs_to_crs() )

Why is *that* not documented as the replacement for pj_get_def?

-- 
Matthew

From even.rouault at spatialys.com  Tue Mar  9 11:53:20 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 9 Mar 2021 20:53:20 +0100
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
Message-ID: <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>


Le 09/03/2021 ? 20:43, Matthew Woehlke a ?crit?:
> On 09/03/2021 13.33, Even Rouault wrote:
>> Le 09/03/2021 ? 19:18, Matthew Woehlke a ?crit?:
>>> In PROJ 4, 4326 is "+proj=longlat +datum=WGS84 +no_defs 
>>> +ellps=WGS84". If I use that with proj_create, I get something 
>>> usable. What's the difference?
>>
>> PROJ >= 6 now makes a difference between a CRS and a coordinate 
>> operation. A PROJ string without +type=crs is assumed to be a 
>> coordinate operation, and with +type=crs to be a CRS.
>>
>> The old PROJ.4 definitions without +type=crs depending on the context 
>> could be used as a CRS definition or a coordinate operation. PROJ >= 
>> 6 now requires to be explicit to avoid that confusion. You can't use 
>> a CRS like "EPSG:4326" with proj_trans(). That doesn't make sense. A 
>> CRS doesn't define a coordinate operation by itself.
>
> I sort-of get that, but I don't think you actually answered the 
> question. What does "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84" 
> mean than I *can* use it with proj_trans?
There is no +type=crs in it, so this is interpreted as a PROJ coordinate 
operation, and not a CRS. But EPSG:4326 *is* a CRS (it expands to 
"+proj=longlat +datum=WGS84 +no_defs +type=crs" now as can be seen with 
the "projinfo EPSG:4326" output)
>
>>> p.s. How do I get that definition in PROJ 5? In PROJ 4, I could use 
>>> pj_get_def. (See also https://stackoverflow.com/questions/66533885.)
>>
>> Use proj_as_proj_string(). That can work on both CRS and coordinate 
>> operation (when there's a single coordinate operation actually 
>> contained in proj_create_crs_to_crs() )
>
> Why is *that* not documented as the replacement for pj_get_def?

To let you engage you pro-actively with the community and submit a pull 
request to document it :-)

-- 
http://www.spatialys.com


From mwoehlke.floss at gmail.com  Tue Mar  9 12:39:23 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Tue, 9 Mar 2021 15:39:23 -0500
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
Message-ID: <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>

On 09/03/2021 14.53, Even Rouault wrote:
> Le 09/03/2021 ? 20:43, Matthew Woehlke a ?crit?:
>> On 09/03/2021 13.33, Even Rouault wrote:
>>> Le 09/03/2021 ? 19:18, Matthew Woehlke a ?crit?:
>>>> In PROJ 4, 4326 is "+proj=longlat +datum=WGS84 +no_defs 
>>>> +ellps=WGS84". If I use that with proj_create, I get something 
>>>> usable. What's the difference?
>>>
>>> PROJ >= 6 now makes a difference between a CRS and a coordinate 
>>> operation. A PROJ string without +type=crs is assumed to be a 
>>> coordinate operation, and with +type=crs to be a CRS.
>>>
>>> The old PROJ.4 definitions without +type=crs depending on the context 
>>> could be used as a CRS definition or a coordinate operation. PROJ >= 
>>> 6 now requires to be explicit to avoid that confusion. You can't use 
>>> a CRS like "EPSG:4326" with proj_trans(). That doesn't make sense. A 
>>> CRS doesn't define a coordinate operation by itself.
>>
>> I sort-of get that, but I don't think you actually answered the 
>> question. What does "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84" 
>> mean than I *can* use it with proj_trans?
> > There is no +type=crs in it, so this is interpreted as a PROJ coordinate
> operation, and not a CRS. But EPSG:4326 *is* a CRS (it expands to 
> "+proj=longlat +datum=WGS84 +no_defs +type=crs" now as can be seen with 
> the "projinfo EPSG:4326" output)

What I'm hearing is "this is a meaningless, pedant-only distinction to 
prevent being able to do useful things". That, or you aren't 
understanding the question.

4326 is "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84" plus a silly 
"I am a CRS, make me less useful" flag. If I don't set that flag, I can 
use that projection in proj_trans, so apparently that means something.
*What* does it mean? Why, other than some perverse desire to make my 
life more difficult, can I not use an EPSG in the same manner?

Is there a way (without string parsing) to "remove" this silly flag so I 
can use EPSG projections without having to couple my input and output?

I'd be quite happy to have a proj_trans(proj_from, proj_to, coord)... 
What I want to avoid is having to create O(N?) projections when I need 
to deal with N coordinate systems. (Among other reasons, it makes it 
non-trivially harder to cache projections.)

-- 
Matthew

From even.rouault at spatialys.com  Tue Mar  9 12:57:21 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 9 Mar 2021 21:57:21 +0100
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
 <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
Message-ID: <111efacb-29ba-ee7e-b5f6-ce62a788a1ac@spatialys.com>


Le 09/03/2021 ? 21:39, Matthew Woehlke a ?crit?:
> On 09/03/2021 14.53, Even Rouault wrote:
>> Le 09/03/2021 ? 20:43, Matthew Woehlke a ?crit?:
>>> On 09/03/2021 13.33, Even Rouault wrote:
>>>> Le 09/03/2021 ? 19:18, Matthew Woehlke a ?crit?:
>>>>> In PROJ 4, 4326 is "+proj=longlat +datum=WGS84 +no_defs 
>>>>> +ellps=WGS84". If I use that with proj_create, I get something 
>>>>> usable. What's the difference?
>>>>
>>>> PROJ >= 6 now makes a difference between a CRS and a coordinate 
>>>> operation. A PROJ string without +type=crs is assumed to be a 
>>>> coordinate operation, and with +type=crs to be a CRS.
>>>>
>>>> The old PROJ.4 definitions without +type=crs depending on the 
>>>> context could be used as a CRS definition or a coordinate 
>>>> operation. PROJ >= 6 now requires to be explicit to avoid that 
>>>> confusion. You can't use a CRS like "EPSG:4326" with proj_trans(). 
>>>> That doesn't make sense. A CRS doesn't define a coordinate 
>>>> operation by itself.
>>>
>>> I sort-of get that, but I don't think you actually answered the 
>>> question. What does "+proj=longlat +datum=WGS84 +no_defs 
>>> +ellps=WGS84" mean than I *can* use it with proj_trans?
>> > There is no +type=crs in it, so this is interpreted as a PROJ 
>> coordinate
>> operation, and not a CRS. But EPSG:4326 *is* a CRS (it expands to 
>> "+proj=longlat +datum=WGS84 +no_defs +type=crs" now as can be seen 
>> with the "projinfo EPSG:4326" output)
>
> What I'm hearing is "this is a meaningless, pedant-only distinction to 
> prevent being able to do useful things". That, or you aren't 
> understanding the question.

PROJ >= 6 is definitely a lot more pedant that previous version used to 
be. A CRS and a coordinate operation are not the same thing, and we 
don't want people to use them indifferently to avoid errors. 
"+proj=longlat +datum=WGS84" is a transformation that expected it input 
coordinates to be provided in radians for example, but? "+proj=longlat 
+datum=WGS84 +type=crs" is a geographic CRS whose units are degrees. So 
this "silly" flag added by the "perverse" me is there for a reason.

I'll stop answering to this thread now, as I don't like the tone it takes.

-- 
http://www.spatialys.com


From kreve at sdfe.dk  Tue Mar  9 13:05:33 2021
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 9 Mar 2021 21:05:33 +0000
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <2094260.lDluGGlFK4@koontz>
References: <11297790.rVrccBIA4e@koontz>
 <AE1A3D25-18FD-4CD9-BDC3-D248403EC559@gmail.com> <2094260.lDluGGlFK4@koontz>
Message-ID: <722BCE26-DFC8-43E8-AF87-23E656F4B866@sdfe.dk>

In what way is PROJ complaining? That is not clear to me from the setup you describe.

/Kristian

> On 9 Mar 2021, at 19:59, S?ren Holm <sgh at sgh.dk> wrote:
> 
> Sure
> 
> To elaborate a bit.
> 
> My application in running on Android. That implies a couple of things.
> 
> 1. It is difficult to distribute static files - they are always placed in a 
> compressed file and regular linux file io functions (that sqlite uses) does not 
> work on those.
> 
> 2. Given that I do not need the database, increasing my apk-size by 8MB is 
> unnecessary.
> 
> So - I just need a way to have PROJ stop complaining about a database that - 
> for my usecase - is not needed to resolved the initstring.
> 
> In all of this my assumption is that proj.db *MUST* be the file generated for a 
> specific PROJ-version. Please correct me if I'm wrong about that :)
> 
> tirsdag den 9. marts 2021 19.42.49 CET skrev Kristian Evers:
>>> What is the best way to avoid PROJ constantly
>>> complaining about proj.db being missing ?
>> 
>> By putting proj.db in $PROJ_LIB.
>> 
>> /Kristian
> 
> 
> -- 
> S?ren Holm
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From mwoehlke.floss at gmail.com  Tue Mar  9 13:19:53 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Tue, 9 Mar 2021 16:19:53 -0500
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <111efacb-29ba-ee7e-b5f6-ce62a788a1ac@spatialys.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
 <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
 <111efacb-29ba-ee7e-b5f6-ce62a788a1ac@spatialys.com>
Message-ID: <9684e3ea-a950-83b3-7b4f-38843b264b2a@gmail.com>

On 09/03/2021 15.57, Even Rouault wrote:
> I'll stop answering to this thread now, as I don't like the tone it takes.

Well, excuse me for being just a *touch* frustrated. You've sent three 
messages now without actually answering my question, and I'm trying to 
move to an API that seems to have gone out of its way to be deliberately 
difficult to use (compared to its predecessor).

 >> What does using "+proj=longlat +datum=WGS84" with proj_trans do?

I'm still waiting for an answer.

-- 
Matthew

From martin.desruisseaux at geomatys.com  Tue Mar  9 13:27:38 2021
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 9 Mar 2021 22:27:38 +0100
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
 <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
Message-ID: <1ef7a1f2-51b1-66c7-bfc2-23d49886a96d@geomatys.com>

Hello Matthew

Historically, PROJ was a map projection library. It was not designed for 
datum shifts, which is a very different problem than map projections. 
The PROJ4 syntax assumes a one-to-one relationship between the source 
CRS, the target CRS and the mathematical operation doing coordinate 
conversions from source to target. This simple assumption works for map 
projections but doesn't work well for datum shifts. It was nevertheless 
possible to do some datum shifts with PROJ4, for example using +wgs84 
parameters, but it put responsibility on user's shoulders (they have to 
choose the right parameters for the right region) and lure users with a 
false sense of accuracy. For example there is more than 50 sets of 
+towgs84 parameter values for a transformation between NAD27 and WGS84, 
while the PROJ4 definitions gave the false impression that a "one size 
fits all" existed.

PROJ6 has been redesigned on the model defined by ISO 19111, also 
available freely from OGC at 
http://docs.opengeospatial.org/as/18-005r4/18-005r4.html . This 
specification was designed by geodesist experts. It may look overly 
complex but all this complexity exist for a good reason. It is complex 
because the real world is complex.

Whether you need this complexity depends on the accuracy that you need. 
If you are fine with uncertainties ranging from a few meters (typical 
case) up to 3 km (worst case I have seen), then PROJ4 syntax is fine. It 
is certainly possible to reach centimetric precision with PROJ4 for 
advanced users with good understanding of datums, but this is not the 
case of lambda users. With PROJ6 and its database users are more likely 
to get accurate operations, and (most important) they have an estimation 
about the accuracy of the operation they got together with its domain of 
validity.

If an application needs only a few map projections on the same datum and 
never do any datum change, then it may be possible to avoid the need for 
a database, for example by saving a few ProjectedCRS definitions in Well 
Known Text (WKT) format. I do not know if it would make a difference 
regarding the warning emitted by PROJ however.

 ??? Martin



From kreve at sdfe.dk  Tue Mar  9 13:55:45 2021
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 9 Mar 2021 21:55:45 +0000
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <9684e3ea-a950-83b3-7b4f-38843b264b2a@gmail.com>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
 <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
 <111efacb-29ba-ee7e-b5f6-ce62a788a1ac@spatialys.com>
 <9684e3ea-a950-83b3-7b4f-38843b264b2a@gmail.com>
Message-ID: <C4735F7E-D351-4E5F-9033-F986662D6ED5@sdfe.dk>

Matthew,

The PROJ project has a code of conduct [0] that everyone who engages with
the community is expected to follow. If you can?t subscribe to the standards
explained in the CoC I suggest you take you problems elsewhere.

We are generally very happy to help users of PROJ solve their problems but
not at the cost of being talked down to. Try to find a bit of humbleness and
accept that maybe things are complicated for a reason other than making your
life difficult.

/Kristian

[0] https://proj.org/community/code_of_conduct.html


On 9 Mar 2021, at 22:19, Matthew Woehlke <mwoehlke.floss at gmail.com<mailto:mwoehlke.floss at gmail.com>> wrote:

On 09/03/2021 15.57, Even Rouault wrote:
I'll stop answering to this thread now, as I don't like the tone it takes.

Well, excuse me for being just a *touch* frustrated. You've sent three messages now without actually answering my question, and I'm trying to move to an API that seems to have gone out of its way to be deliberately difficult to use (compared to its predecessor).

>> What does using "+proj=longlat +datum=WGS84" with proj_trans do?

I'm still waiting for an answer.

--
Matthew
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210309/bc8308af/attachment-0001.html>

From JasonD at TheTranstecGroup.com  Tue Mar  9 14:51:02 2021
From: JasonD at TheTranstecGroup.com (Jason Dick)
Date: Tue, 9 Mar 2021 16:51:02 -0600
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
Message-ID: <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210309/3f8cdd74/attachment.html>

From mwoehlke.floss at gmail.com  Tue Mar  9 15:02:52 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Tue, 9 Mar 2021 18:02:52 -0500
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <C4735F7E-D351-4E5F-9033-F986662D6ED5@sdfe.dk>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
 <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
 <111efacb-29ba-ee7e-b5f6-ce62a788a1ac@spatialys.com>
 <9684e3ea-a950-83b3-7b4f-38843b264b2a@gmail.com>
 <C4735F7E-D351-4E5F-9033-F986662D6ED5@sdfe.dk>
Message-ID: <a3b18aad-5b9e-a49d-0adf-14d7c2665395@gmail.com>

On 09/03/2021 16.55, Kristian Evers wrote:
> We are generally very happy to help users of PROJ solve their problems but
> not at the cost of being talked down to.

I was not (at least until Even decided to take objection) attempting to 
"talk down" to anyone. I was attempting to express my honest feelings in 
a neutral manner. I'm sorry if that was not understood.

You say "we are generally very happy to help users". The replies I was 
receiving, *as I understood them*, did not seem consistent with that. 
When I said "what I'm hearing is...", what I was trying to express was 
surprise and confusion because my interpretation of Even's remarks 
didn't seem consistent with what I assumed were good intentions.

I expected good faith. I started out assuming good faith, up to the 
point where trying to say "hey, I don't think we're connecting here", I 
was told (politely, I'll grant) to get lost.

> Try to find a bit of humbleness

Try to consider the possibility that, rather than ranting or being 
deliberately offensive, the poor user is trying to work past what 
appears to be a breakdown in communication?

> accept that maybe things are complicated for a reason other than making your
> life difficult.

Be fair: the PROJ 5 API *does* go out of its way to make my life 
difficult. I'll grant that it has a reason for doing so, and even that 
it is perhaps TRTTD, but please note that it took three e-mails (and 
quite some frustration on both sides) before that reason was elucidated. 
(And I still don't have an answer to my question from the second e-mail.)

Humbleness is fine and all, but it's not reasonable to expect someone to 
not be frustrated by something that *is* deliberately obtuse when he 
doesn't understand *why* it's that way. Especially when one is already 
frustrated because his program isn't working, and ? let's be honest ? ? 
because he's trying to deal with geodesy, which is a headache on a 
*good* day.

-- 
Matthew

From kristianevers at gmail.com  Tue Mar  9 15:06:23 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 10 Mar 2021 00:06:23 +0100
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
 <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
Message-ID: <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>

Jason,

Try taking a look at this function from the testsuite:
https://github.com/OSGeo/PROJ/blob/f278b5bee641dd94245ed54f4eb75e29c3d4d993/test/unit/test_c_api.cpp#L166-L203 <https://github.com/OSGeo/PROJ/blob/f278b5bee641dd94245ed54f4eb75e29c3d4d993/test/unit/test_c_api.cpp#L166-L203>

I think it might help you along.

/Kristian

> On 9 Mar 2021, at 23:51, Jason Dick <JasonD at TheTranstecGroup.com> wrote:
> 
> Still trying to figure this out. This is using PROJ6, btw. Based on another thread, there are two ways of specifying EPSG 4326:
> 
> +proj=longlat +datum=WGS84
> 
> and 
> 
> +proj=longlat +datum=WGS84 +type=crs
> 
> The former is PJ_TYPE_OTHER_COORDINATE_OPERATION and the latter is PJ_TYPE_GEOGRAPHIC_2D_CRS. I don't understand the difference. How can the first be an operation? What's it doing? And why does a CRS not work with proj_lp_dist?
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210310/ad93e43c/attachment.html>

From alansnow21 at gmail.com  Tue Mar  9 15:24:26 2021
From: alansnow21 at gmail.com (Alan Snow)
Date: Tue, 9 Mar 2021 17:24:26 -0600
Subject: [PROJ] Creating projection *not* from full init string?
In-Reply-To: <C4735F7E-D351-4E5F-9033-F986662D6ED5@sdfe.dk>
References: <54a2d252-b08c-5277-3996-9c2c8d006a74@gmail.com>
 <7cadf21e-4faa-5e46-4b4c-46b9ca08955c@spatialys.com>
 <c976ae21-ccc5-02d8-7f97-0f170e216e0a@gmail.com>
 <7ac8ce1e-dd66-d80a-9ee0-a3377eded241@spatialys.com>
 <32878a7f-3113-9636-b22e-8db64834e499@gmail.com>
 <86d6c3bc-b729-c840-4309-35f5834bb1f3@spatialys.com>
 <5b8e16e9-4eb4-2a69-075d-daf3bdaaafc7@gmail.com>
 <111efacb-29ba-ee7e-b5f6-ce62a788a1ac@spatialys.com>
 <9684e3ea-a950-83b3-7b4f-38843b264b2a@gmail.com>
 <C4735F7E-D351-4E5F-9033-F986662D6ED5@sdfe.dk>
Message-ID: <CAGybdFTU9tdgApWfOpmQqoDd5BABXg=i=4VY4_jLoCir1z9ORg@mail.gmail.com>

The other answers for why things are the way they are are much better than
what I could explain. But, I can speak to this from the perspective of
pyproj and how it uses the new PROJ API. I am a big fan of the new API. It
is more complex, but it provides a lot of nice capabilities.

Using proj_create as the engine, pyproj is able to create several different
types of objects depending on what is passed in: CRS (Datum,
CoordinateOperation, etc..) (projinfo?), Proj (proj), Transformer (cs2cs,
cct). All of them are a PJ*because PJ* can represent several different
things (ref
<https://github.com/OSGeo/PROJ/blob/20295afe2f7db68006b1f29c60d22e35ba5e9ec1/src/proj.h#L730-L772>
).

When you use EPSG:4326 with the CRS class:
>>> import pyproj
>>> pyproj.CRS("EPSG:4326")
<Geographic 2D CRS: EPSG:4326>
Name: WGS 84
Axis Info [ellipsoidal]:
- Lat[north]: Geodetic latitude (degree)
- Lon[east]: Geodetic longitude (degree)
Area of Use:
- name: World.
- bounds: (-180.0, -90.0, 180.0, 90.0)
Datum: World Geodetic System 1984
- Ellipsoid: WGS 84
- Prime Meridian: Greenwich
>>> crs.to_proj4()
<stdin>:1: UserWarning: You will likely lose important projection
information when converting to a PROJ string from another format. See:
https://proj.org/faq.html#what-is-the-best-format-for-describing-coordinate-reference-systems
'+proj=longlat +datum=WGS84 +no_defs +type=crs'
This is useful for defining your coordinate reference system, but shouldn't
be used for transformations.

Then, there is the Proj class (equivalent of proj). You can pass in
"EPSG:4326" and it will export the CRS as a proj string using
proj_as_proj_string
<https://github.com/pyproj4/pyproj/blob/2842f1b7a9bbbd75478618c407c11b28ac590fc6/pyproj/_crs.pyx#L145>
and then stripping out the "type=crs" bit to create the equivalent
operation used by proj by passing that string back into proj_create. It is
a bit of a hack, but it works. This method was used instead of the
proj_create_crs_to_crs because it supports proj_factors (not sure why the
other method does not as I haven't dug into it).

>>> proj = pyproj.Proj("EPSG:4326")
>>> proj.definition
'proj=longlat datum=WGS84 no_defs ellps=WGS84 towgs84=0,0,0'
>>> proj
<Other Coordinate Operation Transformer: longlat>
Description: PROJ-based coordinate operation
Area of Use:
- undefined

This is is something to use with caution as it does not take into account
datum shifts (
https://pyproj4.github.io/pyproj/stable/gotchas.html#proj-not-a-generic-latitude-longitude-to-projection-converter).
The new and improved method, mentioned by Evan and demonstrated in the
link, is to use proj_create_crs_to_crs where you explicitly define the
source CRS and the target CRS.

Hopefully this helps,
Alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210309/dd0d45f3/attachment-0001.html>

From sgh at sgh.dk  Tue Mar  9 23:37:57 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Wed, 10 Mar 2021 08:37:57 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <722BCE26-DFC8-43E8-AF87-23E656F4B866@sdfe.dk>
References: <11297790.rVrccBIA4e@koontz> <2094260.lDluGGlFK4@koontz>
 <722BCE26-DFC8-43E8-AF87-23E656F4B866@sdfe.dk>
Message-ID: <62131333.EKDhueMGTR@koontz>

I get this in stderr

pj_obj_create: Cannot find proj.db

Neither proj_log_level or proj_log_func makes any difference.

My code basically looks like this :

ctx = proj_context_create();
proj_log_level(ctx, PJ_LOG_NONE);
proj_log_func(ctx, nullptr, logger);
proj = proj_create(ctx, def);

But still proj_create(ctx, def) gives me that output. It is clear to me that 
for some reason loglevel and/or logfunction is overwritten  during 
proj_create. I that seems like unwanted behavior.

tirsdag den 9. marts 2021 22.05.33 CET skrev Kristian Evers:
> In what way is PROJ complaining? That is not clear to me from the setup you
> describe.
 
> /Kristian
> 
> 
> > On 9 Mar 2021, at 19:59, S?ren Holm <sgh at sgh.dk> wrote:
> > 
> > Sure
> > 
> > To elaborate a bit.
> > 
> > My application in running on Android. That implies a couple of things.
> > 
> > 1. It is difficult to distribute static files - they are always placed in
> > a 
 compressed file and regular linux file io functions (that sqlite
> > uses) does not work on those.
> > 
> > 2. Given that I do not need the database, increasing my apk-size by 8MB is
> > 
 unnecessary.
> > 
> > So - I just need a way to have PROJ stop complaining about a database that
> > - 
 for my usecase - is not needed to resolved the initstring.
> > 
> > In all of this my assumption is that proj.db *MUST* be the file generated
> > for a 
 specific PROJ-version. Please correct me if I'm wrong about that
> > :) 
> > tirsdag den 9. marts 2021 19.42.49 CET skrev Kristian Evers:
> > 
> >>> What is the best way to avoid PROJ constantly
> >>> complaining about proj.db being missing ?
> >> 
> >> 
> >> By putting proj.db in $PROJ_LIB.
> >> 
> >> /Kristian
> > 
> > 
> > 
> > -- 
> > S?ren Holm
> > 
> > 
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
> 
> 


-- 
S?ren Holm



From kristianevers at gmail.com  Wed Mar 10 00:14:34 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 10 Mar 2021 09:14:34 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <62131333.EKDhueMGTR@koontz>
References: <11297790.rVrccBIA4e@koontz> <2094260.lDluGGlFK4@koontz>
 <722BCE26-DFC8-43E8-AF87-23E656F4B866@sdfe.dk> <62131333.EKDhueMGTR@koontz>
Message-ID: <8D525831-29D4-419E-BD38-7AA4A0A299A8@gmail.com>

Here?s the source proj_log_func():

/*****************************************************************************/
void proj_log_func (PJ_CONTEXT *ctx, void *app_data, PJ_LOG_FUNCTION logf) {
/******************************************************************************
Put a new logging function into P's context. The opaque object app_data is
passed as first arg at each call to the logger
******************************************************************************/
    if (nullptr==ctx)
        ctx = pj_get_default_ctx ();
    ctx->logger_app_data = app_data;
    if (nullptr!=logf)
       ctx->logger = logf;
}

So, by putting nullptr as the log function you end up with the default logging
function. Try setting up an actual logger function and pass a pointer to that.

I can see how you might think that a null pointer would achieve something else,
though. The docs should clarify that or perhaps the functionality should be
changed to let logf==nullptr explicitly mean ?shut up?. The latter is likely the
best move based on the fact that if you are happy with the default logger you
probably wouldn?t call proj_log_func() in the first place.

/Kristian

> On 10 Mar 2021, at 08:37, S?ren Holm <sgh at sgh.dk> wrote:
> 
> I get this in stderr
> 
> pj_obj_create: Cannot find proj.db
> 
> Neither proj_log_level or proj_log_func makes any difference.
> 
> My code basically looks like this :
> 
> ctx = proj_context_create();
> proj_log_level(ctx, PJ_LOG_NONE);
> proj_log_func(ctx, nullptr, logger);
> proj = proj_create(ctx, def);
> 
> But still proj_create(ctx, def) gives me that output. It is clear to me that 
> for some reason loglevel and/or logfunction is overwritten  during 
> proj_create. I that seems like unwanted behavior.
> 
> tirsdag den 9. marts 2021 22.05.33 CET skrev Kristian Evers:
>> In what way is PROJ complaining? That is not clear to me from the setup you
>> describe.
> 
>> /Kristian
>> 
>> 
>>> On 9 Mar 2021, at 19:59, S?ren Holm <sgh at sgh.dk> wrote:
>>> 
>>> Sure
>>> 
>>> To elaborate a bit.
>>> 
>>> My application in running on Android. That implies a couple of things.
>>> 
>>> 1. It is difficult to distribute static files - they are always placed in
>>> a 
> compressed file and regular linux file io functions (that sqlite
>>> uses) does not work on those.
>>> 
>>> 2. Given that I do not need the database, increasing my apk-size by 8MB is
>>> 
> unnecessary.
>>> 
>>> So - I just need a way to have PROJ stop complaining about a database that
>>> - 
> for my usecase - is not needed to resolved the initstring.
>>> 
>>> In all of this my assumption is that proj.db *MUST* be the file generated
>>> for a 
> specific PROJ-version. Please correct me if I'm wrong about that
>>> :) 
>>> tirsdag den 9. marts 2021 19.42.49 CET skrev Kristian Evers:
>>> 
>>>>> What is the best way to avoid PROJ constantly
>>>>> complaining about proj.db being missing ?
>>>> 
>>>> 
>>>> By putting proj.db in $PROJ_LIB.
>>>> 
>>>> /Kristian
>>> 
>>> 
>>> 
>>> -- 
>>> S?ren Holm
>>> 
>>> 
>>> _______________________________________________
>>> PROJ mailing list
>>> PROJ at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/proj
>> 
>> 
> 
> 
> -- 
> S?ren Holm
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From kristianevers at gmail.com  Wed Mar 10 00:22:32 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 10 Mar 2021 09:22:32 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <4897074.Ehn2xBoMC2@koontz>
References: <11297790.rVrccBIA4e@koontz> <62131333.EKDhueMGTR@koontz>
 <8D525831-29D4-419E-BD38-7AA4A0A299A8@gmail.com> <4897074.Ehn2xBoMC2@koontz>
Message-ID: <43561CCB-DB68-4F4B-A897-339240A44BBD@gmail.com>

Sorry, I completely misread that. Well, I guess my analysis is still valid
although it doesn?t solve your problem :-)

I am not sure what?s going on then. Which version are you using? 

/Kristian

> On 10 Mar 2021, at 09:18, S?ren Holm <sgh at sgh.dk> wrote:
> 
> The function pointer is the third argument. I do indeed set the log function.
> 
> onsdag den 10. marts 2021 09.14.34 CET skrev Kristian Evers:
>> Here?s the source proj_log_func():
>> 
>> /***************************************************************************
>> **/ void proj_log_func (PJ_CONTEXT *ctx, void *app_data, PJ_LOG_FUNCTION
>> logf) {
>> /**************************************************************************
>> **** Put a new logging function into P's context. The opaque object app_data
>> is passed as first arg at each call to the logger
>> ****************************************************************************
>> **/ if (nullptr==ctx)
>>        ctx = pj_get_default_ctx ();
>>    ctx->logger_app_data = app_data;
>>    if (nullptr!=logf)
>>       ctx->logger = logf;
>> }
>> 
>> So, by putting nullptr as the log function you end up with the default
>> logging function. Try setting up an actual logger function and pass a
>> pointer to that.
>> 
>> I can see how you might think that a null pointer would achieve something
>> else, though. The docs should clarify that or perhaps the functionality
>> should be changed to let logf==nullptr explicitly mean ?shut up?. The
>> latter is likely the best move based on the fact that if you are happy with
>> the default logger you probably wouldn?t call proj_log_func() in the first
>> place.
>> 
> 
> -- 
> S?ren Holm

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210310/8ca9d0dc/attachment.html>

From sgh at sgh.dk  Wed Mar 10 00:18:09 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Wed, 10 Mar 2021 09:18:09 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <8D525831-29D4-419E-BD38-7AA4A0A299A8@gmail.com>
References: <11297790.rVrccBIA4e@koontz> <62131333.EKDhueMGTR@koontz>
 <8D525831-29D4-419E-BD38-7AA4A0A299A8@gmail.com>
Message-ID: <4897074.Ehn2xBoMC2@koontz>

The function pointer is the third argument. I do indeed set the log function.

onsdag den 10. marts 2021 09.14.34 CET skrev Kristian Evers:
> Here?s the source proj_log_func():
> 
> /***************************************************************************
> **/ void proj_log_func (PJ_CONTEXT *ctx, void *app_data, PJ_LOG_FUNCTION
> logf) {
> /**************************************************************************
> **** Put a new logging function into P's context. The opaque object app_data
> is passed as first arg at each call to the logger
> ****************************************************************************
> **/ if (nullptr==ctx)
>         ctx = pj_get_default_ctx ();
>     ctx->logger_app_data = app_data;
>     if (nullptr!=logf)
>        ctx->logger = logf;
> }
> 
> So, by putting nullptr as the log function you end up with the default
> logging function. Try setting up an actual logger function and pass a
> pointer to that.
> 
> I can see how you might think that a null pointer would achieve something
> else, though. The docs should clarify that or perhaps the functionality
> should be changed to let logf==nullptr explicitly mean ?shut up?. The
> latter is likely the best move based on the fact that if you are happy with
> the default logger you probably wouldn?t call proj_log_func() in the first
> place.
> 

-- 
S?ren Holm



From sgh at sgh.dk  Wed Mar 10 00:29:32 2021
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Wed, 10 Mar 2021 09:29:32 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <43561CCB-DB68-4F4B-A897-339240A44BBD@gmail.com>
References: <11297790.rVrccBIA4e@koontz> <4897074.Ehn2xBoMC2@koontz>
 <43561CCB-DB68-4F4B-A897-339240A44BBD@gmail.com>
Message-ID: <2599080.od4KRURxeu@koontz>

Sorry for the noise Kristian .... turned out that there where multiple 
contexts and not all of them had the logger function set. Doh!!!

onsdag den 10. marts 2021 09.22.32 CET skrev Kristian Evers:
> Sorry, I completely misread that. Well, I guess my analysis is still valid
> although it doesn?t solve your problem :-)
> 
> I am not sure what?s going on then. Which version are you using?
> 
> /Kristian
> 
> > On 10 Mar 2021, at 09:18, S?ren Holm <sgh at sgh.dk> wrote:
> > 
> > The function pointer is the third argument. I do indeed set the log
> > function.> 
> > onsdag den 10. marts 2021 09.14.34 CET skrev Kristian Evers:
> >> Here?s the source proj_log_func():
> >> 
> >> /************************************************************************
> >> *** **/ void proj_log_func (PJ_CONTEXT *ctx, void *app_data,
> >> PJ_LOG_FUNCTION logf) {
> >> /************************************************************************
> >> **
> >> **** Put a new logging function into P's context. The opaque object
> >> app_data is passed as first arg at each call to the logger
> >> *************************************************************************
> >> *** **/ if (nullptr==ctx)
> >> 
> >>        ctx = pj_get_default_ctx ();
> >>    
> >>    ctx->logger_app_data = app_data;
> >>    if (nullptr!=logf)
> >>    
> >>       ctx->logger = logf;
> >> 
> >> }
> >> 
> >> So, by putting nullptr as the log function you end up with the default
> >> logging function. Try setting up an actual logger function and pass a
> >> pointer to that.
> >> 
> >> I can see how you might think that a null pointer would achieve something
> >> else, though. The docs should clarify that or perhaps the functionality
> >> should be changed to let logf==nullptr explicitly mean ?shut up?. The
> >> latter is likely the best move based on the fact that if you are happy
> >> with
> >> the default logger you probably wouldn?t call proj_log_func() in the
> >> first
> >> place.


-- 
S?ren Holm



From kristianevers at gmail.com  Wed Mar 10 00:30:31 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 10 Mar 2021 09:30:31 +0100
Subject: [PROJ] PROJ without proj.db
In-Reply-To: <2599080.od4KRURxeu@koontz>
References: <11297790.rVrccBIA4e@koontz> <4897074.Ehn2xBoMC2@koontz>
 <43561CCB-DB68-4F4B-A897-339240A44BBD@gmail.com> <2599080.od4KRURxeu@koontz>
Message-ID: <975FA671-B229-407E-9F1B-89C539167251@gmail.com>

No worries, I?m glad you figured it out.

/Kristian

> On 10 Mar 2021, at 09:29, S?ren Holm <sgh at sgh.dk> wrote:
> 
> Sorry for the noise Kristian .... turned out that there where multiple 
> contexts and not all of them had the logger function set. Doh!!!
> 
> onsdag den 10. marts 2021 09.22.32 CET skrev Kristian Evers:
>> Sorry, I completely misread that. Well, I guess my analysis is still valid
>> although it doesn?t solve your problem :-)
>> 
>> I am not sure what?s going on then. Which version are you using?
>> 
>> /Kristian
>> 
>>> On 10 Mar 2021, at 09:18, S?ren Holm <sgh at sgh.dk> wrote:
>>> 
>>> The function pointer is the third argument. I do indeed set the log
>>> function.> 
>>> onsdag den 10. marts 2021 09.14.34 CET skrev Kristian Evers:
>>>> Here?s the source proj_log_func():
>>>> 
>>>> /************************************************************************
>>>> *** **/ void proj_log_func (PJ_CONTEXT *ctx, void *app_data,
>>>> PJ_LOG_FUNCTION logf) {
>>>> /************************************************************************
>>>> **
>>>> **** Put a new logging function into P's context. The opaque object
>>>> app_data is passed as first arg at each call to the logger
>>>> *************************************************************************
>>>> *** **/ if (nullptr==ctx)
>>>> 
>>>>       ctx = pj_get_default_ctx ();
>>>> 
>>>>   ctx->logger_app_data = app_data;
>>>>   if (nullptr!=logf)
>>>> 
>>>>      ctx->logger = logf;
>>>> 
>>>> }
>>>> 
>>>> So, by putting nullptr as the log function you end up with the default
>>>> logging function. Try setting up an actual logger function and pass a
>>>> pointer to that.
>>>> 
>>>> I can see how you might think that a null pointer would achieve something
>>>> else, though. The docs should clarify that or perhaps the functionality
>>>> should be changed to let logf==nullptr explicitly mean ?shut up?. The
>>>> latter is likely the best move based on the fact that if you are happy
>>>> with
>>>> the default logger you probably wouldn?t call proj_log_func() in the
>>>> first
>>>> place.
> 
> 
> -- 
> S?ren Holm
> 
> 


From mwoehlke.floss at gmail.com  Wed Mar 10 06:07:58 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Wed, 10 Mar 2021 09:07:58 -0500
Subject: [PROJ] proj_trans swaps X and Y?
Message-ID: <7276df57-72d2-0f6e-356c-45995ff17e3a@gmail.com>

I'm trying to convert between coordinate systems using 
proj_create_crs_to_crs and proj_trans.

In PROJ 4, coordinates are always in x,y,z (easting, northing, altitude) 
order. I just stuff my coordinates in and read them back, possibly with 
some conversion between degrees and radians, and everything Just Works.

If I try to do this in PROJ 5, it fails. As best as I can tell, lat-lon 
coordinate systems expect input, and provide output, as y, x, z.

Given that all I know is the EPSG, how do I determine the proper order 
in which to provide my inputs and read my outputs?

-- 
Matthew

From JasonD at TheTranstecGroup.com  Wed Mar 10 06:27:50 2021
From: JasonD at TheTranstecGroup.com (Jason Dick)
Date: Wed, 10 Mar 2021 08:27:50 -0600
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
 <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
 <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>
Message-ID: <8bfd4d33-1fa7-575a-3d05-08a93b1df42a@TheTranstecGroup.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210310/41d133bd/attachment.html>

From alansnow21 at gmail.com  Wed Mar 10 06:41:51 2021
From: alansnow21 at gmail.com (Alan Snow)
Date: Wed, 10 Mar 2021 08:41:51 -0600
Subject: [PROJ] proj_trans swaps X and Y?
In-Reply-To: <7276df57-72d2-0f6e-356c-45995ff17e3a@gmail.com>
References: <7276df57-72d2-0f6e-356c-45995ff17e3a@gmail.com>
Message-ID: <CAGybdFRY=4uexCLK+87kC7kaGXfhpdS7b=y00qR6BqnP3orR4g@mail.gmail.com>

Info on why things are this way:
https://proj.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent

To find the axis order information, you need to inspect the CRS to
determine the axis order:
https://pyproj4.github.io/pyproj/stable/examples.html

The PROJ methods needed to inspect the coordinate system of the CRS include:
proj_crs_get_coordinate_system
proj_cs_get_axis_count
proj_cs_get_axis_info

If you want the old behavior, you can use proj_normalize_for_visualization
so it is in the x,y,z order.

Hope this helps,
Alan

On Wed, Mar 10, 2021 at 8:08 AM Matthew Woehlke <mwoehlke.floss at gmail.com>
wrote:

> I'm trying to convert between coordinate systems using
> proj_create_crs_to_crs and proj_trans.
>
> In PROJ 4, coordinates are always in x,y,z (easting, northing, altitude)
> order. I just stuff my coordinates in and read them back, possibly with
> some conversion between degrees and radians, and everything Just Works.
>
> If I try to do this in PROJ 5, it fails. As best as I can tell, lat-lon
> coordinate systems expect input, and provide output, as y, x, z.
>
> Given that all I know is the EPSG, how do I determine the proper order
> in which to provide my inputs and read my outputs?
>
> --
> Matthew
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
Alan Snow
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210310/307ac82f/attachment.html>

From kristianevers at gmail.com  Wed Mar 10 07:39:56 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 10 Mar 2021 16:39:56 +0100
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <8bfd4d33-1fa7-575a-3d05-08a93b1df42a@TheTranstecGroup.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
 <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
 <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>
 <8bfd4d33-1fa7-575a-3d05-08a93b1df42a@TheTranstecGroup.com>
Message-ID: <2DAD01EC-6F27-4B23-B9DC-5B5997BC3BF7@gmail.com>

Sorry, I thought your problem was getting set up before the call to proj_lp_dist. 
I?ve tried to reproduce your problem and I believe you?ve come across a bug.
Below is a bit of test code I wrote to demonstrate the behaviour. As far as I can tell
you get similar results.


#include <stdio.h>
#include "proj.h"

int main() {

    PJ_CONTEXT *C = proj_context_create();
    PJ *P;
    //P = proj_create(C, "EPSG:4258");                                  // returns inf
    //P = proj_get_ellipsoid(C, proj_create(C, "EPSG:4258"));           // returns inf
    //P = proj_create(C, "+proj=latlong +ellps=GRS80");                 // returns 12836.740931
    //P = proj_create(C, "+proj=latlong +ellps=GRS80 +type=crs");       // returns inf
    //P = proj_create(C, "+proj=utm +zone=32 +ellps=GRS80");            // returns 12836.740931
    //P = proj_create_crs_to_crs (C,"EPSG:4326", "EPSG:4258", NULL);    // returns 12836.740931
    P = proj_create_crs_to_crs (C,"EPSG:4326", "EPSG:32632", NULL);     // returns 12836.740931

    PJ_COORD c1 = proj_coord(proj_torad(12.0), proj_torad(55.0), 0, 0);
    PJ_COORD c2 = proj_coord(proj_torad(12.1), proj_torad(55.1), 0, 0);

    double d = proj_lp_dist(P, c1, c2);

    printf("Distance: %f", d);

    proj_destroy(P);

    return 0;

}


I would expect all of the above (perhaps with the exception of the proj_get_ellipsoid
line) to return the same distance.

This is most likely because internally P->geod is not initialized when creating a CRS object.
I haven?t been able to pinpoint exactly where but someone more familiar with that part of the
code might be able to do so quickly.



> On 10 Mar 2021, at 15:27, Jason Dick <JasonD at TheTranstecGroup.com> wrote:
> 
> On 3/9/2021 5:06 PM, Kristian Evers wrote:
>> Try taking a look at this function from the testsuite:
>> https://github.com/OSGeo/PROJ/blob/f278b5bee641dd94245ed54f4eb75e29c3d4d993/test/unit/test_c_api.cpp#L166-L203
> Thanks for the pointer, but it's not getting through to me. From what I gather, Infinity is the correct answer when using EPSG:4326, but it doesn't explain why. Why does distance require an operation PJ and not a CRS? I've looked at the source code for the distance function before, but it wasn't helpful either. Keep in mind, I have no geo background. I just use libraries for transforming coordinates. I've learned a lot, but PROJ is much more "technical" than what I've used in the past.
> 


From JasonD at TheTranstecGroup.com  Wed Mar 10 08:39:31 2021
From: JasonD at TheTranstecGroup.com (Jason Dick)
Date: Wed, 10 Mar 2021 10:39:31 -0600
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <2DAD01EC-6F27-4B23-B9DC-5B5997BC3BF7@gmail.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
 <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
 <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>
 <8bfd4d33-1fa7-575a-3d05-08a93b1df42a@TheTranstecGroup.com>
 <2DAD01EC-6F27-4B23-B9DC-5B5997BC3BF7@gmail.com>
Message-ID: <ba42eb94-9a15-aa88-f7f5-fd20f60873e3@TheTranstecGroup.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210310/21d0d2a5/attachment-0001.html>

From even.rouault at spatialys.com  Wed Mar 10 10:07:10 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 10 Mar 2021 19:07:10 +0100
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <2DAD01EC-6F27-4B23-B9DC-5B5997BC3BF7@gmail.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
 <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
 <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>
 <8bfd4d33-1fa7-575a-3d05-08a93b1df42a@TheTranstecGroup.com>
 <2DAD01EC-6F27-4B23-B9DC-5B5997BC3BF7@gmail.com>
Message-ID: <aa88e4b5-287a-a1b7-2e51-df8e8dc5f812@spatialys.com>

Fix pending in https://github.com/OSGeo/PROJ/pull/2570

Documentation of those functions would deserve enhancements though. See 
my comment in the PR

Le 10/03/2021 ? 16:39, Kristian Evers a ?crit?:
> Sorry, I thought your problem was getting set up before the call to proj_lp_dist.
> I?ve tried to reproduce your problem and I believe you?ve come across a bug.
> Below is a bit of test code I wrote to demonstrate the behaviour. As far as I can tell
> you get similar results.
>
>
> #include <stdio.h>
> #include "proj.h"
>
> int main() {
>
>      PJ_CONTEXT *C = proj_context_create();
>      PJ *P;
>      //P = proj_create(C, "EPSG:4258");                                  // returns inf
>      //P = proj_get_ellipsoid(C, proj_create(C, "EPSG:4258"));           // returns inf
>      //P = proj_create(C, "+proj=latlong +ellps=GRS80");                 // returns 12836.740931
>      //P = proj_create(C, "+proj=latlong +ellps=GRS80 +type=crs");       // returns inf
>      //P = proj_create(C, "+proj=utm +zone=32 +ellps=GRS80");            // returns 12836.740931
>      //P = proj_create_crs_to_crs (C,"EPSG:4326", "EPSG:4258", NULL);    // returns 12836.740931
>      P = proj_create_crs_to_crs (C,"EPSG:4326", "EPSG:32632", NULL);     // returns 12836.740931
>
>      PJ_COORD c1 = proj_coord(proj_torad(12.0), proj_torad(55.0), 0, 0);
>      PJ_COORD c2 = proj_coord(proj_torad(12.1), proj_torad(55.1), 0, 0);
>
>      double d = proj_lp_dist(P, c1, c2);
>
>      printf("Distance: %f", d);
>
>      proj_destroy(P);
>
>      return 0;
>
> }
>
>
> I would expect all of the above (perhaps with the exception of the proj_get_ellipsoid
> line) to return the same distance.
>
> This is most likely because internally P->geod is not initialized when creating a CRS object.
> I haven?t been able to pinpoint exactly where but someone more familiar with that part of the
> code might be able to do so quickly.
>
>
>
>> On 10 Mar 2021, at 15:27, Jason Dick <JasonD at TheTranstecGroup.com> wrote:
>>
>> On 3/9/2021 5:06 PM, Kristian Evers wrote:
>>> Try taking a look at this function from the testsuite:
>>> https://github.com/OSGeo/PROJ/blob/f278b5bee641dd94245ed54f4eb75e29c3d4d993/test/unit/test_c_api.cpp#L166-L203
>> Thanks for the pointer, but it's not getting through to me. From what I gather, Infinity is the correct answer when using EPSG:4326, but it doesn't explain why. Why does distance require an operation PJ and not a CRS? I've looked at the source code for the distance function before, but it wasn't helpful either. Keep in mind, I have no geo background. I just use libraries for transforming coordinates. I've learned a lot, but PROJ is much more "technical" than what I've used in the past.
>>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From kristianevers at gmail.com  Wed Mar 10 10:13:23 2021
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 10 Mar 2021 19:13:23 +0100
Subject: [PROJ] Projection type required for proj_lp_dist
In-Reply-To: <aa88e4b5-287a-a1b7-2e51-df8e8dc5f812@spatialys.com>
References: <9c437ec2-276f-6f11-8390-a1420fd61de6@TheTranstecGroup.com>
 <23c47670-5bb8-d936-6fb9-9ab5fbb9d936@TheTranstecGroup.com>
 <afb0af3c-8089-303c-9f4d-56c54e5f53e3@TheTranstecGroup.com>
 <D1DF3A29-5159-4862-ABEE-E5BC19847226@gmail.com>
 <8bfd4d33-1fa7-575a-3d05-08a93b1df42a@TheTranstecGroup.com>
 <2DAD01EC-6F27-4B23-B9DC-5B5997BC3BF7@gmail.com>
 <aa88e4b5-287a-a1b7-2e51-df8e8dc5f812@spatialys.com>
Message-ID: <3C43456E-551F-4522-BAEF-7D67B2D6D838@gmail.com>

Thanks, Even! I?ll take care of the docs later tonight or tomorrow.

/Kristian

> On 10 Mar 2021, at 19:07, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Fix pending in https://github.com/OSGeo/PROJ/pull/2570
> 
> Documentation of those functions would deserve enhancements though. See my comment in the PR
> 
> Le 10/03/2021 ? 16:39, Kristian Evers a ?crit :
>> Sorry, I thought your problem was getting set up before the call to proj_lp_dist.
>> I?ve tried to reproduce your problem and I believe you?ve come across a bug.
>> Below is a bit of test code I wrote to demonstrate the behaviour. As far as I can tell
>> you get similar results.
>> 
>> 
>> #include <stdio.h>
>> #include "proj.h"
>> 
>> int main() {
>> 
>>     PJ_CONTEXT *C = proj_context_create();
>>     PJ *P;
>>     //P = proj_create(C, "EPSG:4258");                                  // returns inf
>>     //P = proj_get_ellipsoid(C, proj_create(C, "EPSG:4258"));           // returns inf
>>     //P = proj_create(C, "+proj=latlong +ellps=GRS80");                 // returns 12836.740931
>>     //P = proj_create(C, "+proj=latlong +ellps=GRS80 +type=crs");       // returns inf
>>     //P = proj_create(C, "+proj=utm +zone=32 +ellps=GRS80");            // returns 12836.740931
>>     //P = proj_create_crs_to_crs (C,"EPSG:4326", "EPSG:4258", NULL);    // returns 12836.740931
>>     P = proj_create_crs_to_crs (C,"EPSG:4326", "EPSG:32632", NULL);     // returns 12836.740931
>> 
>>     PJ_COORD c1 = proj_coord(proj_torad(12.0), proj_torad(55.0), 0, 0);
>>     PJ_COORD c2 = proj_coord(proj_torad(12.1), proj_torad(55.1), 0, 0);
>> 
>>     double d = proj_lp_dist(P, c1, c2);
>> 
>>     printf("Distance: %f", d);
>> 
>>     proj_destroy(P);
>> 
>>     return 0;
>> 
>> }
>> 
>> 
>> I would expect all of the above (perhaps with the exception of the proj_get_ellipsoid
>> line) to return the same distance.
>> 
>> This is most likely because internally P->geod is not initialized when creating a CRS object.
>> I haven?t been able to pinpoint exactly where but someone more familiar with that part of the
>> code might be able to do so quickly.
>> 
>> 
>> 
>>> On 10 Mar 2021, at 15:27, Jason Dick <JasonD at TheTranstecGroup.com> wrote:
>>> 
>>> On 3/9/2021 5:06 PM, Kristian Evers wrote:
>>>> Try taking a look at this function from the testsuite:
>>>> https://github.com/OSGeo/PROJ/blob/f278b5bee641dd94245ed54f4eb75e29c3d4d993/test/unit/test_c_api.cpp#L166-L203
>>> Thanks for the pointer, but it's not getting through to me. From what I gather, Infinity is the correct answer when using EPSG:4326, but it doesn't explain why. Why does distance require an operation PJ and not a CRS? I've looked at the source code for the distance function before, but it wasn't helpful either. Keep in mind, I have no geo background. I just use libraries for transforming coordinates. I've learned a lot, but PROJ is much more "technical" than what I've used in the past.
>>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> 
> -- 
> http://www.spatialys.com
> My software is free, but my time generally not.
> 


From mwoehlke.floss at gmail.com  Wed Mar 10 11:05:36 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Wed, 10 Mar 2021 14:05:36 -0500
Subject: [PROJ] proj_trans swaps X and Y?
In-Reply-To: <CAGybdFRY=4uexCLK+87kC7kaGXfhpdS7b=y00qR6BqnP3orR4g@mail.gmail.com>
References: <7276df57-72d2-0f6e-356c-45995ff17e3a@gmail.com>
 <CAGybdFRY=4uexCLK+87kC7kaGXfhpdS7b=y00qR6BqnP3orR4g@mail.gmail.com>
Message-ID: <baf295a1-b2dc-a389-33c3-173c67617895@gmail.com>

On 10/03/2021 09.41, Alan Snow wrote:
> Info on why things are this way:
> https://proj.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent

Do I understand correctly that PROJ 5 should not have this "issue"? (I 
only tested 6...)

> To find the axis order information, you need to inspect the CRS to
> determine the axis order:
> https://pyproj4.github.io/pyproj/stable/examples.html
> 
> The PROJ methods needed to inspect the coordinate system of the CRS include:
> proj_crs_get_coordinate_system
> proj_cs_get_axis_count
> proj_cs_get_axis_info

Uh... that appears to be insanely complicated. Pass, thanks.

> If you want the old behavior, you can use proj_normalize_for_visualization
> so it is in the x,y,z order.

That's better. Thanks also to Stephan for the same suggestion.

-- 
Matthew

From mwoehlke.floss at gmail.com  Fri Mar 19 08:59:24 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Fri, 19 Mar 2021 11:59:24 -0400
Subject: [PROJ] Get PROJ description in PROJ 5?
Message-ID: <8f48bd63-8b82-3aaf-f0f2-bf4c1fe6caf6@gmail.com>

In PROJ 4, I could get a description of a projection using pj_get_def.

In PROJ 6, I can use proj_as_proj_string.

However, proj_as_proj_string doesn't exist in PROJ 5? How can I get the 
description of a PROJ in PROJ 5?

proj_pj_info does not seem to work (the definition I get back is empty, 
at least in PROJ 6; does this function behave differently in PROJ 5?).

-- 
Matthew

From mwoehlke.floss at gmail.com  Fri Mar 19 09:36:49 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Fri, 19 Mar 2021 12:36:49 -0400
Subject: [PROJ] Get PROJ description in PROJ 5?
In-Reply-To: <8f48bd63-8b82-3aaf-f0f2-bf4c1fe6caf6@gmail.com>
References: <8f48bd63-8b82-3aaf-f0f2-bf4c1fe6caf6@gmail.com>
Message-ID: <5dd900af-59b4-b775-b64b-d49e8bf0d642@gmail.com>

On 19/03/2021 11.59, Matthew Woehlke wrote:
> In PROJ 4, I could get a description of a projection using pj_get_def.
> 
> In PROJ 6, I can use proj_as_proj_string.
> 
> However, proj_as_proj_string doesn't exist in PROJ 5? How can I get the 
> description of a PROJ in PROJ 5?
> 
> proj_pj_info does not seem to work (the definition I get back is empty, 
> at least in PROJ 6; does this function behave differently in PROJ 5?).

Okay, never mind... apparently proj_pj_info works, but only in PROJ 5, 
and only if using the "+init=epsg:N" syntax which is not supported in 
PROJ 6.

Sigh... looks like I need a pile of version-checking code.

-- 
Matthew

From sebastic at xs4all.nl  Fri Mar 19 09:52:23 2021
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 19 Mar 2021 17:52:23 +0100
Subject: [PROJ] Get PROJ description in PROJ 5?
In-Reply-To: <5dd900af-59b4-b775-b64b-d49e8bf0d642@gmail.com>
References: <8f48bd63-8b82-3aaf-f0f2-bf4c1fe6caf6@gmail.com>
 <5dd900af-59b4-b775-b64b-d49e8bf0d642@gmail.com>
Message-ID: <0dcce6a1-444e-b180-576f-9738b42b9f73@xs4all.nl>

On 3/19/21 5:36 PM, Matthew Woehlke wrote:
> Sigh... looks like I need a pile of version-checking code.

Why bother with PROJ 5 support at this point in time, you can just focus
on supporting PROJ 6+.

The only major distribution I'm aware of still at PROJ 5 is Debian
buster which has a new stable release with PROJ 7 on the horizon.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From mwoehlke.floss at gmail.com  Fri Mar 19 10:03:59 2021
From: mwoehlke.floss at gmail.com (Matthew Woehlke)
Date: Fri, 19 Mar 2021 13:03:59 -0400
Subject: [PROJ] Get PROJ description in PROJ 5?
In-Reply-To: <0dcce6a1-444e-b180-576f-9738b42b9f73@xs4all.nl>
References: <8f48bd63-8b82-3aaf-f0f2-bf4c1fe6caf6@gmail.com>
 <5dd900af-59b4-b775-b64b-d49e8bf0d642@gmail.com>
 <0dcce6a1-444e-b180-576f-9738b42b9f73@xs4all.nl>
Message-ID: <67ec29ff-cbcd-d5d3-e67c-837d1214875e@gmail.com>

On 19/03/2021 12.52, Sebastiaan Couwenberg wrote:
> On 3/19/21 5:36 PM, Matthew Woehlke wrote:
>> Sigh... looks like I need a pile of version-checking code.
> 
> Why bother with PROJ 5 support at this point in time, you can just focus
> on supporting PROJ 6+.

Because PROJ 6 doesn't support the PROJ 4 API (without code changes, 
anyway), and we get PROJ from an external repo. This leads to a 
chicken-and-egg problem; we can't bump to providing PROJ 6 because our 
project will break, and we can't use the PROJ 6 API because we don't 
*have* PROJ 6.

So far, I've bumped us to providing PROJ 5; we can still build against 
that using the PROJ 4 API. Now I'm working on updating our usage to PROJ 
5, with PROJ 6 support. It's not pretty, but it's not as bad as two 
totally separate implementations, which is what we'd just about have to 
do with PROJ 4 + PROJ 6.

Given how much of a headache this has been, and that we still have other 
projects using PROJ 4, I suspect we may not try to move to PROJ 6 until 
it becomes absolutely necessary. (At which point there is some hope some 
of the other code still on PROJ 4 will be effectively dead.)

It doesn't help that code that works with PROJ 5 is broken with PROJ 6.

-- 
Matthew

From nyall.dawson at gmail.com  Fri Mar 19 16:17:00 2021
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Sat, 20 Mar 2021 09:17:00 +1000
Subject: [PROJ] Get PROJ description in PROJ 5?
In-Reply-To: <67ec29ff-cbcd-d5d3-e67c-837d1214875e@gmail.com>
References: <8f48bd63-8b82-3aaf-f0f2-bf4c1fe6caf6@gmail.com>
 <5dd900af-59b4-b775-b64b-d49e8bf0d642@gmail.com>
 <0dcce6a1-444e-b180-576f-9738b42b9f73@xs4all.nl>
 <67ec29ff-cbcd-d5d3-e67c-837d1214875e@gmail.com>
Message-ID: <CAB28AsidWG_6X5uFyZTLwG=T_sS+81Ho40gQOHmJZ=-Dz_DeCQ@mail.gmail.com>

On Sat, 20 Mar 2021 at 03:04, Matthew Woehlke <mwoehlke.floss at gmail.com> wrote:
>
> On 19/03/2021 12.52, Sebastiaan Couwenberg wrote:
> > On 3/19/21 5:36 PM, Matthew Woehlke wrote:
> >> Sigh... looks like I need a pile of version-checking code.
> >
> > Why bother with PROJ 5 support at this point in time, you can just focus
> > on supporting PROJ 6+.
>
> Because PROJ 6 doesn't support the PROJ 4 API (without code changes,
> anyway), and we get PROJ from an external repo. This leads to a
> chicken-and-egg problem; we can't bump to providing PROJ 6 because our
> project will break, and we can't use the PROJ 6 API because we don't
> *have* PROJ 6.
>
> So far, I've bumped us to providing PROJ 5; we can still build against
> that using the PROJ 4 API. Now I'm working on updating our usage to PROJ
> 5, with PROJ 6 support. It's not pretty, but it's not as bad as two
> totally separate implementations, which is what we'd just about have to
> do with PROJ 4 + PROJ 6.
>
> Given how much of a headache this has been, and that we still have other
> projects using PROJ 4, I suspect we may not try to move to PROJ 6 until
> it becomes absolutely necessary. (At which point there is some hope some
> of the other code still on PROJ 4 will be effectively dead.)
>
> It doesn't help that code that works with PROJ 5 is broken with PROJ 6.

Coming from the viewpoint of a maintainer of a large project (QGIS)
which went through the pain of proj 4 -> 6 update, my sincere advice
is that it's a waste of time to support ANY versions earlier than proj
6 today. Your code will end up with so many conditional branches that
it becomes near unmaintainable. Absolutely **no-one** should be using
proj < 6 in 2021, to do so is to subject your users to all sorts of
misleading results.

I'd strongly encourage you to use your effort instead resolving the
packaging and community issues which are preventing you from migrating
completely to proj 6+.

Nyall




>
> --
> Matthew
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From jgpallero at gmail.com  Sun Mar 21 13:31:15 2021
From: jgpallero at gmail.com (=?UTF-8?Q?Jos=C3=A9_Luis_Garc=C3=ADa_Pallero?=)
Date: Sun, 21 Mar 2021 21:31:15 +0100
Subject: [PROJ] Call PROJ in OpenMP
Message-ID: <CAFemY3YKD8FLGx0T55k7XNmdS5DLeDEocU5oevLwP3tJFDKEfw@mail.gmail.com>

Hello:

Until now I though (I can't say the reason...) that the function
proj_trans_generic() worked in parallel, but inspecting the source
code in 4D_api.cpp that the transformations are done individually
inside a for loop by calling the function proj_trans(). So the
question is: which is the correct way to perform a transformation in
parallel using an OpenMP environment? For example a code such

#pragma omp parallel for default(none) private(i,coord2) shared(n,P,coord1)
for(i=0;i<n;i++)
{
    coord2 = proj_trans(P,PJ_FWD,coord1);
}

I see in the documentation that for multithreading a context must be created as

C = proj_context_create();

ans then the variable C must be used in the projection creation as

P = proj_create(C,parameters);

But it is at this point when i don't understand the use of the
transformation in OpenMP. Means the creation of the context C that the
proj_trans() function can be used safely in an OpenMP piece of code
such as the for loop presented before? Can anyone share an example of
PROJ in OpenMP?

Thanks
-- 
*****************************************
Jos? Luis Garc?a Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************

From knudsen.thomas at gmail.com  Mon Mar 22 03:32:22 2021
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Mon, 22 Mar 2021 11:32:22 +0100
Subject: [PROJ] Call PROJ in OpenMP
In-Reply-To: <CAFemY3YKD8FLGx0T55k7XNmdS5DLeDEocU5oevLwP3tJFDKEfw@mail.gmail.com>
References: <CAFemY3YKD8FLGx0T55k7XNmdS5DLeDEocU5oevLwP3tJFDKEfw@mail.gmail.com>
Message-ID: <CAH0YoENtuz25pnfAo-74da65gkbDt_hjJxEnCmV2LNfmw0qdrw@mail.gmail.com>

I'm not totally sure about this, but I *think* you need to instantiate a
separate PJ object for each parallel process.

Otherwise, as far as I can see, any push/pop operations (and potentially
others as well)
may get mixed up between non-synchronous parallel operations.

For simple operations things may work - but don't count on it.


Den s?n. 21. mar. 2021 kl. 21.31 skrev Jos? Luis Garc?a Pallero <
jgpallero at gmail.com>:

> Hello:
>
> Until now I though (I can't say the reason...) that the function
> proj_trans_generic() worked in parallel, but inspecting the source
> code in 4D_api.cpp that the transformations are done individually
> inside a for loop by calling the function proj_trans(). So the
> question is: which is the correct way to perform a transformation in
> parallel using an OpenMP environment? For example a code such
>
> #pragma omp parallel for default(none) private(i,coord2) shared(n,P,coord1)
> for(i=0;i<n;i++)
> {
>     coord2 = proj_trans(P,PJ_FWD,coord1);
> }
>
> I see in the documentation that for multithreading a context must be
> created as
>
> C = proj_context_create();
>
> ans then the variable C must be used in the projection creation as
>
> P = proj_create(C,parameters);
>
> But it is at this point when i don't understand the use of the
> transformation in OpenMP. Means the creation of the context C that the
> proj_trans() function can be used safely in an OpenMP piece of code
> such as the for loop presented before? Can anyone share an example of
> PROJ in OpenMP?
>
> Thanks
> --
> *****************************************
> Jos? Luis Garc?a Pallero
> jgpallero at gmail.com
> (o<
> / / \
> V_/_
> Use Debian GNU/Linux and enjoy!
> *****************************************
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210322/583600d3/attachment.html>

From couldabin at excite.com  Mon Mar 22 12:52:12 2021
From: couldabin at excite.com (dp)
Date: Mon, 22 Mar 2021 15:52:12 -0400
Subject: [PROJ] Building with VC 10 Express
Message-ID: <20210322153408.11545@web005.roc2.bluetie.com>

Hello, I am just starting with the Proj libraries and have run into a wall immediately. I wrote a single-line program just to get my feet wet -- a call to proj_context_create() -- and while it compiles without any errors, on load it fails with  "The application was unable to start correctly (0xc000007b)".

I am working with Win 7 Pro, 64-bit, SP1, VC 2010 Express. The libraries are the ones installed with the 32-bit version of OSGeo4W I installed for this purpose. The version of proj.exe that came with it is 6.3.2.

Thanks.

From roger.oberholtzer at gmail.com  Thu Mar 25 03:29:54 2021
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Thu, 25 Mar 2021 11:29:54 +0100
Subject: [PROJ] Altitude
Message-ID: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>

We have usually been focused on latitude/longitude when using proj. We
would now like to address altitude. I have looked in the proj docs,
but I cannot say that I am much the wiser in this respect.

We currently use the old C API (proj_api.h). But we are moving to the
new C API. That's a work in progress. And perhaps the subject of other
questions.... Here I am considering height.

Our typical scenario is that we collect data from a receiver (high-end
dual antenna - so good quality) in a moving vehicle. We collect
LAT/LONG in WGS84, and then project it using proj. For example to
SWEREF99. So it's basically EPSG:4326 ->  EPSG:3006, or the inverse.
Of course we don't only use SWEREF99. It's just an example.

The receivers are configured to collect altitude as the geoid in
EGM96. I think it is in fact the default for our receivers. So I guess
it is a common altitude.

To date, we have just let the altitude go along for the ride when
using proj. Our users can select if they want the altitude as supplied
by the receiver, or as proj calculates. There is a difference in the
values.

I have never understood how altitude is described in proj. For
example, using the example of EPSG:3006, the corresponding altitude
could be SWEN17_RH2000 (See
https://www.lantmateriet.se/en/maps-and-geographic-information/gps-geodesi-och-swepos/Om-geodesi/Transformationer/Geoidmodeller/).

Can I use proj to get SWEN17_RH2000 from EGM96? Perhaps I just didn't
recognize the information in the docs when I looked through it.

Or should I be looking elsewhere?

Sorry for being a noob here. But that's the state of my understanding
with respect to altitude.

-- 
Roger Oberholtzer

From j1 at jimenezshaw.com  Thu Mar 25 04:11:13 2021
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 25 Mar 2021 12:11:13 +0100
Subject: [PROJ] Altitude
In-Reply-To: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>
References: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>
Message-ID: <CADRrdKsAg=suYqk1Put7jimWAWLmgKVEiu3L3FxFn-kr1oiRDg@mail.gmail.com>

Hi Roger,

To convert altitudes you just need to provide a Z... and to have the proper
geoid grids. You are lucky, because SWEN17_RH2000 is available in PROJ-data
You can have a look at https://cdn.proj.org/ to see which grid files are
available, and their value in a point.

To see the results, you can compare
echo 59.3 18.0 10 | PROJ_NETWORK=OFF cs2cs EPSG:4326+5773 EPSG:3006+5613
6577304.57 670817.92 10.00

echo 59.3 18.0 10 | PROJ_NETWORK=ON cs2cs EPSG:4326+5773 EPSG:3006+5613
6577304.57 670817.92 10.12

If you do not want to use the network, you can include the gridfiles in
your distribution. Set how PROJ_LIB works. There is an API to specify the
paths in C as well.
For this particular case you need the gridfiles for EGM96 and
SWEN17_RH2000. You can see more info in
projinfo -s EPSG:4326+5773 -t EPSG:3006+5613

See that not every geoid file in the world is included in PROJ-data ;)

Cheers
Javier
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Thu, 25 Mar 2021 at 11:30, Roger Oberholtzer <roger.oberholtzer at gmail.com>
wrote:

> We have usually been focused on latitude/longitude when using proj. We
> would now like to address altitude. I have looked in the proj docs,
> but I cannot say that I am much the wiser in this respect.
>
> We currently use the old C API (proj_api.h). But we are moving to the
> new C API. That's a work in progress. And perhaps the subject of other
> questions.... Here I am considering height.
>
> Our typical scenario is that we collect data from a receiver (high-end
> dual antenna - so good quality) in a moving vehicle. We collect
> LAT/LONG in WGS84, and then project it using proj. For example to
> SWEREF99. So it's basically EPSG:4326 ->  EPSG:3006, or the inverse.
> Of course we don't only use SWEREF99. It's just an example.
>
> The receivers are configured to collect altitude as the geoid in
> EGM96. I think it is in fact the default for our receivers. So I guess
> it is a common altitude.
>
> To date, we have just let the altitude go along for the ride when
> using proj. Our users can select if they want the altitude as supplied
> by the receiver, or as proj calculates. There is a difference in the
> values.
>
> I have never understood how altitude is described in proj. For
> example, using the example of EPSG:3006, the corresponding altitude
> could be SWEN17_RH2000 (See
>
> https://www.lantmateriet.se/en/maps-and-geographic-information/gps-geodesi-och-swepos/Om-geodesi/Transformationer/Geoidmodeller/
> ).
>
> Can I use proj to get SWEN17_RH2000 from EGM96? Perhaps I just didn't
> recognize the information in the docs when I looked through it.
>
> Or should I be looking elsewhere?
>
> Sorry for being a noob here. But that's the state of my understanding
> with respect to altitude.
>
> --
> Roger Oberholtzer
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210325/adaff95d/attachment.html>

From gdt at lexort.com  Thu Mar 25 05:57:27 2021
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 25 Mar 2021 08:57:27 -0400
Subject: [PROJ] Altitude
In-Reply-To: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>
 (Roger Oberholtzer's message of "Thu, 25 Mar 2021 11:29:54 +0100")
References: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>
Message-ID: <rmiczvn1jd4.fsf@s1.lexort.com>


Roger Oberholtzer <roger.oberholtzer at gmail.com> writes:

> Our typical scenario is that we collect data from a receiver (high-end
> dual antenna - so good quality) in a moving vehicle. We collect
> LAT/LONG in WGS84, and then project it using proj. For example to
> SWEREF99. So it's basically EPSG:4326 ->  EPSG:3006, or the inverse.
> Of course we don't only use SWEREF99. It's just an example.
>
> The receivers are configured to collect altitude as the geoid in
> EGM96. I think it is in fact the default for our receivers. So I guess
> it is a common altitude.

You got good advice from Javier and I don't mean to contradict any of
it.  Beware that height is quite difficult to really understand, more so
than most people realize.

Yes, EGM96 is a gravity model that is used to convert WGS84 ellipsoidal
height to "WGS84 orthometric height".

You say lat/long is WGS84.  I would advise you to try to avoid WGS84, as
it refeers to a family of datums, and if your data is at all recent
(2013+) it is surely in WGS84(G1762), for non-differential GPS.  This
labeling would, or could -- another difficult subject -- avoid
transformation errors in many circumstances.

If your receiver is doing SBAS (EGNOS I'd guess), then your coordinates
are not in WGS84 but in the EGNOS reference frame.  If your receiver is
not doing SBAS and is receiving multiple constellations, then which
frame it's in is a really good questionn for the receiver manufacturer.
However, the answer seems to be that all of thsese are more or less
equal to ITRF2008 at the few mm level so it's mostly academic.

If your receiver is doing RTK, then it's in the RTK base station's
frame.  But it will then likely apply EGM96 to the HAE in that frame.
In the US, RTK is usually in NAD83, and using EGM96 with NAD83 HAE is
basically a wrong thing to do.

EGM96 is a geoid model published by the US NGA, and it's fairly coarse.
EGM2008 is current.  Receivers typically don't have the full models and
use a reduced-resolution grid.  They typically output the geoid
separation in an NMEA sentence, and when I've dug into this the value
they are using can be several meters off.  This was true even for an
F9P.

Your receiver is surely computing an XYZ position, which is an
~error-free transform lat/lon and ellipsoidal height.  If you are able
to log the raw data before EGM96 and use the ellipsoidal height you will
be better off accuracy wise.

I am heading to, in NMEA, recording the geoid height reported and
backing that out and storing HAE.

I hope this helps, even if only to realize your problem is harder than
you might have thought.

Greg
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210325/51f33246/attachment.sig>

From j1 at jimenezshaw.com  Thu Mar 25 07:46:44 2021
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 25 Mar 2021 15:46:44 +0100
Subject: [PROJ] Altitude
In-Reply-To: <rmiczvn1jd4.fsf@s1.lexort.com>
References: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>
 <rmiczvn1jd4.fsf@s1.lexort.com>
Message-ID: <CADRrdKssS0MCEA2FHeyV_AnPwhZOPdU13VchgjEF=r1tj3SowQ@mail.gmail.com>

Thanks Greg. I didn't want to frighten Roger at the first chance ;)

When you say "In the US, RTK is usually in NAD83", is it NAD83(2011)? Is
there any base station using a different (older) reference?

Connected to this... is there any information in the NTRIP protocol that
tell you the coordinate reference system used? I was not able to find that.
It would be very useful if I am using the same device in Europe, USA, or
wherever, that the RTK correction protocol tells me the coordinate
reference system used for the outputs.

Cheers,
Javier
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Thu, 25 Mar 2021 at 13:57, Greg Troxel <gdt at lexort.com> wrote:

>
> Roger Oberholtzer <roger.oberholtzer at gmail.com> writes:
>
> > Our typical scenario is that we collect data from a receiver (high-end
> > dual antenna - so good quality) in a moving vehicle. We collect
> > LAT/LONG in WGS84, and then project it using proj. For example to
> > SWEREF99. So it's basically EPSG:4326 ->  EPSG:3006, or the inverse.
> > Of course we don't only use SWEREF99. It's just an example.
> >
> > The receivers are configured to collect altitude as the geoid in
> > EGM96. I think it is in fact the default for our receivers. So I guess
> > it is a common altitude.
>
> You got good advice from Javier and I don't mean to contradict any of
> it.  Beware that height is quite difficult to really understand, more so
> than most people realize.
>
> Yes, EGM96 is a gravity model that is used to convert WGS84 ellipsoidal
> height to "WGS84 orthometric height".
>
> You say lat/long is WGS84.  I would advise you to try to avoid WGS84, as
> it refeers to a family of datums, and if your data is at all recent
> (2013+) it is surely in WGS84(G1762), for non-differential GPS.  This
> labeling would, or could -- another difficult subject -- avoid
> transformation errors in many circumstances.
>
> If your receiver is doing SBAS (EGNOS I'd guess), then your coordinates
> are not in WGS84 but in the EGNOS reference frame.  If your receiver is
> not doing SBAS and is receiving multiple constellations, then which
> frame it's in is a really good questionn for the receiver manufacturer.
> However, the answer seems to be that all of thsese are more or less
> equal to ITRF2008 at the few mm level so it's mostly academic.
>
> If your receiver is doing RTK, then it's in the RTK base station's
> frame.  But it will then likely apply EGM96 to the HAE in that frame.
> In the US, RTK is usually in NAD83, and using EGM96 with NAD83 HAE is
> basically a wrong thing to do.
>
> EGM96 is a geoid model published by the US NGA, and it's fairly coarse.
> EGM2008 is current.  Receivers typically don't have the full models and
> use a reduced-resolution grid.  They typically output the geoid
> separation in an NMEA sentence, and when I've dug into this the value
> they are using can be several meters off.  This was true even for an
> F9P.
>
> Your receiver is surely computing an XYZ position, which is an
> ~error-free transform lat/lon and ellipsoidal height.  If you are able
> to log the raw data before EGM96 and use the ellipsoidal height you will
> be better off accuracy wise.
>
> I am heading to, in NMEA, recording the geoid height reported and
> backing that out and storing HAE.
>
> I hope this helps, even if only to realize your problem is harder than
> you might have thought.
>
> Greg
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210325/8c1c4553/attachment-0001.html>

From gdt at lexort.com  Thu Mar 25 08:03:41 2021
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 25 Mar 2021 11:03:41 -0400
Subject: [PROJ] Altitude
In-Reply-To: <CADRrdKssS0MCEA2FHeyV_AnPwhZOPdU13VchgjEF=r1tj3SowQ@mail.gmail.com>
 (Javier Jimenez Shaw's message of "Thu, 25 Mar 2021 15:46:44 +0100")
References: <CANkOqwML8RXi4qm+fYcOKMpLRchbcG0tf0qA2k3A082bMvuS0w@mail.gmail.com>
 <rmiczvn1jd4.fsf@s1.lexort.com>
 <CADRrdKssS0MCEA2FHeyV_AnPwhZOPdU13VchgjEF=r1tj3SowQ@mail.gmail.com>
Message-ID: <rmih7kzz35e.fsf@s1.lexort.com>


Javier Jimenez Shaw <j1 at jimenezshaw.com> writes:

> Thanks Greg. I didn't want to frighten Roger at the first chance ;)
>
> When you say "In the US, RTK is usually in NAD83", is it NAD83(2011)? Is
> there any base station using a different (older) reference?

Many US states operate an RTN.  While I haven't dug into all of them,
every one I have looked at specifies "NAD83(2011) epoch 2010.0" and that
is more or less universal as the right answer (for CONUS, and CA is
complicated) mirroring the NSRS.  The differences from older NAD83 to
NAD83(2011) are generally small, and my sense is that anything older is
now regarded as obsolete.   (There is a still a lot of labeling data,
particularly non-geodetic-surveying-accuracy data, as just NAD83.)

> Connected to this... is there any information in the NTRIP protocol that
> tell you the coordinate reference system used? I was not able to find that.
> It would be very useful if I am using the same device in Europe, USA, or
> wherever, that the RTK correction protocol tells me the coordinate
> reference system used for the outputs.

My understanding is that NTRIP is basically a way to connect using
something that feels like http and ask for a named stream
("mountpoint"), and that all of the real information is contained within
that stream, usually RTCM2 for pseudorange differential, and RTCM3 for
carrier phase.  I am not aware of any datum tags, although I think there
are reference station coordinates.

So I think that means one should configure a pair of

  NTRIP address/mountpoint
  datum

for doing RTK.

Agreed it would be nice if this were included.  I'll see if I can figure
anything out.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210325/50c9aa74/attachment.sig>

From charles at karney.com  Fri Mar 26 06:15:20 2021
From: charles at karney.com (Charles Karney)
Date: Fri, 26 Mar 2021 09:15:20 -0400
Subject: [PROJ] Building with VC 10 Express
In-Reply-To: <20210322153408.11545@web005.roc2.bluetie.com>
References: <20210322153408.11545@web005.roc2.bluetie.com>
Message-ID: <399532a8-c1eb-7098-94a8-6016a0781ba8@karney.com>

Sorry, I'm not able to diagnose your problem directly.  However,
nowadays, the supported versions of Visual Studio are 2015 or later.  So
maybe try again with one of these versions of Visual Studio.

On 3/22/21 3:52 PM, dp wrote:
> Hello, I am just starting with the Proj libraries and have run into a wall immediately. I wrote a single-line program just to get my feet wet -- a call to proj_context_create() -- and while it compiles without any errors, on load it fails with  "The application was unable to start correctly (0xc000007b)".
> 
> I am working with Win 7 Pro, 64-bit, SP1, VC 2010 Express. The libraries are the ones installed with the 32-bit version of OSGeo4W I installed for this purpose. The version of proj.exe that came with it is 6.3.2.
> 
> Thanks.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> 

-- 
Charles Karney <charles at karney.com>
Princeton, NJ

From eric.g.younkin at noaa.gov  Fri Mar 26 08:06:47 2021
From: eric.g.younkin at noaa.gov (Eric Younkin - NOAA Federal)
Date: Fri, 26 Mar 2021 11:06:47 -0400
Subject: [PROJ] Describing custom vertical datums in wkt
Message-ID: <CAFe6qKjkoMv-FVXTkckoYr8o11L2faiBrRhQ2j_jPwtFZuT1tw@mail.gmail.com>

Hello,

As we move to registering our vdatum grids in EPSG, we needed to develop a
stop gap solution, describing our custom datums in WKT for archival.  These
would be derived datums based on elheight or geoid height, with proj vgrid
pipelines applied to get to water level datum.  We are thinking about using
something like this:

VERTCRS["NOAA Chart Datum",
                  BASEVERTCRS["NAD83(2011) Height",
                                              VDATUM["NAD83(2011) Height"],
                                              ID["EPSG",6319]],
                  DERIVINGCONVERSION["NAD83(2011) Height to NOAA Mean Lower
Low Water",
                                               METHOD["VDatum_VXXX gtx grid
transformation",
                                                  ID["EPSG",1084]],
                                                PARAMETERFILE['g2012bu0',
'core\\geoid12b\\g2012bu0.gtx',
                                                  ID[?NOAA VDatum?, ?NAD83
to Geoid12B?, ?10/23/2012?]],
                                                PARAMETERFILE['tss',
'CAORblan01_8301\\tss.gtx',
                                                  ID[?NOAA VDatum?,
?Geoid12B to Tss", ?06/20/2019?]],
                                                PARAMETERFILE['mllw',
'CAORblan01_8301\\mllw.gtx',
                                                  ID[?NOAA VDatum?, ?Tss to
Mean Lower Low Water?, ?06/20/2019?]]],
                    VDATUM["NOAA Chart Datum"],
                    CS[vertical,1],
                          AXIS["gravity-related height (H)",up],
                          LENGTHUNIT["metre",1]]

I know this isn't something we could use in PROJ in the same way that a
registered EPSG reference could, but we could at least have something
describing what we do for archival.  I'm thinking of building some code to
manually translate a move between two of these WKT strings into a pipeline
operation.

Hopefully that made sense.  Please let me know if you have any suggestions.

Thanks,
Eric

-- 
Eric Younkin
Physical Scientist
NOAA OCS, Hydrographic Systems and Technology Branch
1315 East-West Highway
N/CS11, Room 6604
Silver Spring, MD 20910
Office: 240-847-8208
Cell: 828-331-8197
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210326/4b9c18f4/attachment.html>

From even.rouault at spatialys.com  Fri Mar 26 09:58:14 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 26 Mar 2021 17:58:14 +0100
Subject: [PROJ] Describing custom vertical datums in wkt
In-Reply-To: <CAFe6qKjkoMv-FVXTkckoYr8o11L2faiBrRhQ2j_jPwtFZuT1tw@mail.gmail.com>
References: <CAFe6qKjkoMv-FVXTkckoYr8o11L2faiBrRhQ2j_jPwtFZuT1tw@mail.gmail.com>
Message-ID: <765c9113-17ec-1370-72c6-424a90e03afb@spatialys.com>

Eric,

Besides a few minor issues in the below WKT (use of single quotes, or 
non-ASCII double quote characters), more fundamental remarks:

- I don't think DerivedVerticalCRS is the appropriate modeling. 
http://docs.opengeospatial.org/is/18-010r7/18-010r7.html in ?3.1.14 
mentions: "A derived coordinate reference system inherits its datum or 
reference frame from its base coordinate reference system.", so you 
can't have the derived CRS having VDATUM["NOAA Chart Datum"] and the 
base CRS VDATUM["NAD83(2011) Height"]. And if you look at the grammar at 
http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#120, VDATUM[] 
is not allowed for the derived vertical CRS, and when PROJ re-exports to 
WKT2 this definition, it will omit it.

- One could question too if the derivation is a conversion. ?14.2.1 
mentions "Because by definition coordinate conversions are exact, the 
attribute operation accuracy is not relevant and excluded from the 
deriving conversion WKT string". Using grids is probably a big unusual 
to define a conversion

- you can't use EPSG:6319 that is the Geographic 3D CRS as a (base) 
vertical CRS. Ellipsoidal heights in ISO-19111 can't exist as standalone 
vertical CRS. They must be associated with the horizontal coordinates.

- the proper model would probably be to define a NOAA Chart Datum 
vertical datum and vertical CRS, and define a transformation between 
EPSG:6319 and the NOAA Chart Datum vertical CRS. You could reference 
that transformation in a GEOIDMODEL[] node attached as a child of the 
VERTCRS[].

- besides importing/exporting/querying the attributes, PROJ will not be 
able currently to do anything useful (ie compute a PROJ pipeline between 
that and another vertical CRS) with a derived projected CRS.

Even

Le 26/03/2021 ? 16:06, Eric Younkin - NOAA Federal via PROJ a ?crit?:
> Hello,
>
> As we move to registering our vdatum grids in EPSG, we needed to 
> develop a stop gap solution, describing our custom datums in WKT for 
> archival.? These would be derived datums based on elheight or geoid 
> height, with proj vgrid pipelines applied to get to water level 
> datum.? We are thinking about using something like this:
>
> VERTCRS["NOAA Chart Datum",
> ? ? ? ? ? ? ? ? ? BASEVERTCRS["NAD83(2011) Height",
> VDATUM["NAD83(2011) Height"],
> ID["EPSG",6319]],
> ? ? ? ? ? ? ? ? ??DERIVINGCONVERSION["NAD83(2011) Height to NOAA Mean 
> Lower Low Water",
> ?METHOD["VDatum_VXXX gtx grid transformation",
> ID["EPSG",1084]],
> PARAMETERFILE['g2012bu0', 'core\\geoid12b\\g2012bu0.gtx',
> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ID[?NOAA VDatum?, 
> ?NAD83 to Geoid12B?, ?10/23/2012?]],
> PARAMETERFILE['tss', 'CAORblan01_8301\\tss.gtx',
> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ID[?NOAA VDatum?, 
> ?Geoid12B to Tss", ?06/20/2019?]],
> PARAMETERFILE['mllw', 'CAORblan01_8301\\mllw.gtx',
> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ID[?NOAA VDatum?, 
> ?Tss to Mean Lower Low Water?, ?06/20/2019?]]],
> ? ? ? ? ? ? ? ? ? ? VDATUM["NOAA Chart Datum"],
> ? ? ? ? ? ? ? ? ? ? CS[vertical,1],
> ? ? ? ? ? ? ? ? ? ? ? ? ? AXIS["gravity-related height (H)",up],
> ? ? ? ? ? ? ? ? ? ? ? ? ? LENGTHUNIT["metre",1]]
>
> I know this isn't something we could use in PROJ in the same way that 
> a registered EPSG reference could, but we could at least have 
> something describing what we do for archival. I'm thinking of building 
> some code to manually translate a move between two of these WKT 
> strings into a pipeline operation.
>
> Hopefully that made sense.? Please let me know if you have any 
> suggestions.
>
> Thanks,
> Eric
>
> -- 
> Eric Younkin
> Physical Scientist
> NOAA OCS, Hydrographic Systems and Technology Branch
> 1315 East-West Highway
> N/CS11, Room 6604
> Silver Spring, MD 20910
> Office: 240-847-8208
> Cell: 828-331-8197
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210326/2fd36322/attachment.html>

From eric.g.younkin at noaa.gov  Fri Mar 26 10:37:42 2021
From: eric.g.younkin at noaa.gov (Eric Younkin - NOAA Federal)
Date: Fri, 26 Mar 2021 13:37:42 -0400
Subject: [PROJ] Describing custom vertical datums in wkt
In-Reply-To: <765c9113-17ec-1370-72c6-424a90e03afb@spatialys.com>
References: <CAFe6qKjkoMv-FVXTkckoYr8o11L2faiBrRhQ2j_jPwtFZuT1tw@mail.gmail.com>
 <765c9113-17ec-1370-72c6-424a90e03afb@spatialys.com>
Message-ID: <CAFe6qKh+0HbBL7rLEm95_qgkLFPo7vWrdSd2vWWp1STxwNakWA@mail.gmail.com>

Hi Even,

Thanks for these notes.  I agree that what I have isn't great.  Ideally we
will be following what you describe as the 'proper model' when we move to
register in EPSG.  What I have here is our attempt to build something that
at the very least documents the process and does so in a way that does not
require the creation of a separate NOAA Chart Datum definition, since our
archived data would just have one WKT field to represent the data CRS.

I was planning on manually defining pipelines from this WKT string to run
through PROJ, using some code to wrap the WKT.  We currently define end
point datums in our data with just a 'MLLW' string, so I figured this would
at least be better for now.  But perhaps this is not a step in the right
direction.  Maybe moving to EPSG is the only route forward for us, and we
should wait for that process before making any changes, regardless of how
bad what we currently do is.

Thanks,
Eric

On Fri, Mar 26, 2021 at 12:58 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> Eric,
>
> Besides a few minor issues in the below WKT (use of single quotes, or
> non-ASCII double quote characters), more fundamental remarks:
>
> - I don't think DerivedVerticalCRS is the appropriate modeling.
> http://docs.opengeospatial.org/is/18-010r7/18-010r7.html in ?3.1.14
> mentions: "A derived coordinate reference system inherits its datum or
> reference frame from its base coordinate reference system.", so you can't
> have the derived CRS having VDATUM["NOAA Chart Datum"] and the base CRS
> VDATUM["NAD83(2011) Height"]. And if you look at the grammar at
> http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#120, VDATUM[] is
> not allowed for the derived vertical CRS, and when PROJ re-exports to WKT2
> this definition, it will omit it.
>
> - One could question too if the derivation is a conversion. ?14.2.1
> mentions "Because by definition coordinate conversions are exact, the
> attribute operation accuracy is not relevant and excluded from the deriving
> conversion WKT string". Using grids is probably a big unusual to define a
> conversion
>
> - you can't use EPSG:6319 that is the Geographic 3D CRS as a (base)
> vertical CRS. Ellipsoidal heights in ISO-19111 can't exist as standalone
> vertical CRS. They must be associated with the horizontal coordinates.
>
> - the proper model would probably be to define a NOAA Chart Datum vertical
> datum and vertical CRS, and define a transformation between EPSG:6319 and
> the NOAA Chart Datum vertical CRS. You could reference that transformation
> in a GEOIDMODEL[] node attached as a child of the VERTCRS[].
>
> - besides importing/exporting/querying the attributes, PROJ will not be
> able currently to do anything useful (ie compute a PROJ pipeline between
> that and another vertical CRS) with a derived projected CRS.
>
> Even
> Le 26/03/2021 ? 16:06, Eric Younkin - NOAA Federal via PROJ a ?crit :
>
> Hello,
>
> As we move to registering our vdatum grids in EPSG, we needed to develop a
> stop gap solution, describing our custom datums in WKT for archival.  These
> would be derived datums based on elheight or geoid height, with proj vgrid
> pipelines applied to get to water level datum.  We are thinking about using
> something like this:
>
> VERTCRS["NOAA Chart Datum",
>                   BASEVERTCRS["NAD83(2011) Height",
>                                               VDATUM["NAD83(2011) Height"],
>                                               ID["EPSG",6319]],
>                   DERIVINGCONVERSION["NAD83(2011) Height to NOAA Mean
> Lower Low Water",
>                                                METHOD["VDatum_VXXX gtx
> grid transformation",
>                                                   ID["EPSG",1084]],
>                                                 PARAMETERFILE['g2012bu0',
> 'core\\geoid12b\\g2012bu0.gtx',
>                                                   ID[?NOAA VDatum?, ?NAD83
> to Geoid12B?, ?10/23/2012?]],
>                                                 PARAMETERFILE['tss',
> 'CAORblan01_8301\\tss.gtx',
>                                                   ID[?NOAA VDatum?,
> ?Geoid12B to Tss", ?06/20/2019?]],
>                                                 PARAMETERFILE['mllw',
> 'CAORblan01_8301\\mllw.gtx',
>                                                   ID[?NOAA VDatum?, ?Tss
> to Mean Lower Low Water?, ?06/20/2019?]]],
>                     VDATUM["NOAA Chart Datum"],
>                     CS[vertical,1],
>                           AXIS["gravity-related height (H)",up],
>                           LENGTHUNIT["metre",1]]
>
> I know this isn't something we could use in PROJ in the same way that a
> registered EPSG reference could, but we could at least have something
> describing what we do for archival.  I'm thinking of building some code to
> manually translate a move between two of these WKT strings into a pipeline
> operation.
>
> Hopefully that made sense.  Please let me know if you have any suggestions.
>
> Thanks,
> Eric
>
> --
> Eric Younkin
> Physical Scientist
> NOAA OCS, Hydrographic Systems and Technology Branch
> 1315 East-West Highway
> N/CS11, Room 6604
> Silver Spring, MD 20910
> Office: 240-847-8208
> Cell: 828-331-8197
>
> _______________________________________________
> PROJ mailing listPROJ at lists.osgeo.orghttps://lists.osgeo.org/mailman/listinfo/proj
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
>

-- 
Eric Younkin
Physical Scientist
NOAA OCS, Hydrographic Systems and Technology Branch
1315 East-West Highway
N/CS11, Room 6604
Silver Spring, MD 20910
Office: 240-847-8208
Cell: 828-331-8197
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210326/8e211642/attachment-0001.html>

From gdt at lexort.com  Fri Mar 26 10:49:11 2021
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 26 Mar 2021 13:49:11 -0400
Subject: [PROJ] Describing custom vertical datums in wkt
In-Reply-To: <CAFe6qKh+0HbBL7rLEm95_qgkLFPo7vWrdSd2vWWp1STxwNakWA@mail.gmail.com>
 (Eric Younkin's message of "Fri, 26 Mar 2021 13:37:42 -0400")
References: <CAFe6qKjkoMv-FVXTkckoYr8o11L2faiBrRhQ2j_jPwtFZuT1tw@mail.gmail.com>
 <765c9113-17ec-1370-72c6-424a90e03afb@spatialys.com>
 <CAFe6qKh+0HbBL7rLEm95_qgkLFPo7vWrdSd2vWWp1STxwNakWA@mail.gmail.com>
Message-ID: <rmizgyprejs.fsf@s1.lexort.com>


I suggest that you separate

  preparing what you would like in the EPSG database

and

  getting EPSG to accept it


I am pretty sure that once you have the content that you would submit,
you can modify a copy of proj to add a second file that is loaded into
the proj database at build time, and thus have a proj installation that
has your datum and transform definitions even though EPSG has not yet
accepted them.    Probably this can be done with a script on an
installed copy too.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210326/154dc507/attachment.sig>

From even.rouault at spatialys.com  Fri Mar 26 10:49:44 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 26 Mar 2021 18:49:44 +0100
Subject: [PROJ] Describing custom vertical datums in wkt
In-Reply-To: <CAFe6qKh+0HbBL7rLEm95_qgkLFPo7vWrdSd2vWWp1STxwNakWA@mail.gmail.com>
References: <CAFe6qKjkoMv-FVXTkckoYr8o11L2faiBrRhQ2j_jPwtFZuT1tw@mail.gmail.com>
 <765c9113-17ec-1370-72c6-424a90e03afb@spatialys.com>
 <CAFe6qKh+0HbBL7rLEm95_qgkLFPo7vWrdSd2vWWp1STxwNakWA@mail.gmail.com>
Message-ID: <95b5de24-03cf-f2e7-9c56-bcc2dc74fab5@spatialys.com>

Eric,

You better know that me your challenges and constraints. My main fear is 
that if you use non-conformant WKT (in syntax or in spirit) for archival 
purposes, you might end up later in headaches since most software will 
have issues understanding it. Reminds me of some funky WKT in some LAS 
files...

Other possibility: use a conformant VERTCRS definition, and use the 
REMARKS[] fields to explain in plain text how it was derived from 
NAD83(20111) ellipsoidal heights

Even

Le 26/03/2021 ? 18:37, Eric Younkin - NOAA Federal a ?crit?:
> Hi Even,
>
> Thanks for these notes.? I agree that what I have isn't great.? 
> Ideally we will be following what you describe as the 'proper model' 
> when we move to register in EPSG.? What I have here is our attempt to 
> build something that at the very least documents the process and does 
> so in a way that does not require the creation of a separate NOAA 
> Chart Datum definition,?since our archived data would just have one 
> WKT field to represent the data CRS.
>
> I was planning on manually defining pipelines from this WKT string to 
> run through PROJ, using some code to wrap the?WKT. We currently define 
> end point?datums in our data with just a 'MLLW' string, so I figured 
> this would at least be better for now.? But perhaps this is not a step 
> in the right direction. Maybe moving to EPSG is the only route forward 
> for us,?and we should wait for that process before making any 
> changes,?regardless of how bad what we currently?do is.
>
> Thanks,
> Eric
>
> On Fri, Mar 26, 2021 at 12:58 PM Even Rouault 
> <even.rouault at spatialys.com <mailto:even.rouault at spatialys.com>> wrote:
>
>     Eric,
>
>     Besides a few minor issues in the below WKT (use of single quotes,
>     or non-ASCII double quote characters), more fundamental remarks:
>
>     - I don't think DerivedVerticalCRS is the appropriate modeling.
>     http://docs.opengeospatial.org/is/18-010r7/18-010r7.html
>     <http://docs.opengeospatial.org/is/18-010r7/18-010r7.html> in
>     ?3.1.14 mentions: "A derived coordinate reference system inherits
>     its datum or reference frame from its base coordinate reference
>     system.", so you can't have the derived CRS having VDATUM["NOAA
>     Chart Datum"] and the base CRS VDATUM["NAD83(2011) Height"]. And
>     if you look at the grammar at
>     http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#120
>     <http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#120>,
>     VDATUM[] is not allowed for the derived vertical CRS, and when
>     PROJ re-exports to WKT2 this definition, it will omit it.
>
>     - One could question too if the derivation is a conversion.
>     ?14.2.1 mentions "Because by definition coordinate conversions are
>     exact, the attribute operation accuracy is not relevant and
>     excluded from the deriving conversion WKT string". Using grids is
>     probably a big unusual to define a conversion
>
>     - you can't use EPSG:6319 that is the Geographic 3D CRS as a
>     (base) vertical CRS. Ellipsoidal heights in ISO-19111 can't exist
>     as standalone vertical CRS. They must be associated with the
>     horizontal coordinates.
>
>     - the proper model would probably be to define a NOAA Chart Datum
>     vertical datum and vertical CRS, and define a transformation
>     between EPSG:6319 and the NOAA Chart Datum vertical CRS. You could
>     reference that transformation in a GEOIDMODEL[] node attached as a
>     child of the VERTCRS[].
>
>     - besides importing/exporting/querying the attributes, PROJ will
>     not be able currently to do anything useful (ie compute a PROJ
>     pipeline between that and another vertical CRS) with a derived
>     projected CRS.
>
>     Even
>
>     Le 26/03/2021 ? 16:06, Eric Younkin - NOAA Federal via PROJ a ?crit?:
>>     Hello,
>>
>>     As we move to registering our vdatum grids in EPSG, we needed to
>>     develop a stop gap solution, describing our custom datums in WKT
>>     for archival.? These would be derived datums based on elheight or
>>     geoid height, with proj vgrid pipelines applied to get to water
>>     level datum.? We are thinking about using something like this:
>>
>>     VERTCRS["NOAA Chart Datum",
>>     ? ? ? ? ? ? ? ? ? BASEVERTCRS["NAD83(2011) Height",
>>     VDATUM["NAD83(2011) Height"],
>>     ID["EPSG",6319]],
>>     ? ? ? ? ? ? ? ? ??DERIVINGCONVERSION["NAD83(2011) Height to NOAA
>>     Mean Lower Low Water",
>>     ?METHOD["VDatum_VXXX gtx grid transformation",
>>     ID["EPSG",1084]],
>>     PARAMETERFILE['g2012bu0', 'core\\geoid12b\\g2012bu0.gtx',
>>     ID[?NOAA VDatum?, ?NAD83 to Geoid12B?, ?10/23/2012?]],
>>     PARAMETERFILE['tss', 'CAORblan01_8301\\tss.gtx',
>>     ID[?NOAA VDatum?, ?Geoid12B to Tss", ?06/20/2019?]],
>>     PARAMETERFILE['mllw', 'CAORblan01_8301\\mllw.gtx',
>>     ID[?NOAA VDatum?, ?Tss to Mean Lower Low Water?, ?06/20/2019?]]],
>>     ? ? ? ? ? ? ? ? ? ? VDATUM["NOAA Chart Datum"],
>>     ? ? ? ? ? ? ? ? ? ? CS[vertical,1],
>>     ? ? ? ? ? ? ? ? ? ? ? ? ? AXIS["gravity-related height (H)",up],
>>     ? ? ? ? ? ? ? ? ? ? ? ? ? LENGTHUNIT["metre",1]]
>>
>>     I know this isn't something we could use in PROJ in the same way
>>     that a registered EPSG reference could, but we could at least
>>     have something describing what we do for archival.? I'm thinking
>>     of building some code to manually translate a move between two of
>>     these WKT strings into a pipeline operation.
>>
>>     Hopefully that made sense.? Please let me know if you have any
>>     suggestions.
>>
>>     Thanks,
>>     Eric
>>
>>     -- 
>>     Eric Younkin
>>     Physical Scientist
>>     NOAA OCS, Hydrographic Systems and Technology Branch
>>     1315 East-West Highway
>>     N/CS11, Room 6604
>>     Silver Spring, MD 20910
>>     Office: 240-847-8208
>>     Cell: 828-331-8197
>>
>>     _______________________________________________
>>     PROJ mailing list
>>     PROJ at lists.osgeo.org  <mailto:PROJ at lists.osgeo.org>
>>     https://lists.osgeo.org/mailman/listinfo/proj  <https://lists.osgeo.org/mailman/listinfo/proj>
>
>     -- 
>     http://www.spatialys.com  <http://www.spatialys.com>
>     My software is free, but my time generally not.
>
>
>
> -- 
> Eric Younkin
> Physical Scientist
> NOAA OCS, Hydrographic Systems and Technology Branch
> 1315 East-West Highway
> N/CS11, Room 6604
> Silver Spring, MD 20910
> Office: 240-847-8208
> Cell: 828-331-8197

-- 
http://www.spatialys.com
My software is free, but my time generally not.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210326/8511f63f/attachment.html>

From Jochem.Lesparre at kadaster.nl  Tue Mar 30 01:24:21 2021
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Tue, 30 Mar 2021 08:24:21 +0000
Subject: [PROJ] Point not within available datum shift grids
Message-ID: <AM0P192MB04829BB2220A043B1C84B1CFEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Hi list members,

I have a transformation pipeline with a horizontal and a vertical grid shift file. For a point outside both grids, I want the horizontal component to apply a zero shift and the vertical component to return a no data value. I had this working in PROJ 6, but I don't get it working in PROJ 7 or 8. For points outside the vertical grid area, I get: "TRANSFORMATION ERROR: 52 9 0 (point not within available datum shift grids)". Is there a way to get horizontal coordinates outside the vertical grid area without getting a height value? I was thinking that I could create a nodata.tif covering the entire world, but I hope there is a more elegant way to make the PROJ pipeline (see below) for the national CRS of the Netherlands give the results recommended by the national authorities.

Regards, Jochem

cct +proj=pipeline
+step +proj=unitconvert +xy_in=deg +z_in=m +xy_out=rad +z_out=m
+step +proj=axisswap +order=2,1,3,4
+step +proj=vgridshift +grids=nlgeo2018.gtx
+step +proj=push +v_3
+step +proj=set +v_3=43 +omit_inv
+step +proj=cart +ellps=GRS80
+step +proj=helmert +x=-565.7346 +y=-50.4058 +z=-465.2895 +rx=-0.395023 +ry=0.330776 +rz=-1.876073 +s=-4.07242 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=bessel
+step +proj=hgridshift +inv +grids=rdcorr2018.gsb,null
+step +proj=sterea +lat_0=52.156160556 +lon_0=5.387638889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
+step +proj=set +v_3=0 +omit_fwd
+step +proj=pop +v_3


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
dit direct te melden aan de verzender en het bericht te vernietigen.
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent
of the Kadaster is unlawful. If you have received this message, but are not the addressee,
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210330/9ade8dbc/attachment.html>

From even.rouault at spatialys.com  Tue Mar 30 03:24:29 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Mar 2021 12:24:29 +0200
Subject: [PROJ] Point not within available datum shift grids
In-Reply-To: <AM0P192MB04829BB2220A043B1C84B1CFEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB04829BB2220A043B1C84B1CFEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <9ad128d3-e670-05dc-0a49-8071380dc39b@spatialys.com>

Jochem,

Le 30/03/2021 ? 10:24, Lesparre, Jochem via PROJ a ?crit?:
> is a more elegant way to make the PROJ pipeline (see below) for the 
> national CRS of the Netherlands give the results recommended by the 
> national authorities.

You would want the z value to be set at infinity, right ? Can't think 
with current code a better way than creating a dummy 2x2 grid with 
values at infinity (if you set them at NaN, or a nodata value that is 
flagged as such in a geotiff file, then the vertical interpolation will 
also return an errror)

The "null" grid is now a virtual one. You could possibly contribute a 
similar "infinity" one. Look at NullHorizontalShiftGrid in src/grids.cpp

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From Jochem.Lesparre at kadaster.nl  Tue Mar 30 04:17:48 2021
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Tue, 30 Mar 2021 11:17:48 +0000
Subject: [PROJ] Point not within available datum shift grids
In-Reply-To: <9ad128d3-e670-05dc-0a49-8071380dc39b@spatialys.com>
References: <AM0P192MB04829BB2220A043B1C84B1CFEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <9ad128d3-e670-05dc-0a49-8071380dc39b@spatialys.com>
Message-ID: <AM0P192MB04826457E9A240247C3EB48EEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Hi Even,

> You would want the z value to be set at infinity, right ?

Yes. That was the behaviour under PROJ 6, which worked fine.


> Can't think with current code a better way than creating a dummy 2x2 grid with values at infinity (if you set them at NaN, or a nodata value that is flagged as such in a geotiff file, then the vertical interpolation will also return an errror)

Thanks for the advice on using infinity instead of NaN / no data value.


> The "null" grid is now a virtual one. You could possibly contribute a similar "infinity" one. Look at NullHorizontalShiftGrid in src/grids.cpp

That would be a better solution! It sounds like a not too difficult feature for my first actual code contribution to PROJ. What is the deadline for the next PROJ release that could contain such feature?

Thanks, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
dit direct te melden aan de verzender en het bericht te vernietigen.
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent
of the Kadaster is unlawful. If you have received this message, but are not the addressee,
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message.

From even.rouault at spatialys.com  Tue Mar 30 05:41:48 2021
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Mar 2021 14:41:48 +0200
Subject: [PROJ] Point not within available datum shift grids
In-Reply-To: <AM0P192MB04826457E9A240247C3EB48EEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB04829BB2220A043B1C84B1CFEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <9ad128d3-e670-05dc-0a49-8071380dc39b@spatialys.com>
 <AM0P192MB04826457E9A240247C3EB48EEF7D9@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <b646e49d-d72c-1f4b-b167-1401401c9ddb@spatialys.com>


> Thanks for the advice on using infinity instead of NaN / no data value.
Yeah, also there was a github issue discussion about switching to using 
NaN instead of Infinity for invalid values 
(https://github.com/OSGeo/PROJ/issues/2376), but there has been no 
change on that front for now
>
>
>> The "null" grid is now a virtual one. You could possibly contribute a similar "infinity" one. Look at NullHorizontalShiftGrid in src/grids.cpp
> That would be a better solution! It sounds like a not too difficult feature for my first actual code contribution to PROJ. What is the deadline for the next PROJ release that could contain such feature?

Would be for 8.1.0 planned for July 1st


-- 
http://www.spatialys.com
My software is free, but my time generally not.


From m.morelli_osrc at outlook.com  Wed Mar 31 08:43:03 2021
From: m.morelli_osrc at outlook.com (Michael Morelli)
Date: Wed, 31 Mar 2021 15:43:03 +0000
Subject: [PROJ] Proj-Lib 7.2 Custom EPSG Codes
Message-ID: <AM0PR08MB34129BCBBB60164A2BA79051B17C9@AM0PR08MB3412.eurprd08.prod.outlook.com>



Hi folks,

hope you are doing well!

we are about prototyping with proj-lib (Version 7.2).

1. Insert and Use a custom PCS-Code

We would like to add our own custom PCS-Codes (and GCS-Codes) with a custom authority-name.
Is it correct that the only way to add custom Codes is to insert it directly via sqllite and not via the C-API?
So for a new PCS we could add a row into the table projected_crs with auth_name = 'CUSTOM_AUTH', code = '1', name = 'a custom pcs' and text_defintion = '[WKT-Definition]'.
We could then successfully use this custom-epsg to use it as src- or tgt-Projection (CUSTOM_AUTH:1) in the function proj_create_crs_to_crs() for transforming with function proj_trans().
This worked so far.

Also using the following function worked:
PROJ_STRING_LIST projStringList = proj_get_codes_from_database (C, AnsiString ("CUSTOM_AUTH").c_str(), PJ_TYPE::PJ_TYPE_CRS, 1);

But when using the following new function (without a filter):

PROJ_CRS_INFO** returnedList = proj_get_crs_info_list_from_database (C, AnsiString ("any").c_str(), 0, &count);

Then the Code CUSTOM_AUTH:1 was not in the returned list. Are we missing something or is this a bug?
(The custom code exists in the sqllite view: crs_view and table: projected_crs..)

2. Replace GCS of PCS
In some cases the end-user should be able to select a PCS and then replace the GCS of this PCS with another different GCS (would result in a new custom PCS).
In the C-API we could not find any setter-functions to set a GCS to an existing PCS PJ*-Object.
Is there an elegant way to do this?

Thx in advance for your interest.

Kind regards,
Mike


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20210331/ce42eae3/attachment.html>

