From vanadovv at hetnet.nl  Wed Nov  1 04:29:13 2017
From: vanadovv at hetnet.nl (vanadovv at hetnet.nl)
Date: Wed, 1 Nov 2017 12:29:13 +0100 (CET)
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
Message-ID: <32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>

Hi Thomas,
LCCA: good suggestion!
As far as I can tell, there are two significant differences between LCC and LCCA.
LCC has an iteration loop criterion (in the inverse) of 1e-10, whereas LCCA is somewhat more accurate with 1e-12.
Furthermore LCCA works with a Newton iteration scheme. This could be faster than iteration by successive approximation, but there are a couple of minor inefficiencies in the code, like function calls instead of inline, but YMMV.
Oscar van Vlijmen
----Origineel Bericht----
Van : knudsen.thomas at gmail.com
Datum : 01/11/2017 07:58
Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and backward multiple times
 Oscar,
 
  
 
 
  I certainly agree that the deviation is quite high - my comment was more related
 
 
  to the expection of exact roundtrips, which I find unrealistic.
 
 
  
 
 
  Nevertheless, looking into the PROJ.4 code, I see there is an alternative
 
 
  implementation of LCC, called LCCA, which I had forgotten about, which
 
 
  actually seems to roundtrip exactly.
 
 
  
 
 
  In the master branch of PROJ.4, over at 
  https://github.com/OSGeo/proj.4,
 
 
  and comming in the next release, there is a tool "gie" for doing (a.o.)
 
 
  roundtrip tests. It is still lacking in docs, but I think you can follow this example:
 
 
  
 
 
  With this input file:
 
 
  
 
 
  $ cat lcc-lcca.gie
 
 
  
 
 
  
   BEGIN
  
  
   
  
  
   -------------------------------------------------------------------------------
  
  
   operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
  
  
                       +lat_0=47  +lon_0=-120.8333333333333 \
  
  
                       +x_0=500000.0001016001 +y_0=0        \
  
  
                       +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
  
  
   -------------------------------------------------------------------------------
  
  
   tolerance   0.0010 mm
  
  
   accept     -118.5293900000000300   48.7408309999860520
  
  
   roundtrip   1000
  
  
   
  
  
   
  
  
   -------------------------------------------------------------------------------
  
  
   operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
  
  
                        +lat_0=47  +lon_0=-120.8333333333333 \
  
  
                        +x_0=500000.0001016001 +y_0=0        \
  
  
                        +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
  
  
   -------------------------------------------------------------------------------
  
  
   tolerance   0.0 mm
  
  
   accept     -118.5293900000000300   48.7408309999860520
  
  
   roundtrip   1000
  
  
   END
  
 
 
  
 
 
  I get this output:
 
 
  
 
 
  $ gie lcc-lcca.gie
 
 
  
   
  
  
   -------------------------------------------------------------------------------
  
  
   Reading file '..\..\..\proj\lcc-lcca.gie'
  
  
   -------------------------------------------------------------------------------
  
  
   +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47  +lon_0=-120....
  
  
   -------------------------------------------------------------------------------
  
  
        FAILURE in lcc-lcca.gie(11):
  
  
        roundtrip deviation: 1.550 mm, expected: 0.001 mm
  
  
   -------------------------------------------------------------------------------
  
  
   total:  1 tests succeeded,   1 tests FAILED!
  
  
   -------------------------------------------------------------------------------
  
 
 
  
 
 
  i.e. lcca roundtrips exactly, while lcc diverges heavily.
 
 
  
 
 
  So Dmitry: This seems to be your workaround - define your projection using lcca,
 
 
  rather than letting the epsg-list select lcc for you.
 
 
  
 
 
  /Thomas
 
 
  
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171101/1d5e8dc6/attachment.html>

From knudsen.thomas at gmail.com  Wed Nov  1 06:33:47 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 1 Nov 2017 14:33:47 +0100
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
Message-ID: <CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>

Hi Oscar,

Regarding LCCA:

I can see that the functions for computing dr and its derivative can be
easily inlined, by defining them as macros, rather than functions.

The call to fabs() is probably, on most platforms, converted to a builtin,
so I would not touch that.

The meridional arc length function, pj_mlfn(), is fairly simple and COULD
be inlined, but at the cost of future agony if the function is one day
updated,
so I would prefer to keep it as is until actual profiling shows it to be a
serious problem.

Are there any other obvious speed problems in PJ_lcca (ignoring everything
under the PROJECTION() call, which is setup functionality, executed only
once, and hence not so speed critical).


Regarding LCC:

The iteration you mention goes on in the pj_phi2() function in pj_phi2.c.

By strengthening the convergence criterion to 1e-12, the 1000 iteration
roundtrip deviation for LCC was reduced to 0.005 mm, which certainly
is more acceptable.

By strengthening to 1e-13, the 1000 roundtrip deviation was below 0.0001 mm.

I have, however, not yet had time to measure what the time cost of this
improvement
amounts to. Once I have hard numbers, I will post them to the list, and
probably suggest that we switch - either from LCC to LCCA, or from stop
criterion of 1e-10 to 1e-12.

/Thomas


2017-11-01 12:29 GMT+01:00 vanadovv at hetnet.nl <vanadovv at hetnet.nl>:

> Hi Thomas,
>
>
> LCCA: good suggestion!
> As far as I can tell, there are two significant differences between LCC
> and LCCA.
> LCC has an iteration loop criterion (in the inverse) of 1e-10, whereas
> LCCA is somewhat more accurate with 1e-12.
> Furthermore LCCA works with a Newton iteration scheme. This could be
> faster than iteration by successive approximation, but there are a couple
> of minor inefficiencies in the code, like function calls instead of inline,
> but YMMV.
>
>
> Oscar van Vlijmen
>
>
>
> ----Origineel Bericht----
> Van : knudsen.thomas at gmail.com
> Datum : 01/11/2017 07:58
> Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
> Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC
> (2285) and backward multiple times
>
> Oscar,
>
> I certainly agree that the deviation is quite high - my comment was more
> related
> to the expection of exact roundtrips, which I find unrealistic.
>
> Nevertheless, looking into the PROJ.4 code, I see there is an alternative
> implementation of LCC, called LCCA, which I had forgotten about, which
> actually seems to roundtrip exactly.
>
> In the master branch of PROJ.4, over at  https://github.com/OSGeo/proj.4,
> and comming in the next release, there is a tool "gie" for doing (a.o.)
> roundtrip tests. It is still lacking in docs, but I think you can follow
> this example:
>
> With this input file:
>
> $ cat lcc-lcca.gie
>
> BEGIN
>
> -------------------------------------------------------------------------------
>
> operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
>                     +lat_0=47  +lon_0=-120.8333333333333 \
>                     +x_0=500000.0001016001 +y_0=0        \
>                     +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
> -------------------------------------------------------------------------------
>
> tolerance   0.0010 mm
> accept     -118.5293900000000300   48.7408309999860520
> roundtrip   1000
>
>
> -------------------------------------------------------------------------------
>
> operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
>                      +lat_0=47  +lon_0=-120.8333333333333 \
>                      +x_0=500000.0001016001 +y_0=0        \
>                      +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
> -------------------------------------------------------------------------------
>
> tolerance   0.0 mm
> accept     -118.5293900000000300   48.7408309999860520
> roundtrip   1000
> END
>
> I get this output:
>
> $ gie lcc-lcca.gie
>
> -------------------------------------------------------------------------------
>
> Reading file '..\..\..\proj\lcc-lcca.gie'
> -------------------------------------------------------------------------------
>
> +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47  +lon_0=-120....
> -------------------------------------------------------------------------------
>
>      FAILURE in lcc-lcca.gie(11):
>      roundtrip deviation: 1.550 mm, expected: 0.001 mm
> -------------------------------------------------------------------------------
>
> total:  1 tests succeeded,   1 tests FAILED!
> -------------------------------------------------------------------------------
>
>
> i.e. lcca roundtrips exactly, while lcc diverges heavily.
>
> So Dmitry: This seems to be your workaround - define your projection using
> lcca,
> rather than letting the epsg-list select lcc for you.
>
> /Thomas
>
>
>
>
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171101/f123ad12/attachment.html>

From dmitrymefed at gmail.com  Wed Nov  1 11:47:06 2017
From: dmitrymefed at gmail.com (Dmitry Mefed)
Date: Wed, 1 Nov 2017 21:47:06 +0300
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
Message-ID: <CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>

Thank you all for the interesting discussion.

I'm going to try both suggestions:
1. try to use LCCA instead of LCC
2. strengthen convergence criterion, I believe it is EPS10 define in case
of LCC

Thanks,
-Dmitry

On Wed, Nov 1, 2017 at 4:33 PM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> Hi Oscar,
>
> Regarding LCCA:
>
> I can see that the functions for computing dr and its derivative can be
> easily inlined, by defining them as macros, rather than functions.
>
> The call to fabs() is probably, on most platforms, converted to a builtin,
> so I would not touch that.
>
> The meridional arc length function, pj_mlfn(), is fairly simple and COULD
> be inlined, but at the cost of future agony if the function is one day
> updated,
> so I would prefer to keep it as is until actual profiling shows it to be a
> serious problem.
>
> Are there any other obvious speed problems in PJ_lcca (ignoring everything
> under the PROJECTION() call, which is setup functionality, executed only
> once, and hence not so speed critical).
>
>
> Regarding LCC:
>
> The iteration you mention goes on in the pj_phi2() function in pj_phi2.c.
>
> By strengthening the convergence criterion to 1e-12, the 1000 iteration
> roundtrip deviation for LCC was reduced to 0.005 mm, which certainly
> is more acceptable.
>
> By strengthening to 1e-13, the 1000 roundtrip deviation was below 0.0001
> mm.
>
> I have, however, not yet had time to measure what the time cost of this
> improvement
> amounts to. Once I have hard numbers, I will post them to the list, and
> probably suggest that we switch - either from LCC to LCCA, or from stop
> criterion of 1e-10 to 1e-12.
>
> /Thomas
>
>
> 2017-11-01 12:29 GMT+01:00 vanadovv at hetnet.nl <vanadovv at hetnet.nl>:
>
>> Hi Thomas,
>>
>>
>> LCCA: good suggestion!
>> As far as I can tell, there are two significant differences between LCC
>> and LCCA.
>> LCC has an iteration loop criterion (in the inverse) of 1e-10, whereas
>> LCCA is somewhat more accurate with 1e-12.
>> Furthermore LCCA works with a Newton iteration scheme. This could be
>> faster than iteration by successive approximation, but there are a couple
>> of minor inefficiencies in the code, like function calls instead of inline,
>> but YMMV.
>>
>>
>> Oscar van Vlijmen
>>
>>
>>
>> ----Origineel Bericht----
>> Van : knudsen.thomas at gmail.com
>> Datum : 01/11/2017 07:58
>> Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
>> Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC
>> (2285) and backward multiple times
>>
>> Oscar,
>>
>> I certainly agree that the deviation is quite high - my comment was more
>> related
>> to the expection of exact roundtrips, which I find unrealistic.
>>
>> Nevertheless, looking into the PROJ.4 code, I see there is an alternative
>> implementation of LCC, called LCCA, which I had forgotten about, which
>> actually seems to roundtrip exactly.
>>
>> In the master branch of PROJ.4, over at  https://github.com/OSGeo/proj.4,
>>
>> and comming in the next release, there is a tool "gie" for doing (a.o.)
>> roundtrip tests. It is still lacking in docs, but I think you can follow
>> this example:
>>
>> With this input file:
>>
>> $ cat lcc-lcca.gie
>>
>> BEGIN
>>
>> -------------------------------------------------------------------------------
>>
>> operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
>>                     +lat_0=47  +lon_0=-120.8333333333333 \
>>                     +x_0=500000.0001016001 +y_0=0        \
>>                     +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>> -------------------------------------------------------------------------------
>>
>> tolerance   0.0010 mm
>> accept     -118.5293900000000300   48.7408309999860520
>> roundtrip   1000
>>
>>
>> -------------------------------------------------------------------------------
>>
>> operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
>>                      +lat_0=47  +lon_0=-120.8333333333333 \
>>                      +x_0=500000.0001016001 +y_0=0        \
>>                      +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>> -------------------------------------------------------------------------------
>>
>> tolerance   0.0 mm
>> accept     -118.5293900000000300   48.7408309999860520
>> roundtrip   1000
>> END
>>
>> I get this output:
>>
>> $ gie lcc-lcca.gie
>>
>> -------------------------------------------------------------------------------
>>
>> Reading file '..\..\..\proj\lcc-lcca.gie'
>> -------------------------------------------------------------------------------
>>
>> +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47  +lon_0=-120....
>> -------------------------------------------------------------------------------
>>
>>      FAILURE in lcc-lcca.gie(11):
>>      roundtrip deviation: 1.550 mm, expected: 0.001 mm
>> -------------------------------------------------------------------------------
>>
>> total:  1 tests succeeded,   1 tests FAILED!
>> -------------------------------------------------------------------------------
>>
>>
>> i.e. lcca roundtrips exactly, while lcc diverges heavily.
>>
>> So Dmitry: This seems to be your workaround - define your projection
>> using lcca,
>> rather than letting the epsg-list select lcc for you.
>>
>> /Thomas
>>
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171101/8f6cd49c/attachment.html>

From knudsen.thomas at gmail.com  Wed Nov  1 13:43:51 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 1 Nov 2017 21:43:51 +0100
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
Message-ID: <CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>

Dmitry,

No, it's not the EPS10 define in PJ_lcc.c - it's the #define TOL 1e-10 in
pj_phi2.c you need to modify.

/Thomas

2017-11-01 19:47 GMT+01:00 Dmitry Mefed <dmitrymefed at gmail.com>:

> Thank you all for the interesting discussion.
>
> I'm going to try both suggestions:
> 1. try to use LCCA instead of LCC
> 2. strengthen convergence criterion, I believe it is EPS10 define in case
> of LCC
>
> Thanks,
> -Dmitry
>
> On Wed, Nov 1, 2017 at 4:33 PM, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
>
>> Hi Oscar,
>>
>> Regarding LCCA:
>>
>> I can see that the functions for computing dr and its derivative can be
>> easily inlined, by defining them as macros, rather than functions.
>>
>> The call to fabs() is probably, on most platforms, converted to a builtin,
>> so I would not touch that.
>>
>> The meridional arc length function, pj_mlfn(), is fairly simple and COULD
>> be inlined, but at the cost of future agony if the function is one day
>> updated,
>> so I would prefer to keep it as is until actual profiling shows it to be a
>> serious problem.
>>
>> Are there any other obvious speed problems in PJ_lcca (ignoring everything
>> under the PROJECTION() call, which is setup functionality, executed only
>> once, and hence not so speed critical).
>>
>>
>> Regarding LCC:
>>
>> The iteration you mention goes on in the pj_phi2() function in pj_phi2.c.
>>
>> By strengthening the convergence criterion to 1e-12, the 1000 iteration
>> roundtrip deviation for LCC was reduced to 0.005 mm, which certainly
>> is more acceptable.
>>
>> By strengthening to 1e-13, the 1000 roundtrip deviation was below 0.0001
>> mm.
>>
>> I have, however, not yet had time to measure what the time cost of this
>> improvement
>> amounts to. Once I have hard numbers, I will post them to the list, and
>> probably suggest that we switch - either from LCC to LCCA, or from stop
>> criterion of 1e-10 to 1e-12.
>>
>> /Thomas
>>
>>
>> 2017-11-01 12:29 GMT+01:00 vanadovv at hetnet.nl <vanadovv at hetnet.nl>:
>>
>>> Hi Thomas,
>>>
>>>
>>> LCCA: good suggestion!
>>> As far as I can tell, there are two significant differences between LCC
>>> and LCCA.
>>> LCC has an iteration loop criterion (in the inverse) of 1e-10, whereas
>>> LCCA is somewhat more accurate with 1e-12.
>>> Furthermore LCCA works with a Newton iteration scheme. This could be
>>> faster than iteration by successive approximation, but there are a couple
>>> of minor inefficiencies in the code, like function calls instead of inline,
>>> but YMMV.
>>>
>>>
>>> Oscar van Vlijmen
>>>
>>>
>>>
>>> ----Origineel Bericht----
>>> Van : knudsen.thomas at gmail.com
>>> Datum : 01/11/2017 07:58
>>> Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
>>> Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC
>>> (2285) and backward multiple times
>>>
>>> Oscar,
>>>
>>> I certainly agree that the deviation is quite high - my comment was more
>>> related
>>> to the expection of exact roundtrips, which I find unrealistic.
>>>
>>> Nevertheless, looking into the PROJ.4 code, I see there is an
>>> alternative
>>> implementation of LCC, called LCCA, which I had forgotten about, which
>>> actually seems to roundtrip exactly.
>>>
>>> In the master branch of PROJ.4, over at  https://github.com/OSGeo/proj.4,
>>>
>>> and comming in the next release, there is a tool "gie" for doing (a.o.)
>>> roundtrip tests. It is still lacking in docs, but I think you can follow
>>> this example:
>>>
>>> With this input file:
>>>
>>> $ cat lcc-lcca.gie
>>>
>>> BEGIN
>>>
>>> -------------------------------------------------------------------------------
>>>
>>> operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
>>>                     +lat_0=47  +lon_0=-120.8333333333333 \
>>>                     +x_0=500000.0001016001 +y_0=0        \
>>>                     +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>>> -------------------------------------------------------------------------------
>>>
>>> tolerance   0.0010 mm
>>> accept     -118.5293900000000300   48.7408309999860520
>>> roundtrip   1000
>>>
>>>
>>> -------------------------------------------------------------------------------
>>>
>>> operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
>>>                      +lat_0=47  +lon_0=-120.8333333333333 \
>>>                      +x_0=500000.0001016001 +y_0=0        \
>>>                      +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>>> -------------------------------------------------------------------------------
>>>
>>> tolerance   0.0 mm
>>> accept     -118.5293900000000300   48.7408309999860520
>>> roundtrip   1000
>>> END
>>>
>>> I get this output:
>>>
>>> $ gie lcc-lcca.gie
>>>
>>> -------------------------------------------------------------------------------
>>>
>>> Reading file '..\..\..\proj\lcc-lcca.gie'
>>> -------------------------------------------------------------------------------
>>>
>>> +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47
>>> +lon_0=-120....
>>> -------------------------------------------------------------------------------
>>>
>>>      FAILURE in lcc-lcca.gie(11):
>>>      roundtrip deviation: 1.550 mm, expected: 0.001 mm
>>> -------------------------------------------------------------------------------
>>>
>>> total:  1 tests succeeded,   1 tests FAILED!
>>> -------------------------------------------------------------------------------
>>>
>>>
>>> i.e. lcca roundtrips exactly, while lcc diverges heavily.
>>>
>>> So Dmitry: This seems to be your workaround - define your projection
>>> using lcca,
>>> rather than letting the epsg-list select lcc for you.
>>>
>>> /Thomas
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171101/cb7f9c58/attachment.html>

From dmitrymefed at gmail.com  Thu Nov  2 10:25:41 2017
From: dmitrymefed at gmail.com (Dmitry Mefed)
Date: Thu, 2 Nov 2017 20:25:41 +0300
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
	<CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
Message-ID: <CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>

Thank you Thomas,

I've tried both solutions. The one with strengthen the criterion does work
for me. Now I can push changes to the DB and query it back with no changes
to the coordinates with maximum ACAD precision.
As for LCCA it does not work for us, as in our example it produces a bit
different results, and it is critical for us. Please see the below output:

LCC EPSG:2285
cs2cs.exe -v +init=epsg:4269 +to =+proj=lcc +lat_1=48.73333333333333
+lat_2=47.5 +lat_0=47 +lon_0=-120.8333
333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +datum=NAD83
+to_meter=0.3048006096012192 +no_defs -f %.16f
-118.5293900000000300   48.7408309999023930
2196293.3184076622000000        643350.3929806272500000 0.0000000000000000

LCCA same as above but lcca
cs2cs.exe -v +init=epsg:4269 +to =+proj=lcca +lat_1=48.73333333333333
+lat_2=47.5 +lat_0=47 +lon_0=-120.8333
333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +datum=NAD83
+to_meter=0.3048006096012192 +no_defs -f %.16f
-118.5293900000000300   48.7408309999860520
2196554.2242959067000000        643311.0110160053000000 0.0000000000000000

Thank you all for your help.

PS
I did not observed any sensible performance issues with updated criterion
value. However I did not do precise measurements.

Thanks,
-Dmitry Mefed

On Wed, Nov 1, 2017 at 11:43 PM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> Dmitry,
>
> No, it's not the EPS10 define in PJ_lcc.c - it's the #define TOL 1e-10 in
> pj_phi2.c you need to modify.
>
> /Thomas
>
> 2017-11-01 19:47 GMT+01:00 Dmitry Mefed <dmitrymefed at gmail.com>:
>
>> Thank you all for the interesting discussion.
>>
>> I'm going to try both suggestions:
>> 1. try to use LCCA instead of LCC
>> 2. strengthen convergence criterion, I believe it is EPS10 define in case
>> of LCC
>>
>> Thanks,
>> -Dmitry
>>
>> On Wed, Nov 1, 2017 at 4:33 PM, Thomas Knudsen <knudsen.thomas at gmail.com>
>> wrote:
>>
>>> Hi Oscar,
>>>
>>> Regarding LCCA:
>>>
>>> I can see that the functions for computing dr and its derivative can be
>>> easily inlined, by defining them as macros, rather than functions.
>>>
>>> The call to fabs() is probably, on most platforms, converted to a
>>> builtin,
>>> so I would not touch that.
>>>
>>> The meridional arc length function, pj_mlfn(), is fairly simple and COULD
>>> be inlined, but at the cost of future agony if the function is one day
>>> updated,
>>> so I would prefer to keep it as is until actual profiling shows it to be
>>> a
>>> serious problem.
>>>
>>> Are there any other obvious speed problems in PJ_lcca (ignoring
>>> everything
>>> under the PROJECTION() call, which is setup functionality, executed only
>>> once, and hence not so speed critical).
>>>
>>>
>>> Regarding LCC:
>>>
>>> The iteration you mention goes on in the pj_phi2() function in pj_phi2.c.
>>>
>>> By strengthening the convergence criterion to 1e-12, the 1000 iteration
>>> roundtrip deviation for LCC was reduced to 0.005 mm, which certainly
>>> is more acceptable.
>>>
>>> By strengthening to 1e-13, the 1000 roundtrip deviation was below 0.0001
>>> mm.
>>>
>>> I have, however, not yet had time to measure what the time cost of this
>>> improvement
>>> amounts to. Once I have hard numbers, I will post them to the list, and
>>> probably suggest that we switch - either from LCC to LCCA, or from stop
>>> criterion of 1e-10 to 1e-12.
>>>
>>> /Thomas
>>>
>>>
>>> 2017-11-01 12:29 GMT+01:00 vanadovv at hetnet.nl <vanadovv at hetnet.nl>:
>>>
>>>> Hi Thomas,
>>>>
>>>>
>>>> LCCA: good suggestion!
>>>> As far as I can tell, there are two significant differences between LCC
>>>> and LCCA.
>>>> LCC has an iteration loop criterion (in the inverse) of 1e-10, whereas
>>>> LCCA is somewhat more accurate with 1e-12.
>>>> Furthermore LCCA works with a Newton iteration scheme. This could be
>>>> faster than iteration by successive approximation, but there are a couple
>>>> of minor inefficiencies in the code, like function calls instead of inline,
>>>> but YMMV.
>>>>
>>>>
>>>> Oscar van Vlijmen
>>>>
>>>>
>>>>
>>>> ----Origineel Bericht----
>>>> Van : knudsen.thomas at gmail.com
>>>> Datum : 01/11/2017 07:58
>>>> Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
>>>> Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC
>>>> (2285) and backward multiple times
>>>>
>>>> Oscar,
>>>>
>>>> I certainly agree that the deviation is quite high - my comment was
>>>> more related
>>>> to the expection of exact roundtrips, which I find unrealistic.
>>>>
>>>> Nevertheless, looking into the PROJ.4 code, I see there is an
>>>> alternative
>>>> implementation of LCC, called LCCA, which I had forgotten about, which
>>>> actually seems to roundtrip exactly.
>>>>
>>>> In the master branch of PROJ.4, over at  https://github.com/OSGeo/proj.
>>>> 4,
>>>> and comming in the next release, there is a tool "gie" for doing (a.o.)
>>>> roundtrip tests. It is still lacking in docs, but I think you can
>>>> follow this example:
>>>>
>>>> With this input file:
>>>>
>>>> $ cat lcc-lcca.gie
>>>>
>>>> BEGIN
>>>>
>>>> -------------------------------------------------------------------------------
>>>>
>>>> operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
>>>>                     +lat_0=47  +lon_0=-120.8333333333333 \
>>>>                     +x_0=500000.0001016001 +y_0=0        \
>>>>                     +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>>>> -------------------------------------------------------------------------------
>>>>
>>>> tolerance   0.0010 mm
>>>> accept     -118.5293900000000300   48.7408309999860520
>>>> roundtrip   1000
>>>>
>>>>
>>>> -------------------------------------------------------------------------------
>>>>
>>>> operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
>>>>                      +lat_0=47  +lon_0=-120.8333333333333 \
>>>>                      +x_0=500000.0001016001 +y_0=0        \
>>>>                      +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>>>> -------------------------------------------------------------------------------
>>>>
>>>> tolerance   0.0 mm
>>>> accept     -118.5293900000000300   48.7408309999860520
>>>> roundtrip   1000
>>>> END
>>>>
>>>> I get this output:
>>>>
>>>> $ gie lcc-lcca.gie
>>>>
>>>> -------------------------------------------------------------------------------
>>>>
>>>> Reading file '..\..\..\proj\lcc-lcca.gie'
>>>> -------------------------------------------------------------------------------
>>>>
>>>> +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47
>>>> +lon_0=-120....
>>>> -------------------------------------------------------------------------------
>>>>
>>>>      FAILURE in lcc-lcca.gie(11):
>>>>      roundtrip deviation: 1.550 mm, expected: 0.001 mm
>>>> -------------------------------------------------------------------------------
>>>>
>>>> total:  1 tests succeeded,   1 tests FAILED!
>>>> -------------------------------------------------------------------------------
>>>>
>>>>
>>>> i.e. lcca roundtrips exactly, while lcc diverges heavily.
>>>>
>>>> So Dmitry: This seems to be your workaround - define your projection
>>>> using lcca,
>>>> rather than letting the epsg-list select lcc for you.
>>>>
>>>> /Thomas
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> Proj mailing list
>>>> Proj at lists.maptools.org
>>>> http://lists.maptools.org/mailman/listinfo/proj
>>>>
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171102/f7cfedef/attachment.html>

From knudsen.thomas at gmail.com  Thu Nov  2 14:55:12 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 2 Nov 2017 22:55:12 +0100
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
	<CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
	<CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>
Message-ID: <CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>

Hi Dmitry,

I googled around for the “alternative” Lambert, without luck, but then this
afternoon, I accidentally misspelled Lambert as “Lamber”, and ran into this
thread: http://lists.maptools.org/pipermail/proj/2003-March/000644.html
where PROJ.4 founder Gerald Evenden, and long time PROJ.4 maintainer Frank
Warmerdam discusses the LCCA, and Gerald mentions that it is a truncated
series, only introduced to be compatible with some legacy French/North
African systems, that were defined using the truncated series.

Gerald explicitly states that it should not be used for new work, so my
recommendation of looking at it was terribly bad advice. Also, I had not
realized that LCCA does not support the secant (“2 parallel”) case, and
hence lat_0 and not lat_1 & lat_2 are used for parameterizing the
projection.

So enough about LCCA - it should not be used for anything but to maintain
interoperability with legacy reference systems.

But I have been doing some timing experiments with a stripped down version
of the “real” LCC code. Varying the “TOL” parameter in pj_phi2.c. Using the
setup string

+proj=lcc  +lat_1=33 +lat_2=45 +lat_0=33  +lon_0=-90 +x_0=0 +y_0=0
+ellps=GRS80 +no_defs,

I ran roundtrip tests for each 0.1 deg covering a latitude range of 10 N to
68 N, and a longitude range of 135 W to 45 W (522000 points), and got the
following connection between TOL, average number of iterations, average
duration for one projection call, and the maximum roundtrip difference
encountered:

TOL=1e-10: avg iterations=3.64, dt=1716 ns, maxdiff=2000 nm
TOL=1e-12: avg iterations=4.48, dt=1923 ns, maxdiff=28 nm
TOL=1e-13: avg iterations=4.75, dt=1977 ns, maxdiff=5 nm

Setting TOL lower than 1e-13 resulted in longer running time, but not
better maximum roundtrip difference, but the extra 50 ns for a fivefold
improvement of the worst case still seems worthwhile, compared to the 200
ns giving a 70-fold improvement.

So I find it well argued, that the choice of tolerance parameter in
pj_phi2.c must be considered a bug, and corrected: The enormous improvement
in roundtrip precision comes at a time cost of 15% on the stripped down
code, and a bit less for the code running inside PROJ.4, due to plumbing
overhead (which will, however approximately balance out the fact that I’m
measuring roundtrips above, not just inverse calls. But forward calls are
approximately 5 times faster than inverse - so give and take a bit, 15% is
not a bad estimate).

Also, we do not change anything in the forward projection, only improve the
consistency between forward and inverse. So this improvement should, all
other things being equal, be an obvious candidate for implementation.

But all other things are not necessarily entirely equal: The pj_phi2
function is also called from the Mercator variants calcofi, gstmerc, omerc,
and merc, and I have not tested the timing impact on them (their precision
is not altered - the test suite completes nicely).

I also took a look at the histograms of the number of iterations for the
1e-10 and 1e-13 cases. Interestingly they were largely unpopulated: The
1e-10 case was alive at 3 iterations (40% of calls) and 4 (60% of all
calls), while the 1e-13 case had approx 50/50 split between 4 and 5
iterations.

No cases of (1,2), resp. (1,2,3) could indicate that the initial guess
could be improved, but I have not found any obvious way of doing it (except
for things that really amounts to moving one iteration out of the loop,
which is hardly interesting). If you have any ideas, I would be very
interested.

/Thomas


2017-11-02 18:25 GMT+01:00 Dmitry Mefed <dmitrymefed at gmail.com>:

> Thank you Thomas,
>
> I've tried both solutions. The one with strengthen the criterion does work
> for me. Now I can push changes to the DB and query it back with no changes
> to the coordinates with maximum ACAD precision.
> As for LCCA it does not work for us, as in our example it produces a bit
> different results, and it is critical for us. Please see the below output:
>
> LCC EPSG:2285
> cs2cs.exe -v +init=epsg:4269 +to =+proj=lcc +lat_1=48.73333333333333
> +lat_2=47.5 +lat_0=47 +lon_0=-120.8333
> 333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +datum=NAD83
> +to_meter=0.3048006096012192 +no_defs -f %.16f
> -118.5293900000000300   48.7408309999023930
> 2196293.3184076622000000        643350.3929806272500000 0.0000000000000000
>
> LCCA same as above but lcca
> cs2cs.exe -v +init=epsg:4269 +to =+proj=lcca +lat_1=48.73333333333333
> +lat_2=47.5 +lat_0=47 +lon_0=-120.8333
> 333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +datum=NAD83
> +to_meter=0.3048006096012192 +no_defs -f %.16f
> -118.5293900000000300   48.7408309999860520
> 2196554.2242959067000000        643311.0110160053000000 0.0000000000000000
>
> Thank you all for your help.
>
> PS
> I did not observed any sensible performance issues with updated criterion
> value. However I did not do precise measurements.
>
> Thanks,
> -Dmitry Mefed
>
> On Wed, Nov 1, 2017 at 11:43 PM, Thomas Knudsen <knudsen.thomas at gmail.com>
> wrote:
>
>> Dmitry,
>>
>> No, it's not the EPS10 define in PJ_lcc.c - it's the #define TOL 1e-10 in
>> pj_phi2.c you need to modify.
>>
>> /Thomas
>>
>> 2017-11-01 19:47 GMT+01:00 Dmitry Mefed <dmitrymefed at gmail.com>:
>>
>>> Thank you all for the interesting discussion.
>>>
>>> I'm going to try both suggestions:
>>> 1. try to use LCCA instead of LCC
>>> 2. strengthen convergence criterion, I believe it is EPS10 define in
>>> case of LCC
>>>
>>> Thanks,
>>> -Dmitry
>>>
>>> On Wed, Nov 1, 2017 at 4:33 PM, Thomas Knudsen <knudsen.thomas at gmail.com
>>> > wrote:
>>>
>>>> Hi Oscar,
>>>>
>>>> Regarding LCCA:
>>>>
>>>> I can see that the functions for computing dr and its derivative can be
>>>> easily inlined, by defining them as macros, rather than functions.
>>>>
>>>> The call to fabs() is probably, on most platforms, converted to a
>>>> builtin,
>>>> so I would not touch that.
>>>>
>>>> The meridional arc length function, pj_mlfn(), is fairly simple and
>>>> COULD
>>>> be inlined, but at the cost of future agony if the function is one day
>>>> updated,
>>>> so I would prefer to keep it as is until actual profiling shows it to
>>>> be a
>>>> serious problem.
>>>>
>>>> Are there any other obvious speed problems in PJ_lcca (ignoring
>>>> everything
>>>> under the PROJECTION() call, which is setup functionality, executed only
>>>> once, and hence not so speed critical).
>>>>
>>>>
>>>> Regarding LCC:
>>>>
>>>> The iteration you mention goes on in the pj_phi2() function in
>>>> pj_phi2.c.
>>>>
>>>> By strengthening the convergence criterion to 1e-12, the 1000 iteration
>>>> roundtrip deviation for LCC was reduced to 0.005 mm, which certainly
>>>> is more acceptable.
>>>>
>>>> By strengthening to 1e-13, the 1000 roundtrip deviation was below
>>>> 0.0001 mm.
>>>>
>>>> I have, however, not yet had time to measure what the time cost of this
>>>> improvement
>>>> amounts to. Once I have hard numbers, I will post them to the list, and
>>>> probably suggest that we switch - either from LCC to LCCA, or from stop
>>>> criterion of 1e-10 to 1e-12.
>>>>
>>>> /Thomas
>>>>
>>>>
>>>> 2017-11-01 12:29 GMT+01:00 vanadovv at hetnet.nl <vanadovv at hetnet.nl>:
>>>>
>>>>> Hi Thomas,
>>>>>
>>>>>
>>>>> LCCA: good suggestion!
>>>>> As far as I can tell, there are two significant differences between
>>>>> LCC and LCCA.
>>>>> LCC has an iteration loop criterion (in the inverse) of 1e-10, whereas
>>>>> LCCA is somewhat more accurate with 1e-12.
>>>>> Furthermore LCCA works with a Newton iteration scheme. This could be
>>>>> faster than iteration by successive approximation, but there are a couple
>>>>> of minor inefficiencies in the code, like function calls instead of inline,
>>>>> but YMMV.
>>>>>
>>>>>
>>>>> Oscar van Vlijmen
>>>>>
>>>>>
>>>>>
>>>>> ----Origineel Bericht----
>>>>> Van : knudsen.thomas at gmail.com
>>>>> Datum : 01/11/2017 07:58
>>>>> Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
>>>>> Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC
>>>>> (2285) and backward multiple times
>>>>>
>>>>> Oscar,
>>>>>
>>>>> I certainly agree that the deviation is quite high - my comment was
>>>>> more related
>>>>> to the expection of exact roundtrips, which I find unrealistic.
>>>>>
>>>>> Nevertheless, looking into the PROJ.4 code, I see there is an
>>>>> alternative
>>>>> implementation of LCC, called LCCA, which I had forgotten about, which
>>>>> actually seems to roundtrip exactly.
>>>>>
>>>>> In the master branch of PROJ.4, over at
>>>>> https://github.com/OSGeo/proj.4,
>>>>> and comming in the next release, there is a tool "gie" for doing
>>>>> (a.o.)
>>>>> roundtrip tests. It is still lacking in docs, but I think you can
>>>>> follow this example:
>>>>>
>>>>> With this input file:
>>>>>
>>>>> $ cat lcc-lcca.gie
>>>>>
>>>>> BEGIN
>>>>>
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
>>>>>                     +lat_0=47  +lon_0=-120.8333333333333 \
>>>>>                     +x_0=500000.0001016001 +y_0=0        \
>>>>>                     +units=us-ft +ellps=GRS80 +towgs84=0,0,0  +no_defs
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> tolerance   0.0010 mm
>>>>> accept     -118.5293900000000300   48.7408309999860520
>>>>> roundtrip   1000
>>>>>
>>>>>
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
>>>>>                      +lat_0=47  +lon_0=-120.8333333333333 \
>>>>>                      +x_0=500000.0001016001 +y_0=0        \
>>>>>                      +units=us-ft +ellps=GRS80 +towgs84=0,0,0
>>>>> +no_defs
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> tolerance   0.0 mm
>>>>> accept     -118.5293900000000300   48.7408309999860520
>>>>> roundtrip   1000
>>>>> END
>>>>>
>>>>> I get this output:
>>>>>
>>>>> $ gie lcc-lcca.gie
>>>>>
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> Reading file '..\..\..\proj\lcc-lcca.gie'
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47
>>>>> +lon_0=-120....
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>>      FAILURE in lcc-lcca.gie(11):
>>>>>      roundtrip deviation: 1.550 mm, expected: 0.001 mm
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>> total:  1 tests succeeded,   1 tests FAILED!
>>>>> -------------------------------------------------------------------------------
>>>>>
>>>>>
>>>>> i.e. lcca roundtrips exactly, while lcc diverges heavily.
>>>>>
>>>>> So Dmitry: This seems to be your workaround - define your projection
>>>>> using lcca,
>>>>> rather than letting the epsg-list select lcc for you.
>>>>>
>>>>> /Thomas
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> Proj mailing list
>>>>> Proj at lists.maptools.org
>>>>> http://lists.maptools.org/mailman/listinfo/proj
>>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> Proj mailing list
>>>> Proj at lists.maptools.org
>>>> http://lists.maptools.org/mailman/listinfo/proj
>>>>
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171102/3ff3638c/attachment.html>

From vanadovv at hetnet.nl  Fri Nov  3 04:25:16 2017
From: vanadovv at hetnet.nl (vanadovv at hetnet.nl)
Date: Fri, 3 Nov 2017 12:25:16 +0100 (CET)
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
	<CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
	<CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>
	<CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>
Message-ID: <6081417.9312.1509708316136.JavaMail.defaultUser@defaultHost>

I completely forgot about the LCCA projection, discussed some years ago.
But, LCCA is not LCCA.
The discussion around the PJ_lcca.c code seems to refer to the Lambert Conic Near-Conformal projection, fully documented in the EPSG Guidance Note 7-2.
This projection is also fully documented in the Libproj4 manual from Gerald Evenden, as the Lambert Conformal Conic Alternative Projection.
The code from Libproj is used in PROJ. The libproj/proj algorithms are completely different from the EPSG algorithms.
Eitherway: indeed, do not use this code for regular LCC projections!
 Oscar van Vlijmen
 
 
----Origineel Bericht----
Van : knudsen.thomas at gmail.com
Datum : 02/11/2017 22:55
Aan : proj at lists.maptools.org
Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and backward multiple times
 
  Hi Dmitry,
 
 
  
 
 
  I googled around for the “alternative” Lambert, without luck, but then this afternoon, I accidentally misspelled Lambert as “Lamber”, and ran into this thread: 
  http://lists.maptools.org/pipermail/proj/2003-March/000644.html where PROJ.4 founder Gerald Evenden, and long time PROJ.4 maintainer Frank Warmerdam discusses the LCCA, and Gerald mentions that it is a truncated series, only introduced to be compatible with some legacy French/North African systems, that were defined using the truncated series.
 
 
  
 
 
  Gerald explicitly states that it should not be used for new work, so my recommendation of looking at it was terribly bad advice. Also, I had not realized that LCCA does not support the secant (“2 parallel”) case, and hence lat_0 and not lat_1 & lat_2 are used for parameterizing the projection.
 
 
  
 
 
  So enough about LCCA - it should not be used for anything but to maintain interoperability with legacy reference systems.
 
.....
[more: see original message]
  
 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171103/dfb950d4/attachment.html>

From cjmce at lsu.edu  Fri Nov  3 07:54:17 2017
From: cjmce at lsu.edu (Clifford J Mugnier)
Date: Fri, 3 Nov 2017 14:54:17 +0000
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <6081417.9312.1509708316136.JavaMail.defaultUser@defaultHost>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
	<CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
	<CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>
	<CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>,
	<6081417.9312.1509708316136.JavaMail.defaultUser@defaultHost>
Message-ID: <BY2PR06MB1861B97442CE267996C0C494A85D0@BY2PR06MB1861.namprd06.prod.outlook.com>

The French Army Truncated Cubic Lambert (partially conformal) Conic projection is the Legal system for the projection in France between the late 1800s and 1948 when the French Legislature changed the law to recognize the fully conformal version.  It was (might still be in one or two North African prior French Colonies) used in North Africa in Algeria, Tunisia, & Morocco, as well as in Syria during the Levant.


Last time I have seen it used was about 30+ years ago in Algeria when it was used to define Lease Block boundaries for Petroleum Exploration & Production.


Clifford J. Mugnier, c.p., c.m.s.

Chief of Geodesy

LSU Center for GeoInformatics (ERAD 266)

Dept. of Civil Engineering (P.F. Taylor 3531)

LOUISIANA STATE UNIVERSITY

Baton Rouge, LA  70803

Academic: (225) 578-8536

Research: (225) 578-4578

Cell:             (225) 328-8975

honorary lifetime member, lsps

fellow emeritus, asprs

member, apsg


________________________________
From: proj-bounces at lists.maptools.org <proj-bounces at lists.maptools.org> on behalf of vanadovv at hetnet.nl <vanadovv at hetnet.nl>
Sent: Friday, November 3, 2017 6:25 AM
To: PROJ.4 and general Projections Discussions
Subject: Re: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and backward multiple times


I completely forgot about the LCCA projection, discussed some years ago.
But, LCCA is not LCCA.
The discussion around the PJ_lcca.c code seems to refer to the Lambert Conic Near-Conformal projection, fully documented in the EPSG Guidance Note 7-2.
This projection is also fully documented in the Libproj4 manual from Gerald Evenden, as the Lambert Conformal Conic Alternative Projection.
The code from Libproj is used in PROJ. The libproj/proj algorithms are completely different from the EPSG algorithms.
Eitherway: indeed, do not use this code for regular LCC projections!

 Oscar van Vlijmen



----Origineel Bericht----
Van : knudsen.thomas at gmail.com
Datum : 02/11/2017 22:55
Aan : proj at lists.maptools.org
Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and backward multiple times

Hi Dmitry,

I googled around for the “alternative” Lambert, without luck, but then this afternoon, I accidentally misspelled Lambert as “Lamber”, and ran into this thread: http://lists.maptools.org/pipermail/proj/2003-March/000644.html where PROJ.4 founder Gerald Evenden, and long time PROJ.4 maintainer Frank Warmerdam discusses the LCCA, and Gerald mentions that it is a truncated series, only introduced to be compatible with some legacy French/North African systems, that were defined using the truncated series.

Gerald explicitly states that it should not be used for new work, so my recommendation of looking at it was terribly bad advice. Also, I had not realized that LCCA does not support the secant (“2 parallel”) case, and hence lat_0 and not lat_1 & lat_2 are used for parameterizing the projection.

So enough about LCCA - it should not be used for anything but to maintain interoperability with legacy reference systems.


.....

[more: see original message]





-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171103/32b09cef/attachment.html>

From knudsen.thomas at gmail.com  Sat Nov  4 08:04:17 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sat, 4 Nov 2017 16:04:17 +0100
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <BY2PR06MB1861B97442CE267996C0C494A85D0@BY2PR06MB1861.namprd06.prod.outlook.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
	<CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
	<CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>
	<CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>
	<6081417.9312.1509708316136.JavaMail.defaultUser@defaultHost>
	<BY2PR06MB1861B97442CE267996C0C494A85D0@BY2PR06MB1861.namprd06.prod.outlook.com>
Message-ID: <CAH0YoEP=bpTNB9f1wYwS5JE=DcTh8Jbj-dfiPbKyO90rcwhARA@mail.gmail.com>

Thanks, Clifford, for some very informative notes. I have taken the liberty
to add them (with proper attribution) as a comment to the
implementation in PJ_lcca.c, to let people know how (preferably not)
to use this projection.

(The pull request sits over at https://github.com/OSGeo/proj.4/pull/640 )

/Thomas

2017-11-03 15:54 GMT+01:00 Clifford J Mugnier <cjmce at lsu.edu>:

> The French Army Truncated Cubic Lambert (partially conformal) Conic
> projection is the Legal system for the projection in France between the
> late 1800s and 1948 when the French Legislature changed the law to
> recognize the fully conformal version.  It was (might still be in one or
> two North African prior French Colonies) used in North Africa in Algeria,
> Tunisia, & Morocco, as well as in Syria during the Levant.
>
>
> Last time I have seen it used was about 30+ years ago in Algeria when it
> was used to define Lease Block boundaries for Petroleum Exploration &
> Production.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171104/dfd53c4c/attachment.html>

From dmitrymefed at gmail.com  Mon Nov  6 09:11:52 2017
From: dmitrymefed at gmail.com (Dmitry Mefed)
Date: Mon, 6 Nov 2017 20:11:52 +0300
Subject: [Proj] Grown error if re-projecting from 4269 to LCC (2285) and
 backward multiple times
In-Reply-To: <CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>
References: <CALjJ2jNWD80w=kDRj3KJnXy9cJZSuF4raXiKOcpvcVEmJEJGGA@mail.gmail.com>
	<CALjJ2jOy5BSiD-fN86HGMW1OYunCcvoNeaMm4vha6SCtvoV5mA@mail.gmail.com>
	<24235513.30018.1509480705787.JavaMail.defaultUser@defaultHost>
	<CAH0YoEPKMePj-yc=+aVOb9BLJ5ZsJ448v4x+4aU9wEqeBgyC7Q@mail.gmail.com>
	<32284828.10362.1509535753613.JavaMail.defaultUser@defaultHost>
	<CAH0YoEN27i2F1mLWMnD1eCV4D7cE_CVMGjyPj69Y+=sTewqRYg@mail.gmail.com>
	<CALjJ2jNJN7=x3zPqa_Uy_aw2e01s=DjNC0+ZPiT5HtsGHxRXqg@mail.gmail.com>
	<CAH0YoENL+nZt43FiEpOLHB+XsBc6=XquxKEyEnaFEh0kBf-oGw@mail.gmail.com>
	<CALjJ2jMG=a+OxEqMj=Efdw6CKTNkCZoeG-zOPK2odeYEfd_Rzw@mail.gmail.com>
	<CAH0YoEMGwEvpXrfKJPJdV_v+9WVt=AwxKcJiuBfYCy2o7SLo3A@mail.gmail.com>
Message-ID: <CALjJ2jPPhd1pzsUqmgvdXtYPsn2po1my+5=uCAbZ6+9v-GE4jQ@mail.gmail.com>

Hi Thomas,

All you said about number of iterations sounds interesting to me, but I do
not have projections algorithms background, so I will not be able to help
here in any way.

Thank you all for your help.

-Dmitry Mefed

On Fri, Nov 3, 2017 at 12:55 AM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> Hi Dmitry,
>
> I googled around for the “alternative” Lambert, without luck, but then
> this afternoon, I accidentally misspelled Lambert as “Lamber”, and ran into
> this thread: http://lists.maptools.org/pipermail/proj/2003-March/
> 000644.html where PROJ.4 founder Gerald Evenden, and long time PROJ.4
> maintainer Frank Warmerdam discusses the LCCA, and Gerald mentions that it
> is a truncated series, only introduced to be compatible with some legacy
> French/North African systems, that were defined using the truncated series.
>
> Gerald explicitly states that it should not be used for new work, so my
> recommendation of looking at it was terribly bad advice. Also, I had not
> realized that LCCA does not support the secant (“2 parallel”) case, and
> hence lat_0 and not lat_1 & lat_2 are used for parameterizing the
> projection.
>
> So enough about LCCA - it should not be used for anything but to maintain
> interoperability with legacy reference systems.
>
> But I have been doing some timing experiments with a stripped down version
> of the “real” LCC code. Varying the “TOL” parameter in pj_phi2.c. Using the
> setup string
>
> +proj=lcc  +lat_1=33 +lat_2=45 +lat_0=33  +lon_0=-90 +x_0=0 +y_0=0
> +ellps=GRS80 +no_defs,
>
> I ran roundtrip tests for each 0.1 deg covering a latitude range of 10 N
> to 68 N, and a longitude range of 135 W to 45 W (522000 points), and got
> the following connection between TOL, average number of iterations, average
> duration for one projection call, and the maximum roundtrip difference
> encountered:
>
> TOL=1e-10: avg iterations=3.64, dt=1716 ns, maxdiff=2000 nm
> TOL=1e-12: avg iterations=4.48, dt=1923 ns, maxdiff=28 nm
> TOL=1e-13: avg iterations=4.75, dt=1977 ns, maxdiff=5 nm
>
> Setting TOL lower than 1e-13 resulted in longer running time, but not
> better maximum roundtrip difference, but the extra 50 ns for a fivefold
> improvement of the worst case still seems worthwhile, compared to the 200
> ns giving a 70-fold improvement.
>
> So I find it well argued, that the choice of tolerance parameter in
> pj_phi2.c must be considered a bug, and corrected: The enormous improvement
> in roundtrip precision comes at a time cost of 15% on the stripped down
> code, and a bit less for the code running inside PROJ.4, due to plumbing
> overhead (which will, however approximately balance out the fact that I’m
> measuring roundtrips above, not just inverse calls. But forward calls are
> approximately 5 times faster than inverse - so give and take a bit, 15% is
> not a bad estimate).
>
> Also, we do not change anything in the forward projection, only improve
> the consistency between forward and inverse. So this improvement should,
> all other things being equal, be an obvious candidate for implementation.
>
> But all other things are not necessarily entirely equal: The pj_phi2
> function is also called from the Mercator variants calcofi, gstmerc, omerc,
> and merc, and I have not tested the timing impact on them (their precision
> is not altered - the test suite completes nicely).
>
> I also took a look at the histograms of the number of iterations for the
> 1e-10 and 1e-13 cases. Interestingly they were largely unpopulated: The
> 1e-10 case was alive at 3 iterations (40% of calls) and 4 (60% of all
> calls), while the 1e-13 case had approx 50/50 split between 4 and 5
> iterations.
>
> No cases of (1,2), resp. (1,2,3) could indicate that the initial guess
> could be improved, but I have not found any obvious way of doing it (except
> for things that really amounts to moving one iteration out of the loop,
> which is hardly interesting). If you have any ideas, I would be very
> interested.
>
> /Thomas
>
>
> 2017-11-02 18:25 GMT+01:00 Dmitry Mefed <dmitrymefed at gmail.com>:
>
>> Thank you Thomas,
>>
>> I've tried both solutions. The one with strengthen the criterion does
>> work for me. Now I can push changes to the DB and query it back with no
>> changes to the coordinates with maximum ACAD precision.
>> As for LCCA it does not work for us, as in our example it produces a bit
>> different results, and it is critical for us. Please see the below output:
>>
>> LCC EPSG:2285
>> cs2cs.exe -v +init=epsg:4269 +to =+proj=lcc +lat_1=48.73333333333333
>> +lat_2=47.5 +lat_0=47 +lon_0=-120.8333
>> 333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +datum=NAD83
>> +to_meter=0.3048006096012192 +no_defs -f %.16f
>> -118.5293900000000300   48.7408309999023930
>> 2196293.3184076622000000        643350.3929806272500000
>> 0.0000000000000000
>>
>> LCCA same as above but lcca
>> cs2cs.exe -v +init=epsg:4269 +to =+proj=lcca +lat_1=48.73333333333333
>> +lat_2=47.5 +lat_0=47 +lon_0=-120.8333
>> 333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +datum=NAD83
>> +to_meter=0.3048006096012192 +no_defs -f %.16f
>> -118.5293900000000300   48.7408309999860520
>> 2196554.2242959067000000        643311.0110160053000000
>> 0.0000000000000000
>>
>> Thank you all for your help.
>>
>> PS
>> I did not observed any sensible performance issues with updated criterion
>> value. However I did not do precise measurements.
>>
>> Thanks,
>> -Dmitry Mefed
>>
>> On Wed, Nov 1, 2017 at 11:43 PM, Thomas Knudsen <knudsen.thomas at gmail.com
>> > wrote:
>>
>>> Dmitry,
>>>
>>> No, it's not the EPS10 define in PJ_lcc.c - it's the #define TOL 1e-10
>>> in pj_phi2.c you need to modify.
>>>
>>> /Thomas
>>>
>>> 2017-11-01 19:47 GMT+01:00 Dmitry Mefed <dmitrymefed at gmail.com>:
>>>
>>>> Thank you all for the interesting discussion.
>>>>
>>>> I'm going to try both suggestions:
>>>> 1. try to use LCCA instead of LCC
>>>> 2. strengthen convergence criterion, I believe it is EPS10 define in
>>>> case of LCC
>>>>
>>>> Thanks,
>>>> -Dmitry
>>>>
>>>> On Wed, Nov 1, 2017 at 4:33 PM, Thomas Knudsen <
>>>> knudsen.thomas at gmail.com> wrote:
>>>>
>>>>> Hi Oscar,
>>>>>
>>>>> Regarding LCCA:
>>>>>
>>>>> I can see that the functions for computing dr and its derivative can be
>>>>> easily inlined, by defining them as macros, rather than functions.
>>>>>
>>>>> The call to fabs() is probably, on most platforms, converted to a
>>>>> builtin,
>>>>> so I would not touch that.
>>>>>
>>>>> The meridional arc length function, pj_mlfn(), is fairly simple and
>>>>> COULD
>>>>> be inlined, but at the cost of future agony if the function is one day
>>>>> updated,
>>>>> so I would prefer to keep it as is until actual profiling shows it to
>>>>> be a
>>>>> serious problem.
>>>>>
>>>>> Are there any other obvious speed problems in PJ_lcca (ignoring
>>>>> everything
>>>>> under the PROJECTION() call, which is setup functionality, executed
>>>>> only
>>>>> once, and hence not so speed critical).
>>>>>
>>>>>
>>>>> Regarding LCC:
>>>>>
>>>>> The iteration you mention goes on in the pj_phi2() function in
>>>>> pj_phi2.c.
>>>>>
>>>>> By strengthening the convergence criterion to 1e-12, the 1000 iteration
>>>>> roundtrip deviation for LCC was reduced to 0.005 mm, which certainly
>>>>> is more acceptable.
>>>>>
>>>>> By strengthening to 1e-13, the 1000 roundtrip deviation was below
>>>>> 0.0001 mm.
>>>>>
>>>>> I have, however, not yet had time to measure what the time cost of
>>>>> this improvement
>>>>> amounts to. Once I have hard numbers, I will post them to the list, and
>>>>> probably suggest that we switch - either from LCC to LCCA, or from stop
>>>>> criterion of 1e-10 to 1e-12.
>>>>>
>>>>> /Thomas
>>>>>
>>>>>
>>>>> 2017-11-01 12:29 GMT+01:00 vanadovv at hetnet.nl <vanadovv at hetnet.nl>:
>>>>>
>>>>>> Hi Thomas,
>>>>>>
>>>>>>
>>>>>> LCCA: good suggestion!
>>>>>> As far as I can tell, there are two significant differences between
>>>>>> LCC and LCCA.
>>>>>> LCC has an iteration loop criterion (in the inverse) of 1e-10,
>>>>>> whereas LCCA is somewhat more accurate with 1e-12.
>>>>>> Furthermore LCCA works with a Newton iteration scheme. This could be
>>>>>> faster than iteration by successive approximation, but there are a couple
>>>>>> of minor inefficiencies in the code, like function calls instead of inline,
>>>>>> but YMMV.
>>>>>>
>>>>>>
>>>>>> Oscar van Vlijmen
>>>>>>
>>>>>>
>>>>>>
>>>>>> ----Origineel Bericht----
>>>>>> Van : knudsen.thomas at gmail.com
>>>>>> Datum : 01/11/2017 07:58
>>>>>> Aan : vanadovv at hetnet.nl, proj at lists.maptools.org
>>>>>> Onderwerp : Re: [Proj] Grown error if re-projecting from 4269 to LCC
>>>>>> (2285) and backward multiple times
>>>>>>
>>>>>> Oscar,
>>>>>>
>>>>>> I certainly agree that the deviation is quite high - my comment was
>>>>>> more related
>>>>>> to the expection of exact roundtrips, which I find unrealistic.
>>>>>>
>>>>>> Nevertheless, looking into the PROJ.4 code, I see there is an
>>>>>> alternative
>>>>>> implementation of LCC, called LCCA, which I had forgotten about,
>>>>>> which
>>>>>> actually seems to roundtrip exactly.
>>>>>>
>>>>>> In the master branch of PROJ.4, over at
>>>>>> https://github.com/OSGeo/proj.4,
>>>>>> and comming in the next release, there is a tool "gie" for doing
>>>>>> (a.o.)
>>>>>> roundtrip tests. It is still lacking in docs, but I think you can
>>>>>> follow this example:
>>>>>>
>>>>>> With this input file:
>>>>>>
>>>>>> $ cat lcc-lcca.gie
>>>>>>
>>>>>> BEGIN
>>>>>>
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> operation +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 \
>>>>>>                     +lat_0=47  +lon_0=-120.8333333333333 \
>>>>>>                     +x_0=500000.0001016001 +y_0=0        \
>>>>>>                     +units=us-ft +ellps=GRS80 +towgs84=0,0,0
>>>>>> +no_defs
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> tolerance   0.0010 mm
>>>>>> accept     -118.5293900000000300   48.7408309999860520
>>>>>> roundtrip   1000
>>>>>>
>>>>>>
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> operation +proj=lcca +lat_1=48.73333333333333 +lat_2=47.5 \
>>>>>>                      +lat_0=47  +lon_0=-120.8333333333333 \
>>>>>>                      +x_0=500000.0001016001 +y_0=0        \
>>>>>>                      +units=us-ft +ellps=GRS80 +towgs84=0,0,0
>>>>>> +no_defs
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> tolerance   0.0 mm
>>>>>> accept     -118.5293900000000300   48.7408309999860520
>>>>>> roundtrip   1000
>>>>>> END
>>>>>>
>>>>>> I get this output:
>>>>>>
>>>>>> $ gie lcc-lcca.gie
>>>>>>
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> Reading file '..\..\..\proj\lcc-lcca.gie'
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> +proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47
>>>>>> +lon_0=-120....
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>>      FAILURE in lcc-lcca.gie(11):
>>>>>>      roundtrip deviation: 1.550 mm, expected: 0.001 mm
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>> total:  1 tests succeeded,   1 tests FAILED!
>>>>>> -------------------------------------------------------------------------------
>>>>>>
>>>>>>
>>>>>> i.e. lcca roundtrips exactly, while lcc diverges heavily.
>>>>>>
>>>>>> So Dmitry: This seems to be your workaround - define your projection
>>>>>> using lcca,
>>>>>> rather than letting the epsg-list select lcc for you.
>>>>>>
>>>>>> /Thomas
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>> _______________________________________________
>>>>>> Proj mailing list
>>>>>> Proj at lists.maptools.org
>>>>>> http://lists.maptools.org/mailman/listinfo/proj
>>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> Proj mailing list
>>>>> Proj at lists.maptools.org
>>>>> http://lists.maptools.org/mailman/listinfo/proj
>>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> Proj mailing list
>>>> Proj at lists.maptools.org
>>>> http://lists.maptools.org/mailman/listinfo/proj
>>>>
>>>
>>>
>>> _______________________________________________
>>> Proj mailing list
>>> Proj at lists.maptools.org
>>> http://lists.maptools.org/mailman/listinfo/proj
>>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171106/e8094fd5/attachment.html>

From sp8qed at onet.eu  Wed Nov  8 02:08:18 2017
From: sp8qed at onet.eu (Lukasz Komsta)
Date: Wed, 08 Nov 2017 11:08:18 +0100
Subject: [Proj] Conic projection, but centric (gnomonic)
Message-ID: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>

Dear All,

In late 1970s, Institute of Botany of Jagiellonian University in Krakow (Poland) developed a geobotanical grid. This grid has interesting history, because the details of projection were never officially published. After my reverse engineering followed by further numerical investigation by my colleague it was revealed that this grid is based on something which is called in mapproj package "central conic projection" with one tangent (with quite strange Earth radius, but it is only a detail). The projection is from Earth center, not parallel nor stereographic.

I implemented this grid in various languages and the detailed info is here: https://atpol.sourceforge.io/.

The creators of original grid officially confirmed that this projection is same with their original idea and this caused rising of interest in usage.

However, there is no possibility to set this projection in PROJ4 (as far as i know), which results in incompatibility of many GIS systems with this botanical grid.

The closest solution is

+proj=eqdc +lat_1=52 +lat_2=52 +lat_0=52 +lon_0=19 +axis=esu +a=6390000
+b=6390000 +ellps=sphere +x_0=330000 +y_0=-350000

...but this results in quite significant inaccuracy, as EQDC is not gnomonic (central) projection.

So, my questions are:

1. Is there a possibility to achieve desired projection using PROJ4 ?
2. If not, are there any possibility to implement such a functionality in the future to allow GIS users using this grid?

Thank you very much in advance

Lukasz Komsta



From kreve at sdfe.dk  Wed Nov  8 06:17:14 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 8 Nov 2017 14:17:14 +0000
Subject: [Proj] Conic projection, but centric (gnomonic)
In-Reply-To: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
References: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEABB691@S000014.PROD.SITAD.DK>

Hi Lukasz,

> 1. Is there a possibility to achieve desired projection using PROJ4 ?

You can probably answer this better than anyone else, and it would seem you have concluded that it can't.

> 2. If not, are there any possibility to implement such a functionality in the future to allow GIS users using this grid?

You are welcome to submit a pull request on GitHub [0] with the necessary code additions and documentation. If you need help getting started please let us know.

Best regards,
Kristian

[0] https://github.com/OSGeo/proj.4

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Lukasz Komsta
Sendt: 8. november 2017 11:08
Til: proj at lists.maptools.org
Emne: [Proj] Conic projection, but centric (gnomonic)

Dear All,

In late 1970s, Institute of Botany of Jagiellonian University in Krakow (Poland) developed a geobotanical grid. This grid has interesting history, because the details of projection were never officially published. After my reverse engineering followed by further numerical investigation by my colleague it was revealed that this grid is based on something which is called in mapproj package "central conic projection" with one tangent (with quite strange Earth radius, but it is only a detail). The projection is from Earth center, not parallel nor stereographic.

I implemented this grid in various languages and the detailed info is here: https://atpol.sourceforge.io/.

The creators of original grid officially confirmed that this projection is same with their original idea and this caused rising of interest in usage.

However, there is no possibility to set this projection in PROJ4 (as far as i know), which results in incompatibility of many GIS systems with this botanical grid.

The closest solution is

+proj=eqdc +lat_1=52 +lat_2=52 +lat_0=52 +lon_0=19 +axis=esu +a=6390000
+b=6390000 +ellps=sphere +x_0=330000 +y_0=-350000

...but this results in quite significant inaccuracy, as EQDC is not gnomonic (central) projection.

So, my questions are:

1. Is there a possibility to achieve desired projection using PROJ4 ?
2. If not, are there any possibility to implement such a functionality in the future to allow GIS users using this grid?

Thank you very much in advance

Lukasz Komsta

_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From schwehr at gmail.com  Wed Nov  8 08:44:11 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 8 Nov 2017 08:44:11 -0800
Subject: [Proj] What is src/proj.def for?
Message-ID: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>

Hi all,

Maybe a dumb question, but what is src/proj.def for? Is this a MSVC only
thing?  It looks like something that controls share lib entry points.  I'm
not a Windows dev, so maybe that's why I don't know what it is.

Am I missing some location where it's documented?  The closest I got was:

https://github.com/OSGeo/proj.4/issues/214
https://github.com/OSGeo/proj.4/pull/355

I've been patching my bazel based build that has this file, but it doesn't
seem to be used by anything.

-kurt


find . -type f | grep -v git | xargs egrep 'proj[.]def'

./ChangeLog: * src/proj.def: add pj_get_spheroid_defn to proj.def. (#214)
./ChangeLog: * proj.def: added lots of methods, including some private ones
used
./ChangeLog: * src/pj_pr_list.c, proj.def, proj_api.h: Added the
pj_get_def()
./ChangeLog: * src/proj.def: added pj_strerrno and pj_errno as per request
from
./ChangeLog: * Added proj.def to extra_dist in src/Makefile.am.
./src/lib_proj.cmake:    set(ALL_LIBPROJ_SOURCES ${ALL_LIBPROJ_SOURCES}
proj.def )
./src/Makefile.am:EXTRA_DIST = makefile.vc proj.def bin_cct.cmake
bin_gie.cmake bin_cs2cs.cmake \
./src/makefile.vc: link /debug /dll /def:proj.def /out:$(PROJ_DLL)
/implib:proj_i.lib \
./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool Name="VCLinkerTool"
AdditionalOptions=" /subsystem:windowsce,4.20 /machine:ARM /ARMPADCODE"
AdditionalDependencies="ccrtrtti.lib" OutputFile="$(OutDir)/proj.dll"
LinkIncremental="2" AdditionalLibraryDirectories=""
ModuleDefinitionFile="..\..\..\src\proj.def" DelayLoadDLLs="$(NOINHERIT)"
GenerateDebugInformation="true"
ProgramDatabaseFile="$(OutDir)/proj_dll.pdb" SubSystem="0"
ImportLibrary="$(OutDir)/proj_i.lib"/>
./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool Name="VCLinkerTool"
AdditionalOptions=" /subsystem:windowsce,4.20 /machine:ARM /ARMPADCODE"
OutputFile="$(OutDir)/proj.dll" LinkIncremental="1"
ModuleDefinitionFile="..\..\..\src\proj.def" DelayLoadDLLs="$(NOINHERIT)"
GenerateDebugInformation="true"
ProgramDatabaseFile="$(OutDir)/projce_dll.pdb" SubSystem="0"
OptimizeReferences="2" EnableCOMDATFolding="2"
ImportLibrary="$(OutDir)/proj_i.lib"/>
./wince/msvc80/projce_dll/projce_dll.vcproj:        <File
RelativePath="..\..\..\src\proj.def">
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171108/6f17e37b/attachment.html>

From mcochran at athensal.us  Wed Nov  8 08:53:42 2017
From: mcochran at athensal.us (Micah Cochran)
Date: Wed, 8 Nov 2017 10:53:42 -0600
Subject: [Proj] What is src/proj.def for?
In-Reply-To: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
References: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
Message-ID: <CAHLAsF1F=X0iKojXvo_GkwqRwHfEkPs_Y5jvAp7h5PY-N4W1kQ@mail.gmail.com>

Kurt,

I think that you are right that it is a MSVC related.  I don't do Windows
development either.

see Exporting from a DLL Using DEF Files
https://msdn.microsoft.com/en-us/library/d91k01sh.aspx

Micah Cochran

On Wed, Nov 8, 2017 at 10:44 AM, Kurt Schwehr <schwehr at gmail.com> wrote:

> Hi all,
>
> Maybe a dumb question, but what is src/proj.def for? Is this a MSVC only
> thing?  It looks like something that controls share lib entry points.  I'm
> not a Windows dev, so maybe that's why I don't know what it is.
>
> Am I missing some location where it's documented?  The closest I got was:
>
> https://github.com/OSGeo/proj.4/issues/214
> https://github.com/OSGeo/proj.4/pull/355
>
> I've been patching my bazel based build that has this file, but it doesn't
> seem to be used by anything.
>
> -kurt
>
>
> find . -type f | grep -v git | xargs egrep 'proj[.]def'
>
> ./ChangeLog: * src/proj.def: add pj_get_spheroid_defn to proj.def. (#214)
> ./ChangeLog: * proj.def: added lots of methods, including some private
> ones used
> ./ChangeLog: * src/pj_pr_list.c, proj.def, proj_api.h: Added the
> pj_get_def()
> ./ChangeLog: * src/proj.def: added pj_strerrno and pj_errno as per
> request from
> ./ChangeLog: * Added proj.def to extra_dist in src/Makefile.am.
> ./src/lib_proj.cmake:    set(ALL_LIBPROJ_SOURCES ${ALL_LIBPROJ_SOURCES}
> proj.def )
> ./src/Makefile.am:EXTRA_DIST = makefile.vc proj.def bin_cct.cmake
> bin_gie.cmake bin_cs2cs.cmake \
> ./src/makefile.vc: link /debug /dll /def:proj.def /out:$(PROJ_DLL)
> /implib:proj_i.lib \
> ./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool
> Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20
> /machine:ARM /ARMPADCODE" AdditionalDependencies="ccrtrtti.lib"
> OutputFile="$(OutDir)/proj.dll" LinkIncremental="2"
> AdditionalLibraryDirectories="" ModuleDefinitionFile="..\..\..\src\proj.def"
> DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true"
> ProgramDatabaseFile="$(OutDir)/proj_dll.pdb" SubSystem="0"
> ImportLibrary="$(OutDir)/proj_i.lib"/>
> ./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool
> Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20
> /machine:ARM /ARMPADCODE" OutputFile="$(OutDir)/proj.dll"
> LinkIncremental="1" ModuleDefinitionFile="..\..\..\src\proj.def"
> DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true"
> ProgramDatabaseFile="$(OutDir)/projce_dll.pdb" SubSystem="0"
> OptimizeReferences="2" EnableCOMDATFolding="2"
> ImportLibrary="$(OutDir)/proj_i.lib"/>
> ./wince/msvc80/projce_dll/projce_dll.vcproj:        <File
> RelativePath="..\..\..\src\proj.def">
>
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171108/64f6d906/attachment.html>

From schwehr at gmail.com  Wed Nov  8 09:21:22 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 8 Nov 2017 09:21:22 -0800
Subject: [Proj] What is src/proj.def for?
In-Reply-To: <CAHLAsF1F=X0iKojXvo_GkwqRwHfEkPs_Y5jvAp7h5PY-N4W1kQ@mail.gmail.com>
References: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
	<CAHLAsF1F=X0iKojXvo_GkwqRwHfEkPs_Y5jvAp7h5PY-N4W1kQ@mail.gmail.com>
Message-ID: <CACmBxysM4Gm-zBj2Uo5uPosVHQg4w18MRqOD7VYmmfZ=V2Ec1Q@mail.gmail.com>

Thanks Micah!

On Wed, Nov 8, 2017 at 8:53 AM, Micah Cochran <mcochran at athensal.us> wrote:

> Kurt,
>
> I think that you are right that it is a MSVC related.  I don't do Windows
> development either.
>
> see Exporting from a DLL Using DEF Files
> https://msdn.microsoft.com/en-us/library/d91k01sh.aspx
>
> Micah Cochran
>
> On Wed, Nov 8, 2017 at 10:44 AM, Kurt Schwehr <schwehr at gmail.com> wrote:
>
>> Hi all,
>>
>> Maybe a dumb question, but what is src/proj.def for? Is this a MSVC only
>> thing?  It looks like something that controls share lib entry points.  I'm
>> not a Windows dev, so maybe that's why I don't know what it is.
>>
>> Am I missing some location where it's documented?  The closest I got was:
>>
>> https://github.com/OSGeo/proj.4/issues/214
>> https://github.com/OSGeo/proj.4/pull/355
>>
>> I've been patching my bazel based build that has this file, but it
>> doesn't seem to be used by anything.
>>
>> -kurt
>>
>>
>> find . -type f | grep -v git | xargs egrep 'proj[.]def'
>>
>> ./ChangeLog: * src/proj.def: add pj_get_spheroid_defn to proj.def. (#214)
>> ./ChangeLog: * proj.def: added lots of methods, including some private
>> ones used
>> ./ChangeLog: * src/pj_pr_list.c, proj.def, proj_api.h: Added the
>> pj_get_def()
>> ./ChangeLog: * src/proj.def: added pj_strerrno and pj_errno as per
>> request from
>> ./ChangeLog: * Added proj.def to extra_dist in src/Makefile.am.
>> ./src/lib_proj.cmake:    set(ALL_LIBPROJ_SOURCES ${ALL_LIBPROJ_SOURCES}
>> proj.def )
>> ./src/Makefile.am:EXTRA_DIST = makefile.vc proj.def bin_cct.cmake
>> bin_gie.cmake bin_cs2cs.cmake \
>> ./src/makefile.vc: link /debug /dll /def:proj.def /out:$(PROJ_DLL)
>> /implib:proj_i.lib \
>> ./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool
>> Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20
>> /machine:ARM /ARMPADCODE" AdditionalDependencies="ccrtrtti.lib"
>> OutputFile="$(OutDir)/proj.dll" LinkIncremental="2"
>> AdditionalLibraryDirectories="" ModuleDefinitionFile="..\..\..\src\proj.def"
>> DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true"
>> ProgramDatabaseFile="$(OutDir)/proj_dll.pdb" SubSystem="0"
>> ImportLibrary="$(OutDir)/proj_i.lib"/>
>> ./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool
>> Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20
>> /machine:ARM /ARMPADCODE" OutputFile="$(OutDir)/proj.dll"
>> LinkIncremental="1" ModuleDefinitionFile="..\..\..\src\proj.def"
>> DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true"
>> ProgramDatabaseFile="$(OutDir)/projce_dll.pdb" SubSystem="0"
>> OptimizeReferences="2" EnableCOMDATFolding="2"
>> ImportLibrary="$(OutDir)/proj_i.lib"/>
>> ./wince/msvc80/projce_dll/projce_dll.vcproj:        <File
>> RelativePath="..\..\..\src\proj.def">
>>
>>
>>
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171108/40da6d88/attachment.html>

From jmckenna at gatewaygeomatics.com  Wed Nov  8 09:53:57 2017
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Wed, 8 Nov 2017 13:53:57 -0400
Subject: [Proj] What is src/proj.def for?
In-Reply-To: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
References: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
Message-ID: <2445b28e-e5d4-3c67-11e3-bcf151b76734@gatewaygeomatics.com>

Hi Kurt,

Actually when you compile zlib from source on Windows with MSVC, it 
still uses a legacy file named "zlibvc.def" in the build process.  So 
this definitely confirms your assumptions.  -jeff



On 2017-11-08 12:44 PM, Kurt Schwehr wrote:
> Hi all,
> 
> Maybe a dumb question, but what is src/proj.def for? Is this a MSVC only 
> thing?  It looks like something that controls share lib entry points.  
> I'm not a Windows dev, so maybe that's why I don't know what it is.
> 
> Am I missing some location where it's documented?  The closest I got was:
> 
> https://github.com/OSGeo/proj.4/issues/214
> https://github.com/OSGeo/proj.4/pull/355
> 
> I've been patching my bazel based build that has this file, but it 
> doesn't seem to be used by anything.
> 
> -kurt
> 
> 
> find . -type f | grep -v git | xargs egrep 'proj[.]def'
> 
> ./ChangeLog:* src/proj.def: add pj_get_spheroid_defn to proj.def. (#214)
> ./ChangeLog:* proj.def: added lots of methods, including some private 
> ones used
> ./ChangeLog:* src/pj_pr_list.c, proj.def, proj_api.h: Added the pj_get_def()
> ./ChangeLog:* src/proj.def: added pj_strerrno and pj_errno as per 
> request from
> ./ChangeLog:* Added proj.def to extra_dist in src/Makefile.am.
> ./src/lib_proj.cmake:    set(ALL_LIBPROJ_SOURCES ${ALL_LIBPROJ_SOURCES} 
> proj.def )
> ./src/Makefile.am:EXTRA_DIST = makefile.vc <http://makefile.vc> proj.def 
> bin_cct.cmake bin_gie.cmake bin_cs2cs.cmake \
> ./src/makefile.vc <http://makefile.vc>:link /debug /dll /def:proj.def 
> /out:$(PROJ_DLL) /implib:proj_i.lib \
> ./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool 
> Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20 
> /machine:ARM /ARMPADCODE" AdditionalDependencies="ccrtrtti.lib" 
> OutputFile="$(OutDir)/proj.dll" LinkIncremental="2" 
> AdditionalLibraryDirectories="" 
> ModuleDefinitionFile="..\..\..\src\proj.def" 
> DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true" 
> ProgramDatabaseFile="$(OutDir)/proj_dll.pdb" SubSystem="0" 
> ImportLibrary="$(OutDir)/proj_i.lib"/>
> ./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool 
> Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20 
> /machine:ARM /ARMPADCODE" OutputFile="$(OutDir)/proj.dll" 
> LinkIncremental="1" ModuleDefinitionFile="..\..\..\src\proj.def" 
> DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true" 
> ProgramDatabaseFile="$(OutDir)/projce_dll.pdb" SubSystem="0" 
> OptimizeReferences="2" EnableCOMDATFolding="2" 
> ImportLibrary="$(OutDir)/proj_i.lib"/>
> ./wince/msvc80/projce_dll/projce_dll.vcproj:        <File 
> RelativePath="..\..\..\src\proj.def">
> 
> 
> 
> 


From dan.crosby at lincolnagritech.co.nz  Wed Nov  8 11:58:32 2017
From: dan.crosby at lincolnagritech.co.nz (Dan Crosby)
Date: Thu, 9 Nov 2017 08:58:32 +1300
Subject: [Proj] What is src/proj.def for?
In-Reply-To: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
References: <CACmBxys3wB=QUJAGVjdezLyPBfB5m_4Ckzm1xABQsRizYJ5FcA@mail.gmail.com>
Message-ID: <f65274a9-bb6a-4756-b580-f58a6b5c8f03@lincolnagritech.co.nz>

Hi All,
 
Yes a module definition file (.def) is one way to define the functions exported from a DLL.
 
https://docs.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files
 
Dan
 
From: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] On Behalf Of Kurt Schwehr
Sent: Thursday, November 09, 2017 5:44 AM
To: proj <proj at lists.maptools.org>
Subject: [Proj] What is src/proj.def for?
 
Hi all,
 
Maybe a dumb question, but what is src/proj.def for? Is this a MSVC only thing?  It looks like something that controls share lib entry points.  I'm not a Windows dev, so maybe that's why I don't know what it is.
 
Am I missing some location where it's documented?  The closest I got was:
 
https://github.com/OSGeo/proj.4/issues/214
https://github.com/OSGeo/proj.4/pull/355
 
I've been patching my bazel based build that has this file, but it doesn't seem to be used by anything.
 
-kurt
 
 
find . -type f | grep -v git | xargs egrep 'proj[.]def'
 
./ChangeLog:  * src/proj.def: add pj_get_spheroid_defn to proj.def. (#214)
./ChangeLog:  * proj.def: added lots of methods, including some private ones used
./ChangeLog:  * src/pj_pr_list.c, proj.def, proj_api.h: Added the pj_get_def()
./ChangeLog:  * src/proj.def: added pj_strerrno and pj_errno as per request from
./ChangeLog:  * Added proj.def to extra_dist in src/Makefile.am.
./src/lib_proj.cmake:    set(ALL_LIBPROJ_SOURCES ${ALL_LIBPROJ_SOURCES} proj.def )
./src/Makefile.am:EXTRA_DIST = makefile.vc proj.def bin_cct.cmake bin_gie.cmake bin_cs2cs.cmake \
./src/makefile.vc:         link /debug /dll /def:proj.def /out:$(PROJ_DLL) /implib:proj_i.lib \
./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20 /machine:ARM /ARMPADCODE" AdditionalDependencies="ccrtrtti.lib" OutputFile="$(OutDir)/proj.dll" LinkIncremental="2" AdditionalLibraryDirectories="" ModuleDefinitionFile="..\..\..\src\proj.def" DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true" ProgramDatabaseFile="$(OutDir)/proj_dll.pdb" SubSystem="0" ImportLibrary="$(OutDir)/proj_i.lib"/>
./wince/msvc80/projce_dll/projce_dll.vcproj:      <Tool Name="VCLinkerTool" AdditionalOptions=" /subsystem:windowsce,4.20 /machine:ARM /ARMPADCODE" OutputFile="$(OutDir)/proj.dll" LinkIncremental="1" ModuleDefinitionFile="..\..\..\src\proj.def" DelayLoadDLLs="$(NOINHERIT)" GenerateDebugInformation="true" ProgramDatabaseFile="$(OutDir)/projce_dll.pdb" SubSystem="0" OptimizeReferences="2" EnableCOMDATFolding="2" ImportLibrary="$(OutDir)/proj_i.lib"/>
./wince/msvc80/projce_dll/projce_dll.vcproj:        <File RelativePath="..\..\..\src\proj.def">
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171109/051da96e/attachment.html>

From kreve at sdfe.dk  Thu Nov  9 02:38:12 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 9 Nov 2017 10:38:12 +0000
Subject: [Proj] Time for a new release?
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>

All,

I think the current development cycle is coming to an end and a new release should be made. It's been more than a year since that least release of PROJ.4. In that period of time the library has improved significantly, most notably by the introduction of a new and more consistent API, transformation pipelines and the cct 4D transformation CLI utility. The new additions have already seen a fair amount of testing and are now at a point where I believe they are stable enough to be released to the public. I would like to propose that we release the next version of PROJ.4 on December 15. This gives roughly a month to take care of the last few kinks that need to be ironed out. It also gives users of the library amble time to test the developing version in the setups and report any issues that have appeared since the last release. With a release mid-december we should aim for a release candidate in the start of December.

I hope we all agree that the time has come to get a new release out there. Please voice your opinions on this matter.

Howard, I guess you will be doing some/most of the heavy lifting with preparing the actual release, so please feel free to propose another time if this doesn't fit your schedule.

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171109/8768932c/attachment.html>

From Roger.Bivand at nhh.no  Thu Nov  9 04:23:26 2017
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Thu, 9 Nov 2017 05:23:26 -0700 (MST)
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
Message-ID: <1510230206829-0.post@n6.nabble.com>

Could I please ask that the version in master be set to a value sorting after
the current release? It doesn't have to be the actual value, but for
downstream testing, it would be really convenient not to see the same value
as the current release.

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html


From stevejking at talktalk.net  Thu Nov  9 04:54:40 2017
From: stevejking at talktalk.net (stevejking)
Date: Thu, 9 Nov 2017 05:54:40 -0700 (MST)
Subject: [Proj] Conic projection, but centric (gnomonic)
In-Reply-To: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
References: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
Message-ID: <1510232080756-0.post@n6.nabble.com>

Lukasz Komsta wrote
> The closest solution is
> 
> +proj=eqdc +lat_1=52 +lat_2=52 +lat_0=52 +lon_0=19 +axis=esu +a=6390000
> +b=6390000 +ellps=sphere +x_0=330000 +y_0=-350000

Lukasz, if you are trying to transform from this projection to wgs84 or GPS,
you will need to add a +towgs84 or +nadgrids component. I think developing a
nadgrids gridshift file to accompany this would be the best solution, since
that could give the greatest accuracy since it can take account of the
apparent distortions in the original grid (as one of your links indicated),
as well as accommodate the main ellipsoidal latitude and longitude shifts
from your sphere to wgs84.

Steve 


Lukasz Komsta wrote
> Dear All,
> 
> In late 1970s, Institute of Botany of Jagiellonian University in Krakow
> (Poland) developed a geobotanical grid. This grid has interesting history,
> because the details of projection were never officially published. After
> my reverse engineering followed by further numerical investigation by my
> colleague it was revealed that this grid is based on something which is
> called in mapproj package "central conic projection" with one tangent
> (with quite strange Earth radius, but it is only a detail). The projection
> is from Earth center, not parallel nor stereographic.
> 
> I implemented this grid in various languages and the detailed info is
> here: https://atpol.sourceforge.io/.
> 
> The creators of original grid officially confirmed that this projection is
> same with their original idea and this caused rising of interest in usage.
> 
> However, there is no possibility to set this projection in PROJ4 (as far
> as i know), which results in incompatibility of many GIS systems with this
> botanical grid.
> 
> The closest solution is
> 
> +proj=eqdc +lat_1=52 +lat_2=52 +lat_0=52 +lon_0=19 +axis=esu +a=6390000
> +b=6390000 +ellps=sphere +x_0=330000 +y_0=-350000
> 
> ...but this results in quite significant inaccuracy, as EQDC is not
> gnomonic (central) projection.
> 
> So, my questions are:
> 
> 1. Is there a possibility to achieve desired projection using PROJ4 ?
> 2. If not, are there any possibility to implement such a functionality in
> the future to allow GIS users using this grid?
> 
> Thank you very much in advance
> 
> Lukasz Komsta
> 
> _______________________________________________
> Proj mailing list

> Proj at .maptools

> http://lists.maptools.org/mailman/listinfo/proj





--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html


From kreve at sdfe.dk  Thu Nov  9 06:13:39 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 9 Nov 2017 14:13:39 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <1510230206829-0.post@n6.nabble.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<1510230206829-0.post@n6.nabble.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEABE9A1@S000014.PROD.SITAD.DK>

I agree, that is something we should handle better after the next release.

Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Roger Bivand
Sendt: 9. november 2017 13:23
Til: proj at lists.maptools.org
Emne: Re: [Proj] Time for a new release?

Could I please ask that the version in master be set to a value sorting after
the current release? It doesn't have to be the actual value, but for
downstream testing, it would be really convenient not to see the same value
as the current release.

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From gdt at lexort.com  Thu Nov  9 06:26:21 2017
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 09 Nov 2017 09:26:21 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABE9A1@S000014.PROD.SITAD.DK>
	(Kristian Evers's message of "Thu, 9 Nov 2017 14:13:39 +0000")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<1510230206829-0.post@n6.nabble.com>
	<2E885BB293AF0448A0181138489E9A0EAEABE9A1@S000014.PROD.SITAD.DK>
Message-ID: <smuy3nfr0j6.fsf@linuxpal.mit.edu>


Kristian Evers <kreve at sdfe.dk> writes:

-----Oprindelig meddelelse-----
> Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Roger Bivand
> Sendt: 9. november 2017 13:23
> Til: proj at lists.maptools.org
> Emne: Re: [Proj] Time for a new release?
>
> Could I please ask that the version in master be set to a value sorting after
> the current release? It doesn't have to be the actual value, but for
> downstream testing, it would be really convenient not to see the same value
> as the current release.

> I agree, that is something we should handle better after the next release.
>
> Kristian

I think the point is to change master now, so that packages built from
master will sort properly.

Currently we have 4.9.3.   Presumably the release is going to be 4.10 or
5.0 (absent anything drastic, 4.10 seems obviously right).

So, master can be changed right now to 4.9.80, following an ancient
scheme, which is understood to be an alpha of the next real release
after 4.9.  It sorts before 4.10, and after 4.9.3 (and is obviously not
4.9.4).

Part of a release cycle is packagers preparing a package from a tarball
created from master, building that package, and testing it.  It's that
process that is almost certainly driving Roger's request.

The other thing that really helps is for the release tarball creation
process to be scripted and repeatable, with no manual steps, so that
packagers can create them for testing, and be sure that the actual
release will be identical (modulo intentionally changed content).

Greg (who looks after proj in pkgsrc)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171109/5ae10d32/attachment.sig>

From gdt at lexort.com  Thu Nov  9 06:30:55 2017
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 09 Nov 2017 09:30:55 -0500
Subject: [Proj] ABI version numbers
In-Reply-To: <ab37f0ff-9f7a-90d2-c56f-935e28f5ffe0@xs4all.nl> (Sebastiaan
	Couwenberg's message of "Sat, 28 Oct 2017 00:15:10 +0200")
References: <CANkOqwMjR0_eViv8awBV+41S6vFXLCqBun6Pye2E8pm+AvwAzA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAA17D7@S000014.PROD.SITAD.DK>
	<CANkOqwOLOVwtGHOzGWyr=dOc1iaE_V7PBV0uT1d5Z=4oRTi44Q@mail.gmail.com>
	<ab37f0ff-9f7a-90d2-c56f-935e28f5ffe0@xs4all.nl>
Message-ID: <smutvy3r0bk.fsf@linuxpal.mit.edu>


Sebastiaan Couwenberg <sebastic at xs4all.nl> writes:

> On 10/27/2017 12:37 PM, Roger Oberholtzer wrote:
>> On Fri, Oct 27, 2017 at 12:05 PM, Kristian Evers <kreve at sdfe.dk> wrote:
>>> Not that I am aware of. There is this https://github.com/OSGeo/proj.4/issues/501 though, which gives you some idea of how the binaries how changed over time.
>>>
>>> If you volunteer to create an overview of the ABI versions I am sure we can find somewhere in the docs to put it :-)
>> 
>> The reason I ask is that openSUSE use these numbers when naming the
>> package. The numbers do come from the build:
>> 
>> 4.8.0 -> libproj.so.0.7.0
>> 4.9.2 -> libproj.so.9.1.0
>> 4.9.3 -> libproj.so.12.0.0
>> 
>> And so on. So they name the packages libproj0-4.8.0, libproj9-4.9.2,
>> libproj12-4.9.3.
>> 
>> I accused them of randomly generating the 0, 9 and 12. They said - no
>> - it comes from the library itself. Which it indeed does seem to do.
>> So I thought I would see if this is recorded somewhere.
>
> The SOVERSION is calculated using the libtool -version-info arguments.
>
>  https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
>
> The ABI tracker has an overview of the SOVERSION for past releases:
>
>  https://abi-laboratory.pro/tracker/timeline/proj/

Thanks - that's a really useful analysis.

(not directed at Bas of course)

It would also be good if proj avoided changing the solib version if
there isn't an actual ABI change, and tried to avoid ABI changes unless
really necessary.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171109/b3367692/attachment.sig>

From howard at hobu.co  Thu Nov  9 06:51:19 2017
From: howard at hobu.co (Howard Butler)
Date: Thu, 9 Nov 2017 08:51:19 -0600
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
Message-ID: <CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>

On Thu, Nov 9, 2017 at 4:38 AM, Kristian Evers <kreve at sdfe.dk> wrote:
> All,
>
>
>
> I think the current development cycle is coming to an end and a new release
> should be made. It’s been more than a year since that least release of
> PROJ.4. In that period of time the library has improved significantly, most
> notably by the introduction of a new and more consistent API, transformation
> pipelines and the cct 4D transformation CLI utility. The new additions have
> already seen a fair amount of testing and are now at a point where I believe
> they are stable enough to be released to the public. I would like to propose
> that we release the next version of PROJ.4 on December 15. This gives
> roughly a month to take care of the last few kinks that need to be ironed
> out. It also gives users of the library amble time to test the developing
> version in the setups and report any issues that have appeared since the
> last release. With a release mid-december we should aim for a release
> candidate in the start of December.
>
>
>
> I hope we all agree that the time has come to get a new release out there.
> Please voice your opinions on this matter.
>
>
>
> Howard, I guess you will be doing some/most of the heavy lifting with
> preparing the actual release, so please feel free to propose another time if
> this doesn’t fit your schedule.

I agree we need a release, but I think the window is too short and we
need a release candidate loop in there too. Let's have RC1 happen
December 15th, with the expectation that it would go final in January
or February as everyone catches up to testing it.

While we're on the topic, I must say the amount of work you and Thomas
have put into the library is incredible. The OSS Fuzz stuff along with
all of your other refactoring effort is going to give proj another
generation or two of life :)

When I was pushing back on the naming incrementing earlier, I hadn't
realized how much of an overhaul would take place. We're clearly in
"new major version" territory here, and I agree the effort deserves to
be called PROJ 5.0.0. This will also help with marketing the new
features as something distinct. It will give the laggards opportunity
to stick with their old version too.

If we were to do so, it would bring up some small issues:

* Rebranding in general (the website -> proj5.org, package names, etc)
* Backporting of OSS Fuzz issues to 4.9/4.10

Howard


From howard at hobu.co  Thu Nov  9 07:37:56 2017
From: howard at hobu.co (Howard Butler)
Date: Thu, 9 Nov 2017 09:37:56 -0600
Subject: [Proj] ABI version numbers
In-Reply-To: <smutvy3r0bk.fsf@linuxpal.mit.edu>
References: <CANkOqwMjR0_eViv8awBV+41S6vFXLCqBun6Pye2E8pm+AvwAzA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAA17D7@S000014.PROD.SITAD.DK>
	<CANkOqwOLOVwtGHOzGWyr=dOc1iaE_V7PBV0uT1d5Z=4oRTi44Q@mail.gmail.com>
	<ab37f0ff-9f7a-90d2-c56f-935e28f5ffe0@xs4all.nl>
	<smutvy3r0bk.fsf@linuxpal.mit.edu>
Message-ID: <CAKyBbG7a6_bCAOyBDJTTVrxarfF0HatAJCBn-P2Su=7TCAU4Qw@mail.gmail.com>

On Thu, Nov 9, 2017 at 8:30 AM, Greg Troxel <gdt at lexort.com> wrote:

> It would also be good if proj avoided changing the solib version if
> there isn't an actual ABI change, and tried to avoid ABI changes unless
> really necessary.

Is there a way to compute that pre-release? The safe thing is to just
++ it, of course.


From gdt at lexort.com  Thu Nov  9 14:22:38 2017
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 09 Nov 2017 17:22:38 -0500
Subject: [Proj] ABI version numbers
In-Reply-To: <CAKyBbG7a6_bCAOyBDJTTVrxarfF0HatAJCBn-P2Su=7TCAU4Qw@mail.gmail.com>
	(Howard Butler's message of "Thu, 9 Nov 2017 09:37:56 -0600")
References: <CANkOqwMjR0_eViv8awBV+41S6vFXLCqBun6Pye2E8pm+AvwAzA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAA17D7@S000014.PROD.SITAD.DK>
	<CANkOqwOLOVwtGHOzGWyr=dOc1iaE_V7PBV0uT1d5Z=4oRTi44Q@mail.gmail.com>
	<ab37f0ff-9f7a-90d2-c56f-935e28f5ffe0@xs4all.nl>
	<smutvy3r0bk.fsf@linuxpal.mit.edu>
	<CAKyBbG7a6_bCAOyBDJTTVrxarfF0HatAJCBn-P2Su=7TCAU4Qw@mail.gmail.com>
Message-ID: <smuzi7vozwx.fsf@linuxpal.mit.edu>


Howard Butler <howard at hobu.co> writes:

> On Thu, Nov 9, 2017 at 8:30 AM, Greg Troxel <gdt at lexort.com> wrote:
>
>> It would also be good if proj avoided changing the solib version if
>> there isn't an actual ABI change, and tried to avoid ABI changes unless
>> really necessary.
>
> Is there a way to compute that pre-release? The safe thing is to just
> ++ it, of course.

It requires paying attention.  Really anything that is an ABI change
should be clearly described in commit messages, those should be
reviewed/discussed before they are committed/merged, and the review
prcoess should in general ask if an ABI change lurks in the
commit/branch.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171109/d8bd2859/attachment.sig>

From support at mnspoint.com  Thu Nov  9 23:44:35 2017
From: support at mnspoint.com (support at mnspoint.com)
Date: Fri, 10 Nov 2017 09:44:35 +0200
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
Message-ID: <84a0e7ebe385a075b1d8413d38bc3ef5@mnspoint.com>

Hello, 

it seems to be very hard to understand that end users do not want to
have updates or releases that have nothing new to give! It just adds
work to them! 

So, if there is nothing new in the library don't make any releases or
updates! .. and if there would be some minor changes ... do not make a
release unless many minor updates are gathered together! 

Some applications like flash players, browsers, etc., make all the time
updates that just keep the users getting more and more frustrated and
angry! The usage of brain seems to be forbidden nowadays among young
programmers .. or is the quality getting worse and worse?! 

Janne. 

--------------------------------------------- 

Kristian Evers kirjoitti 2017-11-09 12:38:

> All, 
> 
> I think the current development cycle is coming to an end and a new release should be made. It's been more than a year since that least release of PROJ.4. In that period of time the library has improved significantly, most notably by the introduction of a new and more consistent API, transformation pipelines and the cct 4D transformation CLI utility. The new additions have already seen a fair amount of testing and are now at a point where I believe they are stable enough to be released to the public. I WOULD LIKE TO PROPOSE THAT WE RELEASE THE NEXT VERSION OF PROJ.4 ON DECEMBER 15. This gives roughly a month to take care of the last few kinks that need to be ironed out. It also gives users of the library amble time to test the developing version in the setups and report any issues that have appeared since the last release. With a release mid-december we should aim for a release candidate in the start of December. 
> 
> I hope we all agree that the time has come to get a new release out there. Please voice your opinions on this matter. 
> 
> Howard, I guess you will be doing some/most of the heavy lifting with preparing the actual release, so please feel free to propose another time if this doesn't fit your schedule. 
> 
> /Kristian 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

-- 
MNS Support
NNS Master Navigator Software
Copyright (c) Sapper Oy
www.mnspoint.com [1]
support at mnspoint.com 

Links:
------
[1] http://www.mnspoint.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/9046b987/attachment.html>

From even.rouault at spatialys.com  Fri Nov 10 05:37:26 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Nov 2017 14:37:26 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <84a0e7ebe385a075b1d8413d38bc3ef5@mnspoint.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<84a0e7ebe385a075b1d8413d38bc3ef5@mnspoint.com>
Message-ID: <7443876.Vn5hkNYuJj@even-i700>

Janne,

Please stop your uninformed ranting. If you had followed, even by a tiny bit, the activity of 
the project over the last year, you'd have seen that a ton of great work has been done.

We have repeated  for years that if you don't want new developements or bug fixes, stay 
with old versions. Or make your own fork: you're apparently much smarter and have more 
wisdom than the rest of us, poor brain-less folks.

But worse, you are,- and unfortunately this is not the first time -, publicly insulting qualified 
developers and scientists that are Kristian Evers and Thomas Knudsen. This is not acceptable, 
and we don't want to see this happening again.

Proj.4 as part of the MetaCRS initiative of OSGeo is subject to
http://www.osgeo.org/code_of_conduct

Read it carefully, and apply it. Thanks

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/972d2a5b/attachment.html>

From kreve at sdfe.dk  Fri Nov 10 05:42:35 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 10 Nov 2017 13:42:35 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>

RC1 December 15 is fine with me. Feature freeze between RC1 and final release?

Regarding re-branding I agree that we have to something. I still stand by my proposal a few months ago, but ultimately it's not a huge deal exactly how we do it. As long as it is clear to everyone that a major update is coming. Howard, are you proposing we change the name of the project to PROJ.5?

/Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Howard Butler
Sendt: 9. november 2017 15:51
Til: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: Re: [Proj] Time for a new release?

On Thu, Nov 9, 2017 at 4:38 AM, Kristian Evers <kreve at sdfe.dk> wrote:
> All,
>
>
>
> I think the current development cycle is coming to an end and a new release
> should be made. It’s been more than a year since that least release of
> PROJ.4. In that period of time the library has improved significantly, most
> notably by the introduction of a new and more consistent API, transformation
> pipelines and the cct 4D transformation CLI utility. The new additions have
> already seen a fair amount of testing and are now at a point where I believe
> they are stable enough to be released to the public. I would like to propose
> that we release the next version of PROJ.4 on December 15. This gives
> roughly a month to take care of the last few kinks that need to be ironed
> out. It also gives users of the library amble time to test the developing
> version in the setups and report any issues that have appeared since the
> last release. With a release mid-december we should aim for a release
> candidate in the start of December.
>
>
>
> I hope we all agree that the time has come to get a new release out there.
> Please voice your opinions on this matter.
>
>
>
> Howard, I guess you will be doing some/most of the heavy lifting with
> preparing the actual release, so please feel free to propose another time if
> this doesn’t fit your schedule.

I agree we need a release, but I think the window is too short and we
need a release candidate loop in there too. Let's have RC1 happen
December 15th, with the expectation that it would go final in January
or February as everyone catches up to testing it.

While we're on the topic, I must say the amount of work you and Thomas
have put into the library is incredible. The OSS Fuzz stuff along with
all of your other refactoring effort is going to give proj another
generation or two of life :)

When I was pushing back on the naming incrementing earlier, I hadn't
realized how much of an overhaul would take place. We're clearly in
"new major version" territory here, and I agree the effort deserves to
be called PROJ 5.0.0. This will also help with marketing the new
features as something distinct. It will give the laggards opportunity
to stick with their old version too.

If we were to do so, it would bring up some small issues:

* Rebranding in general (the website -> proj5.org, package names, etc)
* Backporting of OSS Fuzz issues to 4.9/4.10

Howard
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Fri Nov 10 05:57:42 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Nov 2017 14:57:42 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
Message-ID: <16973784.i299tmmjYi@even-i700>

On vendredi 10 novembre 2017 13:42:35 CET Kristian Evers wrote:
> RC1 December 15 is fine with me. Feature freeze between RC1 and final
> release?

Kristian,

Just from a terminology point of view, I'd say that a RC should be something 
that is thought to be in a releasable state, so with frozen interfaces and feature 
complete. Just bugfixes should normally go after the RC stage. Otherwise this 
is more a beta.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/ee518fd0/attachment.html>

From sp8qed at onet.eu  Fri Nov 10 06:07:51 2017
From: sp8qed at onet.eu (Lukasz Komsta)
Date: Fri, 10 Nov 2017 15:07:51 +0100
Subject: [Proj] Conic projection, but centric (gnomonic)
In-Reply-To: <1510232080756-0.post@n6.nabble.com>
References: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
	<1510232080756-0.post@n6.nabble.com>
Message-ID: <5c334863-9538-96d0-26cc-39553a9b53f0@onet.eu>

Dear Steve,

> Lukasz, if you are trying to transform from this projection to wgs84 or GPS,
> you will need to add a +towgs84 or +nadgrids component. I think developing a
> nadgrids gridshift file to accompany this would be the best solution, since

Thank you, in my version of cs2cs (and also online calculators), adding
towgs84 would change the result (but increasing error), whereas adding
nadgrids does not change anything at all (it seems that ellps=sphere
forces this behavior).

With regards,

Lukasz



From sp8qed at onet.eu  Fri Nov 10 06:08:29 2017
From: sp8qed at onet.eu (Lukasz Komsta)
Date: Fri, 10 Nov 2017 15:08:29 +0100
Subject: [Proj] Conic projection, but centric (gnomonic)
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABB691@S000014.PROD.SITAD.DK>
References: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
	<2E885BB293AF0448A0181138489E9A0EAEABB691@S000014.PROD.SITAD.DK>
Message-ID: <23d83260-803a-b0e4-1fe0-a2ea0fa76c52@onet.eu>

W dniu 2017-11-08 o 15:17, Kristian Evers pisze:

Hi Kristian

>> 1. Is there a possibility to achieve desired projection using PROJ4 ?
> 
> You can probably answer this better than anyone else, and it would seem you have concluded that it can't.

To be honest, my experience with PROJ4 and GIS is only basic. I have
browsed all documented projections and did not find such one, but I
asked here to be sure because maybe there is some hack in style "setting
projection xx with parameters yy will give the same results" and so on.

>> 2. If not, are there any possibility to implement such a functionality in the future to allow GIS users using this grid?
> 
> You are welcome to submit a pull request on GitHub [0] with the necessary code additions and documentation. If you need help getting started please let us know.

Thank you, I will look at it and start to work.

With best regards

Lukasz



From huwejames at gmail.com  Fri Nov 10 06:23:34 2017
From: huwejames at gmail.com (Huw James)
Date: Fri, 10 Nov 2017 08:23:34 -0600
Subject: [Proj] Time for a new release?
In-Reply-To: <7443876.Vn5hkNYuJj@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<84a0e7ebe385a075b1d8413d38bc3ef5@mnspoint.com>
	<7443876.Vn5hkNYuJj@even-i700>
Message-ID: <CAMMNKS70WwPrUpntg1T1MBx7Rs9Ko5Mc10=G8ZdQAcs92ce-qg@mail.gmail.com>

Dear all,
I'd like to publicly thank Kristian, Thomas, Even and all others that have
contributed to keeping PROJ.4 alive and well maintained.
Sometimes there are questions from very inexperienced users and sometimes
by users who do not understand datums and projections very well. Such
questions have been answered with great kindness and patience which is also
to be admired.

Let's all of us remain kind and patient please.

Thank you all again. You're performing at a very standard in every way.

Huw James

On Fri, Nov 10, 2017 at 7:37 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Janne,
>
>
>
> Please stop your uninformed ranting. If you had followed, even by a tiny
> bit, the activity of the project over the last year, you'd have seen that a
> ton of great work has been done.
>
>
>
> We have repeated for years that if you don't want new developements or bug
> fixes, stay with old versions. Or make your own fork: you're apparently
> much smarter and have more wisdom than the rest of us, poor brain-less
> folks.
>
>
>
> But worse, you are,- and unfortunately this is not the first time -,
> publicly insulting qualified developers and scientists that are Kristian
> Evers and Thomas Knudsen. This is not acceptable, and we don't want to see
> this happening again.
>
>
>
> Proj.4 as part of the MetaCRS initiative of OSGeo is subject to
>
> http://www.osgeo.org/code_of_conduct
>
>
>
> Read it carefully, and apply it. Thanks
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/9ce7feaf/attachment.html>

From roger.oberholtzer at gmail.com  Fri Nov 10 06:38:57 2017
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Fri, 10 Nov 2017 15:38:57 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
Message-ID: <CANkOqwPEOjg3an10jngTk=0O_=y70i=bwqgz3piLCeM=gC4yqg@mail.gmail.com>

On Thu, Nov 9, 2017 at 11:38 AM, Kristian Evers <kreve at sdfe.dk> wrote:

> I think the current development cycle is coming to an end and a new release
> should be made.

Is there a good summary of the changes that have been made? Especially
of the library API?

-- 
Roger Oberholtzer


From howard at hobu.co  Fri Nov 10 06:47:45 2017
From: howard at hobu.co (Howard Butler)
Date: Fri, 10 Nov 2017 08:47:45 -0600
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
Message-ID: <CAKyBbG4Yg0SYkLVM1OiDVxqBqNdUq+SGCo3q9CShvY0HYJNtCg@mail.gmail.com>

On Fri, Nov 10, 2017 at 7:42 AM, Kristian Evers <kreve at sdfe.dk> wrote:
> RC1 December 15 is fine with me. Feature freeze between RC1 and final release?

Feature freeze before RC1. Cut a beta now if you'd like. RC1 should be
intended for packagers to preflight the software through their
packaging systems and identify any significant issues that warrant a
new release.


>  Howard, are you proposing we change the name of the project to PROJ.5?

Let's go for it. I think the project's name is still PROJ, and this
will just be version 5 :)

More seriously, I think any distinction between PROJ.4/Proj.4 and PROJ
is moot at this point, and my objections to incrementing the major
version don't have much meaning. The geodetic support in the upcoming
PROJ.5 release will be quite compelling. We need a way to easily
market that as something new with the added forgiveness that a new
version number might cause users to afford us. It will also allow
people to stick with 4.x easily if they need to for whatever reason.

Also, congratulations again on the effort.

Howard


From gdt at lexort.com  Fri Nov 10 06:48:56 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 10 Nov 2017 09:48:56 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	(Kristian Evers's message of "Fri, 10 Nov 2017 13:42:35 +0000")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
Message-ID: <smutvy2jijr.fsf@linuxpal.mit.edu>


Kristian Evers <kreve at sdfe.dk> writes:

> RC1 December 15 is fine with me. Feature freeze between RC1 and final
> release?

As a packager: of course.  Once you call something RC, it implies that
you only make changes which are fixing bugs that are regressions since
the last actual release.  So that's even stronger than feature freeze.

Some projects make lots of changes just before a release.  This leads to
problems on systems other than where the primary developers test.  So I
also think that any non-trivial change should lead to a new RC and
another week at least of waiting.

> Regarding re-branding I agree that we have to something. I still stand
> by my proposal a few months ago, but ultimately it's not a huge deal
> exactly how we do it. As long as it is clear to everyone that a major
> update is coming. Howard, are you proposing we change the name of the
> project to PROJ.5?

To me this is just churn, and makes people have to update all sorts of
things for no reason.  I prefer leaving the project name as is, and just
using  version numbers as apropriate.   I see nothing wrong with PROJ.4
version 5.0.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/d46f3624/attachment.sig>

From knudsen.thomas at gmail.com  Fri Nov 10 07:02:19 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 10 Nov 2017 16:02:19 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <CANkOqwPEOjg3an10jngTk=0O_=y70i=bwqgz3piLCeM=gC4yqg@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CANkOqwPEOjg3an10jngTk=0O_=y70i=bwqgz3piLCeM=gC4yqg@mail.gmail.com>
Message-ID: <CAH0YoENyg1g5nYYRnekx6nrTkjebd3TYcLFC=Jv9V22kxToCxg@mail.gmail.com>

Not exactly a summary, but Kristian is doing a huge effort to update docs.
He has a preview version over at https://kbevers.github.io/index.html.

You could probably profitably start at
https://kbevers.github.io/usage/transformation.html

There are some remarks about the thoughts behind the new API in the first
lines of the new header file, proj.h - find it over at
https://github.com/OSGeo/proj.4/blob/master/src/proj.h

Also, see the comments at the beginning of each function in proj_4D_api.c -
https://github.com/OSGeo/proj.4/blob/master/src/proj_4D_api.c.

We have a lot of material around, that needs to be brushed up and fit
together, but since the code has been in a state of flux, and the activity
level high, it has been next to pointless to try to document in detail.

2017-11-10 15:38 GMT+01:00 Roger Oberholtzer <roger.oberholtzer at gmail.com>:

> On Thu, Nov 9, 2017 at 11:38 AM, Kristian Evers <kreve at sdfe.dk> wrote:
>
> > I think the current development cycle is coming to an end and a new
> release
> > should be made.
>
> Is there a good summary of the changes that have been made? Especially
> of the library API?
>
> --
> Roger Oberholtzer
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/c8333cf3/attachment.html>

From andre+joost at nurfuerspam.de  Fri Nov 10 07:12:30 2017
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Fri, 10 Nov 2017 16:12:30 +0100
Subject: [Proj] Conic projection, but centric (gnomonic)
In-Reply-To: <5c334863-9538-96d0-26cc-39553a9b53f0@onet.eu>
References: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>	<1510232080756-0.post@n6.nabble.com>
	<5c334863-9538-96d0-26cc-39553a9b53f0@onet.eu>
Message-ID: <ou4foa$ren$1@blaine.gmane.org>

Am 10.11.2017 um 15:07 schrieb Lukasz Komsta:
> Dear Steve,
>
>> Lukasz, if you are trying to transform from this projection to wgs84 or GPS,
>> you will need to add a +towgs84 or +nadgrids component. I think developing a
>> nadgrids gridshift file to accompany this would be the best solution, since
>
> Thank you, in my version of cs2cs (and also online calculators), adding
> towgs84 would change the result (but increasing error), whereas adding
> nadgrids does not change anything at all (it seems that ellps=sphere
> forces this behavior).
>

+nadgrids expects a gridf shift file which you have to create on your 
own. It shifts the unprojected coordinates (i.e. degrees), regardless of 
the projection. I doubt this is of any use for you.

HTH,
André Joost




From gdt at lexort.com  Fri Nov 10 07:19:18 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 10 Nov 2017 10:19:18 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <CANkOqwPEOjg3an10jngTk=0O_=y70i=bwqgz3piLCeM=gC4yqg@mail.gmail.com>
	(Roger Oberholtzer's message of "Fri, 10 Nov 2017 15:38:57 +0100")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CANkOqwPEOjg3an10jngTk=0O_=y70i=bwqgz3piLCeM=gC4yqg@mail.gmail.com>
Message-ID: <smufu9mjh55.fsf@linuxpal.mit.edu>


Roger Oberholtzer <roger.oberholtzer at gmail.com> writes:

> On Thu, Nov 9, 2017 at 11:38 AM, Kristian Evers <kreve at sdfe.dk> wrote:
>
>> I think the current development cycle is coming to an end and a new release
>> should be made.
>
> Is there a good summary of the changes that have been made? Especially
> of the library API?

In general, a package should have a NEWS files that has a summary of
changes that users of the package should know, but omits bug fixes and
internal cleanups.  pkgsrc requires such a summary in update commit
messages, more or less what belongs in the GNU tradition NEWS file.

proj already has such a file, so it would be great to update that on
master for what will be the new release.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/d6083015/attachment.sig>

From howard at hobu.co  Fri Nov 10 07:51:53 2017
From: howard at hobu.co (Howard Butler)
Date: Fri, 10 Nov 2017 09:51:53 -0600
Subject: [Proj] Time for a new release?
In-Reply-To: <smutvy2jijr.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
Message-ID: <CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>

On Fri, Nov 10, 2017 at 8:48 AM, Greg Troxel <gdt at lexort.com> wrote:

> To me this is just churn, and makes people have to update all sorts of
> things for no reason.  I prefer leaving the project name as is, and just
> using  version numbers as apropriate.   I see nothing wrong with PROJ.4
> version 5.0.

I'm interested to hear other opinions, although I suppose version
numbering is the ultimate bike shedding exercise. I agree it's going
to cause churn, and that churn was my primary objection to
incrementing the name in the first place. That said, it seems
dissonant to me to call it PROJ.4 v 5.0.0.

Here are some facts about the next upcoming PROJ.5 release:

* A number of serious and sometimes silly warnings, overflows, and
bugs were found and fixed due to participation in the Google OSS Fuzz
project https://github.com/google/oss-fuzz
* Generalized geodetic transforms
* A "modern" API is now available (3rd attempt to create one over the
history of the project, I think?) to take advantage of the transforms,
streamline usage, and provide more safety
* Significant command line tool improvements

Kristian and Thomas' recent efforts are the first sustained
development activity that PROJ has had since Frank spent a bunch of
time in the codebase in the early 2000s. We should expect there will
be a few bumps.

Howard


From schwehr at gmail.com  Fri Nov 10 08:24:19 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Fri, 10 Nov 2017 08:24:19 -0800
Subject: [Proj] Time for a new release?
In-Reply-To: <CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
Message-ID: <CACmBxyuJc_3RKepsyzXggZe4bWSKdHExhkJD4gn0W3018E1LUg@mail.gmail.com>

When I'm following point releases (Mac OSX fink), I prefer more frequent
releases and smaller deltas.  That reduces the risks of breakages and gets
fixes in sooner.  With more time between releases (and packager updates),
we tend to get wedged for long periods of time.  I prefer not to see crazy
version jump.  I prefer to see traditional API change based version bumps,
but that's really hard to do as what is a break change can be surprising.

For most of my work, I've given up on point releases completely and am
going with patch by patch.  I do have to combine a few patches sometimes to
get to the next stable point, but it's super easy to do.  That means I can
usually isolate a behavior change down to the smallest bit of code and work
on handling that with my users.  And if there is a patch a user can't cope
with, I can (usually) hold just that change back for a while and keep
applying other patches for a while.

I'm still working to catch up to head, but the switch has already been
paying off massively.   I have a bunch of bugs that I haven't reported yet
as I'm sure a large fraction of them were caught by OSS Fuzz and already
fixed in Proj.4.

I've done the same for GEOS and GDAL.  Working patch by greatly reduced the
stress involved in updating.  It's a lot easier to catch and manage
behavior changes that impact my users.

You can see some of my biases in this talk by Titus... "C++ as a "Live at
Head" Language" https://youtu.be/tISy7EJQPzI



On Fri, Nov 10, 2017 at 7:51 AM, Howard Butler <howard at hobu.co> wrote:

> On Fri, Nov 10, 2017 at 8:48 AM, Greg Troxel <gdt at lexort.com> wrote:
>
> > To me this is just churn, and makes people have to update all sorts of
> > things for no reason.  I prefer leaving the project name as is, and just
> > using  version numbers as apropriate.   I see nothing wrong with PROJ.4
> > version 5.0.
>
> I'm interested to hear other opinions, although I suppose version
> numbering is the ultimate bike shedding exercise. I agree it's going
> to cause churn, and that churn was my primary objection to
> incrementing the name in the first place. That said, it seems
> dissonant to me to call it PROJ.4 v 5.0.0.
>
> Here are some facts about the next upcoming PROJ.5 release:
>
> * A number of serious and sometimes silly warnings, overflows, and
> bugs were found and fixed due to participation in the Google OSS Fuzz
> project https://github.com/google/oss-fuzz
> * Generalized geodetic transforms
> * A "modern" API is now available (3rd attempt to create one over the
> history of the project, I think?) to take advantage of the transforms,
> streamline usage, and provide more safety
> * Significant command line tool improvements
>
> Kristian and Thomas' recent efforts are the first sustained
> development activity that PROJ has had since Frank spent a bunch of
> time in the codebase in the early 2000s. We should expect there will
> be a few bumps.
>
> Howard
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/5e26dbf6/attachment.html>

From charles.karney at sri.com  Fri Nov 10 10:24:16 2017
From: charles.karney at sri.com (Charles Karney)
Date: Fri, 10 Nov 2017 13:24:16 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
Message-ID: <83a83353-71cd-acff-c01e-9d765437e321@sri.com>

Yes and no on "PROJ.4 v 5.0.0".  I agree that it sounds contradictory.
However the name PROJ.4 is firmly baked into many places; e.g., PROJ4 is
the Cmake package name.  So I vote for "PROJ.4 v 5.0.0" since it signals
a major change and yet won't needless causes other things to break.

   --Charles

On 11/10/17 10:51, Howard Butler wrote:
> I'm interested to hear other opinions, although I suppose version
> numbering is the ultimate bike shedding exercise. I agree it's going
> to cause churn, and that churn was my primary objection to
> incrementing the name in the first place. That said, it seems
> dissonant to me to call it PROJ.4 v 5.0.0.


From sebastic at xs4all.nl  Fri Nov 10 10:26:37 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 10 Nov 2017 19:26:37 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
Message-ID: <cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>

On 11/10/2017 04:51 PM, Howard Butler wrote:
> On Fri, Nov 10, 2017 at 8:48 AM, Greg Troxel <gdt at lexort.com> wrote:
> 
>> To me this is just churn, and makes people have to update all sorts of
>> things for no reason.  I prefer leaving the project name as is, and just
>> using  version numbers as apropriate.   I see nothing wrong with PROJ.4
>> version 5.0.
> 
> I'm interested to hear other opinions, although I suppose version
> numbering is the ultimate bike shedding exercise. I agree it's going
> to cause churn, and that churn was my primary objection to
> incrementing the name in the first place. That said, it seems
> dissonant to me to call it PROJ.4 v 5.0.0.

The new release is and major version bump is a good opportunity to
de-emphasize the "4" that crept into the naming. The project in Trac is
just called "proj", as is its package name in Debian, the name of this
mailinglist, etc.

Having the next release be PROJ v.5.0.0 is fine with me. Renaming a
bunch of stuff to PROJ.5 doesn't seem like the best option to me.
Removing the major version from the project name seems the like the
better option. Let the version number be just that again, instead of
part of the project name.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From neteler at osgeo.org  Fri Nov 10 10:47:24 2017
From: neteler at osgeo.org (Markus Neteler)
Date: Fri, 10 Nov 2017 19:47:24 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
Message-ID: <CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>

On Nov 10, 2017 7:29 PM, "Sebastiaan Couwenberg" <sebastic at xs4all.nl> wrote:
...
> The new release is and major version bump is a good opportunity to
> de-emphasize the "4" that crept into the naming. The project in Trac is
> just called "proj", as is its package name in Debian, the name of this
> mailinglist, etc.

Yes, this upcoming release is a good occasion to de-emphasize the "4".

> Having the next release be PROJ v.5.0.0 is fine with me.

Yes, like this the name will be separated from the version number and
future-ready.

My few cents,
Markus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/106773bb/attachment.html>

From nhv at meganet.net  Fri Nov 10 10:53:22 2017
From: nhv at meganet.net (Norman Vine)
Date: Fri, 10 Nov 2017 13:53:22 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
Message-ID: <17BBD26A-F051-445B-B037-166F4743102F@meganet.net>


> On Nov 10, 2017, at 1:47 PM, Markus Neteler <neteler at osgeo.org> wrote:
> 
> On Nov 10, 2017 7:29 PM, "Sebastiaan Couwenberg" <sebastic at xs4all.nl> wrote:
> ...
> > The new release is and major version bump is a good opportunity to
> > de-emphasize the "4" that crept into the naming. The project in Trac is
> > just called "proj", as is its package name in Debian, the name of this
> > mailinglist, etc.
> 
> Yes, this upcoming release is a good occasion to de-emphasize the "4".
> 
> > Having the next release be PROJ v.5.0.0 is fine with me.
> 
> Yes, like this the name will be separated from the version number and future-ready.

+1

From jmfluis at gmail.com  Fri Nov 10 11:03:40 2017
From: jmfluis at gmail.com (Joaquim Luis)
Date: Fri, 10 Nov 2017 19:03:40 -0000
Subject: [Proj] Time for a new release?
In-Reply-To: <83a83353-71cd-acff-c01e-9d765437e321@sri.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<83a83353-71cd-acff-c01e-9d765437e321@sri.com>
Message-ID: <op.y9h4kee4q5usb8@macmarilu>

On Fri, 10 Nov 2017 18:24:16 -0000, Charles Karney  
<charles.karney at sri.com> wrote:

> Yes and no on "PROJ.4 v 5.0.0".  I agree that it sounds contradictory.
> However the name PROJ.4 is firmly baked into many places; e.g., PROJ4 is
> the Cmake package name.  So I vote for "PROJ.4 v 5.0.0" since it signals
> a major change and yet won't needless causes other things to break.

Fully agree.

Joaquim


>
>    --Charles
>
> On 11/10/17 10:51, Howard Butler wrote:
>> I'm interested to hear other opinions, although I suppose version
>> numbering is the ultimate bike shedding exercise. I agree it's going
>> to cause churn, and that churn was my primary objection to
>> incrementing the name in the first place. That said, it seems
>> dissonant to me to call it PROJ.4 v 5.0.0.
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From howard at hobu.co  Fri Nov 10 11:06:54 2017
From: howard at hobu.co (Howard Butler)
Date: Fri, 10 Nov 2017 13:06:54 -0600
Subject: [Proj] Time for a new release?
In-Reply-To: <17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
Message-ID: <CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>

On Fri, Nov 10, 2017 at 12:53 PM, Norman Vine <nhv at meganet.net> wrote:

>> Yes, this upcoming release is a good occasion to de-emphasize the "4".
>>
>> > Having the next release be PROJ v.5.0.0 is fine with me.
>>
>> Yes, like this the name will be separated from the version number and future-ready.
>
> +1

This is enough consensus to satisfy me.

PROJ v5.0.0 it is!

Howard


From gdt at lexort.com  Fri Nov 10 13:24:04 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 10 Nov 2017 16:24:04 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	(Howard Butler's message of "Fri, 10 Nov 2017 13:06:54 -0600")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
Message-ID: <smu4lq1j097.fsf@linuxpal.mit.edu>


Howard Butler <howard at hobu.co> writes:

> On Fri, Nov 10, 2017 at 12:53 PM, Norman Vine <nhv at meganet.net> wrote:
>
>>> Yes, this upcoming release is a good occasion to de-emphasize the "4".
>>>
>>> > Having the next release be PROJ v.5.0.0 is fine with me.
>>>
>>> Yes, like this the name will be separated from the version number and future-ready.
>>
>> +1
>
> This is enough consensus to satisfy me.
>
> PROJ v5.0.0 it is!

Sounds good to me to.

FWIW, the current pkgsrc package is:

  proj-4.9.3

and it installs:

  /usr/pkg/include/org_proj4_PJ.h
  /usr/pkg/include/org_proj4_Projections.h
  /usr/pkg/include/proj_api.h
  /usr/pkg/include/projects.h
  /usr/pkg/lib/libproj.la
  /usr/pkg/lib/libproj.a
  /usr/pkg/lib/libproj.so
  /usr/pkg/lib/libproj.so.12
  /usr/pkg/lib/libproj.so.12.0.0
  /usr/pkg/lib/pkgconfig/proj.pc

so the big thing remaining is whether the include paths that  have 4 in
them are staying, or if all the code that uses it are going to have to
search for two pathnames and have HAVE_ ifdefs  from
autoconf/cmake/whatever.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171110/36afe3c2/attachment.sig>

From kreve at sdfe.dk  Sat Nov 11 09:32:05 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Sat, 11 Nov 2017 17:32:05 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <smu4lq1j097.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>

PROJ v. 5.0.0 is also good with me. It also brings us into "braking changes territory". With this in mind I think we should consider only supporting the new API in proj.h and dropping the other APIs. This will allow us to simplify the code immensely. At the moment we jump through a bunch of hoops to keep backwards compatibility. We'd probably still do that for the next release, but not having projects.h and proj_api.h as part of the public API we can change things behind the scenes in future releases.


Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Greg Troxel
Sendt: 10. november 2017 22:24
Til: Howard Butler <howard at hobu.co>
Cc: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: Re: [Proj] Time for a new release?


Howard Butler <howard at hobu.co> writes:

> On Fri, Nov 10, 2017 at 12:53 PM, Norman Vine <nhv at meganet.net> wrote:
>
>>> Yes, this upcoming release is a good occasion to de-emphasize the "4".
>>>
>>> > Having the next release be PROJ v.5.0.0 is fine with me.
>>>
>>> Yes, like this the name will be separated from the version number and future-ready.
>>
>> +1
>
> This is enough consensus to satisfy me.
>
> PROJ v5.0.0 it is!

Sounds good to me to.

FWIW, the current pkgsrc package is:

  proj-4.9.3

and it installs:

  /usr/pkg/include/org_proj4_PJ.h
  /usr/pkg/include/org_proj4_Projections.h
  /usr/pkg/include/proj_api.h
  /usr/pkg/include/projects.h
  /usr/pkg/lib/libproj.la
  /usr/pkg/lib/libproj.a
  /usr/pkg/lib/libproj.so
  /usr/pkg/lib/libproj.so.12
  /usr/pkg/lib/libproj.so.12.0.0
  /usr/pkg/lib/pkgconfig/proj.pc

so the big thing remaining is whether the include paths that  have 4 in
them are staying, or if all the code that uses it are going to have to
search for two pathnames and have HAVE_ ifdefs  from
autoconf/cmake/whatever.


From schwehr at gmail.com  Sat Nov 11 09:56:27 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sat, 11 Nov 2017 09:56:27 -0800
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
Message-ID: <CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>

Sorry if I am not seeing something that exists.  Is there a document that
explains how to transition from the old APIs to the new?

On Nov 11, 2017 9:34 AM, "Kristian Evers" <kreve at sdfe.dk> wrote:

> PROJ v. 5.0.0 is also good with me. It also brings us into "braking
> changes territory". With this in mind I think we should consider only
> supporting the new API in proj.h and dropping the other APIs. This will
> allow us to simplify the code immensely. At the moment we jump through a
> bunch of hoops to keep backwards compatibility. We'd probably still do that
> for the next release, but not having projects.h and proj_api.h as part of
> the public API we can change things behind the scenes in future releases.
>
>
> Kristian
>
> -----Oprindelig meddelelse-----
> Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.
> maptools.org] På vegne af Greg Troxel
> Sendt: 10. november 2017 22:24
> Til: Howard Butler <howard at hobu.co>
> Cc: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
> Emne: Re: [Proj] Time for a new release?
>
>
> Howard Butler <howard at hobu.co> writes:
>
> > On Fri, Nov 10, 2017 at 12:53 PM, Norman Vine <nhv at meganet.net> wrote:
> >
> >>> Yes, this upcoming release is a good occasion to de-emphasize the "4".
> >>>
> >>> > Having the next release be PROJ v.5.0.0 is fine with me.
> >>>
> >>> Yes, like this the name will be separated from the version number and
> future-ready.
> >>
> >> +1
> >
> > This is enough consensus to satisfy me.
> >
> > PROJ v5.0.0 it is!
>
> Sounds good to me to.
>
> FWIW, the current pkgsrc package is:
>
>   proj-4.9.3
>
> and it installs:
>
>   /usr/pkg/include/org_proj4_PJ.h
>   /usr/pkg/include/org_proj4_Projections.h
>   /usr/pkg/include/proj_api.h
>   /usr/pkg/include/projects.h
>   /usr/pkg/lib/libproj.la
>   /usr/pkg/lib/libproj.a
>   /usr/pkg/lib/libproj.so
>   /usr/pkg/lib/libproj.so.12
>   /usr/pkg/lib/libproj.so.12.0.0
>   /usr/pkg/lib/pkgconfig/proj.pc
>
> so the big thing remaining is whether the include paths that  have 4 in
> them are staying, or if all the code that uses it are going to have to
> search for two pathnames and have HAVE_ ifdefs  from
> autoconf/cmake/whatever.
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171111/22b87365/attachment.html>

From kreve at sdfe.dk  Sat Nov 11 10:04:01 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Sat, 11 Nov 2017 18:04:01 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEAC1558@S000014.PROD.SITAD.DK>

Doesn’t exist yet. I’ve created an issue for it: https://github.com/OSGeo/proj.4/issues/653

/Kristian

Fra: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] På vegne af Kurt Schwehr
Sendt: 11. november 2017 18:56
Til: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: Re: [Proj] Time for a new release?

Sorry if I am not seeing something that exists.  Is there a document that explains how to transition from the old APIs to the new?

On Nov 11, 2017 9:34 AM, "Kristian Evers" <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
PROJ v. 5.0.0 is also good with me. It also brings us into "braking changes territory". With this in mind I think we should consider only supporting the new API in proj.h and dropping the other APIs. This will allow us to simplify the code immensely. At the moment we jump through a bunch of hoops to keep backwards compatibility. We'd probably still do that for the next release, but not having projects.h and proj_api.h as part of the public API we can change things behind the scenes in future releases.


Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org<mailto:proj-bounces at lists.maptools.org> [mailto:proj-bounces at lists.maptools.org<mailto:proj-bounces at lists.maptools.org>] På vegne af Greg Troxel
Sendt: 10. november 2017 22:24
Til: Howard Butler <howard at hobu.co<mailto:howard at hobu.co>>
Cc: PROJ.4 and general Projections Discussions <proj at lists.maptools.org<mailto:proj at lists.maptools.org>>
Emne: Re: [Proj] Time for a new release?


Howard Butler <howard at hobu.co<mailto:howard at hobu.co>> writes:

> On Fri, Nov 10, 2017 at 12:53 PM, Norman Vine <nhv at meganet.net<mailto:nhv at meganet.net>> wrote:
>
>>> Yes, this upcoming release is a good occasion to de-emphasize the "4".
>>>
>>> > Having the next release be PROJ v.5.0.0 is fine with me.
>>>
>>> Yes, like this the name will be separated from the version number and future-ready.
>>
>> +1
>
> This is enough consensus to satisfy me.
>
> PROJ v5.0.0 it is!

Sounds good to me to.

FWIW, the current pkgsrc package is:

  proj-4.9.3

and it installs:

  /usr/pkg/include/org_proj4_PJ.h
  /usr/pkg/include/org_proj4_Projections.h
  /usr/pkg/include/proj_api.h
  /usr/pkg/include/projects.h
  /usr/pkg/lib/libproj.la<http://libproj.la>
  /usr/pkg/lib/libproj.a
  /usr/pkg/lib/libproj.so
  /usr/pkg/lib/libproj.so.12
  /usr/pkg/lib/libproj.so.12.0.0
  /usr/pkg/lib/pkgconfig/proj.pc

so the big thing remaining is whether the include paths that  have 4 in
them are staying, or if all the code that uses it are going to have to
search for two pathnames and have HAVE_ ifdefs  from
autoconf/cmake/whatever.
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171111/139d2d41/attachment.html>

From even.rouault at spatialys.com  Sat Nov 11 11:06:20 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 11 Nov 2017 20:06:20 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
Message-ID: <4086106.1Xatcfk6yN@even-i700>

On samedi 11 novembre 2017 17:32:05 CET Kristian Evers wrote:
> PROJ v. 5.0.0 is also good with me. It also brings us into "braking changes
> territory". With this in mind I think we should consider only supporting
> the new API in proj.h and dropping the other APIs. This will allow us to
> simplify the code immensely. 

Can you sketch a bit what would be simplified in doing so ?

> At the moment we jump through a bunch of hoops
> to keep backwards compatibility. We'd probably still do that for the next
> release, but not having projects.h and proj_api.h as part of the public API
> we can change things behind the scenes in future releases.

If I remember the analysis of Debian packages, while dropping projects.h would have a 
moderate impact, dropping proj_api.h would cause massive breakage. This would likely cause 
proj 5 to take months to years before being available in distributions due to many packages 
not being ready for it (and the proj_api.h -> proj.h port is the kind of change that needs to be 
done by upstream projects. not a quick&dirty hack that the packager can do)
Thus in this context of software distributions, applications that would be adapted to use the 
new API wouldn't be able to use it in practice for a long time. Worse, applications that would 
do the changes to support proj >= 5 would still to have to support both proj < 5 and proj >= 5 
in a transition period if they want their new releases to be packaged. To make their life easier 
by avoiding to have them to support both API, a proj 5 should be available as packaged as 
fast as possible.

I'm wondering if there wouldn't be a way of having a proj_api.c compatibiliy layer that would 
use the new API  behind the scene ? The projPJ struct could be something different than the 
PJ one, for example just storing the text. And when doing pj_transform() you would build a 
pipeline from the src and dest projPJ. Things like that. I believe the cost of creating this 
compatibility layer (assuming this is possible) would be worth it


Or alternate plan :

- for proj 5.0, add at top of proj_api.h

#ifndef I_AM_M_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_5_1
#error "proj_api.h will be removed in proj 5.1. You can still use it for now by defining 
I_AM_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_5_1, but you should strongly 
consider using proj.h now"
#endif

Perhaps do the same for projects.h, if we really want proj 5 to be a no-brainer for packagers

- for proj 5.1, remove proj_api.h (and projects.h)


Benefits:
* this would make proj 5 easy to be packaged, by avoiding a flag day
* applications would be clearly warned they have to do something, and have time to do the 
changes
* after proj 5.0 release, proj master could benefit from the needed cleanups.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171111/d166e23b/attachment.html>

From knudsen.thomas at gmail.com  Mon Nov 13 07:43:15 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Mon, 13 Nov 2017 16:43:15 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <4086106.1Xatcfk6yN@even-i700>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<4086106.1Xatcfk6yN@even-i700>
Message-ID: <CAH0YoENzyEGxGqVfrHgihxQVk0Fq1BtPNYg=x4_AgrbaFGiP2Q@mail.gmail.com>

Even, regarding simplification by elimination:

Obviously Kristian will want to answer this himself, but I would like to
mention at least one thing (or perhaps rather aspect) that will buy us
simplification by eliminating projects.h and proj_api.h:

We would get rid of the type-punning-by-preprocessor-defs that destroyed
Gerald's classic PROJ.4 core API, (pj_init, pj_fwd, pj_inv, and pj_free),
by turning XY and LP into UV behind the back of the user, such that XY xy
is no longer adressed xy.x and xy.y, but xy.u and xy.v

We would also get rid of the half baked
namespacing-and-information-hiding-by-misleading-typedef, implemented by
e.g.
typedef void *projPJ, and typedef void *projCtx, rather than by forward
declarations.

This kind of stuff has been hell to work around (see the text in the top of
proj.h for rationale for the work). This is not said to belittle Frank's
work, which has been of immense value for PROJ.4, and has kept it afloat
and in constant evolution, for more than 15 years: His work is admirable,
but has, naturally, been focused on whatever (or whom-ever) paid the bills.

This has given us support for vertical datums, support for NTv2, support
for a "failrly accurate for the needs when it was introduced 15 years ago"
interface function as pj_transform, which to a large degree succeeds in
"giving the user what (s)he wants without asking too many annoying geodetic
questions".

It has, however, also given us the, largely superfluous contexts, and the
fileapi, which, apart form missing a fgetc- style function, also in general
suffer from a feeling of "work made for hire" for a specific customer,
using it for in house stuff (only since it is largely unknown by search
engines) - but now we have to maintain this stuff,without even knowing what
the rationale behind was.

So yes - we could certainly benefit from skipping projects.h and proj_api.h
: It will buy us some simplifications -  I'm just not sure that this is the
right way to do things. More about this later.



2017-11-11 20:06 GMT+01:00 Even Rouault <even.rouault at spatialys.com>:

> On samedi 11 novembre 2017 17:32:05 CET Kristian Evers wrote:
>
> > PROJ v. 5.0.0 is also good with me. It also brings us into "braking
> changes
>
> > territory". With this in mind I think we should consider only supporting
>
> > the new API in proj.h and dropping the other APIs. This will allow us to
>
> > simplify the code immensely.
>
>
>
> Can you sketch a bit what would be simplified in doing so ?
>
>
>
> > At the moment we jump through a bunch of hoops
>
> > to keep backwards compatibility. We'd probably still do that for the next
>
> > release, but not having projects.h and proj_api.h as part of the public
> API
>
> > we can change things behind the scenes in future releases.
>
>
>
> If I remember the analysis of Debian packages, while dropping projects.h
> would have a moderate impact, dropping proj_api.h would cause massive
> breakage. This would likely cause proj 5 to take months to years before
> being available in distributions due to many packages not being ready for
> it (and the proj_api.h -> proj.h port is the kind of change that needs to
> be done by upstream projects. not a quick&dirty hack that the packager can
> do)
>
> Thus in this context of software distributions, applications that would be
> adapted to use the new API wouldn't be able to use it in practice for a
> long time. Worse, applications that would do the changes to support proj >=
> 5 would still to have to support both proj < 5 and proj >= 5 in a
> transition period if they want their new releases to be packaged. To make
> their life easier by avoiding to have them to support both API, a proj 5
> should be available as packaged as fast as possible.
>
>
>
> I'm wondering if there wouldn't be a way of having a proj_api.c
> compatibiliy layer that would use the new API behind the scene ? The projPJ
> struct could be something different than the PJ one, for example just
> storing the text. And when doing pj_transform() you would build a pipeline
> from the src and dest projPJ. Things like that. I believe the cost of
> creating this compatibility layer (assuming this is possible) would be
> worth it
>
>
>
>
>
> Or alternate plan :
>
>
>
> - for proj 5.0, add at top of proj_api.h
>
>
>
> #ifndef I_AM_M_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_5_1
>
> #error "proj_api.h will be removed in proj 5.1. You can still use it for
> now by defining I_AM_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_5_1, but
> you should strongly consider using proj.h now"
>
> #endif
>
>
>
> Perhaps do the same for projects.h, if we really want proj 5 to be a
> no-brainer for packagers
>
>
>
> - for proj 5.1, remove proj_api.h (and projects.h)
>
>
>
>
>
> Benefits:
>
> * this would make proj 5 easy to be packaged, by avoiding a flag day
>
> * applications would be clearly warned they have to do something, and have
> time to do the changes
>
> * after proj 5.0 release, proj master could benefit from the needed
> cleanups.
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171113/56f1db3f/attachment.html>

From kreve at sdfe.dk  Mon Nov 13 09:38:13 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 13 Nov 2017 17:38:13 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <CAH0YoENzyEGxGqVfrHgihxQVk0Fq1BtPNYg=x4_AgrbaFGiP2Q@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<4086106.1Xatcfk6yN@even-i700>
	<CAH0YoENzyEGxGqVfrHgihxQVk0Fq1BtPNYg=x4_AgrbaFGiP2Q@mail.gmail.com>
Message-ID: <D4AA2459-DAF4-4503-B34C-AB9D8DE46A06@sdfe.dk>

Thomas,

you said most of what I had in mind, so I’ll just add that almost all functions in the library today is part of the public API. Either through projects.h or proj_api.h. That doesn’t leave much room for refactoring in general. I recently touched the gridshifting code, but had to stay within the boundaries of the current functions in order to not break the API. I could have come up with better implementations if I had been able to change things at a deeper level. The biggest offender is projects.h which absolutely should be a private header.

Even,

I think it is possible to make a compatibility layer as you suggest. Most of what is needed is in place already. I understand your reasoning, though I am not too keen on taking on this task myself. Your alternative plan sounds better to me, although we would then introduce a breaking change at the 5.1.0 version, which kind of goes against the semantic versioning scheme that we ought to follow. It can easily be solved by changing your proposed error message to I_AM_M_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_6_0 and then release version 6 a year after version 5. It should also be added to projects.h.

Anyway, I don’t want to restart the discussion we had a few months ago, I just wanted to take the temperature on this with the clear decision about going to version 5 in the next release.

/Kristian


On 13 Nov 2017, at 16:43, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:

Even, regarding simplification by elimination:

Obviously Kristian will want to answer this himself, but I would like to mention at least one thing (or perhaps rather aspect) that will buy us simplification by eliminating projects.h and proj_api.h:

We would get rid of the type-punning-by-preprocessor-defs that destroyed Gerald's classic PROJ.4 core API, (pj_init, pj_fwd, pj_inv, and pj_free), by turning XY and LP into UV behind the back of the user, such that XY xy is no longer adressed xy.x and xy.y, but xy.u and xy.v

We would also get rid of the half baked namespacing-and-information-hiding-by-misleading-typedef, implemented by e.g.
typedef void *projPJ, and typedef void *projCtx, rather than by forward declarations.

This kind of stuff has been hell to work around (see the text in the top of proj.h for rationale for the work). This is not said to belittle Frank's work, which has been of immense value for PROJ.4, and has kept it afloat and in constant evolution, for more than 15 years: His work is admirable, but has, naturally, been focused on whatever (or whom-ever) paid the bills.

This has given us support for vertical datums, support for NTv2, support for a "failrly accurate for the needs when it was introduced 15 years ago" interface function as pj_transform, which to a large degree succeeds in "giving the user what (s)he wants without asking too many annoying geodetic questions".

It has, however, also given us the, largely superfluous contexts, and the  fileapi, which, apart form missing a fgetc- style function, also in general suffer from a feeling of "work made for hire" for a specific customer, using it for in house stuff (only since it is largely unknown by search engines) - but now we have to maintain this stuff,without even knowing what the rationale behind was.

So yes - we could certainly benefit from skipping projects.h and proj_api.h : It will buy us some simplifications -  I'm just not sure that this is the right way to do things. More about this later.



2017-11-11 20:06 GMT+01:00 Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>>:
On samedi 11 novembre 2017 17:32:05 CET Kristian Evers wrote:
> PROJ v. 5.0.0 is also good with me. It also brings us into "braking changes
> territory". With this in mind I think we should consider only supporting
> the new API in proj.h and dropping the other APIs. This will allow us to
> simplify the code immensely.



Can you sketch a bit what would be simplified in doing so ?



> At the moment we jump through a bunch of hoops
> to keep backwards compatibility. We'd probably still do that for the next
> release, but not having projects.h and proj_api.h as part of the public API
> we can change things behind the scenes in future releases.



If I remember the analysis of Debian packages, while dropping projects.h would have a moderate impact, dropping proj_api.h would cause massive breakage. This would likely cause proj 5 to take months to years before being available in distributions due to many packages not being ready for it (and the proj_api.h -> proj.h port is the kind of change that needs to be done by upstream projects. not a quick&dirty hack that the packager can do)
Thus in this context of software distributions, applications that would be adapted to use the new API wouldn't be able to use it in practice for a long time. Worse, applications that would do the changes to support proj >= 5 would still to have to support both proj < 5 and proj >= 5 in a transition period if they want their new releases to be packaged. To make their life easier by avoiding to have them to support both API, a proj 5 should be available as packaged as fast as possible.



I'm wondering if there wouldn't be a way of having a proj_api.c compatibiliy layer that would use the new API behind the scene ? The projPJ struct could be something different than the PJ one, for example just storing the text. And when doing pj_transform() you would build a pipeline from the src and dest projPJ. Things like that. I believe the cost of creating this compatibility layer (assuming this is possible) would be worth it





Or alternate plan :



- for proj 5.0, add at top of proj_api.h



#ifndef I_AM_M_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_5_1
#error "proj_api.h will be removed in proj 5.1. You can still use it for now by defining I_AM_AWARE_PROJ_API_H_WILL_BE_REMOVED_IN_PROJ_5_1, but you should strongly consider using proj.h now"
#endif



Perhaps do the same for projects.h, if we really want proj 5 to be a no-brainer for packagers



- for proj 5.1, remove proj_api.h (and projects.h)





Benefits:
* this would make proj 5 easy to be packaged, by avoiding a flag day
* applications would be clearly warned they have to do something, and have time to do the changes
* after proj 5.0 release, proj master could benefit from the needed cleanups.



Even



--
Spatialys - Geospatial professional services
http://www.spatialys.com<http://www.spatialys.com/>

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171113/79692b1d/attachment.html>

From sp8qed at onet.eu  Mon Nov 13 11:19:06 2017
From: sp8qed at onet.eu (Lukasz Komsta)
Date: Mon, 13 Nov 2017 20:19:06 +0100
Subject: [Proj] Conic projection, but centric (gnomonic)
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABB691@S000014.PROD.SITAD.DK>
References: <18598362-87f9c03e81fcc8ce9af39108a3ed350d@pmq5v.m5r2.onet>
	<2E885BB293AF0448A0181138489E9A0EAEABB691@S000014.PROD.SITAD.DK>
Message-ID: <06e92f77-181d-1ae4-83a8-e23ebe49f490@onet.eu>

W dniu 2017-11-08 o 15:17, Kristian Evers pisze:

>> 2. If not, are there any possibility to implement such a functionality in the future to allow GIS users using this grid?
> 
> You are welcome to submit a pull request on GitHub [0] with the necessary code additions and documentation. If you need help getting started please let us know.

Dear Kristian,

Just implemented this functionality in my own fork (Github username
luqqe), tested it carefully and then created a pull request.

Thank you and best regards,

Lukasz



From kreve at sdfe.dk  Wed Nov 15 12:50:42 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 15 Nov 2017 20:50:42 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
Message-ID: <42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>

Kurt,

I’ve hacked together a basic migration guide here https://kbevers.github.io/development/migration.html

I based it on the docs for the current API. It doesn’t go into detail with the many undocumented functions in proj_api.h. Please let me know if there’s is anything you think should be added or improved in the guide.

Kristian

On 11 Nov 2017, at 18:56, Kurt Schwehr <schwehr at gmail.com<mailto:schwehr at gmail.com>> wrote:

Sorry if I am not seeing something that exists.  Is there a document that explains how to transition from the old APIs to the new?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171115/4fb9a321/attachment.html>

From schwehr at gmail.com  Wed Nov 15 12:55:23 2017
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 15 Nov 2017 12:55:23 -0800
Subject: [Proj] Time for a new release?
In-Reply-To: <42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
Message-ID: <CACmBxyudJoG6SJwUydRsHwLHNgk_BherV32XMoypC-02qFmE0g@mail.gmail.com>

Thanks!

On Wed, Nov 15, 2017 at 12:50 PM, Kristian Evers <kreve at sdfe.dk> wrote:

> Kurt,
>
> I’ve hacked together a basic migration guide here https://kbevers.github.
> io/development/migration.html
>
> I based it on the docs for the current API. It doesn’t go into detail with
> the many undocumented functions in proj_api.h. Please let me know if
> there’s is anything you think should be added or improved in the guide.
>
> Kristian
>
> On 11 Nov 2017, at 18:56, Kurt Schwehr <schwehr at gmail.com> wrote:
>
> Sorry if I am not seeing something that exists.  Is there a document that
> explains how to transition from the old APIs to the new?
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171115/fa88d0cf/attachment.html>

From charles at karney.com  Wed Nov 15 13:15:18 2017
From: charles at karney.com (Charles Karney)
Date: Wed, 15 Nov 2017 16:15:18 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
Message-ID: <1441ae19-0c3b-1e61-418b-8a5b8ade6a31@karney.com>

I have a selfish wish that I should be able to build current versions of
gdal and geotiff with either proj 4.9.x or proj 5.0.x.  However it seems
that proj 5.0.x won't be backward compatible (at the source code level).
Is this right?

I don't expect proj 5.x to maintain backward compatibility indefinitely.
However, if it is possible to provide it for a year or so, that would
definitely ease the incorporation of proj 5.x into our software
ecosystem.

If this isn't possible, it would be good to get started on new versions
of gdal and geotiff which work with the new proj API.

   --Charles

On 11/15/2017 03:50 PM, Kristian Evers wrote:
> Kurt,
> 
> I’ve hacked together a basic migration guide here 
> https://kbevers.github.io/development/migration.html
> 
> I based it on the docs for the current API. It doesn’t go into detail 
> with the many undocumented functions in proj_api.h. Please let me know 
> if there’s is anything you think should be added or improved in the guide.
> 
> Kristian
> 
>> On 11 Nov 2017, at 18:56, Kurt Schwehr <schwehr at gmail.com 
>> <mailto:schwehr at gmail.com>> wrote:
>>
>> Sorry if I am not seeing something that exists.  Is there a document 
>> that explains how to transition from the old APIs to the new?
> 
> 
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



From Roger.Bivand at nhh.no  Fri Nov 17 00:32:31 2017
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 17 Nov 2017 01:32:31 -0700 (MST)
Subject: [Proj] Time for a new release?
In-Reply-To: <42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
References: <smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
Message-ID: <1510907551844-0.post@n6.nabble.com>

Hi Kristian,

OK, thanks, this is a start. 

Please consider adding an example with +proj=ob_tran - will it still require
the swapping of from and to projection definitions? 

A further example showing how to catch errors when a projection definition
has no inverse (error handling when proj is running inside other software). 

The basic guide should help for most of the standard cases, but the
transition will be easiest if the oddities are covered authoritatively
(otherwise we'll end up with lots of different work-arounds).

Best wishes,

Roger

PS. Please (very nicely) increment the version in the git repo master/trunk.
Until that is done, we're stuck as far as implementation of migration steps,
because conditioning on proj version is not possible.



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html


From sp8qed at onet.eu  Fri Nov 17 00:59:53 2017
From: sp8qed at onet.eu (Lukasz Komsta)
Date: Fri, 17 Nov 2017 09:59:53 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
Message-ID: <f5464e7d-ff34-608d-8caa-0f1ef5aa9b46@onet.eu>


Dear All,

If my small contribution has a chance to be included
(https://github.com/OSGeo/proj.4/pull/662), then I am a lucky man that a
release is planned, as there will be quite short time to propagate this
new projection to software using PROJ4 (and it is some kind of "breaking
news" for Polish botany community).

Anyway, I must also honestly commend the source code of PROJ4. So far, I
programmed only my own projects wiht svn and never seriously contributed
anything to existing code (it is also my first experience with git).
PROJ4 is very well organized and it took me only an hour to be sure what
to change and where. It is a piece of good work and it is a pleasure to
have a contribution to such well done project.

Regards,
Lukasz


From Roger.Bivand at nhh.no  Fri Nov 17 01:13:31 2017
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 17 Nov 2017 02:13:31 -0700 (MST)
Subject: [Proj] Time for a new release?
In-Reply-To: <1510907551844-0.post@n6.nabble.com>
References: <CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
	<1510907551844-0.post@n6.nabble.com>
Message-ID: <1510910011239-0.post@n6.nabble.com>

... and please explain PJ_FWD in the example - is it the macro in line 357
ff. in proj.h?

/* Apply transformation to observation - in forward or inverse direction */
enum PJ_DIRECTION {
    PJ_FWD   =  1,   /* Forward    */
    PJ_IDENT =  0,   /* Do nothing */
    PJ_INV   = -1    /* Inverse    */
};

The question about non-existent inverses will bite for PJ_INV - am I looking
in the right place i pj_internal.c, line 80 ff:

PJ_COORD pj_inv4d (PJ_COORD coo, PJ *P) {
    if (0!=P->inv4d)
        return P->inv4d (coo, P);
    if (0!=P->inv3d) {
        coo.lpz  =  pj_inv3d (coo.xyz, P);
        return coo;
    }
    if (0!=P->inv) {
        coo.lp  =  pj_inv (coo.xy, P);
        return coo;
    }
    proj_errno_set (P, EINVAL);
    return proj_coord_error ();
}

so a no-inverse definition sets an error number and returns HUGE_VAL,
pj_internal.c line 56:

/* Work around non-constness of MSVC HUGE_VAL by providing functions rather
than constants */
PJ_COORD proj_coord_error (void) {
    PJ_COORD c;
    c.v[0] = c.v[1] = c.v[2] = c.v[3] = HUGE_VAL;
    return c;
}

Can P->inv4d, P->inv3d and P->inv be read in the API?

These are the kinds of things that the migration guide could helpfully show.

Roger



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html


From kreve at sdfe.dk  Fri Nov 17 01:29:23 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 17 Nov 2017 09:29:23 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <1510907551844-0.post@n6.nabble.com>
References: <smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
	<1510907551844-0.post@n6.nabble.com>
Message-ID: <91723A1A-189C-4864-A7F5-163D29BC95D6@sdfe.dk>

Roger,

Regarding the version number see https://github.com/OSGeo/proj.4/pull/673. Is that satisfactory?

Thanks for you inputs on the documentation. Obviously it is still very much under construction, so you won’t find an answer to all your questions just yet. It is better than ever though, so that’s a start. Unfortunately no one but me has shown an interest in getting the documentation in place so far. That is mostly because the API still changes rapidly and documentation efforts can easily be wasted. I have already burned my fingers on that a few times. The migration guide is not meant to be a stand-alone document. You will have to go through the regular development guide to find more information. See https://kbevers.github.io/development/index.html. As you can see I have planned on making a section on error handling. Just haven’t gotten round to it yet. There is also a bunch of general transformation setup info in the “Using PROJ.4” section. That stuff wil be not covered in the development guide.

I am not very familiar with ob_tran myself, so if you could provide me with an example I can better answer your question.

The API reference https://kbevers.github.io/development/reference/index.html is currently the most updated part of the documentation. There are examples for many of the functions.

Any input and help with the documentation is very appreciated. Create GitHub issues if there is something you think is missing or submit a pull request with new sections on your favourite topic. Otherwise it will be a very slow process of getting the documentation in a proper state.

Kristian



On 17 Nov 2017, at 09:32, Roger Bivand <Roger.Bivand at nhh.no<mailto:Roger.Bivand at nhh.no>> wrote:

Hi Kristian,

OK, thanks, this is a start.

Please consider adding an example with +proj=ob_tran - will it still require
the swapping of from and to projection definitions?

A further example showing how to catch errors when a projection definition
has no inverse (error handling when proj is running inside other software).

The basic guide should help for most of the standard cases, but the
transition will be easiest if the oddities are covered authoritatively
(otherwise we'll end up with lots of different work-arounds).

Best wishes,

Roger

PS. Please (very nicely) increment the version in the git repo master/trunk.
Until that is done, we're stuck as far as implementation of migration steps,
because conditioning on proj version is not possible.



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171117/21d60ae1/attachment.html>

From kreve at sdfe.dk  Fri Nov 17 01:36:14 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 17 Nov 2017 09:36:14 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <1510907551844-0.post@n6.nabble.com>
References: <smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
	<1510907551844-0.post@n6.nabble.com>
Message-ID: <3D773543-B813-42A8-815D-24E72713B2CE@sdfe.dk>

Roger,

To check if there’s an inverse use proj_pj_info: https://kbevers.github.io/development/reference/functions.html#c.proj_pj_info (click
PJ_PROJ_INFO to see how the struct is defined)

You can not access P->fwd4d and friends in the public API. That is what the proj_trans* functions are for. The transformation direction is controlled with the PJ_DIRECTION enum.

I’ll try to fit that into the migration guide. Or better yet, you can submit a pull request with the changes you’d like to see.

Kristian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171117/b68c2e25/attachment.html>

From Roger.Bivand at nhh.no  Fri Nov 17 02:10:35 2017
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 17 Nov 2017 03:10:35 -0700 (MST)
Subject: [Proj] Time for a new release?
In-Reply-To: <91723A1A-189C-4864-A7F5-163D29BC95D6@sdfe.dk>
References: <cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<CACmBxyvm7uZH_OXfH8H7qh4Vjm66eFSa-4pgKV3mm7gbvW2vNA@mail.gmail.com>
	<42DAB21B-09F6-4E9E-B39B-5CADC36DCA2D@sdfe.dk>
	<1510907551844-0.post@n6.nabble.com>
	<91723A1A-189C-4864-A7F5-163D29BC95D6@sdfe.dk>
Message-ID: <1510913435838-0.post@n6.nabble.com>

(Copied from a comment on the PR)

Will the acid test be that < 5, there is no config-proj --version at all (on
systems supporting config-*) but that proj_api.h declares the version? For
./configure, confirmation that config-proj --version returns the
authoritative version number if it exists is sufficient.



-----
Roger Bivand
NHH Norwegian School of Economics, Bergen, Norway
--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html


From gdt at lexort.com  Fri Nov 17 10:15:16 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 17 Nov 2017 13:15:16 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	(Kristian Evers's message of "Sat, 11 Nov 2017 17:32:05 +0000")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
Message-ID: <smu4lpsydor.fsf@linuxpal.mit.edu>


Kristian Evers <kreve at sdfe.dk> writes:

> PROJ v. 5.0.0 is also good with me. It also brings us into "braking
> changes territory". With this in mind I think we should consider only
> supporting the new API in proj.h and dropping the other APIs. This
> will allow us to simplify the code immensely. At the moment we jump
> through a bunch of hoops to keep backwards compatibility. We'd
> probably still do that for the next release, but not having projects.h
> and proj_api.h as part of the public API we can change things behind
> the scenes in future releases.

When thinking about a deprecation/migration path, please keep packaging
systems and the impacts on depending projects in mind.  This was pretty
painful with geos when there were only a small number of other packages
using deprecated/changed APIs.

Right now a very large amount of software uses the current/old/stable
API.  The main path to removing that should be:

  Publish a release with a new supported API.  Include in the release
  notes the intent to deprecate/remove the old one.

  Expect upstream software to look for the new API and use it, and if
  not found, use the old API.

  Perhaps have a release with a define that has to be on to use the old
  API.  But this doesn't really do what you think, because people
  maintaining packaging systems will notice the failure to build and
  turn on the define.

  Find all the projects that use proj and help/prod them into updating

  Eventually, decide that projects that have not both changed their code
  to use the new API and *had a formal release with the changes* are
  unmaintained and that packaging systems *should* drop them.

  Make a new proj release without the old API.   Understand that
  packaging system maintainers are now faced with a choice to hold off
  on updating proj or to remove other packages that haven't updated.

An alternate path is:

  Construct a new proj release that has a *completely disjoint set* of
  installed files, so that it's reasonable to have  proj 4 and proj 5
  installed.

  Do not have any compat in proj 5, and expect programs to migrate to it
  over time.

  Continue to have security updates, if warranted, for the old package.


I'm not sure what people are thinking, but I tend to hear things like
"people who haven't updated their code can just use the old version".
The problem is that packaging systems have to make choices, and almost
all software gets run via packaging systems.  And, as soon as some
programs move to requiring the new API only, it's not possible to run
everything on the same system if the current release of proj drops the
old API.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171117/44842d7a/attachment.sig>

From even.rouault at spatialys.com  Fri Nov 17 10:31:04 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Nov 2017 19:31:04 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <smu4lpsydor.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<smu4lpsydor.fsf@linuxpal.mit.edu>
Message-ID: <4678801.7ykXrM9mTb@even-i700>

> When thinking about a deprecation/migration path, please keep packaging
> systems and the impacts on depending projects in mind.  This was pretty
> painful with geos when there were only a small number of other packages
> using deprecated/changed APIs.
> 
> Right now a very large amount of software uses the current/old/stable
> API.  The main path to removing that should be:
> 
>   Publish a release with a new supported API.  Include in the release
>   notes the intent to deprecate/remove the old one.
> 
>   Expect upstream software to look for the new API and use it, and if
>   not found, use the old API.
> 
>   Perhaps have a release with a define that has to be on to use the old
>   API.  But this doesn't really do what you think, because people
>   maintaining packaging systems will notice the failure to build and
>   turn on the define.

The advantage of that #define is that I'd expect packagers to file bugs/email to upstream 
projects in case they are not aware of the upcoming breakage. "Heh project X, at the next 
proj upgrade, your software will not build against it. Please make sure to have a release soon 
using the new API, otherwise it will get removed"

> 
>   Find all the projects that use proj and help/prod them into updating
> 
>   Eventually, decide that projects that have not both changed their code
>   to use the new API and *had a formal release with the changes* are
>   unmaintained and that packaging systems *should* drop them.
> 
>   Make a new proj release without the old API.   Understand that
>   packaging system maintainers are now faced with a choice to hold off
>   on updating proj or to remove other packages that haven't updated.

Agreed. That was what I underlined in a previous message. There is a need for an interim proj 
version that have both old and new API, so that software using proj can be progressively 
updated to use the new API when they have a new release. One year seems to be the 
minimum reasonable for such transition.

> 
> An alternate path is:
> 
>   Construct a new proj release that has a *completely disjoint set* of
>   installed files, so that it's reasonable to have  proj 4 and proj 5
>   installed.

That will not help for complex systems. Take QGIS. QGIS uses proj directly, and links against 
GDAL which also uses proj, and libspatialite with also uses proj. So QGIS, GDAL and 
libspatialite need to use the same proj version, or symbol clashing will occur. That would 
work only if "libproj4" and "libproj5" export a completely set of symbols, in addition to files.


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171117/e4064638/attachment.html>

From kreve at sdfe.dk  Fri Nov 17 10:39:18 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 17 Nov 2017 18:39:18 +0000
Subject: [Proj] Time for a new release?
In-Reply-To: <smu4lpsydor.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<smu4lpsydor.fsf@linuxpal.mit.edu>
Message-ID: <7C7BB351-A441-4895-9D3F-223ABD3632E3@sdfe.dk>

I don’t care all that much which way we go, as long as there’s a clear decision. If we want to introduce breaking changes, I want to know it as soon as possible so I can get to work before we freeze the code. If we are going along the path of backwards compatibility there’s other stuff I want to focus on.

Unfortunately we don’t hear from that many users of the library. Plenty of package maintainers are chiming in, but not many whose code will be impacted by breaking changes. It would be nice to hear get som input from that side of the table.

I understand the problem you have as a package maintainer. It is not easy and either way we go is going to be problematic, although keeping backward compatibility seems to be lesser evil. How long do you suggest support for both API’s should last? 1 year? 2 years? Longer?

Kristian


> On 17 Nov 2017, at 19:15, Greg Troxel <gdt at lexort.com> wrote:
> 
> 
> Kristian Evers <kreve at sdfe.dk> writes:
> 
>> PROJ v. 5.0.0 is also good with me. It also brings us into "braking
>> changes territory". With this in mind I think we should consider only
>> supporting the new API in proj.h and dropping the other APIs. This
>> will allow us to simplify the code immensely. At the moment we jump
>> through a bunch of hoops to keep backwards compatibility. We'd
>> probably still do that for the next release, but not having projects.h
>> and proj_api.h as part of the public API we can change things behind
>> the scenes in future releases.
> 
> When thinking about a deprecation/migration path, please keep packaging
> systems and the impacts on depending projects in mind.  This was pretty
> painful with geos when there were only a small number of other packages
> using deprecated/changed APIs.
> 
> Right now a very large amount of software uses the current/old/stable
> API.  The main path to removing that should be:
> 
>  Publish a release with a new supported API.  Include in the release
>  notes the intent to deprecate/remove the old one.
> 
>  Expect upstream software to look for the new API and use it, and if
>  not found, use the old API.
> 
>  Perhaps have a release with a define that has to be on to use the old
>  API.  But this doesn't really do what you think, because people
>  maintaining packaging systems will notice the failure to build and
>  turn on the define.
> 
>  Find all the projects that use proj and help/prod them into updating
> 
>  Eventually, decide that projects that have not both changed their code
>  to use the new API and *had a formal release with the changes* are
>  unmaintained and that packaging systems *should* drop them.
> 
>  Make a new proj release without the old API.   Understand that
>  packaging system maintainers are now faced with a choice to hold off
>  on updating proj or to remove other packages that haven't updated.
> 
> An alternate path is:
> 
>  Construct a new proj release that has a *completely disjoint set* of
>  installed files, so that it's reasonable to have  proj 4 and proj 5
>  installed.
> 
>  Do not have any compat in proj 5, and expect programs to migrate to it
>  over time.
> 
>  Continue to have security updates, if warranted, for the old package.
> 
> 
> I'm not sure what people are thinking, but I tend to hear things like
> "people who haven't updated their code can just use the old version".
> The problem is that packaging systems have to make choices, and almost
> all software gets run via packaging systems.  And, as soon as some
> programs move to requiring the new API only, it's not possible to run
> everything on the same system if the current release of proj drops the
> old API.
> 


From sebastic at xs4all.nl  Fri Nov 17 11:43:32 2017
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 17 Nov 2017 20:43:32 +0100
Subject: [Proj] Time for a new release?
In-Reply-To: <7C7BB351-A441-4895-9D3F-223ABD3632E3@sdfe.dk>
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<smu4lpsydor.fsf@linuxpal.mit.edu>
	<7C7BB351-A441-4895-9D3F-223ABD3632E3@sdfe.dk>
Message-ID: <4ce688d4-8d15-c436-0476-96aad54dc618@xs4all.nl>

On 11/17/2017 07:39 PM, Kristian Evers wrote:
> Unfortunately we don’t hear from that many users of the library. Plenty of package maintainers are chiming in, but not many whose code will be impacted by breaking changes. It would be nice to hear get som input from that side of the table.

Not many users of the proj library are subscribed to this list.

> I understand the problem you have as a package maintainer. It is not easy and either way we go is going to be problematic, although keeping backward compatibility seems to be lesser evil. How long do you suggest support for both API’s should last? 1 year? 2 years? Longer?

Ideally longer, especially since this project only sees about one
release per year.

Of the ~50 Debian packages that use proj, many of these projects will
take quite a while to adapt to the new API, several of which will
require these changes to be contributed because they won't develop it
themselves.

Helping projects adapt to the new API may be a good subject for sprint
where interested developers create patches for the various projects that
lack the resources to adapt to the new API themselves.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From gdt at lexort.com  Fri Nov 17 15:06:04 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 17 Nov 2017 18:06:04 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <4ce688d4-8d15-c436-0476-96aad54dc618@xs4all.nl> (Sebastiaan
	Couwenberg's message of "Fri, 17 Nov 2017 20:43:32 +0100")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<CAKyBbG6-dVeh6Bt3nx-MotkKaDkmqNvhjY9HZ7Nf-z9E77-iFA@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAEAC071D@S000014.PROD.SITAD.DK>
	<smutvy2jijr.fsf@linuxpal.mit.edu>
	<CAKyBbG7pDmzDjcbK_ZRew1tbRM5j9qGzPMWB3ZzXsbuiiZZ+6Q@mail.gmail.com>
	<cf4f3816-588e-265a-bca8-09c73d31f698@xs4all.nl>
	<CALFmHhtFk5P7h2GRhB0KYU7myeqW6Pqmq0CPB9bkSYfOWT9ZvQ@mail.gmail.com>
	<17BBD26A-F051-445B-B037-166F4743102F@meganet.net>
	<CAKyBbG7ROKejo_YjG-bvf=3dpXNc3Xov0bXdS0cKrPUC7tZNbA@mail.gmail.com>
	<smu4lq1j097.fsf@linuxpal.mit.edu>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<smu4lpsydor.fsf@linuxpal.mit.edu>
	<7C7BB351-A441-4895-9D3F-223ABD3632E3@sdfe.dk>
	<4ce688d4-8d15-c436-0476-96aad54dc618@xs4all.nl>
Message-ID: <smupo8gwlnn.fsf@linuxpal.mit.edu>


Sebastiaan Couwenberg <sebastic at xs4all.nl> writes:

> On 11/17/2017 07:39 PM, Kristian Evers wrote:
>> Unfortunately we don’t hear from that many users of the
>> library. Plenty of package maintainers are chiming in, but not many
>> whose code will be impacted by breaking changes. It would be nice to
>> hear get som input from that side of the table.
>
> Not many users of the proj library are subscribed to this list.
>
>> I understand the problem you have as a package maintainer. It is not
>> easy and either way we go is going to be problematic, although
>> keeping backward compatibility seems to be lesser evil. How long do
>> you suggest support for both API’s should last? 1 year? 2 years?
>> Longer?
>
> Ideally longer, especially since this project only sees about one
> release per year.

I agree.  I would say:

  after the release of a proj with the new API, how long will it take
  for 95% of the packages that depend on proj to have a formal release
  that uses the new API?

I think 1 year is wildly optimistic.

> Of the ~50 Debian packages that use proj, many of these projects will
> take quite a while to adapt to the new API, several of which will
> require these changes to be contributed because they won't develop it
> themselves.

agreed

> Helping projects adapt to the new API may be a good subject for sprint
> where interested developers create patches for the various projects that
> lack the resources to adapt to the new API themselves.

That's a great idea.   But then you still need to wait/prod for an
actual release.

Realistically, I think after the new API is in a release, we just have
to wait until we are comfortable discarding all software that hasn't
coped yet.  It's really hard to know how long that will be.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171117/8a74ff8f/attachment.sig>

From gdt at lexort.com  Fri Nov 17 15:23:14 2017
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 17 Nov 2017 18:23:14 -0500
Subject: [Proj] Time for a new release?
In-Reply-To: <4678801.7ykXrM9mTb@even-i700> (Even Rouault's message of "Fri,
	17 Nov 2017 19:31:04 +0100")
References: <2E885BB293AF0448A0181138489E9A0EAEABE68F@S000014.PROD.SITAD.DK>
	<2E885BB293AF0448A0181138489E9A0EAEAC1497@S000014.PROD.SITAD.DK>
	<smu4lpsydor.fsf@linuxpal.mit.edu> <4678801.7ykXrM9mTb@even-i700>
Message-ID: <smuine8wkv1.fsf@linuxpal.mit.edu>


Even Rouault <even.rouault at spatialys.com> writes:

>>   Perhaps have a release with a define that has to be on to use the
>>   old API.  But this doesn't really do what you think, because people
>>   maintaining packaging systems will notice the failure to build and
>>   turn on the define.
>
> The advantage of that #define is that I'd expect packagers to file
> bugs/email to upstream projects in case they are not aware of the
> upcoming breakage. "Heh project X, at the next proj upgrade, your
> software will not build against it. Please make sure to have a release
> soon using the new API, otherwise it will get removed"

Perhaps, but I think this is putting packagers in the middle of an issue
between proj and proj-using packages, and it doesn't really help.

Perhaps the proj crowd can file bugs with all known proj-using packages,
as soon as a proj release with the new API exists, and have a
corresponding tracking bug in the proj tracker, so we can see how things
are going.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171117/67bef44c/attachment.sig>

From mankoff at gmail.com  Mon Nov 20 09:13:09 2017
From: mankoff at gmail.com (Ken Mankoff)
Date: Mon, 20 Nov 2017 18:13:09 +0100
Subject: [Proj] Pixel area errors
Message-ID: <m27eukg9ga.fsf@gmail.com>

Dear List,

I've just learned that GRASS has a function to provide the true scale for a given cell. From this, I can determine the map projection error. 

My understanding is that for a given projection, the "lat_ts" term of the proj4 string describing the projection is where 1 m in GRASS is actually 1 m. Elsewhere, errors grow. I'd like to track these.

I asked the following on the GRASS list and was advised that this list might be a better place to ask:

Is the scale error only in longitude and never in latitude? Or can it be in both? Is there a way to find the error for a length error rather than an area error? Specifically, for a vector line with an arbitrary heading?

Thank you,

  -k.


From mcochran at athensal.us  Mon Nov 20 11:28:19 2017
From: mcochran at athensal.us (Micah Cochran)
Date: Mon, 20 Nov 2017 13:28:19 -0600
Subject: [Proj] Pixel area errors
In-Reply-To: <m27eukg9ga.fsf@gmail.com>
References: <m27eukg9ga.fsf@gmail.com>
Message-ID: <CAHLAsF2V3fX4kY+WEQmzk7ysKATQDnXDu_udB-O4xMydgi+DZw@mail.gmail.com>

Hello Ken,

Just for completeness a projection is a flat representation of earth.  The
earth is usually represented as an oblate spheroid.  Any projection has
some level of approximation between distance, area, direction, and form
(does the landmass look like what it should look like).  Some projections
are good used for surveying application, others are better for representing
a really large area.

For basic information about projections:
http://axismaps.github.io/thematic-cartography/articles/projections.html

If you limit the scope of area, you can very accurate measurements.

It depends upon what projection that you are using to what kinds of errors
you will get.  Mercator projection is very accurate at the 0 deg latitude.
Transverse Mercator project is very accurate at along a line of longitude.

Errors can be both latitude and longitude, depending on the projection.
For example, a polar projection will have distortion anywhere but the
center (the pole).

Tissot's indicatrix is used as a graphic illustration of a projection's
distortion.
https://en.wikipedia.org/wiki/Tissot%27s_indicatrix

You can calculate a grid distance, which can be very close or not close at
all based on the projection.    Geodetic/geodesic distance algorithms from
the GeographicLib::Geodesic libary (included with PROJ.4) has very accurate
distance calculations.
http://proj4.org/geodesic.html

I'm not to sure about keeping track of the errors of a particular
projection or how to exactly answer your specific questions.  I hope that
gives you some pointers.

In a slightly different tangent about using US Customary units for area and
exactitude, I was looking at the difference between calculating acres using
international feet (0.3048 m) and US Survey feet (0.3048006 m).  The size
of this City is about 1000 sq km.  When converting to acres (area) using
the two different feet as the basis of acres, I got a difference of 100
acres (40 hectares or 0.4 sq km) between the asnwers.  US Customary units
make me crazy.

Micah Cochran

On Mon, Nov 20, 2017 at 11:13 AM, Ken Mankoff <mankoff at gmail.com> wrote:

> Dear List,
>
> I've just learned that GRASS has a function to provide the true scale for
> a given cell. From this, I can determine the map projection error.
>
> My understanding is that for a given projection, the "lat_ts" term of the
> proj4 string describing the projection is where 1 m in GRASS is actually 1
> m. Elsewhere, errors grow. I'd like to track these.
>
> I asked the following on the GRASS list and was advised that this list
> might be a better place to ask:
>
> Is the scale error only in longitude and never in latitude? Or can it be
> in both? Is there a way to find the error for a length error rather than an
> area error? Specifically, for a vector line with an arbitrary heading?
>
> Thank you,
>
>   -k.
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171120/52b853af/attachment.html>

From mankoff at gmail.com  Mon Nov 20 12:54:50 2017
From: mankoff at gmail.com (Ken Mankoff)
Date: Mon, 20 Nov 2017 21:54:50 +0100
Subject: [Proj] Pixel area errors
In-Reply-To: <CAHLAsF2V3fX4kY+WEQmzk7ysKATQDnXDu_udB-O4xMydgi+DZw@mail.gmail.com>
References: <m27eukg9ga.fsf@gmail.com>
	<CAHLAsF2V3fX4kY+WEQmzk7ysKATQDnXDu_udB-O4xMydgi+DZw@mail.gmail.com>
Message-ID: <m2shd8ekmd.fsf@gmail.com>

Hi Micah,

Thanks for the reply. More specifically, I'm working in EPSG:3413 over Greenland. When I convert two map coordinates 1000 m apart to lon,lat, and then pass those to the geod program, it tells me they are closer to 1030 m apart, or that I have a 3% error in distance, and a larger % error in area.

Thank you for the hint to use geod.

  -k.


From knudsen.thomas at gmail.com  Mon Nov 20 12:56:56 2017
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Mon, 20 Nov 2017 21:56:56 +0100
Subject: [Proj] Pixel area errors
In-Reply-To: <CAHLAsF2V3fX4kY+WEQmzk7ysKATQDnXDu_udB-O4xMydgi+DZw@mail.gmail.com>
References: <m27eukg9ga.fsf@gmail.com>
	<CAHLAsF2V3fX4kY+WEQmzk7ysKATQDnXDu_udB-O4xMydgi+DZw@mail.gmail.com>
Message-ID: <CAH0YoEP51tuXj5ngLx9_k7wxmGumsDyH6S5PGwq9=gSs5t+hhg@mail.gmail.com>

Ken,

lat_ts is a setup parameter used in a few of the projections supported by
proj (cea, merc, stere, wag3 and wink1) - it is not a magic incantation you
can slap on any projection definition string to force it to be "exact"
along any given latitude.

But the proj program has functionality to provide a large amount of
projection distortion information: Try running

echo 12 55  |  proj -VS +proj=merc +ellps=GRS80 +lat_ts=55

Which will give you information about the distortion of a point at 12 E, 55
N (near Copenhagen, Denmark), for a mercator projection with a latitude of
true scale of 55. Not surprising, the scale is 1:


#Mercator
# Cyl, Sph&Ell
# lat_ts=
# +proj=merc +ellps=GRS80 +lat_ts=55
#--- following specified but NOT used
# +ellps=WGS84
#Final Earth figure: ellipsoid
#  Major axis (a): 6378137.000
#  1/flattening: 298.257222
#  squared eccentricity: 0.006694380023
Longitude: 12dE [ 12 ]
Latitude:  55dN [ 55 ]
Easting (x):   767929.55
Northing (y):  4211972.20
Meridian scale (h) : 1.00000000  ( 8.866e-009 % error )
Parallel scale (k) : 1.00000000  ( -1.066e-010 % error )
Areal scale (s):     1.00000000  ( 8.759e-009 % error )
Angular distortion (w): 0.000
Meridian/Parallel angle: 90.00000
Convergence : 0d [ -0.00000000 ]
Max-min (Tissot axis a-b) scale error: 1.00000 1.00000


Then try changing +lat_ts=55 to +lat_ts=54:

#Mercator
# Cyl, Sph&Ell
# lat_ts=
# +proj=merc +ellps=GRS80 +lat_ts=54
#--- following specified but NOT used
# +ellps=WGS84
#Final Earth figure: ellipsoid
#  Major axis (a): 6378137.000
#  1/flattening: 298.257222
#  squared eccentricity: 0.006694380023
Longitude: 12dE [ 12 ]
Latitude:  55dN [ 55 ]
Easting (x):   786909.29
Northing (y):  4316073.03
Meridian scale (h) : 1.02471546  ( 2.472 % error )
Parallel scale (k) : 1.02471546  ( 2.472 % error )
Areal scale (s):     1.05004178  ( 5.004 % error )
Angular distortion (w): 0.000
Meridian/Parallel angle: 90.00000
Convergence : 0d [ -0.00000000 ]
Max-min (Tissot axis a-b) scale error: 1.02472 1.02472

Indeed a quite useful feature of proj! That said, you will probably also
need some basic literature about projections to make real use of this
feature.

/thomas


2017-11-20 20:28 GMT+01:00 Micah Cochran <mcochran at athensal.us>:

> Hello Ken,
>
> Just for completeness a projection is a flat representation of earth.  The
> earth is usually represented as an oblate spheroid.  Any projection has
> some level of approximation between distance, area, direction, and form
> (does the landmass look like what it should look like).  Some projections
> are good used for surveying application, others are better for representing
> a really large area.
>
> For basic information about projections:
> http://axismaps.github.io/thematic-cartography/articles/projections.html
>
> If you limit the scope of area, you can very accurate measurements.
>
> It depends upon what projection that you are using to what kinds of errors
> you will get.  Mercator projection is very accurate at the 0 deg latitude.
> Transverse Mercator project is very accurate at along a line of longitude.
>
> Errors can be both latitude and longitude, depending on the projection.
> For example, a polar projection will have distortion anywhere but the
> center (the pole).
>
> Tissot's indicatrix is used as a graphic illustration of a projection's
> distortion.
> https://en.wikipedia.org/wiki/Tissot%27s_indicatrix
>
> You can calculate a grid distance, which can be very close or not close at
> all based on the projection.    Geodetic/geodesic distance algorithms from
> the GeographicLib::Geodesic libary (included with PROJ.4) has very accurate
> distance calculations.
> http://proj4.org/geodesic.html
>
> I'm not to sure about keeping track of the errors of a particular
> projection or how to exactly answer your specific questions.  I hope that
> gives you some pointers.
>
> In a slightly different tangent about using US Customary units for area
> and exactitude, I was looking at the difference between calculating acres
> using international feet (0.3048 m) and US Survey feet (0.3048006 m).  The
> size of this City is about 1000 sq km.  When converting to acres (area)
> using the two different feet as the basis of acres, I got a difference of
> 100 acres (40 hectares or 0.4 sq km) between the asnwers.  US Customary
> units make me crazy.
>
> Micah Cochran
>
> On Mon, Nov 20, 2017 at 11:13 AM, Ken Mankoff <mankoff at gmail.com> wrote:
>
>> Dear List,
>>
>> I've just learned that GRASS has a function to provide the true scale for
>> a given cell. From this, I can determine the map projection error.
>>
>> My understanding is that for a given projection, the "lat_ts" term of the
>> proj4 string describing the projection is where 1 m in GRASS is actually 1
>> m. Elsewhere, errors grow. I'd like to track these.
>>
>> I asked the following on the GRASS list and was advised that this list
>> might be a better place to ask:
>>
>> Is the scale error only in longitude and never in latitude? Or can it be
>> in both? Is there a way to find the error for a length error rather than an
>> area error? Specifically, for a vector line with an arbitrary heading?
>>
>> Thank you,
>>
>>   -k.
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171120/ffc3683c/attachment.html>

From strebe at aol.com  Mon Nov 20 21:32:42 2017
From: strebe at aol.com (strebe at aol.com)
Date: Tue, 21 Nov 2017 00:32:42 -0500
Subject: [Proj] Pixel area errors
In-Reply-To: <m27eukg9ga.fsf@gmail.com>
References: <m27eukg9ga.fsf@gmail.com>
Message-ID: <15fdd106e48-c0e-2fab9@webjas-vad150.srv.aolmail.net>

Ken,

For any projection, at any point that is not a singularity, you compute the Jacobian matrix at that point. From the Jacobian, you can determine the scale factor in any direction. The Jacobian is a convenient way to compute the Tissot indicatrix, which is the measure of distortion at the point.

See, for example:

Piotr H. Laskowski (1989), “The Traditional and Modern Look at Tissot’s Indicatrix”, 

The American Cartographer, 16:2, 123-133
http://dx.doi.org/10.1559/152304089783875497


If you only work in one projection, you can probably simplify quite a bit. For example, on spherical Mercator, the scale factor s is

s = sec φ

where φ is the latitude.

This is purely local distance I’m talking about here, which seems to be what you want. 

Regards,
— daan Strebe

 

 

 

-----Original Message-----
From: Ken Mankoff <mankoff at gmail.com>
To: proj <proj at lists.maptools.org>
Sent: Mon, Nov 20, 2017 9:14 am
Subject: [Proj] Pixel area errors

Dear List,

I've just learned that GRASS has a function to provide the true scale for a given cell. From this, I can determine the map projection error. 

My understanding is that for a given projection, the "lat_ts" term of the proj4 string describing the projection is where 1 m in GRASS is actually 1 m. Elsewhere, errors grow. I'd like to track these.

I asked the following on the GRASS list and was advised that this list might be a better place to ask:

Is the scale error only in longitude and never in latitude? Or can it be in both? Is there a way to find the error for a length error rather than an area error? Specifically, for a vector line with an arbitrary heading?

Thank you,

  -k.
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171121/1e219643/attachment.html>

From mankoff at gmail.com  Mon Nov 20 22:52:50 2017
From: mankoff at gmail.com (Ken Mankoff)
Date: Tue, 21 Nov 2017 07:52:50 +0100
Subject: [Proj] Pixel area errors
In-Reply-To: <CAH0YoEP51tuXj5ngLx9_k7wxmGumsDyH6S5PGwq9=gSs5t+hhg@mail.gmail.com>
References: <m27eukg9ga.fsf@gmail.com>
	<CAHLAsF2V3fX4kY+WEQmzk7ysKATQDnXDu_udB-O4xMydgi+DZw@mail.gmail.com>
	<CAH0YoEP51tuXj5ngLx9_k7wxmGumsDyH6S5PGwq9=gSs5t+hhg@mail.gmail.com>
Message-ID: <m2po8cdsxp.fsf@gmail.com>

Hi Thomas,

On 2017-11-20 at 20:56, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
> [...] Try running
>
> echo 12 55  |  proj -VS +proj=merc +ellps=GRS80 +lat_ts=55
>
> Which will give you information about the distortion of a point at 12
> E, 55 N (near Copenhagen, Denmark), for a mercator projection with a
> latitude of true scale of 55.

Thank you for this! This is exactly what I was looking for.

Cheers,

  -k.


From even.rouault at spatialys.com  Mon Nov 27 06:58:04 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 27 Nov 2017 15:58:04 +0100
Subject: [Proj] Conversion between LCC_1SP and LCC_2SP
Message-ID: <2020609.Ekj5z9VkZu@even-i700>

Hi,

This is just for your information, in case others bang their heads as I did.
I wanted to write a dataset with a SRS expressed in Lambert Conformal Conic 1SP (LCC_1SP)
but the target file format (MapInfo .mif/.tab) only supports LCC_2SP apparently

The EPSG guidance( and Snyder ) mentions:
"""From the one standard parallel and its scale factor it is possible to
derive the equivalent two standard parallels and then treat the projection 
as  a  two  standard  parallel  Lambert  conical  conformal,  but this
procedure is seldom adopted.""""

Obviously, the proof was left as an exercice to the readers. So did I, as
I couldn't find existing implementations.

You can find the result here:
https://github.com/OSGeo/gdal/blob/e3f1db90d60968dd5a1b6618cfc4b1dfa1ea3521/gdal/ogr/ogrspatialreference.cpp#L7241

This requires an iterative method to solve StdParallel1 and StdParallel2.

So for example EPSG:27584
'+proj=lcc +lat_1=42.165 +lat_0=42.165 +lon_0=0 +k_0=0.99994471
+x_0=234.358 +y_0=4185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0
+pm=paris +units=m +no_defs'

is equivalent to
'+proj=lcc +lat_1=42.76766346938247 +lat_2=41.56038784121728 +lat_0=42.165
+lon_0=0 +x_0=234.358 +y_0=4185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0
+pm=paris +units=m +no_defs '

And the reverse (LCC_2SP -> LCC_1SP) also works ( requires modifying the false
northing in the general case ):
https://github.com/OSGeo/gdal/blob/e3f1db90d60968dd5a1b6618cfc4b1dfa1ea3521/gdal/ogr/ogrspatialreference.cpp#L7333

and EPSG:2154
'+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000
+ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'

is equivalent to
''+proj=lcc +lat_1=46.5194302239868 +lat_0=46.5194302239868 +lon_0=3 +k_0=0.9990510286374693
+x_0=700000 +y_0=6602157.83881033 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171127/b301c5df/attachment.html>

From kreve at sdfe.dk  Mon Nov 27 10:45:02 2017
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 27 Nov 2017 18:45:02 +0000
Subject: [Proj] Several versions of the EGM96 grid
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEA7B14B@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAEA7B078@S000014.PROD.SITAD.DK>
	<or4u76$ar4$1@blaine.gmane.org> <or4uk0$d41$1@blaine.gmane.org>
	<2E885BB293AF0448A0181138489E9A0EAEA7B14B@S000014.PROD.SITAD.DK>
Message-ID: <5213BD34-AF01-480C-A2A3-0A1C9F1FBFDE@sdfe.dk>

Just a follow up on this for anyone interested. OSGeo4W now ships the correct EGM96 grid:

https://trac.osgeo.org/osgeo4w/ticket/543

/Kristian

On 5 Oct 2017, at 11:56, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:

Andre,

Well that clears that up. I see that you have already create a ticket with the OSGeo4W guys. Thanks!

/Kristian

-----Oprindelig meddelelse-----
Fra: proj-bounces at lists.maptools.org<mailto:proj-bounces at lists.maptools.org> [mailto:proj-bounces at lists.maptools.org] På vegne af Andre Joost
Sendt: 5. oktober 2017 11:38
Til: proj at lists.maptools.org<mailto:proj at lists.maptools.org>
Emne: Re: [Proj] Several versions of the EGM96 grid

Am 05.10.2017 um 11:31 schrieb Andre Joost:

If you look at:

http://download.osgeo.org/proj/vdatum/egm96_15/

You see a egm96_15-incorrect.gtx from 2010, and a "correct" one from 2014.

OSGEO4W64 has the one from 2010.


And the related ticket is .....:

https://github.com/OSGeo/proj.4/issues/126

So soemone should update the OSGEO4W file as well.

Greetings,
André Joost


_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171127/07bcbfe8/attachment.html>

From alon at skylinesoft.com  Wed Nov 29 21:57:19 2017
From: alon at skylinesoft.com (Alon Barzilai)
Date: Thu, 30 Nov 2017 07:57:19 +0200
Subject: [Proj] I this list is for bugs?
Message-ID: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171130/a99ab389/attachment.html>

From andre+joost at nurfuerspam.de  Thu Nov 30 04:34:50 2017
From: andre+joost at nurfuerspam.de (Andre Joost)
Date: Thu, 30 Nov 2017 13:34:50 +0100
Subject: [Proj] I this list is for bugs?
In-Reply-To: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
References: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
Message-ID: <ovotvh$8gf$1@blaine.gmane.org>

Am 30.11.2017 um 06:57 schrieb Alon Barzilai:
> Hi,
>
> I am new in this list, and I encountered in a bug. I hope this is the right
> place to post it.
>
> when using a coordinate system with vertical datum ( egm96_15.gtx in my case)

Have you got the latest version of the file from 2014? There was an 
older version from 2010 shipped until recently with OSGEO4W.

HTH,
André Joost



From even.rouault at spatialys.com  Thu Nov 30 04:50:31 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Nov 2017 13:50:31 +0100
Subject: [Proj] I this list is for bugs?
In-Reply-To: <ovotvh$8gf$1@blaine.gmane.org>
References: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
	<ovotvh$8gf$1@blaine.gmane.org>
Message-ID: <1622089.Js2t6eKAAz@even-i700>

On jeudi 30 novembre 2017 13:34:50 CET Andre Joost wrote:
> Am 30.11.2017 um 06:57 schrieb Alon Barzilai:
> > Hi,
> > 
> > I am new in this list, and I encountered in a bug. I hope this is the
> > right
> > place to post it.
> > 
> > when using a coordinate system with vertical datum ( egm96_15.gtx in my
> > case)
> Have you got the latest version of the file from 2014? There was an
> older version from 2010 shipped until recently with OSGEO4W.

I don't think that's the issue.

This sounds like
https://github.com/OSGeo/proj.4/issues/396
which has been fixed in proj master per
https://github.com/OSGeo/proj.4/commit/d64a5508c1efbc1ca6e126d959e19cf879462863

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171130/004fd674/attachment.html>

From alon at skylinesoft.com  Thu Nov 30 07:59:31 2017
From: alon at skylinesoft.com (Alon Barzilai)
Date: Thu, 30 Nov 2017 17:59:31 +0200
Subject: [Proj] I this list is for bugs?
In-Reply-To: <1622089.Js2t6eKAAz@even-i700>
References: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
	<ovotvh$8gf$1@blaine.gmane.org> <1622089.Js2t6eKAAz@even-i700>
Message-ID: <951bdb5d-8b00-0209-e1d6-bd2e96cb4b10@skylinesoft.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171130/8d5ee72b/attachment.html>

From alon at skylinesoft.com  Thu Nov 30 08:09:33 2017
From: alon at skylinesoft.com (Alon Barzilai)
Date: Thu, 30 Nov 2017 18:09:33 +0200
Subject: [Proj] I this list is for bugs?
In-Reply-To: <ovotvh$8gf$1@blaine.gmane.org>
References: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
	<ovotvh$8gf$1@blaine.gmane.org>
Message-ID: <8a8bb2cc-0522-bd6e-6b41-cd1128bfc29e@skylinesoft.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171130/02c7c286/attachment.html>

From alon at skylinesoft.com  Thu Nov 30 08:12:39 2017
From: alon at skylinesoft.com (Alon Barzilai)
Date: Thu, 30 Nov 2017 18:12:39 +0200
Subject: [Proj] I this list is for bugs?
In-Reply-To: <951bdb5d-8b00-0209-e1d6-bd2e96cb4b10@skylinesoft.com>
References: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
	<ovotvh$8gf$1@blaine.gmane.org> <1622089.Js2t6eKAAz@even-i700>
	<951bdb5d-8b00-0209-e1d6-bd2e96cb4b10@skylinesoft.com>
Message-ID: <88807a42-bd63-48a4-a849-7a7449501d1d@skylinesoft.com>

An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171130/310236b7/attachment.html>

From even.rouault at spatialys.com  Thu Nov 30 08:13:58 2017
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Nov 2017 17:13:58 +0100
Subject: [Proj] I this list is for bugs?
In-Reply-To: <8a8bb2cc-0522-bd6e-6b41-cd1128bfc29e@skylinesoft.com>
References: <d466dea4-50f5-d2e4-0db0-17dc52d15a88@skylinesoft.com>
	<ovotvh$8gf$1@blaine.gmane.org>
	<8a8bb2cc-0522-bd6e-6b41-cd1128bfc29e@skylinesoft.com>
Message-ID: <4228947.kmXL97ieTr@even-i700>

On jeudi 30 novembre 2017 18:09:33 CET Alon Barzilai wrote:
> Thanks,
> I Actually used the old version, so now I switched the the new one.
> however, using the new version do not fix the bug.

Please provide a reproducable way of exercising the issue

Even

> 
> Alon.
> 
> 
> On 11/30/2017 2:34 PM, Andre Joost wrote:
> Am 30.11.2017 um 06:57 schrieb Alon Barzilai:
> Hi,
> 
> I am new in this list, and I encountered in a bug. I hope this is the right
> place to post it.
> 
> when using a coordinate system with vertical datum ( egm96_15.gtx in my
> case) Have you got the latest version of the file from 2014? There was an
> older version from 2010 shipped until recently with OSGEO4W.
> 
> HTH,
> André Joost
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20171130/b10f9e9f/attachment.html>

