From m.b at speleo.sk  Wed Apr  6 07:42:05 2022
From: m.b at speleo.sk (Martin Budaj)
Date: Wed, 6 Apr 2022 16:42:05 +0200
Subject: [PROJ] detect missing grids in proj_create()
In-Reply-To: <CALPsdSuqxZ1wPmCa6DFXnnp-dTJHTLaGCkwSd7fPE2bLn5gj2w@mail.gmail.com>
References: <CALPsdSuqxZ1wPmCa6DFXnnp-dTJHTLaGCkwSd7fPE2bLn5gj2w@mail.gmail.com>
Message-ID: <CALPsdSs34LbmUMzKmQJSf8zT4NWd_-98RuYTiwEdCfOB5CB45w@mail.gmail.com>

Hi,

I use custom pipelines with proj_create() to get a precise direct
transformation between coordinate systems if proj_create_operations()
doesn't offer a transformation that is good enough.

If a transformation grid used in a pipeline is not found,
proj_create() fails. Is there a way to detect which grids are needed
for download? I can't use proj_coordoperation_get_grid_used() in this
case, as there is no coordoperation available.

Thanks,
Martin

From bashkim.idrizi at yahoo.com  Wed Apr  6 07:48:28 2022
From: bashkim.idrizi at yahoo.com (Bashkim IDRIZI)
Date: Wed, 6 Apr 2022 16:48:28 +0200
Subject: [PROJ] Need for New CRS's with default datum transformation in PROJ
 with EPSG 6206 for North Macedonian three CRSs'
References: <00b401d849c5$61a94da0$24fbe8e0$.ref@yahoo.com>
Message-ID: <00b401d849c5$61a94da0$24fbe8e0$@yahoo.com>

Dear All, 

 

First let me to introduce myself. I am Bashkim Idrizi from North Macedonia. Lecturer of cartography and GIS in geodesy department. 

 

Recently on March 18, three changes have been made by our request in EPSG registry database (epsg.org, 2022.009), concerning to CRS of North Macedonia. Based on new updates, there are three CRSs? for North Macedonian CRS: 6204, 6316 and 9945.   

 

Next step toward elimination of problems with usage of CRS?s for North Macedonian spatial data, is defining single default datum transformation for three CRS?s (6204, 6316 and 9945), based on EPSG 6206 for datum transformation between MGI 1901 and WGS84. 

This is very important for GIS users in our country, because at this moment, overlapping with open data such google map etc., is with very very low accuracy. 

 

My request is to create three proj strings as default for upper three mentioned CRS?s, in order to be used by all GIS software users without need for deep knowledge for coordinate systems:  

   


CRS

PROJ STRING 

Datim transformation EPSG code


EPSG 6204

+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=500000 +y_0=0 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs

 

6206


EPSG 

6316

+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs

 

6206


EPSG 

9945

+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=500000 +y_0=-4000000 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs

 

6206

 

This initiative I started with paper that have been published and presented in ICA conference 2021 https://www.proc-int-cartogr-assoc.net/4/45/2021 

 

To be more clear, my intention is to make simple and easier usage of CRS?s by users in North Macedonia in a case when they overlap official data with data coming from other sources based on WGS84 datum. 

As example I will mention QGIS software, which use default datum transformation parameters, and in parallel offers ?ask? option if several datum transformations are available. Second option can be used by geodetic professionals, however most of GIS users are not able to use this option and they have troubles in overlapping their data in state CRS with global data such openstreetmap, google map, etc. 

Therefore I started this initiative to solve this problem step by step. First was creating all EPSG codes for three type of spatial data which was finished in March 18th, and second is this/todays request to you for defining in PROJ the EPSG 6206 as default datum transformation for three CRS?s (6204, 6316 and 9945), which will enable their usage by all GIS software users without deep knowledge in coordinate systems. 

 

Maybe my explanation was not precise in above text, therefore I will try to give some additional details on this issue. I order to be more clear I will explain with concrete example by QGIS software: 

1.	In current version of EPSG 6316, in a case of usage in QGIS with non-checked ?ask option if several datum transformations are available?, software doesn?t ask user for selecting of appropriate transformation, and use bellow values as default transformation: +proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs
2.	More than 90% of users (except geodetic professionals) don?t know what is datum transformation, and they uncheck the ?ask option if several datum transformations are available? option (from setting/options/CRS/transformations), or never use if this box is unchecked by installation. 

1.	In this case, QGIS software users in our country works with totally wrong datum transformation, which results with large difference between data in 6316 with global data developed in WGS84. 

3.	In order to avoid such problems, my request is to change those ?default? datum transformation parameters (+towgs84=682,-203,480,0,0,0,0) in a case when the box ?ask option if several datum transformations are available? is unchecked, with the transformation parameters defined in 6202 (+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs). 

1.	Maybe ?default datum transformation? is not appropriate term. Now I hope that my request is more clear. 

4.	I am aware that QGIS will continue to propose all candidate operations reported by PROJ in a case when CRS intersects with several areas in a case when box ?ask option if several datum transformations are available? is checked. This is correct and it very important for geodetic experts, that are able to use appropriate transformation in a case of several transformation parameters are available. 
5.	Main objective of my request is only in a case when user don?t check/use the box ?ask option if several datum transformations are available? and software work with default transformation parameters. 

1.	In this case, as datum transformation to WGS84 for three CRS?s (EPSG 6316, EPSG 6204, and EPSG 9945) to be set EPSG 6206 as primary/default datum transformation from MGI 1901 to WGS84 (see table in my previous email). 

 

 

If the request is not clear, please don?t hesitate to ask me for every detail, as well as I am able to schedule online meeting with you. 

 

Sincerely yours, 

Bashkim Idrizi. 

 

 

 

 

==================================================

 <https://bashkim-idrizi.blogspot.com/> Prof.Dr. Bashkim IDRIZI

----------------------------------------------------------------------------------

 <http://www.uni-pr.edu/> University of Prishtina, Cartography & GIS lecturer 

 <http://www.unt.edu.mk/> University "Mother Teresa" Skopje, Cartography lecturer 

 <http://www.geo-see.org/> Geo-SEE Institute, President   

 <http://www.unite.edu.mk/> State University of Tetova, Past cartography & GIS lecturer 

 <http://www.karl-gega.org/> Karl Gega Association, Past President   

adress: str. Djon Kenedi, 25/4-20; 1010 Skopje, North Macedonia. 

gsm-mk: + 389 /75/ 712-998 (Viber & WhatsApp)

gsm-ks: + 383 /45/ 341-098  

skype: bashkim.idrizi   (bashkim.idrizi at yahoo.com <mailto:bashkim.idrizi at yahoo.com> )

==================================================

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220406/e1d0f797/attachment-0001.html>

From even.rouault at spatialys.com  Wed Apr  6 08:54:34 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 6 Apr 2022 17:54:34 +0200
Subject: [PROJ] Need for New CRS's with default datum transformation in
 PROJ with EPSG 6206 for North Macedonian three CRSs'
In-Reply-To: <00b401d849c5$61a94da0$24fbe8e0$@yahoo.com>
References: <00b401d849c5$61a94da0$24fbe8e0$.ref@yahoo.com>
 <00b401d849c5$61a94da0$24fbe8e0$@yahoo.com>
Message-ID: <7ab19f3b-ce0b-667d-7e55-5dab54d68469@spatialys.com>

Bashkim,

 From some tests, PROJ master with the latest EPSG update (and thus QGIS 
for versions that will use it) should use the EPSG:6206 transformation 
by default for CRS 6204 and 9945. I've also just queued an improvement 
in https://github.com/OSGeo/PROJ/pull/3158 for the generation of PROJ.4 
string for those CRSs, but that should not really impact QGIS use

EPSG:6316 is a more difficult case because this CRS has 2 usages/extents:

 ??? USAGE[
 ??????? SCOPE["Cadastre, engineering survey, topographic mapping (large 
and medium scale)."],
 ??????? AREA["Bosnia and Herzegovina - east of 19?30'E; Kosovo; 
Montenegro - east of 19?30'E; Serbia - between 19?30'E and 22?30'E."],
 ??????? BBOX[41.85,19.5,46.18,22.5]],
 ??? USAGE[
 ??????? SCOPE["Cadastre."],
 ??????? AREA["North Macedonia."],
 ??????? BBOX[40.85,20.45,42.36,23.04]],

PROJ internals (especially the part that "computes" transformation 
pipeline) only use one single usage/extent in part of logics that are 
extent base, and this must be the first one listed, hence not North 
Macedonia. And even if both would be considered, selecting EPSG:6206 as 
a default transformation wouldn't be appropriate for the non-North 
Macedonia usage.

Even

Le 06/04/2022 ? 16:48, Bashkim IDRIZI via PROJ a ?crit?:
>
> Dear All,
>
> First let me to introduce myself. I am Bashkim Idrizi from North 
> Macedonia. Lecturer of cartography and GIS in geodesy department.
>
> Recently on March 18, three changes have been made by our request in 
> EPSG registry database (epsg.org, 2022.009), concerning to CRS of 
> North Macedonia. Based on new updates, there are three CRSs? for North 
> Macedonian CRS: 6204, 6316 and 9945.
>
> Next step toward elimination of problems with usage of CRS?s for North 
> Macedonian spatial data, is defining single default datum 
> transformation for three CRS?s (6204, 6316 and 9945), based on EPSG 
> 6206 for datum transformation between MGI 1901 and WGS84.
>
> This is very important for GIS users in our country, because at this 
> moment, overlapping with open data such google map etc., is with very 
> very low accuracy.
>
> My request is to create three proj strings as default for upper three 
> mentioned CRS?s, in order to be used by all GIS software users without 
> need for deep knowledge for coordinate systems:
>
> *CRS*
>
> 	
>
> *PROJ STRING *
>
> 	
>
> *Datim transformation EPSG code*
>
> EPSG 6204
>
> 	
>
> +proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=500000 +y_0=0 
> +ellps=bessel 
> +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m 
> +no_defs
>
> 	
>
> 6206
>
> EPSG
>
> 6316
>
> 	
>
> +proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 
> +ellps=bessel 
> +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m 
> +no_defs
>
> 	
>
> 6206
>
> EPSG
>
> 9945
>
> 	
>
> +proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=500000 +y_0=-4000000 
> +ellps=bessel 
> +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m 
> +no_defs
>
> 	
>
> 6206
>
> This initiative I started with paper that have been published and 
> presented in ICA conference 2021 
> https://www.proc-int-cartogr-assoc.net/4/45/2021
>
> To be more clear, my intention is to make simple and easier usage of 
> CRS?s by users in North Macedonia in a case when they overlap official 
> data with data coming from other sources based on WGS84 datum.
>
> As example I will mention QGIS software, which use default datum 
> transformation parameters, and in parallel offers ?ask? option if 
> several datum transformations are available. Second option can be used 
> by geodetic professionals, however most of GIS users are not able to 
> use this option and they have troubles in overlapping their data in 
> state CRS with global data such openstreetmap, google map, etc.
>
> Therefore I started this initiative to solve this problem step by 
> step. First was creating all EPSG codes for three type of spatial data 
> which was finished in March 18^th , and second is this/todays request 
> to you for defining in PROJ the EPSG 6206 as default datum 
> transformation for three CRS?s (6204, 6316 and 9945), which will 
> enable their usage by all GIS software users without deep knowledge in 
> coordinate systems.
>
> Maybe my explanation was not precise in above text, therefore I will 
> try to give some additional details on this issue. I order to be more 
> clear I will explain with concrete example by QGIS software:
>
>  1. In current version of EPSG 6316, in a case of usage in QGIS with
>     non-checked ?ask option if several datum transformations are
>     available?, software doesn?t ask user for selecting of appropriate
>     transformation, and use bellow values as default transformation:
>     +proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0
>     +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs
>  2. More than 90% of users (except geodetic professionals) don?t know
>     what is datum transformation, and they uncheck the ?ask option if
>     several datum transformations are available? option (from
>     setting/options/CRS/transformations), or never use if this box is
>     unchecked by installation.
>      1. In this case, QGIS software users in our country works with
>         totally wrong datum transformation, which results with large
>         difference between data in 6316 with global data developed in
>         WGS84.
>  3. In order to avoid such problems, my request is to change those
>     ?default? datum transformation parameters
>     (+towgs84=682,-203,480,0,0,0,0) in a case when the box ?ask option
>     if several datum transformations are available? is unchecked, with
>     the transformation parameters defined in 6202 (+proj=tmerc
>     +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel
>     *+towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78*
>     +units=m +no_defs).
>      1. Maybe ?default datum transformation? is not appropriate term.
>         Now I hope that my request is more clear.
>  4. I am aware that QGIS will continue to propose all candidate
>     operations reported by PROJ in a case when CRS intersects with
>     several areas in a case when box ?ask option if several datum
>     transformations are available? is checked. This is correct and it
>     very important for geodetic experts, that are able to use
>     appropriate transformation in a case of several transformation
>     parameters are available.
>  5. *_Main objective of my request is only in a case when user don?t
>     check/use the box ?ask option if several datum transformations are
>     available? and software work with default transformation
>     parameters. _*
>      1. *_In this case, as datum transformation to WGS84 for three
>         CRS?s (EPSG 6316, EPSG 6204, and EPSG 9945) to be set EPSG
>         6206 as primary/default datum transformation from MGI 1901 to
>         WGS84 (see table in my previous email). _*
>
> If the request is not clear, please don?t hesitate to ask me for every 
> detail, as well as I am able to schedule online meeting with you.
>
> Sincerely yours,
>
> Bashkim Idrizi.
>
> ==================================================
>
> *Prof.Dr. Bashkim IDRIZI <https://bashkim-idrizi.blogspot.com/>*
>
> *----------------------------------------------------------------------------------*
>
> University of Prishtina <http://www.uni-pr.edu/>/,?Cartography?&?GIS 
> lecturer/
>
> University "Mother Teresa" Skopje <http://www.unt.edu.mk/>/, 
> Cartography lecturer /
>
> Geo-SEE Institute <http://www.geo-see.org/>/,?President /
>
> State University of Tetova <http://www.unite.edu.mk/>/, Past 
> cartography & GIS lecturer /
>
> _Karl Gega Association, <http://www.karl-gega.org/>_/?Past President /
>
> adress: str. Djon Kenedi, 25/4-20; 1010 Skopje, North Macedonia.
>
> gsm-mk: + 389 /75/ 712-998 (Viber & WhatsApp)
>
> gsm-ks: + 383 /45/ 341-098
>
> skype: bashkim.idrizi ? (bashkim.idrizi at yahoo.com)
>
> ==================================================
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220406/f054e984/attachment-0001.html>

From bashkim.idrizi at yahoo.com  Thu Apr  7 10:47:32 2022
From: bashkim.idrizi at yahoo.com (Bashkim IDRIZI)
Date: Thu, 7 Apr 2022 19:47:32 +0200
Subject: [PROJ] Need for New CRS's with default datum transformation in
 PROJ with EPSG 6206 for North Macedonian three CRSs'
In-Reply-To: <7ab19f3b-ce0b-667d-7e55-5dab54d68469@spatialys.com>
References: <00b401d849c5$61a94da0$24fbe8e0$.ref@yahoo.com>
 <00b401d849c5$61a94da0$24fbe8e0$@yahoo.com>
 <7ab19f3b-ce0b-667d-7e55-5dab54d68469@spatialys.com>
Message-ID: <00fd01d84aa7$8ff5bcb0$afe13610$@yahoo.com>

Dear Even, 

 

Thanks for your quick response. Very fruitful assistance! 

 

Concerning to EPSG 6316, as I understood, the only way is to create new-separate CRS for North Macedonia with same parameters of 6316, in order to solve our problem. This means that we should go back to EPSG with new request for new CRS! 

Do you have any other idea? 

 

Thanks in advance. 

Bashkim. 

 

From: Even Rouault <even.rouault at spatialys.com> 
Sent: Wednesday, April 6, 2022 5:55 PM
To: Bashkim IDRIZI <bashkim.idrizi at yahoo.com>; proj at lists.osgeo.org
Subject: Re: [PROJ] Need for New CRS's with default datum transformation in PROJ with EPSG 6206 for North Macedonian three CRSs'

 

Bashkim,

>From some tests, PROJ master with the latest EPSG update (and thus QGIS for versions that will use it) should use the EPSG:6206 transformation by default for CRS 6204 and 9945. I've also just queued an improvement in https://github.com/OSGeo/PROJ/pull/3158 for the generation of PROJ.4 string for those CRSs, but that should not really impact QGIS use

EPSG:6316 is a more difficult case because this CRS has 2 usages/extents:

    USAGE[
        SCOPE["Cadastre, engineering survey, topographic mapping (large and medium scale)."],
        AREA["Bosnia and Herzegovina - east of 19?30'E; Kosovo; Montenegro - east of 19?30'E; Serbia - between 19?30'E and 22?30'E."],
        BBOX[41.85,19.5,46.18,22.5]],
    USAGE[
        SCOPE["Cadastre."],
        AREA["North Macedonia."],
        BBOX[40.85,20.45,42.36,23.04]],

PROJ internals (especially the part that "computes" transformation pipeline) only use one single usage/extent in part of logics that are extent base, and this must be the first one listed, hence not North Macedonia. And even if both would be considered, selecting EPSG:6206 as a default transformation wouldn't be appropriate for the non-North Macedonia usage.

Even

Le 06/04/2022 ? 16:48, Bashkim IDRIZI via PROJ a ?crit :

Dear All, 

 

First let me to introduce myself. I am Bashkim Idrizi from North Macedonia. Lecturer of cartography and GIS in geodesy department. 

 

Recently on March 18, three changes have been made by our request in EPSG registry database (epsg.org, 2022.009), concerning to CRS of North Macedonia. Based on new updates, there are three CRSs? for North Macedonian CRS: 6204, 6316 and 9945.   

 

Next step toward elimination of problems with usage of CRS?s for North Macedonian spatial data, is defining single default datum transformation for three CRS?s (6204, 6316 and 9945), based on EPSG 6206 for datum transformation between MGI 1901 and WGS84. 

This is very important for GIS users in our country, because at this moment, overlapping with open data such google map etc., is with very very low accuracy. 

 

My request is to create three proj strings as default for upper three mentioned CRS?s, in order to be used by all GIS software users without need for deep knowledge for coordinate systems:  

   


CRS

PROJ STRING 

Datim transformation EPSG code


EPSG 6204

+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=500000 +y_0=0 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs

 

6206


EPSG 

6316

+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs

 

6206


EPSG 

9945

+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=500000 +y_0=-4000000 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs

 

6206

 

This initiative I started with paper that have been published and presented in ICA conference 2021 https://www.proc-int-cartogr-assoc.net/4/45/2021 

 

To be more clear, my intention is to make simple and easier usage of CRS?s by users in North Macedonia in a case when they overlap official data with data coming from other sources based on WGS84 datum. 

As example I will mention QGIS software, which use default datum transformation parameters, and in parallel offers ?ask? option if several datum transformations are available. Second option can be used by geodetic professionals, however most of GIS users are not able to use this option and they have troubles in overlapping their data in state CRS with global data such openstreetmap, google map, etc. 

Therefore I started this initiative to solve this problem step by step. First was creating all EPSG codes for three type of spatial data which was finished in March 18th, and second is this/todays request to you for defining in PROJ the EPSG 6206 as default datum transformation for three CRS?s (6204, 6316 and 9945), which will enable their usage by all GIS software users without deep knowledge in coordinate systems. 

 

Maybe my explanation was not precise in above text, therefore I will try to give some additional details on this issue. I order to be more clear I will explain with concrete example by QGIS software: 

1.	In current version of EPSG 6316, in a case of usage in QGIS with non-checked ?ask option if several datum transformations are available?, software doesn?t ask user for selecting of appropriate transformation, and use bellow values as default transformation: +proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs
2.	More than 90% of users (except geodetic professionals) don?t know what is datum transformation, and they uncheck the ?ask option if several datum transformations are available? option (from setting/options/CRS/transformations), or never use if this box is unchecked by installation. 

1.	In this case, QGIS software users in our country works with totally wrong datum transformation, which results with large difference between data in 6316 with global data developed in WGS84. 

3.	In order to avoid such problems, my request is to change those ?default? datum transformation parameters (+towgs84=682,-203,480,0,0,0,0) in a case when the box ?ask option if several datum transformations are available? is unchecked, with the transformation parameters defined in 6202 (+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=521.748,229.489,590.921,4.029,4.488,-15.521,-9.78 +units=m +no_defs). 

1.	Maybe ?default datum transformation? is not appropriate term. Now I hope that my request is more clear. 

4.	I am aware that QGIS will continue to propose all candidate operations reported by PROJ in a case when CRS intersects with several areas in a case when box ?ask option if several datum transformations are available? is checked. This is correct and it very important for geodetic experts, that are able to use appropriate transformation in a case of several transformation parameters are available. 
5.	Main objective of my request is only in a case when user don?t check/use the box ?ask option if several datum transformations are available? and software work with default transformation parameters. 

1.	In this case, as datum transformation to WGS84 for three CRS?s (EPSG 6316, EPSG 6204, and EPSG 9945) to be set EPSG 6206 as primary/default datum transformation from MGI 1901 to WGS84 (see table in my previous email). 

 

 

If the request is not clear, please don?t hesitate to ask me for every detail, as well as I am able to schedule online meeting with you. 

 

Sincerely yours, 

Bashkim Idrizi. 

 

 

 

 

==================================================

 <https://bashkim-idrizi.blogspot.com/> Prof.Dr. Bashkim IDRIZI

----------------------------------------------------------------------------------

 <http://www.uni-pr.edu/> University of Prishtina, Cartography & GIS lecturer 

 <http://www.unt.edu.mk/> University "Mother Teresa" Skopje, Cartography lecturer 

 <http://www.geo-see.org/> Geo-SEE Institute, President   

 <http://www.unite.edu.mk/> State University of Tetova, Past cartography & GIS lecturer 

 <http://www.karl-gega.org/> Karl Gega Association, Past President   

adress: str. Djon Kenedi, 25/4-20; 1010 Skopje, North Macedonia. 

gsm-mk: + 389 /75/ 712-998 (Viber & WhatsApp)

gsm-ks: + 383 /45/ 341-098  

skype: bashkim.idrizi   (bashkim.idrizi at yahoo.com <mailto:bashkim.idrizi at yahoo.com> )

==================================================





_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org> 
https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220407/cf2eca6e/attachment-0001.html>

From even.rouault at spatialys.com  Thu Apr  7 11:11:29 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 7 Apr 2022 20:11:29 +0200
Subject: [PROJ] Need for New CRS's with default datum transformation in
 PROJ with EPSG 6206 for North Macedonian three CRSs'
In-Reply-To: <00fd01d84aa7$8ff5bcb0$afe13610$@yahoo.com>
References: <00b401d849c5$61a94da0$24fbe8e0$.ref@yahoo.com>
 <00b401d849c5$61a94da0$24fbe8e0$@yahoo.com>
 <7ab19f3b-ce0b-667d-7e55-5dab54d68469@spatialys.com>
 <00fd01d84aa7$8ff5bcb0$afe13610$@yahoo.com>
Message-ID: <f387b8fa-7f49-0ec5-e038-f4961b64fc47@spatialys.com>

Bashkim,
>
> Concerning to EPSG 6316, as I understood, the only way is to create 
> new-separate CRS for North Macedonia with same parameters of 6316, in 
> order to solve our problem. This means that we should go back to EPSG 
> with new request for new CRS!
>
if I were them, I would not be very excited to do that, as their 
database is going to be a full mess if every user tries to add such 
hacks into it
>
> Do you have any other idea?
>
No, that's an hard topic. No easy solution. The solution might be that 
QGIS would be modified to no longer select the default transformation 
proposed by PROJ, and instead lets PROJ decide at conversion time which 
transformation to apply for each point. But that won't be perfect 
either, given that PROJ only uses a bounding box approach, and not the 
polygonal shape of the extents.

Another solution if you want to create a custom installation is to 
remove from the PROJ database the transformation(s) that you don't want, 
but I understand that's not what you want to do.

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220407/de37c558/attachment.html>

From mwtoews at gmail.com  Thu Apr  7 13:58:42 2022
From: mwtoews at gmail.com (Mike Taves)
Date: Fri, 8 Apr 2022 08:58:42 +1200
Subject: [PROJ] Need for New CRS's with default datum transformation in
 PROJ with EPSG 6206 for North Macedonian three CRSs'
In-Reply-To: <f387b8fa-7f49-0ec5-e038-f4961b64fc47@spatialys.com>
References: <00b401d849c5$61a94da0$24fbe8e0$.ref@yahoo.com>
 <00b401d849c5$61a94da0$24fbe8e0$@yahoo.com>
 <7ab19f3b-ce0b-667d-7e55-5dab54d68469@spatialys.com>
 <00fd01d84aa7$8ff5bcb0$afe13610$@yahoo.com>
 <f387b8fa-7f49-0ec5-e038-f4961b64fc47@spatialys.com>
Message-ID: <CAM2FmMqscj77=j+rLsqySOEBEtkdNdvYJzYnVbbzngfp+1y4UA@mail.gmail.com>

On Fri, 8 Apr 2022 at 06:11, Even Rouault <even.rouault at spatialys.com> wrote:
> Do you have any other idea?
>
> No, that's an hard topic. No easy solution. The solution might be that QGIS would be modified to no longer select the default transformation proposed by PROJ, and instead lets PROJ decide at conversion time which transformation to apply for each point. But that won't be perfect either, given that PROJ only uses a bounding box approach, and not the polygonal shape of the extents.

See also https://github.com/OSGeo/PROJ/issues/1461

From josch at mister-muffin.de  Thu Apr 14 08:16:36 2022
From: josch at mister-muffin.de (Johannes Schauer Marin Rodrigues)
Date: Thu, 14 Apr 2022 17:16:36 +0200
Subject: [PROJ] Migrating to proj API 6+ without forcing crs input
Message-ID: <164994939680.2958.10371652995874422677@localhost>

Dear proj list,

in my application [1] I was using the ability of the Python mapnik library to
render an arbitrary transformation by supplying my own custom proj string (a
+proj=pipeline with +proj=tinshift). This stopped working when mapnik
implemented support for the proj API 6+ [2] because mapnik followed the proj
migration guide and turned code that looked like this before:

    projPJ pj_longlat = pj_init_plus(source);
    projPJ pj_merc = pj_init_plus(target);
    pj_transform(pj_longlat, pj_merc, ...)

Into code that looks like this:

    PJ *P = proj_create_crs_to_crs(PJ_DEFAULT_CTX, source, target, NULL);
    proj_trans(P, PJ_FWD, ...);

This means that in contrast to before, the source and target transformation
must now be a CRS. My own custom proj string (a pipeline) is not a CRS and thus
my code is now non-functional with mapnik versions from git.

I want to contribute an alternative codepath to mapnik which restores its
previous ability to work with arbitrary proj strings (even those that are not a
CRS). But how is this done? All projects that migrated to API 6+ that I was
able to find follow the migration guide and call proj_create_crs_to_crs.

So my question ultimately becomes: how do I implement proj API 6+ support
without proj_create_crs_to_crs so that the software retains its ability to
handle arbitrary user-supplied proj strings?

I also asked the same question on stackoverflow [3] in case somebody wants to
grab the bounty.

Thanks!

cheers, josch


[1] https://blog.mister-muffin.de/2014/04/03/mapbender---maps-for-long-distance-travels/
[2] https://github.com/mapnik/mapnik/commit/88241b32eeaccdc9eda7b92b7e7b6d4deac88e12
[3] https://stackoverflow.com/questions/71823105/migrating-to-proj-api-6-without-forcing-crs-input
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220414/169aad2d/attachment.sig>

From even.rouault at spatialys.com  Thu Apr 14 08:41:05 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 14 Apr 2022 17:41:05 +0200
Subject: [PROJ] Migrating to proj API 6+ without forcing crs input
In-Reply-To: <164994939680.2958.10371652995874422677@localhost>
References: <164994939680.2958.10371652995874422677@localhost>
Message-ID: <c6d6d886-1b88-ed00-a9d7-ce19793ab9c5@spatialys.com>

I already answered (I admit I more and more terse with years) in 
https://github.com/OSGeo/PROJ/issues/3161#issuecomment-1094238124

So for your case where you don't have a CRS but a pipeline, and assuming 
it serves the role of the source, you'd need an alternate code path that 
would do

PJ* P = proj_create(ctxt, "+proj=pipeline " + 
your_pipeline_without_proj_equal_pipeline_and_with_steps_in_reverse_order_and_with_+inv_qualifier_added_when_absent_or_removed_when_present 
+ " +step " + proj_string_of_target )

proj_trans(P, PJ_FWD, ...);

so yes, there's a bunch of PROJ string manipulation to do.

Even

Le 14/04/2022 ? 17:16, Johannes Schauer Marin Rodrigues a ?crit?:
> Dear proj list,
>
> in my application [1] I was using the ability of the Python mapnik library to
> render an arbitrary transformation by supplying my own custom proj string (a
> +proj=pipeline with +proj=tinshift). This stopped working when mapnik
> implemented support for the proj API 6+ [2] because mapnik followed the proj
> migration guide and turned code that looked like this before:
>
>      projPJ pj_longlat = pj_init_plus(source);
>      projPJ pj_merc = pj_init_plus(target);
>      pj_transform(pj_longlat, pj_merc, ...)
>
> Into code that looks like this:
>
>      PJ *P = proj_create_crs_to_crs(PJ_DEFAULT_CTX, source, target, NULL);
>      proj_trans(P, PJ_FWD, ...);
>
> This means that in contrast to before, the source and target transformation
> must now be a CRS. My own custom proj string (a pipeline) is not a CRS and thus
> my code is now non-functional with mapnik versions from git.
>
> I want to contribute an alternative codepath to mapnik which restores its
> previous ability to work with arbitrary proj strings (even those that are not a
> CRS). But how is this done? All projects that migrated to API 6+ that I was
> able to find follow the migration guide and call proj_create_crs_to_crs.
>
> So my question ultimately becomes: how do I implement proj API 6+ support
> without proj_create_crs_to_crs so that the software retains its ability to
> handle arbitrary user-supplied proj strings?
>
> I also asked the same question on stackoverflow [3] in case somebody wants to
> grab the bounty.
>
> Thanks!
>
> cheers, josch
>
>
> [1] https://blog.mister-muffin.de/2014/04/03/mapbender---maps-for-long-distance-travels/
> [2] https://github.com/mapnik/mapnik/commit/88241b32eeaccdc9eda7b92b7e7b6d4deac88e12
> [3] https://stackoverflow.com/questions/71823105/migrating-to-proj-api-6-without-forcing-crs-input
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From josch at mister-muffin.de  Thu Apr 14 09:55:05 2022
From: josch at mister-muffin.de (Johannes Schauer Marin Rodrigues)
Date: Thu, 14 Apr 2022 18:55:05 +0200
Subject: [PROJ] Migrating to proj API 6+ without forcing crs input
In-Reply-To: <c6d6d886-1b88-ed00-a9d7-ce19793ab9c5@spatialys.com>
References: <164994939680.2958.10371652995874422677@localhost>
 <c6d6d886-1b88-ed00-a9d7-ce19793ab9c5@spatialys.com>
Message-ID: <164995530548.2958.11935823996419024925@localhost>

Hi Even,

Quoting Even Rouault (2022-04-14 17:41:05)
> I already answered (I admit I more and more terse with years) in 
> https://github.com/OSGeo/PROJ/issues/3161#issuecomment-1094238124
> 
> So for your case where you don't have a CRS but a pipeline, and assuming 
> it serves the role of the source, you'd need an alternate code path that 
> would do
> 
> PJ* P = proj_create(ctxt, "+proj=pipeline " + 
> your_pipeline_without_proj_equal_pipeline_and_with_steps_in_reverse_order_and_with_+inv_qualifier_added_when_absent_or_removed_when_present 
> + " +step " + proj_string_of_target )
> 
> proj_trans(P, PJ_FWD, ...);
> 
> so yes, there's a bunch of PROJ string manipulation to do.

thanks for your reply! So you suggest that projects that are upgrading to proj
API 6+ and want to continue supporting non-CRS user-supplied strings should
resort to implementing their own proj string parser and transformation code? Is
there not something that can be provided by proj itself to make this easier?
If proj would add some code to support this, then this would also prevent a
number of differently buggy proj parsing and transformation codebases to be
implemented by every project that cares about non-CRS input. It seems odd to me
that with upgrading to a new API version, the use-case of using proj for
non-CRS input is now so hard where before it just worked out-of-the box.

If there are no plans to add some helper function for this use-case, can you
confirm that the right solution would be something like (some error checking
omitted for brevity):

    PJ *P;
    PJ *source = proj_create(ctx, source_string);
    PJ *target = proj_create(ctx, target_string);
    if(proj_is_crs(source) && proj_is_crs(target)) {
        P = proj_create_crs_to_crs_from_pj(ctx, source, target, NULL, NULL);
        // continue with proj_normalize_for_visualization according to the migration guide
    } else {
        /* 1. if source is a pipeline:
                 1.1. parse the pipeline string and remove
                 1.2. reverse steps
                 1.3. invert +inv
           2. if target is a pipeline, keep the order and +inv as is
         */
        P = proj_create(ctx, "+proj=pipeline +step " +
              /* result of (1.) without leading +proj=pipeline */
              + " +step " +
              /* result of (2.) without leading +proj=pipeline */
        );
    }

What to do if source or target is not a CRS and also not a pipeline?

Thanks again!

cheers, josch
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220414/8e539385/attachment.sig>

From even.rouault at spatialys.com  Thu Apr 14 10:31:07 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 14 Apr 2022 19:31:07 +0200
Subject: [PROJ] Migrating to proj API 6+ without forcing crs input
In-Reply-To: <164995530548.2958.11935823996419024925@localhost>
References: <164994939680.2958.10371652995874422677@localhost>
 <c6d6d886-1b88-ed00-a9d7-ce19793ab9c5@spatialys.com>
 <164995530548.2958.11935823996419024925@localhost>
Message-ID: <d94a544c-d677-ec44-bea2-f9f925db2b8e@spatialys.com>


Le 14/04/2022 ? 18:55, Johannes Schauer Marin Rodrigues a ?crit?:
> Hi Even,
>
> Quoting Even Rouault (2022-04-14 17:41:05)
>> I already answered (I admit I more and more terse with years) in
>> https://github.com/OSGeo/PROJ/issues/3161#issuecomment-1094238124
>>
>> So for your case where you don't have a CRS but a pipeline, and assuming
>> it serves the role of the source, you'd need an alternate code path that
>> would do
>>
>> PJ* P = proj_create(ctxt, "+proj=pipeline " +
>> your_pipeline_without_proj_equal_pipeline_and_with_steps_in_reverse_order_and_with_+inv_qualifier_added_when_absent_or_removed_when_present
>> + " +step " + proj_string_of_target )
>>
>> proj_trans(P, PJ_FWD, ...);
>>
>> so yes, there's a bunch of PROJ string manipulation to do.
> thanks for your reply! So you suggest that projects that are upgrading to proj
> API 6+ and want to continue supporting non-CRS user-supplied strings should
> resort to implementing their own proj string parser and transformation code?

Well, tinshift support was added after PROJ 6, so there's no real 
backward compatibility issue here.

Most of the past users of pj_transform() used it with PROJ strings that 
were CRS definitions, so we're a bit in the category of unanticipated / 
marginal use cases.

The reason for PROJ 6 to differenciate CRS from 
transformations/pipelines is that in past version PROJ strings that were 
meant to be CRS definitions used PROJ operation methods that can also be 
used to do transformations, hence it was a bit like a CRS was a 
transformation from something (some 'base' CRS not always well defined) 
to the CRS of interest. Stopping here my confusing digging into past 
design decisions :-), but basically there are good reasons of separating 
CRS and transformation/pipelines and not lightly mixing them together.

>   Is
> there not something that can be provided by proj itself to make this easier?
> If proj would add some code to support this, then this would also prevent a
> number of differently buggy proj parsing and transformation codebases to be
> implemented by every project that cares about non-CRS input. It seems odd to me
> that with upgrading to a new API version, the use-case of using proj for
> non-CRS input is now so hard where before it just worked out-of-the box.

Obviously it is messy to do that outside of PROJ . It's not immediate to 
my mind which reasonable and well-defined C API PROJ could offer for 
what you need.

But there's definitely in the PROJ C++ code things to ingest a PROJ 
string, invert it (including reverting order and direction of pipeline 
steps), concatenate it, in a hopefully not-too-buggy way, as that's used 
internally by it.

Particularly the PROJStringFormatter class: 
https://github.com/OSGeo/PROJ/blob/master/include/proj/io.hpp#L376

with the ingestPROJString(), startInversion(), stopInversion(), 
addStep(), addParam() and toString() methods

In pseudo code, your below proposal would be something like

osgeo::proj::io::PROJStringFormatter formatter;

formatter.startInversion();

formatter.ingestPROJString(source_pipeline);

formatter.stopInversion();

formatter.ingestPROJString(target_pipeline)

P = proj_create(ctx, formatter.toString().c_str() )

>
> If there are no plans to add some helper function for this use-case, can you
> confirm that the right solution would be something like (some error checking
> omitted for brevity):
>
>      PJ *P;
>      PJ *source = proj_create(ctx, source_string);
>      PJ *target = proj_create(ctx, target_string);
>      if(proj_is_crs(source) && proj_is_crs(target)) {
>          P = proj_create_crs_to_crs_from_pj(ctx, source, target, NULL, NULL);
>          // continue with proj_normalize_for_visualization according to the migration guide
>      } else {
>          /* 1. if source is a pipeline:
>                   1.1. parse the pipeline string and remove
>                   1.2. reverse steps
>                   1.3. invert +inv
>             2. if target is a pipeline, keep the order and +inv as is
>           */
>          P = proj_create(ctx, "+proj=pipeline +step " +
>                /* result of (1.) without leading +proj=pipeline */
>                + " +step " +
>                /* result of (2.) without leading +proj=pipeline */
>          );
>      }
Looks good
>
> What to do if source or target is not a CRS and also not a pipeline?

What kind of objects are you thinking too ? If it is a single 
transformation step, then it is semantically a pipeline with one step.

You can't do anything useful with other types of objects (datums , 
ellipsoids, etc.)

Mixing a CRS with a pipeline/transformation can also be a bit tricky 
because of unit and axis order adjustments that you may need to insert.


>
> Thanks again!
>
> cheers, josch
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From josch at mister-muffin.de  Mon Apr 18 06:43:16 2022
From: josch at mister-muffin.de (Johannes Schauer Marin Rodrigues)
Date: Mon, 18 Apr 2022 15:43:16 +0200
Subject: [PROJ] Migrating to proj API 6+ without forcing crs input
In-Reply-To: <d94a544c-d677-ec44-bea2-f9f925db2b8e@spatialys.com>
References: <164994939680.2958.10371652995874422677@localhost>
 <c6d6d886-1b88-ed00-a9d7-ce19793ab9c5@spatialys.com>
 <164995530548.2958.11935823996419024925@localhost>
 <d94a544c-d677-ec44-bea2-f9f925db2b8e@spatialys.com>
Message-ID: <165028939677.2835.5080164429327014111@localhost>

Hi Even,

Quoting Even Rouault (2022-04-14 19:31:07)
> Le 14/04/2022 ? 18:55, Johannes Schauer Marin Rodrigues a ?crit?:
> > thanks for your reply! So you suggest that projects that are upgrading to proj
> > API 6+ and want to continue supporting non-CRS user-supplied strings should
> > resort to implementing their own proj string parser and transformation code?
> 
> Well, tinshift support was added after PROJ 6, so there's no real 
> backward compatibility issue here.

ah I didn't mean it as "I want to run this on old PROJ". I'm happy to run the
most recent version. I just wanted to keep the stuff that worked with software
(mapnik) that used to use the old proj API also working with the new API.

> Most of the past users of pj_transform() used it with PROJ strings that were
> CRS definitions, so we're a bit in the category of unanticipated / marginal
> use cases.

Yes, I realize that. I'm thus even more grateful that you took the time and
replied to my marginal use-case query! :)

> The reason for PROJ 6 to differenciate CRS from 
> transformations/pipelines is that in past version PROJ strings that were 
> meant to be CRS definitions used PROJ operation methods that can also be 
> used to do transformations, hence it was a bit like a CRS was a 
> transformation from something (some 'base' CRS not always well defined) 
> to the CRS of interest. Stopping here my confusing digging into past 
> design decisions :-), but basically there are good reasons of separating 
> CRS and transformation/pipelines and not lightly mixing them together.

Got it. I'm not trying to challenge that design decision. Especially since I've
got it working now with your help. :)

> > Is there not something that can be provided by proj itself to make this
> > easier?  If proj would add some code to support this, then this would also
> > prevent a number of differently buggy proj parsing and transformation
> > codebases to be implemented by every project that cares about non-CRS
> > input. It seems odd to me that with upgrading to a new API version, the
> > use-case of using proj for non-CRS input is now so hard where before it
> > just worked out-of-the box.
> 
> Obviously it is messy to do that outside of PROJ . It's not immediate to 
> my mind which reasonable and well-defined C API PROJ could offer for 
> what you need.

Lucky for me, the project I'm interested in (mapnik) is C++. :D

> But there's definitely in the PROJ C++ code things to ingest a PROJ 
> string, invert it (including reverting order and direction of pipeline 
> steps), concatenate it, in a hopefully not-too-buggy way, as that's used 
> internally by it.
> 
> Particularly the PROJStringFormatter class: 
> https://github.com/OSGeo/PROJ/blob/master/include/proj/io.hpp#L376
> 
> with the ingestPROJString(), startInversion(), stopInversion(), 
> addStep(), addParam() and toString() methods
> 
> In pseudo code, your below proposal would be something like
> 
> osgeo::proj::io::PROJStringFormatter formatter;
> 
> formatter.startInversion();
> 
> formatter.ingestPROJString(source_pipeline);
> 
> formatter.stopInversion();
> 
> formatter.ingestPROJString(target_pipeline)
> 
> P = proj_create(ctx, formatter.toString().c_str() )

Wow, thanks a ton! This indeed gave me all the tools to get this to work. :D

> > What to do if source or target is not a CRS and also not a pipeline?
> 
> What kind of objects are you thinking too ? If it is a single 
> transformation step, then it is semantically a pipeline with one step.
> 
> You can't do anything useful with other types of objects (datums , 
> ellipsoids, etc.)

In the mapnik test cases I used "+proj=axisswap +order=2,1" as a source that is
not a CRS and it seems to work fine.

> Mixing a CRS with a pipeline/transformation can also be a bit tricky 
> because of unit and axis order adjustments that you may need to insert.

I think those users who supply custom non-CRS projection should accept that
they are on their own and should not expect any magic to happen when they don't
provide something with the right unit or axis adjustments.

In any case, for anybody who might be interested, here is the code that I came
up with and which seems to work for mapnik:

https://github.com/mapnik/mapnik/pull/4309

If you have a stackoverflow account and care about the bounty, feel free to
copypaste the following code into an answer so that I can award the bounty:

https://stackoverflow.com/questions/71823105/migrating-to-proj-api-6-without-forcing-crs-input

Anyways, here is the code. I'm happy about any comments you can give and
otherwise leave the code here for posterity in case somebody else is facing the
same problem as I. The return value of source.params() and dest.params() is the
proj string. The function throw_proj_exception calls proj_context_errno_string
and is omitted for brevity. The resulting projection is stored in transform_ in
both codepaths.

    PJ* transform_ = nullptr;
    ctx_ = proj_context_create();
    proj_log_level(ctx_, PJ_LOG_ERROR);
    // we replicate what proj_create_crs_to_crs() does and then call
    // proj_create_crs_to_crs_from_pj because we need a PJ object for
    // proj_is_crs and we want to avoid running proj_create twice as
    // as much (once ourselves and once in proj_create_crs_to_crs)
    std::string crs_source = pj_add_type_crs_if_needed(source.params());
    std::string crs_dest = pj_add_type_crs_if_needed(dest.params());
    PJ* src;
    PJ* dst;
    try {
        src = proj_create(ctx_, crs_source.c_str());
    } catch( const std::exception& ) {
        src = nullptr;
    }
    if (!src) {
        throw_proj_exception(ctx_,
            std::string("Cannot instantiate source projection for '") + source.params() + "'");
    }
    try {
        dst = proj_create(ctx_, crs_dest.c_str());
    } catch( const std::exception& ) {
        dst = nullptr;
    }
    if (!dst) {
        throw_proj_exception(ctx_,
            std::string("Cannot instantiate dest projection for '") + dest.params() + "'");
    }
    if (proj_is_crs(src) && proj_is_crs(dst)) {
        // if both source and destination are a CRS, we can use
        // proj_create_crs_to_crs
        transform_ = proj_create_crs_to_crs_from_pj(ctx_, src, dst, nullptr, nullptr);
        if (transform_ == nullptr)
        {
            throw_proj_exception(ctx_,
                std::string("Cannot initialize proj_transform (crs_to_crs) for given projections: '") +
                source.params() + "'->'" + dest.params() + "'");
        }
        PJ* transform_gis = proj_normalize_for_visualization(ctx_, transform_);
        if (transform_gis == nullptr)
        {
            throw_proj_exception(ctx_,
                std::string("Cannot initialize proj_transform (normalize) for given projections: '") +
                                     source.params() + "'->'" + dest.params() + "'");
        }
        proj_destroy(transform_);
        transform_ = transform_gis;
    } else {
        // if one of the projections is not a CRS, then this was
        // probably a user-supplied transform and we have to create
        // the transform pipeline ourselves
        auto formatter = osgeo::proj::io::PROJStringFormatter::create();
        formatter->startInversion();
        try {
            formatter->ingestPROJString(source.params());
        } catch (const osgeo::proj::io::ParsingException &e) {
            throw_proj_exception(ctx_, std::string("Failed to ingest source: '") + source.params() + "'");
        }
        formatter->stopInversion();
        try {
            formatter->ingestPROJString(dest.params());
        } catch (const osgeo::proj::io::ParsingException &e) {
            throw_proj_exception(ctx_, std::string("Failed to ingest dest: '") + dest.params() + "'");
        }
        try {
            transform_ = proj_create(ctx_, formatter->toString().c_str());
        } catch( const std::exception& ) {
            transform_ = nullptr;
        }
        if (!transform_) {
            throw_proj_exception(ctx_,
                std::string("Cannot instantiate custom projection pipeline: '") + formatter->toString() + "'");
        }
    }
    proj_destroy(src);
    proj_destroy(dst);
    return transform_;

Since I need to call proj_is_crs to find out if source and dest are a CRS or
not, and since I want to avoid calling proj_create more often than necessary,
the code recreates parts of whatproj_create_crs_to_crs does and uses
proj_create_crs_to_crs_from_pj instead if both source and dest are a CRS. For
this to work, I added my own version of pj_add_type_crs_if_needed because that
function wasn't exposed in proj.h.

Thanks a ton for your super helpful insights!

cheers, josch
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220418/6d0ac2f8/attachment.sig>

From protoplanetario at gmail.com  Tue Apr 19 07:32:54 2022
From: protoplanetario at gmail.com (=?UTF-8?Q?Andr=C3=A9s_Nadal?=)
Date: Tue, 19 Apr 2022 11:32:54 -0300
Subject: [PROJ] Add projections to proj.db
Message-ID: <CAJjdTHQcCoN8mmq9O-vV4Kr2m95YJj9rJcqDz4tNDPse+g_1kw@mail.gmail.com>

Hello.

I need, add extra projections to the proj database; I have the data in WKT.

Where I must insert these projections (in source code), so that by
compiling proj 9, they are included in proj.db.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220419/32b3fe88/attachment.html>

From even.rouault at spatialys.com  Tue Apr 19 07:36:49 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 19 Apr 2022 16:36:49 +0200
Subject: [PROJ] Add projections to proj.db
In-Reply-To: <CAJjdTHQcCoN8mmq9O-vV4Kr2m95YJj9rJcqDz4tNDPse+g_1kw@mail.gmail.com>
References: <CAJjdTHQcCoN8mmq9O-vV4Kr2m95YJj9rJcqDz4tNDPse+g_1kw@mail.gmail.com>
Message-ID: <5f2ee9f1-c85c-9b7c-e1ab-219c7d6a049b@spatialys.com>

Andr?s,

see example "Exporting the SQL statements to insert a new CRS in an 
auxiliary database." in https://proj.org/apps/projinfo.html

Le 19/04/2022 ? 16:32, Andr?s Nadal a ?crit?:
> Hello.
>
> I need, add extra projections to the proj database; I have the data in 
> WKT.
>
> Where I must insert these projections (in source code), so that by 
> compiling proj 9, they are included in proj.db.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220419/6d2b37be/attachment.html>

From roger.oberholtzer at gmail.com  Wed Apr 20 06:23:54 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Wed, 20 Apr 2022 15:23:54 +0200
Subject: [PROJ] Sweref99 Cartesian
Message-ID: <CANkOqwML0L+0HxaWAVaQiKF5bq0XyfXJAE62XshDo2r9ZD2K_g@mail.gmail.com>

We have been using proj to get Sweref99_tm (EPSG:3006) from WGS84
(EPSG:4326) values we collect from a GPS receiver. All is working
great.

We have had a request to provide Sweref99_tm Cartesian values. I have
looked at https://proj.org/operations/conversions/cart.html#cart but
I'm unclear how to do this in the context of Sweref99_tm.

If I don't use the EPSG codes, I get the expected Sweref99_tm values with:

proj +proj=tmerc +ellps=GRS80 +k=0.9996 +x_0=500000 +y_0=0 +lon_0=15.0
+lat_0=0.0

Would it just be changing +proj=tmerc to +proj=cart ?

I get values. But I don't know if they are correct.

echo 21.0000000000 69.0000000000 0.000 | proj +proj=tmerc +ellps=GRS80
+k=0.9996 +x_0=500000 +y_0=0 +lon_0=15.0 +lat_0=0.0
739639.19       7666089.70 0.000


echo 21.0000000000 69.0000000000 0.000 | proj +proj=cart +ellps=GRS80
+k=0.9996 +x_0=500000 +y_0=0 +lon_0=15.0 +lat_0=0.0
2279859.27      239622.87 0.000

Also, can this be done when specifying the EPSG:3006 code directly?


-- 
Roger Oberholtzer

From Lotti.Jivall at lm.se  Wed Apr 20 08:32:20 2022
From: Lotti.Jivall at lm.se (Jivall Lotti)
Date: Wed, 20 Apr 2022 15:32:20 +0000
Subject: [PROJ] Sweref99 Cartesian
In-Reply-To: <CANkOqwML0L+0HxaWAVaQiKF5bq0XyfXJAE62XshDo2r9ZD2K_g@mail.gmail.com>
References: <CANkOqwML0L+0HxaWAVaQiKF5bq0XyfXJAE62XshDo2r9ZD2K_g@mail.gmail.com>
Message-ID: <4da37e4d9485427a806a308ea04e61a1@lm.se>

Hi Roger, 
I am not sure what you mean by "Sweref99_tm Cartesian values", but I think you mean SWEREF99 geocentric cartesian coordinates (with respect to the centre of the earth and the Z-axis in line with the rotation axis and X-axis through Greenwich). If so you can use the following command: 

echo  21 69  0.000 2022.0 | cct +proj=cart +ellps=GRS80 
which gives :  2140155.9896    821528.9138  5931972.9199     2022.0000

Note that cct is used instead of proj, and then you need also to give an epoch. In this case when just transforming between lat long ellh to X Y Z , it does not matter which epoch you give. But in case you transform from or to a dynamic reference system like ITRF then this epoch is important. Usually you give the epoch of the measurement. 

You can also use the EPSG-codes if you prefer:
echo  69 21  0.000 | cs2cs EPSG:4326 EPSG:4976
with the result: 2140155.99      821528.91 5931972.92
Note that the input latitude and longitude are in different order than for proj and cct!

or use the code for WGS84 (which has the zero-transformation to SWEREF99 in EPSG):
echo  69 21  0.000 | cs2cs EPSG:4326 EPSG:4976
2140155.99      821528.91 5931972.92

In many case you can consider SWEREF99=ETRS89=WGS84, which also is done with the transformation in the EPSG-database. This approximation is OK if you can accept an error up to 1 m. In case you need an accurate transformation (sub-cm) from ITRF2014/WGS84 to SWEREF 99 ( in geocentric cartesian coordinates) you can use the NKG:ITRF2014_TO_SE (implemented in PROJ from version 7.2.1): 

echo  2140155.9896    821528.9138  5931972.9199     2022.0000| cct NKG:ITRF2014_TO_SE
2140156.5941    821528.5956  5931972.5885     2022.0000


Hope it helps!

Best Regards, 

Lotti Jivall
Geodesist

LANTM?TERIET
EMAIL   ???????? ????? lotti.jivall at lm.se
TELEPHONE?? ? ? 026-63 37 40
MOBILE??????????? ?? 072-222 56 14
ADDRESS??????? ??? Lantm?teriet, Geodetisk infrastruktur, 801 82 G?vle
WEBB           ??? ?? www.lantmateriet.se
www.linkedin.com/company/lantmateriet
www.facebook.com/lantmateriet
www.instagram.com/lantmateriet


-----Ursprungligt meddelande-----
Fr?n: PROJ <proj-bounces at lists.osgeo.org> F?r Roger Oberholtzer
Skickat: den 20 april 2022 15:24
Till: PROJ <PROJ at lists.osgeo.org>
?mne: [PROJ] Sweref99 Cartesian

We have been using proj to get Sweref99_tm (EPSG:3006) from WGS84
(EPSG:4326) values we collect from a GPS receiver. All is working great.

We have had a request to provide Sweref99_tm Cartesian values. I have looked at https://proj.org/operations/conversions/cart.html#cart but I'm unclear how to do this in the context of Sweref99_tm.

If I don't use the EPSG codes, I get the expected Sweref99_tm values with:

proj +proj=tmerc +ellps=GRS80 +k=0.9996 +x_0=500000 +y_0=0 +lon_0=15.0
+lat_0=0.0

Would it just be changing +proj=tmerc to +proj=cart ?

I get values. But I don't know if they are correct.

echo 21.0000000000 69.0000000000 0.000 | proj +proj=tmerc +ellps=GRS80
+k=0.9996 +x_0=500000 +y_0=0 +lon_0=15.0 +lat_0=0.0
739639.19       7666089.70 0.000


echo 21.0000000000 69.0000000000 0.000 | proj +proj=cart +ellps=GRS80
+k=0.9996 +x_0=500000 +y_0=0 +lon_0=15.0 +lat_0=0.0
2279859.27      239622.87 0.000

Also, can this be done when specifying the EPSG:3006 code directly?


--
Roger Oberholtzer
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From roger.oberholtzer at gmail.com  Thu Apr 21 02:26:42 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Thu, 21 Apr 2022 11:26:42 +0200
Subject: [PROJ] Sweref99 Cartesian
In-Reply-To: <7c8ceb4e482548db868f3146cfefefc6@lm.se>
References: <CANkOqwML0L+0HxaWAVaQiKF5bq0XyfXJAE62XshDo2r9ZD2K_g@mail.gmail.com>
 <4da37e4d9485427a806a308ea04e61a1@lm.se>
 <CANkOqwNPcEoCD1zjrPsoNEjb-OD_nCYwz+GUPp_1GPtsUiryWA@mail.gmail.com>
 <7c8ceb4e482548db868f3146cfefefc6@lm.se>
Message-ID: <CANkOqwO6TNgiRxR2en81UBh=GS2NcX_=HbMrE_iQkSf73FDe1w@mail.gmail.com>

On Thu, Apr 21, 2022 at 9:39 AM Jivall Lotti <Lotti.Jivall at lm.se> wrote:

> Hi Roger,
>
> SWEREF 99 is a 3D geodetic reference system (the Swedish realisation of
> ETRS89) and can be expressed as geocentric cartesian coordinates (X Y Z) ,
> geodetic coordinates (latitude, longitude and height) or a number of map
> projections where SWEREF 99 TM is the national one (whole Sweden in one
> zone). You can read more at Lantm?teriets webb page
> <https://www.lantmateriet.se/en/maps-and-geographic-information/gps-geodesi-och-swepos/Referenssystem/Tredimensionella-system/SWEREF-99/>.
>
>
>
>
> You are right that SWEPOS virtual RINEX generator is requesting SWEREF 99
> XYZ (and I understand it might be easier for you to use PROJ instead of out
> online transformation on the webb). All SWEPOS services are producing data
> in SWEREF 99, as this is the national reference frame. It means that when
> you process your GNSS-observations with the VRS reference data then you
> will get the results in SWEREF 99. (Therefore you should *not* use the
> accurate NKG-transformation from  ITRF2014 (WGS84) to SWEREF 99 ? if your
> final results should be presented in SWEREF 99!)
>
>
>
> Your original position from the GNSS-receiver is in WGS84 (current epoch)
> but I guess just on a few meter level and actually you just need a very
> approximate position to get your virtual reference near your own
> measurements. The position you input to SWEPOS VRS generator will be
> interpreted as SWEREF 99.
>
>
>
> Hope it is now more clear!
>

I think so. So you mean if I provide the receiver's WGS84 lat/lng to, say,  cct
+proj=cart +ellps=GRS80 , then the resulting locations should be adequate
for requesting a virtual station at that WGS84 location?

-- 
Roger Oberholtzer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220421/5aa45bf4/attachment.html>

From Lotti.Jivall at lm.se  Thu Apr 21 02:52:05 2022
From: Lotti.Jivall at lm.se (Jivall Lotti)
Date: Thu, 21 Apr 2022 09:52:05 +0000
Subject: [PROJ] Sweref99 Cartesian
In-Reply-To: <CANkOqwO6TNgiRxR2en81UBh=GS2NcX_=HbMrE_iQkSf73FDe1w@mail.gmail.com>
References: <CANkOqwML0L+0HxaWAVaQiKF5bq0XyfXJAE62XshDo2r9ZD2K_g@mail.gmail.com>
 <4da37e4d9485427a806a308ea04e61a1@lm.se>
 <CANkOqwNPcEoCD1zjrPsoNEjb-OD_nCYwz+GUPp_1GPtsUiryWA@mail.gmail.com>
 <7c8ceb4e482548db868f3146cfefefc6@lm.se>
 <CANkOqwO6TNgiRxR2en81UBh=GS2NcX_=HbMrE_iQkSf73FDe1w@mail.gmail.com>
Message-ID: <03a99f98b2d44ec8a1a487adeaeb6834@lm.se>

Yes, you can transform the position from the GNSS-receiver directly to XYZ with cct +proj=cart +ellps=GRS80 . It does not make any sense to transform from WGS84 to SWEREF 99 first. The difference between SWEREF 99 and WGS84 is today about 8 dm, and your position from the GNSS-receiver has probably a larger uncertainty,  so it does not matter if you use WGS84 or SWEREF 99 for the virtual location. But in the GNSS-processing with the virtual RINEX-file the coordinates are considered as accurate SWEREF 99-coordinates.
Best Regards, Lotti

Fr?n: Roger Oberholtzer <roger.oberholtzer at gmail.com>
Skickat: den 21 april 2022 11:27
Till: Jivall Lotti <Lotti.Jivall at lm.se>
Kopia: PROJ <PROJ at lists.osgeo.org>
?mne: Re: [PROJ] Sweref99 Cartesian

On Thu, Apr 21, 2022 at 9:39 AM Jivall Lotti <Lotti.Jivall at lm.se<mailto:Lotti.Jivall at lm.se>> wrote:
Hi Roger,
SWEREF 99 is a 3D geodetic reference system (the Swedish realisation of ETRS89) and can be expressed as geocentric cartesian coordinates (X Y Z) , geodetic coordinates (latitude, longitude and height) or a number of map projections where SWEREF 99 TM is the national one (whole Sweden in one zone). You can read more at Lantm?teriets webb page<https://www.lantmateriet.se/en/maps-and-geographic-information/gps-geodesi-och-swepos/Referenssystem/Tredimensionella-system/SWEREF-99/>.

You are right that SWEPOS virtual RINEX generator is requesting SWEREF 99 XYZ (and I understand it might be easier for you to use PROJ instead of out online transformation on the webb). All SWEPOS services are producing data in SWEREF 99, as this is the national reference frame. It means that when you process your GNSS-observations with the VRS reference data then you will get the results in SWEREF 99. (Therefore you should not use the accurate NKG-transformation from  ITRF2014 (WGS84) to SWEREF 99 ? if your final results should be presented in SWEREF 99!)

Your original position from the GNSS-receiver is in WGS84 (current epoch) but I guess just on a few meter level and actually you just need a very approximate position to get your virtual reference near your own measurements. The position you input to SWEPOS VRS generator will be interpreted as SWEREF 99.

Hope it is now more clear!

I think so. So you mean if I provide the receiver's WGS84 lat/lng to, say,  cct +proj=cart +ellps=GRS80 , then the resulting locations should be adequate for requesting a virtual station at that WGS84 location?

--
Roger Oberholtzer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220421/7683b5ee/attachment.html>

From roger.oberholtzer at gmail.com  Thu Apr 21 04:06:30 2022
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Thu, 21 Apr 2022 13:06:30 +0200
Subject: [PROJ] Sweref99 Cartesian
In-Reply-To: <03a99f98b2d44ec8a1a487adeaeb6834@lm.se>
References: <CANkOqwML0L+0HxaWAVaQiKF5bq0XyfXJAE62XshDo2r9ZD2K_g@mail.gmail.com>
 <4da37e4d9485427a806a308ea04e61a1@lm.se>
 <CANkOqwNPcEoCD1zjrPsoNEjb-OD_nCYwz+GUPp_1GPtsUiryWA@mail.gmail.com>
 <7c8ceb4e482548db868f3146cfefefc6@lm.se>
 <CANkOqwO6TNgiRxR2en81UBh=GS2NcX_=HbMrE_iQkSf73FDe1w@mail.gmail.com>
 <03a99f98b2d44ec8a1a487adeaeb6834@lm.se>
Message-ID: <CANkOqwOAWeEanAQ3S=rhRjO9EtYZjmfT0JUn4CbeRxo5aQgemw@mail.gmail.com>

Thanks for your help. I think I have now implemented what I need. My
users will verify the complete process in the coming days. Fingers are
crossed...

On Thu, Apr 21, 2022 at 11:52 AM Jivall Lotti <Lotti.Jivall at lm.se> wrote:
>
> Yes, you can transform the position from the GNSS-receiver directly to XYZ with cct +proj=cart +ellps=GRS80 . It does not make any sense to transform from WGS84 to SWEREF 99 first. The difference between SWEREF 99 and WGS84 is today about 8 dm, and your position from the GNSS-receiver has probably a larger uncertainty,  so it does not matter if you use WGS84 or SWEREF 99 for the virtual location. But in the GNSS-processing with the virtual RINEX-file the coordinates are considered as accurate SWEREF 99-coordinates.
>
> Best Regards, Lotti
>
>
>
> Fr?n: Roger Oberholtzer <roger.oberholtzer at gmail.com>
> Skickat: den 21 april 2022 11:27
> Till: Jivall Lotti <Lotti.Jivall at lm.se>
> Kopia: PROJ <PROJ at lists.osgeo.org>
> ?mne: Re: [PROJ] Sweref99 Cartesian
>
>
>
> On Thu, Apr 21, 2022 at 9:39 AM Jivall Lotti <Lotti.Jivall at lm.se> wrote:
>
> Hi Roger,
>
> SWEREF 99 is a 3D geodetic reference system (the Swedish realisation of ETRS89) and can be expressed as geocentric cartesian coordinates (X Y Z) , geodetic coordinates (latitude, longitude and height) or a number of map projections where SWEREF 99 TM is the national one (whole Sweden in one zone). You can read more at Lantm?teriets webb page.
>
>
>
> You are right that SWEPOS virtual RINEX generator is requesting SWEREF 99 XYZ (and I understand it might be easier for you to use PROJ instead of out online transformation on the webb). All SWEPOS services are producing data in SWEREF 99, as this is the national reference frame. It means that when you process your GNSS-observations with the VRS reference data then you will get the results in SWEREF 99. (Therefore you should not use the accurate NKG-transformation from  ITRF2014 (WGS84) to SWEREF 99 ? if your final results should be presented in SWEREF 99!)
>
>
>
> Your original position from the GNSS-receiver is in WGS84 (current epoch) but I guess just on a few meter level and actually you just need a very approximate position to get your virtual reference near your own measurements. The position you input to SWEPOS VRS generator will be interpreted as SWEREF 99.
>
>
>
> Hope it is now more clear!
>
>
>
> I think so. So you mean if I provide the receiver's WGS84 lat/lng to, say,  cct +proj=cart +ellps=GRS80 , then the resulting locations should be adequate for requesting a virtual station at that WGS84 location?
>
>
>
> --
>
> Roger Oberholtzer



-- 
Roger Oberholtzer

From peter.townsend at maplarge.com  Tue Apr 26 15:20:50 2022
From: peter.townsend at maplarge.com (Peter Townsend)
Date: Tue, 26 Apr 2022 17:20:50 -0500
Subject: [PROJ] On Looking Up ESRI WKIDs
Message-ID: <CAMQBGmUbSvG35hnEvrG4GzK631=RrgSHgZF0uLvBqga76+8syQ@mail.gmail.com>

Greetings! I'm going to be responding to calls to a FeatureServer and it
gives me back a response that looks like this:

{
  "objectIdFieldName": "objectid",
  "globalIdFieldName": "",
  "geometryType": "esriGeometryPoint",
  "spatialReference": {
    "wkid": 26949,
    "latestWkid": 26949
  },
  "fields": [
    {
      "name": "objectid",
      "alias": "OBJECTID",
      "type": "esriFieldTypeOID"
    },
    ...
  ],
  "features": [
    {
      "attributes": {
        "objectid": 1,
        "cities_lam": 25552,
        "cities_l_1": 25552,
        "citiesx020": 25552,
        "feature": "Populated Place",
        "name": "Harris",
        "pop_range_": "Undetermined",
        "pop_90": -99999,
        "pop_98": -99999,
        "fips55": "31320",
        "county": "Mohave County",
        "fips": "04015",
        "state": "AZ",
        "state_fips": "04",
        "display": 0
      },
      "geometry": {
        "x": 15704.363599999808,
        "y": 460919.1546
      }
    },
    ...
  ]
}

It's obviously ESRI related. The problem is the "wkid"/"latestWkid" field.
We'd like to turn that into a PROJ CRS lookup. In the case of 26949, it
turns out to match up nicely to EPSG:26949, aka "NAD83 / Arizona Central".
In the ARCGIS docs, it has the name
"NAD_1983_StatePlane_Arizona_Central_FIPS_0202". A PROJ CRS lookup by that
name also returns EPSG:26949.

But then consider WKID 102649. It's outside of the EPSG code range, right?
So EPSG:102649 doesn't turn up anything. But it is findable under
ESRI:102649, with the name
"NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet".

My question is thus, is it safe to assume that if I encounter an ESRI wkid
greater than 32767 that I should try looking it up with the ESRI authority?
And less than or equal, that it is the same as the EPSG code?

A quick search through the list history found me a semi-related question
from 11 years ago that kind of implies this, so it wouldn't hurt to ask
again.

-- 
Peter Townsend
Senior Software Developer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220426/2e00a6d8/attachment.html>

From nyall.dawson at gmail.com  Tue Apr 26 15:48:37 2022
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 27 Apr 2022 08:48:37 +1000
Subject: [PROJ] On Looking Up ESRI WKIDs
In-Reply-To: <CAMQBGmUbSvG35hnEvrG4GzK631=RrgSHgZF0uLvBqga76+8syQ@mail.gmail.com>
References: <CAMQBGmUbSvG35hnEvrG4GzK631=RrgSHgZF0uLvBqga76+8syQ@mail.gmail.com>
Message-ID: <CAB28AsgM4m2jDwfDz38JH9n_SFW3Tn6z=e=19OU0G4bxhi_Afw@mail.gmail.com>

On Wed, 27 Apr 2022 at 08:21, Peter Townsend via PROJ
<proj at lists.osgeo.org> wrote:
>
> Greetings! I'm going to be responding to calls to a FeatureServer and it gives me back a response that looks like this:
>
>
> It's obviously ESRI related. The problem is the "wkid"/"latestWkid" field. We'd like to turn that into a PROJ CRS lookup. In the case of 26949, it turns out to match up nicely to EPSG:26949, aka "NAD83 / Arizona Central". In the ARCGIS docs, it has the name "NAD_1983_StatePlane_Arizona_Central_FIPS_0202". A PROJ CRS lookup by that name also returns EPSG:26949.
>
> But then consider WKID 102649. It's outside of the EPSG code range, right? So EPSG:102649 doesn't turn up anything. But it is findable under ESRI:102649, with the name "NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet".
>
> My question is thus, is it safe to assume that if I encounter an ESRI wkid greater than 32767 that I should try looking it up with the ESRI authority? And less than or equal, that it is the same as the EPSG code?
>
> A quick search through the list history found me a semi-related question from 11 years ago that kind of implies this, so it wouldn't hurt to ask again.

It's certainly NOT an authoritative answer, but QGIS' logic looks like this:

- If "latestWkid" value present, use that. Otherwise use "wkid"
- Try creating a crs from "EPSG:" + wkid. If that doesn't exist, try
"ESRI:" + wkid
- If neither "latestWkid" nor "wkid" is present, build the crs from
the "wkt" value
- If everything else fails, use EPSG:3857, since most ESRI services
default to this.

I'm eagerly watching this thread for more definitive answers though!

Nyall


>
> --
> Peter Townsend
> Senior Software Developer
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From j1 at jimenezshaw.com  Tue Apr 26 23:31:57 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 27 Apr 2022 08:31:57 +0200
Subject: [PROJ] On Looking Up ESRI WKIDs
In-Reply-To: <CAMQBGmUbSvG35hnEvrG4GzK631=RrgSHgZF0uLvBqga76+8syQ@mail.gmail.com>
References: <CAMQBGmUbSvG35hnEvrG4GzK631=RrgSHgZF0uLvBqga76+8syQ@mail.gmail.com>
Message-ID: <CADRrdKvG93UiC4mXxxmEh3Vh6g0fO9oE7D8Qdx-MuLZhV_M6KQ@mail.gmail.com>

Hi Peter

Looking at
https://jjimenezshaw.github.io/crs-explorer/?ignoreWorld=false&allowDeprecated=false&authorities=ESRI&activeTypes=PROJECTED_CRS,GEOGRAPHIC_2D_CRS,GEOGRAPHIC_3D_CRS,GEOCENTRIC_CRS,GEODETIC_CRS,VERTICAL_CRS,COMPOUND_CRS,CRS
You can see there are some of them below 32767 (allow deprecated to get
some more)

In this other project
https://jjimenezshaw.github.io/Esri-codes-analyzer/not-deprecated-esri.html
the data from ESRI is listed. See the GitHub repo to see from where is it
getting the data (PROJ is using the same source). Maybe you can get more
useful information there.

Cheers,
Javier
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Wed, 27 Apr 2022 at 00:21, Peter Townsend via PROJ <proj at lists.osgeo.org>
wrote:

> Greetings! I'm going to be responding to calls to a FeatureServer and it
> gives me back a response that looks like this:
>
> {
>   "objectIdFieldName": "objectid",
>   "globalIdFieldName": "",
>   "geometryType": "esriGeometryPoint",
>   "spatialReference": {
>     "wkid": 26949,
>     "latestWkid": 26949
>   },
>   "fields": [
>     {
>       "name": "objectid",
>       "alias": "OBJECTID",
>       "type": "esriFieldTypeOID"
>     },
>     ...
>   ],
>   "features": [
>     {
>       "attributes": {
>         "objectid": 1,
>         "cities_lam": 25552,
>         "cities_l_1": 25552,
>         "citiesx020": 25552,
>         "feature": "Populated Place",
>         "name": "Harris",
>         "pop_range_": "Undetermined",
>         "pop_90": -99999,
>         "pop_98": -99999,
>         "fips55": "31320",
>         "county": "Mohave County",
>         "fips": "04015",
>         "state": "AZ",
>         "state_fips": "04",
>         "display": 0
>       },
>       "geometry": {
>         "x": 15704.363599999808,
>         "y": 460919.1546
>       }
>     },
>     ...
>   ]
> }
>
> It's obviously ESRI related. The problem is the "wkid"/"latestWkid" field.
> We'd like to turn that into a PROJ CRS lookup. In the case of 26949, it
> turns out to match up nicely to EPSG:26949, aka "NAD83 / Arizona Central".
> In the ARCGIS docs, it has the name
> "NAD_1983_StatePlane_Arizona_Central_FIPS_0202". A PROJ CRS lookup by that
> name also returns EPSG:26949.
>
> But then consider WKID 102649. It's outside of the EPSG code range, right?
> So EPSG:102649 doesn't turn up anything. But it is findable under
> ESRI:102649, with the name
> "NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet".
>
> My question is thus, is it safe to assume that if I encounter an ESRI wkid
> greater than 32767 that I should try looking it up with the ESRI authority?
> And less than or equal, that it is the same as the EPSG code?
>
> A quick search through the list history found me a semi-related question
> from 11 years ago that kind of implies this, so it wouldn't hurt to ask
> again.
>
> --
> Peter Townsend
> Senior Software Developer
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220427/cff591f3/attachment.html>

From peter.townsend at maplarge.com  Wed Apr 27 06:11:00 2022
From: peter.townsend at maplarge.com (Peter Townsend)
Date: Wed, 27 Apr 2022 08:11:00 -0500
Subject: [PROJ] On Looking Up ESRI WKIDs
In-Reply-To: <CADRrdKvG93UiC4mXxxmEh3Vh6g0fO9oE7D8Qdx-MuLZhV_M6KQ@mail.gmail.com>
References: <CAMQBGmUbSvG35hnEvrG4GzK631=RrgSHgZF0uLvBqga76+8syQ@mail.gmail.com>
 <CADRrdKvG93UiC4mXxxmEh3Vh6g0fO9oE7D8Qdx-MuLZhV_M6KQ@mail.gmail.com>
Message-ID: <CAMQBGmUTob4A7bK9zsaPA7T9X0xo3=5H-nY0kxXdXm+Ch8PPww@mail.gmail.com>

Thanks! That's an interesting link. It led me to thinking of trying
something like this:
1) Go fetch a flat file from the repo at
https://github.com/Esri/projection-engine-db-doc (CSV, JSON, whatever)
2) Parse it out and create essentially a static set of lookup
tables/dictionaries. Match wkid/latestWkid to an authority field.

Something like wkid 20002 looks up in PROJ as ESRI:20002.

{ "wkid": 20002,
    "latestWkid": 20002,
    "macro": "PE_PCS_PULKOVO_1995_GK_2",
    "name": "Pulkovo_1995_GK_Zone_2",
    "wkt": "PROJCS[\"Pulkovo_1995_GK_Zone_2\",GEOGCS[\"GCS_Pulkovo_1995\",DATUM[\"D_Pulkovo_1995\",SPHEROID[\"Krasovsky_1940\",6378245.0,298.3]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Gauss_Kruger\"],PARAMETER[\"False_Easting\",2500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",9.0],PARAMETER[\"Scale_Factor\",1.0],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]",
    "wkt2": "PROJCRS[\"Pulkovo_1995_GK_Zone_2\",BASEGEOGCRS[\"GCS_Pulkovo_1995\",DATUM[\"D_Pulkovo_1995\",ELLIPSOID[\"Krasovsky_1940\",6378245.0,298.3,LENGTHUNIT[\"Meter\",1.0]]],PRIMEM[\"Greenwich\",0.0,ANGLEUNIT[\"Degree\",0.0174532925199433]],CS[ellipsoidal,2],AXIS[\"Latitude
(lat)\",north,ORDER[1]],AXIS[\"Longitude
(lon)\",east,ORDER[2]],ANGLEUNIT[\"Degree\",0.0174532925199433]],CONVERSION[\"Gauss_Kruger\",METHOD[\"Gauss_Kruger\"],PARAMETER[\"False_Easting\",2500000.0,LENGTHUNIT[\"Meter\",1.0]],PARAMETER[\"False_Northing\",0.0,LENGTHUNIT[\"Meter\",1.0]],PARAMETER[\"Central_Meridian\",9.0,ANGLEUNIT[\"Degree\",0.0174532925199433]],PARAMETER[\"Scale_Factor\",1.0,SCALEUNIT[\"Unity\",1.0]],PARAMETER[\"Latitude_Of_Origin\",0.0,ANGLEUNIT[\"Degree\",0.0174532925199433]]],CS[Cartesian,2],AXIS[\"Easting
(X)\",east,ORDER[1]],AXIS[\"Northing
(Y)\",north,ORDER[2]],LENGTHUNIT[\"Meter\",1.0]]",
    "description": "Pulkovo 1995 GK Zone 2",
    "authority": "Esri",
    "version": "8.0.1",
    "deprecated": "no",
    "areaname": "Europe - 6~E to 12~E and Pulkovo by country",
    "extent":
    { "slat": 50.21,
      "nlat": 54.18,
      "llon": 9.93,
      "rlon": 12.0
    }
  },


But I did run into a bit of a counterexample with 9712. In PROJ it doesn't
look up under ESRI:9712 but as ESPG:9712, despite the authority value being
"Esri". I wonder if it's just an error on account of the ESRI docs not
updating their field, or maybe something with how PROJ imports its ESRI
values (I'm not familiar with that process myself as it might use some
other data source?).

{ "wkid": 9712,
    "latestWkid": 9712,
    "macro": "PE_PCS_NAD83_UTM_24N",
    "name": "NAD_1983_UTM_Zone_24N",
    "wkt": "PROJCS[\"NAD_1983_UTM_Zone_24N\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-39.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]",
    "wkt2": "PROJCRS[\"NAD_1983_UTM_Zone_24N\",BASEGEOGCRS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",ELLIPSOID[\"GRS_1980\",6378137.0,298.257222101,LENGTHUNIT[\"Meter\",1.0]]],PRIMEM[\"Greenwich\",0.0,ANGLEUNIT[\"Degree\",0.0174532925199433]],CS[ellipsoidal,2],AXIS[\"Latitude
(lat)\",north,ORDER[1]],AXIS[\"Longitude
(lon)\",east,ORDER[2]],ANGLEUNIT[\"Degree\",0.0174532925199433]],CONVERSION[\"Transverse_Mercator\",METHOD[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0,LENGTHUNIT[\"Meter\",1.0]],PARAMETER[\"False_Northing\",0.0,LENGTHUNIT[\"Meter\",1.0]],PARAMETER[\"Central_Meridian\",-39.0,ANGLEUNIT[\"Degree\",0.0174532925199433]],PARAMETER[\"Scale_Factor\",0.9996,SCALEUNIT[\"Unity\",1.0]],PARAMETER[\"Latitude_Of_Origin\",0.0,ANGLEUNIT[\"Degree\",0.0174532925199433]]],CS[Cartesian,2],AXIS[\"Easting
(X)\",east,ORDER[1]],AXIS[\"Northing
(Y)\",north,ORDER[2]],LENGTHUNIT[\"Meter\",1.0]]",
    "description": "NAD 1983 UTM Zone 24N",
    "authority": "Esri",
    "version": "12.9.0",
    "deprecated": "no",
    "areaname": "Canada - east of 42~W",
    "extent":
    { "slat": 45.53,
      "nlat": 49.53,
      "llon": -42.0,
      "rlon": -40.73
    }
  },

With the existence of the counterexample, trying ESRI:CODE or
ESPG:CODE and hoping for the best still remains a viable option.
Though the ESRI data dump DOES provide the WKT as an alternative to
the lookup method too!


On Wed, Apr 27, 2022 at 1:32 AM Javier Jimenez Shaw <j1 at jimenezshaw.com>
wrote:

> Hi Peter
>
> Looking at
> https://jjimenezshaw.github.io/crs-explorer/?ignoreWorld=false&allowDeprecated=false&authorities=ESRI&activeTypes=PROJECTED_CRS,GEOGRAPHIC_2D_CRS,GEOGRAPHIC_3D_CRS,GEOCENTRIC_CRS,GEODETIC_CRS,VERTICAL_CRS,COMPOUND_CRS,CRS
> You can see there are some of them below 32767 (allow deprecated to get
> some more)
>
> In this other project
> https://jjimenezshaw.github.io/Esri-codes-analyzer/not-deprecated-esri.html
> the data from ESRI is listed. See the GitHub repo to see from where is it
> getting the data (PROJ is using the same source). Maybe you can get more
> useful information there.
>
> Cheers,
> Javier
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
>
> On Wed, 27 Apr 2022 at 00:21, Peter Townsend via PROJ <
> proj at lists.osgeo.org> wrote:
>
>> Greetings! I'm going to be responding to calls to a FeatureServer and it
>> gives me back a response that looks like this:
>>
>> {
>>   "objectIdFieldName": "objectid",
>>   "globalIdFieldName": "",
>>   "geometryType": "esriGeometryPoint",
>>   "spatialReference": {
>>     "wkid": 26949,
>>     "latestWkid": 26949
>>   },
>>   "fields": [
>>     {
>>       "name": "objectid",
>>       "alias": "OBJECTID",
>>       "type": "esriFieldTypeOID"
>>     },
>>     ...
>>   ],
>>   "features": [
>>     {
>>       "attributes": {
>>         "objectid": 1,
>>         "cities_lam": 25552,
>>         "cities_l_1": 25552,
>>         "citiesx020": 25552,
>>         "feature": "Populated Place",
>>         "name": "Harris",
>>         "pop_range_": "Undetermined",
>>         "pop_90": -99999,
>>         "pop_98": -99999,
>>         "fips55": "31320",
>>         "county": "Mohave County",
>>         "fips": "04015",
>>         "state": "AZ",
>>         "state_fips": "04",
>>         "display": 0
>>       },
>>       "geometry": {
>>         "x": 15704.363599999808,
>>         "y": 460919.1546
>>       }
>>     },
>>     ...
>>   ]
>> }
>>
>> It's obviously ESRI related. The problem is the "wkid"/"latestWkid"
>> field. We'd like to turn that into a PROJ CRS lookup. In the case of 26949,
>> it turns out to match up nicely to EPSG:26949, aka "NAD83 / Arizona
>> Central". In the ARCGIS docs, it has the name
>> "NAD_1983_StatePlane_Arizona_Central_FIPS_0202". A PROJ CRS lookup by that
>> name also returns EPSG:26949.
>>
>> But then consider WKID 102649. It's outside of the EPSG code range,
>> right? So EPSG:102649 doesn't turn up anything. But it is findable under
>> ESRI:102649, with the name
>> "NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet".
>>
>> My question is thus, is it safe to assume that if I encounter an ESRI
>> wkid greater than 32767 that I should try looking it up with the ESRI
>> authority? And less than or equal, that it is the same as the EPSG code?
>>
>> A quick search through the list history found me a semi-related question
>> from 11 years ago that kind of implies this, so it wouldn't hurt to ask
>> again.
>>
>> --
>> Peter Townsend
>> Senior Software Developer
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>>
>

-- 
Peter Townsend
Senior Software Developer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220427/901e90a1/attachment-0001.html>

