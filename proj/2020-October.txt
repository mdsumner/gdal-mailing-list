From j1 at jimenezshaw.com  Thu Oct  1 13:58:08 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 1 Oct 2020 22:58:08 +0200
Subject: [PROJ] PROJ7 in JavaScript
Message-ID: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>

Hi

As far as I know, there is no JavaScript version PROJ6 or 7. The last is
https://github.com/proj4js/proj4js based on PROJ4. Am I right?

Is there any plan to have anything like proj7js? Even more, does it make
sense?

Somebody mentioned that PROJ6 was too heavy for a web page, and making
constant requests to a server was not feasible (when the user moves the
mouse over a map and the coordinates are updated instantly, for instance).

If there is no planned alternative, I was thinking in a server side
application that returns an affine transformation (or something similar)
for a local area, enough to move the mouse in a small region.

Thanks,
Javier.

.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201001/a0049647/attachment.html>

From howard at hobu.co  Fri Oct  2 06:58:16 2020
From: howard at hobu.co (Howard Butler)
Date: Fri, 2 Oct 2020 08:58:16 -0500
Subject: [PROJ] PROJ7 in JavaScript
In-Reply-To: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
References: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
Message-ID: <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>



> On Oct 1, 2020, at 3:58 PM, Javier Jimenez Shaw <j1 at jimenezshaw.com> wrote:
> 
> Hi
> 
> As far as I know, there is no JavaScript version PROJ6 or 7. The last is  https://github.com/proj4js/proj4js <https://github.com/proj4js/proj4js> based on PROJ4. Am I right?
> 
> Is there any plan to have anything like proj7js? Even more, does it make sense?

Not as far as I know. Maybe you could put something forward. I think the path to explore is compilation of PROJ to WebAssembly and then build JavaScript wrappers over that. The SQLite database makes it a bit more challenging, but there are implementations of SQLite on WebAssembly too. 

Don't hand roll a port. 

> Somebody mentioned that PROJ6 was too heavy for a web page, and making constant requests to a server was not feasible (when the user moves the mouse over a map and the coordinates are updated instantly, for instance).

The download of proj.db would be a bit of a hit, but it's conveniently cacheable per-page and doesn't change after it is fetched. Once it is local, a JavaScript PROJ implementation based on WebAssembly could use it do its queries just as C-language PROJ does today.

Howard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201002/3dd61af4/attachment.html>

From richard.greenwood at gmail.com  Fri Oct  2 12:43:28 2020
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Fri, 2 Oct 2020 13:43:28 -0600
Subject: [PROJ] PROJ7 in JavaScript
In-Reply-To: <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>
References: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
 <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>
Message-ID: <CAHBySPbC2GkEBRYdoE3a4Lq=3G6vP+Co=6h_TmysQzy7LrTLVQ@mail.gmail.com>

Proj 6 and 7 don't really add any new functionality. Proj does forward in
inverse projections and it does datum transformations with 3 & 7 parameters
transforms and grid shift transforms. Proj4js supports most of the commonly
used projections and the 3 & 4 param datum transforms. It doesn't support
grid shift transforms and grid shift transforms are what are "heavy" in
terms of the size of the required data. I thought a lot about adding grid
shift support and considered a server-side option like Javier mentions, but
it's a lot of moving parts for pretty limited use cases. Like how many web
mapping apps need the precision of a grid shift transform? And for those
that do, how do you build a generic enough mechanism to cover the
variations in scale, platform, online/offline, etc.?

Bringing the proj4js code more inline with Proj 7 sounds like a nice goal.
It was never really even in sync with Proj4, it was just cobbled together
enough to work, not to maintain.

Web assembly sounds cool if you're thinking in a web browser context only
but modern JavaScript is often trying to support browsers and Node,
which web assembly would not do, or at least not in my very limited
knowledge of web assembly.

Rich


On Fri, Oct 2, 2020 at 7:58 AM Howard Butler <howard at hobu.co> wrote:

>
>
> On Oct 1, 2020, at 3:58 PM, Javier Jimenez Shaw <j1 at jimenezshaw.com>
> wrote:
>
> Hi
>
> As far as I know, there is no JavaScript version PROJ6 or 7. The last is
> https://github.com/proj4js/proj4js based on PROJ4. Am I right?
>
> Is there any plan to have anything like proj7js? Even more, does it make
> sense?
>
>
> Not as far as I know. Maybe you could put something forward. I think the
> path to explore is compilation of PROJ to WebAssembly and then build
> JavaScript wrappers over that. The SQLite database makes it a bit more
> challenging, but there are implementations of SQLite on WebAssembly too.
>
> Don't hand roll a port.
>
> Somebody mentioned that PROJ6 was too heavy for a web page, and making
> constant requests to a server was not feasible (when the user moves the
> mouse over a map and the coordinates are updated instantly, for instance).
>
>
> The download of proj.db would be a bit of a hit, but it's conveniently
> cacheable per-page and doesn't change after it is fetched. Once it is
> local, a JavaScript PROJ implementation based on WebAssembly could use it
> do its queries just as C-language PROJ does today.
>
> Howard
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
Richard W. Greenwood, PLS
www.greenwoodmap.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201002/ebe16e47/attachment.html>

From richard.greenwood at gmail.com  Fri Oct  2 18:21:00 2020
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Fri, 2 Oct 2020 19:21:00 -0600
Subject: [PROJ] PROJ7 in JavaScript
In-Reply-To: <CAHBySPbC2GkEBRYdoE3a4Lq=3G6vP+Co=6h_TmysQzy7LrTLVQ@mail.gmail.com>
References: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
 <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>
 <CAHBySPbC2GkEBRYdoE3a4Lq=3G6vP+Co=6h_TmysQzy7LrTLVQ@mail.gmail.com>
Message-ID: <CAHBySPa3f71TDxuGJOzMRyt8beQMdJe1mSWM9stQv4TwY1+pjg@mail.gmail.com>

I am mistaken regarding web assembly support in Node.
https://www.joyent.com/blog/improved-wasm-support-coming-to-node

On Fri, Oct 2, 2020 at 1:43 PM Richard Greenwood <
richard.greenwood at gmail.com> wrote:

> Proj 6 and 7 don't really add any new functionality. Proj does forward in
> inverse projections and it does datum transformations with 3 & 7 parameters
> transforms and grid shift transforms. Proj4js supports most of the commonly
> used projections and the 3 & 4 param datum transforms. It doesn't support
> grid shift transforms and grid shift transforms are what are "heavy" in
> terms of the size of the required data. I thought a lot about adding grid
> shift support and considered a server-side option like Javier mentions, but
> it's a lot of moving parts for pretty limited use cases. Like how many web
> mapping apps need the precision of a grid shift transform? And for those
> that do, how do you build a generic enough mechanism to cover the
> variations in scale, platform, online/offline, etc.?
>
> Bringing the proj4js code more inline with Proj 7 sounds like a nice goal.
> It was never really even in sync with Proj4, it was just cobbled together
> enough to work, not to maintain.
>
> Web assembly sounds cool if you're thinking in a web browser context only
> but modern JavaScript is often trying to support browsers and Node,
> which web assembly would not do, or at least not in my very limited
> knowledge of web assembly.
>
> Rich
>
>
> On Fri, Oct 2, 2020 at 7:58 AM Howard Butler <howard at hobu.co> wrote:
>
>>
>>
>> On Oct 1, 2020, at 3:58 PM, Javier Jimenez Shaw <j1 at jimenezshaw.com>
>> wrote:
>>
>> Hi
>>
>> As far as I know, there is no JavaScript version PROJ6 or 7. The last is
>> https://github.com/proj4js/proj4js based on PROJ4. Am I right?
>>
>> Is there any plan to have anything like proj7js? Even more, does it make
>> sense?
>>
>>
>> Not as far as I know. Maybe you could put something forward. I think the
>> path to explore is compilation of PROJ to WebAssembly and then build
>> JavaScript wrappers over that. The SQLite database makes it a bit more
>> challenging, but there are implementations of SQLite on WebAssembly too.
>>
>> Don't hand roll a port.
>>
>> Somebody mentioned that PROJ6 was too heavy for a web page, and making
>> constant requests to a server was not feasible (when the user moves the
>> mouse over a map and the coordinates are updated instantly, for instance).
>>
>>
>> The download of proj.db would be a bit of a hit, but it's conveniently
>> cacheable per-page and doesn't change after it is fetched. Once it is
>> local, a JavaScript PROJ implementation based on WebAssembly could use it
>> do its queries just as C-language PROJ does today.
>>
>> Howard
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>>
>
>
> --
> Richard W. Greenwood, PLS
> www.greenwoodmap.com
>


-- 
Richard W. Greenwood, PLS
www.greenwoodmap.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201002/6250e1a2/attachment.html>

From howard at hobu.co  Sat Oct  3 06:18:35 2020
From: howard at hobu.co (Howard Butler)
Date: Sat, 3 Oct 2020 08:18:35 -0500
Subject: [PROJ] PROJ7 in JavaScript
In-Reply-To: <CAHBySPa3f71TDxuGJOzMRyt8beQMdJe1mSWM9stQv4TwY1+pjg@mail.gmail.com>
References: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
 <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>
 <CAHBySPbC2GkEBRYdoE3a4Lq=3G6vP+Co=6h_TmysQzy7LrTLVQ@mail.gmail.com>
 <CAHBySPa3f71TDxuGJOzMRyt8beQMdJe1mSWM9stQv4TwY1+pjg@mail.gmail.com>
Message-ID: <234890A5-BA51-45E7-96D3-3F9BD9DD285A@hobu.co>



> On Oct 2, 2020, at 8:21 PM, Richard Greenwood <richard.greenwood at gmail.com> wrote:
> 
> I am mistaken regarding web assembly support in Node. https://www.joyent.com/blog/improved-wasm-support-coming-to-node <https://www.joyent.com/blog/improved-wasm-support-coming-to-node>
Yes. Emscripten will also degrade to plain JavaScript as well, so that is an option for runtimes that can't consume wasm.

> On Fri, Oct 2, 2020 at 1:43 PM Richard Greenwood <richard.greenwood at gmail.com <mailto:richard.greenwood at gmail.com>> wrote:
> Proj 6 and 7 don't really add any new functionality. Proj does forward in inverse projections and it does datum transformations with 3 & 7 parameters transforms and grid shift transforms. Proj4js supports most of the commonly used projections and the 3 & 4 param datum transforms.

Proj4js doesn't support WKTv2 consumption or emission, and it doesn't support PROJJSON [1].  At the very least, interoperability suffers when crossing the proj4js boundary when trying to communicate coordinate system descriptions.

> It doesn't support grid shift transforms and grid shift transforms are what are "heavy" in terms of the size of the required data. I thought a lot about adding grid shift support and considered a server-side option like Javier mentions, but it's a lot of moving parts for pretty limited use cases. Like how many web mapping apps need the precision of a grid shift transform? And for those that do, how do you build a generic enough mechanism to cover the variations in scale, platform, online/offline, etc.?

I think the combination of COGs at cdn.proj.org <http://cdn.proj.org/> and geotiff.js would allow for the construction of JavaScript support for high performance incremental grid access similar to the current PROJ runtime's incremental implementation. There would be no need to cache GBs of grid files, and the data is hosted today as web native as you can get as COGs in CloudFront. 

I think it is a mistake to see JavaScript support as only "web mapping apps". I think a WASM port of PROJ is a worthy goal for a number of reasons, but the community has to want it bad enough to invest to make it happen. To date, that hasn't been demonstrated.

Howard

[1] https://proj.org/specifications/projjson.html <https://proj.org/specifications/projjson.html> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201003/024b528d/attachment-0001.html>

From Jochem.Lesparre at kadaster.nl  Sat Oct  3 12:16:58 2020
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Sat, 3 Oct 2020 19:16:58 +0000
Subject: [PROJ] PROJ7 in JavaScript
In-Reply-To: <234890A5-BA51-45E7-96D3-3F9BD9DD285A@hobu.co>
References: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
 <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>
 <CAHBySPbC2GkEBRYdoE3a4Lq=3G6vP+Co=6h_TmysQzy7LrTLVQ@mail.gmail.com>
 <CAHBySPa3f71TDxuGJOzMRyt8beQMdJe1mSWM9stQv4TwY1+pjg@mail.gmail.com>
 <234890A5-BA51-45E7-96D3-3F9BD9DD285A@hobu.co>
Message-ID: <AM6P192MB0470A7A658C5D35E0880C1A6EF0E0@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>

At the Dutch NMA, I have had questions on the possibilities to do the Dutch transformation including precise datum transformation using the horizontal and vertical grid shift files in Java or JavaScript. So, I agree with Howard that there would be demand for PROJ in JavaScript.

Regards, Jochem


From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Howard Butler
Sent: zaterdag 3 oktober 2020 15:19
To: Richard Greenwood <richard.greenwood at gmail.com>
Cc: proj <PROJ at lists.osgeo.org>
Subject: Re: [PROJ] PROJ7 in JavaScript




On Oct 2, 2020, at 8:21 PM, Richard Greenwood <richard.greenwood at gmail.com<mailto:richard.greenwood at gmail.com>> wrote:

I am mistaken regarding web assembly support in Node. https://www.joyent.com/blog/improved-wasm-support-coming-to-node

Yes. Emscripten will also degrade to plain JavaScript as well, so that is an option for runtimes that can't consume wasm.


On Fri, Oct 2, 2020 at 1:43 PM Richard Greenwood <richard.greenwood at gmail.com<mailto:richard.greenwood at gmail.com>> wrote:
Proj 6 and 7 don't really add any new functionality. Proj does forward in inverse projections and it does datum transformations with 3 & 7 parameters transforms and grid shift transforms. Proj4js supports most of the commonly used projections and the 3 & 4 param datum transforms.

Proj4js doesn't support WKTv2 consumption or emission, and it doesn't support PROJJSON [1].  At the very least, interoperability suffers when crossing the proj4js boundary when trying to communicate coordinate system descriptions.


It doesn't support grid shift transforms and grid shift transforms are what are "heavy" in terms of the size of the required data. I thought a lot about adding grid shift support and considered a server-side option like Javier mentions, but it's a lot of moving parts for pretty limited use cases. Like how many web mapping apps need the precision of a grid shift transform? And for those that do, how do you build a generic enough mechanism to cover the variations in scale, platform, online/offline, etc.?

I think the combination of COGs at cdn.proj.org<http://cdn.proj.org> and geotiff.js would allow for the construction of JavaScript support for high performance incremental grid access similar to the current PROJ runtime's incremental implementation. There would be no need to cache GBs of grid files, and the data is hosted today as web native as you can get as COGs in CloudFront.

I think it is a mistake to see JavaScript support as only "web mapping apps". I think a WASM port of PROJ is a worthy goal for a number of reasons, but the community has to want it bad enough to invest to make it happen. To date, that hasn't been demonstrated.

Howard

[1] https://proj.org/specifications/projjson.html


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
dit direct te melden aan de verzender en het bericht te vernietigen.
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent
of the Kadaster is unlawful. If you have received this message, but are not the addressee,
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201003/5822fbf3/attachment.html>

From mista_pink at web.de  Tue Oct  6 01:44:46 2020
From: mista_pink at web.de (mista_pink at web.de)
Date: Tue, 6 Oct 2020 10:44:46 +0200
Subject: [PROJ] PROJ7 in JavaScript
In-Reply-To: <AM6P192MB0470A7A658C5D35E0880C1A6EF0E0@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>
References: <CADRrdKs9P9sYNt4GuduuBaXvfBOM6G6eaJOguwn2tEfJKWa4Og@mail.gmail.com>
 <F39B4FD3-BA37-4532-8C09-24B3FABAAA52@hobu.co>
 <CAHBySPbC2GkEBRYdoE3a4Lq=3G6vP+Co=6h_TmysQzy7LrTLVQ@mail.gmail.com>
 <CAHBySPa3f71TDxuGJOzMRyt8beQMdJe1mSWM9stQv4TwY1+pjg@mail.gmail.com>
 <234890A5-BA51-45E7-96D3-3F9BD9DD285A@hobu.co>
 <AM6P192MB0470A7A658C5D35E0880C1A6EF0E0@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>
Message-ID: <7bab0746-602b-2d37-f9d8-3de5916ad29a@web.de>

Hi everyone,

If you want to Proj support in Node I would suggest looking at native
abstractions (https://github.com/nodejs/nan).
This way the underlying Proj can easily advance and use SQLite etc. It
would "only" need the wrapper/bridges.

This then of course cannot be used in a browser, but there WASM might be
an idea.

Best,
Paul

On 03.10.20 21:16, Lesparre, Jochem wrote:
> At the Dutch NMA, I have had questions on the possibilities to do the
> Dutch transformation including precise datum transformation using the
> horizontal and vertical grid shift files in Java or JavaScript. So, I
> agree with Howard that there would be demand for PROJ in JavaScript.
>
> Regards, Jochem
>
> *From:*PROJ <proj-bounces at lists.osgeo.org> *On Behalf Of *Howard Butler
> *Sent:* zaterdag 3 oktober 2020 15:19
> *To:* Richard Greenwood <richard.greenwood at gmail.com>
> *Cc:* proj <PROJ at lists.osgeo.org>
> *Subject:* Re: [PROJ] PROJ7 in JavaScript
>
>
>
>     On Oct 2, 2020, at 8:21 PM, Richard Greenwood
>     <richard.greenwood at gmail.com <mailto:richard.greenwood at gmail.com>>
>     wrote:
>
>     I am mistaken regarding web assembly support in Node.
>     https://www.joyent.com/blog/improved-wasm-support-coming-to-node
>
> Yes. Emscripten will also degrade to plain JavaScript as well, so that
> is an option for runtimes that can't consume wasm.
>
>
>
>     On Fri, Oct 2, 2020 at 1:43 PM Richard Greenwood
>     <richard.greenwood at gmail.com <mailto:richard.greenwood at gmail.com>>
>     wrote:
>
>         Proj 6 and 7 don't really add any new functionality. Proj does
>         forward in inverse projections and it does datum transformations
>         with 3 & 7 parameters transforms and grid shift transforms.
>         Proj4js supports most of the commonly used projections and the 3
>         & 4 param datum transforms.
>
> Proj4js doesn't support WKTv2 consumption or emission, and it doesn't
> support PROJJSON [1].  At the very least, interoperability suffers when
> crossing the proj4js boundary when trying to communicate coordinate
> system descriptions.
>
>
>
>         It doesn't support grid shift transforms and grid shift
>         transforms are what are "heavy" in terms of the size of the
>         required data. I thought a lot about adding grid shift support
>         and considered a server-side option like Javier mentions, but
>         it's a lot of moving parts for pretty limited use cases. Like
>         how many web mapping apps need the precision of a grid shift
>         transform? And for those that do, how do you build a generic
>         enough mechanism to cover the variations in scale, platform,
>         online/offline, etc.?
>
> I think the combination of COGs at cdn.proj.org
> <http://cdn.proj.org> and geotiff.js would allow for the construction of
> JavaScript support for high performance incremental grid access similar
> to the current PROJ runtime's incremental implementation. There would be
> no need to cache GBs of grid files, and the data is hosted today as web
> native as you can get as COGs in CloudFront.
>
> I think it is a mistake to see JavaScript support as only "web mapping
> apps". I think a WASM port of PROJ is a worthy goal for a number of
> reasons, but the community has to want it bad enough to invest to make
> it happen. To date, that hasn't been demonstrated.
>
> Howard
>
> [1] https://proj.org/specifications/projjson.html
>
>
>
> Disclaimer:
> De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
> Gebruik van de inhoud van dit bericht door anderen zonder toestemming
> van het Kadaster
> is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan
> verzoeken wij u
> dit direct te melden aan de verzender en het bericht te vernietigen.
> Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.
>
> Disclaimer:
> The content of this message is meant to be received by the addressee only.
> Use of the content of this message by anyone other than the addressee
> without the consent
> of the Kadaster is unlawful. If you have received this message, but are
> not the addressee,
> please contact the sender immediately and destroy the message.
> No rights can be derived from the content of this message.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>

From even.rouault at spatialys.com  Thu Oct  8 17:13:40 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 09 Oct 2020 02:13:40 +0200
Subject: [PROJ] EPSG v10 update status
Message-ID: <2714702.fZBQl2WLa1@even-i700>

Hi,

I've now code ready to handle the update to EPSG v10
(https://github.com/OSGeo/PROJ/issues/2355). There are some backward compatibility 
challenges & risk assessment to do. See the cover text of https://github.com/OSGeo/PROJ/
pull/2370 (targetted for 7.2) and
https://github.com/OSGeo/PROJ/pull/2371 (targetted for 8.0) for details.

It would be appreciated if downstream PROJ users could give a try at least at #2370 to 
confirm it doesn't break in major ways their apps.

And possibly also try #2371, but if your code inspects the details of objects, like accessing 
the datum of a CRS, be prepared for the dreaded datum ensemble concept to show up (for 
anything based on WGS84 and ETRS89), in which case you may need to use new functions 
added in the C API.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201009/4522de2d/attachment.html>

From nyall.dawson at gmail.com  Thu Oct  8 17:28:55 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Fri, 9 Oct 2020 10:28:55 +1000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <2714702.fZBQl2WLa1@even-i700>
References: <2714702.fZBQl2WLa1@even-i700>
Message-ID: <CAB28AsgqHdHWN7zHtH1U+nQHupo6YTR3whrNsQU_P4s7wvGA5A@mail.gmail.com>

On Fri, 9 Oct 2020 at 10:19, Even Rouault <even.rouault at spatialys.com> wrote:
>
> Hi,
>
>
>
> I've now code ready to handle the update to EPSG v10
>
> (https://github.com/OSGeo/PROJ/issues/2355). There are some backward compatibility challenges & risk assessment to do. See the cover text of https://github.com/OSGeo/PROJ/pull/2370 (targetted for 7.2) and
>
> https://github.com/OSGeo/PROJ/pull/2371 (targetted for 8.0) for details.
>

This is great news -- thanks for your hard work in implementing this
and the various sponsors of this work!!

Nyall

From nyall.dawson at gmail.com  Thu Oct  8 17:50:40 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Fri, 9 Oct 2020 10:50:40 +1000
Subject: [PROJ] Anyway to set a CRS object's name via c api?
Message-ID: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>

Hi list,

Using the C api "proj_get_name" method I'm able to retrieve the
descriptive name of a CRS object.

This works well for CRS obtained from the Proj database, or for CRS
defined from WKT with a name embedded: ...PROJCRS["my CRS name",
BASEGEOGCRS[...

But if I have a CRS object created using a different method (say, from
a proj string), is there any way I can manually set a name for this
CRS so that subsequent calls to proj_as_wkt will include the manually
set CRS name?

While it would be possible to get the WKT returned from proj_as_wkt
and then try to insert the custom name, this would be a lot of fragile
string manipulation which I'd rather avoid!

Nyall

From michael.smith.erdc at gmail.com  Thu Oct  8 18:14:01 2020
From: michael.smith.erdc at gmail.com (michael.smith.erdc at gmail.com)
Date: Thu, 8 Oct 2020 21:14:01 -0400
Subject: [PROJ] Anyway to set a CRS object's name via c api?
In-Reply-To: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>
References: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>
Message-ID: <AC249B95-0C39-4A4B-9940-DAAA29B7EC96@gmail.com>

You could convert to a json dict (pyprog has this) and the set the object and then reload the update json. Less fragile than the wkt. 

Mike Smith 
US Army Corps


> On Oct 8, 2020, at 8:50 PM, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> 
> ﻿Hi list,
> 
> Using the C api "proj_get_name" method I'm able to retrieve the
> descriptive name of a CRS object.
> 
> This works well for CRS obtained from the Proj database, or for CRS
> defined from WKT with a name embedded: ...PROJCRS["my CRS name",
> BASEGEOGCRS[...
> 
> But if I have a CRS object created using a different method (say, from
> a proj string), is there any way I can manually set a name for this
> CRS so that subsequent calls to proj_as_wkt will include the manually
> set CRS name?
> 
> While it would be possible to get the WKT returned from proj_as_wkt
> and then try to insert the custom name, this would be a lot of fragile
> string manipulation which I'd rather avoid!
> 
> Nyall
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From alansnow21 at gmail.com  Thu Oct  8 18:54:06 2020
From: alansnow21 at gmail.com (Alan Snow)
Date: Thu, 8 Oct 2020 20:54:06 -0500
Subject: [PROJ] Anyway to set a CRS object's name via c api?
In-Reply-To: <AC249B95-0C39-4A4B-9940-DAAA29B7EC96@gmail.com>
References: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>
 <AC249B95-0C39-4A4B-9940-DAAA29B7EC96@gmail.com>
Message-ID: <CAGybdFRu0527ND796kW6ysLi7BV29eAO1oJc5-1KHj0_saa2iQ@mail.gmail.com>

For reference: proj_as_projjson -
https://github.com/OSGeo/PROJ/blob/d83c7af5eea59eae366d61ea76d76118a8a505a0/src/proj.h#L1103

On Thu, Oct 8, 2020, 8:14 PM <michael.smith.erdc at gmail.com> wrote:

> You could convert to a json dict (pyprog has this) and the set the object
> and then reload the update json. Less fragile than the wkt.
>
> Mike Smith
> US Army Corps
>
>
> > On Oct 8, 2020, at 8:50 PM, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >
> > ﻿Hi list,
> >
> > Using the C api "proj_get_name" method I'm able to retrieve the
> > descriptive name of a CRS object.
> >
> > This works well for CRS obtained from the Proj database, or for CRS
> > defined from WKT with a name embedded: ...PROJCRS["my CRS name",
> > BASEGEOGCRS[...
> >
> > But if I have a CRS object created using a different method (say, from
> > a proj string), is there any way I can manually set a name for this
> > CRS so that subsequent calls to proj_as_wkt will include the manually
> > set CRS name?
> >
> > While it would be possible to get the WKT returned from proj_as_wkt
> > and then try to insert the custom name, this would be a lot of fragile
> > string manipulation which I'd rather avoid!
> >
> > Nyall
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201008/d6e6be22/attachment.html>

From even.rouault at spatialys.com  Fri Oct  9 04:04:35 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 09 Oct 2020 13:04:35 +0200
Subject: [PROJ] Anyway to set a CRS object's name via c api?
In-Reply-To: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>
References: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>
Message-ID: <1739092.gQPVT8SiCj@even-i700>

Hi Nyall,

> Using the C api "proj_get_name" method I'm able to retrieve the
> descriptive name of a CRS object.
> 
> This works well for CRS obtained from the Proj database, or for CRS
> defined from WKT with a name embedded: ...PROJCRS["my CRS name",
> BASEGEOGCRS[...
> 
> But if I have a CRS object created using a different method (say, from
> a proj string), is there any way I can manually set a name for this
> CRS so that subsequent calls to proj_as_wkt will include the manually
> set CRS name?
> 
> While it would be possible to get the WKT returned from proj_as_wkt
> and then try to insert the custom name, this would be a lot of fragile
> string manipulation which I'd rather avoid!


/** \brief Return a copy of the object with its name changed
 *
 * Currently, only implemented on CRS objects.
 *
 * The returned object must be unreferenced with proj_destroy() after
 * use.
 * It should be used by at most one thread at a time.
 *
 * @param ctx PROJ context, or NULL for default context
 * @param obj Object of type CRS. Must not be NULL
 * @param name New name. Must not be NULL
 *
 * @return Object that must be unreferenced with
 * proj_destroy(), or NULL in case of error.
 */
PJ PROJ_DLL *proj_alter_name(PJ_CONTEXT *ctx, const PJ *obj, const char *name);


Available in proj_experimental.h since 6.0


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201009/de50d153/attachment-0001.html>

From Roger.Bivand at nhh.no  Fri Oct  9 04:33:26 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 9 Oct 2020 13:33:26 +0200
Subject: [PROJ] EPSG v10 update status
Message-ID: <alpine.LFD.2.23.451.2010091330080.141385@reclus.nhh.no>

Is there a specific PR/fork of GDAL that matches rouault/PROJ:epsg10? 
Testing for the R packages I'm involved with uses both, so GDAL would need 
to use PROJ functions adapted for v10.

Thanks in advance,

Roger

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From even.rouault at spatialys.com  Fri Oct  9 04:53:25 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 09 Oct 2020 13:53:25 +0200
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <alpine.LFD.2.23.451.2010091330080.141385@reclus.nhh.no>
References: <alpine.LFD.2.23.451.2010091330080.141385@reclus.nhh.no>
Message-ID: <3248304.mK40WYpca0@even-i700>

Roger,

> Is there a specific PR/fork of GDAL that matches rouault/PROJ:epsg10?
> Testing for the R packages I'm involved with uses both, so GDAL would need
> to use PROJ functions adapted for v10.

To test just rouault/PROJ:epsg10, you don't need any special GDAL patched version as 
the objects returned by PROJ will still have the same structure as before (no datum 
ensemble)

To test rouault/PROJ:epsg10_part2 with GDAL, you need
https://github.com/OSGeo/gdal/pull/3033 that contains fixes for dealing with datum 
ensemble.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201009/a1fa1c15/attachment.html>

From gdt at lexort.com  Fri Oct  9 07:40:27 2020
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 09 Oct 2020 10:40:27 -0400
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <2714702.fZBQl2WLa1@even-i700> (Even Rouault's message of "Fri,
 09 Oct 2020 02:13:40 +0200")
References: <2714702.fZBQl2WLa1@even-i700>
Message-ID: <rmiblhbfoo4.fsf@s1.lexort.com>


I am glad to see progress in this area as I find datum ensembles to be a
major source of trouble, especially in the US.  A few questions:

> for dynamic datum & CRS (like "WGS 84 (Gxxxx)", "ITRFxxxx"), ingest the
> frame reference epoch from the database and emit it in WKT. No/little
> backward compatibility issue foreseen.

Sorry if this is dragging you off topic, but I continue to have a hard
time following exactly what people mean by "dynamic datum".  Sometimes
it seems to mean "defined relative to ITRFxxxx via a velocity model, so
that coordinates of crust-fixed stations are stable".  And sometimes it
seems to mean "a datum that we ackknowledge is not crust-fixed".

Here, I wonder if you are referring the to progression of realizations,
or one of the above, or something else?

> datum ensembles... This is the most annoying part. The "World Geodetic
> System 1984" and "European Terrestrial Reference System 1989" datum
> have now in EPSG 10 a " ensemble" suffix in their names to reflect the
> new nature of those objects.

I understand the issue with WGS84, and am guessing ETRS89 is similar.
I don't follow why NAD83 isn't listed here, and I wonder if you think
there's a good reason, or just 'it ought to be but nobody has done the
work yet'.

From my US-centric perspective, NAD83 and WGS84 are the preeminent
examples of datum ensembles.


Also, I wonder if ITRFxxxx is going to be treated as datum ensemble.  As
I understand it, ITRFxxxx are successive realizations for ITRS (which is
itself not a datum).


I also wonder if there is a code for WGS84(TRANSIT) or whatever it's
called, so that this is nameable separately from the ensemble.

Thanks,
Greg
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201009/2356f768/attachment.sig>

From Roger.Bivand at nhh.no  Fri Oct  9 08:25:13 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 9 Oct 2020 17:25:13 +0200
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <3248304.mK40WYpca0@even-i700>
References: <alpine.LFD.2.23.451.2010091330080.141385@reclus.nhh.no>
 <3248304.mK40WYpca0@even-i700>
Message-ID: <alpine.LFD.2.23.451.2010091717580.143259@reclus.nhh.no>

On Fri, 9 Oct 2020, Even Rouault wrote:

> Roger,
>
>> Is there a specific PR/fork of GDAL that matches rouault/PROJ:epsg10?
>> Testing for the R packages I'm involved with uses both, so GDAL would need
>> to use PROJ functions adapted for v10.
>
> To test just rouault/PROJ:epsg10, you don't need any special GDAL 
> patched version as the objects returned by PROJ will still have the same 
> structure as before (no datum ensemble)

Thanks! I've tested sf and rgdal, and apart from changing column numbers 
in the DB table for 10 compared to 9, things seem OK. I'll look to run 
tests on R packages using sf or rgdal later. The only changes were in 
documentation, where I opened proj.db directly from RSQLite to display the 
contents, so not to do with PROJ or PR #2370.

I'll move to check part2 once 7.2 is published.

Best wishes,

Roger

>
> To test rouault/PROJ:epsg10_part2 with GDAL, you need
> https://github.com/OSGeo/gdal/pull/3033 that contains fixes for dealing with datum
> ensemble.
>
> Even
>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From even.rouault at spatialys.com  Fri Oct  9 08:36:15 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 09 Oct 2020 17:36:15 +0200
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <rmiblhbfoo4.fsf@s1.lexort.com>
References: <2714702.fZBQl2WLa1@even-i700> <rmiblhbfoo4.fsf@s1.lexort.com>
Message-ID: <200313167.iEq8AJXcN1@even-i700>

Greg,

> > for dynamic datum & CRS (like "WGS 84 (Gxxxx)", "ITRFxxxx"), ingest the
> > frame reference epoch from the database and emit it in WKT. No/little
> > backward compatibility issue foreseen.
> 
> Sorry if this is dragging you off topic, but I continue to have a hard
> time following exactly what people mean by "dynamic datum".  Sometimes
> it seems to mean "defined relative to ITRFxxxx via a velocity model, so
> that coordinates of crust-fixed stations are stable".  And sometimes it
> seems to mean "a datum that we ackknowledge is not crust-fixed".
> 
> Here, I wonder if you are referring the to progression of realizations,
> or one of the above, or something else?

Sorry to just copy&paste
https://docs.opengeospatial.org/as/18-005r4/18-005r4.html , but this is the inspiring 
document for WKT:2019, all PROJ "metadata" handling and EPSG database content

"""
3.1.20
dynamic reference frame
dynamic datum
reference frame in which the defining parameters include time evolution
Note 1 to entry: The defining parameters that have time evolution are usually a coordinate 
set.
"""

Here's the extensive list of what is considered in EPSG as a dynamic datum:

$ sqlite3 data/proj.db  "select 'EPSG:' || code || ', ' || name from geodetic_datum where 
frame_reference_epoch is not null order by name" 

EPSG:1291, Australian Terrestrial Reference Frame 2014
EPSG:1245, IGS00
EPSG:1247, IGS05
EPSG:1141, IGS08
EPSG:1191, IGS14
EPSG:1244, IGS97
EPSG:1246, IGb00
EPSG:1248, IGb08
EPSG:1272, IGb14
EPSG:6647, International Terrestrial Reference Frame 1988
EPSG:6648, International Terrestrial Reference Frame 1989
EPSG:6649, International Terrestrial Reference Frame 1990
EPSG:6650, International Terrestrial Reference Frame 1991
EPSG:6651, International Terrestrial Reference Frame 1992
EPSG:6652, International Terrestrial Reference Frame 1993
EPSG:6653, International Terrestrial Reference Frame 1994
EPSG:6654, International Terrestrial Reference Frame 1996
EPSG:6655, International Terrestrial Reference Frame 1997
EPSG:6656, International Terrestrial Reference Frame 2000
EPSG:6896, International Terrestrial Reference Frame 2005
EPSG:1061, International Terrestrial Reference Frame 2008
EPSG:1165, International Terrestrial Reference Frame 2014
EPSG:6740, Parametry Zemli 1990
EPSG:1157, Parametry Zemli 1990.02
EPSG:1158, Parametry Zemli 1990.11
EPSG:1227, SIRGAS Continuously Operating Network DGF00P01
EPSG:1228, SIRGAS Continuously Operating Network DGF01P01
EPSG:1229, SIRGAS Continuously Operating Network DGF01P02
EPSG:1230, SIRGAS Continuously Operating Network DGF02P01
EPSG:1231, SIRGAS Continuously Operating Network DGF04P01
EPSG:1232, SIRGAS Continuously Operating Network DGF05P01
EPSG:1233, SIRGAS Continuously Operating Network DGF06P01
EPSG:1234, SIRGAS Continuously Operating Network DGF07P01
EPSG:1235, SIRGAS Continuously Operating Network DGF08P01
EPSG:1236, SIRGAS Continuously Operating Network SIR09P01
EPSG:1237, SIRGAS Continuously Operating Network SIR10P01
EPSG:1238, SIRGAS Continuously Operating Network SIR11P01
EPSG:1239, SIRGAS Continuously Operating Network SIR13P01
EPSG:1240, SIRGAS Continuously Operating Network SIR14P01
EPSG:1241, SIRGAS Continuously Operating Network SIR15P01
EPSG:1242, SIRGAS Continuously Operating Network SIR17P01
EPSG:1293, Sistem Referensi Geospasial Indonesia 2013
EPSG:6324, WGS 72 Transit Broadcast Ephemeris
EPSG:6760, World Geodetic System 1966
EPSG:6322, World Geodetic System 1972
EPSG:1154, World Geodetic System 1984 (G1150)
EPSG:1155, World Geodetic System 1984 (G1674)
EPSG:1156, World Geodetic System 1984 (G1762)
EPSG:1152, World Geodetic System 1984 (G730)
EPSG:1153, World Geodetic System 1984 (G873)
EPSG:1166, World Geodetic System 1984 (Transit)

>From a quick look, at least for the datums with which I've some familiarity, it looks like they 
are datums which are not crust-fixed.

For example, Australia's GDA2020 which is crust-fixed is not there, altough it has a time-
dependent Helmert transformation to ATRF2014 and ITRF2014 (both listed above)

> datum ensembles... This is the most annoying part. The "World Geodetic
> System 1984" and "European Terrestrial Reference System 1989" datum
> have now in EPSG 10 a " ensemble" suffix in their names to reflect the
> new nature of those objects.
> I don't follow why NAD83 isn't listed here, and I wonder if you think
> there's a good reason, or just 'it ought to be but nobody has done the
> work yet'.

I don't know why the NAD83 family isn't there. Probably depends on NOAA deciding on how 
it wants to deal with that.

> Also, I wonder if ITRFxxxx is going to be treated as datum ensemble.  As
> I understand it, ITRFxxxx are successive realizations for ITRS (which is
> itself not a datum).

I don't know. But given the below definition taken again from 18-005r4, I'm wondering if 
someone who bothers enough to express coordinates in a ITRFxxxx datum would be really 
keen in seeing them degraded in a coarser ITRS ensemble. You could just use the WGS 84 
ensemble for the same purpose I guess.

"""
A Datum Ensemble is a construct to facilitate the merging of realizations of the same 
Terrestrial Reference System or Vertical Reference System for lower accuracy spatial 
manipulation. In this document, datum ensemble is a collection of two or more reference 
frames that are realizations of one Terrestrial or Vertical Reference System and which for all 
but the highest accuracy requirements may be considered to be insignificantly different from 
each other. Datasets referenced to the various realizations may be merged without change 
of coordinates.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201009/71dda344/attachment-0001.html>

From nyall.dawson at gmail.com  Fri Oct  9 14:40:43 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Sat, 10 Oct 2020 07:40:43 +1000
Subject: [PROJ] Anyway to set a CRS object's name via c api?
In-Reply-To: <1739092.gQPVT8SiCj@even-i700>
References: <CAB28AsiM7RNC_wM8u2io5gmFnouPB=0y+9Nyz+8s7OTeowvLVQ@mail.gmail.com>
 <1739092.gQPVT8SiCj@even-i700>
Message-ID: <CAB28AsihavC=Uj=ywZjFS952CuL5nBjTR9HUx8XRKBpVkd0_iQ@mail.gmail.com>

On Fri, 9 Oct 2020 at 21:04, Even Rouault <even.rouault at spatialys.com> wrote:
>
> Hi Nyall,
>
>
>
> > Using the C api "proj_get_name" method I'm able to retrieve the
>
> > descriptive name of a CRS object.
>
> >
>
> > This works well for CRS obtained from the Proj database, or for CRS
>
> > defined from WKT with a name embedded: ...PROJCRS["my CRS name",
>
> > BASEGEOGCRS[...
>
> >
>
> > But if I have a CRS object created using a different method (say, from
>
> > a proj string), is there any way I can manually set a name for this
>
> > CRS so that subsequent calls to proj_as_wkt will include the manually
>
> > set CRS name?
>
> >
>
> > While it would be possible to get the WKT returned from proj_as_wkt
>
> > and then try to insert the custom name, this would be a lot of fragile
>
> > string manipulation which I'd rather avoid!
>
>
>
>
>
> /** \brief Return a copy of the object with its name changed
>
> *
>
> * Currently, only implemented on CRS objects.
>
> *
>
> * The returned object must be unreferenced with proj_destroy() after
>
> * use.
>
> * It should be used by at most one thread at a time.
>
> *
>
> * @param ctx PROJ context, or NULL for default context
>
> * @param obj Object of type CRS. Must not be NULL
>
> * @param name New name. Must not be NULL
>
> *
>
> * @return Object that must be unreferenced with
>
> * proj_destroy(), or NULL in case of error.
>
> */
>
> PJ PROJ_DLL *proj_alter_name(PJ_CONTEXT *ctx, const PJ *obj, const char *name);
>
>
>
>
>
> Available in proj_experimental.h since 6.0

Perfect, thanks!

Nyall

>
>
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com

From gdt at lexort.com  Sat Oct 10 07:36:08 2020
From: gdt at lexort.com (Greg Troxel)
Date: Sat, 10 Oct 2020 10:36:08 -0400
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <200313167.iEq8AJXcN1@even-i700> (Even Rouault's message of "Fri, 
 09 Oct 2020 17:36:15 +0200")
References: <2714702.fZBQl2WLa1@even-i700> <rmiblhbfoo4.fsf@s1.lexort.com>
 <200313167.iEq8AJXcN1@even-i700>
Message-ID: <rmi4kn2du7b.fsf@s1.lexort.com>

Even Rouault <even.rouault at spatialys.com> writes:

> Sorry to just copy&paste
> https://docs.opengeospatial.org/as/18-005r4/18-005r4.html , but this is the inspiring 
> document for WKT:2019, all PROJ "metadata" handling and EPSG database content

No problem - thanks for the pointer.

> """
> 3.1.20
> dynamic reference frame
> dynamic datum
> reference frame in which the defining parameters include time evolution
> Note 1 to entry: The defining parameters that have time evolution are usually a coordinate 
> set.
> """

I interpet that as one of:

  datums defined by a set of station coordinates at a reference epoch
  and station velocities

  datums defined by a time-dependent transformation to another datum.

> Here's the extensive list of what is considered in EPSG as a dynamic datum:
>
> $ sqlite3 data/proj.db  "select 'EPSG:' || code || ', ' || name from geodetic_datum where 
> frame_reference_epoch is not null order by name" 
>
> (snip)
> EPSG:1291, Australian Terrestrial Reference Frame 2014
> EPSG:1272, IGb14
> EPSG:1165, International Terrestrial Reference Frame 2014
> EPSG:6324, WGS 72 Transit Broadcast Ephemeris
> EPSG:6760, World Geodetic System 1966
> EPSG:6322, World Geodetic System 1972
> EPSG:1154, World Geodetic System 1984 (G1150)
> EPSG:1155, World Geodetic System 1984 (G1674)
> EPSG:1156, World Geodetic System 1984 (G1762)
> EPSG:1152, World Geodetic System 1984 (G730)
> EPSG:1153, World Geodetic System 1984 (G873)
> EPSG:1166, World Geodetic System 1984 (Transit)
>
> From a quick look, at least for the datums with which I've some familiarity, it looks like they 
> are datums which are not crust-fixed.

NAD83(2011) is missing from this list, but it is almost always used as
"epoch 2010.0".

I see having a reference epoch as a statement that the coordinates of a
point in that datum change over time, not so much as the datum having a
time-dependent definition.   I realize it's hard to be non-circular here.

> For example, Australia's GDA2020 which is crust-fixed is not there, altough it has a time-
> dependent Helmert transformation to ATRF2014 and ITRF2014 (both listed above)

It looks like GDA2020 is defined in terms of ITRF2014 and a
time-dependent transformation.  Thus it seems squarely a dynamic datum
based on the above definition.


Part of what I'm having trouble understanding is that as an example,
when you get a solution out of NRCAN PPP as IRTRF2014, it is "epoch of
data", meaning the ITF2014 coordinates of the station at that moment.
ITRF2014's reference epoch is the date at which the published stations
had the published coordinates.  So data in IRF2014 may be of an epoch
that is not the reference epoch, and I think proj doesn't yet deal with
that.

This seems analogous to NAD83, which has the same issues, except:

  velocities are much lower (so more people can ignore them)

  it's conventional to use the reference epcoh coordinates for other
  stations so you get reference epoch coordinates for your station,
  modulo non-uniform motion (because you mostly stay on one plate and
  can get away with this)
  
>> datum ensembles... This is the most annoying part. The "World Geodetic
>> System 1984" and "European Terrestrial Reference System 1989" datum
>> have now in EPSG 10 a " ensemble" suffix in their names to reflect the
>> new nature of those objects.
>> I don't follow why NAD83 isn't listed here, and I wonder if you think
>> there's a good reason, or just 'it ought to be but nobody has done the
>> work yet'.
>
> I don't know why the NAD83 family isn't there. Probably depends on NOAA deciding on how 
> it wants to deal with that.

Interesting concept that they would decide :-)  Did NGA really weigh in
on what EPSG is doing, for WGS84?

(I don't mean to suggest their input isn't wanted or useful; I would
very much pay attentiont to anything anyone from either group said!)

All that said, NGS publications make it clear that NAD83 is very much a
datum ensemble by this definition.

>> Also, I wonder if ITRFxxxx is going to be treated as datum ensemble.  As
>> I understand it, ITRFxxxx are successive realizations for ITRS (which is
>> itself not a datum).
>
> I don't know. But given the below definition taken again from 18-005r4, I'm wondering if 
> someone who bothers enough to express coordinates in a ITRFxxxx datum would be really 
> keen in seeing them degraded in a coarser ITRS ensemble. You could just use the WGS 84 
> ensemble for the same purpose I guess.

I guess that's the big point.  As I see it, in an ideal world, we
wouldn't need datum ensembles because data would be labeled in the
actual realization it is in.   We need ensembles because of all the data
that is "I know this is in some flavor of WGS84 but I don't know which."

It's therefore a fair point that the world does not seem to have data
that is labeled as 'some kind of ITRF'.


> """
> A Datum Ensemble is a construct to facilitate the merging of realizations of the same 
> Terrestrial Reference System or Vertical Reference System for lower accuracy spatial 
> manipulation. In this document, datum ensemble is a collection of two or more reference 
> frames that are realizations of one Terrestrial or Vertical Reference System and which for all 
> but the highest accuracy requirements may be considered to be insignificantly different from 
> each other. Datasets referenced to the various realizations may be merged without change 
> of coordinates.

The last sentence is interesting and surprising.

I would expect that if there is a high-quality transform between two
members of an ensemble, and data is expressed in those members, that
transform will be used.

I would also expect an ensemble to implicitly declare a low-accuracy
transform (perhaps that accuracy is or should be carried in the ensemble
definition) among any two members.

From even.rouault at spatialys.com  Sat Oct 10 08:25:22 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 10 Oct 2020 17:25:22 +0200
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <rmi4kn2du7b.fsf@s1.lexort.com>
References: <2714702.fZBQl2WLa1@even-i700> <200313167.iEq8AJXcN1@even-i700>
 <rmi4kn2du7b.fsf@s1.lexort.com>
Message-ID: <2148063.DzkYKtnvhf@even-i700>

Greg,

> I interpet that as one of:
> 
>   datums defined by a set of station coordinates at a reference epoch
>   and station velocities
> 
>   datums defined by a time-dependent transformation to another datum.

I don't think the last sentence matches what the authors of standard have in mind (I don't 
think a datum can be *defined* by a transformation to another datum. a datum exists as 
such. one may establish transformations to others, but they are not defining. at least for 
geodetic datums. for vertical datums, some of them are indeed defined by a geoid model 
that applies to a given geodetic datum).
It is not because there's a known time-dependent transformation between DatumYYYY and 
ITRFxxxx that DatumYYYY is a dynamic datum.  The time-dependency comes from the fact 
that ITRFxxxx is a dynamic datum, so when changing coordinates between crust-fixed 
DatumYYYY and ITRFxxxx, you need to specify the epoch of coordinates in ITRFxxxx.

> It looks like GDA2020 is defined in terms of ITRF2014 and a
> time-dependent transformation.  Thus it seems squarely a dynamic datum
> based on the above definition.

GDA2020 is intended to be a 'static' datum. Coordinates of an object attached to the 
Australian plate don't change over time in GDA2020.

> Part of what I'm having trouble understanding is that as an example,
> when you get a solution out of NRCAN PPP as IRTRF2014, it is "epoch of
> data", meaning the ITF2014 coordinates of the station at that moment.
> ITRF2014's reference epoch is the date at which the published stations
> had the published coordinates.  So data in IRF2014 may be of an epoch
> that is not the reference epoch, and I think proj doesn't yet deal with
> that.

That's not true. PROJ isn't able to deal properly (at least easily) with "point motion 
operation", that is transformations in the same dynamic datum, where coordinate epoch 
changes.

But it can transform coordinates from a plate-fixed/static datum (let's say GDA2020) to a 
dynamic datum (let's say ATRF2014/ITRF2014), or the reverse. When the transformation is 
published of course.

Demo:

$ projinfo -s GDA2020 -t ITRF2014 -o PROJ -q

+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert +xy_in=deg 
+xy_out=rad +step +proj=cart +ellps=GRS80 +step +inv +proj=helmert +x=0 +y=0 +z=0 +rx=0 
+ry=0 +rz=0 +s=0 +dx=0 +dy=0 +dz=0 +drx=0.00150379 +dry=0.00118346 +drz=0.00120716 
+ds=0 +t_epoch=2020 +convention=coordinate_frame +step +inv +proj=cart +ellps=GRS80 
+step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1

You can see in the above a time-dependent Helmert transformation with the reference 
epoch being 2020 (since GDA2020  and ITRF2014 are concidered coincident for all practical 
purposes at epoch 2020.0)

Now let's try at 2020, the reference epoch of the transformation:

$ echo -30 120 0 2020 | cct $(projinfo -d 8 -s GDA2020 -t ITRF2014 -o PROJ -q)
 -30.00000000   120.00000000    0.00000000     2020.0000

And in 2030:

$ echo -30 120 0 2030 | cct $(projinfo -d 8 -s GDA2020 -t ITRF2014 -o PROJ -q)
 -29.99999472   120.00000379   -0.00169912     2030.0000


> > I don't know why the NAD83 family isn't there. Probably depends on NOAA
> > deciding on how it wants to deal with that.
> 
> Interesting concept that they would decide :-)  Did NGA really weigh in
> on what EPSG is doing, for WGS84?

Well, it **IS** the responsibility of geodetic agencies to speak actively with IOGP to make 
their data conveniently available to users. Each party might have their views on the best 
solution, but from exchanges I've been copied to, such discussions are done in a constructive 
way. If an agency doesn't speak with IOGP, their data might be just ignored, or if it is needed, 
IOGP or submitters to IOGP will make their own decisions. As an individual you can also talk 
with IOGP and submit change requests:
https://epsg.org/dataset-change-requests.html

Let be realist: the PROJ team isn't staffed to do the job that IOGP does with the EPSG 
dataset. My guesstimate would be that it must be at least one-full time geodesist to maintain 
and enchance it.

> I guess that's the big point.  As I see it, in an ideal world, we
> wouldn't need datum ensembles because data would be labeled in the
> actual realization it is in.   We need ensembles because of all the data
> that is "I know this is in some flavor of WGS84 but I don't know which."

There's a practical reason for datum ensembles to be used. It is to avoid the proliferation of 
"derived objects". A projected CRS points to a geographic CRS which points to a datum/
datum ensemble. Currently you have 120 projected UTM CRS over WGS84. If you wanted to 
have them for each of the realizations, you'd have to multiply that by 6. The database would 
grow unwidely.

> > Datasets referenced to the various
> > realizations may be merged without change of coordinates.
> 
> The last sentence is interesting and surprising.
> 
> I would expect that if there is a high-quality transform between two
> members of an ensemble, and data is expressed in those members, that
> transform will be used.

Yes, there are definitely transformations that exist between ITRF realizations. It is just that if 
you've data referenced to a datum ensemble and not a given realization, this is game over: 
you don't know which realization, so no high accuracy transformation possible.

> I would also expect an ensemble to implicitly declare a low-accuracy
> transform (perhaps that accuracy is or should be carried in the ensemble
> definition) among any two members.

Such transformations exist in the database as said above. They are just not exposed in the 
datum ensemble itself (it would be quite messy !)

$ sqlite3 data/proj.db  "select code, name from coordinate_operation_view where (name 
LIKE '%ITRF%to%ITRF%' or name LIKE '%WGS 84 (G%)%to%WGS 84 (G%)%') and auth_name 
= 'EPSG' and deprecated = 0 order by name"
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201010/8e838e80/attachment-0001.html>

From Jochem.Lesparre at kadaster.nl  Sat Oct 10 09:41:01 2020
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Sat, 10 Oct 2020 16:41:01 +0000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <2148063.DzkYKtnvhf@even-i700>
References: <2714702.fZBQl2WLa1@even-i700> <200313167.iEq8AJXcN1@even-i700>
 <rmi4kn2du7b.fsf@s1.lexort.com> <2148063.DzkYKtnvhf@even-i700>
Message-ID: <AM6P192MB04704F32022F3DCC44E7126FEF090@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>

Hi list,

I would like to add some comments on 4 unrelated remarks by Greg and Even.


1. Greg wrote:
> "I know this is in some flavor of WGS84 but I don't know which."

The label WGS84 is often also used for data in ITRS or ETRS89 (and I suppose this happens for NADxx too), so it often is "I know this is in some kind of latlon but I don't know which", or even worse: "I know this data is in ETRF2000 but the data format I'm using forces me to call it WGS84".


2. Greg wrote:
> I would also expect an ensemble to implicitly declare a low-accuracy transform (perhaps that accuracy is or should be carried in the ensemble definition) among any two members.

The EPSG registry has a precision parameter for each transformation (not for a CRS). The transformation to/from a datum ensemble has lower precision than the transformation to a specific realisation of that ensemble. It would be nice if PROJ could propagate this precision as a 5th value (after the 4 values for the 3D coordinates and time).


3. Even wrote:
> I don't think the last sentence matches what the authors of standard have in mind (I don't think a datum can be *defined* by a transformation to another datum. a datum exists as such. one may establish transformations to others, but they are not defining. at least for geodetic datums. for vertical datums, some of them are indeed defined by a geoid model that applies to a given geodetic datum).

The National CRS of the Netherlands (EPSG crs: 28992) has its own has datum (EPSG datum: 6289). Since 2000, this Dutch datum IS defined as the transformation from ETRS89 (ETRF2000). EPSG mentions for the origin of the datum: "Originally defined through fundamental point Amersfoort, latitude 52°09'22.178"N, longitude 5°23'15.478"E (of Greenwich). Since 2000-10-01 has been redefined as derived from ETRS89 by application of the official transformation RDNAPTRANS(TM)."


4. Greg wrote:
> My guesstimate would be that it must be at least one-full time geodesist to maintain and enchance it [EPSG].

In fact, there are two geodesists at IOGP for this, but I believe that EPSG is just one of their tasks.


Regards, Jochem


From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Even Rouault
Sent: zaterdag 10 oktober 2020 17:25
To: Greg Troxel <gdt at lexort.com>
Cc: proj at lists.osgeo.org
Subject: Re: [PROJ] EPSG v10 update status


Greg,



> I interpet that as one of:

>

> datums defined by a set of station coordinates at a reference epoch

> and station velocities

>

> datums defined by a time-dependent transformation to another datum.



I don't think the last sentence matches what the authors of standard have in mind (I don't think a datum can be *defined* by a transformation to another datum. a datum exists as such. one may establish transformations to others, but they are not defining. at least for geodetic datums. for vertical datums, some of them are indeed defined by a geoid model that applies to a given geodetic datum).

It is not because there's a known time-dependent transformation between DatumYYYY and ITRFxxxx that DatumYYYY is a dynamic datum. The time-dependency comes from the fact that ITRFxxxx is a dynamic datum, so when changing coordinates between crust-fixed DatumYYYY and ITRFxxxx, you need to specify the epoch of coordinates in ITRFxxxx.



> It looks like GDA2020 is defined in terms of ITRF2014 and a

> time-dependent transformation. Thus it seems squarely a dynamic datum

> based on the above definition.



GDA2020 is intended to be a 'static' datum. Coordinates of an object attached to the Australian plate don't change over time in GDA2020.



> Part of what I'm having trouble understanding is that as an example,

> when you get a solution out of NRCAN PPP as IRTRF2014, it is "epoch of

> data", meaning the ITF2014 coordinates of the station at that moment.

> ITRF2014's reference epoch is the date at which the published stations

> had the published coordinates. So data in IRF2014 may be of an epoch

> that is not the reference epoch, and I think proj doesn't yet deal with

> that.



That's not true. PROJ isn't able to deal properly (at least easily) with "point motion operation", that is transformations in the same dynamic datum, where coordinate epoch changes.



But it can transform coordinates from a plate-fixed/static datum (let's say GDA2020) to a dynamic datum (let's say ATRF2014/ITRF2014), or the reverse. When the transformation is published of course.



Demo:



$ projinfo -s GDA2020 -t ITRF2014 -o PROJ -q



+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=cart +ellps=GRS80 +step +inv +proj=helmert +x=0 +y=0 +z=0 +rx=0 +ry=0 +rz=0 +s=0 +dx=0 +dy=0 +dz=0 +drx=0.00150379 +dry=0.00118346 +drz=0.00120716 +ds=0 +t_epoch=2020 +convention=coordinate_frame +step +inv +proj=cart +ellps=GRS80 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1



You can see in the above a time-dependent Helmert transformation with the reference epoch being 2020 (since GDA2020 and ITRF2014 are concidered coincident for all practical purposes at epoch 2020.0)



Now let's try at 2020, the reference epoch of the transformation:



$ echo -30 120 0 2020 | cct $(projinfo -d 8 -s GDA2020 -t ITRF2014 -o PROJ -q)

-30.00000000 120.00000000 0.00000000 2020.0000



And in 2030:



$ echo -30 120 0 2030 | cct $(projinfo -d 8 -s GDA2020 -t ITRF2014 -o PROJ -q)

-29.99999472 120.00000379 -0.00169912 2030.0000





> > I don't know why the NAD83 family isn't there. Probably depends on NOAA

> > deciding on how it wants to deal with that.

>

> Interesting concept that they would decide :-) Did NGA really weigh in

> on what EPSG is doing, for WGS84?



Well, it **IS** the responsibility of geodetic agencies to speak actively with IOGP to make their data conveniently available to users. Each party might have their views on the best solution, but from exchanges I've been copied to, such discussions are done in a constructive way. If an agency doesn't speak with IOGP, their data might be just ignored, or if it is needed, IOGP or submitters to IOGP will make their own decisions. As an individual you can also talk with IOGP and submit change requests:

https://epsg.org/dataset-change-requests.html



Let be realist: the PROJ team isn't staffed to do the job that IOGP does with the EPSG dataset. My guesstimate would be that it must be at least one-full time geodesist to maintain and enchance it.



> I guess that's the big point. As I see it, in an ideal world, we

> wouldn't need datum ensembles because data would be labeled in the

> actual realization it is in. We need ensembles because of all the data

> that is "I know this is in some flavor of WGS84 but I don't know which."



There's a practical reason for datum ensembles to be used. It is to avoid the proliferation of "derived objects". A projected CRS points to a geographic CRS which points to a datum/datum ensemble. Currently you have 120 projected UTM CRS over WGS84. If you wanted to have them for each of the realizations, you'd have to multiply that by 6. The database would grow unwidely.



> > Datasets referenced to the various

> > realizations may be merged without change of coordinates.

>

> The last sentence is interesting and surprising.

>

> I would expect that if there is a high-quality transform between two

> members of an ensemble, and data is expressed in those members, that

> transform will be used.



Yes, there are definitely transformations that exist between ITRF realizations. It is just that if you've data referenced to a datum ensemble and not a given realization, this is game over: you don't know which realization, so no high accuracy transformation possible.



> I would also expect an ensemble to implicitly declare a low-accuracy

> transform (perhaps that accuracy is or should be carried in the ensemble

> definition) among any two members.



Such transformations exist in the database as said above. They are just not exposed in the datum ensemble itself (it would be quite messy !)



$ sqlite3 data/proj.db "select code, name from coordinate_operation_view where (name LIKE '%ITRF%to%ITRF%' or name LIKE '%WGS 84 (G%)%to%WGS 84 (G%)%') and auth_name = 'EPSG' and deprecated = 0 order by name"

6302|ITRF2000 to ITRF2005 (1)

6300|ITRF2000 to ITRF2008 (1)

8078|ITRF2000 to ITRF2014 (1)

9080|ITRF2000 to ITRF96 (2)

6389|ITRF2005 to ITRF2008 (2)

8079|ITRF2005 to ITRF2014 (1)

9081|ITRF2005 to ITRF96 (1)

7790|ITRF2008 to ITRF2014 (1)

9082|ITRF2008 to ITRF96 (2)

9083|ITRF2014 to ITRF96 (2)

6281|ITRF88 to ITRF2000 (1)

6291|ITRF88 to ITRF2008 (1)

8069|ITRF88 to ITRF2014 (1)

9020|ITRF88 to ITRF89 (1)

7814|ITRF89 to ITRF2000 (1)

6292|ITRF89 to ITRF2008 (1)

8070|ITRF89 to ITRF2014 (1)

9021|ITRF89 to ITRF90 (1)

6283|ITRF90 to ITRF2000 (1)

6293|ITRF90 to ITRF2008 (1)

8071|ITRF90 to ITRF2014 (1)

9022|ITRF90 to ITRF91 (1)

6284|ITRF91 to ITRF2000 (1)

6294|ITRF91 to ITRF2008 (1)

8072|ITRF91 to ITRF2014 (1)

9023|ITRF91 to ITRF92 (1)

6285|ITRF92 to ITRF2000 (1)

6295|ITRF92 to ITRF2008 (1)

8073|ITRF92 to ITRF2014 (1)

9024|ITRF92 to ITRF93 (1)

6286|ITRF93 to ITRF2000 (1)

6296|ITRF93 to ITRF2008 (1)

8074|ITRF93 to ITRF2014 (1)

9025|ITRF93 to ITRF94 (1)

6287|ITRF94 to ITRF2000 (1)

6297|ITRF94 to ITRF2008 (1)

8075|ITRF94 to ITRF2014 (1)

9026|ITRF94 to ITRF96 (1)

6288|ITRF96 to ITRF2000 (1)

6298|ITRF96 to ITRF2008 (1)

8076|ITRF96 to ITRF2014 (1)

9027|ITRF96 to ITRF97 (1)

6289|ITRF97 to ITRF2000 (1)

6299|ITRF97 to ITRF2008 (1)

8077|ITRF97 to ITRF2014 (1)

9079|ITRF97 to ITRF96 (2)

7668|WGS 84 (G1150) to WGS 84 (G1762) (1)

7667|WGS 84 (G1674) to WGS 84 (G1762) (1)



Some of them are time-dependent, some sone.



$ projinfo "ITRF2000 to ITRF2005 (1)" -o PROJ



+proj=helmert +x=-0.0001 +y=0.0008 +z=0.0058 +rx=0 +ry=0 +rz=0 +s=-0.0004 +dx=0.0002 +dy=-0.0001 +dz=0.0018 +drx=0 +dry=0 +drz=0 +ds=-8e-05 +t_epoch=2000 +convention=position_vector



$ projinfo "WGS 84 (G1150) to WGS 84 (G1762) (1)" -o PROJ



+proj=helmert +x=-0.006 +y=0.005 +z=0.02 +rx=0 +ry=0 +rz=0 +s=-0.0045 +convention=coordinate_frame



Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
dit direct te melden aan de verzender en het bericht te vernietigen.
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent
of the Kadaster is unlawful. If you have received this message, but are not the addressee,
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201010/bab09e5e/attachment-0001.html>

From nyall.dawson at gmail.com  Sat Oct 10 19:03:09 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Sun, 11 Oct 2020 12:03:09 +1000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <2714702.fZBQl2WLa1@even-i700>
References: <2714702.fZBQl2WLa1@even-i700>
Message-ID: <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>

> And possibly also try #2371, but if your code inspects the details of objects, like accessing the datum of a CRS, be prepared for the dreaded datum ensemble concept to show up (for anything based on WGS84 and ETRS89), in which case you may need to use new functions added in the C API.

Hi Even,

I've been trying to get my head around how the introduction of datum
ensembles will impact downstream projects, and specifically how things
will/should change for users of these applications.

Am I correct in my understanding that a ensemble is (at this stage) a
"metadata only" concept, which indicates that the datum is only
suitable for approximate spatial referencing? Or does a datum being
flagged as an ensemble also influence the operations determined by
PROJ and their order of precedence?

How would you imagine a downstream project like QGIS should respond to
this concept? Should we add a user-visible flag on any CRS definitions
associated with a datum ensemble to say "Warning: ensemble datum, not
for use in accurate spatial referencing"? What other user-facing
changes do you think should be introduced?

Nyall






>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From nyall.dawson at gmail.com  Sat Oct 10 19:14:57 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Sun, 11 Oct 2020 12:14:57 +1000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <200313167.iEq8AJXcN1@even-i700>
References: <2714702.fZBQl2WLa1@even-i700> <rmiblhbfoo4.fsf@s1.lexort.com>
 <200313167.iEq8AJXcN1@even-i700>
Message-ID: <CAB28AsjDd81R_2=2htz+-F0aMyOeAqOHgZApRHP0g7QbNSTbxQ@mail.gmail.com>

On Sat, 10 Oct 2020 at 01:36, Even Rouault <even.rouault at spatialys.com> wrote:

> Here's the extensive list of what is considered in EPSG as a dynamic datum:
>
>
>
> $ sqlite3 data/proj.db "select 'EPSG:' || code || ', ' || name from geodetic_datum where frame_reference_epoch is not null order by name"
>
snip
>
> EPSG:1166, World Geodetic System 1984 (Transit)

Is there any proj c api which can be used to determine whether or not
a particular datum is dynamic? (i.e. to obtain this list without
direct database querying).

> for dynamic datum & CRS (like "WGS 84 (Gxxxx)", "ITRFxxxx"), ingest the
> frame reference epoch from the database and emit it in WKT. No/little
> backward compatibility issue foreseen.

My interpretation of your PRs is that the answer is no, but just to
confirm: does proj now have the capability to ingest coordinate
metadata from a WKT string? If so, is there any api in proj yet to
retrieve the coordinate epoch from this metadata for a dynamic datum
CRS?

Nyall


>
>
>
> From a quick look, at least for the datums with which I've some familiarity, it looks like they are datums which are not crust-fixed.
>
>
>
> For example, Australia's GDA2020 which is crust-fixed is not there, altough it has a time-dependent Helmert transformation to ATRF2014 and ITRF2014 (both listed above)
>
>
>
> > datum ensembles... This is the most annoying part. The "World Geodetic
>
> > System 1984" and "European Terrestrial Reference System 1989" datum
>
> > have now in EPSG 10 a " ensemble" suffix in their names to reflect the
>
> > new nature of those objects.
>
> > I don't follow why NAD83 isn't listed here, and I wonder if you think
>
> > there's a good reason, or just 'it ought to be but nobody has done the
>
> > work yet'.
>
>
>
> I don't know why the NAD83 family isn't there. Probably depends on NOAA deciding on how it wants to deal with that.
>
>
>
> > Also, I wonder if ITRFxxxx is going to be treated as datum ensemble. As
>
> > I understand it, ITRFxxxx are successive realizations for ITRS (which is
>
> > itself not a datum).
>
>
>
> I don't know. But given the below definition taken again from 18-005r4, I'm wondering if someone who bothers enough to express coordinates in a ITRFxxxx datum would be really keen in seeing them degraded in a coarser ITRS ensemble. You could just use the WGS 84 ensemble for the same purpose I guess.
>
>
>
> """
>
> A Datum Ensemble is a construct to facilitate the merging of realizations of the same Terrestrial Reference System or Vertical Reference System for lower accuracy spatial manipulation. In this document, datum ensemble is a collection of two or more reference frames that are realizations of one Terrestrial or Vertical Reference System and which for all but the highest accuracy requirements may be considered to be insignificantly different from each other. Datasets referenced to the various realizations may be merged without change of coordinates.
>
> """
>
>
>
> > I also wonder if there is a code for WGS84(TRANSIT) or whatever it's
>
> > called, so that this is nameable separately from the ensemble.
>
>
>
> With epsg10_part2:
>
>
>
> $ projinfo -k ensemble EPSG:6326
>
>
>
> WKT2:2019 string:
>
> ENSEMBLE["World Geodetic System 1984 ensemble",
>
> MEMBER["World Geodetic System 1984 (Transit)",
>
> ID["EPSG",1166]],
>
> MEMBER["World Geodetic System 1984 (G730)",
>
> ID["EPSG",1152]],
>
> MEMBER["World Geodetic System 1984 (G873)",
>
> ID["EPSG",1153]],
>
> MEMBER["World Geodetic System 1984 (G1150)",
>
> ID["EPSG",1154]],
>
> MEMBER["World Geodetic System 1984 (G1674)",
>
> ID["EPSG",1155]],
>
> MEMBER["World Geodetic System 1984 (G1762)",
>
> ID["EPSG",1156]],
>
> ELLIPSOID["WGS 84",6378137,298.257223563,
>
> LENGTHUNIT["metre",1],
>
> ID["EPSG",7030]],
>
> ENSEMBLEACCURACY[2.0],
>
> ID["EPSG",6326]]
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From gdt at lexort.com  Sun Oct 11 08:15:48 2020
From: gdt at lexort.com (Greg Troxel)
Date: Sun, 11 Oct 2020 11:15:48 -0400
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 (Nyall Dawson's message of "Sun, 11 Oct 2020 12:03:09 +1000")
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
Message-ID: <rmi1ri4bxp7.fsf@s1.lexort.com>


Nyall Dawson <nyall.dawson at gmail.com> writes:

> Hi Even,
>
> I've been trying to get my head around how the introduction of datum
> ensembles will impact downstream projects, and specifically how things
> will/should change for users of these applications.
>
> Am I correct in my understanding that a ensemble is (at this stage) a
> "metadata only" concept, which indicates that the datum is only
> suitable for approximate spatial referencing? Or does a datum being
> flagged as an ensemble also influence the operations determined by
> PROJ and their order of precedence?
>
> How would you imagine a downstream project like QGIS should respond to
> this concept? Should we add a user-visible flag on any CRS definitions
> associated with a datum ensemble to say "Warning: ensemble datum, not
> for use in accurate spatial referencing"? What other user-facing
> changes do you think should be introduced?
>
> Nyall

Sort of related: I am having a CRS problem with QGIS and the world (not
fair to blame QGIS/proj) and I thought it might be helpful to explain
it.  It's a little long but I hope straightforward.

This note is written about qgis 3.10 and proj 6.3.2 on NetBSD.  I have
tried Mac QGIS but it has proj 5 and things are much worse.

I'm in Massachusetts, US, and thus have a lot of data in "NAD83(2011)
epoch 2010.0".  (skippable details: This is a plate-fixed datum, but
there is an epoch because coordinates change over time.  However, the
changes are at the maybe 2 mm/year level and thus ignored by pretty much
everyone.  One gets epoch 2010.0 values for GPS observations today,
because the practice is to use the epcoh 2010 values as the reference
station coordinates.  I'll drop the epoch 2010.0 in the rest of this
email, because that has nothing to do with my problem.)

Some of this data is from GPS processed by OPUS, and some from GNSS RTK
from my state's reference network.  My state also makes 15cm imagery
available as NAD83(2011) UTM and they report having have done ground
control to 0.1m RMS.  My checking of that vs GNSS fails to support a
hypothesis that the imagery is worse than 0.5m anywhere, eve allowing
for deck railings which are tricky for orthorectification.  The point is
that the accuracy of the imagery registration is much better than a
meter, and thus much lower than the NAD83/ITRF offset.

There is also vector data from the state, in NAD83(2011), with varying
accuracy.  Some of it (parcels) seems sub-meter in quality in some spots.

My state also publishes TMS of some of the layers, including the 15cm
imagery and the parcels layer.  These are therefore in WGS84 spherical
mercator.  Spherical mercator is of course not a problem, but this is
the fuzzy WGS84 datum ensemble.

Obviously when publishing as TMS the data should have been reprojected
from NAD83(2011) to WGS84(G1762) because original WGS84 is an irrelevant
historical curiousity for spring 2019 imagery ground controlled to
NAD83(2011).  I 95%+ think this is true, but I'm still trying to check,
confounded by the issue I'm writing about.

I also have some data in ITRF2014, basically output from NRCAN PPP and
OPUS.  I put this into a hand-created gpx.

I have some data in gpx format that was recorded via RTK with a
NAD83(2011) reference station.

There are precise transforms from NAD83(2011) to WGS84(G1762), or
certainly one can fake this in proj/QGIS by telling QGIS that the data
is ITRF2014.  When I do this (label the gpx with ITRF2014 as ITRF2014,
and the RTK/NAD83(2011) gpx as NAD83(2011)), everything lines up.

I am using NAD83(2011) UTM as my project CRS, to avoid reprojecting the
good imagery.

I noticed that the gpx with ITRF when I added it was treated as WGS84
(which is how gpx is defined) and given a null transform to NAD83.  That
was easy to fix by labeling it ITRF2014.

However, the iamgery that is in TMS ("WGS84") is I believe also not
transformed to NAD83, on the theory that a null transform is valid from
"WGS84" to NAD83(2011).  This is definitely a bug -- but it's hard to
say exactly where.

It also seems wrong that if I set project CRS to NAD83(2011) one thing
happens (null transform from WGS84) but if I set it to ITRF2014 another
(proper transfrom from NAD83 and a now-correct null transform from WGS84
to ITRF2014).

One theory is that it's a bug that TMS is defined in a datum ensemble,
rather then being defined to be in the latest WGS84.  But that seems
entirely unfixable.

My preferred theory is that while NAD83 and WGS84, whentreated as
ensembles, can be said to have a null transform (in that the oldest
versions of each can be said to match), that is not a reasoable
approach, and that while one should not ascribe high accuracy to a
transform with ensembles, the best choice oftransform is the one between
the most recent member of each ensemble.

This basically would result in treating WGS84 web mercator as probably
being WGS84(G1762) and transforming it as if it was.  This reduces the
error in the case when people are being careful/modern, and puts the
error on the cases when the data is actually in WGS84(TRANSIT) in which
case it already has a lot of fuzz.

Without this interpretation, I don't see how anyone can publish imagery
as TMS and expect users to be able to line anything up with it, without
meter-level errors or getting lucky about project CRS.

With this "choose best" approach, I don't see who is harmed.

This is sort of related to Nyall's question, and I thought the struggles
of someone who actually understands these issues and is still having
trouble might be useful.

Greg

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201011/7a101a9c/attachment.sig>

From even.rouault at spatialys.com  Sun Oct 11 10:16:04 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 11 Oct 2020 19:16:04 +0200
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
Message-ID: <2071493.aptHqxa6Py@even-i700>

Nyall,

For the record, I'm running now QGIS master against PROJ's epsg10_part2 branch and things 
seem to go fine (but I didn't stress QGIS much)

QGIS doesn't use proj_crs_get_datum() (which will return NULL in PROJ 8 / epsg10_part2 
branch for a CRS based on WGS 84), so at first sight, I don't think any code change is required.

> Am I correct in my understanding that a ensemble is (at this stage) a
> "metadata only" concept, which indicates that the datum is only
> suitable for approximate spatial referencing? Or does a datum being
> flagged as an ensemble also influence the operations determined by
> PROJ and their order of precedence?

This should have no consequence on the order of precedence of operations returned by 
PROJ. At least for now since in PROJ, for convenience of code, in the createOperations() 
code paths, everytime a datum is needed, if the CRS intead uses a datumEnsemble it is 
internally converted to a datum object. The sorting logic of operations doesn't specifically 
take into account the presence of a datum ensemble (other than the fact that 
transformations from/to WGS 84 should normally have at least a >= 1m accuracy)

> How would you imagine a downstream project like QGIS should respond to
> this concept? Should we add a user-visible flag on any CRS definitions
> associated with a datum ensemble to say "Warning: ensemble datum, not
> for use in accurate spatial referencing"? What other user-facing
> changes do you think should be introduced?

That's a tough question. Depends if we want to stress users or not :-)

For example, when you open a dataset referenced to WGS84, I don't think we should put a 
warning. The user isn't responsible for the choice of the data producer.

With PROJ 8 / epsg10_part2, the WKT:2019 output of a CRS using WGS84 will show the 
ENSEMBLE[] and the 2m ensemble accuracy, so that's already a form of warning (but 
probably most people not aware of the issue won't realize what this means)

When a user saves a layer from a CRS that doesn't use a datumensemble to another one that 
uses one, perhaps a warning could be issued. But I'm not sure if we should do that. That also 
depends on the accuracy of the data itself. Reprojecting something with a 100m accuracy to 
WGS84 isn't really a problem. There are so many ways in which users can shoot themselves in 
the foot. Almost anything involving datum transformation introduces extra inaccuracy.

There's also the fact that there are none projected CRS available in EPSG based on any of the 
realizations of WGS84 or ETRS89... So users have no easy choice of a better alternative, if 
they want to stay in the 'family' of the datum ensemble.

And not all datum ensembles are the same. (well, there are just 2 geodetic datums in EPSG 
for now :-)). But the ensemble accuracy of ETRS89 is 0.1 m. Not the same story as the 2 m of 
WGS84. So for European users ETRS89 is quite a reasonable choice for a lot of use cases. I 
don't believe the use of a given realization of it is very frequent, at least in the GIS field. 
People would actually rather use a national datum when available (in France RGF93 which in 
its latest version is a realization of ETRF2000 at epoch 2009.0, similar story for CHTRF95 in 
Switzerland, etc.), mostly for legal reasons, than a generic pan-european ETRF realization.

That's just my current thoughts. I've no definitive opinion. Looks to me datum ensemble are 
more a band aid to reflect that the current situation is not ideal, but the ideal has not been 
drawn (yet?)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201011/c3c05273/attachment-0001.html>

From even.rouault at spatialys.com  Sun Oct 11 12:06:51 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 11 Oct 2020 21:06:51 +0200
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <CAB28AsjDd81R_2=2htz+-F0aMyOeAqOHgZApRHP0g7QbNSTbxQ@mail.gmail.com>
References: <2714702.fZBQl2WLa1@even-i700> <200313167.iEq8AJXcN1@even-i700>
 <CAB28AsjDd81R_2=2htz+-F0aMyOeAqOHgZApRHP0g7QbNSTbxQ@mail.gmail.com>
Message-ID: <5338181.KFX8tnVmvC@even-i700>

Nyall,

> Is there any proj c api which can be used to determine whether or not
> a particular datum is dynamic? (i.e. to obtain this list without
> direct database querying).

proj_get_codes_from_database(
  ctx, "EPSG", PJ_TYPE_DYNAMIC_GEODETIC_REFERENCE_FRAME, false);

... which didn't work before you raised the question. I've added commits to the PR first part 
to fix that (and rebased part 2 on top of it)

On a given object proj_get_type() will also return 
PJ_TYPE_DYNAMIC_GEODETIC_REFERENCE_FRAME when appropriate

> 
> > for dynamic datum & CRS (like "WGS 84 (Gxxxx)", "ITRFxxxx"), ingest the
> > frame reference epoch from the database and emit it in WKT. No/little
> > backward compatibility issue foreseen.
> 
> My interpretation of your PRs is that the answer is no, but just to
> confirm: does proj now have the capability to ingest coordinate
> metadata from a WKT string?

I assume you mean a construct like the below that associates a CRS and the coordinate epoch 
(2016.47), and also for understanding of other readers not familiar with it:

COORDINATEMETADATA[
	GEOGCRS["WGS 84 (G1762)",
		DYNAMIC[FRAMEEPOCH[2005.0]],
		DATUM["World Geodetic System 1984 (G1762)",
			ELLIPSOID["WGS 84",
6378137,298.257223563,LENGTHUNIT["metre",1.0]]
		],
		CS[ellipsoidal,3],
			AXIS["(lat)",north,ANGLEUNIT["degree",
0.0174532925199433]],
			AXIS["(lon)",east,ANGLEUNIT["degree",
0.0174532925199433]],
			AXIS["ellipsoidal height (h)",up,LENGTHUNIT["metre",
1.0]]
	],
	EPOCH[2016.47]
]

The answer is no indeed. This is not something currently handled by PROJ.

I'm not clear if that construct is a solution for the need of storing a coordinate epoch. I don't 
think it would be legal for example to put it the gpkg_spatial_ref_sys table of a GeoPackage, 
which is to store CRS only, whereas we have here a tuple CRS + coordinate epoch (so there's 
no authority or code for the tuple itself). And that would be probably a bad design. For 
GeoPackage, I'd say that the gpkg_contents should have an addition column 
"coordinate_epoch" for that purpose, as this is fondamentally a property associated to the 
layer directly (assuming people don't need to store it per feature or per vertex !!!)

There would be interesting questions to how to deal with that WKT construct and the fact 
that a PROJ_COORD can also transmit a coordinate epoch... But the PROJ API is certainly not 
final regarding time-based transformation, as we don't have a proper way of asking "give me 
a tranformation from CRS A @ epoch T1 to CRS B @ epoch T2" (where CRS A == CRS B is a 
common case for "point motion operation"). I remember we discussed that a bit in a past 
thread.

> If so, is there any api in proj yet to
> retrieve the coordinate epoch from this metadata for a dynamic datum
> CRS?

In my updated pull request, for the sake of completness, I've added 
proj_dynamic_datum_get_frame_reference_epoch() that will return the 2005.0 of 
the DYNAMIC[FRAMEEPOCH[2005.0]] in the above example, which is something that 
characterize the definition of the dynamic datum itself, but not the coordinate epoch itself. 
I'm not sure if there is any use of that. It could potentially be used internally by PROJ for 
doing time-based transformations, but I'm not even clear if that would be really needed: for 
example time dependent Helmert transformations have an explicit reference epoch in them.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201011/90425bfa/attachment.html>

From ccrook at linz.govt.nz  Sun Oct 11 13:04:36 2020
From: ccrook at linz.govt.nz (Chris Crook)
Date: Sun, 11 Oct 2020 20:04:36 +0000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <AM6P192MB04704F32022F3DCC44E7126FEF090@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>
References: <2714702.fZBQl2WLa1@even-i700> <200313167.iEq8AJXcN1@even-i700> 
 <rmi4kn2du7b.fsf@s1.lexort.com> <2148063.DzkYKtnvhf@even-i700>,
 <AM6P192MB04704F32022F3DCC44E7126FEF090@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>
Message-ID: <SY2PR01MB3001CBFCD24F76C57A2D218EEC060@SY2PR01MB3001.ausprd01.prod.outlook.com>


3. Even wrote:

> I don't think the last sentence matches what the authors of standard have in mind (I don't think a datum can be *defined* by a transformation to another datum. a datum exists as such. one may establish transformations to others, but they are not defining. at least for geodetic datums. for vertical datums, some of them are indeed defined by a geoid model that applies to a given geodetic datum).



The National CRS of the Netherlands (EPSG crs: 28992) has its own has datum (EPSG datum: 6289). Since 2000, this Dutch datum IS defined as the transformation from ETRS89 (ETRF2000). EPSG mentions for the origin of the datum: "Originally defined through fundamental point Amersfoort, latitude 52°09'22.178"N, longitude 5°23'15.478"E (of Greenwich). Since 2000-10-01 has been redefined as derived from ETRS89 by application of the official transformation RDNAPTRANS(TM)."

Similarly in NZ, NZGD2000 has been defined since 2000.0 as based on ITRF96 by deformation model transformation from ITRF96 (and now by additional transformations from ITRFxxxx as ITRF96 is no longer directly accessible).  Which is not to say it isn't what the authors of the standard had in mind - but it is a geodetic reality.

Regards
Chris

________________________________

From: PROJ <proj-bounces at lists.osgeo.org> on behalf of Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Sent: 11 October 2020 05:41
To: Even Rouault <even.rouault at spatialys.com>; Greg Troxel <gdt at lexort.com>
Cc: proj at lists.osgeo.org <proj at lists.osgeo.org>
Subject: Re: [PROJ] EPSG v10 update status


Hi list,



I would like to add some comments on 4 unrelated remarks by Greg and Even.





1. Greg wrote:

> "I know this is in some flavor of WGS84 but I don't know which."



The label WGS84 is often also used for data in ITRS or ETRS89 (and I suppose this happens for NADxx too), so it often is "I know this is in some kind of latlon but I don't know which", or even worse: "I know this data is in ETRF2000 but the data format I'm using forces me to call it WGS84".





2. Greg wrote:

> I would also expect an ensemble to implicitly declare a low-accuracy transform (perhaps that accuracy is or should be carried in the ensemble definition) among any two members.



The EPSG registry has a precision parameter for each transformation (not for a CRS). The transformation to/from a datum ensemble has lower precision than the transformation to a specific realisation of that ensemble. It would be nice if PROJ could propagate this precision as a 5th value (after the 4 values for the 3D coordinates and time).





3. Even wrote:

> I don't think the last sentence matches what the authors of standard have in mind (I don't think a datum can be *defined* by a transformation to another datum. a datum exists as such. one may establish transformations to others, but they are not defining. at least for geodetic datums. for vertical datums, some of them are indeed defined by a geoid model that applies to a given geodetic datum).



The National CRS of the Netherlands (EPSG crs: 28992) has its own has datum (EPSG datum: 6289). Since 2000, this Dutch datum IS defined as the transformation from ETRS89 (ETRF2000). EPSG mentions for the origin of the datum: "Originally defined through fundamental point Amersfoort, latitude 52°09'22.178"N, longitude 5°23'15.478"E (of Greenwich). Since 2000-10-01 has been redefined as derived from ETRS89 by application of the official transformation RDNAPTRANS(TM)."





4. Greg wrote:

> My guesstimate would be that it must be at least one-full time geodesist to maintain and enchance it [EPSG].



In fact, there are two geodesists at IOGP for this, but I believe that EPSG is just one of their tasks.





Regards, Jochem





From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Even Rouault
Sent: zaterdag 10 oktober 2020 17:25
To: Greg Troxel <gdt at lexort.com>
Cc: proj at lists.osgeo.org
Subject: Re: [PROJ] EPSG v10 update status



Greg,



> I interpet that as one of:

>

> datums defined by a set of station coordinates at a reference epoch

> and station velocities

>

> datums defined by a time-dependent transformation to another datum.



I don't think the last sentence matches what the authors of standard have in mind (I don't think a datum can be *defined* by a transformation to another datum. a datum exists as such. one may establish transformations to others, but they are not defining. at least for geodetic datums. for vertical datums, some of them are indeed defined by a geoid model that applies to a given geodetic datum).

It is not because there's a known time-dependent transformation between DatumYYYY and ITRFxxxx that DatumYYYY is a dynamic datum. The time-dependency comes from the fact that ITRFxxxx is a dynamic datum, so when changing coordinates between crust-fixed DatumYYYY and ITRFxxxx, you need to specify the epoch of coordinates in ITRFxxxx.



> It looks like GDA2020 is defined in terms of ITRF2014 and a

> time-dependent transformation. Thus it seems squarely a dynamic datum

> based on the above definition.



GDA2020 is intended to be a 'static' datum. Coordinates of an object attached to the Australian plate don't change over time in GDA2020.



> Part of what I'm having trouble understanding is that as an example,

> when you get a solution out of NRCAN PPP as IRTRF2014, it is "epoch of

> data", meaning the ITF2014 coordinates of the station at that moment.

> ITRF2014's reference epoch is the date at which the published stations

> had the published coordinates. So data in IRF2014 may be of an epoch

> that is not the reference epoch, and I think proj doesn't yet deal with

> that.



That's not true. PROJ isn't able to deal properly (at least easily) with "point motion operation", that is transformations in the same dynamic datum, where coordinate epoch changes.



But it can transform coordinates from a plate-fixed/static datum (let's say GDA2020) to a dynamic datum (let's say ATRF2014/ITRF2014), or the reverse. When the transformation is published of course.



Demo:



$ projinfo -s GDA2020 -t ITRF2014 -o PROJ -q



+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=cart +ellps=GRS80 +step +inv +proj=helmert +x=0 +y=0 +z=0 +rx=0 +ry=0 +rz=0 +s=0 +dx=0 +dy=0 +dz=0 +drx=0.00150379 +dry=0.00118346 +drz=0.00120716 +ds=0 +t_epoch=2020 +convention=coordinate_frame +step +inv +proj=cart +ellps=GRS80 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1



You can see in the above a time-dependent Helmert transformation with the reference epoch being 2020 (since GDA2020 and ITRF2014 are concidered coincident for all practical purposes at epoch 2020.0)



Now let's try at 2020, the reference epoch of the transformation:



$ echo -30 120 0 2020 | cct $(projinfo -d 8 -s GDA2020 -t ITRF2014 -o PROJ -q)

-30.00000000 120.00000000 0.00000000 2020.0000



And in 2030:



$ echo -30 120 0 2030 | cct $(projinfo -d 8 -s GDA2020 -t ITRF2014 -o PROJ -q)

-29.99999472 120.00000379 -0.00169912 2030.0000





> > I don't know why the NAD83 family isn't there. Probably depends on NOAA

> > deciding on how it wants to deal with that.

>

> Interesting concept that they would decide :-) Did NGA really weigh in

> on what EPSG is doing, for WGS84?



Well, it **IS** the responsibility of geodetic agencies to speak actively with IOGP to make their data conveniently available to users. Each party might have their views on the best solution, but from exchanges I've been copied to, such discussions are done in a constructive way. If an agency doesn't speak with IOGP, their data might be just ignored, or if it is needed, IOGP or submitters to IOGP will make their own decisions. As an individual you can also talk with IOGP and submit change requests:

https://epsg.org/dataset-change-requests.html



Let be realist: the PROJ team isn't staffed to do the job that IOGP does with the EPSG dataset. My guesstimate would be that it must be at least one-full time geodesist to maintain and enchance it.



> I guess that's the big point. As I see it, in an ideal world, we

> wouldn't need datum ensembles because data would be labeled in the

> actual realization it is in. We need ensembles because of all the data

> that is "I know this is in some flavor of WGS84 but I don't know which."



There's a practical reason for datum ensembles to be used. It is to avoid the proliferation of "derived objects". A projected CRS points to a geographic CRS which points to a datum/datum ensemble. Currently you have 120 projected UTM CRS over WGS84. If you wanted to have them for each of the realizations, you'd have to multiply that by 6. The database would grow unwidely.



> > Datasets referenced to the various

> > realizations may be merged without change of coordinates.

>

> The last sentence is interesting and surprising.

>

> I would expect that if there is a high-quality transform between two

> members of an ensemble, and data is expressed in those members, that

> transform will be used.



Yes, there are definitely transformations that exist between ITRF realizations. It is just that if you've data referenced to a datum ensemble and not a given realization, this is game over: you don't know which realization, so no high accuracy transformation possible.



> I would also expect an ensemble to implicitly declare a low-accuracy

> transform (perhaps that accuracy is or should be carried in the ensemble

> definition) among any two members.



Such transformations exist in the database as said above. They are just not exposed in the datum ensemble itself (it would be quite messy !)



$ sqlite3 data/proj.db "select code, name from coordinate_operation_view where (name LIKE '%ITRF%to%ITRF%' or name LIKE '%WGS 84 (G%)%to%WGS 84 (G%)%') and auth_name = 'EPSG' and deprecated = 0 order by name"

6302|ITRF2000 to ITRF2005 (1)

6300|ITRF2000 to ITRF2008 (1)

8078|ITRF2000 to ITRF2014 (1)

9080|ITRF2000 to ITRF96 (2)

6389|ITRF2005 to ITRF2008 (2)

8079|ITRF2005 to ITRF2014 (1)

9081|ITRF2005 to ITRF96 (1)

7790|ITRF2008 to ITRF2014 (1)

9082|ITRF2008 to ITRF96 (2)

9083|ITRF2014 to ITRF96 (2)

6281|ITRF88 to ITRF2000 (1)

6291|ITRF88 to ITRF2008 (1)

8069|ITRF88 to ITRF2014 (1)

9020|ITRF88 to ITRF89 (1)

7814|ITRF89 to ITRF2000 (1)

6292|ITRF89 to ITRF2008 (1)

8070|ITRF89 to ITRF2014 (1)

9021|ITRF89 to ITRF90 (1)

6283|ITRF90 to ITRF2000 (1)

6293|ITRF90 to ITRF2008 (1)

8071|ITRF90 to ITRF2014 (1)

9022|ITRF90 to ITRF91 (1)

6284|ITRF91 to ITRF2000 (1)

6294|ITRF91 to ITRF2008 (1)

8072|ITRF91 to ITRF2014 (1)

9023|ITRF91 to ITRF92 (1)

6285|ITRF92 to ITRF2000 (1)

6295|ITRF92 to ITRF2008 (1)

8073|ITRF92 to ITRF2014 (1)

9024|ITRF92 to ITRF93 (1)

6286|ITRF93 to ITRF2000 (1)

6296|ITRF93 to ITRF2008 (1)

8074|ITRF93 to ITRF2014 (1)

9025|ITRF93 to ITRF94 (1)

6287|ITRF94 to ITRF2000 (1)

6297|ITRF94 to ITRF2008 (1)

8075|ITRF94 to ITRF2014 (1)

9026|ITRF94 to ITRF96 (1)

6288|ITRF96 to ITRF2000 (1)

6298|ITRF96 to ITRF2008 (1)

8076|ITRF96 to ITRF2014 (1)

9027|ITRF96 to ITRF97 (1)

6289|ITRF97 to ITRF2000 (1)

6299|ITRF97 to ITRF2008 (1)

8077|ITRF97 to ITRF2014 (1)

9079|ITRF97 to ITRF96 (2)

7668|WGS 84 (G1150) to WGS 84 (G1762) (1)

7667|WGS 84 (G1674) to WGS 84 (G1762) (1)



Some of them are time-dependent, some sone.



$ projinfo "ITRF2000 to ITRF2005 (1)" -o PROJ



+proj=helmert +x=-0.0001 +y=0.0008 +z=0.0058 +rx=0 +ry=0 +rz=0 +s=-0.0004 +dx=0.0002 +dy=-0.0001 +dz=0.0018 +drx=0 +dry=0 +drz=0 +ds=-8e-05 +t_epoch=2000 +convention=position_vector



$ projinfo "WGS 84 (G1150) to WGS 84 (G1762) (1)" -o PROJ



+proj=helmert +x=-0.006 +y=0.005 +z=0.02 +rx=0 +ry=0 +rz=0 +s=-0.0045 +convention=coordinate_frame



Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
dit direct te melden aan de verzender en het bericht te vernietigen.
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent
of the Kadaster is unlawful. If you have received this message, but are not the addressee,
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message.

________________________________

This message contains information, which may be in confidence and may be subject to legal privilege. If you are not the intended recipient, you must not peruse, use, disseminate, distribute or copy this message. If you have received this message in error, please notify us immediately (Phone 0800 665 463 or info at linz.govt.nz) and destroy the original message. LINZ accepts no responsibility for changes to this email, or for any attachments, after its transmission from LINZ. Thank You.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201011/628957c2/attachment-0001.html>

From nyall.dawson at gmail.com  Sun Oct 11 15:59:21 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 12 Oct 2020 08:59:21 +1000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <5338181.KFX8tnVmvC@even-i700>
References: <2714702.fZBQl2WLa1@even-i700> <200313167.iEq8AJXcN1@even-i700>
 <CAB28AsjDd81R_2=2htz+-F0aMyOeAqOHgZApRHP0g7QbNSTbxQ@mail.gmail.com>
 <5338181.KFX8tnVmvC@even-i700>
Message-ID: <CAB28Asiss13SbLKGoxFq46jAd5XW6uhxR8L5TpNBabL=LOR3Gg@mail.gmail.com>

On Mon, 12 Oct 2020 at 05:06, Even Rouault <even.rouault at spatialys.com> wrote:

> > Is there any proj c api which can be used to determine whether or not
>
> > a particular datum is dynamic? (i.e. to obtain this list without
>
> > direct database querying).
> proj_get_codes_from_database(
>
> ctx, "EPSG", PJ_TYPE_DYNAMIC_GEODETIC_REFERENCE_FRAME, false);
>
>
>
> ... which didn't work before you raised the question. I've added commits to the PR first part to fix that (and rebased part 2 on top of it)

Thanks!


> > My interpretation of your PRs is that the answer is no, but just to
>
> > confirm: does proj now have the capability to ingest coordinate
>
> > metadata from a WKT string?
>
>
>
> I assume you mean a construct like the below that associates a CRS and the coordinate epoch (2016.47), and also for understanding of other readers not familiar with it:
>
>
>
> COORDINATEMETADATA[
>
> GEOGCRS["WGS 84 (G1762)",
>
> DYNAMIC[FRAMEEPOCH[2005.0]],
>
> DATUM["World Geodetic System 1984 (G1762)",
>
> ELLIPSOID["WGS 84",6378137,298.257223563,LENGTHUNIT["metre",1.0]]
>
> ],
>
> CS[ellipsoidal,3],
>
> AXIS["(lat)",north,ANGLEUNIT["degree",0.0174532925199433]],
>
> AXIS["(lon)",east,ANGLEUNIT["degree",0.0174532925199433]],
>
> AXIS["ellipsoidal height (h)",up,LENGTHUNIT["metre",1.0]]
>
> ],
>
> EPOCH[2016.47]
>

That's correct.

> The answer is no indeed. This is not something currently handled by PROJ.

Ok - thanks for the confirmation.

> I'm not clear if that construct is a solution for the need of storing a coordinate epoch. I don't think it would be legal for example to put it the gpkg_spatial_ref_sys table of a GeoPackage, which is to store CRS only, whereas we have here a tuple CRS + coordinate epoch (so there's no authority or code for the tuple itself). And that would be probably a bad design. For GeoPackage, I'd say that the gpkg_contents should have an addition column "coordinate_epoch" for that purpose, as this is fondamentally a property associated to the layer directly (assuming people don't need to store it per feature or per vertex !!!)

I believe this will need to be handled differently on a
format-by-format basis, depending on the constraints of the various
formats and their underlying standards (if any). But I strongly
suspect that specifying the epoch through the coordinate metadata will
eventually be adopted as the approach for at least those formats which
natively store CRS definitions as WKT strings. Like you've pointed
out, those formats which rely on a database lookup using a numeric key
(such as postgis) will need some other way/metadata table to store the
per-dataset coordinate epoch.

But if we take a step backwards and don't even consider any spatial
data formats themselves, on a conceptual level it definitely sits
within proj's "area of responsibility" to be able to read these epochs
from CRS WKT and utilise it when constructing coordinate operations
involving dynamic datums. (Hopefully we see some of the relevant
authorities from countries who are moving toward dynamic CRSes step up
and sponsor this support!)

> > If so, is there any api in proj yet to
>
> > retrieve the coordinate epoch from this metadata for a dynamic datum
>
> > CRS?
>
>
>
> In my updated pull request, for the sake of completness, I've added proj_dynamic_datum_get_frame_reference_epoch() that will return the 2005.0 of
>
> the DYNAMIC[FRAMEEPOCH[2005.0]] in the above example, which is something that characterize the definition of the dynamic datum itself, but not the coordinate epoch itself. I'm not sure if there is any use of that. It could potentially be used internally by PROJ for doing time-based transformations, but I'm not even clear if that would be really needed: for example time dependent Helmert transformations have an explicit reference epoch in them.

Thanks again! I'm planning on exposing both the "is dynamic datum"
flag and the frame epoch information as part of a CRS'es metadata, so
that end users have a way to identify these without manually reading
the WKT strings...

Nyall



>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com

From nyall.dawson at gmail.com  Sun Oct 11 16:14:27 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 12 Oct 2020 09:14:27 +1000
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <2071493.aptHqxa6Py@even-i700>
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 <2071493.aptHqxa6Py@even-i700>
Message-ID: <CAB28AshRWDAQGawKfVizz-m3EL7Me3NcrK0dGUKEE0=68uYAwQ@mail.gmail.com>

On Mon, 12 Oct 2020 at 03:16, Even Rouault <even.rouault at spatialys.com> wrote:
>
> > How would you imagine a downstream project like QGIS should respond to
>
> > this concept? Should we add a user-visible flag on any CRS definitions
>
> > associated with a datum ensemble to say "Warning: ensemble datum, not
>
> > for use in accurate spatial referencing"? What other user-facing
>
> > changes do you think should be introduced?
>
>
>
> That's a tough question. Depends if we want to stress users or not :-)
>
>
>
> For example, when you open a dataset referenced to WGS84, I don't think we should put a warning. The user isn't responsible for the choice of the data producer.

True, but they ARE responsible for correctly interpreting the accuracy
of the inputs to their analysis. I really think we need to be
aggressive about our messaging that EPSG:4326 isn't the "magical
golden ticket single answer" to the question "what CRS should I use
for my data/analysis". It's such an ingrained  default choice for the
vast majority of spatial data users, and so many of these users don't
even realise that there's any issue here.

> With PROJ 8 / epsg10_part2, the WKT:2019 output of a CRS using WGS84 will show the ENSEMBLE[] and the 2m ensemble accuracy, so that's already a form of warning (but probably most people not aware of the issue won't realize what this means)

Is the 2m accuracy for the ensemble correct here? I was of the
understanding that the inherent ambiguity in EPSG:4326 is in the order
of 10s of meters!

> When a user saves a layer from a CRS that doesn't use a datumensemble to another one that uses one, perhaps a warning could be issued. But I'm not sure if we should do that. That also depends on the accuracy of the data itself. Reprojecting something with a 100m accuracy to WGS84 isn't really a problem. There are so many ways in which users can shoot themselves in the foot. Almost anything involving datum transformation introduces extra inaccuracy.

Right -- but again, I think our responsiblity would be to just show a
warning to users so that they have ALL the information available to
make informed choices. The way I see it:

- no warning:
    - low accuracy data: no issue
    - high accuracy data: data is silently degraded and only informed
users will know that this has occurred
- with warning:
   - low accuracy data: a spurious "noisy" warning, annoys users.
(could potentially be avoided with a "[  ] Don't show this again"
option on the warning.)
   - high accuracy data: all users are informed that there's an issue,
they've got the choice to ignore the issue and degrade their data or
make a better choice and not taint their data

> There's also the fact that there are none projected CRS available in EPSG based on any of the realizations of WGS84 or ETRS89... So users have no easy choice of a better alternative, if they want to stay in the 'family' of the datum ensemble.

Still, that's THEIR choice. At least they've been made aware of the
consequences of their decision...

> And not all datum ensembles are the same. (well, there are just 2 geodetic datums in EPSG for now :-)). But the ensemble accuracy of ETRS89 is 0.1 m. Not the same story as the 2 m of WGS84. So for European users ETRS89 is quite a reasonable choice for a lot of use cases. I don't believe the use of a given realization of it is very frequent, at least in the GIS field. People would actually rather use a national datum when available (in France RGF93 which in its latest version is a realization of ETRF2000 at epoch 2009.0, similar story for CHTRF95 in Switzerland, etc.), mostly for legal reasons, than a generic pan-european ETRF realization.

So maybe we should include the ensemble accuracy in the warning. Something like

"Warning: saving this dataset to the xxxxx ensemble datum used by
EPSG:xxxx will result in a maximum positional accuracy of x.x meters.
If higher accuracy is required then an alternative CRS should be used.
(Please contact even.rouault at spatialys.com to ask which CRS he'd
recommend using for your particular circumstances.)" ;)

Nyall





>
>
>
> That's just my current thoughts. I've no definitive opinion. Looks to me datum ensemble are more a band aid to reflect that the current situation is not ideal, but the ideal has not been drawn (yet?)
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com

From gdt at lexort.com  Mon Oct 12 06:29:05 2020
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 12 Oct 2020 09:29:05 -0400
Subject: [PROJ] EPSG v10 update status
In-Reply-To: <CAB28AshRWDAQGawKfVizz-m3EL7Me3NcrK0dGUKEE0=68uYAwQ@mail.gmail.com>
 (Nyall Dawson's message of "Mon, 12 Oct 2020 09:14:27 +1000")
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 <2071493.aptHqxa6Py@even-i700>
 <CAB28AshRWDAQGawKfVizz-m3EL7Me3NcrK0dGUKEE0=68uYAwQ@mail.gmail.com>
Message-ID: <rmisgaj7eu6.fsf@s1.lexort.com>


Nyall Dawson <nyall.dawson at gmail.com> writes:

>> With PROJ 8 / epsg10_part2, the WKT:2019 output of a CRS using WGS84
>> will show the ENSEMBLE[] and the 2m ensemble accuracy, so that's
>> already a form of warning (but probably most people not aware of the
>> issue won't realize what this means)
>
> Is the 2m accuracy for the ensemble correct here? I was of the
> understanding that the inherent ambiguity in EPSG:4326 is in the order
> of 10s of meters!

2m sounds reasonable to me.  Really only WGS84(TRANSIT) is that far off
from the rest.  This link:
  https://confluence.qps.nl/qinsy/latest/en/world-geodetic-system-1984-wgs84-182618391.html

claims that the shifts between realizations are

  0.70m, 0.20m, 0.06m, 0.06m, 0.01m

and later gives WGS84/ITRF transforms.

I have never heard of 10s of meters ambiguity in WGS84.  (Certainly, use
of GPS to determine positions with L1-only equipment with SA resulted in
the order of 100m error, but that's a different matter.)

Given that WGS84(G730) was introduced on 1994-06-29, it seems unlikely
that there is much data actually in WGS84TRANSIT), and extremely
unlikely that any of that has accuracy better than 10s of meters.

So I think it's a disservice to users to tar all "WGS84" data with even
2m of datum ensemble fuzz.  As a theoretical accuracy estimate, that's
one thing, but it's not ok to skip transforms.  As things stand, the
incorrect null transforms will introduce more error than the actual
original errors.

So I think the world should consider WGS84', defined as some WGS84 >=
WGS84(G730) and thus not WGS84(TRANSIT), has having 20cm or so of
ensemble error, and assume that people who say WGS84 and don't know what
they are doing mean WGS84', and that any errors from that assumption are
tiny compared to intrincsic error in WGS84(TRANSIT).
  

Another approach is to pop up a bunch of checkboxes and ask people to
check all realzations that are used in the layer, and have a series of
ensembles for the ensemble they actually have.  This reduces in practice
to "no, I don't have any WGS84(TRANSIT) data".

>> There's also the fact that there are none projected CRS available in
>> EPSG based on any of the realizations of WGS84 or ETRS89... So users
>> have no easy choice of a better alternative, if they want to stay in
>> the 'family' of the datum ensemble.
>
> Still, that's THEIR choice. At least they've been made aware of the
> consequences of their decision...

The real problem, not really fixable by us is that data is labeled as
WGS84, when it should be labeled more carefully, becuase of the
deficiency in the EPSG data set.  Granted, some might not be more
careful, but right now when using TMS it's basically not possible.

Can anyone explain why there aren't codepoints in EPSG for the various
WGS84 realizations.  I get it that there has never been a high-accuracy
method to access WGS84 realizations, but still they are important
concepts and thus should have codepoints.  Or does the new dataset come
with those and this is now fixed?

>> And not all datum ensembles are the same. (well, there are just 2
>> geodetic datums in EPSG for now :-)). But the ensemble accuracy of
>> ETRS89 is 0.1 m. Not the same story as the 2 m of WGS84. So for
>> European users ETRS89 is quite a reasonable choice for a lot of use
>> cases. I don't believe the use of a given realization of it is very
>> frequent, at least in the GIS field. People would actually rather
>> use a national datum when available (in France RGF93 which in its
>> latest version is a realization of ETRF2000 at epoch 2009.0, similar
>> story for CHTRF95 in Switzerland, etc.), mostly for legal reasons,
>> than a generic pan-european ETRF realization.

FWIW, NAD83 obviously belongs as a datum ensemble, and should have
roughly 2m as the ensemble accuracy.  (I wonder if ETRS89 has better
accuracy due to using GPS positioning in the first realization?  0.1m
would be remarkable for classical methods.)

> So maybe we should include the ensemble accuracy in the warning. Something like
>
> "Warning: saving this dataset to the xxxxx ensemble datum used by
> EPSG:xxxx will result in a maximum positional accuracy of x.x meters.
> If higher accuracy is required then an alternative CRS should be used.
> (Please contact even.rouault at spatialys.com to ask which CRS he'd
> recommend using for your particular circumstances.)" ;)

Sounds good :-) Here, if someone is trying to save as WGS84, they should
perhaps be advised to save as WGS84(G1762).  But they can't do that now.
(They can use ITRF2014, but it takes more knowledge to see that as
reasonable.)


Another view is to say that data in a datum ensemble should be presumed
to be in the most recent realization of the ensemble, with the caveat
that data that actually was in older realizations will acquire errors
from that mislabeling.  That puts the errors on the data that is more
likely to have them, and avoids degrading recent data or data that
originated in a higher-accuracy datum and is simply being stored.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201012/9e7fdca9/attachment.sig>

From even.rouault at spatialys.com  Mon Oct 12 10:14:31 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 12 Oct 2020 19:14:31 +0200
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <rmi1ri4bxp7.fsf@s1.lexort.com>
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 <rmi1ri4bxp7.fsf@s1.lexort.com>
Message-ID: <3102162.sjvC2vBPY0@even-i700>

Hi,

For people not interested in my detailed analysis of Greg's experimentations but by the 
updated subject of this email, go directly at the bottom, after the REAL SUBJECT label.

> There are precise transforms from NAD83(2011) to WGS84(G1762),

$ projinfo -s "NAD83(2011)" -t "WGS84 (G1762)" --summary
Candidate operations found: 1
unknown id, Conversion from NAD83(2011) (geog2D) to NAD83(2011) (geocentric) + Inverse 
of ITRF2008 to NAD83(2011) (1) + Inverse of WGS 84 (G1762) to ITRF2008 (1) + Conversion 
from WGS 84 (G1762) (geocentric) to WGS 84 (G1762) (geog2D), 0.01 m

And the detail is a time-dependent Helmet transformation for the "ITRF2008 to 
NAD83(2011)" part (with central epoch at 1997.0), and a null transformation for "WGS 84 
(G1762) to ITRF2008". So PROJ is already smart here, since there's no direct transformation 
between NAD83(2011) and WGS84 (G1762) in EPSG. It finds that the ITRF2008 intermediate 
is a likely intermediate since there are transformations registered between it and the 2 CRSs 
we are interested in

> I noticed that the gpx with ITRF when I added it was treated as WGS84
> (which is how gpx is defined) and given a null transform to NAD83.  That
> was easy to fix by labeling it ITRF2014.

Actually, between plain old NAD83 (86) and generic WGS84, you've got many non-null 
transformations using NADCON4 grids (like one grid per state), or a null transformation 
"NAD83 to WGS 84 (1)" with a 4m accuracy:

$ projinfo -s "NAD83" -t "WGS84" --summary --spatial-test intersects
Candidate operations found: 53
[... snip ... ]

> It also seems wrong that if I set project CRS to NAD83(2011) one thing
> happens (null transform from WGS84) 

> but if I set it to ITRF2014 another
> (proper transfrom from NAD83 

You probably meant NAD83(2011) here ?

$ projinfo -s "NAD83 (2011)" -t "ITRF2014" --summary
Candidate operations found: 1
unknown id, Conversion from NAD83(2011) (geog2D) to NAD83(2011) (geocentric) + Inverse 
of ITRF2014 to NAD83(2011) (1) + Conversion from ITRF2014 (geocentric) to ITRF2014 
(geog2D), 0 m

which is a time-dependent Helmert transformation with 2010.0 as central epoch

vs

$ projinfo -s "NAD83" -t "ITRF2014" --summary
Candidate operations found: 1
unknown id, Ballpark geographic offset from NAD83 to ITRF2014, unknown accuracy, World, 
has ballpark transformation

which is a null transformation synthetized by PROJ because it didn't find anything better.

> and a now-correct null transform from WGS84
> to ITRF2014).

Did you mean WGS84 or WGS84 (G1762) ?

Because

$ projinfo -s "WGS84 (G1762)" -t "ITRF2014" --summary
Candidate operations found: 1
unknown id, Conversion from WGS 84 (G1762) (geog2D) to WGS 84 (G1762) (geocentric) + 
WGS 84 (G1762) to ITRF2008 (1) + ITRF2008 to ITRF2014 (1) + Conversion from ITRF2014 
(geocentric) to ITRF2014 (geog2D), 0.02 m, World

which is a non-null time-dependent transformation

vs


$ src/projinfo -s "WGS84" -t "ITRF2014" --summary
Candidate operations found: 1
Note: using '--spatial-test intersects' would bring more results (17)
unknown id, Ballpark geographic offset from WGS 84 to ITRF2014, unknown accuracy, World., 
has ballpark transformation

(if using --spatial-test intersects as suggested, PROJ infers complicated transformations 
around Gulf of Mexico, since EPSG has a complex NAD27 to ITRF2014 concatenated 
operation valid for GoM, and PROJ thus does WGS84 -> NAD27 and NAD27->ITRF2014, which 
is probably much too ""smart"" / incorrect)

> 
> One theory is that it's a bug that TMS is defined in a datum ensemble,
> rather then being defined to be in the latest WGS84.  But that seems
> entirely unfixable.

EPSG:3857 (TMS) uses EPSG:4326 (generic WGS84 geographic CRS based on the EPSG:6326 
WGS84 datum ensemble). Actually I believe that a lot of imagery published in EPSG:3857 / 
TMS can be considered has being in a unknown datum, and if the souce imagery was in a GPS-
era datum, it is probably labelled as WGS84 for TMS purposes without applying any shift.


> My preferred theory is that while NAD83 and WGS84, whentreated as
> ensembles, can be said to have a null transform (in that the oldest
> versions of each can be said to match), that is not a reasoable
> approach, and that while one should not ascribe high accuracy to a
> transform with ensembles, the best choice oftransform is the one between
> the most recent member of each ensemble.

Regarding NAD83 and ensembles, I guess one issue is that currently there is no different 
EPSG datum code to distinguish NAD83(86) and "NAD83 ensemble". So some decision would 
have to be taken if the current EPSG:6269 datum code should be only for NAD83(86), or if it 
would represent the NAD83 ensemble. But I'm definitely not the one that has a say about 
that.

============
REAL SUBJECT
============

What is tricky in the suggestion to 'promote' to the latest realization of a datum ensemble is 
that you might have both low accuracy transformations that exist like shown above for 
NAD83 -> WGS84 and high accuracy for NAD83(2011) -> WGS84 (G1762) (here I assume that 
NAD83 would be an enssemble, which it is not formally currently). Depending on the 
situation, one or the other might be relevant.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201012/1ce13cbe/attachment-0001.html>

From Michael.Giudici at dpipwe.tas.gov.au  Mon Oct 12 16:02:26 2020
From: Michael.Giudici at dpipwe.tas.gov.au (Giudici, Michael)
Date: Mon, 12 Oct 2020 23:02:26 +0000
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <3102162.sjvC2vBPY0@even-i700>
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 <rmi1ri4bxp7.fsf@s1.lexort.com> <3102162.sjvC2vBPY0@even-i700>
Message-ID: <ME2P282MB0420CA0EB5BB5BD4C6F8DC15F2070@ME2P282MB0420.AUSP282.PROD.OUTLOOK.COM>

Hello list

I've been following this thread with interest particularly the discussion about how to best educate users. Below is a link to a paper containing interim advice to Australian users in the context of the GDA2020 implementation, that may be of interest to some on the list, and shows how we have tried to explain a number of these (complex) concepts to users.

https://www.icsm.gov.au/sites/default/files/GMIWG%20Advisory%20on%20WGS%2084%20and%20Web%20Mapping%20%E2%80%93%2015%20June%202020.pdf

Subsequent to the date of the paper (June 2020) there has been further engagement with EPSG and OGC to address the medium term solutions outlined in the paper.

Regards
Michael


Michael Giudici   |   Surveyor General   |  Branch Manager Location Services
Land Tasmania

Department of Primary Industries, Parks, Water and Environment
134 Macquarie Street Hobart TAS 7000
GPO Box 44 Hobart TAS 7001
T: 03 6165 4121   |   M: 0447 168 189   |   E: Michael.Giudici at dpipwe.tas.gov.au<mailto:Michael.Giudici at dpipwe.tas.gov.au>
www.dpipwe.tas.gov.au<http://www.dpipwe.tas.gov.au/>   |   www.thelist.tas.gov.au<http://www.thelist.tas.gov.au/>   |   www.tasmap.tas.gov.au<http://www.tasmap.tas.gov.au/>

[Facebook Land Tasmania]<https://www.facebook.com/landtasmania>


CONFIDENTIALITY NOTICE AND DISCLAIMER

The information in this transmission may be confidential and/or protected by legal professional privilege, and is intended only for the person or persons to whom it is addressed. If you are not such a person, you are warned that any disclosure, copying or dissemination of the information is unauthorised. If you have received the transmission in error, please immediately contact this Office by telephone, fax or email, to inform us of the error and to enable arrangements to be made for the destruction of the transmission, or its return at our cost. No liability is accepted for any unauthorised use of the information contained in this transmission.

If the transmission contains advice, the advice is based on instructions in relation to, and is provided to the addressee in connection with, the matter mentioned above. Responsibility is not accepted for reliance upon it by any other person or for any other purpose.

From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Even Rouault
Sent: Tuesday, 13 October 2020 4:15 AM
To: proj at lists.osgeo.org
Subject: [PROJ] Using latest realization of a datum ensemble ?


Hi,



For people not interested in my detailed analysis of Greg's experimentations but by the updated subject of this email, go directly at the bottom, after the REAL SUBJECT label.



> There are precise transforms from NAD83(2011) to WGS84(G1762),



$ projinfo -s "NAD83(2011)" -t "WGS84 (G1762)" --summary

Candidate operations found: 1

unknown id, Conversion from NAD83(2011) (geog2D) to NAD83(2011) (geocentric) + Inverse of ITRF2008 to NAD83(2011) (1) + Inverse of WGS 84 (G1762) to ITRF2008 (1) + Conversion from WGS 84 (G1762) (geocentric) to WGS 84 (G1762) (geog2D), 0.01 m



And the detail is a time-dependent Helmet transformation for the "ITRF2008 to NAD83(2011)" part (with central epoch at 1997.0), and a null transformation for "WGS 84 (G1762) to ITRF2008". So PROJ is already smart here, since there's no direct transformation between NAD83(2011) and WGS84 (G1762) in EPSG. It finds that the ITRF2008 intermediate is a likely intermediate since there are transformations registered between it and the 2 CRSs we are interested in



> I noticed that the gpx with ITRF when I added it was treated as WGS84

> (which is how gpx is defined) and given a null transform to NAD83. That

> was easy to fix by labeling it ITRF2014.



Actually, between plain old NAD83 (86) and generic WGS84, you've got many non-null transformations using NADCON4 grids (like one grid per state), or a null transformation "NAD83 to WGS 84 (1)" with a 4m accuracy:



$ projinfo -s "NAD83" -t "WGS84" --summary --spatial-test intersects

Candidate operations found: 53

[... snip ... ]



> It also seems wrong that if I set project CRS to NAD83(2011) one thing

> happens (null transform from WGS84)



> but if I set it to ITRF2014 another

> (proper transfrom from NAD83



You probably meant NAD83(2011) here ?



$ projinfo -s "NAD83 (2011)" -t "ITRF2014" --summary

Candidate operations found: 1

unknown id, Conversion from NAD83(2011) (geog2D) to NAD83(2011) (geocentric) + Inverse of ITRF2014 to NAD83(2011) (1) + Conversion from ITRF2014 (geocentric) to ITRF2014 (geog2D), 0 m



which is a time-dependent Helmert transformation with 2010.0 as central epoch



vs



$ projinfo -s "NAD83" -t "ITRF2014" --summary

Candidate operations found: 1

unknown id, Ballpark geographic offset from NAD83 to ITRF2014, unknown accuracy, World, has ballpark transformation



which is a null transformation synthetized by PROJ because it didn't find anything better.



> and a now-correct null transform from WGS84

> to ITRF2014).



Did you mean WGS84 or WGS84 (G1762) ?



Because



$ projinfo -s "WGS84 (G1762)" -t "ITRF2014" --summary

Candidate operations found: 1

unknown id, Conversion from WGS 84 (G1762) (geog2D) to WGS 84 (G1762) (geocentric) + WGS 84 (G1762) to ITRF2008 (1) + ITRF2008 to ITRF2014 (1) + Conversion from ITRF2014 (geocentric) to ITRF2014 (geog2D), 0.02 m, World



which is a non-null time-dependent transformation



vs





$ src/projinfo -s "WGS84" -t "ITRF2014" --summary

Candidate operations found: 1

Note: using '--spatial-test intersects' would bring more results (17)

unknown id, Ballpark geographic offset from WGS 84 to ITRF2014, unknown accuracy, World., has ballpark transformation



(if using --spatial-test intersects as suggested, PROJ infers complicated transformations around Gulf of Mexico, since EPSG has a complex NAD27 to ITRF2014 concatenated operation valid for GoM, and PROJ thus does WGS84 -> NAD27 and NAD27->ITRF2014, which is probably much too ""smart"" / incorrect)



>

> One theory is that it's a bug that TMS is defined in a datum ensemble,

> rather then being defined to be in the latest WGS84. But that seems

> entirely unfixable.



EPSG:3857 (TMS) uses EPSG:4326 (generic WGS84 geographic CRS based on the EPSG:6326 WGS84 datum ensemble). Actually I believe that a lot of imagery published in EPSG:3857 / TMS can be considered has being in a unknown datum, and if the souce imagery was in a GPS-era datum, it is probably labelled as WGS84 for TMS purposes without applying any shift.





> My preferred theory is that while NAD83 and WGS84, whentreated as

> ensembles, can be said to have a null transform (in that the oldest

> versions of each can be said to match), that is not a reasoable

> approach, and that while one should not ascribe high accuracy to a

> transform with ensembles, the best choice oftransform is the one between

> the most recent member of each ensemble.



Regarding NAD83 and ensembles, I guess one issue is that currently there is no different EPSG datum code to distinguish NAD83(86) and "NAD83 ensemble". So some decision would have to be taken if the current EPSG:6269 datum code should be only for NAD83(86), or if it would represent the NAD83 ensemble. But I'm definitely not the one that has a say about that.



============

REAL SUBJECT

============



What is tricky in the suggestion to 'promote' to the latest realization of a datum ensemble is that you might have both low accuracy transformations that exist like shown above for NAD83 -> WGS84 and high accuracy for NAD83(2011) -> WGS84 (G1762) (here I assume that NAD83 would be an enssemble, which it is not formally currently). Depending on the situation, one or the other might be relevant.



So there could be 2 options:



1) in addition to the lower resolution results, also consider the ones using the latest realization of the datum. and do that systematically



- Pro: more possibilities returned

- Con: more possibilities returned! (users might already be overwhelmed by current output which in some cases can offer of the order of 100 possibilities), and greater pipeline computation time (there are already optimizations/heuristics to avoid doing the advanced pipeline searchs, like using an intermediate CRS/datum, when direct ones are returned.)

- Pro or con: the default pipeline (that is the one used by cs2cs or proj_create_crs_to_crs() when the user has no say on the pipeline to use) would probably be in a lot of situation the high resolution one, which might be appropriate or not. The high accuracy pipelines also often need a coordinate epoch, so when it is not specified in the input coordinates provided to PROJ, the transformation will be done at the central epoch of the Helmert transformation.



In some circumstances, I imagine there might not be a transformation registered from/to the latest realization of a datum ensemble, but to an earlier realization.



2) or the same, but do that only on user request (projinfo switch, new function in C/C++ API).



- End users have to turn that on to benefit from the new capability

- Downstream software (like QGIS) has to make use of that new API, and possibly reflect that in its user interface.





I am a bit unconfortable about having PROJ being "too smart" by default with option 1. There are already known circumstances where it is too smart in a bad sense, such as in one of the above examples with WGS 84 to ITRF2014, using a NAD27 intermediate, or in https://github.com/OSGeo/PROJ/issues/2348





Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com

________________________________
CONFIDENTIALITY NOTICE AND DISCLAIMER:
The information in this transmission may be confidential and/or protected by legal professional privilege, and is intended only for the person or persons to whom it is addressed. If you are not such a person, you are warned that any disclosure, copying or dissemination of the information is unauthorised. If you have received the transmission in error, please immediately contact this office by telephone, fax or email, to inform us of the error and to enable arrangements to be made for the destruction of the transmission, or its return at our cost. No liability is accepted for any unauthorised use of the information contained in this transmission.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201012/16a6595d/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 58240 bytes
Desc: image001.png
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201012/16a6595d/attachment-0001.png>

From gdt at lexort.com  Wed Oct 14 11:45:44 2020
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 14 Oct 2020 14:45:44 -0400
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <3102162.sjvC2vBPY0@even-i700> (Even Rouault's message of "Mon,
 12 Oct 2020 19:14:31 +0200")
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 <rmi1ri4bxp7.fsf@s1.lexort.com> <3102162.sjvC2vBPY0@even-i700>
Message-ID: <rmir1q0y7c7.fsf@s1.lexort.com>

Thanks for your detailed comments and for taking the time to think about
my issue..  I am going to quote and reply to only the big-picture issue
in this message to keep it general interest.

Even Rouault <even.rouault at spatialys.com> writes:

> What is tricky in the suggestion to 'promote' to the latest realization of a datum ensemble is 
> that you might have both low accuracy transformations that exist like shown above for 
> NAD83 -> WGS84 and high accuracy for NAD83(2011) -> WGS84 (G1762) (here I assume that 
> NAD83 would be an enssemble, which it is not formally currently). Depending on the 
> situation, one or the other might be relevant.

I am not really trying to suggest promotion.  I am trying to separate
the concepts of

  what is the best transform

  what is the expected accuracy of the result, given the accuracy of the
  input data, the input datum/ensemble intrinsic error, the transform
  accuracy and the output datum/ensemble intrinsic error

Let's take a concrete case where someone has data in WGS84 web mercator.
They aren't 100% sure which realization and they aren't sure how
accurate it is.  But it could actually be accurate to say 0.1m (the
MassGIS data, assuming they transformed, would be an example).

Then, assume they want to convert it to NAD83(2011) to examine it
relative to some data in that frame that is pretty accurate.  (This is a
real example that I want to do.)

What I'm suggesting is that we should find the transform from
WGS84(G1762), to NAD83(2011), because if the data is in the modern frame
and accurate, that's the right thing.  If the data is in a very old
frame, it's not really a bad transform, especially because data in
WGS84(TRANSIT) is extremely unlikely to be accurate.  In either case,
using this transform should go along with error estimates being
propagated (if we were to start storing those with coordinates) that
reflect the ensemble uncertainty.

Another way of looking at this is that when data is labeled with an
ensemble, there is some probability distribution of what frame the data
really is in.  So if one considers all of those and the probabilities,
and then asks: which transform results in the lowest expected square
error averaged over all the possible input datums?  Here I'd argue that
if the input is in the most recent realization, that precise transform
is much better.  And if it's in some old realization like
WGS84(TRANSIT), then the modern transform is not necessarily worse than
the null transform.

With my proposed approach, the errors for the recent realization will
drop from 2m to maybe 10cm, and the errors for WGS84(TRANSIT) might or
might not change from 2mish to a bit more.

I also believe that data that is actually in WGS84(TRANSIT) is extremely
unlikely, so it's best to optimize for the likely case of more recent
realizations.  (Similarly, I think accurate data in NAD83(1986) is
extremely unlikely.)

I find the justification for "ensemble has high intrinsic errors so null
transform is good" to be hard to undertand.  I certainly can understand
"null transform error is comparable to existing possible error", but to
me it's picking zero as a magic number because it is a very round number
rather than picking the value that minimizes errors overall.

Finally, while I realize we probably can't strictly have this property,
I think it would be good if the relative output positions of data in CRS
A and CRS B are consistent, whether the prroject CRS is A, B, C, or D.
Right now we essentially "round to zero" differently, and this seems
avoidable.

Does this make sense?

Does anyone know how this is handled in ESRI products or any context
other than qgis/proj?

Greg

From even.rouault at spatialys.com  Wed Oct 14 12:04:25 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Oct 2020 21:04:25 +0200
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <3102162.sjvC2vBPY0@even-i700>
References: <2714702.fZBQl2WLa1@even-i700> <rmi1ri4bxp7.fsf@s1.lexort.com>
 <3102162.sjvC2vBPY0@even-i700>
Message-ID: <2527672.H4sTadAoE1@even-i700>

(Resending the last part of my message from Monday whose text-only output got 
truncated for some reason. The HTML version was OK)

============
REAL SUBJECT
============
 
What is tricky in the suggestion to 'promote' to the latest realization of a  
datum ensemble is that you might have both low accuracy transformations that > 
exist like shown above for NAD83 -> WGS84 and high accuracy for NAD83(2011) -> 
WGS84 (G1762) (here I assume that NAD83 would be an enssemble, which it is not 
formally currently). Depending on the situation, one or the other might be 
relevant.
 
So there could be 2 options:
 
1) in addition to the lower resolution results, also consider the ones using 
the latest realization of the datum. and do that systematically
 
- Pro: more possibilities returned
- Con: more possibilities returned! (users might already be overwhelmed by 
current output which in some cases can offer of the order of 100 
possibilities), and greater pipeline computation time (there are already 
optimizations/heuristics to avoid doing the advanced pipeline searchs, like 
using an intermediate CRS/datum, when direct ones are returned.)
- Pro or con: the default pipeline (that is the one used by cs2cs or 
proj_create_crs_to_crs() when the user has no say on the pipeline to use) 
would probably be in a lot of situation the high resolution one, which might 
be appropriate or not. The high accuracy pipelines also often need a 
coordinate epoch, so when it is not specified in the input coordinates 
provided to PROJ, the transformation will be done at the central epoch of the 
Helmert transformation.
 
In some circumstances, I imagine there might not be a transformation 
registered from/to the latest realization of a datum ensemble, but to an 
earlier realization.
 
2) or the same, but do that only on user request (projinfo switch, new 
function in C/C++ API).
 
- End users have to turn that on to benefit from the new capability
- Downstream software (like QGIS) has to make use of that new API, and 
possibly reflect that in its user interface.
 
I am a bit unconfortable about having PROJ being "too smart" by default with 
option 1. There are already known circumstances where it is too smart in a bad 
sense, such as in one of the above examples with WGS 84 to ITRF2014, using a 
NAD27 intermediate, or in https://github.com/OSGeo/PROJ/issues/2348

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gdt at lexort.com  Wed Oct 14 12:13:15 2020
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 14 Oct 2020 15:13:15 -0400
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <3102162.sjvC2vBPY0@even-i700> (Even Rouault's message of "Mon,
 12 Oct 2020 19:14:31 +0200")
References: <2714702.fZBQl2WLa1@even-i700>
 <CAB28Asg5ci22mvVk7g4tQOfR05m++rF8VvYpebiBKR4atmQfYA@mail.gmail.com>
 <rmi1ri4bxp7.fsf@s1.lexort.com> <3102162.sjvC2vBPY0@even-i700>
Message-ID: <rmimu0oy62c.fsf@s1.lexort.com>


This is about the details of my issue; skippable by many.

Even Rouault <even.rouault at spatialys.com> writes:

>> There are precise transforms from NAD83(2011) to WGS84(G1762),
>
> $ projinfo -s "NAD83(2011)" -t "WGS84 (G1762)" --summary
> Candidate operations found: 1
> unknown id, Conversion from NAD83(2011) (geog2D) to NAD83(2011) (geocentric) + Inverse 
> of ITRF2008 to NAD83(2011) (1) + Inverse of WGS 84 (G1762) to ITRF2008 (1) + Conversion 
> from WGS 84 (G1762) (geocentric) to WGS 84 (G1762) (geog2D), 0.01 m
>
> And the detail is a time-dependent Helmet transformation for the "ITRF2008 to 
> NAD83(2011)" part (with central epoch at 1997.0), and a null transformation for "WGS 84 
> (G1762) to ITRF2008". So PROJ is already smart here, since there's no direct transformation 
> between NAD83(2011) and WGS84 (G1762) in EPSG. It finds that the ITRF2008 intermediate 
> is a likely intermediate since there are transformations registered between it and the 2 CRSs 
> we are interested in

Thanks.  I didn't dig into what proj does, and it's cool that it can
create this chain.

>> I noticed that the gpx with ITRF when I added it was treated as WGS84
>> (which is how gpx is defined) and given a null transform to NAD83.  That
>> was easy to fix by labeling it ITRF2014.
>
> Actually, between plain old NAD83 (86) and generic WGS84, you've got many non-null 
> transformations using NADCON4 grids (like one grid per state), or a null transformation 
> "NAD83 to WGS 84 (1)" with a 4m accuracy:
>
> $ projinfo -s "NAD83" -t "WGS84" --summary --spatial-test intersects
> Candidate operations found: 53
> [... snip ... ]

Sorry, I was being sloppy.  I guess formally bare NAD83 is defined to
mean NAD83(1986), but I think of it as the name for the ensemble.  NGS's
NCAT tool at https://www.ngs.noaa.gov/NCAT/ lists:

    NAD83(2011)
    NAD83(NSRS2007)
    NAD83(FBN)
    NAD83(HARN)
    NAD83(1986)
    NAD27
    USSD

But a quick check around me shows agreement at the roughly 10cm level
among all the NAD83 flavors.

>> It also seems wrong that if I set project CRS to NAD83(2011) one thing
>> happens (null transform from WGS84) 
>
>> but if I set it to ITRF2014 another
>> (proper transfrom from NAD83 
>
> You probably meant NAD83(2011) here ?

yes, sorry.

> $ projinfo -s "NAD83 (2011)" -t "ITRF2014" --summary
> Candidate operations found: 1
> unknown id, Conversion from NAD83(2011) (geog2D) to NAD83(2011) (geocentric) + Inverse 
> of ITRF2014 to NAD83(2011) (1) + Conversion from ITRF2014 (geocentric) to ITRF2014 
> (geog2D), 0 m
>
> which is a time-dependent Helmert transformation with 2010.0 as central epoch
>
> vs
>
> $ projinfo -s "NAD83" -t "ITRF2014" --summary
> Candidate operations found: 1
> unknown id, Ballpark geographic offset from NAD83 to ITRF2014, unknown accuracy, World, 
> has ballpark transformation
>
> which is a null transformation synthetized by PROJ because it didn't find anything better.

This is due to EPSG not having an ensemble, and EPSG/proj not having the
transforms among NAD83 realizations from NGS.   There should be a
transform

  NAD83(1986) to NAD83(2011), null, accuracy 10cm region new england

somehow.  Or maybe somewhat worse accuracy, region US - I see about 0.6m
around LA.  In AZ it's much better - on the NA plate, not PA plate.
Still, all of that's much better than ballpark.

>> and a now-correct null transform from WGS84
>> to ITRF2014).
>
> Did you mean WGS84 or WGS84 (G1762) ?

Well, I guess either. One is the ensemble transform where null makes
sense and the second is a transform where 0 makes sense as very accurate.

> Because
>
> $ projinfo -s "WGS84 (G1762)" -t "ITRF2014" --summary
> Candidate operations found: 1
> unknown id, Conversion from WGS 84 (G1762) (geog2D) to WGS 84 (G1762) (geocentric) + 
> WGS 84 (G1762) to ITRF2008 (1) + ITRF2008 to ITRF2014 (1) + Conversion from ITRF2014 
> (geocentric) to ITRF2014 (geog2D), 0.02 m, World
>
> which is a non-null time-dependent transformation

Interesting, because both datums are dynamic and should have matching
current epoch values.

> $ src/projinfo -s "WGS84" -t "ITRF2014" --summary
> Candidate operations found: 1
> Note: using '--spatial-test intersects' would bring more results (17)
> unknown id, Ballpark geographic offset from WGS 84 to ITRF2014, unknown accuracy, World., 
> has ballpark transformation

It seems that ballpark transform should be listed as 2m accuracy.

Interestingly, NGS seems to say that WGS84(TRANSIT) can be treated (now)
as equivalent to NAD83(2011).

> (if using --spatial-test intersects as suggested, PROJ infers complicated transformations 
> around Gulf of Mexico, since EPSG has a complex NAD27 to ITRF2014 concatenated 
> operation valid for GoM, and PROJ thus does WGS84 -> NAD27 and NAD27->ITRF2014, which 
> is probably much too ""smart"" / incorrect)

Yes, that's best avoided :)

>> One theory is that it's a bug that TMS is defined in a datum ensemble,
>> rather then being defined to be in the latest WGS84.  But that seems
>> entirely unfixable.
>
> EPSG:3857 (TMS) uses EPSG:4326 (generic WGS84 geographic CRS based on the EPSG:6326 
> WGS84 datum ensemble). Actually I believe that a lot of imagery published in EPSG:3857 / 
> TMS can be considered has being in a unknown datum, and if the souce imagery was in a GPS-
> era datum, it is probably labelled as WGS84 for TMS purposes without applying any shift.

I suspect that is true for a lot of older imagery.  I also think that
newer imagery is being handled more carefully.  I will try to figure
that out and post a report (comparing MassGIS 2019 orthos, bing, and
oher OSM-approved imagery around me, with some independent ground
control via MaCORS RTK).

>> My preferred theory is that while NAD83 and WGS84, whentreated as
>> ensembles, can be said to have a null transform (in that the oldest
>> versions of each can be said to match), that is not a reasoable
>> approach, and that while one should not ascribe high accuracy to a
>> transform with ensembles, the best choice oftransform is the one between
>> the most recent member of each ensemble.
>
> Regarding NAD83 and ensembles, I guess one issue is that currently there is no different 
> EPSG datum code to distinguish NAD83(86) and "NAD83 ensemble". So some decision would 
> have to be taken if the current EPSG:6269 datum code should be only for NAD83(86), or if it 
> would represent the NAD83 ensemble. But I'm definitely not the one that has a say about 
> that.

Agreed that needs fixing and that it's not obvious.  I'd have to say
that it refers to NAD83(1986), because that first realization was really
2D, and the later ones are 3D.  So I guess we need a new ensemble code.
But that's  for someone to take up with EPSG.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201014/6a9752cc/attachment.sig>

From even.rouault at spatialys.com  Wed Oct 14 12:25:58 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 14 Oct 2020 21:25:58 +0200
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <rmir1q0y7c7.fsf@s1.lexort.com>
References: <2714702.fZBQl2WLa1@even-i700> <3102162.sjvC2vBPY0@even-i700>
 <rmir1q0y7c7.fsf@s1.lexort.com>
Message-ID: <4747270.0WE9t1zUnR@even-i700>

On mercredi 14 octobre 2020 14:45:44 CEST Greg Troxel wrote:
> Thanks for your detailed comments and for taking the time to think about
> my issue..  I am going to quote and reply to only the big-picture issue
> in this message to keep it general interest.
> 

I'm not sure if you got my message from monday in its entirety. I've just 
resent it and it looks fine now in
https://lists.osgeo.org/pipermail/proj/2020-October/009866.html

> I find the justification for "ensemble has high intrinsic errors so null
> transform is good" to be hard to undertand.  I certainly can understand
> "null transform error is comparable to existing possible error", but to
> me it's picking zero as a magic number because it is a very round number
> rather than picking the value that minimizes errors overall.

In my email I suggested a potential software solution, but code in PROJ to 
find and infer transformations is already horribly super complicated. Adding 
more heuristics to it will not help.
So certainly the most simple solution for PROJ (and anyone relying on EPSG), 
which would require no software update but just a database update, would be to 
get the records in EPSG modified in the direction you indicate.
One thing that could potenitally be done is to have let's say the NAD83(2011) 
-> WGS84(G1762) copied to be the one to apply to the ensemble version NAD83 -> 
WGS 84, but with a lower indicative accuracy (but better than the null 
transformation one, so that's the improved transformation is proposed by 
default!). But I'm not sure that fits into IOGP vision. You could try 
suggesting that to them, and see how they react. That's just at the reach of 
one email.
(For your own personal needs, you could certainly add new records in proj.db 
for what you want, but I'm aware that's not a really long-term maintainable 
solution)

> Finally, while I realize we probably can't strictly have this property,
> I think it would be good if the relative output positions of data in CRS
> A and CRS B are consistent, whether the prroject CRS is A, B, C, or D.
> Right now we essentially "round to zero" differently, and this seems
> avoidable.

Generally, you shouldn't expect any kind of transitivity. A => C will 
generally lead to a different result than doing A => B => C (this was exactly 
the Australian issue with A = GDA94, B = WGS84, C = GDA2020 where A => B and B 
=> C are null transformation, where A = > C is not)

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gdt at lexort.com  Wed Oct 14 12:33:45 2020
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 14 Oct 2020 15:33:45 -0400
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <4747270.0WE9t1zUnR@even-i700> (Even Rouault's message of "Wed,
 14 Oct 2020 21:25:58 +0200")
References: <2714702.fZBQl2WLa1@even-i700> <3102162.sjvC2vBPY0@even-i700>
 <rmir1q0y7c7.fsf@s1.lexort.com> <4747270.0WE9t1zUnR@even-i700>
Message-ID: <rmid01ky546.fsf@s1.lexort.com>


Even Rouault <even.rouault at spatialys.com> writes:

> On mercredi 14 octobre 2020 14:45:44 CEST Greg Troxel wrote:
>> Thanks for your detailed comments and for taking the time to think about
>> my issue..  I am going to quote and reply to only the big-picture issue
>> in this message to keep it general interest.
>
> I'm not sure if you got my message from monday in its entirety. I've just 
> resent it and it looks fine now in
> https://lists.osgeo.org/pipermail/proj/2020-October/009866.html

Yes, I responded to the other half separately so more people could ignore that.

> In my email I suggested a potential software solution, but code in PROJ to 
> find and infer transformations is already horribly super complicated. Adding 
> more heuristics to it will not help.

I see where you are coming from.

> So certainly the most simple solution for PROJ (and anyone relying on EPSG), 
> which would require no software update but just a database update, would be to 
> get the records in EPSG modified in the direction you indicate.
> One thing that could potenitally be done is to have let's say the NAD83(2011) 
> -> WGS84(G1762) copied to be the one to apply to the ensemble version NAD83 -> 
> WGS 84, but with a lower indicative accuracy (but better than the null 
> transformation one, so that's the improved transformation is proposed by 
> default!).

That makes a lot of sense.  Essentially do what I'm suggesing, but add
some transform db records with manual thought.  We don't need that many
to really fix this for almost everything.

> But I'm not sure that fits into IOGP vision. You could try 
> suggesting that to them, and see how they react. That's just at the reach of 
> one email.
> (For your own personal needs, you could certainly add new records in proj.db 
> for what you want, but I'm aware that's not a really long-term maintainable 
> solution)

I will attempt to write to them.   Probably I should hand-add records
so I can tell them that my idea makes sense...

>> Finally, while I realize we probably can't strictly have this property,
>> I think it would be good if the relative output positions of data in CRS
>> A and CRS B are consistent, whether the prroject CRS is A, B, C, or D.
>> Right now we essentially "round to zero" differently, and this seems
>> avoidable.
>
> Generally, you shouldn't expect any kind of transitivity. A => C will 
> generally lead to a different result than doing A => B => C (this was exactly 
> the Australian issue with A = GDA94, B = WGS84, C = GDA2020 where A => B and B 
> => C are null transformation, where A = > C is not)

I realize one can't expect it to really hold.  I was trying to suggest
that choices that make it hold better can be seen as preferred choices,
all else being equal.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201014/fc442b2f/attachment.sig>

From gdt at lexort.com  Wed Oct 14 12:40:05 2020
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 14 Oct 2020 15:40:05 -0400
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <2527672.H4sTadAoE1@even-i700> (Even Rouault's message of "Wed,
 14 Oct 2020 21:04:25 +0200")
References: <2714702.fZBQl2WLa1@even-i700> <rmi1ri4bxp7.fsf@s1.lexort.com>
 <3102162.sjvC2vBPY0@even-i700> <2527672.H4sTadAoE1@even-i700>
Message-ID: <rmi8sc8y4tm.fsf@s1.lexort.com>


Even Rouault <even.rouault at spatialys.com> writes:

1> (Resending the last part of my message from Monday whose text-only output got 
> truncated for some reason. The HTML version was OK)

Thanks.  I don't see HTML so I missed this.

> ============
> REAL SUBJECT
> ============
>  
> What is tricky in the suggestion to 'promote' to the latest realization of a  
> datum ensemble is that you might have both low accuracy transformations that > 
> exist like shown above for NAD83 -> WGS84 and high accuracy for NAD83(2011) -> 
> WGS84 (G1762) (here I assume that NAD83 would be an enssemble, which it is not 
> formally currently). Depending on the situation, one or the other might be 
> relevant.
>  
> So there could be 2 options:
>  
> 1) in addition to the lower resolution results, also consider the ones using 
> the latest realization of the datum. and do that systematically
>  
> - Pro: more possibilities returned
> - Con: more possibilities returned! (users might already be overwhelmed by 
> current output which in some cases can offer of the order of 100 
> possibilities), and greater pipeline computation time (there are already 
> optimizations/heuristics to avoid doing the advanced pipeline searchs, like 
> using an intermediate CRS/datum, when direct ones are returned.)
> - Pro or con: the default pipeline (that is the one used by cs2cs or 
> proj_create_crs_to_crs() when the user has no say on the pipeline to use) 
> would probably be in a lot of situation the high resolution one, which might 
> be appropriate or not. The high accuracy pipelines also often need a 
> coordinate epoch, so when it is not specified in the input coordinates 
> provided to PROJ, the transformation will be done at the central epoch of the 
> Helmert transformation.
>  
> In some circumstances, I imagine there might not be a transformation 
> registered from/to the latest realization of a datum ensemble, but to an 
> earlier realization.

I can see how this would get hard.

> 2) or the same, but do that only on user request (projinfo switch, new 
> function in C/C++ API).
>  
> - End users have to turn that on to benefit from the new capability
> - Downstream software (like QGIS) has to make use of that new API, and 
> possibly reflect that in its user interface.

I don't see this as really fixing the problem, which is that people are
getting what I consider to be bad transforms, when those people might
not understand.

> I am a bit unconfortable about having PROJ being "too smart" by default with 
> option 1. There are already known circumstances where it is too smart in a bad 
> sense, such as in one of the above examples with WGS 84 to ITRF2014, using a 
> NAD27 intermediate, or in https://github.com/OSGeo/PROJ/issues/2348

I think your idea of having entries in the database to lead to the
transforms to most-recent-realization is a very promising appraoch, and
probably the right approach.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201014/c3e07cd7/attachment.sig>

From Jochem.Lesparre at kadaster.nl  Sun Oct 18 08:25:50 2020
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Sun, 18 Oct 2020 15:25:50 +0000
Subject: [PROJ] Using latest realization of a datum ensemble ?
In-Reply-To: <rmi8sc8y4tm.fsf@s1.lexort.com>
References: <2714702.fZBQl2WLa1@even-i700> <rmi1ri4bxp7.fsf@s1.lexort.com>
 <3102162.sjvC2vBPY0@even-i700> <2527672.H4sTadAoE1@even-i700>
 <rmi8sc8y4tm.fsf@s1.lexort.com>
Message-ID: <AM6P192MB0470EA893D2A5446BC423F24EF010@AM6P192MB0470.EURP192.PROD.OUTLOOK.COM>

I agree with you, and especially with the idea of the need to educate PROJ and GIS users in avoiding datum ensembles. (I think some additional education is needed for the fact that WGS84 is NOT the official global geodetic reference frame but this is ITRS.) However, to make people stop using datum ensembles, some changes in EPSG are needed too.

Greg Troxel wrote:
> I think your idea of having entries in the database to lead to the transforms to most-recent-realization is a very promising appraoch, and probably the right approach.

I'm not sure if this is the best solution. However, I think this might be only realistic solution, as it reduces the amount of change needed in EPSG to something doable.

Regards, Jochem


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
dit direct te melden aan de verzender en het bericht te vernietigen.
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent
of the Kadaster is unlawful. If you have received this message, but are not the addressee,
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message.

From wonder.sk at gmail.com  Wed Oct 21 01:56:39 2020
From: wonder.sk at gmail.com (Martin Dobias)
Date: Wed, 21 Oct 2020 10:56:39 +0200
Subject: [PROJ] Correct syntax of vertical datum
Message-ID: <CAC2XbFeW7kAmAKagDHS5yOUEMki4Mn2hhrVgpQJ4B+4sMcX-4g@mail.gmail.com>

Hi

I am trying to consume data from Slovak national lidar survey, where
the CRS should be defined as a compound CRS using EPSG:3046 (ETRS89 /
UTM zone 34N) as the horizontal CRS and EPSG:4937 (ETRS89) as the
vertical CRS.

The WKT is defined like this in metadata:

COMPD_CS["ETRS89/ETRS-TM34+ETRS89",PROJCS["ETRS89/ETRS-TM34",GEOGCS["ETRS89",DATUM["European_Terrestrial_Reference_System_1989",SPHEROID["GRS1980",6378137,298.257222101,AUTHORITY["EPSG","7019"]],AUTHORITY["EPSG","6258"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4258"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",21],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],AUTHORITY["EPSG","3046"],AXIS["Easting",EAST],AXIS["Northing",NORTH]],VERT_CS[GEOGCS["ETRS89",DATUM["EuropeanTerrestrialReferenceSystem1989",SPHEROID["GRS1980",6378137.0,298.257222101,AUTHORITY["EPSG","7019"]],TOWGS84[0.0,0.0,0.0,0.0,0.0,0.0,0.0],AUTHORITY["EPSG","6258"]],PRIMEM["Greenwich",0.0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.017453292519943295],AXIS["Geodeticlatitude",NORTH],AXIS["Geodeticlongitude",EAST],AXIS["Ellipsoidalheight",UP],AUTHORITY["EPSG","4937"]]]]

When using projinfo, it complains it can't read that WKT with the
following error:
Missing VDATUM or ENSEMBLE node

As far as I understand, according to the WKT specs, the VERT_CS node
should contain a VDATUM node, instead it contains GEOGCS.

Is this WKT invalid or just using some obscure feature that PROJ does
not implement? And if the WKT is wrong, how can I produce a VERT_CS
clause for EPSG:4937 that would be valid, so that I can notify the
authority to fix the metadata?

Regards
Martin

From even.rouault at spatialys.com  Wed Oct 21 03:23:41 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 21 Oct 2020 12:23:41 +0200
Subject: [PROJ] Correct syntax of vertical datum
In-Reply-To: <CAC2XbFeW7kAmAKagDHS5yOUEMki4Mn2hhrVgpQJ4B+4sMcX-4g@mail.gmail.com>
References: <CAC2XbFeW7kAmAKagDHS5yOUEMki4Mn2hhrVgpQJ4B+4sMcX-4g@mail.gmail.com>
Message-ID: <200417313.oi3zbm1Dcb@even-i700>

Martin,

> Is this WKT invalid or just using some obscure feature that PROJ does
> not implement? 

Unless there's some hidden WKT spec I'm not aware of, this WKT is invalid. You 
cannot put a GEOGCS as a child node of a VERT_CS. And as this is a sort of 
WKT1, even the GEOGCS to express EPSG:4937 (ETRS89 as a Geographic 3D CRS) is 
invalid, as WKT1 spec restricts to 2 axis.

> And if the WKT is wrong, how can I produce a VERT_CS
> clause for EPSG:4937 that would be valid, so that I can notify the
> authority to fix the metadata?

In theory, you cannot express the concept of a Projected CRS + an ellipsoidal 
height as a compoundCRS. Because an ellipsoidal height cannot define a 
VerticalCRS (you must associate the horizontal coordinates as well), contrary 
to gravity-based orthometric heights which can be standalone.

That said... The old WKT1 specs allow a vertical datum to have a 2002 code 
expressing an ellipsoidal height. And US Lidar users have use that to create 
such WKT as you can see in https://github.com/OSGeo/PROJ/issues/2228

So if you transpose that example to yours, that would be:

COMPD_CS["ETRS89 / UTM zone 34N (N-E) + Ellipsoid (Meters)",
    PROJCS["ETRS89 / UTM zone 34N (N-E)",
        GEOGCS["ETRS89",
            DATUM["European_Terrestrial_Reference_System_1989",
                SPHEROID["GRS 1980",6378137,298.257222101,
                    AUTHORITY["EPSG","7019"]],
                AUTHORITY["EPSG","6258"]],
            PRIMEM["Greenwich",0,
                AUTHORITY["EPSG","8901"]],
            UNIT["degree",0.0174532925199433,
                AUTHORITY["EPSG","9122"]],
            AUTHORITY["EPSG","4258"]],
        PROJECTION["Transverse_Mercator"],
        PARAMETER["latitude_of_origin",0],
        PARAMETER["central_meridian",21],
        PARAMETER["scale_factor",0.9996],
        PARAMETER["false_easting",500000],
        PARAMETER["false_northing",0],
        UNIT["metre",1,
            AUTHORITY["EPSG","9001"]],
        AUTHORITY["EPSG","3046"]],
    VERT_CS["Ellipsoid (Meters)",
        VERT_DATUM["Ellipsoid",2002],
        UNIT["metre",1.0,
            AUTHORITY["EPSG","9001"]],
        AXIS["Up",UP]]]

Note that this will only be recognized properly by PROJ >= 7.1.1. Earlier 
versions would ingest that, but will not understand that it is an ellipsoidal 
VertCRS, and doing coordinate transformations with them will lead to improper 
transformation of the vertical component

If you provide this WKT as input of projinfo ( >= 7.1.1 ), you'll note that 
the output as WKT2:2019 is

PROJCRS["ETRS89 / UTM zone 34N (N-E)",
    BASEGEOGCRS["ETRS89",
        DATUM["European Terrestrial Reference System 1989",
            ELLIPSOID["GRS 1980",6378137,298.257222101,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",4937]],
    CONVERSION["UTM zone 34N",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",0,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",21,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",0.9996,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",500000,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]],
        ID["EPSG",16034]],
    CS[Cartesian,3],
        AXIS["(E)",east,
            ORDER[1],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
        AXIS["(N)",north,
            ORDER[2],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
        AXIS["ellipsoidal height (h)",up,
            ORDER[3],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
    REMARK["Promoted to 3D from EPSG:3046"]]

So upon ingestion, this is no longer a CompoundCRS, but a PROJCRS whose 
BASEGEOGCRS is EPSG:4937, and with a cartesian coordinate system with 3 axis. 
(The REMARK is something new in PROJ master)
This construct is allowed per WKT:2019
( http://docs.opengeospatial.org/is/18-010r7/18-010r7.html , look for "For a 
projected 3D CRS") , but this remains a quite exotic object.

You can also generate the above WKT with:
projinfo EPSG:3046 --3d

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From wonder.sk at gmail.com  Fri Oct 23 05:21:00 2020
From: wonder.sk at gmail.com (Martin Dobias)
Date: Fri, 23 Oct 2020 14:21:00 +0200
Subject: [PROJ] Correct syntax of vertical datum
In-Reply-To: <200417313.oi3zbm1Dcb@even-i700>
References: <CAC2XbFeW7kAmAKagDHS5yOUEMki4Mn2hhrVgpQJ4B+4sMcX-4g@mail.gmail.com>
 <200417313.oi3zbm1Dcb@even-i700>
Message-ID: <CAC2XbFcNk5jRR6SkgvWRMNt3__7aomowamvv-wyr8CcndqfyxQ@mail.gmail.com>

Hi Even

On Wed, Oct 21, 2020 at 12:23 PM Even Rouault
<even.rouault at spatialys.com> wrote:
>
> > Is this WKT invalid or just using some obscure feature that PROJ does
> > not implement?
>
> Unless there's some hidden WKT spec I'm not aware of, this WKT is invalid. You
> cannot put a GEOGCS as a child node of a VERT_CS. And as this is a sort of
> WKT1, even the GEOGCS to express EPSG:4937 (ETRS89 as a Geographic 3D CRS) is
> invalid, as WKT1 spec restricts to 2 axis.
>
> So if you transpose that example to yours, that would be:
>
> COMPD_CS["ETRS89 / UTM zone 34N (N-E) + Ellipsoid (Meters)",
>     ...
>     VERT_CS["Ellipsoid (Meters)",
>         VERT_DATUM["Ellipsoid",2002],
>         UNIT["metre",1.0,
>             AUTHORITY["EPSG","9001"]],
>         AXIS["Up",UP]]]

Many thanks for your detailed reply and an example of how the WKT
should look like in this case. I am getting in touch with the data
producer and hopefully they will fix the WKT on their end.

Cheers
Martin

From kristianevers at gmail.com  Mon Oct 26 04:44:17 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 26 Oct 2020 12:44:17 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
Message-ID: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>

All,

I have prepared candidates for the upcoming PROJ 7.2.0 and PROJ-data 1.3 releases. The packages
are available from

http://download.osgeo.org/proj/proj-7.2.0RC1.tar.gz <http://download.osgeo.org/proj/proj-7.2.0RC1.tar.gz>
http://download.osgeo.org/proj/proj-7.2.0RC1.zip <http://download.osgeo.org/proj/proj-7.2.0RC1.zip>

and

http://download.osgeo.org/proj/proj-data-1.3RC1.tar.gz <http://download.osgeo.org/proj/proj-data-1.3RC1.tar.gz>
http://download.osgeo.org/proj/proj-data-1.3RC1.zip <http://download.osgeo.org/proj/proj-data-1.3RC1.zip>

The PROJ release includes a number of updates and bug fixes (see details below) and the data
package is extended with the Japanese GSIGEO2011 geoid and Finish tinshift models.

Please test the release candiates and report your findings back to the mailing list.

/Kristian

————————————————————————————————————————————————————————————————————————————


PROJ 7.2.0 Release Notes
-------------------

 Updates
 -------

 + Command line tools:

   o Add multi-line PROJ string export capability, and use it by default in
     projinfo (unless --single-line is specified) (#2381)

 + Coordinate operations:

    o +proj=col_urban projection, implementing a EPSG projection method
      used by a number of projected CRS in Colombia (#2395)

    o +proj=tinshift for triangulation-based transformations (#2344)

    o Added ellipsoidal formulation of +proj=ortho (#2361)


 + Database

   o Update to EPSG 10.003 and make code base robust to dealing with
     WKT CRS with DatumEnsemble (#2370)

   o Added Finland tinshift operations (#2392)

   o Added transformation from JGD2011 Geographic 3D to JGD2011
     height using GSIGEO2011 (#2393)

   o Improve CompoundCRS identification and name morphing in VerticalCRS
     with ESRI WKT1 (#2386)

   o Added OGC:CRS27 and OGC:CRS83 CRS entries for NAD27 and NAD83
     in longitude, latitude order (#2350)

 + API

 o Added temporal, engineering, and parametric datum
   PJ_TYPE enumerations (#2274)

  o Various improvements to context handling (#2329, #2331)

  o proj_create_vertical_crs_ex(): add a ACCURACY option to provide
     an explicit accuracy, or derive it from the grid name if it is
     known (#2342)

   o proj_crs_create_bound_crs_to_WGS84(): make it work on
     verticalCRS/compoundCRS such as EPSG:4326+5773 and
     EPSG:4326+3855 (#2365)

   o promoteTo3D(): add a remark with the original CRS identifier (#2369)

   o Added proj_context_clone (#2383)


 Bug fixes
 ---------

 o Avoid core dumps when copying contexts in certain scenarios (#2324)

 o proj_trans(): reset errno before attemptying a retry with a new
   coordinate operation (#2353)

 o PROJJSON schema corrected to allow prime meridians values with
   explicitly stating a unit (degrees assumed) (#2354)

 o Adjust createBoundCRSToWGS84IfPossible() and operation filtering
   (for POSGAR 2007 to WGS84 issues) (#2357)

 o createOperations(): several fixes affecting NAD83 -> NAD83(2011) (#2364)

 o WKT2:2019 import/export: handle DATUM (at top level object) with PRIMEM

 o WKT1_ESRI: fix import and export of CompoundCRS (#2389)

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201026/367d48a4/attachment.html>

From sebastic at xs4all.nl  Mon Oct 26 05:28:49 2020
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 26 Oct 2020 13:28:49 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
Message-ID: <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>

The library SOVERSION is out of sync between the CMake and Autotools
buildsystems.

CMake uses 21 and Autotools uses 19.

The version-info for autotools should probably be: 21:0:0

The current value, 21:0:2, results in 19 (21 - 2).

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From kristianevers at gmail.com  Mon Oct 26 05:34:12 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 26 Oct 2020 13:34:12 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
Message-ID: <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>

That’s weird, I’ve set them exactly the same in both CMake and autotools:
https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd352 <https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd352>

Is this perhaps because PROJ_API_VERSION in CmakeLists.txt should be set to
current-age instead of just current?

/Kristian

> On 26 Oct 2020, at 13:28, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> The library SOVERSION is out of sync between the CMake and Autotools
> buildsystems.
> 
> CMake uses 21 and Autotools uses 19.
> 
> The version-info for autotools should probably be: 21:0:0
> 
> The current value, 21:0:2, results in 19 (21 - 2).
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201026/c8126469/attachment.html>

From sebastic at xs4all.nl  Mon Oct 26 05:48:07 2020
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 26 Oct 2020 13:48:07 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
 <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
Message-ID: <c86d3407-b54e-b201-f01b-210e14f24170@xs4all.nl>

On 10/26/20 1:34 PM, Kristian Evers wrote:
> That’s weird, I’ve set them exactly the same in both CMake and autotools:
> https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd352 <https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd352>
> 
> Is this perhaps because PROJ_API_VERSION in CmakeLists.txt should be set to
> current-age instead of just current?

PROJ_API_VERSION is used to set the SOVERSION for CMake, so this must
match the calculated SOVERSION (current - age) for Autotools.

Since the intention is to bump the ABI, version-info should be 21:0:0.

See the libtool manual for more information:

 https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From even.rouault at spatialys.com  Mon Oct 26 05:55:40 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 26 Oct 2020 13:55:40 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
 <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
Message-ID: <2548472.EtO2sLsX6f@even-i700>

On lundi 26 octobre 2020 13:34:12 CET Kristian Evers wrote:
> That’s weird, I’ve set them exactly the same in both CMake and autotools:
> https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd35
> 2
> <https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd
> 352>
> 
> Is this perhaps because PROJ_API_VERSION in CmakeLists.txt should be set to
> current-age instead of just current?

Yes

and PROJ_BUILD_VERSION should not be set to current:revision:age, but to X.Y.Z 
which only non-mortals can guess from current:revision:age. The pragramatic 
way of having X.Y.Z right is to do a autoconf build and look at the generated 
libproj.so.X.Y.Z . But this would only work on the operating system from which 
you did the build, since the libtool current:revision:age versionning scheme 
translates to different X.Y.Z versions given the operating system... So it 
seems there's no way to make sure that a cmake build will result in the same 
.so.* files as a autoconf+libtool build

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kristianevers at gmail.com  Mon Oct 26 05:59:16 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 26 Oct 2020 13:59:16 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <c86d3407-b54e-b201-f01b-210e14f24170@xs4all.nl>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
 <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
 <c86d3407-b54e-b201-f01b-210e14f24170@xs4all.nl>
Message-ID: <287421F9-6255-4BE5-90A5-E4B6232FEF6D@gmail.com>

Bas,

Here’s an annotated version of me following the steps in your link:


1. Start with version information of ‘0:0:0’ for each libtool library.

  Well, we start with 20.0.1

2. Update the version information only immediately before a public release of your software. More frequent updates are unnecessary, and only guarantee that the current interface number gets larger faster.

  Did this.

3. If the library source code has changed at all since the last update, then increment revision (‘c:r:a’ becomes ‘c:r+1:a’).

  The code has changed since the last update, so now we’re at 20.1.1

4. If any interfaces have been added, removed, or changed since the last update, increment current, and set revision to 0.

  We’ve added new interfaces since the last version, so 21.0.1

5. If any interfaces have been added since the last public release, then increment age.

  As stated above, new interfaces were added, so 21.0.2

6. If any interfaces have been removed or changed since the last public release, then set age to 0.

  No removed or changed interfaces this time around.


I know I’ve mucked these numbers up several times before but this time around I am not convinced
it is the case. I am of course happy to be proven otherwise!

/Kristian


> On 26 Oct 2020, at 13:48, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> On 10/26/20 1:34 PM, Kristian Evers wrote:
>> That’s weird, I’ve set them exactly the same in both CMake and autotools:
>> https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd352 <https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd352>
>> 
>> Is this perhaps because PROJ_API_VERSION in CmakeLists.txt should be set to
>> current-age instead of just current?
> 
> PROJ_API_VERSION is used to set the SOVERSION for CMake, so this must
> match the calculated SOVERSION (current - age) for Autotools.
> 
> Since the intention is to bump the ABI, version-info should be 21:0:0.
> 
> See the libtool manual for more information:
> 
> https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201026/9dd6c872/attachment.html>

From kristianevers at gmail.com  Mon Oct 26 06:05:24 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 26 Oct 2020 14:05:24 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <2548472.EtO2sLsX6f@even-i700>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
 <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
 <2548472.EtO2sLsX6f@even-i700>
Message-ID: <4FBF063C-6262-4CD0-BD71-336031B8D8EB@gmail.com>



> On 26 Oct 2020, at 13:55, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> On lundi 26 octobre 2020 13:34:12 CET Kristian Evers wrote:
>> That’s weird, I’ve set them exactly the same in both CMake and autotools:
>> https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd35
>> 2
>> <https://github.com/OSGeo/PROJ/commit/3bd548d816f141b617c7b3252e22b4f0b7fdd
>> 352>
>> 
>> Is this perhaps because PROJ_API_VERSION in CmakeLists.txt should be set to
>> current-age instead of just current?
> 
> Yes

I’ll update HOWTORELEASE to reflect this then.

> 
> and PROJ_BUILD_VERSION should not be set to current:revision:age, but to X.Y.Z 
> which only non-mortals can guess from current:revision:age. The pragramatic 
> way of having X.Y.Z right is to do a autoconf build and look at the generated 
> libproj.so.X.Y.Z . But this would only work on the operating system from which 
> you did the build, since the libtool current:revision:age versionning scheme 
> translates to different X.Y.Z versions given the operating system... So it 
> seems there's no way to make sure that a cmake build will result in the same 
> .so.* files as a autoconf+libtool build
> 

I’ll leave this be until there’s a way to set this properly for mortals. I can update
the numbers based on my MacOS builds but that will just cause different issues
i believe.

/Kristian


From sebastic at xs4all.nl  Mon Oct 26 06:28:25 2020
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 26 Oct 2020 14:28:25 +0100
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <287421F9-6255-4BE5-90A5-E4B6232FEF6D@gmail.com>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
 <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
 <c86d3407-b54e-b201-f01b-210e14f24170@xs4all.nl>
 <287421F9-6255-4BE5-90A5-E4B6232FEF6D@gmail.com>
Message-ID: <0045367d-53e6-6363-c14d-13f8d3a81afd@xs4all.nl>

On 10/26/20 1:59 PM, Kristian Evers wrote:
> Here’s an annotated version of me following the steps in your link:
> 
> 
> 1. Start with version information of ‘0:0:0’ for each libtool library.
> 
>   Well, we start with 20.0.1
> 
> 2. Update the version information only immediately before a public release of your software. More frequent updates are unnecessary, and only guarantee that the current interface number gets larger faster.
> 
>   Did this.
> 
> 3. If the library source code has changed at all since the last update, then increment revision (‘c:r:a’ becomes ‘c:r+1:a’).
> 
>   The code has changed since the last update, so now we’re at 20.1.1
> 
> 4. If any interfaces have been added, removed, or changed since the last update, increment current, and set revision to 0.
> 
>   We’ve added new interfaces since the last version, so 21.0.1
> 
> 5. If any interfaces have been added since the last public release, then increment age.
> 
>   As stated above, new interfaces were added, so 21.0.2
> 
> 6. If any interfaces have been removed or changed since the last public release, then set age to 0.
> 
>   No removed or changed interfaces this time around.
> 
> 
> I know I’ve mucked these numbers up several times before but this time around I am not convinced
> it is the case. I am of course happy to be proven otherwise!

This implies that the ABI has not changed, and that the SOVERSION
remains at 19.

If the ABI has not changed PROJ_API_VERSION should not have changed for
the CMake build.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From kreve at sdfe.dk  Mon Oct 26 06:34:01 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 26 Oct 2020 13:34:01 +0000
Subject: [PROJ] PROJ 7.2.0RC1 and PROJ-data 1.3RC1
In-Reply-To: <0045367d-53e6-6363-c14d-13f8d3a81afd@xs4all.nl>
References: <BD54D29A-737D-4BD2-8DCE-B6BCEC8EA827@gmail.com>
 <47f68dc6-b9d7-9c34-f683-777bf0c4f6b8@xs4all.nl>
 <B6FC4B07-AF63-476A-8016-ABB3ECC70A33@gmail.com>
 <c86d3407-b54e-b201-f01b-210e14f24170@xs4all.nl>
 <287421F9-6255-4BE5-90A5-E4B6232FEF6D@gmail.com>
 <0045367d-53e6-6363-c14d-13f8d3a81afd@xs4all.nl>
Message-ID: <6D613A8C-92C7-4FD2-973D-00E88E805730@sdfe.dk>


This implies that the ABI has not changed, and that the SOVERSION
remains at 19.

If the ABI has not changed PROJ_API_VERSION should not have changed for
the CMake build.


And with help from Even the problem has been diagnosed. Updated in
https://github.com/OSGeo/PROJ/commit/91a767b0cdebba317e20abdcee6bfa444cfe8455


This will of course result in a new release candidate. I’ll wait a day or two to see if anything
else is discovered.

/Kristian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201026/8c27b996/attachment.html>

From kreve at sdfe.dk  Wed Oct 28 06:30:16 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 28 Oct 2020 13:30:16 +0000
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
Message-ID: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>

All,

A few problems with both release candidates were found, so here’s a new set to be tested:

http://download.osgeo.org/proj/proj-7.2.0RC2.tar.gz
http://download.osgeo.org/proj/proj-7.2.0RC2.zip

and

http://download.osgeo.org/proj/proj-data-1.3RC2.tar.gz
http://download.osgeo.org/proj/proj-data-1.3RC2.zip


The PROJ package had a wrong ABI number in the CMake setup and in the PROJ-data
package the GSIGEO2011 geoid was not covering the full extend of the source model.
Both issues has now been corrected.

Please test the release candiates and report your findings back to the mailing list.

I will call for a vote for promotion to final releases on Friday provided that no further issues
are found.

/Kristian

From Nicolas.Bellaiche at ign.fr  Thu Oct 29 01:25:24 2020
From: Nicolas.Bellaiche at ign.fr (Nicolas Bellaiche)
Date: Thu, 29 Oct 2020 08:25:24 +0000
Subject: [PROJ] Geodetic to geographic conversions
Message-ID: <C6A3E3CA0FD04E47839C6B26C02B803A0136B65700@mailex1.ign.fr>

Hi all,

I need to migrate my old PROJ.4 C++ codes to PROJ-7.1.1 and I'm a bit stuck with the conversions geodetic <-> geographic coordinates (on the same datum). The only doc I could find is this single line but I haven't been able to deal with it:


pj_latlong_from_proj


No direct equivalent, but can be accomplished by chaining proj_create()<https://proj.org/development/reference/functions.html#c.proj_create>, proj_crs_get_horizontal_datum() andproj_create_geographic_crs_from_datum()


Is there any example code that could help me?


Thank youu very much,

Nicolas Bellaiche
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201029/5b1f03a5/attachment.html>

From jmckenna at gatewaygeomatics.com  Thu Oct 29 17:06:14 2020
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Thu, 29 Oct 2020 21:06:14 -0300
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
In-Reply-To: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
References: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
Message-ID: <71ba41eb-391c-4526-cfad-6f5fb54abac7@gatewaygeomatics.com>

Hi Kristian,

Thanks for the team effort on PROJ 7.2    I have tried very hard to test 
both GDAL 3.2.0 and PROJ 7.2.0rc2 on Windows this week, and provide you 
with good feedback, which I hope is well received :

- PROJ 7.2.0RC2 builds well on Windows (MS4W build environment)
- would you be open to enhancing the search path for the resource files, 
to first check the (popular and long-used) PROJ_LIB environment variable 
path?

Or maybe a nice enhancement is adding a new option to proj.ini such as :

   ; Writable folder to store network files, such as grid files through 
the CDN
   cdn_writable_local_folder = /ttt/proj/nad

This will help prevent any access of the obscure Windows profile 
'APPDATA' folder, that 99% of Windows users do not know where or how to 
access.  It would make managing the grid files on Windows, for both 
users and packagers, very easy (since we are all very familiar with 
decades of manipulating the PROJ_LIB environment variable path for 
resource files, where our software normally lives).

The projsync utility would also therefore use this new setting. (in my 
tests, --user-writable-directory would go searching into the depths of 
Windows profiles ha, and --system-directory searched a path from the 
build process, which users will never have yikes, of D:/build/proj-7.2.0/..)

Please let me know your thoughts on this.  I realize there are other 
platforms to please, but maybe other platforms would also appreciate a 
'cdn_writable_local_folder' setting, or the enhanced use of PROJ_LIB. 
(I've noticed a few other users recently mention PROJ_LIB search process 
in recent tickets, so I do have hope ha)

Well at least I asked.  I think it's very important to provide feedback 
(you'll notice that I'm always one of the few who actually tries to use 
the software before releases and gives feedback).

Thanks for listening,

-jeff


(thanks again to Alan for pointing to 
https://proj.org/resource_files.html#where-are-proj-resource-files-looked-for 
)




-- 
Jeff McKenna
MapServer Consulting and Training Services
co-founder of FOSS4G
http://gatewaygeo.com/





From kristianevers at gmail.com  Fri Oct 30 00:49:29 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 30 Oct 2020 08:49:29 +0100
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
In-Reply-To: <71ba41eb-391c-4526-cfad-6f5fb54abac7@gatewaygeomatics.com>
References: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
 <71ba41eb-391c-4526-cfad-6f5fb54abac7@gatewaygeomatics.com>
Message-ID: <F6F8255A-16B4-46E3-AFB4-A362222B2AAE@gmail.com>

Jeff,

Thanks for testing the release candidates. Your testing and feedback is much appreciated!

If the way the search paths are handled is causing friction on Windows we should try to find a better way. What you’ve described below might be a good solution. As always, a good explanation of the problem, a well thought out solution and a pull request makes things happen quickly :-) But maybe first start by adding your ideas to the GitHub issue on the same topic [0]. 

/Kristian

[0] https://github.com/OSGeo/PROJ/issues/2399

> On 30 Oct 2020, at 01:06, Jeff McKenna <jmckenna at gatewaygeomatics.com> wrote:
> 
> Hi Kristian,
> 
> Thanks for the team effort on PROJ 7.2    I have tried very hard to test both GDAL 3.2.0 and PROJ 7.2.0rc2 on Windows this week, and provide you with good feedback, which I hope is well received :
> 
> - PROJ 7.2.0RC2 builds well on Windows (MS4W build environment)
> - would you be open to enhancing the search path for the resource files, to first check the (popular and long-used) PROJ_LIB environment variable path?
> 
> Or maybe a nice enhancement is adding a new option to proj.ini such as :
> 
>  ; Writable folder to store network files, such as grid files through the CDN
>  cdn_writable_local_folder = /ttt/proj/nad
> 
> This will help prevent any access of the obscure Windows profile 'APPDATA' folder, that 99% of Windows users do not know where or how to access.  It would make managing the grid files on Windows, for both users and packagers, very easy (since we are all very familiar with decades of manipulating the PROJ_LIB environment variable path for resource files, where our software normally lives).
> 
> The projsync utility would also therefore use this new setting. (in my tests, --user-writable-directory would go searching into the depths of Windows profiles ha, and --system-directory searched a path from the build process, which users will never have yikes, of D:/build/proj-7.2.0/..)
> 
> Please let me know your thoughts on this.  I realize there are other platforms to please, but maybe other platforms would also appreciate a 'cdn_writable_local_folder' setting, or the enhanced use of PROJ_LIB. (I've noticed a few other users recently mention PROJ_LIB search process in recent tickets, so I do have hope ha)
> 
> Well at least I asked.  I think it's very important to provide feedback (you'll notice that I'm always one of the few who actually tries to use the software before releases and gives feedback).
> 
> Thanks for listening,
> 
> -jeff
> 
> 
> (thanks again to Alan for pointing to https://proj.org/resource_files.html#where-are-proj-resource-files-looked-for )
> 
> 
> 
> 
> -- 
> Jeff McKenna
> MapServer Consulting and Training Services
> co-founder of FOSS4G
> http://gatewaygeo.com/
> 
> 
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From kristianevers at gmail.com  Fri Oct 30 00:51:20 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 30 Oct 2020 08:51:20 +0100
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
In-Reply-To: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
References: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
Message-ID: <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>

It’s friday and no further issues has been found with the two release candidates, so I hereby
motion that they be promoted to final releases.

I’ll start with my +1.

/Kristian

> On 28 Oct 2020, at 14:30, Kristian Evers <kreve at sdfe.dk> wrote:
> 
> All,
> 
> A few problems with both release candidates were found, so here’s a new set to be tested:
> 
> http://download.osgeo.org/proj/proj-7.2.0RC2.tar.gz
> http://download.osgeo.org/proj/proj-7.2.0RC2.zip
> 
> and
> 
> http://download.osgeo.org/proj/proj-data-1.3RC2.tar.gz
> http://download.osgeo.org/proj/proj-data-1.3RC2.zip
> 
> 
> The PROJ package had a wrong ABI number in the CMake setup and in the PROJ-data
> package the GSIGEO2011 geoid was not covering the full extend of the source model.
> Both issues has now been corrected.
> 
> Please test the release candiates and report your findings back to the mailing list.
> 
> I will call for a vote for promotion to final releases on Friday provided that no further issues
> are found.
> 
> /Kristian


From knudsen.thomas at gmail.com  Fri Oct 30 01:17:35 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 30 Oct 2020 09:17:35 +0100
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
In-Reply-To: <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>
References: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
 <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>
Message-ID: <CAH0YoENQu=zmyXfUfp8at_-nREWhHEKMS7uhTL+XLbnxkF+_yg@mail.gmail.com>

+1  /thomas

Den fre. 30. okt. 2020 kl. 08.51 skrev Kristian Evers <
kristianevers at gmail.com>:

> It’s friday and no further issues has been found with the two release
> candidates, so I hereby
> motion that they be promoted to final releases.
>
> I’ll start with my +1.
>
> /Kristian
>
> > On 28 Oct 2020, at 14:30, Kristian Evers <kreve at sdfe.dk> wrote:
> >
> > All,
> >
> > A few problems with both release candidates were found, so here’s a new
> set to be tested:
> >
> > http://download.osgeo.org/proj/proj-7.2.0RC2.tar.gz
> > http://download.osgeo.org/proj/proj-7.2.0RC2.zip
> >
> > and
> >
> > http://download.osgeo.org/proj/proj-data-1.3RC2.tar.gz
> > http://download.osgeo.org/proj/proj-data-1.3RC2.zip
> >
> >
> > The PROJ package had a wrong ABI number in the CMake setup and in the
> PROJ-data
> > package the GSIGEO2011 geoid was not covering the full extend of the
> source model.
> > Both issues has now been corrected.
> >
> > Please test the release candiates and report your findings back to the
> mailing list.
> >
> > I will call for a vote for promotion to final releases on Friday
> provided that no further issues
> > are found.
> >
> > /Kristian
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201030/019d6c4f/attachment.html>

From even.rouault at spatialys.com  Fri Oct 30 02:40:15 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 30 Oct 2020 10:40:15 +0100
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
In-Reply-To: <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>
References: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
 <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>
Message-ID: <3214993.4ZO0ibQTXy@even-i700>

On vendredi 30 octobre 2020 08:51:20 CET Kristian Evers wrote:
> It’s friday and no further issues has been found with the two release
> candidates, so I hereby motion that they be promoted to final releases.
> 
> I’ll start with my +1.

+1 Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From charles at karney.com  Fri Oct 30 03:01:08 2020
From: charles at karney.com (Charles Karney)
Date: Fri, 30 Oct 2020 06:01:08 -0400
Subject: [PROJ] PROJ 7.2.0RC2 and PROJ-data 1.3RC2
In-Reply-To: <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>
References: <BCDB2077-E662-4451-ACCC-70529A737C13@sdfe.dk>
 <0AD3B936-28D0-4ADF-B0D6-44FB5227636B@gmail.com>
Message-ID: <7b6d4632-dc16-a4eb-a4b8-18f3570cdd79@karney.com>

+1

   --Charles

On 10/30/20 3:51 AM, Kristian Evers wrote:
> It’s friday and no further issues has been found with the two release candidates, so I hereby
> motion that they be promoted to final releases.
> 
> I’ll start with my +1.
> 
> /Kristian
> 
>> On 28 Oct 2020, at 14:30, Kristian Evers <kreve at sdfe.dk> wrote:
>>
>> All,
>>
>> A few problems with both release candidates were found, so here’s a new set to be tested:
>>
>> http://download.osgeo.org/proj/proj-7.2.0RC2.tar.gz
>> http://download.osgeo.org/proj/proj-7.2.0RC2.zip
>>
>> and
>>
>> http://download.osgeo.org/proj/proj-data-1.3RC2.tar.gz
>> http://download.osgeo.org/proj/proj-data-1.3RC2.zip
>>
>>
>> The PROJ package had a wrong ABI number in the CMake setup and in the PROJ-data
>> package the GSIGEO2011 geoid was not covering the full extend of the source model.
>> Both issues has now been corrected.
>>
>> Please test the release candiates and report your findings back to the mailing list.
>>
>> I will call for a vote for promotion to final releases on Friday provided that no further issues
>> are found.
>>
>> /Kristian
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> 

-- 
Charles Karney <charles at karney.com>
Princeton, NJ

From j1 at jimenezshaw.com  Fri Oct 30 12:10:55 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Fri, 30 Oct 2020 20:10:55 +0100
Subject: [PROJ] Strange values with NAVD88
Message-ID: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>

Hi

Doing some tests with NAVD88 (EPSG:5703), I got some unexpected results.
See the next 5 commands

a) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4269+5703 -d 9
     40.689991531 -75.039999022 35.046181369
b) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152+5703 -d 9
     40.689991800 -75.039998369 35.046181369
c) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:6318+5703 -d 9
     40.690000000 -75.040000000 33.784496002
d) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152 -d 9
     40.690000000 -75.040000000 0.000000000
e) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4957 EPSG:4152+5703 -d 9
     40.690000000 -75.040000000 33.786615753

Comparing b) and d), why are XY coordinates changed when NAVD88 is
included? It is the same using EPSG:4957 instead of EPSG:4152 in d). I
thought that NAD83(HARN) and WGS84 were considered the same. If it is
considering that the normal to the ellipsoid and the geoid are not the
same, why have d) and e) the same XY coordinates (see that the source in e)
is NAD83(HARN), not WGS84)?

In c), the altitude has more than 1 meter difference. Why? Am I doing or
assuming something wrong? Checking all the american geoids in this area in
cdn.proj.org, there are no more than a few centimeters difference.

I do not know if it is related, but I have only seen ballpark (horizontal)
transformations between NAD83(HARN) and NAD83(2011). Is that correct? I was
expecting some transformation, either direct or a grid.

I am using master, a few days old, hash 2dabb14ec

Thank you.

.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201030/8a5d61f4/attachment.html>

From even.rouault at spatialys.com  Fri Oct 30 14:53:29 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 30 Oct 2020 22:53:29 +0100
Subject: [PROJ] Strange values with NAVD88
In-Reply-To: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>
References: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>
Message-ID: <4500154.uWjvvvBW20@even-i700>

Javier,

> Doing some tests with NAVD88 (EPSG:5703), I got some unexpected results.
> See the next 5 commands
> 
> a) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4269+5703 -d 9
> 40.689991531 -75.039999022 35.046181369
> b) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152+5703 -d 9
> 40.689991800 -75.039998369 35.046181369
> c) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:6318+5703 -d 9
> 40.690000000 -75.040000000 33.784496002
> d) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152 -d 9
>      40.690000000 -75.040000000 0.000000000
> e) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4957 EPSG:4152+5703 -d 9
> 40.690000000 -75.040000000 33.786615753

I initially wrote """using "projinfo -s X -t Y --spatial-test intersects --
grid-check none" should answer most of your questions.""", which is not false, 
but here you fall into situations that exercice the oracle in PROJ in very 
subtle ways.

Adding --bbox -76,40,-75,41 helps restricting the set of transformations, 
except that it has some very subtle differences in the sorting order, which 
don't always exactly lead to the same result than when using cs2cs, which has 
no prior bbox knowledge... (cs2cs will basically use the first transformation 
listed by projinfo --spatial-test intersects --grid-check none for which the 
point of interest falls into, and that has the best accuracy)

The issue here is with "NAD83(HARN) to WGS 84 (1)", a noop, with 1 m accuracy 
that has a wider extent of use than "NAD83(HARN) to WGS 84 (3)", a Helmert 
based one, with 1m accuracy too, but a lesser extent. So when using --bbox 
-76,40,-75,41, due to the intersection of the area of use of both 
transformation with the specified bbox being the same, "NAD83(HARN) to WGS 84 
(3)" will be prefered over "NAD83(HARN) to WGS 84 (1)", due to it's (3) higher 
version number... Without --bbox, since  "NAD83(HARN) to WGS 84 (1)" has a 
larger extent, it is prefered. Subtle...
 
> Comparing b) and d), why are XY coordinates changed when NAVD88 is
> included? It is the same using EPSG:4957 instead of EPSG:4152 in d). 

In b), the restriction of the area of use due to the NAVD88 transform makes 
"NAD83(HARN) to WGS 84 (3)" (Helmert transformation, done in 3D) to be used 
(since then the transformations using "NAD83(HARN) to WGS 84 (3)" and 
"NAD83(HARN) to WGS 84 (1)" have the same area of use, and thus (3) is 
prefered)

In d), there is no such restriction to the area of use of the transformation, 
so "NAD83(HARN) to WGS 84 (1)" is prefered due to its wider are of use. 
Perhaps the selection logic in proj_trans() should have an extra case for 
"when there are 2 transformations with same accuracy and for which the point 
to transform falls into, select the one with the smallest area of use since it 
is likely to be more accurate". I don't know. Adds yet another fragile 
heuristics to many existing ones.

What sucks here is that both transformations in EPSG are advertized with the 
same accuracy, and that cause PROJ to be ultra sensitive. If the Helmert one 
was advertized with a slightly better accuracy, things would be more 
predictable.

> I thought that NAD83(HARN) and WGS84 were considered the same.

See above. There is a transformation in EPSG for which this is true, and 
another one, not.

> In c), the altitude has more than 1 meter difference. Why? Am I doing or
> assuming something wrong? Checking all the american geoids in this area in
> cdn.proj.org, there are no more than a few centimeters difference.

b) has a Helmert transformation done in 3D for WGS 84 to NAD83(HARN), whereas 
there is no registered transformation between WGS 84 and NAD83(2011), so c) 
only applies the geoid transformation.

> I do not know if it is related, but I have only seen ballpark (horizontal)
> transformations between NAD83(HARN) and NAD83(2011). Is that correct? I was
> expecting some transformation, either direct or a grid.

We probably lack NADCON5 grids here:
https://github.com/OSGeo/PROJ/issues/2194

(Anyway using generic WGS84, you shouldn't expect sub-metre accuracy...)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gdt at lexort.com  Fri Oct 30 18:27:10 2020
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 30 Oct 2020 21:27:10 -0400
Subject: [PROJ] Strange values with NAVD88
In-Reply-To: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>
 (Javier Jimenez Shaw's message of "Fri, 30 Oct 2020 20:10:55 +0100")
References: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>
Message-ID: <rmih7qbkwwh.fsf@s1.lexort.com>


Javier Jimenez Shaw <j1 at jimenezshaw.com> writes:

First, I don't mean to contradict Even, but I will caution you that Even
is speaking from the viewpoint of proj and the EPSG databse,which is a
highly sensible place to be speaking from, especially on this lst.  I am
coming from a farther-from-proj perspective that might be described as
NGS-like.  (I do not speak for NGS; I'm just a reader of their
publications.  But I think if you asked them, they might say similar
things.)

> Doing some tests with NAVD88 (EPSG:5703), I got some unexpected results.
> See the next 5 commands
>
> a) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4269+5703 -d 9
>      40.689991531 -75.039999022 35.046181369

So 4979 is WGS84 as a Geodetic3D CRS.  It is important to realize that
this is a a "datum ensemble", even if the proj you are using doesn't do
that yet, and formally this means an unspecified member of the set or
realizations of WGS84, including WGS84(TRANSIT) through WGS84(G1762).
Once you start off like this you don't get to complain about 2m.
TRANSIT is essentially NAD83 and G1762 is esentially ITF2008.

ESGS:4269 is NAD83.  My best guess is that this means NAD83(1986), vs
NAD83(ensemble), which seems not to have a codepoint yet.  5703 is
NAVD88, and we don't really have to deal with multiple of those.

Note that NAD83(1986) is really only 2D.

I therefore expect a null transform from 4979 to 4269, both in lat-lon
and in HAE.

here, you are transforming "WGS84 HAE" to NAV88.  Given the ensemble,
it's hard to say what that means.

I cannot explain the horizontal difference.  As I understand proj
doctrine, no transform is supportable here.

> b) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152+5703 -d 9
>      40.689991800 -75.039998369 35.046181369

4152 is NAD83(HARN).  In practice (and I mean for real, not as proj
computes it) this should be extremely close to NAD83.  For your
coordinates NGS estimates ~10cm shift from NAD83(1986) to NAD83(HARN).
See

  https://www.ngs.noaa.gov/NCAT/

and notice the datum choices are

  NAD83(2011)
  NAD83(NSRS2007)
  NAD83(FBN)
  NAD83(HARN)
  NAD83(1986)
  NAD27
  USSD

A huge part of the issue, the elephant that I keep shouting about, is
that one of the WGS84 ensemble members, WGS84(TRANSIT), is basically
equal to NAD83(1986), and while later NAD83 are very close to original
NAD83, later WGS84 are not close to WGS84(TRANSIT).

It's a really good question what's going on here about different
horizontal coords.

> c) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:6318+5703 -d 9
>      40.690000000 -75.040000000 33.784496002

This is NAD83(2011). The difference between NAD83(HARN) and NAD83(2011)
is tiny.  Maybe 4cm horizontal for your coordinates and 5cm for HAE.
Use NCAT and see for yourself.

> d) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152 -d 9
>      40.690000000 -75.040000000 0.000000000

This is NAD83(HARN), as a 2D system, so the altitude is not changed.
And it's still believing the WGS84==NAD83, bceause the oldest of each
realization basically matches, even though ~nobody has any actual data
in WGS84(TRANSIT).

> e) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4957 EPSG:4152+5703 -d 9
>      40.690000000 -75.040000000 33.786615753

This is starting from HARN and going to HARN+NAVD88.  This is now making
sense to get a different elevation.   The basic issue is that  the
position of the NAD83  ellipsoid is different (origin) than the modern
ITRF/WGS84(G1762) ellipsoid.  So NAVD88, intended to sort of be sea
level in the US, but not really, differs from  the "WGS84 orthometric
height", which is sort of the global equipotential.

In the US, there are two kinds of geoid models:

  NAD83 to NAVD88, used within the US national datum world, eg
    https://www.ngs.noaa.gov/GEOID/GEOID18/
  defined by NGS

  WGS84 HAE to WGS84 orthometric height, defined by NGA
    https://earth-info.nga.mil/GandG/wgs84/gravitymod/egm2008/

and NAD83 HAE and WGS84(modern) HAE are different.

> Comparing b) and d), why are XY coordinates changed when NAVD88 is
> included? It is the same using EPSG:4957 instead of EPSG:4152 in d). I

That's a really good question.

> thought that NAD83(HARN) and WGS84 were considered the same. If it is

No, they really aren't considered the same. But proj has a notion that
they are because one member of the WGS84 ensemble matches.

> considering that the normal to the ellipsoid and the geoid are not the
> same, why have d) and e) the same XY coordinates (see that the source in e)
> is NAD83(HARN), not WGS84)?

proj tends to assume that NAD83 == WGS84.

Yes, ellipsoidal and geoid normals are not the same.  I guess it's a
really good question what a combined horizontal and orthometric height
CS means.  I would still expect the XYZ of the point to be reduced to
lat/lon along the ellipsoidal normal even if vertical is orthometric
height.

> In c), the altitude has more than 1 meter difference. Why? Am I doing or
> assuming something wrong? Checking all the american geoids in this area in
> cdn.proj.org, there are no more than a few centimeters difference.

By "american geoid", do you mean GEOID12 and GEOID18, or are you also
admitting the military geoid model EGM2008?  (Hint: NGS and NGA, while
I'm sure they talk to each other, are different worlds.)

> I do not know if it is related, but I have only seen ballpark (horizontal)
> transformations between NAD83(HARN) and NAD83(2011). Is that correct? I was
> expecting some transformation, either direct or a grid.

There should be a grid transform. See NCAT that I linked above.  It is
entirely possible that this precision of NGS transform is not yet
incorporated in proj.  It is pretty fair to assume NAD83(HARN) to
NAD83(2011) is a null transform, and probably at the 10 cm level this is
ok.  As with all things NAD83, and many things in American life, things
are more stable if you aren't in California.


Overall my advice is to stop using datum ensembles, particularly WGS84.
If you do use WGS84, then you should realize that everthing you are
doing has ~2m of fuzz and be unconcerned about numerical differences of
that order, including in heights.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201030/3b3e7650/attachment.sig>

From even.rouault at spatialys.com  Sat Oct 31 02:49:13 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 31 Oct 2020 10:49:13 +0100
Subject: [PROJ] Geodetic to geographic conversions
In-Reply-To: <C6A3E3CA0FD04E47839C6B26C02B803A0136B65700@mailex1.ign.fr>
References: <C6A3E3CA0FD04E47839C6B26C02B803A0136B65700@mailex1.ign.fr>
Message-ID: <114588160.MSoFnnHctv@even-i700>

On jeudi 29 octobre 2020 08:25:24 CET Nicolas Bellaiche wrote:
> Hi all,
> 
> I need to migrate my old PROJ.4 C++ codes to PROJ-7.1.1 and I'm a bit stuck
> with the conversions geodetic <-> geographic coordinates (on the same
> datum).

By geodetic, you mean geocentric ?

> The only doc I could find is this single line but I haven't been
> able to deal with it:
> 
> 
> pj_latlong_from_proj
> 
> 
> No direct equivalent, but can be accomplished by chaining
> proj_create()<https://proj.org/development/reference/functions.html#c.proj_
> create>, proj_crs_get_horizontal_datum()
> andproj_create_geographic_crs_from_datum()

Something along:

PJ* datum = proj_crs_get_horizontal_datum(ctxt, geocentric_crs);
PJ* cs = proj_create_ellipsoidal_2D_cs(
  ctxt, PJ_ELLPS2D_LONGITUDE_LATITUDE, /* or PJ_ELLPS2D_LATITUDE_LONGITUDE */
  NULL, /* default unit name for Degree */
  0 /* default conversion factor from Degree to Radian */
);

/* or proj_create_ellipsoidal_3D_cs() depending on your needs */

PJ* geog_crs = proj_create_geographic_crs_from_datum(ctxt, NULL, datum, cs);
proj_destroy(cs);
proj_destroy(datum);

PJ* transf = proj_create_crs_to_crs(ctxt, geocentric_crs, geog_crs, NULL);

proj_trans(transf, ...);

proj_destroy(geog_crs);

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Sat Oct 31 05:50:16 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 31 Oct 2020 13:50:16 +0100
Subject: [PROJ] Strange values with NAVD88
In-Reply-To: <rmih7qbkwwh.fsf@s1.lexort.com>
References: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>
 <rmih7qbkwwh.fsf@s1.lexort.com>
Message-ID: <29713347.yLgk3QNz6C@even-i700>

> First, I don't mean to contradict Even, but I will caution you that Even
> is speaking from the viewpoint of proj and the EPSG databse,which is a
> highly sensible place to be speaking from, especially on this lst.  I am
> coming from a farther-from-proj perspective that might be described as
> NGS-like.  (I do not speak for NGS; I'm just a reader of their
> publications.  But I think if you asked them, they might say similar
> things.)

Exchanges and brainstorming are welcome. I'm perfectly aware that there are 
many limitations to the approach taken and that humans can come up with more 
relevant transforms. That's why projinfo output should be examined to look at 
all alternatives that PROJ could find and potentially pick up something 
different than the "best" / default transformation.
Using cs2cs is a bit like searching an information in your favorite search 
engine and always trusting the top result to be the one you need.
I'm not sure how to overcome those limitations while keeping a data-driven 
approach with as generic as possible heuristics to make the best use of it. 
Perhaps adding some auxiliary table(s) in the database that would influence 
how PROJ ranks its results to override its default heuristics, but maintaining 
that could become complicated.

> I therefore expect a null transform from 4979 to 4269, both in lat-lon
> and in HAE.
> I cannot explain the horizontal difference.  As I understand proj
> doctrine, no transform is supportable here.

Here's what PROJ come from for that case:

Inverse of NAD83(HARN) to WGS 84 (3) + NAD83(HARN) to NAVD88 height (8) + 
Inverse of NAD83 to NAD83(HARN) (46)

+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +proj=cart +ellps=WGS84
  +step +inv +proj=helmert +x=-0.991 +y=1.9072 +z=0.5129 
+rx=-0.0257899075194932
        +ry=-0.0096500989602704 +rz=-0.0116599432323421 +s=0
        +convention=coordinate_frame
  +step +inv +proj=cart +ellps=GRS80
  +step +inv +proj=vgridshift +grids=us_noaa_g1999u08.tif +multiplier=1
  +step +inv +proj=hgridshift +grids=us_noaa_pahpgn.tif
  +step +proj=unitconvert +xy_in=rad +xy_out=deg
  +step +proj=axisswap +order=2,1

So chaining:
- Helmert between WGS 84 and NAD83(HARN) done in 3D. The remarks of this 
transformation mention that it comes from 'ITRF96 to NAD83(CORS96) (1)'  
"ignoring time-dependent parameters and assuming ITRF96(1997.0) and WGS 84, 
plus NAD83(CORS96) and NAD83(HARN), can be considered the same within the 
accuracy of the transformation"
- NAD83(HARN) to NAVD88 height (8) using Geoid1999
- NAD83 to NAD83(HARN) (46) using NADCON4 grid for Pennsylvania

This is convoluted and questionable. The irony is that we use Geoid1999, 
because the "NAD83 to NAVD88 height" transformations using Geoid2003 have been 
deprecated (probably because NAD83(86) ellipsoidal height is not defined. 
Those transformations using Geoid2003 have been superseded by one between 
NAD83(FBN) and NAVD88), so PROJ needs to find another datum that has 
transformations to NAVD88 

projinfo also proposes alternatives using NAD83(NSRS2007) instead of 
NAD83(HARN), and NAD83(NSRS2007) to NAVD88 height uses Geoid2009. But when 
PROJ "computes" the overall accuracy of that alternative, it is slightly worse 
than the one using NAD83(HARN) : 1.2m vs 1.1m ...

But as we've underlined, anything involving "WGS 84" datum ensemble to NAD83 
(something) is going to be fuzzily defined, since that WGS 84 is always 
approximated to another datum, and which datum it is approximated to isn't 
necessarily the same depending on the transformation.

> 
> > b) echo 40.69 -75.04 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:4152+5703 -d
> > 9> 
> >      40.689991800 -75.039998369 35.046181369
> 
> 4152 is NAD83(HARN). 
> It's a really good question what's going on here about different
> horizontal coords.

See above and my previous answer. There are 2 candidate transformations in 
EPSG between WGS 84 and NAD83(HARN). One that is a null transformation ("For 
many purposes NAD83(HARN) can be considered to be coincident with WGS 84.") 
and another one, used in the first step of a) that is a Helmert transformation 
coming from ITRF96 to NAD83(CORS96)

> > transformations between NAD83(HARN) and NAD83(2011)

> There should be a grid transform. See NCAT that I linked above.  It is
> entirely possible that this precision of NGS transform is not yet
> incorporated in proj. 

Yep, as mentionned in my previous email, NADCON5 grids which offer 
transformations between all successive "generations" of NAD83 are not yet 
used.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From gdt at lexort.com  Sat Oct 31 07:45:32 2020
From: gdt at lexort.com (Greg Troxel)
Date: Sat, 31 Oct 2020 10:45:32 -0400
Subject: [PROJ] Strange values with NAVD88
In-Reply-To: <29713347.yLgk3QNz6C@even-i700> (Even Rouault's message of "Sat, 
 31 Oct 2020 13:50:16 +0100")
References: <CADRrdKvEOrE7+z4sO9aEph6PpcYCs21Ae2BZCa6+Uof-hLx=_A@mail.gmail.com>
 <rmih7qbkwwh.fsf@s1.lexort.com> <29713347.yLgk3QNz6C@even-i700>
Message-ID: <rmi1rhejvxv.fsf@s1.lexort.com>


Stepping back, some complexities, some of which need to addressed with
EPSG (once someone(tm) has dug in enough to be sure what to ask for).  I
realize some of this has been discussed before; hoping it is helpful for
Javier.

  NADCON5 would be a big help.

  EPSG database currently seems to not include a number of NAD83ish
  things, including the notion that you can convert among any NAD83
  flavor with a null transform, and this conversion is better than any
  transform involving WGS84.

  The current NAD83 label is not obviously NAD83(1986), at least to
  people who are not already well read in NAD83.

  NAD83 isn't listed as a datum ensemble.

  It's not clear how a datum ensemble should be handled when there are
  2D and 3D CRSs in the same family.  Perhaps two of them, one 2D and
  one 3D.  Maybe NAD83 is the only ensemble that isn't all the same
  kind.

  Perhaps proj should somehow have a validity flag for the third
  coordinate and throw errors if someone provides coordinates with the
  third value present as an input for a CRS which is 2D.

  As discussed before, accuracy values for transforms in EPSG are
  imported into EPSG at face value, and thus cannot be compared against
  each other.  Doing this right is hard, but seems necessary for proj's
  transform-search approach to be sound.

  I realize proj doesn't really want to go down this path, but it would
  be nice to be able to have proj add transforms/etc. locally that
  aren't in EPSG but should be.  There's a "too much work" aspect, and
  then there's perhaps a licensing issue, perhaps not.


I will try to understand the "NAD83 in EPSG" situation once I get caught
up on proj updates in pkgsrc.  That's probably the best way to get
improvement for hours spent as a first step.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20201031/b4754d40/attachment.sig>

