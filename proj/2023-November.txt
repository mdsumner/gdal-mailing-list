From sgellrich at sensys.de  Fri Nov  3 08:32:04 2023
From: sgellrich at sensys.de (Sebastian Gellrich)
Date: Fri, 3 Nov 2023 15:32:04 +0000
Subject: [PROJ] Problems with transformations: projection could not be
 created and swapped axes with PJ_TYPE_VERTICAL_CRS
Message-ID: <aa348949989f4161876f5bc821bea4e5@sensys.de>

Hello PROJ9 Community,

I have 2 questions about transformations. First of all, I do not know one hundred percent about transformations.
I use a library I built myself for all possible Android platforms.
Now I am testing the library a little and have encountered the following problems:

1.
I get a list of all CRS (PJ_TYPE_CRS) with proj_get_crs_info_list_from_database(...).
For testing purposes, I then create a projection with all CRSs using proj_create_crs_to_crs(...), which I then normalize with
proj_normalize_for_visualization(...).
My source is always WGS84 (EPSG:4326).
With some projections I get the error "No inverse operation" (PROJ_ERR_OTHER_NO_INVERSE_OP) after calling proj_get_crs_info_list_from_database.
What does this mean? Can I somehow create this projection differently?
Example: EPSG:2218

With some CRS of type PJ_TYPE_VERTICAL_CRS I get the error code "Unknown error (code 4096)".
Here the error code tells me even less what the problem is.
Examples:           EPSG:5620
                               EPSG:6357 (here I also received the log message "pipeline: Pipeline: Mismatched units between step 3 and 4" from Proj9)

2.
When transforming to type PJ_TYPE_VERTICAL_CRS, the axes seem to be swapped in the result.
I used the same WGS84 coordinate for all tests (x=14, y=52, z=100 => Germany, Brandenburg).
The transformed coordinates were all x=52 and y=14. Is this intentional?
Some transformed coordinates also contained only Infinity.

Thanks in advance for your help.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231103/6b8d07e1/attachment.htm>

From Hunter1972 at mail.ru  Mon Nov 20 03:01:29 2023
From: Hunter1972 at mail.ru (Hunter1972)
Date: Mon, 20 Nov 2023 14:01:29 +0300
Subject: [PROJ] accuracy or conversion time limit
Message-ID: <733309592.20231120140129@mail.ru>

Hello!
Is it possible to specify accuracy of projection conversion or even better time limit for the operation?


From gdt at lexort.com  Mon Nov 20 04:30:59 2023
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 20 Nov 2023 07:30:59 -0500
Subject: [PROJ] accuracy or conversion time limit
In-Reply-To: <733309592.20231120140129@mail.ru> (Hunter's message of "Mon, 20
 Nov 2023 14:01:29 +0300")
References: <733309592.20231120140129@mail.ru>
Message-ID: <rmiil5wehdo.fsf@s1.lexort.com>

Hunter1972 via PROJ <proj at lists.osgeo.org> writes:

> Is it possible to specify accuracy of projection conversion or even
> better time limit for the operation?

Rather than asking an open-ended question what would leave people
guessing and using their time to give answers that are probably not on
point, could you explain

  what you are actually trying to do?

  what kinds of processing times are happening for your current use?

  what you have tried to do, based on having read the documentation?


From Jochem.Lesparre at kadaster.nl  Tue Nov 21 08:23:14 2023
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Tue, 21 Nov 2023 16:23:14 +0000
Subject: [PROJ] Horner polynomial evaluation
Message-ID: <AM0P192MB04820D7FD88DAC26042862FEEFBBA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Dear list members,

The implementation of +proj=horner is nice. I used it to reproduce a 99 year old polynomial transformation of an even older Dutch CRS published in 1827.  However, I encountered some problems with the documentation on https://proj.org/en/9.3/operations/transformations/horner.html. The order of the coefficients in the formulas and in the description of the PROJ parameters (+fwd_u and +fwd_u) seem mutually inconsistent.

Problem 1: The matrix formula (after formula 3) seems inconsistent with formula (1) and the actual implementation.


\begin{bmatrix}
     u_{0,1} + u_{0,2} U + ... & u_{1,0} + u_{1,1} U + u_{2,0} V + ... \\
     v_{1,0} + v_{1,1} V + v_{2,0} U + ... & v_{0,1} + v_{0,2} V \\
\end{bmatrix}

should be changed to:

\begin{bmatrix}
     u_{1,0} + u_{2,0} U + ... & u_{0,1} + u_{1,1} U + u_{0,2} V + ... \\
    v_{0,1} + v_{1,1} V + v_{0,2} U + ... & v_{1,0} + v_{2,0} V \\
\end{bmatrix}

Problem 2: The description of the parameters seems inconsistent with formula (1) and the actual implementation.

+fwd_u=<u_11,u_12,...,u_ij,..,u_mn>
and
+fwd_v=<v_11,v_12,...,v_ij,..,v_mn>

should be changed to:

+fwd_u=<u_00,u_10,...,u_ij,..,u_nn>
and
+fwd_v=<v_00,v_01,...,v_ij,..,v_nn>


As a result it was difficult to determine the correct order of the coefficients for +fwd_u and +fwd_v parameters. I think it would be clarifying to add a table for the order of the coefficients in the documentation (example for +deg=3):

Order of coefficients of +fwd_u:
    | x^0 | x^1 | x^2 | x^3
y^0 | 1   | 2   | 3   | 4
y^1 | 5   | 6   | 7   | -
y^2 | 8   | 9   | -   | -
y^3 | 10  | -   | -   | -

Order of coefficients of +fwd_v:
    | x^0 | x^1 | x^2 | x^3
y^0 | 1   | 5   | 8   | 10
y^1 | 2   | 6   | 9   | -
y^2 | 3   | 7   | -   | -
y^3 | 4   | -   | -   | -

Suggestion for a different implementation: Actually, I would have preferred a different order of the coefficients in the implementation, in a way that the order would be the same for +fwd_u and +fwd_v, and it would keep the first coefficients the same when increasing the degree (+deg) of the polynomial:

Order of coefficients of +fwd_u and +fwd_v:
    | x^0 | x^1 | x^2 | x^3
y^0 | 1   | 2   | 4   | 7
y^1 | 3   | 5   | 8   | -
y^2 | 6   | 9   | -   | -
y^3 | 10  | -   | -   | -

Regards, Jochem



Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231121/0ebbdc2b/attachment.htm>

From molnar at sas.elte.hu  Tue Nov 21 11:53:15 2023
From: molnar at sas.elte.hu (molnar)
Date: Tue, 21 Nov 2023 19:53:15 +0000
Subject: [PROJ] Horner polynomial evaluation
In-Reply-To: <AM0P192MB04820D7FD88DAC26042862FEEFBBA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB04820D7FD88DAC26042862FEEFBBA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <9c7ab2bbfd58f947e1db91caa78c82ba@sas.elte.hu>

Dear list members, Dear Jochem,

thanks for the detailed description, it would have been very useful for 
me two years ago, when I prepared a paper, where I used Horner 
Polynomials for transforming ellipsoidal coordinates to spherical 
coordinates.
The oblique Mercator projection used in Hungary (EOV, epsg:23700), is 
defined in GIS environment as Hotine (or Swiss) Oblique Mercator.  As it 
is a two-step projection, using the pipeline operator, an alternative 
method can be defined,that coincides the original definition of the 
projection: first ellipsoidal coordinates are transformed to spherical 
coordinates on the Gauss sphere (aposphere) and in the second step the 
spherical form of the oblique Mercator projection equations are applied 
on these spherical coordinates to get the projected coordinates.
The pipeline operator enables us to apply this two step method, and we 
wanted to use the Horner method, for the first step, to transform the 
ellipsoidal coordinates to spherical coordinates. (The coefficients were 
published in the standardization document, published in 1972, in the 
calculator era).
The manual of Horner Polynomial Evaluation on proj.org states, that both 
input and output coordinates can be either geodetic, either projected, 
but we could not apply the method on geodetic coordinates in a cct 
pipeline.
As a roundabout process, in the pipeline,
1:
the input geodetic coordinates were converted to fake 'projected' 
coordinates, using the
+step +proj=eqc +a=57.295779513082323
that literally does not change(!) the figures, but proj regards the 
output as projected coordinates. The equidistant cylindrical projection 
with +a=57.29... Earth radius ('a' is actually 1 radian in degrees) 
converts 47 degree North latitude and 19 degree East longitude to 47 
meter Northings, and 19 meter Eastings...
2:
We used Horner Polynomial Evolution to modify the coordinates. Proj 
believes that it transforms projected coordinates to projected 
coordinates.
3:
We used the inverse projection, to get ellipsoidal (actually spherical) 
coordinates:
+step +proj=eqc +a=57.295779513082323 +inv
and we finally used the spherical form of the oblique Mercator 
projection.

The details are in the paper:
https://www.fig.net/resources/proceedings/fig_proceedings/fig2022/papers/ts01c/TS01C_molnar_toth_11649.pdf

Regards, Gabor



On 2023-11-21 16:23, Lesparre, Jochem via PROJ wrote:
> Dear list members,
> 
> The implementation of +proj=horner is nice. I used it to reproduce a
> 99 year old polynomial transformation of an even older Dutch CRS
> published in 1827.  However, I encountered some problems with the
> documentation on
> https://proj.org/en/9.3/operations/transformations/horner.html. The
> order of the coefficients in the formulas and in the description of
> the PROJ parameters (+fwd_u and +fwd_u) seem mutually inconsistent.
> 
> PROBLEM 1: The matrix formula (after formula 3) seems inconsistent
> with formula (1) and the actual implementation.
> 
> \begin{bmatrix}
> 
>      u_{0,1} + u_{0,2} U + ... & u_{1,0} + u_{1,1} U + u_{2,0} V + ...
> \\
> 
>      v_{1,0} + v_{1,1} V + v_{2,0} U + ... & v_{0,1} + v_{0,2} V \\
> 
> \end{bmatrix}
> 
> should be changed to:
> 
> \begin{bmatrix}
> 
>      u_{1,0} + u_{2,0} U + ... & u_{0,1} + u_{1,1} U + u_{0,2} V + ...
> \\
> 
>     v_{0,1} + v_{1,1} V + v_{0,2} U + ... & v_{1,0} + v_{2,0} V \\
> 
> \end{bmatrix}
> 
> PROBLEM 2: The description of the parameters seems inconsistent with
> formula (1) and the actual implementation.
> 
> +fwd_u=<u_11,u_12,...,u_ij,..,u_mn>
> 
> and
> 
> +fwd_v=<v_11,v_12,...,v_ij,..,v_mn>
> 
> should be changed to:
> 
> +fwd_u=<u_00,u_10,...,u_ij,..,u_nn>
> 
> and
> 
> +fwd_v=<v_00,v_01,...,v_ij,..,v_nn>
> 
> As a result it was difficult to determine the correct order of the
> coefficients for +fwd_u and +fwd_v parameters. I think it would be
> clarifying to add a table for the order of the coefficients in the
> documentation (example for +deg=3):
> 
> Order of coefficients of +fwd_u:
> 
>     | x^0 | x^1 | x^2 | x^3
> 
> y^0 | 1   | 2   | 3   | 4
> 
> y^1 | 5   | 6   | 7   | -
> 
> y^2 | 8   | 9   | -   | -
> 
> y^3 | 10  | -   | -   | -
> 
> Order of coefficients of +fwd_v:
> 
>     | x^0 | x^1 | x^2 | x^3
> 
> y^0 | 1   | 5   | 8   | 10
> 
> y^1 | 2   | 6   | 9   | -
> 
> y^2 | 3   | 7   | -   | -
> 
> y^3 | 4   | -   | -   | -
> 
> SUGGESTION FOR A DIFFERENT IMPLEMENTATION: Actually, I would have
> preferred a different order of the coefficients in the implementation,
> in a way that the order would be the same for +fwd_u and +fwd_v, and
> it would keep the first coefficients the same when increasing the
> degree (+deg) of the polynomial:
> 
> Order of coefficients of +fwd_u and +fwd_v:
> 
>     | x^0 | x^1 | x^2 | x^3
> 
> y^0 | 1   | 2   | 4   | 7
> 
> y^1 | 3   | 5   | 8   | -
> 
> y^2 | 6   | 9   | -   | -
> 
> y^3 | 10  | -   | -   | -
> 
> Regards, Jochem
> 
> Disclaimer:
> De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor
> de geadresseerde(n).
> Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of
> verstrekking van deze informatie aan derden is niet toegestaan.
> Op al onze producten en diensten zijn onze algemene
> leveringsvoorwaarden van toepassing
> [https://www.kadaster.nl/algemene-leveringsvoorwaarden].
> 
> Disclaimer:
> This email and any files transmitted with it are confidential and
> intended solely for the use of the individual or entity to whom they
> are addressed.
> If you are not the intended recipient, you are notified that
> disclosing, copying, distributing or taking any action in reliance on
> the contents of this information is strictly prohibited.
> Our general terms and conditions of delivery apply to all our products
> and services
> [https://www.kadaster.com/general-terms-and-conditions].
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Tue Nov 21 12:24:26 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 21 Nov 2023 21:24:26 +0100
Subject: [PROJ] Horner polynomial evaluation
In-Reply-To: <9c7ab2bbfd58f947e1db91caa78c82ba@sas.elte.hu>
References: <AM0P192MB04820D7FD88DAC26042862FEEFBBA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <9c7ab2bbfd58f947e1db91caa78c82ba@sas.elte.hu>
Message-ID: <912ec329-64b7-48cb-b234-506380c5d3a9@spatialys.com>

Gabor,

too bad you didn't raise this issue about working with geographic 
coordinates before implementing the workaround. The fix to allow them is 
really trivial: https://github.com/OSGeo/PROJ/pull/3960

Even

Le 21/11/2023 ? 20:53, molnar via PROJ a ?crit?:
> Dear list members, Dear Jochem,
>
> thanks for the detailed description, it would have been very useful 
> for me two years ago, when I prepared a paper, where I used Horner 
> Polynomials for transforming ellipsoidal coordinates to spherical 
> coordinates.
> The oblique Mercator projection used in Hungary (EOV, epsg:23700), is 
> defined in GIS environment as Hotine (or Swiss) Oblique Mercator.? As 
> it is a two-step projection, using the pipeline operator, an 
> alternative method can be defined,that coincides the original 
> definition of the projection: first ellipsoidal coordinates are 
> transformed to spherical coordinates on the Gauss sphere (aposphere) 
> and in the second step the spherical form of the oblique Mercator 
> projection equations are applied on these spherical coordinates to get 
> the projected coordinates.
> The pipeline operator enables us to apply this two step method, and we 
> wanted to use the Horner method, for the first step, to transform the 
> ellipsoidal coordinates to spherical coordinates. (The coefficients 
> were published in the standardization document, published in 1972, in 
> the calculator era).
> The manual of Horner Polynomial Evaluation on proj.org states, that 
> both input and output coordinates can be either geodetic, either 
> projected, but we could not apply the method on geodetic coordinates 
> in a cct pipeline.
> As a roundabout process, in the pipeline,
> 1:
> the input geodetic coordinates were converted to fake 'projected' 
> coordinates, using the
> +step +proj=eqc +a=57.295779513082323
> that literally does not change(!) the figures, but proj regards the 
> output as projected coordinates. The equidistant cylindrical 
> projection with +a=57.29... Earth radius ('a' is actually 1 radian in 
> degrees) converts 47 degree North latitude and 19 degree East 
> longitude to 47 meter Northings, and 19 meter Eastings...
> 2:
> We used Horner Polynomial Evolution to modify the coordinates. Proj 
> believes that it transforms projected coordinates to projected 
> coordinates.
> 3:
> We used the inverse projection, to get ellipsoidal (actually 
> spherical) coordinates:
> +step +proj=eqc +a=57.295779513082323 +inv
> and we finally used the spherical form of the oblique Mercator 
> projection.
>
> The details are in the paper:
> https://www.fig.net/resources/proceedings/fig_proceedings/fig2022/papers/ts01c/TS01C_molnar_toth_11649.pdf 
>
>
> Regards, Gabor
>
>
>
> On 2023-11-21 16:23, Lesparre, Jochem via PROJ wrote:
>> Dear list members,
>>
>> The implementation of +proj=horner is nice. I used it to reproduce a
>> 99 year old polynomial transformation of an even older Dutch CRS
>> published in 1827.? However, I encountered some problems with the
>> documentation on
>> https://proj.org/en/9.3/operations/transformations/horner.html. The
>> order of the coefficients in the formulas and in the description of
>> the PROJ parameters (+fwd_u and +fwd_u) seem mutually inconsistent.
>>
>> PROBLEM 1: The matrix formula (after formula 3) seems inconsistent
>> with formula (1) and the actual implementation.
>>
>> \begin{bmatrix}
>>
>> ???? u_{0,1} + u_{0,2} U + ... & u_{1,0} + u_{1,1} U + u_{2,0} V + ...
>> \\
>>
>> ???? v_{1,0} + v_{1,1} V + v_{2,0} U + ... & v_{0,1} + v_{0,2} V \\
>>
>> \end{bmatrix}
>>
>> should be changed to:
>>
>> \begin{bmatrix}
>>
>> ???? u_{1,0} + u_{2,0} U + ... & u_{0,1} + u_{1,1} U + u_{0,2} V + ...
>> \\
>>
>> ??? v_{0,1} + v_{1,1} V + v_{0,2} U + ... & v_{1,0} + v_{2,0} V \\
>>
>> \end{bmatrix}
>>
>> PROBLEM 2: The description of the parameters seems inconsistent with
>> formula (1) and the actual implementation.
>>
>> +fwd_u=<u_11,u_12,...,u_ij,..,u_mn>
>>
>> and
>>
>> +fwd_v=<v_11,v_12,...,v_ij,..,v_mn>
>>
>> should be changed to:
>>
>> +fwd_u=<u_00,u_10,...,u_ij,..,u_nn>
>>
>> and
>>
>> +fwd_v=<v_00,v_01,...,v_ij,..,v_nn>
>>
>> As a result it was difficult to determine the correct order of the
>> coefficients for +fwd_u and +fwd_v parameters. I think it would be
>> clarifying to add a table for the order of the coefficients in the
>> documentation (example for +deg=3):
>>
>> Order of coefficients of +fwd_u:
>>
>> ??? | x^0 | x^1 | x^2 | x^3
>>
>> y^0 | 1?? | 2?? | 3?? | 4
>>
>> y^1 | 5?? | 6?? | 7?? | -
>>
>> y^2 | 8?? | 9?? | -?? | -
>>
>> y^3 | 10? | -?? | -?? | -
>>
>> Order of coefficients of +fwd_v:
>>
>> ??? | x^0 | x^1 | x^2 | x^3
>>
>> y^0 | 1?? | 5?? | 8?? | 10
>>
>> y^1 | 2?? | 6?? | 9?? | -
>>
>> y^2 | 3?? | 7?? | -?? | -
>>
>> y^3 | 4?? | -?? | -?? | -
>>
>> SUGGESTION FOR A DIFFERENT IMPLEMENTATION: Actually, I would have
>> preferred a different order of the coefficients in the implementation,
>> in a way that the order would be the same for +fwd_u and +fwd_v, and
>> it would keep the first coefficients the same when increasing the
>> degree (+deg) of the polynomial:
>>
>> Order of coefficients of +fwd_u and +fwd_v:
>>
>> ??? | x^0 | x^1 | x^2 | x^3
>>
>> y^0 | 1?? | 2?? | 4?? | 7
>>
>> y^1 | 3?? | 5?? | 8?? | -
>>
>> y^2 | 6?? | 9?? | -?? | -
>>
>> y^3 | 10? | -?? | -?? | -
>>
>> Regards, Jochem
>>
>> Disclaimer:
>> De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor
>> de geadresseerde(n).
>> Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of
>> verstrekking van deze informatie aan derden is niet toegestaan.
>> Op al onze producten en diensten zijn onze algemene
>> leveringsvoorwaarden van toepassing
>> [https://www.kadaster.nl/algemene-leveringsvoorwaarden].
>>
>> Disclaimer:
>> This email and any files transmitted with it are confidential and
>> intended solely for the use of the individual or entity to whom they
>> are addressed.
>> If you are not the intended recipient, you are notified that
>> disclosing, copying, distributing or taking any action in reliance on
>> the contents of this information is strictly prohibited.
>> Our general terms and conditions of delivery apply to all our products
>> and services
>> [https://www.kadaster.com/general-terms-and-conditions].
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From kristianevers at gmail.com  Sun Nov 26 08:48:36 2023
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 26 Nov 2023 17:48:36 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
Message-ID: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>

All,

It?s time for another round of releases, so in preparation for the final packages I have uploaded
 release candidates for PROJ and PROJ-data. Download the archives here:

https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
https://download.osgeo.org/proj/proj-9.3.1RC1.zip 
  
https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
https://download.osgeo.org/proj/proj-data-1.16RC1.zip

The PROJ release includes updates to the database contents and bug fixes. See the release notes below. 
The PROJ-data release adds the German geoid model GCG2016.

Please test the release candidates and report any issues you may find with them. Either here
on the mailing list or on GitHub.

/Kristian

???????

9.3.1 Release Notes
-------------------

 Updates
 -------

 o Update to EPSG 10.098 (#3968)

 o Update ESRI objects to v3.2.0 (#3944)

 Bug fixes
 ---------

 o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T  (#3870)

 o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)

 o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to unknown (#3874)

 o CoordinateOperationFactory: deal with CompoundToCompound with a horizontal similarity
   transformation and a ballpark vertical (#3881)

 o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major axis A (and
   non-zero inv flattening) isn't equivalent to a sphere of radius A (#3882)

 o isEquivalentTo(): make a datum name 'unknown' equivalent to another one (#3883)

 o cs2cs: fix handling of input coordinates in grad (#3886)

 o Make setargv.obj available on Universal Windows Platform (#3891)

 o Allow opening proj.db with a URI (#3892)

 o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS (#3915)

 o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)

 o GeographicBoundingBox::intersects(): avoid infinite recursion and stack overflow
   on invalid bounding boxes (#3919)

 o Fix importing '+proj=topocentric ... +type=crs' by using a geocentric CRS as
   the base CRS (#3924)

 o Allow LOCAL_CS with 3 axes (#3928)

 o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS, GEOCCS,
   PROJCS and VERT_CS elements (#3933)

 o createOperations(): fix issue with a obscure case involving CompoundCRS of
   unknown horizontal datum + boundCRS of vertical (#3934)

 o createOperations(): fix bad PROJ pipeline when converting between Geog3D
   with non-metre height to CompoundCRS (#3943)

 o createOperations(): Fix possible null dereference on invalid WKT input (#3946)

 o proj_factor: fix when input is a compound CRS of a projected CRS (#3950)

 o pj_get_suggested_operation(): tune it to give correct result for RGAF09 to
   RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation (#3954)

 o Move static NameSpace::GLOBAL definition in static.cpp to avoid
  'static initialization fiasco' (#3956)

 o horner: allow arbitrary input type of coordinate (#3961)


From even.rouault at spatialys.com  Sun Nov 26 11:01:41 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 26 Nov 2023 20:01:41 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
Message-ID: <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>

Hi Kristian,

The archives looks good to me.

Even

Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit?:
> All,
>
> It?s time for another round of releases, so in preparation for the final packages I have uploaded
>   release candidates for PROJ and PROJ-data. Download the archives here:
>
> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
> https://download.osgeo.org/proj/proj-9.3.1RC1.zip
>    
> https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
> https://download.osgeo.org/proj/proj-data-1.16RC1.zip
>
> The PROJ release includes updates to the database contents and bug fixes. See the release notes below.
> The PROJ-data release adds the German geoid model GCG2016.
>
> Please test the release candidates and report any issues you may find with them. Either here
> on the mailing list or on GitHub.
>
> /Kristian
>
> ???????
>
> 9.3.1 Release Notes
> -------------------
>
>   Updates
>   -------
>
>   o Update to EPSG 10.098 (#3968)
>
>   o Update ESRI objects to v3.2.0 (#3944)
>
>   Bug fixes
>   ---------
>
>   o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T  (#3870)
>
>   o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)
>
>   o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to unknown (#3874)
>
>   o CoordinateOperationFactory: deal with CompoundToCompound with a horizontal similarity
>     transformation and a ballpark vertical (#3881)
>
>   o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major axis A (and
>     non-zero inv flattening) isn't equivalent to a sphere of radius A (#3882)
>
>   o isEquivalentTo(): make a datum name 'unknown' equivalent to another one (#3883)
>
>   o cs2cs: fix handling of input coordinates in grad (#3886)
>
>   o Make setargv.obj available on Universal Windows Platform (#3891)
>
>   o Allow opening proj.db with a URI (#3892)
>
>   o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS (#3915)
>
>   o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
>
>   o GeographicBoundingBox::intersects(): avoid infinite recursion and stack overflow
>     on invalid bounding boxes (#3919)
>
>   o Fix importing '+proj=topocentric ... +type=crs' by using a geocentric CRS as
>     the base CRS (#3924)
>
>   o Allow LOCAL_CS with 3 axes (#3928)
>
>   o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS, GEOCCS,
>     PROJCS and VERT_CS elements (#3933)
>
>   o createOperations(): fix issue with a obscure case involving CompoundCRS of
>     unknown horizontal datum + boundCRS of vertical (#3934)
>
>   o createOperations(): fix bad PROJ pipeline when converting between Geog3D
>     with non-metre height to CompoundCRS (#3943)
>
>   o createOperations(): Fix possible null dereference on invalid WKT input (#3946)
>
>   o proj_factor: fix when input is a compound CRS of a projected CRS (#3950)
>
>   o pj_get_suggested_operation(): tune it to give correct result for RGAF09 to
>     RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation (#3954)
>
>   o Move static NameSpace::GLOBAL definition in static.cpp to avoid
>    'static initialization fiasco' (#3956)
>
>   o horner: allow arbitrary input type of coordinate (#3961)
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From even.rouault at spatialys.com  Mon Nov 27 08:03:46 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 27 Nov 2023 17:03:46 +0100
Subject: [PROJ] "Unity" builds
Message-ID: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>

Hi,

Few days ago I've proposed in https://github.com/OSGeo/PROJ/pull/3962 to 
add the capability to enable "unity" / "jumbo" builds (for the core 
library), through CMake's -DCMAKE_UNITY_BUILD=ON.

Basically CMake concatenates a few .cpp file until it generates a 
translation unit that is big enough but not too big. That can result in 
twice faster builds (at least for libproj, excluding tests or proj.db 
generation). But as code is not always ready to be concatenated with 
other files, I had to do quite a lot of changes for that (like making 
sure to #undef stuff at end of .cpp files, or that structures in 
anonymous namespaces or static functions have unique names), which by 
themselves should be harmless (and also makes it easier to debug, as 
instead of having >10 static setup() functions, they have a distinct 
name now) when doing regular builds.

But as discussed in the PR this feature isn't entirely riskless when 
enabled, so this capability is not enabled by default and there will be 
a note in the doc about that (cf my last comment in the PR).

That said, in some cases unity builds might be useful to uncover latent 
bugs (I've for example spotted that way a latent bug in GDAL where a 
file was relying on a undefined behaviour, and we were lucky compilers 
did compile it the way we intended it for regular builds), or identify 
some ODR (One Definition Rule) violations.

CI has a mix of non-unity and unity builds (most configs are already 
doing a shared and a static build. so typically one of them is done with 
a default build and the other one with a unity one)

Is there some agreement to merge that? (master only of course)

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From j1 at jimenezshaw.com  Mon Nov 27 08:43:34 2023
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Mon, 27 Nov 2023 17:43:34 +0100
Subject: [PROJ] "Unity" builds
In-Reply-To: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>
References: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>
Message-ID: <CADRrdKs8TN5xr_eDfUJz4yrE6=MqUZTrdexagjJgDm7NMTxJyQ@mail.gmail.com>

Hi Even

Thanks for the work. As you say, having the option is useful. It is true
that anonymous namespaces are not anonymous any more, but I hope it is not
big problem (you already suffered the consequences).
Mixing CI instances with and without it should cover all the cases.
(I am not a fan of unity, but I see it can be useful)

Note for developers: if the code compiles perfectly in your computer, but
some CI instances are complaining about duplicated symbols, function X
already defined or similar things, it can be unity.

For packagers: it is NOT recommended (AFAIK) to make a release with UNITY
option ON.

Cheers.

On Mon, 27 Nov 2023 at 17:03, Even Rouault via PROJ <proj at lists.osgeo.org>
wrote:

> Hi,
>
> Few days ago I've proposed in https://github.com/OSGeo/PROJ/pull/3962 to
> add the capability to enable "unity" / "jumbo" builds (for the core
> library), through CMake's -DCMAKE_UNITY_BUILD=ON.
>
> Basically CMake concatenates a few .cpp file until it generates a
> translation unit that is big enough but not too big. That can result in
> twice faster builds (at least for libproj, excluding tests or proj.db
> generation). But as code is not always ready to be concatenated with
> other files, I had to do quite a lot of changes for that (like making
> sure to #undef stuff at end of .cpp files, or that structures in
> anonymous namespaces or static functions have unique names), which by
> themselves should be harmless (and also makes it easier to debug, as
> instead of having >10 static setup() functions, they have a distinct
> name now) when doing regular builds.
>
> But as discussed in the PR this feature isn't entirely riskless when
> enabled, so this capability is not enabled by default and there will be
> a note in the doc about that (cf my last comment in the PR).
>
> That said, in some cases unity builds might be useful to uncover latent
> bugs (I've for example spotted that way a latent bug in GDAL where a
> file was relying on a undefined behaviour, and we were lucky compilers
> did compile it the way we intended it for regular builds), or identify
> some ODR (One Definition Rule) violations.
>
> CI has a mix of non-unity and unity builds (most configs are already
> doing a shared and a static build. so typically one of them is done with
> a default build and the other one with a unity one)
>
> Is there some agreement to merge that? (master only of course)
>
> Even
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231127/d7ddade4/attachment.htm>

From even.rouault at spatialys.com  Mon Nov 27 09:02:52 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 27 Nov 2023 18:02:52 +0100
Subject: [PROJ] "Unity" builds
In-Reply-To: <CADRrdKs8TN5xr_eDfUJz4yrE6=MqUZTrdexagjJgDm7NMTxJyQ@mail.gmail.com>
References: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>
 <CADRrdKs8TN5xr_eDfUJz4yrE6=MqUZTrdexagjJgDm7NMTxJyQ@mail.gmail.com>
Message-ID: <1d8759f9-20d3-44de-9aa8-0ef44f905328@spatialys.com>


Le 27/11/2023 ? 17:43, Javier Jimenez Shaw a ?crit?:
> Hi Even
>
> Thanks for the work. As you say, having the option is useful. It is 
> true that anonymous namespaces are not anonymous any more,

Depends on how you resolve the collisions, but the concept of anonymous 
namespace still exists

That is, you can't do anymore

a.cpp: namespace { struct foo{}; }
b.cpp: namespace { struct foo{}; }

But you can do:

a.cpp: namespace { struct foo{}; }
b.cpp: namespace { struct bar{}; }

Regarding to code external to PROJ, the anonymity is still preserved


-- 
http://www.spatialys.com
My software is free, but my time generally not.


From j1 at jimenezshaw.com  Mon Nov 27 10:10:10 2023
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Mon, 27 Nov 2023 19:10:10 +0100
Subject: [PROJ] "Unity" builds
In-Reply-To: <1d8759f9-20d3-44de-9aa8-0ef44f905328@spatialys.com>
References: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>
 <CADRrdKs8TN5xr_eDfUJz4yrE6=MqUZTrdexagjJgDm7NMTxJyQ@mail.gmail.com>
 <1d8759f9-20d3-44de-9aa8-0ef44f905328@spatialys.com>
Message-ID: <CADRrdKsQnKxm=hNEkn+=8GiJrxKhBFYGFzJxCG+08vs2othZ2g@mail.gmail.com>

Right.
Maybe I should say "unique" or "private" (... that is a reserved keyword),
because it may collide with another cpp when joined by unity, but they are
not exposed outside.

On Mon, 27 Nov 2023 at 18:02, Even Rouault <even.rouault at spatialys.com>
wrote:

>
> Le 27/11/2023 ? 17:43, Javier Jimenez Shaw a ?crit :
> > Hi Even
> >
> > Thanks for the work. As you say, having the option is useful. It is
> > true that anonymous namespaces are not anonymous any more,
>
> Depends on how you resolve the collisions, but the concept of anonymous
> namespace still exists
>
> That is, you can't do anymore
>
> a.cpp: namespace { struct foo{}; }
> b.cpp: namespace { struct foo{}; }
>
> But you can do:
>
> a.cpp: namespace { struct foo{}; }
> b.cpp: namespace { struct bar{}; }
>
> Regarding to code external to PROJ, the anonymity is still preserved
>
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231127/48da3031/attachment.htm>

From gdt at lexort.com  Mon Nov 27 10:41:57 2023
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 27 Nov 2023 13:41:57 -0500
Subject: [PROJ] "Unity" builds
In-Reply-To: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com> (Even
 Rouault via PROJ's message of "Mon, 27 Nov 2023 17:03:46 +0100")
References: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>
Message-ID: <rmi4jh7hwcq.fsf@s1.lexort.com>

Even Rouault via PROJ <proj at lists.osgeo.org> writes:

> Basically CMake concatenates a few .cpp file until it generates a
> translation unit that is big enough but not too big. That can result
> in twice faster builds (at least for libproj, excluding tests or
> proj.db generation). But as code is not always ready to be
> concatenated with other files, I had to do quite a lot of changes for
> that (like making sure to #undef stuff at end of .cpp files, or that
> structures in anonymous namespaces or static functions have unique
> names), which by themselves should be harmless (and also makes it
> easier to debug, as instead of having >10 static setup() functions,
> they have a distinct name now) when doing regular builds.

This strikes me as very strange, and a departure from the documented
semantics of the language.  Without thinking too much, I would be -1 on
committing workarounds to code to make this work, or support for it.
It feels like a lot of complexity for no real gain.

Assuming you have set up ccache if you are concerned about build times,
do you find that it's a real issue?

From even.rouault at spatialys.com  Mon Nov 27 11:02:35 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 27 Nov 2023 20:02:35 +0100
Subject: [PROJ] "Unity" builds
In-Reply-To: <rmi4jh7hwcq.fsf@s1.lexort.com>
References: <2739a1fa-8c80-4674-8fd6-b54cda53d297@spatialys.com>
 <rmi4jh7hwcq.fsf@s1.lexort.com>
Message-ID: <310dc783-f0c5-4c38-99f6-cfa87d439314@spatialys.com>


>    Without thinking too much, I would be -1 on
> committing workarounds to code to make this work, or support for it.
> It feels like a lot of complexity for no real gain.
We can always retract from them if they turn to be an inconvenience... 
The major inconvenience has been the effort to bootstrap that 
capability. I don't think the state of the codebase has been damaged in 
the process. Avoiding having functions or structures with the same name 
makes navigating the code base easier IMHO.

Mozilla supports both unity & non-unity builds. Actually in 
https://serge-sans-paille.github.io/pythran-stories/how-unity-builds-crept-into-the-firefox-build-system.html 
they mention that until recently, they only supported unity builds, and 
fixed stuff to support non-unity builds as well.

>
> Assuming you have set up ccache if you are concerned about build times,
> do you find that it's a real issue?

That can be convenient for developers touching "root" header files that 
trigger a full rebuild of the whole code base.

This was mostly an experiment on a "small" project to see if that 
produced actual speed-up. There real target I chased was for GDAL where 
build times are much longer than PROJ, and I got the same effects.

And as I mentioned unity builds can help uncover non-compliance.

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231127/daaccbe6/attachment.htm>

From Hunter1972 at mail.ru  Mon Nov 27 14:23:21 2023
From: Hunter1972 at mail.ru (Hunter1972)
Date: Tue, 28 Nov 2023 01:23:21 +0300
Subject: [PROJ] accuracy or project conversion
Message-ID: <1915743390.20231128012321@mail.ru>

Hello,
Is it possible to specify accuracy of project conversion between different CRS?
In particular I am interested in UTM <-> WGS84 conversion)routines to be much faster with lower accuracy (around 1m is enough).

Ravil


From even.rouault at spatialys.com  Mon Nov 27 14:29:24 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 27 Nov 2023 23:29:24 +0100
Subject: [PROJ] accuracy or project conversion
In-Reply-To: <1915743390.20231128012321@mail.ru>
References: <1915743390.20231128012321@mail.ru>
Message-ID: <fd158ceb-f3a2-4298-867f-bd902f789e8c@spatialys.com>

Hi,

look at the result of 
https://proj.org/en/9.3/search.html?q=accuracy&check_keywords=yes&area=default

However that will not help you for your need. The accuracy settings in 
the above functions is to have a "guaranteed" accuracy, but you the most 
precise coordinate operation in the candidates that match that accuracy. 
And this is mostly for transformations (datum shifts, etc.)

For your case where it is for a map projection, and for the very 
particular case of Transverse Mercator, you can use the +approx switch. 
Cf https://proj.org/en/9.3/operations/projections/utm.html . Can also be 
achieved with +algo=evenden_snyder mentioned just below.

Even

Le 27/11/2023 ? 23:23, Hunter1972 via PROJ a ?crit?:
> Hello,
> Is it possible to specify accuracy of project conversion between different CRS?
> In particular I am interested in UTM <-> WGS84 conversion)routines to be much faster with lower accuracy (around 1m is enough).
>
> Ravil
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231127/59dd1120/attachment.htm>

From kristianevers at gmail.com  Thu Nov 30 21:53:35 2023
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 1 Dec 2023 06:53:35 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
Message-ID: <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>

PSC members,

No issues have been reported with the two release candidates so I motion that they
are promoted to final releases. 

I?ll start with my +1.

/Kristian

> On 26 Nov 2023, at 20.01, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Hi Kristian,
> 
> The archives looks good to me.
> 
> Even
> 
> Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit :
>> All,
>> 
>> It?s time for another round of releases, so in preparation for the final packages I have uploaded
>>  release candidates for PROJ and PROJ-data. Download the archives here:
>> 
>> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
>> https://download.osgeo.org/proj/proj-9.3.1RC1.zip
>>   https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
>> https://download.osgeo.org/proj/proj-data-1.16RC1.zip
>> 
>> The PROJ release includes updates to the database contents and bug fixes. See the release notes below.
>> The PROJ-data release adds the German geoid model GCG2016.
>> 
>> Please test the release candidates and report any issues you may find with them. Either here
>> on the mailing list or on GitHub.
>> 
>> /Kristian
>> 
>> ???????
>> 
>> 9.3.1 Release Notes
>> -------------------
>> 
>>  Updates
>>  -------
>> 
>>  o Update to EPSG 10.098 (#3968)
>> 
>>  o Update ESRI objects to v3.2.0 (#3944)
>> 
>>  Bug fixes
>>  ---------
>> 
>>  o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T  (#3870)
>> 
>>  o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)
>> 
>>  o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to unknown (#3874)
>> 
>>  o CoordinateOperationFactory: deal with CompoundToCompound with a horizontal similarity
>>    transformation and a ballpark vertical (#3881)
>> 
>>  o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major axis A (and
>>    non-zero inv flattening) isn't equivalent to a sphere of radius A (#3882)
>> 
>>  o isEquivalentTo(): make a datum name 'unknown' equivalent to another one (#3883)
>> 
>>  o cs2cs: fix handling of input coordinates in grad (#3886)
>> 
>>  o Make setargv.obj available on Universal Windows Platform (#3891)
>> 
>>  o Allow opening proj.db with a URI (#3892)
>> 
>>  o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS (#3915)
>> 
>>  o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
>> 
>>  o GeographicBoundingBox::intersects(): avoid infinite recursion and stack overflow
>>    on invalid bounding boxes (#3919)
>> 
>>  o Fix importing '+proj=topocentric ... +type=crs' by using a geocentric CRS as
>>    the base CRS (#3924)
>> 
>>  o Allow LOCAL_CS with 3 axes (#3928)
>> 
>>  o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS, GEOCCS,
>>    PROJCS and VERT_CS elements (#3933)
>> 
>>  o createOperations(): fix issue with a obscure case involving CompoundCRS of
>>    unknown horizontal datum + boundCRS of vertical (#3934)
>> 
>>  o createOperations(): fix bad PROJ pipeline when converting between Geog3D
>>    with non-metre height to CompoundCRS (#3943)
>> 
>>  o createOperations(): Fix possible null dereference on invalid WKT input (#3946)
>> 
>>  o proj_factor: fix when input is a compound CRS of a projected CRS (#3950)
>> 
>>  o pj_get_suggested_operation(): tune it to give correct result for RGAF09 to
>>    RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation (#3954)
>> 
>>  o Move static NameSpace::GLOBAL definition in static.cpp to avoid
>>   'static initialization fiasco' (#3956)
>> 
>>  o horner: allow arbitrary input type of coordinate (#3961)
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> 
> -- 
> http://www.spatialys.com
> My software is free, but my time generally not.
> 


From knudsen.thomas at gmail.com  Thu Nov 30 22:18:55 2023
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 1 Dec 2023 07:18:55 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
 <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
Message-ID: <CAH0YoEONNyWFN_huo7Qawx7Tieu2_2pjjUhR3Vv8DfyV+pb2og@mail.gmail.com>

+1 /Thomas

fre. 1. dec. 2023 06.53 skrev Kristian Evers via PROJ <proj at lists.osgeo.org
>:

> PSC members,
>
> No issues have been reported with the two release candidates so I motion
> that they
> are promoted to final releases.
>
> I?ll start with my +1.
>
> /Kristian
>
> > On 26 Nov 2023, at 20.01, Even Rouault <even.rouault at spatialys.com>
> wrote:
> >
> > Hi Kristian,
> >
> > The archives looks good to me.
> >
> > Even
> >
> > Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit :
> >> All,
> >>
> >> It?s time for another round of releases, so in preparation for the
> final packages I have uploaded
> >>  release candidates for PROJ and PROJ-data. Download the archives here:
> >>
> >> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
> >> https://download.osgeo.org/proj/proj-9.3.1RC1.zip
> >>   https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
> >> https://download.osgeo.org/proj/proj-data-1.16RC1.zip
> >>
> >> The PROJ release includes updates to the database contents and bug
> fixes. See the release notes below.
> >> The PROJ-data release adds the German geoid model GCG2016.
> >>
> >> Please test the release candidates and report any issues you may find
> with them. Either here
> >> on the mailing list or on GitHub.
> >>
> >> /Kristian
> >>
> >> ???????
> >>
> >> 9.3.1 Release Notes
> >> -------------------
> >>
> >>  Updates
> >>  -------
> >>
> >>  o Update to EPSG 10.098 (#3968)
> >>
> >>  o Update ESRI objects to v3.2.0 (#3944)
> >>
> >>  Bug fixes
> >>  ---------
> >>
> >>  o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T
> (#3870)
> >>
> >>  o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)
> >>
> >>  o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to
> unknown (#3874)
> >>
> >>  o CoordinateOperationFactory: deal with CompoundToCompound with a
> horizontal similarity
> >>    transformation and a ballpark vertical (#3881)
> >>
> >>  o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major
> axis A (and
> >>    non-zero inv flattening) isn't equivalent to a sphere of radius A
> (#3882)
> >>
> >>  o isEquivalentTo(): make a datum name 'unknown' equivalent to another
> one (#3883)
> >>
> >>  o cs2cs: fix handling of input coordinates in grad (#3886)
> >>
> >>  o Make setargv.obj available on Universal Windows Platform (#3891)
> >>
> >>  o Allow opening proj.db with a URI (#3892)
> >>
> >>  o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS
> (#3915)
> >>
> >>  o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
> >>
> >>  o GeographicBoundingBox::intersects(): avoid infinite recursion and
> stack overflow
> >>    on invalid bounding boxes (#3919)
> >>
> >>  o Fix importing '+proj=topocentric ... +type=crs' by using a
> geocentric CRS as
> >>    the base CRS (#3924)
> >>
> >>  o Allow LOCAL_CS with 3 axes (#3928)
> >>
> >>  o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS,
> GEOCCS,
> >>    PROJCS and VERT_CS elements (#3933)
> >>
> >>  o createOperations(): fix issue with a obscure case involving
> CompoundCRS of
> >>    unknown horizontal datum + boundCRS of vertical (#3934)
> >>
> >>  o createOperations(): fix bad PROJ pipeline when converting between
> Geog3D
> >>    with non-metre height to CompoundCRS (#3943)
> >>
> >>  o createOperations(): Fix possible null dereference on invalid WKT
> input (#3946)
> >>
> >>  o proj_factor: fix when input is a compound CRS of a projected CRS
> (#3950)
> >>
> >>  o pj_get_suggested_operation(): tune it to give correct result for
> RGAF09 to
> >>    RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation
> (#3954)
> >>
> >>  o Move static NameSpace::GLOBAL definition in static.cpp to avoid
> >>   'static initialization fiasco' (#3956)
> >>
> >>  o horner: allow arbitrary input type of coordinate (#3961)
> >>
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> >
> > --
> > http://www.spatialys.com
> > My software is free, but my time generally not.
> >
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231201/d063262a/attachment.htm>

