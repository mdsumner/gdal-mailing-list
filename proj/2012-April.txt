From Lance.Wellspring at Woolpert.com  Thu Apr  5 07:25:10 2012
From: Lance.Wellspring at Woolpert.com (Wellspring, Lance)
Date: Thu, 5 Apr 2012 14:25:10 +0000
Subject: [Proj] building proj4
Message-ID: <78B20FDA1E618147AD02DDF0FB3C585A16BB306C@AD40EXCH2.woolpertinc.local>

Hello all,

I needed a 64 bit version of proj4 and was able to build it from source on Win7 using the VS 2010 command line compiler.  My application then successfully used this custom build.

However, I now have a need to build proj4 using Intel Integrated Performance Primitives (IPP).  This basically entails changing all uses of 'cl' to 'icl', and uses of 'link' to 'xilink', and then of course adding whatever options I need.  Intel IPP works basically as a plugin to VS 2010 (as I'm using it), adding an Intel compiler mode to the VS 2010 command line compiler.

My problem is  even though I changed all uses of 'cl' to 'icl' in 'Proj\src\makefile.vc', when calling 'nmake /f Proj\makefile.vc' it still uses 'cl' in some cases.  I cannot seem to find where these additional 'cl' calls are being made from so that I can change them.  Here is the initial output of the build, where the first rogue 'cl' is called:

C:\PROJ\proj-4.8.0>nmake /f makefile.vc

Microsoft (R) Program Maintenance Utility Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

        cd src
        nmake /f makefile.vc

Microsoft (R) Program Maintenance Utility Version 10.00.30319.01
Copyright (C) Microsoft Corporation.  All rights reserved.

        cl /nologo -I. -DPROJ_LIB=\"C:\PROJ\SHARE\"  -DHAVE_STRERROR=1 /nologo /
MD /O2 /Oi /Ot /GS- /fp:precise /GA /QxSSE4.1 /Qipo /c aasincos.c adjlon.c bch2b
ps.c bchgen.c pj_gauss.c biveval.c dmstor.c mk_cheby.c pj_auth.c pj_deriv.c pj_e
ll_set.c pj_ellps.c pj_errno.c pj_factors.c pj_fwd.c pj_init.c pj_inv.c pj_list.
c pj_malloc.c pj_mlfn.c pj_msfn.c pj_open_lib.c pj_param.c pj_phi2.c pj_pr_list.
c pj_qsfn.c pj_strerrno.c pj_tsfn.c pj_units.c pj_zpoly1.c rtodms.c vector1.c pj
_release.c geocent.c pj_transform.c pj_datum_set.c pj_datums.c pj_apply_gridshif
t.c nad_cvt.c nad_init.c nad_intr.c pj_utils.c pj_gridlist.c pj_gridinfo.c proj_
mdist.c pj_mutex.c pj_initcache.c pj_ctx.c pj_log.c pj_apply_vgridshift.c PJ_bog
gs.c PJ_collg.c PJ_crast.c PJ_denoy.c PJ_eck1.c PJ_eck2.c PJ_eck3.c PJ_eck4.c PJ
_eck5.c PJ_fahey.c PJ_fouc_s.c PJ_gins8.c PJ_gn_sinu.c PJ_goode.c PJ_igh.c PJ_ha
tano.c PJ_loxim.c PJ_mbt_fps.c PJ_mbtfpp.c PJ_mbtfpq.c PJ_moll.c PJ_nell.c PJ_ne
ll_h.c PJ_putp2.c PJ_putp3.c PJ_putp4p.c PJ_putp5.c PJ_putp6.c PJ_robin.c PJ_sts
.c PJ_urm5.c PJ_urmfps.c PJ_wag2.c PJ_wag3.c PJ_wink1.c PJ_wink2.c PJ_isea.c PJ_
aeqd.c PJ_gnom.c PJ_laea.c PJ_mod_ster.c PJ_nsper.c PJ_nzmg.c PJ_ortho.c PJ_ster
e.c PJ_sterea.c proj_rouss.c PJ_aea.c PJ_bipc.c PJ_bonne.c PJ_eqdc.c PJ_imw_p.c
PJ_lcc.c PJ_poly.c PJ_rpoly.c PJ_sconics.c PJ_lcca.c PJ_cass.c PJ_cc.c PJ_cea.c
PJ_eqc.c PJ_gall.c PJ_labrd.c PJ_lsat.c PJ_merc.c PJ_mill.c PJ_ocea.c PJ_omerc.c
PJ_somerc.c PJ_tcc.c PJ_tcea.c PJ_tmerc.c PJ_geos.c PJ_gstmerc.c proj_etmerc.c
PJ_airy.c PJ_aitoff.c PJ_august.c PJ_bacon.c PJ_chamb.c PJ_hammer.c PJ_lagrng.c
PJ_larr.c PJ_lask.c PJ_nocol.c PJ_ob_tran.c PJ_oea.c PJ_tpeqd.c PJ_vandg.c PJ_va
ndg2.c PJ_vandg4.c PJ_wag7.c pj_latlong.c PJ_krovak.c pj_geocent.c PJ_healpix.c
PJ_natearth.c
cl : Command line warning D9002 : ignoring unknown option '/QxSSE4.1'
cl : Command line warning D9002 : ignoring unknown option '/Qipo'
aasincos.c
adjlon.c
bch2bps.c
...

The 'cd src' and call to 'nmake' are in the wrapper makefile.vc.  Next is some output from VS 2010.  After that is the rogue 'cl'.  The build goes on to do all the things that I expect, including the 'lib' and 'xilink' calls.  But I need the source files to be built with the 'icl' command, not 'cl'.  What am I missing?  Where is this 'cl' being called from?

Thanks for your time,
Lance
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20120405/07cb3819/attachment.html>

From EMiller at dfg.ca.gov  Thu Apr  5 08:47:05 2012
From: EMiller at dfg.ca.gov (Eric Miller)
Date: Thu, 5 Apr 2012 08:47:05 -0700
Subject: [Proj] building proj4
In-Reply-To: <78B20FDA1E618147AD02DDF0FB3C585A16BB306C@AD40EXCH2.woolpertinc.local>
References: <78B20FDA1E618147AD02DDF0FB3C585A16BB306C@AD40EXCH2.woolpertinc.local>
Message-ID: <4F7D5C09.95FD.00E4.1@dfg.ca.gov>

I think if you replace all "cl" and "link" commands in the makefiles with $(CC) and $(LINK), respectively, and then set the environment variables to "icl.exe" and "xilink.exe", respectively, then it should work.  The src/makefile.vc is relying on inference rules to create "azimuthal", "conic", etc.  So, to satisfy those build rules, nmake uses whatever $(CC) command is defined.
-- 

Eric G. Miller
Software Developer
CA Dept. of Fish & Game


>>> On 4/5/2012 at  7:25 AM, "Wellspring, Lance" <Lance.Wellspring at Woolpert.com>
wrote:
> Hello all,
> 
> I needed a 64 bit version of proj4 and was able to build it from source on 
> Win7 using the VS 2010 command line compiler.  My application then 
> successfully used this custom build.
> 
> However, I now have a need to build proj4 using Intel Integrated Performance 
> Primitives (IPP).  This basically entails changing all uses of 'cl' to 'icl', 
> and uses of 'link' to 'xilink', and then of course adding whatever options I 
> need.  Intel IPP works basically as a plugin to VS 2010 (as I'm using it), 
> adding an Intel compiler mode to the VS 2010 command line compiler.
> 
> My problem is  even though I changed all uses of 'cl' to 'icl' in 
> 'Proj\src\makefile.vc', when calling 'nmake /f Proj\makefile.vc' it still 
> uses 'cl' in some cases.  I cannot seem to find where these additional 'cl' 
> calls are being made from so that I can change them.  Here is the initial 
> output of the build, where the first rogue 'cl' is called:
> 
> C:\PROJ\proj-4.8.0>nmake /f makefile.vc
> 
> Microsoft (R) Program Maintenance Utility Version 10.00.30319.01
> Copyright (C) Microsoft Corporation.  All rights reserved.
> 
>         cd src
>         nmake /f makefile.vc
> 
> Microsoft (R) Program Maintenance Utility Version 10.00.30319.01
> Copyright (C) Microsoft Corporation.  All rights reserved.
> 
>         cl /nologo -I. -DPROJ_LIB=\"C:\PROJ\SHARE\"  -DHAVE_STRERROR=1 /nologo 
> /
> MD /O2 /Oi /Ot /GS- /fp:precise /GA /QxSSE4.1 /Qipo /c aasincos.c adjlon.c 
> bch2b
> ps.c bchgen.c pj_gauss.c biveval.c dmstor.c mk_cheby.c pj_auth.c pj_deriv.c 
> pj_e
> ll_set.c pj_ellps.c pj_errno.c pj_factors.c pj_fwd.c pj_init.c pj_inv.c 
> pj_list.
> c pj_malloc.c pj_mlfn.c pj_msfn.c pj_open_lib.c pj_param.c pj_phi2.c 
> pj_pr_list.
> c pj_qsfn.c pj_strerrno.c pj_tsfn.c pj_units.c pj_zpoly1.c rtodms.c 
> vector1.c pj
> _release.c geocent.c pj_transform.c pj_datum_set.c pj_datums.c 
> pj_apply_gridshif
> t.c nad_cvt.c nad_init.c nad_intr.c pj_utils.c pj_gridlist.c pj_gridinfo.c 
> proj_
> mdist.c pj_mutex.c pj_initcache.c pj_ctx.c pj_log.c pj_apply_vgridshift.c 
> PJ_bog
> gs.c PJ_collg.c PJ_crast.c PJ_denoy.c PJ_eck1.c PJ_eck2.c PJ_eck3.c 
> PJ_eck4.c PJ
> _eck5.c PJ_fahey.c PJ_fouc_s.c PJ_gins8.c PJ_gn_sinu.c PJ_goode.c PJ_igh.c 
> PJ_ha
> tano.c PJ_loxim.c PJ_mbt_fps.c PJ_mbtfpp.c PJ_mbtfpq.c PJ_moll.c PJ_nell.c 
> PJ_ne
> ll_h.c PJ_putp2.c PJ_putp3.c PJ_putp4p.c PJ_putp5.c PJ_putp6.c PJ_robin.c 
> PJ_sts
> .c PJ_urm5.c PJ_urmfps.c PJ_wag2.c PJ_wag3.c PJ_wink1.c PJ_wink2.c PJ_isea.c 
> PJ_
> aeqd.c PJ_gnom.c PJ_laea.c PJ_mod_ster.c PJ_nsper.c PJ_nzmg.c PJ_ortho.c 
> PJ_ster
> e.c PJ_sterea.c proj_rouss.c PJ_aea.c PJ_bipc.c PJ_bonne.c PJ_eqdc.c 
> PJ_imw_p.c
> PJ_lcc.c PJ_poly.c PJ_rpoly.c PJ_sconics.c PJ_lcca.c PJ_cass.c PJ_cc.c 
> PJ_cea.c
> PJ_eqc.c PJ_gall.c PJ_labrd.c PJ_lsat.c PJ_merc.c PJ_mill.c PJ_ocea.c 
> PJ_omerc.c
> PJ_somerc.c PJ_tcc.c PJ_tcea.c PJ_tmerc.c PJ_geos.c PJ_gstmerc.c 
> proj_etmerc.c
> PJ_airy.c PJ_aitoff.c PJ_august.c PJ_bacon.c PJ_chamb.c PJ_hammer.c 
> PJ_lagrng.c
> PJ_larr.c PJ_lask.c PJ_nocol.c PJ_ob_tran.c PJ_oea.c PJ_tpeqd.c PJ_vandg.c 
> PJ_va
> ndg2.c PJ_vandg4.c PJ_wag7.c pj_latlong.c PJ_krovak.c pj_geocent.c 
> PJ_healpix.c
> PJ_natearth.c
> cl : Command line warning D9002 : ignoring unknown option '/QxSSE4.1'
> cl : Command line warning D9002 : ignoring unknown option '/Qipo'
> aasincos.c
> adjlon.c
> bch2bps.c
> ...
> 
> The 'cd src' and call to 'nmake' are in the wrapper makefile.vc.  Next is 
> some output from VS 2010.  After that is the rogue 'cl'.  The build goes on 
> to do all the things that I expect, including the 'lib' and 'xilink' calls.  
> But I need the source files to be built with the 'icl' command, not 'cl'.  
> What am I missing?  Where is this 'cl' being called from?
> 
> Thanks for your time,
> Lance



From Lance.Wellspring at Woolpert.com  Thu Apr  5 08:59:26 2012
From: Lance.Wellspring at Woolpert.com (Wellspring, Lance)
Date: Thu, 5 Apr 2012 15:59:26 +0000
Subject: [Proj] building proj4
In-Reply-To: <4F7D5C09.95FD.00E4.1@dfg.ca.gov>
References: <78B20FDA1E618147AD02DDF0FB3C585A16BB306C@AD40EXCH2.woolpertinc.local>
	<4F7D5C09.95FD.00E4.1@dfg.ca.gov>
Message-ID: <78B20FDA1E618147AD02DDF0FB3C585A16BB348D@AD40EXCH2.woolpertinc.local>

That did the trick, thanks!

-----Original Message-----
From: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] On Behalf Of Eric Miller
Sent: Thursday, April 05, 2012 11:47 AM
To: proj at lists.maptools.org
Subject: Re: [Proj] building proj4

I think if you replace all "cl" and "link" commands in the makefiles with $(CC) and $(LINK), respectively, and then set the environment variables to "icl.exe" and "xilink.exe", respectively, then it should work.  The src/makefile.vc is relying on inference rules to create "azimuthal", "conic", etc.  So, to satisfy those build rules, nmake uses whatever $(CC) command is defined.
-- 

Eric G. Miller
Software Developer
CA Dept. of Fish & Game


>>> On 4/5/2012 at  7:25 AM, "Wellspring, Lance" 
>>> <Lance.Wellspring at Woolpert.com>
wrote:
> Hello all,
> 
> I needed a 64 bit version of proj4 and was able to build it from 
> source on
> Win7 using the VS 2010 command line compiler.  My application then 
> successfully used this custom build.
> 
> However, I now have a need to build proj4 using Intel Integrated 
> Performance Primitives (IPP).  This basically entails changing all 
> uses of 'cl' to 'icl', and uses of 'link' to 'xilink', and then of 
> course adding whatever options I need.  Intel IPP works basically as a 
> plugin to VS 2010 (as I'm using it), adding an Intel compiler mode to the VS 2010 command line compiler.
> 
> My problem is  even though I changed all uses of 'cl' to 'icl' in 
> 'Proj\src\makefile.vc', when calling 'nmake /f Proj\makefile.vc' it 
> still uses 'cl' in some cases.  I cannot seem to find where these additional 'cl'
> calls are being made from so that I can change them.  Here is the 
> initial output of the build, where the first rogue 'cl' is called:
> 
> C:\PROJ\proj-4.8.0>nmake /f makefile.vc
> 
> Microsoft (R) Program Maintenance Utility Version 10.00.30319.01 
> Copyright (C) Microsoft Corporation.  All rights reserved.
> 
>         cd src
>         nmake /f makefile.vc
> 
> Microsoft (R) Program Maintenance Utility Version 10.00.30319.01 
> Copyright (C) Microsoft Corporation.  All rights reserved.
> 
>         cl /nologo -I. -DPROJ_LIB=\"C:\PROJ\SHARE\"  -DHAVE_STRERROR=1 
> /nologo / MD /O2 /Oi /Ot /GS- /fp:precise /GA /QxSSE4.1 /Qipo /c 
> aasincos.c adjlon.c bch2b ps.c bchgen.c pj_gauss.c biveval.c dmstor.c 
> mk_cheby.c pj_auth.c pj_deriv.c pj_e ll_set.c pj_ellps.c pj_errno.c 
> pj_factors.c pj_fwd.c pj_init.c pj_inv.c pj_list.
> c pj_malloc.c pj_mlfn.c pj_msfn.c pj_open_lib.c pj_param.c pj_phi2.c 
> pj_pr_list.
> c pj_qsfn.c pj_strerrno.c pj_tsfn.c pj_units.c pj_zpoly1.c rtodms.c 
> vector1.c pj _release.c geocent.c pj_transform.c pj_datum_set.c 
> pj_datums.c pj_apply_gridshif t.c nad_cvt.c nad_init.c nad_intr.c 
> pj_utils.c pj_gridlist.c pj_gridinfo.c proj_ mdist.c pj_mutex.c 
> pj_initcache.c pj_ctx.c pj_log.c pj_apply_vgridshift.c PJ_bog gs.c 
> PJ_collg.c PJ_crast.c PJ_denoy.c PJ_eck1.c PJ_eck2.c PJ_eck3.c 
> PJ_eck4.c PJ _eck5.c PJ_fahey.c PJ_fouc_s.c PJ_gins8.c PJ_gn_sinu.c 
> PJ_goode.c PJ_igh.c PJ_ha tano.c PJ_loxim.c PJ_mbt_fps.c PJ_mbtfpp.c 
> PJ_mbtfpq.c PJ_moll.c PJ_nell.c PJ_ne ll_h.c PJ_putp2.c PJ_putp3.c 
> PJ_putp4p.c PJ_putp5.c PJ_putp6.c PJ_robin.c PJ_sts .c PJ_urm5.c 
> PJ_urmfps.c PJ_wag2.c PJ_wag3.c PJ_wink1.c PJ_wink2.c PJ_isea.c PJ_ 
> aeqd.c PJ_gnom.c PJ_laea.c PJ_mod_ster.c PJ_nsper.c PJ_nzmg.c 
> PJ_ortho.c PJ_ster e.c PJ_sterea.c proj_rouss.c PJ_aea.c PJ_bipc.c 
> PJ_bonne.c PJ_eqdc.c PJ_imw_p.c PJ_lcc.c PJ_poly.c PJ_rpoly.c 
> PJ_sconics.c PJ_lcca.c PJ_cass.c PJ_cc.c PJ_cea.c PJ_eqc.c PJ_gall.c 
> PJ_labrd.c PJ_lsat.c PJ_merc.c PJ_mill.c PJ_ocea.c PJ_omerc.c 
> PJ_somerc.c PJ_tcc.c PJ_tcea.c PJ_tmerc.c PJ_geos.c PJ_gstmerc.c 
> proj_etmerc.c PJ_airy.c PJ_aitoff.c PJ_august.c PJ_bacon.c PJ_chamb.c 
> PJ_hammer.c PJ_lagrng.c PJ_larr.c PJ_lask.c PJ_nocol.c PJ_ob_tran.c 
> PJ_oea.c PJ_tpeqd.c PJ_vandg.c PJ_va ndg2.c PJ_vandg4.c PJ_wag7.c 
> pj_latlong.c PJ_krovak.c pj_geocent.c PJ_healpix.c PJ_natearth.c cl : 
> Command line warning D9002 : ignoring unknown option '/QxSSE4.1'
> cl : Command line warning D9002 : ignoring unknown option '/Qipo'
> aasincos.c
> adjlon.c
> bch2bps.c
> ...
> 
> The 'cd src' and call to 'nmake' are in the wrapper makefile.vc.  Next 
> is some output from VS 2010.  After that is the rogue 'cl'.  The build 
> goes on to do all the things that I expect, including the 'lib' and 'xilink' calls.
> But I need the source files to be built with the 'icl' command, not 'cl'.  
> What am I missing?  Where is this 'cl' being called from?
> 
> Thanks for your time,
> Lance

_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj






From robert.p.fischer-1 at nasa.gov  Mon Apr  9 07:06:07 2012
From: robert.p.fischer-1 at nasa.gov (Bob Fischer)
Date: Mon, 9 Apr 2012 10:06:07 -0400
Subject: [Proj] False Easting & Northing for LAEA?
Message-ID: <4F82ECCF.8030902@nasa.gov>

Hello,

I'm pretty new to Proj.4.  I'm having a bit of trouble with false 
easting and northing.  See code below (using a simple C++ wrapper):

    const double D2R = M_PI / 180.0;

     double proj_lon_0 = -40;
     double proj_lat_0 = 74;
     char sproj[100];
     sprintf(sproj, "+proj=laea +lon_0=%f +lat_0=%f +x0=1000000 
+y0=1700000 +ellps=sphere",
         proj_lon_0, proj_lat_0);
     printf("Using projection: \"%s\"\n", sproj);
     Proj proj(sproj);
     printf("Using full projection: \"%s\"\n", proj.get_def().c_str());

The output is:

Using projection: "+proj=laea +lon_0=-40.000000 +lat_0=74.000000 
+x0=1000000 +y0=1700000 +ellps=sphere"
Using full projection: " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 
+ellps=sphere"

Note that my false easting/northing has been removed from my proj.4 
string!  The fact that no false easting/northing is being used is 
confirmed when I try to transform a point:

     double lon00 = -40;
     double lat00 = 74;
     double xp,yp;
     int err = transform(llproj, proj, lon00*D2R, lat00*D2R, xp, yp);
     printf("Proj.4 transform 00 -> (%f, %f) (err = %d)\n", xp, yp, err);

Output is:

   Proj.4 transform 00 -> (0.000000, -0.000000) (err = 0)

Any ideas on why I'm not getting a false easting/northing here?  I can 
certainly work around the problem, but it would be nice if it could work.

Thanks!
-- Bob

(C++ wrapper is included below, for reference)



/** C++ API for proj.4 Projection Library.
Copyright (c) 2012 by Robert Fischer: robert.fischer at nasa.gov
April 5, 2012

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/

#ifndef PROJPP_HPP
#define PROJPP_HPP

#include <proj_api.h>


#if 0
class ProjContext;

class ProjStatic {
public:
     ProjContext const defaultContext;

     ProjStatic();
};
extern ProjStatic projStatic;


class ProjContext {
     projCtx ctx;

public :


};

#endif

namespace giss {

class Proj {
     projPJ pj;

     explicit Proj(projPJ _pj) : pj(_pj) {}

public:
     friend int transform(Proj const &src, Proj const &dest,
         long point_count, int point_offset,
         double *x, double *y, double *z);


     // ------------------ Five Standard constructors/methods
     // See: http://www2.research.att.com/~bs/C++0xFAQ.html

     explicit Proj(std::string const &definition)
     {
         pj = pj_init_plus(definition.c_str());
         // pj_def = 0;
     }

     explicit Proj(char const *definition)
     {
         pj = pj_init_plus(definition);
     }

     ~Proj()
     {
         pj_free(pj);
         // if (pj_def) pj_dalloc(pj_def);
     }

     /** Transfer ownership */
     Proj(Proj&& h) : pj{h.pj} //, pj_def{h.pj_def}
     {
         h.pj = 0;
         // h.pj_def = 0;
     }

     /** Transfer value */
     Proj& operator=(Proj&& h) = delete;

     /** Copy constructor */
     Proj(const Proj &h)
     {
         char *pj_def = pj_get_def(h.pj, 0);
         pj = pj_init_plus(pj_def);
         pj_dalloc(pj_def);
     }

     // no copy with operator=()
     Proj& operator=(const Proj&) = delete;

     // --------------------------- Other Stuff


     /** Returns TRUE if the passed coordinate system is geographic
     (proj=latlong). */
     int is_latlong() const
         { return pj_is_latlong(pj); }


     /** Returns TRUE if the coordinate system is geocentric
     (proj=geocent). */
     int is_geocent() const
         { return pj_is_geocent(pj); }

     /** Returns the PROJ.4 initialization string suitable for use with
     pj_init_plus() that would produce this coordinate system, but with the
     definition expanded as much as possible (for instance +init= and
     +datum= definitions).
     @param options Unused at this point
     */
     std::string get_def(int options=0) const
     {
         char *pj_def = 0;
         pj_def = pj_get_def(pj, options);

         std::string ret = std::string(pj_def);
         pj_dalloc(pj_def);
         return ret;
     }


     /** Returns a new coordinate system definition which is the geographic
     coordinate (lat/long) system underlying pj_in. */
     Proj latlong_from_proj() const
     {
         return Proj(pj_latlong_from_proj(pj));
     }

};


inline int transform(Proj const &src, Proj const &dest,
     long point_count, int point_offset, double *x, double *y, double *z=0)
{
     return pj_transform(src.pj, dest.pj,
         point_count, point_offset, x, y, z);
}

inline int transform(Proj const &src, Proj const &dest,
     double x0, double y0, double &x1, double &y1)
{
     x1 = x0;
     y1 = y0;
     int ret = transform(src, dest, 1, 1, &x1, &y1);
     return ret;
}


}

#endif



From robert.p.fischer-1 at nasa.gov  Mon Apr  9 07:07:14 2012
From: robert.p.fischer-1 at nasa.gov (Bob Fischer)
Date: Mon, 9 Apr 2012 10:07:14 -0400
Subject: [Proj] False Easting & Northing for LAEA?
Message-ID: <4F82ED12.40406@nasa.gov>

Hello,

I'm pretty new to Proj.4.  I'm having a bit of trouble with false 
easting and northing.  See code below (using a simple C++ wrapper):

    const double D2R = M_PI / 180.0;

     double proj_lon_0 = -40;
     double proj_lat_0 = 74;
     char sproj[100];
     sprintf(sproj, "+proj=laea +lon_0=%f +lat_0=%f +x0=1000000 
+y0=1700000 +ellps=sphere",
         proj_lon_0, proj_lat_0);
     printf("Using projection: \"%s\"\n", sproj);
     Proj proj(sproj);
     printf("Using full projection: \"%s\"\n", proj.get_def().c_str());

The output is:

Using projection: "+proj=laea +lon_0=-40.000000 +lat_0=74.000000 
+x0=1000000 +y0=1700000 +ellps=sphere"
Using full projection: " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 
+ellps=sphere"

Note that my false easting/northing has been removed from my proj.4 
string!  The fact that no false easting/northing is being used is 
confirmed when I try to transform a point:

     double lon00 = -40;
     double lat00 = 74;
     double xp,yp;
     int err = transform(llproj, proj, lon00*D2R, lat00*D2R, xp, yp);
     printf("Proj.4 transform 00 -> (%f, %f) (err = %d)\n", xp, yp, err);

Output is:

   Proj.4 transform 00 -> (0.000000, -0.000000) (err = 0)

Any ideas on why I'm not getting a false easting/northing here?  I can 
certainly work around the problem, but it would be nice if it could work.

Thanks!
-- Bob

(C++ wrapper is included below, for reference)



/** C++ API for proj.4 Projection Library.
Copyright (c) 2012 by Robert Fischer: robert.fischer at nasa.gov
April 5, 2012

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/

#ifndef PROJPP_HPP
#define PROJPP_HPP

#include <proj_api.h>


#if 0
class ProjContext;

class ProjStatic {
public:
     ProjContext const defaultContext;

     ProjStatic();
};
extern ProjStatic projStatic;


class ProjContext {
     projCtx ctx;

public :


};

#endif

namespace giss {

class Proj {
     projPJ pj;

     explicit Proj(projPJ _pj) : pj(_pj) {}

public:
     friend int transform(Proj const &src, Proj const &dest,
         long point_count, int point_offset,
         double *x, double *y, double *z);


     // ------------------ Five Standard constructors/methods
     // See: http://www2.research.att.com/~bs/C++0xFAQ.html

     explicit Proj(std::string const &definition)
     {
         pj = pj_init_plus(definition.c_str());
         // pj_def = 0;
     }

     explicit Proj(char const *definition)
     {
         pj = pj_init_plus(definition);
     }

     ~Proj()
     {
         pj_free(pj);
         // if (pj_def) pj_dalloc(pj_def);
     }

     /** Transfer ownership */
     Proj(Proj&& h) : pj{h.pj} //, pj_def{h.pj_def}
     {
         h.pj = 0;
         // h.pj_def = 0;
     }

     /** Transfer value */
     Proj& operator=(Proj&& h) = delete;

     /** Copy constructor */
     Proj(const Proj &h)
     {
         char *pj_def = pj_get_def(h.pj, 0);
         pj = pj_init_plus(pj_def);
         pj_dalloc(pj_def);
     }

     // no copy with operator=()
     Proj& operator=(const Proj&) = delete;

     // --------------------------- Other Stuff


     /** Returns TRUE if the passed coordinate system is geographic
     (proj=latlong). */
     int is_latlong() const
         { return pj_is_latlong(pj); }


     /** Returns TRUE if the coordinate system is geocentric
     (proj=geocent). */
     int is_geocent() const
         { return pj_is_geocent(pj); }

     /** Returns the PROJ.4 initialization string suitable for use with
     pj_init_plus() that would produce this coordinate system, but with the
     definition expanded as much as possible (for instance +init= and
     +datum= definitions).
     @param options Unused at this point
     */
     std::string get_def(int options=0) const
     {
         char *pj_def = 0;
         pj_def = pj_get_def(pj, options);

         std::string ret = std::string(pj_def);
         pj_dalloc(pj_def);
         return ret;
     }


     /** Returns a new coordinate system definition which is the geographic
     coordinate (lat/long) system underlying pj_in. */
     Proj latlong_from_proj() const
     {
         return Proj(pj_latlong_from_proj(pj));
     }

};


inline int transform(Proj const &src, Proj const &dest,
     long point_count, int point_offset, double *x, double *y, double *z=0)
{
     return pj_transform(src.pj, dest.pj,
         point_count, point_offset, x, y, z);
}

inline int transform(Proj const &src, Proj const &dest,
     double x0, double y0, double &x1, double &y1)
{
     x1 = x0;
     y1 = y0;
     int ret = transform(src, dest, 1, 1, &x1, &y1);
     return ret;
}


}

#endif



From judd.t at orbitalsystems.com  Mon Apr  9 08:03:41 2012
From: judd.t at orbitalsystems.com (Judd Taylor)
Date: Mon, 9 Apr 2012 15:03:41 +0000
Subject: [Proj] [patch] add missing projects.h
In-Reply-To: <4F72D1BC.406@met.no>
References: <4F702350.1060107@mabrand.nl> <rmimx73d5rx.fsf@fnord.ir.bbn.com>
	<CABUeae-gwVdZCLtGAa0ZjHvmvwQAg_9b5VpLf-f3p8OsYRLuCQ@mail.gmail.com>
	<5C152703F0044DA0A38F456652726494@desktop2>
	<CA+YzLBfh2LoH8t6U2_4YoVD5PkB_7dz7k-jrRwKrhJfQOWfNBQ@mail.gmail.com>,
	<4F72D1BC.406@met.no>
Message-ID: <221EAA4EB25F1F478A01D2AEEF47AB362B2BA83C@Exch.qos.loc>

I'd like to add some information about the problem we're seeing with the missing projects.h file.

The code in question is a PDL (perl data language) binding to the Proj library written back in 2002 or 2003. This code uses projects.h to get the enumeration of the projections and their parameter for use in a code generator that writes the actual bindings and docs used for the interface.

As far as I know, this is not available through proj_api.h. I've not worked directly with Proj since the way back on version 4.4.7, when the above solution using projects.h was suggested on this list. Can anyone here confirm whether this functionality is present in the proj_api.h that ships with 4.8.0?

I'm specifically looking for the function pj_get_list_ref(), which is defined in projects.h.

Thanks,
    Judd


____________________________
Judd Taylor
Software Engineer

Orbital Systems, Ltd.
3807 Carbon Rd.
Irving, TX 75038-3415

judd.t at orbitalsystems.com
(972) 915-3669 x127

________________________________________
From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] on behalf of Heiko Klein [Heiko.Klein at met.no]
Sent: Wednesday, March 28, 2012 3:54 AM
To: PROJ.4 and general Projections Discussions
Subject: Re: [Proj] [patch] add missing projects.h

Hi Frank,

I agree that 11 years of deprecation are more than enough, but
deprecation usually means that the functionality is available elsewhere.
 From projects.h, e.g. pj_factors, is still not available through proj_api.h

What should I do with those functions which don't have an equivalent in
proj_api.h?

Heiko

On 2012-03-27 02:29, Frank Warmerdam wrote:
>
> Right, for several versions proj_api.h has been preferred to use
> of projects.h.
>
> The proj_api.h has existed for several versions; however, if you go
> back far enough there would be problems.  Checking back I see it
> was introduced 11 years ago.  I'm not exactly sure what version that
> would be but surely it is long enough for the deprecation of projects.h
> to finally result in it being removed from public installs.
>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From EMiller at dfg.ca.gov  Mon Apr  9 08:51:37 2012
From: EMiller at dfg.ca.gov (Eric Miller)
Date: Mon, 9 Apr 2012 08:51:37 -0700
Subject: [Proj] False Easting & Northing for LAEA?
In-Reply-To: <4F82ED12.40406@nasa.gov>
References: <4F82ED12.40406@nasa.gov>
Message-ID: <4F82A318.95FD.00E4.1@dfg.ca.gov>

I think you want "x_0" and "y_0".
-- 

Eric G. Miller
Software Developer
CA Dept. of Fish & Game


>>> On 4/9/2012 at  7:07 AM, Bob Fischer <robert.p.fischer-1 at nasa.gov> wrote:
> Hello,
> 
> I'm pretty new to Proj.4.  I'm having a bit of trouble with false 
> easting and northing.  See code below (using a simple C++ wrapper):
> 
>     const double D2R = M_PI / 180.0;
> 
>      double proj_lon_0 = -40;
>      double proj_lat_0 = 74;
>      char sproj[100];
>      sprintf(sproj, "+proj=laea +lon_0=%f +lat_0=%f +x0=1000000 
> +y0=1700000 +ellps=sphere",
>          proj_lon_0, proj_lat_0);
>      printf("Using projection: \"%s\"\n", sproj);
>      Proj proj(sproj);
>      printf("Using full projection: \"%s\"\n", proj.get_def().c_str());
> 
> The output is:
> 
> Using projection: "+proj=laea +lon_0=-40.000000 +lat_0=74.000000 
> +x0=1000000 +y0=1700000 +ellps=sphere"
> Using full projection: " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 
> +ellps=sphere"
> 
> Note that my false easting/northing has been removed from my proj.4 
> string!  The fact that no false easting/northing is being used is 
> confirmed when I try to transform a point:
> 
>      double lon00 = -40;
>      double lat00 = 74;
>      double xp,yp;
>      int err = transform(llproj, proj, lon00*D2R, lat00*D2R, xp, yp);
>      printf("Proj.4 transform 00 -> (%f, %f) (err = %d)\n", xp, yp, err);
> 
> Output is:
> 
>    Proj.4 transform 00 -> (0.000000, -0.000000) (err = 0)
> 
> Any ideas on why I'm not getting a false easting/northing here?  I can 
> certainly work around the problem, but it would be nice if it could work.
> 
> Thanks!
> -- Bob
> 
> (C++ wrapper is included below, for reference)
> 
> 
> 
> /** C++ API for proj.4 Projection Library.
> Copyright (c) 2012 by Robert Fischer: robert.fischer at nasa.gov 
> April 5, 2012
> 
>   Permission is hereby granted, free of charge, to any person obtaining a
>   copy of this software and associated documentation files (the "Software"),
>   to deal in the Software without restriction, including without limitation
>   the rights to use, copy, modify, merge, publish, distribute, sublicense,
>   and/or sell copies of the Software, and to permit persons to whom the
>   Software is furnished to do so, subject to the following conditions:
> 
>   The above copyright notice and this permission notice shall be included
>   in all copies or substantial portions of the Software.
> 
>   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
>   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
> MERCHANTABILITY,
>   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
>   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
>   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
>   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
>   DEALINGS IN THE SOFTWARE.
> */
> 
> #ifndef PROJPP_HPP
> #define PROJPP_HPP
> 
> #include <proj_api.h>
> 
> 
> #if 0
> class ProjContext;
> 
> class ProjStatic {
> public:
>      ProjContext const defaultContext;
> 
>      ProjStatic();
> };
> extern ProjStatic projStatic;
> 
> 
> class ProjContext {
>      projCtx ctx;
> 
> public :
> 
> 
> };
> 
> #endif
> 
> namespace giss {
> 
> class Proj {
>      projPJ pj;
> 
>      explicit Proj(projPJ _pj) : pj(_pj) {}
> 
> public:
>      friend int transform(Proj const &src, Proj const &dest,
>          long point_count, int point_offset,
>          double *x, double *y, double *z);
> 
> 
>      // ------------------ Five Standard constructors/methods
>      // See: http://www2.research.att.com/~bs/C++0xFAQ.html 
> 
>      explicit Proj(std::string const &definition)
>      {
>          pj = pj_init_plus(definition.c_str());
>          // pj_def = 0;
>      }
> 
>      explicit Proj(char const *definition)
>      {
>          pj = pj_init_plus(definition);
>      }
> 
>      ~Proj()
>      {
>          pj_free(pj);
>          // if (pj_def) pj_dalloc(pj_def);
>      }
> 
>      /** Transfer ownership */
>      Proj(Proj&& h) : pj{h.pj} //, pj_def{h.pj_def}
>      {
>          h.pj = 0;
>          // h.pj_def = 0;
>      }
> 
>      /** Transfer value */
>      Proj& operator=(Proj&& h) = delete;
> 
>      /** Copy constructor */
>      Proj(const Proj &h)
>      {
>          char *pj_def = pj_get_def(h.pj, 0);
>          pj = pj_init_plus(pj_def);
>          pj_dalloc(pj_def);
>      }
> 
>      // no copy with operator=()
>      Proj& operator=(const Proj&) = delete;
> 
>      // --------------------------- Other Stuff
> 
> 
>      /** Returns TRUE if the passed coordinate system is geographic
>      (proj=latlong). */
>      int is_latlong() const
>          { return pj_is_latlong(pj); }
> 
> 
>      /** Returns TRUE if the coordinate system is geocentric
>      (proj=geocent). */
>      int is_geocent() const
>          { return pj_is_geocent(pj); }
> 
>      /** Returns the PROJ.4 initialization string suitable for use with
>      pj_init_plus() that would produce this coordinate system, but with the
>      definition expanded as much as possible (for instance +init= and
>      +datum= definitions).
>      @param options Unused at this point
>      */
>      std::string get_def(int options=0) const
>      {
>          char *pj_def = 0;
>          pj_def = pj_get_def(pj, options);
> 
>          std::string ret = std::string(pj_def);
>          pj_dalloc(pj_def);
>          return ret;
>      }
> 
> 
>      /** Returns a new coordinate system definition which is the geographic
>      coordinate (lat/long) system underlying pj_in. */
>      Proj latlong_from_proj() const
>      {
>          return Proj(pj_latlong_from_proj(pj));
>      }
> 
> };
> 
> 
> inline int transform(Proj const &src, Proj const &dest,
>      long point_count, int point_offset, double *x, double *y, double *z=0)
> {
>      return pj_transform(src.pj, dest.pj,
>          point_count, point_offset, x, y, z);
> }
> 
> inline int transform(Proj const &src, Proj const &dest,
>      double x0, double y0, double &x1, double &y1)
> {
>      x1 = x0;
>      y1 = y0;
>      int ret = transform(src, dest, 1, 1, &x1, &y1);
>      return ret;
> }
> 
> 
> }
> 
> #endif
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org 
> http://lists.maptools.org/mailman/listinfo/proj



From warmerdam at pobox.com  Mon Apr  9 10:12:05 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Mon, 9 Apr 2012 10:12:05 -0700
Subject: [Proj] [patch] add missing projects.h
In-Reply-To: <4F72D1BC.406@met.no>
References: <4F702350.1060107@mabrand.nl> <rmimx73d5rx.fsf@fnord.ir.bbn.com>
	<CABUeae-gwVdZCLtGAa0ZjHvmvwQAg_9b5VpLf-f3p8OsYRLuCQ@mail.gmail.com>
	<5C152703F0044DA0A38F456652726494@desktop2>
	<CA+YzLBfh2LoH8t6U2_4YoVD5PkB_7dz7k-jrRwKrhJfQOWfNBQ@mail.gmail.com>
	<4F72D1BC.406@met.no>
Message-ID: <CA+YzLBeHhL-uNgdHn=m9Es12bryXAgik=VdZZdUC6NaBOQkorg@mail.gmail.com>

Heiko,

Sorry for the delay in responding.

On Wed, Mar 28, 2012 at 1:54 AM, Heiko Klein <Heiko.Klein at met.no> wrote:
> Hi Frank,
>
> I agree that 11 years of deprecation are more than enough, but deprecation
> usually means that the functionality is available elsewhere. From
> projects.h, e.g. pj_factors, is still not available through proj_api.h
>
> What should I do with those functions which don't have an equivalent in
> proj_api.h?

I don't consider pj_factors a public service of PROJ.4. If you want
to use it you will need the private include file, or alternatively just
consider duplicating the functionality in your project.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From warmerdam at pobox.com  Mon Apr  9 10:17:38 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Mon, 9 Apr 2012 10:17:38 -0700
Subject: [Proj] [patch] add missing projects.h
In-Reply-To: <221EAA4EB25F1F478A01D2AEEF47AB362B2BA83C@Exch.qos.loc>
References: <4F702350.1060107@mabrand.nl> <rmimx73d5rx.fsf@fnord.ir.bbn.com>
	<CABUeae-gwVdZCLtGAa0ZjHvmvwQAg_9b5VpLf-f3p8OsYRLuCQ@mail.gmail.com>
	<5C152703F0044DA0A38F456652726494@desktop2>
	<CA+YzLBfh2LoH8t6U2_4YoVD5PkB_7dz7k-jrRwKrhJfQOWfNBQ@mail.gmail.com>
	<4F72D1BC.406@met.no>
	<221EAA4EB25F1F478A01D2AEEF47AB362B2BA83C@Exch.qos.loc>
Message-ID: <CA+YzLBc0V_h+j4eCAsgE2hX3apjK6DTvfWhckwRa19mqNXqFPw@mail.gmail.com>

On Mon, Apr 9, 2012 at 8:03 AM, Judd Taylor <judd.t at orbitalsystems.com> wrote:
> I'd like to add some information about the problem we're seeing with the missing projects.h file.
>
> The code in question is a PDL (perl data language) binding to the Proj library written back in 2002 or 2003. This code uses projects.h to get the enumeration of the projections and their parameter for use in a code generator that writes the actual bindings and docs used for the interface.
>
> As far as I know, this is not available through proj_api.h. I've not worked directly with Proj since the way back on version 4.4.7, when the above solution using projects.h was suggested on this list. Can anyone here confirm whether this functionality is present in the proj_api.h that ships with 4.8.0?
>
> I'm specifically looking for the function pj_get_list_ref(), which is defined in projects.h.


Judd,

Since PDL uses pj_get_list_ref() and directly uses PJ_LIST objects you
are not using the public API, you are using the internal private API.

As such you need to include projects.h, but you shouldn't
expect to build against normal "install" copies of PROJ.4.

I would be open to ways of publishing the various lists but I think
some consideration will be needed.  What I don't want to do is
to expose the internal structures and make the ABI extremely
fragile.  I must confess I'm also not sure why PDL needs the
lists.  It doesn't seem necessary for a minimal bindings.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From robert.p.fischer-1 at nasa.gov  Mon Apr  9 19:40:23 2012
From: robert.p.fischer-1 at nasa.gov (Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY])
Date: Mon, 9 Apr 2012 21:40:23 -0500
Subject: [Proj] False Easting & Northing for LAEA?
In-Reply-To: <4F82A318.95FD.00E4.1@dfg.ca.gov>
References: <4F82ED12.40406@nasa.gov>,<4F82A318.95FD.00E4.1@dfg.ca.gov>
Message-ID: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C13@NDMSSCC06.ndc.nasa.gov>

Eric,

Thanks a lot.  Now that I see it, it's obvious!  Sorry for posting to the list for such a trivial problem.

-- Bob
________________________________________
From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] On Behalf Of Eric Miller [EMiller at dfg.ca.gov]
Sent: Monday, April 09, 2012 11:51 AM
To: proj at lists.maptools.org
Subject: Re: [Proj] False Easting & Northing for LAEA?

I think you want "x_0" and "y_0".
--

Eric G. Miller
Software Developer
CA Dept. of Fish & Game


>>> On 4/9/2012 at  7:07 AM, Bob Fischer <robert.p.fischer-1 at nasa.gov> wrote:
> Hello,
>
> I'm pretty new to Proj.4.  I'm having a bit of trouble with false
> easting and northing.  See code below (using a simple C++ wrapper):
>
>     const double D2R = M_PI / 180.0;
>
>      double proj_lon_0 = -40;
>      double proj_lat_0 = 74;
>      char sproj[100];
>      sprintf(sproj, "+proj=laea +lon_0=%f +lat_0=%f +x0=1000000
> +y0=1700000 +ellps=sphere",
>          proj_lon_0, proj_lat_0);
>      printf("Using projection: \"%s\"\n", sproj);
>      Proj proj(sproj);
>      printf("Using full projection: \"%s\"\n", proj.get_def().c_str());
>
> The output is:
>
> Using projection: "+proj=laea +lon_0=-40.000000 +lat_0=74.000000
> +x0=1000000 +y0=1700000 +ellps=sphere"
> Using full projection: " +proj=laea +lon_0=-40.000000 +lat_0=74.000000
> +ellps=sphere"
>
> Note that my false easting/northing has been removed from my proj.4
> string!  The fact that no false easting/northing is being used is
> confirmed when I try to transform a point:
>
>      double lon00 = -40;
>      double lat00 = 74;
>      double xp,yp;
>      int err = transform(llproj, proj, lon00*D2R, lat00*D2R, xp, yp);
>      printf("Proj.4 transform 00 -> (%f, %f) (err = %d)\n", xp, yp, err);
>
> Output is:
>
>    Proj.4 transform 00 -> (0.000000, -0.000000) (err = 0)
>
> Any ideas on why I'm not getting a false easting/northing here?  I can
> certainly work around the problem, but it would be nice if it could work.
>
> Thanks!
> -- Bob
>
> (C++ wrapper is included below, for reference)
>
>
>
> /** C++ API for proj.4 Projection Library.
> Copyright (c) 2012 by Robert Fischer: robert.fischer at nasa.gov
> April 5, 2012
>
>   Permission is hereby granted, free of charge, to any person obtaining a
>   copy of this software and associated documentation files (the "Software"),
>   to deal in the Software without restriction, including without limitation
>   the rights to use, copy, modify, merge, publish, distribute, sublicense,
>   and/or sell copies of the Software, and to permit persons to whom the
>   Software is furnished to do so, subject to the following conditions:
>
>   The above copyright notice and this permission notice shall be included
>   in all copies or substantial portions of the Software.
>
>   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
>   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
> MERCHANTABILITY,
>   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
>   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
>   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
>   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
>   DEALINGS IN THE SOFTWARE.
> */
>
> #ifndef PROJPP_HPP
> #define PROJPP_HPP
>
> #include <proj_api.h>
>
>
> #if 0
> class ProjContext;
>
> class ProjStatic {
> public:
>      ProjContext const defaultContext;
>
>      ProjStatic();
> };
> extern ProjStatic projStatic;
>
>
> class ProjContext {
>      projCtx ctx;
>
> public :
>
>
> };
>
> #endif
>
> namespace giss {
>
> class Proj {
>      projPJ pj;
>
>      explicit Proj(projPJ _pj) : pj(_pj) {}
>
> public:
>      friend int transform(Proj const &src, Proj const &dest,
>          long point_count, int point_offset,
>          double *x, double *y, double *z);
>
>
>      // ------------------ Five Standard constructors/methods
>      // See: http://www2.research.att.com/~bs/C++0xFAQ.html
>
>      explicit Proj(std::string const &definition)
>      {
>          pj = pj_init_plus(definition.c_str());
>          // pj_def = 0;
>      }
>
>      explicit Proj(char const *definition)
>      {
>          pj = pj_init_plus(definition);
>      }
>
>      ~Proj()
>      {
>          pj_free(pj);
>          // if (pj_def) pj_dalloc(pj_def);
>      }
>
>      /** Transfer ownership */
>      Proj(Proj&& h) : pj{h.pj} //, pj_def{h.pj_def}
>      {
>          h.pj = 0;
>          // h.pj_def = 0;
>      }
>
>      /** Transfer value */
>      Proj& operator=(Proj&& h) = delete;
>
>      /** Copy constructor */
>      Proj(const Proj &h)
>      {
>          char *pj_def = pj_get_def(h.pj, 0);
>          pj = pj_init_plus(pj_def);
>          pj_dalloc(pj_def);
>      }
>
>      // no copy with operator=()
>      Proj& operator=(const Proj&) = delete;
>
>      // --------------------------- Other Stuff
>
>
>      /** Returns TRUE if the passed coordinate system is geographic
>      (proj=latlong). */
>      int is_latlong() const
>          { return pj_is_latlong(pj); }
>
>
>      /** Returns TRUE if the coordinate system is geocentric
>      (proj=geocent). */
>      int is_geocent() const
>          { return pj_is_geocent(pj); }
>
>      /** Returns the PROJ.4 initialization string suitable for use with
>      pj_init_plus() that would produce this coordinate system, but with the
>      definition expanded as much as possible (for instance +init= and
>      +datum= definitions).
>      @param options Unused at this point
>      */
>      std::string get_def(int options=0) const
>      {
>          char *pj_def = 0;
>          pj_def = pj_get_def(pj, options);
>
>          std::string ret = std::string(pj_def);
>          pj_dalloc(pj_def);
>          return ret;
>      }
>
>
>      /** Returns a new coordinate system definition which is the geographic
>      coordinate (lat/long) system underlying pj_in. */
>      Proj latlong_from_proj() const
>      {
>          return Proj(pj_latlong_from_proj(pj));
>      }
>
> };
>
>
> inline int transform(Proj const &src, Proj const &dest,
>      long point_count, int point_offset, double *x, double *y, double *z=0)
> {
>      return pj_transform(src.pj, dest.pj,
>          point_count, point_offset, x, y, z);
> }
>
> inline int transform(Proj const &src, Proj const &dest,
>      double x0, double y0, double &x1, double &y1)
> {
>      x1 = x0;
>      y1 = y0;
>      int ret = transform(src, dest, 1, 1, &x1, &y1);
>      return ret;
> }
>
>
> }
>
> #endif
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From support.mn at elisanet.fi  Tue Apr 10 02:48:19 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Tue, 10 Apr 2012 12:48:19 +0300 (EEST)
Subject: [Proj] [patch] add missing projects.h
Message-ID: <4589037.1803551334051299571.JavaMail.support.mn@elisanet.fi>

Hello,

I am following different discussions about this "do some changes in the headers" -matter ...
and I wonder why does anybody need to touch the interface?

To tell the truth I really do not like these changes in the interface - why not keep the interface
constant and do some additional work inside the library to achieve that? That would be more
practical and professional ;)

Regards: Janne.

-----------------------------------------------

Frank Warmerdam [warmerdam at pobox.com] kirjoitti: 
> On Mon, Apr 9, 2012 at 8:03 AM, Judd Taylor <judd.t at orbitalsystems.com> wrote:
> > I'd like to add some information about the problem we're seeing with the missing projects.h file.
> >
> > The code in question is a PDL (perl data language) binding to the Proj library written back in 2002 or 2003. This code uses projects.h to get the enumeration of the projections and their parameter for use in a code generator that writes the actual bindings and docs used for the interface.
> >
> > As far as I know, this is not available through proj_api.h. I've not worked directly with Proj since the way back on version 4.4.7, when the above solution using projects.h was suggested on this list. Can anyone here confirm whether this functionality is present in the proj_api.h that ships with 4.8.0?
> >
> > I'm specifically looking for the function pj_get_list_ref(), which is defined in projects.h.
> 
> 
> Judd,
> 
> Since PDL uses pj_get_list_ref() and directly uses PJ_LIST objects you
> are not using the public API, you are using the internal private API.
> 
> As such you need to include projects.h, but you shouldn't
> expect to build against normal "install" copies of PROJ.4.
> 
> I would be open to ways of publishing the various lists but I think
> some consideration will be needed.  What I don't want to do is
> to expose the internal structures and make the ABI extremely
> fragile.  I must confess I'm also not sure why PDL needs the
> lists.  It doesn't seem necessary for a minimal bindings.
> 
> Best regards,
> -- 
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Software Developer
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 



From support.mn at elisanet.fi  Tue Apr 10 02:53:13 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Tue, 10 Apr 2012 12:53:13 +0300 (EEST)
Subject: [Proj] False Easting & Northing for LAEA?
Message-ID: <18171442.1804281334051594885.JavaMail.support.mn@elisanet.fi>

Hello,

here we again face this problem that Proj.4 should
have the syntax check preprocessor to warn the user
about potentially dangerous (or omitted) statements
etc.

This is not the first time we see these errors due to
small typos or misunderstandings which the scanner
just took in without arguing about them.

regards: Janne.

-------------------------------------------

Eric Miller [EMiller at dfg.ca.gov] kirjoitti: 
> I think you want "x_0" and "y_0".
> -- 
> 
> Eric G. Miller
> Software Developer
> CA Dept. of Fish & Game
> 
> 
> >>> On 4/9/2012 at  7:07 AM, Bob Fischer <robert.p.fischer-1 at nasa.gov> wrote:
> > Hello,
> > 
> > I'm pretty new to Proj.4.  I'm having a bit of trouble with false 
> > easting and northing.  See code below (using a simple C++ wrapper):
> > 
> >     const double D2R = M_PI / 180.0;
> > 
> >      double proj_lon_0 = -40;
> >      double proj_lat_0 = 74;
> >      char sproj[100];
> >      sprintf(sproj, "+proj=laea +lon_0=%f +lat_0=%f +x0=1000000 
> > +y0=1700000 +ellps=sphere",
> >          proj_lon_0, proj_lat_0);
> >      printf("Using projection: \"%s\"\n", sproj);
> >      Proj proj(sproj);
> >      printf("Using full projection: \"%s\"\n", proj.get_def().c_str());
> > 
> > The output is:
> > 
> > Using projection: "+proj=laea +lon_0=-40.000000 +lat_0=74.000000 
> > +x0=1000000 +y0=1700000 +ellps=sphere"
> > Using full projection: " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 
> > +ellps=sphere"
> > 
> > Note that my false easting/northing has been removed from my proj.4 
> > string!  The fact that no false easting/northing is being used is 
> > confirmed when I try to transform a point:
> > 
> >      double lon00 = -40;
> >      double lat00 = 74;
> >      double xp,yp;
> >      int err = transform(llproj, proj, lon00*D2R, lat00*D2R, xp, yp);
> >      printf("Proj.4 transform 00 -> (%f, %f) (err = %d)\n", xp, yp, err);
> > 
> > Output is:
> > 
> >    Proj.4 transform 00 -> (0.000000, -0.000000) (err = 0)
> > 
> > Any ideas on why I'm not getting a false easting/northing here?  I can 
> > certainly work around the problem, but it would be nice if it could work.
> > 
> > Thanks!
> > -- Bob
> > 
> > (C++ wrapper is included below, for reference)
> > 
> > 
> > 
> > /** C++ API for proj.4 Projection Library.
> > Copyright (c) 2012 by Robert Fischer: robert.fischer at nasa.gov 
> > April 5, 2012
> > 
> >   Permission is hereby granted, free of charge, to any person obtaining a
> >   copy of this software and associated documentation files (the "Software"),
> >   to deal in the Software without restriction, including without limitation
> >   the rights to use, copy, modify, merge, publish, distribute, sublicense,
> >   and/or sell copies of the Software, and to permit persons to whom the
> >   Software is furnished to do so, subject to the following conditions:
> > 
> >   The above copyright notice and this permission notice shall be included
> >   in all copies or substantial portions of the Software.
> > 
> >   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
> >   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
> > MERCHANTABILITY,
> >   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
> >   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
> >   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
> >   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
> >   DEALINGS IN THE SOFTWARE.
> > */
> > 
> > #ifndef PROJPP_HPP
> > #define PROJPP_HPP
> > 
> > #include <proj_api.h>
> > 
> > 
> > #if 0
> > class ProjContext;
> > 
> > class ProjStatic {
> > public:
> >      ProjContext const defaultContext;
> > 
> >      ProjStatic();
> > };
> > extern ProjStatic projStatic;
> > 
> > 
> > class ProjContext {
> >      projCtx ctx;
> > 
> > public :
> > 
> > 
> > };
> > 
> > #endif
> > 
> > namespace giss {
> > 
> > class Proj {
> >      projPJ pj;
> > 
> >      explicit Proj(projPJ _pj) : pj(_pj) {}
> > 
> > public:
> >      friend int transform(Proj const &src, Proj const &dest,
> >          long point_count, int point_offset,
> >          double *x, double *y, double *z);
> > 
> > 
> >      // ------------------ Five Standard constructors/methods
> >      // See: http://www2.research.att.com/~bs/C++0xFAQ.html 
> > 
> >      explicit Proj(std::string const &definition)
> >      {
> >          pj = pj_init_plus(definition.c_str());
> >          // pj_def = 0;
> >      }
> > 
> >      explicit Proj(char const *definition)
> >      {
> >          pj = pj_init_plus(definition);
> >      }
> > 
> >      ~Proj()
> >      {
> >          pj_free(pj);
> >          // if (pj_def) pj_dalloc(pj_def);
> >      }
> > 
> >      /** Transfer ownership */
> >      Proj(Proj&& h) : pj{h.pj} //, pj_def{h.pj_def}
> >      {
> >          h.pj = 0;
> >          // h.pj_def = 0;
> >      }
> > 
> >      /** Transfer value */
> >      Proj& operator=(Proj&& h) = delete;
> > 
> >      /** Copy constructor */
> >      Proj(const Proj &h)
> >      {
> >          char *pj_def = pj_get_def(h.pj, 0);
> >          pj = pj_init_plus(pj_def);
> >          pj_dalloc(pj_def);
> >      }
> > 
> >      // no copy with operator=()
> >      Proj& operator=(const Proj&) = delete;
> > 
> >      // --------------------------- Other Stuff
> > 
> > 
> >      /** Returns TRUE if the passed coordinate system is geographic
> >      (proj=latlong). */
> >      int is_latlong() const
> >          { return pj_is_latlong(pj); }
> > 
> > 
> >      /** Returns TRUE if the coordinate system is geocentric
> >      (proj=geocent). */
> >      int is_geocent() const
> >          { return pj_is_geocent(pj); }
> > 
> >      /** Returns the PROJ.4 initialization string suitable for use with
> >      pj_init_plus() that would produce this coordinate system, but with the
> >      definition expanded as much as possible (for instance +init= and
> >      +datum= definitions).
> >      @param options Unused at this point
> >      */
> >      std::string get_def(int options=0) const
> >      {
> >          char *pj_def = 0;
> >          pj_def = pj_get_def(pj, options);
> > 
> >          std::string ret = std::string(pj_def);
> >          pj_dalloc(pj_def);
> >          return ret;
> >      }
> > 
> > 
> >      /** Returns a new coordinate system definition which is the geographic
> >      coordinate (lat/long) system underlying pj_in. */
> >      Proj latlong_from_proj() const
> >      {
> >          return Proj(pj_latlong_from_proj(pj));
> >      }
> > 
> > };
> > 
> > 
> > inline int transform(Proj const &src, Proj const &dest,
> >      long point_count, int point_offset, double *x, double *y, double *z=0)
> > {
> >      return pj_transform(src.pj, dest.pj,
> >          point_count, point_offset, x, y, z);
> > }
> > 
> > inline int transform(Proj const &src, Proj const &dest,
> >      double x0, double y0, double &x1, double &y1)
> > {
> >      x1 = x0;
> >      y1 = y0;
> >      int ret = transform(src, dest, 1, 1, &x1, &y1);
> >      return ret;
> > }
> > 
> > 
> > }
> > 
> > #endif
> > 
> > _______________________________________________
> > Proj mailing list
> > Proj at lists.maptools.org 
> > http://lists.maptools.org/mailman/listinfo/proj
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 



From jgpallero at gmail.com  Tue Apr 10 03:11:18 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Tue, 10 Apr 2012 12:11:18 +0200
Subject: [Proj] Multithread support in PROJ 4.8.0
Message-ID: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>

Hello:

I've seen that in version 4.8.0 has added to proj the thread safe
capability via the Ctx structs. But, is documented the usage of this
new feature? Exists any examples with OpenMP? Where?

Thanks

-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From jgpallero at gmail.com  Tue Apr 10 03:32:44 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Tue, 10 Apr 2012 12:32:44 +0200
Subject: [Proj] Using proj_api.h in older versions
Message-ID: <CAFemY3YLdskaYZYEWMdY27BP-sbnCySH_V0nkbvZbk1CTyH71Q@mail.gmail.com>

Hello:

I've read in NEWS file of 4.8.0 version that now proj_api.h file
should be used instead projects.h. In older versions, can be used
proj_api.h instead of projects.h too?

-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From robert.p.fischer-1 at nasa.gov  Tue Apr 10 04:35:51 2012
From: robert.p.fischer-1 at nasa.gov (Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY])
Date: Tue, 10 Apr 2012 06:35:51 -0500
Subject: [Proj] Multithread support in PROJ 4.8.0
In-Reply-To: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
References: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
Message-ID: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C16@NDMSSCC06.ndc.nasa.gov>

I did not come across any documentation, this is REALLY good to know.  Especially since I was considering parallelizing my code.

I would not need an explicit example in OpenMP (I would use MPI anyway).  Rather, I would need a description of how to do things in a thread-safe manner, avoid things being shared when they shouldn't, etc.

-- Bob

________________________________________
From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] On Behalf Of José Luis García Pallero [jgpallero at gmail.com]
Sent: Tuesday, April 10, 2012 6:11 AM
To: PROJ.4 and general Projections Discussions
Subject: [Proj] Multithread support in PROJ 4.8.0

Hello:

I've seen that in version 4.8.0 has added to proj the thread safe
capability via the Ctx structs. But, is documented the usage of this
new feature? Exists any examples with OpenMP? Where?

Thanks

--
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From robert.p.fischer-1 at nasa.gov  Tue Apr 10 08:16:38 2012
From: robert.p.fischer-1 at nasa.gov (Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY])
Date: Tue, 10 Apr 2012 10:16:38 -0500
Subject: [Proj] Changing Radius of the Earth?
In-Reply-To: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
References: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
Message-ID: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C20@NDMSSCC06.ndc.nasa.gov>

How do I change the radius of the (spherical) Earth in proj.4?  I'm using the proj.4 string:

    " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 +x_0=1000000 +y_0=1700000 +ellps=sphere"

..and have discovered that proj.4 assumes a radius of exactly 6370997m (from pj_ellps.c):

    "sphere",   "a=6370997.0",  "b=6370997.0", "Normal Sphere (r=6370997)",

We are running code on a spherical Earth, with a radius (slightly) different from that above.  For consistency sake, proj.4 will need to use the same Earth radius as the code that calls it.  How do I set up a projection on a spherical Earth with a custom radius?

Also... if someone wanted to use proj.4 for mapping on Mars, how would they do that?

Thanks,
-- Bob


From warmerdam at pobox.com  Tue Apr 10 08:52:09 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Tue, 10 Apr 2012 08:52:09 -0700
Subject: [Proj] Changing Radius of the Earth?
In-Reply-To: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C20@NDMSSCC06.ndc.nasa.gov>
References: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C20@NDMSSCC06.ndc.nasa.gov>
Message-ID: <CA+YzLBcmAX+7+JrEs-MO-oO+hkqUd_nqU551JhS1wtz5vUdtOg@mail.gmail.com>

On Tue, Apr 10, 2012 at 8:16 AM, Fischer, Robert P.
(GISS-6110)[COLUMBIA UNIVERSITY] <robert.p.fischer-1 at nasa.gov> wrote:
> How do I change the radius of the (spherical) Earth in proj.4?  I'm using the proj.4 string:
>
>    " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 +x_0=1000000 +y_0=1700000 +ellps=sphere"
>
> ..and have discovered that proj.4 assumes a radius of exactly 6370997m (from pj_ellps.c):
>
>    "sphere",   "a=6370997.0",  "b=6370997.0", "Normal Sphere (r=6370997)",
>
> We are running code on a spherical Earth, with a radius (slightly) different from that above.  For consistency sake, proj.4 will need to use the same Earth radius as the code that calls it.  How do I set up a projection on a spherical Earth with a custom radius?
>
> Also... if someone wanted to use proj.4 for mapping on Mars, how would they do that?

Bob,

You can supply explicit values for the semi minor and semi major axes
instead of using the symbolic "sphere" value.

eg.
" +proj=laea +lon_0=-40.000000 +lat_0=74.000000 +x_0=1000000
+y_0=1700000 +a=2000000 +b=200000"

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From jagoncal at gmail.com  Tue Apr 10 09:14:23 2012
From: jagoncal at gmail.com (=?ISO-8859-1?Q?Jose_Gon=E7alves?=)
Date: Tue, 10 Apr 2012 17:14:23 +0100
Subject: [Proj] Changing Radius of the Earth?
In-Reply-To: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C20@NDMSSCC06.ndc.nasa.gov>
References: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C20@NDMSSCC06.ndc.nasa.gov>
Message-ID: <CALHLaOSTVftBrdx3qO3LboT3TEJdwt+5uBvJm-5MaLUBF-1S5w@mail.gmail.com>

For Mars use its ellipsoid axis:  +a=3396200 +b=3376189
or the mean sphere: +R=3389508

Data from http://www.hnsky.org/iau-iag.htm

Regards

José Gonçalves




Em 10 de abril de 2012 16:16, Fischer, Robert P. (GISS-6110)[COLUMBIA
UNIVERSITY] <robert.p.fischer-1 at nasa.gov> escreveu:

> How do I change the radius of the (spherical) Earth in proj.4?  I'm using
> the proj.4 string:
>
>    " +proj=laea +lon_0=-40.000000 +lat_0=74.000000 +x_0=1000000
> +y_0=1700000 +ellps=sphere"
>
> ..and have discovered that proj.4 assumes a radius of exactly 6370997m
> (from pj_ellps.c):
>
>    "sphere",   "a=6370997.0",  "b=6370997.0", "Normal Sphere (r=6370997)",
>
> We are running code on a spherical Earth, with a radius (slightly)
> different from that above.  For consistency sake, proj.4 will need to use
> the same Earth radius as the code that calls it.  How do I set up a
> projection on a spherical Earth with a custom radius?
>
> Also... if someone wanted to use proj.4 for mapping on Mars, how would
> they do that?
>
> Thanks,
> -- Bob
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20120410/0b5823a8/attachment.html>

From jgpallero at gmail.com  Wed Apr 11 01:47:27 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Wed, 11 Apr 2012 10:47:27 +0200
Subject: [Proj] Multithread support in PROJ 4.8.0
In-Reply-To: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C16@NDMSSCC06.ndc.nasa.gov>
References: <CAFemY3Zb+PWr35TGPumHajAvgpVWHhJ2OnJJ7oJ3nho3UPdBNg@mail.gmail.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C16@NDMSSCC06.ndc.nasa.gov>
Message-ID: <CAFemY3Y96_qk0jX4gXAQSbVqpfV3N1D8gTNE8Cv2diF45uO3Fg@mail.gmail.com>

El día 10 de abril de 2012 13:35, Fischer, Robert P.
(GISS-6110)[COLUMBIA UNIVERSITY] <robert.p.fischer-1 at nasa.gov>
escribió:
> I did not come across any documentation, this is REALLY good to know.  Especially since I was considering parallelizing my code.
>
> I would not need an explicit example in OpenMP (I would use MPI anyway).  Rather, I would need a description of how to do things in a thread-safe manner, avoid things being shared when they shouldn't, etc.
>

Hi,

I've seen that have a file called src/multistresstest.c in the 4.8.0
distribution in which multithreaded capabilities are tested. The
program uses pthreads but I'm not understand clearly the way of use
for the projCtx object. I don't understand if each thread should
create it own ctx or if it should be created at the beginning of the
program. So in my case I'm not so sure the way of use in OpenMP
programs. Could someone post an OpenMP example?

Thanks

> -- Bob
>
> ________________________________________
> From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] On Behalf Of José Luis García Pallero [jgpallero at gmail.com]
> Sent: Tuesday, April 10, 2012 6:11 AM
> To: PROJ.4 and general Projections Discussions
> Subject: [Proj] Multithread support in PROJ 4.8.0
>
> Hello:
>
> I've seen that in version 4.8.0 has added to proj the thread safe
> capability via the Ctx structs. But, is documented the usage of this
> new feature? Exists any examples with OpenMP? Where?
>
> Thanks
>
> --
> *****************************************
> José Luis García Pallero
> jgpallero at gmail.com
> (o<
> / / \
> V_/_
> Use Debian GNU/Linux and enjoy!
> *****************************************
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From jgpallero at gmail.com  Wed Apr 11 03:30:45 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Wed, 11 Apr 2012 12:30:45 +0200
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
Message-ID: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>

Hello:

As it is said in NEWS files from PROJ 4.8.0 now proj_api.h file should
be included in programs instead projects.h. I've tried to compile my
old code (that has no problems with 4.7.0) and I've obtained a warning
and an error.
In my code I have a declaration like

projPJ proyec;

and I use them later as

proyec = pj_init_plus(param);

and more later, in order to check if a projections has inverse step:

if(proyec->inv==0)
{
......
}

If I compile the program using 4.8.0 version I obtain a warning and an error:

geocproj.c:202:14: warning: dereferencing ‘void *’ pointer [enabled by
default]
geocproj.c:202:14: error: request for member ‘inv’ in something not a
structure or union

Looking proj_api.h file, in both versions 4.7.0 and 4.8.0 I can see the block

for 4.7.0

#if !defined(PROJECTS_H)
    typedef struct { double u, v; } projUV;
    typedef void *projPJ;
    #define projXY projUV
    #define projLP projUV
#else
    typedef PJ *projPJ;
#   define projXY	XY
#   define projLP       LP
#endif

for 4.8.0

#if !defined(PROJECTS_H)
    typedef struct { double u, v; } projUV;
    typedef void *projPJ;
    #define projXY projUV
    #define projLP projUV
    typedef void *projCtx;
#else
    typedef PJ *projPJ;
    typedef projCtx_t *projCtx;
#   define projXY	XY
#   define projLP       LP
#endif

Both are the same (except for the ctx context). In both if PROJECTS_H
is not defined (i.e. if projects.h was not included) the type projPJ
is defined as void* instead PJ*. PJ is defined in projects.h. But in
the include/ folder of 4.8.0 project.h was not copied, so it's
impossible to use it. So I can't use the 'inv' field and I suppone no
PJ struct at all as projPJ was defined as void*. Then which is the
correct way in order to use the new PROJ 4.8.0 version?



On the other hand, suppose that 4.8.0 works well in my case only
including proj_api.h. Then my problem is that if I have not knowledge
about the version of PROJ in one computer, how can I proceed in order
to use the correct include depending versions.
First of all, can I use version 4.7.0 (for example) with only
#include<proj_api.h>? In my case the answer is NO because I obtain the
same warning and error that in 4.8.0. Then I try:

#include<proj_api.h>
#if PJ_VERSION<480
#include<projects.h>
#endif

PJ_VERSION is defined in proj_api.h. I check if version is older than
4.8.0 and try to include then projects.h. But I obtain some errors:

/usr/include/projects.h:139:33: error: conflicting types for ‘projUV’
/usr/include/proj_api.h:54:37: note: previous declaration of ‘projUV’
was here
geocproj.c: In function ‘ProjFwd’:
geocproj.c:120:9: error: incompatible type for argument 1 of ‘pj_fwd’
/usr/include/proj_api.h:66:8: note: expected ‘projUV’ but argument is
of type ‘projUV’
geocproj.c: In function ‘ProjInv’:
geocproj.c:202:14: warning: dereferencing ‘void *’ pointer [enabled by
default]
geocproj.c:202:14: error: request for member ‘inv’ in something not a
structure or union
geocproj.c:223:9: error: incompatible type for argument 1 of ‘pj_inv’
/usr/include/proj_api.h:67:8: note: expected ‘projUV’ but argument is
of type ‘projUV’

We can see conflicting type errors due to definitions of projUV in
proj_api.h and projects.h.

Opinions about?

Cheers

-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From sisyphus1 at optusnet.com.au  Wed Apr 11 04:08:01 2012
From: sisyphus1 at optusnet.com.au (Sisyphus)
Date: Wed, 11 Apr 2012 21:08:01 +1000
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
Message-ID: <D26A3025BD63453B8432EE86E352EB70@desktop2>


----- Original Message ----- 
From: "José Luis García Pallero"

> #include<proj_api.h>
> #if PJ_VERSION<480
> #include<projects.h>
> #endif

I think that if PJ_VERSION < 480, then projects.h needs to be included 
*before* proj_api.h.
And if PJ_VERSION == 480 then you need to *not* include projects.h at all.
Am I right ? If so, then I believe you have what is commonly referred to as 
a "gotcha" (because it's impossible to cater for both requirements).

I think your problem is probably that, in the eyes of the proj developers, 
you've accessed parts of projects.h that you shouldn't have - or at least, 
you've accessed parts that they didn't expect you would.
But I'll leave the detailed explanation to those more qualified.

Cheers,
Rob 



From jgpallero at gmail.com  Wed Apr 11 04:31:22 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Wed, 11 Apr 2012 13:31:22 +0200
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <D26A3025BD63453B8432EE86E352EB70@desktop2>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<D26A3025BD63453B8432EE86E352EB70@desktop2>
Message-ID: <CAFemY3YrtGk=ATDds7DN=4dyH8H4TqN6qC91UQaX594JQd6=bA@mail.gmail.com>

El día 11 de abril de 2012 13:08, Sisyphus <sisyphus1 at optusnet.com.au> escribió:
>
> ----- Original Message -----
> From: "José Luis García Pallero"
>
>> #include<proj_api.h>
>> #if PJ_VERSION<480
>> #include<projects.h>
>> #endif
>
> I think that if PJ_VERSION < 480, then projects.h needs to be included
> *before* proj_api.h.

But the problem is that PJ_VERSION is defined in proj_api.h, so it
should be included first.

> And if PJ_VERSION == 480 then you need to *not* include projects.h at all.
> Am I right ? If so, then I believe you have what is commonly referred to as
> a "gotcha" (because it's impossible to cater for both requirements).
>
> I think your problem is probably that, in the eyes of the proj developers,
> you've accessed parts of projects.h that you shouldn't have - or at least,
> you've accessed parts that they didn't expect you would.

Mmmm... I'm not so sure of it. I think that check the field 'inv' of
projPJ struct (that is the source of the error) is a common behavior
in order to know if a projection implements the inverse step.

> But I'll leave the detailed explanation to those more qualified.
>
> Cheers,
> Rob
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From EMiller at dfg.ca.gov  Wed Apr 11 08:25:49 2012
From: EMiller at dfg.ca.gov (Eric Miller)
Date: Wed, 11 Apr 2012 08:25:49 -0700
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
Message-ID: <4F85400E.95FD.00E4.1@dfg.ca.gov>

I think that being able to interrogate the projection definition to know
if it has an inverse is useful, so a function should be added to
proj_api.h.

Perhaps:

int pj_has_inverse(projPJ);

And in pj_utils.c

/******************************************************************/
/*                                 pj_has_inverse()                    
            */
/*                                                                     
                   */
/*            Return TRUE if this coordinate system object has     */
/*            and inverse projection method.                           
  */
/*****************************************************************/
int pj_has_inverse( PJ *pj )
{
         return pj != NULL && pj->inv != NULL;
}

-- 

Eric G. Miller
Software Developer
CA Dept. of Fish & Game


>>> On 4/11/2012 at  3:30 AM, José Luis García Pallero
<jgpallero at gmail.com>
wrote:
> Hello:
> 
> As it is said in NEWS files from PROJ 4.8.0 now proj_api.h file
should
> be included in programs instead projects.h. I've tried to compile my
> old code (that has no problems with 4.7.0) and I've obtained a
warning
> and an error.
> In my code I have a declaration like
> 
> projPJ proyec;
> 
> and I use them later as
> 
> proyec = pj_init_plus(param);
> 
> and more later, in order to check if a projections has inverse step:
> 
> if(proyec->inv==0)
> {
> ......
> }
> 
> If I compile the program using 4.8.0 version I obtain a warning and
an 
> error:
> 
> geocproj.c:202:14: warning: dereferencing *void ** pointer
[enabled by
> default]
> geocproj.c:202:14: error: request for member *inv* in something
not a
> structure or union
> 
> Looking proj_api.h file, in both versions 4.7.0 and 4.8.0 I can see
the 
> block
> 
> for 4.7.0
> 
> #if !defined(PROJECTS_H)
>     typedef struct { double u, v; } projUV;
>     typedef void *projPJ;
>     #define projXY projUV
>     #define projLP projUV
> #else
>     typedef PJ *projPJ;
> #   define projXY	XY
> #   define projLP       LP
> #endif
> 
> for 4.8.0
> 
> #if !defined(PROJECTS_H)
>     typedef struct { double u, v; } projUV;
>     typedef void *projPJ;
>     #define projXY projUV
>     #define projLP projUV
>     typedef void *projCtx;
> #else
>     typedef PJ *projPJ;
>     typedef projCtx_t *projCtx;
> #   define projXY	XY
> #   define projLP       LP
> #endif
> 
> Both are the same (except for the ctx context). In both if
PROJECTS_H
> is not defined (i.e. if projects.h was not included) the type projPJ
> is defined as void* instead PJ*. PJ is defined in projects.h. But in
> the include/ folder of 4.8.0 project.h was not copied, so it's
> impossible to use it. So I can't use the 'inv' field and I suppone
no
> PJ struct at all as projPJ was defined as void*. Then which is the
> correct way in order to use the new PROJ 4.8.0 version?
> 
> 
> 
> On the other hand, suppose that 4.8.0 works well in my case only
> including proj_api.h. Then my problem is that if I have not
knowledge
> about the version of PROJ in one computer, how can I proceed in
order
> to use the correct include depending versions.
> First of all, can I use version 4.7.0 (for example) with only
> #include<proj_api.h>? In my case the answer is NO because I obtain
the
> same warning and error that in 4.8.0. Then I try:
> 
> #include<proj_api.h>
> #if PJ_VERSION<480
> #include<projects.h>
> #endif
> 
> PJ_VERSION is defined in proj_api.h. I check if version is older
than
> 4.8.0 and try to include then projects.h. But I obtain some errors:
> 
> /usr/include/projects.h:139:33: error: conflicting types for
*projUV*
> /usr/include/proj_api.h:54:37: note: previous declaration of
*projUV*
> was here
> geocproj.c: In function *ProjFwd*:
> geocproj.c:120:9: error: incompatible type for argument 1 of
*pj_fwd*
> /usr/include/proj_api.h:66:8: note: expected *projUV* but
argument is
> of type *projUV*
> geocproj.c: In function *ProjInv*:
> geocproj.c:202:14: warning: dereferencing *void ** pointer
[enabled by
> default]
> geocproj.c:202:14: error: request for member *inv* in something
not a
> structure or union
> geocproj.c:223:9: error: incompatible type for argument 1 of
*pj_inv*
> /usr/include/proj_api.h:67:8: note: expected *projUV* but
argument is
> of type *projUV*
> 
> We can see conflicting type errors due to definitions of projUV in
> proj_api.h and projects.h.
> 
> Opinions about?
> 
> Cheers



From warmerdam at pobox.com  Wed Apr 11 10:27:55 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 11 Apr 2012 10:27:55 -0700
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <4F85400E.95FD.00E4.1@dfg.ca.gov>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
Message-ID: <CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>

Eric,

This seems reasonable.  Don't hesitate to file a ticket ideally with a patch.

Best regards,
Frank

On Wed, Apr 11, 2012 at 8:25 AM, Eric Miller <EMiller at dfg.ca.gov> wrote:
> I think that being able to interrogate the projection definition to know
> if it has an inverse is useful, so a function should be added to
> proj_api.h.
>
> Perhaps:
>
> int pj_has_inverse(projPJ);
>
> And in pj_utils.c
>
> /******************************************************************/
> /*                                 pj_has_inverse()
>            */
> /*
>                   */
> /*            Return TRUE if this coordinate system object has     */
> /*            and inverse projection method.
>  */
> /*****************************************************************/
> int pj_has_inverse( PJ *pj )
> {
>         return pj != NULL && pj->inv != NULL;
> }
>
> --
>
> Eric G. Miller
> Software Developer
> CA Dept. of Fish & Game
>
>
>>>> On 4/11/2012 at  3:30 AM, José Luis García Pallero
> <jgpallero at gmail.com>
> wrote:
>> Hello:
>>
>> As it is said in NEWS files from PROJ 4.8.0 now proj_api.h file
> should
>> be included in programs instead projects.h. I've tried to compile my
>> old code (that has no problems with 4.7.0) and I've obtained a
> warning
>> and an error.
>> In my code I have a declaration like
>>
>> projPJ proyec;
>>
>> and I use them later as
>>
>> proyec = pj_init_plus(param);
>>
>> and more later, in order to check if a projections has inverse step:
>>
>> if(proyec->inv==0)
>> {
>> ......
>> }
>>
>> If I compile the program using 4.8.0 version I obtain a warning and
> an
>> error:
>>
>> geocproj.c:202:14: warning: dereferencing *void ** pointer
> [enabled by
>> default]
>> geocproj.c:202:14: error: request for member *inv* in something
> not a
>> structure or union
>>
>> Looking proj_api.h file, in both versions 4.7.0 and 4.8.0 I can see
> the
>> block
>>
>> for 4.7.0
>>
>> #if !defined(PROJECTS_H)
>>     typedef struct { double u, v; } projUV;
>>     typedef void *projPJ;
>>     #define projXY projUV
>>     #define projLP projUV
>> #else
>>     typedef PJ *projPJ;
>> #   define projXY     XY
>> #   define projLP       LP
>> #endif
>>
>> for 4.8.0
>>
>> #if !defined(PROJECTS_H)
>>     typedef struct { double u, v; } projUV;
>>     typedef void *projPJ;
>>     #define projXY projUV
>>     #define projLP projUV
>>     typedef void *projCtx;
>> #else
>>     typedef PJ *projPJ;
>>     typedef projCtx_t *projCtx;
>> #   define projXY     XY
>> #   define projLP       LP
>> #endif
>>
>> Both are the same (except for the ctx context). In both if
> PROJECTS_H
>> is not defined (i.e. if projects.h was not included) the type projPJ
>> is defined as void* instead PJ*. PJ is defined in projects.h. But in
>> the include/ folder of 4.8.0 project.h was not copied, so it's
>> impossible to use it. So I can't use the 'inv' field and I suppone
> no
>> PJ struct at all as projPJ was defined as void*. Then which is the
>> correct way in order to use the new PROJ 4.8.0 version?
>>
>>
>>
>> On the other hand, suppose that 4.8.0 works well in my case only
>> including proj_api.h. Then my problem is that if I have not
> knowledge
>> about the version of PROJ in one computer, how can I proceed in
> order
>> to use the correct include depending versions.
>> First of all, can I use version 4.7.0 (for example) with only
>> #include<proj_api.h>? In my case the answer is NO because I obtain
> the
>> same warning and error that in 4.8.0. Then I try:
>>
>> #include<proj_api.h>
>> #if PJ_VERSION<480
>> #include<projects.h>
>> #endif
>>
>> PJ_VERSION is defined in proj_api.h. I check if version is older
> than
>> 4.8.0 and try to include then projects.h. But I obtain some errors:
>>
>> /usr/include/projects.h:139:33: error: conflicting types for
> *projUV*
>> /usr/include/proj_api.h:54:37: note: previous declaration of
> *projUV*
>> was here
>> geocproj.c: In function *ProjFwd*:
>> geocproj.c:120:9: error: incompatible type for argument 1 of
> *pj_fwd*
>> /usr/include/proj_api.h:66:8: note: expected *projUV* but
> argument is
>> of type *projUV*
>> geocproj.c: In function *ProjInv*:
>> geocproj.c:202:14: warning: dereferencing *void ** pointer
> [enabled by
>> default]
>> geocproj.c:202:14: error: request for member *inv* in something
> not a
>> structure or union
>> geocproj.c:223:9: error: incompatible type for argument 1 of
> *pj_inv*
>> /usr/include/proj_api.h:67:8: note: expected *projUV* but
> argument is
>> of type *projUV*
>>
>> We can see conflicting type errors due to definitions of projUV in
>> proj_api.h and projects.h.
>>
>> Opinions about?
>>
>> Cheers
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From jgpallero at gmail.com  Wed Apr 11 13:50:57 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Wed, 11 Apr 2012 22:50:57 +0200
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
	<CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
Message-ID: <CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>

El día 11 de abril de 2012 19:27, Frank Warmerdam
<warmerdam at pobox.com> escribió:
> Eric,
>
> This seems reasonable.  Don't hesitate to file a ticket ideally with a patch.
>
> Best regards,
> Frank
>
> On Wed, Apr 11, 2012 at 8:25 AM, Eric Miller <EMiller at dfg.ca.gov> wrote:
>> I think that being able to interrogate the projection definition to know
>> if it has an inverse is useful, so a function should be added to
>> proj_api.h.
>>
>> Perhaps:
>>
>> int pj_has_inverse(projPJ);
>>
>> And in pj_utils.c
>>
>> /******************************************************************/
>> /*                                 pj_has_inverse()
>>            */
>> /*
>>                   */
>> /*            Return TRUE if this coordinate system object has     */
>> /*            and inverse projection method.
>>  */
>> /*****************************************************************/
>> int pj_has_inverse( PJ *pj )
>> {
>>         return pj != NULL && pj->inv != NULL;
>> }

Hello:

This function sounds good, but I have a couple of objections:

1. First of all, the portability of old code. The programs that until
now include projects.h instead proj_api.h should be corrected. I
propose to rename projects.h to projects_internal.h (for example) and
create a new projects.h that contains only #include<proj_api.h> Then,
it can be maintained in programs the #include<projects.h> and it runs
always: prior to 4.8.0 and 4.8.0 or higher. Previously on this same
topic I explained that is impossible to check automatically the
version of PROJ via PJ_VERSION and select the correct header to
include because if projects.h is included after proj_api.h some errors
of conflicting types appears. Creating new projects.h could avoid this
gotcha.

2. What about the old code that uses explicitly some fields of projPJ
structs? Why in 4.8.0 projPJ fields are not public? For old code that
uses explicitly fields of projPJ the solution of the point 1 is not
valid. Another solution could be to define explicitly the PJ struct in
proj_api.h. Whith this solution plus the new projects.h I think that
almost all old code should have not problems with new 4.8.0 version

Cheers

>>
>> --
>>
>> Eric G. Miller
>> Software Developer
>> CA Dept. of Fish & Game
>>
>>
>>>>> On 4/11/2012 at  3:30 AM, José Luis García Pallero
>> <jgpallero at gmail.com>
>> wrote:
>>> Hello:
>>>
>>> As it is said in NEWS files from PROJ 4.8.0 now proj_api.h file
>> should
>>> be included in programs instead projects.h. I've tried to compile my
>>> old code (that has no problems with 4.7.0) and I've obtained a
>> warning
>>> and an error.
>>> In my code I have a declaration like
>>>
>>> projPJ proyec;
>>>
>>> and I use them later as
>>>
>>> proyec = pj_init_plus(param);
>>>
>>> and more later, in order to check if a projections has inverse step:
>>>
>>> if(proyec->inv==0)
>>> {
>>> ......
>>> }
>>>
>>> If I compile the program using 4.8.0 version I obtain a warning and
>> an
>>> error:
>>>
>>> geocproj.c:202:14: warning: dereferencing *void ** pointer
>> [enabled by
>>> default]
>>> geocproj.c:202:14: error: request for member *inv* in something
>> not a
>>> structure or union
>>>
>>> Looking proj_api.h file, in both versions 4.7.0 and 4.8.0 I can see
>> the
>>> block
>>>
>>> for 4.7.0
>>>
>>> #if !defined(PROJECTS_H)
>>>     typedef struct { double u, v; } projUV;
>>>     typedef void *projPJ;
>>>     #define projXY projUV
>>>     #define projLP projUV
>>> #else
>>>     typedef PJ *projPJ;
>>> #   define projXY     XY
>>> #   define projLP       LP
>>> #endif
>>>
>>> for 4.8.0
>>>
>>> #if !defined(PROJECTS_H)
>>>     typedef struct { double u, v; } projUV;
>>>     typedef void *projPJ;
>>>     #define projXY projUV
>>>     #define projLP projUV
>>>     typedef void *projCtx;
>>> #else
>>>     typedef PJ *projPJ;
>>>     typedef projCtx_t *projCtx;
>>> #   define projXY     XY
>>> #   define projLP       LP
>>> #endif
>>>
>>> Both are the same (except for the ctx context). In both if
>> PROJECTS_H
>>> is not defined (i.e. if projects.h was not included) the type projPJ
>>> is defined as void* instead PJ*. PJ is defined in projects.h. But in
>>> the include/ folder of 4.8.0 project.h was not copied, so it's
>>> impossible to use it. So I can't use the 'inv' field and I suppone
>> no
>>> PJ struct at all as projPJ was defined as void*. Then which is the
>>> correct way in order to use the new PROJ 4.8.0 version?
>>>
>>>
>>>
>>> On the other hand, suppose that 4.8.0 works well in my case only
>>> including proj_api.h. Then my problem is that if I have not
>> knowledge
>>> about the version of PROJ in one computer, how can I proceed in
>> order
>>> to use the correct include depending versions.
>>> First of all, can I use version 4.7.0 (for example) with only
>>> #include<proj_api.h>? In my case the answer is NO because I obtain
>> the
>>> same warning and error that in 4.8.0. Then I try:
>>>
>>> #include<proj_api.h>
>>> #if PJ_VERSION<480
>>> #include<projects.h>
>>> #endif
>>>
>>> PJ_VERSION is defined in proj_api.h. I check if version is older
>> than
>>> 4.8.0 and try to include then projects.h. But I obtain some errors:
>>>
>>> /usr/include/projects.h:139:33: error: conflicting types for
>> *projUV*
>>> /usr/include/proj_api.h:54:37: note: previous declaration of
>> *projUV*
>>> was here
>>> geocproj.c: In function *ProjFwd*:
>>> geocproj.c:120:9: error: incompatible type for argument 1 of
>> *pj_fwd*
>>> /usr/include/proj_api.h:66:8: note: expected *projUV* but
>> argument is
>>> of type *projUV*
>>> geocproj.c: In function *ProjInv*:
>>> geocproj.c:202:14: warning: dereferencing *void ** pointer
>> [enabled by
>>> default]
>>> geocproj.c:202:14: error: request for member *inv* in something
>> not a
>>> structure or union
>>> geocproj.c:223:9: error: incompatible type for argument 1 of
>> *pj_inv*
>>> /usr/include/proj_api.h:67:8: note: expected *projUV* but
>> argument is
>>> of type *projUV*
>>>
>>> We can see conflicting type errors due to definitions of projUV in
>>> proj_api.h and projects.h.
>>>
>>> Opinions about?
>>>
>>> Cheers
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> --
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Software Developer
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From EMiller at dfg.ca.gov  Wed Apr 11 15:50:05 2012
From: EMiller at dfg.ca.gov (Eric Miller)
Date: Wed, 11 Apr 2012 15:50:05 -0700
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
	<CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
	<CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>
Message-ID: <4F85A82D.95FD.00E4.1@dfg.ca.gov>

José,

I don't have a strong opinion about the matter, but I will reiterate
what has already been written.

The "projects.h" file has been noted as internal/private for many
years.  I don't know when the "private" designation first appeared, but
it was at least five years ago.  The "proj_api.h" header was created to
provide the public api for consumers of the library. Again, this was
many years ago.

I might have waited for a 5.0 release to break the old API by removing
"projects.h", but not everybody follows or agrees with the major/minor
API compatibility concept.

As to why the structure should be hidden, I can only say that it is
pretty standard practice to hide the implementation details from the
outside world.  Usually, that insulates the outside world from changes
that would otherwise break their code.  For instance, if a particular
variable was renamed or removed from PJConsts, your application might
break.  Should the library internals be held captive to the outside
world for backwards compatibility? For how long?

See: http://en.wikipedia.org/wiki/Information_hiding

>>> On 4/11/2012 at  1:50 PM, José Luis García Pallero
<jgpallero at gmail.com> wrote:
> 
> Hello:
> 
> This function sounds good, but I have a couple of objections:
> 
> 1. First of all, the portability of old code. The programs that
until
> now include projects.h instead proj_api.h should be corrected. I
> propose to rename projects.h to projects_internal.h (for example)
and
> create a new projects.h that contains only #include<proj_api.h>
Then,
> it can be maintained in programs the #include<projects.h> and it
runs
> always: prior to 4.8.0 and 4.8.0 or higher. Previously on this same
> topic I explained that is impossible to check automatically the
> version of PROJ via PJ_VERSION and select the correct header to
> include because if projects.h is included after proj_api.h some
errors
> of conflicting types appears. Creating new projects.h could avoid
this
> gotcha.
> 
> 2. What about the old code that uses explicitly some fields of
projPJ
> structs? Why in 4.8.0 projPJ fields are not public? For old code
that
> uses explicitly fields of projPJ the solution of the point 1 is not
> valid. Another solution could be to define explicitly the PJ struct
in
> proj_api.h. Whith this solution plus the new projects.h I think that
> almost all old code should have not problems with new 4.8.0 version
> 
> Cheers
> 
> El día 11 de abril de 2012 19:27, Frank Warmerdam
> <warmerdam at pobox.com> escribió:
>> Eric,
>>
>> This seems reasonable.  Don't hesitate to file a ticket ideally with
a 
> patch.
>>
>> Best regards,
>> Frank
>>
>> On Wed, Apr 11, 2012 at 8:25 AM, Eric Miller <EMiller at dfg.ca.gov>
wrote:
>>> I think that being able to interrogate the projection definition to
know
>>> if it has an inverse is useful, so a function should be added to
>>> proj_api.h.
>>>
>>> Perhaps:
>>>
>>> int pj_has_inverse(projPJ);
>>>
>>> And in pj_utils.c
>>>
>>>
/******************************************************************/
>>> /*                                 pj_has_inverse()
>>>            */
>>> /*
>>>                   */
>>> /*            Return TRUE if this coordinate system object has    
*/
>>> /*            and inverse projection method.
>>>  */
>>>
/*****************************************************************/
>>> int pj_has_inverse( PJ *pj )
>>> {
>>>         return pj != NULL && pj->inv != NULL;
>>> }
>>>
>>> --
>>>
>>> Eric G. Miller
>>> Software Developer
>>> CA Dept. of Fish & Game
>>>
>>>
>>>>>> On 4/11/2012 at  3:30 AM, José Luis García Pallero
>>> <jgpallero at gmail.com>
>>> wrote:
>>>> Hello:
>>>>
>>>> As it is said in NEWS files from PROJ 4.8.0 now proj_api.h file
>>> should
>>>> be included in programs instead projects.h. I've tried to compile
my
>>>> old code (that has no problems with 4.7.0) and I've obtained a
>>> warning
>>>> and an error.
>>>> In my code I have a declaration like
>>>>
>>>> projPJ proyec;
>>>>
>>>> and I use them later as
>>>>
>>>> proyec = pj_init_plus(param);
>>>>
>>>> and more later, in order to check if a projections has inverse
step:
>>>>
>>>> if(proyec->inv==0)
>>>> {
>>>> ......
>>>> }
>>>>
>>>> If I compile the program using 4.8.0 version I obtain a warning
and
>>> an
>>>> error:
>>>>
>>>> geocproj.c:202:14: warning: dereferencing *void ** pointer
>>> [enabled by
>>>> default]
>>>> geocproj.c:202:14: error: request for member *inv* in something
>>> not a
>>>> structure or union
>>>>
>>>> Looking proj_api.h file, in both versions 4.7.0 and 4.8.0 I can
see
>>> the
>>>> block
>>>>
>>>> for 4.7.0
>>>>
>>>> #if !defined(PROJECTS_H)
>>>>     typedef struct { double u, v; } projUV;
>>>>     typedef void *projPJ;
>>>>     #define projXY projUV
>>>>     #define projLP projUV
>>>> #else
>>>>     typedef PJ *projPJ;
>>>> #   define projXY     XY
>>>> #   define projLP       LP
>>>> #endif
>>>>
>>>> for 4.8.0
>>>>
>>>> #if !defined(PROJECTS_H)
>>>>     typedef struct { double u, v; } projUV;
>>>>     typedef void *projPJ;
>>>>     #define projXY projUV
>>>>     #define projLP projUV
>>>>     typedef void *projCtx;
>>>> #else
>>>>     typedef PJ *projPJ;
>>>>     typedef projCtx_t *projCtx;
>>>> #   define projXY     XY
>>>> #   define projLP       LP
>>>> #endif
>>>>
>>>> Both are the same (except for the ctx context). In both if
>>> PROJECTS_H
>>>> is not defined (i.e. if projects.h was not included) the type
projPJ
>>>> is defined as void* instead PJ*. PJ is defined in projects.h. But
in
>>>> the include/ folder of 4.8.0 project.h was not copied, so it's
>>>> impossible to use it. So I can't use the 'inv' field and I
suppone
>>> no
>>>> PJ struct at all as projPJ was defined as void*. Then which is
the
>>>> correct way in order to use the new PROJ 4.8.0 version?
>>>>
>>>>
>>>>
>>>> On the other hand, suppose that 4.8.0 works well in my case only
>>>> including proj_api.h. Then my problem is that if I have not
>>> knowledge
>>>> about the version of PROJ in one computer, how can I proceed in
>>> order
>>>> to use the correct include depending versions.
>>>> First of all, can I use version 4.7.0 (for example) with only
>>>> #include<proj_api.h>? In my case the answer is NO because I
obtain
>>> the
>>>> same warning and error that in 4.8.0. Then I try:
>>>>
>>>> #include<proj_api.h>
>>>> #if PJ_VERSION<480
>>>> #include<projects.h>
>>>> #endif
>>>>
>>>> PJ_VERSION is defined in proj_api.h. I check if version is older
>>> than
>>>> 4.8.0 and try to include then projects.h. But I obtain some
errors:
>>>>
>>>> /usr/include/projects.h:139:33: error: conflicting types for
>>> *projUV*
>>>> /usr/include/proj_api.h:54:37: note: previous declaration of
>>> *projUV*
>>>> was here
>>>> geocproj.c: In function *ProjFwd*:
>>>> geocproj.c:120:9: error: incompatible type for argument 1 of
>>> *pj_fwd*
>>>> /usr/include/proj_api.h:66:8: note: expected *projUV* but
>>> argument is
>>>> of type *projUV*
>>>> geocproj.c: In function *ProjInv*:
>>>> geocproj.c:202:14: warning: dereferencing *void ** pointer
>>> [enabled by
>>>> default]
>>>> geocproj.c:202:14: error: request for member *inv* in something
>>> not a
>>>> structure or union
>>>> geocproj.c:223:9: error: incompatible type for argument 1 of
>>> *pj_inv*
>>>> /usr/include/proj_api.h:67:8: note: expected *projUV* but
>>> argument is
>>>> of type *projUV*
>>>>
>>>> We can see conflicting type errors due to definitions of projUV
in
>>>> proj_api.h and projects.h.
>>>>
>>>> Opinions about?
>>>>
>>>> Cheers




From warmerdam at pobox.com  Wed Apr 11 22:32:35 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Wed, 11 Apr 2012 22:32:35 -0700
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
	<CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
	<CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>
Message-ID: <CA+YzLBeAy_nGgEKSFzca7a1Gg1DYCYqjEW0uyy3s55c949gG8w@mail.gmail.com>

2012/4/11 José Luis García Pallero <jgpallero at gmail.com>:
> This function sounds good, but I have a couple of objections:
>
> 1. First of all, the portability of old code. The programs that until
> now include projects.h instead proj_api.h should be corrected. I
> propose to rename projects.h to projects_internal.h (for example) and
> create a new projects.h that contains only #include<proj_api.h> Then,
> it can be maintained in programs the #include<projects.h> and it runs
> always: prior to 4.8.0 and 4.8.0 or higher. Previously on this same
> topic I explained that is impossible to check automatically the
> version of PROJ via PJ_VERSION and select the correct header to
> include because if projects.h is included after proj_api.h some errors
> of conflicting types appears. Creating new projects.h could avoid this
> gotcha.

José,

On linux configure can check for projects.h and probe for versions.

On windows you are generally having to handle proj yourself so what
is the big issue about different versions?

I guess I just don't feel this as a serious issue.

> 2. What about the old code that uses explicitly some fields of projPJ
> structs? Why in 4.8.0 projPJ fields are not public? For old code that
> uses explicitly fields of projPJ the solution of the point 1 is not
> valid. Another solution could be to define explicitly the PJ struct in
> proj_api.h. Whith this solution plus the new projects.h I think that
> almost all old code should have not problems with new 4.8.0 version

A large part of the reason for making projects.h private was to break
the dependence of application on the particulars of the layout of the
projPJ structure!  So, if you really need it, just include projects.h and
manually copy that from the source distribution.  But if you want to
follow the public API contract then stick to proj_api.h.

I don't mean to be peevish, but to me this seems to be an issue from
half a decade ago.  I've certainly been advising all to migrate to proj_api.h
for a long time.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From jgpallero at gmail.com  Thu Apr 12 02:23:35 2012
From: jgpallero at gmail.com (=?ISO-8859-1?Q?Jos=E9_Luis_Garc=EDa_Pallero?=)
Date: Thu, 12 Apr 2012 11:23:35 +0200
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CA+YzLBeAy_nGgEKSFzca7a1Gg1DYCYqjEW0uyy3s55c949gG8w@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
	<CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
	<CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>
	<CA+YzLBeAy_nGgEKSFzca7a1Gg1DYCYqjEW0uyy3s55c949gG8w@mail.gmail.com>
Message-ID: <CAFemY3bV6_NxLuyeumyNVpO-A3MEaXhBr1vaCB96hYYSghhzOg@mail.gmail.com>

El día 12 de abril de 2012 07:32, Frank Warmerdam
<warmerdam at pobox.com> escribió:
> 2012/4/11 José Luis García Pallero <jgpallero at gmail.com>:
>> This function sounds good, but I have a couple of objections:
>>
>> 1. First of all, the portability of old code. The programs that until
>> now include projects.h instead proj_api.h should be corrected. I
>> propose to rename projects.h to projects_internal.h (for example) and
>> create a new projects.h that contains only #include<proj_api.h> Then,
>> it can be maintained in programs the #include<projects.h> and it runs
>> always: prior to 4.8.0 and 4.8.0 or higher. Previously on this same
>> topic I explained that is impossible to check automatically the
>> version of PROJ via PJ_VERSION and select the correct header to
>> include because if projects.h is included after proj_api.h some errors
>> of conflicting types appears. Creating new projects.h could avoid this
>> gotcha.
>
> José,
>
> On linux configure can check for projects.h and probe for versions.
>
> On windows you are generally having to handle proj yourself so what
> is the big issue about different versions?
>
> I guess I just don't feel this as a serious issue.
>
>> 2. What about the old code that uses explicitly some fields of projPJ
>> structs? Why in 4.8.0 projPJ fields are not public? For old code that
>> uses explicitly fields of projPJ the solution of the point 1 is not
>> valid. Another solution could be to define explicitly the PJ struct in
>> proj_api.h. Whith this solution plus the new projects.h I think that
>> almost all old code should have not problems with new 4.8.0 version
>
> A large part of the reason for making projects.h private was to break
> the dependence of application on the particulars of the layout of the
> projPJ structure!  So, if you really need it, just include projects.h and
> manually copy that from the source distribution.  But if you want to
> follow the public API contract then stick to proj_api.h.
>
> I don't mean to be peevish, but to me this seems to be an issue from
> half a decade ago.  I've certainly been advising all to migrate to proj_api.h
> for a long time.

OK, I understand. Thank you for your answers.

And about checking if a projection has inverse step, if I can't access
to projPJ->inv field I'll try to detect it via pj_get_errno_ref(). In
the source of pj_transform.c I can see that a projection that has not
inverse step returns an error code -17. This -17 is hardcoded in
pj_transform.c. Can you confirm that for no inverse step was always
-17 the error value, in old releases included?

Cheers

>
> Best regards,
> --
> ---------------------------------------+--------------------------------------
> I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
> light and sound - activate the windows | http://pobox.com/~warmerdam
> and watch the world go round - Rush    | Geospatial Software Developer
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj



-- 
*****************************************
José Luis García Pallero
jgpallero at gmail.com
(o<
/ / \
V_/_
Use Debian GNU/Linux and enjoy!
*****************************************


From warmerdam at pobox.com  Thu Apr 12 07:31:54 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu, 12 Apr 2012 07:31:54 -0700
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CAFemY3bV6_NxLuyeumyNVpO-A3MEaXhBr1vaCB96hYYSghhzOg@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
	<CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
	<CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>
	<CA+YzLBeAy_nGgEKSFzca7a1Gg1DYCYqjEW0uyy3s55c949gG8w@mail.gmail.com>
	<CAFemY3bV6_NxLuyeumyNVpO-A3MEaXhBr1vaCB96hYYSghhzOg@mail.gmail.com>
Message-ID: <CA+YzLBcC1u5-2TD3BSavzN-cQ0GOn1w-hMt7CvRCkbVbC+MXMQ@mail.gmail.com>

2012/4/12 José Luis García Pallero <jgpallero at gmail.com>:
> And about checking if a projection has inverse step, if I can't access
> to projPJ->inv field I'll try to detect it via pj_get_errno_ref(). In
> the source of pj_transform.c I can see that a projection that has not
> inverse step returns an error code -17. This -17 is hardcoded in
> pj_transform.c. Can you confirm that for no inverse step was always
> -17 the error value, in old releases included?

José,

This has not changed.

Best regards,

-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From judd.t at orbitalsystems.com  Thu Apr 12 13:28:07 2012
From: judd.t at orbitalsystems.com (Judd Taylor)
Date: Thu, 12 Apr 2012 20:28:07 +0000
Subject: [Proj] PROJ 4.8.0, projects.h and projPJ struct
In-Reply-To: <CA+YzLBeAy_nGgEKSFzca7a1Gg1DYCYqjEW0uyy3s55c949gG8w@mail.gmail.com>
References: <CAFemY3ZVzZvAcgv+2GgFdZWrrqhY9arVNsbSzgpVG8OsLumz3A@mail.gmail.com>
	<4F85400E.95FD.00E4.1@dfg.ca.gov>
	<CA+YzLBeTftsLqju8gZVd_3FCi5Wrb+Z45LarYyT+=mfh87G2eQ@mail.gmail.com>
	<CAFemY3b3jxVKnn=xuwPrvT6OBqK9HLBBu=QumJBifc2-_-HZrA@mail.gmail.com>,
	<CA+YzLBeAy_nGgEKSFzca7a1Gg1DYCYqjEW0uyy3s55c949gG8w@mail.gmail.com>
Message-ID: <221EAA4EB25F1F478A01D2AEEF47AB362B2BBD94@Exch.qos.loc>

Using configure assumes you're doing a C/C++ configure build, which is not true in the case of the PDL/Perl bindings, so it's not very helpful. Configure will compile a test program to pull the value. 

That's a lot to ask to build into every build system out there where someone wants to use the proj library.


The PDL binding works by first adding a low level layer that provides access to the library directly. This includes the interrogation of the projections available and the parameters. The next layer up uses a code generator at build time to generate a PDL::Transforms compatible code stub and documentation based on that projection information. So the reason I need the internal projection information is to be used in a code generator that works with PDL. 

Describing how the PDL code generators (called PDL::PP) work, is probably beyond the scope of this exchange. But in general it handles generating C (perlXS/C) code for all of the potential data types/array configurations where the binding could be called. The run time PDL code will select the proper C code for the case in hand. This enables C speed with perl ease of use. There's also lots of built in threading and parallelization optimizations possible. 


Other versioning issues aside, I think this feature should be enabled in the proj_api.h interface. In fact, I think all of the features that the proj binary uses should be enabled through the proj_api.h interface. Especially since "look at the proj source" has been the advice given on this list for so long. Taking care of those uses will likely enable backwards compatibility for all of the existing code out there that uses projects.h.


-Judd

____________________________
Judd Taylor
Software Engineer

Orbital Systems, Ltd.
3807 Carbon Rd.
Irving, TX 75038-3415

judd.t at orbitalsystems.com
(972) 915-3669 x127

________________________________________
From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] on behalf of Frank Warmerdam [warmerdam at pobox.com]
Sent: Thursday, April 12, 2012 12:32 AM
To: PROJ.4 and general Projections Discussions
Subject: Re: [Proj] PROJ 4.8.0, projects.h and projPJ struct

2012/4/11 José Luis García Pallero <jgpallero at gmail.com>:
> This function sounds good, but I have a couple of objections:
>
> 1. First of all, the portability of old code. The programs that until
> now include projects.h instead proj_api.h should be corrected. I
> propose to rename projects.h to projects_internal.h (for example) and
> create a new projects.h that contains only #include<proj_api.h> Then,
> it can be maintained in programs the #include<projects.h> and it runs
> always: prior to 4.8.0 and 4.8.0 or higher. Previously on this same
> topic I explained that is impossible to check automatically the
> version of PROJ via PJ_VERSION and select the correct header to
> include because if projects.h is included after proj_api.h some errors
> of conflicting types appears. Creating new projects.h could avoid this
> gotcha.

José,

On linux configure can check for projects.h and probe for versions.

On windows you are generally having to handle proj yourself so what
is the big issue about different versions?

I guess I just don't feel this as a serious issue.

> 2. What about the old code that uses explicitly some fields of projPJ
> structs? Why in 4.8.0 projPJ fields are not public? For old code that
> uses explicitly fields of projPJ the solution of the point 1 is not
> valid. Another solution could be to define explicitly the PJ struct in
> proj_api.h. Whith this solution plus the new projects.h I think that
> almost all old code should have not problems with new 4.8.0 version

A large part of the reason for making projects.h private was to break
the dependence of application on the particulars of the layout of the
projPJ structure!  So, if you really need it, just include projects.h and
manually copy that from the source distribution.  But if you want to
follow the public API contract then stick to proj_api.h.

I don't mean to be peevish, but to me this seems to be an issue from
half a decade ago.  I've certainly been advising all to migrate to proj_api.h
for a long time.

Best regards,
--
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From thatsanicehatyouhave at me.com  Fri Apr 13 15:57:10 2012
From: thatsanicehatyouhave at me.com (Demitri Muna)
Date: Fri, 13 Apr 2012 18:57:10 -0400
Subject: [Proj] proj4 string for perfect sphere
Message-ID: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>

Hi,

I'm an astronomer and I'm exploring the possibility of using GIS tools (specifically spatialite at the moment) with astronomical objects. I'm not conversant in GIS at the moment (or really the whole field), but I've made a little progress.

It seems that I need an appropriate SRID for what I'm doing. I want a perfect sphere, I'm working exclusively in degrees (a lat/lon analogy to ra/dec seems fine), and all of my points can be considered on the surface of the sphere. What SRID would be appropriate for this description?

I came up with this (probably laughably simplistic):

+proj=moll +ellps=sphere

In spatialite using that SRID (or none at all for that matter), I did this:

CREATE TABLE data (
id INTEGER PRIMARY KEY,
name TEXT NOT NULL,
coordinate BLOB
);

INSERT INTO data (name, coordinate) VALUES ('NGC23',GeomFromText('POINT(2.47254166667 25.9237777778)'));
INSERT INTO data (name, coordinate) VALUES ('NGC17',GeomFromText('POINT(2.77729166667 -12.1073136111)'));

These are degree values, and when I did this:

SELECT name, DISTANCE( GeomFromText('POINT(2.77729166667 -12.1073136111)'), coordinate ) FROM data;

I get:

NGC23       38.0323123776791                                                         
NGC17       0.0               

which apparently is the distance on a flat x-y cartesian plane, not the angular (or great circle) distance I'm looking for (38.0322481853 degrees).

Is the wrong SRID the problem in the first place?

Cheers,
Demitri



From warmerdam at pobox.com  Fri Apr 13 16:26:02 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Fri, 13 Apr 2012 16:26:02 -0700
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
Message-ID: <CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>

On Fri, Apr 13, 2012 at 3:57 PM, Demitri Muna
<thatsanicehatyouhave at me.com> wrote:
> Hi,
>
> I'm an astronomer and I'm exploring the possibility of using GIS tools (specifically spatialite at the moment) with astronomical objects. I'm not conversant in GIS at the moment (or really the whole field), but I've made a little progress.
>
> It seems that I need an appropriate SRID for what I'm doing. I want a perfect sphere, I'm working exclusively in degrees (a lat/lon analogy to ra/dec seems fine), and all of my points can be considered on the surface of the sphere. What SRID would be appropriate for this description?
>
> I came up with this (probably laughably simplistic):
>
> +proj=moll +ellps=sphere

Demitra,

I'm not not sure why you are using +proj=moll (Mollweide) if you are just
going to be working with lat/long degrees.  Instead you should use latlong.

eg.
+proj=latlong +ellps=sphere

However, if you want an existing SRID, you could use EPSG:4035 which is:

warmerdam at gdal:~$ gdalsrsinfo EPSG:4035
PROJ.4 : '+proj=longlat +a=6371000 +b=6371000 +no_defs '

OGC WKT :
GEOGCS["Unknown datum based upon the Authalic Sphere",
    DATUM["Not_specified_based_on_Authalic_Sphere",
        SPHEROID["Sphere",6371000,0,
            AUTHORITY["EPSG","7035"]],
        AUTHORITY["EPSG","6035"]],
    PRIMEM["Greenwich",0,
        AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.0174532925199433,
        AUTHORITY["EPSG","9108"]],
    AUTHORITY["EPSG","4035"]]

> In spatialite using that SRID (or none at all for that matter), I did this:
>
> CREATE TABLE data (
> id INTEGER PRIMARY KEY,
> name TEXT NOT NULL,
> coordinate BLOB
> );
>
> INSERT INTO data (name, coordinate) VALUES ('NGC23',GeomFromText('POINT(2.47254166667 25.9237777778)'));
> INSERT INTO data (name, coordinate) VALUES ('NGC17',GeomFromText('POINT(2.77729166667 -12.1073136111)'));
>
> These are degree values, and when I did this:
>
> SELECT name, DISTANCE( GeomFromText('POINT(2.77729166667 -12.1073136111)'), coordinate ) FROM data;
>
> I get:
>
> NGC23       38.0323123776791
> NGC17       0.0
>
> which apparently is the distance on a flat x-y cartesian plane, not the angular (or great circle) distance I'm looking for (38.0322481853 degrees).

If you want great circle distances (geodescics) you would need
something apart from the default distance operator.   If you just
wanted to do it at the commandline you could use the geod command from
PROJ.4.  If you want to do it in a database, I'd normally recommend
using the special "GEOGRAPHY" geometry type in PostGIS which is
oriented to calculations on a sphere, particularly using geodesics.

I'm not sure if there is an appropriate function in spatialite.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From thatsanicehatyouhave at me.com  Fri Apr 13 17:07:54 2012
From: thatsanicehatyouhave at me.com (Demitri Muna)
Date: Fri, 13 Apr 2012 20:07:54 -0400
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
	<CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
Message-ID: <69937597-AA84-4593-A756-0159A06270DA@me.com>

Hi Frank,

Thanks very much for the help!

On Apr 13, 2012, at 7:26 PM, Frank Warmerdam wrote:

> I'm not not sure why you are using +proj=moll (Mollweide) if you are just
> going to be working with lat/long degrees.  Instead you should use latlong.

Ah, I didn't see that option; that makes much more sense. I chose Mollweide when I came across this:
http://zerospace.org/gis/projections/mollweide.html

> However, if you want an existing SRID, you could use EPSG:4035 which is:

Ah, that one looks right!

> If you want great circle distances (geodescics) you would need
> something apart from the default distance operator.   If you just
> wanted to do it at the commandline you could use the geod command from
> PROJ.4.  If you want to do it in a database, I'd normally recommend
> using the special "GEOGRAPHY" geometry type in PostGIS which is
> oriented to calculations on a sphere, particularly using geodesics.

Let me step back a bit and explain what I am trying to do (I became focussed on the SRID detail!). I have two lists of coordinates (ra/dec in my field, but lat/lon on a perfect sphere is the same). I'm trying to find out how many of the points from list 1 matches those on list 2 to within some value, e.g. 5 arcsec. I want to load each list into [x], and for each object in the first list perform a search to see if it appears in the second list. I was hoping to take advantage of GIS spatial indexing to make this a fast operation - I'm guessing this is a simple operation in the field.

[x] above is some GIS tool that I'm trying to find. I'm a huge fan of PostgreSQL (and will at some point investigate PostGIS), but my first goal is to do this with a Python script for catalogs < ~100,000. If I have two simple lists, I don't want to have to go into PG, create the schemas, populate, etc. spatialite seemed perfect - create the db file on the fly, populate it from the script, do the search with the GIS tools, then throw the file away. Simple. (At least that's the idea.) It also can be used without requiring someone to install PG+PostGIS, and I can wrap the spatialite complexity in Python classes. If this can be done with another (e.g. command line) tool I'd love to hear about it.

> I'm not sure if there is an appropriate function in spatialite.

I was using the distance operator to test the geometry, which is how I got here. spatialite does seem to have a function:

GreatCircleLength( c Curve ) : Double precision

which is a little unclear to me how to use:

spatialite> GreatCircleLength(GeomFromText('LINESTRING(2.47254166667 25.9237777778, 2.77729166667 -12.1073136111)',4035))
---------------------------------------------------------------------------------------------                
4228993.04708947                                                                                             

Those are not degrees! :)

Thanks again for your help. I'm trying to build a bridge between the astronomy and GIS communities...

Cheers,
Demitri


From thatsanicehatyouhave at me.com  Fri Apr 13 18:24:11 2012
From: thatsanicehatyouhave at me.com (Demitri Muna)
Date: Fri, 13 Apr 2012 21:24:11 -0400
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <69937597-AA84-4593-A756-0159A06270DA@me.com>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
	<CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
	<69937597-AA84-4593-A756-0159A06270DA@me.com>
Message-ID: <F6E5C1A8-8C90-4505-8A25-29CFDE7E4B08@me.com>

Hi,

Quick update. Once I recognized 6371000 as the radius of the Earth in meters, I created my own SRID with these parameters (r = 1 radian as degrees):

"+proj=longlat +a=57.2957795 +b=57.2957795 +no_defs"

This worked perfectly:

> SELECT GreatCircleLength(GeomFromText('LINESTRING(2.47254166667 25.9237777778, 2.77729166667 -12.1073136111)',50000));
38.0322481765926

The correct answer! I would still appreciate your thoughts/advice on what I'm trying to do more generally.

Cheers,
Demitri


From robert.p.fischer-1 at nasa.gov  Fri Apr 13 19:16:41 2012
From: robert.p.fischer-1 at nasa.gov (Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY])
Date: Fri, 13 Apr 2012 21:16:41 -0500
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <F6E5C1A8-8C90-4505-8A25-29CFDE7E4B08@me.com>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
	<CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
	<69937597-AA84-4593-A756-0159A06270DA@me.com>,
	<F6E5C1A8-8C90-4505-8A25-29CFDE7E4B08@me.com>
Message-ID: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C4B@NDMSSCC06.ndc.nasa.gov>

My thoughts:

1. You can compute distance between two lat/lon points on a sphere using the Haversine formula or Vincenty's formula specialized to the sphere.  They are described at:
   http://en.wikipedia.org/wiki/Great-circle_distance
Code for Haversine is below.  Fix it up as needed.

2. If all you need is an R-Tree, just use an R-Tree.  Don't bring in a database just because it has an R-Tree built inside, that will distort your entire programming effort needlessly.  Here is an R-Tree that works in 2 or 3 dimensions.  It worked for me in just a couple of hours of work:
   https://github.com/nushoin/RTree
NOTE: There are multiple versions of this file floating around the Internet.  Use what works for you.

3. Your real problem is that you want an R-Tree on the surface of a sphere, not on a plane.  Projecting your points to a plane and then using an R-Tree will only work if the points are within a localized area (and you have a good bound on how much your distances might get distored).  The reason it's not a global solution is that any projection has certain areas of the sphere where nearby points get projected to far-away points on the plane.  Because a sphere is periodic and a plane is not.

There are two ways to solve this:
 a) Develop an R-Tree algorithm on the sphere --- i.e. for a periodic type of geometry.  This would involve some work, and there's no obvious evidence that anyone has done it.  But I believe it would work.

 b) Use a 3-D R-Tree, based on the Cartesian coordinates of your points in 3-D.  That approach is described here, and apparently works:
   http://blog.cleverelephant.ca/2009/11/postgis-gets-spherical-directors-cut.html


I quote: "How does this magic index work? The "trick" is to be as lazy as possible. I didn't want to write a whole new indexing scheme, and I already had a serviceable R-Tree index. What I needed to do was convert the lat/lon coordinates to a domain where the problems of the singularities at the poles and dateline would go away. The answer is to convert from spherical coordinates (lat/lon) relative to Greenwich into geocentric coordinates (x/y/z) relative to the center of earth. It's easy then to build a 3D R-Tree on the geocentric bounds of the features. Calculating the bounds in 3D is tricky, because the curvature of the features over the spherical surface must be respected, but once that is done, the index performs admirably."

Unfortunately, the author (Paul Ramsey) does not explain how he calculates his bounds in 3D.  I would pester him and find out.  Would be interested in hearing back if you do.

Either way, projections aren't needed or involved.  Hence, you shouldn't be using proj.4.  Using proj.4 on a "no-op" spherical projection doesn't make mush sense.  If all you want is a distance formula, that's really easy without proj.4.  Nor does a database really buy you much either, as far as I can tell.

Or, you could use the GEOGRAPHY data type that Paul Ramsey wrote about implementing in PostgreSQL:
    http://blog.opengeo.org/2009/11/04/postgis-gets-spherical/

If you end up using PostgreSQL in this way, I would not look at is a black box.  I would instead look at it as a convenient package of algorithms, already coded up, that you basically understand.

-- Bob


============================================
D2R = M_PI / 180
inline double sqr(double x) { return x*x; }

/** See: http://www.cs.nyu.edu/visual/home/proj/tiger/gisfaq.html
@return Distance (in degrees) */
extern double haversine_distance(
double lon1_deg, double lat1_deg,
double lon2_deg, double lat2_deg)
{
	// Convert inputs to degrees
	double lon1 = lon1_deg * D2R;
	double lat1 = lat1_deg * D2R;
	double lon2 = lon2_deg * D2R;
	double lat2 = lat2_deg * D2R;

	// Apply the Haversine Formula
	double dlon = lon2 - lon1;
	double dlat = lat2 - lat1;
	double a = sqr(sin(dlat/2)) + cos(lat1) * cos(lat2) * sqr(sin(dlon/2));
	double c = 2 * atan2( sqrt(a), sqrt(1-a) );
	return c * R2D;		// Convert to degrees
}


________________________________________
From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] On Behalf Of Demitri Muna [thatsanicehatyouhave at me.com]
Sent: Friday, April 13, 2012 9:24 PM
To: PROJ.4 and general Projections Discussions
Subject: Re: [Proj] proj4 string for perfect sphere

Hi,

Quick update. Once I recognized 6371000 as the radius of the Earth in meters, I created my own SRID with these parameters (r = 1 radian as degrees):

"+proj=longlat +a=57.2957795 +b=57.2957795 +no_defs"

This worked perfectly:

> SELECT GreatCircleLength(GeomFromText('LINESTRING(2.47254166667 25.9237777778, 2.77729166667 -12.1073136111)',50000));
38.0322481765926

The correct answer! I would still appreciate your thoughts/advice on what I'm trying to do more generally.

Cheers,
Demitri
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From pcreso at pcreso.com  Sun Apr 15 13:19:17 2012
From: pcreso at pcreso.com (pcreso at pcreso.com)
Date: Sun, 15 Apr 2012 13:19:17 -0700 (PDT)
Subject: [Proj] EPSG:3994 problem
Message-ID: <1334521157.49446.YahooMailClassic@web160704.mail.bf1.yahoo.com>

Hi,

I'm unable to get Proj to correctly return lat/long coordinates from Mercator41 data.
http://www.spatialreference.org/ref/epsg/3994/ does not list any proj4 string, Postgis proj4text or Mapserver values for this projection.

I have an ESRI binary grid with a projection definition (prj.adf) of:

Projection    MERCATOR
Datum         WGS84
Spheroid      WGS84
Units         METERS
Zunits        NO
Xshift        0.0
Yshift        0.0
Parameters    
 100  0  0.0 /* longitude of central meridian
 -41  0  0.0 /* latitude of true scale
0.0 /* false easting (meters)
0.0 /* false northing (meters)

gdalinfo fails to interpret this correctly, giving:

gdalinfo w001001.adf 
Driver: AIG/Arc/Info Binary Grid
Files: .
       ./#m41_to_ll#
       ./sta.adf
       ./w001001x.adf
       ./hdr.adf
       ./w001001.adf
       ./m41_to_ll
       ./whbr
       ./prj.adf
       ./dblbnd.adf
Size is 8817, 7901
Coordinate System is:
PROJCS["unnamed",
    GEOGCS["WGS 84",
        DATUM["WGS_1984",
            SPHEROID["WGS 84",6378137,298.257223563,
                AUTHORITY["EPSG","7030"]],
            TOWGS84[0,0,0,0,0,0,0],
            AUTHORITY["EPSG","6326"]],
        PRIMEM["Greenwich",0,
            AUTHORITY["EPSG","8901"]],
        UNIT["degree",0.0174532925199433,
            AUTHORITY["EPSG","9108"]],
        AUTHORITY["EPSG","4326"]],
    PROJECTION["Mercator_1SP"],
    PARAMETER["latitude_of_origin",100],
    PARAMETER["central_meridian",0],
    PARAMETER["scale_factor",1],
    PARAMETER["false_easting",-41],
    PARAMETER["false_northing",0],
    UNIT["METERS",1]]
Origin = (6199987.499999998137355,-3709987.500002769753337)
Pixel Size = (25.000000000000000,-25.000000000000000)
Corner Coordinates:
Upper Left  ( 6199987.500,-3709987.500) 
Lower Left  ( 6199987.500,-3907512.500) 
Upper Right ( 6420412.500,-3709987.500) 
Lower Right ( 6420412.500,-3907512.500) 
Center      ( 6310200.000,-3808750.000) 
Band 1 Block=256x4 Type=Float32, ColorInterp=Undefined
  Min=-2570.453 Max=2917.197 
  NoData Value=-3.4028234663852886e+38

With some obvious errors, like latitude of origin = 100... so just extracting the xyz values & trying to reproject with proj, I'm having problems.

I tried: g dal2xyz.py w001001.adf | head 
which returns:
6200000.000 -3710000.000 76.1574
6200025.000 -3710000.000 76.1842
...

which seems to work fine, but when I pass these Mercator41 coordinates into proj I'm unable to get a parameter list which gives the lat/long values for where I know these data sit. There is an offset of many miles. This suggests either my source data has an error in the coordinates (unlikely) or I don't understand enough about proj parameters (more likely)

Based on the contents of the above prj.adf file I have tried the following command:

echo "6200000.000 -3710000.000" | proj -If "%.5f" +proj=merc +lon_0=100 +lat_ts=-41 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +to +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
173.69093       -40.48353

I expected values around 174.66  -41.41 (the data is a 25m multibeam bathymetry grid around Cook Strait, between the North & South Islands of New Zealand) 


Any advice appreciated.

  Brent Wood



 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20120415/b444a446/attachment.html>

From Mikael.Rittri at carmenta.com  Mon Apr 16 02:27:38 2012
From: Mikael.Rittri at carmenta.com (Mikael Rittri)
Date: Mon, 16 Apr 2012 09:27:38 +0000
Subject: [Proj] EPSG:3994 problem
In-Reply-To: <1334521157.49446.YahooMailClassic@web160704.mail.bf1.yahoo.com>
References: <1334521157.49446.YahooMailClassic@web160704.mail.bf1.yahoo.com>
Message-ID: <E4AB3DD44D22854B819908379DE4AD49391BBB1F@SETHNWS023.carmenta.se>

Hello Brent,

I don't know why gdalinfo misinterprets the ESRI binary grid, or why spatialreference.org doesn't help.
But EPSG:3994 uses Mercator variant B (see http://www.epsg.org/guides/docs/G7-2.pdf), which is a
somewhat unusual variant.

On the other hand, the epsg file of Proj version 4.8.0 has the same definition that you tried:

# WGS 84 / Mercator 41
<3994> +proj=merc +lon_0=100 +lat_ts=-41 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  <>

which I believe is correct (lat_ts means latitude of true scale). Based on that, I can compute:

>proj +init=epsg:3994

100 0
0.00    0.00

101 41
84135.19        3767131.99

101 41.000009
84135.19        3767132.99

The first test point shows that the grid origin (zero easting, zero northing) is at
the equator at longitude 100 d E, which is what I would expect.

The other two test points shows that a difference of 0.000009 degrees in latitude,
near the latitude 41 N, gives a difference of about 1 meter in northing. This is also
what I would expect, since 41 N (and 41 S) are standard parallels, where the scale
should be true.  (Because 0.000009 degrees of latitude is about 1 meter.)

For your test point, I reproduce your results:

>proj -I +init=epsg:3994 -f "%.5f"

6200000.000 -3710000.000
173.69093       -40.48353

You say you didn't expect these results:

> I expected values around 174.66  -41.41

but I don't know if what you expected is correct or not. I have used Proj 4.8.0 that came with OSGeo4W.

On the other hand, in Proj 4.7.0 the epsg file had the entry

# WGS 84 / Mercator 41
<3994> +proj=merc +lon_0=100 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs  <>

which I think is very wrong.
    The EPSG definition of WGS 84 / Mercator 41 used to have the code 3752, but
this was deprecated in 2008 and replaced with 3994 (EPSG change request 2008.088).
I am not sure if the bad definition in Proj 4.7.0 had anything to do with that, though.

Best regards,

Mikael Rittri
Carmenta
Sweden
http://www.carmenta.com

________________________________
From: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] On Behalf Of pcreso at pcreso.com
Sent: den 15 april 2012 22:19
To: proj at lists.maptools.org
Subject: [Proj] EPSG:3994 problem

Hi,

I'm unable to get Proj to correctly return lat/long coordinates from Mercator41 data.
http://www.spatialreference.org/ref/epsg/3994/ does not list any proj4 string, Postgis proj4text or Mapserver values for this projection.

I have an ESRI binary grid with a projection definition (prj.adf) of:

Projection    MERCATOR
Datum         WGS84
Spheroid      WGS84
Units         METERS
Zunits        NO
Xshift        0.0
Yshift        0.0
Parameters
 100  0  0.0 /* longitude of central meridian
 -41  0  0.0 /* latitude of true scale
0.0 /* false easting (meters)
0.0 /* false northing (meters)

gdalinfo fails to interpret this correctly, giving:

gdalinfo w001001.adf
Driver: AIG/Arc/Info Binary Grid
Files: .
       ./#m41_to_ll#
       ./sta.adf
       ./w001001x.adf
       ./hdr.adf
       ./w001001.adf
       ./m41_to_ll
       ./whbr
       ./prj.adf
       ./dblbnd.adf
Size is 8817, 7901
Coordinate System is:
PROJCS["unnamed",
    GEOGCS["WGS 84",
        DATUM["WGS_1984",
            SPHEROID["WGS 84",6378137,298.257223563,
                AUTHORITY["EPSG","7030"]],
            TOWGS84[0,0,0,0,0,0,0],
            AUTHORITY["EPSG","6326"]],
        PRIMEM["Greenwich",0,
            AUTHORITY["EPSG","8901"]],
        UNIT["degree",0.0174532925199433,
            AUTHORITY["EPSG","9108"]],
        AUTHORITY["EPSG","4326"]],
    PROJECTION["Mercator_1SP"],
    PARAMETER["latitude_of_origin",100],
    PARAMETER["central_meridian",0],
    PARAMETER["scale_factor",1],
    PARAMETER["false_easting",-41],
    PARAMETER["false_northing",0],
    UNIT["METERS",1]]
Origin = (6199987.499999998137355,-3709987.500002769753337)
Pixel Size = (25.000000000000000,-25.000000000000000)
Corner Coordinates:
Upper Left  ( 6199987.500,-3709987.500)
Lower Left  ( 6199987.500,-3907512.500)
Upper Right ( 6420412.500,-3709987.500)
Lower Right ( 6420412.500,-3907512.500)
Center      ( 6310200.000,-3808750.000)
Band 1 Block=256x4 Type=Float32, ColorInterp=Undefined
  Min=-2570.453 Max=2917.197
  NoData Value=-3.4028234663852886e+38

With some obvious errors, like latitude of origin = 100... so just extracting the xyz values & trying to reproject with proj, I'm having problems.

I tried: g dal2xyz.py w001001.adf | head
which returns:
6200000.000 -3710000.000 76.1574
6200025.000 -3710000.000 76.1842
...

which seems to work fine, but when I pass these Mercator41 coordinates into proj I'm unable to get a parameter list which gives the lat/long values for where I know these data sit. There is an offset of many miles. This suggests either my source data has an error in the coordinates (unlikely) or I don't understand enough about proj parameters (more likely)

Based on the contents of the above prj.adf file I have tried the following command:

echo "6200000.000 -3710000.000" | proj -If "%.5f" +proj=merc +lon_0=100 +lat_ts=-41 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +to +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
173.69093       -40.48353

I expected values around 174.66  -41.41 (the data is a 25m multibeam bathymetry grid around Cook Strait, between the North & South Islands of New Zealand)


Any advice appreciated.

  Brent Wood






-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20120416/04946fd8/attachment.html>

From thatsanicehatyouhave at me.com  Mon Apr 16 14:58:43 2012
From: thatsanicehatyouhave at me.com (Demitri Muna)
Date: Mon, 16 Apr 2012 17:58:43 -0400
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C4B@NDMSSCC06.ndc.nasa.gov>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
	<CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
	<69937597-AA84-4593-A756-0159A06270DA@me.com>
	<F6E5C1A8-8C90-4505-8A25-29CFDE7E4B08@me.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C4B@NDMSSCC06.ndc.nasa.gov>
Message-ID: <6DADB502-BF23-4A8B-8DA6-2599D4E90A04@me.com>

Hi Bob,

Thanks very much for the extensive comments. The biggest thing I learned about GIS this week (starting from knowing nothing about it last week) is that calculations are primarily done on an XY plane which are projections of a curved surface. I had naively assumed going in that calculations and indices (e.g. spatialite) were optimized for the surface of a sphere.

On Apr 13, 2012, at 10:16 PM, Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY] wrote:

> 1. You can compute distance between two lat/lon points on a sphere using the Haversine formula or Vincenty's formula specialized to the sphere.  They are described at:
>   http://en.wikipedia.org/wiki/Great-circle_distance
> Code for Haversine is below.  Fix it up as needed.

Thanks for the code. I've been using the law of cosines and wasn't aware of the problem at small separations (though this seems to trade that problem for one at large separations).

> 2. If all you need is an R-Tree, just use an R-Tree.  Don't bring in a database just because it has an R-Tree built inside, that will distort your entire programming effort needlessly.  Here is an R-Tree that works in 2 or 3 dimensions.  It worked for me in just a couple of hours of work:
>   https://github.com/nushoin/RTree
> NOTE: There are multiple versions of this file floating around the Internet.  Use what works for you.

I was not familiar with this - I will look into it. You are right; the database isn't crucial for what I'm doing.

I will also look at the other links you mentioned. Since all my source points are in ra/dec (not 3D cartesian), there will be the computation hit to convert them back and forth. So I agree, proj.4 doesn't give me much.

As for indexing on a sphere, I've used this for a few years now with great success:

http://code.google.com/p/q3c/

Some details on how it works are here (though the first link is a little old):

http://www.sai.msu.su/~megera/wiki/SkyPixelization
http://lnfm1.sai.msu.ru/~math/docs/adass_proceedings2005.pdf

My GIS wanderings were to try to find a similar solution for smaller datasets without the overhead of creating a new schema, importing the data, etc. to take advantage of the optimized indexing. It might be in the end that implementing q3c into sqlite or through a Python interface is the best solution.

Thanks again for your suggestions.

Cheers,
Demitri




From robert.p.fischer-1 at nasa.gov  Mon Apr 16 15:24:26 2012
From: robert.p.fischer-1 at nasa.gov (Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY])
Date: Mon, 16 Apr 2012 17:24:26 -0500
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <6DADB502-BF23-4A8B-8DA6-2599D4E90A04@me.com>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
	<CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
	<69937597-AA84-4593-A756-0159A06270DA@me.com>
	<F6E5C1A8-8C90-4505-8A25-29CFDE7E4B08@me.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C4B@NDMSSCC06.ndc.nasa.gov>,
	<6DADB502-BF23-4A8B-8DA6-2599D4E90A04@me.com>
Message-ID: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C50@NDMSSCC06.ndc.nasa.gov>

> As for indexing on a sphere, I've used this for a few years now with
> great success:
> 
> http://code.google.com/p/q3c/
>
> My GIS wanderings were to try to find a similar solution for smaller
> datasets without the overhead of creating a new schema, importing the
> data, etc. to take advantage of the optimized indexing. It might be in
> the end that implementing q3c into sqlite or through a Python
> interface is the best solution.

Have you tried creating temporary schemas/tables in PostgreSQL with q3c?  Is that fast enough?  It sounds like that would be by far the easiest solution for you.

> Thanks very much for the extensive comments. The biggest thing I
> learned about GIS this week (starting from knowing nothing about it
> last week) is that calculations are primarily done on an XY plane
> which are projections of a curved surface. I had naively assumed going
> in that calculations and indices (e.g. spatialite) were optimized for
> the surface of a sphere.

Yes, that's what I surmised too.  The good news is, the technique works quite well for local computations, and you often choose whatever projection you like.  For example, area of a general closed curve on the surface of a sphere can be computed this way, using any old equal area projection centered near your polygon.

> > 1. You can compute distance between two lat/lon points on a sphere
> >   using the Haversine formula or Vincenty's formula specialized to
> >   the sphere.  They are described at:
> >   http://en.wikipedia.org/wiki/Great-circle_distance Code for
> >   Haversine is below.  Fix it up as needed.
> 
> Thanks for the code. I've been using the law of cosines and wasn't
> aware of the problem at small separations (though this seems to trade
> that problem for one at large separations).

Vincenty's formula solves that problem.

> I will also look at the other links you mentioned. Since all my source
> points are in ra/dec (not 3D cartesian), there will be the computation
> hit to convert them back and forth.

Is this signficant for your problem?


From support.mn at elisanet.fi  Tue Apr 17 02:54:11 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Tue, 17 Apr 2012 12:54:11 +0300 (EEST)
Subject: [Proj] proj4 string for perfect sphere
Message-ID: <24710052.2312161334656451443.JavaMail.support.mn@elisanet.fi>

Hello,

Demitri Muna [thatsanicehatyouhave at me.com] kirjoitti: 
> Hi Bob,
> 
> Thanks very much for the extensive comments. The biggest thing I learned about GIS this week (starting from knowing nothing about it last week) is that calculations are primarily done on an XY plane which are projections of a curved surface. I had naively assumed going in that calculations and indices (e.g. spatialite) were optimized for the surface of a sphere.
> 

A small notice for a beginner: If you want to stay accurate and avoid lots of trouble with projections generated errors never leave the sphere (or ellipsoid) just keep doing all calculations there - it is much easier (you don't need projections) and you will stay accurate for ever ;)

regards: Janne.




From Mikael.Rittri at carmenta.com  Tue Apr 17 04:12:45 2012
From: Mikael.Rittri at carmenta.com (Mikael Rittri)
Date: Tue, 17 Apr 2012 11:12:45 +0000
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <24710052.2312161334656451443.JavaMail.support.mn@elisanet.fi>
References: <24710052.2312161334656451443.JavaMail.support.mn@elisanet.fi>
Message-ID: <E4AB3DD44D22854B819908379DE4AD49391BBF49@SETHNWS023.carmenta.se>


Janne wrote:

> never leave the sphere (or ellipsoid) just keep doing all calculations
> there - it is much easier (you don't need projections)

"Much easier" are not the words I would use. "Much harder" fits
better. That's one reason projections are useful. 

Spherical geometry isn't too bad for simple problems (distance,
azimuth etc.), but just think of point-in-polygon test, area of polygon,
and so on. 

Regards,
Mikael Rittri
Carmenta
Sweden
http://www.carmenta.com

-----Original Message-----
From: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] On Behalf Of support.mn at elisanet.fi
Sent: den 17 april 2012 11:54
To: PROJ.4 and general Projections Discussions
Subject: Re: [Proj] proj4 string for perfect sphere

Hello,

Demitri Muna [thatsanicehatyouhave at me.com] kirjoitti: 
> Hi Bob,
> 
> Thanks very much for the extensive comments. The biggest thing I learned about GIS this week (starting from knowing nothing about it last week) is that calculations are primarily done on an XY plane which are projections of a curved surface. I had naively assumed going in that calculations and indices (e.g. spatialite) were optimized for the surface of a sphere.
> 

A small notice for a beginner: If you want to stay accurate and avoid lots of trouble with projections generated errors never leave the sphere (or ellipsoid) just keep doing all calculations there - it is much easier (you don't need projections) and you will stay accurate for ever ;)

regards: Janne.


_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj


From robert.p.fischer-1 at nasa.gov  Tue Apr 17 07:08:34 2012
From: robert.p.fischer-1 at nasa.gov (Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY])
Date: Tue, 17 Apr 2012 09:08:34 -0500
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <E4AB3DD44D22854B819908379DE4AD49391BBF49@SETHNWS023.carmenta.se>
References: <24710052.2312161334656451443.JavaMail.support.mn@elisanet.fi>,
	<E4AB3DD44D22854B819908379DE4AD49391BBF49@SETHNWS023.carmenta.se>
Message-ID: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C51@NDMSSCC06.ndc.nasa.gov>

I think it's hard to draw generalizations here, and these issues should be handled on a case-by-case basis.  The relevant issue is, WHAT ERRORS does working with a projection entail, and HOW BIG are they?  The answer varies for different problems.  In some cases, working with a projection is 100% accurate.  In that case, the projection can be seen as a way to derive computational geometry algorithms on a sphere.

As an aside, I was really surprised to see how little support CGAL offered for anything on a sphere.  Although the theory for all this is probably sitting in a geometry book somewhere (I even have an idea of where), the on-the-ground practice really lags behind.

-- Bob
________________________________________
From: proj-bounces at lists.maptools.org [proj-bounces at lists.maptools.org] On Behalf Of Mikael Rittri [Mikael.Rittri at carmenta.com]
Sent: Tuesday, April 17, 2012 7:12 AM
To: PROJ.4 and general Projections Discussions
Subject: Re: [Proj] proj4 string for perfect sphere

Janne wrote:

> never leave the sphere (or ellipsoid) just keep doing all calculations
> there - it is much easier (you don't need projections)

"Much easier" are not the words I would use. "Much harder" fits
better. That's one reason projections are useful.

Spherical geometry isn't too bad for simple problems (distance,
azimuth etc.), but just think of point-in-polygon test, area of polygon,
and so on.

Regards,
Mikael Rittri
Carmenta
Sweden
http://www.carmenta.com


From support.mn at elisanet.fi  Wed Apr 18 02:20:25 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Wed, 18 Apr 2012 12:20:25 +0300 (EEST)
Subject: [Proj] proj4 string for perfect sphere
Message-ID: <6420073.8592851334740825515.JavaMail.support.mn@elisanet.fi>

if you need any accuracy and robustness you'll never leave the
sphere (or ellipsoid). It is much easier to spend a little more time
with the general spherical calculation than to fix it afterwards for
150+ projections for each one with maybe a different method.

If you are afraid of the ellipsoid just use the sphere and add some
correction tables or similar methods since the difference is
usually very very small. Another trick is to project it to a single
standard projection which works all over the world and then
do the plane calculations if they are too hard to be done on the
sphere.

Nobody likes the situation where the calculations are made on any
distorted projection plane .. the error can be huge in some cases!
At least the routine should be robust to detect such distortions.. but
this adds a lot of programming effort.. so it is still better not to leave
the sphere (or ellipsoid) which is the general case and works
everywhere and with every projection.

regards: Janne.

--------------------------

Mikael Rittri [Mikael.Rittri at carmenta.com] kirjoitti: 
> 
> Janne wrote:
> 
> > never leave the sphere (or ellipsoid) just keep doing all calculations
> > there - it is much easier (you don't need projections)
> 
> "Much easier" are not the words I would use. "Much harder" fits
> better. That's one reason projections are useful. 
> 
> Spherical geometry isn't too bad for simple problems (distance,
> azimuth etc.), but just think of point-in-polygon test, area of polygon,
> and so on. 
> 
> Regards,
> Mikael Rittri
> Carmenta
> Sweden
> http://www.carmenta.com
> 
> -----Original Message-----
> From: proj-bounces at lists.maptools.org [mailto:proj-bounces at lists.maptools.org] On Behalf Of support.mn at elisanet.fi
> Sent: den 17 april 2012 11:54
> To: PROJ.4 and general Projections Discussions
> Subject: Re: [Proj] proj4 string for perfect sphere
> 
> Hello,
> 
> Demitri Muna [thatsanicehatyouhave at me.com] kirjoitti: 
> > Hi Bob,
> > 
> > Thanks very much for the extensive comments. The biggest thing I learned about GIS this week (starting from knowing nothing about it last week) is that calculations are primarily done on an XY plane which are projections of a curved surface. I had naively assumed going in that calculations and indices (e.g. spatialite) were optimized for the surface of a sphere.
> > 
> 
> A small notice for a beginner: If you want to stay accurate and avoid lots of trouble with projections generated errors never leave the sphere (or ellipsoid) just keep doing all calculations there - it is much easier (you don't need projections) and you will stay accurate for ever ;)
> 
> regards: Janne.
> 
> 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
> 



From support.mn at elisanet.fi  Wed Apr 18 02:29:05 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Wed, 18 Apr 2012 12:29:05 +0300 (EEST)
Subject: [Proj] proj4 string for perfect sphere
Message-ID: <16942481.8593731334741345769.JavaMail.support.mn@elisanet.fi>

"Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY]" [robert.p.fischer-1 at nasa.gov] kirjoitti: 
> Although the theory for all this is probably sitting in a geometry book somewhere..

I find this web site very informative for a beginner:

http://aa.quae.nl/en/index.html

this shows all the most basic calculations with examples

regards: Janne.





From support.mn at elisanet.fi  Wed Apr 18 02:38:58 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Wed, 18 Apr 2012 12:38:58 +0300 (EEST)
Subject: [Proj] proj4 string for perfect sphere
Message-ID: <25548613.8594601334741938692.JavaMail.support.mn@elisanet.fi>

> "Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY]" [robert.p.fischer-1 at nasa.gov] kirjoitti: 
> > Although the theory for all this is probably sitting in a geometry book somewhere..
> 
> I find this web site very informative for a beginner:
> 
> http://aa.quae.nl/en/index.html
> 
> this shows all the most basic calculations with examples
> 
> regards: Janne.
> 

still better link might be 

http://aa.quae.nl/en/reken/grootcirkel.html#1

regards: Janne.



From robert.p.fischer-1 at nasa.gov  Wed Apr 18 06:03:50 2012
From: robert.p.fischer-1 at nasa.gov (Bob Fischer)
Date: Wed, 18 Apr 2012 09:03:50 -0400
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <25548613.8594601334741938692.JavaMail.support.mn@elisanet.fi>
References: <25548613.8594601334741938692.JavaMail.support.mn@elisanet.fi>
Message-ID: <4F8EBBB6.4050906@nasa.gov>


>>> Although the theory for all this is probably sitting in a geometry book somewhere..
I was referring to this book:
http://www.amazon.com/Computational-Geometry-Surfaces-Performing-Cylinder/dp/1402002025


  Computational Geometry on Surfaces: Performing Computational Geometry
  on the Cylinder, the Sphere, the Torus, and the Cone [Hardcover]

Clara I. Grima 
<http://www.amazon.com/Clara-I.-Grima/e/B001K8V4VK/ref=ntt_athr_dp_pel_1><http://www.amazon.com/Computational-Geometry-Surfaces-Performing-Cylinder/dp/1402002025#> 
(Author), Alberto Márquez 
<http://www.amazon.com/s/ref=ntt_athr_dp_sr_2?_encoding=UTF8&sort=relevancerank&search-alias=books&ie=UTF8&field-author=Alberto%20M%C3%A1rquez> 
(Author)


>> I find this web site very informative for a beginner:
>>
>> http://aa.quae.nl/en/index.html
>> http://aa.quae.nl/en/reken/grootcirkel.html#1
>>
>> this shows all the most basic calculations with examples

Thanks, a lot of nice formulas there.  Unfortunately, it is not entirely 
accurate.  For example, Section 7, "Great Circle on a Topographic Map".  
The Gnomonic Projection is a counter-example to the statement: " It is 
impossible to make a map of the world on which all great circles run 
straight."

> if you need any accuracy and robustness you'll never leave the
> sphere (or ellipsoid). It is much easier to spend a little more time
> with the general spherical calculation than to fix it afterwards for
> 150+ projections for each one with maybe a different method.

This is not always the case.  Let me be specific.

Suppose you have a closed curve on a plane, and you want to know the 
area of it.  Suppose you have described the curve through a 
parameterization, that is functions x(z) and y(z), where z ranges from 0 
to 1.  Then you can use Green's Theorem (Surveyor's Formula) to 
integrate and find the area of this curve.

Now suppose you want to apply this to the sphere.  That is, you have a 
curve on the surface of the sphere described by theata(z) and phi(z).  
All you need to do is choose any old equal area projection.  The 
projection is described as x(theta,phi) and y(theta,phi).  Combine the 
two functions to get a curve on the plane, parameterized by z: 
x(theta(z), phi(z)), y(theta(z), phi(z)).  Now you can use Green's 
Theorem to integrate and find the area of this curve on the plane.  And 
since you chose an area-preserving projection, your answer will be exact.

This is essentially a derivation of Green's Theorem on a curved surface.

Another example where planar geometry can yield exact answers is the 
Cubed Sphere grid.  It uses the Gnomonic projection to create a regular 
grid made up of great circle paths.

> Another trick is to project it to a single
> standard projection which works all over the world and then
> do the plane calculations if they are too hard to be done on the
> sphere.
Unfortunately, there is no such thing.  Every projection has areas of 
the sphere where it fails miserably.  Not just places of high distortion 
(eg, Mercator near the poles), but also places where points that are 
close to each other on the globe end up far apart on the projection (eg, 
Mercator at the International Date Line).

-- Bob

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20120418/ac63e05d/attachment.html>

From thatsanicehatyouhave at me.com  Wed Apr 18 09:50:22 2012
From: thatsanicehatyouhave at me.com (Demitri Muna)
Date: Wed, 18 Apr 2012 12:50:22 -0400
Subject: [Proj] proj4 string for perfect sphere
In-Reply-To: <B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C50@NDMSSCC06.ndc.nasa.gov>
References: <EA863E5A-9E50-4F4F-8A60-0A1F003966B5@me.com>
	<CA+YzLBfnhw8z=Pm+y5aumh3bgA6jEmQ4kEQFw830gJgJV-Xqig@mail.gmail.com>
	<69937597-AA84-4593-A756-0159A06270DA@me.com>
	<F6E5C1A8-8C90-4505-8A25-29CFDE7E4B08@me.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C4B@NDMSSCC06.ndc.nasa.gov>
	<6DADB502-BF23-4A8B-8DA6-2599D4E90A04@me.com>
	<B236CA9710FCCF4EAB144418A4E47F9A8A6BB81C50@NDMSSCC06.ndc.nasa.gov>
Message-ID: <E14806BA-77E1-4C99-8AA4-F05C989893AF@me.com>

Hi,

Just to tie up a few loose ends, comments below. I've decided that GIS code, for the moment, won't give me significantly more functionality for what I need than other options that don't require the conceptual overhead, but thanks to everyone for all the comments and help. It's nice to learn about something new. :)

On Apr 16, 2012, at 6:24 PM, Fischer, Robert P. (GISS-6110)[COLUMBIA UNIVERSITY] wrote:

> Have you tried creating temporary schemas/tables in PostgreSQL with q3c?  Is that fast enough?  It sounds like that would be by far the easiest solution for you.

q3c is very fast; I haven't needed to even consider this option. My initial aim was to come up with an alternate tool that didn't require the overhead of a PostgreSQL installation for smaller data sets. But yes, for larger data sets, it's the only tool I use.

>> Thanks very much for the extensive comments. The biggest thing I
>> learned about GIS this week (starting from knowing nothing about it
>> last week) is that calculations are primarily done on an XY plane
>> which are projections of a curved surface. I had naively assumed going
>> in that calculations and indices (e.g. spatialite) were optimized for
>> the surface of a sphere.
> 
> Yes, that's what I surmised too.  The good news is, the technique works quite well for local computations, and you often choose whatever projection you like.  For example, area of a general closed curve on the surface of a sphere can be computed this way, using any old equal area projection centered near your polygon.

I see now how 2D projections are very beneficial for geographical concerns, but less so for astronomical. That said, I do see some potential uses for visualization, so I might be back at some point. :)

>> Thanks for the code. I've been using the law of cosines and wasn't
>> aware of the problem at small separations (though this seems to trade
>> that problem for one at large separations).
> 
> Vincenty's formula solves that problem.

Very glad to have learned that!

>> I will also look at the other links you mentioned. Since all my source
>> points are in ra/dec (not 3D cartesian), there will be the computation
>> hit to convert them back and forth.
> 
> Is this signficant for your problem?

For computing a correlation function with a data set of half a million point sources, yes. But for smaller data sets, no. (And as I mentioned above, I was looking for a tool for the latter.)

Cheers,
Demitri


From warmerdam at pobox.com  Thu Apr 19 23:09:25 2012
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu, 19 Apr 2012 23:09:25 -0700
Subject: [Proj] Datum Grid Files
Message-ID: <CA+YzLBdE8QA1KrGtQQttCpL3riR_dbC_mbm0oJj9EBU6Z-ywSg@mail.gmail.com>

Folks,

I have prepared a new file of grid shift files, similar to the 1.5
version, but with the .lla files converted into CTable2 format binary
files ready to go.  Were there other files folks wanted included?

Try out:

  http://download.osgeo.org/proj/proj-datumgrid-1.6RC1.zip

These don't actually have to be placed in the proj/nad source
directory.  They can be directly installed.  I'd like to somehow
streamline this whole procedure, but ideally without actually
including the grid shift files in the source distribution.

Best regards,
-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam, warmerdam at pobox.com
light and sound - activate the windows | http://pobox.com/~warmerdam
and watch the world go round - Rush    | Geospatial Software Developer


From support.mn at elisanet.fi  Sat Apr 21 03:14:20 2012
From: support.mn at elisanet.fi (support.mn at elisanet.fi)
Date: Sat, 21 Apr 2012 13:14:20 +0300 (EEST)
Subject: [Proj] proj4 string for perfect sphere
Message-ID: <15863766.8612671335003261365.JavaMail.support.mn@elisanet.fi>

Bob Fischer [robert.p.fischer-1 at nasa.gov] kirjoitti: 
> 
> > Another trick is to project it to a single
> > standard projection which works all over the world and then
> > do the plane calculations if they are too hard to be done on the
> > sphere.
> Unfortunately, there is no such thing.  Every projection has areas of 
> the sphere where it fails miserably.  Not just places of high distortion 
> (eg, Mercator near the poles), but also places where points that are 
> close to each other on the globe end up far apart on the projection (eg, 
> Mercator at the International Date Line).
> 

I meant more some projection which can be made to work all over the world
by first setting some initial parameters (for example transverse mercator
projection with some polar switches [axis swapping at poles]) to do some
detail work not to be forced to stay on the sphere (or ellipsoid). But this of
course limits your work to detail level only.

regards: Janne.



From mauceri at actgate.com  Tue Apr 24 01:04:00 2012
From: mauceri at actgate.com (Calogero Mauceri)
Date: Tue, 24 Apr 2012 10:04:00 +0200
Subject: [Proj] Fastest way to compare projetion definitions
Message-ID: <4F965E70.8080907@actgate.com>

Hi,

I need to compare two projections definitions say

projPJ p1 and projPJ p2

in order to compare them I'm currently getting their pro4 string 
definition, using pj_get_def, and comparing the two proj4 strings.
I wonder if there is a faster way to compare them.
I noticed there is an undocumented pj_compare_datums function in 
proj_api.h, but I'm not sure it can be used for that purpose.

Thanks,
     Calogero


From fyw at wwwtools.com  Wed Apr 25 08:56:55 2012
From: fyw at wwwtools.com (Frank Willett)
Date: Wed, 25 Apr 2012 09:56:55 -0600
Subject: [Proj] Confused about geos projection documentation
Message-ID: <4F981EC7.4000000@wwwtools.com>

Hi All,

In the new documentation for the geos projection at:
http://trac.osgeo.org/proj/wiki/proj%3Dgeos

I'm confused because it contains the following two statements:

sweep: the sweep angle axis of the viewing instrument. Can be x or y
(x is the default). (new in 4.8.0)

and

The sweep argument is used to tell proj.4 which on which axis the
outer-gimbal is rotating. The possible values are x or y, y being the
default.

Which of these statements is correct?

Thanks for your input :-)

Frank Willett


From martin.raspaud at smhi.se  Wed Apr 25 09:57:19 2012
From: martin.raspaud at smhi.se (Martin Raspaud)
Date: Wed, 25 Apr 2012 18:57:19 +0200
Subject: [Proj] Confused about geos projection documentation
In-Reply-To: <4F981EC7.4000000@wwwtools.com>
References: <4F981EC7.4000000@wwwtools.com>
Message-ID: <4F982CEF.2000306@smhi.se>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 25/04/12 17:56, Frank Willett wrote:
> Hi All,
> 
> In the new documentation for the geos projection at: 
> http://trac.osgeo.org/proj/wiki/proj%3Dgeos
> 
> I'm confused because it contains the following two statements:
> 
> sweep: the sweep angle axis of the viewing instrument. Can be x or
> y (x is the default). (new in 4.8.0)
> 
> and
> 
> The sweep argument is used to tell proj.4 which on which axis the 
> outer-gimbal is rotating. The possible values are x or y, y being
> the default.
> 
> Which of these statements is correct?

Hi Frank,

Indeed, this is confusing. At the moment, the default is x because of
a misunderstanding when submitting the patch. I send another patch to
change this to y, but it didn't make it in 4.8.0 as I hoped.

However, it is just a naming matter. The name x and y should just be
exchange, and this is what the latest patch is supposed to do. So that
not providing the +sweep argument would result is the same value
before and after the patch.

So, I will change the documentation to reflect the current state,
hoping that the last patch will make it soon in a 4.8.1 release...

Best regards,
Martin
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.14 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQEcBAEBAgAGBQJPmCzuAAoJEBdvyODiyJI4bmsIAKoC2+u1SAf2W4O385ZQp+kF
lMCaLifyUPHzDlL2ZpyweOL6l//jvWzioHkwD/UzQEkWsdqxc0cfYJ4KnTOByDPb
2Iv0PB7lqKsjYSTuANPE/YrwdXgikC4VWOH6nGfDDwzUEV/HEpczpbRqN6NRk41M
WUJ8eYmdcn67cWViVNVRFKxbOL243Z1Uj0GaU8bwpfgrAf9MPW/ZcSfhohdKPOlD
rQ88mtC/AbBxXyYCKtJonWDPJbVZ1Ar5XA2WGztOnGdcEgttbpN8eacshjxf0K5F
0CYx87m4aWfmxbnEMk7idHxpYopwJ29qygVscRoUOitbrIUQqHM8jsjMiOGt2TY=
=ZIaB
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: martin_raspaud.vcf
Type: text/x-vcard
Size: 303 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20120425/655e0841/attachment.vcf>

From fyw at wwwtools.com  Wed Apr 25 10:13:58 2012
From: fyw at wwwtools.com (Frank Willett)
Date: Wed, 25 Apr 2012 11:13:58 -0600
Subject: [Proj] Confused about geos projection documentation
In-Reply-To: <4F982CEF.2000306@smhi.se>
References: <4F981EC7.4000000@wwwtools.com> <4F982CEF.2000306@smhi.se>
Message-ID: <4F9830D6.3090900@wwwtools.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1



On 04/25/2012 10:57 AM, Martin Raspaud wrote:
> On 25/04/12 17:56, Frank Willett wrote:
>> Hi All,
> 
>> In the new documentation for the geos projection at: 
>> http://trac.osgeo.org/proj/wiki/proj%3Dgeos
> 
>> I'm confused because it contains the following two statements:
> 
>> sweep: the sweep angle axis of the viewing instrument. Can be x
>> or y (x is the default). (new in 4.8.0)
> 
>> and
> 
>> The sweep argument is used to tell proj.4 which on which axis the
>>  outer-gimbal is rotating. The possible values are x or y, y
>> being the default.
> 
>> Which of these statements is correct?
> 
> Hi Frank,
> 
> Indeed, this is confusing. At the moment, the default is x because
> of a misunderstanding when submitting the patch. I send another
> patch to change this to y, but it didn't make it in 4.8.0 as I
> hoped.
> 
> However, it is just a naming matter. The name x and y should just
> be exchange, and this is what the latest patch is supposed to do.
> So that not providing the +sweep argument would result is the same
> value before and after the patch.
> 
> So, I will change the documentation to reflect the current state, 
> hoping that the last patch will make it soon in a 4.8.1 release...
> 
> Best regards, Martin

Martin,

Thanks for your quick response.

I have an interface which needs to set the parameter to the default
and give the option to change the value. I am assuming that this means
that for now I make the default "x" and allow it to be changed to "y"
and in the 4.8.1 I will need to set the default to "y" and allow it to
be changed to "x".

If this is true, there is no need to reply to this message.

Thanks for the help :-)

Frank Willett
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk+YMLkACgkQWPOM7lMmKDCWdgCfVnOYnqS8xXLoxkonBN1DRRZm
VAQAnjYWvjn0cDYG+qgqx6qP1uGS8jfZ
=fqbF
-----END PGP SIGNATURE-----


From charles.karney at sri.com  Fri Apr 27 07:03:07 2012
From: charles.karney at sri.com (Charles Karney)
Date: Fri, 27 Apr 2012 10:03:07 -0400
Subject: [Proj] A couple of comments on computing geoid heights
Message-ID: <4F9AA71B.5070201@sri.com>

(1) GeographicLib now includes an example code, GeoidToGTX, that takes
one of the earth gravity models (egm84, egm96, or egm2008), computes the
geoid heights on a regular grid, and writes the results out as a gtx
file.  See

   http://geographiclib.sourceforge.net/html/gravity.html#gravityparallel

This allows

   http://download.osgeo.org/proj/vdatum/egm96_15/egm96_15.gtx

which has quantization errors of +/- 5mm and an incorrect origin, to be
corrected with

   GeoidToGTX egm96 4 egm96_15.gtx

Similarly,

   http://download.osgeo.org/proj/vdatum/egm08_25/egm08_25.gtx

which has an incorrect origin, can be corrected with

   GeoidToGTX egm2008 24 egm08_25.gtx

(Warning: this takes 8mins on my desktop, a 8 processor 2.66GHz system.
Computing the egm008 1' grid takes about 40mins.)

(2) I've quantified the penalty in accuracy the GeographicLib::Geoid
incurs by storing the geoid heights in a 2-byte format (versus the
4-byte format for gtx files).  See

   http://geographiclib.sourceforge.net/html/geoid.html#geoidinterp

The bottom line is that the penalty is barely noticeable if you use
bilinear interpolation (as proj does).  The advantage of a 2-byte format
is considerable for the 1' egm2008 model (0.5 GB for the world-wide grid
compared to 1 GB).

   --Charles


From lovell.joshyyy at gmail.com  Sun Apr 29 20:54:52 2012
From: lovell.joshyyy at gmail.com (Joshua Brown)
Date: Mon, 30 Apr 2012 04:54:52 +0100
Subject: [Proj] Using cs2cs.
Message-ID: <4F9E0D0C.9030506@gmail.com>

Hello,

I have a text file, with each OSGB32 value on a new line.

I want to convert from OSGB32 to WGS84 so I can map values to google earth.

How can I use cs2cs to convert the text file into WGS84?

Any help with this much appreciated,

Josh


From peifer at gmx.eu  Sun Apr 29 23:57:21 2012
From: peifer at gmx.eu (Hermann Peifer)
Date: Mon, 30 Apr 2012 08:57:21 +0200
Subject: [Proj] Using cs2cs.
In-Reply-To: <4F9E0D0C.9030506@gmail.com>
References: <4F9E0D0C.9030506@gmail.com>
Message-ID: <4F9E37D1.5010009@gmx.eu>

On 30/04/2012 05:54, Joshua Brown wrote:
> Hello,
>
> I have a text file, with each OSGB32 value on a new line.
>
> I want to convert from OSGB32 to WGS84 so I can map values to google earth.
>
> How can I use cs2cs to convert the text file into WGS84?
>

I assume that with OSGB32 you actually mean: OSGB36. I have recently 
been using [1] and [2] for getting from OSGB36 to WGS84. [2] is the more 
accurate alternative. You can find a link to OSTN02_NTv2.gsb at the PROJ 
wiki page, see [3].

Hermann

[1]
cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 
+x_0=400000 +y_0=-100000 +ellps=airy 
+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +to 
+proj=longlat +datum=WGS84

[2]
cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 
+x_0=400000 +y_0=-100000 +ellps=airy +nadgrids=./OSTN02_NTv2.gsb  +to 
+proj=longlat +datum=WGS84

[3] http://trac.osgeo.org/proj/wiki


From lovell.joshyyy at gmail.com  Mon Apr 30 02:27:04 2012
From: lovell.joshyyy at gmail.com (Joshua Brown)
Date: Mon, 30 Apr 2012 10:27:04 +0100
Subject: [Proj] Using cs2cs.
In-Reply-To: <4F9E37D1.5010009@gmx.eu>
References: <4F9E0D0C.9030506@gmail.com> <4F9E37D1.5010009@gmx.eu>
Message-ID: <4F9E5AE8.80104@gmail.com>

On 30/04/12 07:57, Hermann Peifer wrote:
> On 30/04/2012 05:54, Joshua Brown wrote:
>> Hello,
>>
>> I have a text file, with each OSGB32 value on a new line.
>>
>> I want to convert from OSGB32 to WGS84 so I can map values to google
>> earth.
>>
>> How can I use cs2cs to convert the text file into WGS84?
>>
> 
> I assume that with OSGB32 you actually mean: OSGB36. I have recently
> been using [1] and [2] for getting from OSGB36 to WGS84. [2] is the more
> accurate alternative. You can find a link to OSTN02_NTv2.gsb at the PROJ
> wiki page, see [3].
> 
> Hermann
> 
> [1]
> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
> +x_0=400000 +y_0=-100000 +ellps=airy
> +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +to
> +proj=longlat +datum=WGS84
> 
> [2]
> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
> +x_0=400000 +y_0=-100000 +ellps=airy +nadgrids=./OSTN02_NTv2.gsb  +to
> +proj=longlat +datum=WGS84
> 
> [3] http://trac.osgeo.org/proj/wiki

Thanks for the response,

Yes I do mean OSGB36 ... I think. I have National grid references in the
format "SH1234512456" that I need to convert.

I've had a go but I still don't think I understand the input and output
values.

Any help with this, much appreciated.


From peifer at gmx.eu  Mon Apr 30 05:03:51 2012
From: peifer at gmx.eu (Hermann Peifer)
Date: Mon, 30 Apr 2012 14:03:51 +0200
Subject: [Proj] Using cs2cs.
In-Reply-To: <4F9E5AE8.80104@gmail.com>
References: <4F9E0D0C.9030506@gmail.com> <4F9E37D1.5010009@gmx.eu>
	<4F9E5AE8.80104@gmail.com>
Message-ID: <4F9E7FA7.8080008@gmx.eu>

On 30/04/2012 11:27, Joshua Brown wrote:
> On 30/04/12 07:57, Hermann Peifer wrote:
>> On 30/04/2012 05:54, Joshua Brown wrote:
>>> Hello,
>>>
>>> I have a text file, with each OSGB32 value on a new line.
>>>
>>> I want to convert from OSGB32 to WGS84 so I can map values to google
>>> earth.
>>>
>>> How can I use cs2cs to convert the text file into WGS84?
>>>
>>
>> I assume that with OSGB32 you actually mean: OSGB36. I have recently
>> been using [1] and [2] for getting from OSGB36 to WGS84. [2] is the more
>> accurate alternative. You can find a link to OSTN02_NTv2.gsb at the PROJ
>> wiki page, see [3].
>>
>> Hermann
>>
>> [1]
>> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
>> +x_0=400000 +y_0=-100000 +ellps=airy
>> +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +to
>> +proj=longlat +datum=WGS84
>>
>> [2]
>> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
>> +x_0=400000 +y_0=-100000 +ellps=airy +nadgrids=./OSTN02_NTv2.gsb  +to
>> +proj=longlat +datum=WGS84
>>
>> [3] http://trac.osgeo.org/proj/wiki
>
> Thanks for the response,
>
> Yes I do mean OSGB36 ... I think. I have National grid references in the
> format "SH1234512456" that I need to convert.
>

You have to pre-process your grid references in order to get Easting and 
Northing values in metres from the false origin of the grid. The 
2-letter code "SH" basically means that you have to add 200000 metres to 
your Easting value 12345 and 300000 metres to your Northing value of 
12456. Once the pre-processing is done, you can use cs2cs as suggested 
above, e.g.:

$ echo $((200000 + 12345)) $((300000 + 12456)) |
cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 
+x_0=400000 +y_0=-100000 +ellps=airy 
+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +to 
+proj=longlat +datum=WGS84

# ---- From Coordinate System ----
#Transverse Mercator
#       Cyl, Sph&Ell
# +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000
# +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489
# ---- To Coordinate System ----
#Lat/long (Geodetic alias)
#
# +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0

-4.777201       52.677222 52.494866

For the individual offsets by 2-letter code, you could have a looks at:
http://www.ordnancesurvey.co.uk/oswebsite/support/knowledgebase/calculating-distances-using-national-grid-references.html

Hermann


From lovell.joshyyy at gmail.com  Mon Apr 30 06:03:31 2012
From: lovell.joshyyy at gmail.com (Joshua Brown)
Date: Mon, 30 Apr 2012 14:03:31 +0100
Subject: [Proj] Using cs2cs.
In-Reply-To: <4F9E7FA7.8080008@gmx.eu>
References: <4F9E0D0C.9030506@gmail.com> <4F9E37D1.5010009@gmx.eu>
	<4F9E5AE8.80104@gmail.com> <4F9E7FA7.8080008@gmx.eu>
Message-ID: <4F9E8DA3.7090606@gmail.com>

On 30/04/12 13:03, Hermann Peifer wrote:
> On 30/04/2012 11:27, Joshua Brown wrote:
>> On 30/04/12 07:57, Hermann Peifer wrote:
>>> On 30/04/2012 05:54, Joshua Brown wrote:
>>>> Hello,
>>>>
>>>> I have a text file, with each OSGB32 value on a new line.
>>>>
>>>> I want to convert from OSGB32 to WGS84 so I can map values to google
>>>> earth.
>>>>
>>>> How can I use cs2cs to convert the text file into WGS84?
>>>>
>>>
>>> I assume that with OSGB32 you actually mean: OSGB36. I have recently
>>> been using [1] and [2] for getting from OSGB36 to WGS84. [2] is the more
>>> accurate alternative. You can find a link to OSTN02_NTv2.gsb at the PROJ
>>> wiki page, see [3].
>>>
>>> Hermann
>>>
>>> [1]
>>> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
>>> +x_0=400000 +y_0=-100000 +ellps=airy
>>> +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +to
>>> +proj=longlat +datum=WGS84
>>>
>>> [2]
>>> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
>>> +x_0=400000 +y_0=-100000 +ellps=airy +nadgrids=./OSTN02_NTv2.gsb  +to
>>> +proj=longlat +datum=WGS84
>>>
>>> [3] http://trac.osgeo.org/proj/wiki
>>
>> Thanks for the response,
>>
>> Yes I do mean OSGB36 ... I think. I have National grid references in the
>> format "SH1234512456" that I need to convert.
>>
> 
> You have to pre-process your grid references in order to get Easting and
> Northing values in metres from the false origin of the grid. The
> 2-letter code "SH" basically means that you have to add 200000 metres to
> your Easting value 12345 and 300000 metres to your Northing value of
> 12456. Once the pre-processing is done, you can use cs2cs as suggested
> above, e.g.:
> 
> $ echo $((200000 + 12345)) $((300000 + 12456)) |
> cs2cs -v -f "%.6f" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717
> +x_0=400000 +y_0=-100000 +ellps=airy
> +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +to
> +proj=longlat +datum=WGS84
> 
> # ---- From Coordinate System ----
> #Transverse Mercator
> #       Cyl, Sph&Ell
> # +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000
> # +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489
> # ---- To Coordinate System ----
> #Lat/long (Geodetic alias)
> #
> # +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0
> 
> -4.777201       52.677222 52.494866
> 
> For the individual offsets by 2-letter code, you could have a looks at:
> http://www.ordnancesurvey.co.uk/oswebsite/support/knowledgebase/calculating-distances-using-national-grid-references.html
> 
> 
> Hermann
Thanks for this, I think I've got it sorted. :)


From nhopton at gmail.com  Mon Apr 30 14:31:24 2012
From: nhopton at gmail.com (Nick Hopton)
Date: Mon, 30 Apr 2012 22:31:24 +0100
Subject: [Proj] Proj Digest, Vol 95, Issue 19
In-Reply-To: <mailman.1.1335805201.28090.proj@lists.maptools.org>
References: <mailman.1.1335805201.28090.proj@lists.maptools.org>
Message-ID: <CA+Nt1_=oWyNTmnPLOgHb3Sw63azPXkRuwcGrOJWmy9vfxqYe4g@mail.gmail.com>

> You have to pre-process your grid references in order to get Easting and
> Northing values in metres from the false origin of the grid. The
> 2-letter code "SH" basically means that you have to add 200000 metres to
> your Easting value 12345 and 300000 metres to your Northing value of
> 12456. Once the pre-processing is done, you can use cs2cs as suggested
> above...

The National Grid Reference Converter will batch convert OS grid
references to coordinates:

http://digimap.edina.ac.uk/webhelp/os/data_information/os_data_issues/ng_converter.htm

-- 
Nick Hopton, Caversham, Reading, England.


