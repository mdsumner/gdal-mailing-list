From a.furieri at lqt.it  Tue Apr  2 00:45:46 2019
From: a.furieri at lqt.it (a.furieri at lqt.it)
Date: Tue, 02 Apr 2019 09:45:46 +0200
Subject: [PROJ] About PROJ.6: C source sample
Message-ID: <6e6f72b527d02acf38183de6e026947c@lqt.it>

Hi all,

In the last week I was working on integrating PROJ.6 support
in SpatiaLite, and I noticed few glitches probably worth
to be discussed.
For the sake of clarity I'll send a distinct post for
each singe glitch.

-------

First of all I noticed something disturbing in the
C source sample at Chapter 10.1 "Quick Start".

printf ("longitude: %g, latitude: %g\n", b.lp.lam, b.lp.phi);

this is someway misleading, because it prints longitudes
and latitudes expressed in Radians; I suppose that the
following patch printing angular coords in Degrees would
be more appropriate:

printf ("longitude: %g, latitude: %g\n",
     proj_todeg(b.lp.lam), proj_todeg(b.lp.phi));

it's not really a big issue, but it may be disturbing,
unclear or puzzling for developers having their first
approach with PROJ.6 (as it happened to me).

bye Sandro

From a.furieri at lqt.it  Tue Apr  2 00:54:13 2019
From: a.furieri at lqt.it (a.furieri at lqt.it)
Date: Tue, 02 Apr 2019 09:54:13 +0200
Subject: [PROJ] =?utf-8?q?About_PROJ=2E6=3A_Radians_or_Degrees_=3F?=
Message-ID: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>

the second glitch I noticed is about some inconsistency
in requiring angular coordinates expressed in Radians
or Degrees.

I always used proj_trans_generic() in SpatiaLite, and
I experienced several strong headaches before guessing
by trial and error what really were the expectations of
PROJ.6 about angular coordinates.
the documentation is very cryptic/incomplete about this
very critical and absolutely relevant detail.
this is what I've discovered after many practical tests:

- if the PJ transformation object has been created by
   proj_create() angular coordinates are expected to be
   passed back and forth converting to/form Radians.
- but (rather surprisingly) if PJ has been create by
   proj_create_crs_to_crs() angular coordinates must
   be passed back and forth directly expressed in
   Degrees; there is no need to convert in Radians.

the real problem is not in this sudden change of
behaviour; it's someway inconsistent and unexpected,
but it's not a big issue once you are well aware
of it.
the real problem is that this absolutely critical
point seems to be completely ignored by the
documentation.
may be that adding a second and third C samples
could be very useful so to clarify any possible
doubt.

bye Sandro

From kreve at sdfe.dk  Tue Apr  2 01:14:16 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 08:14:16 +0000
Subject: [PROJ] About PROJ.6: C source sample
In-Reply-To: <6e6f72b527d02acf38183de6e026947c@lqt.it>
References: <6e6f72b527d02acf38183de6e026947c@lqt.it>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10A66E@S000014.PROD.SITAD.DK>

Hi Sandro,

I think what is really needed is a general update of the example
code to better use PROJ 6 capabilities. I've added a ticket [0] about it
and at some point I will get around to fixing it.

Thanks for highlighting the issue. Generally speaking we are a lot
behind with the docs. Even has been busy writing the code and the
rest of us are still trying to keep up with the all the changes. It is
not ideal, but it is what it is.

/Kristian

[0] https://github.com/OSGeo/proj.4/issues/1403


-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af a.furieri at lqt.it
Sendt: 2. april 2019 09:46
Til: proj at lists.osgeo.org
Emne: [PROJ] About PROJ.6: C source sample

Hi all,

In the last week I was working on integrating PROJ.6 support
in SpatiaLite, and I noticed few glitches probably worth
to be discussed.
For the sake of clarity I'll send a distinct post for
each singe glitch.

-------

First of all I noticed something disturbing in the
C source sample at Chapter 10.1 "Quick Start".

printf ("longitude: %g, latitude: %g\n", b.lp.lam, b.lp.phi);

this is someway misleading, because it prints longitudes
and latitudes expressed in Radians; I suppose that the
following patch printing angular coords in Degrees would
be more appropriate:

printf ("longitude: %g, latitude: %g\n",
     proj_todeg(b.lp.lam), proj_todeg(b.lp.phi));

it's not really a big issue, but it may be disturbing,
unclear or puzzling for developers having their first
approach with PROJ.6 (as it happened to me).

bye Sandro
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From kreve at sdfe.dk  Tue Apr  2 01:21:32 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 08:21:32 +0000
Subject: [PROJ] About PROJ.6: Radians or Degrees ?
In-Reply-To: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>
References: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10A699@S000014.PROD.SITAD.DK>

I agree that the documenation of this could be better. Suggestions
for improvements are appreciated. Pull requests that improve
the docs are also greatly appreciated :-)

Your conclusions based on your tests are not exhaustive. Is is
possible to have proj_create() return degrees instead of radians
by adding a unitconvert step to a pipeline. Similarly,
proj_create_crs_to_crs() can theoretically return a PJ that outputs
radians instead of degrees (not sure if it actually is the case currently). 

Use proj_angular_input() [0] and proj_angular_output() [1] to determine
what a PJ expects and returns.

The reasons for this somewhat complicated situation is a combination
of backwards compliance and conforming to the ISO19111 standard at the
same time. 

/Kristian

[0] https://proj4.org/development/reference/functions.html#c.proj_angular_input
[1] https://proj4.org/development/reference/functions.html#c.proj_angular_output


-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af a.furieri at lqt.it
Sendt: 2. april 2019 09:54
Til: proj at lists.osgeo.org
Emne: [PROJ] About PROJ.6: Radians or Degrees ?

the second glitch I noticed is about some inconsistency
in requiring angular coordinates expressed in Radians
or Degrees.

I always used proj_trans_generic() in SpatiaLite, and
I experienced several strong headaches before guessing
by trial and error what really were the expectations of
PROJ.6 about angular coordinates.
the documentation is very cryptic/incomplete about this
very critical and absolutely relevant detail.
this is what I've discovered after many practical tests:

- if the PJ transformation object has been created by
   proj_create() angular coordinates are expected to be
   passed back and forth converting to/form Radians.
- but (rather surprisingly) if PJ has been create by
   proj_create_crs_to_crs() angular coordinates must
   be passed back and forth directly expressed in
   Degrees; there is no need to convert in Radians.

the real problem is not in this sudden change of
behaviour; it's someway inconsistent and unexpected,
but it's not a big issue once you are well aware
of it.
the real problem is that this absolutely critical
point seems to be completely ignored by the
documentation.
may be that adding a second and third C samples
could be very useful so to clarify any possible
doubt.

bye Sandro
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From a.furieri at lqt.it  Tue Apr  2 01:23:34 2019
From: a.furieri at lqt.it (a.furieri at lqt.it)
Date: Tue, 02 Apr 2019 10:23:34 +0200
Subject: [PROJ] About PROJ.6: inconsistent error reporting
Message-ID: <df9f322b968bad751add896ba76e9477@lqt.it>

the third (and last) glitch I noticed in PROJ.6 is
about some inconsistent error reporting.

first example:
sometimes both proj_as_proj_string() and/or proj_as_wkt()
can fail then returning a NULL pointer (and this is
absolutely ok).

the puzzling behavior is that an error message like

"Unsupported conversion method: XXX"

will be printed on the standard error, but "errno" will
still remain set to its previous value.
the opposite will be obviously more useful, i.e. setting
"errno" to some appropriate value avoiding to print an
error message on stderr.

-----

second example:
more or less the same is for proj_create(), as shown
in the following example:

PJ *x = proj_create(0, "This is a bogus CRS");

this call will obviously fail returning NULL; what's
unexpected is that an error message:

"proj_create: unrecognized format/unknown name"

will be printed on stderr, but errno will remain set
to its previous value.

and to add even more confusion, attempting to execute
the following call:

PJ *x = proj_create(0, "+proj=utm +zone=32 +ellps=WGS_bogus");

will print on stderr the following message:

"error -9: unknown elliptical parameter name"

but will also (correctly) set "errno" to -9

it looks like if proj_create() can report errors
from a partially broken string, but fails to
report any error in the case of a completely
malformed string.

bye Sandro

From kreve at sdfe.dk  Tue Apr  2 01:42:18 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 08:42:18 +0000
Subject: [PROJ] About PROJ.6: inconsistent error reporting
In-Reply-To: <df9f322b968bad751add896ba76e9477@lqt.it>
References: <df9f322b968bad751add896ba76e9477@lqt.it>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10A6F4@S000014.PROD.SITAD.DK>

This is definitely something that needs to be dealt with. Good catch!

As far as I can tell the problem is that errors that occur in the new
C++ code are handled as exceptions without setting the internal
PROJ errno. Eventually the exceptions are dealt with by logging
an error message to stderr. There are two solutions:

1. Have proj_create() issue a generic errno when catching an 
exception, or

2. Set an appropriate PROJ errno when raising an exception
in the ISO19111 C++ code.

The first is the simplest but may not be suitable for all situations.
The seconds is probably the best way to handle this but the fix will
Involve a lot more work.

Even, do you have an opinion on which of the above roads to follow.
Or perhaps a better solution?

/Kristian

-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af a.furieri at lqt.it
Sendt: 2. april 2019 10:24
Til: proj at lists.osgeo.org
Emne: [PROJ] About PROJ.6: inconsistent error reporting

the third (and last) glitch I noticed in PROJ.6 is
about some inconsistent error reporting.

first example:
sometimes both proj_as_proj_string() and/or proj_as_wkt()
can fail then returning a NULL pointer (and this is
absolutely ok).

the puzzling behavior is that an error message like

"Unsupported conversion method: XXX"

will be printed on the standard error, but "errno" will
still remain set to its previous value.
the opposite will be obviously more useful, i.e. setting
"errno" to some appropriate value avoiding to print an
error message on stderr.

-----

second example:
more or less the same is for proj_create(), as shown
in the following example:

PJ *x = proj_create(0, "This is a bogus CRS");

this call will obviously fail returning NULL; what's
unexpected is that an error message:

"proj_create: unrecognized format/unknown name"

will be printed on stderr, but errno will remain set
to its previous value.

and to add even more confusion, attempting to execute
the following call:

PJ *x = proj_create(0, "+proj=utm +zone=32 +ellps=WGS_bogus");

will print on stderr the following message:

"error -9: unknown elliptical parameter name"

but will also (correctly) set "errno" to -9

it looks like if proj_create() can report errors
from a partially broken string, but fails to
report any error in the case of a completely
malformed string.

bye Sandro
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From oliver.eichler at dspsolutions.de  Tue Apr  2 01:38:45 2019
From: oliver.eichler at dspsolutions.de (Oliver Eichler)
Date: Tue, 02 Apr 2019 10:38:45 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
Message-ID: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>

Hi,

I am working on the transition of QMapShack from version 4 to version 5 
API. So far so good. There is only on thing that breaks. The use of EPSG 
codes for projection strings.

That's what I try to do:

     // used PROJ version: 6.0.0
     // PJ * pj = proj_create(PJ_DEFAULT_CTX, "EPSG:3395");      // [1] 
result for x and y is inf
     PJ * pj = proj_create(PJ_DEFAULT_CTX, "+proj=merc");        // [2] 
result is expected one
     // PJ * pj = proj_create(PJ_DEFAULT_CTX, "+init=EPSG:3395") // [3] 
pj is nullptr
     PJ_COORD pt = {11 * DEG_TO_RAD, 48 * DEG_TO_RAD};
     size_t s = proj_trans_generic(pj, PJ_FWD,
                                 &pt.xy.x, 0, 1,
                                 &pt.xy.y, 0, 1,
                                 0,0,0,
                                 0,0,0);


If I use [1] to create a PJ object I succeed with a pointer. However if 
I use it in proj_trans_generic() the result for x and y ins INF.

Version [2] is fine and works as expected.

Version [3] fails to create a PJ object, but as far as I understand the 
docs this is perfectly fine.

So how is this intended to work? Maybe a bit of background about this: 
QMapShack addresses consumers not scientific users. The experience of 
the last years revealed that it is much easier to tell a user to use an 
EPSG code as projection rather than a lengthy "+proj=..." string with 
all kinds of possibilities to introduce typos. That's why I would like 
to keep the possibility to use EPSSG codes.


Thanks for feedback

Oliver


From kreve at sdfe.dk  Tue Apr  2 02:04:19 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 09:04:19 +0000
Subject: [PROJ] Release schedule changes
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10A753@S000014.PROD.SITAD.DK>

All,

It has become clear that we need to add a few functions to the API
for easier of adaptation of PROJ 6 in existing software. For this reason
I am changing the schedule a bit so that the next version coming out
will be version 6.1.0 and not 6.0.1. This is still supposed to be released
on May 1st.

In particular, the proj_normalize_for_visualization() function [0] has been
requested to be released as soon as possible. To avoid multiple home-made
versions of the same code this will be part of the next release.

The full release schedule until version 7.0.0 is as always kept track of
on GitHub: https://github.com/OSGeo/proj.4/milestones?direction=asc&sort=due_date&state=open

/Kristian

[0] https://github.com/OSGeo/proj.4/pull/1387
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190402/cd67575c/attachment-0001.html>

From even.rouault at spatialys.com  Tue Apr  2 03:26:45 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 02 Apr 2019 12:26:45 +0200
Subject: [PROJ] About PROJ.6: Radians or Degrees ?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF10A699@S000014.PROD.SITAD.DK>
References: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>
 <2E885BB293AF0448A0181138489E9A0EAF10A699@S000014.PROD.SITAD.DK>
Message-ID: <3004341.PxNJ42jIk2@even-i700>

On mardi 2 avril 2019 08:21:32 CEST Kristian Evers wrote:
> I agree that the documenation of this could be better. Suggestions
> for improvements are appreciated. Pull requests that improve
> the docs are also greatly appreciated :-)
> 
> Your conclusions based on your tests are not exhaustive. Is is
> possible to have proj_create() return degrees instead of radians
> by adding a unitconvert step to a pipeline.

> Similarly,
> proj_create_crs_to_crs() can theoretically return a PJ that outputs
> radians instead of degrees (not sure if it actually is the case currently).

Without adding extra definitions in proj.db, I don't have in mind how radians 
could be expected or returned. But if you use EPSG:4807 (NTF (Paris)), you'll 
have grads for example.

Normally when using proj_create_crs_to_crs(), if your application uses 
coordinates expressed with the units (and axis order...) of the source and 
target CRS, you should'nt have to worry about doing any conversion when using 
proj_trans[_xxx]() with the PJ* returned by proj_create_crs_to_crs()

If you really need to determine the axis semantics and units, then you need to 
chain the following calls:
- proj_get_source_crs() / proj_get_target_crs()
- proj_crs_get_coordinate_system() (if it is a SingleCRS. if it is a 
CompoundCRS then you need to extra its component CRS first with 
proj_crs_get_sub_crs())
- proj_cs_get_axis_info()

Partial implementation of this (for determining axis swapping) in
https://github.com/pramsey/postgis/blob/
7ecf6839c57a838e2c8540001a3cd35b78a730db/liblwgeom/lwgeom_transform.c#L299
 
> Use proj_angular_input() [0] and proj_angular_output() [1] to determine
> what a PJ expects and returns.

Kristian, perhaps the documentation should explicitly mention that angular 
here must be understood as radian ?
If another angular unit is expected/returned, those functions will return 
false, like in 
https://github.com/OSGeo/proj.4/blob/master/test/unit/
proj_angular_io_test.cpp#L76

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr  2 03:36:17 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 02 Apr 2019 12:36:17 +0200
Subject: [PROJ] About PROJ.6: inconsistent error reporting
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF10A6F4@S000014.PROD.SITAD.DK>
References: <df9f322b968bad751add896ba76e9477@lqt.it>
 <2E885BB293AF0448A0181138489E9A0EAF10A6F4@S000014.PROD.SITAD.DK>
Message-ID: <1910949.dsf7AJ2V4C@even-i700>

On mardi 2 avril 2019 08:42:18 CEST Kristian Evers wrote:
> This is definitely something that needs to be dealt with. Good catch!
> 
> As far as I can tell the problem is that errors that occur in the new
> C++ code are handled as exceptions without setting the internal
> PROJ errno. Eventually the exceptions are dealt with by logging
> an error message to stderr. There are two solutions:
> 
> 1. Have proj_create() issue a generic errno when catching an 
> exception, or
> 
> 2. Set an appropriate PROJ errno when raising an exception
> in the ISO19111 C++ code.
> 
> The first is the simplest but may not be suitable for all situations.
> The seconds is probably the best way to handle this but the fix will
> Involve a lot more work.
> 
> Even, do you have an opinion on which of the above roads to follow.
> Or perhaps a better solution?

I don't like at all the PROJ errno mechanism. It is hard to maintain and use. 
It works only for very precise conditions, so very often, the existing error 
messages are not exactly the ones I'd like to emit (speaking here with my 
experience with solving all the divide-by-zero situations found by ossfuzz), 
so I wonder if I reuse one close enough or invent a new code.

So I used the proj logging mechanism, which is also used in a few other places 
of the code base (not that much admitedly, and apparently coupled with setting 
a errno)

I would be more in the mind of the 1) option. This should be applied to all C+
+ code wrapped by a C function in src/iso19111/c_api.cpp

For the issue of the error being reported to stderr, you can easily shut it 
off by installing your own error handler with proj_log_func()

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr  2 03:44:08 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 02 Apr 2019 12:44:08 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
Message-ID: <5717931.n5M4EXAqDl@even-i700>

On mardi 2 avril 2019 10:38:45 CEST Oliver Eichler wrote:
> Hi,
> 
> I am working on the transition of QMapShack from version 4 to version 5
> API. So far so good. There is only on thing that breaks. The use of EPSG
> codes for projection strings.
> 
> That's what I try to do:
> 
>      // used PROJ version: 6.0.0
>      // PJ * pj = proj_create(PJ_DEFAULT_CTX, "EPSG:3395");      // [1]
> result for x and y is inf
>      PJ * pj = proj_create(PJ_DEFAULT_CTX, "+proj=merc");        // [2]
> result is expected one
>      // PJ * pj = proj_create(PJ_DEFAULT_CTX, "+init=EPSG:3395") // [3]
> pj is nullptr
>      PJ_COORD pt = {11 * DEG_TO_RAD, 48 * DEG_TO_RAD};
>      size_t s = proj_trans_generic(pj, PJ_FWD,
>                                  &pt.xy.x, 0, 1,
>                                  &pt.xy.y, 0, 1,
>                                  0,0,0,
>                                  0,0,0);
> 

With PROJ 6, [1] instanciates a CRS object, not a coordinate transformation. 
So proj_trans_generic() will return an error on it. You'd rather want to use 
proj_create_crs_to_crs() with in the source CRS a geographic CRS and as target 
CRS, "EPSG:3395". The coordinates passed and returned to/from 
proj_trans_generic will have to follow the axis order and units of the source 
and target CRS
See https://proj4.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent

[2] matches the PROJ 5 behaviour, and creates a coordinate operation using the 
merc method. Input units and axis order is longitude, latitude in radians.

[3] is a deprecated syntax in PROJ 6. The reason is that older versions of 
PROJ didn't respect the EPSG axis order in a lot of situations, and we didn't 
want that to go on when using the new API.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Tue Apr  2 03:52:25 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 10:52:25 +0000
Subject: [PROJ] About PROJ.6: Radians or Degrees ?
In-Reply-To: <3004341.PxNJ42jIk2@even-i700>
References: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>
 <2E885BB293AF0448A0181138489E9A0EAF10A699@S000014.PROD.SITAD.DK>
 <3004341.PxNJ42jIk2@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10A88E@S000014.PROD.SITAD.DK>

> Kristian, perhaps the documentation should explicitly mention that angular 
here must be understood as radian ?

Yes, I agree. I'll update the docs for those two functions right away.

/Kristian 

-----Oprindelig meddelelse-----
Fra: Even Rouault <even.rouault at spatialys.com> 
Sendt: 2. april 2019 12:27
Til: proj at lists.osgeo.org
Cc: Kristian Evers <kreve at sdfe.dk>; a.furieri at lqt.it
Emne: Re: [PROJ] About PROJ.6: Radians or Degrees ?

On mardi 2 avril 2019 08:21:32 CEST Kristian Evers wrote:
> I agree that the documenation of this could be better. Suggestions
> for improvements are appreciated. Pull requests that improve
> the docs are also greatly appreciated :-)
> 
> Your conclusions based on your tests are not exhaustive. Is is
> possible to have proj_create() return degrees instead of radians
> by adding a unitconvert step to a pipeline.

> Similarly,
> proj_create_crs_to_crs() can theoretically return a PJ that outputs
> radians instead of degrees (not sure if it actually is the case currently).

Without adding extra definitions in proj.db, I don't have in mind how radians 
could be expected or returned. But if you use EPSG:4807 (NTF (Paris)), you'll 
have grads for example.

Normally when using proj_create_crs_to_crs(), if your application uses 
coordinates expressed with the units (and axis order...) of the source and 
target CRS, you should'nt have to worry about doing any conversion when using 
proj_trans[_xxx]() with the PJ* returned by proj_create_crs_to_crs()

If you really need to determine the axis semantics and units, then you need to 
chain the following calls:
- proj_get_source_crs() / proj_get_target_crs()
- proj_crs_get_coordinate_system() (if it is a SingleCRS. if it is a 
CompoundCRS then you need to extra its component CRS first with 
proj_crs_get_sub_crs())
- proj_cs_get_axis_info()

Partial implementation of this (for determining axis swapping) in
https://github.com/pramsey/postgis/blob/
7ecf6839c57a838e2c8540001a3cd35b78a730db/liblwgeom/lwgeom_transform.c#L299
 
> Use proj_angular_input() [0] and proj_angular_output() [1] to determine
> what a PJ expects and returns.

Kristian, perhaps the documentation should explicitly mention that angular 
here must be understood as radian ?
If another angular unit is expected/returned, those functions will return 
false, like in 
https://github.com/OSGeo/proj.4/blob/master/test/unit/
proj_angular_io_test.cpp#L76

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Tue Apr  2 03:56:09 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 10:56:09 +0000
Subject: [PROJ] About PROJ.6: inconsistent error reporting
In-Reply-To: <1910949.dsf7AJ2V4C@even-i700>
References: <df9f322b968bad751add896ba76e9477@lqt.it>
 <2E885BB293AF0448A0181138489E9A0EAF10A6F4@S000014.PROD.SITAD.DK>
 <1910949.dsf7AJ2V4C@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10A8B6@S000014.PROD.SITAD.DK>

I don't like the current errno approach either. We need to keep around as
long as proj_api.h is supported but once that goes away we should find
a better way to deal with errors and warnings.

I'll update proj_create() to return a errno when it catches an exception.

/Kristian

-----Oprindelig meddelelse-----
Fra: Even Rouault <even.rouault at spatialys.com> 
Sendt: 2. april 2019 12:36
Til: proj at lists.osgeo.org
Cc: Kristian Evers <kreve at sdfe.dk>; a.furieri at lqt.it
Emne: Re: [PROJ] About PROJ.6: inconsistent error reporting

On mardi 2 avril 2019 08:42:18 CEST Kristian Evers wrote:
> This is definitely something that needs to be dealt with. Good catch!
> 
> As far as I can tell the problem is that errors that occur in the new
> C++ code are handled as exceptions without setting the internal
> PROJ errno. Eventually the exceptions are dealt with by logging
> an error message to stderr. There are two solutions:
> 
> 1. Have proj_create() issue a generic errno when catching an 
> exception, or
> 
> 2. Set an appropriate PROJ errno when raising an exception
> in the ISO19111 C++ code.
> 
> The first is the simplest but may not be suitable for all situations.
> The seconds is probably the best way to handle this but the fix will
> Involve a lot more work.
> 
> Even, do you have an opinion on which of the above roads to follow.
> Or perhaps a better solution?

I don't like at all the PROJ errno mechanism. It is hard to maintain and use. 
It works only for very precise conditions, so very often, the existing error 
messages are not exactly the ones I'd like to emit (speaking here with my 
experience with solving all the divide-by-zero situations found by ossfuzz), 
so I wonder if I reuse one close enough or invent a new code.

So I used the proj logging mechanism, which is also used in a few other places 
of the code base (not that much admitedly, and apparently coupled with setting 
a errno)

I would be more in the mind of the 1) option. This should be applied to all C+
+ code wrapped by a C function in src/iso19111/c_api.cpp

For the issue of the error being reported to stderr, you can easily shut it 
off by installing your own error handler with proj_log_func()

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From a.furieri at lqt.it  Tue Apr  2 05:32:39 2019
From: a.furieri at lqt.it (a.furieri at lqt.it)
Date: Tue, 02 Apr 2019 14:32:39 +0200
Subject: [PROJ] =?utf-8?q?About_PROJ=2E6=3A_Radians_or_Degrees_=3F?=
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF10A88E@S000014.PROD.SITAD.DK>
References: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>
 <2E885BB293AF0448A0181138489E9A0EAF10A699@S000014.PROD.SITAD.DK>
 <3004341.PxNJ42jIk2@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAF10A88E@S000014.PROD.SITAD.DK>
Message-ID: <cca43f3b7282abdbf85d3c56ee5f8341@lqt.it>

On Tue, 2 Apr 2019 10:52:25 +0000, Kristian Evers wrote:
>> Kristian, perhaps the documentation should explicitly mention that 
>> angular
> here must be understood as radian ?
>
> Yes, I agree. I'll update the docs for those two functions right 
> away.
>

Hi Kristian and Even,

thanks a lot for your clarifications.
As far as I'm concerned this definitely resolves any trouble;
calling proj_angular_input() and/or proj_angular_output()
effectively is all that is required in order to safely determine
if coordinate values must be passed (or returned) expressed in
Radians or Degrees.
it's nice and effective.

the documentation absolutely needs to be expanded/clarified;
I personally spent several hours attempting to resolve this
puzzling issue because my mind was stuck in intending
"angular" as a synonym for "geographic/latlong/longlat",
so I was completely unable to figure out that it was
intended to really mean "radians".

bye Sandro

From kreve at sdfe.dk  Tue Apr  2 05:57:35 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 12:57:35 +0000
Subject: [PROJ] About PROJ.6: Radians or Degrees ?
In-Reply-To: <cca43f3b7282abdbf85d3c56ee5f8341@lqt.it>
References: <855f8cf469746b2b1ebd49d6ea5a5742@lqt.it>
 <2E885BB293AF0448A0181138489E9A0EAF10A699@S000014.PROD.SITAD.DK>
 <3004341.PxNJ42jIk2@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAF10A88E@S000014.PROD.SITAD.DK>
 <cca43f3b7282abdbf85d3c56ee5f8341@lqt.it>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF10AA5D@S000014.PROD.SITAD.DK>

Sorry for the inconvienence! This is a leftover from PROJ 5 were angular
coordinates could in fact only be interpreted as being radians. I've
updated the docs now so that they are more specific in this matter:
https://proj4.org/development/reference/functions.html#c.proj_angular_input

It would probably also be smart to add aliases to those two functions.
Something like proj_input_is_radians() and proj_output_is_radians().
Or, alternatively make sure that radians are never expected where
degrees is actually used (e.g. proj_create("+proj=utm +zone=32")
would expect degrees and not radians as today).

I am leaning towards the latter solution but it is also the most difficult
to implement... Something to think about for the 7.0 release.

/Kristian

-----Oprindelig meddelelse-----
Fra: a.furieri at lqt.it <a.furieri at lqt.it> 
Sendt: 2. april 2019 14:33
Til: Kristian Evers <kreve at sdfe.dk>
Cc: Even Rouault <even.rouault at spatialys.com>; proj at lists.osgeo.org
Emne: Re: SV: [PROJ] About PROJ.6: Radians or Degrees ?

On Tue, 2 Apr 2019 10:52:25 +0000, Kristian Evers wrote:
>> Kristian, perhaps the documentation should explicitly mention that 
>> angular
> here must be understood as radian ?
>
> Yes, I agree. I'll update the docs for those two functions right 
> away.
>

Hi Kristian and Even,

thanks a lot for your clarifications.
As far as I'm concerned this definitely resolves any trouble;
calling proj_angular_input() and/or proj_angular_output()
effectively is all that is required in order to safely determine
if coordinate values must be passed (or returned) expressed in
Radians or Degrees.
it's nice and effective.

the documentation absolutely needs to be expanded/clarified;
I personally spent several hours attempting to resolve this
puzzling issue because my mind was stuck in intending
"angular" as a synonym for "geographic/latlong/longlat",
so I was completely unable to figure out that it was
intended to really mean "radians".

bye Sandro

From oliver.eichler at dspsolutions.de  Tue Apr  2 11:08:46 2019
From: oliver.eichler at dspsolutions.de (Oliver Eichler)
Date: Tue, 02 Apr 2019 20:08:46 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <5717931.n5M4EXAqDl@even-i700>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
Message-ID: <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>

Thanks for the answer! :D

But I still wonder what is the best way to get the same functionality as 
with pj_transform(). It might not have been the most standard conform 
thing but it did the job quite good and consistent. Now it seems to be 
that everyone needs to write a beast that analyzes the axis ordering, 
analyzes the coordinate format, fix all input to match requirements, do 
the conversion and normalize all output.

It's a good thing for sure to have all these functions separately to use 
them in an optimized way if possible. But on the other hand side a high 
level function like pj_transform() that simply hides all the details 
behind a very simple and generic interface would be nice to have, too.

Or do I miss the obvious?

Oliver


Am 2019-04-02 12:44, schrieb Even Rouault:
> On mardi 2 avril 2019 10:38:45 CEST Oliver Eichler wrote:
>> Hi,
>> 
>> I am working on the transition of QMapShack from version 4 to version 
>> 5
>> API. So far so good. There is only on thing that breaks. The use of 
>> EPSG
>> codes for projection strings.
>> 
>> That's what I try to do:
>> 
>>      // used PROJ version: 6.0.0
>>      // PJ * pj = proj_create(PJ_DEFAULT_CTX, "EPSG:3395");      // 
>> [1]
>> result for x and y is inf
>>      PJ * pj = proj_create(PJ_DEFAULT_CTX, "+proj=merc");        // 
>> [2]
>> result is expected one
>>      // PJ * pj = proj_create(PJ_DEFAULT_CTX, "+init=EPSG:3395") // 
>> [3]
>> pj is nullptr
>>      PJ_COORD pt = {11 * DEG_TO_RAD, 48 * DEG_TO_RAD};
>>      size_t s = proj_trans_generic(pj, PJ_FWD,
>>                                  &pt.xy.x, 0, 1,
>>                                  &pt.xy.y, 0, 1,
>>                                  0,0,0,
>>                                  0,0,0);
>> 
> 
> With PROJ 6, [1] instanciates a CRS object, not a coordinate 
> transformation.
> So proj_trans_generic() will return an error on it. You'd rather want 
> to use
> proj_create_crs_to_crs() with in the source CRS a geographic CRS and as 
> target
> CRS, "EPSG:3395". The coordinates passed and returned to/from
> proj_trans_generic will have to follow the axis order and units of the 
> source
> and target CRS
> See 
> https://proj4.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent
> 
> [2] matches the PROJ 5 behaviour, and creates a coordinate operation 
> using the
> merc method. Input units and axis order is longitude, latitude in 
> radians.
> 
> [3] is a deprecated syntax in PROJ 6. The reason is that older versions 
> of
> PROJ didn't respect the EPSG axis order in a lot of situations, and we 
> didn't
> want that to go on when using the new API.
> 
> Even

From pramsey at cleverelephant.ca  Tue Apr  2 11:13:37 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 2 Apr 2019 11:13:37 -0700
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
Message-ID: <44D2C4D2-7DB6-49BB-8917-5C265767C8FE@cleverelephant.ca>

I understand (in an “I understand your premises but don’t share them” kind of way) the push back from the real live geodesists, but if PROJ doesn’t provide, then every downstream project is going to end up with one of these

https://github.com/postgis/postgis/blob/svn-trunk/liblwgeom/lwgeom_transform.c#L298-L343 <https://github.com/postgis/postgis/blob/svn-trunk/liblwgeom/lwgeom_transform.c#L298-L343>

P.

> On Apr 2, 2019, at 11:08 AM, Oliver Eichler <oliver.eichler at dspsolutions.de> wrote:
> 
> Thanks for the answer! :D
> 
> But I still wonder what is the best way to get the same functionality as with pj_transform(). It might not have been the most standard conform thing but it did the job quite good and consistent. Now it seems to be that everyone needs to write a beast that analyzes the axis ordering, analyzes the coordinate format, fix all input to match requirements, do the conversion and normalize all output.
> 
> It's a good thing for sure to have all these functions separately to use them in an optimized way if possible. But on the other hand side a high level function like pj_transform() that simply hides all the details behind a very simple and generic interface would be nice to have, too.
> 
> Or do I miss the obvious?
> 
> Oliver
> 
> 
> Am 2019-04-02 12:44, schrieb Even Rouault:
>> On mardi 2 avril 2019 10:38:45 CEST Oliver Eichler wrote:
>>> Hi,
>>> I am working on the transition of QMapShack from version 4 to version 5
>>> API. So far so good. There is only on thing that breaks. The use of EPSG
>>> codes for projection strings.
>>> That's what I try to do:
>>>     // used PROJ version: 6.0.0
>>>     // PJ * pj = proj_create(PJ_DEFAULT_CTX, "EPSG:3395");      // [1]
>>> result for x and y is inf
>>>     PJ * pj = proj_create(PJ_DEFAULT_CTX, "+proj=merc");        // [2]
>>> result is expected one
>>>     // PJ * pj = proj_create(PJ_DEFAULT_CTX, "+init=EPSG:3395") // [3]
>>> pj is nullptr
>>>     PJ_COORD pt = {11 * DEG_TO_RAD, 48 * DEG_TO_RAD};
>>>     size_t s = proj_trans_generic(pj, PJ_FWD,
>>>                                 &pt.xy.x, 0, 1,
>>>                                 &pt.xy.y, 0, 1,
>>>                                 0,0,0,
>>>                                 0,0,0);
>> With PROJ 6, [1] instanciates a CRS object, not a coordinate transformation.
>> So proj_trans_generic() will return an error on it. You'd rather want to use
>> proj_create_crs_to_crs() with in the source CRS a geographic CRS and as target
>> CRS, "EPSG:3395". The coordinates passed and returned to/from
>> proj_trans_generic will have to follow the axis order and units of the source
>> and target CRS
>> See https://proj4.org/faq.html#why-is-the-axis-ordering-in-proj-not-consistent
>> [2] matches the PROJ 5 behaviour, and creates a coordinate operation using the
>> merc method. Input units and axis order is longitude, latitude in radians.
>> [3] is a deprecated syntax in PROJ 6. The reason is that older versions of
>> PROJ didn't respect the EPSG axis order in a lot of situations, and we didn't
>> want that to go on when using the new API.
>> Even
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190402/44518634/attachment.html>

From even.rouault at spatialys.com  Tue Apr  2 11:13:50 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 02 Apr 2019 20:13:50 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
Message-ID: <3310823.HcPGi1X2g7@even-i700>

On mardi 2 avril 2019 20:08:46 CEST Oliver Eichler wrote:
> Thanks for the answer! :D
> 
> But I still wonder what is the best way to get the same functionality as
> with pj_transform(). It might not have been the most standard conform
> thing but it did the job quite good and consistent. Now it seems to be
> that everyone needs to write a beast that analyzes the axis ordering,
> analyzes the coordinate format, fix all input to match requirements, do
> the conversion and normalize all output.

PROJ master (future 6.1.0) has a new proj_normalize_for_visualization() 
function that takes a pedantic-axis-order compliant PJ object (returned by 
proj_create_crs_to_crs()) and add the needed axis swapping to get the 
traditional GIS friendly order.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From pramsey at cleverelephant.ca  Tue Apr  2 11:15:54 2019
From: pramsey at cleverelephant.ca (Paul Ramsey)
Date: Tue, 2 Apr 2019 11:15:54 -0700
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <3310823.HcPGi1X2g7@even-i700>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
Message-ID: <C89A562C-DEAB-4396-AE4C-4054B372D72D@cleverelephant.ca>

:) life is grand. So every downstream project will have an #ifdef’d implementation for version 6.0 ;)

P

> On Apr 2, 2019, at 11:13 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> On mardi 2 avril 2019 20:08:46 CEST Oliver Eichler wrote:
>> Thanks for the answer! :D
>> 
>> But I still wonder what is the best way to get the same functionality as
>> with pj_transform(). It might not have been the most standard conform
>> thing but it did the job quite good and consistent. Now it seems to be
>> that everyone needs to write a beast that analyzes the axis ordering,
>> analyzes the coordinate format, fix all input to match requirements, do
>> the conversion and normalize all output.
> 
> PROJ master (future 6.1.0) has a new proj_normalize_for_visualization() 
> function that takes a pedantic-axis-order compliant PJ object (returned by 
> proj_create_crs_to_crs()) and add the needed axis swapping to get the 
> traditional GIS friendly order.
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From even.rouault at spatialys.com  Tue Apr  2 11:20:10 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 02 Apr 2019 20:20:10 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <C89A562C-DEAB-4396-AE4C-4054B372D72D@cleverelephant.ca>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <C89A562C-DEAB-4396-AE4C-4054B372D72D@cleverelephant.ca>
Message-ID: <16026935.dfofdrvkzm@even-i700>

On mardi 2 avril 2019 11:15:54 CEST Paul Ramsey wrote:
> :) life is grand. So every downstream project will have an #ifdef’d
> :implementation for version 6.0 ;)

Just require PROJ 6.1. Will be released May 1st

We had to release the 6.0 beast anyway so that people actually start testing 
and providing feedback. Apparently nobody wants to be EPSG axis compliant :-)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From martin.desruisseaux at geomatys.com  Tue Apr  2 11:46:37 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 2 Apr 2019 20:46:37 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <44D2C4D2-7DB6-49BB-8917-5C265767C8FE@cleverelephant.ca>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
 <44D2C4D2-7DB6-49BB-8917-5C265767C8FE@cleverelephant.ca>
Message-ID: <fdd98da9-84a4-79ef-fbce-6bfa1c4d6ab5@geomatys.com>

Le 02/04/2019 à 20:13, Paul Ramsey a écrit :

> I understand (in an “I understand your premises but don’t share them”
> kind of way) the push back from the real live geodesists, but if PROJ
> doesn’t provide, then every downstream project is going to end up with
> one of these
>
This is debatable. In my past experience with GeoTools, the desire for
(longitude, latitude) axis order was largely caused by reluctance to use
mathematical constructs like affine transforms. The usual argument is
that peoples don't want to bother about such mathematics. I think it is
unfortunate, since 20 years of development in GIS convinced me that
mastering affine transforms enable better sofware, making issues like
axis order practically vanishing. More generally, even now I'm still
amazed by the power of mathematics (not just affine transforms). Of
course learning how to use affine transform and acquiring the discipline
to use them extensively requires effort, but the gain is largely worth
in my opinion. Downstream projects developed that way do not necessarily
need methods for reordering axes.

Note 1: this is of course not an objection against the inclusion of a
proj_normalize_for_visualization() method. This is only a reaction on
the "every downstream project will want (longitude, latitude)" thinking.

Note 2: in this email I'm talking about developers, of course not end users.

    Martin



From oliver.eichler at dspsolutions.de  Tue Apr  2 11:59:11 2019
From: oliver.eichler at dspsolutions.de (Oliver Eichler)
Date: Tue, 02 Apr 2019 20:59:11 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <3310823.HcPGi1X2g7@even-i700>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
Message-ID: <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>

> 
> PROJ master (future 6.1.0) has a new proj_normalize_for_visualization()
> function that takes a pedantic-axis-order compliant PJ object (returned 
> by
> proj_create_crs_to_crs()) and add the needed axis swapping to get the
> traditional GIS friendly order.

sounds promising. Will there be an example in the migration guide? Right 
now this guide is pretty frustrating. It gives you a rough example of 
something that does not even match the old behavior and the rest is 
"find out yourself". No documentation in the headers. No obvious link to 
API documentation on the web page. Yes, I found it by chance using 
Google. I don't want to complain too much, but so far the migration is 
more a PITA than anything else.

It would really help to have example code to restore the old complex 
functions like pj_transform(). Keep in mind that you introduced quite 
some pitfalls that will break the software using PROJ silently. The 
moment a user uses a CRS that does it different the software will fail 
leading to a bug report, a lot of investigation why it breaks, the 
realization that new PROJ introduced inconsistencies (from the user's 
point of view) and finally patching the software that uses PROJ over and 
over again. This will be a very frustrating experience for every party 
involved.

Would that be possible?

Oliver

From kreve at sdfe.dk  Tue Apr  2 12:26:59 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 2 Apr 2019 19:26:59 +0000
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
Message-ID: <FA0781C9-65A7-40B1-A0E8-2482345D592F@sdfe.dk>

To be honest I am leaning towards killing the migration guide. It was an attempt at making
it easier to move from proj_api.h to proj.h but since it was written a lot have happened
and the premise has changed. Instead I would rather write a couple of proper pages
demonstrating the use of the current API. If done properly it should be sufficient help
for those migrating old code to use the new API and will be better suited for newcomers.

But it raises the question: What sort of things will be useful to demonstrate on doc pages
like that? 

/Kristian

> On 2 Apr 2019, at 20:59, Oliver Eichler <oliver.eichler at dspsolutions.de> wrote:
> 
>> PROJ master (future 6.1.0) has a new proj_normalize_for_visualization()
>> function that takes a pedantic-axis-order compliant PJ object (returned by
>> proj_create_crs_to_crs()) and add the needed axis swapping to get the
>> traditional GIS friendly order.
> 
> sounds promising. Will there be an example in the migration guide? Right now this guide is pretty frustrating. It gives you a rough example of something that does not even match the old behavior and the rest is "find out yourself". No documentation in the headers. No obvious link to API documentation on the web page. Yes, I found it by chance using Google. I don't want to complain too much, but so far the migration is more a PITA than anything else.
> 
> It would really help to have example code to restore the old complex functions like pj_transform(). Keep in mind that you introduced quite some pitfalls that will break the software using PROJ silently. The moment a user uses a CRS that does it different the software will fail leading to a bug report, a lot of investigation why it breaks, the realization that new PROJ introduced inconsistencies (from the user's point of view) and finally patching the software that uses PROJ over and over again. This will be a very frustrating experience for every party involved.
> 
> Would that be possible?
> 
> Oliver
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From even.rouault at spatialys.com  Tue Apr  2 12:32:39 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 02 Apr 2019 21:32:39 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
Message-ID: <2970048.r4C9dsQSlI@even-i700>

On mardi 2 avril 2019 20:59:11 CEST Oliver Eichler wrote:
> > PROJ master (future 6.1.0) has a new proj_normalize_for_visualization()
> > function that takes a pedantic-axis-order compliant PJ object (returned
> > by
> > proj_create_crs_to_crs()) and add the needed axis swapping to get the
> > traditional GIS friendly order.
> 
> sounds promising. Will there be an example in the migration guide? Right
> now this guide is pretty frustrating. It gives you a rough example of
> something that does not even match the old behavior and the rest is
> "find out yourself". No documentation in the headers. No obvious link to
> API documentation on the web page. Yes, I found it by chance using
> Google.

Any suggestion on how to make it more accessible ?

> 
> It would really help to have example code to restore the old complex
> functions like pj_transform(). Keep in mind that you introduced quite
> some pitfalls that will break the software using PROJ silently. The
> moment a user uses a CRS that does it different the software will fail
> leading to a bug report, a lot of investigation why it breaks, the
> realization that new PROJ introduced inconsistencies (from the user's
> point of view) and finally patching the software that uses PROJ over and
> over again. This will be a very frustrating experience for every party
> involved.
> 
> Would that be possible?

Kristian filed https://github.com/OSGeo/proj.4/issues/1403 this morning about 
updating the example / quickstart
I've just filed https://github.com/OSGeo/proj.4/issues/1407 for a Version 5
->Version 6 migration guide

Documentation contributions are also accepted :-)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From oliver.eichler at dspsolutions.de  Tue Apr  2 22:45:23 2019
From: oliver.eichler at dspsolutions.de (Oliver Eichler)
Date: Wed, 03 Apr 2019 07:45:23 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <2970048.r4C9dsQSlI@even-i700>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
 <2970048.r4C9dsQSlI@even-i700>
Message-ID: <b69244ed5b9d7587e49173f945314600@dspsolutions.de>

>> sounds promising. Will there be an example in the migration guide? 
>> Right
>> now this guide is pretty frustrating. It gives you a rough example of
>> something that does not even match the old behavior and the rest is
>> "find out yourself". No documentation in the headers. No obvious link 
>> to
>> API documentation on the web page. Yes, I found it by chance using
>> Google.
> 
> Any suggestion on how to make it more accessible ?

Easy ;) "PROJ API Documentation" as top level item in the left hand 
menu.

And as a developer using this API I would expect the documentation to be 
part of the header files. Don't know why you guys don't like Doxygen.

Cheers

Oliver

From oliver.eichler at dspsolutions.de  Tue Apr  2 23:04:54 2019
From: oliver.eichler at dspsolutions.de (Oliver Eichler)
Date: Wed, 03 Apr 2019 08:04:54 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <FA0781C9-65A7-40B1-A0E8-2482345D592F@sdfe.dk>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
 <FA0781C9-65A7-40B1-A0E8-2482345D592F@sdfe.dk>
Message-ID: <b27ff5baa718765863b0c9d71e5cfe2d@dspsolutions.de>


> But it raises the question: What sort of things will be useful to
> demonstrate on doc pages
> like that?
> 

Well, as mentioned, it should contain a code snippet that restores the 
old functionality of pj_transform(). I would guess that is in close to 
100% of the migration cases the function to migrate. It does not have to 
be necessarily API compliant to pj_transform(). But it shouldn't break 
the functionality. And if it does this has to be documented as detailed 
as possible.

There is no problem in telling the users that there has been a version 
change and some things have to be done different. As long as I can point 
out what's different and provide an example for the alternative. But 
"Ooops it breaks because it's different and I don't really know why and 
how to fix it" isn't satisfying for anyone.

And probably examples how to port the other complex functions like 
pj_datum_transform(), pj_geocentric_to_geodetic(), 
pj_geodetic_to_geocentric(), pj_compare_datums() and 
pj_apply_gridshift() would be helpful. The rest of the functions seems 
to be simple enough to be replaced by some counterpart of the new API. 
But a complete table would help. The current one seems to be a bit 
short.





From kristianevers at gmail.com  Tue Apr  2 23:19:50 2019
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 3 Apr 2019 08:19:50 +0200
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <b69244ed5b9d7587e49173f945314600@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
 <2970048.r4C9dsQSlI@even-i700>
 <b69244ed5b9d7587e49173f945314600@dspsolutions.de>
Message-ID: <6521D9F7-E5B0-42EC-96A5-A57A02C9FD3D@gmail.com>



> On 3 Apr 2019, at 07:45, Oliver Eichler <oliver.eichler at dspsolutions.de> wrote:
> 
>>> sounds promising. Will there be an example in the migration guide? Right
>>> now this guide is pretty frustrating. It gives you a rough example of
>>> something that does not even match the old behavior and the rest is
>>> "find out yourself". No documentation in the headers. No obvious link to
>>> API documentation on the web page. Yes, I found it by chance using
>>> Google.
>> Any suggestion on how to make it more accessible ?
> 
> Easy ;) "PROJ API Documentation" as top level item in the left hand menu.
> 

Yes, this should be done. Easy fix.

> And as a developer using this API I would expect the documentation to be part of the header files. Don't know why you guys don't like Doxygen.
> 

We do in fact use Doxygen. At least for some of the code. The code is documented where it is implemented and not in the header files.
I don’t see this changing anytime soon.

/Kristian

> Cheers
> 
> Oliver
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From kreve at sdfe.dk  Tue Apr  2 23:41:15 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 3 Apr 2019 06:41:15 +0000
Subject: [PROJ] Use of EPSG codes in proj_create()
In-Reply-To: <b27ff5baa718765863b0c9d71e5cfe2d@dspsolutions.de>
References: <0f2eea9e69c227d72db2057e5b54ac1d@dspsolutions.de>
 <5717931.n5M4EXAqDl@even-i700>
 <c363da73e52c7890ea6bb012699cae7a@dspsolutions.de>
 <3310823.HcPGi1X2g7@even-i700>
 <fcb36b559a92c05aae5cabe6452f118f@dspsolutions.de>
 <FA0781C9-65A7-40B1-A0E8-2482345D592F@sdfe.dk>
 <b27ff5baa718765863b0c9d71e5cfe2d@dspsolutions.de>
Message-ID: <596768BA-A503-4D32-BCCC-313DA0D47136@sdfe.dk>

As you’ve already found out, maintaining the PROJ docs is not the most active area of work.
For that reason I am somewhat hesitant on making a lot of transition guides because they would
only be of interest for a limited time period and take time from writing docs that are generally
applicable to all developers. They are also extremely difficult to write since the old API’s are
poorly documented, so the code has to be studied carefully to determine what a given function
does.

I prefer to write good introductions to the API instead of spending
time on mapping old API functions to the new API. If the development guides are written properly
they will be of use both for developers migrating from an old API to the new API and for people
starting from scratch.

Unfortunately, I myself haven’t got much available time to work on this the next couple of months.
I hope someone else has available time to pull the heavy load on this one. I am very happy to
give feedback on any documenation contributions.

To finish off this mail I just want to remind everyone that the PROJ docs are better than they ever
have been before. The API’s in projects.h and proj_api.h was practically undocumented for ~20
years. Bridging that gap is a hell of a task and it is not one that anyone particularly enjoys working
on. So please be patient. We’ll get there eventually. Sooner if we get help from the community.
All inputs are valuable to us so we can spend time on the things that are the most need of fixing.

Thanks to everyone who’s pointed out shortcomings in the documentation. Hopefully we will be
able to address those quickly!

/Kristian

> On 3 Apr 2019, at 08:04, Oliver Eichler <oliver.eichler at dspsolutions.de> wrote:
> 
> 
>> But it raises the question: What sort of things will be useful to
>> demonstrate on doc pages
>> like that?
> 
> Well, as mentioned, it should contain a code snippet that restores the old functionality of pj_transform(). I would guess that is in close to 100% of the migration cases the function to migrate. It does not have to be necessarily API compliant to pj_transform(). But it shouldn't break the functionality. And if it does this has to be documented as detailed as possible.
> 
> There is no problem in telling the users that there has been a version change and some things have to be done different. As long as I can point out what's different and provide an example for the alternative. But "Ooops it breaks because it's different and I don't really know why and how to fix it" isn't satisfying for anyone.
> 
> And probably examples how to port the other complex functions like pj_datum_transform(), pj_geocentric_to_geodetic(), pj_geodetic_to_geocentric(), pj_compare_datums() and pj_apply_gridshift() would be helpful. The rest of the functions seems to be simple enough to be replaced by some counterpart of the new API. But a complete table would help. The current one seems to be a bit short.
> 
> 
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From Wendell.CTR.Turner at faa.gov  Thu Apr  4 08:31:01 2019
From: Wendell.CTR.Turner at faa.gov (Wendell.CTR.Turner at faa.gov)
Date: Thu, 4 Apr 2019 15:31:01 +0000
Subject: [PROJ] definition string with units=minutes?
Message-ID: <8fa396f8e54a46d88be16e44b77cd5e7@CY1F00602MB0037.006f.mgd2.msft.net>

Is there a way to define a conversion string with "units=minutes"?  Also, positive longitude indicates west.

That is, for an input of:
    2446 4431
The output would be:
    40.76667 -73.85000

I'm guessing it would look something like:
    +proj=latlong +datum=WGS84 +units=minutes

But it seems that the only angular definition for units is 'units=degrees'.

BTW, is this the correct forum for this type of question?

Thank you,
Wendell

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190404/3578a075/attachment.html>

From nyall.dawson at gmail.com  Sun Apr  7 19:54:59 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 8 Apr 2019 12:54:59 +1000
Subject: [PROJ] Complete list of unit names?
Message-ID: <CAB28Asj01HnK5W7SLExHEvQxEs7oyyRe4LZWFEVTbJA+-4hguw@mail.gmail.com>

Hi list,

I'm trying to source a complete list of possible values for
out_unit_name which may be returned by proj_cs_get_axis_info. So far
I've encountered values like: "degree", "metre" and "US survey foot".

Can anyone point me to a complete list of values which may be returned
by this function?

Nyall

From nyall.dawson at gmail.com  Sun Apr  7 20:18:07 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 8 Apr 2019 13:18:07 +1000
Subject: [PROJ] Equivalent of OSRSetFromUserInput in proj 6 API
Message-ID: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>

Hi list,

While plugging away at the QGIS proj 6 upgrade I came across code
which uses OSRSetFromUserInput in order to convert any freeform string
to a coordinate reference system object.

Is there an equivalent of this in the proj 6 API I should be using
instead of this?

Nyall

From even.rouault at spatialys.com  Mon Apr  8 01:10:47 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 08 Apr 2019 10:10:47 +0200
Subject: [PROJ] Complete list of unit names?
In-Reply-To: <CAB28Asj01HnK5W7SLExHEvQxEs7oyyRe4LZWFEVTbJA+-4hguw@mail.gmail.com>
References: <CAB28Asj01HnK5W7SLExHEvQxEs7oyyRe4LZWFEVTbJA+-4hguw@mail.gmail.com>
Message-ID: <2025684.PQUWC8vPSV@even-i700>

Nyall,

> I'm trying to source a complete list of possible values for
> out_unit_name which may be returned by proj_cs_get_axis_info. So far
> I've encountered values like: "degree", "metre" and "US survey foot".
> 
> Can anyone point me to a complete list of values which may be returned
> by this function?

It depends how the CRS was built.
If it is built from a WKT string, it could be in theory anything.
If it is built from a EPSG code, this will be one of the name in the data/sql/
unit_of_measure.sql file
If it is built from a PROJ CRS string, it will be the 3rd column of the
inearUnitDescs[] array at
https://github.com/OSGeo/proj.4/blob/master/src/iso19111/io.cpp#L6030

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Apr  8 01:15:25 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 08 Apr 2019 10:15:25 +0200
Subject: [PROJ] Equivalent of OSRSetFromUserInput in proj 6 API
In-Reply-To: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>
References: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>
Message-ID: <2395817.POaYzAVlUW@even-i700>

On lundi 8 avril 2019 13:18:07 CEST Nyall Dawson wrote:
> Hi list,
> 
> While plugging away at the QGIS proj 6 upgrade I came across code
> which uses OSRSetFromUserInput in order to convert any freeform string
> to a coordinate reference system object.
> 
> Is there an equivalent of this in the proj 6 API I should be using
> instead of this?

proj_create() will be able to handle PROJ strings, WKT, AUTH:CODE, OGC URNs 
and CRS names (like 'WGS84')

If you pass it a PROJ string that needs to be interpretated as a CRS, you need 
to add " +type=crs" to it, otherwise it will be interpretated as a coordinate 
operation.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From martin.desruisseaux at geomatys.com  Mon Apr  8 01:19:53 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 8 Apr 2019 10:19:53 +0200
Subject: [PROJ] Complete list of unit names?
In-Reply-To: <2025684.PQUWC8vPSV@even-i700>
References: <CAB28Asj01HnK5W7SLExHEvQxEs7oyyRe4LZWFEVTbJA+-4hguw@mail.gmail.com>
 <2025684.PQUWC8vPSV@even-i700>
Message-ID: <2eaa9e8f-6de1-00ff-4258-debf0a701644@geomatys.com>

Le 08/04/2019 à 10:10, Even Rouault a écrit :
> If it is built from a EPSG code, this will be one of the name in the
> data/sql/unit_of_measure.sql file

In case it may be of interest, it is possible to browse EPSG units
on-line by going on the http://www.epsg-registry.org/ web site, select
"Unit of Measure (UOM)" in the "Type" field, then click the "Search"
button. As of EPSG dataset 9.6.1, there is 86 units.

    Martin



From kreve at sdfe.dk  Mon Apr  8 01:55:06 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 8 Apr 2019 08:55:06 +0000
Subject: [PROJ] Complete list of unit names?
In-Reply-To: <2025684.PQUWC8vPSV@even-i700>
References: <CAB28Asj01HnK5W7SLExHEvQxEs7oyyRe4LZWFEVTbJA+-4hguw@mail.gmail.com>
 <2025684.PQUWC8vPSV@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF115ABE@S000014.PROD.SITAD.DK>

There's also proj_list_units() [0] which returns all the units that PROJ has
known about for years and years. It is not connected to the database in
any way but I assume that there's a good correlation between units
returned by proj_list_units() and what is used in the database. No
guarantees though.

I don't think that this function will be useful for Nyall but it did get me to
think about rewiring the function so that it returns data from the database
instead of from a hard-coded list of units. The same goes for the other
proj_list_* functions. I am not sure if this is possible without breaking the
current API. If a breaking change is necessary I think this is a good candidate
for an API change in conjunction with PROJ 7.

/Kristian

https://proj4.org/development/reference/functions.html#c.proj_list_units

-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Even Rouault
Sendt: 8. april 2019 10:11
Til: proj at lists.osgeo.org
Emne: Re: [PROJ] Complete list of unit names?

Nyall,

> I'm trying to source a complete list of possible values for
> out_unit_name which may be returned by proj_cs_get_axis_info. So far
> I've encountered values like: "degree", "metre" and "US survey foot".
> 
> Can anyone point me to a complete list of values which may be returned
> by this function?

It depends how the CRS was built.
If it is built from a WKT string, it could be in theory anything.
If it is built from a EPSG code, this will be one of the name in the data/sql/
unit_of_measure.sql file
If it is built from a PROJ CRS string, it will be the 3rd column of the
inearUnitDescs[] array at
https://github.com/OSGeo/proj.4/blob/master/src/iso19111/io.cpp#L6030

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Mon Apr  8 02:00:15 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 08 Apr 2019 11:00:15 +0200
Subject: [PROJ] Complete list of unit names?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF115ABE@S000014.PROD.SITAD.DK>
References: <CAB28Asj01HnK5W7SLExHEvQxEs7oyyRe4LZWFEVTbJA+-4hguw@mail.gmail.com>
 <2025684.PQUWC8vPSV@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAF115ABE@S000014.PROD.SITAD.DK>
Message-ID: <2196780.OzKInaO160@even-i700>

On lundi 8 avril 2019 08:55:06 CEST Kristian Evers wrote:
> There's also proj_list_units() [0] which returns all the units that PROJ
> has
 known about for years and years. It is not connected to the database
> in any way but I assume that there's a good correlation between units
> returned by proj_list_units() and what is used in the database. No
> guarantees though.

There's intersection, but none of them is a superset of the other one. There 
are a few PROJ hard-coded units without EPSG equivalent:

    {"dm", "0.1", "decimetre", 0},                       // no EPSG equivalent
    {"in", "0.0254", "inch", 0},                         // no EPSG equivalent
    {"us-in", "0.025400050800101", "US survey inch", 0}, // no EPSG equivalent
    {"us-yd", "0.914401828803658", "US survey yard", 0}, // no EPSG equivalent
    {"ind-ch", "20.11669506", "Indian chain", 0},        // no EPSG equivalent

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Mon Apr  8 02:32:23 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 8 Apr 2019 19:32:23 +1000
Subject: [PROJ] Equivalent of OSRSetFromUserInput in proj 6 API
In-Reply-To: <2395817.POaYzAVlUW@even-i700>
References: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>
 <2395817.POaYzAVlUW@even-i700>
Message-ID: <CAB28AshTNX-jSx3F9k0Q8Le0YaK8GJHp7Y5bGFF=VcpMiaE1Rw@mail.gmail.com>

On Mon, 8 Apr 2019 at 18:15, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On lundi 8 avril 2019 13:18:07 CEST Nyall Dawson wrote:
> > Hi list,
> >
> > While plugging away at the QGIS proj 6 upgrade I came across code
> > which uses OSRSetFromUserInput in order to convert any freeform string
> > to a coordinate reference system object.
> >
> > Is there an equivalent of this in the proj 6 API I should be using
> > instead of this?
>
> proj_create() will be able to handle PROJ strings, WKT, AUTH:CODE, OGC URNs
> and CRS names (like 'WGS84')
>
> If you pass it a PROJ string that needs to be interpretated as a CRS, you need
> to add " +type=crs" to it, otherwise it will be interpretated as a coordinate
> operation.

Is there any way use proj_create with an EPSG code, but restrict the
results to CRS objects only (for those duplicate codes)?

Nyall

>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From even.rouault at spatialys.com  Mon Apr  8 02:42:11 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 08 Apr 2019 11:42:11 +0200
Subject: [PROJ] Equivalent of OSRSetFromUserInput in proj 6 API
In-Reply-To: <CAB28AshTNX-jSx3F9k0Q8Le0YaK8GJHp7Y5bGFF=VcpMiaE1Rw@mail.gmail.com>
References: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>
 <2395817.POaYzAVlUW@even-i700>
 <CAB28AshTNX-jSx3F9k0Q8Le0YaK8GJHp7Y5bGFF=VcpMiaE1Rw@mail.gmail.com>
Message-ID: <1621765.m5HdmjC21q@even-i700>

On lundi 8 avril 2019 19:32:23 CEST Nyall Dawson wrote:
> On Mon, 8 Apr 2019 at 18:15, Even Rouault <even.rouault at spatialys.com> 
wrote:
> > On lundi 8 avril 2019 13:18:07 CEST Nyall Dawson wrote:
> > > Hi list,
> > > 
> > > While plugging away at the QGIS proj 6 upgrade I came across code
> > > which uses OSRSetFromUserInput in order to convert any freeform string
> > > to a coordinate reference system object.
> > > 
> > > Is there an equivalent of this in the proj 6 API I should be using
> > > instead of this?
> > 
> > proj_create() will be able to handle PROJ strings, WKT, AUTH:CODE, OGC
> > URNs
> > and CRS names (like 'WGS84')
> > 
> > If you pass it a PROJ string that needs to be interpretated as a CRS, you
> > need to add " +type=crs" to it, otherwise it will be interpretated as a
> > coordinate operation.
> 
> Is there any way use proj_create with an EPSG code, but restrict the
> results to CRS objects only (for those duplicate codes)?
> 

Use proj_create(ctx, "urn:ogc:def:crs:EPSG::XXXX")

or proj_create_from_database(ctx, "EPSG", "XXXX", PJ_CATEGORY_CRS, false, 
nullptr)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Mon Apr  8 16:02:58 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 9 Apr 2019 09:02:58 +1000
Subject: [PROJ] Equivalent of OSRSetFromUserInput in proj 6 API
In-Reply-To: <1621765.m5HdmjC21q@even-i700>
References: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>
 <2395817.POaYzAVlUW@even-i700>
 <CAB28AshTNX-jSx3F9k0Q8Le0YaK8GJHp7Y5bGFF=VcpMiaE1Rw@mail.gmail.com>
 <1621765.m5HdmjC21q@even-i700>
Message-ID: <CAB28AsiSL5-RQ0AysfbFG169UEEG5Ehh=anji3ZMObCj_uFn0Q@mail.gmail.com>

On Mon, 8 Apr 2019 at 19:42, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On lundi 8 avril 2019 19:32:23 CEST Nyall Dawson wrote:
> > On Mon, 8 Apr 2019 at 18:15, Even Rouault <even.rouault at spatialys.com>
> wrote:
> > > On lundi 8 avril 2019 13:18:07 CEST Nyall Dawson wrote:
> > > > Hi list,
> > > >
> > > > While plugging away at the QGIS proj 6 upgrade I came across code
> > > > which uses OSRSetFromUserInput in order to convert any freeform string
> > > > to a coordinate reference system object.
> > > >
> > > > Is there an equivalent of this in the proj 6 API I should be using
> > > > instead of this?
> > >
> > > proj_create() will be able to handle PROJ strings, WKT, AUTH:CODE, OGC
> > > URNs
> > > and CRS names (like 'WGS84')
> > >
> > > If you pass it a PROJ string that needs to be interpretated as a CRS, you
> > > need to add " +type=crs" to it, otherwise it will be interpretated as a
> > > coordinate operation.
> >
> > Is there any way use proj_create with an EPSG code, but restrict the
> > results to CRS objects only (for those duplicate codes)?
> >
>
> Use proj_create(ctx, "urn:ogc:def:crs:EPSG::XXXX")
>
> or proj_create_from_database(ctx, "EPSG", "XXXX", PJ_CATEGORY_CRS, false,
> nullptr)

Ok - in either of these approaches I'd need to do some pre-processing
of the string in order to determine whether it's a "EPSG:####" format.

What I'm wondering is whether there's any benefit here of porting away
from calling OSRSetFromUserInput and then OSRExportToWkt, and whether
doing so would end up with me just re-implementing all the logic which
is present in OSRSetFromUserInput. (There's also a lot of extra logic
in place regarding setting GDAL_FIX_ESRI_WKT in certain
circumstances).

I guess I'm hoping you'll tell me that there's no benefit to porting
this code away from OSRSetFromUserInput, and I can just leave
everything as is ;)

Nyall

From even.rouault at spatialys.com  Tue Apr  9 01:21:11 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 09 Apr 2019 10:21:11 +0200
Subject: [PROJ] Equivalent of OSRSetFromUserInput in proj 6 API
In-Reply-To: <CAB28AsiSL5-RQ0AysfbFG169UEEG5Ehh=anji3ZMObCj_uFn0Q@mail.gmail.com>
References: <CAB28Ashvg9S7tYr49=22554titpwHv9ex-wS352vbX8G-MJ3kQ@mail.gmail.com>
 <1621765.m5HdmjC21q@even-i700>
 <CAB28AsiSL5-RQ0AysfbFG169UEEG5Ehh=anji3ZMObCj_uFn0Q@mail.gmail.com>
Message-ID: <1977047.tnOIBk4mhZ@even-i700>

> Ok - in either of these approaches I'd need to do some pre-processing
> of the string in order to determine whether it's a "EPSG:####" format.
> 
> What I'm wondering is whether there's any benefit here of porting away
> from calling OSRSetFromUserInput and then OSRExportToWkt, and whether
> doing so would end up with me just re-implementing all the logic which
> is present in OSRSetFromUserInput. (There's also a lot of extra logic
> in place regarding setting GDAL_FIX_ESRI_WKT in certain
> circumstances).

OSRSetFromUserInput() in GDAL master mostly relies on proj_create() or 
proj_create_from_database() now. There is no more any GDAL_FIX_ESRI_WKT stuff 
since ESRI WKT import/export has been re-implemented in PROJ itself.

There's indeed moderate interest in switching from OSRSetFromUserInput() to 
proj_create(). But it could be interesting that with GDAL >= 2.5, you use 
OSRExportToWktEx(hSRS, &pszWKT, apszOptions) with apszOptions[] = { 
"FORMAT=WKT2_2018", nullptr } to export to WKT2. This will preserve more 
metadata, and allow a few new projection methods that haven't been mapped to 
WKT1.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From eduardo.rojas at soltig.net  Mon Apr 15 14:13:13 2019
From: eduardo.rojas at soltig.net (=?UTF-8?Q?Eduardo_Rojas_Rodr=C3=ADguez?=)
Date: Mon, 15 Apr 2019 14:13:13 -0700 (MST)
Subject: [PROJ] some questions about the Barn Raising
Message-ID: <1555362793122-0.post@n6.nabble.com>

Hi list!

My name is Eduardo Rojas Rodríguez Im a PROJ and QGIS enthusiast and I have
participated in some conversations here in this list of PROJ and in the
lists of QGIS. I am a promoter of the use of QGIS, PostGIS and Open Source
software in Costa Rica and I'm always teaching people how to use it and
giving support.

I have been invited to the first Open Source Conference on GIS and Remote
Sensing in Costa Rica, part of the Geo For All, since I have been a devout
follower of PROJ, GDAL and QGIS. I think it is a great opportunity to expose
the way in which coordinate reference systems are implemented and used in
software such as QGIS that are used by end users that do not necessarily
understand the complexity of such developments.

I want to promote the initiative "/GDAL Coordinate System Barn Raising"/
because in Costa Rica there has recently been a change of CRS - from CRTM05
(EPSG 5367) to CR-SIRGAS (EPSG 8906) - this is a hot topic at this moment. I
want to be able to explain how is the development and implementation of the
CRS and how they arrive at softwares like QGIS that are used by end users
with different skill levels.


if it is not too much trouble, I would like to know if someone can give me
some of their time (I promise it will not be much) to ask some questions
about the Barn Raising process inside GDAL, PROJ, libgeotiff, PostGIS, and
Spatialite open source toolchain and how this impacts the end user.


I have been reading the mailing list as well as this link
https://gdalbarn.com/ that explains the process  and made clear to me. but I
still do not understand how this comes to softwares like QGIS or PostGIS
that are used by many types of users. This is where I need more guidance.

One of my objectives is to take advantage of this opportunity to achieve a
change in the academy, since the universities are more of an Open Source
consumer and try to get it to contribute to different projects

thank you very much for the time and help




-----
Eduardo Rojas Rodríguez
Analista en SIG
SOLTIG
Tel: (506) 2435-8868 / (506) 4001-5214 
eduardo.rojas at soltig.net
http://soltig.net


--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html

From even.rouault at spatialys.com  Tue Apr 16 10:41:52 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 16 Apr 2019 19:41:52 +0200
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <1555362793122-0.post@n6.nabble.com>
References: <1555362793122-0.post@n6.nabble.com>
Message-ID: <2404484.dT2gIqmckc@even-i700>

Eduardo,

> I want to promote the initiative "/GDAL Coordinate System Barn Raising"/
> because in Costa Rica there has recently been a change of CRS - from CRTM05
> (EPSG 5367) to CR-SIRGAS (EPSG 8906)

You meant CR-SIRGAS (EPSG *8908*) right ?

This was a very interesting use case that exhibit a few bugs in PROJ I've just 
fixed per https://github.com/OSGeo/proj.4/pull/1427 (for PROJ 6.1)

With the fixes, appropriate datum shift, using the Helmert tranformation 
registered in the EPSG dataset, is now done when attempting:

$ projinfo -s EPSG:5367 -t EPSG:8908

Candidate operations found: 1
-------------------------------------
Operation n°1:

unknown id, Inverse of Costa Rica TM 2005 + CR05 to CR-SIRGAS (1) + Costa Rica 
TM 2005, 0.5 m, Costa Rica

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +inv +proj=tmerc +lat_0=0 
+lon_0=-84 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 +step +proj=push +v_3 
+step +proj=cart +ellps=WGS84 +step +proj=helmert +x=-0.16959 +y=0.35312 
+z=0.51846 +rx=-0.03385 +ry=0.16325 +rz=-0.03446 +s=0.03693 
+convention=position_vector +step +inv +proj=cart +ellps=GRS80 +step +proj=pop 
+v_3 +step +proj=tmerc +lat_0=0 +lon_0=-84 +k=0.9999 +x_0=500000 +y_0=0 
+ellps=GRS80


> but I
> still do not understand how this comes to softwares like QGIS or PostGIS
> that are used by many types of users.

* PostGIS 3.0 will incorporate PROJ 6 support. There's already a development 
branch for it.
* QGIS 3.8dev has received initial work to support PROJ6, but that might 
perhaps take an extra dev cycle to have full support for it.
* Spatialite dev team is aware of the porting work, and will likely start 
working on that.

So this is a matter of time before PROJ 6 starts being adopted by upper level 
components of the software stack. I also think that real use of the new 
capabilities might take a few more time since some porting efforts still rely 
on using PROJ strings to describe CRS, which lose the datum information.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Wed Apr 17 09:24:53 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 17 Apr 2019 18:24:53 +0200
Subject: [PROJ] Fwd: proj list issue
Message-ID: <1988199.434ZLzRuNU@even-i700>

Forwarding post from a subscriber of the list

----------  Forwarded Message  ----------

Subject: proj list issue
Date: mercredi 17 avril 2019, 09:14:44 CEST
From: Ken Mankoff <mankoff at gmail.com>

Dear Proj list,

Please excuse duplicates - my last email was returned with a bounce error so 
I'm sending a second one.

I'm following up on a helpful thread from this list from 2017: https://
lists.osgeo.org/pipermail/proj/2017-November/007496.html

I'm calculating map projection errors, and want to check my interpretation of 
the results with someone who knows proj better. I'm using EPSG:3413 projection 
and the following proj string:

+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs 
+a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1

To estimate the error in Southern Greenland, I do:

echo -40 60 | proj -VS ${PROJSTR}

and see

#Stereographic
#       Azi, Sph&Ell
#       lat_ts=
# +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs
# +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1
#Final Earth figure: ellipsoid
#  Major axis (a): 6378137.000
#  1/flattening: 298.257224
#  squared eccentricity: 0.006694379990
Longitude: 40dW [ -40 ]
Latitude:  60dN [ 60 ]
Easting (x):   289632.50
Northing (y):  -3310514.64
Meridian scale (h) : 1.03942808  ( 3.943 % error )
Parallel scale (k) : 1.03942808  ( 3.943 % error )
Areal scale (s):     1.08041073  ( 8.041 % error )
Angular distortion (w): 0.000
Meridian/Parallel angle: 90.00000
Convergence : 5d [ 5.00000000 ]
Max-min (Tissot axis a-b) scale error: 1.03943 1.03943

The key values for Northern Greenland are:

echo -40 82 | proj -VS ${PROJSTR}
...
...
Meridian scale (h) : 0.97460025  ( -2.54 % error )
Parallel scale (k) : 0.97460025  ( -2.54 % error )
Areal scale (s):     0.94984565  ( -5.015 % error )

My question is how to interpret the Areal scale error

I think that in this projection N. Greenland is over-represented by 8% area 
and any areal feature there should be divided by ~1.0804 or linear features 
divided by ~1.0394 to bring them to true scale. Similarly, in S. Greenland I 
should adjust a areal feature by dividing by 0.94984565. Is this correct?

Thanks,

  -k.

-----------------------------------------
-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jmckenna at gatewaygeomatics.com  Wed Apr 17 09:34:47 2019
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Wed, 17 Apr 2019 13:34:47 -0300
Subject: [PROJ] Fwd: proj list issue
In-Reply-To: <1988199.434ZLzRuNU@even-i700>
References: <1988199.434ZLzRuNU@even-i700>
Message-ID: <411bd875-789a-676a-ed53-f567016d8e54@gatewaygeomatics.com>

I imagine that user is trying to send the email to the incorrect address 
proj at lists dot maptools dot org

-jeff



On 2019-04-17 1:24 PM, Even Rouault wrote:
> Forwarding post from a subscriber of the list
> 
> ----------  Forwarded Message  ----------
> 
> Subject: proj list issue
> Date: mercredi 17 avril 2019, 09:14:44 CEST
> From: Ken Mankoff <mankoff at gmail.com>
> 
> Dear Proj list,
> 
> Please excuse duplicates - my last email was returned with a bounce error so
> I'm sending a second one.
> 
> I'm following up on a helpful thread from this list from 2017: https://
> lists.osgeo.org/pipermail/proj/2017-November/007496.html
> 
> I'm calculating map projection errors, and want to check my interpretation of
> the results with someone who knows proj better. I'm using EPSG:3413 projection
> and the following proj string:
> 
> +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs
> +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1
> 
> To estimate the error in Southern Greenland, I do:
> 
> echo -40 60 | proj -VS ${PROJSTR}
> 
> and see
> 
> #Stereographic
> #       Azi, Sph&Ell
> #       lat_ts=
> # +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs
> # +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1
> #Final Earth figure: ellipsoid
> #  Major axis (a): 6378137.000
> #  1/flattening: 298.257224
> #  squared eccentricity: 0.006694379990
> Longitude: 40dW [ -40 ]
> Latitude:  60dN [ 60 ]
> Easting (x):   289632.50
> Northing (y):  -3310514.64
> Meridian scale (h) : 1.03942808  ( 3.943 % error )
> Parallel scale (k) : 1.03942808  ( 3.943 % error )
> Areal scale (s):     1.08041073  ( 8.041 % error )
> Angular distortion (w): 0.000
> Meridian/Parallel angle: 90.00000
> Convergence : 5d [ 5.00000000 ]
> Max-min (Tissot axis a-b) scale error: 1.03943 1.03943
> 
> The key values for Northern Greenland are:
> 
> echo -40 82 | proj -VS ${PROJSTR}
> ...
> ...
> Meridian scale (h) : 0.97460025  ( -2.54 % error )
> Parallel scale (k) : 0.97460025  ( -2.54 % error )
> Areal scale (s):     0.94984565  ( -5.015 % error )
> 
> My question is how to interpret the Areal scale error
> 
> I think that in this projection N. Greenland is over-represented by 8% area
> and any areal feature there should be divided by ~1.0804 or linear features
> divided by ~1.0394 to bring them to true scale. Similarly, in S. Greenland I
> should adjust a areal feature by dividing by 0.94984565. Is this correct?
> 
> Thanks,
> 
>    -k.
> 

From nyall.dawson at gmail.com  Wed Apr 17 23:37:54 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 18 Apr 2019 16:37:54 +1000
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <2404484.dT2gIqmckc@even-i700>
References: <1555362793122-0.post@n6.nabble.com> <2404484.dT2gIqmckc@even-i700>
Message-ID: <CAB28AsiqwvUyYwRRJhmaU2Qfrn+r75p_9L_RpQkzUzm67YMCEQ@mail.gmail.com>

On Wed, 17 Apr 2019 at 03:42, Even Rouault <even.rouault at spatialys.com> wrote:

> * QGIS 3.8dev has received initial work to support PROJ6, but that might
> perhaps take an extra dev cycle to have full support for it.

It's still on track for completion for 3.8

Nyall

From even.rouault at spatialys.com  Thu Apr 18 02:14:31 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 18 Apr 2019 11:14:31 +0200
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <CAB28AsiqwvUyYwRRJhmaU2Qfrn+r75p_9L_RpQkzUzm67YMCEQ@mail.gmail.com>
References: <1555362793122-0.post@n6.nabble.com> <2404484.dT2gIqmckc@even-i700>
 <CAB28AsiqwvUyYwRRJhmaU2Qfrn+r75p_9L_RpQkzUzm67YMCEQ@mail.gmail.com>
Message-ID: <2579581.j4GoNom7Ng@even-i700>

On jeudi 18 avril 2019 16:37:54 CEST Nyall Dawson wrote:
> On Wed, 17 Apr 2019 at 03:42, Even Rouault <even.rouault at spatialys.com> 
wrote:
> > * QGIS 3.8dev has received initial work to support PROJ6, but that might
> > perhaps take an extra dev cycle to have full support for it.
> 
> It's still on track for completion for 3.8

Cool ! Including not using always PROJ strings to express CRS, but EPSG codes 
/ WKT when available, in proj_create_crs_to_crs() to get the full benefit of 
the new functionalities ?

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Thu Apr 18 02:25:29 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 18 Apr 2019 11:25:29 +0200
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <2404484.dT2gIqmckc@even-i700>
References: <1555362793122-0.post@n6.nabble.com> <2404484.dT2gIqmckc@even-i700>
Message-ID: <34572553.ZkGpRAZxny@even-i700>

On mardi 16 avril 2019 19:41:52 CEST Even Rouault wrote:
> Eduardo,
> 
> > I want to promote the initiative "/GDAL Coordinate System Barn Raising"/
> > because in Costa Rica there has recently been a change of CRS - from
> > CRTM05
> > (EPSG 5367) to CR-SIRGAS (EPSG 8906)
> 
> You meant CR-SIRGAS (EPSG *8908*) right ?
> 
> This was a very interesting use case that exhibit a few bugs in PROJ I've
> just fixed per https://github.com/OSGeo/proj.4/pull/1427 (for PROJ 6.1)

I didn't detail the oddity. But the EPSG:8913 transformation (CR05 to CR-
SIRGAS (1)) uses Geographic 3D CRS as source and target CRS for the 
transformation, wheras the transformation method is EPSG:9606 method (Position 
Vector transformation (geog2D domain)). I got confirmation from IOGP that this 
entry is bogus, and will be replaced by a new one in the next release of the 
EPSG dataset to use the corresponding Geographic 2D CRS. And that was 
apparently the only such erroneous case in the database, so definitely a very 
interesting use case :-)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From eduardo.rojas at soltig.net  Thu Apr 18 18:38:58 2019
From: eduardo.rojas at soltig.net (=?UTF-8?Q?Eduardo_Rojas_Rodr=C3=ADguez?=)
Date: Thu, 18 Apr 2019 18:38:58 -0700 (MST)
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <34572553.ZkGpRAZxny@even-i700>
References: <1555362793122-0.post@n6.nabble.com>
 <2404484.dT2gIqmckc@even-i700> <34572553.ZkGpRAZxny@even-i700>
Message-ID: <1555637938418-0.post@n6.nabble.com>

Thanks Even and Nyall

interesting indeed, in Costa Rica we have a mess with the CRS and I have
worked as a consultant and trainer in several local governments and
government agencies and there is still a strong utilization of the old
Lambert systems (5456 and 5457).
 
Thank you for seeing this "problem" with the new CR-SIRGAS system (8908).
but as I see the problem was a bad entry in the EPSG database. If it is not
a lot of daring, can I ask you how the IOGP confirmed this problem?

Just about this is that I want to speak in the Geo For All here at the
University of Costa Rica. Many users do not even know how the software they
use is developed (it is not strictly necessary that they know it) but I
think it is necessary to teach users here in my country, so they can make
good decisions, especially in a troubled economy such as that we are, many
institutions and local governments, due to ignorance, make bad decisions
with economic repercussions that do not contribute to the development of the
country.

My goal is to clarify these issues for all conference attendees.

Nyall thanks for confirming that QGIS 3.8 is on track for the use of PROJ6
!! very good news.

however, I have a doubt, according to what I have read, "PROJ: SQLite-based
version of the EPSG database" is the one that maintains the database of the
EPSG that is used in GDAL.

How does this work in end-user software such as PostGIS and QGIS?
this database is replicated in these softwares until the implementation of a
new PROJ say PROJ6? or get a pointrelease CRS database update?

What I want to ask is: how much time or in what cycles of development in
softwares like QGIS i.e. the databases of the CRS are updated?

I know that in this commit https://github.com/OSGeo/proj.4/pull/1368 (25 mar
2019)
the PROJ DB was updated with the new base of the EPSG.

from here how do other softwares incorporate this update? a new version of
PROJ should be adopted as PROJ6 to include this new database. for example,
you should wait until QGIS 3.8 or PostGIS 3.0 to see the new CR-SIRGAS
system (8908). What happens with LTR versions like QGIS 3.4? Do they receive
the update of the database? or this is only available for the adoption of
PROJ6?

These are questions that I am sure the users that will attend the Geo For
All will want to know, because it is what affects them in their daily work.



-----
Eduardo Rojas Rodríguez
Analista en SIG
SOLTIG
Tel: (506) 2435-8868 / (506) 4001-5214 
eduardo.rojas at soltig.net
http://soltig.net


--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html

From even.rouault at spatialys.com  Fri Apr 19 02:14:04 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 19 Apr 2019 11:14:04 +0200
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <1555637938418-0.post@n6.nabble.com>
References: <1555362793122-0.post@n6.nabble.com>
 <34572553.ZkGpRAZxny@even-i700> <1555637938418-0.post@n6.nabble.com>
Message-ID: <1871855.vj5G6zp8aI@even-i700>

> Thank you for seeing this "problem" with the new CR-SIRGAS system (8908).
> but as I see the problem was a bad entry in the EPSG database. If it is not
> a lot of daring, can I ask you how the IOGP confirmed this problem?

I emailed m contact at IOGP who confirmed my analysis and said they will issue 
a v9.6.2 release with the fix soon. Anyway PROJ is also now able to deal with 
this slightly odd configuration too.

> however, I have a doubt, according to what I have read, "PROJ: SQLite-based
> version of the EPSG database" is the one that maintains the database of the
> EPSG that is used in GDAL.

GDAL 2.5 and libgeotiff 1.5 no longer have their own CRS database as they used 
to have before, and will rely on the database provided with PROJ.

> 
> How does this work in end-user software such as PostGIS and QGIS?
> this database is replicated in these softwares until the implementation of a
> new PROJ say PROJ6? or get a pointrelease CRS database update?

That's a good question. From what I've understood, PostGIS will still ship its 
spatial_ref_sys.sql database (since it is part of its user visible surface), 
and will so have to refresh it regularly from the PROJ database.
For QGIS, I think the intent will be to use ultimately the PROJ database, but 
as QGIS allows customizations, I'm not sure how/when this will be done. PROJ 6 
has some mechanism to attach a supplemental database to the official one. I 
did that with QGIS use case in mind, but this hasn't be field tested yet, so 
might require some additional dev.

> 
> What I want to ask is: how much time or in what cycles of development in
> softwares like QGIS i.e. the databases of the CRS are updated?

Will require all QGIS builds to use PROJ 6, so likely not immediately, and as 
said above, will also require they no longer ship their own QGIS db. I can't 
give a timeframe. Depends on too many external factors.

> 
> I know that in this commit https://github.com/OSGeo/proj.4/pull/1368 (25 mar
> 2019)
> the PROJ DB was updated with the new base of the EPSG.
> 
> from here how do other softwares incorporate this update? a new version of
> PROJ should be adopted as PROJ6 to include this new database. for example,
> you should wait until QGIS 3.8 or PostGIS 3.0 to see the new CR-SIRGAS
> system (8908). 

To have it officially, yes (and provided that the QGIS build do use PROJ 6. 
QGIS 3.8 will stil be able to use older PROJ versions). Otherwise, if you want 
to have it with previous versions of the software, you could add manually a 
new entry in the respective "databases" of the existing softwares. And you 
might also possibly abuse the +towgs84 mechanism to have the CR05->CR-SIRGAS 
datum shift.

> What happens with LTR versions like QGIS 3.4? Do they receive
> the update of the database? 

That would require using the old workflow to refresh the CRS database(s). 
Could technically be done (eh, this is FOSS, so almost anything can be done 
!), but I doubt anyone from the core dev teams will spontaneously invest time 
in doing that.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From eduardo.rojas at soltig.net  Mon Apr 22 13:11:59 2019
From: eduardo.rojas at soltig.net (=?UTF-8?Q?Eduardo_Rojas_Rodr=C3=ADguez?=)
Date: Mon, 22 Apr 2019 13:11:59 -0700 (MST)
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <1871855.vj5G6zp8aI@even-i700>
References: <1555362793122-0.post@n6.nabble.com>
 <2404484.dT2gIqmckc@even-i700> <34572553.ZkGpRAZxny@even-i700>
 <1555637938418-0.post@n6.nabble.com> <1871855.vj5G6zp8aI@even-i700>
Message-ID: <1555963919407-0.post@n6.nabble.com>

Many Thanks Even

Now I have more clear the mapping of the interrelations of the different
projects, as well as how it gets to the end user, I will document this as
best as possible, since it is a bit confusing to know how the interrelation
of different Open Source projects works, and how this impacts the different
users and their jobs.

I am going to write in the QGIS Dev list (probably in PostGIS too) to
understand a bit how they intend to support the updating of the CRS
databases, since I have been reading that many more countries are going to
update their CRS and more frequently . I think it is important to know how
such software PostGIS and QGIS long term release will deal with the timely
updating of CRS and in a reliable way.

I will document everything for the presentation in the Geo For All
thanks for your time again



-----
Eduardo Rojas Rodríguez
Analista en SIG
SOLTIG
Tel: (506) 2435-8868 / (506) 4001-5214 
eduardo.rojas at soltig.net
http://soltig.net


--
Sent from: http://osgeo-org.1560.x6.nabble.com/PROJ-4-f3840930.html

From mankoff at 3m411.com  Mon Apr 22 21:14:00 2019
From: mankoff at 3m411.com (Ken Mankoff)
Date: Tue, 23 Apr 2019 06:14:00 +0200
Subject: [PROJ] Correcting map projection errors
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
Message-ID: <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>

Dear Proj list,

Please excuse duplicates - Even sent this with a different subject "Fwd: proj list issue" and I have not gotten any replies. I'm resending with an improved subject in case people skipped the email with that subject.

I'm following up on a helpful thread from this list from 2017: https://lists.osgeo.org/pipermail/proj/2017-November/007496.html

I'm calculating map projection errors, and want to check my interpretation of the results with someone who knows proj better. I'm using EPSG:3413 projection and the following proj string:

+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1

To estimate the error in Southern Greenland, I do:

echo -40 60 | proj -VS ${PROJSTR}

and see

#Stereographic
#       Azi, Sph&Ell
#       lat_ts=
# +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs
# +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1
#Final Earth figure: ellipsoid
#  Major axis (a): 6378137.000
#  1/flattening: 298.257224
#  squared eccentricity: 0.006694379990
Longitude: 40dW [ -40 ]
Latitude:  60dN [ 60 ]
Easting (x):   289632.50
Northing (y):  -3310514.64
Meridian scale (h) : 1.03942808  ( 3.943 % error )
Parallel scale (k) : 1.03942808  ( 3.943 % error )
Areal scale (s):     1.08041073  ( 8.041 % error )
Angular distortion (w): 0.000
Meridian/Parallel angle: 90.00000
Convergence : 5d [ 5.00000000 ]
Max-min (Tissot axis a-b) scale error: 1.03943 1.03943

The key values for Northern Greenland are:

echo -40 82 | proj -VS ${PROJSTR}
...
...
Meridian scale (h) : 0.97460025  ( -2.54 % error )
Parallel scale (k) : 0.97460025  ( -2.54 % error )
Areal scale (s):     0.94984565  ( -5.015 % error )

My question is how to interpret the Areal scale error

I think that in this projection N. Greenland is over-represented by 8% area and any areal feature there should be divided by 1.0804 or linear features divided by 1.0394 to bring them to true scale. Similarly, in S. Greenland I should adjust a areal feature by dividing by 0.94984565. Is this correct?

Essentially, does "-2.54 % error" mean that the EPSG:3413 projection is smaller than it should be, or that the "true" spheroid is smaller than EPSG:3413 here?

Thanks,

  -k.


From knudsen.thomas at gmail.com  Mon Apr 22 23:24:08 2019
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 23 Apr 2019 08:24:08 +0200
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
Message-ID: <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>

Ken

The scale is the quotient between the length in the map and the length on
the ellipsoid, so essentially you’re right. But note that the figures you
obtain are valid for infinitesimal items only.

For large lengths/areas you should do the computations with geodesics on
the ellipsoid, using e.g. Charles Karney’s Planimeter tool over at
https://geographiclib.sourceforge.io/cgi-bin/Planimeter (online service,
includes link to source etc.)

Also, a day where you have too much time on your hand, see the discussion
over at
http://osgeo-org.1560.x6.nabble.com/Re-Qgis-user-New-Features-in-Shape-Tools-3-2-0-td5378898.html

/Thomas


Den tir. 23. apr. 2019 kl. 06.14 skrev Ken Mankoff <mankoff at 3m411.com>:

> Dear Proj list,
>
> Please excuse duplicates - Even sent this with a different subject "Fwd:
> proj list issue" and I have not gotten any replies. I'm resending with an
> improved subject in case people skipped the email with that subject.
>
> I'm following up on a helpful thread from this list from 2017:
> https://lists.osgeo.org/pipermail/proj/2017-November/007496.html
>
> I'm calculating map projection errors, and want to check my interpretation
> of the results with someone who knows proj better. I'm using EPSG:3413
> projection and the following proj string:
>
> +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs
> +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1
>
> To estimate the error in Southern Greenland, I do:
>
> echo -40 60 | proj -VS ${PROJSTR}
>
> and see
>
> #Stereographic
> #       Azi, Sph&Ell
> #       lat_ts=
> # +proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +no_defs
> # +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to_meter=1
> #Final Earth figure: ellipsoid
> #  Major axis (a): 6378137.000
> #  1/flattening: 298.257224
> #  squared eccentricity: 0.006694379990
> Longitude: 40dW [ -40 ]
> Latitude:  60dN [ 60 ]
> Easting (x):   289632.50
> Northing (y):  -3310514.64
> Meridian scale (h) : 1.03942808  ( 3.943 % error )
> Parallel scale (k) : 1.03942808  ( 3.943 % error )
> Areal scale (s):     1.08041073  ( 8.041 % error )
> Angular distortion (w): 0.000
> Meridian/Parallel angle: 90.00000
> Convergence : 5d [ 5.00000000 ]
> Max-min (Tissot axis a-b) scale error: 1.03943 1.03943
>
> The key values for Northern Greenland are:
>
> echo -40 82 | proj -VS ${PROJSTR}
> ...
> ...
> Meridian scale (h) : 0.97460025  ( -2.54 % error )
> Parallel scale (k) : 0.97460025  ( -2.54 % error )
> Areal scale (s):     0.94984565  ( -5.015 % error )
>
> My question is how to interpret the Areal scale error
>
> I think that in this projection N. Greenland is over-represented by 8%
> area and any areal feature there should be divided by 1.0804 or linear
> features divided by 1.0394 to bring them to true scale. Similarly, in S.
> Greenland I should adjust a areal feature by dividing by 0.94984565. Is
> this correct?
>
> Essentially, does "-2.54 % error" mean that the EPSG:3413 projection is
> smaller than it should be, or that the "true" spheroid is smaller than
> EPSG:3413 here?
>
> Thanks,
>
>   -k.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190423/2797dcc1/attachment.html>

From mankoff at 3m411.com  Tue Apr 23 02:47:35 2019
From: mankoff at 3m411.com (Ken Mankoff)
Date: Tue, 23 Apr 2019 11:47:35 +0200
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
Message-ID: <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>

Hi Thomas,

Thanks for the reply.

> But note that the figures you obtain are valid for infinitesimal items
> only. For large lengths/areas you should do the computations with
> geodesics on the ellipsoid

Can you clarify what you mean by this? Or more specifically, am I doing it incorrectly? I'm exporting a very large grid but at 200 x 200 m resolution to a CSV file, then using proj to calculate the error every 200 m. Is that close enough to infinitesimal? Or define "large lengths" please. I'm then using the errors to correct linear features at the ~200 m cell resolution.

> using e.g. Charles Karney’s Planimeter tool over at
> https://geographiclib.sourceforge.io/cgi-bin/Planimeter (online
> service, includes link to source etc.)

I've downloaded and compiled the code. Planimeter takes input in lat/lon, UTM/UPS, or MGRS. I'm working in EPSG:3413. I can provide lon,lat at each cell rather than x,y but I'm not sure if this introduces new errors.

> Also, a day where you have too much time on your hand, see the
> discussion over at
> http://osgeo-org.1560.x6.nabble.com/Re-Qgis-user-New-Features-in-Shape-Tools-3-2-0-td5378898.html

A nice read - not that I understood all of it - and one reason I use and contribute to OSS/FS.

  -k.


From knudsen.thomas at gmail.com  Tue Apr 23 10:00:43 2019
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 23 Apr 2019 19:00:43 +0200
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
Message-ID: <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>

Ken,

I think I understand your case better now: Your base data are gridded
(either model output or EO), and you want to know the “real” area of a
cluster of grid cells each nominally being 200 m x 200 m.

Hence, nominally, your cells are 40000 m2, but really, they differ. So I
presume your expected accuracy is +/- 1 cell, i.e. +/-40000 m2.

Doing the computation using the geodesic planimeter, you would need to
trace the outline of each cell cluster (corner coordinate of each outer
cell), convert to geographical WGS84, then computing the area of the
resulting tiny-sided polygon using the planimeter tool.

To get a feeling of the precision you may obtain, try comparing the
geodesic area of a cell expressed as a polygon defined by its corner
coordinates with the properly scaled value for your original approach:
Charles Karney states that the accuracy of his algorithm is on the order of
0.1 m2/vertice, i.e. 0.4 m2 for a polygon tracing the outline of a grid
cell of nominally 40000 m2 - i.e. a relative accuracy of approximately 1e-5.

Since the original mapping to the projected grid may be dubious, it may
even be a (line-of-code wise) fine shortcut to compute individual geodesic
areas for each raster cell, then summing up everything (I suppose the grid
parameters are static, and you will only have to do this once).

/Thomas


Den tir. 23. apr. 2019 kl. 11.47 skrev Ken Mankoff <mankoff at 3m411.com>:

> Hi Thomas,
>
> Thanks for the reply.
>
> > But note that the figures you obtain are valid for infinitesimal items
> > only. For large lengths/areas you should do the computations with
> > geodesics on the ellipsoid
>
> Can you clarify what you mean by this? Or more specifically, am I doing it
> incorrectly? I'm exporting a very large grid but at 200 x 200 m resolution
> to a CSV file, then using proj to calculate the error every 200 m. Is that
> close enough to infinitesimal? Or define "large lengths" please. I'm then
> using the errors to correct linear features at the ~200 m cell resolution.
>
> > using e.g. Charles Karney’s Planimeter tool over at
> > https://geographiclib.sourceforge.io/cgi-bin/Planimeter (online
> > service, includes link to source etc.)
>
> I've downloaded and compiled the code. Planimeter takes input in lat/lon,
> UTM/UPS, or MGRS. I'm working in EPSG:3413. I can provide lon,lat at each
> cell rather than x,y but I'm not sure if this introduces new errors.
>
> > Also, a day where you have too much time on your hand, see the
> > discussion over at
> >
> http://osgeo-org.1560.x6.nabble.com/Re-Qgis-user-New-Features-in-Shape-Tools-3-2-0-td5378898.html
>
> A nice read - not that I understood all of it - and one reason I use and
> contribute to OSS/FS.
>
>   -k.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190423/6c7468e5/attachment-0001.html>

From strebe at aol.com  Tue Apr 23 10:11:01 2019
From: strebe at aol.com (daan)
Date: Tue, 23 Apr 2019 10:11:01 -0700
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
Message-ID: <48CBD462-B298-4F5B-8626-82AB1103DBEA@aol.com>

Just project your cells using ellipsoidal cylindric equal area projection and compute the area of the resulting rectangles. This gives you perfect accuracy at the minimum possible computational effort.

Cheers,
— daan

> On Apr 23, 2019, at 10:00, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
> 
> Ken,
> 
> I think I understand your case better now: Your base data are gridded (either model output or EO), and you want to know the “real” area of a cluster of grid cells each nominally being 200 m x 200 m.
> 
> Hence, nominally, your cells are 40000 m2, but really, they differ. So I presume your expected accuracy is +/- 1 cell, i.e. +/-40000 m2.
> 
> Doing the computation using the geodesic planimeter, you would need to trace the outline of each cell cluster (corner coordinate of each outer cell), convert to geographical WGS84, then computing the area of the resulting tiny-sided polygon using the planimeter tool.
> 
> To get a feeling of the precision you may obtain, try comparing the geodesic area of a cell expressed as a polygon defined by its corner coordinates with the properly scaled value for your original approach: Charles Karney states that the accuracy of his algorithm is on the order of 0.1 m2/vertice, i.e. 0.4 m2 for a polygon tracing the outline of a grid cell of nominally 40000 m2 - i.e. a relative accuracy of approximately 1e-5.
> 
> Since the original mapping to the projected grid may be dubious, it may even be a (line-of-code wise) fine shortcut to compute individual geodesic areas for each raster cell, then summing up everything (I suppose the grid parameters are static, and you will only have to do this once).
> 
> /Thomas
> 
> 
>> Den tir. 23. apr. 2019 kl. 11.47 skrev Ken Mankoff <mankoff at 3m411.com>:
>> Hi Thomas,
>> 
>> Thanks for the reply.
>> 
>> > But note that the figures you obtain are valid for infinitesimal items
>> > only. For large lengths/areas you should do the computations with
>> > geodesics on the ellipsoid
>> 
>> Can you clarify what you mean by this? Or more specifically, am I doing it incorrectly? I'm exporting a very large grid but at 200 x 200 m resolution to a CSV file, then using proj to calculate the error every 200 m. Is that close enough to infinitesimal? Or define "large lengths" please. I'm then using the errors to correct linear features at the ~200 m cell resolution.
>> 
>> > using e.g. Charles Karney’s Planimeter tool over at
>> > https://geographiclib.sourceforge.io/cgi-bin/Planimeter (online
>> > service, includes link to source etc.)
>> 
>> I've downloaded and compiled the code. Planimeter takes input in lat/lon, UTM/UPS, or MGRS. I'm working in EPSG:3413. I can provide lon,lat at each cell rather than x,y but I'm not sure if this introduces new errors.
>> 
>> > Also, a day where you have too much time on your hand, see the
>> > discussion over at
>> > http://osgeo-org.1560.x6.nabble.com/Re-Qgis-user-New-Features-in-Shape-Tools-3-2-0-td5378898.html
>> 
>> A nice read - not that I understood all of it - and one reason I use and contribute to OSS/FS.
>> 
>>   -k.
>> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190423/19f6def7/attachment.html>

From mankoff at 3m411.com  Tue Apr 23 10:55:12 2019
From: mankoff at 3m411.com (Ken Mankoff)
Date: Tue, 23 Apr 2019 19:55:12 +0200
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
Message-ID: <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>

Hi Thomas and Daan,

Daan wrote:
> Just project your cells using ellipsoidal cylindric equal area
> projection and compute the area of the resulting rectangles. This
> gives you perfect accuracy at the minimum possible computational
> effort.

This sounds like it might work, but I'm not sure how to do this, i.e. what the correct EPSG code or proj string is for this projection. After some searching I *think* "Lambert Cylindrical Equal Area" might be what you're referring to, which has EPSG:9835, but GRASS does not support that.



On 2019-04-23 at 19:00 +0200, Thomas Knudsen <knudsen.thomas at gmail.com> 
> I think I understand your case better now: Your base data are gridded
> (either model output or EO), and you want to know the “real” area of a
> cluster of grid cells each nominally being 200 m x 200 m.

Thomas - yes I'm sorry if I didn't explain my model use case clearly.

I have various products that cover all of Greenland at 200 x 200 m. This is 100 million cells. I'd like to estimate the error for each cell, 1x. For each individual one I would like to say "this is really 40100 m^2" and "this is really 39234 m^2".

Right now I do this as I showed in my original email. For every 100 M cell center (x,y) I get the (lon,lat) from GRASS, pass that to proj with

"echo ${lon} ${lat} | proj -VS ${PROJSTR}"

and then capture the output, and have the area error for that cell. The result of this step is a new raster, resolution 200 x 200 m, 100 M cells. Cell values range from ~8 to ~-6 (EPSG:3413 has up to 8 % error)

Based on your suggestions that planimeter is better than proj with this stuff, I will rewrite the code to pass the outline of each individual cell to the planimeter tool, and then capture and parse the output to get a matching raster: 200 x 200 m covering my entire domain, with a scale factor at each cell location that represents the projection error.

I am now concerned that the GRASS step of "convert each cell corner from (x,y) to WGS84 (lon,lat)" may introduce its own errors...

But, back to my original question... The proj-generated error raster varies *very slowly*. I take this to mean that your original comment about "valid for infinitesimal items only" may not be an issue. I don't think there is a significant error introduced by my cell-center-point method. However, from the lengthy thread you linked to and your comments about planimeter, proj may not be providing correct results.

  -k.


From strebe at aol.com  Tue Apr 23 11:03:36 2019
From: strebe at aol.com (daan)
Date: Tue, 23 Apr 2019 11:03:36 -0700
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
 <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>
Message-ID: <7AE24AED-A9F8-4D50-BB7A-02F1E7144FD1@aol.com>

It’s simple enough to just implement yourself. Use the authalic latitude to project your geodetic latitude to the sphere, and then use the spherical cylindric equal-area to get to the plane. From there you’re dealing with rectangles.

Authalic latitude: 
  mathworld.wolfram.com/AuthalicLatitude.html

Lambert: x= longitude, y = sin(latitude)

Cheers,
— daan

> On Apr 23, 2019, at 10:55, Ken Mankoff <mankoff at 3m411.com> wrote:
> 
> Hi Thomas and Daan,
> 
> Daan wrote:
>> Just project your cells using ellipsoidal cylindric equal area
>> projection and compute the area of the resulting rectangles. This
>> gives you perfect accuracy at the minimum possible computational
>> effort.
> 
> This sounds like it might work, but I'm not sure how to do this, i.e. what the correct EPSG code or proj string is for this projection. After some searching I *think* "Lambert Cylindrical Equal Area" might be what you're referring to, which has EPSG:9835, but GRASS does not support that.
> 
> 
> 
> On 2019-04-23 at 19:00 +0200, Thomas Knudsen <knudsen.thomas at gmail.com> 
>> I think I understand your case better now: Your base data are gridded
>> (either model output or EO), and you want to know the “real” area of a
>> cluster of grid cells each nominally being 200 m x 200 m.
> 
> Thomas - yes I'm sorry if I didn't explain my model use case clearly.
> 
> I have various products that cover all of Greenland at 200 x 200 m. This is 100 million cells. I'd like to estimate the error for each cell, 1x. For each individual one I would like to say "this is really 40100 m^2" and "this is really 39234 m^2".
> 
> Right now I do this as I showed in my original email. For every 100 M cell center (x,y) I get the (lon,lat) from GRASS, pass that to proj with
> 
> "echo ${lon} ${lat} | proj -VS ${PROJSTR}"
> 
> and then capture the output, and have the area error for that cell. The result of this step is a new raster, resolution 200 x 200 m, 100 M cells. Cell values range from ~8 to ~-6 (EPSG:3413 has up to 8 % error)
> 
> Based on your suggestions that planimeter is better than proj with this stuff, I will rewrite the code to pass the outline of each individual cell to the planimeter tool, and then capture and parse the output to get a matching raster: 200 x 200 m covering my entire domain, with a scale factor at each cell location that represents the projection error.
> 
> I am now concerned that the GRASS step of "convert each cell corner from (x,y) to WGS84 (lon,lat)" may introduce its own errors...
> 
> But, back to my original question... The proj-generated error raster varies *very slowly*. I take this to mean that your original comment about "valid for infinitesimal items only" may not be an issue. I don't think there is a significant error introduced by my cell-center-point method. However, from the lengthy thread you linked to and your comments about planimeter, proj may not be providing correct results.
> 
>  -k.
> 


From kreve at sdfe.dk  Tue Apr 23 12:39:35 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 23 Apr 2019 19:39:35 +0000
Subject: [PROJ] Postponing 6.1.0 release date
Message-ID: <7EF004D8-C03E-46BD-BB63-44673125D83B@sdfe.dk>

PROJ 6.1.0 is scheduled for release on May 1st. This was scheduled a
long time ago and didn’t account for the fact that I am on vacation
for the rest of the month. I trying to not work on my vacation days,
so I am rescheduling the release for May 15th. I’ll be back to work
May 1st and will be putting out a release candidate shortly after.

Sorry for any inconvenience this rescheduling may cause.

/Kristian

From nyall.dawson at gmail.com  Tue Apr 23 14:32:16 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 24 Apr 2019 07:32:16 +1000
Subject: [PROJ] some questions about the Barn Raising
In-Reply-To: <2579581.j4GoNom7Ng@even-i700>
References: <1555362793122-0.post@n6.nabble.com> <2404484.dT2gIqmckc@even-i700>
 <CAB28AsiqwvUyYwRRJhmaU2Qfrn+r75p_9L_RpQkzUzm67YMCEQ@mail.gmail.com>
 <2579581.j4GoNom7Ng@even-i700>
Message-ID: <CAB28AsjoQC+LMf6ZP-JX9cMgcQ8Bg8v15MEBMoNVmv-aCUutHg@mail.gmail.com>

On Thu, 18 Apr 2019 at 19:14, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On jeudi 18 avril 2019 16:37:54 CEST Nyall Dawson wrote:
> > On Wed, 17 Apr 2019 at 03:42, Even Rouault <even.rouault at spatialys.com>
> wrote:
> > > * QGIS 3.8dev has received initial work to support PROJ6, but that might
> > > perhaps take an extra dev cycle to have full support for it.
> >
> > It's still on track for completion for 3.8
>
> Cool ! Including not using always PROJ strings to express CRS, but EPSG codes
> / WKT when available, in proj_create_crs_to_crs() to get the full benefit of
> the new functionalities ?

I'm unsure about this -- it's the goal, but I've also got to maintain
stable API. Fingers crossed!

Nyall

>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From knudsen.thomas at gmail.com  Tue Apr 23 23:25:03 2019
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 24 Apr 2019 08:25:03 +0200
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <7AE24AED-A9F8-4D50-BB7A-02F1E7144FD1@aol.com>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
 <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>
 <7AE24AED-A9F8-4D50-BB7A-02F1E7144FD1@aol.com>
Message-ID: <CAH0YoEMqLUXfVPi4+UeS8moNNwe2-Ct-WV-FrS44gofrBO7i8g@mail.gmail.com>

daan wrote:
> Just project your cells using ellipsoidal cylindric equal area
> projection and compute the area of the resulting rectangles. This
> gives you perfect accuracy at the minimum possible computational
> effort.

Ken replies:
> This sounds like it might work, but I'm not sure how to do this,
> i.e. what the correct EPSG code or proj string is for this
> projection.

While this may work, and provide an acceptable accuracy, it is certainly
not recommendable.

Essentially, it translates into resampling into a different coordinate
system, typically by linear interpolation.

If the grid comes from model output, and grid values are point values (not
cell mean values), that may make sense. But if the model output is cell
mean values, you would (in loose terms) need to convolve the input grid
with a kernel the shape of the output grid cell, to get proper values for
the output grid. Point- and block support are geostatistically different!

If the grid is “level 3 style” EO data (and from the EPSG:3413 description,
I suppose that would mean Radarsat), the N Greenland data density will
probably be so high that regridding would make very little difference when
aggregating over larger areas (since it’s already heavily aggregated).

This, however, assumes that you are interested in mean values, and not (a
time series of) anomalies. Also, the data density in S Greenland will be
smaller, so down there, the resampling may have a higher (but probably
still small) influence on the areal mean.

So I still think resampling using authalic latitudes is a dubious idea. But
only a domain expert (in casu Ken) can have an informed opinion on whether
the deviation is acceptable.

Ken says:
> I have various products that cover all of Greenland at
> 200 x 200 m. This is 100 million cells. I'd like to estimate
> the error for each cell, 1x. For each individual one I would
> like to say "this is really 40100 m^2" and
> "this is really 39234 m^2".

Yes, this makes sense. But remember to be careful when computing aggregate
statistics of large numbers of individual values: You may be able to save a
few additional significant digits by storing the anomaly (i.e. the area
minus 40000 m2), rather than the area herself.

But we’re drifting far outside the subject domain of the PROJ mailing list,
so Ken: I will contact you directly - I see from your personal home page
that you work for GEUS, which means we are part of the same DK branch of
government, so I could probably drop by for further discussion in person,
if needed.

/Thomas


Den tir. 23. apr. 2019 kl. 20.03 skrev daan <strebe at aol.com>:

> It’s simple enough to just implement yourself. Use the authalic latitude
> to project your geodetic latitude to the sphere, and then use the spherical
> cylindric equal-area to get to the plane. From there you’re dealing with
> rectangles.
>
> Authalic latitude:
>   mathworld.wolfram.com/AuthalicLatitude.html
>
> Lambert: x= longitude, y = sin(latitude)
>
> Cheers,
> — daan
>
> > On Apr 23, 2019, at 10:55, Ken Mankoff <mankoff at 3m411.com> wrote:
> >
> > Hi Thomas and Daan,
> >
> > Daan wrote:
> >> Just project your cells using ellipsoidal cylindric equal area
> >> projection and compute the area of the resulting rectangles. This
> >> gives you perfect accuracy at the minimum possible computational
> >> effort.
> >
> > This sounds like it might work, but I'm not sure how to do this, i.e.
> what the correct EPSG code or proj string is for this projection. After
> some searching I *think* "Lambert Cylindrical Equal Area" might be what
> you're referring to, which has EPSG:9835, but GRASS does not support that.
> >
> >
> >
> > On 2019-04-23 at 19:00 +0200, Thomas Knudsen <knudsen.thomas at gmail.com>
> >> I think I understand your case better now: Your base data are gridded
> >> (either model output or EO), and you want to know the “real” area of a
> >> cluster of grid cells each nominally being 200 m x 200 m.
> >
> > Thomas - yes I'm sorry if I didn't explain my model use case clearly.
> >
> > I have various products that cover all of Greenland at 200 x 200 m. This
> is 100 million cells. I'd like to estimate the error for each cell, 1x. For
> each individual one I would like to say "this is really 40100 m^2" and
> "this is really 39234 m^2".
> >
> > Right now I do this as I showed in my original email. For every 100 M
> cell center (x,y) I get the (lon,lat) from GRASS, pass that to proj with
> >
> > "echo ${lon} ${lat} | proj -VS ${PROJSTR}"
> >
> > and then capture the output, and have the area error for that cell. The
> result of this step is a new raster, resolution 200 x 200 m, 100 M cells.
> Cell values range from ~8 to ~-6 (EPSG:3413 has up to 8 % error)
> >
> > Based on your suggestions that planimeter is better than proj with this
> stuff, I will rewrite the code to pass the outline of each individual cell
> to the planimeter tool, and then capture and parse the output to get a
> matching raster: 200 x 200 m covering my entire domain, with a scale factor
> at each cell location that represents the projection error.
> >
> > I am now concerned that the GRASS step of "convert each cell corner from
> (x,y) to WGS84 (lon,lat)" may introduce its own errors...
> >
> > But, back to my original question... The proj-generated error raster
> varies *very slowly*. I take this to mean that your original comment about
> "valid for infinitesimal items only" may not be an issue. I don't think
> there is a significant error introduced by my cell-center-point method.
> However, from the lengthy thread you linked to and your comments about
> planimeter, proj may not be providing correct results.
> >
> >  -k.
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190424/aa0d9c6c/attachment.html>

From charles at karney.com  Wed Apr 24 05:21:18 2019
From: charles at karney.com (Charles Karney)
Date: Wed, 24 Apr 2019 08:21:18 -0400
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <CAH0YoEMqLUXfVPi4+UeS8moNNwe2-Ct-WV-FrS44gofrBO7i8g@mail.gmail.com>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
 <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>
 <7AE24AED-A9F8-4D50-BB7A-02F1E7144FD1@aol.com>
 <CAH0YoEMqLUXfVPi4+UeS8moNNwe2-Ct-WV-FrS44gofrBO7i8g@mail.gmail.com>
Message-ID: <4fda2edb-628c-7642-2727-7b9ee0f5b96e@karney.com>

Sorry, I'm coming rather late into this discussion.

* as Thomas Knudsen says the square of the linear projection scale will
   give you the correction factor for small areas, because your
   projection is conformal.  Use the scale at the center of the cell for
   best accuracy.  (My guess is that for this projection, polar
   stereographic, for Greenland, and for 200m squares, this will give you
   satisfactory accuracy.)

* instead of using GeographicLib's Planimeter program, you might find it
   simpler to use proj's geod_polygonarea function; this implements the
   same algorithm.  It's documented at

 
https://geographiclib.sourceforge.io/1.49/C/geodesic_8h.html#aafa25f138d78c387a107ec0221bbb181

   If you are not tied to proj.4, then use the PolygonArea class in
   GeographicLib

 
https://geographiclib.sourceforge.io/1.49/classGeographicLib_1_1PolygonAreaT.html

* following up on daan's suggestion: transforming to an equal area
   projection is possible, but use the azimuthal equal area projection
   instead of the cylindrical one.  The edges of your squares in the
   polar stereographic projection will be straighter in the azimuthal
   equal area projection and so the distortion involved in the
   reprojection will be less.

* an alternative to using an equal area projection is to project the
   points onto the authalic sphere and then to use the formula for areas
   on a sphere.  This is the route that Oracle takes.  This has the
   advantage of giving small distortion over the whole globe.  If you go
   this route, I recommend compute spherical areas with Eq (64) from my
   paper "Algorithms for geodesics"

     https://doi.org/10.1007/s00190-012-0578-z

-- 
Charles Karney <charles at karney.com>
Princeton, NJ

From mankoff at 3m411.com  Wed Apr 24 19:58:05 2019
From: mankoff at 3m411.com (Ken Mankoff)
Date: Thu, 25 Apr 2019 04:58:05 +0200
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <4fda2edb-628c-7642-2727-7b9ee0f5b96e@karney.com>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
 <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>
 <7AE24AED-A9F8-4D50-BB7A-02F1E7144FD1@aol.com>
 <CAH0YoEMqLUXfVPi4+UeS8moNNwe2-Ct-WV-FrS44gofrBO7i8g@mail.gmail.com>
 <4fda2edb-628c-7642-2727-7b9ee0f5b96e@karney.com>
Message-ID: <87muke3i6a.fsf@geus3064linuxwsm.geus.dk>

Hi Charles,

Thanks for contributing to the discussion. I'm going offline for the
next 5 weeks and so I can't follow up much more on this, but I'm happy
to hear you think the current method is probably good enough.

I'm not tied to proj4 or any specific tool, but prefer to use existing
user-level tools rather than code my own, even a simple wrapper function
- so for this reason I would rather run your planimeter tool than access
the proj function you link to. Unless that function is exposed through
the proj CLI interface somehow.

Cheers,

  -k.

On 2019-04-24 at 14:21 +0200, Charles Karney <charles at karney.com>
wrote...
> Sorry, I'm coming rather late into this discussion.
>
> * as Thomas Knudsen says the square of the linear projection scale
> will
>    give you the correction factor for small areas, because your
>    projection is conformal. Use the scale at the center of the cell
>    for best accuracy. (My guess is that for this projection, polar
>    stereographic, for Greenland, and for 200m squares, this will give
>    you satisfactory accuracy.)
>
> * instead of using GeographicLib's Planimeter program, you might find
> it
>    simpler to use proj's geod_polygonarea function; this implements
>    the same algorithm. It's documented at
>
>  
> https://geographiclib.sourceforge.io/1.49/C/geodesic_8h.html#aafa25f138d78c387a107ec0221bbb181
>
>    If you are not tied to proj.4, then use the PolygonArea class in
>    GeographicLib
>
>  
> https://geographiclib.sourceforge.io/1.49/classGeographicLib_1_1PolygonAreaT.html
>
> * following up on daan's suggestion: transforming to an equal area
>    projection is possible, but use the azimuthal equal area projection
>    instead of the cylindrical one. The edges of your squares in the
>    polar stereographic projection will be straighter in the azimuthal
>    equal area projection and so the distortion involved in the
>    reprojection will be less.
>
> * an alternative to using an equal area projection is to project the
>    points onto the authalic sphere and then to use the formula for
>    areas on a sphere. This is the route that Oracle takes. This has
>    the advantage of giving small distortion over the whole globe. If
>    you go this route, I recommend compute spherical areas with Eq (64)
>    from my paper "Algorithms for geodesics"
>
>      https://doi.org/10.1007/s00190-012-0578-z


From charles.karney at sri.com  Thu Apr 25 10:31:10 2019
From: charles.karney at sri.com (Charles Karney)
Date: Thu, 25 Apr 2019 17:31:10 +0000
Subject: [PROJ] Correcting map projection errors
In-Reply-To: <87muke3i6a.fsf@geus3064linuxwsm.geus.dk>
References: <CAFdBzEqx-E9msZL6TRWnzWw2ifOOZvMb91FaKaFSygmvJ9MJzQ@mail.gmail.com>
 <87sgu95pfb.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEO_7MyBNzt7+EDkeudR+Lq5xYDNmZP8bV0gj2SY5AeQdA@mail.gmail.com>
 <87a7gh59zc.fsf@geus3064linuxwsm.geus.dk>
 <CAH0YoEObpZAA2OhGqsuUVTJ=ofJoTd3=rP-Q5FGDiTi2=gwmeg@mail.gmail.com>
 <87mukg4nen.fsf@geus3064linuxwsm.geus.dk>
 <7AE24AED-A9F8-4D50-BB7A-02F1E7144FD1@aol.com>
 <CAH0YoEMqLUXfVPi4+UeS8moNNwe2-Ct-WV-FrS44gofrBO7i8g@mail.gmail.com>
 <4fda2edb-628c-7642-2727-7b9ee0f5b96e@karney.com>
 <87muke3i6a.fsf@geus3064linuxwsm.geus.dk>
Message-ID: <c8da3ceb-9b5d-522c-dd96-eec367647f8e@sri.com>

On 4/24/19 10:58 PM, Ken Mankoff wrote:
> Hi Charles,
> 
> Thanks for contributing to the discussion. I'm going offline for the
> next 5 weeks and so I can't follow up much more on this, but I'm happy
> to hear you think the current method is probably good enough.

You should verify this!  Take a sampling of rectangles over your map and
compare the area computations:

* projected area with the scale correction,
* area returned by Planimeter,

and check that the discrepancy is small enough for your purposes.

> I'm not tied to proj4 or any specific tool, but prefer to use existing
> user-level tools rather than code my own, even a simple wrapper function
> - so for this reason I would rather run your planimeter tool than access
> the proj function you link to. Unless that function is exposed through
> the proj CLI interface somehow.

No, the proj CLI does not include area calculations.  The geod program
just solves plain the direct and inverse geodesic problems.

From nyall.dawson at gmail.com  Tue Apr 30 00:47:30 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 30 Apr 2019 17:47:30 +1000
Subject: [PROJ] More confusion regarding proj 6
Message-ID: <CAB28Ash2pyGBMW7bG6k_c3AxOsmwMS0R1TSR+XF4c_MmzFEmGA@mail.gmail.com>

Hi list,

It's time for another set of questions from a mere projection mortal
trying to make way with this:

Q1:

I have the WKT string:

  GEOGCS["WGS 84",
    DATUM["WGS_1984",
      SPHEROID["WGS 84",6378137,298.257223563,
        AUTHORITY["EPSG","7030"]],
      TOWGS84[0,0,0,0,0,0,0],
      AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
    UNIT["DMSH",0.0174532925199433,AUTHORITY["EPSG","9108"]],
    AXIS["Lat",NORTH],
    AXIS["Long",EAST],
 AUTHORITY["EPSG","4326"]]

I call proj_create_from_wkt using this string, and get an object back.
But calling methods like proj_get_id_auth_name or proj_get_id_code
gives no result here. I'd expect EPSG/4326. What am I missing?

Q2:

If I call proj_create using "+proj=longlat +ellps=WGS84
+towgs84=0,0,0,0,0,0,0 +no_defs +type=crs", I get something back. What
is this something? Trying to call proj_crs_get_coordinate_system on
the returned value throws the error "Object is not a SingleCRS". How
can I get a coordinate system from this result?

Q3:

Sometimes the objects returned by database creation are CompoundCRS. I
gather I should be using proj_crs_get_sub_crs to get the horizontal
crs from these, but the docs state: "Index of the CRS component
(typically 0 = horizontal, 1 = vertical)". Can I just blindly call use
an index of 0 and hope for the best? I can't see any other methods to
work with CompoundCRS objects, so I can't iterate through the indexes
as I don't know how many there are. Or are there always 2?

That's it for now... there's sure to be more to follow ;)

Nyall

From even.rouault at spatialys.com  Tue Apr 30 03:44:01 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 12:44:01 +0200
Subject: [PROJ] More confusion regarding proj 6
In-Reply-To: <CAB28Ash2pyGBMW7bG6k_c3AxOsmwMS0R1TSR+XF4c_MmzFEmGA@mail.gmail.com>
References: <CAB28Ash2pyGBMW7bG6k_c3AxOsmwMS0R1TSR+XF4c_MmzFEmGA@mail.gmail.com>
Message-ID: <6357865.QKlQi1eZ17@even-i700>

Hi Nyall,
> 
> Q1:
> 
> I have the WKT string:
> 
>   GEOGCS["WGS 84",
>     DATUM["WGS_1984",
>       SPHEROID["WGS 84",6378137,298.257223563,
>         AUTHORITY["EPSG","7030"]],
>       TOWGS84[0,0,0,0,0,0,0],
>       AUTHORITY["EPSG","6326"]],
>     PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
>     UNIT["DMSH",0.0174532925199433,AUTHORITY["EPSG","9108"]],
>     AXIS["Lat",NORTH],
>     AXIS["Long",EAST],
>  AUTHORITY["EPSG","4326"]]
> 
> I call proj_create_from_wkt using this string, and get an object back.
> But calling methods like proj_get_id_auth_name or proj_get_id_code
> gives no result here. I'd expect EPSG/4326. What am I missing?

OK, I admit this is subtle. The issue here is that there is a TOWGS84[] 
clause, hence the returned object is not a GeographicCRS, but a BoundCRS of a 
GeographicCRS (a rather useless one, because the DATUM is already WGS84, so 
the TOWGS84[] clause could have been omitted). The BoundCRS has not the ID 
attached to it, only its base CRS.

Let me advertize again the projinfo utility as a investigation tool, because 
projinfo 'GEOGCS["WGS...' will return the WKT2_2018 representation, which 
shows that it is a BOUNDCRS)

The following will give you what you expect:

#include "proj.h"
#include <assert.h>
#include <stdio.h>

int main()
{
    PJ_CONTEXT* ctx = NULL;
    PJ* p = proj_create_from_wkt(ctx,
        "GEOGCS[\"WGS 84\","
        "DATUM[\"WGS_1984\","
        "  SPHEROID[\"WGS 84\",6378137,298.257223563,"
        "    AUTHORITY[\"EPSG\",\"7030\"]],"
        "  TOWGS84[0,0,0,0,0,0,0],"
        "  AUTHORITY[\"EPSG\",\"6326\"]],"
        "PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],"
        "UNIT[\"DMSH\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],"
        "AXIS[\"Lat\",NORTH],"
        "AXIS[\"Long\",EAST],"
        "AUTHORITY[\"EPSG\",\"4326\"]]", NULL, NULL, NULL);
    
    assert(proj_get_type(p) == PJ_TYPE_BOUND_CRS);
    PJ* base = proj_get_source_crs(ctx, p);
    
    printf("%s %s\n", proj_get_id_auth_name(base, 0), proj_get_id_code(base, 
0));
    proj_destroy(base);
    proj_destroy(p);
    return 0;
}

> 
> Q2:
> 
> If I call proj_create using "+proj=longlat +ellps=WGS84
> +towgs84=0,0,0,0,0,0,0 +no_defs +type=crs", I get something back. What
> is this something? Trying to call proj_crs_get_coordinate_system on
> the returned value throws the error "Object is not a SingleCRS". How
> can I get a coordinate system from this result?

Same as above. A boundCRS (and projinfo is still of help here :-)) You can get 
the coordinate system of its sourceCRS by first fetching it with 
proj_get_source_crs().

> 
> Q3:
> 
> Sometimes the objects returned by database creation are CompoundCRS. I
> gather I should be using proj_crs_get_sub_crs to get the horizontal
> crs from these, but the docs state: "Index of the CRS component
> (typically 0 = horizontal, 1 = vertical)". Can I just blindly call use
> an index of 0 and hope for the best? I can't see any other methods to
> work with CompoundCRS objects, so I can't iterate through the indexes
> as I don't know how many there are. Or are there always 2?

There should be (normally) at least 2 components in a CompoundCRS. In theory 
there might be more, but that would be completely exotic objects (spatio-
temporal CRS, spatio-temporal-parametric CRS) and you shouldn't encounter them 
in practice.

proj_crs_get_sub_crs(crs, idx) will cleanly return NULL if you try to access a 
component that does not exist. Yes, there is not function to return the number 
of components, so checking for NULL is the way to go.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Tue Apr 30 03:58:17 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 30 Apr 2019 20:58:17 +1000
Subject: [PROJ] More confusion regarding proj 6
In-Reply-To: <6357865.QKlQi1eZ17@even-i700>
References: <CAB28Ash2pyGBMW7bG6k_c3AxOsmwMS0R1TSR+XF4c_MmzFEmGA@mail.gmail.com>
 <6357865.QKlQi1eZ17@even-i700>
Message-ID: <CAB28AshTEr17AJkR2pLCpNm9bUYxGEwAs+PeFzGxQC3jqADvbg@mail.gmail.com>

On Tue, 30 Apr 2019 at 20:44, Even Rouault <even.rouault at spatialys.com> wrote:
>
> Hi Nyall,
> >
> > Q1:
> >
> > I have the WKT string:
> >
> >   GEOGCS["WGS 84",
> >     DATUM["WGS_1984",
> >       SPHEROID["WGS 84",6378137,298.257223563,
> >         AUTHORITY["EPSG","7030"]],
> >       TOWGS84[0,0,0,0,0,0,0],
> >       AUTHORITY["EPSG","6326"]],
> >     PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
> >     UNIT["DMSH",0.0174532925199433,AUTHORITY["EPSG","9108"]],
> >     AXIS["Lat",NORTH],
> >     AXIS["Long",EAST],
> >  AUTHORITY["EPSG","4326"]]
> >
> > I call proj_create_from_wkt using this string, and get an object back.
> > But calling methods like proj_get_id_auth_name or proj_get_id_code
> > gives no result here. I'd expect EPSG/4326. What am I missing?
>
> OK, I admit this is subtle. The issue here is that there is a TOWGS84[]
> clause, hence the returned object is not a GeographicCRS, but a BoundCRS of a
> GeographicCRS (a rather useless one, because the DATUM is already WGS84, so
> the TOWGS84[] clause could have been omitted). The BoundCRS has not the ID
> attached to it, only its base CRS.
>
> Let me advertize again the projinfo utility as a investigation tool, because
> projinfo 'GEOGCS["WGS...' will return the WKT2_2018 representation, which
> shows that it is a BOUNDCRS)
>
> The following will give you what you expect:
>
> #include "proj.h"
> #include <assert.h>
> #include <stdio.h>
>
> int main()
> {
>     PJ_CONTEXT* ctx = NULL;
>     PJ* p = proj_create_from_wkt(ctx,
>         "GEOGCS[\"WGS 84\","
>         "DATUM[\"WGS_1984\","
>         "  SPHEROID[\"WGS 84\",6378137,298.257223563,"
>         "    AUTHORITY[\"EPSG\",\"7030\"]],"
>         "  TOWGS84[0,0,0,0,0,0,0],"
>         "  AUTHORITY[\"EPSG\",\"6326\"]],"
>         "PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],"
>         "UNIT[\"DMSH\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],"
>         "AXIS[\"Lat\",NORTH],"
>         "AXIS[\"Long\",EAST],"
>         "AUTHORITY[\"EPSG\",\"4326\"]]", NULL, NULL, NULL);
>
>     assert(proj_get_type(p) == PJ_TYPE_BOUND_CRS);
>     PJ* base = proj_get_source_crs(ctx, p);
>
>     printf("%s %s\n", proj_get_id_auth_name(base, 0), proj_get_id_code(base,
> 0));
>     proj_destroy(base);
>     proj_destroy(p);
>     return 0;
> }
>
> >
> > Q2:
> >
> > If I call proj_create using "+proj=longlat +ellps=WGS84
> > +towgs84=0,0,0,0,0,0,0 +no_defs +type=crs", I get something back. What
> > is this something? Trying to call proj_crs_get_coordinate_system on
> > the returned value throws the error "Object is not a SingleCRS". How
> > can I get a coordinate system from this result?
>
> Same as above. A boundCRS (and projinfo is still of help here :-)) You can get
> the coordinate system of its sourceCRS by first fetching it with
> proj_get_source_crs().
>
> >
> > Q3:
> >
> > Sometimes the objects returned by database creation are CompoundCRS. I
> > gather I should be using proj_crs_get_sub_crs to get the horizontal
> > crs from these, but the docs state: "Index of the CRS component
> > (typically 0 = horizontal, 1 = vertical)". Can I just blindly call use
> > an index of 0 and hope for the best? I can't see any other methods to
> > work with CompoundCRS objects, so I can't iterate through the indexes
> > as I don't know how many there are. Or are there always 2?
>
> There should be (normally) at least 2 components in a CompoundCRS. In theory
> there might be more, but that would be completely exotic objects (spatio-
> temporal CRS, spatio-temporal-parametric CRS) and you shouldn't encounter them
> in practice.
>
> proj_crs_get_sub_crs(crs, idx) will cleanly return NULL if you try to access a
> component that does not exist. Yes, there is not function to return the number
> of components, so checking for NULL is the way to go.

Perfect -- many thanks Even! Sounds like most of my issues are
stemming from similar underlying causes, and I'll need to wrap up a
generic "getHorizontalSingleCRSfromPJ" function which handles these
different situations.

Nyall

>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From Didier.Richard at ign.fr  Tue Apr 30 04:39:34 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 11:39:34 +0000
Subject: [PROJ] [PROJ 6.0.0] proj_create_operation_factory_context behavior
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB4746@mailex1.ign.fr>

Hi all,

While testing the library, the creation of a transformation between two specific CRS leads me facing 2 challenges :

1.- Despite the fact that the two CRS (Réunion island and French Antilles) have disjoint areas an operation is created.
The documentation expressed that default behavior for areas is "Strict containment", I, then, expected to have 0 operations in the end ...

If I set acc to 1.0, then, I got the right answer because the Ballpark transformation is removed.

2.- On the latter point, when acc equals 0.0, the candidate operation is pipeline containing a Ballpark transformation, proj_coordoperation_has_ballpark_transformation() still returns false ...

Any thoughts ?


The code :

#include <stdio.h>
#include <string.h>
#include "proj.h"

int main ( int argc, char *argv[] ) {
    PJ_CONTEXT *c;
    PJ *src, *tgt;
    PJ_PROJ_INFO info;
    PJ_OPERATION_FACTORY_CONTEXT *factory;
    PJ_OBJ_LIST *results;
    double acc = 0.0;

    src = proj_create(c, "IGNF:REUN47GAUSSL");  // area : 55.17,-21.42,55.92,-20.76
    tgt = proj_create(c, "IGNF:RGAF09UTM20");     // area : -63.2,14.25,-60.73,18.2
    // areas are strictly disjoint ... intersection is then empty
    factory = proj_create_operation_factory_context(c,NULL);
    if (factory == NULL) {
        fprintf(stderr,"Error : %s\n", proj_errno_string(proj_context_errno(c)));
        return 1;
    }
    results = proj_create_operations(c, src, tgt, factory);
    if (results == NULL) {
        fprintf(stderr,"No operation between '%s' and '%s'\n", proj_get_name(src), proj_get_name(tgt));
    } else {
        int i, n;
        PJ *ope;

        n = proj_list_get_count(results);
        fprintf(stderr,"%d operation(s) found :\n", n);
        for (i = 0; i < n ; i++) {
            ope = proj_list_get(c, results, i);
            info = proj_pj_info(ope);
            fprintf(stderr,"Info :\nID:%s\nDesc:%s\nDef:%s\nInv:%d\nAcc:%f\n", info.id, info.description, info.definition, info.has_inverse, info.accuracy);
            fprintf(stderr,"operation does %shave ballpark\n", proj_coordoperation_has_ballpark_transformation(c, ope)? "":"not ");
            if (strstr(proj_get_name(ope), "Ballpark") != NULL) {
                fprintf(stderr,"operation does have ballpark in its name !!!!\n");
            }
            fprintf(stderr,"'%s'\n", proj_get_name(ope));
            proj_destroy(ope);
        }
        proj_list_destroy(results);
    }

    proj_operation_factory_context_destroy(factory);
    proj_destroy(src);
    proj_destroy(tgt);
    proj_context_destroy(c); /* may be omitted in the single threaded case */
    return 0;
}

The output:

1 operation(s) found :
Info :
ID:pipeline
Desc:Inverse of GAUSS LABORDE REUNION + Ballpark geographic offset from Reunion Piton des Neiges geographiques (dms) to RGAF09 geographiques (dms) + UTM NORD FUSEAU 20
Def:proj=pipeline step inv proj=gstmerc lat_0=-21.1166666667 lon_0=55.5333333333 k_0=1 x_0=160000 y_0=50000 ellps=intl step proj=utm zone=20 ellps=GRS80
Inv:1
Acc:-1.000000
operation does not have ballpark
operation does have ballpark in its name !!!!
'Inverse of GAUSS LABORDE REUNION + Ballpark geographic offset from Reunion Piton des Neiges geographiques (dms) to RGAF09 geographiques (dms) + UTM NORD FUSEAU 20'

Regards,
--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


From Didier.Richard at ign.fr  Tue Apr 30 05:41:54 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 12:41:54 +0000
Subject: [PROJ] [PROJ 6.0.0] Cannot create a Prime Meridian with
 proj_create_from_wkt
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB57DC@mailex1.ign.fr>

Hi all,

Still testing the library, it seams that the prime meridian creation with a call to proj_create_from_wkt() leads to getting an error. Is it a feature (cause one can create an ellipsoid using proj_create_from_wkt()) ?

Digging into the code, it looks like wkt2_grammar.y as no entry 'prime_meridian' in the entry point 'input".
A fast glance at OGC 18-010r5 does not answer to that fact (neither to the fact that creating an ellipsoid is allowed).

By the way, the warnings and errors thrown by proj_create_from_wkt() are not "merged" into the error handling API : proj_context_errno() returns NULL. Why not pushing back these messages to the error handling API ?

Any thoughts ?

The code :

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "proj.h"

int main ( int argc, char *argv[] ) {
    PJ_CONTEXT *c;
    PJ *pm, *pm2;
    double l, r;
    char *u;
    char *opts[] = {"MULTILINE=NO","OUTPUT_AXIS=AUTO",NULL};
    const char *wkt;
    PROJ_STRING_LIST w, g;

    c = proj_context_create();
    pm = proj_create_from_database(c,"EPSG","8901",PJ_CATEGORY_PRIME_MERIDIAN, 0,NULL);
    if (pm == NULL) {
        fprintf(stderr,"Error : %s\n", proj_errno_string(proj_context_errno(c)));
        return 1;
    }
    if (proj_prime_meridian_get_parameters(c,pm,&l,&r,(const char **)&u)) {
        fprintf(stderr,"l: %10.2f\n", l);
        fprintf(stderr,"r: %10.2f\n", r);
        fprintf(stderr,"u: %10s\n", u);
    }
    wkt = proj_as_wkt(c,pm,PJ_WKT2_2015,(const char * const *)opts);
    fprintf(stderr,"WKT:\n%s\n", wkt);

    pm2 = proj_create_from_wkt(c,wkt,NULL,&w,&g);
    if (pm2 == NULL) {
        PROJ_STRING_LIST m;
        size_t l = 0;
        char *msg;
        fprintf(stderr,"Error : %s\n", proj_errno_string(proj_context_errno(c)));
        if (w) {
            for (m= w;*m;m++) {
                l += strlen(*m);
            }
            msg = (char *)malloc(l+1);
            msg[0] = '\0';
            for (m= w;*m;m++) {
                msg = strcat(msg,*m);
            }
            fprintf(stderr,"Warning (wkt parser): %s\n", msg);
            free(msg);
            proj_string_list_destroy(w);
        }
        l = 0;
        if (g) {
            for (m= g;*m;m++) {
                l += strlen(*m);
            }
            msg = (char *)malloc(l+1);
            msg[0] = '\0';
            for (m= g;*m;m++) {
                msg = strcat(msg,*m);
            }
            fprintf(stderr,"Error   (wkt parser): %s\n", msg);
            free(msg);
            proj_string_list_destroy(g);
        }
        return 2;
    }

    if (w) { proj_string_list_destroy(w); }
    if (g) { proj_string_list_destroy(g); }
    proj_destroy(pm2);
    proj_destroy(pm);
    proj_context_destroy(c); /* may be omitted in the single threaded case */
    return 0;
}

The output:

l:       0.00
r:       0.02
u:     degree
WKT:
PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8901]]
Error : (null)
Error   (wkt parser): unhandled keyword: PRIMEM

Regards,
--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


From Didier.Richard at ign.fr  Tue Apr 30 06:06:43 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 13:06:43 +0000
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
 transformation of type EPSG:9616
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>

Hi all,

Still on library testing, I try to create using different methods a transformation that exists in the proj.db, in other_transformation table (IGNF:TSG1250 which is EPSG:9616 method) :

1.- using proj_create : fails ;
2.- using proj_create_from_database : succeed but got a type different from the one given to the function ;
3.- using proj_create_from_name : succeed but got a type which is not PJ_TYPE_OTHER_COORDINATE_OPERATION (expected).

Any thoughts on these differences between function calls and return transformation types ?

The code :

#include <stdio.h>
#include <string.h>
#include "proj.h"

int main ( int argc, char *argv[] ) {
    PJ_CONTEXT *c;
    PJ_OBJ_LIST *list;
    PJ_TYPE types[] = { PJ_TYPE_CONVERSION, PJ_TYPE_TRANSFORMATION, PJ_TYPE_CONCATENATED_OPERATION, PJ_TYPE_OTHER_COORDINATE_OPERATION };
    PJ *obj;
    PJ_PROJ_INFO info;
    int i, n;
    const char *wkt;

    fprintf(stderr,"PJ_TYPE_CONVERSION = %d\n", PJ_TYPE_CONVERSION);
    fprintf(stderr,"PJ_TYPE_TRANSFORMATION = %d\n", PJ_TYPE_TRANSFORMATION);
    fprintf(stderr,"PJ_TYPE_CONCATENATED_OPERATION = %d\n", PJ_TYPE_CONCATENATED_OPERATION);
    fprintf(stderr,"PJ_TYPE_OTHER_COORDINATE_OPERATION = %d\n", PJ_TYPE_OTHER_COORDINATE_OPERATION);
    c = proj_context_create();

    obj = proj_create(c, "IGNF:SG1250");
    if ( obj != NULL ) {
        fprintf(stderr,"IGNF:TSG1250 created as %d\n", proj_get_type(obj));
        info = proj_pj_info(obj);
        fprintf(stderr,"Info :\nID:%s\nDesc:%s\nDef:%s\nInv:%d\nAcc:%f\n", info.id, info.description, info.definition, info.has_inverse, info.accuracy);
        proj_destroy(obj);
    }

    for ( i = 0; i < 4 ; i++) {
        obj = proj_create_from_database(c, "IGNF", "TSG1250", types[i], 0, NULL);
        if ( obj != NULL ) {
            fprintf(stderr,"IGNF:TSG1250 created as %d but has type %d ?!\n", types[i], proj_get_type(obj));
            info = proj_pj_info(obj);
            fprintf(stderr,"Info :\nID:%s\nDesc:%s\nDef:%s\nInv:%d\nAcc:%f\n", info.id, info.description, info.definition, info.has_inverse, info.accuracy);
            proj_destroy(obj);
        }
    }

    list = proj_create_from_name(c,"IGNF","NGF-IGN 1969 vers EVRF2000",types,4,1,0,NULL);
    if (list == NULL) {
        fprintf(stderr,"Error : %s\n", proj_errno_string(proj_context_errno(c)));
        return 1;
    }
    n = proj_list_get_count(list);
    fprintf(stderr, "found %d object(s) :\n", n);
    for ( i = 0; i < n; i++) {
        obj = proj_list_get(c, list, i);
        fprintf(stderr,"found %s of type %d\n", proj_get_name(obj), proj_get_type(obj));
        info = proj_pj_info(obj);
        fprintf(stderr,"Info :\nID:%s\nDesc:%s\nDef:%s\nInv:%d\nAcc:%f\n", info.id, info.description, info.definition, info.has_inverse, info.accuracy);
        proj_destroy(obj);
    }
    proj_list_destroy(list);
    proj_context_destroy(c); /* may be omitted in the single threaded case */
    return 0;
}

The output :

PJ_TYPE_CONVERSION = 21
PJ_TYPE_TRANSFORMATION = 22
PJ_TYPE_CONCATENATED_OPERATION = 23
PJ_TYPE_OTHER_COORDINATE_OPERATION = 24
proj_create: crs not found
IGNF:TSG1250 created as 21 but has type 0 ?!
Info :
ID:(null)
Desc:ISO-19111 object
Def:
Inv:0
Acc:-1.000000
IGNF:TSG1250 created as 22 but has type 0 ?!
Info :
ID:(null)
Desc:ISO-19111 object
Def:
Inv:0
Acc:-1.000000
IGNF:TSG1250 created as 23 but has type 0 ?!
Info :
ID:(null)
Desc:ISO-19111 object
Def:
Inv:0
Acc:-1.000000
IGNF:TSG1250 created as 24 but has type 0 ?!
Info :
ID:(null)
Desc:ISO-19111 object
Def:
Inv:0
Acc:-1.000000
found 1 object(s) :
pj_ellipsoid - final: a=6378137.000 f=1/298.257, errno=0
pj_ellipsoid - final:    ellps=GRS80
found NGF-IGN 1969 vers EVRF2000 (UELN-95/98)(EUROPEAN VERTICAL REFERENCE FRAME) of type 22
Info :
ID:geogoffset
Desc:NGF-IGN 1969 vers EVRF2000 (UELN-95/98)(EUROPEAN VERTICAL REFERENCE FRAME)
Def:proj=geogoffset dh=-0.486 ellps=GRS80
Inv:1
Acc:-1.000000

Regards,
--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


From even.rouault at spatialys.com  Tue Apr 30 06:16:05 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 15:16:05 +0200
Subject: [PROJ] [PROJ 6.0.0] proj_create_operation_factory_context
	behavior
In-Reply-To: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB4746@mailex1.ign.fr>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB4746@mailex1.ign.fr>
Message-ID: <3380948.6CsQ4eI1tk@even-i700>

Hi Didier,

> 1.- Despite the fact that the two CRS (Réunion island and French Antilles)
> have disjoint areas an operation is created. The documentation expressed
> that default behavior for areas is "Strict containment", I, then, expected
> to have 0 operations in the end ...

Ah, I was hoping nobody would seriously try to check how all those criteria
exactly work :-) The logic is convoluted, somewhat arbitrary and has been
modified many times to try to "make things work". That is to say: return meaningful results
when possible, make sure existing regressions tests we had still pass,
and no being too pedantic (many people want to be able to do by default
meaningless transformations such as the one you exhibit, hence this concept of
ballpark transformation when we lack information to do datum shifts, etc).

The proj_operation_factory_context_set_spatial_criterion() defines how to compare
the area of use of a candidate coordinate operation with a representative area
of use of the source and target CRS. How that "representive area of use" is computed
is controlled by proj_operation_factory_context_set_crs_extent_use().
This one defaults to PJ_CRS_EXTENT_SMALLEST
That is, given the source CRS and target CRS, we only consider the extent of the
smallest one of those two, when we check the compatibility of coordinate operations
with the CRS area of use. In your case, this will be Réunion. The ballpark transformation
has worldwide coverage, so la Réunion is strictly contained in it,
hence the result you get.

If for example you set set_crs_extent_use() to PJ_CRS_EXTENT_INTERSECTION,
combined with the fix I just pushed per
https://github.com/OSGeo/proj.4/commit/b4a9e65cec051ca3cb16b8cccfa012d70ce10570 ,
then you'll get an empty set.

$ src/projinfo -s IGNF:REUN47GAUSSL -t IGNF:RGAF09UTM20 --crs-extent-use intersection
Candidate operations found: 0

That said PJ_CRS_EXTENT_INTERSECTION is not always the best answer.
For non-ballpark transformations, PJ_CRS_EXTENT_BOTH would be the most pedantic option
because it will return only coordinate operations whose area of use contains at least the
area of use of the source tand target CRS.

The reason for PJ_CRS_EXTENT_SMALLEST being the default is when doing transformation
from a ProjectedCRS with nation extent to WGS84 typically. In the database you'll get
possibly Helmert-based/grid-based transformation for that, whose area of use is the area
of use of the ProjectedCRS. So PJ_CRS_EXTENT_BOTH cannot be used there (because the
transformation is not valid for the whole world.

> 
> 2.- On the latter point, when acc equals 0.0, the candidate operation is
> pipeline containing a Ballpark transformation,
> proj_coordoperation_has_ballpark_transformation() still returns false ...

Good catch. Was indeed a bug. Just fixed per
https://github.com/OSGeo/proj.4/commit/cca27b1fae234a90df42ff5341121759846dc39b

$ src/projinfo -s IGNF:REUN47GAUSSL -t IGNF:RGAF09UTM20 --summary
Candidate operations found: 1
unknown id, [...], unknown accuracy, World, ---> has ballpark transformation <----

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From erik.ravhed at t-kartor.com  Tue Apr 30 06:17:30 2019
From: erik.ravhed at t-kartor.com (Erik Ravhed)
Date: Tue, 30 Apr 2019 15:17:30 +0200
Subject: [PROJ] EPSG:3034 axis ordering
Message-ID: <9a95013e-c124-af90-7e91-ce34a18cc94b@t-kartor.com>

Hi all,

I have a question regarding EPSG:3034 and its axis ordering. According 
to https://www.epsg-registry.org the order of the axes should be ordered 
as northing easting. Looking at the proj4 definition it is defined as 
the following:

+proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs

Looking at this definition I don't see how I can determine that 
EPSG:3034 should be treated as a northing easting. Shouldn't |+axis=neu| 
be a part of the proj4 definition?

Best Regards,
Erik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190430/17a6429c/attachment.html>

From even.rouault at spatialys.com  Tue Apr 30 06:35:39 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 15:35:39 +0200
Subject: [PROJ] [PROJ 6.0.0] Cannot create a Prime Meridian with
	proj_create_from_wkt
In-Reply-To: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB57DC@mailex1.ign.fr>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB57DC@mailex1.ign.fr>
Message-ID: <1793541.9IHK6gOpTp@even-i700>

On mardi 30 avril 2019 12:41:54 CEST Didier Richard wrote:
> Hi all,
> 
> Still testing the library, it seams that the prime meridian creation with a
> call to proj_create_from_wkt() leads to getting an error. Is it a feature
> (cause one can create an ellipsoid using proj_create_from_wkt()) ?

I probably didn't see the interest of instanciating a standalone prime 
meridian object, so yes a "feature" :-)

> 
> By the way, the warnings and errors thrown by proj_create_from_wkt() are not
> "merged" into the error handling API : proj_context_errno() returns NULL.
> Why not pushing back these messages to the error handling API ?

Not sure if you are testing with 6.0 or master, but master should now set a 
PJD_ERR_GENERIC_ERROR

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr 30 06:50:23 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 15:50:23 +0200
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
	transformation of type EPSG:9616
In-Reply-To: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
Message-ID: <2413957.AUb9HqQ0Gj@even-i700>

On mardi 30 avril 2019 13:06:43 CEST Didier Richard wrote:
> Hi all,
> 
> Still on library testing, I try to create using different methods a
> transformation that exists in the proj.db, in other_transformation table
> (IGNF:TSG1250 which is EPSG:9616 method) :
> 
> 1.- using proj_create : fails ;

Yes, expected. See
https://proj4.org/development/reference/functions.html#c.proj_create

Short syntax AUTH:CODE in proj_create() will try only CRS objects.
Use urn:ogc:def:coordinateOperation:AUTH::CODE for coordinate operations

> 2.- using proj_create_from_database : succeed but got a type different from
> the one given to the function ;

Misuse of the API. You should pass a PJ_CATEGORY value, not a PJ_TYPE one;
Unfortunately a C compiler doesn't warn about that, wheras a C++ errors out.
So use PJ_CATEGORY_COORDINATE_OPERATION
(the fact that it returned something is completely undefined behavior. it 
might have crashed as well)

> 3.- using proj_create_from_name : succeed
> but got a type which is not PJ_TYPE_OTHER_COORDINATE_OPERATION (expected).

Yes, returns PJ_TYPE_TRANSFORMATION=22 as expected

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Didier.Richard at ign.fr  Tue Apr 30 06:50:59 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 13:50:59 +0000
Subject: [PROJ] [PROJ 6.0.0] proj_create_operation_factory_context
 behavior
In-Reply-To: <3380948.6CsQ4eI1tk@even-i700>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB4746@mailex1.ign.fr>,
 <3380948.6CsQ4eI1tk@even-i700>
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB58A1@mailex1.ign.fr>

Hi Even,

Thanks for the reply full of informations !
(I thought you were on leave ?-)

I usually check whether the source and target CRS areas intersects before transforming coordinates from one to the other because the underlaying geographic CRS have the same area as the projected one.

I will wait for the fixes (I guess in 6.1.0) to check these points (see https://github.com/dgricci/golang-proj for the reasons why I am testing the library :)

Best regards,
--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


________________________________________
De : Even Rouault [even.rouault at spatialys.com]
Envoyé : mardi 30 avril 2019 15:16
À : proj at lists.osgeo.org
Cc : Didier Richard
Objet : Re: [PROJ] [PROJ 6.0.0] proj_create_operation_factory_context behavior

Hi Didier,

> 1.- Despite the fact that the two CRS (Réunion island and French Antilles)
> have disjoint areas an operation is created. The documentation expressed
> that default behavior for areas is "Strict containment", I, then, expected
> to have 0 operations in the end ...

Ah, I was hoping nobody would seriously try to check how all those criteria
exactly work :-) The logic is convoluted, somewhat arbitrary and has been
modified many times to try to "make things work". That is to say: return meaningful results
when possible, make sure existing regressions tests we had still pass,
and no being too pedantic (many people want to be able to do by default
meaningless transformations such as the one you exhibit, hence this concept of
ballpark transformation when we lack information to do datum shifts, etc).

The proj_operation_factory_context_set_spatial_criterion() defines how to compare
the area of use of a candidate coordinate operation with a representative area
of use of the source and target CRS. How that "representive area of use" is computed
is controlled by proj_operation_factory_context_set_crs_extent_use().
This one defaults to PJ_CRS_EXTENT_SMALLEST
That is, given the source CRS and target CRS, we only consider the extent of the
smallest one of those two, when we check the compatibility of coordinate operations
with the CRS area of use. In your case, this will be Réunion. The ballpark transformation
has worldwide coverage, so la Réunion is strictly contained in it,
hence the result you get.

If for example you set set_crs_extent_use() to PJ_CRS_EXTENT_INTERSECTION,
combined with the fix I just pushed per
https://github.com/OSGeo/proj.4/commit/b4a9e65cec051ca3cb16b8cccfa012d70ce10570 ,
then you'll get an empty set.

$ src/projinfo -s IGNF:REUN47GAUSSL -t IGNF:RGAF09UTM20 --crs-extent-use intersection
Candidate operations found: 0

That said PJ_CRS_EXTENT_INTERSECTION is not always the best answer.
For non-ballpark transformations, PJ_CRS_EXTENT_BOTH would be the most pedantic option
because it will return only coordinate operations whose area of use contains at least the
area of use of the source tand target CRS.

The reason for PJ_CRS_EXTENT_SMALLEST being the default is when doing transformation
from a ProjectedCRS with nation extent to WGS84 typically. In the database you'll get
possibly Helmert-based/grid-based transformation for that, whose area of use is the area
of use of the ProjectedCRS. So PJ_CRS_EXTENT_BOTH cannot be used there (because the
transformation is not valid for the whole world.

>
> 2.- On the latter point, when acc equals 0.0, the candidate operation is
> pipeline containing a Ballpark transformation,
> proj_coordoperation_has_ballpark_transformation() still returns false ...

Good catch. Was indeed a bug. Just fixed per
https://github.com/OSGeo/proj.4/commit/cca27b1fae234a90df42ff5341121759846dc39b

$ src/projinfo -s IGNF:REUN47GAUSSL -t IGNF:RGAF09UTM20 --summary
Candidate operations found: 1
unknown id, [...], unknown accuracy, World, ---> has ballpark transformation <----

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr 30 06:54:30 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 15:54:30 +0200
Subject: [PROJ] EPSG:3034 axis ordering
In-Reply-To: <9a95013e-c124-af90-7e91-ce34a18cc94b@t-kartor.com>
References: <9a95013e-c124-af90-7e91-ce34a18cc94b@t-kartor.com>
Message-ID: <1567194.SVGiMHY57P@even-i700>

On mardi 30 avril 2019 15:17:30 CEST Erik Ravhed wrote:
> Hi all,
> 
> I have a question regarding EPSG:3034 and its axis ordering. According
> to https://www.epsg-registry.org the order of the axes should be ordered
> as northing easting. Looking at the proj4 definition it is defined as
> the following:
> 
> +proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000
> +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs
> 
> Looking at this definition I don't see how I can determine that
> EPSG:3034 should be treated as a northing easting. Shouldn't |+axis=neu|
> be a part of the proj4 definition?
> 

Presumably, but proj strings will remain like that forever at that point of 
history, since axis order of projectedCRS was never a concern in PROJ < 6 era, 
and a lot of users of those code still wanted easting, northing order whatever 
EPSG said.

PROJ 6 is now fully axis aware, so when doing a transformation from ETRS89 
lat/long to EPSG:3034, you get:

$ src/projinfo -s EPSG:4258 -t EPSG:3034 -o PROJ

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 
+x_0=4000000 +y_0=2800000 +ellps=GRS80 +step +proj=axisswap +order=2,1

So you have a first axisswap operation to go from input lat,long to internal 
long,lat, then the map projection, and then another axisswap operation to go 
from te internal easting,northing to final northing,easting

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Didier.Richard at ign.fr  Tue Apr 30 07:02:50 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 14:02:50 +0000
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
 transformation of type EPSG:9616
In-Reply-To: <2413957.AUb9HqQ0Gj@even-i700>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>,
 <2413957.AUb9HqQ0Gj@even-i700>
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB58C7@mailex1.ign.fr>


1.- Does not work either with "urn:ogc:def:coordinateOperation:IGNF::SG1250". I guess because of the authority ?

2.- My bad. It works with PJ_CATEGORY_COORDINATE_OPERATION and returns PJ_TYPE_TRANSFORMATION ! Thx a lot

3.- Ok, I thought that operations located in other_transformation table were of type PJ_TYPE_OTHER_COORDINATE_OPERATION. Do you have an example of an operation for which the type is PJ_TYPE_OTHER_COORDINATE_OPERATION ? I found nothing in the test/ directory checking this.

--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


________________________________________
De : Even Rouault [even.rouault at spatialys.com]
Envoyé : mardi 30 avril 2019 15:50
À : proj at lists.osgeo.org
Cc : Didier Richard
Objet : Re: [PROJ] [PROJ 6.0.0] Different behaviors for creating a transformation of type EPSG:9616

On mardi 30 avril 2019 13:06:43 CEST Didier Richard wrote:
> Hi all,
>
> Still on library testing, I try to create using different methods a
> transformation that exists in the proj.db, in other_transformation table
> (IGNF:TSG1250 which is EPSG:9616 method) :
>
> 1.- using proj_create : fails ;

Yes, expected. See
https://proj4.org/development/reference/functions.html#c.proj_create

Short syntax AUTH:CODE in proj_create() will try only CRS objects.
Use urn:ogc:def:coordinateOperation:AUTH::CODE for coordinate operations

> 2.- using proj_create_from_database : succeed but got a type different from
> the one given to the function ;

Misuse of the API. You should pass a PJ_CATEGORY value, not a PJ_TYPE one;
Unfortunately a C compiler doesn't warn about that, wheras a C++ errors out.
So use PJ_CATEGORY_COORDINATE_OPERATION
(the fact that it returned something is completely undefined behavior. it
might have crashed as well)

> 3.- using proj_create_from_name : succeed
> but got a type which is not PJ_TYPE_OTHER_COORDINATE_OPERATION (expected).

Yes, returns PJ_TYPE_TRANSFORMATION=22 as expected

--
Spatialys - Geospatial professional services
http://www.spatialys.com

From erik.ravhed at t-kartor.com  Tue Apr 30 07:12:17 2019
From: erik.ravhed at t-kartor.com (Erik Ravhed)
Date: Tue, 30 Apr 2019 16:12:17 +0200
Subject: [PROJ] EPSG:3034 axis ordering
In-Reply-To: <1567194.SVGiMHY57P@even-i700>
References: <9a95013e-c124-af90-7e91-ce34a18cc94b@t-kartor.com>
 <1567194.SVGiMHY57P@even-i700>
Message-ID: <e5a23be1-877f-6c7a-a5f0-6161b2ea02a7@t-kartor.com>

Thanks for the quick reply and explanation!

Erik

On 4/30/19 3:54 PM, Even Rouault wrote:
> On mardi 30 avril 2019 15:17:30 CEST Erik Ravhed wrote:
>> Hi all,
>>
>> I have a question regarding EPSG:3034 and its axis ordering. According
>> to https://www.epsg-registry.org the order of the axes should be ordered
>> as northing easting. Looking at the proj4 definition it is defined as
>> the following:
>>
>> +proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000
>> +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs
>>
>> Looking at this definition I don't see how I can determine that
>> EPSG:3034 should be treated as a northing easting. Shouldn't |+axis=neu|
>> be a part of the proj4 definition?
>>
> Presumably, but proj strings will remain like that forever at that point of
> history, since axis order of projectedCRS was never a concern in PROJ < 6 era,
> and a lot of users of those code still wanted easting, northing order whatever
> EPSG said.
>
> PROJ 6 is now fully axis aware, so when doing a transformation from ETRS89
> lat/long to EPSG:3034, you get:
>
> $ src/projinfo -s EPSG:4258 -t EPSG:3034 -o PROJ
>
> PROJ string:
> +proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert
> +xy_in=deg +xy_out=rad +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65
> +x_0=4000000 +y_0=2800000 +ellps=GRS80 +step +proj=axisswap +order=2,1
>
> So you have a first axisswap operation to go from input lat,long to internal
> long,lat, then the map projection, and then another axisswap operation to go
> from te internal easting,northing to final northing,easting
>
> Even
>
>

From even.rouault at spatialys.com  Tue Apr 30 07:19:44 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 16:19:44 +0200
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
	transformation of type EPSG:9616
In-Reply-To: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB58C7@mailex1.ign.fr>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <2413957.AUb9HqQ0Gj@even-i700>
 <D4387E9F6EBB5244B21A09D84C0D41B0010CCB58C7@mailex1.ign.fr>
Message-ID: <25522899.e4oYuXiPSZ@even-i700>

On mardi 30 avril 2019 14:02:50 CEST Didier Richard wrote:
> 1.- Does not work either with
> "urn:ogc:def:coordinateOperation:IGNF::SG1250". I guess because of the
> authority ?

no just a typo. Missing T before SG1250

> 3.- Ok, I thought that operations located in other_transformation table were
> of type PJ_TYPE_OTHER_COORDINATE_OPERATION. Do you have an example of an
> operation for which the type is PJ_TYPE_OTHER_COORDINATE_OPERATION ? I
> found nothing in the test/ directory checking this.

For example, if you would do a transformation from a CompoundCRS to another 
CompoundCRS (or a Geographic3D CRS) with both horizontal and vertical 
transformations, there is nothing in ISO:19111 to model the composite of both. 
So there's an internal PROJ C++ class, PROJBasedOperation, whose type would be 
exposed as PJ_TYPE_OTHER_COORDINATE_OPERATION

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From martin.desruisseaux at geomatys.com  Tue Apr 30 07:40:55 2019
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 30 Apr 2019 16:40:55 +0200
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
 transformation of type EPSG:9616
In-Reply-To: <25522899.e4oYuXiPSZ@even-i700>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <2413957.AUb9HqQ0Gj@even-i700>
 <D4387E9F6EBB5244B21A09D84C0D41B0010CCB58C7@mailex1.ign.fr>
 <25522899.e4oYuXiPSZ@even-i700>
Message-ID: <82f6e4ce-b47e-e6b9-8ab2-c8d82e6461b5@geomatys.com>

Le 30/04/2019 à 16:19, Even Rouault a écrit :
> For example, if you would do a transformation from a CompoundCRS to
> another CompoundCRS (or a Geographic3D CRS) with both horizontal and
> vertical transformations, there is nothing in ISO:19111 to model the
> composite of both.

Actually this is modeled with PassThroughOperation +
ConcatenatedOperation. So a transformation between two CompoundCRS with
a vertical component would be like below:

    ConcatenatedOperation (a 3D operation in this example)
        PassThroughOperation (a 3D operation in this example)
            coordOperation = the operation on the horizontal component
            modifiedCoordinate = {0, 1}
        PassThroughOperation (a 3D operation in this example)
            coordOperation = the operation on the vertical component
            modifiedCoordinate = 2

Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190430/8fb8a09c/attachment.html>

From even.rouault at spatialys.com  Tue Apr 30 08:28:50 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 17:28:50 +0200
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
	transformation of type EPSG:9616
In-Reply-To: <82f6e4ce-b47e-e6b9-8ab2-c8d82e6461b5@geomatys.com>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <25522899.e4oYuXiPSZ@even-i700>
 <82f6e4ce-b47e-e6b9-8ab2-c8d82e6461b5@geomatys.com>
Message-ID: <7748778.WHeqiJ75cv@even-i700>

On mardi 30 avril 2019 16:40:55 CEST Martin Desruisseaux wrote:
> Le 30/04/2019 à 16:19, Even Rouault a écrit :
> > For example, if you would do a transformation from a CompoundCRS to
> > another CompoundCRS (or a Geographic3D CRS) with both horizontal and
> > vertical transformations, there is nothing in ISO:19111 to model the
> > composite of both.
> 
> Actually this is modeled with PassThroughOperation +
> ConcatenatedOperation. So a transformation between two CompoundCRS with
> a vertical component would be like below:
> 
>     ConcatenatedOperation (a 3D operation in this example)
>         PassThroughOperation (a 3D operation in this example)
>             coordOperation = the operation on the horizontal component
>             modifiedCoordinate = {0, 1}
>         PassThroughOperation (a 3D operation in this example)
>             coordOperation = the operation on the vertical component
>             modifiedCoordinate = 2

Ah, I had forgotten about that beast indeed !
Well, too late/no need to introduce it now. It has also the slight 
inconvenient of not having a WKT2 representation, so this concept remains 
mostly an implementation detail for non-super-ISO:19111-aware users.
When exporting to WKT2, the PROJBaseOperation is translated into a somewhat 
hacky COORDINATEOPERATION but which explains a bit what is done.

$ src/projinfo -s EPSG:7406 -t EPSG:5500

[...]

COORDINATEOPERATION["Transformation from NGVD29 height (ftUS) to NAVD88 height 
(ballpark vertical transformation) + NAD27 to WGS 84 (79) + Inverse of 
NAD83(NSRS2007) to WGS 84 (1)",
    SOURCECRS[
        COMPOUNDCRS["NAD27 + NGVD29 height (ftUS)",
            GEOGCRS["NAD27",
                DATUM["North American Datum 1927",
                    ELLIPSOID["Clarke 1866",6378206.4,294.978698213898,
                        LENGTHUNIT["metre",1]]],
                PRIMEM["Greenwich",0,
                    ANGLEUNIT["degree",0.0174532925199433]],
                CS[ellipsoidal,2],
                    AXIS["geodetic latitude (Lat)",north,
                        ORDER[1],
                        ANGLEUNIT["degree",0.0174532925199433]],
                    AXIS["geodetic longitude (Lon)",east,
                        ORDER[2],
                        ANGLEUNIT["degree",0.0174532925199433]]],
            VERTCRS["NGVD29 height (ftUS)",
                VDATUM["National Geodetic Vertical Datum 1929"],
                CS[vertical,1],
                    AXIS["gravity-related height (H)",up,
                        LENGTHUNIT["US survey foot",0.304800609601219]]],
            ID["EPSG",7406]]],
    TARGETCRS[
        COMPOUNDCRS["NAD83(NSRS2007) + NAVD88 height",
            GEOGCRS["NAD83(NSRS2007)",
                DATUM["NAD83 (National Spatial Reference System 2007)",
                    ELLIPSOID["GRS 1980",6378137,298.257222101,
                        LENGTHUNIT["metre",1]]],
                PRIMEM["Greenwich",0,
                    ANGLEUNIT["degree",0.0174532925199433]],
                CS[ellipsoidal,2],
                    AXIS["geodetic latitude (Lat)",north,
                        ORDER[1],
                        ANGLEUNIT["degree",0.0174532925199433]],
                    AXIS["geodetic longitude (Lon)",east,
                        ORDER[2],
                        ANGLEUNIT["degree",0.0174532925199433]]],
            VERTCRS["NAVD88 height",
                VDATUM["North American Vertical Datum 1988"],
                CS[vertical,1],
                    AXIS["gravity-related height (H)",up,
                        LENGTHUNIT["metre",1]]],
            ID["EPSG",5500]]],
    METHOD["PROJ-based operation method (approximate): +proj=pipeline +step 
+proj=axisswap +order=2,1 +step +proj=unitconvert +xy_in=deg +z_in=us-ft 
+xy_out=rad +z_out=m +step +proj=hgridshift +grids=conus +step 
+proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1"],
    USAGE[
        SCOPE["unknown"],
        AREA["USA - CONUS including EEZ"],
        BBOX[23.81,-129.17,49.38,-65.69]]]

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Didier.Richard at ign.fr  Tue Apr 30 10:09:14 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 17:09:14 +0000
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
 transformation of type EPSG:9616
In-Reply-To: <25522899.e4oYuXiPSZ@even-i700>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <2413957.AUb9HqQ0Gj@even-i700>
 <D4387E9F6EBB5244B21A09D84C0D41B0010CCB58C7@mailex1.ign.fr>,
 <25522899.e4oYuXiPSZ@even-i700>
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5979@mailex1.ign.fr>

1. - Shame on me, it is working !

2.- Tested on IGNF:NTFLAMB2E.NGF84 to IGNF:ETRS89LCC.EVRF2000
but the final type is PJ_TYPE_UNKNOWN, not PJ_TYPE_OTHER_COORDINATE_OPERATION :

    obj = proj_create_crs_to_crs(c, "IGNF:NTFLAMB2E.NGF84", "IGNF:ETRS89LCC.EVRF2000", NULL);
    if (obj != NULL) {
        fprintf(stderr,"%s is of type %d\n", proj_get_name(obj), proj_get_type(obj));
        proj_destroy(obj);
    }

outputs :

(null) is of type 0

$ projinfo -o PROJ -s IGNF:NTFLAMB2E.NGF84 -t IGNF:ETRS89LCC.EVRF2000
Candidate operations found: 3
-------------------------------------
Operation n°1:

unknown id, Inverse of LAMBERT II ETENDU + Transformation from NGF-LALLEMAND to EVRF2000 (UELN-95/98)(EUROPEAN VERTICAL REFERENCE FRAME) (ballpark vertical transformation) + NTF geographiques Paris (gr) vers NTF GEOGRAPHIQUES GREENWICH (DMS) + NOUVELLE TRIANGULATION DE LA FRANCE (NTF) vers WGS 84 + Inverse of ETRS 89 vers WGS 84 + ETRS89 LAMBERT CONFORMAL CONIC, unknown accuracy, FRANCE METROPOLITAINE, has ballpark transformation

PROJ string:
+proj=pipeline +step +inv +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step +proj=cart +ellps=clrk80ign +step +proj=helmert +x=-168 +y=-60 +z=320 +step +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80

-------------------------------------
Operation n°2:

unknown id, Inverse of LAMBERT II ETENDU + Transformation from NGF-LALLEMAND to EVRF2000 (UELN-95/98)(EUROPEAN VERTICAL REFERENCE FRAME) (ballpark vertical transformation) + NTF geographiques Paris (gr) vers NTF GEOGRAPHIQUES GREENWICH (DMS) + NOUVELLE TRIANGULATION DE LA FRANCE (NTF) vers WGS 84 + Inverse of ETRS 89 vers WGS 84 + ETRS89 LAMBERT CONFORMAL CONIC, unknown accuracy, FRANCE METROPOLITAINE, has ballpark transformation

PROJ string:
+proj=pipeline +step +inv +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step +proj=cart +ellps=clrk80ign +step +proj=helmert +x=-168 +y=-60 +z=320 +step +inv +proj=cart +ellps=WGS84 +step +proj=pop +v_3 +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80

-------------------------------------
Operation n°3:

unknown id, Inverse of LAMBERT II ETENDU + Transformation from NGF-LALLEMAND to EVRF2000 (UELN-95/98)(EUROPEAN VERTICAL REFERENCE FRAME) (ballpark vertical transformation) + Inverse of Transformation from ETRS89 geographiques (dms) to NTF geographiques Paris (gr) altered to use prime meridian of ETRS89 geographiques (dms) + Ballpark geographic offset from NTF geographiques Paris (gr) altered to use prime meridian of ETRS89 geographiques (dms) to ETRS89 geographiques (dms) + ETRS89 LAMBERT CONFORMAL CONIC, unknown accuracy, World, has ballpark transformation

PROJ string:
+proj=pipeline +step +inv +proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +ellps=clrk80ign +pm=paris +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80


--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


________________________________________
De : Even Rouault [even.rouault at spatialys.com]
Envoyé : mardi 30 avril 2019 16:19
À : Didier Richard
Cc : proj at lists.osgeo.org
Objet : Re: [PROJ] [PROJ 6.0.0] Different behaviors for creating a transformation of type EPSG:9616

On mardi 30 avril 2019 14:02:50 CEST Didier Richard wrote:
> 1.- Does not work either with
> "urn:ogc:def:coordinateOperation:IGNF::SG1250". I guess because of the
> authority ?

no just a typo. Missing T before SG1250

> 3.- Ok, I thought that operations located in other_transformation table were
> of type PJ_TYPE_OTHER_COORDINATE_OPERATION. Do you have an example of an
> operation for which the type is PJ_TYPE_OTHER_COORDINATE_OPERATION ? I
> found nothing in the test/ directory checking this.

For example, if you would do a transformation from a CompoundCRS to another
CompoundCRS (or a Geographic3D CRS) with both horizontal and vertical
transformations, there is nothing in ISO:19111 to model the composite of both.
So there's an internal PROJ C++ class, PROJBasedOperation, whose type would be
exposed as PJ_TYPE_OTHER_COORDINATE_OPERATION

--
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr 30 10:25:35 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 19:25:35 +0200
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
	transformation of type EPSG:9616
In-Reply-To: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5979@mailex1.ign.fr>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <25522899.e4oYuXiPSZ@even-i700>
 <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5979@mailex1.ign.fr>
Message-ID: <4328324.GWfkpPT9cq@even-i700>

> 2.- Tested on IGNF:NTFLAMB2E.NGF84 to IGNF:ETRS89LCC.EVRF2000
> but the final type is PJ_TYPE_UNKNOWN, not
> PJ_TYPE_OTHER_COORDINATE_OPERATION :

> 
>     obj = proj_create_crs_to_crs(c, "IGNF:NTFLAMB2E.NGF84",
> "IGNF:ETRS89LCC.EVRF2000", NULL); 

Ah, another subtelty here... 
If you look at the projinfo -s -t output, you'll see several candidate 
operations.
proj_create_crs_to_crs() in that case stores them inside a "wrapper" PJ 
object. So in that situation where you have the wrapper PJ returned, its type 
is PJ_TYPE_UNKNOWN.

(When proj_trans() is called, then one of the candidates is selected 
dependending on the input coordinates.)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Didier.Richard at ign.fr  Tue Apr 30 10:53:13 2019
From: Didier.Richard at ign.fr (Didier Richard)
Date: Tue, 30 Apr 2019 17:53:13 +0000
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
 transformation of type EPSG:9616
In-Reply-To: <4328324.GWfkpPT9cq@even-i700>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <25522899.e4oYuXiPSZ@even-i700>
 <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5979@mailex1.ign.fr>,
 <4328324.GWfkpPT9cq@even-i700>
Message-ID: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB59B3@mailex1.ign.fr>

Ok, in that case, two more questions :

1.- why not returning a PROJ_OBJ_LIST for proj_create_crs_to_crs to get a clearer API (and let the user choose amongst transformations) ?

2.- how to get the inner projections (proj_crs_get_coordoperation does not seem the right one) ?

--
RICHARD Didier - Chef du Centre de Compétences Technologies des Systèmes d'Information
http://fr.linkedin.com/pub/didier-richard/98/2a3/a8/ - https://www.osgeo.org/member/didier/
IGN/Direction des Sciences et Technologies de l'Information/ENSG Géomatique
6/8 avenue Blaise Pascal - BP Champs-sur-Marne - 77455 MARNE-LA-VALLÉE CEDEX 2
Tél : +33 (0) 1 43 98 83 23


________________________________________
De : Even Rouault [even.rouault at spatialys.com]
Envoyé : mardi 30 avril 2019 19:25
À : Didier Richard
Cc : proj at lists.osgeo.org
Objet : Re: [PROJ] [PROJ 6.0.0] Different behaviors for creating a transformation of type EPSG:9616

> 2.- Tested on IGNF:NTFLAMB2E.NGF84 to IGNF:ETRS89LCC.EVRF2000
> but the final type is PJ_TYPE_UNKNOWN, not
> PJ_TYPE_OTHER_COORDINATE_OPERATION :

>
>     obj = proj_create_crs_to_crs(c, "IGNF:NTFLAMB2E.NGF84",
> "IGNF:ETRS89LCC.EVRF2000", NULL);

Ah, another subtelty here...
If you look at the projinfo -s -t output, you'll see several candidate
operations.
proj_create_crs_to_crs() in that case stores them inside a "wrapper" PJ
object. So in that situation where you have the wrapper PJ returned, its type
is PJ_TYPE_UNKNOWN.

(When proj_trans() is called, then one of the candidates is selected
dependending on the input coordinates.)

--
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Apr 30 11:18:14 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 30 Apr 2019 20:18:14 +0200
Subject: [PROJ] [PROJ 6.0.0] Different behaviors for creating a
	transformation of type EPSG:9616
In-Reply-To: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB59B3@mailex1.ign.fr>
References: <D4387E9F6EBB5244B21A09D84C0D41B0010CCB5844@mailex1.ign.fr>
 <4328324.GWfkpPT9cq@even-i700>
 <D4387E9F6EBB5244B21A09D84C0D41B0010CCB59B3@mailex1.ign.fr>
Message-ID: <5644340.oYNe3j6aan@even-i700>

On mardi 30 avril 2019 17:53:13 CEST Didier Richard wrote:
> Ok, in that case, two more questions :
> 
> 1.- why not returning a PROJ_OBJ_LIST for proj_create_crs_to_crs to get a
> clearer API (and let the user choose amongst transformations) ?

To be honest, the new behaviour of having several candidate coordinate 
operations is a late addition. Initially, it picked up only one, but that was 
not ideal.
Another reason is that want proj_create_crs_to_crs() to remain the "easy" way 
of using the PROJ API, so returning a PJ* object directly usable by 
proj_trans() and friends, so it is not a bad thing that this complexity 
remains hidden from the user point of view.

> 
> 2.- how to get the inner projections (proj_crs_get_coordoperation does not
> seem the right one) ?

Basically proj_create_crs_to_crs() is a high level function over 
proj_create_operations(). So if you need fine grained control of which 
coordinate operation you want to use exactly, use proj_create_operations()

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

