From even.rouault at spatialys.com  Mon Aug  1 07:39:42 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 1 Aug 2022 16:39:42 +0200
Subject: [PROJ] Derived Vertical CRS
In-Reply-To: <f856d510-c9ed-4e8c-14a2-76edeb2413f9@spatialys.com>
References: <CADRrdKvtn3q7YXymWYesPkJ4KuB0PmTENoAosBvBgh9S6adu=A@mail.gmail.com>
 <f856d510-c9ed-4e8c-14a2-76edeb2413f9@spatialys.com>
Message-ID: <6b0edf97-4245-7edc-19c7-1ceb02a08725@spatialys.com>


> Regarding the WKT issue, I've raised this to the OGC CRS SWG list as 
> the grammar of WKT doesn't allow currently a unitless parameter, even 
> if the EPSG Vertical Offset and Slope method requires it. I'd suggest 
> using something like UNIT["none",1] instead of 
> ANGLEUNIT["arc-second",4.8481368111E-06], until that's cleared up
>
Got confirmation that requiring the unit was not intended and will be 
amended in the next revision of the WKT CRS specification.

I've corrected the WKT parser to allow unit-less PARAMETER for 
coordinate operations: https://github.com/OSGeo/PROJ/pull/3271

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From dalia.prizginiene at lmi.is  Tue Aug  2 04:31:40 2022
From: dalia.prizginiene at lmi.is (Dalia Prizginiene - LMI)
Date: Tue, 2 Aug 2022 11:31:40 +0000
Subject: [PROJ] vertical_to_vertical in vertoffset_grid_to_gtiff
Message-ID: <PA4PR10MB5708382594F06DBFE23266229F9D9@PA4PR10MB5708.EURPRD10.PROD.OUTLOOK.COM>

Hello,
We have a local online transformation tool and Proj is used for transformation.
I want to upgrade the Proj but I need to have GTG format for my grids.
I am trying to use vertoffset_grid_to_gtiff.py from grid_tools
I do not have EPSG code for VERTICAL_TO_VERTICAL transformation, I do not think that it is possible to get (deformation grid in horizontal is ISN93_ISN2016.gsb (GTG exist) and vertical ISN93_ISN2016.gtx )
I am using the line:
python vertoffset_grid_to_gtiff.py --type VERTICAL_TO_VERTICAL --area-of-use "Iceland" --copyright "National Land Survey of Iceland. Creative Commons Attribution 4.0 https://creativecommons.org/licenses/by/4.0/" ISN93_ISN2016.gtx ISN93_ISN2016.tif

but I am getting the SyntexError: invalid syntax (there is no indication which part is wrong)

Could you advice on this matter?

Best regards
Dalia
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220802/75b865ec/attachment.htm>

From Andre.Vautour at Teledyne.com  Tue Aug  2 05:45:24 2022
From: Andre.Vautour at Teledyne.com (=?utf-8?B?VmF1dG91ciwgQW5kcsOp?=)
Date: Tue, 2 Aug 2022 12:45:24 +0000
Subject: [PROJ] Derived Vertical CRS
In-Reply-To: <f856d510-c9ed-4e8c-14a2-76edeb2413f9@spatialys.com>
References: <CADRrdKvtn3q7YXymWYesPkJ4KuB0PmTENoAosBvBgh9S6adu=A@mail.gmail.com>
 <f856d510-c9ed-4e8c-14a2-76edeb2413f9@spatialys.com>
Message-ID: <YT3PR01MB4930E117787F3C8F09ED6477979D9@YT3PR01MB4930.CANPRD01.PROD.OUTLOOK.COM>

I would have replied to the original email, but I wasn?t on the mailing list when it came in.

Using a DerivedCRS with a vertical offset and slope transformation seems wrong to me. In ISO 19111 and EPSG, a conversion is an operation that stays in the same datum, and a transformation is an operation that changes the datum. Vertical offset and slope is clearly going from one vertical datum to a different datum. Are you saying that your Custom Vertical CRS is still using the EGM2008 geoid datum after a vertical offset and slope operation?

Examples of conversions that stay in the same vertical datum would be a Depth vertical CRS, that has a height-depth reversal conversion, or a Feet vertical datum that has a unit conversion to the metres CRS. In all those cases, the source (derived) and target (base) datums are the same:
NAVD88 Height (ftUS): https://epsg.org/crs/wkt/id/6360
NAVD88 Depth: https://epsg.org/crs/wkt/id/6357

Should this not be a BoundCRS that has custom as the source,  EGM2008 height as the target, and the vertical offset as the abridged transformation? Am I right to assume that your Custom Vertical CRS is not using the EGM2008 datum?
Andr?

From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Even Rouault
Sent: Saturday, July 30, 2022 14:36
To: Javier Jimenez Shaw <j1 at jimenezshaw.com>; proj <PROJ at lists.osgeo.org>
Subject: Re: [PROJ] Derived Vertical CRS

External Email

Javier,

I've addressed this in https://github.com/OSGeo/PROJ/pull/3270.

Regarding the WKT issue, I've raised this to the OGC CRS SWG list as the grammar of WKT doesn't allow currently a unitless parameter, even if the EPSG Vertical Offset and Slope method requires it. I'd suggest using something like UNIT["none",1] instead of ANGLEUNIT["arc-second",4.8481368111E-06], until that's cleared up

Even
Le 29/07/2022 ? 21:16, Javier Jimenez Shaw a ?crit :
Hi

Thanks to Even's PR #3200 "Implement Vertical Offset and slope transformation method", I am trying to use a Derived Vertical CRS using the conversion method "Vertical Offset and Slope" (that will be a perfect combination with "Affine parametric transformation" in the horizontal... I hope)

The WKT2 I have created is this

VERTCRS["Custom Vertical",
    BASEVERTCRS["EGM2008 height",
        VDATUM["EGM2008 geoid"]],
    DERIVINGCONVERSION["vertical offs. and slope",
        METHOD["Vertical Offset and Slope",
            ID["EPSG",1046]],
        PARAMETER["Ordinate 1 of evaluation point",46.9166666666669,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8617]],
        PARAMETER["Ordinate 2 of evaluation point",8.18333333333361,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8618]],
        PARAMETER["Vertical Offset",-0.245,
            LENGTHUNIT["metre",1],
            ID["EPSG",8603]],
        PARAMETER["Inclination in latitude",-0.21,
            ANGLEUNIT["arc-second",4.8481368111E-06],
            ID["EPSG",8730]],
        PARAMETER["Inclination in longitude",-0.032,
            ANGLEUNIT["arc-second",4.8481368111E-06],
            ID["EPSG",8731]],
        PARAMETER["EPSG code for Horizontal CRS",4326,
            ANGLEUNIT["arc-second",4.8481368111E-06],
            ID["EPSG",1037]]],
    CS[vertical,1],
        AXIS["gravity-related height (H)",up,
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["unknown"],
        AREA["World"],
        BBOX[-90,-180,90,180]]]

The first strange thing is that without the unit in the parameter "EPSG code for Horizontal CRS", projinfo "$(cat derived_vertical.wkt)" shows a warning:
Warning: Parsing error : syntax error, unexpected ID. Error occurred around:
            ID["EPSG",1037]]],

When I try to see how the conversion would be with the command
projinfo -s EPSG:3855 -t "$(cat derived_vertical.wkt)"
I get
PROJ string:
Error when exporting to PROJ string: Unsupported conversion method: Vertical Offset and Slope

Using it in a compound crs and using cs2cs does not get the proper transformation neither.

Am I creating the WKT2 string properly to create a derived vertical crs (to be used in a compound) with that conversion method?

Thanks

PS. I am using master from today
PS2.  projinfo -s EPSG:5728 -t EPSG:5730 shows a coordinate operation that uses "Vertical Offset and Slope", with a nice PROJ string

.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



_______________________________________________

PROJ mailing list

PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>

https://lists.osgeo.org/mailman/listinfo/proj

--

http://www.spatialys.com

My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220802/a5950dd4/attachment-0001.htm>

From even.rouault at spatialys.com  Tue Aug  2 05:57:15 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 2 Aug 2022 14:57:15 +0200
Subject: [PROJ] vertical_to_vertical in vertoffset_grid_to_gtiff
In-Reply-To: <PA4PR10MB5708382594F06DBFE23266229F9D9@PA4PR10MB5708.EURPRD10.PROD.OUTLOOK.COM>
References: <PA4PR10MB5708382594F06DBFE23266229F9D9@PA4PR10MB5708.EURPRD10.PROD.OUTLOOK.COM>
Message-ID: <9110e1a2-336a-010a-2951-84b4f34125b8@spatialys.com>


Le 02/08/2022 ? 13:31, Dalia Prizginiene - LMI a ?crit?:
>
> Hello,
>
> We have a local online transformation tool and Proj is used for 
> transformation.
>
> I want to upgrade the Proj but I need to have GTG format for my grids.
>
> I am trying to use vertoffset_grid_to_gtiff.py from grid_tools
>
> I do not have EPSG code for VERTICAL_TO_VERTICAL transformation, I do 
> not think that it is possible to get (deformation grid in horizontal 
> is ISN93_ISN2016.gsb (GTG exist) and vertical ISN93_ISN2016.gtx )
>
> I am using the line:
>
> python vertoffset_grid_to_gtiff.py --type VERTICAL_TO_VERTICAL 
> --area-of-use "Iceland" --copyright "National Land Survey of Iceland. 
> Creative Commons Attribution 4.0 
> https://creativecommons.org/licenses/by/4.0/" ISN93_ISN2016.gtx 
> ISN93_ISN2016.tif
>
> but I am getting the SyntexError: invalid syntax (there is no 
> indication which part is wrong)
>
I've tried to reproduce your command with another .gtx file and I don't 
get a SyntaxError but

vertoffset_grid_to_gtiff.py: error: the following arguments are 
required: --source-crs, --target-crs

which is appropriate.

(I assume you use python3, not python2)

> Could you advice on this matter?
>
> Best regards
>
> Dalia
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220802/eeed1809/attachment.htm>

From charles.karney at gmail.com  Tue Aug  2 11:13:26 2022
From: charles.karney at gmail.com (Charles Karney)
Date: Tue, 2 Aug 2022 14:13:26 -0400
Subject: [PROJ] Geodesics on an arbitrary ellipsoid of revolution
Message-ID: <fddbc8db-2787-73fd-5b2b-4ab937aadfe7@karney.com>

PROJ contains a C port of the geodesic routines in GeographicLib.  These
routines are valid for |f| < 1/50.

The C++ version of GeographicLib contains alternative versions of the
geodesic routines which work for just about any flattening, namely

   1/200 < b/a < 200

I just completed a paper describing these routines; it's available at

   http://arxiv.org/abs/2208.00492

I have no plans at this point to port these C++ routines into PROJ.

-- 
Charles Karney <charles at karney.com>
Princeton, NJ

From j1 at jimenezshaw.com  Wed Aug  3 10:52:30 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 3 Aug 2022 19:52:30 +0200
Subject: [PROJ] Units in a derived system
Message-ID: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>

Hi

I am trying to make a derived projected CRS... in feet.
The conversion method is a "PROJ-based operation method" with an affine
transformation (simplified here with just xoff of 20 feet).
https://proj.org/operations/transformations/affine.html

The derived system is something like this (my data is 3D, but in 2D is also
reproduced):

$ cat derived.wkt

DERIVEDPROJCRS["Custom Site Calibrated CRS",
    BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
        BASEGEOGCRS["NAD83(2011)",
            DATUM["NAD83 (National Spatial Reference System 2011)",
                ELLIPSOID["GRS 1980",6378137,298.257222101,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]]],
        CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
            METHOD["Transverse Mercator",
                ID["EPSG",9807]],
            PARAMETER["Latitude of natural origin",29.5,
                ANGLEUNIT["degree",0.0174532925199433],
                ID["EPSG",8801]],
            PARAMETER["Longitude of natural origin",-88.8333333333333,
                ANGLEUNIT["degree",0.0174532925199433],
                ID["EPSG",8802]],
            PARAMETER["Scale factor at natural origin",0.99995,
                SCALEUNIT["unity",1],
                ID["EPSG",8805]],
            PARAMETER["False easting",984250,
                LENGTHUNIT["US survey foot",0.304800609601219],
                ID["EPSG",8806]],
            PARAMETER["False northing",0,
                LENGTHUNIT["US survey foot",0.304800609601219],
                ID["EPSG",8807]]]],
    DERIVINGCONVERSION["Affine transformation as PROJ-based",
        METHOD["PROJ-based operation method: +proj=pipeline +step
+proj=affine +xoff=20"]],
    CS[Cartesian,2],
        AXIS["easting (X)",east,
            ORDER[1],
            LENGTHUNIT["US survey foot",0.304800609601219]],
        AXIS["northing (Y)",north,
            ORDER[2],
            LENGTHUNIT["US survey foot",0.304800609601219]],
    REMARK["EPSG:6507 with 20 feet offset"]]

But the output I get seems to be in meters (I deduced that running with
PROJ_DEBUG=3) It is kind of ignoring the CS.
$ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
1250642.38 -180875.29 0.00
$ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
381216.56 -55130.90 0.00

If I concatenate the pipeline with cct, I get the result I was expecting
(20 feet more in the x):
$ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct +proj=pipeline +step
+proj=affine +xoff=20
1250662.3800   -180875.2900        0.0000

Is that expected? Am I doing anything wrong?

Thanks.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220803/e089461d/attachment.htm>

From j1 at jimenezshaw.com  Wed Aug  3 12:48:56 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 3 Aug 2022 21:48:56 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
Message-ID: <CADRrdKu4CV_GDWpTQD24iJ_O0TfTv_RMGjUHF9M2aLBciP3Ppg@mail.gmail.com>

Continuing with the tests, I see that the axis ordering is also ignored.
If I just modify EPSG:6507 to be northing-easting, I see that the output is
swapped:

cat ne.wkt

PROJCRS["NAD83(2011) / Mississippi East (ftUS)",
    BASEGEOGCRS["NAD83(2011)",
        DATUM["NAD83 (National Spatial Reference System 2011)",
            ELLIPSOID["GRS 1980",6378137,298.257222101,
                LENGTHUNIT["metre",1]]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["degree",0.0174532925199433]],
        ID["EPSG",6318]],
    CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
        METHOD["Transverse Mercator",
            ID["EPSG",9807]],
        PARAMETER["Latitude of natural origin",29.5,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",-88.8333333333333,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",0.99995,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",984250,
            LENGTHUNIT["US survey foot",0.304800609601219],
            ID["EPSG",8806]],
        PARAMETER["False northing",0,
            LENGTHUNIT["US survey foot",0.304800609601219],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["northing (Y)",north,
            ORDER[1],
            LENGTHUNIT["US survey foot",0.304800609601219]],
        AXIS["easting (X)",east,
            ORDER[2],
            LENGTHUNIT["US survey foot",0.304800609601219]],
    USAGE[
        SCOPE["Engineering survey, topographic mapping."],
        AREA["United States (USA) - Mississippi - counties of Alcorn;
Attala; Benton; Calhoun; Chickasaw; Choctaw; Clarke; Clay; Covington;
Forrest; George; Greene; Hancock; Harrison; Itawamba; Jackson; Jasper;
Jones; Kemper; Lafayette; Lamar; Lauderdale; Leake; Lee; Lowndes; Marshall;
Monroe; Neshoba; Newton; Noxubee; Oktibbeha; Pearl River; Perry; Pontotoc;
Prentiss; Scott; Smith; Stone; Tippah; Tishomingo; Union; Wayne; Webster;
Winston."],
        BBOX[30.01,-89.97,35.01,-88.09]]]

$ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
1250642.38 -180875.29 0.00
$ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat ne.wkt)"
-180875.29 1250642.38 0.00

However, If I swap the axes of the derived crs wtk2 string, the values are
not swapped (not added here for brevity).

It looks like the whole info about the CS in the derived CRS (units and
order of the axis) is ignored.

.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Wed, 3 Aug 2022 at 19:52, Javier Jimenez Shaw <j1 at jimenezshaw.com> wrote:

> Hi
>
> I am trying to make a derived projected CRS... in feet.
> The conversion method is a "PROJ-based operation method" with an affine
> transformation (simplified here with just xoff of 20 feet).
> https://proj.org/operations/transformations/affine.html
>
> The derived system is something like this (my data is 3D, but in 2D is
> also reproduced):
>
> $ cat derived.wkt
>
> DERIVEDPROJCRS["Custom Site Calibrated CRS",
>     BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
>         BASEGEOGCRS["NAD83(2011)",
>             DATUM["NAD83 (National Spatial Reference System 2011)",
>                 ELLIPSOID["GRS 1980",6378137,298.257222101,
>                     LENGTHUNIT["metre",1]]],
>             PRIMEM["Greenwich",0,
>                 ANGLEUNIT["degree",0.0174532925199433]]],
>         CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
>             METHOD["Transverse Mercator",
>                 ID["EPSG",9807]],
>             PARAMETER["Latitude of natural origin",29.5,
>                 ANGLEUNIT["degree",0.0174532925199433],
>                 ID["EPSG",8801]],
>             PARAMETER["Longitude of natural origin",-88.8333333333333,
>                 ANGLEUNIT["degree",0.0174532925199433],
>                 ID["EPSG",8802]],
>             PARAMETER["Scale factor at natural origin",0.99995,
>                 SCALEUNIT["unity",1],
>                 ID["EPSG",8805]],
>             PARAMETER["False easting",984250,
>                 LENGTHUNIT["US survey foot",0.304800609601219],
>                 ID["EPSG",8806]],
>             PARAMETER["False northing",0,
>                 LENGTHUNIT["US survey foot",0.304800609601219],
>                 ID["EPSG",8807]]]],
>     DERIVINGCONVERSION["Affine transformation as PROJ-based",
>         METHOD["PROJ-based operation method: +proj=pipeline +step
> +proj=affine +xoff=20"]],
>     CS[Cartesian,2],
>         AXIS["easting (X)",east,
>             ORDER[1],
>             LENGTHUNIT["US survey foot",0.304800609601219]],
>         AXIS["northing (Y)",north,
>             ORDER[2],
>             LENGTHUNIT["US survey foot",0.304800609601219]],
>     REMARK["EPSG:6507 with 20 feet offset"]]
>
> But the output I get seems to be in meters (I deduced that running with
> PROJ_DEBUG=3) It is kind of ignoring the CS.
> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
> 1250642.38 -180875.29 0.00
> $ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
> 381216.56 -55130.90 0.00
>
> If I concatenate the pipeline with cct, I get the result I was expecting
> (20 feet more in the x):
> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct +proj=pipeline +step
> +proj=affine +xoff=20
> 1250662.3800   -180875.2900        0.0000
>
> Is that expected? Am I doing anything wrong?
>
> Thanks.
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220803/a6d0a9c2/attachment.htm>

From alex.bass at mailbox.org  Thu Aug  4 02:34:26 2022
From: alex.bass at mailbox.org (Alexander Nehrbass)
Date: Thu, 4 Aug 2022 11:34:26 +0200
Subject: [PROJ] Different transformation results between PROJ 9.0.0 and PROJ
 9.0.1
Message-ID: <b20dfe1a-7fa5-c0b5-b45d-f313fea7d498@mailbox.org>


Hi everyone,

I?m observing a significant difference between PROJ 9.0.0 and PROJ 
9.0.1/master[c482ea8] when doing some coordinate transformations:

$ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773 
EPSG:2225+5703 -d 8

6561666.44282083    2247576.19215388 0.21377754 (in PROJ 9.0.0)
6561670.17486934    2247574.26932194 0.70338464 (PROJ 9.0.1/master)

When running these commands with PROJ_DEBUG=3, I can see that different 
transformation pipelines are being used. PROJ 9.0.0 uses an 11 step 
pipeline whereas PROJ 9.0.1 uses a 7 step pipeline.

While trying to understand where this difference might come from, I 
started to play around with the ?bbox option. Doing the above 
transformation with a bounding box surprisingly does NOT lead to 
different transformation results between PROJ 9.0.0 and PROJ 9.0.1/master:

$ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773 
EPSG:2225+5703 -d 8 --bbox -122.1,40.9,-121.9,41.1

6561666.44282083    2247576.19215388 0.31567764

As you can see the horizontal coordinates are the same as when doing the 
transformation without the bounding box in PROJ 9.0.0, however there is 
a difference in the vertical coordinate. I also tried changing the size 
of the bounding box which didn?t seem to have an influence.

My questions at the moment are:
1. Where does the difference between PROJ 9.0.0 and 9.0.1 when doing the 
transformation without the bounding box come from?
2. How does using the bbox option affect the transformation results? In 
particular:
2a. Why are the differences between PROJ 9.0.0 and 9.0.1 gone when using 
a bounding box?
2b. Why does the vertical coordinate in PROJ 9.0.0 differ when doing the 
transformation with and without the bounding box?
3. Related bonus question: I was under the impression that passing the 
-bbox option to projinfo would result in projinfo returning exactly one 
transformation. However, this seems in correct. Was I under the wrong 
impression? E.g.:

$ ./projinfo -s EPSG:4326+5773 -t EPSG:2225+5703 --spatial-test 
intersects --bbox -122.1,40.9,-121.9,41.1


Any help with finding answers to these question is highly appreciated.

Thanks in advance and best regards,
Alex

From gdt at lexort.com  Thu Aug  4 03:24:54 2022
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 04 Aug 2022 06:24:54 -0400
Subject: [PROJ] Different transformation results between PROJ 9.0.0 and
 PROJ 9.0.1
In-Reply-To: <b20dfe1a-7fa5-c0b5-b45d-f313fea7d498@mailbox.org> (Alexander
 Nehrbass via PROJ's message of "Thu, 4 Aug 2022 11:34:26 +0200")
References: <b20dfe1a-7fa5-c0b5-b45d-f313fea7d498@mailbox.org>
Message-ID: <rmi4jysqpah.fsf@s1.lexort.com>


Alexander Nehrbass via PROJ <proj at lists.osgeo.org> writes:

> I?m observing a significant difference between PROJ 9.0.0 and PROJ
> 9.0.1/master[c482ea8] when doing some coordinate transformations:
>
> $ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773
> EPSG:2225+5703 -d 8
>
> 6561666.44282083    2247576.19215388 0.21377754 (in PROJ 9.0.0)
> 6561670.17486934    2247574.26932194 0.70338464 (PROJ 9.0.1/master)

I can't speak to why it's different, but you are on thin ice for
accuracy, or maybe you've fallen through already.

EPSG 4326 is the WGS84 ensemble, and 5773 is EGM96 height.

EPSG 2225 is a California State Plane that is in ftUS and "NAD83".
5703 is NAVD88 height.

So I would ask:

  When you want "WGS84" coordinates, are you ok with WGS84(TRANSIT)
  results?  Or do you want WGS84(G2159)?  What epoch do you want?

  Your input data is labeled NAD83.  Is it NAD83(1986)?  Or is it, as
  I'd guess, NAD83(2011) 2010.0?  (EPSG:6319 without the UTM/LCC transform.)

I would expect proj to give you a null transform from NAD83 to WGS84,
because they are both ensembles and NAD83(1986) is equal to
WGS84(TRANSIT).  But modern NAD83 and modern WGS84 are decidedly not
equal.

I'm in MA, and when I want to convert 6319 coordinates (e.g. obtained
from RTK with the MassDOT network) to "WGS84" for use in OpenStreetMap,
I transform to ITRF2014 as a proxy for recent WGS84.  Doing the analog
of what you are doing leads to an incorrect null transform and 1m of
horizontal error.

> 3. Related bonus question: I was under the impression that passing the
> -bbox option to projinfo would result in projinfo returning exactly
> one transformation. However, this seems in correct. Was I under the
> wrong impression? E.g.:

I don't think that's true.  I think bbox is going to enable selecting
transforms with non-global validity, such as grids that cover where you
are but not everywhere else.  But someone else will surely give you a
sharper answer on this point.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/cd5ac7ce/attachment.sig>

From even.rouault at spatialys.com  Thu Aug  4 08:14:25 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 4 Aug 2022 17:14:25 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
Message-ID: <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>

Javier,

I have had a bit of hesitation if the current behaviour was a feature or 
a bug, and opted for the later while investigating what happened: the 
axis unit and order of the source CRS (projected CRS) were well taken 
into account to "normalize" to metre, easting/northing order before 
applying the user provided PROJ string, but the axis unit and order of 
the target CRS (derived projected CRS) were ignored.

I've addressed this per https://github.com/OSGeo/PROJ/pull/3281 . It 
might potentially break people that have compensated for that, but I 
feel it is such a marginal use case that fixing it is the best thing.

Note however that you must adjust your PROJ string: xoff must be 
expressed in meters. So you should change xoff to 65.6166666666667. Or 
do like I did in the test I added, that is convert xy from m (as I said 
above, PROJ normalizes to (resp. from) metre, easting/northing? each 
step before (resp. after) applying the user PROJ string) to us-ft, then 
apply the affine with xoff=20, and finally convert back from us-ft to xy.

Even


Le 03/08/2022 ? 19:52, Javier Jimenez Shaw a ?crit?:
> Hi
>
> I am trying to make a derived projected CRS... in feet.
> The conversion method is a "PROJ-based operation method" with an 
> affine transformation (simplified here with just xoff of 20 feet).
> https://proj.org/operations/transformations/affine.html
>
> The derived system is something like this (my data is 3D, but in 2D is 
> also reproduced):
>
> $ cat derived.wkt
>
> DERIVEDPROJCRS["Custom Site Calibrated CRS",
> ? ? BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
> ? ? ? ? BASEGEOGCRS["NAD83(2011)",
> ? ? ? ? ? ? DATUM["NAD83 (National Spatial Reference System 2011)",
> ? ? ? ? ? ? ? ? ELLIPSOID["GRS 1980",6378137,298.257222101,
> ? ? ? ? ? ? ? ? ? ? LENGTHUNIT["metre",1]]],
> ? ? ? ? ? ? PRIMEM["Greenwich",0,
> ? ? ? ? ? ? ? ? ANGLEUNIT["degree",0.0174532925199433]]],
> ? ? ? ? CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
> ? ? ? ? ? ? METHOD["Transverse Mercator",
> ? ? ? ? ? ? ? ? ID["EPSG",9807]],
> ? ? ? ? ? ? PARAMETER["Latitude of natural origin",29.5,
> ? ? ? ? ? ? ? ? ANGLEUNIT["degree",0.0174532925199433],
> ? ? ? ? ? ? ? ? ID["EPSG",8801]],
> ? ? ? ? ? ? PARAMETER["Longitude of natural origin",-88.8333333333333,
> ? ? ? ? ? ? ? ? ANGLEUNIT["degree",0.0174532925199433],
> ? ? ? ? ? ? ? ? ID["EPSG",8802]],
> ? ? ? ? ? ? PARAMETER["Scale factor at natural origin",0.99995,
> ? ? ? ? ? ? ? ? SCALEUNIT["unity",1],
> ? ? ? ? ? ? ? ? ID["EPSG",8805]],
> ? ? ? ? ? ? PARAMETER["False easting",984250,
> ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
> ? ? ? ? ? ? ? ? ID["EPSG",8806]],
> ? ? ? ? ? ? PARAMETER["False northing",0,
> ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
> ? ? ? ? ? ? ? ? ID["EPSG",8807]]]],
> ? ? DERIVINGCONVERSION["Affine transformation as PROJ-based",
> ? ? ? ? METHOD["PROJ-based operation method: +proj=pipeline +step 
> +proj=affine +xoff=20"]],
> ? ? CS[Cartesian,2],
> ? ? ? ? AXIS["easting (X)",east,
> ? ? ? ? ? ? ORDER[1],
> ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219]],
> ? ? ? ? AXIS["northing (Y)",north,
> ? ? ? ? ? ? ORDER[2],
> ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219]],
> ? ? REMARK["EPSG:6507 with 20 feet offset"]]
>
> But the output I get seems to be in meters (I deduced that running 
> with PROJ_DEBUG=3) It is kind of ignoring the CS.
> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
> 1250642.38 -180875.29 0.00
> $ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
> 381216.56 -55130.90 0.00
>
> If I concatenate the pipeline with cct, I get the result I was 
> expecting (20 feet more in the x):
> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct +proj=pipeline +step 
> +proj=affine +xoff=20
> 1250662.3800 ? -180875.2900 ? ? ? ?0.0000
>
> Is that expected? Am I doing anything wrong?
>
> Thanks.
> .___ ._ ..._ .. . ._. .___ .. __ . _. . __..? ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/c308e364/attachment-0001.htm>

From luis.de.sousa at protonmail.ch  Thu Aug  4 08:13:40 2022
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Thu, 04 Aug 2022 15:13:40 +0000
Subject: [PROJ] Coordinate transformations between different WGS84 reference
 frames
Message-ID: <Y5EM-XDVQvQD1PDVnIcQb_QwVrf1Uv2hS50gwHOhs72b-aLe06rgUg2WeHILUEV4xOPOSd7nAhH8XdF70gv-81ImrYLpNSHq-QS8yNeRn_I=@protonmail.ch>

Dear all,

This message reports to Proj 8.2.1. I am trying to reproduce an exercise I conducted some years ago with Proj 6 (maybe 7) transforming coordinates between different realisations of the WGS84 ensemble. I am using this formulation:

$ cs2cs EPSG:9053 EPSG:9057
20 10
20dN 10dE 0.000
My recollection was cs2cs producing visible differences in the order metres. With the current version the output is unchanged transforming between these geodesic CRS. Do I need to use an additional parameter? Or am I missing something else?

Thank you.

--
Lu?s
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/a5b1f36a/attachment.htm>

From gdt at lexort.com  Thu Aug  4 08:35:01 2022
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 04 Aug 2022 11:35:01 -0400
Subject: [PROJ] Coordinate transformations between different WGS84
 reference frames
In-Reply-To: <Y5EM-XDVQvQD1PDVnIcQb_QwVrf1Uv2hS50gwHOhs72b-aLe06rgUg2WeHILUEV4xOPOSd7nAhH8XdF70gv-81ImrYLpNSHq-QS8yNeRn_I=@protonmail.ch>
 (=?utf-8?B?Ikx1w63CrXM=?= Moreira de Sousa via PROJ"'s message of "Thu, 04
 Aug 2022 15:13:40 +0000")
References: <Y5EM-XDVQvQD1PDVnIcQb_QwVrf1Uv2hS50gwHOhs72b-aLe06rgUg2WeHILUEV4xOPOSd7nAhH8XdF70gv-81ImrYLpNSHq-QS8yNeRn_I=@protonmail.ch>
Message-ID: <rmifsicnhsq.fsf@s1.lexort.com>


Lu??s Moreira de Sousa via PROJ <proj at lists.osgeo.org> writes:

> This message reports to Proj 8.2.1. I am trying to reproduce an
> exercise I conducted some years ago with Proj 6 (maybe 7) transforming
> coordinates between different realisations of the WGS84 ensemble. I am
> using this formulation:
>
> $ cs2cs EPSG:9053 EPSG:9057
> 20 10
> 20dN 10dE 0.000
> My recollection was cs2cs producing visible differences in the order
> metres. With the current version the output is unchanged transforming
> between these geodesic CRS. Do I need to use an additional parameter?
> Or am I missing something else?

G730 to G1762 should be far less than  a meter; the only really big
shift was TRANSIT to G730.  I'm going out on a limb and
will say it should be maybe 20cm.  See

  https://ui.adsabs.harvard.edu/abs/2018AGUFM.G33B0687K/abstract
  https://ascelibrary.org/doi/10.1061/%28ASCE%29SU.1943-5428.0000389
  https://www.researchgate.net/publication/360301499_Transforming_between_WGS84_Realizations

for a rigorous treatment.  [Insert standard rant about works by US
Government employees not being public domain]

You are only missing that what's in the literature and what's in the
EPSG database are not the same thing.

Can you rerun your old code, and provide a script that does all this, so
others can repeat the results?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/7c8ff25b/attachment.sig>

From even.rouault at spatialys.com  Thu Aug  4 08:39:44 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 4 Aug 2022 17:39:44 +0200
Subject: [PROJ] Coordinate transformations between different WGS84
 reference frames
In-Reply-To: <Y5EM-XDVQvQD1PDVnIcQb_QwVrf1Uv2hS50gwHOhs72b-aLe06rgUg2WeHILUEV4xOPOSd7nAhH8XdF70gv-81ImrYLpNSHq-QS8yNeRn_I=@protonmail.ch>
References: <Y5EM-XDVQvQD1PDVnIcQb_QwVrf1Uv2hS50gwHOhs72b-aLe06rgUg2WeHILUEV4xOPOSd7nAhH8XdF70gv-81ImrYLpNSHq-QS8yNeRn_I=@protonmail.ch>
Message-ID: <6963174c-1db2-5984-dc23-a3ba4ea696d4@spatialys.com>

Lu?s,

so you're transforming from WGS 84 (G730) to WGS 84 (G1762). I highly 
doubt that any PROJ version produced anything than a null transformation 
for that, given there's no known (in EPSG database) direct 
transformation between those 2 realizations.

That said, digging a bit, in EPSG, there's :

- a null transformation between WGS 84 (G730) and ITRF92 . Accuracy 0.2m

- a non-null time-dependent Helmert transformation between ITRF92 and 
ITRF2008. Accuracy 0.01 m

- a null transformation between ITRF2008 and WGS 84 (G1762). Accuracy 0.01m

So if you do:

$ echo 20 10 0 2022.6 | cs2cs -d 8? "WGS 84 (G730)" ITRF92 | cs2cs -d 8 
ITRF92 ITRF2008 | cs2cs -d 8 ITRF2008? "WGS 84 (G1762)"

20.00000101??? 9.99999995 -0.00107558 2022.6

(in practice you can keep omit the first and last cs2cs invokation)

As raised in many threads, PROJ could in theory be enhanced to infer 
that itself, but it would be computationally and programmatically 
complex to do so.

Even

Le 04/08/2022 ? 17:13, Lu? s Moreira de Sousa via PROJ a ?crit?:
> Dear all,
>
> This message reports to Proj 8.2.1. I am trying to reproduce an 
> exercise I conducted some years ago with Proj 6 (maybe 7) transforming 
> coordinates between different realisations of the WGS84 ensemble. I am 
> using this formulation:
>
> $ cs2cs EPSG:9053 EPSG:9057
> 20 10
> 20dN 10dE 0.000
>
> My recollection was cs2cs producing visible differences in the order 
> metres. With the current version the output is unchanged transforming 
> between these geodesic CRS. Do I need to use an additional parameter? 
> Or am I missing something else?
>
> Thank you.
>
> -- 
> Lu?s
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/7557dc32/attachment.htm>

From j1 at jimenezshaw.com  Thu Aug  4 09:09:48 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 4 Aug 2022 18:09:48 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
 <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>
Message-ID: <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>

Thank you Even!

To confirm that I understood your changes and how to use it.
a) the PROJ-based operation method must work in meters and easting-northing
(converting from-meters at the beginning and to-meters at the end if I want
to keep my values unchanged)
b) In this case transverse mercator returns meters (the input unit for the
operation method). Is that the case for every projection?
c) your changes add a unit conversion and a swap axis if needed at the end.
That will produce a sensible output even with a no-op toperation (like
xoff=0) But as said in a), it is not affecting the units and order of the
operation method.

Does this apply to other derived operations, like "Affine parametric
transformation"
https://epsg.org/coord-operation-method_9624/Affine-parametric-transformation.html
? I guess it may have a similar problem.
I do not have clear if the parameters of "Affine parametric transformation"
must be in the meters, in the same unit as the system, or it is
transforming it depending on the value in the WKT2.
I will use your branch and try an example.

Cheers,
Javier
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Thu, 4 Aug 2022 at 17:14, Even Rouault <even.rouault at spatialys.com>
wrote:

> Javier,
>
> I have had a bit of hesitation if the current behaviour was a feature or a
> bug, and opted for the later while investigating what happened: the axis
> unit and order of the source CRS (projected CRS) were well taken into
> account to "normalize" to metre, easting/northing order before applying the
> user provided PROJ string, but the axis unit and order of the target CRS
> (derived projected CRS) were ignored.
>
> I've addressed this per https://github.com/OSGeo/PROJ/pull/3281 . It
> might potentially break people that have compensated for that, but I feel
> it is such a marginal use case that fixing it is the best thing.
>
> Note however that you must adjust your PROJ string: xoff must be expressed
> in meters. So you should change xoff to 65.6166666666667. Or do like I did
> in the test I added, that is convert xy from m (as I said above, PROJ
> normalizes to (resp. from) metre, easting/northing  each step before (resp.
> after) applying the user PROJ string) to us-ft, then apply the affine with
> xoff=20, and finally convert back from us-ft to xy.
>
> Even
>
>
> Le 03/08/2022 ? 19:52, Javier Jimenez Shaw a ?crit :
>
> Hi
>
> I am trying to make a derived projected CRS... in feet.
> The conversion method is a "PROJ-based operation method" with an affine
> transformation (simplified here with just xoff of 20 feet).
> https://proj.org/operations/transformations/affine.html
>
> The derived system is something like this (my data is 3D, but in 2D is
> also reproduced):
>
> $ cat derived.wkt
>
> DERIVEDPROJCRS["Custom Site Calibrated CRS",
>     BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
>         BASEGEOGCRS["NAD83(2011)",
>             DATUM["NAD83 (National Spatial Reference System 2011)",
>                 ELLIPSOID["GRS 1980",6378137,298.257222101,
>                     LENGTHUNIT["metre",1]]],
>             PRIMEM["Greenwich",0,
>                 ANGLEUNIT["degree",0.0174532925199433]]],
>         CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
>             METHOD["Transverse Mercator",
>                 ID["EPSG",9807]],
>             PARAMETER["Latitude of natural origin",29.5,
>                 ANGLEUNIT["degree",0.0174532925199433],
>                 ID["EPSG",8801]],
>             PARAMETER["Longitude of natural origin",-88.8333333333333,
>                 ANGLEUNIT["degree",0.0174532925199433],
>                 ID["EPSG",8802]],
>             PARAMETER["Scale factor at natural origin",0.99995,
>                 SCALEUNIT["unity",1],
>                 ID["EPSG",8805]],
>             PARAMETER["False easting",984250,
>                 LENGTHUNIT["US survey foot",0.304800609601219],
>                 ID["EPSG",8806]],
>             PARAMETER["False northing",0,
>                 LENGTHUNIT["US survey foot",0.304800609601219],
>                 ID["EPSG",8807]]]],
>     DERIVINGCONVERSION["Affine transformation as PROJ-based",
>         METHOD["PROJ-based operation method: +proj=pipeline +step
> +proj=affine +xoff=20"]],
>     CS[Cartesian,2],
>         AXIS["easting (X)",east,
>             ORDER[1],
>             LENGTHUNIT["US survey foot",0.304800609601219]],
>         AXIS["northing (Y)",north,
>             ORDER[2],
>             LENGTHUNIT["US survey foot",0.304800609601219]],
>     REMARK["EPSG:6507 with 20 feet offset"]]
>
> But the output I get seems to be in meters (I deduced that running with
> PROJ_DEBUG=3) It is kind of ignoring the CS.
> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
> 1250642.38 -180875.29 0.00
> $ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
> 381216.56 -55130.90 0.00
>
> If I concatenate the pipeline with cct, I get the result I was expecting
> (20 feet more in the x):
> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct +proj=pipeline +step
> +proj=affine +xoff=20
> 1250662.3800   -180875.2900        0.0000
>
> Is that expected? Am I doing anything wrong?
>
> Thanks.
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
> _______________________________________________
> PROJ mailing listPROJ at lists.osgeo.orghttps://lists.osgeo.org/mailman/listinfo/proj
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/278a5f72/attachment-0001.htm>

From even.rouault at spatialys.com  Thu Aug  4 09:29:55 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 4 Aug 2022 18:29:55 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
 <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>
 <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>
Message-ID: <68a45287-7380-b09a-4f5b-3e6ef2ed53e5@spatialys.com>


Le 04/08/2022 ? 18:09, Javier Jimenez Shaw a ?crit?:
> Thank you Even!
>
> To confirm that I understood your changes and how to use it.
> a) the PROJ-based operation method must work in meters and 
> easting-northing (converting from-meters at the beginning and 
> to-meters at the end if I want to keep my values unchanged)
yes
> b) In this case transverse mercator returns meters (the input unit for 
> the operation method). Is that the case for every projection?
yes
> c) your changes add a unit conversion and a swap axis if needed at the 
> end. That will produce a sensible output even with a no-op toperation 
> (like xoff=0) But as said in a), it is not affecting the units and 
> order of the operation method.
yes
>
> Does this apply to other derived operations, like "Affine parametric 
> transformation" 
> https://epsg.org/coord-operation-method_9624/Affine-parametric-transformation.html 
> ? I guess it may have a similar problem.
yes
> I do not have clear if the parameters of "Affine parametric 
> transformation" must be in the meters, in the same unit as the system, 
> or it is transforming it depending on the value in the WKT2.

It depends... When creating PROJ pipelines at hand, you can trick PROJ 
to do "non-standard" things, and if you know that your input/output is 
us-ft, using a xoff= in us-ft will work given that it is a simple 
addition, and thus works as soon as you use consistent units for the 
step parameter and the input coordinates. But in general, you should use 
the units advertized in the documentation of the PROJ operation method. 
In particular, when embeding a PROJ string into a DERIVINGCONVERSION


> I will use your branch and try an example.
>
> Cheers,
> Javier
> .___ ._ ..._ .. . ._. .___ .. __ . _. . __..? ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
>
> On Thu, 4 Aug 2022 at 17:14, Even Rouault <even.rouault at spatialys.com> 
> wrote:
>
>     Javier,
>
>     I have had a bit of hesitation if the current behaviour was a
>     feature or a bug, and opted for the later while investigating what
>     happened: the axis unit and order of the source CRS (projected
>     CRS) were well taken into account to "normalize" to metre,
>     easting/northing order before applying the user provided PROJ
>     string, but the axis unit and order of the target CRS (derived
>     projected CRS) were ignored.
>
>     I've addressed this per https://github.com/OSGeo/PROJ/pull/3281 .
>     It might potentially break people that have compensated for that,
>     but I feel it is such a marginal use case that fixing it is the
>     best thing.
>
>     Note however that you must adjust your PROJ string: xoff must be
>     expressed in meters. So you should change xoff to
>     65.6166666666667. Or do like I did in the test I added, that is
>     convert xy from m (as I said above, PROJ normalizes to (resp.
>     from) metre, easting/northing? each step before (resp. after)
>     applying the user PROJ string) to us-ft, then apply the affine
>     with xoff=20, and finally convert back from us-ft to xy.
>
>     Even
>
>
>     Le 03/08/2022 ? 19:52, Javier Jimenez Shaw a ?crit?:
>>     Hi
>>
>>     I am trying to make a derived projected CRS... in feet.
>>     The conversion method is a "PROJ-based operation method" with an
>>     affine transformation (simplified here with just xoff of 20 feet).
>>     https://proj.org/operations/transformations/affine.html
>>
>>     The derived system is something like this (my data is 3D, but in
>>     2D is also reproduced):
>>
>>     $ cat derived.wkt
>>
>>     DERIVEDPROJCRS["Custom Site Calibrated CRS",
>>     ? ? BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
>>     ? ? ? ? BASEGEOGCRS["NAD83(2011)",
>>     ? ? ? ? ? ? DATUM["NAD83 (National Spatial Reference System 2011)",
>>     ? ? ? ? ? ? ? ? ELLIPSOID["GRS 1980",6378137,298.257222101,
>>     ? ? ? ? ? ? ? ? ? ? LENGTHUNIT["metre",1]]],
>>     ? ? ? ? ? ? PRIMEM["Greenwich",0,
>>     ANGLEUNIT["degree",0.0174532925199433]]],
>>     ? ? ? ? CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
>>     ? ? ? ? ? ? METHOD["Transverse Mercator",
>>     ? ? ? ? ? ? ? ? ID["EPSG",9807]],
>>     ? ? ? ? ? ? PARAMETER["Latitude of natural origin",29.5,
>>     ANGLEUNIT["degree",0.0174532925199433],
>>     ? ? ? ? ? ? ? ? ID["EPSG",8801]],
>>     ? ? ? ? ? ? PARAMETER["Longitude of natural
>>     origin",-88.8333333333333,
>>     ANGLEUNIT["degree",0.0174532925199433],
>>     ? ? ? ? ? ? ? ? ID["EPSG",8802]],
>>     ? ? ? ? ? ? PARAMETER["Scale factor at natural origin",0.99995,
>>     ? ? ? ? ? ? ? ? SCALEUNIT["unity",1],
>>     ? ? ? ? ? ? ? ? ID["EPSG",8805]],
>>     ? ? ? ? ? ? PARAMETER["False easting",984250,
>>     ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
>>     ? ? ? ? ? ? ? ? ID["EPSG",8806]],
>>     ? ? ? ? ? ? PARAMETER["False northing",0,
>>     ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
>>     ? ? ? ? ? ? ? ? ID["EPSG",8807]]]],
>>     ? ? DERIVINGCONVERSION["Affine transformation as PROJ-based",
>>     ? ? ? ? METHOD["PROJ-based operation method: +proj=pipeline +step
>>     +proj=affine +xoff=20"]],
>>     ? ? CS[Cartesian,2],
>>     ? ? ? ? AXIS["easting (X)",east,
>>     ? ? ? ? ? ? ORDER[1],
>>     ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219]],
>>     ? ? ? ? AXIS["northing (Y)",north,
>>     ? ? ? ? ? ? ORDER[2],
>>     ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219]],
>>     ? ? REMARK["EPSG:6507 with 20 feet offset"]]
>>
>>     But the output I get seems to be in meters (I deduced that
>>     running with PROJ_DEBUG=3) It is kind of ignoring the CS.
>>     $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
>>     1250642.38 -180875.29 0.00
>>     $ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
>>     381216.56 -55130.90 0.00
>>
>>     If I concatenate the pipeline with cct, I get the result I was
>>     expecting (20 feet more in the x):
>>     $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct +proj=pipeline
>>     +step +proj=affine +xoff=20
>>     1250662.3800 ? -180875.2900 ? ? ? ?0.0000
>>
>>     Is that expected? Am I doing anything wrong?
>>
>>     Thanks.
>>     .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
>>     Entre dos pensamientos racionales
>>     hay infinitos pensamientos irracionales.
>>
>>
>>     _______________________________________________
>>     PROJ mailing list
>>     PROJ at lists.osgeo.org
>>     https://lists.osgeo.org/mailman/listinfo/proj
>
>     -- 
>     http://www.spatialys.com
>     My software is free, but my time generally not.
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/819597ff/attachment.htm>

From j1 at jimenezshaw.com  Thu Aug  4 09:37:45 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 4 Aug 2022 18:37:45 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
 <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>
 <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>
Message-ID: <CADRrdKsSRUiSvu=ttkXT0D73i=K0p_TtZ-DbXCjN-+nSdmqVLg@mail.gmail.com>

Hi Even. I have been testing your branch (I hope correctly) with the method
"Affine parametric transformation". Whit this derived CRS (very similar to
the previous example)

DERIVEDPROJCRS["derived from EPSG:6507",
    BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
        BASEGEOGCRS["NAD83(2011)",
            DATUM["NAD83 (National Spatial Reference System 2011)",
                ELLIPSOID["GRS 1980",6378137,298.257222101,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]]],
        CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
            METHOD["Transverse Mercator",
                ID["EPSG",9807]],
            PARAMETER["Latitude of natural origin",29.5,
                ANGLEUNIT["degree",0.0174532925199433],
                ID["EPSG",8801]],
            PARAMETER["Longitude of natural origin",-88.8333333333333,
                ANGLEUNIT["degree",0.0174532925199433],
                ID["EPSG",8802]],
            PARAMETER["Scale factor at natural origin",0.99995,
                SCALEUNIT["unity",1],
                ID["EPSG",8805]],
            PARAMETER["False easting",984250,
                LENGTHUNIT["US survey foot",0.304800609601219],
                ID["EPSG",8806]],
            PARAMETER["False northing",0,
                LENGTHUNIT["US survey foot",0.304800609601219],
                ID["EPSG",8807]]]],
    DERIVINGCONVERSION["Affine",
        METHOD["Affine parametric transformation",
            ID["EPSG",9624]],
        PARAMETER["A0",42,
            LENGTHUNIT["US survey foot",0.304800609601219],
            ID["EPSG",8623]],
        PARAMETER["A1",1,
            SCALEUNIT["coefficient",1],
            ID["EPSG",8624]],
        PARAMETER["A2",0,
            SCALEUNIT["coefficient",1],
            ID["EPSG",8625]],
        PARAMETER["B0",999,
            LENGTHUNIT["US survey foot",0.304800609601219],
            ID["EPSG",8639]],
        PARAMETER["B1",0,
            SCALEUNIT["coefficient",1],
            ID["EPSG",8640]],
        PARAMETER["B2",1,
            SCALEUNIT["coefficient",1],
            ID["EPSG",8641]]],
    CS[Cartesian,2],
        AXIS["(Y)",north,
            ORDER[1],
            LENGTHUNIT["US survey foot",0.304800609601219,
                ID["EPSG",9003]]],
        AXIS["(X)",east,
            ORDER[2],
            LENGTHUNIT["US survey foot",0.304800609601219,
                ID["EPSG",9003]]]]

and I get these transformations:

$ projinfo -s "EPSG:6507" -t "$(cat derived.wkt)" -o proj -q
+proj=pipeline
  +step +proj=unitconvert +xy_in=us-ft +xy_out=m
  +step +proj=affine +xoff=42 +s11=1 +s12=0 +yoff=999 +s21=0 +s22=1

$ projinfo -s "EPSG:6318" -t "$(cat derived.wkt)" -o proj -q
+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +proj=tmerc +lat_0=29.5 +lon_0=-88.8333333333333 +k=0.99995
+x_0=300000
        +y_0=0 +ellps=GRS80
  +step +proj=affine +xoff=42 +s11=1 +s12=0 +yoff=999 +s21=0 +s22=1

The first case is just applying the derived conversion because the input is
"the same" as the base (well, I swapped the axes). If I understood
correctly "+xy_out=m" is converting to meters, so the affine operation is
done in meters easting-northing, regardless the unit I wrote in the
parameters. But nothing is done later (like correcting the out units an
order as in your PR)

On the second command, where the input is geographic coordinates, the input
for the affine is also meters, but no conversion at the end.

Am I right?

Thanks.

PS what if I make a compound of a derived projected and vertical? Is that a
problem?
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Thu, 4 Aug 2022 at 18:09, Javier Jimenez Shaw <j1 at jimenezshaw.com> wrote:

> Thank you Even!
>
> To confirm that I understood your changes and how to use it.
> a) the PROJ-based operation method must work in meters and
> easting-northing (converting from-meters at the beginning and to-meters at
> the end if I want to keep my values unchanged)
> b) In this case transverse mercator returns meters (the input unit for the
> operation method). Is that the case for every projection?
> c) your changes add a unit conversion and a swap axis if needed at the
> end. That will produce a sensible output even with a no-op toperation (like
> xoff=0) But as said in a), it is not affecting the units and order of the
> operation method.
>
> Does this apply to other derived operations, like "Affine parametric
> transformation"
> https://epsg.org/coord-operation-method_9624/Affine-parametric-transformation.html
> ? I guess it may have a similar problem.
> I do not have clear if the parameters of "Affine parametric
> transformation" must be in the meters, in the same unit as the system, or
> it is transforming it depending on the value in the WKT2.
> I will use your branch and try an example.
>
> Cheers,
> Javier
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
>
> On Thu, 4 Aug 2022 at 17:14, Even Rouault <even.rouault at spatialys.com>
> wrote:
>
>> Javier,
>>
>> I have had a bit of hesitation if the current behaviour was a feature or
>> a bug, and opted for the later while investigating what happened: the axis
>> unit and order of the source CRS (projected CRS) were well taken into
>> account to "normalize" to metre, easting/northing order before applying the
>> user provided PROJ string, but the axis unit and order of the target CRS
>> (derived projected CRS) were ignored.
>>
>> I've addressed this per https://github.com/OSGeo/PROJ/pull/3281 . It
>> might potentially break people that have compensated for that, but I feel
>> it is such a marginal use case that fixing it is the best thing.
>>
>> Note however that you must adjust your PROJ string: xoff must be
>> expressed in meters. So you should change xoff to 65.6166666666667. Or do
>> like I did in the test I added, that is convert xy from m (as I said above,
>> PROJ normalizes to (resp. from) metre, easting/northing  each step before
>> (resp. after) applying the user PROJ string) to us-ft, then apply the
>> affine with xoff=20, and finally convert back from us-ft to xy.
>>
>> Even
>>
>>
>> Le 03/08/2022 ? 19:52, Javier Jimenez Shaw a ?crit :
>>
>> Hi
>>
>> I am trying to make a derived projected CRS... in feet.
>> The conversion method is a "PROJ-based operation method" with an affine
>> transformation (simplified here with just xoff of 20 feet).
>> https://proj.org/operations/transformations/affine.html
>>
>> The derived system is something like this (my data is 3D, but in 2D is
>> also reproduced):
>>
>> $ cat derived.wkt
>>
>> DERIVEDPROJCRS["Custom Site Calibrated CRS",
>>     BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
>>         BASEGEOGCRS["NAD83(2011)",
>>             DATUM["NAD83 (National Spatial Reference System 2011)",
>>                 ELLIPSOID["GRS 1980",6378137,298.257222101,
>>                     LENGTHUNIT["metre",1]]],
>>             PRIMEM["Greenwich",0,
>>                 ANGLEUNIT["degree",0.0174532925199433]]],
>>         CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
>>             METHOD["Transverse Mercator",
>>                 ID["EPSG",9807]],
>>             PARAMETER["Latitude of natural origin",29.5,
>>                 ANGLEUNIT["degree",0.0174532925199433],
>>                 ID["EPSG",8801]],
>>             PARAMETER["Longitude of natural origin",-88.8333333333333,
>>                 ANGLEUNIT["degree",0.0174532925199433],
>>                 ID["EPSG",8802]],
>>             PARAMETER["Scale factor at natural origin",0.99995,
>>                 SCALEUNIT["unity",1],
>>                 ID["EPSG",8805]],
>>             PARAMETER["False easting",984250,
>>                 LENGTHUNIT["US survey foot",0.304800609601219],
>>                 ID["EPSG",8806]],
>>             PARAMETER["False northing",0,
>>                 LENGTHUNIT["US survey foot",0.304800609601219],
>>                 ID["EPSG",8807]]]],
>>     DERIVINGCONVERSION["Affine transformation as PROJ-based",
>>         METHOD["PROJ-based operation method: +proj=pipeline +step
>> +proj=affine +xoff=20"]],
>>     CS[Cartesian,2],
>>         AXIS["easting (X)",east,
>>             ORDER[1],
>>             LENGTHUNIT["US survey foot",0.304800609601219]],
>>         AXIS["northing (Y)",north,
>>             ORDER[2],
>>             LENGTHUNIT["US survey foot",0.304800609601219]],
>>     REMARK["EPSG:6507 with 20 feet offset"]]
>>
>> But the output I get seems to be in meters (I deduced that running with
>> PROJ_DEBUG=3) It is kind of ignoring the CS.
>> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
>> 1250642.38 -180875.29 0.00
>> $ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
>> 381216.56 -55130.90 0.00
>>
>> If I concatenate the pipeline with cct, I get the result I was expecting
>> (20 feet more in the x):
>> $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct +proj=pipeline +step
>> +proj=affine +xoff=20
>> 1250662.3800   -180875.2900        0.0000
>>
>> Is that expected? Am I doing anything wrong?
>>
>> Thanks.
>> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
>> Entre dos pensamientos racionales
>> hay infinitos pensamientos irracionales.
>>
>>
>> _______________________________________________
>> PROJ mailing listPROJ at lists.osgeo.orghttps://lists.osgeo.org/mailman/listinfo/proj
>>
>> -- http://www.spatialys.com
>> My software is free, but my time generally not.
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/61967256/attachment-0001.htm>

From even.rouault at spatialys.com  Thu Aug  4 10:10:28 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 4 Aug 2022 19:10:28 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <CADRrdKsSRUiSvu=ttkXT0D73i=K0p_TtZ-DbXCjN-+nSdmqVLg@mail.gmail.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
 <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>
 <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>
 <CADRrdKsSRUiSvu=ttkXT0D73i=K0p_TtZ-DbXCjN-+nSdmqVLg@mail.gmail.com>
Message-ID: <e77a3467-6c67-d20a-1bb4-66613998ef08@spatialys.com>

Hum, it seems I was too fast about "Affine parametric transformation". 
The implementation in PROJ voluntarily ignores the unit specified to the 
A0/A1/A2/B0/B1/B2 and takes the value as it, and the axis order. I'm not 
completely if it is the right thing to do, but EPSG guidance 7-2 note 
isn't super clear about what to do. In their example, they use metre 
unit for A0 and B0, to go from a CRS in Clarke's foot to a CRS in 
metres. The value of the A1 and B2 scaling coefficient is close to the 
conversion factor of Clarke's foot to metre (but slightly different). 
PROJ reproduces the expected transformation on that example. We don't 
have an example of what we should do if the transformation parameter 
units aren't metre/coefficient (I see that there's a deprecated 
EPSG:10088 transformation that uses Clarke's foot but we can't ask it 
for comparison as the deprecation comment mentions that there was an 
error in coefficient values). I let you ask IOGP if you wish to clear 
that up. But in the meantime, you'd be better assuming that there's no 
unit transformation done for that particular method. Doh, coordinate 
transformations are hard and confusing :-)

Le 04/08/2022 ? 18:37, Javier Jimenez Shaw a ?crit?:
> Hi Even. I have been testing your branch (I hope correctly) with the 
> method "Affine parametric transformation". Whit this derived CRS (very 
> similar to the previous example)
>
> DERIVEDPROJCRS["derived from EPSG:6507",
> ? ? BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
> ? ? ? ? BASEGEOGCRS["NAD83(2011)",
> ? ? ? ? ? ? DATUM["NAD83 (National Spatial Reference System 2011)",
> ? ? ? ? ? ? ? ? ELLIPSOID["GRS 1980",6378137,298.257222101,
> ? ? ? ? ? ? ? ? ? ? LENGTHUNIT["metre",1]]],
> ? ? ? ? ? ? PRIMEM["Greenwich",0,
> ? ? ? ? ? ? ? ? ANGLEUNIT["degree",0.0174532925199433]]],
> ? ? ? ? CONVERSION["SPCS83 Mississippi East zone (US Survey feet)",
> ? ? ? ? ? ? METHOD["Transverse Mercator",
> ? ? ? ? ? ? ? ? ID["EPSG",9807]],
> ? ? ? ? ? ? PARAMETER["Latitude of natural origin",29.5,
> ? ? ? ? ? ? ? ? ANGLEUNIT["degree",0.0174532925199433],
> ? ? ? ? ? ? ? ? ID["EPSG",8801]],
> ? ? ? ? ? ? PARAMETER["Longitude of natural origin",-88.8333333333333,
> ? ? ? ? ? ? ? ? ANGLEUNIT["degree",0.0174532925199433],
> ? ? ? ? ? ? ? ? ID["EPSG",8802]],
> ? ? ? ? ? ? PARAMETER["Scale factor at natural origin",0.99995,
> ? ? ? ? ? ? ? ? SCALEUNIT["unity",1],
> ? ? ? ? ? ? ? ? ID["EPSG",8805]],
> ? ? ? ? ? ? PARAMETER["False easting",984250,
> ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
> ? ? ? ? ? ? ? ? ID["EPSG",8806]],
> ? ? ? ? ? ? PARAMETER["False northing",0,
> ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
> ? ? ? ? ? ? ? ? ID["EPSG",8807]]]],
> ? ? DERIVINGCONVERSION["Affine",
> ? ? ? ? METHOD["Affine parametric transformation",
> ? ? ? ? ? ? ID["EPSG",9624]],
> ? ? ? ? PARAMETER["A0",42,
> ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
> ? ? ? ? ? ? ID["EPSG",8623]],
> ? ? ? ? PARAMETER["A1",1,
> ? ? ? ? ? ? SCALEUNIT["coefficient",1],
> ? ? ? ? ? ? ID["EPSG",8624]],
> ? ? ? ? PARAMETER["A2",0,
> ? ? ? ? ? ? SCALEUNIT["coefficient",1],
> ? ? ? ? ? ? ID["EPSG",8625]],
> ? ? ? ? PARAMETER["B0",999,
> ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
> ? ? ? ? ? ? ID["EPSG",8639]],
> ? ? ? ? PARAMETER["B1",0,
> ? ? ? ? ? ? SCALEUNIT["coefficient",1],
> ? ? ? ? ? ? ID["EPSG",8640]],
> ? ? ? ? PARAMETER["B2",1,
> ? ? ? ? ? ? SCALEUNIT["coefficient",1],
> ? ? ? ? ? ? ID["EPSG",8641]]],
> ? ? CS[Cartesian,2],
> ? ? ? ? AXIS["(Y)",north,
> ? ? ? ? ? ? ORDER[1],
> ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219,
> ? ? ? ? ? ? ? ? ID["EPSG",9003]]],
> ? ? ? ? AXIS["(X)",east,
> ? ? ? ? ? ? ORDER[2],
> ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219,
> ? ? ? ? ? ? ? ? ID["EPSG",9003]]]]
>
> and I get these transformations:
>
> $ projinfo -s "EPSG:6507" -t "$(cat derived.wkt)" -o proj -q
> +proj=pipeline
> ? +step +proj=unitconvert +xy_in=us-ft +xy_out=m
> ? +step +proj=affine +xoff=42 +s11=1 +s12=0 +yoff=999 +s21=0 +s22=1
>
> $ projinfo -s "EPSG:6318" -t "$(cat derived.wkt)" -o proj -q
> +proj=pipeline
> ? +step +proj=axisswap +order=2,1
> ? +step +proj=unitconvert +xy_in=deg +xy_out=rad
> ? +step +proj=tmerc +lat_0=29.5 +lon_0=-88.8333333333333 +k=0.99995 
> +x_0=300000
> ? ? ? ? +y_0=0 +ellps=GRS80
> ? +step +proj=affine +xoff=42 +s11=1 +s12=0 +yoff=999 +s21=0 +s22=1
>
> The first case is just applying the derived conversion because the 
> input is "the same" as the base (well, I swapped the axes). If I 
> understood correctly "+xy_out=m" is converting to meters, so the 
> affine operation is done in meters easting-northing, regardless the 
> unit I wrote in the parameters. But nothing is done later (like 
> correcting the out units an order as in your PR)
>
> On the second command, where the input is geographic coordinates, the 
> input for the affine is also meters, but no conversion at the end.
>
> Am I right?
>
> Thanks.
>
> PS what if I make a compound of a derived projected and vertical? Is 
> that a problem?
> .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
>
> On Thu, 4 Aug 2022 at 18:09, Javier Jimenez Shaw <j1 at jimenezshaw.com> 
> wrote:
>
>     Thank you Even!
>
>     To confirm that I understood your changes and how to use it.
>     a) the PROJ-based operation method must work in meters and
>     easting-northing (converting from-meters at the beginning and
>     to-meters at the end if I want to keep my values unchanged)
>     b) In this case transverse mercator returns meters (the input unit
>     for the operation method). Is that the case for every projection?
>     c) your changes add a unit conversion and a swap axis if needed at
>     the end. That will produce a sensible output even with a no-op
>     toperation (like xoff=0) But as said in a), it is not affecting
>     the units and order of the operation method.
>
>     Does this apply to other derived operations, like "Affine
>     parametric transformation"
>     https://epsg.org/coord-operation-method_9624/Affine-parametric-transformation.html
>     ? I guess it may have a similar problem.
>     I do not have clear if the parameters of "Affine parametric
>     transformation" must be in the meters, in the same unit as the
>     system, or it is transforming it depending on the value in the WKT2.
>     I will use your branch and try an example.
>
>     Cheers,
>     Javier
>     .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
>     Entre dos pensamientos racionales
>     hay infinitos pensamientos irracionales.
>
>
>
>     On Thu, 4 Aug 2022 at 17:14, Even Rouault
>     <even.rouault at spatialys.com> wrote:
>
>         Javier,
>
>         I have had a bit of hesitation if the current behaviour was a
>         feature or a bug, and opted for the later while investigating
>         what happened: the axis unit and order of the source CRS
>         (projected CRS) were well taken into account to "normalize" to
>         metre, easting/northing order before applying the user
>         provided PROJ string, but the axis unit and order of the
>         target CRS (derived projected CRS) were ignored.
>
>         I've addressed this per
>         https://github.com/OSGeo/PROJ/pull/3281 . It might potentially
>         break people that have compensated for that, but I feel it is
>         such a marginal use case that fixing it is the best thing.
>
>         Note however that you must adjust your PROJ string: xoff must
>         be expressed in meters. So you should change xoff to
>         65.6166666666667. Or do like I did in the test I added, that
>         is convert xy from m (as I said above, PROJ normalizes to
>         (resp. from) metre, easting/northing? each step before (resp.
>         after) applying the user PROJ string) to us-ft, then apply the
>         affine with xoff=20, and finally convert back from us-ft to xy.
>
>         Even
>
>
>         Le 03/08/2022 ? 19:52, Javier Jimenez Shaw a ?crit?:
>>         Hi
>>
>>         I am trying to make a derived projected CRS... in feet.
>>         The conversion method is a "PROJ-based operation method" with
>>         an affine transformation (simplified here with just xoff of
>>         20 feet).
>>         https://proj.org/operations/transformations/affine.html
>>
>>         The derived system is something like this (my data is 3D, but
>>         in 2D is also reproduced):
>>
>>         $ cat derived.wkt
>>
>>         DERIVEDPROJCRS["Custom Site Calibrated CRS",
>>         ? ? BASEPROJCRS["NAD83(2011) / Mississippi East (ftUS)",
>>         ? ? ? ? BASEGEOGCRS["NAD83(2011)",
>>         ? ? ? ? ? ? DATUM["NAD83 (National Spatial Reference System
>>         2011)",
>>         ? ? ? ? ? ? ? ? ELLIPSOID["GRS 1980",6378137,298.257222101,
>>         ? ? ? ? ? ? ? ? ? ? LENGTHUNIT["metre",1]]],
>>         ? ? ? ? ? ? PRIMEM["Greenwich",0,
>>         ANGLEUNIT["degree",0.0174532925199433]]],
>>         ? ? ? ? CONVERSION["SPCS83 Mississippi East zone (US Survey
>>         feet)",
>>         ? ? ? ? ? ? METHOD["Transverse Mercator",
>>         ? ? ? ? ? ? ? ? ID["EPSG",9807]],
>>         ? ? ? ? ? ? PARAMETER["Latitude of natural origin",29.5,
>>         ANGLEUNIT["degree",0.0174532925199433],
>>         ? ? ? ? ? ? ? ? ID["EPSG",8801]],
>>         ? ? ? ? ? ? PARAMETER["Longitude of natural
>>         origin",-88.8333333333333,
>>         ANGLEUNIT["degree",0.0174532925199433],
>>         ? ? ? ? ? ? ? ? ID["EPSG",8802]],
>>         ? ? ? ? ? ? PARAMETER["Scale factor at natural origin",0.99995,
>>         ? ? ? ? ? ? ? ? SCALEUNIT["unity",1],
>>         ? ? ? ? ? ? ? ? ID["EPSG",8805]],
>>         ? ? ? ? ? ? PARAMETER["False easting",984250,
>>         ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
>>         ? ? ? ? ? ? ? ? ID["EPSG",8806]],
>>         ? ? ? ? ? ? PARAMETER["False northing",0,
>>         ? ? ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219],
>>         ? ? ? ? ? ? ? ? ID["EPSG",8807]]]],
>>         ? ? DERIVINGCONVERSION["Affine transformation as PROJ-based",
>>         ? ? ? ? METHOD["PROJ-based operation method: +proj=pipeline
>>         +step +proj=affine +xoff=20"]],
>>         ? ? CS[Cartesian,2],
>>         ? ? ? ? AXIS["easting (X)",east,
>>         ? ? ? ? ? ? ORDER[1],
>>         ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219]],
>>         ? ? ? ? AXIS["northing (Y)",north,
>>         ? ? ? ? ? ? ORDER[2],
>>         ? ? ? ? ? ? LENGTHUNIT["US survey foot",0.304800609601219]],
>>         ? ? REMARK["EPSG:6507 with 20 feet offset"]]
>>
>>         But the output I get seems to be in meters (I deduced that
>>         running with PROJ_DEBUG=3) It is kind of ignoring the CS.
>>         $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507
>>         1250642.38 -180875.29 0.00
>>         $ echo 29 -88 0 | cs2cs EPSG:6318 "$(cat derived.wkt)"
>>         381216.56 -55130.90 0.00
>>
>>         If I concatenate the pipeline with cct, I get the result I
>>         was expecting (20 feet more in the x):
>>         $ echo 29 -88 0 | cs2cs EPSG:6318 EPSG:6507 | cct
>>         +proj=pipeline +step +proj=affine +xoff=20
>>         1250662.3800 ? -180875.2900 ? ? ? ?0.0000
>>
>>         Is that expected? Am I doing anything wrong?
>>
>>         Thanks.
>>         .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
>>         Entre dos pensamientos racionales
>>         hay infinitos pensamientos irracionales.
>>
>>
>>         _______________________________________________
>>         PROJ mailing list
>>         PROJ at lists.osgeo.org
>>         https://lists.osgeo.org/mailman/listinfo/proj
>
>         -- 
>         http://www.spatialys.com
>         My software is free, but my time generally not.
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/c8a5d258/attachment-0001.htm>

From j1 at jimenezshaw.com  Thu Aug  4 10:27:58 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 4 Aug 2022 19:27:58 +0200
Subject: [PROJ] Units in a derived system
In-Reply-To: <e77a3467-6c67-d20a-1bb4-66613998ef08@spatialys.com>
References: <CADRrdKuXN5gWKCX9da2P2zHzMn7oWRB1-B7KGEaP_1zL60+t+g@mail.gmail.com>
 <185b9a92-7e67-e26f-8bdc-519852184f1a@spatialys.com>
 <CADRrdKtD+E+q_TqhhgwY7R1F_R8zZeM12QBWmkMX-O9gAZ-Bhw@mail.gmail.com>
 <CADRrdKsSRUiSvu=ttkXT0D73i=K0p_TtZ-DbXCjN-+nSdmqVLg@mail.gmail.com>
 <e77a3467-6c67-d20a-1bb4-66613998ef08@spatialys.com>
Message-ID: <CADRrdKtzVgeDOpfR1Qy3sTo+5UZQ0hA=6mXOy8+w8w+QhpD=1w@mail.gmail.com>

Thanks Even.

I tried to show two things in the example about "Affine parametric
transformation", if I understood correctly the results.
a) it was not considering the units of the parameters, and using always
meters. You already said that it is not clear in the EPSG guidance. (I can
use always meters in the parameters in case of doubt. It should be the
safe).
b) the final output of the derived crs is in meters easting-northing,
regardless the axis defined. I do not know if you noticed that.


Related to b), I have been thinking on the derived vertical. I tested this
in your branch and seems to work properly

VERTCRS["Custom Vertical",
    BASEVERTCRS["NAVD88 height (ftUS)",
        VDATUM["North American Vertical Datum 1988"]],
    DERIVINGCONVERSION["vertical offs",
        METHOD["Vertical Offset",
            ID["EPSG",1046]],
        PARAMETER["Vertical Offset",2,
            LENGTHUNIT["US survey foot",0.304800609601219],
            ID["EPSG",8603]]],
    CS[vertical,1],
        AXIS["gravity-related height (H)",up,
            LENGTHUNIT["US survey foot",0.304800609601219]],
    USAGE[
        SCOPE["unknown"],
        AREA["World"],
        BBOX[-90,-180,90,180]]]

$ projinfo -s EPSG:3855 -t "$(cat v.wkt)" -o proj -q
+proj=pipeline
  +step +proj=vertoffset +lat_0=0 +lon_0=0 +dh=0.609601219202438
+slope_lat=0
        +slope_lon=0
  +step +proj=unitconvert +z_in=m +z_out=us-ft

$ projinfo -s EPSG:6360 -t "$(cat v.wkt)" -o proj -q
+proj=pipeline
  +step +proj=unitconvert +z_in=us-ft +z_out=m
  +step +proj=vertoffset +lat_0=0 +lon_0=0 +dh=0.609601219202438
+slope_lat=0
        +slope_lon=0
  +step +proj=unitconvert +z_in=m +z_out=us-ft

It not only converts to us-ft at the end, but also understands the units in
the parameter. Cool.


.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Thu, 4 Aug 2022 at 19:10, Even Rouault <even.rouault at spatialys.com>
wrote:

> Hum, it seems I was too fast about "Affine parametric transformation". The
> implementation in PROJ voluntarily ignores the unit specified to the
> A0/A1/A2/B0/B1/B2 and takes the value as it, and the axis order. I'm not
> completely if it is the right thing to do, but EPSG guidance 7-2 note isn't
> super clear about what to do. In their example, they use metre unit for A0
> and B0, to go from a CRS in Clarke's foot to a CRS in metres. The value of
> the A1 and B2 scaling coefficient is close to the conversion factor of
> Clarke's foot to metre (but slightly different). PROJ reproduces the
> expected transformation on that example. We don't have an example of what
> we should do if the transformation parameter units aren't metre/coefficient
> (I see that there's a deprecated EPSG:10088 transformation that uses
> Clarke's foot but we can't ask it for comparison as the deprecation comment
> mentions that there was an error in coefficient values). I let you ask IOGP
> if you wish to clear that up. But in the meantime, you'd be better assuming
> that there's no unit transformation done for that particular method. Doh,
> coordinate transformations are hard and confusing :-)
> Le 04/08/2022 ? 18:37, Javier Jimenez Shaw a ?crit :
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220804/5aef82fd/attachment.htm>

From even.rouault at spatialys.com  Thu Aug  4 10:51:41 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 4 Aug 2022 19:51:41 +0200
Subject: [PROJ] Different transformation results between PROJ 9.0.0 and
 PROJ 9.0.1
In-Reply-To: <b20dfe1a-7fa5-c0b5-b45d-f313fea7d498@mailbox.org>
References: <b20dfe1a-7fa5-c0b5-b45d-f313fea7d498@mailbox.org>
Message-ID: <b6ada700-cdfc-13df-6131-50e21cfbd9cd@spatialys.com>

Alexander,

in 9.0.0 the operation that gets applied is:

unknown id, Inverse of WGS 84 to EGM96 height (1) + Inverse of NAD83 to 
WGS 84 (43) + NAD83 to NAD83(HARN) (3) + NAD83(HARN) to NAVD88 height 
(5) + Inverse of NAD83 to NAD83(HARN) (3) + SPCS83 California zone 1 (US 
Survey feet), 3.15 m, unknown domain of validity, at least one grid missing

PROJ string:
+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +proj=unitconvert +xy_in=deg +xy_out=rad
 ? +step +proj=vgridshift +grids=us_nga_egm96_15.tif +multiplier=1
 ? +step +inv +proj=vgridshift +grids=us_noaa_g1999u05.tif +multiplier=1
 ? +step +inv +proj=hgridshift +grids=us_noaa_cnhpgn.tif
 ? +step +proj=lcc +lat_0=39.3333333333333 +lon_0=-122 
+lat_1=41.6666666666667
 ??????? +lat_2=40 +x_0=2000000.0001016 +y_0=500000.0001016 +ellps=GRS80
 ? +step +proj=unitconvert +xy_in=m +xy_out=us-ft


and in 9.0.1/master:

unknown id, Inverse of WGS 84 to EGM96 height (1) + Inverse of 
NAD83(HARN) to WGS 84 (3) + NAD83(HARN) to NAVD88 height (5) + Inverse 
of NAD83 to NAD83(HARN) (3) + SPCS83 California zone 1 (US Survey feet), 
2.1 m, unknown domain of validity, at least one grid missing

PROJ string:
+proj=pipeline
 ? +step +proj=axisswap +order=2,1
 ? +step +proj=unitconvert +xy_in=deg +xy_out=rad
 ? +step +proj=vgridshift +grids=us_nga_egm96_15.tif +multiplier=1
 ? +step +proj=cart +ellps=WGS84
 ? +step +inv +proj=helmert +x=-0.991 +y=1.9072 +z=0.5129 
+rx=-0.0257899075194932
 ??????? +ry=-0.0096500989602704 +rz=-0.0116599432323421 +s=0
 ??????? +convention=coordinate_frame
 ? +step +inv +proj=cart +ellps=GRS80
 ? +step +inv +proj=vgridshift +grids=us_noaa_g1999u05.tif +multiplier=1
 ? +step +inv +proj=hgridshift +grids=us_noaa_cnhpgn.tif
 ? +step +proj=lcc +lat_0=39.3333333333333 +lon_0=-122 
+lat_1=41.6666666666667
 ??????? +lat_2=40 +x_0=2000000.0001016 +y_0=500000.0001016 +ellps=GRS80
 ? +step +proj=unitconvert +xy_in=m +xy_out=us-ft

So the difference is that in 9.0.1/master NAD83(HARN) to WGS 84 
transformation is modeled by a Helmert transformation, whereas in 9.0 
its is a null transformation. This is likely due to a new record in the 
EPSG database incorporated in >= 9.0.1

(I got this by looking at the pipeline name emitted by PROJ_DEBUG=2 on 
cs2cs, and then getting the list of transformations from projinfo)


Regarding the differences between specifying or not --bbox, this was a 
bug for which I've queued a fix in 
https://github.com/OSGeo/PROJ/pull/3282. With that fix I get the same 
result when specifying --bbox -122.1,40.9,-121.9,41.1 or not


Even

Le 04/08/2022 ? 11:34, Alexander Nehrbass via PROJ a ?crit?:
>
> Hi everyone,
>
> I?m observing a significant difference between PROJ 9.0.0 and PROJ 
> 9.0.1/master[c482ea8] when doing some coordinate transformations:
>
> $ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773 
> EPSG:2225+5703 -d 8
>
> 6561666.44282083??? 2247576.19215388 0.21377754 (in PROJ 9.0.0)
> 6561670.17486934??? 2247574.26932194 0.70338464 (PROJ 9.0.1/master)
>
> When running these commands with PROJ_DEBUG=3, I can see that 
> different transformation pipelines are being used. PROJ 9.0.0 uses an 
> 11 step pipeline whereas PROJ 9.0.1 uses a 7 step pipeline.
>
> While trying to understand where this difference might come from, I 
> started to play around with the ?bbox option. Doing the above 
> transformation with a bounding box surprisingly does NOT lead to 
> different transformation results between PROJ 9.0.0 and PROJ 
> 9.0.1/master:
>
> $ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773 
> EPSG:2225+5703 -d 8 --bbox -122.1,40.9,-121.9,41.1
>
> 6561666.44282083??? 2247576.19215388 0.31567764
>
> As you can see the horizontal coordinates are the same as when doing 
> the transformation without the bounding box in PROJ 9.0.0, however 
> there is a difference in the vertical coordinate. I also tried 
> changing the size of the bounding box which didn?t seem to have an 
> influence.
>
> My questions at the moment are:
> 1. Where does the difference between PROJ 9.0.0 and 9.0.1 when doing 
> the transformation without the bounding box come from?
> 2. How does using the bbox option affect the transformation results? 
> In particular:
> 2a. Why are the differences between PROJ 9.0.0 and 9.0.1 gone when 
> using a bounding box?
> 2b. Why does the vertical coordinate in PROJ 9.0.0 differ when doing 
> the transformation with and without the bounding box?
> 3. Related bonus question: I was under the impression that passing the 
> -bbox option to projinfo would result in projinfo returning exactly 
> one transformation. However, this seems in correct. Was I under the 
> wrong impression? E.g.:
>
> $ ./projinfo -s EPSG:4326+5773 -t EPSG:2225+5703 --spatial-test 
> intersects --bbox -122.1,40.9,-121.9,41.1
>
>
> Any help with finding answers to these question is highly appreciated.
>
> Thanks in advance and best regards,
> Alex
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From alex.bass at mailbox.org  Fri Aug  5 02:56:42 2022
From: alex.bass at mailbox.org (Alexander Nehrbass)
Date: Fri, 5 Aug 2022 11:56:42 +0200
Subject: [PROJ] Different transformation results between PROJ 9.0.0 and
 PROJ 9.0.1
In-Reply-To: <b6ada700-cdfc-13df-6131-50e21cfbd9cd@spatialys.com>
References: <b20dfe1a-7fa5-c0b5-b45d-f313fea7d498@mailbox.org>
 <b6ada700-cdfc-13df-6131-50e21cfbd9cd@spatialys.com>
Message-ID: <6fa1bd53-19ee-ad18-4efa-aaef766f2ae9@mailbox.org>

Thank you Greg and Even for you detailed answers.

It is clear now, where the difference comes from.
And great, that the bbox bug was fixed.

Alex


On 04.08.22 19:51, Even Rouault wrote:
> Alexander,
>
> in 9.0.0 the operation that gets applied is:
>
> unknown id, Inverse of WGS 84 to EGM96 height (1) + Inverse of NAD83 
> to WGS 84 (43) + NAD83 to NAD83(HARN) (3) + NAD83(HARN) to NAVD88 
> height (5) + Inverse of NAD83 to NAD83(HARN) (3) + SPCS83 California 
> zone 1 (US Survey feet), 3.15 m, unknown domain of validity, at least 
> one grid missing
>
> PROJ string:
> +proj=pipeline
> ? +step +proj=axisswap +order=2,1
> ? +step +proj=unitconvert +xy_in=deg +xy_out=rad
> ? +step +proj=vgridshift +grids=us_nga_egm96_15.tif +multiplier=1
> ? +step +inv +proj=vgridshift +grids=us_noaa_g1999u05.tif +multiplier=1
> ? +step +inv +proj=hgridshift +grids=us_noaa_cnhpgn.tif
> ? +step +proj=lcc +lat_0=39.3333333333333 +lon_0=-122 
> +lat_1=41.6666666666667
> ??????? +lat_2=40 +x_0=2000000.0001016 +y_0=500000.0001016 +ellps=GRS80
> ? +step +proj=unitconvert +xy_in=m +xy_out=us-ft
>
>
> and in 9.0.1/master:
>
> unknown id, Inverse of WGS 84 to EGM96 height (1) + Inverse of 
> NAD83(HARN) to WGS 84 (3) + NAD83(HARN) to NAVD88 height (5) + Inverse 
> of NAD83 to NAD83(HARN) (3) + SPCS83 California zone 1 (US Survey 
> feet), 2.1 m, unknown domain of validity, at least one grid missing
>
> PROJ string:
> +proj=pipeline
> ? +step +proj=axisswap +order=2,1
> ? +step +proj=unitconvert +xy_in=deg +xy_out=rad
> ? +step +proj=vgridshift +grids=us_nga_egm96_15.tif +multiplier=1
> ? +step +proj=cart +ellps=WGS84
> ? +step +inv +proj=helmert +x=-0.991 +y=1.9072 +z=0.5129 
> +rx=-0.0257899075194932
> ??????? +ry=-0.0096500989602704 +rz=-0.0116599432323421 +s=0
> ??????? +convention=coordinate_frame
> ? +step +inv +proj=cart +ellps=GRS80
> ? +step +inv +proj=vgridshift +grids=us_noaa_g1999u05.tif +multiplier=1
> ? +step +inv +proj=hgridshift +grids=us_noaa_cnhpgn.tif
> ? +step +proj=lcc +lat_0=39.3333333333333 +lon_0=-122 
> +lat_1=41.6666666666667
> ??????? +lat_2=40 +x_0=2000000.0001016 +y_0=500000.0001016 +ellps=GRS80
> ? +step +proj=unitconvert +xy_in=m +xy_out=us-ft
>
> So the difference is that in 9.0.1/master NAD83(HARN) to WGS 84 
> transformation is modeled by a Helmert transformation, whereas in 9.0 
> its is a null transformation. This is likely due to a new record in 
> the EPSG database incorporated in >= 9.0.1
>
> (I got this by looking at the pipeline name emitted by PROJ_DEBUG=2 on 
> cs2cs, and then getting the list of transformations from projinfo)
>
>
> Regarding the differences between specifying or not --bbox, this was a 
> bug for which I've queued a fix in 
> https://github.com/OSGeo/PROJ/pull/3282. With that fix I get the same 
> result when specifying --bbox -122.1,40.9,-121.9,41.1 or not
>
>
> Even
>
> Le 04/08/2022 ? 11:34, Alexander Nehrbass via PROJ a ?crit?:
>>
>> Hi everyone,
>>
>> I?m observing a significant difference between PROJ 9.0.0 and PROJ 
>> 9.0.1/master[c482ea8] when doing some coordinate transformations:
>>
>> $ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773 
>> EPSG:2225+5703 -d 8
>>
>> 6561666.44282083??? 2247576.19215388 0.21377754 (in PROJ 9.0.0)
>> 6561670.17486934??? 2247574.26932194 0.70338464 (PROJ 9.0.1/master)
>>
>> When running these commands with PROJ_DEBUG=3, I can see that 
>> different transformation pipelines are being used. PROJ 9.0.0 uses an 
>> 11 step pipeline whereas PROJ 9.0.1 uses a 7 step pipeline.
>>
>> While trying to understand where this difference might come from, I 
>> started to play around with the ?bbox option. Doing the above 
>> transformation with a bounding box surprisingly does NOT lead to 
>> different transformation results between PROJ 9.0.0 and PROJ 
>> 9.0.1/master:
>>
>> $ echo 41.0 -122.0 0.0 | PROJ_NETWORK=ON ./cs2cs EPSG:4326+5773 
>> EPSG:2225+5703 -d 8 --bbox -122.1,40.9,-121.9,41.1
>>
>> 6561666.44282083??? 2247576.19215388 0.31567764
>>
>> As you can see the horizontal coordinates are the same as when doing 
>> the transformation without the bounding box in PROJ 9.0.0, however 
>> there is a difference in the vertical coordinate. I also tried 
>> changing the size of the bounding box which didn?t seem to have an 
>> influence.
>>
>> My questions at the moment are:
>> 1. Where does the difference between PROJ 9.0.0 and 9.0.1 when doing 
>> the transformation without the bounding box come from?
>> 2. How does using the bbox option affect the transformation results? 
>> In particular:
>> 2a. Why are the differences between PROJ 9.0.0 and 9.0.1 gone when 
>> using a bounding box?
>> 2b. Why does the vertical coordinate in PROJ 9.0.0 differ when doing 
>> the transformation with and without the bounding box?
>> 3. Related bonus question: I was under the impression that passing 
>> the -bbox option to projinfo would result in projinfo returning 
>> exactly one transformation. However, this seems in correct. Was I 
>> under the wrong impression? E.g.:
>>
>> $ ./projinfo -s EPSG:4326+5773 -t EPSG:2225+5703 --spatial-test 
>> intersects --bbox -122.1,40.9,-121.9,41.1
>>
>>
>> Any help with finding answers to these question is highly appreciated.
>>
>> Thanks in advance and best regards,
>> Alex
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>

From j1 at jimenezshaw.com  Fri Aug  5 08:36:35 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Fri, 5 Aug 2022 17:36:35 +0200
Subject: [PROJ] DerivedProjected in Compound
Message-ID: <CADRrdKvqp+8bZ=mb6z9GeV-MV5m7kwUyPKicZ6HQnDgHij5gcQ@mail.gmail.com>

Hi
I am trying to create a Compound CRS with a DERIVEDPROJCRS and a VERTCRS,
but I get an exception in C++:

"components of the compound CRS do not belong to one of the allowed
combinations of http://docs.opengeospatial.org/as/18-005r4/18-005r4.html#34"

In that documentation,
"Coordinate reference systems that are combined are required to not contain
any duplicate or redundant axes. Valid combinations shall be the following."
I would expect that "c) Projected 2D + Vertical." were also valid for a
derived projected.

Looking at the figure 9: UML diagram ? Coordinate Reference Systems package
you can see that "DerivedGeographicCRS" is a "GeographicCRS", and
"DerivedVerticalCRS" is a "VerticalCRS". However "DerivedProjectedCRS"
contains a "ProjectedCRS".
I guess the reason for that difference is that "ProjectedCRS" is already a
"DerivedCRS", and they do not want to have multiple inheritance. Makes
sense.

However it produces a strong limitation: cannot use a derived Projected in
a compound.

Would it make sense to allow also a DerivedProjectedCRS in
CompoundCRS::create (and I guess also in CompoundCRS::createLax)?

Thanks,
Javier
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220805/27ba44ab/attachment.htm>

From peter.loewe at gmx.de  Sun Aug 14 03:37:50 2022
From: peter.loewe at gmx.de (=?UTF-8?Q?Peter_L=C3=B6we?=)
Date: Sun, 14 Aug 2022 12:37:50 +0200
Subject: [PROJ] Handbook of Geographic Information / Open Source Chapter /
 PROJ DOI
Message-ID: <trinity-064efb14-eab8-48b2-a625-6cbcf8f1e52d-1660473470614@3c-app-gmx-bap18>

Dear PROJ community,

this is a follow up on the minting of a persitent Digital Object Identifier (DOI) for the PROJ repository. DOI are an emerging standard in digital science.

This DOI reference has now been used to reference the PROJ codebase in the Open Source GIS chapter of the new edition of the Springer Handbook if Geographic Information.

DOI can be used to reference code, data, publications and video and allow to give due scientific credit to the authors, in this case the project development team.

The Open Source GIS chapter which also features PROJ is available for free download during August 2022: https://link.springer.com/chapter/10.1007/978-3-030-53125-6_30.

The chapter includes also a large number of references to conference videos about the software tools which are adressed, which can be immediately accessed from the PDF. The video references are also enabled by DOI.

Kind regards,
Peter

<peter.loewe at gmx.de>


From proj at patrickelmer.de  Mon Aug 15 00:25:51 2022
From: proj at patrickelmer.de (Patrick Elmer)
Date: Mon, 15 Aug 2022 09:25:51 +0200
Subject: [PROJ] Proj9 small library size
Message-ID: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>

Hello @all,

I have just compiled Proj 9.0.1 on Linux. I am wondering that 
"libproj.so.25.9.0.1" has a sice of about 5M, whereas the one from Proj 
8.2.1 is nearly 81M big.
Did I do something wrong or what is the reason for this huge difference?

Kind regards,
Patrick Elmer

From mwtoews at gmail.com  Mon Aug 15 01:50:08 2022
From: mwtoews at gmail.com (Mike Taves)
Date: Mon, 15 Aug 2022 20:50:08 +1200
Subject: [PROJ] Proj9 small library size
In-Reply-To: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
Message-ID: <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>

On Mon, 15 Aug 2022 at 19:42, Patrick Elmer <proj at patrickelmer.de> wrote:
> I have just compiled Proj 9.0.1 on Linux. I am wondering that
> "libproj.so.25.9.0.1" has a sice of about 5M, whereas the one from Proj
> 8.2.1 is nearly 81M big.

I've noticed these differences for a while too. You can see it with
Debian distributions which show package and installed size:

- https://packages.debian.org/bullseye/libproj-dev - PROJ 7 via Autotools
- https://packages.debian.org/bookworm/libproj-dev - PROJ 9 via CMake

My observation is that autotools builds tend to take up more disk
space for C++ projects. (For comparison, see
https://packages.debian.org/buster/libproj-dev for PROJ 5 via
Autotools when it was a C-only library).

Hopefully someone has a better informed answer!

From even.rouault at spatialys.com  Tue Aug 16 00:07:21 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 16 Aug 2022 09:07:21 +0200
Subject: [PROJ] Proj9 small library size
In-Reply-To: <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
Message-ID: <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>


Le 15/08/2022 ? 10:50, Mike Taves a ?crit?:
> On Mon, 15 Aug 2022 at 19:42, Patrick Elmer <proj at patrickelmer.de> wrote:
>> I have just compiled Proj 9.0.1 on Linux. I am wondering that
>> "libproj.so.25.9.0.1" has a sice of about 5M, whereas the one from Proj
>> 8.2.1 is nearly 81M big.
@Patrick Probably that your 81M build is one that includes debug symbols.
> I've noticed these differences for a while too. You can see it with
> Debian distributions which show package and installed size:
>
> - https://packages.debian.org/bullseye/libproj-dev - PROJ 7 via Autotools
> - https://packages.debian.org/bookworm/libproj-dev - PROJ 9 via CMake
>
> My observation is that autotools builds tend to take up more disk
> space for C++ projects. (For comparison, see
> https://packages.debian.org/buster/libproj-dev for PROJ 5 via
> Autotools when it was a C-only library).
@Mike That's a different thing. libproj-dev from PROJ 7 includes the 
static .a library, whereas the one from PROJ 9 doesn't (since PROJ CMake 
builds only build shared or static libraries, but not both at the same time)
>
> Hopefully someone has a better informed answer!
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From mwtoews at gmail.com  Tue Aug 16 02:19:00 2022
From: mwtoews at gmail.com (Mike Taves)
Date: Tue, 16 Aug 2022 21:19:00 +1200
Subject: [PROJ] Proj9 small library size
In-Reply-To: <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
 <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
Message-ID: <CAM2FmMo8ustrM=k+sJQ9tW7q2QihMOv-OCCAxZ=ndTZBp7QCfg@mail.gmail.com>

On Tue, 16 Aug 2022 at 19:07, Even Rouault <even.rouault at spatialys.com> wrote:
> @Mike That's a different thing. libproj-dev from PROJ 7 includes the
> static .a library, whereas the one from PROJ 9 doesn't (since PROJ CMake
> builds only build shared or static libraries, but not both at the same time)

Thanks, that's a detail that I seem to have unlearned! The comparison
should have been:

- https://packages.debian.org/bullseye/libproj19 - PROJ 7 via Autotools
- https://packages.debian.org/bookworm/libproj25 - PROJ 9 via CMake

which have comparable file sizes. Also, I can confirm Even's guess
about debug symbols. Run this:

strip --strip-debug /path/to/libproj.so.22.2.1

and the resulting file will be about 5 MB.

From gdt at lexort.com  Tue Aug 16 05:03:58 2022
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 16 Aug 2022 08:03:58 -0400
Subject: [PROJ] Proj9 small library size
In-Reply-To: <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com> (Even
 Rouault's message of "Tue, 16 Aug 2022 09:07:21 +0200")
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
 <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
Message-ID: <rmizgg4z975.fsf@s1.lexort.com>


Even Rouault <even.rouault at spatialys.com> writes:

> @Mike That's a different thing. libproj-dev from PROJ 7 includes the
> static .a library, whereas the one from PROJ 9 doesn't (since PROJ
> CMake builds only build shared or static libraries, but not both at
> the same time)

That seems like a bug, if you can't easily pass a switch to make both.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220816/6216b772/attachment.sig>

From sebastic at xs4all.nl  Tue Aug 16 05:53:05 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Tue, 16 Aug 2022 14:53:05 +0200
Subject: [PROJ] Proj9 small library size
In-Reply-To: <rmizgg4z975.fsf@s1.lexort.com>
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
 <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
 <rmizgg4z975.fsf@s1.lexort.com>
Message-ID: <df67e405-007b-4043-100d-d6236efc40eb@xs4all.nl>

On 8/16/22 14:03, Greg Troxel wrote:
> Even Rouault <even.rouault at spatialys.com> writes:
> 
>> @Mike That's a different thing. libproj-dev from PROJ 7 includes the
>> static .a library, whereas the one from PROJ 9 doesn't (since PROJ
>> CMake builds only build shared or static libraries, but not both at
>> the same time)
> 
> That seems like a bug, if you can't easily pass a switch to make both.

It's long standing CMake behavior.

libtools builds both by default, so switching to CMake implies dropping 
dropping the static library, or building the project twice setting 
BUILD_SHARED_LIBS accordingly.

It's of the reasons switching from Autotools to CMake is considered a 
regression of packaging point of view.

The static library is a convenience for users of the Debian package, 
it's not used by other packages, so dropping it is not a big deal, it 
only affects a small subset of users.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From charles.karney at gmail.com  Tue Aug 16 06:19:58 2022
From: charles.karney at gmail.com (Charles Karney)
Date: Tue, 16 Aug 2022 09:19:58 -0400
Subject: [PROJ] Proj9 small library size
In-Reply-To: <df67e405-007b-4043-100d-d6236efc40eb@xs4all.nl>
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
 <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
 <rmizgg4z975.fsf@s1.lexort.com>
 <df67e405-007b-4043-100d-d6236efc40eb@xs4all.nl>
Message-ID: <6c64082b-6686-3ceb-1556-7f9553b21a76@karney.com>

It's not particularly difficult to get cmake to build both static and
shared libraries.  Just set up targets for both and have "make all"
build them.

On 8/16/22 08:53, Sebastiaan Couwenberg wrote:
> On 8/16/22 14:03, Greg Troxel wrote:
>> Even Rouault <even.rouault at spatialys.com> writes:
>>
>>> @Mike That's a different thing. libproj-dev from PROJ 7 includes the
>>> static .a library, whereas the one from PROJ 9 doesn't (since PROJ
>>> CMake builds only build shared or static libraries, but not both at
>>> the same time)
>>
>> That seems like a bug, if you can't easily pass a switch to make both.
> 
> It's long standing CMake behavior.
> 
> libtools builds both by default, so switching to CMake implies dropping 
> dropping the static library, or building the project twice setting 
> BUILD_SHARED_LIBS accordingly.
> 
> It's of the reasons switching from Autotools to CMake is considered a 
> regression of packaging point of view.
> 
> The static library is a convenience for users of the Debian package, 
> it's not used by other packages, so dropping it is not a big deal, it 
> only affects a small subset of users.
> 
> Kind Regards,
> 
> Bas
> 

From gdt at lexort.com  Tue Aug 16 13:08:00 2022
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 16 Aug 2022 16:08:00 -0400
Subject: [PROJ] Proj9 small library size
In-Reply-To: <df67e405-007b-4043-100d-d6236efc40eb@xs4all.nl> (Sebastiaan
 Couwenberg's message of "Tue, 16 Aug 2022 14:53:05 +0200")
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
 <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
 <rmizgg4z975.fsf@s1.lexort.com>
 <df67e405-007b-4043-100d-d6236efc40eb@xs4all.nl>
Message-ID: <rmiedxgymsf.fsf@s1.lexort.com>


Sebastiaan Couwenberg <sebastic at xs4all.nl> writes:

> On 8/16/22 14:03, Greg Troxel wrote:
>> Even Rouault <even.rouault at spatialys.com> writes:
>>
>>> @Mike That's a different thing. libproj-dev from PROJ 7 includes the
>>> static .a library, whereas the one from PROJ 9 doesn't (since PROJ
>>> CMake builds only build shared or static libraries, but not both at
>>> the same time)
>>
>> That seems like a bug, if you can't easily pass a switch to make both.
>
> It's long standing CMake behavior.
>
> libtools builds both by default, so switching to CMake implies
> dropping dropping the static library, or building the project twice
> setting BUILD_SHARED_LIBS accordingly.
>
> It's of the reasons switching from Autotools to CMake is considered a
> regression of packaging point of view.

But people keep telling me that moving to cmake from autotools has no
regressions!

> The static library is a convenience for users of the Debian package,
> it's not used by other packages, so dropping it is not a big deal, it
> only affects a small subset of users.

Sure, I get it that it doesn't hurt too many that much.  But the
longstanding norm is to install both so that non-packaging users can use
it, and cmake should meet norms, arguably by default.

(Charles: thanks for the hint; maybe this can be patched in proj to get
back to standard behavior so that the switch to cmake isn't a
regression.)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220816/274608e0/attachment.sig>

From charles.karney at gmail.com  Tue Aug 16 13:31:04 2022
From: charles.karney at gmail.com (Charles Karney)
Date: Tue, 16 Aug 2022 16:31:04 -0400
Subject: [PROJ] Proj9 small library size
In-Reply-To: <rmiedxgymsf.fsf@s1.lexort.com>
References: <2c46127a98d4b0fcf00a30e4694b4af0@patrickelmer.de>
 <CAM2FmMp0MXTWvyd9u5tDNb5tMQZ33rmAwbSsGaAaxky2pz601w@mail.gmail.com>
 <66872206-abb1-efbf-6c1d-b07cced858d4@spatialys.com>
 <rmizgg4z975.fsf@s1.lexort.com>
 <df67e405-007b-4043-100d-d6236efc40eb@xs4all.nl>
 <rmiedxgymsf.fsf@s1.lexort.com>
Message-ID: <ee63bb70-b5cb-d575-4769-aecfd39f29fe@karney.com>

I opened a issue to address this...

https://github.com/OSGeo/PROJ/issues/3286

On 8/16/22 16:08, Greg Troxel wrote:
> 
> Sebastiaan Couwenberg <sebastic at xs4all.nl> writes:
> 
>> On 8/16/22 14:03, Greg Troxel wrote:
>>> Even Rouault <even.rouault at spatialys.com> writes:
>>>
>>>> @Mike That's a different thing. libproj-dev from PROJ 7 includes the
>>>> static .a library, whereas the one from PROJ 9 doesn't (since PROJ
>>>> CMake builds only build shared or static libraries, but not both at
>>>> the same time)
> (Charles: thanks for the hint; maybe this can be patched in proj to get
> back to standard behavior so that the switch to cmake isn't a
> regression.)
> 

From j1 at jimenezshaw.com  Wed Aug 17 08:56:18 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 17 Aug 2022 17:56:18 +0200
Subject: [PROJ] strange output in cs2cs
Message-ID: <CADRrdKuW2yhSC-hySJN=NBz+RNrUK9LQjNT6Pi+W5Bnhh4E5cw@mail.gmail.com>

Hi

There is some strange behavior in "cs2cs"

I have a file.txt with this content

$ cat file.txt
641479.6040 973128.5014 144.6338
641534.7456 973199.8717 138.9833
642094.9325 973945.9479 168.1343

and running this command produces this strange result

$ cs2cs EPSG:6537 EPSG:6318 -d 8 file.txt
38.82056164 -76.22733569 0.00000000?641479.6040 973128.5014 144.6338
41.50375380 -73.95449855 138.98330000
41.50579170 -73.95243612 168.13430000

(the proper coordinates are the last 2 lines)

Am I using cs2cs in a wrong way?

Thanks
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220817/52415989/attachment.htm>

From even.rouault at spatialys.com  Wed Aug 17 09:21:08 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 17 Aug 2022 18:21:08 +0200
Subject: [PROJ] strange output in cs2cs
In-Reply-To: <CADRrdKuW2yhSC-hySJN=NBz+RNrUK9LQjNT6Pi+W5Bnhh4E5cw@mail.gmail.com>
References: <CADRrdKuW2yhSC-hySJN=NBz+RNrUK9LQjNT6Pi+W5Bnhh4E5cw@mail.gmail.com>
Message-ID: <0a162045-6212-aac2-f3f6-5a0a53bd9d73@spatialys.com>

Javier,

I don't reproduce your issue, at least not exactly. I suspect this might 
depend on the actual binary content of the file. Could you attach it ?

If I include an empty line at the beginning of the file, I get the 
following as output (the empty line is interpreted as 0 0 0. I guess we 
should just ignore it instead):

38.82056164??? -76.22733569 0.00000000
41.50355887??? -73.95470151 144.63380000
41.50375380??? -73.95449855 138.98330000
41.50579170??? -73.95243612 168.13430000

Even

Le 17/08/2022 ? 17:56, Javier Jimenez Shaw a ?crit?:
> Hi
>
> There is some strange behavior in "cs2cs"
>
> I have a file.txt with this content
>
> $ cat file.txt
> 641479.6040 973128.5014 144.6338
> 641534.7456 973199.8717 138.9833
> 642094.9325 973945.9479 168.1343
>
> and running this command produces this strange result
>
> $ cs2cs EPSG:6537 EPSG:6318 -d 8 file.txt
> 38.82056164 -76.22733569 0.00000000?641479.6040 973128.5014 144.6338
> 41.50375380 -73.95449855 138.98330000
> 41.50579170 -73.95243612 168.13430000
>
> (the proper coordinates are the last 2 lines)
>
> Am I using cs2cs in a wrong way?
>
> Thanks
> .___ ._ ..._ .. . ._. .___ .. __ . _. . __..? ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220817/e053fac5/attachment.htm>

From j1 at jimenezshaw.com  Wed Aug 17 09:31:04 2022
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 17 Aug 2022 18:31:04 +0200
Subject: [PROJ] strange output in cs2cs
In-Reply-To: <0a162045-6212-aac2-f3f6-5a0a53bd9d73@spatialys.com>
References: <CADRrdKuW2yhSC-hySJN=NBz+RNrUK9LQjNT6Pi+W5Bnhh4E5cw@mail.gmail.com>
 <0a162045-6212-aac2-f3f6-5a0a53bd9d73@spatialys.com>
Message-ID: <CADRrdKvJWSx_neGPnrt1y-a3dxYy-xDVPTx5V-R-=pNBiL3HTw@mail.gmail.com>

oh, the file has something at the beging (BOM) that was not shown by "cat"
or "vim"

$ xxd file.txt
00000000: efbb bf36 3431 3437 392e 3630 3430 2039  ...641479.6040 9
00000010: 3733 3132 382e 3530 3134 2031 3434 2e36  73128.5014 144.6
00000020: 3333 380d 0a36 3431 3533 342e 3734 3536  338..641534.7456
00000030: 2039 3733 3139 392e 3837 3137 2031 3338   973199.8717 138
00000040: 2e39 3833 330d 0a36 3432 3039 342e 3933  .9833..642094.93
00000050: 3235 2039 3733 3934 352e 3934 3739 2031  25 973945.9479 1
00000060: 3638 2e31 3334 330d 0a                   68.1343..


.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Wed, 17 Aug 2022 at 18:21, Even Rouault <even.rouault at spatialys.com>
wrote:

> Javier,
>
> I don't reproduce your issue, at least not exactly. I suspect this might
> depend on the actual binary content of the file. Could you attach it ?
>
> If I include an empty line at the beginning of the file, I get the
> following as output (the empty line is interpreted as 0 0 0. I guess we
> should just ignore it instead):
>
> 38.82056164    -76.22733569 0.00000000
> 41.50355887    -73.95470151 144.63380000
> 41.50375380    -73.95449855 138.98330000
> 41.50579170    -73.95243612 168.13430000
>
> Even
> Le 17/08/2022 ? 17:56, Javier Jimenez Shaw a ?crit :
>
> Hi
>
> There is some strange behavior in "cs2cs"
>
> I have a file.txt with this content
>
> $ cat file.txt
> 641479.6040 973128.5014 144.6338
> 641534.7456 973199.8717 138.9833
> 642094.9325 973945.9479 168.1343
>
> and running this command produces this strange result
>
> $ cs2cs EPSG:6537 EPSG:6318 -d 8 file.txt
> 38.82056164 -76.22733569 0.00000000?641479.6040 973128.5014 144.6338
> 41.50375380 -73.95449855 138.98330000
> 41.50579170 -73.95243612 168.13430000
>
> (the proper coordinates are the last 2 lines)
>
> Am I using cs2cs in a wrong way?
>
> Thanks
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> Entre dos pensamientos racionales
> hay infinitos pensamientos irracionales.
>
>
> _______________________________________________
> PROJ mailing listPROJ at lists.osgeo.orghttps://lists.osgeo.org/mailman/listinfo/proj
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220817/4a743370/attachment-0001.htm>
-------------- next part --------------
?641479.6040 973128.5014 144.6338
641534.7456 973199.8717 138.9833
642094.9325 973945.9479 168.1343

From luis.de.sousa at protonmail.ch  Thu Aug 18 05:59:25 2022
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Thu, 18 Aug 2022 12:59:25 +0000
Subject: [PROJ] Is CRS84 a datum ensemble?
Message-ID: <hr87Ph63-cC0xWF0NOoCpAc4rHXD_z6lLgwrVp96cStlFrykBTvfnrgCzZpwKZ0SA5FbyI_N_w49dLNtl-B6oEgobQU8EFWM7drxx4kgSi4=@protonmail.ch>

Hi all,

this is not a Proj question per se, but possibly relevant to the library. The specification is not clear, whether it refers to the datum ensemble or to a particular datum (Transit?). Any insight on the intention of the OGC in this regard?

Thank you.

--
Lu?s
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220818/12cc6d33/attachment.htm>

From even.rouault at spatialys.com  Thu Aug 18 06:07:00 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 18 Aug 2022 15:07:00 +0200
Subject: [PROJ] Is CRS84 a datum ensemble?
In-Reply-To: <hr87Ph63-cC0xWF0NOoCpAc4rHXD_z6lLgwrVp96cStlFrykBTvfnrgCzZpwKZ0SA5FbyI_N_w49dLNtl-B6oEgobQU8EFWM7drxx4kgSi4=@protonmail.ch>
References: <hr87Ph63-cC0xWF0NOoCpAc4rHXD_z6lLgwrVp96cStlFrykBTvfnrgCzZpwKZ0SA5FbyI_N_w49dLNtl-B6oEgobQU8EFWM7drxx4kgSi4=@protonmail.ch>
Message-ID: <d25f164e-f9d3-924e-e28d-e6edbb41f403@spatialys.com>

Lu?s,

http://www.opengis.net/def/crs/OGC/1.3/CRS84 is the verbose definition 
of OGC CRS84.

It uses the EPSG:6326 datum (now modeled as a datum ensemble in EPSG v10 
database releases).

The following remarks in the definition makes it clear that the intent 
if to be based on the datum ensemble rather than a particular realization:

<gml:remarks>
EPSG::6326 has been the then current realization. No distinction is made 
between the original and subsequent (G730, G873, G1150, G1674 and G1762) 
WGS 84 frames. Since 1997, WGS 84 has been maintained within 10cm of the 
then current ITRF.
</gml:remarks>

For all purposes, OGC:CRS84 is identical to EPSG:4326 but the axis order.

Even

Le 18/08/2022 ? 14:59, Lu? s Moreira de Sousa via PROJ a ?crit?:
> Hi all,
>
> this is not a Proj question per se, but possibly relevant to the 
> library. The specification is not clear, whether it refers to the 
> datum ensemble or to a particular datum (Transit?). Any insight on the 
> intention of the OGC in this regard?
>
> Thank you.
>
> -- 
> Lu?s
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220818/24fd1b5f/attachment.htm>

From luis.de.sousa at protonmail.ch  Thu Aug 18 07:44:29 2022
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Thu, 18 Aug 2022 14:44:29 +0000
Subject: [PROJ] Is CRS84 a datum ensemble?
In-Reply-To: <d25f164e-f9d3-924e-e28d-e6edbb41f403@spatialys.com>
References: <hr87Ph63-cC0xWF0NOoCpAc4rHXD_z6lLgwrVp96cStlFrykBTvfnrgCzZpwKZ0SA5FbyI_N_w49dLNtl-B6oEgobQU8EFWM7drxx4kgSi4=@protonmail.ch>
 <d25f164e-f9d3-924e-e28d-e6edbb41f403@spatialys.com>
Message-ID: <zu8F8Khk-V7BaVn5vYnDBx418PAvt8axTgQStK1_9HbqFTzZ5arATSJFb5HGPv8FfvBMOWL3zWrqTAuWv2QNTZ9DlnBzZQQPTrIqjawpDgg=@protonmail.ch>

Hi Even,

thank you for the reply. The statement "No distinction is made between the original and subsequent" leads me instead to understand CRS84 as strictly referring to the original datum. But the OGC registry is not normative, as far as I know.

In the standard itself that interpretation is not given. There the WGS 84 is referenced more broadly. This is essentially the source of my doubt.

Regards.

--
Lu?s Moreira de Sousa
Pastoor Bruggemanlaan 21
6861 GR Oosterbeek
The Netherlands
Phone: +31 628 544 755
Email: luis.de.sousa at protonmail.ch
Mastodon: @luis_de_sousa at mastodon.social
URL: https://ldesousa.codeberg.page

Sent with [Proton Mail](https://proton.me/) secure email.

------- Original Message -------
On Thursday, August 18th, 2022 at 3:07 PM, Even Rouault <even.rouault at spatialys.com> wrote:

> Lu?s,
>
> http://www.opengis.net/def/crs/OGC/1.3/CRS84 is the verbose definition of OGC CRS84.
>
> It uses the EPSG:6326 datum (now modeled as a datum ensemble in EPSG v10 database releases).
>
> The following remarks in the definition makes it clear that the intent if to be based on the datum ensemble rather than a particular realization:
>
> <gml:remarks>
> EPSG::6326 has been the then current realization. No distinction is made between the original and subsequent (G730, G873, G1150, G1674 and G1762) WGS 84 frames. Since 1997, WGS 84 has been maintained within 10cm of the then current ITRF.
> </gml:remarks>
>
> For all purposes, OGC:CRS84 is identical to EPSG:4326 but the axis order.
>
> Even
>
> Le 18/08/2022 ? 14:59, Lu? s Moreira de Sousa via PROJ a ?crit :
>
>> Hi all,
>>
>> this is not a Proj question per se, but possibly relevant to the library. The specification is not clear, whether it refers to the datum ensemble or to a particular datum (Transit?). Any insight on the intention of the OGC in this regard?
>>
>> Thank you.
>>
>> --
>> Lu?s
>>
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>>
>> https://lists.osgeo.org/mailman/listinfo/proj
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220818/eb5fc00c/attachment.htm>

From shortcam at google.com  Sat Aug 20 14:40:58 2022
From: shortcam at google.com (Cameron Shorter)
Date: Sun, 21 Aug 2022 07:40:58 +1000
Subject: [PROJ] Pitching the proj project to Google's Geo team
Message-ID: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>

Hi proj folks,
If you had one slide to pitch the proj.org project to Google's Geo team,
with the aim of getting Google to engage in the proj project, what should
be on that slide?

I now have a job at Google (outside of Geospatial), and have been asked to
present to Google's Geo team about misaligned maps due to tectonic plate
movements, and what to do about that.
I'll be drawing upon time dependent datum descriptions
<http://cameronshorter.blogspot.com/2019/08/time-dependent-datum-problems.html>
I helped with when working with Australian geospatial government agencies.
Also an associated deep dive presentation
<https://docs.google.com/presentation/d/1mmRo71ZYHhSjgmZva1VitlBWeM4WGJawDf5Ydrd28AY/edit>
from these agencies to the OGC.

I plan to include a slide suggesting Google engage with the OGC, OSGeo, and
the proj.org project. What should be on this slide?
What are the current challenges the proj.org project faces?
Where would you like help?
What should Google be doing differently?

-- 
Cameron Shorter,
Technical Writer, Chrome OS Platforms
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220821/9ee00712/attachment.htm>

From gdt at lexort.com  Sun Aug 21 05:27:42 2022
From: gdt at lexort.com (Greg Troxel)
Date: Sun, 21 Aug 2022 08:27:42 -0400
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 (Cameron Shorter via PROJ's message of "Sun, 21 Aug 2022 07:40:58
 +1000")
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
Message-ID: <rmio7wd7pdt.fsf@s1.lexort.com>


Cameron Shorter via PROJ <proj at lists.osgeo.org> writes:

> Hi proj folks,
> If you had one slide to pitch the proj.org project to Google's Geo team,
> with the aim of getting Google to engage in the proj project, what should
> be on that slide?

Not what you asked, but I think that EPSG:4326 is a huge problem and
needs to be fixed.  By saying "WGS84" there is a vast amount of data
labeled with an ensemble, and given the 2m fuzz, all the time-dependent
things you are complaining about are not really wrong.  Yes, they are
actually issues and I get that, but for normal people's usage, only once
you somehow define that the CRS of TMS layers is not "WGS84(ensemble)"
but some ITRF(yyyy) that is non-ancient.

The usage of WGS84/4326 for TMS (which was a bug at the time) has bled
into all sorts of things where people (who probably didn't really
understand that WGS84(TRANSIT) exists collide with other people who
think we need to treat 4326 as possibly containing TRANSIT and thus are
allowed to use null transforms for meter-level shifts) just copied the
phrase.  It shows up in geojson and as the datum of OpenStreetMap.
Because of this proj treats "NAD83(2011) epoch 2010.0" as equal to 4326;
while technically defensible in a narrow sense it is in the modern world
wrong.

Without fixing the definition of 4326 -- or fixing every standard that
refers to it -- we end up in a world where we have to all say, outside
of the specs, that 4326 doesn't really mean what it says, but means
"Assume that the data is in the most recent realization when reading,
but beware that it might be messy.  When transforming to 4326, transform
to the most recent realization.  Accept write/read operations using
different realizations as minor error sources (relative to the errors in
the data before transforming), and if you don't like that, STOP USING
4326!".
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220821/e887abeb/attachment.sig>

From luis.de.sousa at protonmail.ch  Mon Aug 22 05:52:19 2022
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Mon, 22 Aug 2022 12:52:19 +0000
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <rmio7wd7pdt.fsf@s1.lexort.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
Message-ID: <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>

Hi Cameron,

the feedback so far has mostly in the negative sense, but perhaps that reflects the impact Google has  had in GIS. From my view point, a major contribution Google could have to the FOSS4G world would be to put the Mercator projection to rest once and for all. They are largely responsible for reviving it, when it is now wholly outdated. Instead of triggering a new wave of innovation in geography, web mapping technologies pioneered by Google in fact propelled a regression of several centuries in global mapping.

Google could contribute with the development/maintenance of modern map projections. For instance with the reverse projections of those that still lack it, or extend to the ellipsoid those that are still coded only for the spherical case.

Hope this makes sense. And good luck addressing the Google PTB. Regards. 


P.S.: I also second Greg's words.


--
Lu?s Moreira de Sousa
Pastoor Bruggemanlaan 21
6861 GR Oosterbeek
The Netherlands
Phone: +31 628 544 755
Email: luis.de.sousa at protonmail.ch
Mastodon: @luis_de_sousa at mastodon.social
URL: https://ldesousa.codeberg.page


Sent with Proton Mail secure email.

------- Original Message -------
On Sunday, August 21st, 2022 at 2:27 PM, Greg Troxel <gdt at lexort.com> wrote:


> Cameron Shorter via PROJ proj at lists.osgeo.org writes:
> 
> > Hi proj folks,
> > If you had one slide to pitch the proj.org project to Google's Geo team,
> > with the aim of getting Google to engage in the proj project, what should
> > be on that slide?
> 
> 
> Not what you asked, but I think that EPSG:4326 is a huge problem and
> needs to be fixed. By saying "WGS84" there is a vast amount of data
> labeled with an ensemble, and given the 2m fuzz, all the time-dependent
> things you are complaining about are not really wrong. Yes, they are
> actually issues and I get that, but for normal people's usage, only once
> you somehow define that the CRS of TMS layers is not "WGS84(ensemble)"
> but some ITRF(yyyy) that is non-ancient.
> 
> The usage of WGS84/4326 for TMS (which was a bug at the time) has bled
> into all sorts of things where people (who probably didn't really
> understand that WGS84(TRANSIT) exists collide with other people who
> think we need to treat 4326 as possibly containing TRANSIT and thus are
> allowed to use null transforms for meter-level shifts) just copied the
> phrase. It shows up in geojson and as the datum of OpenStreetMap.
> Because of this proj treats "NAD83(2011) epoch 2010.0" as equal to 4326;
> while technically defensible in a narrow sense it is in the modern world
> wrong.
> 
> Without fixing the definition of 4326 -- or fixing every standard that
> refers to it -- we end up in a world where we have to all say, outside
> of the specs, that 4326 doesn't really mean what it says, but means
> "Assume that the data is in the most recent realization when reading,
> but beware that it might be messy. When transforming to 4326, transform
> to the most recent realization. Accept write/read operations using
> different realizations as minor error sources (relative to the errors in
> the data before transforming), and if you don't like that, STOP USING
> 4326!".
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From kristianevers at gmail.com  Mon Aug 22 06:29:41 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 22 Aug 2022 15:29:41 +0200
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
Message-ID: <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>

>From my view point, a major contribution Google could have to the FOSS4G
> world would be to put the Mercator projection to rest once and for all.
> They are largely responsible for reviving it, when it is now wholly
> outdated. Instead of triggering a new wave of innovation in geography, web
> mapping technologies pioneered by Google in fact propelled a regression of
> several centuries in global mapping.
>

I think hydrographic offices across the world would like to have a word
with

you on the relevance of the Mercator projection. But the abomination that is

the Webmercator shouldn't have made its entrance in the first place. We have

Google to thank for that but had they not been first movers with Google
Earth/Maps

someone else is likely to have made a similar thing. The actual
implementation

isn't particularly great from a geodetic stand-point but it does solve the
problem

of displaying a global map in a sensible way. The most recent incarnation of

Google Maps uses a globe when zooming out far enough and that technology

would be great to see shared with the rest of the community. PROJ can
certainly

play a role in that but I think OpenLayers and similar projects have a
larger role in

that.



I don't know if the broader community is aware of it but we do have a lot
of

contributions from Google already. Both in terms of actual code from Kurt
Schwehr

(possibly others, too) as well as the OSS-Fuzz testing facility. Of course
more is always

welcome :-)


/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220822/91c65a6e/attachment.htm>

From Jochem.Lesparre at kadaster.nl  Mon Aug 22 08:05:13 2022
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Mon, 22 Aug 2022 15:05:13 +0000
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
Message-ID: <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

I support:

  *   Cameron?s own suggestion on supporting time-dependent transformations,
  *   Kristian?s suggestion to stop using webmercator, and
  *   Greg?s suggestion to stop using WGS84 (EPSG:4326).

I would like to add to:

  *   Start promoting the use of an application-independent way to link to a location like geo:37.786971,-122.399677;u=35 (https://en.wikipedia.org/wiki/Geo_URI_scheme) by the general public instead of their own links like https://www.google.com/maps/@37.786971,-122.399677,14z or https://www.google.com/maps/search/37.786971,-122.399677
  *   Support other CRSs using EPSG and PROJ

Jochem


From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Kristian Evers
Sent: maandag 22 augustus 2022 15:30
To: Lu??s Moreira de Sousa <luis.de.sousa at protonmail.ch>
Cc: Cameron Shorter via PROJ <proj at lists.osgeo.org>
Subject: Re: [PROJ] Pitching the proj project to Google's Geo team

Deze e-mail is afkomstig van buiten de organisatie


From my view point, a major contribution Google could have to the FOSS4G world would be to put the Mercator projection to rest once and for all. They are largely responsible for reviving it, when it is now wholly outdated. Instead of triggering a new wave of innovation in geography, web mapping technologies pioneered by Google in fact propelled a regression of several centuries in global mapping.



I think hydrographic offices across the world would like to have a word with

you on the relevance of the Mercator projection. But the abomination that is

the Webmercator shouldn't have made its entrance in the first place. We have

Google to thank for that but had they not been first movers with Google Earth/Maps

someone else is likely to have made a similar thing. The actual implementation

isn't particularly great from a geodetic stand-point but it does solve the problem

of displaying a global map in a sensible way. The most recent incarnation of

Google Maps uses a globe when zooming out far enough and that technology

would be great to see shared with the rest of the community. PROJ can certainly

play a role in that but I think OpenLayers and similar projects have a larger role in

that.



I don't know if the broader community is aware of it but we do have a lot of

contributions from Google already. Both in terms of actual code from Kurt Schwehr

(possibly others, too) as well as the OSS-Fuzz testing facility. Of course more is always

welcome :-)


/Kristian


Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220822/121168a8/attachment-0001.htm>

From martin.desruisseaux at geomatys.com  Mon Aug 22 09:50:40 2022
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 22 Aug 2022 18:50:40 +0200
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
 <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com>

Le 22/08/2022 ? 17:05, Lesparre, Jochem via PROJ a ?crit?:

> I support:
>
>   * ?(?snip?)
>   * Greg?s suggestion to stop using WGS84 (EPSG:4326).
>
Just one nuance about above last point. I agree about deprecating 
EPSG:4326 for /data producers/ (i.e. encourage all data producers to 
describe their CRS as accurately as they can). But we still need 
EPSG:4326 as an ensemble (i.e. with its ~2 meters uncertainty) for /data 
users/. The reason is that when a software reads a file from unknown 
source, if the CRS has not been accurately defined by the producer, 
there is nothing the software or user can do about that. In those cases, 
the worst thing would be to /pretend/ that we have a CRS of some 
specific realization while actually the software has no idea. We need a 
way to said "we don't know what is the realization because the producer 
did not tell us, expect a 2 meters uncertainty".

So I would not be in favour of interpreting EPSG:4326 as the latest 
realization. I think it should continue to mean "we don't know the 
realization", and every coordinate transformation involving EPSG:4326 
should declare a 2 meters uncertainty. We need to keep the possibility 
to said "we don't know", even if we want to encourage data producers to 
be more accurate.

 ??? Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220822/261875f6/attachment.htm>

From gdt at lexort.com  Mon Aug 22 10:32:09 2022
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 22 Aug 2022 13:32:09 -0400
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com> (Martin
 Desruisseaux's message of "Mon, 22 Aug 2022 18:50:40 +0200")
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
 <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com>
Message-ID: <rmipmgsfali.fsf@s1.lexort.com>


Martin Desruisseaux <martin.desruisseaux at geomatys.com> writes:

> Le 22/08/2022 ? 17:05, Lesparre, Jochem via PROJ a ?crit?:
>
>> I support:
>>
>>   * ?(?snip?)
>>   * Greg?s suggestion to stop using WGS84 (EPSG:4326).
>>
> Just one nuance about above last point. I agree about deprecating
> EPSG:4326 for /data producers/ (i.e. encourage all data producers to
> describe their CRS as accurately as they can). But we still need
> EPSG:4326 as an ensemble (i.e. with its ~2 meters uncertainty) for
> /data users/. The reason is that when a software reads a file from
> unknown source, if the CRS has not been accurately defined by the
> producer, there is nothing the software or user can do about that.

Agreed; there is data where there is no information about which frame.

I think it's important to undestand that if data is labeled with
EPSG:4326, that it might be in some ITRF, because it came out of a GNSS
receiver with SBAS, or in NAD83(something) because it came out of a GPS
receiver in the US with corrections from a Coast Guard differential
system.  And probably a bunch of other CRSes.  And random other frames
transformed *to* 4326, whatever that means, done who knows how.  It
would be interesting to run down the reality for a number of datasets
labeled 4326 and see what the distribution is.

> In those cases, the worst thing would be to /pretend/ that we have a
> CRS of some specific realization while actually the software has no
> idea. We need a way to said "we don't know what is the realization
> because the producer did not tell us, expect a 2 meters uncertainty".

I don't think it's the worst thing.  Assuming NAD27 would be worse.
And: if somebody claims to have data in 4326 but when you ask them "but
really what is it" and they have no idea, would you believe them?

We need to be mindful of two accuracies:

  1) the intrinsic error of the data relative to the actual CRS it is in
  2) the error from that actual CRS to the labeled CRS

When data is simply labeled 4326, yes, there is a 2m possible error from
any of the frames it could properly be to WGS84(G23139)==ITRF2014,
ignoring epoch as a separate issue.  But the intrinsic error of the data
might be far larger.  If the data really is in WGS84(TRANSIT), and it is
navigation solutions not from an authorized user, there will be ~100m of
intrinsic error.

What is bad is that if the data labeled 4326 happens to actually be

  1) has a small intrinsic error
  2) is in G2139 or really any of the last few realizations

then it is important not to introduce error in the transformation
process.  There is a difference between accurately carrying the error
term and creating additional errors.

If the data actually happens to be in TRANSIT, assuming it's in G2139
and adding 2m to the error budget is going to result in that 2m being
used up in a mistransformation, rather than just having an extra 2m of
formal error without any additional actual error.  But data that is
actually in TRANSIT is exceedingly rare.  I have some, somewhere, and
it's only worth looking at to understand how Selective Availability used
to be.  I really doubt anyone can tell the difference between TRANSIT
with SA and G730 with SA.

> So I would not be in favour of interpreting EPSG:4326 as the latest
> realization. I think it should continue to mean "we don't know the
> realization", and every coordinate transformation involving EPSG:4326
> should declare a 2 meters uncertainty. We need to keep the possibility
> to said "we don't know", even if we want to encourage data producers
> to be more accurate.

I didn't mean "interpret it exactly as if".  After some thought, I'd
like to restate it.

When dealing with source data in 4326:

  increase the formal error of the result by 2m, to account for the
  possibility of treating data that is actually TRANSIT as G2139

  treat the CRS as if it were the latest realization

When dealing with a target CRS of 4326

  transform to the latest realization

  don't do anything about error, because it's totally legit to treat
  G2139 data as being of the ensemble, and everyone else will add 2m of
  error when they take it out of the ensemble.

This will capture what you care about, that there is 2m of additional
uncertainty on top of the (probably unknown) intrinsic error of the
data.  And, if the data happens to be decent (not TRANSIT, not G730), it
won't mistransform it.

By mistransform, I mean the following processs getting a bad answer:

  take data in 4326

  transform to 6319, NAD83(2011) epoch 2010.0

proj comes up with a null transform because of ensemble error, but in
the reasonably likely case that the path to 4326 was careful, or the
data was in some recent realization, but it's labeled that way because
of some container format (e.g. TMS, geojson), you get an incorrect 1
meter shift in New England.

This is not theoretical.  I have data in NAD83(2011) epoch 2010.0,
gathered with dual-frequency RTK (ardusimple) that I think has 5 or 10
cm standard error.  If I view that in qgis with 15cm imagery from
MassGIS (government) in jp2 natively in NAD83 (UTM zone 19, alignment
with USGS), things line up to a pixel.  MassGIS publishes the same
imagery as TMS which is 4236/webmercator, and they have transformed
NAD83->WGS84 to a recent realization.  That imagery in qgis is
misaligned.  If I set my project CRS to 4326 it's still misaligned
because 6319->4326 is null.  But if I set my project CRS to ITRF2014,
then everything lines up because the NAD83->ITRF2014 transform is not
null.  (This is all from memory; I'm really sure of the effect and
mostly I use jp2 tiles and 6319.)

Right now, this need to say we don't know is causing real, avoidable
errors for a significant amount of data.  I'm not opposed to increasing
the formal error - that doesn't hurt.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220822/ec7f987c/attachment.sig>

From martin.desruisseaux at geomatys.com  Tue Aug 23 02:55:47 2022
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 23 Aug 2022 11:55:47 +0200
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <rmipmgsfali.fsf@s1.lexort.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
 <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com>
 <rmipmgsfali.fsf@s1.lexort.com>
Message-ID: <ffbf7846-42ed-7402-f273-c2a040c06cab@geomatys.com>

Le 22/08/2022 ? 19:32, Greg Troxel a ?crit?:

>> In those cases, the worst thing would be to /pretend/ that we have a 
>> CRS of some specific realization while actually the software has no 
>> idea. We need a way to said "we don't know what is the realization 
>> because the producer did not tell us, expect a 2 meters uncertainty".
>>
> I don't think it's the worst thing. Assuming NAD27 would be worse. 
> And: if somebody claims to have data in 4326 but when you ask them 
> "but really what is it" and they have no idea, would you believe them?
>
Right, I restricted the scope of the discussion to WGS84 for simplicity. 
But for a larger scope, previous versions of EPSG database had the 
following CRS (there is 42 such definitions, I list only a few of them):

    4035??? Unknown datum based upon the Authalic Sphere
    4047??? Unspecified datum based upon the GRS 1980 Authalic Sphere
    4019??? Unknown datum based upon the GRS 1980 ellipsoid
    4043??? Unknown datum based upon the WGS 72 ellipsoid

So we had the possibility to specify what we know with some granularity: 
"I don't know the CRS but I think it is some sphere" (a reasonable 
assumption when dealing with numerical models in oceanography). Or "I 
only know that the sphere is based on GRS 1980", etc. Recent versions of 
EPSG database have deprecated those codes with the message "No longer 
supported by EPSG because datum information is required for unambiguous 
spatial referencing", so those CRS are no longer visible on 
https://epsg.org. As said in my previous email, I agree with the stated 
reason for data producers, but it leaves data users with no way to said 
that the CRS is not well known. On my side, I continue to use EPSG:4047 
for CRS read from CF-conventions (datum is rarely specified in that 
format) until I find a better alternative. For unspecified datum, I 
assume an uncertainty of 3 km (the highest error I have seen so far when 
ignoring datum shifts, in Reunion Island).


> (?snip?) After some thought, I'd like to restate it. When dealing with 
> source data in 4326: increase the formal error of the result by 2m, to 
> account for the possibility of treating data that is actually TRANSIT 
> as G2139 treat the CRS as if it were the latest realization When 
> dealing with a target CRS of 4326 transform to the latest realization 
> don't do anything about error, because it's totally legit to treat 
> G2139 data as being of the ensemble, and everyone else will add 2m of 
> error when they take it out of the ensemble.
>
It looks reasonable. Treating EPSG:4326 as a recent realization is 
arbitrary, but not wrong if the uncertainty is increased sufficiently. 
Whether the arbitrary part of this approach (EPSG:4326 as a recent 
realization) would be best for the majority, I have no answer to that 
question.

 ??? Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220823/27aee3f4/attachment.htm>

From shortcam at google.com  Tue Aug 23 04:38:15 2022
From: shortcam at google.com (Cameron Shorter)
Date: Tue, 23 Aug 2022 21:38:15 +1000
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <ffbf7846-42ed-7402-f273-c2a040c06cab@geomatys.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
 <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com>
 <rmipmgsfali.fsf@s1.lexort.com>
 <ffbf7846-42ed-7402-f273-c2a040c06cab@geomatys.com>
Message-ID: <CAFKgHhirXZTj4O8pc=hEnU7ZUgkoSdcw4CQXoGdm7j7R33K32Q@mail.gmail.com>

Thanks all for your excellent responses and suggestions.
It has been great to discover that Googler Kurt is on the proj PSC, and he
will be a better person than me to be a conduit between proj and Google,
especially at the super detailed technical level. (That will be a point on
my slide).

I'll be talking at a fairly high level discussion. Key points:
* The basemap owner sets the projection for maps based on this basemap, so
there is a duty of basemap owners to get this right. (Hint-hint Google)
* WGS84 is a poor selection for a tiled basemap + a few of the high level
reasons mentioned here and in other sources
* We need to collect epoch when capturing data when using dynamic datums
* OGC standards need to be updated as well
* ... and a bit more which I'm still working on
* This will be best solved in collaboration, and proj is one of the
communities that Google should develop a relationship with.

Feel free to continue the discussion on this thread, but note that I'll
have minimal bandwidth to incorporate further feedback.
Hopefully this presentation will lead to a broader engagement, with
some deep dive collaborative technical discussions.

Warm regards, Cameron

On Tue, Aug 23, 2022 at 7:55 PM Martin Desruisseaux <
martin.desruisseaux at geomatys.com> wrote:

> Le 22/08/2022 ? 19:32, Greg Troxel a ?crit :
>
> In those cases, the worst thing would be to /pretend/ that we have a CRS
> of some specific realization while actually the software has no idea. We
> need a way to said "we don't know what is the realization because the
> producer did not tell us, expect a 2 meters uncertainty".
>
> I don't think it's the worst thing. Assuming NAD27 would be worse. And: if
> somebody claims to have data in 4326 but when you ask them "but really what
> is it" and they have no idea, would you believe them?
>
> Right, I restricted the scope of the discussion to WGS84 for simplicity.
> But for a larger scope, previous versions of EPSG database had the
> following CRS (there is 42 such definitions, I list only a few of them):
>
> 4035    Unknown datum based upon the Authalic Sphere
> 4047    Unspecified datum based upon the GRS 1980 Authalic Sphere
> 4019    Unknown datum based upon the GRS 1980 ellipsoid
> 4043    Unknown datum based upon the WGS 72 ellipsoid
>
> So we had the possibility to specify what we know with some granularity:
> "I don't know the CRS but I think it is some sphere" (a reasonable
> assumption when dealing with numerical models in oceanography). Or "I only
> know that the sphere is based on GRS 1980", etc. Recent versions of EPSG
> database have deprecated those codes with the message "No longer supported
> by EPSG because datum information is required for unambiguous spatial
> referencing", so those CRS are no longer visible on https://epsg.org. As
> said in my previous email, I agree with the stated reason for data
> producers, but it leaves data users with no way to said that the CRS is not
> well known. On my side, I continue to use EPSG:4047 for CRS read from
> CF-conventions (datum is rarely specified in that format) until I find a
> better alternative. For unspecified datum, I assume an uncertainty of 3 km
> (the highest error I have seen so far when ignoring datum shifts, in
> Reunion Island).
>
>
> (?snip?) After some thought, I'd like to restate it. When dealing with
> source data in 4326: increase the formal error of the result by 2m, to
> account for the possibility of treating data that is actually TRANSIT as
> G2139 treat the CRS as if it were the latest realization When dealing with
> a target CRS of 4326 transform to the latest realization don't do anything
> about error, because it's totally legit to treat G2139 data as being of the
> ensemble, and everyone else will add 2m of error when they take it out of
> the ensemble.
>
> It looks reasonable. Treating EPSG:4326 as a recent realization is
> arbitrary, but not wrong if the uncertainty is increased sufficiently.
> Whether the arbitrary part of this approach (EPSG:4326 as a recent
> realization) would be best for the majority, I have no answer to that
> question.
>
>     Martin
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220823/842f6615/attachment.htm>

From richard.greenwood at gmail.com  Tue Aug 23 05:04:54 2022
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Tue, 23 Aug 2022 14:04:54 +0200
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <ffbf7846-42ed-7402-f273-c2a040c06cab@geomatys.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
 <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com>
 <rmipmgsfali.fsf@s1.lexort.com>
 <ffbf7846-42ed-7402-f273-c2a040c06cab@geomatys.com>
Message-ID: <CAHBySPZq21UTdSZwfLQ=syAwXj_tXbT5UOayc8gq6TtmmY1ZDA@mail.gmail.com>

Hi Cameron,

l don't know how many sentences fit on a slide but I would say that the
EPSG system no longer meets current Geo location needs. It was developed
when coordinate systems were primarily regional and plate based. Coordinate
positions are now geocentric, yet most of us still live on one plate or
another. Someone (maybe Google) needs to develop an unambiguous system to
tie geocentric positions to the plates over time to address the half meter
of error that accumulates every decade.

On Tue, Aug 23, 2022, 11:55 AM Martin Desruisseaux <
martin.desruisseaux at geomatys.com> wrote:

> Le 22/08/2022 ? 19:32, Greg Troxel a ?crit :
>
> In those cases, the worst thing would be to /pretend/ that we have a CRS
> of some specific realization while actually the software has no idea. We
> need a way to said "we don't know what is the realization because the
> producer did not tell us, expect a 2 meters uncertainty".
>
> I don't think it's the worst thing. Assuming NAD27 would be worse. And: if
> somebody claims to have data in 4326 but when you ask them "but really what
> is it" and they have no idea, would you believe them?
>
> Right, I restricted the scope of the discussion to WGS84 for simplicity.
> But for a larger scope, previous versions of EPSG database had the
> following CRS (there is 42 such definitions, I list only a few of them):
>
> 4035    Unknown datum based upon the Authalic Sphere
> 4047    Unspecified datum based upon the GRS 1980 Authalic Sphere
> 4019    Unknown datum based upon the GRS 1980 ellipsoid
> 4043    Unknown datum based upon the WGS 72 ellipsoid
>
> So we had the possibility to specify what we know with some granularity:
> "I don't know the CRS but I think it is some sphere" (a reasonable
> assumption when dealing with numerical models in oceanography). Or "I only
> know that the sphere is based on GRS 1980", etc. Recent versions of EPSG
> database have deprecated those codes with the message "No longer supported
> by EPSG because datum information is required for unambiguous spatial
> referencing", so those CRS are no longer visible on https://epsg.org. As
> said in my previous email, I agree with the stated reason for data
> producers, but it leaves data users with no way to said that the CRS is not
> well known. On my side, I continue to use EPSG:4047 for CRS read from
> CF-conventions (datum is rarely specified in that format) until I find a
> better alternative. For unspecified datum, I assume an uncertainty of 3 km
> (the highest error I have seen so far when ignoring datum shifts, in
> Reunion Island).
>
>
> (?snip?) After some thought, I'd like to restate it. When dealing with
> source data in 4326: increase the formal error of the result by 2m, to
> account for the possibility of treating data that is actually TRANSIT as
> G2139 treat the CRS as if it were the latest realization When dealing with
> a target CRS of 4326 transform to the latest realization don't do anything
> about error, because it's totally legit to treat G2139 data as being of the
> ensemble, and everyone else will add 2m of error when they take it out of
> the ensemble.
>
> It looks reasonable. Treating EPSG:4326 as a recent realization is
> arbitrary, but not wrong if the uncertainty is increased sufficiently.
> Whether the arbitrary part of this approach (EPSG:4326 as a recent
> realization) would be best for the majority, I have no answer to that
> question.
>
>     Martin
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220823/c846a063/attachment-0001.htm>

From martin.desruisseaux at geomatys.com  Tue Aug 23 07:11:09 2022
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 23 Aug 2022 16:11:09 +0200
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
Message-ID: <e93b3085-d3d7-5a60-748f-35a00c4c6137@geomatys.com>

Le 20/08/2022 ? 23:40, Cameron Shorter via PROJ a ?crit?:

> I now have a job at Google (outside of Geospatial), and have been 
> asked to present to Google's Geo team about misaligned maps due to 
> tectonic plate movements, and what to do about that.
>
I did not answered directly to the first question yet, but are you aware 
of OGC GGXF effort?

    https://github.com/opengeospatial/CRS-Gridded-Geodetic-data-eXchange-Format/

This is a proposed OGC standard format for encoding the information 
needed for performing coordinate transformations due to tectonic plate 
movements, among other geodetic operations. It is currently based on 
netCDF, but we try to split the standard in a "carrier neutral" core and 
an annex which applies the core to netCDF-4 carrier. That way, it keeps 
the door open for adding other carriers (e.g. ZARR or GeoTIFF) if needed.

A little bit of history: ESRI and IOGP (the maintainer of EPSG database) 
started to look at this issue maybe 5~10 years ago. ESRI already made a 
first proposal based on netCDF at that time (so contrarily to what have 
been said on this mailing list, this effort did not started because of 
PROJ doing something similar 2 years ago). However that work had little 
progress until 2 years ago for human resource reason: CRS activity in 
the last years at OGC has progressed a lot thanks to a man who 
accomplished a tremendous amount of standardization work: Roger Lott 
from IOGP. But Roger has been busy with the first version of ISO 19162 
(WKT 2) before 2015, then with revision of ISO 19111 precisely for 
taking in account plate movements (that ISO 19111 revision introduced 
dynamic CRS and "Point Motion" operation), then with revision of ISO 
19162 for leveraging above-cited new capabilities, and revision of EPSG 
database schema (version 10.x changed significantly compared to 9.x) for 
same reason. Roger became available for new work only 2 years ago.

The GGXF working group includes members from IOGP, ESRI, AIG 
(International Association of Geodesy), various mapping agencies and 
Chris Crook who helped to design the GeoTIFF format used by PROJ for 
gridded datum shifts. So not only we are well aware of the work PROJ 
initiated, but one of the key designers of that work is one of the most 
active GGXF contributors.

The group has produced two documents. One document about deformation 
model (largely Chris's work) has been completed and will be submitted at 
OGC for approval I think in October. The other document is about the 
GGXF format itself, which after 2 years of work is close to completion. 
The feasibility of GGXF is tested by a prototype written in Python by Chris.

So to address the tectonic movements issue, I think that OGC standards 
are putting pieces in place, thanks to Roger's and Chris's work. I 
presume that when GGXF will be an approved standard, it will be used in 
EPSG database as operation parameters whose value is a path to a GGXF 
file. But there is a delay of many years between standard approval and 
their actual implementation in open source software. For example in 
Apache SIS, we have not yet implemented the new features introduced in 
ISO 19111:2019 (point motion operations, etc.) and the corresponding 
updates in ISO 19162:2019 and EPSG database version 10.x. In PROJ as 
well, I'm not sure if "Point Motion operation" is already implemented.

So I believe that OGC standards are in good progress for addressing the 
issue raised by Cameron, but implementations lag a few years behind 
(which is normal).

 ??? Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220823/efe0dca5/attachment.htm>

From glen.rice at noaa.gov  Tue Aug 23 07:58:17 2022
From: glen.rice at noaa.gov (Glen Rice - NOAA Federal)
Date: Tue, 23 Aug 2022 10:58:17 -0400
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <e93b3085-d3d7-5a60-748f-35a00c4c6137@geomatys.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <e93b3085-d3d7-5a60-748f-35a00c4c6137@geomatys.com>
Message-ID: <CAGm0ZKe=aJfKjqUWCCK0iQCMso5A-AoMbx_vB18MD9Ti5Hsabw@mail.gmail.com>

Since hydrographic offices were mentioned and uncertainty is a central
topic, I would like to add ortho-tidal vertical datums to the discussion.
For a bit of background I am one of the leads for the National Bathymetric
Source project <https://www.nauticalcharts.noaa.gov/data/bluetopo.html>
with NOAA Office of Coast Survey.  I am not even close to an expert in
datums, transformations, and OGC specifications, but I can speak to some of
our struggles with compiling lots of different sources of bathymetry.

Within NOAA / Office of Coast Survey (as both a data provider and an
external data user), the total propagated uncertainty (TPU) is an important
qualification of datasets and includes the datum realization uncertainty.
Chart datum, such as Mean Lower Low Water (MLLW) and as defined in the US,
is an ensemble that changes with (VDatum) region and the grids (geoid, etc)
used.  Being explicit about the grids provides for a specific realization
of the vertical datum.  We are looking at describing the vertical datum
using a WKT2 BoundCRS (example at the bottom here
<https://github.com/OpenNavigationSurface/crs_specification/blob/main/examples/boundcrs_compound.py>)
to avoid ensembles (such as EPSG:5703) and the complexity required to
accommodate all the possible permutations of grid combinations as EPSG
codes.  Because we carry TPU with our data we will adjust the TPU as
transformations occur, and if incorporated data is an ensemble we will
incur the cost of the ensemble when adding the data but moving forward the
data will be assumed to be in a specific realization.

One of our current struggles has been to operationalize this approach to
dealing with explicit vertical datums and their uncertainty.

Hopefully that is useful and on point.
Glen

On Tue, Aug 23, 2022 at 10:11 AM Martin Desruisseaux <
martin.desruisseaux at geomatys.com> wrote:

> Le 20/08/2022 ? 23:40, Cameron Shorter via PROJ a ?crit :
>
> I now have a job at Google (outside of Geospatial), and have been asked to
> present to Google's Geo team about misaligned maps due to tectonic plate
> movements, and what to do about that.
>
> I did not answered directly to the first question yet, but are you aware
> of OGC GGXF effort?
>
>
> https://github.com/opengeospatial/CRS-Gridded-Geodetic-data-eXchange-Format/
>
> This is a proposed OGC standard format for encoding the information needed
> for performing coordinate transformations due to tectonic plate movements,
> among other geodetic operations. It is currently based on netCDF, but we
> try to split the standard in a "carrier neutral" core and an annex which
> applies the core to netCDF-4 carrier. That way, it keeps the door open for
> adding other carriers (e.g. ZARR or GeoTIFF) if needed.
>
> A little bit of history: ESRI and IOGP (the maintainer of EPSG database)
> started to look at this issue maybe 5~10 years ago. ESRI already made a
> first proposal based on netCDF at that time (so contrarily to what have
> been said on this mailing list, this effort did not started because of PROJ
> doing something similar 2 years ago). However that work had little progress
> until 2 years ago for human resource reason: CRS activity in the last years
> at OGC has progressed a lot thanks to a man who accomplished a tremendous
> amount of standardization work: Roger Lott from IOGP. But Roger has been
> busy with the first version of ISO 19162 (WKT 2) before 2015, then with
> revision of ISO 19111 precisely for taking in account plate movements (that
> ISO 19111 revision introduced dynamic CRS and "Point Motion" operation),
> then with revision of ISO 19162 for leveraging above-cited new
> capabilities, and revision of EPSG database schema (version 10.x changed
> significantly compared to 9.x) for same reason. Roger became available for
> new work only 2 years ago.
>
> The GGXF working group includes members from IOGP, ESRI, AIG
> (International Association of Geodesy), various mapping agencies and Chris
> Crook who helped to design the GeoTIFF format used by PROJ for gridded
> datum shifts. So not only we are well aware of the work PROJ initiated, but
> one of the key designers of that work is one of the most active GGXF
> contributors.
>
> The group has produced two documents. One document about deformation model
> (largely Chris's work) has been completed and will be submitted at OGC for
> approval I think in October. The other document is about the GGXF format
> itself, which after 2 years of work is close to completion. The feasibility
> of GGXF is tested by a prototype written in Python by Chris.
>
> So to address the tectonic movements issue, I think that OGC standards are
> putting pieces in place, thanks to Roger's and Chris's work. I presume that
> when GGXF will be an approved standard, it will be used in EPSG database as
> operation parameters whose value is a path to a GGXF file. But there is a
> delay of many years between standard approval and their actual
> implementation in open source software. For example in Apache SIS, we have
> not yet implemented the new features introduced in ISO 19111:2019 (point
> motion operations, etc.) and the corresponding updates in ISO 19162:2019
> and EPSG database version 10.x. In PROJ as well, I'm not sure if "Point
> Motion operation" is already implemented.
>
> So I believe that OGC standards are in good progress for addressing the
> issue raised by Cameron, but implementations lag a few years behind (which
> is normal).
>
>     Martin
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
Glen Rice
National Bathymetric Source
Hydrographic Systems and Technology Branch
Office of Coast Survey / Coast Survey Development Laboratory
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220823/22ad402f/attachment.htm>

From martin.desruisseaux at geomatys.com  Tue Aug 23 08:29:36 2022
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 23 Aug 2022 17:29:36 +0200
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <CAGm0ZKe=aJfKjqUWCCK0iQCMso5A-AoMbx_vB18MD9Ti5Hsabw@mail.gmail.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <e93b3085-d3d7-5a60-748f-35a00c4c6137@geomatys.com>
 <CAGm0ZKe=aJfKjqUWCCK0iQCMso5A-AoMbx_vB18MD9Ti5Hsabw@mail.gmail.com>
Message-ID: <ac520e01-eda3-56e2-c647-750f05ba57dd@geomatys.com>

Hello Glen

An alternative to BOUNDCRS with more flexibility would be 
COORDINATEOPERATION. However the main drawback is that it is not a CRS; 
it is another kind of object. Whether this alternative is applicable or 
not depends on if the WKT would be used in a context accepting only CRS 
or if other kinds of object (namely coordinate operations) are accepted 
as well. If COORDINATEOPERATION can be used, it allows the declaration 
of INTERPOLATIONCRS and OPERATIONACCURACY elements among other. Example 
5 below shows its use in a "DHHN92 height to EVRF2007 height" 
transformation:

    http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#143

I saw that the BoundCRS for "NAD83 / UTM zone 15N + NOAA Chart Datum" 
uses parameters that a paths to *.gtx files. This is a case where those 
files may be replaceable by GGXF files. Latest draft is available as a 
PDF document there:

    https://github.com/opengeospatial/CRS-Gridded-Geodetic-data-eXchange-Format/issues/40

The proposed standard supports hydroid models at table C.4 (page 57). 
Uncertainty is also supported by the proposed standard (table C.5 among 
others). Feedback would be very welcome before the draft become final! 
(I suggest to post comment directly on above GitHub issue if any).

 ??? Martin


Le 23/08/2022 ? 16:58, Glen Rice - NOAA Federal via PROJ a ?crit?:

> Since hydrographic offices were mentioned and uncertainty is a central 
> topic, I would like to add ortho-tidal vertical datums to the 
> discussion.? For a bit of background I am one of the leads for the 
> National Bathymetric Source project 
> <https://www.nauticalcharts.noaa.gov/data/bluetopo.html> with NOAA 
> Office of Coast Survey.? I am not even close to an expert in datums, 
> transformations, and OGC specifications, but I can speak to some of 
> our struggles with?compiling lots of different sources of bathymetry.
>
> Within NOAA / Office of Coast Survey (as both a data provider and an 
> external data user), the total propagated?uncertainty (TPU) is an 
> important qualification of datasets and includes the datum realization 
> uncertainty. Chart datum, such as Mean Lower Low Water (MLLW) and as 
> defined in the US, is an ensemble that changes with (VDatum) region 
> and the grids (geoid, etc) used.? Being explicit about the grids 
> provides for a specific realization of the vertical datum.? We are 
> looking at describing the vertical datum using a WKT2 BoundCRS 
> (example at the bottom here 
> <https://github.com/OpenNavigationSurface/crs_specification/blob/main/examples/boundcrs_compound.py>) 
> to avoid ensembles (such as EPSG:5703) and the complexity required to 
> accommodate?all the possible permutations of grid?combinations as EPSG 
> codes.? Because we carry TPU with our data we will adjust the TPU as 
> transformations occur, and if incorporated?data is an ensemble we will 
> incur the cost of the ensemble when adding the data but moving forward 
> the data will be assumed to be in a specific realization.
>
> One of our current struggles has been to operationalize this approach 
> to dealing with explicit vertical datums and their uncertainty.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220823/7f69f2fe/attachment-0001.htm>

From support at mnspoint.com  Wed Aug 24 03:33:49 2022
From: support at mnspoint.com (support at mnspoint.com)
Date: Wed, 24 Aug 2022 13:33:49 +0300
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
Message-ID: <1d51c51d28d68760a30d711d41de4e26@mnspoint.com>

Hello,

Google should stop dumping free software and services which it is 
funding by spam advertising in various online services, as such 
activities destroy diverse software production and also irritate users 
of these online services. Currently, Google is using its money from 
other sources to destroy other software producers and markets. (That is 
a good reason not to support Googles ambitions with PROJ)

Janne

-------------------------------------------------------
Cameron Shorter via PROJ kirjoitti 2022-08-21 00:40:
> Hi proj folks,
> .....
> What should Google be doing differently?
> 

From shortcam at google.com  Wed Aug 24 04:13:15 2022
From: shortcam at google.com (Cameron Shorter)
Date: Wed, 24 Aug 2022 21:13:15 +1000
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <e93b3085-d3d7-5a60-748f-35a00c4c6137@geomatys.com>
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <e93b3085-d3d7-5a60-748f-35a00c4c6137@geomatys.com>
Message-ID: <CAFKgHhisDky8QQNUQzTgJFshMP_3GsSaNMYaqHXzZeJQGzas7g@mail.gmail.com>

Thanks Martin, I was unaware of this, and plan to add some extra bullets to
my slides (probably with a link back to this email).

On Wed, Aug 24, 2022 at 12:11 AM Martin Desruisseaux <
martin.desruisseaux at geomatys.com> wrote:

> Le 20/08/2022 ? 23:40, Cameron Shorter via PROJ a ?crit :
>
> I now have a job at Google (outside of Geospatial), and have been asked to
> present to Google's Geo team about misaligned maps due to tectonic plate
> movements, and what to do about that.
>
> I did not answered directly to the first question yet, but are you aware
> of OGC GGXF effort?
>
>
> https://github.com/opengeospatial/CRS-Gridded-Geodetic-data-eXchange-Format/
>
> This is a proposed OGC standard format for encoding the information needed
> for performing coordinate transformations due to tectonic plate movements,
> among other geodetic operations. It is currently based on netCDF, but we
> try to split the standard in a "carrier neutral" core and an annex which
> applies the core to netCDF-4 carrier. That way, it keeps the door open for
> adding other carriers (e.g. ZARR or GeoTIFF) if needed.
>
> A little bit of history: ESRI and IOGP (the maintainer of EPSG database)
> started to look at this issue maybe 5~10 years ago. ESRI already made a
> first proposal based on netCDF at that time (so contrarily to what have
> been said on this mailing list, this effort did not started because of PROJ
> doing something similar 2 years ago). However that work had little progress
> until 2 years ago for human resource reason: CRS activity in the last years
> at OGC has progressed a lot thanks to a man who accomplished a tremendous
> amount of standardization work: Roger Lott from IOGP. But Roger has been
> busy with the first version of ISO 19162 (WKT 2) before 2015, then with
> revision of ISO 19111 precisely for taking in account plate movements (that
> ISO 19111 revision introduced dynamic CRS and "Point Motion" operation),
> then with revision of ISO 19162 for leveraging above-cited new
> capabilities, and revision of EPSG database schema (version 10.x changed
> significantly compared to 9.x) for same reason. Roger became available for
> new work only 2 years ago.
>
> The GGXF working group includes members from IOGP, ESRI, AIG
> (International Association of Geodesy), various mapping agencies and Chris
> Crook who helped to design the GeoTIFF format used by PROJ for gridded
> datum shifts. So not only we are well aware of the work PROJ initiated, but
> one of the key designers of that work is one of the most active GGXF
> contributors.
>
> The group has produced two documents. One document about deformation model
> (largely Chris's work) has been completed and will be submitted at OGC for
> approval I think in October. The other document is about the GGXF format
> itself, which after 2 years of work is close to completion. The feasibility
> of GGXF is tested by a prototype written in Python by Chris.
>
> So to address the tectonic movements issue, I think that OGC standards are
> putting pieces in place, thanks to Roger's and Chris's work. I presume that
> when GGXF will be an approved standard, it will be used in EPSG database as
> operation parameters whose value is a path to a GGXF file. But there is a
> delay of many years between standard approval and their actual
> implementation in open source software. For example in Apache SIS, we have
> not yet implemented the new features introduced in ISO 19111:2019 (point
> motion operations, etc.) and the corresponding updates in ISO 19162:2019
> and EPSG database version 10.x. In PROJ as well, I'm not sure if "Point
> Motion operation" is already implemented.
>
> So I believe that OGC standards are in good progress for addressing the
> issue raised by Cameron, but implementations lag a few years behind (which
> is normal).
>
>     Martin
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220824/53ee011f/attachment.htm>

From gdt at lexort.com  Wed Aug 24 05:18:15 2022
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 24 Aug 2022 08:18:15 -0400
Subject: [PROJ] Pitching the proj project to Google's Geo team
In-Reply-To: <CAHBySPZq21UTdSZwfLQ=syAwXj_tXbT5UOayc8gq6TtmmY1ZDA@mail.gmail.com>
 (Richard Greenwood's message of "Tue, 23 Aug 2022 14:04:54 +0200")
References: <CAFKgHhhhFf0dKJYHUF=9w-EJM+L0M_XBcTM0j2NzKHax=ZVKcQ@mail.gmail.com>
 <rmio7wd7pdt.fsf@s1.lexort.com>
 <1gCWSb6eGjhhSQ_z3G6F2KZwb00hpOM5sg0pHSApOAV2dZgo5NsSmy0vU_yqEdimpDFAgP6vCy7dwmzHiv6atPbUfbPUsr1KkHKPFq0GU74=@protonmail.ch>
 <CALECs+dTp9ubekv4=3PsE73GO6cSbRz5rtMNGX_hm7=NxBosSA@mail.gmail.com>
 <AM0P192MB0482D3B3804D6D6C37AA96C7EF719@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <c74156fb-b5f3-5cd4-3c3c-48b7fe88c88e@geomatys.com>
 <rmipmgsfali.fsf@s1.lexort.com>
 <ffbf7846-42ed-7402-f273-c2a040c06cab@geomatys.com>
 <CAHBySPZq21UTdSZwfLQ=syAwXj_tXbT5UOayc8gq6TtmmY1ZDA@mail.gmail.com>
Message-ID: <rmi8rndal88.fsf@s1.lexort.com>


Richard Greenwood <richard.greenwood at gmail.com> writes:

> l don't know how many sentences fit on a slide but I would say that the
> EPSG system no longer meets current Geo location needs. It was developed
> when coordinate systems were primarily regional and plate based. Coordinate
> positions are now geocentric, yet most of us still live on one plate or
> another. Someone (maybe Google) needs to develop an unambiguous system to
> tie geocentric positions to the plates over time to address the half meter
> of error that accumulates every decade.

I really do not understand where you are coming from at all.

EPSG is simply a catalog of datums and projections, giving a unique name
(ID) to talk about something that (almost always) already exists.

The EPSG catalog contains a number of world-wide systems (roughly, the
ITRF family, of which WGS84 is now a part), and also contains a number
of classical regional datums.  There are transforms between those.

What's needed is pretty simple and I think pretty much everybody here
understands it

  stop using ensembles to store or serve data

  carry epoch in datasets.  (Even for theoretically plate-fixed frames,
  there is motion (e.g. NAD83(2011)), but many of those use data from a
  reference epoch).

  Record and use epoch-aware transforms.

gdal has made great strides, and the big problem is in specifications
like TMS.  Replacing EPSG with something else isn't going to fix TMS and
geojson.

And, this work need to be done by people competent in geodessy with
adequate authority to insist on it being done right.   An organization
that brought us maps in "WGS84" and "spherical mercator" is IMHO not a
leading candidate for that, but I'd be happy to be shown otherwise.



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220824/9b25ee13/attachment.sig>

From kristianevers at gmail.com  Fri Aug 26 02:37:39 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 26 Aug 2022 11:37:39 +0200
Subject: [PROJ] PROJ 9.1.0RC1 & PROJ-data 1.11RC1
Message-ID: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>

All,

I have prepared release candidates for PROJ 9.1.0 and PROJ-data 1.11. They can be
downloaded here:

https://download.osgeo.org/proj/proj-9.1.0RC1.tar.gz
https://download.osgeo.org/proj/proj-9.1.0RC1.zip

https://download.osgeo.org/proj/proj-data-1.11RC1.tar.gz
https://download.osgeo.org/proj/proj-data-1.11RC1.zip

See the PROJ release notes below. The PROJ-data release includes three new grids:

- French geoid grid RAF20
- Canadian grid for CGVD28 height --> CGVD2013a(2010) height vertical transformation
- Norwegian (Svalbard) geoid grid supporting the SVD2006 height system

Please check that the so-version of the PROJ RC is correct. I have followed the new
procedure described in the HOWTORELEASE document which for this release (in my
interpretation) means no change. But in light of recent releases it is quite likely that I
have yet again got it wrong.

Please test the two release candidates and report back your findings either to the
mailing list or in a GitHub issue.

/Kristian

?????????????????????????

9.1.0 Release Notes
-------------------

 Updates
 --------

 + Database

  o Database: update to EPSG v10.074 (#3273)

  o Update ESRI objects to version 3.0.0 (#3257)

  o Generate null transformation between geodetic/vertical datum ensemble and   
    its members (#3266)

  o Add fk delete cascade to database tables for improved customizability
    of the database (#3237)

  o Add Svalbard geoid grid no_kv_arcgp-2006-sk to grid alternatives (#3292) 

  o Added French grid fr_ign_RAF20 to grid alternatives (#3228)

 + WKT & PROJJSON

  o WKT2 parser: allow unit-less PARAMETER for coordinate operations (#3271)

  o WKT and PROJJSON adjustments (#3234)

  o Bump PROJJSON to v0.5 (#3216)

  o Change order of horizontal and vertical operations when dealing with
    WKT1 / PROJ4 compound CRS (#3127)

 + Coordinate Operations

  o Implement Vertical Offset and slope transformation method (#3200)

  o Add Interrupted Mollweide (land and ocean view) projections (#3139)

  o Add invertible Horner polynomials (#3133)

 + Optimizations

  o NTv2 and GTX grid readers: add a cache of lines to speed-up (#3241)
  
  o IComparable::isEquivalentTo() optimizations (#3233)

 + Various Updates

  o createOperations() / proj_trans(): better take into account area of 
    interest name / do not only keep first returned coordinate operation (#3282)

  o createOperations(): take into account axis unit and inversion of target    
    DerivedProjectedCRS (#3281)

  o Allow a Compound CRS with derived projected (#3283)

  o Make "Vertical Offset and Slope" method usable as a deriving conversion of 
    a DerivedVerticalCRS (#3270)

  o PROJ pipeline generator: recognize opposite Helmert transformations using
    a different convention (#3265)

  o createOperations(): prefer simpler pipelines / affects WGS 84 to 
    GDA94/GDA2020 (#3248)
  
  o Make it possible to determine which grid files were actually used during a
    transformation (#3180)
  
  o Transformation: no longer do vertical trasnformation when doing compound CRS
    to 2D CRS / add --3d to cs2cs (#3119)

  o Deprecate PROJ4 CMake name (#3094)

  o Use GNUInstallDirs for CMake install locations (#3100)

  o Introduce PROJ_DATA environment variable to deprecate PROJ_LIB (#3253)


 Bug fixes
 --------
 
 o projinfo: fix crash on --list-crs when proj.db cannot be opened (#3290)

 o getCRSInfoList(): fix retrieval of projected_crs given by text_definition
   only (#3289)

 o WKT parser: fix issue when parsing some WKT1 with 
   Hotine_Oblique_Mercator_Azimuth_Center and ignoring rectified_grid_angle (#3280)

 o WKT1 import: better deal when the angular unit of the GEOGCS[] of the 
   PROJCS[] doesn't match the one from the database (#3274)

 o createOperations(): avoid potential infinite recursions (#3264)

 o WKT ESRI: fix related to projected CRS export and add support for geographic
   3D CRS with LINUNIT node (#3256)

 o proj_grid_info(): make it work again with remote grids (#3239)

 o createOperations(): fix projected CRS with non-metre horiz&vertical unit and
   towgs84 to gencentric CRS (#3231)

 o createOperations(): fix infinite recursion in a complex case (#3226)
 


From sebastic at xs4all.nl  Fri Aug 26 06:32:18 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 26 Aug 2022 15:32:18 +0200
Subject: [PROJ] PROJ 9.1.0RC1 & PROJ-data 1.11RC1
In-Reply-To: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
Message-ID: <237dbc24-f8c2-c90a-e270-a86e3cf18cf3@xs4all.nl>

What's the deal with the enormous latex directory in the tarballs?

It's not part of the CMake build.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From kristianevers at gmail.com  Fri Aug 26 08:41:46 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 26 Aug 2022 17:41:46 +0200
Subject: [PROJ] PROJ 9.1.0RC1 & PROJ-data 1.11RC1
In-Reply-To: <237dbc24-f8c2-c90a-e270-a86e3cf18cf3@xs4all.nl>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
 <237dbc24-f8c2-c90a-e270-a86e3cf18cf3@xs4all.nl>
Message-ID: <A4367EEF-3B01-42D0-9F7D-84FCBA2149D5@gmail.com>

Good catch, Bas! Looks like left-overs from building the docs locally.
I?ll clean it up and release a RC2 within the next couple of days.

Have you found any other problems with the release candidate?

/Kristian



> On 26 Aug 2022, at 15.32, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> 
> What's the deal with the enormous latex directory in the tarballs?
> 
> It's not part of the CMake build.
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From sebastic at xs4all.nl  Fri Aug 26 08:47:10 2022
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 26 Aug 2022 17:47:10 +0200
Subject: [PROJ] PROJ 9.1.0RC1 & PROJ-data 1.11RC1
In-Reply-To: <A4367EEF-3B01-42D0-9F7D-84FCBA2149D5@gmail.com>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
 <237dbc24-f8c2-c90a-e270-a86e3cf18cf3@xs4all.nl>
 <A4367EEF-3B01-42D0-9F7D-84FCBA2149D5@gmail.com>
Message-ID: <761663d6-4d6b-0024-9b65-d1023d32d938@xs4all.nl>

On 8/26/22 17:41, Kristian Evers wrote:
> Have you found any other problems with the release candidate?

Yes:

  * https://github.com/OSGeo/PROJ/issues/3295
  * https://github.com/OSGeo/PROJ/issues/3296

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From kristianevers at gmail.com  Sun Aug 28 11:03:03 2022
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 28 Aug 2022 20:03:03 +0200
Subject: [PROJ] PROJ 9.1.0RC2
In-Reply-To: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
Message-ID: <03D6EEF4-8F9F-430D-AEAE-BFC042FBC16D@gmail.com>

Thanks to the feedback from Bas a few issues with PROJ 9.1.0RC1 has been fixed
and a RC2 is now available for testing:

https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz <https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz>
https://download.osgeo.org/proj/proj-9.1.0RC2.zip <https://download.osgeo.org/proj/proj-9.1.0RC2.zip>


/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220828/db8a9f0c/attachment.htm>

From kreve at sdfi.dk  Wed Aug 31 03:52:33 2022
From: kreve at sdfi.dk (Kristian Evers)
Date: Wed, 31 Aug 2022 10:52:33 +0000
Subject: [PROJ] PROJ 9.1.0RC2
In-Reply-To: <03D6EEF4-8F9F-430D-AEAE-BFC042FBC16D@gmail.com>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
 <03D6EEF4-8F9F-430D-AEAE-BFC042FBC16D@gmail.com>
Message-ID: <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>

PSC members,

I haven't received any complaints about PROJ 9.1.0RC2 or PROJ-data 1.11RC1
so I hereby motion to promote to final releases.

I'll start with my +1.

/Kristian

Fra: PROJ <proj-bounces at lists.osgeo.org> P? vegne af Kristian Evers
Sendt: 28. august 2022 20:03
Til: PROJ <PROJ at lists.osgeo.org>
Emne: [PROJ] PROJ 9.1.0RC2

Thanks to the feedback from Bas a few issues with PROJ 9.1.0RC1 has been fixed
and a RC2 is now available for testing:

https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz
https://download.osgeo.org/proj/proj-9.1.0RC2.zip


/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/7150e085/attachment.htm>

From howard at hobu.co  Wed Aug 31 04:00:53 2022
From: howard at hobu.co (Howard Butler)
Date: Wed, 31 Aug 2022 06:00:53 -0500
Subject: [PROJ] PROJ 9.1.0RC2
In-Reply-To: <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
References: <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
Message-ID: <BF21C706-73C8-4342-85A6-6A308DA3126F@hobu.co>



> On Aug 31, 2022, at 5:52 AM, Kristian Evers via PROJ <proj at lists.osgeo.org> wrote:
> 
>  
> 
> I?ll start with my +1
> 

+1

Howard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/39216b3a/attachment.htm>

From even.rouault at spatialys.com  Wed Aug 31 04:19:11 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 31 Aug 2022 13:19:11 +0200
Subject: [PROJ] PROJ 9.1.0RC2
In-Reply-To: <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
 <03D6EEF4-8F9F-430D-AEAE-BFC042FBC16D@gmail.com>
 <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
Message-ID: <ab34a60c-1da9-b138-3cbd-9f4c38f923ed@spatialys.com>

+1 Even

Le 31/08/2022 ? 12:52, Kristian Evers via PROJ a ?crit?:
>
> PSC members,
>
> I haven?t received any complaints about PROJ 9.1.0RC2 or PROJ-data 1.11RC1
>
> so I hereby motion to promote to final releases.
>
> I?ll start with my +1.
>
> /Kristian
>
> *Fra:* PROJ <proj-bounces at lists.osgeo.org> *P? vegne af *Kristian Evers
> *Sendt:* 28. august 2022 20:03
> *Til:* PROJ <PROJ at lists.osgeo.org>
> *Emne:* [PROJ] PROJ 9.1.0RC2
>
> Thanks to the feedback from Bas a few issues with PROJ 9.1.0RC1 has 
> been fixed
>
> and a RC2 is now available for testing:
>
> https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz
>
> https://download.osgeo.org/proj/proj-9.1.0RC2.zip
>
> /Kristian
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/1942751e/attachment.htm>

From charles.karney at gmail.com  Wed Aug 31 05:59:55 2022
From: charles.karney at gmail.com (Charles Karney)
Date: Wed, 31 Aug 2022 08:59:55 -0400
Subject: [PROJ] PROJ 9.1.0RC2
In-Reply-To: <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
 <03D6EEF4-8F9F-430D-AEAE-BFC042FBC16D@gmail.com>
 <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
Message-ID: <9a629570-6592-f2b8-2732-9536faabd429@karney.com>

+1

   --Charles

On 8/31/22 06:52, Kristian Evers via PROJ wrote:
> PSC members,
> 
> I haven?t received any complaints about PROJ 9.1.0RC2 or PROJ-data 1.11RC1
> 
> so I hereby motion to promote to final releases.
> 
> I?ll start with my +1.
> 
> /Kristian
> 
> *Fra:* PROJ <proj-bounces at lists.osgeo.org> *P? vegne af *Kristian Evers
> *Sendt:* 28. august 2022 20:03
> *Til:* PROJ <PROJ at lists.osgeo.org>
> *Emne:* [PROJ] PROJ 9.1.0RC2
> 
> Thanks to the feedback from Bas a few issues with PROJ 9.1.0RC1 has been 
> fixed
> 
> and a RC2 is now available for testing:
> 
> https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz 
> <https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz>
> 
> https://download.osgeo.org/proj/proj-9.1.0RC2.zip 
> <https://download.osgeo.org/proj/proj-9.1.0RC2.zip>
> 
> /Kristian
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From dfileccia at hgnss.com  Wed Aug 31 06:41:49 2022
From: dfileccia at hgnss.com (David Fileccia)
Date: Wed, 31 Aug 2022 13:41:49 +0000
Subject: [PROJ] PROJ and nadgrids vs hgridshift +grids
Message-ID: <DM6PR06MB45883460B43B4F17CC724178BE789@DM6PR06MB4588.namprd06.prod.outlook.com>

I need to get the grid shift of the NtV2 files for the Australian National Grid 1984. I can use the .TIF files in the PROJ data but I also need to be able to use the original GSB file for customers that only understand the official government data.

My current setup for the .TIF file is:
      const std::string p = "+proj=pipeline "
            "+step +proj=unitconvert +xy_in=deg +xy_out=rad "
            "+step +proj=hgridshift +grids=<gridpath>.tif +inv "
            "+step +proj=unitconvert +xy_in=rad +xy_out=deg ";

I tried:
      const std::string p = "+proj=pipeline "
            "+step +proj=unitconvert +xy_in=deg +xy_out=rad "
            "+step +nadgrids=<gridpath>.gsb +inv "
            "+step +proj=unitconvert +xy_in=rad +xy_out=deg ";

Of course, this failed saying it is an invalid pipeline.

What is the correct pipeline for this procedure?

Best Regards,

David Fileccia
Senior Systems Engineer | HEMISPHERE GNSS
Office: 6860 Little Twin Road, Germantown, OH 45327, USA
Corporate: 8515 E. Anderson Drive, Scottsdale, AZ 85255, USA
M: +1 404 579 4391
dfileccia at hgnss.com<mailto:dfileccia at hgnss.com> | www.hgnss.com<http://www.hgnss.com/>
[cid:image001.png at 01D8BD1D.E3B99040]

Disclaimer: This message (including any other messages, attachments, or files within) contains information that may be confidential or privileged and is the property of Hemisphere GNSS, Inc. and its subsidiaries ('Hemisphere'). It is intended for the person to whom it is addressed. If you are not the intended recipient, you are not authorized to read, copy, distribute, print, retain, or use this message or any part thereof. If you receive this message in error, please notify the sender immediately and delete all copies of this message. Any opinions or views expressed within are solely those of the author and do not necessarily represent those of Hemisphere. Thank you for your cooperation.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/84730a8a/attachment-0001.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 5199 bytes
Desc: image001.png
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/84730a8a/attachment-0001.png>

From even.rouault at spatialys.com  Wed Aug 31 06:53:31 2022
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 31 Aug 2022 15:53:31 +0200
Subject: [PROJ] PROJ and nadgrids vs hgridshift +grids
In-Reply-To: <DM6PR06MB45883460B43B4F17CC724178BE789@DM6PR06MB4588.namprd06.prod.outlook.com>
References: <DM6PR06MB45883460B43B4F17CC724178BE789@DM6PR06MB4588.namprd06.prod.outlook.com>
Message-ID: <83d0bb50-7f20-e3cd-467e-a5008100259a@spatialys.com>

+proj=hgridshift can also work on NTv2 .gsb files. Cf 
https://proj.org/operations/transformations/hgridshift.html#cmdoption-arg-grids

Le 31/08/2022 ? 15:41, David Fileccia a ?crit?:
>
> I need to get the grid shift of the NtV2 files for the Australian 
> National Grid 1984. I can use the .TIF files in the PROJ data but I 
> also need to be able to use the original GSB file for customers that 
> only understand the official government data.
>
> My current setup for the .TIF file is:
>
> conststd::string p="+proj=pipeline"
>
> "+step+proj=unitconvert+xy_in=deg+xy_out=rad"
>
> "+step+proj=hgridshift+grids=<gridpath>.tif+inv"
>
> "+step+proj=unitconvert+xy_in=rad+xy_out=deg";
>
> I tried:
>
> conststd::string p="+proj=pipeline"
>
> "+step+proj=unitconvert+xy_in=deg+xy_out=rad"
>
> "+step+nadgrids=<gridpath>.gsb+inv"
>
> "+step+proj=unitconvert+xy_in=rad+xy_out=deg";
>
> Of course, this failed saying it is an invalid pipeline.
>
> What is the correct pipeline for this procedure?
>
> Best Regards,
>
> *David Fileccia*
>
> *Senior Systems Engineer | HEMISPHERE GNSS*
>
> Office: 6860 Little Twin Road, Germantown, OH 45327, USA
>
> Corporate: 8515 E. Anderson Drive, Scottsdale, AZ 85255, USA
>
> *M:*?+1 404 579 4391
>
> dfileccia at hgnss.com <mailto:dfileccia at hgnss.com>?| www.hgnss.com 
> <http://www.hgnss.com/>
>
> *Disclaimer:*This message (including any other messages, attachments, 
> or files within) contains information that may be confidential or 
> privileged and is the property of Hemisphere GNSS, Inc. and its 
> subsidiaries (?Hemisphere?). It is intended for the person to whom it 
> is addressed. If you are not the intended recipient, you are not 
> authorized to read, copy, distribute, print, retain, or use this 
> message or any part thereof. If you receive this message in error, 
> please notify the sender immediately and delete all copies of this 
> message. Any opinions or views expressed within are solely those of 
> the author and do not necessarily represent those of Hemisphere. Thank 
> you for your cooperation.
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/02045e9b/attachment.htm>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 5199 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/02045e9b/attachment.png>

From knudsen.thomas at gmail.com  Wed Aug 31 09:51:34 2022
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 31 Aug 2022 18:51:34 +0200
Subject: [PROJ] PROJ 9.1.0RC2
In-Reply-To: <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
References: <0F0E4A33-C3C0-435D-BD35-009E3F483E69@gmail.com>
 <03D6EEF4-8F9F-430D-AEAE-BFC042FBC16D@gmail.com>
 <92efd56c2d834ed192bf8d5a2615b57d@sdfi.dk>
Message-ID: <CAH0YoEMn9Cq0X0Msf+E_QOdX0iVfeZZGR=xexTt-HzUzGAt7Vw@mail.gmail.com>

+1 /Thomas

ons. 31. aug. 2022 12.52 skrev Kristian Evers via PROJ <proj at lists.osgeo.org
>:

> PSC members,
>
>
>
> I haven?t received any complaints about PROJ 9.1.0RC2 or PROJ-data 1.11RC1
>
> so I hereby motion to promote to final releases.
>
>
>
> I?ll start with my +1.
>
>
>
> /Kristian
>
>
>
> *Fra:* PROJ <proj-bounces at lists.osgeo.org> *P? vegne af *Kristian Evers
> *Sendt:* 28. august 2022 20:03
> *Til:* PROJ <PROJ at lists.osgeo.org>
> *Emne:* [PROJ] PROJ 9.1.0RC2
>
>
>
> Thanks to the feedback from Bas a few issues with PROJ 9.1.0RC1 has been
> fixed
>
> and a RC2 is now available for testing:
>
>
>
> https://download.osgeo.org/proj/proj-9.1.0RC2.tar.gz
>
> https://download.osgeo.org/proj/proj-9.1.0RC2.zip
>
>
>
>
>
> /Kristian
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20220831/7f3655a9/attachment-0001.htm>

