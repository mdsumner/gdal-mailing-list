From tobias.wendorff at tu-dortmund.de  Fri May  4 22:45:48 2018
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Sat, 5 May 2018 07:45:48 +0200
Subject: [Proj] proj on Windows: mini howto for Cygwin
Message-ID: <10b601200f4e97c439f65271f4bbbd43.squirrel@webmail.tu-dortmund.de>

Hi there,

since "proj" uses OSGeo4W to release Windows builds, some users are
disappointed since OSGeo4W hasn't updated this library for quote a
while. Since I wanted to do some tests with latest proj, I had to
compile it for myself. Perhaps you're interested in the steps needed.

I've used a standard default "Cygwin" installation on Windows 7.
In addition to the base ones, you also need these packages:
autogen, automake, gcc-core, libtool, make

You also need to pull the release from GIT or get the tar.gz archive.
In the tar.gz, "autogen.sh" is missing. You can grep it from GIT.

After starting cygwin, you can just build it like this:
./autogen.sh
./configure (add a prefix if needed)
make (add -j for multicore building)
make install

You don't need to "make install", you can run tools like "cs2cs" from
"src/" for testing propose: "cd src" and "./cs2cs --version"

HTH
Tobias



From tobias.wendorff at tu-dortmund.de  Fri May  4 22:55:05 2018
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Sat, 5 May 2018 07:55:05 +0200
Subject: [Proj] =?iso-8859-1?q?proj=3A_NTv2_for_Baden-W=FCrttemberg?=
Message-ID: <ef21e3797b6e5640441a34472ff3eca6.squirrel@webmail.tu-dortmund.de>

Hi there,

in Germany, two further states are currently switching to UTM32 (Bavaria
and Baden-Württemberg). Both have published the NTv2 files as OpenData.

Since I had a set of GK3 coordinates (EPSG:31467) from Baden-Würtemberg,
I checked if the new version 5.0.1 of "proj" can process the data free
of error. Short answer: yes, it can. And it does it accurately.

For those who may be looking for the working parameters or want to
do some test, here is a short guide:

1. goto website to read license
https://www.lgl-bw.de/lgl-internet/opencms/de/05_Geoinformation/Liegenschaftskataster/ETRS89-UTM/

2. download and unzip the binary
https://www.lgl-bw.de/lgl-internet/web/sites/default/de/05_Geoinformation/Galerien/Dokumente/BWTA2017.zip

3. run it
./cs2cs -vvvv -f "%.3f" +proj=tmerc +lat_0=0 +lon_0=9 +k=1.000000
+x_0=3500000 +y_0=0 +ellps=bessel +units=m +nadgrids=./BWTA2017.gsb +to
+proj=utm +ellps=GRS80 +zone=32 +nadgrids=@null

4. reference data (with comparism to BETA2017):
BWTA2017: 3413441.910 5374863.910 => 413400.952 5373153.284
BETA2017: 3413441.910 5374863.910 => 413401.020 5373153.319
BETA2017: 2552401.862 5616707.524 => 340408.064 5617072.481

All fine, good work.

Oh, by the way: it does *not* work with the ascii file (BWTA2017.gsa).

Best regards,
Tobias



From marco.atzeri at gmail.com  Fri May  4 23:45:26 2018
From: marco.atzeri at gmail.com (Marco Atzeri)
Date: Sat, 5 May 2018 08:45:26 +0200
Subject: [Proj] proj on Windows: mini howto for Cygwin
In-Reply-To: <10b601200f4e97c439f65271f4bbbd43.squirrel@webmail.tu-dortmund.de>
References: <10b601200f4e97c439f65271f4bbbd43.squirrel@webmail.tu-dortmund.de>
Message-ID: <210427cf-797f-0694-8906-420f92dc6b14@gmail.com>

On 5/5/2018 7:45 AM, Tobias Wendorff wrote:
> Hi there,
> 
> since "proj" uses OSGeo4W to release Windows builds, some users are
> disappointed since OSGeo4W hasn't updated this library for quote a
> while. Since I wanted to do some tests with latest proj, I had to
> compile it for myself. Perhaps you're interested in the steps needed.
> 
> I've used a standard default "Cygwin" installation on Windows 7.
> In addition to the base ones, you also need these packages:
> autogen, automake, gcc-core, libtool, make
> 
> You also need to pull the release from GIT or get the tar.gz archive.
> In the tar.gz, "autogen.sh" is missing. You can grep it from GIT.
> 
> After starting cygwin, you can just build it like this:
> ./autogen.sh
> ./configure (add a prefix if needed)
> make (add -j for multicore building)
> make install
> 
> You don't need to "make install", you can run tools like "cs2cs" from
> "src/" for testing propose: "cd src" and "./cs2cs --version"
> 
> HTH
> Tobias
> 

Hi Tobias,
proj is already a package available in cygwin
with 5.0.1 as last release

https://sourceware.org/ml/cygwin-announce/2018-04/msg00002.html

Using proj-datumgrid-1.7.tar.gz the build passed the make check

total:  3 tests succeeded,  0 tests skipped,  0 tests failed.
total: 27 tests succeeded,  0 tests skipped,  0 tests failed.
total: 1315 tests succeeded,  0 tests skipped,  0 tests failed.
total:  4 tests succeeded,  0 tests skipped,  0 tests failed.
total: 30 tests succeeded,  0 tests skipped,  0 tests failed.
total:  9 tests succeeded,  0 tests skipped,  0 tests failed.
total: 49 tests succeeded,  0 tests skipped,  0 tests failed.
total: 23 tests succeeded,  0 tests skipped,  0 tests failed.
total: 69 tests succeeded,  0 tests skipped,  0 tests failed.
total: 177 tests succeeded,  0 tests skipped,  0 tests failed.
total: 57 tests succeeded,  0 tests skipped,  0 tests failed.
total: 69 tests succeeded,  0 tests skipped,  0 tests failed.
total: 69 tests succeeded,  0 tests skipped,  0 tests failed.
total: 60 tests succeeded,  0 tests skipped,  0 tests failed.
total: 30 tests succeeded,  0 tests skipped,  0 tests failed.
total: 30 tests succeeded,  0 tests skipped,  0 tests failed.
total: 69 tests succeeded,  0 tests skipped,  0 tests failed.
total: 36 tests succeeded,  0 tests skipped,  0 tests failed.
total: 39 tests succeeded,  0 tests skipped,  0 tests failed.
total: 39 tests succeeded,  0 tests skipped,  0 tests failed.
total: 15 tests succeeded,  0 tests skipped,  0 tests failed.
total: 15 tests succeeded,  0 tests skipped,  0 tests failed.
total: 81 tests succeeded,  0 tests skipped,  0 tests failed.
total: 105 tests succeeded,  0 tests skipped,  0 tests failed.
total: 42 tests succeeded,  0 tests skipped,  0 tests failed.


From tobias.wendorff at tu-dortmund.de  Sat May  5 00:30:32 2018
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Sat, 5 May 2018 09:30:32 +0200
Subject: [Proj] proj on Windows: mini howto for Cygwin
In-Reply-To: <210427cf-797f-0694-8906-420f92dc6b14@gmail.com>
References: <10b601200f4e97c439f65271f4bbbd43.squirrel@webmail.tu-dortmund.de>
	<210427cf-797f-0694-8906-420f92dc6b14@gmail.com>
Message-ID: <a1c6f4de7a5ba7e32b9c748635d9311f.squirrel@webmail.tu-dortmund.de>

Am Sa, 5.05.2018, 08:45 schrieb Marco Atzeri:
>
> proj is already a package available in cygwin
> with 5.0.1 as last release

Oh nice, I didn't check this. Thanks for the information.
But anyway, we can use this for building from GIT now :)



From kreve at sdfe.dk  Sun May  6 07:04:27 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 6 May 2018 14:04:27 +0000
Subject: [Proj] Schedule for PROJ 5.1
Message-ID: <2E885BB293AF0448A0181138489E9A0EAECF47DA@S000014.PROD.SITAD.DK>

All,

PROJ version 5.1 is scheduled for release on June 1st. I plan on issuing a release candidate roughly a week before that on Wednesday the 23rd of May. If you have issues you think is important to get fixed in time for 5.1 now is the time to do so.

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180506/1278b1f5/attachment.html>

From sravan.chaganti at gmail.com  Mon May  7 00:12:48 2018
From: sravan.chaganti at gmail.com (sravan kumar chaganti)
Date: Mon, 7 May 2018 12:42:48 +0530
Subject: [Proj] local inertial to GPS coordinates conversion
Message-ID: <CAPSm=55oQAFbDg6WrPj2vJHgT1wV0vDjFmho=hrbfsmN84UNZw@mail.gmail.com>

Hi,
How  I would compute the Geo/GPS coordiantes from the inertial coordinates
using the following proj string?
+proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs
is this projection string enough to compute the local inertial coordinates?

Thanks
sk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180507/95878d70/attachment.html>

From even.rouault at spatialys.com  Mon May 14 07:34:33 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 14 May 2018 16:34:33 +0200
Subject: [Proj] Coordinate system improvements - GDAL, libgeotiff,
	PROJ barn raising
Message-ID: <2219126.7vS7kixYLn@even-i700>

Hi,

A barn raising to improve coordinate system abilities in GDAL, libgeotiff, and PROJ has been 
publicly launched today. You can find more details about the proposal, its current sponsors 
and technical information at:

	https://gdalbarn.com

The hightlights of the planned work are:

* migration for CSV support data to a SQLite database shared between projects, offering 
more capabilities

* WKT2 support: increased interoperability between implementations. better ground for 
definitions, especially in areas such as axis, vertical control, and epochs

* end of WGS84 as a compulsory datum pivot, to be replaced by "late-binding" 
transformations that PROJ.5 now allows.

We are currently at 2/3 of the final funding goal. If your software and projects benefit from 
the GDAL, libgeotiff and PROJ stack, this is your chance to concretely help in its future 
improvements.

Best regards,

Howard Butler
Kristian Evers
Paul Ramsey
Even Rouault

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180514/eff6c8eb/attachment.html>

From even.rouault at spatialys.com  Tue May 15 08:27:00 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 15 May 2018 17:27:00 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
	libgeotiff, PROJ barn raising
In-Reply-To: <2219126.7vS7kixYLn@even-i700>
References: <2219126.7vS7kixYLn@even-i700>
Message-ID: <8579237.sZsBPYFo2F@even-i700>

Hi all,

Excellent news: the last third of the funding was completed yesterday, so this project will 
come true ! Thanks to all sponsors who have contributed making this possible [1]

So what does this mean for GDAL ? Obviously all the functionality mentionned below will 
become available once implemented.

Most of the initial work will be done in PROJ first, with GDAL catching it up afterwards (or in 
an experimental branch at first to follow the "eat your own dog food" principle). I'll come 
back later with more concrete implementation plans.

I guess some disruption is to be expected temporarily as functionnality will move from GDAL 
down to PROJ. This will probably mean that PROJ master will be a required dependency for 
GDAL master (and PROJ 6.0 a minimum and compulsory requirement for GDAL 2.4)

Best regards,

Even


[1]
(Anonymous)
AppGeo
Applied Imagery
Azavea
Boundless
Carto
ESRI 
GeoCue
LizardTech
LINZ
Mapbox
Mobile Geographics
Oslandia
Safe Software
Sparkgeo
Spatial Networks
Radiant Solutions
Terranodo
The Timoney Group

> Hi,
> 
> A barn raising to improve coordinate system abilities in GDAL, libgeotiff,
> and PROJ has been publicly launched today. You can find more details about
> the proposal, its current sponsors and technical information at:
> 
> 	https://gdalbarn.com
> 
> The hightlights of the planned work are:
> 
> * migration for CSV support data to a SQLite database shared between
> projects, offering more capabilities
> 
> * WKT2 support: increased interoperability between implementations. better
> ground for definitions, especially in areas such as axis, vertical control,
> and epochs
> 
> * end of WGS84 as a compulsory datum pivot, to be replaced by "late-binding"
> transformations that PROJ.5 now allows.
> 
> We are currently at 2/3 of the final funding goal. If your software and
> projects benefit from the GDAL, libgeotiff and PROJ stack, this is your
> chance to concretely help in its future improvements.
> 
> Best regards,
> 
> Howard Butler
> Kristian Evers
> Paul Ramsey
> Even Rouault


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180515/45ad0114/attachment.html>

From martin.desruisseaux at geomatys.com  Tue May 15 09:33:35 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 15 May 2018 18:33:35 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <8579237.sZsBPYFo2F@even-i700>
References: <2219126.7vS7kixYLn@even-i700> <8579237.sZsBPYFo2F@even-i700>
Message-ID: <f27ca283-06e6-c889-bba9-16ca27c6acc0@geomatys.com>

Hello Even

Is there already a plan for the testing parts? I may be interested to
participate on the creation of a test suite. The Open Geospatial
Consortium (OGC) has a GeoAPI project which already provides some
implementation-independent tests (through a standard API) for WKT 2,
EPSG and GIGS (some examples below). Those tests are run for a few years
by Apache SIS. They are in Java, but Proj.4 is already able to execute
some of them through the JNI wrappers. In addition, Python bindings are
in progress.

Of course Proj will have its own tests in C. The GeoAPI tests would be a
complement. An advantage of GeoAPI tests would be that, by running the
same set of tests on different implementations, we increase (I think)
the confidence that the WKT 2 or EPSG codes are really interpreted in
the same way by those different implementations.

Some example of tests:

http://www.geoapi.org/geoapi-conformance/apidocs/org/opengis/test/referencing/gigs/GIGS3005.html#testUTM_zone31N()
http://www.geoapi.org/geoapi-conformance/apidocs/org/opengis/test/wkt/CRSParserTest.html#testGeographic3D()

    Martin




From even.rouault at spatialys.com  Tue May 15 10:42:10 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 15 May 2018 19:42:10 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
	libgeotiff, PROJ barn raising
In-Reply-To: <f27ca283-06e6-c889-bba9-16ca27c6acc0@geomatys.com>
References: <2219126.7vS7kixYLn@even-i700> <8579237.sZsBPYFo2F@even-i700>
	<f27ca283-06e6-c889-bba9-16ca27c6acc0@geomatys.com>
Message-ID: <5494637.lyT8hx8tha@even-i700>

Hi Martin,

Thanks for the pointers and interest. I'm certainly interested in seing solid testing and 
interoperability.

> 
> Is there already a plan for the testing parts?

Not yet, but there will be definitely tests.

> I may be interested to
> participate on the creation of a test suite. The Open Geospatial
> Consortium (OGC) has a GeoAPI project which already provides some
> implementation-independent tests (through a standard API) for WKT 2,
> EPSG and GIGS (some examples below). 

Where is GIGS described ? I couldn't find much online documentation. I do see proj has now a 
test/gigs directory with tests converted to the .gie format, but I couldn't find the source 
content

> Those tests are run for a few years
> by Apache SIS. They are in Java, but Proj.4 is already able to execute
> some of them through the JNI wrappers. In addition, Python bindings are
> in progress.

Python bindings over what ?

> 
> Of course Proj will have its own tests in C. The GeoAPI tests would be a
> complement. An advantage of GeoAPI tests would be that, by running the
> same set of tests on different implementations, we increase (I think)
> the confidence that the WKT 2 or EPSG codes are really interpreted in
> the same way by those different implementations.

I guess the GeoAPI tests would be needed to be ported/adapted to whatever solution is 
adopted for proj testing. I don't really feel like using the proj JNI wrapper through Apache SIS 
would be an ideal solution : too many components aggegated, and I'm not sure if JNI wrapper 
will have all the new capabilities exposed.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180515/1297b264/attachment.html>

From kreve at sdfe.dk  Tue May 15 11:02:06 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 15 May 2018 18:02:06 +0000
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
	libgeotiff, PROJ barn raising
In-Reply-To: <5494637.lyT8hx8tha@even-i700>
References: <2219126.7vS7kixYLn@even-i700> <8579237.sZsBPYFo2F@even-i700>
	<f27ca283-06e6-c889-bba9-16ca27c6acc0@geomatys.com>
	<5494637.lyT8hx8tha@even-i700>
Message-ID: <31D93CD8-AB7E-4110-B6C1-3C88C61222BF@sdfe.dk>

Even,

You can get the GIGS documents here:

https://www.iogp.org/bookstore/product/geospatial-integrity-of-geoscience-software-part-1-gigs-guidelines/
https://www.iogp.org/bookstore/product/geospatial-integrity-of-geoscience-software-part-2-gigs-software-review/
http://www.iogp.org/bookstore/product/geospatial-integrity-of-geoscience-software-part-3-user-guide-for-the-gigs-test-dataset/

Unfortunately the test datasets comes in unstructured spreadsheets… Micah Cochran did a tremendous job of translating
that JSON for use with pyproj which I then a year or so later converted to the gie format.

There are still a number of tests that we can’t reliable pass in PROJ. I believe some, if not all, of them will be taken care
of during the work you have now committed to.

/Kristian


On 15 May 2018, at 19:42, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

Hi Martin,



Thanks for the pointers and interest. I'm certainly interested in seing solid testing and interoperability.



>
> Is there already a plan for the testing parts?



Not yet, but there will be definitely tests.



> I may be interested to
> participate on the creation of a test suite. The Open Geospatial
> Consortium (OGC) has a GeoAPI project which already provides some
> implementation-independent tests (through a standard API) for WKT 2,
> EPSG and GIGS (some examples below).



Where is GIGS described ? I couldn't find much online documentation. I do see proj has now a test/gigs directory with tests converted to the .gie format, but I couldn't find the source content



> Those tests are run for a few years
> by Apache SIS. They are in Java, but Proj.4 is already able to execute
> some of them through the JNI wrappers. In addition, Python bindings are
> in progress.



Python bindings over what ?



>
> Of course Proj will have its own tests in C. The GeoAPI tests would be a
> complement. An advantage of GeoAPI tests would be that, by running the
> same set of tests on different implementations, we increase (I think)
> the confidence that the WKT 2 or EPSG codes are really interpreted in
> the same way by those different implementations.



I guess the GeoAPI tests would be needed to be ported/adapted to whatever solution is adopted for proj testing. I don't really feel like using the proj JNI wrapper through Apache SIS would be an ideal solution : too many components aggegated, and I'm not sure if JNI wrapper will have all the new capabilities exposed.



Even



--
Spatialys - Geospatial professional services
http://www.spatialys.com<http://www.spatialys.com/>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180515/45b02ee0/attachment.html>

From martin.desruisseaux at geomatys.com  Tue May 15 13:21:35 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 15 May 2018 22:21:35 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <5494637.lyT8hx8tha@even-i700>
References: <2219126.7vS7kixYLn@even-i700> <8579237.sZsBPYFo2F@even-i700>
	<f27ca283-06e6-c889-bba9-16ca27c6acc0@geomatys.com>
	<5494637.lyT8hx8tha@even-i700>
Message-ID: <93681aad-07a0-d35c-f3a5-e530e461396c@geomatys.com>

Hello Even

Le 15/05/2018 à 19:42, Even Rouault a écrit :

> Python bindings over what ?

Over a standard API. Not any particular implementation. To make a
comparisons with databases:

 1. The C/C++ language has ODBC as a neutral API for accessing various
    databases. When accessing a database through ODBC, a C/C++ software
    does not need to care if the database is MS-Access, PostgreSQL, etc.
 2. Java has JDBC for the same purpose. When accessing a database
    through JDBC, a Java software does not need to care if the database
    is PostgreSQL, Derby, etc. JDBC is strongly inspired by ODBC, so
    both APIs are similar.
 3. Then there is JDBC-ODBC bridge. This bridge allows Java software to
    access any ODBC-compliant database as if it was a JDBC-compliant
    database. The JDBC-ODBC bridge was extensively used in early Java
    day, when few JDBC drivers were available.

Likewise, the Python binding is between Java interfaces of GeoAPI and
Python abstract classes of GeoAPI. It is not between Apache SIS or GDAL
or any particular implementation. The intent is to allow
interoperability between any Python implementation of GeoAPI and any
Java implementation of GeoAPI, in a way similar to JDBC-ODBC bridge.

But I guess this would be the topic for another mailing list.

> I guess the GeoAPI tests would be needed to be ported/adapted to
> whatever solution is adopted for proj testing. I don't really feel
> like using the proj JNI wrapper through Apache SIS would be an ideal
> solution : too many components aggegated, and I'm not sure if JNI
> wrapper will have all the new capabilities exposed.
>
My proposal is independent of Apache SIS. GeoAPI is an OGC project, and
as such is independent of any implementation - OGC is very strict about
vendor neutrality. GeoAPI is an API derived from OGC/ISO standards. For
example ISO 19111 defines an object named SC_GeographicCRS which
contains an association to another object named CS_EllipsoidCS, which
itself contains associations to axes, which have associations to units
of measurements, /etc./ GeoAPI translates this abstract model into Java
interfaces and Python abstract classes, not into implementation. In C,
it could be structures with only pointer to functions but no code;
providing the code would be up to Proj.

Having a common API allows to run the same tests with different
implementations, in the same way that ODBC/JDBC allow to use different
databases with the same code. So it would allow Proj and Apache SIS to
run the same tests - it does not establish any dependency of one to the
other.

This is not theoretical - GeoAPI implementation backed by Proj.4 through
the JNI already exists for 5~10 years at
http://www.geoapi.org/geoapi-proj4/index.html and has been used for
testing Proj.4. At least one Proj bug has been identified by this test
suite.

Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180515/95acc957/attachment.html>

From martin.desruisseaux at geomatys.com  Tue May 15 13:34:19 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 15 May 2018 22:34:19 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <31D93CD8-AB7E-4110-B6C1-3C88C61222BF@sdfe.dk>
References: <2219126.7vS7kixYLn@even-i700> <8579237.sZsBPYFo2F@even-i700>
	<f27ca283-06e6-c889-bba9-16ca27c6acc0@geomatys.com>
	<5494637.lyT8hx8tha@even-i700>
	<31D93CD8-AB7E-4110-B6C1-3C88C61222BF@sdfe.dk>
Message-ID: <a2ec4e75-7518-009b-cd5c-a2fd3fd872b0@geomatys.com>

Le 15/05/2018 à 20:02, Kristian Evers a écrit :
> Unfortunately the test datasets comes in unstructured spreadsheets…
> Micah Cochran did a tremendous job of translating
> that JSON for use with pyproj which I then a year or so later
> converted to the gie format.

For information, some of those tests were already converted in a more
structured format there:

http://www.geoapi.org/geoapi-conformance/apidocs/org/opengis/test/referencing/gigs/doc-files/

The related GeoAPI tests are basically GIGS tests converted to JUnit
statements.


> There are still a number of tests that we can’t reliable pass in PROJ.
> I believe some, if not all, of them will be taken care
> of during the work you have now committed to.

The GIGS test files have some errors, in part due to insufficient number
of digits in some values, in part because of the use of some EPSG codes
that are now deprecated. Some CRS or operations names have also changed
since GIGS has been published. Changes required for getting the test to
pass are documented here:

http://www.geoapi.org/geoapi-conformance/apidocs/org/opengis/test/referencing/gigs/doc-files/changes.html

This is unfinished work we started 6 years ago; we did not had the
resources to continue that work during the last few years.

    Martin




From even.rouault at spatialys.com  Tue May 15 14:02:12 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 15 May 2018 23:02:12 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
	libgeotiff, PROJ barn raising
In-Reply-To: <93681aad-07a0-d35c-f3a5-e530e461396c@geomatys.com>
References: <2219126.7vS7kixYLn@even-i700> <5494637.lyT8hx8tha@even-i700>
	<93681aad-07a0-d35c-f3a5-e530e461396c@geomatys.com>
Message-ID: <1960914.6Ngjhn0EcI@even-i700>

On mardi 15 mai 2018 22:21:35 CEST Martin Desruisseaux wrote:
> Hello Even
> 
> Le 15/05/2018 à 19:42, Even Rouault a écrit :
> > Python bindings over what ?
> 
> Over a standard API. Not any particular implementation.  
> Likewise, the Python binding is between Java interfaces of GeoAPI and
> Python abstract classes of GeoAPI.

OK, I think I understand better what you meant. From my C/C++ perspective, when folks talk 
about a Python binding, this is a Python wrapper over some C/C++ code.
I guess that here you are thinking to
https://github.com/opengeospatial/geoapi/tree/master/geoapi-java-python , which seems to 
be Java code calling Python classes, right ?

> It is not between Apache SIS or GDAL
> or any particular implementation. The intent is to allow
> interoperability between any Python implementation of GeoAPI and any
> Java implementation of GeoAPI, in a way similar to JDBC-ODBC bridge.

For the sake of my curiousity, are there such (public) implementations of GeoAPI in Python ?

> > I guess the GeoAPI tests would be needed to be ported/adapted to
> > whatever solution is adopted for proj testing. I don't really feel
> > like using the proj JNI wrapper through Apache SIS would be an ideal
> > solution : too many components aggegated, and I'm not sure if JNI
> > wrapper will have all the new capabilities exposed.
> 
> My proposal is independent of Apache SIS. GeoAPI is an OGC project, and
> as such is independent of any implementation - OGC is very strict about
> vendor neutrality. GeoAPI is an API derived from OGC/ISO standards. For
> example ISO 19111 defines an object named SC_GeographicCRS which
> contains an association to another object named CS_EllipsoidCS, which
> itself contains associations to axes, which have associations to units
> of measurements, /etc./ GeoAPI translates this abstract model into Java
> interfaces and Python abstract classes, not into implementation. In C,
> it could be structures with only pointer to functions but no code;
> providing the code would be up to Proj.
> 
> Having a common API allows to run the same tests with different
> implementations, in the same way that ODBC/JDBC allow to use different
> databases with the same code. So it would allow Proj and Apache SIS to
> run the same tests - it does not establish any dependency of one to the
> other.

For the CRS modelling, in the technical proposal of gdalbarn, I mentionned I will probably 
take inspiration from GeoAPI to transpose that to a C++ class hierarchy. That said, I'm not 
completely sure at that point to exactly follow the Java class hiearachy as it is pretty 
"verbose" (lots of interfaces at first sight [1]), but that needs to be studied further.

> 
> This is not theoretical - GeoAPI implementation backed by Proj.4 through
> the JNI already exists for 5~10 years at
> http://www.geoapi.org/geoapi-proj4/index.html and has been used for
> testing Proj.4. At least one Proj bug has been identified by this test
> suite.

Interesting. And besides testing, do you know if that is used in production as well ?

Even

[1] Or perhaps I was confused when also looking at the Apache SIS javadoc where there's the 
implementation of the interfaces, and the mix of interface classes + implementation classes 
give the classic headaches of dealing with Java API. OK I know I'm getting controversial here 
;-)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180515/0f0f8f0b/attachment.html>

From martin.desruisseaux at geomatys.com  Wed May 16 02:12:19 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Wed, 16 May 2018 11:12:19 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <1960914.6Ngjhn0EcI@even-i700>
References: <2219126.7vS7kixYLn@even-i700> <5494637.lyT8hx8tha@even-i700>
	<93681aad-07a0-d35c-f3a5-e530e461396c@geomatys.com>
	<1960914.6Ngjhn0EcI@even-i700>
Message-ID: <debeb381-b21c-11f2-2c10-5f00079c477d@geomatys.com>

Le 15/05/2018 à 23:02, Even Rouault a écrit :

> OK, I think I understand better what you meant. From my C/C++
> perspective, when folks talk about a Python binding, this is a Python
> wrapper over some C/C++ code. I guess that here you are thinking to
> https://github.com/opengeospatial/geoapi/tree/master/geoapi-java-python
> , which seems to be Java code calling Python classes, right ?
>
Yes, and conversely (this is bi-directional).

> For the sake of my curiousity, are there such (public) implementations
> of GeoAPI in Python ?
>
We started a wrapper around GDAL at
https://github.com/opengeospatial/geoapi/tree/master/geoapi-gdal using
the GDAL-Python bindings (yes, this result in wrappers around wrappers).
Current version handles only metadata, but raster data should come later.

The reason for this approach is that GDAL API is unique to GDAL.
Applications using GDAL can not easily switch to another library when
they need to. The purpose of a standard API is to reduce vendor lock-in.
More specifically, our goal here is to explore the possibility to allow
Open DataCube (a Python project using GDAL) to also work with Apache SIS
as an alternative to GDAL. This is desirable when one library has
features than the other does not have. A similar discussion in cloud
environment can be seen at
http://openeo.org/openeo/news/2018/03/17/poc.html

Real use case: since I have not yet been able to compile GDAL with the
"--with-java=yes" option on MacOS (maybe it is an issue on my side), I
already use all above-cited wrappers for my tests as below (where each →
is a set of wrappers; the first → is implementation-neutral and the last
→ is from GDAL project):

    (GeoAPI in Java) → (GeoAPI in Python) → (GDAL in Python) → (GDAL in C)

Of course so many indirections is not ideal, but it unblocks my
situation for now. It also illustrates the power of standard API for
using a library when no direct wrappers are available.

Note that using a standard API does not prevent the use of GDAL-specific
API when interoperability is not a goal.

> For the CRS modelling, in the technical proposal of gdalbarn, I
> mentionned I will probably take inspiration from GeoAPI to transpose
> that to a C++ class hierarchy. That said, I'm not completely sure at
> that point to exactly follow the Java class hiearachy as it is pretty
> "verbose" (lots of interfaces at first sight [1]), but that needs to
> be studied further.

GeoAPI interfaces are derived from ISO 19111, which is available from
OGC there:

    http://portal.opengeospatial.org/files/?artifact_id=39049

I suggest to use ISO 19111 as the primary source. GeoAPI interfaces may
be used for saving time (e.g. with copy-and-paste) or for filling holes
in areas not covered by ISO 19111, but in case of doubt the above
OGC/ISO document should be the authoritative reference. Note however
that ISO 19111 is going to change - its revision process is nearly
completed. For example GeodeticDatum will be renamed
GeodeticReferenceFrame. The WKT 2 format (ISO 19162) is also going to be
updated accordingly. Those changes have not yet been reflected in GeoAPI.

If you consider defining a C/C++ API derived from ISO 19111, directly or
indirectly (through current GeoAPI interfaces), I would be very
interested in including this C/C++ API in GeoAPI if you agree, and
propose them as an OGC standard. That way, there would be no need to
define JNI wrappers for Proj anymore. JNI wrappers for the C/C++ API
would be sufficient to handle any implementation of that API, with Proj
being one of them, and the test suite mentioned in my previous email
could be run on Proj with no additional effort.

> > This is not theoretical - GeoAPI implementation backed by Proj.4
> through
>
> > the JNI already exists for 5~10 years at
>
> > http://www.geoapi.org/geoapi-proj4/index.html and has been used for
>
> > testing Proj.4. At least one Proj bug has been identified by this test
>
> > suite.
>
>  
>
> Interesting. And besides testing, do you know if that is used in
> production as well ?
>
I don't know. The above-cited wrappers have never been formally
released, because GeoAPI has been dormant until last year (we restarted
the group at OGC). A variant of those wrappers are released in Apache
SIS 0.8, which allow users to use Proj or SIS own implementation
transparently.

Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180516/3a268bb1/attachment.html>

From even.rouault at spatialys.com  Wed May 16 13:20:09 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 16 May 2018 22:20:09 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
	libgeotiff, PROJ barn raising
In-Reply-To: <debeb381-b21c-11f2-2c10-5f00079c477d@geomatys.com>
References: <2219126.7vS7kixYLn@even-i700> <1960914.6Ngjhn0EcI@even-i700>
	<debeb381-b21c-11f2-2c10-5f00079c477d@geomatys.com>
Message-ID: <3279723.Lpja39NHc8@even-i700>

Hi Martin,

> Real use case: since I have not yet been able to compile GDAL with the
> "--with-java=yes" option on MacOS (maybe it is an issue on my side)

I don't have a Mac, so I cannot directly help. Probably some path to where the JDK is located 
is not appropriate set in configure.ac

But actually this --with-java option is not used at all to build the Java bindigs, bu to allow a 
GDAL driver (MDB) to be able to use a Java library under the hood...

For the Java bindings, cd to swig/java, editing java.opt if needed and 'make'

> 
> GeoAPI interfaces are derived from ISO 19111, which is available from
> OGC there:
> 
>     http://portal.opengeospatial.org/files/?artifact_id=39049
> 
> I suggest to use ISO 19111 as the primary source. GeoAPI interfaces may
> be used for saving time (e.g. with copy-and-paste) or for filling holes
> in areas not covered by ISO 19111, but in case of doubt the above
> OGC/ISO document should be the authoritative reference. Note however
> that ISO 19111 is going to change - its revision process is nearly
> completed. For example GeodeticDatum will be renamed
> GeodeticReferenceFrame. The WKT 2 format (ISO 19162) is also going to be
> updated accordingly. Those changes have not yet been reflected in GeoAPI.
> 
> If you consider defining a C/C++ API derived from ISO 19111, directly or
> indirectly (through current GeoAPI interfaces), I would be very
> interested in including this C/C++ API in GeoAPI if you agree, and
> propose them as an OGC standard. That way, there would be no need to
> define JNI wrappers for Proj anymore. JNI wrappers for the C/C++ API
> would be sufficient to handle any implementation of that API, with Proj
> being one of them, and the test suite mentioned in my previous email
> could be run on Proj with no additional effort.

Thanks for the pointers. Some interesting reading to digest. Yes, if the API can itself rely on a 
standard, that could be a good thing.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180516/2dd44900/attachment.html>

From martin.desruisseaux at geomatys.com  Fri May 18 01:25:01 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Fri, 18 May 2018 10:25:01 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <3279723.Lpja39NHc8@even-i700>
References: <2219126.7vS7kixYLn@even-i700> <1960914.6Ngjhn0EcI@even-i700>
	<debeb381-b21c-11f2-2c10-5f00079c477d@geomatys.com>
	<3279723.Lpja39NHc8@even-i700>
Message-ID: <2fbcd05b-0626-0534-3eca-e05dcf257189@geomatys.com>

Le 16/05/2018 à 22:20, Even Rouault a écrit :

> Thanks for the pointers. Some interesting reading to digest. Yes, if
> the API can itself rely on a standard, that could be a good thing.
>
In a C/C++ world, it could be:

  * State that standard API in C is not a goal (unless someone
    volunteers for defining a large set of pointer to functions).
  * Define standard C++ API as a set of classes with virtual or pure
    virtual functions.
  * Define subclasses of above C++ classes with PROJ implementation (or
    delegating to PROJ methods in C).

Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180518/b6757fc6/attachment.html>

From mateusz at loskot.net  Fri May 18 01:32:13 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Fri, 18 May 2018 10:32:13 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <2fbcd05b-0626-0534-3eca-e05dcf257189@geomatys.com>
References: <2219126.7vS7kixYLn@even-i700> <1960914.6Ngjhn0EcI@even-i700>
	<debeb381-b21c-11f2-2c10-5f00079c477d@geomatys.com>
	<3279723.Lpja39NHc8@even-i700>
	<2fbcd05b-0626-0534-3eca-e05dcf257189@geomatys.com>
Message-ID: <CABUeae_OJars1ApDFF8=cEgRiYKxoNXprg0yRroKrCoE9jG=9w@mail.gmail.com>

On 18 May 2018 at 10:25, Martin Desruisseaux
<martin.desruisseaux at geomatys.com> wrote:
> Le 16/05/2018 à 22:20, Even Rouault a écrit :
>
> Thanks for the pointers. Some interesting reading to digest. Yes, if the API
> can itself rely on a standard, that could be a good thing.
>
> In a C/C++ world, it could be:
>
> State that standard API in C is not a goal (unless someone volunteers for
> defining a large set of pointer to functions).
> Define standard C++ API as a set of classes with virtual or pure virtual
> functions.
> Define subclasses of above C++ classes with PROJ implementation (or
> delegating to PROJ methods in C).

I'd just say, the proposed geo C++ API defined according to OOP design.
That should cover the goal(s) pretty clear.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From martin.desruisseaux at geomatys.com  Fri May 18 02:48:55 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Fri, 18 May 2018 11:48:55 +0200
Subject: [Proj] [gdal-dev] Coordinate system improvements - GDAL,
 libgeotiff, PROJ barn raising
In-Reply-To: <CABUeae_OJars1ApDFF8=cEgRiYKxoNXprg0yRroKrCoE9jG=9w@mail.gmail.com>
References: <2219126.7vS7kixYLn@even-i700> <1960914.6Ngjhn0EcI@even-i700>
	<debeb381-b21c-11f2-2c10-5f00079c477d@geomatys.com>
	<3279723.Lpja39NHc8@even-i700>
	<2fbcd05b-0626-0534-3eca-e05dcf257189@geomatys.com>
	<CABUeae_OJars1ApDFF8=cEgRiYKxoNXprg0yRroKrCoE9jG=9w@mail.gmail.com>
Message-ID: <2a4b5f65-92dc-cd9a-143b-b29d56a0cda6@geomatys.com>

Le 18/05/2018 à 10:32, Mateusz Loskot a écrit :

> I'd just say, the proposed geo C++ API defined according to OOP
> design. That should cover the goal(s) pretty clear.
>
Indeed, with the nuance that in a normal OOP project there is no need to
create abstract versions of all major classes.

    Martin




From even.rouault at spatialys.com  Mon May 21 03:52:53 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 21 May 2018 12:52:53 +0200
Subject: [Proj] Use of SQLite
Message-ID: <2383241.0x1B6jF0pc@even-i700>

Hi,

As you know, as part of the improvements described at https://gdalbarn.com/,
we plan to use a SQLite database as a replacement for proj's 'epsg' and other
dictionary files.
Before concrete work is done in that direction, I'd like to make sure we can come
to a concensus on that.

There are many reasons for the SQLite choice, especially:
- unification of CRS databases: currently libgeotiff, GDAL, proj, QGIS have their own copy of
  more or less the same CRS definitions. People are often confused on where to make changes.
- libgeotiff, GDAL, proj definitions come in text files (CSV or custom proj format). Extracting a
record in those is in average linear with the size of the database, whereas log(N) performance
can be achiveed with a properly indexed database (that said: probably not a huge issue in practice
given the limited size of those databases), but the big advantage of SQLite is that it brings
naturally a powerful language to request the database.

So the idea would be to import the tables from a EPSG database dump (potentially not
in their raw form, but in a modified form to comply with current EPSG Term of Services.
We are working with IOGP on that issue) and add auxiliary tables/columns to define:
- overrides
- other CRS catalogs which we have in standalone files: ignf, esri_extra
- additional CRS definitions
- prefered CRS conversion steps/pipelines
- location of grids
- other things [1]
The exact DB layout is yet to be defined.

~~~~~~~

>From side channels, I've heard some questionning regarding the choice of SQLite. 

- It looked weird in a PostGIS context to use underneath a SQLite db, but I think that this is
just a PROJ implementation detail. One suggested idea was to have some storage plugable
abstraction layer so that PostGIS could for example decide that the CRS DB would be stored
in PostgreSQL tables. I'm not entirely convinced that this is really something worth it :
PostGIS spatial_ref_sys table cannot be directly derived from the soure tables. So such
abstraction layer seems to me to be 'premature complication'. In any case, any abstraction
would likely be constrained to rely on SQL.

- There was also some questionning about the difficulity of porting the new PROJ to languages
like JavaScript. My quick look at proj4js is that it doesn't contain currently the 'epsg' file.
Furthermore there are ports to JavaScript of sqlite like https://github.com/kripken/sql.js that
could be used if proj4js wanted to add the new capabilities (but they'd have to first port
more recent changes of proj v5, like pipelines etc)

~~~~~~~

For the sake of avoiding to have different proj flavours, I'd be inclined to make sqlite a
required dependency of proj. SQLite is available anywhere, so this shouldn't cause practical
issues (binary distributions of the GIS stack have all sqlite packaged, being a requirement of
GDAL, QGIS, spatialite, etc...). The SQLite capabilities and API effectively needed shouldn't
require imposing a version newer than 3.7.0.

~~~~~~

Performance wise, I just did a little experiment to see how fast it is to get all the elements
needed to build a WKT or proj string from the raw tables

For example, if you need to solve EPSG:32758 (WGS 84 / UTM zone 58S), you have mostly
to do the following queries:

select coord_ref_sys_kind, projection_conv_code, projection_conv_code from epsg_coordinatereferencesystem where coord_ref_sys_code = 32758;
select coord_ref_sys_kind, datum_code from epsg_coordinatereferencesystem where coord_ref_sys_code = 4326;
select * from epsg_datum where datum_code = 6326;
select * from epsg_primemeridian where prime_meridian_code = 8901;
select * from epsg_ellipsoid where ellipsoid_code = 7030;
select coord_op_method_code from epsg_coordoperation where coord_op_code = 16158;
select sort_order, cop.parameter_code, parameter_name, parameter_value from epsg_coordoperationparam cop LEFT JOIN epsg_coordoperationparamvalue copv LEFT JOIN epsg_coordoperationparamusage copu ON cop.parameter_code = copv.parameter_code AND copu.parameter_code = copv.parameter_code WHERE copu.coord_op_method_code = 9807 AND copv.coord_op_method_code = 9807 AND coord_op_code = 16158 ORDER BY sort_order;

If I put this in a script.sql file and run the following:

sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches'; # clears OS I/O caches
echo "" | sqlite3;  # warms things a bit by loading sqlite
time sqlite3 epsg.sqlite < script.sql; # cold run
time sqlite3 epsg.sqlite < script.sql; # hot run

On my PC, the cold run is 174 ms, and following ones in 3 ms


Now let's try to compare this to the current situation with

sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches'; # clears OS I/O caches
LD_LIBRARY_PATH=src/.libs PROJ_LIB=nad src/.libs/cs2cs -v;  # warms a bit loading proj bin/lib
time echo "0 0" | LD_LIBRARY_PATH=src/.libs PROJ_LIB=nad src/.libs/cs2cs +proj=longlat +datum=WGS84 +to +proj=utm +zone=58 +south;  # reference time to measure proj loading + actual computation overhead
time echo "0 0" | LD_LIBRARY_PATH=src/.libs PROJ_LIB=nad src/.libs/cs2cs +proj=longlat +datum=WGS84 +to +init=epsg:32758; # cold run
time echo "0 0" | LD_LIBRARY_PATH=src/.libs PROJ_LIB=nad src/.libs/cs2cs +proj=longlat +datum=WGS84 +to +init=epsg:32758; # hot run

The time specific of reading the 'epsg' file is obtained substracting the time with
'+init=epsg:32758;' to the time with '+proj=utm +zone=58 +south'
The cold run is 45 ms (with lots of variations, sometimes up to 300 ms) and 10 ms for a hot run.
This case is a bit the worth one in the CSV usage since 32758 is at the end of the file, so it must be fully ingested.

strace shows that in the sqlite case 100 KB of data have been read, to be compared to the 900 KB of
the 'epsg' file

Overall, the performance of hot runs with SQLite should be better. Anyway, actual uses of
proj do not require setting up thousands of CRS, so querying the DB is generally not something in
the critical path.

~~~~~~

I have another potentially controversial topic to discuss, but I'll address it in a separate thread :-)

Even

[1] This DB could also *potentially* contain the polygons of the area of validity from
the shapefiles provided by EPSG, although that would substantially increase its size (if using
original geometries, 62 MB once converted in GeoPackage format, the same as the original
shapefile), so probably not something to consider right now (or with generalized geometries)


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/d1b211bd/attachment.html>

From gdt at lexort.com  Mon May 21 07:13:14 2018
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 21 May 2018 10:13:14 -0400
Subject: [Proj] Use of SQLite
In-Reply-To: <2383241.0x1B6jF0pc@even-i700> (Even Rouault's message of "Mon,
	21 May 2018 12:52:53 +0200")
References: <2383241.0x1B6jF0pc@even-i700>
Message-ID: <smuk1rxayh1.fsf@linuxpal.mit.edu>

A few comments:

  proj needs to be portable, and that precludes shipping a sqlite3
  binary file.  Presumably the source code will contain either some text
  file that is loaded as part of the build process, and binary packages
  will have binary sqlite3 files?  Or something else?

  (Assuming source file at build time) It's unclear if you mean the
  source file to be a sqlite3 db dump, and if that will be in the VCS,
  or something else?   There seems to be merit in having a simple csv
  format in the source tree.   But perhaps sqlite3 dump is the new
  lingua franca.

  (not entirely related) My impression is that the EPSG database is
  non-Free, and I wonder if the "modified version" becomes free, or if
  this is still an issue to resolve.

  Have you thought about the minimum version?  I am unclear how many
  systems include sqlite in the base system, and at which versions.  So
  if proj were able to work with fairly old sqlite (even if you would
  recommend that people have newer), that would be good.   Basically,
  from a packaging viewpoint, while newer is usually better, it's
  preferred to have as few forcing functions in the dependency graph as
  possible.

  I don't entirely follow the notion of using some other db.  The nice
  thing about sqlite is that it's linked in and you don't need to
  configure a db username and have a process running.  Once you do that,
  things are much harder and more fragile, and there are security issues
  if the db doesn't default to listening only on localhost.   But I can
  see the idea that some might want this.   One Option might be for postgis
  to read the proj db at build time, and essentially shadow it, which
  would involve  a way to read out the db -- which would be nice to not
  be in sqlite dump language.


From gdt at lexort.com  Mon May 21 07:16:23 2018
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 21 May 2018 10:16:23 -0400
Subject: [Proj] Use of SQLite
In-Reply-To: <2383241.0x1B6jF0pc@even-i700> (Even Rouault's message of "Mon,
	21 May 2018 12:52:53 +0200")
References: <2383241.0x1B6jF0pc@even-i700>
Message-ID: <smufu2laybs.fsf@linuxpal.mit.edu>

> For the sake of avoiding to have different proj flavours, I'd be
> inclined to make sqlite a required dependency of proj. SQLite is
> available anywhere, so this shouldn't cause practical issues (binary
> distributions of the GIS stack have all sqlite packaged, being a
> requirement of GDAL, QGIS, spatialite, etc...). The SQLite
> capabilities and API effectively needed shouldn't require imposing a
> version newer than 3.7.0.

Agreed on making it mandatory - having it optional seems like a lot of
pain for no benefit.

3.7.0 sounds old enough that it's fair to tell anyone with something
older than that that they have to deal, even without understanding their
situation.


From sebastic at xs4all.nl  Mon May 21 07:22:42 2018
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 21 May 2018 16:22:42 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2383241.0x1B6jF0pc@even-i700>
References: <2383241.0x1B6jF0pc@even-i700>
Message-ID: <e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>

On 05/21/2018 12:52 PM, Even Rouault wrote:
> So the idea would be to import the tables from a EPSG database dump (potentially not
> in their raw form, but in a modified form to comply with current EPSG Term of Services.
> We are working with IOGP on that issue) and add auxiliary tables/columns to define:

The EPSG Terms of Services are still non-free, they don't allow
modification of the data. Point 6.: "The data may be used, copied and
distributed subject to the following conditions:", does not include
modification. This is why the CSV files from libgeotiff are in a
separate Debian package which in only available via the non-free repository.

Point 6. vii.: "No data that has been modified other than as permitted
in these Terms of Use shall be attributed to the EPSG Dataset." seems to
provide a loophole, that while modification is not explicitly permitted,
as long as the data is not attributed to the EPSG Dataset it may be
modified in ways other than those listed in the  "permitted
modifications of data" table.

The SQLite database and its source form must allow modification, ideally
under the same terms as PROJ, to not force proj and the entire GIS stack
into the non-free repository.

Kind Regards,

Bas


From mateusz at loskot.net  Mon May 21 07:32:17 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 21 May 2018 16:32:17 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
Message-ID: <CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>

On 21 May 2018 at 16:22, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> On 05/21/2018 12:52 PM, Even Rouault wrote:
>> So the idea would be to import the tables from a EPSG database dump (potentially not
>> in their raw form, but in a modified form to comply with current EPSG Term of Services.
>> We are working with IOGP on that issue) and add auxiliary tables/columns to define:
>
> The EPSG Terms of Services are still non-free, they don't allow
> modification of the data.

Could you point exactly which terms of http://www.epsg.org/termsofuse
forbid modification of EPSG data?

IANAL, but AFAIU the data can be extracted and modified, just modifications
other than explicitly permitted shall not be attributed to EPSG.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From even.rouault at spatialys.com  Mon May 21 07:37:17 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 21 May 2018 16:37:17 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <smuk1rxayh1.fsf@linuxpal.mit.edu>
References: <2383241.0x1B6jF0pc@even-i700> <smuk1rxayh1.fsf@linuxpal.mit.edu>
Message-ID: <36371036.2kOKg6oULH@even-i700>

Greg,

> 
>   proj needs to be portable, and that precludes shipping a sqlite3
>   binary file.  Presumably the source code will contain either some text
>   file that is loaded as part of the build process, and binary packages
>   will have binary sqlite3 files?  Or something else?
> 
>   (Assuming source file at build time) It's unclear if you mean the
>   source file to be a sqlite3 db dump, and if that will be in the VCS,
>   or something else?   There seems to be merit in having a simple csv
>   format in the source tree.   But perhaps sqlite3 dump is the new
>   lingua franca.

The idea would be to have in git one or several .sql files that are parts of the SQLite dump. 
The advantage with this text-based view is that we can easily follow changes of content 
(contrary for example to QGIS srs.db which is in binary format only in git, which makes it hard 
to know which exact changes are done)
'make' would then use the sqlite3 binary installed on the build machine to build the final 
proj_srs.db from the source .sql files, and make install would install it in proj resource files 
(the source .sql files wouldn't be installed)
libsqlite3 should be available at runtime on the target architecture of the build.

> 
>   (not entirely related) My impression is that the EPSG database is
>   non-Free, and I wonder if the "modified version" becomes free, or if
>   this is still an issue to resolve.

That's already an issue we've encountered with: libgeotiff, GDAL, proj, QGIS, PostGIS SRS 
databases are all derived, to different extent, from the EPSG database. 
>From https://lists.osgeo.org/pipermail/metacrs/2015-August/000855.html
"""
The EPSG ToS limitions don't seem to apply to derived subsets as long as
they aren't attributed to the EPSG Dataset.

In Debian we consider the derived EPSG data in proj/nad/epsg for example
to fall under the MIT license of PROJ.4, because these are subsets of
the EPSG data."""

Other actors of the GIS industry have also evaluated that they could publish data partly 
derived from the EPSG database under Apache V2:
https://github.com/Esri/projection-engine-db-doc

This discussion about licensing of data coming from the EPSG database is orthogonal to 
which storage is used.


>   Have you thought about the minimum version?  I am unclear how many
>   systems include sqlite in the base system, and at which versions.  So
>   if proj were able to work with fairly old sqlite (even if you would
>   recommend that people have newer), that would be good.   Basically,
>   from a packaging viewpoint, while newer is usually better, it's
>   preferred to have as few forcing functions in the dependency graph as
>   possible.

I mentionned sqlite 3.7 to be able to use the _v2 API of it. Actually I see that CentOS 6, which 
is probably one of the most ancient maintained Linux distribution, ships with sqlite 3.6.20 
and it already has sqlite3_open_v2() and sqlite3_prepare_v2(), so that could be a minimum 
target.

> 
>   I don't entirely follow the notion of using some other db.  The nice
>   thing about sqlite is that it's linked in and you don't need to
>   configure a db username and have a process running.  Once you do that,
>   things are much harder and more fragile, and there are security issues
>   if the db doesn't default to listening only on localhost.   But I can
>   see the idea that some might want this.   One Option might be for postgis
>   to read the proj db at build time, and essentially shadow it, which
>   would involve  a way to read out the db -- which would be nice to not
>   be in sqlite dump language.

I just mentionned this to be transparent and reflect discussions. I imagine that this 
hypothetical abstraction layer could just reuse an existing PostgreSQL connection. But as I 
said, I'd prefer we avoid this.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/0e582948/attachment.html>

From sebastic at xs4all.nl  Mon May 21 07:41:34 2018
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 21 May 2018 16:41:34 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
Message-ID: <c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>

On 05/21/2018 04:32 PM, Mateusz Loskot wrote:
> On 21 May 2018 at 16:22, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>> On 05/21/2018 12:52 PM, Even Rouault wrote:
>>> So the idea would be to import the tables from a EPSG database dump (potentially not
>>> in their raw form, but in a modified form to comply with current EPSG Term of Services.
>>> We are working with IOGP on that issue) and add auxiliary tables/columns to define:
>>
>> The EPSG Terms of Services are still non-free, they don't allow
>> modification of the data.
> 
> Could you point exactly which terms of http://www.epsg.org/termsofuse
> forbid modification of EPSG data?

You should read my message again, I quoted the relevant parts:

>> Point 6.: "The data may be used, copied and distributed subject to
>> the following conditions:", does not include modification.

Grumpy Regards,

Bas


From tobias.wendorff at tu-dortmund.de  Mon May 21 07:45:37 2018
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Mon, 21 May 2018 16:45:37 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2383241.0x1B6jF0pc@even-i700>
References: <2383241.0x1B6jF0pc@even-i700>
Message-ID: <3579497a68cf5c14be595b5bd7881a21.squirrel@webmail.tu-dortmund.de>

Am Mo, 21.05.2018, 12:52 schrieb Even Rouault:
>
> So the idea would be to import the tables from a EPSG database dump
> (potentially not in their raw form, but in a modified form to
> comply with current EPSG Term of Services.

Have a look at the documentation http://www.epsg.org/Portals/0/373-07-1.pdf

page 5 of 41:
"The EPSG Dataset is made available through three delivery mechanisms:
- The EPSG Registry, a web-based delivery platform.
- an MS Access database;
- SQL scripts which enable a user to create an Oracle, MySQL, PostgreSQL
or other relational database and populate that database with the EPSG
Dataset;"

Wouldn't it be easy to use this structure?



From even.rouault at spatialys.com  Mon May 21 07:52:39 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 21 May 2018 16:52:39 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <3579497a68cf5c14be595b5bd7881a21.squirrel@webmail.tu-dortmund.de>
References: <2383241.0x1B6jF0pc@even-i700>
	<3579497a68cf5c14be595b5bd7881a21.squirrel@webmail.tu-dortmund.de>
Message-ID: <8314402.vzVyvT6Xca@even-i700>

On lundi 21 mai 2018 16:45:37 CEST Tobias Wendorff wrote:
> Am Mo, 21.05.2018, 12:52 schrieb Even Rouault:
> > So the idea would be to import the tables from a EPSG database dump
> > (potentially not in their raw form, but in a modified form to
> > comply with current EPSG Term of Services.
> 
> Have a look at the documentation http://www.epsg.org/Portals/0/373-07-1.pdf
> 
> page 5 of 41:
> "The EPSG Dataset is made available through three delivery mechanisms:
> - The EPSG Registry, a web-based delivery platform.
> - an MS Access database;
> - SQL scripts which enable a user to create an Oracle, MySQL, PostgreSQL
> or other relational database and populate that database with the EPSG
> Dataset;"
> 
> Wouldn't it be easy to use this structure?

Easy: clearly yes. That's what I used for the performance experiment I mentionned
Compatible of requirements of free&open source redistibution: probably not

Read posts of
https://lists.osgeo.org/pipermail/metacrs/2015-August/thread.html for a rather complete 
discussion on that.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/42522d0b/attachment.html>

From mateusz at loskot.net  Mon May 21 07:56:39 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 21 May 2018 16:56:39 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
Message-ID: <CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>

On 21 May 2018 at 16:41, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> On 05/21/2018 04:32 PM, Mateusz Loskot wrote:
>> On 21 May 2018 at 16:22, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>> On 05/21/2018 12:52 PM, Even Rouault wrote:
>>>> So the idea would be to import the tables from a EPSG database dump (potentially not
>>>> in their raw form, but in a modified form to comply with current EPSG Term of Services.
>>>> We are working with IOGP on that issue) and add auxiliary tables/columns to define:
>>>
>>> The EPSG Terms of Services are still non-free, they don't allow
>>> modification of the data.
>>
>> Could you point exactly which terms of http://www.epsg.org/termsofuse
>> forbid modification of EPSG data?
>
> You should read my message again, > I quoted the relevant parts:
>
>>> Point 6.: "The data may be used, copied and distributed subject to
>>> the following conditions:", does not include modification.

I believe I have read it carefully enough.

My point was, that your conclusion above, ie. "does not include modification"
seems to be a bit premature and inaccurate for the overal picture of
what is permitted or and what is not.
Especially, that the ToU only explicitly forbids distribution for profit.

That is why I have asked if there are any additional resources to look at,
where it clearly states modifications are forbidden.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From sebastic at xs4all.nl  Mon May 21 08:12:13 2018
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 21 May 2018 17:12:13 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
Message-ID: <e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>

On 05/21/2018 04:56 PM, Mateusz Loskot wrote:
> On 21 May 2018 at 16:41, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>> On 05/21/2018 04:32 PM, Mateusz Loskot wrote:
>>> On 21 May 2018 at 16:22, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>>> On 05/21/2018 12:52 PM, Even Rouault wrote:
>>>>> So the idea would be to import the tables from a EPSG database dump (potentially not
>>>>> in their raw form, but in a modified form to comply with current EPSG Term of Services.
>>>>> We are working with IOGP on that issue) and add auxiliary tables/columns to define:
>>>>
>>>> The EPSG Terms of Services are still non-free, they don't allow
>>>> modification of the data.
>>>
>>> Could you point exactly which terms of http://www.epsg.org/termsofuse
>>> forbid modification of EPSG data?
>>
>> You should read my message again, > I quoted the relevant parts:
>>
>>>> Point 6.: "The data may be used, copied and distributed subject to
>>>> the following conditions:", does not include modification.
> 
> I believe I have read it carefully enough.
> 
> My point was, that your conclusion above, ie. "does not include modification"
> seems to be a bit premature and inaccurate for the overal picture of
> what is permitted or and what is not.
> Especially, that the ToU only explicitly forbids distribution for profit.

It forbids distribution of the EPSG Facilities for profit, not the data.
These are different things as defined in the license.

Forbidding distribution for profit is non-free too. It breaks the first
item in the OSD & DFSG:

"
 1. Free Redistribution

 The license shall not restrict any party from selling or giving away
 the software as a component of an aggregate software distribution
 containing programs from several different sources. The license shall
 not require a royalty or other fee for such sale.
"

https://opensource.org/osd-annotated
https://www.debian.org/social_contract#guidelines

> That is why I have asked if there are any additional resources to look at,
> where it clearly states modifications are forbidden.

If modification is not explicitly allowed in the license terms, it's
forbidden by copyright.

This also why the FastAC code in LASzip makes it incompatibly with the
LGPL which explicitly allows modification, see:

 https://alioth-lists.debian.net/pipermail/pkg-grass-devel/2014-August/021701.html

Kind Regards,

Bas


From mateusz at loskot.net  Mon May 21 08:19:19 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 21 May 2018 17:19:19 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
Message-ID: <CABUeae9VV0BQs7cJF6PWq4mDSgc2Hv06Fs8Kv2Mu2H2L1koM-g@mail.gmail.com>

On 21 May 2018 at 17:12, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
> On 05/21/2018 04:56 PM, Mateusz Loskot wrote:
>> On 21 May 2018 at 16:41, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>> On 05/21/2018 04:32 PM, Mateusz Loskot wrote:
>>>> On 21 May 2018 at 16:22, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>>>> On 05/21/2018 12:52 PM, Even Rouault wrote:
>>>>>> So the idea would be to import the tables from a EPSG database dump (potentially not
>>>>>> in their raw form, but in a modified form to comply with current EPSG Term of Services.
>>>>>> We are working with IOGP on that issue) and add auxiliary tables/columns to define:
>>>>>
>>>>> The EPSG Terms of Services are still non-free, they don't allow
>>>>> modification of the data.
>>>>
>>>> Could you point exactly which terms of http://www.epsg.org/termsofuse
>>>> forbid modification of EPSG data?
>>>
>>> You should read my message again, > I quoted the relevant parts:
>>>
>>>>> Point 6.: "The data may be used, copied and distributed subject to
>>>>> the following conditions:", does not include modification.
>>
>> I believe I have read it carefully enough.
>>
>> My point was, that your conclusion above, ie. "does not include modification"
>> seems to be a bit premature and inaccurate for the overal picture of
>> what is permitted or and what is not.
>> Especially, that the ToU only explicitly forbids distribution for profit.
>
> It forbids distribution of the EPSG Facilities for profit, not the data.

The ToU I'm reading states this

"EPSG Facilities" means the Registry, the EPSG Dataset means the
Registry, the EPSG Dataset
(published through the Registry or through a downloadable MS-Access
file or through a set of SQL
scripts that enable a user to create an Oracle, MySQL, PostgreSQL or
other database and populate that database with the EPSG Dataset)

AFAIU, the "EPSG Facilities" include the "EPSG Dataset", hence the data.


I'm not trying to argue, rather to understand.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From mateusz at loskot.net  Mon May 21 08:20:23 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 21 May 2018 17:20:23 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <CABUeae9VV0BQs7cJF6PWq4mDSgc2Hv06Fs8Kv2Mu2H2L1koM-g@mail.gmail.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<CABUeae9VV0BQs7cJF6PWq4mDSgc2Hv06Fs8Kv2Mu2H2L1koM-g@mail.gmail.com>
Message-ID: <CABUeae-trufwVvBoTSee1bDyP9BNTKasuzXbifE4PjoWw1YJ1Q@mail.gmail.com>

On 21 May 2018 at 17:19, Mateusz Loskot <mateusz at loskot.net> wrote:
> On 21 May 2018 at 17:12, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>> On 05/21/2018 04:56 PM, Mateusz Loskot wrote:
>>> On 21 May 2018 at 16:41, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>>> On 05/21/2018 04:32 PM, Mateusz Loskot wrote:
>>>>> On 21 May 2018 at 16:22, Sebastiaan Couwenberg <sebastic at xs4all.nl> wrote:
>>>>>> On 05/21/2018 12:52 PM, Even Rouault wrote:
>>>>>>> So the idea would be to import the tables from a EPSG database dump (potentially not
>>>>>>> in their raw form, but in a modified form to comply with current EPSG Term of Services.
>>>>>>> We are working with IOGP on that issue) and add auxiliary tables/columns to define:
>>>>>>
>>>>>> The EPSG Terms of Services are still non-free, they don't allow
>>>>>> modification of the data.
>>>>>
>>>>> Could you point exactly which terms of http://www.epsg.org/termsofuse
>>>>> forbid modification of EPSG data?
>>>>
>>>> You should read my message again, > I quoted the relevant parts:
>>>>
>>>>>> Point 6.: "The data may be used, copied and distributed subject to
>>>>>> the following conditions:", does not include modification.
>>>
>>> I believe I have read it carefully enough.
>>>
>>> My point was, that your conclusion above, ie. "does not include modification"
>>> seems to be a bit premature and inaccurate for the overal picture of
>>> what is permitted or and what is not.
>>> Especially, that the ToU only explicitly forbids distribution for profit.
>>
>> It forbids distribution of the EPSG Facilities for profit, not the data.
>
> The ToU I'm reading states this
>
> "EPSG Facilities" means the Registry, the EPSG Dataset
> means the Registry, the EPSG Dataset

^^^^^^^^^^^^^^^^^ - apology for messing this up, copy & paste failure

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From martin.desruisseaux at geomatys.com  Mon May 21 08:23:24 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 21 May 2018 17:23:24 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
Message-ID: <ff561387-c578-dfe6-4b17-dc64a328f8b6@geomatys.com>

Le 21/05/2018 à 16:56, Mateusz Loskot a écrit :

> My point was, that your conclusion above, ie. "does not include
> modification" seems to be a bit premature and inaccurate for the
> overal picture of what is permitted or and what is not.
>
It seems to me that at least, http://www.epsg.org/TermsOfUse §6vii does
not allow modifications while keeping the EPSG name. But actually we
should look at the intent. The terms of use does allow _*some*_
modifications while keeping the EPSG name, provided that those
modifications are among the modifications authorized in table 1. The
intent is to allow modifications that do not change the numerical
results of map projections. So for example replacing an /"inverse
flattening factor"/ by a /"semi-minor axis length"/ is allowed (provided
that the axis length is correctly calculated, of course) because it does
not change map projection results, but changing axis order is not. In my
understanding if we change axis order, then the code for that CRS should
not have "EPSG" in its name any more.


> Especially, that the ToU only explicitly forbids distribution for profit.
>
This is §2, which is relaxed by §6iii saying /"The data may be included
in any commercial package provided that any commerciality is based on
value added by the provider and not on a value ascribed to the EPSG
Dataset which is made available at no charge."/ My understanding is that
it means that if someone was selling a product, the main reason why a
client would want to buy that product would not be for having a copy of
EPSG data; it must rather be for other functionalities provided by the
product.

    Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/ebda38a1/attachment.html>

From martin.desruisseaux at geomatys.com  Mon May 21 08:34:11 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 21 May 2018 17:34:11 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
Message-ID: <8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>

Le 21/05/2018 à 17:12, Sebastiaan Couwenberg a écrit :

> It forbids distribution of the EPSG Facilities for profit, not the data.
>
Note that §1 in EPSG terms of use said (emphasis is mine): /"“EPSG
Facilities” means the Registry, the EPSG Dataset (published through the
Registry *or through a downloadable MS-Access file or through a set of
SQL scripts* that enable a user to create an Oracle, MySQL, PostgreSQL
or other database and populate that database with the EPSG Dataset)"/.
So to me, forbids "for profit" distribution of EPSG data too since they
are created from the downloaded SQL scripts. But as said in my previous
email, this constraints is relaxed in §6iii (but it still not fall in
the category of open source license).

    Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/45f3f8c4/attachment.html>

From howard at hobu.co  Mon May 21 08:49:37 2018
From: howard at hobu.co (Howard Butler)
Date: Mon, 21 May 2018 10:49:37 -0500
Subject: [Proj] Use of SQLite
In-Reply-To: <8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
Message-ID: <e89f88ec-a252-c390-31ee-123980e04467@hobu.co>



On 5/21/18 10:34 AM, Martin Desruisseaux wrote:
> Le 21/05/2018 à 17:12, Sebastiaan Couwenberg a écrit :
>
>> It forbids distribution of the EPSG Facilities for profit, not the data.
>>
> Note that §1 in EPSG terms of use said (emphasis is mine): /"“EPSG
> Facilities” means the Registry, the EPSG Dataset (published through the
> Registry *or through a downloadable MS-Access file or through a set of
> SQL scripts* that enable a user to create an Oracle, MySQL, PostgreSQL
> or other database and populate that database with the EPSG Dataset)"/.
> So to me, forbids "for profit" distribution of EPSG data too since they
> are created from the downloaded SQL scripts. But as said in my previous
> email, this constraints is relaxed in §6iii (but it still not fall in
> the category of open source license).
>
Does anyone from EPSG track this mailing list? It would seem the terms
of their license are causing the thing that they seek to limit -- the
changing and permutation of their database -- by people looking for
creative ways to comply while still in essence basing software on the
common definitions.

Sticky philosophical issues aside, from a practical standpoint, an
industry that wants late-binding out of the GDAL/PROJ/Friends stack must
recognize that the dictionaries are a critical piece of infrastructure
to make it all work. EPSG's licensing approach seems to me like good
intentions mixed with inexperience in open software licensing. It would
be instructive to explicitly hear what EPSG was trying to prevent with
its licensing approach rather than trying to legal wrangle their license
without the context.

Howard

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/e1e06773/attachment.sig>

From martin.desruisseaux at geomatys.com  Mon May 21 08:50:48 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 21 May 2018 17:50:48 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
Message-ID: <ebdb6c5d-016d-67b3-f16c-0c6e57ed14dc@geomatys.com>

For what it is worth, compatibility of EPSG terms of use with open
source licences has been discussed within Apache too [1]. The resolution
has been to provide EPSG data as a separated download in a "non-free"
group. In Apache SIS we provide a small list of hard-coded CRS covering
a few well-known cases [2]. If the user ask for another CRS, the error
message point to a web page with instruction for adding the EPSG database.

    Martin

[1] https://issues.apache.org/jira/browse/LEGAL-183
[2] http://sis.apache.org/apidocs/org/apache/sis/referencing/CRS.html#forCode-java.lang.String-



From ndzinn at comcast.net  Mon May 21 09:05:20 2018
From: ndzinn at comcast.net (Noel Zinn (cc))
Date: Mon, 21 May 2018 11:05:20 -0500
Subject: [Proj] Use of SQLite
In-Reply-To: <e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
References: <2383241.0x1B6jF0pc@even-i700><e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl><CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com><c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl><CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com><e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl><8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
Message-ID: <C944BAB534C34C6C8793622E434D53BF@NoelDellPC>

>> Does anyone from EPSG track this mailing list?

You can contact Roger Lott, the chair of the Geodesy subcommittee of the IOGP, which maintains the EPSG dataset, at epsg.rl at btinternet.com 

Ask Roger about licensing terms.

Noel Zinn, Principal, Hydrometronics LLC
+1-832-539-1472 (office), +1-281-221-0051 (cell)
noel.zinn at hydrometronics.com (email)
http://www.hydrometronics.com (website)

-----Original Message----- 
From: Howard Butler 
Sent: Monday, May 21, 2018 10:49 AM 
To: proj at lists.maptools.org 
Subject: Re: [Proj] Use of SQLite 



On 5/21/18 10:34 AM, Martin Desruisseaux wrote:
> Le 21/05/2018 à 17:12, Sebastiaan Couwenberg a écrit :
>
>> It forbids distribution of the EPSG Facilities for profit, not the data.
>>
> Note that §1 in EPSG terms of use said (emphasis is mine): /"“EPSG
> Facilities” means the Registry, the EPSG Dataset (published through the
> Registry *or through a downloadable MS-Access file or through a set of
> SQL scripts* that enable a user to create an Oracle, MySQL, PostgreSQL
> or other database and populate that database with the EPSG Dataset)"/.
> So to me, forbids "for profit" distribution of EPSG data too since they
> are created from the downloaded SQL scripts. But as said in my previous
> email, this constraints is relaxed in §6iii (but it still not fall in
> the category of open source license).
>
Does anyone from EPSG track this mailing list? It would seem the terms
of their license are causing the thing that they seek to limit -- the
changing and permutation of their database -- by people looking for
creative ways to comply while still in essence basing software on the
common definitions.

Sticky philosophical issues aside, from a practical standpoint, an
industry that wants late-binding out of the GDAL/PROJ/Friends stack must
recognize that the dictionaries are a critical piece of infrastructure
to make it all work. EPSG's licensing approach seems to me like good
intentions mixed with inexperience in open software licensing. It would
be instructive to explicitly hear what EPSG was trying to prevent with
its licensing approach rather than trying to legal wrangle their license
without the context.

Howard







_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/357edc9b/attachment.html>

From martin.desruisseaux at geomatys.com  Mon May 21 09:11:10 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 21 May 2018 18:11:10 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
Message-ID: <6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>

Le 21/05/2018 à 17:49, Howard Butler a écrit :

> Sticky philosophical issues aside, from a practical standpoint, an
> industry that wants late-binding out of the GDAL/PROJ/Friends stack
> must recognize that the dictionaries are a critical piece of
> infrastructure to make it all work. EPSG's licensing approach seems to
> me like good intentions mixed with inexperience in open software
> licensing. It would be instructive to explicitly hear what EPSG was
> trying to prevent with its licensing approach rather than trying to
> legal wrangle their license without the context.
>
This topic has been discussed (in a wider context - not specifically
EPSG) in the Open Geospatial Consortium (OGC). They came with the
definition of Open Standard, which is similar to Open Source Software
but not identical. The OGC API white paper [1] defines an Open Standard as:

 1. Freely and publicly available – They are available free of charge
    and unencumbered by patents and other intellectual property.
 2. Non discriminatory – They are available to anyone, any organization,
    any time, anywhere with no restrictions.
 3. No license fees - There are no charges at any time for their use.
 4. Vendor neutral - They are vendor neutral in terms of their content
    and implementation concept and do not favor any vendor over another.
 5. Data neutral – The standards are independent of any data storage
    model or format.
 6. Defined, documented, and approved by a formal, member driven
    consensus process. The consensus group remains in charge of changes
    and no single entity controls the standard.

Note that above definitions does not include the right to modify the
standard; the changes are controlled by a standard body. The reason is
that if anyone was allowed to change a standard, then it would not be a
standard any more. Note that this definition of "Open Standard" has been
done collaboratively with OSGeo [2].

So I think that IOGP sees the EPSG dataset as something closer (but not
fully compliant) to Open Standard than Open Source. I had a chance to
discuss with Roger Lott (an EPSG maintainer) during various OGC
meetings, and my understanding is that their main concern is to make
sure that everyone interpret EPSG codes in the same way. I mean that
coordinate operations performed between the same pairs of EPSG codes
shall produce the same results (up to the accuracy allowed by the
operation) with any standard-compliant software.

    Martin

[1] http://docs.opengeospatial.org/wp/16-019r4/16-019r4.html#_open_standards_and_apis
[2] https://wiki.osgeo.org/wiki/Open_Source_and_Open_Standards#Open_Standards

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/63228265/attachment.html>

From tobias.wendorff at tu-dortmund.de  Mon May 21 11:31:05 2018
From: tobias.wendorff at tu-dortmund.de (Tobias Wendorff)
Date: Mon, 21 May 2018 20:31:05 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
Message-ID: <032b4da21044ed7fb5b5f5638c209dc5.squirrel@webmail.tu-dortmund.de>

Am Mo, 21.05.2018, 18:11 schrieb Martin Desruisseaux:
> I had a chance to discuss with Roger Lott (an EPSG maintainer)
> during various OGC meetings, and my understanding is that their
> main concern is to make sure that everyone interpret EPSG codes
> in the same way. I mean that coordinate operations performed
> between the same pairs of EPSG codes shall produce the same
> results (up to the accuracy allowed by the operation) with
> any standard-compliant software.

Unfortunately, open source does not always adhere to standards.
Right now, this standard is broken in QGIS for some CRS with
same definitions. I've discussed this several times on many
mailing lists and trac, but nobody really takes care of it.



From schwehr at gmail.com  Mon May 21 11:35:07 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 21 May 2018 11:35:07 -0700
Subject: [Proj] Use of SQLite
In-Reply-To: <6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
Message-ID: <CACmBxyuJkhgO_Bt_jQAzJhHMDR0NRHQ9HCu=37mgzCx4iH-9Mw@mail.gmail.com>

Sorry I haven't chimed in sooner.  Going with SQLite is certainly fine for
my particular env.  Here is what I would like if at all possible:

* The option to have just one copy of the database per binary.  So shared
across PROJ through GDAL and PostGIS
* Be able to compile in the database within the binary and use if from
memory

My env is typically statically linked binaries with one binary per
container and no local disk.  I currently have an C data block with the
data that I write to vsimem and read from there.  My solution uses some
non-public code.  An SQLite in-memory database that the entire community
could use (if selected at build time) would be nicer.   I'm sure other
folks would appreciate the option to not need extra files.

A single copy means they are going to be consistent and have a bit smaller
memory footprint.

On Mon, May 21, 2018 at 9:11 AM, Martin Desruisseaux <
martin.desruisseaux at geomatys.com> wrote:

> Le 21/05/2018 à 17:49, Howard Butler a écrit :
>
> Sticky philosophical issues aside, from a practical standpoint, an
> industry that wants late-binding out of the GDAL/PROJ/Friends stack must
> recognize that the dictionaries are a critical piece of infrastructure to
> make it all work. EPSG's licensing approach seems to me like good
> intentions mixed with inexperience in open software licensing. It would be
> instructive to explicitly hear what EPSG was trying to prevent with its
> licensing approach rather than trying to legal wrangle their license
> without the context.
>
> This topic has been discussed (in a wider context - not specifically EPSG)
> in the Open Geospatial Consortium (OGC). They came with the definition of
> Open Standard, which is similar to Open Source Software but not identical.
> The OGC API white paper [1] defines an Open Standard as:
>
>    1. Freely and publicly available – They are available free of charge
>    and unencumbered by patents and other intellectual property.
>    2. Non discriminatory – They are available to anyone, any
>    organization, any time, anywhere with no restrictions.
>    3. No license fees - There are no charges at any time for their use.
>    4. Vendor neutral - They are vendor neutral in terms of their content
>    and implementation concept and do not favor any vendor over another.
>    5. Data neutral – The standards are independent of any data storage
>    model or format.
>    6. Defined, documented, and approved by a formal, member driven
>    consensus process. The consensus group remains in charge of changes and no
>    single entity controls the standard.
>
> Note that above definitions does not include the right to modify the
> standard; the changes are controlled by a standard body. The reason is that
> if anyone was allowed to change a standard, then it would not be a standard
> any more. Note that this definition of "Open Standard" has been done
> collaboratively with OSGeo [2].
>
> So I think that IOGP sees the EPSG dataset as something closer (but not
> fully compliant) to Open Standard than Open Source. I had a chance to
> discuss with Roger Lott (an EPSG maintainer) during various OGC meetings,
> and my understanding is that their main concern is to make sure that
> everyone interpret EPSG codes in the same way. I mean that coordinate
> operations performed between the same pairs of EPSG codes shall produce the
> same results (up to the accuracy allowed by the operation) with any
> standard-compliant software.
>
>     Martin
>
> [1] http://docs.opengeospatial.org/wp/16-019r4/16-019r4.html#_open_standards_and_apis
> [2] https://wiki.osgeo.org/wiki/Open_Source_and_Open_Standards#Open_Standards
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/3cc9899d/attachment.html>

From even.rouault at spatialys.com  Mon May 21 11:50:32 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 21 May 2018 20:50:32 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <032b4da21044ed7fb5b5f5638c209dc5.squirrel@webmail.tu-dortmund.de>
References: <2383241.0x1B6jF0pc@even-i700>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<032b4da21044ed7fb5b5f5638c209dc5.squirrel@webmail.tu-dortmund.de>
Message-ID: <3164261.kZ78RtZySE@even-i700>

On lundi 21 mai 2018 20:31:05 CEST Tobias Wendorff wrote:
> Am Mo, 21.05.2018, 18:11 schrieb Martin Desruisseaux:
> > I had a chance to discuss with Roger Lott (an EPSG maintainer)
> > during various OGC meetings, and my understanding is that their
> > main concern is to make sure that everyone interpret EPSG codes
> > in the same way. I mean that coordinate operations performed
> > between the same pairs of EPSG codes shall produce the same
> > results (up to the accuracy allowed by the operation) with
> > any standard-compliant software.
> 
> Unfortunately, open source does not always adhere to standards.
> Right now, this standard is broken in QGIS for some CRS with
> same definitions. I've discussed this several times on many
> mailing lists and trac, but nobody really takes care of it.

As far as I remember the issue is with shapefiles .prj files not being identified to the 
appropriate EPSG code (the fundamental issue is that the EPSG code is absent from .prj files). 
This is something that could probably be improved in the current QGIS.

But this is not the subject of the current discussion thread :-)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/d56ffb49/attachment.html>

From even.rouault at spatialys.com  Mon May 21 11:54:00 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 21 May 2018 20:54:00 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <CACmBxyuJkhgO_Bt_jQAzJhHMDR0NRHQ9HCu=37mgzCx4iH-9Mw@mail.gmail.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<CACmBxyuJkhgO_Bt_jQAzJhHMDR0NRHQ9HCu=37mgzCx4iH-9Mw@mail.gmail.com>
Message-ID: <1624942.SNCfqVOY9J@even-i700>

On lundi 21 mai 2018 11:35:07 CEST Kurt Schwehr wrote:
> Sorry I haven't chimed in sooner.  Going with SQLite is certainly fine for
> my particular env.  Here is what I would like if at all possible:
> 
> * The option to have just one copy of the database per binary.  So shared
> across PROJ through GDAL and PostGIS

PostGIS will still have to keep its spatial_ref_sys table since this is something required by the 
SF-SQL standard.

> * Be able to compile in the database within the binary and use if from
> memory
> 
> My env is typically statically linked binaries with one binary per
> container and no local disk.  I currently have an C data block with the
> data that I write to vsimem and read from there.  My solution uses some
> non-public code.  An SQLite in-memory database that the entire community
> could use (if selected at build time) would be nicer.   I'm sure other
> folks would appreciate the option to not need extra files.

Would you been interested in contributing code to make that possible in proj ? (once classic 
file based approach has been added)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/f56b8ceb/attachment.html>

From schwehr at gmail.com  Mon May 21 12:13:22 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 21 May 2018 12:13:22 -0700
Subject: [Proj] Use of SQLite
In-Reply-To: <1624942.SNCfqVOY9J@even-i700>
References: <2383241.0x1B6jF0pc@even-i700>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<CACmBxyuJkhgO_Bt_jQAzJhHMDR0NRHQ9HCu=37mgzCx4iH-9Mw@mail.gmail.com>
	<1624942.SNCfqVOY9J@even-i700>
Message-ID: <CACmBxyv+O2=3ZZx=T5HjvcFDjDv1uMsG-VDBCJjfL2ewssQGeQ@mail.gmail.com>

If I can figure out how to make it work with SQLite, I'd be happy to
contribute the code.  Not sure exactly how to pull it off.

On Mon, May 21, 2018 at 11:54 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> On lundi 21 mai 2018 11:35:07 CEST Kurt Schwehr wrote:
>
> > Sorry I haven't chimed in sooner. Going with SQLite is certainly fine for
>
> > my particular env. Here is what I would like if at all possible:
>
> >
>
> > * The option to have just one copy of the database per binary. So shared
>
> > across PROJ through GDAL and PostGIS
>
>
>
> PostGIS will still have to keep its spatial_ref_sys table since this is
> something required by the SF-SQL standard.
>
>
>
> > * Be able to compile in the database within the binary and use if from
>
> > memory
>
> >
>
> > My env is typically statically linked binaries with one binary per
>
> > container and no local disk. I currently have an C data block with the
>
> > data that I write to vsimem and read from there. My solution uses some
>
> > non-public code. An SQLite in-memory database that the entire community
>
> > could use (if selected at build time) would be nicer. I'm sure other
>
> > folks would appreciate the option to not need extra files.
>
>
>
> Would you been interested in contributing code to make that possible in
> proj ? (once classic file based approach has been added)
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/4b9f1e48/attachment.html>

From howard at hobu.co  Mon May 21 12:44:21 2018
From: howard at hobu.co (Howard Butler)
Date: Mon, 21 May 2018 14:44:21 -0500
Subject: [Proj] Use of SQLite
In-Reply-To: <6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
Message-ID: <8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>



On 5/21/18 11:11 AM, Martin Desruisseaux wrote:
> This topic has been discussed (in a wider context - not specifically
> EPSG) in the Open Geospatial Consortium (OGC). They came with the
> definition of Open Standard, which is similar to Open Source Software
> but not identical. The OGC API white paper [1] defines an Open Standard as:
>
>  1. Freely and publicly available – They are available free of charge
>     and unencumbered by patents and other intellectual property.
>  2. Non discriminatory – They are available to anyone, any organization,
>     any time, anywhere with no restrictions.
>  3. No license fees - There are no charges at any time for their use.
>  4. Vendor neutral - They are vendor neutral in terms of their content
>     and implementation concept and do not favor any vendor over another.
>  5. Data neutral – The standards are independent of any data storage
>     model or format.
>  6. Defined, documented, and approved by a formal, member driven
>     consensus process. The consensus group remains in charge of changes
>     and no single entity controls the standard.
>
> Note that above definitions does not include the right to modify the
> standard; the changes are controlled by a standard body. The reason is
> that if anyone was allowed to change a standard, then it would not be a
> standard any more. Note that this definition of "Open Standard" has been
> done collaboratively with OSGeo [2].
>
>

The situation at the moment is projects (Debian, GDAL, SIS) and
commercial entities (see ESRI's approach) must actively work around the
licensing of the EPSG database, and some projects such as Debian will
never be allowed to do so without a modification of the existing
licensing terms. What value does the current licensing regime provide
users of the EPSG database?

> my understanding is that their main concern is to make sure that everyone interpret EPSG codes in the same way. 

Any open source software developer knows the way to get everyone arguing
about everything *but* the thing you wish them to agree upon is to
specify it in licensing terms :) These terms are never going to prevent
software implementations from disagreeing on interpretations. If EPSG
wishes for such open interpretation enforcement, they should instead
chose a copyleft license to require everyone to provide source for their
interpretations. The database and the software(s) that implement its
transforms are compliments, but the licensing terms significantly
disrupt the relationship. To what end?

Thanks for relaying the information Martin. It is IOGP and EPSG that we
need to be communicating with here. If there are commercial
organizations who can help us explicitly make the case why the current
licensing is problematic, we would like to hear from you.

Howard

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180521/85054b88/attachment.sig>

From martin.desruisseaux at geomatys.com  Tue May 22 00:58:28 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 22 May 2018 09:58:28 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>
Message-ID: <34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>

Le 21/05/2018 à 21:44, Howard Butler a écrit :

> The situation at the moment is projects (Debian, GDAL, SIS) and
> commercial entities (see ESRI's approach) must actively work around
> the licensing of the EPSG database
>
The work around for EPSG licensing terms are the same than the
workaround for using a GPL or LGPL library in any Apache project. The
industry has already accepted this situation. Likewise for Debian, they
have a "non-free" repository.


> If EPSG wishes for such open interpretation enforcement, they should
> instead chose a copyleft license to require everyone to provide source
> for their interpretations.
>
It is not clear to me how it would have improved the current
"incompatible CRS definitions" problem. This is not only EPSG; ISO is
also considering to create a geodetic registry. The concept of "Open
Standard" is still in development, but both the Open Source Initiative
(OSI) and Free Software Foundation Europe (FSFE) are now providing
definitions [1] [2]. None of them allow to modify standards in
uncontrolled way. Wikipedia gives also more definitions [3]. It is not
unreasonable to expect the Open Source world to adapt.

    Martin

[1] https://opensource.org/osr
[2] http://fsfe.org/activities/os/def.html
[3] https://en.wikipedia.org/wiki/Open_standard



From kreve at sdfe.dk  Tue May 22 01:12:35 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 22 May 2018 08:12:35 +0000
Subject: [Proj] Use of SQLite
In-Reply-To: <34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>
	<34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>

All,

I may be missing the obvious here, but how is redistributing the (reformatted) EPSG dataset as a sqlite database different from the current situation where we redistribute the same information reformatted as a text file?

/Kristian

From sebastic at xs4all.nl  Tue May 22 01:23:38 2018
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Tue, 22 May 2018 10:23:38 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>
	<34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
Message-ID: <92c40323548a48e8994b1bfce319e0ef@xs4all.nl>

On 2018-05-22 09:58, Martin Desruisseaux wrote:
> Le 21/05/2018 à 21:44, Howard Butler a écrit :
> 
>> The situation at the moment is projects (Debian, GDAL, SIS) and
>> commercial entities (see ESRI's approach) must actively work around
>> the licensing of the EPSG database
>> 
> The work around for EPSG licensing terms are the same than the
> workaround for using a GPL or LGPL library in any Apache project. The
> industry has already accepted this situation. Likewise for Debian, they
> have a "non-free" repository.

In the case of Debian, the non-free "workaround" is very painful and 
should be avoided as much as possible.

>> If EPSG wishes for such open interpretation enforcement, they should
>> instead chose a copyleft license to require everyone to provide source
>> for their interpretations.
>> 
> It is not clear to me how it would have improved the current
> "incompatible CRS definitions" problem. This is not only EPSG; ISO is
> also considering to create a geodetic registry. The concept of "Open
> Standard" is still in development, but both the Open Source Initiative
> (OSI) and Free Software Foundation Europe (FSFE) are now providing
> definitions [1] [2]. None of them allow to modify standards in
> uncontrolled way. Wikipedia gives also more definitions [3]. It is not
> unreasonable to expect the Open Source world to adapt.

Will you be pushing the effort to get the OSD & DFSG adapted to include 
a paragraph to accept non-modification of open standards works?

That will be an immense effort, with endless discussions, flamewars and 
other unpleasantness. Those documents won't be changed easily.

The "Open Source world" contains too many different opinions to make 
change like that easy.

It will take a very long time until non-modification for open standards 
is accepted in Free Software projects.

In the mean time we'll need better options than changing foundational 
documents like the OSD & DFSG.

Kind Regards,

Bas


From sebastic at xs4all.nl  Tue May 22 01:29:58 2018
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Tue, 22 May 2018 10:29:58 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>
	<34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
	<2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
Message-ID: <cd74bafc968fdd20f9afad79be0ab58a@xs4all.nl>

On 2018-05-22 10:12, Kristian Evers wrote:
> I may be missing the obvious here, but how is redistributing the
> (reformatted) EPSG dataset as a sqlite database different from the
> current situation where we redistribute the same information
> reformatted as a text file?

Not much, it mostly depends if the data will be attributed to the EPSG 
Dataset.

If the SQLite database (and specifically its text form) stays close to 
the nad/epsg file, we can keep considering it the same as the old init 
file.

The interpretation of the EPSG terms [0] may not be correct, but it 
allows us to keep the status quo and continue with our work.

[0] http://lists.osgeo.org/pipermail/metacrs/2015-August/000855.html

Kind Regards,

Bas


From even.rouault at spatialys.com  Tue May 22 01:32:43 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 22 May 2018 10:32:43 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
References: <2383241.0x1B6jF0pc@even-i700>
	<34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
	<2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
Message-ID: <10128391.snYnItN6Jo@even-i700>

On mardi 22 mai 2018 08:12:35 CEST Kristian Evers wrote:
> All,
> 
> I may be missing the obvious here, but how is redistributing the
> (reformatted) EPSG dataset as a sqlite database different from the current
> situation where we redistribute the same information reformatted as a text
> file?

This is indeed an excellent point. This is just this discussion thread refreshes past painful 
considerations.

The situation depends on the package considered.

Currently,
- libgeotiff redistributes a full dump of the EPSG tables as .csv files. In Debian, this is 
considered as non-free as being tied to the EPSG term of services
- GDAL redistributes a partial dump of the EPSG tables as .csv files, with some rework and 
post processing. This is considered compliant with MIT
- PROJ redistributes the 'epsg' file with proj.4 strings generated by GDAL from the above 
mentionned GDAL .csv files (and similarly for PostGIS spatial_ref_sys.sql file)

For the envisionned work, we'll need to have at least the same level of information as used 
by GDAL, and also extra information like access to (part of) the content of the 
epsg_coordoperation for coord_op_type = 'transformation' entries that list the 
transformations between CRS codes, and the area of use table.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180522/b200d391/attachment.html>

From martin.desruisseaux at geomatys.com  Tue May 22 01:36:37 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 22 May 2018 10:36:37 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
References: <2383241.0x1B6jF0pc@even-i700>
	<e1dc1cf1-e5c1-0e04-7454-79cf339f2b74@xs4all.nl>
	<CABUeae9X1owMFk==9ysRkSxcmF-FRk9KjynbgQe_FJGu5t=MrQ@mail.gmail.com>
	<c9e4e6bf-4881-9e0f-bcdd-5dc9f5510c3b@xs4all.nl>
	<CABUeae_aJmVvfdezxDdiS00c4aah6JbQPCEbBDHbZe-2xD-s0w@mail.gmail.com>
	<e96c2bd8-40cf-d048-f029-c5bbaf3a8baf@xs4all.nl>
	<8476ec24-758d-b15f-9d0a-3a6f27ab2fe9@geomatys.com>
	<e89f88ec-a252-c390-31ee-123980e04467@hobu.co>
	<6ced54d4-a4d1-5204-5b67-a3c6f8cc85be@geomatys.com>
	<8c92ec52-1a16-a29c-7376-dadefd1caf5a@hobu.co>
	<34e819d8-614a-a58a-ee94-c96784e8f917@geomatys.com>
	<2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
Message-ID: <2c4808b9-c9a3-bce8-3411-353a9be3f667@geomatys.com>

Le 22/05/2018 à 10:12, Kristian Evers a écrit :

> I may be missing the obvious here, but how is redistributing the
> (reformatted) EPSG dataset as a sqlite database different from the
> current situation where we redistribute the same information
> reformatted as a text file?
>
I'm not a lawyer, but I think that the current situation does not comply
with EPSG terms of use. Just reformatting a dataset in another format is
/"derivative work"/ - it does not free us from the copyrights that apply
on the original work. Taking a subset and reformatting is allowed by
§6v, but only/"provided that numeric equivalence is achieved"/ (§6vi).
This later condition is broken by changes in axis order and units of
measurement. Other conditions that we need to comply to are §6iv
(/"Ownership of the EPSG Dataset by IOGP must be acknowledged in any
publication or transmission"/) and §6i (/"You are obliged to inform
anyone to whom you provide the EPSG Facilities of these Terms of Use."/).

    Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180522/70ac4a38/attachment.html>

From even.rouault at spatialys.com  Tue May 22 01:52:01 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 22 May 2018 10:52:01 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2c4808b9-c9a3-bce8-3411-353a9be3f667@geomatys.com>
References: <2383241.0x1B6jF0pc@even-i700>
	<2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
	<2c4808b9-c9a3-bce8-3411-353a9be3f667@geomatys.com>
Message-ID: <2073878.hyFQ7RTM9M@even-i700>

On mardi 22 mai 2018 10:36:37 CEST Martin Desruisseaux wrote:
> Le 22/05/2018 à 10:12, Kristian Evers a écrit :
> > I may be missing the obvious here, but how is redistributing the
> > (reformatted) EPSG dataset as a sqlite database different from the
> > current situation where we redistribute the same information
> > reformatted as a text file?
> 
> I'm not a lawyer, but I think that the current situation does not comply
> with EPSG terms of use. Just reformatting a dataset in another format is
> /"derivative work"/ - it does not free us from the copyrights that apply
> on the original work. Taking a subset and reformatting is allowed by
> §6v, but only/"provided that numeric equivalence is achieved"/ (§6vi).
> This later condition is broken by changes in axis order and units of
> measurement. Other conditions that we need to comply to are §6iv
> (/"Ownership of the EPSG Dataset by IOGP must be acknowledged in any
> publication or transmission"/) and §6i (/"You are obliged to inform
> anyone to whom you provide the EPSG Facilities of these Terms of Use."/).

Martin,

For the particular case you mention, the considerations about axis order and units of 
measurement are not linked to the *data* redistributed being 'corrupted', but to *software* 
implementation choices of how use it. 

Currently the EPSG derived csv files of GDAL properly capture the axis order. And the 
conversion of units for prime meridian to degree fall under the last line (line 9, Parameter 
value) of Table 1 at http://www.epsg.org/Termsofuse.aspx

The EPSG terms of use are only about the data. As raised by Howard, nothing will prevent 
software to do "bad" implementation choices (at least, fortunately, the EPSG terms of use do 
not try to extend to that point).

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180522/6ff2d0ed/attachment.html>

From martin.desruisseaux at geomatys.com  Tue May 22 02:27:44 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 22 May 2018 11:27:44 +0200
Subject: [Proj] Use of SQLite
In-Reply-To: <2073878.hyFQ7RTM9M@even-i700>
References: <2383241.0x1B6jF0pc@even-i700>
	<2E885BB293AF0448A0181138489E9A0EAED4D6E3@S000014.PROD.SITAD.DK>
	<2c4808b9-c9a3-bce8-3411-353a9be3f667@geomatys.com>
	<2073878.hyFQ7RTM9M@even-i700>
Message-ID: <aec9aef6-f2c2-69b1-969e-4edfb3aa6056@geomatys.com>

Le 22/05/2018 à 10:52, Even Rouault a écrit :

> Currently the EPSG derived csv files of GDAL properly capture the axis
> order.
>
Indeed, but this handling does not (yet) propagate to Proj4J and
Proj4JS, which take their data file from Proj.4.

> And the conversion of units for prime meridian to degree fall under
> the last line (line 9, Parameter value) of Table 1 at
> http://www.epsg.org/Termsofuse.aspx
>
This apply to map projection parameters - indeed their units have no
impact on the input/output coordinate values. But I was talking about
the axis units, which do change the coordinate values. E.g. geographic
CRS in France using Grade (before 1993), projected CRS in USA using
feet. Maybe this is handled by GDAL, but I though that we were talking
about Proj.4?

Sorry if my emails looked irritating… My desire is to try to solve a
difficulty that communities outside GDAL/Proj are facing too. Users take
Proj.4 as the reference for map projections. So when another software
produce a different result, the first user reaction is to blame the
other software, even if it was the one actually standard-compliant.

Martin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180522/fb675d0c/attachment.html>

From even.rouault at spatialys.com  Wed May 23 03:25:12 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 23 May 2018 12:25:12 +0200
Subject: [Proj] Use of C++
Message-ID: <12741547.ZcDyIibSYp@even-i700>

Hi,

As announced previously, and given that the SQLite related thread has calmed 
down (except license related discussions that aren't directly related to it), 
this is the second potentially controversial topic I wanted to discuss.

To be able to handle WKT v1 and WKT v2, relying on the
object modeling of CRS, coordinate transformations and related concepts,
detailed in the ISO 19111:2018 / OGC 18-005r1 "OGC Abstract Specification: 
Topic 2: Referencing by coordinates" seems an appropriate start.
See http://www.opengeospatial.org/standards/requests/166 (note: access to the 
draft docx requires OGC membership currently)

ISO 19111:2018 will soon replace the current ISO 19111:2007 / OGC 08-015r2 :
http://portal.opengeospatial.org/files/?artifact_id=39049

This updated specification brings new concepts, particularly the
concept of dynamic geodetic reference frames (dynamic datums) that are going 
to be fundamental for current (ITRF, WGS84) or future datums (NATRF2022 that 
will replace NAD83 in the USA, ATRF in Australia ...)
In the coming months, there will be revision of WKT 2 to catch up with this 
evolution of ISO 19111.
Future versions of the EPSG database will also later adapt to this.
ISO 19111 exposes the concepts with UML modelling. We also have GeoAPI 
( http://www.opengeospatial.org/standards/geoapi ) that
offers Java (and in progress Python) class hierarchies. In the PROJ context, 
it seems natural to opt for C++. Part of that new API will be exposed to C , 
the exact scope remains to be determined depending on the needs. To be clear, 
this would not impact the status of existing proj C API, and the already 
announced retirement plans of projects.h and proj_api.h.

On a more practical note, this is also the opportunity to reuse existing C++ 
code from GDAL (WKT tree node building).

I know that this choice of C++ could be perceived as an obstacle for 
portability of PROJ, but I don't think this is an actual concern in practice. 
Compilers most of us use today (gcc / mingw, clang, Visual Studio, ICC) are 
all C++ capable. To build current versions of gcc, you even need a C++98 
compatible compiler. For CLang, a C++11 capable one. So platforms that aren't 
legacy have all a C++ compiler available. And I believe people that will be 
ready to adopt proj 6 are unlikely to do so on legacy systems where no C++ 
compiler would be available.

Regarding which C++ flavour, I'd like to push for C++11. It brings upon C++98 
a number of useful features. A few that come to mind for the work to come 
would be the override keyword (to make sure virtual functions are properly 
deriving from their base defintions), std::unique_ptr (to simplify memory 
management).
C++11 means gcc >= 4.8, clang >= 3.3 and Visual Studio >= 2015.
We switched to C++11 requirement for GDAL for the latest GDAL 2.3.0 version, 
and up to now, I haven't heard strong complaints related to that.

As the functional scope of PROJ is extended (historically proj was a 
'projection calculator', which was enriched with early-binding datum 
transformation capabilities, reworked with all the new PROJ 5 capabilities 
paving the road for late-binding capabilities, and, with the planned work, 
becoming a kind of 'libcrs'), it seems natural to use the appropriate tools to 
implement those enhanced capabilities.

I think allowing C++ could be an opportunity to modernize other parts of the 
existing code base: like the implementation of transformations/projections as 
C++ objects instead of the current function pointer approach. But that's a bit 
beyond my current objectives. Just wanted to mention this as an opportunity.

Thoughts ?

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From jef at norbit.de  Wed May 23 04:50:53 2018
From: jef at norbit.de (=?iso-8859-1?B?SvxyZ2VuIEUu?= Fischer)
Date: Wed, 23 May 2018 13:50:53 +0200
Subject: [Proj] Use of C++
In-Reply-To: <12741547.ZcDyIibSYp@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
Message-ID: <20180523115053.akq5e4ptf7btrapi@norbit.de>

Hi Even,

On Wed, 23. May 2018 at 12:25:12 +0200, Even Rouault wrote:
> I know that this choice of C++ could be perceived as an obstacle for
> portability of PROJ, but I don't think this is an actual concern in practice. 

Internally, but with a (alternative?) C-API to the outside?   Or also C++ as
the (only) external interface?


Jürgen

-- 
Jürgen E. Fischer           norBIT GmbH             Tel. +49-4931-918175-31
Dipl.-Inf. (FH)             Rheinstraße 13          Fax. +49-4931-918175-50
Software Engineer           D-26506 Norden             http://www.norbit.de
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 827 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180523/9988687d/attachment.sig>

From even.rouault at spatialys.com  Wed May 23 05:05:54 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 23 May 2018 14:05:54 +0200
Subject: [Proj] Use of C++
In-Reply-To: <20180523115053.akq5e4ptf7btrapi@norbit.de>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
Message-ID: <11412053.NWujveKesg@even-i700>

On mercredi 23 mai 2018 13:50:53 CEST Jürgen E. Fischer wrote:
> Hi Even,
> 
> On Wed, 23. May 2018 at 12:25:12 +0200, Even Rouault wrote:
> > I know that this choice of C++ could be perceived as an obstacle for
> > portability of PROJ, but I don't think this is an actual concern in
> > practice.

> Internally, but with a (alternative?) C-API to the outside?  
> Or also C++ as
> the (only) external interface?

OK let me try to summarize my thoughts in a bullet list fashion :-)
- C++ as mostly for internal use for new code to be added, related to CRS 
modelling and WKT managment
- Part of that C++ code as possibly externally accessible
- Part of that C++ externally accessible API might also be exposed through new 
C API
- existing proj C API still available through the plans exposed in the past.

The first 3 bullets are quite similar to how GDAL handles things.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Wed May 23 09:04:11 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 23 May 2018 09:04:11 -0700
Subject: [Proj] Use of C++
In-Reply-To: <11412053.NWujveKesg@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
	<11412053.NWujveKesg@even-i700>
Message-ID: <CACmBxyuuvj_Y7cShaoarK3=kOkLQ2MT9hYu1oC=j92s5=Scsew@mail.gmail.com>

+1 from me as a user and minor contributor

Having C++ internally would allow for some nice cleanups especially with
C++11 and unique_ptr.

On Wed, May 23, 2018 at 5:05 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> On mercredi 23 mai 2018 13:50:53 CEST Jürgen E. Fischer wrote:
> > Hi Even,
> >
> > On Wed, 23. May 2018 at 12:25:12 +0200, Even Rouault wrote:
> > > I know that this choice of C++ could be perceived as an obstacle for
> > > portability of PROJ, but I don't think this is an actual concern in
> > > practice.
>
> > Internally, but with a (alternative?) C-API to the outside?
> > Or also C++ as
> > the (only) external interface?
>
> OK let me try to summarize my thoughts in a bullet list fashion :-)
> - C++ as mostly for internal use for new code to be added, related to CRS
> modelling and WKT managment
> - Part of that C++ code as possibly externally accessible
> - Part of that C++ externally accessible API might also be exposed through
> new
> C API
> - existing proj C API still available through the plans exposed in the
> past.
>
> The first 3 bullets are quite similar to how GDAL handles things.
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180523/3692fa3f/attachment.html>

From mateusz at loskot.net  Wed May 23 09:21:15 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed, 23 May 2018 18:21:15 +0200
Subject: [Proj] Use of C++
In-Reply-To: <CACmBxyuuvj_Y7cShaoarK3=kOkLQ2MT9hYu1oC=j92s5=Scsew@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
	<11412053.NWujveKesg@even-i700>
	<CACmBxyuuvj_Y7cShaoarK3=kOkLQ2MT9hYu1oC=j92s5=Scsew@mail.gmail.com>
Message-ID: <CABUeae-DLHZo_PUC9nzZ++NFiiq=2EmAANU_A_px+CbrePDJDA@mail.gmail.com>

On 23 May 2018 at 18:04, Kurt Schwehr <schwehr at gmail.com> wrote:
> +1 from me as a user and minor contributor
>
> Having C++ internally would allow for some nice cleanups especially with
> C++11 and unique_ptr.

I second that from similar position.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From knudsen.thomas at gmail.com  Wed May 23 10:11:00 2018
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Wed, 23 May 2018 19:11:00 +0200
Subject: [Proj] Use of C++
In-Reply-To: <11412053.NWujveKesg@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
	<11412053.NWujveKesg@even-i700>
Message-ID: <CAH0YoEMRRnMtsMYe++65UDha9D0CUjiHGnfCFCMoGhMaCJirPA@mail.gmail.com>

> OK let me try to summarize my thoughts in a bullet list fashion

... misread that as "thoughts in a bullshit fashion" :-)

Although I will probably never grow up to actually *love* C++,
I occasionally fall in love with the "the much smaller and cleaner
language struggling to get out" (as C++ creator Bjarne Stroustrup
stated it) .

I do, however, *love* the thought of seeing libproj supporting
WKT2, ISO19111 and friends. And if embracing C++ is the way
you can implement that fastest and most efficiently, I believe that
is what should be done.

I have spent 2 years of my life working towards a libproj more
suitable for handling general geodetic transformations, while
staying within the bounds set by C89. This really makes me want
to see a less restrictive environment for your important next step.

Also, I would love to see a more clearly defined delineation of
where PROJ stops and GDAL takes over. Obviously, this will
only happen by applying an overall architectural restructuring,
involving both C and C++ code, from both PROJ and GDAL.

I believe, as accuracy expectations grow, PROJ will have to
evolve into not only a libcrs, but into a lib-general-geodesy,
to stay relevant. Doing that without introducing sharper tools
will result in an unmaintainable mess.

So enough of my "thoughts in bullshit fashion" - just let me
summarize by saying that I believe that introducing C++
elements in libproj will be necessary to achieve the goals
set forward in the gdal barn raising, and hence not really a
decision to consider, but just an inevitable bullet to bite
(or candy to enjoy, for those so inclined).




2018-05-23 14:05 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:

> On mercredi 23 mai 2018 13:50:53 CEST Jürgen E. Fischer wrote:
> > Hi Even,
> >
> > On Wed, 23. May 2018 at 12:25:12 +0200, Even Rouault wrote:
> > > I know that this choice of C++ could be perceived as an obstacle for
> > > portability of PROJ, but I don't think this is an actual concern in
> > > practice.
>
> > Internally, but with a (alternative?) C-API to the outside?
> > Or also C++ as
> > the (only) external interface?
>
> OK let me try to summarize my thoughts in a bullet list fashion :-)
> - C++ as mostly for internal use for new code to be added, related to CRS
> modelling and WKT managment
> - Part of that C++ code as possibly externally accessible
> - Part of that C++ externally accessible API might also be exposed through
> new
> C API
> - existing proj C API still available through the plans exposed in the
> past.
>
> The first 3 bullets are quite similar to how GDAL handles things.
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180523/d97f4df5/attachment.html>

From andrew.bell.ia at gmail.com  Wed May 23 10:59:03 2018
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Wed, 23 May 2018 13:59:03 -0400
Subject: [Proj] Use of C++
In-Reply-To: <CAH0YoEMRRnMtsMYe++65UDha9D0CUjiHGnfCFCMoGhMaCJirPA@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
	<11412053.NWujveKesg@even-i700>
	<CAH0YoEMRRnMtsMYe++65UDha9D0CUjiHGnfCFCMoGhMaCJirPA@mail.gmail.com>
Message-ID: <CACJ51z2mO_U=EZdUeMjfutk1gJB3JKjLRwzRAOgX6L-C3fUAxA@mail.gmail.com>

If C++ isn't used at the API, isn't this an implementation detail as long
as it builds on systems you want to target?

That said, the issue I have with the GDAL API, which is mentioned as a
model, is that it's complicated in that it's always unclear who owns what
and what needs to be freed by the application, etc.  It creates bugs and
ambiguities.  Whether the API is C or C++, allowing the library to manage
data to the extent possible is desirable.  Looking at the proj 4 API, there
are only a few instances where you might need to look at the source code or
documentation on this (proj_list..., a few calls that take non-const char *
and a few that take char **), so not a bad starting point.  If C++ allows a
cleaner interface, I'd be a happy user, but if the same effect can be
achieved with C, that's fine as well.  If a binary-compatible C++ interface
is important, hiding the implementation behind a pointer is standard
practice and works pretty well.

On Wed, May 23, 2018 at 1:11 PM, Thomas Knudsen <knudsen.thomas at gmail.com>
wrote:

> > OK let me try to summarize my thoughts in a bullet list fashion
>
> ... misread that as "thoughts in a bullshit fashion" :-)
>
> Although I will probably never grow up to actually *love* C++,
> I occasionally fall in love with the "the much smaller and cleaner
> language struggling to get out" (as C++ creator Bjarne Stroustrup
> stated it) .
>
> I do, however, *love* the thought of seeing libproj supporting
> WKT2, ISO19111 and friends. And if embracing C++ is the way
> you can implement that fastest and most efficiently, I believe that
> is what should be done.
>
> I have spent 2 years of my life working towards a libproj more
> suitable for handling general geodetic transformations, while
> staying within the bounds set by C89. This really makes me want
> to see a less restrictive environment for your important next step.
>
> Also, I would love to see a more clearly defined delineation of
> where PROJ stops and GDAL takes over. Obviously, this will
> only happen by applying an overall architectural restructuring,
> involving both C and C++ code, from both PROJ and GDAL.
>
> I believe, as accuracy expectations grow, PROJ will have to
> evolve into not only a libcrs, but into a lib-general-geodesy,
> to stay relevant. Doing that without introducing sharper tools
> will result in an unmaintainable mess.
>
> So enough of my "thoughts in bullshit fashion" - just let me
> summarize by saying that I believe that introducing C++
> elements in libproj will be necessary to achieve the goals
> set forward in the gdal barn raising, and hence not really a
> decision to consider, but just an inevitable bullet to bite
> (or candy to enjoy, for those so inclined).
>
>
>
>
> 2018-05-23 14:05 GMT+02:00 Even Rouault <even.rouault at spatialys.com>:
>
>> On mercredi 23 mai 2018 13:50:53 CEST Jürgen E. Fischer wrote:
>> > Hi Even,
>> >
>> > On Wed, 23. May 2018 at 12:25:12 +0200, Even Rouault wrote:
>> > > I know that this choice of C++ could be perceived as an obstacle for
>> > > portability of PROJ, but I don't think this is an actual concern in
>> > > practice.
>>
>> > Internally, but with a (alternative?) C-API to the outside?
>> > Or also C++ as
>> > the (only) external interface?
>>
>> OK let me try to summarize my thoughts in a bullet list fashion :-)
>> - C++ as mostly for internal use for new code to be added, related to CRS
>> modelling and WKT managment
>> - Part of that C++ code as possibly externally accessible
>> - Part of that C++ externally accessible API might also be exposed
>> through new
>> C API
>> - existing proj C API still available through the plans exposed in the
>> past.
>>
>> The first 3 bullets are quite similar to how GDAL handles things.
>>
>> Even
>>
>> --
>> Spatialys - Geospatial professional services
>> http://www.spatialys.com
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180523/e86da4c6/attachment.html>

From even.rouault at spatialys.com  Wed May 23 11:21:19 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 23 May 2018 20:21:19 +0200
Subject: [Proj] Use of C++
In-Reply-To: <CACJ51z2mO_U=EZdUeMjfutk1gJB3JKjLRwzRAOgX6L-C3fUAxA@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<CAH0YoEMRRnMtsMYe++65UDha9D0CUjiHGnfCFCMoGhMaCJirPA@mail.gmail.com>
	<CACJ51z2mO_U=EZdUeMjfutk1gJB3JKjLRwzRAOgX6L-C3fUAxA@mail.gmail.com>
Message-ID: <2093641.k6S7XrIVF5@even-i700>

Andrew,

> If C++ isn't used at the API, isn't this an implementation detail as long
> as it builds on systems you want to target?

Indeed, but that's already an important requirement with respect to the 
current situation.

As I mentionned, I think some of the C++ code might be useful as being used 
directly as API. What exactly remains to be determined. After some 
prototyping, I'll have a better vision.

> 
> That said, the issue I have with the GDAL API, which is mentioned as a
> model, 

I didn't mean GDAL as a model for the API. Just that some code of it might be 
reused as a starting point.

> is that it's complicated in that it's always unclear who owns what
> and what needs to be freed by the application, etc.  

That's another point, but I'd hope the GDAL API doc to be generally clear on 
ownership and what destroy functions should be called. If not, ticket or pull 
requests are welcome. And the API surface of GDAL is much larger than proj, so 
hard to compare.

> If a binary-compatible C++ interface
> is important, hiding the implementation behind a pointer is standard
> practice and works pretty well.

I wouldn't aim for a binary-compatible C++ ABI between major versions of the 
library where new functionality might be added. That's just impossible/too 
complicated to achieve in practice: even if you hide private members (which 
might be a good idea to be able to deal with bugs in minor versions), any new 
virtual method breaks the C++ ABI for example.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From mateusz at loskot.net  Wed May 23 11:30:16 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed, 23 May 2018 20:30:16 +0200
Subject: [Proj] Use of C++
In-Reply-To: <CACJ51z2mO_U=EZdUeMjfutk1gJB3JKjLRwzRAOgX6L-C3fUAxA@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
	<11412053.NWujveKesg@even-i700>
	<CAH0YoEMRRnMtsMYe++65UDha9D0CUjiHGnfCFCMoGhMaCJirPA@mail.gmail.com>
	<CACJ51z2mO_U=EZdUeMjfutk1gJB3JKjLRwzRAOgX6L-C3fUAxA@mail.gmail.com>
Message-ID: <CABUeae-OQU5KzG8npBWN27fmLUVAO4YQRiuHJxczKsy_1oZDPw@mail.gmail.com>

On 23 May 2018 at 19:59, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
> That said, the issue I have with the GDAL API, which is mentioned as a
> model, is that it's complicated in that it's always unclear who owns what
> and what needs to be freed by the application, etc.  It creates bugs and
> ambiguities.  Whether the API is C or C++, allowing the library to manage
> data to the extent possible is desirable.  Looking at the proj 4 API, there
> are only a few instances where you might need to look at the source code or
> documentation on this (proj_list..., a few calls that take non-const char *
> and a few that take char **), so not a bad starting point.

Since the discussion touches the aspect if/how choice of C++ affects API
discoverability and transparency [1], I'd only point out that costness of
pointer/pointee does not necessarily indicate ownership responsibility.

All three are perfectly delete/free-able:

char const* f1() { return new char{'\a'}; }
char* const f2() { return new char{'\a'}; }
char const* const f3() { return new char{'\a'}; }

Although I'm mostly C++11+ user, I agree with Andrew clean OOP interface
can be achieved using both, C or C++.
(GTK always served me as an excellent example of clean OOP in C.)

Finally, if Even's choice is C++, I'm fairly certain Even will not go
for equivalent
of GDAL's CPL strings, lists, etc. jugglers, but stick to C++ standard library.

[1] https://accu.org/index.php/journals/1572

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From support at mnspoint.com  Wed May 23 21:37:50 2018
From: support at mnspoint.com (support at mnspoint.com)
Date: Thu, 24 May 2018 07:37:50 +0300
Subject: [Proj] local inertial to GPS coordinates conversion
In-Reply-To: <CAPSm=55oQAFbDg6WrPj2vJHgT1wV0vDjFmho=hrbfsmN84UNZw@mail.gmail.com>
References: <CAPSm=55oQAFbDg6WrPj2vJHgT1wV0vDjFmho=hrbfsmN84UNZw@mail.gmail.com>
Message-ID: <adb6cebd57d02f879e25d98a91ad1d2a@mnspoint.com>

Hello, 

I suppose you try to ask that if you can get projected coordinates in
your local mapping datum (UTM 32) from global WGS84 datum Earth angular
coordinates or backwards? - YES! that is exactly what you can do with
proj! 

Janne. 

------------------- 

sravan kumar chaganti kirjoitti 2018-05-07 10:12:

> Hi, 
> How  I would compute the Geo/GPS coordiantes from the inertial coordinates using the following proj string? 
> +proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs 
> is this projection string enough to compute the local inertial coordinates? 
> 
> Thanks 
> sk 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

-- 
MNS Support
NNS Master Navigator Software
Copyright (c) Sapper Oy
www.mnspoint.com [1]
support at mnspoint.com 

Links:
------
[1] http://www.mnspoint.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/d2b55630/attachment.html>

From support at mnspoint.com  Wed May 23 21:51:39 2018
From: support at mnspoint.com (support at mnspoint.com)
Date: Thu, 24 May 2018 07:51:39 +0300
Subject: [Proj] Use of C++
In-Reply-To: <12741547.ZcDyIibSYp@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
Message-ID: <f78ac26ff6ce265cab0e2fadea375521@mnspoint.com>

Hello,

I think that if you want to keep proj. downwards compatible with C (and 
C++) then you should keep it standard C. If you use c++ in the library 
NOT any "just C" compiler can ever compile it. So as proj. is so small 
library I would keep it standard c since nobody really cares if it is c 
or c++ - and anybody can write it to c++ or whatever in very small time 
- that is not a problem.

So to be able to use proj. in as many targets as possible, also in 
smaller devices like hand held devices or so ... I would strongly 
recommend to keep it standard c for ever! - But when that is now said 
... they most likely do everything else but what is wanted!? haha! (y)

Janne.

-------------------------------

Even Rouault kirjoitti 2018-05-23 13:25:
> Hi,
> 
> As announced previously, and given that the SQLite related thread has 
> calmed
> down (except license related discussions that aren't directly related 
> to it),
> this is the second potentially controversial topic I wanted to discuss. 
> .....


From schwehr at gmail.com  Wed May 23 22:04:05 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 23 May 2018 22:04:05 -0700
Subject: [Proj] Use of C++
In-Reply-To: <f78ac26ff6ce265cab0e2fadea375521@mnspoint.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<f78ac26ff6ce265cab0e2fadea375521@mnspoint.com>
Message-ID: <CACmBxytW7me-Wv+5rGDPCBqJ0mfLciWJ+GSh=utXtjYxiu-NqQ@mail.gmail.com>

Janne,

Can you give specific examples of these platforms that only support C that
you think PROJ should be supporting?

On Wed, May 23, 2018 at 9:51 PM, <support at mnspoint.com> wrote:

> Hello,
>
> I think that if you want to keep proj. downwards compatible with C (and
> C++) then you should keep it standard C. If you use c++ in the library
> NOT any "just C" compiler can ever compile it. So as proj. is so small
> library I would keep it standard c since nobody really cares if it is c
> or c++ - and anybody can write it to c++ or whatever in very small time
> - that is not a problem.
>
> So to be able to use proj. in as many targets as possible, also in
> smaller devices like hand held devices or so ... I would strongly
> recommend to keep it standard c for ever! - But when that is now said
> ... they most likely do everything else but what is wanted!? haha! (y)
>
> Janne.
>
> -------------------------------
>
> Even Rouault kirjoitti 2018-05-23 13:25:
> > Hi,
> >
> > As announced previously, and given that the SQLite related thread has
> > calmed
> > down (except license related discussions that aren't directly related
> > to it),
> > this is the second potentially controversial topic I wanted to discuss.
> > .....
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180523/6231e719/attachment.html>

From support at mnspoint.com  Wed May 23 23:10:12 2018
From: support at mnspoint.com (support at mnspoint.com)
Date: Thu, 24 May 2018 09:10:12 +0300
Subject: [Proj] Use of C++
In-Reply-To: <CACmBxytW7me-Wv+5rGDPCBqJ0mfLciWJ+GSh=utXtjYxiu-NqQ@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<f78ac26ff6ce265cab0e2fadea375521@mnspoint.com>
	<CACmBxytW7me-Wv+5rGDPCBqJ0mfLciWJ+GSh=utXtjYxiu-NqQ@mail.gmail.com>
Message-ID: <94da32c0dc352503f0d0d3311feba8f2@mnspoint.com>

Hello, 

there are very many platforms at the lower level MCU's which mainly use
standard c and avoid using c++ ... just to keep it simple and easy! - I
don't want to start listing them here ... they are just too many .. all
MCU's usually have assembler or c programming environment but seldom c++
is used or either easy available. 

Transition to c++ would just add problems later! I have been programming
c++ since 1995 and I still find it as a rather stupid platform that just
adds problems - to switch back to lower level if required for example -
At the moment I would rather hang the guy who invented the whole problem
(c++) at the first place! All it usually does, it makes programs harder
to follow and read and especially to port to lower level targets ..
which is often required and desired in real World projects. 

Janne. 

----------------------------------------------- 

Kurt Schwehr kirjoitti 2018-05-24 08:04:

> Janne, 
> 
> Can you give specific examples of these platforms that only support C that you think PROJ should be supporting? 
> 
> On Wed, May 23, 2018 at 9:51 PM, <support at mnspoint.com> wrote:
> 
>> Hello,
>> 
>> I think that if you want to keep proj. downwards compatible with C (and 
>> C++) then you should keep it standard C. If you use c++ in the library 
>> NOT any "just C" compiler can ever compile it. So as proj. is so small 
>> library I would keep it standard c since nobody really cares if it is c 
>> or c++ - and anybody can write it to c++ or whatever in very small time 
>> - that is not a problem.
>> 
>> So to be able to use proj. in as many targets as possible, also in 
>> smaller devices like hand held devices or so ... I would strongly 
>> recommend to keep it standard c for ever! - But when that is now said 
>> ... they most likely do everything else but what is wanted!? haha! (y)
>> 
>> Janne.
>> 
>> -------------------------------
>> 
>> Even Rouault kirjoitti 2018-05-23 13:25:
>>> Hi,
>>> 
>>> As announced previously, and given that the SQLite related thread has 
>>> calmed
>>> down (except license related discussions that aren't directly related 
>>> to it),
>>> this is the second potentially controversial topic I wanted to discuss. 
>>> .....
>> 
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj [1]
> 
> -- 
> -- 
> http://schwehr.org 
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj

-- 
MNS Support
NNS Master Navigator Software
Copyright (c) Sapper Oy
www.mnspoint.com [2]
support at mnspoint.com 

Links:
------
[1] http://lists.maptools.org/mailman/listinfo/proj
[2] http://www.mnspoint.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/6b7c4ba4/attachment.html>

From kreve at sdfe.dk  Wed May 23 23:35:11 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 06:35:11 +0000
Subject: [Proj] Use of C++
In-Reply-To: <94da32c0dc352503f0d0d3311feba8f2@mnspoint.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<f78ac26ff6ce265cab0e2fadea375521@mnspoint.com>
	<CACmBxytW7me-Wv+5rGDPCBqJ0mfLciWJ+GSh=utXtjYxiu-NqQ@mail.gmail.com>
	<94da32c0dc352503f0d0d3311feba8f2@mnspoint.com>
Message-ID: <C77DF3E6-918D-48FF-86CF-0746763A16A9@sdfe.dk>

Janne,

Your argument isn’t very strong without at least mentioning a few specific cases where C++ is not available. I have previously looked into this area and from what I could understand at the time it is mostly a myth that you can’t use C++ on embedded systems. Please elaborate so we can make an enlightened decision.

/Kristian

On 24 May 2018, at 08:10, support at mnspoint.com<mailto:support at mnspoint.com> wrote:


Hello,


there are very many platforms at the lower level MCU's which mainly use standard c and avoid using c++ ... just to keep it simple and easy! - I don't want to start listing them here ... they are just too many .. all MCU's usually have assembler or c programming environment but seldom c++ is used or either easy available

Transition to c++ would just add problems later! I have been programming c++ since 1995 and I still find it as a rather stupid platform that just adds problems - to switch back to lower level if required for example - At the moment I would rather hang the guy who invented the whole problem (c++) at the first place! All it usually does, it makes programs harder to follow and read and especially to port to lower level targets .. which is often required and desired in real World projects.

Janne.

-----------------------------------------------

Kurt Schwehr kirjoitti 2018-05-24 08:04:

Janne,

Can you give specific examples of these platforms that only support C that you think PROJ should be supporting?

On Wed, May 23, 2018 at 9:51 PM, <support at mnspoint.com<mailto:support at mnspoint.com>> wrote:
Hello,

I think that if you want to keep proj. downwards compatible with C (and
C++) then you should keep it standard C. If you use c++ in the library
NOT any "just C" compiler can ever compile it. So as proj. is so small
library I would keep it standard c since nobody really cares if it is c
or c++ - and anybody can write it to c++ or whatever in very small time
- that is not a problem.

So to be able to use proj. in as many targets as possible, also in
smaller devices like hand held devices or so ... I would strongly
recommend to keep it standard c for ever! - But when that is now said
... they most likely do everything else but what is wanted!? haha! (y)

Janne.

-------------------------------

Even Rouault kirjoitti 2018-05-23 13:25:
> Hi,
>
> As announced previously, and given that the SQLite related thread has
> calmed
> down (except license related discussions that aren't directly related
> to it),
> this is the second potentially controversial topic I wanted to discuss.
> .....
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj



--
--
http://schwehr.org<http://schwehr.org/>

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj


--
MNS Support
NNS Master Navigator Software
Copyright © Sapper Oy
www.mnspoint.com<http://www.mnspoint.com/>
support at mnspoint.com<mailto:support at mnspoint.com>
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/e799a277/attachment.html>

From schwehr at gmail.com  Wed May 23 23:36:24 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 23 May 2018 23:36:24 -0700
Subject: [Proj] Use of C++
In-Reply-To: <94da32c0dc352503f0d0d3311feba8f2@mnspoint.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<f78ac26ff6ce265cab0e2fadea375521@mnspoint.com>
	<CACmBxytW7me-Wv+5rGDPCBqJ0mfLciWJ+GSh=utXtjYxiu-NqQ@mail.gmail.com>
	<94da32c0dc352503f0d0d3311feba8f2@mnspoint.com>
Message-ID: <CACmBxys98b52XX=_Z0iHe4xGu_errJt3_j3f-4FALFRihvTY7g@mail.gmail.com>

Janne,

You mean microcontroller? https://en.wikipedia.org/wiki/MCU

How about naming just one example that you think proj must support?

Make some sort of useful concrete statement.

However, you do appreciate you making me laugh with your C++ comments
trying to troll.


On Wed, May 23, 2018 at 11:10 PM, <support at mnspoint.com> wrote:

> Hello,
>
>
> there are very many platforms at the lower level MCU's which mainly use
> standard c and avoid using c++ ... just to keep it simple and easy! - I
> don't want to start listing them here ... they are just too many .. all
> MCU's usually have assembler or c programming environment but seldom c++ is
> used or either easy available.
>
>
> Transition to c++ would just add problems later! I have been programming
> c++ since 1995 and I still find it as a rather stupid platform that just
> adds problems - to switch back to lower level if required for example - At
> the moment I would rather hang the guy who invented the whole problem (c++)
> at the first place! All it usually does, it makes programs harder to follow
> and read and especially to port to lower level targets .. which is often
> required and desired in real World projects.
>
> Janne.
>
> -----------------------------------------------
>
> Kurt Schwehr kirjoitti 2018-05-24 08:04:
>
> Janne,
>
> Can you give specific examples of these platforms that only support C that
> you think PROJ should be supporting?
>
> On Wed, May 23, 2018 at 9:51 PM, <support at mnspoint.com> wrote:
>
>> Hello,
>>
>> I think that if you want to keep proj. downwards compatible with C (and
>> C++) then you should keep it standard C. If you use c++ in the library
>> NOT any "just C" compiler can ever compile it. So as proj. is so small
>> library I would keep it standard c since nobody really cares if it is c
>> or c++ - and anybody can write it to c++ or whatever in very small time
>> - that is not a problem.
>>
>> So to be able to use proj. in as many targets as possible, also in
>> smaller devices like hand held devices or so ... I would strongly
>> recommend to keep it standard c for ever! - But when that is now said
>> ... they most likely do everything else but what is wanted!? haha! (y)
>>
>> Janne.
>>
>> -------------------------------
>>
>> Even Rouault kirjoitti 2018-05-23 13:25:
>> > Hi,
>> >
>> > As announced previously, and given that the SQLite related thread has
>> > calmed
>> > down (except license related discussions that aren't directly related
>> > to it),
>> > this is the second potentially controversial topic I wanted to discuss.
>> > .....
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
>
> --
> --
> http://schwehr.org
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
> --
> MNS Support
> NNS Master Navigator Software
> Copyright © Sapper Oy
> www.mnspoint.com
> support at mnspoint.com
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180523/5ca78638/attachment.html>

From Heiko.Klein at met.no  Thu May 24 06:39:35 2018
From: Heiko.Klein at met.no (Heiko Klein)
Date: Thu, 24 May 2018 15:39:35 +0200
Subject: [Proj] Use of C++
In-Reply-To: <CABUeae-OQU5KzG8npBWN27fmLUVAO4YQRiuHJxczKsy_1oZDPw@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<20180523115053.akq5e4ptf7btrapi@norbit.de>
	<11412053.NWujveKesg@even-i700>
	<CAH0YoEMRRnMtsMYe++65UDha9D0CUjiHGnfCFCMoGhMaCJirPA@mail.gmail.com>
	<CACJ51z2mO_U=EZdUeMjfutk1gJB3JKjLRwzRAOgX6L-C3fUAxA@mail.gmail.com>
	<CABUeae-OQU5KzG8npBWN27fmLUVAO4YQRiuHJxczKsy_1oZDPw@mail.gmail.com>
Message-ID: <c391a8b1-6662-7a2b-7e5d-3bb209614284@met.no>

Hei,

C++ as internal language is no problem for me. But when it turns to API,
C-objects and C++ objects usually don't work together, even things as
simple as strings are incompatible, so integration with other languages
(python,R,java and others) only works by using a C++->C wrapper. These
wrappers exist, but create an additional burden. If possible, I wouldn't
like to see any C++ code exposed.

Heiko

On 2018-05-23 20:30, Mateusz Loskot wrote:
> On 23 May 2018 at 19:59, Andrew Bell <andrew.bell.ia at gmail.com> wrote:
>> That said, the issue I have with the GDAL API, which is mentioned as a
>> model, is that it's complicated in that it's always unclear who owns what
>> and what needs to be freed by the application, etc.  It creates bugs and
>> ambiguities.  Whether the API is C or C++, allowing the library to manage
>> data to the extent possible is desirable.  Looking at the proj 4 API, there
>> are only a few instances where you might need to look at the source code or
>> documentation on this (proj_list..., a few calls that take non-const char *
>> and a few that take char **), so not a bad starting point.
> 
> Since the discussion touches the aspect if/how choice of C++ affects API
> discoverability and transparency [1], I'd only point out that costness of
> pointer/pointee does not necessarily indicate ownership responsibility.
> 
> All three are perfectly delete/free-able:
> 
> char const* f1() { return new char{'\a'}; }
> char* const f2() { return new char{'\a'}; }
> char const* const f3() { return new char{'\a'}; }
> 
> Although I'm mostly C++11+ user, I agree with Andrew clean OOP interface
> can be achieved using both, C or C++.
> (GTK always served me as an excellent example of clean OOP in C.)
> 
> Finally, if Even's choice is C++, I'm fairly certain Even will not go
> for equivalent
> of GDAL's CPL strings, lists, etc. jugglers, but stick to C++ standard library.
> 
> [1] https://accu.org/index.php/journals/1572
> 
> Best regards,
> 

-- 
Dr. Heiko Klein                   Norwegian Meteorological Institute
Tel. + 47 22 96 32 58             P.O. Box 43 Blindern
http://www.met.no                 0313 Oslo NORWAY


From kreve at sdfe.dk  Thu May 24 11:14:56 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 18:14:56 +0000
Subject: [Proj] PROJ 5.1.0RC1
Message-ID: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>

All,

I have prepared the first release candidate for PROJ 5.1.0. This release comes with both bug fixes as new features.
Please test it on your system and report back any problems you may find. The final release is set to release on June 1st,
assuming that a release candidate can be promoted to final version before that. If everything goes to plan, I will call the
vote for promotion on May 30.

Download the source distributions here:

http://download.osgeo.org/proj/proj-5.1.0RC1.tar.gz (http://download.osgeo.org/proj/proj-5.1.0RC1.tar.gz.md5)

http://download.osgeo.org/proj/proj-5.1.0RC1.zip (http://download.osgeo.org/proj/proj-5.1.0RC1.zip)

For a list of changes in the new release, see NEWS: https://github.com/OSGeo/proj.4/blob/master/NEWS

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/9b5e0577/attachment.html>

From even.rouault at spatialys.com  Thu May 24 11:52:30 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 24 May 2018 20:52:30 +0200
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
Message-ID: <61103473.WQXpTIZU7O@even-i700>

Kristian,

Tested against GDAL regression test suite and everything is OK

... but I think there's an issue with the libtool versioning

proj 5.0.0 was -version-info 13:0:0			==> libproj.so.13.0.0
proj 5.0.01 was  -version-info 13:1:0		==> libproj.so.13.0.1

So I think proj 5.1.0 should be -version-info 14:0:1 to generate
libproj.so.13.1.0

Currently -version-info 14:0:2 generates a libproj.so.12.2.0 which would 
appear as older than the proj 5.0.x releases.

Even


> All,
> 
> I have prepared the first release candidate for PROJ 5.1.0. This release
> comes with both bug fixes as new features. Please test it on your system
> and report back any problems you may find. The final release is set to
> release on June 1st, assuming that a release candidate can be promoted to
> final version before that. If everything goes to plan, I will call the vote
> for promotion on May 30.
> 
> Download the source distributions here:
> 
> http://download.osgeo.org/proj/proj-5.1.0RC1.tar.gz
> (http://download.osgeo.org/proj/proj-5.1.0RC1.tar.gz.md5)
> 
> http://download.osgeo.org/proj/proj-5.1.0RC1.zip
> (http://download.osgeo.org/proj/proj-5.1.0RC1.zip)
> 
> For a list of changes in the new release, see NEWS:
> https://github.com/OSGeo/proj.4/blob/master/NEWS
> 
> /Kristian


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From kreve at sdfe.dk  Thu May 24 12:06:50 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 19:06:50 +0000
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <61103473.WQXpTIZU7O@even-i700>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<61103473.WQXpTIZU7O@even-i700>
Message-ID: <EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk>

I figured that would go wrong. Frankly, I find this stuff super confusing. I followed this guide:
https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html which says
that current should be incremented if an "interface" have been added, removed or updated. Check,
we’ve added a new function to proj.h and several things are updated. When that is the case, revision
should be reset.  It also says that age should be incremented if an "interface" has been added,
which it has. At least in the way that I have interpreted the term “interface” but I guess I am wrong
in my interpretation.

Following that had me at 14:0:2. I could use a guide that explains that stuff in a simpler way :-)

I’ll issue RC2 soon with updated libtool version. Thanks for catching this.

/Kristian

On 24 May 2018, at 20:52, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

Kristian,

Tested against GDAL regression test suite and everything is OK

... but I think there's an issue with the libtool versioning

proj 5.0.0 was -version-info 13:0:0 ==> libproj.so.13.0.0
proj 5.0.01 was  -version-info 13:1:0 ==> libproj.so.13.0.1

So I think proj 5.1.0 should be -version-info 14:0:1 to generate
libproj.so.13.1.0

Currently -version-info 14:0:2 generates a libproj.so.12.2.0 which would
appear as older than the proj 5.0.x releases.

Even


All,

I have prepared the first release candidate for PROJ 5.1.0. This release
comes with both bug fixes as new features. Please test it on your system
and report back any problems you may find. The final release is set to
release on June 1st, assuming that a release candidate can be promoted to
final version before that. If everything goes to plan, I will call the vote
for promotion on May 30.

Download the source distributions here:

http://download.osgeo.org/proj/proj-5.1.0RC1.tar.gz
(http://download.osgeo.org/proj/proj-5.1.0RC1.tar.gz.md5)

http://download.osgeo.org/proj/proj-5.1.0RC1.zip
(http://download.osgeo.org/proj/proj-5.1.0RC1.zip)

For a list of changes in the new release, see NEWS:
https://github.com/OSGeo/proj.4/blob/master/NEWS

/Kristian


--
Spatialys - Geospatial professional services
http://www.spatialys.com<http://www.spatialys.com/>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/1161515f/attachment.html>

From gdt at lexort.com  Thu May 24 12:14:14 2018
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 24 May 2018 15:14:14 -0400
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk> (Kristian Evers's
	message of "Thu, 24 May 2018 18:14:56 +0000")
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
Message-ID: <smubmd4sw6x.fsf@linuxpal.mit.edu>


I had not updated the proj pkgsrc entry from 5 to 5.0.1.  I did that,
and it built ok and 'make check' passed.

I then locally updated the proj pkgsrc entry to 5.1.0RC1.  (I needed to
expect it to unpack into 5.1.0 instead of 5.1.1RC1, but that will not
affect hte release.)

I had the following problems:

* withdrawn header

The following file was no longer installed, but this is not noted in
NEWS:

-include/org_proj4_Projections.h

* test failure

gmake[3]: Entering directory '/home/n0/gdt/pkgsrc-current/pkgsrc/geography/proj/work/proj-5.1.0/test/gie'
PROJ_LIB=../../nad ../../src/gie 4D-API_cs2cs-style.gie
-------------------------------------------------------------------------------
Reading file '4D-API_cs2cs-style.gie'
-------------------------------------------------------------------------------
proj=latlong ellps=WGS84 geoidgrids=tests/test_nodata.gtx             
-------------------------------------------------------------------------------
Invalid operation definition in line no. 287:
       failed to load datum shift file (errno=failed_to_load_grid/-38)
-------------------------------------------------------------------------------
total: 28 tests succeeded,  0 tests skipped,  1 tests FAILED!
-------------------------------------------------------------------------------





This is with

DISTFILES=      ${DISTNAME}${EXTRACT_SUFX} proj-datumgrid-1.7${EXTRACT_SUFX}

and on reading NEWS I don't see that I should have done anything
different.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/9cd17a8e/attachment.sig>

From even.rouault at spatialys.com  Thu May 24 12:16:55 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 24 May 2018 21:16:55 +0200
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<61103473.WQXpTIZU7O@even-i700>
	<EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk>
Message-ID: <2119521.puBFI3npHm@even-i700>

On jeudi 24 mai 2018 19:06:50 CEST Kristian Evers wrote:
> I figured that would go wrong. Frankly, I find this stuff super confusing. I
> followed this guide:
> https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info
> .html which says that current should be incremented if an "interface" have
> been added, removed or updated. Check, we’ve added a new function to proj.h
> and several things are updated. When that is the case, revision should be
> reset.  It also says that age should be incremented if an "interface" has
> been added, which it has. At least in the way that I have interpreted the
> term “interface” but I guess I am wrong in my interpretation.
> 

Before you commit this was : -version-info 13:0:0

so current=13
     revision=0
     age=0

"current should be incremented if an "interface" have> been added, removed or 
updated" ==> current=14
"When that is the case, revision should be reset." ==> revision=0
"age should be incremented if an "interface" has been added, which it has" ==> 
age=1

hence 14:0:1


I get the same result when following sequentially the steps of HOWTO-RELEASE

Starting with 13:0:0

   - If the library source code has changed at all since the last update,
     then increment revision (c:r:a becomes c:r+1:a).

==> 13:1:0

   - If any interfaces have been added, removed, or changed since the last
     update, increment current, and set revision to 0.

==> 14:0:0

   - If any interfaces have been added since the last public release, then
     increment age.

==> 14:0:1

   - If any interfaces have been removed since the last public release, then
     set age to 0.

==> 14:0:1 again

But yes, libtool is not for humans :-)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From gdt at lexort.com  Thu May 24 12:18:23 2018
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 24 May 2018 15:18:23 -0400
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk> (Kristian Evers's
	message of "Thu, 24 May 2018 19:06:50 +0000")
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<61103473.WQXpTIZU7O@even-i700>
	<EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk>
Message-ID: <smu36ygsw00.fsf@linuxpal.mit.edu>


Kristian Evers <kreve at sdfe.dk> writes:

> Following that had me at 14:0:2. I could use a guide that explains
> that stuff in a simpler way :-)

My advice is to look at the resulting soname and make sure that's right.

Basically:

  first number increments if an interface is changed or removed.  (This
  is a big deal and should only happen via a commit that expects to do
  this, with discussion.)

  Second number increments if an interface is added (and first doesn't
  increment).

  third number increments if the code changes

Instead of letting the user manage this, libtool has a funny way of
encoding it like above, there is a interface version/age scheme where
when you increment both version and age, you are saying that there
wasn't an interface change, just an addition.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/426990de/attachment.sig>

From kreve at sdfe.dk  Thu May 24 12:23:14 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 19:23:14 +0000
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <2119521.puBFI3npHm@even-i700>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<61103473.WQXpTIZU7O@even-i700>
	<EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk>
	<2119521.puBFI3npHm@even-i700>
Message-ID: <02557D12-A28B-4410-9C0E-94EC4D6E9CF3@sdfe.dk>

Thanks, it makes a little more sense to me when described this way. I’ll update it to 14:0:1.


> On 24 May 2018, at 21:16, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> On jeudi 24 mai 2018 19:06:50 CEST Kristian Evers wrote:
>> I figured that would go wrong. Frankly, I find this stuff super confusing. I
>> followed this guide:
>> https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info
>> .html which says that current should be incremented if an "interface" have
>> been added, removed or updated. Check, we’ve added a new function to proj.h
>> and several things are updated. When that is the case, revision should be
>> reset.  It also says that age should be incremented if an "interface" has
>> been added, which it has. At least in the way that I have interpreted the
>> term “interface” but I guess I am wrong in my interpretation.
>> 
> 
> Before you commit this was : -version-info 13:0:0
> 
> so current=13
>     revision=0
>     age=0
> 
> "current should be incremented if an "interface" have> been added, removed or 
> updated" ==> current=14
> "When that is the case, revision should be reset." ==> revision=0
> "age should be incremented if an "interface" has been added, which it has" ==> 
> age=1
> 
> hence 14:0:1
> 
> 
> I get the same result when following sequentially the steps of HOWTO-RELEASE
> 
> Starting with 13:0:0
> 
>   - If the library source code has changed at all since the last update,
>     then increment revision (c:r:a becomes c:r+1:a).
> 
> ==> 13:1:0
> 
>   - If any interfaces have been added, removed, or changed since the last
>     update, increment current, and set revision to 0.
> 
> ==> 14:0:0
> 
>   - If any interfaces have been added since the last public release, then
>     increment age.
> 
> ==> 14:0:1
> 
>   - If any interfaces have been removed since the last public release, then
>     set age to 0.
> 
> ==> 14:0:1 again
> 
> But yes, libtool is not for humans :-)
> 
> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com


From even.rouault at spatialys.com  Thu May 24 12:23:51 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 24 May 2018 21:23:51 +0200
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <smubmd4sw6x.fsf@linuxpal.mit.edu>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu>
Message-ID: <3768264.F6b4pVi6Qb@even-i700>

> gmake[3]: Entering directory
> '/home/n0/gdt/pkgsrc-current/pkgsrc/geography/proj/work/proj-5.1.0/test/gie
> ' PROJ_LIB=../../nad ../../src/gie 4D-API_cs2cs-style.gie
> ----------------------------------------------------------------------------
> --- Reading file '4D-API_cs2cs-style.gie'
> ----------------------------------------------------------------------------
> --- proj=latlong ellps=WGS84 geoidgrids=tests/test_nodata.gtx

Should be fixed per
https://github.com/OSGeo/proj.4/commit/1a9e105a1aea755bd36ec1b3fc0f92e22e3c6ce4

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From sebastic at xs4all.nl  Thu May 24 12:25:10 2018
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 24 May 2018 21:25:10 +0200
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <smubmd4sw6x.fsf@linuxpal.mit.edu>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu>
Message-ID: <c64da1a2-5e09-0cb3-1032-304b968c158f@xs4all.nl>

On 05/24/2018 09:14 PM, Greg Troxel wrote:
> I had the following problems:
> 
> * withdrawn header
> 
> The following file was no longer installed, but this is not noted in
> NEWS:
> 
> -include/org_proj4_Projections.h

This was part of the old JNI wrapper, and no longer required.

> * test failure
> 
> gmake[3]: Entering directory '/home/n0/gdt/pkgsrc-current/pkgsrc/geography/proj/work/proj-5.1.0/test/gie'
> PROJ_LIB=../../nad ../../src/gie 4D-API_cs2cs-style.gie
> -------------------------------------------------------------------------------
> Reading file '4D-API_cs2cs-style.gie'
> -------------------------------------------------------------------------------
> proj=latlong ellps=WGS84 geoidgrids=tests/test_nodata.gtx             
> -------------------------------------------------------------------------------
> Invalid operation definition in line no. 287:
>        failed to load datum shift file (errno=failed_to_load_grid/-38)

This is: https://github.com/OSGeo/proj.4/issues/1019

And fixed with the attached ignore-failed_to_load_grid.patch

Kind Regards,

Bas



-------------- next part --------------
A non-text attachment was scrubbed...
Name: ignore-failed_to_load_grid.patch
Type: text/x-patch
Size: 739 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/580ed2c8/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/580ed2c8/attachment.sig>

From kreve at sdfe.dk  Thu May 24 12:26:33 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 19:26:33 +0000
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <smu36ygsw00.fsf@linuxpal.mit.edu>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<61103473.WQXpTIZU7O@even-i700>
	<EA938F54-6D4F-43E3-8959-4FB0D774AEF3@sdfe.dk>
	<smu36ygsw00.fsf@linuxpal.mit.edu>
Message-ID: <F752F480-048B-4F6A-926F-FFEFF0BA7C97@sdfe.dk>

Greg,

Good advice. I am preparing the release on a Mac and I only get a “libproj.la<http://libproj.la>”
after running make. Not sure how to produce a versionen libproj.so.x.y.z. But
that would certainly make it easier to check that things are sane.

Regarding the test failure, I’ll fix that right away. Thanks for reporting that.

/Kristian

On 24 May 2018, at 21:18, Greg Troxel <gdt at lexort.com<mailto:gdt at lexort.com>> wrote:


Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> writes:

Following that had me at 14:0:2. I could use a guide that explains
that stuff in a simpler way :-)

My advice is to look at the resulting soname and make sure that's right.

Basically:

 first number increments if an interface is changed or removed.  (This
 is a big deal and should only happen via a commit that expects to do
 this, with discussion.)

 Second number increments if an interface is added (and first doesn't
 increment).

 third number increments if the code changes

Instead of letting the user manage this, libtool has a funny way of
encoding it like above, there is a interface version/age scheme where
when you increment both version and age, you are saying that there
wasn't an interface change, just an addition.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/8485a0f5/attachment.html>

From kreve at sdfe.dk  Thu May 24 12:33:13 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 19:33:13 +0000
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <smubmd4sw6x.fsf@linuxpal.mit.edu>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu>
Message-ID: <A2445C30-7FF3-45CD-84FF-81349A205088@sdfe.dk>

Libtool version updated here: https://github.com/OSGeo/proj.4/commit/12269c2f9a49dc867c7bb4d37f23b3947911a0a3

and NEWS updated here: https://github.com/OSGeo/proj.4/commit/5b17006f3391f7c767b7b7c9cb0ef49ad3b57ffc

/Kristian

On 24 May 2018, at 21:14, Greg Troxel <gdt at lexort.com<mailto:gdt at lexort.com>> wrote:


I had not updated the proj pkgsrc entry from 5 to 5.0.1.  I did that,
and it built ok and 'make check' passed.

I then locally updated the proj pkgsrc entry to 5.1.0RC1.  (I needed to
expect it to unpack into 5.1.0 instead of 5.1.1RC1, but that will not
affect hte release.)

I had the following problems:

* withdrawn header

The following file was no longer installed, but this is not noted in
NEWS:

-include/org_proj4_Projections.h

* test failure

gmake[3]: Entering directory '/home/n0/gdt/pkgsrc-current/pkgsrc/geography/proj/work/proj-5.1.0/test/gie'
PROJ_LIB=../../nad ../../src/gie 4D-API_cs2cs-style.gie
-------------------------------------------------------------------------------
Reading file '4D-API_cs2cs-style.gie'
-------------------------------------------------------------------------------
proj=latlong ellps=WGS84 geoidgrids=tests/test_nodata.gtx
-------------------------------------------------------------------------------
Invalid operation definition in line no. 287:
      failed to load datum shift file (errno=failed_to_load_grid/-38)
-------------------------------------------------------------------------------
total: 28 tests succeeded,  0 tests skipped,  1 tests FAILED!
-------------------------------------------------------------------------------





This is with

DISTFILES=      ${DISTNAME}${EXTRACT_SUFX} proj-datumgrid-1.7${EXTRACT_SUFX}

and on reading NEWS I don't see that I should have done anything
different.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/9327c3f2/attachment.html>

From kreve at sdfe.dk  Thu May 24 12:40:18 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 19:40:18 +0000
Subject: [Proj] PROJ 5.1.0RC2
Message-ID: <EAB022BC-32FE-45F3-9581-E68E2EAC8E92@sdfe.dk>

All,

RC1 had a few issues uncovered quickly. RC2 fixes those. Get the archives here:

http://download.osgeo.org/proj/proj-5.1.0RC2.tar.gz (http://download.osgeo.org/proj/proj-5.1.0RC2.tar.gz.md5)

and

http://download.osgeo.org/proj/proj-5.1.0RC2.zip (http://download.osgeo.org/proj/proj-5.1.0RC2.zip.md5)

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/0000d806/attachment.html>

From gdt at lexort.com  Thu May 24 12:44:28 2018
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 24 May 2018 15:44:28 -0400
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <3768264.F6b4pVi6Qb@even-i700> (Even Rouault's message of "Thu,
	24 May 2018 21:23:51 +0200")
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu> <3768264.F6b4pVi6Qb@even-i700>
Message-ID: <smulgc8rg83.fsf@linuxpal.mit.edu>


Even Rouault <even.rouault at spatialys.com> writes:

>> gmake[3]: Entering directory
>> '/home/n0/gdt/pkgsrc-current/pkgsrc/geography/proj/work/proj-5.1.0/test/gie
>> ' PROJ_LIB=../../nad ../../src/gie 4D-API_cs2cs-style.gie
>> ----------------------------------------------------------------------------
>> --- Reading file '4D-API_cs2cs-style.gie'
>> ----------------------------------------------------------------------------
>> --- proj=latlong ellps=WGS84 geoidgrids=tests/test_nodata.gtx
>
> Should be fixed per
> https://github.com/OSGeo/proj.4/commit/1a9e105a1aea755bd36ec1b3fc0f92e22e3c6ce4

In RC2, make test passes.  There is still the issue of the header
withdrawn without explanation in NEWS.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/e561bad5/attachment.sig>

From kreve at sdfe.dk  Thu May 24 12:46:35 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 May 2018 19:46:35 +0000
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <smulgc8rg83.fsf@linuxpal.mit.edu>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu> <3768264.F6b4pVi6Qb@even-i700>
	<smulgc8rg83.fsf@linuxpal.mit.edu>
Message-ID: <08632C25-E86E-43C0-B847-611CCC694BC9@sdfe.dk>

I did put it in, though: https://github.com/OSGeo/proj.4/blob/9f404aee4b8832d05df38a9cab3b61299e0173ac/NEWS#L25



On 24 May 2018, at 21:44, Greg Troxel <gdt at lexort.com<mailto:gdt at lexort.com>> wrote:


Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> writes:

gmake[3]: Entering directory
'/home/n0/gdt/pkgsrc-current/pkgsrc/geography/proj/work/proj-5.1.0/test/gie
' PROJ_LIB=../../nad ../../src/gie 4D-API_cs2cs-style.gie
----------------------------------------------------------------------------
--- Reading file '4D-API_cs2cs-style.gie'
----------------------------------------------------------------------------
--- proj=latlong ellps=WGS84 geoidgrids=tests/test_nodata.gtx

Should be fixed per
https://github.com/OSGeo/proj.4/commit/1a9e105a1aea755bd36ec1b3fc0f92e22e3c6ce4

In RC2, make test passes.  There is still the issue of the header
withdrawn without explanation in NEWS.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/4d8d9877/attachment.html>

From martin.desruisseaux at geomatys.com  Thu May 24 12:58:39 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Thu, 24 May 2018 21:58:39 +0200
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <c64da1a2-5e09-0cb3-1032-304b968c158f@xs4all.nl>
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu>
	<c64da1a2-5e09-0cb3-1032-304b968c158f@xs4all.nl>
Message-ID: <d48d953b-51aa-0a3f-5097-cdcb1901ba32@geomatys.com>

Le 24/05/2018 à 21:25, Sebastiaan Couwenberg a écrit :
> On 05/24/2018 09:14 PM, Greg Troxel wrote:
>> The following file was no longer installed, but this is not noted in NEWS:
>> -include/org_proj4_Projections.h
> This was part of the old JNI wrapper, and no longer required.

Actually the code implementing org_proj4_Projections.h has been removed
4 years ago, in Proj 4.9.0. That code had memory leaks, which were fixed
by new bindings (essentially the same than today - only upgraded for
Java 9). I guess that the header stayed there by mistake.

    Martin




From gdt at lexort.com  Thu May 24 14:19:04 2018
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 24 May 2018 17:19:04 -0400
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <d48d953b-51aa-0a3f-5097-cdcb1901ba32@geomatys.com> (Martin
	Desruisseaux's message of "Thu, 24 May 2018 21:58:39 +0200")
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu>
	<c64da1a2-5e09-0cb3-1032-304b968c158f@xs4all.nl>
	<d48d953b-51aa-0a3f-5097-cdcb1901ba32@geomatys.com>
Message-ID: <smuvabcpx9z.fsf@linuxpal.mit.edu>


Martin Desruisseaux <martin.desruisseaux at geomatys.com> writes:

> Le 24/05/2018 à 21:25, Sebastiaan Couwenberg a écrit :
>> On 05/24/2018 09:14 PM, Greg Troxel wrote:
>>> The following file was no longer installed, but this is not noted in NEWS:
>>> -include/org_proj4_Projections.h
>> This was part of the old JNI wrapper, and no longer required.
>
> Actually the code implementing org_proj4_Projections.h has been removed
> 4 years ago, in Proj 4.9.0. That code had memory leaks, which were fixed
> by new bindings (essentially the same than today - only upgraded for
> Java 9). I guess that the header stayed there by mistake.

That's all fine, but if a header is no longer removed that needs to be
explained in NEWS.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/1bde9932/attachment.sig>

From gdt at lexort.com  Thu May 24 14:20:45 2018
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 24 May 2018 17:20:45 -0400
Subject: [Proj] PROJ 5.1.0RC1
In-Reply-To: <d48d953b-51aa-0a3f-5097-cdcb1901ba32@geomatys.com> (Martin
	Desruisseaux's message of "Thu, 24 May 2018 21:58:39 +0200")
References: <9E4EFD65-5EDC-4C1F-98B5-93B33B7BE2F6@sdfe.dk>
	<smubmd4sw6x.fsf@linuxpal.mit.edu>
	<c64da1a2-5e09-0cb3-1032-304b968c158f@xs4all.nl>
	<d48d953b-51aa-0a3f-5097-cdcb1901ba32@geomatys.com>
Message-ID: <smur2m0px76.fsf@linuxpal.mit.edu>


Sorry, I see that RC2 updated NEWS to explain about the .h

So I am happy with RC2 being the release, from the pkgsrc viewpoint.
Thanks for posting and the quick turn to address the minor issues.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180524/15ff7af6/attachment.sig>

From kreve at sdfe.dk  Sun May 27 02:32:12 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 27 May 2018 09:32:12 +0000
Subject: [Proj] Use of C++
In-Reply-To: <12741547.ZcDyIibSYp@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
Message-ID: <94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>

Figured I’d chime in on this subject as well. As one of the co-signers of gdalbarn.com<http://gdalbarn.com/>
I am obviously on board with the switch to include the use of C++ in PROJ. And from
the responses so far it seems the community is largely behind the effort as well,
apart from a few skeptics. I agree that the inclusion of C++ in the project is not as
“dangerous" as it might initially sound like. The only real issue that’s been highlighted
so far is complications with compilation on microcontrollers but those claims still haven’t
been backed up by real world examples, so I would say we are good to go on this.

Like Thomas, I am not particularly well-versed in C++ so I am not one to talk about
best practices. For this reason I would ask that some of the C++ experts in the
community come up with a set of coding guidelines for the C++ parts of the code
base. Lately the lack of code formatting conventions in PROJ has been frustrating
to several contributors. With the addition of the new C++ parts of the code we have
the chance to at least include conventions for the C++ code. I know this has been
a topic for GDAL recently and since we have a big overlap with the GDAL community
perhaps we can benefit from their experiences. Kurt and Even, I believe you’ve been
involved in improving the GDAL code formatting rules, would one of you be willing to
suggest something that we can use in PROJ? A good starting point, I guess, would
be https://trac.osgeo.org/gdal/wiki/rfc69_cplusplus_formatting.

I know this is poking the hornets nest and there’s a risk that my request can result in
yet another heated discussion about code style. Please keep the discussion civil
and keep in mind that this is meant as a preemptive strike to avoid future flame
wars.

/Kristian

On 23 May 2018, at 12:25, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

Hi,

As announced previously, and given that the SQLite related thread has calmed
down (except license related discussions that aren't directly related to it),
this is the second potentially controversial topic I wanted to discuss.

To be able to handle WKT v1 and WKT v2, relying on the
object modeling of CRS, coordinate transformations and related concepts,
detailed in the ISO 19111:2018 / OGC 18-005r1 "OGC Abstract Specification:
Topic 2: Referencing by coordinates" seems an appropriate start.
See http://www.opengeospatial.org/standards/requests/166 (note: access to the
draft docx requires OGC membership currently)

ISO 19111:2018 will soon replace the current ISO 19111:2007 / OGC 08-015r2 :
http://portal.opengeospatial.org/files/?artifact_id=39049

This updated specification brings new concepts, particularly the
concept of dynamic geodetic reference frames (dynamic datums) that are going
to be fundamental for current (ITRF, WGS84) or future datums (NATRF2022 that
will replace NAD83 in the USA, ATRF in Australia ...)
In the coming months, there will be revision of WKT 2 to catch up with this
evolution of ISO 19111.
Future versions of the EPSG database will also later adapt to this.
ISO 19111 exposes the concepts with UML modelling. We also have GeoAPI
( http://www.opengeospatial.org/standards/geoapi ) that
offers Java (and in progress Python) class hierarchies. In the PROJ context,
it seems natural to opt for C++. Part of that new API will be exposed to C ,
the exact scope remains to be determined depending on the needs. To be clear,
this would not impact the status of existing proj C API, and the already
announced retirement plans of projects.h and proj_api.h.

On a more practical note, this is also the opportunity to reuse existing C++
code from GDAL (WKT tree node building).

I know that this choice of C++ could be perceived as an obstacle for
portability of PROJ, but I don't think this is an actual concern in practice.
Compilers most of us use today (gcc / mingw, clang, Visual Studio, ICC) are
all C++ capable. To build current versions of gcc, you even need a C++98
compatible compiler. For CLang, a C++11 capable one. So platforms that aren't
legacy have all a C++ compiler available. And I believe people that will be
ready to adopt proj 6 are unlikely to do so on legacy systems where no C++
compiler would be available.

Regarding which C++ flavour, I'd like to push for C++11. It brings upon C++98
a number of useful features. A few that come to mind for the work to come
would be the override keyword (to make sure virtual functions are properly
deriving from their base defintions), std::unique_ptr (to simplify memory
management).
C++11 means gcc >= 4.8, clang >= 3.3 and Visual Studio >= 2015.
We switched to C++11 requirement for GDAL for the latest GDAL 2.3.0 version,
and up to now, I haven't heard strong complaints related to that.

As the functional scope of PROJ is extended (historically proj was a
'projection calculator', which was enriched with early-binding datum
transformation capabilities, reworked with all the new PROJ 5 capabilities
paving the road for late-binding capabilities, and, with the planned work,
becoming a kind of 'libcrs'), it seems natural to use the appropriate tools to
implement those enhanced capabilities.

I think allowing C++ could be an opportunity to modernize other parts of the
existing code base: like the implementation of transformations/projections as
C++ objects instead of the current function pointer approach. But that's a bit
beyond my current objectives. Just wanted to mention this as an opportunity.

Thoughts ?

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/0f19a879/attachment.html>

From even.rouault at spatialys.com  Sun May 27 06:45:50 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 15:45:50 +0200
Subject: [Proj] C++ formatting rules [was Re:  Use of C++]
In-Reply-To: <94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
Message-ID: <11330242.xWTG2GLedC@even-i700>

> For this reason I would ask that some of the
> C++ experts in the community come up with a set of coding guidelines for
> the C++ parts of the code base. Lately the lack of code formatting
> conventions in PROJ has been frustrating to several contributors. With the
> addition of the new C++ parts of the code we have the chance to at least
> include conventions for the C++ code. I know this has been a topic for GDAL
> recently and since we have a big overlap with the GDAL community perhaps we
> can benefit from their experiences. Kurt and Even, I believe you’ve been
> involved in improving the GDAL code formatting rules, would one of you be
> willing to suggest something that we can use in PROJ? A good starting
> point, I guess, would be
> https://trac.osgeo.org/gdal/wiki/rfc69_cplusplus_formatting.
> 

One possibility would be to claim "this project has no particular C++ code 
formating rules. Do reasonable things [1]". But I'm afraid that won't be 
enough.

I've experimented a bit with the suggested clang-format. Basically why not 
just using it in its default setup (LLVM style), without a particular .clang-
format ?

And have a scripts/autoformat.sh [2], to autoreformat things. Travis-CI could 
run it, and bail out if a file has been reformatted.

Equivalently to my above adhoc script, I also see there is a 'git clang-
format' tool that automatically runs clang-format on files that have been git 
added. Actually when testing it it seems to run it only on the parts you 
changed, probably to avoid causing code churn in non-modified parts: cf 
https://electronjs.org/docs/development/clang-format

That said there might be a slight risk of output instability depending on the 
clang-format version. I've tried with the one of LLVM 3.7, 3.8 and 7dev
The good news is that the output of 3.8 and 7dev is identical on the .cpp 
files I've sketched.

There was a difference with 3.7 and later versions regarding include sorting 
header (with 3.7, in foo.cpp, include "foo.h" must come first, whereas later 
versions insist on includes being sorted, accepting as an exception that 
"foo.h" is first, probably for compat with 3.7...). But 3.7 can probably be 
considered ancient, so let's aim for >= 3.8

Even

[1] Reminds me of road signs in Montana "Drive at reasonable speed"...

[2]

#!/bin/sh
set -eu
clang-format $1 > $1.reformatted
if diff -u $1.reformatted $1; then
    # No reformatting: remove temporary file
    rm $1.reformatted
else
    # Differences. Backup original file, and use reformatted file
    cp $1 $1.before_reformat
    mv $1.reformatted $1
fi



-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Sun May 27 08:08:09 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 27 May 2018 08:08:09 -0700
Subject: [Proj] C++ formatting rules [was Re:  Use of C++]
In-Reply-To: <11330242.xWTG2GLedC@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<11330242.xWTG2GLedC@even-i700>
Message-ID: <CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>

+1 to Even's suggestion.

The default is the least complicated setup.  And you can always turn off
formatting for small blocks that really need special formatting.  E.g.  a
matrix


On Sun, May 27, 2018, 6:45 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> > For this reason I would ask that some of the
> > C++ experts in the community come up with a set of coding guidelines for
> > the C++ parts of the code base. Lately the lack of code formatting
> > conventions in PROJ has been frustrating to several contributors. With
> the
> > addition of the new C++ parts of the code we have the chance to at least
> > include conventions for the C++ code. I know this has been a topic for
> GDAL
> > recently and since we have a big overlap with the GDAL community perhaps
> we
> > can benefit from their experiences. Kurt and Even, I believe you’ve been
> > involved in improving the GDAL code formatting rules, would one of you be
> > willing to suggest something that we can use in PROJ? A good starting
> > point, I guess, would be
> > https://trac.osgeo.org/gdal/wiki/rfc69_cplusplus_formatting.
> >
>
> One possibility would be to claim "this project has no particular C++ code
> formating rules. Do reasonable things [1]". But I'm afraid that won't be
> enough.
>
> I've experimented a bit with the suggested clang-format. Basically why not
> just using it in its default setup (LLVM style), without a particular
> .clang-
> format ?
>
> And have a scripts/autoformat.sh [2], to autoreformat things. Travis-CI
> could
> run it, and bail out if a file has been reformatted.
>
> Equivalently to my above adhoc script, I also see there is a 'git clang-
> format' tool that automatically runs clang-format on files that have been
> git
> added. Actually when testing it it seems to run it only on the parts you
> changed, probably to avoid causing code churn in non-modified parts: cf
> https://electronjs.org/docs/development/clang-format
>
> That said there might be a slight risk of output instability depending on
> the
> clang-format version. I've tried with the one of LLVM 3.7, 3.8 and 7dev
> The good news is that the output of 3.8 and 7dev is identical on the .cpp
> files I've sketched.
>
> There was a difference with 3.7 and later versions regarding include
> sorting
> header (with 3.7, in foo.cpp, include "foo.h" must come first, whereas
> later
> versions insist on includes being sorted, accepting as an exception that
> "foo.h" is first, probably for compat with 3.7...). But 3.7 can probably
> be
> considered ancient, so let's aim for >= 3.8
>
> Even
>
> [1] Reminds me of road signs in Montana "Drive at reasonable speed"...
>
> [2]
>
> #!/bin/sh
> set -eu
> clang-format $1 > $1.reformatted
> if diff -u $1.reformatted $1; then
>     # No reformatting: remove temporary file
>     rm $1.reformatted
> else
>     # Differences. Backup original file, and use reformatted file
>     cp $1 $1.before_reformat
>     mv $1.reformatted $1
> fi
>
>
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/d7727e52/attachment.html>

From even.rouault at spatialys.com  Sun May 27 08:35:40 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 17:35:40 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
Message-ID: <6101354.sXx80I9jAB@even-i700>

Hi,

I just wanted to give a very early preview of my prototyping of the ISO 
191111:2018 class hiearchy, so we can discuss some coding practices (so 
non-"cosmetic" aspects of coding), especially about fundamental conventions 
deeply impacting the API, particularly regarding object ownership.

This is not material ready for detailed review: there are lots of TODOs, no 
docs, mostly untested, doesn't do anything really useful yet, etc.

I've uploaded the Doxygen doc generated from the work in progress. Two useful 
links to have an overview:

Diagram of class hiearchy:
http://even.rouault.free.fr/proj_cpp_api/html/inherits.html

Namespaces/packages and classes
http://even.rouault.free.fr/proj_cpp_api/html/annotated.html

Example of the CRS package (formatted with clang-format):
https://github.com/rouault/proj.4/blob/iso19111/src/crs.hh
https://github.com/rouault/proj.4/blob/iso19111/src/crs.cpp

Test program:
https://github.com/rouault/proj.4/blob/iso19111/test/test_cpp.cpp

A few principles I've adopted:
- done in a way such that memory leaks cannot happen (internal use of 
unique_ptr)
- all private members are strictly hidden in the header file, by delegating to 
a internal private struct in the .cpp file. This way we can add private 
members without impacting the ABI
- from the GeoAPI design, I've kept the apparent design constraint of having 
immutable objects once constructed.
- the getters generally return a pointer or const reference to the internal 
structure members. Which means that those objects must not be used after their 
belonging object has been destroyed

~~~~~~

There are different ways that could be used for object life-cycle management:

1) the one I took in this first sketch: we pass objects by const reference, 
and methods/constructors that need to keep them, create a copy.

For example:

GeographicCRS createGeographicCRS(const PropertyMap& properties,
                                    const GeodeticReferenceFrame& datum,
                                    const EllipsoidalCS& cs);

will construct a GeographicCRS object that will duplicate datum and cs 
internally.

2) another one we could imagine: use shared pointers

The above would become:

std::shared_ptr<GeographicCRS>
 createGeographicCRS(const PropertyMap& properties,
                      std::shared_ptr<GeodeticReferenceFrame> datum,
                      std::shared_ptr<EllipsoidalCS> cs);

3) have ad-hoc conventions regarding pointer ownership. But we probably want 
to avoid this as this is error-prone for API users (incluing PROJ internal 
use)

~~~~~~

Comparing the 2 first approaches:

Copying approach:
- pros:  no null pointer checking needed when acception a const& argument
- cons:
  * can involve a lot of copying around when building complex object 
hiearchies
  * internally involves a kind of hack ( clone() method ) so that the 
duplication correctly clones instances of derived classes. To be clear: let's 
consider the situation where you have a constructor that accepts a Base& or 
Base* argument, that you need to store as a class member. If you call it with 
a Derived object, you want a instance of Derived to be cloned, not its Base-
only part.

shared_ptr approach:
- pros:
   * reduced copying, avoid the cloning hack
   * we could return shared_ptr objects in getters, making them super safe to 
use (the return can be used after the belonging object has been destroyed).
- cons:
 * null-pointer situations can happen and must be checked / documented

My feeling is that the shared_ptr approach could be better, although CRS 
instanciation is probably not critical in most use cases. Of course shared_ptr 
aren't completely free performance-wise, but I feel this would be more 
efficient than deep copying of complex objects.

And, to save explicit null checking in situations where we don't want null 
pointers, we could wrap the shared_ptr in a nn<> class [1] that guarantees 
that the hold pointer is not null.

We would then have:
GeographicCRS_nnshptr
   createGeographicCRS(const PropertyMap& properties,
  		                         GeodeticReferenceFrame_nnshptr datum,
                  			      EllipsoidalCS_nnshptr cs);

with using xxxx_nnshptr = nn_shared_ptr<xxxx>;

Thoughts ?

Even

[1]  https://github.com/dropbox/nn/blob/master/nn.hpp

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From martin.desruisseaux at geomatys.com  Sun May 27 09:05:14 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Sun, 27 May 2018 18:05:14 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <6101354.sXx80I9jAB@even-i700>
References: <6101354.sXx80I9jAB@even-i700>
Message-ID: <684cc3aa-9bc2-1654-ded8-c07b264db444@geomatys.com>

Hello Even

Thanks for this first draft, it looks promising!

One quick comment: it may be worth to move CI_Citation, EX_Extent and
MD_Identifier, currently in "common", to their own "metadata" package.
The reason is that even if they are currently the main ISO 19115
structures of interest for Proj, in the future GDAL may be interested in
more ISO 19115 metadata structures (e.g. GeographicBoundingBox,
SampleDimension, CoverageDescription, etc.).

    Martin




From schwehr at gmail.com  Sun May 27 09:14:16 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 27 May 2018 09:14:16 -0700
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <6101354.sXx80I9jAB@even-i700>
References: <6101354.sXx80I9jAB@even-i700>
Message-ID: <CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>

I maybe prefer 1, but I've not really used shared_ptr myself.  I suggest
keeping the static Builder concept in mid for object creation.  It gives a
lot of control for allowing creation of const instances.

You may want to consider some singletons.

Some thoughts on the code since it's out there...


SingleCRS has PROJ_OPAQUE_PRIVATE_DATA, so why do the derived classes
like GeodeticCRS
also have PROJ_OPAQUE_PRIVATE_DATA?


Two layout requests:

1. Can you switch to public, protected, private order in classes.  That
usually more closely matches what a reader is likely needing to know.

2. Please try to avoid usings namespace polluting usings like this:

using namespace common;
using namespace datum;
using namespace cs;
using namespace operation;
using namespace util;

I find it easier to follow when I see:

using ::osgeo::proj::datum::Datum;  // etc.

That way you don't have to worry about name collisions or other surprises.
And it provides a concise list to the reader.

Or just use the namespace when you use the particular... e.g.

const auto cs_helper = std::make_unique<cs::Helper>(foo, bar);


No need for virtual and override.  virtual is redundant

virtual const GeodeticReferenceFrame *datum() const override;

Should just be:

const GeodeticReferenceFrame *datum() const override;


With these 2 methods, why is one returning a const ptr and the other a
const ref?

virtual const GeodeticReferenceFrame *datum() const override;
const GeodeticCS &geodeticCoordinateSystem() const;



On Sun, May 27, 2018 at 8:35 AM, Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi,
>
> I just wanted to give a very early preview of my prototyping of the ISO
> 191111:2018 class hiearchy, so we can discuss some coding practices (so
> non-"cosmetic" aspects of coding), especially about fundamental
> conventions
> deeply impacting the API, particularly regarding object ownership.
>
> This is not material ready for detailed review: there are lots of TODOs,
> no
> docs, mostly untested, doesn't do anything really useful yet, etc.
>
> I've uploaded the Doxygen doc generated from the work in progress. Two
> useful
> links to have an overview:
>
> Diagram of class hiearchy:
> http://even.rouault.free.fr/proj_cpp_api/html/inherits.html
>
> Namespaces/packages and classes
> http://even.rouault.free.fr/proj_cpp_api/html/annotated.html
>
> Example of the CRS package (formatted with clang-format):
> https://github.com/rouault/proj.4/blob/iso19111/src/crs.hh
> https://github.com/rouault/proj.4/blob/iso19111/src/crs.cpp
>
> Test program:
> https://github.com/rouault/proj.4/blob/iso19111/test/test_cpp.cpp
>
> A few principles I've adopted:
> - done in a way such that memory leaks cannot happen (internal use of
> unique_ptr)
> - all private members are strictly hidden in the header file, by
> delegating to
> a internal private struct in the .cpp file. This way we can add private
> members without impacting the ABI
> - from the GeoAPI design, I've kept the apparent design constraint of
> having
> immutable objects once constructed.
> - the getters generally return a pointer or const reference to the
> internal
> structure members. Which means that those objects must not be used after
> their
> belonging object has been destroyed
>
> ~~~~~~
>
> There are different ways that could be used for object life-cycle
> management:
>
> 1) the one I took in this first sketch: we pass objects by const
> reference,
> and methods/constructors that need to keep them, create a copy.
>
> For example:
>
> GeographicCRS createGeographicCRS(const PropertyMap& properties,
>                                     const GeodeticReferenceFrame& datum,
>                                     const EllipsoidalCS& cs);
>
> will construct a GeographicCRS object that will duplicate datum and cs
> internally.
>
> 2) another one we could imagine: use shared pointers
>
> The above would become:
>
> std::shared_ptr<GeographicCRS>
>  createGeographicCRS(const PropertyMap& properties,
>                       std::shared_ptr<GeodeticReferenceFrame> datum,
>                       std::shared_ptr<EllipsoidalCS> cs);
>
> 3) have ad-hoc conventions regarding pointer ownership. But we probably
> want
> to avoid this as this is error-prone for API users (incluing PROJ internal
> use)
>
> ~~~~~~
>
> Comparing the 2 first approaches:
>
> Copying approach:
> - pros:  no null pointer checking needed when acception a const& argument
> - cons:
>   * can involve a lot of copying around when building complex object
> hiearchies
>   * internally involves a kind of hack ( clone() method ) so that the
> duplication correctly clones instances of derived classes. To be clear:
> let's
> consider the situation where you have a constructor that accepts a Base&
> or
> Base* argument, that you need to store as a class member. If you call it
> with
> a Derived object, you want a instance of Derived to be cloned, not its
> Base-
> only part.
>
> shared_ptr approach:
> - pros:
>    * reduced copying, avoid the cloning hack
>    * we could return shared_ptr objects in getters, making them super safe
> to
> use (the return can be used after the belonging object has been destroyed).
> - cons:
>  * null-pointer situations can happen and must be checked / documented
>
> My feeling is that the shared_ptr approach could be better, although CRS
> instanciation is probably not critical in most use cases. Of course
> shared_ptr
> aren't completely free performance-wise, but I feel this would be more
> efficient than deep copying of complex objects.
>
> And, to save explicit null checking in situations where we don't want null
> pointers, we could wrap the shared_ptr in a nn<> class [1] that guarantees
> that the hold pointer is not null.
>
> We would then have:
> GeographicCRS_nnshptr
>    createGeographicCRS(const PropertyMap& properties,
>                                          GeodeticReferenceFrame_nnshptr
> datum,
>                                               EllipsoidalCS_nnshptr cs);
>
> with using xxxx_nnshptr = nn_shared_ptr<xxxx>;
>
> Thoughts ?
>
> Even
>
> [1]  https://github.com/dropbox/nn/blob/master/nn.hpp
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/24433cbe/attachment.html>

From jmfluis at gmail.com  Sun May 27 11:09:45 2018
From: jmfluis at gmail.com (J Luis)
Date: Sun, 27 May 2018 19:09:45 +0100
Subject: [Proj] Use of C++
In-Reply-To: <94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
Message-ID: <CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>

On Sun, May 27, 2018 at 10:32 AM, Kristian Evers <kreve at sdfe.dk> wrote:

> Figured I’d chime in on this subject as well. As one of the co-signers of
> gdalbarn.com
> I am obviously on board with the switch to include the use of C++ in PROJ.
> And from
> the responses so far it seems the community is largely behind the effort
> as well,
> apart from a few skeptics.
>

Hi,

I am sorry but I don't think we can conclude that. The proponents naturally
are in favor and, given that they will do the work, that is a strong
argument. However, there is often forgotten price to pay when a code moves
from C to C++ that is the reduction of potential contributors. Speaking
only from myself, but knowing I'm not alone, C++ is an awfully complicated
language that is beyond my suffering endurance. Not that it was really
important but there were times I tried to contribute to GDAL but hit the
C++ wall.

I also find the embedded systems argument a valid one but have poor
knowledge on the subject. What I have read here and there is that C++ codes
makes bigger and more resource demanding needs that those made with C.

That said, and as I mentioned in beginning, those that will implement the
new features have ofc the main word.

P.S. Sorry, couldn't resist to point to this provocative reading.
http://archive.is/2016.05.17-214038/https://www.linkedin.com/pulse/why-i-dont-spend-time-modern-c-anymore-henrique-bucher-phd

Joaquim Luis
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/854fa97c/attachment.html>

From even.rouault at spatialys.com  Sun May 27 11:11:35 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 20:11:35 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <684cc3aa-9bc2-1654-ded8-c07b264db444@geomatys.com>
References: <6101354.sXx80I9jAB@even-i700>
	<684cc3aa-9bc2-1654-ded8-c07b264db444@geomatys.com>
Message-ID: <2686312.rjlZ7LtGBf@even-i700>

On dimanche 27 mai 2018 18:05:14 CEST Martin Desruisseaux wrote:
> Hello Even
> 
> Thanks for this first draft, it looks promising!
> 
> One quick comment: it may be worth to move CI_Citation, EX_Extent and
> MD_Identifier, currently in "common", to their own "metadata" package.

OK, done

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Sun May 27 11:40:56 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 20:40:56 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>
References: <6101354.sXx80I9jAB@even-i700>
	<CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>
Message-ID: <1615375.tdOn5bEHCJ@even-i700>

On dimanche 27 mai 2018 09:14:16 CEST Kurt Schwehr wrote:
> I maybe prefer 1, but I've not really used shared_ptr myself.  

I see the libkml API is close to the shared_ptr approach (except it uses a 
boost::intrusive_ptr which is a variation of shared_ptr), where you pass and 
get those pointer wrappers all the time throughout the API.

kml/dom/kml_ptr.h:typedef boost::intrusive_ptr<Element> ElementPtr;

I'm a bit concerned by all the hidden cost of object duplication with the 
approach I tried. And if you instanciate various projected coordinate systems 
based on the same datum, currently all the datum information would be 
duplicated in each PCS object, whereas with a pointer based approach you would 
have just one instance of it.

> I suggest
> keeping the static Builder concept in mid for object creation.  It gives a
> lot of control for allowing creation of const instances.

Do you have links for best practice regarding this ?

> 
> You may want to consider some singletons.

Yes, more work needed on object instanciation.

> SingleCRS has PROJ_OPAQUE_PRIVATE_DATA, so why do the derived classes
> like GeodeticCRS
> also have PROJ_OPAQUE_PRIVATE_DATA?

Because they can have their own additional private members.

> 1. Can you switch to public, protected, private order in classes. 

Done

> 
> 2. Please try to avoid usings namespace polluting usings like this:

Done.

> 
> No need for virtual and override.  virtual is redundant

Done

> 
> With these 2 methods, why is one returning a const ptr and the other a
> const ref?
> 
> virtual const GeodeticReferenceFrame *datum() const override;
> const GeodeticCS &geodeticCoordinateSystem() const;
> 

datum might be optional (there is either a datum or a datumEnsemble in a 
SingleCRS), hence a pointer, whereas the coordinate system is mandatory

with the shared pointer approach, we could return pointers in both cases:
const GeodeticReferenceFrame_shptr datum() const
const GeodeticCS_nnshptr geodeticCoordinateSystem() const

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Sun May 27 11:54:31 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 27 May 2018 11:54:31 -0700
Subject: [Proj] Use of C++
In-Reply-To: <CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
Message-ID: <CACmBxyuEXw5TfgW31HDrQaUJiM+A7c4GhVuGxMrJPB8o8xXHMQ@mail.gmail.com>

I encourage anyone with a real microcontroller example that needs Proj but
can't use C++ to step forward.

I also encourage people to provide example of real trouble along the lines
of Bucher's to provide examples.  Especially powerful if done up in
https://godbolt.org/ or similar.  I argue that C++ can do anything as well
as C can.  Just like any language, it also has plenty of ways to build junk.

Please do not use GDAL as the C++ standard... Most of GDAL is legacy style
C++ by today's standards.

If people are having problems with a C++ language feature that is proposed
for use, it would be good to discuss it.  e.g.

https://goo.gl/vuA3D6

On Sun, May 27, 2018 at 11:09 AM, J Luis <jmfluis at gmail.com> wrote:

>
>
> On Sun, May 27, 2018 at 10:32 AM, Kristian Evers <kreve at sdfe.dk> wrote:
>
>> Figured I’d chime in on this subject as well. As one of the co-signers of
>> gdalbarn.com
>> I am obviously on board with the switch to include the use of C++ in
>> PROJ. And from
>> the responses so far it seems the community is largely behind the effort
>> as well,
>> apart from a few skeptics.
>>
>
> Hi,
>
> I am sorry but I don't think we can conclude that. The proponents
> naturally are in favor and, given that they will do the work, that is a
> strong argument. However, there is often forgotten price to pay when a code
> moves from C to C++ that is the reduction of potential contributors.
> Speaking only from myself, but knowing I'm not alone, C++ is an awfully
> complicated language that is beyond my suffering endurance. Not that it was
> really important but there were times I tried to contribute to GDAL but hit
> the C++ wall.
>
> I also find the embedded systems argument a valid one but have poor
> knowledge on the subject. What I have read here and there is that C++ codes
> makes bigger and more resource demanding needs that those made with C.
>
> That said, and as I mentioned in beginning, those that will implement the
> new features have ofc the main word.
>
> P.S. Sorry, couldn't resist to point to this provocative reading.
> http://archive.is/2016.05.17-214038/https://www.linkedin.
> com/pulse/why-i-dont-spend-time-modern-c-anymore-henrique-bucher-phd
>
> Joaquim Luis
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/503f3dcd/attachment.html>

From even.rouault at spatialys.com  Sun May 27 12:00:40 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 21:00:40 +0200
Subject: [Proj] Use of C++
In-Reply-To: <CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
Message-ID: <19598617.eq1q8TqktY@even-i700>

Joaquim,

> 
> I am sorry but I don't think we can conclude that. The proponents naturally
> are in favor and, given that they will do the work, that is a strong
> argument. However, there is often forgotten price to pay when a code moves
> from C to C++ that is the reduction of potential contributors.

We are speaking here about new code for new functionality. Existing code for 
now would remain in C.
Your argument could be reversed: I'm a contributor to other C-written OSGeo 
projects where I would certainly contribute more to one project in particular, 
if dealing with its aging C code base wouldn't discourage me all the time 
(complicated memory management, painful string usage, etc...)

> Speaking
> only from myself, but knowing I'm not alone, C++ is an awfully complicated
> language

Agreed that mastering the whole C++ standard(s) can be awfully complicated. 
Subset of it can be much more manageable.

> that it was really
> important but there were times I tried to contribute to GDAL but hit the
> C++ wall.

Huh really? GDAL use of C++ is just C with classes, nothing too fancy 
generally ;-)

> 
> I also find the embedded systems argument a valid one but have poor
> knowledge on the subject. 

I'd bet people working in embedded systems heavily constrained like 
microcontrollers don't even use existing proj unmodified. They probably cut it 
down to the few projections they must use, have to replace/remove all the 
access to resource files, etc. Anyway the Linux kernel is written in C, but 
there are a number of low-cost platforms that cannot run recent version of it 
because it is too big and there are tensions in its community to know if it 
must try to accomodate for those uses

I believe that most contributors and users of proj are in the desktop/server 
segment. We can't address all potential use cases.

> What I have read here and there is that C++ codes
> makes bigger and more resource demanding needs that those made with C.

That depends. This is not a general truth. It can also produce more optimized 
code.

> 
> That said, and as I mentioned in beginning, those that will implement the
> new features have ofc the main word.

Honestly I can't imagine coding in C all those new functionalities. Basically 
the standards we want to implement is object oriented. I would spend too much 
time reimplementing object-like concepts with lot of verbose and error-prone C 
constructs (in a previous life, I've developed a complex project using GLib 
GObject C model [1]. It worked, but at what price...)

Even

[1] https://developer.gnome.org/gobject/stable/

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From martin.desruisseaux at geomatys.com  Sun May 27 13:14:50 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Sun, 27 May 2018 22:14:50 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <6101354.sXx80I9jAB@even-i700>
References: <6101354.sXx80I9jAB@even-i700>
Message-ID: <b54fc2dd-65fc-684e-4fd9-ad5ff78424a9@geomatys.com>

I have one minor suggestion. In crs.hh file, there is the following
comment in the GeodeticCRS class:

    // slight departure from standard. We can't override coordinateSystem() since
    // GeographicCRS::coordinateSystem() returns cs::EllipsoidalCS which is not
    // derived from GeodeticCS (GeodeticCS is a pseudo union) ...
    const cs::GeodeticCS &geodeticCoordinateSystem() const;

I would suggest to not try too hard to represent verbatim the « union »
constructs from ISO 19111, but rather focus on the intent. With this
GeodeticCS « union », ISO 19111 is trying to said that a GeodeticCRS
shall be associated only to an EllipsoidCS, CartesianCS or SphericalCS.
If it is possible to express this constraint in the C/C++ language (with
C union or whatever other construct may fit), good! If it is not
practical, then I think it is okay to just state the constraint in the
documentation. This is what we have done in Java for instance. Having a
second property returning a "CS-like" object gives the impression that
SingleCRS can be associated to two coordinate systems, which may be
confusing.

Note: ISO 19111 do not define GeodeticCS as a parent of EllipsoidCS,
CartesianCS and SphericalCS because conceptually, "GeodeticCS" is not
really a kind of coordinate system. Another reason is that such
hierarchy would be very specific to GeodeticCRS needs and may fit the
needs of other CRS.

    Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/e7eedef1/attachment.html>

From even.rouault at spatialys.com  Sun May 27 14:08:03 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 23:08:03 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <b54fc2dd-65fc-684e-4fd9-ad5ff78424a9@geomatys.com>
References: <6101354.sXx80I9jAB@even-i700>
	<b54fc2dd-65fc-684e-4fd9-ad5ff78424a9@geomatys.com>
Message-ID: <3314994.7q8zm3skot@even-i700>

On dimanche 27 mai 2018 22:14:50 CEST Martin Desruisseaux wrote:
> I have one minor suggestion. In crs.hh file, there is the following
> comment in the GeodeticCRS class:
> 
>     // slight departure from standard. We can't override coordinateSystem()
> since // GeographicCRS::coordinateSystem() returns cs::EllipsoidalCS which
> is not // derived from GeodeticCS (GeodeticCS is a pseudo union) ...
>     const cs::GeodeticCS &geodeticCoordinateSystem() const;
> 
> I would suggest to not try too hard to represent verbatim the « union »
> constructs from ISO 19111, but rather focus on the intent.

Agreed. I wasn't really satisfied with this. A documentation note will do.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From even.rouault at spatialys.com  Sun May 27 14:23:45 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 27 May 2018 23:23:45 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <1615375.tdOn5bEHCJ@even-i700>
References: <6101354.sXx80I9jAB@even-i700>
	<CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>
	<1615375.tdOn5bEHCJ@even-i700>
Message-ID: <1843055.xsChuQkT73@even-i700>

> I'm a bit concerned by all the hidden cost of object duplication with the
> approach I tried. And if you instanciate various projected coordinate
> systems based on the same datum, currently all the datum information would
> be duplicated in each PCS object, whereas with a pointer based approach you
> would have just one instance of it.
> 

I've experienced with the shared_ptr approach in
https://github.com/rouault/proj.4/commit/85f619cbae7a0b2071681e150f93a5301fa32098

The most satisfactory result is the removal of the clone() hacks. Side effect is that the creation of
the GeographicCRS is 30% faster than the previous approach (measured on a 1 million iterations loop)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From mateusz at loskot.net  Sun May 27 14:48:53 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Sun, 27 May 2018 23:48:53 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <1843055.xsChuQkT73@even-i700>
References: <6101354.sXx80I9jAB@even-i700>
	<CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>
	<1615375.tdOn5bEHCJ@even-i700> <1843055.xsChuQkT73@even-i700>
Message-ID: <CABUeae_BZVZ2ToOA0AZb203FbLCGiinFHYod=sVpy7yqZORp=Q@mail.gmail.com>

On Sun, 27 May 2018, 23:26 Even Rouault, <even.rouault at spatialys.com> wrote:

> > I'm a bit concerned by all the hidden cost of object duplication with the
> > approach I tried. And if you instanciate various projected coordinate
> > systems based on the same datum, currently all the datum information
> would
> > be duplicated in each PCS object, whereas with a pointer based approach
> you
> > would have just one instance of it.
> >
>
> I've experienced with the shared_ptr approach in
>
> https://github.com/rouault/proj.4/commit/85f619cbae7a0b2071681e150f93a5301fa32098


std::make_shared is the canonical
and efficient way to manage shared_ptr instances.
The new should be hardly ever needed.

BTW, I've been reading the thread, nothing major to add though - I myself
agree with Kurt's points.
For minor points, little point to discuss those and generate unfocused
traffic.


Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/fe848cdc/attachment.html>

From schwehr at gmail.com  Sun May 27 15:26:00 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Sun, 27 May 2018 15:26:00 -0700
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <CABUeae_BZVZ2ToOA0AZb203FbLCGiinFHYod=sVpy7yqZORp=Q@mail.gmail.com>
References: <6101354.sXx80I9jAB@even-i700>
	<CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>
	<1615375.tdOn5bEHCJ@even-i700> <1843055.xsChuQkT73@even-i700>
	<CABUeae_BZVZ2ToOA0AZb203FbLCGiinFHYod=sVpy7yqZORp=Q@mail.gmail.com>
Message-ID: <CACmBxyugK+akvMCzWWsTXsZSsO-riV1sNtcSQRdPs_z+NV8xAA@mail.gmail.com>

Agreed... Anytime you write "new" you probably shouldn't unless you are
working with a legacy API.

Trying to write c++ with a phone sucks...

On Sun, May 27, 2018, 2:51 PM Mateusz Loskot <mateusz at loskot.net> wrote:

> On Sun, 27 May 2018, 23:26 Even Rouault, <even.rouault at spatialys.com>
> wrote:
>
>> > I'm a bit concerned by all the hidden cost of object duplication with
>> the
>> > approach I tried. And if you instanciate various projected coordinate
>> > systems based on the same datum, currently all the datum information
>> would
>> > be duplicated in each PCS object, whereas with a pointer based approach
>> you
>> > would have just one instance of it.
>> >
>>
>> I've experienced with the shared_ptr approach in
>>
>> https://github.com/rouault/proj.4/commit/85f619cbae7a0b2071681e150f93a5301fa32098
>
>
> std::make_shared is the canonical
> and efficient way to manage shared_ptr instances.
> The new should be hardly ever needed.
>
> BTW, I've been reading the thread, nothing major to add though - I myself
> agree with Kurt's points.
> For minor points, little point to discuss those and generate unfocused
> traffic.
>
>
> Mateusz Loskot, mateusz at loskot.net
> (Sent from mobile)
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180527/bc5733a0/attachment.html>

From jmfluis at gmail.com  Sun May 27 17:05:36 2018
From: jmfluis at gmail.com (jmfluis at gmail.com)
Date: Mon, 28 May 2018 01:05:36 +0100
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <CACmBxyugK+akvMCzWWsTXsZSsO-riV1sNtcSQRdPs_z+NV8xAA@mail.gmail.com>
References: <6101354.sXx80I9jAB@even-i700>	<CACmBxyv6SWJy2fCSB98aCCdHoFgKGzT-zhPYcePthr_GovKdGA@mail.gmail.com>	<1615375.tdOn5bEHCJ@even-i700>
	<1843055.xsChuQkT73@even-i700>	<CABUeae_BZVZ2ToOA0AZb203FbLCGiinFHYod=sVpy7yqZORp=Q@mail.gmail.com>
	<CACmBxyugK+akvMCzWWsTXsZSsO-riV1sNtcSQRdPs_z+NV8xAA@mail.gmail.com>
Message-ID: <000801d3f617$9b5f9690$d21ec3b0$@gmail.com>

 

 

From: proj-bounces at lists.maptools.org <proj-bounces at lists.maptools.org> On Behalf Of Kurt Schwehr
Sent: Sunday, May 27, 2018 11:26 PM
To: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Subject: Re: [Proj] C++ coding practices w.r.t object ownership

 

 

Trying to write c++ with a phone sucks...

 

 

Sure, it’s a C phone.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180528/e2752ee9/attachment.html>

From kreve at sdfe.dk  Mon May 28 02:39:01 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 28 May 2018 09:39:01 +0000
Subject: [Proj] Use of C++
In-Reply-To: <19598617.eq1q8TqktY@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
	<19598617.eq1q8TqktY@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAED5C272@S000014.PROD.SITAD.DK>

I agree with Kurt and Even here. Regarding alienating contributors, this is not something
I am particularly worried about. At the moment we have less than 10 ten regular
contributors (interestingly enough, most of those who are against the use C++ in PROJ
don't really contribute themselves...). I often hear people say they are holding back on
contributing to the project because they find C89 ancient and absolutely intolerable to
work with. Your mileage may vary but I would argue that using a fairly modern language
(C++11) attracts more interest than using C89 which lacks many features the modern
Programmer expects in the toolkit today.

C++ is not perfect but it does offer some nice functionality that can greatly simplify the
existing code base in PROJ (e.g. string manipulation). And then there's all of the new
functionality which Even has already talked about length so I won't repeat those points.

Anyway, the wheels are in motion and Even has already come a long way with his work.
Instead of discussing the choice of tools I will instead encourage you all to review Evens
code and help him build it in the best way possible. This is a tremendous effort that when
finished will be a game changer in the world of GIS.

/Kristian

> -----Oprindelig meddelelse-----
> Fra: proj-bounces at lists.maptools.org [mailto:proj-
> bounces at lists.maptools.org] På vegne af Even Rouault
> Sendt: 27. maj 2018 21:01
> Til: proj at lists.maptools.org
> Emne: Re: [Proj] Use of C++
> 
> Joaquim,
> 
> >
> > I am sorry but I don't think we can conclude that. The proponents naturally
> > are in favor and, given that they will do the work, that is a strong
> > argument. However, there is often forgotten price to pay when a code
> moves
> > from C to C++ that is the reduction of potential contributors.
> 
> We are speaking here about new code for new functionality. Existing code
> for
> now would remain in C.
> Your argument could be reversed: I'm a contributor to other C-written
> OSGeo
> projects where I would certainly contribute more to one project in particular,
> if dealing with its aging C code base wouldn't discourage me all the time
> (complicated memory management, painful string usage, etc...)
> 
> > Speaking
> > only from myself, but knowing I'm not alone, C++ is an awfully complicated
> > language
> 
> Agreed that mastering the whole C++ standard(s) can be awfully
> complicated.
> Subset of it can be much more manageable.
> 
> > that it was really
> > important but there were times I tried to contribute to GDAL but hit the
> > C++ wall.
> 
> Huh really? GDAL use of C++ is just C with classes, nothing too fancy
> generally ;-)
> 
> >
> > I also find the embedded systems argument a valid one but have poor
> > knowledge on the subject.
> 
> I'd bet people working in embedded systems heavily constrained like
> microcontrollers don't even use existing proj unmodified. They probably cut
> it
> down to the few projections they must use, have to replace/remove all the
> access to resource files, etc. Anyway the Linux kernel is written in C, but
> there are a number of low-cost platforms that cannot run recent version of it
> because it is too big and there are tensions in its community to know if it
> must try to accomodate for those uses
> 
> I believe that most contributors and users of proj are in the desktop/server
> segment. We can't address all potential use cases.
> 
> > What I have read here and there is that C++ codes
> > makes bigger and more resource demanding needs that those made with
> C.
> 
> That depends. This is not a general truth. It can also produce more optimized
> code.
> 
> >
> > That said, and as I mentioned in beginning, those that will implement the
> > new features have ofc the main word.
> 
> Honestly I can't imagine coding in C all those new functionalities. Basically
> the standards we want to implement is object oriented. I would spend too
> much
> time reimplementing object-like concepts with lot of verbose and error-
> prone C
> constructs (in a previous life, I've developed a complex project using GLib
> GObject C model [1]. It worked, but at what price...)
> 
> Even
> 
> [1] https://developer.gnome.org/gobject/stable/
> 
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From mateusz at loskot.net  Mon May 28 03:27:46 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Mon, 28 May 2018 12:27:46 +0200
Subject: [Proj] Use of C++
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAED5C272@S000014.PROD.SITAD.DK>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
	<19598617.eq1q8TqktY@even-i700>
	<2E885BB293AF0448A0181138489E9A0EAED5C272@S000014.PROD.SITAD.DK>
Message-ID: <CABUeae9tsWFUbUZ8sbZ=rhEeHm679aUzPXUxbYxXr0oWU0bKsA@mail.gmail.com>

On 28 May 2018 at 11:39, Kristian Evers <kreve at sdfe.dk> wrote:
>
> Anyway, the wheels are in motion and Even has already come a long way with his work.
> Instead of discussing the choice of tools I will instead encourage you all to review Evens
> code and help him build it in the best way possible.

Has Even already asked for line-by-line review of any of his code [1]?
AFAIU, the questions were about general aspects of design and development.
I guess, the discussion is/will be going from general to detailed, but
the latter
is not yet, unless I've been missed something.

I don't think it's the right time to go through Even's code with
thorough review.
That might be quite distracting during some initial prototyping.

[1] https://github.com/rouault/proj.4/tree/iso19111 or
https://github.com/rouault/proj.4/tree/iso19111_ptr

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From kreve at sdfe.dk  Mon May 28 04:06:26 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 28 May 2018 11:06:26 +0000
Subject: [Proj] Use of C++
In-Reply-To: <CABUeae9tsWFUbUZ8sbZ=rhEeHm679aUzPXUxbYxXr0oWU0bKsA@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<CAE_VgzNA4du_1=DOu2ev7ywQKuTTCWYm+uOk24dD4daFkthLRg@mail.gmail.com>
	<19598617.eq1q8TqktY@even-i700>
	<2E885BB293AF0448A0181138489E9A0EAED5C272@S000014.PROD.SITAD.DK>
	<CABUeae9tsWFUbUZ8sbZ=rhEeHm679aUzPXUxbYxXr0oWU0bKsA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAED5C399@S000014.PROD.SITAD.DK>

Perhaps I worded that in a bad way. It is not the time to do line-by-line reviews,
no. At some point it will though, and obviously it will be fruitful to have as many
eyes as possible on the code. For now I was mostly thinking about the architectural
considerations that Even has presented. The point was to focus the energy towards
something productive instead of having a meta-discussion about which tool to use.
Sorry if that didn't come across.

/Kristian

> -----Oprindelig meddelelse-----
> Fra: proj-bounces at lists.maptools.org [mailto:proj-
> bounces at lists.maptools.org] På vegne af Mateusz Loskot
> Sendt: 28. maj 2018 12:28
> Til: PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
> Emne: Re: [Proj] Use of C++
> 
> On 28 May 2018 at 11:39, Kristian Evers <kreve at sdfe.dk> wrote:
> >
> > Anyway, the wheels are in motion and Even has already come a long way
> with his work.
> > Instead of discussing the choice of tools I will instead encourage you all to
> review Evens
> > code and help him build it in the best way possible.
> 
> Has Even already asked for line-by-line review of any of his code [1]?
> AFAIU, the questions were about general aspects of design and
> development.
> I guess, the discussion is/will be going from general to detailed, but
> the latter
> is not yet, unless I've been missed something.
> 
> I don't think it's the right time to go through Even's code with
> thorough review.
> That might be quite distracting during some initial prototyping.
> 
> [1] https://github.com/rouault/proj.4/tree/iso19111 or
> https://github.com/rouault/proj.4/tree/iso19111_ptr
> 
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From kreve at sdfe.dk  Mon May 28 05:09:07 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 28 May 2018 12:09:07 +0000
Subject: [Proj] C++ formatting rules [was Re:  Use of C++]
In-Reply-To: <CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<94645CD7-4941-4319-BBD8-046E3972A46D@sdfe.dk>
	<11330242.xWTG2GLedC@even-i700>
	<CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAED5C48A@S000014.PROD.SITAD.DK>

I am okay with using the standard setup. It seems quite readable to me. I do have one wish though.
The default seem to use two spaces per indentation level. In the existing code we mostly use 4 spaces.
I would prefer to keep it that way. I think it looks better, but the real selling point for me is that it
lowers the amount of lines that will be changed should we ever want to reformat the C-code with
clang-format (of course using the same rules as for C++).

I’ve been playing around with it a bit to see the effect on the code in the repository today. Adding
“IndentWidth: 4” to the clang-format setup touches ~20k lines less than the default setup. That
seems worthwhile to me. I’ve uploaded branches with the changes to my fork.

Default LLVM formatting: https://github.com/OSGeo/proj.4/compare/master...kbevers:clang-format-test
LLVM + IndenWidth: 4: https://github.com/OSGeo/proj.4/compare/master...kbevers:clang-format-test2

I tried adding a few other options to see if that would bring down the number of affected lines
by a significant amount but without any luck. I guess that is a testament to how varied the code
formatting is across the many files in the repository.

It is interesting to browse through the diffs of the reformatted code. Generally clang-format does
a good job of reformatting the code but there are of course some situations where the author
of the code has formatted the code very carefully which clang-format disrupts. Arguably that is
a step backwards. At least locally – across the whole codebase the improvements are for the
better!

So to sum up, if we can add an indentation level of 4 spaces on top of the default LLVM style
I would be happy.

/Kristian

Fra: Kurt Schwehr [mailto:schwehr at gmail.com]
Sendt: 27. maj 2018 17:08
Til: Even Rouault <even.rouault at spatialys.com>
Cc: Kristian Evers <kreve at sdfe.dk>; PROJ.4 and general Projections Discussions <proj at lists.maptools.org>
Emne: Re: C++ formatting rules [was Re: [Proj] Use of C++]

+1 to Even's suggestion.

The default is the least complicated setup.  And you can always turn off formatting for small blocks that really need special formatting.  E.g.  a matrix


On Sun, May 27, 2018, 6:45 AM Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:
> For this reason I would ask that some of the
> C++ experts in the community come up with a set of coding guidelines for
> the C++ parts of the code base. Lately the lack of code formatting
> conventions in PROJ has been frustrating to several contributors. With the
> addition of the new C++ parts of the code we have the chance to at least
> include conventions for the C++ code. I know this has been a topic for GDAL
> recently and since we have a big overlap with the GDAL community perhaps we
> can benefit from their experiences. Kurt and Even, I believe you’ve been
> involved in improving the GDAL code formatting rules, would one of you be
> willing to suggest something that we can use in PROJ? A good starting
> point, I guess, would be
> https://trac.osgeo.org/gdal/wiki/rfc69_cplusplus_formatting.
>

One possibility would be to claim "this project has no particular C++ code
formating rules. Do reasonable things [1]". But I'm afraid that won't be
enough.

I've experimented a bit with the suggested clang-format. Basically why not
just using it in its default setup (LLVM style), without a particular .clang-
format ?

And have a scripts/autoformat.sh [2], to autoreformat things. Travis-CI could
run it, and bail out if a file has been reformatted.

Equivalently to my above adhoc script, I also see there is a 'git clang-
format' tool that automatically runs clang-format on files that have been git
added. Actually when testing it it seems to run it only on the parts you
changed, probably to avoid causing code churn in non-modified parts: cf
https://electronjs.org/docs/development/clang-format

That said there might be a slight risk of output instability depending on the
clang-format version. I've tried with the one of LLVM 3.7, 3.8 and 7dev
The good news is that the output of 3.8 and 7dev is identical on the .cpp
files I've sketched.

There was a difference with 3.7 and later versions regarding include sorting
header (with 3.7, in foo.cpp, include "foo.h" must come first, whereas later
versions insist on includes being sorted, accepting as an exception that
"foo.h" is first, probably for compat with 3.7...). But 3.7 can probably be
considered ancient, so let's aim for >= 3.8

Even

[1] Reminds me of road signs in Montana "Drive at reasonable speed"...

[2]

#!/bin/sh
set -eu
clang-format $1 > $1.reformatted
if diff -u $1.reformatted $1; then
    # No reformatting: remove temporary file
    rm $1.reformatted
else
    # Differences. Backup original file, and use reformatted file
    cp $1 $1.before_reformat
    mv $1.reformatted $1
fi



--
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180528/873890df/attachment.html>

From even.rouault at spatialys.com  Mon May 28 05:40:33 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 28 May 2018 14:40:33 +0200
Subject: [Proj] C++ formatting rules [was Re:  Use of C++]
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAED5C48A@S000014.PROD.SITAD.DK>
References: <12741547.ZcDyIibSYp@even-i700>
	<CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAED5C48A@S000014.PROD.SITAD.DK>
Message-ID: <2532447.moK9JJutKI@even-i700>

Hi,

I've also a slight preference for 4 space indentation. I'll change my 
formatting script to use

-style="{BasedOnStyle: llvm, IndentWidth: 4}" 

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Mon May 28 06:23:22 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 28 May 2018 06:23:22 -0700
Subject: [Proj] C++ formatting rules [was Re:  Use of C++]
In-Reply-To: <2532447.moK9JJutKI@even-i700>
References: <12741547.ZcDyIibSYp@even-i700>
	<CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAED5C48A@S000014.PROD.SITAD.DK>
	<2532447.moK9JJutKI@even-i700>
Message-ID: <CACmBxysS5HFTu-1=EQCNoXKyYWTQzgOVgNhyTTY6YCYe5+xyjA@mail.gmail.com>

I thought it was only the Google style that is 2... 4 is fine by me.  I am
probably the only contribute who prefers 2.

On Mon, May 28, 2018, 5:40 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi,
>
> I've also a slight preference for 4 space indentation. I'll change my
> formatting script to use
>
> -style="{BasedOnStyle: llvm, IndentWidth: 4}"
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180528/11eeaae7/attachment.html>

From charles at karney.com  Mon May 28 06:28:10 2018
From: charles at karney.com (Charles Karney)
Date: Mon, 28 May 2018 09:28:10 -0400
Subject: [Proj] C++ formatting rules [was Re: Use of C++]
In-Reply-To: <CACmBxysS5HFTu-1=EQCNoXKyYWTQzgOVgNhyTTY6YCYe5+xyjA@mail.gmail.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAED5C48A@S000014.PROD.SITAD.DK>
	<2532447.moK9JJutKI@even-i700>
	<CACmBxysS5HFTu-1=EQCNoXKyYWTQzgOVgNhyTTY6YCYe5+xyjA@mail.gmail.com>
Message-ID: <380181fc-ee20-b856-07ed-65c7b290ee01@karney.com>

I prefer an indentation of 2 also -- it makes sticking to 80 cols
easier.

On 05/28/2018 09:23 AM, Kurt Schwehr wrote:
> I thought it was only the Google style that is 2... 4 is fine by me.  I 
> am probably the only contribute who prefers 2.
> 
> On Mon, May 28, 2018, 5:40 AM Even Rouault <even.rouault at spatialys.com 
> <mailto:even.rouault at spatialys.com>> wrote:
> 
>     Hi,
> 
>     I've also a slight preference for 4 space indentation. I'll change my
>     formatting script to use
> 
>     -style="{BasedOnStyle: llvm, IndentWidth: 4}"
> 
>     Even
> 
>     -- 
>     Spatialys - Geospatial professional services
>     http://www.spatialys.com
> 


From vincent.mora at oslandia.com  Mon May 28 07:34:34 2018
From: vincent.mora at oslandia.com (Vincent Mora)
Date: Mon, 28 May 2018 16:34:34 +0200
Subject: [Proj] C++ formatting rules [was Re: Use of C++]
In-Reply-To: <380181fc-ee20-b856-07ed-65c7b290ee01@karney.com>
References: <12741547.ZcDyIibSYp@even-i700>
	<CACmBxyv6ocH=jSksoozsowkKb9ZyDe3bBNBkZi3Sk1q-PSPwNQ@mail.gmail.com>
	<2E885BB293AF0448A0181138489E9A0EAED5C48A@S000014.PROD.SITAD.DK>
	<2532447.moK9JJutKI@even-i700>
	<CACmBxysS5HFTu-1=EQCNoXKyYWTQzgOVgNhyTTY6YCYe5+xyjA@mail.gmail.com>
	<380181fc-ee20-b856-07ed-65c7b290ee01@karney.com>
Message-ID: <39f7a90d-f551-207a-6d94-414b52605538@oslandia.com>



Le 28/05/2018 à 15:28, Charles Karney a écrit :
> I prefer an indentation of 2 also -- it makes sticking to 80 cols
> easier.
But it's a bit against the spirit isn't it : indent 8 cols + 80 cols
limit == nesting is bad 4 u

;)


From martin.desruisseaux at geomatys.com  Tue May 29 00:31:35 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 29 May 2018 09:31:35 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <2686312.rjlZ7LtGBf@even-i700>
References: <6101354.sXx80I9jAB@even-i700>
	<684cc3aa-9bc2-1654-ded8-c07b264db444@geomatys.com>
	<2686312.rjlZ7LtGBf@even-i700>
Message-ID: <e512d905-634d-7c64-3938-aefa750225d0@geomatys.com>

Le 27/05/2018 à 20:11, Even Rouault a écrit :
>> One quick comment: it may be worth to move CI_Citation, EX_Extent and
>> MD_Identifier, currently in "common", to their own "metadata" package.
> OK, done

I think that the "CI_", "EX_" and "MD_" prefixes can be omitted. They
duplicate namespaces/packages in C++/Java and recent ISO/TC211 policy
(in my understanding) is to drop them in newer standards. For example
"Datum" in ISO 19111:2018 was "CD_Datum" in ISO 19111:2007.

PositionalAccuracy (currently in "common" namespace) belong to
"metadata" namespace too.

Regarding the object ownership discussion, one more criterion that may
be worth to consider is whether the proposed alternatives support cyclic
references. For example ProjectedCRS.conversion references a Conversion
object, which could in turn reference back the ProjectedCRS in its
Conversion.targetCRS attribute. ISO 19111 allows to break this
circularity by allowing Conversion.source/targetCRS to be null in such
cases. But I find convenient to nevertheless provide the reference value
when the language/framework support cyclic references since it makes
easier to use a Conversion instance without carrying extra information
about its context. Circularity may also happen in ISO 19115 metadata,
e.g. between Platform and Instrument classes.

    Martin




From martin.desruisseaux at geomatys.com  Tue May 29 00:37:22 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 29 May 2018 09:37:22 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <e512d905-634d-7c64-3938-aefa750225d0@geomatys.com>
References: <6101354.sXx80I9jAB@even-i700>
	<684cc3aa-9bc2-1654-ded8-c07b264db444@geomatys.com>
	<2686312.rjlZ7LtGBf@even-i700>
	<e512d905-634d-7c64-3938-aefa750225d0@geomatys.com>
Message-ID: <0400542b-b99d-823f-d86e-110ec81079dc@geomatys.com>

Le 29/05/2018 à 09:31, Martin Desruisseaux a écrit :

> PositionalAccuracy (currently in "common" namespace) belong to
> "metadata" namespace too.
>
Oups! I forgot that it moved in another standard, ISO 19157. So it would
rather be a new "quality" namespace. But quality information could also
be considered as a kind of metadata; I'm neutral on that.

    Martin




From even.rouault at spatialys.com  Tue May 29 03:10:30 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 29 May 2018 12:10:30 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <e512d905-634d-7c64-3938-aefa750225d0@geomatys.com>
References: <6101354.sXx80I9jAB@even-i700> <2686312.rjlZ7LtGBf@even-i700>
	<e512d905-634d-7c64-3938-aefa750225d0@geomatys.com>
Message-ID: <4133444.9EKgCNhmn2@even-i700>

> I think that the "CI_", "EX_" and "MD_" prefixes can be omitted. They
> duplicate namespaces/packages in C++/Java and recent ISO/TC211 policy
> (in my understanding) is to drop them in newer standards. For example
> "Datum" in ISO 19111:2018 was "CD_Datum" in ISO 19111:2007.

Yes, sounds reasonable

> 
> PositionalAccuracy (currently in "common" namespace) belong to
> "metadata" namespace too.

OK

> 
> Regarding the object ownership discussion, one more criterion that may
> be worth to consider is whether the proposed alternatives support cyclic
> references. For example ProjectedCRS.conversion references a Conversion
> object, which could in turn reference back the ProjectedCRS in its
> Conversion.targetCRS attribute. ISO 19111 allows to break this
> circularity by allowing Conversion.source/targetCRS to be null in such
> cases. But I find convenient to nevertheless provide the reference value
> when the language/framework support cyclic references since it makes
> easier to use a Conversion instance without carrying extra information
> about its context.

Yes, that's an annoying point I noticed yesterday when looking more closely at 
this, since cyclic references are unfriendly with shared pointers.

The solution is that CoordinateOperation stores sourceCRS and targetCRS as 
std::weak_ptr internally. In the sourceCRS() and targetCRS() getters, those 
weak pointers are converted to shared pointers with .lock() (the 
shared_pointer being then potentially null if the owning ProjectedCRS has been 
destroyed in between). So users of the API only see shared pointers. And add  
a documentation note of sourceCRS() and targetCRS() about the particular case 
of ProjectedCRS.derivingConversion.

Bonus point: when the CoordinateOperation is created in all other contexts 
than the derivingConversion of a ProjectedCRS, then CoordinateOperation can 
also have internal shared_ptr so as to make sure than the source and target 
CRS are kept alive, and the weak_ptr conversion to a shared_one always return 
a non null pointer.

Attached a POC (simplified but representative of the above situation) that 
works pretty well: no memory leak, and safe pointer usage.


> Circularity may also happen in ISO 19115 metadata,
> e.g. between Platform and Instrument classes.

OK. I don't think I'll need those ones. Enough classes for now !

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: testweak.cpp
Type: text/x-c++src
Size: 2387 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/816dafd2/attachment.cpp>

From mateusz at loskot.net  Tue May 29 05:02:24 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 14:02:24 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <4133444.9EKgCNhmn2@even-i700>
References: <6101354.sXx80I9jAB@even-i700> <2686312.rjlZ7LtGBf@even-i700>
	<e512d905-634d-7c64-3938-aefa750225d0@geomatys.com>
	<4133444.9EKgCNhmn2@even-i700>
Message-ID: <CABUeae8orVgM7LwGzZ_vnhgCPdRGE7FiQ+GX2mGp01xBp2=t_w@mail.gmail.com>

On 29 May 2018 at 12:10, Even Rouault <even.rouault at spatialys.com> wrote:
>>
>> Regarding the object ownership discussion, one more criterion that may
>> be worth to consider is whether the proposed alternatives support cyclic
>> references. For example ProjectedCRS.conversion references a Conversion
>> object, which could in turn reference back the ProjectedCRS in its
>> Conversion.targetCRS attribute. ISO 19111 allows to break this
>> circularity by allowing Conversion.source/targetCRS to be null in such
>> cases. But I find convenient to nevertheless provide the reference value
>> when the language/framework support cyclic references since it makes
>> easier to use a Conversion instance without carrying extra information
>> about its context.
>
> Yes, that's an annoying point I noticed yesterday when looking more closely at
> this, since cyclic references are unfriendly with shared pointers.
>
> The solution is that CoordinateOperation stores sourceCRS and targetCRS as
> std::weak_ptr internally. In the sourceCRS() and targetCRS() getters, those
> weak pointers are converted to shared pointers with .lock() (the
> shared_pointer being then potentially null if the owning ProjectedCRS has been
> destroyed in between). So users of the API only see shared pointers. And add
> a documentation note of sourceCRS() and targetCRS() about the particular case
> of ProjectedCRS.derivingConversion.

The dual mode of the Conversion class obscurse the interface a bit.
Since the Conversion::sourceCRS result can be empty
it now has basically a raw pointer semantic veiled behind shared_ptr.

IOW, a user writes function taking ConversionPtr, she must take the
dual-mode into account - but will she, if she sees the function
returns shared_ptr?

void foo(ConversionPtr c)
{
    auto src = c->sourceCRS();
    if (!src) throw std::invalid_argument("empty source CRS");
    //...
}

The Conversion class kind of breaks the Liskov substitution principle too,
as it defines two kinds of types (behaviours).

On note on the class inteface side:
I'd suggest to avoid boolean types for arguments controlling ownership
behaviour,
especially booleans with default values,
and especially for controlling crucial behaviours.

I mean, whenever I see prototypes like this, it's a code smell to my senses:

static ConversionPtr create(CRSPtr crs, bool
creatorStoresConversionInternally = false)


It makes a bit bad interface and client code error prone,
raises questions, makes code harder to read and reason about.
There are two modes, but three invocation conventions:

Conversion::Create(p)
Conversion::Create(p, true)
Conversion::Create(p, false)

The C++ library could bundle shared_ptr and weak_ptr into one type with extra
constructor arguments, but they didn't for reason.

For crucial behaviours, an explicit interface and usage intention is better, eg.

enum class Ownership { None, Steal };
static ConversionPtr create(CRSPtr crs, Ownership own);

I sense there may be more classes where such dual ownership mode will be
required to avoid cycles, then the sane enum and pattern could be used
and user can quickly learn what it means when she sees it in the code.

> Attached a POC (simplified but representative of the above situation) that
> works pretty well: no memory leak, and safe pointer usage.

It does, because std::shared_ptr is a garbage collector :-)
the Java way to deal with unspecified lifetime of objects.


Has it been considered to use some sort of in-memory registry (a singleton)
to  manage CRS objects with its users (ProjectedCRS, Conversion)
defined as observers?
The whole CRS hierarchy feels like objects for plain state only. So,
it feels like
there is a pool with shared immutable data could be used (or Flyweight pattern).

Another design improvement that may help to avoid cycles is to prefer passing
any objects with extrinsic states to methods directly, instead of storing as
members of client class/object.

Has it been simulated what would be incurret cost of not using shared_ptr
and using just copyable/moveable objects, or a smart pointer with value
semantic (with some uses of value_ptr if necessary).

I am certainly just looking at scrapes and not I haven't considered complete
design (I haven't even skimmed the ISO 19111), so I may be missing lots.
I just have an impression that shared_ptr-based garbage collection has
been adopted too eagerly.
It's so awesome, that once it's in, it's impossible to get rid of it :-)

"The obvious answer is not to use shared_ptr to objects which themselves might
contain a shared_ptr. shared_ptr is somewhat special, and should be
used sparingly."
- James Kanze (https://stackoverflow.com/a/9393099/151641)

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From even.rouault at spatialys.com  Tue May 29 05:28:56 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 29 May 2018 14:28:56 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <CABUeae8orVgM7LwGzZ_vnhgCPdRGE7FiQ+GX2mGp01xBp2=t_w@mail.gmail.com>
References: <6101354.sXx80I9jAB@even-i700> <4133444.9EKgCNhmn2@even-i700>
	<CABUeae8orVgM7LwGzZ_vnhgCPdRGE7FiQ+GX2mGp01xBp2=t_w@mail.gmail.com>
Message-ID: <3769264.JqHezskdrk@even-i700>

Mateusz,

> The dual mode of the Conversion class obscurse the interface a bit.
> Since the Conversion::sourceCRS result can be empty
> it now has basically a raw pointer semantic veiled behind shared_ptr.
> 
> IOW, a user writes function taking ConversionPtr, she must take the
> dual-mode into account - but will she, if she sees the function
> returns shared_ptr?
> 
> void foo(ConversionPtr c)
> {
>     auto src = c->sourceCRS();
>     if (!src) throw std::invalid_argument("empty source CRS");
>     //...
> }
> 
> The Conversion class kind of breaks the Liskov substitution principle too,
> as it defines two kinds of types (behaviours).

That's annoying, but I can't see how to do better. This comes from the 
modelization itself. A shared_ptr isn't assumed to hold always a non null 
pointer.

> I mean, whenever I see prototypes like this, it's a code smell to my senses:
> 
> static ConversionPtr create(CRSPtr crs, bool
> creatorStoresConversionInternally = false)

That was  just for the sake of a quick POC. Likely not the final interface.

> For crucial behaviours, an explicit interface and usage intention is better,
> eg.
> 
> enum class Ownership { None, Steal };
> static ConversionPtr create(CRSPtr crs, Ownership own);
> 
> I sense there may be more classes where such dual ownership mode will be
> required to avoid cycles,

Hopefully not.

> then the sane enum and pattern could be used
> and user can quickly learn what it means when she sees it in the code.

Users of the API should not have to deal with this. Objection construction 
will be hidden by appropriate helpers.

> 
> Has it been considered to use some sort of in-memory registry (a singleton)
> to  manage CRS objects with its users (ProjectedCRS, Conversion)
> defined as observers?
> The whole CRS hierarchy feels like objects for plain state only. So,
> it feels like
> there is a pool with shared immutable data could be used (or Flyweight
> pattern).
> 

A pool could be used, but I don't think that's needed at the PROJ level for 
now.

> Has it been simulated what would be incurret cost of not using shared_ptr
> and using just copyable/moveable objects

Compared to the initial approach ofusing copyable objects, there is a slight 
performance improvement (see http://lists.maptools.org/pipermail/proj/2018-May/008258.html), but that's not my main motivation.

> , or a smart pointer with value
> semantic (with some uses of value_ptr if necessary).

Not sure to know what you are refering too here.

> 
> I am certainly just looking at scrapes and not I haven't considered complete
> design (I haven't even skimmed the ISO 19111), so I may be missing lots. I
> just have an impression that shared_ptr-based garbage collection has been
> adopted too eagerly.
> It's so awesome, that once it's in, it's impossible to get rid of it :-)
> 

I'll stick with shared pointers though, as they are working, and we can't have 
pointers to rogue memory and all other pitfalls. Any other solution will have 
also its advantages & drawbacks anyway (one feedback in another thread was 
that GDAL C++ was confusing regarding object ownership)
Another main reason is that the UML modelling from which this is derived from 
has probably be done with Java in mind as an implementation target. So shared 
pointers are the closest tool we have to emulate Java garbage collection.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From martin.desruisseaux at geomatys.com  Tue May 29 06:01:41 2018
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 29 May 2018 15:01:41 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <3769264.JqHezskdrk@even-i700>
References: <6101354.sXx80I9jAB@even-i700> <4133444.9EKgCNhmn2@even-i700>
	<CABUeae8orVgM7LwGzZ_vnhgCPdRGE7FiQ+GX2mGp01xBp2=t_w@mail.gmail.com>
	<3769264.JqHezskdrk@even-i700>
Message-ID: <6d1344b5-a623-aceb-e516-427c0ca3cd13@geomatys.com>

Le 29/05/2018 à 14:28, Even Rouault a écrit :

> Another main reason is that the UML modelling from which this is
> derived from has probably be done with Java in mind as an
> implementation target. So shared pointers are the closest tool we have
> to emulate Java garbage collection.
>
Actually the design is a little bit more abstract. Normally (unless we
did a mistake in the model), there is no requirement to use a garbage
collector or not; the choice is up to implementer. ISO 19111 allows
implementations without garbage collector by allowing some pointers to
be null, for breaking cycles. For example, on a conceptual point of view
Conversion.source/targetCRS should never be null. But in practice ISO
19111 nevertheless declares those associations as optional for
implementers who want to avoid cycles between Conversion and ProjectedCRS.

So the choice for PROJ may be:

  * Avoid cycles as allowed by ISO 19111, at the cost of some
    inconveniences (e.g. usages of Conversion objects may require more
    contextual information).
  * More convenient Conversion objects, at the cost of cyclic references.

ProjectedCRS ⇋ Conversion is the main potential cycle I'm aware of.
There may be another one in the new classes related to point motions or
vertical transformations, but I'm not sure (I'm not yet familiar enough
with that new part).

    Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/fc3e171c/attachment.html>

From mateusz at loskot.net  Tue May 29 09:12:16 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 18:12:16 +0200
Subject: [Proj] C++ coding practices w.r.t object ownership
In-Reply-To: <6d1344b5-a623-aceb-e516-427c0ca3cd13@geomatys.com>
References: <6101354.sXx80I9jAB@even-i700> <4133444.9EKgCNhmn2@even-i700>
	<CABUeae8orVgM7LwGzZ_vnhgCPdRGE7FiQ+GX2mGp01xBp2=t_w@mail.gmail.com>
	<3769264.JqHezskdrk@even-i700>
	<6d1344b5-a623-aceb-e516-427c0ca3cd13@geomatys.com>
Message-ID: <CABUeae-3vz4qjXBcH1KtNXpRXQSUqU2puMK==-Jo0HviWS2O9w@mail.gmail.com>

On 29 May 2018 at 15:01, Martin Desruisseaux
<martin.desruisseaux at geomatys.com> wrote:
> Le 29/05/2018 à 14:28, Even Rouault a écrit :
>>
>> Another main reason is that the UML modelling from which this is derived
>> from has probably be done with Java in mind as an implementation target. So
>> shared pointers are the closest tool we have to emulate Java garbage
>> collection.
>
> Actually the design is a little bit more abstract. Normally (unless we did a
> mistake in the model), there is no requirement to use a garbage collector or
> not; the choice is up to implementer. ISO 19111 allows implementations
> without garbage collector by allowing some pointers to be null, for breaking
> cycles. For example, on a conceptual point of view
> Conversion.source/targetCRS should never be null. But in practice ISO 19111
> nevertheless declares those associations as optional for implementers who
> want to avoid cycles between Conversion and ProjectedCRS.

In such case, final version of the Even's POC should/could state
the implementation requirement more explicitly, eg.

CRSPtr sourceCRS() const
{
    if (auto p = crsWeak_.lock())
        return p;
    else
        throw std::logic_error("dereferencing expired pointer");
}

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From even.rouault at spatialys.com  Tue May 29 10:15:14 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 29 May 2018 19:15:14 +0200
Subject: [Proj] Testing framework
Message-ID: <4393072.BcZsAnsfFg@even-i700>

Hi,

I was researching a framework to test my new code (and that could also be used 
to test the existing C API if needed). Currently src/gie.c has ad-hoc testing, 
but it is really limited feature-wise: no nice error message (returns error 
code), no way to make a testcase go on even if a test check fails, etc...

So a dedicated framework seems a better idea, and I've found catch2 :
	https://github.com/catchorg/Catch2/blob/master/docs/Readme.md

One of its main feature it is a header only testing framework, which means we 
can embed it easily in proj source tree, which is practical compared to other 
frameworks I've considered ( googletest, cppunit,  etc... ).
The tut framework used by GDAL and GEOS
( http://mrzechonek.github.io/tut-framework ) would also enter this category 
of header(s) only, but it has not as much as activity than catch2.
There's also Boost.Test, but I was a bit afraid with the boost name in it 
(although apparently it has a standalone mode).

Example of tests I've just written with catch2 (just a minimalistic use of the 
testing framework)
https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp

I'm not particularly calling for a flame debate on the suject, just wanting to 
mention this finding.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From kreve at sdfe.dk  Tue May 29 10:25:25 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 29 May 2018 17:25:25 +0000
Subject: [Proj] Testing framework
In-Reply-To: <4393072.BcZsAnsfFg@even-i700>
References: <4393072.BcZsAnsfFg@even-i700>
Message-ID: <4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>

Even,

Your timing is perfect. I was literally just typing up a long email about improving
the test situation in PROJ right now! I was going to propose a larger restructuring
of the tests we already have as well as adding a dedicated testing framework for
testing API functions etc. You’ve taken care of the latter and most pressing issue.
I’ll address the rest of my proposal at a later time I think.

I have only looked briefly at catch2 but it seems good to me. I am happy that you’ve
put your tests in test/.

/Kristian

> On 29 May 2018, at 19:15, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Hi,
> 
> I was researching a framework to test my new code (and that could also be used 
> to test the existing C API if needed). Currently src/gie.c has ad-hoc testing, 
> but it is really limited feature-wise: no nice error message (returns error 
> code), no way to make a testcase go on even if a test check fails, etc...
> 
> So a dedicated framework seems a better idea, and I've found catch2 :
> 	https://github.com/catchorg/Catch2/blob/master/docs/Readme.md
> 
> One of its main feature it is a header only testing framework, which means we 
> can embed it easily in proj source tree, which is practical compared to other 
> frameworks I've considered ( googletest, cppunit,  etc... ).
> The tut framework used by GDAL and GEOS
> ( http://mrzechonek.github.io/tut-framework ) would also enter this category 
> of header(s) only, but it has not as much as activity than catch2.
> There's also Boost.Test, but I was a bit afraid with the boost name in it 
> (although apparently it has a standalone mode).
> 
> Example of tests I've just written with catch2 (just a minimalistic use of the 
> testing framework)
> https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp
> 
> I'm not particularly calling for a flame debate on the suject, just wanting to 
> mention this finding.
> 
> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj


From mateusz at loskot.net  Tue May 29 10:43:03 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 19:43:03 +0200
Subject: [Proj] Testing framework
In-Reply-To: <4393072.BcZsAnsfFg@even-i700>
References: <4393072.BcZsAnsfFg@even-i700>
Message-ID: <CABUeae9xwfbXWRwAgzWZtbvJ2iNVkjEYROgUSn2m4J8wstvQaA@mail.gmail.com>

Hi,

(sorry for top-posting, writing from rubbish mobile gmail)

As initial creator of GEOS tests who introduced TUT, I recommend to not to
use TUT. So, Even, good you don't.
It has been added ages ago when there where no decent lightweight testing
frameworks alternatives.

I use Boost.Test, Catch and Google Test, all have pros and cons, there's no
clear winner regarding features, IMHO.

Regarding Catch, I suggest to use Catch2, not 1.x line.

Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)

On 29 May 2018 7:16 pm, "Even Rouault" <even.rouault at spatialys.com> wrote:

Hi,

I was researching a framework to test my new code (and that could also be
used
to test the existing C API if needed). Currently src/gie.c has ad-hoc
testing,
but it is really limited feature-wise: no nice error message (returns error
code), no way to make a testcase go on even if a test check fails, etc...

So a dedicated framework seems a better idea, and I've found catch2 :
        https://github.com/catchorg/Catch2/blob/master/docs/Readme.md

One of its main feature it is a header only testing framework, which means
we
can embed it easily in proj source tree, which is practical compared to
other
frameworks I've considered ( googletest, cppunit,  etc... ).
The tut framework used by GDAL and GEOS
( http://mrzechonek.github.io/tut-framework ) would also enter this
category
of header(s) only, but it has not as much as activity than catch2.
There's also Boost.Test, but I was a bit afraid with the boost name in it
(although apparently it has a standalone mode).

Example of tests I've just written with catch2 (just a minimalistic use of
the
testing framework)
https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp

I'm not particularly calling for a flame debate on the suject, just wanting
to
mention this finding.


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/39754395/attachment.html>

From mateusz at loskot.net  Tue May 29 11:02:02 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 20:02:02 +0200
Subject: [Proj] Testing framework
In-Reply-To: <4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
Message-ID: <CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>

Kristian, as you know, I've been considering PROJ API tests.
I assumed it would must be in C, so an obvious choice was cunit (as used in
PostGIS for instance). I haven't arrived with anything though.

It's just a comment, not recommendation to stick with C and cunit.

Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)

On Tue, 29 May 2018, 19:26 Kristian Evers, <kreve at sdfe.dk> wrote:

> Even,
>
> Your timing is perfect. I was literally just typing up a long email about
> improving
> the test situation in PROJ right now! I was going to propose a larger
> restructuring
> of the tests we already have as well as adding a dedicated testing
> framework for
> testing API functions etc. You’ve taken care of the latter and most
> pressing issue.
> I’ll address the rest of my proposal at a later time I think.
>
> I have only looked briefly at catch2 but it seems good to me. I am happy
> that you’ve
> put your tests in test/.
>
> /Kristian
>
> > On 29 May 2018, at 19:15, Even Rouault <even.rouault at spatialys.com>
> wrote:
> >
> > Hi,
> >
> > I was researching a framework to test my new code (and that could also
> be used
> > to test the existing C API if needed). Currently src/gie.c has ad-hoc
> testing,
> > but it is really limited feature-wise: no nice error message (returns
> error
> > code), no way to make a testcase go on even if a test check fails, etc...
> >
> > So a dedicated framework seems a better idea, and I've found catch2 :
> >       https://github.com/catchorg/Catch2/blob/master/docs/Readme.md
> >
> > One of its main feature it is a header only testing framework, which
> means we
> > can embed it easily in proj source tree, which is practical compared to
> other
> > frameworks I've considered ( googletest, cppunit,  etc... ).
> > The tut framework used by GDAL and GEOS
> > ( http://mrzechonek.github.io/tut-framework ) would also enter this
> category
> > of header(s) only, but it has not as much as activity than catch2.
> > There's also Boost.Test, but I was a bit afraid with the boost name in
> it
> > (although apparently it has a standalone mode).
> >
> > Example of tests I've just written with catch2 (just a minimalistic use
> of the
> > testing framework)
> >
> https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp
> >
> > I'm not particularly calling for a flame debate on the suject, just
> wanting to
> > mention this finding.
> >
> > Even
> >
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > Proj mailing list
> > Proj at lists.maptools.org
> > http://lists.maptools.org/mailman/listinfo/proj
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/14e19bdb/attachment.html>

From schwehr at gmail.com  Tue May 29 11:22:23 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 29 May 2018 11:22:23 -0700
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae9xwfbXWRwAgzWZtbvJ2iNVkjEYROgUSn2m4J8wstvQaA@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<CABUeae9xwfbXWRwAgzWZtbvJ2iNVkjEYROgUSn2m4J8wstvQaA@mail.gmail.com>
Message-ID: <CACmBxysjbak1ANauzTjfQUdmqbbpdHoAh5o5xJy06Qx9cRiMyg@mail.gmail.com>

My requests:

1. Please do not use Boost.Test.  I can't use that in my bazel based env
(at least without suffering some serious pain)
2. Please do not use a pure C based framework (e.g. Mateusz's comment about
cunit)

I personally prefer GoogleTest + https://github.com/google/benchmark, but
that's probably not surprising given that I work at Google :)

I see a few projects using Catch2, so I can adopt those tests easier than I
did with TUT.  I got TUT working under bazel, but it wasn't fun.

Any way you cut it, it's not too big of a deal to have a third_party/ tree
for the testing framework.  They are all pretty small.

If Proj goes with GoogleTest (gunit), I have these:

https://github.com/schwehr/gdal-autotest2/tree/master/cpp/third_party/proj

I'd be happy to submit any of them to Proj under the Proj license.  I'm
just using gdal-autotest2 as a place to let folks see them.  I also use
python's unittest to driving testing binary command lines.  They aren't the
most exciting tests ever and not much coverage yet, but they help to keep
my stress level to a minimum. Some of these will take a little bit of
cleanup to remove some Google specific things like how to find gie files.



On Tue, May 29, 2018 at 10:43 AM, Mateusz Loskot <mateusz at loskot.net> wrote:

> Hi,
>
> (sorry for top-posting, writing from rubbish mobile gmail)
>
> As initial creator of GEOS tests who introduced TUT, I recommend to not to
> use TUT. So, Even, good you don't.
> It has been added ages ago when there where no decent lightweight testing
> frameworks alternatives.
>
> I use Boost.Test, Catch and Google Test, all have pros and cons, there's
> no clear winner regarding features, IMHO.
>
> Regarding Catch, I suggest to use Catch2, not 1.x line.
>
> Mateusz Loskot, mateusz at loskot.net
> (Sent from mobile)
>
> On 29 May 2018 7:16 pm, "Even Rouault" <even.rouault at spatialys.com> wrote:
>
> Hi,
>
> I was researching a framework to test my new code (and that could also be
> used
> to test the existing C API if needed). Currently src/gie.c has ad-hoc
> testing,
> but it is really limited feature-wise: no nice error message (returns
> error
> code), no way to make a testcase go on even if a test check fails, etc...
>
> So a dedicated framework seems a better idea, and I've found catch2 :
>         https://github.com/catchorg/Catch2/blob/master/docs/Readme.md
>
> One of its main feature it is a header only testing framework, which means
> we
> can embed it easily in proj source tree, which is practical compared to
> other
> frameworks I've considered ( googletest, cppunit,  etc... ).
> The tut framework used by GDAL and GEOS
> ( http://mrzechonek.github.io/tut-framework ) would also enter this
> category
> of header(s) only, but it has not as much as activity than catch2.
> There's also Boost.Test, but I was a bit afraid with the boost name in it
> (although apparently it has a standalone mode).
>
> Example of tests I've just written with catch2 (just a minimalistic use of
> the
> testing framework)
> https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp
>
> I'm not particularly calling for a flame debate on the suject, just
> wanting to
> mention this finding.
>
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/64e7061f/attachment.html>

From kreve at sdfe.dk  Tue May 29 11:24:59 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 29 May 2018 18:24:59 +0000
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
Message-ID: <B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>

Mateusz,

That was a good assumption at the time :-) Things are a little bit different now.
It would seem that Catch2 is also good for C code, yes? Obviously compiled
with a C++ compiler. The documentation is a bit vague on this (it just says that
maybe it works).

I am working on a proposal to improve testing of the existing code. So far I have
been working under the assumption that Catch2 would work for testing the
C code we have now. If not I will change that to cunit but it would definitely be
nice to just use one framework.

/Kristian

On 29 May 2018, at 20:02, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

Kristian, as you know, I've been considering PROJ API tests.
I assumed it would must be in C, so an obvious choice was cunit (as used in PostGIS for instance). I haven't arrived with anything though.

It's just a comment, not recommendation to stick with C and cunit.

Mateusz Loskot, mateusz at loskot.net<mailto:mateusz at loskot.net>
(Sent from mobile)

On Tue, 29 May 2018, 19:26 Kristian Evers, <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Even,

Your timing is perfect. I was literally just typing up a long email about improving
the test situation in PROJ right now! I was going to propose a larger restructuring
of the tests we already have as well as adding a dedicated testing framework for
testing API functions etc. You’ve taken care of the latter and most pressing issue.
I’ll address the rest of my proposal at a later time I think.

I have only looked briefly at catch2 but it seems good to me. I am happy that you’ve
put your tests in test/.

/Kristian

> On 29 May 2018, at 19:15, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:
>
> Hi,
>
> I was researching a framework to test my new code (and that could also be used
> to test the existing C API if needed). Currently src/gie.c has ad-hoc testing,
> but it is really limited feature-wise: no nice error message (returns error
> code), no way to make a testcase go on even if a test check fails, etc...
>
> So a dedicated framework seems a better idea, and I've found catch2 :
>       https://github.com/catchorg/Catch2/blob/master/docs/Readme.md
>
> One of its main feature it is a header only testing framework, which means we
> can embed it easily in proj source tree, which is practical compared to other
> frameworks I've considered ( googletest, cppunit,  etc... ).
> The tut framework used by GDAL and GEOS
> ( http://mrzechonek.github.io/tut-framework ) would also enter this category
> of header(s) only, but it has not as much as activity than catch2.
> There's also Boost.Test, but I was a bit afraid with the boost name in it
> (although apparently it has a standalone mode).
>
> Example of tests I've just written with catch2 (just a minimalistic use of the
> testing framework)
> https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp
>
> I'm not particularly calling for a flame debate on the suject, just wanting to
> mention this finding.
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com<http://www.spatialys.com/>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
> http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/95c5ab05/attachment.html>

From kreve at sdfe.dk  Tue May 29 11:35:47 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 29 May 2018 18:35:47 +0000
Subject: [Proj] Testing framework
In-Reply-To: <B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
Message-ID: <FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>

All,

As hinted in previous mails I have been working on a proposal to improve
testing in general. Here are my thougts on the test setup in PROJ and how we
can improve it. The testing situation in PROJ is not particularly good at the
moment. It is a lot better than a couple of years ago but there is still a lot
that can be improved. Even has already settled on a testing framework for the
new features related to WKT/WKT2- support and later on also the active use of
the EPSG database. That still leaves the rest, which could use a bit of spring
cleaning. I'll try to address that below.

Today we have:

    1. nad/
        Shell scripts that call cs2cs with various input and checks the
        output against a distributed "answer book". These tests does not work
        on Windows (unless using cygwin or something similar).

    2. src/
        Individual programs testing the threading capabilities of PROJ
        (multistresstest.c & test228.c) and the geodesic library (geodtest.c).

    3. test/
        The gie test-suite [0]. Gie was created to make it simpler to write
        test cases for PROJ. A number of test files for gie are present
        in test/gie/ and test/gigs. These are mostly comprised of the auto-
        generated tests from the 'proj -C' selftest that was introduced with
        PROJ 4.9.3 (and removed again in 5.0.0) placed in builtins.gie. A
        handful of other test files have been written adding more "sane" test
        data. As part of the gie test-suite the GIGS [1] test data is included
        as well. Gie is a good environment for testing coordinate conversions
        given a setup string that can go into the proj_create() function.

    4. gie.c
        gie incoorporates some remnants of the selftest of PROJ 4.9.3 that can
        not be translated to the gie test file format. They are mostly simple
        API function tests.

The above tests do a fairly good job of testing coordinate input and output of
transformations. They also directly test a smaller subset of the functions
exposed in proj_api.h and proj.h (mostly the latter). The rest of the functions
are to some extent covered indirectly by the tests in nad/ and gie/. This is
not a particularly good way of testing the functionality of these functions
since edge cases are likely to be missed.

With the adoption of Catch2, as suggested by Even, we should be able to move
the tests from src/ and gie.c to this dedicated framework, preferably somewhere
in the test/ directory to keep things in a logical place separated from the
source code.

I would also like to move the tests in nad/ to test/. Initially they can just
be moved more or less as is but eventually I would like to see them migrated to
the gie format. It is not totally straight-forward but with a bit of scripting
it should be possible to automate. Doing that has the unfortunate side-effect
of not testing the cs2cs application any more since gie works with API
functions. Therefore a dedicated test setup for that is needed. I regard that
as a good thing, since that can also be used with proj, cct and geod.

So in summation my proposed TODO list goes something like:

    1. Move tests from src/ to the Catch2 framework
    2. Move selftest remnants in gie.c to the Catch2 framework
    3. Move shell-script tests in nad/ to test/
    4. Add a test framework for the command line applications, also in test/

Thoughts? What have I missed? Any suggestions on how to test the command line
applications?

[0] https://proj4.org/apps/gie.html
[1] https://www.iogp.org/bookstore/product/geospatial-integrity-of-geoscience-software-part-1-gigs-guidelines/


On 29 May 2018, at 20:24, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:

Mateusz,

That was a good assumption at the time :-) Things are a little bit different now.
It would seem that Catch2 is also good for C code, yes? Obviously compiled
with a C++ compiler. The documentation is a bit vague on this (it just says that
maybe it works).

I am working on a proposal to improve testing of the existing code. So far I have
been working under the assumption that Catch2 would work for testing the
C code we have now. If not I will change that to cunit but it would definitely be
nice to just use one framework.

/Kristian

On 29 May 2018, at 20:02, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

Kristian, as you know, I've been considering PROJ API tests.
I assumed it would must be in C, so an obvious choice was cunit (as used in PostGIS for instance). I haven't arrived with anything though.

It's just a comment, not recommendation to stick with C and cunit.

Mateusz Loskot, mateusz at loskot.net<mailto:mateusz at loskot.net>
(Sent from mobile)

On Tue, 29 May 2018, 19:26 Kristian Evers, <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
Even,

Your timing is perfect. I was literally just typing up a long email about improving
the test situation in PROJ right now! I was going to propose a larger restructuring
of the tests we already have as well as adding a dedicated testing framework for
testing API functions etc. You’ve taken care of the latter and most pressing issue.
I’ll address the rest of my proposal at a later time I think.

I have only looked briefly at catch2 but it seems good to me. I am happy that you’ve
put your tests in test/.

/Kristian

> On 29 May 2018, at 19:15, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:
>
> Hi,
>
> I was researching a framework to test my new code (and that could also be used
> to test the existing C API if needed). Currently src/gie.c has ad-hoc testing,
> but it is really limited feature-wise: no nice error message (returns error
> code), no way to make a testcase go on even if a test check fails, etc...
>
> So a dedicated framework seems a better idea, and I've found catch2 :
>       https://github.com/catchorg/Catch2/blob/master/docs/Readme.md
>
> One of its main feature it is a header only testing framework, which means we
> can embed it easily in proj source tree, which is practical compared to other
> frameworks I've considered ( googletest, cppunit,  etc... ).
> The tut framework used by GDAL and GEOS
> ( http://mrzechonek.github.io/tut-framework ) would also enter this category
> of header(s) only, but it has not as much as activity than catch2.
> There's also Boost.Test, but I was a bit afraid with the boost name in it
> (although apparently it has a standalone mode).
>
> Example of tests I've just written with catch2 (just a minimalistic use of the
> testing framework)
> https://github.com/rouault/proj.4/blob/iso19111_ptr/test/cpp/test_crs.cpp
>
> I'm not particularly calling for a flame debate on the suject, just wanting to
> mention this finding.
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com<http://www.spatialys.com/>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
> http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj
_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/223ecc12/attachment.html>

From mateusz at loskot.net  Tue May 29 11:49:49 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 20:49:49 +0200
Subject: [Proj] Testing framework
In-Reply-To: <B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
Message-ID: <CABUeae_VQ9+vR7th-7QCOZ2m2ka0Frkrnxrir5-yHNm-YFEyfw@mail.gmail.com>

On Tue, 29 May 2018, 20:26 Kristian Evers, <kreve at sdfe.dk> wrote:

> Mateusz,
>
> That was a good assumption at the time :-) Things are a little bit
> different now.
> It would seem that Catch2 is also good for C code, yes?
>


Yes, a C++ testing framework can test C project should generally be fine.
There may be need to for manual resetting of globals, static memory to
ensure one test case does not affect another. The interrupts and signal
handling, if used by target code, may need to some consideration as well.

One general and stylistic comment about Catch, since it supports two modes
of tests classic test cases and BDD style, it may be a good idea to stick
to one of those, not mixing them.
(I personally find the classical test cases easier to write and follow.)

Mateusz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/7a658929/attachment.html>

From schwehr at gmail.com  Tue May 29 12:05:49 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 29 May 2018 12:05:49 -0700
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae_VQ9+vR7th-7QCOZ2m2ka0Frkrnxrir5-yHNm-YFEyfw@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
	<CABUeae_VQ9+vR7th-7QCOZ2m2ka0Frkrnxrir5-yHNm-YFEyfw@mail.gmail.com>
Message-ID: <CACmBxyseQTWCV9W2CosaXHf_n-sykHLGYxXGAY45SPySBNgzzA@mail.gmail.com>

+1 to it being totally okay to test C with C++ frameworks.

One thing to keep in mind with Catch2... it doesn't have a default mocking
setup.  It looks like it's not too big of a deal if FakeIt works (never
looked at it).  Having mocking available makes triggering error conditions
in lower level functionality much easier for higher level calls.  That
certainly shouldn't be a deal breaker, but mocking and faking can be pretty
valuable.

https://github.com/catchorg/Catch2/issues/55

Also worth mentioning is that gMock and Catch2 provide matchers that are
really handy.  I don't know if any of the other frameworks.

e.g.
https://github.com/google/googletest/blob/master/googlemock/docs/CheatSheet.md#matchers
https://github.com/catchorg/Catch2/blob/master/docs/matchers.md

On Tue, May 29, 2018 at 11:49 AM, Mateusz Loskot <mateusz at loskot.net> wrote:

> On Tue, 29 May 2018, 20:26 Kristian Evers, <kreve at sdfe.dk> wrote:
>
>> Mateusz,
>>
>> That was a good assumption at the time :-) Things are a little bit
>> different now.
>> It would seem that Catch2 is also good for C code, yes?
>>
>
>
> Yes, a C++ testing framework can test C project should generally be fine.
> There may be need to for manual resetting of globals, static memory to
> ensure one test case does not affect another. The interrupts and signal
> handling, if used by target code, may need to some consideration as well.
>
> One general and stylistic comment about Catch, since it supports two modes
> of tests classic test cases and BDD style, it may be a good idea to stick
> to one of those, not mixing them.
> (I personally find the classical test cases easier to write and follow.)
>
> Mateusz
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/11a9860a/attachment.html>

From mateusz at loskot.net  Tue May 29 12:14:15 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 21:14:15 +0200
Subject: [Proj] Testing framework
In-Reply-To: <FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
	<FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>
Message-ID: <CABUeae_xTW3yPpttQaT=CbMzc0v5C-wRYUv7STkSn5KQ1a4S3Q@mail.gmail.com>

On Tue, 29 May 2018, 20:37 Kristian Evers, <kreve at sdfe.dk> wrote:

> So in summation my proposed TODO list goes something like:
>
>     1. Move tests from src/ to the Catch2 framework
>     2. Move selftest remnants in gie.c to the Catch2 framework
>     3. Move shell-script tests in nad/ to test/
>     4. Add a test framework for the command line applications, also in
> test/
>
> Thoughts? What have I missed?
>

Although might be to early, but perhaps an outline of tests organization
into suites and cases.

For example:

- test suite per API function - a sort of unit kind of tests focused on
exercising single function (similar tests also could verify definitions of
data structures). Eg. Call foo(a, b) with valid, invalid, boundary, random,
etc. values for parameters.

- test suites of more complex test cases, more complex Arrangements
preparing for actual test as well as more elaborate assertions following a
testing act - I like to think of those as functional tests (function is a
black box) or inter-function integration tests :) Eg.  Verifying conversion
of X from CRS A to B gives expected results, depending on input valid,
invalid, boundary...

To me personally, names and definitions of particular testing do not really
matter as long as there is agreement, at test case level, about what
behaviour is actually being tested and asserted (sticking with single
assertion per test case is a good method to reveal smelly places where it
is hard to tell what is being tested)

Any suggestions on how to test the command line
> applications?
>


Some options:
- extract gist of program logic into utility libraries (technique used in
OSRMand GDAL too, AFAIR)
- run programs directly (either via OS-specific C/C++ API or Python or...)
and parse/check it's output.


Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/064e2a9f/attachment.html>

From kreve at sdfe.dk  Tue May 29 13:02:57 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 29 May 2018 20:02:57 +0000
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae_xTW3yPpttQaT=CbMzc0v5C-wRYUv7STkSn5KQ1a4S3Q@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
	<FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>
	<CABUeae_xTW3yPpttQaT=CbMzc0v5C-wRYUv7STkSn5KQ1a4S3Q@mail.gmail.com>
Message-ID: <6BD3A0AD-A80A-4780-B2F0-F532D69C86AC@sdfe.dk>



On 29 May 2018, at 21:14, Mateusz Loskot <mateusz at loskot.net<mailto:mateusz at loskot.net>> wrote:

On Tue, 29 May 2018, 20:37 Kristian Evers, <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
So in summation my proposed TODO list goes something like:

    1. Move tests from src/ to the Catch2 framework
    2. Move selftest remnants in gie.c to the Catch2 framework
    3. Move shell-script tests in nad/ to test/
    4. Add a test framework for the command line applications, also in test/

Thoughts? What have I missed?

Although might be to early, but perhaps an outline of tests organization into suites and cases.

For example:

- test suite per API function - a sort of unit kind of tests focused on exercising single function (similar tests also could verify definitions of data structures). Eg. Call foo(a, b) with valid, invalid, boundary, random, etc. values for parameters.

- test suites of more complex test cases, more complex Arrangements preparing for actual test as well as more elaborate assertions following a testing act - I like to think of those as functional tests (function is a black box) or inter-function integration tests :) Eg.  Verifying conversion of X from CRS A to B gives expected results, depending on input valid, invalid, boundary…

These considerations need to be made at some point or another. That might as well be now.
I don’t have any particular preference. I think I’ll have to study the docs of Catch2 some more
to see what is recommended and how that translates to PROJ.

Your first point sounds like something we should do at least. We definitely need tests for each
function in the library. The second point, if I understand correctly, is more or less covered by
gie tests.

To me personally, names and definitions of particular testing do not really matter as long as there is agreement, at test case level, about what behaviour is actually being tested and asserted (sticking with single assertion per test case is a good method to reveal smelly places where it is hard to tell what is being tested)

Any suggestions on how to test the command line
applications?


Some options:
- extract gist of program logic into utility libraries (technique used in OSRMand GDAL too, AFAIR)
- run programs directly (either via OS-specific C/C++ API or Python or...) and parse/check it's output.

I think the first option is the preferred way to go. Unfortunately it also involves the most work.
It would allow us to stay within the same framework as the API tests. I think cct and gie are
fairly easy to rewire this way but the same can’t be said for proj and cs2cs. geod is somewhere
in between in difficulty.

The second option is similar to the nad/ tests and those only really work on *nix.
I fear that it would be too much work to keep it working on both Windows and *nix. There are
frameworks that does this sort of thing but I’d rather keep it simple and not introduce more
test frameworks than necessary.


Mateusz Loskot, mateusz at loskot.net<mailto:mateusz at loskot.net>
(Sent from mobile)

_______________________________________________
Proj mailing list
Proj at lists.maptools.org<mailto:Proj at lists.maptools.org>
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180529/4f3030d6/attachment.html>

From mateusz at loskot.net  Tue May 29 13:57:29 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Tue, 29 May 2018 22:57:29 +0200
Subject: [Proj] Testing framework
In-Reply-To: <6BD3A0AD-A80A-4780-B2F0-F532D69C86AC@sdfe.dk>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
	<FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>
	<CABUeae_xTW3yPpttQaT=CbMzc0v5C-wRYUv7STkSn5KQ1a4S3Q@mail.gmail.com>
	<6BD3A0AD-A80A-4780-B2F0-F532D69C86AC@sdfe.dk>
Message-ID: <CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>

On 29 May 2018 at 22:02, Kristian Evers <kreve at sdfe.dk> wrote:
> On 29 May 2018, at 21:14, Mateusz Loskot <mateusz at loskot.net> wrote:
>> On Tue, 29 May 2018, 20:37 Kristian Evers, <kreve at sdfe.dk> wrote:
>>>
>>> So in summation my proposed TODO list goes something like:
>>>
>>>     1. Move tests from src/ to the Catch2 framework
>>>     2. Move selftest remnants in gie.c to the Catch2 framework
>>>     3. Move shell-script tests in nad/ to test/
>>>     4. Add a test framework for the command line applications, also in
>>> test/
>>>
>>> Thoughts? What have I missed?
>>
>>
>> Although might be to early, but perhaps an outline of tests organization
>> into suites and cases.
>>
>> For example:
>>
>> - test suite per API function - a sort of unit kind of tests focused on
>> exercising single function (similar tests also could verify definitions of
>> data structures). Eg. Call foo(a, b) with valid, invalid, boundary, random,
>> etc. values for parameters.
>>
>> - test suites of more complex test cases, more complex Arrangements
>> preparing for actual test as well as more elaborate assertions following a
>> testing act - I like to think of those as functional tests (function is a
>> black box) or inter-function integration tests :) Eg.  Verifying conversion
>> of X from CRS A to B gives expected results, depending on input valid,
>> invalid, boundary…
>
> Your first point sounds like something we should do at least. We definitely
> need tests for each function in the library. The second point, if I understand
> correctly, is more or less covered by gie tests.

Yes, I think so.

Although, there are some cases where such Catch-based functional testing
may be a good idea. For example, verification that pj_init and
pj_init_plus for the
same definition result in equialent instance of projPJ; any kind of verification
of library/object states following interleaved/sequenced API calls;
any kind of round-trips verification with assertions for intermediate results
Such functional tests typically have more assertions per case than unit tests.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From schwehr at gmail.com  Wed May 30 11:36:06 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 30 May 2018 11:36:06 -0700
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
	<FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>
	<CABUeae_xTW3yPpttQaT=CbMzc0v5C-wRYUv7STkSn5KQ1a4S3Q@mail.gmail.com>
	<6BD3A0AD-A80A-4780-B2F0-F532D69C86AC@sdfe.dk>
	<CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>
Message-ID: <CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>

So... Just to state my preference.  I think Google
Test(gtest/gmock/microbenchmark) would be great if PROJ decides to go that
way.  It's been run through the ringer with hundreds of millions of lines
of tests written with it and it covers most use cases without being to
heavy weight.  And I would be happy to contribute my tests to PROJ
(switching them to the PROJ license) and drop them from gdal-autotest2.

I really don't know Catch2 so I don't really have an opinion on how well it
works.

Either way, I will keep on doing PROJ/GEOS/GDAL testing in gtest for my own
work.

On Tue, May 29, 2018 at 1:57 PM, Mateusz Loskot <mateusz at loskot.net> wrote:

> On 29 May 2018 at 22:02, Kristian Evers <kreve at sdfe.dk> wrote:
> > On 29 May 2018, at 21:14, Mateusz Loskot <mateusz at loskot.net> wrote:
> >> On Tue, 29 May 2018, 20:37 Kristian Evers, <kreve at sdfe.dk> wrote:
> >>>
> >>> So in summation my proposed TODO list goes something like:
> >>>
> >>>     1. Move tests from src/ to the Catch2 framework
> >>>     2. Move selftest remnants in gie.c to the Catch2 framework
> >>>     3. Move shell-script tests in nad/ to test/
> >>>     4. Add a test framework for the command line applications, also in
> >>> test/
> >>>
> >>> Thoughts? What have I missed?
> >>
> >>
> >> Although might be to early, but perhaps an outline of tests organization
> >> into suites and cases.
> >>
> >> For example:
> >>
> >> - test suite per API function - a sort of unit kind of tests focused on
> >> exercising single function (similar tests also could verify definitions
> of
> >> data structures). Eg. Call foo(a, b) with valid, invalid, boundary,
> random,
> >> etc. values for parameters.
> >>
> >> - test suites of more complex test cases, more complex Arrangements
> >> preparing for actual test as well as more elaborate assertions
> following a
> >> testing act - I like to think of those as functional tests (function is
> a
> >> black box) or inter-function integration tests :) Eg.  Verifying
> conversion
> >> of X from CRS A to B gives expected results, depending on input valid,
> >> invalid, boundary…
> >
> > Your first point sounds like something we should do at least. We
> definitely
> > need tests for each function in the library. The second point, if I
> understand
> > correctly, is more or less covered by gie tests.
>
> Yes, I think so.
>
> Although, there are some cases where such Catch-based functional testing
> may be a good idea. For example, verification that pj_init and
> pj_init_plus for the
> same definition result in equialent instance of projPJ; any kind of
> verification
> of library/object states following interleaved/sequenced API calls;
> any kind of round-trips verification with assertions for intermediate
> results
> Such functional tests typically have more assertions per case than unit
> tests.
>
> Best regards,
> --
> Mateusz Loskot, http://mateusz.loskot.net
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180530/755a51ed/attachment.html>

From mateusz at loskot.net  Wed May 30 12:01:23 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed, 30 May 2018 21:01:23 +0200
Subject: [Proj] Testing framework
In-Reply-To: <CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<4E479081-4A02-4D6E-BC8F-7B184B2AC05C@sdfe.dk>
	<CABUeae9nMjsn4TWuxC9qzgYsa2=K_u2GX6CBkkLJo6+Ur0dTyQ@mail.gmail.com>
	<B37767B4-6B78-4E2C-ACD8-DDE4BF91B8C5@sdfe.dk>
	<FA257B53-A239-4D1E-93CE-E69C11537431@sdfe.dk>
	<CABUeae_xTW3yPpttQaT=CbMzc0v5C-wRYUv7STkSn5KQ1a4S3Q@mail.gmail.com>
	<6BD3A0AD-A80A-4780-B2F0-F532D69C86AC@sdfe.dk>
	<CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>
	<CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>
Message-ID: <CABUeae_H+AqxyvthMQjzhdeb3sLPrHq3G4eC7iP1MZZyHb5Ruw@mail.gmail.com>

Hi,

IMHO, choice of testing framework is secondary and focus should indeed be
on integration of Kurt's tests into upstream of PROJ, and GDAL and GEOS
too.
This is unfortunate situation that such valuable continuous efforts like
autotest2 lives outside the upstreams.
It would be pity if this situation clones into PROJ.


Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)

On Wed, 30 May 2018, 20:36 Kurt Schwehr, <schwehr at gmail.com> wrote:

> So... Just to state my preference.  I think Google
> Test(gtest/gmock/microbenchmark) would be great if PROJ decides to go that
> way.  It's been run through the ringer with hundreds of millions of lines
> of tests written with it and it covers most use cases without being to
> heavy weight.  And I would be happy to contribute my tests to PROJ
> (switching them to the PROJ license) and drop them from gdal-autotest2.
>
> I really don't know Catch2 so I don't really have an opinion on how well
> it works.
>
> Either way, I will keep on doing PROJ/GEOS/GDAL testing in gtest for my
> own work.
>
> On Tue, May 29, 2018 at 1:57 PM, Mateusz Loskot <mateusz at loskot.net>
> wrote:
>
>> On 29 May 2018 at 22:02, Kristian Evers <kreve at sdfe.dk> wrote:
>> > On 29 May 2018, at 21:14, Mateusz Loskot <mateusz at loskot.net> wrote:
>> >> On Tue, 29 May 2018, 20:37 Kristian Evers, <kreve at sdfe.dk> wrote:
>> >>>
>> >>> So in summation my proposed TODO list goes something like:
>> >>>
>> >>>     1. Move tests from src/ to the Catch2 framework
>> >>>     2. Move selftest remnants in gie.c to the Catch2 framework
>> >>>     3. Move shell-script tests in nad/ to test/
>> >>>     4. Add a test framework for the command line applications, also in
>> >>> test/
>> >>>
>> >>> Thoughts? What have I missed?
>> >>
>> >>
>> >> Although might be to early, but perhaps an outline of tests
>> organization
>> >> into suites and cases.
>> >>
>> >> For example:
>> >>
>> >> - test suite per API function - a sort of unit kind of tests focused on
>> >> exercising single function (similar tests also could verify
>> definitions of
>> >> data structures). Eg. Call foo(a, b) with valid, invalid, boundary,
>> random,
>> >> etc. values for parameters.
>> >>
>> >> - test suites of more complex test cases, more complex Arrangements
>> >> preparing for actual test as well as more elaborate assertions
>> following a
>> >> testing act - I like to think of those as functional tests (function
>> is a
>> >> black box) or inter-function integration tests :) Eg.  Verifying
>> conversion
>> >> of X from CRS A to B gives expected results, depending on input valid,
>> >> invalid, boundary…
>> >
>> > Your first point sounds like something we should do at least. We
>> definitely
>> > need tests for each function in the library. The second point, if I
>> understand
>> > correctly, is more or less covered by gie tests.
>>
>> Yes, I think so.
>>
>> Although, there are some cases where such Catch-based functional testing
>> may be a good idea. For example, verification that pj_init and
>> pj_init_plus for the
>> same definition result in equialent instance of projPJ; any kind of
>> verification
>> of library/object states following interleaved/sequenced API calls;
>> any kind of round-trips verification with assertions for intermediate
>> results
>> Such functional tests typically have more assertions per case than unit
>> tests.
>>
>> Best regards,
>> --
>> Mateusz Loskot, http://mateusz.loskot.net
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>
>
> --
> --
> http://schwehr.org
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180530/e135e26a/attachment.html>

From even.rouault at spatialys.com  Wed May 30 12:59:23 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 30 May 2018 21:59:23 +0200
Subject: [Proj] Testing framework
In-Reply-To: <CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700>
	<CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>
	<CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>
Message-ID: <8273848.815IrovVKI@even-i700>

On mercredi 30 mai 2018 11:36:06 CEST Kurt Schwehr wrote:
> So... Just to state my preference.  I think Google
> Test(gtest/gmock/microbenchmark) would be great if PROJ decides to go that
> way.  It's been run through the ringer with hundreds of millions of lines
> of tests written with it and it covers most use cases without being to
> heavy weight.  And I would be happy to contribute my tests to PROJ
> (switching them to the PROJ license) and drop them from gdal-autotest2.
> 
> I really don't know Catch2 so I don't really have an opinion on how well it
> works.
> 
> Either way, I will keep on doing PROJ/GEOS/GDAL testing in gtest for my own
> work.

I'm pretty sure for our basic needs whatever modern unit testing framework would do. catch2 with
its single header was just easier to integrate, and thus passed the least effort principle.

Just as an exercice, I've created a fake "gunit.h" that redirects to catch2:
{{{
#include "catch.hpp"

#define STR(x) #x
#define CONCAT(x,y) STR(x ## _ ## y)

#define TEST(x,y) TEST_CASE(CONCAT(x,y))
#define ASSERT_EQ(x,y) CHECK( (x) == (y) )
#define EXPECT_DOUBLE_EQ(x,y) CHECK( (x) == (y) )
#define EXPECT_TRUE(x) CHECK(x)
#define EXPECT_NEAR(x,y,tolerance) CHECK( (x) == Approx(y).margin(tolerance) )
}}}

and with that, I could integrate 
https://github.com/schwehr/gdal-autotest2/blob/master/cpp/third_party/proj/
	PJ_geos_test.cc
	pj_phi2_test.cc
	geodesic_test.cc

completely unmodified ([1]) and
"""
All tests passed (347 assertions in 7 test cases)
"""

See:
https://github.com/OSGeo/proj.4/commit/1e42254017c118c082bd79a6d63136d459c7d934

Interestingly there seems to be a slight precision issue on Mac on 2 steps.
See https://travis-ci.org/rouault/proj.4/builds/385859941


Even

[1] except an issue with isnan in pj_phi2_test.cpp, unrelated to the testing framework
https://github.com/rouault/proj.4/commit/ba4ef84f2be6b8532af527f1380e6071430165cd
probably using std::isnan instead of the macro hack would be better.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Wed May 30 13:13:40 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 30 May 2018 13:13:40 -0700
Subject: [Proj] Testing framework
In-Reply-To: <8273848.815IrovVKI@even-i700>
References: <4393072.BcZsAnsfFg@even-i700>
	<CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>
	<CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>
	<8273848.815IrovVKI@even-i700>
Message-ID: <CACmBxyvQc35mH7UP_yBviWsSTpscJ4_1X=M1sMH5BgDmKuPZEQ@mail.gmail.com>

Fun! (but a lot terrifying)

Agreed that std::isnan is probably better.

A more interesting case is when I use a class to setup/tear down a new ctx
for each test to give a clean error env...

https://github.com/schwehr/gdal-autotest2/blob/master/cpp/third_party/proj/aasincos_test.cc

I'll send a pull request to remove the Apache 2 license statement.  I don't
want to be adding code under a 2nd license to PROJ!

On Wed, May 30, 2018 at 12:59 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> On mercredi 30 mai 2018 11:36:06 CEST Kurt Schwehr wrote:
> > So... Just to state my preference.  I think Google
> > Test(gtest/gmock/microbenchmark) would be great if PROJ decides to go
> that
> > way.  It's been run through the ringer with hundreds of millions of lines
> > of tests written with it and it covers most use cases without being to
> > heavy weight.  And I would be happy to contribute my tests to PROJ
> > (switching them to the PROJ license) and drop them from gdal-autotest2.
> >
> > I really don't know Catch2 so I don't really have an opinion on how well
> it
> > works.
> >
> > Either way, I will keep on doing PROJ/GEOS/GDAL testing in gtest for my
> own
> > work.
>
> I'm pretty sure for our basic needs whatever modern unit testing framework
> would do. catch2 with
> its single header was just easier to integrate, and thus passed the least
> effort principle.
>
> Just as an exercice, I've created a fake "gunit.h" that redirects to
> catch2:
> {{{
> #include "catch.hpp"
>
> #define STR(x) #x
> #define CONCAT(x,y) STR(x ## _ ## y)
>
> #define TEST(x,y) TEST_CASE(CONCAT(x,y))
> #define ASSERT_EQ(x,y) CHECK( (x) == (y) )
> #define EXPECT_DOUBLE_EQ(x,y) CHECK( (x) == (y) )
> #define EXPECT_TRUE(x) CHECK(x)
> #define EXPECT_NEAR(x,y,tolerance) CHECK( (x) ==
> Approx(y).margin(tolerance) )
> }}}
>
> and with that, I could integrate
> https://github.com/schwehr/gdal-autotest2/blob/master/
> cpp/third_party/proj/
>         PJ_geos_test.cc
>         pj_phi2_test.cc
>         geodesic_test.cc
>
> completely unmodified ([1]) and
> """
> All tests passed (347 assertions in 7 test cases)
> """
>
> See:
> https://github.com/OSGeo/proj.4/commit/1e42254017c118c082bd79a6d63136
> d459c7d934
>
> Interestingly there seems to be a slight precision issue on Mac on 2 steps.
> See https://travis-ci.org/rouault/proj.4/builds/385859941
>
>
> Even
>
> [1] except an issue with isnan in pj_phi2_test.cpp, unrelated to the
> testing framework
> https://github.com/rouault/proj.4/commit/ba4ef84f2be6b8532af527f1380e60
> 71430165cd
> probably using std::isnan instead of the macro hack would be better.
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180530/032c799f/attachment.html>

From mateusz at loskot.net  Wed May 30 13:21:01 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed, 30 May 2018 22:21:01 +0200
Subject: [Proj] Testing framework
In-Reply-To: <8273848.815IrovVKI@even-i700>
References: <4393072.BcZsAnsfFg@even-i700>
	<CABUeae9ZCe-q=3z9UCexR46P1D2LRjHwE4pX+Cnk=QqG-+3vnQ@mail.gmail.com>
	<CACmBxysQ321JggS8WyUp_St29B0hTqF0rSviv+guVEgwzGPgKg@mail.gmail.com>
	<8273848.815IrovVKI@even-i700>
Message-ID: <CABUeae_2gRnGO70GwQ_YD5BYtSsYsPnfaBu0grPFxsAWRwT8Ow@mail.gmail.com>

On Wed, 30 May 2018, 22:00 Even Rouault, <even.rouault at spatialys.com> wrote:

> On mercredi 30 mai 2018 11:36:06 CEST Kurt Schwehr wrote:
> > So... Just to state my preference.  I think Google
> > Test(gtest/gmock/microbenchmark) would be great if PROJ decides to go
> that
> > way.  It's been run through the ringer with hundreds of millions of lines
> > of tests written with it and it covers most use cases without being to
> > heavy weight.  And I would be happy to contribute my tests to PROJ
> > (switching them to the PROJ license) and drop them from gdal-autotest2.
> >
> > I really don't know Catch2 so I don't really have an opinion on how well
> it
> > works.
> >
> > Either way, I will keep on doing PROJ/GEOS/GDAL testing in gtest for my
> own
> > work.
>
> I'm pretty sure for our basic needs whatever modern unit testing framework
> would do. catch2 with
> its single header was just easier to integrate, and thus passed the least
> effort principle.
>

In short term, perhaps.

I've just realised that for the API unit tests I'm planning to write almost
exactly the same tests as Kurt has already written.

To me, that's just confirmed diagnosis of the problem. For long term, it's
gonna be worse.
I know I'm not the major contributor here or contributor to be,
it's just my earlier disappointment about Kurt's test not actually
replacing my initial/old GDAL C++ tests.
This seems to be lost opportunity or waste of parallel efforts trying to
achieve the same goal - nobody runs autotest2 but Kurt, users who build
from sources do not run them, etc.

I fear that this pattern is spreading now across not one GDAL but multiple
OSGeo libraries.

Mateusz Loskot, mateusz at loskot.net
(Sent from mobile)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180530/25e6f0e7/attachment.html>

From even.rouault at spatialys.com  Wed May 30 13:36:48 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 30 May 2018 22:36:48 +0200
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae_2gRnGO70GwQ_YD5BYtSsYsPnfaBu0grPFxsAWRwT8Ow@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700> <8273848.815IrovVKI@even-i700>
	<CABUeae_2gRnGO70GwQ_YD5BYtSsYsPnfaBu0grPFxsAWRwT8Ow@mail.gmail.com>
Message-ID: <14848116.oSFnod3BrU@even-i700>

> > I'm pretty sure for our basic needs whatever modern unit testing framework
> > would do. catch2 with
> > its single header was just easier to integrate, and thus passed the least
> > effort principle.
> 
> In short term, perhaps.
> 
> I've just realised that for the API unit tests I'm planning to write almost
> exactly the same tests as Kurt has already written.
> 
> To me, that's just confirmed diagnosis of the problem. For long term, it's
> gonna be worse.
> I know I'm not the major contributor here or contributor to be,
> it's just my earlier disappointment about Kurt's test not actually
> replacing my initial/old GDAL C++ tests.
> This seems to be lost opportunity or waste of parallel efforts trying to
> achieve the same goal - nobody runs autotest2 but Kurt, users who build
> from sources do not run them, etc.
> 
> I fear that this pattern is spreading now across not one GDAL but multiple
> OSGeo libraries.

I 'm also sad about this situation of efforts done in parallel of upstream 
projects. If Kurt wants to integrate his tests for the PROJ part using GTest, 
I'm happy with that, but that should be done quickly before I have too many 
catch2 tests written. In the PROJ context, that would mean having both a 
automake and cmake way of building GTest (probably GTest minimum code & 
headers integrated in proj source tree for conveniency ?). I'm not really 
confortable enough with build systems to do such an effort for a test 
framework.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Wed May 30 13:56:56 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 30 May 2018 13:56:56 -0700
Subject: [Proj] Testing framework
In-Reply-To: <14848116.oSFnod3BrU@even-i700>
References: <4393072.BcZsAnsfFg@even-i700> <8273848.815IrovVKI@even-i700>
	<CABUeae_2gRnGO70GwQ_YD5BYtSsYsPnfaBu0grPFxsAWRwT8Ow@mail.gmail.com>
	<14848116.oSFnod3BrU@even-i700>
Message-ID: <CACmBxysf3fFxPNvus5ejsLk4Dbashx2nYLiLvQWoqREzUXoqXQ@mail.gmail.com>

If we go with GoogleTest, the instructions for CMake and autotest are here:

https://github.com/google/googletest/blob/master/googletest/README.md#incorporating-into-an-existing-cmake-project

I've never done the CMake or autoconf setups.

On Wed, May 30, 2018 at 1:36 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> > > I'm pretty sure for our basic needs whatever modern unit testing
> framework
> > > would do. catch2 with
> > > its single header was just easier to integrate, and thus passed the
> least
> > > effort principle.
> >
> > In short term, perhaps.
> >
> > I've just realised that for the API unit tests I'm planning to write
> almost
> > exactly the same tests as Kurt has already written.
> >
> > To me, that's just confirmed diagnosis of the problem. For long term,
> it's
> > gonna be worse.
> > I know I'm not the major contributor here or contributor to be,
> > it's just my earlier disappointment about Kurt's test not actually
> > replacing my initial/old GDAL C++ tests.
> > This seems to be lost opportunity or waste of parallel efforts trying to
> > achieve the same goal - nobody runs autotest2 but Kurt, users who build
> > from sources do not run them, etc.
> >
> > I fear that this pattern is spreading now across not one GDAL but
> multiple
> > OSGeo libraries.
>
> I 'm also sad about this situation of efforts done in parallel of upstream
> projects. If Kurt wants to integrate his tests for the PROJ part using
> GTest,
> I'm happy with that, but that should be done quickly before I have too
> many
> catch2 tests written. In the PROJ context, that would mean having both a
> automake and cmake way of building GTest (probably GTest minimum code &
> headers integrated in proj source tree for conveniency ?). I'm not really
> confortable enough with build systems to do such an effort for a test
> framework.
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180530/5126fa4d/attachment.html>

From mateusz at loskot.net  Wed May 30 14:07:38 2018
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed, 30 May 2018 23:07:38 +0200
Subject: [Proj] Testing framework
In-Reply-To: <14848116.oSFnod3BrU@even-i700>
References: <4393072.BcZsAnsfFg@even-i700> <8273848.815IrovVKI@even-i700>
	<CABUeae_2gRnGO70GwQ_YD5BYtSsYsPnfaBu0grPFxsAWRwT8Ow@mail.gmail.com>
	<14848116.oSFnod3BrU@even-i700>
Message-ID: <CABUeae9iUWZGu_xqW6npSkD4En1rNCL0c5i=T3RC44VcT2rPcQ@mail.gmail.com>

On 30 May 2018 at 22:36, Even Rouault <even.rouault at spatialys.com> wrote:
>> > I'm pretty sure for our basic needs whatever modern unit testing framework
>> > would do. catch2 with
>> > its single header was just easier to integrate, and thus passed the least
>> > effort principle.
>>
>> In short term, perhaps.
>>
>> I've just realised that for the API unit tests I'm planning to write almost
>> exactly the same tests as Kurt has already written.
>>
>> To me, that's just confirmed diagnosis of the problem. For long term, it's
>> gonna be worse.
>> I know I'm not the major contributor here or contributor to be,
>> it's just my earlier disappointment about Kurt's test not actually
>> replacing my initial/old GDAL C++ tests.
>> This seems to be lost opportunity or waste of parallel efforts trying to
>> achieve the same goal - nobody runs autotest2 but Kurt, users who build
>> from sources do not run them, etc.
>>
>> I fear that this pattern is spreading now across not one GDAL but multiple
>> OSGeo libraries.
>
> I'm also sad about this situation of efforts done in parallel of upstream
> projects. If Kurt wants to integrate his tests for the PROJ part using GTest,
> I'm happy with that, but that should be done quickly before I have too many
> catch2 tests written.

Even, I appreciate that.
I hope it's not a rashly change.
Assuming there are no objections, I can help Kurt

> In the PROJ context, that would mean having both a
> automake and cmake way of building GTest (probably GTest minimum code &
> headers integrated in proj source tree for conveniency ?). I'm not really
> confortable enough with build systems to do such an effort for a test
> framework.

I can do it next after the weekend  (public holiday in PL and long
weekend away).
Luckily, FindGTest guesser for CMake comes with the official package
since CMake 3.0.
I can also do it for Autoconf.

Kurt, let me know (off-list fine) if you need help.

Best regards,
-- 
Mateusz Loskot, http://mateusz.loskot.net


From even.rouault at spatialys.com  Wed May 30 18:06:38 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 31 May 2018 03:06:38 +0200
Subject: [Proj] Testing framework
In-Reply-To: <CABUeae9iUWZGu_xqW6npSkD4En1rNCL0c5i=T3RC44VcT2rPcQ@mail.gmail.com>
References: <4393072.BcZsAnsfFg@even-i700> <14848116.oSFnod3BrU@even-i700>
	<CABUeae9iUWZGu_xqW6npSkD4En1rNCL0c5i=T3RC44VcT2rPcQ@mail.gmail.com>
Message-ID: <8185627.WpmAijl9HK@even-i700>

> I can do it next after the weekend  (public holiday in PL and long
> weekend away).
> Luckily, FindGTest guesser for CMake comes with the official package
> since CMake 3.0.
> I can also do it for Autoconf.

Oh well... I had a take at the autoconf setup and got it working, so that's 
good enough for now. I'll appreciate if you/someone else can take care of the 
cmake integration.

https://github.com/OSGeo/proj.4/pull/1024

Kurt, what is the gunit.h header you include in your tests ? Can't see that in 
googletest.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From schwehr at gmail.com  Wed May 30 18:14:59 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 30 May 2018 18:14:59 -0700
Subject: [Proj] Testing framework
In-Reply-To: <8185627.WpmAijl9HK@even-i700>
References: <4393072.BcZsAnsfFg@even-i700> <14848116.oSFnod3BrU@even-i700>
	<CABUeae9iUWZGu_xqW6npSkD4En1rNCL0c5i=T3RC44VcT2rPcQ@mail.gmail.com>
	<8185627.WpmAijl9HK@even-i700>
Message-ID: <CACmBxyt6dSLwW++7PST8ReHO86kqtSY7F1X+Oed7F3SoGsyH=w@mail.gmail.com>

It probably should be this?

#include "gunit/gunit.h"

It's this file:

https://github.com/google/googletest/blob/master/googletest/include/gtest/gtest.h

On Wed, May 30, 2018 at 6:06 PM, Even Rouault <even.rouault at spatialys.com>
wrote:

> > I can do it next after the weekend  (public holiday in PL and long
> > weekend away).
> > Luckily, FindGTest guesser for CMake comes with the official package
> > since CMake 3.0.
> > I can also do it for Autoconf.
>
> Oh well... I had a take at the autoconf setup and got it working, so
> that's
> good enough for now. I'll appreciate if you/someone else can take care of
> the
> cmake integration.
>
> https://github.com/OSGeo/proj.4/pull/1024
>
> Kurt, what is the gunit.h header you include in your tests ? Can't see
> that in
> googletest.
>
> Even
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180530/922e4011/attachment.html>

From howard at hobu.co  Thu May 31 13:00:29 2018
From: howard at hobu.co (Howard Butler)
Date: Thu, 31 May 2018 15:00:29 -0500
Subject: [Proj] PROJ PSC
Message-ID: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>

All,

In the interest of self determination, I propose that PROJ form a PSC
with the following membership:


Even Rouault

Kristian Evers

Thomas Knudsen

Charles Karney

Howard Butler

Frank Warmerdam (emeritus)


It is silly that PROJ must put forward release motions to the (mostly
dead) MetaCRS list within OSGeo. I propose we follow something like
MapServer [1] or GDAL [2] PSC rules. I don't think it matters a whole
lot other than to have some sort of ratification procedure over the
release process that is lead by members who have a stake in the outcome
being done properly. That doesn't exist with MetaCRS.


Howard

[1] http://mapserver.org/development/rfc/ms-rfc-23.html

[2] https://trac.osgeo.org/gdal/wiki/rfc3_commiters


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/882bc8ac/attachment.sig>

From even.rouault at spatialys.com  Thu May 31 13:10:53 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 31 May 2018 22:10:53 +0200
Subject: [Proj] PROJ PSC
In-Reply-To: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
Message-ID: <3720960.Po6CqZlqMz@even-i700>

On jeudi 31 mai 2018 15:00:29 CEST Howard Butler wrote:
> All,
> 
> In the interest of self determination, I propose that PROJ form a PSC
> with the following membership:

+1 (of course voting in a bootstrapping phase is a bit tricky :-) )

Actually the GDAL PSC rules are in
https://trac.osgeo.org/gdal/wiki/rfc1_pmc

And they are exactly the same as the MapServer ones in
http://mapserver.org/development/rfc/ms-rfc-23.html

Those governance rules have proved to be robust for the 2 projects (I believe 
a few others have taken inspiration from them too) for more than 10 years now.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com


From kreve at sdfe.dk  Thu May 31 13:26:33 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 31 May 2018 20:26:33 +0000
Subject: [Proj] PROJ PSC
In-Reply-To: <3720960.Po6CqZlqMz@even-i700>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
	<3720960.Po6CqZlqMz@even-i700>
Message-ID: <0742995D-6E4D-4437-9F99-B9D98EE2165A@sdfe.dk>

I am also on board with this. Certainly makes more sense than the current setup.
Using the GDAL/MapServer PSC rules is a good idea - we don’t need to reinvent
the wheel.

Forming a PROJ PSC is effectively breaking out of MetaCRS. The MetaCRS PSC
guidelines [0] does not cover that topic but a vote seems to be in order. To ensure
the formalities are kept. This would in all likelihood be the last vote for the MetaCRS
PCS.

/Kristian

[0] https://trac.osgeo.org/metacrs/wiki/PSCGuidelines

On 31 May 2018, at 22:10, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

On jeudi 31 mai 2018 15:00:29 CEST Howard Butler wrote:
All,

In the interest of self determination, I propose that PROJ form a PSC
with the following membership:

+1 (of course voting in a bootstrapping phase is a bit tricky :-) )

Actually the GDAL PSC rules are in
https://trac.osgeo.org/gdal/wiki/rfc1_pmc

And they are exactly the same as the MapServer ones in
http://mapserver.org/development/rfc/ms-rfc-23.html

Those governance rules have proved to be robust for the 2 projects (I believe
a few others have taken inspiration from them too) for more than 10 years now.

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
Proj mailing list
Proj at lists.maptools.org
http://lists.maptools.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/34964502/attachment.html>

From jmckenna at gatewaygeomatics.com  Thu May 31 13:46:04 2018
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Thu, 31 May 2018 17:46:04 -0300
Subject: [Proj] PROJ PSC
In-Reply-To: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
Message-ID: <7104f3b0-101e-80cf-1110-1b3e793b8257@gatewaygeomatics.com>

Fully agreed Howard, makes sense.  -jeff



On 2018-05-31 5:00 PM, Howard Butler wrote:
> All,
> 
> In the interest of self determination, I propose that PROJ form a PSC
> with the following membership:
> 
> 
> Even Rouault
> 
> Kristian Evers
> 
> Thomas Knudsen
> 
> Charles Karney
> 
> Howard Butler
> 
> Frank Warmerdam (emeritus)
> 
> 
> It is silly that PROJ must put forward release motions to the (mostly
> dead) MetaCRS list within OSGeo. I propose we follow something like
> MapServer [1] or GDAL [2] PSC rules. I don't think it matters a whole
> lot other than to have some sort of ratification procedure over the
> release process that is lead by members who have a stake in the outcome
> being done properly. That doesn't exist with MetaCRS.
> 
> 
> Howard
> 
> [1] http://mapserver.org/development/rfc/ms-rfc-23.html
> 
> [2] https://trac.osgeo.org/gdal/wiki/rfc3_commiters
> 
> 
> 
-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeomatics.com/


From huwejames at gmail.com  Thu May 31 13:54:53 2018
From: huwejames at gmail.com (Huw James)
Date: Thu, 31 May 2018 15:54:53 -0500
Subject: [Proj] PROJ PSC
In-Reply-To: <0742995D-6E4D-4437-9F99-B9D98EE2165A@sdfe.dk>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
	<3720960.Po6CqZlqMz@even-i700>
	<0742995D-6E4D-4437-9F99-B9D98EE2165A@sdfe.dk>
Message-ID: <CAMMNKS4c4cE7HAAh=iO8zvugqnuD9-J-fR-k73W_2n5-KULCzA@mail.gmail.com>

Please define the PSC and define its rules of membership and its rules of
operation.

If you wish to cull the e-mail list of dead, missing or plain lost interest
members there are less draconian measures.

I'm a member of this list to keep up with changes in Projections and Datums
in the PROG.4 code base.I'm not very interested in long drawn out
discussions on coding style that are not driven by problems and
requirements. A small part of the code base seems to generate most of the
problems which indicates to me that the design of this part is not clean
and does not foresee and avoid maintenance problems.

If you wish I'm happy to split off the code and development and then
maintain a system that is open to all and their very diverse needs.

I hope that is clear to all, if you cannot get along with your proposed
"PSC" outsiders it seems that you are unsuitable to be responsible for an
open system. Where is Mr. Troxell?

best wishes,

Huw James

cell:  281-318-8027

On Thu, May 31, 2018 at 3:26 PM, Kristian Evers <kreve at sdfe.dk> wrote:

> I am also on board with this. Certainly makes more sense than the current
> setup.
> Using the GDAL/MapServer PSC rules is a good idea - we don’t need to
> reinvent
> the wheel.
>
> Forming a PROJ PSC is effectively breaking out of MetaCRS. The MetaCRS PSC
> guidelines [0] does not cover that topic but a vote seems to be in order.
> To ensure
> the formalities are kept. This would in all likelihood be the last vote
> for the MetaCRS
> PCS.
>
> /Kristian
>
> [0] https://trac.osgeo.org/metacrs/wiki/PSCGuidelines
>
>
> On 31 May 2018, at 22:10, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On jeudi 31 mai 2018 15:00:29 CEST Howard Butler wrote:
>
> All,
>
> In the interest of self determination, I propose that PROJ form a PSC
> with the following membership:
>
>
> +1 (of course voting in a bootstrapping phase is a bit tricky :-) )
>
> Actually the GDAL PSC rules are in
> https://trac.osgeo.org/gdal/wiki/rfc1_pmc
>
> And they are exactly the same as the MapServer ones in
> http://mapserver.org/development/rfc/ms-rfc-23.html
>
> Those governance rules have proved to be robust for the 2 projects (I
> believe
> a few others have taken inspiration from them too) for more than 10 years
> now.
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/cec3d8c8/attachment.html>

From gdt at lexort.com  Thu May 31 14:06:55 2018
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 31 May 2018 17:06:55 -0400
Subject: [Proj] PROJ PSC
In-Reply-To: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co> (Howard Butler's
	message of "Thu, 31 May 2018 15:00:29 -0500")
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
Message-ID: <smuvab3edqo.fsf@linuxpal.mit.edu>


Howard Butler <howard at hobu.co> writes:

> In the interest of self determination, I propose that PROJ form a PSC
> with the following membership:

No objection to the concept, but this raises the issue of whether the
project is operating under the aegis of charitable nonprofit
corporation.  I admit to having no clue about that before, and I'm not
saying it's a big deal, but clarity is good.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 162 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/bf5b372a/attachment.sig>

From warmerdam at pobox.com  Thu May 31 14:26:09 2018
From: warmerdam at pobox.com (Frank Warmerdam)
Date: Thu, 31 May 2018 14:26:09 -0700
Subject: [Proj] PROJ PSC
In-Reply-To: <smuvab3edqo.fsf@linuxpal.mit.edu>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
	<smuvab3edqo.fsf@linuxpal.mit.edu>
Message-ID: <CA+YzLBf7wsr+OkqhPORFjouNNqtgKukNNCLMPNMjvXJSXex2FQ@mail.gmail.com>

Howard,

I can imagine a few ways forward:

 - We could just add the named contributors to the MetaCRS PSC and it might
be that only those interested in PROJ.4 vote on PROJ.4 proposals.
 - We could form a PROJ PSC and have the MetaCRS PSC authorize it to make
decisions about PROJ.4 on a slightly less officious basis than normal PSC
rules.
 - We might want to consider the MetaCRS "experiment" to have run it's
course and not worked out particularly well and dissolve MetaCRS other than
perhaps as a potentially mailing list for coordination of related projects,
and proceed with PROJ.4 as an independent project with it's own PSC, etc.

I'd be happy enough with the third approach.  MetaCRS was mostly my
brainchild and I'm willing to agree it is not really a functioning thing.

Best regards,
Frank


On Thu, May 31, 2018 at 2:06 PM, Greg Troxel <gdt at lexort.com> wrote:

>
> Howard Butler <howard at hobu.co> writes:
>
> > In the interest of self determination, I propose that PROJ form a PSC
> > with the following membership:
>
> No objection to the concept, but this raises the issue of whether the
> project is operating under the aegis of charitable nonprofit
> corporation.  I admit to having no clue about that before, and I'm not
> saying it's a big deal, but clarity is good.
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
---------------------------------------+--------------------------------------
I set the clouds in motion - turn up   | Frank Warmerdam,
warmerdam at pobox.com
light and sound - activate the windows |
and watch the world go round - Rush    | Geospatial Software Developer
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/07fbc2b9/attachment.html>

From howard at hobu.co  Thu May 31 15:00:32 2018
From: howard at hobu.co (Howard Butler)
Date: Thu, 31 May 2018 17:00:32 -0500
Subject: [Proj] PROJ PSC
In-Reply-To: <CA+YzLBf7wsr+OkqhPORFjouNNqtgKukNNCLMPNMjvXJSXex2FQ@mail.gmail.com>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
	<smuvab3edqo.fsf@linuxpal.mit.edu>
	<CA+YzLBf7wsr+OkqhPORFjouNNqtgKukNNCLMPNMjvXJSXex2FQ@mail.gmail.com>
Message-ID: <131576f9-6691-fb7c-50a2-37533e4b544f@hobu.co>

Greg,


PROJ has never operated under the aegis of anything really. The MetaCRS
attempt tried to rally SRS-related software projects under an umbrella
within OSGeo, but as I've mentioned on the MetaCRS list [1], it is a
failure as an organizing principle for the software projects. We are
ostensibly required to vote within MetaCRS to agree on a release, but it
is unfortunate make-work that doesn't really protect the release, and it
is a motion put forward to an uninterested voting base. I think it is
time to dissolve MetaCRS as an authority at least as it pertains to
releases and software project management. It's still a great mailing
list with access to real expertise on coordinate systems (that overlaps
with this mailing list, but not entirely).


PROJ needs some kind of body for release organization and technical
dispute resolution (we've never had one). A PSC will be a better
governance situation than exists now for PROJ. The PSC approach,
pioneered by Frank in the MapServer and GDAL communities, would work
very well for PROJ. The PSC names I listed were chosen because they have
been active recently (well, except Frank, who provides institutional
memory).


After Frank moved on, I stepped forward as the PROJ maintainer, but I
know very little about coordinate systems. I just tried to keep the
lights on and sweep the (documentation) floor. Thankfully, Kristian,
Charles, Kurt, and Thomas have stepped forward to takeover and provide
technical and academic heft to really improve things. Their PROJ efforts
are the basis of the GDAL SRS Barn Raising effort https://gdalbarn.com,
and without their contributions, there wouldn't be any traffic about
code styles, testing frameworks, or object hierarchies. PROJ has seen
more activity in the past year than it had in the previous fifteen. Its
renewal has been fantastic to watch.




Howard



[1] https://lists.osgeo.org/pipermail/metacrs/2017-August/000956.html



On 5/31/18 4:26 PM, Frank Warmerdam wrote:
> Howard,
>
> I can imagine a few ways forward:
>
>  - We could just add the named contributors to the MetaCRS PSC and it might
> be that only those interested in PROJ.4 vote on PROJ.4 proposals.
>  - We could form a PROJ PSC and have the MetaCRS PSC authorize it to make
> decisions about PROJ.4 on a slightly less officious basis than normal PSC
> rules.
>  - We might want to consider the MetaCRS "experiment" to have run it's
> course and not worked out particularly well and dissolve MetaCRS other than
> perhaps as a potentially mailing list for coordination of related projects,
> and proceed with PROJ.4 as an independent project with it's own PSC, etc.
>
> I'd be happy enough with the third approach.  MetaCRS was mostly my
> brainchild and I'm willing to agree it is not really a functioning thing.
>
> Best regards,
> Frank
>
>
> On Thu, May 31, 2018 at 2:06 PM, Greg Troxel <gdt at lexort.com> wrote:
>
>> Howard Butler <howard at hobu.co> writes:
>>
>>> In the interest of self determination, I propose that PROJ form a PSC
>>> with the following membership:
>> No objection to the concept, but this raises the issue of whether the
>> project is operating under the aegis of charitable nonprofit
>> corporation.  I admit to having no clue about that before, and I'm not
>> saying it's a big deal, but clarity is good.
>>
>> _______________________________________________
>> Proj mailing list
>> Proj at lists.maptools.org
>> http://lists.maptools.org/mailman/listinfo/proj
>>
>
>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 528 bytes
Desc: OpenPGP digital signature
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/6d2f0cc5/attachment.sig>

From richard.greenwood at gmail.com  Thu May 31 19:37:19 2018
From: richard.greenwood at gmail.com (Richard Greenwood)
Date: Thu, 31 May 2018 20:37:19 -0600
Subject: [Proj] PROJ PSC
In-Reply-To: <131576f9-6691-fb7c-50a2-37533e4b544f@hobu.co>
References: <1dc0644c-e3fd-afc9-8f43-80d256678de1@hobu.co>
	<smuvab3edqo.fsf@linuxpal.mit.edu>
	<CA+YzLBf7wsr+OkqhPORFjouNNqtgKukNNCLMPNMjvXJSXex2FQ@mail.gmail.com>
	<131576f9-6691-fb7c-50a2-37533e4b544f@hobu.co>
Message-ID: <CAHBySPaRowTJ5stMhgEGqSu1aiaQ0Rjuojt9yFZ-xg7QA_KE=w@mail.gmail.com>

It makes sense to me. Having followed this project and this list for a lot
of years I'm really happy to see the energy that has been injected into
Proj in the last couple years. I encourage appropriate steps to keep that
momentum going.

Rich


On Thu, May 31, 2018 at 4:00 PM, Howard Butler <howard at hobu.co> wrote:

> Greg,
>
>
> PROJ has never operated under the aegis of anything really. The MetaCRS
> attempt tried to rally SRS-related software projects under an umbrella
> within OSGeo, but as I've mentioned on the MetaCRS list [1], it is a
> failure as an organizing principle for the software projects. We are
> ostensibly required to vote within MetaCRS to agree on a release, but it
> is unfortunate make-work that doesn't really protect the release, and it
> is a motion put forward to an uninterested voting base. I think it is
> time to dissolve MetaCRS as an authority at least as it pertains to
> releases and software project management. It's still a great mailing
> list with access to real expertise on coordinate systems (that overlaps
> with this mailing list, but not entirely).
>
>
> PROJ needs some kind of body for release organization and technical
> dispute resolution (we've never had one). A PSC will be a better
> governance situation than exists now for PROJ. The PSC approach,
> pioneered by Frank in the MapServer and GDAL communities, would work
> very well for PROJ. The PSC names I listed were chosen because they have
> been active recently (well, except Frank, who provides institutional
> memory).
>
>
> After Frank moved on, I stepped forward as the PROJ maintainer, but I
> know very little about coordinate systems. I just tried to keep the
> lights on and sweep the (documentation) floor. Thankfully, Kristian,
> Charles, Kurt, and Thomas have stepped forward to takeover and provide
> technical and academic heft to really improve things. Their PROJ efforts
> are the basis of the GDAL SRS Barn Raising effort https://gdalbarn.com,
> and without their contributions, there wouldn't be any traffic about
> code styles, testing frameworks, or object hierarchies. PROJ has seen
> more activity in the past year than it had in the previous fifteen. Its
> renewal has been fantastic to watch.
>
>
>
>
> Howard
>
>
>
> [1] https://lists.osgeo.org/pipermail/metacrs/2017-August/000956.html
>
>
>
> On 5/31/18 4:26 PM, Frank Warmerdam wrote:
> > Howard,
> >
> > I can imagine a few ways forward:
> >
> >  - We could just add the named contributors to the MetaCRS PSC and it
> might
> > be that only those interested in PROJ.4 vote on PROJ.4 proposals.
> >  - We could form a PROJ PSC and have the MetaCRS PSC authorize it to make
> > decisions about PROJ.4 on a slightly less officious basis than normal PSC
> > rules.
> >  - We might want to consider the MetaCRS "experiment" to have run it's
> > course and not worked out particularly well and dissolve MetaCRS other
> than
> > perhaps as a potentially mailing list for coordination of related
> projects,
> > and proceed with PROJ.4 as an independent project with it's own PSC, etc.
> >
> > I'd be happy enough with the third approach.  MetaCRS was mostly my
> > brainchild and I'm willing to agree it is not really a functioning thing.
> >
> > Best regards,
> > Frank
> >
> >
> > On Thu, May 31, 2018 at 2:06 PM, Greg Troxel <gdt at lexort.com> wrote:
> >
> >> Howard Butler <howard at hobu.co> writes:
> >>
> >>> In the interest of self determination, I propose that PROJ form a PSC
> >>> with the following membership:
> >> No objection to the concept, but this raises the issue of whether the
> >> project is operating under the aegis of charitable nonprofit
> >> corporation.  I admit to having no clue about that before, and I'm not
> >> saying it's a big deal, but clarity is good.
> >>
> >> _______________________________________________
> >> Proj mailing list
> >> Proj at lists.maptools.org
> >> http://lists.maptools.org/mailman/listinfo/proj
> >>
> >
> >
>
>
>
> _______________________________________________
> Proj mailing list
> Proj at lists.maptools.org
> http://lists.maptools.org/mailman/listinfo/proj
>



-- 
Richard W. Greenwood, PLS
www.greenwoodmap.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20180531/1c8160ef/attachment.html>

